[
  {
    "sha": "7d8f0e8fa5dc57219cbb277a0c985611c3f707e0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZDhmMGU4ZmE1ZGM1NzIxOWNiYjI3N2EwYzk4NTYxMWMzZjcwN2Uw",
    "commit": {
      "author": {
        "name": "BlockMechanic",
        "email": "blockmecha@gmail.com",
        "date": "2019-08-22T20:22:32Z"
      },
      "committer": {
        "name": "BlockMechanic",
        "email": "blockmecha@gmail.com",
        "date": "2019-08-22T20:22:32Z"
      },
      "message": "Fix missing destructor in class\n\nFixes missing destructor in abstract class CBlockHeader. Not an error but introduces annoying warnings if compiling with clang.",
      "tree": {
        "sha": "2e2cff585183ca8fcc215666592a60119f8145d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2e2cff585183ca8fcc215666592a60119f8145d6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7d8f0e8fa5dc57219cbb277a0c985611c3f707e0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d8f0e8fa5dc57219cbb277a0c985611c3f707e0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7d8f0e8fa5dc57219cbb277a0c985611c3f707e0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d8f0e8fa5dc57219cbb277a0c985611c3f707e0/comments",
    "author": {
      "login": "BlockMechanic",
      "id": 24528627,
      "node_id": "MDQ6VXNlcjI0NTI4NjI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/24528627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BlockMechanic",
      "html_url": "https://github.com/BlockMechanic",
      "followers_url": "https://api.github.com/users/BlockMechanic/followers",
      "following_url": "https://api.github.com/users/BlockMechanic/following{/other_user}",
      "gists_url": "https://api.github.com/users/BlockMechanic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BlockMechanic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BlockMechanic/subscriptions",
      "organizations_url": "https://api.github.com/users/BlockMechanic/orgs",
      "repos_url": "https://api.github.com/users/BlockMechanic/repos",
      "events_url": "https://api.github.com/users/BlockMechanic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BlockMechanic/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "BlockMechanic",
      "id": 24528627,
      "node_id": "MDQ6VXNlcjI0NTI4NjI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/24528627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BlockMechanic",
      "html_url": "https://github.com/BlockMechanic",
      "followers_url": "https://api.github.com/users/BlockMechanic/followers",
      "following_url": "https://api.github.com/users/BlockMechanic/following{/other_user}",
      "gists_url": "https://api.github.com/users/BlockMechanic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BlockMechanic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BlockMechanic/subscriptions",
      "organizations_url": "https://api.github.com/users/BlockMechanic/orgs",
      "repos_url": "https://api.github.com/users/BlockMechanic/repos",
      "events_url": "https://api.github.com/users/BlockMechanic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BlockMechanic/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "332c6134bb15384e5b91c631e821fe52a591d3bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/332c6134bb15384e5b91c631e821fe52a591d3bc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/332c6134bb15384e5b91c631e821fe52a591d3bc"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "44d1696303eb0b1da34f9d1e275d489f18b11959",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d8f0e8fa5dc57219cbb277a0c985611c3f707e0/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d8f0e8fa5dc57219cbb277a0c985611c3f707e0/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=7d8f0e8fa5dc57219cbb277a0c985611c3f707e0",
        "patch": "@@ -28,6 +28,8 @@ class CBlockHeader\n     uint32_t nBits;\n     uint32_t nNonce;\n \n+    virtual ~CBlockHeader() = default;\n+\n     CBlockHeader()\n     {\n         SetNull();"
      }
    ]
  },
  {
    "sha": "3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZWFhMDAyMzFlMGJiNjE1Y2UzMmJjMWI3N2VkNmI3ZWJhZTVhOWFh",
    "commit": {
      "author": {
        "name": "BlockMechanic",
        "email": "blockmecha@gmail.com",
        "date": "2019-08-24T15:31:17Z"
      },
      "committer": {
        "name": "BlockMechanic",
        "email": "blockmecha@gmail.com",
        "date": "2019-08-24T15:31:17Z"
      },
      "message": "Revert \"Fix missing destructor in class\"\n\nThis reverts commit 7d8f0e8fa5dc57219cbb277a0c985611c3f707e0.",
      "tree": {
        "sha": "9ec76c4738769ff4efd96de49b143bb03cf9d82c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9ec76c4738769ff4efd96de49b143bb03cf9d82c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/comments",
    "author": {
      "login": "BlockMechanic",
      "id": 24528627,
      "node_id": "MDQ6VXNlcjI0NTI4NjI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/24528627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BlockMechanic",
      "html_url": "https://github.com/BlockMechanic",
      "followers_url": "https://api.github.com/users/BlockMechanic/followers",
      "following_url": "https://api.github.com/users/BlockMechanic/following{/other_user}",
      "gists_url": "https://api.github.com/users/BlockMechanic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BlockMechanic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BlockMechanic/subscriptions",
      "organizations_url": "https://api.github.com/users/BlockMechanic/orgs",
      "repos_url": "https://api.github.com/users/BlockMechanic/repos",
      "events_url": "https://api.github.com/users/BlockMechanic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BlockMechanic/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "BlockMechanic",
      "id": 24528627,
      "node_id": "MDQ6VXNlcjI0NTI4NjI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/24528627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BlockMechanic",
      "html_url": "https://github.com/BlockMechanic",
      "followers_url": "https://api.github.com/users/BlockMechanic/followers",
      "following_url": "https://api.github.com/users/BlockMechanic/following{/other_user}",
      "gists_url": "https://api.github.com/users/BlockMechanic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BlockMechanic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BlockMechanic/subscriptions",
      "organizations_url": "https://api.github.com/users/BlockMechanic/orgs",
      "repos_url": "https://api.github.com/users/BlockMechanic/repos",
      "events_url": "https://api.github.com/users/BlockMechanic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BlockMechanic/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7d8f0e8fa5dc57219cbb277a0c985611c3f707e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d8f0e8fa5dc57219cbb277a0c985611c3f707e0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7d8f0e8fa5dc57219cbb277a0c985611c3f707e0"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 0,
      "deletions": 2
    },
    "files": [
      {
        "sha": "750d42efbc23626ff4f21485856ee7720cc90922",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa",
        "patch": "@@ -28,8 +28,6 @@ class CBlockHeader\n     uint32_t nBits;\n     uint32_t nNonce;\n \n-    virtual ~CBlockHeader() = default;\n-\n     CBlockHeader()\n     {\n         SetNull();"
      }
    ]
  },
  {
    "sha": "8dc122811d5a852e116f666ffb38d157d9b62373",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZGMxMjI4MTFkNWE4NTJlMTE2ZjY2NmZmYjM4ZDE1N2Q5YjYyMzcz",
    "commit": {
      "author": {
        "name": "BlockMechanic",
        "email": "blockmecha@gmail.com",
        "date": "2019-08-24T15:31:43Z"
      },
      "committer": {
        "name": "BlockMechanic",
        "email": "blockmecha@gmail.com",
        "date": "2019-08-24T15:31:43Z"
      },
      "message": "Merge remote-tracking branch 'upstream/master'",
      "tree": {
        "sha": "40b30d1784c7b5a0b4d17fff3e8597b3762eeac1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/40b30d1784c7b5a0b4d17fff3e8597b3762eeac1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8dc122811d5a852e116f666ffb38d157d9b62373",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8dc122811d5a852e116f666ffb38d157d9b62373",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8dc122811d5a852e116f666ffb38d157d9b62373",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8dc122811d5a852e116f666ffb38d157d9b62373/comments",
    "author": {
      "login": "BlockMechanic",
      "id": 24528627,
      "node_id": "MDQ6VXNlcjI0NTI4NjI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/24528627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BlockMechanic",
      "html_url": "https://github.com/BlockMechanic",
      "followers_url": "https://api.github.com/users/BlockMechanic/followers",
      "following_url": "https://api.github.com/users/BlockMechanic/following{/other_user}",
      "gists_url": "https://api.github.com/users/BlockMechanic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BlockMechanic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BlockMechanic/subscriptions",
      "organizations_url": "https://api.github.com/users/BlockMechanic/orgs",
      "repos_url": "https://api.github.com/users/BlockMechanic/repos",
      "events_url": "https://api.github.com/users/BlockMechanic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BlockMechanic/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "BlockMechanic",
      "id": 24528627,
      "node_id": "MDQ6VXNlcjI0NTI4NjI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/24528627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BlockMechanic",
      "html_url": "https://github.com/BlockMechanic",
      "followers_url": "https://api.github.com/users/BlockMechanic/followers",
      "following_url": "https://api.github.com/users/BlockMechanic/following{/other_user}",
      "gists_url": "https://api.github.com/users/BlockMechanic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BlockMechanic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BlockMechanic/subscriptions",
      "organizations_url": "https://api.github.com/users/BlockMechanic/orgs",
      "repos_url": "https://api.github.com/users/BlockMechanic/repos",
      "events_url": "https://api.github.com/users/BlockMechanic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BlockMechanic/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa"
      },
      {
        "sha": "3ca514ddb77253042877d1a72dfd3021c3de2812",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ca514ddb77253042877d1a72dfd3021c3de2812",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ca514ddb77253042877d1a72dfd3021c3de2812"
      }
    ],
    "stats": {
      "total": 15788,
      "additions": 9922,
      "deletions": 5866
    },
    "files": [
      {
        "sha": "ac17e2eeb6b60a4b85c4465c729dd0fc92792f29",
        "filename": ".appveyor.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 14,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/.appveyor.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/.appveyor.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.appveyor.yml?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -33,23 +33,10 @@ before_build:\n - ps:  Start-Process clcache-server\n - ps:  fsutil behavior set disablelastaccess 0 # Enable Access time feature on Windows (for clcache)\n build_script:\n-- cmd: msbuild /p:TrackFileAccess=false /p:CLToolExe=clcache.exe build_msvc\\bitcoin.sln /m /v:q /nologo\n+- cmd: msbuild /p:TrackFileAccess=false /p:CLToolExe=clcache.exe build_msvc\\bitcoin.sln /m /v:n /nologo\n after_build:\n - ps:  fsutil behavior set disablelastaccess 1 # Disable Access time feature on Windows (better performance)\n - ps:  clcache -z\n-before_test:\n-- ps:  ${conf_ini} = (Get-Content([IO.Path]::Combine(${env:APPVEYOR_BUILD_FOLDER}, \"test\", \"config.ini.in\")))\n-- ps:  ${conf_ini} = ${conf_ini}.Replace(\"@PACKAGE_NAME@\", \"Bitcoin Core\")\n-- ps:  ${conf_ini} = ${conf_ini}.Replace(\"@abs_top_srcdir@\", ${env:APPVEYOR_BUILD_FOLDER})\n-- ps:  ${conf_ini} = ${conf_ini}.Replace(\"@abs_top_builddir@\", ${env:APPVEYOR_BUILD_FOLDER})\n-- ps:  ${conf_ini} = ${conf_ini}.Replace(\"@EXEEXT@\", \".exe\")\n-- ps:  ${conf_ini} = ${conf_ini}.Replace(\"@ENABLE_WALLET_TRUE@\", \"\")\n-- ps:  ${conf_ini} = ${conf_ini}.Replace(\"@BUILD_BITCOIN_CLI_TRUE@\", \"\")\n-- ps:  ${conf_ini} = ${conf_ini}.Replace(\"@BUILD_BITCOIND_TRUE@\", \"\")\n-- ps:  ${conf_ini} = ${conf_ini}.Replace(\"@ENABLE_ZMQ_TRUE@\", \"\")\n-- ps:  ${utf8} = New-Object System.Text.UTF8Encoding ${false}\n-- ps:  '[IO.File]::WriteAllLines([IO.Path]::Combine(${env:APPVEYOR_BUILD_FOLDER}, \"test\", \"config.ini\"), ${conf_ini}, ${utf8})'\n-- ps:  move \"build_msvc\\${env:PLATFORM}\\${env:CONFIGURATION}\\*.exe\" src\n test_script:\n - cmd: src\\test_bitcoin.exe -k stdout -e stdout 2> NUL\n - cmd: src\\bench_bitcoin.exe -evals=1 -scaling=0 > NUL"
      },
      {
        "sha": "1e6e6937da4e3852958e4ffda2ffc273c7e6ece4",
        "filename": ".cirrus.yml",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/.cirrus.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/.cirrus.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.cirrus.yml?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -27,3 +27,27 @@ task:\n     - gmake check ${MAKEJOBS} VERBOSE=1\n   functional_test_script:\n     - ./test/functional/test_runner.py --jobs 9 --ci --extended --exclude feature_dbcrash --combinedlogslen=1000 --quiet --failfast\n+task:\n+  name: \"x86_64 Linux  [GOAL: install]  [bionic]  [Using ./ci/ system]\"\n+  container:\n+    image: ubuntu:18.04\n+    cpu: 8\n+    memory: 8G\n+  timeout_in: 60m\n+  env:\n+    MAKEJOBS: \"-j9\"\n+    RUN_CI_ON_HOST: \"1\"\n+    CCACHE_SIZE: \"200M\"\n+    CCACHE_DIR: \"/tmp/ccache_dir\"\n+  ccache_cache:\n+    folder: \"/tmp/ccache_dir\"\n+  depends_built_cache:\n+    folder: \"/tmp/cirrus-ci-build/depends/built\"\n+  depends_sdk_cache:\n+    folder: \"/tmp/cirrus-ci-build/depends/sdk-sources\"\n+  install_script:\n+    - apt-get update\n+    - apt-get -y install git bash ccache\n+    - ccache --max-size=${CCACHE_SIZE}\n+  ci_script:\n+    - ./ci/test_run_all.sh"
      },
      {
        "sha": "809e851ff111b2b534cb01310d9b8d98aeace10a",
        "filename": ".gitignore",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.gitignore?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -1,6 +1,7 @@\n *.tar.gz\n \n *.exe\n+*.pdb\n src/bitcoin\n src/bitcoind\n src/bitcoin-cli\n@@ -34,6 +35,7 @@ libtool\n src/config/bitcoin-config.h\n src/config/bitcoin-config.h.in\n src/config/stamp-h1\n+src/obj\n share/setup.nsi\n share/qt/Info.plist\n \n@@ -76,7 +78,7 @@ src/qt/bitcoin-qt.includes\n \n # Only ignore unexpected patches\n *.patch\n-!depends/patches/*.patch\n+!depends/patches/**/*.patch\n \n #libtool object files\n *.lo\n@@ -85,10 +87,14 @@ src/qt/bitcoin-qt.includes\n # Compilation and Qt preprocessor part\n *.qm\n Makefile\n+!depends/Makefile\n bitcoin-qt\n Bitcoin-Qt.app\n background.tiff*\n \n+# Qt Creator\n+Makefile.am.user\n+\n # Unit-tests\n Makefile.test\n bitcoin-qt_test\n@@ -127,3 +133,7 @@ db4/\n \n # clang-check\n *.plist\n+\n+osx_volname\n+dist/\n+*.background.tiff"
      },
      {
        "sha": "f515ab2b8775477a005ed0519d650144bc5763e2",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 38,
        "deletions": 87,
        "changes": 125,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -17,7 +17,7 @@\n # Bitcoin Core GitHub member via the Travis web interface [0].\n #\n # Travis CI uploads the cache after the script phase of the build [1].\n-# However, the build is terminated without saving the chache if it takes over\n+# However, the build is terminated without saving the cache if it takes over\n # 50 minutes [2]. Thus, if we spent too much time in early build stages, fail\n # with an error and save the cache.\n #\n@@ -37,38 +37,28 @@ cache:\n stages:\n   - lint\n   - test\n+  - extended-lint\n env:\n   global:\n-    - MAKEJOBS=-j3\n-    - RUN_UNIT_TESTS=true\n-    - RUN_FUNCTIONAL_TESTS=true\n-    - RUN_FUZZ_TESTS=false\n-    - DOCKER_NAME_TAG=ubuntu:18.04\n-    - BOOST_TEST_RANDOM=1$TRAVIS_BUILD_ID\n-    - CCACHE_SIZE=100M\n-    - CCACHE_TEMPDIR=/tmp/.ccache-temp\n-    - CCACHE_COMPRESS=1\n-    - CCACHE_DIR=$HOME/.ccache\n-    - BASE_OUTDIR=$TRAVIS_BUILD_DIR/out\n-    - SDK_URL=https://bitcoincore.org/depends-sources/sdks\n-    - WINEDEBUG=fixme-all\n-    - DOCKER_PACKAGES=\"build-essential libtool autotools-dev automake pkg-config bsdmainutils curl git ca-certificates ccache\"\n+    - CI_RETRY_EXE=\"travis_retry\"\n     - CACHE_ERR_MSG=\"Error! Initial build successful, but not enough time remains to run later build stages and tests. Please manually re-run this job by using the travis restart button or asking a bitcoin maintainer to restart. The next run should not time out because the build cache has been saved.\"\n before_install:\n-  - set -o errexit; source .travis/test_03_before_install.sh\n+  - set -o errexit; source ./ci/test/00_setup_env.sh\n+  - set -o errexit; source ./ci/test/03_before_install.sh\n install:\n-  - set -o errexit; source .travis/test_04_install.sh\n+  - set -o errexit; source ./ci/test/04_install.sh\n before_script:\n-  - set -o errexit; source .travis/test_05_before_script.sh\n+  - set -o errexit; source ./ci/test/05_before_script.sh\n script:\n   - export CONTINUE=1\n   - if [ $SECONDS -gt 1200 ]; then export CONTINUE=0; fi  # Likely the depends build took very long\n-  - if [ $CONTINUE = \"1\" ]; then set -o errexit; source .travis/test_06_script_a.sh; else set +o errexit; echo \"$CACHE_ERR_MSG\"; false; fi\n+  - if [ $TRAVIS_REPO_SLUG = \"bitcoin/bitcoin\" ]; then export CONTINUE=1; fi  # Whitelisted repo (90 minutes build time)\n+  - if [ $CONTINUE = \"1\" ]; then set -o errexit; source ./ci/test/06_script_a.sh; else set +o errexit; echo \"$CACHE_ERR_MSG\"; false; fi\n   - if [ $SECONDS -gt 2000 ]; then export CONTINUE=0; fi  # Likely the build took very long; The tests take about 1000s, so we should abort if we have less than 50*60-1000=2000s left\n-  - if [ $CONTINUE = \"1\" ]; then set -o errexit; source .travis/test_06_script_b.sh; else set +o errexit; echo \"$CACHE_ERR_MSG\"; false; fi\n+  - if [ $TRAVIS_REPO_SLUG = \"bitcoin/bitcoin\" ]; then export CONTINUE=1; fi  # Whitelisted repo (90 minutes build time)\n+  - if [ $CONTINUE = \"1\" ]; then set -o errexit; source ./ci/test/06_script_b.sh; else set +o errexit; echo \"$CACHE_ERR_MSG\"; false; fi\n after_script:\n   - echo $TRAVIS_COMMIT_RANGE\n-  - echo $TRAVIS_COMMIT_LOG\n jobs:\n   include:\n \n@@ -79,110 +69,71 @@ jobs:\n       language: python\n       python: '3.5' # Oldest supported version according to doc/dependencies.md\n       install:\n-        - set -o errexit; source .travis/lint_04_install.sh\n+        - set -o errexit; source ./ci/lint/04_install.sh\n       before_script:\n-        - set -o errexit; source .travis/lint_05_before_script.sh\n+        - set -o errexit; source ./ci/lint/05_before_script.sh\n       script:\n-        - set -o errexit; source .travis/lint_06_script.sh\n+        - set -o errexit; source ./ci/lint/06_script.sh\n+\n+    - stage: extended-lint\n+      name: 'extended lint [runtime >= 60 seconds]'\n+      env:\n+      cache: false\n+      language: python\n+      python: '3.5'\n+      install:\n+        - set -o errexit; source ./ci/extended_lint/04_install.sh\n+      before_script:\n+        - set -o errexit; source ./ci/lint/05_before_script.sh\n+      script:\n+        - set -o errexit; source ./ci/extended_lint/06_script.sh\n \n     - stage: test\n       name: 'ARM  [GOAL: install]  [no unit or functional tests]'\n       env: >-\n-        HOST=arm-linux-gnueabihf\n-        PACKAGES=\"python3 g++-arm-linux-gnueabihf\"\n-        RUN_UNIT_TESTS=false\n-        RUN_FUNCTIONAL_TESTS=false\n-        GOAL=\"install\"\n-        # -Wno-psabi is to disable ABI warnings: \"note: parameter passing for argument of type ... changed in GCC 7.1\"\n-        # This could be removed once the ABI change warning does not show up by default\n-        BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports CXXFLAGS=-Wno-psabi\"\n+        FILE_ENV=\"./ci/test/00_setup_env_arm.sh\"\n \n     - stage: test\n       name: 'Win64  [GOAL: deploy]  [no gui or functional tests]'\n       env: >-\n-        HOST=x86_64-w64-mingw32\n-        PACKAGES=\"python3 nsis g++-mingw-w64-x86-64 wine-binfmt wine64\"\n-        RUN_FUNCTIONAL_TESTS=false\n-        GOAL=\"deploy\"\n-        BITCOIN_CONFIG=\"--enable-reduce-exports --disable-gui-tests\"\n+        FILE_ENV=\"./ci/test/00_setup_env_win64.sh\"\n \n     - stage: test\n       name: '32-bit + dash  [GOAL: install]  [GUI: no BIP70]'\n       env: >-\n-        HOST=i686-pc-linux-gnu\n-        PACKAGES=\"g++-multilib python3-zmq\"\n-        GOAL=\"install\"\n-        BITCOIN_CONFIG=\"--enable-zmq --with-gui=qt5 --disable-bip70 --enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\"\n-        CONFIG_SHELL=\"/bin/dash\"\n+        FILE_ENV=\"./ci/test/00_setup_env_i686.sh\"\n \n     - stage: test\n-      name: 'x86_64 Linux  [GOAL: install]  [bionic]  [uses qt5 dev package instead of depends Qt to speed up build and avoid timeout]'\n+      name: 'x86_64 Linux  [GOAL: install]  [bionic]  [uses qt5 dev package instead of depends Qt to speed up build and avoid timeout] [unsigned char]'\n       env: >-\n-        HOST=x86_64-unknown-linux-gnu\n-        PACKAGES=\"python3-zmq qtbase5-dev qttools5-dev-tools protobuf-compiler libdbus-1-dev libharfbuzz-dev libprotobuf-dev\"\n-        DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1 ALLOW_HOST_PACKAGES=1\"\n-        TEST_RUNNER_EXTRA=\"--coverage --extended --exclude feature_dbcrash\"  # Run extended tests so that coverage does not fail, but exclude the very slow dbcrash\n-        GOAL=\"install\"\n-        BITCOIN_CONFIG=\"--enable-zmq --with-gui=qt5 --enable-glibc-back-compat --enable-reduce-exports --enable-debug CXXFLAGS=\\\"-g0 -O2\\\"\"\n+        FILE_ENV=\"./ci/test/00_setup_env_amd64_qt5.sh\"\n \n     - stage: test\n       name: 'x86_64 Linux  [GOAL: install]  [trusty]  [no functional tests, no depends, only system libs]'\n       env: >-\n-        HOST=x86_64-unknown-linux-gnu\n-        DOCKER_NAME_TAG=ubuntu:14.04\n-        PACKAGES=\"python3-zmq qtbase5-dev qttools5-dev-tools libicu-dev libpng-dev libssl-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libdb5.1++-dev libminiupnpc-dev libzmq3-dev libprotobuf-dev protobuf-compiler libqrencode-dev\"\n-        NO_DEPENDS=1\n-        RUN_FUNCTIONAL_TESTS=false\n-        GOAL=\"install\"\n-        BITCOIN_CONFIG=\"--enable-zmq --with-incompatible-bdb --with-gui=no\"\n+        FILE_ENV=\"./ci/test/00_setup_env_amd64_trusty.sh\"\n \n     - stage: test\n       name: 'x86_64 Linux  [GOAL: install]  [xenial]  [no depends, only system libs, sanitizers: thread (TSan), no wallet]'\n       env: >-\n-        HOST=x86_64-unknown-linux-gnu\n-        DOCKER_NAME_TAG=ubuntu:16.04\n-        PACKAGES=\"clang llvm python3-zmq qtbase5-dev qttools5-dev-tools libssl-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libprotobuf-dev protobuf-compiler libqrencode-dev\"\n-        NO_DEPENDS=1\n-        GOAL=\"install\"\n-        BITCOIN_CONFIG=\"--enable-zmq --disable-wallet --with-gui=qt5 CPPFLAGS=-DDEBUG_LOCKORDER --with-sanitizers=thread --disable-hardening --disable-asm CC=clang CXX=clang++\"\n+        FILE_ENV=\"./ci/test/00_setup_env_amd64_tsan.sh\"\n \n     - stage: test\n       name: 'x86_64 Linux  [GOAL: install]  [bionic]  [no depends, only system libs, sanitizers: address/leak (ASan + LSan) + undefined (UBSan) + integer]'\n       env: >-\n-        HOST=x86_64-unknown-linux-gnu\n-        PACKAGES=\"clang llvm python3-zmq qtbase5-dev qttools5-dev-tools libssl1.0-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libprotobuf-dev protobuf-compiler libqrencode-dev\"\n-        NO_DEPENDS=1\n-        GOAL=\"install\"\n-        BITCOIN_CONFIG=\"--enable-zmq --with-incompatible-bdb --with-gui=qt5 CPPFLAGS=-DDEBUG_LOCKORDER --with-sanitizers=address,integer,undefined CC=clang CXX=clang++\"\n+        FILE_ENV=\"./ci/test/00_setup_env_amd64_asan.sh\"\n \n     - stage: test\n       name: 'x86_64 Linux  [GOAL: install]  [bionic]  [no depends, only system libs, sanitizers: fuzzer,address]'\n       env: >-\n-        HOST=x86_64-unknown-linux-gnu\n-        PACKAGES=\"clang llvm python3 libssl1.0-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev\"\n-        NO_DEPENDS=1\n-        RUN_UNIT_TESTS=false\n-        RUN_FUNCTIONAL_TESTS=false\n-        RUN_FUZZ_TESTS=true\n-        GOAL=\"install\"\n-        BITCOIN_CONFIG=\"--disable-wallet --disable-bench --with-utils=no --with-daemon=no --with-libs=no --with-gui=no --enable-fuzz --with-sanitizers=fuzzer,address CC=clang CXX=clang++\"\n+        FILE_ENV=\"./ci/test/00_setup_env_amd64_fuzz.sh\"\n \n     - stage: test\n       name: 'x86_64 Linux  [GOAL: install]  [bionic]  [no wallet]'\n       env: >-\n-        HOST=x86_64-unknown-linux-gnu\n-        PACKAGES=\"python3-zmq\"\n-        DEP_OPTS=\"NO_WALLET=1\"\n-        GOAL=\"install\"\n-        BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n+        FILE_ENV=\"./ci/test/00_setup_env_amd64_nowallet.sh\"\n \n     - stage: test\n       name: 'macOS 10.10  [GOAL: deploy] [no functional tests]'\n       env: >-\n-        HOST=x86_64-apple-darwin14\n-        PACKAGES=\"cmake imagemagick libcap-dev librsvg2-bin libz-dev libbz2-dev libtiff-tools python3-dev python3-setuptools\"\n-        OSX_SDK=10.11\n-        RUN_UNIT_TESTS=false\n-        RUN_FUNCTIONAL_TESTS=false\n-        GOAL=\"deploy\"\n-        BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports --enable-werror\"\n+        FILE_ENV=\"./ci/test/00_setup_env_mac.sh\""
      },
      {
        "sha": "21d1b9cc03aea1599db7dd258c945f5bce240067",
        "filename": ".travis/README.md",
        "status": "removed",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/.travis/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/.travis/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis/README.md?ref=3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa",
        "patch": "@@ -1,8 +0,0 @@\n-## travis build scripts\n-\n-The `.travis` directory contains scripts for each build step in each build stage.\n-Currently the travis build defines two stages `lint` and `test`. Each stage has\n-it's own [lifecycle](https://docs.travis-ci.com/user/customizing-the-build/#the-build-lifecycle).\n-Every script in here is named and numbered according to which stage and lifecycle\n-step it belongs to.\n-"
      },
      {
        "sha": "b589ee7a161db6c59213daaa2429419d09e188d2",
        "filename": ".travis/test_04_install.sh",
        "status": "removed",
        "additions": 0,
        "deletions": 34,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/.travis/test_04_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/.travis/test_04_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis/test_04_install.sh?ref=3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa",
        "patch": "@@ -1,34 +0,0 @@\n-#!/usr/bin/env bash\n-#\n-# Copyright (c) 2018 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-export LC_ALL=C.UTF-8\n-\n-travis_retry docker pull \"$DOCKER_NAME_TAG\"\n-\n-export DIR_FUZZ_IN=${TRAVIS_BUILD_DIR}/qa-assets\n-git clone https://github.com/bitcoin-core/qa-assets ${DIR_FUZZ_IN}\n-export DIR_FUZZ_IN=${DIR_FUZZ_IN}/fuzz_seed_corpus/\n-\n-mkdir -p \"${TRAVIS_BUILD_DIR}/sanitizer-output/\"\n-export ASAN_OPTIONS=\"\"\n-export LSAN_OPTIONS=\"suppressions=${TRAVIS_BUILD_DIR}/test/sanitizer_suppressions/lsan\"\n-export TSAN_OPTIONS=\"suppressions=${TRAVIS_BUILD_DIR}/test/sanitizer_suppressions/tsan:log_path=${TRAVIS_BUILD_DIR}/sanitizer-output/tsan\"\n-export UBSAN_OPTIONS=\"suppressions=${TRAVIS_BUILD_DIR}/test/sanitizer_suppressions/ubsan:print_stacktrace=1:halt_on_error=1\"\n-env | grep -E '^(BITCOIN_CONFIG|CCACHE_|WINEDEBUG|LC_ALL|BOOST_TEST_RANDOM|CONFIG_SHELL|(ASAN|LSAN|TSAN|UBSAN)_OPTIONS)' | tee /tmp/env\n-if [[ $HOST = *-mingw32 ]]; then\n-  DOCKER_ADMIN=\"--cap-add SYS_ADMIN\"\n-elif [[ $BITCOIN_CONFIG = *--with-sanitizers=*address* ]]; then # If ran with (ASan + LSan), Docker needs access to ptrace (https://github.com/google/sanitizers/issues/764)\n-  DOCKER_ADMIN=\"--cap-add SYS_PTRACE\"\n-fi\n-DOCKER_ID=$(docker run $DOCKER_ADMIN -idt --mount type=bind,src=$TRAVIS_BUILD_DIR,dst=$TRAVIS_BUILD_DIR --mount type=bind,src=$CCACHE_DIR,dst=$CCACHE_DIR -w $TRAVIS_BUILD_DIR --env-file /tmp/env $DOCKER_NAME_TAG)\n-\n-DOCKER_EXEC () {\n-  docker exec $DOCKER_ID bash -c \"cd $PWD && $*\"\n-}\n-\n-travis_retry DOCKER_EXEC apt-get update\n-travis_retry DOCKER_EXEC apt-get install --no-install-recommends --no-upgrade -qq $PACKAGES $DOCKER_PACKAGES\n-"
      },
      {
        "sha": "268259c82d99a7c95875f6fe790249519aea7e4a",
        "filename": "CONTRIBUTING.md",
        "status": "modified",
        "additions": 9,
        "deletions": 15,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/CONTRIBUTING.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/CONTRIBUTING.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/CONTRIBUTING.md?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -80,21 +80,15 @@ The title of the pull request should be prefixed by the component or area that\n the pull request affects. Valid areas as:\n \n   - *Consensus* for changes to consensus critical code\n-  - *Docs* for changes to the documentation\n+  - *Doc* for changes to the documentation\n   - *Qt* for changes to bitcoin-qt\n+  - *Log* Changes to log messages\n   - *Mining* for changes to the mining code\n   - *Net* or *P2P* for changes to the peer-to-peer network code\n+  - *Refactor* for structural changes that do not change behavior\n   - *RPC/REST/ZMQ* for changes to the RPC, REST or ZMQ APIs\n   - *Scripts and tools* for changes to the scripts and tools\n-  - *Tests* for changes to the bitcoin unit tests or QA tests\n-  - *Trivial* should **only** be used for PRs that do not change generated\n-    executable code. Notably, refactors (change of function arguments and code\n-    reorganization) and changes in behavior should **not** be marked as trivial.\n-    Examples of trivial PRs are changes to:\n-    - comments\n-    - whitespace\n-    - variable names\n-    - logging and messages\n+  - *Test* for changes to the bitcoin unit tests or QA tests\n   - *Utils and libraries* for changes to the utils and libraries\n   - *Wallet* for changes to the wallet code\n \n@@ -103,10 +97,10 @@ Examples:\n     Consensus: Add new opcode for BIP-XXXX OP_CHECKAWESOMESIG\n     Net: Automatically create hidden service, listen on Tor\n     Qt: Add feed bump button\n-    Trivial: Fix typo in init.cpp\n+    Log: Fix typo in log message\n \n Note that translations should not be submitted as pull requests, please see\n-[Translation Process](https://github.com/bitcoin/bitcoin/blob/master/doc/translation_process.md) \n+[Translation Process](https://github.com/bitcoin/bitcoin/blob/master/doc/translation_process.md)\n for more information on helping with translations.\n \n If a pull request is not to be considered for merging (yet), please\n@@ -322,7 +316,7 @@ The project leader is the release manager for each Bitcoin Core release.\n Copyright\n ---------\n \n-By contributing to this repository, you agree to license your work under the \n-MIT license unless specified otherwise in `contrib/debian/copyright` or at \n-the top of the file itself. Any work contributed where you are not the original \n+By contributing to this repository, you agree to license your work under the\n+MIT license unless specified otherwise in `contrib/debian/copyright` or at\n+the top of the file itself. Any work contributed where you are not the original\n author must contain its license header with the original author(s) and source."
      },
      {
        "sha": "8b1e2a6b5b3cc78384d7156c41fa63499bbf860c",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -310,4 +310,5 @@ clean-docs:\n clean-local: clean-docs\n \trm -rf coverage_percent.txt test_bitcoin.coverage/ total.coverage/ test/tmp/ cache/ $(OSX_APP)\n \trm -rf test/functional/__pycache__ test/functional/test_framework/__pycache__ test/cache share/rpcauth/__pycache__\n+\trm -rf osx_volname dist/ dpi36.background.tiff dpi72.background.tiff\n "
      },
      {
        "sha": "2c434e9ef057c7649f35fc93550540bec0f48f97",
        "filename": "autogen.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/autogen.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/autogen.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/autogen.sh?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -7,10 +7,10 @@ export LC_ALL=C\n set -e\n srcdir=\"$(dirname $0)\"\n cd \"$srcdir\"\n-if [ -z ${LIBTOOLIZE} ] && GLIBTOOLIZE=\"`which glibtoolize 2>/dev/null`\"; then\n+if [ -z ${LIBTOOLIZE} ] && GLIBTOOLIZE=\"$(command -v glibtoolize)\"; then\n   LIBTOOLIZE=\"${GLIBTOOLIZE}\"\n   export LIBTOOLIZE\n fi\n-which autoreconf >/dev/null || \\\n+command -v autoreconf >/dev/null || \\\n   (echo \"configuration failed, please install autoconf first\" && exit 1)\n autoreconf --install --force --warnings=all"
      },
      {
        "sha": "675fb6d3fb63d2140db409f902c0279539ba0314",
        "filename": "build-aux/m4/bitcoin_qt.m4",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/build-aux/m4/bitcoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/build-aux/m4/bitcoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -268,7 +268,7 @@ AC_DEFUN([_BITCOIN_QT_CHECK_QT5],[\n \n dnl Internal. Check if the included version of Qt is greater than Qt58.\n dnl Requires: INCLUDES must be populated as necessary.\n-dnl Output: bitcoin_cv_qt5=yes|no\n+dnl Output: bitcoin_cv_qt58=yes|no\n AC_DEFUN([_BITCOIN_QT_CHECK_QT58],[\n   AC_CACHE_CHECK(for > Qt 5.7, bitcoin_cv_qt58,[\n   AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n@@ -355,7 +355,6 @@ AC_DEFUN([_BITCOIN_QT_FIND_STATIC_PLUGINS],[\n          PKG_CHECK_MODULES([QTFB], [Qt5FbSupport], [QT_LIBS=\"-lQt5FbSupport $QT_LIBS\"])\n                 fi\n        if test \"x$TARGET_OS\" = xlinux; then\n-         PKG_CHECK_MODULES([X11XCB], [x11-xcb], [QT_LIBS=\"$X11XCB_LIBS $QT_LIBS\"])\n          PKG_CHECK_MODULES([QTXCBQPA], [Qt5XcbQpa], [QT_LIBS=\"$QTXCBQPA_LIBS $QT_LIBS\"])\n        elif test \"x$TARGET_OS\" = xdarwin; then\n          PKG_CHECK_MODULES([QTCLIPBOARD], [Qt5ClipboardSupport], [QT_LIBS=\"-lQt5ClipboardSupport $QT_LIBS\"])\n@@ -469,7 +468,6 @@ AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITHOUT_PKGCONFIG],[\n   ])\n \n   BITCOIN_QT_CHECK(AC_CHECK_LIB([z] ,[main],,AC_MSG_WARN([zlib not found. Assuming qt has it built-in])))\n-  BITCOIN_QT_CHECK(AC_SEARCH_LIBS([jpeg_create_decompress] ,[qtjpeg jpeg],,AC_MSG_WARN([libjpeg not found. Assuming qt has it built-in])))\n   if test x$bitcoin_cv_qt58 = xno; then\n     BITCOIN_QT_CHECK(AC_SEARCH_LIBS([png_error] ,[qtpng png],,AC_MSG_WARN([libpng not found. Assuming qt has it built-in])))\n     BITCOIN_QT_CHECK(AC_SEARCH_LIBS([pcre16_exec], [qtpcre pcre16],,AC_MSG_WARN([libpcre16 not found. Assuming qt has it built-in])))"
      },
      {
        "sha": "2e93979acaf5f9c35b5c636b50115936fe7ed868",
        "filename": "build_msvc/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/README.md?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -44,7 +44,7 @@ The instructions below use `vcpkg` to install the dependencies.\n - Use Python to generate *.vcxproj from Makefile\n \n ```\n-    PS >python msvc-autogen.py\n+    PS >py -3 msvc-autogen.py\n ```\n \n - Build in Visual Studio."
      },
      {
        "sha": "e64614c09d0be5c047ca2a9b4dcc8f8fdbcbf7f8",
        "filename": "build_msvc/bench_bitcoin/bench_bitcoin.vcxproj",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/bench_bitcoin/bench_bitcoin.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/bench_bitcoin/bench_bitcoin.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bench_bitcoin/bench_bitcoin.vcxproj?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -20,9 +20,11 @@\n     <ClCompile Include=\"..\\..\\src\\bench\\checkqueue.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\bench\\coin_selection.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\bench\\crypto_hash.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\bench\\data.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\bench\\examples.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\bench\\lockedpool.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\bench\\mempool_eviction.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\bench\\rpc_blockchain.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\bench\\rpc_mempool.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\bench\\merkle_root.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\bench\\rollingbloom.cpp\" />\n@@ -68,9 +70,10 @@\n     <ItemGroup>\n       <RawBenchFile Include=\"..\\..\\src\\bench\\data\\*.raw\" />\n     </ItemGroup>\n-    <HeaderFromHexdump RawFilePath=\"%(RawBenchFile.FullPath)\" HeaderFilePath=\"%(RawBenchFile.FullPath).h\" SourceHeader=\"static unsigned const char %(RawBenchFile.Filename)[] = {\" SourceFooter=\"};\" />\n+    <HeaderFromHexdump RawFilePath=\"%(RawBenchFile.FullPath)\" HeaderFilePath=\"%(RawBenchFile.FullPath).h\" SourceHeader=\"static unsigned const char %(RawBenchFile.Filename)_raw[] = {\" SourceFooter=\"};\" />\n   </Target>\n   <Import Label=\"hexdumpTarget\" Project=\"..\\msbuild\\tasks\\hexdump.targets\" />\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />\n+  <Import Project=\"..\\common.vcxproj\" />\n </Project>\n\\ No newline at end of file"
      },
      {
        "sha": "e5e0e978f89819af98f55803da8e8368f2815d86",
        "filename": "build_msvc/bitcoin-cli/bitcoin-cli.vcxproj",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/bitcoin-cli/bitcoin-cli.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/bitcoin-cli/bitcoin-cli.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin-cli/bitcoin-cli.vcxproj?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -27,4 +27,5 @@\n   </ItemGroup>\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />\n+  <Import Project=\"..\\common.vcxproj\" />\n </Project>"
      },
      {
        "sha": "4e9b4916a0fc9e909ff06662ca28d1bf502736af",
        "filename": "build_msvc/bitcoin-tx/bitcoin-tx.vcxproj",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/bitcoin-tx/bitcoin-tx.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/bitcoin-tx/bitcoin-tx.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin-tx/bitcoin-tx.vcxproj?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -33,4 +33,5 @@\n   </ItemGroup>\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />\n+  <Import Project=\"..\\common.vcxproj\" />\n </Project>"
      },
      {
        "sha": "40c5db5522881ef14b9090009e50d9b90b394395",
        "filename": "build_msvc/bitcoin-wallet/bitcoin-wallet.vcxproj",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/bitcoin-wallet/bitcoin-wallet.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/bitcoin-wallet/bitcoin-wallet.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin-wallet/bitcoin-wallet.vcxproj?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -51,4 +51,5 @@\n   </ItemGroup>\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />\n+  <Import Project=\"..\\common.vcxproj\" />\n </Project>"
      },
      {
        "sha": "66cc1208a14fbfdf69b6b456af23a750581b6cf6",
        "filename": "build_msvc/bitcoin_config.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/bitcoin_config.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/bitcoin_config.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin_config.h?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -421,4 +421,14 @@\n /* Define for large files, on AIX-style hosts. */\n /* #undef _LARGE_FILES */\n \n+/* Windows Universal Platform constraints */\n+#if !defined(WINAPI_FAMILY) || (WINAPI_FAMILY == WINAPI_FAMILY_DESKTOP_APP)\n+/* Either a desktop application without API restrictions, or and older system\n+   before these macros were defined. */\n+\n+/* ::wsystem is available */\n+#define HAVE_SYSTEM 1\n+\n+#endif // !WINAPI_FAMILY || WINAPI_FAMILY_DESKTOP_APP\n+\n #endif //BITCOIN_BITCOIN_CONFIG_H"
      },
      {
        "sha": "ae24cb100e68fc465bd612517d47ed8a96c6bfe2",
        "filename": "build_msvc/bitcoind/bitcoind.vcxproj",
        "status": "modified",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/bitcoind/bitcoind.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/bitcoind/bitcoind.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoind/bitcoind.vcxproj?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -45,4 +45,31 @@\n   </ItemGroup>\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />\n+  <Import Label=\"ReplaceInFile\" Project=\"..\\msbuild\\tasks\\replaceinfile.targets\" />\n+  <PropertyGroup>\n+    <ConfigIniIn>..\\..\\test\\config.ini.in</ConfigIniIn>\n+    <ConfigIniOut>..\\..\\test\\config.ini</ConfigIniOut>\n+  </PropertyGroup>\n+  <Target Name=\"AfterBuild\">\n+    <Copy SourceFiles=\"$(ConfigIniIn)\" DestinationFiles=\"$(ConfigIniOut)\" ></Copy>\n+    <ReplaceInFile FilePath=\"$(ConfigIniOut)\"\n+                   Replace=\"@PACKAGE_NAME@\" By=\"Bitcoin Core\"></ReplaceInFile>\n+    <ReplaceInFile FilePath=\"$(ConfigIniOut)\"\n+                   Replace=\"@abs_top_srcdir@\" By=\"..\\..\" ToFullPath=\"true\"></ReplaceInFile>\n+    <ReplaceInFile FilePath=\"$(ConfigIniOut)\"\n+                   Replace=\"@abs_top_builddir@\" By=\"..\\..\" ToFullPath=\"true\"></ReplaceInFile>\n+    <ReplaceInFile FilePath=\"$(ConfigIniOut)\"\n+                   Replace=\"@EXEEXT@\" By=\".exe\"></ReplaceInFile>\n+    <ReplaceInFile FilePath=\"$(ConfigIniOut)\"\n+                  Replace=\"@ENABLE_WALLET_TRUE@\" By=\"\"></ReplaceInFile>\n+    <ReplaceInFile FilePath=\"$(ConfigIniOut)\"\n+                  Replace=\"@BUILD_BITCOIN_CLI_TRUE@\" By=\"\"></ReplaceInFile>\n+    <ReplaceInFile FilePath=\"$(ConfigIniOut)\"\n+                  Replace=\"@BUILD_BITCOIND_TRUE@\" By=\"\"></ReplaceInFile>\n+    <ReplaceInFile FilePath=\"$(ConfigIniOut)\"\n+                  Replace=\"@ENABLE_FUZZ_TRUE@\" By=\"\"></ReplaceInFile>\n+    <ReplaceInFile FilePath=\"$(ConfigIniOut)\"\n+                  Replace=\"@ENABLE_ZMQ_TRUE@\" By=\"\"></ReplaceInFile>\n+  </Target>\n+  <Import Project=\"..\\common.vcxproj\" />\n </Project>"
      },
      {
        "sha": "0d186b5af2878344b78d92307a7ffb8f1bcd21b9",
        "filename": "build_msvc/common.init.vcxproj",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/common.init.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/common.init.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/common.init.vcxproj?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -7,7 +7,6 @@\n     <VcpkgTriplet Condition=\"'$(Platform)'=='Win32'\">x86-windows-static</VcpkgTriplet>\n     <VcpkgTriplet Condition=\"'$(Platform)'=='x64'\">x64-windows-static</VcpkgTriplet>\n </PropertyGroup>\n-\n   <PropertyGroup Condition=\"'$(WindowsTargetPlatformVersion)'=='' and !Exists('$(WindowsSdkDir)\\DesignTime\\CommonConfiguration\\Neutral\\Windows.props')\">\n      <WindowsTargetPlatformVersion_10 Condition=\"'$(WindowsTargetPlatformVersion_10)' == ''\">$(Registry:HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\\v10.0@ProductVersion)</WindowsTargetPlatformVersion_10>\n      <WindowsTargetPlatformVersion_10 Condition=\"'$(WindowsTargetPlatformVersion_10)' == ''\">$(Registry:HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Microsoft SDKs\\Windows\\v10.0@ProductVersion)</WindowsTargetPlatformVersion_10>\n@@ -115,4 +114,5 @@\n       <AdditionalDependencies>crypt32.lib;Iphlpapi.lib;ws2_32.lib;Shlwapi.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;%(AdditionalDependencies)</AdditionalDependencies>\n     </Link>\n   </ItemDefinitionGroup>\n+  <Import Project=\"common.init.vcxproj.user\" Condition=\"Exists('common.init.vcxproj.user')\" />\n </Project>"
      },
      {
        "sha": "4bbcc3767f63b23225a70f672764947637d9666c",
        "filename": "build_msvc/common.vcxproj",
        "status": "added",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/common.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/common.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/common.vcxproj?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -0,0 +1,12 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n+<PropertyGroup><BuildDependsOn>$(BuildDependsOn);CopyBuildArtifacts</BuildDependsOn></PropertyGroup>\n+  <Target Name=\"CopyBuildArtifacts\" Condition=\"'$(ConfigurationType)' != 'StaticLibrary'\">\n+    <ItemGroup>\n+      <BuildArtifacts Include=\"$(OutDir)$(TargetName)$(TargetExt)\"></BuildArtifacts>\n+      <BuildArtifacts Include=\"$(OutDir)$(TargetName).pdb\"></BuildArtifacts>\n+    </ItemGroup>\n+    <Copy SourceFiles=\"@(BuildArtifacts)\" SkipUnchangedFiles=\"true\" DestinationFolder=\"..\\..\\src\\\" Condition=\"'$(OutDir)' != ''\"></Copy>\n+  </Target>\n+  <Import Project=\"common.vcxproj.user\" Condition=\"Exists('common.vcxproj.user')\" />\n+</Project>"
      },
      {
        "sha": "620df72a2f76480b7645befdb8e889bf8c779046",
        "filename": "build_msvc/libbitcoin_cli/libbitcoin_cli.vcxproj.in",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/libbitcoin_cli/libbitcoin_cli.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/libbitcoin_cli/libbitcoin_cli.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_cli/libbitcoin_cli.vcxproj.in?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -12,4 +12,5 @@\n   </ItemGroup>\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />\n+  <Import Project=\"..\\common.vcxproj\" />\n </Project>"
      },
      {
        "sha": "b47d62b29587ee85536232e599c1c9c4a1429b9a",
        "filename": "build_msvc/libbitcoin_common/libbitcoin_common.vcxproj.in",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/libbitcoin_common/libbitcoin_common.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/libbitcoin_common/libbitcoin_common.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_common/libbitcoin_common.vcxproj.in?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -12,4 +12,5 @@\n   </ItemGroup>\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />\n+  <Import Project=\"..\\common.vcxproj\" />\n </Project>"
      },
      {
        "sha": "32cb75bf871c180dafb4a0b5c0fbd4a0722fa18f",
        "filename": "build_msvc/libbitcoin_crypto/libbitcoin_crypto.vcxproj.in",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/libbitcoin_crypto/libbitcoin_crypto.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/libbitcoin_crypto/libbitcoin_crypto.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_crypto/libbitcoin_crypto.vcxproj.in?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -12,4 +12,5 @@\n   </ItemGroup>\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />\n+  <Import Project=\"..\\common.vcxproj\" />\n </Project>"
      },
      {
        "sha": "f21ba7a82bf7bf5706e8f22f3cb42c14fff03091",
        "filename": "build_msvc/libbitcoin_qt/libbitcoin_qt.vcxproj",
        "status": "modified",
        "additions": 0,
        "deletions": 30,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/libbitcoin_qt/libbitcoin_qt.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/libbitcoin_qt/libbitcoin_qt.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_qt/libbitcoin_qt.vcxproj?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -406,22 +406,13 @@\n     <None Include=\"..\\..\\src\\qtes\\src\\tx_inout.svg\">\n       <DeploymentContent>true</DeploymentContent>\n     </None>\n-    <None Include=\"..\\..\\src\\qtes\\src\\verify.svg\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n     <None Include=\"GeneratedFiles\\bitcoin.moc\" />\n     <None Include=\"GeneratedFiles\\bitcoinamountfield.moc\" />\n     <None Include=\"GeneratedFiles\\intro.moc\" />\n     <None Include=\"GeneratedFiles\\overviewpage.moc\" />\n     <None Include=\"GeneratedFilespcconsole.moc\" />\n   </ItemGroup>\n   <ItemGroup>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\about.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\about_qt.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n     <Image Include=\"..\\..\\src\\qtes\\icons\\add.png\">\n       <DeploymentContent>true</DeploymentContent>\n     </Image>\n@@ -455,9 +446,6 @@\n     <Image Include=\"..\\..\\src\\qtes\\icons\\clock5.png\">\n       <DeploymentContent>true</DeploymentContent>\n     </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\configure.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n     <Image Include=\"..\\..\\src\\qtes\\icons\\connect0.png\">\n       <DeploymentContent>true</DeploymentContent>\n     </Image>\n@@ -473,9 +461,6 @@\n     <Image Include=\"..\\..\\src\\qtes\\icons\\connect4.png\">\n       <DeploymentContent>true</DeploymentContent>\n     </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\debugwindow.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n     <Image Include=\"..\\..\\src\\qtes\\icons\\edit.png\">\n       <DeploymentContent>true</DeploymentContent>\n     </Image>\n@@ -497,9 +482,6 @@\n     <Image Include=\"..\\..\\src\\qtes\\icons\\eye_plus.png\">\n       <DeploymentContent>true</DeploymentContent>\n     </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\filesave.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n     <Image Include=\"..\\..\\src\\qtes\\icons\\fontbigger.png\">\n       <DeploymentContent>true</DeploymentContent>\n     </Image>\n@@ -518,9 +500,6 @@\n     <Image Include=\"..\\..\\src\\qtes\\icons\\info.png\">\n       <DeploymentContent>true</DeploymentContent>\n     </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\key.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n     <Image Include=\"..\\..\\src\\qtes\\icons\\lock_closed.png\">\n       <DeploymentContent>true</DeploymentContent>\n     </Image>\n@@ -530,15 +509,9 @@\n     <Image Include=\"..\\..\\src\\qtes\\icons\\network_disabled.png\">\n       <DeploymentContent>true</DeploymentContent>\n     </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\open.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n     <Image Include=\"..\\..\\src\\qtes\\icons\\overview.png\">\n       <DeploymentContent>true</DeploymentContent>\n     </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\quit.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n     <Image Include=\"..\\..\\src\\qtes\\iconseceive.png\">\n       <DeploymentContent>true</DeploymentContent>\n     </Image>\n@@ -575,9 +548,6 @@\n     <Image Include=\"..\\..\\src\\qtes\\icons\\tx_output.png\">\n       <DeploymentContent>true</DeploymentContent>\n     </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\verify.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n     <Image Include=\"..\\..\\src\\qtes\\icons\\warning.png\">\n       <DeploymentContent>true</DeploymentContent>\n     </Image>"
      },
      {
        "sha": "58e90dbaeb438623922423bfd1890d16e84543cc",
        "filename": "build_msvc/libbitcoin_server/libbitcoin_server.vcxproj.in",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/libbitcoin_server/libbitcoin_server.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/libbitcoin_server/libbitcoin_server.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_server/libbitcoin_server.vcxproj.in?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -15,4 +15,5 @@\n   </ItemGroup>\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />\n+  <Import Project=\"..\\common.vcxproj\" />\n </Project>\n\\ No newline at end of file"
      },
      {
        "sha": "adf4fa03540fb0e516d030d476387a26d70bb015",
        "filename": "build_msvc/libbitcoin_util/libbitcoin_util.vcxproj.in",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/libbitcoin_util/libbitcoin_util.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/libbitcoin_util/libbitcoin_util.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_util/libbitcoin_util.vcxproj.in?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -12,4 +12,5 @@\n   </ItemGroup>\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />\n+  <Import Project=\"..\\common.vcxproj\" />\n </Project>"
      },
      {
        "sha": "9c8279c72abad60972a59d19cd663765e590cd01",
        "filename": "build_msvc/libbitcoin_wallet/libbitcoin_wallet.vcxproj.in",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/libbitcoin_wallet/libbitcoin_wallet.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/libbitcoin_wallet/libbitcoin_wallet.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_wallet/libbitcoin_wallet.vcxproj.in?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -12,4 +12,5 @@\n   </ItemGroup>\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />\n+  <Import Project=\"..\\common.vcxproj\" />\n </Project>"
      },
      {
        "sha": "1a6b7b6b92670f31d4ae6ad79685744e85358b9f",
        "filename": "build_msvc/libbitcoin_wallet_tool/libbitcoin_wallet_tool.vcxproj.in",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/libbitcoin_wallet_tool/libbitcoin_wallet_tool.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/libbitcoin_wallet_tool/libbitcoin_wallet_tool.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_wallet_tool/libbitcoin_wallet_tool.vcxproj.in?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -12,4 +12,5 @@\n   </ItemGroup>\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />\n+  <Import Project=\"..\\common.vcxproj\" />\n </Project>"
      },
      {
        "sha": "e86eea81e6567b0306577ddc761a66b0221f2442",
        "filename": "build_msvc/libbitcoin_zmq/libbitcoin_zmq.vcxproj.in",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/libbitcoin_zmq/libbitcoin_zmq.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/libbitcoin_zmq/libbitcoin_zmq.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_zmq/libbitcoin_zmq.vcxproj.in?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -12,4 +12,5 @@\n   </ItemGroup>\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />\n+  <Import Project=\"..\\common.vcxproj\" />\n </Project>"
      },
      {
        "sha": "4cb0bdc90218add3a0cbfb365e15a7ba8d955e5c",
        "filename": "build_msvc/libbitcoinconsensus/libbitcoinconsensus.vcxproj",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/libbitcoinconsensus/libbitcoinconsensus.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/libbitcoinconsensus/libbitcoinconsensus.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoinconsensus/libbitcoinconsensus.vcxproj?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -33,4 +33,5 @@\n   </ItemGroup>\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />\n+  <Import Project=\"..\\common.vcxproj\" />\n </Project>\n\\ No newline at end of file"
      },
      {
        "sha": "f855923c62da7351706a87a67ded8a04445aa354",
        "filename": "build_msvc/libleveldb/libleveldb.vcxproj",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/libleveldb/libleveldb.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/libleveldb/libleveldb.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libleveldb/libleveldb.vcxproj?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -59,4 +59,5 @@\n   </ItemDefinitionGroup>\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />\n+  <Import Project=\"..\\common.vcxproj\" />\n </Project>"
      },
      {
        "sha": "99fb63fb0262ae1699480890e7986654bd199cac",
        "filename": "build_msvc/libsecp256k1/libsecp256k1.vcxproj",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/libsecp256k1/libsecp256k1.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/libsecp256k1/libsecp256k1.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libsecp256k1/libsecp256k1.vcxproj?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -18,4 +18,5 @@\n   </ItemDefinitionGroup>\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />\n+  <Import Project=\"..\\common.vcxproj\" />\n </Project>\n\\ No newline at end of file"
      },
      {
        "sha": "0f13a57241350d9bb8a37def99f0d5b2f91ad589",
        "filename": "build_msvc/libunivalue/libunivalue.vcxproj",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/libunivalue/libunivalue.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/libunivalue/libunivalue.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libunivalue/libunivalue.vcxproj?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -15,4 +15,5 @@\n   </ItemGroup>\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />\n+  <Import Project=\"..\\common.vcxproj\" />\n </Project>"
      },
      {
        "sha": "2ccb8b30e053f425e2b590a2ae5ee6d51523a957",
        "filename": "build_msvc/msbuild/tasks/replaceinfile.targets",
        "status": "added",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/msbuild/tasks/replaceinfile.targets",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/msbuild/tasks/replaceinfile.targets",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/msbuild/tasks/replaceinfile.targets?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -0,0 +1,35 @@\n+<Project ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n+  <UsingTask\n+    TaskName=\"ReplaceInFile\"\n+    TaskFactory=\"CodeTaskFactory\"\n+    AssemblyFile=\"$(MSBuildToolsPath)\\Microsoft.Build.Tasks.Core.dll\" >\n+    <ParameterGroup>\n+        <FilePath Required=\"true\" />\n+        <Replace Required=\"true\" />\n+        <By Required=\"false\" />\n+        <ToFullPath Required=\"false\" />\n+    </ParameterGroup>\n+    <Task>\n+      <Using Namespace=\"System\"/>\n+      <Using Namespace=\"System.IO\"/>\n+      <Code Type=\"Fragment\" Language=\"cs\">\n+<![CDATA[\n+if(File.Exists(FilePath) == false) {\n+    Log.LogError(\"replaceinfile task could not locate \" + FilePath + \".\");\n+}\n+else {\n+    var data = File.ReadAllText(FilePath);\n+    var by = By;\n+    if (ToFullPath == \"true\")\n+    {\n+       by = Path.GetFullPath(by);\n+    }\n+    data = data.Replace(Replace, by);\n+    Log.LogMessage(\"Replace '\" + Replace + \"' by '\" + by + \"' in \" + FilePath);\n+    File.WriteAllText(FilePath, data, new System.Text.UTF8Encoding(false));\n+}\n+]]>\n+      </Code>\n+    </Task>\n+  </UsingTask>\n+</Project>\n\\ No newline at end of file"
      },
      {
        "sha": "47e87b59e404ee0108a807b61a2d190fc8cdf118",
        "filename": "build_msvc/test_bitcoin/test_bitcoin.vcxproj",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/test_bitcoin/test_bitcoin.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/test_bitcoin/test_bitcoin.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/test_bitcoin/test_bitcoin.vcxproj?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -64,4 +64,5 @@\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />\n   <Import Label=\"hexdumpTarget\" Project=\"..\\msbuild\\tasks\\hexdump.targets\" />\n+  <Import Project=\"..\\common.vcxproj\" />\n </Project>"
      },
      {
        "sha": "776c40920abdd43ca179132ad31c77dd3b2685a3",
        "filename": "build_msvc/testconsensus/testconsensus.vcxproj",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/testconsensus/testconsensus.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/build_msvc/testconsensus/testconsensus.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/testconsensus/testconsensus.vcxproj?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -24,4 +24,5 @@\n   </ItemGroup>\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />\n+  <Import Project=\"..\\common.vcxproj\" />\n </Project>"
      },
      {
        "sha": "16c481158f33c460ad2a96fd9404dcd4b9e80f02",
        "filename": "ci/README.md",
        "status": "added",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/ci/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/ci/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/README.md?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -0,0 +1,31 @@\n+## ci scripts\n+\n+This directory contains scripts for each build step in each build stage.\n+\n+Currently three stages `lint`, `extended_lint` and `test` are defined. Each stage has its own lifecycle, similar to the\n+[Travis CI lifecycle](https://docs.travis-ci.com/user/job-lifecycle#the-job-lifecycle). Every script in here is named\n+and numbered according to which stage and lifecycle step it belongs to.\n+\n+### Running a stage locally\n+\n+To allow for a wide range of tested environments, but also ensure reproducibility to some extent, the test stage\n+requires `docker` to be installed. To install all requirements on Ubuntu, run\n+\n+```\n+sudo apt install docker.io ccache bash git\n+```\n+\n+To run the default test stage,\n+\n+```\n+./ci/test_run_all.sh\n+```\n+\n+To run the test stage with a specific configuration,\n+\n+```\n+FILE_ENV=\"./ci/test/00_setup_env_arm.sh\" ./ci/test_run_all.sh\n+```\n+\n+Be aware that the tests will be build and run in-place, so please run at your own risk.\n+If the repository is not a fresh git clone, you might have to clean files from previous builds or test runs first."
      },
      {
        "sha": "123d874a84da4b8531edf5e51052b581688cef27",
        "filename": "ci/extended_lint/04_install.sh",
        "status": "added",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/ci/extended_lint/04_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/ci/extended_lint/04_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/extended_lint/04_install.sh?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -0,0 +1,12 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C\n+\n+CPPCHECK_VERSION=1.86\n+curl -s https://codeload.github.com/danmar/cppcheck/tar.gz/${CPPCHECK_VERSION} | tar -zxf - --directory /tmp/\n+(cd /tmp/cppcheck-${CPPCHECK_VERSION}/ && make CFGDIR=/tmp/cppcheck-${CPPCHECK_VERSION}/cfg/ > /dev/null)\n+export PATH=\"$PATH:/tmp/cppcheck-${CPPCHECK_VERSION}/\""
      },
      {
        "sha": "e8228c9c4d912c81e16b772e79e85231a2b6c1b9",
        "filename": "ci/extended_lint/06_script.sh",
        "status": "added",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/ci/extended_lint/06_script.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/ci/extended_lint/06_script.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/extended_lint/06_script.sh?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -0,0 +1,9 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C\n+\n+test/lint/extended-lint-all.sh"
      },
      {
        "sha": "20bff368a583d1dfe164ca8bdb4a00f1dc36e682",
        "filename": "ci/lint/04_install.sh",
        "status": "renamed",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/ci/lint/04_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/ci/lint/04_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/lint/04_install.sh?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -6,9 +6,9 @@\n \n export LC_ALL=C\n \n-travis_retry pip install codespell==1.15.0\n-travis_retry pip install flake8==3.5.0\n-travis_retry pip install vulture==0.29\n+travis_retry pip3 install codespell==1.15.0\n+travis_retry pip3 install flake8==3.5.0\n+travis_retry pip3 install vulture==0.29\n \n SHELLCHECK_VERSION=v0.6.0\n curl -s \"https://storage.googleapis.com/shellcheck/shellcheck-${SHELLCHECK_VERSION}.linux.x86_64.tar.xz\" | tar --xz -xf - --directory /tmp/",
        "previous_filename": ".travis/lint_04_install.sh"
      },
      {
        "sha": "28bcbb47f748986c8e95bb87abd5a45faef75e1b",
        "filename": "ci/lint/05_before_script.sh",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/ci/lint/05_before_script.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/ci/lint/05_before_script.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/lint/05_before_script.sh?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "previous_filename": ".travis/lint_05_before_script.sh"
      },
      {
        "sha": "c7dea599dcd7e8769e088a561372195986a3693b",
        "filename": "ci/lint/06_script.sh",
        "status": "renamed",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/ci/lint/06_script.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/ci/lint/06_script.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/lint/06_script.sh?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -18,7 +18,7 @@ test/lint/check-doc.py\n test/lint/check-rpc-mappings.py .\n test/lint/lint-all.sh\n \n-if [ \"$TRAVIS_REPO_SLUG\" = \"bitcoin/bitcoin\" -a \"$TRAVIS_EVENT_TYPE\" = \"cron\" ]; then\n+if [ \"$TRAVIS_REPO_SLUG\" = \"bitcoin/bitcoin\" ] && [ \"$TRAVIS_EVENT_TYPE\" = \"cron\" ]; then\n     git log --merges --before=\"2 days ago\" -1 --format='%H' > ./contrib/verify-commits/trusted-sha512-root-commit\n     travis_retry gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys $(<contrib/verify-commits/trusted-keys) &&\n     ./contrib/verify-commits/verify-commits.py --clean-merge=2;",
        "previous_filename": ".travis/lint_06_script.sh"
      },
      {
        "sha": "983a4980708409020797091f1a73cbd0b6662b3f",
        "filename": "ci/retry/README.md",
        "status": "added",
        "additions": 123,
        "deletions": 0,
        "changes": 123,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/ci/retry/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/ci/retry/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/retry/README.md?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -0,0 +1,123 @@\n+retry - The command line retry tool\n+------------------------------------------\n+\n+Retry any shell command with exponential backoff or constant delay.\n+\n+### Instructions\n+\n+Install:\n+\n+retry is a shell script, so drop it somewhere and make sure it's added to your $PATH. Or you can use the following one-liner:\n+\n+```sh\n+sudo sh -c \"curl https://raw.githubusercontent.com/kadwanev/retry/master/retry -o /usr/local/bin/retry && chmod +x /usr/local/bin/retry\"\n+```\n+\n+If you're on OS X, retry is also on Homebrew:\n+\n+```\n+brew pull 27283\n+brew install retry\n+```\n+Not popular enough for homebrew-core. Please star this project to help.\n+\n+### Usage\n+\n+Help:\n+\n+`retry -?`\n+\n+    Usage: retry [options] -- execute command\n+        -h, -?, --help\n+        -v, --verbose                    Verbose output\n+        -t, --tries=#                    Set max retries: Default 10\n+        -s, --sleep=secs                 Constant sleep amount (seconds)\n+        -m, --min=secs                   Exponenetial Backoff: minimum sleep amount (seconds): Default 0.3\n+        -x, --max=secs                   Exponenetial Backoff: maximum sleep amount (seconds): Default 60\n+        -f, --fail=\"script +cmds\"        Fail Script: run in case of final failure\n+\n+### Examples\n+\n+No problem:\n+\n+`retry echo u work good`\n+\n+    u work good\n+\n+Test functionality:\n+\n+`retry 'echo \"y u no work\"; false'`\n+\n+    y u no work\n+    Before retry #1: sleeping 0.3 seconds\n+    y u no work\n+    Before retry #2: sleeping 0.6 seconds\n+    y u no work\n+    Before retry #3: sleeping 1.2 seconds\n+    y u no work\n+    Before retry #4: sleeping 2.4 seconds\n+    y u no work\n+    Before retry #5: sleeping 4.8 seconds\n+    y u no work\n+    Before retry #6: sleeping 9.6 seconds\n+    y u no work\n+    Before retry #7: sleeping 19.2 seconds\n+    y u no work\n+    Before retry #8: sleeping 38.4 seconds\n+    y u no work\n+    Before retry #9: sleeping 60.0 seconds\n+    y u no work\n+    Before retry #10: sleeping 60.0 seconds\n+    y u no work\n+    etc..\n+\n+Limit retries:\n+\n+`retry -t 4 'echo \"y u no work\"; false'`\n+\n+    y u no work\n+    Before retry #1: sleeping 0.3 seconds\n+    y u no work\n+    Before retry #2: sleeping 0.6 seconds\n+    y u no work\n+    Before retry #3: sleeping 1.2 seconds\n+    y u no work\n+    Before retry #4: sleeping 2.4 seconds\n+    y u no work\n+    Retries exhausted\n+\n+Bad command:\n+\n+`retry poop`\n+\n+    bash: poop: command not found\n+\n+Fail command:\n+\n+`retry -t 3 -f 'echo \"oh poopsickles\"' 'echo \"y u no work\"; false'`\n+\n+    y u no work\n+    Before retry #1: sleeping 0.3 seconds\n+    y u no work\n+    Before retry #2: sleeping 0.6 seconds\n+    y u no work\n+    Before retry #3: sleeping 1.2 seconds\n+    y u no work\n+    Retries exhausted, running fail script\n+    oh poopsickles\n+\n+Last attempt passed:\n+\n+`retry -t 3 -- 'if [ $RETRY_ATTEMPT -eq 3 ]; then echo Passed at attempt $RETRY_ATTEMPT; true; else echo Failed at attempt $RETRY_ATTEMPT; false; fi;'`\n+\n+    Failed at attempt 0\n+    Before retry #1: sleeping 0.3 seconds\n+    Failed at attempt 1\n+    Before retry #2: sleeping 0.6 seconds\n+    Failed at attempt 2\n+    Before retry #3: sleeping 1.2 seconds\n+    Passed at attempt 3\n+\n+### License\n+\n+Apache 2.0 - go nuts"
      },
      {
        "sha": "0e5f6e97014db2377acecf3e84e44b1b1ca1f683",
        "filename": "ci/retry/retry",
        "status": "added",
        "additions": 163,
        "deletions": 0,
        "changes": 163,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/ci/retry/retry",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/ci/retry/retry",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/retry/retry?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -0,0 +1,163 @@\n+#!/usr/bin/env bash\n+\n+GETOPT_BIN=$IN_GETOPT_BIN\n+GETOPT_BIN=${GETOPT_BIN:-getopt}\n+\n+__sleep_amount() {\n+  if [ -n \"$constant_sleep\" ]; then\n+    sleep_time=$constant_sleep\n+  else\n+    #TODO: check for awk\n+    #TODO: check if user would rather use one of the other possible dependencies: python, ruby, bc, dc\n+    sleep_time=`awk \"BEGIN {t = $min_sleep * $(( (1<<($attempts -1)) )); print (t > $max_sleep ? $max_sleep : t)}\"`\n+  fi\n+}\n+\n+__log_out() {\n+  echo \"$1\" 1>&2\n+}\n+\n+# Paramters: max_tries min_sleep max_sleep constant_sleep fail_script EXECUTION_COMMAND\n+retry()\n+{\n+  local max_tries=\"$1\"; shift\n+  local min_sleep=\"$1\"; shift\n+  local max_sleep=\"$1\"; shift\n+  local constant_sleep=\"$1\"; shift\n+  local fail_script=\"$1\"; shift\n+  if [ -n \"$VERBOSE\" ]; then\n+    __log_out \"Retry Parameters: max_tries=$max_tries min_sleep=$min_sleep max_sleep=$max_sleep constant_sleep=$constant_sleep\"\n+    if [ -n \"$fail_script\" ]; then __log_out \"Fail script: $fail_script\"; fi\n+    __log_out \"\"\n+    __log_out \"Execution Command: $*\"\n+    __log_out \"\"\n+  fi\n+\n+  local attempts=0\n+  local return_code=1\n+\n+\n+  while [[ $return_code -ne 0 && $attempts -le $max_tries ]]; do\n+    if [ $attempts -gt 0 ]; then\n+      __sleep_amount\n+      __log_out \"Before retry #$attempts: sleeping $sleep_time seconds\"\n+      sleep $sleep_time\n+    fi\n+\n+    P=\"$1\"\n+    for param in \"${@:2}\"; do P=\"$P '$param'\"; done\n+    #TODO: replace single quotes in each arg with '\"'\"' ?\n+    export RETRY_ATTEMPT=$attempts\n+    bash -c \"$P\"\n+    return_code=$?\n+    #__log_out \"Process returned $return_code on attempt $attempts\"\n+    if [ $return_code -eq 127 ]; then\n+      # command not found\n+      exit $return_code\n+    elif [ $return_code -ne 0 ]; then\n+      attempts=$[$attempts +1]\n+    fi\n+  done\n+\n+  if [ $attempts -gt $max_tries ]; then\n+    if [ -n \"$fail_script\" ]; then\n+      __log_out \"Retries exhausted, running fail script\"\n+      eval $fail_script\n+    else\n+      __log_out \"Retries exhausted\"\n+    fi\n+  fi\n+\n+  exit $return_code\n+}\n+\n+# If we're being sourced, don't worry about such things\n+if [ \"$BASH_SOURCE\" == \"$0\" ]; then\n+  # Prints the help text\n+  help()\n+  {\n+    local retry=$(basename $0)\n+    cat <<EOF\n+Usage: $retry [options] -- execute command\n+    -h, -?, --help\n+    -v, --verbose                    Verbose output\n+    -t, --tries=#                    Set max retries: Default 10\n+    -s, --sleep=secs                 Constant sleep amount (seconds)\n+    -m, --min=secs                   Exponenetial Backoff: minimum sleep amount (seconds): Default 0.3\n+    -x, --max=secs                   Exponenetial Backoff: maximum sleep amount (seconds): Default 60\n+    -f, --fail=\"script +cmds\"        Fail Script: run in case of final failure\n+EOF\n+  }\n+\n+  # show help for no arguments if stdin is a terminal\n+  if { [ -z \"$1\" ] && [ -t 0 ] ; } || [ \"$1\" == '-h' ] || [ \"$1\" == '-?' ] || [ \"$1\" == '--help' ]\n+  then\n+    help\n+    exit 0\n+  fi\n+\n+  $GETOPT_BIN --test > /dev/null\n+  if [[ $? -ne 4 ]]; then\n+      echo \"I\u2019m sorry, 'getopt --test' failed in this environment. Please load GNU getopt.\"\n+      exit 1\n+  fi\n+\n+  OPTIONS=vt:s:m:x:f:\n+  LONGOPTIONS=verbose,tries:,sleep:,min:,max:,fail:\n+\n+  PARSED=$($GETOPT_BIN --options=\"$OPTIONS\" --longoptions=\"$LONGOPTIONS\" --name \"$0\" -- \"$@\")\n+  if [[ $? -ne 0 ]]; then\n+    # e.g. $? == 1\n+    #  then getopt has complained about wrong arguments to stdout\n+    exit 2\n+  fi\n+  # read getopt\u2019s output this way to handle the quoting right:\n+  eval set -- \"$PARSED\"\n+\n+  max_tries=10\n+  min_sleep=0.3\n+  max_sleep=60.0\n+  constant_sleep=\n+  fail_script=\n+\n+  # now enjoy the options in order and nicely split until we see --\n+  while true; do\n+      case \"$1\" in\n+          -v|--verbose)\n+              VERBOSE=true\n+              shift\n+              ;;\n+          -t|--tries)\n+              max_tries=\"$2\"\n+              shift 2\n+              ;;\n+          -s|--sleep)\n+              constant_sleep=\"$2\"\n+              shift 2\n+              ;;\n+          -m|--min)\n+              min_sleep=\"$2\"\n+              shift 2\n+              ;;\n+          -x|--max)\n+              max_sleep=\"$2\"\n+              shift 2\n+              ;;\n+          -f|--fail)\n+              fail_script=\"$2\"\n+              shift 2\n+              ;;\n+          --)\n+              shift\n+              break\n+              ;;\n+          *)\n+              echo \"Programming error\"\n+              exit 3\n+              ;;\n+      esac\n+  done\n+\n+  retry \"$max_tries\" \"$min_sleep\" \"$max_sleep\" \"$constant_sleep\" \"$fail_script\" \"$@\"\n+\n+fi"
      },
      {
        "sha": "09b37f8240cd961cdd2b89b6840fff33c12c7be2",
        "filename": "ci/test/00_setup_env.sh",
        "status": "added",
        "additions": 40,
        "deletions": 0,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/ci/test/00_setup_env.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/ci/test/00_setup_env.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env.sh?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -0,0 +1,40 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C.UTF-8\n+\n+echo \"Setting default values in env\"\n+\n+BASE_ROOT_DIR=$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\"/../../ >/dev/null 2>&1 && pwd )\n+export BASE_ROOT_DIR\n+\n+export MAKEJOBS=${MAKEJOBS:--j3}\n+export HOST=${HOST:-x86_64-unknown-linux-gnu}\n+export RUN_UNIT_TESTS=${RUN_UNIT_TESTS:-true}\n+export RUN_FUNCTIONAL_TESTS=${RUN_FUNCTIONAL_TESTS:-true}\n+export RUN_FUZZ_TESTS=${RUN_FUZZ_TESTS:-false}\n+export DOCKER_NAME_TAG=${DOCKER_NAME_TAG:-ubuntu:18.04}\n+export BOOST_TEST_RANDOM=${BOOST_TEST_RANDOM:-1$TRAVIS_BUILD_ID}\n+export CCACHE_SIZE=${CCACHE_SIZE:-100M}\n+export CCACHE_TEMPDIR=${CCACHE_TEMPDIR:-/tmp/.ccache-temp}\n+export CCACHE_COMPRESS=${CCACHE_COMPRESS:-1}\n+export CCACHE_DIR=${CCACHE_DIR:-$HOME/.ccache}\n+export BASE_BUILD_DIR=${BASE_BUILD_DIR:-${TRAVIS_BUILD_DIR:-$BASE_ROOT_DIR}}\n+export BASE_OUTDIR=${BASE_OUTDIR:-$BASE_BUILD_DIR/out/$HOST}\n+export SDK_URL=${SDK_URL:-https://bitcoincore.org/depends-sources/sdks}\n+export WINEDEBUG=${WINEDEBUG:-fixme-all}\n+export DOCKER_PACKAGES=${DOCKER_PACKAGES:-build-essential libtool autotools-dev automake pkg-config bsdmainutils curl ca-certificates ccache python3}\n+export GOAL=${GOAL:-install}\n+export DIR_QA_ASSETS=${DIR_QA_ASSETS:-${BASE_BUILD_DIR}/qa-assets}\n+export PATH=${BASE_ROOT_DIR}/ci/retry:$PATH\n+export CI_RETRY_EXE=${CI_RETRY_EXE:retry}\n+\n+echo \"Setting specific values in env\"\n+if [ -n \"${FILE_ENV}\" ]; then\n+  set -o errexit;\n+  # shellcheck disable=SC1090\n+  source \"${FILE_ENV}\"\n+fi"
      },
      {
        "sha": "9d20b6a72b3b737b680875f54dd1cc2d6e39c434",
        "filename": "ci/test/00_setup_env_amd64_asan.sh",
        "status": "added",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/ci/test/00_setup_env_amd64_asan.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/ci/test/00_setup_env_amd64_asan.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_amd64_asan.sh?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -0,0 +1,13 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C.UTF-8\n+\n+export HOST=x86_64-unknown-linux-gnu\n+export PACKAGES=\"clang llvm python3-zmq qtbase5-dev qttools5-dev-tools libssl1.0-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libprotobuf-dev protobuf-compiler libqrencode-dev\"\n+export NO_DEPENDS=1\n+export GOAL=\"install\"\n+export BITCOIN_CONFIG=\"--enable-zmq --with-incompatible-bdb --with-gui=qt5 CPPFLAGS=-DDEBUG_LOCKORDER --with-sanitizers=address,integer,undefined CC=clang CXX=clang++\""
      },
      {
        "sha": "edcb65af286bf4d4c765fede5da4271e66ca9873",
        "filename": "ci/test/00_setup_env_amd64_fuzz.sh",
        "status": "added",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/ci/test/00_setup_env_amd64_fuzz.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/ci/test/00_setup_env_amd64_fuzz.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_amd64_fuzz.sh?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -0,0 +1,16 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C.UTF-8\n+\n+export HOST=x86_64-unknown-linux-gnu\n+export PACKAGES=\"clang llvm python3 libssl1.0-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev\"\n+export NO_DEPENDS=1\n+export RUN_UNIT_TESTS=false\n+export RUN_FUNCTIONAL_TESTS=false\n+export RUN_FUZZ_TESTS=true\n+export GOAL=\"install\"\n+export BITCOIN_CONFIG=\"--enable-fuzz --with-sanitizers=fuzzer,address CC=clang CXX=clang++\""
      },
      {
        "sha": "d5a2ba311192c33daecff7f6f99b844241ba77e4",
        "filename": "ci/test/00_setup_env_amd64_nowallet.sh",
        "status": "added",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/ci/test/00_setup_env_amd64_nowallet.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/ci/test/00_setup_env_amd64_nowallet.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_amd64_nowallet.sh?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -0,0 +1,13 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C.UTF-8\n+\n+export HOST=x86_64-unknown-linux-gnu\n+export PACKAGES=\"python3-zmq\"\n+export DEP_OPTS=\"NO_WALLET=1\"\n+export GOAL=\"install\"\n+export BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\""
      },
      {
        "sha": "77b1531be4780eca9d9553dd4c806e8c35a20a92",
        "filename": "ci/test/00_setup_env_amd64_qt5.sh",
        "status": "added",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/ci/test/00_setup_env_amd64_qt5.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/ci/test/00_setup_env_amd64_qt5.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_amd64_qt5.sh?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -0,0 +1,14 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C.UTF-8\n+\n+export HOST=x86_64-unknown-linux-gnu\n+export PACKAGES=\"python3-zmq qtbase5-dev qttools5-dev-tools protobuf-compiler libdbus-1-dev libharfbuzz-dev libprotobuf-dev\"\n+export DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1 ALLOW_HOST_PACKAGES=1\"\n+export TEST_RUNNER_EXTRA=\"--coverage --extended --exclude feature_dbcrash\"  # Run extended tests so that coverage does not fail, but exclude the very slow dbcrash\n+export GOAL=\"install\"\n+export BITCOIN_CONFIG=\"--enable-zmq --with-gui=qt5 --enable-glibc-back-compat --enable-reduce-exports --enable-debug CFLAGS=\\\"-g0 -O2 -funsigned-char\\\" CXXFLAGS=\\\"-g0 -O2 -funsigned-char\\\"\""
      },
      {
        "sha": "cc0f1196e78a1f9eaf9b1c6660e5abd7a3d792d9",
        "filename": "ci/test/00_setup_env_amd64_trusty.sh",
        "status": "added",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/ci/test/00_setup_env_amd64_trusty.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/ci/test/00_setup_env_amd64_trusty.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_amd64_trusty.sh?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -0,0 +1,15 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C.UTF-8\n+\n+export HOST=x86_64-unknown-linux-gnu\n+export DOCKER_NAME_TAG=ubuntu:14.04\n+export PACKAGES=\"python3-zmq qtbase5-dev qttools5-dev-tools libicu-dev libpng-dev libssl-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libdb5.1++-dev libzmq3-dev libprotobuf-dev protobuf-compiler libqrencode-dev\"\n+export NO_DEPENDS=1\n+export RUN_FUNCTIONAL_TESTS=false\n+export GOAL=\"install\"\n+export BITCOIN_CONFIG=\"--enable-zmq --with-incompatible-bdb --with-gui=no\""
      },
      {
        "sha": "c127e284bdfead67496dd652d7feec6a369920e6",
        "filename": "ci/test/00_setup_env_amd64_tsan.sh",
        "status": "added",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/ci/test/00_setup_env_amd64_tsan.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/ci/test/00_setup_env_amd64_tsan.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_amd64_tsan.sh?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -0,0 +1,14 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C.UTF-8\n+\n+export HOST=x86_64-unknown-linux-gnu\n+export DOCKER_NAME_TAG=ubuntu:16.04\n+export PACKAGES=\"clang llvm python3-zmq qtbase5-dev qttools5-dev-tools libssl-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libprotobuf-dev protobuf-compiler libqrencode-dev\"\n+export NO_DEPENDS=1\n+export GOAL=\"install\"\n+export BITCOIN_CONFIG=\"--enable-zmq --disable-wallet --with-gui=qt5 CPPFLAGS=-DDEBUG_LOCKORDER --with-sanitizers=thread --disable-hardening --disable-asm CC=clang CXX=clang++\""
      },
      {
        "sha": "ac7ace8c3b637ecab332ef1c5299c9b80fc03c51",
        "filename": "ci/test/00_setup_env_arm.sh",
        "status": "added",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/ci/test/00_setup_env_arm.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/ci/test/00_setup_env_arm.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_arm.sh?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -0,0 +1,16 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C.UTF-8\n+\n+export HOST=arm-linux-gnueabihf\n+export PACKAGES=\"python3 g++-arm-linux-gnueabihf\"\n+export RUN_UNIT_TESTS=false\n+export RUN_FUNCTIONAL_TESTS=false\n+export GOAL=\"install\"\n+# -Wno-psabi is to disable ABI warnings: \"note: parameter passing for argument of type ... changed in GCC 7.1\"\n+# This could be removed once the ABI change warning does not show up by default\n+export BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports CXXFLAGS=-Wno-psabi\""
      },
      {
        "sha": "768e2ac558dc8c641fe2fb775c1e8877bfa498d6",
        "filename": "ci/test/00_setup_env_i686.sh",
        "status": "added",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/ci/test/00_setup_env_i686.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/ci/test/00_setup_env_i686.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_i686.sh?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -0,0 +1,13 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C.UTF-8\n+\n+export HOST=i686-pc-linux-gnu\n+export PACKAGES=\"g++-multilib python3-zmq\"\n+export GOAL=\"install\"\n+export BITCOIN_CONFIG=\"--enable-zmq --with-gui=qt5 --disable-bip70 --enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\"\n+export CONFIG_SHELL=\"/bin/dash\""
      },
      {
        "sha": "f384ba92636ca633092e9824766c36fdb66377c2",
        "filename": "ci/test/00_setup_env_mac.sh",
        "status": "added",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/ci/test/00_setup_env_mac.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/ci/test/00_setup_env_mac.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_mac.sh?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -0,0 +1,15 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C.UTF-8\n+\n+export HOST=x86_64-apple-darwin14\n+export PACKAGES=\"cmake imagemagick libcap-dev librsvg2-bin libz-dev libbz2-dev libtiff-tools python3-dev python3-setuptools\"\n+export OSX_SDK=10.11\n+export RUN_UNIT_TESTS=false\n+export RUN_FUNCTIONAL_TESTS=false\n+export GOAL=\"deploy\"\n+export BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports --enable-werror\""
      },
      {
        "sha": "1e04c4287af1de65da686d3e8ab0565cd7ec705d",
        "filename": "ci/test/00_setup_env_win64.sh",
        "status": "added",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/ci/test/00_setup_env_win64.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/ci/test/00_setup_env_win64.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_win64.sh?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -0,0 +1,13 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C.UTF-8\n+\n+export HOST=x86_64-w64-mingw32\n+export PACKAGES=\"python3 nsis g++-mingw-w64-x86-64 wine-binfmt wine64\"\n+export RUN_FUNCTIONAL_TESTS=false\n+export GOAL=\"deploy\"\n+export BITCOIN_CONFIG=\"--enable-reduce-exports --disable-gui-tests\""
      },
      {
        "sha": "5086114ba16e85b0399ffce587f6e1cf2b187bf9",
        "filename": "ci/test/03_before_install.sh",
        "status": "renamed",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/ci/test/03_before_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/ci/test/03_before_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/03_before_install.sh?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -6,7 +6,6 @@\n \n export LC_ALL=C.UTF-8\n \n-PATH=$(echo $PATH | tr ':' \"\\n\" | sed '/\\/opt\\/python/d' | tr \"\\n\" \":\" | sed \"s|::|:|g\")\n # Add llvm-symbolizer directory to PATH. Needed to get symbolized stack traces from the sanitizers.\n PATH=$PATH:/usr/lib/llvm-6.0/bin/\n export PATH",
        "previous_filename": ".travis/test_03_before_install.sh"
      },
      {
        "sha": "3535746e83f1a6fb8347fc4440f59a7706d1c6c4",
        "filename": "ci/test/04_install.sh",
        "status": "added",
        "additions": 49,
        "deletions": 0,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/ci/test/04_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/ci/test/04_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/04_install.sh?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -0,0 +1,49 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C.UTF-8\n+\n+ccache echo \"Creating ccache dir if it didn't already exist\"\n+\n+if [ ! -d ${DIR_QA_ASSETS} ]; then\n+  git clone https://github.com/bitcoin-core/qa-assets ${DIR_QA_ASSETS}\n+fi\n+export DIR_FUZZ_IN=${DIR_QA_ASSETS}/fuzz_seed_corpus/\n+\n+mkdir -p \"${BASE_BUILD_DIR}/sanitizer-output/\"\n+export ASAN_OPTIONS=\"\"\n+export LSAN_OPTIONS=\"suppressions=${BASE_BUILD_DIR}/test/sanitizer_suppressions/lsan\"\n+export TSAN_OPTIONS=\"suppressions=${BASE_BUILD_DIR}/test/sanitizer_suppressions/tsan:log_path=${BASE_BUILD_DIR}/sanitizer-output/tsan\"\n+export UBSAN_OPTIONS=\"suppressions=${BASE_BUILD_DIR}/test/sanitizer_suppressions/ubsan:print_stacktrace=1:halt_on_error=1\"\n+env | grep -E '^(BITCOIN_CONFIG|CCACHE_|WINEDEBUG|LC_ALL|BOOST_TEST_RANDOM|CONFIG_SHELL|(ASAN|LSAN|TSAN|UBSAN)_OPTIONS)' | tee /tmp/env\n+if [[ $HOST = *-mingw32 ]]; then\n+  DOCKER_ADMIN=\"--cap-add SYS_ADMIN\"\n+elif [[ $BITCOIN_CONFIG = *--with-sanitizers=*address* ]]; then # If ran with (ASan + LSan), Docker needs access to ptrace (https://github.com/google/sanitizers/issues/764)\n+  DOCKER_ADMIN=\"--cap-add SYS_PTRACE\"\n+fi\n+\n+if [ -z \"$RUN_CI_ON_HOST\" ]; then\n+  echo \"Creating $DOCKER_NAME_TAG container to run in\"\n+  ${CI_RETRY_EXE} docker pull \"$DOCKER_NAME_TAG\"\n+\n+  DOCKER_ID=$(docker run $DOCKER_ADMIN -idt --mount type=bind,src=$BASE_BUILD_DIR,dst=$BASE_BUILD_DIR --mount type=bind,src=$CCACHE_DIR,dst=$CCACHE_DIR -w $BASE_BUILD_DIR --env-file /tmp/env $DOCKER_NAME_TAG)\n+\n+  DOCKER_EXEC () {\n+    docker exec $DOCKER_ID bash -c \"cd $PWD && $*\"\n+  }\n+else\n+  echo \"Running on host system without docker wrapper\"\n+  DOCKER_EXEC () {\n+    bash -c \"cd $PWD && $*\"\n+  }\n+fi\n+\n+DOCKER_EXEC free -m -h\n+DOCKER_EXEC echo \"Number of CPUs \\(nproc\\): $(nproc)\"\n+\n+${CI_RETRY_EXE} DOCKER_EXEC apt-get update\n+${CI_RETRY_EXE} DOCKER_EXEC apt-get install --no-install-recommends --no-upgrade -qq $PACKAGES $DOCKER_PACKAGES\n+"
      },
      {
        "sha": "516d3fc0428ba30588a1be864be324551318dcd4",
        "filename": "ci/test/05_before_script.sh",
        "status": "renamed",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/ci/test/05_before_script.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/ci/test/05_before_script.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/05_before_script.sh?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -10,10 +10,10 @@ DOCKER_EXEC echo \\> \\$HOME/.bitcoin  # Make sure default datadir does not exist\n \n mkdir -p depends/SDKs depends/sdk-sources\n \n-if [ -n \"$OSX_SDK\" -a ! -f depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then\n+if [ -n \"$OSX_SDK\" ] && [ ! -f depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then\n   curl --location --fail $SDK_URL/MacOSX${OSX_SDK}.sdk.tar.gz -o depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz\n fi\n-if [ -n \"$OSX_SDK\" -a -f depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then\n+if [ -n \"$OSX_SDK\" ] && [ -f depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then\n   tar -C depends/SDKs -xf depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz\n fi\n if [[ $HOST = *-mingw32 ]]; then\n@@ -22,4 +22,3 @@ fi\n if [ -z \"$NO_DEPENDS\" ]; then\n   DOCKER_EXEC CONFIG_SHELL= make $MAKEJOBS -C depends HOST=$HOST $DEP_OPTS\n fi\n-",
        "previous_filename": ".travis/test_05_before_script.sh"
      },
      {
        "sha": "eb6ade7919f89c60f0b5aa492b6778f0e929e409",
        "filename": "ci/test/06_script_a.sh",
        "status": "renamed",
        "additions": 4,
        "deletions": 8,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/ci/test/06_script_a.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/ci/test/06_script_a.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/06_script_a.sh?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -6,11 +6,7 @@\n \n export LC_ALL=C.UTF-8\n \n-TRAVIS_COMMIT_LOG=$(git log --format=fuller -1)\n-export TRAVIS_COMMIT_LOG\n-\n-OUTDIR=$BASE_OUTDIR/$TRAVIS_PULL_REQUEST/$TRAVIS_JOB_NUMBER-$HOST\n-BITCOIN_CONFIG_ALL=\"--disable-dependency-tracking --prefix=$TRAVIS_BUILD_DIR/depends/$HOST --bindir=$OUTDIR/bin --libdir=$OUTDIR/lib\"\n+BITCOIN_CONFIG_ALL=\"--disable-dependency-tracking --prefix=$BASE_BUILD_DIR/depends/$HOST --bindir=$BASE_OUTDIR/bin --libdir=$BASE_OUTDIR/lib\"\n if [ -z \"$NO_DEPENDS\" ]; then\n   DOCKER_EXEC ccache --max-size=$CCACHE_SIZE\n fi\n@@ -23,7 +19,7 @@ else\n fi\n END_FOLD\n \n-mkdir build\n+mkdir -p build\n cd build || (echo \"could not enter build directory\"; exit 1)\n \n BEGIN_FOLD configure\n@@ -41,10 +37,10 @@ DOCKER_EXEC ./configure --cache-file=../config.cache $BITCOIN_CONFIG_ALL $BITCOI\n END_FOLD\n \n set -o errtrace\n-trap 'DOCKER_EXEC \"cat ${TRAVIS_BUILD_DIR}/sanitizer-output/* 2> /dev/null\"' ERR\n+trap 'DOCKER_EXEC \"cat ${BASE_BUILD_DIR}/sanitizer-output/* 2> /dev/null\"' ERR\n \n BEGIN_FOLD build\n DOCKER_EXEC make $MAKEJOBS $GOAL || ( echo \"Build failure. Verbose build follows.\" && DOCKER_EXEC make $GOAL V=1 ; false )\n END_FOLD\n \n-cd ${TRAVIS_BUILD_DIR} || (echo \"could not enter travis build dir $TRAVIS_BUILD_DIR\"; exit 1)\n+cd ${BASE_BUILD_DIR} || (echo \"could not enter travis build dir $BASE_BUILD_DIR\"; exit 1)",
        "previous_filename": ".travis/test_06_script_a.sh"
      },
      {
        "sha": "d179ce81c0a1aef00827bb87801f88441b06514a",
        "filename": "ci/test/06_script_b.sh",
        "status": "renamed",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/ci/test/06_script_b.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/ci/test/06_script_b.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/06_script_b.sh?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -10,13 +10,13 @@ cd \"build/bitcoin-$HOST\" || (echo \"could not enter distdir build/bitcoin-$HOST\";\n \n if [ \"$RUN_UNIT_TESTS\" = \"true\" ]; then\n   BEGIN_FOLD unit-tests\n-  DOCKER_EXEC LD_LIBRARY_PATH=$TRAVIS_BUILD_DIR/depends/$HOST/lib make $MAKEJOBS check VERBOSE=1\n+  DOCKER_EXEC LD_LIBRARY_PATH=$BASE_BUILD_DIR/depends/$HOST/lib make $MAKEJOBS check VERBOSE=1\n   END_FOLD\n fi\n \n if [ \"$RUN_FUNCTIONAL_TESTS\" = \"true\" ]; then\n   BEGIN_FOLD functional-tests\n-  DOCKER_EXEC test/functional/test_runner.py --ci --combinedlogslen=4000 ${TEST_RUNNER_EXTRA} --quiet --failfast\n+  DOCKER_EXEC test/functional/test_runner.py --ci --ansi --combinedlogslen=4000 ${TEST_RUNNER_EXTRA} --quiet --failfast\n   END_FOLD\n fi\n \n@@ -26,4 +26,4 @@ if [ \"$RUN_FUZZ_TESTS\" = \"true\" ]; then\n   END_FOLD\n fi\n \n-cd ${TRAVIS_BUILD_DIR} || (echo \"could not enter travis build dir $TRAVIS_BUILD_DIR\"; exit 1)\n+cd ${BASE_BUILD_DIR} || (echo \"could not enter travis build dir $BASE_BUILD_DIR\"; exit 1)",
        "previous_filename": ".travis/test_06_script_b.sh"
      },
      {
        "sha": "a1d4bd19524daefccee252ec22fbcdd780c2c3d1",
        "filename": "ci/test_run_all.sh",
        "status": "added",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/ci/test_run_all.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/ci/test_run_all.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test_run_all.sh?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -0,0 +1,14 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C.UTF-8\n+\n+set -o errexit; source ./ci/test/00_setup_env.sh\n+set -o errexit; source ./ci/test/03_before_install.sh\n+set -o errexit; source ./ci/test/04_install.sh\n+set -o errexit; source ./ci/test/05_before_script.sh\n+set -o errexit; source ./ci/test/06_script_a.sh\n+set -o errexit; source ./ci/test/06_script_b.sh"
      },
      {
        "sha": "35bb0c023152567b6ac41a82a0c3a19d5aea1dc8",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 80,
        "deletions": 17,
        "changes": 97,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -133,7 +133,7 @@ AC_ARG_ENABLE(gui-tests,\n \n AC_ARG_WITH([rapidcheck],\n   [AS_HELP_STRING([--with-rapidcheck],\n-  [enable RapidCheck property based tests (default is yes if librapidcheck is found)])],\n+  [enable RapidCheck property-based tests (default is yes if librapidcheck is found)])],\n   [use_rapidcheck=$withval],\n   [use_rapidcheck=auto])\n \n@@ -148,7 +148,8 @@ AC_ARG_ENABLE([extended-functional-tests],\n     [use_extended_functional_tests=no])\n \n AC_ARG_ENABLE([fuzz],\n-    AS_HELP_STRING([--enable-fuzz],[enable building of fuzz targets (default no)]),\n+    AS_HELP_STRING([--enable-fuzz],\n+    [enable building of fuzz targets (default no). enabling this will disable all other targets]),\n     [enable_fuzz=$enableval],\n     [enable_fuzz=no])\n \n@@ -238,7 +239,7 @@ AM_CONDITIONAL(ENABLE_MAN, test \"$enable_man\" != no)\n # Enable debug\n AC_ARG_ENABLE([debug],\n     [AS_HELP_STRING([--enable-debug],\n-                    [use debug compiler flags and macros (default is no)])],\n+                    [use compiler flags and macros suited for debugging (default is no)])],\n     [enable_debug=$enableval],\n     [enable_debug=no])\n \n@@ -270,12 +271,9 @@ if test \"x$enable_debug\" = xyes; then\n   if test \"x$CXXFLAGS_overridden\" = xno; then\n \tCXXFLAGS=\"\"\n   fi\n-  # Prefer -Og, fall back to -O0 if that is unavailable.\n-  AX_CHECK_COMPILE_FLAG(\n-    [-Og],\n-    [[DEBUG_CXXFLAGS=\"$DEBUG_CXXFLAGS -Og\"]],\n-    [AX_CHECK_COMPILE_FLAG([-O0],[[DEBUG_CXXFLAGS=\"$DEBUG_CXXFLAGS -O0\"]],,[[$CXXFLAG_WERROR]])],\n-    [[$CXXFLAG_WERROR]])\n+\n+  # Disable all optimizations\n+  AX_CHECK_COMPILE_FLAG([-O0], [[DEBUG_CXXFLAGS=\"$DEBUG_CXXFLAGS -O0\"]],,[[$CXXFLAG_WERROR]])\n \n   # Prefer -g3, fall back to -g if that is unavailable.\n   AX_CHECK_COMPILE_FLAG(\n@@ -322,6 +320,7 @@ if test \"x$enable_werror\" = \"xyes\"; then\n     AC_MSG_ERROR(\"enable-werror set but -Werror is not usable\")\n   fi\n   AX_CHECK_COMPILE_FLAG([-Werror=vla],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=vla\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Werror=switch],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=switch\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Werror=thread-safety-analysis],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=thread-safety-analysis\"],,[[$CXXFLAG_WERROR]])\n fi\n \n@@ -330,6 +329,7 @@ if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n   AX_CHECK_COMPILE_FLAG([-Wextra],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wextra\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wformat],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wformat\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wvla],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wvla\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wswitch],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wswitch\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wformat-security],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wformat-security\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wthread-safety-analysis],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wthread-safety-analysis\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wrange-loop-analysis],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wrange-loop-analysis\"],,[[$CXXFLAG_WERROR]])\n@@ -925,6 +925,29 @@ if test x$use_reduce_exports = xyes; then\n   [AC_MSG_ERROR([Cannot set default symbol visibility. Use --disable-reduce-exports.])])\n fi\n \n+AC_MSG_CHECKING([for std::system])\n+AC_LINK_IFELSE(\n+    [ AC_LANG_PROGRAM(\n+        [[ #include <cstdlib> ]],\n+        [[ int nErr = std::system(\"\"); ]]\n+    )],\n+    [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_STD__SYSTEM, 1, Define to 1 if you have the `std::system' function.)],\n+    [ AC_MSG_RESULT(no) ]\n+)\n+\n+AC_MSG_CHECKING([for ::_wsystem])\n+AC_LINK_IFELSE(\n+    [ AC_LANG_PROGRAM(\n+        [[ ]],\n+        [[ int nErr = ::_wsystem(\"\"); ]]\n+    )],\n+    [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_WSYSTEM, 1, Define to 1 if you have the `::wsystem' function.)],\n+    [ AC_MSG_RESULT(no) ]\n+)\n+\n+# Define to 1 if std::system or ::wsystem (Windows) is available\n+AC_DEFINE([HAVE_SYSTEM], [HAVE_STD__SYSTEM || HAVE_WSYSTEM], [std::system or ::wsystem])\n+\n LEVELDB_CPPFLAGS=\n LIBLEVELDB=\n LIBMEMENV=\n@@ -933,6 +956,29 @@ AC_SUBST(LEVELDB_CPPFLAGS)\n AC_SUBST(LIBLEVELDB)\n AC_SUBST(LIBMEMENV)\n \n+dnl enable-fuzz should disable all other targets\n+if test \"x$enable_fuzz\" = \"xyes\"; then\n+  AC_MSG_WARN(enable-fuzz will disable all other targets)\n+  build_bitcoin_utils=no\n+  build_bitcoin_cli=no\n+  build_bitcoin_tx=no\n+  build_bitcoin_wallet=no\n+  build_bitcoind=no\n+  build_bitcoin_libs=no\n+  bitcoin_enable_qt=no\n+  bitcoin_enable_qt_test=no\n+  bitcoin_enable_qt_dbus=no\n+  enable_wallet=no\n+  use_bench=no\n+  use_upnp=no\n+  use_zmq=no\n+else\n+  BITCOIN_QT_INIT\n+\n+  dnl sets $bitcoin_enable_qt, $bitcoin_enable_qt_test, $bitcoin_enable_qt_dbus\n+  BITCOIN_QT_CONFIGURE([$use_pkgconfig])\n+fi\n+\n if test x$enable_wallet != xno; then\n     dnl Check for libdb_cxx only if wallet enabled\n     BITCOIN_FIND_BDB48\n@@ -945,12 +991,27 @@ if test x$use_upnp != xno; then\n     [AC_CHECK_LIB([miniupnpc], [upnpDiscover], [MINIUPNPC_LIBS=-lminiupnpc], [have_miniupnpc=no])],\n     [have_miniupnpc=no]\n   )\n+dnl The minimum supported miniUPnPc API version is set to 10. This keeps compatibility\n+dnl with Ubuntu 16.04 LTS and Debian 8 libminiupnpc-dev packages.\n+if test x$have_miniupnpc != xno; then\n+  AC_MSG_CHECKING([whether miniUPnPc API version is supported])\n+  AC_PREPROC_IFELSE([AC_LANG_PROGRAM([[\n+      @%:@include <miniupnpc/miniupnpc.h>\n+    ]], [[\n+      #if MINIUPNPC_API_VERSION >= 10\n+      // Everything is okay\n+      #else\n+      #  error miniUPnPc API version is too old\n+      #endif\n+    ]])],[\n+      AC_MSG_RESULT(yes)\n+    ],[\n+    AC_MSG_RESULT(no)\n+    AC_MSG_WARN([miniUPnPc API version < 10 is unsupported, disabling UPnP support.])\n+    have_miniupnpc=no\n+  ])\n+fi\n fi\n-\n-BITCOIN_QT_INIT\n-\n-dnl sets $bitcoin_enable_qt, $bitcoin_enable_qt_test, $bitcoin_enable_qt_dbus\n-BITCOIN_QT_CONFIGURE([$use_pkgconfig])\n \n if test x$build_bitcoin_wallet$build_bitcoin_cli$build_bitcoin_tx$build_bitcoind$bitcoin_enable_qt$use_tests$use_bench = xnonononononono; then\n     use_boost=no\n@@ -1214,7 +1275,7 @@ AC_CHECK_DECLS([EVP_MD_CTX_new],,,[AC_INCLUDES_DEFAULT\n ])\n CXXFLAGS=\"${save_CXXFLAGS}\"\n \n-dnl RapidCheck Property Based Testing\n+dnl RapidCheck property-based testing\n \n enable_property_tests=no\n if test \"x$use_rapidcheck\" = xauto; then\n@@ -1343,9 +1404,10 @@ dnl enable upnp support\n AC_MSG_CHECKING([whether to build with support for UPnP])\n if test x$have_miniupnpc = xno; then\n   if test x$use_upnp = xyes; then\n-     AC_MSG_ERROR(\"UPnP requested but cannot be built. use --without-miniupnpc\")\n+     AC_MSG_ERROR(\"UPnP requested but cannot be built. Use --without-miniupnpc.\")\n   fi\n   AC_MSG_RESULT(no)\n+  use_upnp=no\n else\n   if test x$use_upnp != xno; then\n     AC_MSG_RESULT(yes)\n@@ -1560,7 +1622,7 @@ if test x$need_bundled_univalue = xyes; then\n   AC_CONFIG_SUBDIRS([src/univalue])\n fi\n \n-ac_configure_args=\"${ac_configure_args} --disable-shared --with-pic --with-bignum=no --enable-module-recovery --disable-jni\"\n+ac_configure_args=\"${ac_configure_args} --disable-shared --with-pic --enable-benchmark=no --with-bignum=no --enable-module-recovery --disable-jni\"\n AC_CONFIG_SUBDIRS([src/secp256k1])\n \n AC_OUTPUT\n@@ -1595,6 +1657,7 @@ fi\n echo \"  with zmq      = $use_zmq\"\n echo \"  with test     = $use_tests\"\n if test x$use_tests != xno; then\n+    echo \"    with prop   = $enable_property_tests\"\n     echo \"    with fuzz   = $enable_fuzz\"\n fi\n echo \"  with bench    = $use_bench\""
      },
      {
        "sha": "e9e72f6686f8b94b9da9fc67e6e777d3772be5c7",
        "filename": "contrib/README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/contrib/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/contrib/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/README.md?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -3,10 +3,10 @@ Repository Tools\n \n ### [Developer tools](/contrib/devtools) ###\n Specific tools for developers working on this repository.\n-Contains the script `github-merge.py` for merging GitHub pull requests securely and signing them using GPG.\n+Additional tools, including the `github-merge.py` script, are available in the [maintainer-tools](https://github.com/bitcoin-core/bitcoin-maintainer-tools) repository.\n \n ### [Verify-Commits](/contrib/verify-commits) ###\n-Tool to verify that every merge commit was signed by a developer using the above `github-merge.py` script.\n+Tool to verify that every merge commit was signed by a developer using the `github-merge.py` script.\n \n ### [Linearize](/contrib/linearize) ###\n Construct a linear, no-fork, best version of the blockchain."
      },
      {
        "sha": "0eccbacb96a585ffb7406c16c62696bf17281320",
        "filename": "contrib/debian/copyright",
        "status": "modified",
        "additions": 4,
        "deletions": 15,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/contrib/debian/copyright",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/contrib/debian/copyright",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/copyright?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -26,21 +26,14 @@ License: GNU-All-permissive-License\n Files: src/qt/res/icons/add.png\n        src/qt/res/icons/address-book.png\n        src/qt/res/icons/chevron.png\n-       src/qt/res/icons/configure.png\n-       src/qt/res/icons/debugwindow.png\n        src/qt/res/icons/edit.png\n        src/qt/res/icons/editcopy.png\n        src/qt/res/icons/editpaste.png\n        src/qt/res/icons/export.png\n        src/qt/res/icons/eye.png\n-       src/qt/res/icons/filesave.png\n        src/qt/res/icons/history.png\n-       src/qt/res/icons/info.png\n-       src/qt/res/icons/key.png\n        src/qt/res/icons/lock_*.png\n-       src/qt/res/icons/open.png\n        src/qt/res/icons/overview.png\n-       src/qt/res/icons/quit.png\n        src/qt/res/icons/receive.png\n        src/qt/res/icons/remove.png\n        src/qt/res/icons/send.png\n@@ -60,7 +53,7 @@ Files: src/qt/res/icons/connect*.png\n Copyright: Marco Falke\n            Luke Dashjr\n License: Expat\n-Comment: Inspired by Stephan Hutchings Typicons\n+Comment: Inspired by Stephen Hutchings' Typicons\n \n Files: src/qt/res/icons/tx_mined.png\n        src/qt/res/src/mine.svg\n@@ -72,21 +65,17 @@ Files: src/qt/res/icons/tx_mined.png\n        src/qt/res/src/hd_enabled.svg\n Copyright: Jonas Schnelli\n License: Expat\n-Comment:\n \n Files: src/qt/res/icons/clock*.png\n        src/qt/res/icons/eye_*.png\n        src/qt/res/icons/tx_in*.png\n-       src/qt/res/icons/verify.png\n        src/qt/res/src/clock_*.svg\n        src/qt/res/src/tx_*.svg\n-       src/qt/res/src/verify.svg\n-Copyright: Stephan Hutching, Jonas Schnelli\n+Copyright: Stephen Hutchings, Jonas Schnelli\n License: Expat\n-Comment: Modifications of Stephan Hutchings Typicons\n+Comment: Modifications of Stephen Hutchings' Typicons\n \n-Files: src/qt/res/icons/about.png\n-       src/qt/res/icons/bitcoin.*\n+Files: src/qt/res/icons/bitcoin.*\n        share/pixmaps/bitcoin*\n        src/qt/res/src/bitcoin.svg\n Copyright: Bitboy, Jonas Schnelli"
      },
      {
        "sha": "3d1024c7a513c05d1930a4779f5318b1cae49515",
        "filename": "contrib/devtools/README.md",
        "status": "modified",
        "additions": 0,
        "deletions": 60,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/contrib/devtools/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/contrib/devtools/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/README.md?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -89,66 +89,6 @@ example:\n BUILDDIR=$PWD/build contrib/devtools/gen-manpages.sh\n ```\n \n-github-merge.py\n-===============\n-\n-A small script to automate merging pull-requests securely and sign them with GPG.\n-\n-For example:\n-\n-  ./github-merge.py 3077\n-\n-(in any git repository) will help you merge pull request #3077 for the\n-bitcoin/bitcoin repository.\n-\n-What it does:\n-* Fetch master and the pull request.\n-* Locally construct a merge commit.\n-* Show the diff that merge results in.\n-* Ask you to verify the resulting source tree (so you can do a make\n-check or whatever).\n-* Ask you whether to GPG sign the merge commit.\n-* Ask you whether to push the result upstream.\n-\n-This means that there are no potential race conditions (where a\n-pullreq gets updated while you're reviewing it, but before you click\n-merge), and when using GPG signatures, that even a compromised GitHub\n-couldn't mess with the sources.\n-\n-Setup\n----------\n-Configuring the github-merge tool for the bitcoin repository is done in the following way:\n-\n-    git config githubmerge.repository bitcoin/bitcoin\n-    git config githubmerge.testcmd \"make -j4 check\" (adapt to whatever you want to use for testing)\n-    git config --global user.signingkey mykeyid\n-\n-Authentication (optional)\n---------------------------\n-\n-The API request limit for unauthenticated requests is quite low, but the\n-limit for authenticated requests is much higher. If you start running\n-into rate limiting errors it can be useful to set an authentication token\n-so that the script can authenticate requests.\n-\n-- First, go to [Personal access tokens](https://github.com/settings/tokens).\n-- Click 'Generate new token'.\n-- Fill in an arbitrary token description. No further privileges are needed.\n-- Click the `Generate token` button at the bottom of the form.\n-- Copy the generated token (should be a hexadecimal string)\n-\n-Then do:\n-\n-    git config --global user.ghtoken \"pasted token\"\n-\n-Create and verify timestamps of merge commits\n----------------------------------------------\n-To create or verify timestamps on the merge commits, install the OpenTimestamps\n-client via `pip3 install opentimestamps-client`. Then, download the gpg wrapper\n-`ots-git-gpg-wrapper.sh` and set it as git's `gpg.program`. See\n-[the ots git integration documentation](https://github.com/opentimestamps/opentimestamps-client/blob/master/doc/git-integration.md#usage)\n-for further details.\n-\n optimize-pngs.py\n ================\n "
      },
      {
        "sha": "fc01e570aa89ec8781b5d3a6eb0d329235379444",
        "filename": "contrib/devtools/copyright_header.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/contrib/devtools/copyright_header.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/contrib/devtools/copyright_header.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/copyright_header.py?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -34,7 +34,7 @@\n     \"src/univalue/\",\n ]\n \n-INCLUDE = ['*.h', '*.cpp', '*.cc', '*.c', '*.py']\n+INCLUDE = ['*.h', '*.cpp', '*.cc', '*.c', '*.mm', '*.py']\n INCLUDE_COMPILED = re.compile('|'.join([fnmatch.translate(m) for m in INCLUDE]))\n \n def applies_to_file(filename):\n@@ -90,14 +90,12 @@ def compile_copyright_regex(copyright_style, year_style, name):\n EXPECTED_HOLDER_NAMES = [\n     \"Satoshi Nakamoto\\n\",\n     \"The Bitcoin Core developers\\n\",\n-    \"Bitcoin Core Developers\\n\",\n     \"BitPay Inc\\.\\n\",\n     \"University of Illinois at Urbana-Champaign\\.\\n\",\n     \"Pieter Wuille\\n\",\n     \"Wladimir J. van der Laan\\n\",\n     \"Jeff Garzik\\n\",\n     \"Jan-Klaas Kollhof\\n\",\n-    \"Sam Rushing\\n\",\n     \"ArtForz -- public domain half-a-node\\n\",\n     \"Intel Corporation\",\n     \"The Zcash developers\","
      },
      {
        "sha": "dbdb6228775994a327dcb4dc5aed533831365bed",
        "filename": "contrib/devtools/gen-manpages.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/contrib/devtools/gen-manpages.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/contrib/devtools/gen-manpages.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/gen-manpages.sh?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -16,7 +16,7 @@ BITCOINQT=${BITCOINQT:-$BINDIR/qt/bitcoin-qt}\n [ ! -x $BITCOIND ] && echo \"$BITCOIND not found or not executable.\" && exit 1\n \n # The autodetected version git tag can screw up manpage output a little bit\n-BTCVER=($($BITCOINCLI --version | head -n1 | awk -F'[ -]' '{ print $6, $7 }'))\n+read -r -a BTCVER <<< \"$($BITCOINCLI --version | head -n1 | awk -F'[ -]' '{ print $6, $7 }')\"\n \n # Create a footer file with copyright content.\n # This gets autodetected fine for bitcoind if --version-string is not set,"
      },
      {
        "sha": "cd7a271e830c28662824cd29490be3475d2cfde8",
        "filename": "contrib/devtools/github-merge.py",
        "status": "removed",
        "additions": 0,
        "deletions": 414,
        "changes": 414,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/contrib/devtools/github-merge.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/contrib/devtools/github-merge.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/github-merge.py?ref=3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa",
        "patch": "@@ -1,414 +0,0 @@\n-#!/usr/bin/env python3\n-# Copyright (c) 2016-2017 Bitcoin Core Developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-# This script will locally construct a merge commit for a pull request on a\n-# github repository, inspect it, sign it and optionally push it.\n-\n-# The following temporary branches are created/overwritten and deleted:\n-# * pull/$PULL/base (the current master we're merging onto)\n-# * pull/$PULL/head (the current state of the remote pull request)\n-# * pull/$PULL/merge (github's merge)\n-# * pull/$PULL/local-merge (our merge)\n-\n-# In case of a clean merge that is accepted by the user, the local branch with\n-# name $BRANCH is overwritten with the merged result, and optionally pushed.\n-import os\n-from sys import stdin,stdout,stderr\n-import argparse\n-import hashlib\n-import subprocess\n-import sys\n-import json\n-import codecs\n-from urllib.request import Request, urlopen\n-from urllib.error import HTTPError\n-\n-# External tools (can be overridden using environment)\n-GIT = os.getenv('GIT','git')\n-BASH = os.getenv('BASH','bash')\n-\n-# OS specific configuration for terminal attributes\n-ATTR_RESET = ''\n-ATTR_PR = ''\n-ATTR_NAME = ''\n-ATTR_WARN = ''\n-COMMIT_FORMAT = '%H %s (%an)%d'\n-if os.name == 'posix': # if posix, assume we can use basic terminal escapes\n-    ATTR_RESET = '\\033[0m'\n-    ATTR_PR = '\\033[1;36m'\n-    ATTR_NAME = '\\033[0;36m'\n-    ATTR_WARN = '\\033[1;31m'\n-    COMMIT_FORMAT = '%C(bold blue)%H%Creset %s %C(cyan)(%an)%Creset%C(green)%d%Creset'\n-\n-def git_config_get(option, default=None):\n-    '''\n-    Get named configuration option from git repository.\n-    '''\n-    try:\n-        return subprocess.check_output([GIT,'config','--get',option]).rstrip().decode('utf-8')\n-    except subprocess.CalledProcessError:\n-        return default\n-\n-def get_response(req_url, ghtoken):\n-    req = Request(req_url)\n-    if ghtoken is not None:\n-        req.add_header('Authorization', 'token ' + ghtoken)\n-    return urlopen(req)\n-\n-def retrieve_json(req_url, ghtoken, use_pagination=False):\n-    '''\n-    Retrieve json from github.\n-    Return None if an error happens.\n-    '''\n-    try:\n-        reader = codecs.getreader('utf-8')\n-        if not use_pagination:\n-            return json.load(reader(get_response(req_url, ghtoken)))\n-\n-        obj = []\n-        page_num = 1\n-        while True:\n-            req_url_page = '{}?page={}'.format(req_url, page_num)\n-            result = get_response(req_url_page, ghtoken)\n-            obj.extend(json.load(reader(result)))\n-\n-            link = result.headers.get('link', None)\n-            if link is not None:\n-                link_next = [l for l in link.split(',') if 'rel=\"next\"' in l]\n-                if len(link_next) > 0:\n-                    page_num = int(link_next[0][link_next[0].find(\"page=\")+5:link_next[0].find(\">\")])\n-                    continue\n-            break\n-        return obj\n-    except HTTPError as e:\n-        error_message = e.read()\n-        print('Warning: unable to retrieve pull information from github: %s' % e)\n-        print('Detailed error: %s' % error_message)\n-        return None\n-    except Exception as e:\n-        print('Warning: unable to retrieve pull information from github: %s' % e)\n-        return None\n-\n-def retrieve_pr_info(repo,pull,ghtoken):\n-    req_url = \"https://api.github.com/repos/\"+repo+\"/pulls/\"+pull\n-    return retrieve_json(req_url,ghtoken)\n-\n-def retrieve_pr_comments(repo,pull,ghtoken):\n-    req_url = \"https://api.github.com/repos/\"+repo+\"/issues/\"+pull+\"/comments\"\n-    return retrieve_json(req_url,ghtoken,use_pagination=True)\n-\n-def retrieve_pr_reviews(repo,pull,ghtoken):\n-    req_url = \"https://api.github.com/repos/\"+repo+\"/pulls/\"+pull+\"/reviews\"\n-    return retrieve_json(req_url,ghtoken,use_pagination=True)\n-\n-def ask_prompt(text):\n-    print(text,end=\" \",file=stderr)\n-    stderr.flush()\n-    reply = stdin.readline().rstrip()\n-    print(\"\",file=stderr)\n-    return reply\n-\n-def get_symlink_files():\n-    files = sorted(subprocess.check_output([GIT, 'ls-tree', '--full-tree', '-r', 'HEAD']).splitlines())\n-    ret = []\n-    for f in files:\n-        if (int(f.decode('utf-8').split(\" \")[0], 8) & 0o170000) == 0o120000:\n-            ret.append(f.decode('utf-8').split(\"\\t\")[1])\n-    return ret\n-\n-def tree_sha512sum(commit='HEAD'):\n-    # request metadata for entire tree, recursively\n-    files = []\n-    blob_by_name = {}\n-    for line in subprocess.check_output([GIT, 'ls-tree', '--full-tree', '-r', commit]).splitlines():\n-        name_sep = line.index(b'\\t')\n-        metadata = line[:name_sep].split() # perms, 'blob', blobid\n-        assert(metadata[1] == b'blob')\n-        name = line[name_sep+1:]\n-        files.append(name)\n-        blob_by_name[name] = metadata[2]\n-\n-    files.sort()\n-    # open connection to git-cat-file in batch mode to request data for all blobs\n-    # this is much faster than launching it per file\n-    p = subprocess.Popen([GIT, 'cat-file', '--batch'], stdout=subprocess.PIPE, stdin=subprocess.PIPE)\n-    overall = hashlib.sha512()\n-    for f in files:\n-        blob = blob_by_name[f]\n-        # request blob\n-        p.stdin.write(blob + b'\\n')\n-        p.stdin.flush()\n-        # read header: blob, \"blob\", size\n-        reply = p.stdout.readline().split()\n-        assert(reply[0] == blob and reply[1] == b'blob')\n-        size = int(reply[2])\n-        # hash the blob data\n-        intern = hashlib.sha512()\n-        ptr = 0\n-        while ptr < size:\n-            bs = min(65536, size - ptr)\n-            piece = p.stdout.read(bs)\n-            if len(piece) == bs:\n-                intern.update(piece)\n-            else:\n-                raise IOError('Premature EOF reading git cat-file output')\n-            ptr += bs\n-        dig = intern.hexdigest()\n-        assert(p.stdout.read(1) == b'\\n') # ignore LF that follows blob data\n-        # update overall hash with file hash\n-        overall.update(dig.encode(\"utf-8\"))\n-        overall.update(\"  \".encode(\"utf-8\"))\n-        overall.update(f)\n-        overall.update(\"\\n\".encode(\"utf-8\"))\n-    p.stdin.close()\n-    if p.wait():\n-        raise IOError('Non-zero return value executing git cat-file')\n-    return overall.hexdigest()\n-\n-def get_acks_from_comments(head_commit, comments):\n-    # Look for abbreviated commit id, because not everyone wants to type/paste\n-    # the whole thing and the chance of collisions within a PR is small enough\n-    head_abbrev = head_commit[0:6]\n-    acks = []\n-    for c in comments:\n-        review = [l for l in c['body'].split('\\r\\n') if 'ACK' in l and head_abbrev in l]\n-        if review:\n-            acks.append((c['user']['login'], review[0]))\n-    return acks\n-\n-def make_acks_message(head_commit, acks):\n-    if acks:\n-        ack_str ='\\n\\nACKs for top commit:\\n'.format(head_commit)\n-        for name, msg in acks:\n-            ack_str += '  {}:\\n'.format(name)\n-            ack_str += '    {}\\n'.format(msg)\n-    else:\n-        ack_str ='\\n\\nTop commit has no ACKs.\\n'\n-    return ack_str\n-\n-def print_merge_details(pull, title, branch, base_branch, head_branch, acks):\n-    print('%s#%s%s %s %sinto %s%s' % (ATTR_RESET+ATTR_PR,pull,ATTR_RESET,title,ATTR_RESET+ATTR_PR,branch,ATTR_RESET))\n-    subprocess.check_call([GIT,'log','--graph','--topo-order','--pretty=format:'+COMMIT_FORMAT,base_branch+'..'+head_branch])\n-    if acks is not None:\n-        if acks:\n-            print('{}ACKs:{}'.format(ATTR_PR, ATTR_RESET))\n-            for (name, message) in acks:\n-                print('* {} {}({}){}'.format(message, ATTR_NAME, name, ATTR_RESET))\n-        else:\n-            print('{}Top commit has no ACKs!{}'.format(ATTR_WARN, ATTR_RESET))\n-\n-def parse_arguments():\n-    epilog = '''\n-        In addition, you can set the following git configuration variables:\n-        githubmerge.repository (mandatory),\n-        user.signingkey (mandatory),\n-        user.ghtoken (default: none).\n-        githubmerge.host (default: git@github.com),\n-        githubmerge.branch (no default),\n-        githubmerge.testcmd (default: none).\n-    '''\n-    parser = argparse.ArgumentParser(description='Utility to merge, sign and push github pull requests',\n-            epilog=epilog)\n-    parser.add_argument('pull', metavar='PULL', type=int, nargs=1,\n-        help='Pull request ID to merge')\n-    parser.add_argument('branch', metavar='BRANCH', type=str, nargs='?',\n-        default=None, help='Branch to merge against (default: githubmerge.branch setting, or base branch for pull, or \\'master\\')')\n-    return parser.parse_args()\n-\n-def main():\n-    # Extract settings from git repo\n-    repo = git_config_get('githubmerge.repository')\n-    host = git_config_get('githubmerge.host','git@github.com')\n-    opt_branch = git_config_get('githubmerge.branch',None)\n-    testcmd = git_config_get('githubmerge.testcmd')\n-    ghtoken = git_config_get('user.ghtoken')\n-    signingkey = git_config_get('user.signingkey')\n-    if repo is None:\n-        print(\"ERROR: No repository configured. Use this command to set:\", file=stderr)\n-        print(\"git config githubmerge.repository <owner>/<repo>\", file=stderr)\n-        sys.exit(1)\n-    if signingkey is None:\n-        print(\"ERROR: No GPG signing key set. Set one using:\",file=stderr)\n-        print(\"git config --global user.signingkey <key>\",file=stderr)\n-        sys.exit(1)\n-\n-    if host.startswith(('https:','http:')):\n-        host_repo = host+\"/\"+repo+\".git\"\n-    else:\n-        host_repo = host+\":\"+repo\n-\n-    # Extract settings from command line\n-    args = parse_arguments()\n-    pull = str(args.pull[0])\n-\n-    # Receive pull information from github\n-    info = retrieve_pr_info(repo,pull,ghtoken)\n-    if info is None:\n-        sys.exit(1)\n-    title = info['title'].strip()\n-    body = info['body'].strip()\n-    # precedence order for destination branch argument:\n-    #   - command line argument\n-    #   - githubmerge.branch setting\n-    #   - base branch for pull (as retrieved from github)\n-    #   - 'master'\n-    branch = args.branch or opt_branch or info['base']['ref'] or 'master'\n-\n-    # Initialize source branches\n-    head_branch = 'pull/'+pull+'/head'\n-    base_branch = 'pull/'+pull+'/base'\n-    merge_branch = 'pull/'+pull+'/merge'\n-    local_merge_branch = 'pull/'+pull+'/local-merge'\n-\n-    devnull = open(os.devnull, 'w', encoding=\"utf8\")\n-    try:\n-        subprocess.check_call([GIT,'checkout','-q',branch])\n-    except subprocess.CalledProcessError:\n-        print(\"ERROR: Cannot check out branch %s.\" % (branch), file=stderr)\n-        sys.exit(3)\n-    try:\n-        subprocess.check_call([GIT,'fetch','-q',host_repo,'+refs/pull/'+pull+'/*:refs/heads/pull/'+pull+'/*',\n-                                                          '+refs/heads/'+branch+':refs/heads/'+base_branch])\n-    except subprocess.CalledProcessError:\n-        print(\"ERROR: Cannot find pull request #%s or branch %s on %s.\" % (pull,branch,host_repo), file=stderr)\n-        sys.exit(3)\n-    try:\n-        subprocess.check_call([GIT,'log','-q','-1','refs/heads/'+head_branch], stdout=devnull, stderr=stdout)\n-        head_commit = subprocess.check_output([GIT,'log','-1','--pretty=format:%H',head_branch]).decode('utf-8')\n-        assert len(head_commit) == 40\n-    except subprocess.CalledProcessError:\n-        print(\"ERROR: Cannot find head of pull request #%s on %s.\" % (pull,host_repo), file=stderr)\n-        sys.exit(3)\n-    try:\n-        subprocess.check_call([GIT,'log','-q','-1','refs/heads/'+merge_branch], stdout=devnull, stderr=stdout)\n-    except subprocess.CalledProcessError:\n-        print(\"ERROR: Cannot find merge of pull request #%s on %s.\" % (pull,host_repo), file=stderr)\n-        sys.exit(3)\n-    subprocess.check_call([GIT,'checkout','-q',base_branch])\n-    subprocess.call([GIT,'branch','-q','-D',local_merge_branch], stderr=devnull)\n-    subprocess.check_call([GIT,'checkout','-q','-b',local_merge_branch])\n-\n-    try:\n-        # Go up to the repository's root.\n-        toplevel = subprocess.check_output([GIT,'rev-parse','--show-toplevel']).strip()\n-        os.chdir(toplevel)\n-        # Create unsigned merge commit.\n-        if title:\n-            firstline = 'Merge #%s: %s' % (pull,title)\n-        else:\n-            firstline = 'Merge #%s' % (pull,)\n-        message = firstline + '\\n\\n'\n-        message += subprocess.check_output([GIT,'log','--no-merges','--topo-order','--pretty=format:%H %s (%an)',base_branch+'..'+head_branch]).decode('utf-8')\n-        message += '\\n\\nPull request description:\\n\\n  ' + body.replace('\\n', '\\n  ') + '\\n'\n-        try:\n-            subprocess.check_call([GIT,'merge','-q','--commit','--no-edit','--no-ff','--no-gpg-sign','-m',message.encode('utf-8'),head_branch])\n-        except subprocess.CalledProcessError:\n-            print(\"ERROR: Cannot be merged cleanly.\",file=stderr)\n-            subprocess.check_call([GIT,'merge','--abort'])\n-            sys.exit(4)\n-        logmsg = subprocess.check_output([GIT,'log','--pretty=format:%s','-n','1']).decode('utf-8')\n-        if logmsg.rstrip() != firstline.rstrip():\n-            print(\"ERROR: Creating merge failed (already merged?).\",file=stderr)\n-            sys.exit(4)\n-\n-        symlink_files = get_symlink_files()\n-        for f in symlink_files:\n-            print(\"ERROR: File %s was a symlink\" % f)\n-        if len(symlink_files) > 0:\n-            sys.exit(4)\n-\n-        # Compute SHA512 of git tree (to be able to detect changes before sign-off)\n-        try:\n-            first_sha512 = tree_sha512sum()\n-        except subprocess.CalledProcessError:\n-            print(\"ERROR: Unable to compute tree hash\")\n-            sys.exit(4)\n-\n-        print_merge_details(pull, title, branch, base_branch, head_branch, None)\n-        print()\n-\n-        # Run test command if configured.\n-        if testcmd:\n-            if subprocess.call(testcmd,shell=True):\n-                print(\"ERROR: Running %s failed.\" % testcmd,file=stderr)\n-                sys.exit(5)\n-\n-            # Show the created merge.\n-            diff = subprocess.check_output([GIT,'diff',merge_branch+'..'+local_merge_branch])\n-            subprocess.check_call([GIT,'diff',base_branch+'..'+local_merge_branch])\n-            if diff:\n-                print(\"WARNING: merge differs from github!\",file=stderr)\n-                reply = ask_prompt(\"Type 'ignore' to continue.\")\n-                if reply.lower() == 'ignore':\n-                    print(\"Difference with github ignored.\",file=stderr)\n-                else:\n-                    sys.exit(6)\n-        else:\n-            # Verify the result manually.\n-            print(\"Dropping you on a shell so you can try building/testing the merged source.\",file=stderr)\n-            print(\"Run 'git diff HEAD~' to show the changes being merged.\",file=stderr)\n-            print(\"Type 'exit' when done.\",file=stderr)\n-            if os.path.isfile('/etc/debian_version'): # Show pull number on Debian default prompt\n-                os.putenv('debian_chroot',pull)\n-            subprocess.call([BASH,'-i'])\n-\n-        second_sha512 = tree_sha512sum()\n-        if first_sha512 != second_sha512:\n-            print(\"ERROR: Tree hash changed unexpectedly\",file=stderr)\n-            sys.exit(8)\n-\n-        # Retrieve PR comments and ACKs and add to commit message, store ACKs to print them with commit\n-        # description\n-        comments = retrieve_pr_comments(repo,pull,ghtoken) + retrieve_pr_reviews(repo,pull,ghtoken)\n-        if comments is None:\n-            print(\"ERROR: Could not fetch PR comments and reviews\",file=stderr)\n-            sys.exit(1)\n-        acks = get_acks_from_comments(head_commit=head_commit, comments=comments)\n-        message += make_acks_message(head_commit=head_commit, acks=acks)\n-        # end message with SHA512 tree hash, then update message\n-        message += '\\n\\nTree-SHA512: ' + first_sha512\n-        try:\n-            subprocess.check_call([GIT,'commit','--amend','--no-gpg-sign','-m',message.encode('utf-8')])\n-        except subprocess.CalledProcessError:\n-            print(\"ERROR: Cannot update message.\", file=stderr)\n-            sys.exit(4)\n-\n-        # Sign the merge commit.\n-        print_merge_details(pull, title, branch, base_branch, head_branch, acks)\n-        while True:\n-            reply = ask_prompt(\"Type 's' to sign off on the above merge, or 'x' to reject and exit.\").lower()\n-            if reply == 's':\n-                try:\n-                    subprocess.check_call([GIT,'commit','-q','--gpg-sign','--amend','--no-edit'])\n-                    break\n-                except subprocess.CalledProcessError:\n-                    print(\"Error while signing, asking again.\",file=stderr)\n-            elif reply == 'x':\n-                print(\"Not signing off on merge, exiting.\",file=stderr)\n-                sys.exit(1)\n-\n-        # Put the result in branch.\n-        subprocess.check_call([GIT,'checkout','-q',branch])\n-        subprocess.check_call([GIT,'reset','-q','--hard',local_merge_branch])\n-    finally:\n-        # Clean up temporary branches.\n-        subprocess.call([GIT,'checkout','-q',branch])\n-        subprocess.call([GIT,'branch','-q','-D',head_branch],stderr=devnull)\n-        subprocess.call([GIT,'branch','-q','-D',base_branch],stderr=devnull)\n-        subprocess.call([GIT,'branch','-q','-D',merge_branch],stderr=devnull)\n-        subprocess.call([GIT,'branch','-q','-D',local_merge_branch],stderr=devnull)\n-\n-    # Push the result.\n-    while True:\n-        reply = ask_prompt(\"Type 'push' to push the result to %s, branch %s, or 'x' to exit without pushing.\" % (host_repo,branch)).lower()\n-        if reply == 'push':\n-            subprocess.check_call([GIT,'push',host_repo,'refs/heads/'+branch])\n-            break\n-        elif reply == 'x':\n-            sys.exit(1)\n-\n-if __name__ == '__main__':\n-    main()\n-"
      },
      {
        "sha": "dd35d862c9240c9352f8e8019392afec594f26ee",
        "filename": "contrib/devtools/symbol-check.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/contrib/devtools/symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/contrib/devtools/symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/symbol-check.py?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -67,8 +67,6 @@\n 'ld-linux-armhf.so.3', # 32-bit ARM dynamic linker\n 'ld-linux-riscv64-lp64d.so.1', # 64-bit RISC-V dynamic linker\n # bitcoin-qt only\n-'libX11-xcb.so.1', # part of X11\n-'libX11.so.6', # part of X11\n 'libxcb.so.1', # part of X11\n 'libfontconfig.so.1', # font support\n 'libfreetype.so.6', # font parsing"
      },
      {
        "sha": "9222a40b175e5866d2e41bc7e340b173d0c3399d",
        "filename": "contrib/gitian-keys/keys.txt",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/contrib/gitian-keys/keys.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/contrib/gitian-keys/keys.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/keys.txt?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -1,3 +1,4 @@\n+9D3CC86A72F8494342EA5FD10A41BDC3F4FAFF1C Aaron Clauson (sipsorcery)\n 617C90010B3BD370B0AC7D424BB42E31C79111B8 Akira Takizawa\n E944AE667CF960B1004BC32FCA662BE18B877A60 Andreas Schildbach\n 152812300785C96444D3334D17565732E08E5E41 Andrew Chow"
      },
      {
        "sha": "4dfa1729a599a1345c460a1ce6160c8c2828062d",
        "filename": "contrib/guix/README.md",
        "status": "added",
        "additions": 229,
        "deletions": 0,
        "changes": 229,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/contrib/guix/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/contrib/guix/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/README.md?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -0,0 +1,229 @@\n+# Bootstrappable Bitcoin Core Builds\n+\n+This directory contains the files necessary to perform bootstrappable Bitcoin\n+Core builds.\n+\n+[Bootstrappability][b17e] furthers our binary security guarantees by allowing us\n+to _audit and reproduce_ our toolchain instead of blindly _trusting_ binary\n+downloads.\n+\n+We achieve bootstrappability by using Guix as a functional package manager.\n+\n+## Requirements\n+\n+Conservatively, a x86_64 machine with:\n+\n+- 2 or more logical cores\n+- 4GB of free disk space on the partition that /gnu/store will reside in\n+- 24GB of free disk space on the partition that the Bitcoin Core git repository\n+  resides in\n+\n+> Note: these requirements are slightly less onerous than those of Gitian builds\n+\n+## Setup\n+\n+### Installing Guix\n+\n+If you're just testing this out, you can use the\n+[Dockerfile][fanquake/guix-docker] for convenience. It automatically speeds up\n+your builds by [using substitutes](#speeding-up-builds-with-substitute-servers).\n+If you don't want this behaviour, refer to the [next\n+section](#choosing-your-security-model).\n+\n+Otherwise, follow the [Guix installation guide][guix/bin-install].\n+\n+> Note: For those who like to keep their filesystems clean, Guix is designed to\n+> be very standalone and _will not_ conflict with your system's package\n+> manager/existing setup. It _only_ touches `/var/guix`, `/gnu`, and\n+> `~/.config/guix`.\n+\n+### Choosing your security model\n+\n+Guix allows us to achieve better binary security by using our CPU time to build\n+everything from scratch. However, it doesn't sacrifice user choice in pursuit of\n+this: users can decide whether or not to bootstrap and to use substitutes.\n+\n+After installation, you may want to consider [adding substitute\n+servers](#speeding-up-builds-with-substitute-servers) to speed up your build if\n+that fits your security model (say, if you're just testing that this works).\n+This is skippable if you're using the [Dockerfile][fanquake/guix-docker].\n+\n+If you prefer not to use any substitutes, make sure to set\n+`ADDITIONAL_GUIX_ENVIRONMENT_FLAGS` like the following snippet. The first build\n+will take a while, but the resulting packages will be cached for future builds.\n+\n+```sh\n+export ADDITIONAL_GUIX_ENVIRONMENT_FLAGS='--no-substitutes'\n+```\n+\n+Likewise, to perform a bootstrapped build (takes even longer):\n+\n+```sh\n+export ADDITIONAL_GUIX_ENVIRONMENT_FLAGS='--bootstrap --no-substitutes'\n+```\n+\n+### Using the right Guix\n+\n+Once Guix is installed, deploy our patched version into your current Guix\n+profile. The changes there are slowly being upstreamed.\n+\n+```sh\n+guix pull --url=https://github.com/dongcarl/guix.git \\\n+          --commit=82c77e52b8b46e0a3aad2cb12307c2e30547deec \\\n+          --max-jobs=4 # change accordingly\n+```\n+\n+Make sure that you are using your current profile. (You are prompted to do this\n+at the end of the `guix pull`)\n+\n+```bash\n+export PATH=\"${HOME}/.config/guix/current/bin${PATH:+:}$PATH\"\n+```\n+\n+> Note: There is ongoing work to eliminate this entire section using Guix\n+> [inferiors][guix/inferiors] and [channels][guix/channels].\n+\n+## Usage\n+\n+### As a Development Environment\n+\n+For a Bitcoin Core depends development environment, simply invoke\n+\n+```sh\n+guix environment --manifest=contrib/guix/manifest.scm\n+```\n+\n+And you'll land back in your shell with all the build dependencies required for\n+a `depends` build injected into your environment.\n+\n+### As a Tool for Deterministic Builds\n+\n+From the top of a clean Bitcoin Core repository:\n+\n+```sh\n+./contrib/guix/guix-build.sh\n+```\n+\n+After the build finishes successfully (check the status code please), compare\n+hashes:\n+\n+```sh\n+find output/ -type f -print0 | sort -z | xargs -r0 sha256sum\n+```\n+\n+#### Recognized environment variables\n+\n+* _**HOSTS**_\n+\n+  Override the space-separated list of platform triples for which to perform a\n+  bootstrappable build. _(defaults to \"i686-linux-gnu x86\\_64-linux-gnu\n+  arm-linux-gnueabihf aarch64-linux-gnu riscv64-linux-gnu\")_\n+\n+  > Windows and OS X platform triplet support are WIP.\n+\n+* _**SOURCES_PATH**_\n+\n+  Set the depends tree download cache for sources. This is passed through to the\n+  depends tree. Setting this to the same directory across multiple builds of the\n+  depends tree can eliminate unnecessary redownloading of package sources.\n+\n+* _**MAX_JOBS**_\n+\n+  Override the maximum number of jobs to run simultaneously, you might want to\n+  do so on a memory-limited machine. This may be passed to `make` as in `make\n+  --jobs=\"$MAX_JOBS\"` or `xargs` as in `xargs -P\"$MAX_JOBS\"`. _(defaults to the\n+  value of `nproc` outside the container)_\n+\n+* _**SOURCE_DATE_EPOCH**_\n+\n+  Override the reference UNIX timestamp used for bit-for-bit reproducibility,\n+  the variable name conforms to [standard][r12e/source-date-epoch]. _(defaults\n+  to the output of `$(git log --format=%at -1)`)_\n+\n+* _**V**_\n+\n+  If non-empty, will pass `V=1` to all `make` invocations, making `make` output\n+  verbose.\n+\n+* _**ADDITIONAL_GUIX_ENVIRONMENT_FLAGS**_\n+\n+  Additional flags to be passed to `guix environment`. For a fully-bootstrapped\n+  build, set this to `--bootstrap --no-substitutes` (refer to the [security\n+  model section](#choosing-your-security-model) for more details). Note that a\n+  fully-bootstrapped build will take quite a long time on the first run.\n+\n+## Tips and Tricks\n+\n+### Speeding up builds with substitute servers\n+\n+_This whole section is automatically done in the convenience\n+[Dockerfiles][fanquake/guix-docker]_\n+\n+For those who are used to life in the fast _(and trustful)_ lane, you can use\n+[substitute servers][guix/substitutes] to enable binary downloads of packages.\n+\n+> For those who only want to use substitutes from the official Guix build farm\n+> and have authorized the build farm's signing key during Guix's installation,\n+> you don't need to do anything.\n+\n+#### Authorize the signing keys\n+\n+For the official Guix build farm at https://ci.guix.gnu.org, run as root:\n+\n+```\n+guix archive --authorize < ~root/.config/guix/current/share/guix/ci.guix.gnu.org.pub\n+```\n+\n+For dongcarl's substitute server at https://guix.carldong.io, run as root:\n+\n+```sh\n+wget -qO- 'https://guix.carldong.io/signing-key.pub' | guix archive --authorize\n+```\n+\n+#### Use the substitute servers\n+\n+The official Guix build farm at https://ci.guix.gnu.org is automatically used\n+unless the `--no-substitutes` flag is supplied.\n+\n+This can be overridden for all `guix` invocations by passing the\n+`--substitute-urls` option to your invocation of `guix-daemon`. This can also be\n+overridden on a call-by-call basis by passing the same `--substitute-urls`\n+option to client tools such at `guix environment`.\n+\n+To use dongcarl's substitute server for Bitcoin Core builds after having\n+[authorized his signing key](#authorize-the-signing-keys):\n+\n+```\n+export ADDITIONAL_GUIX_ENVIRONMENT_FLAGS='--substitute-urls=\"https://guix.carldong.io https://ci.guix.gnu.org\"'\n+```\n+\n+## FAQ\n+\n+### How can I trust the binary installation?\n+\n+As mentioned at the bottom of [this manual page][guix/bin-install]:\n+\n+> The binary installation tarballs can be (re)produced and verified simply by\n+> running the following command in the Guix source tree:\n+>\n+>     make guix-binary.x86_64-linux.tar.xz\n+\n+### When will Guix be packaged in debian?\n+\n+Vagrant Cascadian has been making good progress on this\n+[here][debian/guix-package]. We have all the pieces needed to put up an APT\n+repository and will likely put one up soon.\n+\n+[b17e]: http://bootstrappable.org/\n+[r12e/source-date-epoch]: https://reproducible-builds.org/docs/source-date-epoch/\n+\n+[guix/install.sh]: https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh\n+[guix/bin-install]: https://www.gnu.org/software/guix/manual/en/html_node/Binary-Installation.html\n+[guix/env-setup]: https://www.gnu.org/software/guix/manual/en/html_node/Build-Environment-Setup.html\n+[guix/substitutes]: https://www.gnu.org/software/guix/manual/en/html_node/Substitutes.html\n+[guix/substitute-server-auth]: https://www.gnu.org/software/guix/manual/en/html_node/Substitute-Server-Authorization.html\n+[guix/inferiors]: https://www.gnu.org/software/guix/manual/en/html_node/Inferiors.html\n+[guix/channels]: https://www.gnu.org/software/guix/manual/en/html_node/Channels.html\n+\n+[debian/guix-package]: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=850644\n+[fanquake/guix-docker]: https://github.com/fanquake/core-review/tree/master/guix"
      },
      {
        "sha": "f8ba8c7ed2ad46277deb1b8d25ad0b2cf2f506a0",
        "filename": "contrib/guix/guix-build.sh",
        "status": "added",
        "additions": 39,
        "deletions": 0,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/contrib/guix/guix-build.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/contrib/guix/guix-build.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/guix-build.sh?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -0,0 +1,39 @@\n+#!/usr/bin/env bash\n+export LC_ALL=C\n+set -e -o pipefail\n+\n+# Determine the maximum number of jobs to run simultaneously (overridable by\n+# environment)\n+MAX_JOBS=\"${MAX_JOBS:-$(nproc)}\"\n+\n+# Download the depends sources now as we won't have internet access in the build\n+# container\n+make -C \"${PWD}/depends\" -j\"$MAX_JOBS\" download ${V:+V=1} ${SOURCES_PATH:+SOURCES_PATH=\"$SOURCES_PATH\"}\n+\n+# Determine the reference time used for determinism (overridable by environment)\n+SOURCE_DATE_EPOCH=\"${SOURCE_DATE_EPOCH:-$(git log --format=%at -1)}\"\n+\n+# Deterministically build Bitcoin Core for HOSTs (overriable by environment)\n+for host in ${HOSTS=i686-linux-gnu x86_64-linux-gnu arm-linux-gnueabihf aarch64-linux-gnu riscv64-linux-gnu}; do\n+\n+    # Display proper warning when the user interrupts the build\n+    trap 'echo \"** INT received while building ${host}, you may want to clean up the relevant output and distsrc-* directories before rebuilding\"' INT\n+\n+    # Run the build script 'contrib/guix/libexec/build.sh' in the build\n+    # container specified by 'contrib/guix/manifest.scm'\n+    # shellcheck disable=SC2086\n+    guix environment --manifest=\"${PWD}/contrib/guix/manifest.scm\" \\\n+                     --container \\\n+                     --pure \\\n+                     --no-cwd \\\n+                     --share=\"$PWD\"=/bitcoin \\\n+                     ${SOURCES_PATH:+--share=\"$SOURCES_PATH\"} \\\n+                     ${ADDITIONAL_GUIX_ENVIRONMENT_FLAGS} \\\n+                     -- env HOST=\"$host\" \\\n+                            MAX_JOBS=\"$MAX_JOBS\" \\\n+                            SOURCE_DATE_EPOCH=\"${SOURCE_DATE_EPOCH:?unable to determine value}\" \\\n+                            ${V:+V=1} \\\n+                            ${SOURCES_PATH:+SOURCES_PATH=\"$SOURCES_PATH\"} \\\n+                          bash -c \"cd /bitcoin && bash contrib/guix/libexec/build.sh\"\n+\n+done"
      },
      {
        "sha": "56b972a5cbbb8a14a65f624339bd51085d311814",
        "filename": "contrib/guix/libexec/build.sh",
        "status": "added",
        "additions": 206,
        "deletions": 0,
        "changes": 206,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/contrib/guix/libexec/build.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/contrib/guix/libexec/build.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/libexec/build.sh?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -0,0 +1,206 @@\n+#!/usr/bin/env bash\n+export LC_ALL=C\n+set -e -o pipefail\n+\n+# Check that environment variables assumed to be set by the environment are set\n+echo \"Building for platform triple ${HOST:?not set} with reference timestamp ${SOURCE_DATE_EPOCH:?not set}...\"\n+echo \"At most ${MAX_JOBS:?not set} jobs will run at once...\"\n+\n+#####################\n+# Environment Setup #\n+#####################\n+\n+# The depends folder also serves as a base-prefix for depends packages for\n+# $HOSTs after successfully building.\n+BASEPREFIX=\"${PWD}/depends\"\n+\n+# Setup an output directory for our build\n+OUTDIR=\"${OUTDIR:-${PWD}/output}\"\n+[ -e \"$OUTDIR\" ] || mkdir -p \"$OUTDIR\"\n+\n+# Setup the directory where our Bitcoin Core build for HOST will occur\n+DISTSRC=\"${DISTSRC:-${PWD}/distsrc-${HOST}}\"\n+if [ -e \"$DISTSRC\" ]; then\n+    echo \"DISTSRC directory '${DISTSRC}' exists, probably because of previous builds... Aborting...\"\n+    exit 1\n+else\n+    mkdir -p \"$DISTSRC\"\n+fi\n+\n+# Given a package name and an output name, return the path of that output in our\n+# current guix environment\n+store_path() {\n+    grep --extended-regexp \"/[^-]{32}-${1}-cross-${HOST}-[^-]+${2:+-${2}}\" \"${GUIX_ENVIRONMENT}/manifest\" \\\n+        | head --lines=1 \\\n+        | sed --expression='s|^[[:space:]]*\"||' \\\n+              --expression='s|\"[[:space:]]*$||'\n+}\n+\n+# Determine output paths to use in CROSS_* environment variables\n+CROSS_GLIBC=\"$(store_path glibc)\"\n+CROSS_GLIBC_STATIC=\"$(store_path glibc static)\"\n+CROSS_KERNEL=\"$(store_path linux-libre-headers)\"\n+CROSS_GCC=\"$(store_path gcc)\"\n+\n+# Set environment variables to point Guix's cross-toolchain to the right\n+# includes/libs for $HOST\n+export CROSS_C_INCLUDE_PATH=\"${CROSS_GCC}/include:${CROSS_GLIBC}/include:${CROSS_KERNEL}/include\"\n+export CROSS_CPLUS_INCLUDE_PATH=\"${CROSS_GCC}/include/c++:${CROSS_GLIBC}/include:${CROSS_KERNEL}/include\"\n+export CROSS_LIBRARY_PATH=\"${CROSS_GLIBC}/lib:${CROSS_GLIBC_STATIC}/lib:${CROSS_GCC}/lib:${CROSS_GCC}/${HOST}/lib:${CROSS_KERNEL}/lib\"\n+\n+# Disable Guix ld auto-rpath behavior\n+export GUIX_LD_WRAPPER_DISABLE_RPATH=yes\n+\n+# Make /usr/bin if it doesn't exist\n+[ -e /usr/bin ] || mkdir -p /usr/bin\n+\n+# Symlink file and env to a conventional path\n+[ -e /usr/bin/file ] || ln -s --no-dereference \"$(command -v file)\" /usr/bin/file\n+[ -e /usr/bin/env ]  || ln -s --no-dereference \"$(command -v env)\"  /usr/bin/env\n+\n+# Determine the correct value for -Wl,--dynamic-linker for the current $HOST\n+glibc_dynamic_linker=$(\n+    case \"$HOST\" in\n+        i686-linux-gnu)      echo /lib/ld-linux.so.2 ;;\n+        x86_64-linux-gnu)    echo /lib64/ld-linux-x86-64.so.2 ;;\n+        arm-linux-gnueabihf) echo /lib/ld-linux-armhf.so.3 ;;\n+        aarch64-linux-gnu)   echo /lib/ld-linux-aarch64.so.1 ;;\n+        riscv64-linux-gnu)   echo /lib/ld-linux-riscv64-lp64d.so.1 ;;\n+        *)                   exit 1 ;;\n+    esac\n+)\n+\n+# Environment variables for determinism\n+export QT_RCC_TEST=1\n+export QT_RCC_SOURCE_DATE_OVERRIDE=1\n+export TAR_OPTIONS=\"--owner=0 --group=0 --numeric-owner --mtime='@${SOURCE_DATE_EPOCH}' --sort=name\"\n+export TZ=\"UTC\"\n+\n+####################\n+# Depends Building #\n+####################\n+\n+# Build the depends tree, overriding variables that assume multilib gcc\n+make -C depends --jobs=\"$MAX_JOBS\" HOST=\"$HOST\" \\\n+                                   ${V:+V=1} \\\n+                                   ${SOURCES_PATH+SOURCES_PATH=\"$SOURCES_PATH\"} \\\n+                                   i686_linux_CC=i686-linux-gnu-gcc \\\n+                                   i686_linux_CXX=i686-linux-gnu-g++ \\\n+                                   i686_linux_AR=i686-linux-gnu-ar \\\n+                                   i686_linux_RANLIB=i686-linux-gnu-ranlib \\\n+                                   i686_linux_NM=i686-linux-gnu-nm \\\n+                                   i686_linux_STRIP=i686-linux-gnu-strip \\\n+                                   x86_64_linux_CC=x86_64-linux-gnu-gcc \\\n+                                   x86_64_linux_CXX=x86_64-linux-gnu-g++ \\\n+                                   x86_64_linux_AR=x86_64-linux-gnu-ar \\\n+                                   x86_64_linux_RANLIB=x86_64-linux-gnu-ranlib \\\n+                                   x86_64_linux_NM=x86_64-linux-gnu-nm \\\n+                                   x86_64_linux_STRIP=x86_64-linux-gnu-strip \\\n+                                   qt_config_opts_i686_linux='-platform linux-g++ -xplatform bitcoin-linux-g++'\n+\n+\n+###########################\n+# Source Tarball Building #\n+###########################\n+\n+# Create the source tarball and move it to \"${OUTDIR}/src\" if not already there\n+if [ -z \"$(find \"${OUTDIR}/src\" -name 'bitcoin-*.tar.gz')\" ]; then\n+    ./autogen.sh\n+    env CONFIG_SITE=\"${BASEPREFIX}/${HOST}/share/config.site\" ./configure --prefix=/\n+    make dist GZIP_ENV='-9n' ${V:+V=1}\n+    mkdir -p \"${OUTDIR}/src\"\n+    mv \"$(find \"${PWD}\" -name 'bitcoin-*.tar.gz')\" \"${OUTDIR}/src/\"\n+fi\n+\n+# Determine the full path to our source tarball\n+SOURCEDIST=\"$(find \"${OUTDIR}/src\" -name 'bitcoin-*.tar.gz')\"\n+# Determine our distribution name (e.g. bitcoin-0.18.0)\n+DISTNAME=\"$(basename \"$SOURCEDIST\" '.tar.gz')\"\n+\n+###########################\n+# Binary Tarball Building #\n+###########################\n+\n+# Create a spec file to normalize ssp linking behaviour\n+spec_file=\"$(mktemp)\"\n+cat << EOF > \"$spec_file\"\n+*link_ssp:\n+%{fstack-protector|fstack-protector-all|fstack-protector-strong|fstack-protector-explicit:}\n+EOF\n+\n+# Similar flags to Gitian\n+CONFIGFLAGS=\"--enable-glibc-back-compat --enable-reduce-exports --disable-bench --disable-gui-tests\"\n+HOST_CFLAGS=\"-O2 -g -specs=${spec_file} -ffile-prefix-map=${PWD}=.\"\n+HOST_CXXFLAGS=\"-O2 -g -specs=${spec_file} -ffile-prefix-map=${PWD}=.\"\n+HOST_LDFLAGS=\"-Wl,--as-needed -Wl,--dynamic-linker=$glibc_dynamic_linker -static-libstdc++\"\n+\n+# Make $HOST-specific native binaries from depends available in $PATH\n+export PATH=\"${BASEPREFIX}/${HOST}/native/bin:${PATH}\"\n+(\n+    cd \"$DISTSRC\"\n+\n+    # Extract the source tarball\n+    tar --strip-components=1 -xf \"${SOURCEDIST}\"\n+\n+    # Configure this DISTSRC for $HOST\n+    # shellcheck disable=SC2086\n+    env CONFIG_SITE=\"${BASEPREFIX}/${HOST}/share/config.site\" \\\n+        ./configure --prefix=/ \\\n+                    --disable-ccache \\\n+                    --disable-maintainer-mode \\\n+                    --disable-dependency-tracking \\\n+                    ${CONFIGFLAGS} \\\n+                    CFLAGS=\"${HOST_CFLAGS}\" \\\n+                    CXXFLAGS=\"${HOST_CXXFLAGS}\" \\\n+                    LDFLAGS=\"${HOST_LDFLAGS}\"\n+\n+    sed -i.old 's/-lstdc++ //g' config.status libtool src/univalue/config.status src/univalue/libtool\n+\n+    # Build Bitcoin Core\n+    make --jobs=\"$MAX_JOBS\" ${V:+V=1}\n+\n+    # Perform basic ELF security checks on a series of executables.\n+    make -C src --jobs=1 check-security ${V:+V=1}\n+    # Check that executables only contain allowed gcc, glibc and libstdc++\n+    # version symbols for Linux distro back-compatibility.\n+    make -C src --jobs=1 check-symbols  ${V:+V=1}\n+\n+    # Setup the directory where our Bitcoin Core build for HOST will be\n+    # installed. This directory will also later serve as the input for our\n+    # binary tarballs.\n+    INSTALLPATH=\"${PWD}/installed/${DISTNAME}\"\n+    mkdir -p \"${INSTALLPATH}\"\n+    # Install built Bitcoin Core to $INSTALLPATH\n+    make install DESTDIR=\"${INSTALLPATH}\" ${V:+V=1}\n+    (\n+        cd installed\n+\n+        # Prune libtool and object archives\n+        find . -name \"lib*.la\" -delete\n+        find . -name \"lib*.a\" -delete\n+\n+        # Prune pkg-config files\n+        rm -r \"${DISTNAME}/lib/pkgconfig\"\n+\n+        # Split binaries and libraries from their debug symbols\n+        {\n+            find \"${DISTNAME}/bin\" -type f -executable -print0\n+            find \"${DISTNAME}/lib\" -type f -print0\n+        } | xargs -0 -n1 -P\"$MAX_JOBS\" -I{} \"${DISTSRC}/contrib/devtools/split-debug.sh\" {} {} {}.dbg\n+\n+        cp \"${DISTSRC}/doc/README.md\" \"${DISTNAME}/\"\n+\n+        # Finally, deterministically produce {non-,}debug binary tarballs ready\n+        # for release\n+        find \"${DISTNAME}\" -not -name \"*.dbg\" -print0 \\\n+            | sort --zero-terminated \\\n+            | tar --create --no-recursion --mode='u+rw,go+r-w,a+X' --null --files-from=- \\\n+            | gzip -9n > \"${OUTDIR}/${DISTNAME}-${HOST}.tar.gz\" \\\n+            || ( rm -f \"${OUTDIR}/${DISTNAME}-${HOST}.tar.gz\" && exit 1 )\n+        find \"${DISTNAME}\" -name \"*.dbg\" -print0 \\\n+            | sort --zero-terminated \\\n+            | tar --create --no-recursion --mode='u+rw,go+r-w,a+X' --null --files-from=- \\\n+            | gzip -9n > \"${OUTDIR}/${DISTNAME}-${HOST}-debug.tar.gz\" \\\n+            || ( rm -f \"${OUTDIR}/${DISTNAME}-${HOST}-debug.tar.gz\" && exit 1 )\n+    )\n+)"
      },
      {
        "sha": "ca11d7a0f00a21217927398fb955b456169f3296",
        "filename": "contrib/guix/manifest.scm",
        "status": "added",
        "additions": 158,
        "deletions": 0,
        "changes": 158,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/contrib/guix/manifest.scm",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/contrib/guix/manifest.scm",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/manifest.scm?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -0,0 +1,158 @@\n+(use-modules (gnu)\n+             (gnu packages)\n+             (gnu packages autotools)\n+             (gnu packages base)\n+             (gnu packages bash)\n+             (gnu packages check)\n+             (gnu packages commencement)\n+             (gnu packages compression)\n+             (gnu packages cross-base)\n+             (gnu packages file)\n+             (gnu packages gawk)\n+             (gnu packages gcc)\n+             (gnu packages linux)\n+             (gnu packages perl)\n+             (gnu packages pkg-config)\n+             (gnu packages python)\n+             (gnu packages shells)\n+             (guix build-system trivial)\n+             (guix gexp)\n+             (guix packages)\n+             (guix profiles)\n+             (guix utils))\n+\n+(define (make-ssp-fixed-gcc xgcc)\n+  \"Given a XGCC package, return a modified package that uses the SSP function\n+from glibc instead of from libssp.so. Taken from:\n+http://www.linuxfromscratch.org/hlfs/view/development/chapter05/gcc-pass1.html\"\n+  (package\n+   (inherit xgcc)\n+   (arguments\n+    (substitute-keyword-arguments (package-arguments xgcc)\n+      ((#:make-flags flags)\n+       `(cons \"gcc_cv_libc_provides_ssp=yes\" ,flags))))))\n+\n+(define (make-gcc-rpath-link xgcc)\n+  \"Given a XGCC package, return a modified package that replace each instance of\n+-rpath in the default system spec that's inserted by Guix with -rpath-link\"\n+  (package\n+   (inherit xgcc)\n+   (arguments\n+    (substitute-keyword-arguments (package-arguments xgcc)\n+      ((#:phases phases)\n+       `(modify-phases ,phases\n+          (add-after 'pre-configure 'replace-rpath-with-rpath-link\n+            (lambda _\n+              (substitute* (cons \"gcc/config/rs6000/sysv4.h\"\n+                                 (find-files \"gcc/config\"\n+                                             \"^gnu-user.*\\\\.h$\"))\n+                ((\"-rpath=\") \"-rpath-link=\"))\n+              #t))))))))\n+\n+(define (make-cross-toolchain target\n+                              base-gcc-for-libc\n+                              base-kernel-headers\n+                              base-libc\n+                              base-gcc)\n+  \"Create a cross-compilation toolchain package for TARGET\"\n+  (let* ((xbinutils (cross-binutils target))\n+         ;; 1. Build a cross-compiling gcc without targeting any libc, derived\n+         ;; from BASE-GCC-FOR-LIBC\n+         (xgcc-sans-libc (cross-gcc target\n+                                    #:xgcc base-gcc-for-libc\n+                                    #:xbinutils xbinutils))\n+         ;; 2. Build cross-compiled kernel headers with XGCC-SANS-LIBC, derived\n+         ;; from BASE-KERNEL-HEADERS\n+         (xkernel (cross-kernel-headers target\n+                                        base-kernel-headers\n+                                        xgcc-sans-libc\n+                                        xbinutils))\n+         ;; 3. Build a cross-compiled libc with XGCC-SANS-LIBC and XKERNEL,\n+         ;; derived from BASE-LIBC\n+         (xlibc (cross-libc target\n+                            base-libc\n+                            xgcc-sans-libc\n+                            xbinutils\n+                            xkernel))\n+         ;; 4. Build a cross-compiling gcc targeting XLIBC, derived from\n+         ;; BASE-GCC\n+         (xgcc (cross-gcc target\n+                          #:xgcc base-gcc\n+                          #:xbinutils xbinutils\n+                          #:libc xlibc)))\n+    ;; Define a meta-package that propagates the resulting XBINUTILS, XLIBC, and\n+    ;; XGCC\n+    (package\n+      (name (string-append target \"-toolchain\"))\n+      (version (package-version xgcc))\n+      (source #f)\n+      (build-system trivial-build-system)\n+      (arguments '(#:builder (begin (mkdir %output) #t)))\n+      (propagated-inputs\n+       `((\"binutils\" ,xbinutils)\n+         (\"libc\" ,xlibc)\n+         (\"libc:static\" ,xlibc \"static\")\n+         (\"gcc\" ,xgcc)))\n+      (synopsis (string-append \"Complete GCC tool chain for \" target))\n+      (description (string-append \"This package provides a complete GCC tool\n+chain for \" target \" development.\"))\n+      (home-page (package-home-page xgcc))\n+      (license (package-license xgcc)))))\n+\n+(define* (make-bitcoin-cross-toolchain target\n+                                  #:key\n+                                  (base-gcc-for-libc gcc-5)\n+                                  (base-kernel-headers linux-libre-headers-4.19)\n+                                  (base-libc glibc-2.27)\n+                                  (base-gcc (make-gcc-rpath-link\n+                                             (make-ssp-fixed-gcc gcc-9))))\n+  \"Convienience wrapper around MAKE-CROSS-TOOLCHAIN with default values\n+desirable for building Bitcoin Core release binaries.\"\n+  (make-cross-toolchain target\n+                   base-gcc-for-libc\n+                   base-kernel-headers\n+                   base-libc\n+                   base-gcc))\n+\n+(packages->manifest\n+ (list ;; The Basics\n+       bash-minimal\n+       which\n+       coreutils\n+       util-linux\n+       ;; File(system) inspection\n+       file\n+       grep\n+       diffutils\n+       findutils\n+       ;; File transformation\n+       patch\n+       gawk\n+       sed\n+       ;; Compression and archiving\n+       tar\n+       bzip2\n+       gzip\n+       xz\n+       zlib\n+       ;; Build tools\n+       gnu-make\n+       libtool\n+       autoconf\n+       automake\n+       pkg-config\n+       ;; Scripting\n+       perl\n+       python-3.7\n+       ;; Native gcc 9 toolchain targeting glibc 2.27\n+       (make-gcc-toolchain gcc-9 glibc-2.27)\n+       ;; Cross gcc 9 toolchains targeting glibc 2.27\n+       (make-bitcoin-cross-toolchain \"i686-linux-gnu\")\n+       (make-bitcoin-cross-toolchain \"x86_64-linux-gnu\")\n+       (make-bitcoin-cross-toolchain \"aarch64-linux-gnu\")\n+       (make-bitcoin-cross-toolchain \"arm-linux-gnueabihf\")\n+       ;; The glibc 2.27 for riscv64 needs gcc 7 to successfully build (see:\n+       ;; https://www.gnu.org/software/gcc/gcc-7/changes.html#riscv). The final\n+       ;; toolchain is still a gcc 9 toolchain targeting glibc 2.27.\n+       (make-bitcoin-cross-toolchain \"riscv64-linux-gnu\"\n+                                     #:base-gcc-for-libc gcc-7)))"
      },
      {
        "sha": "4b848dda99ee78c784765299c2abe0747f928d6b",
        "filename": "contrib/install_db4.sh",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/contrib/install_db4.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/contrib/install_db4.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/install_db4.sh?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -14,7 +14,7 @@ if [ -z \"${1}\" ]; then\n fi\n \n expand_path() {\n-  echo \"$(cd \"${1}\" && pwd -P)\"\n+  cd \"${1}\" && pwd -P\n }\n \n BDB_PREFIX=\"$(expand_path ${1})/db4\"; shift;\n@@ -23,7 +23,7 @@ BDB_HASH='12edc0df75bf9abd7f82f821795bcee50f42cb2e5f76a6a281b85732798364ef'\n BDB_URL=\"https://download.oracle.com/berkeley-db/${BDB_VERSION}.tar.gz\"\n \n check_exists() {\n-  which \"$1\" >/dev/null 2>&1\n+  command -v \"$1\" >/dev/null\n }\n \n sha256_check() {\n@@ -95,7 +95,9 @@ make install\n echo\n echo \"db4 build complete.\"\n echo\n+# shellcheck disable=SC2016\n echo 'When compiling bitcoind, run `./configure` in the following way:'\n echo\n echo \"  export BDB_PREFIX='${BDB_PREFIX}'\"\n+# shellcheck disable=SC2016\n echo '  ./configure BDB_LIBS=\"-L${BDB_PREFIX}/lib -ldb_cxx-4.8\" BDB_CFLAGS=\"-I${BDB_PREFIX}/include\" ...'"
      },
      {
        "sha": "af2b11fa0db07ed83318133e92ce4655e8dac88f",
        "filename": "contrib/macdeploy/detached-sig-apply.sh",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/contrib/macdeploy/detached-sig-apply.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/contrib/macdeploy/detached-sig-apply.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/detached-sig-apply.sh?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -36,13 +36,13 @@ if [ -z \"${CODESIGN_ALLOCATE}\" ]; then\n fi\n \n find ${TEMPDIR} -name \"*.sign\" | while read i; do\n-  SIZE=`stat -c %s \"${i}\"`\n-  TARGET_FILE=\"`echo \"${i}\" | sed 's/\\.sign$//'`\"\n+  SIZE=$(stat -c %s \"${i}\")\n+  TARGET_FILE=\"$(echo \"${i}\" | sed 's/\\.sign$//')\"\n \n   echo \"Allocating space for the signature of size ${SIZE} in ${TARGET_FILE}\"\n   ${CODESIGN_ALLOCATE} -i \"${TARGET_FILE}\" -a ${ARCH} ${SIZE} -o \"${i}.tmp\"\n \n-  OFFSET=`${PAGESTUFF} \"${i}.tmp\" -p | tail -2 | grep offset | sed 's/[^0-9]*//g'`\n+  OFFSET=$(${PAGESTUFF} \"${i}.tmp\" -p | tail -2 | grep offset | sed 's/[^0-9]*//g')\n   if [ -z ${QUIET} ]; then\n     echo \"Attaching signature at offset ${OFFSET}\"\n   fi"
      },
      {
        "sha": "938bcd163869e592c1ff9169a26a9cf07ee4d5a5",
        "filename": "contrib/macdeploy/detached-sig-create.sh",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/contrib/macdeploy/detached-sig-create.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/contrib/macdeploy/detached-sig-create.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/detached-sig-create.sh?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -14,7 +14,7 @@ TEMPLIST=${TEMPDIR}/signatures.txt\n OUT=signature-osx.tar.gz\n OUTROOT=osx\n \n-if [ ! -n \"$1\" ]; then\n+if [ -z \"$1\" ]; then\n   echo \"usage: $0 <codesign args>\"\n   echo \"example: $0 -s MyIdentity\"\n   exit 1\n@@ -26,20 +26,20 @@ mkdir -p ${TEMPDIR}\n ${CODESIGN} -f --file-list ${TEMPLIST} \"$@\" \"${BUNDLE}\"\n \n grep -v CodeResources < \"${TEMPLIST}\" | while read i; do\n-  TARGETFILE=\"${BUNDLE}/`echo \"${i}\" | sed \"s|.*${BUNDLE}/||\"`\"\n-  SIZE=`pagestuff \"$i\" -p | tail -2 | grep size | sed 's/[^0-9]*//g'`\n-  OFFSET=`pagestuff \"$i\" -p | tail -2 | grep offset | sed 's/[^0-9]*//g'`\n+  TARGETFILE=\"${BUNDLE}/$(echo \"${i}\" | sed \"s|.*${BUNDLE}/||\")\"\n+  SIZE=$(pagestuff \"$i\" -p | tail -2 | grep size | sed 's/[^0-9]*//g')\n+  OFFSET=$(pagestuff \"$i\" -p | tail -2 | grep offset | sed 's/[^0-9]*//g')\n   SIGNFILE=\"${TEMPDIR}/${OUTROOT}/${TARGETFILE}.sign\"\n-  DIRNAME=\"`dirname \"${SIGNFILE}\"`\"\n+  DIRNAME=\"$(dirname \"${SIGNFILE}\")\"\n   mkdir -p \"${DIRNAME}\"\n   echo \"Adding detached signature for: ${TARGETFILE}. Size: ${SIZE}. Offset: ${OFFSET}\"\n   dd if=\"$i\" of=\"${SIGNFILE}\" bs=1 skip=${OFFSET} count=${SIZE} 2>/dev/null\n done\n \n grep CodeResources < \"${TEMPLIST}\" | while read i; do\n-  TARGETFILE=\"${BUNDLE}/`echo \"${i}\" | sed \"s|.*${BUNDLE}/||\"`\"\n+  TARGETFILE=\"${BUNDLE}/$(echo \"${i}\" | sed \"s|.*${BUNDLE}/||\")\"\n   RESOURCE=\"${TEMPDIR}/${OUTROOT}/${TARGETFILE}\"\n-  DIRNAME=\"`dirname \"${RESOURCE}\"`\"\n+  DIRNAME=\"$(dirname \"${RESOURCE}\")\"\n   mkdir -p \"${DIRNAME}\"\n   echo \"Adding resource for: \\\"${TARGETFILE}\\\"\"\n   cp \"${i}\" \"${RESOURCE}\""
      },
      {
        "sha": "ccb0f4f8958eef33b9f7138a00108222e3fa189d",
        "filename": "contrib/qos/tc.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/contrib/qos/tc.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/contrib/qos/tc.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/qos/tc.sh?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -33,7 +33,7 @@ tc class add dev ${IF} parent 1:1 classid 1:11 htb rate ${LIMIT} ceil ${LIMIT} p\n tc filter add dev ${IF} parent 1: protocol ip prio 1 handle 1 fw classid 1:10\n tc filter add dev ${IF} parent 1: protocol ip prio 2 handle 2 fw classid 1:11\n \n-if [ ! -z \"${LOCALNET_V6}\" ] ; then\n+if [ -n \"${LOCALNET_V6}\" ] ; then\n \t# v6 cannot have the same priority value as v4\n \ttc filter add dev ${IF} parent 1: protocol ipv6 prio 3 handle 1 fw classid 1:10\n \ttc filter add dev ${IF} parent 1: protocol ipv6 prio 4 handle 2 fw classid 1:11\n@@ -56,7 +56,7 @@ fi\n iptables -t mangle -A OUTPUT -p tcp -m tcp --dport 8333 ! -d ${LOCALNET_V4} -j MARK --set-mark 0x2\n iptables -t mangle -A OUTPUT -p tcp -m tcp --sport 8333 ! -d ${LOCALNET_V4} -j MARK --set-mark 0x2\n \n-if [ ! -z \"${LOCALNET_V6}\" ] ; then\n+if [ -n \"${LOCALNET_V6}\" ] ; then\n \tip6tables -t mangle -A OUTPUT -p tcp -m tcp --dport 8333 ! -d ${LOCALNET_V6} -j MARK --set-mark 0x4\n \tip6tables -t mangle -A OUTPUT -p tcp -m tcp --sport 8333 ! -d ${LOCALNET_V6} -j MARK --set-mark 0x4\n fi"
      },
      {
        "sha": "288e4ccacb8611e8bd5c7cec78ed10bb8ffe5930",
        "filename": "contrib/verify-commits/gpg.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/contrib/verify-commits/gpg.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/contrib/verify-commits/gpg.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/gpg.sh?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -21,7 +21,7 @@ else\n \t# they've created a collision for. Not the most likely attack, but preventing\n \t# it is pretty easy so we do so as a \"belt-and-suspenders\" measure.\n \tGPG_RES=\"\"\n-\tfor LINE in \"$(gpg --version)\"; do\n+\tfor LINE in $(gpg --version); do\n \t\tcase \"$LINE\" in\n \t\t\t\"gpg (GnuPG) 1.4.1\"*|\"gpg (GnuPG) 2.0.\"*)\n \t\t\t\techo \"Please upgrade to at least gpg 2.1.10 to check for weak signatures\" > /dev/stderr\n@@ -35,7 +35,7 @@ else\n \tdone\n \t[ \"$GPG_RES\" = \"\" ] && GPG_RES=\"$(printf '%s\\n' \"$INPUT\" | gpg --trust-model always --weak-digest sha1 \"$@\" 2>/dev/null)\"\n fi\n-for LINE in $(echo \"$GPG_RES\"); do\n+for LINE in $GPG_RES; do\n \tcase \"$LINE\" in\n \t\"[GNUPG:] VALIDSIG \"*)\n \t\twhile read KEY; do"
      },
      {
        "sha": "9ec8663fbae7bd1a7e9acb83668c009ddbc5ab81",
        "filename": "contrib/verify-commits/verify-commits.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/contrib/verify-commits/verify-commits.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/contrib/verify-commits/verify-commits.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/verify-commits.py?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -16,7 +16,7 @@\n def tree_sha512sum(commit='HEAD'):\n     \"\"\"Calculate the Tree-sha512 for the commit.\n \n-    This is copied from github-merge.py.\"\"\"\n+    This is copied from github-merge.py. See https://github.com/bitcoin-core/bitcoin-maintainer-tools.\"\"\"\n \n     # request metadata for entire tree, recursively\n     files = []"
      },
      {
        "sha": "4209fdb3644e558c029bacc9a02ad9823b120eb6",
        "filename": "contrib/verifybinaries/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/contrib/verifybinaries/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/contrib/verifybinaries/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/README.md?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -6,7 +6,7 @@ Make sure you obtain the proper release signing key and verify the fingerprint w\n \n ```sh\n $ gpg --fingerprint \"Bitcoin Core binary release signing key\"\n-pub   4096R/36C2E964 2015-06-24 [expires: 2017-02-13]\n+pub   4096R/36C2E964 2015-06-24 [expires: YYYY-MM-DD]\n       Key fingerprint = 01EA 5486 DE18 A882 D4C2  6845 90C8 019E 36C2 E964\n uid                  Wladimir J. van der Laan (Bitcoin Core binary release signing key) <laanwj@gmail.com>\n ```"
      },
      {
        "sha": "bfe74aa4fa57edead96528037d0e2d855fdb7150",
        "filename": "contrib/verifybinaries/verify.sh",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/contrib/verifybinaries/verify.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/contrib/verifybinaries/verify.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/verify.sh?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -13,7 +13,7 @@\n \n export LC_ALL=C\n function clean_up {\n-   for file in $*\n+   for file in \"$@\"\n    do\n       rm \"$file\" 2> /dev/null\n    done\n@@ -82,22 +82,20 @@ else\n    exit 2\n fi\n \n-#first we fetch the file containing the signature\n-WGETOUT=$(wget -N \"$HOST1$BASEDIR$SIGNATUREFILENAME\" 2>&1)\n-\n-#and then see if wget completed successfully\n-if [ $? -ne 0 ]; then\n+if ! WGETOUT=$(wget -N \"$HOST1$BASEDIR$SIGNATUREFILENAME\" 2>&1); then\n    echo \"Error: couldn't fetch signature file. Have you specified the version number in the following format?\"\n+   # shellcheck disable=SC1087\n    echo \"[$VERSIONPREFIX]<version>-[$RCVERSIONSTRING[0-9]] (example: ${VERSIONPREFIX}0.10.4-${RCVERSIONSTRING}1)\"\n    echo \"wget output:\"\n+   # shellcheck disable=SC2001\n    echo \"$WGETOUT\"|sed 's/^/\\t/g'\n    exit 2\n fi\n \n-WGETOUT=$(wget -N -O \"$SIGNATUREFILENAME.2\" \"$HOST2$BASEDIR$SIGNATUREFILENAME\" 2>&1)\n-if [ $? -ne 0 ]; then\n+if ! WGETOUT=$(wget -N -O \"$SIGNATUREFILENAME.2\" \"$HOST2$BASEDIR$SIGNATUREFILENAME\" 2>&1); then\n    echo \"bitcoin.org failed to provide signature file, but bitcoincore.org did?\"\n    echo \"wget output:\"\n+   # shellcheck disable=SC2001\n    echo \"$WGETOUT\"|sed 's/^/\\t/g'\n    clean_up $SIGNATUREFILENAME\n    exit 3\n@@ -128,6 +126,7 @@ if [ $RET -ne 0 ]; then\n    fi\n \n    echo \"gpg output:\"\n+   # shellcheck disable=SC2001\n    echo \"$GPGOUT\"|sed 's/^/\\t/g'\n    clean_up $SIGNATUREFILENAME $SIGNATUREFILENAME.2 $TMPFILE\n    exit \"$RET\""
      },
      {
        "sha": "cc42422b23f437b063d9b916996a882807defc34",
        "filename": "contrib/windeploy/detached-sig-create.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/contrib/windeploy/detached-sig-create.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/contrib/windeploy/detached-sig-create.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/windeploy/detached-sig-create.sh?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -8,7 +8,7 @@ if [ -z \"$OSSLSIGNCODE\" ]; then\n   OSSLSIGNCODE=osslsigncode\n fi\n \n-if [ ! -n \"$1\" ]; then\n+if [ -z \"$1\" ]; then\n   echo \"usage: $0 <osslcodesign args>\"\n   echo \"example: $0 -key codesign.key\"\n   exit 1\n@@ -23,7 +23,7 @@ TIMESERVER=http://timestamp.comodoca.com\n CERTFILE=\"win-codesign.cert\"\n \n mkdir -p \"${OUTSUBDIR}\"\n-basename -a `ls -1 \"${SRCDIR}\"/*-unsigned.exe` | while read UNSIGNED; do\n+basename -a $(ls -1 \"${SRCDIR}\"/*-unsigned.exe) | while read UNSIGNED; do\n   echo Signing \"${UNSIGNED}\"\n   \"${OSSLSIGNCODE}\" sign -certs \"${CERTFILE}\" -t \"${TIMESERVER}\" -in \"${SRCDIR}/${UNSIGNED}\" -out \"${WORKDIR}/${UNSIGNED}\" \"$@\"\n   \"${OSSLSIGNCODE}\" extract-signature -pem -in \"${WORKDIR}/${UNSIGNED}\" -out \"${OUTSUBDIR}/${UNSIGNED}.pem\" && rm \"${WORKDIR}/${UNSIGNED}\""
      },
      {
        "sha": "ca542be13f28f0bf3ab14bf850c5228235143838",
        "filename": "depends/README.md",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/depends/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/depends/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/README.md?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -12,14 +12,18 @@ For example:\n \n     make HOST=x86_64-w64-mingw32 -j4\n \n-A prefix will be generated that's suitable for plugging into Bitcoin's\n-configure. In the above example, a dir named x86_64-w64-mingw32 will be\n+**Bitcoin's configure script by default will ignore the depends output.** In\n+order for it to pick up libraries, tools, and settings from the depends build,\n+you must point it at the appropriate `--prefix` directory generated by the\n+build. In the above example, a prefix dir named x86_64-w64-mingw32 will be\n created. To use it for Bitcoin:\n \n     ./configure --prefix=`pwd`/depends/x86_64-w64-mingw32\n \n Common `host-platform-triplets` for cross compilation are:\n \n+- `i686-pc-linux-gnu` for Linux 32 bit\n+- `x86_64-pc-linux-gnu` for x86 Linux\n - `x86_64-w64-mingw32` for Win64\n - `x86_64-apple-darwin14` for macOS\n - `arm-linux-gnueabihf` for Linux ARM 32 bit"
      },
      {
        "sha": "36c9967a0ac5c0c759fec348a3235de8ba20d6cf",
        "filename": "depends/packages.md",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/depends/packages.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/depends/packages.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages.md?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -181,3 +181,18 @@ For us, it's much easier to just link a static `libsecondary` into a shared\n static or dynamic `libseconday`, that's not our concern. With a static\n `libseconday`, when we need to link `libprimary` into our executable, there's no\n dependency chain to worry about as `libprimary` has all the symbols.\n+\n+## Build targets:\n+\n+To build an individual package (useful for debugging), following build targets are available.\n+\n+    make ${package}\n+    make ${package}_fetched\n+    make ${package}_extracted\n+    make ${package}_preprocessed\n+    make ${package}_configured\n+    make ${package}_built\n+    make ${package}_staged\n+    make ${package}_postprocessed\n+    make ${package}_cached\n+    make ${package}_cached_checksum"
      },
      {
        "sha": "ad10b0fdd7fb6f0b65297904675826f290994722",
        "filename": "depends/packages/dbus.mk",
        "status": "removed",
        "additions": 0,
        "deletions": 27,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/depends/packages/dbus.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/depends/packages/dbus.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/dbus.mk?ref=3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa",
        "patch": "@@ -1,27 +0,0 @@\n-package=dbus\n-$(package)_version=1.10.18\n-$(package)_download_path=https://dbus.freedesktop.org/releases/dbus\n-$(package)_file_name=$(package)-$($(package)_version).tar.gz\n-$(package)_sha256_hash=6049ddd5f3f3e2618f615f1faeda0a115104423a7996b7aa73e2f36e38cc514a\n-$(package)_dependencies=expat\n-\n-define $(package)_set_vars\n-  $(package)_config_opts=--disable-tests --disable-doxygen-docs --disable-xml-docs --disable-shared --without-x\n-endef\n-\n-define $(package)_config_cmds\n-  $($(package)_autoconf)\n-endef\n-\n-define $(package)_build_cmds\n-  $(MAKE) -C dbus libdbus-1.la\n-endef\n-\n-define $(package)_stage_cmds\n-  $(MAKE) -C dbus DESTDIR=$($(package)_staging_dir) install-libLTLIBRARIES install-dbusincludeHEADERS install-nodist_dbusarchincludeHEADERS && \\\n-  $(MAKE) DESTDIR=$($(package)_staging_dir) install-pkgconfigDATA\n-endef\n-\n-define $(package)_postprocess_cmds\n-  rm lib/*.la\n-endef"
      },
      {
        "sha": "4784381915049273bf7dfeb82db4c50d25ab8620",
        "filename": "depends/packages/expat.mk",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/depends/packages/expat.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/depends/packages/expat.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/expat.mk?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -1,11 +1,11 @@\n package=expat\n-$(package)_version=2.2.6\n-$(package)_download_path=https://github.com/libexpat/libexpat/releases/download/R_2_2_6/\n+$(package)_version=2.2.7\n+$(package)_download_path=https://github.com/libexpat/libexpat/releases/download/R_2_2_7/\n $(package)_file_name=$(package)-$($(package)_version).tar.bz2\n-$(package)_sha256_hash=17b43c2716d521369f82fc2dc70f359860e90fa440bea65b3b85f0b246ea81f2\n+$(package)_sha256_hash=cbc9102f4a31a8dafd42d642e9a3aa31e79a0aedaa1f6efd2795ebc83174ec18\n \n define $(package)_set_vars\n-  $(package)_config_opts=--disable-shared --without-docbook\n+  $(package)_config_opts=--disable-shared --without-docbook --without-tests --without-examples\n   $(package)_config_opts_linux=--with-pic\n endef\n "
      },
      {
        "sha": "ed21fbba3363dfe85483a574a1229cc658eb7950",
        "filename": "depends/packages/fontconfig.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/depends/packages/fontconfig.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/depends/packages/fontconfig.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/fontconfig.mk?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -6,7 +6,7 @@ $(package)_sha256_hash=b449a3e10c47e1d1c7a6ec6e2016cca73d3bd68fbbd4f0ae5cc6b573f\n $(package)_dependencies=freetype expat\n \n define $(package)_set_vars\n-  $(package)_config_opts=--disable-docs --disable-static\n+  $(package)_config_opts=--disable-docs --disable-static --disable-libxml2 --disable-iconv\n endef\n \n define $(package)_config_cmds"
      },
      {
        "sha": "f46bd9219e9b7c13335e2000577c55edd62a4935",
        "filename": "depends/packages/libX11.mk",
        "status": "removed",
        "additions": 0,
        "deletions": 32,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/depends/packages/libX11.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/depends/packages/libX11.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/libX11.mk?ref=3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa",
        "patch": "@@ -1,32 +0,0 @@\n-package=libX11\n-$(package)_version=1.6.2\n-$(package)_download_path=https://xorg.freedesktop.org/releases/individual/lib/\n-$(package)_file_name=$(package)-$($(package)_version).tar.bz2\n-$(package)_sha256_hash=2aa027e837231d2eeea90f3a4afe19948a6eb4c8b2bec0241eba7dbc8106bd16\n-$(package)_dependencies=libxcb xtrans xextproto xproto\n-\n-define $(package)_set_vars\n-  # See libXext for --disable-malloc0returnsnull rationale.\n-  $(package)_config_opts=--disable-xkb --disable-static --disable-malloc0returnsnull\n-  $(package)_config_opts_linux=--with-pic\n-endef\n-\n-define $(package)_preprocess_cmds\n-  cp -f $(BASEDIR)/config.guess $(BASEDIR)/config.sub .\n-endef\n-\n-define $(package)_config_cmds\n-  $($(package)_autoconf)\n-endef\n-\n-define $(package)_build_cmds\n-  $(MAKE)\n-endef\n-\n-define $(package)_stage_cmds\n-  $(MAKE) DESTDIR=$($(package)_staging_dir) install\n-endef\n-\n-define $(package)_postprocess_cmds\n-  rm lib/*.la\n-endef"
      },
      {
        "sha": "058416f79309e21715e4a0aa0ac0574803de3568",
        "filename": "depends/packages/libXau.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/depends/packages/libXau.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/depends/packages/libXau.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/libXau.mk?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -5,8 +5,10 @@ $(package)_file_name=$(package)-$($(package)_version).tar.bz2\n $(package)_sha256_hash=fdd477320aeb5cdd67272838722d6b7d544887dfe7de46e1e7cc0c27c2bea4f2\n $(package)_dependencies=xproto\n \n+# When updating this package, check the default value of\n+# --disable-xthreads. It is currently enabled.\n define $(package)_set_vars\n-  $(package)_config_opts=--disable-shared\n+  $(package)_config_opts=--disable-shared --disable-lint-library --without-lint\n   $(package)_config_opts_linux=--with-pic\n endef\n "
      },
      {
        "sha": "77f32a340ee295e2416e70f6f54cce84b9375dc5",
        "filename": "depends/packages/libXext.mk",
        "status": "removed",
        "additions": 0,
        "deletions": 53,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/depends/packages/libXext.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/depends/packages/libXext.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/libXext.mk?ref=3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa",
        "patch": "@@ -1,53 +0,0 @@\n-package=libXext\n-$(package)_version=1.3.3\n-$(package)_download_path=https://xorg.freedesktop.org/releases/individual/lib/\n-$(package)_file_name=$(package)-$($(package)_version).tar.bz2\n-$(package)_sha256_hash=b518d4d332231f313371fdefac59e3776f4f0823bcb23cf7c7305bfb57b16e35\n-$(package)_dependencies=xproto xextproto libX11 libXau\n-\n-define $(package)_set_vars\n-  # A number of steps in the autoconfig process implicitly assume that the build\n-  # system and the host system are the same. For example, library components\n-  # want to build and run test programs to determine the behavior of certain\n-  # host system elements. This is clearly impossible when crosscompiling. To\n-  # work around these issues, the --enable-malloc0returnsnull (or\n-  # --disable-malloc0returnsnull, depending on the host system) must be passed\n-  # to configure.\n-  #                                -- https://www.x.org/wiki/CrossCompilingXorg/\n-  #\n-  # Concretely, between the releases of libXext 1.3.2 and 1.3.3,\n-  # XORG_CHECK_MALLOC_ZERO from xorg-macros was changed to use the autoconf\n-  # cache, expecting cross-compilation environments to seed this cache as there\n-  # is no single correct value when cross compiling (think uclibc, musl, etc.).\n-  # You can see the actual change in commit 72fdc868b56fe2b7bdc9a69872651baeca72\n-  # in the freedesktop/xorg-macros repo.\n-  #\n-  # As a result of this change, if we don't seed the cache and we don't use\n-  # either --{en,dis}able-malloc0returnsnull, the AC_RUN_IFELSE block has no\n-  # optional action-if-cross-compiling argument and configure prints an error\n-  # message and exits as documented in the autoconf manual. Prior to this\n-  # commit, the AC_RUN_IFELSE block had an action-if-cross-compiling argument\n-  # which set the more pessimistic default value MALLOC_ZERO_RETURNS_NULL=yes.\n-  # This is why the flag was not required prior to libXext 1.3.3.\n-  $(package)_config_opts=--disable-static --disable-malloc0returnsnull\n-endef\n-\n-define $(package)_preprocess_cmds\n-  cp -f $(BASEDIR)/config.guess $(BASEDIR)/config.sub .\n-endef\n-\n-define $(package)_config_cmds\n-  $($(package)_autoconf)\n-endef\n-\n-define $(package)_build_cmds\n-  $(MAKE)\n-endef\n-\n-define $(package)_stage_cmds\n-  $(MAKE) DESTDIR=$($(package)_staging_dir) install\n-endef\n-\n-define $(package)_postprocess_cmds\n-  rm lib/*.la\n-endef"
      },
      {
        "sha": "49d3e3d15b0b3e05231df204f72f706b73bef2d9",
        "filename": "depends/packages/libxcb.mk",
        "status": "modified",
        "additions": 14,
        "deletions": 2,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/depends/packages/libxcb.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/depends/packages/libxcb.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/libxcb.mk?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -3,10 +3,22 @@ $(package)_version=1.10\n $(package)_download_path=https://xcb.freedesktop.org/dist\n $(package)_file_name=$(package)-$($(package)_version).tar.bz2\n $(package)_sha256_hash=98d9ab05b636dd088603b64229dd1ab2d2cc02ab807892e107d674f9c3f2d5b5\n-$(package)_dependencies=xcb_proto libXau xproto\n+$(package)_dependencies=xcb_proto libXau\n \n define $(package)_set_vars\n-$(package)_config_opts=--disable-static\n+$(package)_config_opts=--disable-static --disable-build-docs --without-doxygen --without-launchd\n+# Because we pass -qt-xcb to Qt, it will compile in a set of xcb helper libraries and extensions,\n+# so we skip building all of the extensions here.\n+# More info is available from: https://doc.qt.io/qt-5.9/linux-requirements.html\n+$(package)_config_opts += --disable-composite --disable-damage --disable-dpms\n+$(package)_config_opts += --disable-dri2 --disable-dri3 --disable-glx\n+$(package)_config_opts += --disable-present --disable-randr --disable-record\n+$(package)_config_opts += --disable-render --disable-resource --disable-screensaver\n+$(package)_config_opts += --disable-shape --disable-shm --disable-sync\n+$(package)_config_opts += --disable-xevie --disable-xfixes --disable-xfree86-dri\n+$(package)_config_opts += --disable-xinerama --disable-xinput --disable-xkb\n+$(package)_config_opts += --disable-xprint --disable-selinux --disable-xtest\n+$(package)_config_opts += --disable-xv --disable-xvmc\n endef\n \n define $(package)_preprocess_cmds"
      },
      {
        "sha": "9edcd1eb38e59b732a56938d6762c39d98de9eb9",
        "filename": "depends/packages/packages.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/depends/packages/packages.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/depends/packages/packages.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/packages.mk?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -3,7 +3,7 @@ packages:=boost openssl libevent\n qt_native_packages = native_protobuf\n qt_packages = qrencode protobuf zlib\n \n-qt_linux_packages:=qt expat dbus libxcb xcb_proto libXau xproto freetype fontconfig libX11 xextproto libXext xtrans\n+qt_linux_packages:=qt expat libxcb xcb_proto libXau xproto freetype fontconfig\n \n rapidcheck_packages = rapidcheck\n "
      },
      {
        "sha": "3bc2cb768cc02b8666584a6e21a1628b4ae35647",
        "filename": "depends/packages/qrencode.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/depends/packages/qrencode.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/depends/packages/qrencode.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qrencode.mk?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -5,7 +5,8 @@ $(package)_file_name=$(package)-$($(package)_version).tar.bz2\n $(package)_sha256_hash=efe5188b1ddbcbf98763b819b146be6a90481aac30cfc8d858ab78a19cde1fa5\n \n define $(package)_set_vars\n-$(package)_config_opts=--disable-shared -without-tools --disable-sdltest\n+$(package)_config_opts=--disable-shared --without-tools --without-tests --disable-sdltest\n+$(package)_config_opts += --disable-gprof --disable-gcov --disable-mudflap\n $(package)_config_opts_linux=--with-pic\n endef\n "
      },
      {
        "sha": "2610c1e7484cb04d74123f6a79e25ebb3c7e0b45",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 28,
        "deletions": 7,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -5,10 +5,10 @@ $(package)_suffix=opensource-src-$($(package)_version).tar.xz\n $(package)_file_name=qtbase-$($(package)_suffix)\n $(package)_sha256_hash=36dd9574f006eaa1e5af780e4b33d11fe39d09fd7c12f3b9d83294174bd28f00\n $(package)_dependencies=openssl zlib\n-$(package)_linux_dependencies=freetype fontconfig libxcb libX11 xproto libXext\n+$(package)_linux_dependencies=freetype fontconfig libxcb\n $(package)_build_subdir=qtbase\n $(package)_qt_libs=corelib network widgets gui plugins testlib\n-$(package)_patches=fix_qt_pkgconfig.patch mac-qmake.conf fix_configure_mac.patch fix_no_printer.patch fix_rcc_determinism.patch fix_riscv64_arch.patch xkb-default.patch\n+$(package)_patches=fix_qt_pkgconfig.patch mac-qmake.conf fix_configure_mac.patch fix_no_printer.patch fix_rcc_determinism.patch fix_riscv64_arch.patch xkb-default.patch no-xlib.patch\n \n $(package)_qttranslations_file_name=qttranslations-$($(package)_suffix)\n $(package)_qttranslations_sha256_hash=b36da7d93c3ab6fca56b32053bb73bc619c8b192bb89b74e3bcde2705f1c2a14\n@@ -35,9 +35,11 @@ $(package)_config_opts += -no-freetype\n $(package)_config_opts += -no-gif\n $(package)_config_opts += -no-glib\n $(package)_config_opts += -no-icu\n+$(package)_config_opts += -no-ico\n $(package)_config_opts += -no-iconv\n $(package)_config_opts += -no-kms\n $(package)_config_opts += -no-linuxfb\n+$(package)_config_opts += -no-libjpeg\n $(package)_config_opts += -no-libudev\n $(package)_config_opts += -no-mtdev\n $(package)_config_opts += -no-openvg\n@@ -63,26 +65,42 @@ $(package)_config_opts += -pch\n $(package)_config_opts += -pkg-config\n $(package)_config_opts += -prefix $(host_prefix)\n $(package)_config_opts += -qt-libpng\n-$(package)_config_opts += -qt-libjpeg\n $(package)_config_opts += -qt-pcre\n $(package)_config_opts += -qt-harfbuzz\n $(package)_config_opts += -system-zlib\n $(package)_config_opts += -static\n $(package)_config_opts += -silent\n $(package)_config_opts += -v\n+$(package)_config_opts += -no-feature-bearermanagement\n+$(package)_config_opts += -no-feature-colordialog\n+$(package)_config_opts += -no-feature-commandlineparser\n+$(package)_config_opts += -no-feature-concurrent\n $(package)_config_opts += -no-feature-dial\n+$(package)_config_opts += -no-feature-filesystemwatcher\n+$(package)_config_opts += -no-feature-fontcombobox\n $(package)_config_opts += -no-feature-ftp\n+$(package)_config_opts += -no-feature-image_heuristic_mask\n+$(package)_config_opts += -no-feature-keysequenceedit\n $(package)_config_opts += -no-feature-lcdnumber\n $(package)_config_opts += -no-feature-pdf\n-$(package)_config_opts += -no-feature-printer\n $(package)_config_opts += -no-feature-printdialog\n-$(package)_config_opts += -no-feature-concurrent\n+$(package)_config_opts += -no-feature-printer\n+$(package)_config_opts += -no-feature-printpreviewdialog\n+$(package)_config_opts += -no-feature-printpreviewwidget\n+$(package)_config_opts += -no-feature-regularexpression\n+$(package)_config_opts += -no-feature-sessionmanager\n $(package)_config_opts += -no-feature-sql\n $(package)_config_opts += -no-feature-statemachine\n $(package)_config_opts += -no-feature-syntaxhighlighter\n $(package)_config_opts += -no-feature-textbrowser\n $(package)_config_opts += -no-feature-textodfwriter\n+$(package)_config_opts += -no-feature-topleveldomain\n $(package)_config_opts += -no-feature-udpsocket\n+$(package)_config_opts += -no-feature-undocommand\n+$(package)_config_opts += -no-feature-undogroup\n+$(package)_config_opts += -no-feature-undostack\n+$(package)_config_opts += -no-feature-undoview\n+$(package)_config_opts += -no-feature-vnc\n $(package)_config_opts += -no-feature-wizard\n $(package)_config_opts += -no-feature-xml\n \n@@ -98,8 +116,9 @@ endif\n \n $(package)_config_opts_linux  = -qt-xkbcommon-x11\n $(package)_config_opts_linux += -qt-xcb\n+$(package)_config_opts_linux += -no-xcb-xlib\n+$(package)_config_opts_linux += -no-feature-xlib\n $(package)_config_opts_linux += -system-freetype\n-$(package)_config_opts_linux += -no-feature-sessionmanager\n $(package)_config_opts_linux += -fontconfig\n $(package)_config_opts_linux += -no-opengl\n $(package)_config_opts_arm_linux += -platform linux-g++ -xplatform bitcoin-linux-g++\n@@ -156,11 +175,13 @@ define $(package)_preprocess_cmds\n   echo \"!host_build: QMAKE_CXXFLAGS   += $($(package)_cxxflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n   echo \"!host_build: QMAKE_LFLAGS     += $($(package)_ldflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n   patch -p1 -i $($(package)_patch_dir)/fix_riscv64_arch.patch &&\\\n+  patch -p1 -i $($(package)_patch_dir)/no-xlib.patch &&\\\n   echo \"QMAKE_LINK_OBJECT_MAX = 10\" >> qtbase/mkspecs/win32-g++/qmake.conf &&\\\n   echo \"QMAKE_LINK_OBJECT_SCRIPT = object_script\" >> qtbase/mkspecs/win32-g++/qmake.conf &&\\\n   sed -i.old \"s|QMAKE_CFLAGS            = |!host_build: QMAKE_CFLAGS            = $($(package)_cflags) $($(package)_cppflags) |\" qtbase/mkspecs/win32-g++/qmake.conf && \\\n   sed -i.old \"s|QMAKE_LFLAGS            = |!host_build: QMAKE_LFLAGS            = $($(package)_ldflags) |\" qtbase/mkspecs/win32-g++/qmake.conf && \\\n-  sed -i.old \"s|QMAKE_CXXFLAGS          = |!host_build: QMAKE_CXXFLAGS            = $($(package)_cxxflags) $($(package)_cppflags) |\" qtbase/mkspecs/win32-g++/qmake.conf\n+  sed -i.old \"s|QMAKE_CXXFLAGS          = |!host_build: QMAKE_CXXFLAGS            = $($(package)_cxxflags) $($(package)_cppflags) |\" qtbase/mkspecs/win32-g++/qmake.conf && \\\n+  sed -i.old \"s/LIBRARY_PATH/(CROSS_)?\\0/g\" qtbase/mkspecs/features/toolchain.prf\n endef\n \n define $(package)_config_cmds"
      },
      {
        "sha": "a16fee270e87a56326a3091dbdea25cdbe334648",
        "filename": "depends/packages/rapidcheck.mk",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/depends/packages/rapidcheck.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/depends/packages/rapidcheck.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/rapidcheck.mk?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -1,11 +1,15 @@\n package=rapidcheck\n-$(package)_version=3eb9b4ff69f4ff2d9932e8f852c2b2a61d7c20d3\n+$(package)_version=d9482c683429fe79122e3dcab14c9655874aeb8e\n $(package)_download_path=https://github.com/emil-e/rapidcheck/archive\n $(package)_file_name=$($(package)_version).tar.gz\n-$(package)_sha256_hash=5fbf82755c9a647127e62563be079448ff8b1db9ca80a52a673dd9a88fdb714b\n+$(package)_sha256_hash=b9ee8955b175fd3c0757ebd887bb075541761af08b0c28391b7c6c0685351f6b\n \n define $(package)_config_cmds\n-  cmake -DCMAKE_INSTALL_PREFIX=$($(package)_staging_dir)$(host_prefix) -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=true -DRC_INSTALL_ALL_EXTRAS=ON\n+  cmake -DCMAKE_INSTALL_PREFIX=$($(package)_staging_dir)$(host_prefix) -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=true -DRC_ENABLE_BOOST_TEST=ON -B .\n+endef\n+\n+define $(package)_preprocess_cmds\n+  sed -i.old 's/ -Wall//' CMakeLists.txt\n endef\n \n define $(package)_build_cmds"
      },
      {
        "sha": "157b76edf6fcac69d241f8702783b072dce5cce8",
        "filename": "depends/packages/xextproto.mk",
        "status": "removed",
        "additions": 0,
        "deletions": 25,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/depends/packages/xextproto.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/depends/packages/xextproto.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/xextproto.mk?ref=3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa",
        "patch": "@@ -1,25 +0,0 @@\n-package=xextproto\n-$(package)_version=7.3.0\n-$(package)_download_path=https://xorg.freedesktop.org/releases/individual/proto\n-$(package)_file_name=$(package)-$($(package)_version).tar.bz2\n-$(package)_sha256_hash=f3f4b23ac8db9c3a9e0d8edb591713f3d70ef9c3b175970dd8823dfc92aa5bb0\n-\n-define $(package)_preprocess_cmds\n-  cp -f $(BASEDIR)/config.guess $(BASEDIR)/config.sub .\n-endef\n-\n-define $(package)_set_vars\n-$(package)_config_opts=--disable-shared\n-endef\n-\n-define $(package)_config_cmds\n-  $($(package)_autoconf)\n-endef\n-\n-define $(package)_build_cmds\n-  $(MAKE)\n-endef\n-\n-define $(package)_stage_cmds\n-  $(MAKE) DESTDIR=$($(package)_staging_dir) install\n-endef"
      },
      {
        "sha": "2462f3c647b4211aa42afc37fa2be4176d97dae7",
        "filename": "depends/packages/xproto.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/depends/packages/xproto.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/depends/packages/xproto.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/xproto.mk?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -5,7 +5,7 @@ $(package)_file_name=$(package)-$($(package)_version).tar.bz2\n $(package)_sha256_hash=636162c1759805a5a0114a369dffdeccb8af8c859ef6e1445f26a4e6e046514f\n \n define $(package)_set_vars\n-$(package)_config_opts=--disable-shared\n+$(package)_config_opts=--without-fop --without-xmlto --without-xsltproc --disable-specs\n endef\n \n define $(package)_preprocess_cmds"
      },
      {
        "sha": "6201d1d270764ff335bd5c1bb732fcaabeb7bea1",
        "filename": "depends/packages/xtrans.mk",
        "status": "removed",
        "additions": 0,
        "deletions": 26,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/depends/packages/xtrans.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/depends/packages/xtrans.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/xtrans.mk?ref=3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa",
        "patch": "@@ -1,26 +0,0 @@\n-package=xtrans\n-$(package)_version=1.3.4\n-$(package)_download_path=https://xorg.freedesktop.org/releases/individual/lib/\n-$(package)_file_name=$(package)-$($(package)_version).tar.bz2\n-$(package)_sha256_hash=054d4ee3efd52508c753e9f7bc655ef185a29bd2850dd9e2fc2ccc33544f583a\n-$(package)_dependencies=\n-\n-define $(package)_set_vars\n-  $(package)_config_opts_linux=--disable-docs --without-xmlto --without-fop --without-xsltproc\n-endef\n-\n-define $(package)_preprocess_cmds\n-  cp -f $(BASEDIR)/config.guess $(BASEDIR)/config.sub .\n-endef\n-\n-define $(package)_config_cmds\n-  $($(package)_autoconf)\n-endef\n-\n-define $(package)_build_cmds\n-  $(MAKE)\n-endef\n-\n-define $(package)_stage_cmds\n-  $(MAKE) DESTDIR=$($(package)_staging_dir) install\n-endef"
      },
      {
        "sha": "9ac037ebb5cd5e8e2616d307a9378ec94832c644",
        "filename": "depends/packages/zeromq.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/depends/packages/zeromq.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/depends/packages/zeromq.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/zeromq.mk?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -6,7 +6,9 @@ $(package)_sha256_hash=bcbabe1e2c7d0eec4ed612e10b94b112dd5f06fcefa994a0c79a45d83\n $(package)_patches=0001-fix-build-with-older-mingw64.patch 0002-disable-pthread_set_name_np.patch\n \n define $(package)_set_vars\n-  $(package)_config_opts=--without-docs --disable-shared --without-libsodium --disable-curve --disable-curve-keygen --disable-perf --disable-Werror\n+  $(package)_config_opts=--without-docs --disable-shared --disable-curve --disable-curve-keygen --disable-perf --disable-Werror --disable-drafts\n+  $(package)_config_opts += --without-libsodium --without-libgssapi_krb5 --without-pgm --without-norm --without-vmci\n+  $(package)_config_opts += --disable-libunwind --disable-radix-tree --without-gcov\n   $(package)_config_opts_linux=--with-pic\n   $(package)_cxxflags=-std=c++11\n endef"
      },
      {
        "sha": "fe82c2c73cb09611da2be6ccbe274d4191bc1ad8",
        "filename": "depends/patches/qt/no-xlib.patch",
        "status": "added",
        "additions": 69,
        "deletions": 0,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/depends/patches/qt/no-xlib.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/depends/patches/qt/no-xlib.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/no-xlib.patch?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -0,0 +1,69 @@\n+From 9563cef873ae82e06f60708d706d054717e801ce Mon Sep 17 00:00:00 2001\n+From: Carl Dong <contact@carldong.me>\n+Date: Thu, 18 Jul 2019 17:22:05 -0400\n+Subject: [PATCH] Wrap xlib related code blocks in #if's\n+\n+They are not necessary to compile QT.\n+---\n+ qtbase/src/plugins/platforms/xcb/qxcbcursor.cpp | 8 ++++++++\n+ 1 file changed, 8 insertions(+)\n+\n+diff --git a/qtbase/src/plugins/platforms/xcb/qxcbcursor.cpp b/qtbase/src/plugins/platforms/xcb/qxcbcursor.cpp\n+index 7c62c2e2b3..c05c6c0a07 100644\n+--- a/qtbase/src/plugins/platforms/xcb/qxcbcursor.cpp\n++++ b/qtbase/src/plugins/platforms/xcb/qxcbcursor.cpp\n+@@ -49,7 +49,9 @@\n+ #include <QtGui/QWindow>\n+ #include <QtGui/QBitmap>\n+ #include <QtGui/private/qguiapplication_p.h>\n++#if QT_CONFIG(xcb_xlib) && QT_CONFIG(library)\n+ #include <X11/cursorfont.h>\n++#endif\n+ #include <xcb/xfixes.h>\n+ #include <xcb/xcb_image.h>\n+ \n+@@ -384,6 +386,7 @@ void QXcbCursor::changeCursor(QCursor *cursor, QWindow *widget)\n+     w->setCursor(c, isBitmapCursor);\n+ }\n+ \n++#if QT_CONFIG(xcb_xlib) && QT_CONFIG(library)\n+ static int cursorIdForShape(int cshape)\n+ {\n+     int cursorId = 0;\n+@@ -437,6 +440,7 @@ static int cursorIdForShape(int cshape)\n+     }\n+     return cursorId;\n+ }\n++#endif\n+ \n+ xcb_cursor_t QXcbCursor::createNonStandardCursor(int cshape)\n+ {\n+@@ -558,7 +562,9 @@ static xcb_cursor_t loadCursor(void *dpy, int cshape)\n+ xcb_cursor_t QXcbCursor::createFontCursor(int cshape)\n+ {\n+     xcb_connection_t *conn = xcb_connection();\n++#if QT_CONFIG(xcb_xlib) && QT_CONFIG(library)\n+     int cursorId = cursorIdForShape(cshape);\n++#endif\n+     xcb_cursor_t cursor = XCB_NONE;\n+ \n+     // Try Xcursor first\n+@@ -589,6 +595,7 @@ xcb_cursor_t QXcbCursor::createFontCursor(int cshape)\n+     // Non-standard X11 cursors are created from bitmaps\n+     cursor = createNonStandardCursor(cshape);\n+ \n++#if QT_CONFIG(xcb_xlib) && QT_CONFIG(library)\n+     // Create a glpyh cursor if everything else failed\n+     if (!cursor && cursorId) {\n+         cursor = xcb_generate_id(conn);\n+@@ -596,6 +603,7 @@ xcb_cursor_t QXcbCursor::createFontCursor(int cshape)\n+                                 cursorId, cursorId + 1,\n+                                 0xFFFF, 0xFFFF, 0xFFFF, 0, 0, 0);\n+     }\n++#endif\n+ \n+     if (cursor && cshape >= 0 && cshape < Qt::LastCursor && connection()->hasXFixes()) {\n+         const char *name = cursorNames[cshape];\n+-- \n+2.22.0\n+"
      },
      {
        "sha": "399d54eb85d5130127ae0f801776592774f81f34",
        "filename": "doc/Doxyfile.in",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/doc/Doxyfile.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/doc/Doxyfile.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/Doxyfile.in?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -453,7 +453,7 @@ EXTRACT_PACKAGE        = NO\n # included in the documentation.\n # The default value is: NO.\n \n-EXTRACT_STATIC         = NO\n+EXTRACT_STATIC         = YES\n \n # If the EXTRACT_LOCAL_CLASSES tag is set to YES, classes (and structs) defined\n # locally in source files will be included in the documentation. If set to NO,"
      },
      {
        "sha": "d3017de2abafcc72fd8a9f90993909d54e554ada",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -74,6 +74,7 @@ The Bitcoin repo's [root README](/README.md) contains relevant information on th\n - [bitcoin.conf Configuration File](bitcoin-conf.md)\n - [Files](files.md)\n - [Fuzz-testing](fuzzing.md)\n+- [Reduce Memory](reduce-memory.md)\n - [Reduce Traffic](reduce-traffic.md)\n - [Tor Support](tor.md)\n - [Init Scripts (systemd/upstart/openrc)](init.md)"
      },
      {
        "sha": "8e3d88ab7ae0476a8bb709404650bce1fbf8d3d7",
        "filename": "doc/benchmarking.md",
        "status": "modified",
        "additions": 22,
        "deletions": 29,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/doc/benchmarking.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/doc/benchmarking.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/benchmarking.md?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -2,54 +2,47 @@ Benchmarking\n ============\n \n Bitcoin Core has an internal benchmarking framework, with benchmarks\n-for cryptographic algorithms (e.g. SHA1, SHA256, SHA512, RIPEMD160), as well as the rolling bloom filter.\n+for cryptographic algorithms (e.g. SHA1, SHA256, SHA512, RIPEMD160, Poly1305, ChaCha20), rolling bloom filter, coins selection,\n+thread queue, wallet balance.\n \n Running\n ---------------------\n+\n+For benchmarks purposes you only need to compile `bitcoin_bench`. Beware of configuring without `--enable-debug` as this would impact\n+benchmarking by unlatching log printers and lock analysis.\n+\n+    make -C src bench_bitcoin\n+\n After compiling bitcoin-core, the benchmarks can be run with:\n \n     src/bench/bench_bitcoin\n \n The output will look similar to:\n ```\n # Benchmark, evals, iterations, total, min, max, median\n-Base58CheckEncode, 5, 320000, 120.772, 7.49351e-05, 7.59374e-05, 7.54759e-05\n-Base58Decode, 5, 800000, 122.833, 3.0467e-05, 3.11732e-05, 3.06304e-05\n-Base58Encode, 5, 470000, 137.094, 5.81061e-05, 5.85109e-05, 5.84462e-05\n-BenchLockedPool, 5, 530, 34.2023, 0.0128247, 0.0129613, 0.0129026\n-CCheckQueueSpeedPrevectorJob, 5, 1400, 26.1762, 0.00365048, 0.00388629, 0.00367108\n-CCoinsCaching, 5, 170000, 48.1074, 5.60229e-05, 5.72316e-05, 5.66214e-05\n-CoinSelection, 5, 650, 34.6426, 0.0105801, 0.0107699, 0.010664\n-DeserializeAndCheckBlockTest, 5, 160, 39.2084, 0.0483662, 0.0494199, 0.0490138\n-DeserializeBlockTest, 5, 130, 23.8129, 0.0357731, 0.0373763, 0.0365858\n-FastRandom_1bit, 5, 440000000, 38.1609, 1.72974e-08, 1.73882e-08, 1.73478e-08\n-FastRandom_32bit, 5, 110000000, 72.8237, 1.29992e-07, 1.37014e-07, 1.30115e-07\n-MempoolEviction, 5, 41000, 89.8883, 0.000432748, 0.000446857, 0.000438483\n-PrevectorClear, 5, 5600, 47.9229, 0.00169952, 0.0017455, 0.00170315\n-PrevectorDestructor, 5, 5700, 44.5498, 0.0015561, 0.00156977, 0.00156469\n-RIPEMD160, 5, 440, 135.988, 0.0615496, 0.062268, 0.0617779\n-RollingBloom, 5, 1500000, 36.5109, 4.80961e-06, 4.97463e-06, 4.85811e-06\n-SHA1, 5, 570, 51.808, 0.018065, 0.0182623, 0.0181865\n-SHA256, 5, 340, 8.31841, 0.00483231, 0.00499803, 0.00485486\n-SHA256_32b, 5, 4700000, 10.469, 4.43441e-07, 4.47611e-07, 4.45223e-07\n-SHA512, 5, 330, 33.3408, 0.02017, 0.0202554, 0.0201921\n-SipHash_32b, 5, 40000000, 38.7088, 1.91103e-07, 1.96998e-07, 1.93792e-07\n-Sleep100ms, 5, 10, 5.01062, 0.100131, 0.100368, 0.100147\n-Trig, 5, 12000000, 5.95494, 9.78115e-08, 1.04354e-07, 9.80682e-08\n-VerifyScriptBench, 5, 6300, 9.02493, 0.000285566, 0.000288433, 0.000286175\n+AssembleBlock, 5, 700, 1.79954, 0.000510913, 0.000517018, 0.000514497\n+...\n ```\n \n Help\n ---------------------\n-`-?` will print a list of options and exit:\n \n-    src/bench/bench_bitcoin -?\n+    src/bench/bench_bitcoin --help\n+\n+To print options like scaling factor or per-benchmark filter.\n \n Notes\n ---------------------\n More benchmarks are needed for, in no particular order:\n - Script Validation\n-- CCoinDBView caching\n - Coins database\n - Memory pool\n-- Wallet coin selection\n+- Cuckoo Cache\n+- P2P throughput\n+\n+Going Further\n+--------------------\n+\n+To monitor Bitcoin Core performance more in depth (like reindex or IBD): https://github.com/chaincodelabs/bitcoinperf\n+\n+To generate Flame Graphs for Bitcoin Core: https://github.com/eklitzke/bitcoin/blob/flamegraphs/doc/flamegraphs.md"
      },
      {
        "sha": "3085fa424b035ec1bd83c89be05447bd974dcaf0",
        "filename": "doc/bips.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/doc/bips.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/doc/bips.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bips.md?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -12,8 +12,8 @@ BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.18.0**):\n * [`BIP 31`](https://github.com/bitcoin/bips/blob/master/bip-0031.mediawiki): The 'pong' protocol message (and the protocol version bump to 60001) has been implemented since **v0.6.1** ([PR #1081](https://github.com/bitcoin/bitcoin/pull/1081)).\n * [`BIP 32`](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki): Hierarchical Deterministic Wallets has been implemented since **v0.13.0** ([PR #8035](https://github.com/bitcoin/bitcoin/pull/8035)).\n * [`BIP 34`](https://github.com/bitcoin/bips/blob/master/bip-0034.mediawiki): The rule that requires blocks to contain their height (number) in the coinbase input, and the introduction of version 2 blocks has been implemented since **v0.7.0**. The rule took effect for version 2 blocks as of *block 224413* (March 5th 2013), and version 1 blocks are no longer allowed since *block 227931* (March 25th 2013) ([PR #1526](https://github.com/bitcoin/bitcoin/pull/1526)).\n-* [`BIP 35`](https://github.com/bitcoin/bips/blob/master/bip-0035.mediawiki): The 'mempool' protocol message (and the protocol version bump to 60002) has been implemented since **v0.7.0** ([PR #1641](https://github.com/bitcoin/bitcoin/pull/1641)).\n-* [`BIP 37`](https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki): The bloom filtering for transaction relaying, partial Merkle trees for blocks, and the protocol version bump to 70001 (enabling low-bandwidth SPV clients) has been implemented since **v0.8.0** ([PR #1795](https://github.com/bitcoin/bitcoin/pull/1795)).\n+* [`BIP 35`](https://github.com/bitcoin/bips/blob/master/bip-0035.mediawiki): The 'mempool' protocol message (and the protocol version bump to 60002) has been implemented since **v0.7.0** ([PR #1641](https://github.com/bitcoin/bitcoin/pull/1641)). As of **v0.13.0**, this is only available for `NODE_BLOOM` (BIP 111) peers.\n+* [`BIP 37`](https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki): The bloom filtering for transaction relaying, partial Merkle trees for blocks, and the protocol version bump to 70001 (enabling low-bandwidth SPV clients) has been implemented since **v0.8.0** ([PR #1795](https://github.com/bitcoin/bitcoin/pull/1795)). Disabled by default since **v0.19.0**, can be enabled by the `-peerbloomfilters` option.\n * [`BIP 42`](https://github.com/bitcoin/bips/blob/master/bip-0042.mediawiki): The bug that would have caused the subsidy schedule to resume after block 13440000 was fixed in **v0.9.2** ([PR #3842](https://github.com/bitcoin/bitcoin/pull/3842)).\n * [`BIP 61`](https://github.com/bitcoin/bips/blob/master/bip-0061.mediawiki): The 'reject' protocol message (and the protocol version bump to 70002) was added in **v0.9.0** ([PR #3185](https://github.com/bitcoin/bitcoin/pull/3185)). Starting **v0.17.0**, whether to send reject messages can be configured with the `-enablebip61` option, and support is deprecated as of **v0.18.0**.\n * [`BIP 65`](https://github.com/bitcoin/bips/blob/master/bip-0065.mediawiki): The CHECKLOCKTIMEVERIFY softfork was merged in **v0.12.0** ([PR #6351](https://github.com/bitcoin/bitcoin/pull/6351)), and backported to **v0.11.2** and **v0.10.4**. Mempool-only CLTV was added in [PR #6124](https://github.com/bitcoin/bitcoin/pull/6124)."
      },
      {
        "sha": "f8146b5d75928c6a5ac11aaecbda62701e35dc11",
        "filename": "doc/bitcoin-conf.md",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/doc/bitcoin-conf.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/doc/bitcoin-conf.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bitcoin-conf.md?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -30,6 +30,21 @@ Network specific options can be:\n - placed into sections with headers `[main]` (not `[mainnet]`), `[test]` (not `[testnet]`) or `[regtest]`;\n - prefixed with a chain name; e.g., `regtest.maxmempool=100`.\n \n+Network specific options take precedence over non-network specific options.\n+If multiple values for the same option are found with the same precedence, the\n+first one is generally chosen.\n+\n+This means that given the following configuration, `regtest.rpcport` is set to `3000`:\n+\n+```\n+regtest=1\n+rpcport=2000\n+regtest.rpcport=3000\n+\n+[regtest]\n+rpcport=4000\n+```\n+\n ## Configuration File Path\n \n The configuration file is not automatically created; you can create it using your favorite text editor. By default, the configuration file name is `bitcoin.conf` and it is located in the Bitcoin data directory, but both the Bitcoin data directory and the configuration file path may be changed using the `-datadir` and `-conf` command-line options."
      },
      {
        "sha": "65cfce6b155745e9c34ad3184d476f90b017187b",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 131,
        "deletions": 132,
        "changes": 263,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -1,33 +1,37 @@\n-macOS Build Instructions and Notes\n-====================================\n+# macOS Build Instructions and Notes\n+\n The commands in this guide should be executed in a Terminal application.\n-The built-in one is located in `/Applications/Utilities/Terminal.app`.\n+The built-in one is located in\n+```\n+/Applications/Utilities/Terminal.app\n+```\n \n-Preparation\n------------\n+## Preparation\n Install the macOS command line tools:\n \n-`xcode-select --install`\n+```shell\n+xcode-select --install\n+```\n \n When the popup appears, click `Install`.\n \n Then install [Homebrew](https://brew.sh).\n \n-Dependencies\n-----------------------\n-\n-    brew install automake berkeley-db4 libtool boost miniupnpc openssl pkg-config protobuf python qt libevent qrencode\n+## Dependencies\n+```shell\n+brew install automake berkeley-db4 libtool boost miniupnpc openssl pkg-config protobuf python qt libevent qrencode\n+```\n \n See [dependencies.md](dependencies.md) for a complete overview.\n \n If you want to build the disk image with `make deploy` (.dmg / optional), you need RSVG:\n+```shell\n+brew install librsvg\n+```\n \n-    brew install librsvg\n-\n-Berkeley DB\n------------\n+## Berkeley DB\n It is recommended to use Berkeley DB 4.8. If you have to build it yourself,\n-you can use [the installation script included in contrib/](/contrib/install_db4.sh)\n+you can use [this](/contrib/install_db4.sh) script to install it\n like so:\n \n ```shell\n@@ -38,172 +42,167 @@ from the root of the repository.\n \n **Note**: You only need Berkeley DB if the wallet is enabled (see [*Disable-wallet mode*](/doc/build-osx.md#disable-wallet-mode)).\n \n-Build Bitcoin Core\n-------------------------\n+## Build Bitcoin Core\n \n 1. Clone the Bitcoin Core source code:\n-\n-        git clone https://github.com/bitcoin/bitcoin\n-        cd bitcoin\n+    ```shell\n+    git clone https://github.com/bitcoin/bitcoin\n+    cd bitcoin\n+    ```\n \n 2.  Build Bitcoin Core:\n \n     Configure and build the headless Bitcoin Core binaries as well as the GUI (if Qt is found).\n \n     You can disable the GUI build by passing `--without-gui` to configure.\n-\n-        ./autogen.sh\n-        ./configure\n-        make\n+    ```shell\n+    ./autogen.sh\n+    ./configure\n+    make\n+    ```\n \n 3.  It is recommended to build and run the unit tests:\n-\n-        make check\n-\n-4.  You can also create a .dmg that contains the .app bundle (optional):\n-\n-        make deploy\n-\n-Disable-wallet mode\n---------------------\n-When the intention is to run only a P2P node without a wallet, Bitcoin Core may be compiled in\n-disable-wallet mode with:\n-\n-    ./configure --disable-wallet\n+    ```shell\n+    make check\n+    ```\n+\n+4.  You can also create a  `.dmg` that contains the `.app` bundle (optional):\n+    ```shell\n+    make deploy\n+    ```\n+\n+## `disable-wallet` mode\n+When the intention is to run only a P2P node without a wallet, Bitcoin Core may be\n+compiled in `disable-wallet` mode with:\n+```shell\n+./configure --disable-wallet\n+```\n \n In this case there is no dependency on Berkeley DB 4.8.\n \n Mining is also possible in disable-wallet mode using the `getblocktemplate` RPC call.\n \n-Running\n--------\n-\n+## Running\n Bitcoin Core is now available at `./src/bitcoind`\n \n Before running, you may create an empty configuration file:\n+```shell\n+mkdir -p \"/Users/${USER}/Library/Application Support/Bitcoin\"\n \n-    mkdir -p \"/Users/${USER}/Library/Application Support/Bitcoin\"\n-\n-    touch \"/Users/${USER}/Library/Application Support/Bitcoin/bitcoin.conf\"\n+touch \"/Users/${USER}/Library/Application Support/Bitcoin/bitcoin.conf\"\n \n-    chmod 600 \"/Users/${USER}/Library/Application Support/Bitcoin/bitcoin.conf\"\n+chmod 600 \"/Users/${USER}/Library/Application Support/Bitcoin/bitcoin.conf\"\n+```\n \n-The first time you run bitcoind, it will start downloading the blockchain. This process could take many hours, or even days on slower than average systems.\n+The first time you run bitcoind, it will start downloading the blockchain. This process could\n+take many hours, or even days on slower than average systems.\n \n You can monitor the download process by looking at the debug.log file:\n+```shell\n+tail -f $HOME/Library/Application\\ Support/Bitcoin/debug.log\n+```\n \n-    tail -f $HOME/Library/Application\\ Support/Bitcoin/debug.log\n-\n-Other commands:\n--------\n-\n-    ./src/bitcoind -daemon # Starts the bitcoin daemon.\n-    ./src/bitcoin-cli --help # Outputs a list of command-line options.\n-    ./src/bitcoin-cli help # Outputs a list of RPC commands when the daemon is running.\n-\n-Notes\n------\n-\n-* Tested on OS X 10.10 Yosemite through macOS 10.13 High Sierra on 64-bit Intel processors only.\n-\n-* Building with downloaded Qt binaries is not officially supported. See the notes in [#7714](https://github.com/bitcoin/bitcoin/issues/7714)\n+## Other commands:\n+```shell\n+./src/bitcoind -daemon      # Starts the bitcoin daemon.\n+./src/bitcoin-cli --help    # Outputs a list of command-line options.\n+./src/bitcoin-cli help      # Outputs a list of RPC commands when the daemon is running.\n+```\n \n-Deterministic macOS DMG Notes\n------------------------------\n+## Notes\n+* Tested on OS X 10.10 Yosemite through macOS 10.14 Mojave on 64-bit Intel\n+processors only.\n+* Building with downloaded Qt binaries is not officially supported. See the notes in [#7714](https://github.com/bitcoin/bitcoin/issues/7714).\n \n-Working macOS DMGs are created in Linux by combining a recent clang,\n-the Apple binutils (ld, ar, etc) and DMG authoring tools.\n+## Deterministic macOS DMG Notes\n+Working macOS DMGs are created in Linux by combining a recent `clang`, the Apple\n+`binutils` (`ld`, `ar`, etc) and DMG authoring tools.\n \n-Apple uses clang extensively for development and has upstreamed the necessary\n-functionality so that a vanilla clang can take advantage. It supports the use\n-of -F, -target, -mmacosx-version-min, and --sysroot, which are all necessary\n-when building for macOS.\n+Apple uses `clang` extensively for development and has upstreamed the necessary\n+functionality so that a vanilla clang can take advantage. It supports the use of `-F`,\n+`-target`, `-mmacosx-version-min`, and `--sysroot`, which are all necessary when\n+building for macOS.\n \n-Apple's version of binutils (called cctools) contains lots of functionality\n-missing in the FSF's binutils. In addition to extra linker options for\n-frameworks and sysroots, several other tools are needed as well such as\n-install_name_tool, lipo, and nmedit. These do not build under linux, so they\n-have been patched to do so. The work here was used as a starting point:\n-[mingwandroid/toolchain4](https://github.com/mingwandroid/toolchain4).\n+Apple's version of `binutils` (called `cctools`) contains lots of functionality missing in the\n+FSF's `binutils`. In addition to extra linker options for frameworks and sysroots, several\n+other tools are needed as well such as `install_name_tool`, `lipo`, and `nmedit`. These\n+do not build under Linux, so they have been patched to do so. The work here was used as\n+a starting point: [mingwandroid/toolchain4](https://github.com/mingwandroid/toolchain4).\n \n-In order to build a working toolchain, the following source packages are needed\n-from Apple: cctools, dyld, and ld64.\n+In order to build a working toolchain, the following source packages are needed from\n+Apple: `cctools`, `dyld`, and `ld64`.\n \n-These tools inject timestamps by default, which produce non-deterministic\n-binaries. The ZERO_AR_DATE environment variable is used to disable that.\n+These tools inject timestamps by default, which produce non-deterministic binaries. The\n+`ZERO_AR_DATE` environment variable is used to disable that.\n \n-This version of cctools has been patched to use the current version of clang's\n-headers and its libLTO.so rather than those from llvmgcc, as it was\n-originally done in toolchain4.\n+This version of `cctools` has been patched to use the current version of `clang`'s headers\n+and its `libLTO.so` rather than those from `llvmgcc`, as it was originally done in `toolchain4`.\n \n-To complicate things further, all builds must target an Apple SDK. These SDKs\n-are free to download, but not redistributable.\n-To obtain it, register for a developer account, then download the [Xcode 7.3.1 dmg](https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/Xcode_7.3.1/Xcode_7.3.1.dmg).\n+To complicate things further, all builds must target an Apple SDK. These SDKs are free to\n+download, but not redistributable. To obtain it, register for an Apple Developer Account,\n+then download the [Xcode 7.3.1 dmg](https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/Xcode_7.3.1/Xcode_7.3.1.dmg).\n \n-This file is several gigabytes in size, but only a single directory inside is\n-needed:\n+This file is several gigabytes in size, but only a single directory inside is needed:\n ```\n Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk\n ```\n \n-Unfortunately, the usual linux tools (7zip, hpmount, loopback mount) are incapable of opening this file.\n-To create a tarball suitable for Gitian input, there are two options:\n+Unfortunately, the usual Linux tools (7zip, hpmount, loopback mount) are incapable of\n+opening this file. To create a tarball suitable for Gitian input, there are two options:\n \n-Using macOS, you can mount the dmg, and then create it with:\n-```\n-  $ hdiutil attach Xcode_7.3.1.dmg\n-  $ tar -C /Volumes/Xcode/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/ -czf MacOSX10.11.sdk.tar.gz MacOSX10.11.sdk\n+Using macOS, you can mount the DMG, and then create it with:\n+```shell\n+hdiutil attach Xcode_7.3.1.dmg\n+tar -C /Volumes/Xcode/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/ -czf MacOSX10.11.sdk.tar.gz MacOSX10.11.sdk\n ```\n \n-Alternatively, you can use 7zip and SleuthKit to extract the files one by one.\n-The script contrib/macdeploy/extract-osx-sdk.sh automates this. First ensure\n-the dmg file is in the current directory, and then run the script. You may wish\n-to delete the intermediate 5.hfs file and MacOSX10.11.sdk (the directory) when\n-you've confirmed the extraction succeeded.\n+Alternatively, you can use 7zip and SleuthKit to extract the files one by one. The script\n+[`extract-osx-sdk.sh`](./../contrib/macdeploy/extract-osx-sdk.sh) automates this. First\n+ensure the DMG file is in the current directory, and then run the script. You may wish to\n+delete the `intermediate 5.hfs` file and `MacOSX10.11.sdk` (the directory) when you've\n+confirmed the extraction succeeded.\n \n-```bash\n+```shell\n apt-get install p7zip-full sleuthkit\n contrib/macdeploy/extract-osx-sdk.sh\n rm -rf 5.hfs MacOSX10.11.sdk\n ```\n \n-The Gitian descriptors build 2 sets of files: Linux tools, then Apple binaries\n-which are created using these tools. The build process has been designed to\n-avoid including the SDK's files in Gitian's outputs. All interim tarballs are\n-fully deterministic and may be freely redistributed.\n+The Gitian descriptors build 2 sets of files: Linux tools, then Apple binaries which are\n+created using these tools. The build process has been designed to avoid including the\n+SDK's files in Gitian's outputs. All interim tarballs are fully deterministic and may be freely\n+redistributed.\n \n-genisoimage is used to create the initial DMG. It is not deterministic as-is,\n-so it has been patched. A system genisoimage will work fine, but it will not\n-be deterministic because the file-order will change between invocations.\n-The patch can be seen here:  [theuni/osx-cross-depends](https://raw.githubusercontent.com/theuni/osx-cross-depends/master/patches/cdrtools/genisoimage.diff).\n-No effort was made to fix this cleanly, so it likely leaks memory badly. But\n-it's only used for a single invocation, so that's no real concern.\n+`genisoimage` is used to create the initial DMG. It is not deterministic as-is, so it has been\n+patched. A system `genisoimage` will work fine, but it will not be deterministic because\n+the file-order will change between invocations. The patch can be seen here:  [theuni/osx-cross-depends](https://raw.githubusercontent.com/theuni/osx-cross-depends/master/patches/cdrtools/genisoimage.diff).\n+No effort was made to fix this cleanly, so it likely leaks memory badly. But it's only used for\n+a single invocation, so that's no real concern.\n \n-genisoimage cannot compress DMGs, so afterwards, the 'dmg' tool from the\n-libdmg-hfsplus project is used to compress it. There are several bugs in this\n-tool and its maintainer has seemingly abandoned the project. It has been forked\n-and is available (with fixes) here: [theuni/libdmg-hfsplus](https://github.com/theuni/libdmg-hfsplus).\n+`genisoimage` cannot compress DMGs, so afterwards, the DMG tool from the\n+`libdmg-hfsplus` project is used to compress it. There are several bugs in this tool and its\n+maintainer has seemingly abandoned the project. It has been forked and is available\n+(with fixes) here: [theuni/libdmg-hfsplus](https://github.com/theuni/libdmg-hfsplus).\n \n-The 'dmg' tool has the ability to create DMGs from scratch as well, but this\n-functionality is broken. Only the compression feature is currently used.\n-Ideally, the creation could be fixed and genisoimage would no longer be necessary.\n+The DMG tool has the ability to create DMGs from scratch as well, but this functionality is\n+broken. Only the compression feature is currently used. Ideally, the creation could be fixed\n+and `genisoimage` would no longer be necessary.\n \n Background images and other features can be added to DMG files by inserting a\n-.DS_Store before creation. This is generated by the script\n-contrib/macdeploy/custom_dsstore.py.\n-\n-As of OS X 10.9 Mavericks, using an Apple-blessed key to sign binaries is a\n-requirement in order to satisfy the new Gatekeeper requirements. Because this\n-private key cannot be shared, we'll have to be a bit creative in order for the\n-build process to remain somewhat deterministic. Here's how it works:\n-\n-- Builders use Gitian to create an unsigned release. This outputs an unsigned\n-  dmg which users may choose to bless and run. It also outputs an unsigned app\n-  structure in the form of a tarball, which also contains all of the tools\n-  that have been previously (deterministically) built in order to create a\n-  final dmg.\n-- The Apple keyholder uses this unsigned app to create a detached signature,\n-  using the script that is also included there. Detached signatures are available from this [repository](https://github.com/bitcoin-core/bitcoin-detached-sigs).\n-- Builders feed the unsigned app + detached signature back into Gitian. It\n-  uses the pre-built tools to recombine the pieces into a deterministic dmg.\n+`.DS_Store` before creation. This is generated by the script\n+`contrib/macdeploy/custom_dsstore.py`.\n+\n+As of OS X 10.9 Mavericks, using an Apple-blessed key to sign binaries is a requirement in\n+order to satisfy the new Gatekeeper requirements. Because this private key cannot be\n+shared, we'll have to be a bit creative in order for the build process to remain somewhat\n+deterministic. Here's how it works:\n+\n+- Builders use Gitian to create an unsigned release. This outputs an unsigned DMG which\n+  users may choose to bless and run. It also outputs an unsigned app structure in the form\n+  of a tarball, which also contains all of the tools that have been previously (deterministically)\n+  built in order to create a final DMG.\n+- The Apple keyholder uses this unsigned app to create a detached signature, using the\n+  script that is also included there. Detached signatures are available from this [repository](https://github.com/bitcoin-core/bitcoin-detached-sigs).\n+- Builders feed the unsigned app + detached signature back into Gitian. It uses the\n+  pre-built tools to recombine the pieces into a deterministic DMG.\n "
      },
      {
        "sha": "eb88aca050ab6efa1c696ba57315794e9f54d294",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 15,
        "deletions": 3,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -61,6 +61,14 @@ tuned to conserve memory with additional CXXFLAGS:\n \n     ./configure CXXFLAGS=\"--param ggc-min-expand=1 --param ggc-min-heapsize=32768\"\n \n+Alternatively, or in addition, debugging information can be skipped for compilation. The default compile flags are\n+`-g -O2`, and can be changed with:\n+\n+    ./configure CXXFLAGS=\"-O2\"\n+\n+Finally, clang (often less resource hungry) can be used instead of gcc, which is used by default:\n+\n+    ./configure CXX=clang++ CC=clang\n \n ## Linux Distribution Specific Instructions\n \n@@ -78,7 +86,7 @@ Now, you can either build from self-compiled [depends](/depends/README.md) or in\n \n BerkeleyDB is required for the wallet.\n \n-Ubuntu and Debian have their own libdb-dev and libdb++-dev packages, but these will install\n+Ubuntu and Debian have their own `libdb-dev` and `libdb++-dev` packages, but these will install\n BerkeleyDB 5.1 or later. This will break binary wallet compatibility with the distributed executables, which\n are based on BerkeleyDB 4.8. If you do not care about wallet compatibility,\n pass `--with-incompatible-bdb` to configure.\n@@ -88,7 +96,7 @@ Otherwise, you can build from self-compiled `depends` (see above).\n To build Bitcoin Core without wallet, see [*Disable-wallet mode*](/doc/build-unix.md#disable-wallet-mode)\n \n \n-Optional (see --with-miniupnpc and --enable-upnp-default):\n+Optional (see `--with-miniupnpc` and `--enable-upnp-default`):\n \n     sudo apt-get install libminiupnpc-dev\n \n@@ -122,10 +130,14 @@ Build requirements:\n \n     sudo dnf install gcc-c++ libtool make autoconf automake openssl-devel libevent-devel boost-devel libdb4-devel libdb4-cxx-devel python3\n \n-Optional:\n+Optional (see `--with-miniupnpc` and `--enable-upnp-default`):\n \n     sudo dnf install miniupnpc-devel\n \n+ZMQ dependencies (provides ZMQ API):\n+\n+    sudo dnf install zeromq-devel\n+\n To build with Qt 5 you need the following:\n \n     sudo dnf install qt5-qttools-devel qt5-qtbase-devel protobuf-devel"
      },
      {
        "sha": "0b23ca0a2d56d213568d6884de88d33ae6aca732",
        "filename": "doc/dependencies.md",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/doc/dependencies.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/doc/dependencies.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dependencies.md?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -7,26 +7,24 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | --- | --- | --- | --- | --- | --- |\n | Berkeley DB | [4.8.30](https://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html) | 4.8.x | No |  |  |\n | Boost | [1.70.0](https://www.boost.org/users/download/) | [1.47.0](https://github.com/bitcoin/bitcoin/pull/8920) | No |  |  |\n-| Clang |  | [3.3+](https://llvm.org/releases/download.html) (C++11 support) |  |  |  |\n-| D-Bus | [1.10.18](https://cgit.freedesktop.org/dbus/dbus/tree/NEWS?h=dbus-1.10) |  | No | Yes |  |\n-| Expat | [2.2.6](https://libexpat.github.io/) |  | No | Yes |  |\n+| Clang |  | [3.3+](https://releases.llvm.org/download.html) (C++11 support) |  |  |  |\n+| Expat | [2.2.7](https://libexpat.github.io/) |  | No | Yes |  |\n | fontconfig | [2.12.1](https://www.freedesktop.org/software/fontconfig/release/) |  | No | Yes |  |\n | FreeType | [2.7.1](https://download.savannah.gnu.org/releases/freetype) |  | No |  |  |\n | GCC |  | [4.8+](https://gcc.gnu.org/) (C++11 support) |  |  |  |\n | HarfBuzz-NG |  |  |  |  |  |\n | libevent | [2.1.8-stable](https://github.com/libevent/libevent/releases) | 2.0.22 | No |  |  |\n-| libjpeg |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk#L65) |\n-| libpng |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk#L64) |\n+| libpng |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk) |\n | librsvg | |  |  |  |  |\n | MiniUPnPc | [2.0.20180203](http://miniupnp.free.fr/files) |  | No |  |  |\n | OpenSSL | [1.0.1k](https://www.openssl.org/source) |  | Yes |  |  |\n-| PCRE |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk#L66) |\n+| PCRE |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk) |\n | protobuf | [2.6.1](https://github.com/google/protobuf/releases) |  | No |  |  |\n | Python (tests) |  | [3.5](https://www.python.org/downloads) |  |  |  |\n | qrencode | [3.4.4](https://fukuchi.org/works/qrencode) |  | No |  |  |\n | Qt | [5.9.7](https://download.qt.io/official_releases/qt/) | [5.5.1](https://github.com/bitcoin/bitcoin/issues/13478) | No |  |  |\n-| XCB |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk#L87) (Linux only) |\n-| xkbcommon |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk#L86) (Linux only) |\n+| XCB |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk) (Linux only) |\n+| xkbcommon |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk) (Linux only) |\n | ZeroMQ | [4.3.1](https://github.com/zeromq/libzmq/releases) | 4.0.0 | No |  |  |\n | zlib | [1.2.11](https://zlib.net/) |  |  |  | No |\n "
      },
      {
        "sha": "d1114b0c73f603b6b196b30345be99d4e346b27d",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 77,
        "deletions": 80,
        "changes": 157,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -62,7 +62,7 @@ tool to clean up patches automatically before submission.\n   - Braces on the same line for everything else.\n   - 4 space indentation (no tabs) for every block except namespaces.\n   - No indentation for `public`/`protected`/`private` or for `namespace`.\n-  - No extra spaces inside parenthesis; don't do ( this )\n+  - No extra spaces inside parenthesis; don't do ( this ).\n   - No space after function names; one space after `if`, `for` and `while`.\n   - If an `if` only has a single-statement `then`-clause, it can appear\n     on the same line as the `if`, without braces. In every other case,\n@@ -72,12 +72,12 @@ tool to clean up patches automatically before submission.\n - **Symbol naming conventions**. These are preferred in new code, but are not\n required when doing so would need changes to significant pieces of existing\n code.\n-  - Variable (including function arguments) and namespace names are all lowercase, and may use `_` to\n+  - Variable (including function arguments) and namespace names are all lowercase and may use `_` to\n     separate words (snake_case).\n     - Class member variables have a `m_` prefix.\n     - Global variables have a `g_` prefix.\n   - Constant names are all uppercase, and use `_` to separate words.\n-  - Class names, function names and method names are UpperCamelCase\n+  - Class names, function names, and method names are UpperCamelCase\n     (PascalCase). Do not prefix class names with `C`.\n   - Test suite naming convention: The Boost test suite in file\n     `src/test/foo_tests.cpp` should be named `foo_tests`. Test suite names\n@@ -134,6 +134,7 @@ Bitcoin Core uses [Doxygen](http://www.doxygen.nl/) to generate its official doc\n Use Doxygen-compatible comment blocks for functions, methods, and fields.\n \n For example, to describe a function use:\n+\n ```c++\n /**\n  * ... text ...\n@@ -143,11 +144,12 @@ For example, to describe a function use:\n  */\n bool function(int arg1, const char *arg2)\n ```\n+\n A complete list of `@xxx` commands can be found at http://www.doxygen.nl/manual/commands.html.\n As Doxygen recognizes the comments by the delimiters (`/**` and `*/` in this case), you don't\n *need* to provide any commands for a comment to be valid; just a description text is fine.\n \n-To describe a class use the same construct above the class definition:\n+To describe a class, use the same construct above the class definition:\n ```c++\n /**\n  * Alerts are for notifying old versions if they become too obsolete and\n@@ -189,7 +191,7 @@ but the above styles are favored.\n \n Documentation can be generated with `make docs` and cleaned up with `make clean-docs`. The resulting files are located in `doc/doxygen/html`; open `index.html` to view the homepage.\n \n-Before running `make docs`, you will need to install dependencies `doxygen` and `dot`. For example, on MacOS via Homebrew:\n+Before running `make docs`, you will need to install dependencies `doxygen` and `dot`. For example, on macOS via Homebrew:\n ```\n brew install doxygen --with-graphviz\n ```\n@@ -231,7 +233,7 @@ that run in `-regtest` mode.\n Bitcoin Core is a multi-threaded application, and deadlocks or other\n multi-threading bugs can be very difficult to track down. The `--enable-debug`\n configure option adds `-DDEBUG_LOCKORDER` to the compiler flags. This inserts\n-run-time checks to keep track of which locks are held, and adds warnings to the\n+run-time checks to keep track of which locks are held and adds warnings to the\n debug.log file if inconsistencies are detected.\n \n ### Valgrind suppressions file\n@@ -299,7 +301,7 @@ $ perf record \\\n     -p `pgrep bitcoind` -- sleep 60\n ```\n \n-You could then analyze the results by running\n+You could then analyze the results by running:\n \n ```sh\n perf report --stdio | c++filt | less\n@@ -364,7 +366,7 @@ Additional resources:\n Locking/mutex usage notes\n -------------------------\n \n-The code is multi-threaded, and uses mutexes and the\n+The code is multi-threaded and uses mutexes and the\n `LOCK` and `TRY_LOCK` macros to protect data structures.\n \n Deadlocks due to inconsistent lock ordering (thread 1 locks `cs_main` and then\n@@ -375,7 +377,7 @@ reported in the debug.log file.\n \n Re-architecting the core code so there are better-defined interfaces\n between the various components is a goal, with any necessary locking\n-done by the components (e.g. see the self-contained `CBasicKeyStore` class\n+done by the components (e.g. see the self-contained `FillableSigningProvider` class\n and its `cs_KeyStore` lock for example).\n \n Threads\n@@ -389,7 +391,7 @@ Threads\n \n - ThreadDNSAddressSeed : Loads addresses of peers from the DNS.\n \n-- ThreadMapPort : Universal plug-and-play startup/shutdown\n+- ThreadMapPort : Universal plug-and-play startup/shutdown.\n \n - ThreadSocketHandler : Sends/Receives data from peers on port 8333.\n \n@@ -408,7 +410,7 @@ Threads\n Ignoring IDE/editor files\n --------------------------\n \n-In closed-source environments in which everyone uses the same IDE it is common\n+In closed-source environments in which everyone uses the same IDE, it is common\n to add temporary files it produces to the project-wide `.gitignore` file.\n \n However, in open source software such as Bitcoin Core, where everyone uses\n@@ -446,33 +448,33 @@ pay attention to for reviewers of Bitcoin Core code.\n General Bitcoin Core\n ----------------------\n \n-- New features should be exposed on RPC first, then can be made available in the GUI\n+- New features should be exposed on RPC first, then can be made available in the GUI.\n \n   - *Rationale*: RPC allows for better automatic testing. The test suite for\n-    the GUI is very limited\n+    the GUI is very limited.\n \n-- Make sure pull requests pass Travis CI before merging\n+- Make sure pull requests pass Travis CI before merging.\n \n   - *Rationale*: Makes sure that they pass thorough testing, and that the tester will keep passing\n-     on the master branch. Otherwise all new pull requests will start failing the tests, resulting in\n-     confusion and mayhem\n+     on the master branch. Otherwise, all new pull requests will start failing the tests, resulting in\n+     confusion and mayhem.\n \n   - *Explanation*: If the test suite is to be updated for a change, this has to\n-    be done first\n+    be done first.\n \n Wallet\n -------\n \n - Make sure that no crashes happen with run-time option `-disablewallet`.\n \n   - *Rationale*: In RPC code that conditionally uses the wallet (such as\n-    `validateaddress`) it is easy to forget that global pointer `pwalletMain`\n+    `validateaddress`), it is easy to forget that global pointer `pwalletMain`\n     can be nullptr. See `test/functional/disablewallet.py` for functional tests\n-    exercising the API with `-disablewallet`\n+    exercising the API with `-disablewallet`.\n \n-- Include `db_cxx.h` (BerkeleyDB header) only when `ENABLE_WALLET` is set\n+- Include `db_cxx.h` (BerkeleyDB header) only when `ENABLE_WALLET` is set.\n \n-  - *Rationale*: Otherwise compilation of the disable-wallet build will fail in environments without BerkeleyDB\n+  - *Rationale*: Otherwise compilation of the disable-wallet build will fail in environments without BerkeleyDB.\n \n General C++\n -------------\n@@ -483,54 +485,54 @@ Guidelines](https://isocpp.github.io/CppCoreGuidelines/).\n Common misconceptions are clarified in those sections:\n \n - Passing (non-)fundamental types in the [C++ Core\n-  Guideline](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rf-conventional)\n+  Guideline](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rf-conventional).\n \n-- Assertions should not have side-effects\n+- Assertions should not have side-effects.\n \n   - *Rationale*: Even though the source code is set to refuse to compile\n     with assertions disabled, having side-effects in assertions is unexpected and\n-    makes the code harder to understand\n+    makes the code harder to understand.\n \n-- If you use the `.h`, you must link the `.cpp`\n+- If you use the `.h`, you must link the `.cpp`.\n \n   - *Rationale*: Include files define the interface for the code in implementation files. Including one but\n       not linking the other is confusing. Please avoid that. Moving functions from\n-      the `.h` to the `.cpp` should not result in build errors\n+      the `.h` to the `.cpp` should not result in build errors.\n \n-- Use the RAII (Resource Acquisition Is Initialization) paradigm where possible. For example by using\n+- Use the RAII (Resource Acquisition Is Initialization) paradigm where possible. For example, by using\n   `unique_ptr` for allocations in a function.\n \n-  - *Rationale*: This avoids memory and resource leaks, and ensures exception safety\n+  - *Rationale*: This avoids memory and resource leaks, and ensures exception safety.\n \n-- Use `MakeUnique()` to construct objects owned by `unique_ptr`s\n+- Use `MakeUnique()` to construct objects owned by `unique_ptr`s.\n \n   - *Rationale*: `MakeUnique` is concise and ensures exception safety in complex expressions.\n     `MakeUnique` is a temporary project local implementation of `std::make_unique` (C++14).\n \n C++ data structures\n --------------------\n \n-- Never use the `std::map []` syntax when reading from a map, but instead use `.find()`\n+- Never use the `std::map []` syntax when reading from a map, but instead use `.find()`.\n \n   - *Rationale*: `[]` does an insert (of the default element) if the item doesn't\n     exist in the map yet. This has resulted in memory leaks in the past, as well as\n-    race conditions (expecting read-read behavior). Using `[]` is fine for *writing* to a map\n+    race conditions (expecting read-read behavior). Using `[]` is fine for *writing* to a map.\n \n - Do not compare an iterator from one data structure with an iterator of\n-  another data structure (even if of the same type)\n+  another data structure (even if of the same type).\n \n   - *Rationale*: Behavior is undefined. In C++ parlor this means \"may reformat\n-    the universe\", in practice this has resulted in at least one hard-to-debug crash bug\n+    the universe\", in practice this has resulted in at least one hard-to-debug crash bug.\n \n - Watch out for out-of-bounds vector access. `&vch[vch.size()]` is illegal,\n   including `&vch[0]` for an empty vector. Use `vch.data()` and `vch.data() +\n   vch.size()` instead.\n \n-- Vector bounds checking is only enabled in debug mode. Do not rely on it\n+- Vector bounds checking is only enabled in debug mode. Do not rely on it.\n \n - Initialize all non-static class members where they are defined.\n   If this is skipped for a good reason (i.e., optimization on the critical\n-  path), add an explicit comment about this\n+  path), add an explicit comment about this.\n \n   - *Rationale*: Ensure determinism by avoiding accidental use of uninitialized\n     values. Also, static analyzers balk about this.\n@@ -554,30 +556,30 @@ class A\n   `int8_t`. Do not use bare `char` unless it is to pass to a third-party API.\n   This type can be signed or unsigned depending on the architecture, which can\n   lead to interoperability problems or dangerous conditions such as\n-  out-of-bounds array accesses\n+  out-of-bounds array accesses.\n \n-- Prefer explicit constructions over implicit ones that rely on 'magical' C++ behavior\n+- Prefer explicit constructions over implicit ones that rely on 'magical' C++ behavior.\n \n   - *Rationale*: Easier to understand what is happening, thus easier to spot mistakes, even for those\n-  that are not language lawyers\n+  that are not language lawyers.\n \n Strings and formatting\n ------------------------\n \n - Be careful of `LogPrint` versus `LogPrintf`. `LogPrint` takes a `category` argument, `LogPrintf` does not.\n \n   - *Rationale*: Confusion of these can result in runtime exceptions due to\n-    formatting mismatch, and it is easy to get wrong because of subtly similar naming\n+    formatting mismatch, and it is easy to get wrong because of subtly similar naming.\n \n-- Use `std::string`, avoid C string manipulation functions\n+- Use `std::string`, avoid C string manipulation functions.\n \n   - *Rationale*: C++ string handling is marginally safer, less scope for\n-    buffer overflows and surprises with `\\0` characters. Also some C string manipulations\n-    tend to act differently depending on platform, or even the user locale\n+    buffer overflows, and surprises with `\\0` characters. Also, some C string manipulations\n+    tend to act differently depending on platform, or even the user locale.\n \n-- Use `ParseInt32`, `ParseInt64`, `ParseUInt32`, `ParseUInt64`, `ParseDouble` from `utilstrencodings.h` for number parsing\n+- Use `ParseInt32`, `ParseInt64`, `ParseUInt32`, `ParseUInt64`, `ParseDouble` from `utilstrencodings.h` for number parsing.\n \n-  - *Rationale*: These functions do overflow checking, and avoid pesky locale issues.\n+  - *Rationale*: These functions do overflow checking and avoid pesky locale issues.\n \n - Avoid using locale dependent functions if possible. You can use the provided\n   [`lint-locale-dependence.sh`](/test/lint/lint-locale-dependence.sh)\n@@ -607,14 +609,14 @@ Strings and formatting\n     `wcstoll`, `wcstombs`, `wcstoul`, `wcstoull`, `wcstoumax`, `wcswidth`,\n     `wcsxfrm`, `wctob`, `wctomb`, `wctrans`, `wctype`, `wcwidth`, `wprintf`\n \n-- For `strprintf`, `LogPrint`, `LogPrintf` formatting characters don't need size specifiers\n+- For `strprintf`, `LogPrint`, `LogPrintf` formatting characters don't need size specifiers.\n \n-  - *Rationale*: Bitcoin Core uses tinyformat, which is type safe. Leave them out to avoid confusion\n+  - *Rationale*: Bitcoin Core uses tinyformat, which is type safe. Leave them out to avoid confusion.\n \n Variable names\n --------------\n \n-Although the shadowing warning (`-Wshadow`) is not enabled by default (it prevents issues rising\n+Although the shadowing warning (`-Wshadow`) is not enabled by default (it prevents issues arising\n from using a different variable with the same name),\n please name variables so that their names do not shadow variables defined in the source code.\n \n@@ -633,22 +635,20 @@ AddressBookPage::AddressBookPage(Mode _mode)\n ```\n \n When using nested cycles, do not name the inner cycle variable the same as in\n-upper cycle etc.\n-\n+the upper cycle, etc.\n \n Threads and synchronization\n ----------------------------\n \n - Build and run tests with `-DDEBUG_LOCKORDER` to verify that no potential\n   deadlocks are introduced. As of 0.12, this is defined by default when\n-  configuring with `--enable-debug`\n+  configuring with `--enable-debug`.\n \n - When using `LOCK`/`TRY_LOCK` be aware that the lock exists in the context of\n   the current scope, so surround the statement and the code that needs the lock\n-  with braces\n+  with braces.\n \n   OK:\n-\n ```c++\n {\n     TRY_LOCK(cs_vNodes, lockNodes);\n@@ -657,7 +657,6 @@ Threads and synchronization\n ```\n \n   Wrong:\n-\n ```c++\n TRY_LOCK(cs_vNodes, lockNodes);\n {\n@@ -679,13 +678,11 @@ Scripts\n     `#!/usr/bin/env bash` searches the user's PATH to find the bash binary.\n \n   OK:\n-\n ```bash\n #!/usr/bin/env bash\n ```\n \n   Wrong:\n-\n ```bash\n #!/bin/bash\n ```\n@@ -694,9 +691,9 @@ Source code organization\n --------------------------\n \n - Implementation code should go into the `.cpp` file and not the `.h`, unless necessary due to template usage or\n-  when performance due to inlining is critical\n+  when performance due to inlining is critical.\n \n-  - *Rationale*: Shorter and simpler header files are easier to read, and reduce compile time\n+  - *Rationale*: Shorter and simpler header files are easier to read and reduce compile time.\n \n - Use only the lowercase alphanumerics (`a-z0-9`), underscore (`_`) and hyphen (`-`) in source code filenames.\n \n@@ -714,7 +711,7 @@ Source code organization\n - Don't import anything into the global namespace (`using namespace ...`). Use\n   fully specified types such as `std::string`.\n \n-  - *Rationale*: Avoids symbol conflicts\n+  - *Rationale*: Avoids symbol conflicts.\n \n - Terminate namespaces with a comment (`// namespace mynamespace`). The comment\n   should be placed on the same line as the brace closing the namespace, e.g.\n@@ -729,7 +726,7 @@ namespace {\n } // namespace\n ```\n \n-  - *Rationale*: Avoids confusion about the namespace context\n+  - *Rationale*: Avoids confusion about the namespace context.\n \n - Use `#include <primitives/transaction.h>` bracket syntax instead of\n   `#include \"primitives/transactions.h\"` quote syntax.\n@@ -752,13 +749,13 @@ namespace {\n GUI\n -----\n \n-- Do not display or manipulate dialogs in model code (classes `*Model`)\n+- Do not display or manipulate dialogs in model code (classes `*Model`).\n \n   - *Rationale*: Model classes pass through events and data from the core, they\n     should not interact with the user. That's where View classes come in. The converse also\n     holds: try to not directly access core data structures from Views.\n \n-- Avoid adding slow or blocking code in the GUI thread. In particular do not\n+- Avoid adding slow or blocking code in the GUI thread. In particular, do not\n   add new `interfaces::Node` and `interfaces::Wallet` method calls, even if they\n   may be fast now, in case they are changed to lock or communicate across\n   processes in the future.\n@@ -777,12 +774,12 @@ Subtrees\n Several parts of the repository are subtrees of software maintained elsewhere.\n \n Some of these are maintained by active developers of Bitcoin Core, in which case changes should probably go\n-directly upstream without being PRed directly against the project.  They will be merged back in the next\n+directly upstream without being PRed directly against the project. They will be merged back in the next\n subtree merge.\n \n-Others are external projects without a tight relationship with our project.  Changes to these should also\n-be sent upstream but bugfixes may also be prudent to PR against Bitcoin Core so that they can be integrated\n-quickly.  Cosmetic changes should be purely taken upstream.\n+Others are external projects without a tight relationship with our project. Changes to these should also\n+be sent upstream, but bugfixes may also be prudent to PR against Bitcoin Core so that they can be integrated\n+quickly. Cosmetic changes should be purely taken upstream.\n \n There is a tool in `test/lint/git-subtree-check.sh` to check a subtree directory for consistency with\n its upstream repository.\n@@ -812,11 +809,11 @@ you must be aware of.\n \n ### File Descriptor Counts\n \n-In most configurations we use the default LevelDB value for `max_open_files`,\n+In most configurations, we use the default LevelDB value for `max_open_files`,\n which is 1000 at the time of this writing. If LevelDB actually uses this many\n-file descriptors it will cause problems with Bitcoin's `select()` loop, because\n+file descriptors, it will cause problems with Bitcoin's `select()` loop, because\n it may cause new sockets to be created where the fd value is >= 1024. For this\n-reason, on 64-bit Unix systems we rely on an internal LevelDB optimization that\n+reason, on 64-bit Unix systems, we rely on an internal LevelDB optimization that\n uses `mmap()` + `close()` to open table files without actually retaining\n references to the table file descriptors. If you are upgrading LevelDB, you must\n sanity check the changes to make sure that this assumption remains valid.\n@@ -841,14 +838,14 @@ details.\n \n It is possible for LevelDB changes to inadvertently change consensus\n compatibility between nodes. This happened in Bitcoin 0.8 (when LevelDB was\n-first introduced). When upgrading LevelDB you should review the upstream changes\n+first introduced). When upgrading LevelDB, you should review the upstream changes\n to check for issues affecting consensus compatibility.\n \n For example, if LevelDB had a bug that accidentally prevented a key from being\n returned in an edge case, and that bug was fixed upstream, the bug \"fix\" would\n-be an incompatible consensus change. In this situation the correct behavior\n+be an incompatible consensus change. In this situation, the correct behavior\n would be to revert the upstream fix before applying the updates to Bitcoin's\n-copy of LevelDB. In general you should be wary of any upstream changes affecting\n+copy of LevelDB. In general, you should be wary of any upstream changes affecting\n what data is returned from LevelDB queries.\n \n Scripted diffs\n@@ -867,7 +864,7 @@ To create a scripted-diff:\n     - `-BEGIN VERIFY SCRIPT-`\n     - `-END VERIFY SCRIPT-`\n \n-The scripted-diff is verified by the tool `test/lint/commit-script-check.sh`. The tool's default behavior when supplied\n+The scripted-diff is verified by the tool `test/lint/commit-script-check.sh`. The tool's default behavior, when supplied\n with a commit is to verify all scripted-diffs from the beginning of time up to said commit. Internally, the tool passes\n the first supplied argument to `git rev-list --reverse` to determine which commits to verify script-diffs for, ignoring\n commits that don't conform to the commit message format described above.\n@@ -900,23 +897,23 @@ RPC interface guidelines\n \n A few guidelines for introducing and reviewing new RPC interfaces:\n \n-- Method naming: use consecutive lower-case names such as `getrawtransaction` and `submitblock`\n+- Method naming: use consecutive lower-case names such as `getrawtransaction` and `submitblock`.\n \n-  - *Rationale*: Consistency with existing interface.\n+  - *Rationale*: Consistency with the existing interface.\n \n - Argument naming: use snake case `fee_delta` (and not, e.g. camel case `feeDelta`)\n \n-  - *Rationale*: Consistency with existing interface.\n+  - *Rationale*: Consistency with the existing interface.\n \n - Use the JSON parser for parsing, don't manually parse integers or strings from\n   arguments unless absolutely necessary.\n \n   - *Rationale*: Introduces hand-rolled string manipulation code at both the caller and callee sites,\n-    which is error prone, and it is easy to get things such as escaping wrong.\n+    which is error-prone, and it is easy to get things such as escaping wrong.\n     JSON already supports nested data structures, no need to re-invent the wheel.\n \n   - *Exception*: AmountFromValue can parse amounts as string. This was introduced because many JSON\n-    parsers and formatters hard-code handling decimal numbers as floating point\n+    parsers and formatters hard-code handling decimal numbers as floating-point\n     values, resulting in potential loss of precision. This is unacceptable for\n     monetary values. **Always** use `AmountFromValue` and `ValueFromAmount` when\n     inputting or outputting monetary values. The only exceptions to this are\n@@ -925,7 +922,7 @@ A few guidelines for introducing and reviewing new RPC interfaces:\n \n - Missing arguments and 'null' should be treated the same: as default values. If there is no\n   default value, both cases should fail in the same way. The easiest way to follow this\n-  guideline is detect unspecified arguments with `params[x].isNull()` instead of\n+  guideline is to detect unspecified arguments with `params[x].isNull()` instead of\n   `params.size() <= x`. The former returns true if the argument is either null or missing,\n   while the latter returns true if is missing, and false if it is null.\n \n@@ -959,15 +956,15 @@ A few guidelines for introducing and reviewing new RPC interfaces:\n     from there.\n \n - A RPC method must either be a wallet method or a non-wallet method. Do not\n-  introduce new methods that differ in behavior based on presence of a wallet.\n+  introduce new methods that differ in behavior based on the presence of a wallet.\n \n   - *Rationale*: as well as complicating the implementation and interfering\n     with the introduction of multi-wallet, wallet and non-wallet code should be\n     separated to avoid introducing circular dependencies between code units.\n \n - Try to make the RPC response a JSON object.\n \n-  - *Rationale*: If a RPC response is not a JSON object then it is harder to avoid API breakage if\n+  - *Rationale*: If a RPC response is not a JSON object, then it is harder to avoid API breakage if\n     new data in the response is needed.\n \n - Wallet RPCs call BlockUntilSyncedToCurrentChain to maintain consistency with"
      },
      {
        "sha": "3dc6be8b860b837f73fbffcf1bff203ee13cc0a5",
        "filename": "doc/fuzzing.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/doc/fuzzing.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/doc/fuzzing.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/fuzzing.md?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -46,7 +46,7 @@ export AFLPATH=$PWD\n To build Bitcoin Core using AFL instrumentation (this assumes that the\n `AFLPATH` was set as above):\n ```\n-./configure --disable-ccache --disable-shared --enable-tests --enable-fuzz --disable-wallet --disable-bench --with-utils=no --with-daemon=no --with-libs=no --with-gui=no CC=${AFLPATH}/afl-gcc CXX=${AFLPATH}/afl-g++\n+./configure --disable-ccache --disable-shared --enable-tests --enable-fuzz CC=${AFLPATH}/afl-gcc CXX=${AFLPATH}/afl-g++\n export AFL_HARDEN=1\n cd src/\n make\n@@ -83,7 +83,7 @@ found in the `compiler-rt` runtime libraries package).\n To build all fuzz targets with libFuzzer, run\n \n ```\n-./configure --disable-ccache --disable-wallet --disable-bench --with-utils=no --with-daemon=no --with-libs=no --with-gui=no --enable-fuzz --with-sanitizers=fuzzer,address CC=clang CXX=clang++\n+./configure --disable-ccache --enable-fuzz --with-sanitizers=fuzzer,address CC=clang CXX=clang++\n make\n ```\n "
      },
      {
        "sha": "397a907f17c00f64c9404f9a2d4d1810077b05e6",
        "filename": "doc/rapidcheck.md",
        "status": "added",
        "additions": 84,
        "deletions": 0,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/doc/rapidcheck.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/doc/rapidcheck.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/rapidcheck.md?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -0,0 +1,84 @@\n+# RapidCheck property-based testing for Bitcoin Core\n+\n+## Concept\n+\n+Property-based testing is experimentally being added to Bitcoin Core with\n+[RapidCheck](https://github.com/emil-e/rapidcheck), a C++ framework for\n+property-based testing inspired by the Haskell library\n+[QuickCheck](https://hackage.haskell.org/package/QuickCheck).\n+\n+RapidCheck performs random testing of program properties. A specification of the\n+program is given in the form of properties which functions should satisfy, and\n+RapidCheck tests that the properties hold in a large number of randomly\n+generated cases.\n+\n+If an exception is found, RapidCheck tries to find the smallest case, for some\n+definition of smallest, for which the property is still false and displays it as\n+a counter-example. For example, if the input is an integer, RapidCheck tries to\n+find the smallest integer for which the property is false.\n+\n+## Running\n+\n+If RapidCheck is installed, Bitcoin Core will automatically run the\n+property-based tests with the unit tests during `make check`, unless the\n+`--without-rapidcheck` flag is passed when configuring.\n+\n+For more information, run `./configure --help` and see `--with-rapidcheck` under\n+Optional Packages.\n+\n+## Setup\n+\n+The following instructions have been tested with Linux Debian and macOS.\n+\n+1. Clone the RapidCheck source code and cd into the repository.\n+\n+    ```shell\n+    git clone https://github.com/emil-e/rapidcheck.git\n+    cd rapidcheck\n+    ```\n+\n+2. Build RapidCheck (requires CMake to be installed).\n+\n+    ```shell\n+    cmake -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=true -DRC_ENABLE_BOOST_TEST=ON $(pwd)\n+    make && make install\n+    ```\n+\n+3. Configure Bitcoin Core with RapidCheck.\n+\n+    `cd` to the directory of your local bitcoin repository and run\n+    `./configure`. In the output you should see:\n+\n+    ```shell\n+    checking rapidcheck.h usability... yes\n+    checking rapidcheck.h presence... yes\n+    checking for rapidcheck.h... yes\n+    [...]\n+    Options used to compile and link:\n+    [...]\n+      with test     = yes\n+        with prop   = yes\n+    ```\n+\n+4. Build Bitcoin Core with RapidCheck.\n+\n+    Now you can run `make` and should see the property-based tests compiled with\n+    the unit tests:\n+\n+    ```shell\n+    Making all in src\n+    [...]\n+    CXX      test/gen/test_bitcoin-crypto_gen.o\n+    CXX      test/test_bitcoin-key_properties.o\n+    ```\n+\n+5. Run the unit tests with `make check`. The property-based tests will be run\n+   with the unit tests.\n+\n+    ```shell\n+    Running tests: crypto_tests from test/crypto_tests.cpp\n+    [...]\n+    Running tests: key_properties from test/key_properties.cpp\n+    ```\n+\n+That's it! You are now running property-based tests in Bitcoin Core."
      },
      {
        "sha": "8d8ccdfedc2cbee608f5867c440477a06d5a720e",
        "filename": "doc/reduce-memory.md",
        "status": "added",
        "additions": 49,
        "deletions": 0,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/doc/reduce-memory.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/doc/reduce-memory.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/reduce-memory.md?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -0,0 +1,49 @@\n+# Reduce Memory\n+\n+There are a few parameters that can be dialed down to reduce the memory usage of `bitcoind`. This can be useful on embedded systems or small VPSes.\n+\n+## In-memory caches\n+\n+The size of some in-memory caches can be reduced. As caches trade off memory usage for performance, reducing these will usually have a negative effect on performance.\n+\n+- `-dbcache=<n>` - the UTXO database cache size, this defaults to `450`. The unit is MiB (1024).\n+  - The minimum value for `-dbcache` is 4.\n+  - A lower `-dbcache` makes initial sync time much longer. After the initial sync, the effect is less pronounced for most use-cases, unless fast validation of blocks is important, such as for mining.\n+\n+## Memory pool\n+\n+- In Bitcoin Core there is a memory pool limiter which can be configured with `-maxmempool=<n>`, where `<n>` is the size in MB (1000). The default value is `300`.\n+  - The minimum value for `-maxmempool` is 5.\n+  - A lower maximum mempool size means that transactions will be evicted sooner. This will affect any uses of `bitcoind` that process unconfirmed transactions.\n+\n+- To completely disable mempool functionality there is the option `-blocksonly`. This will make the client opt out of receiving (and thus relaying) transactions completely, except as part of blocks.\n+\n+  - Do not use this when using the client to broadcast transactions as any transaction sent will stick out like a sore thumb, affecting privacy. When used with the wallet it should be combined with `-walletbroadcast=0` and `-spendzeroconfchange=0`. Another mechanism for broadcasting outgoing transactions (if any) should be used.\n+\n+- Since `0.14.0`, unused memory allocated to the mempool (default: 300MB) is shared with the UTXO cache, so when trying to reduce memory usage you should limit the mempool, with the `-maxmempool` command line argument.\n+\n+## Number of peers\n+\n+- `-maxconnections=<n>` - the maximum number of connections, this defaults to `125`. Each active connection takes up some memory. Only significant if incoming\n+   connections are enabled, otherwise the number of connections will never be more than `8`.\n+\n+## Thread configuration\n+\n+For each thread a thread stack needs to be allocated. By default on Linux,\n+threads take up 8MiB for the thread stack on a 64-bit system, and 4MiB in a\n+32-bit system.\n+\n+- `-par=<n>` - the number of script verification threads, defaults to the number of cores in the system minus one.\n+- `-rpcthreads=<n>` - the number of threads used for processing RPC requests, defaults to `4`.\n+\n+## Linux specific\n+\n+By default, since glibc `2.10`, the C library will create up to two heap arenas per core. This is known to cause excessive memory usage in some scenarios. To avoid this make a script that sets `MALLOC_ARENA_MAX` before starting bitcoind:\n+\n+```bash\n+#!/bin/bash\n+export MALLOC_ARENA_MAX=1\n+bitcoind\n+```\n+\n+The behavior was introduced to increase CPU locality of allocated memory and performance with concurrent allocation, so this setting could in theory reduce performance. However, in Bitcoin Core very little parallel allocation happens, so the impact is expected to be small or absent."
      },
      {
        "sha": "a500aceb0f081715daab62021c0f145b838aefcf",
        "filename": "doc/release-notes-13756.md",
        "status": "removed",
        "additions": 0,
        "deletions": 41,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/doc/release-notes-13756.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/doc/release-notes-13756.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-13756.md?ref=3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa",
        "patch": "@@ -1,41 +0,0 @@\n-Coin selection\n---------------\n-\n-### Reuse Avoidance\n-\n-A new wallet flag `avoid_reuse` has been added (default off). When enabled,\n-a wallet will distinguish between used and unused addresses, and default to not\n-use the former in coin selection.\n-\n-Rescanning the blockchain is required, to correctly mark previously\n-used destinations.\n-\n-Together with \"avoid partial spends\" (present as of Bitcoin v0.17), this\n-addresses a serious privacy issue where a malicious user can track spends by\n-peppering a previously paid to address with near-dust outputs, which would then\n-be inadvertently included in future payments.\n-\n-New RPCs\n---------\n-\n-- A new `setwalletflag` RPC sets/unsets flags for an existing wallet.\n-\n-\n-Updated RPCs\n-------------\n-\n-Several RPCs have been updated to include an \"avoid_reuse\" flag, used to control\n-whether already used addresses should be left out or included in the operation.\n-These include:\n-\n-- createwallet\n-- getbalance\n-- getbalances\n-- sendtoaddress\n-\n-In addition, `sendtoaddress` has been changed to avoid partial spends when `avoid_reuse`\n-is enabled (if not already enabled via the  `-avoidpartialspends` command line flag),\n-as it would otherwise risk using up the \"wrong\" UTXO for an address reuse case.\n-\n-The listunspent RPC has also been updated to now include a \"reused\" bool, for nodes\n-with \"avoid_reuse\" enabled."
      },
      {
        "sha": "d8cad369c5d9a85aea0c3f25048a8570405f1fbb",
        "filename": "doc/release-notes-14054.md",
        "status": "removed",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/doc/release-notes-14054.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/doc/release-notes-14054.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-14054.md?ref=3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa",
        "patch": "@@ -1,7 +0,0 @@\n-P2P changes\n------------\n-\n-BIP 61 reject messages were deprecated in v0.18. They are now disabled by\n-default, but can be enabled by setting the `-enablebip61` command line option.\n-BIP 61 reject messages will be removed entirely in a future version of\n-Bitcoin Core."
      },
      {
        "sha": "1fcc38866a3842c835bcc5edc1a9ac5abd15136e",
        "filename": "doc/release-notes-14802.md",
        "status": "removed",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/doc/release-notes-14802.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/doc/release-notes-14802.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-14802.md?ref=3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa",
        "patch": "@@ -1,3 +0,0 @@\n-RPC changes\n------------\n-The `getblockstats` RPC is faster for fee calculation by using BlockUndo data. Also, `-txindex` is no longer required and `getblockstats` works for all non-pruned blocks."
      },
      {
        "sha": "4bb0fcca7409c794e527e0768be037bb14f2ce90",
        "filename": "doc/release-notes-14954.md",
        "status": "removed",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/doc/release-notes-14954.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/doc/release-notes-14954.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-14954.md?ref=3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa",
        "patch": "@@ -1,3 +0,0 @@\n-Build system changes\n---------------------\n-Python >=3.5 is now required by all aspects of the project. This includes the build systems, test framework and linters. The previously supported minimum (3.4), was EOL in March 2019. See #14954 for more details.\n\\ No newline at end of file"
      },
      {
        "sha": "76ed3247a63d465d5966bc91db86f95d6aeb1c08",
        "filename": "doc/release-notes-15006.md",
        "status": "removed",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/doc/release-notes-15006.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/doc/release-notes-15006.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-15006.md?ref=3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa",
        "patch": "@@ -1,4 +0,0 @@\n-Miscellaneous RPC changes\n-------------\n-\n-- `createwallet` can now create encrypted wallets if a non-empty passphrase is specified."
      },
      {
        "sha": "49964d755059dafc7a67b45fa8d57ae9f8472ca7",
        "filename": "doc/release-notes-15566.md",
        "status": "removed",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/doc/release-notes-15566.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/doc/release-notes-15566.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-15566.md?ref=3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa",
        "patch": "@@ -1,3 +0,0 @@\n-Miscellaneous CLI Changes\n--------------------------\n-- The `testnet` field in `bitcoin-cli -getinfo` has been renamed to `chain` and now returns the current network name as defined in BIP70 (main, test, regtest).\n\\ No newline at end of file"
      },
      {
        "sha": "bf89a70a4eb81ca393237112467675d3b78feab7",
        "filename": "doc/release-notes-15620.md",
        "status": "removed",
        "additions": 0,
        "deletions": 13,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/doc/release-notes-15620.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/doc/release-notes-15620.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-15620.md?ref=3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa",
        "patch": "@@ -1,13 +0,0 @@\n-Updated RPCs\n-------------\n-\n-* The -maxtxfee setting no longer has any effect on non-wallet RPCs.\n-\n-  The `sendrawtransaction` and `testmempoolaccept` RPC methods previously\n-  accepted an `allowhighfees` parameter to fail the mempool acceptance in case\n-  the transaction's fee would exceed the value of the command line argument\n-  `-maxtxfee`. To uncouple the RPCs from the global option, they now have a\n-  hardcoded default for the maximum transaction fee, that can be changed for\n-  both RPCs on a per-call basis with the `maxfeerate` parameter. The\n-  `allowhighfees` boolean option has been removed and replaced by the\n-  `maxfeerate` numeric option."
      },
      {
        "sha": "048d5e72185214d79585543eff1b3131f9d3588e",
        "filename": "doc/release-notes-15637.md",
        "status": "removed",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/doc/release-notes-15637.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/doc/release-notes-15637.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-15637.md?ref=3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa",
        "patch": "@@ -1,3 +0,0 @@\n-RPC changes\n------------\n-In getmempoolancestors, getmempooldescendants, getmempoolentry and getrawmempool RPCs, to be consistent with the returned value and other RPCs such as getrawtransaction, vsize has been added and size is now deprecated. size will only be returned if bitcoind is started with `-deprecatedrpc=size`.\n\\ No newline at end of file"
      },
      {
        "sha": "7a4a60b1ee7c8f0d27c17d98c6ae277900eadc93",
        "filename": "doc/release-notes-15730.md",
        "status": "removed",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/doc/release-notes-15730.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/doc/release-notes-15730.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-15730.md?ref=3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa",
        "patch": "@@ -1,5 +0,0 @@\n-RPC changes\n------------\n-The RPC `getwalletinfo` response now includes the `scanning` key with an object\n-if there is a scanning in progress or `false` otherwise. Currently the object\n-has the scanning duration and progress."
      },
      {
        "sha": "a1df31f2502a0609334eb6204714707ddc626b80",
        "filename": "doc/release-notes-15849.md",
        "status": "removed",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/doc/release-notes-15849.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/doc/release-notes-15849.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-15849.md?ref=3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa",
        "patch": "@@ -1,6 +0,0 @@\n-Thread names in logs\n---------------------\n-\n-On platforms supporting `thread_local`, log lines can be prefixed with the name\n-of the thread that caused the log. To enable this behavior, use\n-`-logthreadnames=1`."
      },
      {
        "sha": "04aab56a7298592cb1fa1a01286976abbf8c3f20",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 273,
        "deletions": 38,
        "changes": 311,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -19,8 +19,8 @@ Bitcoin Core version *version* is now available from:\n \n   <https://bitcoincore.org/bin/bitcoin-core-*version*/>\n \n-This is a new major version release, including new features, various bugfixes\n-and performance improvements, as well as updated translations.\n+This release includes new features, various bug fixes and performance\n+improvements, as well as updated translations.\n \n Please report bugs using the issue tracker at GitHub:\n \n@@ -42,30 +42,19 @@ Upgrading directly from a version of Bitcoin Core that has reached its EOL is\n possible, but might take some time if the datadir needs to be migrated.  Old\n wallet versions of Bitcoin Core are generally supported.\n \n-Downgrading warning\n--------------------\n-\n-The chainstate database for this release is not compatible with previous\n-releases, so if you run 0.15 and then decide to switch back to any\n-older version, you will need to run the old release with the `-reindex-chainstate`\n-option to rebuild the chainstate data structures in the old format.\n-\n-If your node has pruning enabled, this will entail re-downloading and\n-processing the entire blockchain.\n-\n Compatibility\n ==============\n \n Bitcoin Core is supported and extensively tested on operating systems using\n-the Linux kernel, macOS 10.10+, and Windows 7 and newer.  It is not recommended\n+the Linux kernel, macOS 10.10+, and Windows 7 and newer. It is not recommended\n to use Bitcoin Core on unsupported systems.\n \n Bitcoin Core should also work on most other Unix-like systems but is not\n-frequently tested on them.\n+as frequently tested on them.\n \n-From 0.17.0 onwards, macOS <10.10 is no longer supported.  0.17.0 is\n+From 0.17.0 onwards, macOS <10.10 is no longer supported. 0.17.0 is\n built using Qt 5.9.x, which doesn't support versions of macOS older than\n-10.10.  Additionally, Bitcoin Core does not yet change appearance when\n+10.10. Additionally, Bitcoin Core does not yet change appearance when\n macOS \"dark mode\" is activated.\n \n In addition to previously-supported CPU platforms, this release's\n@@ -75,41 +64,223 @@ platform.\n Notable changes\n ===============\n \n+New user documentation\n+----------------------\n+\n+- [Reduce memory](https://github.com/bitcoin/bitcoin/blob/master/doc/reduce-memory.md)\n+  suggests configuration tweaks for running Bitcoin Core on systems with\n+  limited memory. (#16339)\n+\n New RPCs\n --------\n \n - `getbalances` returns an object with all balances (`mine`,\n   `untrusted_pending` and `immature`). Please refer to the RPC help of\n   `getbalances` for details. The new RPC is intended to replace\n-  `getunconfirmedbalance` and the balance fields in `getwalletinfo`, as well as\n-  `getbalance`. The old calls may be removed in a future version.\n+  `getbalance`, `getunconfirmedbalance`, and the balance fields in\n+  `getwalletinfo`.  These old calls and fields may be removed in a\n+  future version. (#15930, #16239)\n+\n+- `setwalletflag` sets and unsets wallet flags that enable or disable\n+  features specific to that existing wallet, such as the new\n+  `avoid_reuse` feature documented elsewhere in these release notes.\n+  (#13756)\n+\n+- `getblockfilter` gets the BIP158 filter for the specified block.  This\n+  RPC is only enabled if block filters have been created using the\n+  `-blockfilterindex` configuration option. (#14121)\n+\n+New settings\n+------------\n+\n+- `-blockfilterindex` enables the creation of BIP158 block filters for\n+  the entire blockchain.  Filters will be created in the background and\n+  currently use about 4 GiB of space.  Note: this version of Bitcoin\n+  Core does not serve block filters over the P2P network, although the\n+  local user may obtain block filters using the `getblockfilter` RPC.\n+  (#14121)\n+\n+Updated settings\n+----------------\n+\n+- `whitebind` and `whitelist` now accept a list of permissions to\n+  provide peers connecting using the indicated interfaces or IP\n+  addresses.  If no permissions are specified with an address or CIDR\n+  network, the implicit default permissions are the same as previous\n+  releases.  See the `bitcoind -help` output for these two options for\n+  details about the available permissions. (#16248)\n \n Updated RPCs\n ------------\n \n Note: some low-level RPC changes mainly useful for testing are described in the\n Low-level Changes section below.\n \n-- The `sendmany` RPC had an argument `minconf` that was not well specified and\n-  would lead to RPC errors even when the wallet's coin selection would succeed.\n-  The `sendtoaddress` RPC never had this check, so to normalize the behavior,\n-  `minconf` is now ignored in `sendmany`. If the coin selection does not\n-  succeed due to missing coins, it will still throw an RPC error. Be reminded\n-  that coin selection is influenced by the `-spendzeroconfchange`,\n-  `-limitancestorcount`, `-limitdescendantcount` and `-walletrejectlongchains`\n-  command line arguments.\n-\n+- `sendmany` no longer has a `minconf` argument.  This argument was not\n+  well specified and would lead to RPC errors even when the wallet's\n+  coin selection succeeded.  Users who want to influence coin selection\n+  can use the existing `-spendzeroconfchange`, `-limitancestorcount`,\n+  `-limitdescendantcount` and `-walletrejectlongchains` configuration\n+  arguments. (#15596)\n+\n+- `getbalance` and `sendtoaddress`, plus the new RPCs `getbalances` and\n+  `createwallet`, now accept an \"avoid_reuse\" parameter that controls\n+  whether already used addresses should be included in the operation.\n+  Additionally, `sendtoaddress` will avoid partial spends when\n+  `avoid_reuse` is enabled even if this feature is not already enabled\n+  via the `-avoidpartialspends` command line flag because not doing so\n+  would risk using up the \"wrong\" UTXO for an address reuse case.\n+  (#13756)\n+\n+- `listunspent` now returns a \"reused\" bool for each output if the\n+  wallet flag \"avoid_reuse\" is enabled. (#13756)\n+\n+- `getblockstats` now uses BlockUndo data instead of the transaction\n+  index, making it much faster, no longer dependent on the `-txindex`\n+  configuration option, and functional for all non-pruned blocks.\n+  (#14802)\n+\n+- `utxoupdatepsbt` now accepts a `descriptors` parameter that will fill\n+  out input and output scripts and keys when known. P2SH-witness inputs\n+  will be filled in from the UTXO set when a descriptor is provided that\n+  shows they're spending segwit outputs.  See the RPC help text for full\n+  details. (#15427)\n+\n+- `sendrawtransaction` and `testmempoolaccept` no longer accept a\n+  `allowhighfees` parameter to fail mempool acceptance if the\n+  transaction fee exceedes the value of the configuration option\n+  `-maxtxfee`.  Now there is a hardcoded default maximum feerate that\n+  can be changed when calling either RPC using a `maxfeerate` parameter.\n+  (#15620)\n+\n+- `getmempoolancestors`, `getmempooldescendants`, `getmempoolentry`, and\n+  `getrawmempool` no longer return a `size` field unless the\n+  configuration option `-deprecatedrpc=size` is used.  Instead a new\n+  `vsize` field is returned with the transaction's virtual size\n+  (consistent with other RPCs such as `getrawtransaction`). (#15637)\n+\n+- `getwalletinfo` now includes a `scanning` field that is either `false`\n+  (no scanning) or an object with information about the duration and\n+  progress of the wallet's scanning historical blocks for transactions\n+  affecting its balances. (#15730)\n+\n+- `createwallet` accepts a new `passphrase` parameter.  If set, this\n+  will create the new wallet encrypted with the given passphrase.  If\n+  unset (the default) or set to an empty string, no encryption will be\n+  used. (#16394)\n+\n+- `getmempoolentry` now provides a `weight` field containing the\n+  transaction weight as defined in BIP141. (#16647)\n+\n+- `getdescriptorinfo` now returns an additional `checksum` field\n+  containing the checksum for the unmodified descriptor provided by the\n+  user (that is, before the descriptor is normalized for the\n+  `descriptor` field). (#15986)\n+\n+- `walletcreatefundedpsbt` now signals BIP125 Replace-by-Fee if the\n+  `-walletrbf` configuration option is set to true. (#15911)\n+\n+GUI changes\n+-----------\n+\n+- Provides bech32 addresses by default.  The user may change the address\n+  during invoice generation using a GUI toggle, or the default address\n+  type may be changed by the `-addresstype` configuration option.\n+  (#15711, #16497)\n+\n+Deprecated or removed configuration options\n+-------------------------------------------\n+\n+- `-mempoolreplacement` is removed, although default node behavior\n+  remains the same.  This option previously allowed the user to prevent\n+  the node from accepting or relaying BIP125 transaction replacements.\n+  This is different from the remaining configuration option\n+  `-walletrbf`. (#16171)\n+\n+Deprecated or removed RPCs\n+--------------------------\n+\n+- `bumpfee` no longer accepts a `totalFee` option unless the\n+  configuration parameter `deprecatedrpc=totalFee` is specified.  This\n+  parameter will be fully removed in a subsequent release. (#15996)\n+\n+- `generate` is now removed after being deprecated in Bitcoin Core 0.18.\n+  Use the `generatetoaddress` RPC instead. (#15492)\n+\n+P2P changes\n+-----------\n+\n+- BIP 61 reject messages were deprecated in v0.18. They are now disabled\n+  by default, but can be enabled by setting the `-enablebip61` command\n+  line option.  BIP 61 reject messages will be removed entirely in a\n+  future version of Bitcoin Core. (#14054)\n+\n+- To eliminate well-known denial-of-service vectors in Bitcoin Core,\n+  especially for nodes with spinning disks, the default value for the\n+  `-peerbloomfilters` configuration option has been changed to false.\n+  This prevents Bitcoin Core from sending the BIP111 NODE_BLOOM service\n+  flag, accepting BIP37 bloom filters, or serving merkle blocks or\n+  transactions matching a bloom filter.  Users who still want to provide\n+  bloom filter support may either set the configuration option to true\n+  to re-enable both BIP111 and BIP37 support or enable just BIP37\n+  support for specific peers using the updated `-whitelist` and\n+  `-whitebind` configuration options described elsewhere in these\n+  release notes.  For the near future, lightweight clients using public\n+  BIP111/BIP37 nodes should still be able to connect to older versions\n+  of Bitcoin Core and nodes that have manually enabled BIP37 support,\n+  but developers of such software should consider migrating to either\n+  using specific BIP37 nodes or an alternative transaction filtering\n+  system. (#16152)\n+\n+Miscellaneous CLI Changes\n+-------------------------\n+\n+- The `testnet` field in `bitcoin-cli -getinfo` has been renamed to\n+  `chain` and now returns the current network name as defined in BIP70\n+  (main, test, regtest). (#15566)\n \n Low-level changes\n =================\n \n+RPC\n+---\n+\n+- `getblockchaininfo` no longer returns a `bip9_softforks` object.\n+  Instead, information has been moved into the `softforks` object and\n+  an additional `type` field describes how Bitcoin Core determines\n+  whether that soft fork is active (e.g. BIP9 or BIP90).  See the RPC\n+  help for details. (#16060)\n+\n+- `getblocktemplate` no longer returns a `rules` array containing `CSV`\n+  and `segwit` (the BIP9 deployments that are currently in active\n+  state). (#16060)\n+\n+- `getrpcinfo` now returns a `logpath` field with the path to\n+  `debug.log`. (#15483)\n+\n+Tests\n+-----\n+\n+- The regression test chain enabled by the `-regtest` command line flag\n+  now requires transactions to not violate standard policy by default.\n+  This is the same default used for mainnet and makes it easier to test\n+  mainnet behavior on regtest. Note that the testnet still allows\n+  non-standard txs by default and that the policy can be locally\n+  adjusted with the `-acceptnonstdtxn` command line flag for both test\n+  chains. (#15891)\n+\n Configuration\n ------------\n \n-- An error is issued where previously a warning was issued when a setting in\n-  the config file was specified in the default section, but not overridden for\n-  the selected network. This change takes only effect if the selected network\n-  is not mainnet.\n+- A setting specified in the default section but not also specified in a\n+  network-specific section (e.g. testnet) will now produce a error\n+  preventing startup instead of just a warning unless the network is\n+  mainnet.  This prevents settings intended for mainnet from being\n+  applied to testnet or regtest. (#15629)\n+\n+- On platforms supporting `thread_local`, log lines can be prefixed with\n+  the name of the thread that caused the log. To enable this behavior,\n+  use `-logthreadnames=1`. (#15849)\n \n Network\n -------\n@@ -120,17 +291,81 @@ Network\n   peers' announcements were received.  In this release, the download logic has\n   changed to randomize the fetch order across peers and to prefer sending\n   download requests to outbound peers over inbound peers. This fixes an issue\n-  where inbound peers can prevent a node from getting a transaction.\n+  where inbound peers could prevent a node from getting a transaction.\n+  (#14897, #15834)\n+\n+- If a Tor hidden service is being used, Bitcoin Core will be bound to\n+  the standard port 8333 even if a different port is configured for\n+  clearnet connections.  This prevents leaking node identity through use\n+  of identical non-default port numbers. (#15651)\n+\n+Mempool and transaction relay\n+-----------------------------\n+\n+- Allows one extra single-ancestor transaction per package.  Previously,\n+  if a transaction in the mempool had 25 descendants, or it and all of\n+  its descendants were over 101,000 vbytes, any newly-received\n+  transaction that was also a descendant would be ignored.  Now, one\n+  extra descendant will be allowed provided it is an immediate\n+  descendant (child) and the child's size is 10,000 vbytes or less.\n+  This makes it possible for two-party contract protocols such as\n+  Lightning Network to give each participant an output they can spend\n+  immediately for Child-Pays-For-Parent (CPFP) fee bumping without\n+  allowing one malicious participant to fill the entire package and thus\n+  prevent the other participant from spending their output. (#15681)\n+\n+- Transactions with outputs paying v1 to v16 witness versions (future\n+  segwit versions) are now accepted into the mempool, relayed, and\n+  mined.  Attempting to spend those outputs remains forbidden by policy\n+  (\"non-standard\").  When this change has been widely deployed, wallets\n+  and services can accept any valid bech32 Bitcoin address without\n+  concern that transactions paying future segwit versions will become\n+  stuck in an unconfirmed state. (#15846)\n+\n+- Legacy transactions (transactions with no segwit inputs) must now be\n+  sent using the legacy encoding format, enforcing the rule specified in\n+  BIP144.  (#14039)\n \n Wallet\n ------\n \n - When in pruned mode, a rescan that was triggered by an `importwallet`,\n-  `importpubkey`, `importaddress`, or `importprivkey` RPC will only fail when\n-  blocks have been pruned. Previously it would fail when `-prune` has been set.\n-  This change allows to set `-prune` to a high value (e.g. the disk size) and\n-  the calls to any of the import RPCs would fail when the first block is\n-  pruned.\n+  `importpubkey`, `importaddress`, or `importprivkey` RPC will only fail\n+  when blocks have been pruned. Previously it would fail when `-prune`\n+  has been set.  This change allows setting `-prune` to a high value\n+  (e.g. the disk size) without the calls to any of the import RPCs\n+  failing until the first block is pruned. (#15870)\n+\n+- When creating a transaction with a fee above `-maxtxfee` (default 0.1\n+  BTC), the RPC commands `walletcreatefundedpsbt` and\n+  `fundrawtransaction` will now fail instead of rounding down the fee.\n+  Be aware that the `feeRate` argument is specified in BTC per 1,000\n+  vbytes, not satoshi per vbyte. (#16257)\n+\n+- A new wallet flag `avoid_reuse` has been added (default off). When\n+  enabled, a wallet will distinguish between used and unused addresses,\n+  and default to not use the former in coin selection.  When setting\n+  this flag on an existing wallet, rescanning the blockchain is required\n+  to correctly mark previously used destinations.  Together with \"avoid\n+  partial spends\" (added in Bitcoin Core v0.17.0), this can eliminate a\n+  serious privacy issue where a malicious user can track spends by\n+  sending small payments to a previously-paid address that would then\n+  be included with unrelated inputs in future payments. (#13756)\n+\n+Build system changes\n+--------------------\n+\n+- Python >=3.5 is now required by all aspects of the project. This\n+  includes the build systems, test framework and linters. The previously\n+  supported minimum (3.4), was EOL in March 2019. (#14954)\n+\n+- The minimum supported miniUPnPc API version is set to 10. This keeps\n+  compatibility with Ubuntu 16.04 LTS and Debian 8 `libminiupnpc-dev`\n+  packages. Please note, on Debian this package is still vulnerable to\n+  [CVE-2017-8798](https://security-tracker.debian.org/tracker/CVE-2017-8798)\n+  (in jessie only) and\n+  [CVE-2017-1000494](https://security-tracker.debian.org/tracker/CVE-2017-1000494)\n+  (both in jessie and in stretch). (#15993)\n \n Credits\n ======="
      },
      {
        "sha": "483cc5075e71ad20ab5fee41d8198cffe5e3b2c5",
        "filename": "doc/release-notes/release-notes-0.18.1.md",
        "status": "added",
        "additions": 136,
        "deletions": 0,
        "changes": 136,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/doc/release-notes/release-notes-0.18.1.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/doc/release-notes/release-notes-0.18.1.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.18.1.md?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -0,0 +1,136 @@\n+Bitcoin Core version 0.18.1 is now available from:\n+\n+  <https://bitcoincore.org/bin/bitcoin-core-0.18.1/>\n+\n+This is a new minor version release, including new features, various bug\n+fixes and performance improvements, as well as updated translations.\n+\n+Please report bugs using the issue tracker at GitHub:\n+\n+  <https://github.com/bitcoin/bitcoin/issues>\n+\n+To receive security and update notifications, please subscribe to:\n+\n+  <https://bitcoincore.org/en/list/announcements/join/>\n+\n+How to Upgrade\n+==============\n+\n+If you are running an older version, shut it down. Wait until it has\n+completely shut down (which might take a few minutes for older\n+versions), then run the installer (on Windows) or just copy over\n+`/Applications/Bitcoin-Qt` (on Mac) or `bitcoind`/`bitcoin-qt` (on\n+Linux).\n+\n+The first time you run version 0.15.0 or newer, your chainstate database\n+will be converted to a new format, which will take anywhere from a few\n+minutes to half an hour, depending on the speed of your machine.\n+\n+Note that the block database format also changed in version 0.8.0 and\n+there is no automatic upgrade code from before version 0.8 to version\n+0.15.0 or later. Upgrading directly from 0.7.x and earlier without\n+redownloading the blockchain is not supported.  However, as usual, old\n+wallet versions are still supported.\n+\n+Compatibility\n+==============\n+\n+Bitcoin Core is supported and extensively tested on operating systems\n+using the Linux kernel, macOS 10.10+, and Windows 7 and newer. It is not\n+recommended to use Bitcoin Core on unsupported systems.\n+\n+Bitcoin Core should also work on most other Unix-like systems but is not\n+as frequently tested on them.\n+\n+From 0.17.0 onwards, macOS <10.10 is no longer supported. 0.17.0 is\n+built using Qt 5.9.x, which doesn't support versions of macOS older than\n+10.10. Additionally, Bitcoin Core does not yet change appearance when\n+macOS \"dark mode\" is activated.\n+\n+Known issues\n+============\n+\n+Wallet GUI\n+----------\n+\n+For advanced users who have both (1) enabled coin control features, and\n+(2) are using multiple wallets loaded at the same time: The coin control\n+input selection dialog can erroneously retain wrong-wallet state when\n+switching wallets using the dropdown menu. For now, it is recommended\n+not to use coin control features with multiple wallets loaded.\n+\n+0.18.1 change log\n+=================\n+\n+### P2P protocol and network code\n+- #15990 Add tests and documentation for blocksonly (MarcoFalke)\n+- #16021 Avoid logging transaction decode errors to stderr (MarcoFalke)\n+- #16405 fix: tor: Call `event_base_loopbreak` from the event's callback (promag)\n+- #16412 Make poll in InterruptibleRecv only filter for POLLIN events (tecnovert)\n+\n+### Wallet\n+- #15913 Add -ignorepartialspends to list of ignored wallet options (luke-jr)\n+\n+### RPC and other APIs\n+- #15991 Bugfix: fix pruneblockchain returned prune height (jonasschnelli)\n+- #15899 Document iswitness flag and fix bug in converttopsbt (MarcoFalke)\n+- #16026 Ensure that uncompressed public keys in a multisig always returns a legacy address (achow101)\n+- #14039 Disallow extended encoding for non-witness transactions (sipa)\n+- #16210 add 2nd arg to signrawtransactionwithkey examples (dooglus)\n+- #16250 signrawtransactionwithkey: report error when missing redeemScript/witnessScript (ajtowns)\n+\n+### GUI\n+- #16044 fix the bug of OPEN CONFIGURATION FILE on Mac (shannon1916)\n+- #15957 Show \"No wallets available\" in open menu instead of nothing (meshcollider)\n+- #16118 Enable open wallet menu on setWalletController (promag)\n+- #16135 Set progressDialog to nullptr (promag)\n+- #16231 Fix open wallet menu initialization order (promag) \n+- #16254 Set `AA_EnableHighDpiScaling` attribute early (hebasto) \n+- #16122 Enable console line edit on setClientModel (promag) \n+- #16348 Assert QMetaObject::invokeMethod result (promag)\n+\n+### Build system\n+- #15985 Add test for GCC bug 90348 (sipa)\n+- #15947 Install bitcoin-wallet manpage (domob1812)\n+- #15983 build with -fstack-reuse=none (MarcoFalke)\n+\n+### Tests and QA\n+- #15826 Pure python EC (sipa)\n+- #15893 Add test for superfluous witness record in deserialization (instagibbs)\n+- #14818 Bugfix: test/functional/rpc_psbt: Remove check for specific error message that depends on uncertain assumptions (luke-jr)\n+- #15831 Add test that addmultisigaddress fails for watchonly addresses (MarcoFalke)\n+\n+### Documentation\n+- #15890 Remove text about txes always relayed from -whitelist (harding)\n+\n+### Miscellaneous\n+- #16095 Catch by reference not value in wallettool (kristapsk)\n+- #16205 Replace fprintf with tfm::format (MarcoFalke)\n+\n+Credits\n+=======\n+\n+Thanks to everyone who directly contributed to this release:\n+\n+- Andrew Chow\n+- Anthony Towns\n+- Chris Moore\n+- Daniel Kraft\n+- David A. Harding\n+- fanquake\n+- Gregory Sanders\n+- Hennadii Stepanov\n+- John Newbery\n+- Jonas Schnelli\n+- Jo\u00e3o Barbosa\n+- Kristaps Kaupe\n+- Luke Dashjr\n+- MarcoFalke\n+- Michele Federici\n+- Pieter Wuille\n+- Samuel Dobson\n+- shannon1916\n+- tecnovert\n+- Wladimir J. van der Laan\n+\n+As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/)."
      },
      {
        "sha": "709d8b002b75b90467f2f383267963dec7b75459",
        "filename": "share/examples/bitcoin.conf",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/share/examples/bitcoin.conf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/share/examples/bitcoin.conf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/examples/bitcoin.conf?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -70,8 +70,8 @@\n # server=1 tells Bitcoin-Qt and bitcoind to accept JSON-RPC commands\n #server=0\n \n-# Bind to given address to listen for JSON-RPC connections. Use [host]:port notation for IPv6.\n-# This option can be specified multiple times (default: bind to all interfaces)\n+# Bind to given address to listen for JSON-RPC connections.\n+# Refer to the manpage or bitcoind -help for further details.\n #rpcbind=<addr>\n \n # If no rpcpassword is set, rpc cookie auth is sought. The default `-rpccookiefile` name"
      },
      {
        "sha": "cd6214d5fab259ecc8e9cbaa883c35dd06e31b39",
        "filename": "share/genbuild.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/share/genbuild.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/share/genbuild.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/genbuild.sh?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -24,9 +24,9 @@ git_check_in_repo() {\n \n DESC=\"\"\n SUFFIX=\"\"\n-if [ \"${BITCOIN_GENBUILD_NO_GIT}\" != \"1\" -a -e \"$(which git 2>/dev/null)\" -a \"$(git rev-parse --is-inside-work-tree 2>/dev/null)\" = \"true\" ] && git_check_in_repo share/genbuild.sh; then\n+if [ \"${BITCOIN_GENBUILD_NO_GIT}\" != \"1\" ] && [ -e \"$(command -v git)\" ] && [ \"$(git rev-parse --is-inside-work-tree 2>/dev/null)\" = \"true\" ] && git_check_in_repo share/genbuild.sh; then\n     # clean 'dirty' status of touched files that haven't been modified\n-    git diff >/dev/null 2>/dev/null \n+    git diff >/dev/null 2>/dev/null\n \n     # if latest commit is tagged and not dirty, then override using the tag name\n     RAWDESC=$(git describe --abbrev=0 2>/dev/null)"
      },
      {
        "sha": "3cc0fa1b1dda1adb2253b6fbcc36abea400f1bdf",
        "filename": "share/qt/extract_strings_qt.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/share/qt/extract_strings_qt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/share/qt/extract_strings_qt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/qt/extract_strings_qt.py?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -76,10 +76,7 @@ def parse_po(text):\n #endif\n \"\"\")\n f.write('static const char UNUSED *bitcoin_strings[] = {\\n')\n-f.write('QT_TRANSLATE_NOOP(\"bitcoin-core\", \"%s\"),\\n' % (os.getenv('PACKAGE_NAME'),))\n f.write('QT_TRANSLATE_NOOP(\"bitcoin-core\", \"%s\"),\\n' % (os.getenv('COPYRIGHT_HOLDERS'),))\n-if os.getenv('COPYRIGHT_HOLDERS_SUBSTITUTION') != os.getenv('PACKAGE_NAME'):\n-    f.write('QT_TRANSLATE_NOOP(\"bitcoin-core\", \"%s\"),\\n' % (os.getenv('COPYRIGHT_HOLDERS_SUBSTITUTION'),))\n messages.sort(key=operator.itemgetter(0))\n for (msgid, msgstr) in messages:\n     if msgid != EMPTY:"
      },
      {
        "sha": "477b1300bc6513f45214910bd7a40e003fc82c83",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 15,
        "deletions": 6,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -143,14 +143,14 @@ BITCOIN_CORE_H = \\\n   interfaces/wallet.h \\\n   key.h \\\n   key_io.h \\\n-  keystore.h \\\n   dbwrapper.h \\\n   limitedmap.h \\\n   logging.h \\\n   memusage.h \\\n   merkleblock.h \\\n   miner.h \\\n   net.h \\\n+  net_permissions.h \\\n   net_processing.h \\\n   netaddress.h \\\n   netbase.h \\\n@@ -175,14 +175,17 @@ BITCOIN_CORE_H = \\\n   rpc/blockchain.h \\\n   rpc/client.h \\\n   rpc/protocol.h \\\n-  rpc/server.h \\\n   rpc/rawtransaction_util.h \\\n   rpc/register.h \\\n+  rpc/request.h \\\n+  rpc/server.h \\\n   rpc/util.h \\\n   scheduler.h \\\n   script/descriptor.h \\\n+  script/keyorigin.h \\\n   script/sigcache.h \\\n   script/sign.h \\\n+  script/signingprovider.h \\\n   script/standard.h \\\n   shutdown.h \\\n   streams.h \\\n@@ -208,8 +211,10 @@ BITCOIN_CORE_H = \\\n   util/memory.h \\\n   util/moneystr.h \\\n   util/rbf.h \\\n+  util/string.h \\\n   util/threadnames.h \\\n   util/time.h \\\n+  util/translation.h \\\n   util/url.h \\\n   util/validation.h \\\n   validation.h \\\n@@ -307,7 +312,7 @@ libbitcoin_server_a_SOURCES += dummywallet.cpp\n endif\n \n if ENABLE_ZMQ\n-libbitcoin_zmq_a_CPPFLAGS = $(BITCOIN_INCLUDES) $(ZMQ_CFLAGS)\n+libbitcoin_zmq_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(ZMQ_CFLAGS)\n libbitcoin_zmq_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libbitcoin_zmq_a_SOURCES = \\\n   zmq/zmqabstractnotifier.cpp \\\n@@ -351,6 +356,8 @@ crypto_libbitcoin_crypto_base_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n crypto_libbitcoin_crypto_base_a_SOURCES = \\\n   crypto/aes.cpp \\\n   crypto/aes.h \\\n+  crypto/chacha_poly_aead.h \\\n+  crypto/chacha_poly_aead.cpp \\\n   crypto/chacha20.h \\\n   crypto/chacha20.cpp \\\n   crypto/common.h \\\n@@ -446,10 +453,10 @@ libbitcoin_common_a_SOURCES = \\\n   core_write.cpp \\\n   key.cpp \\\n   key_io.cpp \\\n-  keystore.cpp \\\n   merkleblock.cpp \\\n   netaddress.cpp \\\n   netbase.cpp \\\n+  net_permissions.cpp \\\n   outputtype.cpp \\\n   policy/feerate.cpp \\\n   policy/policy.cpp \\\n@@ -460,6 +467,7 @@ libbitcoin_common_a_SOURCES = \\\n   scheduler.cpp \\\n   script/descriptor.cpp \\\n   script/sign.cpp \\\n+  script/signingprovider.cpp \\\n   script/standard.cpp \\\n   versionbitsinfo.cpp \\\n   warnings.cpp \\\n@@ -481,7 +489,7 @@ libbitcoin_util_a_SOURCES = \\\n   interfaces/handler.cpp \\\n   logging.cpp \\\n   random.cpp \\\n-  rpc/protocol.cpp \\\n+  rpc/request.cpp \\\n   support/cleanse.cpp \\\n   sync.cpp \\\n   threadinterrupt.cpp \\\n@@ -494,6 +502,7 @@ libbitcoin_util_a_SOURCES = \\\n   util/rbf.cpp \\\n   util/threadnames.cpp \\\n   util/strencodings.cpp \\\n+  util/string.cpp \\\n   util/time.cpp \\\n   util/url.cpp \\\n   util/validation.cpp \\\n@@ -613,7 +622,7 @@ bitcoin_wallet_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(CRYPTO_LIBS) $(EVENT_PTHREAD\n # bitcoinconsensus library #\n if BUILD_BITCOIN_LIBS\n include_HEADERS = script/bitcoinconsensus.h\n-libbitcoinconsensus_la_SOURCES = $(crypto_libbitcoin_crypto_base_a_SOURCES) $(libbitcoin_consensus_a_SOURCES)\n+libbitcoinconsensus_la_SOURCES = support/cleanse.cpp $(crypto_libbitcoin_crypto_base_a_SOURCES) $(libbitcoin_consensus_a_SOURCES)\n \n if GLIBC_BACK_COMPAT\n   libbitcoinconsensus_la_SOURCES += compat/glibc_compat.cpp"
      },
      {
        "sha": "e421b377a0ce0b98f780ba206d4fb8f020da4694",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -18,15 +18,19 @@ bench_bench_bitcoin_SOURCES = \\\n   bench/block_assemble.cpp \\\n   bench/checkblock.cpp \\\n   bench/checkqueue.cpp \\\n+  bench/data.h \\\n+  bench/data.cpp \\\n   bench/duplicate_inputs.cpp \\\n   bench/examples.cpp \\\n   bench/rollingbloom.cpp \\\n   bench/chacha20.cpp \\\n+  bench/chacha_poly_aead.cpp \\\n   bench/crypto_hash.cpp \\\n   bench/ccoins_caching.cpp \\\n   bench/gcs_filter.cpp \\\n   bench/merkle_root.cpp \\\n   bench/mempool_eviction.cpp \\\n+  bench/rpc_blockchain.cpp \\\n   bench/rpc_mempool.cpp \\\n   bench/util_time.cpp \\\n   bench/verify_script.cpp \\\n@@ -76,7 +80,7 @@ CLEAN_BITCOIN_BENCH = bench/*.gcda bench/*.gcno $(GENERATED_BENCH_FILES)\n \n CLEANFILES += $(CLEAN_BITCOIN_BENCH)\n \n-bench/checkblock.cpp: bench/data/block413567.raw.h\n+bench/data.cpp: bench/data/block413567.raw.h\n \n bitcoin_bench: $(BENCH_BINARY)\n \n@@ -89,7 +93,7 @@ bitcoin_bench_clean : FORCE\n %.raw.h: %.raw\n \t@$(MKDIR_P) $(@D)\n \t@{ \\\n-\t echo \"static unsigned const char $(*F)[] = {\" && \\\n+\t echo \"static unsigned const char $(*F)_raw[] = {\" && \\\n \t $(HEXDUMP) -v -e '8/1 \"0x%02x, \"' -e '\"\\n\"' $< | $(SED) -e 's/0x  ,//g' && \\\n \t echo \"};\"; \\\n \t} > \"$@.new\" && mv -f \"$@.new\" \"$@\""
      },
      {
        "sha": "6d8faf3883f1cd5cb5aa8cd155ff7c596969b33b",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 2,
        "deletions": 12,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -250,8 +250,6 @@ BITCOIN_QT_H = \\\n RES_ICONS = \\\n   qt/res/icons/add.png \\\n   qt/res/icons/address-book.png \\\n-  qt/res/icons/about.png \\\n-  qt/res/icons/about_qt.png \\\n   qt/res/icons/bitcoin.ico \\\n   qt/res/icons/bitcoin_testnet.ico \\\n   qt/res/icons/bitcoin.png \\\n@@ -261,35 +259,28 @@ RES_ICONS = \\\n   qt/res/icons/clock3.png \\\n   qt/res/icons/clock4.png \\\n   qt/res/icons/clock5.png \\\n-  qt/res/icons/configure.png \\\n   qt/res/icons/connect0.png \\\n   qt/res/icons/connect1.png \\\n   qt/res/icons/connect2.png \\\n   qt/res/icons/connect3.png \\\n   qt/res/icons/connect4.png \\\n-  qt/res/icons/debugwindow.png \\\n   qt/res/icons/edit.png \\\n   qt/res/icons/editcopy.png \\\n   qt/res/icons/editpaste.png \\\n   qt/res/icons/export.png \\\n   qt/res/icons/eye.png \\\n   qt/res/icons/eye_minus.png \\\n   qt/res/icons/eye_plus.png \\\n-  qt/res/icons/filesave.png \\\n   qt/res/icons/fontbigger.png \\\n   qt/res/icons/fontsmaller.png \\\n   qt/res/icons/hd_disabled.png \\\n   qt/res/icons/hd_enabled.png \\\n   qt/res/icons/history.png \\\n-  qt/res/icons/info.png \\\n-  qt/res/icons/key.png \\\n   qt/res/icons/lock_closed.png \\\n   qt/res/icons/lock_open.png \\\n   qt/res/icons/network_disabled.png \\\n-  qt/res/icons/open.png \\\n   qt/res/icons/overview.png \\\n   qt/res/icons/proxy.png \\\n-  qt/res/icons/quit.png \\\n   qt/res/icons/receive.png \\\n   qt/res/icons/remove.png \\\n   qt/res/icons/send.png \\\n@@ -302,8 +293,7 @@ RES_ICONS = \\\n   qt/res/icons/tx_input.png \\\n   qt/res/icons/tx_output.png \\\n   qt/res/icons/tx_mined.png \\\n-  qt/res/icons/warning.png \\\n-  qt/res/icons/verify.png\n+  qt/res/icons/warning.png\n \n BITCOIN_QT_BASE_CPP = \\\n   qt/bantablemodel.cpp \\\n@@ -447,7 +437,7 @@ SECONDARY: $(QT_QM)\n \n $(srcdir)/qt/bitcoinstrings.cpp: $(libbitcoin_server_a_SOURCES) $(libbitcoin_wallet_a_SOURCES) $(libbitcoin_common_a_SOURCES) $(libbitcoin_zmq_a_SOURCES) $(libbitcoin_consensus_a_SOURCES) $(libbitcoin_util_a_SOURCES)\n \t@test -n $(XGETTEXT) || echo \"xgettext is required for updating translations\"\n-\t$(AM_V_GEN) cd $(srcdir); XGETTEXT=$(XGETTEXT) PACKAGE_NAME=\"$(PACKAGE_NAME)\" COPYRIGHT_HOLDERS=\"$(COPYRIGHT_HOLDERS)\" COPYRIGHT_HOLDERS_SUBSTITUTION=\"$(COPYRIGHT_HOLDERS_SUBSTITUTION)\" $(PYTHON) ../share/qt/extract_strings_qt.py $^\n+\t$(AM_V_GEN) cd $(srcdir); XGETTEXT=$(XGETTEXT) COPYRIGHT_HOLDERS=\"$(COPYRIGHT_HOLDERS)\" $(PYTHON) ../share/qt/extract_strings_qt.py $^\n \n translate: $(srcdir)/qt/bitcoinstrings.cpp $(QT_FORMS_UI) $(QT_FORMS_UI) $(BITCOIN_QT_BASE_CPP) qt/bitcoin.cpp $(BITCOIN_QT_WINDOWS_CPP) $(BITCOIN_QT_WALLET_CPP) $(BITCOIN_QT_H) $(BITCOIN_MM)\n \t@test -n $(LUPDATE) || echo \"lupdate is required for updating translations\""
      },
      {
        "sha": "db936486b64f219302ece6b0b35c96b0966718ce",
        "filename": "src/addrdb.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 4,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/addrdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/addrdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -44,18 +44,30 @@ bool SerializeFileDB(const std::string& prefix, const fs::path& path, const Data\n     fs::path pathTmp = GetDataDir() / tmpfn;\n     FILE *file = fsbridge::fopen(pathTmp, \"wb\");\n     CAutoFile fileout(file, SER_DISK, CLIENT_VERSION);\n-    if (fileout.IsNull())\n+    if (fileout.IsNull()) {\n+        fileout.fclose();\n+        remove(pathTmp);\n         return error(\"%s: Failed to open file %s\", __func__, pathTmp.string());\n+    }\n \n     // Serialize\n-    if (!SerializeDB(fileout, data)) return false;\n-    if (!FileCommit(fileout.Get()))\n+    if (!SerializeDB(fileout, data)) {\n+        fileout.fclose();\n+        remove(pathTmp);\n+        return false;\n+    }\n+    if (!FileCommit(fileout.Get())) {\n+        fileout.fclose();\n+        remove(pathTmp);\n         return error(\"%s: Failed to flush file %s\", __func__, pathTmp.string());\n+    }\n     fileout.fclose();\n \n     // replace existing file, if any, with new file\n-    if (!RenameOver(pathTmp, path))\n+    if (!RenameOver(pathTmp, path)) {\n+        remove(pathTmp);\n         return error(\"%s: Rename-into-place failed\", __func__);\n+    }\n \n     return true;\n }"
      },
      {
        "sha": "37fca7dd82aaec1e5012d0520672bd78c79d495a",
        "filename": "src/banman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/banman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/banman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/banman.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -9,12 +9,13 @@\n #include <ui_interface.h>\n #include <util/system.h>\n #include <util/time.h>\n+#include <util/translation.h>\n \n \n BanMan::BanMan(fs::path ban_file, CClientUIInterface* client_interface, int64_t default_ban_time)\n     : m_client_interface(client_interface), m_ban_db(std::move(ban_file)), m_default_ban_time(default_ban_time)\n {\n-    if (m_client_interface) m_client_interface->InitMessage(_(\"Loading banlist...\"));\n+    if (m_client_interface) m_client_interface->InitMessage(_(\"Loading banlist...\").translated);\n \n     int64_t n_start = GetTimeMillis();\n     m_is_dirty = false;"
      },
      {
        "sha": "d0d7c03ee177a782611db5f9984fa76856ea8568",
        "filename": "src/bench/bench_bitcoin.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/bench/bench_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/bench/bench_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench_bitcoin.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -21,14 +21,14 @@ static void SetupBenchArgs()\n {\n     SetupHelpOptions(gArgs);\n \n-    gArgs.AddArg(\"-list\", \"List benchmarks without executing them. Can be combined with -scaling and -filter\", false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-evals=<n>\", strprintf(\"Number of measurement evaluations to perform. (default: %u)\", DEFAULT_BENCH_EVALUATIONS), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-filter=<regex>\", strprintf(\"Regular expression filter to select benchmark by name (default: %s)\", DEFAULT_BENCH_FILTER), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-scaling=<n>\", strprintf(\"Scaling factor for benchmark's runtime (default: %u)\", DEFAULT_BENCH_SCALING), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-printer=(console|plot)\", strprintf(\"Choose printer format. console: print data to console. plot: Print results as HTML graph (default: %s)\", DEFAULT_BENCH_PRINTER), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-plot-plotlyurl=<uri>\", strprintf(\"URL to use for plotly.js (default: %s)\", DEFAULT_PLOT_PLOTLYURL), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-plot-width=<x>\", strprintf(\"Plot width in pixel (default: %u)\", DEFAULT_PLOT_WIDTH), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-plot-height=<x>\", strprintf(\"Plot height in pixel (default: %u)\", DEFAULT_PLOT_HEIGHT), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-list\", \"List benchmarks without executing them. Can be combined with -scaling and -filter\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-evals=<n>\", strprintf(\"Number of measurement evaluations to perform. (default: %u)\", DEFAULT_BENCH_EVALUATIONS), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-filter=<regex>\", strprintf(\"Regular expression filter to select benchmark by name (default: %s)\", DEFAULT_BENCH_FILTER), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-scaling=<n>\", strprintf(\"Scaling factor for benchmark's runtime (default: %u)\", DEFAULT_BENCH_SCALING), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-printer=(console|plot)\", strprintf(\"Choose printer format. console: print data to console. plot: Print results as HTML graph (default: %s)\", DEFAULT_BENCH_PRINTER), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-plot-plotlyurl=<uri>\", strprintf(\"URL to use for plotly.js (default: %s)\", DEFAULT_PLOT_PLOTLYURL), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-plot-width=<x>\", strprintf(\"Plot width in pixel (default: %u)\", DEFAULT_PLOT_WIDTH), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-plot-height=<x>\", strprintf(\"Plot height in pixel (default: %u)\", DEFAULT_PLOT_HEIGHT), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n }\n \n int main(int argc, char** argv)"
      },
      {
        "sha": "39cab092cf6f0f2abb8b252772a568240c7395a6",
        "filename": "src/bench/ccoins_caching.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/bench/ccoins_caching.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/bench/ccoins_caching.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/ccoins_caching.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -5,7 +5,7 @@\n #include <bench/bench.h>\n #include <coins.h>\n #include <policy/policy.h>\n-#include <wallet/crypter.h>\n+#include <script/signingprovider.h>\n \n #include <vector>\n \n@@ -17,7 +17,7 @@\n // paid to a TX_PUBKEYHASH.\n //\n static std::vector<CMutableTransaction>\n-SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsViewCache& coinsRet)\n+SetupDummyInputs(FillableSigningProvider& keystoreRet, CCoinsViewCache& coinsRet)\n {\n     std::vector<CMutableTransaction> dummyTransactions;\n     dummyTransactions.resize(2);\n@@ -55,7 +55,7 @@ SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsViewCache& coinsRet)\n // (https://github.com/bitcoin/bitcoin/issues/7883#issuecomment-224807484)\n static void CCoinsCaching(benchmark::State& state)\n {\n-    CBasicKeyStore keystore;\n+    FillableSigningProvider keystore;\n     CCoinsView coinsDummy;\n     CCoinsViewCache coins(&coinsDummy);\n     std::vector<CMutableTransaction> dummyTransactions = SetupDummyInputs(keystore, coins);"
      },
      {
        "sha": "f5f729749042aa9f72234238935ec0b93ac21798",
        "filename": "src/bench/chacha_poly_aead.cpp",
        "status": "added",
        "additions": 123,
        "deletions": 0,
        "changes": 123,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/bench/chacha_poly_aead.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/bench/chacha_poly_aead.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/chacha_poly_aead.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -0,0 +1,123 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <iostream>\n+\n+#include <bench/bench.h>\n+#include <crypto/chacha_poly_aead.h>\n+#include <crypto/poly1305.h> // for the POLY1305_TAGLEN constant\n+#include <hash.h>\n+\n+#include <limits>\n+#include <assert.h>\n+\n+/* Number of bytes to process per iteration */\n+static constexpr uint64_t BUFFER_SIZE_TINY = 64;\n+static constexpr uint64_t BUFFER_SIZE_SMALL = 256;\n+static constexpr uint64_t BUFFER_SIZE_LARGE = 1024 * 1024;\n+\n+static const unsigned char k1[32] = {0};\n+static const unsigned char k2[32] = {0};\n+\n+static ChaCha20Poly1305AEAD aead(k1, 32, k2, 32);\n+\n+static void CHACHA20_POLY1305_AEAD(benchmark::State& state, size_t buffersize, bool include_decryption)\n+{\n+    std::vector<unsigned char> in(buffersize + CHACHA20_POLY1305_AEAD_AAD_LEN + POLY1305_TAGLEN, 0);\n+    std::vector<unsigned char> out(buffersize + CHACHA20_POLY1305_AEAD_AAD_LEN + POLY1305_TAGLEN, 0);\n+    uint64_t seqnr_payload = 0;\n+    uint64_t seqnr_aad = 0;\n+    int aad_pos = 0;\n+    uint32_t len = 0;\n+    while (state.KeepRunning()) {\n+        // encrypt or decrypt the buffer with a static key\n+        assert(aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, out.data(), out.size(), in.data(), buffersize, true));\n+\n+        if (include_decryption) {\n+            // if we decrypt, include the GetLength\n+            assert(aead.GetLength(&len, seqnr_aad, aad_pos, in.data()));\n+            assert(aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, out.data(), out.size(), in.data(), buffersize, true));\n+        }\n+\n+        // increase main sequence number\n+        seqnr_payload++;\n+        // increase aad position (position in AAD keystream)\n+        aad_pos += CHACHA20_POLY1305_AEAD_AAD_LEN;\n+        if (aad_pos + CHACHA20_POLY1305_AEAD_AAD_LEN > CHACHA20_ROUND_OUTPUT) {\n+            aad_pos = 0;\n+            seqnr_aad++;\n+        }\n+        if (seqnr_payload + 1 == std::numeric_limits<uint64_t>::max()) {\n+            // reuse of nonce+key is okay while benchmarking.\n+            seqnr_payload = 0;\n+            seqnr_aad = 0;\n+            aad_pos = 0;\n+        }\n+    }\n+}\n+\n+static void CHACHA20_POLY1305_AEAD_64BYTES_ONLY_ENCRYPT(benchmark::State& state)\n+{\n+    CHACHA20_POLY1305_AEAD(state, BUFFER_SIZE_TINY, false);\n+}\n+\n+static void CHACHA20_POLY1305_AEAD_256BYTES_ONLY_ENCRYPT(benchmark::State& state)\n+{\n+    CHACHA20_POLY1305_AEAD(state, BUFFER_SIZE_SMALL, false);\n+}\n+\n+static void CHACHA20_POLY1305_AEAD_1MB_ONLY_ENCRYPT(benchmark::State& state)\n+{\n+    CHACHA20_POLY1305_AEAD(state, BUFFER_SIZE_LARGE, false);\n+}\n+\n+static void CHACHA20_POLY1305_AEAD_64BYTES_ENCRYPT_DECRYPT(benchmark::State& state)\n+{\n+    CHACHA20_POLY1305_AEAD(state, BUFFER_SIZE_TINY, true);\n+}\n+\n+static void CHACHA20_POLY1305_AEAD_256BYTES_ENCRYPT_DECRYPT(benchmark::State& state)\n+{\n+    CHACHA20_POLY1305_AEAD(state, BUFFER_SIZE_SMALL, true);\n+}\n+\n+static void CHACHA20_POLY1305_AEAD_1MB_ENCRYPT_DECRYPT(benchmark::State& state)\n+{\n+    CHACHA20_POLY1305_AEAD(state, BUFFER_SIZE_LARGE, true);\n+}\n+\n+// Add Hash() (dbl-sha256) bench for comparison\n+\n+static void HASH(benchmark::State& state, size_t buffersize)\n+{\n+    uint8_t hash[CHash256::OUTPUT_SIZE];\n+    std::vector<uint8_t> in(buffersize,0);\n+    while (state.KeepRunning())\n+        CHash256().Write(in.data(), in.size()).Finalize(hash);\n+}\n+\n+static void HASH_64BYTES(benchmark::State& state)\n+{\n+    HASH(state, BUFFER_SIZE_TINY);\n+}\n+\n+static void HASH_256BYTES(benchmark::State& state)\n+{\n+    HASH(state, BUFFER_SIZE_SMALL);\n+}\n+\n+static void HASH_1MB(benchmark::State& state)\n+{\n+    HASH(state, BUFFER_SIZE_LARGE);\n+}\n+\n+BENCHMARK(CHACHA20_POLY1305_AEAD_64BYTES_ONLY_ENCRYPT, 500000);\n+BENCHMARK(CHACHA20_POLY1305_AEAD_256BYTES_ONLY_ENCRYPT, 250000);\n+BENCHMARK(CHACHA20_POLY1305_AEAD_1MB_ONLY_ENCRYPT, 340);\n+BENCHMARK(CHACHA20_POLY1305_AEAD_64BYTES_ENCRYPT_DECRYPT, 500000);\n+BENCHMARK(CHACHA20_POLY1305_AEAD_256BYTES_ENCRYPT_DECRYPT, 250000);\n+BENCHMARK(CHACHA20_POLY1305_AEAD_1MB_ENCRYPT_DECRYPT, 340);\n+BENCHMARK(HASH_64BYTES, 500000);\n+BENCHMARK(HASH_256BYTES, 250000);\n+BENCHMARK(HASH_1MB, 340);"
      },
      {
        "sha": "4b13381e161bfde10d244cf5ce8837fcee144457",
        "filename": "src/bench/checkblock.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 12,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/bench/checkblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/bench/checkblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/checkblock.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -3,41 +3,34 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <bench/bench.h>\n+#include <bench/data.h>\n \n #include <chainparams.h>\n #include <validation.h>\n #include <streams.h>\n #include <consensus/validation.h>\n \n-namespace block_bench {\n-#include <bench/data/block413567.raw.h>\n-} // namespace block_bench\n-\n // These are the two major time-sinks which happen after we have fully received\n // a block off the wire, but before we can relay the block on to peers using\n // compact block relay.\n \n static void DeserializeBlockTest(benchmark::State& state)\n {\n-    CDataStream stream((const char*)block_bench::block413567,\n-            (const char*)block_bench::block413567 + sizeof(block_bench::block413567),\n-            SER_NETWORK, PROTOCOL_VERSION);\n+    CDataStream stream(benchmark::data::block413567, SER_NETWORK, PROTOCOL_VERSION);\n     char a = '\\0';\n     stream.write(&a, 1); // Prevent compaction\n \n     while (state.KeepRunning()) {\n         CBlock block;\n         stream >> block;\n-        bool rewound = stream.Rewind(sizeof(block_bench::block413567));\n+        bool rewound = stream.Rewind(benchmark::data::block413567.size());\n         assert(rewound);\n     }\n }\n \n static void DeserializeAndCheckBlockTest(benchmark::State& state)\n {\n-    CDataStream stream((const char*)block_bench::block413567,\n-            (const char*)block_bench::block413567 + sizeof(block_bench::block413567),\n-            SER_NETWORK, PROTOCOL_VERSION);\n+    CDataStream stream(benchmark::data::block413567, SER_NETWORK, PROTOCOL_VERSION);\n     char a = '\\0';\n     stream.write(&a, 1); // Prevent compaction\n \n@@ -46,7 +39,7 @@ static void DeserializeAndCheckBlockTest(benchmark::State& state)\n     while (state.KeepRunning()) {\n         CBlock block; // Note that CBlock caches its checked state, so we need to recreate it here\n         stream >> block;\n-        bool rewound = stream.Rewind(sizeof(block_bench::block413567));\n+        bool rewound = stream.Rewind(benchmark::data::block413567.size());\n         assert(rewound);\n \n         CValidationState validationState;"
      },
      {
        "sha": "0ae4c7cad4dbf34fcafaae757b7c88d654e2ba2c",
        "filename": "src/bench/data.cpp",
        "status": "added",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/bench/data.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/bench/data.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/data.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -0,0 +1,14 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/data.h>\n+\n+namespace benchmark {\n+namespace data {\n+\n+#include <bench/data/block413567.raw.h>\n+const std::vector<uint8_t> block413567{block413567_raw, block413567_raw + sizeof(block413567_raw) / sizeof(block413567_raw[0])};\n+\n+} // namespace data\n+} // namespace benchmark"
      },
      {
        "sha": "5f13d766ea8c74f10eae10abf31d8087dee0095f",
        "filename": "src/bench/data.h",
        "status": "added",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/bench/data.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/bench/data.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/data.h?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -0,0 +1,19 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_BENCH_DATA_H\n+#define BITCOIN_BENCH_DATA_H\n+\n+#include <cstdint>\n+#include <vector>\n+\n+namespace benchmark {\n+namespace data {\n+\n+extern const std::vector<uint8_t> block413567;\n+\n+} // namespace data\n+} // namespace benchmark\n+\n+#endif // BITCOIN_BENCH_DATA_H"
      },
      {
        "sha": "29e448fc43a1b02e89337e7d903b7ba0080851b6",
        "filename": "src/bench/rpc_blockchain.cpp",
        "status": "added",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/bench/rpc_blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/bench/rpc_blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/rpc_blockchain.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -0,0 +1,33 @@\n+// Copyright (c) 2016-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+#include <bench/data.h>\n+\n+#include <validation.h>\n+#include <streams.h>\n+#include <consensus/validation.h>\n+#include <rpc/blockchain.h>\n+\n+#include <univalue.h>\n+\n+static void BlockToJsonVerbose(benchmark::State& state) {\n+    CDataStream stream(benchmark::data::block413567, SER_NETWORK, PROTOCOL_VERSION);\n+    char a = '\\0';\n+    stream.write(&a, 1); // Prevent compaction\n+\n+    CBlock block;\n+    stream >> block;\n+\n+    CBlockIndex blockindex;\n+    const uint256 blockHash = block.GetHash();\n+    blockindex.phashBlock = &blockHash;\n+    blockindex.nBits = 403014710;\n+\n+    while (state.KeepRunning()) {\n+        (void)blockToJSON(block, &blockindex, &blockindex, /*verbose*/ true);\n+    }\n+}\n+\n+BENCHMARK(BlockToJsonVerbose, 10);"
      },
      {
        "sha": "cde624ce746964c64bd4b9a8e5be4afed354f46c",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 17,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -12,9 +12,12 @@\n #include <fs.h>\n #include <rpc/client.h>\n #include <rpc/protocol.h>\n-#include <util/system.h>\n+#include <rpc/request.h>\n #include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n \n+#include <functional>\n #include <memory>\n #include <stdio.h>\n #include <tuple>\n@@ -40,22 +43,22 @@ static void SetupCliArgs()\n     const auto testnetBaseParams = CreateBaseChainParams(CBaseChainParams::TESTNET);\n     const auto regtestBaseParams = CreateBaseChainParams(CBaseChainParams::REGTEST);\n \n-    gArgs.AddArg(\"-version\", \"Print version and exit\", false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-conf=<file>\", strprintf(\"Specify configuration file. Relative paths will be prefixed by datadir location. (default: %s)\", BITCOIN_CONF_FILENAME), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-datadir=<dir>\", \"Specify data directory\", false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-getinfo\", \"Get general information from the remote server. Note that unlike server-side RPC calls, the results of -getinfo is the result of multiple non-atomic requests. Some entries in the result may represent results from different states (e.g. wallet balance may be as of a different block from the chain state reported)\", false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-version\", \"Print version and exit\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-conf=<file>\", strprintf(\"Specify configuration file. Relative paths will be prefixed by datadir location. (default: %s)\", BITCOIN_CONF_FILENAME), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-getinfo\", \"Get general information from the remote server. Note that unlike server-side RPC calls, the results of -getinfo is the result of multiple non-atomic requests. Some entries in the result may represent results from different states (e.g. wallet balance may be as of a different block from the chain state reported)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     SetupChainParamsBaseOptions();\n-    gArgs.AddArg(\"-named\", strprintf(\"Pass named instead of positional arguments (default: %s)\", DEFAULT_NAMED), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-rpcclienttimeout=<n>\", strprintf(\"Timeout in seconds during HTTP requests, or 0 for no timeout. (default: %d)\", DEFAULT_HTTP_CLIENT_TIMEOUT), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-rpcconnect=<ip>\", strprintf(\"Send commands to node running on <ip> (default: %s)\", DEFAULT_RPCCONNECT), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-rpccookiefile=<loc>\", \"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)\", false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-rpcpassword=<pw>\", \"Password for JSON-RPC connections\", false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-rpcport=<port>\", strprintf(\"Connect to JSON-RPC on <port> (default: %u, testnet: %u, regtest: %u)\", defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort(), regtestBaseParams->RPCPort()), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-rpcuser=<user>\", \"Username for JSON-RPC connections\", false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-rpcwait\", \"Wait for RPC server to start\", false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-rpcwallet=<walletname>\", \"Send RPC for non-default wallet on RPC server (needs to exactly match corresponding -wallet option passed to bitcoind). This changes the RPC endpoint used, e.g. http://127.0.0.1:8332/wallet/<walletname>\", false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-stdin\", \"Read extra arguments from standard input, one per line until EOF/Ctrl-D (recommended for sensitive information such as passphrases). When combined with -stdinrpcpass, the first line from standard input is used for the RPC password.\", false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-stdinrpcpass\", \"Read RPC password from standard input as a single line. When combined with -stdin, the first line from standard input is used for the RPC password.\", false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-named\", strprintf(\"Pass named instead of positional arguments (default: %s)\", DEFAULT_NAMED), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-rpcclienttimeout=<n>\", strprintf(\"Timeout in seconds during HTTP requests, or 0 for no timeout. (default: %d)\", DEFAULT_HTTP_CLIENT_TIMEOUT), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-rpcconnect=<ip>\", strprintf(\"Send commands to node running on <ip> (default: %s)\", DEFAULT_RPCCONNECT), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-rpccookiefile=<loc>\", \"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-rpcpassword=<pw>\", \"Password for JSON-RPC connections\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-rpcport=<port>\", strprintf(\"Connect to JSON-RPC on <port> (default: %u, testnet: %u, regtest: %u)\", defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort(), regtestBaseParams->RPCPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-rpcuser=<user>\", \"Username for JSON-RPC connections\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-rpcwait\", \"Wait for RPC server to start\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-rpcwallet=<walletname>\", \"Send RPC for non-default wallet on RPC server (needs to exactly match corresponding -wallet option passed to bitcoind). This changes the RPC endpoint used, e.g. http://127.0.0.1:8332/wallet/<walletname>\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-stdin\", \"Read extra arguments from standard input, one per line until EOF/Ctrl-D (recommended for sensitive information such as passphrases). When combined with -stdinrpcpass, the first line from standard input is used for the RPC password.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-stdinrpcpass\", \"Read RPC password from standard input as a single line. When combined with -stdin, the first line from standard input is used for the RPC password.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n }\n \n /** libevent event log callback */\n@@ -122,7 +125,7 @@ static int AppInitRPC(int argc, char* argv[])\n         }\n         return EXIT_SUCCESS;\n     }\n-    if (!fs::is_directory(GetDataDir(false))) {\n+    if (!CheckDataDirOption()) {\n         tfm::format(std::cerr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-datadir\", \"\").c_str());\n         return EXIT_FAILURE;\n     }"
      },
      {
        "sha": "f4972c3cd44970cd90f2eac5f2074f97886136f7",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 22,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -11,18 +11,20 @@\n #include <consensus/consensus.h>\n #include <core_io.h>\n #include <key_io.h>\n-#include <keystore.h>\n #include <policy/policy.h>\n #include <policy/rbf.h>\n #include <primitives/transaction.h>\n #include <script/script.h>\n #include <script/sign.h>\n+#include <script/signingprovider.h>\n #include <univalue.h>\n-#include <util/rbf.h>\n-#include <util/system.h>\n #include <util/moneystr.h>\n+#include <util/rbf.h>\n #include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n \n+#include <functional>\n #include <memory>\n #include <stdio.h>\n \n@@ -38,36 +40,36 @@ static void SetupBitcoinTxArgs()\n {\n     SetupHelpOptions(gArgs);\n \n-    gArgs.AddArg(\"-create\", \"Create new, empty TX.\", false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-json\", \"Select JSON output\", false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-txid\", \"Output only the hex-encoded transaction id of the resultant transaction.\", false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-create\", \"Create new, empty TX.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-json\", \"Select JSON output\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-txid\", \"Output only the hex-encoded transaction id of the resultant transaction.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     SetupChainParamsBaseOptions();\n \n-    gArgs.AddArg(\"delin=N\", \"Delete input N from TX\", false, OptionsCategory::COMMANDS);\n-    gArgs.AddArg(\"delout=N\", \"Delete output N from TX\", false, OptionsCategory::COMMANDS);\n-    gArgs.AddArg(\"in=TXID:VOUT(:SEQUENCE_NUMBER)\", \"Add input to TX\", false, OptionsCategory::COMMANDS);\n-    gArgs.AddArg(\"locktime=N\", \"Set TX lock time to N\", false, OptionsCategory::COMMANDS);\n-    gArgs.AddArg(\"nversion=N\", \"Set TX version to N\", false, OptionsCategory::COMMANDS);\n-    gArgs.AddArg(\"outaddr=VALUE:ADDRESS\", \"Add address-based output to TX\", false, OptionsCategory::COMMANDS);\n-    gArgs.AddArg(\"outdata=[VALUE:]DATA\", \"Add data-based output to TX\", false, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"delin=N\", \"Delete input N from TX\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"delout=N\", \"Delete output N from TX\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"in=TXID:VOUT(:SEQUENCE_NUMBER)\", \"Add input to TX\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"locktime=N\", \"Set TX lock time to N\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"nversion=N\", \"Set TX version to N\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"outaddr=VALUE:ADDRESS\", \"Add address-based output to TX\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"outdata=[VALUE:]DATA\", \"Add data-based output to TX\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n     gArgs.AddArg(\"outmultisig=VALUE:REQUIRED:PUBKEYS:PUBKEY1:PUBKEY2:....[:FLAGS]\", \"Add Pay To n-of-m Multi-sig output to TX. n = REQUIRED, m = PUBKEYS. \"\n         \"Optionally add the \\\"W\\\" flag to produce a pay-to-witness-script-hash output. \"\n-        \"Optionally add the \\\"S\\\" flag to wrap the output in a pay-to-script-hash.\", false, OptionsCategory::COMMANDS);\n+        \"Optionally add the \\\"S\\\" flag to wrap the output in a pay-to-script-hash.\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n     gArgs.AddArg(\"outpubkey=VALUE:PUBKEY[:FLAGS]\", \"Add pay-to-pubkey output to TX. \"\n         \"Optionally add the \\\"W\\\" flag to produce a pay-to-witness-pubkey-hash output. \"\n-        \"Optionally add the \\\"S\\\" flag to wrap the output in a pay-to-script-hash.\", false, OptionsCategory::COMMANDS);\n+        \"Optionally add the \\\"S\\\" flag to wrap the output in a pay-to-script-hash.\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n     gArgs.AddArg(\"outscript=VALUE:SCRIPT[:FLAGS]\", \"Add raw script output to TX. \"\n         \"Optionally add the \\\"W\\\" flag to produce a pay-to-witness-script-hash output. \"\n-        \"Optionally add the \\\"S\\\" flag to wrap the output in a pay-to-script-hash.\", false, OptionsCategory::COMMANDS);\n-    gArgs.AddArg(\"replaceable(=N)\", \"Set RBF opt-in sequence number for input N (if not provided, opt-in all available inputs)\", false, OptionsCategory::COMMANDS);\n+        \"Optionally add the \\\"S\\\" flag to wrap the output in a pay-to-script-hash.\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"replaceable(=N)\", \"Set RBF opt-in sequence number for input N (if not provided, opt-in all available inputs)\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n     gArgs.AddArg(\"sign=SIGHASH-FLAGS\", \"Add zero or more signatures to transaction. \"\n         \"This command requires JSON registers:\"\n         \"prevtxs=JSON object, \"\n         \"privatekeys=JSON object. \"\n-        \"See signrawtransactionwithkey docs for format of sighash flags, JSON objects.\", false, OptionsCategory::COMMANDS);\n+        \"See signrawtransactionwithkey docs for format of sighash flags, JSON objects.\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n \n-    gArgs.AddArg(\"load=NAME:FILENAME\", \"Load JSON file FILENAME into register NAME\", false, OptionsCategory::REGISTER_COMMANDS);\n-    gArgs.AddArg(\"set=NAME:JSON-STRING\", \"Set register NAME to given JSON-STRING\", false, OptionsCategory::REGISTER_COMMANDS);\n+    gArgs.AddArg(\"load=NAME:FILENAME\", \"Load JSON file FILENAME into register NAME\", ArgsManager::ALLOW_ANY, OptionsCategory::REGISTER_COMMANDS);\n+    gArgs.AddArg(\"set=NAME:JSON-STRING\", \"Set register NAME to given JSON-STRING\", ArgsManager::ALLOW_ANY, OptionsCategory::REGISTER_COMMANDS);\n }\n \n //\n@@ -557,7 +559,7 @@ static void MutateTxSign(CMutableTransaction& tx, const std::string& flagStr)\n \n     if (!registers.count(\"privatekeys\"))\n         throw std::runtime_error(\"privatekeys register variable must be set.\");\n-    CBasicKeyStore tempKeystore;\n+    FillableSigningProvider tempKeystore;\n     UniValue keysObj = registers[\"privatekeys\"];\n \n     for (unsigned int kidx = 0; kidx < keysObj.size(); kidx++) {\n@@ -631,7 +633,7 @@ static void MutateTxSign(CMutableTransaction& tx, const std::string& flagStr)\n         }\n     }\n \n-    const CKeyStore& keystore = tempKeystore;\n+    const FillableSigningProvider& keystore = tempKeystore;\n \n     bool fHashSingle = ((nHashType & ~SIGHASH_ANYONECANPAY) == SIGHASH_SINGLE);\n "
      },
      {
        "sha": "361fedf35a0b37a7f17f827b9768d2612c7b4c5f",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 8,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -9,10 +9,12 @@\n #include <chainparams.h>\n #include <chainparamsbase.h>\n #include <logging.h>\n-#include <util/system.h>\n #include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n #include <wallet/wallettool.h>\n \n+#include <functional>\n #include <stdio.h>\n \n const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n@@ -22,13 +24,13 @@ static void SetupWalletToolArgs()\n     SetupHelpOptions(gArgs);\n     SetupChainParamsBaseOptions();\n \n-    gArgs.AddArg(\"-datadir=<dir>\", \"Specify data directory\", false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-wallet=<wallet-name>\", \"Specify wallet name\", false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-debug=<category>\", \"Output debugging information (default: 0).\", false, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -debug is true, 0 otherwise.\", false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-wallet=<wallet-name>\", \"Specify wallet name\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-debug=<category>\", \"Output debugging information (default: 0).\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -debug is true, 0 otherwise.\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n \n-    gArgs.AddArg(\"info\", \"Get wallet info\", false, OptionsCategory::COMMANDS);\n-    gArgs.AddArg(\"create\", \"Create new wallet file\", false, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"info\", \"Get wallet info\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"create\", \"Create new wallet file\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n }\n \n static bool WalletAppInit(int argc, char* argv[])\n@@ -55,7 +57,7 @@ static bool WalletAppInit(int argc, char* argv[])\n     // check for printtoconsole, allow -debug\n     LogInstance().m_print_to_console = gArgs.GetBoolArg(\"-printtoconsole\", gArgs.GetBoolArg(\"-debug\", false));\n \n-    if (!fs::is_directory(GetDataDir(false))) {\n+    if (!CheckDataDirOption()) {\n         tfm::format(std::cerr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-datadir\", \"\").c_str());\n         return false;\n     }"
      },
      {
        "sha": "cb3c4f70b4549c50198d23f60416f1e3ea1116bd",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 20,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -11,15 +11,17 @@\n #include <clientversion.h>\n #include <compat.h>\n #include <fs.h>\n-#include <interfaces/chain.h>\n #include <init.h>\n+#include <interfaces/chain.h>\n #include <noui.h>\n #include <shutdown.h>\n+#include <ui_interface.h>\n+#include <util/strencodings.h>\n #include <util/system.h>\n #include <util/threadnames.h>\n-#include <util/strencodings.h>\n+#include <util/translation.h>\n \n-#include <stdio.h>\n+#include <functional>\n \n const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n \n@@ -70,8 +72,7 @@ static bool AppInit(int argc, char* argv[])\n     SetupServerArgs();\n     std::string error;\n     if (!gArgs.ParseParameters(argc, argv, error)) {\n-        tfm::format(std::cerr, \"Error parsing command line arguments: %s\\n\", error.c_str());\n-        return false;\n+        return InitError(strprintf(\"Error parsing command line arguments: %s\\n\", error));\n     }\n \n     // Process help and version before taking care about datadir\n@@ -94,28 +95,23 @@ static bool AppInit(int argc, char* argv[])\n \n     try\n     {\n-        if (!fs::is_directory(GetDataDir(false)))\n-        {\n-            tfm::format(std::cerr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-datadir\", \"\").c_str());\n-            return false;\n+        if (!CheckDataDirOption()) {\n+            return InitError(strprintf(\"Specified data directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-datadir\", \"\")));\n         }\n         if (!gArgs.ReadConfigFiles(error, true)) {\n-            tfm::format(std::cerr, \"Error reading configuration file: %s\\n\", error.c_str());\n-            return false;\n+            return InitError(strprintf(\"Error reading configuration file: %s\\n\", error));\n         }\n         // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n         try {\n             SelectParams(gArgs.GetChainName());\n         } catch (const std::exception& e) {\n-            tfm::format(std::cerr, \"Error: %s\\n\", e.what());\n-            return false;\n+            return InitError(strprintf(\"%s\\n\", e.what()));\n         }\n \n         // Error out when loose non-argument tokens are encountered on command line\n         for (int i = 1; i < argc; i++) {\n             if (!IsSwitchChar(argv[i][0])) {\n-                tfm::format(std::cerr, \"Error: Command line contains unexpected token '%s', see bitcoind -h for a list of options.\\n\", argv[i]);\n-                return false;\n+                return InitError(strprintf(\"Command line contains unexpected token '%s', see bitcoind -h for a list of options.\\n\", argv[i]));\n             }\n         }\n \n@@ -146,19 +142,17 @@ static bool AppInit(int argc, char* argv[])\n #pragma GCC diagnostic push\n #pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n #endif\n-            tfm::format(std::cout, \"Bitcoin server starting\\n\");\n+            tfm::format(std::cout, PACKAGE_NAME \" daemon starting\\n\");\n \n             // Daemonize\n             if (daemon(1, 0)) { // don't chdir (1), do close FDs (0)\n-                tfm::format(std::cerr, \"Error: daemon() failed: %s\\n\", strerror(errno));\n-                return false;\n+                return InitError(strprintf(\"daemon() failed: %s\\n\", strerror(errno)));\n             }\n #if defined(MAC_OSX)\n #pragma GCC diagnostic pop\n #endif\n #else\n-            tfm::format(std::cerr, \"Error: -daemon is not supported on this operating system\\n\");\n-            return false;\n+            return InitError(\"-daemon is not supported on this operating system\\n\");\n #endif // HAVE_DECL_DAEMON\n         }\n         // Lock data directory after daemonization"
      },
      {
        "sha": "ad766471dc13322206546d2437fe6c61eabd2cd1",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 42,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -69,6 +69,8 @@ class CMainParams : public CChainParams {\n         consensus.BIP34Hash = uint256S(\"0x000000000000024b89b42a942fe0d9fea3bb44ab7bd1b19115dd6a759c0808b8\");\n         consensus.BIP65Height = 388381; // 000000000000000004c2b624ed5d7756c508d90fd0da2c7c679febfa6c4735f0\n         consensus.BIP66Height = 363725; // 00000000000000000379eaa19dce8c9b722d46ae6a57c2f1a988119488b50931\n+        consensus.CSVHeight = 419328; // 000000000000000004a1b34462cb8aeebd5799177f7a29cf28f2d1961716b5b5\n+        consensus.SegwitHeight = 481824; // 0000000000000000001c8018d9cb3b742ef25114f27563e3fc4a1902167f9893\n         consensus.powLimit = uint256S(\"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n@@ -80,16 +82,6 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n \n-        // Deployment of BIP68, BIP112, and BIP113.\n-        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].bit = 0;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 1462060800; // May 1st, 2016\n-        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 1493596800; // May 1st, 2017\n-\n-        // Deployment of SegWit (BIP141, BIP143, and BIP147)\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].bit = 1;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = 1479168000; // November 15th, 2016.\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 1510704000; // November 15th, 2017.\n-\n         // The best chain should have at least this much work.\n         consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000051dc8b82f450202ecb3d471\");\n \n@@ -141,7 +133,7 @@ class CMainParams : public CChainParams {\n \n         fDefaultConsistencyChecks = false;\n         fRequireStandard = true;\n-        fMineBlocksOnDemand = false;\n+        m_is_test_chain = false;\n \n         checkpointData = {\n             {\n@@ -167,9 +159,6 @@ class CMainParams : public CChainParams {\n             /* nTxCount */ 383732546,\n             /* dTxRate  */ 3.685496590998308\n         };\n-\n-        /* disable fallback fee on mainnet */\n-        m_fallback_fee_enabled = false;\n     }\n };\n \n@@ -186,6 +175,8 @@ class CTestNetParams : public CChainParams {\n         consensus.BIP34Hash = uint256S(\"0x0000000023b3a96d3484e5abb3755c413e7d41500f8e2a5c3f0dd01299cd8ef8\");\n         consensus.BIP65Height = 581885; // 00000000007f6655f22f98e72ed80d8b06dc761d5da09df0fa1dc4be4f861eb6\n         consensus.BIP66Height = 330776; // 000000002104c8c45e99a8853285a3b592602a3ccde2b832481da85e9e4ba182\n+        consensus.CSVHeight = 770112; // 00000000025e930139bac5c6c31a403776da130831ab85be56578f3fa75369bb\n+        consensus.SegwitHeight = 834624; // 00000000002b980fcd729daaa248fd9316a5200e9b367f4ff2c42453e84201ca\n         consensus.powLimit = uint256S(\"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n@@ -197,16 +188,6 @@ class CTestNetParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n \n-        // Deployment of BIP68, BIP112, and BIP113.\n-        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].bit = 0;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 1456790400; // March 1st, 2016\n-        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 1493596800; // May 1st, 2017\n-\n-        // Deployment of SegWit (BIP141, BIP143, and BIP147)\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].bit = 1;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = 1462060800; // May 1st 2016\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 1493596800; // May 1st 2017\n-\n         // The best chain should have at least this much work.\n         consensus.nMinimumChainWork = uint256S(\"0x00000000000000000000000000000000000000000000007dbe94253893cbd463\");\n \n@@ -247,7 +228,7 @@ class CTestNetParams : public CChainParams {\n \n         fDefaultConsistencyChecks = false;\n         fRequireStandard = false;\n-        fMineBlocksOnDemand = false;\n+        m_is_test_chain = true;\n \n \n         checkpointData = {\n@@ -262,9 +243,6 @@ class CTestNetParams : public CChainParams {\n             /* nTxCount */ 19438708,\n             /* dTxRate  */ 0.626\n         };\n-\n-        /* enable fallback fee on testnet */\n-        m_fallback_fee_enabled = true;\n     }\n };\n \n@@ -281,6 +259,8 @@ class CRegTestParams : public CChainParams {\n         consensus.BIP34Hash = uint256();\n         consensus.BIP65Height = 1351; // BIP65 activated on regtest (Used in functional tests)\n         consensus.BIP66Height = 1251; // BIP66 activated on regtest (Used in functional tests)\n+        consensus.CSVHeight = 432; // CSV activated on regtest (Used in rpc activation tests)\n+        consensus.SegwitHeight = 0; // SEGWIT is always activated on regtest unless overridden\n         consensus.powLimit = uint256S(\"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n@@ -291,12 +271,6 @@ class CRegTestParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 0;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].bit = 0;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 0;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].bit = 1;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = Consensus::BIP9Deployment::ALWAYS_ACTIVE;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n \n         // The best chain should have at least this much work.\n         consensus.nMinimumChainWork = uint256S(\"0x00\");\n@@ -313,7 +287,7 @@ class CRegTestParams : public CChainParams {\n         m_assumed_blockchain_size = 0;\n         m_assumed_chain_state_size = 0;\n \n-        UpdateVersionBitsParametersFromArgs(args);\n+        UpdateActivationParametersFromArgs(args);\n \n         genesis = CreateGenesisBlock(1296688602, 2, 0x207fffff, 1, 50 * COIN);\n         consensus.hashGenesisBlock = genesis.GetHash();\n@@ -324,8 +298,8 @@ class CRegTestParams : public CChainParams {\n         vSeeds.clear();      //!< Regtest mode doesn't have any DNS seeds.\n \n         fDefaultConsistencyChecks = true;\n-        fRequireStandard = false;\n-        fMineBlocksOnDemand = true;\n+        fRequireStandard = true;\n+        m_is_test_chain = true;\n \n         checkpointData = {\n             {\n@@ -346,9 +320,6 @@ class CRegTestParams : public CChainParams {\n         base58Prefixes[EXT_SECRET_KEY] = {0x04, 0x35, 0x83, 0x94};\n \n         bech32_hrp = \"bcrt\";\n-\n-        /* enable fallback fee on regtest */\n-        m_fallback_fee_enabled = true;\n     }\n \n     /**\n@@ -359,11 +330,22 @@ class CRegTestParams : public CChainParams {\n         consensus.vDeployments[d].nStartTime = nStartTime;\n         consensus.vDeployments[d].nTimeout = nTimeout;\n     }\n-    void UpdateVersionBitsParametersFromArgs(const ArgsManager& args);\n+    void UpdateActivationParametersFromArgs(const ArgsManager& args);\n };\n \n-void CRegTestParams::UpdateVersionBitsParametersFromArgs(const ArgsManager& args)\n+void CRegTestParams::UpdateActivationParametersFromArgs(const ArgsManager& args)\n {\n+    if (gArgs.IsArgSet(\"-segwitheight\")) {\n+        int64_t height = gArgs.GetArg(\"-segwitheight\", consensus.SegwitHeight);\n+        if (height < -1 || height >= std::numeric_limits<int>::max()) {\n+            throw std::runtime_error(strprintf(\"Activation height %ld for segwit is out of valid range. Use -1 to disable segwit.\", height));\n+        } else if (height == -1) {\n+            LogPrintf(\"Segwit disabled for testing\\n\");\n+            height = std::numeric_limits<int>::max();\n+        }\n+        consensus.SegwitHeight = static_cast<int>(height);\n+    }\n+\n     if (!args.IsArgSet(\"-vbparams\")) return;\n \n     for (const std::string& strDeployment : args.GetArgs(\"-vbparams\")) {"
      },
      {
        "sha": "8f1d27e03cd95df253eeea9b8cccf0b33c7dfef7",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -66,17 +66,17 @@ class CChainParams\n     bool DefaultConsistencyChecks() const { return fDefaultConsistencyChecks; }\n     /** Policy: Filter transactions that do not match well-defined patterns */\n     bool RequireStandard() const { return fRequireStandard; }\n+    /** If this chain is exclusively used for testing */\n+    bool IsTestChain() const { return m_is_test_chain; }\n     uint64_t PruneAfterHeight() const { return nPruneAfterHeight; }\n     /** Minimum free space (in GB) needed for data directory */\n     uint64_t AssumedBlockchainSize() const { return m_assumed_blockchain_size; }\n     /** Minimum free space (in GB) needed for data directory when pruned; Does not include prune target*/\n     uint64_t AssumedChainStateSize() const { return m_assumed_chain_state_size; }\n-    /** Make miner stop after a block is found. In RPC, don't return until nGenProcLimit blocks are generated */\n-    bool MineBlocksOnDemand() const { return fMineBlocksOnDemand; }\n+    /** Whether it is possible to mine blocks on demand (no retargeting) */\n+    bool MineBlocksOnDemand() const { return consensus.fPowNoRetargeting; }\n     /** Return the BIP70 network string (main, test or regtest) */\n     std::string NetworkIDString() const { return strNetworkID; }\n-    /** Return true if the fallback fee is by default enabled for this network */\n-    bool IsFallbackFeeEnabled() const { return m_fallback_fee_enabled; }\n     /** Return the list of hostnames to look up for DNS seeds */\n     const std::vector<std::string>& DNSSeeds() const { return vSeeds; }\n     const std::vector<unsigned char>& Base58Prefix(Base58Type type) const { return base58Prefixes[type]; }\n@@ -101,10 +101,9 @@ class CChainParams\n     std::vector<SeedSpec6> vFixedSeeds;\n     bool fDefaultConsistencyChecks;\n     bool fRequireStandard;\n-    bool fMineBlocksOnDemand;\n+    bool m_is_test_chain;\n     CCheckpointData checkpointData;\n     ChainTxData chainTxData;\n-    bool m_fallback_fee_enabled;\n };\n \n /**"
      },
      {
        "sha": "9b98dff3caf7b9d433e153c46e796faaff438166",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -18,9 +18,10 @@ const std::string CBaseChainParams::REGTEST = \"regtest\";\n void SetupChainParamsBaseOptions()\n {\n     gArgs.AddArg(\"-regtest\", \"Enter regression test mode, which uses a special chain in which blocks can be solved instantly. \"\n-                                   \"This is intended for regression testing tools and app development.\", true, OptionsCategory::CHAINPARAMS);\n-    gArgs.AddArg(\"-testnet\", \"Use the test chain\", false, OptionsCategory::CHAINPARAMS);\n-    gArgs.AddArg(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\", true, OptionsCategory::CHAINPARAMS);\n+                                   \"This is intended for regression testing tools and app development.\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-segwitheight=<n>\", \"Set the activation height of segwit. -1 to disable. (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-testnet\", \"Use the test chain\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n }\n \n static std::unique_ptr<CBaseChainParams> globalChainBaseParams;"
      },
      {
        "sha": "f34646f7acf1f72dbc0cfef99f590f32d1999fad",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -7,7 +7,6 @@\n \n #include <memory>\n #include <string>\n-#include <vector>\n \n /**\n  * CBaseChainParams defines the base parameters (shared between bitcoin-cli and bitcoind)"
      },
      {
        "sha": "6b85edd01a9c95366068dfe02a3eda3e1f532241",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -5,6 +5,7 @@\n #include <coins.h>\n \n #include <consensus/consensus.h>\n+#include <logging.h>\n #include <random.h>\n #include <version.h>\n \n@@ -258,3 +259,19 @@ const Coin& AccessByTxid(const CCoinsViewCache& view, const uint256& txid)\n     }\n     return coinEmpty;\n }\n+\n+bool CCoinsViewErrorCatcher::GetCoin(const COutPoint &outpoint, Coin &coin) const {\n+    try {\n+        return CCoinsViewBacked::GetCoin(outpoint, coin);\n+    } catch(const std::runtime_error& e) {\n+        for (auto f : m_err_callbacks) {\n+            f();\n+        }\n+        LogPrintf(\"Error reading from database: %s\\n\", e.what());\n+        // Starting the shutdown sequence and returning false to the caller would be\n+        // interpreted as 'entry not found' (as opposed to unable to read data), and\n+        // could lead to invalid interpretation. Just exit immediately, as we can't\n+        // continue anyway, and all writes should be atomic.\n+        std::abort();\n+    }\n+}"
      },
      {
        "sha": "dca1beabb6f1ff4945efffd7f8d894eaf1ee1c40",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -17,6 +17,7 @@\n #include <assert.h>\n #include <stdint.h>\n \n+#include <functional>\n #include <unordered_map>\n \n /**\n@@ -315,4 +316,28 @@ void AddCoins(CCoinsViewCache& cache, const CTransaction& tx, int nHeight, bool\n //! lookups to database, so it should be used with care.\n const Coin& AccessByTxid(const CCoinsViewCache& cache, const uint256& txid);\n \n+/**\n+ * This is a minimally invasive approach to shutdown on LevelDB read errors from the\n+ * chainstate, while keeping user interface out of the common library, which is shared\n+ * between bitcoind, and bitcoin-qt and non-server tools.\n+ *\n+ * Writes do not need similar protection, as failure to write is handled by the caller.\n+*/\n+class CCoinsViewErrorCatcher final : public CCoinsViewBacked\n+{\n+public:\n+    explicit CCoinsViewErrorCatcher(CCoinsView* view) : CCoinsViewBacked(view) {}\n+\n+    void AddReadErrCallback(std::function<void()> f) {\n+        m_err_callbacks.emplace_back(std::move(f));\n+    }\n+\n+    bool GetCoin(const COutPoint &outpoint, Coin &coin) const override;\n+\n+private:\n+    /** A list of callbacks to execute upon leveldb read error. */\n+    std::vector<std::function<void()>> m_err_callbacks;\n+\n+};\n+\n #endif // BITCOIN_COINS_H"
      },
      {
        "sha": "8263b0fef4a895e0d443eb5e19a14448bc1d4faf",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -16,8 +16,6 @@ namespace Consensus {\n enum DeploymentPos\n {\n     DEPLOYMENT_TESTDUMMY,\n-    DEPLOYMENT_CSV, // Deployment of BIP68, BIP112, and BIP113.\n-    DEPLOYMENT_SEGWIT, // Deployment of BIP141, BIP143, and BIP147.\n     // NOTE: Also add new deployments to VersionBitsDeploymentInfo in versionbits.cpp\n     MAX_VERSION_BITS_DEPLOYMENTS\n };\n@@ -58,6 +56,12 @@ struct Params {\n     int BIP65Height;\n     /** Block height at which BIP66 becomes active */\n     int BIP66Height;\n+    /** Block height at which CSV (BIP68, BIP112 and BIP113) becomes active */\n+    int CSVHeight;\n+    /** Block height at which Segwit (BIP141, BIP143 and BIP147) becomes active.\n+     * Note that segwit v0 script rules are enforced on all blocks except the\n+     * BIP 16 exception blocks. */\n+    int SegwitHeight;\n     /**\n      * Minimum blocks including miner confirmation of the total of 2016 blocks in a retargeting period,\n      * (nPowTargetTimespan / nPowTargetSpacing) which is also used for BIP9 deployments."
      },
      {
        "sha": "6a3d43deb15e8754ed5aea172721682c33fa27c7",
        "filename": "src/crypto/chacha_poly_aead.cpp",
        "status": "added",
        "additions": 126,
        "deletions": 0,
        "changes": 126,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/crypto/chacha_poly_aead.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/crypto/chacha_poly_aead.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/chacha_poly_aead.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha_poly_aead.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/poly1305.h>\n+#include <support/cleanse.h>\n+\n+#include <assert.h>\n+#include <string.h>\n+\n+#include <cstdio>\n+#include <limits>\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n)\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif // TIMINGSAFE_BCMP\n+\n+ChaCha20Poly1305AEAD::ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len)\n+{\n+    assert(K_1_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    assert(K_2_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_main.SetKey(K_1, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_header.SetKey(K_2, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+\n+    // set the cached sequence number to uint64 max which hints for an unset cache.\n+    // we can't hit uint64 max since the rekey rule (which resets the sequence number) is 1GB\n+    m_cached_aad_seqnr = std::numeric_limits<uint64_t>::max();\n+}\n+\n+bool ChaCha20Poly1305AEAD::Crypt(uint64_t seqnr_payload, uint64_t seqnr_aad, int aad_pos, unsigned char* dest, size_t dest_len /* length of the output buffer for sanity checks */, const unsigned char* src, size_t src_len, bool is_encrypt)\n+{\n+    // check buffer boundaries\n+    if (\n+        // if we encrypt, make sure the source contains at least the expected AAD and the destination has at least space for the source + MAC\n+        (is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN || dest_len < src_len + POLY1305_TAGLEN)) ||\n+        // if we decrypt, make sure the source contains at least the expected AAD+MAC and the destination has at least space for the source - MAC\n+        (!is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN + POLY1305_TAGLEN || dest_len < src_len - POLY1305_TAGLEN))) {\n+        return false;\n+    }\n+\n+    unsigned char expected_tag[POLY1305_TAGLEN], poly_key[POLY1305_KEYLEN];\n+    memset(poly_key, 0, sizeof(poly_key));\n+    m_chacha_main.SetIV(seqnr_payload);\n+\n+    // block counter 0 for the poly1305 key\n+    // use lower 32bytes for the poly1305 key\n+    // (throws away 32 unused bytes (upper 32) from this ChaCha20 round)\n+    m_chacha_main.Seek(0);\n+    m_chacha_main.Crypt(poly_key, poly_key, sizeof(poly_key));\n+\n+    // if decrypting, verify the tag prior to decryption\n+    if (!is_encrypt) {\n+        const unsigned char* tag = src + src_len - POLY1305_TAGLEN;\n+        poly1305_auth(expected_tag, src, src_len - POLY1305_TAGLEN, poly_key);\n+\n+        // constant time compare the calculated MAC with the provided MAC\n+        if (timingsafe_bcmp(expected_tag, tag, POLY1305_TAGLEN) != 0) {\n+            memory_cleanse(expected_tag, sizeof(expected_tag));\n+            memory_cleanse(poly_key, sizeof(poly_key));\n+            return false;\n+        }\n+        memory_cleanse(expected_tag, sizeof(expected_tag));\n+        // MAC has been successfully verified, make sure we don't covert it in decryption\n+        src_len -= POLY1305_TAGLEN;\n+    }\n+\n+    // calculate and cache the next 64byte keystream block if requested sequence number is not yet the cache\n+    if (m_cached_aad_seqnr != seqnr_aad) {\n+        m_cached_aad_seqnr = seqnr_aad;\n+        m_chacha_header.SetIV(seqnr_aad);\n+        m_chacha_header.Seek(0);\n+        m_chacha_header.Keystream(m_aad_keystream_buffer, CHACHA20_ROUND_OUTPUT);\n+    }\n+    // crypt the AAD (3 bytes message length) with given position in AAD cipher instance keystream\n+    dest[0] = src[0] ^ m_aad_keystream_buffer[aad_pos];\n+    dest[1] = src[1] ^ m_aad_keystream_buffer[aad_pos + 1];\n+    dest[2] = src[2] ^ m_aad_keystream_buffer[aad_pos + 2];\n+\n+    // Set the playload ChaCha instance block counter to 1 and crypt the payload\n+    m_chacha_main.Seek(1);\n+    m_chacha_main.Crypt(src + CHACHA20_POLY1305_AEAD_AAD_LEN, dest + CHACHA20_POLY1305_AEAD_AAD_LEN, src_len - CHACHA20_POLY1305_AEAD_AAD_LEN);\n+\n+    // If encrypting, calculate and append tag\n+    if (is_encrypt) {\n+        // the poly1305 tag expands over the AAD (3 bytes length) & encrypted payload\n+        poly1305_auth(dest + src_len, dest, src_len, poly_key);\n+    }\n+\n+    // cleanse no longer required MAC and polykey\n+    memory_cleanse(poly_key, sizeof(poly_key));\n+    return true;\n+}\n+\n+bool ChaCha20Poly1305AEAD::GetLength(uint32_t* len24_out, uint64_t seqnr_aad, int aad_pos, const uint8_t* ciphertext)\n+{\n+    // enforce valid aad position to avoid accessing outside of the 64byte keystream cache\n+    // (there is space for 21 times 3 bytes)\n+    assert(aad_pos >= 0 && aad_pos < CHACHA20_ROUND_OUTPUT - CHACHA20_POLY1305_AEAD_AAD_LEN);\n+    if (m_cached_aad_seqnr != seqnr_aad) {\n+        // we need to calculate the 64 keystream bytes since we reached a new aad sequence number\n+        m_cached_aad_seqnr = seqnr_aad;\n+        m_chacha_header.SetIV(seqnr_aad);                                         // use LE for the nonce\n+        m_chacha_header.Seek(0);                                                  // block counter 0\n+        m_chacha_header.Keystream(m_aad_keystream_buffer, CHACHA20_ROUND_OUTPUT); // write keystream to the cache\n+    }\n+\n+    // decrypt the ciphertext length by XORing the right position of the 64byte keystream cache with the ciphertext\n+    *len24_out = (ciphertext[0] ^ m_aad_keystream_buffer[aad_pos + 0]) |\n+                 (ciphertext[1] ^ m_aad_keystream_buffer[aad_pos + 1]) << 8 |\n+                 (ciphertext[2] ^ m_aad_keystream_buffer[aad_pos + 2]) << 16;\n+\n+    return true;\n+}"
      },
      {
        "sha": "b3ba781cddda714511b5d7c816c00745cefd905a",
        "filename": "src/crypto/chacha_poly_aead.h",
        "status": "added",
        "additions": 146,
        "deletions": 0,
        "changes": 146,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/crypto/chacha_poly_aead.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/crypto/chacha_poly_aead.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/chacha_poly_aead.h?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -0,0 +1,146 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_CHACHA_POLY_AEAD_H\n+#define BITCOIN_CRYPTO_CHACHA_POLY_AEAD_H\n+\n+#include <crypto/chacha20.h>\n+\n+#include <cmath>\n+\n+static constexpr int CHACHA20_POLY1305_AEAD_KEY_LEN = 32;\n+static constexpr int CHACHA20_POLY1305_AEAD_AAD_LEN = 3; /* 3 bytes length */\n+static constexpr int CHACHA20_ROUND_OUTPUT = 64;         /* 64 bytes per round */\n+static constexpr int AAD_PACKAGES_PER_ROUND = 21;        /* 64 / 3 round down*/\n+\n+/* A AEAD class for ChaCha20-Poly1305@bitcoin.\n+ *\n+ * ChaCha20 is a stream cipher designed by Daniel Bernstein and described in\n+ * <ref>[http://cr.yp.to/chacha/chacha-20080128.pdf ChaCha20]</ref>. It operates\n+ * by permuting 128 fixed bits, 128 or 256 bits of key, a 64 bit nonce and a 64\n+ * bit counter into 64 bytes of output. This output is used as a keystream, with\n+ * any unused bytes simply discarded.\n+ *\n+ * Poly1305 <ref>[http://cr.yp.to/mac/poly1305-20050329.pdf Poly1305]</ref>, also\n+ * by Daniel Bernstein, is a one-time Carter-Wegman MAC that computes a 128 bit\n+ * integrity tag given a message and a single-use 256 bit secret key.\n+ *\n+ * The chacha20-poly1305@bitcoin combines these two primitives into an\n+ * authenticated encryption mode. The construction used is based on that proposed\n+ * for TLS by Adam Langley in\n+ * <ref>[http://tools.ietf.org/html/draft-agl-tls-chacha20poly1305-03 \"ChaCha20\n+ * and Poly1305 based Cipher Suites for TLS\", Adam Langley]</ref>, but differs in\n+ * the layout of data passed to the MAC and in the addition of encryption of the\n+ * packet lengths.\n+ *\n+ * ==== Detailed Construction ====\n+ *\n+ * The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n+ * output from the key exchange. Each key (K_1 and K_2) are used by two separate\n+ * instances of chacha20.\n+ *\n+ * The instance keyed by K_1 is a stream cipher that is used only to encrypt the 3\n+ * byte packet length field and has its own sequence number. The second instance,\n+ * keyed by K_2, is used in conjunction with poly1305 to build an AEAD\n+ * (Authenticated Encryption with Associated Data) that is used to encrypt and\n+ * authenticate the entire packet.\n+ *\n+ * Two separate cipher instances are used here so as to keep the packet lengths\n+ * confidential but not create an oracle for the packet payload cipher by\n+ * decrypting and using the packet length prior to checking the MAC. By using an\n+ * independently-keyed cipher instance to encrypt the length, an active attacker\n+ * seeking to exploit the packet input handling as a decryption oracle can learn\n+ * nothing about the payload contents or its MAC (assuming key derivation,\n+ * ChaCha20 and Poly1305 are secure).\n+ *\n+ * The AEAD is constructed as follows: for each packet, generate a Poly1305 key by\n+ * taking the first 256 bits of ChaCha20 stream output generated using K_2, an IV\n+ * consisting of the packet sequence number encoded as an LE uint64 and a ChaCha20\n+ * block counter of zero. The K_2 ChaCha20 block counter is then set to the\n+ * little-endian encoding of 1 (i.e. {1, 0, 0, 0, 0, 0, 0, 0}) and this instance\n+ * is used for encryption of the packet payload.\n+ *\n+ * ==== Packet Handling ====\n+ *\n+ * When receiving a packet, the length must be decrypted first. When 3 bytes of\n+ * ciphertext length have been received, they may be decrypted.\n+ *\n+ * A ChaCha20 round always calculates 64bytes which is sufficient to crypt 21\n+ * times a 3 bytes length field (21*3 = 63). The length field sequence number can\n+ * thus be used 21 times (keystream caching).\n+ *\n+ * The length field must be enc-/decrypted with the ChaCha20 keystream keyed with\n+ * K_1 defined by block counter 0, the length field sequence number in little\n+ * endian and a keystream position from 0 to 60.\n+ *\n+ * Once the entire packet has been received, the MAC MUST be checked before\n+ * decryption. A per-packet Poly1305 key is generated as described above and the\n+ * MAC tag calculated using Poly1305 with this key over the ciphertext of the\n+ * packet length and the payload together. The calculated MAC is then compared in\n+ * constant time with the one appended to the packet and the packet decrypted\n+ * using ChaCha20 as described above (with K_2, the packet sequence number as\n+ * nonce and a starting block counter of 1).\n+ *\n+ * Detection of an invalid MAC MUST lead to immediate connection termination.\n+ *\n+ * To send a packet, first encode the 3 byte length and encrypt it using K_1 as\n+ * described above. Encrypt the packet payload (using K_2) and append it to the\n+ * encrypted length. Finally, calculate a MAC tag and append it.\n+ *\n+ * The initiating peer MUST use <code>K_1_A, K_2_A</code> to encrypt messages on\n+ * the send channel, <code>K_1_B, K_2_B</code> MUST be used to decrypt messages on\n+ * the receive channel.\n+ *\n+ * The responding peer MUST use <code>K_1_A, K_2_A</code> to decrypt messages on\n+ * the receive channel, <code>K_1_B, K_2_B</code> MUST be used to encrypt messages\n+ * on the send channel.\n+ *\n+ * Optimized implementations of ChaCha20-Poly1305@bitcoin are relatively fast in\n+ * general, therefore it is very likely that encrypted messages require not more\n+ * CPU cycles per bytes then the current unencrypted p2p message format\n+ * (ChaCha20/Poly1305 versus double SHA256).\n+ *\n+ * The initial packet sequence numbers are 0.\n+ *\n+ * K_2 ChaCha20 cipher instance (payload) must never reuse a {key, nonce} for\n+ * encryption nor may it be used to encrypt more than 2^70 bytes under the same\n+ * {key, nonce}.\n+ *\n+ * K_1 ChaCha20 cipher instance (length field/AAD) must never reuse a {key, nonce,\n+ * position-in-keystream} for encryption nor may it be used to encrypt more than\n+ * 2^70 bytes under the same {key, nonce}.\n+ *\n+ * We use message sequence numbers for both communication directions.\n+ */\n+\n+class ChaCha20Poly1305AEAD\n+{\n+private:\n+    ChaCha20 m_chacha_main;                                      // payload and poly1305 key-derivation cipher instance\n+    ChaCha20 m_chacha_header;                                    // AAD cipher instance (encrypted length)\n+    unsigned char m_aad_keystream_buffer[CHACHA20_ROUND_OUTPUT]; // aad keystream cache\n+    uint64_t m_cached_aad_seqnr;                                 // aad keystream cache hint\n+\n+public:\n+    ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len);\n+\n+    explicit ChaCha20Poly1305AEAD(const ChaCha20Poly1305AEAD&) = delete;\n+\n+    /** Encrypts/decrypts a packet\n+        seqnr_payload, the message sequence number\n+        seqnr_aad, the messages AAD sequence number which allows reuse of the AAD keystream\n+        aad_pos, position to use in the AAD keystream to encrypt the AAD\n+        dest, output buffer, must be of a size equal or larger then CHACHA20_POLY1305_AEAD_AAD_LEN + payload (+ POLY1305_TAG_LEN in encryption) bytes\n+        destlen, length of the destination buffer\n+        src, the AAD+payload to encrypt or the AAD+payload+MAC to decrypt\n+        src_len, the length of the source buffer\n+        is_encrypt, set to true if we encrypt (creates and appends the MAC instead of verifying it)\n+        */\n+    bool Crypt(uint64_t seqnr_payload, uint64_t seqnr_aad, int aad_pos, unsigned char* dest, size_t dest_len, const unsigned char* src, size_t src_len, bool is_encrypt);\n+\n+    /** decrypts the 3 bytes AAD data and decodes it into a uint32_t field */\n+    bool GetLength(uint32_t* len24_out, uint64_t seqnr_aad, int aad_pos, const uint8_t* ciphertext);\n+};\n+\n+#endif // BITCOIN_CRYPTO_CHACHA_POLY_AEAD_H"
      },
      {
        "sha": "306d718574fb234f695aca1ca38e3c07262315b8",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -5,19 +5,20 @@\n #include <httprpc.h>\n \n #include <chainparams.h>\n+#include <crypto/hmac_sha256.h>\n #include <httpserver.h>\n #include <key_io.h>\n #include <rpc/protocol.h>\n #include <rpc/server.h>\n #include <sync.h>\n-#include <util/system.h>\n-#include <util/strencodings.h>\n #include <ui_interface.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n #include <walletinitinterface.h>\n-#include <crypto/hmac_sha256.h>\n-#include <stdio.h>\n \n #include <memory>\n+#include <stdio.h>\n \n #include <boost/algorithm/string.hpp> // boost::trim\n \n@@ -218,7 +219,7 @@ static bool InitRPCAuthentication()\n         LogPrintf(\"No rpcpassword set - using random cookie authentication.\\n\");\n         if (!GenerateAuthCookie(&strRPCUserColonPass)) {\n             uiInterface.ThreadSafeMessageBox(\n-                _(\"Error: A fatal internal error occurred, see debug.log for details\"), // Same message as AbortNode\n+                _(\"Error: A fatal internal error occurred, see debug.log for details\").translated, // Same message as AbortNode\n                 \"\", CClientUIInterface::MSG_ERROR);\n             return false;\n         }"
      },
      {
        "sha": "c3ce8d7af0d3dbbfe13ea2f602e279fe90d12b5a",
        "filename": "src/index/blockfilterindex.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/index/blockfilterindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/index/blockfilterindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/blockfilterindex.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -53,7 +53,7 @@ struct DBHeightKey {\n     int height;\n \n     DBHeightKey() : height(0) {}\n-    DBHeightKey(int height_in) : height(height_in) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n \n     template<typename Stream>\n     void Serialize(Stream& s) const\n@@ -76,7 +76,7 @@ struct DBHeightKey {\n struct DBHashKey {\n     uint256 hash;\n \n-    DBHashKey(const uint256& hash_in) : hash(hash_in) {}\n+    explicit DBHashKey(const uint256& hash_in) : hash(hash_in) {}\n \n     ADD_SERIALIZE_METHODS;\n "
      },
      {
        "sha": "62db38f8943df5bba88f38b3ae8e5dfcf80c710d",
        "filename": "src/index/txindex.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/index/txindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/index/txindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -6,6 +6,7 @@\n #include <shutdown.h>\n #include <ui_interface.h>\n #include <util/system.h>\n+#include <util/translation.h>\n #include <validation.h>\n \n #include <boost/thread.hpp>\n@@ -137,7 +138,7 @@ bool TxIndex::DB::MigrateData(CBlockTreeDB& block_tree_db, const CBlockLocator&\n \n     int64_t count = 0;\n     LogPrintf(\"Upgrading txindex database... [0%%]\\n\");\n-    uiInterface.ShowProgress(_(\"Upgrading txindex database\"), 0, true);\n+    uiInterface.ShowProgress(_(\"Upgrading txindex database\").translated, 0, true);\n     int report_done = 0;\n     const size_t batch_size = 1 << 24; // 16 MiB\n \n@@ -174,7 +175,7 @@ bool TxIndex::DB::MigrateData(CBlockTreeDB& block_tree_db, const CBlockLocator&\n                 (static_cast<uint32_t>(*(txid.begin() + 1)) << 0);\n             int percentage_done = (int)(high_nibble * 100.0 / 65536.0 + 0.5);\n \n-            uiInterface.ShowProgress(_(\"Upgrading txindex database\"), percentage_done, true);\n+            uiInterface.ShowProgress(_(\"Upgrading txindex database\").translated, percentage_done, true);\n             if (report_done < percentage_done/10) {\n                 LogPrintf(\"Upgrading txindex database... [%d%%]\\n\", percentage_done);\n                 report_done = percentage_done/10;"
      },
      {
        "sha": "dd43ef71c9fb33543e92af3de3fe4352c91205d0",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 251,
        "deletions": 263,
        "changes": 514,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -18,40 +18,43 @@\n #include <compat/sanity.h>\n #include <consensus/validation.h>\n #include <fs.h>\n-#include <httpserver.h>\n #include <httprpc.h>\n+#include <httpserver.h>\n #include <index/blockfilterindex.h>\n-#include <interfaces/chain.h>\n #include <index/txindex.h>\n+#include <interfaces/chain.h>\n #include <key.h>\n-#include <validation.h>\n #include <miner.h>\n-#include <netbase.h>\n #include <net.h>\n+#include <net_permissions.h>\n #include <net_processing.h>\n+#include <netbase.h>\n #include <policy/feerate.h>\n #include <policy/fees.h>\n #include <policy/policy.h>\n #include <policy/settings.h>\n-#include <rpc/server.h>\n-#include <rpc/register.h>\n #include <rpc/blockchain.h>\n+#include <rpc/register.h>\n+#include <rpc/server.h>\n #include <rpc/util.h>\n-#include <script/standard.h>\n-#include <script/sigcache.h>\n #include <scheduler.h>\n+#include <script/sigcache.h>\n+#include <script/standard.h>\n #include <shutdown.h>\n-#include <util/threadnames.h>\n #include <timedata.h>\n+#include <torcontrol.h>\n #include <txdb.h>\n #include <txmempool.h>\n-#include <torcontrol.h>\n #include <ui_interface.h>\n-#include <util/system.h>\n #include <util/moneystr.h>\n+#include <util/system.h>\n+#include <util/threadnames.h>\n+#include <util/translation.h>\n #include <util/validation.h>\n+#include <validation.h>\n #include <validationinterface.h>\n #include <walletinitinterface.h>\n+\n #include <stdint.h>\n #include <stdio.h>\n \n@@ -117,7 +120,7 @@ NODISCARD static bool CreatePidFile()\n #endif\n         return true;\n     } else {\n-        return InitError(strprintf(_(\"Unable to create the PID file '%s': %s\"), GetPidFile().string(), std::strerror(errno)));\n+        return InitError(strprintf(_(\"Unable to create the PID file '%s': %s\").translated, GetPidFile().string(), std::strerror(errno)));\n     }\n }\n \n@@ -146,32 +149,6 @@ NODISCARD static bool CreatePidFile()\n // shutdown thing.\n //\n \n-/**\n- * This is a minimally invasive approach to shutdown on LevelDB read errors from the\n- * chainstate, while keeping user interface out of the common library, which is shared\n- * between bitcoind, and bitcoin-qt and non-server tools.\n-*/\n-class CCoinsViewErrorCatcher final : public CCoinsViewBacked\n-{\n-public:\n-    explicit CCoinsViewErrorCatcher(CCoinsView* view) : CCoinsViewBacked(view) {}\n-    bool GetCoin(const COutPoint &outpoint, Coin &coin) const override {\n-        try {\n-            return CCoinsViewBacked::GetCoin(outpoint, coin);\n-        } catch(const std::runtime_error& e) {\n-            uiInterface.ThreadSafeMessageBox(_(\"Error reading from database, shutting down.\"), \"\", CClientUIInterface::MSG_ERROR);\n-            LogPrintf(\"Error reading from database: %s\\n\", e.what());\n-            // Starting the shutdown sequence and returning false to the caller would be\n-            // interpreted as 'entry not found' (as opposed to unable to read data), and\n-            // could lead to invalid interpretation. Just exit immediately, as we can't\n-            // continue anyway, and all writes should be atomic.\n-            abort();\n-        }\n-    }\n-    // Writes do not need similar protection, as failure to write is handled by the caller.\n-};\n-\n-static std::unique_ptr<CCoinsViewErrorCatcher> pcoinscatcher;\n static std::unique_ptr<ECCVerifyHandle> globalVerifyHandle;\n \n static boost::thread_group threadGroup;\n@@ -256,8 +233,14 @@ void Shutdown(InitInterfaces& interfaces)\n     }\n \n     // FlushStateToDisk generates a ChainStateFlushed callback, which we should avoid missing\n-    if (pcoinsTip != nullptr) {\n-        ::ChainstateActive().ForceFlushStateToDisk();\n+    //\n+    // g_chainstate is referenced here directly (instead of ::ChainstateActive()) because it\n+    // may not have been initialized yet.\n+    {\n+        LOCK(cs_main);\n+        if (g_chainstate && g_chainstate->CanFlushToDisk()) {\n+            g_chainstate->ForceFlushStateToDisk();\n+        }\n     }\n \n     // After there are no more peers/RPC left to give us new data which may generate\n@@ -272,12 +255,10 @@ void Shutdown(InitInterfaces& interfaces)\n \n     {\n         LOCK(cs_main);\n-        if (pcoinsTip != nullptr) {\n-            ::ChainstateActive().ForceFlushStateToDisk();\n+        if (g_chainstate && g_chainstate->CanFlushToDisk()) {\n+            g_chainstate->ForceFlushStateToDisk();\n+            g_chainstate->ResetCoinsViews();\n         }\n-        pcoinsTip.reset();\n-        pcoinscatcher.reset();\n-        pcoinsdbview.reset();\n         pblocktree.reset();\n     }\n     for (const auto& client : interfaces.chain_clients) {\n@@ -360,7 +341,7 @@ static void OnRPCStopped()\n void SetupServerArgs()\n {\n     SetupHelpOptions(gArgs);\n-    gArgs.AddArg(\"-help-debug\", \"Print help message with debugging options and exit\", false, OptionsCategory::DEBUG_TEST); // server-only for now\n+    gArgs.AddArg(\"-help-debug\", \"Print help message with debugging options and exit\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST); // server-only for now\n \n     const auto defaultBaseParams = CreateBaseChainParams(CBaseChainParams::MAIN);\n     const auto testnetBaseParams = CreateBaseChainParams(CBaseChainParams::TESTNET);\n@@ -375,99 +356,103 @@ void SetupServerArgs()\n         // GUI args. These will be overwritten by SetupUIArgs for the GUI\n         \"-allowselfsignedrootcertificates\", \"-choosedatadir\", \"-lang=<lang>\", \"-min\", \"-resetguisettings\", \"-rootcertificates=<file>\", \"-splash\", \"-uiplatform\"};\n \n-    gArgs.AddArg(\"-version\", \"Print version and exit\", false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-alertnotify=<cmd>\", \"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\", false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-assumevalid=<hex>\", strprintf(\"If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)\", defaultChainParams->GetConsensus().defaultAssumeValid.GetHex(), testnetChainParams->GetConsensus().defaultAssumeValid.GetHex()), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-blocksdir=<dir>\", \"Specify directory to hold blocks subdirectory for *.dat files (default: <datadir>)\", false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-blocknotify=<cmd>\", \"Execute command when the best block changes (%s in cmd is replaced by block hash)\", false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-blockreconstructionextratxn=<n>\", strprintf(\"Extra transactions to keep in memory for compact block reconstructions (default: %u)\", DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-blocksonly\", strprintf(\"Whether to reject transactions from network peers. Transactions from the wallet or RPC are not affected. (default: %u)\", DEFAULT_BLOCKSONLY), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-conf=<file>\", strprintf(\"Specify configuration file. Relative paths will be prefixed by datadir location. (default: %s)\", BITCOIN_CONF_FILENAME), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-datadir=<dir>\", \"Specify data directory\", false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-dbbatchsize\", strprintf(\"Maximum database write batch size in bytes (default: %u)\", nDefaultDbBatchSize), true, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-dbcache=<n>\", strprintf(\"Maximum database cache size <n> MiB (%d to %d, default: %d). In addition, unused mempool memory is shared for this cache (see -maxmempool).\", nMinDbCache, nMaxDbCache, nDefaultDbCache), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-debuglogfile=<file>\", strprintf(\"Specify location of debug log file. Relative paths will be prefixed by a net-specific datadir location. (-nodebuglogfile to disable; default: %s)\", DEFAULT_DEBUGLOGFILE), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-feefilter\", strprintf(\"Tell other nodes to filter invs to us by our mempool min fee (default: %u)\", DEFAULT_FEEFILTER), true, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-includeconf=<file>\", \"Specify additional configuration file, relative to the -datadir path (only useable from configuration file, not command line)\", false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-loadblock=<file>\", \"Imports blocks from external blk000??.dat file on startup\", false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-maxmempool=<n>\", strprintf(\"Keep the transaction memory pool below <n> megabytes (default: %u)\", DEFAULT_MAX_MEMPOOL_SIZE), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-maxorphantx=<n>\", strprintf(\"Keep at most <n> unconnectable transactions in memory (default: %u)\", DEFAULT_MAX_ORPHAN_TRANSACTIONS), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-mempoolexpiry=<n>\", strprintf(\"Do not keep transactions in the mempool longer than <n> hours (default: %u)\", DEFAULT_MEMPOOL_EXPIRY), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-minimumchainwork=<hex>\", strprintf(\"Minimum work assumed to exist on a valid chain in hex (default: %s, testnet: %s)\", defaultChainParams->GetConsensus().nMinimumChainWork.GetHex(), testnetChainParams->GetConsensus().nMinimumChainWork.GetHex()), true, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-version\", \"Print version and exit\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+#if HAVE_SYSTEM\n+    gArgs.AddArg(\"-alertnotify=<cmd>\", \"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+#endif\n+    gArgs.AddArg(\"-assumevalid=<hex>\", strprintf(\"If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)\", defaultChainParams->GetConsensus().defaultAssumeValid.GetHex(), testnetChainParams->GetConsensus().defaultAssumeValid.GetHex()), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-blocksdir=<dir>\", \"Specify directory to hold blocks subdirectory for *.dat files (default: <datadir>)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+#if HAVE_SYSTEM\n+    gArgs.AddArg(\"-blocknotify=<cmd>\", \"Execute command when the best block changes (%s in cmd is replaced by block hash)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+#endif\n+    gArgs.AddArg(\"-blockreconstructionextratxn=<n>\", strprintf(\"Extra transactions to keep in memory for compact block reconstructions (default: %u)\", DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-blocksonly\", strprintf(\"Whether to reject transactions from network peers. Transactions from the wallet, RPC and relay whitelisted inbound peers are not affected. (default: %u)\", DEFAULT_BLOCKSONLY), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-conf=<file>\", strprintf(\"Specify configuration file. Relative paths will be prefixed by datadir location. (default: %s)\", BITCOIN_CONF_FILENAME), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-dbbatchsize\", strprintf(\"Maximum database write batch size in bytes (default: %u)\", nDefaultDbBatchSize), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-dbcache=<n>\", strprintf(\"Maximum database cache size <n> MiB (%d to %d, default: %d). In addition, unused mempool memory is shared for this cache (see -maxmempool).\", nMinDbCache, nMaxDbCache, nDefaultDbCache), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-debuglogfile=<file>\", strprintf(\"Specify location of debug log file. Relative paths will be prefixed by a net-specific datadir location. (-nodebuglogfile to disable; default: %s)\", DEFAULT_DEBUGLOGFILE), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-feefilter\", strprintf(\"Tell other nodes to filter invs to us by our mempool min fee (default: %u)\", DEFAULT_FEEFILTER), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-includeconf=<file>\", \"Specify additional configuration file, relative to the -datadir path (only useable from configuration file, not command line)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-loadblock=<file>\", \"Imports blocks from external blk000??.dat file on startup\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-maxmempool=<n>\", strprintf(\"Keep the transaction memory pool below <n> megabytes (default: %u)\", DEFAULT_MAX_MEMPOOL_SIZE), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-maxorphantx=<n>\", strprintf(\"Keep at most <n> unconnectable transactions in memory (default: %u)\", DEFAULT_MAX_ORPHAN_TRANSACTIONS), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-mempoolexpiry=<n>\", strprintf(\"Do not keep transactions in the mempool longer than <n> hours (default: %u)\", DEFAULT_MEMPOOL_EXPIRY), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-minimumchainwork=<hex>\", strprintf(\"Minimum work assumed to exist on a valid chain in hex (default: %s, testnet: %s)\", defaultChainParams->GetConsensus().nMinimumChainWork.GetHex(), testnetChainParams->GetConsensus().nMinimumChainWork.GetHex()), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-par=<n>\", strprintf(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\",\n-        -GetNumCores(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-persistmempool\", strprintf(\"Whether to save the mempool on shutdown and load on restart (default: %u)\", DEFAULT_PERSIST_MEMPOOL), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-pid=<file>\", strprintf(\"Specify pid file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)\", BITCOIN_PID_FILENAME), false, OptionsCategory::OPTIONS);\n+        -GetNumCores(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-persistmempool\", strprintf(\"Whether to save the mempool on shutdown and load on restart (default: %u)\", DEFAULT_PERSIST_MEMPOOL), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-pid=<file>\", strprintf(\"Specify pid file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)\", BITCOIN_PID_FILENAME), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-prune=<n>\", strprintf(\"Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex and -rescan. \"\n             \"Warning: Reverting this setting requires re-downloading the entire blockchain. \"\n-            \"(default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, >=%u = automatically prune block files to stay under the specified target size in MiB)\", MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-reindex\", \"Rebuild chain state and block index from the blk*.dat files on disk\", false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-reindex-chainstate\", \"Rebuild chain state from the currently indexed blocks. When in pruning mode or if blocks on disk might be corrupted, use full -reindex instead.\", false, OptionsCategory::OPTIONS);\n+            \"(default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, >=%u = automatically prune block files to stay under the specified target size in MiB)\", MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-reindex\", \"Rebuild chain state and block index from the blk*.dat files on disk\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-reindex-chainstate\", \"Rebuild chain state from the currently indexed blocks. When in pruning mode or if blocks on disk might be corrupted, use full -reindex instead.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n #ifndef WIN32\n-    gArgs.AddArg(\"-sysperms\", \"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\", false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-sysperms\", \"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n #else\n     hidden_args.emplace_back(\"-sysperms\");\n #endif\n-    gArgs.AddArg(\"-txindex\", strprintf(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\", DEFAULT_TXINDEX), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-txindex\", strprintf(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\", DEFAULT_TXINDEX), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-blockfilterindex=<type>\",\n                  strprintf(\"Maintain an index of compact filters by block (default: %s, values: %s).\", DEFAULT_BLOCKFILTERINDEX, ListBlockFilterTypes()) +\n                  \" If <type> is not supplied or if <type> = 1, indexes for all known types are enabled.\",\n-                 false, OptionsCategory::OPTIONS);\n-\n-    gArgs.AddArg(\"-addnode=<ip>\", \"Add a node to connect to and attempt to keep the connection open (see the `addnode` RPC command help for more info). This option can be specified multiple times to add multiple nodes.\", false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-banscore=<n>\", strprintf(\"Threshold for disconnecting misbehaving peers (default: %u)\", DEFAULT_BANSCORE_THRESHOLD), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-bantime=<n>\", strprintf(\"Number of seconds to keep misbehaving peers from reconnecting (default: %u)\", DEFAULT_MISBEHAVING_BANTIME), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-bind=<addr>\", \"Bind to given address and always listen on it. Use [host]:port notation for IPv6\", false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-connect=<ip>\", \"Connect only to the specified node; -noconnect disables automatic connections (the rules for this peer are the same as for -addnode). This option can be specified multiple times to connect to multiple nodes.\", false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-discover\", \"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\", false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-dns\", strprintf(\"Allow DNS lookups for -addnode, -seednode and -connect (default: %u)\", DEFAULT_NAME_LOOKUP), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-dnsseed\", \"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect used)\", false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-enablebip61\", strprintf(\"Send reject messages per BIP61 (default: %u)\", DEFAULT_ENABLE_BIP61), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-externalip=<ip>\", \"Specify your own public address\", false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-forcednsseed\", strprintf(\"Always query for peer addresses via DNS lookup (default: %u)\", DEFAULT_FORCEDNSSEED), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-listen\", \"Accept connections from outside (default: 1 if no -proxy or -connect)\", false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-listenonion\", strprintf(\"Automatically create Tor hidden service (default: %d)\", DEFAULT_LISTEN_ONION), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-maxconnections=<n>\", strprintf(\"Maintain at most <n> connections to peers (default: %u)\", DEFAULT_MAX_PEER_CONNECTIONS), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-maxreceivebuffer=<n>\", strprintf(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\", DEFAULT_MAXRECEIVEBUFFER), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-maxsendbuffer=<n>\", strprintf(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\", DEFAULT_MAXSENDBUFFER), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-maxtimeadjustment\", strprintf(\"Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: %u seconds)\", DEFAULT_MAX_TIME_ADJUSTMENT), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-maxuploadtarget=<n>\", strprintf(\"Tries to keep outbound traffic under the given target (in MiB per 24h), 0 = no limit (default: %d)\", DEFAULT_MAX_UPLOAD_TARGET), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-onion=<ip:port>\", \"Use separate SOCKS5 proxy to reach peers via Tor hidden services, set -noonion to disable (default: -proxy)\", false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-onlynet=<net>\", \"Make outgoing connections only through network <net> (ipv4, ipv6 or onion). Incoming connections are not affected by this option. This option can be specified multiple times to allow multiple networks.\", false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-peerbloomfilters\", strprintf(\"Support filtering of blocks and transaction with bloom filters (default: %u)\", DEFAULT_PEERBLOOMFILTERS), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-permitbaremultisig\", strprintf(\"Relay non-P2SH multisig (default: %u)\", DEFAULT_PERMIT_BAREMULTISIG), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-port=<port>\", strprintf(\"Listen for connections on <port> (default: %u, testnet: %u, regtest: %u)\", defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort(), regtestChainParams->GetDefaultPort()), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-proxy=<ip:port>\", \"Connect through SOCKS5 proxy, set -noproxy to disable (default: disabled)\", false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-proxyrandomize\", strprintf(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\", DEFAULT_PROXYRANDOMIZE), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-seednode=<ip>\", \"Connect to a node to retrieve peer addresses, and disconnect. This option can be specified multiple times to connect to multiple nodes.\", false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-timeout=<n>\", strprintf(\"Specify connection timeout in milliseconds (minimum: 1, default: %d)\", DEFAULT_CONNECT_TIMEOUT), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-peertimeout=<n>\", strprintf(\"Specify p2p connection timeout in seconds. This option determines the amount of time a peer may be inactive before the connection to it is dropped. (minimum: 1, default: %d)\", DEFAULT_PEER_CONNECT_TIMEOUT), true, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-torcontrol=<ip>:<port>\", strprintf(\"Tor control port to use if onion listening enabled (default: %s)\", DEFAULT_TOR_CONTROL), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-torpassword=<pass>\", \"Tor control port password (default: empty)\", false, OptionsCategory::CONNECTION);\n+                 ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+\n+    gArgs.AddArg(\"-addnode=<ip>\", \"Add a node to connect to and attempt to keep the connection open (see the `addnode` RPC command help for more info). This option can be specified multiple times to add multiple nodes.\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-banscore=<n>\", strprintf(\"Threshold for disconnecting misbehaving peers (default: %u)\", DEFAULT_BANSCORE_THRESHOLD), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-bantime=<n>\", strprintf(\"Number of seconds to keep misbehaving peers from reconnecting (default: %u)\", DEFAULT_MISBEHAVING_BANTIME), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-bind=<addr>\", \"Bind to given address and always listen on it. Use [host]:port notation for IPv6\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-connect=<ip>\", \"Connect only to the specified node; -noconnect disables automatic connections (the rules for this peer are the same as for -addnode). This option can be specified multiple times to connect to multiple nodes.\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-discover\", \"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-dns\", strprintf(\"Allow DNS lookups for -addnode, -seednode and -connect (default: %u)\", DEFAULT_NAME_LOOKUP), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-dnsseed\", \"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect used)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-enablebip61\", strprintf(\"Send reject messages per BIP61 (default: %u)\", DEFAULT_ENABLE_BIP61), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-externalip=<ip>\", \"Specify your own public address\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-forcednsseed\", strprintf(\"Always query for peer addresses via DNS lookup (default: %u)\", DEFAULT_FORCEDNSSEED), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-listen\", \"Accept connections from outside (default: 1 if no -proxy or -connect)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-listenonion\", strprintf(\"Automatically create Tor hidden service (default: %d)\", DEFAULT_LISTEN_ONION), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-maxconnections=<n>\", strprintf(\"Maintain at most <n> connections to peers (default: %u)\", DEFAULT_MAX_PEER_CONNECTIONS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-maxreceivebuffer=<n>\", strprintf(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\", DEFAULT_MAXRECEIVEBUFFER), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-maxsendbuffer=<n>\", strprintf(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\", DEFAULT_MAXSENDBUFFER), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-maxtimeadjustment\", strprintf(\"Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: %u seconds)\", DEFAULT_MAX_TIME_ADJUSTMENT), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-maxuploadtarget=<n>\", strprintf(\"Tries to keep outbound traffic under the given target (in MiB per 24h), 0 = no limit (default: %d)\", DEFAULT_MAX_UPLOAD_TARGET), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-onion=<ip:port>\", \"Use separate SOCKS5 proxy to reach peers via Tor hidden services, set -noonion to disable (default: -proxy)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-onlynet=<net>\", \"Make outgoing connections only through network <net> (ipv4, ipv6 or onion). Incoming connections are not affected by this option. This option can be specified multiple times to allow multiple networks.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-peerbloomfilters\", strprintf(\"Support filtering of blocks and transaction with bloom filters (default: %u)\", DEFAULT_PEERBLOOMFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-permitbaremultisig\", strprintf(\"Relay non-P2SH multisig (default: %u)\", DEFAULT_PERMIT_BAREMULTISIG), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-port=<port>\", strprintf(\"Listen for connections on <port> (default: %u, testnet: %u, regtest: %u)\", defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort(), regtestChainParams->GetDefaultPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-proxy=<ip:port>\", \"Connect through SOCKS5 proxy, set -noproxy to disable (default: disabled)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-proxyrandomize\", strprintf(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\", DEFAULT_PROXYRANDOMIZE), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-seednode=<ip>\", \"Connect to a node to retrieve peer addresses, and disconnect. This option can be specified multiple times to connect to multiple nodes.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-timeout=<n>\", strprintf(\"Specify connection timeout in milliseconds (minimum: 1, default: %d)\", DEFAULT_CONNECT_TIMEOUT), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-peertimeout=<n>\", strprintf(\"Specify p2p connection timeout in seconds. This option determines the amount of time a peer may be inactive before the connection to it is dropped. (minimum: 1, default: %d)\", DEFAULT_PEER_CONNECT_TIMEOUT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-torcontrol=<ip>:<port>\", strprintf(\"Tor control port to use if onion listening enabled (default: %s)\", DEFAULT_TOR_CONTROL), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-torpassword=<pass>\", \"Tor control port password (default: empty)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n #ifdef USE_UPNP\n #if USE_UPNP\n-    gArgs.AddArg(\"-upnp\", \"Use UPnP to map the listening port (default: 1 when listening and no -proxy)\", false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-upnp\", \"Use UPnP to map the listening port (default: 1 when listening and no -proxy)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n #else\n-    gArgs.AddArg(\"-upnp\", strprintf(\"Use UPnP to map the listening port (default: %u)\", 0), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-upnp\", strprintf(\"Use UPnP to map the listening port (default: %u)\", 0), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n #endif\n #else\n     hidden_args.emplace_back(\"-upnp\");\n #endif\n-    gArgs.AddArg(\"-whitebind=<addr>\", \"Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6\", false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-whitebind=<addr>\", \"Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-whitelist=<IP address or network>\", \"Whitelist peers connecting from the given IP address (e.g. 1.2.3.4) or CIDR notated network (e.g. 1.2.3.0/24). Can be specified multiple times.\"\n-        \" Whitelisted peers cannot be DoS banned\", false, OptionsCategory::CONNECTION);\n+        \" Whitelisted peers cannot be DoS banned\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n \n     g_wallet_init_interface.AddWalletOptions();\n \n #if ENABLE_ZMQ\n-    gArgs.AddArg(\"-zmqpubhashblock=<address>\", \"Enable publish hash block in <address>\", false, OptionsCategory::ZMQ);\n-    gArgs.AddArg(\"-zmqpubhashtx=<address>\", \"Enable publish hash transaction in <address>\", false, OptionsCategory::ZMQ);\n-    gArgs.AddArg(\"-zmqpubrawblock=<address>\", \"Enable publish raw block in <address>\", false, OptionsCategory::ZMQ);\n-    gArgs.AddArg(\"-zmqpubrawtx=<address>\", \"Enable publish raw transaction in <address>\", false, OptionsCategory::ZMQ);\n-    gArgs.AddArg(\"-zmqpubhashblockhwm=<n>\", strprintf(\"Set publish hash block outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), false, OptionsCategory::ZMQ);\n-    gArgs.AddArg(\"-zmqpubhashtxhwm=<n>\", strprintf(\"Set publish hash transaction outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), false, OptionsCategory::ZMQ);\n-    gArgs.AddArg(\"-zmqpubrawblockhwm=<n>\", strprintf(\"Set publish raw block outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), false, OptionsCategory::ZMQ);\n-    gArgs.AddArg(\"-zmqpubrawtxhwm=<n>\", strprintf(\"Set publish raw transaction outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), false, OptionsCategory::ZMQ);\n+    gArgs.AddArg(\"-zmqpubhashblock=<address>\", \"Enable publish hash block in <address>\", ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n+    gArgs.AddArg(\"-zmqpubhashtx=<address>\", \"Enable publish hash transaction in <address>\", ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n+    gArgs.AddArg(\"-zmqpubrawblock=<address>\", \"Enable publish raw block in <address>\", ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n+    gArgs.AddArg(\"-zmqpubrawtx=<address>\", \"Enable publish raw transaction in <address>\", ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n+    gArgs.AddArg(\"-zmqpubhashblockhwm=<n>\", strprintf(\"Set publish hash block outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n+    gArgs.AddArg(\"-zmqpubhashtxhwm=<n>\", strprintf(\"Set publish hash transaction outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n+    gArgs.AddArg(\"-zmqpubrawblockhwm=<n>\", strprintf(\"Set publish raw block outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n+    gArgs.AddArg(\"-zmqpubrawtxhwm=<n>\", strprintf(\"Set publish raw transaction outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n #else\n     hidden_args.emplace_back(\"-zmqpubhashblock=<address>\");\n     hidden_args.emplace_back(\"-zmqpubhashtx=<address>\");\n@@ -479,76 +464,76 @@ void SetupServerArgs()\n     hidden_args.emplace_back(\"-zmqpubrawtxhwm=<n>\");\n #endif\n \n-    gArgs.AddArg(\"-checkblocks=<n>\", strprintf(\"How many blocks to check at startup (default: %u, 0 = all)\", DEFAULT_CHECKBLOCKS), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-checkblocks=<n>\", strprintf(\"How many blocks to check at startup (default: %u, 0 = all)\", DEFAULT_CHECKBLOCKS), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-checklevel=<n>\", strprintf(\"How thorough the block verification of -checkblocks is: \"\n         \"level 0 reads the blocks from disk, \"\n         \"level 1 verifies block validity, \"\n         \"level 2 verifies undo data, \"\n         \"level 3 checks disconnection of tip blocks, \"\n         \"and level 4 tries to reconnect the blocks, \"\n         \"each level includes the checks of the previous levels \"\n-        \"(0-4, default: %u)\", DEFAULT_CHECKLEVEL), true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-checkblockindex\", strprintf(\"Do a full consistency check for mapBlockIndex, setBlockIndexCandidates, ::ChainActive() and mapBlocksUnlinked occasionally. (default: %u, regtest: %u)\", defaultChainParams->DefaultConsistencyChecks(), regtestChainParams->DefaultConsistencyChecks()), true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-checkmempool=<n>\", strprintf(\"Run checks every <n> transactions (default: %u, regtest: %u)\", defaultChainParams->DefaultConsistencyChecks(), regtestChainParams->DefaultConsistencyChecks()), true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-checkpoints\", strprintf(\"Disable expensive verification for known chain history (default: %u)\", DEFAULT_CHECKPOINTS_ENABLED), true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-deprecatedrpc=<method>\", \"Allows deprecated RPC method(s) to be used\", true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-dropmessagestest=<n>\", \"Randomly drop 1 of every <n> network messages\", true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-stopafterblockimport\", strprintf(\"Stop running after importing blocks from disk (default: %u)\", DEFAULT_STOPAFTERBLOCKIMPORT), true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-stopatheight\", strprintf(\"Stop running after reaching the given height in the main chain (default: %u)\", DEFAULT_STOPATHEIGHT), true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-limitancestorcount=<n>\", strprintf(\"Do not accept transactions if number of in-mempool ancestors is <n> or more (default: %u)\", DEFAULT_ANCESTOR_LIMIT), true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-limitancestorsize=<n>\", strprintf(\"Do not accept transactions whose size with all in-mempool ancestors exceeds <n> kilobytes (default: %u)\", DEFAULT_ANCESTOR_SIZE_LIMIT), true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT), true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT), true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-addrmantest\", \"Allows to test address relay on localhost\", true, OptionsCategory::DEBUG_TEST);\n+        \"(0-4, default: %u)\", DEFAULT_CHECKLEVEL), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-checkblockindex\", strprintf(\"Do a full consistency check for the block tree, setBlockIndexCandidates, ::ChainActive() and mapBlocksUnlinked occasionally. (default: %u, regtest: %u)\", defaultChainParams->DefaultConsistencyChecks(), regtestChainParams->DefaultConsistencyChecks()), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-checkmempool=<n>\", strprintf(\"Run checks every <n> transactions (default: %u, regtest: %u)\", defaultChainParams->DefaultConsistencyChecks(), regtestChainParams->DefaultConsistencyChecks()), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-checkpoints\", strprintf(\"Disable expensive verification for known chain history (default: %u)\", DEFAULT_CHECKPOINTS_ENABLED), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-deprecatedrpc=<method>\", \"Allows deprecated RPC method(s) to be used\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-dropmessagestest=<n>\", \"Randomly drop 1 of every <n> network messages\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-stopafterblockimport\", strprintf(\"Stop running after importing blocks from disk (default: %u)\", DEFAULT_STOPAFTERBLOCKIMPORT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-stopatheight\", strprintf(\"Stop running after reaching the given height in the main chain (default: %u)\", DEFAULT_STOPATHEIGHT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-limitancestorcount=<n>\", strprintf(\"Do not accept transactions if number of in-mempool ancestors is <n> or more (default: %u)\", DEFAULT_ANCESTOR_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-limitancestorsize=<n>\", strprintf(\"Do not accept transactions whose size with all in-mempool ancestors exceeds <n> kilobytes (default: %u)\", DEFAULT_ANCESTOR_SIZE_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-addrmantest\", \"Allows to test address relay on localhost\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-debug=<category>\", \"Output debugging information (default: -nodebug, supplying <category> is optional). \"\n-        \"If <category> is not supplied or if <category> = 1, output all debugging information. <category> can be: \" + ListLogCategories() + \".\", false, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-debugexclude=<category>\", strprintf(\"Exclude debugging information for a category. Can be used in conjunction with -debug=1 to output debug logs for all categories except one or more specified categories.\"), false, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-logips\", strprintf(\"Include IP addresses in debug output (default: %u)\", DEFAULT_LOGIPS), false, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-logtimestamps\", strprintf(\"Prepend debug output with timestamp (default: %u)\", DEFAULT_LOGTIMESTAMPS), false, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-logthreadnames\", strprintf(\"Prepend debug output with name of the originating thread (only available on platforms supporting thread_local) (default: %u)\", DEFAULT_LOGTHREADNAMES), false, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-logtimemicros\", strprintf(\"Add microsecond precision to debug timestamps (default: %u)\", DEFAULT_LOGTIMEMICROS), true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-mocktime=<n>\", \"Replace actual time with <n> seconds since epoch (default: 0)\", true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-maxsigcachesize=<n>\", strprintf(\"Limit sum of signature cache and script execution cache sizes to <n> MiB (default: %u)\", DEFAULT_MAX_SIG_CACHE_SIZE), true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-maxtipage=<n>\", strprintf(\"Maximum tip age in seconds to consider node in initial block download (default: %u)\", DEFAULT_MAX_TIP_AGE), true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-printpriority\", strprintf(\"Log transaction fee per kB when mining blocks (default: %u)\", DEFAULT_PRINTPRIORITY), true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -daemon. To disable logging to file, set -nodebuglogfile)\", false, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-shrinkdebugfile\", \"Shrink debug.log file on client startup (default: 1 when no -debug)\", false, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-uacomment=<cmt>\", \"Append comment to the user agent string\", false, OptionsCategory::DEBUG_TEST);\n+        \"If <category> is not supplied or if <category> = 1, output all debugging information. <category> can be: \" + ListLogCategories() + \".\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-debugexclude=<category>\", strprintf(\"Exclude debugging information for a category. Can be used in conjunction with -debug=1 to output debug logs for all categories except one or more specified categories.\"), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-logips\", strprintf(\"Include IP addresses in debug output (default: %u)\", DEFAULT_LOGIPS), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-logtimestamps\", strprintf(\"Prepend debug output with timestamp (default: %u)\", DEFAULT_LOGTIMESTAMPS), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-logthreadnames\", strprintf(\"Prepend debug output with name of the originating thread (only available on platforms supporting thread_local) (default: %u)\", DEFAULT_LOGTHREADNAMES), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-logtimemicros\", strprintf(\"Add microsecond precision to debug timestamps (default: %u)\", DEFAULT_LOGTIMEMICROS), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-mocktime=<n>\", \"Replace actual time with <n> seconds since epoch (default: 0)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-maxsigcachesize=<n>\", strprintf(\"Limit sum of signature cache and script execution cache sizes to <n> MiB (default: %u)\", DEFAULT_MAX_SIG_CACHE_SIZE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-maxtipage=<n>\", strprintf(\"Maximum tip age in seconds to consider node in initial block download (default: %u)\", DEFAULT_MAX_TIP_AGE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-printpriority\", strprintf(\"Log transaction fee per kB when mining blocks (default: %u)\", DEFAULT_PRINTPRIORITY), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -daemon. To disable logging to file, set -nodebuglogfile)\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-shrinkdebugfile\", \"Shrink debug.log file on client startup (default: 1 when no -debug)\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-uacomment=<cmt>\", \"Append comment to the user agent string\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n \n     SetupChainParamsBaseOptions();\n \n-    gArgs.AddArg(\"-acceptnonstdtxn\", strprintf(\"Relay and mine \\\"non-standard\\\" transactions (%sdefault: %u)\", \"testnet/regtest only; \", !testnetChainParams->RequireStandard()), true, OptionsCategory::NODE_RELAY);\n-    gArgs.AddArg(\"-incrementalrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to define cost of relay, used for mempool limiting and BIP 125 replacement. (default: %s)\", CURRENCY_UNIT, FormatMoney(DEFAULT_INCREMENTAL_RELAY_FEE)), true, OptionsCategory::NODE_RELAY);\n-    gArgs.AddArg(\"-dustrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to define dust, the value of an output such that it will cost more than its value in fees at this fee rate to spend it. (default: %s)\", CURRENCY_UNIT, FormatMoney(DUST_RELAY_TX_FEE)), true, OptionsCategory::NODE_RELAY);\n-    gArgs.AddArg(\"-bytespersigop\", strprintf(\"Equivalent bytes per sigop in transactions for relay and mining (default: %u)\", DEFAULT_BYTES_PER_SIGOP), false, OptionsCategory::NODE_RELAY);\n-    gArgs.AddArg(\"-datacarrier\", strprintf(\"Relay and mine data carrier transactions (default: %u)\", DEFAULT_ACCEPT_DATACARRIER), false, OptionsCategory::NODE_RELAY);\n-    gArgs.AddArg(\"-datacarriersize\", strprintf(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\", MAX_OP_RETURN_RELAY), false, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-acceptnonstdtxn\", strprintf(\"Relay and mine \\\"non-standard\\\" transactions (%sdefault: %u)\", \"testnet/regtest only; \", !testnetChainParams->RequireStandard()), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-incrementalrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to define cost of relay, used for mempool limiting and BIP 125 replacement. (default: %s)\", CURRENCY_UNIT, FormatMoney(DEFAULT_INCREMENTAL_RELAY_FEE)), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-dustrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to define dust, the value of an output such that it will cost more than its value in fees at this fee rate to spend it. (default: %s)\", CURRENCY_UNIT, FormatMoney(DUST_RELAY_TX_FEE)), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-bytespersigop\", strprintf(\"Equivalent bytes per sigop in transactions for relay and mining (default: %u)\", DEFAULT_BYTES_PER_SIGOP), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-datacarrier\", strprintf(\"Relay and mine data carrier transactions (default: %u)\", DEFAULT_ACCEPT_DATACARRIER), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-datacarriersize\", strprintf(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\", MAX_OP_RETURN_RELAY), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n     gArgs.AddArg(\"-minrelaytxfee=<amt>\", strprintf(\"Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)\",\n-        CURRENCY_UNIT, FormatMoney(DEFAULT_MIN_RELAY_TX_FEE)), false, OptionsCategory::NODE_RELAY);\n-    gArgs.AddArg(\"-whitelistforcerelay\", strprintf(\"Force relay of transactions from whitelisted peers even if the transactions were already in the mempool or violate local relay policy (default: %d)\", DEFAULT_WHITELISTFORCERELAY), false, OptionsCategory::NODE_RELAY);\n-    gArgs.AddArg(\"-whitelistrelay\", strprintf(\"Accept relayed transactions received from whitelisted peers even when not relaying transactions (default: %d)\", DEFAULT_WHITELISTRELAY), false, OptionsCategory::NODE_RELAY);\n-\n-\n-    gArgs.AddArg(\"-blockmaxweight=<n>\", strprintf(\"Set maximum BIP141 block weight (default: %d)\", DEFAULT_BLOCK_MAX_WEIGHT), false, OptionsCategory::BLOCK_CREATION);\n-    gArgs.AddArg(\"-blockmintxfee=<amt>\", strprintf(\"Set lowest fee rate (in %s/kB) for transactions to be included in block creation. (default: %s)\", CURRENCY_UNIT, FormatMoney(DEFAULT_BLOCK_MIN_TX_FEE)), false, OptionsCategory::BLOCK_CREATION);\n-    gArgs.AddArg(\"-blockversion=<n>\", \"Override block version to test forking scenarios\", true, OptionsCategory::BLOCK_CREATION);\n-\n-    gArgs.AddArg(\"-rest\", strprintf(\"Accept public REST requests (default: %u)\", DEFAULT_REST_ENABLE), false, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcallowip=<ip>\", \"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\", false, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcauth=<userpw>\", \"Username and HMAC-SHA-256 hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is included in share/rpcauth. The client then connects normally using the rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This option can be specified multiple times\", false, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcbind=<addr>[:port]\", \"Bind to given address to listen for JSON-RPC connections. Do not expose the RPC server to untrusted networks such as the public internet! This option is ignored unless -rpcallowip is also passed. Port is optional and overrides -rpcport. Use [host]:port notation for IPv6. This option can be specified multiple times (default: 127.0.0.1 and ::1 i.e., localhost)\", false, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpccookiefile=<loc>\", \"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)\", false, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcpassword=<pw>\", \"Password for JSON-RPC connections\", false, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcport=<port>\", strprintf(\"Listen for JSON-RPC connections on <port> (default: %u, testnet: %u, regtest: %u)\", defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort(), regtestBaseParams->RPCPort()), false, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcserialversion\", strprintf(\"Sets the serialization of raw transaction or block hex returned in non-verbose mode, non-segwit(0) or segwit(1) (default: %d)\", DEFAULT_RPC_SERIALIZE_VERSION), false, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcservertimeout=<n>\", strprintf(\"Timeout during HTTP requests (default: %d)\", DEFAULT_HTTP_SERVER_TIMEOUT), true, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcthreads=<n>\", strprintf(\"Set the number of threads to service RPC calls (default: %d)\", DEFAULT_HTTP_THREADS), false, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcuser=<user>\", \"Username for JSON-RPC connections\", false, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcworkqueue=<n>\", strprintf(\"Set the depth of the work queue to service RPC calls (default: %d)\", DEFAULT_HTTP_WORKQUEUE), true, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-server\", \"Accept command line and JSON-RPC commands\", false, OptionsCategory::RPC);\n+        CURRENCY_UNIT, FormatMoney(DEFAULT_MIN_RELAY_TX_FEE)), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-whitelistforcerelay\", strprintf(\"Force relay of transactions from whitelisted inbound peers even if the transactions were already in the mempool or violate local relay policy (default: %d)\", DEFAULT_WHITELISTFORCERELAY), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-whitelistrelay\", strprintf(\"Accept relayed transactions received from whitelisted inbound peers even when not relaying transactions (default: %d)\", DEFAULT_WHITELISTRELAY), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n+\n+\n+    gArgs.AddArg(\"-blockmaxweight=<n>\", strprintf(\"Set maximum BIP141 block weight (default: %d)\", DEFAULT_BLOCK_MAX_WEIGHT), ArgsManager::ALLOW_ANY, OptionsCategory::BLOCK_CREATION);\n+    gArgs.AddArg(\"-blockmintxfee=<amt>\", strprintf(\"Set lowest fee rate (in %s/kB) for transactions to be included in block creation. (default: %s)\", CURRENCY_UNIT, FormatMoney(DEFAULT_BLOCK_MIN_TX_FEE)), ArgsManager::ALLOW_ANY, OptionsCategory::BLOCK_CREATION);\n+    gArgs.AddArg(\"-blockversion=<n>\", \"Override block version to test forking scenarios\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::BLOCK_CREATION);\n+\n+    gArgs.AddArg(\"-rest\", strprintf(\"Accept public REST requests (default: %u)\", DEFAULT_REST_ENABLE), ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcallowip=<ip>\", \"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcauth=<userpw>\", \"Username and HMAC-SHA-256 hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is included in share/rpcauth. The client then connects normally using the rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This option can be specified multiple times\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcbind=<addr>[:port]\", \"Bind to given address to listen for JSON-RPC connections. Do not expose the RPC server to untrusted networks such as the public internet! This option is ignored unless -rpcallowip is also passed. Port is optional and overrides -rpcport. Use [host]:port notation for IPv6. This option can be specified multiple times (default: 127.0.0.1 and ::1 i.e., localhost)\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpccookiefile=<loc>\", \"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcpassword=<pw>\", \"Password for JSON-RPC connections\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcport=<port>\", strprintf(\"Listen for JSON-RPC connections on <port> (default: %u, testnet: %u, regtest: %u)\", defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort(), regtestBaseParams->RPCPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcserialversion\", strprintf(\"Sets the serialization of raw transaction or block hex returned in non-verbose mode, non-segwit(0) or segwit(1) (default: %d)\", DEFAULT_RPC_SERIALIZE_VERSION), ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcservertimeout=<n>\", strprintf(\"Timeout during HTTP requests (default: %d)\", DEFAULT_HTTP_SERVER_TIMEOUT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcthreads=<n>\", strprintf(\"Set the number of threads to service RPC calls (default: %d)\", DEFAULT_HTTP_THREADS), ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcuser=<user>\", \"Username for JSON-RPC connections\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcworkqueue=<n>\", strprintf(\"Set the depth of the work queue to service RPC calls (default: %d)\", DEFAULT_HTTP_WORKQUEUE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-server\", \"Accept command line and JSON-RPC commands\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n \n #if HAVE_DECL_DAEMON\n-    gArgs.AddArg(\"-daemon\", \"Run in the background as a daemon and accept commands\", false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-daemon\", \"Run in the background as a daemon and accept commands\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n #else\n     hidden_args.emplace_back(\"-daemon\");\n #endif\n@@ -562,23 +547,24 @@ std::string LicenseInfo()\n     const std::string URL_SOURCE_CODE = \"<https://github.com/bitcoin/bitcoin>\";\n     const std::string URL_WEBSITE = \"<https://bitcoincore.org>\";\n \n-    return CopyrightHolders(strprintf(_(\"Copyright (C) %i-%i\"), 2009, COPYRIGHT_YEAR) + \" \") + \"\\n\" +\n+    return CopyrightHolders(strprintf(_(\"Copyright (C) %i-%i\").translated, 2009, COPYRIGHT_YEAR) + \" \") + \"\\n\" +\n            \"\\n\" +\n            strprintf(_(\"Please contribute if you find %s useful. \"\n-                       \"Visit %s for further information about the software.\"),\n+                       \"Visit %s for further information about the software.\").translated,\n                PACKAGE_NAME, URL_WEBSITE) +\n            \"\\n\" +\n-           strprintf(_(\"The source code is available from %s.\"),\n+           strprintf(_(\"The source code is available from %s.\").translated,\n                URL_SOURCE_CODE) +\n            \"\\n\" +\n            \"\\n\" +\n-           _(\"This is experimental software.\") + \"\\n\" +\n-           strprintf(_(\"Distributed under the MIT software license, see the accompanying file %s or %s\"), \"COPYING\", \"<https://opensource.org/licenses/MIT>\") + \"\\n\" +\n+           _(\"This is experimental software.\").translated + \"\\n\" +\n+           strprintf(_(\"Distributed under the MIT software license, see the accompanying file %s or %s\").translated, \"COPYING\", \"<https://opensource.org/licenses/MIT>\") + \"\\n\" +\n            \"\\n\" +\n-           strprintf(_(\"This product includes software developed by the OpenSSL Project for use in the OpenSSL Toolkit %s and cryptographic software written by Eric Young and UPnP software written by Thomas Bernard.\"), \"<https://www.openssl.org>\") +\n+           strprintf(_(\"This product includes software developed by the OpenSSL Project for use in the OpenSSL Toolkit %s and cryptographic software written by Eric Young and UPnP software written by Thomas Bernard.\").translated, \"<https://www.openssl.org>\") +\n            \"\\n\";\n }\n \n+#if HAVE_SYSTEM\n static void BlockNotifyCallback(bool initialSync, const CBlockIndex *pBlockIndex)\n {\n     if (initialSync || !pBlockIndex)\n@@ -591,6 +577,7 @@ static void BlockNotifyCallback(bool initialSync, const CBlockIndex *pBlockIndex\n         t.detach(); // thread runs free\n     }\n }\n+#endif\n \n static bool fHaveGenesis = false;\n static Mutex g_genesis_wait_mutex;\n@@ -837,11 +824,6 @@ void InitParameterInteraction()\n     }\n }\n \n-static std::string ResolveErrMsg(const char * const optname, const std::string& strBind)\n-{\n-    return strprintf(_(\"Cannot resolve -%s address: '%s'\"), optname, strBind);\n-}\n-\n /**\n  * Initialize global loggers.\n  *\n@@ -945,16 +927,16 @@ bool AppInitParameterInteraction()\n     // on the command line or in this network's section of the config file.\n     std::string network = gArgs.GetChainName();\n     for (const auto& arg : gArgs.GetUnsuitableSectionOnlyArgs()) {\n-        return InitError(strprintf(_(\"Config setting for %s only applied on %s network when in [%s] section.\"), arg, network, network));\n+        return InitError(strprintf(_(\"Config setting for %s only applied on %s network when in [%s] section.\").translated, arg, network, network));\n     }\n \n     // Warn if unrecognized section name are present in the config file.\n     for (const auto& section : gArgs.GetUnrecognizedSections()) {\n-        InitWarning(strprintf(\"%s:%i \" + _(\"Section [%s] is not recognized.\"), section.m_file, section.m_line, section.m_name));\n+        InitWarning(strprintf(\"%s:%i \" + _(\"Section [%s] is not recognized.\").translated, section.m_file, section.m_line, section.m_name));\n     }\n \n     if (!fs::is_directory(GetBlocksDir())) {\n-        return InitError(strprintf(_(\"Specified blocks directory \\\"%s\\\" does not exist.\"), gArgs.GetArg(\"-blocksdir\", \"\").c_str()));\n+        return InitError(strprintf(_(\"Specified blocks directory \\\"%s\\\" does not exist.\").translated, gArgs.GetArg(\"-blocksdir\", \"\").c_str()));\n     }\n \n     // parse and validate enabled filter types\n@@ -967,7 +949,7 @@ bool AppInitParameterInteraction()\n         for (const auto& name : names) {\n             BlockFilterType filter_type;\n             if (!BlockFilterTypeByName(name, filter_type)) {\n-                return InitError(strprintf(_(\"Unknown -blockfilterindex value %s.\"), name));\n+                return InitError(strprintf(_(\"Unknown -blockfilterindex value %s.\").translated, name));\n             }\n             g_enabled_filter_types.push_back(filter_type);\n         }\n@@ -976,9 +958,9 @@ bool AppInitParameterInteraction()\n     // if using block pruning, then disallow txindex\n     if (gArgs.GetArg(\"-prune\", 0)) {\n         if (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n-            return InitError(_(\"Prune mode is incompatible with -txindex.\"));\n+            return InitError(_(\"Prune mode is incompatible with -txindex.\").translated);\n         if (!g_enabled_filter_types.empty()) {\n-            return InitError(_(\"Prune mode is incompatible with -blockfilterindex.\"));\n+            return InitError(_(\"Prune mode is incompatible with -blockfilterindex.\").translated);\n         }\n     }\n \n@@ -1003,11 +985,11 @@ bool AppInitParameterInteraction()\n #endif\n     nMaxConnections = std::max(std::min<int>(nMaxConnections, fd_max - nBind - MIN_CORE_FILEDESCRIPTORS - MAX_ADDNODE_CONNECTIONS), 0);\n     if (nFD < MIN_CORE_FILEDESCRIPTORS)\n-        return InitError(_(\"Not enough file descriptors available.\"));\n+        return InitError(_(\"Not enough file descriptors available.\").translated);\n     nMaxConnections = std::min(nFD - MIN_CORE_FILEDESCRIPTORS - MAX_ADDNODE_CONNECTIONS, nMaxConnections);\n \n     if (nMaxConnections < nUserMaxConnections)\n-        InitWarning(strprintf(_(\"Reducing -maxconnections from %d to %d, because of system limitations.\"), nUserMaxConnections, nMaxConnections));\n+        InitWarning(strprintf(_(\"Reducing -maxconnections from %d to %d, because of system limitations.\").translated, nUserMaxConnections, nMaxConnections));\n \n     // ********************************************************* Step 3: parameter-to-internal-flags\n     if (gArgs.IsArgSet(\"-debug\")) {\n@@ -1018,7 +1000,7 @@ bool AppInitParameterInteraction()\n             [](std::string cat){return cat == \"0\" || cat == \"none\";})) {\n             for (const auto& cat : categories) {\n                 if (!LogInstance().EnableCategory(cat)) {\n-                    InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debug\", cat));\n+                    InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\").translated, \"-debug\", cat));\n                 }\n             }\n         }\n@@ -1027,7 +1009,7 @@ bool AppInitParameterInteraction()\n     // Now remove the logging categories which were explicitly excluded\n     for (const std::string& cat : gArgs.GetArgs(\"-debugexclude\")) {\n         if (!LogInstance().DisableCategory(cat)) {\n-            InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debugexclude\", cat));\n+            InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\").translated, \"-debugexclude\", cat));\n         }\n     }\n \n@@ -1063,7 +1045,7 @@ bool AppInitParameterInteraction()\n     int64_t nMempoolSizeMax = gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     int64_t nMempoolSizeMin = gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000 * 40;\n     if (nMempoolSizeMax < 0 || nMempoolSizeMax < nMempoolSizeMin)\n-        return InitError(strprintf(_(\"-maxmempool must be at least %d MB\"), std::ceil(nMempoolSizeMin / 1000000.0)));\n+        return InitError(strprintf(_(\"-maxmempool must be at least %d MB\").translated, std::ceil(nMempoolSizeMin / 1000000.0)));\n     // incremental relay fee sets the minimum feerate increase necessary for BIP 125 replacement in the mempool\n     // and the amount the mempool min fee increases above the feerate of txs evicted due to mempool limiting.\n     if (gArgs.IsArgSet(\"-incrementalrelayfee\"))\n@@ -1086,7 +1068,7 @@ bool AppInitParameterInteraction()\n     // block pruning; get the amount of disk space (in MiB) to allot for block & undo files\n     int64_t nPruneArg = gArgs.GetArg(\"-prune\", 0);\n     if (nPruneArg < 0) {\n-        return InitError(_(\"Prune cannot be configured with a negative value.\"));\n+        return InitError(_(\"Prune cannot be configured with a negative value.\").translated);\n     }\n     nPruneTarget = (uint64_t) nPruneArg * 1024 * 1024;\n     if (nPruneArg == 1) {  // manual pruning: -prune=1\n@@ -1095,7 +1077,7 @@ bool AppInitParameterInteraction()\n         fPruneMode = true;\n     } else if (nPruneTarget) {\n         if (nPruneTarget < MIN_DISK_SPACE_FOR_BLOCK_FILES) {\n-            return InitError(strprintf(_(\"Prune configured below the minimum of %d MiB.  Please use a higher number.\"), MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024));\n+            return InitError(strprintf(_(\"Prune configured below the minimum of %d MiB.  Please use a higher number.\").translated, MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024));\n         }\n         LogPrintf(\"Prune configured to target %u MiB on disk for block and undo files.\\n\", nPruneTarget / 1024 / 1024);\n         fPruneMode = true;\n@@ -1144,8 +1126,9 @@ bool AppInitParameterInteraction()\n     }\n \n     fRequireStandard = !gArgs.GetBoolArg(\"-acceptnonstdtxn\", !chainparams.RequireStandard());\n-    if (chainparams.RequireStandard() && !fRequireStandard)\n+    if (!chainparams.IsTestChain() && !fRequireStandard) {\n         return InitError(strprintf(\"acceptnonstdtxn is not currently supported for %s chain\", chainparams.NetworkIDString()));\n+    }\n     nBytesPerSigOp = gArgs.GetArg(\"-bytespersigop\", nBytesPerSigOp);\n \n     if (!g_wallet_init_interface.ParameterInteraction()) return false;\n@@ -1176,10 +1159,10 @@ static bool LockDataDirectory(bool probeOnly)\n     // Make sure only a single Bitcoin process is using the data directory.\n     fs::path datadir = GetDataDir();\n     if (!DirIsWritable(datadir)) {\n-        return InitError(strprintf(_(\"Cannot write to data directory '%s'; check permissions.\"), datadir.string()));\n+        return InitError(strprintf(_(\"Cannot write to data directory '%s'; check permissions.\").translated, datadir.string()));\n     }\n     if (!LockDirectory(datadir, \".lock\", probeOnly)) {\n-        return InitError(strprintf(_(\"Cannot obtain a lock on data directory %s. %s is probably already running.\"), datadir.string(), _(PACKAGE_NAME)));\n+        return InitError(strprintf(_(\"Cannot obtain a lock on data directory %s. %s is probably already running.\").translated, datadir.string(), PACKAGE_NAME));\n     }\n     return true;\n }\n@@ -1197,7 +1180,7 @@ bool AppInitSanityChecks()\n \n     // Sanity check\n     if (!InitSanityCheck())\n-        return InitError(strprintf(_(\"Initialization sanity check failed. %s is shutting down.\"), _(PACKAGE_NAME)));\n+        return InitError(strprintf(_(\"Initialization sanity check failed. %s is shutting down.\").translated, PACKAGE_NAME));\n \n     // Probe the data directory lock to give an early error message, if possible\n     // We cannot hold the data directory lock here, as the forking for daemon() hasn't yet happened,\n@@ -1248,7 +1231,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n         LogPrintf(\"Config file: %s\\n\", config_file_path.string());\n     } else if (gArgs.IsArgSet(\"-conf\")) {\n         // Warn if no conf file exists at path provided by user\n-        InitWarning(strprintf(_(\"The specified config file %s does not exist\\n\"), config_file_path.string()));\n+        InitWarning(strprintf(_(\"The specified config file %s does not exist\\n\").translated, config_file_path.string()));\n     } else {\n         // Not categorizing as \"Warning\" because it's the default behavior\n         LogPrintf(\"Config file: %s (not found, skipping)\\n\", config_file_path.string());\n@@ -1308,7 +1291,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n     {\n         uiInterface.InitMessage_connect(SetRPCWarmupStatus);\n         if (!AppInitServers())\n-            return InitError(_(\"Unable to start HTTP server. See debug log for details.\"));\n+            return InitError(_(\"Unable to start HTTP server. See debug log for details.\").translated);\n     }\n \n     // ********************************************************* Step 5: verify wallet database integrity\n@@ -1336,12 +1319,12 @@ bool AppInitMain(InitInterfaces& interfaces)\n     std::vector<std::string> uacomments;\n     for (const std::string& cmt : gArgs.GetArgs(\"-uacomment\")) {\n         if (cmt != SanitizeString(cmt, SAFE_CHARS_UA_COMMENT))\n-            return InitError(strprintf(_(\"User Agent comment (%s) contains unsafe characters.\"), cmt));\n+            return InitError(strprintf(_(\"User Agent comment (%s) contains unsafe characters.\").translated, cmt));\n         uacomments.push_back(cmt);\n     }\n     strSubVersion = FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, uacomments);\n     if (strSubVersion.size() > MAX_SUBVERSION_LENGTH) {\n-        return InitError(strprintf(_(\"Total length of network version string (%i) exceeds maximum length (%i). Reduce the number or size of uacomments.\"),\n+        return InitError(strprintf(_(\"Total length of network version string (%i) exceeds maximum length (%i). Reduce the number or size of uacomments.\").translated,\n             strSubVersion.size(), MAX_SUBVERSION_LENGTH));\n     }\n \n@@ -1350,7 +1333,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n         for (const std::string& snet : gArgs.GetArgs(\"-onlynet\")) {\n             enum Network net = ParseNetwork(snet);\n             if (net == NET_UNROUTABLE)\n-                return InitError(strprintf(_(\"Unknown network specified in -onlynet: '%s'\"), snet));\n+                return InitError(strprintf(_(\"Unknown network specified in -onlynet: '%s'\").translated, snet));\n             nets.insert(net);\n         }\n         for (int n = 0; n < NET_MAX; n++) {\n@@ -1371,12 +1354,12 @@ bool AppInitMain(InitInterfaces& interfaces)\n     if (proxyArg != \"\" && proxyArg != \"0\") {\n         CService proxyAddr;\n         if (!Lookup(proxyArg.c_str(), proxyAddr, 9050, fNameLookup)) {\n-            return InitError(strprintf(_(\"Invalid -proxy address or hostname: '%s'\"), proxyArg));\n+            return InitError(strprintf(_(\"Invalid -proxy address or hostname: '%s'\").translated, proxyArg));\n         }\n \n         proxyType addrProxy = proxyType(proxyAddr, proxyRandomize);\n         if (!addrProxy.IsValid())\n-            return InitError(strprintf(_(\"Invalid -proxy address or hostname: '%s'\"), proxyArg));\n+            return InitError(strprintf(_(\"Invalid -proxy address or hostname: '%s'\").translated, proxyArg));\n \n         SetProxy(NET_IPV4, addrProxy);\n         SetProxy(NET_IPV6, addrProxy);\n@@ -1395,11 +1378,11 @@ bool AppInitMain(InitInterfaces& interfaces)\n         } else {\n             CService onionProxy;\n             if (!Lookup(onionArg.c_str(), onionProxy, 9050, fNameLookup)) {\n-                return InitError(strprintf(_(\"Invalid -onion address or hostname: '%s'\"), onionArg));\n+                return InitError(strprintf(_(\"Invalid -onion address or hostname: '%s'\").translated, onionArg));\n             }\n             proxyType addrOnion = proxyType(onionProxy, proxyRandomize);\n             if (!addrOnion.IsValid())\n-                return InitError(strprintf(_(\"Invalid -onion address or hostname: '%s'\"), onionArg));\n+                return InitError(strprintf(_(\"Invalid -onion address or hostname: '%s'\").translated, onionArg));\n             SetProxy(NET_ONION, addrOnion);\n             SetReachable(NET_ONION, true);\n         }\n@@ -1474,17 +1457,17 @@ bool AppInitMain(InitInterfaces& interfaces)\n         bool fReset = fReindex;\n         std::string strLoadError;\n \n-        uiInterface.InitMessage(_(\"Loading block index...\"));\n+        uiInterface.InitMessage(_(\"Loading block index...\").translated);\n \n         do {\n             const int64_t load_block_index_start_time = GetTimeMillis();\n             bool is_coinsview_empty;\n             try {\n                 LOCK(cs_main);\n+                // This statement makes ::ChainstateActive() usable.\n+                g_chainstate = MakeUnique<CChainState>();\n                 UnloadBlockIndex();\n-                pcoinsTip.reset();\n-                pcoinsdbview.reset();\n-                pcoinscatcher.reset();\n+\n                 // new CBlockTreeDB tries to delete the existing file, which\n                 // fails if it's still open from the previous loop. Close it first:\n                 pblocktree.reset();\n@@ -1505,20 +1488,21 @@ bool AppInitMain(InitInterfaces& interfaces)\n                 // From here on out fReindex and fReset mean something different!\n                 if (!LoadBlockIndex(chainparams)) {\n                     if (ShutdownRequested()) break;\n-                    strLoadError = _(\"Error loading block database\");\n+                    strLoadError = _(\"Error loading block database\").translated;\n                     break;\n                 }\n \n                 // If the loaded chain has a wrong genesis, bail out immediately\n                 // (we're likely using a testnet datadir, or the other way around).\n-                if (!mapBlockIndex.empty() && !LookupBlockIndex(chainparams.GetConsensus().hashGenesisBlock)) {\n-                    return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));\n+                if (!::BlockIndex().empty() &&\n+                        !LookupBlockIndex(chainparams.GetConsensus().hashGenesisBlock)) {\n+                    return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\").translated);\n                 }\n \n                 // Check for changed -prune state.  What we are concerned about is a user who has pruned blocks\n                 // in the past, but is now trying to run unpruned.\n                 if (fHavePruned && !fPruneMode) {\n-                    strLoadError = _(\"You need to rebuild the database using -reindex to go back to unpruned mode.  This will redownload the entire blockchain\");\n+                    strLoadError = _(\"You need to rebuild the database using -reindex to go back to unpruned mode.  This will redownload the entire blockchain\").translated;\n                     break;\n                 }\n \n@@ -1527,62 +1511,72 @@ bool AppInitMain(InitInterfaces& interfaces)\n                 // (otherwise we use the one already on disk).\n                 // This is called again in ThreadImport after the reindex completes.\n                 if (!fReindex && !LoadGenesisBlock(chainparams)) {\n-                    strLoadError = _(\"Error initializing block database\");\n+                    strLoadError = _(\"Error initializing block database\").translated;\n                     break;\n                 }\n \n                 // At this point we're either in reindex or we've loaded a useful\n-                // block tree into mapBlockIndex!\n+                // block tree into BlockIndex()!\n \n-                pcoinsdbview.reset(new CCoinsViewDB(nCoinDBCache, false, fReset || fReindexChainState));\n-                pcoinscatcher.reset(new CCoinsViewErrorCatcher(pcoinsdbview.get()));\n+                ::ChainstateActive().InitCoinsDB(\n+                    /* cache_size_bytes */ nCoinDBCache,\n+                    /* in_memory */ false,\n+                    /* should_wipe */ fReset || fReindexChainState);\n+\n+                ::ChainstateActive().CoinsErrorCatcher().AddReadErrCallback([]() {\n+                    uiInterface.ThreadSafeMessageBox(\n+                        _(\"Error reading from database, shutting down.\").translated,\n+                        \"\", CClientUIInterface::MSG_ERROR);\n+                });\n \n                 // If necessary, upgrade from older database format.\n                 // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!pcoinsdbview->Upgrade()) {\n-                    strLoadError = _(\"Error upgrading chainstate database\");\n+                if (!::ChainstateActive().CoinsDB().Upgrade()) {\n+                    strLoadError = _(\"Error upgrading chainstate database\").translated;\n                     break;\n                 }\n \n                 // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!ReplayBlocks(chainparams, pcoinsdbview.get())) {\n-                    strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\");\n+                if (!ReplayBlocks(chainparams, &::ChainstateActive().CoinsDB())) {\n+                    strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n                     break;\n                 }\n \n                 // The on-disk coinsdb is now in a good state, create the cache\n-                pcoinsTip.reset(new CCoinsViewCache(pcoinscatcher.get()));\n+                ::ChainstateActive().InitCoinsCache();\n+                assert(::ChainstateActive().CanFlushToDisk());\n \n-                is_coinsview_empty = fReset || fReindexChainState || pcoinsTip->GetBestBlock().IsNull();\n+                is_coinsview_empty = fReset || fReindexChainState ||\n+                    ::ChainstateActive().CoinsTip().GetBestBlock().IsNull();\n                 if (!is_coinsview_empty) {\n-                    // LoadChainTip sets ::ChainActive() based on pcoinsTip's best block\n+                    // LoadChainTip sets ::ChainActive() based on CoinsTip()'s best block\n                     if (!LoadChainTip(chainparams)) {\n-                        strLoadError = _(\"Error initializing block database\");\n+                        strLoadError = _(\"Error initializing block database\").translated;\n                         break;\n                     }\n                     assert(::ChainActive().Tip() != nullptr);\n                 }\n             } catch (const std::exception& e) {\n                 LogPrintf(\"%s\\n\", e.what());\n-                strLoadError = _(\"Error opening block database\");\n+                strLoadError = _(\"Error opening block database\").translated;\n                 break;\n             }\n \n             if (!fReset) {\n                 // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n                 // It both disconnects blocks based on ::ChainActive(), and drops block data in\n-                // mapBlockIndex based on lack of available witness data.\n-                uiInterface.InitMessage(_(\"Rewinding blocks...\"));\n+                // BlockIndex() based on lack of available witness data.\n+                uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n                 if (!RewindBlockIndex(chainparams)) {\n-                    strLoadError = _(\"Unable to rewind the database to a pre-fork state. You will need to redownload the blockchain\");\n+                    strLoadError = _(\"Unable to rewind the database to a pre-fork state. You will need to redownload the blockchain\").translated;\n                     break;\n                 }\n             }\n \n             try {\n                 LOCK(cs_main);\n                 if (!is_coinsview_empty) {\n-                    uiInterface.InitMessage(_(\"Verifying blocks...\"));\n+                    uiInterface.InitMessage(_(\"Verifying blocks...\").translated);\n                     if (fHavePruned && gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n                         LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\\n\",\n                             MIN_BLOCKS_TO_KEEP);\n@@ -1593,19 +1587,19 @@ bool AppInitMain(InitInterfaces& interfaces)\n                     if (tip && tip->nTime > GetAdjustedTime() + 2 * 60 * 60) {\n                         strLoadError = _(\"The block database contains a block which appears to be from the future. \"\n                                 \"This may be due to your computer's date and time being set incorrectly. \"\n-                                \"Only rebuild the block database if you are sure that your computer's date and time are correct\");\n+                                \"Only rebuild the block database if you are sure that your computer's date and time are correct\").translated;\n                         break;\n                     }\n \n-                    if (!CVerifyDB().VerifyDB(chainparams, pcoinsdbview.get(), gArgs.GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n+                    if (!CVerifyDB().VerifyDB(chainparams, &::ChainstateActive().CoinsDB(), gArgs.GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n                                   gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n-                        strLoadError = _(\"Corrupted block database detected\");\n+                        strLoadError = _(\"Corrupted block database detected\").translated;\n                         break;\n                     }\n                 }\n             } catch (const std::exception& e) {\n                 LogPrintf(\"%s\\n\", e.what());\n-                strLoadError = _(\"Error opening block database\");\n+                strLoadError = _(\"Error opening block database\").translated;\n                 break;\n             }\n \n@@ -1617,7 +1611,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n             // first suggest a reindex\n             if (!fReset) {\n                 bool fRet = uiInterface.ThreadSafeQuestion(\n-                    strLoadError + \".\\n\\n\" + _(\"Do you want to rebuild the block database now?\"),\n+                    strLoadError + \".\\n\\n\" + _(\"Do you want to rebuild the block database now?\").translated,\n                     strLoadError + \".\\nPlease restart with -reindex or -reindex-chainstate to recover.\",\n                     \"\", CClientUIInterface::MSG_ERROR | CClientUIInterface::BTN_ABORT);\n                 if (fRet) {\n@@ -1674,28 +1668,25 @@ bool AppInitMain(InitInterfaces& interfaces)\n         LogPrintf(\"Unsetting NODE_NETWORK on prune mode\\n\");\n         nLocalServices = ServiceFlags(nLocalServices & ~NODE_NETWORK);\n         if (!fReindex) {\n-            uiInterface.InitMessage(_(\"Pruning blockstore...\"));\n+            uiInterface.InitMessage(_(\"Pruning blockstore...\").translated);\n             ::ChainstateActive().PruneAndFlush();\n         }\n     }\n \n-    if (chainparams.GetConsensus().vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout != 0) {\n-        // Only advertise witness capabilities if they have a reasonable start time.\n-        // This allows us to have the code merged without a defined softfork, by setting its\n-        // end time to 0.\n-        // Note that setting NODE_WITNESS is never required: the only downside from not\n-        // doing so is that after activation, no upgraded nodes will fetch from you.\n+    if (chainparams.GetConsensus().SegwitHeight != std::numeric_limits<int>::max()) {\n+        // Advertise witness capabilities.\n+        // The option to not set NODE_WITNESS is only used in the tests and should be removed.\n         nLocalServices = ServiceFlags(nLocalServices | NODE_WITNESS);\n     }\n \n     // ********************************************************* Step 11: import blocks\n \n     if (!CheckDiskSpace(GetDataDir())) {\n-        InitError(strprintf(_(\"Error: Disk space is low for %s\"), GetDataDir()));\n+        InitError(strprintf(_(\"Error: Disk space is low for %s\").translated, GetDataDir()));\n         return false;\n     }\n     if (!CheckDiskSpace(GetBlocksDir())) {\n-        InitError(strprintf(_(\"Error: Disk space is low for %s\"), GetBlocksDir()));\n+        InitError(strprintf(_(\"Error: Disk space is low for %s\").translated, GetBlocksDir()));\n         return false;\n     }\n \n@@ -1708,8 +1699,10 @@ bool AppInitMain(InitInterfaces& interfaces)\n         fHaveGenesis = true;\n     }\n \n+#if HAVE_SYSTEM\n     if (gArgs.IsArgSet(\"-blocknotify\"))\n         uiInterface.NotifyBlockTip_connect(BlockNotifyCallback);\n+#endif\n \n     std::vector<fs::path> vImportFiles;\n     for (const std::string& strFile : gArgs.GetArgs(\"-loadblock\")) {\n@@ -1741,7 +1734,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n     //// debug print\n     {\n         LOCK(cs_main);\n-        LogPrintf(\"mapBlockIndex.size() = %u\\n\", mapBlockIndex.size());\n+        LogPrintf(\"block tree size = %u\\n\", ::BlockIndex().size());\n         chain_active_height = ::ChainActive().Height();\n     }\n     LogPrintf(\"nBestHeight = %d\\n\", chain_active_height);\n@@ -1782,21 +1775,16 @@ bool AppInitMain(InitInterfaces& interfaces)\n         connOptions.vBinds.push_back(addrBind);\n     }\n     for (const std::string& strBind : gArgs.GetArgs(\"-whitebind\")) {\n-        CService addrBind;\n-        if (!Lookup(strBind.c_str(), addrBind, 0, false)) {\n-            return InitError(ResolveErrMsg(\"whitebind\", strBind));\n-        }\n-        if (addrBind.GetPort() == 0) {\n-            return InitError(strprintf(_(\"Need to specify a port with -whitebind: '%s'\"), strBind));\n-        }\n-        connOptions.vWhiteBinds.push_back(addrBind);\n+        NetWhitebindPermissions whitebind;\n+        std::string error;\n+        if (!NetWhitebindPermissions::TryParse(strBind, whitebind, error)) return InitError(error);\n+        connOptions.vWhiteBinds.push_back(whitebind);\n     }\n \n     for (const auto& net : gArgs.GetArgs(\"-whitelist\")) {\n-        CSubNet subnet;\n-        LookupSubNet(net.c_str(), subnet);\n-        if (!subnet.IsValid())\n-            return InitError(strprintf(_(\"Invalid netmask specified in -whitelist: '%s'\"), net));\n+        NetWhitelistPermissions subnet;\n+        std::string error;\n+        if (!NetWhitelistPermissions::TryParse(net, subnet, error)) return InitError(error);\n         connOptions.vWhitelistedRange.push_back(subnet);\n     }\n \n@@ -1817,7 +1805,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n     // ********************************************************* Step 13: finished\n \n     SetRPCWarmupFinished();\n-    uiInterface.InitMessage(_(\"Done loading\"));\n+    uiInterface.InitMessage(_(\"Done loading\").translated);\n \n     for (const auto& client : interfaces.chain_clients) {\n         client->start(scheduler);"
      },
      {
        "sha": "b8b9ecded9f6e3f962a13d6556a56187b3e2f5a6",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 11,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -9,7 +9,9 @@\n #include <interfaces/handler.h>\n #include <interfaces/wallet.h>\n #include <net.h>\n+#include <net_processing.h>\n #include <node/coin.h>\n+#include <node/transaction.h>\n #include <policy/fees.h>\n #include <policy/policy.h>\n #include <policy/rbf.h>\n@@ -149,12 +151,6 @@ class LockImpl : public Chain::Lock, public UniqueLock<CCriticalSection>\n         LockAssertion lock(::cs_main);\n         return CheckFinalTx(tx);\n     }\n-    bool submitToMemoryPool(const CTransactionRef& tx, CAmount absurd_fee, CValidationState& state) override\n-    {\n-        LockAssertion lock(::cs_main);\n-        return AcceptToMemoryPool(::mempool, state, tx, nullptr /* missing inputs */, nullptr /* txn replaced */,\n-            false /* bypass limits */, absurd_fee);\n-    }\n \n     using UniqueLock::UniqueLock;\n };\n@@ -205,7 +201,7 @@ class NotificationsHandlerImpl : public Handler, CValidationInterface\n class RpcHandlerImpl : public Handler\n {\n public:\n-    RpcHandlerImpl(const CRPCCommand& command) : m_command(command), m_wrapped_command(&command)\n+    explicit RpcHandlerImpl(const CRPCCommand& command) : m_command(command), m_wrapped_command(&command)\n     {\n         m_command.actor = [this](const JSONRPCRequest& request, UniValue& result, bool last_handler) {\n             if (!m_wrapped_command) return false;\n@@ -290,10 +286,13 @@ class ChainImpl : public Chain\n         auto it = ::mempool.GetIter(txid);\n         return it && (*it)->GetCountWithDescendants() > 1;\n     }\n-    void relayTransaction(const uint256& txid) override\n+    bool broadcastTransaction(const CTransactionRef& tx, std::string& err_string, const CAmount& max_tx_fee, bool relay) override\n     {\n-        CInv inv(MSG_TX, txid);\n-        g_connman->ForEachNode([&inv](CNode* node) { node->PushInventory(inv); });\n+        const TransactionError err = BroadcastTransaction(tx, err_string, max_tx_fee, relay, /*wait_callback*/ false);\n+        // Chain clients only care about failures to accept the tx to the mempool. Disregard non-mempool related failures.\n+        // Note: this will need to be updated if BroadcastTransactions() is updated to return other non-mempool failures\n+        // that Chain clients do not need to know about.\n+        return TransactionError::OK == err;\n     }\n     void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants) override\n     {\n@@ -333,7 +332,6 @@ class ChainImpl : public Chain\n         LOCK(cs_main);\n         return ::fHavePruned;\n     }\n-    bool p2pEnabled() override { return g_connman != nullptr; }\n     bool isReadyToBroadcast() override { return !::fImporting && !::fReindex && !isInitialBlockDownload(); }\n     bool isInitialBlockDownload() override { return ::ChainstateActive().IsInitialBlockDownload(); }\n     bool shutdownRequested() override { return ShutdownRequested(); }"
      },
      {
        "sha": "da670a337064a7dc7311231cba2cbfbb397643a5",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 4,
        "deletions": 14,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -43,10 +43,6 @@ class Wallet;\n //!   asynchronously\n //!   (https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-380101269).\n //!\n-//! * The relayTransactions() and submitToMemoryPool() methods could be replaced\n-//!   with a higher-level broadcastTransaction method\n-//!   (https://github.com/bitcoin/bitcoin/pull/14978#issuecomment-459373984).\n-//!\n //! * The initMessages() and loadWallet() methods which the wallet uses to send\n //!   notifications to the GUI should go away when GUI and wallet can directly\n //!   communicate with each other without going through the node\n@@ -127,11 +123,6 @@ class Chain\n \n         //! Check if transaction will be final given chain height current time.\n         virtual bool checkFinalTx(const CTransaction& tx) = 0;\n-\n-        //! Add transaction to memory pool if the transaction fee is below the\n-        //! amount specified by absurd_fee. Returns false if the transaction\n-        //! could not be added due to the fee or for another reason.\n-        virtual bool submitToMemoryPool(const CTransactionRef& tx, CAmount absurd_fee, CValidationState& state) = 0;\n     };\n \n     //! Return Lock interface. Chain is locked when this is called, and\n@@ -164,8 +155,10 @@ class Chain\n     //! Check if transaction has descendants in mempool.\n     virtual bool hasDescendantsInMempool(const uint256& txid) = 0;\n \n-    //! Relay transaction.\n-    virtual void relayTransaction(const uint256& txid) = 0;\n+    //! Transaction is added to memory pool, if the transaction fee is below the\n+    //! amount specified by max_tx_fee, and broadcast to all peers if relay is set to true.\n+    //! Return false if the transaction could not be added due to the fee or for another reason.\n+    virtual bool broadcastTransaction(const CTransactionRef& tx, std::string& err_string, const CAmount& max_tx_fee, bool relay) = 0;\n \n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants) = 0;\n@@ -194,9 +187,6 @@ class Chain\n     //! Check if any block has been pruned.\n     virtual bool havePruned() = 0;\n \n-    //! Check if p2p enabled.\n-    virtual bool p2pEnabled() = 0;\n-\n     //! Check if the node is ready to broadcast transactions.\n     virtual bool isReadyToBroadcast() = 0;\n "
      },
      {
        "sha": "fc49817502f5595c8c14f64b9f53bf4393c71b41",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -54,6 +54,7 @@ class NodeImpl : public Node\n {\n public:\n     NodeImpl() { m_interfaces.chain = MakeChain(); }\n+    void initError(const std::string& message) override { InitError(message); }\n     bool parseParameters(int argc, const char* const argv[], std::string& error) override\n     {\n         return gArgs.ParseParameters(argc, argv, error);\n@@ -197,6 +198,7 @@ class NodeImpl : public Node\n         return GuessVerificationProgress(Params().TxData(), tip);\n     }\n     bool isInitialBlockDownload() override { return ::ChainstateActive().IsInitialBlockDownload(); }\n+    bool isAddressTypeSet() override { return !::gArgs.GetArg(\"-addresstype\", \"\").empty(); }\n     bool getReindex() override { return ::fReindex; }\n     bool getImporting() override { return ::fImporting; }\n     void setNetworkActive(bool active) override\n@@ -230,7 +232,7 @@ class NodeImpl : public Node\n     bool getUnspentOutput(const COutPoint& output, Coin& coin) override\n     {\n         LOCK(::cs_main);\n-        return ::pcoinsTip->GetCoin(output, coin);\n+        return ::ChainstateActive().CoinsTip().GetCoin(output, coin);\n     }\n     std::string getWalletDir() override\n     {"
      },
      {
        "sha": "b93b52c5cc9e512b27cb157f8e1d62288bf88408",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -38,6 +38,9 @@ class Node\n public:\n     virtual ~Node() {}\n \n+    //! Send init error.\n+    virtual void initError(const std::string& message) = 0;\n+\n     //! Set command line arguments.\n     virtual bool parseParameters(int argc, const char* const argv[], std::string& error) = 0;\n \n@@ -147,6 +150,9 @@ class Node\n     //! Is initial block download.\n     virtual bool isInitialBlockDownload() = 0;\n \n+    //! Is -addresstype set.\n+    virtual bool isAddressTypeSet() = 0;\n+\n     //! Get reindex.\n     virtual bool getReindex() = 0;\n "
      },
      {
        "sha": "077dc1ab4d2a750492dcd9322f72d0282f230fc6",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 33,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -33,32 +33,6 @@\n namespace interfaces {\n namespace {\n \n-class PendingWalletTxImpl : public PendingWalletTx\n-{\n-public:\n-    explicit PendingWalletTxImpl(CWallet& wallet) : m_wallet(wallet), m_key(&wallet) {}\n-\n-    const CTransaction& get() override { return *m_tx; }\n-\n-    bool commit(WalletValueMap value_map,\n-        WalletOrderForm order_form,\n-        std::string& reject_reason) override\n-    {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n-        CValidationState state;\n-        if (!m_wallet.CommitTransaction(m_tx, std::move(value_map), std::move(order_form), m_key, state)) {\n-            reject_reason = state.GetRejectReason();\n-            return false;\n-        }\n-        return true;\n-    }\n-\n-    CTransactionRef m_tx;\n-    CWallet& m_wallet;\n-    CReserveKey m_key;\n-};\n-\n //! Construct wallet tx struct.\n WalletTx MakeWalletTx(interfaces::Chain::Lock& locked_chain, CWallet& wallet, const CWalletTx& wtx)\n {\n@@ -140,9 +114,11 @@ class WalletImpl : public Wallet\n     void abortRescan() override { m_wallet->AbortRescan(); }\n     bool backupWallet(const std::string& filename) override { return m_wallet->BackupWallet(filename); }\n     std::string getWalletName() override { return m_wallet->GetName(); }\n-    bool getKeyFromPool(bool internal, CPubKey& pub_key) override\n+    bool getNewDestination(const OutputType type, const std::string label, CTxDestination& dest) override\n     {\n-        return m_wallet->GetKeyFromPool(pub_key, internal);\n+        LOCK(m_wallet->cs_wallet);\n+        std::string error;\n+        return m_wallet->GetNewDestination(type, label, dest, error);\n     }\n     bool getPubKey(const CKeyID& address, CPubKey& pub_key) override { return m_wallet->GetPubKey(address, pub_key); }\n     bool getPrivKey(const CKeyID& address, CKey& key) override { return m_wallet->GetKey(address, key); }\n@@ -226,7 +202,7 @@ class WalletImpl : public Wallet\n         LOCK(m_wallet->cs_wallet);\n         return m_wallet->ListLockedCoins(outputs);\n     }\n-    std::unique_ptr<PendingWalletTx> createTransaction(const std::vector<CRecipient>& recipients,\n+    CTransactionRef createTransaction(const std::vector<CRecipient>& recipients,\n         const CCoinControl& coin_control,\n         bool sign,\n         int& change_pos,\n@@ -235,12 +211,26 @@ class WalletImpl : public Wallet\n     {\n         auto locked_chain = m_wallet->chain().lock();\n         LOCK(m_wallet->cs_wallet);\n-        auto pending = MakeUnique<PendingWalletTxImpl>(*m_wallet);\n-        if (!m_wallet->CreateTransaction(*locked_chain, recipients, pending->m_tx, pending->m_key, fee, change_pos,\n+        CTransactionRef tx;\n+        if (!m_wallet->CreateTransaction(*locked_chain, recipients, tx, fee, change_pos,\n                 fail_reason, coin_control, sign)) {\n             return {};\n         }\n-        return std::move(pending);\n+        return tx;\n+    }\n+    bool commitTransaction(CTransactionRef tx,\n+        WalletValueMap value_map,\n+        WalletOrderForm order_form,\n+        std::string& reject_reason) override\n+    {\n+        auto locked_chain = m_wallet->chain().lock();\n+        LOCK(m_wallet->cs_wallet);\n+        CValidationState state;\n+        if (!m_wallet->CommitTransaction(std::move(tx), std::move(value_map), std::move(order_form), state)) {\n+            reject_reason = state.GetRejectReason();\n+            return false;\n+        }\n+        return true;\n     }\n     bool transactionCanBeAbandoned(const uint256& txid) override { return m_wallet->TransactionCanBeAbandoned(txid); }\n     bool abandonTransaction(const uint256& txid) override\n@@ -476,7 +466,7 @@ class WalletImpl : public Wallet\n     }\n     std::unique_ptr<Handler> handleStatusChanged(StatusChangedFn fn) override\n     {\n-        return MakeHandler(m_wallet->NotifyStatusChanged.connect([fn](CCryptoKeyStore*) { fn(); }));\n+        return MakeHandler(m_wallet->NotifyStatusChanged.connect([fn](CWallet*) { fn(); }));\n     }\n     std::unique_ptr<Handler> handleAddressBookChanged(AddressBookChangedFn fn) override\n     {"
      },
      {
        "sha": "89e056b18b8fec3b644972f6c648552b46bcb16d",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 9,
        "deletions": 19,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -34,7 +34,6 @@ struct CRecipient;\n namespace interfaces {\n \n class Handler;\n-class PendingWalletTx;\n struct WalletAddress;\n struct WalletBalances;\n struct WalletTx;\n@@ -78,8 +77,8 @@ class Wallet\n     //! Get wallet name.\n     virtual std::string getWalletName() = 0;\n \n-    // Get key from pool.\n-    virtual bool getKeyFromPool(bool internal, CPubKey& pub_key) = 0;\n+    // Get a new address.\n+    virtual bool getNewDestination(const OutputType type, const std::string label, CTxDestination& dest) = 0;\n \n     //! Get public key.\n     virtual bool getPubKey(const CKeyID& address, CPubKey& pub_key) = 0;\n@@ -134,13 +133,19 @@ class Wallet\n     virtual void listLockedCoins(std::vector<COutPoint>& outputs) = 0;\n \n     //! Create transaction.\n-    virtual std::unique_ptr<PendingWalletTx> createTransaction(const std::vector<CRecipient>& recipients,\n+    virtual CTransactionRef createTransaction(const std::vector<CRecipient>& recipients,\n         const CCoinControl& coin_control,\n         bool sign,\n         int& change_pos,\n         CAmount& fee,\n         std::string& fail_reason) = 0;\n \n+    //! Commit transaction.\n+    virtual bool commitTransaction(CTransactionRef tx,\n+        WalletValueMap value_map,\n+        WalletOrderForm order_form,\n+        std::string& reject_reason) = 0;\n+\n     //! Return whether transaction can be abandoned.\n     virtual bool transactionCanBeAbandoned(const uint256& txid) = 0;\n \n@@ -288,21 +293,6 @@ class Wallet\n     virtual std::unique_ptr<Handler> handleCanGetAddressesChanged(CanGetAddressesChangedFn fn) = 0;\n };\n \n-//! Tracking object returned by CreateTransaction and passed to CommitTransaction.\n-class PendingWalletTx\n-{\n-public:\n-    virtual ~PendingWalletTx() {}\n-\n-    //! Get transaction data.\n-    virtual const CTransaction& get() = 0;\n-\n-    //! Send pending transaction and commit to wallet.\n-    virtual bool commit(WalletValueMap value_map,\n-        WalletOrderForm order_form,\n-        std::string& reject_reason) = 0;\n-};\n-\n //! Information about one wallet address.\n struct WalletAddress\n {"
      },
      {
        "sha": "4bd99e255dde8fd77ed986d5090423e87f2178a1",
        "filename": "src/keystore.h",
        "status": "removed",
        "additions": 0,
        "deletions": 83,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa",
        "patch": "@@ -1,83 +0,0 @@\n-// Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2018 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_KEYSTORE_H\n-#define BITCOIN_KEYSTORE_H\n-\n-#include <key.h>\n-#include <pubkey.h>\n-#include <script/script.h>\n-#include <script/sign.h>\n-#include <script/standard.h>\n-#include <sync.h>\n-\n-#include <boost/signals2/signal.hpp>\n-\n-/** A virtual base class for key stores */\n-class CKeyStore : public SigningProvider\n-{\n-public:\n-    //! Add a key to the store.\n-    virtual bool AddKeyPubKey(const CKey &key, const CPubKey &pubkey) =0;\n-\n-    //! Check whether a key corresponding to a given address is present in the store.\n-    virtual bool HaveKey(const CKeyID &address) const =0;\n-    virtual std::set<CKeyID> GetKeys() const =0;\n-\n-    //! Support for BIP 0013 : see https://github.com/bitcoin/bips/blob/master/bip-0013.mediawiki\n-    virtual bool AddCScript(const CScript& redeemScript) =0;\n-    virtual bool HaveCScript(const CScriptID &hash) const =0;\n-    virtual std::set<CScriptID> GetCScripts() const =0;\n-\n-    //! Support for Watch-only addresses\n-    virtual bool AddWatchOnly(const CScript &dest) =0;\n-    virtual bool RemoveWatchOnly(const CScript &dest) =0;\n-    virtual bool HaveWatchOnly(const CScript &dest) const =0;\n-    virtual bool HaveWatchOnly() const =0;\n-};\n-\n-/** Basic key store, that keeps keys in an address->secret map */\n-class CBasicKeyStore : public CKeyStore\n-{\n-protected:\n-    mutable CCriticalSection cs_KeyStore;\n-\n-    using KeyMap = std::map<CKeyID, CKey>;\n-    using WatchKeyMap = std::map<CKeyID, CPubKey>;\n-    using ScriptMap = std::map<CScriptID, CScript>;\n-    using WatchOnlySet = std::set<CScript>;\n-\n-    KeyMap mapKeys GUARDED_BY(cs_KeyStore);\n-    WatchKeyMap mapWatchKeys GUARDED_BY(cs_KeyStore);\n-    ScriptMap mapScripts GUARDED_BY(cs_KeyStore);\n-    WatchOnlySet setWatchOnly GUARDED_BY(cs_KeyStore);\n-\n-    void ImplicitlyLearnRelatedKeyScripts(const CPubKey& pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n-\n-public:\n-    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override;\n-    bool AddKey(const CKey &key) { return AddKeyPubKey(key, key.GetPubKey()); }\n-    bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const override;\n-    bool HaveKey(const CKeyID &address) const override;\n-    std::set<CKeyID> GetKeys() const override;\n-    bool GetKey(const CKeyID &address, CKey &keyOut) const override;\n-    bool AddCScript(const CScript& redeemScript) override;\n-    bool HaveCScript(const CScriptID &hash) const override;\n-    std::set<CScriptID> GetCScripts() const override;\n-    bool GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const override;\n-\n-    bool AddWatchOnly(const CScript &dest) override;\n-    bool RemoveWatchOnly(const CScript &dest) override;\n-    bool HaveWatchOnly(const CScript &dest) const override;\n-    bool HaveWatchOnly() const override;\n-};\n-\n-/** Return the CKeyID of the key involved in a script (if there is a unique one). */\n-CKeyID GetKeyForDestination(const CKeyStore& store, const CTxDestination& dest);\n-\n-/** Checks if a CKey is in the given CKeyStore compressed or otherwise*/\n-bool HaveKey(const CKeyStore& store, const CKey& key);\n-\n-#endif // BITCOIN_KEYSTORE_H"
      },
      {
        "sha": "337d1f6a46b87554cbaa14edc4e4399e19741aa3",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 66,
        "deletions": 61,
        "changes": 127,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -15,11 +15,13 @@\n #include <consensus/consensus.h>\n #include <crypto/common.h>\n #include <crypto/sha256.h>\n-#include <primitives/transaction.h>\n #include <netbase.h>\n+#include <net_permissions.h>\n+#include <primitives/transaction.h>\n #include <scheduler.h>\n #include <ui_interface.h>\n #include <util/strencodings.h>\n+#include <util/translation.h>\n \n #ifdef WIN32\n #include <string.h>\n@@ -36,6 +38,9 @@\n #include <miniupnpc/miniwget.h>\n #include <miniupnpc/upnpcommands.h>\n #include <miniupnpc/upnperrors.h>\n+// The minimum supported miniUPnPc API version is set to 10. This keeps compatibility\n+// with Ubuntu 16.04 LTS and Debian 8 libminiupnpc-dev packages.\n+static_assert(MINIUPNPC_API_VERSION >= 10, \"miniUPnPc API version >= 10 assumed\");\n #endif\n \n #include <unordered_map>\n@@ -63,7 +68,6 @@ enum BindFlags {\n     BF_NONE         = 0,\n     BF_EXPLICIT     = (1U << 0),\n     BF_REPORT_ERROR = (1U << 1),\n-    BF_WHITELIST    = (1U << 2),\n };\n \n // The set of sockets cannot be modified while waiting\n@@ -455,12 +459,10 @@ void CNode::CloseSocketDisconnect()\n     }\n }\n \n-bool CConnman::IsWhitelistedRange(const CNetAddr &addr) {\n-    for (const CSubNet& subnet : vWhitelistedRange) {\n-        if (subnet.Match(addr))\n-            return true;\n+void CConnman::AddWhitelistPermissionFlags(NetPermissionFlags& flags, const CNetAddr &addr) const {\n+    for (const auto& subnet : vWhitelistedRange) {\n+        if (subnet.m_subnet.Match(addr)) NetPermissions::AddFlag(flags, subnet.m_flags);\n     }\n-    return false;\n }\n \n std::string CNode::GetAddrName() const {\n@@ -524,7 +526,8 @@ void CNode::copyStats(CNodeStats &stats)\n         X(mapRecvBytesPerMsgCmd);\n         X(nRecvBytes);\n     }\n-    X(fWhitelisted);\n+    X(m_legacyWhitelisted);\n+    X(m_permissionFlags);\n     {\n         LOCK(cs_feeFilter);\n         X(minFeeFilter);\n@@ -809,7 +812,7 @@ bool CConnman::AttemptToEvictConnection()\n         LOCK(cs_vNodes);\n \n         for (const CNode* node : vNodes) {\n-            if (node->fWhitelisted)\n+            if (node->HasPermission(PF_NOBAN))\n                 continue;\n             if (!node->fInbound)\n                 continue;\n@@ -900,7 +903,19 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n         }\n     }\n \n-    bool whitelisted = hListenSocket.whitelisted || IsWhitelistedRange(addr);\n+    NetPermissionFlags permissionFlags = NetPermissionFlags::PF_NONE;\n+    hListenSocket.AddSocketPermissionFlags(permissionFlags);\n+    AddWhitelistPermissionFlags(permissionFlags, addr);\n+    bool legacyWhitelisted = false;\n+    if (NetPermissions::HasFlag(permissionFlags, NetPermissionFlags::PF_ISIMPLICIT)) {\n+        NetPermissions::ClearFlag(permissionFlags, PF_ISIMPLICIT);\n+        if (gArgs.GetBoolArg(\"-whitelistforcerelay\", DEFAULT_WHITELISTFORCERELAY)) NetPermissions::AddFlag(permissionFlags, PF_FORCERELAY);\n+        if (gArgs.GetBoolArg(\"-whitelistrelay\", DEFAULT_WHITELISTRELAY)) NetPermissions::AddFlag(permissionFlags, PF_RELAY);\n+        NetPermissions::AddFlag(permissionFlags, PF_MEMPOOL);\n+        NetPermissions::AddFlag(permissionFlags, PF_NOBAN);\n+        legacyWhitelisted = true;\n+    }\n+\n     {\n         LOCK(cs_vNodes);\n         for (const CNode* pnode : vNodes) {\n@@ -937,7 +952,7 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n \n     // Don't accept connections from banned peers, but if our inbound slots aren't almost full, accept\n     // if the only banning reason was an automatic misbehavior ban.\n-    if (!whitelisted && bannedlevel > ((nInbound + 1 < nMaxInbound) ? 1 : 0))\n+    if (!NetPermissions::HasFlag(permissionFlags, NetPermissionFlags::PF_NOBAN) && bannedlevel > ((nInbound + 1 < nMaxInbound) ? 1 : 0))\n     {\n         LogPrint(BCLog::NET, \"connection from %s dropped (banned)\\n\", addr.ToString());\n         CloseSocket(hSocket);\n@@ -958,9 +973,15 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n     CAddress addr_bind = GetBindAddress(hSocket);\n \n-    CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addr, CalculateKeyedNetGroup(addr), nonce, addr_bind, \"\", true);\n+    ServiceFlags nodeServices = nLocalServices;\n+    if (NetPermissions::HasFlag(permissionFlags, PF_BLOOMFILTER)) {\n+        nodeServices = static_cast<ServiceFlags>(nodeServices | NODE_BLOOM);\n+    }\n+    CNode* pnode = new CNode(id, nodeServices, GetBestHeight(), hSocket, addr, CalculateKeyedNetGroup(addr), nonce, addr_bind, \"\", true);\n     pnode->AddRef();\n-    pnode->fWhitelisted = whitelisted;\n+    pnode->m_permissionFlags = permissionFlags;\n+    // If this flag is present, the user probably expect that RPC and QT report it as whitelisted (backward compatibility)\n+    pnode->m_legacyWhitelisted = legacyWhitelisted;\n     pnode->m_prefer_evict = bannedlevel > 0;\n     m_msgproc->InitializeNode(pnode);\n \n@@ -1403,16 +1424,10 @@ static void ThreadMapPort()\n     struct UPNPDev * devlist = nullptr;\n     char lanaddr[64];\n \n-#ifndef UPNPDISCOVER_SUCCESS\n-    /* miniupnpc 1.5 */\n-    devlist = upnpDiscover(2000, multicastif, minissdpdpath, 0);\n-#elif MINIUPNPC_API_VERSION < 14\n-    /* miniupnpc 1.6 */\n     int error = 0;\n+#if MINIUPNPC_API_VERSION < 14\n     devlist = upnpDiscover(2000, multicastif, minissdpdpath, 0, 0, &error);\n #else\n-    /* miniupnpc 1.9.20150730 */\n-    int error = 0;\n     devlist = upnpDiscover(2000, multicastif, minissdpdpath, 0, 0, 2, &error);\n #endif\n \n@@ -1426,43 +1441,32 @@ static void ThreadMapPort()\n         if (fDiscover) {\n             char externalIPAddress[40];\n             r = UPNP_GetExternalIPAddress(urls.controlURL, data.first.servicetype, externalIPAddress);\n-            if(r != UPNPCOMMAND_SUCCESS)\n+            if (r != UPNPCOMMAND_SUCCESS) {\n                 LogPrintf(\"UPnP: GetExternalIPAddress() returned %d\\n\", r);\n-            else\n-            {\n-                if(externalIPAddress[0])\n-                {\n+            } else {\n+                if (externalIPAddress[0]) {\n                     CNetAddr resolved;\n-                    if(LookupHost(externalIPAddress, resolved, false)) {\n+                    if (LookupHost(externalIPAddress, resolved, false)) {\n                         LogPrintf(\"UPnP: ExternalIPAddress = %s\\n\", resolved.ToString().c_str());\n                         AddLocal(resolved, LOCAL_UPNP);\n                     }\n-                }\n-                else\n+                } else {\n                     LogPrintf(\"UPnP: GetExternalIPAddress failed.\\n\");\n+                }\n             }\n         }\n \n-        std::string strDesc = \"Bitcoin \" + FormatFullVersion();\n+        std::string strDesc = PACKAGE_NAME \" \" + FormatFullVersion();\n \n         do {\n-#ifndef UPNPDISCOVER_SUCCESS\n-            /* miniupnpc 1.5 */\n-            r = UPNP_AddPortMapping(urls.controlURL, data.first.servicetype,\n-                                port.c_str(), port.c_str(), lanaddr, strDesc.c_str(), \"TCP\", 0);\n-#else\n-            /* miniupnpc 1.6 */\n-            r = UPNP_AddPortMapping(urls.controlURL, data.first.servicetype,\n-                                port.c_str(), port.c_str(), lanaddr, strDesc.c_str(), \"TCP\", 0, \"0\");\n-#endif\n+            r = UPNP_AddPortMapping(urls.controlURL, data.first.servicetype, port.c_str(), port.c_str(), lanaddr, strDesc.c_str(), \"TCP\", 0, \"0\");\n \n-            if(r!=UPNPCOMMAND_SUCCESS)\n-                LogPrintf(\"AddPortMapping(%s, %s, %s) failed with code %d (%s)\\n\",\n-                    port, port, lanaddr, r, strupnperror(r));\n-            else\n+            if (r != UPNPCOMMAND_SUCCESS) {\n+                LogPrintf(\"AddPortMapping(%s, %s, %s) failed with code %d (%s)\\n\", port, port, lanaddr, r, strupnperror(r));\n+            } else {\n                 LogPrintf(\"UPnP Port Mapping successful.\\n\");\n-        }\n-        while(g_upnp_interrupt.sleep_for(std::chrono::minutes(20)));\n+            }\n+        } while (g_upnp_interrupt.sleep_for(std::chrono::minutes(20)));\n \n         r = UPNP_DeletePortMapping(urls.controlURL, data.first.servicetype, port.c_str(), \"TCP\", 0);\n         LogPrintf(\"UPNP_DeletePortMapping() returned: %d\\n\", r);\n@@ -1996,7 +2000,7 @@ void CConnman::ThreadMessageHandler()\n \n \n \n-bool CConnman::BindListenPort(const CService &addrBind, std::string& strError, bool fWhitelisted)\n+bool CConnman::BindListenPort(const CService& addrBind, std::string& strError, NetPermissionFlags permissions)\n {\n     strError = \"\";\n     int nOne = 1;\n@@ -2039,9 +2043,9 @@ bool CConnman::BindListenPort(const CService &addrBind, std::string& strError, b\n     {\n         int nErr = WSAGetLastError();\n         if (nErr == WSAEADDRINUSE)\n-            strError = strprintf(_(\"Unable to bind to %s on this computer. %s is probably already running.\"), addrBind.ToString(), _(PACKAGE_NAME));\n+            strError = strprintf(_(\"Unable to bind to %s on this computer. %s is probably already running.\").translated, addrBind.ToString(), PACKAGE_NAME);\n         else\n-            strError = strprintf(_(\"Unable to bind to %s on this computer (bind returned error %s)\"), addrBind.ToString(), NetworkErrorString(nErr));\n+            strError = strprintf(_(\"Unable to bind to %s on this computer (bind returned error %s)\").translated, addrBind.ToString(), NetworkErrorString(nErr));\n         LogPrintf(\"%s\\n\", strError);\n         CloseSocket(hListenSocket);\n         return false;\n@@ -2051,15 +2055,15 @@ bool CConnman::BindListenPort(const CService &addrBind, std::string& strError, b\n     // Listen for incoming connections\n     if (listen(hListenSocket, SOMAXCONN) == SOCKET_ERROR)\n     {\n-        strError = strprintf(_(\"Error: Listening for incoming connections failed (listen returned error %s)\"), NetworkErrorString(WSAGetLastError()));\n+        strError = strprintf(_(\"Error: Listening for incoming connections failed (listen returned error %s)\").translated, NetworkErrorString(WSAGetLastError()));\n         LogPrintf(\"%s\\n\", strError);\n         CloseSocket(hListenSocket);\n         return false;\n     }\n \n-    vhListenSocket.push_back(ListenSocket(hListenSocket, fWhitelisted));\n+    vhListenSocket.push_back(ListenSocket(hListenSocket, permissions));\n \n-    if (addrBind.IsRoutable() && fDiscover && !fWhitelisted)\n+    if (addrBind.IsRoutable() && fDiscover && (permissions & PF_NOBAN) == 0)\n         AddLocal(addrBind, LOCAL_BIND);\n \n     return true;\n@@ -2143,11 +2147,11 @@ NodeId CConnman::GetNewNodeId()\n }\n \n \n-bool CConnman::Bind(const CService &addr, unsigned int flags) {\n+bool CConnman::Bind(const CService &addr, unsigned int flags, NetPermissionFlags permissions) {\n     if (!(flags & BF_EXPLICIT) && !IsReachable(addr))\n         return false;\n     std::string strError;\n-    if (!BindListenPort(addr, strError, (flags & BF_WHITELIST) != 0)) {\n+    if (!BindListenPort(addr, strError, permissions)) {\n         if ((flags & BF_REPORT_ERROR) && clientInterface) {\n             clientInterface->ThreadSafeMessageBox(strError, \"\", CClientUIInterface::MSG_ERROR);\n         }\n@@ -2156,20 +2160,21 @@ bool CConnman::Bind(const CService &addr, unsigned int flags) {\n     return true;\n }\n \n-bool CConnman::InitBinds(const std::vector<CService>& binds, const std::vector<CService>& whiteBinds) {\n+bool CConnman::InitBinds(const std::vector<CService>& binds, const std::vector<NetWhitebindPermissions>& whiteBinds)\n+{\n     bool fBound = false;\n     for (const auto& addrBind : binds) {\n-        fBound |= Bind(addrBind, (BF_EXPLICIT | BF_REPORT_ERROR));\n+        fBound |= Bind(addrBind, (BF_EXPLICIT | BF_REPORT_ERROR), NetPermissionFlags::PF_NONE);\n     }\n     for (const auto& addrBind : whiteBinds) {\n-        fBound |= Bind(addrBind, (BF_EXPLICIT | BF_REPORT_ERROR | BF_WHITELIST));\n+        fBound |= Bind(addrBind.m_service, (BF_EXPLICIT | BF_REPORT_ERROR), addrBind.m_flags);\n     }\n     if (binds.empty() && whiteBinds.empty()) {\n         struct in_addr inaddr_any;\n         inaddr_any.s_addr = INADDR_ANY;\n         struct in6_addr inaddr6_any = IN6ADDR_ANY_INIT;\n-        fBound |= Bind(CService(inaddr6_any, GetListenPort()), BF_NONE);\n-        fBound |= Bind(CService(inaddr_any, GetListenPort()), !fBound ? BF_REPORT_ERROR : BF_NONE);\n+        fBound |= Bind(CService(inaddr6_any, GetListenPort()), BF_NONE, NetPermissionFlags::PF_NONE);\n+        fBound |= Bind(CService(inaddr_any, GetListenPort()), !fBound ? BF_REPORT_ERROR : BF_NONE, NetPermissionFlags::PF_NONE);\n     }\n     return fBound;\n }\n@@ -2192,7 +2197,7 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n     if (fListen && !InitBinds(connOptions.vBinds, connOptions.vWhiteBinds)) {\n         if (clientInterface) {\n             clientInterface->ThreadSafeMessageBox(\n-                _(\"Failed to listen on any port. Use -listen=0 if you want this.\"),\n+                _(\"Failed to listen on any port. Use -listen=0 if you want this.\").translated,\n                 \"\", CClientUIInterface::MSG_ERROR);\n         }\n         return false;\n@@ -2203,7 +2208,7 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n     }\n \n     if (clientInterface) {\n-        clientInterface->InitMessage(_(\"Loading P2P addresses...\"));\n+        clientInterface->InitMessage(_(\"Loading P2P addresses...\").translated);\n     }\n     // Load addresses from peers.dat\n     int64_t nStart = GetTimeMillis();\n@@ -2218,7 +2223,7 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n         }\n     }\n \n-    uiInterface.InitMessage(_(\"Starting network threads...\"));\n+    uiInterface.InitMessage(_(\"Starting network threads...\").translated);\n \n     fAddressesInitialized = true;\n \n@@ -2258,7 +2263,7 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n     if (connOptions.m_use_addrman_outgoing && !connOptions.m_specified_outgoing.empty()) {\n         if (clientInterface) {\n             clientInterface->ThreadSafeMessageBox(\n-                _(\"Cannot provide specific connections and have addrman find outgoing connections at the same.\"),\n+                _(\"Cannot provide specific connections and have addrman find outgoing connections at the same.\").translated,\n                 \"\", CClientUIInterface::MSG_ERROR);\n         }\n         return false;"
      },
      {
        "sha": "6c77d8135f7db602d1be560d051d21837ea0357f",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 27,
        "deletions": 13,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -15,6 +15,7 @@\n #include <hash.h>\n #include <limitedmap.h>\n #include <netaddress.h>\n+#include <net_permissions.h>\n #include <policy/feerate.h>\n #include <protocol.h>\n #include <random.h>\n@@ -39,6 +40,11 @@ class CScheduler;\n class CNode;\n class BanMan;\n \n+/** Default for -whitelistrelay. */\n+static const bool DEFAULT_WHITELISTRELAY = true;\n+/** Default for -whitelistforcerelay. */\n+static const bool DEFAULT_WHITELISTFORCERELAY = false;\n+\n /** Time between pings automatically sent out for latency probing and keepalive (in seconds). */\n static const int PING_INTERVAL = 2 * 60;\n /** Time after which to disconnect, after waiting for a ping response (or inactivity). */\n@@ -138,8 +144,9 @@ class CConnman\n         uint64_t nMaxOutboundLimit = 0;\n         int64_t m_peer_connect_timeout = DEFAULT_PEER_CONNECT_TIMEOUT;\n         std::vector<std::string> vSeedNodes;\n-        std::vector<CSubNet> vWhitelistedRange;\n-        std::vector<CService> vBinds, vWhiteBinds;\n+        std::vector<NetWhitelistPermissions> vWhitelistedRange;\n+        std::vector<NetWhitebindPermissions> vWhiteBinds;\n+        std::vector<CService> vBinds;\n         bool m_use_addrman_outgoing = true;\n         std::vector<std::string> m_specified_outgoing;\n         std::vector<std::string> m_added_nodes;\n@@ -314,15 +321,17 @@ class CConnman\n \n private:\n     struct ListenSocket {\n+    public:\n         SOCKET socket;\n-        bool whitelisted;\n-\n-        ListenSocket(SOCKET socket_, bool whitelisted_) : socket(socket_), whitelisted(whitelisted_) {}\n+        inline void AddSocketPermissionFlags(NetPermissionFlags& flags) const { NetPermissions::AddFlag(flags, m_permissions); }\n+        ListenSocket(SOCKET socket_, NetPermissionFlags permissions_) : socket(socket_), m_permissions(permissions_) {}\n+    private:\n+        NetPermissionFlags m_permissions;\n     };\n \n-    bool BindListenPort(const CService &bindAddr, std::string& strError, bool fWhitelisted = false);\n-    bool Bind(const CService &addr, unsigned int flags);\n-    bool InitBinds(const std::vector<CService>& binds, const std::vector<CService>& whiteBinds);\n+    bool BindListenPort(const CService& bindAddr, std::string& strError, NetPermissionFlags permissions);\n+    bool Bind(const CService& addr, unsigned int flags, NetPermissionFlags permissions);\n+    bool InitBinds(const std::vector<CService>& binds, const std::vector<NetWhitebindPermissions>& whiteBinds);\n     void ThreadOpenAddedConnections();\n     void AddOneShot(const std::string& strDest);\n     void ProcessOneShot();\n@@ -347,7 +356,7 @@ class CConnman\n \n     bool AttemptToEvictConnection();\n     CNode* ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure, bool manual_connection);\n-    bool IsWhitelistedRange(const CNetAddr &addr);\n+    void AddWhitelistPermissionFlags(NetPermissionFlags& flags, const CNetAddr &addr) const;\n \n     void DeleteNode(CNode* pnode);\n \n@@ -380,7 +389,7 @@ class CConnman\n \n     // Whitelisted ranges. Any node connecting from these is automatically\n     // whitelisted (as well as those connecting to whitelisted binds).\n-    std::vector<CSubNet> vWhitelistedRange;\n+    std::vector<NetWhitelistPermissions> vWhitelistedRange;\n \n     unsigned int nSendBufferMaxSize{0};\n     unsigned int nReceiveFloodSize{0};\n@@ -448,7 +457,6 @@ void StartMapPort();\n void InterruptMapPort();\n void StopMapPort();\n unsigned short GetListenPort();\n-bool BindListenPort(const CService &bindAddr, std::string& strError, bool fWhitelisted = false);\n \n struct CombinerAll\n {\n@@ -555,7 +563,8 @@ class CNodeStats\n     mapMsgCmdSize mapSendBytesPerMsgCmd;\n     uint64_t nRecvBytes;\n     mapMsgCmdSize mapRecvBytesPerMsgCmd;\n-    bool fWhitelisted;\n+    NetPermissionFlags m_permissionFlags;\n+    bool m_legacyWhitelisted;\n     double dPingTime;\n     double dPingWait;\n     double dMinPing;\n@@ -657,7 +666,11 @@ class CNode\n      */\n     std::string cleanSubVer GUARDED_BY(cs_SubVer){};\n     bool m_prefer_evict{false}; // This peer is preferred for eviction.\n-    bool fWhitelisted{false}; // This peer can bypass DoS banning.\n+    bool HasPermission(NetPermissionFlags permission) const {\n+        return NetPermissions::HasFlag(m_permissionFlags, permission);\n+    }\n+    // This boolean is unusued in actual processing, only present for backward compatibility at RPC/QT level\n+    bool m_legacyWhitelisted{false};\n     bool fFeeler{false}; // If true this node is being used as a short lived feeler.\n     bool fOneShot{false};\n     bool m_manual_connection{false};\n@@ -753,6 +766,7 @@ class CNode\n     const ServiceFlags nLocalServices;\n     const int nMyStartingHeight;\n     int nSendVersion{0};\n+    NetPermissionFlags m_permissionFlags{ PF_NONE };\n     std::list<CNetMessage> vRecvMsg;  // Used only by SocketHandler thread\n \n     mutable CCriticalSection cs_addrName;"
      },
      {
        "sha": "ef6c40ce207ad6140e3233214fcd831b38f49e77",
        "filename": "src/net_permissions.cpp",
        "status": "added",
        "additions": 107,
        "deletions": 0,
        "changes": 107,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/net_permissions.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/net_permissions.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_permissions.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -0,0 +1,107 @@\n+// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <net_permissions.h>\n+#include <netbase.h>\n+#include <util/error.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+\n+// The parse the following format \"perm1,perm2@xxxxxx\"\n+bool TryParsePermissionFlags(const std::string str, NetPermissionFlags& output, size_t& readen, std::string& error)\n+{\n+    NetPermissionFlags flags = PF_NONE;\n+    const auto atSeparator = str.find('@');\n+\n+    // if '@' is not found (ie, \"xxxxx\"), the caller should apply implicit permissions\n+    if (atSeparator == std::string::npos) {\n+        NetPermissions::AddFlag(flags, PF_ISIMPLICIT);\n+        readen = 0;\n+    }\n+    // else (ie, \"perm1,perm2@xxxxx\"), let's enumerate the permissions by splitting by ',' and calculate the flags\n+    else {\n+        readen = 0;\n+        // permissions == perm1,perm2\n+        const auto permissions = str.substr(0, atSeparator);\n+        while (readen < permissions.length()) {\n+            const auto commaSeparator = permissions.find(',', readen);\n+            const auto len = commaSeparator == std::string::npos ? permissions.length() - readen : commaSeparator - readen;\n+            // permission == perm1\n+            const auto permission = permissions.substr(readen, len);\n+            readen += len; // We read \"perm1\"\n+            if (commaSeparator != std::string::npos) readen++; // We read \",\"\n+\n+            if (permission == \"bloomfilter\" || permission == \"bloom\") NetPermissions::AddFlag(flags, PF_BLOOMFILTER);\n+            else if (permission == \"noban\") NetPermissions::AddFlag(flags, PF_NOBAN);\n+            else if (permission == \"forcerelay\") NetPermissions::AddFlag(flags, PF_FORCERELAY);\n+            else if (permission == \"mempool\") NetPermissions::AddFlag(flags, PF_MEMPOOL);\n+            else if (permission == \"all\") NetPermissions::AddFlag(flags, PF_ALL);\n+            else if (permission == \"relay\") NetPermissions::AddFlag(flags, PF_RELAY);\n+            else if (permission.length() == 0); // Allow empty entries\n+            else {\n+                error = strprintf(_(\"Invalid P2P permission: '%s'\").translated, permission);\n+                return false;\n+            }\n+        }\n+        readen++;\n+    }\n+\n+    output = flags;\n+    error = \"\";\n+    return true;\n+}\n+\n+std::vector<std::string> NetPermissions::ToStrings(NetPermissionFlags flags)\n+{\n+    std::vector<std::string> strings;\n+    if (NetPermissions::HasFlag(flags, PF_BLOOMFILTER)) strings.push_back(\"bloomfilter\");\n+    if (NetPermissions::HasFlag(flags, PF_NOBAN)) strings.push_back(\"noban\");\n+    if (NetPermissions::HasFlag(flags, PF_FORCERELAY)) strings.push_back(\"forcerelay\");\n+    if (NetPermissions::HasFlag(flags, PF_RELAY)) strings.push_back(\"relay\");\n+    if (NetPermissions::HasFlag(flags, PF_MEMPOOL)) strings.push_back(\"mempool\");\n+    return strings;\n+}\n+\n+bool NetWhitebindPermissions::TryParse(const std::string str, NetWhitebindPermissions& output, std::string& error)\n+{\n+    NetPermissionFlags flags;\n+    size_t offset;\n+    if (!TryParsePermissionFlags(str, flags, offset, error)) return false;\n+\n+    const std::string strBind = str.substr(offset);\n+    CService addrBind;\n+    if (!Lookup(strBind.c_str(), addrBind, 0, false)) {\n+        error = ResolveErrMsg(\"whitebind\", strBind);\n+        return false;\n+    }\n+    if (addrBind.GetPort() == 0) {\n+        error = strprintf(_(\"Need to specify a port with -whitebind: '%s'\").translated, strBind);\n+        return false;\n+    }\n+\n+    output.m_flags = flags;\n+    output.m_service = addrBind;\n+    error = \"\";\n+    return true;\n+}\n+\n+bool NetWhitelistPermissions::TryParse(const std::string str, NetWhitelistPermissions& output, std::string& error)\n+{\n+    NetPermissionFlags flags;\n+    size_t offset;\n+    if (!TryParsePermissionFlags(str, flags, offset, error)) return false;\n+\n+    const std::string net = str.substr(offset);\n+    CSubNet subnet;\n+    LookupSubNet(net.c_str(), subnet);\n+    if (!subnet.IsValid()) {\n+        error = strprintf(_(\"Invalid netmask specified in -whitelist: '%s'\").translated, net);\n+        return false;\n+    }\n+\n+    output.m_flags = flags;\n+    output.m_subnet = subnet;\n+    error = \"\";\n+    return true;\n+}"
      },
      {
        "sha": "b3987de65f75c22ea11d29aadd04522a066d8769",
        "filename": "src/net_permissions.h",
        "status": "added",
        "additions": 62,
        "deletions": 0,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/net_permissions.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/net_permissions.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_permissions.h?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -0,0 +1,62 @@\n+// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <string>\n+#include <vector>\n+#include <netaddress.h>\n+\n+#ifndef BITCOIN_NET_PERMISSIONS_H\n+#define BITCOIN_NET_PERMISSIONS_H\n+enum NetPermissionFlags\n+{\n+    PF_NONE = 0,\n+    // Can query bloomfilter even if -peerbloomfilters is false\n+    PF_BLOOMFILTER = (1U << 1),\n+    // Relay and accept transactions from this peer, even if -blocksonly is true\n+    PF_RELAY = (1U << 3),\n+    // Always relay transactions from this peer, even if already in mempool or rejected from policy\n+    // Keep parameter interaction: forcerelay implies relay\n+    PF_FORCERELAY = (1U << 2) | PF_RELAY,\n+    // Can't be banned for misbehavior\n+    PF_NOBAN = (1U << 4),\n+    // Can query the mempool\n+    PF_MEMPOOL = (1U << 5),\n+\n+    // True if the user did not specifically set fine grained permissions\n+    PF_ISIMPLICIT = (1U << 31),\n+    PF_ALL = PF_BLOOMFILTER | PF_FORCERELAY | PF_RELAY | PF_NOBAN | PF_MEMPOOL,\n+};\n+class NetPermissions\n+{\n+public:\n+    NetPermissionFlags m_flags;\n+    static std::vector<std::string> ToStrings(NetPermissionFlags flags);\n+    static inline bool HasFlag(const NetPermissionFlags& flags, NetPermissionFlags f)\n+    {\n+        return (flags & f) == f;\n+    }\n+    static inline void AddFlag(NetPermissionFlags& flags, NetPermissionFlags f)\n+    {\n+        flags = static_cast<NetPermissionFlags>(flags | f);\n+    }\n+    static inline void ClearFlag(NetPermissionFlags& flags, NetPermissionFlags f)\n+    {\n+        flags = static_cast<NetPermissionFlags>(flags & ~f);\n+    }\n+};\n+class NetWhitebindPermissions : public NetPermissions\n+{\n+public:\n+    static bool TryParse(const std::string str, NetWhitebindPermissions& output, std::string& error);\n+    CService m_service;\n+};\n+\n+class NetWhitelistPermissions : public NetPermissions\n+{\n+public:\n+    static bool TryParse(const std::string str, NetWhitelistPermissions& output, std::string& error);\n+    CSubNet m_subnet;\n+};\n+\n+#endif // BITCOIN_NET_PERMISSIONS_H\n\\ No newline at end of file"
      },
      {
        "sha": "520dfcbb66aedcac2a7e29087c6c6f39ed734ced",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 68,
        "deletions": 58,
        "changes": 126,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -68,13 +68,13 @@ static constexpr int32_t MAX_PEER_TX_IN_FLIGHT = 100;\n /** Maximum number of announced transactions from a peer */\n static constexpr int32_t MAX_PEER_TX_ANNOUNCEMENTS = 2 * MAX_INV_SZ;\n /** How many microseconds to delay requesting transactions from inbound peers */\n-static constexpr int64_t INBOUND_PEER_TX_DELAY = 2 * 1000000; // 2 seconds\n+static constexpr std::chrono::microseconds INBOUND_PEER_TX_DELAY{std::chrono::seconds{2}};\n /** How long to wait (in microseconds) before downloading a transaction from an additional peer */\n-static constexpr int64_t GETDATA_TX_INTERVAL = 60 * 1000000; // 1 minute\n+static constexpr std::chrono::microseconds GETDATA_TX_INTERVAL{std::chrono::seconds{60}};\n /** Maximum delay (in microseconds) for transaction requests to avoid biasing some peers over others. */\n-static constexpr int64_t MAX_GETDATA_RANDOM_DELAY = 2 * 1000000; // 2 seconds\n+static constexpr std::chrono::microseconds MAX_GETDATA_RANDOM_DELAY{std::chrono::seconds{2}};\n /** How long to wait (in microseconds) before expiring an in-flight getdata request to a peer */\n-static constexpr int64_t TX_EXPIRY_INTERVAL = 10 * GETDATA_TX_INTERVAL;\n+static constexpr std::chrono::microseconds TX_EXPIRY_INTERVAL{GETDATA_TX_INTERVAL * 10};\n static_assert(INBOUND_PEER_TX_DELAY >= MAX_GETDATA_RANDOM_DELAY,\n \"To preserve security, MAX_GETDATA_RANDOM_DELAY should not exceed INBOUND_PEER_DELAY\");\n /** Limit to avoid sending big packets. Not used in processing incoming GETDATA for compatibility */\n@@ -340,16 +340,16 @@ struct CNodeState {\n         /* Track when to attempt download of announced transactions (process\n          * time in micros -> txid)\n          */\n-        std::multimap<int64_t, uint256> m_tx_process_time;\n+        std::multimap<std::chrono::microseconds, uint256> m_tx_process_time;\n \n         //! Store all the transactions a peer has recently announced\n         std::set<uint256> m_tx_announced;\n \n         //! Store transactions which were requested by us, with timestamp\n-        std::map<uint256, int64_t> m_tx_in_flight;\n+        std::map<uint256, std::chrono::microseconds> m_tx_in_flight;\n \n         //! Periodically check for stuck getdata requests\n-        int64_t m_check_expiry_timer{0};\n+        std::chrono::microseconds m_check_expiry_timer{0};\n     };\n \n     TxDownloadState m_tx_download;\n@@ -391,7 +391,7 @@ struct CNodeState {\n };\n \n // Keeps track of the time (in microseconds) when transactions were requested last time\n-limitedmap<uint256, int64_t> g_already_asked_for GUARDED_BY(cs_main)(MAX_INV_SZ);\n+limitedmap<uint256, std::chrono::microseconds> g_already_asked_for GUARDED_BY(cs_main)(MAX_INV_SZ);\n \n /** Map maintaining per-node state. */\n static std::map<NodeId, CNodeState> mapNodeState GUARDED_BY(cs_main);\n@@ -408,7 +408,7 @@ static void UpdatePreferredDownload(CNode* node, CNodeState* state) EXCLUSIVE_LO\n     nPreferredDownload -= state->fPreferredDownload;\n \n     // Whether this node should be marked as a preferred download node.\n-    state->fPreferredDownload = (!node->fInbound || node->fWhitelisted) && !node->fOneShot && !node->fClient;\n+    state->fPreferredDownload = (!node->fInbound || node->HasPermission(PF_NOBAN)) && !node->fOneShot && !node->fClient;\n \n     nPreferredDownload += state->fPreferredDownload;\n }\n@@ -688,16 +688,16 @@ void EraseTxRequest(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n     g_already_asked_for.erase(txid);\n }\n \n-int64_t GetTxRequestTime(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+std::chrono::microseconds GetTxRequestTime(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     auto it = g_already_asked_for.find(txid);\n     if (it != g_already_asked_for.end()) {\n         return it->second;\n     }\n-    return 0;\n+    return {};\n }\n \n-void UpdateTxRequestTime(const uint256& txid, int64_t request_time) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+void UpdateTxRequestTime(const uint256& txid, std::chrono::microseconds request_time) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     auto it = g_already_asked_for.find(txid);\n     if (it == g_already_asked_for.end()) {\n@@ -707,17 +707,17 @@ void UpdateTxRequestTime(const uint256& txid, int64_t request_time) EXCLUSIVE_LO\n     }\n }\n \n-int64_t CalculateTxGetDataTime(const uint256& txid, int64_t current_time, bool use_inbound_delay) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+std::chrono::microseconds CalculateTxGetDataTime(const uint256& txid, std::chrono::microseconds current_time, bool use_inbound_delay) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n-    int64_t process_time;\n-    int64_t last_request_time = GetTxRequestTime(txid);\n+    std::chrono::microseconds process_time;\n+    const auto last_request_time = GetTxRequestTime(txid);\n     // First time requesting this tx\n-    if (last_request_time == 0) {\n+    if (last_request_time.count() == 0) {\n         process_time = current_time;\n     } else {\n         // Randomize the delay to avoid biasing some peers over others (such as due to\n         // fixed ordering of peer processing in ThreadMessageHandler)\n-        process_time = last_request_time + GETDATA_TX_INTERVAL + GetRand(MAX_GETDATA_RANDOM_DELAY);\n+        process_time = last_request_time + GETDATA_TX_INTERVAL + GetRandMicros(MAX_GETDATA_RANDOM_DELAY);\n     }\n \n     // We delay processing announcements from inbound peers\n@@ -726,7 +726,7 @@ int64_t CalculateTxGetDataTime(const uint256& txid, int64_t current_time, bool u\n     return process_time;\n }\n \n-void RequestTx(CNodeState* state, const uint256& txid, int64_t nNow) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+void RequestTx(CNodeState* state, const uint256& txid, std::chrono::microseconds current_time) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     CNodeState::TxDownloadState& peer_download_state = state->m_tx_download;\n     if (peer_download_state.m_tx_announced.size() >= MAX_PEER_TX_ANNOUNCEMENTS ||\n@@ -740,7 +740,7 @@ void RequestTx(CNodeState* state, const uint256& txid, int64_t nNow) EXCLUSIVE_L\n \n     // Calculate the time to try requesting this transaction. Use\n     // fPreferredDownload as a proxy for outbound peers.\n-    int64_t process_time = CalculateTxGetDataTime(txid, nNow, !state->fPreferredDownload);\n+    const auto process_time = CalculateTxGetDataTime(txid, current_time, !state->fPreferredDownload);\n \n     peer_download_state.m_tx_process_time.emplace(process_time, txid);\n }\n@@ -1291,11 +1291,12 @@ bool static AlreadyHave(const CInv& inv) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n                 LOCK(g_cs_orphans);\n                 if (mapOrphanTransactions.count(inv.hash)) return true;\n             }\n+            const CCoinsViewCache& coins_cache = ::ChainstateActive().CoinsTip();\n \n             return recentRejects->contains(inv.hash) ||\n                    mempool.exists(inv.hash) ||\n-                   pcoinsTip->HaveCoinInCache(COutPoint(inv.hash, 0)) || // Best effort: only try output 0 and 1\n-                   pcoinsTip->HaveCoinInCache(COutPoint(inv.hash, 1));\n+                   coins_cache.HaveCoinInCache(COutPoint(inv.hash, 0)) || // Best effort: only try output 0 and 1\n+                   coins_cache.HaveCoinInCache(COutPoint(inv.hash, 1));\n         }\n     case MSG_BLOCK:\n     case MSG_WITNESS_BLOCK:\n@@ -1305,10 +1306,10 @@ bool static AlreadyHave(const CInv& inv) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n     return true;\n }\n \n-static void RelayTransaction(const CTransaction& tx, CConnman* connman)\n+void RelayTransaction(const uint256& txid, const CConnman& connman)\n {\n-    CInv inv(MSG_TX, tx.GetHash());\n-    connman->ForEachNode([&inv](CNode* pnode)\n+    CInv inv(MSG_TX, txid);\n+    connman.ForEachNode([&inv](CNode* pnode)\n     {\n         pnode->PushInventory(inv);\n     });\n@@ -1398,7 +1399,7 @@ void static ProcessGetBlockData(CNode* pfrom, const CChainParams& chainparams, c\n     const CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n     // disconnect node in case we have reached the outbound limit for serving historical blocks\n     // never disconnect whitelisted nodes\n-    if (send && connman->OutboundTargetReached(true) && ( ((pindexBestHeader != nullptr) && (pindexBestHeader->GetBlockTime() - pindex->GetBlockTime() > HISTORICAL_BLOCK_AGE)) || inv.type == MSG_FILTERED_BLOCK) && !pfrom->fWhitelisted)\n+    if (send && connman->OutboundTargetReached(true) && ( ((pindexBestHeader != nullptr) && (pindexBestHeader->GetBlockTime() - pindex->GetBlockTime() > HISTORICAL_BLOCK_AGE)) || inv.type == MSG_FILTERED_BLOCK) && !pfrom->HasPermission(PF_NOBAN))\n     {\n         LogPrint(BCLog::NET, \"historical block serving limit reached, disconnect peer=%d\\n\", pfrom->GetId());\n \n@@ -1407,7 +1408,7 @@ void static ProcessGetBlockData(CNode* pfrom, const CChainParams& chainparams, c\n         send = false;\n     }\n     // Avoid leaking prune-height by never sending blocks below the NODE_NETWORK_LIMITED threshold\n-    if (send && !pfrom->fWhitelisted && (\n+    if (send && !pfrom->HasPermission(PF_NOBAN) && (\n             (((pfrom->GetLocalServices() & NODE_NETWORK_LIMITED) == NODE_NETWORK_LIMITED) && ((pfrom->GetLocalServices() & NODE_NETWORK) != NODE_NETWORK) && (::ChainActive().Tip()->nHeight - pindex->nHeight > (int)NODE_NETWORK_LIMITED_MIN_BLOCKS + 2 /* add two blocks buffer extension for possible races */) )\n        )) {\n         LogPrint(BCLog::NET, \"Ignore block request below NODE_NETWORK_LIMITED threshold from peer=%d\\n\", pfrom->GetId());\n@@ -1811,7 +1812,7 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n         if (setMisbehaving.count(fromPeer)) continue;\n         if (AcceptToMemoryPool(mempool, orphan_state, porphanTx, &fMissingInputs2, &removed_txn, false /* bypass_limits */, 0 /* nAbsurdFee */)) {\n             LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n-            RelayTransaction(orphanTx, connman);\n+            RelayTransaction(orphanHash, *connman);\n             for (unsigned int i = 0; i < orphanTx.vout.size(); i++) {\n                 auto it_by_prev = mapOrphanTransactionsByPrev.find(COutPoint(orphanHash, i));\n                 if (it_by_prev != mapOrphanTransactionsByPrev.end()) {\n@@ -1844,7 +1845,7 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n             EraseOrphanTx(orphanHash);\n             done = true;\n         }\n-        mempool.check(pcoinsTip.get());\n+        mempool.check(&::ChainstateActive().CoinsTip());\n     }\n }\n \n@@ -2217,13 +2218,13 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         bool fBlocksOnly = !g_relay_txes;\n \n         // Allow whitelisted peers to send data other than blocks in blocks only mode if whitelistrelay is true\n-        if (pfrom->fWhitelisted && gArgs.GetBoolArg(\"-whitelistrelay\", DEFAULT_WHITELISTRELAY))\n+        if (pfrom->HasPermission(PF_RELAY))\n             fBlocksOnly = false;\n \n         LOCK(cs_main);\n \n         uint32_t nFetchFlags = GetFetchFlags(pfrom);\n-        int64_t nNow = GetTimeMicros();\n+        const auto current_time = GetTime<std::chrono::microseconds>();\n \n         for (CInv &inv : vInv)\n         {\n@@ -2255,7 +2256,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 if (fBlocksOnly) {\n                     LogPrint(BCLog::NET, \"transaction (%s) inv sent in violation of protocol peer=%d\\n\", inv.hash.ToString(), pfrom->GetId());\n                 } else if (!fAlreadyHave && !fImporting && !fReindex && !::ChainstateActive().IsInitialBlockDownload()) {\n-                    RequestTx(State(pfrom->GetId()), inv.hash, nNow);\n+                    RequestTx(State(pfrom->GetId()), inv.hash, current_time);\n                 }\n             }\n         }\n@@ -2412,7 +2413,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         }\n \n         LOCK(cs_main);\n-        if (::ChainstateActive().IsInitialBlockDownload() && !pfrom->fWhitelisted) {\n+        if (::ChainstateActive().IsInitialBlockDownload() && !pfrom->HasPermission(PF_NOBAN)) {\n             LogPrint(BCLog::NET, \"Ignoring getheaders from peer=%d because node is in initial block download\\n\", pfrom->GetId());\n             return true;\n         }\n@@ -2470,7 +2471,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n     if (strCommand == NetMsgType::TX) {\n         // Stop processing the transaction early if\n         // We are in blocks only mode and peer is either not whitelisted or whitelistrelay is off\n-        if (!g_relay_txes && (!pfrom->fWhitelisted || !gArgs.GetBoolArg(\"-whitelistrelay\", DEFAULT_WHITELISTRELAY)))\n+        if (!g_relay_txes && !pfrom->HasPermission(PF_RELAY))\n         {\n             LogPrint(BCLog::NET, \"transaction sent in violation of protocol peer=%d\\n\", pfrom->GetId());\n             return true;\n@@ -2497,8 +2498,8 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n \n         if (!AlreadyHave(inv) &&\n             AcceptToMemoryPool(mempool, state, ptx, &fMissingInputs, &lRemovedTxn, false /* bypass_limits */, 0 /* nAbsurdFee */)) {\n-            mempool.check(pcoinsTip.get());\n-            RelayTransaction(tx, connman);\n+            mempool.check(&::ChainstateActive().CoinsTip());\n+            RelayTransaction(tx.GetHash(), *connman);\n             for (unsigned int i = 0; i < tx.vout.size(); i++) {\n                 auto it_by_prev = mapOrphanTransactionsByPrev.find(COutPoint(inv.hash, i));\n                 if (it_by_prev != mapOrphanTransactionsByPrev.end()) {\n@@ -2529,12 +2530,12 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             }\n             if (!fRejectedParents) {\n                 uint32_t nFetchFlags = GetFetchFlags(pfrom);\n-                int64_t nNow = GetTimeMicros();\n+                const auto current_time = GetTime<std::chrono::microseconds>();\n \n                 for (const CTxIn& txin : tx.vin) {\n                     CInv _inv(MSG_TX | nFetchFlags, txin.prevout.hash);\n                     pfrom->AddInventoryKnown(_inv);\n-                    if (!AlreadyHave(_inv)) RequestTx(State(pfrom->GetId()), _inv.hash, nNow);\n+                    if (!AlreadyHave(_inv)) RequestTx(State(pfrom->GetId()), _inv.hash, current_time);\n                 }\n                 AddOrphanTx(ptx, pfrom->GetId());\n \n@@ -2565,7 +2566,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 AddToCompactExtraTransactions(ptx);\n             }\n \n-            if (pfrom->fWhitelisted && gArgs.GetBoolArg(\"-whitelistforcerelay\", DEFAULT_WHITELISTFORCERELAY)) {\n+            if (pfrom->HasPermission(PF_FORCERELAY)) {\n                 // Always relay transactions received from whitelisted peers, even\n                 // if they were already in the mempool or rejected from it due\n                 // to policy, allowing the node to function as a gateway for\n@@ -2577,7 +2578,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                     LogPrintf(\"Not relaying invalid transaction %s from whitelisted peer=%d (%s)\\n\", tx.GetHash().ToString(), pfrom->GetId(), FormatStateMessage(state));\n                 } else {\n                     LogPrintf(\"Force relaying tx %s from whitelisted peer=%d\\n\", tx.GetHash().ToString(), pfrom->GetId());\n-                    RelayTransaction(tx, connman);\n+                    RelayTransaction(tx.GetHash(), *connman);\n                 }\n             }\n         }\n@@ -3010,17 +3011,23 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n     }\n \n     if (strCommand == NetMsgType::MEMPOOL) {\n-        if (!(pfrom->GetLocalServices() & NODE_BLOOM) && !pfrom->fWhitelisted)\n+        if (!(pfrom->GetLocalServices() & NODE_BLOOM) && !pfrom->HasPermission(PF_MEMPOOL))\n         {\n-            LogPrint(BCLog::NET, \"mempool request with bloom filters disabled, disconnect peer=%d\\n\", pfrom->GetId());\n-            pfrom->fDisconnect = true;\n+            if (!pfrom->HasPermission(PF_NOBAN))\n+            {\n+                LogPrint(BCLog::NET, \"mempool request with bloom filters disabled, disconnect peer=%d\\n\", pfrom->GetId());\n+                pfrom->fDisconnect = true;\n+            }\n             return true;\n         }\n \n-        if (connman->OutboundTargetReached(false) && !pfrom->fWhitelisted)\n+        if (connman->OutboundTargetReached(false) && !pfrom->HasPermission(PF_MEMPOOL))\n         {\n-            LogPrint(BCLog::NET, \"mempool request with bandwidth limit reached, disconnect peer=%d\\n\", pfrom->GetId());\n-            pfrom->fDisconnect = true;\n+            if (!pfrom->HasPermission(PF_NOBAN))\n+            {\n+                LogPrint(BCLog::NET, \"mempool request with bandwidth limit reached, disconnect peer=%d\\n\", pfrom->GetId());\n+                pfrom->fDisconnect = true;\n+            }\n             return true;\n         }\n \n@@ -3216,7 +3223,7 @@ bool PeerLogicValidation::SendRejectsAndCheckIfBanned(CNode* pnode, bool enable_\n \n     if (state.fShouldBan) {\n         state.fShouldBan = false;\n-        if (pnode->fWhitelisted)\n+        if (pnode->HasPermission(PF_NOBAN))\n             LogPrintf(\"Warning: not punishing whitelisted peer %s!\\n\", pnode->addr.ToString());\n         else if (pnode->m_manual_connection)\n             LogPrintf(\"Warning: not punishing manually-connected peer %s!\\n\", pnode->addr.ToString());\n@@ -3786,7 +3793,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n             pto->vInventoryBlockToSend.clear();\n \n             // Check whether periodic sends should happen\n-            bool fSendTrickle = pto->fWhitelisted;\n+            bool fSendTrickle = pto->HasPermission(PF_NOBAN);\n             if (pto->nNextInvSend < nNow) {\n                 fSendTrickle = true;\n                 if (pto->fInbound) {\n@@ -3906,6 +3913,9 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n             connman->PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\n \n         // Detect whether we're stalling\n+        const auto current_time = GetTime<std::chrono::microseconds>();\n+        // nNow is the current system time (GetTimeMicros is not mockable) and\n+        // should be replaced by the mockable current_time eventually\n         nNow = GetTimeMicros();\n         if (state.nStallingSince && state.nStallingSince < nNow - 1000000 * BLOCK_STALLING_TIMEOUT) {\n             // Stalling only triggers when the block download window cannot move. During normal steady state,\n@@ -3939,7 +3949,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                     // Note: If all our peers are inbound, then we won't\n                     // disconnect our sync peer for stalling; we have bigger\n                     // problems if we can't get any outbound peers.\n-                    if (!pto->fWhitelisted) {\n+                    if (!pto->HasPermission(PF_NOBAN)) {\n                         LogPrintf(\"Timeout downloading headers from peer=%d, disconnecting\\n\", pto->GetId());\n                         pto->fDisconnect = true;\n                         return true;\n@@ -3998,9 +4008,9 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n         // were unresponsive in the past.\n         // Eventually we should consider disconnecting peers, but this is\n         // conservative.\n-        if (state.m_tx_download.m_check_expiry_timer <= nNow) {\n+        if (state.m_tx_download.m_check_expiry_timer <= current_time) {\n             for (auto it=state.m_tx_download.m_tx_in_flight.begin(); it != state.m_tx_download.m_tx_in_flight.end();) {\n-                if (it->second <= nNow - TX_EXPIRY_INTERVAL) {\n+                if (it->second <= current_time - TX_EXPIRY_INTERVAL) {\n                     LogPrint(BCLog::NET, \"timeout of inflight tx %s from peer=%d\\n\", it->first.ToString(), pto->GetId());\n                     state.m_tx_download.m_tx_announced.erase(it->first);\n                     state.m_tx_download.m_tx_in_flight.erase(it++);\n@@ -4010,11 +4020,11 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n             }\n             // On average, we do this check every TX_EXPIRY_INTERVAL. Randomize\n             // so that we're not doing this for all peers at the same time.\n-            state.m_tx_download.m_check_expiry_timer = nNow + TX_EXPIRY_INTERVAL/2 + GetRand(TX_EXPIRY_INTERVAL);\n+            state.m_tx_download.m_check_expiry_timer = current_time + TX_EXPIRY_INTERVAL / 2 + GetRandMicros(TX_EXPIRY_INTERVAL);\n         }\n \n         auto& tx_process_time = state.m_tx_download.m_tx_process_time;\n-        while (!tx_process_time.empty() && tx_process_time.begin()->first <= nNow && state.m_tx_download.m_tx_in_flight.size() < MAX_PEER_TX_IN_FLIGHT) {\n+        while (!tx_process_time.empty() && tx_process_time.begin()->first <= current_time && state.m_tx_download.m_tx_in_flight.size() < MAX_PEER_TX_IN_FLIGHT) {\n             const uint256 txid = tx_process_time.begin()->second;\n             // Erase this entry from tx_process_time (it may be added back for\n             // processing at a later time, see below)\n@@ -4023,22 +4033,22 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n             if (!AlreadyHave(inv)) {\n                 // If this transaction was last requested more than 1 minute ago,\n                 // then request.\n-                int64_t last_request_time = GetTxRequestTime(inv.hash);\n-                if (last_request_time <= nNow - GETDATA_TX_INTERVAL) {\n+                const auto last_request_time = GetTxRequestTime(inv.hash);\n+                if (last_request_time <= current_time - GETDATA_TX_INTERVAL) {\n                     LogPrint(BCLog::NET, \"Requesting %s peer=%d\\n\", inv.ToString(), pto->GetId());\n                     vGetData.push_back(inv);\n                     if (vGetData.size() >= MAX_GETDATA_SZ) {\n                         connman->PushMessage(pto, msgMaker.Make(NetMsgType::GETDATA, vGetData));\n                         vGetData.clear();\n                     }\n-                    UpdateTxRequestTime(inv.hash, nNow);\n-                    state.m_tx_download.m_tx_in_flight.emplace(inv.hash, nNow);\n+                    UpdateTxRequestTime(inv.hash, current_time);\n+                    state.m_tx_download.m_tx_in_flight.emplace(inv.hash, current_time);\n                 } else {\n                     // This transaction is in flight from someone else; queue\n                     // up processing to happen after the download times out\n                     // (with a slight delay for inbound peers, to prefer\n                     // requests to outbound peers).\n-                    int64_t next_process_time = CalculateTxGetDataTime(txid, nNow, !state.fPreferredDownload);\n+                    const auto next_process_time = CalculateTxGetDataTime(txid, current_time, !state.fPreferredDownload);\n                     tx_process_time.emplace(next_process_time, txid);\n                 }\n             } else {\n@@ -4057,7 +4067,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n         //\n         // We don't want white listed peers to filter txs to us if we have -whitelistforcerelay\n         if (pto->nVersion >= FEEFILTER_VERSION && gArgs.GetBoolArg(\"-feefilter\", DEFAULT_FEEFILTER) &&\n-            !(pto->fWhitelisted && gArgs.GetBoolArg(\"-whitelistforcerelay\", DEFAULT_WHITELISTFORCERELAY))) {\n+            !pto->HasPermission(PF_FORCERELAY)) {\n             CAmount currentFilter = mempool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n             int64_t timeNow = GetTimeMicros();\n             if (timeNow > pto->nextSendTimeFeeFilter) {"
      },
      {
        "sha": "1d26164b18befa5fcae3709123488b1092819344",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -19,6 +19,7 @@ static const unsigned int DEFAULT_MAX_ORPHAN_TRANSACTIONS = 100;\n static const unsigned int DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN = 100;\n /** Default for BIP61 (sending reject messages) */\n static constexpr bool DEFAULT_ENABLE_BIP61{false};\n+static const bool DEFAULT_PEERBLOOMFILTERS = false;\n \n class PeerLogicValidation final : public CValidationInterface, public NetEventsInterface {\n private:\n@@ -89,4 +90,7 @@ struct CNodeStateStats {\n /** Get statistics from node state */\n bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats);\n \n+/** Relay transaction to every node */\n+void RelayTransaction(const uint256&, const CConnman& connman);\n+\n #endif // BITCOIN_NET_PROCESSING_H"
      },
      {
        "sha": "0148aea4286c406e419b95e95a2ab7037891bcfa",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 205,
        "deletions": 23,
        "changes": 228,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -37,8 +37,8 @@ bool fNameLookup = DEFAULT_NAME_LOOKUP;\n static const int SOCKS5_RECV_TIMEOUT = 20 * 1000;\n static std::atomic<bool> interruptSocks5Recv(false);\n \n-enum Network ParseNetwork(std::string net) {\n-    Downcase(net);\n+enum Network ParseNetwork(const std::string& net_in) {\n+    std::string net = ToLower(net_in);\n     if (net == \"ipv4\") return NET_IPV4;\n     if (net == \"ipv6\") return NET_IPV6;\n     if (net == \"onion\") return NET_ONION;\n@@ -65,6 +65,12 @@ bool static LookupIntern(const char *pszName, std::vector<CNetAddr>& vIP, unsign\n \n     {\n         CNetAddr addr;\n+        // From our perspective, onion addresses are not hostnames but rather\n+        // direct encodings of CNetAddr much like IPv4 dotted-decimal notation\n+        // or IPv6 colon-separated hextet notation. Since we can't use\n+        // getaddrinfo to decode them and it wouldn't make sense to resolve\n+        // them, we return a network address representing it instead. See\n+        // CNetAddr::SetSpecial(const std::string&) for more details.\n         if (addr.SetSpecial(std::string(pszName))) {\n             vIP.push_back(addr);\n             return true;\n@@ -74,15 +80,25 @@ bool static LookupIntern(const char *pszName, std::vector<CNetAddr>& vIP, unsign\n     struct addrinfo aiHint;\n     memset(&aiHint, 0, sizeof(struct addrinfo));\n \n+    // We want a TCP port, which is a streaming socket type\n     aiHint.ai_socktype = SOCK_STREAM;\n     aiHint.ai_protocol = IPPROTO_TCP;\n+    // We don't care which address family (IPv4 or IPv6) is returned\n     aiHint.ai_family = AF_UNSPEC;\n+    // If we allow lookups of hostnames, use the AI_ADDRCONFIG flag to only\n+    // return addresses whose family we have an address configured for.\n+    //\n+    // If we don't allow lookups, then use the AI_NUMERICHOST flag for\n+    // getaddrinfo to only decode numerical network addresses and suppress\n+    // hostname lookups.\n     aiHint.ai_flags = fAllowLookup ? AI_ADDRCONFIG : AI_NUMERICHOST;\n     struct addrinfo *aiRes = nullptr;\n     int nErr = getaddrinfo(pszName, nullptr, &aiHint, &aiRes);\n     if (nErr)\n         return false;\n \n+    // Traverse the linked list starting with aiTrav, add all non-internal\n+    // IPv4,v6 addresses to vIP while respecting nMaxSolutions.\n     struct addrinfo *aiTrav = aiRes;\n     while (aiTrav != nullptr && (nMaxSolutions == 0 || vIP.size() < nMaxSolutions))\n     {\n@@ -112,6 +128,21 @@ bool static LookupIntern(const char *pszName, std::vector<CNetAddr>& vIP, unsign\n     return (vIP.size() > 0);\n }\n \n+/**\n+ * Resolve a host string to its corresponding network addresses.\n+ *\n+ * @param pszName The string representing a host. Could be a name or a numerical\n+ *                IP address (IPv6 addresses in their bracketed form are\n+ *                allowed).\n+ * @param[out] vIP The resulting network addresses to which the specified host\n+ *                 string resolved.\n+ *\n+ * @returns Whether or not the specified host string successfully resolved to\n+ *          any resulting network addresses.\n+ *\n+ * @see Lookup(const char *, std::vector<CService>&, int, bool, unsigned int)\n+ *      for additional parameter descriptions.\n+ */\n bool LookupHost(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup)\n {\n     std::string strHost(pszName);\n@@ -124,6 +155,12 @@ bool LookupHost(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nM\n     return LookupIntern(strHost.c_str(), vIP, nMaxSolutions, fAllowLookup);\n }\n \n+ /**\n+ * Resolve a host string to its first corresponding network address.\n+ *\n+ * @see LookupHost(const char *, std::vector<CNetAddr>&, unsigned int, bool) for\n+ *      additional parameter descriptions.\n+ */\n bool LookupHost(const char *pszName, CNetAddr& addr, bool fAllowLookup)\n {\n     std::vector<CNetAddr> vIP;\n@@ -134,6 +171,26 @@ bool LookupHost(const char *pszName, CNetAddr& addr, bool fAllowLookup)\n     return true;\n }\n \n+/**\n+ * Resolve a service string to its corresponding service.\n+ *\n+ * @param pszName The string representing a service. Could be a name or a\n+ *                numerical IP address (IPv6 addresses should be in their\n+ *                disambiguated bracketed form), optionally followed by a port\n+ *                number. (e.g. example.com:8333 or\n+ *                [2001:db8:85a3:8d3:1319:8a2e:370:7348]:420)\n+ * @param[out] vAddr The resulting services to which the specified service string\n+ *                   resolved.\n+ * @param portDefault The default port for resulting services if not specified\n+ *                    by the service string.\n+ * @param fAllowLookup Whether or not hostname lookups are permitted. If yes,\n+ *                     external queries may be performed.\n+ * @param nMaxSolutions The maximum number of results we want, specifying 0\n+ *                      means \"as many solutions as we get.\"\n+ *\n+ * @returns Whether or not the service string successfully resolved to any\n+ *          resulting services.\n+ */\n bool Lookup(const char *pszName, std::vector<CService>& vAddr, int portDefault, bool fAllowLookup, unsigned int nMaxSolutions)\n {\n     if (pszName[0] == 0)\n@@ -152,6 +209,12 @@ bool Lookup(const char *pszName, std::vector<CService>& vAddr, int portDefault,\n     return true;\n }\n \n+/**\n+ * Resolve a service string to its first corresponding service.\n+ *\n+ * @see Lookup(const char *, std::vector<CService>&, int, bool, unsigned int)\n+ *      for additional parameter descriptions.\n+ */\n bool Lookup(const char *pszName, CService& addr, int portDefault, bool fAllowLookup)\n {\n     std::vector<CService> vService;\n@@ -162,6 +225,16 @@ bool Lookup(const char *pszName, CService& addr, int portDefault, bool fAllowLoo\n     return true;\n }\n \n+/**\n+ * Resolve a service string with a numeric IP to its first corresponding\n+ * service.\n+ *\n+ * @returns The resulting CService if the resolution was successful, [::]:0\n+ *          otherwise.\n+ *\n+ * @see Lookup(const char *, CService&, int, bool) for additional parameter\n+ *      descriptions.\n+ */\n CService LookupNumeric(const char *pszName, int portDefault)\n {\n     CService addr;\n@@ -231,22 +304,29 @@ enum class IntrRecvError {\n };\n \n /**\n- * Read bytes from socket. This will either read the full number of bytes requested\n- * or return False on error or timeout.\n- * This function can be interrupted by calling InterruptSocks5()\n+ * Try to read a specified number of bytes from a socket. Please read the \"see\n+ * also\" section for more detail.\n  *\n- * @param data Buffer to receive into\n- * @param len  Length of data to receive\n- * @param timeout  Timeout in milliseconds for receive operation\n+ * @param data The buffer where the read bytes should be stored.\n+ * @param len The number of bytes to read into the specified buffer.\n+ * @param timeout The total timeout in milliseconds for this read.\n+ * @param hSocket The socket (has to be in non-blocking mode) from which to read\n+ *                bytes.\n  *\n- * @note This function requires that hSocket is in non-blocking mode.\n+ * @returns An IntrRecvError indicating the resulting status of this read.\n+ *          IntrRecvError::OK only if all of the specified number of bytes were\n+ *          read.\n+ *\n+ * @see This function can be interrupted by calling InterruptSocks5(bool).\n+ *      Sockets can be made non-blocking with SetSocketNonBlocking(const\n+ *      SOCKET&, bool).\n  */\n static IntrRecvError InterruptibleRecv(uint8_t* data, size_t len, int timeout, const SOCKET& hSocket)\n {\n     int64_t curTime = GetTimeMillis();\n     int64_t endTime = curTime + timeout;\n-    // Maximum time to wait in one select call. It will take up until this time (in millis)\n-    // to break off in case of an interruption.\n+    // Maximum time to wait for I/O readiness. It will take up until this time\n+    // (in millis) to break off in case of an interruption.\n     const int64_t maxWait = 1000;\n     while (len > 0 && curTime < endTime) {\n         ssize_t ret = recv(hSocket, (char*)data, len, 0); // Optimistically try the recv first\n@@ -261,11 +341,13 @@ static IntrRecvError InterruptibleRecv(uint8_t* data, size_t len, int timeout, c\n                 if (!IsSelectableSocket(hSocket)) {\n                     return IntrRecvError::NetworkError;\n                 }\n+                // Only wait at most maxWait milliseconds at a time, unless\n+                // we're approaching the end of the specified total timeout\n                 int timeout_ms = std::min(endTime - curTime, maxWait);\n #ifdef USE_POLL\n                 struct pollfd pollfd = {};\n                 pollfd.fd = hSocket;\n-                pollfd.events = POLLIN | POLLOUT;\n+                pollfd.events = POLLIN;\n                 int nRet = poll(&pollfd, 1, timeout_ms);\n #else\n                 struct timeval tval = MillisToTimeval(timeout_ms);\n@@ -320,23 +402,40 @@ static std::string Socks5ErrorString(uint8_t err)\n     }\n }\n \n-/** Connect using SOCKS5 (as described in RFC1928) */\n+/**\n+ * Connect to a specified destination service through an already connected\n+ * SOCKS5 proxy.\n+ *\n+ * @param strDest The destination fully-qualified domain name.\n+ * @param port The destination port.\n+ * @param auth The credentials with which to authenticate with the specified\n+ *             SOCKS5 proxy.\n+ * @param hSocket The SOCKS5 proxy socket.\n+ *\n+ * @returns Whether or not the operation succeeded.\n+ *\n+ * @note The specified SOCKS5 proxy socket must already be connected to the\n+ *       SOCKS5 proxy.\n+ *\n+ * @see <a href=\"https://www.ietf.org/rfc/rfc1928.txt\">RFC1928: SOCKS Protocol\n+ *      Version 5</a>\n+ */\n static bool Socks5(const std::string& strDest, int port, const ProxyCredentials *auth, const SOCKET& hSocket)\n {\n     IntrRecvError recvr;\n     LogPrint(BCLog::NET, \"SOCKS5 connecting %s\\n\", strDest);\n     if (strDest.size() > 255) {\n         return error(\"Hostname too long\");\n     }\n-    // Accepted authentication methods\n+    // Construct the version identifier/method selection message\n     std::vector<uint8_t> vSocks5Init;\n-    vSocks5Init.push_back(SOCKSVersion::SOCKS5);\n+    vSocks5Init.push_back(SOCKSVersion::SOCKS5); // We want the SOCK5 protocol\n     if (auth) {\n-        vSocks5Init.push_back(0x02); // Number of methods\n+        vSocks5Init.push_back(0x02); // 2 method identifiers follow...\n         vSocks5Init.push_back(SOCKS5Method::NOAUTH);\n         vSocks5Init.push_back(SOCKS5Method::USER_PASS);\n     } else {\n-        vSocks5Init.push_back(0x01); // Number of methods\n+        vSocks5Init.push_back(0x01); // 1 method identifier follows...\n         vSocks5Init.push_back(SOCKS5Method::NOAUTH);\n     }\n     ssize_t ret = send(hSocket, (const char*)vSocks5Init.data(), vSocks5Init.size(), MSG_NOSIGNAL);\n@@ -440,19 +539,30 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n     return true;\n }\n \n+/**\n+ * Try to create a socket file descriptor with specific properties in the\n+ * communications domain (address family) of the specified service.\n+ *\n+ * For details on the desired properties, see the inline comments in the source\n+ * code.\n+ */\n SOCKET CreateSocket(const CService &addrConnect)\n {\n+    // Create a sockaddr from the specified service.\n     struct sockaddr_storage sockaddr;\n     socklen_t len = sizeof(sockaddr);\n     if (!addrConnect.GetSockAddr((struct sockaddr*)&sockaddr, &len)) {\n         LogPrintf(\"Cannot create socket for %s: unsupported network\\n\", addrConnect.ToString());\n         return INVALID_SOCKET;\n     }\n \n+    // Create a TCP socket in the address family of the specified service.\n     SOCKET hSocket = socket(((struct sockaddr*)&sockaddr)->sa_family, SOCK_STREAM, IPPROTO_TCP);\n     if (hSocket == INVALID_SOCKET)\n         return INVALID_SOCKET;\n \n+    // Ensure that waiting for I/O on this socket won't result in undefined\n+    // behavior.\n     if (!IsSelectableSocket(hSocket)) {\n         CloseSocket(hSocket);\n         LogPrintf(\"Cannot create connection: non-selectable socket created (fd >= FD_SETSIZE ?)\\n\");\n@@ -461,17 +571,18 @@ SOCKET CreateSocket(const CService &addrConnect)\n \n #ifdef SO_NOSIGPIPE\n     int set = 1;\n-    // Different way of disabling SIGPIPE on BSD\n+    // Set the no-sigpipe option on the socket for BSD systems, other UNIXes\n+    // should use the MSG_NOSIGNAL flag for every send.\n     setsockopt(hSocket, SOL_SOCKET, SO_NOSIGPIPE, (void*)&set, sizeof(int));\n #endif\n \n-    //Disable Nagle's algorithm\n+    // Set the no-delay option (disable Nagle's algorithm) on the TCP socket.\n     SetSocketNoDelay(hSocket);\n \n-    // Set to non-blocking\n+    // Set the non-blocking option on the socket.\n     if (!SetSocketNonBlocking(hSocket, true)) {\n         CloseSocket(hSocket);\n-        LogPrintf(\"ConnectSocketDirectly: Setting socket to non-blocking failed, error %s\\n\", NetworkErrorString(WSAGetLastError()));\n+        LogPrintf(\"CreateSocket: Setting socket to non-blocking failed, error %s\\n\", NetworkErrorString(WSAGetLastError()));\n     }\n     return hSocket;\n }\n@@ -486,8 +597,21 @@ static void LogConnectFailure(bool manual_connection, const char* fmt, const Arg\n     }\n }\n \n+/**\n+ * Try to connect to the specified service on the specified socket.\n+ *\n+ * @param addrConnect The service to which to connect.\n+ * @param hSocket The socket on which to connect.\n+ * @param nTimeout Wait this many milliseconds for the connection to be\n+ *                 established.\n+ * @param manual_connection Whether or not the connection was manually requested\n+ *                          (e.g. thru the addnode RPC)\n+ *\n+ * @returns Whether or not a connection was successfully made.\n+ */\n bool ConnectSocketDirectly(const CService &addrConnect, const SOCKET& hSocket, int nTimeout, bool manual_connection)\n {\n+    // Create a sockaddr from the specified service.\n     struct sockaddr_storage sockaddr;\n     socklen_t len = sizeof(sockaddr);\n     if (hSocket == INVALID_SOCKET) {\n@@ -498,12 +622,17 @@ bool ConnectSocketDirectly(const CService &addrConnect, const SOCKET& hSocket, i\n         LogPrintf(\"Cannot connect to %s: unsupported network\\n\", addrConnect.ToString());\n         return false;\n     }\n+\n+    // Connect to the addrConnect service on the hSocket socket.\n     if (connect(hSocket, (struct sockaddr*)&sockaddr, len) == SOCKET_ERROR)\n     {\n         int nErr = WSAGetLastError();\n         // WSAEINVAL is here because some legacy version of winsock uses it\n         if (nErr == WSAEINPROGRESS || nErr == WSAEWOULDBLOCK || nErr == WSAEINVAL)\n         {\n+            // Connection didn't actually fail, but is being established\n+            // asynchronously. Thus, use async I/O api (select/poll)\n+            // synchronously to check for successful connection with a timeout.\n #ifdef USE_POLL\n             struct pollfd pollfd = {};\n             pollfd.fd = hSocket;\n@@ -516,6 +645,10 @@ bool ConnectSocketDirectly(const CService &addrConnect, const SOCKET& hSocket, i\n             FD_SET(hSocket, &fdset);\n             int nRet = select(hSocket + 1, nullptr, &fdset, nullptr, &timeout);\n #endif\n+            // Upon successful completion, both select and poll return the total\n+            // number of file descriptors that have been selected. A value of 0\n+            // indicates that the call timed out and no file descriptors have\n+            // been selected.\n             if (nRet == 0)\n             {\n                 LogPrint(BCLog::NET, \"connection to %s timeout\\n\", addrConnect.ToString());\n@@ -526,6 +659,11 @@ bool ConnectSocketDirectly(const CService &addrConnect, const SOCKET& hSocket, i\n                 LogPrintf(\"select() for %s failed: %s\\n\", addrConnect.ToString(), NetworkErrorString(WSAGetLastError()));\n                 return false;\n             }\n+\n+            // Even if the select/poll was successful, the connect might not\n+            // have been successful. The reason for this failure is hidden away\n+            // in the SO_ERROR for the socket in modern systems. We read it into\n+            // nRet here.\n             socklen_t nRetSize = sizeof(nRet);\n             if (getsockopt(hSocket, SOL_SOCKET, SO_ERROR, (sockopt_arg_type)&nRet, &nRetSize) == SOCKET_ERROR)\n             {\n@@ -569,6 +707,22 @@ bool GetProxy(enum Network net, proxyType &proxyInfoOut) {\n     return true;\n }\n \n+/**\n+ * Set the name proxy to use for all connections to nodes specified by a\n+ * hostname. After setting this proxy, connecting to a node sepcified by a\n+ * hostname won't result in a local lookup of said hostname, rather, connect to\n+ * the node by asking the name proxy for a proxy connection to the hostname,\n+ * effectively delegating the hostname lookup to the specified proxy.\n+ *\n+ * This delegation increases privacy for those who set the name proxy as they no\n+ * longer leak their external hostname queries to their DNS servers.\n+ *\n+ * @returns Whether or not the operation succeeded.\n+ *\n+ * @note SOCKS5's support for UDP-over-SOCKS5 has been considered, but no SOCK5\n+ *       server in common use (most notably Tor) actually implements UDP\n+ *       support, and a DNS resolver is beyond the scope of this project.\n+ */\n bool SetNameProxy(const proxyType &addrProxy) {\n     if (!addrProxy.IsValid())\n         return false;\n@@ -599,6 +753,21 @@ bool IsProxy(const CNetAddr &addr) {\n     return false;\n }\n \n+/**\n+ * Connect to a specified destination service through a SOCKS5 proxy by first\n+ * connecting to the SOCKS5 proxy.\n+ *\n+ * @param proxy The SOCKS5 proxy.\n+ * @param strDest The destination service to which to connect.\n+ * @param port The destination port.\n+ * @param hSocket The socket on which to connect to the SOCKS5 proxy.\n+ * @param nTimeout Wait this many milliseconds for the connection to the SOCKS5\n+ *                 proxy to be established.\n+ * @param outProxyConnectionFailed[out] Whether or not the connection to the\n+ *                                      SOCKS5 proxy failed.\n+ *\n+ * @returns Whether or not the operation succeeded.\n+ */\n bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int port, const SOCKET& hSocket, int nTimeout, bool *outProxyConnectionFailed)\n {\n     // first connect to proxy server\n@@ -623,22 +792,35 @@ bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int\n     return true;\n }\n \n+/**\n+ * Parse and resolve a specified subnet string into the appropriate internal\n+ * representation.\n+ *\n+ * @param pszName A string representation of a subnet of the form `network\n+ *                address [ \"/\", ( CIDR-style suffix | netmask ) ]`(e.g.\n+ *                `2001:db8::/32`, `192.0.2.0/255.255.255.0`, or `8.8.8.8`).\n+ * @param ret The resulting internal representation of a subnet.\n+ *\n+ * @returns Whether the operation succeeded or not.\n+ */\n bool LookupSubNet(const char* pszName, CSubNet& ret)\n {\n     std::string strSubnet(pszName);\n     size_t slash = strSubnet.find_last_of('/');\n     std::vector<CNetAddr> vIP;\n \n     std::string strAddress = strSubnet.substr(0, slash);\n+    // TODO: Use LookupHost(const char *, CNetAddr&, bool) instead to just get\n+    //       one CNetAddr.\n     if (LookupHost(strAddress.c_str(), vIP, 1, false))\n     {\n         CNetAddr network = vIP[0];\n         if (slash != strSubnet.npos)\n         {\n             std::string strNetmask = strSubnet.substr(slash + 1);\n             int32_t n;\n-            // IPv4 addresses start at offset 12, and first 12 bytes must match, so just offset n\n-            if (ParseInt32(strNetmask, &n)) { // If valid number, assume /24 syntax\n+            if (ParseInt32(strNetmask, &n)) {\n+                // If valid number, assume CIDR variable-length subnet masking\n                 ret = CSubNet(network, n);\n                 return ret.IsValid();\n             }"
      },
      {
        "sha": "313a575687edab611b332b73fc265cec8ad8448c",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -37,7 +37,7 @@ class proxyType\n     bool randomize_credentials;\n };\n \n-enum Network ParseNetwork(std::string net);\n+enum Network ParseNetwork(const std::string& net);\n std::string GetNetworkName(enum Network net);\n bool SetProxy(enum Network net, const proxyType &addrProxy);\n bool GetProxy(enum Network net, proxyType &proxyInfoOut);"
      },
      {
        "sha": "ad8d1d3af44d61729d2b6af568de80b7ea628a14",
        "filename": "src/node/coin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/node/coin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/node/coin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coin.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -10,8 +10,7 @@\n void FindCoins(std::map<COutPoint, Coin>& coins)\n {\n     LOCK2(cs_main, ::mempool.cs);\n-    assert(pcoinsTip);\n-    CCoinsViewCache& chain_view = *::pcoinsTip;\n+    CCoinsViewCache& chain_view = ::ChainstateActive().CoinsTip();\n     CCoinsViewMemPool mempool_view(&chain_view, ::mempool);\n     for (auto& coin : coins) {\n         if (!mempool_view.GetCoin(coin.first, coin.second)) {"
      },
      {
        "sha": "7e8291ddc8c61d9c24e7d2d690b8daf47260e592",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 30,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -5,6 +5,7 @@\n \n #include <consensus/validation.h>\n #include <net.h>\n+#include <net_processing.h>\n #include <txmempool.h>\n #include <util/validation.h>\n #include <validation.h>\n@@ -13,26 +14,33 @@\n \n #include <future>\n \n-TransactionError BroadcastTransaction(const CTransactionRef tx, uint256& hashTx, std::string& err_string, const CAmount& highfee)\n+TransactionError BroadcastTransaction(const CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback)\n {\n+    // BroadcastTransaction can be called by either sendrawtransaction RPC or wallet RPCs.\n+    // g_connman is assigned both before chain clients and before RPC server is accepting calls,\n+    // and reset after chain clients and RPC sever are stopped. g_connman should never be null here.\n+    assert(g_connman);\n     std::promise<void> promise;\n-    hashTx = tx->GetHash();\n+    uint256 hashTx = tx->GetHash();\n+    bool callback_set = false;\n \n     { // cs_main scope\n     LOCK(cs_main);\n-    CCoinsViewCache &view = *pcoinsTip;\n-    bool fHaveChain = false;\n-    for (size_t o = 0; !fHaveChain && o < tx->vout.size(); o++) {\n+    // If the transaction is already confirmed in the chain, don't do anything\n+    // and return early.\n+    CCoinsViewCache &view = ::ChainstateActive().CoinsTip();\n+    for (size_t o = 0; o < tx->vout.size(); o++) {\n         const Coin& existingCoin = view.AccessCoin(COutPoint(hashTx, o));\n-        fHaveChain = !existingCoin.IsSpent();\n+        // IsSpent doesnt mean the coin is spent, it means the output doesnt' exist.\n+        // So if the output does exist, then this transaction exists in the chain.\n+        if (!existingCoin.IsSpent()) return TransactionError::ALREADY_IN_CHAIN;\n     }\n-    bool fHaveMempool = mempool.exists(hashTx);\n-    if (!fHaveMempool && !fHaveChain) {\n-        // push to local node and sync with wallets\n+    if (!mempool.exists(hashTx)) {\n+        // Transaction is not already in the mempool. Submit it.\n         CValidationState state;\n         bool fMissingInputs;\n         if (!AcceptToMemoryPool(mempool, state, std::move(tx), &fMissingInputs,\n-                                nullptr /* plTxnReplaced */, false /* bypass_limits */, highfee)) {\n+                nullptr /* plTxnReplaced */, false /* bypass_limits */, max_tx_fee)) {\n             if (state.IsInvalid()) {\n                 err_string = FormatStateMessage(state);\n                 return TransactionError::MEMPOOL_REJECTED;\n@@ -43,36 +51,37 @@ TransactionError BroadcastTransaction(const CTransactionRef tx, uint256& hashTx,\n                 err_string = FormatStateMessage(state);\n                 return TransactionError::MEMPOOL_ERROR;\n             }\n-        } else {\n-            // If wallet is enabled, ensure that the wallet has been made aware\n-            // of the new transaction prior to returning. This prevents a race\n-            // where a user might call sendrawtransaction with a transaction\n-            // to/from their wallet, immediately call some wallet RPC, and get\n-            // a stale result because callbacks have not yet been processed.\n+        }\n+\n+        // Transaction was accepted to the mempool.\n+\n+        if (wait_callback) {\n+            // For transactions broadcast from outside the wallet, make sure\n+            // that the wallet has been notified of the transaction before\n+            // continuing.\n+            //\n+            // This prevents a race where a user might call sendrawtransaction\n+            // with a transaction to/from their wallet, immediately call some\n+            // wallet RPC, and get a stale result because callbacks have not\n+            // yet been processed.\n             CallFunctionInValidationInterfaceQueue([&promise] {\n                 promise.set_value();\n             });\n+            callback_set = true;\n         }\n-    } else if (fHaveChain) {\n-        return TransactionError::ALREADY_IN_CHAIN;\n-    } else {\n-        // Make sure we don't block forever if re-sending\n-        // a transaction already in mempool.\n-        promise.set_value();\n     }\n \n     } // cs_main\n \n-    promise.get_future().wait();\n-\n-    if (!g_connman) {\n-        return TransactionError::P2P_DISABLED;\n+    if (callback_set) {\n+        // Wait until Validation Interface clients have been notified of the\n+        // transaction entering the mempool.\n+        promise.get_future().wait();\n     }\n \n-    CInv inv(MSG_TX, hashTx);\n-    g_connman->ForEachNode([&inv](CNode* pnode) {\n-        pnode->PushInventory(inv);\n-    });\n+    if (relay) {\n+        RelayTransaction(hashTx, *g_connman);\n+    }\n \n     return TransactionError::OK;\n }"
      },
      {
        "sha": "cf64fc28d913974fa3d07544f2507463add4268c",
        "filename": "src/node/transaction.h",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/node/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/node/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.h?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -11,14 +11,21 @@\n #include <util/error.h>\n \n /**\n- * Broadcast a transaction\n+ * Submit a transaction to the mempool and (optionally) relay it to all P2P peers.\n+ *\n+ * Mempool submission can be synchronous (will await mempool entry notification\n+ * over the CValidationInterface) or asynchronous (will submit and not wait for\n+ * notification), depending on the value of wait_callback. wait_callback MUST\n+ * NOT be set while cs_main, cs_mempool or cs_wallet are held to avoid\n+ * deadlock.\n  *\n  * @param[in]  tx the transaction to broadcast\n- * @param[out] &txid the txid of the transaction, if successfully broadcast\n  * @param[out] &err_string reference to std::string to fill with error string if available\n- * @param[in]  highfee Reject txs with fees higher than this (if 0, accept any fee)\n+ * @param[in]  max_tx_fee reject txs with fees higher than this (if 0, accept any fee)\n+ * @param[in]  relay flag if both mempool insertion and p2p relay are requested\n+ * @param[in]  wait_callback, wait until callbacks have been processed to avoid stale result due to a sequentially RPC.\n  * return error\n  */\n-NODISCARD TransactionError BroadcastTransaction(CTransactionRef tx, uint256& txid, std::string& err_string, const CAmount& highfee);\n+NODISCARD TransactionError BroadcastTransaction(CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback);\n \n #endif // BITCOIN_NODE_TRANSACTION_H"
      },
      {
        "sha": "c07939cc7956310c66c491888590208a068c0ae5",
        "filename": "src/noui.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 3,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/noui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/noui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -13,6 +13,12 @@\n #include <string>\n \n #include <boost/signals2/connection.hpp>\n+#include <boost/signals2/signal.hpp>\n+\n+/** Store connections so we can disconnect them when suppressing output */\n+boost::signals2::connection noui_ThreadSafeMessageBoxConn;\n+boost::signals2::connection noui_ThreadSafeQuestionConn;\n+boost::signals2::connection noui_InitMessageConn;\n \n bool noui_ThreadSafeMessageBox(const std::string& message, const std::string& caption, unsigned int style)\n {\n@@ -57,7 +63,39 @@ void noui_InitMessage(const std::string& message)\n \n void noui_connect()\n {\n-    uiInterface.ThreadSafeMessageBox_connect(noui_ThreadSafeMessageBox);\n-    uiInterface.ThreadSafeQuestion_connect(noui_ThreadSafeQuestion);\n-    uiInterface.InitMessage_connect(noui_InitMessage);\n+    noui_ThreadSafeMessageBoxConn = uiInterface.ThreadSafeMessageBox_connect(noui_ThreadSafeMessageBox);\n+    noui_ThreadSafeQuestionConn = uiInterface.ThreadSafeQuestion_connect(noui_ThreadSafeQuestion);\n+    noui_InitMessageConn = uiInterface.InitMessage_connect(noui_InitMessage);\n+}\n+\n+bool noui_ThreadSafeMessageBoxSuppressed(const std::string& message, const std::string& caption, unsigned int style)\n+{\n+    return false;\n+}\n+\n+bool noui_ThreadSafeQuestionSuppressed(const std::string& /* ignored interactive message */, const std::string& message, const std::string& caption, unsigned int style)\n+{\n+    return false;\n }\n+\n+void noui_InitMessageSuppressed(const std::string& message)\n+{\n+}\n+\n+void noui_suppress()\n+{\n+    noui_ThreadSafeMessageBoxConn.disconnect();\n+    noui_ThreadSafeQuestionConn.disconnect();\n+    noui_InitMessageConn.disconnect();\n+    noui_ThreadSafeMessageBoxConn = uiInterface.ThreadSafeMessageBox_connect(noui_ThreadSafeMessageBoxSuppressed);\n+    noui_ThreadSafeQuestionConn = uiInterface.ThreadSafeQuestion_connect(noui_ThreadSafeQuestionSuppressed);\n+    noui_InitMessageConn = uiInterface.InitMessage_connect(noui_InitMessageSuppressed);\n+}\n+\n+void noui_reconnect()\n+{\n+    noui_ThreadSafeMessageBoxConn.disconnect();\n+    noui_ThreadSafeQuestionConn.disconnect();\n+    noui_InitMessageConn.disconnect();\n+    noui_connect();\n+}\n\\ No newline at end of file"
      },
      {
        "sha": "854aeeaccaa70ac3ce2a7e3f982dfb5d355e1fbe",
        "filename": "src/noui.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/noui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/noui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.h?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -17,4 +17,10 @@ void noui_InitMessage(const std::string& message);\n /** Connect all bitcoind signal handlers */\n void noui_connect();\n \n+/** Suppress all bitcoind signal handlers. Used to suppress output during test runs that produce expected errors */\n+void noui_suppress();\n+\n+/** Reconnects the regular Non-GUI handlers after having used noui_suppress */\n+void noui_reconnect();\n+\n #endif // BITCOIN_NOUI_H"
      },
      {
        "sha": "d6b7ef32c8478a48c3994dcadc86837f4371184d",
        "filename": "src/obj-test/.gitignore",
        "status": "removed",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/src/obj-test/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/src/obj-test/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/obj-test/.gitignore?ref=3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa",
        "patch": "@@ -1,2 +0,0 @@\n-*\n-!.gitignore"
      },
      {
        "sha": "d6b7ef32c8478a48c3994dcadc86837f4371184d",
        "filename": "src/obj/.gitignore",
        "status": "removed",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/src/obj/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/src/obj/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/obj/.gitignore?ref=3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa",
        "patch": "@@ -1,2 +0,0 @@\n-*\n-!.gitignore"
      },
      {
        "sha": "bcaa05f4b67a8626737b4a898c5480dc24a9d7e4",
        "filename": "src/outputtype.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/outputtype.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/outputtype.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/outputtype.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -5,9 +5,10 @@\n \n #include <outputtype.h>\n \n-#include <keystore.h>\n #include <pubkey.h>\n #include <script/script.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n #include <script/standard.h>\n \n #include <assert.h>\n@@ -73,7 +74,7 @@ std::vector<CTxDestination> GetAllDestinationsForKey(const CPubKey& key)\n     }\n }\n \n-CTxDestination AddAndGetDestinationForScript(CKeyStore& keystore, const CScript& script, OutputType type)\n+CTxDestination AddAndGetDestinationForScript(FillableSigningProvider& keystore, const CScript& script, OutputType type)\n {\n     // Add script to keystore\n     keystore.AddCScript(script);\n@@ -98,4 +99,3 @@ CTxDestination AddAndGetDestinationForScript(CKeyStore& keystore, const CScript&\n     default: assert(false);\n     }\n }\n-"
      },
      {
        "sha": "6acbaa2f3e2a8bc7c5f88ba2b70580257584cf8c",
        "filename": "src/outputtype.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/outputtype.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/outputtype.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/outputtype.h?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -7,7 +7,7 @@\n #define BITCOIN_OUTPUTTYPE_H\n \n #include <attributes.h>\n-#include <keystore.h>\n+#include <script/signingprovider.h>\n #include <script/standard.h>\n \n #include <string>\n@@ -44,7 +44,7 @@ std::vector<CTxDestination> GetAllDestinationsForKey(const CPubKey& key);\n  * This function will automatically add the script (and any other\n  * necessary scripts) to the keystore.\n  */\n-CTxDestination AddAndGetDestinationForScript(CKeyStore& keystore, const CScript& script, OutputType);\n+CTxDestination AddAndGetDestinationForScript(FillableSigningProvider& keystore, const CScript& script, OutputType);\n \n #endif // BITCOIN_OUTPUTTYPE_H\n "
      },
      {
        "sha": "16683bf5ade52eb5a46dfd26f00ac7ce2da1e52c",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -43,7 +43,6 @@ enum class FeeReason {\n     PAYTXFEE,\n     FALLBACK,\n     REQUIRED,\n-    MAXTXFEE,\n };\n \n /* Used to determine type of fee estimation requested */"
      },
      {
        "sha": "91d043947b92f0d088d9053cf76d52e687e9ac27",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -261,9 +261,6 @@ enum ServiceFlags : uint64_t {\n     // NODE_WITNESS indicates that a node can be asked for blocks and transactions including\n     // witness data.\n     NODE_WITNESS = (1 << 3),\n-    // NODE_XTHIN means the node supports Xtreme Thinblocks\n-    // If this is turned off then the node will not service nor make xthin requests\n-    NODE_XTHIN = (1 << 4),\n     // NODE_NETWORK_LIMITED means the same as NODE_NETWORK with the limitation of only\n     // serving the last 288 (2 day) blocks\n     // See BIP159 for details on how this is implemented."
      },
      {
        "sha": "fe74002e82cea8a7ebe96c21d45f91d6a93f4fa7",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -212,6 +212,25 @@ bool PSBTInputSigned(const PSBTInput& input)\n     return !input.final_script_sig.empty() || !input.final_script_witness.IsNull();\n }\n \n+void UpdatePSBTOutput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index)\n+{\n+    const CTxOut& out = psbt.tx->vout.at(index);\n+    PSBTOutput& psbt_out = psbt.outputs.at(index);\n+\n+    // Fill a SignatureData with output info\n+    SignatureData sigdata;\n+    psbt_out.FillSignatureData(sigdata);\n+\n+    // Construct a would-be spend of this output, to update sigdata with.\n+    // Note that ProduceSignature is used to fill in metadata (not actual signatures),\n+    // so provider does not need to provide any private keys (it can be a HidingSigningProvider).\n+    MutableTransactionSignatureCreator creator(psbt.tx.get_ptr(), /* index */ 0, out.nValue, SIGHASH_ALL);\n+    ProduceSignature(provider, creator, out.scriptPubKey, sigdata);\n+\n+    // Put redeem_script, witness_script, key paths, into PSBTOutput.\n+    psbt_out.FromSignatureData(sigdata);\n+}\n+\n bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, int sighash, SignatureData* out_sigdata, bool use_dummy)\n {\n     PSBTInput& input = psbt.inputs.at(index);"
      },
      {
        "sha": "6d77db0c6f8f43535fd2b4e864f743776fe1b770",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -12,6 +12,7 @@\n #include <primitives/transaction.h>\n #include <pubkey.h>\n #include <script/sign.h>\n+#include <script/signingprovider.h>\n \n // Magic bytes\n static constexpr uint8_t PSBT_MAGIC_BYTES[5] = {'p', 's', 'b', 't', 0xff};\n@@ -565,6 +566,12 @@ bool PSBTInputSigned(const PSBTInput& input);\n /** Signs a PSBTInput, verifying that all provided data matches what is being signed. */\n bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, int sighash = SIGHASH_ALL, SignatureData* out_sigdata = nullptr, bool use_dummy = false);\n \n+/** Updates a PSBTOutput with information from provider.\n+ *\n+ * This fills in the redeem_script, witness_script, and hd_keypaths where possible.\n+ */\n+void UpdatePSBTOutput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index);\n+\n /**\n  * Finalizes a PSBT if possible, combining partial signatures.\n  *"
      },
      {
        "sha": "131cceccbe6e4a6f9103a3c6fb1e07fd5e066e04",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -10,6 +10,8 @@\n #include <key_io.h>\n #include <wallet/wallet.h>\n \n+#include <algorithm>\n+\n #include <QFont>\n #include <QDebug>\n \n@@ -86,18 +88,18 @@ class AddressTablePriv\n                                   QString::fromStdString(EncodeDestination(address.dest))));\n             }\n         }\n-        // qLowerBound() and qUpperBound() require our cachedAddressTable list to be sorted in asc order\n+        // std::lower_bound() and std::upper_bound() require our cachedAddressTable list to be sorted in asc order\n         // Even though the map is already sorted this re-sorting step is needed because the originating map\n         // is sorted by binary address, not by base58() address.\n-        qSort(cachedAddressTable.begin(), cachedAddressTable.end(), AddressTableEntryLessThan());\n+        std::sort(cachedAddressTable.begin(), cachedAddressTable.end(), AddressTableEntryLessThan());\n     }\n \n     void updateEntry(const QString &address, const QString &label, bool isMine, const QString &purpose, int status)\n     {\n         // Find address / label in model\n-        QList<AddressTableEntry>::iterator lower = qLowerBound(\n+        QList<AddressTableEntry>::iterator lower = std::lower_bound(\n             cachedAddressTable.begin(), cachedAddressTable.end(), address, AddressTableEntryLessThan());\n-        QList<AddressTableEntry>::iterator upper = qUpperBound(\n+        QList<AddressTableEntry>::iterator upper = std::upper_bound(\n             cachedAddressTable.begin(), cachedAddressTable.end(), address, AddressTableEntryLessThan());\n         int lowerIndex = (lower - cachedAddressTable.begin());\n         int upperIndex = (upper - cachedAddressTable.begin());\n@@ -358,12 +360,15 @@ QString AddressTableModel::addRow(const QString &type, const QString &label, con\n                 return QString();\n             }\n         }\n+\n+        // Add entry\n+        walletModel->wallet().setAddressBook(DecodeDestination(strAddress), strLabel, \"send\");\n     }\n     else if(type == Receive)\n     {\n         // Generate a new address to associate with given label\n-        CPubKey newKey;\n-        if(!walletModel->wallet().getKeyFromPool(false /* internal */, newKey))\n+        CTxDestination dest;\n+        if(!walletModel->wallet().getNewDestination(address_type, strLabel, dest))\n         {\n             WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n             if(!ctx.isValid())\n@@ -372,23 +377,18 @@ QString AddressTableModel::addRow(const QString &type, const QString &label, con\n                 editStatus = WALLET_UNLOCK_FAILURE;\n                 return QString();\n             }\n-            if(!walletModel->wallet().getKeyFromPool(false /* internal */, newKey))\n+            if(!walletModel->wallet().getNewDestination(address_type, strLabel, dest))\n             {\n                 editStatus = KEY_GENERATION_FAILURE;\n                 return QString();\n             }\n         }\n-        walletModel->wallet().learnRelatedScripts(newKey, address_type);\n-        strAddress = EncodeDestination(GetDestinationForKey(newKey, address_type));\n+        strAddress = EncodeDestination(dest);\n     }\n     else\n     {\n         return QString();\n     }\n-\n-    // Add entry\n-    walletModel->wallet().setAddressBook(DecodeDestination(strAddress), strLabel,\n-                           (type == Send ? \"send\" : \"receive\"));\n     return QString::fromStdString(strAddress);\n }\n "
      },
      {
        "sha": "efc726e09e35cfd712668c32a7e8cf26cbcabbdc",
        "filename": "src/qt/bantablemodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/bantablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/bantablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bantablemodel.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -10,6 +10,8 @@\n #include <sync.h>\n #include <util/time.h>\n \n+#include <algorithm>\n+\n #include <QDebug>\n #include <QList>\n \n@@ -61,7 +63,7 @@ class BanTablePriv\n \n         if (sortColumn >= 0)\n             // sort cachedBanlist (use stable sort to prevent rows jumping around unnecessarily)\n-            qStableSort(cachedBanlist.begin(), cachedBanlist.end(), BannedNodeLessThan(sortColumn, sortOrder));\n+            std::stable_sort(cachedBanlist.begin(), cachedBanlist.end(), BannedNodeLessThan(sortColumn, sortOrder));\n     }\n \n     int size() const"
      },
      {
        "sha": "adc19df9354902ab9644a79490a81ea461ef40e6",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 50,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -10,8 +10,8 @@\n #include <qt/bitcoingui.h>\n \n #include <chainparams.h>\n-#include <qt/clientmodel.h>\n #include <fs.h>\n+#include <qt/clientmodel.h>\n #include <qt/guiconstants.h>\n #include <qt/guiutil.h>\n #include <qt/intro.h>\n@@ -25,20 +25,18 @@\n #ifdef ENABLE_WALLET\n #include <qt/paymentserver.h>\n #include <qt/walletcontroller.h>\n-#endif\n+#include <qt/walletmodel.h>\n+#endif // ENABLE_WALLET\n \n #include <interfaces/handler.h>\n #include <interfaces/node.h>\n #include <noui.h>\n-#include <util/threadnames.h>\n #include <ui_interface.h>\n #include <uint256.h>\n #include <util/system.h>\n+#include <util/threadnames.h>\n \n #include <memory>\n-#include <stdint.h>\n-\n-#include <boost/thread.hpp>\n \n #include <QApplication>\n #include <QDebug>\n@@ -171,8 +169,11 @@ void BitcoinCore::shutdown()\n     }\n }\n \n-BitcoinApplication::BitcoinApplication(interfaces::Node& node, int &argc, char **argv):\n-    QApplication(argc, argv),\n+static int qt_argc = 1;\n+static const char* qt_argv = \"bitcoin-qt\";\n+\n+BitcoinApplication::BitcoinApplication(interfaces::Node& node):\n+    QApplication(qt_argc, const_cast<char **>(&qt_argv)),\n     coreThread(nullptr),\n     m_node(node),\n     optionsModel(nullptr),\n@@ -210,12 +211,6 @@ BitcoinApplication::~BitcoinApplication()\n \n     delete window;\n     window = nullptr;\n-#ifdef ENABLE_WALLET\n-    delete paymentServer;\n-    paymentServer = nullptr;\n-    delete m_wallet_controller;\n-    m_wallet_controller = nullptr;\n-#endif\n     delete optionsModel;\n     optionsModel = nullptr;\n     delete platformStyle;\n@@ -331,24 +326,21 @@ void BitcoinApplication::initializeResult(bool success)\n     {\n         // Log this only after AppInitMain finishes, as then logging setup is guaranteed complete\n         qInfo() << \"Platform customization:\" << platformStyle->getName();\n-#ifdef ENABLE_WALLET\n-        m_wallet_controller = new WalletController(m_node, platformStyle, optionsModel, this);\n-#ifdef ENABLE_BIP70\n-        PaymentServer::LoadRootCAs();\n-#endif\n-        if (paymentServer) {\n-            paymentServer->setOptionsModel(optionsModel);\n-#ifdef ENABLE_BIP70\n-            connect(m_wallet_controller, &WalletController::coinsSent, paymentServer, &PaymentServer::fetchPaymentACK);\n-#endif\n-        }\n-#endif\n-\n         clientModel = new ClientModel(m_node, optionsModel);\n         window->setClientModel(clientModel);\n #ifdef ENABLE_WALLET\n-        window->setWalletController(m_wallet_controller);\n+        if (WalletModel::isWalletEnabled()) {\n+            m_wallet_controller = new WalletController(m_node, platformStyle, optionsModel, this);\n+            window->setWalletController(m_wallet_controller);\n+            if (paymentServer) {\n+                paymentServer->setOptionsModel(optionsModel);\n+#ifdef ENABLE_BIP70\n+                PaymentServer::LoadRootCAs();\n+                connect(m_wallet_controller, &WalletController::coinsSent, paymentServer, &PaymentServer::fetchPaymentACK);\n #endif\n+            }\n+        }\n+#endif // ENABLE_WALLET\n \n         // If -min option passed, start window minimized (iconified) or minimized to tray\n         if (!gArgs.GetBoolArg(\"-min\", false)) {\n@@ -402,18 +394,17 @@ WId BitcoinApplication::getMainWinId() const\n static void SetupUIArgs()\n {\n #if defined(ENABLE_WALLET) && defined(ENABLE_BIP70)\n-    gArgs.AddArg(\"-allowselfsignedrootcertificates\", strprintf(\"Allow self signed root certificates (default: %u)\", DEFAULT_SELFSIGNED_ROOTCERTS), true, OptionsCategory::GUI);\n+    gArgs.AddArg(\"-allowselfsignedrootcertificates\", strprintf(\"Allow self signed root certificates (default: %u)\", DEFAULT_SELFSIGNED_ROOTCERTS), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::GUI);\n #endif\n-    gArgs.AddArg(\"-choosedatadir\", strprintf(\"Choose data directory on startup (default: %u)\", DEFAULT_CHOOSE_DATADIR), false, OptionsCategory::GUI);\n-    gArgs.AddArg(\"-lang=<lang>\", \"Set language, for example \\\"de_DE\\\" (default: system locale)\", false, OptionsCategory::GUI);\n-    gArgs.AddArg(\"-min\", \"Start minimized\", false, OptionsCategory::GUI);\n-    gArgs.AddArg(\"-resetguisettings\", \"Reset all settings changed in the GUI\", false, OptionsCategory::GUI);\n-    gArgs.AddArg(\"-rootcertificates=<file>\", \"Set SSL root certificates for payment request (default: -system-)\", false, OptionsCategory::GUI);\n-    gArgs.AddArg(\"-splash\", strprintf(\"Show splash screen on startup (default: %u)\", DEFAULT_SPLASHSCREEN), false, OptionsCategory::GUI);\n-    gArgs.AddArg(\"-uiplatform\", strprintf(\"Select platform to customize UI for (one of windows, macosx, other; default: %s)\", BitcoinGUI::DEFAULT_UIPLATFORM), true, OptionsCategory::GUI);\n+    gArgs.AddArg(\"-choosedatadir\", strprintf(\"Choose data directory on startup (default: %u)\", DEFAULT_CHOOSE_DATADIR), ArgsManager::ALLOW_ANY, OptionsCategory::GUI);\n+    gArgs.AddArg(\"-lang=<lang>\", \"Set language, for example \\\"de_DE\\\" (default: system locale)\", ArgsManager::ALLOW_ANY, OptionsCategory::GUI);\n+    gArgs.AddArg(\"-min\", \"Start minimized\", ArgsManager::ALLOW_ANY, OptionsCategory::GUI);\n+    gArgs.AddArg(\"-resetguisettings\", \"Reset all settings changed in the GUI\", ArgsManager::ALLOW_ANY, OptionsCategory::GUI);\n+    gArgs.AddArg(\"-rootcertificates=<file>\", \"Set SSL root certificates for payment request (default: -system-)\", ArgsManager::ALLOW_ANY, OptionsCategory::GUI);\n+    gArgs.AddArg(\"-splash\", strprintf(\"Show splash screen on startup (default: %u)\", DEFAULT_SPLASHSCREEN), ArgsManager::ALLOW_ANY, OptionsCategory::GUI);\n+    gArgs.AddArg(\"-uiplatform\", strprintf(\"Select platform to customize UI for (one of windows, macosx, other; default: %s)\", BitcoinGUI::DEFAULT_UIPLATFORM), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::GUI);\n }\n \n-#ifndef BITCOIN_QT_TEST\n int GuiMain(int argc, char* argv[])\n {\n #ifdef WIN32\n@@ -445,10 +436,13 @@ int GuiMain(int argc, char* argv[])\n     QApplication::setAttribute(Qt::AA_DontShowIconsInMenus);\n #endif\n \n-    BitcoinApplication app(*node, argc, argv);\n+    BitcoinApplication app(*node);\n \n     // Register meta types used for QMetaObject::invokeMethod\n     qRegisterMetaType< bool* >();\n+#ifdef ENABLE_WALLET\n+    qRegisterMetaType<WalletModel*>();\n+#endif\n     //   Need to pass name here as CAmount is a typedef (see http://qt-project.org/doc/qt-5/qmetatype.html#qRegisterMetaType)\n     //   IMPORTANT if it is no longer a typedef use the normal variant above\n     qRegisterMetaType< CAmount >(\"CAmount\");\n@@ -460,8 +454,11 @@ int GuiMain(int argc, char* argv[])\n     SetupUIArgs();\n     std::string error;\n     if (!node->parseParameters(argc, argv, error)) {\n-        QMessageBox::critical(nullptr, QObject::tr(PACKAGE_NAME),\n-            QObject::tr(\"Error parsing command line arguments: %1.\").arg(QString::fromStdString(error)));\n+        node->initError(strprintf(\"Error parsing command line arguments: %s\\n\", error));\n+        // Create a message box, because the gui has neither been created nor has subscribed to core signals\n+        QMessageBox::critical(nullptr, PACKAGE_NAME,\n+            // message can not be translated because translations have not been initialized\n+            QString::fromStdString(\"Error parsing command line arguments: %1.\").arg(QString::fromStdString(error)));\n         return EXIT_FAILURE;\n     }\n \n@@ -493,16 +490,17 @@ int GuiMain(int argc, char* argv[])\n     if (!Intro::pickDataDirectory(*node))\n         return EXIT_SUCCESS;\n \n-    /// 6. Determine availability of data and blocks directory and parse bitcoin.conf\n+    /// 6. Determine availability of data directory and parse bitcoin.conf\n     /// - Do not call GetDataDir(true) before this step finishes\n-    if (!fs::is_directory(GetDataDir(false)))\n-    {\n-        QMessageBox::critical(nullptr, QObject::tr(PACKAGE_NAME),\n+    if (!CheckDataDirOption()) {\n+        node->initError(strprintf(\"Specified data directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-datadir\", \"\")));\n+        QMessageBox::critical(nullptr, PACKAGE_NAME,\n             QObject::tr(\"Error: Specified data directory \\\"%1\\\" does not exist.\").arg(QString::fromStdString(gArgs.GetArg(\"-datadir\", \"\"))));\n         return EXIT_FAILURE;\n     }\n     if (!node->readConfigFiles(error)) {\n-        QMessageBox::critical(nullptr, QObject::tr(PACKAGE_NAME),\n+        node->initError(strprintf(\"Error reading configuration file: %s\\n\", error));\n+        QMessageBox::critical(nullptr, PACKAGE_NAME,\n             QObject::tr(\"Error: Cannot parse configuration file: %1.\").arg(QString::fromStdString(error)));\n         return EXIT_FAILURE;\n     }\n@@ -517,7 +515,8 @@ int GuiMain(int argc, char* argv[])\n     try {\n         node->selectParams(gArgs.GetChainName());\n     } catch(std::exception &e) {\n-        QMessageBox::critical(nullptr, QObject::tr(PACKAGE_NAME), QObject::tr(\"Error: %1\").arg(e.what()));\n+        node->initError(strprintf(\"%s\\n\", e.what()));\n+        QMessageBox::critical(nullptr, PACKAGE_NAME, QObject::tr(\"Error: %1\").arg(e.what()));\n         return EXIT_FAILURE;\n     }\n #ifdef ENABLE_WALLET\n@@ -544,8 +543,10 @@ int GuiMain(int argc, char* argv[])\n \n     // Start up the payment server early, too, so impatient users that click on\n     // bitcoin: links repeatedly have their payment requests routed to this process:\n-    app.createPaymentServer();\n-#endif\n+    if (WalletModel::isWalletEnabled()) {\n+        app.createPaymentServer();\n+    }\n+#endif // ENABLE_WALLET\n \n     /// 9. Main GUI initialization\n     // Install global event filter that makes sure that long tooltips can be word-wrapped\n@@ -574,7 +575,7 @@ int GuiMain(int argc, char* argv[])\n         if (app.baseInitialize()) {\n             app.requestInitialize();\n #if defined(Q_OS_WIN)\n-            WinShutdownMonitor::registerShutdownBlockReason(QObject::tr(\"%1 didn't yet exit safely...\").arg(QObject::tr(PACKAGE_NAME)), (HWND)app.getMainWinId());\n+            WinShutdownMonitor::registerShutdownBlockReason(QObject::tr(\"%1 didn't yet exit safely...\").arg(PACKAGE_NAME), (HWND)app.getMainWinId());\n #endif\n             app.exec();\n             app.requestShutdown();\n@@ -593,4 +594,3 @@ int GuiMain(int argc, char* argv[])\n     }\n     return rv;\n }\n-#endif // BITCOIN_QT_TEST"
      },
      {
        "sha": "3869193a3a7d1382854fa6a4488691fe5a50315a",
        "filename": "src/qt/bitcoin.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.h?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -11,7 +11,6 @@\n \n #include <QApplication>\n #include <memory>\n-#include <vector>\n \n class BitcoinGUI;\n class ClientModel;\n@@ -57,7 +56,7 @@ class BitcoinApplication: public QApplication\n {\n     Q_OBJECT\n public:\n-    explicit BitcoinApplication(interfaces::Node& node, int &argc, char **argv);\n+    explicit BitcoinApplication(interfaces::Node& node);\n     ~BitcoinApplication();\n \n #ifdef ENABLE_WALLET"
      },
      {
        "sha": "037b23e4b2d2868f44ba0df32097e1057abc84d4",
        "filename": "src/qt/bitcoin.qrc",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/bitcoin.qrc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/bitcoin.qrc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.qrc?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -2,7 +2,6 @@\n     <qresource prefix=\"/icons\">\n         <file alias=\"bitcoin\">res/icons/bitcoin.png</file>\n         <file alias=\"address-book\">res/icons/address-book.png</file>\n-        <file alias=\"quit\">res/icons/quit.png</file>\n         <file alias=\"send\">res/icons/send.png</file>\n         <file alias=\"connect_0\">res/icons/connect0.png</file>\n         <file alias=\"connect_1\">res/icons/connect1.png</file>\n@@ -20,7 +19,6 @@\n         <file alias=\"eye\">res/icons/eye.png</file>\n         <file alias=\"eye_minus\">res/icons/eye_minus.png</file>\n         <file alias=\"eye_plus\">res/icons/eye_plus.png</file>\n-        <file alias=\"options\">res/icons/configure.png</file>\n         <file alias=\"receiving_addresses\">res/icons/receive.png</file>\n         <file alias=\"editpaste\">res/icons/editpaste.png</file>\n         <file alias=\"editcopy\">res/icons/editcopy.png</file>\n@@ -37,14 +35,6 @@\n         <file alias=\"tx_inout\">res/icons/tx_inout.png</file>\n         <file alias=\"lock_closed\">res/icons/lock_closed.png</file>\n         <file alias=\"lock_open\">res/icons/lock_open.png</file>\n-        <file alias=\"key\">res/icons/key.png</file>\n-        <file alias=\"filesave\">res/icons/filesave.png</file>\n-        <file alias=\"debugwindow\">res/icons/debugwindow.png</file>\n-        <file alias=\"open\">res/icons/open.png</file>\n-        <file alias=\"info\">res/icons/info.png</file>\n-        <file alias=\"about\">res/icons/about.png</file>\n-        <file alias=\"about_qt\">res/icons/about_qt.png</file>\n-        <file alias=\"verify\">res/icons/verify.png</file>\n         <file alias=\"warning\">res/icons/warning.png</file>\n         <file alias=\"fontbigger\">res/icons/fontbigger.png</file>\n         <file alias=\"fontsmaller\">res/icons/fontsmaller.png</file>"
      },
      {
        "sha": "bc9af9793e48f3d8b96b41113dbe042233ce9f63",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 32,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -36,9 +36,6 @@\n #include <ui_interface.h>\n #include <util/system.h>\n \n-#include <iostream>\n-#include <memory>\n-\n #include <QAction>\n #include <QApplication>\n #include <QComboBox>\n@@ -251,7 +248,7 @@ void BitcoinGUI::createActions()\n     sendCoinsAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_2));\n     tabGroup->addAction(sendCoinsAction);\n \n-    sendCoinsMenuAction = new QAction(platformStyle->TextColorIcon(\":/icons/send\"), sendCoinsAction->text(), this);\n+    sendCoinsMenuAction = new QAction(sendCoinsAction->text(), this);\n     sendCoinsMenuAction->setStatusTip(sendCoinsAction->statusTip());\n     sendCoinsMenuAction->setToolTip(sendCoinsMenuAction->statusTip());\n \n@@ -262,7 +259,7 @@ void BitcoinGUI::createActions()\n     receiveCoinsAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_3));\n     tabGroup->addAction(receiveCoinsAction);\n \n-    receiveCoinsMenuAction = new QAction(platformStyle->TextColorIcon(\":/icons/receiving_addresses\"), receiveCoinsAction->text(), this);\n+    receiveCoinsMenuAction = new QAction(receiveCoinsAction->text(), this);\n     receiveCoinsMenuAction->setStatusTip(receiveCoinsAction->statusTip());\n     receiveCoinsMenuAction->setToolTip(receiveCoinsMenuAction->statusTip());\n \n@@ -290,48 +287,48 @@ void BitcoinGUI::createActions()\n     connect(historyAction, &QAction::triggered, this, &BitcoinGUI::gotoHistoryPage);\n #endif // ENABLE_WALLET\n \n-    quitAction = new QAction(platformStyle->TextColorIcon(\":/icons/quit\"), tr(\"E&xit\"), this);\n+    quitAction = new QAction(tr(\"E&xit\"), this);\n     quitAction->setStatusTip(tr(\"Quit application\"));\n     quitAction->setShortcut(QKeySequence(Qt::CTRL + Qt::Key_Q));\n     quitAction->setMenuRole(QAction::QuitRole);\n-    aboutAction = new QAction(platformStyle->TextColorIcon(\":/icons/about\"), tr(\"&About %1\").arg(tr(PACKAGE_NAME)), this);\n-    aboutAction->setStatusTip(tr(\"Show information about %1\").arg(tr(PACKAGE_NAME)));\n+    aboutAction = new QAction(tr(\"&About %1\").arg(PACKAGE_NAME), this);\n+    aboutAction->setStatusTip(tr(\"Show information about %1\").arg(PACKAGE_NAME));\n     aboutAction->setMenuRole(QAction::AboutRole);\n     aboutAction->setEnabled(false);\n-    aboutQtAction = new QAction(platformStyle->TextColorIcon(\":/icons/about_qt\"), tr(\"About &Qt\"), this);\n+    aboutQtAction = new QAction(tr(\"About &Qt\"), this);\n     aboutQtAction->setStatusTip(tr(\"Show information about Qt\"));\n     aboutQtAction->setMenuRole(QAction::AboutQtRole);\n-    optionsAction = new QAction(platformStyle->TextColorIcon(\":/icons/options\"), tr(\"&Options...\"), this);\n-    optionsAction->setStatusTip(tr(\"Modify configuration options for %1\").arg(tr(PACKAGE_NAME)));\n+    optionsAction = new QAction(tr(\"&Options...\"), this);\n+    optionsAction->setStatusTip(tr(\"Modify configuration options for %1\").arg(PACKAGE_NAME));\n     optionsAction->setMenuRole(QAction::PreferencesRole);\n     optionsAction->setEnabled(false);\n-    toggleHideAction = new QAction(platformStyle->TextColorIcon(\":/icons/about\"), tr(\"&Show / Hide\"), this);\n+    toggleHideAction = new QAction(tr(\"&Show / Hide\"), this);\n     toggleHideAction->setStatusTip(tr(\"Show or hide the main Window\"));\n \n-    encryptWalletAction = new QAction(platformStyle->TextColorIcon(\":/icons/lock_closed\"), tr(\"&Encrypt Wallet...\"), this);\n+    encryptWalletAction = new QAction(tr(\"&Encrypt Wallet...\"), this);\n     encryptWalletAction->setStatusTip(tr(\"Encrypt the private keys that belong to your wallet\"));\n     encryptWalletAction->setCheckable(true);\n-    backupWalletAction = new QAction(platformStyle->TextColorIcon(\":/icons/filesave\"), tr(\"&Backup Wallet...\"), this);\n+    backupWalletAction = new QAction(tr(\"&Backup Wallet...\"), this);\n     backupWalletAction->setStatusTip(tr(\"Backup wallet to another location\"));\n-    changePassphraseAction = new QAction(platformStyle->TextColorIcon(\":/icons/key\"), tr(\"&Change Passphrase...\"), this);\n+    changePassphraseAction = new QAction(tr(\"&Change Passphrase...\"), this);\n     changePassphraseAction->setStatusTip(tr(\"Change the passphrase used for wallet encryption\"));\n-    signMessageAction = new QAction(platformStyle->TextColorIcon(\":/icons/edit\"), tr(\"Sign &message...\"), this);\n+    signMessageAction = new QAction(tr(\"Sign &message...\"), this);\n     signMessageAction->setStatusTip(tr(\"Sign messages with your Bitcoin addresses to prove you own them\"));\n-    verifyMessageAction = new QAction(platformStyle->TextColorIcon(\":/icons/verify\"), tr(\"&Verify message...\"), this);\n+    verifyMessageAction = new QAction(tr(\"&Verify message...\"), this);\n     verifyMessageAction->setStatusTip(tr(\"Verify messages to ensure they were signed with specified Bitcoin addresses\"));\n \n-    openRPCConsoleAction = new QAction(platformStyle->TextColorIcon(\":/icons/debugwindow\"), tr(\"&Debug window\"), this);\n+    openRPCConsoleAction = new QAction(tr(\"&Debug window\"), this);\n     openRPCConsoleAction->setStatusTip(tr(\"Open debugging and diagnostic console\"));\n     // initially disable the debug window menu item\n     openRPCConsoleAction->setEnabled(false);\n     openRPCConsoleAction->setObjectName(\"openRPCConsoleAction\");\n \n-    usedSendingAddressesAction = new QAction(platformStyle->TextColorIcon(\":/icons/address-book\"), tr(\"&Sending addresses\"), this);\n+    usedSendingAddressesAction = new QAction(tr(\"&Sending addresses\"), this);\n     usedSendingAddressesAction->setStatusTip(tr(\"Show the list of used sending addresses and labels\"));\n-    usedReceivingAddressesAction = new QAction(platformStyle->TextColorIcon(\":/icons/address-book\"), tr(\"&Receiving addresses\"), this);\n+    usedReceivingAddressesAction = new QAction(tr(\"&Receiving addresses\"), this);\n     usedReceivingAddressesAction->setStatusTip(tr(\"Show the list of used receiving addresses and labels\"));\n \n-    openAction = new QAction(platformStyle->TextColorIcon(\":/icons/open\"), tr(\"Open &URI...\"), this);\n+    openAction = new QAction(tr(\"Open &URI...\"), this);\n     openAction->setStatusTip(tr(\"Open a bitcoin: URI or payment request\"));\n \n     m_open_wallet_action = new QAction(tr(\"Open Wallet\"), this);\n@@ -342,9 +339,9 @@ void BitcoinGUI::createActions()\n     m_close_wallet_action = new QAction(tr(\"Close Wallet...\"), this);\n     m_close_wallet_action->setStatusTip(tr(\"Close wallet\"));\n \n-    showHelpMessageAction = new QAction(platformStyle->TextColorIcon(\":/icons/info\"), tr(\"&Command-line options\"), this);\n+    showHelpMessageAction = new QAction(tr(\"&Command-line options\"), this);\n     showHelpMessageAction->setMenuRole(QAction::NoRole);\n-    showHelpMessageAction->setStatusTip(tr(\"Show the %1 help message to get a list with possible Bitcoin command-line options\").arg(tr(PACKAGE_NAME)));\n+    showHelpMessageAction->setStatusTip(tr(\"Show the %1 help message to get a list with possible Bitcoin command-line options\").arg(PACKAGE_NAME));\n \n     connect(quitAction, &QAction::triggered, qApp, QApplication::quit);\n     connect(aboutAction, &QAction::triggered, this, &BitcoinGUI::aboutClicked);\n@@ -371,13 +368,12 @@ void BitcoinGUI::createActions()\n         connect(openAction, &QAction::triggered, this, &BitcoinGUI::openClicked);\n         connect(m_open_wallet_menu, &QMenu::aboutToShow, [this] {\n             m_open_wallet_menu->clear();\n-            std::vector<std::string> available_wallets = m_wallet_controller->getWalletsAvailableToOpen();\n-            std::vector<std::string> wallets = m_node.listWalletDir();\n-            for (const auto& path : wallets) {\n+            for (const std::pair<const std::string, bool>& i : m_wallet_controller->listWalletDir()) {\n+                const std::string& path = i.first;\n                 QString name = path.empty() ? QString(\"[\"+tr(\"default wallet\")+\"]\") : QString::fromStdString(path);\n                 QAction* action = m_open_wallet_menu->addAction(name);\n \n-                if (std::find(available_wallets.begin(), available_wallets.end(), path) == available_wallets.end()) {\n+                if (i.second) {\n                     // This wallet is already loaded\n                     action->setEnabled(false);\n                     continue;\n@@ -410,7 +406,7 @@ void BitcoinGUI::createActions()\n                     assert(invoked);\n                 });\n             }\n-            if (wallets.empty()) {\n+            if (m_open_wallet_menu->isEmpty()) {\n                 QAction* action = m_open_wallet_menu->addAction(tr(\"No wallets available\"));\n                 action->setEnabled(false);\n             }\n@@ -640,7 +636,7 @@ void BitcoinGUI::setWalletController(WalletController* wallet_controller)\n     connect(wallet_controller, &WalletController::walletAdded, this, &BitcoinGUI::addWallet);\n     connect(wallet_controller, &WalletController::walletRemoved, this, &BitcoinGUI::removeWallet);\n \n-    for (WalletModel* wallet_model : m_wallet_controller->getWallets()) {\n+    for (WalletModel* wallet_model : m_wallet_controller->getOpenWallets()) {\n         addWallet(wallet_model);\n     }\n }\n@@ -729,7 +725,7 @@ void BitcoinGUI::createTrayIcon()\n #ifndef Q_OS_MAC\n     if (QSystemTrayIcon::isSystemTrayAvailable()) {\n         trayIcon = new QSystemTrayIcon(m_network_style->getTrayAndWindowIcon(), this);\n-        QString toolTip = tr(\"%1 client\").arg(tr(PACKAGE_NAME)) + \" \" + m_network_style->getTitleAddText();\n+        QString toolTip = tr(\"%1 client\").arg(PACKAGE_NAME) + \" \" + m_network_style->getTitleAddText();\n         trayIcon->setToolTip(toolTip);\n     }\n #endif\n@@ -1292,7 +1288,7 @@ void BitcoinGUI::updateProxyIcon()\n \n void BitcoinGUI::updateWindowTitle()\n {\n-    QString window_title = tr(PACKAGE_NAME);\n+    QString window_title = PACKAGE_NAME;\n #ifdef ENABLE_WALLET\n     if (walletFrame) {\n         WalletModel* const wallet_model = walletFrame->currentWalletModel();\n@@ -1376,12 +1372,13 @@ static bool ThreadSafeMessageBox(BitcoinGUI* gui, const std::string& message, co\n     style &= ~CClientUIInterface::SECURE;\n     bool ret = false;\n     // In case of modal message, use blocking connection to wait for user to click a button\n-    QMetaObject::invokeMethod(gui, \"message\",\n+    bool invoked = QMetaObject::invokeMethod(gui, \"message\",\n                                modal ? GUIUtil::blockingGUIThreadConnection() : Qt::QueuedConnection,\n                                Q_ARG(QString, QString::fromStdString(caption)),\n                                Q_ARG(QString, QString::fromStdString(message)),\n                                Q_ARG(unsigned int, style),\n                                Q_ARG(bool*, &ret));\n+    assert(invoked);\n     return ret;\n }\n "
      },
      {
        "sha": "87736cd1851e845aa99108cd343c339d9eb6d2a4",
        "filename": "src/qt/bitcoinstrings.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 11,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/bitcoinstrings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/bitcoinstrings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinstrings.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -9,14 +9,13 @@\n #define UNUSED\n #endif\n static const char UNUSED *bitcoin_strings[] = {\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Bitcoin Core\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"The %s developers\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"-maxtxfee is set very high! Fees this large could be paid on a single \"\n \"transaction.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n-\"Can't generate a change-address key. Private keys are disabled for this \"\n-\"wallet.\"),\n+\"Can't generate a change-address key. No keys in the internal keypool and \"\n+\"can't generate any keys.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Cannot obtain a lock on data directory %s. %s is probably already running.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n@@ -88,9 +87,6 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Warning: The network does not appear to fully agree! Some miners appear to \"\n \"be experiencing issues.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n-\"Warning: Unknown block versions being mined! It's possible unknown rules are \"\n-\"in effect\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Warning: Wallet file corrupt, data salvaged! Original %s saved as %s in %s; \"\n \"if your balance or transactions are incorrect you should restore from a \"\n \"backup.\"),\n@@ -124,15 +120,13 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error loading wallet %s. Duplicate -wallet fi\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error opening block database\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error reading from database, shutting down.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error upgrading chainstate database\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: A fatal internal error occurred, see debug.log for details\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: Disk space is low for %s\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: Disk space is low!\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: Disk space is too low!\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Failed to listen on any port. Use -listen=0 if you want this.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Failed to rescan the wallet during initialization\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Importing...\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Incorrect or no genesis block found. Wrong datadir for network?\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Information\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Initialization sanity check failed. %s is shutting down.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Insufficient funds\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Invalid -onion address or hostname: '%s'\"),\n@@ -150,6 +144,7 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Loading wallet...\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Need to specify a port with -whitebind: '%s'\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Not enough file descriptors available.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Prune cannot be configured with a negative value.\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Prune mode is incompatible with -blockfilterindex.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Prune mode is incompatible with -txindex.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Pruning blockstore...\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Reducing -maxconnections from %d to %d, because of system limitations.\"),\n@@ -179,19 +174,19 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Transaction too large for fee policy\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Transaction too large\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unable to bind to %s on this computer (bind returned error %s)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unable to bind to %s on this computer. %s is probably already running.\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unable to create the PID file '%s': %s\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unable to generate initial keys\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unable to generate keys\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unable to start HTTP server. See debug log for details.\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unknown -blockfilterindex value %s.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unknown network specified in -onlynet: '%s'\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unsupported logging category %s=%s.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Upgrading UTXO database\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Upgrading txindex database\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"User Agent comment (%s) contains unsafe characters.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Verifying blocks...\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Verifying wallet(s)...\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Wallet %s resides outside wallet directory %s\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Wallet needed to be rewritten: restart %s to complete\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Warning\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Warning: unknown new rules activated (versionbit %i)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Zapping all transactions from wallet...\"),\n };"
      },
      {
        "sha": "238be08480408d0872f66aa8780367a918e957db",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 6,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -184,34 +184,39 @@ void ClientModel::updateBanlist()\n static void ShowProgress(ClientModel *clientmodel, const std::string &title, int nProgress)\n {\n     // emits signal \"showProgress\"\n-    QMetaObject::invokeMethod(clientmodel, \"showProgress\", Qt::QueuedConnection,\n+    bool invoked = QMetaObject::invokeMethod(clientmodel, \"showProgress\", Qt::QueuedConnection,\n                               Q_ARG(QString, QString::fromStdString(title)),\n                               Q_ARG(int, nProgress));\n+    assert(invoked);\n }\n \n static void NotifyNumConnectionsChanged(ClientModel *clientmodel, int newNumConnections)\n {\n     // Too noisy: qDebug() << \"NotifyNumConnectionsChanged: \" + QString::number(newNumConnections);\n-    QMetaObject::invokeMethod(clientmodel, \"updateNumConnections\", Qt::QueuedConnection,\n+    bool invoked = QMetaObject::invokeMethod(clientmodel, \"updateNumConnections\", Qt::QueuedConnection,\n                               Q_ARG(int, newNumConnections));\n+    assert(invoked);\n }\n \n static void NotifyNetworkActiveChanged(ClientModel *clientmodel, bool networkActive)\n {\n-    QMetaObject::invokeMethod(clientmodel, \"updateNetworkActive\", Qt::QueuedConnection,\n+    bool invoked = QMetaObject::invokeMethod(clientmodel, \"updateNetworkActive\", Qt::QueuedConnection,\n                               Q_ARG(bool, networkActive));\n+    assert(invoked);\n }\n \n static void NotifyAlertChanged(ClientModel *clientmodel)\n {\n     qDebug() << \"NotifyAlertChanged\";\n-    QMetaObject::invokeMethod(clientmodel, \"updateAlert\", Qt::QueuedConnection);\n+    bool invoked = QMetaObject::invokeMethod(clientmodel, \"updateAlert\", Qt::QueuedConnection);\n+    assert(invoked);\n }\n \n static void BannedListChanged(ClientModel *clientmodel)\n {\n     qDebug() << QString(\"%1: Requesting update for peer banlist\").arg(__func__);\n-    QMetaObject::invokeMethod(clientmodel, \"updateBanlist\", Qt::QueuedConnection);\n+    bool invoked = QMetaObject::invokeMethod(clientmodel, \"updateBanlist\", Qt::QueuedConnection);\n+    assert(invoked);\n }\n \n static void BlockTipChanged(ClientModel *clientmodel, bool initialSync, int height, int64_t blockTime, double verificationProgress, bool fHeader)\n@@ -233,11 +238,12 @@ static void BlockTipChanged(ClientModel *clientmodel, bool initialSync, int heig\n     // if we are in-sync or if we notify a header update, update the UI regardless of last update time\n     if (fHeader || !initialSync || now - nLastUpdateNotification > MODEL_UPDATE_DELAY) {\n         //pass an async signal to the UI thread\n-        QMetaObject::invokeMethod(clientmodel, \"numBlocksChanged\", Qt::QueuedConnection,\n+        bool invoked = QMetaObject::invokeMethod(clientmodel, \"numBlocksChanged\", Qt::QueuedConnection,\n                                   Q_ARG(int, height),\n                                   Q_ARG(QDateTime, QDateTime::fromTime_t(blockTime)),\n                                   Q_ARG(double, verificationProgress),\n                                   Q_ARG(bool, fHeader));\n+        assert(invoked);\n         nLastUpdateNotification = now;\n     }\n }"
      },
      {
        "sha": "03d18d28452e6df5c0192aa7a2a8d9d9edfeb87f",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -418,7 +418,8 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n \n         if (amount > 0)\n         {\n-            CTxOut txout(amount, static_cast<CScript>(std::vector<unsigned char>(24, 0)));\n+            // Assumes a p2pkh script size\n+            CTxOut txout(amount, CScript() << std::vector<unsigned char>(24, 0));\n             txDummy.vout.push_back(txout);\n             fDust |= IsDust(txout, model->node().getDustRelayFee());\n         }\n@@ -509,7 +510,8 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n             // Never create dust outputs; if we would, just add the dust to the fee.\n             if (nChange > 0 && nChange < MIN_CHANGE)\n             {\n-                CTxOut txout(nChange, static_cast<CScript>(std::vector<unsigned char>(24, 0)));\n+                // Assumes a p2pkh script size\n+                CTxOut txout(nChange, CScript() << std::vector<unsigned char>(24, 0));\n                 if (IsDust(txout, model->node().getDustRelayFee()))\n                 {\n                     nPayFee += nChange;"
      },
      {
        "sha": "dc1da7f8a94d35006e1fa79f194201a241a56813",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2018 The Bitcoin Core developers\n+// Copyright (c) 2011-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -11,10 +11,10 @@\n \n #include <base58.h>\n #include <chainparams.h>\n-#include <primitives/transaction.h>\n-#include <key_io.h>\n #include <interfaces/node.h>\n+#include <key_io.h>\n #include <policy/policy.h>\n+#include <primitives/transaction.h>\n #include <protocol.h>\n #include <script/script.h>\n #include <script/standard.h>\n@@ -639,7 +639,7 @@ fs::path static GetAutostartFilePath()\n     std::string chain = gArgs.GetChainName();\n     if (chain == CBaseChainParams::MAIN)\n         return GetAutostartDir() / \"bitcoin.desktop\";\n-    return GetAutostartDir() / strprintf(\"bitcoin-%s.lnk\", chain);\n+    return GetAutostartDir() / strprintf(\"bitcoin-%s.desktop\", chain);\n }\n \n bool GetStartOnSystemStartup()\n@@ -841,9 +841,6 @@ QString formatServicesStr(quint64 mask)\n             case NODE_WITNESS:\n                 strList.append(\"WITNESS\");\n                 break;\n-            case NODE_XTHIN:\n-                strList.append(\"XTHIN\");\n-                break;\n             default:\n                 strList.append(QString(\"%1[%2]\").arg(\"UNKNOWN\").arg(check));\n             }"
      },
      {
        "sha": "102e37e4711294b4e9ba43828dd3344731ddc579",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -119,16 +119,16 @@ Intro::Intro(QWidget *parent, uint64_t blockchain_size, uint64_t chain_state_siz\n     m_chain_state_size(chain_state_size)\n {\n     ui->setupUi(this);\n-    ui->welcomeLabel->setText(ui->welcomeLabel->text().arg(tr(PACKAGE_NAME)));\n-    ui->storageLabel->setText(ui->storageLabel->text().arg(tr(PACKAGE_NAME)));\n+    ui->welcomeLabel->setText(ui->welcomeLabel->text().arg(PACKAGE_NAME));\n+    ui->storageLabel->setText(ui->storageLabel->text().arg(PACKAGE_NAME));\n \n     ui->lblExplanation1->setText(ui->lblExplanation1->text()\n-        .arg(tr(PACKAGE_NAME))\n+        .arg(PACKAGE_NAME)\n         .arg(m_blockchain_size)\n         .arg(2009)\n         .arg(tr(\"Bitcoin\"))\n     );\n-    ui->lblExplanation2->setText(ui->lblExplanation2->text().arg(tr(PACKAGE_NAME)));\n+    ui->lblExplanation2->setText(ui->lblExplanation2->text().arg(PACKAGE_NAME));\n \n     uint64_t pruneTarget = std::max<int64_t>(0, gArgs.GetArg(\"-prune\", 0));\n     requiredSpace = m_blockchain_size;\n@@ -145,7 +145,7 @@ Intro::Intro(QWidget *parent, uint64_t blockchain_size, uint64_t chain_state_siz\n     }\n     requiredSpace += m_chain_state_size;\n     ui->sizeWarningLabel->setText(\n-        tr(\"%1 will download and store a copy of the Bitcoin block chain.\").arg(tr(PACKAGE_NAME)) + \" \" +\n+        tr(\"%1 will download and store a copy of the Bitcoin block chain.\").arg(PACKAGE_NAME) + \" \" +\n         storageRequiresMsg.arg(requiredSpace) + \" \" +\n         tr(\"The wallet will also be stored in this directory.\")\n     );\n@@ -221,7 +221,7 @@ bool Intro::pickDataDirectory(interfaces::Node& node)\n                 }\n                 break;\n             } catch (const fs::filesystem_error&) {\n-                QMessageBox::critical(nullptr, tr(PACKAGE_NAME),\n+                QMessageBox::critical(nullptr, PACKAGE_NAME,\n                     tr(\"Error: Specified data directory \\\"%1\\\" cannot be created.\").arg(dataDir));\n                 /* fall through, back to choosing screen */\n             }"
      },
      {
        "sha": "bff74690710810d9dffaaf253e05178dcad5b218",
        "filename": "src/qt/locale/bitcoin_en.ts",
        "status": "modified",
        "additions": 258,
        "deletions": 197,
        "changes": 455,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/locale/bitcoin_en.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/locale/bitcoin_en.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_en.ts?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -59,7 +59,7 @@\n         <translation>&amp;Delete</translation>\n     </message>\n     <message>\n-        <location filename=\"../addressbookpage.cpp\" line=\"+85\"/>\n+        <location filename=\"../addressbookpage.cpp\" line=\"+84\"/>\n         <source>Choose the address to send coins to</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -90,7 +90,7 @@\n     </message>\n     <message>\n         <location line=\"+5\"/>\n-        <source>These are your Bitcoin addresses for receiving payments. It is recommended to use a new receiving address for each transaction.</source>\n+        <source>These are your Bitcoin addresses for receiving payments. Use the &apos;Create new receiving address&apos; button in the receive tab to create new addresses.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n@@ -132,7 +132,7 @@\n <context>\n     <name>AddressTableModel</name>\n     <message>\n-        <location filename=\"../addresstablemodel.cpp\" line=\"+164\"/>\n+        <location filename=\"../addresstablemodel.cpp\" line=\"+163\"/>\n         <source>Label</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -297,7 +297,7 @@\n <context>\n     <name>BanTableModel</name>\n     <message>\n-        <location filename=\"../bantablemodel.cpp\" line=\"+88\"/>\n+        <location filename=\"../bantablemodel.cpp\" line=\"+86\"/>\n         <source>IP/Netmask</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -315,12 +315,12 @@\n         <translation>Sign &amp;message...</translation>\n     </message>\n     <message>\n-        <location line=\"+574\"/>\n+        <location line=\"+638\"/>\n         <source>Synchronizing with network...</source>\n         <translation>Synchronizing with network...</translation>\n     </message>\n     <message>\n-        <location line=\"-652\"/>\n+        <location line=\"-716\"/>\n         <source>&amp;Overview</source>\n         <translation>&amp;Overview</translation>\n     </message>\n@@ -400,12 +400,12 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+157\"/>\n+        <location line=\"+217\"/>\n         <source>Wallet:</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+330\"/>\n+        <location line=\"+334\"/>\n         <source>Click to disable network activity.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -430,12 +430,12 @@\n         <translation>Reindexing blocks on disk...</translation>\n     </message>\n     <message>\n-        <location line=\"+315\"/>\n+        <location line=\"+317\"/>\n         <source>Proxy is &lt;b&gt;enabled&lt;/b&gt;: %1</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-970\"/>\n+        <location line=\"-1036\"/>\n         <source>Send coins to a Bitcoin address</source>\n         <translation>Send coins to a Bitcoin address</translation>\n     </message>\n@@ -465,12 +465,7 @@\n         <translation>&amp;Verify message...</translation>\n     </message>\n     <message>\n-        <location line=\"+660\"/>\n-        <source>Bitcoin</source>\n-        <translation>Bitcoin</translation>\n-    </message>\n-    <message>\n-        <location line=\"-733\"/>\n+        <location line=\"-73\"/>\n         <source>&amp;Send</source>\n         <translation>&amp;Send</translation>\n     </message>\n@@ -505,12 +500,12 @@\n         <translation>Verify messages to ensure they were signed with specified Bitcoin addresses</translation>\n     </message>\n     <message>\n-        <location line=\"+61\"/>\n+        <location line=\"+118\"/>\n         <source>&amp;File</source>\n         <translation>&amp;File</translation>\n     </message>\n     <message>\n-        <location line=\"+11\"/>\n+        <location line=\"+14\"/>\n         <source>&amp;Settings</source>\n         <translation>&amp;Settings</translation>\n     </message>\n@@ -525,7 +520,7 @@\n         <translation>Tabs toolbar</translation>\n     </message>\n     <message>\n-        <location line=\"-211\"/>\n+        <location line=\"-271\"/>\n         <source>Request payments (generates QR codes and bitcoin: URIs)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -545,12 +540,12 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+2\"/>\n+        <location line=\"+10\"/>\n         <source>&amp;Command-line options</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message numerus=\"yes\">\n-        <location line=\"+484\"/>\n+        <location line=\"+540\"/>\n         <source>%n active connection(s) to Bitcoin network</source>\n         <translation>\n             <numerusform>%n active connection to Bitcoin network</numerusform>\n@@ -591,27 +586,27 @@\n         <translation>Transactions after this will not yet be visible.</translation>\n     </message>\n     <message>\n-        <location line=\"+27\"/>\n+        <location line=\"+28\"/>\n         <source>Error</source>\n         <translation>Error</translation>\n     </message>\n     <message>\n-        <location line=\"+3\"/>\n+        <location line=\"+4\"/>\n         <source>Warning</source>\n         <translation>Warning</translation>\n     </message>\n     <message>\n-        <location line=\"+3\"/>\n+        <location line=\"+4\"/>\n         <source>Information</source>\n         <translation>Information</translation>\n     </message>\n     <message>\n-        <location line=\"-78\"/>\n+        <location line=\"-81\"/>\n         <source>Up to date</source>\n         <translation>Up to date</translation>\n     </message>\n     <message>\n-        <location line=\"-593\"/>\n+        <location line=\"-657\"/>\n         <source>&amp;Sending addresses</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -621,12 +616,52 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+8\"/>\n+        <location line=\"+6\"/>\n+        <source>Open Wallet</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+2\"/>\n+        <source>Open a wallet</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+3\"/>\n+        <source>Close Wallet...</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+1\"/>\n+        <source>Close wallet</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+4\"/>\n         <source>Show the %1 help message to get a list with possible Bitcoin command-line options</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+63\"/>\n+        <location line=\"+30\"/>\n+        <source>default wallet</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+13\"/>\n+        <source>Opening Wallet &lt;b&gt;%1&lt;/b&gt;...</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+9\"/>\n+        <source>Open Wallet Failed</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+15\"/>\n+        <source>No wallets available</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+48\"/>\n         <source>&amp;Window</source>\n         <translation type=\"unfinished\">&amp;Window</translation>\n     </message>\n@@ -651,7 +686,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+228\"/>\n+        <location line=\"+232\"/>\n         <source>%1 client</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -666,7 +701,17 @@\n         <translation>Catching up...</translation>\n     </message>\n     <message>\n-        <location line=\"+151\"/>\n+        <location line=\"+50\"/>\n+        <source>Error: %1</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+4\"/>\n+        <source>Warning: %1</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+99\"/>\n         <source>Date: %1\n </source>\n         <translation type=\"unfinished\"></translation>\n@@ -737,7 +782,7 @@\n         <translation>Wallet is &lt;b&gt;encrypted&lt;/b&gt; and currently &lt;b&gt;locked&lt;/b&gt;</translation>\n     </message>\n     <message>\n-        <location filename=\"../bitcoin.cpp\" line=\"+395\"/>\n+        <location filename=\"../bitcoin.cpp\" line=\"+390\"/>\n         <source>A fatal error occurred. Bitcoin can no longer continue safely and will quit.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -830,7 +875,7 @@\n         <translation type=\"unfinished\">Confirmed</translation>\n     </message>\n     <message>\n-        <location filename=\"../coincontroldialog.cpp\" line=\"+58\"/>\n+        <location filename=\"../coincontroldialog.cpp\" line=\"+54\"/>\n         <source>Copy address</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1031,7 +1076,7 @@\n <context>\n     <name>HelpMessageDialog</name>\n     <message>\n-        <location filename=\"../utilitydialog.cpp\" line=\"+44\"/>\n+        <location filename=\"../utilitydialog.cpp\" line=\"+39\"/>\n         <source>version</source>\n         <translation type=\"unfinished\">version</translation>\n     </message>\n@@ -1120,7 +1165,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+80\"/>\n+        <location line=\"+75\"/>\n         <source>Error: Specified data directory &quot;%1&quot; cannot be created.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1171,7 +1216,7 @@\n     <message>\n         <location line=\"+7\"/>\n         <location line=\"+26\"/>\n-        <location filename=\"../modaloverlay.cpp\" line=\"+140\"/>\n+        <location filename=\"../modaloverlay.cpp\" line=\"+141\"/>\n         <source>Unknown...</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1207,8 +1252,8 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location filename=\"../modaloverlay.cpp\" line=\"-1\"/>\n-        <source>Unknown. Syncing Headers (%1)...</source>\n+        <location filename=\"../modaloverlay.cpp\" line=\"+6\"/>\n+        <source>Unknown. Syncing Headers (%1, %2%)...</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n </context>\n@@ -1540,12 +1585,12 @@\n         <translation>default</translation>\n     </message>\n     <message>\n-        <location line=\"+63\"/>\n+        <location line=\"+67\"/>\n         <source>none</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+93\"/>\n+        <location line=\"+89\"/>\n         <source>Confirm options reset</source>\n         <translation>Confirm options reset</translation>\n     </message>\n@@ -1689,7 +1734,7 @@\n     <name>PaymentServer</name>\n     <message>\n         <location filename=\"../paymentserver.cpp\" line=\"+226\"/>\n-        <location line=\"+338\"/>\n+        <location line=\"+346\"/>\n         <location line=\"+42\"/>\n         <location line=\"+110\"/>\n         <location line=\"+14\"/>\n@@ -1698,22 +1743,22 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-521\"/>\n+        <location line=\"-529\"/>\n         <source>Cannot start bitcoin: click-to-pay handler</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+62\"/>\n         <location line=\"+9\"/>\n         <location line=\"+16\"/>\n+        <location line=\"+16\"/>\n         <location line=\"+5\"/>\n-        <location line=\"+12\"/>\n         <location line=\"+7\"/>\n         <source>URI handling</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-49\"/>\n+        <location line=\"-53\"/>\n         <source>&apos;bitcoin://&apos; is not a valid URI. Use &apos;bitcoin:&apos; instead.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1728,12 +1773,13 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+5\"/>\n+        <location line=\"+16\"/>\n+        <location line=\"+36\"/>\n         <source>Cannot process payment request because BIP70 support was not compiled in.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+11\"/>\n+        <location line=\"-32\"/>\n         <source>Invalid payment address %1</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1744,16 +1790,17 @@\n     </message>\n     <message>\n         <location line=\"+14\"/>\n+        <location line=\"+9\"/>\n         <source>Payment request file handling</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+1\"/>\n+        <location line=\"-8\"/>\n         <source>Payment request file cannot be read! This can be caused by an invalid payment request file.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+195\"/>\n+        <location line=\"+199\"/>\n         <location line=\"+9\"/>\n         <location line=\"+31\"/>\n         <location line=\"+10\"/>\n@@ -1832,7 +1879,7 @@\n <context>\n     <name>PeerTableModel</name>\n     <message>\n-        <location filename=\"../peertablemodel.cpp\" line=\"+109\"/>\n+        <location filename=\"../peertablemodel.cpp\" line=\"+108\"/>\n         <source>User Agent</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1865,17 +1912,17 @@\n <context>\n     <name>QObject</name>\n     <message>\n-        <location filename=\"../bitcoinunits.cpp\" line=\"+197\"/>\n+        <location filename=\"../bitcoinunits.cpp\" line=\"+195\"/>\n         <source>Amount</source>\n         <translation type=\"unfinished\">Amount</translation>\n     </message>\n     <message>\n-        <location filename=\"../guiutil.cpp\" line=\"+111\"/>\n+        <location filename=\"../guiutil.cpp\" line=\"+108\"/>\n         <source>Enter a Bitcoin address (e.g. %1)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+687\"/>\n+        <location line=\"+702\"/>\n         <source>%1 d</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1985,20 +2032,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location filename=\"../bitcoin.cpp\" line=\"+185\"/>\n-        <source>%1 didn&apos;t yet exit safely...</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n-    <message>\n-        <location filename=\"../modaloverlay.cpp\" line=\"-29\"/>\n-        <source>unknown</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n-</context>\n-<context>\n-    <name>QObject::QObject</name>\n-    <message>\n-        <location filename=\"../bitcoin.cpp\" line=\"-113\"/>\n+        <location filename=\"../bitcoin.cpp\" line=\"+74\"/>\n         <source>Error parsing command line arguments: %1.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2017,11 +2051,21 @@\n         <source>Error: %1</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n+    <message>\n+        <location line=\"+57\"/>\n+        <source>%1 didn&apos;t yet exit safely...</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location filename=\"../modaloverlay.cpp\" line=\"-36\"/>\n+        <source>unknown</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n </context>\n <context>\n     <name>QRImageWidget</name>\n     <message>\n-        <location filename=\"../receiverequestdialog.cpp\" line=\"+32\"/>\n+        <location filename=\"../qrimagewidget.cpp\" line=\"+29\"/>\n         <source>&amp;Save Image...</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2030,6 +2074,21 @@\n         <source>&amp;Copy Image</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n+    <message>\n+        <location line=\"+13\"/>\n+        <source>Resulting URI too long, try to reduce the text for label / message.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+7\"/>\n+        <source>Error encoding URI into QR Code.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+38\"/>\n+        <source>QR code support not available.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n     <message>\n         <location line=\"+32\"/>\n         <source>Save QR Code</source>\n@@ -2056,7 +2115,7 @@\n         <location line=\"+23\"/>\n         <location line=\"+36\"/>\n         <location line=\"+23\"/>\n-        <location line=\"+713\"/>\n+        <location line=\"+716\"/>\n         <location line=\"+23\"/>\n         <location line=\"+23\"/>\n         <location line=\"+23\"/>\n@@ -2078,7 +2137,7 @@\n         <translation>N/A</translation>\n     </message>\n     <message>\n-        <location line=\"-1427\"/>\n+        <location line=\"-1430\"/>\n         <source>Client version</source>\n         <translation>Client version</translation>\n     </message>\n@@ -2178,7 +2237,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+238\"/>\n+        <location line=\"+241\"/>\n         <source>&amp;Reset</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2206,8 +2265,8 @@\n     </message>\n     <message>\n         <location line=\"+65\"/>\n-        <location filename=\"../rpcconsole.cpp\" line=\"+501\"/>\n-        <location line=\"+754\"/>\n+        <location filename=\"../rpcconsole.cpp\" line=\"+498\"/>\n+        <location line=\"+757\"/>\n         <source>Select a peer to view detailed information.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2242,13 +2301,13 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-1161\"/>\n-        <location line=\"+1069\"/>\n+        <location line=\"-1164\"/>\n+        <location line=\"+1072\"/>\n         <source>User Agent</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-734\"/>\n+        <location line=\"-737\"/>\n         <source>Open the %1 debug log file from the current data directory. This can take a few seconds for large log files.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2263,7 +2322,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+641\"/>\n+        <location line=\"+644\"/>\n         <source>Services</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2313,7 +2372,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-1166\"/>\n+        <location line=\"-1169\"/>\n         <source>Last block time</source>\n         <translation>Last block time</translation>\n     </message>\n@@ -2328,7 +2387,7 @@\n         <translation>&amp;Console</translation>\n     </message>\n     <message>\n-        <location line=\"+214\"/>\n+        <location line=\"+217\"/>\n         <source>&amp;Network Traffic</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2348,7 +2407,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location filename=\"../forms/debugwindow.ui\" line=\"-318\"/>\n+        <location filename=\"../forms/debugwindow.ui\" line=\"-321\"/>\n         <source>Debug log file</source>\n         <translation>Debug log file</translation>\n     </message>\n@@ -2358,7 +2417,7 @@\n         <translation>Clear console</translation>\n     </message>\n     <message>\n-        <location filename=\"../rpcconsole.cpp\" line=\"-249\"/>\n+        <location filename=\"../rpcconsole.cpp\" line=\"-252\"/>\n         <source>1 &amp;hour</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2396,7 +2455,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+161\"/>\n+        <location line=\"+164\"/>\n         <source>Welcome to the %1 RPC console.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2513,43 +2572,43 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-39\"/>\n-        <location line=\"+153\"/>\n-        <source>An optional amount to request. Leave this empty or zero to not request a specific amount.</source>\n+        <location line=\"+136\"/>\n+        <source>Native segwit addresses (aka Bech32 or BIP-173) reduce your transaction fees later on and offer better protection against typos, but old wallets don&apos;t support them. When checked, an address compatible with older wallets will be created instead.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-59\"/>\n-        <source>Clear all fields of the form.</source>\n+        <location line=\"+3\"/>\n+        <source>Generate legacy address</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+3\"/>\n-        <source>Clear</source>\n+        <location line=\"-178\"/>\n+        <location line=\"+153\"/>\n+        <source>An optional amount to request. Leave this empty or zero to not request a specific amount.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+78\"/>\n-        <source>Native segwit addresses (aka Bech32 or BIP-173) reduce your transaction fees later on and offer better protection against typos, but old wallets don&apos;t support them. When unchecked, an address compatible with older wallets will be created instead.</source>\n+        <location line=\"-76\"/>\n+        <source>&amp;Create new receiving address</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+3\"/>\n-        <source>Generate native segwit (Bech32) address</source>\n+        <location line=\"+17\"/>\n+        <source>Clear all fields of the form.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+61\"/>\n-        <source>Requested payments history</source>\n+        <location line=\"+3\"/>\n+        <source>Clear</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-162\"/>\n-        <source>&amp;Request payment</source>\n+        <location line=\"+142\"/>\n+        <source>Requested payments history</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+187\"/>\n+        <location line=\"+25\"/>\n         <source>Show the selected request (does the same as double clicking an entry)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2569,7 +2628,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location filename=\"../receivecoinsdialog.cpp\" line=\"+47\"/>\n+        <location filename=\"../receivecoinsdialog.cpp\" line=\"+45\"/>\n         <source>Copy URI</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2612,7 +2671,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location filename=\"../receiverequestdialog.cpp\" line=\"+65\"/>\n+        <location filename=\"../receiverequestdialog.cpp\" line=\"+63\"/>\n         <source>Request payment to %1</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2651,16 +2710,6 @@\n         <source>Wallet</source>\n         <translation type=\"unfinished\">Wallet</translation>\n     </message>\n-    <message>\n-        <location line=\"+11\"/>\n-        <source>Resulting URI too long, try to reduce the text for label / message.</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n-    <message>\n-        <location line=\"+5\"/>\n-        <source>Error encoding URI into QR Code.</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n </context>\n <context>\n     <name>RecentRequestsTableModel</name>\n@@ -2704,7 +2753,7 @@\n     <name>SendCoinsDialog</name>\n     <message>\n         <location filename=\"../forms/sendcoinsdialog.ui\" line=\"+14\"/>\n-        <location filename=\"../sendcoinsdialog.cpp\" line=\"+593\"/>\n+        <location filename=\"../sendcoinsdialog.cpp\" line=\"+600\"/>\n         <source>Send Coins</source>\n         <translation>Send Coins</translation>\n     </message>\n@@ -2891,7 +2940,7 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n         <translation>S&amp;end</translation>\n     </message>\n     <message>\n-        <location filename=\"../sendcoinsdialog.cpp\" line=\"-505\"/>\n+        <location filename=\"../sendcoinsdialog.cpp\" line=\"-512\"/>\n         <source>Copy quantity</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2931,10 +2980,19 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+133\"/>\n-        <location line=\"+5\"/>\n-        <location line=\"+6\"/>\n-        <location line=\"+4\"/>\n+        <location line=\"+117\"/>\n+        <source> from wallet &apos;%1&apos;</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+14\"/>\n+        <location line=\"+11\"/>\n+        <source>%1 to &apos;%2&apos;</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"-6\"/>\n+        <location line=\"+10\"/>\n         <source>%1 to %2</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2954,12 +3012,7 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-61\"/>\n-        <source>from wallet %1</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n-    <message>\n-        <location line=\"+40\"/>\n+        <location line=\"-21\"/>\n         <source>Please, review your transaction.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2979,12 +3032,17 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+5\"/>\n+        <location line=\"+9\"/>\n+        <source>To review recipient list click &quot;Show Details...&quot;</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+6\"/>\n         <source>Confirm send coins</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+191\"/>\n+        <location line=\"+190\"/>\n         <source>The recipient address is not valid. Please recheck.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3179,7 +3237,7 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n <context>\n     <name>SendConfirmationDialog</name>\n     <message>\n-        <location filename=\"../sendcoinsdialog.cpp\" line=\"+83\"/>\n+        <location filename=\"../sendcoinsdialog.cpp\" line=\"+88\"/>\n         <location line=\"+5\"/>\n         <source>Yes</source>\n         <translation type=\"unfinished\"></translation>\n@@ -3399,7 +3457,7 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n <context>\n     <name>TransactionDesc</name>\n     <message numerus=\"yes\">\n-        <location filename=\"../transactiondesc.cpp\" line=\"+35\"/>\n+        <location filename=\"../transactiondesc.cpp\" line=\"+34\"/>\n         <source>Open for %n more block(s)</source>\n         <translation>\n             <numerusform>Open for %n more block</numerusform>\n@@ -3640,7 +3698,7 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n <context>\n     <name>TransactionTableModel</name>\n     <message>\n-        <location filename=\"../transactiontablemodel.cpp\" line=\"+227\"/>\n+        <location filename=\"../transactiontablemodel.cpp\" line=\"+223\"/>\n         <source>Date</source>\n         <translation type=\"unfinished\">Date</translation>\n     </message>\n@@ -3776,7 +3834,7 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n <context>\n     <name>TransactionView</name>\n     <message>\n-        <location filename=\"../transactionview.cpp\" line=\"+71\"/>\n+        <location filename=\"../transactionview.cpp\" line=\"+70\"/>\n         <location line=\"+16\"/>\n         <source>All</source>\n         <translation type=\"unfinished\"></translation>\n@@ -3975,11 +4033,29 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n <context>\n     <name>UnitDisplayStatusBarControl</name>\n     <message>\n-        <location filename=\"../bitcoingui.cpp\" line=\"+154\"/>\n+        <location filename=\"../bitcoingui.cpp\" line=\"+155\"/>\n         <source>Unit to show amounts in. Click to select another unit.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n </context>\n+<context>\n+    <name>WalletController</name>\n+    <message>\n+        <location filename=\"../walletcontroller.cpp\" line=\"+70\"/>\n+        <source>Close wallet</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+1\"/>\n+        <source>Are you sure you wish to close wallet &lt;i&gt;%1&lt;/i&gt;?</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+1\"/>\n+        <source>Closing the wallet for too long can result in having to resync the entire chain if pruning is enabled.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+</context>\n <context>\n     <name>WalletFrame</name>\n     <message>\n@@ -4043,7 +4119,7 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+35\"/>\n+        <location line=\"+30\"/>\n         <source>default wallet</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4099,7 +4175,7 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n <context>\n     <name>bitcoin-core</name>\n     <message>\n-        <location filename=\"../bitcoinstrings.cpp\" line=\"+29\"/>\n+        <location filename=\"../bitcoinstrings.cpp\" line=\"+28\"/>\n         <source>Distributed under the MIT software license, see the accompanying file %s or %s</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4119,7 +4195,7 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+74\"/>\n+        <location line=\"+70\"/>\n         <source>Error: A fatal internal error occurred, see debug.log for details</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4129,22 +4205,22 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+30\"/>\n+        <location line=\"+31\"/>\n         <source>Unable to start HTTP server. See debug log for details.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-172\"/>\n-        <source>Bitcoin Core</source>\n-        <translation type=\"unfinished\">Bitcoin Core</translation>\n+        <location line=\"-168\"/>\n+        <source>The %s developers</source>\n+        <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+1\"/>\n-        <source>The %s developers</source>\n+        <location line=\"+4\"/>\n+        <source>Can&apos;t generate a change-address key. No keys in the internal keypool and can&apos;t generate any keys.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+7\"/>\n+        <location line=\"+3\"/>\n         <source>Cannot obtain a lock on data directory %s. %s is probably already running.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4199,7 +4275,7 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+10\"/>\n+        <location line=\"+7\"/>\n         <source>Warning: We do not appear to fully agree with our peers! You may need to upgrade, or other nodes may need to upgrade.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4290,11 +4366,6 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n     </message>\n     <message>\n         <location line=\"+6\"/>\n-        <source>Error: Disk space is low!</source>\n-        <translation>Error: Disk space is low!</translation>\n-    </message>\n-    <message>\n-        <location line=\"+1\"/>\n         <source>Failed to listen on any port. Use -listen=0 if you want this.</source>\n         <translation>Failed to listen on any port. Use -listen=0 if you want this.</translation>\n     </message>\n@@ -4314,7 +4385,7 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n         <translation>Incorrect or no genesis block found. Wrong datadir for network?</translation>\n     </message>\n     <message>\n-        <location line=\"+2\"/>\n+        <location line=\"+1\"/>\n         <source>Initialization sanity check failed. %s is shutting down.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4334,22 +4405,27 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+22\"/>\n+        <location line=\"+23\"/>\n         <source>Specified blocks directory &quot;%s&quot; does not exist.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+24\"/>\n+        <location line=\"+26\"/>\n         <source>Upgrading txindex database</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-42\"/>\n+        <location line=\"-45\"/>\n         <source>Loading P2P addresses...</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+1\"/>\n+        <location line=\"-15\"/>\n+        <source>Error: Disk space is too low!</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+16\"/>\n         <source>Loading banlist...</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4364,7 +4440,7 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+1\"/>\n+        <location line=\"+2\"/>\n         <source>Prune mode is incompatible with -txindex.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4394,12 +4470,12 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+2\"/>\n+        <location line=\"+3\"/>\n         <source>Unable to generate keys</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+3\"/>\n+        <location line=\"+4\"/>\n         <source>Unsupported logging category %s=%s.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4419,12 +4495,12 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n         <translation>Verifying blocks...</translation>\n     </message>\n     <message>\n-        <location line=\"+3\"/>\n+        <location line=\"+2\"/>\n         <source>Wallet needed to be rewritten: restart %s to complete</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-158\"/>\n+        <location line=\"-155\"/>\n         <source>Error: Listening for incoming connections failed (listen returned error %s)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4439,7 +4515,7 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+38\"/>\n+        <location line=\"+35\"/>\n         <source>You need to rebuild the database using -reindex to go back to unpruned mode.  This will redownload the entire blockchain</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4454,17 +4530,12 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+3\"/>\n+        <location line=\"+2\"/>\n         <source>Error: Disk space is low for %s</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+6\"/>\n-        <source>Information</source>\n-        <translation>Information</translation>\n-    </message>\n-    <message>\n-        <location line=\"+3\"/>\n+        <location line=\"+8\"/>\n         <source>Invalid -onion address or hostname: &apos;%s&apos;</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4489,7 +4560,12 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+5\"/>\n+        <location line=\"+3\"/>\n+        <source>Prune mode is incompatible with -blockfilterindex.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+3\"/>\n         <source>Reducing -maxconnections from %d to %d, because of system limitations.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4556,26 +4632,26 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n     </message>\n     <message>\n         <location line=\"+2\"/>\n-        <source>Unable to generate initial keys</source>\n+        <source>Unable to create the PID file &apos;%s&apos;: %s</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+9\"/>\n-        <source>Verifying wallet(s)...</source>\n+        <location line=\"+1\"/>\n+        <source>Unable to generate initial keys</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+1\"/>\n-        <source>Wallet %s resides outside wallet directory %s</source>\n+        <location line=\"+3\"/>\n+        <source>Unknown -blockfilterindex value %s.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+2\"/>\n-        <source>Warning</source>\n-        <translation>Warning</translation>\n+        <location line=\"+7\"/>\n+        <source>Verifying wallet(s)...</source>\n+        <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+1\"/>\n+        <location line=\"+2\"/>\n         <source>Warning: unknown new rules activated (versionbit %i)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4585,7 +4661,7 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-182\"/>\n+        <location line=\"-178\"/>\n         <source>-maxtxfee is set very high! Fees this large could be paid on a single transaction.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4606,11 +4682,6 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n     </message>\n     <message>\n         <location line=\"+14\"/>\n-        <source>Warning: Unknown block versions being mined! It&apos;s possible unknown rules are in effect</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n-    <message>\n-        <location line=\"+3\"/>\n         <source>Warning: Wallet file corrupt, data salvaged! Original %s saved as %s in %s; if your balance or transactions are incorrect you should restore from a backup.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4625,12 +4696,12 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+22\"/>\n+        <location line=\"+20\"/>\n         <source>Keypool ran out, please call keypoolrefill first</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+20\"/>\n+        <location line=\"+21\"/>\n         <source>Starting network threads...</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4665,22 +4736,17 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+8\"/>\n+        <location line=\"+10\"/>\n         <source>Unknown network specified in -onlynet: &apos;%s&apos;</source>\n         <translation>Unknown network specified in -onlynet: &apos;%s&apos;</translation>\n     </message>\n     <message>\n-        <location line=\"-48\"/>\n+        <location line=\"-51\"/>\n         <source>Insufficient funds</source>\n         <translation>Insufficient funds</translation>\n     </message>\n     <message>\n-        <location line=\"-120\"/>\n-        <source>Can&apos;t generate a change-address key. Private keys are disabled for this wallet.</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n-    <message>\n-        <location line=\"+8\"/>\n+        <location line=\"-107\"/>\n         <source>Cannot upgrade a non HD split wallet without upgrading to support pre split keypool. Please use -upgradewallet=169900 or -upgradewallet with no version specified.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4695,12 +4761,12 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+24\"/>\n+        <location line=\"+21\"/>\n         <source>Cannot write to data directory &apos;%s&apos;; check permissions.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+39\"/>\n+        <location line=\"+37\"/>\n         <source>Loading block index...</source>\n         <translation>Loading block index...</translation>\n     </message>\n@@ -4710,24 +4776,19 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n         <translation>Loading wallet...</translation>\n     </message>\n     <message>\n-        <location line=\"-42\"/>\n+        <location line=\"-40\"/>\n         <source>Cannot downgrade wallet</source>\n         <translation>Cannot downgrade wallet</translation>\n     </message>\n     <message>\n-        <location line=\"+50\"/>\n+        <location line=\"+49\"/>\n         <source>Rescanning...</source>\n         <translation>Rescanning...</translation>\n     </message>\n     <message>\n-        <location line=\"-42\"/>\n+        <location line=\"-41\"/>\n         <source>Done loading</source>\n         <translation>Done loading</translation>\n     </message>\n-    <message>\n-        <location line=\"+12\"/>\n-        <source>Error</source>\n-        <translation>Error</translation>\n-    </message>\n </context>\n </TS>"
      },
      {
        "sha": "999c434d2395b808add529ee13dae639faddd4d6",
        "filename": "src/qt/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/main.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -4,6 +4,8 @@\n \n #include <qt/bitcoin.h>\n \n+#include <util/translation.h>\n+\n #include <QCoreApplication>\n \n #include <functional>"
      },
      {
        "sha": "57cafaaac0b97a9ed616453b02b815aadce04ca0",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -87,12 +87,12 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n     /* Display elements init */\n     QDir translations(\":translations\");\n \n-    ui->bitcoinAtStartup->setToolTip(ui->bitcoinAtStartup->toolTip().arg(tr(PACKAGE_NAME)));\n-    ui->bitcoinAtStartup->setText(ui->bitcoinAtStartup->text().arg(tr(PACKAGE_NAME)));\n+    ui->bitcoinAtStartup->setToolTip(ui->bitcoinAtStartup->toolTip().arg(PACKAGE_NAME));\n+    ui->bitcoinAtStartup->setText(ui->bitcoinAtStartup->text().arg(PACKAGE_NAME));\n \n-    ui->openBitcoinConfButton->setToolTip(ui->openBitcoinConfButton->toolTip().arg(tr(PACKAGE_NAME)));\n+    ui->openBitcoinConfButton->setToolTip(ui->openBitcoinConfButton->toolTip().arg(PACKAGE_NAME));\n \n-    ui->lang->setToolTip(ui->lang->toolTip().arg(tr(PACKAGE_NAME)));\n+    ui->lang->setToolTip(ui->lang->toolTip().arg(PACKAGE_NAME));\n     ui->lang->addItem(QString(\"(\") + tr(\"default\") + QString(\")\"), QVariant(\"\"));\n     for (const QString &langStr : translations.entryList())\n     {"
      },
      {
        "sha": "f3f5d28af9ed6fc2ecbc4ef5368f90b698afd271",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -666,16 +666,14 @@ void PaymentServer::fetchPaymentACK(WalletModel* walletModel, const SendCoinsRec\n     payment.add_transactions(transaction.data(), transaction.size());\n \n     // Create a new refund address, or re-use:\n-    CPubKey newKey;\n-    if (walletModel->wallet().getKeyFromPool(false /* internal */, newKey)) {\n+    CTxDestination dest;\n+    const OutputType change_type = walletModel->wallet().getDefaultChangeType() != OutputType::CHANGE_AUTO ? walletModel->wallet().getDefaultChangeType() : walletModel->wallet().getDefaultAddressType();\n+    if (walletModel->wallet().getNewDestination(change_type, \"\", dest)) {\n         // BIP70 requests encode the scriptPubKey directly, so we are not restricted to address\n         // types supported by the receiver. As a result, we choose the address format we also\n         // use for change. Despite an actual payment and not change, this is a close match:\n         // it's the output type we use subject to privacy issues, but not restricted by what\n         // other software supports.\n-        const OutputType change_type = walletModel->wallet().getDefaultChangeType() != OutputType::CHANGE_AUTO ? walletModel->wallet().getDefaultChangeType() : walletModel->wallet().getDefaultAddressType();\n-        walletModel->wallet().learnRelatedScripts(newKey, change_type);\n-        CTxDestination dest = GetDestinationForKey(newKey, change_type);\n         std::string label = tr(\"Refund from %1\").arg(recipient.authenticatedMerchant).toStdString();\n         walletModel->wallet().setAddressBook(dest, label, \"refund\");\n "
      },
      {
        "sha": "99a9a12fe29c0b636f102bed49da4fbced089e38",
        "filename": "src/qt/peertablemodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/peertablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/peertablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -11,6 +11,8 @@\n #include <interfaces/node.h>\n #include <sync.h>\n \n+#include <algorithm>\n+\n #include <QDebug>\n #include <QList>\n #include <QTimer>\n@@ -76,7 +78,7 @@ class PeerTablePriv\n \n         if (sortColumn >= 0)\n             // sort cacheNodeStats (use stable sort to prevent rows jumping around unnecessarily)\n-            qStableSort(cachedNodeStats.begin(), cachedNodeStats.end(), NodeLessThan(sortColumn, sortOrder));\n+            std::stable_sort(cachedNodeStats.begin(), cachedNodeStats.end(), NodeLessThan(sortColumn, sortOrder));\n \n         // build index map\n         mapNodeRows.clear();"
      },
      {
        "sha": "08d692e44cc2b6ee5eb8c21a86ea004590e7d5f2",
        "filename": "src/qt/platformstyle.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/platformstyle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/platformstyle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/platformstyle.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -114,11 +114,6 @@ QIcon PlatformStyle::SingleColorIcon(const QIcon& icon) const\n     return ColorizeIcon(icon, SingleColor());\n }\n \n-QIcon PlatformStyle::TextColorIcon(const QString& filename) const\n-{\n-    return ColorizeIcon(filename, TextColor());\n-}\n-\n QIcon PlatformStyle::TextColorIcon(const QIcon& icon) const\n {\n     return ColorizeIcon(icon, TextColor());"
      },
      {
        "sha": "635aec4c938322ff9a2ae7f3c7af667b3e19de48",
        "filename": "src/qt/platformstyle.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/platformstyle.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/platformstyle.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/platformstyle.h?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -33,9 +33,6 @@ class PlatformStyle\n     /** Colorize an icon (given object) with the icon color */\n     QIcon SingleColorIcon(const QIcon& icon) const;\n \n-    /** Colorize an icon (given filename) with the text color */\n-    QIcon TextColorIcon(const QString& filename) const;\n-\n     /** Colorize an icon (given object) with the text color */\n     QIcon TextColorIcon(const QIcon& icon) const;\n "
      },
      {
        "sha": "05157c2a4ac95917fcf85cbcd5eb7854a7ef55aa",
        "filename": "src/qt/receivecoinsdialog.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/receivecoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/receivecoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -7,6 +7,7 @@\n #include <qt/receivecoinsdialog.h>\n #include <qt/forms/ui_receivecoinsdialog.h>\n \n+#include <interfaces/node.h>\n #include <qt/addresstablemodel.h>\n #include <qt/optionsmodel.h>\n #include <qt/platformstyle.h>\n@@ -92,10 +93,16 @@ void ReceiveCoinsDialog::setModel(WalletModel *_model)\n         // Last 2 columns are set by the columnResizingFixer, when the table geometry is ready.\n         columnResizingFixer = new GUIUtil::TableViewLastColumnResizingFixer(tableView, AMOUNT_MINIMUM_COLUMN_WIDTH, DATE_COLUMN_WIDTH, this);\n \n-        if (model->wallet().getDefaultAddressType() == OutputType::BECH32) {\n-            ui->useLegacyAddress->setCheckState(Qt::Unchecked);\n+        if (model->node().isAddressTypeSet()) {\n+            // user explicitly set the type, use it\n+            if (model->wallet().getDefaultAddressType() == OutputType::BECH32) {\n+                ui->useLegacyAddress->setCheckState(Qt::Unchecked);\n+            } else {\n+                ui->useLegacyAddress->setCheckState(Qt::Checked);\n+            }\n         } else {\n-            ui->useLegacyAddress->setCheckState(Qt::Checked);\n+            // Always fall back to bech32 in the gui\n+            ui->useLegacyAddress->setCheckState(Qt::Unchecked);\n         }\n \n         // Set the button to be enabled or disabled based on whether the wallet can give out new addresses."
      },
      {
        "sha": "1611ec823cc36d8cc79f9cbda807c10bbe400d91",
        "filename": "src/qt/recentrequeststablemodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/recentrequeststablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/recentrequeststablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -11,6 +11,8 @@\n #include <clientversion.h>\n #include <streams.h>\n \n+#include <algorithm>\n+\n \n RecentRequestsTableModel::RecentRequestsTableModel(WalletModel *parent) :\n     QAbstractTableModel(parent), walletModel(parent)\n@@ -202,7 +204,7 @@ void RecentRequestsTableModel::addNewRequest(RecentRequestEntry &recipient)\n \n void RecentRequestsTableModel::sort(int column, Qt::SortOrder order)\n {\n-    qSort(list.begin(), list.end(), RecentRequestEntryLessThan(column, order));\n+    std::sort(list.begin(), list.end(), RecentRequestEntryLessThan(column, order));\n     Q_EMIT dataChanged(index(0, 0, QModelIndex()), index(list.size() - 1, NUMBER_OF_COLUMNS - 1, QModelIndex()));\n }\n "
      },
      {
        "sha": "4143be8baca0d49d143959bf010273383603bba8",
        "filename": "src/qt/res/icons/about.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/src/qt/res/icons/about.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/src/qt/res/icons/about.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/about.png?ref=3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa"
      },
      {
        "sha": "c40abfd3a6cd48491191814e8f82c1654e4de8cc",
        "filename": "src/qt/res/icons/about_qt.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/src/qt/res/icons/about_qt.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/src/qt/res/icons/about_qt.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/about_qt.png?ref=3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa"
      },
      {
        "sha": "5333c83d5eb2f63f0df2e4f6980e4a8395f8b23d",
        "filename": "src/qt/res/icons/configure.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/src/qt/res/icons/configure.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/src/qt/res/icons/configure.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/configure.png?ref=3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa"
      },
      {
        "sha": "290fe608642285ece313bbaf78641216846d848a",
        "filename": "src/qt/res/icons/debugwindow.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/src/qt/res/icons/debugwindow.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/src/qt/res/icons/debugwindow.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/debugwindow.png?ref=3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa"
      },
      {
        "sha": "779cca1d52043c8b92a65b13e55319053260e7ec",
        "filename": "src/qt/res/icons/filesave.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/src/qt/res/icons/filesave.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/src/qt/res/icons/filesave.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/filesave.png?ref=3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa"
      },
      {
        "sha": "692b50c2a94eae5c6574ec4c11ee571441888554",
        "filename": "src/qt/res/icons/info.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/src/qt/res/icons/info.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/src/qt/res/icons/info.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/info.png?ref=3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa"
      },
      {
        "sha": "f301c4f38ca109163bab373167eeb83ed67f894c",
        "filename": "src/qt/res/icons/key.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/src/qt/res/icons/key.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/src/qt/res/icons/key.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/key.png?ref=3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa"
      },
      {
        "sha": "4d958f0e18d42d7902b42a4f7562539eeb696405",
        "filename": "src/qt/res/icons/open.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/src/qt/res/icons/open.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/src/qt/res/icons/open.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/open.png?ref=3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa"
      },
      {
        "sha": "55e34de4b8cbbab55e369eb954c5c2be72ade49e",
        "filename": "src/qt/res/icons/quit.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/src/qt/res/icons/quit.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/src/qt/res/icons/quit.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/quit.png?ref=3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa"
      },
      {
        "sha": "8e2cb2cc14436b0f3e303b0b00bf5750f55c9656",
        "filename": "src/qt/res/icons/verify.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/src/qt/res/icons/verify.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/src/qt/res/icons/verify.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/verify.png?ref=3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa"
      },
      {
        "sha": "3507837da944f8f2fa5853a34ecd28c0ae6c0fe7",
        "filename": "src/qt/res/movies/makespinner.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/res/movies/makespinner.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/res/movies/makespinner.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/makespinner.sh?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -9,6 +9,6 @@ FRAMEDIR=$(dirname $0)\n for i in {0..35}\n do\n     frame=$(printf \"%03d\" $i)\n-    angle=$(($i * 10))\n+    angle=$((i * 10))\n     convert $FRAMEDIR/../src/spinner.png -background \"rgba(0,0,0,0.0)\" -distort SRT $angle $FRAMEDIR/spinner-$frame.png\n done"
      },
      {
        "sha": "1ff11b7f5edc7d8b876a478331f047786e3c63f8",
        "filename": "src/qt/res/src/verify.svg",
        "status": "removed",
        "additions": 0,
        "deletions": 14,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/src/qt/res/src/verify.svg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa/src/qt/res/src/verify.svg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/src/verify.svg?ref=3eaa00231e0bb615ce32bc1b77ed6b7ebae5a9aa",
        "patch": "@@ -1,14 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n-<!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\r\n-<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\r\n-<svg version=\"1.1\" id=\"Ebene_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\r\n-\t viewBox=\"0 0 841.9 595.3\" enable-background=\"new 0 0 841.9 595.3\" xml:space=\"preserve\">\r\n-<path d=\"M654.1,317.5c-14.9-9.9-37.2-2.5-44.6,12.4l-62,111.6l-34.7-34.7c-12.4-12.4-34.7-12.4-47.1,0c-12.4,12.4-12.4,34.7,0,47.1\r\n-\tl67,67c7.4,7.4,14.9,9.9,22.3,9.9h5c9.9-2.5,19.8-7.4,24.8-17.4l81.9-148.8C676.4,347.2,671.5,327.4,654.1,317.5z\"/>\r\n-<path d=\"M326.7,471.3H177.9V362.1l94.3-94.3c-5-14.9-7.4-29.8-7.4-44.6c0-81.9,67-148.8,148.8-148.8s148.8,67,148.8,148.8\r\n-\ts-67,148.8-148.8,148.8h-37.2v49.6h-49.6L326.7,471.3L326.7,471.3z M227.5,421.7h49.6v-49.6h49.6v-49.6h86.8\r\n-\tc54.6,0,99.2-44.6,99.2-99.2S468.1,124,413.5,124s-99.2,44.6-99.2,99.2c0,14.9,2.5,27.3,9.9,39.7l7.4,14.9L230,379.5v42.2H227.5z\r\n-\t M413.5,198.4c14.9,0,24.8,9.9,24.8,24.8c0,14.9-9.9,24.8-24.8,24.8c-14.9,0-24.8-9.9-24.8-24.8\r\n-\tC388.7,208.3,401.1,198.4,413.5,198.4 M413.5,173.6c-27.3,0-49.6,22.3-49.6,49.6c0,27.3,22.3,49.6,49.6,49.6\r\n-\tc27.3,0,49.6-22.3,49.6-49.6C463.1,195.9,443.3,173.6,413.5,173.6z\"/>\r\n-</svg>\r"
      },
      {
        "sha": "19b11ba1cdafdbc89172e92b82175d8dcf7582fe",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 8,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -457,7 +457,7 @@ RPCConsole::RPCConsole(interfaces::Node& node, const PlatformStyle *_platformSty\n     QChar nonbreaking_hyphen(8209);\n     ui->dataDir->setToolTip(ui->dataDir->toolTip().arg(QString(nonbreaking_hyphen) + \"datadir\"));\n     ui->blocksDir->setToolTip(ui->blocksDir->toolTip().arg(QString(nonbreaking_hyphen) + \"blocksdir\"));\n-    ui->openDebugLogfileButton->setToolTip(ui->openDebugLogfileButton->toolTip().arg(tr(PACKAGE_NAME)));\n+    ui->openDebugLogfileButton->setToolTip(ui->openDebugLogfileButton->toolTip().arg(PACKAGE_NAME));\n \n     if (platformStyle->getImagesOnButtons()) {\n         ui->openDebugLogfileButton->setIcon(platformStyle->SingleColorIcon(\":/icons/export\"));\n@@ -804,7 +804,7 @@ void RPCConsole::clear(bool clearHistory)\n     QString clsKey = \"Ctrl-L\";\n #endif\n \n-    message(CMD_REPLY, (tr(\"Welcome to the %1 RPC console.\").arg(tr(PACKAGE_NAME)) + \"<br>\" +\n+    message(CMD_REPLY, (tr(\"Welcome to the %1 RPC console.\").arg(PACKAGE_NAME) + \"<br>\" +\n                         tr(\"Use up and down arrows to navigate history, and %1 to clear screen.\").arg(\"<b>\"+clsKey+\"</b>\") + \"<br>\" +\n                         tr(\"Type %1 for an overview of available commands.\").arg(\"<b>help</b>\") + \"<br>\" +\n                         tr(\"For more information on using this console type %1.\").arg(\"<b>help-console</b>\") +\n@@ -1120,7 +1120,7 @@ void RPCConsole::updateNodeDetail(const CNodeCombinedStats *stats)\n     ui->peerSubversion->setText(QString::fromStdString(stats->nodeStats.cleanSubVer));\n     ui->peerDirection->setText(stats->nodeStats.fInbound ? tr(\"Inbound\") : tr(\"Outbound\"));\n     ui->peerHeight->setText(QString(\"%1\").arg(QString::number(stats->nodeStats.nStartingHeight)));\n-    ui->peerWhitelisted->setText(stats->nodeStats.fWhitelisted ? tr(\"Yes\") : tr(\"No\"));\n+    ui->peerWhitelisted->setText(stats->nodeStats.m_legacyWhitelisted ? tr(\"Yes\") : tr(\"No\"));\n \n     // This check fails for example if the lock was busy and\n     // nodeStateStats couldn't be fetched.\n@@ -1265,11 +1265,6 @@ void RPCConsole::showOrHideBanTableIfRequired()\n     ui->banHeading->setVisible(visible);\n }\n \n-RPCConsole::TabTypes RPCConsole::tabFocus() const\n-{\n-    return (TabTypes) ui->tabWidget->currentIndex();\n-}\n-\n void RPCConsole::setTabFocus(enum TabTypes tabType)\n {\n     ui->tabWidget->setCurrentIndex(tabType);"
      },
      {
        "sha": "38015e38fd518cea19b03dd49b80ab46d4dd41ef",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -67,7 +67,6 @@ class RPCConsole: public QWidget\n \n     std::vector<TabTypes> tabs() const { return {TAB_INFO, TAB_CONSOLE, TAB_GRAPH, TAB_PEERS}; }\n \n-    TabTypes tabFocus() const;\n     QString tabTitle(TabTypes tab_type) const;\n \n protected:"
      },
      {
        "sha": "0ed057bc8b1bec137c695922e59c769ace3688f5",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -230,8 +230,9 @@ void SendCoinsDialog::on_sendButton_clicked()\n             {\n                 recipients.append(entry->getValue());\n             }\n-            else\n+            else if (valid)\n             {\n+                ui->scrollArea->ensureWidgetVisible(entry);\n                 valid = false;\n             }\n         }\n@@ -392,7 +393,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n         accept();\n         CoinControlDialog::coinControl()->UnSelectAll();\n         coinControlUpdateLabels();\n-        Q_EMIT coinsSent(currentTransaction.getWtx()->get().GetHash());\n+        Q_EMIT coinsSent(currentTransaction.getWtx()->GetHash());\n     }\n     fNewRecipientAllowed = true;\n }"
      },
      {
        "sha": "5bceb1f94532b043f84acb79349aeab335ba8e7a",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -16,6 +16,7 @@\n #include <interfaces/wallet.h>\n #include <ui_interface.h>\n #include <util/system.h>\n+#include <util/translation.h>\n #include <version.h>\n \n #include <QApplication>\n@@ -39,7 +40,7 @@ SplashScreen::SplashScreen(interfaces::Node& node, Qt::WindowFlags f, const Netw\n     devicePixelRatio = static_cast<QGuiApplication*>(QCoreApplication::instance())->devicePixelRatio();\n \n     // define text to place\n-    QString titleText       = tr(PACKAGE_NAME);\n+    QString titleText       = PACKAGE_NAME;\n     QString versionText     = QString(\"Version %1\").arg(QString::fromStdString(FormatFullVersion()));\n     QString copyrightText   = QString::fromUtf8(CopyrightHolders(strprintf(\"\\xc2\\xA9 %u-%u \", 2009, COPYRIGHT_YEAR)).c_str());\n     QString titleAddText    = networkStyle->getTitleAddText();\n@@ -156,18 +157,19 @@ void SplashScreen::finish()\n \n static void InitMessage(SplashScreen *splash, const std::string &message)\n {\n-    QMetaObject::invokeMethod(splash, \"showMessage\",\n+    bool invoked = QMetaObject::invokeMethod(splash, \"showMessage\",\n         Qt::QueuedConnection,\n         Q_ARG(QString, QString::fromStdString(message)),\n         Q_ARG(int, Qt::AlignBottom|Qt::AlignHCenter),\n         Q_ARG(QColor, QColor(55,55,55)));\n+    assert(invoked);\n }\n \n static void ShowProgress(SplashScreen *splash, const std::string &title, int nProgress, bool resume_possible)\n {\n     InitMessage(splash, title + std::string(\"\\n\") +\n-            (resume_possible ? _(\"(press q to shutdown and continue later)\")\n-                                : _(\"press q to shutdown\")) +\n+            (resume_possible ? _(\"(press q to shutdown and continue later)\").translated\n+                                : _(\"press q to shutdown\").translated) +\n             strprintf(\"\\n%d\", nProgress) + \"%\");\n }\n #ifdef ENABLE_WALLET"
      },
      {
        "sha": "11a518ebd2b9c3a70431a40179b0b3e552ac7d8d",
        "filename": "src/qt/test/addressbooktests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/test/addressbooktests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/test/addressbooktests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/addressbooktests.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -12,7 +12,6 @@\n \n #include <key.h>\n #include <key_io.h>\n-#include <pubkey.h>\n #include <wallet/wallet.h>\n \n #include <QApplication>"
      },
      {
        "sha": "49e9e072a8608acccde201bdd59b9533afe39fe2",
        "filename": "src/qt/test/apptests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/test/apptests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/test/apptests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/apptests.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -11,6 +11,8 @@\n #include <qt/networkstyle.h>\n #include <qt/rpcconsole.h>\n #include <shutdown.h>\n+#include <test/setup_common.h>\n+#include <univalue.h>\n #include <validation.h>\n \n #if defined(HAVE_CONFIG_H)\n@@ -26,9 +28,6 @@\n #include <QtGlobal>\n #include <QtTest/QtTestWidgets>\n #include <QtTest/QtTestGui>\n-#include <new>\n-#include <string>\n-#include <univalue.h>\n \n namespace {\n //! Call getblockchaininfo RPC and check first field of JSON output.\n@@ -63,6 +62,7 @@ void AppTests::appTests()\n     }\n #endif\n \n+    BasicTestingSetup test{CBaseChainParams::REGTEST}; // Create a temp data directory to backup the gui settings to\n     ECC_Stop(); // Already started by the common test setup, so stop it to avoid interference\n     LogInstance().DisconnectTestLogger();\n "
      },
      {
        "sha": "eca468a6ab1d8aaa9ade4e653c959169edf8f170",
        "filename": "src/qt/test/paymentservertests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/test/paymentservertests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/test/paymentservertests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -13,9 +13,10 @@\n #include <random.h>\n #include <script/script.h>\n #include <script/standard.h>\n-#include <util/system.h>\n+#include <test/setup_common.h>\n #include <util/strencodings.h>\n \n+#include <openssl/ssl.h>\n #include <openssl/x509.h>\n #include <openssl/x509_vfy.h>\n \n@@ -66,7 +67,8 @@ static SendCoinsRecipient handleRequest(PaymentServer* server, std::vector<unsig\n \n void PaymentServerTests::paymentServerTests()\n {\n-    SelectParams(CBaseChainParams::MAIN);\n+    SSL_library_init();\n+    BasicTestingSetup testing_setup(CBaseChainParams::MAIN);\n     auto node = interfaces::MakeNode();\n     OptionsModel optionsModel(*node);\n     PaymentServer* server = new PaymentServer(nullptr, false);"
      },
      {
        "sha": "3c2ffa6c00a1d7ab8505765cfd8f790c114b24a1",
        "filename": "src/qt/test/rpcnestedtests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/test/rpcnestedtests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/test/rpcnestedtests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -4,7 +4,6 @@\n \n #include <qt/test/rpcnestedtests.h>\n \n-#include <fs.h>\n #include <interfaces/node.h>\n #include <rpc/server.h>\n #include <qt/rpcconsole.h>\n@@ -35,7 +34,6 @@ void RPCNestedTests::rpcNestedTests()\n     tableRPC.appendCommand(\"rpcNestedTest\", &vRPCCommands[0]);\n     //mempool.setSanityCheck(1.0);\n \n-    LogInstance().DisconnectTestLogger(); // Already started by the common test setup, so stop it to avoid interference\n     TestingSetup test;\n \n     if (RPCIsInWarmup(nullptr)) SetRPCWarmupFinished();"
      },
      {
        "sha": "97143ff78abcbcef4d1c1b3e83394bb40da240fd",
        "filename": "src/qt/test/rpcnestedtests.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/test/rpcnestedtests.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/test/rpcnestedtests.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.h?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -8,9 +8,6 @@\n #include <QObject>\n #include <QTest>\n \n-#include <txdb.h>\n-#include <txmempool.h>\n-\n class RPCNestedTests : public QObject\n {\n     Q_OBJECT"
      },
      {
        "sha": "796cf24b364e1557011c876f6421463e03ed8fb2",
        "filename": "src/qt/test/test_main.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 9,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/test/test_main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/test/test_main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/test_main.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -6,7 +6,6 @@\n #include <config/bitcoin-config.h>\n #endif\n \n-#include <chainparams.h>\n #include <interfaces/node.h>\n #include <qt/bitcoin.h>\n #include <qt/test/apptests.h>\n@@ -27,8 +26,6 @@\n #include <QObject>\n #include <QTest>\n \n-#include <openssl/ssl.h>\n-\n #if defined(QT_STATICPLUGIN)\n #include <QtPlugin>\n #if defined(QT_QPA_PLATFORM_MINIMAL)\n@@ -43,12 +40,18 @@ Q_IMPORT_PLUGIN(QCocoaIntegrationPlugin);\n #endif\n #endif\n \n-extern void noui_connect();\n-\n // This is all you need to run all the tests\n int main(int argc, char *argv[])\n {\n-    BasicTestingSetup test{CBaseChainParams::REGTEST};\n+    // Initialize persistent globals with the testing setup state for sanity.\n+    // E.g. -datadir in gArgs is set to a temp directory dummy value (instead\n+    // of defaulting to the default datadir), or globalChainParams is set to\n+    // regtest params.\n+    //\n+    // All tests must use their own testing setup (if needed).\n+    {\n+        BasicTestingSetup dummy{CBaseChainParams::REGTEST};\n+    }\n \n     auto node = interfaces::MakeNode();\n \n@@ -65,11 +68,9 @@ int main(int argc, char *argv[])\n \n     // Don't remove this, it's needed to access\n     // QApplication:: and QCoreApplication:: in the tests\n-    BitcoinApplication app(*node, argc, argv);\n+    BitcoinApplication app(*node);\n     app.setApplicationName(\"Bitcoin-Qt-test\");\n \n-    SSL_library_init();\n-\n     AppTests app_tests(app);\n     if (QTest::qExec(&app_tests) != 0) {\n         fInvalid = true;"
      },
      {
        "sha": "120dff95c085663b0a41445f8e444d942c35f4c1",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -68,7 +68,8 @@ uint256 SendCoins(CWallet& wallet, SendCoinsDialog& sendCoinsDialog, const CTxDe\n         if (status == CT_NEW) txid = hash;\n     }));\n     ConfirmSend();\n-    QMetaObject::invokeMethod(&sendCoinsDialog, \"on_sendButton_clicked\");\n+    bool invoked = QMetaObject::invokeMethod(&sendCoinsDialog, \"on_sendButton_clicked\");\n+    assert(invoked);\n     return txid;\n }\n "
      },
      {
        "sha": "006007be63e4a77f857e68de974ad9458ca459b7",
        "filename": "src/qt/trafficgraphwidget.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/trafficgraphwidget.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/trafficgraphwidget.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/trafficgraphwidget.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -104,6 +104,7 @@ void TrafficGraphWidget::paintEvent(QPaintEvent *)\n         }\n     }\n \n+    painter.setRenderHint(QPainter::Antialiasing);\n     if(!vSamplesIn.empty()) {\n         QPainterPath p;\n         paintPath(p, vSamplesIn);"
      },
      {
        "sha": "8d0cb5415162e8e509ae0a593abda6dfa2813eff",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 7,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -17,6 +17,8 @@\n #include <interfaces/handler.h>\n #include <uint256.h>\n \n+#include <algorithm>\n+\n #include <QColor>\n #include <QDateTime>\n #include <QDebug>\n@@ -93,9 +95,9 @@ class TransactionTablePriv\n         qDebug() << \"TransactionTablePriv::updateWallet: \" + QString::fromStdString(hash.ToString()) + \" \" + QString::number(status);\n \n         // Find bounds of this transaction in model\n-        QList<TransactionRecord>::iterator lower = qLowerBound(\n+        QList<TransactionRecord>::iterator lower = std::lower_bound(\n             cachedWallet.begin(), cachedWallet.end(), hash, TxLessThan());\n-        QList<TransactionRecord>::iterator upper = qUpperBound(\n+        QList<TransactionRecord>::iterator upper = std::upper_bound(\n             cachedWallet.begin(), cachedWallet.end(), hash, TxLessThan());\n         int lowerIndex = (lower - cachedWallet.begin());\n         int upperIndex = (upper - cachedWallet.begin());\n@@ -687,10 +689,11 @@ struct TransactionNotification\n     {\n         QString strHash = QString::fromStdString(hash.GetHex());\n         qDebug() << \"NotifyTransactionChanged: \" + strHash + \" status= \" + QString::number(status);\n-        QMetaObject::invokeMethod(ttm, \"updateTransaction\", Qt::QueuedConnection,\n+        bool invoked = QMetaObject::invokeMethod(ttm, \"updateTransaction\", Qt::QueuedConnection,\n                                   Q_ARG(QString, strHash),\n                                   Q_ARG(int, status),\n                                   Q_ARG(bool, showTransaction));\n+        assert(invoked);\n     }\n private:\n     uint256 hash;\n@@ -725,12 +728,16 @@ static void ShowProgress(TransactionTableModel *ttm, const std::string &title, i\n     if (nProgress == 100)\n     {\n         fQueueNotifications = false;\n-        if (vQueueNotifications.size() > 10) // prevent balloon spam, show maximum 10 balloons\n-            QMetaObject::invokeMethod(ttm, \"setProcessingQueuedTransactions\", Qt::QueuedConnection, Q_ARG(bool, true));\n+        if (vQueueNotifications.size() > 10) { // prevent balloon spam, show maximum 10 balloons\n+            bool invoked = QMetaObject::invokeMethod(ttm, \"setProcessingQueuedTransactions\", Qt::QueuedConnection, Q_ARG(bool, true));\n+            assert(invoked);\n+        }\n         for (unsigned int i = 0; i < vQueueNotifications.size(); ++i)\n         {\n-            if (vQueueNotifications.size() - i <= 10)\n-                QMetaObject::invokeMethod(ttm, \"setProcessingQueuedTransactions\", Qt::QueuedConnection, Q_ARG(bool, false));\n+            if (vQueueNotifications.size() - i <= 10) {\n+                bool invoked = QMetaObject::invokeMethod(ttm, \"setProcessingQueuedTransactions\", Qt::QueuedConnection, Q_ARG(bool, false));\n+                assert(invoked);\n+            }\n \n             vQueueNotifications[i].invoke(ttm);\n         }"
      },
      {
        "sha": "6509a701f36baa9cf5867507bbcb78114d29f1df",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -36,7 +36,7 @@ HelpMessageDialog::HelpMessageDialog(interfaces::Node& node, QWidget *parent, bo\n {\n     ui->setupUi(this);\n \n-    QString version = tr(PACKAGE_NAME) + \" \" + tr(\"version\") + \" \" + QString::fromStdString(FormatFullVersion());\n+    QString version = QString{PACKAGE_NAME} + \" \" + tr(\"version\") + \" \" + QString::fromStdString(FormatFullVersion());\n     /* On x86 add a bit specifier to the version so that users can distinguish between\n      * 32 and 64 bit builds. On other architectures, 32/64 bit may be more ambiguous.\n      */\n@@ -48,7 +48,7 @@ HelpMessageDialog::HelpMessageDialog(interfaces::Node& node, QWidget *parent, bo\n \n     if (about)\n     {\n-        setWindowTitle(tr(\"About %1\").arg(tr(PACKAGE_NAME)));\n+        setWindowTitle(tr(\"About %1\").arg(PACKAGE_NAME));\n \n         std::string licenseInfo = LicenseInfo();\n         /// HTML-format the license message from the core\n@@ -150,7 +150,7 @@ ShutdownWindow::ShutdownWindow(QWidget *parent, Qt::WindowFlags f):\n {\n     QVBoxLayout *layout = new QVBoxLayout();\n     layout->addWidget(new QLabel(\n-        tr(\"%1 is shutting down...\").arg(tr(PACKAGE_NAME)) + \"<br /><br />\" +\n+        tr(\"%1 is shutting down...\").arg(PACKAGE_NAME) + \"<br /><br />\" +\n         tr(\"Do not shut down the computer until this window disappears.\")));\n     setLayout(layout);\n }"
      },
      {
        "sha": "a8e7bce6b591a93c08ce8f7c6e9584539f2d8e5f",
        "filename": "src/qt/walletcontroller.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 19,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/walletcontroller.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/walletcontroller.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -40,19 +40,22 @@ WalletController::~WalletController()\n     m_activity_thread.wait();\n }\n \n-std::vector<WalletModel*> WalletController::getWallets() const\n+std::vector<WalletModel*> WalletController::getOpenWallets() const\n {\n     QMutexLocker locker(&m_mutex);\n     return m_wallets;\n }\n \n-std::vector<std::string> WalletController::getWalletsAvailableToOpen() const\n+std::map<std::string, bool> WalletController::listWalletDir() const\n {\n     QMutexLocker locker(&m_mutex);\n-    std::vector<std::string> wallets = m_node.listWalletDir();\n+    std::map<std::string, bool> wallets;\n+    for (const std::string& name : m_node.listWalletDir()) {\n+        wallets[name] = false;\n+    }\n     for (WalletModel* wallet_model : m_wallets) {\n-        auto it = std::remove(wallets.begin(), wallets.end(), wallet_model->wallet().getWalletName());\n-        if (it != wallets.end()) wallets.erase(it);\n+        auto it = wallets.find(wallet_model->wallet().getWalletName());\n+        if (it != wallets.end()) it->second = true;\n     }\n     return wallets;\n }\n@@ -96,6 +99,9 @@ WalletModel* WalletController::getOrCreateWallet(std::unique_ptr<interfaces::Wal\n \n     // Instantiate model and register it.\n     WalletModel* wallet_model = new WalletModel(std::move(wallet), m_node, m_platform_style, m_options_model, nullptr);\n+    // Handler callback runs in a different thread so fix wallet model thread affinity.\n+    wallet_model->moveToThread(thread());\n+    wallet_model->setParent(this);\n     m_wallets.push_back(wallet_model);\n \n     connect(wallet_model, &WalletModel::unload, [this, wallet_model] {\n@@ -116,24 +122,11 @@ WalletModel* WalletController::getOrCreateWallet(std::unique_ptr<interfaces::Wal\n     connect(wallet_model, &WalletModel::coinsSent, this, &WalletController::coinsSent);\n \n     // Notify walletAdded signal on the GUI thread.\n-    if (QThread::currentThread() == thread()) {\n-        addWallet(wallet_model);\n-    } else {\n-        // Handler callback runs in a different thread so fix wallet model thread affinity.\n-        wallet_model->moveToThread(thread());\n-        QMetaObject::invokeMethod(this, \"addWallet\", Qt::QueuedConnection, Q_ARG(WalletModel*, wallet_model));\n-    }\n+    Q_EMIT walletAdded(wallet_model);\n \n     return wallet_model;\n }\n \n-void WalletController::addWallet(WalletModel* wallet_model)\n-{\n-    // Take ownership of the wallet model and register it.\n-    wallet_model->setParent(this);\n-    Q_EMIT walletAdded(wallet_model);\n-}\n-\n void WalletController::removeAndDeleteWallet(WalletModel* wallet_model)\n {\n     // Unregister wallet model."
      },
      {
        "sha": "be1c28291991d502c0efda20ffed27888fe04279",
        "filename": "src/qt/walletcontroller.h",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/walletcontroller.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/walletcontroller.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.h?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -8,7 +8,7 @@\n #include <qt/walletmodel.h>\n #include <sync.h>\n \n-#include <list>\n+#include <map>\n #include <memory>\n #include <vector>\n \n@@ -40,15 +40,16 @@ class WalletController : public QObject\n     WalletController(interfaces::Node& node, const PlatformStyle* platform_style, OptionsModel* options_model, QObject* parent);\n     ~WalletController();\n \n-    std::vector<WalletModel*> getWallets() const;\n-    std::vector<std::string> getWalletsAvailableToOpen() const;\n+    //! Returns wallet models currently open.\n+    std::vector<WalletModel*> getOpenWallets() const;\n+\n+    //! Returns all wallet names in the wallet dir mapped to whether the wallet\n+    //! is loaded.\n+    std::map<std::string, bool> listWalletDir() const;\n \n     OpenWalletActivity* openWallet(const std::string& name, QWidget* parent = nullptr);\n     void closeWallet(WalletModel* wallet_model, QWidget* parent = nullptr);\n \n-private Q_SLOTS:\n-    void addWallet(WalletModel* wallet_model);\n-\n Q_SIGNALS:\n     void walletAdded(WalletModel* wallet_model);\n     void walletRemoved(WalletModel* wallet_model);"
      },
      {
        "sha": "49a13330ec098e9d4fa7d6d3db236b6a868fa16f",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 13,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -221,11 +221,12 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n             return TransactionCreationFailed;\n         }\n \n-        // reject absurdly high fee. (This can never happen because the\n-        // wallet caps the fee at m_default_max_tx_fee. This merely serves as a\n-        // belt-and-suspenders check)\n-        if (nFeeRequired > m_wallet->getDefaultMaxTxFee())\n+        // Reject absurdly high fee. (This can never happen because the\n+        // wallet never creates transactions with fee greater than\n+        // m_default_max_tx_fee. This merely a belt-and-suspenders check).\n+        if (nFeeRequired > m_wallet->getDefaultMaxTxFee()) {\n             return AbsurdFee;\n+        }\n     }\n \n     return SendCoinsReturn(OK);\n@@ -260,11 +261,11 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n \n         auto& newTx = transaction.getWtx();\n         std::string rejectReason;\n-        if (!newTx->commit({} /* mapValue */, std::move(vOrderForm), rejectReason))\n+        if (!wallet().commitTransaction(newTx, {} /* mapValue */, std::move(vOrderForm), rejectReason))\n             return SendCoinsReturn(TransactionCommitFailed, QString::fromStdString(rejectReason));\n \n         CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n-        ssTx << newTx->get();\n+        ssTx << *newTx;\n         transaction_array.append(&(ssTx[0]), ssTx.size());\n     }\n \n@@ -376,13 +377,15 @@ bool WalletModel::changePassphrase(const SecureString &oldPass, const SecureStri\n static void NotifyUnload(WalletModel* walletModel)\n {\n     qDebug() << \"NotifyUnload\";\n-    QMetaObject::invokeMethod(walletModel, \"unload\");\n+    bool invoked = QMetaObject::invokeMethod(walletModel, \"unload\");\n+    assert(invoked);\n }\n \n static void NotifyKeyStoreStatusChanged(WalletModel *walletmodel)\n {\n     qDebug() << \"NotifyKeyStoreStatusChanged\";\n-    QMetaObject::invokeMethod(walletmodel, \"updateStatus\", Qt::QueuedConnection);\n+    bool invoked = QMetaObject::invokeMethod(walletmodel, \"updateStatus\", Qt::QueuedConnection);\n+    assert(invoked);\n }\n \n static void NotifyAddressBookChanged(WalletModel *walletmodel,\n@@ -394,38 +397,43 @@ static void NotifyAddressBookChanged(WalletModel *walletmodel,\n     QString strPurpose = QString::fromStdString(purpose);\n \n     qDebug() << \"NotifyAddressBookChanged: \" + strAddress + \" \" + strLabel + \" isMine=\" + QString::number(isMine) + \" purpose=\" + strPurpose + \" status=\" + QString::number(status);\n-    QMetaObject::invokeMethod(walletmodel, \"updateAddressBook\", Qt::QueuedConnection,\n+    bool invoked = QMetaObject::invokeMethod(walletmodel, \"updateAddressBook\", Qt::QueuedConnection,\n                               Q_ARG(QString, strAddress),\n                               Q_ARG(QString, strLabel),\n                               Q_ARG(bool, isMine),\n                               Q_ARG(QString, strPurpose),\n                               Q_ARG(int, status));\n+    assert(invoked);\n }\n \n static void NotifyTransactionChanged(WalletModel *walletmodel, const uint256 &hash, ChangeType status)\n {\n     Q_UNUSED(hash);\n     Q_UNUSED(status);\n-    QMetaObject::invokeMethod(walletmodel, \"updateTransaction\", Qt::QueuedConnection);\n+    bool invoked = QMetaObject::invokeMethod(walletmodel, \"updateTransaction\", Qt::QueuedConnection);\n+    assert(invoked);\n }\n \n static void ShowProgress(WalletModel *walletmodel, const std::string &title, int nProgress)\n {\n     // emits signal \"showProgress\"\n-    QMetaObject::invokeMethod(walletmodel, \"showProgress\", Qt::QueuedConnection,\n+    bool invoked = QMetaObject::invokeMethod(walletmodel, \"showProgress\", Qt::QueuedConnection,\n                               Q_ARG(QString, QString::fromStdString(title)),\n                               Q_ARG(int, nProgress));\n+    assert(invoked);\n }\n \n static void NotifyWatchonlyChanged(WalletModel *walletmodel, bool fHaveWatchonly)\n {\n-    QMetaObject::invokeMethod(walletmodel, \"updateWatchOnlyFlag\", Qt::QueuedConnection,\n+    bool invoked = QMetaObject::invokeMethod(walletmodel, \"updateWatchOnlyFlag\", Qt::QueuedConnection,\n                               Q_ARG(bool, fHaveWatchonly));\n+    assert(invoked);\n }\n \n static void NotifyCanGetAddressesChanged(WalletModel* walletmodel)\n {\n-    QMetaObject::invokeMethod(walletmodel, \"canGetAddressesChanged\");\n+    bool invoked = QMetaObject::invokeMethod(walletmodel, \"canGetAddressesChanged\");\n+    assert(invoked);\n }\n \n void WalletModel::subscribeToCoreSignals()"
      },
      {
        "sha": "d00ccf70d91ec3e0189e150e208c8f6b41f33656",
        "filename": "src/qt/walletmodeltransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/walletmodeltransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/walletmodeltransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -21,14 +21,14 @@ QList<SendCoinsRecipient> WalletModelTransaction::getRecipients() const\n     return recipients;\n }\n \n-std::unique_ptr<interfaces::PendingWalletTx>& WalletModelTransaction::getWtx()\n+CTransactionRef& WalletModelTransaction::getWtx()\n {\n     return wtx;\n }\n \n unsigned int WalletModelTransaction::getTransactionSize()\n {\n-    return wtx ? GetVirtualTransactionSize(wtx->get()) : 0;\n+    return wtx ? GetVirtualTransactionSize(*wtx) : 0;\n }\n \n CAmount WalletModelTransaction::getTransactionFee() const\n@@ -43,7 +43,7 @@ void WalletModelTransaction::setTransactionFee(const CAmount& newFee)\n \n void WalletModelTransaction::reassignAmounts(int nChangePosRet)\n {\n-    const CTransaction* walletTransaction = &wtx->get();\n+    const CTransaction* walletTransaction = wtx.get();\n     int i = 0;\n     for (QList<SendCoinsRecipient>::iterator it = recipients.begin(); it != recipients.end(); ++it)\n     {"
      },
      {
        "sha": "a41d8f245716b4612899f4a5e8a362698b22a843",
        "filename": "src/qt/walletmodeltransaction.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/walletmodeltransaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/qt/walletmodeltransaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.h?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -16,7 +16,6 @@ class SendCoinsRecipient;\n \n namespace interfaces {\n class Node;\n-class PendingWalletTx;\n }\n \n /** Data model for a walletmodel transaction. */\n@@ -27,7 +26,7 @@ class WalletModelTransaction\n \n     QList<SendCoinsRecipient> getRecipients() const;\n \n-    std::unique_ptr<interfaces::PendingWalletTx>& getWtx();\n+    CTransactionRef& getWtx();\n     unsigned int getTransactionSize();\n \n     void setTransactionFee(const CAmount& newFee);\n@@ -39,7 +38,7 @@ class WalletModelTransaction\n \n private:\n     QList<SendCoinsRecipient> recipients;\n-    std::unique_ptr<interfaces::PendingWalletTx> wtx;\n+    CTransactionRef wtx;\n     CAmount fee;\n };\n "
      },
      {
        "sha": "675b177af392e3b28fc690e825db0b4c9ff16ed6",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -667,6 +667,11 @@ uint64_t GetRand(uint64_t nMax) noexcept\n     return FastRandomContext(g_mock_deterministic_tests).randrange(nMax);\n }\n \n+std::chrono::microseconds GetRandMicros(std::chrono::microseconds duration_max) noexcept\n+{\n+    return std::chrono::microseconds{GetRand(duration_max.count())};\n+}\n+\n int GetRandInt(int nMax) noexcept\n {\n     return GetRand(nMax);"
      },
      {
        "sha": "22801ec1555c0bec9a0de40b83fbb76a7a8c9034",
        "filename": "src/random.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/random.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/random.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.h?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -10,7 +10,8 @@\n #include <crypto/common.h>\n #include <uint256.h>\n \n-#include <stdint.h>\n+#include <chrono> // For std::chrono::microseconds\n+#include <cstdint>\n #include <limits>\n \n /**\n@@ -69,6 +70,7 @@\n  */\n void GetRandBytes(unsigned char* buf, int num) noexcept;\n uint64_t GetRand(uint64_t nMax) noexcept;\n+std::chrono::microseconds GetRandMicros(std::chrono::microseconds duration_max) noexcept;\n int GetRandInt(int nMax) noexcept;\n uint256 GetRandHash() noexcept;\n "
      },
      {
        "sha": "2c4d47554267e847803a4620a5d68f6b95d78e92",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -12,6 +12,7 @@\n #include <primitives/block.h>\n #include <primitives/transaction.h>\n #include <rpc/blockchain.h>\n+#include <rpc/protocol.h>\n #include <rpc/server.h>\n #include <streams.h>\n #include <sync.h>\n@@ -502,12 +503,12 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n         if (fCheckMemPool) {\n             // use db+mempool as cache backend in case user likes to query mempool\n             LOCK2(cs_main, mempool.cs);\n-            CCoinsViewCache& viewChain = *pcoinsTip;\n+            CCoinsViewCache& viewChain = ::ChainstateActive().CoinsTip();\n             CCoinsViewMemPool viewMempool(&viewChain, mempool);\n             process_utxos(viewMempool, mempool);\n         } else {\n             LOCK(cs_main);  // no need to lock mempool!\n-            process_utxos(*pcoinsTip, CTxMemPool());\n+            process_utxos(::ChainstateActive().CoinsTip(), CTxMemPool());\n         }\n \n         for (size_t i = 0; i < hits.size(); ++i) {"
      },
      {
        "sha": "a74003149d374c021350d4e2015a8805afeef60e",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 123,
        "deletions": 224,
        "changes": 347,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -14,7 +14,6 @@\n #include <core_io.h>\n #include <hash.h>\n #include <index/blockfilterindex.h>\n-#include <key_io.h>\n #include <policy/feerate.h>\n #include <policy/policy.h>\n #include <policy/rbf.h>\n@@ -42,9 +41,9 @@\n \n #include <boost/thread/thread.hpp> // boost::thread::interrupt\n \n+#include <condition_variable>\n #include <memory>\n #include <mutex>\n-#include <condition_variable>\n \n struct CUpdatedBlock\n {\n@@ -166,10 +165,9 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* tip, const CBlockIn\n \n static UniValue getblockcount(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n             RPCHelpMan{\"getblockcount\",\n-                \"\\nReturns the number of blocks in the longest blockchain.\\n\",\n+                \"\\nReturns the height of the most-work fully-validated chain.\\n\"\n+                \"The genesis block has height 0.\\n\",\n                 {},\n                 RPCResult{\n             \"n    (numeric) The current block count\\n\"\n@@ -178,18 +176,16 @@ static UniValue getblockcount(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getblockcount\", \"\")\n             + HelpExampleRpc(\"getblockcount\", \"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     LOCK(cs_main);\n     return ::ChainActive().Height();\n }\n \n static UniValue getbestblockhash(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n             RPCHelpMan{\"getbestblockhash\",\n-                \"\\nReturns the hash of the best (tip) block in the longest blockchain.\\n\",\n+                \"\\nReturns the hash of the best (tip) block in the most-work fully-validated chain.\\n\",\n                 {},\n                 RPCResult{\n             \"\\\"hex\\\"      (string) the block hash, hex-encoded\\n\"\n@@ -198,7 +194,7 @@ static UniValue getbestblockhash(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getbestblockhash\", \"\")\n             + HelpExampleRpc(\"getbestblockhash\", \"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     LOCK(cs_main);\n     return ::ChainActive().Tip()->GetBlockHash().GetHex();\n@@ -216,8 +212,6 @@ void RPCNotifyBlockChange(bool ibd, const CBlockIndex * pindex)\n \n static UniValue waitfornewblock(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() > 1)\n-        throw std::runtime_error(\n             RPCHelpMan{\"waitfornewblock\",\n                 \"\\nWaits for a specific new block and returns useful info about it.\\n\"\n                 \"\\nReturns the current block on timeout or exit.\\n\",\n@@ -234,7 +228,7 @@ static UniValue waitfornewblock(const JSONRPCRequest& request)\n                     HelpExampleCli(\"waitfornewblock\", \"1000\")\n             + HelpExampleRpc(\"waitfornewblock\", \"1000\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n     int timeout = 0;\n     if (!request.params[0].isNull())\n         timeout = request.params[0].get_int();\n@@ -257,8 +251,6 @@ static UniValue waitfornewblock(const JSONRPCRequest& request)\n \n static UniValue waitforblock(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n             RPCHelpMan{\"waitforblock\",\n                 \"\\nWaits for a specific new block and returns useful info about it.\\n\"\n                 \"\\nReturns the current block on timeout or exit.\\n\",\n@@ -276,7 +268,7 @@ static UniValue waitforblock(const JSONRPCRequest& request)\n                     HelpExampleCli(\"waitforblock\", \"\\\"0000000000079f8ef3d2c688c244eb7a4570b24c9ed7b4a8c619eb02596f8862\\\", 1000\")\n             + HelpExampleRpc(\"waitforblock\", \"\\\"0000000000079f8ef3d2c688c244eb7a4570b24c9ed7b4a8c619eb02596f8862\\\", 1000\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n     int timeout = 0;\n \n     uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n@@ -302,8 +294,6 @@ static UniValue waitforblock(const JSONRPCRequest& request)\n \n static UniValue waitforblockheight(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n             RPCHelpMan{\"waitforblockheight\",\n                 \"\\nWaits for (at least) block height and returns the height and hash\\n\"\n                 \"of the current tip.\\n\"\n@@ -322,7 +312,7 @@ static UniValue waitforblockheight(const JSONRPCRequest& request)\n                     HelpExampleCli(\"waitforblockheight\", \"\\\"100\\\", 1000\")\n             + HelpExampleRpc(\"waitforblockheight\", \"\\\"100\\\", 1000\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n     int timeout = 0;\n \n     int height = request.params[0].get_int();\n@@ -347,8 +337,6 @@ static UniValue waitforblockheight(const JSONRPCRequest& request)\n \n static UniValue syncwithvalidationinterfacequeue(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() > 0) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"syncwithvalidationinterfacequeue\",\n                 \"\\nWaits for the validation interface queue to catch up on everything that was there when we entered this function.\\n\",\n                 {},\n@@ -357,16 +345,14 @@ static UniValue syncwithvalidationinterfacequeue(const JSONRPCRequest& request)\n                     HelpExampleCli(\"syncwithvalidationinterfacequeue\",\"\")\n             + HelpExampleRpc(\"syncwithvalidationinterfacequeue\",\"\")\n                 },\n-            }.ToString());\n-    }\n+            }.Check(request);\n+\n     SyncWithValidationInterfaceQueue();\n     return NullUniValue;\n }\n \n static UniValue getdifficulty(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n             RPCHelpMan{\"getdifficulty\",\n                 \"\\nReturns the proof-of-work difficulty as a multiple of the minimum difficulty.\\n\",\n                 {},\n@@ -377,7 +363,7 @@ static UniValue getdifficulty(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getdifficulty\", \"\")\n             + HelpExampleRpc(\"getdifficulty\", \"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     LOCK(cs_main);\n     return GetDifficulty(::ChainActive().Tip());\n@@ -388,6 +374,7 @@ static std::string EntryDescriptionString()\n     return \"    \\\"vsize\\\" : n,            (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.\\n\"\n            \"    \\\"size\\\" : n,             (numeric) (DEPRECATED) same as vsize. Only returned if bitcoind is started with -deprecatedrpc=size\\n\"\n            \"                              size will be completely removed in v0.20.\\n\"\n+           \"    \\\"weight\\\" : n,           (numeric) transaction weight as defined in BIP 141.\\n\"\n            \"    \\\"fee\\\" : n,              (numeric) transaction fee in \" + CURRENCY_UNIT + \" (DEPRECATED)\\n\"\n            \"    \\\"modifiedfee\\\" : n,      (numeric) transaction fee with fee deltas used for mining priority (DEPRECATED)\\n\"\n            \"    \\\"time\\\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT\\n\"\n@@ -427,6 +414,7 @@ static void entryToJSON(const CTxMemPool& pool, UniValue& info, const CTxMemPool\n \n     info.pushKV(\"vsize\", (int)e.GetTxSize());\n     if (IsDeprecatedRPCEnabled(\"size\")) info.pushKV(\"size\", (int)e.GetTxSize());\n+    info.pushKV(\"weight\", (int)e.GetTxWeight());\n     info.pushKV(\"fee\", ValueFromAmount(e.GetFee()));\n     info.pushKV(\"modifiedfee\", ValueFromAmount(e.GetModifiedFee()));\n     info.pushKV(\"time\", e.GetTime());\n@@ -504,8 +492,6 @@ UniValue MempoolToJSON(const CTxMemPool& pool, bool verbose)\n \n static UniValue getrawmempool(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() > 1)\n-        throw std::runtime_error(\n             RPCHelpMan{\"getrawmempool\",\n                 \"\\nReturns all transaction ids in memory pool as a json array of string transaction ids.\\n\"\n                 \"\\nHint: use getmempoolentry to fetch a specific transaction from the mempool.\\n\",\n@@ -528,7 +514,7 @@ static UniValue getrawmempool(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getrawmempool\", \"true\")\n             + HelpExampleRpc(\"getrawmempool\", \"true\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     bool fVerbose = false;\n     if (!request.params[0].isNull())\n@@ -539,8 +525,6 @@ static UniValue getrawmempool(const JSONRPCRequest& request)\n \n static UniValue getmempoolancestors(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"getmempoolancestors\",\n                 \"\\nIf txid is in the mempool, returns all in-mempool ancestors.\\n\",\n                 {\n@@ -566,8 +550,7 @@ static UniValue getmempoolancestors(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getmempoolancestors\", \"\\\"mytxid\\\"\")\n             + HelpExampleRpc(\"getmempoolancestors\", \"\\\"mytxid\\\"\")\n                 },\n-            }.ToString());\n-    }\n+            }.Check(request);\n \n     bool fVerbose = false;\n     if (!request.params[1].isNull())\n@@ -609,8 +592,6 @@ static UniValue getmempoolancestors(const JSONRPCRequest& request)\n \n static UniValue getmempooldescendants(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"getmempooldescendants\",\n                 \"\\nIf txid is in the mempool, returns all in-mempool descendants.\\n\",\n                 {\n@@ -636,8 +617,7 @@ static UniValue getmempooldescendants(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getmempooldescendants\", \"\\\"mytxid\\\"\")\n             + HelpExampleRpc(\"getmempooldescendants\", \"\\\"mytxid\\\"\")\n                 },\n-            }.ToString());\n-    }\n+            }.Check(request);\n \n     bool fVerbose = false;\n     if (!request.params[1].isNull())\n@@ -679,8 +659,6 @@ static UniValue getmempooldescendants(const JSONRPCRequest& request)\n \n static UniValue getmempoolentry(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 1) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"getmempoolentry\",\n                 \"\\nReturns mempool data for given transaction\\n\",\n                 {\n@@ -695,8 +673,7 @@ static UniValue getmempoolentry(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getmempoolentry\", \"\\\"mytxid\\\"\")\n             + HelpExampleRpc(\"getmempoolentry\", \"\\\"mytxid\\\"\")\n                 },\n-            }.ToString());\n-    }\n+            }.Check(request);\n \n     uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n \n@@ -715,8 +692,6 @@ static UniValue getmempoolentry(const JSONRPCRequest& request)\n \n static UniValue getblockhash(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n             RPCHelpMan{\"getblockhash\",\n                 \"\\nReturns hash of block in best-block-chain at height provided.\\n\",\n                 {\n@@ -729,7 +704,7 @@ static UniValue getblockhash(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getblockhash\", \"1000\")\n             + HelpExampleRpc(\"getblockhash\", \"1000\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     LOCK(cs_main);\n \n@@ -743,8 +718,6 @@ static UniValue getblockhash(const JSONRPCRequest& request)\n \n static UniValue getblockheader(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n             RPCHelpMan{\"getblockheader\",\n                 \"\\nIf verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'.\\n\"\n                 \"If verbose is true, returns an Object with information about blockheader <hash>.\\n\",\n@@ -780,7 +753,7 @@ static UniValue getblockheader(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getblockheader\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n             + HelpExampleRpc(\"getblockheader\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     uint256 hash(ParseHashV(request.params[0], \"hash\"));\n \n@@ -846,7 +819,7 @@ static CBlockUndo GetUndoChecked(const CBlockIndex* pblockindex)\n \n static UniValue getblock(const JSONRPCRequest& request)\n {\n-    const RPCHelpMan help{\"getblock\",\n+    RPCHelpMan{\"getblock\",\n                 \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'hash'.\\n\"\n                 \"If verbosity is 1, returns an Object with information about block <hash>.\\n\"\n                 \"If verbosity is 2, returns an Object with information about block <hash> and information about each transaction. \\n\",\n@@ -898,11 +871,7 @@ static UniValue getblock(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getblock\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n             + HelpExampleRpc(\"getblock\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n                 },\n-    };\n-\n-    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n-        throw std::runtime_error(help.ToString());\n-    }\n+    }.Check(request);\n \n     uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n \n@@ -1013,8 +982,6 @@ static bool GetUTXOStats(CCoinsView *view, CCoinsStats &stats)\n \n static UniValue pruneblockchain(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n             RPCHelpMan{\"pruneblockchain\", \"\",\n                 {\n                     {\"height\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height to prune up to. May be set to a discrete height, or a unix timestamp\\n\"\n@@ -1027,7 +994,7 @@ static UniValue pruneblockchain(const JSONRPCRequest& request)\n                     HelpExampleCli(\"pruneblockchain\", \"1000\")\n             + HelpExampleRpc(\"pruneblockchain\", \"1000\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     if (!fPruneMode)\n         throw JSONRPCError(RPC_MISC_ERROR, \"Cannot prune blocks because node is not in prune mode.\");\n@@ -1071,8 +1038,6 @@ static UniValue pruneblockchain(const JSONRPCRequest& request)\n \n static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n             RPCHelpMan{\"gettxoutsetinfo\",\n                 \"\\nReturns statistics about the unspent transaction output set.\\n\"\n                 \"Note this call may take some time.\\n\",\n@@ -1093,13 +1058,15 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n                     HelpExampleCli(\"gettxoutsetinfo\", \"\")\n             + HelpExampleRpc(\"gettxoutsetinfo\", \"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     UniValue ret(UniValue::VOBJ);\n \n     CCoinsStats stats;\n     ::ChainstateActive().ForceFlushStateToDisk();\n-    if (GetUTXOStats(pcoinsdbview.get(), stats)) {\n+\n+    CCoinsView* coins_view = WITH_LOCK(cs_main, return &ChainstateActive().CoinsDB());\n+    if (GetUTXOStats(coins_view, stats)) {\n         ret.pushKV(\"height\", (int64_t)stats.nHeight);\n         ret.pushKV(\"bestblock\", stats.hashBlock.GetHex());\n         ret.pushKV(\"transactions\", (int64_t)stats.nTransactions);\n@@ -1116,8 +1083,6 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n \n UniValue gettxout(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n-        throw std::runtime_error(\n             RPCHelpMan{\"gettxout\",\n                 \"\\nReturns details about an unspent transaction output.\\n\",\n                 {\n@@ -1151,7 +1116,7 @@ UniValue gettxout(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"gettxout\", \"\\\"txid\\\", 1\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     LOCK(cs_main);\n \n@@ -1165,19 +1130,21 @@ UniValue gettxout(const JSONRPCRequest& request)\n         fMempool = request.params[2].get_bool();\n \n     Coin coin;\n+    CCoinsViewCache* coins_view = &::ChainstateActive().CoinsTip();\n+\n     if (fMempool) {\n         LOCK(mempool.cs);\n-        CCoinsViewMemPool view(pcoinsTip.get(), mempool);\n+        CCoinsViewMemPool view(coins_view, mempool);\n         if (!view.GetCoin(out, coin) || mempool.isSpent(out)) {\n             return NullUniValue;\n         }\n     } else {\n-        if (!pcoinsTip->GetCoin(out, coin)) {\n+        if (!coins_view->GetCoin(out, coin)) {\n             return NullUniValue;\n         }\n     }\n \n-    const CBlockIndex* pindex = LookupBlockIndex(pcoinsTip->GetBestBlock());\n+    const CBlockIndex* pindex = LookupBlockIndex(coins_view->GetBestBlock());\n     ret.pushKV(\"bestblock\", pindex->GetBlockHash().GetHex());\n     if (coin.nHeight == MEMPOOL_HEIGHT) {\n         ret.pushKV(\"confirmations\", 0);\n@@ -1197,8 +1164,6 @@ static UniValue verifychain(const JSONRPCRequest& request)\n {\n     int nCheckLevel = gArgs.GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL);\n     int nCheckDepth = gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS);\n-    if (request.fHelp || request.params.size() > 2)\n-        throw std::runtime_error(\n             RPCHelpMan{\"verifychain\",\n                 \"\\nVerifies blockchain database.\\n\",\n                 {\n@@ -1212,7 +1177,7 @@ static UniValue verifychain(const JSONRPCRequest& request)\n                     HelpExampleCli(\"verifychain\", \"\")\n             + HelpExampleRpc(\"verifychain\", \"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     LOCK(cs_main);\n \n@@ -1221,57 +1186,53 @@ static UniValue verifychain(const JSONRPCRequest& request)\n     if (!request.params[1].isNull())\n         nCheckDepth = request.params[1].get_int();\n \n-    return CVerifyDB().VerifyDB(Params(), pcoinsTip.get(), nCheckLevel, nCheckDepth);\n+    return CVerifyDB().VerifyDB(\n+        Params(), &::ChainstateActive().CoinsTip(), nCheckLevel, nCheckDepth);\n }\n \n-/** Implementation of IsSuperMajority with better feedback */\n-static UniValue SoftForkMajorityDesc(int version, const CBlockIndex* pindex, const Consensus::Params& consensusParams)\n+static void BuriedForkDescPushBack(UniValue& softforks, const std::string &name, int height) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n-    UniValue rv(UniValue::VOBJ);\n-    bool activated = false;\n-    switch(version)\n-    {\n-        case 2:\n-            activated = pindex->nHeight >= consensusParams.BIP34Height;\n-            break;\n-        case 3:\n-            activated = pindex->nHeight >= consensusParams.BIP66Height;\n-            break;\n-        case 4:\n-            activated = pindex->nHeight >= consensusParams.BIP65Height;\n-            break;\n-    }\n-    rv.pushKV(\"status\", activated);\n-    return rv;\n-}\n+    // For buried deployments.\n+    // A buried deployment is one where the height of the activation has been hardcoded into\n+    // the client implementation long after the consensus change has activated. See BIP 90.\n+    // Buried deployments with activation height value of\n+    // std::numeric_limits<int>::max() are disabled and thus hidden.\n+    if (height == std::numeric_limits<int>::max()) return;\n \n-static UniValue SoftForkDesc(const std::string &name, int version, const CBlockIndex* pindex, const Consensus::Params& consensusParams)\n-{\n     UniValue rv(UniValue::VOBJ);\n-    rv.pushKV(\"id\", name);\n-    rv.pushKV(\"version\", version);\n-    rv.pushKV(\"reject\", SoftForkMajorityDesc(version, pindex, consensusParams));\n-    return rv;\n+    rv.pushKV(\"type\", \"buried\");\n+    // getblockchaininfo reports the softfork as active from when the chain height is\n+    // one below the activation height\n+    rv.pushKV(\"active\", ::ChainActive().Tip()->nHeight + 1 >= height);\n+    rv.pushKV(\"height\", height);\n+    softforks.pushKV(name, rv);\n }\n \n-static UniValue BIP9SoftForkDesc(const Consensus::Params& consensusParams, Consensus::DeploymentPos id)\n+static void BIP9SoftForkDescPushBack(UniValue& softforks, const std::string &name, const Consensus::Params& consensusParams, Consensus::DeploymentPos id) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n-    UniValue rv(UniValue::VOBJ);\n+    // For BIP9 deployments.\n+    // Deployments (e.g. testdummy) with timeout value before Jan 1, 2009 are hidden.\n+    // A timeout value of 0 guarantees a softfork will never be activated.\n+    // This is used when merging logic to implement a proposed softfork without a specified deployment schedule.\n+    if (consensusParams.vDeployments[id].nTimeout <= 1230768000) return;\n+\n+    UniValue bip9(UniValue::VOBJ);\n     const ThresholdState thresholdState = VersionBitsTipState(consensusParams, id);\n     switch (thresholdState) {\n-    case ThresholdState::DEFINED: rv.pushKV(\"status\", \"defined\"); break;\n-    case ThresholdState::STARTED: rv.pushKV(\"status\", \"started\"); break;\n-    case ThresholdState::LOCKED_IN: rv.pushKV(\"status\", \"locked_in\"); break;\n-    case ThresholdState::ACTIVE: rv.pushKV(\"status\", \"active\"); break;\n-    case ThresholdState::FAILED: rv.pushKV(\"status\", \"failed\"); break;\n+    case ThresholdState::DEFINED: bip9.pushKV(\"status\", \"defined\"); break;\n+    case ThresholdState::STARTED: bip9.pushKV(\"status\", \"started\"); break;\n+    case ThresholdState::LOCKED_IN: bip9.pushKV(\"status\", \"locked_in\"); break;\n+    case ThresholdState::ACTIVE: bip9.pushKV(\"status\", \"active\"); break;\n+    case ThresholdState::FAILED: bip9.pushKV(\"status\", \"failed\"); break;\n     }\n     if (ThresholdState::STARTED == thresholdState)\n     {\n-        rv.pushKV(\"bit\", consensusParams.vDeployments[id].bit);\n+        bip9.pushKV(\"bit\", consensusParams.vDeployments[id].bit);\n     }\n-    rv.pushKV(\"startTime\", consensusParams.vDeployments[id].nStartTime);\n-    rv.pushKV(\"timeout\", consensusParams.vDeployments[id].nTimeout);\n-    rv.pushKV(\"since\", VersionBitsTipStateSinceHeight(consensusParams, id));\n+    bip9.pushKV(\"startTime\", consensusParams.vDeployments[id].nStartTime);\n+    bip9.pushKV(\"timeout\", consensusParams.vDeployments[id].nTimeout);\n+    int64_t since_height = VersionBitsTipStateSinceHeight(consensusParams, id);\n+    bip9.pushKV(\"since\", since_height);\n     if (ThresholdState::STARTED == thresholdState)\n     {\n         UniValue statsUV(UniValue::VOBJ);\n@@ -1281,31 +1242,29 @@ static UniValue BIP9SoftForkDesc(const Consensus::Params& consensusParams, Conse\n         statsUV.pushKV(\"elapsed\", statsStruct.elapsed);\n         statsUV.pushKV(\"count\", statsStruct.count);\n         statsUV.pushKV(\"possible\", statsStruct.possible);\n-        rv.pushKV(\"statistics\", statsUV);\n+        bip9.pushKV(\"statistics\", statsUV);\n     }\n-    return rv;\n-}\n \n-static void BIP9SoftForkDescPushBack(UniValue& bip9_softforks, const Consensus::Params& consensusParams, Consensus::DeploymentPos id)\n-{\n-    // Deployments with timeout value of 0 are hidden.\n-    // A timeout value of 0 guarantees a softfork will never be activated.\n-    // This is used when softfork codes are merged without specifying the deployment schedule.\n-    if (consensusParams.vDeployments[id].nTimeout > 0)\n-        bip9_softforks.pushKV(VersionBitsDeploymentInfo[id].name, BIP9SoftForkDesc(consensusParams, id));\n+    UniValue rv(UniValue::VOBJ);\n+    rv.pushKV(\"type\", \"bip9\");\n+    rv.pushKV(\"bip9\", bip9);\n+    if (ThresholdState::ACTIVE == thresholdState) {\n+        rv.pushKV(\"height\", since_height);\n+    }\n+    rv.pushKV(\"active\", ThresholdState::ACTIVE == thresholdState);\n+\n+    softforks.pushKV(name, rv);\n }\n \n UniValue getblockchaininfo(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n             RPCHelpMan{\"getblockchaininfo\",\n                 \"Returns an object containing various state info regarding blockchain processing.\\n\",\n                 {},\n                 RPCResult{\n             \"{\\n\"\n             \"  \\\"chain\\\": \\\"xxxx\\\",              (string) current network name as defined in BIP70 (main, test, regtest)\\n\"\n-            \"  \\\"blocks\\\": xxxxxx,             (numeric) the current number of blocks processed in the server\\n\"\n+            \"  \\\"blocks\\\": xxxxxx,             (numeric) the height of the most-work fully-validated chain. The genesis block has height 0\\n\"\n             \"  \\\"headers\\\": xxxxxx,            (numeric) the current number of headers we have validated\\n\"\n             \"  \\\"bestblockhash\\\": \\\"...\\\",       (string) the hash of the currently best block\\n\"\n             \"  \\\"difficulty\\\": xxxxxx,         (numeric) the current difficulty\\n\"\n@@ -1318,29 +1277,25 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n             \"  \\\"pruneheight\\\": xxxxxx,        (numeric) lowest-height complete block stored (only present if pruning is enabled)\\n\"\n             \"  \\\"automatic_pruning\\\": xx,      (boolean) whether automatic pruning is enabled (only present if pruning is enabled)\\n\"\n             \"  \\\"prune_target_size\\\": xxxxxx,  (numeric) the target size used by pruning (only present if automatic pruning is enabled)\\n\"\n-            \"  \\\"softforks\\\": [                (array) status of softforks in progress\\n\"\n-            \"     {\\n\"\n-            \"        \\\"id\\\": \\\"xxxx\\\",           (string) name of softfork\\n\"\n-            \"        \\\"version\\\": xx,          (numeric) block version\\n\"\n-            \"        \\\"reject\\\": {             (object) progress toward rejecting pre-softfork blocks\\n\"\n-            \"           \\\"status\\\": xx,        (boolean) true if threshold reached\\n\"\n-            \"        },\\n\"\n-            \"     }, ...\\n\"\n-            \"  ],\\n\"\n-            \"  \\\"bip9_softforks\\\": {           (object) status of BIP9 softforks in progress\\n\"\n+            \"  \\\"softforks\\\": {                (object) status of softforks\\n\"\n             \"     \\\"xxxx\\\" : {                 (string) name of the softfork\\n\"\n-            \"        \\\"status\\\": \\\"xxxx\\\",       (string) one of \\\"defined\\\", \\\"started\\\", \\\"locked_in\\\", \\\"active\\\", \\\"failed\\\"\\n\"\n-            \"        \\\"bit\\\": xx,              (numeric) the bit (0-28) in the block version field used to signal this softfork (only for \\\"started\\\" status)\\n\"\n-            \"        \\\"startTime\\\": xx,        (numeric) the minimum median time past of a block at which the bit gains its meaning\\n\"\n-            \"        \\\"timeout\\\": xx,          (numeric) the median time past of a block at which the deployment is considered failed if not yet locked in\\n\"\n-            \"        \\\"since\\\": xx,            (numeric) height of the first block to which the status applies\\n\"\n-            \"        \\\"statistics\\\": {         (object) numeric statistics about BIP9 signalling for a softfork (only for \\\"started\\\" status)\\n\"\n-            \"           \\\"period\\\": xx,        (numeric) the length in blocks of the BIP9 signalling period \\n\"\n-            \"           \\\"threshold\\\": xx,     (numeric) the number of blocks with the version bit set required to activate the feature \\n\"\n-            \"           \\\"elapsed\\\": xx,       (numeric) the number of blocks elapsed since the beginning of the current period \\n\"\n-            \"           \\\"count\\\": xx,         (numeric) the number of blocks with the version bit set in the current period \\n\"\n-            \"           \\\"possible\\\": xx       (boolean) returns false if there are not enough blocks left in this period to pass activation threshold \\n\"\n-            \"        }\\n\"\n+            \"        \\\"type\\\": \\\"xxxx\\\",         (string) one of \\\"buried\\\", \\\"bip9\\\"\\n\"\n+            \"        \\\"bip9\\\": {               (object) status of bip9 softforks (only for \\\"bip9\\\" type)\\n\"\n+            \"           \\\"status\\\": \\\"xxxx\\\",    (string) one of \\\"defined\\\", \\\"started\\\", \\\"locked_in\\\", \\\"active\\\", \\\"failed\\\"\\n\"\n+            \"           \\\"bit\\\": xx,           (numeric) the bit (0-28) in the block version field used to signal this softfork (only for \\\"started\\\" status)\\n\"\n+            \"           \\\"startTime\\\": xx,     (numeric) the minimum median time past of a block at which the bit gains its meaning\\n\"\n+            \"           \\\"timeout\\\": xx,       (numeric) the median time past of a block at which the deployment is considered failed if not yet locked in\\n\"\n+            \"           \\\"since\\\": xx,         (numeric) height of the first block to which the status applies\\n\"\n+            \"           \\\"statistics\\\": {      (object) numeric statistics about BIP9 signalling for a softfork\\n\"\n+            \"              \\\"period\\\": xx,     (numeric) the length in blocks of the BIP9 signalling period \\n\"\n+            \"              \\\"threshold\\\": xx,  (numeric) the number of blocks with the version bit set required to activate the feature \\n\"\n+            \"              \\\"elapsed\\\": xx,    (numeric) the number of blocks elapsed since the beginning of the current period \\n\"\n+            \"              \\\"count\\\": xx,      (numeric) the number of blocks with the version bit set in the current period \\n\"\n+            \"              \\\"possible\\\": xx    (boolean) returns false if there are not enough blocks left in this period to pass activation threshold \\n\"\n+            \"           }\\n\"\n+            \"        },\\n\"\n+            \"        \\\"height\\\": \\\"xxxxxx\\\",     (numeric) height of the first block which the rules are or will be enforced (only for \\\"buried\\\" type, or \\\"bip9\\\" type with \\\"active\\\" status)\\n\"\n+            \"        \\\"active\\\": xx,           (boolean) true if the rules are enforced for the mempool and the next block\\n\"\n             \"     }\\n\"\n             \"  }\\n\"\n             \"  \\\"warnings\\\" : \\\"...\\\",           (string) any network and blockchain warnings.\\n\"\n@@ -1350,7 +1305,7 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getblockchaininfo\", \"\")\n             + HelpExampleRpc(\"getblockchaininfo\", \"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     LOCK(cs_main);\n \n@@ -1385,16 +1340,14 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n     }\n \n     const Consensus::Params& consensusParams = Params().GetConsensus();\n-    UniValue softforks(UniValue::VARR);\n-    UniValue bip9_softforks(UniValue::VOBJ);\n-    softforks.push_back(SoftForkDesc(\"bip34\", 2, tip, consensusParams));\n-    softforks.push_back(SoftForkDesc(\"bip66\", 3, tip, consensusParams));\n-    softforks.push_back(SoftForkDesc(\"bip65\", 4, tip, consensusParams));\n-    for (int pos = Consensus::DEPLOYMENT_CSV; pos != Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++pos) {\n-        BIP9SoftForkDescPushBack(bip9_softforks, consensusParams, static_cast<Consensus::DeploymentPos>(pos));\n-    }\n+    UniValue softforks(UniValue::VOBJ);\n+    BuriedForkDescPushBack(softforks, \"bip34\", consensusParams.BIP34Height);\n+    BuriedForkDescPushBack(softforks, \"bip66\", consensusParams.BIP66Height);\n+    BuriedForkDescPushBack(softforks, \"bip65\", consensusParams.BIP65Height);\n+    BuriedForkDescPushBack(softforks, \"csv\", consensusParams.CSVHeight);\n+    BuriedForkDescPushBack(softforks, \"segwit\", consensusParams.SegwitHeight);\n+    BIP9SoftForkDescPushBack(softforks, \"testdummy\", consensusParams, Consensus::DEPLOYMENT_TESTDUMMY);\n     obj.pushKV(\"softforks\",             softforks);\n-    obj.pushKV(\"bip9_softforks\", bip9_softforks);\n \n     obj.pushKV(\"warnings\", GetWarnings(\"statusbar\"));\n     return obj;\n@@ -1417,8 +1370,6 @@ struct CompareBlocksByHeight\n \n static UniValue getchaintips(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n             RPCHelpMan{\"getchaintips\",\n                 \"Return information about all known tips in the block tree,\"\n                 \" including the main chain as well as orphaned branches.\\n\",\n@@ -1449,22 +1400,22 @@ static UniValue getchaintips(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getchaintips\", \"\")\n             + HelpExampleRpc(\"getchaintips\", \"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     LOCK(cs_main);\n \n     /*\n      * Idea:  the set of chain tips is ::ChainActive().tip, plus orphan blocks which do not have another orphan building off of them.\n      * Algorithm:\n-     *  - Make one pass through mapBlockIndex, picking out the orphan blocks, and also storing a set of the orphan block's pprev pointers.\n+     *  - Make one pass through g_blockman.m_block_index, picking out the orphan blocks, and also storing a set of the orphan block's pprev pointers.\n      *  - Iterate through the orphan blocks. If the block isn't pointed to by another orphan, it is a chain tip.\n      *  - add ::ChainActive().Tip()\n      */\n     std::set<const CBlockIndex*, CompareBlocksByHeight> setTips;\n     std::set<const CBlockIndex*> setOrphans;\n     std::set<const CBlockIndex*> setPrevs;\n \n-    for (const std::pair<const uint256, CBlockIndex*>& item : mapBlockIndex)\n+    for (const std::pair<const uint256, CBlockIndex*>& item : ::BlockIndex())\n     {\n         if (!::ChainActive().Contains(item.second)) {\n             setOrphans.insert(item.second);\n@@ -1540,8 +1491,6 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n \n static UniValue getmempoolinfo(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n             RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n                 {},\n@@ -1560,15 +1509,13 @@ static UniValue getmempoolinfo(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getmempoolinfo\", \"\")\n             + HelpExampleRpc(\"getmempoolinfo\", \"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     return MempoolInfoToJSON(::mempool);\n }\n \n static UniValue preciousblock(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n             RPCHelpMan{\"preciousblock\",\n                 \"\\nTreats a block as if it were received before others with the same work.\\n\"\n                 \"\\nA later preciousblock call can override the effect of an earlier one.\\n\"\n@@ -1581,7 +1528,7 @@ static UniValue preciousblock(const JSONRPCRequest& request)\n                     HelpExampleCli(\"preciousblock\", \"\\\"blockhash\\\"\")\n             + HelpExampleRpc(\"preciousblock\", \"\\\"blockhash\\\"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n     CBlockIndex* pblockindex;\n@@ -1606,8 +1553,6 @@ static UniValue preciousblock(const JSONRPCRequest& request)\n \n static UniValue invalidateblock(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n             RPCHelpMan{\"invalidateblock\",\n                 \"\\nPermanently marks a block as invalid, as if it violated a consensus rule.\\n\",\n                 {\n@@ -1618,7 +1563,7 @@ static UniValue invalidateblock(const JSONRPCRequest& request)\n                     HelpExampleCli(\"invalidateblock\", \"\\\"blockhash\\\"\")\n             + HelpExampleRpc(\"invalidateblock\", \"\\\"blockhash\\\"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n     CValidationState state;\n@@ -1646,8 +1591,6 @@ static UniValue invalidateblock(const JSONRPCRequest& request)\n \n static UniValue reconsiderblock(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n             RPCHelpMan{\"reconsiderblock\",\n                 \"\\nRemoves invalidity status of a block, its ancestors and its descendants, reconsider them for activation.\\n\"\n                 \"This can be used to undo the effects of invalidateblock.\\n\",\n@@ -1659,7 +1602,7 @@ static UniValue reconsiderblock(const JSONRPCRequest& request)\n                     HelpExampleCli(\"reconsiderblock\", \"\\\"blockhash\\\"\")\n             + HelpExampleRpc(\"reconsiderblock\", \"\\\"blockhash\\\"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n \n@@ -1685,8 +1628,6 @@ static UniValue reconsiderblock(const JSONRPCRequest& request)\n \n static UniValue getchaintxstats(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() > 2)\n-        throw std::runtime_error(\n             RPCHelpMan{\"getchaintxstats\",\n                 \"\\nCompute statistics about the total number and rate of transactions in the chain.\\n\",\n                 {\n@@ -1708,7 +1649,7 @@ static UniValue getchaintxstats(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getchaintxstats\", \"\")\n             + HelpExampleRpc(\"getchaintxstats\", \"2016\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     const CBlockIndex* pindex;\n     int blockcount = 30 * 24 * 60 * 60 / Params().GetConsensus().nPowTargetSpacing; // By default: 1 month\n@@ -1818,7 +1759,7 @@ static constexpr size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t)\n \n static UniValue getblockstats(const JSONRPCRequest& request)\n {\n-    const RPCHelpMan help{\"getblockstats\",\n+    RPCHelpMan{\"getblockstats\",\n                 \"\\nCompute per block statistics for a given window. All amounts are in satoshis.\\n\"\n                 \"It won't work for some heights with pruning.\\n\",\n                 {\n@@ -1873,10 +1814,7 @@ static UniValue getblockstats(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getblockstats\", \"1000 '[\\\"minfeerate\\\",\\\"avgfeerate\\\"]'\")\n             + HelpExampleRpc(\"getblockstats\", \"1000 '[\\\"minfeerate\\\",\\\"avgfeerate\\\"]'\")\n                 },\n-    };\n-    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n-        throw std::runtime_error(help.ToString());\n-    }\n+    }.Check(request);\n \n     LOCK(cs_main);\n \n@@ -2077,8 +2015,6 @@ static UniValue getblockstats(const JSONRPCRequest& request)\n \n static UniValue savemempool(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 0) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"savemempool\",\n                 \"\\nDumps the mempool to disk. It will fail until the previous dump is fully loaded.\\n\",\n                 {},\n@@ -2087,8 +2023,7 @@ static UniValue savemempool(const JSONRPCRequest& request)\n                     HelpExampleCli(\"savemempool\", \"\")\n             + HelpExampleRpc(\"savemempool\", \"\")\n                 },\n-            }.ToString());\n-    }\n+            }.Check(request);\n \n     if (!::mempool.IsLoaded()) {\n         throw JSONRPCError(RPC_MISC_ERROR, \"The mempool was not loaded yet\");\n@@ -2163,8 +2098,6 @@ class CoinsViewScanReserver\n \n UniValue scantxoutset(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n             RPCHelpMan{\"scantxoutset\",\n                 \"\\nEXPERIMENTAL warning: this call may be removed or changed in future releases.\\n\"\n                 \"\\nScans the unspent transaction output set for entries that match certain output descriptors.\\n\"\n@@ -2213,8 +2146,7 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n             \"]\\n\"\n                 },\n                 RPCExamples{\"\"},\n-            }.ToString()\n-        );\n+            }.Check(request);\n \n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR});\n \n@@ -2247,41 +2179,12 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n \n         // loop through the scan objects\n         for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n-            std::string desc_str;\n-            std::pair<int64_t, int64_t> range = {0, 1000};\n-            if (scanobject.isStr()) {\n-                desc_str = scanobject.get_str();\n-            } else if (scanobject.isObject()) {\n-                UniValue desc_uni = find_value(scanobject, \"desc\");\n-                if (desc_uni.isNull()) throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor needs to be provided in scan object\");\n-                desc_str = desc_uni.get_str();\n-                UniValue range_uni = find_value(scanobject, \"range\");\n-                if (!range_uni.isNull()) {\n-                    range = ParseDescriptorRange(range_uni);\n-                }\n-            } else {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan object needs to be either a string or an object\");\n-            }\n-\n             FlatSigningProvider provider;\n-            auto desc = Parse(desc_str, provider);\n-            if (!desc) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Invalid descriptor '%s'\", desc_str));\n-            }\n-            if (!desc->IsRange()) {\n-                range.first = 0;\n-                range.second = 0;\n-            }\n-            for (int i = range.first; i <= range.second; ++i) {\n-                std::vector<CScript> scripts;\n-                if (!desc->Expand(i, provider, scripts, provider)) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Cannot derive script without private keys: '%s'\", desc_str));\n-                }\n-                for (const auto& script : scripts) {\n-                    std::string inferred = InferDescriptor(script, provider)->ToString();\n-                    needles.emplace(script);\n-                    descriptors.emplace(std::move(script), std::move(inferred));\n-                }\n+            auto scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+            for (const auto& script : scripts) {\n+                std::string inferred = InferDescriptor(script, provider)->ToString();\n+                needles.emplace(script);\n+                descriptors.emplace(std::move(script), std::move(inferred));\n             }\n         }\n \n@@ -2296,7 +2199,7 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n         {\n             LOCK(cs_main);\n             ::ChainstateActive().ForceFlushStateToDisk();\n-            pcursor = std::unique_ptr<CCoinsViewCursor>(pcoinsdbview->Cursor());\n+            pcursor = std::unique_ptr<CCoinsViewCursor>(::ChainstateActive().CoinsDB().Cursor());\n             assert(pcursor);\n         }\n         bool res = FindScriptPubKey(g_scan_progress, g_should_abort_scan, count, pcursor.get(), needles, coins);\n@@ -2330,8 +2233,6 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n \n static UniValue getblockfilter(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"getblockfilter\",\n                 \"\\nRetrieve a BIP 157 content filter for a particular block.\\n\",\n                 {\n@@ -2347,9 +2248,7 @@ static UniValue getblockfilter(const JSONRPCRequest& request)\n                 RPCExamples{\n                     HelpExampleCli(\"getblockfilter\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\" \\\"basic\\\"\")\n                 }\n-            }.ToString()\n-        );\n-    }\n+            }.Check(request);\n \n     uint256 block_hash = ParseHashV(request.params[0], \"blockhash\");\n     std::string filtertype_name = \"basic\";"
      },
      {
        "sha": "3cd661e067d9a01bda5f489f080acc45904af530",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -28,6 +28,7 @@ class CRPCConvertParam\n static const CRPCConvertParam vRPCConvertParams[] =\n {\n     { \"setmocktime\", 0, \"timestamp\" },\n+    { \"utxoupdatepsbt\", 1, \"descriptors\" },\n     { \"generatetoaddress\", 0, \"nblocks\" },\n     { \"generatetoaddress\", 2, \"maxtries\" },\n     { \"getnetworkhashps\", 0, \"nblocks\" },"
      },
      {
        "sha": "07c2958635be6bf70d5f7529142878680beb0798",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 40,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -78,8 +78,6 @@ static UniValue GetNetworkHashPS(int lookup, int height) {\n \n static UniValue getnetworkhashps(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() > 2)\n-        throw std::runtime_error(\n             RPCHelpMan{\"getnetworkhashps\",\n                 \"\\nReturns the estimated network hashes per second based on the last n blocks.\\n\"\n                 \"Pass in [blocks] to override # of blocks, -1 specifies since last difficulty change.\\n\"\n@@ -95,15 +93,14 @@ static UniValue getnetworkhashps(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getnetworkhashps\", \"\")\n             + HelpExampleRpc(\"getnetworkhashps\", \"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     LOCK(cs_main);\n     return GetNetworkHashPS(!request.params[0].isNull() ? request.params[0].get_int() : 120, !request.params[1].isNull() ? request.params[1].get_int() : -1);\n }\n \n static UniValue generateBlocks(const CScript& coinbase_script, int nGenerate, uint64_t nMaxTries)\n {\n-    static const int nInnerLoopCount = 0x10000;\n     int nHeightEnd = 0;\n     int nHeight = 0;\n \n@@ -124,14 +121,14 @@ static UniValue generateBlocks(const CScript& coinbase_script, int nGenerate, ui\n             LOCK(cs_main);\n             IncrementExtraNonce(pblock, ::ChainActive().Tip(), nExtraNonce);\n         }\n-        while (nMaxTries > 0 && pblock->nNonce < nInnerLoopCount && !CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus())) {\n+        while (nMaxTries > 0 && pblock->nNonce < std::numeric_limits<uint32_t>::max() && !CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()) && !ShutdownRequested()) {\n             ++pblock->nNonce;\n             --nMaxTries;\n         }\n-        if (nMaxTries == 0) {\n+        if (nMaxTries == 0 || ShutdownRequested()) {\n             break;\n         }\n-        if (pblock->nNonce == nInnerLoopCount) {\n+        if (pblock->nNonce == std::numeric_limits<uint32_t>::max()) {\n             continue;\n         }\n         std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(*pblock);\n@@ -145,8 +142,6 @@ static UniValue generateBlocks(const CScript& coinbase_script, int nGenerate, ui\n \n static UniValue generatetoaddress(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n-        throw std::runtime_error(\n             RPCHelpMan{\"generatetoaddress\",\n                 \"\\nMine blocks immediately to a specified address (before the RPC call returns)\\n\",\n                 {\n@@ -163,7 +158,7 @@ static UniValue generatetoaddress(const JSONRPCRequest& request)\n             + \"If you are running the bitcoin core wallet, you can get a new address to send the newly generated bitcoin to with:\\n\"\n             + HelpExampleCli(\"getnewaddress\", \"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     int nGenerate = request.params[0].get_int();\n     uint64_t nMaxTries = 1000000;\n@@ -183,8 +178,6 @@ static UniValue generatetoaddress(const JSONRPCRequest& request)\n \n static UniValue getmininginfo(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 0) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"getmininginfo\",\n                 \"\\nReturns a json object containing mining-related information.\",\n                 {},\n@@ -204,8 +197,7 @@ static UniValue getmininginfo(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getmininginfo\", \"\")\n             + HelpExampleRpc(\"getmininginfo\", \"\")\n                 },\n-            }.ToString());\n-    }\n+            }.Check(request);\n \n     LOCK(cs_main);\n \n@@ -225,8 +217,6 @@ static UniValue getmininginfo(const JSONRPCRequest& request)\n // NOTE: Unlike wallet RPC (which use BTC values), mining RPCs follow GBT (BIP 22) in using satoshi amounts\n static UniValue prioritisetransaction(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 3)\n-        throw std::runtime_error(\n             RPCHelpMan{\"prioritisetransaction\",\n                 \"Accepts the transaction into mined blocks at a higher (or lower) priority\\n\",\n                 {\n@@ -245,7 +235,7 @@ static UniValue prioritisetransaction(const JSONRPCRequest& request)\n                     HelpExampleCli(\"prioritisetransaction\", \"\\\"txid\\\" 0.0 10000\")\n             + HelpExampleRpc(\"prioritisetransaction\", \"\\\"txid\\\", 0.0, 10000\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     LOCK(cs_main);\n \n@@ -291,8 +281,6 @@ static std::string gbt_vb_name(const Consensus::DeploymentPos pos) {\n \n static UniValue getblocktemplate(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() > 1)\n-        throw std::runtime_error(\n             RPCHelpMan{\"getblocktemplate\",\n                 \"\\nIf the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.\\n\"\n                 \"It returns data needed to construct a block to work on.\\n\"\n@@ -302,7 +290,7 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n                 \"    https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes\\n\"\n                 \"    https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki\\n\",\n                 {\n-                    {\"template_request\", RPCArg::Type::OBJ, RPCArg::Optional::NO, \"A json object in the following spec\",\n+                    {\"template_request\", RPCArg::Type::OBJ, \"{}\", \"A json object in the following spec\",\n                         {\n                             {\"mode\", RPCArg::Type::STR, /* treat as named arg */ RPCArg::Optional::OMITTED_NAMED_ARG, \"This must be set to \\\"template\\\", \\\"proposal\\\" (see BIP 23), or omitted\"},\n                             {\"capabilities\", RPCArg::Type::ARR, /* treat as named arg */ RPCArg::Optional::OMITTED_NAMED_ARG, \"A list of strings\",\n@@ -364,10 +352,10 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n             \"}\\n\"\n                 },\n                 RPCExamples{\n-                    HelpExampleCli(\"getblocktemplate\", \"{\\\"rules\\\": [\\\"segwit\\\"]}\")\n+                    HelpExampleCli(\"getblocktemplate\", \"'{\\\"rules\\\": [\\\"segwit\\\"]}'\")\n             + HelpExampleRpc(\"getblocktemplate\", \"{\\\"rules\\\": [\\\"segwit\\\"]}\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     LOCK(cs_main);\n \n@@ -469,7 +457,7 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n             nTransactionsUpdatedLastLP = nTransactionsUpdatedLast;\n         }\n \n-        // Release the wallet and main lock while waiting\n+        // Release lock while waiting\n         LEAVE_CRITICAL_SECTION(cs_main);\n         {\n             checktxtime = std::chrono::steady_clock::now() + std::chrono::minutes(1);\n@@ -480,6 +468,7 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n                 if (g_best_block_cv.wait_until(lock, checktxtime) == std::cv_status::timeout)\n                 {\n                     // Timeout: Check transactions for update\n+                    // without holding ::mempool.cs to avoid deadlocks\n                     if (mempool.GetTransactionsUpdated() != nTransactionsUpdatedLastLP)\n                         break;\n                     checktxtime += std::chrono::seconds(10);\n@@ -493,9 +482,8 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n         // TODO: Maybe recheck connections/IBD and (if something wrong) send an expires-immediately template to stop miners?\n     }\n \n-    const struct VBDeploymentInfo& segwit_info = VersionBitsDeploymentInfo[Consensus::DEPLOYMENT_SEGWIT];\n     // GBT must be called with 'segwit' set in the rules\n-    if (setClientRules.count(segwit_info.name) != 1) {\n+    if (setClientRules.count(\"segwit\") != 1) {\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"getblocktemplate must be called with the segwit rule set (call with {\\\"rules\\\": [\\\"segwit\\\"]})\");\n     }\n \n@@ -532,7 +520,7 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n     pblock->nNonce = 0;\n \n     // NOTE: If at some point we support pre-segwit miners post-segwit-activation, this needs to take segwit support into consideration\n-    const bool fPreSegWit = (ThresholdState::ACTIVE != VersionBitsState(pindexPrev, consensusParams, Consensus::DEPLOYMENT_SEGWIT, versionbitscache));\n+    const bool fPreSegWit = (pindexPrev->nHeight + 1 < consensusParams.SegwitHeight);\n \n     UniValue aCaps(UniValue::VARR); aCaps.push_back(\"proposal\");\n \n@@ -696,8 +684,6 @@ class submitblock_StateCatcher : public CValidationInterface\n static UniValue submitblock(const JSONRPCRequest& request)\n {\n     // We allow 2 arguments for compliance with BIP22. Argument 2 is ignored.\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"submitblock\",\n                 \"\\nAttempts to submit new block to network.\\n\"\n                 \"See https://en.bitcoin.it/wiki/BIP_0022 for full specification.\\n\",\n@@ -710,8 +696,7 @@ static UniValue submitblock(const JSONRPCRequest& request)\n                     HelpExampleCli(\"submitblock\", \"\\\"mydata\\\"\")\n             + HelpExampleRpc(\"submitblock\", \"\\\"mydata\\\"\")\n                 },\n-            }.ToString());\n-    }\n+            }.Check(request);\n \n     std::shared_ptr<CBlock> blockptr = std::make_shared<CBlock>();\n     CBlock& block = *blockptr;\n@@ -761,8 +746,6 @@ static UniValue submitblock(const JSONRPCRequest& request)\n \n static UniValue submitheader(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 1) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"submitheader\",\n                 \"\\nDecode the given hexdata as a header and submit it as a candidate chain tip if valid.\"\n                 \"\\nThrows when the header is invalid.\\n\",\n@@ -776,8 +759,7 @@ static UniValue submitheader(const JSONRPCRequest& request)\n                     HelpExampleCli(\"submitheader\", \"\\\"aabbcc\\\"\") +\n                     HelpExampleRpc(\"submitheader\", \"\\\"aabbcc\\\"\")\n                 },\n-            }.ToString());\n-    }\n+            }.Check(request);\n \n     CBlockHeader h;\n     if (!DecodeHexBlockHeader(h, request.params[0].get_str())) {\n@@ -801,8 +783,6 @@ static UniValue submitheader(const JSONRPCRequest& request)\n \n static UniValue estimatesmartfee(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n             RPCHelpMan{\"estimatesmartfee\",\n                 \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n                 \"confirmation within conf_target blocks if possible and return the number of blocks\\n\"\n@@ -835,7 +815,7 @@ static UniValue estimatesmartfee(const JSONRPCRequest& request)\n                 RPCExamples{\n                     HelpExampleCli(\"estimatesmartfee\", \"6\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VSTR});\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n@@ -866,8 +846,6 @@ static UniValue estimatesmartfee(const JSONRPCRequest& request)\n \n static UniValue estimaterawfee(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n             RPCHelpMan{\"estimaterawfee\",\n                 \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n                 \"\\nWARNING: This is an advanced API call that is tightly coupled to the specific\\n\"\n@@ -908,7 +886,7 @@ static UniValue estimaterawfee(const JSONRPCRequest& request)\n                 RPCExamples{\n                     HelpExampleCli(\"estimaterawfee\", \"6 0.9\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);"
      },
      {
        "sha": "1516007201f391495f42ece1eac6bc0b83172fcd",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 41,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -25,8 +25,6 @@\n \n static UniValue validateaddress(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n             RPCHelpMan{\"validateaddress\",\n                 \"\\nReturn information about the given bitcoin address.\\n\",\n                 {\n@@ -47,7 +45,7 @@ static UniValue validateaddress(const JSONRPCRequest& request)\n                     HelpExampleCli(\"validateaddress\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n             + HelpExampleRpc(\"validateaddress\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     CTxDestination dest = DecodeDestination(request.params[0].get_str());\n     bool isValid = IsValidDestination(dest);\n@@ -70,9 +68,6 @@ static UniValue validateaddress(const JSONRPCRequest& request)\n \n static UniValue createmultisig(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n-    {\n-        std::string msg =\n             RPCHelpMan{\"createmultisig\",\n                 \"\\nCreates a multi-signature address with n signature of m keys required.\\n\"\n                 \"It returns a json object with the address and redeemScript.\\n\",\n@@ -96,9 +91,7 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"createmultisig\", \"2, \\\"[\\\\\\\"03789ed0bb717d88f7d321a368d905e7430207ebbd82bd342cf11ae157a7ace5fd\\\\\\\",\\\\\\\"03dbc6764b8884a92e871274b87583e6d5c2a58819473e17e107ef3f6aa5a61626\\\\\\\"]\\\"\")\n                 },\n-            }.ToString();\n-        throw std::runtime_error(msg);\n-    }\n+            }.Check(request);\n \n     int required = request.params[0].get_int();\n \n@@ -122,7 +115,7 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     }\n \n     // Construct using pay-to-script-hash:\n-    CBasicKeyStore keystore;\n+    FillableSigningProvider keystore;\n     CScript inner;\n     const CTxDestination dest = AddAndGetMultisigDestination(required, pubkeys, output_type, keystore, inner);\n \n@@ -135,8 +128,6 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n \n UniValue getdescriptorinfo(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 1) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"getdescriptorinfo\",\n             {\"\\nAnalyses a descriptor.\\n\"},\n             {\n@@ -145,6 +136,7 @@ UniValue getdescriptorinfo(const JSONRPCRequest& request)\n             RPCResult{\n             \"{\\n\"\n             \"  \\\"descriptor\\\" : \\\"desc\\\",         (string) The descriptor in canonical form, without private keys\\n\"\n+            \"  \\\"checksum\\\" : \\\"chksum\\\",         (string) The checksum for the input descriptor\\n\"\n             \"  \\\"isrange\\\" : true|false,        (boolean) Whether the descriptor is ranged\\n\"\n             \"  \\\"issolvable\\\" : true|false,     (boolean) Whether the descriptor is solvable\\n\"\n             \"  \\\"hasprivatekeys\\\" : true|false, (boolean) Whether the input descriptor contained at least one private key\\n\"\n@@ -153,20 +145,20 @@ UniValue getdescriptorinfo(const JSONRPCRequest& request)\n             RPCExamples{\n                 \"Analyse a descriptor\\n\" +\n                 HelpExampleCli(\"getdescriptorinfo\", \"\\\"wpkh([d34db33f/84h/0h/0h]0279be667ef9dcbbac55a06295Ce870b07029Bfcdb2dce28d959f2815b16f81798)\\\"\")\n-            }}.ToString()\n-        );\n-    }\n+            }}.Check(request);\n \n     RPCTypeCheck(request.params, {UniValue::VSTR});\n \n     FlatSigningProvider provider;\n-    auto desc = Parse(request.params[0].get_str(), provider);\n+    std::string error;\n+    auto desc = Parse(request.params[0].get_str(), provider, error);\n     if (!desc) {\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Invalid descriptor\"));\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n     }\n \n     UniValue result(UniValue::VOBJ);\n     result.pushKV(\"descriptor\", desc->ToString());\n+    result.pushKV(\"checksum\", GetDescriptorChecksum(request.params[0].get_str()));\n     result.pushKV(\"isrange\", desc->IsRange());\n     result.pushKV(\"issolvable\", desc->IsSolvable());\n     result.pushKV(\"hasprivatekeys\", provider.keys.size() > 0);\n@@ -175,8 +167,6 @@ UniValue getdescriptorinfo(const JSONRPCRequest& request)\n \n UniValue deriveaddresses(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.empty() || request.params.size() > 2) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"deriveaddresses\",\n             {\"\\nDerives one or more addresses corresponding to an output descriptor.\\n\"\n             \"Examples of output descriptors are:\\n\"\n@@ -197,9 +187,7 @@ UniValue deriveaddresses(const JSONRPCRequest& request)\n             RPCExamples{\n                 \"First three native segwit receive addresses\\n\" +\n                 HelpExampleCli(\"deriveaddresses\", \"\\\"wpkh([d34db33f/84h/0h/0h]xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY/0/*)#cjjspncu\\\" \\\"[0,2]\\\"\")\n-            }}.ToString()\n-        );\n-    }\n+            }}.Check(request);\n \n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValueType()}); // Range argument is checked later\n     const std::string desc_str = request.params[0].get_str();\n@@ -212,9 +200,10 @@ UniValue deriveaddresses(const JSONRPCRequest& request)\n     }\n \n     FlatSigningProvider key_provider;\n-    auto desc = Parse(desc_str, key_provider, /* require_checksum = */ true);\n+    std::string error;\n+    auto desc = Parse(desc_str, key_provider, error, /* require_checksum = */ true);\n     if (!desc) {\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Invalid descriptor\"));\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n     }\n \n     if (!desc->IsRange() && request.params.size() > 1) {\n@@ -254,8 +243,6 @@ UniValue deriveaddresses(const JSONRPCRequest& request)\n \n static UniValue verifymessage(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 3)\n-        throw std::runtime_error(\n             RPCHelpMan{\"verifymessage\",\n                 \"\\nVerify a signed message\\n\",\n                 {\n@@ -276,7 +263,7 @@ static UniValue verifymessage(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"verifymessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\", \\\"signature\\\", \\\"my message\\\"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     LOCK(cs_main);\n \n@@ -313,8 +300,6 @@ static UniValue verifymessage(const JSONRPCRequest& request)\n \n static UniValue signmessagewithprivkey(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 2)\n-        throw std::runtime_error(\n             RPCHelpMan{\"signmessagewithprivkey\",\n                 \"\\nSign a message with the private key of an address\\n\",\n                 {\n@@ -332,7 +317,7 @@ static UniValue signmessagewithprivkey(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"signmessagewithprivkey\", \"\\\"privkey\\\", \\\"my message\\\"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     std::string strPrivkey = request.params[0].get_str();\n     std::string strMessage = request.params[1].get_str();\n@@ -355,8 +340,6 @@ static UniValue signmessagewithprivkey(const JSONRPCRequest& request)\n \n static UniValue setmocktime(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n             RPCHelpMan{\"setmocktime\",\n                 \"\\nSet the local time to given timestamp (-regtest only)\\n\",\n                 {\n@@ -365,8 +348,7 @@ static UniValue setmocktime(const JSONRPCRequest& request)\n                 },\n                 RPCResults{},\n                 RPCExamples{\"\"},\n-            }.ToString()\n-        );\n+            }.Check(request);\n \n     if (!Params().MineBlocksOnDemand())\n         throw std::runtime_error(\"setmocktime for regression testing (-regtest mode) only\");\n@@ -421,8 +403,6 @@ static UniValue getmemoryinfo(const JSONRPCRequest& request)\n     /* Please, avoid using the word \"pool\" here in the RPC interface or help,\n      * as users will undoubtedly confuse it with the other \"memory pool\"\n      */\n-    if (request.fHelp || request.params.size() > 1)\n-        throw std::runtime_error(\n             RPCHelpMan{\"getmemoryinfo\",\n                 \"Returns an object containing information about memory usage.\\n\",\n                 {\n@@ -451,7 +431,7 @@ static UniValue getmemoryinfo(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getmemoryinfo\", \"\")\n             + HelpExampleRpc(\"getmemoryinfo\", \"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     std::string mode = request.params[0].isNull() ? \"stats\" : request.params[0].get_str();\n     if (mode == \"stats\") {\n@@ -489,8 +469,6 @@ static void EnableOrDisableLogCategories(UniValue cats, bool enable) {\n \n UniValue logging(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() > 2) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"logging\",\n             \"Gets and sets the logging configuration.\\n\"\n             \"When called without an argument, returns the list of categories with status that are currently being debug logged or not.\\n\"\n@@ -522,8 +500,7 @@ UniValue logging(const JSONRPCRequest& request)\n                     HelpExampleCli(\"logging\", \"\\\"[\\\\\\\"all\\\\\\\"]\\\" \\\"[\\\\\\\"http\\\\\\\"]\\\"\")\n             + HelpExampleRpc(\"logging\", \"[\\\"all\\\"], [\\\"libevent\\\"]\")\n                 },\n-            }.ToString());\n-    }\n+            }.Check(request);\n \n     uint32_t original_log_categories = LogInstance().GetCategoryMask();\n     if (request.params[0].isArray()) {"
      },
      {
        "sha": "25dda924a4c2af7228b184e2da038f5dfb439799",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 37,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -9,6 +9,7 @@\n #include <core_io.h>\n #include <net.h>\n #include <net_processing.h>\n+#include <net_permissions.h>\n #include <netbase.h>\n #include <policy/policy.h>\n #include <policy/settings.h>\n@@ -26,8 +27,6 @@\n \n static UniValue getconnectioncount(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n             RPCHelpMan{\"getconnectioncount\",\n                 \"\\nReturns the number of connections to other nodes.\\n\",\n                 {},\n@@ -38,7 +37,7 @@ static UniValue getconnectioncount(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getconnectioncount\", \"\")\n             + HelpExampleRpc(\"getconnectioncount\", \"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n@@ -48,8 +47,6 @@ static UniValue getconnectioncount(const JSONRPCRequest& request)\n \n static UniValue ping(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n             RPCHelpMan{\"ping\",\n                 \"\\nRequests that a ping be sent to all other nodes, to measure ping time.\\n\"\n                 \"Results provided in getpeerinfo, pingtime and pingwait fields are decimal seconds.\\n\"\n@@ -60,7 +57,7 @@ static UniValue ping(const JSONRPCRequest& request)\n                     HelpExampleCli(\"ping\", \"\")\n             + HelpExampleRpc(\"ping\", \"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n@@ -74,8 +71,6 @@ static UniValue ping(const JSONRPCRequest& request)\n \n static UniValue getpeerinfo(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n             RPCHelpMan{\"getpeerinfo\",\n                 \"\\nReturns data about each connected network node as a json array of objects.\\n\",\n                 {},\n@@ -131,7 +126,7 @@ static UniValue getpeerinfo(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getpeerinfo\", \"\")\n             + HelpExampleRpc(\"getpeerinfo\", \"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n@@ -183,7 +178,12 @@ static UniValue getpeerinfo(const JSONRPCRequest& request)\n             }\n             obj.pushKV(\"inflight\", heights);\n         }\n-        obj.pushKV(\"whitelisted\", stats.fWhitelisted);\n+        obj.pushKV(\"whitelisted\", stats.m_legacyWhitelisted);\n+        UniValue permissions(UniValue::VARR);\n+        for (const auto& permission : NetPermissions::ToStrings(stats.m_permissionFlags)) {\n+            permissions.push_back(permission);\n+        }\n+        obj.pushKV(\"permissions\", permissions);\n         obj.pushKV(\"minfeefilter\", ValueFromAmount(stats.minFeeFilter));\n \n         UniValue sendPerMsgCmd(UniValue::VOBJ);\n@@ -258,8 +258,6 @@ static UniValue addnode(const JSONRPCRequest& request)\n \n static UniValue disconnectnode(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() == 0 || request.params.size() >= 3)\n-        throw std::runtime_error(\n             RPCHelpMan{\"disconnectnode\",\n                 \"\\nImmediately disconnects from the specified peer node.\\n\"\n                 \"\\nStrictly one out of 'address' and 'nodeid' can be provided to identify the node.\\n\"\n@@ -275,7 +273,7 @@ static UniValue disconnectnode(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"disconnectnode\", \"\\\"192.168.0.6:8333\\\"\")\n             + HelpExampleRpc(\"disconnectnode\", \"\\\"\\\", 1\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n@@ -304,8 +302,6 @@ static UniValue disconnectnode(const JSONRPCRequest& request)\n \n static UniValue getaddednodeinfo(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() > 1)\n-        throw std::runtime_error(\n             RPCHelpMan{\"getaddednodeinfo\",\n                 \"\\nReturns information about the given added node, or all added nodes\\n\"\n                 \"(note that onetry addnodes are not listed here)\\n\",\n@@ -331,7 +327,7 @@ static UniValue getaddednodeinfo(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getaddednodeinfo\", \"\\\"192.168.0.201\\\"\")\n             + HelpExampleRpc(\"getaddednodeinfo\", \"\\\"192.168.0.201\\\"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n@@ -374,8 +370,6 @@ static UniValue getaddednodeinfo(const JSONRPCRequest& request)\n \n static UniValue getnettotals(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() > 0)\n-        throw std::runtime_error(\n             RPCHelpMan{\"getnettotals\",\n                 \"\\nReturns information about network traffic, including bytes in, bytes out,\\n\"\n                 \"and current time.\\n\",\n@@ -400,7 +394,7 @@ static UniValue getnettotals(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getnettotals\", \"\")\n             + HelpExampleRpc(\"getnettotals\", \"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n@@ -443,8 +437,6 @@ static UniValue GetNetworksInfo()\n \n static UniValue getnetworkinfo(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n             RPCHelpMan{\"getnetworkinfo\",\n                 \"Returns an object containing various state info regarding P2P networking.\\n\",\n                 {},\n@@ -485,7 +477,7 @@ static UniValue getnetworkinfo(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getnetworkinfo\", \"\")\n             + HelpExampleRpc(\"getnetworkinfo\", \"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     LOCK(cs_main);\n     UniValue obj(UniValue::VOBJ);\n@@ -602,8 +594,6 @@ static UniValue setban(const JSONRPCRequest& request)\n \n static UniValue listbanned(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n             RPCHelpMan{\"listbanned\",\n                 \"\\nList all banned IPs/Subnets.\\n\",\n                 {},\n@@ -612,7 +602,7 @@ static UniValue listbanned(const JSONRPCRequest& request)\n                     HelpExampleCli(\"listbanned\", \"\")\n                             + HelpExampleRpc(\"listbanned\", \"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     if(!g_banman) {\n         throw JSONRPCError(RPC_DATABASE_ERROR, \"Error: Ban database not loaded\");\n@@ -639,8 +629,6 @@ static UniValue listbanned(const JSONRPCRequest& request)\n \n static UniValue clearbanned(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n             RPCHelpMan{\"clearbanned\",\n                 \"\\nClear all banned IPs.\\n\",\n                 {},\n@@ -649,7 +637,7 @@ static UniValue clearbanned(const JSONRPCRequest& request)\n                     HelpExampleCli(\"clearbanned\", \"\")\n                             + HelpExampleRpc(\"clearbanned\", \"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n     if (!g_banman) {\n         throw JSONRPCError(RPC_DATABASE_ERROR, \"Error: Ban database not loaded\");\n     }\n@@ -661,18 +649,14 @@ static UniValue clearbanned(const JSONRPCRequest& request)\n \n static UniValue setnetworkactive(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 1) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"setnetworkactive\",\n                 \"\\nDisable/enable all p2p network activity.\\n\",\n                 {\n                     {\"state\", RPCArg::Type::BOOL, RPCArg::Optional::NO, \"true to enable networking, false to disable\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\"\"},\n-            }.ToString()\n-        );\n-    }\n+            }.Check(request);\n \n     if (!g_connman) {\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n@@ -685,8 +669,6 @@ static UniValue setnetworkactive(const JSONRPCRequest& request)\n \n static UniValue getnodeaddresses(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() > 1) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"getnodeaddresses\",\n                 \"\\nReturn known addresses which can potentially be used to find new nodes in the network\\n\",\n                 {\n@@ -707,8 +689,7 @@ static UniValue getnodeaddresses(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getnodeaddresses\", \"8\")\n             + HelpExampleRpc(\"getnodeaddresses\", \"8\")\n                 },\n-            }.ToString());\n-    }\n+            }.Check(request);\n     if (!g_connman) {\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n     }"
      },
      {
        "sha": "ef6537e4ec26830b3e72209e25722e06d9204233",
        "filename": "src/rpc/protocol.h",
        "status": "modified",
        "additions": 0,
        "deletions": 23,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/rpc/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/rpc/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.h?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -6,15 +6,6 @@\n #ifndef BITCOIN_RPC_PROTOCOL_H\n #define BITCOIN_RPC_PROTOCOL_H\n \n-#include <fs.h>\n-\n-#include <list>\n-#include <map>\n-#include <stdint.h>\n-#include <string>\n-\n-#include <univalue.h>\n-\n //! HTTP status codes\n enum HTTPStatusCode\n {\n@@ -92,18 +83,4 @@ enum RPCErrorCode\n     RPC_FORBIDDEN_BY_SAFE_MODE      = -2,  //!< Server is in safe mode, and command is not allowed in safe mode\n };\n \n-UniValue JSONRPCRequestObj(const std::string& strMethod, const UniValue& params, const UniValue& id);\n-UniValue JSONRPCReplyObj(const UniValue& result, const UniValue& error, const UniValue& id);\n-std::string JSONRPCReply(const UniValue& result, const UniValue& error, const UniValue& id);\n-UniValue JSONRPCError(int code, const std::string& message);\n-\n-/** Generate a new RPC authentication cookie and write it to disk */\n-bool GenerateAuthCookie(std::string *cookie_out);\n-/** Read the RPC authentication cookie from disk */\n-bool GetAuthCookie(std::string *cookie_out);\n-/** Delete RPC authentication cookie from disk */\n-void DeleteAuthCookie();\n-/** Parse JSON-RPC batch reply into a vector */\n-std::vector<UniValue> JSONRPCProcessBatchReply(const UniValue &in, size_t num);\n-\n #endif // BITCOIN_RPC_PROTOCOL_H"
      },
      {
        "sha": "ffbad457142dec413ec54f9cd5f50fa8bf8ac6c1",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 79,
        "deletions": 96,
        "changes": 175,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -10,7 +10,6 @@\n #include <core_io.h>\n #include <index/txindex.h>\n #include <key_io.h>\n-#include <keystore.h>\n #include <merkleblock.h>\n #include <node/coin.h>\n #include <node/psbt.h>\n@@ -24,6 +23,7 @@\n #include <script/script.h>\n #include <script/script_error.h>\n #include <script/sign.h>\n+#include <script/signingprovider.h>\n #include <script/standard.h>\n #include <uint256.h>\n #include <util/moneystr.h>\n@@ -71,7 +71,7 @@ static void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue&\n \n static UniValue getrawtransaction(const JSONRPCRequest& request)\n {\n-    const RPCHelpMan help{\n+    RPCHelpMan{\n                 \"getrawtransaction\",\n                 \"\\nReturn the raw transaction data.\\n\"\n \n@@ -149,11 +149,7 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n             + HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\" false \\\"myblockhash\\\"\")\n             + HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\" true \\\"myblockhash\\\"\")\n                 },\n-    };\n-\n-    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n-        throw std::runtime_error(help.ToString());\n-    }\n+    }.Check(request);\n \n     bool in_active_chain = true;\n     uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n@@ -217,8 +213,6 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n \n static UniValue gettxoutproof(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || (request.params.size() != 1 && request.params.size() != 2))\n-        throw std::runtime_error(\n             RPCHelpMan{\"gettxoutproof\",\n                 \"\\nReturns a hex-encoded proof that \\\"txid\\\" was included in a block.\\n\"\n                 \"\\nNOTE: By default this function only works sometimes. This is when there is an\\n\"\n@@ -237,8 +231,7 @@ static UniValue gettxoutproof(const JSONRPCRequest& request)\n             \"\\\"data\\\"           (string) A string that is a serialized, hex-encoded data for the proof.\\n\"\n                 },\n                 RPCExamples{\"\"},\n-            }.ToString()\n-        );\n+            }.Check(request);\n \n     std::set<uint256> setTxids;\n     uint256 oneTxid;\n@@ -266,7 +259,7 @@ static UniValue gettxoutproof(const JSONRPCRequest& request)\n \n         // Loop through txids and try to find which block they're in. Exit loop once a block is found.\n         for (const auto& tx : setTxids) {\n-            const Coin& coin = AccessByTxid(*pcoinsTip, tx);\n+            const Coin& coin = AccessByTxid(::ChainstateActive().CoinsTip(), tx);\n             if (!coin.IsSpent()) {\n                 pblockindex = ::ChainActive()[coin.nHeight];\n                 break;\n@@ -313,8 +306,6 @@ static UniValue gettxoutproof(const JSONRPCRequest& request)\n \n static UniValue verifytxoutproof(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n             RPCHelpMan{\"verifytxoutproof\",\n                 \"\\nVerifies that a proof points to a transaction in a block, returning the transaction it commits to\\n\"\n                 \"and throwing an RPC error if the block is not in our best chain\\n\",\n@@ -325,8 +316,7 @@ static UniValue verifytxoutproof(const JSONRPCRequest& request)\n             \"[\\\"txid\\\"]      (array, strings) The txid(s) which the proof commits to, or empty array if the proof can not be validated.\\n\"\n                 },\n                 RPCExamples{\"\"},\n-            }.ToString()\n-        );\n+            }.Check(request);\n \n     CDataStream ssMB(ParseHexV(request.params[0], \"proof\"), SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS);\n     CMerkleBlock merkleBlock;\n@@ -358,8 +348,6 @@ static UniValue verifytxoutproof(const JSONRPCRequest& request)\n \n static UniValue createrawtransaction(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"createrawtransaction\",\n                 \"\\nCreate a transaction spending the given inputs and creating new outputs.\\n\"\n                 \"Outputs can be addresses or data.\\n\"\n@@ -408,8 +396,7 @@ static UniValue createrawtransaction(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\", \\\"[{\\\\\\\"address\\\\\\\":0.01}]\\\"\")\n             + HelpExampleRpc(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\", \\\"[{\\\\\\\"data\\\\\\\":\\\\\\\"00010203\\\\\\\"}]\\\"\")\n                 },\n-            }.ToString());\n-    }\n+            }.Check(request);\n \n     RPCTypeCheck(request.params, {\n         UniValue::VARR,\n@@ -419,14 +406,18 @@ static UniValue createrawtransaction(const JSONRPCRequest& request)\n         }, true\n     );\n \n-    CMutableTransaction rawTx = ConstructTransaction(request.params[0], request.params[1], request.params[2], request.params[3]);\n+    bool rbf = false;\n+    if (!request.params[3].isNull()) {\n+        rbf = request.params[3].isTrue();\n+    }\n+    CMutableTransaction rawTx = ConstructTransaction(request.params[0], request.params[1], request.params[2], rbf);\n \n     return EncodeHexTx(CTransaction(rawTx));\n }\n \n static UniValue decoderawtransaction(const JSONRPCRequest& request)\n {\n-    const RPCHelpMan help{\"decoderawtransaction\",\n+    RPCHelpMan{\"decoderawtransaction\",\n                 \"\\nReturn a JSON object representing the serialized, hex-encoded transaction.\\n\",\n                 {\n                     {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction hex string\"},\n@@ -483,11 +474,7 @@ static UniValue decoderawtransaction(const JSONRPCRequest& request)\n                     HelpExampleCli(\"decoderawtransaction\", \"\\\"hexstring\\\"\")\n             + HelpExampleRpc(\"decoderawtransaction\", \"\\\"hexstring\\\"\")\n                 },\n-    };\n-\n-    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n-        throw std::runtime_error(help.ToString());\n-    }\n+    }.Check(request);\n \n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VBOOL});\n \n@@ -518,7 +505,7 @@ static std::string GetAllOutputTypes()\n \n static UniValue decodescript(const JSONRPCRequest& request)\n {\n-    const RPCHelpMan help{\"decodescript\",\n+    RPCHelpMan{\"decodescript\",\n                 \"\\nDecode a hex-encoded script.\\n\",\n                 {\n                     {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"the hex-encoded script\"},\n@@ -549,11 +536,7 @@ static UniValue decodescript(const JSONRPCRequest& request)\n                     HelpExampleCli(\"decodescript\", \"\\\"hexstring\\\"\")\n             + HelpExampleRpc(\"decodescript\", \"\\\"hexstring\\\"\")\n                 },\n-    };\n-\n-    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n-        throw std::runtime_error(help.ToString());\n-    }\n+    }.Check(request);\n \n     RPCTypeCheck(request.params, {UniValue::VSTR});\n \n@@ -610,8 +593,6 @@ static UniValue decodescript(const JSONRPCRequest& request)\n \n static UniValue combinerawtransaction(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n             RPCHelpMan{\"combinerawtransaction\",\n                 \"\\nCombine multiple partially signed transactions into one transaction.\\n\"\n                 \"The combined transaction may be another partially signed transaction or a \\n\"\n@@ -629,7 +610,7 @@ static UniValue combinerawtransaction(const JSONRPCRequest& request)\n                 RPCExamples{\n                     HelpExampleCli(\"combinerawtransaction\", \"[\\\"myhex1\\\", \\\"myhex2\\\", \\\"myhex3\\\"]\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n \n     UniValue txs = request.params[0].get_array();\n@@ -655,7 +636,7 @@ static UniValue combinerawtransaction(const JSONRPCRequest& request)\n     {\n         LOCK(cs_main);\n         LOCK(mempool.cs);\n-        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewCache &viewChain = ::ChainstateActive().CoinsTip();\n         CCoinsViewMemPool viewMempool(&viewChain, mempool);\n         view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n \n@@ -694,8 +675,6 @@ static UniValue combinerawtransaction(const JSONRPCRequest& request)\n \n static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n-        throw std::runtime_error(\n             RPCHelpMan{\"signrawtransactionwithkey\",\n                 \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n                 \"The second argument is an array of base58-encoded private\\n\"\n@@ -752,7 +731,7 @@ static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n                     HelpExampleCli(\"signrawtransactionwithkey\", \"\\\"myhex\\\" \\\"[\\\\\\\"key1\\\\\\\",\\\\\\\"key2\\\\\\\"]\\\"\")\n             + HelpExampleRpc(\"signrawtransactionwithkey\", \"\\\"myhex\\\", \\\"[\\\\\\\"key1\\\\\\\",\\\\\\\"key2\\\\\\\"]\\\"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n \n@@ -761,7 +740,7 @@ static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n     }\n \n-    CBasicKeyStore keystore;\n+    FillableSigningProvider keystore;\n     const UniValue& keys = request.params[1].get_array();\n     for (unsigned int idx = 0; idx < keys.size(); ++idx) {\n         UniValue k = keys[idx];\n@@ -784,8 +763,11 @@ static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n \n static UniValue sendrawtransaction(const JSONRPCRequest& request)\n {\n-    const RPCHelpMan help{\"sendrawtransaction\",\n-                \"\\nSubmits raw transaction (serialized, hex-encoded) to local node and network.\\n\"\n+    RPCHelpMan{\"sendrawtransaction\",\n+                \"\\nSubmit a raw transaction (serialized, hex-encoded) to local node and network.\\n\"\n+                \"\\nNote that the transaction will be sent unconditionally to all peers, so using this\\n\"\n+                \"for manual rebroadcast may degrade privacy by leaking the transaction's origin, as\\n\"\n+                \"nodes will normally not rebroadcast non-wallet transactions already in their mempool.\\n\"\n                 \"\\nAlso see createrawtransaction and signrawtransactionwithkey calls.\\n\",\n                 {\n                     {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The hex string of the raw transaction\"},\n@@ -806,11 +788,7 @@ static UniValue sendrawtransaction(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"sendrawtransaction\", \"\\\"signedhex\\\"\")\n                 },\n-    };\n-\n-    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n-        throw std::runtime_error(help.ToString());\n-    }\n+    }.Check(request);\n \n     RPCTypeCheck(request.params, {\n         UniValue::VSTR,\n@@ -836,19 +814,19 @@ static UniValue sendrawtransaction(const JSONRPCRequest& request)\n         max_raw_tx_fee = fr.GetFee((weight+3)/4);\n     }\n \n-    uint256 txid;\n     std::string err_string;\n-    const TransactionError err = BroadcastTransaction(tx, txid, err_string, max_raw_tx_fee);\n+    AssertLockNotHeld(cs_main);\n+    const TransactionError err = BroadcastTransaction(tx, err_string, max_raw_tx_fee, /*relay*/ true, /*wait_callback*/ true);\n     if (TransactionError::OK != err) {\n         throw JSONRPCTransactionError(err, err_string);\n     }\n \n-    return txid.GetHex();\n+    return tx->GetHash().GetHex();\n }\n \n static UniValue testmempoolaccept(const JSONRPCRequest& request)\n {\n-    const RPCHelpMan help{\"testmempoolaccept\",\n+    RPCHelpMan{\"testmempoolaccept\",\n                 \"\\nReturns result of mempool acceptance tests indicating if raw transaction (serialized, hex-encoded) would be accepted by mempool.\\n\"\n                 \"\\nThis checks if the transaction violates the consensus or policy rules.\\n\"\n                 \"\\nSee sendrawtransaction call.\\n\",\n@@ -881,11 +859,7 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"testmempoolaccept\", \"[\\\"signedhex\\\"]\")\n                 },\n-    };\n-\n-    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n-        throw std::runtime_error(help.ToString());\n-    }\n+    }.Check(request);\n \n     RPCTypeCheck(request.params, {\n         UniValue::VARR,\n@@ -964,8 +938,6 @@ static std::string WriteHDKeypath(std::vector<uint32_t>& keypath)\n \n UniValue decodepsbt(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n             RPCHelpMan{\"decodepsbt\",\n                 \"\\nReturn a JSON object representing the serialized, base64-encoded partially signed Bitcoin transaction.\\n\",\n                 {\n@@ -1062,7 +1034,7 @@ UniValue decodepsbt(const JSONRPCRequest& request)\n                 RPCExamples{\n                     HelpExampleCli(\"decodepsbt\", \"\\\"psbt\\\"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     RPCTypeCheck(request.params, {UniValue::VSTR});\n \n@@ -1239,8 +1211,6 @@ UniValue decodepsbt(const JSONRPCRequest& request)\n \n UniValue combinepsbt(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n             RPCHelpMan{\"combinepsbt\",\n                 \"\\nCombine multiple partially signed Bitcoin transactions into one transaction.\\n\"\n                 \"Implements the Combiner role.\\n\",\n@@ -1257,7 +1227,7 @@ UniValue combinepsbt(const JSONRPCRequest& request)\n                 RPCExamples{\n                     HelpExampleCli(\"combinepsbt\", \"[\\\"mybase64_1\\\", \\\"mybase64_2\\\", \\\"mybase64_3\\\"]\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     RPCTypeCheck(request.params, {UniValue::VARR}, true);\n \n@@ -1289,8 +1259,6 @@ UniValue combinepsbt(const JSONRPCRequest& request)\n \n UniValue finalizepsbt(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n             RPCHelpMan{\"finalizepsbt\",\n                 \"Finalize the inputs of a PSBT. If the transaction is fully signed, it will produce a\\n\"\n                 \"network serialized transaction which can be broadcast with sendrawtransaction. Otherwise a PSBT will be\\n\"\n@@ -1312,7 +1280,7 @@ UniValue finalizepsbt(const JSONRPCRequest& request)\n                 RPCExamples{\n                     HelpExampleCli(\"finalizepsbt\", \"\\\"psbt\\\"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VBOOL}, true);\n \n@@ -1348,8 +1316,6 @@ UniValue finalizepsbt(const JSONRPCRequest& request)\n \n UniValue createpsbt(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n-        throw std::runtime_error(\n             RPCHelpMan{\"createpsbt\",\n                 \"\\nCreates a transaction in the Partially Signed Transaction format.\\n\"\n                 \"Implements the Creator role.\\n\",\n@@ -1392,7 +1358,7 @@ UniValue createpsbt(const JSONRPCRequest& request)\n                 RPCExamples{\n                     HelpExampleCli(\"createpsbt\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"[{\\\\\\\"data\\\\\\\":\\\\\\\"00010203\\\\\\\"}]\\\"\")\n                 },\n-            }.ToString());\n+            }.Check(request);\n \n \n     RPCTypeCheck(request.params, {\n@@ -1403,7 +1369,11 @@ UniValue createpsbt(const JSONRPCRequest& request)\n         }, true\n     );\n \n-    CMutableTransaction rawTx = ConstructTransaction(request.params[0], request.params[1], request.params[2], request.params[3]);\n+    bool rbf = false;\n+    if (!request.params[3].isNull()) {\n+        rbf = request.params[3].isTrue();\n+    }\n+    CMutableTransaction rawTx = ConstructTransaction(request.params[0], request.params[1], request.params[2], rbf);\n \n     // Make a blank psbt\n     PartiallySignedTransaction psbtx;\n@@ -1424,7 +1394,7 @@ UniValue createpsbt(const JSONRPCRequest& request)\n \n UniValue converttopsbt(const JSONRPCRequest& request)\n {\n-    const RPCHelpMan help{\"converttopsbt\",\n+    RPCHelpMan{\"converttopsbt\",\n                 \"\\nConverts a network serialized transaction to a PSBT. This should be used only with createrawtransaction and fundrawtransaction\\n\"\n                 \"createpsbt and walletcreatefundedpsbt should be used for new applications.\\n\",\n                 {\n@@ -1448,11 +1418,7 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n                             \"\\nConvert the transaction to a PSBT\\n\"\n                             + HelpExampleCli(\"converttopsbt\", \"\\\"rawtransaction\\\"\")\n                 },\n-    };\n-\n-    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n-        throw std::runtime_error(help.ToString());\n-    }\n+    }.Check(request);\n \n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VBOOL, UniValue::VBOOL}, true);\n \n@@ -1495,22 +1461,26 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n \n UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 1) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"utxoupdatepsbt\",\n-            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\",\n+            \"\\nUpdates all segwit inputs and outputs in a PSBT with data from output descriptors, the UTXO set or the mempool.\\n\",\n             {\n-                {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A base64 string of a PSBT\"}\n+                {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A base64 string of a PSBT\"},\n+                {\"descriptors\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"An array of either strings or objects\", {\n+                    {\"\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with an output descriptor and extra information\", {\n+                         {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                         {\"range\", RPCArg::Type::RANGE, \"1000\", \"Up to what index HD chains should be explored (either end or [begin,end])\"},\n+                    }},\n+                }},\n             },\n             RPCResult {\n                 \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n             },\n             RPCExamples {\n                 HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n-            }}.ToString());\n-    }\n+            }}.Check(request);\n \n-    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR}, true);\n \n     // Unserialize the transactions\n     PartiallySignedTransaction psbtx;\n@@ -1519,12 +1489,23 @@ UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n     }\n \n+    // Parse descriptors, if any.\n+    FlatSigningProvider provider;\n+    if (!request.params[1].isNull()) {\n+        auto descs = request.params[1].get_array();\n+        for (size_t i = 0; i < descs.size(); ++i) {\n+            EvalDescriptorStringOrObject(descs[i], provider);\n+        }\n+    }\n+    // We don't actually need private keys further on; hide them as a precaution.\n+    HidingSigningProvider public_provider(&provider, /* nosign */ true, /* nobip32derivs */ false);\n+\n     // Fetch previous transactions (inputs):\n     CCoinsView viewDummy;\n     CCoinsViewCache view(&viewDummy);\n     {\n         LOCK2(cs_main, mempool.cs);\n-        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewCache &viewChain = ::ChainstateActive().CoinsTip();\n         CCoinsViewMemPool viewMempool(&viewChain, mempool);\n         view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n \n@@ -1545,11 +1526,19 @@ UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n \n         const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n \n-        std::vector<std::vector<unsigned char>> solutions_data;\n-        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n-        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {\n+        if (IsSegWitOutput(provider, coin.out.scriptPubKey)) {\n             input.witness_utxo = coin.out;\n         }\n+\n+        // Update script/keypath information using descriptor data.\n+        // Note that SignPSBTInput does a lot more than just constructing ECDSA signatures\n+        // we don't actually care about those here, in fact.\n+        SignPSBTInput(public_provider, psbtx, i, /* sighash_type */ 1);\n+    }\n+\n+    // Update script/keypath information using descriptor data.\n+    for (unsigned int i = 0; i < psbtx.tx->vout.size(); ++i) {\n+        UpdatePSBTOutput(public_provider, psbtx, i);\n     }\n \n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n@@ -1559,8 +1548,6 @@ UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n \n UniValue joinpsbts(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 1) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"joinpsbts\",\n             \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n             \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\",\n@@ -1575,8 +1562,7 @@ UniValue joinpsbts(const JSONRPCRequest& request)\n             },\n             RPCExamples {\n                 HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n-            }}.ToString());\n-    }\n+            }}.Check(request);\n \n     RPCTypeCheck(request.params, {UniValue::VARR}, true);\n \n@@ -1633,8 +1619,6 @@ UniValue joinpsbts(const JSONRPCRequest& request)\n \n UniValue analyzepsbt(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 1) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"analyzepsbt\",\n             \"\\nAnalyzes and provides information about the current status of a PSBT and its inputs\\n\",\n             {\n@@ -1668,8 +1652,7 @@ UniValue analyzepsbt(const JSONRPCRequest& request)\n             },\n             RPCExamples {\n                 HelpExampleCli(\"analyzepsbt\", \"\\\"psbt\\\"\")\n-            }}.ToString());\n-    }\n+            }}.Check(request);\n \n     RPCTypeCheck(request.params, {UniValue::VSTR});\n \n@@ -1750,7 +1733,7 @@ static const CRPCCommand commands[] =\n     { \"rawtransactions\",    \"finalizepsbt\",                 &finalizepsbt,              {\"psbt\", \"extract\"} },\n     { \"rawtransactions\",    \"createpsbt\",                   &createpsbt,                {\"inputs\",\"outputs\",\"locktime\",\"replaceable\"} },\n     { \"rawtransactions\",    \"converttopsbt\",                &converttopsbt,             {\"hexstring\",\"permitsigdata\",\"iswitness\"} },\n-    { \"rawtransactions\",    \"utxoupdatepsbt\",               &utxoupdatepsbt,            {\"psbt\"} },\n+    { \"rawtransactions\",    \"utxoupdatepsbt\",               &utxoupdatepsbt,            {\"psbt\", \"descriptors\"} },\n     { \"rawtransactions\",    \"joinpsbts\",                    &joinpsbts,                 {\"txs\"} },\n     { \"rawtransactions\",    \"analyzepsbt\",                  &analyzepsbt,               {\"psbt\"} },\n "
      },
      {
        "sha": "55425cca35c02e95a5373b05c0d26ca361867cf5",
        "filename": "src/rpc/rawtransaction_util.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 8,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/rpc/rawtransaction_util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/rpc/rawtransaction_util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction_util.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -8,17 +8,18 @@\n #include <coins.h>\n #include <core_io.h>\n #include <key_io.h>\n-#include <keystore.h>\n #include <policy/policy.h>\n #include <primitives/transaction.h>\n-#include <rpc/protocol.h>\n+#include <rpc/request.h>\n #include <rpc/util.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n #include <tinyformat.h>\n #include <univalue.h>\n #include <util/rbf.h>\n #include <util/strencodings.h>\n \n-CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniValue& outputs_in, const UniValue& locktime, const UniValue& rbf)\n+CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniValue& outputs_in, const UniValue& locktime, bool rbf)\n {\n     if (inputs_in.isNull() || outputs_in.isNull())\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, arguments 1 and 2 must be non-null\");\n@@ -36,8 +37,6 @@ CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniVal\n         rawTx.nLockTime = nLockTime;\n     }\n \n-    bool rbfOptIn = rbf.isTrue();\n-\n     for (unsigned int idx = 0; idx < inputs.size(); idx++) {\n         const UniValue& input = inputs[idx];\n         const UniValue& o = input.get_obj();\n@@ -52,7 +51,7 @@ CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniVal\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, vout must be positive\");\n \n         uint32_t nSequence;\n-        if (rbfOptIn) {\n+        if (rbf) {\n             nSequence = MAX_BIP125_RBF_SEQUENCE; /* CTxIn::SEQUENCE_FINAL - 2 */\n         } else if (rawTx.nLockTime) {\n             nSequence = CTxIn::SEQUENCE_FINAL - 1;\n@@ -124,7 +123,7 @@ CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniVal\n         }\n     }\n \n-    if (!rbf.isNull() && rawTx.vin.size() > 0 && rbfOptIn != SignalsOptInRBF(CTransaction(rawTx))) {\n+    if (rbf && rawTx.vin.size() > 0 && !SignalsOptInRBF(CTransaction(rawTx))) {\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter combination: Sequence number(s) contradict replaceable option\");\n     }\n \n@@ -148,7 +147,7 @@ static void TxInErrorToJSON(const CTxIn& txin, UniValue& vErrorsRet, const std::\n     vErrorsRet.push_back(entry);\n }\n \n-UniValue SignTransaction(CMutableTransaction& mtx, const UniValue& prevTxsUnival, CBasicKeyStore* keystore, std::map<COutPoint, Coin>& coins, bool is_temp_keystore, const UniValue& hashType)\n+UniValue SignTransaction(CMutableTransaction& mtx, const UniValue& prevTxsUnival, FillableSigningProvider* keystore, std::map<COutPoint, Coin>& coins, bool is_temp_keystore, const UniValue& hashType)\n {\n     // Add previous txouts given in the RPC call:\n     if (!prevTxsUnival.isNull()) {\n@@ -221,6 +220,9 @@ UniValue SignTransaction(CMutableTransaction& mtx, const UniValue& prevTxsUnival\n                     // Automatically also add the P2WSH wrapped version of the script (to deal with P2SH-P2WSH).\n                     keystore->AddCScript(GetScriptForWitness(witnessScript));\n                 }\n+                if (rs.isNull() && ws.isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Missing redeemScript/witnessScript\");\n+                }\n             }\n         }\n     }"
      },
      {
        "sha": "c85593e71e88fdaf775b0467ddd12bd672c08d00",
        "filename": "src/rpc/rawtransaction_util.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/rpc/rawtransaction_util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/rpc/rawtransaction_util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction_util.h?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -7,7 +7,7 @@\n \n #include <map>\n \n-class CBasicKeyStore;\n+class FillableSigningProvider;\n class UniValue;\n struct CMutableTransaction;\n class Coin;\n@@ -24,9 +24,9 @@ class COutPoint;\n  * @param  hashType      The signature hash type\n  * @returns JSON object with details of signed transaction\n  */\n-UniValue SignTransaction(CMutableTransaction& mtx, const UniValue& prevTxs, CBasicKeyStore* keystore, std::map<COutPoint, Coin>& coins, bool tempKeystore, const UniValue& hashType);\n+UniValue SignTransaction(CMutableTransaction& mtx, const UniValue& prevTxs, FillableSigningProvider* keystore, std::map<COutPoint, Coin>& coins, bool tempKeystore, const UniValue& hashType);\n \n /** Create a transaction from univalue parameters */\n-CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniValue& outputs_in, const UniValue& locktime, const UniValue& rbf);\n+CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniValue& outputs_in, const UniValue& locktime, bool rbf);\n \n #endif // BITCOIN_RPC_RAWTRANSACTION_UTIL_H"
      },
      {
        "sha": "56cac6661ecf4fbc2800846d59190406ae66ba53",
        "filename": "src/rpc/request.cpp",
        "status": "renamed",
        "additions": 38,
        "deletions": 4,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/rpc/request.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/rpc/request.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/request.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -1,15 +1,16 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <rpc/protocol.h>\n+#include <rpc/request.h>\n+\n+#include <fs.h>\n \n #include <random.h>\n-#include <tinyformat.h>\n+#include <rpc/protocol.h>\n #include <util/system.h>\n #include <util/strencodings.h>\n-#include <util/time.h>\n \n /**\n  * JSON-RPC protocol.  Bitcoin speaks version 1.0 for maximum compatibility,\n@@ -148,3 +149,36 @@ std::vector<UniValue> JSONRPCProcessBatchReply(const UniValue &in, size_t num)\n     }\n     return batch;\n }\n+\n+void JSONRPCRequest::parse(const UniValue& valRequest)\n+{\n+    // Parse request\n+    if (!valRequest.isObject())\n+        throw JSONRPCError(RPC_INVALID_REQUEST, \"Invalid Request object\");\n+    const UniValue& request = valRequest.get_obj();\n+\n+    // Parse id now so errors from here on will have the id\n+    id = find_value(request, \"id\");\n+\n+    // Parse method\n+    UniValue valMethod = find_value(request, \"method\");\n+    if (valMethod.isNull())\n+        throw JSONRPCError(RPC_INVALID_REQUEST, \"Missing method\");\n+    if (!valMethod.isStr())\n+        throw JSONRPCError(RPC_INVALID_REQUEST, \"Method must be a string\");\n+    strMethod = valMethod.get_str();\n+    if (fLogIPs)\n+        LogPrint(BCLog::RPC, \"ThreadRPCServer method=%s user=%s peeraddr=%s\\n\", SanitizeString(strMethod),\n+            this->authUser, this->peerAddr);\n+    else\n+        LogPrint(BCLog::RPC, \"ThreadRPCServer method=%s user=%s\\n\", SanitizeString(strMethod), this->authUser);\n+\n+    // Parse params\n+    UniValue valParams = find_value(request, \"params\");\n+    if (valParams.isArray() || valParams.isObject())\n+        params = valParams;\n+    else if (valParams.isNull())\n+        params = UniValue(UniValue::VARR);\n+    else\n+        throw JSONRPCError(RPC_INVALID_REQUEST, \"Params must be an array or object\");\n+}",
        "previous_filename": "src/rpc/protocol.cpp"
      },
      {
        "sha": "99eb4f9354abb8e7736cb7718c99e32f12b1e6a3",
        "filename": "src/rpc/request.h",
        "status": "added",
        "additions": 42,
        "deletions": 0,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/rpc/request.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/rpc/request.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/request.h?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -0,0 +1,42 @@\n+// Copyright (c) 2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RPC_REQUEST_H\n+#define BITCOIN_RPC_REQUEST_H\n+\n+#include <string>\n+\n+#include <univalue.h>\n+\n+UniValue JSONRPCRequestObj(const std::string& strMethod, const UniValue& params, const UniValue& id);\n+UniValue JSONRPCReplyObj(const UniValue& result, const UniValue& error, const UniValue& id);\n+std::string JSONRPCReply(const UniValue& result, const UniValue& error, const UniValue& id);\n+UniValue JSONRPCError(int code, const std::string& message);\n+\n+/** Generate a new RPC authentication cookie and write it to disk */\n+bool GenerateAuthCookie(std::string *cookie_out);\n+/** Read the RPC authentication cookie from disk */\n+bool GetAuthCookie(std::string *cookie_out);\n+/** Delete RPC authentication cookie from disk */\n+void DeleteAuthCookie();\n+/** Parse JSON-RPC batch reply into a vector */\n+std::vector<UniValue> JSONRPCProcessBatchReply(const UniValue &in, size_t num);\n+\n+class JSONRPCRequest\n+{\n+public:\n+    UniValue id;\n+    std::string strMethod;\n+    UniValue params;\n+    bool fHelp;\n+    std::string URI;\n+    std::string authUser;\n+    std::string peerAddr;\n+\n+    JSONRPCRequest() : id(NullUniValue), params(NullUniValue), fHelp(false) {}\n+    void parse(const UniValue& valRequest);\n+};\n+\n+#endif // BITCOIN_RPC_REQUEST_H"
      },
      {
        "sha": "18f7426bcff2208e3e317641cbf230aa4f7362a8",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 42,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -178,8 +178,6 @@ UniValue stop(const JSONRPCRequest& jsonRequest)\n \n static UniValue uptime(const JSONRPCRequest& jsonRequest)\n {\n-    if (jsonRequest.fHelp || jsonRequest.params.size() > 0)\n-        throw std::runtime_error(\n             RPCHelpMan{\"uptime\",\n                 \"\\nReturns the total uptime of the server.\\n\",\n                             {},\n@@ -190,15 +188,13 @@ static UniValue uptime(const JSONRPCRequest& jsonRequest)\n                     HelpExampleCli(\"uptime\", \"\")\n                 + HelpExampleRpc(\"uptime\", \"\")\n                 },\n-            }.ToString());\n+            }.Check(jsonRequest);\n \n     return GetTime() - GetStartupTime();\n }\n \n static UniValue getrpcinfo(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() > 0) {\n-        throw std::runtime_error(\n             RPCHelpMan{\"getrpcinfo\",\n                 \"\\nReturns details of the RPC server.\\n\",\n                 {},\n@@ -210,15 +206,14 @@ static UniValue getrpcinfo(const JSONRPCRequest& request)\n             \"    \\\"method\\\"       (string)  The name of the RPC command \\n\"\n             \"    \\\"duration\\\"     (numeric)  The running time in microseconds\\n\"\n             \"   },...\\n\"\n-            \"  ]\\n\"\n+            \"  ],\\n\"\n+            \" \\\"logpath\\\": \\\"xxx\\\" (string) The complete file path to the debug log\\n\"\n             \"}\\n\"\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"getrpcinfo\", \"\")\n                 + HelpExampleRpc(\"getrpcinfo\", \"\")},\n-            }.ToString()\n-        );\n-    }\n+            }.Check(request);\n \n     LOCK(g_rpc_server_info.mutex);\n     UniValue active_commands(UniValue::VARR);\n@@ -232,6 +227,10 @@ static UniValue getrpcinfo(const JSONRPCRequest& request)\n     UniValue result(UniValue::VOBJ);\n     result.pushKV(\"active_commands\", active_commands);\n \n+    const std::string path = LogInstance().m_file_path.string();\n+    UniValue log_path(UniValue::VSTR, path);\n+    result.pushKV(\"logpath\", log_path);\n+\n     return result;\n }\n \n@@ -329,39 +328,6 @@ bool RPCIsInWarmup(std::string *outStatus)\n     return fRPCInWarmup;\n }\n \n-void JSONRPCRequest::parse(const UniValue& valRequest)\n-{\n-    // Parse request\n-    if (!valRequest.isObject())\n-        throw JSONRPCError(RPC_INVALID_REQUEST, \"Invalid Request object\");\n-    const UniValue& request = valRequest.get_obj();\n-\n-    // Parse id now so errors from here on will have the id\n-    id = find_value(request, \"id\");\n-\n-    // Parse method\n-    UniValue valMethod = find_value(request, \"method\");\n-    if (valMethod.isNull())\n-        throw JSONRPCError(RPC_INVALID_REQUEST, \"Missing method\");\n-    if (!valMethod.isStr())\n-        throw JSONRPCError(RPC_INVALID_REQUEST, \"Method must be a string\");\n-    strMethod = valMethod.get_str();\n-    if (fLogIPs)\n-        LogPrint(BCLog::RPC, \"ThreadRPCServer method=%s user=%s peeraddr=%s\\n\", SanitizeString(strMethod),\n-            this->authUser, this->peerAddr);\n-    else\n-        LogPrint(BCLog::RPC, \"ThreadRPCServer method=%s user=%s\\n\", SanitizeString(strMethod), this->authUser);\n-\n-    // Parse params\n-    UniValue valParams = find_value(request, \"params\");\n-    if (valParams.isArray() || valParams.isObject())\n-        params = valParams;\n-    else if (valParams.isNull())\n-        params = UniValue(UniValue::VARR);\n-    else\n-        throw JSONRPCError(RPC_INVALID_REQUEST, \"Params must be an array or object\");\n-}\n-\n bool IsDeprecatedRPCEnabled(const std::string& method)\n {\n     const std::vector<std::string> enabled_methods = gArgs.GetArgs(\"-deprecatedrpc\");"
      },
      {
        "sha": "b060db5bf92f8f18ed2d3dade279705b53fbb9d6",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 2,
        "deletions": 16,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -7,13 +7,14 @@\n #define BITCOIN_RPC_SERVER_H\n \n #include <amount.h>\n-#include <rpc/protocol.h>\n+#include <rpc/request.h>\n #include <uint256.h>\n \n #include <list>\n #include <map>\n #include <stdint.h>\n #include <string>\n+#include <functional>\n \n #include <univalue.h>\n \n@@ -27,21 +28,6 @@ namespace RPCServer\n     void OnStopped(std::function<void ()> slot);\n }\n \n-class JSONRPCRequest\n-{\n-public:\n-    UniValue id;\n-    std::string strMethod;\n-    UniValue params;\n-    bool fHelp;\n-    std::string URI;\n-    std::string authUser;\n-    std::string peerAddr;\n-\n-    JSONRPCRequest() : id(NullUniValue), params(NullUniValue), fHelp(false) {}\n-    void parse(const UniValue& valRequest);\n-};\n-\n /** Query whether RPC is running */\n bool IsRPCRunning();\n "
      },
      {
        "sha": "22d67c34daee903669637f6099710c74c09ca8d6",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 9,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -3,11 +3,13 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <key_io.h>\n-#include <keystore.h>\n #include <outputtype.h>\n #include <rpc/util.h>\n+#include <script/descriptor.h>\n+#include <script/signingprovider.h>\n #include <tinyformat.h>\n #include <util/strencodings.h>\n+#include <util/string.h>\n \n #include <tuple>\n \n@@ -130,8 +132,8 @@ CPubKey HexToPubKey(const std::string& hex_in)\n     return vchPubKey;\n }\n \n-// Retrieves a public key for an address from the given CKeyStore\n-CPubKey AddrToPubKey(CKeyStore* const keystore, const std::string& addr_in)\n+// Retrieves a public key for an address from the given FillableSigningProvider\n+CPubKey AddrToPubKey(FillableSigningProvider* const keystore, const std::string& addr_in)\n {\n     CTxDestination dest = DecodeDestination(addr_in);\n     if (!IsValidDestination(dest)) {\n@@ -152,7 +154,7 @@ CPubKey AddrToPubKey(CKeyStore* const keystore, const std::string& addr_in)\n }\n \n // Creates a multisig address from a given list of public keys, number of signatures required, and the address type\n-CTxDestination AddAndGetMultisigDestination(const int required, const std::vector<CPubKey>& pubkeys, OutputType type, CKeyStore& keystore, CScript& script_out)\n+CTxDestination AddAndGetMultisigDestination(const int required, const std::vector<CPubKey>& pubkeys, OutputType type, FillableSigningProvider& keystore, CScript& script_out)\n {\n     // Gather public keys\n     if (required < 1) {\n@@ -644,11 +646,7 @@ std::string RPCArg::ToString(const bool oneline) const\n     }\n     case Type::OBJ:\n     case Type::OBJ_USER_KEYS: {\n-        std::string res;\n-        for (size_t i = 0; i < m_inner.size();) {\n-            res += m_inner[i].ToStringObj(oneline);\n-            if (++i < m_inner.size()) res += \",\";\n-        }\n+        const std::string res = Join(m_inner, \",\", [&](const RPCArg& i) { return i.ToStringObj(oneline); });\n         if (m_type == Type::OBJ) {\n             return \"{\" + res + \"}\";\n         } else {\n@@ -697,3 +695,41 @@ std::pair<int64_t, int64_t> ParseDescriptorRange(const UniValue& value)\n     }\n     return {low, high};\n }\n+\n+std::vector<CScript> EvalDescriptorStringOrObject(const UniValue& scanobject, FlatSigningProvider& provider)\n+{\n+    std::string desc_str;\n+    std::pair<int64_t, int64_t> range = {0, 1000};\n+    if (scanobject.isStr()) {\n+        desc_str = scanobject.get_str();\n+    } else if (scanobject.isObject()) {\n+        UniValue desc_uni = find_value(scanobject, \"desc\");\n+        if (desc_uni.isNull()) throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor needs to be provided in scan object\");\n+        desc_str = desc_uni.get_str();\n+        UniValue range_uni = find_value(scanobject, \"range\");\n+        if (!range_uni.isNull()) {\n+            range = ParseDescriptorRange(range_uni);\n+        }\n+    } else {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan object needs to be either a string or an object\");\n+    }\n+\n+    std::string error;\n+    auto desc = Parse(desc_str, provider, error);\n+    if (!desc) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n+    }\n+    if (!desc->IsRange()) {\n+        range.first = 0;\n+        range.second = 0;\n+    }\n+    std::vector<CScript> ret;\n+    for (int i = range.first; i <= range.second; ++i) {\n+        std::vector<CScript> scripts;\n+        if (!desc->Expand(i, provider, scripts, provider)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Cannot derive script without private keys: '%s'\", desc_str));\n+        }\n+        std::move(scripts.begin(), scripts.end(), std::back_inserter(ret));\n+    }\n+    return ret;\n+}"
      },
      {
        "sha": "4c3322b8798c5d4766c9655c5e51450ceb0b85d3",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 19,
        "deletions": 4,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -9,6 +9,9 @@\n #include <outputtype.h>\n #include <pubkey.h>\n #include <rpc/protocol.h>\n+#include <rpc/request.h>\n+#include <script/script.h>\n+#include <script/sign.h>\n #include <script/standard.h>\n #include <univalue.h>\n \n@@ -17,7 +20,7 @@\n \n #include <boost/variant.hpp>\n \n-class CKeyStore;\n+class FillableSigningProvider;\n class CPubKey;\n class CScript;\n struct InitInterfaces;\n@@ -70,8 +73,8 @@ extern std::string HelpExampleCli(const std::string& methodname, const std::stri\n extern std::string HelpExampleRpc(const std::string& methodname, const std::string& args);\n \n CPubKey HexToPubKey(const std::string& hex_in);\n-CPubKey AddrToPubKey(CKeyStore* const keystore, const std::string& addr_in);\n-CTxDestination AddAndGetMultisigDestination(const int required, const std::vector<CPubKey>& pubkeys, OutputType type, CKeyStore& keystore, CScript& script_out);\n+CPubKey AddrToPubKey(FillableSigningProvider* const keystore, const std::string& addr_in);\n+CTxDestination AddAndGetMultisigDestination(const int required, const std::vector<CPubKey>& pubkeys, OutputType type, FillableSigningProvider& keystore, CScript& script_out);\n \n UniValue DescribeAddress(const CTxDestination& dest);\n \n@@ -84,6 +87,9 @@ UniValue JSONRPCTransactionError(TransactionError terr, const std::string& err_s\n //! Parse a JSON range specified as int64, or [int64, int64]\n std::pair<int64_t, int64_t> ParseDescriptorRange(const UniValue& value);\n \n+/** Evaluate a descriptor given as a string, or as a {\"desc\":...,\"range\":...} object, with default range of 1000. */\n+std::vector<CScript> EvalDescriptorStringOrObject(const UniValue& scanobject, FlatSigningProvider& provider);\n+\n struct RPCArg {\n     enum class Type {\n         OBJ,\n@@ -221,7 +227,7 @@ struct RPCResults {\n \n struct RPCExamples {\n     const std::string m_examples;\n-    RPCExamples(\n+    explicit RPCExamples(\n         std::string examples)\n         : m_examples(std::move(examples))\n     {\n@@ -237,6 +243,15 @@ class RPCHelpMan\n     std::string ToString() const;\n     /** If the supplied number of args is neither too small nor too high */\n     bool IsValidNumArgs(size_t num_args) const;\n+    /**\n+     * Check if the given request is valid according to this command or if\n+     * the user is asking for help information, and throw help when appropriate.\n+     */\n+    inline void Check(const JSONRPCRequest& request) const {\n+        if (request.fHelp || !IsValidNumArgs(request.params.size())) {\n+            throw std::runtime_error(ToString());\n+        }\n+    }\n \n private:\n     const std::string m_name;"
      },
      {
        "sha": "b782ebbd1f36840853bee224ad3c9c0c102a3402",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 181,
        "deletions": 60,
        "changes": 241,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -335,10 +335,12 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n /** Base class for all Descriptor implementations. */\n class DescriptorImpl : public Descriptor\n {\n-    //! Public key arguments for this descriptor (size 1 for PK, PKH, WPKH; any size of Multisig).\n+    //! Public key arguments for this descriptor (size 1 for PK, PKH, WPKH; any size for Multisig).\n     const std::vector<std::unique_ptr<PubkeyProvider>> m_pubkey_args;\n     //! The sub-descriptor argument (nullptr for everything but SH and WSH).\n-    const std::unique_ptr<DescriptorImpl> m_script_arg;\n+    //! In doc/descriptors.m this is referred to as SCRIPT expressions sh(SCRIPT)\n+    //! and wsh(SCRIPT), and distinct from KEY expressions and ADDR expressions.\n+    const std::unique_ptr<DescriptorImpl> m_subdescriptor_arg;\n     //! The string name of the descriptor function.\n     const std::string m_name;\n \n@@ -349,23 +351,23 @@ class DescriptorImpl : public Descriptor\n     /** A helper function to construct the scripts for this descriptor.\n      *\n      *  This function is invoked once for every CScript produced by evaluating\n-     *  m_script_arg, or just once in case m_script_arg is nullptr.\n+     *  m_subdescriptor_arg, or just once in case m_subdescriptor_arg is nullptr.\n \n      *  @param pubkeys The evaluations of the m_pubkey_args field.\n-     *  @param script The evaluation of m_script_arg (or nullptr when m_script_arg is nullptr).\n+     *  @param script The evaluation of m_subdescriptor_arg (or nullptr when m_subdescriptor_arg is nullptr).\n      *  @param out A FlatSigningProvider to put scripts or public keys in that are necessary to the solver.\n      *             The script arguments to this function are automatically added, as is the origin info of the provided pubkeys.\n      *  @return A vector with scriptPubKeys for this descriptor.\n      */\n     virtual std::vector<CScript> MakeScripts(const std::vector<CPubKey>& pubkeys, const CScript* script, FlatSigningProvider& out) const = 0;\n \n public:\n-    DescriptorImpl(std::vector<std::unique_ptr<PubkeyProvider>> pubkeys, std::unique_ptr<DescriptorImpl> script, const std::string& name) : m_pubkey_args(std::move(pubkeys)), m_script_arg(std::move(script)), m_name(name) {}\n+    DescriptorImpl(std::vector<std::unique_ptr<PubkeyProvider>> pubkeys, std::unique_ptr<DescriptorImpl> script, const std::string& name) : m_pubkey_args(std::move(pubkeys)), m_subdescriptor_arg(std::move(script)), m_name(name) {}\n \n     bool IsSolvable() const override\n     {\n-        if (m_script_arg) {\n-            if (!m_script_arg->IsSolvable()) return false;\n+        if (m_subdescriptor_arg) {\n+            if (!m_subdescriptor_arg->IsSolvable()) return false;\n         }\n         return true;\n     }\n@@ -375,8 +377,8 @@ class DescriptorImpl : public Descriptor\n         for (const auto& pubkey : m_pubkey_args) {\n             if (pubkey->IsRange()) return true;\n         }\n-        if (m_script_arg) {\n-            if (m_script_arg->IsRange()) return true;\n+        if (m_subdescriptor_arg) {\n+            if (m_subdescriptor_arg->IsRange()) return true;\n         }\n         return false;\n     }\n@@ -396,10 +398,10 @@ class DescriptorImpl : public Descriptor\n             }\n             ret += std::move(tmp);\n         }\n-        if (m_script_arg) {\n+        if (m_subdescriptor_arg) {\n             if (pos++) ret += \",\";\n             std::string tmp;\n-            if (!m_script_arg->ToStringHelper(arg, tmp, priv)) return false;\n+            if (!m_subdescriptor_arg->ToStringHelper(arg, tmp, priv)) return false;\n             ret += std::move(tmp);\n         }\n         out = std::move(ret) + \")\";\n@@ -428,6 +430,8 @@ class DescriptorImpl : public Descriptor\n         // Construct temporary data in `entries` and `subscripts`, to avoid producing output in case of failure.\n         for (const auto& p : m_pubkey_args) {\n             entries.emplace_back();\n+            // If we have a cache, we don't need GetPubKey to compute the public key.\n+            // Pass in nullptr to signify only origin info is desired.\n             if (!p->GetPubKey(pos, arg, cache_read ? nullptr : &entries.back().first, entries.back().second)) return false;\n             if (cache_read) {\n                 // Cached expanded public key exists, use it.\n@@ -444,9 +448,9 @@ class DescriptorImpl : public Descriptor\n             }\n         }\n         std::vector<CScript> subscripts;\n-        if (m_script_arg) {\n+        if (m_subdescriptor_arg) {\n             FlatSigningProvider subprovider;\n-            if (!m_script_arg->ExpandHelper(pos, arg, cache_read, subscripts, subprovider, cache_write)) return false;\n+            if (!m_subdescriptor_arg->ExpandHelper(pos, arg, cache_read, subscripts, subprovider, cache_write)) return false;\n             out = Merge(out, subprovider);\n         }\n \n@@ -456,7 +460,7 @@ class DescriptorImpl : public Descriptor\n             pubkeys.push_back(entry.first);\n             out.origins.emplace(entry.first.GetID(), std::make_pair<CPubKey, KeyOriginInfo>(CPubKey(entry.first), std::move(entry.second)));\n         }\n-        if (m_script_arg) {\n+        if (m_subdescriptor_arg) {\n             for (const auto& subscript : subscripts) {\n                 out.scripts.emplace(CScriptID(subscript), subscript);\n                 std::vector<CScript> addscripts = MakeScripts(pubkeys, &subscript, out);\n@@ -488,9 +492,9 @@ class DescriptorImpl : public Descriptor\n             if (!p->GetPrivKey(pos, provider, key)) continue;\n             out.keys.emplace(key.GetPubKey().GetID(), key);\n         }\n-        if (m_script_arg) {\n+        if (m_subdescriptor_arg) {\n             FlatSigningProvider subprovider;\n-            m_script_arg->ExpandPrivate(pos, provider, subprovider);\n+            m_subdescriptor_arg->ExpandPrivate(pos, provider, subprovider);\n             out = Merge(out, subprovider);\n         }\n     }\n@@ -686,7 +690,7 @@ std::vector<Span<const char>> Split(const Span<const char>& sp, char sep)\n }\n \n /** Parse a key path, being passed a split list of elements (the first element is ignored). */\n-NODISCARD bool ParseKeyPath(const std::vector<Span<const char>>& split, KeyPath& out)\n+NODISCARD bool ParseKeyPath(const std::vector<Span<const char>>& split, KeyPath& out, std::string& error)\n {\n     for (size_t i = 1; i < split.size(); ++i) {\n         Span<const char> elem = split[i];\n@@ -696,33 +700,60 @@ NODISCARD bool ParseKeyPath(const std::vector<Span<const char>>& split, KeyPath&\n             hardened = true;\n         }\n         uint32_t p;\n-        if (!ParseUInt32(std::string(elem.begin(), elem.end()), &p) || p > 0x7FFFFFFFUL) return false;\n+        if (!ParseUInt32(std::string(elem.begin(), elem.end()), &p)) {\n+            error = strprintf(\"Key path value '%s' is not a valid uint32\", std::string(elem.begin(), elem.end()).c_str());\n+            return false;\n+        } else if (p > 0x7FFFFFFFUL) {\n+            error = strprintf(\"Key path value %u is out of range\", p);\n+            return false;\n+        }\n         out.push_back(p | (((uint32_t)hardened) << 31));\n     }\n     return true;\n }\n \n /** Parse a public key that excludes origin information. */\n-std::unique_ptr<PubkeyProvider> ParsePubkeyInner(const Span<const char>& sp, bool permit_uncompressed, FlatSigningProvider& out)\n+std::unique_ptr<PubkeyProvider> ParsePubkeyInner(const Span<const char>& sp, bool permit_uncompressed, FlatSigningProvider& out, std::string& error)\n {\n     auto split = Split(sp, '/');\n     std::string str(split[0].begin(), split[0].end());\n+    if (str.size() == 0) {\n+        error = \"No key provided\";\n+        return nullptr;\n+    }\n     if (split.size() == 1) {\n         if (IsHex(str)) {\n             std::vector<unsigned char> data = ParseHex(str);\n             CPubKey pubkey(data);\n-            if (pubkey.IsFullyValid() && (permit_uncompressed || pubkey.IsCompressed())) return MakeUnique<ConstPubkeyProvider>(pubkey);\n+            if (pubkey.IsFullyValid()) {\n+                if (permit_uncompressed || pubkey.IsCompressed()) {\n+                    return MakeUnique<ConstPubkeyProvider>(pubkey);\n+                } else {\n+                    error = \"Uncompressed keys are not allowed\";\n+                    return nullptr;\n+                }\n+            }\n+            error = strprintf(\"Pubkey '%s' is invalid\", str);\n+            return nullptr;\n         }\n         CKey key = DecodeSecret(str);\n-        if (key.IsValid() && (permit_uncompressed || key.IsCompressed())) {\n-            CPubKey pubkey = key.GetPubKey();\n-            out.keys.emplace(pubkey.GetID(), key);\n-            return MakeUnique<ConstPubkeyProvider>(pubkey);\n+        if (key.IsValid()) {\n+            if (permit_uncompressed || key.IsCompressed()) {\n+                CPubKey pubkey = key.GetPubKey();\n+                out.keys.emplace(pubkey.GetID(), key);\n+                return MakeUnique<ConstPubkeyProvider>(pubkey);\n+            } else {\n+                error = \"Uncompressed keys are not allowed\";\n+                return nullptr;\n+            }\n         }\n     }\n     CExtKey extkey = DecodeExtKey(str);\n     CExtPubKey extpubkey = DecodeExtPubKey(str);\n-    if (!extkey.key.IsValid() && !extpubkey.pubkey.IsValid()) return nullptr;\n+    if (!extkey.key.IsValid() && !extpubkey.pubkey.IsValid()) {\n+        error = strprintf(\"key '%s' is not valid\", str);\n+        return nullptr;\n+    }\n     KeyPath path;\n     DeriveType type = DeriveType::NO;\n     if (split.back() == MakeSpan(\"*\").first(1)) {\n@@ -732,7 +763,7 @@ std::unique_ptr<PubkeyProvider> ParsePubkeyInner(const Span<const char>& sp, boo\n         split.pop_back();\n         type = DeriveType::HARDENED;\n     }\n-    if (!ParseKeyPath(split, path)) return nullptr;\n+    if (!ParseKeyPath(split, path, error)) return nullptr;\n     if (extkey.key.IsValid()) {\n         extpubkey = extkey.Neuter();\n         out.keys.emplace(extpubkey.pubkey.GetID(), extkey.key);\n@@ -741,95 +772,154 @@ std::unique_ptr<PubkeyProvider> ParsePubkeyInner(const Span<const char>& sp, boo\n }\n \n /** Parse a public key including origin information (if enabled). */\n-std::unique_ptr<PubkeyProvider> ParsePubkey(const Span<const char>& sp, bool permit_uncompressed, FlatSigningProvider& out)\n+std::unique_ptr<PubkeyProvider> ParsePubkey(const Span<const char>& sp, bool permit_uncompressed, FlatSigningProvider& out, std::string& error)\n {\n     auto origin_split = Split(sp, ']');\n-    if (origin_split.size() > 2) return nullptr;\n-    if (origin_split.size() == 1) return ParsePubkeyInner(origin_split[0], permit_uncompressed, out);\n-    if (origin_split[0].size() < 1 || origin_split[0][0] != '[') return nullptr;\n+    if (origin_split.size() > 2) {\n+        error = \"Multiple ']' characters found for a single pubkey\";\n+        return nullptr;\n+    }\n+    if (origin_split.size() == 1) return ParsePubkeyInner(origin_split[0], permit_uncompressed, out, error);\n+    if (origin_split[0].size() < 1 || origin_split[0][0] != '[') {\n+        error = strprintf(\"Key origin start '[ character expected but not found, got '%c' instead\", origin_split[0][0]);\n+        return nullptr;\n+    }\n     auto slash_split = Split(origin_split[0].subspan(1), '/');\n-    if (slash_split[0].size() != 8) return nullptr;\n+    if (slash_split[0].size() != 8) {\n+        error = strprintf(\"Fingerprint is not 4 bytes (%u characters instead of 8 characters)\", slash_split[0].size());\n+        return nullptr;\n+    }\n     std::string fpr_hex = std::string(slash_split[0].begin(), slash_split[0].end());\n-    if (!IsHex(fpr_hex)) return nullptr;\n+    if (!IsHex(fpr_hex)) {\n+        error = strprintf(\"Fingerprint '%s' is not hex\", fpr_hex);\n+        return nullptr;\n+    }\n     auto fpr_bytes = ParseHex(fpr_hex);\n     KeyOriginInfo info;\n     static_assert(sizeof(info.fingerprint) == 4, \"Fingerprint must be 4 bytes\");\n     assert(fpr_bytes.size() == 4);\n     std::copy(fpr_bytes.begin(), fpr_bytes.end(), info.fingerprint);\n-    if (!ParseKeyPath(slash_split, info.path)) return nullptr;\n-    auto provider = ParsePubkeyInner(origin_split[1], permit_uncompressed, out);\n+    if (!ParseKeyPath(slash_split, info.path, error)) return nullptr;\n+    auto provider = ParsePubkeyInner(origin_split[1], permit_uncompressed, out, error);\n     if (!provider) return nullptr;\n     return MakeUnique<OriginPubkeyProvider>(std::move(info), std::move(provider));\n }\n \n /** Parse a script in a particular context. */\n-std::unique_ptr<DescriptorImpl> ParseScript(Span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out)\n+std::unique_ptr<DescriptorImpl> ParseScript(Span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n {\n     auto expr = Expr(sp);\n     if (Func(\"pk\", expr)) {\n-        auto pubkey = ParsePubkey(expr, ctx != ParseScriptContext::P2WSH, out);\n+        auto pubkey = ParsePubkey(expr, ctx != ParseScriptContext::P2WSH, out, error);\n         if (!pubkey) return nullptr;\n         return MakeUnique<PKDescriptor>(std::move(pubkey));\n     }\n     if (Func(\"pkh\", expr)) {\n-        auto pubkey = ParsePubkey(expr, ctx != ParseScriptContext::P2WSH, out);\n+        auto pubkey = ParsePubkey(expr, ctx != ParseScriptContext::P2WSH, out, error);\n         if (!pubkey) return nullptr;\n         return MakeUnique<PKHDescriptor>(std::move(pubkey));\n     }\n     if (ctx == ParseScriptContext::TOP && Func(\"combo\", expr)) {\n-        auto pubkey = ParsePubkey(expr, true, out);\n+        auto pubkey = ParsePubkey(expr, true, out, error);\n         if (!pubkey) return nullptr;\n         return MakeUnique<ComboDescriptor>(std::move(pubkey));\n+    } else if (ctx != ParseScriptContext::TOP && Func(\"combo\", expr)) {\n+        error = \"Cannot have combo in non-top level\";\n+        return nullptr;\n     }\n     if (Func(\"multi\", expr)) {\n         auto threshold = Expr(expr);\n         uint32_t thres;\n         std::vector<std::unique_ptr<PubkeyProvider>> providers;\n-        if (!ParseUInt32(std::string(threshold.begin(), threshold.end()), &thres)) return nullptr;\n+        if (!ParseUInt32(std::string(threshold.begin(), threshold.end()), &thres)) {\n+            error = strprintf(\"Multi threshold '%s' is not valid\", std::string(threshold.begin(), threshold.end()).c_str());\n+            return nullptr;\n+        }\n         size_t script_size = 0;\n         while (expr.size()) {\n-            if (!Const(\",\", expr)) return nullptr;\n+            if (!Const(\",\", expr)) {\n+                error = strprintf(\"Multi: expected ',', got '%c'\", expr[0]);\n+                return nullptr;\n+            }\n             auto arg = Expr(expr);\n-            auto pk = ParsePubkey(arg, ctx != ParseScriptContext::P2WSH, out);\n+            auto pk = ParsePubkey(arg, ctx != ParseScriptContext::P2WSH, out, error);\n             if (!pk) return nullptr;\n             script_size += pk->GetSize() + 1;\n             providers.emplace_back(std::move(pk));\n         }\n-        if (providers.size() < 1 || providers.size() > 16 || thres < 1 || thres > providers.size()) return nullptr;\n+        if (providers.size() < 1 || providers.size() > 16) {\n+            error = strprintf(\"Cannot have %u keys in multisig; must have between 1 and 16 keys, inclusive\", providers.size());\n+            return nullptr;\n+        } else if (thres < 1) {\n+            error = strprintf(\"Multisig threshold cannot be %d, must be at least 1\", thres);\n+            return nullptr;\n+        } else if (thres > providers.size()) {\n+            error = strprintf(\"Multisig threshold cannot be larger than the number of keys; threshold is %d but only %u keys specified\", thres, providers.size());\n+            return nullptr;\n+        }\n         if (ctx == ParseScriptContext::TOP) {\n-            if (providers.size() > 3) return nullptr; // Not more than 3 pubkeys for raw multisig\n+            if (providers.size() > 3) {\n+                error = strprintf(\"Cannot have %u pubkeys in bare multisig; only at most 3 pubkeys\", providers.size());\n+                return nullptr;\n+            }\n         }\n         if (ctx == ParseScriptContext::P2SH) {\n-            if (script_size + 3 > 520) return nullptr; // Enforce P2SH script size limit\n+            if (script_size + 3 > 520) {\n+                error = strprintf(\"P2SH script is too large, %d bytes is larger than 520 bytes\", script_size + 3);\n+                return nullptr;\n+            }\n         }\n         return MakeUnique<MultisigDescriptor>(thres, std::move(providers));\n     }\n     if (ctx != ParseScriptContext::P2WSH && Func(\"wpkh\", expr)) {\n-        auto pubkey = ParsePubkey(expr, false, out);\n+        auto pubkey = ParsePubkey(expr, false, out, error);\n         if (!pubkey) return nullptr;\n         return MakeUnique<WPKHDescriptor>(std::move(pubkey));\n+    } else if (ctx == ParseScriptContext::P2WSH && Func(\"wpkh\", expr)) {\n+        error = \"Cannot have wpkh within wsh\";\n+        return nullptr;\n     }\n     if (ctx == ParseScriptContext::TOP && Func(\"sh\", expr)) {\n-        auto desc = ParseScript(expr, ParseScriptContext::P2SH, out);\n+        auto desc = ParseScript(expr, ParseScriptContext::P2SH, out, error);\n         if (!desc || expr.size()) return nullptr;\n         return MakeUnique<SHDescriptor>(std::move(desc));\n+    } else if (ctx != ParseScriptContext::TOP && Func(\"sh\", expr)) {\n+        error = \"Cannot have sh in non-top level\";\n+        return nullptr;\n     }\n     if (ctx != ParseScriptContext::P2WSH && Func(\"wsh\", expr)) {\n-        auto desc = ParseScript(expr, ParseScriptContext::P2WSH, out);\n+        auto desc = ParseScript(expr, ParseScriptContext::P2WSH, out, error);\n         if (!desc || expr.size()) return nullptr;\n         return MakeUnique<WSHDescriptor>(std::move(desc));\n+    } else if (ctx == ParseScriptContext::P2WSH && Func(\"wsh\", expr)) {\n+        error = \"Cannot have wsh within wsh\";\n+        return nullptr;\n     }\n     if (ctx == ParseScriptContext::TOP && Func(\"addr\", expr)) {\n         CTxDestination dest = DecodeDestination(std::string(expr.begin(), expr.end()));\n-        if (!IsValidDestination(dest)) return nullptr;\n+        if (!IsValidDestination(dest)) {\n+            error = \"Address is not valid\";\n+            return nullptr;\n+        }\n         return MakeUnique<AddressDescriptor>(std::move(dest));\n     }\n     if (ctx == ParseScriptContext::TOP && Func(\"raw\", expr)) {\n         std::string str(expr.begin(), expr.end());\n-        if (!IsHex(str)) return nullptr;\n+        if (!IsHex(str)) {\n+            error = \"Raw script is not hex\";\n+            return nullptr;\n+        }\n         auto bytes = ParseHex(str);\n         return MakeUnique<RawDescriptor>(CScript(bytes.begin(), bytes.end()));\n     }\n+    if (ctx == ParseScriptContext::P2SH) {\n+        error = \"A function is needed within P2SH\";\n+        return nullptr;\n+    } else if (ctx == ParseScriptContext::P2WSH) {\n+        error = \"A function is needed within P2WSH\";\n+        return nullptr;\n+    }\n+    error = strprintf(\"%s is not a valid descriptor function\", std::string(expr.begin(), expr.end()));\n     return nullptr;\n }\n \n@@ -910,27 +1000,58 @@ std::unique_ptr<DescriptorImpl> InferScript(const CScript& script, ParseScriptCo\n \n } // namespace\n \n-std::unique_ptr<Descriptor> Parse(const std::string& descriptor, FlatSigningProvider& out, bool require_checksum)\n+/** Check a descriptor checksum, and update desc to be the checksum-less part. */\n+bool CheckChecksum(Span<const char>& sp, bool require_checksum, std::string& error, std::string* out_checksum = nullptr)\n {\n-    Span<const char> sp(descriptor.data(), descriptor.size());\n-\n-    // Checksum checks\n     auto check_split = Split(sp, '#');\n-    if (check_split.size() > 2) return nullptr; // Multiple '#' symbols\n-    if (check_split.size() == 1 && require_checksum) return nullptr; // Missing checksum\n+    if (check_split.size() > 2) {\n+        error = \"Multiple '#' symbols\";\n+        return false;\n+    }\n+    if (check_split.size() == 1 && require_checksum){\n+        error = \"Missing checksum\";\n+        return false;\n+    }\n+    if (check_split.size() == 2) {\n+        if (check_split[1].size() != 8) {\n+            error = strprintf(\"Expected 8 character checksum, not %u characters\", check_split[1].size());\n+            return false;\n+        }\n+    }\n+    auto checksum = DescriptorChecksum(check_split[0]);\n+    if (checksum.empty()) {\n+        error = \"Invalid characters in payload\";\n+        return false;\n+    }\n     if (check_split.size() == 2) {\n-        if (check_split[1].size() != 8) return nullptr; // Unexpected length for checksum\n-        auto checksum = DescriptorChecksum(check_split[0]);\n-        if (checksum.empty()) return nullptr; // Invalid characters in payload\n-        if (!std::equal(checksum.begin(), checksum.end(), check_split[1].begin())) return nullptr; // Checksum mismatch\n+        if (!std::equal(checksum.begin(), checksum.end(), check_split[1].begin())) {\n+            error = strprintf(\"Provided checksum '%s' does not match computed checksum '%s'\", std::string(check_split[1].begin(), check_split[1].end()), checksum);\n+            return false;\n+        }\n     }\n+    if (out_checksum) *out_checksum = std::move(checksum);\n     sp = check_split[0];\n+    return true;\n+}\n \n-    auto ret = ParseScript(sp, ParseScriptContext::TOP, out);\n+std::unique_ptr<Descriptor> Parse(const std::string& descriptor, FlatSigningProvider& out, std::string& error, bool require_checksum)\n+{\n+    Span<const char> sp(descriptor.data(), descriptor.size());\n+    if (!CheckChecksum(sp, require_checksum, error)) return nullptr;\n+    auto ret = ParseScript(sp, ParseScriptContext::TOP, out, error);\n     if (sp.size() == 0 && ret) return std::unique_ptr<Descriptor>(std::move(ret));\n     return nullptr;\n }\n \n+std::string GetDescriptorChecksum(const std::string& descriptor)\n+{\n+    std::string ret;\n+    std::string error;\n+    Span<const char> sp(descriptor.data(), descriptor.size());\n+    if (!CheckChecksum(sp, false, error, &ret)) return \"\";\n+    return ret;\n+}\n+\n std::unique_ptr<Descriptor> InferDescriptor(const CScript& script, const SigningProvider& provider)\n {\n     return InferScript(script, ParseScriptContext::TOP, provider);"
      },
      {
        "sha": "0195ca09397f2009e94c5468d1f36b842352998c",
        "filename": "src/script/descriptor.h",
        "status": "modified",
        "additions": 13,
        "deletions": 4,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/script/descriptor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/script/descriptor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.h?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -7,6 +7,7 @@\n \n #include <script/script.h>\n #include <script/sign.h>\n+#include <script/signingprovider.h>\n \n #include <vector>\n \n@@ -46,17 +47,17 @@ struct Descriptor {\n      *\n      * pos: the position at which to expand the descriptor. If IsRange() is false, this is ignored.\n      * provider: the provider to query for private keys in case of hardened derivation.\n-     * output_script: the expanded scriptPubKeys will be put here.\n+     * output_scripts: the expanded scriptPubKeys will be put here.\n      * out: scripts and public keys necessary for solving the expanded scriptPubKeys will be put here (may be equal to provider).\n-     * cache: vector which will be overwritten with cache data necessary to-evaluate the descriptor at this point without access to private keys.\n+     * cache: vector which will be overwritten with cache data necessary to evaluate the descriptor at this point without access to private keys.\n      */\n     virtual bool Expand(int pos, const SigningProvider& provider, std::vector<CScript>& output_scripts, FlatSigningProvider& out, std::vector<unsigned char>* cache = nullptr) const = 0;\n \n     /** Expand a descriptor at a specified position using cached expansion data.\n      *\n      * pos: the position at which to expand the descriptor. If IsRange() is false, this is ignored.\n      * cache: vector from which cached expansion data will be read.\n-     * output_script: the expanded scriptPubKeys will be put here.\n+     * output_scripts: the expanded scriptPubKeys will be put here.\n      * out: scripts and public keys necessary for solving the expanded scriptPubKeys will be put here (may be equal to provider).\n      */\n     virtual bool ExpandFromCache(int pos, const std::vector<unsigned char>& cache, std::vector<CScript>& output_scripts, FlatSigningProvider& out) const = 0;\n@@ -78,7 +79,15 @@ struct Descriptor {\n  * If a parse error occurs, or the checksum is missing/invalid, or anything\n  * else is wrong, nullptr is returned.\n  */\n-std::unique_ptr<Descriptor> Parse(const std::string& descriptor, FlatSigningProvider& out, bool require_checksum = false);\n+std::unique_ptr<Descriptor> Parse(const std::string& descriptor, FlatSigningProvider& out, std::string& error, bool require_checksum = false);\n+\n+/** Get the checksum for a descriptor.\n+ *\n+ * If it already has one, and it is correct, return the checksum in the input.\n+ * If it already has one that is wrong, return \"\".\n+ * If it does not already have one, return the checksum that would need to be added.\n+ */\n+std::string GetDescriptorChecksum(const std::string& descriptor);\n \n /** Find a descriptor for the specified script, using information from provider where possible.\n  *"
      },
      {
        "sha": "f8701b6d01a6d67f8b67183f913c8c2819a35ed4",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -926,7 +926,7 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n \n                     // Drop the signature in pre-segwit scripts but not segwit scripts\n                     if (sigversion == SigVersion::BASE) {\n-                        int found = FindAndDelete(scriptCode, CScript(vchSig));\n+                        int found = FindAndDelete(scriptCode, CScript() << vchSig);\n                         if (found > 0 && (flags & SCRIPT_VERIFY_CONST_SCRIPTCODE))\n                             return set_error(serror, SCRIPT_ERR_SIG_FINDANDDELETE);\n                     }\n@@ -992,7 +992,7 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                     {\n                         valtype& vchSig = stacktop(-isig-k);\n                         if (sigversion == SigVersion::BASE) {\n-                            int found = FindAndDelete(scriptCode, CScript(vchSig));\n+                            int found = FindAndDelete(scriptCode, CScript() << vchSig);\n                             if (found > 0 && (flags & SCRIPT_VERIFY_CONST_SCRIPTCODE))\n                                 return set_error(serror, SCRIPT_ERR_SIG_FINDANDDELETE);\n                         }"
      },
      {
        "sha": "610f2335009d1aad827c91bc7b7091bca012b97a",
        "filename": "src/script/keyorigin.h",
        "status": "added",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/script/keyorigin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/script/keyorigin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/keyorigin.h?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -0,0 +1,37 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SCRIPT_KEYORIGIN_H\n+#define BITCOIN_SCRIPT_KEYORIGIN_H\n+\n+#include <serialize.h>\n+#include <streams.h>\n+#include <vector>\n+\n+struct KeyOriginInfo\n+{\n+    unsigned char fingerprint[4]; //!< First 32 bits of the Hash160 of the public key at the root of the path\n+    std::vector<uint32_t> path;\n+\n+    friend bool operator==(const KeyOriginInfo& a, const KeyOriginInfo& b)\n+    {\n+        return std::equal(std::begin(a.fingerprint), std::end(a.fingerprint), std::begin(b.fingerprint)) && a.path == b.path;\n+    }\n+\n+    ADD_SERIALIZE_METHODS;\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action)\n+    {\n+        READWRITE(fingerprint);\n+        READWRITE(path);\n+    }\n+\n+    void clear()\n+    {\n+        memset(fingerprint, 0, 4);\n+        path.clear();\n+    }\n+};\n+\n+#endif // BITCOIN_SCRIPT_KEYORIGIN_H"
      },
      {
        "sha": "6355b8a704e19749fafa65eb14fe91c8e2043d8e",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -437,7 +437,9 @@ class CScript : public CScriptBase\n \n     explicit CScript(opcodetype b)     { operator<<(b); }\n     explicit CScript(const CScriptNum& b) { operator<<(b); }\n-    explicit CScript(const std::vector<unsigned char>& b) { operator<<(b); }\n+    // delete non-existent constructor to defend against future introduction\n+    // e.g. via prevector\n+    explicit CScript(const std::vector<unsigned char>& b) = delete;\n \n \n     CScript& operator<<(int64_t b) { return push_int64(b); }"
      },
      {
        "sha": "13481af9c50636d4f527fe7648ab626b65ea1791",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 56,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -8,6 +8,7 @@\n #include <key.h>\n #include <policy/policy.h>\n #include <primitives/transaction.h>\n+#include <script/signingprovider.h>\n #include <script/standard.h>\n #include <uint256.h>\n \n@@ -423,22 +424,10 @@ class DummySignatureCreator final : public BaseSignatureCreator {\n     }\n };\n \n-template<typename M, typename K, typename V>\n-bool LookupHelper(const M& map, const K& key, V& value)\n-{\n-    auto it = map.find(key);\n-    if (it != map.end()) {\n-        value = it->second;\n-        return true;\n-    }\n-    return false;\n-}\n-\n }\n \n const BaseSignatureCreator& DUMMY_SIGNATURE_CREATOR = DummySignatureCreator(32, 32);\n const BaseSignatureCreator& DUMMY_MAXIMUM_SIGNATURE_CREATOR = DummySignatureCreator(33, 32);\n-const SigningProvider& DUMMY_SIGNING_PROVIDER = SigningProvider();\n \n bool IsSolvable(const SigningProvider& provider, const CScript& script)\n {\n@@ -459,49 +448,18 @@ bool IsSolvable(const SigningProvider& provider, const CScript& script)\n     return false;\n }\n \n-bool HidingSigningProvider::GetCScript(const CScriptID& scriptid, CScript& script) const\n-{\n-    return m_provider->GetCScript(scriptid, script);\n-}\n-\n-bool HidingSigningProvider::GetPubKey(const CKeyID& keyid, CPubKey& pubkey) const\n-{\n-    return m_provider->GetPubKey(keyid, pubkey);\n-}\n-\n-bool HidingSigningProvider::GetKey(const CKeyID& keyid, CKey& key) const\n-{\n-    if (m_hide_secret) return false;\n-    return m_provider->GetKey(keyid, key);\n-}\n-\n-bool HidingSigningProvider::GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const\n+bool IsSegWitOutput(const SigningProvider& provider, const CScript& script)\n {\n-    if (m_hide_origin) return false;\n-    return m_provider->GetKeyOrigin(keyid, info);\n-}\n-\n-bool FlatSigningProvider::GetCScript(const CScriptID& scriptid, CScript& script) const { return LookupHelper(scripts, scriptid, script); }\n-bool FlatSigningProvider::GetPubKey(const CKeyID& keyid, CPubKey& pubkey) const { return LookupHelper(pubkeys, keyid, pubkey); }\n-bool FlatSigningProvider::GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const\n-{\n-    std::pair<CPubKey, KeyOriginInfo> out;\n-    bool ret = LookupHelper(origins, keyid, out);\n-    if (ret) info = std::move(out.second);\n-    return ret;\n-}\n-bool FlatSigningProvider::GetKey(const CKeyID& keyid, CKey& key) const { return LookupHelper(keys, keyid, key); }\n-\n-FlatSigningProvider Merge(const FlatSigningProvider& a, const FlatSigningProvider& b)\n-{\n-    FlatSigningProvider ret;\n-    ret.scripts = a.scripts;\n-    ret.scripts.insert(b.scripts.begin(), b.scripts.end());\n-    ret.pubkeys = a.pubkeys;\n-    ret.pubkeys.insert(b.pubkeys.begin(), b.pubkeys.end());\n-    ret.keys = a.keys;\n-    ret.keys.insert(b.keys.begin(), b.keys.end());\n-    ret.origins = a.origins;\n-    ret.origins.insert(b.origins.begin(), b.origins.end());\n-    return ret;\n+    std::vector<valtype> solutions;\n+    auto whichtype = Solver(script, solutions);\n+    if (whichtype == TX_WITNESS_V0_SCRIPTHASH || whichtype == TX_WITNESS_V0_KEYHASH || whichtype == TX_WITNESS_UNKNOWN) return true;\n+    if (whichtype == TX_SCRIPTHASH) {\n+        auto h160 = uint160(solutions[0]);\n+        CScript subscript;\n+        if (provider.GetCScript(h160, subscript)) {\n+            whichtype = Solver(subscript, solutions);\n+            if (whichtype == TX_WITNESS_V0_SCRIPTHASH || whichtype == TX_WITNESS_V0_KEYHASH || whichtype == TX_WITNESS_UNKNOWN) return true;\n+        }\n+    }\n+    return false;\n }"
      },
      {
        "sha": "0e751afd3ba5e4951745f01d9d2cba720ecf3856",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 5,
        "deletions": 68,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -10,84 +10,18 @@\n #include <hash.h>\n #include <pubkey.h>\n #include <script/interpreter.h>\n+#include <script/keyorigin.h>\n #include <streams.h>\n \n class CKey;\n class CKeyID;\n class CScript;\n class CScriptID;\n class CTransaction;\n+class SigningProvider;\n \n struct CMutableTransaction;\n \n-struct KeyOriginInfo\n-{\n-    unsigned char fingerprint[4]; //!< First 32 bits of the Hash160 of the public key at the root of the path\n-    std::vector<uint32_t> path;\n-\n-    friend bool operator==(const KeyOriginInfo& a, const KeyOriginInfo& b)\n-    {\n-        return std::equal(std::begin(a.fingerprint), std::end(a.fingerprint), std::begin(b.fingerprint)) && a.path == b.path;\n-    }\n-\n-    ADD_SERIALIZE_METHODS;\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action)\n-    {\n-        READWRITE(fingerprint);\n-        READWRITE(path);\n-    }\n-\n-    void clear()\n-    {\n-        memset(fingerprint, 0, 4);\n-        path.clear();\n-    }\n-};\n-\n-/** An interface to be implemented by keystores that support signing. */\n-class SigningProvider\n-{\n-public:\n-    virtual ~SigningProvider() {}\n-    virtual bool GetCScript(const CScriptID &scriptid, CScript& script) const { return false; }\n-    virtual bool GetPubKey(const CKeyID &address, CPubKey& pubkey) const { return false; }\n-    virtual bool GetKey(const CKeyID &address, CKey& key) const { return false; }\n-    virtual bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const { return false; }\n-};\n-\n-extern const SigningProvider& DUMMY_SIGNING_PROVIDER;\n-\n-class HidingSigningProvider : public SigningProvider\n-{\n-private:\n-    const bool m_hide_secret;\n-    const bool m_hide_origin;\n-    const SigningProvider* m_provider;\n-\n-public:\n-    HidingSigningProvider(const SigningProvider* provider, bool hide_secret, bool hide_origin) : m_hide_secret(hide_secret), m_hide_origin(hide_origin), m_provider(provider) {}\n-    bool GetCScript(const CScriptID& scriptid, CScript& script) const override;\n-    bool GetPubKey(const CKeyID& keyid, CPubKey& pubkey) const override;\n-    bool GetKey(const CKeyID& keyid, CKey& key) const override;\n-    bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override;\n-};\n-\n-struct FlatSigningProvider final : public SigningProvider\n-{\n-    std::map<CScriptID, CScript> scripts;\n-    std::map<CKeyID, CPubKey> pubkeys;\n-    std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>> origins;\n-    std::map<CKeyID, CKey> keys;\n-\n-    bool GetCScript(const CScriptID& scriptid, CScript& script) const override;\n-    bool GetPubKey(const CKeyID& keyid, CPubKey& pubkey) const override;\n-    bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override;\n-    bool GetKey(const CKeyID& keyid, CKey& key) const override;\n-};\n-\n-FlatSigningProvider Merge(const FlatSigningProvider& a, const FlatSigningProvider& b);\n-\n /** Interface for signature creators. */\n class BaseSignatureCreator {\n public:\n@@ -232,4 +166,7 @@ void UpdateInput(CTxIn& input, const SignatureData& data);\n  * Solvability is unrelated to whether we consider this output to be ours. */\n bool IsSolvable(const SigningProvider& provider, const CScript& script);\n \n+/** Check whether a scriptPubKey is known to be segwit. */\n+bool IsSegWitOutput(const SigningProvider& provider, const CScript& script);\n+\n #endif // BITCOIN_SCRIPT_SIGN_H"
      },
      {
        "sha": "01757e2f655375c37e4f5e57c61445ec30837ed9",
        "filename": "src/script/signingprovider.cpp",
        "status": "renamed",
        "additions": 76,
        "deletions": 82,
        "changes": 158,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/script/signingprovider.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/script/signingprovider.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/signingprovider.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -1,18 +1,78 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <keystore.h>\n+#include <script/keyorigin.h>\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n \n #include <util/system.h>\n \n-void CBasicKeyStore::ImplicitlyLearnRelatedKeyScripts(const CPubKey& pubkey)\n+const SigningProvider& DUMMY_SIGNING_PROVIDER = SigningProvider();\n+\n+template<typename M, typename K, typename V>\n+bool LookupHelper(const M& map, const K& key, V& value)\n+{\n+    auto it = map.find(key);\n+    if (it != map.end()) {\n+        value = it->second;\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool HidingSigningProvider::GetCScript(const CScriptID& scriptid, CScript& script) const\n+{\n+    return m_provider->GetCScript(scriptid, script);\n+}\n+\n+bool HidingSigningProvider::GetPubKey(const CKeyID& keyid, CPubKey& pubkey) const\n+{\n+    return m_provider->GetPubKey(keyid, pubkey);\n+}\n+\n+bool HidingSigningProvider::GetKey(const CKeyID& keyid, CKey& key) const\n+{\n+    if (m_hide_secret) return false;\n+    return m_provider->GetKey(keyid, key);\n+}\n+\n+bool HidingSigningProvider::GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const\n+{\n+    if (m_hide_origin) return false;\n+    return m_provider->GetKeyOrigin(keyid, info);\n+}\n+\n+bool FlatSigningProvider::GetCScript(const CScriptID& scriptid, CScript& script) const { return LookupHelper(scripts, scriptid, script); }\n+bool FlatSigningProvider::GetPubKey(const CKeyID& keyid, CPubKey& pubkey) const { return LookupHelper(pubkeys, keyid, pubkey); }\n+bool FlatSigningProvider::GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const\n+{\n+    std::pair<CPubKey, KeyOriginInfo> out;\n+    bool ret = LookupHelper(origins, keyid, out);\n+    if (ret) info = std::move(out.second);\n+    return ret;\n+}\n+bool FlatSigningProvider::GetKey(const CKeyID& keyid, CKey& key) const { return LookupHelper(keys, keyid, key); }\n+\n+FlatSigningProvider Merge(const FlatSigningProvider& a, const FlatSigningProvider& b)\n+{\n+    FlatSigningProvider ret;\n+    ret.scripts = a.scripts;\n+    ret.scripts.insert(b.scripts.begin(), b.scripts.end());\n+    ret.pubkeys = a.pubkeys;\n+    ret.pubkeys.insert(b.pubkeys.begin(), b.pubkeys.end());\n+    ret.keys = a.keys;\n+    ret.keys.insert(b.keys.begin(), b.keys.end());\n+    ret.origins = a.origins;\n+    ret.origins.insert(b.origins.begin(), b.origins.end());\n+    return ret;\n+}\n+\n+void FillableSigningProvider::ImplicitlyLearnRelatedKeyScripts(const CPubKey& pubkey)\n {\n     AssertLockHeld(cs_KeyStore);\n     CKeyID key_id = pubkey.GetID();\n-    // We must actually know about this key already.\n-    assert(HaveKey(key_id) || mapWatchKeys.count(key_id));\n     // This adds the redeemscripts necessary to detect P2WPKH and P2SH-P2WPKH\n     // outputs. Technically P2WPKH outputs don't have a redeemscript to be\n     // spent. However, our current IsMine logic requires the corresponding\n@@ -32,37 +92,31 @@ void CBasicKeyStore::ImplicitlyLearnRelatedKeyScripts(const CPubKey& pubkey)\n     }\n }\n \n-bool CBasicKeyStore::GetPubKey(const CKeyID &address, CPubKey &vchPubKeyOut) const\n+bool FillableSigningProvider::GetPubKey(const CKeyID &address, CPubKey &vchPubKeyOut) const\n {\n     CKey key;\n     if (!GetKey(address, key)) {\n-        LOCK(cs_KeyStore);\n-        WatchKeyMap::const_iterator it = mapWatchKeys.find(address);\n-        if (it != mapWatchKeys.end()) {\n-            vchPubKeyOut = it->second;\n-            return true;\n-        }\n         return false;\n     }\n     vchPubKeyOut = key.GetPubKey();\n     return true;\n }\n \n-bool CBasicKeyStore::AddKeyPubKey(const CKey& key, const CPubKey &pubkey)\n+bool FillableSigningProvider::AddKeyPubKey(const CKey& key, const CPubKey &pubkey)\n {\n     LOCK(cs_KeyStore);\n     mapKeys[pubkey.GetID()] = key;\n     ImplicitlyLearnRelatedKeyScripts(pubkey);\n     return true;\n }\n \n-bool CBasicKeyStore::HaveKey(const CKeyID &address) const\n+bool FillableSigningProvider::HaveKey(const CKeyID &address) const\n {\n     LOCK(cs_KeyStore);\n     return mapKeys.count(address) > 0;\n }\n \n-std::set<CKeyID> CBasicKeyStore::GetKeys() const\n+std::set<CKeyID> FillableSigningProvider::GetKeys() const\n {\n     LOCK(cs_KeyStore);\n     std::set<CKeyID> set_address;\n@@ -72,7 +126,7 @@ std::set<CKeyID> CBasicKeyStore::GetKeys() const\n     return set_address;\n }\n \n-bool CBasicKeyStore::GetKey(const CKeyID &address, CKey &keyOut) const\n+bool FillableSigningProvider::GetKey(const CKeyID &address, CKey &keyOut) const\n {\n     LOCK(cs_KeyStore);\n     KeyMap::const_iterator mi = mapKeys.find(address);\n@@ -83,23 +137,23 @@ bool CBasicKeyStore::GetKey(const CKeyID &address, CKey &keyOut) const\n     return false;\n }\n \n-bool CBasicKeyStore::AddCScript(const CScript& redeemScript)\n+bool FillableSigningProvider::AddCScript(const CScript& redeemScript)\n {\n     if (redeemScript.size() > MAX_SCRIPT_ELEMENT_SIZE)\n-        return error(\"CBasicKeyStore::AddCScript(): redeemScripts > %i bytes are invalid\", MAX_SCRIPT_ELEMENT_SIZE);\n+        return error(\"FillableSigningProvider::AddCScript(): redeemScripts > %i bytes are invalid\", MAX_SCRIPT_ELEMENT_SIZE);\n \n     LOCK(cs_KeyStore);\n     mapScripts[CScriptID(redeemScript)] = redeemScript;\n     return true;\n }\n \n-bool CBasicKeyStore::HaveCScript(const CScriptID& hash) const\n+bool FillableSigningProvider::HaveCScript(const CScriptID& hash) const\n {\n     LOCK(cs_KeyStore);\n     return mapScripts.count(hash) > 0;\n }\n \n-std::set<CScriptID> CBasicKeyStore::GetCScripts() const\n+std::set<CScriptID> FillableSigningProvider::GetCScripts() const\n {\n     LOCK(cs_KeyStore);\n     std::set<CScriptID> set_script;\n@@ -109,7 +163,7 @@ std::set<CScriptID> CBasicKeyStore::GetCScripts() const\n     return set_script;\n }\n \n-bool CBasicKeyStore::GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const\n+bool FillableSigningProvider::GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const\n {\n     LOCK(cs_KeyStore);\n     ScriptMap::const_iterator mi = mapScripts.find(hash);\n@@ -121,60 +175,7 @@ bool CBasicKeyStore::GetCScript(const CScriptID &hash, CScript& redeemScriptOut)\n     return false;\n }\n \n-static bool ExtractPubKey(const CScript &dest, CPubKey& pubKeyOut)\n-{\n-    //TODO: Use Solver to extract this?\n-    CScript::const_iterator pc = dest.begin();\n-    opcodetype opcode;\n-    std::vector<unsigned char> vch;\n-    if (!dest.GetOp(pc, opcode, vch) || !CPubKey::ValidSize(vch))\n-        return false;\n-    pubKeyOut = CPubKey(vch);\n-    if (!pubKeyOut.IsFullyValid())\n-        return false;\n-    if (!dest.GetOp(pc, opcode, vch) || opcode != OP_CHECKSIG || dest.GetOp(pc, opcode, vch))\n-        return false;\n-    return true;\n-}\n-\n-bool CBasicKeyStore::AddWatchOnly(const CScript &dest)\n-{\n-    LOCK(cs_KeyStore);\n-    setWatchOnly.insert(dest);\n-    CPubKey pubKey;\n-    if (ExtractPubKey(dest, pubKey)) {\n-        mapWatchKeys[pubKey.GetID()] = pubKey;\n-        ImplicitlyLearnRelatedKeyScripts(pubKey);\n-    }\n-    return true;\n-}\n-\n-bool CBasicKeyStore::RemoveWatchOnly(const CScript &dest)\n-{\n-    LOCK(cs_KeyStore);\n-    setWatchOnly.erase(dest);\n-    CPubKey pubKey;\n-    if (ExtractPubKey(dest, pubKey)) {\n-        mapWatchKeys.erase(pubKey.GetID());\n-    }\n-    // Related CScripts are not removed; having superfluous scripts around is\n-    // harmless (see comment in ImplicitlyLearnRelatedKeyScripts).\n-    return true;\n-}\n-\n-bool CBasicKeyStore::HaveWatchOnly(const CScript &dest) const\n-{\n-    LOCK(cs_KeyStore);\n-    return setWatchOnly.count(dest) > 0;\n-}\n-\n-bool CBasicKeyStore::HaveWatchOnly() const\n-{\n-    LOCK(cs_KeyStore);\n-    return (!setWatchOnly.empty());\n-}\n-\n-CKeyID GetKeyForDestination(const CKeyStore& store, const CTxDestination& dest)\n+CKeyID GetKeyForDestination(const SigningProvider& store, const CTxDestination& dest)\n {\n     // Only supports destinations which map to single public keys, i.e. P2PKH,\n     // P2WPKH, and P2SH-P2WPKH.\n@@ -196,10 +197,3 @@ CKeyID GetKeyForDestination(const CKeyStore& store, const CTxDestination& dest)\n     }\n     return CKeyID();\n }\n-\n-bool HaveKey(const CKeyStore& store, const CKey& key)\n-{\n-    CKey key2;\n-    key2.Set(key.begin(), key.end(), !key.IsCompressed());\n-    return store.HaveKey(key.GetPubKey().GetID()) || store.HaveKey(key2.GetPubKey().GetID());\n-}",
        "previous_filename": "src/keystore.cpp"
      },
      {
        "sha": "4eec2311d4144ea863b67b24e8aae31281b24081",
        "filename": "src/script/signingprovider.h",
        "status": "added",
        "additions": 92,
        "deletions": 0,
        "changes": 92,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/script/signingprovider.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/script/signingprovider.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/signingprovider.h?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -0,0 +1,92 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SCRIPT_SIGNINGPROVIDER_H\n+#define BITCOIN_SCRIPT_SIGNINGPROVIDER_H\n+\n+#include <key.h>\n+#include <pubkey.h>\n+#include <script/script.h>\n+#include <script/standard.h>\n+#include <sync.h>\n+\n+struct KeyOriginInfo;\n+\n+/** An interface to be implemented by keystores that support signing. */\n+class SigningProvider\n+{\n+public:\n+    virtual ~SigningProvider() {}\n+    virtual bool GetCScript(const CScriptID &scriptid, CScript& script) const { return false; }\n+    virtual bool HaveCScript(const CScriptID &scriptid) const { return false; }\n+    virtual bool GetPubKey(const CKeyID &address, CPubKey& pubkey) const { return false; }\n+    virtual bool GetKey(const CKeyID &address, CKey& key) const { return false; }\n+    virtual bool HaveKey(const CKeyID &address) const { return false; }\n+    virtual bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const { return false; }\n+};\n+\n+extern const SigningProvider& DUMMY_SIGNING_PROVIDER;\n+\n+class HidingSigningProvider : public SigningProvider\n+{\n+private:\n+    const bool m_hide_secret;\n+    const bool m_hide_origin;\n+    const SigningProvider* m_provider;\n+\n+public:\n+    HidingSigningProvider(const SigningProvider* provider, bool hide_secret, bool hide_origin) : m_hide_secret(hide_secret), m_hide_origin(hide_origin), m_provider(provider) {}\n+    bool GetCScript(const CScriptID& scriptid, CScript& script) const override;\n+    bool GetPubKey(const CKeyID& keyid, CPubKey& pubkey) const override;\n+    bool GetKey(const CKeyID& keyid, CKey& key) const override;\n+    bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override;\n+};\n+\n+struct FlatSigningProvider final : public SigningProvider\n+{\n+    std::map<CScriptID, CScript> scripts;\n+    std::map<CKeyID, CPubKey> pubkeys;\n+    std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>> origins;\n+    std::map<CKeyID, CKey> keys;\n+\n+    bool GetCScript(const CScriptID& scriptid, CScript& script) const override;\n+    bool GetPubKey(const CKeyID& keyid, CPubKey& pubkey) const override;\n+    bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override;\n+    bool GetKey(const CKeyID& keyid, CKey& key) const override;\n+};\n+\n+FlatSigningProvider Merge(const FlatSigningProvider& a, const FlatSigningProvider& b);\n+\n+/** Fillable signing provider that keeps keys in an address->secret map */\n+class FillableSigningProvider : public SigningProvider\n+{\n+protected:\n+    mutable CCriticalSection cs_KeyStore;\n+\n+    using KeyMap = std::map<CKeyID, CKey>;\n+    using ScriptMap = std::map<CScriptID, CScript>;\n+\n+    KeyMap mapKeys GUARDED_BY(cs_KeyStore);\n+    ScriptMap mapScripts GUARDED_BY(cs_KeyStore);\n+\n+    void ImplicitlyLearnRelatedKeyScripts(const CPubKey& pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+public:\n+    virtual bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey);\n+    virtual bool AddKey(const CKey &key) { return AddKeyPubKey(key, key.GetPubKey()); }\n+    virtual bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const override;\n+    virtual bool HaveKey(const CKeyID &address) const override;\n+    virtual std::set<CKeyID> GetKeys() const;\n+    virtual bool GetKey(const CKeyID &address, CKey &keyOut) const override;\n+    virtual bool AddCScript(const CScript& redeemScript);\n+    virtual bool HaveCScript(const CScriptID &hash) const override;\n+    virtual std::set<CScriptID> GetCScripts() const;\n+    virtual bool GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const override;\n+};\n+\n+/** Return the CKeyID of the key involved in a script (if there is a unique one). */\n+CKeyID GetKeyForDestination(const SigningProvider& store, const CTxDestination& dest);\n+\n+#endif // BITCOIN_SCRIPT_SIGNINGPROVIDER_H"
      },
      {
        "sha": "fc6898f4445c64ebc348d2b95a699acbcb269376",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -9,7 +9,6 @@\n #include <pubkey.h>\n #include <script/script.h>\n \n-\n typedef std::vector<unsigned char> valtype;\n \n bool fAcceptDatacarrier = DEFAULT_ACCEPT_DATACARRIER;"
      },
      {
        "sha": "ecb00510f78a7fc4324872a1532001bac51a40fc",
        "filename": "src/support/cleanse.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 22,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/support/cleanse.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/support/cleanse.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/cleanse.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -11,33 +11,25 @@\n #include <Windows.h> // For SecureZeroMemory.\n #endif\n \n-/* Compilers have a bad habit of removing \"superfluous\" memset calls that\n- * are trying to zero memory. For example, when memset()ing a buffer and\n- * then free()ing it, the compiler might decide that the memset is\n- * unobservable and thus can be removed.\n- *\n- * Previously we used OpenSSL which tried to stop this by a) implementing\n- * memset in assembly on x86 and b) putting the function in its own file\n- * for other platforms.\n- *\n- * This change removes those tricks in favour of using asm directives to\n- * scare the compiler away. As best as our compiler folks can tell, this is\n- * sufficient and will continue to be so.\n- *\n- * Adam Langley <agl@google.com>\n- * Commit: ad1907fe73334d6c696c8539646c21b11178f20f\n- * BoringSSL (LICENSE: ISC)\n- */\n void memory_cleanse(void *ptr, size_t len)\n {\n-    std::memset(ptr, 0, len);\n-\n-    /* As best as we can tell, this is sufficient to break any optimisations that\n-       might try to eliminate \"superfluous\" memsets. If there's an easy way to\n-       detect memset_s, it would be better to use that. */\n #if defined(_MSC_VER)\n+    /* SecureZeroMemory is guaranteed not to be optimized out by MSVC. */\n     SecureZeroMemory(ptr, len);\n #else\n+    std::memset(ptr, 0, len);\n+\n+    /* Memory barrier that scares the compiler away from optimizing out the memset.\n+     *\n+     * Quoting Adam Langley <agl@google.com> in commit ad1907fe73334d6c696c8539646c21b11178f20f\n+     * in BoringSSL (ISC License):\n+     *    As best as we can tell, this is sufficient to break any optimisations that\n+     *    might try to eliminate \"superfluous\" memsets.\n+     * This method is used in memzero_explicit() the Linux kernel, too. Its advantage is that it\n+     * is pretty efficient because the compiler can still implement the memset() efficiently,\n+     * just not remove it entirely. See \"Dead Store Elimination (Still) Considered Harmful\" by\n+     * Yang et al. (USENIX Security 2017) for more background.\n+     */\n     __asm__ __volatile__(\"\" : : \"r\"(ptr) : \"memory\");\n #endif\n }"
      },
      {
        "sha": "b03520315d3878d8c73d9abc8f295ed1ccf3830b",
        "filename": "src/support/cleanse.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/support/cleanse.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/support/cleanse.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/cleanse.h?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -8,7 +8,8 @@\n \n #include <stdlib.h>\n \n-// Attempt to overwrite data in the specified memory span.\n+/** Secure overwrite a buffer (possibly containing secret data) with zero-bytes. The write\n+ * operation will not be optimized out by the compiler. */\n void memory_cleanse(void *ptr, size_t len);\n \n #endif // BITCOIN_SUPPORT_CLEANSE_H"
      },
      {
        "sha": "da0abd495ae46feeecb1000644bcd9c27a3d4a3e",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -533,9 +533,6 @@ BOOST_AUTO_TEST_CASE(addrman_selecttriedcollision)\n {\n     CAddrManTest addrman;\n \n-    // Set addrman addr placement to be deterministic.\n-    addrman.MakeDeterministic();\n-\n     BOOST_CHECK(addrman.size() == 0);\n \n     // Empty addrman should return blank addrman info.\n@@ -568,9 +565,6 @@ BOOST_AUTO_TEST_CASE(addrman_noevict)\n {\n     CAddrManTest addrman;\n \n-    // Set addrman addr placement to be deterministic.\n-    addrman.MakeDeterministic();\n-\n     // Add twenty two addresses.\n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n     for (unsigned int i = 1; i < 23; i++) {\n@@ -627,9 +621,6 @@ BOOST_AUTO_TEST_CASE(addrman_evictionworks)\n {\n     CAddrManTest addrman;\n \n-    // Set addrman addr placement to be deterministic.\n-    addrman.MakeDeterministic();\n-\n     BOOST_CHECK(addrman.size() == 0);\n \n     // Empty addrman should return blank addrman info."
      },
      {
        "sha": "e333763f27824b639e0c028b776bee8f69dfe4aa",
        "filename": "src/test/allocator_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/allocator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/allocator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/allocator_tests.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <util/memory.h>\n #include <util/system.h>\n \n-#include <support/allocators/secure.h>\n #include <test/setup_common.h>\n \n #include <memory>"
      },
      {
        "sha": "9ac87261b6662581ea1f273296aa9222977cfc80",
        "filename": "src/test/arith_uint256_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/arith_uint256_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/arith_uint256_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/arith_uint256_tests.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -11,7 +11,6 @@\n #include <uint256.h>\n #include <arith_uint256.h>\n #include <string>\n-#include <version.h>\n #include <test/setup_common.h>\n \n BOOST_FIXTURE_TEST_SUITE(arith_uint256_tests, BasicTestingSetup)"
      },
      {
        "sha": "662878750e1b3094a41a791c373ef9f5585cab17",
        "filename": "src/test/bip32_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/bip32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/bip32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bip32_tests.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -4,9 +4,10 @@\n \n #include <boost/test/unit_test.hpp>\n \n+#include <clientversion.h>\n #include <key.h>\n #include <key_io.h>\n-#include <uint256.h>\n+#include <streams.h>\n #include <util/system.h>\n #include <util/strencodings.h>\n #include <test/setup_common.h>"
      },
      {
        "sha": "ca75563ef0d2ad297bdc6137a2ab7f4fb5616bbb",
        "filename": "src/test/blockchain_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/blockchain_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/blockchain_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockchain_tests.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -2,6 +2,7 @@\n \n #include <stdlib.h>\n \n+#include <chain.h>\n #include <rpc/blockchain.h>\n #include <test/setup_common.h>\n "
      },
      {
        "sha": "5ce8e6feb04df1db109aef6701520f9d84fa353d",
        "filename": "src/test/blockencodings_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/blockencodings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/blockencodings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockencodings_tests.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -6,7 +6,7 @@\n #include <consensus/merkle.h>\n #include <chainparams.h>\n #include <pow.h>\n-#include <random.h>\n+#include <streams.h>\n \n #include <test/setup_common.h>\n \n@@ -85,7 +85,7 @@ BOOST_AUTO_TEST_CASE(SimpleRoundTripTest)\n         BOOST_CHECK_EQUAL(pool.mapTx.find(block.vtx[2]->GetHash())->GetSharedTx().use_count(), SHARED_TX_OFFSET + 1);\n \n         size_t poolSize = pool.size();\n-        pool.removeRecursive(*block.vtx[2]);\n+        pool.removeRecursive(*block.vtx[2], MemPoolRemovalReason::REPLACED);\n         BOOST_CHECK_EQUAL(pool.size(), poolSize - 1);\n \n         CBlock block2;"
      },
      {
        "sha": "cf87aa9303b328ba51108641053cb05d22bbe076",
        "filename": "src/test/blockfilter_index_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/blockfilter_index_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/blockfilter_index_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockfilter_index_tests.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -10,6 +10,7 @@\n #include <pow.h>\n #include <test/setup_common.h>\n #include <script/standard.h>\n+#include <util/time.h>\n #include <validation.h>\n \n #include <boost/test/unit_test.hpp>"
      },
      {
        "sha": "d796444419ffc7fc4b0bff9b27f6598d35066583",
        "filename": "src/test/checkqueue_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/checkqueue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/checkqueue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkqueue_tests.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <util/memory.h>\n #include <util/system.h>\n #include <util/time.h>\n #include <validation.h>\n@@ -17,8 +18,6 @@\n #include <condition_variable>\n \n #include <unordered_set>\n-#include <memory>\n-#include <random.h>\n \n // BasicTestingSetup not sufficient because nScriptCheckThreads is not set\n // otherwise."
      },
      {
        "sha": "948591196c4f306c36cb5925d3c79068f373ab76",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -3,8 +3,10 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <attributes.h>\n+#include <clientversion.h>\n #include <coins.h>\n #include <script/standard.h>\n+#include <streams.h>\n #include <test/setup_common.h>\n #include <uint256.h>\n #include <undo.h>"
      },
      {
        "sha": "4ac12bf9698c9f50c28a9c274687429280263b91",
        "filename": "src/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 126,
        "deletions": 0,
        "changes": 126,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/crypto_tests.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <crypto/aes.h>\n #include <crypto/chacha20.h>\n+#include <crypto/chacha_poly_aead.h>\n #include <crypto/poly1305.h>\n #include <crypto/hkdf_sha256_32.h>\n #include <crypto/hmac_sha256.h>\n@@ -585,6 +586,131 @@ BOOST_AUTO_TEST_CASE(hkdf_hmac_sha256_l32_tests)\n                 \"8da4e775a563c18f715f802a063c5a31b8a11f5c5ee1879ec3454e5f3c738d2d\");\n }\n \n+static void TestChaCha20Poly1305AEAD(bool must_succeed, unsigned int expected_aad_length, const std::string& hex_m, const std::string& hex_k1, const std::string& hex_k2, const std::string& hex_aad_keystream, const std::string& hex_encrypted_message, const std::string& hex_encrypted_message_seq_999)\n+{\n+    // we need two sequence numbers, one for the payload cipher instance...\n+    uint32_t seqnr_payload = 0;\n+    // ... and one for the AAD (length) cipher instance\n+    uint32_t seqnr_aad = 0;\n+    // we need to keep track of the position in the AAD cipher instance\n+    // keystream since we use the same 64byte output 21 times\n+    // (21 times 3 bytes length < 64)\n+    int aad_pos = 0;\n+\n+    std::vector<unsigned char> aead_K_1 = ParseHex(hex_k1);\n+    std::vector<unsigned char> aead_K_2 = ParseHex(hex_k2);\n+    std::vector<unsigned char> plaintext_buf = ParseHex(hex_m);\n+    std::vector<unsigned char> expected_aad_keystream = ParseHex(hex_aad_keystream);\n+    std::vector<unsigned char> expected_ciphertext_and_mac = ParseHex(hex_encrypted_message);\n+    std::vector<unsigned char> expected_ciphertext_and_mac_sequence999 = ParseHex(hex_encrypted_message_seq_999);\n+\n+    std::vector<unsigned char> ciphertext_buf(plaintext_buf.size() + POLY1305_TAGLEN, 0);\n+    std::vector<unsigned char> plaintext_buf_new(plaintext_buf.size(), 0);\n+    std::vector<unsigned char> cmp_ctx_buffer(64);\n+    uint32_t out_len = 0;\n+\n+    // create the AEAD instance\n+    ChaCha20Poly1305AEAD aead(aead_K_1.data(), aead_K_1.size(), aead_K_2.data(), aead_K_2.size());\n+\n+    // create a chacha20 instance to compare against\n+    ChaCha20 cmp_ctx(aead_K_2.data(), 32);\n+\n+    // encipher\n+    bool res = aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, ciphertext_buf.data(), ciphertext_buf.size(), plaintext_buf.data(), plaintext_buf.size(), true);\n+    // make sure the operation succeeded if expected to succeed\n+    BOOST_CHECK_EQUAL(res, must_succeed);\n+    if (!res) return;\n+\n+    // verify ciphertext & mac against the test vector\n+    BOOST_CHECK_EQUAL(expected_ciphertext_and_mac.size(), ciphertext_buf.size());\n+    BOOST_CHECK(memcmp(ciphertext_buf.data(), expected_ciphertext_and_mac.data(), ciphertext_buf.size()) == 0);\n+\n+    // manually construct the AAD keystream\n+    cmp_ctx.SetIV(seqnr_aad);\n+    cmp_ctx.Seek(0);\n+    cmp_ctx.Keystream(cmp_ctx_buffer.data(), 64);\n+    BOOST_CHECK(memcmp(expected_aad_keystream.data(), cmp_ctx_buffer.data(), expected_aad_keystream.size()) == 0);\n+    // crypt the 3 length bytes and compare the length\n+    uint32_t len_cmp = 0;\n+    len_cmp = (ciphertext_buf[0] ^ cmp_ctx_buffer[aad_pos + 0]) |\n+              (ciphertext_buf[1] ^ cmp_ctx_buffer[aad_pos + 1]) << 8 |\n+              (ciphertext_buf[2] ^ cmp_ctx_buffer[aad_pos + 2]) << 16;\n+    BOOST_CHECK_EQUAL(len_cmp, expected_aad_length);\n+\n+    // encrypt / decrypt 1000 packets\n+    for (size_t i = 0; i < 1000; ++i) {\n+        res = aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, ciphertext_buf.data(), ciphertext_buf.size(), plaintext_buf.data(), plaintext_buf.size(), true);\n+        BOOST_CHECK(res);\n+        BOOST_CHECK(aead.GetLength(&out_len, seqnr_aad, aad_pos, ciphertext_buf.data()));\n+        BOOST_CHECK_EQUAL(out_len, expected_aad_length);\n+        res = aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, plaintext_buf_new.data(), plaintext_buf_new.size(), ciphertext_buf.data(), ciphertext_buf.size(), false);\n+        BOOST_CHECK(res);\n+\n+        // make sure we repetitive get the same plaintext\n+        BOOST_CHECK(memcmp(plaintext_buf.data(), plaintext_buf_new.data(), plaintext_buf.size()) == 0);\n+\n+        // compare sequence number 999 against the test vector\n+        if (seqnr_payload == 999) {\n+            BOOST_CHECK(memcmp(ciphertext_buf.data(), expected_ciphertext_and_mac_sequence999.data(), expected_ciphertext_and_mac_sequence999.size()) == 0);\n+        }\n+        // set nonce and block counter, output the keystream\n+        cmp_ctx.SetIV(seqnr_aad);\n+        cmp_ctx.Seek(0);\n+        cmp_ctx.Keystream(cmp_ctx_buffer.data(), 64);\n+\n+        // crypt the 3 length bytes and compare the length\n+        len_cmp = 0;\n+        len_cmp = (ciphertext_buf[0] ^ cmp_ctx_buffer[aad_pos + 0]) |\n+                  (ciphertext_buf[1] ^ cmp_ctx_buffer[aad_pos + 1]) << 8 |\n+                  (ciphertext_buf[2] ^ cmp_ctx_buffer[aad_pos + 2]) << 16;\n+        BOOST_CHECK_EQUAL(len_cmp, expected_aad_length);\n+\n+        // increment the sequence number(s)\n+        // always increment the payload sequence number\n+        // increment the AAD keystream position by its size (3)\n+        // increment the AAD sequence number if we would hit the 64 byte limit\n+        seqnr_payload++;\n+        aad_pos += CHACHA20_POLY1305_AEAD_AAD_LEN;\n+        if (aad_pos + CHACHA20_POLY1305_AEAD_AAD_LEN > CHACHA20_ROUND_OUTPUT) {\n+            aad_pos = 0;\n+            seqnr_aad++;\n+        }\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(chacha20_poly1305_aead_testvector)\n+{\n+    /* test chacha20poly1305@bitcoin AEAD */\n+\n+    // must fail with no message\n+    TestChaCha20Poly1305AEAD(false, 0,\n+        \"\",\n+        \"0000000000000000000000000000000000000000000000000000000000000000\",\n+        \"0000000000000000000000000000000000000000000000000000000000000000\", \"\", \"\", \"\");\n+\n+    TestChaCha20Poly1305AEAD(true, 0,\n+        /* m  */ \"0000000000000000000000000000000000000000000000000000000000000000\",\n+        /* k1 (payload) */ \"0000000000000000000000000000000000000000000000000000000000000000\",\n+        /* k2 (AAD) */ \"0000000000000000000000000000000000000000000000000000000000000000\",\n+        /* AAD keystream */ \"76b8e0ada0f13d90405d6ae55386bd28bdd219b8a08ded1aa836efcc8b770dc7da41597c5157488d7724e03fb8d84a376a43b8f41518a11cc387b669b2ee6586\",\n+        /* encrypted message & MAC */ \"76b8e09f07e7be5551387a98ba977c732d080dcb0f29a048e3656912c6533e32d2fc11829c1b6c1df1f551cd6131ff08\",\n+        /* encrypted message & MAC at sequence 999 */ \"b0a03d5bd2855d60699e7d3a3133fa47be740fe4e4c1f967555e2d9271f31c3aaa7aa16ec62c5e24f040c08bb20c3598\");\n+    TestChaCha20Poly1305AEAD(true, 1,\n+        \"0100000000000000000000000000000000000000000000000000000000000000\",\n+        \"0000000000000000000000000000000000000000000000000000000000000000\",\n+        \"0000000000000000000000000000000000000000000000000000000000000000\",\n+        \"76b8e0ada0f13d90405d6ae55386bd28bdd219b8a08ded1aa836efcc8b770dc7da41597c5157488d7724e03fb8d84a376a43b8f41518a11cc387b669b2ee6586\",\n+        \"77b8e09f07e7be5551387a98ba977c732d080dcb0f29a048e3656912c6533e32baf0c85b6dff8602b06cf52a6aefc62e\",\n+        \"b1a03d5bd2855d60699e7d3a3133fa47be740fe4e4c1f967555e2d9271f31c3a8bd94d54b5ecabbc41ffbb0c90924080\");\n+    TestChaCha20Poly1305AEAD(true, 255,\n+        \"ff0000f195e66982105ffb640bb7757f579da31602fc93ec01ac56f85ac3c134a4547b733b46413042c9440049176905d3be59ea1c53f15916155c2be8241a38008b9a26bc35941e2444177c8ade6689de95264986d95889fb60e84629c9bd9a5acb1cc118be563eb9b3a4a472f82e09a7e778492b562ef7130e88dfe031c79db9d4f7c7a899151b9a475032b63fc385245fe054e3dd5a97a5f576fe064025d3ce042c566ab2c507b138db853e3d6959660996546cc9c4a6eafdc777c040d70eaf46f76dad3979e5c5360c3317166a1c894c94a371876a94df7628fe4eaaf2ccb27d5aaae0ad7ad0f9d4b6ad3b54098746d4524d38407a6deb3ab78fab78c9\",\n+        \"000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f\",\n+        \"ff0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f\",\n+        \"c640c1711e3ee904ac35c57ab9791c8a1c408603a90b77a83b54f6c844cb4b06d94e7fc6c800e165acd66147e80ec45a567f6ce66d05ec0cae679dceeb890017\",\n+        \"3940c1e92da4582ff6f92a776aeb14d014d384eeb30f660dacf70a14a23fd31e91212701334e2ce1acf5199dc84f4d61ddbe6571bca5af874b4c9226c26e650995d157644e1848b96ed6c2102d5489a050e71d29a5a66ece11de5fb5c9558d54da28fe45b0bc4db4e5b88030bfc4a352b4b7068eccf656bae7ad6a35615315fc7c49d4200388d5eca67c2e822e069336c69b40db67e0f3c81209c50f3216a4b89fb3ae1b984b7851a2ec6f68ab12b101ab120e1ea7313bb93b5a0f71185c7fea017ddb92769861c29dba4fbc432280d5dff21b36d1c4c790128b22699950bb18bf74c448cdfe547d8ed4f657d8005fdc0cd7a050c2d46050a44c4376355858981fbe8b184288276e7a93eabc899c4a\",\n+        \"f039c6689eaeef0456685200feaab9d54bbd9acde4410a3b6f4321296f4a8ca2604b49727d8892c57e005d799b2a38e85e809f20146e08eec75169691c8d4f54a0d51a1e1c7b381e0474eb02f994be9415ef3ffcbd2343f0601e1f3b172a1d494f838824e4df570f8e3b0c04e27966e36c82abd352d07054ef7bd36b84c63f9369afe7ed79b94f953873006b920c3fa251a771de1b63da927058ade119aa898b8c97e42a606b2f6df1e2d957c22f7593c1e2002f4252f4c9ae4bf773499e5cfcfe14dfc1ede26508953f88553bf4a76a802f6a0068d59295b01503fd9a600067624203e880fdf53933b96e1f4d9eb3f4e363dd8165a278ff667a41ee42b9892b077cefff92b93441f7be74cf10e6cd\");\n+}\n+\n BOOST_AUTO_TEST_CASE(countbits_tests)\n {\n     FastRandomContext ctx;"
      },
      {
        "sha": "efcadd51fcc855cbc14dbe77c97333cdc306dcbd",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -4,8 +4,8 @@\n \n #include <dbwrapper.h>\n #include <uint256.h>\n-#include <random.h>\n #include <test/setup_common.h>\n+#include <util/memory.h>\n \n #include <memory>\n "
      },
      {
        "sha": "a50d6854f89831cc2cf36eb1818d137f998065c0",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -6,12 +6,15 @@\n \n #include <banman.h>\n #include <chainparams.h>\n-#include <keystore.h>\n #include <net.h>\n #include <net_processing.h>\n #include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n #include <serialize.h>\n+#include <util/memory.h>\n #include <util/system.h>\n+#include <util/time.h>\n #include <validation.h>\n \n #include <test/setup_common.h>\n@@ -367,7 +370,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n {\n     CKey key;\n     key.MakeNewKey(true);\n-    CBasicKeyStore keystore;\n+    FillableSigningProvider keystore;\n     BOOST_CHECK(keystore.AddKey(key));\n \n     // 50 orphan transactions:"
      },
      {
        "sha": "50ac0bd7b8986a310c461c964981d01bccfb811b",
        "filename": "src/test/descriptor_tests.cpp",
        "status": "modified",
        "additions": 98,
        "deletions": 40,
        "changes": 138,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/descriptor_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/descriptor_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/descriptor_tests.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -13,13 +13,15 @@\n \n namespace {\n \n-void CheckUnparsable(const std::string& prv, const std::string& pub)\n+void CheckUnparsable(const std::string& prv, const std::string& pub, const std::string& expected_error)\n {\n     FlatSigningProvider keys_priv, keys_pub;\n-    auto parse_priv = Parse(prv, keys_priv);\n-    auto parse_pub = Parse(pub, keys_pub);\n+    std::string error;\n+    auto parse_priv = Parse(prv, keys_priv, error);\n+    auto parse_pub = Parse(pub, keys_pub, error);\n     BOOST_CHECK_MESSAGE(!parse_priv, prv);\n     BOOST_CHECK_MESSAGE(!parse_pub, pub);\n+    BOOST_CHECK(error == expected_error);\n }\n \n constexpr int DEFAULT = 0;\n@@ -40,32 +42,47 @@ bool EqualDescriptor(std::string a, std::string b)\n     return a == b;\n }\n \n-std::string MaybeUseHInsteadOfApostrophy(std::string ret)\n+std::string UseHInsteadOfApostrophe(const std::string& desc)\n {\n-    if (InsecureRandBool()) {\n-        while (true) {\n-            auto it = ret.find(\"'\");\n-            if (it != std::string::npos) {\n-                ret[it] = 'h';\n-                if (ret.size() > 9 && ret[ret.size() - 9] == '#') ret = ret.substr(0, ret.size() - 9); // Changing apostrophe to h breaks the checksum\n-            } else {\n-                break;\n-            }\n-        }\n+    std::string ret = desc;\n+    while (true) {\n+        auto it = ret.find('\\'');\n+        if (it == std::string::npos) break;\n+        ret[it] = 'h';\n+    }\n+\n+    // GetDescriptorChecksum returns \"\" if the checksum exists but is bad.\n+    // Switching apostrophes with 'h' breaks the checksum if it exists - recalculate it and replace the broken one.\n+    if (GetDescriptorChecksum(ret) == \"\") {\n+        ret = ret.substr(0, desc.size() - 9);\n+        ret += std::string(\"#\") + GetDescriptorChecksum(ret);\n     }\n     return ret;\n }\n \n const std::set<std::vector<uint32_t>> ONLY_EMPTY{{}};\n \n-void Check(const std::string& prv, const std::string& pub, int flags, const std::vector<std::vector<std::string>>& scripts, const std::set<std::vector<uint32_t>>& paths = ONLY_EMPTY)\n+void DoCheck(const std::string& prv, const std::string& pub, int flags, const std::vector<std::vector<std::string>>& scripts, const std::set<std::vector<uint32_t>>& paths = ONLY_EMPTY,\n+    bool replace_apostrophe_with_h_in_prv=false, bool replace_apostrophe_with_h_in_pub=false)\n {\n     FlatSigningProvider keys_priv, keys_pub;\n     std::set<std::vector<uint32_t>> left_paths = paths;\n+    std::string error;\n \n+    std::unique_ptr<Descriptor> parse_priv;\n+    std::unique_ptr<Descriptor> parse_pub;\n     // Check that parsing succeeds.\n-    auto parse_priv = Parse(MaybeUseHInsteadOfApostrophy(prv), keys_priv);\n-    auto parse_pub = Parse(MaybeUseHInsteadOfApostrophy(pub), keys_pub);\n+    if (replace_apostrophe_with_h_in_prv) {\n+        parse_priv = Parse(UseHInsteadOfApostrophe(prv), keys_priv, error);\n+    } else {\n+        parse_priv = Parse(prv, keys_priv, error);\n+    }\n+    if (replace_apostrophe_with_h_in_pub) {\n+        parse_pub = Parse(UseHInsteadOfApostrophe(pub), keys_pub, error);\n+    } else {\n+        parse_pub = Parse(pub, keys_pub, error);\n+    }\n+\n     BOOST_CHECK(parse_priv);\n     BOOST_CHECK(parse_pub);\n \n@@ -164,6 +181,32 @@ void Check(const std::string& prv, const std::string& pub, int flags, const std:\n     BOOST_CHECK_MESSAGE(left_paths.empty(), \"Not all expected key paths found: \" + prv);\n }\n \n+void Check(const std::string& prv, const std::string& pub, int flags, const std::vector<std::vector<std::string>>& scripts, const std::set<std::vector<uint32_t>>& paths = ONLY_EMPTY)\n+{\n+    bool found_apostrophes_in_prv = false;\n+    bool found_apostrophes_in_pub = false;\n+\n+    // Do not replace apostrophes with 'h' in prv and pub\n+    DoCheck(prv, pub, flags, scripts, paths);\n+\n+    // Replace apostrophes with 'h' in prv but not in pub, if apostrophes are found in prv\n+    if (prv.find('\\'') != std::string::npos) {\n+        found_apostrophes_in_prv = true;\n+        DoCheck(prv, pub, flags, scripts, paths, /* replace_apostrophe_with_h_in_prv = */true, /*replace_apostrophe_with_h_in_pub = */false);\n+    }\n+\n+    // Replace apostrophes with 'h' in pub but not in prv, if apostrophes are found in pub\n+    if (pub.find('\\'') != std::string::npos) {\n+        found_apostrophes_in_pub = true;\n+        DoCheck(prv, pub, flags, scripts, paths, /* replace_apostrophe_with_h_in_prv = */false, /*replace_apostrophe_with_h_in_pub = */true);\n+    }\n+\n+    // Replace apostrophes with 'h' both in prv and in pub, if apostrophes are found in both\n+    if (found_apostrophes_in_prv && found_apostrophes_in_pub) {\n+        DoCheck(prv, pub, flags, scripts, paths, /* replace_apostrophe_with_h_in_prv = */true, /*replace_apostrophe_with_h_in_pub = */true);\n+    }\n+}\n+\n }\n \n BOOST_FIXTURE_TEST_SUITE(descriptor_tests, BasicTestingSetup)\n@@ -176,14 +219,17 @@ BOOST_AUTO_TEST_CASE(descriptor_test)\n     Check(\"pkh([deadbeef/1/2'/3/4']L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"pkh([deadbeef/1/2'/3/4']03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE, {{\"76a9149a1c78a507689f6f54b847ad1cef1e614ee23f1e88ac\"}}, {{1,0x80000002UL,3,0x80000004UL}});\n     Check(\"wpkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"wpkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE, {{\"00149a1c78a507689f6f54b847ad1cef1e614ee23f1e\"}});\n     Check(\"sh(wpkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"sh(wpkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", SIGNABLE, {{\"a91484ab21b1b2fd065d4504ff693d832434b6108d7b87\"}});\n+    CheckUnparsable(\"sh(wpkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY2))\", \"sh(wpkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5))\", \"Pubkey '03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5' is invalid\"); // Invalid pubkey\n+    CheckUnparsable(\"pkh(deadbeef/1/2'/3/4']L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"pkh(deadbeef/1/2'/3/4']03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", \"Key origin start '[ character expected but not found, got 'd' instead\"); // Missing start bracket in key origin\n+    CheckUnparsable(\"pkh([deadbeef]/1/2'/3/4']L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"pkh([deadbeef]/1/2'/3/4']03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", \"Multiple ']' characters found for a single pubkey\"); // Multiple end brackets in key origin\n \n     // Basic single-key uncompressed\n     Check(\"combo(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"combo(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", SIGNABLE, {{\"4104a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235ac\",\"76a914b5bd079c4d57cc7fc28ecf8213a6b791625b818388ac\"}});\n     Check(\"pk(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"pk(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", SIGNABLE, {{\"4104a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235ac\"}});\n     Check(\"pkh(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"pkh(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", SIGNABLE, {{\"76a914b5bd079c4d57cc7fc28ecf8213a6b791625b818388ac\"}});\n-    CheckUnparsable(\"wpkh(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"wpkh(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\"); // No uncompressed keys in witness\n-    CheckUnparsable(\"wsh(pk(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss))\", \"wsh(pk(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235))\"); // No uncompressed keys in witness\n-    CheckUnparsable(\"sh(wpkh(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss))\", \"sh(wpkh(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235))\"); // No uncompressed keys in witness\n+    CheckUnparsable(\"wpkh(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"wpkh(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", \"Uncompressed keys are not allowed\"); // No uncompressed keys in witness\n+    CheckUnparsable(\"wsh(pk(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss))\", \"wsh(pk(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235))\", \"Uncompressed keys are not allowed\"); // No uncompressed keys in witness\n+    CheckUnparsable(\"sh(wpkh(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss))\", \"sh(wpkh(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235))\", \"Uncompressed keys are not allowed\"); // No uncompressed keys in witness\n \n     // Some unconventional single-key constructions\n     Check(\"sh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"sh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", SIGNABLE, {{\"a9141857af51a5e516552b3086430fd8ce55f7c1a52487\"}});\n@@ -200,38 +246,50 @@ BOOST_AUTO_TEST_CASE(descriptor_test)\n     Check(\"wpkh([ffffffff/13']xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*)\", \"wpkh([ffffffff/13']xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*)\", RANGE, {{\"0014326b2249e3a25d5dc60935f044ee835d090ba859\"},{\"0014af0bd98abc2f2cae66e36896a39ffe2d32984fb7\"},{\"00141fa798efd1cbf95cebf912c031b8a4a6e9fb9f27\"}}, {{0x8000000DUL, 1, 2, 0}, {0x8000000DUL, 1, 2, 1}, {0x8000000DUL, 1, 2, 2}});\n     Check(\"sh(wpkh(xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"sh(wpkh(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", RANGE | HARDENED, {{\"a9149a4d9901d6af519b2a23d4a2f51650fcba87ce7b87\"},{\"a914bed59fc0024fae941d6e20a3b44a109ae740129287\"},{\"a9148483aa1116eb9c05c482a72bada4b1db24af654387\"}}, {{10, 20, 30, 40, 0x80000000UL}, {10, 20, 30, 40, 0x80000001UL}, {10, 20, 30, 40, 0x80000002UL}});\n     Check(\"combo(xprvA2JDeKCSNNZky6uBCviVfJSKyQ1mDYahRjijr5idH2WwLsEd4Hsb2Tyh8RfQMuPh7f7RtyzTtdrbdqqsunu5Mm3wDvUAKRHSC34sJ7in334/*)\", \"combo(xpub6FHa3pjLCk84BayeJxFW2SP4XRrFd1JYnxeLeU8EqN3vDfZmbqBqaGJAyiLjTAwm6ZLRQUMv1ZACTj37sR62cfN7fe5JnJ7dh8zL4fiyLHV/*)\", RANGE, {{\"2102df12b7035bdac8e3bab862a3a83d06ea6b17b6753d52edecba9be46f5d09e076ac\",\"76a914f90e3178ca25f2c808dc76624032d352fdbdfaf288ac\",\"0014f90e3178ca25f2c808dc76624032d352fdbdfaf2\",\"a91408f3ea8c68d4a7585bf9e8bda226723f70e445f087\"},{\"21032869a233c9adff9a994e4966e5b821fd5bac066da6c3112488dc52383b4a98ecac\",\"76a914a8409d1b6dfb1ed2a3e8aa5e0ef2ff26b15b75b788ac\",\"0014a8409d1b6dfb1ed2a3e8aa5e0ef2ff26b15b75b7\",\"a91473e39884cb71ae4e5ac9739e9225026c99763e6687\"}}, {{0}, {1}});\n-    CheckUnparsable(\"combo([012345678]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc)\", \"combo([012345678]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL)\"); // Too long key fingerprint\n-    CheckUnparsable(\"pkh(xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483648)\", \"pkh(xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483648)\"); // BIP 32 path element overflow\n+    CheckUnparsable(\"combo([012345678]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc)\", \"combo([012345678]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL)\", \"Fingerprint is not 4 bytes (9 characters instead of 8 characters)\"); // Too long key fingerprint\n+    CheckUnparsable(\"pkh(xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483648)\", \"pkh(xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483648)\", \"Key path value 2147483648 is out of range\"); // BIP 32 path element overflow\n+    CheckUnparsable(\"pkh(xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/1aa)\", \"pkh(xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/1aa)\", \"Key path value '1aa' is not a valid uint32\"); // Path is not valid uint\n \n     // Multisig constructions\n     Check(\"multi(1,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1,5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"multi(1,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd,04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", SIGNABLE, {{\"512103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd4104a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea23552ae\"}});\n     Check(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))\", DEFAULT, {{\"a91445a9a622a8b0a1269944be477640eedc447bbd8487\"}}, {{0x8000006FUL,222},{0}});\n     Check(\"wsh(multi(2,xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0,xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*,xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"wsh(multi(2,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*,xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", HARDENED | RANGE, {{\"0020b92623201f3bb7c3771d45b2ad1d0351ea8fbf8cfe0a0e570264e1075fa1948f\"},{\"002036a08bbe4923af41cf4316817c93b8d37e2f635dd25cfff06bd50df6ae7ea203\"},{\"0020a96e7ab4607ca6b261bfe3245ffda9c746b28d3f59e83d34820ec0e2b36c139c\"}}, {{0xFFFFFFFFUL,0}, {1,2,0}, {1,2,1}, {1,2,2}, {10, 20, 30, 40, 0x80000000UL}, {10, 20, 30, 40, 0x80000001UL}, {10, 20, 30, 40, 0x80000002UL}});\n     Check(\"sh(wsh(multi(16,KzoAz5CanayRKex3fSLQ2BwJpN7U52gZvxMyk78nDMHuqrUxuSJy,KwGNz6YCCQtYvFzMtrC6D3tKTKdBBboMrLTsjr2NYVBwapCkn7Mr,KxogYhiNfwxuswvXV66eFyKcCpm7dZ7TqHVqujHAVUjJxyivxQ9X,L2BUNduTSyZwZjwNHynQTF14mv2uz2NRq5n5sYWTb4FkkmqgEE9f,L1okJGHGn1kFjdXHKxXjwVVtmCMR2JA5QsbKCSpSb7ReQjezKeoD,KxDCNSST75HFPaW5QKpzHtAyaCQC7p9Vo3FYfi2u4dXD1vgMiboK,L5edQjFtnkcf5UWURn6UuuoFrabgDQUHdheKCziwN42aLwS3KizU,KzF8UWFcEC7BYTq8Go1xVimMkDmyNYVmXV5PV7RuDicvAocoPB8i,L3nHUboKG2w4VSJ5jYZ5CBM97oeK6YuKvfZxrefdShECcjEYKMWZ,KyjHo36dWkYhimKmVVmQTq3gERv3pnqA4xFCpvUgbGDJad7eS8WE,KwsfyHKRUTZPQtysN7M3tZ4GXTnuov5XRgjdF2XCG8faAPmFruRF,KzCUbGhN9LJhdeFfL9zQgTJMjqxdBKEekRGZX24hXdgCNCijkkap,KzgpMBwwsDLwkaC5UrmBgCYaBD2WgZ7PBoGYXR8KT7gCA9UTN5a3,KyBXTPy4T7YG4q9tcAM3LkvfRpD1ybHMvcJ2ehaWXaSqeGUxEdkP,KzJDe9iwJRPtKP2F2AoN6zBgzS7uiuAwhWCfGdNeYJ3PC1HNJ8M8,L1xbHrxynrqLKkoYc4qtoQPx6uy5qYXR5ZDYVYBSRmCV5piU3JG9)))\",\"sh(wsh(multi(16,03669b8afcec803a0d323e9a17f3ea8e68e8abe5a278020a929adbec52421adbd0,0260b2003c386519fc9eadf2b5cf124dd8eea4c4e68d5e154050a9346ea98ce600,0362a74e399c39ed5593852a30147f2959b56bb827dfa3e60e464b02ccf87dc5e8,0261345b53de74a4d721ef877c255429961b7e43714171ac06168d7e08c542a8b8,02da72e8b46901a65d4374fe6315538d8f368557dda3a1dcf9ea903f3afe7314c8,0318c82dd0b53fd3a932d16e0ba9e278fcc937c582d5781be626ff16e201f72286,0297ccef1ef99f9d73dec9ad37476ddb232f1238aff877af19e72ba04493361009,02e502cfd5c3f972fe9a3e2a18827820638f96b6f347e54d63deb839011fd5765d,03e687710f0e3ebe81c1037074da939d409c0025f17eb86adb9427d28f0f7ae0e9,02c04d3a5274952acdbc76987f3184b346a483d43be40874624b29e3692c1df5af,02ed06e0f418b5b43a7ec01d1d7d27290fa15f75771cb69b642a51471c29c84acd,036d46073cbb9ffee90473f3da429abc8de7f8751199da44485682a989a4bebb24,02f5d1ff7c9029a80a4e36b9a5497027ef7f3e73384a4a94fbfe7c4e9164eec8bc,02e41deffd1b7cce11cde209a781adcffdabd1b91c0ba0375857a2bfd9302419f3,02d76625f7956a7fc505ab02556c23ee72d832f1bac391bcd2d3abce5710a13d06,0399eb0a5487515802dc14544cf10b3666623762fbed2ec38a3975716e2c29c232)))\", SIGNABLE, {{\"a9147fc63e13dc25e8a95a3cee3d9a714ac3afd96f1e87\"}});\n-    CheckUnparsable(\"sh(multi(16,KzoAz5CanayRKex3fSLQ2BwJpN7U52gZvxMyk78nDMHuqrUxuSJy,KwGNz6YCCQtYvFzMtrC6D3tKTKdBBboMrLTsjr2NYVBwapCkn7Mr,KxogYhiNfwxuswvXV66eFyKcCpm7dZ7TqHVqujHAVUjJxyivxQ9X,L2BUNduTSyZwZjwNHynQTF14mv2uz2NRq5n5sYWTb4FkkmqgEE9f,L1okJGHGn1kFjdXHKxXjwVVtmCMR2JA5QsbKCSpSb7ReQjezKeoD,KxDCNSST75HFPaW5QKpzHtAyaCQC7p9Vo3FYfi2u4dXD1vgMiboK,L5edQjFtnkcf5UWURn6UuuoFrabgDQUHdheKCziwN42aLwS3KizU,KzF8UWFcEC7BYTq8Go1xVimMkDmyNYVmXV5PV7RuDicvAocoPB8i,L3nHUboKG2w4VSJ5jYZ5CBM97oeK6YuKvfZxrefdShECcjEYKMWZ,KyjHo36dWkYhimKmVVmQTq3gERv3pnqA4xFCpvUgbGDJad7eS8WE,KwsfyHKRUTZPQtysN7M3tZ4GXTnuov5XRgjdF2XCG8faAPmFruRF,KzCUbGhN9LJhdeFfL9zQgTJMjqxdBKEekRGZX24hXdgCNCijkkap,KzgpMBwwsDLwkaC5UrmBgCYaBD2WgZ7PBoGYXR8KT7gCA9UTN5a3,KyBXTPy4T7YG4q9tcAM3LkvfRpD1ybHMvcJ2ehaWXaSqeGUxEdkP,KzJDe9iwJRPtKP2F2AoN6zBgzS7uiuAwhWCfGdNeYJ3PC1HNJ8M8,L1xbHrxynrqLKkoYc4qtoQPx6uy5qYXR5ZDYVYBSRmCV5piU3JG9))\",\"sh(multi(16,03669b8afcec803a0d323e9a17f3ea8e68e8abe5a278020a929adbec52421adbd0,0260b2003c386519fc9eadf2b5cf124dd8eea4c4e68d5e154050a9346ea98ce600,0362a74e399c39ed5593852a30147f2959b56bb827dfa3e60e464b02ccf87dc5e8,0261345b53de74a4d721ef877c255429961b7e43714171ac06168d7e08c542a8b8,02da72e8b46901a65d4374fe6315538d8f368557dda3a1dcf9ea903f3afe7314c8,0318c82dd0b53fd3a932d16e0ba9e278fcc937c582d5781be626ff16e201f72286,0297ccef1ef99f9d73dec9ad37476ddb232f1238aff877af19e72ba04493361009,02e502cfd5c3f972fe9a3e2a18827820638f96b6f347e54d63deb839011fd5765d,03e687710f0e3ebe81c1037074da939d409c0025f17eb86adb9427d28f0f7ae0e9,02c04d3a5274952acdbc76987f3184b346a483d43be40874624b29e3692c1df5af,02ed06e0f418b5b43a7ec01d1d7d27290fa15f75771cb69b642a51471c29c84acd,036d46073cbb9ffee90473f3da429abc8de7f8751199da44485682a989a4bebb24,02f5d1ff7c9029a80a4e36b9a5497027ef7f3e73384a4a94fbfe7c4e9164eec8bc,02e41deffd1b7cce11cde209a781adcffdabd1b91c0ba0375857a2bfd9302419f3,02d76625f7956a7fc505ab02556c23ee72d832f1bac391bcd2d3abce5710a13d06,0399eb0a5487515802dc14544cf10b3666623762fbed2ec38a3975716e2c29c232))\"); // P2SH does not fit 16 compressed pubkeys in a redeemscript\n-    CheckUnparsable(\"wsh(multi(2,[aaaaaaaa][aaaaaaaa]xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0,xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*,xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"wsh(multi(2,[aaaaaaaa][aaaaaaaa]xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*,xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\"); // Double key origin descriptor\n-    CheckUnparsable(\"wsh(multi(2,[aaaagaaa]xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0,xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*,xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"wsh(multi(2,[aaagaaaa]xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*,xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\"); // Non hex fingerprint\n-    CheckUnparsable(\"wsh(multi(2,[aaaaaaaa],xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*,xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"wsh(multi(2,[aaaaaaaa],xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*,xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\"); // No public key with origin\n-    CheckUnparsable(\"wsh(multi(2,[aaaaaaa]xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0,xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*,xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"wsh(multi(2,[aaaaaaa]xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*,xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\"); // Too short fingerprint\n-    CheckUnparsable(\"wsh(multi(2,[aaaaaaaaa]xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0,xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*,xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"wsh(multi(2,[aaaaaaaaa]xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*,xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\"); // Too long fingerprint\n+    CheckUnparsable(\"sh(multi(16,KzoAz5CanayRKex3fSLQ2BwJpN7U52gZvxMyk78nDMHuqrUxuSJy,KwGNz6YCCQtYvFzMtrC6D3tKTKdBBboMrLTsjr2NYVBwapCkn7Mr,KxogYhiNfwxuswvXV66eFyKcCpm7dZ7TqHVqujHAVUjJxyivxQ9X,L2BUNduTSyZwZjwNHynQTF14mv2uz2NRq5n5sYWTb4FkkmqgEE9f,L1okJGHGn1kFjdXHKxXjwVVtmCMR2JA5QsbKCSpSb7ReQjezKeoD,KxDCNSST75HFPaW5QKpzHtAyaCQC7p9Vo3FYfi2u4dXD1vgMiboK,L5edQjFtnkcf5UWURn6UuuoFrabgDQUHdheKCziwN42aLwS3KizU,KzF8UWFcEC7BYTq8Go1xVimMkDmyNYVmXV5PV7RuDicvAocoPB8i,L3nHUboKG2w4VSJ5jYZ5CBM97oeK6YuKvfZxrefdShECcjEYKMWZ,KyjHo36dWkYhimKmVVmQTq3gERv3pnqA4xFCpvUgbGDJad7eS8WE,KwsfyHKRUTZPQtysN7M3tZ4GXTnuov5XRgjdF2XCG8faAPmFruRF,KzCUbGhN9LJhdeFfL9zQgTJMjqxdBKEekRGZX24hXdgCNCijkkap,KzgpMBwwsDLwkaC5UrmBgCYaBD2WgZ7PBoGYXR8KT7gCA9UTN5a3,KyBXTPy4T7YG4q9tcAM3LkvfRpD1ybHMvcJ2ehaWXaSqeGUxEdkP,KzJDe9iwJRPtKP2F2AoN6zBgzS7uiuAwhWCfGdNeYJ3PC1HNJ8M8,L1xbHrxynrqLKkoYc4qtoQPx6uy5qYXR5ZDYVYBSRmCV5piU3JG9))\",\"sh(multi(16,03669b8afcec803a0d323e9a17f3ea8e68e8abe5a278020a929adbec52421adbd0,0260b2003c386519fc9eadf2b5cf124dd8eea4c4e68d5e154050a9346ea98ce600,0362a74e399c39ed5593852a30147f2959b56bb827dfa3e60e464b02ccf87dc5e8,0261345b53de74a4d721ef877c255429961b7e43714171ac06168d7e08c542a8b8,02da72e8b46901a65d4374fe6315538d8f368557dda3a1dcf9ea903f3afe7314c8,0318c82dd0b53fd3a932d16e0ba9e278fcc937c582d5781be626ff16e201f72286,0297ccef1ef99f9d73dec9ad37476ddb232f1238aff877af19e72ba04493361009,02e502cfd5c3f972fe9a3e2a18827820638f96b6f347e54d63deb839011fd5765d,03e687710f0e3ebe81c1037074da939d409c0025f17eb86adb9427d28f0f7ae0e9,02c04d3a5274952acdbc76987f3184b346a483d43be40874624b29e3692c1df5af,02ed06e0f418b5b43a7ec01d1d7d27290fa15f75771cb69b642a51471c29c84acd,036d46073cbb9ffee90473f3da429abc8de7f8751199da44485682a989a4bebb24,02f5d1ff7c9029a80a4e36b9a5497027ef7f3e73384a4a94fbfe7c4e9164eec8bc,02e41deffd1b7cce11cde209a781adcffdabd1b91c0ba0375857a2bfd9302419f3,02d76625f7956a7fc505ab02556c23ee72d832f1bac391bcd2d3abce5710a13d06,0399eb0a5487515802dc14544cf10b3666623762fbed2ec38a3975716e2c29c232))\", \"P2SH script is too large, 547 bytes is larger than 520 bytes\"); // P2SH does not fit 16 compressed pubkeys in a redeemscript\n+    CheckUnparsable(\"wsh(multi(2,[aaaaaaaa][aaaaaaaa]xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0,xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*,xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"wsh(multi(2,[aaaaaaaa][aaaaaaaa]xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*,xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", \"Multiple ']' characters found for a single pubkey\"); // Double key origin descriptor\n+    CheckUnparsable(\"wsh(multi(2,[aaaagaaa]xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0,xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*,xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"wsh(multi(2,[aaagaaaa]xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*,xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", \"Fingerprint 'aaagaaaa' is not hex\"); // Non hex fingerprint\n+    CheckUnparsable(\"wsh(multi(2,[aaaaaaaa],xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*,xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"wsh(multi(2,[aaaaaaaa],xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*,xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", \"No key provided\"); // No public key with origin\n+    CheckUnparsable(\"wsh(multi(2,[aaaaaaa]xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0,xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*,xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"wsh(multi(2,[aaaaaaa]xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*,xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", \"Fingerprint is not 4 bytes (7 characters instead of 8 characters)\"); // Too short fingerprint\n+    CheckUnparsable(\"wsh(multi(2,[aaaaaaaaa]xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0,xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*,xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"wsh(multi(2,[aaaaaaaaa]xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*,xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", \"Fingerprint is not 4 bytes (9 characters instead of 8 characters)\"); // Too long fingerprint\n+    CheckUnparsable(\"multi(a,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1,5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"multi(a,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd,04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", \"Multi threshold 'a' is not valid\"); // Invalid threshold\n+    CheckUnparsable(\"multi(0,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1,5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"multi(0,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd,04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", \"Multisig threshold cannot be 0, must be at least 1\"); // Threshold of 0\n+    CheckUnparsable(\"multi(3,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1,5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"multi(3,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd,04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", \"Multisig threshold cannot be larger than the number of keys; threshold is 3 but only 2 keys specified\"); // Threshold larger than number of keys\n+    CheckUnparsable(\"multi(3,KzoAz5CanayRKex3fSLQ2BwJpN7U52gZvxMyk78nDMHuqrUxuSJy,KwGNz6YCCQtYvFzMtrC6D3tKTKdBBboMrLTsjr2NYVBwapCkn7Mr,KxogYhiNfwxuswvXV66eFyKcCpm7dZ7TqHVqujHAVUjJxyivxQ9X,L2BUNduTSyZwZjwNHynQTF14mv2uz2NRq5n5sYWTb4FkkmqgEE9f)\", \"multi(3,03669b8afcec803a0d323e9a17f3ea8e68e8abe5a278020a929adbec52421adbd0,0260b2003c386519fc9eadf2b5cf124dd8eea4c4e68d5e154050a9346ea98ce600,0362a74e399c39ed5593852a30147f2959b56bb827dfa3e60e464b02ccf87dc5e8,0261345b53de74a4d721ef877c255429961b7e43714171ac06168d7e08c542a8b8)\", \"Cannot have 4 pubkeys in bare multisig; only at most 3 pubkeys\"); // Threshold larger than number of keys\n+    CheckUnparsable(\"sh(multi(16,KzoAz5CanayRKex3fSLQ2BwJpN7U52gZvxMyk78nDMHuqrUxuSJy,KwGNz6YCCQtYvFzMtrC6D3tKTKdBBboMrLTsjr2NYVBwapCkn7Mr,KxogYhiNfwxuswvXV66eFyKcCpm7dZ7TqHVqujHAVUjJxyivxQ9X,L2BUNduTSyZwZjwNHynQTF14mv2uz2NRq5n5sYWTb4FkkmqgEE9f,L1okJGHGn1kFjdXHKxXjwVVtmCMR2JA5QsbKCSpSb7ReQjezKeoD,KxDCNSST75HFPaW5QKpzHtAyaCQC7p9Vo3FYfi2u4dXD1vgMiboK,L5edQjFtnkcf5UWURn6UuuoFrabgDQUHdheKCziwN42aLwS3KizU,KzF8UWFcEC7BYTq8Go1xVimMkDmyNYVmXV5PV7RuDicvAocoPB8i,L3nHUboKG2w4VSJ5jYZ5CBM97oeK6YuKvfZxrefdShECcjEYKMWZ,KyjHo36dWkYhimKmVVmQTq3gERv3pnqA4xFCpvUgbGDJad7eS8WE,KwsfyHKRUTZPQtysN7M3tZ4GXTnuov5XRgjdF2XCG8faAPmFruRF,KzCUbGhN9LJhdeFfL9zQgTJMjqxdBKEekRGZX24hXdgCNCijkkap,KzgpMBwwsDLwkaC5UrmBgCYaBD2WgZ7PBoGYXR8KT7gCA9UTN5a3,KyBXTPy4T7YG4q9tcAM3LkvfRpD1ybHMvcJ2ehaWXaSqeGUxEdkP,KzJDe9iwJRPtKP2F2AoN6zBgzS7uiuAwhWCfGdNeYJ3PC1HNJ8M8,L1xbHrxynrqLKkoYc4qtoQPx6uy5qYXR5ZDYVYBSRmCV5piU3JG9,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\",\"sh(multi(16,03669b8afcec803a0d323e9a17f3ea8e68e8abe5a278020a929adbec52421adbd0,0260b2003c386519fc9eadf2b5cf124dd8eea4c4e68d5e154050a9346ea98ce600,0362a74e399c39ed5593852a30147f2959b56bb827dfa3e60e464b02ccf87dc5e8,0261345b53de74a4d721ef877c255429961b7e43714171ac06168d7e08c542a8b8,02da72e8b46901a65d4374fe6315538d8f368557dda3a1dcf9ea903f3afe7314c8,0318c82dd0b53fd3a932d16e0ba9e278fcc937c582d5781be626ff16e201f72286,0297ccef1ef99f9d73dec9ad37476ddb232f1238aff877af19e72ba04493361009,02e502cfd5c3f972fe9a3e2a18827820638f96b6f347e54d63deb839011fd5765d,03e687710f0e3ebe81c1037074da939d409c0025f17eb86adb9427d28f0f7ae0e9,02c04d3a5274952acdbc76987f3184b346a483d43be40874624b29e3692c1df5af,02ed06e0f418b5b43a7ec01d1d7d27290fa15f75771cb69b642a51471c29c84acd,036d46073cbb9ffee90473f3da429abc8de7f8751199da44485682a989a4bebb24,02f5d1ff7c9029a80a4e36b9a5497027ef7f3e73384a4a94fbfe7c4e9164eec8bc,02e41deffd1b7cce11cde209a781adcffdabd1b91c0ba0375857a2bfd9302419f3,02d76625f7956a7fc505ab02556c23ee72d832f1bac391bcd2d3abce5710a13d06,0399eb0a5487515802dc14544cf10b3666623762fbed2ec38a3975716e2c29c232,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", \"Cannot have 17 keys in multisig; must have between 1 and 16 keys, inclusive\"); // Cannot have more than 16 keys in a multisig\n \n     // Check for invalid nesting of structures\n-    CheckUnparsable(\"sh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"sh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\"); // P2SH needs a script, not a key\n-    CheckUnparsable(\"sh(combo(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"sh(combo(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\"); // Old must be top level\n-    CheckUnparsable(\"wsh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"wsh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\"); // P2WSH needs a script, not a key\n-    CheckUnparsable(\"wsh(wpkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"wsh(wpkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\"); // Cannot embed witness inside witness\n-    CheckUnparsable(\"wsh(sh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))\", \"wsh(sh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))\"); // Cannot embed P2SH inside P2WSH\n-    CheckUnparsable(\"sh(sh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))\", \"sh(sh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))\"); // Cannot embed P2SH inside P2SH\n-    CheckUnparsable(\"wsh(wsh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))\", \"wsh(wsh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))\"); // Cannot embed P2WSH inside P2WSH\n+    CheckUnparsable(\"sh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"sh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", \"A function is needed within P2SH\"); // P2SH needs a script, not a key\n+    CheckUnparsable(\"sh(combo(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"sh(combo(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", \"Cannot have combo in non-top level\"); // Old must be top level\n+    CheckUnparsable(\"wsh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"wsh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", \"A function is needed within P2WSH\"); // P2WSH needs a script, not a key\n+    CheckUnparsable(\"wsh(wpkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"wsh(wpkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", \"Cannot have wpkh within wsh\"); // Cannot embed witness inside witness\n+    CheckUnparsable(\"wsh(sh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))\", \"wsh(sh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))\", \"Cannot have sh in non-top level\"); // Cannot embed P2SH inside P2WSH\n+    CheckUnparsable(\"sh(sh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))\", \"sh(sh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))\", \"Cannot have sh in non-top level\"); // Cannot embed P2SH inside P2SH\n+    CheckUnparsable(\"wsh(wsh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))\", \"wsh(wsh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))\", \"Cannot have wsh within wsh\"); // Cannot embed P2WSH inside P2WSH\n \n     // Checksums\n     Check(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))#ggrsrxfy\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))#tjg09x5t\", DEFAULT, {{\"a91445a9a622a8b0a1269944be477640eedc447bbd8487\"}}, {{0x8000006FUL,222},{0}});\n     Check(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))\", DEFAULT, {{\"a91445a9a622a8b0a1269944be477640eedc447bbd8487\"}}, {{0x8000006FUL,222},{0}});\n-    CheckUnparsable(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))#\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))#\"); // Empty checksum\n-    CheckUnparsable(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))#ggrsrxfyq\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))#tjg09x5tq\"); // Too long checksum\n-    CheckUnparsable(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))#ggrsrxf\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))#tjg09x5\"); // Too short checksum\n-    CheckUnparsable(\"sh(multi(3,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))#ggrsrxfy\", \"sh(multi(3,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))#tjg09x5t\"); // Error in payload\n-    CheckUnparsable(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))#ggssrxfy\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))#tjq09x4t\"); // Error in checksum\n+    CheckUnparsable(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))#\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))#\", \"Expected 8 character checksum, not 0 characters\"); // Empty checksum\n+    CheckUnparsable(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))#ggrsrxfyq\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))#tjg09x5tq\", \"Expected 8 character checksum, not 9 characters\"); // Too long checksum\n+    CheckUnparsable(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))#ggrsrxf\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))#tjg09x5\", \"Expected 8 character checksum, not 7 characters\"); // Too short checksum\n+    CheckUnparsable(\"sh(multi(3,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))#ggrsrxfy\", \"sh(multi(3,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))#tjg09x5t\", \"Provided checksum 'tjg09x5t' does not match computed checksum 'd4x0uxyv'\"); // Error in payload\n+    CheckUnparsable(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))#ggssrxfy\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))#tjq09x4t\", \"Provided checksum 'tjq09x4t' does not match computed checksum 'tjg09x5t'\"); // Error in checksum\n+    CheckUnparsable(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))##ggssrxfy\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))##tjq09x4t\", \"Multiple '#' symbols\"); // Error in checksum\n+\n+    // Addr and raw tests\n+    CheckUnparsable(\"\", \"addr(asdf)\", \"Address is not valid\"); // Invalid address\n+    CheckUnparsable(\"\", \"raw(asdf)\", \"Raw script is not hex\"); // Invalid script\n+    CheckUnparsable(\"\", \"raw(\u00dc)#00000000\", \"Invalid characters in payload\"); // Invalid chars\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "740d805ccedb0e5b7528e0f90e953ff820737e20",
        "filename": "src/test/flatfile_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/flatfile_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/flatfile_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/flatfile_tests.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -2,8 +2,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <clientversion.h>\n #include <flatfile.h>\n+#include <streams.h>\n #include <test/setup_common.h>\n+#include <util/system.h>\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "6d5a6641f0aa1301ccaad949905ae91760710486",
        "filename": "src/test/fs_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/fs_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/fs_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fs_tests.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -4,6 +4,7 @@\n //\n #include <fs.h>\n #include <test/setup_common.h>\n+#include <util/system.h>\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "9364ac4a323156d663239cae1fa3ca0c6caf1332",
        "filename": "src/test/fuzz/deserialize.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/fuzz/deserialize.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/fuzz/deserialize.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/deserialize.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <addrdb.h>\n #include <addrman.h>\n #include <blockencodings.h>\n #include <chain.h>\n@@ -11,17 +12,13 @@\n #include <net.h>\n #include <primitives/block.h>\n #include <protocol.h>\n-#include <pubkey.h>\n-#include <script/script.h>\n #include <streams.h>\n #include <undo.h>\n #include <version.h>\n \n #include <stdint.h>\n #include <unistd.h>\n \n-#include <algorithm>\n-#include <memory>\n #include <vector>\n \n #include <test/fuzz/fuzz.h>"
      },
      {
        "sha": "4e009d9b5447c85cf61ec9e20b64bccbc34acf59",
        "filename": "src/test/fuzz/fuzz.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/fuzz/fuzz.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/fuzz/fuzz.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/fuzz.h?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -5,7 +5,6 @@\n #ifndef BITCOIN_TEST_FUZZ_FUZZ_H\n #define BITCOIN_TEST_FUZZ_FUZZ_H\n \n-#include <functional>\n #include <stdint.h>\n #include <vector>\n "
      },
      {
        "sha": "9b90d6675578d9f4ddcea261e50d81e204efc16a",
        "filename": "src/test/fuzz/script_flags.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/fuzz/script_flags.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/fuzz/script_flags.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script_flags.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -3,7 +3,6 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <script/interpreter.h>\n-#include <script/script.h>\n #include <streams.h>\n #include <version.h>\n "
      },
      {
        "sha": "77304fe91845d141d6dfeeef65fbaa1af0a5207d",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 8,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -7,6 +7,7 @@\n #include <test/setup_common.h>\n \n #include <string>\n+#include <utility>\n #include <vector>\n \n #include <boost/algorithm/string.hpp>\n@@ -32,17 +33,18 @@ static void ResetArgs(const std::string& strArg)\n     BOOST_CHECK(gArgs.ParseParameters(vecChar.size(), vecChar.data(), error));\n }\n \n-static void SetupArgs(const std::vector<std::string>& args)\n+static void SetupArgs(const std::vector<std::pair<std::string, unsigned int>>& args)\n {\n     gArgs.ClearArgs();\n-    for (const std::string& arg : args) {\n-        gArgs.AddArg(arg, \"\", false, OptionsCategory::OPTIONS);\n+    for (const auto& arg : args) {\n+        gArgs.AddArg(arg.first, \"\", arg.second, OptionsCategory::OPTIONS);\n     }\n }\n \n BOOST_AUTO_TEST_CASE(boolarg)\n {\n-    SetupArgs({\"-foo\"});\n+    const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_BOOL);\n+    SetupArgs({foo});\n     ResetArgs(\"-foo\");\n     BOOST_CHECK(gArgs.GetBoolArg(\"-foo\", false));\n     BOOST_CHECK(gArgs.GetBoolArg(\"-foo\", true));\n@@ -95,7 +97,9 @@ BOOST_AUTO_TEST_CASE(boolarg)\n \n BOOST_AUTO_TEST_CASE(stringarg)\n {\n-    SetupArgs({\"-foo\", \"-bar\"});\n+    const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_STRING);\n+    const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_STRING);\n+    SetupArgs({foo, bar});\n     ResetArgs(\"\");\n     BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", \"\"), \"\");\n     BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n@@ -120,7 +124,9 @@ BOOST_AUTO_TEST_CASE(stringarg)\n \n BOOST_AUTO_TEST_CASE(intarg)\n {\n-    SetupArgs({\"-foo\", \"-bar\"});\n+    const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_INT);\n+    const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_INT);\n+    SetupArgs({foo, bar});\n     ResetArgs(\"\");\n     BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", 11), 11);\n     BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", 0), 0);\n@@ -140,7 +146,9 @@ BOOST_AUTO_TEST_CASE(intarg)\n \n BOOST_AUTO_TEST_CASE(doubledash)\n {\n-    SetupArgs({\"-foo\", \"-bar\"});\n+    const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n+    const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n+    SetupArgs({foo, bar});\n     ResetArgs(\"--foo\");\n     BOOST_CHECK_EQUAL(gArgs.GetBoolArg(\"-foo\", false), true);\n \n@@ -151,7 +159,9 @@ BOOST_AUTO_TEST_CASE(doubledash)\n \n BOOST_AUTO_TEST_CASE(boolargno)\n {\n-    SetupArgs({\"-foo\", \"-bar\"});\n+    const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_BOOL);\n+    const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_BOOL);\n+    SetupArgs({foo, bar});\n     ResetArgs(\"-nofoo\");\n     BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", true));\n     BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", false));"
      },
      {
        "sha": "d91fcb00347ad2d8cb638cb5018807b9a89f3d7b",
        "filename": "src/test/hash_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/hash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/hash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/hash_tests.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -2,13 +2,12 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <clientversion.h>\n #include <crypto/siphash.h>\n #include <hash.h>\n #include <util/strencodings.h>\n #include <test/setup_common.h>\n \n-#include <vector>\n-\n #include <boost/test/unit_test.hpp>\n \n BOOST_FIXTURE_TEST_SUITE(hash_tests, BasicTestingSetup)"
      },
      {
        "sha": "abcfc4547b4b111ee0b9b4377281d5d8462486cd",
        "filename": "src/test/key_properties.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/key_properties.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/key_properties.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_properties.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -3,13 +3,9 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #include <key.h>\n \n-#include <base58.h>\n-#include <script/script.h>\n #include <uint256.h>\n #include <util/system.h>\n-#include <util/strencodings.h>\n #include <test/setup_common.h>\n-#include <string>\n #include <vector>\n \n #include <boost/test/unit_test.hpp>"
      },
      {
        "sha": "3e99dcaa40b5e971885098e4524a6fb169ff8545",
        "filename": "src/test/key_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/key_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/key_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_tests.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -5,7 +5,6 @@\n #include <key.h>\n \n #include <key_io.h>\n-#include <script/script.h>\n #include <uint256.h>\n #include <util/system.h>\n #include <util/strencodings.h>"
      },
      {
        "sha": "fe5d31b7d3d3c88ffdcd1741fde2056679877d3c",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 11,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -5,15 +5,17 @@\n #include <policy/policy.h>\n #include <txmempool.h>\n #include <util/system.h>\n+#include <util/time.h>\n \n #include <test/setup_common.h>\n \n #include <boost/test/unit_test.hpp>\n-#include <list>\n #include <vector>\n \n BOOST_FIXTURE_TEST_SUITE(mempool_tests, TestingSetup)\n \n+static constexpr auto REMOVAL_REASON_DUMMY = MemPoolRemovalReason::REPLACED;\n+\n BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n {\n     // Test CTxMemPool::remove functionality\n@@ -59,13 +61,13 @@ BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n \n     // Nothing in pool, remove should do nothing:\n     unsigned int poolSize = testPool.size();\n-    testPool.removeRecursive(CTransaction(txParent));\n+    testPool.removeRecursive(CTransaction(txParent), REMOVAL_REASON_DUMMY);\n     BOOST_CHECK_EQUAL(testPool.size(), poolSize);\n \n     // Just the parent:\n     testPool.addUnchecked(entry.FromTx(txParent));\n     poolSize = testPool.size();\n-    testPool.removeRecursive(CTransaction(txParent));\n+    testPool.removeRecursive(CTransaction(txParent), REMOVAL_REASON_DUMMY);\n     BOOST_CHECK_EQUAL(testPool.size(), poolSize - 1);\n \n     // Parent, children, grandchildren:\n@@ -77,18 +79,18 @@ BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n     }\n     // Remove Child[0], GrandChild[0] should be removed:\n     poolSize = testPool.size();\n-    testPool.removeRecursive(CTransaction(txChild[0]));\n+    testPool.removeRecursive(CTransaction(txChild[0]), REMOVAL_REASON_DUMMY);\n     BOOST_CHECK_EQUAL(testPool.size(), poolSize - 2);\n     // ... make sure grandchild and child are gone:\n     poolSize = testPool.size();\n-    testPool.removeRecursive(CTransaction(txGrandChild[0]));\n+    testPool.removeRecursive(CTransaction(txGrandChild[0]), REMOVAL_REASON_DUMMY);\n     BOOST_CHECK_EQUAL(testPool.size(), poolSize);\n     poolSize = testPool.size();\n-    testPool.removeRecursive(CTransaction(txChild[0]));\n+    testPool.removeRecursive(CTransaction(txChild[0]), REMOVAL_REASON_DUMMY);\n     BOOST_CHECK_EQUAL(testPool.size(), poolSize);\n     // Remove parent, all children/grandchildren should go:\n     poolSize = testPool.size();\n-    testPool.removeRecursive(CTransaction(txParent));\n+    testPool.removeRecursive(CTransaction(txParent), REMOVAL_REASON_DUMMY);\n     BOOST_CHECK_EQUAL(testPool.size(), poolSize - 5);\n     BOOST_CHECK_EQUAL(testPool.size(), 0U);\n \n@@ -101,7 +103,7 @@ BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n     // Now remove the parent, as might happen if a block-re-org occurs but the parent cannot be\n     // put into the mempool (maybe because it is non-standard):\n     poolSize = testPool.size();\n-    testPool.removeRecursive(CTransaction(txParent));\n+    testPool.removeRecursive(CTransaction(txParent), REMOVAL_REASON_DUMMY);\n     BOOST_CHECK_EQUAL(testPool.size(), poolSize - 6);\n     BOOST_CHECK_EQUAL(testPool.size(), 0U);\n }\n@@ -283,11 +285,11 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     BOOST_CHECK_EQUAL(pool.size(), 10U);\n \n     // Now try removing tx10 and verify the sort order returns to normal\n-    pool.removeRecursive(pool.mapTx.find(tx10.GetHash())->GetTx());\n+    pool.removeRecursive(pool.mapTx.find(tx10.GetHash())->GetTx(), REMOVAL_REASON_DUMMY);\n     CheckSort<descendant_score>(pool, snapshotOrder);\n \n-    pool.removeRecursive(pool.mapTx.find(tx9.GetHash())->GetTx());\n-    pool.removeRecursive(pool.mapTx.find(tx8.GetHash())->GetTx());\n+    pool.removeRecursive(pool.mapTx.find(tx9.GetHash())->GetTx(), REMOVAL_REASON_DUMMY);\n+    pool.removeRecursive(pool.mapTx.find(tx8.GetHash())->GetTx(), REMOVAL_REASON_DUMMY);\n }\n \n BOOST_AUTO_TEST_CASE(MempoolAncestorIndexingTest)"
      },
      {
        "sha": "c9661b730d9528f0726c438284a6056a249aed96",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -9,12 +9,12 @@\n #include <consensus/tx_verify.h>\n #include <miner.h>\n #include <policy/policy.h>\n-#include <pubkey.h>\n #include <script/standard.h>\n #include <txmempool.h>\n #include <uint256.h>\n #include <util/strencodings.h>\n #include <util/system.h>\n+#include <util/time.h>\n #include <validation.h>\n \n #include <test/setup_common.h>\n@@ -158,7 +158,7 @@ static void TestPackageSelection(const CChainParams& chainparams, const CScript&\n     // Test that packages above the min relay fee do get included, even if one\n     // of the transactions is below the min relay fee\n     // Remove the low fee transaction and replace with a higher fee transaction\n-    mempool.removeRecursive(CTransaction(tx));\n+    mempool.removeRecursive(CTransaction(tx), MemPoolRemovalReason::REPLACED);\n     tx.vout[0].nValue -= 2; // Now we should be just over the min relay fee\n     hashLowFeeTx = tx.GetHash();\n     mempool.addUnchecked(entry.Fee(feeToUse+2).FromTx(tx));\n@@ -372,7 +372,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         CBlockIndex* prev = ::ChainActive().Tip();\n         CBlockIndex* next = new CBlockIndex();\n         next->phashBlock = new uint256(InsecureRand256());\n-        pcoinsTip->SetBestBlock(next->GetBlockHash());\n+        ::ChainstateActive().CoinsTip().SetBestBlock(next->GetBlockHash());\n         next->pprev = prev;\n         next->nHeight = prev->nHeight + 1;\n         next->BuildSkip();\n@@ -384,7 +384,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         CBlockIndex* prev = ::ChainActive().Tip();\n         CBlockIndex* next = new CBlockIndex();\n         next->phashBlock = new uint256(InsecureRand256());\n-        pcoinsTip->SetBestBlock(next->GetBlockHash());\n+        ::ChainstateActive().CoinsTip().SetBestBlock(next->GetBlockHash());\n         next->pprev = prev;\n         next->nHeight = prev->nHeight + 1;\n         next->BuildSkip();\n@@ -414,7 +414,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     while (::ChainActive().Tip()->nHeight > nHeight) {\n         CBlockIndex* del = ::ChainActive().Tip();\n         ::ChainActive().SetTip(del->pprev);\n-        pcoinsTip->SetBestBlock(del->pprev->GetBlockHash());\n+        ::ChainstateActive().CoinsTip().SetBestBlock(del->pprev->GetBlockHash());\n         delete del->phashBlock;\n         delete del;\n     }"
      },
      {
        "sha": "7c60abb93febb9f48ba0e874b7d21f955c5fb571",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -3,12 +3,13 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <key.h>\n-#include <keystore.h>\n #include <policy/policy.h>\n #include <script/script.h>\n #include <script/script_error.h>\n #include <script/interpreter.h>\n #include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <tinyformat.h>\n #include <uint256.h>\n #include <test/setup_common.h>\n \n@@ -173,7 +174,7 @@ BOOST_AUTO_TEST_CASE(multisig_IsStandard)\n BOOST_AUTO_TEST_CASE(multisig_Sign)\n {\n     // Test SignSignature() (and therefore the version of Solver() that signs transactions)\n-    CBasicKeyStore keystore;\n+    FillableSigningProvider keystore;\n     CKey key[4];\n     for (int i = 0; i < 4; i++)\n     {"
      },
      {
        "sha": "fed65afdbf88761d50cf0e73512b18e647e6d461",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -1,16 +1,19 @@\n // Copyright (c) 2012-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addrdb.h>\n #include <addrman.h>\n+#include <clientversion.h>\n #include <test/setup_common.h>\n #include <string>\n #include <boost/test/unit_test.hpp>\n-#include <hash.h>\n #include <serialize.h>\n #include <streams.h>\n #include <net.h>\n #include <netbase.h>\n #include <chainparams.h>\n+#include <util/memory.h>\n #include <util/system.h>\n \n #include <memory>"
      },
      {
        "sha": "a3d08316247ea8966e85fbc9db20d7d01ebd900f",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 79,
        "deletions": 0,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <netbase.h>\n+#include <net_permissions.h>\n #include <test/setup_common.h>\n #include <util/strencodings.h>\n \n@@ -321,4 +322,82 @@ BOOST_AUTO_TEST_CASE(netbase_parsenetwork)\n     BOOST_CHECK_EQUAL(ParseNetwork(\"\"), NET_UNROUTABLE);\n }\n \n+BOOST_AUTO_TEST_CASE(netpermissions_test)\n+{\n+    std::string error;\n+    NetWhitebindPermissions whitebindPermissions;\n+    NetWhitelistPermissions whitelistPermissions;\n+\n+    // Detect invalid white bind\n+    BOOST_CHECK(!NetWhitebindPermissions::TryParse(\"\", whitebindPermissions, error));\n+    BOOST_CHECK(error.find(\"Cannot resolve -whitebind address\") != std::string::npos);\n+    BOOST_CHECK(!NetWhitebindPermissions::TryParse(\"127.0.0.1\", whitebindPermissions, error));\n+    BOOST_CHECK(error.find(\"Need to specify a port with -whitebind\") != std::string::npos);\n+    BOOST_CHECK(!NetWhitebindPermissions::TryParse(\"\", whitebindPermissions, error));\n+\n+    // If no permission flags, assume backward compatibility\n+    BOOST_CHECK(NetWhitebindPermissions::TryParse(\"1.2.3.4:32\", whitebindPermissions, error));\n+    BOOST_CHECK(error.empty());\n+    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, PF_ISIMPLICIT);\n+    BOOST_CHECK(NetPermissions::HasFlag(whitebindPermissions.m_flags, PF_ISIMPLICIT));\n+    NetPermissions::ClearFlag(whitebindPermissions.m_flags, PF_ISIMPLICIT);\n+    BOOST_CHECK(!NetPermissions::HasFlag(whitebindPermissions.m_flags, PF_ISIMPLICIT));\n+    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, PF_NONE);\n+    NetPermissions::AddFlag(whitebindPermissions.m_flags, PF_ISIMPLICIT);\n+    BOOST_CHECK(NetPermissions::HasFlag(whitebindPermissions.m_flags, PF_ISIMPLICIT));\n+\n+    // Can set one permission\n+    BOOST_CHECK(NetWhitebindPermissions::TryParse(\"bloom@1.2.3.4:32\", whitebindPermissions, error));\n+    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, PF_BLOOMFILTER);\n+    BOOST_CHECK(NetWhitebindPermissions::TryParse(\"@1.2.3.4:32\", whitebindPermissions, error));\n+    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, PF_NONE);\n+\n+    // Happy path, can parse flags\n+    BOOST_CHECK(NetWhitebindPermissions::TryParse(\"bloom,forcerelay@1.2.3.4:32\", whitebindPermissions, error));\n+    // forcerelay should also activate the relay permission\n+    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, PF_BLOOMFILTER | PF_FORCERELAY | PF_RELAY);\n+    BOOST_CHECK(NetWhitebindPermissions::TryParse(\"bloom,relay,noban@1.2.3.4:32\", whitebindPermissions, error));\n+    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, PF_BLOOMFILTER | PF_RELAY | PF_NOBAN);\n+    BOOST_CHECK(NetWhitebindPermissions::TryParse(\"bloom,forcerelay,noban@1.2.3.4:32\", whitebindPermissions, error));\n+    BOOST_CHECK(NetWhitebindPermissions::TryParse(\"all@1.2.3.4:32\", whitebindPermissions, error));\n+    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, PF_ALL);\n+\n+    // Allow dups\n+    BOOST_CHECK(NetWhitebindPermissions::TryParse(\"bloom,relay,noban,noban@1.2.3.4:32\", whitebindPermissions, error));\n+    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, PF_BLOOMFILTER | PF_RELAY | PF_NOBAN);\n+\n+    // Allow empty\n+    BOOST_CHECK(NetWhitebindPermissions::TryParse(\"bloom,relay,,noban@1.2.3.4:32\", whitebindPermissions, error));\n+    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, PF_BLOOMFILTER | PF_RELAY | PF_NOBAN);\n+    BOOST_CHECK(NetWhitebindPermissions::TryParse(\",@1.2.3.4:32\", whitebindPermissions, error));\n+    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, PF_NONE);\n+    BOOST_CHECK(NetWhitebindPermissions::TryParse(\",,@1.2.3.4:32\", whitebindPermissions, error));\n+    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, PF_NONE);\n+\n+    // Detect invalid flag\n+    BOOST_CHECK(!NetWhitebindPermissions::TryParse(\"bloom,forcerelay,oopsie@1.2.3.4:32\", whitebindPermissions, error));\n+    BOOST_CHECK(error.find(\"Invalid P2P permission\") != std::string::npos);\n+\n+    // Check whitelist error\n+    BOOST_CHECK(!NetWhitelistPermissions::TryParse(\"bloom,forcerelay,noban@1.2.3.4:32\", whitelistPermissions, error));\n+    BOOST_CHECK(error.find(\"Invalid netmask specified in -whitelist\") != std::string::npos);\n+\n+    // Happy path for whitelist parsing\n+    BOOST_CHECK(NetWhitelistPermissions::TryParse(\"noban@1.2.3.4\", whitelistPermissions, error));\n+    BOOST_CHECK_EQUAL(whitelistPermissions.m_flags, PF_NOBAN);\n+    BOOST_CHECK(NetWhitelistPermissions::TryParse(\"bloom,forcerelay,noban,relay@1.2.3.4/32\", whitelistPermissions, error));\n+    BOOST_CHECK_EQUAL(whitelistPermissions.m_flags, PF_BLOOMFILTER | PF_FORCERELAY | PF_NOBAN | PF_RELAY);\n+    BOOST_CHECK(error.empty());\n+    BOOST_CHECK_EQUAL(whitelistPermissions.m_subnet.ToString(), \"1.2.3.4/32\");\n+    BOOST_CHECK(NetWhitelistPermissions::TryParse(\"bloom,forcerelay,noban,relay,mempool@1.2.3.4/32\", whitelistPermissions, error));\n+\n+    const auto strings = NetPermissions::ToStrings(PF_ALL);\n+    BOOST_CHECK_EQUAL(strings.size(), 5);\n+    BOOST_CHECK(std::find(strings.begin(), strings.end(), \"bloomfilter\") != strings.end());\n+    BOOST_CHECK(std::find(strings.begin(), strings.end(), \"forcerelay\") != strings.end());\n+    BOOST_CHECK(std::find(strings.begin(), strings.end(), \"relay\") != strings.end());\n+    BOOST_CHECK(std::find(strings.begin(), strings.end(), \"noban\") != strings.end());\n+    BOOST_CHECK(std::find(strings.begin(), strings.end(), \"mempool\") != strings.end());\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "016a4f471bd5e26512e139c544c3c83604c37dae",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -7,6 +7,7 @@\n #include <txmempool.h>\n #include <uint256.h>\n #include <util/system.h>\n+#include <util/time.h>\n \n #include <test/setup_common.h>\n "
      },
      {
        "sha": "1123d4202c86e13a5bfe8e01518582737d591e90",
        "filename": "src/test/pow_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/pow_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/pow_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pow_tests.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -5,7 +5,6 @@\n #include <chain.h>\n #include <chainparams.h>\n #include <pow.h>\n-#include <random.h>\n #include <util/system.h>\n #include <test/setup_common.h>\n "
      },
      {
        "sha": "41ca8029e5d93e88dacd63ff2c7667cf7a4c4f22",
        "filename": "src/test/raii_event_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/raii_event_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/raii_event_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/raii_event_tests.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -14,8 +14,6 @@\n \n #include <test/setup_common.h>\n \n-#include <vector>\n-\n #include <boost/test/unit_test.hpp>\n \n static std::map<void*, short> tags;"
      },
      {
        "sha": "5ae0812243d120c4e7eb749249d92ef13e8c136e",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -9,8 +9,8 @@\n #include <core_io.h>\n #include <init.h>\n #include <interfaces/chain.h>\n-\n #include <test/setup_common.h>\n+#include <util/time.h>\n \n #include <boost/algorithm/string.hpp>\n #include <boost/test/unit_test.hpp>"
      },
      {
        "sha": "f451d809842729080c860492f73c9e0fa9adc598",
        "filename": "src/test/script_p2sh_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/script_p2sh_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/script_p2sh_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_p2sh_tests.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -4,13 +4,13 @@\n \n #include <consensus/tx_verify.h>\n #include <key.h>\n-#include <keystore.h>\n #include <validation.h>\n #include <policy/policy.h>\n #include <script/script.h>\n #include <script/script_error.h>\n #include <policy/settings.h>\n #include <script/sign.h>\n+#include <script/signingprovider.h>\n #include <test/setup_common.h>\n \n #include <vector>\n@@ -55,7 +55,7 @@ BOOST_AUTO_TEST_CASE(sign)\n     // scriptPubKey: HASH160 <hash> EQUAL\n \n     // Test SignSignature() (and therefore the version of Solver() that signs transactions)\n-    CBasicKeyStore keystore;\n+    FillableSigningProvider keystore;\n     CKey key[4];\n     for (int i = 0; i < 4; i++)\n     {\n@@ -151,7 +151,7 @@ BOOST_AUTO_TEST_CASE(set)\n {\n     LOCK(cs_main);\n     // Test the CScript::Set* methods\n-    CBasicKeyStore keystore;\n+    FillableSigningProvider keystore;\n     CKey key[4];\n     std::vector<CPubKey> keys;\n     for (int i = 0; i < 4; i++)\n@@ -265,7 +265,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     LOCK(cs_main);\n     CCoinsView coinsDummy;\n     CCoinsViewCache coins(&coinsDummy);\n-    CBasicKeyStore keystore;\n+    FillableSigningProvider keystore;\n     CKey key[6];\n     std::vector<CPubKey> keys;\n     for (int i = 0; i < 6; i++)"
      },
      {
        "sha": "412a57dd9db399ffaa5c6e3dce1b261c54199b49",
        "filename": "src/test/script_standard_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/script_standard_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/script_standard_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_standard_tests.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -3,9 +3,8 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <key.h>\n-#include <keystore.h>\n #include <script/script.h>\n-#include <script/script_error.h>\n+#include <script/signingprovider.h>\n #include <script/standard.h>\n #include <test/setup_common.h>\n "
      },
      {
        "sha": "84a70fe78bc6e9187abdbe8188c68dc61dce7211",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -6,20 +6,20 @@\n \n #include <core_io.h>\n #include <key.h>\n-#include <keystore.h>\n #include <script/script.h>\n #include <script/script_error.h>\n #include <script/sign.h>\n+#include <script/signingprovider.h>\n #include <util/system.h>\n #include <util/strencodings.h>\n #include <test/setup_common.h>\n #include <rpc/util.h>\n+#include <streams.h>\n \n #if defined(HAVE_CONSENSUS_LIB)\n #include <script/bitcoinconsensus.h>\n #endif\n \n-#include <fstream>\n #include <stdint.h>\n #include <string>\n #include <vector>\n@@ -1199,7 +1199,7 @@ SignatureData CombineSignatures(const CTxOut& txout, const CMutableTransaction&\n BOOST_AUTO_TEST_CASE(script_combineSigs)\n {\n     // Test the ProduceSignature's ability to combine signatures function\n-    CBasicKeyStore keystore;\n+    FillableSigningProvider keystore;\n     std::vector<CKey> keys;\n     std::vector<CPubKey> pubkeys;\n     for (int i = 0; i < 3; i++)"
      },
      {
        "sha": "2c89a1833109a88d023b6c18b5b98d91544bdb86",
        "filename": "src/test/scriptnum10.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/scriptnum10.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/src/test/scriptnum10.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scriptnum10.h?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -6,7 +6,6 @@\n #ifndef BITCOIN_TEST_SCRIPTNUM10_H\n #define BITCOIN_TEST_SCRIPTNUM10_H\n \n-#include <algorithm>\n #include <limits>\n #include <stdexcept>\n #include <stdint.h>"
      }
    ]
  },
  {
    "sha": "d1a89927b52dc36004a5734e5c7e8d44a5436900",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMWE4OTkyN2I1MmRjMzYwMDRhNTczNGU1YzdlOGQ0NGE1NDM2OTAw",
    "commit": {
      "author": {
        "name": "BlockMechanic",
        "email": "blockmecha@gmail.com",
        "date": "2019-09-19T08:14:20Z"
      },
      "committer": {
        "name": "BlockMechanic",
        "email": "blockmecha@gmail.com",
        "date": "2019-09-19T08:14:20Z"
      },
      "message": "Merge remote-tracking branch 'upstream/master'",
      "tree": {
        "sha": "def2c27db1839a801ee089425f73a3d507794726",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/def2c27db1839a801ee089425f73a3d507794726"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d1a89927b52dc36004a5734e5c7e8d44a5436900",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1a89927b52dc36004a5734e5c7e8d44a5436900",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d1a89927b52dc36004a5734e5c7e8d44a5436900",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1a89927b52dc36004a5734e5c7e8d44a5436900/comments",
    "author": {
      "login": "BlockMechanic",
      "id": 24528627,
      "node_id": "MDQ6VXNlcjI0NTI4NjI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/24528627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BlockMechanic",
      "html_url": "https://github.com/BlockMechanic",
      "followers_url": "https://api.github.com/users/BlockMechanic/followers",
      "following_url": "https://api.github.com/users/BlockMechanic/following{/other_user}",
      "gists_url": "https://api.github.com/users/BlockMechanic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BlockMechanic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BlockMechanic/subscriptions",
      "organizations_url": "https://api.github.com/users/BlockMechanic/orgs",
      "repos_url": "https://api.github.com/users/BlockMechanic/repos",
      "events_url": "https://api.github.com/users/BlockMechanic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BlockMechanic/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "BlockMechanic",
      "id": 24528627,
      "node_id": "MDQ6VXNlcjI0NTI4NjI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/24528627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BlockMechanic",
      "html_url": "https://github.com/BlockMechanic",
      "followers_url": "https://api.github.com/users/BlockMechanic/followers",
      "following_url": "https://api.github.com/users/BlockMechanic/following{/other_user}",
      "gists_url": "https://api.github.com/users/BlockMechanic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BlockMechanic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BlockMechanic/subscriptions",
      "organizations_url": "https://api.github.com/users/BlockMechanic/orgs",
      "repos_url": "https://api.github.com/users/BlockMechanic/repos",
      "events_url": "https://api.github.com/users/BlockMechanic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BlockMechanic/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8dc122811d5a852e116f666ffb38d157d9b62373",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8dc122811d5a852e116f666ffb38d157d9b62373",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8dc122811d5a852e116f666ffb38d157d9b62373"
      },
      {
        "sha": "9bf5768dd628b3a7c30dd42b5ed477a92c4d3540",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bf5768dd628b3a7c30dd42b5ed477a92c4d3540",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9bf5768dd628b3a7c30dd42b5ed477a92c4d3540"
      }
    ],
    "stats": {
      "total": 7939,
      "additions": 4951,
      "deletions": 2988
    },
    "files": [
      {
        "sha": "ed2ab49554d08a2675ab8caf536b7dc2af1d9393",
        "filename": ".appveyor.yml",
        "status": "modified",
        "additions": 26,
        "deletions": 2,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/.appveyor.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/.appveyor.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.appveyor.yml?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -7,12 +7,16 @@ clone_depth: 5\n environment:\n   APPVEYOR_SAVE_CACHE_ON_ERROR: true\n   CLCACHE_SERVER: 1\n-  PACKAGES: berkeleydb boost-filesystem boost-signals2 boost-test libevent openssl rapidcheck zeromq\n+  PACKAGES: berkeleydb boost-filesystem boost-signals2 boost-test libevent openssl rapidcheck zeromq double-conversion\n   PATH: 'C:\\Python37-x64;C:\\Python37-x64\\Scripts;%PATH%'\n   PYTHONUTF8: 1\n+  QT_DOWNLOAD_URL: 'https://github.com/sipsorcery/qt_win_binary/releases/download/v1.0/Qt5.9.7_ssl_x64_static_vs2017.zip'\n+  QT_DOWNLOAD_HASH: 'D4D35B8112302B67E5610A03421BB3E43FE13F14D9A5F637C22AE60DCEC0E0F5'\n+  QT_LOCAL_PATH: 'C:\\Qt5.9.7_ssl_x64_static_vs2017'\n cache:\n-- C:\\tools\\vcpkg\\installed -> .appveyor.yml\n+- C:\\tools\\vcpkg\\installed\n - C:\\Users\\appveyor\\clcache -> .appveyor.yml, build_msvc\\**, **\\Makefile.am, **\\*.vcxproj.in\n+- C:\\Qt5.9.7_ssl_x64_static_vs2017\n install:\n - cmd: pip install --quiet git+https://github.com/frerich/clcache.git@v4.2.0\n # Disable zmq test for now since python zmq library on Windows would cause Access violation sometimes.\n@@ -22,6 +26,23 @@ install:\n - cmd: vcpkg install --triplet %PLATFORM%-windows-static %PACKAGES% > NUL\n before_build:\n - ps:  clcache -M 536870912\n+- ps: |\n+      if(!(Test-Path -Path ($env:QT_LOCAL_PATH))) {\n+        Write-Host \"Downloading Qt binaries.\";\n+        Invoke-WebRequest -Uri $env:QT_DOWNLOAD_URL -Out qtdownload.zip;\n+        Write-Host \"Qt binaries successfully downloaded, checking hash against $env:QT_DOWNLOAD_HASH...\";\n+        if((Get-FileHash qtdownload.zip).Hash -eq $env:QT_DOWNLOAD_HASH) {\n+          Expand-Archive qtdownload.zip -DestinationPath $env:QT_LOCAL_PATH;\n+          Write-Host \"Qt binary download matched the expected hash.\";\n+        }\n+        else {\n+          Write-Host \"ERROR: Qt binary download did not match the expected hash.\";\n+          Exit-AppveyorBuild;\n+        }\n+      }\n+      else {\n+         Write-Host \"Qt binaries already present.\";\n+      }\n - cmd: python build_msvc\\msvc-autogen.py\n - ps:  $files = (Get-ChildItem -Recurse | where {$_.extension -eq \".vcxproj\"}).FullName\n - ps:  for (${i} = 0; ${i} -lt ${files}.length; ${i}++) {\n@@ -37,10 +58,13 @@ build_script:\n after_build:\n - ps:  fsutil behavior set disablelastaccess 1 # Disable Access time feature on Windows (better performance)\n - ps:  clcache -z\n+#- 7z a bitcoin-%APPVEYOR_BUILD_VERSION%.zip %APPVEYOR_BUILD_FOLDER%\\build_msvc\\%platform%\\%configuration%\\*.exe\n test_script:\n - cmd: src\\test_bitcoin.exe -k stdout -e stdout 2> NUL\n - cmd: src\\bench_bitcoin.exe -evals=1 -scaling=0 > NUL\n - ps:  python test\\util\\bitcoin-util-test.py\n - cmd: python test\\util\\rpcauth-test.py\n - cmd: python test\\functional\\test_runner.py --ci --quiet --combinedlogslen=4000 --failfast\n+artifacts:\n+#- path: bitcoin-%APPVEYOR_BUILD_VERSION%.zip\n deploy: off"
      },
      {
        "sha": "35b42424adb3fec05b52b44da20382f0b3abd5dc",
        "filename": ".github/ISSUE_TEMPLATE.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/.github/ISSUE_TEMPLATE.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/.github/ISSUE_TEMPLATE.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.github/ISSUE_TEMPLATE.md?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -17,7 +17,7 @@ If the node is \"stuck\" during sync or giving \"block checksum mismatch\" errors, p\n \n <!-- What type of machine are you observing the error on (OS/CPU and disk type)? -->\n \n-<!-- For the GUI-related issue on Linux provide names and versions of a distro, a desktop environment and a graphical shell (if relevant). -->\n+<!-- GUI-related issue? What is your operating system and its version? If Linux, what is your desktop environment and graphical shell? -->\n \n <!-- Any extra information that might be useful in the debugging process. -->\n <!--- This is normally the contents of a `debug.log` or `config.log` file. Raw text or a link to a pastebin type site are preferred. -->"
      },
      {
        "sha": "bf094e8325a1dafc689f4166cbe86f074fbdc032",
        "filename": ".github/ISSUE_TEMPLATE/bug_report.md",
        "status": "added",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/.github/ISSUE_TEMPLATE/bug_report.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/.github/ISSUE_TEMPLATE/bug_report.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.github/ISSUE_TEMPLATE/bug_report.md?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -0,0 +1,41 @@\n+---\n+name: Bug report\n+about: Create a report to help us improve\n+title: ''\n+labels: Bug\n+assignees: ''\n+\n+---\n+\n+<!-- This issue tracker is only for technical issues related to Bitcoin Core.\n+\n+General bitcoin questions and/or support requests are best directed to the Bitcoin StackExchange at https://bitcoin.stackexchange.com.\n+\n+For reporting security issues, please read instructions at https://bitcoincore.org/en/contact/.\n+\n+If the node is \"stuck\" during sync or giving \"block checksum mismatch\" errors, please ensure your hardware is stable by running memtest and observe CPU temperature with a load-test tool such as linpack before creating an issue! -->\n+\n+<!-- Describe the issue -->\n+\n+**Expected behavior**\n+\n+<!--- What behavior did you expect? -->\n+\n+**Actual behavior**\n+\n+<!--- What was the actual behavior (provide screenshots if the issue is GUI-related)? -->\n+\n+**To reproduce**\n+\n+<!--- How reliably can you reproduce the issue, what are the steps to do so? -->\n+\n+**System information**\n+\n+<!-- What version of Bitcoin Core are you using, where did you get it (website, self-compiled, etc)? -->\n+\n+<!-- What type of machine are you observing the error on (OS/CPU and disk type)? -->\n+\n+<!-- GUI-related issue? What is your operating system and its version? If Linux, what is your desktop environment and graphical shell? -->\n+\n+<!-- Any extra information that might be useful in the debugging process. -->\n+<!--- This is normally the contents of a `debug.log` or `config.log` file. Raw text or a link to a pastebin type site are preferred. -->"
      },
      {
        "sha": "2d5685185ea3621cb9c7d83e62a628468cb9f786",
        "filename": ".github/ISSUE_TEMPLATE/feature_request.md",
        "status": "added",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/.github/ISSUE_TEMPLATE/feature_request.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/.github/ISSUE_TEMPLATE/feature_request.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.github/ISSUE_TEMPLATE/feature_request.md?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -0,0 +1,20 @@\n+---\n+name: Feature request\n+about: Suggest an idea for this project\n+title: ''\n+labels: Feature\n+assignees: ''\n+\n+---\n+\n+**Is your feature request related to a problem? Please describe.**\n+<!-- A clear and concise description of what the problem is. Ex. I'm always frustrated when [...] -->\n+\n+**Describe the solution you'd like**\n+<!-- A clear and concise description of what you want to happen. -->\n+\n+**Describe alternatives you've considered**\n+<!-- A clear and concise description of any alternative solutions or features you've considered. -->\n+\n+**Additional context**\n+<!-- Add any other context or screenshots about the feature request here. -->"
      },
      {
        "sha": "ec08ab2efb897ceb26851454a64831840bf00f7b",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -33,7 +33,7 @@ cache:\n   directories:\n     - $TRAVIS_BUILD_DIR/depends/built\n     - $TRAVIS_BUILD_DIR/depends/sdk-sources\n-    - $HOME/.ccache\n+    - $TRAVIS_BUILD_DIR/ci/scratch/.ccache\n stages:\n   - lint\n   - test\n@@ -99,7 +99,7 @@ jobs:\n         FILE_ENV=\"./ci/test/00_setup_env_win64.sh\"\n \n     - stage: test\n-      name: '32-bit + dash  [GOAL: install]  [GUI: no BIP70]'\n+      name: '32-bit + dash  [GOAL: install]  [GUI: BIP70 enabled]'\n       env: >-\n         FILE_ENV=\"./ci/test/00_setup_env_i686.sh\"\n "
      },
      {
        "sha": "0e18a0df981aba730704b7d59ef6bc64d2c070cf",
        "filename": ".tx/config",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/.tx/config",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/.tx/config",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.tx/config?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -1,7 +1,7 @@\n [main]\n host = https://www.transifex.com\n \n-[bitcoin.qt-translation-018x]\n+[bitcoin.qt-translation-019x]\n file_filter = src/qt/locale/bitcoin_<lang>.ts\n source_file = src/qt/locale/bitcoin_en.ts\n source_lang = en"
      },
      {
        "sha": "1f4a2c081ea0005c03ae0eb225823f42970ba04e",
        "filename": "CONTRIBUTING.md",
        "status": "modified",
        "additions": 17,
        "deletions": 16,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/CONTRIBUTING.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/CONTRIBUTING.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/CONTRIBUTING.md?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -79,25 +79,26 @@ about Git.\n The title of the pull request should be prefixed by the component or area that\n the pull request affects. Valid areas as:\n \n-  - *Consensus* for changes to consensus critical code\n-  - *Doc* for changes to the documentation\n-  - *Qt* for changes to bitcoin-qt\n-  - *Log* Changes to log messages\n-  - *Mining* for changes to the mining code\n-  - *Net* or *P2P* for changes to the peer-to-peer network code\n-  - *Refactor* for structural changes that do not change behavior\n-  - *RPC/REST/ZMQ* for changes to the RPC, REST or ZMQ APIs\n-  - *Scripts and tools* for changes to the scripts and tools\n-  - *Test* for changes to the bitcoin unit tests or QA tests\n-  - *Utils and libraries* for changes to the utils and libraries\n-  - *Wallet* for changes to the wallet code\n+  - `consensus` for changes to consensus critical code\n+  - `doc` for changes to the documentation\n+  - `qt` or `gui` for changes to bitcoin-qt\n+  - `log` for changes to log messages\n+  - `mining` for changes to the mining code\n+  - `net` or `p2p` for changes to the peer-to-peer network code\n+  - `refactor` for structural changes that do not change behavior\n+  - `rpc`, `rest` or `zmq` for changes to the RPC, REST or ZMQ APIs\n+  - `script` for changes to the scripts and tools\n+  - `test` for changes to the bitcoin unit tests or QA tests\n+  - `util` or `lib` for changes to the utils or libraries\n+  - `wallet` for changes to the wallet code\n+  - `build` for changes to the GNU Autotools, reproducible builds or CI code\n \n Examples:\n \n-    Consensus: Add new opcode for BIP-XXXX OP_CHECKAWESOMESIG\n-    Net: Automatically create hidden service, listen on Tor\n-    Qt: Add feed bump button\n-    Log: Fix typo in log message\n+    consensus: Add new opcode for BIP-XXXX OP_CHECKAWESOMESIG\n+    net: Automatically create hidden service, listen on Tor\n+    qt: Add feed bump button\n+    log: Fix typo in log message\n \n Note that translations should not be submitted as pull requests, please see\n [Translation Process](https://github.com/bitcoin/bitcoin/blob/master/doc/translation_process.md)"
      },
      {
        "sha": "aa0111e5a20f0c2bfd7c8de310dd0102ee1a2c6d",
        "filename": "build-aux/m4/bitcoin_find_bdb48.m4",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/build-aux/m4/bitcoin_find_bdb48.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/build-aux/m4/bitcoin_find_bdb48.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_find_bdb48.m4?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -61,7 +61,7 @@ AC_DEFUN([BITCOIN_FIND_BDB48],[\n     BDB_CPPFLAGS=${BDB_CFLAGS}\n   fi\n   AC_SUBST(BDB_CPPFLAGS)\n-  \n+\n   if test \"x$BDB_LIBS\" = \"x\"; then\n     # TODO: Ideally this could find the library version and make sure it matches the headers being used\n     for searchlib in db_cxx-4.8 db_cxx db4_cxx; do"
      },
      {
        "sha": "4d4aef7e35f20efaf6836832d91e52a63254320a",
        "filename": "build_msvc/.gitignore",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/build_msvc/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/build_msvc/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/.gitignore?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -10,3 +10,5 @@ packages/*\n *.vcxproj.user\n *.vcxproj\n */Win32\n+libbitcoin_qt/QtGeneratedFiles/*\n+test_bitcoin-qt/QtGeneratedFiles/*"
      },
      {
        "sha": "88b1f514bdef7b897833da53293f0087958b2c48",
        "filename": "build_msvc/README.md",
        "status": "modified",
        "additions": 55,
        "deletions": 10,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/build_msvc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/build_msvc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/README.md?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -3,32 +3,54 @@ Building Bitcoin Core with Visual Studio\n \n Introduction\n ---------------------\n-Solution and project files to build the Bitcoin Core applications (except Qt dependent ones) with Visual Studio 2017 can be found in the build_msvc directory.\n+Solution and project files to build the Bitcoin Core applications `msbuild` or Visual Studio can be found in the build_msvc directory. The build has been tested with Visual Studio 2017 and 2019.\n \n Building with Visual Studio is an alternative to the Linux based [cross-compiler build](https://github.com/bitcoin/bitcoin/blob/master/doc/build-windows.md).\n \n+Quick Start\n+---------------------\n+The minimal steps required to build Bitcoin Core with the msbuild toolchain are below. More detailed instructions are contained in the following sections.\n+\n+```\n+vcpkg install --triplet x64-windows-static boost-filesystem boost-signals2 boost-test libevent openssl zeromq berkeleydb rapidcheck double-conversion\n+py -3 build_msvc\\msvc-autogen.py\n+msbuild /m build_msvc\\bitcoin.sln /p:Platform=x64 /p:Configuration=Release /t:build\n+```\n+\n Dependencies\n ---------------------\n-A number of [open source libraries](https://github.com/bitcoin/bitcoin/blob/master/doc/dependencies.md) are required in order to be able to build Bitcoin.\n+A number of [open source libraries](https://github.com/bitcoin/bitcoin/blob/master/doc/dependencies.md) are required in order to be able to build Bitcoin Core.\n \n Options for installing the dependencies in a Visual Studio compatible manner are:\n \n - Use Microsoft's [vcpkg](https://docs.microsoft.com/en-us/cpp/vcpkg) to download the source packages and build locally. This is the recommended approach.\n - Download the source code, build each dependency, add the required include paths, link libraries and binary tools to the Visual Studio project files.\n - Use [nuget](https://www.nuget.org/) packages with the understanding that any binary files have been compiled by an untrusted third party.\n \n-The external dependencies required for the Visual Studio build are (see [dependencies.md](https://github.com/bitcoin/bitcoin/blob/master/doc/dependencies.md) for more info):\n+The [external dependencies](https://github.com/bitcoin/bitcoin/blob/master/doc/dependencies.md) required for building are:\n \n - Berkeley DB\n-- OpenSSL\n - Boost\n+- DoubleConversion\n - libevent\n-- ZeroMQ\n+- OpenSSL\n+- Qt5\n - RapidCheck\n+- ZeroMQ\n+\n+Qt\n+---------------------\n+All the Bitcoin Core applications are configured to build with static linking. In order to build the Bitcoin Core Qt applications a static build of Qt is required.\n+\n+The runtime library version (e.g. v141, v142) and platform type (x86 or x64) must also match. OpenSSL must also be linked into the Qt binaries in order to provide full functionality of the Bitcoin Core Qt programs. An example of the configure command to build Qtv5.9.7 locally to link with Bitcoin Core is shown below (adjust paths accordingly), note it can be expected that the configure and subsequent build will fail numerous times until dependency issues are resolved.\n+\n+````\n+..\\Qtv5.9.7_src\\configure -developer-build -confirm-license -debug-and-release -opensource -platform win32-msvc -opengl desktop -no-shared -static -no-static-runtime -mp -qt-zlib -qt-pcre -qt-libpng -ltcg -make libs -make tools -no-libjpeg -nomake examples -no-compile-examples -no-dbus -no-libudev -no-qml-debug -no-icu -no-gtk -no-opengles3 -no-angle -no-sql-sqlite -no-sql-odbc -no-sqlite -no-libudev -skip qt3d -skip qtactiveqt -skip qtandroidextras -skip qtcanvas3d -skip qtcharts -skip qtconnectivity -skip qtdatavis3d -skip qtdeclarative -skip qtdoc -skip qtgamepad -skip qtgraphicaleffects -skip qtimageformats -skip qtlocation -skip qtmacextras -skip qtmultimedia -skip qtnetworkauth -skip qtpurchasing -skip qtquickcontrols -skip qtquickcontrols2 -skip qtscript -skip qtscxml -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtvirtualkeyboard -skip qtwayland -skip qtwebchannel -skip qtwebengine -skip qtwebsockets -skip qtwebview -skip qtx11extras -skip qtxmlpatterns -nomake tests -openssl-linked -IC:\\Dev\\github\\vcpkg\\installed\\x64-windows-static\\include -LC:\\Dev\\github\\vcpkg\\installed\\x64-windows-static\\lib OPENSSL_LIBS=\"-llibeay32 -lssleay32 -lgdi32 -luser32 -lwsock32 -ladvapi32\" -prefix C:\\Qt5.9.7_ssl_x64_static_vs2017\n+````\n+\n+A prebuilt version for x64 and Visual C++ runtime v141 (Visual Studio 2017) can be downloaded from [here](https://github.com/sipsorcery/qt_win_binary/releases). Please be aware this download is NOT an officially sanctioned Bitcoin Core distribution and is provided for developer convenience. It should NOT be used for builds that will be used in a production environment or with real funds.\n \n-Additional dependencies required from the [bitcoin-core](https://github.com/bitcoin-core) GitHub repository are:\n-- libsecp256k1\n-- LevelDB\n+To build Bitcoin Core without Qt unload or disable the bitcoin-qt, libbitcoin_qt and test_bitcoin-qt projects.\n \n Building\n ---------------------\n@@ -38,7 +60,7 @@ The instructions below use `vcpkg` to install the dependencies.\n - Install the required packages (replace x64 with x86 as required):\n \n ```\n-    PS >.\\vcpkg install --triplet x64-windows-static boost-filesystem boost-signals2 boost-test libevent openssl zeromq berkeleydb secp256k1 leveldb rapidcheck\n+    PS >.\\vcpkg install --triplet x64-windows-static boost-filesystem boost-signals2 boost-test libevent openssl zeromq berkeleydb rapidcheck double-conversion\n ```\n \n - Use Python to generate *.vcxproj from Makefile\n@@ -47,4 +69,27 @@ The instructions below use `vcpkg` to install the dependencies.\n     PS >py -3 msvc-autogen.py\n ```\n \n-- Build in Visual Studio.\n+- An optional step is to adjust the settings in the build_msvc directory and the common.init.vcxproj file. This project file contains settings that are common to all projects such as the runtime library version and target Windows SDK version. The Qt directories can also be set.\n+\n+- Build with Visual Studio 2017 or msbuild.\n+\n+```\n+msbuild /m bitcoin.sln /p:Platform=x64 /p:Configuration=Release /t:build\n+```\n+\n+- Build with Visual Studio 2019 or msbuild.\n+\n+```\n+msbuild /m bitcoin.sln /p:Platform=x64 /p:Configuration=Release /p:PlatformToolset=v142 /t:build\n+```\n+\n+AppVeyor\n+---------------------\n+The .appveyor.yml in the root directory is suitable to perform builds on [AppVeyor](https://www.appveyor.com/) Continuous Integration servers. The simplest way to perform an AppVeyor build is to fork Bitcoin Core and then configure a new AppVeyor Project pointing to the forked repository.\n+\n+For safety reasons the Bitcoin Core .appveyor.yml file has the artifact options disabled. The build will be performed but no executable files will be available. To enable artifacts on a forked repository uncomment the lines shown below:\n+\n+```\n+    #- 7z a bitcoin-%APPVEYOR_BUILD_VERSION%.zip %APPVEYOR_BUILD_FOLDER%\\build_msvc\\%platform%\\%configuration%\\*.exe\n+    #- path: bitcoin-%APPVEYOR_BUILD_VERSION%.zip\n+```"
      },
      {
        "sha": "56401d76184c1428ef7a2e60d394b88af151ddda",
        "filename": "build_msvc/bench_bitcoin/bench_bitcoin.vcxproj.in",
        "status": "renamed",
        "additions": 1,
        "deletions": 21,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/build_msvc/bench_bitcoin/bench_bitcoin.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/build_msvc/bench_bitcoin/bench_bitcoin.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bench_bitcoin/bench_bitcoin.vcxproj.in?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -9,27 +9,7 @@\n     <OutDir>$(SolutionDir)$(Platform)\\$(Configuration)\\</OutDir>\n   </PropertyGroup>\n   <ItemGroup>\n-    <ClCompile Include=\"..\\..\\src\\test\\util.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\test\\setup_common.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\bench\\base58.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\bench\\bech32.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\bench\\bench.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\bench\\bench_bitcoin.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\bench\\ccoins_caching.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\bench\\checkblock.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\bench\\checkqueue.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\bench\\coin_selection.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\bench\\crypto_hash.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\bench\\data.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\bench\\examples.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\bench\\lockedpool.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\bench\\mempool_eviction.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\bench\\rpc_blockchain.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\bench\\rpc_mempool.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\bench\\merkle_root.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\bench\\rollingbloom.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\bench\\wallet_balance.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\bench\\verify_script.cpp\" />\n+@SOURCE_FILES@\n   </ItemGroup>\n   <ItemGroup>\n     <ProjectReference Include=\"..\\libbitcoinconsensus\\libbitcoinconsensus.vcxproj\">",
        "previous_filename": "build_msvc/bench_bitcoin/bench_bitcoin.vcxproj"
      },
      {
        "sha": "fdeec55ee8068e35c2a647d1f797d4fe906842aa",
        "filename": "build_msvc/bitcoin-qt/bitcoin-qt.vcxproj",
        "status": "added",
        "additions": 81,
        "deletions": 0,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/build_msvc/bitcoin-qt/bitcoin-qt.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/build_msvc/bitcoin-qt/bitcoin-qt.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin-qt/bitcoin-qt.vcxproj?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -0,0 +1,81 @@\n+\ufeff<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<Project DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n+  <Import Project=\"..\\common.init.vcxproj\" />\n+  <Import Project=\"..\\common.qt.init.vcxproj\" />\n+  <PropertyGroup Label=\"Globals\">\n+    <ProjectGuid>{7E99172D-7FF2-4CB6-B736-AC9B76ED412A}</ProjectGuid>\n+    <ConfigurationType>Application</ConfigurationType>\n+    <OutDir>$(SolutionDir)$(Platform)\\$(Configuration)\\</OutDir>\n+  </PropertyGroup>\n+  <ItemGroup>\n+    <ClCompile Include=\"..\\..\\src\\qt\\main.cpp\" />\n+    <ResourceCompile Include=\"..\\..\\src\\qt\\res\\bitcoin-qt-res.rc\" />\n+  </ItemGroup>\n+  <ItemGroup>\n+    <ProjectReference Include=\"..\\libbitcoinconsensus\\libbitcoinconsensus.vcxproj\">\n+      <Project>{2b384fa8-9ee1-4544-93cb-0d733c25e8ce}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libbitcoin_cli\\libbitcoin_cli.vcxproj\">\n+      <Project>{0667528c-d734-4009-adf9-c0d6c4a5a5a6}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libbitcoin_common\\libbitcoin_common.vcxproj\">\n+      <Project>{7c87e378-df58-482e-aa2f-1bc129bc19ce}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libbitcoin_crypto\\libbitcoin_crypto.vcxproj\">\n+      <Project>{6190199c-6cf4-4dad-bfbd-93fa72a760c1}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libbitcoin_qt\\libbitcoin_qt.vcxproj\">\n+      <Project>{2b4abff8-d1fd-4845-88c9-1f3c0a6512bf}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libbitcoin_server\\libbitcoin_server.vcxproj\">\n+      <Project>{460fee33-1fe1-483f-b3bf-931ff8e969a5}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libbitcoin_util\\libbitcoin_util.vcxproj\">\n+      <Project>{b53a5535-ee9d-4c6f-9a26-f79ee3bc3754}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libbitcoin_wallet\\libbitcoin_wallet.vcxproj\">\n+      <Project>{93b86837-b543-48a5-a89b-7c87abb77df2}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libbitcoin_zmq\\libbitcoin_zmq.vcxproj\">\n+      <Project>{792d487f-f14c-49fc-a9de-3fc150f31c3f}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libleveldb\\libleveldb.vcxproj\">\n+      <Project>{18430fef-6b61-4c53-b396-718e02850f1b}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libsecp256k1\\libsecp256k1.vcxproj\">\n+      <Project>{bb493552-3b8c-4a8c-bf69-a6e7a51d2ea6}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libunivalue\\libunivalue.vcxproj\">\n+      <Project>{5724ba7d-a09a-4ba8-800b-c4c1561b3d69}</Project>\n+    </ProjectReference>\n+  </ItemGroup>\n+\n+  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n+    <ClCompile>\n+      <AdditionalIncludeDirectories>$(QtIncludes);%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n+    </ClCompile>\n+    <Link>\n+      <AdditionalDependencies>$(QtReleaseLibraries);%(AdditionalDependencies)</AdditionalDependencies>\n+    </Link>\n+    <ResourceCompile>\n+      <AdditionalIncludeDirectories>..\\..\\src;</AdditionalIncludeDirectories>\n+      <PreprocessorDefinitions>HAVE_CONFIG_H;_UNICODE;UNICODE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+    </ResourceCompile>\n+  </ItemDefinitionGroup>\n+\n+  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n+    <ClCompile>\n+      <AdditionalIncludeDirectories>$(QtIncludes);%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n+    </ClCompile>\n+    <Link>\n+      <AdditionalDependencies>$(QtDebugLibraries);%(AdditionalDependencies)</AdditionalDependencies>\n+    </Link>\n+    <ResourceCompile>\n+      <AdditionalIncludeDirectories>..\\..\\src;</AdditionalIncludeDirectories>\n+      <PreprocessorDefinitions>HAVE_CONFIG_H;_UNICODE;UNICODE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+    </ResourceCompile>\n+  </ItemDefinitionGroup>\n+\n+  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n+  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />\n+</Project>"
      },
      {
        "sha": "d4b83b6529392571ab8b6d956c05832a776967cf",
        "filename": "build_msvc/bitcoin.sln",
        "status": "modified",
        "additions": 21,
        "deletions": 1,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/build_msvc/bitcoin.sln",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/build_msvc/bitcoin.sln",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin.sln?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -40,6 +40,10 @@ Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"libsecp256k1\", \"libsecp256k\n EndProject\n Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"libleveldb\", \"libleveldb\\libleveldb.vcxproj\", \"{18430FEF-6B61-4C53-B396-718E02850F1B}\"\n EndProject\n+Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"libbitcoin_qt\", \"libbitcoin_qt\\libbitcoin_qt.vcxproj\", \"{2B4ABFF8-D1FD-4845-88C9-1F3C0A6512BF}\"\n+EndProject\n+Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"bitcoin-qt\", \"bitcoin-qt\\bitcoin-qt.vcxproj\", \"{7E99172D-7FF2-4CB6-B736-AC9B76ED412A}\"\n+EndProject\n Global\n     GlobalSection(SolutionConfigurationPlatforms) = preSolution\n         Debug|x64 = Debug|x64\n@@ -200,11 +204,27 @@ Global\n         {18430FEF-6B61-4C53-B396-718E02850F1B}.Release|x64.Build.0 = Release|x64\n         {18430FEF-6B61-4C53-B396-718E02850F1B}.Release|x86.ActiveCfg = Release|Win32\n         {18430FEF-6B61-4C53-B396-718E02850F1B}.Release|x86.Build.0 = Release|Win32\n+        {2B4ABFF8-D1FD-4845-88C9-1F3C0A6512BF}.Debug|x64.ActiveCfg = Debug|x64\n+        {2B4ABFF8-D1FD-4845-88C9-1F3C0A6512BF}.Debug|x64.Build.0 = Debug|x64\n+        {2B4ABFF8-D1FD-4845-88C9-1F3C0A6512BF}.Debug|x86.ActiveCfg = Debug|Win32\n+        {2B4ABFF8-D1FD-4845-88C9-1F3C0A6512BF}.Debug|x86.Build.0 = Debug|Win32\n+        {2B4ABFF8-D1FD-4845-88C9-1F3C0A6512BF}.Release|x64.ActiveCfg = Release|x64\n+        {2B4ABFF8-D1FD-4845-88C9-1F3C0A6512BF}.Release|x64.Build.0 = Release|x64\n+        {2B4ABFF8-D1FD-4845-88C9-1F3C0A6512BF}.Release|x86.ActiveCfg = Release|Win32\n+        {2B4ABFF8-D1FD-4845-88C9-1F3C0A6512BF}.Release|x86.Build.0 = Release|Win32\n+        {7E99172D-7FF2-4CB6-B736-AC9B76ED412A}.Debug|x64.ActiveCfg = Debug|x64\n+        {7E99172D-7FF2-4CB6-B736-AC9B76ED412A}.Debug|x64.Build.0 = Debug|x64\n+        {7E99172D-7FF2-4CB6-B736-AC9B76ED412A}.Debug|x86.ActiveCfg = Debug|Win32\n+        {7E99172D-7FF2-4CB6-B736-AC9B76ED412A}.Debug|x86.Build.0 = Debug|Win32\n+        {7E99172D-7FF2-4CB6-B736-AC9B76ED412A}.Release|x64.ActiveCfg = Release|x64\n+        {7E99172D-7FF2-4CB6-B736-AC9B76ED412A}.Release|x64.Build.0 = Release|x64\n+        {7E99172D-7FF2-4CB6-B736-AC9B76ED412A}.Release|x86.ActiveCfg = Release|Win32\n+        {7E99172D-7FF2-4CB6-B736-AC9B76ED412A}.Release|x86.Build.0 = Release|Win32\n     EndGlobalSection\n     GlobalSection(SolutionProperties) = preSolution\n         HideSolutionNode = FALSE\n     EndGlobalSection\n     GlobalSection(ExtensibilityGlobals) = postSolution\n-        SolutionGuid = {DA7D16A6-E5F0-45B3-B194-C3FE64F1BFCD}\n+        SolutionGuid = {8AA72EDA-2CD4-4564-B1E4-688B760EEEE9}\n     EndGlobalSection\n EndGlobal"
      },
      {
        "sha": "77f6a5c62112b1f7dff941164b25378ab651d38e",
        "filename": "build_msvc/common.init.vcxproj",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/build_msvc/common.init.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/build_msvc/common.init.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/common.init.vcxproj?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -6,7 +6,8 @@\n     <VCProjectVersion>16.0</VCProjectVersion>\n     <VcpkgTriplet Condition=\"'$(Platform)'=='Win32'\">x86-windows-static</VcpkgTriplet>\n     <VcpkgTriplet Condition=\"'$(Platform)'=='x64'\">x64-windows-static</VcpkgTriplet>\n-</PropertyGroup>\n+   </PropertyGroup>\n+\n   <PropertyGroup Condition=\"'$(WindowsTargetPlatformVersion)'=='' and !Exists('$(WindowsSdkDir)\\DesignTime\\CommonConfiguration\\Neutral\\Windows.props')\">\n      <WindowsTargetPlatformVersion_10 Condition=\"'$(WindowsTargetPlatformVersion_10)' == ''\">$(Registry:HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\\v10.0@ProductVersion)</WindowsTargetPlatformVersion_10>\n      <WindowsTargetPlatformVersion_10 Condition=\"'$(WindowsTargetPlatformVersion_10)' == ''\">$(Registry:HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Microsoft SDKs\\Windows\\v10.0@ProductVersion)</WindowsTargetPlatformVersion_10>\n@@ -20,7 +21,7 @@\n       <Configuration>Release</Configuration>\n       <Platform>x64</Platform>\n     </ProjectConfiguration>\n-        <ProjectConfiguration Include=\"Debug|x64\">\n+    <ProjectConfiguration Include=\"Debug|x64\">\n       <Configuration>Debug</Configuration>\n       <Platform>x64</Platform>\n     </ProjectConfiguration>\n@@ -66,6 +67,7 @@\n       <OptimizeReferences>true</OptimizeReferences>\n     </Link>\n   </ItemDefinitionGroup>\n+\n   <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n     <ClCompile>\n       <Optimization>Disabled</Optimization>\n@@ -75,6 +77,7 @@\n       <AdditionalOptions>/bigobj %(AdditionalOptions)</AdditionalOptions>\n     </ClCompile>\n   </ItemDefinitionGroup>\n+\n   <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n     <ClCompile>\n       <Optimization>MaxSpeed</Optimization>\n@@ -88,6 +91,7 @@\n       <OptimizeReferences>true</OptimizeReferences>\n     </Link>\n   </ItemDefinitionGroup>\n+\n   <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n     <ClCompile>\n       <Optimization>Disabled</Optimization>\n@@ -103,7 +107,7 @@\n       <WarningLevel>Level3</WarningLevel>\n       <PrecompiledHeader>NotUsing</PrecompiledHeader>\n       <AdditionalOptions>/utf-8 %(AdditionalOptions)</AdditionalOptions>\n-      <DisableSpecificWarnings>4018;4221;4244;4267;4715;4805;</DisableSpecificWarnings>\n+      <DisableSpecificWarnings>4018;4221;4244;4267;4334;4715;4805;</DisableSpecificWarnings>\n       <TreatWarningAsError>true</TreatWarningAsError>\n       <PreprocessorDefinitions>ZMQ_STATIC;NOMINMAX;WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_CONSOLE;_WIN32_WINNT=0x0601;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\secp256k1\\include;..\\..\\src\\leveldb\\include;..\\..\\src\\leveldb\\helpers\\memenv;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n@@ -113,6 +117,9 @@\n       <GenerateDebugInformation>true</GenerateDebugInformation>\n       <AdditionalDependencies>crypt32.lib;Iphlpapi.lib;ws2_32.lib;Shlwapi.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;%(AdditionalDependencies)</AdditionalDependencies>\n     </Link>\n+    <Lib>\n+      <AdditionalOptions>/ignore:4221</AdditionalOptions>\n+    </Lib>\n   </ItemDefinitionGroup>\n   <Import Project=\"common.init.vcxproj.user\" Condition=\"Exists('common.init.vcxproj.user')\" />\n </Project>"
      },
      {
        "sha": "e21288e26b5e5e18af3d98f54484d2703e0c775d",
        "filename": "build_msvc/common.qt.init.vcxproj",
        "status": "added",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/build_msvc/common.qt.init.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/build_msvc/common.qt.init.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/common.qt.init.vcxproj?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -0,0 +1,16 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n+\n+  <PropertyGroup Label=\"QtGlobals\">\n+    <QtBaseDir>C:\\Qt5.9.7_ssl_x64_static_vs2017</QtBaseDir>\n+    <QtPluginsLibraryDir>$(QtBaseDir)\\plugins</QtPluginsLibraryDir>\n+    <QtLibraryDir>$(QtBaseDir)\\lib</QtLibraryDir>\n+    <QtIncludeDir>$(QtBaseDir)\\include</QtIncludeDir>\n+    <QtIncludes>$(QtIncludeDir);$(QtIncludeDir)\\QtNetwork;$(QtIncludeDir)\\QtCore;$(QtIncludeDir)\\QtWidgets;$(QtIncludeDir)\\QtGui;</QtIncludes>\n+    <GeneratedFilesOutDir>.\\QtGeneratedFiles\\qt</GeneratedFilesOutDir>\n+    <QtToolsDir>$(QtBaseDir)\\bin</QtToolsDir>\n+    <QtReleaseLibraries>$(QtPluginsLibraryDir)\\platforms\\qminimal.lib;$(QtPluginsLibraryDir)\\platforms\\qwindows.lib;$(QtLibraryDir)\\qtfreetype.lib;$(QtLibraryDir)\\qtharfbuzz.lib;$(QtLibraryDir)\\qtlibpng.lib;$(QtLibraryDir)\\qtpcre2.lib;$(QtLibraryDir)\\Qt5AccessibilitySupport.lib;$(QtLibraryDir)\\Qt5Core.lib;$(QtLibraryDir)\\Qt5Concurrent.lib;$(QtLibraryDir)\\Qt5EventDispatcherSupport.lib;$(QtLibraryDir)\\Qt5FontDatabaseSupport.lib;$(QtLibraryDir)\\Qt5Gui.lib;$(QtLibraryDir)\\Qt5Network.lib;$(QtLibraryDir)\\Qt5PlatformCompositorSupport.lib;$(QtLibraryDir)\\Qt5ThemeSupport.lib;$(QtLibraryDir)\\Qt5Widgets.lib;$(QtLibraryDir)\\Qt5WinExtras.lib;$(QtLibraryDir)\\qtmain.lib;userenv.lib;netapi32.lib;imm32.lib;Dwmapi.lib;version.lib;winmm.lib;UxTheme.lib</QtReleaseLibraries>\n+    <QtDebugLibraries>$(QtPluginsLibraryDir)\\platforms\\qwindowsd.lib;$(QtPluginsLibraryDir)\\platforms\\qminimald.lib;$(QtLibraryDir)\\*d.lib;crypt32.lib;userenv.lib;netapi32.lib;imm32.lib;Dwmapi.lib;version.lib;winmm.lib;UxTheme.lib</QtDebugLibraries>\n+  </PropertyGroup>\n+\n+</Project>"
      },
      {
        "sha": "992f64ec2e01dce5b2844dfe48b70757ced6a0ae",
        "filename": "build_msvc/libbitcoin_qt/libbitcoin_qt.vcxproj",
        "status": "modified",
        "additions": 201,
        "deletions": 917,
        "changes": 1118,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/build_msvc/libbitcoin_qt/libbitcoin_qt.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/build_msvc/libbitcoin_qt/libbitcoin_qt.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_qt/libbitcoin_qt.vcxproj?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -1,946 +1,230 @@\n \ufeff<?xml version=\"1.0\" encoding=\"utf-8\"?>\n-<Project DefaultTargets=\"Build\" ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n-  <Import Label=\"configInitTarget\" Project=\"..\\common.init.vcxproj\" />\n-  <ItemGroup Label=\"ProjectConfigurations\">\n-    <ProjectConfiguration Include=\"Debug|Win32\">\n-      <Configuration>Debug</Configuration>\n-      <Platform>Win32</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Release|Win32\">\n-      <Configuration>Release</Configuration>\n-      <Platform>Win32</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Debug|x64\">\n-      <Configuration>Debug</Configuration>\n-      <Platform>x64</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Release|x64\">\n-      <Configuration>Release</Configuration>\n-      <Platform>x64</Platform>\n-    </ProjectConfiguration>\n-  </ItemGroup>\n+<Project DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n+  <Import Project=\"..\\common.init.vcxproj\" />\n+  <Import Project=\"..\\common.qt.init.vcxproj\" />\n   <PropertyGroup Label=\"Globals\">\n-    <VCProjectVersion>15.0</VCProjectVersion>\n-    <VcpkgTriplet Condition=\"'$(Platform)'=='Win32'\">x86-windows-static</VcpkgTriplet>\n-    <VcpkgTriplet Condition=\"'$(Platform)'=='x64'\">x64-windows-static</VcpkgTriplet>\n     <ProjectGuid>{2B4ABFF8-D1FD-4845-88C9-1F3C0A6512BF}</ProjectGuid>\n+    <ConfigurationType>StaticLibrary</ConfigurationType>\n   </PropertyGroup>\n   <ItemGroup>\n-    <CustomBuild Include=\"..\\..\\src\\qt\\bitcoin.qrc\">\n-      <Command>\"$(QTDIR)\\bincc.exe\" -name bitcoin \"%(Fullpath)\" -o .\\GeneratedFiles\\qrc_bitcoin.cpp</Command>\n-      <Message>Qt rcc generation for %(Identity)</Message>\n-      <Outputs>.\\GeneratedFiles\\qrc_bitcoin.cpp</Outputs>\n-      <AdditionalInputs>(QTDIR)\\bincc.exe</AdditionalInputs>\n-    </CustomBuild>\n-    <CustomBuild Include=\"..\\..\\src\\qt\\bitcoin_locale.qrc\">\n-      <Command>\"$(QTDIR)\\bincc.exe\" -name bitcoin_locale \"%(Fullpath)\" -o .\\GeneratedFiles\\qrc_bitcoin_locale.cpp</Command>\n-      <Message>Qt rcc generation for %(Identity)</Message>\n-      <Outputs>.\\GeneratedFiles\\qrc_bitcoin_locale.cpp</Outputs>\n-      <AdditionalInputs>(QTDIR)\\bincc.exe</AdditionalInputs>\n-    </CustomBuild>\n-    <None Include=\"..\\..\\src\\qt\\forms\\addressbookpage.ui\" />\n-    <None Include=\"..\\..\\src\\qt\\forms\\askpassphrasedialog.ui\" />\n-    <None Include=\"..\\..\\src\\qt\\forms\\coincontroldialog.ui\" />\n-    <None Include=\"..\\..\\src\\qt\\forms\\debugwindow.ui\" />\n-    <None Include=\"..\\..\\src\\qt\\forms\\editaddressdialog.ui\" />\n-    <None Include=\"..\\..\\src\\qt\\forms\\helpmessagedialog.ui\" />\n-    <None Include=\"..\\..\\src\\qt\\forms\\intro.ui\" />\n-    <None Include=\"..\\..\\src\\qt\\forms\\modaloverlay.ui\" />\n-    <None Include=\"..\\..\\src\\qt\\forms\\openuridialog.ui\" />\n-    <None Include=\"..\\..\\src\\qt\\forms\\optionsdialog.ui\" />\n-    <None Include=\"..\\..\\src\\qt\\forms\\overviewpage.ui\" />\n-    <None Include=\"..\\..\\src\\qt\\formseceivecoinsdialog.ui\" />\n-    <None Include=\"..\\..\\src\\qt\\formseceiverequestdialog.ui\" />\n-    <None Include=\"..\\..\\src\\qt\\forms\\sendcoinsdialog.ui\" />\n-    <None Include=\"..\\..\\src\\qt\\forms\\sendcoinsentry.ui\" />\n-    <None Include=\"..\\..\\src\\qt\\forms\\signverifymessagedialog.ui\" />\n-    <None Include=\"..\\..\\src\\qt\\forms\\transactiondescdialog.ui\" />\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_af.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_af_ZA.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_am.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_ar.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_be_BY.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_bg.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_bg_BG.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_ca.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_ca%40valencia.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_ca_ES.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_cs.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_cy.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_da.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_de.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_el.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_el_GR.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_en.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_en_GB.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_eo.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_es.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_es_AR.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_es_CL.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_es_CO.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_es_DO.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_es_ES.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_es_MX.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_es_UY.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_es_VE.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_et.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_et_EE.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_eu_ES.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_fa.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_fa_IR.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_fi.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_fr.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_fr_CA.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_fr_FR.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_gl.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_he.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_hi_IN.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_hr.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_hu.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_id.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_id_ID.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_is.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_it.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_it_IT.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_ja.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_ka.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_kk_KZ.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_ko.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_ko_KR.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_ku_IQ.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_ky.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_la.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_lt.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_lv_LV.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_mk_MK.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_ml.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_mn.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_ms_MY.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_nb.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_ne.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_nl.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_pam.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_pl.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_pt_BR.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_pt_PT.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_ro.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_ro_RO.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_ru.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_ru_RU.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_sk.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_sl_SI.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_sn.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_sq.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_sr.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_sr%40latin.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_sv.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_szl.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_ta.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_th_TH.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_tr.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_tr_TR.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_uk.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_ur_PK.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_uz%40Cyrl.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_vi.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_vi_VN.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_zh.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_zh_CN.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_zh_HK.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_zh_TW.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <CustomBuild Include=\"..\\..\\src\\qt\\paymentrequest.proto\">\n-      <FileType>Document</FileType>\n-      <Command>F:\\Dependencies\\protobuf-cpp-3.4.1\\protobuf-3.4.1\\cmake\\build\\vs\\Debug\\protoc.exe --proto_path=%(RootDir)%(Directory) %(Fullpath) --cpp_out=.\\GeneratedFiles</Command>\n-      <Message>ProtoBuf source generation %(RootDir)%(Directory) %(Filename)</Message>\n-      <Outputs>.\\GeneratedFiles\\%(Filename).pb.h;.\\GeneratedFiles\\(%Filename).pb.cc</Outputs>\n-      <AdditionalInputs>F:\\Dependencies\\protobuf-cpp-3.4.1\\protobuf-3.4.1\\cmake\\build\\vs\\Debug\\protoc.exe</AdditionalInputs>\n-      <LinkObjects>false</LinkObjects>\n-      <Command Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">F:\\deps\\protobuf\\protobuf-3.4.1\\cmake\\build\\vs\\Debug\\protoc.exe --proto_path=%(RootDir)%(Directory) %(Fullpath) --cpp_out=.\\GeneratedFiles</Command>\n-      <AdditionalInputs Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">F:\\deps\\protobuf\\protobuf-3.4.1\\cmake\\build\\vs\\Debug\\protoc.exe</AdditionalInputs>\n-    </CustomBuild>\n-    <None Include=\"..\\..\\src\\qt\\macdockiconhandler.mm\" />\n-    <None Include=\"..\\..\\src\\qt\\macnotificationhandler.mm\" />\n-    <None Include=\"..\\..\\src\\qtes\\icons\\bitcoin.icns\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qtes\\src\\bitcoin.svg\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qtes\\src\\clock_0.svg\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qtes\\src\\clock_1.svg\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qtes\\src\\clock_2.svg\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qtes\\src\\clock_3.svg\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qtes\\src\\clock_4.svg\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qtes\\src\\connect-0.svg\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qtes\\src\\connect-1.svg\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qtes\\src\\connect-2.svg\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qtes\\src\\connect-3.svg\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qtes\\src\\connect-4.svg\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qtes\\src\\hd_disabled.svg\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qtes\\src\\hd_enabled.svg\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qtes\\src\\mine.svg\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qtes\\src\\network_disabled.svg\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qtes\\src\\qt.svg\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qtes\\src\\transaction0.svg\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qtes\\src\\tx_in.svg\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qtes\\src\\tx_inout.svg\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"GeneratedFiles\\bitcoin.moc\" />\n-    <None Include=\"GeneratedFiles\\bitcoinamountfield.moc\" />\n-    <None Include=\"GeneratedFiles\\intro.moc\" />\n-    <None Include=\"GeneratedFiles\\overviewpage.moc\" />\n-    <None Include=\"GeneratedFilespcconsole.moc\" />\n-  </ItemGroup>\n-  <ItemGroup>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\add.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\address-book.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\bitcoin.ico\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\bitcoin.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\bitcoin_testnet.ico\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\chevron.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\clock1.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\clock2.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\clock3.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\clock4.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\clock5.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\connect0.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\connect1.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\connect2.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\connect3.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\connect4.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\edit.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\editcopy.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\editpaste.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\export.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\eye.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\eye_minus.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\eye_plus.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\fontbigger.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\fontsmaller.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\hd_disabled.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\hd_enabled.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\history.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\info.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\lock_closed.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\lock_open.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\network_disabled.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\overview.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\iconseceive.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\iconsemove.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\send.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\synced.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\transaction0.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\transaction2.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\transaction_abandoned.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\transaction_conflicted.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\tx_inout.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\tx_input.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\tx_mined.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\tx_output.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\warning.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-000.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-001.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-002.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-003.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-004.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-005.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-006.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-007.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-008.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-009.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-010.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-011.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-012.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-013.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-014.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-015.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-016.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-017.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-018.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-019.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-020.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-021.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-022.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-023.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-024.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-025.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-026.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-027.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-028.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-029.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-030.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-031.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-032.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-033.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-034.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-035.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\src\\spinner.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-  </ItemGroup>\n-  <ItemGroup>\n-    <ClCompile Include=\"GeneratedFiles\\qrc_bitcoin.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\qrc_bitcoin_locale.cpp\" />\n-    <CustomBuild Include=\"..\\..\\src\\qt\\bitcoin.cpp\">\n-      <Command>\"$(QTDIR)\\bin\\moc.exe\" \"%(Fullpath)\" -o .\\GeneratedFiles\\%(Filename).moc $(MOC_DEF)</Command>\n-      <Message>Qt moc generation for %(Identity)</Message>\n-      <Outputs>.\\GeneratedFiles\\%(Filename).moc</Outputs>\n-      <AdditionalInputs>(QTDIR)\\bin\\moc.exe</AdditionalInputs>\n-    </CustomBuild>\n-    <CustomBuild Include=\"..\\..\\src\\qt\\bitcoinamountfield.cpp\">\n-      <Command>\"$(QTDIR)\\bin\\moc.exe\" \"%(Fullpath)\" -o .\\GeneratedFiles\\%(Filename).moc $(MOC_DEF)</Command>\n-      <Message>Qt moc generation for %(Identity)</Message>\n-      <Outputs>.\\GeneratedFiles\\%(Filename).moc</Outputs>\n-      <AdditionalInputs>(QTDIR)\\bin\\moc.exe</AdditionalInputs>\n-    </CustomBuild>\n-    <CustomBuild Include=\"..\\..\\src\\qt\\intro.cpp\">\n-      <Command>\"$(QTDIR)\\bin\\moc.exe\" \"%(Fullpath)\" -o .\\GeneratedFiles\\%(Filename).moc $(MOC_DEF)</Command>\n-      <Message>Qt moc generation for %(Identity)</Message>\n-      <Outputs>.\\GeneratedFiles\\%(Filename).moc</Outputs>\n-      <AdditionalInputs>(QTDIR)\\bin\\moc.exe</AdditionalInputs>\n-    </CustomBuild>\n-    <CustomBuild Include=\"..\\..\\src\\qt\\overviewpage.cpp\">\n-      <Command>\"$(QTDIR)\\bin\\moc.exe\" \"%(Fullpath)\" -o .\\GeneratedFiles\\%(Filename).moc $(MOC_DEF)</Command>\n-      <Message>Qt moc generation for %(Identity)</Message>\n-      <Outputs>.\\GeneratedFiles\\%(Filename).moc</Outputs>\n-      <AdditionalInputs>(QTDIR)\\bin\\moc.exe</AdditionalInputs>\n-    </CustomBuild>\n-    <CustomBuild Include=\"..\\..\\src\\qtpcconsole.cpp\">\n-      <Command>\"$(QTDIR)\\bin\\moc.exe\" \"%(Fullpath)\" -o .\\GeneratedFiles\\%(Filename).moc $(MOC_DEF)</Command>\n-      <Message>Qt moc generation for %(Identity)</Message>\n-      <Outputs>.\\GeneratedFiles\\%(Filename).moc</Outputs>\n-      <AdditionalInputs>(QTDIR)\\bin\\moc.exe</AdditionalInputs>\n-    </CustomBuild>\n-    <ClCompile Include=\"GeneratedFiles\\moc_addressbookpage.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_addresstablemodel.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_askpassphrasedialog.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_bantablemodel.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_bitcoinaddressvalidator.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_bitcoinamountfield.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_bitcoingui.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_bitcoinunits.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_callback.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_clientmodel.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_coincontroldialog.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_coincontroltreewidget.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_csvmodelwriter.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_editaddressdialog.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_guiconstants.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_guiutil.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_intro.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_macdockiconhandler.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_macnotificationhandler.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_modaloverlay.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_networkstyle.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_notificator.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_openuridialog.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_optionsdialog.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_optionsmodel.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_overviewpage.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_paymentrequestplus.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_paymentserver.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_peertablemodel.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_platformstyle.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_qvalidatedlineedit.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_qvaluecombobox.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_receivecoinsdialog.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_receiverequestdialog.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_recentrequeststablemodel.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_rpcconsole.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_sendcoinsdialog.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_sendcoinsentry.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_signverifymessagedialog.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_splashscreen.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_trafficgraphwidget.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_transactiondesc.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_transactiondescdialog.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_transactionfilterproxy.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_transactionrecord.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_transactiontablemodel.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_transactionview.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_utilitydialog.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_walletframe.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_walletmodel.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_walletmodeltransaction.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_walletview.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_winshutdownmonitor.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\paymentrequest.pb.cc\" />\n-  </ItemGroup>\n-  <ItemGroup>\n-    <ClInclude Include=\"GeneratedFiles\\paymentrequest.pb.h\" />\n-    <ClInclude Include=\"GeneratedFiles\\ui_addressbookpage.h\" />\n-    <ClInclude Include=\"GeneratedFiles\\ui_askpassphrasedialog.h\" />\n-    <ClInclude Include=\"GeneratedFiles\\ui_coincontroldialog.h\" />\n-    <ClInclude Include=\"GeneratedFiles\\ui_debugwindow.h\" />\n-    <ClInclude Include=\"GeneratedFiles\\ui_editaddressdialog.h\" />\n-    <ClInclude Include=\"GeneratedFiles\\ui_helpmessagedialog.h\" />\n-    <ClInclude Include=\"GeneratedFiles\\ui_intro.h\" />\n-    <ClInclude Include=\"GeneratedFiles\\ui_modaloverlay.h\" />\n-    <ClInclude Include=\"GeneratedFiles\\ui_openuridialog.h\" />\n-    <ClInclude Include=\"GeneratedFiles\\ui_optionsdialog.h\" />\n-    <ClInclude Include=\"GeneratedFiles\\ui_overviewpage.h\" />\n-    <ClInclude Include=\"GeneratedFiles\\ui_receivecoinsdialog.h\" />\n-    <ClInclude Include=\"GeneratedFiles\\ui_receiverequestdialog.h\" />\n-    <ClInclude Include=\"GeneratedFiles\\ui_sendcoinsdialog.h\" />\n-    <ClInclude Include=\"GeneratedFiles\\ui_sendcoinsentry.h\" />\n-    <ClInclude Include=\"GeneratedFiles\\ui_signverifymessagedialog.h\" />\n-    <ClInclude Include=\"GeneratedFiles\\ui_transactiondescdialog.h\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\addressbookpage.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\addresstablemodel.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\askpassphrasedialog.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\bantablemodel.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\bitcoin.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\bitcoinaddressvalidator.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\bitcoinamountfield.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\bitcoingui.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\bitcoinstrings.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\bitcoinunits.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\clientmodel.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\coincontroldialog.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\coincontroltreewidget.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\createwalletdialog.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\csvmodelwriter.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\editaddressdialog.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\guiutil.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\intro.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\modaloverlay.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\networkstyle.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\notificator.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\openuridialog.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\optionsdialog.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\optionsmodel.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\overviewpage.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\paymentserver.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\peertablemodel.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\platformstyle.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\qrimagewidget.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\qvalidatedlineedit.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\qvaluecombobox.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\receivecoinsdialog.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\receiverequestdialog.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\recentrequeststablemodel.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\rpcconsole.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\sendcoinsdialog.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\sendcoinsentry.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\signverifymessagedialog.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\splashscreen.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\trafficgraphwidget.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\transactiondesc.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\transactiondescdialog.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\transactionfilterproxy.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\transactionrecord.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\transactiontablemodel.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\transactionview.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\utilitydialog.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\walletcontroller.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\walletframe.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\walletmodel.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\walletmodeltransaction.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\walletview.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\winshutdownmonitor.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_addressbookpage.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_addresstablemodel.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_askpassphrasedialog.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_bantablemodel.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_bitcoin.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_bitcoinaddressvalidator.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_bitcoinamountfield.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_bitcoingui.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_bitcoinunits.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_clientmodel.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_coincontroldialog.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_coincontroltreewidget.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_createwalletdialog.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_csvmodelwriter.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_editaddressdialog.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_guiutil.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_intro.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_modaloverlay.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_networkstyle.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_notificator.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_openuridialog.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_optionsdialog.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_optionsmodel.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_overviewpage.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_paymentserver.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_peertablemodel.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_platformstyle.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_qrimagewidget.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_qvalidatedlineedit.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_qvaluecombobox.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_receivecoinsdialog.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_receiverequestdialog.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_recentrequeststablemodel.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_rpcconsole.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_sendcoinsdialog.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_sendcoinsentry.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_signverifymessagedialog.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_splashscreen.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_trafficgraphwidget.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_transactiondesc.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_transactiondescdialog.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_transactionfilterproxy.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_transactionrecord.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_transactiontablemodel.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_transactionview.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_utilitydialog.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_walletcontroller.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_walletframe.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_walletmodel.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_walletmodeltransaction.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_walletview.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_winshutdownmonitor.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\rcc\\qrc_bitcoin.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\rcc\\qrc_bitcoin_locale.cpp\" />\n   </ItemGroup>\n-  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.Default.props\" />\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\" Label=\"Configuration\">\n-    <ConfigurationType>StaticLibrary</ConfigurationType>\n-    <UseDebugLibraries>true</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\" Label=\"Configuration\">\n-    <ConfigurationType>StaticLibrary</ConfigurationType>\n-    <UseDebugLibraries>false</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <WholeProgramOptimization>true</WholeProgramOptimization>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\" Label=\"Configuration\">\n-    <ConfigurationType>StaticLibrary</ConfigurationType>\n-    <UseDebugLibraries>true</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\" Label=\"Configuration\">\n-    <ConfigurationType>StaticLibrary</ConfigurationType>\n-    <UseDebugLibraries>false</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <WholeProgramOptimization>true</WholeProgramOptimization>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n+\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n-  <ImportGroup Label=\"ExtensionSettings\">\n-  </ImportGroup>\n-  <ImportGroup Label=\"Shared\">\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <PropertyGroup Label=\"UserMacros\" />\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <LinkIncremental>false</LinkIncremental>\n-    <Linkage-protobuf>static</Linkage-protobuf>\n-    <CustomBuildBeforeTargets>ClCompile</CustomBuildBeforeTargets>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <LinkIncremental>true</LinkIncremental>\n-    <Linkage-protobuf>static</Linkage-protobuf>\n-    <CustomBuildBeforeTargets>ClCompile</CustomBuildBeforeTargets>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <LinkIncremental>true</LinkIncremental>\n-    <Linkage-protobuf>static</Linkage-protobuf>\n-    <CustomBuildBeforeTargets>ClCompile</CustomBuildBeforeTargets>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <LinkIncremental>false</LinkIncremental>\n-    <Linkage-protobuf>static</Linkage-protobuf>\n-    <CustomBuildBeforeTargets>ClCompile</CustomBuildBeforeTargets>\n-  </PropertyGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n+  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />\n+\n+  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n     <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>Disabled</Optimization>\n-      <FunctionLevelLinking>true</FunctionLevelLinking>\n-      <IntrinsicFunctions>false</IntrinsicFunctions>\n-      <PreprocessorDefinitions>_X86_;WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>.\\GeneratedFiles;..\\..\\src;..\\..\\src\\univalue\\include;.\\QtGenerated\\mocheaders</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n+      <PreprocessorDefinitions>_AMD64_;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <AdditionalIncludeDirectories>$(QtIncludes);$(GeneratedFilesOutDir)\\..;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n     </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n-      <OptimizeReferences>true</OptimizeReferences>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-    </Link>\n   </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n+\n+  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n     <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>Disabled</Optimization>\n-      <PreprocessorDefinitions>_X86_;WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>.\\GeneratedFiles;..\\..\\src;..\\..\\src\\univalue\\include;.\\QtGenerated\\mocheaders</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n+      <PreprocessorDefinitions>_AMD64_;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <AdditionalIncludeDirectories>$(QtIncludes);$(GeneratedFilesOutDir)\\..;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n     </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-    </Link>\n   </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n+\n+  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n     <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>Disabled</Optimization>\n-      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>.\\GeneratedFiles;..\\..\\src;..\\..\\src\\univalue\\include;.\\QtGenerated\\mocheaders</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n+      <PreprocessorDefinitions>_X86_;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <AdditionalIncludeDirectories>$(QtIncludes);$(GeneratedFilesOutDir)\\..;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n     </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-    </Link>\n   </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n+\n+  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n     <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>MaxSpeed</Optimization>\n-      <FunctionLevelLinking>true</FunctionLevelLinking>\n-      <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>.\\GeneratedFiles;..\\..\\src;..\\..\\src\\univalue\\include;.\\QtGenerated\\mocheaders</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n+      <PreprocessorDefinitions>_X86_;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <AdditionalIncludeDirectories>$(QtIncludes);$(GeneratedFilesOutDir)\\..;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n     </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n-      <OptimizeReferences>true</OptimizeReferences>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-    </Link>\n   </ItemDefinitionGroup>\n-  <Import Label=\"configTarget\" Project=\"..\\common.vcxproj\" />\n-  <Target Name=\"QtHeadersMocCodeGeneration\" BeforeTargets=\"PrepareForBuild\">\n+\n+  <ItemGroup>\n+    <QT_MOC Include=\"..\\..\\src\\qt\\bitcoinamountfield.cpp\" />\n+    <QT_MOC Include=\"..\\..\\src\\qt\\intro.cpp\" />\n+    <QT_MOC Include=\"..\\..\\src\\qt\\overviewpage.cpp\" />\n+    <QT_MOC Include=\"..\\..\\src\\qt\\rpcconsole.cpp\" />\n+    <MocHeaderFiles Include=\"..\\..\\src\\qt\\*.h\" />\n+    <ResourceTemplates Include=\"..\\..\\src\\qt\\*.qrc\" />\n+    <UiFormFiles Include=\"..\\..\\src\\qt\\forms\\*.ui\" />\n+    <TranslationFiles Include=\"..\\..\\src\\qt\\locale\\*.ts\" />\n+  </ItemGroup>\n+\n+  <Target Name=\"moccode\" Inputs=\"@(QT_MOC)\" Outputs=\"@(QT_MOC->'$(GeneratedFilesOutDir)\\%(Filename).moc')\">\n     <PropertyGroup>\n-      <ErrorText>There was an error executing the Qt headers moc code generation tasks.</ErrorText>\n+      <ErrorText>There was an error executing the libbitcoin_qt moc code include generation task.</ErrorText>\n     </PropertyGroup>\n-    <ItemGroup>\n-      <QtMocHeaderFiles Include=\"..\\..\\src\\qt\\*.h\" />\n-    </ItemGroup>\n-    <Exec Command=\"$(QTDIR)\\bin\\moc.exe &quot;%(QtMocHeaderFiles.Identity)&quot; -o .\\GeneratedFiles\\moc_%(Filename).cpp $(MOC_DEF)\" />\n+    <MakeDir Directories=\"$(GeneratedFilesOutDir)\" />\n+    <Exec Command=\"echo Performing libbitcoin_qt moc code include generation task, output path $(GeneratedFilesOutDir).\" />\n+    <Exec Command=\"echo $(QtToolsDir)\\moc.exe $(MOC_DEFINES) &quot;%(QT_MOC.Identity)&quot; -o $(GeneratedFilesOutDir)\\%(Filename).moc.\" />\n+    <Exec Command=\"$(QtToolsDir)\\moc.exe $(MOC_DEFINES) &quot;%(QT_MOC.Identity)&quot; -o $(GeneratedFilesOutDir)\\%(Filename).moc\" />\n   </Target>\n-  <Target Name=\"QtFormsCodeGeneration\" BeforeTargets=\"PrepareForBuild\">\n+\n+  <Target Name=\"mocheader\" Inputs=\"@(MocHeaderFiles)\" Outputs=\"@(MocHeaderFiles->'$(GeneratedFilesOutDir)\\moc\\moc_%(Filename).cpp')\">\n     <PropertyGroup>\n-      <ErrorText>There was an error executing the Qt forms code generation tasks.</ErrorText>\n+      <ErrorText>There was an error executing the libbitcoin_qt moc header generation task.</ErrorText>\n     </PropertyGroup>\n-    <ItemGroup>\n-      <QtFormFiles Include=\"..\\..\\src\\qt\\forms\\*.ui\" />\n-    </ItemGroup>\n-    <Exec Command=\"$(QTDIR)\\bin\\uic.exe &quot;%(QtFormFiles.Identity)&quot; -o .\\GeneratedFiles\\ui_%(Filename).h\" />\n+    <Exec Command=\"echo Performing libbitcoin_qt moc header generation task, output path $(GeneratedFilesOutDir)\\moc.\" />\n+    <Exec Command=\"echo $(QtToolsDir)\\moc.exe $(MOC_DEFINES) &quot;%(MocHeaderFiles.Identity)&quot; -o $(GeneratedFilesOutDir)\\moc\\moc_%(Filename).cpp.\" />\n+    <MakeDir Directories=\"$(GeneratedFilesOutDir)\\moc\\\" />\n+    <Exec Command=\"$(QtToolsDir)\\moc.exe $(MOC_DEFINES) &quot;%(MocHeaderFiles.Identity)&quot; -o $(GeneratedFilesOutDir)\\moc\\moc_%(Filename).cpp\" />\n   </Target>\n-  <Target Name=\"QtLocaleCodeGeneration\" BeforeTargets=\"PrepareForBuild\">\n+\n+  <Target Name=\"forms\" Inputs=\"@(UiFormFiles)\" Outputs=\"@(UiFormFiles->'$(GeneratedFilesOutDir)\\forms\\ui_%(Filename).h')\">\n     <PropertyGroup>\n-      <ErrorText>There was an error executing the Qt local code generation tasks.</ErrorText>\n+      <ErrorText>There was an error executing the libbitcoin_qt forms header generation task.</ErrorText>\n     </PropertyGroup>\n-    <ItemGroup>\n-      <QtLocaleFiles Include=\"..\\..\\src\\qt\\locale\\*.ts\" />\n-    </ItemGroup>\n-    <Exec Command=\"$(QTDIR)\\bin\\lrelease.exe &quot;%(QtLocaleFiles.Identity)&quot; -qm ..\\..\\src\\qt\\locale\\%(Filename).qm\" />\n+    <Exec Command=\"echo Performing libbitcoin_qt forms header generation task, output path $(GeneratedFilesOutDir)\\forms.\" />\n+    <MakeDir Directories=\"$(GeneratedFilesOutDir)\\forms\\\" />\n+    <Exec Command=\"$(QtToolsDir)\\uic.exe &quot;%(UiFormFiles.Identity)&quot; -o $(GeneratedFilesOutDir)\\forms\\ui_%(Filename).h\" />\n   </Target>\n-  <ImportGroup Label=\"ExtensionTargets\">\n-    <!--<Import Label=\"berkleyDbTarget\" Project=\"f:\\deps\\db-4.8.30\\db.targets\" />\n-    <Import Label=\"opensslTarget\" Project=\"f:\\deps\\openssl\\1.0.2\\openssl.targets\" />\n-    <Import Label=\"qtTarget\" Project=\"F:\\deps\\qt\\5.9.2-git-ssl\\vc141-x86elease\\qt.targets\" />\n-    <Import Label=\"protobufTarget\" Project=\"f:\\deps\\protobuf\\protobuf.targets\" />-->\n-  </ImportGroup>\n-  <ProjectExtensions>\n-    <VisualStudio>\n-      <UserProperties MocDir=\".\\GeneratedFiles\" UicDir=\".\\GeneratedFiles\" RccDir=\".\\GeneratedFiles\" lupdateOptions=\"\" lupdateOnBuild=\"0\" lreleaseOptions=\"\" Qt5Version_x0020_Win32=\"5.9.1_vs140_x86\" Qt5Version_x0020_x64=\"5.9.1_vs140_x86\" MocOptions=\"DUNICODE -DWIN32 -DQT_DLL -DQT_CORE_LIB -DQT_GUI_LIB -DQT_WIDGETS_LIB &quot;-I.\\GeneratedFiles&quot; &quot;-I.&quot; &quot;-I$(QTDIR)\\include&quot; &quot;-I$(QTDIR)\\include\\QtCore&quot; &quot;-I$(QTDIR)\\include\\QtGui&quot; &quot;-I$(QTDIR)\\include\\QtWidgets&quot;\" />\n-    </VisualStudio>\n-  </ProjectExtensions>\n+\n+  <Target Name=\"translation\" Inputs=\"@(TranslationFiles)\" Outputs=\"@(TranslationFiles->'..\\..\\src\\qt\\locale\\%(Filename).qm')\">\n+    <PropertyGroup>\n+      <ErrorText>There was an error executing the libbitcoin_qt translation file generation task.</ErrorText>\n+    </PropertyGroup>\n+    <Exec Command=\"echo Performing libbitcoin_qt translation file generation task.\" />\n+    <Exec Command=\"$(QtToolsDir)\\lrelease.exe &quot;%(TranslationFiles.Identity)&quot; -qm ..\\..\\src\\qt\\locale\\%(Filename).qm\" />\n+  </Target>\n+\n+  <Target Name=\"resource\" Inputs=\"@(ResourceTemplates)\" Outputs=\"@(ResourceTemplates->'$(GeneratedFilesOutDir)\\rcc\\qrc_%(Filename).cpp')\" DependsOnTargets=\"translation\">\n+    <PropertyGroup>\n+      <ErrorText>There was an error executing the libbitcoin_qt resource code generation task.</ErrorText>\n+    </PropertyGroup>\n+    <Exec Command=\"echo Performing libbitcoin_qt resource code generation task, output path $(GeneratedFilesOutDir)\\rcc.\" />\n+    <MakeDir Directories=\"$(GeneratedFilesOutDir)\\rcc\\\" />\n+    <Exec Command=\"$(QtToolsDir)\\rcc.exe --verbose --name %(Filename) &quot;%(ResourceTemplates.Identity)&quot; -o $(GeneratedFilesOutDir)\\rcc\\qrc_%(Filename).cpp\" />\n+  </Target>\n+\n+  <Target Name=\"qtclean\">\n+    <Exec Command=\"echo Clean libbitcoin_qt generated files from $(GeneratedFilesOutDir).\" />\n+    <RemoveDir Directories=\"$(GeneratedFilesOutDir)\\forms;$(GeneratedFilesOutDir)\\moc;$(GeneratedFilesOutDir)\\rcc;\" />\n+    <RemoveDir Directories=\"$(GeneratedFilesOutDir)\" />\n+  </Target>\n+\n+  <PropertyGroup>\n+    <BuildDependsOn>\n+        moccode;\n+        mocheader;\n+        forms;\n+        translation;\n+        resource;\n+        $(BuildDependsOn);\n+    </BuildDependsOn>\n+  </PropertyGroup>\n+  <PropertyGroup>\n+    <CleanDependsOn>\n+        qtclean;\n+        $(CleanDependsOn);\n+    </CleanDependsOn>\n+  </PropertyGroup>\n+\n </Project>"
      },
      {
        "sha": "5ddda3c03e8757ecf2927cbc53d0842c94ad99be",
        "filename": "build_msvc/msvc-autogen.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/build_msvc/msvc-autogen.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/build_msvc/msvc-autogen.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/msvc-autogen.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -17,6 +17,7 @@\n     'libbitcoin_wallet_tool',\n     'libbitcoin_wallet',\n     'libbitcoin_zmq',\n+    'bench_bitcoin',\n ]\n \n ignore_list = ["
      },
      {
        "sha": "8e54bc7653698fb9c8f6259936f498c0ec648cbe",
        "filename": "build_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj",
        "status": "modified",
        "additions": 106,
        "deletions": 129,
        "changes": 235,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/build_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/build_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -1,146 +1,123 @@\n <?xml version=\"1.0\" encoding=\"utf-8\"?>\n <Project DefaultTargets=\"Build\" ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n-  <Import Label=\"configInitTarget\" Project=\"..\\common.init.vcxproj\" />\n-  <ItemGroup Label=\"ProjectConfigurations\">\n-    <ProjectConfiguration Include=\"Debug|Win32\">\n-      <Configuration>Debug</Configuration>\n-      <Platform>Win32</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Release|Win32\">\n-      <Configuration>Release</Configuration>\n-      <Platform>Win32</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Debug|x64\">\n-      <Configuration>Debug</Configuration>\n-      <Platform>x64</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Release|x64\">\n-      <Configuration>Release</Configuration>\n-      <Platform>x64</Platform>\n-    </ProjectConfiguration>\n-  </ItemGroup>\n+  <Import Project=\"..\\common.init.vcxproj\" />\n+  <Import Project=\"..\\common.qt.init.vcxproj\" />\n   <PropertyGroup Label=\"Globals\">\n-    <VCProjectVersion>15.0</VCProjectVersion>\n     <ProjectGuid>{51201D5E-D939-4854-AE9D-008F03FF518E}</ProjectGuid>\n-    <Keyword>Win32Proj</Keyword>\n-    <RootNamespace>test_bitcoinqt</RootNamespace>\n-  </PropertyGroup>\n-  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.Default.props\" />\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\" Label=\"Configuration\">\n-    <ConfigurationType>Application</ConfigurationType>\n-    <UseDebugLibraries>true</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\" Label=\"Configuration\">\n-    <ConfigurationType>Application</ConfigurationType>\n-    <UseDebugLibraries>false</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <WholeProgramOptimization>true</WholeProgramOptimization>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\" Label=\"Configuration\">\n-    <ConfigurationType>Application</ConfigurationType>\n-    <UseDebugLibraries>true</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <CharacterSet>Unicode</CharacterSet>\n   </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\" Label=\"Configuration\">\n+  <PropertyGroup Label=\"Configuration\">\n     <ConfigurationType>Application</ConfigurationType>\n-    <UseDebugLibraries>false</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <WholeProgramOptimization>true</WholeProgramOptimization>\n-    <CharacterSet>Unicode</CharacterSet>\n+    <OutDir>$(SolutionDir)$(Platform)\\$(Configuration)\\</OutDir>\n   </PropertyGroup>\n-  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n-  <ImportGroup Label=\"ExtensionSettings\">\n-  </ImportGroup>\n-  <ImportGroup Label=\"Shared\">\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <PropertyGroup Label=\"UserMacros\" />\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <LinkIncremental>false</LinkIncremental>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <LinkIncremental>true</LinkIncremental>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <LinkIncremental>true</LinkIncremental>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <LinkIncremental>false</LinkIncremental>\n-  </PropertyGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>MaxSpeed</Optimization>\n-      <FunctionLevelLinking>true</FunctionLevelLinking>\n-      <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n-      <OptimizeReferences>true</OptimizeReferences>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>Disabled</Optimization>\n-      <PreprocessorDefinitions>WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n+  <ItemGroup>\n+    <ClCompile Include=\"..\\..\\src\\test\\setup_common.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\test\\addressbooktests.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\test\\apptests.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\test\\compattests.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\test\\rpcnestedtests.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\test\\test_main.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\test\\uritests.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\test\\util.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\test\\wallettests.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\wallet\\test\\wallet_test_fixture.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_addressbooktests.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_apptests.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_compattests.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_rpcnestedtests.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_uritests.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_wallettests.cpp\" />\n+  </ItemGroup>\n+  <ItemGroup>\n+    <ProjectReference Include=\"..\\libbitcoinconsensus\\libbitcoinconsensus.vcxproj\">\n+      <Project>{2b384fa8-9ee1-4544-93cb-0d733c25e8ce}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libbitcoin_cli\\libbitcoin_cli.vcxproj\">\n+      <Project>{0667528c-d734-4009-adf9-c0d6c4a5a5a6}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libbitcoin_common\\libbitcoin_common.vcxproj\">\n+      <Project>{7c87e378-df58-482e-aa2f-1bc129bc19ce}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libbitcoin_crypto\\libbitcoin_crypto.vcxproj\">\n+      <Project>{6190199c-6cf4-4dad-bfbd-93fa72a760c1}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libbitcoin_qt\\libbitcoin_qt.vcxproj\">\n+      <Project>{2b4abff8-d1fd-4845-88c9-1f3c0a6512bf}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libbitcoin_server\\libbitcoin_server.vcxproj\">\n+      <Project>{460fee33-1fe1-483f-b3bf-931ff8e969a5}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libbitcoin_util\\libbitcoin_util.vcxproj\">\n+      <Project>{b53a5535-ee9d-4c6f-9a26-f79ee3bc3754}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libbitcoin_wallet\\libbitcoin_wallet.vcxproj\">\n+      <Project>{93b86837-b543-48a5-a89b-7c87abb77df2}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libbitcoin_zmq\\libbitcoin_zmq.vcxproj\">\n+      <Project>{792d487f-f14c-49fc-a9de-3fc150f31c3f}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libleveldb\\libleveldb.vcxproj\">\n+      <Project>{18430fef-6b61-4c53-b396-718e02850f1b}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libsecp256k1\\libsecp256k1.vcxproj\">\n+      <Project>{bb493552-3b8c-4a8c-bf69-a6e7a51d2ea6}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libunivalue\\libunivalue.vcxproj\">\n+      <Project>{5724ba7d-a09a-4ba8-800b-c4c1561b3d69}</Project>\n+    </ProjectReference>\n+  </ItemGroup>\n+\n+  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n     <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>Disabled</Optimization>\n-      <PreprocessorDefinitions>_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n+      <AdditionalIncludeDirectories>..\\libbitcoin_qt\\$(GeneratedFilesOutDir)\\..\\;$(QtIncludeDir)\\QtTest;$(QtIncludes);%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n     </ClCompile>\n     <Link>\n-      <SubSystem>Console</SubSystem>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n+      <AdditionalDependencies>$(QtReleaseLibaries);%(AdditionalDependencies)</AdditionalDependencies>\n     </Link>\n   </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n+\n+    <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n     <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>MaxSpeed</Optimization>\n-      <FunctionLevelLinking>true</FunctionLevelLinking>\n-      <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n+      <AdditionalIncludeDirectories>..\\libbitcoin_qt\\$(GeneratedFilesOutDir)\\..\\;$(QtIncludeDir)\\QtTest;$(QtIncludes);%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n     </ClCompile>\n     <Link>\n-      <SubSystem>Console</SubSystem>\n-      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n-      <OptimizeReferences>true</OptimizeReferences>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n+      <AdditionalDependencies>$(QtDebugLibraries);%(AdditionalDependencies)</AdditionalDependencies>\n     </Link>\n   </ItemDefinitionGroup>\n-  <Import Label=\"configTarget\" Project=\"..\\common.vcxproj\" />\n-</Project>\n+\n+  <ItemGroup>\n+    <MocTestFiles Include=\"..\\..\\src\\qt\\test\\addressbooktests.h\" />\n+    <MocTestFiles Include=\"..\\..\\src\\qt\\test\\apptests.h\" />\n+    <MocTestFiles Include=\"..\\..\\src\\qt\\test\\compattests.h\" />\n+    <MocTestFiles Include=\"..\\..\\src\\qt\\test\\paymentservertests.h\" />\n+    <MocTestFiles Include=\"..\\..\\src\\qt\\test\\rpcnestedtests.h\" />\n+    <MocTestFiles Include=\"..\\..\\src\\qt\\test\\uritests.h\" />\n+    <MocTestFiles Include=\"..\\..\\src\\qt\\test\\wallettests.h\" />\n+  </ItemGroup>\n+  <Target Name=\"moccode\" Inputs=\"@(MocTestFiles)\" Outputs=\"@(MocTestFiles->'$(GeneratedFilesOutDir)\\moc\\moc_%(Filename).cpp')\">\n+    <PropertyGroup>\n+      <ErrorText>There was an error executing the test_bitcoin-qt moc code generation task.</ErrorText>\n+    </PropertyGroup>\n+    <Exec Command=\"echo Performing test_bitcoin-qt moc generation task, output path $(GeneratedFilesOutDir)\\moc.\" />\n+    <MakeDir Directories=\"$(GeneratedFilesOutDir)\\moc\\\" />\n+    <Exec Command=\"$(QtToolsDir)\\moc.exe $(MOC_DEFINES) &quot;%(MocTestFiles.Identity)&quot; -o $(GeneratedFilesOutDir)\\moc\\moc_%(Filename).cpp\" />\n+  </Target>\n+  <Target Name=\"QtTestCleanGeneratedFiles\">\n+    <Exec Command=\"echo Clean test_bitcoin-qt generated files from $(GeneratedFilesOutDir).\" />\n+    <RemoveDir Directories=\"$(GeneratedFilesOutDir)\\moc\\*\" />\n+    <RemoveDir Directories=\"$(GeneratedFilesOutDir)\\moc\" />\n+  </Target>\n+  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n+  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />\n+  <PropertyGroup>\n+    <BuildDependsOn>\n+       moccode;\n+       $(BuildDependsOn);\n+    </BuildDependsOn>\n+  </PropertyGroup>\n+  <PropertyGroup>\n+    <CleanDependsOn>\n+        QtTestCleanGeneratedFiles;\n+        $(CleanDependsOn);\n+    </CleanDependsOn>\n+  </PropertyGroup>\n+ </Project>"
      },
      {
        "sha": "6c3019a1aa5401364a6cd08eafce9a3f098311ad",
        "filename": "ci/lint/04_install.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/ci/lint/04_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/ci/lint/04_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/lint/04_install.sh?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -7,8 +7,8 @@\n export LC_ALL=C\n \n travis_retry pip3 install codespell==1.15.0\n-travis_retry pip3 install flake8==3.5.0\n-travis_retry pip3 install vulture==0.29\n+travis_retry pip3 install flake8==3.7.8\n+travis_retry pip3 install vulture==1.0\n \n SHELLCHECK_VERSION=v0.6.0\n curl -s \"https://storage.googleapis.com/shellcheck/shellcheck-${SHELLCHECK_VERSION}.linux.x86_64.tar.xz\" | tar --xz -xf - --directory /tmp/"
      },
      {
        "sha": "51b5cfdd3f08add2049392d6951d71c4c9f4905a",
        "filename": "ci/test/00_setup_env.sh",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/ci/test/00_setup_env.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/ci/test/00_setup_env.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env.sh?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -11,7 +11,10 @@ echo \"Setting default values in env\"\n BASE_ROOT_DIR=$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\"/../../ >/dev/null 2>&1 && pwd )\n export BASE_ROOT_DIR\n \n-export MAKEJOBS=${MAKEJOBS:--j3}\n+# The number of parallel jobs to pass down to make and test_runner.py\n+export MAKEJOBS=${MAKEJOBS:--j4}\n+# A folder for the ci system to put temporary files (ccache, datadirs for tests, ...)\n+export BASE_SCRATCH_DIR=${BASE_SCRATCH_DIR:-$BASE_ROOT_DIR/ci/scratch/}\n export HOST=${HOST:-x86_64-unknown-linux-gnu}\n export RUN_UNIT_TESTS=${RUN_UNIT_TESTS:-true}\n export RUN_FUNCTIONAL_TESTS=${RUN_FUNCTIONAL_TESTS:-true}\n@@ -21,7 +24,7 @@ export BOOST_TEST_RANDOM=${BOOST_TEST_RANDOM:-1$TRAVIS_BUILD_ID}\n export CCACHE_SIZE=${CCACHE_SIZE:-100M}\n export CCACHE_TEMPDIR=${CCACHE_TEMPDIR:-/tmp/.ccache-temp}\n export CCACHE_COMPRESS=${CCACHE_COMPRESS:-1}\n-export CCACHE_DIR=${CCACHE_DIR:-$HOME/.ccache}\n+export CCACHE_DIR=${CCACHE_DIR:-$BASE_SCRATCH_DIR/.ccache}\n export BASE_BUILD_DIR=${BASE_BUILD_DIR:-${TRAVIS_BUILD_DIR:-$BASE_ROOT_DIR}}\n export BASE_OUTDIR=${BASE_OUTDIR:-$BASE_BUILD_DIR/out/$HOST}\n export SDK_URL=${SDK_URL:-https://bitcoincore.org/depends-sources/sdks}"
      },
      {
        "sha": "46b870e145fe52985b137619e67763cbb02cfb22",
        "filename": "ci/test/00_setup_env_amd64_asan.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/ci/test/00_setup_env_amd64_asan.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/ci/test/00_setup_env_amd64_asan.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_amd64_asan.sh?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -7,7 +7,7 @@\n export LC_ALL=C.UTF-8\n \n export HOST=x86_64-unknown-linux-gnu\n-export PACKAGES=\"clang llvm python3-zmq qtbase5-dev qttools5-dev-tools libssl1.0-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libprotobuf-dev protobuf-compiler libqrencode-dev\"\n+export PACKAGES=\"clang llvm python3-zmq qtbase5-dev qttools5-dev-tools libssl1.0-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libqrencode-dev\"\n export NO_DEPENDS=1\n export GOAL=\"install\"\n export BITCOIN_CONFIG=\"--enable-zmq --with-incompatible-bdb --with-gui=qt5 CPPFLAGS=-DDEBUG_LOCKORDER --with-sanitizers=address,integer,undefined CC=clang CXX=clang++\""
      },
      {
        "sha": "55820ea83573b4d2224eacff0f14be2e92a18b55",
        "filename": "ci/test/00_setup_env_amd64_qt5.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/ci/test/00_setup_env_amd64_qt5.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/ci/test/00_setup_env_amd64_qt5.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_amd64_qt5.sh?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -7,7 +7,7 @@\n export LC_ALL=C.UTF-8\n \n export HOST=x86_64-unknown-linux-gnu\n-export PACKAGES=\"python3-zmq qtbase5-dev qttools5-dev-tools protobuf-compiler libdbus-1-dev libharfbuzz-dev libprotobuf-dev\"\n+export PACKAGES=\"python3-zmq qtbase5-dev qttools5-dev-tools libdbus-1-dev libharfbuzz-dev\"\n export DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1 ALLOW_HOST_PACKAGES=1\"\n export TEST_RUNNER_EXTRA=\"--coverage --extended --exclude feature_dbcrash\"  # Run extended tests so that coverage does not fail, but exclude the very slow dbcrash\n export GOAL=\"install\""
      },
      {
        "sha": "51e98788c78ff332151eb82ceddfca4862ee448a",
        "filename": "ci/test/00_setup_env_amd64_trusty.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/ci/test/00_setup_env_amd64_trusty.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/ci/test/00_setup_env_amd64_trusty.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_amd64_trusty.sh?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -8,7 +8,7 @@ export LC_ALL=C.UTF-8\n \n export HOST=x86_64-unknown-linux-gnu\n export DOCKER_NAME_TAG=ubuntu:14.04\n-export PACKAGES=\"python3-zmq qtbase5-dev qttools5-dev-tools libicu-dev libpng-dev libssl-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libdb5.1++-dev libzmq3-dev libprotobuf-dev protobuf-compiler libqrencode-dev\"\n+export PACKAGES=\"python3-zmq qtbase5-dev qttools5-dev-tools libicu-dev libpng-dev libssl-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libdb5.1++-dev libzmq3-dev libqrencode-dev\"\n export NO_DEPENDS=1\n export RUN_FUNCTIONAL_TESTS=false\n export GOAL=\"install\""
      },
      {
        "sha": "82ac988c413a43afb8638b78ee805a71ac0a286a",
        "filename": "ci/test/00_setup_env_amd64_tsan.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/ci/test/00_setup_env_amd64_tsan.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/ci/test/00_setup_env_amd64_tsan.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_amd64_tsan.sh?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -8,7 +8,7 @@ export LC_ALL=C.UTF-8\n \n export HOST=x86_64-unknown-linux-gnu\n export DOCKER_NAME_TAG=ubuntu:16.04\n-export PACKAGES=\"clang llvm python3-zmq qtbase5-dev qttools5-dev-tools libssl-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libprotobuf-dev protobuf-compiler libqrencode-dev\"\n+export PACKAGES=\"clang llvm python3-zmq qtbase5-dev qttools5-dev-tools libssl-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libqrencode-dev\"\n export NO_DEPENDS=1\n export GOAL=\"install\"\n export BITCOIN_CONFIG=\"--enable-zmq --disable-wallet --with-gui=qt5 CPPFLAGS=-DDEBUG_LOCKORDER --with-sanitizers=thread --disable-hardening --disable-asm CC=clang CXX=clang++\""
      },
      {
        "sha": "63068dc95dd8554122d180d887387b352ffe9a38",
        "filename": "ci/test/00_setup_env_i686.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/ci/test/00_setup_env_i686.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/ci/test/00_setup_env_i686.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_i686.sh?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -7,7 +7,8 @@\n export LC_ALL=C.UTF-8\n \n export HOST=i686-pc-linux-gnu\n+export DEP_OPTS=\"PROTOBUF=1\"\n export PACKAGES=\"g++-multilib python3-zmq\"\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-zmq --with-gui=qt5 --disable-bip70 --enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\"\n+export BITCOIN_CONFIG=\"--enable-zmq --with-gui=qt5 --enable-bip70 --enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\"\n export CONFIG_SHELL=\"/bin/dash\""
      },
      {
        "sha": "54d7a9b814e933754c2fb351b7e57d220c712d1d",
        "filename": "ci/test/04_install.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/ci/test/04_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/ci/test/04_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/04_install.sh?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -6,6 +6,7 @@\n \n export LC_ALL=C.UTF-8\n \n+mkdir -p \"${BASE_SCRATCH_DIR}\"\n ccache echo \"Creating ccache dir if it didn't already exist\"\n \n if [ ! -d ${DIR_QA_ASSETS} ]; then"
      },
      {
        "sha": "ea7beae85fc16e00cf304cf67ebb952b6f4646ce",
        "filename": "ci/test/06_script_b.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/ci/test/06_script_b.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/ci/test/06_script_b.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/06_script_b.sh?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -16,7 +16,7 @@ fi\n \n if [ \"$RUN_FUNCTIONAL_TESTS\" = \"true\" ]; then\n   BEGIN_FOLD functional-tests\n-  DOCKER_EXEC test/functional/test_runner.py --ci --ansi --combinedlogslen=4000 ${TEST_RUNNER_EXTRA} --quiet --failfast\n+  DOCKER_EXEC test/functional/test_runner.py --ci $MAKEJOBS --tmpdirprefix \"${BASE_SCRATCH_DIR}/test_runner/\" --ansi --combinedlogslen=4000 ${TEST_RUNNER_EXTRA} --quiet --failfast\n   END_FOLD\n fi\n "
      },
      {
        "sha": "2445b72683ef832fd531b676e04707387380f6bf",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 37,
        "deletions": 4,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -223,10 +223,10 @@ AC_ARG_ENABLE([zmq],\n   [use_zmq=$enableval],\n   [use_zmq=yes])\n AC_ARG_ENABLE([bip70],\n-  [AS_HELP_STRING([--disable-bip70],\n-  [disable BIP70 (payment protocol) support in GUI (enabled by default)])],\n+  [AS_HELP_STRING([--enable-bip70],\n+  [enable BIP70 (payment protocol) support in the GUI (default is to disable)])],\n   [enable_bip70=$enableval],\n-  [enable_bip70=auto])\n+  [enable_bip70=no])\n \n AC_ARG_WITH([protoc-bindir],[AS_HELP_STRING([--with-protoc-bindir=BIN_DIR],[specify protoc bin path])], [protoc_bin_path=$withval], [])\n \n@@ -585,7 +585,7 @@ case $host in\n      fi\n \n      AX_CHECK_LINK_FLAG([[-Wl,-headerpad_max_install_names]], [LDFLAGS=\"$LDFLAGS -Wl,-headerpad_max_install_names\"])\n-     CPPFLAGS=\"$CPPFLAGS -DMAC_OSX\"\n+     CPPFLAGS=\"$CPPFLAGS -DMAC_OSX -DOBJC_OLD_DISPATCH_PROTOTYPES=0\"\n      OBJCXXFLAGS=\"$CXXFLAGS\"\n      ;;\n    *android*)\n@@ -777,6 +777,39 @@ fi\n \n AC_CHECK_HEADERS([endian.h sys/endian.h byteswap.h stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h sys/select.h sys/prctl.h])\n \n+# FD_ZERO may be dependent on a declaration of memcpy, e.g. in SmartOS\n+# check that it fails to build without memcpy, then that it builds with\n+AC_MSG_CHECKING(FD_ZERO memcpy dependence)\n+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+    #include <cstddef>\n+    #if HAVE_SYS_SELECT_H\n+    #include <sys/select.h>\n+    #endif\n+  ]],[[\n+    #if HAVE_SYS_SELECT_H\n+    fd_set fds;\n+    FD_ZERO(&fds);\n+    #endif\n+  ]])],\n+  [ AC_MSG_RESULT(no) ],\n+  [\n+      AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+          #include <cstring>\n+          #if HAVE_SYS_SELECT_H\n+          #include <sys/select.h>\n+          #endif\n+        ]], [[\n+          #if HAVE_SYS_SELECT_H\n+          fd_set fds;\n+          FD_ZERO(&fds);\n+          #endif\n+        ]])],\n+        [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_CSTRING_DEPENDENT_FD_ZERO, 1, [Define this symbol if FD_ZERO is dependent of a memcpy declaration being available]) ],\n+        [ AC_MSG_ERROR(failed with cstring include) ]\n+      )\n+  ]\n+)\n+\n AC_CHECK_DECLS([getifaddrs, freeifaddrs],,,\n     [#include <sys/types.h>\n     #include <ifaddrs.h>]"
      },
      {
        "sha": "361975baa4915b26e4e65fecaf359d230a411450",
        "filename": "contrib/README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/contrib/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/contrib/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/README.md?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -33,12 +33,12 @@ Files used during the gitian build process. For more information about gitian, s\n PGP keys used for signing Bitcoin Core [Gitian release](/doc/release-process.md) results.\n \n ### [MacDeploy](/contrib/macdeploy) ###\n-Scripts and notes for Mac builds. \n+Scripts and notes for Mac builds.\n \n ### [Gitian-build](/contrib/gitian-build.py) ###\n Script for running full Gitian builds.\n \n-Test and Verify Tools \n+Test and Verify Tools\n ---------------------\n \n ### [TestGen](/contrib/testgen) ###"
      },
      {
        "sha": "0e4eeee0a7ad9ebc49c30d30c285ccd41a752771",
        "filename": "contrib/bitcoin-qt.pro",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/contrib/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/contrib/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/bitcoin-qt.pro?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -16,6 +16,7 @@ FORMS += \\\n     ../src/qt/forms/sendcoinsentry.ui \\\n     ../src/qt/forms/signverifymessagedialog.ui \\\n     ../src/qt/forms/transactiondescdialog.ui \\\n+    ../src/qt/forms/createwalletdialog.ui\n \n RESOURCES += \\\n     ../src/qt/bitcoin.qrc"
      },
      {
        "sha": "04fa02484f558830a8e8b846aaedb4cc93f80503",
        "filename": "contrib/devtools/README.md",
        "status": "modified",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/contrib/devtools/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/contrib/devtools/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/README.md?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -120,18 +120,6 @@ If there are 'unsupported' symbols, the return value will be 1 a list like this\n     .../64/test_bitcoin: symbol std::out_of_range::~out_of_range() from unsupported version GLIBCXX_3.4.15\n     .../64/test_bitcoin: symbol _ZNSt8__detail15_List_nod from unsupported version GLIBCXX_3.4.15\n \n-update-translations.py\n-======================\n-\n-Run this script from the root of the repository to update all translations from transifex.\n-It will do the following automatically:\n-\n-- fetch all translations\n-- post-process them into valid and committable format\n-- add missing translations to the build system (TODO)\n-\n-See doc/translation-process.md for more information.\n-\n circular-dependencies.py\n ========================\n "
      },
      {
        "sha": "98eee67f4300853629cc61baaaed13008819038c",
        "filename": "contrib/devtools/clang-format-diff.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/contrib/devtools/clang-format-diff.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/contrib/devtools/clang-format-diff.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/clang-format-diff.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -106,7 +106,7 @@ def main():\n   filename = None\n   lines_by_file = {}\n   for line in sys.stdin:\n-    match = re.search('^\\+\\+\\+\\ (.*?/){%s}(\\S*)' % args.p, line)\n+    match = re.search(r'^\\+\\+\\+\\ (.*?/){%s}(\\S*)' % args.p, line)\n     if match:\n       filename = match.group(2)\n     if filename is None:\n@@ -119,7 +119,7 @@ def main():\n       if not re.match('^%s$' % args.iregex, filename, re.IGNORECASE):\n         continue\n \n-    match = re.search('^@@.*\\+(\\d+)(,(\\d+))?', line)\n+    match = re.search(r'^@@.*\\+(\\d+)(,(\\d+))?', line)\n     if match:\n       start_line = int(match.group(1))\n       line_count = 1"
      },
      {
        "sha": "67e77bc63de3205bdab3791b10a12acc9b46cd0e",
        "filename": "contrib/devtools/copyright_header.py",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/contrib/devtools/copyright_header.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/contrib/devtools/copyright_header.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/copyright_header.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -71,7 +71,7 @@ def get_filenames_to_examine(base_directory):\n ################################################################################\n \n \n-COPYRIGHT_WITH_C = 'Copyright \\(c\\)'\n+COPYRIGHT_WITH_C = r'Copyright \\(c\\)'\n COPYRIGHT_WITHOUT_C = 'Copyright'\n ANY_COPYRIGHT_STYLE = '(%s|%s)' % (COPYRIGHT_WITH_C, COPYRIGHT_WITHOUT_C)\n \n@@ -85,21 +85,21 @@ def get_filenames_to_examine(base_directory):\n ANY_COPYRIGHT_COMPILED = re.compile(ANY_COPYRIGHT_STYLE_OR_YEAR_STYLE)\n \n def compile_copyright_regex(copyright_style, year_style, name):\n-    return re.compile('%s %s,? %s' % (copyright_style, year_style, name))\n+    return re.compile(r'%s %s,? %s( +\\*)?\\n' % (copyright_style, year_style, name))\n \n EXPECTED_HOLDER_NAMES = [\n-    \"Satoshi Nakamoto\\n\",\n-    \"The Bitcoin Core developers\\n\",\n-    \"BitPay Inc\\.\\n\",\n-    \"University of Illinois at Urbana-Champaign\\.\\n\",\n-    \"Pieter Wuille\\n\",\n-    \"Wladimir J. van der Laan\\n\",\n-    \"Jeff Garzik\\n\",\n-    \"Jan-Klaas Kollhof\\n\",\n-    \"ArtForz -- public domain half-a-node\\n\",\n-    \"Intel Corporation\",\n-    \"The Zcash developers\",\n-    \"Jeremy Rubin\",\n+    r\"Satoshi Nakamoto\",\n+    r\"The Bitcoin Core developers\",\n+    r\"BitPay Inc\\.\",\n+    r\"University of Illinois at Urbana-Champaign\\.\",\n+    r\"Pieter Wuille\",\n+    r\"Wladimir J\\. van der Laan\",\n+    r\"Jeff Garzik\",\n+    r\"Jan-Klaas Kollhof\",\n+    r\"ArtForz -- public domain half-a-node\",\n+    r\"Intel Corporation ?\",\n+    r\"The Zcash developers\",\n+    r\"Jeremy Rubin\",\n ]\n \n DOMINANT_STYLE_COMPILED = {}\n@@ -329,7 +329,7 @@ def write_file_lines(filename, file_lines):\n # update header years execution\n ################################################################################\n \n-COPYRIGHT = 'Copyright \\(c\\)'\n+COPYRIGHT = r'Copyright \\(c\\)'\n YEAR = \"20[0-9][0-9]\"\n YEAR_RANGE = '(%s)(-%s)?' % (YEAR, YEAR)\n HOLDER = 'The Bitcoin Core developers'"
      },
      {
        "sha": "d8b684026c52667a864d0e5c9e9244f47e8a25be",
        "filename": "contrib/devtools/symbol-check.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/contrib/devtools/symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/contrib/devtools/symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/symbol-check.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -141,7 +141,7 @@ def read_libraries(filename):\n     for line in stdout.splitlines():\n         tokens = line.split()\n         if len(tokens)>2 and tokens[1] == '(NEEDED)':\n-            match = re.match('^Shared library: \\[(.*)\\]$', ' '.join(tokens[2:]))\n+            match = re.match(r'^Shared library: \\[(.*)\\]$', ' '.join(tokens[2:]))\n             if match:\n                 libraries.append(match.group(1))\n             else:\n@@ -171,5 +171,3 @@ def read_libraries(filename):\n                 retval = 1\n \n     sys.exit(retval)\n-\n-"
      },
      {
        "sha": "1b9d3a4c279d4b91778068591de5b0962e105876",
        "filename": "contrib/devtools/update-translations.py",
        "status": "removed",
        "additions": 0,
        "deletions": 215,
        "changes": 215,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc122811d5a852e116f666ffb38d157d9b62373/contrib/devtools/update-translations.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc122811d5a852e116f666ffb38d157d9b62373/contrib/devtools/update-translations.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/update-translations.py?ref=8dc122811d5a852e116f666ffb38d157d9b62373",
        "patch": "@@ -1,215 +0,0 @@\n-#!/usr/bin/env python3\n-# Copyright (c) 2014 Wladimir J. van der Laan\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-'''\n-Run this script from the root of the repository to update all translations from\n-transifex.\n-It will do the following automatically:\n-\n-- fetch all translations using the tx tool\n-- post-process them into valid and committable format\n-  - remove invalid control characters\n-  - remove location tags (makes diffs less noisy)\n-\n-TODO:\n-- auto-add new translations to the build system according to the translation process\n-'''\n-import subprocess\n-import re\n-import sys\n-import os\n-import io\n-import xml.etree.ElementTree as ET\n-\n-# Name of transifex tool\n-TX = 'tx'\n-# Name of source language file\n-SOURCE_LANG = 'bitcoin_en.ts'\n-# Directory with locale files\n-LOCALE_DIR = 'src/qt/locale'\n-# Minimum number of messages for translation to be considered at all\n-MIN_NUM_MESSAGES = 10\n-# Regexp to check for Bitcoin addresses\n-ADDRESS_REGEXP = re.compile('([13]|bc1)[a-zA-Z0-9]{30,}')\n-\n-def check_at_repository_root():\n-    if not os.path.exists('.git'):\n-        print('No .git directory found')\n-        print('Execute this script at the root of the repository', file=sys.stderr)\n-        sys.exit(1)\n-\n-def fetch_all_translations():\n-    if subprocess.call([TX, 'pull', '-f', '-a']):\n-        print('Error while fetching translations', file=sys.stderr)\n-        sys.exit(1)\n-\n-def find_format_specifiers(s):\n-    '''Find all format specifiers in a string.'''\n-    pos = 0\n-    specifiers = []\n-    while True:\n-        percent = s.find('%', pos)\n-        if percent < 0:\n-            break\n-        specifiers.append(s[percent+1])\n-        pos = percent+2\n-    return specifiers\n-\n-def split_format_specifiers(specifiers):\n-    '''Split format specifiers between numeric (Qt) and others (strprintf)'''\n-    numeric = []\n-    other = []\n-    for s in specifiers:\n-        if s in {'1','2','3','4','5','6','7','8','9'}:\n-            numeric.append(s)\n-        else:\n-            other.append(s)\n-\n-    # If both numeric format specifiers and \"others\" are used, assume we're dealing\n-    # with a Qt-formatted message. In the case of Qt formatting (see https://doc.qt.io/qt-5/qstring.html#arg)\n-    # only numeric formats are replaced at all. This means \"(percentage: %1%)\" is valid, without needing\n-    # any kind of escaping that would be necessary for strprintf. Without this, this function\n-    # would wrongly detect '%)' as a printf format specifier.\n-    if numeric:\n-        other = []\n-\n-    # numeric (Qt) can be present in any order, others (strprintf) must be in specified order\n-    return set(numeric),other\n-\n-def sanitize_string(s):\n-    '''Sanitize string for printing'''\n-    return s.replace('\\n',' ')\n-\n-def check_format_specifiers(source, translation, errors, numerus):\n-    source_f = split_format_specifiers(find_format_specifiers(source))\n-    # assert that no source messages contain both Qt and strprintf format specifiers\n-    # if this fails, go change the source as this is hacky and confusing!\n-    assert(not(source_f[0] and source_f[1]))\n-    try:\n-        translation_f = split_format_specifiers(find_format_specifiers(translation))\n-    except IndexError:\n-        errors.append(\"Parse error in translation for '%s': '%s'\" % (sanitize_string(source), sanitize_string(translation)))\n-        return False\n-    else:\n-        if source_f != translation_f:\n-            if numerus and source_f == (set(), ['n']) and translation_f == (set(), []) and translation.find('%') == -1:\n-                # Allow numerus translations to omit %n specifier (usually when it only has one possible value)\n-                return True\n-            errors.append(\"Mismatch between '%s' and '%s'\" % (sanitize_string(source), sanitize_string(translation)))\n-            return False\n-    return True\n-\n-def all_ts_files(suffix=''):\n-    for filename in os.listdir(LOCALE_DIR):\n-        # process only language files, and do not process source language\n-        if not filename.endswith('.ts'+suffix) or filename == SOURCE_LANG+suffix:\n-            continue\n-        if suffix: # remove provided suffix\n-            filename = filename[0:-len(suffix)]\n-        filepath = os.path.join(LOCALE_DIR, filename)\n-        yield(filename, filepath)\n-\n-FIX_RE = re.compile(b'[\\x00-\\x09\\x0b\\x0c\\x0e-\\x1f]')\n-def remove_invalid_characters(s):\n-    '''Remove invalid characters from translation string'''\n-    return FIX_RE.sub(b'', s)\n-\n-# Override cdata escape function to make our output match Qt's (optional, just for cleaner diffs for\n-# comparison, disable by default)\n-_orig_escape_cdata = None\n-def escape_cdata(text):\n-    text = _orig_escape_cdata(text)\n-    text = text.replace(\"'\", '&apos;')\n-    text = text.replace('\"', '&quot;')\n-    return text\n-\n-def contains_bitcoin_addr(text, errors):\n-    if text is not None and ADDRESS_REGEXP.search(text) is not None:\n-        errors.append('Translation \"%s\" contains a bitcoin address. This will be removed.' % (text))\n-        return True\n-    return False\n-\n-def postprocess_translations(reduce_diff_hacks=False):\n-    print('Checking and postprocessing...')\n-\n-    if reduce_diff_hacks:\n-        global _orig_escape_cdata\n-        _orig_escape_cdata = ET._escape_cdata\n-        ET._escape_cdata = escape_cdata\n-\n-    for (filename,filepath) in all_ts_files():\n-        os.rename(filepath, filepath+'.orig')\n-\n-    have_errors = False\n-    for (filename,filepath) in all_ts_files('.orig'):\n-        # pre-fixups to cope with transifex output\n-        parser = ET.XMLParser(encoding='utf-8') # need to override encoding because 'utf8' is not understood only 'utf-8'\n-        with open(filepath + '.orig', 'rb') as f:\n-            data = f.read()\n-        # remove control characters; this must be done over the entire file otherwise the XML parser will fail\n-        data = remove_invalid_characters(data)\n-        tree = ET.parse(io.BytesIO(data), parser=parser)\n-\n-        # iterate over all messages in file\n-        root = tree.getroot()\n-        for context in root.findall('context'):\n-            for message in context.findall('message'):\n-                numerus = message.get('numerus') == 'yes'\n-                source = message.find('source').text\n-                translation_node = message.find('translation')\n-                # pick all numerusforms\n-                if numerus:\n-                    translations = [i.text for i in translation_node.findall('numerusform')]\n-                else:\n-                    translations = [translation_node.text]\n-\n-                for translation in translations:\n-                    if translation is None:\n-                        continue\n-                    errors = []\n-                    valid = check_format_specifiers(source, translation, errors, numerus) and not contains_bitcoin_addr(translation, errors)\n-\n-                    for error in errors:\n-                        print('%s: %s' % (filename, error))\n-\n-                    if not valid: # set type to unfinished and clear string if invalid\n-                        translation_node.clear()\n-                        translation_node.set('type', 'unfinished')\n-                        have_errors = True\n-\n-                # Remove location tags\n-                for location in message.findall('location'):\n-                    message.remove(location)\n-\n-                # Remove entire message if it is an unfinished translation\n-                if translation_node.get('type') == 'unfinished':\n-                    context.remove(message)\n-\n-        # check if document is (virtually) empty, and remove it if so\n-        num_messages = 0\n-        for context in root.findall('context'):\n-            for message in context.findall('message'):\n-                num_messages += 1\n-        if num_messages < MIN_NUM_MESSAGES:\n-            print('Removing %s, as it contains only %i messages' % (filepath, num_messages))\n-            continue\n-\n-        # write fixed-up tree\n-        # if diff reduction requested, replace some XML to 'sanitize' to qt formatting\n-        if reduce_diff_hacks:\n-            out = io.BytesIO()\n-            tree.write(out, encoding='utf-8')\n-            out = out.getvalue()\n-            out = out.replace(b' />', b'/>')\n-            with open(filepath, 'wb') as f:\n-                f.write(out)\n-        else:\n-            tree.write(filepath, encoding='utf-8')\n-    return have_errors\n-\n-if __name__ == '__main__':\n-    check_at_repository_root()\n-    fetch_all_translations()\n-    postprocess_translations()\n-"
      },
      {
        "sha": "ee207a957c12be10c155fec9ae8aa856ea3906e5",
        "filename": "contrib/guix/libexec/build.sh",
        "status": "modified",
        "additions": 25,
        "deletions": 17,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/contrib/guix/libexec/build.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/contrib/guix/libexec/build.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/libexec/build.sh?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -30,23 +30,38 @@ fi\n # Given a package name and an output name, return the path of that output in our\n # current guix environment\n store_path() {\n-    grep --extended-regexp \"/[^-]{32}-${1}-cross-${HOST}-[^-]+${2:+-${2}}\" \"${GUIX_ENVIRONMENT}/manifest\" \\\n+    grep --extended-regexp \"/[^-]{32}-${1}-[^-]+${2:+-${2}}\" \"${GUIX_ENVIRONMENT}/manifest\" \\\n         | head --lines=1 \\\n         | sed --expression='s|^[[:space:]]*\"||' \\\n               --expression='s|\"[[:space:]]*$||'\n }\n \n # Determine output paths to use in CROSS_* environment variables\n-CROSS_GLIBC=\"$(store_path glibc)\"\n-CROSS_GLIBC_STATIC=\"$(store_path glibc static)\"\n-CROSS_KERNEL=\"$(store_path linux-libre-headers)\"\n-CROSS_GCC=\"$(store_path gcc)\"\n+CROSS_GLIBC=\"$(store_path glibc-cross-${HOST})\"\n+CROSS_GLIBC_STATIC=\"$(store_path glibc-cross-${HOST} static)\"\n+CROSS_KERNEL=\"$(store_path linux-libre-headers-cross-${HOST})\"\n+CROSS_GCC=\"$(store_path gcc-cross-${HOST})\"\n+CROSS_GCC_LIBS=( \"${CROSS_GCC}/lib/gcc/${HOST}\"/* ) # This expands to an array of directories...\n+CROSS_GCC_LIB=\"${CROSS_GCC_LIBS[0]}\" # ...we just want the first one (there should only be one)\n \n # Set environment variables to point Guix's cross-toolchain to the right\n # includes/libs for $HOST\n-export CROSS_C_INCLUDE_PATH=\"${CROSS_GCC}/include:${CROSS_GLIBC}/include:${CROSS_KERNEL}/include\"\n-export CROSS_CPLUS_INCLUDE_PATH=\"${CROSS_GCC}/include/c++:${CROSS_GLIBC}/include:${CROSS_KERNEL}/include\"\n-export CROSS_LIBRARY_PATH=\"${CROSS_GLIBC}/lib:${CROSS_GLIBC_STATIC}/lib:${CROSS_GCC}/lib:${CROSS_GCC}/${HOST}/lib:${CROSS_KERNEL}/lib\"\n+#\n+# NOTE: CROSS_C_INCLUDE_PATH is missing ${CROSS_GCC_LIB}/include-fixed, because\n+# the limits.h in it is missing a '#include_next <limits.h>'\n+#\n+export CROSS_C_INCLUDE_PATH=\"${CROSS_GCC_LIB}/include:${CROSS_GLIBC}/include:${CROSS_KERNEL}/include\"\n+export CROSS_CPLUS_INCLUDE_PATH=\"${CROSS_GCC}/include/c++:${CROSS_GCC}/include/c++/${HOST}:${CROSS_GCC}/include/c++/backward:${CROSS_C_INCLUDE_PATH}\"\n+export CROSS_LIBRARY_PATH=\"${CROSS_GCC}/lib:${CROSS_GCC}/${HOST}/lib:${CROSS_GCC_LIB}:${CROSS_GLIBC}/lib:${CROSS_GLIBC_STATIC}/lib\"\n+\n+# Sanity check CROSS_*_PATH directories\n+IFS=':' read -ra PATHS <<< \"${CROSS_C_INCLUDE_PATH}:${CROSS_CPLUS_INCLUDE_PATH}:${CROSS_LIBRARY_PATH}\"\n+for p in \"${PATHS[@]}\"; do\n+    if [ ! -d \"$p\" ]; then\n+        echo \"'$p' doesn't exist or isn't a directory... Aborting...\"\n+        exit 1\n+    fi\n+done\n \n # Disable Guix ld auto-rpath behavior\n export GUIX_LD_WRAPPER_DISABLE_RPATH=yes\n@@ -121,17 +136,10 @@ DISTNAME=\"$(basename \"$SOURCEDIST\" '.tar.gz')\"\n # Binary Tarball Building #\n ###########################\n \n-# Create a spec file to normalize ssp linking behaviour\n-spec_file=\"$(mktemp)\"\n-cat << EOF > \"$spec_file\"\n-*link_ssp:\n-%{fstack-protector|fstack-protector-all|fstack-protector-strong|fstack-protector-explicit:}\n-EOF\n-\n # Similar flags to Gitian\n CONFIGFLAGS=\"--enable-glibc-back-compat --enable-reduce-exports --disable-bench --disable-gui-tests\"\n-HOST_CFLAGS=\"-O2 -g -specs=${spec_file} -ffile-prefix-map=${PWD}=.\"\n-HOST_CXXFLAGS=\"-O2 -g -specs=${spec_file} -ffile-prefix-map=${PWD}=.\"\n+HOST_CFLAGS=\"-O2 -g -ffile-prefix-map=${PWD}=.\"\n+HOST_CXXFLAGS=\"-O2 -g -ffile-prefix-map=${PWD}=.\"\n HOST_LDFLAGS=\"-Wl,--as-needed -Wl,--dynamic-linker=$glibc_dynamic_linker -static-libstdc++\"\n \n # Make $HOST-specific native binaries from depends available in $PATH"
      },
      {
        "sha": "34c3e7b3ab9e379523dc800bc5dfce1366aa4f4f",
        "filename": "contrib/init/bitcoind.service",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/contrib/init/bitcoind.service",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/contrib/init/bitcoind.service",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/init/bitcoind.service?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -5,8 +5,9 @@\n # See \"man systemd.service\" for details.\n \n # Note that almost all daemon options could be specified in\n-# /etc/bitcoin/bitcoin.conf, except for those explicitly specified as arguments\n-# in ExecStart=\n+# /etc/bitcoin/bitcoin.conf, but keep in mind those explicitly\n+# specified as arguments in ExecStart= will override those in the\n+# config file.\n \n [Unit]\n Description=Bitcoin daemon\n@@ -18,6 +19,10 @@ ExecStart=/usr/bin/bitcoind -daemon \\\n                             -conf=/etc/bitcoin/bitcoin.conf \\\n                             -datadir=/var/lib/bitcoind\n \n+# Make sure the config directory is readable by the service user\n+PermissionsStartOnly=true\n+ExecStartPre=/bin/chgrp bitcoin /etc/bitcoin\n+\n # Process management\n ####################\n \n@@ -53,6 +58,9 @@ PrivateTmp=true\n # Mount /usr, /boot/ and /etc read-only for the process.\n ProtectSystem=full\n \n+# Deny access to /home, /root and /run/user\n+ProtectHome=true\n+\n # Disallow the process and all of its children to gain\n # new privileges through execve().\n NoNewPrivileges=true"
      },
      {
        "sha": "95754ab937286903c65aa0d282e3e33d4bcc1f0a",
        "filename": "contrib/linearize/linearize-data.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/contrib/linearize/linearize-data.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/contrib/linearize/linearize-data.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/linearize-data.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -263,12 +263,12 @@ def run(self):\n     f = open(sys.argv[1], encoding=\"utf8\")\n     for line in f:\n         # skip comment lines\n-        m = re.search('^\\s*#', line)\n+        m = re.search(r'^\\s*#', line)\n         if m:\n             continue\n \n         # parse key=value lines\n-        m = re.search('^(\\w+)\\s*=\\s*(\\S.*)$', line)\n+        m = re.search(r'^(\\w+)\\s*=\\s*(\\S.*)$', line)\n         if m is None:\n             continue\n         settings[m.group(1)] = m.group(2)"
      },
      {
        "sha": "02c96d2a75a39f47fdfe2746b25a282adc12e4c1",
        "filename": "contrib/linearize/linearize-hashes.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/contrib/linearize/linearize-hashes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/contrib/linearize/linearize-hashes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/linearize-hashes.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -106,12 +106,12 @@ def get_rpc_cookie():\n     f = open(sys.argv[1], encoding=\"utf8\")\n     for line in f:\n         # skip comment lines\n-        m = re.search('^\\s*#', line)\n+        m = re.search(r'^\\s*#', line)\n         if m:\n             continue\n \n         # parse key=value lines\n-        m = re.search('^(\\w+)\\s*=\\s*(\\S.*)$', line)\n+        m = re.search(r'^(\\w+)\\s*=\\s*(\\S.*)$', line)\n         if m is None:\n             continue\n         settings[m.group(1)] = m.group(2)"
      },
      {
        "sha": "e90120ea796c295619fce1655e05ce011ca00aea",
        "filename": "contrib/macdeploy/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/contrib/macdeploy/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/contrib/macdeploy/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/README.md?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -1,7 +1,7 @@\n ### MacDeploy ###\n \n For Snow Leopard (which uses [Python 2.6](http://www.python.org/download/releases/2.6/)), you will need the param_parser package:\n-\t\n+\n \tsudo easy_install argparse\n \n This script should not be run manually, instead, after building as usual:"
      },
      {
        "sha": "d8088aa1230441b59b7b8132d601671ca13c2a98",
        "filename": "contrib/macdeploy/macdeployqtplus",
        "status": "modified",
        "additions": 96,
        "deletions": 54,
        "changes": 150,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/contrib/macdeploy/macdeployqtplus",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/contrib/macdeploy/macdeployqtplus",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/macdeployqtplus?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -19,6 +19,7 @@\n import subprocess, sys, re, os, shutil, stat, os.path, time\n from string import Template\n from argparse import ArgumentParser\n+from typing import List, Optional\n \n # This is ported from the original macdeployqt with modifications\n \n@@ -48,18 +49,18 @@ class FrameworkInfo(object):\n             return False\n     \n     def __str__(self):\n-        return \"\"\" Framework name: %s\n- Framework directory: %s\n- Framework path: %s\n- Binary name: %s\n- Binary directory: %s\n- Binary path: %s\n- Version: %s\n- Install name: %s\n- Deployed install name: %s\n- Source file Path: %s\n- Deployed Directory (relative to bundle): %s\n-\"\"\" % (self.frameworkName,\n+        return \"\"\" Framework name: {}\n+ Framework directory: {}\n+ Framework path: {}\n+ Binary name: {}\n+ Binary directory: {}\n+ Binary path: {}\n+ Version: {}\n+ Install name: {}\n+ Deployed install name: {}\n+ Source file Path: {}\n+ Deployed Directory (relative to bundle): {}\n+\"\"\".format(self.frameworkName,\n        self.frameworkDirectory,\n        self.frameworkPath,\n        self.binaryName,\n@@ -85,7 +86,7 @@ class FrameworkInfo(object):\n     bundleBinaryDirectory = \"Contents/MacOS\"\n     \n     @classmethod\n-    def fromOtoolLibraryLine(cls, line):\n+    def fromOtoolLibraryLine(cls, line: str) -> Optional['FrameworkInfo']:\n         # Note: line must be trimmed\n         if line == \"\":\n             return None\n@@ -146,13 +147,12 @@ class FrameworkInfo(object):\n             info.sourceContentsDirectory = os.path.join(info.frameworkPath, \"Contents\")\n             info.sourceVersionContentsDirectory = os.path.join(info.frameworkPath, \"Versions\", info.version, \"Contents\")\n             info.destinationResourcesDirectory = os.path.join(cls.bundleFrameworkDirectory, info.frameworkName, \"Resources\")\n-            info.destinationContentsDirectory = os.path.join(cls.bundleFrameworkDirectory, info.frameworkName, \"Contents\")\n             info.destinationVersionContentsDirectory = os.path.join(cls.bundleFrameworkDirectory, info.frameworkName, \"Versions\", info.version, \"Contents\")\n         \n         return info\n \n class ApplicationBundleInfo(object):\n-    def __init__(self, path):\n+    def __init__(self, path: str):\n         self.path = path\n         appName = \"Bitcoin-Qt\"\n         self.binaryPath = os.path.join(path, \"Contents\", \"MacOS\", appName)\n@@ -167,7 +167,7 @@ class DeploymentInfo(object):\n         self.pluginPath = None\n         self.deployedFrameworks = []\n     \n-    def detectQtPath(self, frameworkDirectory):\n+    def detectQtPath(self, frameworkDirectory: str):\n         parentDir = os.path.dirname(frameworkDirectory)\n         if os.path.exists(os.path.join(parentDir, \"translations\")):\n             # Classic layout, e.g. \"/usr/local/Trolltech/Qt-4.x.x\"\n@@ -180,9 +180,9 @@ class DeploymentInfo(object):\n             if os.path.exists(pluginPath):\n                 self.pluginPath = pluginPath\n     \n-    def usesFramework(self, name):\n-        nameDot = \"%s.\" % name\n-        libNameDot = \"lib%s.\" % name\n+    def usesFramework(self, name: str) -> bool:\n+        nameDot = \"{}.\".format(name)\n+        libNameDot = \"lib{}.\".format(name)\n         for framework in self.deployedFrameworks:\n             if framework.endswith(\".framework\"):\n                 if framework.startswith(nameDot):\n@@ -192,7 +192,7 @@ class DeploymentInfo(object):\n                     return True\n         return False\n \n-def getFrameworks(binaryPath, verbose):\n+def getFrameworks(binaryPath: str, verbose: int) -> List[FrameworkInfo]:\n     if verbose >= 3:\n         print(\"Inspecting with otool: \" + binaryPath)\n     otoolbin=os.getenv(\"OTOOL\", \"otool\")\n@@ -202,7 +202,7 @@ def getFrameworks(binaryPath, verbose):\n         if verbose >= 1:\n             sys.stderr.write(o_stderr)\n             sys.stderr.flush()\n-            raise RuntimeError(\"otool failed with return code %d\" % otool.returncode)\n+            raise RuntimeError(\"otool failed with return code {}\".format(otool.returncode))\n \n     otoolLines = o_stdout.split(\"\\n\")\n     otoolLines.pop(0) # First line is the inspected binary\n@@ -221,33 +221,33 @@ def getFrameworks(binaryPath, verbose):\n     \n     return libraries\n \n-def runInstallNameTool(action, *args):\n+def runInstallNameTool(action: str, *args):\n     installnametoolbin=os.getenv(\"INSTALLNAMETOOL\", \"install_name_tool\")\n     subprocess.check_call([installnametoolbin, \"-\"+action] + list(args))\n \n-def changeInstallName(oldName, newName, binaryPath, verbose):\n+def changeInstallName(oldName: str, newName: str, binaryPath: str, verbose: int):\n     if verbose >= 3:\n         print(\"Using install_name_tool:\")\n         print(\" in\", binaryPath)\n         print(\" change reference\", oldName)\n         print(\" to\", newName)\n     runInstallNameTool(\"change\", oldName, newName, binaryPath)\n \n-def changeIdentification(id, binaryPath, verbose):\n+def changeIdentification(id: str, binaryPath: str, verbose: int):\n     if verbose >= 3:\n         print(\"Using install_name_tool:\")\n         print(\" change identification in\", binaryPath)\n         print(\" to\", id)\n     runInstallNameTool(\"id\", id, binaryPath)\n \n-def runStrip(binaryPath, verbose):\n+def runStrip(binaryPath: str, verbose: int):\n     stripbin=os.getenv(\"STRIP\", \"strip\")\n     if verbose >= 3:\n         print(\"Using strip:\")\n         print(\" stripped\", binaryPath)\n     subprocess.check_call([stripbin, \"-x\", binaryPath])\n \n-def copyFramework(framework, path, verbose):\n+def copyFramework(framework: FrameworkInfo, path: str, verbose: int) -> Optional[str]:\n     if framework.sourceFilePath.startswith(\"Qt\"):\n         #standard place for Nokia Qt installer's frameworks\n         fromPath = \"/Library/Frameworks/\" + framework.sourceFilePath\n@@ -309,7 +309,7 @@ def copyFramework(framework, path, verbose):\n     \n     return toPath\n \n-def deployFrameworks(frameworks, bundlePath, binaryPath, strip, verbose, deploymentInfo=None):\n+def deployFrameworks(frameworks: List[FrameworkInfo], bundlePath: str, binaryPath: str, strip: bool, verbose: int, deploymentInfo: Optional[DeploymentInfo] = None) -> DeploymentInfo:\n     if deploymentInfo is None:\n         deploymentInfo = DeploymentInfo()\n     \n@@ -355,15 +355,15 @@ def deployFrameworks(frameworks, bundlePath, binaryPath, strip, verbose, deploym\n     \n     return deploymentInfo\n \n-def deployFrameworksForAppBundle(applicationBundle, strip, verbose):\n+def deployFrameworksForAppBundle(applicationBundle: ApplicationBundleInfo, strip: bool, verbose: int) -> DeploymentInfo:\n     frameworks = getFrameworks(applicationBundle.binaryPath, verbose)\n     if len(frameworks) == 0 and verbose >= 1:\n-        print(\"Warning: Could not find any external frameworks to deploy in %s.\" % (applicationBundle.path))\n+        print(\"Warning: Could not find any external frameworks to deploy in {}.\".format(applicationBundle.path))\n         return DeploymentInfo()\n     else:\n         return deployFrameworks(frameworks, applicationBundle.path, applicationBundle.binaryPath, strip, verbose)\n \n-def deployPlugins(appBundleInfo, deploymentInfo, strip, verbose):\n+def deployPlugins(appBundleInfo: ApplicationBundleInfo, deploymentInfo: DeploymentInfo, strip: bool, verbose: int):\n     # Lookup available plugins, exclude unneeded\n     plugins = []\n     if deploymentInfo.pluginPath is None:\n@@ -373,10 +373,12 @@ def deployPlugins(appBundleInfo, deploymentInfo, strip, verbose):\n         if pluginDirectory == \"designer\":\n             # Skip designer plugins\n             continue\n-        elif pluginDirectory == \"phonon\" or pluginDirectory == \"phonon_backend\":\n-            # Deploy the phonon plugins only if phonon is in use\n-            if not deploymentInfo.usesFramework(\"phonon\"):\n-                continue\n+        elif pluginDirectory == \"printsupport\":\n+            # Skip printsupport plugins\n+            continue\n+        elif pluginDirectory == \"imageformats\":\n+            # Skip imageformats plugins\n+            continue\n         elif pluginDirectory == \"sqldrivers\":\n             # Deploy the sql plugins only if QtSql is in use\n             if not deploymentInfo.usesFramework(\"QtSql\"):\n@@ -409,6 +411,42 @@ def deployPlugins(appBundleInfo, deploymentInfo, strip, verbose):\n             # Deploy the mediaservice plugins only if QtMultimediaWidgets is in use\n             if not deploymentInfo.usesFramework(\"QtMultimediaWidgets\"):\n                 continue\n+        elif pluginDirectory == \"canbus\":\n+            # Deploy the canbus plugins only if QtSerialBus is in use\n+            if not deploymentInfo.usesFramework(\"QtSerialBus\"):\n+                continue\n+        elif pluginDirectory == \"webview\":\n+            # Deploy the webview plugins only if QtWebView is in use\n+            if not deploymentInfo.usesFramework(\"QtWebView\"):\n+                continue\n+        elif pluginDirectory == \"gamepads\":\n+            # Deploy the webview plugins only if QtGamepad is in use\n+            if not deploymentInfo.usesFramework(\"QtGamepad\"):\n+                continue\n+        elif pluginDirectory == \"geoservices\":\n+            # Deploy the webview plugins only if QtLocation is in use\n+            if not deploymentInfo.usesFramework(\"QtLocation\"):\n+                continue\n+        elif pluginDirectory == \"texttospeech\":\n+            # Deploy the texttospeech plugins only if QtTextToSpeech is in use\n+            if not deploymentInfo.usesFramework(\"QtTextToSpeech\"):\n+                continue\n+        elif pluginDirectory == \"virtualkeyboard\":\n+            # Deploy the virtualkeyboard plugins only if QtVirtualKeyboard is in use\n+            if not deploymentInfo.usesFramework(\"QtVirtualKeyboard\"):\n+                continue\n+        elif pluginDirectory == \"sceneparsers\":\n+            # Deploy the virtualkeyboard plugins only if Qt3DCore is in use\n+            if not deploymentInfo.usesFramework(\"Qt3DCore\"):\n+                continue\n+        elif pluginDirectory == \"renderplugins\":\n+            # Deploy the renderplugins plugins only if Qt3DCore is in use\n+            if not deploymentInfo.usesFramework(\"Qt3DCore\"):\n+                continue\n+        elif pluginDirectory == \"geometryloaders\":\n+            # Deploy the geometryloaders plugins only if Qt3DCore is in use\n+            if not deploymentInfo.usesFramework(\"Qt3DCore\"):\n+                continue\n \n         for pluginName in filenames:\n             pluginPath = os.path.join(pluginDirectory, pluginName)\n@@ -431,6 +469,10 @@ def deployPlugins(appBundleInfo, deploymentInfo, strip, verbose):\n                 # Deploy the accessible qtquick plugin only if QtQuick is in use\n                 if not deploymentInfo.usesFramework(\"QtQuick\"):\n                     continue\n+            elif pluginPath == \"platforminputcontexts/libqtvirtualkeyboardplugin.dylib\":\n+                # Deploy the virtualkeyboardplugin plugin only if QtVirtualKeyboard is in use\n+                if not deploymentInfo.usesFramework(\"QtVirtualKeyboard\"):\n+                    continue\n \n             plugins.append((pluginDirectory, pluginName))\n     \n@@ -499,7 +541,7 @@ app_bundle = config.app_bundle[0]\n \n if not os.path.exists(app_bundle):\n     if verbose >= 1:\n-        sys.stderr.write(\"Error: Could not find app bundle \\\"%s\\\"\\n\" % (app_bundle))\n+        sys.stderr.write(\"Error: Could not find app bundle \\\"{}\\\"\\n\".format(app_bundle))\n     sys.exit(1)\n \n app_bundle_name = os.path.splitext(os.path.basename(app_bundle))[0]\n@@ -511,7 +553,7 @@ if config.translations_dir and config.translations_dir[0]:\n         translations_dir = config.translations_dir[0]\n     else:\n         if verbose >= 1:\n-            sys.stderr.write(\"Error: Could not find translation dir \\\"%s\\\"\\n\" % (translations_dir))\n+            sys.stderr.write(\"Error: Could not find translation dir \\\"{}\\\"\\n\".format(translations_dir))\n         sys.exit(1)\n # ------------------------------------------------\n \n@@ -520,7 +562,7 @@ for p in config.add_resources:\n         print(\"Checking for \\\"%s\\\"...\" % p)\n     if not os.path.exists(p):\n         if verbose >= 1:\n-            sys.stderr.write(\"Error: Could not find additional resource file \\\"%s\\\"\\n\" % (p))\n+            sys.stderr.write(\"Error: Could not find additional resource file \\\"{}\\\"\\n\".format(p))\n         sys.exit(1)\n \n # ------------------------------------------------\n@@ -537,17 +579,17 @@ if len(config.fancy) == 1:\n     \n     p = config.fancy[0]\n     if verbose >= 3:\n-        print(\"Fancy: Loading \\\"%s\\\"...\" % p)\n+        print(\"Fancy: Loading \\\"{}\\\"...\".format(p))\n     if not os.path.exists(p):\n         if verbose >= 1:\n-            sys.stderr.write(\"Error: Could not find fancy disk image plist at \\\"%s\\\"\\n\" % (p))\n+            sys.stderr.write(\"Error: Could not find fancy disk image plist at \\\"{}\\\"\\n\".format(p))\n         sys.exit(1)\n     \n     try:\n         fancy = plistlib.readPlist(p)\n     except:\n         if verbose >= 1:\n-            sys.stderr.write(\"Error: Could not parse fancy disk image plist at \\\"%s\\\"\\n\" % (p))\n+            sys.stderr.write(\"Error: Could not parse fancy disk image plist at \\\"{}\\\"\\n\".format(p))\n         sys.exit(1)\n     \n     try:\n@@ -561,18 +603,18 @@ if len(config.fancy) == 1:\n                 assert isinstance(value, list) and len(value) == 2 and isinstance(value[0], int) and isinstance(value[1], int)\n     except:\n         if verbose >= 1:\n-            sys.stderr.write(\"Error: Bad format of fancy disk image plist at \\\"%s\\\"\\n\" % (p))\n+            sys.stderr.write(\"Error: Bad format of fancy disk image plist at \\\"{}\\\"\\n\".format(p))\n         sys.exit(1)\n     \n     if \"background_picture\" in fancy:\n         bp = fancy[\"background_picture\"]\n         if verbose >= 3:\n-            print(\"Fancy: Resolving background picture \\\"%s\\\"...\" % bp)\n+            print(\"Fancy: Resolving background picture \\\"{}\\\"...\".format(bp))\n         if not os.path.exists(bp):\n             bp = os.path.join(os.path.dirname(p), bp)\n             if not os.path.exists(bp):\n                 if verbose >= 1:\n-                    sys.stderr.write(\"Error: Could not find background picture at \\\"%s\\\" or \\\"%s\\\"\\n\" % (fancy[\"background_picture\"], bp))\n+                    sys.stderr.write(\"Error: Could not find background picture at \\\"{}\\\" or \\\"{}\\\"\\n\".format(fancy[\"background_picture\"], bp))\n                 sys.exit(1)\n             else:\n                 fancy[\"background_picture\"] = bp\n@@ -623,7 +665,7 @@ try:\n             config.plugins = False\n except RuntimeError as e:\n     if verbose >= 1:\n-        sys.stderr.write(\"Error: %s\\n\" % str(e))\n+        sys.stderr.write(\"Error: {}\\n\".format(str(e)))\n     sys.exit(1)\n \n # ------------------------------------------------\n@@ -636,7 +678,7 @@ if config.plugins:\n         deployPlugins(applicationBundle, deploymentInfo, config.strip, verbose)\n     except RuntimeError as e:\n         if verbose >= 1:\n-            sys.stderr.write(\"Error: %s\\n\" % str(e))\n+            sys.stderr.write(\"Error: {}\\n\".format(str(e)))\n         sys.exit(1)\n \n # ------------------------------------------------\n@@ -652,14 +694,14 @@ else:\n         else:\n             sys.stderr.write(\"Error: Could not find Qt translation path\\n\")\n             sys.exit(1)\n-    add_qt_tr = [\"qt_%s.qm\" % lng for lng in config.add_qt_tr[0].split(\",\")]\n+    add_qt_tr = [\"qt_{}.qm\".format(lng) for lng in config.add_qt_tr[0].split(\",\")]\n     for lng_file in add_qt_tr:\n         p = os.path.join(qt_tr_dir, lng_file)\n         if verbose >= 3:\n-            print(\"Checking for \\\"%s\\\"...\" % p)\n+            print(\"Checking for \\\"{}\\\"...\".format(p))\n         if not os.path.exists(p):\n             if verbose >= 1:\n-                sys.stderr.write(\"Error: Could not find Qt translation file \\\"%s\\\"\\n\" % (lng_file))\n+                sys.stderr.write(\"Error: Could not find Qt translation file \\\"{}\\\"\\n\".format(lng_file))\n                 sys.exit(1)\n \n # ------------------------------------------------\n@@ -700,14 +742,14 @@ if config.sign and 'CODESIGNARGS' not in os.environ:\n     print(\"You must set the CODESIGNARGS environment variable. Skipping signing.\")\n elif config.sign:\n     if verbose >= 1:\n-        print(\"Code-signing app bundle %s\"%(target,))\n-    subprocess.check_call(\"codesign --force %s %s\"%(os.environ['CODESIGNARGS'], target), shell=True)\n+        print(\"Code-signing app bundle {}\".format(target))\n+    subprocess.check_call(\"codesign --force {} {}\".format(os.environ['CODESIGNARGS'], target), shell=True)\n \n # ------------------------------------------------\n \n if config.dmg is not None:\n \n-    def runHDIUtil(verb, image_basename, **kwargs):\n+    def runHDIUtil(verb: str, image_basename: str, **kwargs) -> int:\n         hdiutil_args = [\"hdiutil\", verb, image_basename + \".dmg\"]\n         if \"capture_stdout\" in kwargs:\n             del kwargs[\"capture_stdout\"]\n@@ -721,7 +763,7 @@ if config.dmg is not None:\n         \n         for key, value in kwargs.items():\n             hdiutil_args.append(\"-\" + key)\n-            if not value is True:\n+            if value is not True:\n                 hdiutil_args.append(str(value))\n         \n         return run(hdiutil_args, universal_newlines=True)\n@@ -765,8 +807,8 @@ if config.dmg is not None:\n             output = runHDIUtil(\"attach\", dmg_name + \".temp\", readwrite=True, noverify=True, noautoopen=True, capture_stdout=True)\n         except subprocess.CalledProcessError as e:\n             sys.exit(e.returncode)\n-        \n-        m = re.search(\"/Volumes/(.+$)\", output)\n+\n+        m = re.search(r\"/Volumes/(.+$)\", output)\n         disk_root = m.group(0)\n         disk_name = m.group(1)\n         "
      },
      {
        "sha": "7630a7a4fa2550396e8e6ee5421a90f640b7be0a",
        "filename": "contrib/seeds/generate-seeds.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/contrib/seeds/generate-seeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/contrib/seeds/generate-seeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/generate-seeds.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -74,7 +74,7 @@ def name_to_ipv6(addr):\n         raise ValueError('Could not parse address %s' % addr)\n \n def parse_spec(s, defaultport):\n-    match = re.match('\\[([0-9a-fA-F:]+)\\](?::([0-9]+))?$', s)\n+    match = re.match(r'\\[([0-9a-fA-F:]+)\\](?::([0-9]+))?$', s)\n     if match: # ipv6\n         host = match.group(1)\n         port = match.group(2)\n@@ -136,4 +136,3 @@ def main():\n \n if __name__ == '__main__':\n     main()\n-"
      },
      {
        "sha": "573a71a675312d3ce110bc60b788964116d9a0e4",
        "filename": "contrib/testgen/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/contrib/testgen/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/contrib/testgen/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/testgen/README.md?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -2,7 +2,7 @@\n \n Utilities to generate test vectors for the data-driven Bitcoin tests.\n \n-Usage: \n+Usage:\n \n     PYTHONPATH=../../test/functional/test_framework ./gen_key_io_test_vectors.py valid 50 > ../../src/test/data/key_io_keys_valid.json\n     PYTHONPATH=../../test/functional/test_framework ./gen_key_io_test_vectors.py invalid 50 > ../../src/test/data/key_io_keys_invalid.json"
      },
      {
        "sha": "b7e9a9213edb59e95baaff52dd08da58aafe0c44",
        "filename": "depends/Makefile",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/depends/Makefile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/depends/Makefile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/Makefile?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -5,6 +5,7 @@ WORK_PATH = $(BASEDIR)/work\n BASE_CACHE ?= $(BASEDIR)/built\n SDK_PATH ?= $(BASEDIR)/SDKs\n NO_QT ?=\n+PROTOBUF ?=\n RAPIDCHECK ?=\n NO_WALLET ?=\n NO_ZMQ ?=\n@@ -96,13 +97,15 @@ wallet_packages_$(NO_WALLET) = $(wallet_packages)\n upnp_packages_$(NO_UPNP) = $(upnp_packages)\n zmq_packages_$(NO_ZMQ) = $(zmq_packages)\n \n+protobuf_packages_$(PROTOBUF) = $(protobuf_packages)\n rapidcheck_packages_$(RAPIDCHECK) = $(rapidcheck_packages)\n \n packages += $($(host_arch)_$(host_os)_packages) $($(host_os)_packages) $(qt_packages_) $(wallet_packages_) $(upnp_packages_)\n native_packages += $($(host_arch)_$(host_os)_native_packages) $($(host_os)_native_packages)\n \n-ifneq ($(qt_packages_),)\n-native_packages += $(qt_native_packages)\n+ifeq ($(protobuf_packages_),)\n+native_packages += $(protobuf_native_packages)\n+packages += $(protobuf_packages)\n endif\n \n ifneq ($(zmq_packages_),)\n@@ -150,6 +153,7 @@ $(host_prefix)/share/config.site : config.site.in $(host_prefix)/.stamp_$(final_\n             -e 's|@allow_host_packages@|$(ALLOW_HOST_PACKAGES)|' \\\n             -e 's|@no_qt@|$(NO_QT)|' \\\n             -e 's|@no_zmq@|$(NO_ZMQ)|' \\\n+            -e 's|@enable_bip70@|$(PROTOBUF)|' \\\n             -e 's|@no_wallet@|$(NO_WALLET)|' \\\n             -e 's|@no_upnp@|$(NO_UPNP)|' \\\n             -e 's|@debug@|$(DEBUG)|' \\"
      },
      {
        "sha": "cfb9bbfeb0d57095ee954c00e5d3eb12a6b3ad59",
        "filename": "depends/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/depends/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/depends/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/README.md?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -77,6 +77,7 @@ The following can be set when running make: make FOO=bar\n     NO_UPNP: Don't download/build/cache packages needed for enabling upnp\n     DEBUG: disable some optimizations and enable more runtime checking\n     RAPIDCHECK: build rapidcheck (experimental, requires cmake)\n+    PROTOBUF: build protobuf (used for deprecated BIP70 support)\n     HOST_ID_SALT: Optional salt to use when generating host package ids\n     BUILD_ID_SALT: Optional salt to use when generating build package ids\n "
      },
      {
        "sha": "d0d36641c4053ac5d73654451094fe54f0a90be6",
        "filename": "depends/config.site.in",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/depends/config.site.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/depends/config.site.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.site.in?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -37,6 +37,10 @@ if test -z $enable_zmq && test -n \"@no_zmq@\"; then\n   enable_zmq=no\n fi\n \n+if test -n $enable_bip70 && test -n \"@enable_bip70@\"; then\n+  enable_bip70=yes\n+fi\n+\n if test x@host_os@ = xdarwin; then\n   BREW=no\n   PORT=no"
      },
      {
        "sha": "0a6f2e644219008dcb4cefe4d7a152e838e9b66d",
        "filename": "depends/description.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/depends/description.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/depends/description.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/description.md?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -1,4 +1,4 @@\n-This is a system of building and caching dependencies necessary for building Bitcoin. \n+This is a system of building and caching dependencies necessary for building Bitcoin.\n There are several features that make it different from most similar systems:\n \n ### It is designed to be builder and host agnostic\n@@ -26,7 +26,7 @@ Before building, a unique build-id is generated for each package. This id\n consists of a hash of all files used to build the package (Makefiles, packages,\n etc), and as well as a hash of the same data for each recursive dependency. If\n any portion of a package's build recipe changes, it will be rebuilt as well as\n-any other package that depends on it. If any of the main makefiles (Makefile, \n+any other package that depends on it. If any of the main makefiles (Makefile,\n funcs.mk, etc) are changed, all packages will be rebuilt. After building, the\n results are cached into a tarball that can be re-used and distributed.\n "
      },
      {
        "sha": "7ed20ea1297dcad84173c4ec085dee714f87f22f",
        "filename": "depends/packages.md",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/depends/packages.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/depends/packages.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages.md?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -32,15 +32,15 @@ These variables are optional:\n \n     $(package)_build_subdir:\n     cd to this dir before running configure/build/stage commands.\n-    \n+\n     $(package)_download_file:\n     The file-name of the upstream source if it differs from how it should be\n     stored locally. This can be used to avoid storing file-names with strange\n     characters.\n-    \n+\n     $(package)_dependencies:\n     Names of any other packages that this one depends on.\n-    \n+\n     $(package)_patches:\n     Filenames of any patches needed to build the package\n \n@@ -134,7 +134,7 @@ the user. Other variables may be defined as needed.\n     Stage the build results. If undefined, does nothing.\n \n   The following variables are available for each recipe:\n-    \n+\n     $(1)_staging_dir: package's destination sysroot path\n     $(1)_staging_prefix_dir: prefix path inside of the package's staging dir\n     $(1)_extract_dir: path to the package's extracted sources"
      },
      {
        "sha": "667fde5271a745e63c88f68e860fc7ac6126e1f2",
        "filename": "depends/packages/packages.mk",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/depends/packages/packages.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/depends/packages/packages.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/packages.mk?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -1,7 +1,9 @@\n packages:=boost openssl libevent\n \n-qt_native_packages = native_protobuf\n-qt_packages = qrencode protobuf zlib\n+protobuf_native_packages = native_protobuf\n+protobuf_packages = protobuf\n+\n+qt_packages = qrencode zlib\n \n qt_linux_packages:=qt expat libxcb xcb_proto libXau xproto freetype fontconfig\n "
      },
      {
        "sha": "56045ade5043a2b03fc28d8968221fc13eaad778",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -1,20 +1,20 @@\n PACKAGE=qt\n-$(package)_version=5.9.7\n+$(package)_version=5.9.8\n $(package)_download_path=https://download.qt.io/official_releases/qt/5.9/$($(package)_version)/submodules\n $(package)_suffix=opensource-src-$($(package)_version).tar.xz\n $(package)_file_name=qtbase-$($(package)_suffix)\n-$(package)_sha256_hash=36dd9574f006eaa1e5af780e4b33d11fe39d09fd7c12f3b9d83294174bd28f00\n+$(package)_sha256_hash=9b9dec1f67df1f94bce2955c5604de992d529dde72050239154c56352da0907d\n $(package)_dependencies=openssl zlib\n $(package)_linux_dependencies=freetype fontconfig libxcb\n $(package)_build_subdir=qtbase\n $(package)_qt_libs=corelib network widgets gui plugins testlib\n $(package)_patches=fix_qt_pkgconfig.patch mac-qmake.conf fix_configure_mac.patch fix_no_printer.patch fix_rcc_determinism.patch fix_riscv64_arch.patch xkb-default.patch no-xlib.patch\n \n $(package)_qttranslations_file_name=qttranslations-$($(package)_suffix)\n-$(package)_qttranslations_sha256_hash=b36da7d93c3ab6fca56b32053bb73bc619c8b192bb89b74e3bcde2705f1c2a14\n+$(package)_qttranslations_sha256_hash=fb5a47799754af73d3bf501fe513342cfe2fc37f64e80df5533f6110e804220c\n \n $(package)_qttools_file_name=qttools-$($(package)_suffix)\n-$(package)_qttools_sha256_hash=d62e0f70d99645d6704dbb8976fb2222443061743689943d40970c52c49367a1\n+$(package)_qttools_sha256_hash=a97556eb7b2f30252cdd8a598c396cfce2b2f79d2bae883af6d3b26a2cdcc63c\n \n $(package)_extra_sources  = $($(package)_qttranslations_file_name)\n $(package)_extra_sources += $($(package)_qttools_file_name)\n@@ -156,9 +156,7 @@ define $(package)_preprocess_cmds\n   sed -i.old \"s|updateqm.commands = \\$$$$\\$$$$LRELEASE|updateqm.commands = $($(package)_extract_dir)/qttools/bin/lrelease|\" qttranslations/translations/translations.pro && \\\n   sed -i.old \"/updateqm.depends =/d\" qttranslations/translations/translations.pro && \\\n   sed -i.old \"s/src_plugins.depends = src_sql src_network/src_plugins.depends = src_network/\" qtbase/src/src.pro && \\\n-  sed -i.old \"s|X11/extensions/XIproto.h|X11/X.h|\" qtbase/src/plugins/platforms/xcb/qxcbxsettings.cpp && \\\n   sed -i.old -e 's/if \\[ \"$$$$XPLATFORM_MAC\" = \"yes\" \\]; then xspecvals=$$$$(macSDKify/if \\[ \"$$$$BUILD_ON_MAC\" = \"yes\" \\]; then xspecvals=$$$$(macSDKify/' -e 's|/bin/pwd|pwd|' qtbase/configure && \\\n-  sed -i.old 's/CGEventCreateMouseEvent(0, kCGEventMouseMoved, pos, 0)/CGEventCreateMouseEvent(0, kCGEventMouseMoved, pos, kCGMouseButtonLeft)/' qtbase/src/plugins/platforms/cocoa/qcocoacursor.mm && \\\n   mkdir -p qtbase/mkspecs/macx-clang-linux &&\\\n   cp -f qtbase/mkspecs/macx-clang/Info.plist.lib qtbase/mkspecs/macx-clang-linux/ &&\\\n   cp -f qtbase/mkspecs/macx-clang/Info.plist.app qtbase/mkspecs/macx-clang-linux/ &&\\"
      },
      {
        "sha": "168f85e65ee9ae19be0768a17c6e7e3d2b44989d",
        "filename": "depends/packages/zlib.mk",
        "status": "modified",
        "additions": 12,
        "deletions": 9,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/depends/packages/zlib.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/depends/packages/zlib.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/zlib.mk?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -5,23 +5,26 @@ $(package)_file_name=$(package)-$($(package)_version).tar.gz\n $(package)_sha256_hash=c3e5e9fdd5004dcb542feda5ee4f0ff0744628baf8ed2dd5d66f8ca1197cb1a1\n \n define $(package)_set_vars\n-$(package)_build_opts= CC=\"$($(package)_cc)\"\n-$(package)_build_opts+=CFLAGS=\"$($(package)_cflags) $($(package)_cppflags) -fPIC\"\n-$(package)_build_opts+=RANLIB=\"$($(package)_ranlib)\"\n-$(package)_build_opts+=AR=\"$($(package)_ar)\"\n-$(package)_build_opts_darwin+=AR=\"$($(package)_libtool)\"\n-$(package)_build_opts_darwin+=ARFLAGS=\"-o\"\n+$(package)_config_opts= CC=\"$($(package)_cc)\"\n+$(package)_config_opts+=CFLAGS=\"$($(package)_cflags) $($(package)_cppflags) -fPIC\"\n+$(package)_config_opts+=RANLIB=\"$($(package)_ranlib)\"\n+$(package)_config_opts+=AR=\"$($(package)_ar)\"\n+$(package)_config_opts_darwin+=AR=\"$($(package)_libtool)\"\n+$(package)_config_opts_darwin+=ARFLAGS=\"-o\"\n endef\n \n+# zlib has its own custom configure script that takes in options like CC,\n+# CFLAGS, RANLIB, AR, and ARFLAGS from the environment rather than from\n+# command-line arguments.\n define $(package)_config_cmds\n-  ./configure --static --prefix=$(host_prefix)\n+  env $($(package)_config_opts) ./configure --static --prefix=$(host_prefix)\n endef\n \n define $(package)_build_cmds\n-  $(MAKE) $($(package)_build_opts) libz.a\n+  $(MAKE) libz.a\n endef\n \n define $(package)_stage_cmds\n-  $(MAKE) DESTDIR=$($(package)_staging_dir) install $($(package)_build_opts)\n+  $(MAKE) DESTDIR=$($(package)_staging_dir) install\n endef\n "
      },
      {
        "sha": "3b8b0db1629477200875c84fedebb6163750669f",
        "filename": "doc/REST-interface.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/doc/REST-interface.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/doc/REST-interface.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/REST-interface.md?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -81,7 +81,7 @@ $ curl localhost:18332/rest/getutxos/checkmempool/b2cdfd7b89def827ff8af7cd9bff76\n       {\n          \"txvers\" : 1\n          \"height\" : 2147483647,\n-         \"value\" : 8.8687,\t\t \n+         \"value\" : 8.8687,\n          \"scriptPubKey\" : {\n             \"asm\" : \"OP_DUP OP_HASH160 1c7cebb529b86a04c683dfa87be49de35bcf589e OP_EQUALVERIFY OP_CHECKSIG\",\n             \"hex\" : \"76a9141c7cebb529b86a04c683dfa87be49de35bcf589e88ac\","
      },
      {
        "sha": "f4a8edec75c5cf9a9bf04d010e5476698856d15c",
        "filename": "doc/bitcoin-conf.md",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/doc/bitcoin-conf.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/doc/bitcoin-conf.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bitcoin-conf.md?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -50,3 +50,13 @@ rpcport=4000\n The configuration file is not automatically created; you can create it using your favorite text editor. By default, the configuration file name is `bitcoin.conf` and it is located in the Bitcoin data directory, but both the Bitcoin data directory and the configuration file path may be changed using the `-datadir` and `-conf` command-line options.\n \n The `includeconf=<file>` option in the `bitcoin.conf` file can be used to include additional configuration files.\n+\n+### Default configuration file locations\n+\n+Operating System | Data Directory | Example Path\n+-- | -- | --\n+Windows | `%APPDATA%\\Bitcoin\\` | `C:\\Users\\username\\AppData\\Roaming\\Bitcoin\\bitcoin.conf`\n+Linux | `$HOME/.bitcoin/` | `/home/username/.bitcoin/bitcoin.conf`\n+macOS | `$HOME/Library/Application Support/Bitcoin/` | `/Users/username/Library/Application Support/Bitcoin/bitcoin.conf`\n+\n+You can find an example bitcoin.conf file in [share/examples/bitcoin.conf](../share/examples/bitcoin.conf)."
      },
      {
        "sha": "9942449bf61d5f3ed819b5e73b8c12a5020242f1",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -19,7 +19,7 @@ Then install [Homebrew](https://brew.sh).\n \n ## Dependencies\n ```shell\n-brew install automake berkeley-db4 libtool boost miniupnpc openssl pkg-config protobuf python qt libevent qrencode\n+brew install automake berkeley-db4 libtool boost miniupnpc openssl pkg-config python qt libevent qrencode\n ```\n \n See [dependencies.md](dependencies.md) for a complete overview."
      },
      {
        "sha": "069c983e6ef618b322ead2dbd813fccb288a2fe2",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 11,
        "deletions": 3,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -44,7 +44,7 @@ Optional dependencies:\n  miniupnpc   | UPnP Support     | Firewall-jumping support\n  libdb4.8    | Berkeley DB      | Wallet storage (only needed when wallet enabled)\n  qt          | GUI              | GUI toolkit (only needed when GUI enabled)\n- protobuf    | Payments in GUI  | Data interchange format used for payment protocol (only needed when GUI enabled)\n+ protobuf    | Payments in GUI  | Data interchange format used for payment protocol (only needed when BIP70 enabled)\n  libqrencode | QR codes in GUI  | Optional for generating QR codes (only needed when GUI enabled)\n  univalue    | Utility          | JSON parsing and encoding (bundled version will be used unless --with-system-univalue passed to configure)\n  libzmq3     | ZMQ notification | Optional, allows generating ZMQ notifications (requires ZMQ version >= 4.0.0)\n@@ -112,12 +112,16 @@ To build without GUI pass `--without-gui`.\n \n To build with Qt 5 you need the following:\n \n-    sudo apt-get install libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev qttools5-dev-tools libprotobuf-dev protobuf-compiler\n+    sudo apt-get install libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev qttools5-dev-tools\n \n libqrencode (optional) can be installed with:\n \n     sudo apt-get install libqrencode-dev\n \n+protobuf (optional) can be installed with:\n+\n+    sudo apt-get install libprotobuf-dev protobuf-compiler\n+\n Once these are installed, they will be found by configure and a bitcoin-qt executable will be\n built by default.\n \n@@ -140,12 +144,16 @@ ZMQ dependencies (provides ZMQ API):\n \n To build with Qt 5 you need the following:\n \n-    sudo dnf install qt5-qttools-devel qt5-qtbase-devel protobuf-devel\n+    sudo dnf install qt5-qttools-devel qt5-qtbase-devel\n \n libqrencode (optional) can be installed with:\n \n     sudo dnf install qrencode-devel\n \n+protobuf (optional) can be installed with:\n+\n+    sudo dnf install protobuf-devel\n+\n Notes\n -----\n The release is built with GCC and then \"strip bitcoind\" to strip the debug"
      },
      {
        "sha": "e5b4084d999487c68b17ed5452e51069fb9ad405",
        "filename": "doc/dependencies.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/doc/dependencies.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/doc/dependencies.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dependencies.md?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -35,7 +35,7 @@ Some dependencies are not needed in all configurations. The following are some f\n #### Options passed to `./configure`\n * MiniUPnPc is not needed with  `--with-miniupnpc=no`.\n * Berkeley DB is not needed with `--disable-wallet`.\n-* protobuf is not needed with `--disable-bip70`.\n+* protobuf is only needed with `--enable-bip70`.\n * Qt is not needed with `--without-gui`.\n * If the qrencode dependency is absent, QR support won't be added. To force an error when that happens, pass `--with-qrencode`.\n * ZeroMQ is needed only with the `--with-zmq` option."
      },
      {
        "sha": "561f623cd55e5f2439d10e7ea05444856331e515",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 2,
        "deletions": 16,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -27,7 +27,7 @@ Developer Notes\n     - [General C++](#general-c)\n     - [C++ data structures](#c-data-structures)\n     - [Strings and formatting](#strings-and-formatting)\n-    - [Variable names](#variable-names)\n+    - [Shadowing](#shadowing)\n     - [Threads and synchronization](#threads-and-synchronization)\n     - [Scripts](#scripts)\n         - [Shebang](#shebang)\n@@ -613,27 +613,13 @@ Strings and formatting\n \n   - *Rationale*: Bitcoin Core uses tinyformat, which is type safe. Leave them out to avoid confusion.\n \n-Variable names\n+Shadowing\n --------------\n \n Although the shadowing warning (`-Wshadow`) is not enabled by default (it prevents issues arising\n from using a different variable with the same name),\n please name variables so that their names do not shadow variables defined in the source code.\n \n-E.g. in member initializers, prepend `_` to the argument name shadowing the\n-member name:\n-\n-```c++\n-class AddressBookPage\n-{\n-    Mode m_mode;\n-}\n-\n-AddressBookPage::AddressBookPage(Mode _mode)\n-    : m_mode(_mode)\n-...\n-```\n-\n When using nested cycles, do not name the inner cycle variable the same as in\n the upper cycle, etc.\n "
      },
      {
        "sha": "0b327aab581a5a8fc6f018c722cc4758793b1180",
        "filename": "doc/init.md",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/doc/init.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/doc/init.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/init.md?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -53,17 +53,17 @@ Paths\n \n All three configurations assume several paths that might need to be adjusted.\n \n-Binary:              `/usr/bin/bitcoind`  \n-Configuration file:  `/etc/bitcoin/bitcoin.conf`  \n-Data directory:      `/var/lib/bitcoind`  \n+Binary:              `/usr/bin/bitcoind`\n+Configuration file:  `/etc/bitcoin/bitcoin.conf`\n+Data directory:      `/var/lib/bitcoind`\n PID file:            `/var/run/bitcoind/bitcoind.pid` (OpenRC and Upstart) or `/run/bitcoind/bitcoind.pid` (systemd)\n-Lock file:           `/var/lock/subsys/bitcoind` (CentOS)  \n+Lock file:           `/var/lock/subsys/bitcoind` (CentOS)\n \n-The configuration file, PID directory (if applicable) and data directory\n-should all be owned by the bitcoin user and group.  It is advised for security\n-reasons to make the configuration file and data directory only readable by the\n-bitcoin user and group.  Access to bitcoin-cli and other bitcoind rpc clients\n-can then be controlled by group membership.\n+The PID directory (if applicable) and data directory should both be owned by the\n+bitcoin user and group. It is advised for security reasons to make the\n+configuration file and data directory only readable by the bitcoin user and\n+group. Access to bitcoin-cli and other bitcoind rpc clients can then be\n+controlled by group membership.\n \n NOTE: When using the systemd .service file, the creation of the aforementioned\n directories and the setting of their permissions is automatically handled by\n@@ -83,10 +83,10 @@ OpenRC).\n \n ### macOS\n \n-Binary:              `/usr/local/bin/bitcoind`  \n-Configuration file:  `~/Library/Application Support/Bitcoin/bitcoin.conf`  \n-Data directory:      `~/Library/Application Support/Bitcoin`  \n-Lock file:           `~/Library/Application Support/Bitcoin/.lock`  \n+Binary:              `/usr/local/bin/bitcoind`\n+Configuration file:  `~/Library/Application Support/Bitcoin/bitcoin.conf`\n+Data directory:      `~/Library/Application Support/Bitcoin`\n+Lock file:           `~/Library/Application Support/Bitcoin/.lock`\n \n Installing Service Configuration\n -----------------------------------"
      },
      {
        "sha": "3d9b1cc903fbf75e7362e9e69c7ddc8da7d2af1e",
        "filename": "doc/release-notes-15584.md",
        "status": "added",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/doc/release-notes-15584.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/doc/release-notes-15584.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-15584.md?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -0,0 +1,4 @@\n+GUI Changes\n+-----------\n+- In 0.18.0 a `./configure` flag was introduced to allow disabling BIP70 support in the GUI (support was enabled by default). In 0.19.0 this flag is now __disabled__ by default.\n+- If you want compile Bitcoin Core with BIP70 support in the GUI, you can pass `--enable-bip70` to `./configure`.\n\\ No newline at end of file"
      },
      {
        "sha": "2567ebea4027076ff6d082db0c6b651532aa2e04",
        "filename": "doc/release-notes-16185.md",
        "status": "added",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/doc/release-notes-16185.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/doc/release-notes-16185.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-16185.md?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -0,0 +1,6 @@\n+RPC changes\n+-----------\n+The `gettransaction` RPC now accepts a third (boolean) argument `verbose`. If\n+set to `true`, a new `decoded` field will be added to the response containing\n+the decoded transaction. This field is equivalent to RPC `decoderawtransaction`,\n+or RPC `getrawtransaction` when `verbose` is passed."
      },
      {
        "sha": "9aa9cf36f92b842a0322c90add450f3cee615b9d",
        "filename": "doc/release-notes-16512.md",
        "status": "added",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/doc/release-notes-16512.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/doc/release-notes-16512.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-16512.md?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -0,0 +1,4 @@\n+RPC changes\n+-----------\n+The RPC `joinpsbts` will shuffle the order of the inputs and outputs of the resulting joined psbt.\n+Previously inputs and outputs were added in the order that the PSBTs were provided which makes correlating inputs to outputs extremely easy."
      },
      {
        "sha": "7acf1dcf9729c78c9f07822c7da1d93ba32c169e",
        "filename": "doc/release-notes-16695.md",
        "status": "added",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/doc/release-notes-16695.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/doc/release-notes-16695.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-16695.md?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -0,0 +1,5 @@\n+Updated RPCs\n+------------\n+\n+- The `getchaintxstats` RPC now returns the additional key of\n+  `window_final_block_height`."
      },
      {
        "sha": "c42b7a580312ed0febc322ce7120bf25dcf2ee8a",
        "filename": "doc/release-notes-16787.md",
        "status": "added",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/doc/release-notes-16787.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/doc/release-notes-16787.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-16787.md?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -0,0 +1,3 @@\n+RPC changes\n+-----------\n+The `getnetworkinfo` and `getpeerinfo` commands now contain a new field with decoded network service flags."
      },
      {
        "sha": "2c54e32f8455a57928e20278abe5bdece76b7773",
        "filename": "doc/tor.md",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/doc/tor.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/doc/tor.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/tor.md?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -114,7 +114,10 @@ preconfigured and the creation of a hidden service is automatic. If permission p\n are seen with `-debug=tor` they can be resolved by adding both the user running Tor and\n the user running bitcoind to the same group and setting permissions appropriately. On\n Debian-based systems the user running bitcoind can be added to the debian-tor group,\n-which has the appropriate permissions.\n+which has the appropriate permissions. Before starting bitcoind you will need to re-login\n+to allow debian-tor group to be applied. Otherwise you will see the following notice: \"tor:\n+Authentication cookie /run/tor/control.authcookie could not be opened (check permissions)\"\n+on debug.log.\n \n An alternative authentication method is the use\n of the `-torpassword=password` option. The `password` is the clear text form that"
      },
      {
        "sha": "0e9245250f0dc734b9d59192150fb50ebd45076a",
        "filename": "doc/translation_process.md",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/doc/translation_process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/doc/translation_process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/translation_process.md?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -65,13 +65,13 @@ username = USERNAME\n The Transifex Bitcoin project config file is included as part of the repo. It can be found at `.tx/config`, however you shouldn\u2019t need to change anything.\n \n ### Synchronising translations\n-To assist in updating translations, we have created a script to help.\n+To assist in updating translations, a helper script is available in the [maintainer-tools repo](https://github.com/bitcoin-core/bitcoin-maintainer-tools).\n \n-1. `python contrib/devtools/update-translations.py`\n+1. `python3 ../bitcoin-maintainer-tools/update-translations.py`\n 2. `git add` new translations from `src/qt/locale/`\n 3. Update `src/qt/bitcoin_locale.qrc` manually or via\n ```bash\n-git ls-files src/qt/locale/*ts|xargs -n1 basename|sed 's/\\(bitcoin_\\(.*\\)\\).ts/<file alias=\"\\2\">locale\\/\\1.qm<\\/file>/'\n+git ls-files src/qt/locale/*ts|xargs -n1 basename|sed 's/\\(bitcoin_\\(.*\\)\\).ts/        <file alias=\"\\2\">locale\\/\\1.qm<\\/file>/'\n ```\n 4. Update `src/Makefile.qt.include` manually or via\n ```bash"
      },
      {
        "sha": "a309abd0cc53ad7dbfb4626e9a15405658d417a4",
        "filename": "doc/zmq.md",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/doc/zmq.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/doc/zmq.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/zmq.md?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -111,7 +111,9 @@ using other means such as firewalling.\n \n Note that when the block chain tip changes, a reorganisation may occur\n and just the tip will be notified. It is up to the subscriber to\n-retrieve the chain from the last known block to the new tip.\n+retrieve the chain from the last known block to the new tip. Also note\n+that no notification occurs if the tip was in the active chain - this\n+is the case after calling invalidateblock RPC.\n \n There are several possibilities that ZMQ notification can get lost\n during transmission depending on the communication type you are"
      },
      {
        "sha": "96fb6658a01bb84ba743270c7d0886109c80bf38",
        "filename": "share/examples/bitcoin.conf",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/share/examples/bitcoin.conf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/share/examples/bitcoin.conf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/examples/bitcoin.conf?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -1,7 +1,7 @@\n ##\n ## bitcoin.conf configuration file. Lines beginning with # are comments.\n ##\n- \n+\n # Network-related settings:\n \n # Note that if you use testnet or regtest, particularly with the options\n@@ -97,7 +97,7 @@\n # rpcauth=bob:b2dd077cb54591a2f3139e69a897ac$4e71f08d48b4347cf8eff3815c0e25ae2e9a4340474079f55705f40574f4ec99\n \n # How many seconds bitcoin will wait for a complete RPC HTTP request.\n-# after the HTTP connection is established. \n+# after the HTTP connection is established.\n #rpcclienttimeout=30\n \n # By default, only RPC connections from localhost are allowed.\n@@ -108,7 +108,7 @@\n # because the rpcpassword is transmitted over the network unencrypted.\n \n # server=1 tells Bitcoin-Qt to accept JSON-RPC commands.\n-# it is also read by bitcoind to determine if RPC should be enabled \n+# it is also read by bitcoind to determine if RPC should be enabled\n #rpcallowip=10.1.1.34/255.255.255.0\n #rpcallowip=1.2.3.4/24\n #rpcallowip=2001:db8:85a3:0:0:8a2e:370:7334/96\n@@ -139,11 +139,11 @@\n # both prior transactions and several dozen future transactions.\n #keypool=100\n \n-# Enable pruning to reduce storage requirements by deleting old blocks. \n+# Enable pruning to reduce storage requirements by deleting old blocks.\n # This mode is incompatible with -txindex and -rescan.\n # 0 = default (no pruning).\n # 1 = allows manual pruning via RPC.\n-# >=550 = target to stay under in MiB. \n+# >=550 = target to stay under in MiB.\n #prune=550\n \n # User interface options"
      },
      {
        "sha": "477985bb330aa36ee9ac9abe0379a94458ab68dc",
        "filename": "share/qt/Info.plist.in",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/share/qt/Info.plist.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/share/qt/Info.plist.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/qt/Info.plist.in?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -30,7 +30,7 @@\n \n   <key>CFBundleExecutable</key>\n   <string>Bitcoin-Qt</string>\n-  \n+\n   <key>CFBundleName</key>\n   <string>Bitcoin-Qt</string>\n \n@@ -99,7 +99,7 @@\n \n   <key>NSRequiresAquaSystemAppearance</key>\n     <string>True</string>\n-  \n+\n   <key>LSApplicationCategoryType</key>\n     <string>public.app-category.finance</string>\n </dict>"
      },
      {
        "sha": "e9aa1f2b737dde5e7359192e56670a146b127238",
        "filename": "share/setup.nsi.in",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/share/setup.nsi.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/share/setup.nsi.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/setup.nsi.in?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -101,7 +101,7 @@ Section -post SEC0001\n     WriteRegStr HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\$(^Name)\" DisplayVersion \"@PACKAGE_VERSION@\"\n     WriteRegStr HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\$(^Name)\" Publisher \"${COMPANY}\"\n     WriteRegStr HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\$(^Name)\" URLInfoAbout \"${URL}\"\n-    WriteRegStr HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\$(^Name)\" DisplayIcon $INSTDIR\\uninstall.exe\n+    WriteRegStr HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\$(^Name)\" DisplayIcon $INSTDIR\\bitcoin-qt.exe\n     WriteRegStr HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\$(^Name)\" UninstallString $INSTDIR\\uninstall.exe\n     WriteRegDWORD HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\$(^Name)\" NoModify 1\n     WriteRegDWORD HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\$(^Name)\" NoRepair 1"
      },
      {
        "sha": "1ef62a656d40d69a36137ea8b8f7b3fd9be8f45f",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -156,6 +156,7 @@ BITCOIN_CORE_H = \\\n   netbase.h \\\n   netmessagemaker.h \\\n   node/coin.h \\\n+  node/coinstats.h \\\n   node/psbt.h \\\n   node/transaction.h \\\n   noui.h \\\n@@ -278,6 +279,7 @@ libbitcoin_server_a_SOURCES = \\\n   net.cpp \\\n   net_processing.cpp \\\n   node/coin.cpp \\\n+  node/coinstats.cpp \\\n   node/psbt.cpp \\\n   node/transaction.cpp \\\n   noui.cpp \\\n@@ -482,6 +484,7 @@ libbitcoin_util_a_SOURCES = \\\n   support/lockedpool.cpp \\\n   chainparamsbase.cpp \\\n   clientversion.cpp \\\n+  compat/glibc_sanity_fdelt.cpp \\\n   compat/glibc_sanity.cpp \\\n   compat/glibcxx_sanity.cpp \\\n   compat/strnlen.cpp \\"
      },
      {
        "sha": "754012241874128661ffa2a1a8ed130107bd90e2",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -98,6 +98,7 @@ QT_FORMS_UI = \\\n   qt/forms/addressbookpage.ui \\\n   qt/forms/askpassphrasedialog.ui \\\n   qt/forms/coincontroldialog.ui \\\n+  qt/forms/createwalletdialog.ui \\\n   qt/forms/editaddressdialog.ui \\\n   qt/forms/helpmessagedialog.ui \\\n   qt/forms/intro.ui \\\n@@ -117,6 +118,7 @@ QT_MOC_CPP = \\\n   qt/moc_addressbookpage.cpp \\\n   qt/moc_addresstablemodel.cpp \\\n   qt/moc_askpassphrasedialog.cpp \\\n+  qt/moc_createwalletdialog.cpp \\\n   qt/moc_bantablemodel.cpp \\\n   qt/moc_bitcoinaddressvalidator.cpp \\\n   qt/moc_bitcoinamountfield.cpp \\\n@@ -202,6 +204,7 @@ BITCOIN_QT_H = \\\n   qt/clientmodel.h \\\n   qt/coincontroldialog.h \\\n   qt/coincontroltreewidget.h \\\n+  qt/createwalletdialog.h \\\n   qt/csvmodelwriter.h \\\n   qt/editaddressdialog.h \\\n   qt/guiconstants.h \\\n@@ -328,6 +331,7 @@ BITCOIN_QT_WALLET_CPP = \\\n   qt/askpassphrasedialog.cpp \\\n   qt/coincontroldialog.cpp \\\n   qt/coincontroltreewidget.cpp \\\n+  qt/createwalletdialog.cpp \\\n   qt/editaddressdialog.cpp \\\n   qt/openuridialog.cpp \\\n   qt/overviewpage.cpp \\"
      },
      {
        "sha": "4c966350b4ce31f1bae267fb1e58a64dc95cd3fe",
        "filename": "src/bech32.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/bech32.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/bech32.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bech32.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -4,6 +4,8 @@\n \n #include <bech32.h>\n \n+#include <assert.h>\n+\n namespace\n {\n \n@@ -58,7 +60,7 @@ uint32_t PolyMod(const data& v)\n \n     // During the course of the loop below, `c` contains the bitpacked coefficients of the\n     // polynomial constructed from just the values of v that were processed so far, mod g(x). In\n-    // the above example, `c` initially corresponds to 1 mod (x), and after processing 2 inputs of\n+    // the above example, `c` initially corresponds to 1 mod g(x), and after processing 2 inputs of\n     // v, it corresponds to x^2 + v0*x + v1 mod g(x). As 1 mod g(x) = 1, that is the starting value\n     // for `c`.\n     uint32_t c = 1;\n@@ -145,6 +147,10 @@ namespace bech32\n \n /** Encode a Bech32 string. */\n std::string Encode(const std::string& hrp, const data& values) {\n+    // First ensure that the HRP is all lowercase. BIP-173 requires an encoder\n+    // to return a lowercase Bech32 string, but if given an uppercase HRP, the\n+    // result will always be invalid.\n+    for (const char& c : hrp) assert(c < 'A' || c > 'Z');\n     data checksum = CreateChecksum(hrp, values);\n     data combined = Cat(values, checksum);\n     std::string ret = hrp + '1';"
      },
      {
        "sha": "fb39cd352b405549a0ccb9744a8283e484768d58",
        "filename": "src/bech32.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/bech32.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/bech32.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bech32.h?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -19,7 +19,7 @@\n namespace bech32\n {\n \n-/** Encode a Bech32 string. Returns the empty string in case of failure. */\n+/** Encode a Bech32 string. If hrp contains uppercase characters, this will cause an assertion error. */\n std::string Encode(const std::string& hrp, const std::vector<uint8_t>& values);\n \n /** Decode a Bech32 string. Returns (hrp, data). Empty hrp means failure. */"
      },
      {
        "sha": "a6756fcce786954a662b2840386493cc8bf43062",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -133,7 +133,7 @@ static int AppInitRPC(int argc, char* argv[])\n         tfm::format(std::cerr, \"Error reading configuration file: %s\\n\", error.c_str());\n         return EXIT_FAILURE;\n     }\n-    // Check for -testnet or -regtest parameter (BaseParams() calls are only valid after this clause)\n+    // Check for -chain, -testnet or -regtest parameter (BaseParams() calls are only valid after this clause)\n     try {\n         SelectBaseParams(gArgs.GetChainName());\n     } catch (const std::exception& e) {"
      },
      {
        "sha": "88219f0d0f1a3034362707d22c162f7cd90efe07",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -88,7 +88,7 @@ static int AppInitRawTx(int argc, char* argv[])\n         return EXIT_FAILURE;\n     }\n \n-    // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n+    // Check for -chain, -testnet or -regtest parameter (Params() calls are only valid after this clause)\n     try {\n         SelectParams(gArgs.GetChainName());\n     } catch (const std::exception& e) {"
      },
      {
        "sha": "eb7f0098ecf238ceca8f08dd703de087702aaa72",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -27,7 +27,7 @@ static void SetupWalletToolArgs()\n     gArgs.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-wallet=<wallet-name>\", \"Specify wallet name\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-debug=<category>\", \"Output debugging information (default: 0).\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -debug is true, 0 otherwise.\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -debug is true, 0 otherwise).\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n \n     gArgs.AddArg(\"info\", \"Get wallet info\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n     gArgs.AddArg(\"create\", \"Create new wallet file\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);"
      },
      {
        "sha": "83de684a2bff78cdb1563586804a99d54ae1503a",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -77,15 +77,15 @@ static bool AppInit(int argc, char* argv[])\n \n     // Process help and version before taking care about datadir\n     if (HelpRequested(gArgs) || gArgs.IsArgSet(\"-version\")) {\n-        std::string strUsage = PACKAGE_NAME \" Daemon version \" + FormatFullVersion() + \"\\n\";\n+        std::string strUsage = PACKAGE_NAME \" version \" + FormatFullVersion() + \"\\n\";\n \n         if (gArgs.IsArgSet(\"-version\"))\n         {\n             strUsage += FormatParagraph(LicenseInfo()) + \"\\n\";\n         }\n         else\n         {\n-            strUsage += \"\\nUsage:  bitcoind [options]                     Start \" PACKAGE_NAME \" Daemon\\n\";\n+            strUsage += \"\\nUsage:  bitcoind [options]                     Start \" PACKAGE_NAME \"\\n\";\n             strUsage += \"\\n\" + gArgs.GetHelpMessage();\n         }\n \n@@ -101,7 +101,7 @@ static bool AppInit(int argc, char* argv[])\n         if (!gArgs.ReadConfigFiles(error, true)) {\n             return InitError(strprintf(\"Error reading configuration file: %s\\n\", error));\n         }\n-        // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n+        // Check for -chain, -testnet or -regtest parameter (Params() calls are only valid after this clause)\n         try {\n             SelectParams(gArgs.GetChainName());\n         } catch (const std::exception& e) {\n@@ -142,7 +142,7 @@ static bool AppInit(int argc, char* argv[])\n #pragma GCC diagnostic push\n #pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n #endif\n-            tfm::format(std::cout, PACKAGE_NAME \" daemon starting\\n\");\n+            tfm::format(std::cout, PACKAGE_NAME \" starting\\n\");\n \n             // Daemonize\n             if (daemon(1, 0)) { // don't chdir (1), do close FDs (0)"
      },
      {
        "sha": "1b67ebbe41b9049079c366ef1ec845c07d07f7a0",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -95,8 +95,8 @@ enum BlockStatus: uint32_t {\n     //! Unused.\n     BLOCK_VALID_UNKNOWN      =    0,\n \n-    //! Parsed, version ok, hash satisfies claimed PoW, 1 <= vtx count <= max, timestamp not in future\n-    BLOCK_VALID_HEADER       =    1,\n+    //! Reserved (was BLOCK_VALID_HEADER).\n+    BLOCK_VALID_RESERVED     =    1,\n \n     //! All parent headers found, difficulty matches, timestamp >= median previous, checkpoint. Implies all parents\n     //! are also at least TREE.\n@@ -117,7 +117,7 @@ enum BlockStatus: uint32_t {\n     BLOCK_VALID_SCRIPTS      =    5,\n \n     //! All validity bits.\n-    BLOCK_VALID_MASK         =   BLOCK_VALID_HEADER | BLOCK_VALID_TREE | BLOCK_VALID_TRANSACTIONS |\n+    BLOCK_VALID_MASK         =   BLOCK_VALID_RESERVED | BLOCK_VALID_TREE | BLOCK_VALID_TRANSACTIONS |\n                                  BLOCK_VALID_CHAIN | BLOCK_VALID_SCRIPTS,\n \n     BLOCK_HAVE_DATA          =    8, //!< full block available in blk*.dat"
      },
      {
        "sha": "4bb66c8d8b51251507eac51d6213297f78d7e54c",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -17,10 +17,11 @@ const std::string CBaseChainParams::REGTEST = \"regtest\";\n \n void SetupChainParamsBaseOptions()\n {\n+    gArgs.AddArg(\"-chain=<chain>\", \"Use the chain <chain> (default: main). Allowed values: main, test, regtest\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n     gArgs.AddArg(\"-regtest\", \"Enter regression test mode, which uses a special chain in which blocks can be solved instantly. \"\n-                                   \"This is intended for regression testing tools and app development.\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+                 \"This is intended for regression testing tools and app development. Equivalent to -chain=regtest.\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n     gArgs.AddArg(\"-segwitheight=<n>\", \"Set the activation height of segwit. -1 to disable. (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-testnet\", \"Use the test chain\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-testnet\", \"Use the test chain. Equivalent to -chain=test.\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n     gArgs.AddArg(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n }\n "
      },
      {
        "sha": "cc74f28899e914e592ff409b96b62873e8b5807f",
        "filename": "src/compat/glibc_sanity.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 17,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/compat/glibc_sanity.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/compat/glibc_sanity.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibc_sanity.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -9,7 +9,7 @@\n #include <cstddef>\n \n #if defined(HAVE_SYS_SELECT_H)\n-#include <sys/select.h>\n+bool sanity_test_fdelt();\n #endif\n \n extern \"C\" void* memcpy(void* a, const void* b, size_t c);\n@@ -41,21 +41,6 @@ bool sanity_test_memcpy()\n     }\n     return true;\n }\n-\n-#if defined(HAVE_SYS_SELECT_H)\n-// trigger: Call FD_SET to trigger __fdelt_chk. FORTIFY_SOURCE must be defined\n-//   as >0 and optimizations must be set to at least -O2.\n-// test: Add a file descriptor to an empty fd_set. Verify that it has been\n-//   correctly added.\n-bool sanity_test_fdelt()\n-{\n-    fd_set fds;\n-    FD_ZERO(&fds);\n-    FD_SET(0, &fds);\n-    return FD_ISSET(0, &fds);\n-}\n-#endif\n-\n } // namespace\n \n bool glibc_sanity_test()"
      },
      {
        "sha": "87140d0c714dc5c261d678a48ba329d2f68b8643",
        "filename": "src/compat/glibc_sanity_fdelt.cpp",
        "status": "added",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/compat/glibc_sanity_fdelt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/compat/glibc_sanity_fdelt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibc_sanity_fdelt.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -0,0 +1,26 @@\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#if defined(HAVE_SYS_SELECT_H)\n+#ifdef HAVE_CSTRING_DEPENDENT_FD_ZERO\n+#include <cstring>\n+#endif\n+#include <sys/select.h>\n+\n+// trigger: Call FD_SET to trigger __fdelt_chk. FORTIFY_SOURCE must be defined\n+//   as >0 and optimizations must be set to at least -O2.\n+// test: Add a file descriptor to an empty fd_set. Verify that it has been\n+//   correctly added.\n+bool sanity_test_fdelt()\n+{\n+    fd_set fds;\n+    FD_ZERO(&fds);\n+    FD_SET(0, &fds);\n+    return FD_ISSET(0, &fds);\n+}\n+#endif"
      },
      {
        "sha": "00ebbbd1ab7ff4e8d68b5f2fe813bc8d8b75adae",
        "filename": "src/consensus/tx_check.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/consensus/tx_check.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/consensus/tx_check.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_check.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -18,7 +18,7 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fChe\n     if (::GetSerializeSize(tx, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * WITNESS_SCALE_FACTOR > MAX_BLOCK_WEIGHT)\n         return state.Invalid(ValidationInvalidReason::CONSENSUS, false, REJECT_INVALID, \"bad-txns-oversize\");\n \n-    // Check for negative or overflow output values\n+    // Check for negative or overflow output values (see CVE-2010-5139)\n     CAmount nValueOut = 0;\n     for (const auto& txout : tx.vout)\n     {"
      },
      {
        "sha": "7ce2a4983647d3da98fdfa7b2fff5388adfdb4bf",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -144,7 +144,7 @@ void ScriptToUniv(const CScript& script, UniValue& out, bool include_address)\n     out.pushKV(\"type\", GetTxnOutputType(type));\n \n     CTxDestination address;\n-    if (include_address && ExtractDestination(script, address)) {\n+    if (include_address && ExtractDestination(script, address) && type != TX_PUBKEY) {\n         out.pushKV(\"address\", EncodeDestination(address));\n     }\n }\n@@ -160,7 +160,7 @@ void ScriptPubKeyToUniv(const CScript& scriptPubKey,\n     if (fIncludeHex)\n         out.pushKV(\"hex\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));\n \n-    if (!ExtractDestinations(scriptPubKey, type, addresses, nRequired)) {\n+    if (!ExtractDestinations(scriptPubKey, type, addresses, nRequired) || type == TX_PUBKEY) {\n         out.pushKV(\"type\", GetTxnOutputType(type));\n         return;\n     }"
      },
      {
        "sha": "126e3479f37c6963b4aea1d1b6cb1dd0099c4e0c",
        "filename": "src/dummywallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/dummywallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/dummywallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dummywallet.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -5,8 +5,10 @@\n #include <stdio.h>\n #include <util/system.h>\n #include <walletinitinterface.h>\n+#include <support/allocators/secure.h>\n \n class CWallet;\n+enum class WalletCreationStatus;\n \n namespace interfaces {\n class Chain;\n@@ -74,6 +76,11 @@ std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string&\n     throw std::logic_error(\"Wallet function called in non-wallet build.\");\n }\n \n+WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::string& warning, std::shared_ptr<CWallet>& result)\n+{\n+    throw std::logic_error(\"Wallet function called in non-wallet build.\");\n+}\n+\n namespace interfaces {\n \n class Wallet;"
      },
      {
        "sha": "bb82130542deafbbbaa65c65f7fdda011de6568b",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 11,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -438,9 +438,17 @@ void SetupServerArgs()\n #else\n     hidden_args.emplace_back(\"-upnp\");\n #endif\n-    gArgs.AddArg(\"-whitebind=<addr>\", \"Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-whitelist=<IP address or network>\", \"Whitelist peers connecting from the given IP address (e.g. 1.2.3.4) or CIDR notated network (e.g. 1.2.3.0/24). Can be specified multiple times.\"\n-        \" Whitelisted peers cannot be DoS banned\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-whitebind=<[permissions@]addr>\", \"Bind to given address and whitelist peers connecting to it. \"\n+        \"Use [host]:port notation for IPv6. Allowed permissions are bloomfilter (allow requesting BIP37 filtered blocks and transactions), \"\n+        \"noban (do not ban for misbehavior), \"\n+        \"forcerelay (relay even non-standard transactions), \"\n+        \"relay (relay even in -blocksonly mode), \"\n+        \"and mempool (allow requesting BIP35 mempool contents). \"\n+        \"Specify multiple permissions separated by commas (default: noban,mempool,relay). Can be specified multiple times.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+\n+    gArgs.AddArg(\"-whitelist=<[permissions@]IP address or network>\", \"Whitelist peers connecting from the given IP address (e.g. 1.2.3.4) or \"\n+        \"CIDR notated network(e.g. 1.2.3.0/24). Uses same permissions as \"\n+        \"-whitebind. Can be specified multiple times.\" , ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n \n     g_wallet_init_interface.AddWalletOptions();\n \n@@ -510,8 +518,8 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-datacarriersize\", strprintf(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\", MAX_OP_RETURN_RELAY), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n     gArgs.AddArg(\"-minrelaytxfee=<amt>\", strprintf(\"Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)\",\n         CURRENCY_UNIT, FormatMoney(DEFAULT_MIN_RELAY_TX_FEE)), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n-    gArgs.AddArg(\"-whitelistforcerelay\", strprintf(\"Force relay of transactions from whitelisted inbound peers even if the transactions were already in the mempool or violate local relay policy (default: %d)\", DEFAULT_WHITELISTFORCERELAY), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n-    gArgs.AddArg(\"-whitelistrelay\", strprintf(\"Accept relayed transactions received from whitelisted inbound peers even when not relaying transactions (default: %d)\", DEFAULT_WHITELISTRELAY), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-whitelistforcerelay\", strprintf(\"Add 'forcerelay' permission to whitelisted inbound peers with default permissions. This will relay transactions even if the transactions were already in the mempool or violate local relay policy. (default: %d)\", DEFAULT_WHITELISTFORCERELAY), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-whitelistrelay\", strprintf(\"Add 'relay' permission to whitelisted inbound peers with default permissions. The will accept relayed transactions even when not relaying transactions (default: %d)\", DEFAULT_WHITELISTRELAY), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n \n \n     gArgs.AddArg(\"-blockmaxweight=<n>\", strprintf(\"Set maximum BIP141 block weight (default: %d)\", DEFAULT_BLOCK_MAX_WEIGHT), ArgsManager::ALLOW_ANY, OptionsCategory::BLOCK_CREATION);\n@@ -1052,7 +1060,7 @@ bool AppInitParameterInteraction()\n     {\n         CAmount n = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-incrementalrelayfee\", \"\"), n))\n-            return InitError(AmountErrMsg(\"incrementalrelayfee\", gArgs.GetArg(\"-incrementalrelayfee\", \"\")));\n+            return InitError(AmountErrMsg(\"incrementalrelayfee\", gArgs.GetArg(\"-incrementalrelayfee\", \"\")).translated);\n         incrementalRelayFee = CFeeRate(n);\n     }\n \n@@ -1096,9 +1104,9 @@ bool AppInitParameterInteraction()\n     if (gArgs.IsArgSet(\"-minrelaytxfee\")) {\n         CAmount n = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-minrelaytxfee\", \"\"), n)) {\n-            return InitError(AmountErrMsg(\"minrelaytxfee\", gArgs.GetArg(\"-minrelaytxfee\", \"\")));\n+            return InitError(AmountErrMsg(\"minrelaytxfee\", gArgs.GetArg(\"-minrelaytxfee\", \"\")).translated);\n         }\n-        // High fee check is done afterward in WalletParameterInteraction()\n+        // High fee check is done afterward in CWallet::CreateWalletFromFile()\n         ::minRelayTxFee = CFeeRate(n);\n     } else if (incrementalRelayFee > ::minRelayTxFee) {\n         // Allow only setting incrementalRelayFee to control both\n@@ -1112,7 +1120,7 @@ bool AppInitParameterInteraction()\n     {\n         CAmount n = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-blockmintxfee\", \"\"), n))\n-            return InitError(AmountErrMsg(\"blockmintxfee\", gArgs.GetArg(\"-blockmintxfee\", \"\")));\n+            return InitError(AmountErrMsg(\"blockmintxfee\", gArgs.GetArg(\"-blockmintxfee\", \"\")).translated);\n     }\n \n     // Feerate used to define dust.  Shouldn't be changed lightly as old\n@@ -1121,7 +1129,7 @@ bool AppInitParameterInteraction()\n     {\n         CAmount n = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-dustrelayfee\", \"\"), n))\n-            return InitError(AmountErrMsg(\"dustrelayfee\", gArgs.GetArg(\"-dustrelayfee\", \"\")));\n+            return InitError(AmountErrMsg(\"dustrelayfee\", gArgs.GetArg(\"-dustrelayfee\", \"\")).translated);\n         dustRelayFee = CFeeRate(n);\n     }\n \n@@ -1752,7 +1760,8 @@ bool AppInitMain(InitInterfaces& interfaces)\n     CConnman::Options connOptions;\n     connOptions.nLocalServices = nLocalServices;\n     connOptions.nMaxConnections = nMaxConnections;\n-    connOptions.nMaxOutbound = std::min(MAX_OUTBOUND_CONNECTIONS, connOptions.nMaxConnections);\n+    connOptions.m_max_outbound_full_relay = std::min(MAX_OUTBOUND_FULL_RELAY_CONNECTIONS, connOptions.nMaxConnections);\n+    connOptions.m_max_outbound_block_relay = std::min(MAX_BLOCKS_ONLY_CONNECTIONS, connOptions.nMaxConnections-connOptions.m_max_outbound_full_relay);\n     connOptions.nMaxAddnode = MAX_ADDNODE_CONNECTIONS;\n     connOptions.nMaxFeeler = 1;\n     connOptions.nBestHeight = chain_active_height;"
      },
      {
        "sha": "c80a8789fccbc844ee7909e90fc1fa74b6ceddf9",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -24,6 +24,7 @@\n #include <primitives/block.h>\n #include <rpc/server.h>\n #include <shutdown.h>\n+#include <support/allocators/secure.h>\n #include <sync.h>\n #include <txmempool.h>\n #include <ui_interface.h>\n@@ -43,6 +44,7 @@ fs::path GetWalletDir();\n std::vector<fs::path> ListWalletDir();\n std::vector<std::shared_ptr<CWallet>> GetWallets();\n std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, std::string& error, std::string& warning);\n+WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::string& warning, std::shared_ptr<CWallet>& result);\n \n namespace interfaces {\n \n@@ -60,6 +62,7 @@ class NodeImpl : public Node\n         return gArgs.ParseParameters(argc, argv, error);\n     }\n     bool readConfigFiles(std::string& error) override { return gArgs.ReadConfigFiles(error, true); }\n+    void forceSetArg(const std::string& arg, const std::string& value) override { gArgs.ForceSetArg(arg, value); }\n     bool softSetArg(const std::string& arg, const std::string& value) override { return gArgs.SoftSetArg(arg, value); }\n     bool softSetBoolArg(const std::string& arg, bool value) override { return gArgs.SoftSetBoolArg(arg, value); }\n     void selectParams(const std::string& network) override { SelectParams(network); }\n@@ -258,6 +261,13 @@ class NodeImpl : public Node\n     {\n         return MakeWallet(LoadWallet(*m_interfaces.chain, name, error, warning));\n     }\n+    WalletCreationStatus createWallet(const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::string& warning, std::unique_ptr<Wallet>& result) override\n+    {\n+        std::shared_ptr<CWallet> wallet;\n+        WalletCreationStatus status = CreateWallet(*m_interfaces.chain, passphrase, wallet_creation_flags, name, error, warning, wallet);\n+        result = MakeWallet(wallet);\n+        return status;\n+    }\n     std::unique_ptr<Handler> handleInitMessage(InitMessageFn fn) override\n     {\n         return MakeHandler(::uiInterface.InitMessage_connect(fn));"
      },
      {
        "sha": "2f4f396e72106c3b46c86c0466251deea9cec7d9",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -9,6 +9,7 @@\n #include <amount.h>     // For CAmount\n #include <net.h>        // For CConnman::NumConnections\n #include <netaddress.h> // For Network\n+#include <support/allocators/secure.h> // For SecureString\n \n #include <functional>\n #include <memory>\n@@ -27,6 +28,7 @@ class RPCTimerInterface;\n class UniValue;\n class proxyType;\n struct CNodeStateStats;\n+enum class WalletCreationStatus;\n \n namespace interfaces {\n class Handler;\n@@ -44,6 +46,9 @@ class Node\n     //! Set command line arguments.\n     virtual bool parseParameters(int argc, const char* const argv[], std::string& error) = 0;\n \n+    //! Set a command line argument\n+    virtual void forceSetArg(const std::string& arg, const std::string& value) = 0;\n+\n     //! Set a command line argument if it doesn't already have a value\n     virtual bool softSetArg(const std::string& arg, const std::string& value) = 0;\n \n@@ -200,6 +205,9 @@ class Node\n     //! with handleLoadWallet.\n     virtual std::unique_ptr<Wallet> loadWallet(const std::string& name, std::string& error, std::string& warning) = 0;\n \n+    //! Create a wallet from file\n+    virtual WalletCreationStatus createWallet(const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::string& warning, std::unique_ptr<Wallet>& result) = 0;\n+\n     //! Register handler for init messages.\n     using InitMessageFn = std::function<void(const std::string& message)>;\n     virtual std::unique_ptr<Handler> handleInitMessage(InitMessageFn fn) = 0;"
      },
      {
        "sha": "0c8d92eba502ab05233d91ce1177030d8057e9de",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -65,7 +65,7 @@ WalletTx MakeWalletTx(interfaces::Chain::Lock& locked_chain, CWallet& wallet, co\n WalletTxStatus MakeWalletTxStatus(interfaces::Chain::Lock& locked_chain, const CWalletTx& wtx)\n {\n     WalletTxStatus result;\n-    result.block_height = locked_chain.getBlockHeight(wtx.hashBlock).get_value_or(std::numeric_limits<int>::max());\n+    result.block_height = locked_chain.getBlockHeight(wtx.m_confirm.hashBlock).get_value_or(std::numeric_limits<int>::max());\n     result.blocks_to_maturity = wtx.GetBlocksToMaturity(locked_chain);\n     result.depth_in_main_chain = wtx.GetDepthInMainChain(locked_chain);\n     result.time_received = wtx.nTimeReceived;"
      },
      {
        "sha": "89f82aa3d250ff6f2706d339904943924d79527a",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 24,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -352,7 +352,7 @@ static CAddress GetBindAddress(SOCKET sock)\n     return addr_bind;\n }\n \n-CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure, bool manual_connection)\n+CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure, bool manual_connection, bool block_relay_only)\n {\n     if (pszDest == nullptr) {\n         if (IsLocal(addrConnect))\n@@ -442,7 +442,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n     NodeId id = GetNewNodeId();\n     uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n     CAddress addr_bind = GetBindAddress(hSocket);\n-    CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, addr_bind, pszDest ? pszDest : \"\", false);\n+    CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, addr_bind, pszDest ? pszDest : \"\", false, block_relay_only);\n     pnode->AddRef();\n \n     return pnode;\n@@ -499,9 +499,11 @@ void CNode::copyStats(CNodeStats &stats)\n     X(nServices);\n     X(addr);\n     X(addrBind);\n-    {\n-        LOCK(cs_filter);\n-        X(fRelayTxes);\n+    if (m_tx_relay != nullptr) {\n+        LOCK(m_tx_relay->cs_filter);\n+        stats.fRelayTxes = m_tx_relay->fRelayTxes;\n+    } else {\n+        stats.fRelayTxes = false;\n     }\n     X(nLastSend);\n     X(nLastRecv);\n@@ -528,9 +530,11 @@ void CNode::copyStats(CNodeStats &stats)\n     }\n     X(m_legacyWhitelisted);\n     X(m_permissionFlags);\n-    {\n-        LOCK(cs_feeFilter);\n-        X(minFeeFilter);\n+    if (m_tx_relay != nullptr) {\n+        LOCK(m_tx_relay->cs_feeFilter);\n+        stats.minFeeFilter = m_tx_relay->minFeeFilter;\n+    } else {\n+        stats.minFeeFilter = 0;\n     }\n \n     // It is common for nodes with good ping times to suddenly become lagged,\n@@ -818,11 +822,17 @@ bool CConnman::AttemptToEvictConnection()\n                 continue;\n             if (node->fDisconnect)\n                 continue;\n-            LOCK(node->cs_filter);\n+            bool peer_relay_txes = false;\n+            bool peer_filter_not_null = false;\n+            if (node->m_tx_relay != nullptr) {\n+                LOCK(node->m_tx_relay->cs_filter);\n+                peer_relay_txes = node->m_tx_relay->fRelayTxes;\n+                peer_filter_not_null = node->m_tx_relay->pfilter != nullptr;\n+            }\n             NodeEvictionCandidate candidate = {node->GetId(), node->nTimeConnected, node->nMinPingUsecTime,\n                                                node->nLastBlockTime, node->nLastTXTime,\n                                                HasAllDesirableServiceFlags(node->nServices),\n-                                               node->fRelayTxes, node->pfilter != nullptr, node->addr, node->nKeyedNetGroup,\n+                                               peer_relay_txes, peer_filter_not_null, node->addr, node->nKeyedNetGroup,\n                                                node->m_prefer_evict};\n             vEvictionCandidates.push_back(candidate);\n         }\n@@ -895,7 +905,7 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     SOCKET hSocket = accept(hListenSocket.socket, (struct sockaddr*)&sockaddr, &len);\n     CAddress addr;\n     int nInbound = 0;\n-    int nMaxInbound = nMaxConnections - (nMaxOutbound + nMaxFeeler);\n+    int nMaxInbound = nMaxConnections - m_max_outbound;\n \n     if (hSocket != INVALID_SOCKET) {\n         if (!addr.SetSockAddr((const struct sockaddr*)&sockaddr)) {\n@@ -1655,7 +1665,7 @@ int CConnman::GetExtraOutboundCount()\n             }\n         }\n     }\n-    return std::max(nOutbound - nMaxOutbound, 0);\n+    return std::max(nOutbound - m_max_outbound_full_relay - m_max_outbound_block_relay, 0);\n }\n \n void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n@@ -1715,7 +1725,8 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         CAddress addrConnect;\n \n         // Only connect out to one peer per network group (/16 for IPv4).\n-        int nOutbound = 0;\n+        int nOutboundFullRelay = 0;\n+        int nOutboundBlockRelay = 0;\n         std::set<std::vector<unsigned char> > setConnected;\n         {\n             LOCK(cs_vNodes);\n@@ -1727,7 +1738,11 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                     // also have the added issue that they're attacker controlled and could be used\n                     // to prevent us from connecting to particular hosts if we used them here.\n                     setConnected.insert(pnode->addr.GetGroup());\n-                    nOutbound++;\n+                    if (pnode->m_tx_relay == nullptr) {\n+                        nOutboundBlockRelay++;\n+                    } else if (!pnode->fFeeler) {\n+                        nOutboundFullRelay++;\n+                    }\n                 }\n             }\n         }\n@@ -1746,7 +1761,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         //\n         bool fFeeler = false;\n \n-        if (nOutbound >= nMaxOutbound && !GetTryNewOutboundPeer()) {\n+        if (nOutboundFullRelay >= m_max_outbound_full_relay && nOutboundBlockRelay >= m_max_outbound_block_relay && !GetTryNewOutboundPeer()) {\n             int64_t nTime = GetTimeMicros(); // The current time right now (in microseconds).\n             if (nTime > nNextFeeler) {\n                 nNextFeeler = PoissonNextSend(nTime, FEELER_INTERVAL);\n@@ -1820,7 +1835,14 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                 LogPrint(BCLog::NET, \"Making feeler connection to %s\\n\", addrConnect.ToString());\n             }\n \n-            OpenNetworkConnection(addrConnect, (int)setConnected.size() >= std::min(nMaxConnections - 1, 2), &grant, nullptr, false, fFeeler);\n+            // Open this connection as block-relay-only if we're already at our\n+            // full-relay capacity, but not yet at our block-relay peer limit.\n+            // (It should not be possible for fFeeler to be set if we're not\n+            // also at our block-relay peer limit, but check against that as\n+            // well for sanity.)\n+            bool block_relay_only = nOutboundBlockRelay < m_max_outbound_block_relay && !fFeeler && nOutboundFullRelay >= m_max_outbound_full_relay;\n+\n+            OpenNetworkConnection(addrConnect, (int)setConnected.size() >= std::min(nMaxConnections - 1, 2), &grant, nullptr, false, fFeeler, false, block_relay_only);\n         }\n     }\n }\n@@ -1907,7 +1929,7 @@ void CConnman::ThreadOpenAddedConnections()\n }\n \n // if successful, this moves the passed grant to the constructed node\n-void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound, const char *pszDest, bool fOneShot, bool fFeeler, bool manual_connection)\n+void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound, const char *pszDest, bool fOneShot, bool fFeeler, bool manual_connection, bool block_relay_only)\n {\n     //\n     // Initiate outbound network connection\n@@ -1926,7 +1948,7 @@ void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n     } else if (FindNode(std::string(pszDest)))\n         return;\n \n-    CNode* pnode = ConnectNode(addrConnect, pszDest, fCountFailure, manual_connection);\n+    CNode* pnode = ConnectNode(addrConnect, pszDest, fCountFailure, manual_connection, block_relay_only);\n \n     if (!pnode)\n         return;\n@@ -2229,7 +2251,7 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n \n     if (semOutbound == nullptr) {\n         // initialize semaphore\n-        semOutbound = MakeUnique<CSemaphore>(std::min((nMaxOutbound + nMaxFeeler), nMaxConnections));\n+        semOutbound = MakeUnique<CSemaphore>(std::min(m_max_outbound, nMaxConnections));\n     }\n     if (semAddnode == nullptr) {\n         // initialize semaphore\n@@ -2307,7 +2329,7 @@ void CConnman::Interrupt()\n     InterruptSocks5(true);\n \n     if (semOutbound) {\n-        for (int i=0; i<(nMaxOutbound + nMaxFeeler); i++) {\n+        for (int i=0; i<m_max_outbound; i++) {\n             semOutbound->post();\n         }\n     }\n@@ -2617,14 +2639,17 @@ int CConnman::GetBestHeight() const\n \n unsigned int CConnman::GetReceiveFloodSize() const { return nReceiveFloodSize; }\n \n-CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress& addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress& addrBindIn, const std::string& addrNameIn, bool fInboundIn)\n+CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress& addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress& addrBindIn, const std::string& addrNameIn, bool fInboundIn, bool block_relay_only)\n     : nTimeConnected(GetSystemTimeInSeconds()),\n     addr(addrIn),\n     addrBind(addrBindIn),\n     fInbound(fInboundIn),\n     nKeyedNetGroup(nKeyedNetGroupIn),\n     addrKnown(5000, 0.001),\n-    filterInventoryKnown(50000, 0.000001),\n+    // Don't relay addr messages to peers that we connect to as block-relay-only\n+    // peers (to prevent adversaries from inferring these links from addr\n+    // traffic).\n+    m_addr_relay_peer(!block_relay_only),\n     id(idIn),\n     nLocalHostNonce(nLocalHostNonceIn),\n     nLocalServices(nLocalServicesIn),\n@@ -2633,8 +2658,9 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     hSocket = hSocketIn;\n     addrName = addrNameIn == \"\" ? addr.ToStringIPPort() : addrNameIn;\n     hashContinue = uint256();\n-    filterInventoryKnown.reset();\n-    pfilter = MakeUnique<CBloomFilter>();\n+    if (!block_relay_only) {\n+        m_tx_relay = MakeUnique<TxRelay>();\n+    }\n \n     for (const std::string &msg : getAllNetMessageTypes())\n         mapRecvBytesPerMsgCmd[msg] = 0;"
      },
      {
        "sha": "f33147155a33982fa48e91e98d3d3bc54f3cd27f",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 101,
        "deletions": 43,
        "changes": 144,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -61,10 +61,12 @@ static const unsigned int MAX_ADDR_TO_SEND = 1000;\n static const unsigned int MAX_PROTOCOL_MESSAGE_LENGTH = 4 * 1000 * 1000;\n /** Maximum length of the user agent string in `version` message */\n static const unsigned int MAX_SUBVERSION_LENGTH = 256;\n-/** Maximum number of automatic outgoing nodes */\n-static const int MAX_OUTBOUND_CONNECTIONS = 8;\n+/** Maximum number of automatic outgoing nodes over which we'll relay everything (blocks, tx, addrs, etc) */\n+static const int MAX_OUTBOUND_FULL_RELAY_CONNECTIONS = 8;\n /** Maximum number of addnode outgoing nodes */\n static const int MAX_ADDNODE_CONNECTIONS = 8;\n+/** Maximum number of block-relay-only outgoing connections */\n+static const int MAX_BLOCKS_ONLY_CONNECTIONS = 2;\n /** -listen default */\n static const bool DEFAULT_LISTEN = true;\n /** -upnp default */\n@@ -131,7 +133,8 @@ class CConnman\n     {\n         ServiceFlags nLocalServices = NODE_NONE;\n         int nMaxConnections = 0;\n-        int nMaxOutbound = 0;\n+        int m_max_outbound_full_relay = 0;\n+        int m_max_outbound_block_relay = 0;\n         int nMaxAddnode = 0;\n         int nMaxFeeler = 0;\n         int nBestHeight = 0;\n@@ -155,10 +158,12 @@ class CConnman\n     void Init(const Options& connOptions) {\n         nLocalServices = connOptions.nLocalServices;\n         nMaxConnections = connOptions.nMaxConnections;\n-        nMaxOutbound = std::min(connOptions.nMaxOutbound, connOptions.nMaxConnections);\n+        m_max_outbound_full_relay = std::min(connOptions.m_max_outbound_full_relay, connOptions.nMaxConnections);\n+        m_max_outbound_block_relay = connOptions.m_max_outbound_block_relay;\n         m_use_addrman_outgoing = connOptions.m_use_addrman_outgoing;\n         nMaxAddnode = connOptions.nMaxAddnode;\n         nMaxFeeler = connOptions.nMaxFeeler;\n+        m_max_outbound = m_max_outbound_full_relay + m_max_outbound_block_relay + nMaxFeeler;\n         nBestHeight = connOptions.nBestHeight;\n         clientInterface = connOptions.uiInterface;\n         m_banman = connOptions.m_banman;\n@@ -197,7 +202,7 @@ class CConnman\n     bool GetNetworkActive() const { return fNetworkActive; };\n     bool GetUseAddrmanOutgoing() const { return m_use_addrman_outgoing; };\n     void SetNetworkActive(bool active);\n-    void OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = nullptr, const char *strDest = nullptr, bool fOneShot = false, bool fFeeler = false, bool manual_connection = false);\n+    void OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = nullptr, const char *strDest = nullptr, bool fOneShot = false, bool fFeeler = false, bool manual_connection = false, bool block_relay_only = false);\n     bool CheckIncomingNonce(uint64_t nonce);\n \n     bool ForNode(NodeId id, std::function<bool(CNode* pnode)> func);\n@@ -253,7 +258,7 @@ class CConnman\n     void AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddress& addrFrom, int64_t nTimePenalty = 0);\n     std::vector<CAddress> GetAddresses();\n \n-    // This allows temporarily exceeding nMaxOutbound, with the goal of finding\n+    // This allows temporarily exceeding m_max_outbound_full_relay, with the goal of finding\n     // a peer that is better than all our current peers.\n     void SetTryNewOutboundPeer(bool flag);\n     bool GetTryNewOutboundPeer();\n@@ -277,6 +282,12 @@ class CConnman\n     bool DisconnectNode(const CNetAddr& addr);\n     bool DisconnectNode(NodeId id);\n \n+    //! Used to convey which local services we are offering peers during node\n+    //! connection.\n+    //!\n+    //! The data returned by this is used in CNode construction,\n+    //! which is used to advertise which services we are offering\n+    //! that peer during `net_processing.cpp:PushNodeVersion()`.\n     ServiceFlags GetLocalServices() const;\n \n     //!set the max outbound target in bytes\n@@ -355,7 +366,7 @@ class CConnman\n     CNode* FindNode(const CService& addr);\n \n     bool AttemptToEvictConnection();\n-    CNode* ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure, bool manual_connection);\n+    CNode* ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure, bool manual_connection, bool block_relay_only);\n     void AddWhitelistPermissionFlags(NetPermissionFlags& flags, const CNetAddr &addr) const;\n \n     void DeleteNode(CNode* pnode);\n@@ -408,15 +419,34 @@ class CConnman\n     std::atomic<NodeId> nLastNodeId{0};\n     unsigned int nPrevNodeCount{0};\n \n-    /** Services this instance offers */\n+    /**\n+     * Services this instance offers.\n+     *\n+     * This data is replicated in each CNode instance we create during peer\n+     * connection (in ConnectNode()) under a member also called\n+     * nLocalServices.\n+     *\n+     * This data is not marked const, but after being set it should not\n+     * change. See the note in CNode::nLocalServices documentation.\n+     *\n+     * \\sa CNode::nLocalServices\n+     */\n     ServiceFlags nLocalServices;\n \n     std::unique_ptr<CSemaphore> semOutbound;\n     std::unique_ptr<CSemaphore> semAddnode;\n     int nMaxConnections;\n-    int nMaxOutbound;\n+\n+    // How many full-relay (tx, block, addr) outbound peers we want\n+    int m_max_outbound_full_relay;\n+\n+    // How many block-relay only outbound peers we want\n+    // We do not relay tx or addr messages with these peers\n+    int m_max_outbound_block_relay;\n+\n     int nMaxAddnode;\n     int nMaxFeeler;\n+    int m_max_outbound;\n     bool m_use_addrman_outgoing;\n     std::atomic<int> nBestHeight;\n     CClientUIInterface* clientInterface;\n@@ -442,7 +472,7 @@ class CConnman\n     std::thread threadMessageHandler;\n \n     /** flag for deciding to connect to an extra outbound peer,\n-     *  in excess of nMaxOutbound\n+     *  in excess of m_max_outbound_full_relay\n      *  This takes the place of a feeler connection */\n     std::atomic_bool m_try_another_outbound_peer;\n \n@@ -681,15 +711,8 @@ class CNode\n     // Setting fDisconnect to true will cause the node to be disconnected the\n     // next time DisconnectNodes() runs\n     std::atomic_bool fDisconnect{false};\n-    // We use fRelayTxes for two purposes -\n-    // a) it allows us to not relay tx invs before receiving the peer's version message\n-    // b) the peer may tell us in its version message that we should not relay tx invs\n-    //    unless it loads a bloom filter.\n-    bool fRelayTxes GUARDED_BY(cs_filter){false};\n     bool fSentAddr{false};\n     CSemaphoreGrant grantOutbound;\n-    mutable CCriticalSection cs_filter;\n-    std::unique_ptr<CBloomFilter> pfilter PT_GUARDED_BY(cs_filter);\n     std::atomic<int> nRefCount{0};\n \n     const uint64_t nKeyedNetGroup;\n@@ -708,28 +731,51 @@ class CNode\n     std::vector<CAddress> vAddrToSend;\n     CRollingBloomFilter addrKnown;\n     bool fGetAddr{false};\n-    std::set<uint256> setKnown;\n     int64_t nNextAddrSend GUARDED_BY(cs_sendProcessing){0};\n     int64_t nNextLocalAddrSend GUARDED_BY(cs_sendProcessing){0};\n \n-    // inventory based relay\n-    CRollingBloomFilter filterInventoryKnown GUARDED_BY(cs_inventory);\n-    // Set of transaction ids we still have to announce.\n-    // They are sorted by the mempool before relay, so the order is not important.\n-    std::set<uint256> setInventoryTxToSend;\n+    const bool m_addr_relay_peer;\n+    bool IsAddrRelayPeer() const { return m_addr_relay_peer; }\n+\n     // List of block ids we still have announce.\n     // There is no final sorting before sending, as they are always sent immediately\n     // and in the order requested.\n     std::vector<uint256> vInventoryBlockToSend GUARDED_BY(cs_inventory);\n     CCriticalSection cs_inventory;\n-    int64_t nNextInvSend{0};\n+\n+    struct TxRelay {\n+        TxRelay() { pfilter = MakeUnique<CBloomFilter>(); }\n+        mutable CCriticalSection cs_filter;\n+        // We use fRelayTxes for two purposes -\n+        // a) it allows us to not relay tx invs before receiving the peer's version message\n+        // b) the peer may tell us in its version message that we should not relay tx invs\n+        //    unless it loads a bloom filter.\n+        bool fRelayTxes GUARDED_BY(cs_filter){false};\n+        std::unique_ptr<CBloomFilter> pfilter PT_GUARDED_BY(cs_filter) GUARDED_BY(cs_filter);\n+\n+        mutable CCriticalSection cs_tx_inventory;\n+        CRollingBloomFilter filterInventoryKnown GUARDED_BY(cs_tx_inventory){50000, 0.000001};\n+        // Set of transaction ids we still have to announce.\n+        // They are sorted by the mempool before relay, so the order is not important.\n+        std::set<uint256> setInventoryTxToSend;\n+        // Used for BIP35 mempool sending\n+        bool fSendMempool GUARDED_BY(cs_tx_inventory){false};\n+        // Last time a \"MEMPOOL\" request was serviced.\n+        std::atomic<int64_t> timeLastMempoolReq{0};\n+        int64_t nNextInvSend{0};\n+\n+        CCriticalSection cs_feeFilter;\n+        // Minimum fee rate with which to filter inv's to this node\n+        CAmount minFeeFilter GUARDED_BY(cs_feeFilter){0};\n+        CAmount lastSentFeeFilter{0};\n+        int64_t nextSendTimeFeeFilter{0};\n+    };\n+\n+    // m_tx_relay == nullptr if we're not relaying transactions with this peer\n+    std::unique_ptr<TxRelay> m_tx_relay;\n+\n     // Used for headers announcements - unfiltered blocks to relay\n     std::vector<uint256> vBlockHashesToAnnounce GUARDED_BY(cs_inventory);\n-    // Used for BIP35 mempool sending\n-    bool fSendMempool GUARDED_BY(cs_inventory){false};\n-\n-    // Last time a \"MEMPOOL\" request was serviced.\n-    std::atomic<int64_t> timeLastMempoolReq{0};\n \n     // Block and TXN accept times\n     std::atomic<int64_t> nLastBlockTime{0};\n@@ -746,24 +792,35 @@ class CNode\n     std::atomic<int64_t> nMinPingUsecTime{std::numeric_limits<int64_t>::max()};\n     // Whether a ping is requested.\n     std::atomic<bool> fPingQueued{false};\n-    // Minimum fee rate with which to filter inv's to this node\n-    CAmount minFeeFilter GUARDED_BY(cs_feeFilter){0};\n-    CCriticalSection cs_feeFilter;\n-    CAmount lastSentFeeFilter{0};\n-    int64_t nextSendTimeFeeFilter{0};\n \n     std::set<uint256> orphan_work_set;\n \n-    CNode(NodeId id, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress &addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress &addrBindIn, const std::string &addrNameIn = \"\", bool fInboundIn = false);\n+    CNode(NodeId id, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress &addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress &addrBindIn, const std::string &addrNameIn = \"\", bool fInboundIn = false, bool block_relay_only = false);\n     ~CNode();\n     CNode(const CNode&) = delete;\n     CNode& operator=(const CNode&) = delete;\n \n private:\n     const NodeId id;\n     const uint64_t nLocalHostNonce;\n-    // Services offered to this peer\n+\n+    //! Services offered to this peer.\n+    //!\n+    //! This is supplied by the parent CConnman during peer connection\n+    //! (CConnman::ConnectNode()) from its attribute of the same name.\n+    //!\n+    //! This is const because there is no protocol defined for renegotiating\n+    //! services initially offered to a peer. The set of local services we\n+    //! offer should not change after initialization.\n+    //!\n+    //! An interesting example of this is NODE_NETWORK and initial block\n+    //! download: a node which starts up from scratch doesn't have any blocks\n+    //! to serve, but still advertises NODE_NETWORK because it will eventually\n+    //! fulfill this role after IBD completes. P2P code is written in such a\n+    //! way that it can gracefully handle peers who don't make good on their\n+    //! service advertisements.\n     const ServiceFlags nLocalServices;\n+\n     const int nMyStartingHeight;\n     int nSendVersion{0};\n     NetPermissionFlags m_permissionFlags{ PF_NONE };\n@@ -847,20 +904,21 @@ class CNode\n \n     void AddInventoryKnown(const CInv& inv)\n     {\n-        {\n-            LOCK(cs_inventory);\n-            filterInventoryKnown.insert(inv.hash);\n+        if (m_tx_relay != nullptr) {\n+            LOCK(m_tx_relay->cs_tx_inventory);\n+            m_tx_relay->filterInventoryKnown.insert(inv.hash);\n         }\n     }\n \n     void PushInventory(const CInv& inv)\n     {\n-        LOCK(cs_inventory);\n-        if (inv.type == MSG_TX) {\n-            if (!filterInventoryKnown.contains(inv.hash)) {\n-                setInventoryTxToSend.insert(inv.hash);\n+        if (inv.type == MSG_TX && m_tx_relay != nullptr) {\n+            LOCK(m_tx_relay->cs_tx_inventory);\n+            if (!m_tx_relay->filterInventoryKnown.contains(inv.hash)) {\n+                m_tx_relay->setInventoryTxToSend.insert(inv.hash);\n             }\n         } else if (inv.type == MSG_BLOCK) {\n+            LOCK(cs_inventory);\n             vInventoryBlockToSend.push_back(inv.hash);\n         }\n     }"
      },
      {
        "sha": "34d349e8e9633791335d4a77fb7ec849b8d4ecb0",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 185,
        "deletions": 151,
        "changes": 336,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -262,7 +262,7 @@ struct CNodeState {\n     bool fSupportsDesiredCmpctVersion;\n \n     /** State used to enforce CHAIN_SYNC_TIMEOUT\n-      * Only in effect for outbound, non-manual connections, with\n+      * Only in effect for outbound, non-manual, full-relay connections, with\n       * m_protect == false\n       * Algorithm: if a peer's best known block has less work than our tip,\n       * set a timeout CHAIN_SYNC_TIMEOUT seconds in the future:\n@@ -415,6 +415,9 @@ static void UpdatePreferredDownload(CNode* node, CNodeState* state) EXCLUSIVE_LO\n \n static void PushNodeVersion(CNode *pnode, CConnman* connman, int64_t nTime)\n {\n+    // Note that pnode->GetLocalServices() is a reflection of the local\n+    // services we were offering when the CNode object was created for this\n+    // peer.\n     ServiceFlags nLocalNodeServices = pnode->GetLocalServices();\n     uint64_t nonce = pnode->GetLocalNonce();\n     int nNodeStartingHeight = pnode->GetMyStartingHeight();\n@@ -425,7 +428,7 @@ static void PushNodeVersion(CNode *pnode, CConnman* connman, int64_t nTime)\n     CAddress addrMe = CAddress(CService(), nLocalNodeServices);\n \n     connman->PushMessage(pnode, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERSION, PROTOCOL_VERSION, (uint64_t)nLocalNodeServices, nTime, addrYou, addrMe,\n-            nonce, strSubVersion, nNodeStartingHeight, ::g_relay_txes));\n+            nonce, strSubVersion, nNodeStartingHeight, ::g_relay_txes && pnode->m_tx_relay != nullptr));\n \n     if (fLogIPs) {\n         LogPrint(BCLog::NET, \"send version message: version %d, blocks=%d, us=%s, them=%s, peer=%d\\n\", PROTOCOL_VERSION, nNodeStartingHeight, addrMe.ToString(), addrYou.ToString(), nodeid);\n@@ -757,7 +760,7 @@ void UpdateLastBlockAnnounceTime(NodeId node, int64_t time_in_seconds)\n }\n \n // Returns true for outbound peers, excluding manual connections, feelers, and\n-// one-shots\n+// one-shots.\n static bool IsOutboundDisconnectionCandidate(const CNode *node)\n {\n     return !(node->fInbound || node->m_manual_connection || node->fFeeler || node->fOneShot);\n@@ -1330,7 +1333,7 @@ static void RelayAddress(const CAddress& addr, bool fReachable, CConnman* connma\n     assert(nRelayNodes <= best.size());\n \n     auto sortfunc = [&best, &hasher, nRelayNodes](CNode* pnode) {\n-        if (pnode->nVersion >= CADDR_TIME_VERSION) {\n+        if (pnode->nVersion >= CADDR_TIME_VERSION && pnode->IsAddrRelayPeer()) {\n             uint64_t hashKey = CSipHasher(hasher).Write(pnode->GetId()).Finalize();\n             for (unsigned int i = 0; i < nRelayNodes; i++) {\n                  if (hashKey > best[i].first) {\n@@ -1449,11 +1452,11 @@ void static ProcessGetBlockData(CNode* pfrom, const CChainParams& chainparams, c\n             {\n                 bool sendMerkleBlock = false;\n                 CMerkleBlock merkleBlock;\n-                {\n-                    LOCK(pfrom->cs_filter);\n-                    if (pfrom->pfilter) {\n+                if (pfrom->m_tx_relay != nullptr) {\n+                    LOCK(pfrom->m_tx_relay->cs_filter);\n+                    if (pfrom->m_tx_relay->pfilter) {\n                         sendMerkleBlock = true;\n-                        merkleBlock = CMerkleBlock(*pblock, *pfrom->pfilter);\n+                        merkleBlock = CMerkleBlock(*pblock, *pfrom->m_tx_relay->pfilter);\n                     }\n                 }\n                 if (sendMerkleBlock) {\n@@ -1513,7 +1516,12 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n     std::deque<CInv>::iterator it = pfrom->vRecvGetData.begin();\n     std::vector<CInv> vNotFound;\n     const CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n-    {\n+\n+    // Note that if we receive a getdata for a MSG_TX or MSG_WITNESS_TX from a\n+    // block-relay-only outbound peer, we will stop processing further getdata\n+    // messages from this peer (likely resulting in our peer eventually\n+    // disconnecting us).\n+    if (pfrom->m_tx_relay != nullptr) {\n         LOCK(cs_main);\n \n         while (it != pfrom->vRecvGetData.end() && (it->type == MSG_TX || it->type == MSG_WITNESS_TX)) {\n@@ -1533,11 +1541,11 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n             if (mi != mapRelay.end()) {\n                 connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::TX, *mi->second));\n                 push = true;\n-            } else if (pfrom->timeLastMempoolReq) {\n+            } else if (pfrom->m_tx_relay->timeLastMempoolReq) {\n                 auto txinfo = mempool.info(inv.hash);\n                 // To protect privacy, do not answer getdata using the mempool when\n                 // that TX couldn't have been INVed in reply to a MEMPOOL request.\n-                if (txinfo.tx && txinfo.nTime <= pfrom->timeLastMempoolReq) {\n+                if (txinfo.tx && txinfo.nTime <= pfrom->m_tx_relay->timeLastMempoolReq) {\n                     connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::TX, *txinfo.tx));\n                     push = true;\n                 }\n@@ -1773,9 +1781,11 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n             }\n         }\n \n-        if (!pfrom->fDisconnect && IsOutboundDisconnectionCandidate(pfrom) && nodestate->pindexBestKnownBlock != nullptr) {\n-            // If this is an outbound peer, check to see if we should protect\n+        if (!pfrom->fDisconnect && IsOutboundDisconnectionCandidate(pfrom) && nodestate->pindexBestKnownBlock != nullptr && pfrom->m_tx_relay != nullptr) {\n+            // If this is an outbound full-relay peer, check to see if we should protect\n             // it from the bad/lagging chain logic.\n+            // Note that block-relay-only peers are already implicitly protected, so we\n+            // only consider setting m_protect for the full-relay peers.\n             if (g_outbound_peers_with_protect_from_disconnect < MAX_OUTBOUND_PEERS_TO_PROTECT_FROM_DISCONNECT && nodestate->pindexBestKnownBlock->nChainWork >= ::ChainActive().Tip()->nChainWork && !nodestate->m_chain_sync.m_protect) {\n                 LogPrint(BCLog::NET, \"Protecting outbound peer=%d from eviction\\n\", pfrom->GetId());\n                 nodestate->m_chain_sync.m_protect = true;\n@@ -1996,9 +2006,9 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         // set nodes not capable of serving the complete blockchain history as \"limited nodes\"\n         pfrom->m_limited_node = (!(nServices & NODE_NETWORK) && (nServices & NODE_NETWORK_LIMITED));\n \n-        {\n-            LOCK(pfrom->cs_filter);\n-            pfrom->fRelayTxes = fRelay; // set to true after we get the first filter* message\n+        if (pfrom->m_tx_relay != nullptr) {\n+            LOCK(pfrom->m_tx_relay->cs_filter);\n+            pfrom->m_tx_relay->fRelayTxes = fRelay; // set to true after we get the first filter* message\n         }\n \n         // Change version\n@@ -2017,7 +2027,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         UpdatePreferredDownload(pfrom, State(pfrom->GetId()));\n         }\n \n-        if (!pfrom->fInbound)\n+        if (!pfrom->fInbound && pfrom->IsAddrRelayPeer())\n         {\n             // Advertise our address\n             if (fListen && !::ChainstateActive().IsInitialBlockDownload())\n@@ -2089,9 +2099,10 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // Mark this node as currently connected, so we update its timestamp later.\n             LOCK(cs_main);\n             State(pfrom->GetId())->fCurrentlyConnected = true;\n-            LogPrintf(\"New outbound peer connected: version: %d, blocks=%d, peer=%d%s\\n\",\n-                      pfrom->nVersion.load(), pfrom->nStartingHeight, pfrom->GetId(),\n-                      (fLogIPs ? strprintf(\", peeraddr=%s\", pfrom->addr.ToString()) : \"\"));\n+            LogPrintf(\"New outbound peer connected: version: %d, blocks=%d, peer=%d%s (%s)\\n\",\n+                      pfrom->nVersion.load(), pfrom->nStartingHeight,\n+                      pfrom->GetId(), (fLogIPs ? strprintf(\", peeraddr=%s\", pfrom->addr.ToString()) : \"\"),\n+                      pfrom->m_tx_relay == nullptr ? \"block-relay\" : \"full-relay\");\n         }\n \n         if (pfrom->nVersion >= SENDHEADERS_VERSION) {\n@@ -2132,6 +2143,9 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         // Don't want addr from older versions unless seeding\n         if (pfrom->nVersion < CADDR_TIME_VERSION && connman->GetAddressCount() > 1000)\n             return true;\n+        if (!pfrom->IsAddrRelayPeer()) {\n+            return true;\n+        }\n         if (vAddr.size() > 1000)\n         {\n             LOCK(cs_main);\n@@ -2215,7 +2229,9 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             return false;\n         }\n \n-        bool fBlocksOnly = !g_relay_txes;\n+        // We won't accept tx inv's if we're in blocks-only mode, or this is a\n+        // block-relay-only peer\n+        bool fBlocksOnly = !g_relay_txes || (pfrom->m_tx_relay == nullptr);\n \n         // Allow whitelisted peers to send data other than blocks in blocks only mode if whitelistrelay is true\n         if (pfrom->HasPermission(PF_RELAY))\n@@ -2254,7 +2270,9 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             {\n                 pfrom->AddInventoryKnown(inv);\n                 if (fBlocksOnly) {\n-                    LogPrint(BCLog::NET, \"transaction (%s) inv sent in violation of protocol peer=%d\\n\", inv.hash.ToString(), pfrom->GetId());\n+                    LogPrint(BCLog::NET, \"transaction (%s) inv sent in violation of protocol, disconnecting peer=%d\\n\", inv.hash.ToString(), pfrom->GetId());\n+                    pfrom->fDisconnect = true;\n+                    return true;\n                 } else if (!fAlreadyHave && !fImporting && !fReindex && !::ChainstateActive().IsInitialBlockDownload()) {\n                     RequestTx(State(pfrom->GetId()), inv.hash, current_time);\n                 }\n@@ -2471,9 +2489,11 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n     if (strCommand == NetMsgType::TX) {\n         // Stop processing the transaction early if\n         // We are in blocks only mode and peer is either not whitelisted or whitelistrelay is off\n-        if (!g_relay_txes && !pfrom->HasPermission(PF_RELAY))\n+        // or if this peer is supposed to be a block-relay-only peer\n+        if ((!g_relay_txes && !pfrom->HasPermission(PF_RELAY)) || (pfrom->m_tx_relay == nullptr))\n         {\n             LogPrint(BCLog::NET, \"transaction sent in violation of protocol peer=%d\\n\", pfrom->GetId());\n+            pfrom->fDisconnect = true;\n             return true;\n         }\n \n@@ -2539,7 +2559,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 }\n                 AddOrphanTx(ptx, pfrom->GetId());\n \n-                // DoS prevention: do not allow mapOrphanTransactions to grow unbounded\n+                // DoS prevention: do not allow mapOrphanTransactions to grow unbounded (see CVE-2012-3789)\n                 unsigned int nMaxOrphanTx = (unsigned int)std::max((int64_t)0, gArgs.GetArg(\"-maxorphantx\", DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n                 unsigned int nEvicted = LimitOrphanTxSize(nMaxOrphanTx);\n                 if (nEvicted > 0) {\n@@ -2990,6 +3010,10 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             LogPrint(BCLog::NET, \"Ignoring \\\"getaddr\\\" from outbound connection. peer=%d\\n\", pfrom->GetId());\n             return true;\n         }\n+        if (!pfrom->IsAddrRelayPeer()) {\n+            LogPrint(BCLog::NET, \"Ignoring \\\"getaddr\\\" from block-relay-only connection. peer=%d\\n\", pfrom->GetId());\n+            return true;\n+        }\n \n         // Only send one GetAddr response per connection to reduce resource waste\n         //  and discourage addr stamping of INV announcements.\n@@ -3031,8 +3055,10 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             return true;\n         }\n \n-        LOCK(pfrom->cs_inventory);\n-        pfrom->fSendMempool = true;\n+        if (pfrom->m_tx_relay != nullptr) {\n+            LOCK(pfrom->m_tx_relay->cs_tx_inventory);\n+            pfrom->m_tx_relay->fSendMempool = true;\n+        }\n         return true;\n     }\n \n@@ -3123,12 +3149,12 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             LOCK(cs_main);\n             Misbehaving(pfrom->GetId(), 100);\n         }\n-        else\n+        else if (pfrom->m_tx_relay != nullptr)\n         {\n-            LOCK(pfrom->cs_filter);\n-            pfrom->pfilter.reset(new CBloomFilter(filter));\n-            pfrom->pfilter->UpdateEmptyFull();\n-            pfrom->fRelayTxes = true;\n+            LOCK(pfrom->m_tx_relay->cs_filter);\n+            pfrom->m_tx_relay->pfilter.reset(new CBloomFilter(filter));\n+            pfrom->m_tx_relay->pfilter->UpdateEmptyFull();\n+            pfrom->m_tx_relay->fRelayTxes = true;\n         }\n         return true;\n     }\n@@ -3142,10 +3168,10 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         bool bad = false;\n         if (vData.size() > MAX_SCRIPT_ELEMENT_SIZE) {\n             bad = true;\n-        } else {\n-            LOCK(pfrom->cs_filter);\n-            if (pfrom->pfilter) {\n-                pfrom->pfilter->insert(vData);\n+        } else if (pfrom->m_tx_relay != nullptr) {\n+            LOCK(pfrom->m_tx_relay->cs_filter);\n+            if (pfrom->m_tx_relay->pfilter) {\n+                pfrom->m_tx_relay->pfilter->insert(vData);\n             } else {\n                 bad = true;\n             }\n@@ -3158,21 +3184,24 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n     }\n \n     if (strCommand == NetMsgType::FILTERCLEAR) {\n-        LOCK(pfrom->cs_filter);\n+        if (pfrom->m_tx_relay == nullptr) {\n+            return true;\n+        }\n+        LOCK(pfrom->m_tx_relay->cs_filter);\n         if (pfrom->GetLocalServices() & NODE_BLOOM) {\n-            pfrom->pfilter.reset(new CBloomFilter());\n+            pfrom->m_tx_relay->pfilter.reset(new CBloomFilter());\n         }\n-        pfrom->fRelayTxes = true;\n+        pfrom->m_tx_relay->fRelayTxes = true;\n         return true;\n     }\n \n     if (strCommand == NetMsgType::FEEFILTER) {\n         CAmount newFeeFilter = 0;\n         vRecv >> newFeeFilter;\n         if (MoneyRange(newFeeFilter)) {\n-            {\n-                LOCK(pfrom->cs_feeFilter);\n-                pfrom->minFeeFilter = newFeeFilter;\n+            if (pfrom->m_tx_relay != nullptr) {\n+                LOCK(pfrom->m_tx_relay->cs_feeFilter);\n+                pfrom->m_tx_relay->minFeeFilter = newFeeFilter;\n             }\n             LogPrint(BCLog::NET, \"received: feefilter of %s from peer=%d\\n\", CFeeRate(newFeeFilter).ToString(), pfrom->GetId());\n         }\n@@ -3449,6 +3478,8 @@ void PeerLogicValidation::EvictExtraOutboundPeers(int64_t time_in_seconds)\n             if (state == nullptr) return; // shouldn't be possible, but just in case\n             // Don't evict our protected peers\n             if (state->m_chain_sync.m_protect) return;\n+            // Don't evict our block-relay-only peers.\n+            if (pnode->m_tx_relay == nullptr) return;\n             if (state->m_last_block_announcement < oldest_block_announcement || (state->m_last_block_announcement == oldest_block_announcement && pnode->GetId() > worst_peer)) {\n                 worst_peer = pnode->GetId();\n                 oldest_block_announcement = state->m_last_block_announcement;\n@@ -3576,15 +3607,15 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n \n         // Address refresh broadcast\n         int64_t nNow = GetTimeMicros();\n-        if (!::ChainstateActive().IsInitialBlockDownload() && pto->nNextLocalAddrSend < nNow) {\n+        if (pto->IsAddrRelayPeer() && !::ChainstateActive().IsInitialBlockDownload() && pto->nNextLocalAddrSend < nNow) {\n             AdvertiseLocal(pto);\n             pto->nNextLocalAddrSend = PoissonNextSend(nNow, AVG_LOCAL_ADDRESS_BROADCAST_INTERVAL);\n         }\n \n         //\n         // Message: addr\n         //\n-        if (pto->nNextAddrSend < nNow) {\n+        if (pto->IsAddrRelayPeer() && pto->nNextAddrSend < nNow) {\n             pto->nNextAddrSend = PoissonNextSend(nNow, AVG_ADDRESS_BROADCAST_INTERVAL);\n             std::vector<CAddress> vAddr;\n             vAddr.reserve(pto->vAddrToSend.size());\n@@ -3792,120 +3823,123 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n             }\n             pto->vInventoryBlockToSend.clear();\n \n-            // Check whether periodic sends should happen\n-            bool fSendTrickle = pto->HasPermission(PF_NOBAN);\n-            if (pto->nNextInvSend < nNow) {\n-                fSendTrickle = true;\n-                if (pto->fInbound) {\n-                    pto->nNextInvSend = connman->PoissonNextSendInbound(nNow, INVENTORY_BROADCAST_INTERVAL);\n-                } else {\n-                    // Use half the delay for outbound peers, as there is less privacy concern for them.\n-                    pto->nNextInvSend = PoissonNextSend(nNow, INVENTORY_BROADCAST_INTERVAL >> 1);\n+            if (pto->m_tx_relay != nullptr) {\n+                LOCK(pto->m_tx_relay->cs_tx_inventory);\n+                // Check whether periodic sends should happen\n+                bool fSendTrickle = pto->HasPermission(PF_NOBAN);\n+                if (pto->m_tx_relay->nNextInvSend < nNow) {\n+                    fSendTrickle = true;\n+                    if (pto->fInbound) {\n+                        pto->m_tx_relay->nNextInvSend = connman->PoissonNextSendInbound(nNow, INVENTORY_BROADCAST_INTERVAL);\n+                    } else {\n+                        // Use half the delay for outbound peers, as there is less privacy concern for them.\n+                        pto->m_tx_relay->nNextInvSend = PoissonNextSend(nNow, INVENTORY_BROADCAST_INTERVAL >> 1);\n+                    }\n                 }\n-            }\n-\n-            // Time to send but the peer has requested we not relay transactions.\n-            if (fSendTrickle) {\n-                LOCK(pto->cs_filter);\n-                if (!pto->fRelayTxes) pto->setInventoryTxToSend.clear();\n-            }\n \n-            // Respond to BIP35 mempool requests\n-            if (fSendTrickle && pto->fSendMempool) {\n-                auto vtxinfo = mempool.infoAll();\n-                pto->fSendMempool = false;\n-                CAmount filterrate = 0;\n-                {\n-                    LOCK(pto->cs_feeFilter);\n-                    filterrate = pto->minFeeFilter;\n+                // Time to send but the peer has requested we not relay transactions.\n+                if (fSendTrickle) {\n+                    LOCK(pto->m_tx_relay->cs_filter);\n+                    if (!pto->m_tx_relay->fRelayTxes) pto->m_tx_relay->setInventoryTxToSend.clear();\n                 }\n \n-                LOCK(pto->cs_filter);\n-\n-                for (const auto& txinfo : vtxinfo) {\n-                    const uint256& hash = txinfo.tx->GetHash();\n-                    CInv inv(MSG_TX, hash);\n-                    pto->setInventoryTxToSend.erase(hash);\n-                    if (filterrate) {\n-                        if (txinfo.feeRate.GetFeePerK() < filterrate)\n-                            continue;\n-                    }\n-                    if (pto->pfilter) {\n-                        if (!pto->pfilter->IsRelevantAndUpdate(*txinfo.tx)) continue;\n+                // Respond to BIP35 mempool requests\n+                if (fSendTrickle && pto->m_tx_relay->fSendMempool) {\n+                    auto vtxinfo = mempool.infoAll();\n+                    pto->m_tx_relay->fSendMempool = false;\n+                    CAmount filterrate = 0;\n+                    {\n+                        LOCK(pto->m_tx_relay->cs_feeFilter);\n+                        filterrate = pto->m_tx_relay->minFeeFilter;\n                     }\n-                    pto->filterInventoryKnown.insert(hash);\n-                    vInv.push_back(inv);\n-                    if (vInv.size() == MAX_INV_SZ) {\n-                        connman->PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\n-                        vInv.clear();\n+\n+                    LOCK(pto->m_tx_relay->cs_filter);\n+\n+                    for (const auto& txinfo : vtxinfo) {\n+                        const uint256& hash = txinfo.tx->GetHash();\n+                        CInv inv(MSG_TX, hash);\n+                        pto->m_tx_relay->setInventoryTxToSend.erase(hash);\n+                        if (filterrate) {\n+                            if (txinfo.feeRate.GetFeePerK() < filterrate)\n+                                continue;\n+                        }\n+                        if (pto->m_tx_relay->pfilter) {\n+                            if (!pto->m_tx_relay->pfilter->IsRelevantAndUpdate(*txinfo.tx)) continue;\n+                        }\n+                        pto->m_tx_relay->filterInventoryKnown.insert(hash);\n+                        vInv.push_back(inv);\n+                        if (vInv.size() == MAX_INV_SZ) {\n+                            connman->PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\n+                            vInv.clear();\n+                        }\n                     }\n+                    pto->m_tx_relay->timeLastMempoolReq = GetTime();\n                 }\n-                pto->timeLastMempoolReq = GetTime();\n-            }\n \n-            // Determine transactions to relay\n-            if (fSendTrickle) {\n-                // Produce a vector with all candidates for sending\n-                std::vector<std::set<uint256>::iterator> vInvTx;\n-                vInvTx.reserve(pto->setInventoryTxToSend.size());\n-                for (std::set<uint256>::iterator it = pto->setInventoryTxToSend.begin(); it != pto->setInventoryTxToSend.end(); it++) {\n-                    vInvTx.push_back(it);\n-                }\n-                CAmount filterrate = 0;\n-                {\n-                    LOCK(pto->cs_feeFilter);\n-                    filterrate = pto->minFeeFilter;\n-                }\n-                // Topologically and fee-rate sort the inventory we send for privacy and priority reasons.\n-                // A heap is used so that not all items need sorting if only a few are being sent.\n-                CompareInvMempoolOrder compareInvMempoolOrder(&mempool);\n-                std::make_heap(vInvTx.begin(), vInvTx.end(), compareInvMempoolOrder);\n-                // No reason to drain out at many times the network's capacity,\n-                // especially since we have many peers and some will draw much shorter delays.\n-                unsigned int nRelayedTransactions = 0;\n-                LOCK(pto->cs_filter);\n-                while (!vInvTx.empty() && nRelayedTransactions < INVENTORY_BROADCAST_MAX) {\n-                    // Fetch the top element from the heap\n-                    std::pop_heap(vInvTx.begin(), vInvTx.end(), compareInvMempoolOrder);\n-                    std::set<uint256>::iterator it = vInvTx.back();\n-                    vInvTx.pop_back();\n-                    uint256 hash = *it;\n-                    // Remove it from the to-be-sent set\n-                    pto->setInventoryTxToSend.erase(it);\n-                    // Check if not in the filter already\n-                    if (pto->filterInventoryKnown.contains(hash)) {\n-                        continue;\n+                // Determine transactions to relay\n+                if (fSendTrickle) {\n+                    // Produce a vector with all candidates for sending\n+                    std::vector<std::set<uint256>::iterator> vInvTx;\n+                    vInvTx.reserve(pto->m_tx_relay->setInventoryTxToSend.size());\n+                    for (std::set<uint256>::iterator it = pto->m_tx_relay->setInventoryTxToSend.begin(); it != pto->m_tx_relay->setInventoryTxToSend.end(); it++) {\n+                        vInvTx.push_back(it);\n                     }\n-                    // Not in the mempool anymore? don't bother sending it.\n-                    auto txinfo = mempool.info(hash);\n-                    if (!txinfo.tx) {\n-                        continue;\n-                    }\n-                    if (filterrate && txinfo.feeRate.GetFeePerK() < filterrate) {\n-                        continue;\n-                    }\n-                    if (pto->pfilter && !pto->pfilter->IsRelevantAndUpdate(*txinfo.tx)) continue;\n-                    // Send\n-                    vInv.push_back(CInv(MSG_TX, hash));\n-                    nRelayedTransactions++;\n+                    CAmount filterrate = 0;\n                     {\n-                        // Expire old relay messages\n-                        while (!vRelayExpiration.empty() && vRelayExpiration.front().first < nNow)\n-                        {\n-                            mapRelay.erase(vRelayExpiration.front().second);\n-                            vRelayExpiration.pop_front();\n+                        LOCK(pto->m_tx_relay->cs_feeFilter);\n+                        filterrate = pto->m_tx_relay->minFeeFilter;\n+                    }\n+                    // Topologically and fee-rate sort the inventory we send for privacy and priority reasons.\n+                    // A heap is used so that not all items need sorting if only a few are being sent.\n+                    CompareInvMempoolOrder compareInvMempoolOrder(&mempool);\n+                    std::make_heap(vInvTx.begin(), vInvTx.end(), compareInvMempoolOrder);\n+                    // No reason to drain out at many times the network's capacity,\n+                    // especially since we have many peers and some will draw much shorter delays.\n+                    unsigned int nRelayedTransactions = 0;\n+                    LOCK(pto->m_tx_relay->cs_filter);\n+                    while (!vInvTx.empty() && nRelayedTransactions < INVENTORY_BROADCAST_MAX) {\n+                        // Fetch the top element from the heap\n+                        std::pop_heap(vInvTx.begin(), vInvTx.end(), compareInvMempoolOrder);\n+                        std::set<uint256>::iterator it = vInvTx.back();\n+                        vInvTx.pop_back();\n+                        uint256 hash = *it;\n+                        // Remove it from the to-be-sent set\n+                        pto->m_tx_relay->setInventoryTxToSend.erase(it);\n+                        // Check if not in the filter already\n+                        if (pto->m_tx_relay->filterInventoryKnown.contains(hash)) {\n+                            continue;\n                         }\n+                        // Not in the mempool anymore? don't bother sending it.\n+                        auto txinfo = mempool.info(hash);\n+                        if (!txinfo.tx) {\n+                            continue;\n+                        }\n+                        if (filterrate && txinfo.feeRate.GetFeePerK() < filterrate) {\n+                            continue;\n+                        }\n+                        if (pto->m_tx_relay->pfilter && !pto->m_tx_relay->pfilter->IsRelevantAndUpdate(*txinfo.tx)) continue;\n+                        // Send\n+                        vInv.push_back(CInv(MSG_TX, hash));\n+                        nRelayedTransactions++;\n+                        {\n+                            // Expire old relay messages\n+                            while (!vRelayExpiration.empty() && vRelayExpiration.front().first < nNow)\n+                            {\n+                                mapRelay.erase(vRelayExpiration.front().second);\n+                                vRelayExpiration.pop_front();\n+                            }\n \n-                        auto ret = mapRelay.insert(std::make_pair(hash, std::move(txinfo.tx)));\n-                        if (ret.second) {\n-                            vRelayExpiration.push_back(std::make_pair(nNow + 15 * 60 * 1000000, ret.first));\n+                            auto ret = mapRelay.insert(std::make_pair(hash, std::move(txinfo.tx)));\n+                            if (ret.second) {\n+                                vRelayExpiration.push_back(std::make_pair(nNow + 15 * 60 * 1000000, ret.first));\n+                            }\n                         }\n+                        if (vInv.size() == MAX_INV_SZ) {\n+                            connman->PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\n+                            vInv.clear();\n+                        }\n+                        pto->m_tx_relay->filterInventoryKnown.insert(hash);\n                     }\n-                    if (vInv.size() == MAX_INV_SZ) {\n-                        connman->PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\n-                        vInv.clear();\n-                    }\n-                    pto->filterInventoryKnown.insert(hash);\n                 }\n             }\n         }\n@@ -4066,27 +4100,27 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n         // Message: feefilter\n         //\n         // We don't want white listed peers to filter txs to us if we have -whitelistforcerelay\n-        if (pto->nVersion >= FEEFILTER_VERSION && gArgs.GetBoolArg(\"-feefilter\", DEFAULT_FEEFILTER) &&\n+        if (pto->m_tx_relay != nullptr && pto->nVersion >= FEEFILTER_VERSION && gArgs.GetBoolArg(\"-feefilter\", DEFAULT_FEEFILTER) &&\n             !pto->HasPermission(PF_FORCERELAY)) {\n             CAmount currentFilter = mempool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n             int64_t timeNow = GetTimeMicros();\n-            if (timeNow > pto->nextSendTimeFeeFilter) {\n+            if (timeNow > pto->m_tx_relay->nextSendTimeFeeFilter) {\n                 static CFeeRate default_feerate(DEFAULT_MIN_RELAY_TX_FEE);\n                 static FeeFilterRounder filterRounder(default_feerate);\n                 CAmount filterToSend = filterRounder.round(currentFilter);\n                 // We always have a fee filter of at least minRelayTxFee\n                 filterToSend = std::max(filterToSend, ::minRelayTxFee.GetFeePerK());\n-                if (filterToSend != pto->lastSentFeeFilter) {\n+                if (filterToSend != pto->m_tx_relay->lastSentFeeFilter) {\n                     connman->PushMessage(pto, msgMaker.Make(NetMsgType::FEEFILTER, filterToSend));\n-                    pto->lastSentFeeFilter = filterToSend;\n+                    pto->m_tx_relay->lastSentFeeFilter = filterToSend;\n                 }\n-                pto->nextSendTimeFeeFilter = PoissonNextSend(timeNow, AVG_FEEFILTER_BROADCAST_INTERVAL);\n+                pto->m_tx_relay->nextSendTimeFeeFilter = PoissonNextSend(timeNow, AVG_FEEFILTER_BROADCAST_INTERVAL);\n             }\n             // If the fee filter has changed substantially and it's still more than MAX_FEEFILTER_CHANGE_DELAY\n             // until scheduled broadcast, then move the broadcast to within MAX_FEEFILTER_CHANGE_DELAY.\n-            else if (timeNow + MAX_FEEFILTER_CHANGE_DELAY * 1000000 < pto->nextSendTimeFeeFilter &&\n-                     (currentFilter < 3 * pto->lastSentFeeFilter / 4 || currentFilter > 4 * pto->lastSentFeeFilter / 3)) {\n-                pto->nextSendTimeFeeFilter = timeNow + GetRandInt(MAX_FEEFILTER_CHANGE_DELAY) * 1000000;\n+            else if (timeNow + MAX_FEEFILTER_CHANGE_DELAY * 1000000 < pto->m_tx_relay->nextSendTimeFeeFilter &&\n+                     (currentFilter < 3 * pto->m_tx_relay->lastSentFeeFilter / 4 || currentFilter > 4 * pto->m_tx_relay->lastSentFeeFilter / 3)) {\n+                pto->m_tx_relay->nextSendTimeFeeFilter = timeNow + GetRandInt(MAX_FEEFILTER_CHANGE_DELAY) * 1000000;\n             }\n         }\n     }"
      },
      {
        "sha": "e1891b9898732fae3ec053ba1306e3629cfce105",
        "filename": "src/node/coinstats.cpp",
        "status": "added",
        "additions": 77,
        "deletions": 0,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/node/coinstats.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/node/coinstats.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coinstats.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -0,0 +1,77 @@\n+// Copyright (c) 2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/coinstats.h>\n+\n+#include <amount.h>\n+#include <coins.h>\n+#include <chain.h>\n+#include <hash.h>\n+#include <serialize.h>\n+#include <validation.h>\n+#include <uint256.h>\n+#include <util/system.h>\n+\n+#include <map>\n+\n+#include <boost/thread.hpp>\n+\n+\n+static void ApplyStats(CCoinsStats &stats, CHashWriter& ss, const uint256& hash, const std::map<uint32_t, Coin>& outputs)\n+{\n+    assert(!outputs.empty());\n+    ss << hash;\n+    ss << VARINT(outputs.begin()->second.nHeight * 2 + outputs.begin()->second.fCoinBase ? 1u : 0u);\n+    stats.nTransactions++;\n+    for (const auto& output : outputs) {\n+        ss << VARINT(output.first + 1);\n+        ss << output.second.out.scriptPubKey;\n+        ss << VARINT(output.second.out.nValue, VarIntMode::NONNEGATIVE_SIGNED);\n+        stats.nTransactionOutputs++;\n+        stats.nTotalAmount += output.second.out.nValue;\n+        stats.nBogoSize += 32 /* txid */ + 4 /* vout index */ + 4 /* height + coinbase */ + 8 /* amount */ +\n+                           2 /* scriptPubKey len */ + output.second.out.scriptPubKey.size() /* scriptPubKey */;\n+    }\n+    ss << VARINT(0u);\n+}\n+\n+//! Calculate statistics about the unspent transaction output set\n+bool GetUTXOStats(CCoinsView *view, CCoinsStats &stats)\n+{\n+    std::unique_ptr<CCoinsViewCursor> pcursor(view->Cursor());\n+    assert(pcursor);\n+\n+    CHashWriter ss(SER_GETHASH, PROTOCOL_VERSION);\n+    stats.hashBlock = pcursor->GetBestBlock();\n+    {\n+        LOCK(cs_main);\n+        stats.nHeight = LookupBlockIndex(stats.hashBlock)->nHeight;\n+    }\n+    ss << stats.hashBlock;\n+    uint256 prevkey;\n+    std::map<uint32_t, Coin> outputs;\n+    while (pcursor->Valid()) {\n+        boost::this_thread::interruption_point();\n+        COutPoint key;\n+        Coin coin;\n+        if (pcursor->GetKey(key) && pcursor->GetValue(coin)) {\n+            if (!outputs.empty() && key.hash != prevkey) {\n+                ApplyStats(stats, ss, prevkey, outputs);\n+                outputs.clear();\n+            }\n+            prevkey = key.hash;\n+            outputs[key.n] = std::move(coin);\n+        } else {\n+            return error(\"%s: unable to read value\", __func__);\n+        }\n+        pcursor->Next();\n+    }\n+    if (!outputs.empty()) {\n+        ApplyStats(stats, ss, prevkey, outputs);\n+    }\n+    stats.hashSerialized = ss.GetHash();\n+    stats.nDiskSize = view->EstimateSize();\n+    return true;\n+}"
      },
      {
        "sha": "7c11aab8bd0d4e88e2d33cf9dc4eca5ef5d0c358",
        "filename": "src/node/coinstats.h",
        "status": "added",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/node/coinstats.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/node/coinstats.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coinstats.h?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -0,0 +1,33 @@\n+// Copyright (c) 2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_COINSTATS_H\n+#define BITCOIN_NODE_COINSTATS_H\n+\n+#include <amount.h>\n+#include <uint256.h>\n+\n+#include <cstdint>\n+\n+class CCoinsView;\n+\n+struct CCoinsStats\n+{\n+    int nHeight;\n+    uint256 hashBlock;\n+    uint64_t nTransactions;\n+    uint64_t nTransactionOutputs;\n+    uint64_t nBogoSize;\n+    uint256 hashSerialized;\n+    uint64_t nDiskSize;\n+    CAmount nTotalAmount;\n+\n+    CCoinsStats() : nHeight(0), nTransactions(0), nTransactionOutputs(0), nBogoSize(0), nDiskSize(0), nTotalAmount(0) {}\n+};\n+\n+//! Calculate statistics about the unspent transaction output set\n+bool GetUTXOStats(CCoinsView* view, CCoinsStats& stats);\n+\n+#endif // BITCOIN_NODE_COINSTATS_H"
      },
      {
        "sha": "2ababb5e1efc615fe3fc7984bcd5a08ef604acfb",
        "filename": "src/qt/askpassphrasedialog.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 21,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/askpassphrasedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/askpassphrasedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/askpassphrasedialog.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -18,12 +18,13 @@\n #include <QMessageBox>\n #include <QPushButton>\n \n-AskPassphraseDialog::AskPassphraseDialog(Mode _mode, QWidget *parent) :\n+AskPassphraseDialog::AskPassphraseDialog(Mode _mode, QWidget *parent, SecureString* passphrase_out) :\n     QDialog(parent),\n     ui(new Ui::AskPassphraseDialog),\n     mode(_mode),\n     model(nullptr),\n-    fCapsLock(false)\n+    fCapsLock(false),\n+    m_passphrase_out(passphrase_out)\n {\n     ui->setupUi(this);\n \n@@ -43,7 +44,7 @@ AskPassphraseDialog::AskPassphraseDialog(Mode _mode, QWidget *parent) :\n     switch(mode)\n     {\n         case Encrypt: // Ask passphrase x2\n-            ui->warningLabel->setText(tr(\"Enter the new passphrase to the wallet.<br/>Please use a passphrase of <b>ten or more random characters</b>, or <b>eight or more words</b>.\"));\n+            ui->warningLabel->setText(tr(\"Enter the new passphrase for the wallet.<br/>Please use a passphrase of <b>ten or more random characters</b>, or <b>eight or more words</b>.\"));\n             ui->passLabel1->hide();\n             ui->passEdit1->hide();\n             setWindowTitle(tr(\"Encrypt wallet\"));\n@@ -66,7 +67,7 @@ AskPassphraseDialog::AskPassphraseDialog(Mode _mode, QWidget *parent) :\n             break;\n         case ChangePass: // Ask old passphrase + new passphrase x2\n             setWindowTitle(tr(\"Change passphrase\"));\n-            ui->warningLabel->setText(tr(\"Enter the old passphrase and new passphrase to the wallet.\"));\n+            ui->warningLabel->setText(tr(\"Enter the old passphrase and new passphrase for the wallet.\"));\n             break;\n     }\n     textChanged();\n@@ -90,7 +91,7 @@ void AskPassphraseDialog::setModel(WalletModel *_model)\n void AskPassphraseDialog::accept()\n {\n     SecureString oldpass, newpass1, newpass2;\n-    if(!model)\n+    if (!model && mode != Encrypt)\n         return;\n     oldpass.reserve(MAX_PASSPHRASE_SIZE);\n     newpass1.reserve(MAX_PASSPHRASE_SIZE);\n@@ -119,24 +120,33 @@ void AskPassphraseDialog::accept()\n         {\n             if(newpass1 == newpass2)\n             {\n-                if(model->setWalletEncrypted(true, newpass1))\n-                {\n-                    QMessageBox::warning(this, tr(\"Wallet encrypted\"),\n+                QString encryption_reminder = tr(\"Remember that encrypting your wallet cannot fully protect \"\n+                \"your bitcoins from being stolen by malware infecting your computer.\");\n+                if (m_passphrase_out) {\n+                    m_passphrase_out->assign(newpass1);\n+                    QMessageBox::warning(this, tr(\"Wallet to be encrypted\"),\n                                          \"<qt>\" +\n-                                         tr(\"Your wallet is now encrypted. \"\n-                                         \"Remember that encrypting your wallet cannot fully protect \"\n-                                         \"your bitcoins from being stolen by malware infecting your computer.\") +\n-                                         \"<br><br><b>\" +\n-                                         tr(\"IMPORTANT: Any previous backups you have made of your wallet file \"\n-                                         \"should be replaced with the newly generated, encrypted wallet file. \"\n-                                         \"For security reasons, previous backups of the unencrypted wallet file \"\n-                                         \"will become useless as soon as you start using the new, encrypted wallet.\") +\n+                                         tr(\"Your wallet is about to be encrypted. \") + encryption_reminder +\n                                          \"</b></qt>\");\n-                }\n-                else\n-                {\n-                    QMessageBox::critical(this, tr(\"Wallet encryption failed\"),\n-                                         tr(\"Wallet encryption failed due to an internal error. Your wallet was not encrypted.\"));\n+                } else {\n+                    assert(model != nullptr);\n+                    if(model->setWalletEncrypted(true, newpass1))\n+                    {\n+                        QMessageBox::warning(this, tr(\"Wallet encrypted\"),\n+                                             \"<qt>\" +\n+                                             tr(\"Your wallet is now encrypted. \") + encryption_reminder +\n+                                             \"<br><br><b>\" +\n+                                             tr(\"IMPORTANT: Any previous backups you have made of your wallet file \"\n+                                             \"should be replaced with the newly generated, encrypted wallet file. \"\n+                                             \"For security reasons, previous backups of the unencrypted wallet file \"\n+                                             \"will become useless as soon as you start using the new, encrypted wallet.\") +\n+                                             \"</b></qt>\");\n+                    }\n+                    else\n+                    {\n+                        QMessageBox::critical(this, tr(\"Wallet encryption failed\"),\n+                                             tr(\"Wallet encryption failed due to an internal error. Your wallet was not encrypted.\"));\n+                    }\n                 }\n                 QDialog::accept(); // Success\n             }"
      },
      {
        "sha": "bdfd3fb9a0695971df52c9cccbcb93f70c903929",
        "filename": "src/qt/askpassphrasedialog.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/askpassphrasedialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/askpassphrasedialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/askpassphrasedialog.h?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -7,6 +7,8 @@\n \n #include <QDialog>\n \n+#include <support/allocators/secure.h>\n+\n class WalletModel;\n \n namespace Ui {\n@@ -27,7 +29,7 @@ class AskPassphraseDialog : public QDialog\n         Decrypt     /**< Ask passphrase and decrypt wallet */\n     };\n \n-    explicit AskPassphraseDialog(Mode mode, QWidget *parent);\n+    explicit AskPassphraseDialog(Mode mode, QWidget *parent, SecureString* passphrase_out = nullptr);\n     ~AskPassphraseDialog();\n \n     void accept();\n@@ -39,6 +41,7 @@ class AskPassphraseDialog : public QDialog\n     Mode mode;\n     WalletModel *model;\n     bool fCapsLock;\n+    SecureString* m_passphrase_out;\n \n private Q_SLOTS:\n     void textChanged();"
      },
      {
        "sha": "46f8deee5748f3a63dd2a532feb7e72681bc378e",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 4,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -282,6 +282,10 @@ void BitcoinApplication::parameterSetup()\n     m_node.initParameterInteraction();\n }\n \n+void BitcoinApplication::SetPrune(bool prune, bool force) {\n+     optionsModel->SetPrune(prune, force);\n+}\n+\n void BitcoinApplication::requestInitialize()\n {\n     qDebug() << __func__ << \": Requesting initialize\";\n@@ -487,8 +491,10 @@ int GuiMain(int argc, char* argv[])\n \n     /// 5. Now that settings and translations are available, ask user for data directory\n     // User language is set up: pick a data directory\n-    if (!Intro::pickDataDirectory(*node))\n-        return EXIT_SUCCESS;\n+    bool did_show_intro = false;\n+    bool prune = false; // Intro dialog prune check box\n+    // Gracefully exit if the user cancels\n+    if (!Intro::showIfNeeded(*node, did_show_intro, prune)) return EXIT_SUCCESS;\n \n     /// 6. Determine availability of data directory and parse bitcoin.conf\n     /// - Do not call GetDataDir(true) before this step finishes\n@@ -511,7 +517,7 @@ int GuiMain(int argc, char* argv[])\n     // - QSettings() will use the new application name after this, resulting in network-specific settings\n     // - Needs to be done before createOptionsModel\n \n-    // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n+    // Check for -chain, -testnet or -regtest parameter (Params() calls are only valid after this clause)\n     try {\n         node->selectParams(gArgs.GetChainName());\n     } catch(std::exception &e) {\n@@ -524,7 +530,7 @@ int GuiMain(int argc, char* argv[])\n     PaymentServer::ipcParseCommandLine(*node, argc, argv);\n #endif\n \n-    QScopedPointer<const NetworkStyle> networkStyle(NetworkStyle::instantiate(QString::fromStdString(Params().NetworkIDString())));\n+    QScopedPointer<const NetworkStyle> networkStyle(NetworkStyle::instantiate(Params().NetworkIDString()));\n     assert(!networkStyle.isNull());\n     // Allow for separate UI settings for testnets\n     QApplication::setApplicationName(networkStyle->getAppName());\n@@ -562,6 +568,11 @@ int GuiMain(int argc, char* argv[])\n     // Load GUI settings from QSettings\n     app.createOptionsModel(gArgs.GetBoolArg(\"-resetguisettings\", false));\n \n+    if (did_show_intro) {\n+        // Store intro dialog settings other than datadir (network specific)\n+        app.SetPrune(prune, true);\n+    }\n+\n     if (gArgs.GetBoolArg(\"-splash\", DEFAULT_SPLASHSCREEN) && !gArgs.GetBoolArg(\"-min\", false))\n         app.createSplashScreen(networkStyle.data());\n "
      },
      {
        "sha": "8c77fd8a7d85b90baf64ff67281a1c87c57c9e65",
        "filename": "src/qt/bitcoin.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.h?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -67,6 +67,8 @@ class BitcoinApplication: public QApplication\n     void parameterSetup();\n     /// Create options model\n     void createOptionsModel(bool resetSettings);\n+    /// Update prune value\n+    void SetPrune(bool prune, bool force = false);\n     /// Create main window\n     void createWindow(const NetworkStyle *networkStyle);\n     /// Create splash screen"
      },
      {
        "sha": "9fa49b87fad46c9632840485111513eff9bec089",
        "filename": "src/qt/bitcoinamountfield.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/bitcoinamountfield.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/bitcoinamountfield.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -6,6 +6,7 @@\n \n #include <qt/bitcoinunits.h>\n #include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n #include <qt/qvaluecombobox.h>\n \n #include <QApplication>\n@@ -121,7 +122,7 @@ class AmountSpinBox: public QAbstractSpinBox\n \n             const QFontMetrics fm(fontMetrics());\n             int h = lineEdit()->minimumSizeHint().height();\n-            int w = fm.width(BitcoinUnits::format(BitcoinUnits::BTC, BitcoinUnits::maxMoney(), false, BitcoinUnits::separatorAlways));\n+            int w = GUIUtil::TextWidth(fm, BitcoinUnits::format(BitcoinUnits::BTC, BitcoinUnits::maxMoney(), false, BitcoinUnits::separatorAlways));\n             w += 2; // cursor blinking space\n \n             QStyleOptionSpinBox opt;"
      },
      {
        "sha": "7671fde70513daceeebe4851eccc27e7d7715e2e",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 36,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -6,6 +6,7 @@\n \n #include <qt/bitcoinunits.h>\n #include <qt/clientmodel.h>\n+#include <qt/createwalletdialog.h>\n #include <qt/guiconstants.h>\n #include <qt/guiutil.h>\n #include <qt/modaloverlay.h>\n@@ -40,14 +41,14 @@\n #include <QApplication>\n #include <QComboBox>\n #include <QDateTime>\n-#include <QDesktopWidget>\n #include <QDragEnterEvent>\n #include <QListWidget>\n #include <QMenu>\n #include <QMenuBar>\n #include <QMessageBox>\n #include <QMimeData>\n #include <QProgressDialog>\n+#include <QScreen>\n #include <QSettings>\n #include <QShortcut>\n #include <QStackedWidget>\n@@ -81,7 +82,7 @@ BitcoinGUI::BitcoinGUI(interfaces::Node& node, const PlatformStyle *_platformSty\n     QSettings settings;\n     if (!restoreGeometry(settings.value(\"MainWindowGeometry\").toByteArray())) {\n         // Restore failed (perhaps missing setting), center the window\n-        move(QApplication::desktop()->availableGeometry().center() - frameGeometry().center());\n+        move(QGuiApplication::primaryScreen()->availableGeometry().center() - frameGeometry().center());\n     }\n \n #ifdef ENABLE_WALLET\n@@ -339,6 +340,9 @@ void BitcoinGUI::createActions()\n     m_close_wallet_action = new QAction(tr(\"Close Wallet...\"), this);\n     m_close_wallet_action->setStatusTip(tr(\"Close wallet\"));\n \n+    m_create_wallet_action = new QAction(tr(\"Create Wallet...\"), this);\n+    m_create_wallet_action->setStatusTip(tr(\"Create a new wallet\"));\n+\n     showHelpMessageAction = new QAction(tr(\"&Command-line options\"), this);\n     showHelpMessageAction->setMenuRole(QAction::NoRole);\n     showHelpMessageAction->setStatusTip(tr(\"Show the %1 help message to get a list with possible Bitcoin command-line options\").arg(PACKAGE_NAME));\n@@ -371,6 +375,10 @@ void BitcoinGUI::createActions()\n             for (const std::pair<const std::string, bool>& i : m_wallet_controller->listWalletDir()) {\n                 const std::string& path = i.first;\n                 QString name = path.empty() ? QString(\"[\"+tr(\"default wallet\")+\"]\") : QString::fromStdString(path);\n+                // Menu items remove single &. Single & are shown when && is in\n+                // the string, but only the first occurrence. So replace only\n+                // the first & with &&.\n+                name.replace(name.indexOf(QChar('&')), 1, QString(\"&&\"));\n                 QAction* action = m_open_wallet_menu->addAction(name);\n \n                 if (i.second) {\n@@ -379,31 +387,11 @@ void BitcoinGUI::createActions()\n                     continue;\n                 }\n \n-                connect(action, &QAction::triggered, [this, name, path] {\n-                    OpenWalletActivity* activity = m_wallet_controller->openWallet(path);\n-\n-                    QProgressDialog* dialog = new QProgressDialog(this);\n-                    dialog->setLabelText(tr(\"Opening Wallet <b>%1</b>...\").arg(name.toHtmlEscaped()));\n-                    dialog->setRange(0, 0);\n-                    dialog->setCancelButton(nullptr);\n-                    dialog->setWindowModality(Qt::ApplicationModal);\n-                    dialog->show();\n-\n-                    connect(activity, &OpenWalletActivity::message, this, [this] (QMessageBox::Icon icon, QString text) {\n-                        QMessageBox box;\n-                        box.setIcon(icon);\n-                        box.setText(tr(\"Open Wallet Failed\"));\n-                        box.setInformativeText(text);\n-                        box.setStandardButtons(QMessageBox::Ok);\n-                        box.setDefaultButton(QMessageBox::Ok);\n-                        connect(this, &QObject::destroyed, &box, &QDialog::accept);\n-                        box.exec();\n-                    });\n+                connect(action, &QAction::triggered, [this, path] {\n+                    auto activity = new OpenWalletActivity(m_wallet_controller, this);\n                     connect(activity, &OpenWalletActivity::opened, this, &BitcoinGUI::setCurrentWallet);\n                     connect(activity, &OpenWalletActivity::finished, activity, &QObject::deleteLater);\n-                    connect(activity, &OpenWalletActivity::finished, dialog, &QObject::deleteLater);\n-                    bool invoked = QMetaObject::invokeMethod(activity, \"open\");\n-                    assert(invoked);\n+                    activity->open(path);\n                 });\n             }\n             if (m_open_wallet_menu->isEmpty()) {\n@@ -414,6 +402,12 @@ void BitcoinGUI::createActions()\n         connect(m_close_wallet_action, &QAction::triggered, [this] {\n             m_wallet_controller->closeWallet(walletFrame->currentWalletModel(), this);\n         });\n+        connect(m_create_wallet_action, &QAction::triggered, [this] {\n+            auto activity = new CreateWalletActivity(m_wallet_controller, this);\n+            connect(activity, &CreateWalletActivity::created, this, &BitcoinGUI::setCurrentWallet);\n+            connect(activity, &CreateWalletActivity::finished, activity, &QObject::deleteLater);\n+            activity->create();\n+        });\n     }\n #endif // ENABLE_WALLET\n \n@@ -435,6 +429,7 @@ void BitcoinGUI::createMenuBar()\n     QMenu *file = appMenuBar->addMenu(tr(\"&File\"));\n     if(walletFrame)\n     {\n+        file->addAction(m_create_wallet_action);\n         file->addAction(m_open_wallet_action);\n         file->addAction(m_close_wallet_action);\n         file->addSeparator();\n@@ -480,24 +475,16 @@ void BitcoinGUI::createMenuBar()\n     connect(qApp, &QApplication::focusWindowChanged, [zoom_action] (QWindow* window) {\n         zoom_action->setEnabled(window != nullptr);\n     });\n-#else\n-    QAction* restore_action = window_menu->addAction(tr(\"Restore\"));\n-    connect(restore_action, &QAction::triggered, [] {\n-        qApp->focusWindow()->showNormal();\n-    });\n-\n-    connect(qApp, &QApplication::focusWindowChanged, [restore_action] (QWindow* window) {\n-        restore_action->setEnabled(window != nullptr);\n-    });\n #endif\n \n     if (walletFrame) {\n+#ifdef Q_OS_MAC\n         window_menu->addSeparator();\n         QAction* main_window_action = window_menu->addAction(tr(\"Main Window\"));\n         connect(main_window_action, &QAction::triggered, [this] {\n             GUIUtil::bringToFront(this);\n         });\n-\n+#endif\n         window_menu->addSeparator();\n         window_menu->addAction(usedSendingAddressesAction);\n         window_menu->addAction(usedReceivingAddressesAction);\n@@ -1407,7 +1394,7 @@ UnitDisplayStatusBarControl::UnitDisplayStatusBarControl(const PlatformStyle *pl\n     const QFontMetrics fm(font());\n     for (const BitcoinUnits::Unit unit : units)\n     {\n-        max_width = qMax(max_width, fm.width(BitcoinUnits::longName(unit)));\n+        max_width = qMax(max_width, GUIUtil::TextWidth(fm, BitcoinUnits::longName(unit)));\n     }\n     setMinimumSize(max_width, 0);\n     setAlignment(Qt::AlignRight | Qt::AlignVCenter);"
      },
      {
        "sha": "809cf8b4edf00f1486ea1d54af5b3b920c9b9811",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -147,6 +147,7 @@ class BitcoinGUI : public QMainWindow\n     QAction* openRPCConsoleAction = nullptr;\n     QAction* openAction = nullptr;\n     QAction* showHelpMessageAction = nullptr;\n+    QAction* m_create_wallet_action{nullptr};\n     QAction* m_open_wallet_action{nullptr};\n     QMenu* m_open_wallet_menu{nullptr};\n     QAction* m_close_wallet_action{nullptr};"
      },
      {
        "sha": "3d40ee782348069f55ad3af8324f53e28649d61f",
        "filename": "src/qt/bitcoinstrings.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/bitcoinstrings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/bitcoinstrings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinstrings.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -131,12 +131,12 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Initialization sanity check failed. %s is shu\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Insufficient funds\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Invalid -onion address or hostname: '%s'\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Invalid -proxy address or hostname: '%s'\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Invalid P2P permission: '%s'\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Invalid amount for -%s=<amount>: '%s'\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Invalid amount for -discardfee=<amount>: '%s'\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Invalid amount for -fallbackfee=<amount>: '%s'\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Invalid netmask specified in -whitelist: '%s'\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Keypool ran out, please call keypoolrefill first\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Loading P2P addresses...\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Loading banlist...\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Loading block index...\"),\n@@ -170,7 +170,6 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Transaction amounts must not be negative\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Transaction fee and change calculation failed\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Transaction has too long of a mempool chain\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Transaction must have at least one recipient\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Transaction too large for fee policy\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Transaction too large\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unable to bind to %s on this computer (bind returned error %s)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unable to bind to %s on this computer. %s is probably already running.\"),\n@@ -179,6 +178,8 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unable to generate initial keys\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unable to generate keys\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unable to start HTTP server. See debug log for details.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unknown -blockfilterindex value %s.\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unknown address type '%s'\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unknown change type '%s'\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unknown network specified in -onlynet: '%s'\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unsupported logging category %s=%s.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Upgrading UTXO database\"),"
      },
      {
        "sha": "8e6474b0d401f8b9566431180f4aa77ad425feca",
        "filename": "src/qt/createwalletdialog.cpp",
        "status": "added",
        "additions": 62,
        "deletions": 0,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/createwalletdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/createwalletdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/createwalletdialog.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -0,0 +1,62 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <qt/createwalletdialog.h>\n+#include <qt/forms/ui_createwalletdialog.h>\n+\n+#include <QPushButton>\n+\n+CreateWalletDialog::CreateWalletDialog(QWidget* parent) :\n+    QDialog(parent),\n+    ui(new Ui::CreateWalletDialog)\n+{\n+    ui->setupUi(this);\n+    ui->buttonBox->button(QDialogButtonBox::Ok)->setText(tr(\"Create\"));\n+    ui->buttonBox->button(QDialogButtonBox::Ok)->setEnabled(false);\n+    ui->wallet_name_line_edit->setFocus(Qt::ActiveWindowFocusReason);\n+\n+    connect(ui->wallet_name_line_edit, &QLineEdit::textEdited, [this](const QString& text) {\n+        ui->buttonBox->button(QDialogButtonBox::Ok)->setEnabled(!text.isEmpty());\n+    });\n+\n+    connect(ui->encrypt_wallet_checkbox, &QCheckBox::toggled, [this](bool checked) {\n+        // Disable the disable_privkeys_checkbox when isEncryptWalletChecked is\n+        // set to true, enable it when isEncryptWalletChecked is false.\n+        ui->disable_privkeys_checkbox->setEnabled(!checked);\n+\n+        // When the disable_privkeys_checkbox is disabled, uncheck it.\n+        if (!ui->disable_privkeys_checkbox->isEnabled()) {\n+            ui->disable_privkeys_checkbox->setChecked(false);\n+        }\n+    });\n+}\n+\n+CreateWalletDialog::~CreateWalletDialog()\n+{\n+    delete ui;\n+}\n+\n+QString CreateWalletDialog::walletName() const\n+{\n+    return ui->wallet_name_line_edit->text();\n+}\n+\n+bool CreateWalletDialog::isEncryptWalletChecked() const\n+{\n+    return ui->encrypt_wallet_checkbox->isChecked();\n+}\n+\n+bool CreateWalletDialog::isDisablePrivateKeysChecked() const\n+{\n+    return ui->disable_privkeys_checkbox->isChecked();\n+}\n+\n+bool CreateWalletDialog::isMakeBlankWalletChecked() const\n+{\n+    return ui->blank_wallet_checkbox->isChecked();\n+}"
      },
      {
        "sha": "30766107b9cab92035830f6b25289ba70949cd71",
        "filename": "src/qt/createwalletdialog.h",
        "status": "added",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/createwalletdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/createwalletdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/createwalletdialog.h?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -0,0 +1,35 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_QT_CREATEWALLETDIALOG_H\n+#define BITCOIN_QT_CREATEWALLETDIALOG_H\n+\n+#include <QDialog>\n+\n+class WalletModel;\n+\n+namespace Ui {\n+    class CreateWalletDialog;\n+}\n+\n+/** Dialog for creating wallets\n+ */\n+class CreateWalletDialog : public QDialog\n+{\n+    Q_OBJECT\n+\n+public:\n+    explicit CreateWalletDialog(QWidget* parent);\n+    virtual ~CreateWalletDialog();\n+\n+    QString walletName() const;\n+    bool isEncryptWalletChecked() const;\n+    bool isDisablePrivateKeysChecked() const;\n+    bool isMakeBlankWalletChecked() const;\n+\n+private:\n+    Ui::CreateWalletDialog *ui;\n+};\n+\n+#endif // BITCOIN_QT_CREATEWALLETDIALOG_H"
      },
      {
        "sha": "e74d1838187ea5eb95e75b953ea00b3e1a45858d",
        "filename": "src/qt/forms/askpassphrasedialog.ui",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/forms/askpassphrasedialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/forms/askpassphrasedialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/askpassphrasedialog.ui?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -95,7 +95,7 @@\n      <item row=\"3\" column=\"1\">\n       <widget class=\"QCheckBox\" name=\"toggleShowPasswordButton\">\n        <property name=\"text\">\n-        <string>Show password</string>\n+        <string>Show passphrase</string>\n        </property>\n       </widget>\n      </item>"
      },
      {
        "sha": "e49bab8f3bda5d9330473cdcfbee09715ae3b933",
        "filename": "src/qt/forms/createwalletdialog.ui",
        "status": "added",
        "additions": 151,
        "deletions": 0,
        "changes": 151,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/forms/createwalletdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/forms/createwalletdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/createwalletdialog.ui?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -0,0 +1,151 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<ui version=\"4.0\">\n+ <class>CreateWalletDialog</class>\n+ <widget class=\"QDialog\" name=\"CreateWalletDialog\">\n+  <property name=\"geometry\">\n+   <rect>\n+    <x>0</x>\n+    <y>0</y>\n+    <width>364</width>\n+    <height>185</height>\n+   </rect>\n+  </property>\n+  <property name=\"windowTitle\">\n+   <string>Create Wallet</string>\n+  </property>\n+  <widget class=\"QDialogButtonBox\" name=\"buttonBox\">\n+   <property name=\"geometry\">\n+    <rect>\n+     <x>10</x>\n+     <y>140</y>\n+     <width>341</width>\n+     <height>32</height>\n+    </rect>\n+   </property>\n+   <property name=\"orientation\">\n+    <enum>Qt::Horizontal</enum>\n+   </property>\n+   <property name=\"standardButtons\">\n+    <set>QDialogButtonBox::Cancel|QDialogButtonBox::Ok</set>\n+   </property>\n+  </widget>\n+  <widget class=\"QLineEdit\" name=\"wallet_name_line_edit\">\n+   <property name=\"geometry\">\n+    <rect>\n+     <x>120</x>\n+     <y>20</y>\n+     <width>231</width>\n+     <height>24</height>\n+    </rect>\n+   </property>\n+  </widget>\n+  <widget class=\"QLabel\" name=\"label\">\n+   <property name=\"geometry\">\n+    <rect>\n+     <x>20</x>\n+     <y>20</y>\n+     <width>101</width>\n+     <height>21</height>\n+    </rect>\n+   </property>\n+   <property name=\"text\">\n+    <string>Wallet Name</string>\n+   </property>\n+  </widget>\n+  <widget class=\"QCheckBox\" name=\"encrypt_wallet_checkbox\">\n+   <property name=\"geometry\">\n+    <rect>\n+     <x>20</x>\n+     <y>50</y>\n+     <width>171</width>\n+     <height>22</height>\n+    </rect>\n+   </property>\n+   <property name=\"toolTip\">\n+    <string>Encrypt the wallet. The wallet will be encrypted with a passphrase of your choice.</string>\n+   </property>\n+   <property name=\"text\">\n+    <string>Encrypt Wallet</string>\n+   </property>\n+   <property name=\"checked\">\n+    <bool>true</bool>\n+   </property>\n+  </widget>\n+  <widget class=\"QCheckBox\" name=\"disable_privkeys_checkbox\">\n+   <property name=\"enabled\">\n+    <bool>false</bool>\n+   </property>\n+   <property name=\"geometry\">\n+    <rect>\n+     <x>20</x>\n+     <y>80</y>\n+     <width>171</width>\n+     <height>22</height>\n+    </rect>\n+   </property>\n+   <property name=\"toolTip\">\n+    <string>Disable private keys for this wallet. Wallets with private keys disabled will have no private keys and cannot have an HD seed or imported private keys. This is ideal for watch-only wallets.</string>\n+   </property>\n+   <property name=\"text\">\n+    <string>Disable Private Keys</string>\n+   </property>\n+  </widget>\n+  <widget class=\"QCheckBox\" name=\"blank_wallet_checkbox\">\n+   <property name=\"geometry\">\n+    <rect>\n+     <x>20</x>\n+     <y>110</y>\n+     <width>171</width>\n+     <height>22</height>\n+    </rect>\n+   </property>\n+   <property name=\"toolTip\">\n+    <string>Make a blank wallet. Blank wallets do not initially have private keys or scripts. Private keys and addresses can be imported, or an HD seed can be set, at a later time.</string>\n+   </property>\n+   <property name=\"text\">\n+    <string>Make Blank Wallet</string>\n+   </property>\n+  </widget>\n+ </widget>\n+ <tabstops>\n+  <tabstop>wallet_name_line_edit</tabstop>\n+  <tabstop>encrypt_wallet_checkbox</tabstop>\n+  <tabstop>disable_privkeys_checkbox</tabstop>\n+  <tabstop>blank_wallet_checkbox</tabstop>\n+ </tabstops>\n+ <resources/>\n+ <connections>\n+  <connection>\n+   <sender>buttonBox</sender>\n+   <signal>accepted()</signal>\n+   <receiver>CreateWalletDialog</receiver>\n+   <slot>accept()</slot>\n+   <hints>\n+    <hint type=\"sourcelabel\">\n+     <x>248</x>\n+     <y>254</y>\n+    </hint>\n+    <hint type=\"destinationlabel\">\n+     <x>157</x>\n+     <y>274</y>\n+    </hint>\n+   </hints>\n+  </connection>\n+  <connection>\n+   <sender>buttonBox</sender>\n+   <signal>rejected()</signal>\n+   <receiver>CreateWalletDialog</receiver>\n+   <slot>reject()</slot>\n+   <hints>\n+    <hint type=\"sourcelabel\">\n+     <x>316</x>\n+     <y>260</y>\n+    </hint>\n+    <hint type=\"destinationlabel\">\n+     <x>286</x>\n+     <y>274</y>\n+    </hint>\n+   </hints>\n+  </connection>\n+ </connections>\n+</ui>"
      },
      {
        "sha": "be807b20c082237b2208d01b6dc10f166fa6c64a",
        "filename": "src/qt/forms/debugwindow.ui",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/forms/debugwindow.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/forms/debugwindow.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/debugwindow.ui?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -14,6 +14,25 @@\n    <string>Debug window</string>\n   </property>\n   <layout class=\"QVBoxLayout\" name=\"verticalLayout_2\">\n+   <item>\n+    <widget class=\"QLabel\" name=\"label_alerts\">\n+     <property name=\"visible\">\n+      <bool>false</bool>\n+     </property>\n+     <property name=\"styleSheet\">\n+      <string notr=\"true\">QLabel { background-color: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 0, stop:0 #F0D0A0, stop:1 #F8D488); color:#000000; }</string>\n+     </property>\n+     <property name=\"wordWrap\">\n+      <bool>true</bool>\n+     </property>\n+     <property name=\"margin\">\n+      <number>3</number>\n+     </property>\n+     <property name=\"textInteractionFlags\">\n+      <set>Qt::TextSelectableByMouse</set>\n+     </property>\n+    </widget>\n+   </item>\n    <item>\n     <widget class=\"QTabWidget\" name=\"tabWidget\">\n      <property name=\"currentIndex\">"
      },
      {
        "sha": "f27a4ebe44df6a358339168885af251743a00a40",
        "filename": "src/qt/forms/intro.ui",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/forms/intro.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/forms/intro.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/intro.ui?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -210,6 +210,16 @@\n      </property>\n     </widget>\n    </item>\n+   <item>\n+    <widget class=\"QCheckBox\" name=\"prune\">\n+     <property name=\"toolTip\">\n+      <string>Reverting this setting requires re-downloading the entire blockchain. It is faster to download the full chain first and prune it later. Disables some advanced features.</string>\n+     </property>\n+     <property name=\"text\">\n+      <string></string>\n+     </property>\n+    </widget>\n+   </item>\n    <item>\n     <widget class=\"QLabel\" name=\"lblExplanation2\">\n      <property name=\"text\">"
      },
      {
        "sha": "dcdb2479770f875ccbf09c287a845f1d8ef60683",
        "filename": "src/qt/guiconstants.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/guiconstants.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/guiconstants.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiconstants.h?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef BITCOIN_QT_GUICONSTANTS_H\n #define BITCOIN_QT_GUICONSTANTS_H\n \n+#include <cstdint>\n+\n /* Milliseconds between model updates */\n static const int MODEL_UPDATE_DELAY = 250;\n "
      },
      {
        "sha": "c4e0321f283eeaa573dbcf85b30d10e2453fd84a",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 10,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -39,7 +39,6 @@\n #include <QClipboard>\n #include <QDateTime>\n #include <QDesktopServices>\n-#include <QDesktopWidget>\n #include <QDoubleValidator>\n #include <QFileDialog>\n #include <QFont>\n@@ -58,9 +57,10 @@\n #pragma GCC diagnostic push\n #pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n \n-#include <objc/objc-runtime.h>\n #include <CoreServices/CoreServices.h>\n #include <QProcess>\n+\n+void ForceActivation();\n #endif\n \n namespace GUIUtil {\n@@ -360,10 +360,7 @@ bool isObscured(QWidget *w)\n void bringToFront(QWidget* w)\n {\n #ifdef Q_OS_MAC\n-    // Force application activation on macOS. With Qt 5.4 this is required when\n-    // an action in the dock menu is triggered.\n-    id app = objc_msgSend((id) objc_getClass(\"NSApplication\"), sel_registerName(\"sharedApplication\"));\n-    objc_msgSend(app, sel_registerName(\"activateIgnoringOtherApps:\"), YES);\n+    ForceActivation();\n #endif\n \n     if (w) {\n@@ -591,7 +588,7 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n             // Start client minimized\n             QString strArgs = \"-min\";\n             // Set -testnet /-regtest options\n-            strArgs += QString::fromStdString(strprintf(\" -testnet=%d -regtest=%d\", gArgs.GetBoolArg(\"-testnet\", false), gArgs.GetBoolArg(\"-regtest\", false)));\n+            strArgs += QString::fromStdString(strprintf(\" -chain=%s\", gArgs.GetChainName()));\n \n             // Set the path to the shortcut target\n             psl->SetPath(pszExePath);\n@@ -686,7 +683,7 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n             optionFile << \"Name=Bitcoin\\n\";\n         else\n             optionFile << strprintf(\"Name=Bitcoin (%s)\\n\", chain);\n-        optionFile << \"Exec=\" << pszExePath << strprintf(\" -min -testnet=%d -regtest=%d\\n\", gArgs.GetBoolArg(\"-testnet\", false), gArgs.GetBoolArg(\"-regtest\", false));\n+        optionFile << \"Exec=\" << pszExePath << strprintf(\" -min -chain=%s\\n\", chain);\n         optionFile << \"Terminal=false\\n\";\n         optionFile << \"Hidden=false\\n\";\n         optionFile.close();\n@@ -916,7 +913,7 @@ qreal calculateIdealFontSize(int width, const QString& text, QFont font, qreal m\n     while(font_size >= minPointSize) {\n         font.setPointSizeF(font_size);\n         QFontMetrics fm(font);\n-        if (fm.width(text) < width) {\n+        if (TextWidth(fm, text) < width) {\n             break;\n         }\n         font_size -= 0.5;\n@@ -948,12 +945,21 @@ void PolishProgressDialog(QProgressDialog* dialog)\n {\n #ifdef Q_OS_MAC\n     // Workaround for macOS-only Qt bug; see: QTBUG-65750, QTBUG-70357.\n-    const int margin = dialog->fontMetrics().width(\"X\");\n+    const int margin = TextWidth(dialog->fontMetrics(), (\"X\"));\n     dialog->resize(dialog->width() + 2 * margin, dialog->height());\n     dialog->show();\n #else\n     Q_UNUSED(dialog);\n #endif\n }\n \n+int TextWidth(const QFontMetrics& fm, const QString& text)\n+{\n+#if (QT_VERSION >= QT_VERSION_CHECK(5, 11, 0))\n+    return fm.horizontalAdvance(text);\n+#else\n+    return fm.width(text);\n+#endif\n+}\n+\n } // namespace GUIUtil"
      },
      {
        "sha": "9db92f94d723b4934929991f282f8eecdb847450",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -257,6 +257,14 @@ namespace GUIUtil\n \n     // Fix known bugs in QProgressDialog class.\n     void PolishProgressDialog(QProgressDialog* dialog);\n+\n+    /**\n+     * Returns the distance in pixels appropriate for drawing a subsequent character after text.\n+     *\n+     * In Qt 5.12 and before the QFontMetrics::width() is used and it is deprecated since Qt 13.0.\n+     * In Qt 5.11 the QFontMetrics::horizontalAdvance() was introduced.\n+     */\n+    int TextWidth(const QFontMetrics& fm, const QString& text);\n } // namespace GUIUtil\n \n #endif // BITCOIN_QT_GUIUTIL_H"
      },
      {
        "sha": "9e05c63aa013e844808a623cb81a928a47883968",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 1,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -131,6 +131,11 @@ Intro::Intro(QWidget *parent, uint64_t blockchain_size, uint64_t chain_state_siz\n     ui->lblExplanation2->setText(ui->lblExplanation2->text().arg(PACKAGE_NAME));\n \n     uint64_t pruneTarget = std::max<int64_t>(0, gArgs.GetArg(\"-prune\", 0));\n+    if (pruneTarget > 1) { // -prune=1 means enabled, above that it's a size in MB\n+        ui->prune->setChecked(true);\n+        ui->prune->setEnabled(false);\n+    }\n+    ui->prune->setText(tr(\"Discard blocks after verification, except most recent %1 GB (prune)\").arg(pruneTarget ? pruneTarget / 1000 : 2));\n     requiredSpace = m_blockchain_size;\n     QString storageRequiresMsg = tr(\"At least %1 GB of data will be stored in this directory, and it will grow over time.\");\n     if (pruneTarget) {\n@@ -180,8 +185,10 @@ void Intro::setDataDirectory(const QString &dataDir)\n     }\n }\n \n-bool Intro::pickDataDirectory(interfaces::Node& node)\n+bool Intro::showIfNeeded(interfaces::Node& node, bool& did_show_intro, bool& prune)\n {\n+    did_show_intro = false;\n+\n     QSettings settings;\n     /* If data directory provided on command line, no need to look at settings\n        or show a picking dialog */\n@@ -205,6 +212,7 @@ bool Intro::pickDataDirectory(interfaces::Node& node)\n         Intro intro(0, node.getAssumedBlockchainSize(), node.getAssumedChainStateSize());\n         intro.setDataDirectory(dataDir);\n         intro.setWindowIcon(QIcon(\":icons/bitcoin\"));\n+        did_show_intro = true;\n \n         while(true)\n         {\n@@ -227,6 +235,9 @@ bool Intro::pickDataDirectory(interfaces::Node& node)\n             }\n         }\n \n+        // Additional preferences:\n+        prune = intro.ui->prune->isChecked();\n+\n         settings.setValue(\"strDataDir\", dataDir);\n         settings.setValue(\"fReset\", false);\n     }\n@@ -263,6 +274,11 @@ void Intro::setStatus(int status, const QString &message, quint64 bytesAvailable\n         {\n             freeString += \" \" + tr(\"(of %n GB needed)\", \"\", requiredSpace);\n             ui->freeSpace->setStyleSheet(\"QLabel { color: #800000 }\");\n+            ui->prune->setChecked(true);\n+        } else if (bytesAvailable / GB_BYTES - requiredSpace < 10) {\n+            freeString += \" \" + tr(\"(%n GB needed for full chain)\", \"\", requiredSpace);\n+            ui->freeSpace->setStyleSheet(\"QLabel { color: #999900 }\");\n+            ui->prune->setChecked(true);\n         } else {\n             ui->freeSpace->setStyleSheet(\"\");\n         }"
      },
      {
        "sha": "aca7e7164200fd2c0b869f001931d7be56750b0d",
        "filename": "src/qt/intro.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/intro.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/intro.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.h?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -39,14 +39,15 @@ class Intro : public QDialog\n \n     /**\n      * Determine data directory. Let the user choose if the current one doesn't exist.\n+     * Let the user configure additional preferences such as pruning.\n      *\n      * @returns true if a data directory was selected, false if the user cancelled the selection\n      * dialog.\n      *\n      * @note do NOT call global GetDataDir() before calling this function, this\n      * will cause the wrong path to be cached.\n      */\n-    static bool pickDataDirectory(interfaces::Node& node);\n+    static bool showIfNeeded(interfaces::Node& node, bool& did_show_intro, bool& prune);\n \n Q_SIGNALS:\n     void requestCheck();"
      },
      {
        "sha": "7d9e7eab4edbb67e31e4579bd676696de3154a84",
        "filename": "src/qt/locale/bitcoin_en.ts",
        "status": "modified",
        "additions": 256,
        "deletions": 135,
        "changes": 391,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/locale/bitcoin_en.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/locale/bitcoin_en.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_en.ts?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -132,7 +132,7 @@\n <context>\n     <name>AddressTableModel</name>\n     <message>\n-        <location filename=\"../addresstablemodel.cpp\" line=\"+163\"/>\n+        <location filename=\"../addresstablemodel.cpp\" line=\"+165\"/>\n         <source>Label</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -171,16 +171,11 @@\n     </message>\n     <message>\n         <location line=\"+14\"/>\n-        <source>Show password</source>\n+        <source>Show passphrase</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location filename=\"../askpassphrasedialog.cpp\" line=\"+46\"/>\n-        <source>Enter the new passphrase to the wallet.&lt;br/&gt;Please use a passphrase of &lt;b&gt;ten or more random characters&lt;/b&gt;, or &lt;b&gt;eight or more words&lt;/b&gt;.</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n-    <message>\n-        <location line=\"+3\"/>\n+        <location filename=\"../askpassphrasedialog.cpp\" line=\"+50\"/>\n         <source>Encrypt wallet</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -210,12 +205,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+1\"/>\n-        <source>Enter the old passphrase and new passphrase to the wallet.</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n-    <message>\n-        <location line=\"+45\"/>\n+        <location line=\"+46\"/>\n         <source>Confirm wallet encryption</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -230,36 +220,61 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+9\"/>\n-        <location line=\"+58\"/>\n+        <location line=\"+19\"/>\n+        <location line=\"+57\"/>\n         <source>Wallet encrypted</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-56\"/>\n-        <source>Your wallet is now encrypted. Remember that encrypting your wallet cannot fully protect your bitcoins from being stolen by malware infecting your computer.</source>\n+        <location line=\"-145\"/>\n+        <source>Enter the new passphrase for the wallet.&lt;br/&gt;Please use a passphrase of &lt;b&gt;ten or more random characters&lt;/b&gt;, or &lt;b&gt;eight or more words&lt;/b&gt;.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+23\"/>\n+        <source>Enter the old passphrase and new passphrase for the wallet.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+53\"/>\n+        <source>Remember that encrypting your wallet cannot fully protect your bitcoins from being stolen by malware infecting your computer.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+4\"/>\n+        <source>Wallet to be encrypted</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+2\"/>\n+        <source>Your wallet is about to be encrypted. </source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+8\"/>\n+        <source>Your wallet is now encrypted. </source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+2\"/>\n         <source>IMPORTANT: Any previous backups you have made of your wallet file should be replaced with the newly generated, encrypted wallet file. For security reasons, previous backups of the unencrypted wallet file will become useless as soon as you start using the new, encrypted wallet.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+8\"/>\n-        <location line=\"+7\"/>\n+        <location line=\"+8\"/>\n         <location line=\"+43\"/>\n         <location line=\"+6\"/>\n         <source>Wallet encryption failed</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-55\"/>\n+        <location line=\"-56\"/>\n         <source>Wallet encryption failed due to an internal error. Your wallet was not encrypted.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+7\"/>\n+        <location line=\"+8\"/>\n         <location line=\"+49\"/>\n         <source>The supplied passphrases do not match.</source>\n         <translation type=\"unfinished\"></translation>\n@@ -297,7 +312,7 @@\n <context>\n     <name>BanTableModel</name>\n     <message>\n-        <location filename=\"../bantablemodel.cpp\" line=\"+86\"/>\n+        <location filename=\"../bantablemodel.cpp\" line=\"+88\"/>\n         <source>IP/Netmask</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -310,17 +325,17 @@\n <context>\n     <name>BitcoinGUI</name>\n     <message>\n-        <location filename=\"../bitcoingui.cpp\" line=\"+318\"/>\n+        <location filename=\"../bitcoingui.cpp\" line=\"+316\"/>\n         <source>Sign &amp;message...</source>\n         <translation>Sign &amp;message...</translation>\n     </message>\n     <message>\n-        <location line=\"+638\"/>\n+        <location line=\"+623\"/>\n         <source>Synchronizing with network...</source>\n         <translation>Synchronizing with network...</translation>\n     </message>\n     <message>\n-        <location line=\"-716\"/>\n+        <location line=\"-701\"/>\n         <source>&amp;Overview</source>\n         <translation>&amp;Overview</translation>\n     </message>\n@@ -400,7 +415,17 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+217\"/>\n+        <location line=\"+11\"/>\n+        <source>Create Wallet...</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+1\"/>\n+        <source>Create a new wallet</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+190\"/>\n         <source>Wallet:</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -435,7 +460,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-1036\"/>\n+        <location line=\"-1021\"/>\n         <source>Send coins to a Bitcoin address</source>\n         <translation>Send coins to a Bitcoin address</translation>\n     </message>\n@@ -500,17 +525,17 @@\n         <translation>Verify messages to ensure they were signed with specified Bitcoin addresses</translation>\n     </message>\n     <message>\n-        <location line=\"+118\"/>\n+        <location line=\"+110\"/>\n         <source>&amp;File</source>\n         <translation>&amp;File</translation>\n     </message>\n     <message>\n-        <location line=\"+14\"/>\n+        <location line=\"+15\"/>\n         <source>&amp;Settings</source>\n         <translation>&amp;Settings</translation>\n     </message>\n     <message>\n-        <location line=\"+66\"/>\n+        <location line=\"+58\"/>\n         <source>&amp;Help</source>\n         <translation>&amp;Help</translation>\n     </message>\n@@ -520,7 +545,7 @@\n         <translation>Tabs toolbar</translation>\n     </message>\n     <message>\n-        <location line=\"-271\"/>\n+        <location line=\"-256\"/>\n         <source>Request payments (generates QR codes and bitcoin: URIs)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -540,12 +565,12 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+10\"/>\n+        <location line=\"+13\"/>\n         <source>&amp;Command-line options</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message numerus=\"yes\">\n-        <location line=\"+540\"/>\n+        <location line=\"+522\"/>\n         <source>%n active connection(s) to Bitcoin network</source>\n         <translation>\n             <numerusform>%n active connection to Bitcoin network</numerusform>\n@@ -606,7 +631,7 @@\n         <translation>Up to date</translation>\n     </message>\n     <message>\n-        <location line=\"-657\"/>\n+        <location line=\"-642\"/>\n         <source>&amp;Sending addresses</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -636,32 +661,22 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+4\"/>\n+        <location line=\"+7\"/>\n         <source>Show the %1 help message to get a list with possible Bitcoin command-line options</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+30\"/>\n+        <location line=\"+29\"/>\n         <source>default wallet</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+13\"/>\n-        <source>Opening Wallet &lt;b&gt;%1&lt;/b&gt;...</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n-    <message>\n-        <location line=\"+9\"/>\n-        <source>Open Wallet Failed</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n-    <message>\n-        <location line=\"+15\"/>\n+        <location line=\"+21\"/>\n         <source>No wallets available</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+48\"/>\n+        <location line=\"+55\"/>\n         <source>&amp;Window</source>\n         <translation type=\"unfinished\">&amp;Window</translation>\n     </message>\n@@ -676,12 +691,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+14\"/>\n-        <source>Restore</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n-    <message>\n-        <location line=\"+12\"/>\n+        <location line=\"+18\"/>\n         <source>Main Window</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -782,7 +792,7 @@\n         <translation>Wallet is &lt;b&gt;encrypted&lt;/b&gt; and currently &lt;b&gt;locked&lt;/b&gt;</translation>\n     </message>\n     <message>\n-        <location filename=\"../bitcoin.cpp\" line=\"+390\"/>\n+        <location filename=\"../bitcoin.cpp\" line=\"+386\"/>\n         <source>A fatal error occurred. Bitcoin can no longer continue safely and will quit.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -941,7 +951,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+155\"/>\n+        <location line=\"+157\"/>\n         <source>yes</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -977,6 +987,72 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n </context>\n+<context>\n+    <name>CreateWalletActivity</name>\n+    <message>\n+        <location filename=\"../walletcontroller.cpp\" line=\"+201\"/>\n+        <source>Creating Wallet &lt;b&gt;%1&lt;/b&gt;...</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+26\"/>\n+        <source>Create wallet failed</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+2\"/>\n+        <source>Create wallet warning</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+</context>\n+<context>\n+    <name>CreateWalletDialog</name>\n+    <message>\n+        <location filename=\"../forms/createwalletdialog.ui\" line=\"+14\"/>\n+        <source>Create Wallet</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+38\"/>\n+        <source>Wallet Name</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+13\"/>\n+        <source>Encrypt the wallet. The wallet will be encrypted with a passphrase of your choice.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+3\"/>\n+        <source>Encrypt Wallet</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+19\"/>\n+        <source>Disable private keys for this wallet. Wallets with private keys disabled will have no private keys and cannot have an HD seed or imported private keys. This is ideal for watch-only wallets.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+3\"/>\n+        <source>Disable Private Keys</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+13\"/>\n+        <source>Make a blank wallet. Blank wallets do not initially have private keys or scripts. Private keys and addresses can be imported, or an HD seed can be set, at a later time.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+3\"/>\n+        <source>Make Blank Wallet</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location filename=\"../createwalletdialog.cpp\" line=\"+19\"/>\n+        <source>Create</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+</context>\n <context>\n     <name>EditAddressDialog</name>\n     <message>\n@@ -1119,6 +1195,11 @@\n         <source>When you click OK, %1 will begin to download and process the full %4 block chain (%2GB) starting with the earliest transactions in %3 when %4 initially launched.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n+    <message>\n+        <location line=\"+10\"/>\n+        <source>Reverting this setting requires re-downloading the entire blockchain. It is faster to download the full chain first and prune it later. Disables some advanced features.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n     <message>\n         <location line=\"+10\"/>\n         <source>This initial synchronisation is very demanding, and may expose hardware problems with your computer that had previously gone unnoticed. Each time you run %1, it will continue downloading where it left off.</source>\n@@ -1130,7 +1211,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-160\"/>\n+        <location line=\"-170\"/>\n         <source>Use the default data directory</source>\n         <translation>Use the default data directory</translation>\n     </message>\n@@ -1145,7 +1226,12 @@\n         <translation type=\"unfinished\">Bitcoin</translation>\n     </message>\n     <message>\n-        <location line=\"+6\"/>\n+        <location line=\"+9\"/>\n+        <source>Discard blocks after verification, except most recent %1 GB (prune)</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+2\"/>\n         <source>At least %1 GB of data will be stored in this directory, and it will grow over time.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1165,12 +1251,12 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+75\"/>\n+        <location line=\"+78\"/>\n         <source>Error: Specified data directory &quot;%1&quot; cannot be created.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+27\"/>\n+        <location line=\"+30\"/>\n         <source>Error</source>\n         <translation>Error</translation>\n     </message>\n@@ -1190,6 +1276,14 @@\n             <numerusform>(of %n GB needed)</numerusform>\n         </translation>\n     </message>\n+    <message numerus=\"yes\">\n+        <location line=\"+4\"/>\n+        <source>(%n GB needed for full chain)</source>\n+        <translation type=\"unfinished\">\n+            <numerusform></numerusform>\n+            <numerusform></numerusform>\n+        </translation>\n+    </message>\n </context>\n <context>\n     <name>ModalOverlay</name>\n@@ -1285,6 +1379,29 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n </context>\n+<context>\n+    <name>OpenWalletActivity</name>\n+    <message>\n+        <location filename=\"../walletcontroller.cpp\" line=\"+39\"/>\n+        <source>Open wallet failed</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+2\"/>\n+        <source>Open wallet warning</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+10\"/>\n+        <source>default wallet</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+2\"/>\n+        <source>Opening Wallet &lt;b&gt;%1&lt;/b&gt;...</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+</context>\n <context>\n     <name>OptionsDialog</name>\n     <message>\n@@ -1734,16 +1851,16 @@\n     <name>PaymentServer</name>\n     <message>\n         <location filename=\"../paymentserver.cpp\" line=\"+226\"/>\n-        <location line=\"+346\"/>\n+        <location line=\"+350\"/>\n         <location line=\"+42\"/>\n-        <location line=\"+110\"/>\n+        <location line=\"+108\"/>\n         <location line=\"+14\"/>\n         <location line=\"+18\"/>\n         <source>Payment request error</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-529\"/>\n+        <location line=\"-531\"/>\n         <source>Cannot start bitcoin: click-to-pay handler</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1752,13 +1869,13 @@\n         <location line=\"+9\"/>\n         <location line=\"+16\"/>\n         <location line=\"+16\"/>\n-        <location line=\"+5\"/>\n+        <location line=\"+7\"/>\n         <location line=\"+7\"/>\n         <source>URI handling</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-53\"/>\n+        <location line=\"-55\"/>\n         <source>&apos;bitcoin://&apos; is not a valid URI. Use &apos;bitcoin:&apos; instead.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1774,12 +1891,24 @@\n     </message>\n     <message>\n         <location line=\"+16\"/>\n-        <location line=\"+36\"/>\n+        <location line=\"+38\"/>\n         <source>Cannot process payment request because BIP70 support was not compiled in.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-32\"/>\n+        <location line=\"-37\"/>\n+        <location line=\"+38\"/>\n+        <source>Due to widespread security flaws in BIP70 it&apos;s strongly recommended that any merchant instructions to switch wallets be ignored.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"-37\"/>\n+        <location line=\"+38\"/>\n+        <source>If you are receiving this error you should request the merchant provide a BIP21 compatible URI.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"-34\"/>\n         <source>Invalid payment address %1</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1800,17 +1929,17 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+199\"/>\n+        <location line=\"+201\"/>\n         <location line=\"+9\"/>\n         <location line=\"+31\"/>\n         <location line=\"+10\"/>\n         <location line=\"+17\"/>\n-        <location line=\"+85\"/>\n+        <location line=\"+83\"/>\n         <source>Payment request rejected</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-152\"/>\n+        <location line=\"-150\"/>\n         <source>Payment request network doesn&apos;t match client network.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1841,7 +1970,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+65\"/>\n+        <location line=\"+63\"/>\n         <source>Refund from %1</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1879,7 +2008,7 @@\n <context>\n     <name>PeerTableModel</name>\n     <message>\n-        <location filename=\"../peertablemodel.cpp\" line=\"+108\"/>\n+        <location filename=\"../peertablemodel.cpp\" line=\"+110\"/>\n         <source>User Agent</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1922,7 +2051,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+702\"/>\n+        <location line=\"+699\"/>\n         <source>%1 d</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1938,7 +2067,7 @@\n     </message>\n     <message>\n         <location line=\"+2\"/>\n-        <location line=\"+50\"/>\n+        <location line=\"+47\"/>\n         <source>%1 s</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2032,27 +2161,22 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location filename=\"../bitcoin.cpp\" line=\"+74\"/>\n-        <source>Error parsing command line arguments: %1.</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n-    <message>\n-        <location line=\"+37\"/>\n+        <location filename=\"../bitcoin.cpp\" line=\"+118\"/>\n         <source>Error: Specified data directory &quot;%1&quot; does not exist.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+5\"/>\n+        <location line=\"+6\"/>\n         <source>Error: Cannot parse configuration file: %1.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+14\"/>\n+        <location line=\"+15\"/>\n         <source>Error: %1</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+57\"/>\n+        <location line=\"+64\"/>\n         <source>%1 didn&apos;t yet exit safely...</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2103,7 +2227,7 @@\n <context>\n     <name>RPCConsole</name>\n     <message>\n-        <location filename=\"../forms/debugwindow.ui\" line=\"+56\"/>\n+        <location filename=\"../forms/debugwindow.ui\" line=\"+75\"/>\n         <location line=\"+26\"/>\n         <location line=\"+26\"/>\n         <location line=\"+26\"/>\n@@ -2147,12 +2271,12 @@\n         <translation>&amp;Information</translation>\n     </message>\n     <message>\n-        <location line=\"-10\"/>\n+        <location line=\"-29\"/>\n         <source>Debug window</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+25\"/>\n+        <location line=\"+44\"/>\n         <source>General</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2265,8 +2389,8 @@\n     </message>\n     <message>\n         <location line=\"+65\"/>\n-        <location filename=\"../rpcconsole.cpp\" line=\"+498\"/>\n-        <location line=\"+757\"/>\n+        <location filename=\"../rpcconsole.cpp\" line=\"+497\"/>\n+        <location line=\"+759\"/>\n         <source>Select a peer to view detailed information.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2417,7 +2541,7 @@\n         <translation>Clear console</translation>\n     </message>\n     <message>\n-        <location filename=\"../rpcconsole.cpp\" line=\"-252\"/>\n+        <location filename=\"../rpcconsole.cpp\" line=\"-243\"/>\n         <source>1 &amp;hour</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2450,7 +2574,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+47\"/>\n+        <location line=\"+38\"/>\n         <source>&amp;Unban</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2628,7 +2752,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location filename=\"../receivecoinsdialog.cpp\" line=\"+45\"/>\n+        <location filename=\"../receivecoinsdialog.cpp\" line=\"+46\"/>\n         <source>Copy URI</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2714,7 +2838,7 @@\n <context>\n     <name>RecentRequestsTableModel</name>\n     <message>\n-        <location filename=\"../recentrequeststablemodel.cpp\" line=\"+25\"/>\n+        <location filename=\"../recentrequeststablemodel.cpp\" line=\"+27\"/>\n         <source>Date</source>\n         <translation type=\"unfinished\">Date</translation>\n     </message>\n@@ -2753,7 +2877,7 @@\n     <name>SendCoinsDialog</name>\n     <message>\n         <location filename=\"../forms/sendcoinsdialog.ui\" line=\"+14\"/>\n-        <location filename=\"../sendcoinsdialog.cpp\" line=\"+600\"/>\n+        <location filename=\"../sendcoinsdialog.cpp\" line=\"+601\"/>\n         <source>Send Coins</source>\n         <translation>Send Coins</translation>\n     </message>\n@@ -2940,7 +3064,7 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n         <translation>S&amp;end</translation>\n     </message>\n     <message>\n-        <location filename=\"../sendcoinsdialog.cpp\" line=\"-512\"/>\n+        <location filename=\"../sendcoinsdialog.cpp\" line=\"-513\"/>\n         <source>Copy quantity</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2980,7 +3104,7 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+117\"/>\n+        <location line=\"+118\"/>\n         <source> from wallet &apos;%1&apos;</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3438,14 +3562,6 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n         <translation type=\"unfinished\"></translation>\n     </message>\n </context>\n-<context>\n-    <name>SplashScreen</name>\n-    <message>\n-        <location filename=\"../networkstyle.cpp\" line=\"+19\"/>\n-        <source>[testnet]</source>\n-        <translation>[testnet]</translation>\n-    </message>\n-</context>\n <context>\n     <name>TrafficGraphWidget</name>\n     <message>\n@@ -3698,7 +3814,7 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n <context>\n     <name>TransactionTableModel</name>\n     <message>\n-        <location filename=\"../transactiontablemodel.cpp\" line=\"+223\"/>\n+        <location filename=\"../transactiontablemodel.cpp\" line=\"+225\"/>\n         <source>Date</source>\n         <translation type=\"unfinished\">Date</translation>\n     </message>\n@@ -3834,7 +3950,7 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n <context>\n     <name>TransactionView</name>\n     <message>\n-        <location filename=\"../transactionview.cpp\" line=\"+70\"/>\n+        <location filename=\"../transactionview.cpp\" line=\"+69\"/>\n         <location line=\"+16\"/>\n         <source>All</source>\n         <translation type=\"unfinished\"></translation>\n@@ -3955,7 +4071,7 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+199\"/>\n+        <location line=\"+194\"/>\n         <source>Export Transaction History</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4033,21 +4149,21 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n <context>\n     <name>UnitDisplayStatusBarControl</name>\n     <message>\n-        <location filename=\"../bitcoingui.cpp\" line=\"+155\"/>\n+        <location filename=\"../bitcoingui.cpp\" line=\"+156\"/>\n         <source>Unit to show amounts in. Click to select another unit.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n </context>\n <context>\n     <name>WalletController</name>\n     <message>\n-        <location filename=\"../walletcontroller.cpp\" line=\"+70\"/>\n+        <location filename=\"../walletcontroller.cpp\" line=\"-205\"/>\n         <source>Close wallet</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <source>Are you sure you wish to close wallet &lt;i&gt;%1&lt;/i&gt;?</source>\n+        <source>Are you sure you wish to close the wallet &lt;i&gt;%1&lt;/i&gt;?</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n@@ -4072,7 +4188,7 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n         <translation type=\"unfinished\">Send Coins</translation>\n     </message>\n     <message>\n-        <location line=\"+301\"/>\n+        <location line=\"+309\"/>\n         <location line=\"+39\"/>\n         <location line=\"+5\"/>\n         <source>Fee bump error</source>\n@@ -4205,12 +4321,12 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+31\"/>\n+        <location line=\"+30\"/>\n         <source>Unable to start HTTP server. See debug log for details.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-168\"/>\n+        <location line=\"-167\"/>\n         <source>The %s developers</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4391,6 +4507,11 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n     </message>\n     <message>\n         <location line=\"+4\"/>\n+        <source>Invalid P2P permission: &apos;%s&apos;</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+1\"/>\n         <source>Invalid amount for -%s=&lt;amount&gt;: &apos;%s&apos;</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4405,17 +4526,27 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+23\"/>\n+        <location line=\"+22\"/>\n         <source>Specified blocks directory &quot;%s&quot; does not exist.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+26\"/>\n+        <location line=\"+22\"/>\n+        <source>Unknown address type &apos;%s&apos;</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+1\"/>\n+        <source>Unknown change type &apos;%s&apos;</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+4\"/>\n         <source>Upgrading txindex database</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-45\"/>\n+        <location line=\"-46\"/>\n         <source>Loading P2P addresses...</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4465,7 +4596,7 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+6\"/>\n+        <location line=\"+5\"/>\n         <source>Unable to bind to %s on this computer. %s is probably already running.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4475,7 +4606,7 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+4\"/>\n+        <location line=\"+6\"/>\n         <source>Unsupported logging category %s=%s.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4500,7 +4631,7 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-155\"/>\n+        <location line=\"-156\"/>\n         <source>Error: Listening for incoming connections failed (listen returned error %s)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4545,7 +4676,7 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+4\"/>\n+        <location line=\"+5\"/>\n         <source>Invalid amount for -paytxfee=&lt;amount&gt;: &apos;%s&apos; (must be at least %s)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4555,7 +4686,7 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+6\"/>\n+        <location line=\"+5\"/>\n         <source>Need to specify a port with -whitebind: &apos;%s&apos;</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4617,11 +4748,6 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n     </message>\n     <message>\n         <location line=\"+5\"/>\n-        <source>Transaction too large for fee policy</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n-    <message>\n-        <location line=\"+1\"/>\n         <source>Transaction too large</source>\n         <translation>Transaction too large</translation>\n     </message>\n@@ -4646,7 +4772,7 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+7\"/>\n+        <location line=\"+9\"/>\n         <source>Verifying wallet(s)...</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4661,7 +4787,7 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-178\"/>\n+        <location line=\"-179\"/>\n         <source>-maxtxfee is set very high! Fees this large could be paid on a single transaction.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4696,12 +4822,7 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+20\"/>\n-        <source>Keypool ran out, please call keypoolrefill first</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n-    <message>\n-        <location line=\"+21\"/>\n+        <location line=\"+41\"/>\n         <source>Starting network threads...</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4736,12 +4857,12 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satos\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+10\"/>\n+        <location line=\"+11\"/>\n         <source>Unknown network specified in -onlynet: &apos;%s&apos;</source>\n         <translation>Unknown network specified in -onlynet: &apos;%s&apos;</translation>\n     </message>\n     <message>\n-        <location line=\"-51\"/>\n+        <location line=\"-52\"/>\n         <source>Insufficient funds</source>\n         <translation>Insufficient funds</translation>\n     </message>"
      },
      {
        "sha": "5eb23c76e6784a4443d5b5cf606be5099fcec43f",
        "filename": "src/qt/macdockiconhandler.mm",
        "status": "modified",
        "additions": 14,
        "deletions": 7,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/macdockiconhandler.mm",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/macdockiconhandler.mm",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/macdockiconhandler.mm?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -1,12 +1,11 @@\n-// Copyright (c) 2011-2018 The Bitcoin Core developers\n+// Copyright (c) 2011-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"macdockiconhandler.h\"\n \n-#undef slots\n-#include <objc/objc.h>\n-#include <objc/message.h>\n+#include <AppKit/AppKit.h>\n+#include <objc/runtime.h>\n \n static MacDockIconHandler *s_instance = nullptr;\n \n@@ -21,9 +20,7 @@ bool dockClickHandler(id self, SEL _cmd, ...) {\n }\n \n void setupDockClickHandler() {\n-    id app = objc_msgSend((id)objc_getClass(\"NSApplication\"), sel_registerName(\"sharedApplication\"));\n-    id delegate = objc_msgSend(app, sel_registerName(\"delegate\"));\n-    Class delClass = (Class)objc_msgSend(delegate, sel_registerName(\"class\"));\n+    Class delClass = (Class)[[[NSApplication sharedApplication] delegate] class];\n     SEL shouldHandle = sel_registerName(\"applicationShouldHandleReopen:hasVisibleWindows:\");\n     class_replaceMethod(delClass, shouldHandle, (IMP)dockClickHandler, \"B@:\");\n }\n@@ -44,3 +41,13 @@ void setupDockClickHandler() {\n {\n     delete s_instance;\n }\n+\n+/**\n+ * Force application activation on macOS. With Qt 5.5.1 this is required when\n+ * an action in the Dock menu is triggered.\n+ * TODO: Define a Qt version where it's no-longer necessary.\n+ */\n+void ForceActivation()\n+{\n+    [[NSApplication sharedApplication] activateIgnoringOtherApps:YES];\n+}"
      },
      {
        "sha": "5c039a939eee0902aeca5fa8c23a7f7be6083c7c",
        "filename": "src/qt/networkstyle.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/networkstyle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/networkstyle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/networkstyle.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -6,18 +6,20 @@\n \n #include <qt/guiconstants.h>\n \n+#include <chainparamsbase.h>\n+#include <tinyformat.h>\n+\n #include <QApplication>\n \n static const struct {\n     const char *networkId;\n     const char *appName;\n     const int iconColorHueShift;\n     const int iconColorSaturationReduction;\n-    const char *titleAddText;\n } network_styles[] = {\n-    {\"main\", QAPP_APP_NAME_DEFAULT, 0, 0, \"\"},\n-    {\"test\", QAPP_APP_NAME_TESTNET, 70, 30, QT_TRANSLATE_NOOP(\"SplashScreen\", \"[testnet]\")},\n-    {\"regtest\", QAPP_APP_NAME_REGTEST, 160, 30, \"[regtest]\"}\n+    {\"main\", QAPP_APP_NAME_DEFAULT, 0, 0},\n+    {\"test\", QAPP_APP_NAME_TESTNET, 70, 30},\n+    {\"regtest\", QAPP_APP_NAME_REGTEST, 160, 30}\n };\n static const unsigned network_styles_count = sizeof(network_styles)/sizeof(*network_styles);\n \n@@ -75,8 +77,9 @@ NetworkStyle::NetworkStyle(const QString &_appName, const int iconColorHueShift,\n     trayAndWindowIcon   = QIcon(pixmap.scaled(QSize(256,256)));\n }\n \n-const NetworkStyle *NetworkStyle::instantiate(const QString &networkId)\n+const NetworkStyle* NetworkStyle::instantiate(const std::string& networkId)\n {\n+    std::string titleAddText = networkId == CBaseChainParams::MAIN ? \"\" : strprintf(\"[%s]\", networkId);\n     for (unsigned x=0; x<network_styles_count; ++x)\n     {\n         if (networkId == network_styles[x].networkId)\n@@ -85,7 +88,7 @@ const NetworkStyle *NetworkStyle::instantiate(const QString &networkId)\n                     network_styles[x].appName,\n                     network_styles[x].iconColorHueShift,\n                     network_styles[x].iconColorSaturationReduction,\n-                    network_styles[x].titleAddText);\n+                    titleAddText.c_str());\n         }\n     }\n     return nullptr;"
      },
      {
        "sha": "bb12dd1b6ea22fde18680939de079fd8092246a4",
        "filename": "src/qt/networkstyle.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/networkstyle.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/networkstyle.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/networkstyle.h?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -14,7 +14,7 @@ class NetworkStyle\n {\n public:\n     /** Get style associated with provided BIP70 network id, or 0 if not known */\n-    static const NetworkStyle *instantiate(const QString &networkId);\n+    static const NetworkStyle* instantiate(const std::string& networkId);\n \n     const QString &getAppName() const { return appName; }\n     const QIcon &getAppIcon() const { return appIcon; }"
      },
      {
        "sha": "d047a8247558ec201c7f65ce7512b5c8a85009e7",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 5,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -92,11 +92,7 @@ void OptionsModel::Init(bool resetSettings)\n         settings.setValue(\"bPrune\", false);\n     if (!settings.contains(\"nPruneSize\"))\n         settings.setValue(\"nPruneSize\", 2);\n-    // Convert prune size from GB to MiB:\n-    const uint64_t nPruneSizeMiB = (settings.value(\"nPruneSize\").toInt() * GB_BYTES) >> 20;\n-    if (!m_node.softSetArg(\"-prune\", settings.value(\"bPrune\").toBool() ? std::to_string(nPruneSizeMiB) : \"0\")) {\n-        addOverriddenOption(\"-prune\");\n-    }\n+    SetPrune(settings.value(\"bPrune\").toBool());\n \n     if (!settings.contains(\"nDatabaseCache\"))\n         settings.setValue(\"nDatabaseCache\", (qint64)nDefaultDbCache);\n@@ -240,6 +236,22 @@ static const QString GetDefaultProxyAddress()\n     return QString(\"%1:%2\").arg(DEFAULT_GUI_PROXY_HOST).arg(DEFAULT_GUI_PROXY_PORT);\n }\n \n+void OptionsModel::SetPrune(bool prune, bool force)\n+{\n+    QSettings settings;\n+    settings.setValue(\"bPrune\", prune);\n+    // Convert prune size from GB to MiB:\n+    const uint64_t nPruneSizeMiB = (settings.value(\"nPruneSize\").toInt() * GB_BYTES) >> 20;\n+    std::string prune_val = prune ? std::to_string(nPruneSizeMiB) : \"0\";\n+    if (force) {\n+        m_node.forceSetArg(\"-prune\", prune_val);\n+        return;\n+    }\n+    if (!m_node.softSetArg(\"-prune\", prune_val)) {\n+        addOverriddenOption(\"-prune\");\n+    }\n+}\n+\n // read QSettings values and return them\n QVariant OptionsModel::data(const QModelIndex & index, int role) const\n {"
      },
      {
        "sha": "b1231b7c7d87763fc281c9769b364b9472b528c6",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -77,6 +77,9 @@ class OptionsModel : public QAbstractListModel\n     bool getCoinControlFeatures() const { return fCoinControlFeatures; }\n     const QString& getOverriddenByCommandLine() { return strOverriddenByCommandLine; }\n \n+    /* Explicit setters */\n+    void SetPrune(bool prune, bool force = false);\n+\n     /* Restart flag helper */\n     void setRestartRequired(bool fRequired);\n     bool isRestartRequired() const;"
      },
      {
        "sha": "07ffff0126ec2d9972b220bc43518c31b7ff59fe",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -204,9 +204,8 @@ void OverviewPage::updateWatchOnlyLabels(bool showWatchOnly)\n void OverviewPage::setClientModel(ClientModel *model)\n {\n     this->clientModel = model;\n-    if(model)\n-    {\n-        // Show warning if this is a prerelease version\n+    if (model) {\n+        // Show warning, for example if this is a prerelease version\n         connect(model, &ClientModel::alertsChanged, this, &OverviewPage::updateAlerts);\n         updateAlerts(model->getStatusBarWarnings());\n     }"
      },
      {
        "sha": "00d83d23ddae7cb349c1d3a7019a0caa902edfce",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -41,8 +41,8 @@\n #include <QNetworkReply>\n #include <QNetworkRequest>\n #include <QSslCertificate>\n+#include <QSslConfiguration>\n #include <QSslError>\n-#include <QSslSocket>\n #include <QStringList>\n #include <QTextDocument>\n #include <QUrlQuery>\n@@ -328,7 +328,9 @@ void PaymentServer::handleURIOrFile(const QString& s)\n #ifndef ENABLE_BIP70\n                     if (uri.hasQueryItem(\"r\")) {  // payment request\n                         Q_EMIT message(tr(\"URI handling\"),\n-                            tr(\"Cannot process payment request because BIP70 support was not compiled in.\"),\n+                            tr(\"Cannot process payment request because BIP70 support was not compiled in.\")+\n+                            tr(\"Due to widespread security flaws in BIP70 it's strongly recommended that any merchant instructions to switch wallets be ignored.\")+\n+                            tr(\"If you are receiving this error you should request the merchant provide a BIP21 compatible URI.\"),\n                             CClientUIInterface::ICON_WARNING);\n                     }\n #endif\n@@ -364,7 +366,9 @@ void PaymentServer::handleURIOrFile(const QString& s)\n         return;\n #else\n         Q_EMIT message(tr(\"Payment request file handling\"),\n-            tr(\"Cannot process payment request because BIP70 support was not compiled in.\"),\n+            tr(\"Cannot process payment request because BIP70 support was not compiled in.\")+\n+            tr(\"Due to widespread security flaws in BIP70 it's strongly recommended that any merchant instructions to switch wallets be ignored.\")+\n+            tr(\"If you are receiving this error you should request the merchant provide a BIP21 compatible URI.\"),\n             CClientUIInterface::ICON_WARNING);\n #endif\n     }\n@@ -448,9 +452,9 @@ void PaymentServer::LoadRootCAs(X509_STORE* _store)\n \n         certList = QSslCertificate::fromPath(certFile);\n         // Use those certificates when fetching payment requests, too:\n-        QSslSocket::setDefaultCaCertificates(certList);\n+        QSslConfiguration::defaultConfiguration().setCaCertificates(certList);\n     } else\n-        certList = QSslSocket::systemCaCertificates();\n+        certList = QSslConfiguration::systemCaCertificates();\n \n     int nRootCerts = 0;\n     const QDateTime currentTime = QDateTime::currentDateTime();"
      },
      {
        "sha": "e8cf432131629fdc12ab56f42597ab9f803b6e7f",
        "filename": "src/qt/receivecoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/receivecoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/receivecoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -261,7 +261,7 @@ void ReceiveCoinsDialog::copyColumnToClipboard(int column)\n     if (!firstIndex.isValid()) {\n         return;\n     }\n-    GUIUtil::setClipboard(model->getRecentRequestsTableModel()->data(firstIndex.child(firstIndex.row(), column), Qt::EditRole).toString());\n+    GUIUtil::setClipboard(model->getRecentRequestsTableModel()->index(firstIndex.row(), column).data(Qt::EditRole).toString());\n }\n \n // context menu"
      },
      {
        "sha": "130b709d462cef423c872f7571aea8c248acd394",
        "filename": "src/qt/recentrequeststablemodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/recentrequeststablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/recentrequeststablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.h?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -76,7 +76,7 @@ class RecentRequestsTableModel: public QAbstractTableModel\n     QVariant data(const QModelIndex &index, int role) const;\n     bool setData(const QModelIndex &index, const QVariant &value, int role);\n     QVariant headerData(int section, Qt::Orientation orientation, int role) const;\n-    QModelIndex index(int row, int column, const QModelIndex &parent) const;\n+    QModelIndex index(int row, int column, const QModelIndex &parent = QModelIndex()) const;\n     bool removeRows(int row, int count, const QModelIndex &parent = QModelIndex());\n     Qt::ItemFlags flags(const QModelIndex &index) const;\n     /*@}*/"
      },
      {
        "sha": "eccc34e12fb4eb6b28739edf615ec2f4b89c84bd",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 16,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -28,13 +28,12 @@\n #include <wallet/wallet.h>\n #endif\n \n-#include <QDesktopWidget>\n #include <QKeyEvent>\n #include <QMenu>\n #include <QMessageBox>\n #include <QScrollBar>\n+#include <QScreen>\n #include <QSettings>\n-#include <QSignalMapper>\n #include <QTime>\n #include <QTimer>\n #include <QStringList>\n@@ -451,7 +450,7 @@ RPCConsole::RPCConsole(interfaces::Node& node, const PlatformStyle *_platformSty\n     QSettings settings;\n     if (!restoreGeometry(settings.value(\"RPCConsoleWindowGeometry\").toByteArray())) {\n         // Restore failed (perhaps missing setting), center the window\n-        move(QApplication::desktop()->availableGeometry().center() - frameGeometry().center());\n+        move(QGuiApplication::primaryScreen()->availableGeometry().center() - frameGeometry().center());\n     }\n \n     QChar nonbreaking_hyphen(8209);\n@@ -558,6 +557,17 @@ bool RPCConsole::eventFilter(QObject* obj, QEvent *event)\n void RPCConsole::setClientModel(ClientModel *model)\n {\n     clientModel = model;\n+\n+    bool wallet_enabled{false};\n+#ifdef ENABLE_WALLET\n+    wallet_enabled = WalletModel::isWalletEnabled();\n+#endif // ENABLE_WALLET\n+    if (model && !wallet_enabled) {\n+        // Show warning, for example if this is a prerelease version\n+        connect(model, &ClientModel::alertsChanged, this, &RPCConsole::updateAlerts);\n+        updateAlerts(model->getStatusBarWarnings());\n+    }\n+\n     ui->trafficGraph->setClientModel(model);\n     if (model && clientModel->getPeerTableModel() && clientModel->getBanTableModel()) {\n         // Keep up to date with client\n@@ -603,19 +613,10 @@ void RPCConsole::setClientModel(ClientModel *model)\n         peersTableContextMenu->addAction(banAction7d);\n         peersTableContextMenu->addAction(banAction365d);\n \n-        // Add a signal mapping to allow dynamic context menu arguments.\n-        // We need to use int (instead of int64_t), because signal mapper only supports\n-        // int or objects, which is okay because max bantime (1 year) is < int_max.\n-        QSignalMapper* signalMapper = new QSignalMapper(this);\n-        signalMapper->setMapping(banAction1h, 60*60);\n-        signalMapper->setMapping(banAction24h, 60*60*24);\n-        signalMapper->setMapping(banAction7d, 60*60*24*7);\n-        signalMapper->setMapping(banAction365d, 60*60*24*365);\n-        connect(banAction1h, &QAction::triggered, signalMapper, static_cast<void (QSignalMapper::*)()>(&QSignalMapper::map));\n-        connect(banAction24h, &QAction::triggered, signalMapper, static_cast<void (QSignalMapper::*)()>(&QSignalMapper::map));\n-        connect(banAction7d, &QAction::triggered, signalMapper, static_cast<void (QSignalMapper::*)()>(&QSignalMapper::map));\n-        connect(banAction365d, &QAction::triggered, signalMapper, static_cast<void (QSignalMapper::*)()>(&QSignalMapper::map));\n-        connect(signalMapper, static_cast<void (QSignalMapper::*)(int)>(&QSignalMapper::mapped), this, &RPCConsole::banSelectedNode);\n+        connect(banAction1h, &QAction::triggered, [this] { banSelectedNode(60 * 60); });\n+        connect(banAction24h, &QAction::triggered, [this] { banSelectedNode(60 * 60 * 24); });\n+        connect(banAction7d, &QAction::triggered, [this] { banSelectedNode(60 * 60 * 24 * 7); });\n+        connect(banAction365d, &QAction::triggered, [this] { banSelectedNode(60 * 60 * 24 * 365); });\n \n         // peer table context menu signals\n         connect(ui->peerWidget, &QTableView::customContextMenuRequested, this, &RPCConsole::showPeersTableContextMenu);\n@@ -1274,3 +1275,9 @@ QString RPCConsole::tabTitle(TabTypes tab_type) const\n {\n     return ui->tabWidget->tabText(tab_type);\n }\n+\n+void RPCConsole::updateAlerts(const QString& warnings)\n+{\n+    this->ui->label_alerts->setVisible(!warnings.isEmpty());\n+    this->ui->label_alerts->setText(warnings);\n+}"
      },
      {
        "sha": "3f7a74ba0340810413201adc01c344cacc5b3bf5",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -167,6 +167,9 @@ public Q_SLOTS:\n \n     /** Update UI with latest network info from model. */\n     void updateNetworkState();\n+\n+private Q_SLOTS:\n+    void updateAlerts(const QString& warnings);\n };\n \n #endif // BITCOIN_QT_RPCCONSOLE_H"
      },
      {
        "sha": "a88119d8c508295e0646f112fd2e4415b777124c",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -283,7 +283,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n         // generate amount string with wallet name in case of multiwallet\n         QString amount = BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), rcp.amount);\n         if (model->isMultiwallet()) {\n-            amount.append(tr(\" from wallet '%1'\").arg(model->getWalletName()));\n+            amount.append(tr(\" from wallet '%1'\").arg(GUIUtil::HtmlEscape(model->getWalletName())));\n         }\n \n         // generate address string\n@@ -297,7 +297,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n         {\n             if(rcp.label.length() > 0) // label with address\n             {\n-                recipientElement.append(tr(\"%1 to '%2'\").arg(amount, rcp.label));\n+                recipientElement.append(tr(\"%1 to '%2'\").arg(amount, GUIUtil::HtmlEscape(rcp.label)));\n                 recipientElement.append(QString(\" (%1)\").arg(address));\n             }\n             else // just address\n@@ -704,7 +704,7 @@ void SendCoinsDialog::updateSmartFeeLabel()\n         int lightness = ui->fallbackFeeWarningLabel->palette().color(QPalette::WindowText).lightness();\n         QColor warning_colour(255 - (lightness / 5), 176 - (lightness / 3), 48 - (lightness / 14));\n         ui->fallbackFeeWarningLabel->setStyleSheet(\"QLabel { color: \" + warning_colour.name() + \"; }\");\n-        ui->fallbackFeeWarningLabel->setIndent(QFontMetrics(ui->fallbackFeeWarningLabel->font()).width(\"x\"));\n+        ui->fallbackFeeWarningLabel->setIndent(GUIUtil::TextWidth(QFontMetrics(ui->fallbackFeeWarningLabel->font()), \"x\"));\n     }\n     else\n     {"
      },
      {
        "sha": "0e5abb89f34bdeb17f04ab08cdc2148e1ab4c8ce",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -8,22 +8,22 @@\n \n #include <qt/splashscreen.h>\n \n-#include <qt/networkstyle.h>\n-\n #include <clientversion.h>\n #include <interfaces/handler.h>\n #include <interfaces/node.h>\n #include <interfaces/wallet.h>\n+#include <qt/guiutil.h>\n+#include <qt/networkstyle.h>\n #include <ui_interface.h>\n #include <util/system.h>\n #include <util/translation.h>\n #include <version.h>\n \n #include <QApplication>\n #include <QCloseEvent>\n-#include <QDesktopWidget>\n #include <QPainter>\n #include <QRadialGradient>\n+#include <QScreen>\n \n \n SplashScreen::SplashScreen(interfaces::Node& node, Qt::WindowFlags f, const NetworkStyle *networkStyle) :\n@@ -75,21 +75,21 @@ SplashScreen::SplashScreen(interfaces::Node& node, Qt::WindowFlags f, const Netw\n     // check font size and drawing with\n     pixPaint.setFont(QFont(font, 33*fontFactor));\n     QFontMetrics fm = pixPaint.fontMetrics();\n-    int titleTextWidth = fm.width(titleText);\n+    int titleTextWidth = GUIUtil::TextWidth(fm, titleText);\n     if (titleTextWidth > 176) {\n         fontFactor = fontFactor * 176 / titleTextWidth;\n     }\n \n     pixPaint.setFont(QFont(font, 33*fontFactor));\n     fm = pixPaint.fontMetrics();\n-    titleTextWidth  = fm.width(titleText);\n+    titleTextWidth  = GUIUtil::TextWidth(fm, titleText);\n     pixPaint.drawText(pixmap.width()/devicePixelRatio-titleTextWidth-paddingRight,paddingTop,titleText);\n \n     pixPaint.setFont(QFont(font, 15*fontFactor));\n \n     // if the version string is too long, reduce size\n     fm = pixPaint.fontMetrics();\n-    int versionTextWidth  = fm.width(versionText);\n+    int versionTextWidth  = GUIUtil::TextWidth(fm, versionText);\n     if(versionTextWidth > titleTextWidth+paddingRight-10) {\n         pixPaint.setFont(QFont(font, 10*fontFactor));\n         titleVersionVSpace -= 5;\n@@ -111,7 +111,7 @@ SplashScreen::SplashScreen(interfaces::Node& node, Qt::WindowFlags f, const Netw\n         boldFont.setWeight(QFont::Bold);\n         pixPaint.setFont(boldFont);\n         fm = pixPaint.fontMetrics();\n-        int titleAddTextWidth  = fm.width(titleAddText);\n+        int titleAddTextWidth  = GUIUtil::TextWidth(fm, titleAddText);\n         pixPaint.drawText(pixmap.width()/devicePixelRatio-titleAddTextWidth-10,15,titleAddText);\n     }\n \n@@ -124,7 +124,7 @@ SplashScreen::SplashScreen(interfaces::Node& node, Qt::WindowFlags f, const Netw\n     QRect r(QPoint(), QSize(pixmap.size().width()/devicePixelRatio,pixmap.size().height()/devicePixelRatio));\n     resize(r.size());\n     setFixedSize(r.size());\n-    move(QApplication::desktop()->screenGeometry().center() - r.center());\n+    move(QGuiApplication::primaryScreen()->geometry().center() - r.center());\n \n     subscribeToCoreSignals();\n     installEventFilter(this);"
      },
      {
        "sha": "8ae01ac093b817700357a5a49cdf9c9b7ff4d701",
        "filename": "src/qt/test/apptests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/test/apptests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/test/apptests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/apptests.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -68,8 +68,7 @@ void AppTests::appTests()\n \n     m_app.parameterSetup();\n     m_app.createOptionsModel(true /* reset settings */);\n-    QScopedPointer<const NetworkStyle> style(\n-        NetworkStyle::instantiate(QString::fromStdString(Params().NetworkIDString())));\n+    QScopedPointer<const NetworkStyle> style(NetworkStyle::instantiate(Params().NetworkIDString()));\n     m_app.setupPlatformStyle();\n     m_app.createWindow(style.data());\n     connect(&m_app, &BitcoinApplication::windowShown, this, &AppTests::guiTests);"
      },
      {
        "sha": "cbc4ab49f595483e983996b23ae5e199c1ff19e6",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 9,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -30,7 +30,6 @@\n #include <QMenu>\n #include <QPoint>\n #include <QScrollBar>\n-#include <QSignalMapper>\n #include <QTableView>\n #include <QTimer>\n #include <QUrl>\n@@ -176,11 +175,6 @@ TransactionView::TransactionView(const PlatformStyle *platformStyle, QWidget *pa\n     contextMenu->addAction(abandonAction);\n     contextMenu->addAction(editLabelAction);\n \n-    mapperThirdPartyTxUrls = new QSignalMapper(this);\n-\n-    // Connect actions\n-    connect(mapperThirdPartyTxUrls, static_cast<void (QSignalMapper::*)(const QString&)>(&QSignalMapper::mapped), this, &TransactionView::openThirdPartyTxUrl);\n-\n     connect(dateWidget, static_cast<void (QComboBox::*)(int)>(&QComboBox::activated), this, &TransactionView::chooseDate);\n     connect(typeWidget, static_cast<void (QComboBox::*)(int)>(&QComboBox::activated), this, &TransactionView::chooseType);\n     connect(watchOnlyWidget, static_cast<void (QComboBox::*)(int)>(&QComboBox::activated), this, &TransactionView::chooseWatchonly);\n@@ -246,15 +240,15 @@ void TransactionView::setModel(WalletModel *_model)\n             QStringList listUrls = _model->getOptionsModel()->getThirdPartyTxUrls().split(\"|\", QString::SkipEmptyParts);\n             for (int i = 0; i < listUrls.size(); ++i)\n             {\n-                QString host = QUrl(listUrls[i].trimmed(), QUrl::StrictMode).host();\n+                QString url = listUrls[i].trimmed();\n+                QString host = QUrl(url, QUrl::StrictMode).host();\n                 if (!host.isEmpty())\n                 {\n                     QAction *thirdPartyTxUrlAction = new QAction(host, this); // use host as menu item label\n                     if (i == 0)\n                         contextMenu->addSeparator();\n                     contextMenu->addAction(thirdPartyTxUrlAction);\n-                    connect(thirdPartyTxUrlAction, &QAction::triggered, mapperThirdPartyTxUrls, static_cast<void (QSignalMapper::*)()>(&QSignalMapper::map));\n-                    mapperThirdPartyTxUrls->setMapping(thirdPartyTxUrlAction, listUrls[i].trimmed());\n+                    connect(thirdPartyTxUrlAction, &QAction::triggered, [this, url] { openThirdPartyTxUrl(url); });\n                 }\n             }\n         }"
      },
      {
        "sha": "79347c371fd652c0bde2a07501f7d537241d0bdd",
        "filename": "src/qt/transactionview.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/transactionview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/transactionview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.h?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -23,7 +23,6 @@ class QFrame;\n class QLineEdit;\n class QMenu;\n class QModelIndex;\n-class QSignalMapper;\n class QTableView;\n QT_END_NAMESPACE\n \n@@ -72,7 +71,6 @@ class TransactionView : public QWidget\n     QLineEdit *amountWidget;\n \n     QMenu *contextMenu;\n-    QSignalMapper *mapperThirdPartyTxUrls;\n \n     QFrame *dateRangeWidget;\n     QDateTimeEdit *dateFrom;"
      },
      {
        "sha": "fa6f9f3f1692781cd4091d21788314501c718a77",
        "filename": "src/qt/walletcontroller.cpp",
        "status": "modified",
        "additions": 153,
        "deletions": 24,
        "changes": 177,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/walletcontroller.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/walletcontroller.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -2,8 +2,14 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <qt/askpassphrasedialog.h>\n+#include <qt/createwalletdialog.h>\n+#include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n #include <qt/walletcontroller.h>\n \n+#include <wallet/wallet.h>\n+\n #include <interfaces/handler.h>\n #include <interfaces/node.h>\n \n@@ -13,10 +19,13 @@\n #include <QMessageBox>\n #include <QMutexLocker>\n #include <QThread>\n+#include <QTimer>\n #include <QWindow>\n \n WalletController::WalletController(interfaces::Node& node, const PlatformStyle* platform_style, OptionsModel* options_model, QObject* parent)\n     : QObject(parent)\n+    , m_activity_thread(new QThread(this))\n+    , m_activity_worker(new QObject)\n     , m_node(node)\n     , m_platform_style(platform_style)\n     , m_options_model(options_model)\n@@ -29,15 +38,17 @@ WalletController::WalletController(interfaces::Node& node, const PlatformStyle*\n         getOrCreateWallet(std::move(wallet));\n     }\n \n-    m_activity_thread.start();\n+    m_activity_worker->moveToThread(m_activity_thread);\n+    m_activity_thread->start();\n }\n \n // Not using the default destructor because not all member types definitions are\n // available in the header, just forward declared.\n WalletController::~WalletController()\n {\n-    m_activity_thread.quit();\n-    m_activity_thread.wait();\n+    m_activity_thread->quit();\n+    m_activity_thread->wait();\n+    delete m_activity_worker;\n }\n \n std::vector<WalletModel*> WalletController::getOpenWallets() const\n@@ -60,18 +71,11 @@ std::map<std::string, bool> WalletController::listWalletDir() const\n     return wallets;\n }\n \n-OpenWalletActivity* WalletController::openWallet(const std::string& name, QWidget* parent)\n-{\n-    OpenWalletActivity* activity = new OpenWalletActivity(this, name);\n-    activity->moveToThread(&m_activity_thread);\n-    return activity;\n-}\n-\n void WalletController::closeWallet(WalletModel* wallet_model, QWidget* parent)\n {\n     QMessageBox box(parent);\n     box.setWindowTitle(tr(\"Close wallet\"));\n-    box.setText(tr(\"Are you sure you wish to close wallet <i>%1</i>?\").arg(wallet_model->getDisplayName()));\n+    box.setText(tr(\"Are you sure you wish to close the wallet <i>%1</i>?\").arg(GUIUtil::HtmlEscape(wallet_model->getDisplayName())));\n     box.setInformativeText(tr(\"Closing the wallet for too long can result in having to resync the entire chain if pruning is enabled.\"));\n     box.setStandardButtons(QMessageBox::Yes|QMessageBox::Cancel);\n     box.setDefaultButton(QMessageBox::Yes);\n@@ -140,23 +144,148 @@ void WalletController::removeAndDeleteWallet(WalletModel* wallet_model)\n     delete wallet_model;\n }\n \n+WalletControllerActivity::WalletControllerActivity(WalletController* wallet_controller, QWidget* parent_widget)\n+    : QObject(wallet_controller)\n+    , m_wallet_controller(wallet_controller)\n+    , m_parent_widget(parent_widget)\n+{\n+}\n \n-OpenWalletActivity::OpenWalletActivity(WalletController* wallet_controller, const std::string& name)\n-    : m_wallet_controller(wallet_controller)\n-    , m_name(name)\n-{}\n+WalletControllerActivity::~WalletControllerActivity()\n+{\n+    delete m_progress_dialog;\n+}\n \n-void OpenWalletActivity::open()\n+void WalletControllerActivity::showProgressDialog(const QString& label_text)\n {\n-    std::string error, warning;\n-    std::unique_ptr<interfaces::Wallet> wallet = m_wallet_controller->m_node.loadWallet(m_name, error, warning);\n-    if (!warning.empty()) {\n-        Q_EMIT message(QMessageBox::Warning, QString::fromStdString(warning));\n+    m_progress_dialog = new QProgressDialog(m_parent_widget);\n+\n+    m_progress_dialog->setLabelText(label_text);\n+    m_progress_dialog->setRange(0, 0);\n+    m_progress_dialog->setCancelButton(nullptr);\n+    m_progress_dialog->setWindowModality(Qt::ApplicationModal);\n+    GUIUtil::PolishProgressDialog(m_progress_dialog);\n+}\n+\n+CreateWalletActivity::CreateWalletActivity(WalletController* wallet_controller, QWidget* parent_widget)\n+    : WalletControllerActivity(wallet_controller, parent_widget)\n+{\n+    m_passphrase.reserve(MAX_PASSPHRASE_SIZE);\n+}\n+\n+CreateWalletActivity::~CreateWalletActivity()\n+{\n+    delete m_create_wallet_dialog;\n+    delete m_passphrase_dialog;\n+}\n+\n+void CreateWalletActivity::askPassphrase()\n+{\n+    m_passphrase_dialog = new AskPassphraseDialog(AskPassphraseDialog::Encrypt, m_parent_widget, &m_passphrase);\n+    m_passphrase_dialog->setWindowModality(Qt::ApplicationModal);\n+    m_passphrase_dialog->show();\n+\n+    connect(m_passphrase_dialog, &QObject::destroyed, [this] {\n+        m_passphrase_dialog = nullptr;\n+    });\n+    connect(m_passphrase_dialog, &QDialog::accepted, [this] {\n+        createWallet();\n+    });\n+    connect(m_passphrase_dialog, &QDialog::rejected, [this] {\n+        Q_EMIT finished();\n+    });\n+}\n+\n+void CreateWalletActivity::createWallet()\n+{\n+    showProgressDialog(tr(\"Creating Wallet <b>%1</b>...\").arg(m_create_wallet_dialog->walletName().toHtmlEscaped()));\n+\n+    std::string name = m_create_wallet_dialog->walletName().toStdString();\n+    uint64_t flags = 0;\n+    if (m_create_wallet_dialog->isDisablePrivateKeysChecked()) {\n+        flags |= WALLET_FLAG_DISABLE_PRIVATE_KEYS;\n     }\n-    if (wallet) {\n-        Q_EMIT opened(m_wallet_controller->getOrCreateWallet(std::move(wallet)));\n-    } else {\n-        Q_EMIT message(QMessageBox::Critical, QString::fromStdString(error));\n+    if (m_create_wallet_dialog->isMakeBlankWalletChecked()) {\n+        flags |= WALLET_FLAG_BLANK_WALLET;\n     }\n+\n+    QTimer::singleShot(500, worker(), [this, name, flags] {\n+        std::unique_ptr<interfaces::Wallet> wallet;\n+        WalletCreationStatus status = node().createWallet(m_passphrase, flags, name, m_error_message, m_warning_message, wallet);\n+\n+        if (status == WalletCreationStatus::SUCCESS) m_wallet_model = m_wallet_controller->getOrCreateWallet(std::move(wallet));\n+\n+        QTimer::singleShot(500, this, &CreateWalletActivity::finish);\n+    });\n+}\n+\n+void CreateWalletActivity::finish()\n+{\n+    m_progress_dialog->hide();\n+\n+    if (!m_error_message.empty()) {\n+        QMessageBox::critical(m_parent_widget, tr(\"Create wallet failed\"), QString::fromStdString(m_error_message));\n+    } else if (!m_warning_message.empty()) {\n+        QMessageBox::warning(m_parent_widget, tr(\"Create wallet warning\"), QString::fromStdString(m_warning_message));\n+    }\n+\n+    if (m_wallet_model) Q_EMIT created(m_wallet_model);\n+\n+    Q_EMIT finished();\n+}\n+\n+void CreateWalletActivity::create()\n+{\n+    m_create_wallet_dialog = new CreateWalletDialog(m_parent_widget);\n+    m_create_wallet_dialog->setWindowModality(Qt::ApplicationModal);\n+    m_create_wallet_dialog->show();\n+\n+    connect(m_create_wallet_dialog, &QObject::destroyed, [this] {\n+        m_create_wallet_dialog = nullptr;\n+    });\n+    connect(m_create_wallet_dialog, &QDialog::rejected, [this] {\n+        Q_EMIT finished();\n+    });\n+    connect(m_create_wallet_dialog, &QDialog::accepted, [this] {\n+        if (m_create_wallet_dialog->isEncryptWalletChecked()) {\n+            askPassphrase();\n+        } else {\n+            createWallet();\n+        }\n+    });\n+}\n+\n+OpenWalletActivity::OpenWalletActivity(WalletController* wallet_controller, QWidget* parent_widget)\n+    : WalletControllerActivity(wallet_controller, parent_widget)\n+{\n+}\n+\n+void OpenWalletActivity::finish()\n+{\n+    m_progress_dialog->hide();\n+\n+    if (!m_error_message.empty()) {\n+        QMessageBox::critical(m_parent_widget, tr(\"Open wallet failed\"), QString::fromStdString(m_error_message));\n+    } else if (!m_warning_message.empty()) {\n+        QMessageBox::warning(m_parent_widget, tr(\"Open wallet warning\"), QString::fromStdString(m_warning_message));\n+    }\n+\n+    if (m_wallet_model) Q_EMIT opened(m_wallet_model);\n+\n     Q_EMIT finished();\n }\n+\n+void OpenWalletActivity::open(const std::string& path)\n+{\n+    QString name = path.empty() ? QString(\"[\"+tr(\"default wallet\")+\"]\") : QString::fromStdString(path);\n+\n+    showProgressDialog(tr(\"Opening Wallet <b>%1</b>...\").arg(name.toHtmlEscaped()));\n+\n+    QTimer::singleShot(0, worker(), [this, path] {\n+        std::unique_ptr<interfaces::Wallet> wallet = node().loadWallet(path, m_error_message, m_warning_message);\n+\n+        if (wallet) m_wallet_model = m_wallet_controller->getOrCreateWallet(std::move(wallet));\n+\n+        QTimer::singleShot(0, this, &OpenWalletActivity::finish);\n+    });\n+}"
      },
      {
        "sha": "fb37b7292c0c46a1fa9aa7ed923de5f544e4107d",
        "filename": "src/qt/walletcontroller.h",
        "status": "modified",
        "additions": 67,
        "deletions": 12,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/walletcontroller.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/walletcontroller.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.h?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -6,15 +6,20 @@\n #define BITCOIN_QT_WALLETCONTROLLER_H\n \n #include <qt/walletmodel.h>\n+#include <support/allocators/secure.h>\n #include <sync.h>\n \n #include <map>\n #include <memory>\n+#include <string>\n #include <vector>\n \n #include <QMessageBox>\n #include <QMutex>\n+#include <QProgressDialog>\n #include <QThread>\n+#include <QTimer>\n+#include <QString>\n \n class OptionsModel;\n class PlatformStyle;\n@@ -24,7 +29,11 @@ class Handler;\n class Node;\n } // namespace interfaces\n \n+class AskPassphraseDialog;\n+class CreateWalletActivity;\n+class CreateWalletDialog;\n class OpenWalletActivity;\n+class WalletControllerActivity;\n \n /**\n  * Controller between interfaces::Node, WalletModel instances and the GUI.\n@@ -33,7 +42,6 @@ class WalletController : public QObject\n {\n     Q_OBJECT\n \n-    WalletModel* getOrCreateWallet(std::unique_ptr<interfaces::Wallet> wallet);\n     void removeAndDeleteWallet(WalletModel* wallet_model);\n \n public:\n@@ -43,11 +51,12 @@ class WalletController : public QObject\n     //! Returns wallet models currently open.\n     std::vector<WalletModel*> getOpenWallets() const;\n \n+    WalletModel* getOrCreateWallet(std::unique_ptr<interfaces::Wallet> wallet);\n+\n     //! Returns all wallet names in the wallet dir mapped to whether the wallet\n     //! is loaded.\n     std::map<std::string, bool> listWalletDir() const;\n \n-    OpenWalletActivity* openWallet(const std::string& name, QWidget* parent = nullptr);\n     void closeWallet(WalletModel* wallet_model, QWidget* parent = nullptr);\n \n Q_SIGNALS:\n@@ -57,35 +66,81 @@ class WalletController : public QObject\n     void coinsSent(WalletModel* wallet_model, SendCoinsRecipient recipient, QByteArray transaction);\n \n private:\n-    QThread m_activity_thread;\n+    QThread* const m_activity_thread;\n+    QObject* const m_activity_worker;\n     interfaces::Node& m_node;\n     const PlatformStyle* const m_platform_style;\n     OptionsModel* const m_options_model;\n     mutable QMutex m_mutex;\n     std::vector<WalletModel*> m_wallets;\n     std::unique_ptr<interfaces::Handler> m_handler_load_wallet;\n \n-    friend class OpenWalletActivity;\n+    friend class WalletControllerActivity;\n };\n \n-class OpenWalletActivity : public QObject\n+class WalletControllerActivity : public QObject\n {\n     Q_OBJECT\n \n public:\n-    OpenWalletActivity(WalletController* wallet_controller, const std::string& name);\n-\n-public Q_SLOTS:\n-    void open();\n+    WalletControllerActivity(WalletController* wallet_controller, QWidget* parent_widget);\n+    virtual ~WalletControllerActivity();\n \n Q_SIGNALS:\n-    void message(QMessageBox::Icon icon, const QString text);\n     void finished();\n+\n+protected:\n+    interfaces::Node& node() const { return m_wallet_controller->m_node; }\n+    QObject* worker() const { return m_wallet_controller->m_activity_worker; }\n+\n+    void showProgressDialog(const QString& label_text);\n+\n+    WalletController* const m_wallet_controller;\n+    QWidget* const m_parent_widget;\n+    QProgressDialog* m_progress_dialog{nullptr};\n+    WalletModel* m_wallet_model{nullptr};\n+    std::string m_error_message;\n+    std::string m_warning_message;\n+};\n+\n+\n+class CreateWalletActivity : public WalletControllerActivity\n+{\n+    Q_OBJECT\n+\n+public:\n+    CreateWalletActivity(WalletController* wallet_controller, QWidget* parent_widget);\n+    virtual ~CreateWalletActivity();\n+\n+    void create();\n+\n+Q_SIGNALS:\n+    void created(WalletModel* wallet_model);\n+\n+private:\n+    void askPassphrase();\n+    void createWallet();\n+    void finish();\n+\n+    SecureString m_passphrase;\n+    CreateWalletDialog* m_create_wallet_dialog{nullptr};\n+    AskPassphraseDialog* m_passphrase_dialog{nullptr};\n+};\n+\n+class OpenWalletActivity : public WalletControllerActivity\n+{\n+    Q_OBJECT\n+\n+public:\n+    OpenWalletActivity(WalletController* wallet_controller, QWidget* parent_widget);\n+\n+    void open(const std::string& path);\n+\n+Q_SIGNALS:\n     void opened(WalletModel* wallet_model);\n \n private:\n-    WalletController* const m_wallet_controller;\n-    std::string const m_name;\n+    void finish();\n };\n \n #endif // BITCOIN_QT_WALLETCONTROLLER_H"
      },
      {
        "sha": "8652827b5912a4313785b5b7696727404bbd8146",
        "filename": "src/qt/walletview.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/walletview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/qt/walletview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -170,9 +170,9 @@ void WalletView::processNewTransaction(const QModelIndex& parent, int start, int\n     QString type = ttm->index(start, TransactionTableModel::Type, parent).data().toString();\n     QModelIndex index = ttm->index(start, 0, parent);\n     QString address = ttm->data(index, TransactionTableModel::AddressRole).toString();\n-    QString label = ttm->data(index, TransactionTableModel::LabelRole).toString();\n+    QString label = GUIUtil::HtmlEscape(ttm->data(index, TransactionTableModel::LabelRole).toString());\n \n-    Q_EMIT incomingTransaction(date, walletModel->getOptionsModel()->getDisplayUnit(), amount, type, address, label, walletModel->getWalletName());\n+    Q_EMIT incomingTransaction(date, walletModel->getOptionsModel()->getDisplayUnit(), amount, type, address, label, GUIUtil::HtmlEscape(walletModel->getWalletName()));\n }\n \n void WalletView::gotoOverviewPage()"
      },
      {
        "sha": "9513c2b9ac292af2e74b44731c463aa6db6096aa",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 81,
        "changes": 103,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -10,6 +10,7 @@\n #include <chain.h>\n #include <chainparams.h>\n #include <coins.h>\n+#include <node/coinstats.h>\n #include <consensus/validation.h>\n #include <core_io.h>\n #include <hash.h>\n@@ -909,77 +910,6 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n-struct CCoinsStats\n-{\n-    int nHeight;\n-    uint256 hashBlock;\n-    uint64_t nTransactions;\n-    uint64_t nTransactionOutputs;\n-    uint64_t nBogoSize;\n-    uint256 hashSerialized;\n-    uint64_t nDiskSize;\n-    CAmount nTotalAmount;\n-\n-    CCoinsStats() : nHeight(0), nTransactions(0), nTransactionOutputs(0), nBogoSize(0), nDiskSize(0), nTotalAmount(0) {}\n-};\n-\n-static void ApplyStats(CCoinsStats &stats, CHashWriter& ss, const uint256& hash, const std::map<uint32_t, Coin>& outputs)\n-{\n-    assert(!outputs.empty());\n-    ss << hash;\n-    ss << VARINT(outputs.begin()->second.nHeight * 2 + outputs.begin()->second.fCoinBase ? 1u : 0u);\n-    stats.nTransactions++;\n-    for (const auto& output : outputs) {\n-        ss << VARINT(output.first + 1);\n-        ss << output.second.out.scriptPubKey;\n-        ss << VARINT(output.second.out.nValue, VarIntMode::NONNEGATIVE_SIGNED);\n-        stats.nTransactionOutputs++;\n-        stats.nTotalAmount += output.second.out.nValue;\n-        stats.nBogoSize += 32 /* txid */ + 4 /* vout index */ + 4 /* height + coinbase */ + 8 /* amount */ +\n-                           2 /* scriptPubKey len */ + output.second.out.scriptPubKey.size() /* scriptPubKey */;\n-    }\n-    ss << VARINT(0u);\n-}\n-\n-//! Calculate statistics about the unspent transaction output set\n-static bool GetUTXOStats(CCoinsView *view, CCoinsStats &stats)\n-{\n-    std::unique_ptr<CCoinsViewCursor> pcursor(view->Cursor());\n-    assert(pcursor);\n-\n-    CHashWriter ss(SER_GETHASH, PROTOCOL_VERSION);\n-    stats.hashBlock = pcursor->GetBestBlock();\n-    {\n-        LOCK(cs_main);\n-        stats.nHeight = LookupBlockIndex(stats.hashBlock)->nHeight;\n-    }\n-    ss << stats.hashBlock;\n-    uint256 prevkey;\n-    std::map<uint32_t, Coin> outputs;\n-    while (pcursor->Valid()) {\n-        boost::this_thread::interruption_point();\n-        COutPoint key;\n-        Coin coin;\n-        if (pcursor->GetKey(key) && pcursor->GetValue(coin)) {\n-            if (!outputs.empty() && key.hash != prevkey) {\n-                ApplyStats(stats, ss, prevkey, outputs);\n-                outputs.clear();\n-            }\n-            prevkey = key.hash;\n-            outputs[key.n] = std::move(coin);\n-        } else {\n-            return error(\"%s: unable to read value\", __func__);\n-        }\n-        pcursor->Next();\n-    }\n-    if (!outputs.empty()) {\n-        ApplyStats(stats, ss, prevkey, outputs);\n-    }\n-    stats.hashSerialized = ss.GetHash();\n-    stats.nDiskSize = view->EstimateSize();\n-    return true;\n-}\n-\n static UniValue pruneblockchain(const JSONRPCRequest& request)\n {\n             RPCHelpMan{\"pruneblockchain\", \"\",\n@@ -1639,6 +1569,7 @@ static UniValue getchaintxstats(const JSONRPCRequest& request)\n             \"  \\\"time\\\": xxxxx,                         (numeric) The timestamp for the final block in the window in UNIX format.\\n\"\n             \"  \\\"txcount\\\": xxxxx,                      (numeric) The total number of transactions in the chain up to that point.\\n\"\n             \"  \\\"window_final_block_hash\\\": \\\"...\\\",      (string) The hash of the final block in the window.\\n\"\n+            \"  \\\"window_final_block_height\\\": xxxxx,    (numeric) The height of the final block in the window.\\n\"\n             \"  \\\"window_block_count\\\": xxxxx,           (numeric) Size of the window in number of blocks.\\n\"\n             \"  \\\"window_tx_count\\\": xxxxx,              (numeric) The number of transactions in the window. Only returned if \\\"window_block_count\\\" is > 0.\\n\"\n             \"  \\\"window_interval\\\": xxxxx,              (numeric) The elapsed time in the window in seconds. Only returned if \\\"window_block_count\\\" is > 0.\\n\"\n@@ -1689,6 +1620,7 @@ static UniValue getchaintxstats(const JSONRPCRequest& request)\n     ret.pushKV(\"time\", (int64_t)pindex->nTime);\n     ret.pushKV(\"txcount\", (int64_t)pindex->nChainTx);\n     ret.pushKV(\"window_final_block_hash\", pindex->GetBlockHash().GetHex());\n+    ret.pushKV(\"window_final_block_height\", pindex->nHeight);\n     ret.pushKV(\"window_block_count\", blockcount);\n     if (blockcount > 0) {\n         ret.pushKV(\"window_tx_count\", nTxDiff);\n@@ -2132,17 +2064,21 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n                 },\n                 RPCResult{\n             \"{\\n\"\n+            \"  \\\"success\\\": true|false,         (boolean) Whether the scan was completed\\n\"\n+            \"  \\\"txouts\\\": n,                   (numeric) The number of unspent transaction outputs scanned\\n\"\n+            \"  \\\"height\\\": n,                   (numeric) The current block height (index)\\n\"\n+            \"  \\\"bestblock\\\": \\\"hex\\\",            (string) The hash of the block at the tip of the chain\\n\"\n             \"  \\\"unspents\\\": [\\n\"\n-            \"    {\\n\"\n-            \"    \\\"txid\\\" : \\\"transactionid\\\",     (string) The transaction id\\n\"\n-            \"    \\\"vout\\\": n,                    (numeric) the vout value\\n\"\n-            \"    \\\"scriptPubKey\\\" : \\\"script\\\",    (string) the script key\\n\"\n-            \"    \\\"desc\\\" : \\\"descriptor\\\",        (string) A specialized descriptor for the matched scriptPubKey\\n\"\n-            \"    \\\"amount\\\" : x.xxx,             (numeric) The total amount in \" + CURRENCY_UNIT + \" of the unspent output\\n\"\n-            \"    \\\"height\\\" : n,                 (numeric) Height of the unspent transaction output\\n\"\n+            \"   {\\n\"\n+            \"    \\\"txid\\\": \\\"hash\\\",              (string) The transaction id\\n\"\n+            \"    \\\"vout\\\": n,                   (numeric) The vout value\\n\"\n+            \"    \\\"scriptPubKey\\\": \\\"script\\\",    (string) The script key\\n\"\n+            \"    \\\"desc\\\": \\\"descriptor\\\",        (string) A specialized descriptor for the matched scriptPubKey\\n\"\n+            \"    \\\"amount\\\": x.xxx,             (numeric) The total amount in \" + CURRENCY_UNIT + \" of the unspent output\\n\"\n+            \"    \\\"height\\\": n,                 (numeric) Height of the unspent transaction output\\n\"\n             \"   }\\n\"\n-            \"   ,...], \\n\"\n-            \" \\\"total_amount\\\" : x.xxx,          (numeric) The total amount of all found unspent outputs in \" + CURRENCY_UNIT + \"\\n\"\n+            \"   ,...],\\n\"\n+            \"  \\\"total_amount\\\": x.xxx,          (numeric) The total amount of all found unspent outputs in \" + CURRENCY_UNIT + \"\\n\"\n             \"]\\n\"\n                 },\n                 RPCExamples{\"\"},\n@@ -2196,15 +2132,20 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n         g_scan_progress = 0;\n         int64_t count = 0;\n         std::unique_ptr<CCoinsViewCursor> pcursor;\n+        CBlockIndex* tip;\n         {\n             LOCK(cs_main);\n             ::ChainstateActive().ForceFlushStateToDisk();\n             pcursor = std::unique_ptr<CCoinsViewCursor>(::ChainstateActive().CoinsDB().Cursor());\n             assert(pcursor);\n+            tip = ::ChainActive().Tip();\n+            assert(tip);\n         }\n         bool res = FindScriptPubKey(g_scan_progress, g_should_abort_scan, count, pcursor.get(), needles, coins);\n         result.pushKV(\"success\", res);\n-        result.pushKV(\"searched_items\", count);\n+        result.pushKV(\"txouts\", count);\n+        result.pushKV(\"height\", tip->nHeight);\n+        result.pushKV(\"bestblock\", tip->GetBlockHash().GetHex());\n \n         for (const auto& it : coins) {\n             const COutPoint& outpoint = it.first;"
      },
      {
        "sha": "c2714f9c83c2a7005f7597a0b2e13239330643bc",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -85,6 +85,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"getblockheader\", 1, \"verbose\" },\n     { \"getchaintxstats\", 0, \"nblocks\" },\n     { \"gettransaction\", 1, \"include_watchonly\" },\n+    { \"gettransaction\", 2, \"verbose\" },\n     { \"getrawtransaction\", 1, \"verbose\" },\n     { \"createrawtransaction\", 0, \"inputs\" },\n     { \"createrawtransaction\", 1, \"outputs\" },"
      },
      {
        "sha": "7c4b3d0cc6a6b302b1077c8963c5b334fa1e5fb4",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 2,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -82,6 +82,10 @@ static UniValue getpeerinfo(const JSONRPCRequest& request)\n             \"    \\\"addrbind\\\":\\\"ip:port\\\",    (string) Bind address of the connection to the peer\\n\"\n             \"    \\\"addrlocal\\\":\\\"ip:port\\\",   (string) Local address as reported by the peer\\n\"\n             \"    \\\"services\\\":\\\"xxxxxxxxxxxxxxxx\\\",   (string) The services offered\\n\"\n+            \"    \\\"servicesnames\\\":[              (array) the services offered, in human-readable form\\n\"\n+            \"        \\\"SERVICE_NAME\\\",         (string) the service name if it is recognised\\n\"\n+            \"         ...\\n\"\n+            \"     ],\\n\"\n             \"    \\\"relaytxes\\\":true|false,    (boolean) Whether peer has asked us to relay transactions to it\\n\"\n             \"    \\\"lastsend\\\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last send\\n\"\n             \"    \\\"lastrecv\\\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last receive\\n\"\n@@ -147,6 +151,7 @@ static UniValue getpeerinfo(const JSONRPCRequest& request)\n         if (stats.addrBind.IsValid())\n             obj.pushKV(\"addrbind\", stats.addrBind.ToString());\n         obj.pushKV(\"services\", strprintf(\"%016x\", stats.nServices));\n+        obj.pushKV(\"servicesnames\", GetServicesNames(stats.nServices));\n         obj.pushKV(\"relaytxes\", stats.fRelayTxes);\n         obj.pushKV(\"lastsend\", stats.nLastSend);\n         obj.pushKV(\"lastrecv\", stats.nLastRecv);\n@@ -446,6 +451,10 @@ static UniValue getnetworkinfo(const JSONRPCRequest& request)\n             \"  \\\"subversion\\\": \\\"/Satoshi:x.x.x/\\\",     (string) the server subversion string\\n\"\n             \"  \\\"protocolversion\\\": xxxxx,              (numeric) the protocol version\\n\"\n             \"  \\\"localservices\\\": \\\"xxxxxxxxxxxxxxxx\\\", (string) the services we offer to the network\\n\"\n+            \"  \\\"localservicesnames\\\": [                (array) the services we offer to the network, in human-readable form\\n\"\n+            \"      \\\"SERVICE_NAME\\\",                    (string) the service name\\n\"\n+            \"       ...\\n\"\n+            \"   ],\\n\"\n             \"  \\\"localrelay\\\": true|false,              (bool) true if transaction relay is requested from peers\\n\"\n             \"  \\\"timeoffset\\\": xxxxx,                   (numeric) the time offset\\n\"\n             \"  \\\"connections\\\": xxxxx,                  (numeric) the number of connections\\n\"\n@@ -484,8 +493,11 @@ static UniValue getnetworkinfo(const JSONRPCRequest& request)\n     obj.pushKV(\"version\",       CLIENT_VERSION);\n     obj.pushKV(\"subversion\",    strSubVersion);\n     obj.pushKV(\"protocolversion\",PROTOCOL_VERSION);\n-    if(g_connman)\n-        obj.pushKV(\"localservices\", strprintf(\"%016x\", g_connman->GetLocalServices()));\n+    if (g_connman) {\n+        ServiceFlags services = g_connman->GetLocalServices();\n+        obj.pushKV(\"localservices\", strprintf(\"%016x\", services));\n+        obj.pushKV(\"localservicesnames\", GetServicesNames(services));\n+    }\n     obj.pushKV(\"localrelay\", g_relay_txes);\n     obj.pushKV(\"timeoffset\",    GetTimeOffset());\n     if (g_connman) {"
      },
      {
        "sha": "461e8025da7f3c9574fe6909d3b285048a18b264",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 22,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -14,9 +14,11 @@\n #include <node/coin.h>\n #include <node/psbt.h>\n #include <node/transaction.h>\n+#include <policy/policy.h>\n #include <policy/rbf.h>\n #include <primitives/transaction.h>\n #include <psbt.h>\n+#include <random.h>\n #include <rpc/rawtransaction_util.h>\n #include <rpc/server.h>\n #include <rpc/util.h>\n@@ -37,11 +39,11 @@\n \n #include <univalue.h>\n \n-/** High fee for sendrawtransaction and testmempoolaccept.\n- * By default, transaction with a fee higher than this will be rejected by the\n- * RPCs. This can be overridden with the maxfeerate argument.\n+/** High fee rate for sendrawtransaction and testmempoolaccept.\n+ * By default, transaction with a fee rate higher than this will be rejected by\n+ * the RPCs. This can be overridden with the maxfeerate argument.\n  */\n-constexpr static CAmount DEFAULT_MAX_RAW_TX_FEE{COIN / 10};\n+static const CFeeRate DEFAULT_MAX_RAW_TX_FEE_RATE{COIN / 10};\n \n static void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n {\n@@ -758,7 +760,10 @@ static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n     }\n     FindCoins(coins);\n \n-    return SignTransaction(mtx, request.params[2], &keystore, coins, true, request.params[3]);\n+    // Parse the prevtxs array\n+    ParsePrevouts(request.params[2], &keystore, coins);\n+\n+    return SignTransaction(mtx, &keystore, coins, request.params[3]);\n }\n \n static UniValue sendrawtransaction(const JSONRPCRequest& request)\n@@ -771,7 +776,7 @@ static UniValue sendrawtransaction(const JSONRPCRequest& request)\n                 \"\\nAlso see createrawtransaction and signrawtransactionwithkey calls.\\n\",\n                 {\n                     {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The hex string of the raw transaction\"},\n-                    {\"maxfeerate\", RPCArg::Type::AMOUNT, /* default */ FormatMoney(DEFAULT_MAX_RAW_TX_FEE),\n+                    {\"maxfeerate\", RPCArg::Type::AMOUNT, /* default */ FormatMoney(DEFAULT_MAX_RAW_TX_FEE_RATE.GetFeePerK()),\n                         \"Reject transactions whose fee rate is higher than the specified value, expressed in \" + CURRENCY_UNIT +\n                             \"/kB.\\nSet to 0 to accept any fee rate.\\n\"},\n                 },\n@@ -801,19 +806,17 @@ static UniValue sendrawtransaction(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n     CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n \n-    CAmount max_raw_tx_fee = DEFAULT_MAX_RAW_TX_FEE;\n+    CFeeRate max_raw_tx_fee_rate = DEFAULT_MAX_RAW_TX_FEE_RATE;\n     // TODO: temporary migration code for old clients. Remove in v0.20\n     if (request.params[1].isBool()) {\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Second argument must be numeric (maxfeerate) and no longer supports a boolean. To allow a transaction with high fees, set maxfeerate to 0.\");\n     } else if (!request.params[1].isNull()) {\n-        size_t weight = GetTransactionWeight(*tx);\n-        CFeeRate fr(AmountFromValue(request.params[1]));\n-        // the +3/4 part rounds the value up, and is the same formula used when\n-        // calculating the fee for a transaction\n-        // (see GetVirtualTransactionSize)\n-        max_raw_tx_fee = fr.GetFee((weight+3)/4);\n+        max_raw_tx_fee_rate = CFeeRate(AmountFromValue(request.params[1]));\n     }\n \n+    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n+    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n+\n     std::string err_string;\n     AssertLockNotHeld(cs_main);\n     const TransactionError err = BroadcastTransaction(tx, err_string, max_raw_tx_fee, /*relay*/ true, /*wait_callback*/ true);\n@@ -837,7 +840,7 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n                             {\"rawtx\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"\"},\n                         },\n                         },\n-                    {\"maxfeerate\", RPCArg::Type::AMOUNT, /* default */ FormatMoney(DEFAULT_MAX_RAW_TX_FEE), \"Reject transactions whose fee rate is higher than the specified value, expressed in \" + CURRENCY_UNIT + \"/kB\\n\"},\n+                    {\"maxfeerate\", RPCArg::Type::AMOUNT, /* default */ FormatMoney(DEFAULT_MAX_RAW_TX_FEE_RATE.GetFeePerK()), \"Reject transactions whose fee rate is higher than the specified value, expressed in \" + CURRENCY_UNIT + \"/kB\\n\"},\n                 },\n                 RPCResult{\n             \"[                   (array) The result of the mempool acceptance test for each raw transaction in the input array.\\n\"\n@@ -877,19 +880,17 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n     CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n     const uint256& tx_hash = tx->GetHash();\n \n-    CAmount max_raw_tx_fee = DEFAULT_MAX_RAW_TX_FEE;\n+    CFeeRate max_raw_tx_fee_rate = DEFAULT_MAX_RAW_TX_FEE_RATE;\n     // TODO: temporary migration code for old clients. Remove in v0.20\n     if (request.params[1].isBool()) {\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Second argument must be numeric (maxfeerate) and no longer supports a boolean. To allow a transaction with high fees, set maxfeerate to 0.\");\n     } else if (!request.params[1].isNull()) {\n-        size_t weight = GetTransactionWeight(*tx);\n-        CFeeRate fr(AmountFromValue(request.params[1]));\n-        // the +3/4 part rounds the value up, and is the same formula used when\n-        // calculating the fee for a transaction\n-        // (see GetVirtualTransactionSize)\n-        max_raw_tx_fee = fr.GetFee((weight+3)/4);\n+        max_raw_tx_fee_rate = CFeeRate(AmountFromValue(request.params[1]));\n     }\n \n+    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n+    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n+\n     UniValue result(UniValue::VARR);\n     UniValue result_0(UniValue::VOBJ);\n     result_0.pushKV(\"txid\", tx_hash.GetHex());\n@@ -1612,8 +1613,30 @@ UniValue joinpsbts(const JSONRPCRequest& request)\n         merged_psbt.unknown.insert(psbt.unknown.begin(), psbt.unknown.end());\n     }\n \n+    // Generate list of shuffled indices for shuffling inputs and outputs of the merged PSBT\n+    std::vector<int> input_indices(merged_psbt.inputs.size());\n+    std::iota(input_indices.begin(), input_indices.end(), 0);\n+    std::vector<int> output_indices(merged_psbt.outputs.size());\n+    std::iota(output_indices.begin(), output_indices.end(), 0);\n+\n+    // Shuffle input and output indicies lists\n+    Shuffle(input_indices.begin(), input_indices.end(), FastRandomContext());\n+    Shuffle(output_indices.begin(), output_indices.end(), FastRandomContext());\n+\n+    PartiallySignedTransaction shuffled_psbt;\n+    shuffled_psbt.tx = CMutableTransaction();\n+    shuffled_psbt.tx->nVersion = merged_psbt.tx->nVersion;\n+    shuffled_psbt.tx->nLockTime = merged_psbt.tx->nLockTime;\n+    for (int i : input_indices) {\n+        shuffled_psbt.AddInput(merged_psbt.tx->vin[i], merged_psbt.inputs[i]);\n+    }\n+    for (int i : output_indices) {\n+        shuffled_psbt.AddOutput(merged_psbt.tx->vout[i], merged_psbt.outputs[i]);\n+    }\n+    shuffled_psbt.unknown.insert(merged_psbt.unknown.begin(), merged_psbt.unknown.end());\n+\n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n-    ssTx << merged_psbt;\n+    ssTx << shuffled_psbt;\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n "
      },
      {
        "sha": "f1d176ba4d1172d26521547ac7727bdb8b3dd9e0",
        "filename": "src/rpc/rawtransaction_util.cpp",
        "status": "modified",
        "additions": 64,
        "deletions": 18,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/rpc/rawtransaction_util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/rpc/rawtransaction_util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction_util.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -147,9 +147,8 @@ static void TxInErrorToJSON(const CTxIn& txin, UniValue& vErrorsRet, const std::\n     vErrorsRet.push_back(entry);\n }\n \n-UniValue SignTransaction(CMutableTransaction& mtx, const UniValue& prevTxsUnival, FillableSigningProvider* keystore, std::map<COutPoint, Coin>& coins, bool is_temp_keystore, const UniValue& hashType)\n+void ParsePrevouts(const UniValue& prevTxsUnival, FillableSigningProvider* keystore, std::map<COutPoint, Coin>& coins)\n {\n-    // Add previous txouts given in the RPC call:\n     if (!prevTxsUnival.isNull()) {\n         UniValue prevTxs = prevTxsUnival.get_array();\n         for (unsigned int idx = 0; idx < prevTxs.size(); ++idx) {\n@@ -197,36 +196,80 @@ UniValue SignTransaction(CMutableTransaction& mtx, const UniValue& prevTxsUnival\n             }\n \n             // if redeemScript and private keys were given, add redeemScript to the keystore so it can be signed\n-            if (is_temp_keystore && (scriptPubKey.IsPayToScriptHash() || scriptPubKey.IsPayToWitnessScriptHash())) {\n+            const bool is_p2sh = scriptPubKey.IsPayToScriptHash();\n+            const bool is_p2wsh = scriptPubKey.IsPayToWitnessScriptHash();\n+            if (keystore && (is_p2sh || is_p2wsh)) {\n                 RPCTypeCheckObj(prevOut,\n                     {\n                         {\"redeemScript\", UniValueType(UniValue::VSTR)},\n                         {\"witnessScript\", UniValueType(UniValue::VSTR)},\n                     }, true);\n                 UniValue rs = find_value(prevOut, \"redeemScript\");\n-                if (!rs.isNull()) {\n-                    std::vector<unsigned char> rsData(ParseHexV(rs, \"redeemScript\"));\n-                    CScript redeemScript(rsData.begin(), rsData.end());\n-                    keystore->AddCScript(redeemScript);\n-                    // Automatically also add the P2WSH wrapped version of the script (to deal with P2SH-P2WSH).\n-                    // This is only for compatibility, it is encouraged to use the explicit witnessScript field instead.\n-                    keystore->AddCScript(GetScriptForWitness(redeemScript));\n-                }\n                 UniValue ws = find_value(prevOut, \"witnessScript\");\n-                if (!ws.isNull()) {\n-                    std::vector<unsigned char> wsData(ParseHexV(ws, \"witnessScript\"));\n-                    CScript witnessScript(wsData.begin(), wsData.end());\n-                    keystore->AddCScript(witnessScript);\n-                    // Automatically also add the P2WSH wrapped version of the script (to deal with P2SH-P2WSH).\n-                    keystore->AddCScript(GetScriptForWitness(witnessScript));\n-                }\n                 if (rs.isNull() && ws.isNull()) {\n                     throw JSONRPCError(RPC_INVALID_PARAMETER, \"Missing redeemScript/witnessScript\");\n                 }\n+\n+                // work from witnessScript when possible\n+                std::vector<unsigned char> scriptData(!ws.isNull() ? ParseHexV(ws, \"witnessScript\") : ParseHexV(rs, \"redeemScript\"));\n+                CScript script(scriptData.begin(), scriptData.end());\n+                keystore->AddCScript(script);\n+                // Automatically also add the P2WSH wrapped version of the script (to deal with P2SH-P2WSH).\n+                // This is done for redeemScript only for compatibility, it is encouraged to use the explicit witnessScript field instead.\n+                CScript witness_output_script{GetScriptForWitness(script)};\n+                keystore->AddCScript(witness_output_script);\n+\n+                if (!ws.isNull() && !rs.isNull()) {\n+                    // if both witnessScript and redeemScript are provided,\n+                    // they should either be the same (for backwards compat),\n+                    // or the redeemScript should be the encoded form of\n+                    // the witnessScript (ie, for p2sh-p2wsh)\n+                    if (ws.get_str() != rs.get_str()) {\n+                        std::vector<unsigned char> redeemScriptData(ParseHexV(rs, \"redeemScript\"));\n+                        CScript redeemScript(redeemScriptData.begin(), redeemScriptData.end());\n+                        if (redeemScript != witness_output_script) {\n+                            throw JSONRPCError(RPC_INVALID_PARAMETER, \"redeemScript does not correspond to witnessScript\");\n+                        }\n+                    }\n+                }\n+\n+                if (is_p2sh) {\n+                    const CTxDestination p2sh{ScriptHash(script)};\n+                    const CTxDestination p2sh_p2wsh{ScriptHash(witness_output_script)};\n+                    if (scriptPubKey == GetScriptForDestination(p2sh)) {\n+                        // traditional p2sh; arguably an error if\n+                        // we got here with rs.IsNull(), because\n+                        // that means the p2sh script was specified\n+                        // via witnessScript param, but for now\n+                        // we'll just quietly accept it\n+                    } else if (scriptPubKey == GetScriptForDestination(p2sh_p2wsh)) {\n+                        // p2wsh encoded as p2sh; ideally the witness\n+                        // script was specified in the witnessScript\n+                        // param, but also support specifying it via\n+                        // redeemScript param for backwards compat\n+                        // (in which case ws.IsNull() == true)\n+                    } else {\n+                        // otherwise, can't generate scriptPubKey from\n+                        // either script, so we got unusable parameters\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, \"redeemScript/witnessScript does not match scriptPubKey\");\n+                    }\n+                } else if (is_p2wsh) {\n+                    // plain p2wsh; could throw an error if script\n+                    // was specified by redeemScript rather than\n+                    // witnessScript (ie, ws.IsNull() == true), but\n+                    // accept it for backwards compat\n+                    const CTxDestination p2wsh{WitnessV0ScriptHash(script)};\n+                    if (scriptPubKey != GetScriptForDestination(p2wsh)) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, \"redeemScript/witnessScript does not match scriptPubKey\");\n+                    }\n+                }\n             }\n         }\n     }\n+}\n \n+UniValue SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore, std::map<COutPoint, Coin>& coins, const UniValue& hashType)\n+{\n     int nHashType = ParseSighashString(hashType);\n \n     bool fHashSingle = ((nHashType & ~SIGHASH_ANYONECANPAY) == SIGHASH_SINGLE);\n@@ -266,6 +309,9 @@ UniValue SignTransaction(CMutableTransaction& mtx, const UniValue& prevTxsUnival\n             if (serror == SCRIPT_ERR_INVALID_STACK_OPERATION) {\n                 // Unable to sign input and verification failed (possible attempt to partially sign).\n                 TxInErrorToJSON(txin, vErrors, \"Unable to sign input, invalid stack size (possibly missing key)\");\n+            } else if (serror == SCRIPT_ERR_SIG_NULLFAIL) {\n+                // Verification failed (possibly due to insufficient signatures).\n+                TxInErrorToJSON(txin, vErrors, \"CHECK(MULTI)SIG failing with non-zero signature (possibly need more signatures)\");\n             } else {\n                 TxInErrorToJSON(txin, vErrors, ScriptErrorString(serror));\n             }"
      },
      {
        "sha": "b35e6da4cae664084553301581ed0393e13c5242",
        "filename": "src/rpc/rawtransaction_util.h",
        "status": "modified",
        "additions": 11,
        "deletions": 3,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/rpc/rawtransaction_util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/rpc/rawtransaction_util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction_util.h?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -12,19 +12,27 @@ class UniValue;\n struct CMutableTransaction;\n class Coin;\n class COutPoint;\n+class SigningProvider;\n \n /**\n  * Sign a transaction with the given keystore and previous transactions\n  *\n  * @param  mtx           The transaction to-be-signed\n- * @param  prevTxs       Array of previous txns outputs that tx depends on but may not yet be in the block chain\n  * @param  keystore      Temporary keystore containing signing keys\n  * @param  coins         Map of unspent outputs - coins in mempool and current chain UTXO set, may be extended by previous txns outputs after call\n- * @param  tempKeystore  Whether to use temporary keystore\n  * @param  hashType      The signature hash type\n  * @returns JSON object with details of signed transaction\n  */\n-UniValue SignTransaction(CMutableTransaction& mtx, const UniValue& prevTxs, FillableSigningProvider* keystore, std::map<COutPoint, Coin>& coins, bool tempKeystore, const UniValue& hashType);\n+UniValue SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore, std::map<COutPoint, Coin>& coins, const UniValue& hashType);\n+\n+/**\n+  * Parse a prevtxs UniValue array and get the map of coins from it\n+  *\n+  * @param  prevTxs       Array of previous txns outputs that tx depends on but may not yet be in the block chain\n+  * @param  keystore      A pointer to the temprorary keystore if there is one\n+  * @param  coins         Map of unspent outputs - coins in mempool and current chain UTXO set, may be extended by previous txns outputs after call\n+  */\n+void ParsePrevouts(const UniValue& prevTxsUnival, FillableSigningProvider* keystore, std::map<COutPoint, Coin>& coins);\n \n /** Create a transaction from univalue parameters */\n CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniValue& outputs_in, const UniValue& locktime, bool rbf);"
      },
      {
        "sha": "3e5bb85c1c6ea08fdb6aa3035396f5df24224aa7",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -162,7 +162,7 @@ UniValue stop(const JSONRPCRequest& jsonRequest)\n     if (jsonRequest.fHelp || jsonRequest.params.size() > 1)\n         throw std::runtime_error(\n             RPCHelpMan{\"stop\",\n-                \"\\nStop Bitcoin server.\",\n+                \"\\nRequest a graceful shutdown of \" PACKAGE_NAME \".\",\n                 {},\n                 RPCResults{},\n                 RPCExamples{\"\"},\n@@ -173,7 +173,7 @@ UniValue stop(const JSONRPCRequest& jsonRequest)\n     if (jsonRequest.params[0].isNum()) {\n         MilliSleep(jsonRequest.params[0].get_int());\n     }\n-    return \"Bitcoin server stopping\";\n+    return PACKAGE_NAME \" stopping\";\n }\n \n static UniValue uptime(const JSONRPCRequest& jsonRequest)"
      },
      {
        "sha": "adda90c104b52e5d70814cf0eaa64ebc4a6d94bd",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -733,3 +733,21 @@ std::vector<CScript> EvalDescriptorStringOrObject(const UniValue& scanobject, Fl\n     }\n     return ret;\n }\n+\n+UniValue GetServicesNames(ServiceFlags services)\n+{\n+    UniValue servicesNames(UniValue::VARR);\n+\n+    if (services & NODE_NETWORK)\n+        servicesNames.push_back(\"NETWORK\");\n+    if (services & NODE_GETUTXO)\n+        servicesNames.push_back(\"GETUTXO\");\n+    if (services & NODE_BLOOM)\n+        servicesNames.push_back(\"BLOOM\");\n+    if (services & NODE_WITNESS)\n+        servicesNames.push_back(\"WITNESS\");\n+    if (services & NODE_NETWORK_LIMITED)\n+        servicesNames.push_back(\"NETWORK_LIMITED\");\n+\n+    return servicesNames;\n+}"
      },
      {
        "sha": "72fc7b6286ddd92ed780bf71dcdea396c80ef9e7",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -8,6 +8,7 @@\n #include <node/transaction.h>\n #include <outputtype.h>\n #include <pubkey.h>\n+#include <protocol.h>\n #include <rpc/protocol.h>\n #include <rpc/request.h>\n #include <script/script.h>\n@@ -90,6 +91,9 @@ std::pair<int64_t, int64_t> ParseDescriptorRange(const UniValue& value);\n /** Evaluate a descriptor given as a string, or as a {\"desc\":...,\"range\":...} object, with default range of 1000. */\n std::vector<CScript> EvalDescriptorStringOrObject(const UniValue& scanobject, FlatSigningProvider& provider);\n \n+/** Returns, given services flags, a list of humanly readable (known) network services */\n+UniValue GetServicesNames(ServiceFlags services);\n+\n struct RPCArg {\n     enum class Type {\n         OBJ,"
      },
      {
        "sha": "20fae2eebfa44176e4944a8f4118719b35617d6f",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -334,7 +334,7 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                 opcode == OP_MOD ||\n                 opcode == OP_LSHIFT ||\n                 opcode == OP_RSHIFT)\n-                return set_error(serror, SCRIPT_ERR_DISABLED_OPCODE); // Disabled opcodes.\n+                return set_error(serror, SCRIPT_ERR_DISABLED_OPCODE); // Disabled opcodes (CVE-2010-5137).\n \n             // With SCRIPT_VERIFY_CONST_SCRIPTCODE, OP_CODESEPARATOR in non-segwit script is rejected even in an unexecuted branch\n             if (opcode == OP_CODESEPARATOR && sigversion == SigVersion::BASE && (flags & SCRIPT_VERIFY_CONST_SCRIPTCODE))\n@@ -1483,6 +1483,8 @@ bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const C\n         return set_error(serror, SCRIPT_ERR_SIG_PUSHONLY);\n     }\n \n+    // scriptSig and scriptPubKey must be evaluated sequentially on the same stack\n+    // rather than being simply concatenated (see CVE-2010-5141)\n     std::vector<std::vector<unsigned char> > stack, stackCopy;\n     if (!EvalScript(stack, scriptSig, flags, checker, SigVersion::BASE, serror))\n         // serror is set"
      },
      {
        "sha": "a38d76fc18b61e76379acc4625c6eab172aaf29d",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -555,6 +555,7 @@ template<typename Stream, unsigned int N, typename T> inline void Unserialize(St\n  * vectors of unsigned char are a special case and are intended to be serialized as a single opaque blob.\n  */\n template<typename Stream, typename T, typename A> void Serialize_impl(Stream& os, const std::vector<T, A>& v, const unsigned char&);\n+template<typename Stream, typename T, typename A> void Serialize_impl(Stream& os, const std::vector<T, A>& v, const bool&);\n template<typename Stream, typename T, typename A, typename V> void Serialize_impl(Stream& os, const std::vector<T, A>& v, const V&);\n template<typename Stream, typename T, typename A> inline void Serialize(Stream& os, const std::vector<T, A>& v);\n template<typename Stream, typename T, typename A> void Unserialize_impl(Stream& is, std::vector<T, A>& v, const unsigned char&);\n@@ -713,6 +714,18 @@ void Serialize_impl(Stream& os, const std::vector<T, A>& v, const unsigned char&\n         os.write((char*)v.data(), v.size() * sizeof(T));\n }\n \n+template<typename Stream, typename T, typename A>\n+void Serialize_impl(Stream& os, const std::vector<T, A>& v, const bool&)\n+{\n+    // A special case for std::vector<bool>, as dereferencing\n+    // std::vector<bool>::const_iterator does not result in a const bool&\n+    // due to std::vector's special casing for bool arguments.\n+    WriteCompactSize(os, v.size());\n+    for (bool elem : v) {\n+        ::Serialize(os, elem);\n+    }\n+}\n+\n template<typename Stream, typename T, typename A, typename V>\n void Serialize_impl(Stream& os, const std::vector<T, A>& v, const V&)\n {"
      },
      {
        "sha": "8901fae7bdee7572f3b2917e8f0f15981c5dc9e7",
        "filename": "src/test/README.md",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/test/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/test/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/README.md?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -49,7 +49,3 @@ unit tests.  The file naming convention is `<source_filename>_tests.cpp`\n and such files should wrap their tests in a test suite\n called `<source_filename>_tests`. For an example of this pattern,\n examine `uint256_tests.cpp`.\n-\n-For further reading, I found the following website to be helpful in\n-explaining how the boost unit test framework works:\n-[http://www.alittlemadness.com/2009/03/31/c-unit-testing-with-boosttest/](http://archive.is/dRBGf)."
      },
      {
        "sha": "3241f32f5683d72fad282ceb439576ab22d1490c",
        "filename": "src/test/data/script_tests.json",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/test/data/script_tests.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/test/data/script_tests.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_tests.json?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -829,15 +829,16 @@\n [\"NOP\", \"2SWAP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n [\"1\", \"2 3 2SWAP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n \n+\n+[\"NOP\", \"SIZE 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+\n+[\"TEST DISABLED OP CODES (CVE-2010-5137)\"],\n [\"'a' 'b'\", \"CAT\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"CAT disabled\"],\n [\"'a' 'b' 0\", \"IF CAT ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"CAT disabled\"],\n [\"'abc' 1 1\", \"SUBSTR\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"SUBSTR disabled\"],\n [\"'abc' 1 1 0\", \"IF SUBSTR ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"SUBSTR disabled\"],\n [\"'abc' 2 0\", \"IF LEFT ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"LEFT disabled\"],\n [\"'abc' 2 0\", \"IF RIGHT ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"RIGHT disabled\"],\n-\n-[\"NOP\", \"SIZE 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-\n [\"'abc'\", \"IF INVERT ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"INVERT disabled\"],\n [\"1 2 0 IF AND ELSE 1 ENDIF\", \"NOP\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"AND disabled\"],\n [\"1 2 0 IF OR ELSE 1 ENDIF\", \"NOP\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"OR disabled\"],"
      },
      {
        "sha": "b0a613372ff146a7b42cac3c0ac961ccb21ada1e",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -151,17 +151,17 @@ BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n     auto peerLogic = MakeUnique<PeerLogicValidation>(connman.get(), nullptr, scheduler, false);\n \n     const Consensus::Params& consensusParams = Params().GetConsensus();\n-    constexpr int nMaxOutbound = 8;\n+    constexpr int max_outbound_full_relay = 8;\n     CConnman::Options options;\n     options.nMaxConnections = 125;\n-    options.nMaxOutbound = nMaxOutbound;\n+    options.m_max_outbound_full_relay = max_outbound_full_relay;\n     options.nMaxFeeler = 1;\n \n     connman->Init(options);\n     std::vector<CNode *> vNodes;\n \n     // Mock some outbound peers\n-    for (int i=0; i<nMaxOutbound; ++i) {\n+    for (int i=0; i<max_outbound_full_relay; ++i) {\n         AddRandomOutboundPeer(vNodes, *peerLogic, connman.get());\n     }\n \n@@ -190,7 +190,7 @@ BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n     AddRandomOutboundPeer(vNodes, *peerLogic, connman.get());\n \n     peerLogic->CheckForStaleTipAndEvictPeers(consensusParams);\n-    for (int i=0; i<nMaxOutbound; ++i) {\n+    for (int i=0; i<max_outbound_full_relay; ++i) {\n         BOOST_CHECK(vNodes[i]->fDisconnect == false);\n     }\n     // Last added node should get marked for eviction\n@@ -203,10 +203,10 @@ BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n     UpdateLastBlockAnnounceTime(vNodes.back()->GetId(), GetTime());\n \n     peerLogic->CheckForStaleTipAndEvictPeers(consensusParams);\n-    for (int i=0; i<nMaxOutbound-1; ++i) {\n+    for (int i=0; i<max_outbound_full_relay-1; ++i) {\n         BOOST_CHECK(vNodes[i]->fDisconnect == false);\n     }\n-    BOOST_CHECK(vNodes[nMaxOutbound-1]->fDisconnect == true);\n+    BOOST_CHECK(vNodes[max_outbound_full_relay-1]->fDisconnect == true);\n     BOOST_CHECK(vNodes.back()->fDisconnect == false);\n \n     bool dummy;"
      },
      {
        "sha": "dc38a1a818ef6154e08148d44cc0995a6de1228d",
        "filename": "src/test/merkle_tests.cpp",
        "status": "modified",
        "additions": 100,
        "deletions": 0,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/test/merkle_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/test/merkle_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/merkle_tests.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -249,4 +249,104 @@ BOOST_AUTO_TEST_CASE(merkle_test)\n     }\n }\n \n+\n+BOOST_AUTO_TEST_CASE(merkle_test_empty_block)\n+{\n+    bool mutated = false;\n+    CBlock block;\n+    uint256 root = BlockMerkleRoot(block, &mutated);\n+\n+    BOOST_CHECK_EQUAL(root.IsNull(), true);\n+    BOOST_CHECK_EQUAL(mutated, false);\n+}\n+\n+BOOST_AUTO_TEST_CASE(merkle_test_oneTx_block)\n+{\n+    bool mutated = false;\n+    CBlock block;\n+\n+    block.vtx.resize(1);\n+    CMutableTransaction mtx;\n+    mtx.nLockTime = 0;\n+    block.vtx[0] = MakeTransactionRef(std::move(mtx));\n+    uint256 root = BlockMerkleRoot(block, &mutated);\n+    BOOST_CHECK_EQUAL(root, block.vtx[0]->GetHash());\n+    BOOST_CHECK_EQUAL(mutated, false);\n+}\n+\n+BOOST_AUTO_TEST_CASE(merkle_test_OddTxWithRepeatedLastTx_block)\n+{\n+    bool mutated;\n+    CBlock block, blockWithRepeatedLastTx;\n+\n+    block.vtx.resize(3);\n+\n+    for (std::size_t pos = 0; pos < block.vtx.size(); pos++) {\n+        CMutableTransaction mtx;\n+        mtx.nLockTime = pos;\n+        block.vtx[pos] = MakeTransactionRef(std::move(mtx));\n+    }\n+\n+    blockWithRepeatedLastTx = block;\n+    blockWithRepeatedLastTx.vtx.push_back(blockWithRepeatedLastTx.vtx.back());\n+\n+    uint256 rootofBlock = BlockMerkleRoot(block, &mutated);\n+    BOOST_CHECK_EQUAL(mutated, false);\n+\n+    uint256 rootofBlockWithRepeatedLastTx = BlockMerkleRoot(blockWithRepeatedLastTx, &mutated);\n+    BOOST_CHECK_EQUAL(rootofBlock, rootofBlockWithRepeatedLastTx);\n+    BOOST_CHECK_EQUAL(mutated, true);\n+}\n+\n+BOOST_AUTO_TEST_CASE(merkle_test_LeftSubtreeRightSubtree)\n+{\n+    CBlock block, leftSubtreeBlock, rightSubtreeBlock;\n+\n+    block.vtx.resize(4);\n+    std::size_t pos;\n+    for (pos = 0; pos < block.vtx.size(); pos++) {\n+        CMutableTransaction mtx;\n+        mtx.nLockTime = pos;\n+        block.vtx[pos] = MakeTransactionRef(std::move(mtx));\n+    }\n+\n+    for (pos = 0; pos < block.vtx.size() / 2; pos++)\n+        leftSubtreeBlock.vtx.push_back(block.vtx[pos]);\n+\n+    for (pos = block.vtx.size() / 2; pos < block.vtx.size(); pos++)\n+        rightSubtreeBlock.vtx.push_back(block.vtx[pos]);\n+\n+    uint256 root = BlockMerkleRoot(block);\n+    uint256 rootOfLeftSubtree = BlockMerkleRoot(leftSubtreeBlock);\n+    uint256 rootOfRightSubtree = BlockMerkleRoot(rightSubtreeBlock);\n+    std::vector<uint256> leftRight;\n+    leftRight.push_back(rootOfLeftSubtree);\n+    leftRight.push_back(rootOfRightSubtree);\n+    uint256 rootOfLR = ComputeMerkleRoot(leftRight);\n+\n+    BOOST_CHECK_EQUAL(root, rootOfLR);\n+}\n+\n+BOOST_AUTO_TEST_CASE(merkle_test_BlockWitness)\n+{\n+    CBlock block;\n+\n+    block.vtx.resize(2);\n+    for (std::size_t pos = 0; pos < block.vtx.size(); pos++) {\n+        CMutableTransaction mtx;\n+        mtx.nLockTime = pos;\n+        block.vtx[pos] = MakeTransactionRef(std::move(mtx));\n+    }\n+\n+    uint256 blockWitness = BlockWitnessMerkleRoot(block);\n+\n+    std::vector<uint256> hashes;\n+    hashes.resize(block.vtx.size());\n+    hashes[0].SetNull();\n+    hashes[1] = block.vtx[1]->GetHash();\n+\n+    uint256 merkelRootofHashes = ComputeMerkleRoot(hashes);\n+\n+    BOOST_CHECK_EQUAL(merkelRootofHashes, blockWitness);\n+}\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "b90be15fbaa558f9f0790c9a4e04deb13b9b2e30",
        "filename": "src/test/serialize_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/test/serialize_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/test/serialize_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/serialize_tests.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -258,6 +258,14 @@ static bool isCanonicalException(const std::ios_base::failure& ex)\n     return strcmp(expectedException.what(), ex.what()) == 0;\n }\n \n+BOOST_AUTO_TEST_CASE(vector_bool)\n+{\n+    std::vector<uint8_t> vec1{1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1};\n+    std::vector<bool> vec2{1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1};\n+\n+    BOOST_CHECK(vec1 == std::vector<uint8_t>(vec2.begin(), vec2.end()));\n+    BOOST_CHECK(SerializeHash(vec1) == SerializeHash(vec2));\n+}\n \n BOOST_AUTO_TEST_CASE(noncanonical)\n {"
      },
      {
        "sha": "193858cca9c38941fb0774f023751e1f40ea5030",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -13,7 +13,7 @@\n \n #include <boost/test/unit_test.hpp>\n \n-bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheSigStore, bool cacheFullScriptStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks);\n+bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, unsigned int flags, bool cacheSigStore, bool cacheFullScriptStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks);\n \n BOOST_AUTO_TEST_SUITE(tx_validationcache_tests)\n \n@@ -125,7 +125,7 @@ static void ValidateCheckInputsForAllFlags(const CTransaction &tx, uint32_t fail\n             // WITNESS requires P2SH\n             test_flags |= SCRIPT_VERIFY_P2SH;\n         }\n-        bool ret = CheckInputs(tx, state, &::ChainstateActive().CoinsTip(), true, test_flags, true, add_to_cache, txdata, nullptr);\n+        bool ret = CheckInputs(tx, state, &::ChainstateActive().CoinsTip(), test_flags, true, add_to_cache, txdata, nullptr);\n         // CheckInputs should succeed iff test_flags doesn't intersect with\n         // failing_flags\n         bool expected_return_value = !(test_flags & failing_flags);\n@@ -135,13 +135,13 @@ static void ValidateCheckInputsForAllFlags(const CTransaction &tx, uint32_t fail\n         if (ret && add_to_cache) {\n             // Check that we get a cache hit if the tx was valid\n             std::vector<CScriptCheck> scriptchecks;\n-            BOOST_CHECK(CheckInputs(tx, state, &::ChainstateActive().CoinsTip(), true, test_flags, true, add_to_cache, txdata, &scriptchecks));\n+            BOOST_CHECK(CheckInputs(tx, state, &::ChainstateActive().CoinsTip(), test_flags, true, add_to_cache, txdata, &scriptchecks));\n             BOOST_CHECK(scriptchecks.empty());\n         } else {\n             // Check that we get script executions to check, if the transaction\n             // was invalid, or we didn't add to cache.\n             std::vector<CScriptCheck> scriptchecks;\n-            BOOST_CHECK(CheckInputs(tx, state, &::ChainstateActive().CoinsTip(), true, test_flags, true, add_to_cache, txdata, &scriptchecks));\n+            BOOST_CHECK(CheckInputs(tx, state, &::ChainstateActive().CoinsTip(), test_flags, true, add_to_cache, txdata, &scriptchecks));\n             BOOST_CHECK_EQUAL(scriptchecks.size(), tx.vin.size());\n         }\n     }\n@@ -204,13 +204,13 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         CValidationState state;\n         PrecomputedTransactionData ptd_spend_tx(spend_tx);\n \n-        BOOST_CHECK(!CheckInputs(CTransaction(spend_tx), state, &::ChainstateActive().CoinsTip(), true, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_DERSIG, true, true, ptd_spend_tx, nullptr));\n+        BOOST_CHECK(!CheckInputs(CTransaction(spend_tx), state, &::ChainstateActive().CoinsTip(), SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_DERSIG, true, true, ptd_spend_tx, nullptr));\n \n         // If we call again asking for scriptchecks (as happens in\n         // ConnectBlock), we should add a script check object for this -- we're\n         // not caching invalidity (if that changes, delete this test case).\n         std::vector<CScriptCheck> scriptchecks;\n-        BOOST_CHECK(CheckInputs(CTransaction(spend_tx), state, &::ChainstateActive().CoinsTip(), true, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_DERSIG, true, true, ptd_spend_tx, &scriptchecks));\n+        BOOST_CHECK(CheckInputs(CTransaction(spend_tx), state, &::ChainstateActive().CoinsTip(), SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_DERSIG, true, true, ptd_spend_tx, &scriptchecks));\n         BOOST_CHECK_EQUAL(scriptchecks.size(), 1U);\n \n         // Test that CheckInputs returns true iff DERSIG-enforcing flags are\n@@ -272,7 +272,7 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         invalid_with_cltv_tx.vin[0].scriptSig = CScript() << vchSig << 100;\n         CValidationState state;\n         PrecomputedTransactionData txdata(invalid_with_cltv_tx);\n-        BOOST_CHECK(CheckInputs(CTransaction(invalid_with_cltv_tx), state, ::ChainstateActive().CoinsTip(), true, SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY, true, true, txdata, nullptr));\n+        BOOST_CHECK(CheckInputs(CTransaction(invalid_with_cltv_tx), state, ::ChainstateActive().CoinsTip(), SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY, true, true, txdata, nullptr));\n     }\n \n     // TEST CHECKSEQUENCEVERIFY\n@@ -300,7 +300,7 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         invalid_with_csv_tx.vin[0].scriptSig = CScript() << vchSig << 100;\n         CValidationState state;\n         PrecomputedTransactionData txdata(invalid_with_csv_tx);\n-        BOOST_CHECK(CheckInputs(CTransaction(invalid_with_csv_tx), state, &::ChainstateActive().CoinsTip(), true, SCRIPT_VERIFY_CHECKSEQUENCEVERIFY, true, true, txdata, nullptr));\n+        BOOST_CHECK(CheckInputs(CTransaction(invalid_with_csv_tx), state, &::ChainstateActive().CoinsTip(), SCRIPT_VERIFY_CHECKSEQUENCEVERIFY, true, true, txdata, nullptr));\n     }\n \n     // TODO: add tests for remaining script flags\n@@ -362,12 +362,12 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         CValidationState state;\n         PrecomputedTransactionData txdata(tx);\n         // This transaction is now invalid under segwit, because of the second input.\n-        BOOST_CHECK(!CheckInputs(CTransaction(tx), state, &::ChainstateActive().CoinsTip(), true, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, true, true, txdata, nullptr));\n+        BOOST_CHECK(!CheckInputs(CTransaction(tx), state, &::ChainstateActive().CoinsTip(), SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, true, true, txdata, nullptr));\n \n         std::vector<CScriptCheck> scriptchecks;\n         // Make sure this transaction was not cached (ie because the first\n         // input was valid)\n-        BOOST_CHECK(CheckInputs(CTransaction(tx), state, &::ChainstateActive().CoinsTip(), true, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, true, true, txdata, &scriptchecks));\n+        BOOST_CHECK(CheckInputs(CTransaction(tx), state, &::ChainstateActive().CoinsTip(), SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, true, true, txdata, &scriptchecks));\n         // Should get 2 script checks back -- caching is on a whole-transaction basis.\n         BOOST_CHECK_EQUAL(scriptchecks.size(), 2U);\n     }"
      },
      {
        "sha": "d0cd4b0a03d2d26c95f63f58bc3c7d11d6df6117",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -913,7 +913,7 @@ BOOST_FIXTURE_TEST_CASE(util_ChainMerge, ChainMergeTestingSetup)\n     // Results file is formatted like:\n     //\n     //   <input> || <output>\n-    BOOST_CHECK_EQUAL(out_sha_hex, \"b284f4b4a15dd6bf8c06213a69a004b1960388e1d9917173927db52ac220927f\");\n+    BOOST_CHECK_EQUAL(out_sha_hex, \"94b4ad55c8ac639a56b93e36f7e32e4c611fd7d7dd7b2be6a71707b1eadcaec7\");\n }\n \n BOOST_AUTO_TEST_CASE(util_FormatMoney)"
      },
      {
        "sha": "aa44ed3e3a92fc6366f92f9658ed3482291ee0fe",
        "filename": "src/util/error.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/util/error.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/util/error.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/error.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -41,12 +41,12 @@ std::string ResolveErrMsg(const std::string& optname, const std::string& strBind\n     return strprintf(_(\"Cannot resolve -%s address: '%s'\").translated, optname, strBind);\n }\n \n-std::string AmountHighWarn(const std::string& optname)\n+bilingual_str AmountHighWarn(const std::string& optname)\n {\n-    return strprintf(_(\"%s is set very high!\").translated, optname);\n+    return strprintf(_(\"%s is set very high!\"), optname);\n }\n \n-std::string AmountErrMsg(const std::string& optname, const std::string& strValue)\n+bilingual_str AmountErrMsg(const std::string& optname, const std::string& strValue)\n {\n-    return strprintf(_(\"Invalid amount for -%s=<amount>: '%s'\").translated, optname, strValue);\n+    return strprintf(_(\"Invalid amount for -%s=<amount>: '%s'\"), optname, strValue);\n }"
      },
      {
        "sha": "f540b0020d96291f216405b114595c6ff7ab50d2",
        "filename": "src/util/error.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/util/error.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/util/error.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/error.h?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -17,6 +17,8 @@\n \n #include <string>\n \n+struct bilingual_str;\n+\n enum class TransactionError {\n     OK, //!< No error\n     MISSING_INPUTS,\n@@ -34,8 +36,8 @@ std::string TransactionErrorString(const TransactionError error);\n \n std::string ResolveErrMsg(const std::string& optname, const std::string& strBind);\n \n-std::string AmountHighWarn(const std::string& optname);\n+bilingual_str AmountHighWarn(const std::string& optname);\n \n-std::string AmountErrMsg(const std::string& optname, const std::string& strValue);\n+bilingual_str AmountErrMsg(const std::string& optname, const std::string& strValue);\n \n #endif // BITCOIN_UTIL_ERROR_H"
      },
      {
        "sha": "8098cde093830966753f55c9b05ec3959ec6eb13",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -954,16 +954,18 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n std::string ArgsManager::GetChainName() const\n {\n     LOCK(cs_args);\n-    bool fRegTest = ArgsManagerHelper::GetNetBoolArg(*this, \"-regtest\");\n-    bool fTestNet = ArgsManagerHelper::GetNetBoolArg(*this, \"-testnet\");\n+    const bool fRegTest = ArgsManagerHelper::GetNetBoolArg(*this, \"-regtest\");\n+    const bool fTestNet = ArgsManagerHelper::GetNetBoolArg(*this, \"-testnet\");\n+    const bool is_chain_arg_set = IsArgSet(\"-chain\");\n \n-    if (fTestNet && fRegTest)\n-        throw std::runtime_error(\"Invalid combination of -regtest and -testnet.\");\n+    if ((int)is_chain_arg_set + (int)fRegTest + (int)fTestNet > 1) {\n+        throw std::runtime_error(\"Invalid combination of -regtest, -testnet and -chain. Can use at most one.\");\n+    }\n     if (fRegTest)\n         return CBaseChainParams::REGTEST;\n     if (fTestNet)\n         return CBaseChainParams::TESTNET;\n-    return CBaseChainParams::MAIN;\n+    return GetArg(\"-chain\", CBaseChainParams::MAIN);\n }\n \n bool RenameOver(fs::path src, fs::path dest)"
      },
      {
        "sha": "39780e1c6dc9c7f9338d890cfe94d4eebb6828ec",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 593,
        "deletions": 402,
        "changes": 995,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -184,7 +184,7 @@ std::unique_ptr<CBlockTreeDB> pblocktree;\n // See definition for documentation\n static void FindFilesToPruneManual(std::set<int>& setFilesToPrune, int nManualPruneHeight);\n static void FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPruneAfterHeight);\n-bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheSigStore, bool cacheFullScriptStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks = nullptr);\n+bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, unsigned int flags, bool cacheSigStore, bool cacheFullScriptStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks = nullptr);\n static FILE* OpenUndoFile(const FlatFilePos &pos, bool fReadOnly = false);\n static FlatFileSeq BlockFileSeq();\n static FlatFileSeq UndoFileSeq();\n@@ -425,24 +425,137 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, CValidationSt\n         }\n     }\n \n-    return CheckInputs(tx, state, view, true, flags, cacheSigStore, true, txdata);\n+    return CheckInputs(tx, state, view, flags, cacheSigStore, true, txdata);\n }\n \n-/**\n- * @param[out] coins_to_uncache   Return any outpoints which were not previously present in the\n- *                                coins cache, but were added as a result of validating the tx\n- *                                for mempool acceptance. This allows the caller to optionally\n- *                                remove the cache additions if the associated transaction ends\n- *                                up being rejected by the mempool.\n- */\n-static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool& pool, CValidationState& state, const CTransactionRef& ptx,\n-                              bool* pfMissingInputs, int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n-                              bool bypass_limits, const CAmount& nAbsurdFee, std::vector<COutPoint>& coins_to_uncache, bool test_accept) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+namespace {\n+\n+class MemPoolAccept\n {\n-    const CTransaction& tx = *ptx;\n-    const uint256 hash = tx.GetHash();\n-    AssertLockHeld(cs_main);\n-    LOCK(pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n+public:\n+    MemPoolAccept(CTxMemPool& mempool) : m_pool(mempool), m_view(&m_dummy), m_viewmempool(&::ChainstateActive().CoinsTip(), m_pool),\n+        m_limit_ancestors(gArgs.GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT)),\n+        m_limit_ancestor_size(gArgs.GetArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT)*1000),\n+        m_limit_descendants(gArgs.GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT)),\n+        m_limit_descendant_size(gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT)*1000) {}\n+\n+    // We put the arguments we're handed into a struct, so we can pass them\n+    // around easier.\n+    struct ATMPArgs {\n+        const CChainParams& m_chainparams;\n+        CValidationState &m_state;\n+        bool* m_missing_inputs;\n+        const int64_t m_accept_time;\n+        std::list<CTransactionRef>* m_replaced_transactions;\n+        const bool m_bypass_limits;\n+        const CAmount& m_absurd_fee;\n+        /*\n+         * Return any outpoints which were not previously present in the coins\n+         * cache, but were added as a result of validating the tx for mempool\n+         * acceptance. This allows the caller to optionally remove the cache\n+         * additions if the associated transaction ends up being rejected by\n+         * the mempool.\n+         */\n+        std::vector<COutPoint>& m_coins_to_uncache;\n+        const bool m_test_accept;\n+    };\n+\n+    // Single transaction acceptance\n+    bool AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+\n+private:\n+    // All the intermediate state that gets passed between the various levels\n+    // of checking a given transaction.\n+    struct Workspace {\n+        Workspace(const CTransactionRef& ptx) : m_ptx(ptx), m_hash(ptx->GetHash()) {}\n+        std::set<uint256> m_conflicts;\n+        CTxMemPool::setEntries m_all_conflicting;\n+        CTxMemPool::setEntries m_ancestors;\n+        std::unique_ptr<CTxMemPoolEntry> m_entry;\n+\n+        bool m_replacement_transaction;\n+        CAmount m_modified_fees;\n+        CAmount m_conflicting_fees;\n+        size_t m_conflicting_size;\n+\n+        const CTransactionRef& m_ptx;\n+        const uint256& m_hash;\n+    };\n+\n+    // Run the policy checks on a given transaction, excluding any script checks.\n+    // Looks up inputs, calculates feerate, considers replacement, evaluates\n+    // package limits, etc. As this function can be invoked for \"free\" by a peer,\n+    // only tests that are fast should be done here (to avoid CPU DoS).\n+    bool PreChecks(ATMPArgs& args, Workspace& ws) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n+\n+    // Run the script checks using our policy flags. As this can be slow, we should\n+    // only invoke this on transactions that have otherwise passed policy checks.\n+    bool PolicyScriptChecks(ATMPArgs& args, Workspace& ws, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+\n+    // Re-run the script checks, using consensus flags, and try to cache the\n+    // result in the scriptcache. This should be done after\n+    // PolicyScriptChecks(). This requires that all inputs either be in our\n+    // utxo set or in the mempool.\n+    bool ConsensusScriptChecks(ATMPArgs& args, Workspace& ws, PrecomputedTransactionData &txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+\n+    // Try to add the transaction to the mempool, removing any conflicts first.\n+    // Returns true if the transaction is in the mempool after any size\n+    // limiting is performed, false otherwise.\n+    bool Finalize(ATMPArgs& args, Workspace& ws) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n+\n+    // Compare a package's feerate against minimum allowed.\n+    bool CheckFeeRate(size_t package_size, CAmount package_fee, CValidationState& state)\n+    {\n+        CAmount mempoolRejectFee = m_pool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(package_size);\n+        if (mempoolRejectFee > 0 && package_fee < mempoolRejectFee) {\n+            return state.Invalid(ValidationInvalidReason::TX_MEMPOOL_POLICY, false, REJECT_INSUFFICIENTFEE, \"mempool min fee not met\", strprintf(\"%d < %d\", package_fee, mempoolRejectFee));\n+        }\n+\n+        if (package_fee < ::minRelayTxFee.GetFee(package_size)) {\n+            return state.Invalid(ValidationInvalidReason::TX_MEMPOOL_POLICY, false, REJECT_INSUFFICIENTFEE, \"min relay fee not met\", strprintf(\"%d < %d\", package_fee, ::minRelayTxFee.GetFee(package_size)));\n+        }\n+        return true;\n+    }\n+\n+private:\n+    CTxMemPool& m_pool;\n+    CCoinsViewCache m_view;\n+    CCoinsViewMemPool m_viewmempool;\n+    CCoinsView m_dummy;\n+\n+    // The package limits in effect at the time of invocation.\n+    const size_t m_limit_ancestors;\n+    const size_t m_limit_ancestor_size;\n+    // These may be modified while evaluating a transaction (eg to account for\n+    // in-mempool conflicts; see below).\n+    size_t m_limit_descendants;\n+    size_t m_limit_descendant_size;\n+};\n+\n+bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n+{\n+    const CTransactionRef& ptx = ws.m_ptx;\n+    const CTransaction& tx = *ws.m_ptx;\n+    const uint256& hash = ws.m_hash;\n+\n+    // Copy/alias what we need out of args\n+    CValidationState &state = args.m_state;\n+    bool* pfMissingInputs = args.m_missing_inputs;\n+    const int64_t nAcceptTime = args.m_accept_time;\n+    const bool bypass_limits = args.m_bypass_limits;\n+    const CAmount& nAbsurdFee = args.m_absurd_fee;\n+    std::vector<COutPoint>& coins_to_uncache = args.m_coins_to_uncache;\n+\n+    // Alias what we need out of ws\n+    std::set<uint256>& setConflicts = ws.m_conflicts;\n+    CTxMemPool::setEntries& allConflicting = ws.m_all_conflicting;\n+    CTxMemPool::setEntries& setAncestors = ws.m_ancestors;\n+    std::unique_ptr<CTxMemPoolEntry>& entry = ws.m_entry;\n+    bool& fReplacementTransaction = ws.m_replacement_transaction;\n+    CAmount& nModifiedFees = ws.m_modified_fees;\n+    CAmount& nConflictingFees = ws.m_conflicting_fees;\n+    size_t& nConflictingSize = ws.m_conflicting_size;\n+\n     if (pfMissingInputs) {\n         *pfMissingInputs = false;\n     }\n@@ -461,7 +574,8 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n \n     // Do not work on transactions that are too small.\n     // A transaction with 1 segwit input and 1 P2WPHK output has non-witness size of 82 bytes.\n-    // Transactions smaller than this are not relayed to reduce unnecessary malloc overhead.\n+    // Transactions smaller than this are not relayed to mitigate CVE-2017-12842 by not relaying\n+    // 64-byte transactions.\n     if (::GetSerializeSize(tx, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) < MIN_STANDARD_TX_NONWITNESS_SIZE)\n         return state.Invalid(ValidationInvalidReason::TX_NOT_STANDARD, false, REJECT_NONSTANDARD, \"tx-size-small\");\n \n@@ -472,15 +586,14 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         return state.Invalid(ValidationInvalidReason::TX_PREMATURE_SPEND, false, REJECT_NONSTANDARD, \"non-final\");\n \n     // is it already in the memory pool?\n-    if (pool.exists(hash)) {\n+    if (m_pool.exists(hash)) {\n         return state.Invalid(ValidationInvalidReason::TX_CONFLICT, false, REJECT_DUPLICATE, \"txn-already-in-mempool\");\n     }\n \n     // Check for conflicts with in-memory transactions\n-    std::set<uint256> setConflicts;\n     for (const CTxIn &txin : tx.vin)\n     {\n-        const CTransaction* ptxConflicting = pool.GetConflictTx(txin.prevout);\n+        const CTransaction* ptxConflicting = m_pool.GetConflictTx(txin.prevout);\n         if (ptxConflicting) {\n             if (!setConflicts.count(ptxConflicting->GetHash()))\n             {\n@@ -514,351 +627,436 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         }\n     }\n \n-    {\n-        CCoinsView dummy;\n-        CCoinsViewCache view(&dummy);\n-\n-        LockPoints lp;\n-        CCoinsViewCache& coins_cache = ::ChainstateActive().CoinsTip();\n-        CCoinsViewMemPool viewMemPool(&coins_cache, pool);\n-        view.SetBackend(viewMemPool);\n-\n-        // do all inputs exist?\n-        for (const CTxIn& txin : tx.vin) {\n-            if (!coins_cache.HaveCoinInCache(txin.prevout)) {\n-                coins_to_uncache.push_back(txin.prevout);\n-            }\n+    LockPoints lp;\n+    m_view.SetBackend(m_viewmempool);\n \n-            // Note: this call may add txin.prevout to the coins cache\n-            // (CoinsTip().cacheCoins) by way of FetchCoin(). It should be removed\n-            // later (via coins_to_uncache) if this tx turns out to be invalid.\n-            if (!view.HaveCoin(txin.prevout)) {\n-                // Are inputs missing because we already have the tx?\n-                for (size_t out = 0; out < tx.vout.size(); out++) {\n-                    // Optimistically just do efficient check of cache for outputs\n-                    if (coins_cache.HaveCoinInCache(COutPoint(hash, out))) {\n-                        return state.Invalid(ValidationInvalidReason::TX_CONFLICT, false, REJECT_DUPLICATE, \"txn-already-known\");\n-                    }\n-                }\n-                // Otherwise assume this might be an orphan tx for which we just haven't seen parents yet\n-                if (pfMissingInputs) {\n-                    *pfMissingInputs = true;\n+    CCoinsViewCache& coins_cache = ::ChainstateActive().CoinsTip();\n+    // do all inputs exist?\n+    for (const CTxIn& txin : tx.vin) {\n+        if (!coins_cache.HaveCoinInCache(txin.prevout)) {\n+            coins_to_uncache.push_back(txin.prevout);\n+        }\n+\n+        // Note: this call may add txin.prevout to the coins cache\n+        // (coins_cache.cacheCoins) by way of FetchCoin(). It should be removed\n+        // later (via coins_to_uncache) if this tx turns out to be invalid.\n+        if (!m_view.HaveCoin(txin.prevout)) {\n+            // Are inputs missing because we already have the tx?\n+            for (size_t out = 0; out < tx.vout.size(); out++) {\n+                // Optimistically just do efficient check of cache for outputs\n+                if (coins_cache.HaveCoinInCache(COutPoint(hash, out))) {\n+                    return state.Invalid(ValidationInvalidReason::TX_CONFLICT, false, REJECT_DUPLICATE, \"txn-already-known\");\n                 }\n-                return false; // fMissingInputs and !state.IsInvalid() is used to detect this condition, don't set state.Invalid()\n             }\n+            // Otherwise assume this might be an orphan tx for which we just haven't seen parents yet\n+            if (pfMissingInputs) {\n+                *pfMissingInputs = true;\n+            }\n+            return false; // fMissingInputs and !state.IsInvalid() is used to detect this condition, don't set state.Invalid()\n         }\n+    }\n \n-        // Bring the best block into scope\n-        view.GetBestBlock();\n+    // Bring the best block into scope\n+    m_view.GetBestBlock();\n \n-        // we have all inputs cached now, so switch back to dummy, so we don't need to keep lock on mempool\n-        view.SetBackend(dummy);\n+    // we have all inputs cached now, so switch back to dummy (to protect\n+    // against bugs where we pull more inputs from disk that miss being added\n+    // to coins_to_uncache)\n+    m_view.SetBackend(m_dummy);\n \n-        // Only accept BIP68 sequence locked transactions that can be mined in the next\n-        // block; we don't want our mempool filled up with transactions that can't\n-        // be mined yet.\n-        // Must keep pool.cs for this unless we change CheckSequenceLocks to take a\n-        // CoinsViewCache instead of create its own\n-        if (!CheckSequenceLocks(pool, tx, STANDARD_LOCKTIME_VERIFY_FLAGS, &lp))\n-            return state.Invalid(ValidationInvalidReason::TX_PREMATURE_SPEND, false, REJECT_NONSTANDARD, \"non-BIP68-final\");\n+    // Only accept BIP68 sequence locked transactions that can be mined in the next\n+    // block; we don't want our mempool filled up with transactions that can't\n+    // be mined yet.\n+    // Must keep pool.cs for this unless we change CheckSequenceLocks to take a\n+    // CoinsViewCache instead of create its own\n+    if (!CheckSequenceLocks(m_pool, tx, STANDARD_LOCKTIME_VERIFY_FLAGS, &lp))\n+        return state.Invalid(ValidationInvalidReason::TX_PREMATURE_SPEND, false, REJECT_NONSTANDARD, \"non-BIP68-final\");\n \n-        CAmount nFees = 0;\n-        if (!Consensus::CheckTxInputs(tx, state, view, GetSpendHeight(view), nFees)) {\n-            return error(\"%s: Consensus::CheckTxInputs: %s, %s\", __func__, tx.GetHash().ToString(), FormatStateMessage(state));\n-        }\n+    CAmount nFees = 0;\n+    if (!Consensus::CheckTxInputs(tx, state, m_view, GetSpendHeight(m_view), nFees)) {\n+        return error(\"%s: Consensus::CheckTxInputs: %s, %s\", __func__, tx.GetHash().ToString(), FormatStateMessage(state));\n+    }\n \n-        // Check for non-standard pay-to-script-hash in inputs\n-        if (fRequireStandard && !AreInputsStandard(tx, view))\n-            return state.Invalid(ValidationInvalidReason::TX_NOT_STANDARD, false, REJECT_NONSTANDARD, \"bad-txns-nonstandard-inputs\");\n+    // Check for non-standard pay-to-script-hash in inputs\n+    if (fRequireStandard && !AreInputsStandard(tx, m_view))\n+        return state.Invalid(ValidationInvalidReason::TX_NOT_STANDARD, false, REJECT_NONSTANDARD, \"bad-txns-nonstandard-inputs\");\n \n-        // Check for non-standard witness in P2WSH\n-        if (tx.HasWitness() && fRequireStandard && !IsWitnessStandard(tx, view))\n-            return state.Invalid(ValidationInvalidReason::TX_WITNESS_MUTATED, false, REJECT_NONSTANDARD, \"bad-witness-nonstandard\");\n+    // Check for non-standard witness in P2WSH\n+    if (tx.HasWitness() && fRequireStandard && !IsWitnessStandard(tx, m_view))\n+        return state.Invalid(ValidationInvalidReason::TX_WITNESS_MUTATED, false, REJECT_NONSTANDARD, \"bad-witness-nonstandard\");\n \n-        int64_t nSigOpsCost = GetTransactionSigOpCost(tx, view, STANDARD_SCRIPT_VERIFY_FLAGS);\n+    int64_t nSigOpsCost = GetTransactionSigOpCost(tx, m_view, STANDARD_SCRIPT_VERIFY_FLAGS);\n \n-        // nModifiedFees includes any fee deltas from PrioritiseTransaction\n-        CAmount nModifiedFees = nFees;\n-        pool.ApplyDelta(hash, nModifiedFees);\n+    // nModifiedFees includes any fee deltas from PrioritiseTransaction\n+    nModifiedFees = nFees;\n+    m_pool.ApplyDelta(hash, nModifiedFees);\n \n-        // Keep track of transactions that spend a coinbase, which we re-scan\n-        // during reorgs to ensure COINBASE_MATURITY is still met.\n-        bool fSpendsCoinbase = false;\n-        for (const CTxIn &txin : tx.vin) {\n-            const Coin &coin = view.AccessCoin(txin.prevout);\n-            if (coin.IsCoinBase()) {\n-                fSpendsCoinbase = true;\n-                break;\n-            }\n+    // Keep track of transactions that spend a coinbase, which we re-scan\n+    // during reorgs to ensure COINBASE_MATURITY is still met.\n+    bool fSpendsCoinbase = false;\n+    for (const CTxIn &txin : tx.vin) {\n+        const Coin &coin = m_view.AccessCoin(txin.prevout);\n+        if (coin.IsCoinBase()) {\n+            fSpendsCoinbase = true;\n+            break;\n         }\n+    }\n \n-        CTxMemPoolEntry entry(ptx, nFees, nAcceptTime, ::ChainActive().Height(),\n-                              fSpendsCoinbase, nSigOpsCost, lp);\n-        unsigned int nSize = entry.GetTxSize();\n+    entry.reset(new CTxMemPoolEntry(ptx, nFees, nAcceptTime, ::ChainActive().Height(),\n+            fSpendsCoinbase, nSigOpsCost, lp));\n+    unsigned int nSize = entry->GetTxSize();\n \n-        if (nSigOpsCost > MAX_STANDARD_TX_SIGOPS_COST)\n-            return state.Invalid(ValidationInvalidReason::TX_NOT_STANDARD, false, REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\",\n+    if (nSigOpsCost > MAX_STANDARD_TX_SIGOPS_COST)\n+        return state.Invalid(ValidationInvalidReason::TX_NOT_STANDARD, false, REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\",\n                 strprintf(\"%d\", nSigOpsCost));\n \n-        CAmount mempoolRejectFee = pool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nSize);\n-        if (!bypass_limits && mempoolRejectFee > 0 && nModifiedFees < mempoolRejectFee) {\n-            return state.Invalid(ValidationInvalidReason::TX_MEMPOOL_POLICY, false, REJECT_INSUFFICIENTFEE, \"mempool min fee not met\", strprintf(\"%d < %d\", nModifiedFees, mempoolRejectFee));\n-        }\n+    // No transactions are allowed below minRelayTxFee except from disconnected\n+    // blocks\n+    if (!bypass_limits && !CheckFeeRate(nSize, nModifiedFees, state)) return false;\n \n-        // No transactions are allowed below minRelayTxFee except from disconnected blocks\n-        if (!bypass_limits && nModifiedFees < ::minRelayTxFee.GetFee(nSize)) {\n-            return state.Invalid(ValidationInvalidReason::TX_MEMPOOL_POLICY, false, REJECT_INSUFFICIENTFEE, \"min relay fee not met\", strprintf(\"%d < %d\", nModifiedFees, ::minRelayTxFee.GetFee(nSize)));\n-        }\n-\n-        if (nAbsurdFee && nFees > nAbsurdFee)\n-            return state.Invalid(ValidationInvalidReason::TX_NOT_STANDARD, false,\n+    if (nAbsurdFee && nFees > nAbsurdFee)\n+        return state.Invalid(ValidationInvalidReason::TX_NOT_STANDARD, false,\n                 REJECT_HIGHFEE, \"absurdly-high-fee\",\n                 strprintf(\"%d > %d\", nFees, nAbsurdFee));\n \n-        // Calculate in-mempool ancestors, up to a limit.\n-        CTxMemPool::setEntries setAncestors;\n-        size_t nLimitAncestors = gArgs.GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT);\n-        size_t nLimitAncestorSize = gArgs.GetArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT)*1000;\n-        size_t nLimitDescendants = gArgs.GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT);\n-        size_t nLimitDescendantSize = gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT)*1000;\n-        std::string errString;\n-        if (!pool.CalculateMemPoolAncestors(entry, setAncestors, nLimitAncestors, nLimitAncestorSize, nLimitDescendants, nLimitDescendantSize, errString)) {\n-            setAncestors.clear();\n-            // If CalculateMemPoolAncestors fails second time, we want the original error string.\n-            std::string dummy_err_string;\n-            // If the new transaction is relatively small (up to 40k weight)\n-            // and has at most one ancestor (ie ancestor limit of 2, including\n-            // the new transaction), allow it if its parent has exactly the\n-            // descendant limit descendants.\n-            //\n-            // This allows protocols which rely on distrusting counterparties\n-            // being able to broadcast descendants of an unconfirmed transaction\n-            // to be secure by simply only having two immediately-spendable\n-            // outputs - one for each counterparty. For more info on the uses for\n-            // this, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n-            if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n-                    !pool.CalculateMemPoolAncestors(entry, setAncestors, 2, nLimitAncestorSize, nLimitDescendants + 1, nLimitDescendantSize + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n-                return state.Invalid(ValidationInvalidReason::TX_MEMPOOL_POLICY, false, REJECT_NONSTANDARD, \"too-long-mempool-chain\", errString);\n-            }\n-        }\n-\n-        // A transaction that spends outputs that would be replaced by it is invalid. Now\n-        // that we have the set of all ancestors we can detect this\n-        // pathological case by making sure setConflicts and setAncestors don't\n-        // intersect.\n-        for (CTxMemPool::txiter ancestorIt : setAncestors)\n+    const CTxMemPool::setEntries setIterConflicting = m_pool.GetIterSet(setConflicts);\n+    // Calculate in-mempool ancestors, up to a limit.\n+    if (setConflicts.size() == 1) {\n+        // In general, when we receive an RBF transaction with mempool conflicts, we want to know whether we\n+        // would meet the chain limits after the conflicts have been removed. However, there isn't a practical\n+        // way to do this short of calculating the ancestor and descendant sets with an overlay cache of\n+        // changed mempool entries. Due to both implementation and runtime complexity concerns, this isn't\n+        // very realistic, thus we only ensure a limited set of transactions are RBF'able despite mempool\n+        // conflicts here. Importantly, we need to ensure that some transactions which were accepted using\n+        // the below carve-out are able to be RBF'ed, without impacting the security the carve-out provides\n+        // for off-chain contract systems (see link in the comment below).\n+        //\n+        // Specifically, the subset of RBF transactions which we allow despite chain limits are those which\n+        // conflict directly with exactly one other transaction (but may evict children of said transaction),\n+        // and which are not adding any new mempool dependencies. Note that the \"no new mempool dependencies\"\n+        // check is accomplished later, so we don't bother doing anything about it here, but if BIP 125 is\n+        // amended, we may need to move that check to here instead of removing it wholesale.\n+        //\n+        // Such transactions are clearly not merging any existing packages, so we are only concerned with\n+        // ensuring that (a) no package is growing past the package size (not count) limits and (b) we are\n+        // not allowing something to effectively use the (below) carve-out spot when it shouldn't be allowed\n+        // to.\n+        //\n+        // To check these we first check if we meet the RBF criteria, above, and increment the descendant\n+        // limits by the direct conflict and its descendants (as these are recalculated in\n+        // CalculateMempoolAncestors by assuming the new transaction being added is a new descendant, with no\n+        // removals, of each parent's existing dependant set). The ancestor count limits are unmodified (as\n+        // the ancestor limits should be the same for both our new transaction and any conflicts).\n+        // We don't bother incrementing m_limit_descendants by the full removal count as that limit never comes\n+        // into force here (as we're only adding a single transaction).\n+        assert(setIterConflicting.size() == 1);\n+        CTxMemPool::txiter conflict = *setIterConflicting.begin();\n+\n+        m_limit_descendants += 1;\n+        m_limit_descendant_size += conflict->GetSizeWithDescendants();\n+    }\n+\n+    std::string errString;\n+    if (!m_pool.CalculateMemPoolAncestors(*entry, setAncestors, m_limit_ancestors, m_limit_ancestor_size, m_limit_descendants, m_limit_descendant_size, errString)) {\n+        setAncestors.clear();\n+        // If CalculateMemPoolAncestors fails second time, we want the original error string.\n+        std::string dummy_err_string;\n+        // Contracting/payment channels CPFP carve-out:\n+        // If the new transaction is relatively small (up to 40k weight)\n+        // and has at most one ancestor (ie ancestor limit of 2, including\n+        // the new transaction), allow it if its parent has exactly the\n+        // descendant limit descendants.\n+        //\n+        // This allows protocols which rely on distrusting counterparties\n+        // being able to broadcast descendants of an unconfirmed transaction\n+        // to be secure by simply only having two immediately-spendable\n+        // outputs - one for each counterparty. For more info on the uses for\n+        // this, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n+        if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n+                !m_pool.CalculateMemPoolAncestors(*entry, setAncestors, 2, m_limit_ancestor_size, m_limit_descendants + 1, m_limit_descendant_size + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n+            return state.Invalid(ValidationInvalidReason::TX_MEMPOOL_POLICY, false, REJECT_NONSTANDARD, \"too-long-mempool-chain\", errString);\n+        }\n+    }\n+\n+    // A transaction that spends outputs that would be replaced by it is invalid. Now\n+    // that we have the set of all ancestors we can detect this\n+    // pathological case by making sure setConflicts and setAncestors don't\n+    // intersect.\n+    for (CTxMemPool::txiter ancestorIt : setAncestors)\n+    {\n+        const uint256 &hashAncestor = ancestorIt->GetTx().GetHash();\n+        if (setConflicts.count(hashAncestor))\n         {\n-            const uint256 &hashAncestor = ancestorIt->GetTx().GetHash();\n-            if (setConflicts.count(hashAncestor))\n-            {\n-                return state.Invalid(ValidationInvalidReason::CONSENSUS, false, REJECT_INVALID, \"bad-txns-spends-conflicting-tx\",\n-                                 strprintf(\"%s spends conflicting transaction %s\",\n-                                           hash.ToString(),\n-                                           hashAncestor.ToString()));\n-            }\n+            return state.Invalid(ValidationInvalidReason::CONSENSUS, false, REJECT_INVALID, \"bad-txns-spends-conflicting-tx\",\n+                    strprintf(\"%s spends conflicting transaction %s\",\n+                        hash.ToString(),\n+                        hashAncestor.ToString()));\n         }\n+    }\n \n-        // Check if it's economically rational to mine this transaction rather\n-        // than the ones it replaces.\n-        CAmount nConflictingFees = 0;\n-        size_t nConflictingSize = 0;\n-        uint64_t nConflictingCount = 0;\n-        CTxMemPool::setEntries allConflicting;\n-\n-        // If we don't hold the lock allConflicting might be incomplete; the\n-        // subsequent RemoveStaged() and addUnchecked() calls don't guarantee\n-        // mempool consistency for us.\n-        const bool fReplacementTransaction = setConflicts.size();\n-        if (fReplacementTransaction)\n-        {\n-            CFeeRate newFeeRate(nModifiedFees, nSize);\n-            std::set<uint256> setConflictsParents;\n-            const int maxDescendantsToVisit = 100;\n-            const CTxMemPool::setEntries setIterConflicting = pool.GetIterSet(setConflicts);\n-            for (const auto& mi : setIterConflicting) {\n-                // Don't allow the replacement to reduce the feerate of the\n-                // mempool.\n-                //\n-                // We usually don't want to accept replacements with lower\n-                // feerates than what they replaced as that would lower the\n-                // feerate of the next block. Requiring that the feerate always\n-                // be increased is also an easy-to-reason about way to prevent\n-                // DoS attacks via replacements.\n-                //\n-                // We only consider the feerates of transactions being directly\n-                // replaced, not their indirect descendants. While that does\n-                // mean high feerate children are ignored when deciding whether\n-                // or not to replace, we do require the replacement to pay more\n-                // overall fees too, mitigating most cases.\n-                CFeeRate oldFeeRate(mi->GetModifiedFee(), mi->GetTxSize());\n-                if (newFeeRate <= oldFeeRate)\n-                {\n-                    return state.Invalid(ValidationInvalidReason::TX_MEMPOOL_POLICY, false, REJECT_INSUFFICIENTFEE, \"insufficient fee\",\n-                            strprintf(\"rejecting replacement %s; new feerate %s <= old feerate %s\",\n-                                  hash.ToString(),\n-                                  newFeeRate.ToString(),\n-                                  oldFeeRate.ToString()));\n-                }\n-\n-                for (const CTxIn &txin : mi->GetTx().vin)\n-                {\n-                    setConflictsParents.insert(txin.prevout.hash);\n-                }\n+    // Check if it's economically rational to mine this transaction rather\n+    // than the ones it replaces.\n+    nConflictingFees = 0;\n+    nConflictingSize = 0;\n+    uint64_t nConflictingCount = 0;\n \n-                nConflictingCount += mi->GetCountWithDescendants();\n-            }\n-            // This potentially overestimates the number of actual descendants\n-            // but we just want to be conservative to avoid doing too much\n-            // work.\n-            if (nConflictingCount <= maxDescendantsToVisit) {\n-                // If not too many to replace, then calculate the set of\n-                // transactions that would have to be evicted\n-                for (CTxMemPool::txiter it : setIterConflicting) {\n-                    pool.CalculateDescendants(it, allConflicting);\n-                }\n-                for (CTxMemPool::txiter it : allConflicting) {\n-                    nConflictingFees += it->GetModifiedFee();\n-                    nConflictingSize += it->GetTxSize();\n-                }\n-            } else {\n-                return state.Invalid(ValidationInvalidReason::TX_MEMPOOL_POLICY, false, REJECT_NONSTANDARD, \"too many potential replacements\",\n-                        strprintf(\"rejecting replacement %s; too many potential replacements (%d > %d)\\n\",\n+    // If we don't hold the lock allConflicting might be incomplete; the\n+    // subsequent RemoveStaged() and addUnchecked() calls don't guarantee\n+    // mempool consistency for us.\n+    fReplacementTransaction = setConflicts.size();\n+    if (fReplacementTransaction)\n+    {\n+        CFeeRate newFeeRate(nModifiedFees, nSize);\n+        std::set<uint256> setConflictsParents;\n+        const int maxDescendantsToVisit = 100;\n+        for (const auto& mi : setIterConflicting) {\n+            // Don't allow the replacement to reduce the feerate of the\n+            // mempool.\n+            //\n+            // We usually don't want to accept replacements with lower\n+            // feerates than what they replaced as that would lower the\n+            // feerate of the next block. Requiring that the feerate always\n+            // be increased is also an easy-to-reason about way to prevent\n+            // DoS attacks via replacements.\n+            //\n+            // We only consider the feerates of transactions being directly\n+            // replaced, not their indirect descendants. While that does\n+            // mean high feerate children are ignored when deciding whether\n+            // or not to replace, we do require the replacement to pay more\n+            // overall fees too, mitigating most cases.\n+            CFeeRate oldFeeRate(mi->GetModifiedFee(), mi->GetTxSize());\n+            if (newFeeRate <= oldFeeRate)\n+            {\n+                return state.Invalid(ValidationInvalidReason::TX_MEMPOOL_POLICY, false, REJECT_INSUFFICIENTFEE, \"insufficient fee\",\n+                        strprintf(\"rejecting replacement %s; new feerate %s <= old feerate %s\",\n                             hash.ToString(),\n-                            nConflictingCount,\n-                            maxDescendantsToVisit));\n+                            newFeeRate.ToString(),\n+                            oldFeeRate.ToString()));\n             }\n \n-            for (unsigned int j = 0; j < tx.vin.size(); j++)\n+            for (const CTxIn &txin : mi->GetTx().vin)\n             {\n-                // We don't want to accept replacements that require low\n-                // feerate junk to be mined first. Ideally we'd keep track of\n-                // the ancestor feerates and make the decision based on that,\n-                // but for now requiring all new inputs to be confirmed works.\n-                if (!setConflictsParents.count(tx.vin[j].prevout.hash))\n-                {\n-                    // Rather than check the UTXO set - potentially expensive -\n-                    // it's cheaper to just check if the new input refers to a\n-                    // tx that's in the mempool.\n-                    if (pool.exists(tx.vin[j].prevout.hash)) {\n-                        return state.Invalid(ValidationInvalidReason::TX_MEMPOOL_POLICY, false, REJECT_NONSTANDARD, \"replacement-adds-unconfirmed\",\n-                                         strprintf(\"replacement %s adds unconfirmed input, idx %d\",\n-                                                  hash.ToString(), j));\n-                    }\n-                }\n+                setConflictsParents.insert(txin.prevout.hash);\n             }\n \n-            // The replacement must pay greater fees than the transactions it\n-            // replaces - if we did the bandwidth used by those conflicting\n-            // transactions would not be paid for.\n-            if (nModifiedFees < nConflictingFees)\n-            {\n-                return state.Invalid(ValidationInvalidReason::TX_MEMPOOL_POLICY, false, REJECT_INSUFFICIENTFEE, \"insufficient fee\",\n-                                 strprintf(\"rejecting replacement %s, less fees than conflicting txs; %s < %s\",\n-                                          hash.ToString(), FormatMoney(nModifiedFees), FormatMoney(nConflictingFees)));\n+            nConflictingCount += mi->GetCountWithDescendants();\n+        }\n+        // This potentially overestimates the number of actual descendants\n+        // but we just want to be conservative to avoid doing too much\n+        // work.\n+        if (nConflictingCount <= maxDescendantsToVisit) {\n+            // If not too many to replace, then calculate the set of\n+            // transactions that would have to be evicted\n+            for (CTxMemPool::txiter it : setIterConflicting) {\n+                m_pool.CalculateDescendants(it, allConflicting);\n             }\n-\n-            // Finally in addition to paying more fees than the conflicts the\n-            // new transaction must pay for its own bandwidth.\n-            CAmount nDeltaFees = nModifiedFees - nConflictingFees;\n-            if (nDeltaFees < ::incrementalRelayFee.GetFee(nSize))\n-            {\n-                return state.Invalid(ValidationInvalidReason::TX_MEMPOOL_POLICY, false, REJECT_INSUFFICIENTFEE, \"insufficient fee\",\n-                        strprintf(\"rejecting replacement %s, not enough additional fees to relay; %s < %s\",\n-                              hash.ToString(),\n-                              FormatMoney(nDeltaFees),\n-                              FormatMoney(::incrementalRelayFee.GetFee(nSize))));\n+            for (CTxMemPool::txiter it : allConflicting) {\n+                nConflictingFees += it->GetModifiedFee();\n+                nConflictingSize += it->GetTxSize();\n             }\n+        } else {\n+            return state.Invalid(ValidationInvalidReason::TX_MEMPOOL_POLICY, false, REJECT_NONSTANDARD, \"too many potential replacements\",\n+                    strprintf(\"rejecting replacement %s; too many potential replacements (%d > %d)\\n\",\n+                        hash.ToString(),\n+                        nConflictingCount,\n+                        maxDescendantsToVisit));\n         }\n \n-        constexpr unsigned int scriptVerifyFlags = STANDARD_SCRIPT_VERIFY_FLAGS;\n-\n-        // Check against previous transactions\n-        // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n-        PrecomputedTransactionData txdata(tx);\n-        if (!CheckInputs(tx, state, view, true, scriptVerifyFlags, true, false, txdata)) {\n-            // SCRIPT_VERIFY_CLEANSTACK requires SCRIPT_VERIFY_WITNESS, so we\n-            // need to turn both off, and compare against just turning off CLEANSTACK\n-            // to see if the failure is specifically due to witness validation.\n-            CValidationState stateDummy; // Want reported failures to be from first CheckInputs\n-            if (!tx.HasWitness() && CheckInputs(tx, stateDummy, view, true, scriptVerifyFlags & ~(SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_CLEANSTACK), true, false, txdata) &&\n-                !CheckInputs(tx, stateDummy, view, true, scriptVerifyFlags & ~SCRIPT_VERIFY_CLEANSTACK, true, false, txdata)) {\n-                // Only the witness is missing, so the transaction itself may be fine.\n-                state.Invalid(ValidationInvalidReason::TX_WITNESS_MUTATED, false,\n-                        state.GetRejectCode(), state.GetRejectReason(), state.GetDebugMessage());\n+        for (unsigned int j = 0; j < tx.vin.size(); j++)\n+        {\n+            // We don't want to accept replacements that require low\n+            // feerate junk to be mined first. Ideally we'd keep track of\n+            // the ancestor feerates and make the decision based on that,\n+            // but for now requiring all new inputs to be confirmed works.\n+            //\n+            // Note that if you relax this to make RBF a little more useful,\n+            // this may break the CalculateMempoolAncestors RBF relaxation,\n+            // above. See the comment above the first CalculateMempoolAncestors\n+            // call for more info.\n+            if (!setConflictsParents.count(tx.vin[j].prevout.hash))\n+            {\n+                // Rather than check the UTXO set - potentially expensive -\n+                // it's cheaper to just check if the new input refers to a\n+                // tx that's in the mempool.\n+                if (m_pool.exists(tx.vin[j].prevout.hash)) {\n+                    return state.Invalid(ValidationInvalidReason::TX_MEMPOOL_POLICY, false, REJECT_NONSTANDARD, \"replacement-adds-unconfirmed\",\n+                            strprintf(\"replacement %s adds unconfirmed input, idx %d\",\n+                                hash.ToString(), j));\n+                }\n             }\n-            assert(IsTransactionReason(state.GetReason()));\n-            return false; // state filled in by CheckInputs\n-        }\n-\n-        // Check again against the current block tip's script verification\n-        // flags to cache our script execution flags. This is, of course,\n-        // useless if the next block has different script flags from the\n-        // previous one, but because the cache tracks script flags for us it\n-        // will auto-invalidate and we'll just have a few blocks of extra\n-        // misses on soft-fork activation.\n-        //\n-        // This is also useful in case of bugs in the standard flags that cause\n-        // transactions to pass as valid when they're actually invalid. For\n-        // instance the STRICTENC flag was incorrectly allowing certain\n-        // CHECKSIG NOT scripts to pass, even though they were invalid.\n-        //\n-        // There is a similar check in CreateNewBlock() to prevent creating\n-        // invalid blocks (using TestBlockValidity), however allowing such\n-        // transactions into the mempool can be exploited as a DoS attack.\n-        unsigned int currentBlockScriptVerifyFlags = GetBlockScriptFlags(::ChainActive().Tip(), chainparams.GetConsensus());\n-        if (!CheckInputsFromMempoolAndCache(tx, state, view, pool, currentBlockScriptVerifyFlags, true, txdata)) {\n-            return error(\"%s: BUG! PLEASE REPORT THIS! CheckInputs failed against latest-block but not STANDARD flags %s, %s\",\n-                    __func__, hash.ToString(), FormatStateMessage(state));\n         }\n \n-        if (test_accept) {\n-            // Tx was accepted, but not added\n-            return true;\n+        // The replacement must pay greater fees than the transactions it\n+        // replaces - if we did the bandwidth used by those conflicting\n+        // transactions would not be paid for.\n+        if (nModifiedFees < nConflictingFees)\n+        {\n+            return state.Invalid(ValidationInvalidReason::TX_MEMPOOL_POLICY, false, REJECT_INSUFFICIENTFEE, \"insufficient fee\",\n+                    strprintf(\"rejecting replacement %s, less fees than conflicting txs; %s < %s\",\n+                        hash.ToString(), FormatMoney(nModifiedFees), FormatMoney(nConflictingFees)));\n         }\n \n-        // Remove conflicting transactions from the mempool\n-        for (CTxMemPool::txiter it : allConflicting)\n+        // Finally in addition to paying more fees than the conflicts the\n+        // new transaction must pay for its own bandwidth.\n+        CAmount nDeltaFees = nModifiedFees - nConflictingFees;\n+        if (nDeltaFees < ::incrementalRelayFee.GetFee(nSize))\n         {\n-            LogPrint(BCLog::MEMPOOL, \"replacing tx %s with %s for %s BTC additional fees, %d delta bytes\\n\",\n-                    it->GetTx().GetHash().ToString(),\n-                    hash.ToString(),\n-                    FormatMoney(nModifiedFees - nConflictingFees),\n-                    (int)nSize - (int)nConflictingSize);\n-            if (plTxnReplaced)\n-                plTxnReplaced->push_back(it->GetSharedTx());\n+            return state.Invalid(ValidationInvalidReason::TX_MEMPOOL_POLICY, false, REJECT_INSUFFICIENTFEE, \"insufficient fee\",\n+                    strprintf(\"rejecting replacement %s, not enough additional fees to relay; %s < %s\",\n+                        hash.ToString(),\n+                        FormatMoney(nDeltaFees),\n+                        FormatMoney(::incrementalRelayFee.GetFee(nSize))));\n         }\n-        pool.RemoveStaged(allConflicting, false, MemPoolRemovalReason::REPLACED);\n+    }\n+    return true;\n+}\n+\n+bool MemPoolAccept::PolicyScriptChecks(ATMPArgs& args, Workspace& ws, PrecomputedTransactionData& txdata)\n+{\n+    const CTransaction& tx = *ws.m_ptx;\n \n-        // This transaction should only count for fee estimation if:\n-        // - it isn't a BIP 125 replacement transaction (may not be widely supported)\n-        // - it's not being re-added during a reorg which bypasses typical mempool fee limits\n-        // - the node is not behind\n-        // - the transaction is not dependent on any other transactions in the mempool\n-        bool validForFeeEstimation = !fReplacementTransaction && !bypass_limits && IsCurrentForFeeEstimation() && pool.HasNoInputsOf(tx);\n+    CValidationState &state = args.m_state;\n \n-        // Store transaction in memory\n-        pool.addUnchecked(entry, setAncestors, validForFeeEstimation);\n+    constexpr unsigned int scriptVerifyFlags = STANDARD_SCRIPT_VERIFY_FLAGS;\n \n-        // trim mempool and check if tx was trimmed\n-        if (!bypass_limits) {\n-            LimitMempoolSize(pool, gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60);\n-            if (!pool.exists(hash))\n-                return state.Invalid(ValidationInvalidReason::TX_MEMPOOL_POLICY, false, REJECT_INSUFFICIENTFEE, \"mempool full\");\n+    // Check against previous transactions\n+    // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n+    if (!CheckInputs(tx, state, m_view, scriptVerifyFlags, true, false, txdata)) {\n+        // SCRIPT_VERIFY_CLEANSTACK requires SCRIPT_VERIFY_WITNESS, so we\n+        // need to turn both off, and compare against just turning off CLEANSTACK\n+        // to see if the failure is specifically due to witness validation.\n+        CValidationState stateDummy; // Want reported failures to be from first CheckInputs\n+        if (!tx.HasWitness() && CheckInputs(tx, stateDummy, m_view, scriptVerifyFlags & ~(SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_CLEANSTACK), true, false, txdata) &&\n+                !CheckInputs(tx, stateDummy, m_view, scriptVerifyFlags & ~SCRIPT_VERIFY_CLEANSTACK, true, false, txdata)) {\n+            // Only the witness is missing, so the transaction itself may be fine.\n+            state.Invalid(ValidationInvalidReason::TX_WITNESS_MUTATED, false,\n+                    state.GetRejectCode(), state.GetRejectReason(), state.GetDebugMessage());\n         }\n+        assert(IsTransactionReason(state.GetReason()));\n+        return false; // state filled in by CheckInputs\n+    }\n+\n+    return true;\n+}\n+\n+bool MemPoolAccept::ConsensusScriptChecks(ATMPArgs& args, Workspace& ws, PrecomputedTransactionData& txdata)\n+{\n+    const CTransaction& tx = *ws.m_ptx;\n+    const uint256& hash = ws.m_hash;\n+\n+    CValidationState &state = args.m_state;\n+    const CChainParams& chainparams = args.m_chainparams;\n+\n+    // Check again against the current block tip's script verification\n+    // flags to cache our script execution flags. This is, of course,\n+    // useless if the next block has different script flags from the\n+    // previous one, but because the cache tracks script flags for us it\n+    // will auto-invalidate and we'll just have a few blocks of extra\n+    // misses on soft-fork activation.\n+    //\n+    // This is also useful in case of bugs in the standard flags that cause\n+    // transactions to pass as valid when they're actually invalid. For\n+    // instance the STRICTENC flag was incorrectly allowing certain\n+    // CHECKSIG NOT scripts to pass, even though they were invalid.\n+    //\n+    // There is a similar check in CreateNewBlock() to prevent creating\n+    // invalid blocks (using TestBlockValidity), however allowing such\n+    // transactions into the mempool can be exploited as a DoS attack.\n+    unsigned int currentBlockScriptVerifyFlags = GetBlockScriptFlags(::ChainActive().Tip(), chainparams.GetConsensus());\n+    if (!CheckInputsFromMempoolAndCache(tx, state, m_view, m_pool, currentBlockScriptVerifyFlags, true, txdata)) {\n+        return error(\"%s: BUG! PLEASE REPORT THIS! CheckInputs failed against latest-block but not STANDARD flags %s, %s\",\n+                __func__, hash.ToString(), FormatStateMessage(state));\n     }\n \n+    return true;\n+}\n+\n+bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n+{\n+    const CTransaction& tx = *ws.m_ptx;\n+    const uint256& hash = ws.m_hash;\n+    CValidationState &state = args.m_state;\n+    const bool bypass_limits = args.m_bypass_limits;\n+\n+    CTxMemPool::setEntries& allConflicting = ws.m_all_conflicting;\n+    CTxMemPool::setEntries& setAncestors = ws.m_ancestors;\n+    const CAmount& nModifiedFees = ws.m_modified_fees;\n+    const CAmount& nConflictingFees = ws.m_conflicting_fees;\n+    const size_t& nConflictingSize = ws.m_conflicting_size;\n+    const bool fReplacementTransaction = ws.m_replacement_transaction;\n+    std::unique_ptr<CTxMemPoolEntry>& entry = ws.m_entry;\n+\n+    // Remove conflicting transactions from the mempool\n+    for (CTxMemPool::txiter it : allConflicting)\n+    {\n+        LogPrint(BCLog::MEMPOOL, \"replacing tx %s with %s for %s BTC additional fees, %d delta bytes\\n\",\n+                it->GetTx().GetHash().ToString(),\n+                hash.ToString(),\n+                FormatMoney(nModifiedFees - nConflictingFees),\n+                (int)entry->GetTxSize() - (int)nConflictingSize);\n+        if (args.m_replaced_transactions)\n+            args.m_replaced_transactions->push_back(it->GetSharedTx());\n+    }\n+    m_pool.RemoveStaged(allConflicting, false, MemPoolRemovalReason::REPLACED);\n+\n+    // This transaction should only count for fee estimation if:\n+    // - it isn't a BIP 125 replacement transaction (may not be widely supported)\n+    // - it's not being re-added during a reorg which bypasses typical mempool fee limits\n+    // - the node is not behind\n+    // - the transaction is not dependent on any other transactions in the mempool\n+    bool validForFeeEstimation = !fReplacementTransaction && !bypass_limits && IsCurrentForFeeEstimation() && m_pool.HasNoInputsOf(tx);\n+\n+    // Store transaction in memory\n+    m_pool.addUnchecked(*entry, setAncestors, validForFeeEstimation);\n+\n+    // trim mempool and check if tx was trimmed\n+    if (!bypass_limits) {\n+        LimitMempoolSize(m_pool, gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60);\n+        if (!m_pool.exists(hash))\n+            return state.Invalid(ValidationInvalidReason::TX_MEMPOOL_POLICY, false, REJECT_INSUFFICIENTFEE, \"mempool full\");\n+    }\n+    return true;\n+}\n+\n+bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n+\n+    Workspace workspace(ptx);\n+\n+    if (!PreChecks(args, workspace)) return false;\n+\n+    // Only compute the precomputed transaction data if we need to verify\n+    // scripts (ie, other policy checks pass). We perform the inexpensive\n+    // checks first and avoid hashing and signature verification unless those\n+    // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n+    PrecomputedTransactionData txdata(*ptx);\n+\n+    if (!PolicyScriptChecks(args, workspace, txdata)) return false;\n+\n+    if (!ConsensusScriptChecks(args, workspace, txdata)) return false;\n+\n+    // Tx was accepted, but not added\n+    if (args.m_test_accept) return true;\n+\n+    if (!Finalize(args, workspace)) return false;\n+\n     GetMainSignals().TransactionAddedToMempool(ptx);\n \n     return true;\n }\n \n+} // anon namespace\n+\n /** (try to) add transaction to memory pool with a specified acceptance time **/\n static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx,\n                         bool* pfMissingInputs, int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n                         bool bypass_limits, const CAmount nAbsurdFee, bool test_accept) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     std::vector<COutPoint> coins_to_uncache;\n-    bool res = AcceptToMemoryPoolWorker(chainparams, pool, state, tx, pfMissingInputs, nAcceptTime, plTxnReplaced, bypass_limits, nAbsurdFee, coins_to_uncache, test_accept);\n+    MemPoolAccept::ATMPArgs args { chainparams, state, pfMissingInputs, nAcceptTime, plTxnReplaced, bypass_limits, nAbsurdFee, coins_to_uncache, test_accept };\n+    bool res = MemPoolAccept(pool).AcceptSingleTransaction(tx, args);\n     if (!res) {\n         // Remove coins that were not present in the coins cache before calling ATMPW;\n         // this is to prevent memory DoS in case we receive a large number of\n@@ -1298,90 +1496,79 @@ void InitScriptExecutionCache() {\n  *\n  * Non-static (and re-declared) in src/test/txvalidationcache_tests.cpp\n  */\n-bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheSigStore, bool cacheFullScriptStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, unsigned int flags, bool cacheSigStore, bool cacheFullScriptStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n-    if (!tx.IsCoinBase())\n-    {\n-        if (pvChecks)\n-            pvChecks->reserve(tx.vin.size());\n-\n-        // The first loop above does all the inexpensive checks.\n-        // Only if ALL inputs pass do we perform expensive ECDSA signature checks.\n-        // Helps prevent CPU exhaustion attacks.\n-\n-        // Skip script verification when connecting blocks under the\n-        // assumevalid block. Assuming the assumevalid block is valid this\n-        // is safe because block merkle hashes are still computed and checked,\n-        // Of course, if an assumed valid block is invalid due to false scriptSigs\n-        // this optimization would allow an invalid chain to be accepted.\n-        if (fScriptChecks) {\n-            // First check if script executions have been cached with the same\n-            // flags. Note that this assumes that the inputs provided are\n-            // correct (ie that the transaction hash which is in tx's prevouts\n-            // properly commits to the scriptPubKey in the inputs view of that\n-            // transaction).\n-            uint256 hashCacheEntry;\n-            // We only use the first 19 bytes of nonce to avoid a second SHA\n-            // round - giving us 19 + 32 + 4 = 55 bytes (+ 8 + 1 = 64)\n-            static_assert(55 - sizeof(flags) - 32 >= 128/8, \"Want at least 128 bits of nonce for script execution cache\");\n-            CSHA256().Write(scriptExecutionCacheNonce.begin(), 55 - sizeof(flags) - 32).Write(tx.GetWitnessHash().begin(), 32).Write((unsigned char*)&flags, sizeof(flags)).Finalize(hashCacheEntry.begin());\n-            AssertLockHeld(cs_main); //TODO: Remove this requirement by making CuckooCache not require external locks\n-            if (scriptExecutionCache.contains(hashCacheEntry, !cacheFullScriptStore)) {\n-                return true;\n-            }\n-\n-            for (unsigned int i = 0; i < tx.vin.size(); i++) {\n-                const COutPoint &prevout = tx.vin[i].prevout;\n-                const Coin& coin = inputs.AccessCoin(prevout);\n-                assert(!coin.IsSpent());\n-\n-                // We very carefully only pass in things to CScriptCheck which\n-                // are clearly committed to by tx' witness hash. This provides\n-                // a sanity check that our caching is not introducing consensus\n-                // failures through additional data in, eg, the coins being\n-                // spent being checked as a part of CScriptCheck.\n-\n-                // Verify signature\n-                CScriptCheck check(coin.out, tx, i, flags, cacheSigStore, &txdata);\n-                if (pvChecks) {\n-                    pvChecks->push_back(CScriptCheck());\n-                    check.swap(pvChecks->back());\n-                } else if (!check()) {\n-                    if (flags & STANDARD_NOT_MANDATORY_VERIFY_FLAGS) {\n-                        // Check whether the failure was caused by a\n-                        // non-mandatory script verification check, such as\n-                        // non-standard DER encodings or non-null dummy\n-                        // arguments; if so, ensure we return NOT_STANDARD\n-                        // instead of CONSENSUS to avoid downstream users\n-                        // splitting the network between upgraded and\n-                        // non-upgraded nodes by banning CONSENSUS-failing\n-                        // data providers.\n-                        CScriptCheck check2(coin.out, tx, i,\n-                                flags & ~STANDARD_NOT_MANDATORY_VERIFY_FLAGS, cacheSigStore, &txdata);\n-                        if (check2())\n-                            return state.Invalid(ValidationInvalidReason::TX_NOT_STANDARD, false, REJECT_NONSTANDARD, strprintf(\"non-mandatory-script-verify-flag (%s)\", ScriptErrorString(check.GetScriptError())));\n-                    }\n-                    // MANDATORY flag failures correspond to\n-                    // ValidationInvalidReason::CONSENSUS. Because CONSENSUS\n-                    // failures are the most serious case of validation\n-                    // failures, we may need to consider using\n-                    // RECENT_CONSENSUS_CHANGE for any script failure that\n-                    // could be due to non-upgraded nodes which we may want to\n-                    // support, to avoid splitting the network (but this\n-                    // depends on the details of how net_processing handles\n-                    // such errors).\n-                    return state.Invalid(ValidationInvalidReason::CONSENSUS, false, REJECT_INVALID, strprintf(\"mandatory-script-verify-flag-failed (%s)\", ScriptErrorString(check.GetScriptError())));\n-                }\n-            }\n+    if (tx.IsCoinBase()) return true;\n+\n+    if (pvChecks) {\n+        pvChecks->reserve(tx.vin.size());\n+    }\n+\n+    // First check if script executions have been cached with the same\n+    // flags. Note that this assumes that the inputs provided are\n+    // correct (ie that the transaction hash which is in tx's prevouts\n+    // properly commits to the scriptPubKey in the inputs view of that\n+    // transaction).\n+    uint256 hashCacheEntry;\n+    // We only use the first 19 bytes of nonce to avoid a second SHA\n+    // round - giving us 19 + 32 + 4 = 55 bytes (+ 8 + 1 = 64)\n+    static_assert(55 - sizeof(flags) - 32 >= 128/8, \"Want at least 128 bits of nonce for script execution cache\");\n+    CSHA256().Write(scriptExecutionCacheNonce.begin(), 55 - sizeof(flags) - 32).Write(tx.GetWitnessHash().begin(), 32).Write((unsigned char*)&flags, sizeof(flags)).Finalize(hashCacheEntry.begin());\n+    AssertLockHeld(cs_main); //TODO: Remove this requirement by making CuckooCache not require external locks\n+    if (scriptExecutionCache.contains(hashCacheEntry, !cacheFullScriptStore)) {\n+        return true;\n+    }\n \n-            if (cacheFullScriptStore && !pvChecks) {\n-                // We executed all of the provided scripts, and were told to\n-                // cache the result. Do so now.\n-                scriptExecutionCache.insert(hashCacheEntry);\n+    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+        const COutPoint &prevout = tx.vin[i].prevout;\n+        const Coin& coin = inputs.AccessCoin(prevout);\n+        assert(!coin.IsSpent());\n+\n+        // We very carefully only pass in things to CScriptCheck which\n+        // are clearly committed to by tx' witness hash. This provides\n+        // a sanity check that our caching is not introducing consensus\n+        // failures through additional data in, eg, the coins being\n+        // spent being checked as a part of CScriptCheck.\n+\n+        // Verify signature\n+        CScriptCheck check(coin.out, tx, i, flags, cacheSigStore, &txdata);\n+        if (pvChecks) {\n+            pvChecks->push_back(CScriptCheck());\n+            check.swap(pvChecks->back());\n+        } else if (!check()) {\n+            if (flags & STANDARD_NOT_MANDATORY_VERIFY_FLAGS) {\n+                // Check whether the failure was caused by a\n+                // non-mandatory script verification check, such as\n+                // non-standard DER encodings or non-null dummy\n+                // arguments; if so, ensure we return NOT_STANDARD\n+                // instead of CONSENSUS to avoid downstream users\n+                // splitting the network between upgraded and\n+                // non-upgraded nodes by banning CONSENSUS-failing\n+                // data providers.\n+                CScriptCheck check2(coin.out, tx, i,\n+                        flags & ~STANDARD_NOT_MANDATORY_VERIFY_FLAGS, cacheSigStore, &txdata);\n+                if (check2())\n+                    return state.Invalid(ValidationInvalidReason::TX_NOT_STANDARD, false, REJECT_NONSTANDARD, strprintf(\"non-mandatory-script-verify-flag (%s)\", ScriptErrorString(check.GetScriptError())));\n             }\n+            // MANDATORY flag failures correspond to\n+            // ValidationInvalidReason::CONSENSUS. Because CONSENSUS\n+            // failures are the most serious case of validation\n+            // failures, we may need to consider using\n+            // RECENT_CONSENSUS_CHANGE for any script failure that\n+            // could be due to non-upgraded nodes which we may want to\n+            // support, to avoid splitting the network (but this\n+            // depends on the details of how net_processing handles\n+            // such errors).\n+            return state.Invalid(ValidationInvalidReason::CONSENSUS, false, REJECT_INVALID, strprintf(\"mandatory-script-verify-flag-failed (%s)\", ScriptErrorString(check.GetScriptError())));\n         }\n     }\n \n+    if (cacheFullScriptStore && !pvChecks) {\n+        // We executed all of the provided scripts, and were told to\n+        // cache the result. Do so now.\n+        scriptExecutionCache.insert(hashCacheEntry);\n+    }\n+\n     return true;\n }\n \n@@ -1769,6 +1956,11 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n                 pindexBestHeader->GetAncestor(pindex->nHeight) == pindex &&\n                 pindexBestHeader->nChainWork >= nMinimumChainWork) {\n                 // This block is a member of the assumed verified chain and an ancestor of the best header.\n+                // Script verification is skipped when connecting blocks under the\n+                // assumevalid block. Assuming the assumevalid block is valid this\n+                // is safe because block merkle hashes are still computed and checked,\n+                // Of course, if an assumed valid block is invalid due to false scriptSigs\n+                // this optimization would allow an invalid chain to be accepted.\n                 // The equivalent time check discourages hash power from extorting the network via DOS attack\n                 //  into accepting an invalid block through telling users they must manually set assumevalid.\n                 //  Requiring a software change or burying the invalid block, regardless of the setting, makes\n@@ -1790,7 +1982,7 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n     // If such overwrites are allowed, coinbases and transactions depending upon those\n     // can be duplicated to remove the ability to spend the first instance -- even after\n     // being sent to another address.\n-    // See BIP30 and http://r6.ca/blog/20120206T005236Z.html for more information.\n+    // See BIP30, CVE-2012-1909, and http://r6.ca/blog/20120206T005236Z.html for more information.\n     // This logic is not necessary for memory pool transactions, as AcceptToMemoryPool\n     // already refuses previously-known transaction ids entirely.\n     // This rule was originally applied to all blocks with a timestamp after March 15, 2012, 0:00 UTC.\n@@ -1952,7 +2144,7 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n         {\n             std::vector<CScriptCheck> vChecks;\n             bool fCacheResults = fJustCheck; /* Don't cache results if we're actually connecting blocks (still consult the cache, though) */\n-            if (!CheckInputs(tx, state, view, fScriptChecks, flags, fCacheResults, fCacheResults, txdata[i], nScriptCheckThreads ? &vChecks : nullptr)) {\n+            if (fScriptChecks && !CheckInputs(tx, state, view, flags, fCacheResults, fCacheResults, txdata[i], nScriptCheckThreads ? &vChecks : nullptr)) {\n                 if (state.GetReason() == ValidationInvalidReason::TX_NOT_STANDARD) {\n                     // CheckInputs may return NOT_STANDARD for extra flags we passed,\n                     // but we can't return that, as it's not defined for a block, so\n@@ -2202,14 +2394,12 @@ void static UpdateTip(const CBlockIndex* pindexNew, const CChainParams& chainPar\n         if (nUpgraded > 0)\n             AppendWarning(warningMessages, strprintf(_(\"%d of last 100 blocks have unexpected version\").translated, nUpgraded));\n     }\n-    LogPrintf(\"%s: new best=%s height=%d version=0x%08x log2_work=%.8g tx=%lu date='%s' progress=%f cache=%.1fMiB(%utxo)\", __func__, /* Continued */\n+    LogPrintf(\"%s: new best=%s height=%d version=0x%08x log2_work=%.8g tx=%lu date='%s' progress=%f cache=%.1fMiB(%utxo)%s\\n\", __func__,\n       pindexNew->GetBlockHash().ToString(), pindexNew->nHeight, pindexNew->nVersion,\n       log(pindexNew->nChainWork.getdouble())/log(2.0), (unsigned long)pindexNew->nChainTx,\n       FormatISO8601DateTime(pindexNew->GetBlockTime()),\n-      GuessVerificationProgress(chainParams.TxData(), pindexNew), ::ChainstateActive().CoinsTip().DynamicMemoryUsage() * (1.0 / (1<<20)), ::ChainstateActive().CoinsTip().GetCacheSize());\n-    if (!warningMessages.empty())\n-        LogPrintf(\" warning='%s'\", warningMessages); /* Continued */\n-    LogPrintf(\"\\n\");\n+      GuessVerificationProgress(chainParams.TxData(), pindexNew), ::ChainstateActive().CoinsTip().DynamicMemoryUsage() * (1.0 / (1<<20)), ::ChainstateActive().CoinsTip().GetCacheSize(),\n+      !warningMessages.empty() ? strprintf(\" warning='%s'\", warningMessages) : \"\");\n \n }\n \n@@ -2472,6 +2662,8 @@ void CChainState::PruneBlockIndexCandidates() {\n /**\n  * Try to make some progress towards making pindexMostWork the active block.\n  * pblock is either nullptr or a pointer to a CBlock corresponding to pindexMostWork.\n+ *\n+ * @returns true unless a system error occurred\n  */\n bool CChainState::ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace)\n {\n@@ -2561,7 +2753,7 @@ bool CChainState::ActivateBestChainStep(CValidationState& state, const CChainPar\n     return true;\n }\n \n-static void NotifyHeaderTip() LOCKS_EXCLUDED(cs_main) {\n+static bool NotifyHeaderTip() LOCKS_EXCLUDED(cs_main) {\n     bool fNotify = false;\n     bool fInitialBlockDownload = false;\n     static CBlockIndex* pindexHeaderOld = nullptr;\n@@ -2580,6 +2772,7 @@ static void NotifyHeaderTip() LOCKS_EXCLUDED(cs_main) {\n     if (fNotify) {\n         uiInterface.NotifyHeaderTip(fInitialBlockDownload, pindexHeader);\n     }\n+    return fNotify;\n }\n \n static void LimitValidationInterfaceQueue() LOCKS_EXCLUDED(cs_main) {\n@@ -2590,15 +2783,6 @@ static void LimitValidationInterfaceQueue() LOCKS_EXCLUDED(cs_main) {\n     }\n }\n \n-/**\n- * Make the best chain active, in multiple steps. The result is either failure\n- * or an activated best chain. pblock is either nullptr or a pointer to a block\n- * that is already loaded (to avoid loading it again from disk).\n- *\n- * ActivateBestChain is split into steps (see ActivateBestChainStep) so that\n- * we avoid holding cs_main for an extended period of time; the length of this\n- * call may be quite long during reindexing or a substantial reorg.\n- */\n bool CChainState::ActivateBestChain(CValidationState &state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock) {\n     // Note that while we're often called here from ProcessNewBlock, this is\n     // far from a guarantee. Things in the P2P/RPC will often end up calling\n@@ -2646,8 +2830,10 @@ bool CChainState::ActivateBestChain(CValidationState &state, const CChainParams&\n \n                 bool fInvalidFound = false;\n                 std::shared_ptr<const CBlock> nullBlockPtr;\n-                if (!ActivateBestChainStep(state, chainparams, pindexMostWork, pblock && pblock->GetHash() == pindexMostWork->GetBlockHash() ? pblock : nullBlockPtr, fInvalidFound, connectTrace))\n+                if (!ActivateBestChainStep(state, chainparams, pindexMostWork, pblock && pblock->GetHash() == pindexMostWork->GetBlockHash() ? pblock : nullBlockPtr, fInvalidFound, connectTrace)) {\n+                    // A system error occurred\n                     return false;\n+                }\n                 blocks_connected = true;\n \n                 if (fInvalidFound) {\n@@ -3068,6 +3254,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n             return state.Invalid(ValidationInvalidReason::CONSENSUS, false, REJECT_INVALID, \"bad-cb-multiple\", \"more than one coinbase\");\n \n     // Check transactions\n+    // Must check for duplicate inputs (see CVE-2018-17144)\n     for (const auto& tx : block.vtx)\n         if (!CheckTransaction(*tx, state, true))\n             return state.Invalid(state.GetReason(), false, state.GetRejectCode(), state.GetRejectReason(),\n@@ -3400,7 +3587,11 @@ bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, CValidatio\n             }\n         }\n     }\n-    NotifyHeaderTip();\n+    if (NotifyHeaderTip()) {\n+        if (::ChainstateActive().IsInitialBlockDownload() && ppindex && *ppindex) {\n+            LogPrintf(\"Synchronizing blockheaders, height: %d (~%.2f%%)\\n\", (*ppindex)->nHeight, 100.0/((*ppindex)->nHeight+(GetAdjustedTime() - (*ppindex)->GetBlockTime()) / Params().GetConsensus().nPowTargetSpacing) * (*ppindex)->nHeight);\n+        }\n+    }\n     return true;\n }\n "
      },
      {
        "sha": "06252b6bc8ccb2275af0964882b19a4071bf310c",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 17,
        "deletions": 2,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -211,7 +211,7 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  * @param[in]   pblock  The block we want to process.\n  * @param[in]   fForceProcessing Process this block even if unrequested; used for non-network block sources and whitelisted peers.\n  * @param[out]  fNewBlock A boolean which is set to indicate if the block was first received via this call\n- * @return True if state.IsValid()\n+ * @returns     If the block was processed, independently of block validity\n  */\n bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool* fNewBlock) LOCKS_EXCLUDED(cs_main);\n \n@@ -653,6 +653,8 @@ class CChainState {\n      *\n      * If FlushStateMode::NONE is used, then FlushStateToDisk(...) won't do anything\n      * besides checking if we need to prune.\n+     *\n+     * @returns true unless a system error occurred\n      */\n     bool FlushStateToDisk(\n         const CChainParams& chainparams,\n@@ -667,7 +669,20 @@ class CChainState {\n     //! if we pruned.\n     void PruneAndFlush();\n \n-    bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock) LOCKS_EXCLUDED(cs_main);\n+    /**\n+     * Make the best chain active, in multiple steps. The result is either failure\n+     * or an activated best chain. pblock is either nullptr or a pointer to a block\n+     * that is already loaded (to avoid loading it again from disk).\n+     *\n+     * ActivateBestChain is split into steps (see ActivateBestChainStep) so that\n+     * we avoid holding cs_main for an extended period of time; the length of this\n+     * call may be quite long during reindexing or a substantial reorg.\n+     *\n+     * @returns true unless a system error occurred\n+     */\n+    bool ActivateBestChain(CValidationState& state,\n+        const CChainParams& chainparams,\n+        std::shared_ptr<const CBlock> pblock) LOCKS_EXCLUDED(cs_main);\n \n     bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const FlatFilePos* dbp, bool* fNewBlock) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n "
      },
      {
        "sha": "5a62e2930359a02dbf4b39d9680016e6090547c7",
        "filename": "src/wallet/load.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/wallet/load.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/wallet/load.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/load.h?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -17,7 +17,7 @@ class Chain;\n \n //! Responsible for reading and validating the -wallet arguments and verifying the wallet database.\n //! This function will perform salvage on the wallet if requested, as long as only one wallet is\n-//! being loaded (WalletParameterInteraction forbids -salvagewallet, -zapwallettxes or -upgradewallet with multiwallet).\n+//! being loaded (WalletInit::ParameterInteraction() forbids -salvagewallet, -zapwallettxes or -upgradewallet with multiwallet).\n bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wallet_files);\n \n //! Load wallet databases."
      },
      {
        "sha": "f52e4318c8e101214d3c53e317bad310bcdd36ab",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -384,8 +384,7 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Something wrong with merkleblock\");\n     }\n \n-    wtx.nIndex = txnIndex;\n-    wtx.hashBlock = merkleBlock.header.GetHash();\n+    wtx.SetConf(CWalletTx::Status::CONFIRMED, merkleBlock.header.GetHash(), txnIndex);\n \n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);"
      },
      {
        "sha": "216205ed613095e3f1800b6b741caeba249075cb",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 6,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -134,10 +134,10 @@ static void WalletTxToJSON(interfaces::Chain& chain, interfaces::Chain::Lock& lo\n         entry.pushKV(\"generated\", true);\n     if (confirms > 0)\n     {\n-        entry.pushKV(\"blockhash\", wtx.hashBlock.GetHex());\n-        entry.pushKV(\"blockindex\", wtx.nIndex);\n+        entry.pushKV(\"blockhash\", wtx.m_confirm.hashBlock.GetHex());\n+        entry.pushKV(\"blockindex\", wtx.m_confirm.nIndex);\n         int64_t block_time;\n-        bool found_block = chain.findBlock(wtx.hashBlock, nullptr /* block */, &block_time);\n+        bool found_block = chain.findBlock(wtx.m_confirm.hashBlock, nullptr /* block */, &block_time);\n         assert(found_block);\n         entry.pushKV(\"blocktime\", block_time);\n     } else {\n@@ -1648,7 +1648,10 @@ static UniValue gettransaction(const JSONRPCRequest& request)\n                 \"\\nGet detailed information about in-wallet transaction <txid>\\n\",\n                 {\n                     {\"txid\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The transaction id\"},\n-                    {\"include_watchonly\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Whether to include watch-only addresses in balance calculation and details[]\"},\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\",\n+                            \"Whether to include watch-only addresses in balance calculation and details[]\"},\n+                    {\"verbose\", RPCArg::Type::BOOL, /* default */ \"false\",\n+                            \"Whether to include a `decoded` field containing the decoded transaction (equivalent to RPC decoderawtransaction)\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n@@ -1684,11 +1687,14 @@ static UniValue gettransaction(const JSONRPCRequest& request)\n             \"    ,...\\n\"\n             \"  ],\\n\"\n             \"  \\\"hex\\\" : \\\"data\\\"         (string) Raw data for transaction\\n\"\n+            \"  \\\"decoded\\\" : transaction         (json object) Optional, the decoded transaction (only present when `verbose` is passed), equivalent to the\\n\"\n+            \"                                                RPC decoderawtransaction method, or the RPC getrawtransaction method when `verbose` is passed.\\n\"\n             \"}\\n\"\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"gettransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n             + HelpExampleCli(\"gettransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\" true\")\n+            + HelpExampleCli(\"gettransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\" false true\")\n             + HelpExampleRpc(\"gettransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n                 },\n             }.Check(request);\n@@ -1708,6 +1714,8 @@ static UniValue gettransaction(const JSONRPCRequest& request)\n         filter |= ISMINE_WATCH_ONLY;\n     }\n \n+    bool verbose = request.params[2].isNull() ? false : request.params[2].get_bool();\n+\n     UniValue entry(UniValue::VOBJ);\n     auto it = pwallet->mapWallet.find(hash);\n     if (it == pwallet->mapWallet.end()) {\n@@ -1733,6 +1741,12 @@ static UniValue gettransaction(const JSONRPCRequest& request)\n     std::string strHex = EncodeHexTx(*wtx.tx, pwallet->chain().rpcSerializationFlags());\n     entry.pushKV(\"hex\", strHex);\n \n+    if (verbose) {\n+        UniValue decoded(UniValue::VOBJ);\n+        TxToUniv(*wtx.tx, uint256(), decoded, false);\n+        entry.pushKV(\"decoded\", decoded);\n+    }\n+\n     return entry;\n }\n \n@@ -3269,7 +3283,10 @@ UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n     }\n     pwallet->chain().findCoins(coins);\n \n-    return SignTransaction(mtx, request.params[1], pwallet, coins, false, request.params[2]);\n+    // Parse the prevtxs array\n+    ParsePrevouts(request.params[1], nullptr, coins);\n+\n+    return SignTransaction(mtx, pwallet, coins, request.params[2]);\n }\n \n static UniValue bumpfee(const JSONRPCRequest& request)\n@@ -4175,7 +4192,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"getrawchangeaddress\",              &getrawchangeaddress,           {\"address_type\"} },\n     { \"wallet\",             \"getreceivedbyaddress\",             &getreceivedbyaddress,          {\"address\",\"minconf\"} },\n     { \"wallet\",             \"getreceivedbylabel\",               &getreceivedbylabel,            {\"label\",\"minconf\"} },\n-    { \"wallet\",             \"gettransaction\",                   &gettransaction,                {\"txid\",\"include_watchonly\"} },\n+    { \"wallet\",             \"gettransaction\",                   &gettransaction,                {\"txid\",\"include_watchonly\",\"verbose\"} },\n     { \"wallet\",             \"getunconfirmedbalance\",            &getunconfirmedbalance,         {} },\n     { \"wallet\",             \"getbalances\",                      &getbalances,                   {} },\n     { \"wallet\",             \"getwalletinfo\",                    &getwalletinfo,                 {} },"
      },
      {
        "sha": "fc3be2b6abfb25f0b9abd4501b9a24c0c475a46b",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 9,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -249,8 +249,7 @@ BOOST_FIXTURE_TEST_CASE(coin_mark_dirty_immature_credit, TestChain100Setup)\n     LockAssertion lock(::cs_main);\n     LOCK(wallet.cs_wallet);\n \n-    wtx.hashBlock = ::ChainActive().Tip()->GetBlockHash();\n-    wtx.nIndex = 0;\n+    wtx.SetConf(CWalletTx::Status::CONFIRMED, ::ChainActive().Tip()->GetBlockHash(), 0);\n \n     // Call GetImmatureCredit() once before adding the key to the wallet to\n     // cache the current immature credit amount, which is 0.\n@@ -281,14 +280,19 @@ static int64_t AddTx(CWallet& wallet, uint32_t lockTime, int64_t mockTime, int64\n     }\n \n     CWalletTx wtx(&wallet, MakeTransactionRef(tx));\n-    if (block) {\n-        wtx.SetMerkleBranch(block->GetBlockHash(), 0);\n-    }\n-    {\n-        LOCK(cs_main);\n+    LOCK(cs_main);\n+    LOCK(wallet.cs_wallet);\n+    // If transaction is already in map, to avoid inconsistencies, unconfirmation\n+    // is needed before confirm again with different block.\n+    std::map<uint256, CWalletTx>::iterator it = wallet.mapWallet.find(wtx.GetHash());\n+    if (it != wallet.mapWallet.end()) {\n+        wtx.setUnconfirmed();\n         wallet.AddToWallet(wtx);\n     }\n-    LOCK(wallet.cs_wallet);\n+    if (block) {\n+        wtx.SetConf(CWalletTx::Status::CONFIRMED, block->GetBlockHash(), 0);\n+    }\n+    wallet.AddToWallet(wtx);\n     return wallet.mapWallet.at(wtx.GetHash()).nTimeSmart;\n }\n \n@@ -382,7 +386,7 @@ class ListCoinsTestingSetup : public TestChain100Setup\n         LOCK(wallet->cs_wallet);\n         auto it = wallet->mapWallet.find(tx->GetHash());\n         BOOST_CHECK(it != wallet->mapWallet.end());\n-        it->second.SetMerkleBranch(::ChainActive().Tip()->GetBlockHash(), 1);\n+        it->second.SetConf(CWalletTx::Status::CONFIRMED, ::ChainActive().Tip()->GetBlockHash(), 1);\n         return it->second;\n     }\n "
      },
      {
        "sha": "7cf09d554bbd25801cdef30107061a8cfce089bd",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 88,
        "deletions": 82,
        "changes": 170,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -93,13 +93,14 @@ std::shared_ptr<CWallet> GetWallet(const std::string& name)\n \n static Mutex g_wallet_release_mutex;\n static std::condition_variable g_wallet_release_cv;\n-static std::set<CWallet*> g_unloading_wallet_set;\n+static std::set<std::string> g_unloading_wallet_set;\n \n // Custom deleter for shared_ptr<CWallet>.\n static void ReleaseWallet(CWallet* wallet)\n {\n     // Unregister and delete the wallet right after BlockUntilSyncedToCurrentChain\n     // so that it's in sync with the current chainstate.\n+    const std::string name = wallet->GetName();\n     wallet->WalletLogPrintf(\"Releasing wallet\\n\");\n     wallet->BlockUntilSyncedToCurrentChain();\n     wallet->Flush();\n@@ -108,7 +109,7 @@ static void ReleaseWallet(CWallet* wallet)\n     // Wallet is now released, notify UnloadWallet, if any.\n     {\n         LOCK(g_wallet_release_mutex);\n-        if (g_unloading_wallet_set.erase(wallet) == 0) {\n+        if (g_unloading_wallet_set.erase(name) == 0) {\n             // UnloadWallet was not called for this wallet, all done.\n             return;\n         }\n@@ -119,21 +120,21 @@ static void ReleaseWallet(CWallet* wallet)\n void UnloadWallet(std::shared_ptr<CWallet>&& wallet)\n {\n     // Mark wallet for unloading.\n-    CWallet* pwallet = wallet.get();\n+    const std::string name = wallet->GetName();\n     {\n         LOCK(g_wallet_release_mutex);\n-        auto it = g_unloading_wallet_set.insert(pwallet);\n+        auto it = g_unloading_wallet_set.insert(name);\n         assert(it.second);\n     }\n     // The wallet can be in use so it's not possible to explicitly unload here.\n     // Notify the unload intent so that all remaining shared pointers are\n     // released.\n-    pwallet->NotifyUnload();\n+    wallet->NotifyUnload();\n     // Time to ditch our shared_ptr and wait for ReleaseWallet call.\n     wallet.reset();\n     {\n         WAIT_LOCK(g_wallet_release_mutex, lock);\n-        while (g_unloading_wallet_set.count(pwallet) == 1) {\n+        while (g_unloading_wallet_set.count(name) == 1) {\n             g_wallet_release_cv.wait(lock);\n         }\n     }\n@@ -523,18 +524,9 @@ bool CWallet::LoadCScript(const CScript& redeemScript)\n \n static bool ExtractPubKey(const CScript &dest, CPubKey& pubKeyOut)\n {\n-    //TODO: Use Solver to extract this?\n-    CScript::const_iterator pc = dest.begin();\n-    opcodetype opcode;\n-    std::vector<unsigned char> vch;\n-    if (!dest.GetOp(pc, opcode, vch) || !CPubKey::ValidSize(vch))\n-        return false;\n-    pubKeyOut = CPubKey(vch);\n-    if (!pubKeyOut.IsFullyValid())\n-        return false;\n-    if (!dest.GetOp(pc, opcode, vch) || opcode != OP_CHECKSIG || dest.GetOp(pc, opcode, vch))\n-        return false;\n-    return true;\n+    std::vector<std::vector<unsigned char>> solutions;\n+    return Solver(dest, solutions) == TX_PUBKEY &&\n+        (pubKeyOut = CPubKey(solutions[0])).IsFullyValid();\n }\n \n bool CWallet::AddWatchOnlyInMem(const CScript &dest)\n@@ -1118,22 +1110,14 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n     bool fUpdated = false;\n     if (!fInsertedNew)\n     {\n-        // Merge\n-        if (!wtxIn.hashUnset() && wtxIn.hashBlock != wtx.hashBlock)\n-        {\n-            wtx.hashBlock = wtxIn.hashBlock;\n-            fUpdated = true;\n-        }\n-        // If no longer abandoned, update\n-        if (wtxIn.hashBlock.IsNull() && wtx.isAbandoned())\n-        {\n-            wtx.hashBlock = wtxIn.hashBlock;\n-            fUpdated = true;\n-        }\n-        if (wtxIn.nIndex != -1 && (wtxIn.nIndex != wtx.nIndex))\n-        {\n-            wtx.nIndex = wtxIn.nIndex;\n+        if (wtxIn.m_confirm.status != wtx.m_confirm.status) {\n+            wtx.m_confirm.status = wtxIn.m_confirm.status;\n+            wtx.m_confirm.nIndex = wtxIn.m_confirm.nIndex;\n+            wtx.m_confirm.hashBlock = wtxIn.m_confirm.hashBlock;\n             fUpdated = true;\n+        } else {\n+            assert(wtx.m_confirm.nIndex == wtxIn.m_confirm.nIndex);\n+            assert(wtx.m_confirm.hashBlock == wtxIn.m_confirm.hashBlock);\n         }\n         if (wtxIn.fFromMe && wtxIn.fFromMe != wtx.fFromMe)\n         {\n@@ -1180,8 +1164,19 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n     return true;\n }\n \n-void CWallet::LoadToWallet(const CWalletTx& wtxIn)\n+void CWallet::LoadToWallet(CWalletTx& wtxIn)\n {\n+    // If wallet doesn't have a chain (e.g wallet-tool), lock can't be taken.\n+    auto locked_chain = LockChain();\n+    // If tx hasn't been reorged out of chain while wallet being shutdown\n+    // change tx status to UNCONFIRMED and reset hashBlock/nIndex.\n+    if (!wtxIn.m_confirm.hashBlock.IsNull()) {\n+        if (locked_chain && !locked_chain->getBlockHeight(wtxIn.m_confirm.hashBlock)) {\n+            wtxIn.setUnconfirmed();\n+            wtxIn.m_confirm.hashBlock = uint256();\n+            wtxIn.m_confirm.nIndex = 0;\n+        }\n+    }\n     uint256 hash = wtxIn.GetHash();\n     const auto& ins = mapWallet.emplace(hash, wtxIn);\n     CWalletTx& wtx = ins.first->second;\n@@ -1194,14 +1189,14 @@ void CWallet::LoadToWallet(const CWalletTx& wtxIn)\n         auto it = mapWallet.find(txin.prevout.hash);\n         if (it != mapWallet.end()) {\n             CWalletTx& prevtx = it->second;\n-            if (prevtx.nIndex == -1 && !prevtx.hashUnset()) {\n-                MarkConflicted(prevtx.hashBlock, wtx.GetHash());\n+            if (prevtx.isConflicted()) {\n+                MarkConflicted(prevtx.m_confirm.hashBlock, wtx.GetHash());\n             }\n         }\n     }\n }\n \n-bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const uint256& block_hash, int posInBlock, bool fUpdate)\n+bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, CWalletTx::Status status, const uint256& block_hash, int posInBlock, bool fUpdate)\n {\n     const CTransaction& tx = *ptx;\n     {\n@@ -1248,9 +1243,9 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const uint256\n \n             CWalletTx wtx(this, ptx);\n \n-            // Get merkle branch if transaction was found in a block\n-            if (!block_hash.IsNull())\n-                wtx.SetMerkleBranch(block_hash, posInBlock);\n+            // Block disconnection override an abandoned tx as unconfirmed\n+            // which means user may have to call abandontransaction again\n+            wtx.SetConf(status, block_hash, posInBlock);\n \n             return AddToWallet(wtx, false);\n         }\n@@ -1310,7 +1305,7 @@ bool CWallet::AbandonTransaction(interfaces::Chain::Lock& locked_chain, const ui\n         if (currentconfirm == 0 && !wtx.isAbandoned()) {\n             // If the orig tx was not in block/mempool, none of its spends can be in mempool\n             assert(!wtx.InMempool());\n-            wtx.nIndex = -1;\n+            wtx.m_confirm.nIndex = 0;\n             wtx.setAbandoned();\n             wtx.MarkDirty();\n             batch.WriteTx(wtx);\n@@ -1364,8 +1359,9 @@ void CWallet::MarkConflicted(const uint256& hashBlock, const uint256& hashTx)\n         if (conflictconfirms < currentconfirm) {\n             // Block is 'more conflicted' than current confirm; update.\n             // Mark transaction as conflicted with this block.\n-            wtx.nIndex = -1;\n-            wtx.hashBlock = hashBlock;\n+            wtx.m_confirm.nIndex = 0;\n+            wtx.m_confirm.hashBlock = hashBlock;\n+            wtx.setConflicted();\n             wtx.MarkDirty();\n             batch.WriteTx(wtx);\n             // Iterate over all its outputs, and mark transactions in the wallet that spend them conflicted too\n@@ -1383,8 +1379,9 @@ void CWallet::MarkConflicted(const uint256& hashBlock, const uint256& hashTx)\n     }\n }\n \n-void CWallet::SyncTransaction(const CTransactionRef& ptx, const uint256& block_hash, int posInBlock, bool update_tx) {\n-    if (!AddToWalletIfInvolvingMe(ptx, block_hash, posInBlock, update_tx))\n+void CWallet::SyncTransaction(const CTransactionRef& ptx, CWalletTx::Status status, const uint256& block_hash, int posInBlock, bool update_tx)\n+{\n+    if (!AddToWalletIfInvolvingMe(ptx, status, block_hash, posInBlock, update_tx))\n         return; // Not one of ours\n \n     // If a transaction changes 'conflicted' state, that changes the balance\n@@ -1396,7 +1393,7 @@ void CWallet::SyncTransaction(const CTransactionRef& ptx, const uint256& block_h\n void CWallet::TransactionAddedToMempool(const CTransactionRef& ptx) {\n     auto locked_chain = chain().lock();\n     LOCK(cs_wallet);\n-    SyncTransaction(ptx, {} /* block hash */, 0 /* position in block */);\n+    SyncTransaction(ptx, CWalletTx::Status::UNCONFIRMED, {} /* block hash */, 0 /* position in block */);\n \n     auto it = mapWallet.find(ptx->GetHash());\n     if (it != mapWallet.end()) {\n@@ -1416,22 +1413,14 @@ void CWallet::BlockConnected(const CBlock& block, const std::vector<CTransaction\n     const uint256& block_hash = block.GetHash();\n     auto locked_chain = chain().lock();\n     LOCK(cs_wallet);\n-    // TODO: Temporarily ensure that mempool removals are notified before\n-    // connected transactions.  This shouldn't matter, but the abandoned\n-    // state of transactions in our wallet is currently cleared when we\n-    // receive another notification and there is a race condition where\n-    // notification of a connected conflict might cause an outside process\n-    // to abandon a transaction and then have it inadvertently cleared by\n-    // the notification that the conflicted transaction was evicted.\n \n-    for (const CTransactionRef& ptx : vtxConflicted) {\n-        SyncTransaction(ptx, {} /* block hash */, 0 /* position in block */);\n-        TransactionRemovedFromMempool(ptx);\n-    }\n     for (size_t i = 0; i < block.vtx.size(); i++) {\n-        SyncTransaction(block.vtx[i], block_hash, i);\n+        SyncTransaction(block.vtx[i], CWalletTx::Status::CONFIRMED, block_hash, i);\n         TransactionRemovedFromMempool(block.vtx[i]);\n     }\n+    for (const CTransactionRef& ptx : vtxConflicted) {\n+        TransactionRemovedFromMempool(ptx);\n+    }\n \n     m_last_block_processed = block_hash;\n }\n@@ -1440,8 +1429,12 @@ void CWallet::BlockDisconnected(const CBlock& block) {\n     auto locked_chain = chain().lock();\n     LOCK(cs_wallet);\n \n+    // At block disconnection, this will change an abandoned transaction to\n+    // be unconfirmed, whether or not the transaction is added back to the mempool.\n+    // User may have to call abandontransaction again. It may be addressed in the\n+    // future with a stickier abandoned state or even removing abandontransaction call.\n     for (const CTransactionRef& ptx : block.vtx) {\n-        SyncTransaction(ptx, {} /* block hash */, 0 /* position in block */);\n+        SyncTransaction(ptx, CWalletTx::Status::UNCONFIRMED, {} /* block hash */, 0 /* position in block */);\n     }\n }\n \n@@ -2078,7 +2071,7 @@ CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_bloc\n                 break;\n             }\n             for (size_t posInBlock = 0; posInBlock < block.vtx.size(); ++posInBlock) {\n-                SyncTransaction(block.vtx[posInBlock], block_hash, posInBlock, fUpdate);\n+                SyncTransaction(block.vtx[posInBlock], CWalletTx::Status::CONFIRMED, block_hash, posInBlock, fUpdate);\n             }\n             // scan succeeded, record block as most recent successfully scanned\n             result.last_scanned_block = block_hash;\n@@ -3340,6 +3333,11 @@ bool CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::ve\n \n DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n {\n+    // Even if we don't use this lock in this function, we want to preserve\n+    // lock order in LoadToWallet if query of chain state is needed to know\n+    // tx status. If lock can't be taken (e.g wallet-tool), tx confirmation\n+    // status may be not reliable.\n+    auto locked_chain = LockChain();\n     LOCK(cs_wallet);\n \n     fFirstRunRet = false;\n@@ -4050,7 +4048,7 @@ void CWallet::GetKeyBirthTimes(interfaces::Chain::Lock& locked_chain, std::map<C\n     for (const auto& entry : mapWallet) {\n         // iterate over all wallet transactions...\n         const CWalletTx &wtx = entry.second;\n-        if (Optional<int> height = locked_chain.getBlockHeight(wtx.hashBlock)) {\n+        if (Optional<int> height = locked_chain.getBlockHeight(wtx.m_confirm.hashBlock)) {\n             // ... which are already in a block\n             for (const CTxOut &txout : wtx.tx->vout) {\n                 // iterate over all their outputs\n@@ -4093,9 +4091,9 @@ void CWallet::GetKeyBirthTimes(interfaces::Chain::Lock& locked_chain, std::map<C\n unsigned int CWallet::ComputeTimeSmart(const CWalletTx& wtx) const\n {\n     unsigned int nTimeSmart = wtx.nTimeReceived;\n-    if (!wtx.hashUnset()) {\n+    if (!wtx.isUnconfirmed() && !wtx.isAbandoned()) {\n         int64_t blocktime;\n-        if (chain().findBlock(wtx.hashBlock, nullptr /* block */, &blocktime)) {\n+        if (chain().findBlock(wtx.m_confirm.hashBlock, nullptr /* block */, &blocktime)) {\n             int64_t latestNow = wtx.nTimeReceived;\n             int64_t latestEntry = 0;\n \n@@ -4123,7 +4121,7 @@ unsigned int CWallet::ComputeTimeSmart(const CWalletTx& wtx) const\n \n             nTimeSmart = std::max(latestEntry, std::min(blocktime, latestNow));\n         } else {\n-            WalletLogPrintf(\"%s: found %s in block %s not in index\\n\", __func__, wtx.GetHash().ToString(), wtx.hashBlock.ToString());\n+            WalletLogPrintf(\"%s: found %s in block %s not in index\\n\", __func__, wtx.GetHash().ToString(), wtx.m_confirm.hashBlock.ToString());\n         }\n     }\n     return nTimeSmart;\n@@ -4241,6 +4239,11 @@ bool CWallet::Verify(interfaces::Chain& chain, const WalletLocation& location, b\n         // Recover readable keypairs:\n         CWallet dummyWallet(&chain, WalletLocation(), WalletDatabase::CreateDummy());\n         std::string backup_filename;\n+        // Even if we don't use this lock in this function, we want to preserve\n+        // lock order in LoadToWallet if query of chain state is needed to know\n+        // tx status. If lock can't be taken, tx confirmation status may be not\n+        // reliable.\n+        auto locked_chain = dummyWallet.LockChain();\n         if (!WalletBatch::Recover(wallet_path, (void *)&dummyWallet, WalletBatch::RecoverKeysOnlyFilter, backup_filename)) {\n             return false;\n         }\n@@ -4251,7 +4254,7 @@ bool CWallet::Verify(interfaces::Chain& chain, const WalletLocation& location, b\n \n std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain, const WalletLocation& location, uint64_t wallet_creation_flags)\n {\n-    const std::string& walletFile = WalletDataFilePath(location.GetPath()).string();\n+    const std::string walletFile = WalletDataFilePath(location.GetPath()).string();\n \n     // needed to restore wallet transaction meta data after -zapwallettxes\n     std::vector<CWalletTx> vWtx;\n@@ -4395,23 +4398,23 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     }\n \n     if (!gArgs.GetArg(\"-addresstype\", \"\").empty() && !ParseOutputType(gArgs.GetArg(\"-addresstype\", \"\"), walletInstance->m_default_address_type)) {\n-        chain.initError(strprintf(\"Unknown address type '%s'\", gArgs.GetArg(\"-addresstype\", \"\")));\n+        chain.initError(strprintf(_(\"Unknown address type '%s'\").translated, gArgs.GetArg(\"-addresstype\", \"\")));\n         return nullptr;\n     }\n \n     if (!gArgs.GetArg(\"-changetype\", \"\").empty() && !ParseOutputType(gArgs.GetArg(\"-changetype\", \"\"), walletInstance->m_default_change_type)) {\n-        chain.initError(strprintf(\"Unknown change type '%s'\", gArgs.GetArg(\"-changetype\", \"\")));\n+        chain.initError(strprintf(_(\"Unknown change type '%s'\").translated, gArgs.GetArg(\"-changetype\", \"\")));\n         return nullptr;\n     }\n \n     if (gArgs.IsArgSet(\"-mintxfee\")) {\n         CAmount n = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-mintxfee\", \"\"), n) || 0 == n) {\n-            chain.initError(AmountErrMsg(\"mintxfee\", gArgs.GetArg(\"-mintxfee\", \"\")));\n+            chain.initError(AmountErrMsg(\"mintxfee\", gArgs.GetArg(\"-mintxfee\", \"\")).translated);\n             return nullptr;\n         }\n         if (n > HIGH_TX_FEE_PER_KB) {\n-            chain.initWarning(AmountHighWarn(\"-mintxfee\") + \" \" +\n+            chain.initWarning(AmountHighWarn(\"-mintxfee\").translated + \" \" +\n                               _(\"This is the minimum transaction fee you pay on every transaction.\").translated);\n         }\n         walletInstance->m_min_fee = CFeeRate(n);\n@@ -4425,7 +4428,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n             return nullptr;\n         }\n         if (nFeePerK > HIGH_TX_FEE_PER_KB) {\n-            chain.initWarning(AmountHighWarn(\"-fallbackfee\") + \" \" +\n+            chain.initWarning(AmountHighWarn(\"-fallbackfee\").translated + \" \" +\n                               _(\"This is the transaction fee you may pay when fee estimates are not available.\").translated);\n         }\n         walletInstance->m_fallback_fee = CFeeRate(nFeePerK);\n@@ -4438,19 +4441,19 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n             return nullptr;\n         }\n         if (nFeePerK > HIGH_TX_FEE_PER_KB) {\n-            chain.initWarning(AmountHighWarn(\"-discardfee\") + \" \" +\n+            chain.initWarning(AmountHighWarn(\"-discardfee\").translated + \" \" +\n                               _(\"This is the transaction fee you may discard if change is smaller than dust at this level\").translated);\n         }\n         walletInstance->m_discard_rate = CFeeRate(nFeePerK);\n     }\n     if (gArgs.IsArgSet(\"-paytxfee\")) {\n         CAmount nFeePerK = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-paytxfee\", \"\"), nFeePerK)) {\n-            chain.initError(AmountErrMsg(\"paytxfee\", gArgs.GetArg(\"-paytxfee\", \"\")));\n+            chain.initError(AmountErrMsg(\"paytxfee\", gArgs.GetArg(\"-paytxfee\", \"\")).translated);\n             return nullptr;\n         }\n         if (nFeePerK > HIGH_TX_FEE_PER_KB) {\n-            chain.initWarning(AmountHighWarn(\"-paytxfee\") + \" \" +\n+            chain.initWarning(AmountHighWarn(\"-paytxfee\").translated + \" \" +\n                               _(\"This is the transaction fee you will pay if you send a transaction.\").translated);\n         }\n         walletInstance->m_pay_tx_fee = CFeeRate(nFeePerK, 1000);\n@@ -4465,7 +4468,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     {\n         CAmount nMaxFee = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-maxtxfee\", \"\"), nMaxFee)) {\n-            chain.initError(AmountErrMsg(\"maxtxfee\", gArgs.GetArg(\"-maxtxfee\", \"\")));\n+            chain.initError(AmountErrMsg(\"maxtxfee\", gArgs.GetArg(\"-maxtxfee\", \"\")).translated);\n             return nullptr;\n         }\n         if (nMaxFee > HIGH_MAX_TX_FEE) {\n@@ -4479,9 +4482,10 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         walletInstance->m_default_max_tx_fee = nMaxFee;\n     }\n \n-    if (chain.relayMinFee().GetFeePerK() > HIGH_TX_FEE_PER_KB)\n-        chain.initWarning(AmountHighWarn(\"-minrelaytxfee\") + \" \" +\n+    if (chain.relayMinFee().GetFeePerK() > HIGH_TX_FEE_PER_KB) {\n+        chain.initWarning(AmountHighWarn(\"-minrelaytxfee\").translated + \" \" +\n                     _(\"The wallet will avoid paying less than the minimum relay fee.\").translated);\n+    }\n \n     walletInstance->m_confirm_target = gArgs.GetArg(\"-txconfirmtarget\", DEFAULT_TX_CONFIRM_TARGET);\n     walletInstance->m_spend_zero_conf_change = gArgs.GetBoolArg(\"-spendzeroconfchange\", DEFAULT_SPEND_ZEROCONF_CHANGE);\n@@ -4634,21 +4638,23 @@ CKeyPool::CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn)\n     m_pre_split = false;\n }\n \n-void CWalletTx::SetMerkleBranch(const uint256& block_hash, int posInBlock)\n+void CWalletTx::SetConf(Status status, const uint256& block_hash, int posInBlock)\n {\n+    // Update tx status\n+    m_confirm.status = status;\n+\n     // Update the tx's hashBlock\n-    hashBlock = block_hash;\n+    m_confirm.hashBlock = block_hash;\n \n     // set the position of the transaction in the block\n-    nIndex = posInBlock;\n+    m_confirm.nIndex = posInBlock;\n }\n \n int CWalletTx::GetDepthInMainChain(interfaces::Chain::Lock& locked_chain) const\n {\n-    if (hashUnset())\n-        return 0;\n+    if (isUnconfirmed() || isAbandoned()) return 0;\n \n-    return locked_chain.getBlockDepth(hashBlock) * (nIndex == -1 ? -1 : 1);\n+    return locked_chain.getBlockDepth(m_confirm.hashBlock) * (isConflicted() ? -1 : 1);\n }\n \n int CWalletTx::GetBlocksToMaturity(interfaces::Chain::Lock& locked_chain) const"
      },
      {
        "sha": "3428e8e001102ea2817ed81950b54d385a7d979a",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 72,
        "deletions": 20,
        "changes": 92,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -396,7 +396,9 @@ class CWalletTx\n private:\n     const CWallet* pwallet;\n \n-  /** Constant used in hashBlock to indicate tx has been abandoned */\n+    /** Constant used in hashBlock to indicate tx has been abandoned, only used at\n+     * serialization/deserialization to avoid ambiguity with conflicted.\n+     */\n     static const uint256 ABANDON_HASH;\n \n public:\n@@ -457,9 +459,7 @@ class CWalletTx\n     mutable CAmount nChangeCached;\n \n     CWalletTx(const CWallet* pwalletIn, CTransactionRef arg)\n-        : tx(std::move(arg)),\n-          hashBlock(uint256()),\n-          nIndex(-1)\n+        : tx(std::move(arg))\n     {\n         Init(pwalletIn);\n     }\n@@ -477,16 +477,37 @@ class CWalletTx\n         fInMempool = false;\n         nChangeCached = 0;\n         nOrderPos = -1;\n+        m_confirm = Confirmation{};\n     }\n \n     CTransactionRef tx;\n-    uint256 hashBlock;\n-    /* An nIndex == -1 means that hashBlock (in nonzero) refers to the earliest\n-     * block in the chain we know this or any in-wallet dependency conflicts\n-     * with. Older clients interpret nIndex == -1 as unconfirmed for backward\n-     * compatibility.\n+\n+    /* New transactions start as UNCONFIRMED. At BlockConnected,\n+     * they will transition to CONFIRMED. In case of reorg, at BlockDisconnected,\n+     * they roll back to UNCONFIRMED. If we detect a conflicting transaction at\n+     * block connection, we update conflicted tx and its dependencies as CONFLICTED.\n+     * If tx isn't confirmed and outside of mempool, the user may switch it to ABANDONED\n+     * by using the abandontransaction call. This last status may be override by a CONFLICTED\n+     * or CONFIRMED transition.\n+     */\n+    enum Status {\n+        UNCONFIRMED,\n+        CONFIRMED,\n+        CONFLICTED,\n+        ABANDONED\n+    };\n+\n+    /* Confirmation includes tx status and a pair of {block hash/tx index in block} at which tx has been confirmed.\n+     * This pair is both 0 if tx hasn't confirmed yet. Meaning of these fields changes with CONFLICTED state\n+     * where they instead point to block hash and index of the deepest conflicting tx.\n      */\n-    int nIndex;\n+    struct Confirmation {\n+        Status status = UNCONFIRMED;\n+        uint256 hashBlock = uint256();\n+        int nIndex = 0;\n+    };\n+\n+    Confirmation m_confirm;\n \n     template<typename Stream>\n     void Serialize(Stream& s) const\n@@ -502,7 +523,9 @@ class CWalletTx\n         std::vector<char> dummy_vector1; //!< Used to be vMerkleBranch\n         std::vector<char> dummy_vector2; //!< Used to be vtxPrev\n         bool dummy_bool = false; //!< Used to be fSpent\n-        s << tx << hashBlock << dummy_vector1 << nIndex << dummy_vector2 << mapValueCopy << vOrderForm << fTimeReceivedIsTxTime << nTimeReceived << fFromMe << dummy_bool;\n+        uint256 serializedHash = isAbandoned() ? ABANDON_HASH : m_confirm.hashBlock;\n+        int serializedIndex = isAbandoned() || isConflicted() ? -1 : m_confirm.nIndex;\n+        s << tx << serializedHash << dummy_vector1 << serializedIndex << dummy_vector2 << mapValueCopy << vOrderForm << fTimeReceivedIsTxTime << nTimeReceived << fFromMe << dummy_bool;\n     }\n \n     template<typename Stream>\n@@ -513,7 +536,25 @@ class CWalletTx\n         std::vector<uint256> dummy_vector1; //!< Used to be vMerkleBranch\n         std::vector<CMerkleTx> dummy_vector2; //!< Used to be vtxPrev\n         bool dummy_bool; //! Used to be fSpent\n-        s >> tx >> hashBlock >> dummy_vector1 >> nIndex >> dummy_vector2 >> mapValue >> vOrderForm >> fTimeReceivedIsTxTime >> nTimeReceived >> fFromMe >> dummy_bool;\n+        int serializedIndex;\n+        s >> tx >> m_confirm.hashBlock >> dummy_vector1 >> serializedIndex >> dummy_vector2 >> mapValue >> vOrderForm >> fTimeReceivedIsTxTime >> nTimeReceived >> fFromMe >> dummy_bool;\n+\n+        /* At serialization/deserialization, an nIndex == -1 means that hashBlock refers to\n+         * the earliest block in the chain we know this or any in-wallet ancestor conflicts\n+         * with. If nIndex == -1 and hashBlock is ABANDON_HASH, it means transaction is abandoned.\n+         * In same context, an nIndex >= 0 refers to a confirmed transaction (if hashBlock set) or\n+         * unconfirmed one. Older clients interpret nIndex == -1 as unconfirmed for backward\n+         * compatibility (pre-commit 9ac63d6).\n+         */\n+        if (serializedIndex == -1 && m_confirm.hashBlock == ABANDON_HASH) {\n+            m_confirm.hashBlock = uint256();\n+            setAbandoned();\n+        } else if (serializedIndex == -1) {\n+            setConflicted();\n+        } else if (!m_confirm.hashBlock.IsNull()) {\n+            m_confirm.nIndex = serializedIndex;\n+            setConfirmed();\n+        }\n \n         ReadOrderPos(nOrderPos, mapValue);\n         nTimeSmart = mapValue.count(\"timesmart\") ? (unsigned int)atoi64(mapValue[\"timesmart\"]) : 0;\n@@ -590,7 +631,7 @@ class CWalletTx\n     // in place.\n     std::set<uint256> GetConflicts() const NO_THREAD_SAFETY_ANALYSIS;\n \n-    void SetMerkleBranch(const uint256& block_hash, int posInBlock);\n+    void SetConf(Status status, const uint256& block_hash, int posInBlock);\n \n     /**\n      * Return depth of transaction in blockchain:\n@@ -607,10 +648,18 @@ class CWalletTx\n      * >0 : is a coinbase transaction which matures in this many blocks\n      */\n     int GetBlocksToMaturity(interfaces::Chain::Lock& locked_chain) const;\n-    bool hashUnset() const { return (hashBlock.IsNull() || hashBlock == ABANDON_HASH); }\n-    bool isAbandoned() const { return (hashBlock == ABANDON_HASH); }\n-    void setAbandoned() { hashBlock = ABANDON_HASH; }\n-\n+    bool isAbandoned() const { return m_confirm.status == CWalletTx::ABANDONED; }\n+    void setAbandoned()\n+    {\n+        m_confirm.status = CWalletTx::ABANDONED;\n+        m_confirm.hashBlock = uint256();\n+        m_confirm.nIndex = 0;\n+    }\n+    bool isConflicted() const { return m_confirm.status == CWalletTx::CONFLICTED; }\n+    void setConflicted() { m_confirm.status = CWalletTx::CONFLICTED; }\n+    bool isUnconfirmed() const { return m_confirm.status == CWalletTx::UNCONFIRMED; }\n+    void setUnconfirmed() { m_confirm.status = CWalletTx::UNCONFIRMED; }\n+    void setConfirmed() { m_confirm.status = CWalletTx::CONFIRMED; }\n     const uint256& GetHash() const { return tx->GetHash(); }\n     bool IsCoinBase() const { return tx->IsCoinBase(); }\n     bool IsImmatureCoinBase(interfaces::Chain::Lock& locked_chain) const;\n@@ -750,7 +799,7 @@ class CWallet final : public FillableSigningProvider, private interfaces::Chain:\n      * Abandoned state should probably be more carefully tracked via different\n      * posInBlock signals or by checking mempool presence when necessary.\n      */\n-    bool AddToWalletIfInvolvingMe(const CTransactionRef& tx, const uint256& block_hash, int posInBlock, bool fUpdate) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool AddToWalletIfInvolvingMe(const CTransactionRef& tx, CWalletTx::Status status, const uint256& block_hash, int posInBlock, bool fUpdate) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     /* Mark a transaction (and its in-wallet descendants) as conflicting with a particular block. */\n     void MarkConflicted(const uint256& hashBlock, const uint256& hashTx);\n@@ -762,7 +811,7 @@ class CWallet final : public FillableSigningProvider, private interfaces::Chain:\n \n     /* Used by TransactionAddedToMemorypool/BlockConnected/Disconnected/ScanForWalletTransactions.\n      * Should be called with non-zero block_hash and posInBlock if this is for a transaction that is included in a block. */\n-    void SyncTransaction(const CTransactionRef& tx, const uint256& block_hash, int posInBlock = 0, bool update_tx = true) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void SyncTransaction(const CTransactionRef& tx, CWalletTx::Status status, const uint256& block_hash, int posInBlock = 0, bool update_tx = true) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     /* the HD chain data model (external chain counters) */\n     CHDChain hdChain;\n@@ -897,6 +946,9 @@ class CWallet final : public FillableSigningProvider, private interfaces::Chain:\n     bool IsLocked() const;\n     bool Lock();\n \n+    /** Interface to assert chain access and if successful lock it */\n+    std::unique_ptr<interfaces::Chain::Lock> LockChain() { return m_chain ? m_chain->lock() : nullptr; }\n+\n     std::map<uint256, CWalletTx> mapWallet GUARDED_BY(cs_wallet);\n \n     typedef std::multimap<int64_t, CWalletTx*> TxItems;\n@@ -1042,7 +1094,7 @@ class CWallet final : public FillableSigningProvider, private interfaces::Chain:\n \n     void MarkDirty();\n     bool AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose=true);\n-    void LoadToWallet(const CWalletTx& wtxIn) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void LoadToWallet(CWalletTx& wtxIn) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void TransactionAddedToMempool(const CTransactionRef& tx) override;\n     void BlockConnected(const CBlock& block, const std::vector<CTransactionRef>& vtxConflicted) override;\n     void BlockDisconnected(const CBlock& block) override;"
      },
      {
        "sha": "2e1fdf4f3abd2059925514876423f4fa1d28f3ff",
        "filename": "src/walletinitinterface.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/walletinitinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/src/walletinitinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletinitinterface.h?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -5,10 +5,6 @@\n #ifndef BITCOIN_WALLETINITINTERFACE_H\n #define BITCOIN_WALLETINITINTERFACE_H\n \n-#include <string>\n-\n-class CScheduler;\n-class CRPCTable;\n struct InitInterfaces;\n \n class WalletInitInterface {"
      },
      {
        "sha": "367d0f69165b686e707fa3e6d85c9f0cb437eb3a",
        "filename": "test/functional/combine_logs.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/combine_logs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/combine_logs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/combine_logs.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -81,7 +81,7 @@ def read_logs(tmp_dir):\n     chain = glob.glob(\"{}/node0/*/debug.log\".format(tmp_dir))\n     if chain:\n         chain = chain[0]  # pick the first one if more than one chain was found (should never happen)\n-        chain = re.search('node0/(.+?)/debug\\.log$', chain).group(1)  # extract the chain name\n+        chain = re.search(r'node0/(.+?)/debug\\.log$', chain).group(1)  # extract the chain name\n     else:\n         chain = 'regtest'  # fallback to regtest (should only happen when none exists)\n "
      },
      {
        "sha": "882133aa2b7f7fb7a9e05ab9be8bbbecbdd109d5",
        "filename": "test/functional/data/blockheader_testnet3.hex",
        "status": "added",
        "additions": 548,
        "deletions": 0,
        "changes": 548,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/data/blockheader_testnet3.hex",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/data/blockheader_testnet3.hex",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/blockheader_testnet3.hex?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -0,0 +1,548 @@\n+fork:0000002043497fd7f826957108f4a30fd9cec3aeba79972084e90ead01ea3309000000000943e54375082c03172552ae841bab31ebf2463484574f6ce6fe9c3723e3defb719a485dffff001db8b63209\n+fork:00000020da2809ab72cf2502ecb29137dbe63e51fb82fb5babe6c9530dd86dea000000005dfcdc47012c19a2708b53e820c71b529f616a45529d48bad484948c84685d572d9c485dffff001dd3530a08\n+0100000043497fd7f826957108f4a30fd9cec3aeba79972084e90ead01ea330900000000bac8b0fa927c0ac8234287e33c5f74d38d354820e24756ad709d7038fc5f31f020e7494dffff001d03e4b672\n+0100000006128e87be8b1b4dea47a7247d5528d2702c96826c7a648497e773b800000000e241352e3bec0a95a6217e10c3abb54adfa05abb12c126695595580fb92e222032e7494dffff001d00d23534\n+0100000020782a005255b657696ea057d5b98f34defcf75196f64f6eeac8026c0000000041ba5afc532aae03151b8aa87b65e1594f97504a768e010c98c0add79216247186e7494dffff001d058dc2b6\n+0100000010befdc16d281e40ecec65b7c9976ddc8fd9bc9752da5827276e898b000000004c976d5776dda2da30d96ee810cd97d23ba852414990d64c4c720f977e651f2daae7494dffff001d02a97640\n+01000000dde5b648f594fdd2ec1c4083762dd13b197bb1381e74b1fff90a5d8b00000000b3c6c6c1118c3b6abaa17c5aa74ee279089ad34dc3cec3640522737541cb016818e8494dffff001d02da84c0\n+01000000a1213bd4754a6606444b97b5e8c46e9b7832773ff434bd5f87ac45bc00000000d1e7026986a9cd247b5b85a3f30ecbabb6d61840d0abb81f905c411d5fc145e831e8494dffff001d004138f9\n+010000007b0a09f26fdde2c432167d8349681c7801d0128f4dfae4dc5e68336600000000c1d71f59ce4419c793eb829380a41dc1ad48c19fcb0083b8f67094d5cae263ad81e8494dffff001d004ddad5\n+01000000a62bc0c08afc1d12e6c6a7eb4a464c848190ac0e44123d5fa63a9ee2000000000214335cde9edeb6aa0195f68c08e5e46b07043e24aeff51fd9a3ff992ce6976a0e8494dffff001d02f33927\n+01000000f9e2142a93185496f7b21314d8b6fa736d0a30fa3a6d339ab3a1ba9c0000000061974472615d348df6de106dbaaa08cf4dec65e39cefc62af6097b967b9bea52fde8494dffff001d00ca48a2\n+010000001e93aa99c8ff9749037d74a2207f299502fa81d56a4ea2ad5330ff50000000002ec2266c3249ce2e079059e0aec01a2d8d8306a468ad3f18f06051f2c3b1645435e9494dffff001d008918cf\n+010000002e9afd58b91f15c3ec9eb0f01ed9d503134da1918b6bb416a9920e700000000029fb495afdb58f3a26d1c90fafec93aed840e2fa37ad6173ba1e7fadb7121ee57de9494dffff001d02e7f318\n+0100000027e0ca29a9802c0a2390ecfa90a9bd814fecc54446510e155652dead000000007e8d5344557575c8f018cc62a32e8e0bd80638643b4ec34945ec4662fcab138142ea494dffff001d04acbc3c\n+01000000001f3ada9b561378e324e80ee68facd5d232f72f773b86328393054700000000eaf3be35e3f0ace8b6abdeb5509d72999eae2329657238b53fa437e319c8e96b99ea494dffff001d027801a8\n+01000000781bc7847e15c3b936a6a6a178e38fa29ee6e4916a8a62e10795c69200000000d44c3443fa8bd88bf32b94b9257f09ce6fb6ec0d5420504d631568f8685200dfa1ea494dffff001d01f781d0\n+01000000133991a938b505ee8f6f347f313c3372d82a9d8b42b08b0dd0fc086400000000a0ef58c239e0197a65aa248c2cf52c437d8c8ea30d1b835e630a87c941f7d4e9adea494dffff001d030ef2e0\n+0100000028d34cdb13e555032e4bec55fcce3d0fef8212803fb1bab851e1259400000000542c71544b9f28bd5a6fec95ecd509ae49d0b04f8718c685d0751f71d38285d0c3ea494dffff001d056b3115\n+010000006b00cf1ce31b33fe1e2c4648a0834dedd972ffb2a2f341f75ad7cbc400000000adebf7afcbf176f765aec16b74d92896f55c3d65e14dd1a8becee0871000291751eb494dffff001d006f85e8\n+0100000043a78ddf30a2d28a42cc66f90d13cb8211ee0fca9dbf8a4cce8c19fe000000004edbd2b89cb6d6fd69b575a62bd4e3103b1e0ce19e31bccf9a093ad8ccd753cf7deb494dffff001d0591a0b3\n+01000000489ac81592595a4004e14331cb096ffef12b1daf709f6378e9c3558d00000000c757bebd6f2c2c071a3cf739a4cf98b27441809790a5cf40652b46df8a98a473b0eb494dffff001d011aedb6\n+01000000a9c570a45d959023551f9a694ace9c12206174f21383f30949ca3b9b00000000eaf93dbbfb3551a1ff8b6bd5ba4cea7508e790c23cd07b9d9e791936a79d5fd4b3eb494dffff001d0385a7dd\n+01000000d35d5fa860dc70c8bdaf12f18e16d8b4cc29d141c28d59cc317fe5ed00000000507dae091a9657b6c073863ca71ba6989a2cf4417fb81e940668568a35d34a7119ec494dffff001d00effec3\n+0100000073379e3ff3dffd006e0090e52ac571a9a309490a23e64d15f8af291a0000000051f1c5b2b7c8f980e7715b4d3ce0180f99c44a16fc9c00ede2f5984b8d7cc22d16ed494dffff001d0082467f\n+01000000869845a3343adddfa5b1f534b507d9b67c3685b0f1d89d526cdbd34200000000823623e8c6fe2c449065d2c0ae57aeb4bfd8e9687126a6c99d1ce916e2fca63f4ded494dffff001d034f940c\n+010000005da49f64cf0025ab1111651d94748b00bdb00b780744b88b42f962c200000000fee9e254a5a74c858297e89ebcd2305ad2707a8acc131ad07f6abc0d8e38def969ee494dffff001d05c512e2\n+010000006a65bc120bf3e6dfadc3b9543e48f8876cb826aed0d8f809bc34bb220000000090f489f48c88442aa7d9250f743b386558ba1fa2e7e240e5d32195d56cf1c34ffff0494dffff001d014394ce\n+01000000e3f21ff9cc51ef282bf6bebc90e6f96968a36a704452192724c839bd00000000b6d553c98016b66fcb4856ffedc13a2de720288d4c2e8fed86206981259791a23af1494dffff001d017f7044\n+01000000e16daff1b16a81a3058d982e79550c9c9ba84a207a8b84ae092eb4b300000000f2f34dd423f99930aee95815b2885906f9cdeaba04a9bb076c1f359c2031732059f1494dffff001d01b322bb\n+0100000059ebd22dc26158414c60868355e78ab4b6891345fd97602f6c106d9c00000000e6c5bea3888e891bc5f9f8fcd166d332071d3b434e933763fb20db50e47dad3f5ef1494dffff001d0067a0e5\n+0100000015ddbe82f202b27febceb00547dc19653604ef434f080848f22e3b0900000000e26e8971a53396413f0f39b88a697f593993999c8d07fa2dde608111fb2ccbd3daf1494dffff001d04362f37\n+01000000a76595e37692f85d5de0438da8e75b5f611fd7b7071816b9ace8ba2b000000004cfb6d8faca8e8e77a71359d2cf0d12d2e52f266591f5fb807aa737c90869d2a81f2494dffff001d040e87a6\n+01000000a774311853f32f32d87081529bb0506d5e4e90f7e455bb640081215f00000000228b387354daa9e5d38201811fe746591ab08a66bb3c4fc796a45535acb8c61baaf2494dffff001d01ebfd80\n+01000000d0efaa4f6924659f1e0221f910e99f6fae76b36b759b212852d1343a000000005e40d3b65982e929433ee02037a60f05b62e70e6d51f608974fb1f2926169398bff2494dffff001d05c41c3a\n+010000004c600547d8ed4b9dc946bb455f64917131dd98974bf2dfda05afc3a800000000e5b01ac4a611211847b0777b9ba9e396b0b7348ac401041e4fb6168ed091691ccef2494dffff001d037a60b7\n+01000000f571553e5aa32b8374bd5a0f3c58834a46e05727b64dbe62a942376600000000a91cac1e92c7c597af565594565f5b54e658fd2e022e4fc35eb92aa165d9aa4fd3f2494dffff001d02687811\n+01000000d8273e218df68e333782ab3b79929a8609404bd85bc225b46debba3700000000e91f9128f70a0502d338221316a0a3a1f4181821f9d2220c3fce7b5cf8e305d514f3494dffff001d01f22226\n+01000000ad615025da247d14a4f092f21c4fddc6d1a84e0b4b0929f9ccf81c180000000069cabd55fc74596566ed1548b6b4ac23943d33e817028d8bc8695a7bba82256e6df3494dffff001d00e066e2\n+01000000e7da808f2e62c3ec1b443e2979c972f5f69f32146cb4385bcb6fdca2000000002f4092fa4879ecc1a39471c41f8fae20f10ad2204bcda34e79ac37cbbda973757df3494dffff001d0316a8a6\n+01000000928b86c36f27d22c7d2baf27f31b50bbec7754d33d12aa37342723db00000000ece3fdbc63b66327abb251165ac0e19b1a02fb79295c9b6eb8b38b68c1c59107dff4494dffff001d05bcddf0\n+0100000088c96b45d3e252cdc38780843e3679d74e858a1d218f9e3e0866335e00000000432cba2143d62f6349faf4f7956f7354733518c22a309284d96236a9d8c9616e0ef5494dffff001d026ebb97\n+01000000885d76fd42926155ff9ebb1d3c41a517d7beb70564b98c3608719f740000000011a3bb257acf328a5bf1258bbb653b88a40b2d2a66db695a1ff1aa9d31d5186590f5494dffff001d02bcabdb\n+0100000093f416076c9b2eb0d147e8ce3bac03aa0784e44a6de6fc6f61183a2800000000be46ca90dd31022ee15f74c221208eadf1840e208a6adcaf127a60cc61d959c4d2f6494dffff001d02d68fd2\n+01000000f9da861df4a86158e751c062e0a82d3c90e9038330f6447df4aee3d000000000972534907cdd1bc56f21adde0850dd17d988711a5c36ff81ec84610b4f762e9ae3f6494dffff001d00e96635\n+01000000303a04a9f551e93a8ca88ceaba1c1d28892323564988ab7f99a9c0d70000000087a11f1aa5769968461b251ca9229f59acad999284e29976331cc13da46432364ff7494dffff001d012c54d2\n+010000006b82062aabb19e4cc89addeded5c65ec28684cb54d30d463719f094800000000a98137fab92249e632091c38e3fe4c7fd8bba11bc956fe83c41357e217929e1e8ff7494dffff001d01edcd15\n+01000000f7332e78d21adde6e52aa20362c71c1fd7bc745b3edff6e72497067500000000d521571198d3d2c4124b8bd9ba7842716b3bdd93236a92ca6af7c0a7adf9633c2df8494dffff001d031b1c13\n+01000000c9ebcb8ea6f7e6a611117d0268639625cee28155c88708b4c09d4aea000000002d4c50f85979f0d2491d015206d867b273b353c253a173abf18dfbc5d96d088e50fa494dffff001d0397f4fc\n+01000000562c889f95c49db05f6a33277aae9bfe68e92f00a5d6f67ac8c366a100000000b7b0896c4a53b6aab15282cf53e1119676d89be0eda11064cadc40dc8ec194dc66fa494dffff001d01f0369e\n+01000000d41cef71d625aa5380f6cdc6452c67951e7e4f5b27b7904b4c2da413000000001c1e1096ab473aba614651fb98f47a375c03ec470daccff39a2d2d65bfd881b47bfa494dffff001d02454a15\n+0100000095359a35957b89dd268576d562f49db7939baeda6de4855426ab5d9c000000006f68039da08fc314bcc71631be6f4b2ef5e0a2f9491fc078b11fad3dd49ac287a0fb494dffff001d02fbc213\n+010000007d505f65addb5a3b50eb33cc5cd3bcafe03ee597c4027166aad2d2630000000090d221539ba3dabdcf0eacfa9d63f272c59dcc07e5e193271a24f4c11caf2c24d9fb494dffff001d05542cd6\n+0100000013d5bb77b9235002acc75014e0c061c79de1752d3edc6859b4c0df7a000000000d17f332abe46c092877537ae764aa99e9b25d6bdd94f4007eac43f4861cf4675cfc494dffff001d02f62def\n+01000000612ec5ae40cb2a58e18d3124fd70664a4fcb9329f7d268d4bcaefacb00000000f7bc31a9984831440cfae529df94ba1680fa15b4490454454920ea8947af4a3765fc494dffff001d01c6c1af\n+01000000f13ce1836e92f0d12e4892eb229cbf6d50b9b2080af16b01f00b25de000000003f8f64092fddae84dad92736fb7d350e25bda6118bb1c660b06a4a5730fd352815fd494dffff001d055e65b0\n+01000000ee24ae636bd70cadac603bf8cc631369bafbdfa8ac8effbc7dcb0fa5000000006faf8082545aef971aa4f92bd411947929c4949362300cd1302ec8bf74091fbe35fd494dffff001d0139a790\n+010000006350a3cd2181f0eb75fa8c4022634ad85b6b9e1f9b7346a2eef5517900000000a09d738f407e2dcc888e8ecbde93458d8599720e0359a380d503ee56c688ef72f9fd494dffff001d02661caa\n+01000000a29d92b014057dbff2775280b8bae8b3877fa9a345f4972034c0711b00000000447bae5734b6c67dc36ae088869c18740a836d7a9feff0b349efdd7373a21358fdfd494dffff001d01b13c06\n+01000000dcbf4a9455bf33482c2e17640cb89711468c0def1ba9f6e26e5a4aed00000000b555247649a364adb88b07afac3aa2f9ddf5c379154cb17d22f69fd74c84a2e24afe494dffff001d03144aac\n+010000000429b2aa02abcb8275705dc6482230dcb7c8678388fe7d75022c1ed800000000d5efd425dce6deb5750306ce8a0e5d045e0a607ee0b530866833e956dbeea0575ffe494dffff001d026ba2bb\n+01000000871d8a30b3b39373d71fb9c5c7d8d7a3c005ad688d9c8ca974cd330e000000005ec14d2b9adfccae05f78556b12fe2ca03cddd8bd67896fa5c6b6fb090e90177a3fe494dffff001d0147b26b\n+0100000019fd8a4e03a52e43322506693b696af00b828361e2a0968898708e43000000003853a270a7d9e6ad80fbf911146428c7ed63b2a1154df748f5a980fe20e9e8e2b3fe494dffff001d04538437\n+01000000d250d67bd2679caba305e5e13698c7880098a1a4383c2f464fe9006d00000000d793e7c2c9416eae3d8d81046985db5f3d1df7922e869fda6ec5b22181ee46f725ff494dffff001d02391748\n+010000009d83b8dbaae3dee980529b6dbd307df153a22b5b0fc35ea694a1faad000000003cfd458875824fadce673ca8c3125fd12c36b7230035b5f056a12d4e0d6b7e6b7eff494dffff001d0448653d\n+01000000a7d1ff0415c1d1be8a11c7dc20557e001d2fd96c0f396f52969e330d00000000ca20885f915b1d3c5e614cf76067fcf8d9894204db63664d512806ceab58ea27d2ff494dffff001d0327cc00\n+01000000d98a10f08f4a7aa698ba8564a85bf821b747c7a44f656fb2e3b9335f00000000dad4bbd7663a69c07ff9579434972bb203d0d78d07858ddc7ca32513101c964e3d004a4dffff001d04df7568\n+0100000031965a378dbb0d024df444b3ebf894f370d28df8abdd54565b598b9e000000007ad93f6eed4656fa7c0a606c08b067be35dfa5392eda5d77f133dabdfd08739794004a4dffff001d04facfab\n+0100000004cc9e4dad8b5d2166fb175e7bfe13ad56018dc81255d335336b8b38000000002d011ec2248c2899ca72a01673535807e2cd0fbcd4465ebafe2a002f3f6c9ec1a3004a4dffff001d04d4b0a1\n+010000002093e7853950d588f1a36601643a97b7e187f6b7b274ae43d82410a6000000008ea10bf2d0d535c64d9db748aec8723566b270e0becacdb07438273654e59feea8004a4dffff001d04d4db49\n+01000000eff17d4b5360e16151019597f732fc8f6e3b19ecf0c88e2ab1a2bd3a000000005d9b9c1d04856052c8f01497c9ce05d01c4c80c1c4296b15549ace3e04e2cc24e2004a4dffff001d02358897\n+01000000bf5ea56c32a49508f0987cf0b18513d285edbe987b0dad25ceef3f1b00000000ba933ef648e2544227c7db41de45f0cf39aa612478c126e5ce5393668e230f1213014a4dffff001d044c6575\n+0100000091ff63e6ab577bdc347fc87265fc316d53303bf28d0294a24791143300000000a97e4a6f79bb595fe0239f31549d5b06e13e7d5062e3707ebab0f38f0df5d1832e014a4dffff001d0083c449\n+01000000bc749fb377c9a937702bd4ff35d376b43f5bc56726029a93a38e8232000000002bad8475b38ccd82eb98377132453c72706ae9626de3f913e8da2cca6795481166014a4dffff001d0594c61b\n+01000000a02349924ea393906e7fe3ffc2b9d152fdf55bcc1bace5251517168100000000448e52c8902abd28f82f3ff5eec8c97ab16b71b61674713cbc4f9a896f733b5ba5014a4dffff001d05c09af9\n+0100000011f5cea7297afda99c9a141c4d438ff7708f451b571b4aa57b4b69f00000000087550789e53e3c66c4ce24d145f615c95f593d7557fa3ae2eee2a1f985549f9bfc014a4dffff001d00e035ee\n+010000004ba4c615f54d1557c5f691cb614cecb9edbad0011ebbd3b94fd458ee00000000c9782c5584bbe7c3a51f048dbf1e428e0b0e092607ea6514c401f13a45afd2b6cd024a4dffff001d049ecd2a\n+01000000718886f10113146ac974a449c8b5bb205e0307f42d1b81990cf1991e00000000b88f0b4d80b631a24a15d7c640ecc15ee82188bb16d692be42467e21b3971c1421044a4dffff001d03e07f40\n+0100000081fbffbf5c27e4e908c14bc8f303a4d91bb71ae05445e839c531ec81000000002aefeed1a7378f70e1f434bde89af706e1777993d25d9a95f5b4f4a0d83bcda8d8044a4dffff001d02cda9e0\n+010000006d7f371b437cc054548511f0f9ec50b6e04bb4f3a4915a099c3bad36000000005b72bacbca2f6bb848d4753733f6427849b1aa4805b244e2751c38ff8d3e339c41054a4dffff001d0018ffae\n+01000000b82c2d751368b79004a8e15e5b9f1bc7f620d5de2d6105d83d8ec2f6000000000cdfbd9bd57b78356abb0d07551b0c5c20d5258091604be05674d4d19455df2fb8054a4dffff001d003c4d86\n+010000006efef1bc9d35256bbe500ee9c92230e0f987296e373e20ee7f3da4710000000030a2d3961a799e229a81337790254ebaefa055bb85ec7f03e5c8e9c3250eb35ad7054a4dffff001d0514a76d\n+01000000e789ed685960b594652b9b83a28ded0995725d6ad82b2f358058cbe80000000035b73fb2084e2e8faa28334b17c12668004b7cc8965831aaba65b38b7c54ba97ff064a4dffff001d055247e5\n+010000000606ede205a1002e0995f8d009de821d488e22fb37167bcc9120afbe00000000f6f0d5c7f8204a7142f2e37a7cb406e0a57fd7c9784c12111c55a1cde5418ed11a074a4dffff001d01a5f8d1\n+010000006da3e0f7fa132425557519508e4e97cbec301a33e25d4b65ac054a0d00000000d657340c13f9f8accfc3af62529a25d3d9e656caf2993fd3166f73850f397c228e074a4dffff001d0309686d\n+01000000cb9c32345bb264b3b2a6e96c8843f65c9598e4948737c569c0a00073000000000894a15ed694c745d87d2135f90eb9dcf8b454937b48c82132d52405e0d4c4689f074a4dffff001d02d5845a\n+0100000095349f59ed0c0ce5ab0de43b9d55fbc7b8afac7eb6dacebeaaf290f100000000df9bf22064b03cf08e658257b5d19662fdbe3d7acd27894cef0d3f9ff5a657bbbc074a4dffff001d00a13d79\n+010000000be1a15c8ae486da44f0585514eea60780091e52e35f838cd1572bf50000000077333896bed3021acee751bf0c073d95bbdc99125f4298c052db8998bf7c3270f9084a4dffff001d008f86bf\n+01000000c0b7b630de7b1bd92c4be9d32e19faeadd68f60316ec97db96eaec0f000000005e3c98a964d941f4abd129531d0ee81cd5e7dc098179c3188ba36ccd1e5f9fff7e094a4dffff001d03d8a118\n+01000000ae3c51439dc8f2bdd807e1d88c25a5a0b1a3005bcbb50bbb4e48493f00000000ac719d460d514cc4489597ac78e995276865ac07d7606a313c12b16e769b9294f50a4a4dffff001d04735f73\n+01000000ce12350c698e84085e7b62c039249c63cb6a6cc9404776c9cc7fba8800000000ca128b2e74fafb345ad249d61c538f75a2a230bbf2266d470d47986555894deb370b4a4dffff001d001c0a17\n+010000003dcca8252a636d4c0b8bc4ed9285b749434aaebc29965fc691a635ea00000000baebe5ae323c2bc5c316f6a8f1947b4666c7707c9ae127a03e6429fea7624ae53b0b4a4dffff001d00b4a44c\n+01000000f6cd7f4cec06d5c6aea54e64b45f049640680e4cb8249cf18587b314000000004a1b2b51da86ee82eadce5d3b852aa8f9b3e63106d877e129c5cf450b47f5c02480c4a4dffff001d02552721\n+01000000c64e139bfae4adcd96860bbef3969b84851dc4d4fd8d06f16cd03698000000005e4b195fd24b314f69f7bb5b0139861b0f07a1286b8f6f42dbb6c82524bfdb93890c4a4dffff001d033b3297\n+01000000a3e811a098612235feb5e1acb407cd98132a9d5f4dd99aa8d8b576ea0000000025a13ad0cce0eeae69ddb545bda3b490230e68dbf0687af3ddfa132caebadd7cb30c4a4dffff001d04a39aa9\n+01000000ab5ab86fe14c9c765d8cdfd67f9bd5d41505f9f9f67e4da1851f099700000000beb6740250c060fa7b472f4daea18186d47e266dfafc88f088d7efe3ca5a2ac1060d4a4dffff001d0511eae4\n+010000006ee9f67721369cabaf6e3e9045b2efb70bc1344256dda634a92eec5200000000d5b0833f82460e5ea635a31c60314eec20bb317f2cdaf354023ed4225e31f264380e4a4dffff001d03a74f10\n+01000000b3ef61423747695daed4acef8980b5ef4c8feaaa908b3fdc6fbecdab000000004fd416b35e12b775e2899ba509a06822ed8b6627311364f5195d32ca6a314dbb3d0e4a4dffff001d0255ab96\n+010000001c75c30c7bb6391ec7d94f6d52bd2aeb0b8f5224907b0106791ccdd70000000016f86bf97a3dda131f108ab4ab456d5ed3cc5e67eec631d8fa044b95c19f3449410e4a4dffff001d048e1c98\n+01000000a8bb0604235d5310973b23a5c797442a1ae8c07b96d8cd33c191b45300000000322948a4806acfeca2b32248d0e183c8eb09d5e5ef48adf33777307635414cc05b0e4a4dffff001d00edcc80\n+010000004d37f2af0c42371bb77b52cfe7f539e550e126631dbae6056e54dec80000000014238140ff083fe67f0d5c0627857c4330c4c96187964f42b680ec460ad0ccd6620e4a4dffff001d048185d3\n+0100000087e774423a88647a4567d3a15e7099b7f271d8d846066af9776ef4ca000000000d90cd436a707875c28222178146cb93f6b048dc4e7555cf37b96757e3b90a5b740e4a4dffff001d030ccab4\n+010000002f3be6a1d59b7786d8601330a47f030fcdf2354275fbafa8f4c129490000000098a23359c17ca2678e2039c8ff9081b18c4913749c9a081ac3f62958f09fa472e10e4a4dffff001d00c7fe6b\n+0100000050ac3cacdb94018a26258b82299da1307ccf3e2bf62a8f4acc19e02c00000000e09f513a024d3e13473d7a65f79073b36a90cc228613672d2a47812368ff42d1df0f4a4dffff001d007f726d\n+010000000e044393202d6b239c902d3f634e3dfdfa31ae439d339238ab1688e30000000055b5d3d496e196d624a471b818ba0b1778417ae335a544033536654fdda3eef6e80f4a4dffff001d03ed4240\n+010000006396e6ba5ef4924d42f4f3114ec7507b81bce51e9e2eb51ca9c53c420000000049af9208af7b7a06d65ce1cfcab6ad9123a8dd7538fb0aca332c63429ff48d59ee0f4a4dffff001d056528d3\n+01000000497b15826573b28c3e83a5d0c5ed30cf48b97dd6bd797849144ea2400000000018b50db063333a3261b9b41e887b4aa5b69becdc9967550507c120e22a76496710104a4dffff001d0408eda5\n+01000000f5ddc74872eb899f5113e002f642e7b507f871d99a9900edba304aa0000000008f6546b850a14744afc3fe55f76f3959f40799bf4dcefe01ae4dba5903cf2fb553104a4dffff001d018f658e\n+01000000918a758ed54c9f495edb24ef3fe0f4432ede25853c324fc0f33a458f000000007a8e49b22114f17b5933fc7a8005421ff8370b8c48fa04c24323e91bd02d701492104a4dffff001d053e6e0f\n+0100000035893f7cdeb0e9af7d9fbda1584ef6d5219dfbb141b07b31257a1658000000008b9b3abfbe24d0e375deebb5f41e74949203c00772a678ba69c1126156c5489bfa104a4dffff001d012a69fb\n+01000000b6f8c48e94ca346b12373281acbaa08fa54d1cfdcd9c01e020cdda9f00000000be5b4753c6062e3eaed75f5412e43d6dce8d242c5816b436689f795f90536f28cf114a4dffff001d01b6887f\n+010000006006db00d70ce04a9940c203dc865b3c5d070f8c2d1295498ccd6c32000000008bc41e410a44b764dacb38c1138a3ff2c038a188a063509c6fed4aacaae72ee67b124a4dffff001d009531e5\n+010000005e0dc170558d7b2872ddc85f481531dd823dffa66cc620c065adef7700000000e82e91ade6f25c8c6f4c053aa62d94926324ced07ba2f3aae072b13a2c5dc5f89e124a4dffff001d05ae2281\n+0100000056320cab20bc1daf4fe3cf0115f2436523e44c40ebcf8c18e6b5822f00000000ce415eab9cba354ae042c22ac9f06c1a69d7a5dba67136fabef93d82f374dd3e01134a4dffff001d05a0d736\n+01000000ccb063ab7d74a4030fd155615f046f95c8068078557568ce6b8092fc00000000ff33b27214141ef3d183b1d2499666c8635a57943ef5f515f4e60515f9ea0064c1134a4dffff001d021fa95a\n+010000007f6d7a61bd46dd27be404b8c883b812c2899095462591dcd75a96f1e0000000091777c00b7168a888d7a7db4b5f78758129e79ef909f92a84110b9f33f9c4c5505144a4dffff001d03526c4d\n+010000006be8cfe3e176d34d1a46f68b7d20a01ad3f9e2aa6f7540ef6a32573c00000000a870da2f87071c1366a22e77c829a6b85d745ab2279e0333872518d58b8dc0181a144a4dffff001d042c5db7\n+010000009cb87223258aba43742de401d0157ee2b4057da95b23e1665880725700000000d54d368cd4243da3793fe3ba2af1570dd44a905d77ecd1a5cbd07cb8f72ad80f30144a4dffff001d048f280c\n+0100000052b771a3a85c26bc796ae0841ae894c6ad4527b062c94812d98b9c5800000000eeed0f4d975db8f66788f809ecf8c351d19ff5805276ef31983bc5682548342d52144a4dffff001d01aa3be1\n+010000007ca07eb5637ef7696d7bf985b9114de19317a9abdfbe4ee79d8bcb1a00000000d7172956946d5547bd98c6a7040d353c3cb6285fbad096a1780f3b7503539adf3b154a4dffff001d0333fec4\n+01000000326f947390bf03abdda16f673d26326d4b159e0b7f732a67286ba8e40000000085701296d47b03f388fd85431c2a9fc817afc9b24870a9a7da850d3a43a8154b71154a4dffff001d0164b7d2\n+01000000a45af68df42f6f23ecc47e1cd0f41d47c1e5a26e8343951f9881e51400000000b7c1565d19d406d8c56448571d7e7da2ac559bf9b43887e16e4f416276ccb99b8e164a4dffff001d02ec606d\n+010000007eaec4cfdb152a8ecf8ec155b7343e2cc04750be00b96c61a477e57c00000000096a9263a5008a48e1c2b527b922a81cfc269fd401ce429976c587a951ff00798b174a4dffff001d015bd123\n+01000000db36ec19328691975cb8c6666866be64b5be79ae42bee9fce3b5db5800000000b5e73d7d102476db3ca2379bdd891b311140b49626ef42937356ccdb8fed589103184a4dffff001d032d07eb\n+01000000d8f8a6686ecdeac529caa3ab9ecfa84a5fb62b06849ee09b8331d89e0000000038b408676c2a78fc63ddc1807804d17e8ad9433387cc3cc0edd68c07e4a714b610184a4dffff001d0437e51c\n+01000000c54675276e0401706aa93db6494dd7d1058b19424f23c8d7c01076da000000001c4375c8056b0ded0fa3d7fc1b5511eaf53216aed72ea95e1b5d19eccbe855f91a184a4dffff001d0336a226\n+01000000bca72b7ccb44f1f0dd803f2c321143c9dda7f5a2a6ed87c76aac918a000000004266985f02f11bdffa559a233f5600c95c04bd70340e75673cadaf3ef6ac72b448194a4dffff001d035c84d8\n+01000000769d6d6e4672a620669baa56dd39d066523e461762ad3610fb2055b400000000c50652340352ad79b799b870e3fa2c80804d0fc54063b413e0e2d6dc66ca3f9a55194a4dffff001d022510a4\n+01000000e846583e9bd64108b3b89ad3883bec7731ddf1688a4cc8f79530fed800000000d2954cb816c87a9572bf822138dc84b5f6847fb502cce3d6073f9ffe40588571a1194a4dffff001d045d675b\n+010000001d72012c553d72f1f75863310ac0450e53a9e9026b9bf9556ca024ee000000001b7142acd57304290a2ade0e2c96d4fbd3ec924a02a5a0cd30c04f0e96265423ef194a4dffff001d041600b6\n+01000000d2c5dfbfa04c7b67457c58f55a8d190dc5f8ec5ab94af969dfb748ba0000000069492041bb66f32c9bd69b74e7ba9bff6d4122e931eacf9c89b45eca2c35eb25211a4a4dffff001d03bca431\n+01000000880be932720bbf22f1b14da0e6d16c2773f83699935d390e8621533f000000000f5d2500bce42137fe905225ed9a7380eceb7445c89011bfcc740cf2e9985a034e1a4a4dffff001d03d30924\n+0100000000b0b174d61c08a92313345717ca7776a75cb67b77662c04ea7d3e2b00000000c8ac0a2fb1c01e0e0a5339d296eb072b2b9f9cb1d410a1fdd69a2c797094dda56c1a4a4dffff001d05225e37\n+0100000089535760639df16a512f9caed73be0edf8c9b5466fcea14336f4a1bc000000001527b6224d45722c8ee351976c69c8fca59c11d3daef7abf1d189aab0e959f7ba71b4a4dffff001d0551b67c\n+01000000a61d5d887f8fd4c86f7111c2c5a4d0d593665b527cdf84dac7a0d57d0000000069b7df87a13603be78ccb048370aa1d2da0969f3b1822791d24aa921f8e268ffc51b4a4dffff001d055313f2\n+010000007f678f2bbdae181d396123431faacd0b956633c30a55a9595ae6657f0000000085daad94e57797b9340c299e483531dfcd0f3c6996da98ffb2ab31bbe34e346a001c4a4dffff001d03ef37a0\n+0100000054112b758ce49f1fd22d613250599ffe92c48202b6a477b9289f3d7900000000006302548e973a0d5764711fe84e1900dccedad0de9f054fbaaed3735b70ed62391c4a4dffff001d057c8c98\n+01000000bb142886ff32916975d060c649c9119aca0b47e3f169acd3b7f1b9dd00000000ff166532d3f30299c5a82856e3411957dbe35fe7e17c4f58b92b2ef12c399dd7d41c4a4dffff001d04a2a121\n+0100000029a936f51d08ad1f1353890300131fb7c04e20606eb48197dc863eb200000000c7bffe64778d6b4815226c6aab915985d8937fb0d3aaaa983bb513c69305caade61c4a4dffff001d0514cd03\n+010000007d16758418920cd6d81283aa30108f20f37dc7114076e23025bb881800000000bda8c051f6e99590cbea0919b7a4189e4d3620ff3f46caa4b797fd52e204ff1fcc1d4a4dffff001d047ea807\n+0100000087a6243ae1dc858cf91caf8a1f92dc473bdb14203c573b9d9bc134cb000000004caa084ebef276e6c454dff401271b39e55da21a8cd5a3afdf2d0e0f94b94a2dda1d4a4dffff001d039d9a6d\n+010000002d0a1a0b18f1f74ee797beef1bd4766a050a3480b5d7457303b5c54e00000000955ec547d5ff2bcbb3c9f108828e431a674576e1de0b8da794bfa3a70b794281ef1d4a4dffff001d0019c619\n+0100000060500ea2003736b74596d4a507f5cf001daa55e7c93b53c77d32a32e00000000c545bbc6ae68433be1fbbf0ebf59f22751af853d0a6fd6c944458aa73ec7a014f71d4a4dffff001d03d8b5ea\n+01000000cc3d1b428029cae46634a9b96857475b2bc59619b8408e615f65b7b9000000003563548d04e24c89e7706a3f4ad681bebb3017133e87f7434d824db4e51f479b891e4a4dffff001d038a2031\n+0100000073da9ccb3fdbdb4a9e3723a4bd5270c70ef3e78f448fad7e77a8eda0000000001f0a3749af61eeb59aff1499892c6641d1a464a26c156608d02cb74c264786ccfe1e4a4dffff001d0284512b\n+01000000ef5a98df2a193c1f8a5c271dc4d45de465b7122dfeefe96fedad105100000000cf330295467623ec1378dc6fa312103ad8a210b3e1351f2f4b6a57ac43fcd472071f4a4dffff001d050ac986\n+0100000048256cc5b9ec6e7a12c378c93c1dd2ada859c9a9997adca75166c935000000008e3430573cfde2f3e1eece8aefe661dd841bcb665d35832415bab4f7526785229a1f4a4dffff001d02ae4b52\n+01000000eb5d7c4b706d8891ddae3ba5bb57fcf509689fbc196f3ef73837f27b00000000226e90ccf96f41e04f011e69a86e18e96c09df6fbba19416132247f1d2a6e4073b204a4dffff001d0488c17c\n+01000000e5214de98aa5cdf1766c5129649895816f49ec82e93c4bbda787897f000000000abd68f73823585582e65529a8739e90bd943fc4e214ac00a20ca0369b70d45d7d204a4dffff001d041786ab\n+01000000fd4fc04cdc29aaa117b16b2420aadb9bb92fd19ef2a7aec3c40f71250000000078e5266df52051011f39eb29939c8782564563c20b3856f7aaafa6dc52921359e8204a4dffff001d0205fe6e\n+010000007252c67173d343874ecfab4d5f57ab5936f2d87f173047c99c20e73500000000d2b61f338da6ac531884c623db2804c0d7eeb84263b501524cbab6d5edfdf56f00214a4dffff001d0027a318\n+010000005a7746eb6d1d19cdb24466e0a87a23b6ba8c2e461ba8928edb84253b00000000f1b03cf0680b9ef33fd311f6bbc6db3f1c164f9341f48a02df1905cec4ce241b2e214a4dffff001d03246ebd\n+01000000e93f1fd6ddca6d8fdc3ef50fe0f31769200f8fde592a0d5d6f8e1d290000000078966e9f0a2d4452ab2418249fa6fb1a325a04f039d015899141a82aa5a6c05c92224a4dffff001d01d8361e\n+01000000dd5f3ae3d2c2876ffbfe0956b914fe72750b160b667b5bef5aaee61400000000434d2b0f298874c3f6d8467c07dea6883a650de00d48298cd6fb48e8322e1058b4234a4dffff001d0161f3ff\n+01000000f814899e7f50c4494806f75523c9d8ea6c0198d13f1f14431fb541ff000000005b1015187325285e42c022e0c8388c0bd00a7efb0b28cd0828a5e9575bc040011d244a4dffff001d0579aa5d\n+010000000f72c6372c87d91f2df95b0c9e91cafab596f29270cb01cc67186040000000001fe6898ac074a680fe7458ff87a03956db73a880d2ace6539efcc43002bd97ed87244a4dffff001d0434b3b7\n+010000007cb39114d2372ca1d5dbcc3a1137cf9314a666349dd79b268be1f15100000000b17cb4572964d7c6d671e7cc67b04b9fb1b68b31e52e6b4f956f3a0b72ccc4ccc5244a4dffff001d057875e3\n+01000000f8d8634fa1aab0666f63fbebfd61e0ffc1dcc647e218414c528e17dd0000000073a2c54d536c19f0d09156efbad18ca6f96b1e9f3bc8490342958f24ed8fc32d28254a4dffff001d0130c923\n+01000000943aae5118b0abf4ff55e050b234c21d223871e815e9fae6fdaf693c000000006fd85c0213cfe9863573596a4d5f1509ac41a91b572e6c1bdafe46d9249a5fa4e9254a4dffff001d05878bcb\n+010000006c6040618ce7a449cc26ad0578a7c897b4464ee32260014fc5ce6bf20000000096567fa4ac682f9bec7e646452d3bd69088000b19bf7a90eaccc197b632fa79bf3254a4dffff001d02a22cd0\n+01000000c067deb4fa218c0f26a247766a969af8a475e5c88c004c300c1c69b100000000ec5a827a707edd70451f070665bf6a9e6f4dd8f815b0265296790f24024142b181264a4dffff001d00e76cbc\n+010000005cba08b87cefedceed1e60297564a3eb9e9e2bf942bf63f74fdd7f3300000000e3082dfad468d5c0c8e2f8857a999f898081c8cf59e48857997152445a57218095264a4dffff001d05a30a7d\n+010000001dcc225203fab8d972215ad2311203570fe49707799e6871908e37d900000000cea1cec6febbeb980af51f052dc20065b95b2d65520205616a95284480a4219abf264a4dffff001d01b05d9b\n+01000000644fa81c1f8c64f08712b41b616a24d3e8af833a4f370c188068133a0000000069f2096bbede7015fee2fb307f7d7dd084641b7f4af5c3074dc7b2b6df03277c80274a4dffff001d01dcf233\n+01000000ba750a8cc870173cd7f17dff4c23c228282d9aebc2bbd5ebd9449c7b00000000b28b51c3a1a322c8e29c2b6808ded7981dc085cd7fb529184eff6ce556e09ccefc274a4dffff001d02c039a8\n+01000000e0f40d912882e77044fee84e325fdfffbb3aa0fb1fe6ba864d5be65d000000006141e05ebe4e62fc76d0c9f1e61a4d17e6509209309f6fdbaab476fa227f1f4fc9284a4dffff001d0306d223\n+0100000003e8e5f89f6d5ee55c6e8ee0d4c1e88d8e4a3a5f05f0c9ec32d580e5000000004e2b02e05fea22c5067327060d3c00482569021252423d372cad30746408d0fcea284a4dffff001d0410f81a\n+01000000f389178af7b0ea88a83ae251392f7eb336771c8d7ae666d1219f2455000000005f98a8017e8458e6081be384b89f4ed68a6aaee5ac41cc0ad2331929e657deb27b294a4dffff001d04c90ab8\n+01000000d8cec9c7b6dd3093ad29b64c234258bce36693f87a4167d6234342cb00000000d5cfb9095ceb210b374686dfc11fb8d8c7932c30b4a3916c7fa4fa7b760a0831122a4a4dffff001d01708f58\n+01000000d850850454d9b392ab01e886bacb717a5615f8f70b6a4ef9bf788df50000000075f11e157a482aa640ea8dc7e038ffcbff0e9aa758ff092222fabc325b9c1a56152a4a4dffff001d021f806d\n+010000003cf1b7fbfa5978d5ce1cae5a5f454d41f840cebb72ad3d600f551901000000004503bb32aa7568d6abb1df7a05b80be6ffad47e5a55886488736b5c344a41d431f2a4a4dffff001d048df744\n+010000002d7f6a8f2dec6f914a7a63052facc546567fbb02742dddb150427ab10000000031ea5d7ad7f128ec4daa2855b7944503da503818a75f049dd6980e636aaf59af242a4a4dffff001d017a6543\n+010000008976cdb2c5a16c0929b45f29784ad52cf3db3035f112e562ed42447700000000bee2958fb6624ca2382e4a6a1bd7aedc2c58edcb7266a106c76d4504fd39eb89682a4a4dffff001d04d4a620\n+01000000d6d7f91896014f1f4419628791a5bc39263704165d3e14e23895f57b000000001ae0ce43e200fa010ca331ee891ce9ee93d468c602703a23ca2eeb693c1e05e1862a4a4dffff001d025a8bf1\n+010000002be250378c6001da52d435aaa1240522ccb14a94880ff0e0d1eee82a0000000046297804a9aabf1d08096b034a84364055573c45d09be862c33ae30beb3b5ab5ae2a4a4dffff001d01a34339\n+01000000064ac21081e5a5c6509f634ffae17551bd322e46d3396ac49b8d68b300000000d15854d1e5ba349daf72089f470b24557a2be25105b7831a3f18a62fb8bab677342c4a4dffff001d050c273a\n+01000000ad1cbb656f4799fd8e9de9acb70a47d589ef5311dadade94c494ff60000000007546bbac9ae1c8980da6e8c154b368eb4df305b6f3f27ff38f195a13c9ee0484922c4a4dffff001d059b5c46\n+010000009f0d835251ab6812b04939a5889a36d50f4d7486ef98a7f61e45f062000000008dab4ee487e33f872140c04372bbdb6c573b7e9e4ec31cb5d8dff36da17bd8f20d2d4a4dffff001d016572b5\n+01000000d1105edb3d0105e862f3bc95a034c0d0815a79505b4b68fdcce9083e0000000061573706774bc7a579a7968281e10612b4551195e16c8051381cdd3a6f93f479292d4a4dffff001d039dfead\n+01000000d1e7c872bf92ed9d9007926fbe72d976079ae35efd6f81ba4101a98600000000b4bbecee818dd986e5ab82f36dbd5ccc29ab134614e304c0a397e14082fe7bb73e2d4a4dffff001d00b8c45f\n+010000009287b073f80a1a91caa1f664b8c9c578837f878e6ff04108db28d9c8000000007dc81aba2560e72756db13b1e427c9fb4bdec85486c65da8aca5bf968a5bf51e412d4a4dffff001d03a98277\n+01000000a3f00f008ca15686450bda91266f8d01a99f345c7846e9e5bfcc2628000000005ac244c2a763cbc311a245df0d6f98a29e187165048a9da449d29edddf6b1923d42d4a4dffff001d02df0172\n+0100000012ced3b143532ef3999faae421b6bd79c8ad62a4dc8db862cb05bbf70000000060e6e42fad3fdc3d353a22f1699b5ead453eb11343a0e603ffd8c77cdc773be2892e4a4dffff001d04945d60\n+01000000f0c39624b690456af00d742f323762471854e1db5c96099adad5e53d00000000a2367f2d2214ef900583269eb812ed05d4a8aba11d40081eef999ef16af1d5ebd72e4a4dffff001d02d98796\n+01000000294a2e12b2716816a62d761c624248fcc10ae22cc1a80290432c85cb00000000fc4f1ed498c5f31fe90b10389f12566a3350a5080db1dba1f01f8834e5813ca9e42e4a4dffff001d054ad0b6\n+01000000774ed03a366b9909cb163ca0178cc6b42847461c4a672a537fb7aee600000000225666176205fe41ad268ba6f5d15633a5381c18fbb6cd2f83700ef928c58fd7362f4a4dffff001d04928537\n+0100000083900a5d5ac952d05976df43ee7e280faf6105038a4afa75c4d8a2a50000000091cd49f33c9f5b51fc61790d25539d2e896e87c8c195cf305b499bdf42e029a0d82f4a4dffff001d03994aeb\n+0100000010336b8cdbaaa1bd6ba9b1e41e85e17bec5b68bc8ff043e5731ed09200000000fc5eecfa90d46aeeda36bb1a2f2da61e4f9be81253033ae55625d00acb13ef35f92f4a4dffff001d049e0a22\n+01000000ec5b52a76675e3b1de2e75ad45d6498684a0e81092c5ee36e7fbf60b00000000474d71b72f905a8084842ce4202c2ab9795f3abcf51aa7c458349d21eb6e310498304a4dffff001d015d80bc\n+010000007af7e899b49494f77c351fe434981ad8b6352ad62527ed9d6d23a8a700000000bcc43ee02af281701574077d6916c07d6bd15cb96c623f6f304de260f616bd57ec304a4dffff001d03a0956e\n+01000000f22be93799f6fd1527bfa224601261300d38571dddedd804c0c7b94e00000000ca1cb89732eb51c0ace08a564445a2ee762a2cc819209886cd0a09993951544ffb314a4dffff001d03b10c74\n+0100000099146a7924d99cd7a2c1e17ce7206712a8349399b34ec98eb706d3b3000000002c4fb29a89bfe568586dd52c4db39c3daed014bce2d94f66d79dadb82bd8300024324a4dffff001d04edf452\n+01000000e5139dd4cf7511d9eddccb69d2c7aa0917cbe49eb660fe9293667aa80000000068e91b23282bef6f06f22e479587d03f6e1a2e4891b5d644541f1e10275e52e142324a4dffff001d03ef54c9\n+0100000052a5c0e3a6cc34383a58d939053af3261acf266ba6cfd3165435bb2f00000000a32d9b10b7b75323db98d486828a5ea4f9e7a2609b76e496f6d86e0ab13a31587c324a4dffff001d0031025a\n+010000002ed6742b063239cad1841ce6bcf676a59c66e65eb4a0ccf68ac4eceb00000000efbe4df65aa1137ba3efae5236178fe6646d6eb96a177d5394bba48066a87448a7324a4dffff001d053cfc69\n+010000004d4a3f638bb32808c3667937b3a0847eb780a3b3fe70875027adac3e000000000ecc7b73d8cd5d377d74d836bb6e3473478554a923154286ddaf6985948fd9d3f9324a4dffff001d05bead3d\n+010000007b86d803ae4a477ebf754711cab10b1b7799dcd50fdd6f25cec45e1c0000000033c06971fe80386570f8daafda6e4ab7e72a18624e211481e7b96633c625a52b3a334a4dffff001d01146b3f\n+0100000034231ba96cab51515ffaa9831930a46d1a8df9bb83d343690edd9ca000000000848736034ba62c9f4f3410b11d2a5ec921592f40b2ad6b1d442ecb3188049e27f5334a4dffff001d00a7bc36\n+010000009427d53219ae3be5d968cd3dbe9f52232b0b32f662bbf74b4c2cab8f00000000755e1e0417036010faf0520d2524c806dda1e3fce2ea99dd4e70a42efe44f64011344a4dffff001d02c03350\n+01000000db9740f3109d4450584d3223ec605be1f62457d8af2c22671b93b260000000009e93a056a6515e7916fc049578708d188c2146d3c12638acac92e0b72e076edd72344a4dffff001d037e783f\n+01000000de444daddd51d48d32e2119e59629110ecb69dda27ba85d7e85d40e00000000069b02fd420c2e86a575941a89e46d174a4e0fbc1379dbd6f6d88f3ee58613e5087344a4dffff001d001d016a\n+01000000a173420cdd0ccf0695a0a341d4f8cd0dc7cd8fd3aa3d01b68066561400000000cf0fb8b5f6fe33f698450ec147ef896ad953e677b4033e50400ec15454d3067fde344a4dffff001d03475525\n+01000000343f2b87a053dfebef86bf7108c93e449c6e289e71a75489fe6125130000000088d412c44abb44236383afd182862dde877813143d21d92a3cc373d4bd4017455c354a4dffff001d02b22dbe\n+010000004375b71a891e69ba37f9c0cc54373be6796f43ba90b16b12564414a400000000e3abf5981a1bd6457ec0cdcab76cc2a176dc0d7e16f6d3781aebc684f13cc4fd81354a4dffff001d00caa9dc\n+01000000f7b2f9d9a6f44012728b6e09c48750838780f1e1cac9cbaa09e011420000000014bdd0dbddd8e6c917324a49df6459de897031f514b77999c8476d287e47f23b84354a4dffff001d026719b9\n+01000000a688cd51d1d4a0cf1b438ae4347bd2e0b07fef348ddeb6a4168f71e000000000e7da7a46f5efaf4fc835468b21620987dbdf8b5f66daa0ffefcca5b0cae2e533a8354a4dffff001d0017ef75\n+0100000010f5b842b85241ab32f795ad605ee899389c64c77126503e8eba7f4d00000000df686a7f31c2c1de6a608553b26d6336434719fa45428eb3df59bbef75ce9e7ecf354a4dffff001d02e94089\n+01000000ee47f9bf0d5d6d59bafc6ade45ae6da0702b2ae98b792f7a6b95d13f000000009c13741588ce9e729f1b29b82823a97da91a3c6bb89d03c9b33c6cda9d71f0aedc354a4dffff001d00ab6a3b\n+01000000a0396d99b1042613554a8fe19f38a485daa2eb5b65f5347f3375a838000000008985dce081d487c7eb8f8b871738869922dd73120c75242333c45895bb91e64638364a4dffff001d04d09fc0\n+010000000787ce301e6110773cfffc92ae93a3e017ce136ac2fbe2004bfd06ad0000000069ed55457af8174da637b03acdfcaaaa36cf822ec6e72145526cbfc03a6a83f546364a4dffff001d02fc547b\n+01000000ae76485a78a7a225541cf8025578b9085d39b45d7c2f68669f05eb7c000000005ebf1334d253dd7a7ee381625bc200973e7af65a8a022de034d6955e37823c628b364a4dffff001d06e25145\n+0100000057ccd09f8dfb8ff31d4ec9e743ce56ed5c5c501046d709f49c356f08000000003f818cdbb02b1a468aa23e9795f7518ca5a92276559fc40bca459a79e010bee2f7364a4dffff001d04a53656\n+0100000042284cac669ab917936f5b96469048d55214c074eee3c7aec95a07f200000000334a4de0559a4db974ee451fe484a0376a44470a1495797992b9a6a0ec7b24cea5374a4dffff001d03a8bda4\n+010000005d820c5c53908a13f372a860b57050b9c60ac3360a7bc865fec2029200000000d29036af962f1d725133c89721cc7dea6d3cffda3a529c82e39397027aad7efbce374a4dffff001d02146600\n+010000003c3b2d4120567d650494757e86595b7e9c70223af627fa1857ae9cd000000000a4f56464ac27919b3cf8c9ae4390e679cbb2f878dd7098057431c0d92171fb29d7374a4dffff001d01dfdf26\n+010000007e74fa0f82027865fdf1aa434e494c2a60e6a9e1b70d2f7c4fc21ae5000000008a360dec0defc12a33c3d959a7ed168aff8e34547db15b516e1b8cca754c0de543384a4dffff001d0568ea46\n+010000004960b70d04579667192055ae5e019eae175dd65050e58be04d10b7f5000000002eb73ccd1a64ddd448405955586fe5c95bc54928eb34679f74bfb4c9da8e1b92aa384a4dffff001d00cfcabe\n+010000008954c37766bb7293e105c476cf2b320cf9932b9543b1398823757c0400000000f85f4ed98adf68f14127aea968a338f2109597b484a808dfc8638112ad0623428f394a4dffff001d036b2da4\n+0100000052d3ed4b6951d3d5db9100bf46b7dbfb177917539341431898a0aa5700000000d226fea91b99c5a31a034d340f647b722e50950c96a876eb96569efaeaf3b227a13a4a4dffff001d0051797f\n+010000002d54616f93e70461538548ac861c860a8bb9077c3452be5b4c00d4c5000000003f88cda74f26fa4ceb0a97161e771a8b1f6caff1069f7b53ab49386916f3820b213b4a4dffff001d024510e3\n+01000000e226b7f57fe7d32fc6166057172a4c2931bd4bc3b619a036df08c95a000000005b7df01117c335ca3e8a802376e171e537f090dbe2e3bd1fc291e45e219a8717323b4a4dffff001d05d6def5\n+010000005412ebec87fb8c61287f1d2fa1c52617ded826adec22368b84c42bb5000000007992420cd0f0f24840c8d92a4a865e6c906e473c23f1cbe3c183de70c2b2bf42453b4a4dffff001d02a246ad\n+01000000ba24ca40c17418d7bab5a3cac3c0bf00b9d3a0c09ec5771d0b14015c00000000a30e3f1429bf2a8ed14ca6ec9f3396b8593b8bb6ac1e4d35bd435f05058094ea983b4a4dffff001d02c75930\n+010000006e823e852756b7106a0ba02b1b51045d87582001c006a2e8807cd612000000003c11b146d43fd62ec36b733942a52ba0c352c95a3f078808a38d080898cb8330dd3b4a4dffff001d053f9e6a\n+010000003f03adc125b43a2c8cf9d47ac43dc81fddbcf12ffccc11ebb226520300000000b17c3beacfe667f4014c9da9057fdb6252978fa76dc4dc2d9ddef0562d293d39333c4a4dffff001d0467b375\n+010000002bdffedf5912eb0e14baefa637c22cd523c8eb4147bb111db143ce9c00000000e24fd45c98a5b07ef9b236be48aaa1085b1bdf993a1c0db1dc04766895b8a2fb813c4a4dffff001d01c464fc\n+0100000011c1b397772463dcb8430f661d548b3c55c61d415918681d6c4d4180000000008c32f04b4b70f43c849a8f424c3a82352cc0bc6bb25b2c2ec4a039964ea563c4893c4a4dffff001d05292e68\n+01000000a0e705a21be059d1f8780cdcea04e7008b7497cfe8faa0fb59a666600000000059f060dbd892c1499758c7ce9bf8779d8e4dc298484ceeeca6467c17769fad5ccf3c4a4dffff001d013a65ce\n+01000000492c5c9b8543822db5ad8694cce758fa2019bd5b6f12db4160bee95b00000000f640c60ea438dc020048599869836f5323ef47477ee17caddf076ed428898f71da3c4a4dffff001d0065ac66\n+0100000095e3a7f3bdbcfd7a40901eefd95edb7d6d60562f6a427f7986d0861e0000000059ac3c37adfa89b9a907ef9d485c57262e9283e1eb96069c2de04369ef1b3c76e23c4a4dffff001d046e85da\n+010000000a3f0effcb7af394aacaaa6e2383ec478034ae4ec4d488e47153d21000000000e25e353605728130ebf943b1f468937fc489589975c13765fd677e5050b487df2f3d4a4dffff001d00fe3805\n+01000000a1f0d96d647241f42d4a3e02ea933690a4cc33542ed89de511c914c600000000153aef1fb8837f74a82054a0d9df9c566ea9d50df292ff62288082f311dd4212333d4a4dffff001d03d34187\n+01000000f78b3189170c0de482943849707aa16247e5d62772953eb54bcc4d9a000000002183968b34446981f960895ed3713dd60fede3a9eeba1d40389123c6c409d3ba6a3e4a4dffff001d03d38a89\n+0100000059835cec3351179502bdf8f4b0a0542d3ad336e22549c2a78f1af97d00000000f7f8e1a8f0b4bc0337d67fa4a2fceac7e83adda354d6fa3ba18dcf7e6fa2f2b2c43e4a4dffff001d01558b25\n+01000000c6a2e4d395a1899b4be7d915c8dc660efc1298a34b66263044f5a5bf00000000e64b9c2a409a4a1310fb4b4f59559f79b15dc85e686eefc07b0b0a6b7fb6ee5bf03e4a4dffff001d05113e7f\n+0100000067e62d9c29833a10aa99f00514ec678c06a234e05f5a1de4412988ce00000000e4a12fde56c03eea1acb5eb1b57d35ab1da6e55d544e8212c47ce277416b1b3e0e3f4a4dffff001d00652740\n+01000000d468ac8c936b469fdbc0510d88d031ad3d22c3858abb8f89184f0b84000000000fa35a88c8fd0bf5897b921ac75fac304760f6d60ed2355cca82e689ebc0cd53513f4a4dffff001d0405baa5\n+01000000d69dcd4cfb5a9ecda166293b3c0bd72e21a804b3a565c8ec4783f8e900000000b3ec99d78bf68d284104779999ff447ab7bc73a783e9fab814c6741e71849cf0d63f4a4dffff001d0355fe58\n+01000000a4ee15d19e3a355d221af4e4d6b69a84510a60857ead0af7e3b086c1000000001c25b8c364fd6f8417d45b9501384908824493931b544baabf2299e25277305540404a4dffff001d052500d7\n+01000000deea32ce4f7ba1bee123958ad36ad37df8d53372f518a88761d14ff600000000aaeef85b297622ecf311dc5d29669fd4e3863454c6feea361ece4f547ba52e6a96404a4dffff001d03a82644\n+01000000b8751c32196c89a35575c5ea97c6395e6dde705aa771287c867b909200000000cad183a8636b222a8ab775d34658b1de92ed57818e26203ee43ffbd4d8bef95b28414a4dffff001d0587f431\n+0100000035a68fc6ca182ccb6663ee8b7e44556b950a8351bf2c64cd75dc2d0400000000d59d2a49b1883c6f7ac68a9d2649dc0dde3f0205e19d8fdaf8065381f9ba61cccf414a4dffff001d0592553d\n+010000002e5b592b34f37b1ae9fe17aa093d2d9c815aaafc5ce3dfb8b91e33d200000000a2990b3a24b766c99702c1d157925089bcd0d377cb70cacd30be33a3c90bd067e0414a4dffff001d03c217d4\n+01000000773bd09b330364f704d0b3fa46d8431c5572a100faf117958fc15a3f00000000e739176d62b588566afa47f5fbbc0ec01aa3f058c036ca0ee8f3cd13e4223e01ed414a4dffff001d056b45a8\n+01000000e9aa44db469453b2c657b1e4f3e29aba0532b1ba7ce4a8bd8dd00c4a00000000fa5f2cec2dd5e7122182c8e4b2f10a1cff77ce7972ceb53308b827aed06751fbf1424a4dffff001d00523f0e\n+01000000337df8fe8603beee390360abeed7e956a280fda2dd5aa238e110de090000000071f85d3e358a18a3a3465a1bc93f17e7725549a9507d1b218dfe6d1dc349641e9d434a4dffff001d0042c372\n+0100000048bb0f9a7dc5c4fc15e8a4c5ce0adefc49c10db0a582e0476c1498ea00000000640a330a8e9f920e7684276e987d7f5a682838ef8510fbfdc9de08474ed3e74ac5434a4dffff001d01a51ad1\n+0100000098349ad38c19d6e481627c6523d9d4f52c031525b8660ed55c215679000000008c06f072a655daa64b9910b1894ca250077f930333c0281c843a1198a6a0924629444a4dffff001d02e40f45\n+010000003ad363a33fab1606f7a32896d093b06b84a7d6e9784047cf8b9bc953000000003093ae1fa781fb09af9fe147aa05ed26e90f6e7312a448e934afcb4554d74c11b2444a4dffff001d0029912b\n+010000006b8abc2fe01dc3a118f4d18c4f0b36b640fc85987db55437099aad3600000000f2e0926ac96d0c8010e095b34c5089f549f2fc8fa626e20b2f0b68dd46a72c2c06454a4dffff001d00149193\n+01000000665559872e38dd76cd839459a94b0f6efeaded839d785b2c43c0be1900000000c305ed4fdbd3a11585c8805863472f53be7fb65b7b4404a688c070e8197bf40edc454a4dffff001d01b3084a\n+010000008fc81523766707ea9cdc7926f5771527eb6a5e6810f86a836ec81d5900000000408efc695c947acb1c0239a9b011d77e55b702fe9c2f6082571ca3bd9ad46bccfb454a4dffff001d05bb7361\n+01000000efcd6d1c267d0b764044e85d112b6a32cabb8698bd13b4e947c178ed00000000fc53d40de77f595e1419b205c2dbda50be0a5595c45e001f8dfeaa8d3f19d90f1e464a4dffff001d01fe7935\n+01000000339acd071c0a09f678896b302b2c79833152e048f4536994737db5f5000000003c651e6ebe94d51b8d1d1542f3b43f0c26298e4e5c8fb3d275e4e13062800f6c9b464a4dffff001d05eb40cd\n+01000000ce3f890a2580af6e15d0305dbf50d1fdce03678b626ef2c6f7be3c7a0000000092b0e20be269413c7f519a5e7fc316074aa24e930b8a3edb8a618077567aa832ee464a4dffff001d03713885\n+0100000006f4241b0703e90950c5ec74c3e033c39e7b0c7b9b877d5515a6ef9600000000eceece737cbc2bfaba21cd1cd8515d614c2a39ea26d9b41b7daa77a17dd5ea5121474a4dffff001d0326e2f6\n+01000000e65e080e4f1df42a905b85fd5d0f0b2d70f3e987e0fbba97cb41111900000000812ce3ea678b31aafecb99db5b0ca6718f9fb3474e0baed35aa6aa7290f5a40972474a4dffff001d043e313c\n+01000000ef823ae34b33e5aaba6945f46e6c2bea1df86769d877ac0b8ddb0811000000001962162ca36701e79b5ee44367d46a8ad8421b1f80aad651a02022a7b9e1e0a3a2484a4dffff001d0259a126\n+01000000c65b1537a27f39bbe1a2884f77807c958faa56f3819aa5e4d49472bf00000000ba78186dcdbed13712e6c29812a54fa620fca9ccf297b8219f7ca736e36e46b7df484a4dffff001d036752dc\n+01000000d48b9919f537d161b9ba4404e9ba71bda419efe7173ec3569243364a00000000501790f1566c93f0edd817937da1e287147de7bd62629b65b395935017fdc80758494a4dffff001d023a2b4b\n+0100000083aa1f8934efdf864a78a3594d5c16f7fc8303fa38c01cff7c0c94ec000000005f8a10b8f3b9a4f159bb071ed05f349849e16774cfd79990af242f0ff6a60ea5314a4a4dffff001d04ad807d\n+01000000f699462ec6c1179023d1504bd5b9510cad887286984b783c943a33610000000074895c719bedafb41d7e5833189d876220fc5cdca55c6ad4b94a971a8e96a259374a4a4dffff001d002f84a0\n+0100000077393e4b34076f0a6b6aa9350c799c7b32756a200eb1a7619e1b036f000000004c6b88dde02bd09335ea8bfb6db1e0094a58bdcb59d5ab78303034ff972b8538484a4a4dffff001d013ccb67\n+010000004828e19e639deeb00d55f748421f46dc94eebd75e376104740535adf0000000014da74d7e2da39b2b2d676b957e3edc3619f4999922f3fa66c95b64be8fd92a34b4a4a4dffff001d0260001e\n+0100000092f7a9432462b827705bf9b31224972d61cc9fa8d478939e015ce3540000000076cf4d344b2c5db45b55ea38207cc477342c74b993c401b753378509761729637c4a4a4dffff001d03396962\n+01000000b87a944ec8bbd6a73f5a6054efcea696124dcfacb88876995bcff95d000000002dc8a455f4bd8723a5d58a675c5a5e833ee411490a443f6d47f08a6fbf7594a2024b4a4dffff001d03699294\n+01000000bc2c1291105e0c6209906934c0f1fe57c4ad13dd74e43830b293c6ee00000000070ef89563a7d8b1c7232b9e391813476ce93c9160051ed55bd396c6747618ee364b4a4dffff001d03bbea80\n+0100000062db800da374d1b83b1b460566da0a35d277bdec5a6ef743132b2499000000004af49eb22a467e87048f4625dc9021249c16561d372366a21e8c20cad2c65aaea44b4a4dffff001d0142e34c\n+01000000e09e577320f539aef8178a3ec09dc306b301acf52e135839fb3fc55300000000734d92340bc4c287b0ef2b88001bac1f41bf5c6d3c725e0fc39e7c593d6ebd4f9f4d4a4dffff001d00bd8009\n+01000000389998eeb4bc9b68abc63e8ed99218d00b857dcc5591966d46af4eb500000000752857853f92f5ca863f3254bf18ec5e3c62e1223c3f7968894048d40413daf3e64d4a4dffff001d00cc8cd4\n+010000005faf1cf2ae1e1231a1b5aab191614ffeeec0ca86d86e105233c681230000000026dc493ba668f17fde5156a19662ca1a5bfd93b2376edf51ef9e3d623e4ef4a0f64d4a4dffff001d0183b4ab\n+0100000005bf42fd63d8189e37f471cd3e8a411bf81b4ff8e65532897b755caf00000000e53a837e9e3c05a4b635531c91c39c3c45565dc75e413228dc93d0c764327f86154e4a4dffff001d036f8a98\n+01000000dd081cffd3a2812f5c770b8e79aea5e63d67b972ebb5d9dfe8cea3a9000000000803c135f2c72cbd06b77cc2a2a13a3c063028bf4b188b4760bafa112e71e579f74e4a4dffff001d05fe4d4d\n+01000000a9496d62f029c4b765548666b71a84adeeb9dd5674148b708b7aa70e00000000ad1924dbb0711c96b12ad1376816374008b98ffc43677b0990bca7973432f814334f4a4dffff001d0190dbb1\n+01000000ffcc01d81e891bb248fda71e6338614dbea2d46b8e5f71460e6ae2aa000000005510b8c188460a26868d9bb3fc9bca7fca4d9b20f573e182466398f793d5ea8e44504a4dffff001d004f08f5\n+010000004300ed388b39e36268421a7b15d337598edb40c8c290166b4376f2490000000054d4f73e569ddc7e67130ea0a43a352064bf3ded26f80877536b0e7277237a7857504a4dffff001d0268c158\n+01000000d7e1a7d5fb8d460e90f62666eb9891f9fab06cc2c220899498cb01ec000000006a6a5be5a31aa8a7ced02f8ece18f44261e96ee9176b772fe654f1764cf6a4fd89504a4dffff001d02c96f9d\n+0100000049599a3ddafecc620c9ad61cc4520a0c70fae3d34dec595669587d260000000018073767fa7a1ef0c4a570f373492a822b5fad5fe3092dde239bcd8081fd3e8c8d504a4dffff001d000e0681\n+01000000eed0b252aae103849e6805f28147abd17f294fe55c5c2d966d8850a500000000e15a0907e27914f317962823d82981df6f2dbd256738860027c740ac3f842bcba6504a4dffff001d05ebd48f\n+0100000031b485a9bc2b16f2ae5108ec786708f3f14447551e7f0f0a8575c75a00000000f6dc88e1c894cf88e930d30adcab0380af8fe00c3ebce9969c0e43242ca422b372514a4dffff001d0103697c\n+01000000ed18faa5febd8be98c42fe2a1a5dc9e8ddb6a618d0a05d924c522b4500000000811cb2e938cc88f159a82f1e160d80f4c6b429ef51c63ac9f2724810ff7694880b524a4dffff001d0097c6fa\n+010000008738d8fc729ed970f5223d77d8e776d5e0569ef2385a33596dcbc77e000000000bff98f2293caadd5f7fa74a7c5b3e2399268c171e5adb490d8e1dde1d4926d7a0524a4dffff001d02132278\n+010000007ff2786f280df6f5039bfcdc1d2d18eab08e4120a5f67c769b8b464a0000000077b5007a1d08cd2a6abe2cb56a279ee4167092775aabf4245a55723455f7297059534a4dffff001d03c30540\n+0100000002ddd5983c40e70e36643ebbe8567a8c115dd7a21262b8c61d693acd00000000504305d5fc375c8303ca009ce2bb783798b303208c8744fce95d0656375b682ab0544a4dffff001d0483c2bf\n+01000000bc5ffef87baf263ab01ed870a064c46731fdb99beb941bb6ab73fb05000000001679c9d394f4c959d3fa9e054a4e89af624f9206a777368a00d1cb6b175ac5f7ce544a4dffff001d02c1d1b7\n+01000000a0fa21e1683774f057767d4545610a63a4c0ffdb774a6577224116cb0000000025db6d92e12ad8376e7e37c12b541faf358404c4b5617b9b287a43c2db4a067b6f554a4dffff001d04cfae4f\n+010000003abf3b8f61bdfc588bb0440b0f61cc8894cee1291298996712b3e3c8000000009160b7843ed42d0b5ba734634abb2dbb231e68bc37a1d508b2f27ad88d040e3e5a564a4dffff001d00028074\n+01000000f23f3229508a7b80a755b69ab0dabb405f5eb566419eb60e2cc1ce780000000015819a3494e7b49042529989b007e8f89a6f69f6d22acd6f0132c270923a192eb9564a4dffff001d05ecd17d\n+010000005fc1bed214932ceb26a0a81a4dcc6fe290e5b7fbcdbc490f89c310e900000000c6fe4434b767859a8b403df5f195e223e622058ea98abcb0517bec7c5a734fd4c4564a4dffff001d030425fe\n+01000000390b6d99e31e1f64e6c16a94e7fed310d80bcccf9c7f9e82fd8bb1120000000012d6f8906065837ccd176ea73171077e73a29257d7e0309377e710ebb5629009fe564a4dffff001d0391c3f4\n+01000000005ca35550b9d7bb3026a8a9e5c512e0c4714f11e3066f99be7323100000000045ab4575f33ef6bfc4b1c9fce77ea21cb9b606acf2b9a0331b8f9f931169fbbc64584a4dffff001d03f6a4c3\n+010000007f0ab1ef14e058aa9823bc23ecaefb694cabcc7de8ca93966dc1cdd300000000272ef40d0354ece93dda9c8370dbaf29c6a2894fecd84a063c5d3de0ba90a088de584a4dffff001d049fcb9e\n+01000000f6707f93948703990287c88f79c47c2171dbfa2890d69c742ca6dca5000000001f75bdfb31993e02ff9de178dd3f1d765fd7bfb4dc87280c40f21270d7384df6fc584a4dffff001d00b0d294\n+01000000096d0d56aa45bfdc9561a804aebf045d86dbe4538ba8abfc483800a9000000007a22463cae54d2b07238b58272c2f47c7bbc3bfc92a15d836f014d34160dc3c10f594a4dffff001d03465905\n+01000000edc840e0c2f736161507190b975b87e70ee7842a0449b1bc785975070000000073998e2bd1d6f08ceccde03077d9d86adda70cd56234563c8d37e275767765de74594a4dffff001d03c9895c\n+01000000fa8f5340eb43544d2562339f1854add2ca2336be9ef3f1659cd2b3c300000000048d698b6d1dbdaecb6b5fa3cdf3c0b06346e43c2aa592606736404a17c7080af85a4a4dffff001d02cc3a19\n+01000000683e618822053eeeb0d0a85cb955b3eff25df82e41beb94adae2e81600000000ef84f5c1c80ce84101f205ed007bef67688a709a1638b20bdec8e2d5404820f6cd5b4a4dffff001d0004d110\n+010000001a4ac80ae8fba6ec44d500b823515af90fc24eae8aed36d88f73b39100000000d20b7be0fb4d88ad841c2d111b49b33e7d3b786ab431f3b32e6a75d2cb8299bfcf5c4a4dffff001d02b5e1c6\n+010000005d8227de291d61223a71e9c11f27298dfda9b82538dc67ecfbbae9b800000000f75f109d50bb4674cee3023c0780403b4998067852cdb56881e69c4412c445b2485d4a4dffff001d00bd7afd\n+01000000140bf311410ecb5324301a67d5303bf817dc0401cb674e1c9d2b05e600000000cfd1b67825492351322e5e64da5db259d9eb1fa2b309a9917c921685232c9435775d4a4dffff001d03dbbfd3\n+01000000a51f6b0e1785a625b71505e4c9ffe60acbae34d5a8e463376b0dd37100000000124c2dfbc87a28fbf04646cef5ecc103f568b8d28ab19661327995a7389d7325c05d4a4dffff001d003facb6\n+0100000017b0e14d03cd3cfd82a7e8d54fdf338b7679ffc731ee9eece8d10b3500000000c96f851c0cf08646a15dfc49640c994343795b9609e87350e83f7c69fed804eecb5d4a4dffff001d0180f4c6\n+010000007efda66c68e131be2f78ac7331d1d50f0203205a1532e96bebf3c3a10000000075eebc78e8a107eeb04c122618d963c038a00c956a67fe0c4933351c92f68def235e4a4dffff001d03a98d25\n+01000000528b90ace50435d962ef0e1457a28b1c140e887060f6b277b37211de00000000739c079a15781e97e60a15e05212ca04c97d6c7509737d5daacdcc61982672e8355e4a4dffff001d053ea865\n+010000005533106eb5b75af3ca4e3fb1196fa4c0d4e22413617c385e4ae0984d00000000a6b546b2b262c57c6691555d6f2720383c481ad64f7525c0c266669014632fa2ab5e4a4dffff001d01af78b0\n+01000000c6d164638ea706719ccf9a75c7b1cba7a4ab982815490ddc3b2567fb00000000ba99c12105363f09230c6331157d8cd67336745aa9e0ecc46494634e26f875439e604a4dffff001d012bdbc1\n+01000000364f362c384a75bde3177d475a8c85340d4fd4ab0ed0b30f17c3317400000000df6d00f0aa27587fab36da531d0c21a27e8b9ba3e7be77a780dc8277fdadad078e614a4dffff001d04ab300f\n+010000006fe6f7e2e0d1df2b6d71c090c4fa296a2d7d175c9b7853851d0fb03500000000610e56ccf020380fa1918b77eae3eab93231c4bb8d741efdae7c5256d7f01604d9614a4dffff001d032e0df9\n+010000009f469645bedab4134a07b9bf6108960de1a2ddac68d59eef58b493a400000000faff99059c41eaf7d7ebdd38efd9b0e5a3ceb2ecdbf2df4b266f4bab573363371a624a4dffff001d024ad9f7\n+01000000d4767418fc518c1dad34cddcdbaf06e38a73f680556295a88bae600100000000be0a584aa45ca81a0ec8e4943b91a7e3cd4b33fa67da59db3a15979326eb5e0973634a4dffff001d05e4339e\n+010000000bcd63dc71092a95a3cfa24deb7a99c097b5f74ee21389f4cf2cec0600000000c590cf15019323e3eef49355d341374d4eb747c85118d2af7ccf749bd6322d81c6634a4dffff001d0453fbbc\n+01000000e244d491df952155b701e23db092c318752154d0c94b7f1918c139b800000000a7f1371e40c1c7479a0182184e7858b9fc654b553014683443fba375927f9d4f36654a4dffff001d03e0298c\n+0100000028836ee71421916bfbb216200b5943426946b65d28ead2f6f6b639f3000000000494ca74bd3ac3a44c3e8d2bad9337945f89e45eb63fee5b9860d46a7d4c9d893b654a4dffff001d00ef98f7\n+0100000017116f1db86d264512d1e919a74da904290965abc0492169532572230000000060081ea832d5c3e9f675736cf23993c36e8eecdde049a44fcf955ea24e7e9366c0654a4dffff001d034412fb\n+01000000e79cb282d213491706610e7fc8b02ea62a98e437829b076db087e081000000006fd1b2d70cc93f628dc0f1ec50b4fa820007225cf827e3f94aa581c30f5ae51528684a4dffff001d02c8f506\n+010000009539a568fa254f13b10401a64dbf10d2709111822efb587824955f8a00000000a4cc887854ee5ae17aee01ff839bc7cf869aaea30fef9c8782eecf239da4e83f30684a4dffff001d03f4d7dc\n+01000000b021d8608d5c1517ed201830c7ab24f957ae2d71794ff149c7d11af300000000e58177c0a9f4858d209aa9008b6fae86b6b436c84c906e5faae402e0b14093cb39684a4dffff001d01e43108\n+01000000b9d79c9f24321d231a894313febb7c5c264796a1bf60815a0cbcc96a00000000951b66c72f193f3b8374fcf39baa8183795f647fa69a5b2e21ee6505ca3ffe2ba2684a4dffff001d016977c7\n+0100000083cbbadd846fd2fca57ab49a7f4b5ad6b1b64889b046ecc00424fe15000000002e26a89403d2d4d2c0cd13b959f9b86c6b6baee4ad0d99e6d04ce21995039981ad684a4dffff001d05ba9aa4\n+01000000e435195dc29f89337100e0c2e80944137d2ca37e8e00256fad8b3bf200000000a644a58880e151d73b166f2ee7264025292968dfc2ac6b19516b9fea051a001b3d694a4dffff001d00a59466\n+01000000fc27d9c3e7632342b188f423df64d41d8b8ca4c75b7d8a47fadfb13400000000f092bd85e17e84ee69919ffaa3a1936fa24ced5b3d0d0ca073398a256c5293dd4c694a4dffff001d004914dc\n+010000001dc0cbac620aa5469e889e5709b5ffd3dde92cce25715e084d2265d000000000bb549c5ad4bbfcde450dd1998da568ba168ce940479f92d795235e95ffaff538c4694a4dffff001d01cf90a7\n+01000000403be502a01dc5d45288d1f305acdc9e15cdad638ad918392738320300000000cb513c7878b4d2c2376dd1a8d91aafcbfce7fb3ebe6bf419ad69e7408d8e620cf2694a4dffff001d0000764d\n+01000000919b3148b047d8639e8b46bcc4845d91654c03c6249ea4c443e9b99d0000000061a3e0d8305112ea97d9a2c29b258bd047cf7169c70b4136ba66feffee680f03b56a4a4dffff001d03c843b3\n+01000000f90755f869f150d7c4a7191ffb3f74cc1752d0e1c8fa6ea51ed182cc00000000cbdf8c487a3679669f416aa49e20d8665e75ad2895d1256589b996a7f57fdfc6f76a4a4dffff001d003cdf61\n+0100000047b42b4f634f26c6344841cba855c2cd7ad377cb35a8774e5e7f58d000000000cf16ae92ffab695258610ee3db7e1681447afcfe60c28ab3ae30e3ecc06de718036c4a4dffff001d036703df\n+010000009c57f3083374e7552e56d053b0f07fe93a47f6a30430fd36eb40b5250000000017eec598976bfbc55ab4c5d48e00162f31b6aca31bc42ab7084f1f139049b2c60d6c4a4dffff001d03b92cbe\n+0100000087de9b5ae134e6f3c94361941a079bc41b84ccd02a3416e43369ebeb00000000a0fed8fa4afb32368c57427cc0d9b44869fe8faee44f71910e9408636b82f3b2166c4a4dffff001d02379365\n+010000000d544d94180289b766a4cf81e3ce5299f938c7ca3f6956424558ea700000000016164d5a284a0b308928c567c1db87c566e87d1f4810489c8256edb290b21512776c4a4dffff001d003abad2\n+01000000555e499668283fc21cbbf2d5d911334ef50c6a58264fe4a9f1c7406b0000000042bf33d98dc089614e3ce83d39736949489ae64bdd1fc477f451c2b6b523c8b88e6c4a4dffff001d0210c9fa\n+01000000fba43e3e3dda545e1f21d1743123d5b717b0ca9c3b6bab06ee978fc6000000007b3e06d1951308c10625b2c7eeb400f1d9de694922b34bc48bc31cc57945ed609f6c4a4dffff001d0256b7c5\n+0100000046b8f387b47ed742c035e8619551c1ed480d111d4e8d8fb231265fb400000000ebe3b715280fa9cb3a6de1d7ed2b27c7f769fa8db53956a443bf9fb8051c96502c6d4a4dffff001d0587e243\n+010000009987e9a48351803b25ab0eb6b84ef62d92e33a73b2133687e126c09d000000001460afd3c98403c75ab5858f765e6bdc9a91a9a7377d64f262b0c4d4764fea93936d4a4dffff001d04816e32\n+01000000f38c31b10930176f539d4c5c54f22a4e65bdf568ca89ca65518207d300000000ca13d344cf8d51261573a71698c8fe10b7e5d9f7134ae4e60682ff793b1b0278cd6d4a4dffff001d028a436a\n+01000000f0cc611660dbbddda4cc05700f1ceaa209e1d9e166117e5a4c2748670000000014f341b19c7417fc5b4231ae70027556174a78af7e554174541c36e2e1af9265e96d4a4dffff001d00d47799\n+010000003f732830a72d4d1043e43e627abb770e9586c38b530c03331655c0b400000000a28bc5d7b507b81bd9208b9e304460a400dab435a53afd843782a9f9e7ef0b076e6e4a4dffff001d006eba5c\n+010000001c219fb9bf6eab86c72b3d3bc789b446d5f214222d91c752c4cfdbdb00000000a62967c97b01f47d3a252fd612e772eba117edc1f6033fafae4fa66eabcefcc7096f4a4dffff001d019c3e0f\n+0100000006de9b309fdeb6361b60029f1c7d6de6c99ff2819609a8c236d9feb300000000cbac2ac965c6b2ea471a630cc99ffa835915fd914c107b2db2dae5050b2ea9f36b6f4a4dffff001d05df3994\n+010000002b59084f6b07d1210181294223741d72117914a497e7a07d0c730d4000000000b3ff096b0e79008a55e1816779ba4811e3ff6f3a064b6cf84bb4b1dcc433890cbf6f4a4dffff001d04090899\n+010000007001e49d2d872afdb4cc1836b2d91ea483fc7aca9abed6e2e78a8438000000007444e881fd0c51e363543a35b27effae3cff02aa828a8de3c37bdc2db2b090bcc46f4a4dffff001d016b52c7\n+01000000d5c3785332c02c192281491fb6b1af615bee7e2a2fcbbc124ba72e8700000000787f53156727d75d5b5a8d88aa93400ca4d53b9d90ac33da81545750405cedd3dc6f4a4dffff001d034694bb\n+010000009309d876716d2ead60108db4f93782659182759f0b351cd92ba9644900000000fd05849b870af4a38ba121721850a8cd344ca95c3aef88c1ccf25288776264d0b6704a4dffff001d00d1727e\n+01000000e9206fbdca986700b3747c62ab8169e60181ffdd3f5ca43923ffe8b900000000e08afbe6f2f42beeb5891d78d6774548971dcc9b3b7d3407821e3df29fa1aa0fc1704a4dffff001d045d66ba\n+01000000bc31e83685c5e76b127e81f12e8867ab8342c02ca51f137a6abed1b3000000001e6e383300d86f0ab1c84d68a38e3a64f94eda07cb5d7b6b20072cd5a610cdaa42714a4dffff001d00cd948d\n+01000000048a5ab82d24f3dd8bcf472d9081d4aaf4f16a16113821e0ec9d244000000000c1f04bbd361fc5125d1721c032aa88337bfdd16267b16498a8f80f00e2d3ab23cd724a4dffff001d02989202\n+01000000e891684a9cdf9608002bb1861338f42e0a42ab96d9656f9f40edd3280000000055248a96fb577bd5c2c929f6b0c5757284ebdd13d09200fd4c342604ea3e5ccb7e734a4dffff001d031094b0\n+01000000904984b520e8c777654412655520279fad1f546529d4b255136e42430000000035c50c2c01355804c412bece60540459c86d4a93f336396a664e88acd642347600744a4dffff001d017ae930\n+01000000a31367e28327fdcc4b9c28664e5aceff0c6439f86378f8d88a42017200000000c26f017904f09d6c5cdd1b33194d0505a594a6b37ce0a7635ba56ad35e63183f14744a4dffff001d023e46b9\n+01000000e78b13a567fa3b7f4329ea4a3700acba52539ea92128bd929e05853000000000980fb406fb9cd2562abbcbd3d2a9698da8aeb255af37c1237a552dbdddabc17d39744a4dffff001d057ca591\n+0100000085f94fc42a95c9958bc3e963daf2c1550d97ca945988180a9fa276d100000000931a84625efbff3f1fa30974dc3b58d89a3a6c8c71b673e6a9b84e659fd657d3dc744a4dffff001d05acf2dd\n+01000000877bc8f841c9fc5f943d51655b089a4d7f545cf233f7b3289d6b113600000000d9df6431534132d6fa686d7496a4825304f8aca55654260c56d4edeaa4ee7bbae2744a4dffff001d05c15bd3\n+010000006730e2f111da5208e30dc182cc59c9318675812c24b596e3e5398a4d0000000092c49fe9e2c4008f430cb72949871a174abca604b3e4731d51dc02337cda177ea2754a4dffff001d059577de\n+01000000a924ed313100b3de054fcb9e9748a12692e0f66d375cc05e01f163760000000039cbb3487e69c00c58056f6cbb3d5a3c136effa76d0d9f0df9fa8963ac0a197bd0754a4dffff001d050295f7\n+010000009d977cb94b7caab58fbe8bfb6339a7bc09dc50a8aed9dec7a624e25000000000a1275135d09b38392ea718c862397f389bd358fc242242072db18a35a211ca93fb754a4dffff001d025f7654\n+01000000f03542a950904c6e1ff7e8ddcd6c53a9438000df6d3846300afe005a00000000ba9ebb9774f0bacb321c7960e0e13443d58270ddc5493313d96c7784c47f1ae4ff754a4dffff001d042989ea\n+0100000092f5763855630332ff4790e27b1a8a37975899d435190bb50f8448d800000000c0e15d72865802279f4f5cd13fc86749ce27aac9fd4ba5a8b57c973a82d04a017d764a4dffff001d03bc04b5\n+01000000b2dd87c5ae6f6368f5c00991d7d900c14441b315e0fe3cce598cf0a8000000003e0462da7bb4bbbf44948d8cb4af46d7fb0017f598329f2139f52c76a433ff819a764a4dffff001d01486ffc\n+010000009369370b1d364678e42fbb797a4ee0121fbc3916e5cffbfc5a8e1a620000000031774efc0e33444c762baf022787fbede880fdf466dfd754e3e457f4afe839b32a774a4dffff001d043d36f6\n+01000000514da16d5dd2a4f82d4e52941092e8508c4cb7339e4895eb255cd87d00000000b6b3d4911dd13b8bb3d06b75eefd834250ee263cec3e94d9b4c93f600e1de90f5f774a4dffff001d01e3c40d\n+01000000f3a31ef7b1009ab512e3f3f03860dec8a09c3e7ec246e75163708bd80000000035f2a99aa12f8fa65fa0ec244ebc42cb7161e80bfcbfb1bf3bd89c3585368fe504784a4dffff001d01275ec4\n+010000003526d4c92a0e4a1ef78043d2832b94108ae0d3dd21f7738e2033f3c700000000a5ce8a4c43d3b59b6fdc38416eff39c2d1068817022c79a4426b071b85a30cfdb9784a4dffff001d0052c6fc\n+01000000875794831d6f2c236759cca424704c18b8d89ef9f39347aa4b4fe46800000000dd4ed8001a3ef95027770fea474b5e63fefb27ec2f6b8648865f15e69308ff8734794a4dffff001d004298dc\n+01000000fb0922edf49601327afef737beb3d683f98b19d128f1ae64725b5abb00000000bf3d088f283f962487807e618960923be192a236beef35f4392d7ecfeb6832ed38794a4dffff001d049e4ba7\n+01000000046dac6511ee9b24b34cc63cd704497d6383d1794cc058b28badd5d300000000e885af2ab2be11c610d75db7eb1bd6eaea463efae811fec483ffa41aa7e83f8b687b4a4dffff001d04f872ed\n+01000000a658975dbe7c08a66b40f3a2e2f0ef98a255d60a79ba975b89a06204000000001e7d0335d1b38ddfa9aa6303ef27c0c6929af97154ab2062f3934a8a29b78a58137c4a4dffff001d04ecec44\n+010000008c36b480e7358039d56678918d633d9e92a8f3bca09cfff8286e3fa60000000013ac254600fca551cfb3665dc3beaf8114aec034861d36308d5e6b213f7c01c5a57c4a4dffff001d0061a279\n+01000000169009ccd47ab6783ed3657ecb5c962b3b3d3d0edad231df0c9f193700000000623d61fe4724621efeddafcda266ef8edb29c8f2ae051f4c6cf6eb2edd214e5ca87c4a4dffff001d045f755f\n+010000000b89ccf6b22dc7ff1668cd3de5d6a812f1e5ef46b512cc9e352f3f3b000000007c644560629caa21e1a3fb2bc113deb42f78541283833c4a3abbe6a6fb6d877dd17c4a4dffff001d0588650d\n+010000003f9e8ff2fbb3e04c36c9683dd534a2d4fee5607825e10a2b4885e8e90000000034dbb7fb145e4c0ef8b98d4a03758ad3e9fde5016b147095494046dade14e834df7c4a4dffff001d0320c105\n+010000004ee7497463e160c70196b1412a2ccbd2cc41062a773c4a3202b7b047000000007cd53c97e3e7d4f9f8e172a6168aee8539dcf2f4aa98caefe37be637000aaff9fc7c4a4dffff001d04b19e89\n+01000000999ad8365c277b20b05558240e3c383ebea0d478faa53122dfa506b50000000088b03731e11466e46268a2473feb0bfb996a77f1d39d1ad9a23d27aa158ef8719b7d4a4dffff001d041a251c\n+01000000864569f3105e048d65a9151047f0ca03a5c3311c39dfd84c35bc279b00000000b0c3d72e0b5e89d3cdd7b5d44396e6a4ef92f4a2e7e198a6ee583768d86c839fd47d4a4dffff001d0348f715\n+01000000783b15ae83eabb19aac502a6fbae8c6b4b2d8dff30a1c3cb2af0b318000000005e2072b31fecdf48b38a60a1613a73f8c370cb4a857c74844ae17ae30adc9677ca7e4a4dffff001d05a98d10\n+010000009b974d3c625f7fcd4e18d7b8e5d53ec6db57b0987f7ceef46e9175c20000000005c8b8ec09654909eb66cb5d6f22c7ba56afafbd3e6486fe8885c7f0ef53b77bd27e4a4dffff001d03cabe9d\n+01000000d04963c151d6298a97a6ad4c762ccbacec3dabe179b3c39ab96eafed0000000004aa8cff9a7ef9a2029c8f3d45561888c3c50d9d7e9610de7c7976f159bd0d55ff7e4a4dffff001d02e2bf3e\n+0100000032b6290c64c98539ce9570e69dec2e354bce3909fb62badb2c6dbbdc0000000027cb02841e5e22c93f1e2b61c1cb40553e97205e0956a3b01777c137d3264cdb107f4a4dffff001d03e0d16d\n+01000000b96ea7181758239d2d12e3c43cb81c47110526fe397595956ec24e1800000000e89deade7ce10d96cd17b1371d1bd50a16e04c997331c3a49baa0ba0cf84e6c5de7f4a4dffff001d02ea02c6\n+01000000c80ecafc4bca833c5f2b956f4acd585becd120bc9712517eca873bd5000000003c4a3ed10ee0ff614113e34850ec14018c7286ba1868f4eb541ba0c68a0db05def7f4a4dffff001d05c8b8b2\n+01000000c451a1fcaa893e25e72b921e74bbbe82e4489aaeff82806bae8e2ff3000000004d8c8758514bb308bd043ba7c6ab04555831f523ef439b44b6c2d26755a110b86e804a4dffff001d01868381\n+01000000b8d4747b5c3a2d6c8e50e389fc938ef7b8c04eb4104c17a2e2694f6000000000aed381b06d2dfe28d0ce14b4f43f5c167dcfbc80d44e37054a014a828a2c8c7236814a4dffff001d05517119\n+01000000d0a1893dfc1470c05078598f83a28af1e44df83621ef6a34319f1f79000000008c68d3c55f59e4264a26c2cd1a6a3ed4d45c98eefd14bbfb9a26cf55ba30611d2b824a4dffff001d038d2dc8\n+01000000d892825bf696f9c10eead1e3e97dfd043618e0123b72dd058988f92a000000007b921b39ee758310c934e9fc074942513e85716327fa08526e089895530fe6bbca824a4dffff001d0276d82a\n+0100000062f08100a53cfee15d6960d2915fecda72ac40a116600d176bd6eb5a000000007d4eefd21df4c8472009c501a9c023613b9b67c27231f130cfa72d97978ae996d2824a4dffff001d04f2f222\n+01000000c5b9489065fa7e1ac4facc51a5a0ccc2111911609f43386ebe7ca1d200000000a0db3bbb22a2a8441d84dbe335c24959ea3d3d6e91bf67e66bbcb0d7e0a9c4836a834a4dffff001d04181366\n+010000007c967c39b155d44a57d37c46bcb47506c0b00a7987d9debe642c4c1a000000009969fab4c50985190c20867d5eb2622f8994a72c05fb9c91ab057be79a80526d94834a4dffff001d0391a66f\n+0100000015276dffb7a0360993a5a83751944fc88a2d3f13f8e9363e5f3cdce300000000cdaef86e7120eb9f7e0e9c1b3009b4581d1133e5e2371f0da2a0b7d314465f8dd8834a4dffff001d04184062\n+01000000d9e737d6b012027382d48297bfa52d08eac8ff7aac62810a3bc6798900000000be2b0f66f65fd65f4d4e387b96041ee0aeadeb736b467f8b64e12663a7f8b92971844a4dffff001d016cbc40\n+010000002059d85f0b361f764b21d2254602420fbd84fff571daed5304862a42000000000c0bdb3ed18e03a8b3b92ee43926dfcab9a2bc048c98afa86c1f24e1f7f1ab7e23894a4dffff001d03dc41a4\n+01000000c34c5ce16980a5ee4c66a17ca4d8619600a15f7e0dff5edec12209ae00000000e7be4fb74031df2ddaab02750360d6b806cfb54cfb9519ee517c20fd9c636b2332894a4dffff001d05c8f18a\n+0100000071f7cdf7526fe514f6a17de62bfd240d2eb1fd5f8e406da3833394490000000025156dd8c9381fef3564ec230644a84f35524ee664c3643ccec644088b95d86f7c8a4a4dffff001d054f7dff\n+010000005b09986f4fe70f0f864a258266fc73e908e170c29b3cfcac9ca9fbe800000000e0f8760379c70b7d7904b5a50c59bc16afc4529114d9b9ac1de43e698debefdba18b4a4dffff001d04457234\n+0100000067391d93a161d82b8f968b7041a48507ace6bb30d4dfcc789e0b6f7b00000000a035032fecaa07e192fa2c97f683fc201a50f90c7ce4abcc33ee37aa528503e60b8c4a4dffff001d02bc415c\n+01000000ddb642656ce71cdf2052b12984eb8c297eed7803ebf000dc63a262ce00000000b9bb4103d0d93289e9f9448ed7e63a8ac751ceaa41d1cc9627d2bca7d7c28a16598c4a4dffff001d02242de7\n+010000005705c3df459247a82aaa9c3d836ee2661cfe00c826faa3f2a8462222000000002204f4022b778f21a952719904fcddbefad0afb48be8305e89ddaac4ec8b133c8f8c4a4dffff001d01ef8ecc\n+01000000560f99e148e5e82dc838535b9cbb5a6116eae26b586531fc2e2a8315000000007760f7a3f07d88e8c7361e1223ea4a9e4fc5f9d8c421037578ac06d921f11095528f4a4dffff001d0392d460\n+01000000cb6dafa616960c0d1b87c67ce99dd7238f3891d280444d7a15099f710000000090adecefcdd85452dce9b830a3ceb9240da10806a62404f8b7048c2d85ea0f7d818f4a4dffff001d0331ed48\n+010000008f7e1c2ed57b82e56977639379c6cc7eaccdfde5f181fa381b0495610000000023130ef1dba152270b2153aefbb5d4e29c22be3e79b2041ca20620c1b381e099ce8f4a4dffff001d05e4da4e\n+0100000005b132a4f74a8799a57a4202d0eeb09612cc08d295401f007c4530dd0000000073340035d03933e01bff3c47f14a5b0a8ceae33be12a8dd521315628ebf42eb3f98f4a4dffff001d003a7958\n+010000004e6790a025117e8aa81fd453c7c6c236da838f3dacb169abe51897d500000000091aa6ac0aa796201482553ebe24961fdb79bcb2c1b0902f2ecd2c9e7c705d830e934a4dffff001d001badf1\n+01000000ef72b16c3d1e58804b715c8ca9d02f2158524171a8a4742d0a07974900000000ecb21277a56d483af3a7ea1615a8a6d0566bf87ef230146ed4a8cc8fbae417b2fc934a4dffff001d0370ca3b\n+010000004fca0bc6408f652b0d9f79713e880890605c993fe954bb73808f2cba00000000a70a8a17b106c669acb346ac08ca99344b307121658cb8cab8d00eba9adf7c9138944a4dffff001d0328fe63\n+01000000077ee2849664864a66985199aa49b030f66c79f8022116c979e234b30000000087be9e1e4f0bda5f90e3c1db350737e4f390064d8aec43d6e00ea92a27c2957ee4944a4dffff001d03af3fb8\n+010000008b0d4a2ecef90647f9d1a923020adf2bc138626877f0f855fde5000a00000000ecaa67add6b1f10ff91e5df491b59ab1594c357b39ba9f1f06022b078844375e99944a4dffff001d0037c556\n+010000000bafbf706c6cdcd91f5fd082255862927a4d3a0457f7d7fcc6ff3e7600000000087028b6299590346eafb168c13132979b89b4912750975d9bac131a7d4c68c3e2964a4dffff001d0525ab4d\n+0100000025d15b892b9a091f18e865d579f536c655f18a4994e960b06227a643000000005a2a640ca55a1660daf5363b670daa00560628bc3c39a6dc88d7d59cf2dcb669d0974a4dffff001d0226a908\n+010000006843e8fc9750cbf5174a0a778ae5a6a63186683d1296a8514359770d00000000c5eb73e7834883d87b8c0ceef4ba9b850fe503039eee9b28bad767afdf0d0416d7984a4dffff001d05d4fe47\n+01000000e3756d4e486befea24a302f095aa87c984f583a66687fae68d92ed1c00000000549848fd7d128b20aae864145aa351ba58eee3feffd7a8089c7adf4445b8de874b994a4dffff001d0496907a\n+01000000cb8461389ac8693f9f277f037cec93d37eb8b6a6558cbe10bdacd1c3000000008aa6ad7fa12e8ce311c1c659166e587c880e3a6fcdae871eed1bb350d713f25113994a4dffff001d04744479\n+010000005573c2792f3790bb99c05da5d71c9a24bce92ffeec84093243a1aeae000000005945dda5801905c0a507e521331b06a9263279c4761dfcdaef431c0a76698688b4994a4dffff001d0546400c\n+01000000afbc89759982446b305b9f48cdb547f3c95760014fe738ec3e32dc8e00000000fea6f2fb7688cb32351b15857d3f250e581af5b20d9379070b5542a00c42ca70699a4a4dffff001d00ac7c0f\n+01000000e17f97a9d791f0724271f652f057075f27d96aeb365838d8ab17191500000000a91c00538ff6917dce0bf745e5a040479862ef7134de60320297eb029f7bc07f469a4a4dffff001d03b1cae3\n+0100000050e436836fe519456bd7faabec5d522aa80bca6a53af3f9d57457c4f00000000c66962dac9d02aab13c8501636c123f672ab771c8e088e1b24275b105d222c7e569a4a4dffff001d02c1415f\n+01000000dd654b9a8a51371c852e448ca417a3fb05413a70672783ecb1346f640000000044fae19fa72a7abcbf78d966a5097415b961a316322184bce818191677a3f129fc9a4a4dffff001d01c6aeea\n+010000004386a29fd8c55a0c47b8e97c6d04e1267549de89abb6db75a577d6ee00000000fa993f2f31763c2969af7e8c181a32cb663e07bd210ec14e29fff768621d4b58459a4a4dffff001d03c6039f\n+01000000c5cb299e1b345b77d730c527034828c846f23bd3630ff74355c2d9ed0000000056ad317661356b368d8589f343000fb68353f92172d8c7f68a9c9792cc94ca5c779a4a4dffff001d0485feb1\n+0100000028fd73f5c4415839b41e887ecd606661462ad914da28c2140afdedd100000000af9d78520fff7f6212f88c7c98521e2c9a8d2a23740ed2068e1b2a55e0c7aba71d9b4a4dffff001d03a07cff\n+010000000cb32bab66fb7c93a66f841608c74f61dc36d662cb01f30a8f01efd400000000f8bef1ce0194b9aee865355e8e5b0881092bb9fe8e3842c4f7110f7306caec26629b4a4dffff001d004d55fa\n+01000000c2a8b9e3677de7a6f7286c8a458cd5f09409c254209d9d8c445e0d24000000006bf3416c661bd39443f16a48fb560e97558e2cdab18da1e598086cd40a2ac6ca379b4a4dffff001d02c8a75b\n+01000000653dea66e42fd4d1019adec51e1f7493b06f458f960a6b08501d8534000000009ec37ca4395220c81233283dfbe020c1982b43c3cec6b82ff425173ef558a51a5c9b4a4dffff001d05681cfd\n+01000000443c685dd9cd61dbb1d4c1964e8eef7a1e6c6688b38775c2707b2f2e00000000cfb0c5cc863b3809bb9c642a497ab8eb5a2b0e6cb448fb1a12b08c3d0f3b1e13989c4a4dffff001d04a008e2\n+0100000059ded6607bd4ccfeb4348c41b04a13343602879158b8d9aa1f3acc6b00000000af43000d9c2194875f48dbe377b839bfa2157758b941b5020e58b55e2ed04fb5de9b4a4dffff001d05540f10\n+01000000d04014b56c58d45f823589d9d36bb755c50ee96359ff44449d71cfc4000000009d6e5c4cadaa256c698491f2c3086ceafc5f73eda5e54d4ebd50ac8ed90eefe0c79c4a4dffff001d015a6219\n+0100000098fbe05200b867e000286338ee405f70ce4362f54769db2bc9d919db0000000078b787d3d8da61dce5a9fe4d4a9232e804021e439906e6fd52cf8f041f948b3d919d4a4dffff001d05774a61\n+01000000c5f311edc79caeab3404ee358871e5f886712e56005f4c67141dadd7000000005545fe6585b08eceabf29cb4ff68ba07020fb36520301d4d5e7f30dd1489aa6e849d4a4dffff001d0505dfe1\n+01000000f24700786a174a784f2d99ad24d4c0165e2f64acdf0893cd4839590a0000000022c09454ffd3a434342bed475ee4e9f7a34b99d26b65f2ab92bcf7418e77f732e69d4a4dffff001d04872d33\n+010000009849d7f7915299b00804b04d89a946033b4bac82b431a04781ee1c6a000000006801e653da56cf733fbab3ebb4d3f248ae5066f00b0b879a178ce3522c7e1572cb9e4a4dffff001d01e83192\n+010000002cc41fc32ae1712dbf174b8d810498ea52c9908a96100cbca447858e00000000a9eefb8c49a77795e353cef1a18ddf9f75556b599049cc5c326bbedbccc3cc5aac9e4a4dffff001d0559b918\n+0100000029bd58b2759e2398dafa0ed714764e7ea87a61e9966b4777837ad0520000000073173503f0ea326597487757ead4a2afaded9c36545e6f94578d3dc6e5d58fbdef9f4a4dffff001d01bb0d51\n+010000008d7f3d0a93bb78055f440276924456111c24af5ed639ca3b3a2226d600000000fce8d0f71b20ad1d4797818e77da4739eabd906dafb8baa38bed17cc3f8d723906a04a4dffff001d04416634\n+01000000e26e977c4cabd28830a8e1f87983e91ecbac81030dbbd7cea6efd4c40000000029045a4c17ed6ba6bfc40396d8b9d2640a705fd487c3c0271eafa3c503d0f54b9ba04a4dffff001d02477ab9\n+01000000f3249f94c4a61be9fe426f496ddc9670874206c5034c68fb03a77edb000000008f1c9da6092af60d73b296ebbc796caf1b8a095f7ed33078bae45cbd2925029961a14a4dffff001d0253c63b\n+010000006f6cd48debac250a7b42738755888a7571eb9935bae9e94d7cc28b1100000000d42144297dd9954a62226db7fa2de24cba50b4c963ae6226ae5fa652946dd0a7e5a24a4dffff001d003cb819\n+010000009ff0cf741383d94f79a6efeff2a317aaf6375ac3d252db55362280e00000000029e2f50ac5d203e020e7b59855380dda3e918c80627117c6249f987b28ac807bd6a24a4dffff001d030ba92c\n+01000000f61d5499f92cf040f17a16d02b348dcb3dd041b224625bc99acd35a400000000400de7fdd4b27e6d8d358cbe3b329417d75352a9aaff9af70c1f685cf842560675a34a4dffff001d0271c0e5\n+010000000d1e2a2e2670286100f862dbae397fef5d8dede11bbcb013c453e8ec0000000043db438150141c0240a7f3f03cca32f4fd0ebbd6bae6daf898a6c7aac99b8a85c9a34a4dffff001d010d4882\n+01000000abcc3483c5e1adeec60646454065ae3a116dc60aea65be6d0e66bc7c000000006c0e3cda9dd0367de3a4e1d356c0ad23cd88f26cdff41b412b0ca1de1d9c738cbda34a4dffff001d00b44c37\n+01000000e0d79f654270f553820b56d0332b5ec18a4cb5d969c5d67c8adf9b2a00000000f2cf8413e5df690ebfdc8441586639e39ee7d8571d88e07853117ed693bc0b8d35a44a4dffff001d017fc225\n+01000000ee4c6ec5ebb31e14991634916e68379e6f08617bd3e2b0816c0605fc00000000203f6062b808d073f0471cc4bad3fe9cc51cb9c732ab53e46a4127fbf0b960fbbfa34a4dffff001d03592dc6\n+010000008000bccda2bdbf0a6293178dd1cdce1a368824e9c99587798b7fc1c600000000d29fc4754ff52a23715d3147c6a0ae31ddf06fa70465f4d09d41b4aa08da707bc8a34a4dffff001d05e36843\n+01000000386cd6cb2551941a87716c2c618e1e56e9fe7acb49b0a71f414047eb000000007bd7a97b969168050de5f20cd3d0ea212b138f4b43e3c27755f46aa08f98f1ce06a44a4dffff001d019dfd3f\n+0100000053402e2e9f85db9774e0193414436cfbbc70b658c4e54913c67bcad300000000fbcf82e5b9b5c1aff879c25c172d4db531905915b205187bc3ae1425603e7c764da54a4dffff001d0154db1a\n+01000000ded3e38a879dcbfde2c9ff5690db8377d0c596e20b8be94dafe611df000000009d8b84155b519e0c1cd97837329fc3505f76944245c1bd686617779dc700c15850a54a4dffff001d00ea1441\n+0100000011a98d2176e7952434447a06a9ce9f726651737d3a3e006373183b2400000000a50e90ca36c2cab93fd8acec6eae0755d7d2e710688a26fc16557bb5c038d12c0ca54a4dffff001d044b4279\n+010000008cffb590fc8e390cc07b0fc7d7e1f83033a7f09c20ef114f6efd73fc0000000098f65f5151c0fdce2398474d0987d7a531aab1c2659675c07658b07cd954f80b29a64a4dffff001d03e15e65\n+010000000a7213bcde17cdc86191ebe8580e3a9e893e3b9a189e2787394c5cac00000000230d4c63ebf11994b50ef9c5f1b75b2b8ce6950f63fad01665fec3ed5ff2bcd243a64a4dffff001d02706123\n+010000002c29a0a93ef692c20f7a5d0a917a69be60ec5bd73788f9ae92a2e7f90000000048634496267a248713364570b8c4cc6ad5b1a3f32fb74cc1f11fd22c3b293e88b5a64a4dffff001d010845af\n+01000000fd50cc2daafbf969480d2675a4cdc41f397d1d815a2aeaf863236bbc0000000086d723685d916a3b3aec61efe9b88a845d96fb903e78760e0759aa2089de4e2e66a74a4dffff001d0389da36\n+01000000e897be2520f0c6faad2d0c4be209e0d4cb2edfacb7579a6aa939a10a00000000ae3f02363ed042360b679fece5726b2499e74f27f1bc596c3beaf701463be4465aa84a4dffff001d04ea7f5c\n+01000000a4f61773f2105205cff43c8ccb188a0ebe56f0811834cc0772a5a1e8000000003b776a5a9f039715342ed278feea0e87f1454ffdd086ec1e3663cc738965e9d536a94a4dffff001d04479ccf\n+01000000cd182da4f3e6641784b8035ac96d74b182939696dda02368f01889b7000000002fa23a7882a373528b5403d34eeb13a26fbf25d668e7019e7a0403ccb5ded71387a84a4dffff001d033151e9\n+01000000913cb00e5db68a01cd2c2c469773d0946e3e1589cd72c56349d0405c00000000e04420559afddb03dcf51c67a8317370080e517e24ea38dbbb5bd529680c1d2c3aa94a4dffff001d01ae2ae9\n+01000000f87f4f7f7f99202d77747619865391ed07d87afb9c7c9a48b7f319ab00000000b4e21e67bcdbd54bee76d62b5cfdb6b5cdfc5fd1c6ffe9fd6b1e2f39677aeacd2ea94a4dffff001d03275902\n+01000000c7a1220a895e2a83917ab688040dea8a000bbd5f4858e8bda00f3bd100000000fcddd0541ddd056f19fcfac0e637cc8fab7503352757707daf37da8e859434f397a94a4dffff001d02d171f6\n+01000000c5711e518c4a53e9a6d684759ecd07d69b5d859e1edffcf4bcd3896800000000e4ce2882f8c5b8e467a080c647ca97b8c11070b7ad10a1eaeef13e1b49d0028cdaaa4a4dffff001d03ac5ea8\n+010000000a1bf9a1db633b5c817be9ecef65ea99ed980a58d070cfab68b70d5200000000c9fca844eac0515369a587359fce6a2cec83ebe565dbf46b92928ca831a1abd54ab24a4dffff001d0370f65f\n+0100000081f9fcc96f7824b23225d5526b65d3d5826bfa8b65c083028e7b287700000000163cdfb6b5d8589c539ef411a96eb96ee49dcf03ef4538d8f752762893db209515b34a4dffff001d0215c77e\n+01000000a563fe8e23fd9acdbd8ce0db616cb72c1b05fc8610c4e89fcd32b21f0000000074fccc385cc517580daf8966fcbae398b81ce1f077bdc5732c529d6c3502e16183b34a4dffff001d033652b3\n+01000000de5ca94254b771527679b5dc4862a7eee044409cc33ab2960cbe3920000000005f20491b7a3093fe2b342e816a5b8d409916c2f11a6cb6743dc528e8c7ac51b7ccb44a4dffff001d00d437a6\n+01000000f8d57b05a64cb39a5adff645ba434bb707aa118322851cbce137df2800000000d760a34f6e7b07b3718a8355b71b014f07fadb917707e4bb635cc1277cb8ca7f5ab54a4dffff001d00d8ddeb\n+01000000a54d55adebdea113e46d6911a15712f7545709577a5ef6684a37974800000000849ecac186963e52f8b855e51f70e9cfc90cd0f7054c23f1bcbc1675206a00bb4db54a4dffff001d01cec36c\n+01000000f2f0b39c9e0f8ae81ceaf09ad25ee9166e8f3d33addaca1ca1366c5100000000060e3cb266839d6c8155ebef78939c33b659156bb2cbca1cc95b50e58ad5100b2eb74a4dffff001d02e282eb\n+010000004a016d8b02a6e3c33705715c29754230218f04485693994b29d78a2c000000007286500c919f491aa5a0721558e4b8a64230ec2d1d955c45ac871da0e74c898d3eb74a4dffff001d036714f3\n+010000002d24b64aca8efd3a0a948e813c5303891d1971e6295be97c1923e05c00000000eca7286e07ea252409b51cb2124e3fcd6adb8e6fdcf87046de18666e36037511e6b74a4dffff001d037e372e\n+01000000dc8280b9a38ed7829f3ae49bf8f01642c0b16b90642b2e911c2cb69000000000a10c2661ab1b02ab9f3c5bf928db087c27c06ee7537b04ee66ea4785fb625c6205b84a4dffff001d053fb75f\n+01000000280fd86185912d306966b6b7bd90a765e659bad17564825f0c997f2d000000006637b339af8cdf579a250267ce7ce41f19de798c7ee6ff7823312076e0950962c7b84a4dffff001d00c1fc82\n+01000000993b4428fc00d1eef46e5fb166b32f32ea75e3e49105a04322845d2800000000fbdd76c6562c86af0e63ea9a6c46a91b8d92c4e7df480977ec0d53b7f3c25b9812b94a4dffff001d0099e992\n+01000000c3b9d6eb714b91e367d7a44145f498cdde7f579b68c66bc1b9af7886000000005b0df3f16d5bb399b09989beaf8e0665c695ef49b7aa8473ba8690f0b029ce0094b94a4dffff001d036efa36\n+01000000a702519acf76d7519ce42d6c0bfff12644be3694621a942a55e4b36900000000f9357358ee5931b907a8c3df01115891a740ce6f4df224eda4586eaf450d8b9f3bb94a4dffff001d02d9d39c\n+01000000931d5230c5a2b7d43d322cebf9026ca68fe1a70afe0d8c8abed78d320000000005634a2446d5fb785d1f1582e6f35418bc6fbfb6abb9507213b010e58dac1c3ce0b94a4dffff001d02e9d793\n+010000009c7bf22857a46add066ce2267450ddd5a6f280943e961b1db4d3be0a000000005eef5906ff42a8baf4a8a2d8119f88112d802484361ea778d22e44300f6ab20c55bb4a4dffff001d0179f4e9\n+01000000e2a926d9239573962e534a47311e7875482832ecc6306bfaf1137c0500000000fe6ae11390e7bca224e9937759c658c9aadc8971e8ba384caf2a58de311826e7abbb4a4dffff001d01d2102e\n+01000000dd3fb5ca9283091e24a2dec99871d9c033f39b1009f5ac592ae2cf190000000086a971609dbe58f45f99ae1a769c07ed6b0575ffe811844b8f6e04edac722bdae9bc4a4dffff001d037251ae\n+01000000a7f31bcf8d5a86bda0ddaadc3c8b77ec71af748584b3a5eda6b88c4600000000adc6c0ba4cebd8e2b0154e9f876f1e6ea54e293e6505a5200a4a75d394521a7882bd4a4dffff001d02defce7\n+010000003846b6ba73428b23c1aea96cb3a4cf8b72ea4f40268ed68fd16ad9bc0000000050a4b5b4d3fb6c72d198506c83d6e2792262134ac07813baf355921ffee7c6579abd4a4dffff001d04687d8c\n+01000000df7e6b1a5947867dda62ed7a79f75d939d4190f3a575b447c31308f9000000002523ea33f4e43dc2dbdb14116d5d087aa3544a7f886a69693caa154ae0abcfdf05be4a4dffff001d030a6d3c\n+01000000799f7e9b6d0ef1bcc5d4e6b82936272e3492df8a920b934dc9e1973000000000d0038b40a4b3c20cb7a6b431d6c2edcd235c59dfaca4698dc0f4a057d89eded6ebbd4a4dffff001d01e9924b\n+010000005dc85295d33956fc24736fe54dfaa12ca98cae2ba02ef7eb9655a12a00000000b7bae6ad3a263adfc01e5e76acfa7dbdc0e60962230af6fc59003d59b437b28d90be4a4dffff001d032ce3c6\n+01000000a3b52bc4a8ade1fb7764462099a412272fa13b3d9de508c356a3d7910000000001eef5a3b0e24e946235bdbdaf78601185042a5974a6f9aa7d8deab62b6bc49c18bf4a4dffff001d05a9f6dc\n+010000000e816fbf3db7c990098f50722e36029dda668e9aa386c23a201e9d8e0000000027d9b4ef4291c5332a05c4a2918b5526b96a117c0bb2bc97cd18f5a6eea15caca7bf4a4dffff001d023f105f\n+01000000514062fccf6e88a8ad9d0ff0fa2ca4d2716c2b5fcc577f52e4557fab00000000ca12c4c5fa9b8106d21f12f4bb24e1954ee95686b849c643e0504328653198fe1cc04a4dffff001d022e817e\n+01000000b8631eb7fbe8abdc32f81b54c6f86c96cdb5d7c270cbc8e8026890e80000000032510d84003ef4d4b634cb4bc914de16f8e9b72b6f1ea20dd9eb847f11351641f7bf4a4dffff001d011d83b5\n+01000000bf3ce738c0692a474dadc784640fe4e2f06beef2fffed0bfee65cff100000000a463353790f4669516f33c405164df2ee08f7738bc91ded3ca2a025e18143ac967c04a4dffff001d01fcc651\n+01000000fd4bb907a2089b41433dde0fcfa70db3ac3a6f075be657f0e15144d1000000004bc439544765cbaef9a184ce7fb26bd62cf1ab32267eed5fb3bc7050a8f0c427b4c04a4dffff001d05d07be8\n+01000000d0d3565bbad3a5fd165a7fbd978fb2ff2974dac1fb4ef21ee0c6282200000000e4e9ef647dfd719c086990944594c3892d0deffc18fc90e092d61a3e586e4cf8c6c14a4dffff001d0188a8b7\n+01000000d2d5324fd546db69e8c42e6f6c5f2f686cf29a9fae985224d450ca7b00000000b3c4d587370073598ce1a226be2f70e0ccbe446e80f88f0446dc5b179782186b78c34a4dffff001d027bf975\n+0100000074b16276f3e902ba74a5a938a86ad7249db7c620b06023385b515109000000001b94a65422bddf5384bb8da9d866fc7a7e5c5abfbd5867efdc8eada3b78b8e3babc34a4dffff001d02d402ae\n+0100000057f6b87254267089a1d84eeb06f20c3b181177372b88cb9152f356dd00000000c70258c4f96177b1cdd9d6fd5ad0e9a65abb44e7fc3dbe507f45e2984ab830d9c9c34a4dffff001d03cfee0e\n+0100000078eea9a9282653e1e213c716004ee3c5b7d323c37bdec7a64565831200000000ac37dfa5948ecb63e944a61eb0e83cbf7dff61cd61cf66d21f447d9a97bcbec123c44a4dffff001d05c7a466\n+010000006c0d72985fd57581d55754a3dc631a89e6e4e1edbad1696ec271d6c200000000c1d26e829e285126d03a1943bc46d72c7e68f7fe1855393079dcc6406328ebc53ac44a4dffff001d01ec1ff0\n+0100000060f628c70ffabdde8c265ff6aa1b49e0f42d250a0645ac0fa2963ffc0000000074f7d49e03dd5ccae2109db1e4ff11507238642d86fc771aaa999ae48b06f3d26fc44a4dffff001d044b6b47\n+01000000f2c8d522c94e93a8ff5d947c057e4125a4deb167e5eabed5dfb56736000000005127f86da79df2980cedb16ab9a4b167e6daeadcda0d645f83deb48a3dcc065eb8c44a4dffff001d0561c0ee\n+01000000e6c388d72c717914e507f11c58a139137fd483dbd746e9c5f2a1eb0f00000000afa8dd6f0e319d4ddedfa1425f6c03e461dfa005d42d3f355a04cae42626c9b121c64a4dffff001d059f05b2\n+010000001b354bd6d10f5a24879851bb2aff42548cb66cebda04e7103bc2521900000000622c689b318941bef087640fddab2c5ef6dd6024f133ac28c1ccfaf30e380bfa4dc64a4dffff001d00484506\n+010000003e226e00e126f0a4a35b1c6c09509e0d999122428262a5303e563c6000000000d7432b21fd48689d7e79f9b6f7f624aefe8b72503fca13b814d355618b9023cf23c74a4dffff001d0247f874\n+01000000fbb3060018eb1f40d734cc64744134d96536c4a331e00d4c05e2cf9b0000000061b34d561ddfd18ea3381d48a8bbe4627727c6ead00a84030e7f76eeb788148a71c74a4dffff001d012e783d\n+01000000fff008ec46c2d35cf469eded16dfadc77ca6e9a9680cea0b0611661b000000001d1e1087d20d41da1f0b4a5423aeb281ecd48cfc434feb45a4c6c31b6b61398124c84a4dffff001d05928767\n+0100000093ebaafdaac804feef3ec352e40cc78be60e7ef1edb167891ccd99cc000000006bf225e961b1f1b8e042c45966c2118f20871551e0996eaf51bb628cd9d49b7a45c84a4dffff001d00381daf\n+01000000e85fb976eb4817418c0ed2987dba1674c0fd757f70b470f83d01a2d300000000fd6717e5d49bf303d41d861fc50503aa8575eb52243f426de308869a8cd57c57f5c74a4dffff001d033a590f\n+010000009cf5f976b9ae634b4c867bf78cb602bee8150ea1838d0ef3d06ce94700000000fe6ce75c462d7d09aa8d917fa90a49bd6a4c41f02457ff40ca47ded089021042b0c84a4dffff001d03a5f6aa\n+010000002eff16b6669f88de6f40810c57349804014f734c692a44ee822b7f1200000000c095ce4ab7e0e02110b75a33012da97d75e26b83de5ae0bd392fc3b8191b77e8e8c84a4dffff001d032c2bf6\n+0100000001aa2c494f2d4b7ecf367734c734b931d3592b1572dcff557186ece700000000a10e60b120c06cd1be1d2153abb7901e2d9f1a3f43de9e6642ad269be1cae22e44c94a4dffff001d01f2005b\n+010000003d04e058642d22428704ad4337f372bb8574cae072c2a4b469b2e1dd00000000bff07e723c3859fe85bb849d860b21a325b1baf1494a3c1e73435dd7992bf8e53dc94a4dffff001d00262757\n+01000000272ecd270665dc39e924838516da62f8588270f1e37812aabdb1d48c000000001725d4769aaca3cf86c5b0dd199bf93f2d16dbb13fbd4029633bdd1085283fdd13c94a4dffff001d02f79a8a\n+01000000705f1bbf68b4976a9ade4ff01ae933030cfe4cd43e8092c9604442a2000000000cb7f30461a3563992f7b02095263fdceb13984123a28ea68d0989601655e84ab8c94a4dffff001d0017e0d9\n+0100000082d6e6bf4ed6c5b989705920effd072fe6b7119ea5b8c8fa6d0bf5c70000000071959f90386cdc263655d36033817a6f69cbc2d99fc56cc81f893b9787907a4fcfc94a4dffff001d000f9093\n+01000000374e3a88a3a3eef84b4212e90e863754ac2a6999747c22667c0b29e0000000003a0e3693a8455ac94beb574efd98297948c5b5f69eaf0b813e6d5e57426e39e279ca4a4dffff001d042b079c\n+0100000003f06b3017023d1cbddd4cf169c4e74879754683f0d7670f1d1197f70000000098b12eacd55084fe2807a33dc2c89e6fc25f382aba3c6b4c7ee2f74a6999a6bbfbca4a4dffff001d03ba1eb8\n+010000009c0730eadadb66fa486e40dbddd14b635ec7939f788fdfd999e043f2000000006b0a86109aea3d5e4b7dc320da600dff19d81dce7b77dab9596204c20c6125b06eca4a4dffff001d01c88a1c\n+01000000410f77945e68dba04d76fc931b26ccb571159c9bad438df5f8fc4d190000000004d902fedee34fce75de583a54e1fe7ef26a7946b48b93b9b0834dbf19a0b47f3dcb4a4dffff001d016618bc\n+0100000025ec91d09a451f18667262004e0cebb2ad66262407ed0a8f4ddbff580000000092f8e1be93272aae6b36766d721df3d80444582edec0143174c5fafad4cef50c79cd4a4dffff001d031ee0cf\n+01000000d8d0cea1249f726362ee78259d97d98efa17ab0efeb1b9d0a0cf0d880000000035c3dc39e544b855457fb0711697a24123fc3ba6c439123714b193b9d1d9ec7514cd4a4dffff001d0526c906\n+010000003e824b7a8cb7bea1dddcaee7bbc4720e8c5d2f53c9c28dbaea4662a90000000061ef7a1ca4f6f61cc594d040490d3cb2f11054639a0a964c67cebc6dbc079e36cacc4a4dffff001d03af40bf\n+01000000da9201093da940fb6badc420406540a979cd5c06fc2f47db3215130b0000000069577de9d33e6351fb0ac1be26158f94c217d2522c35e9f813e47bf9811fad72dacd4a4dffff001d02f70faa\n+010000003dca51f6b97f7c05a44f329c1c9f4d7cf03eeb3b16d94bd56e34b50600000000092122ea597797ea0de7841945f09c221578800d0c44de4961cad7ecfb93c47323ce4a4dffff001d03bd9635\n+01000000a560b2ead8a3f50df84385c1d5a51654c22a321268e077dfcb9ef90c0000000091db9cfec3e6c44a790d6295a2effcb8dc94f9f1c0fc4f6d867e90e140c1e9f325cf4a4dffff001d03a86875\n+0100000056e6a9a6b93f9ad3ad847ee845ee9c366dc9376489516c31d892ed5e00000000bf2f3b6867855fe1058092fec7c5ea89c15cf8a70d0c565c26362d10129221af47cf4a4dffff001d027a9b69\n+01000000d123e40889dc9dd8039943b5b1a0de53026e9ce92cfc69d5f8482fbc0000000022b49f0319707490d002d5b2c04adfc7a6433c2931ed04545e9c33f37a12b5bb924bbe4fffff001d00b7fffa\n+0100000065aa216d118366b22580747fb4d876d80ae3be145e318563984e0b040000000000c2b33efaf934623c6bea64570558d6551524e2f45d022b0fe935387279e6a37b51be4fffff001d0511e593\n+01000000eced0b25fadf8818fabbf65b9c16f39874336d7faca51b74698ad55500000000ee49643ded3202eb46b451c55a652c6cf38d82da93de97a2f2bc0e8a28c1be7ba951be4fffff001d01f82bc0\n+01000000bc9c266783225bfa273dbba2342f54809dcc2b263e1e6bf3269bda300000000001aa244355f8827bdc7eaaa0defe1a928816cf7d919890781c1fe3ee58d985684d53be4fffff001d01a443c5\n+010000001b7467dcebcf2baa4814161dd6c7ab966ba082d670a69eaacc1785910000000050098a241f8df957a6bbea8ecc39473091636a4e55d673ae723edb6a3f50b9835853be4fffff001d013788f6\n+01000000f5023ad6b3432b6b2d5afe707cfbfa0a30e94000799c8430a97da151000000007a53e7dbfb43a28ee9d5956be8da4190e5be6f16da4a5636f6139742754ec0cedc54be4fffff001d04474930\n+010000002077ea8e53ba9a132d83b91e40fb1f4c724217b8197c4533a5bee9e90000000096a376627bd7b42278fb33609713b83665f195d100316b9e1651638cd4d7d47cfd84bf4fffff001d027c40c5\n+010000001936a4ef861f194c15f171e843866f33ec3b3cf09394bc323753beb8000000002e3288941ec156d0fdc90d314d85a71a418d272704e12f2a99576fe3201e2d1b3887bf4fffff001d027aefaf\n+010000006e5c2e805629d476b92e0a8d74c3ee0dea0c24e9f35ab4afc6ac77b400000000d26cbed9a7c1e51fe657c6b3cdf202926e0b6e371ebf41ccdcbc0909470d56256e88bf4fffff001d05a2db35\n+01000000e5f26b5abf56353520e1f9baa35e9cdeb57f257f59ff6a4ee42c3795000000007becb215d446a70b351fdb14659d105b3c258802fa4314b536c4e5249adaab2a9c88bf4fffff001d04e36b51\n+010000003cf3550994f31a27c040b1340c7ae9ccd36d554a1bfa797cf46504c00000000005f56011e8d4bf55bca3dd8c9799e0d83304e43ae8b66ee58c688bb9d7f7fefeb088bf4fffff001d0314c7c0\n+01000000ad48a4d4922e3834375f8c50e8cb1842688829c8952204f66b89a7e9000000004579dc3ff13abb920007843862e9091b0e142564cd0a75f5fc3272982b816d4ee988bf4fffff001d00becf18\n+0100000098eff668afac04d3d8531d9bc31aafcd48f7ba68b080b40641dfddc200000000a91184d97bec523016c15dfc3473e7407278b70638f4fd6c9dc1ba210454f7fb1189bf4fffff001d042a1349\n+01000000ed2b2b04575642de5fc665cb8e30f3e39dea66299592405204bf6b5d00000000f3af0d684b2c16f307b6ddf9a02b58b9079e858dd2d093aa29288856b83b82183789bf4fffff001d002cfc38\n+01000000a398a8e978de6f1e7b9b84523d45e5f2021feb29f6d39890a2f48afd00000000f4a78ab4703ca95ed478e78e526f1a8198c3cbfb8a9ee6455338d517aa18173f3e89bf4fffff001d008b40b4\n+0100000036bef7eedabe3b05e1e049efcf66823190285d64d11ccfd2eccb5e3200000000243f2ed308bd48cd3dd25d4cc649dea0d0518d6e12612e03c8a0888aa284bf2d6189bf4fffff001d0498f47c\n+010000008d84b4fadc45563b60c0f50797ffaf71046f287482ab9fe629f64e4e000000003ae5c2515afb4117d032de958e0ba535e484575b80ff6d6e2e0a23e6dc95e0ea7889bf4fffff001d0518a2da\n+0100000020ddc91a15f8c9ec5161bf1709ad7f37c33ecce9809b353dfd3df2a400000000f2b6d372af2c7164d36dc1c369090f4f9179b0870676ab6ec2641b0922b1fd179289bf4fffff001d04bbff73\n+010000009701e67638ec4e8b47c547ac3125ac6c1892a98d77a580ab88f069d5000000007c740055656afd61883f9c1c102fec710315e6e4d58904accd184cba85c9f958cd8bbf4fffff001d03f8f01b\n+01000000fa9f56e3e4fe1352905b3a1f12567caa3f9f4251f0bda94fb07f1684000000009ff7fbae47f6afb47a1723662d196155b5f4bc1c62e882a93f54ba2d9a10913b508cbf4fffff001d02d1c97b\n+0100000002ae1c66166259ef43d290c6a60cf8eb5783e6c91293a3566946673a00000000846d597237ea76576bc49381badb59bd509cfda3095c2c1ce5c75788b96aa144718cbf4fffff001d0139c1f5\n+010000001ed0a06499985c4cfb05371eec681819d8e193b66011f57b66792565000000008980b714aeb09568fd34128f4c7ff84d3e09223dcb2b290c5948816cc636d69fa58cbf4fffff001d0122c5f4\n+010000008c045f9e0e200a8eea9c0957b12e045e927dc768a8a5fc2d8fd8d9ad000000009925a3f617c025b95f6329247379b7ef7bd081e52838676671c7360eec07255a098dbf4fffff001d0099c40f\n+01000000a6adbd81b12cff9948911af583db14484c4c0d30e91b1af2e7fd4d4f00000000a70e4b2057854c71170f8468b799f03d0344905213872216f4210f7bfcf76980198dbf4fffff001d002b7c3a\n+0100000059e1e5ae6727e02c2acf95bc5f24d8274e42495c790125ba52a581170000000043412a5a9f1749688460eee46b62851641fd9b17f9ed5131b3f50e4f160eadc45cb3bf4fffff001d03a966ba\n+01000000c704e90a0c4cb992d6973d636a7094ef2790a60231db345a926b6cb6000000006f98c89001a2e89ea35aaf00b85d965af5598b61bc48d9d9847609331995383effb4bf4fffff001d02ee5af9\n+010000005468467a64f255415f3ad770f0d5393275f2813fd0e1e915a2b8c28b000000000566f29ed6b8cdf85a4b197dcbb0135dfb7b671f83ca67970bffea903309ab7445b5bf4fffff001d032ac068\n+0100000021ad75b801d48a30fa5b4e6b1e43106a294a5e2763307a992fbd5282000000002c20851e58dc1a2ceb7c7771822ed41c7d0994731d01829628c3e938f4155a276eb5bf4fffff001d01a1420f\n+0100000002954bf32d68d54adac42cb5190efc06f18ead35208dc14a8face6f1000000009002c5c2dfd0259960507e69399c688f0d74bbcd52c810cd2d2507a829133f4941bdbf4fffff001d01724be9\n+01000000add5df18f427437ace8b40064b3806583217a3f724672cf72cf8c18300000000bc652800c84513b2de38e0e97be92a582a628e1e49a9fe8d49aea5623251eda54abdbf4fffff001d045ec8ea\n+010000003b0c953fed585c1ac952df84e4c3953ba551da457c700035f6f3fc0c00000000831c01723b0fa955a6fbd51d9ddc5c77964814868f96f52ea3eaf3b66098e6df9dbdbf4fffff001d00cb77db\n+01000000f6667e8c4557c28f88b86a6892d03509a5afc9a89088a5bb8638eafa00000000ff61d87fbc86dac7f80962702153a2a6d9a84dac13c265106b883ed7ef68fc91cebdbf4fffff001d00e07f63\n+010000002cb99b76cd981a422d02d61684f76bacea92669298e552e412ce41df000000005f2a9977b14cf34078500f956be0cc154291ce5a0e34c00a3dbbae97bed5e930f5bdbf4fffff001d008fd760"
      },
      {
        "sha": "fd69bbd2c72f0f813324bbaf234cc943c4060284",
        "filename": "test/functional/data/invalid_txs.py",
        "status": "modified",
        "additions": 57,
        "deletions": 1,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/data/invalid_txs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/data/invalid_txs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/invalid_txs.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -24,7 +24,24 @@\n from test_framework.messages import CTransaction, CTxIn, CTxOut, COutPoint\n from test_framework import script as sc\n from test_framework.blocktools import create_tx_with_script, MAX_BLOCK_SIGOPS\n-\n+from test_framework.script import (\n+    CScript,\n+    OP_CAT,\n+    OP_SUBSTR,\n+    OP_LEFT,\n+    OP_RIGHT,\n+    OP_INVERT,\n+    OP_AND,\n+    OP_OR,\n+    OP_XOR,\n+    OP_2MUL,\n+    OP_2DIV,\n+    OP_MUL,\n+    OP_DIV,\n+    OP_MOD,\n+    OP_LSHIFT,\n+    OP_RSHIFT\n+)\n basic_p2sh = sc.CScript([sc.OP_HASH160, sc.hash160(sc.CScript([sc.OP_0])), sc.OP_EQUAL])\n \n \n@@ -82,6 +99,8 @@ def get_tx(self):\n         return tx\n \n \n+# The following check prevents exploit of lack of merkle\n+# tree depth commitment (CVE-2017-12842)\n class SizeTooSmall(BadTxTemplate):\n     reject_reason = \"tx-size-small\"\n     expect_disconnect = False\n@@ -178,7 +197,44 @@ def get_tx(self):\n             script_pub_key=lotsa_checksigs,\n             amount=1)\n \n+def getDisabledOpcodeTemplate(opcode):\n+    \"\"\" Creates disabled opcode tx template class\"\"\"\n+    def get_tx(self):\n+        tx = CTransaction()\n+        vin = self.valid_txin\n+        vin.scriptSig = CScript([opcode])\n+        tx.vin.append(vin)\n+        tx.vout.append(CTxOut(1, basic_p2sh))\n+        tx.calc_sha256()\n+        return tx\n+\n+    return type('DisabledOpcode_' + str(opcode), (BadTxTemplate,), {\n+        'reject_reason': \"disabled opcode\",\n+        'expect_disconnect': True,\n+        'get_tx': get_tx,\n+        'valid_in_block' : True\n+        })\n+\n+# Disabled opcode tx templates (CVE-2010-5137)\n+DisabledOpcodeTemplates = [getDisabledOpcodeTemplate(opcode) for opcode in [\n+    OP_CAT,\n+    OP_SUBSTR,\n+    OP_LEFT,\n+    OP_RIGHT,\n+    OP_INVERT,\n+    OP_AND,\n+    OP_OR,\n+    OP_XOR,\n+    OP_2MUL,\n+    OP_2DIV,\n+    OP_MUL,\n+    OP_DIV,\n+    OP_MOD,\n+    OP_LSHIFT,\n+    OP_RSHIFT]]\n+\n \n def iter_all_templates():\n     \"\"\"Iterate through all bad transaction template types.\"\"\"\n     return BadTxTemplate.__subclasses__()\n+"
      },
      {
        "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
        "filename": "test/functional/data/wallets/high_minversion/.walletlock",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/data/wallets/high_minversion/.walletlock",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/data/wallets/high_minversion/.walletlock",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/wallets/high_minversion/.walletlock?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900"
      },
      {
        "sha": "e55c4557cabbd1a6119f170bacde0068809057de",
        "filename": "test/functional/data/wallets/high_minversion/GENERATE.md",
        "status": "added",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/data/wallets/high_minversion/GENERATE.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/data/wallets/high_minversion/GENERATE.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/wallets/high_minversion/GENERATE.md?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -0,0 +1,8 @@\n+The wallet has been created by starting Bitcoin Core with the options\n+`-regtest -datadir=/tmp -nowallet -walletdir=$(pwd)/test/functional/data/wallets/`.\n+\n+In the source code, `WalletFeature::FEATURE_LATEST` has been modified to be large, so that the minversion is too high\n+for a current build of the wallet.\n+\n+The wallet has then been created with the RPC `createwallet high_minversion true true`, so that a blank wallet with\n+private keys disabled is created."
      },
      {
        "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
        "filename": "test/functional/data/wallets/high_minversion/db.log",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/data/wallets/high_minversion/db.log",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/data/wallets/high_minversion/db.log",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/wallets/high_minversion/db.log?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900"
      },
      {
        "sha": "99ab8092631c4a7da2236f46e7250e6c265d3b49",
        "filename": "test/functional/data/wallets/high_minversion/wallet.dat",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/data/wallets/high_minversion/wallet.dat",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/data/wallets/high_minversion/wallet.dat",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/wallets/high_minversion/wallet.dat?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900"
      },
      {
        "sha": "1b434c448536821ae9f6ca6851a66f617649c88e",
        "filename": "test/functional/feature_assumevalid.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/feature_assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/feature_assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_assumevalid.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -40,7 +40,7 @@\n     CTxIn,\n     CTxOut,\n     msg_block,\n-    msg_headers\n+    msg_headers,\n )\n from test_framework.mininode import P2PInterface\n from test_framework.script import (CScript, OP_TRUE)\n@@ -180,7 +180,7 @@ def run_test(self):\n         for i in range(2202):\n             p2p1.send_message(msg_block(self.blocks[i]))\n         # Syncing 2200 blocks can take a while on slow systems. Give it plenty of time to sync.\n-        p2p1.sync_with_ping(200)\n+        p2p1.sync_with_ping(960)\n         assert_equal(self.nodes[1].getblock(self.nodes[1].getbestblockhash())['height'], 2202)\n \n         # Send blocks to node2. Block 102 will be rejected."
      },
      {
        "sha": "c74270febc11fcca4e2092dbe1883cf95e7c8c31",
        "filename": "test/functional/feature_block.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/feature_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/feature_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_block.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -806,7 +806,7 @@ def run_test(self):\n         #\n         # Blocks are not allowed to contain a transaction whose id matches that of an earlier,\n         # not-fully-spent transaction in the same chain. To test, make identical coinbases;\n-        # the second one should be rejected.\n+        # the second one should be rejected. See also CVE-2012-1909.\n         #\n         self.log.info(\"Reject a block with a transaction with a duplicate hash of a previous transaction (BIP30)\")\n         self.move_tip(60)\n@@ -1261,7 +1261,7 @@ def run_test(self):\n             self.save_spendable_output()\n             spend = self.get_spendable_output()\n \n-        self.send_blocks(blocks, True, timeout=480)\n+        self.send_blocks(blocks, True, timeout=960)\n         chain1_tip = i\n \n         # now create alt chain of same length\n@@ -1273,14 +1273,14 @@ def run_test(self):\n \n         # extend alt chain to trigger re-org\n         block = self.next_block(\"alt\" + str(chain1_tip + 1), version=4)\n-        self.send_blocks([block], True, timeout=480)\n+        self.send_blocks([block], True, timeout=960)\n \n         # ... and re-org back to the first chain\n         self.move_tip(chain1_tip)\n         block = self.next_block(chain1_tip + 1, version=4)\n         self.send_blocks([block], False, force_send=True)\n         block = self.next_block(chain1_tip + 2, version=4)\n-        self.send_blocks([block], True, timeout=480)\n+        self.send_blocks([block], True, timeout=960)\n \n         self.log.info(\"Reject a block with an invalid block header version\")\n         b_v1 = self.next_block('b_v1', version=1)"
      },
      {
        "sha": "6bd6bb5b8c325b45745b10b87551de843a8c0bf7",
        "filename": "test/functional/feature_dbcrash.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/feature_dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/feature_dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dbcrash.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -50,7 +50,7 @@ class ChainstateWriteCrashTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = False\n-        self.rpc_timeout = 180\n+        self.rpc_timeout = 480\n \n         # Set -maxmempool=0 to turn off mempool memory sharing with dbcache\n         # Set -rpcservertimeout=900 to reduce socket disconnects in this"
      },
      {
        "sha": "e6ff21ee9c5ceed3d0140c4c884a2a8ace109b27",
        "filename": "test/functional/feature_logging.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/feature_logging.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/feature_logging.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_logging.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -36,7 +36,7 @@ def run_test(self):\n         invdir = self.relative_log_path(\"foo\")\n         invalidname = os.path.join(\"foo\", \"foo.log\")\n         self.stop_node(0)\n-        exp_stderr = \"Error: Could not open debug log file \\S+$\"\n+        exp_stderr = r\"Error: Could not open debug log file \\S+$\"\n         self.nodes[0].assert_start_raises_init_error([\"-debuglogfile=%s\" % (invalidname)], exp_stderr, match=ErrorMatch.FULL_REGEX)\n         assert not os.path.isfile(os.path.join(invdir, \"foo.log\"))\n "
      },
      {
        "sha": "da00b773ad1517477760e4d00a86f1cea717c5c5",
        "filename": "test/functional/feature_notifications.py",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/feature_notifications.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/feature_notifications.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_notifications.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -7,7 +7,11 @@\n \n from test_framework.address import ADDRESS_BCRT1_UNSPENDABLE\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, wait_until, connect_nodes_bi\n+from test_framework.util import (\n+    assert_equal,\n+    wait_until,\n+    connect_nodes,\n+)\n \n \n class NotificationsTest(BitcoinTestFramework):\n@@ -58,7 +62,7 @@ def run_test(self):\n             self.log.info(\"test -walletnotify after rescan\")\n             # restart node to rescan to force wallet notifications\n             self.start_node(1)\n-            connect_nodes_bi(self.nodes, 0, 1)\n+            connect_nodes(self.nodes[0], 1)\n \n             wait_until(lambda: len(os.listdir(self.walletnotify_dir)) == block_count, timeout=10)\n "
      },
      {
        "sha": "51523f13e706c6a0d77fa797473efa39024b4f46",
        "filename": "test/functional/feature_pruning.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/feature_pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/feature_pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_pruning.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -92,6 +92,7 @@ def set_test_params(self):\n             [\"-maxreceivebuffer=20000\"],\n             [\"-prune=550\"],\n         ]\n+        self.rpc_timeout = 120\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "d2826dd1b7fb6fddf5ba3573bbc47cc9d366c47c",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -257,7 +257,7 @@ def run_test(self):\n         tx.vin.append(CTxIn(COutPoint(int(txid2, 16), 0), b\"\"))\n         tx.vout.append(CTxOut(int(49.95 * COIN), CScript([OP_TRUE, OP_DROP] * 15 + [OP_TRUE])))  # Huge fee\n         tx.calc_sha256()\n-        txid3 = self.nodes[0].sendrawtransaction(ToHex(tx))\n+        txid3 = self.nodes[0].sendrawtransaction(ToHex(tx), 0)\n         assert tx.wit.is_null()\n         assert txid3 in self.nodes[0].getrawmempool()\n "
      },
      {
        "sha": "85c250173f7a3e8a23be9038c741b71bb35006ce",
        "filename": "test/functional/feature_uacomment.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/feature_uacomment.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/feature_uacomment.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_uacomment.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -27,12 +27,12 @@ def run_test(self):\n \n         self.log.info(\"test -uacomment max length\")\n         self.stop_node(0)\n-        expected = \"Error: Total length of network version string \\([0-9]+\\) exceeds maximum length \\(256\\). Reduce the number or size of uacomments.\"\n+        expected = r\"Error: Total length of network version string \\([0-9]+\\) exceeds maximum length \\(256\\). Reduce the number or size of uacomments.\"\n         self.nodes[0].assert_start_raises_init_error([\"-uacomment=\" + 'a' * 256], expected, match=ErrorMatch.FULL_REGEX)\n \n         self.log.info(\"test -uacomment unsafe characters\")\n         for unsafe_char in ['/', ':', '(', ')', '\u20bf', '\ud83c\udfc3']:\n-            expected = \"Error: User Agent comment \\(\" + re.escape(unsafe_char) + \"\\) contains unsafe characters.\"\n+            expected = r\"Error: User Agent comment \\(\" + re.escape(unsafe_char) + r\"\\) contains unsafe characters.\"\n             self.nodes[0].assert_start_raises_init_error([\"-uacomment=\" + unsafe_char], expected, match=ErrorMatch.FULL_REGEX)\n \n "
      },
      {
        "sha": "5aea10fbce53d0278e15979819a6f56e2042b4d3",
        "filename": "test/functional/interface_zmq.py",
        "status": "modified",
        "additions": 61,
        "deletions": 38,
        "changes": 99,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/interface_zmq.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/interface_zmq.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_zmq.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -8,10 +8,9 @@\n from test_framework.address import ADDRESS_BCRT1_UNSPENDABLE\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.messages import CTransaction, hash256\n-from test_framework.util import assert_equal\n+from test_framework.util import assert_equal, connect_nodes\n from io import BytesIO\n-\n-ADDRESS = \"tcp://127.0.0.1:28332\"\n+from time import sleep\n \n def hash256_reversed(byte_str):\n     return hash256(byte_str)[::-1]\n@@ -43,66 +42,64 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_py3_zmq()\n         self.skip_if_no_bitcoind_zmq()\n \n-    def setup_nodes(self):\n+    def run_test(self):\n         import zmq\n+        self.ctx = zmq.Context()\n+        try:\n+            self.test_basic()\n+            self.test_reorg()\n+        finally:\n+            # Destroy the ZMQ context.\n+            self.log.debug(\"Destroying ZMQ context\")\n+            self.ctx.destroy(linger=None)\n \n-        # Initialize ZMQ context and socket.\n+    def test_basic(self):\n         # All messages are received in the same socket which means\n         # that this test fails if the publishing order changes.\n         # Note that the publishing order is not defined in the documentation and\n         # is subject to change.\n-        self.zmq_context = zmq.Context()\n-        socket = self.zmq_context.socket(zmq.SUB)\n+        import zmq\n+        address = 'tcp://127.0.0.1:28332'\n+        socket = self.ctx.socket(zmq.SUB)\n         socket.set(zmq.RCVTIMEO, 60000)\n-        socket.connect(ADDRESS)\n \n         # Subscribe to all available topics.\n-        self.hashblock = ZMQSubscriber(socket, b\"hashblock\")\n-        self.hashtx = ZMQSubscriber(socket, b\"hashtx\")\n-        self.rawblock = ZMQSubscriber(socket, b\"rawblock\")\n-        self.rawtx = ZMQSubscriber(socket, b\"rawtx\")\n-\n-        self.extra_args = [\n-            [\"-zmqpub%s=%s\" % (sub.topic.decode(), ADDRESS) for sub in [self.hashblock, self.hashtx, self.rawblock, self.rawtx]],\n-            [],\n-        ]\n-        self.add_nodes(self.num_nodes, self.extra_args)\n-        self.start_nodes()\n-        self.import_deterministic_coinbase_privkeys()\n+        hashblock = ZMQSubscriber(socket, b\"hashblock\")\n+        hashtx = ZMQSubscriber(socket, b\"hashtx\")\n+        rawblock = ZMQSubscriber(socket, b\"rawblock\")\n+        rawtx = ZMQSubscriber(socket, b\"rawtx\")\n \n-    def run_test(self):\n-        try:\n-            self._zmq_test()\n-        finally:\n-            # Destroy the ZMQ context.\n-            self.log.debug(\"Destroying ZMQ context\")\n-            self.zmq_context.destroy(linger=None)\n+        self.restart_node(0, [\"-zmqpub%s=%s\" % (sub.topic.decode(), address) for sub in [hashblock, hashtx, rawblock, rawtx]])\n+        connect_nodes(self.nodes[0], 1)\n+        socket.connect(address)\n+        # Relax so that the subscriber is ready before publishing zmq messages\n+        sleep(0.2)\n \n-    def _zmq_test(self):\n         num_blocks = 5\n         self.log.info(\"Generate %(n)d blocks (and %(n)d coinbase txes)\" % {\"n\": num_blocks})\n         genhashes = self.nodes[0].generatetoaddress(num_blocks, ADDRESS_BCRT1_UNSPENDABLE)\n+\n         self.sync_all()\n \n         for x in range(num_blocks):\n             # Should receive the coinbase txid.\n-            txid = self.hashtx.receive()\n+            txid = hashtx.receive()\n \n             # Should receive the coinbase raw transaction.\n-            hex = self.rawtx.receive()\n+            hex = rawtx.receive()\n             tx = CTransaction()\n             tx.deserialize(BytesIO(hex))\n             tx.calc_sha256()\n             assert_equal(tx.hash, txid.hex())\n \n             # Should receive the generated block hash.\n-            hash = self.hashblock.receive().hex()\n+            hash = hashblock.receive().hex()\n             assert_equal(genhashes[x], hash)\n             # The block should only have the coinbase txid.\n             assert_equal([txid.hex()], self.nodes[1].getblock(hash)[\"tx\"])\n \n             # Should receive the generated raw block.\n-            block = self.rawblock.receive()\n+            block = rawblock.receive()\n             assert_equal(genhashes[x], hash256_reversed(block[:80]).hex())\n \n         if self.is_wallet_compiled():\n@@ -111,23 +108,49 @@ def _zmq_test(self):\n             self.sync_all()\n \n             # Should receive the broadcasted txid.\n-            txid = self.hashtx.receive()\n+            txid = hashtx.receive()\n             assert_equal(payment_txid, txid.hex())\n \n             # Should receive the broadcasted raw transaction.\n-            hex = self.rawtx.receive()\n+            hex = rawtx.receive()\n             assert_equal(payment_txid, hash256_reversed(hex).hex())\n \n \n         self.log.info(\"Test the getzmqnotifications RPC\")\n         assert_equal(self.nodes[0].getzmqnotifications(), [\n-            {\"type\": \"pubhashblock\", \"address\": ADDRESS, \"hwm\": 1000},\n-            {\"type\": \"pubhashtx\", \"address\": ADDRESS, \"hwm\": 1000},\n-            {\"type\": \"pubrawblock\", \"address\": ADDRESS, \"hwm\": 1000},\n-            {\"type\": \"pubrawtx\", \"address\": ADDRESS, \"hwm\": 1000},\n+            {\"type\": \"pubhashblock\", \"address\": address, \"hwm\": 1000},\n+            {\"type\": \"pubhashtx\", \"address\": address, \"hwm\": 1000},\n+            {\"type\": \"pubrawblock\", \"address\": address, \"hwm\": 1000},\n+            {\"type\": \"pubrawtx\", \"address\": address, \"hwm\": 1000},\n         ])\n \n         assert_equal(self.nodes[1].getzmqnotifications(), [])\n \n+    def test_reorg(self):\n+        import zmq\n+        address = 'tcp://127.0.0.1:28333'\n+        socket = self.ctx.socket(zmq.SUB)\n+        socket.set(zmq.RCVTIMEO, 60000)\n+        hashblock = ZMQSubscriber(socket, b'hashblock')\n+\n+        # Should only notify the tip if a reorg occurs\n+        self.restart_node(0, ['-zmqpub%s=%s' % (hashblock.topic.decode(), address)])\n+        socket.connect(address)\n+        # Relax so that the subscriber is ready before publishing zmq messages\n+        sleep(0.2)\n+\n+        # Generate 1 block in nodes[0] and receive all notifications\n+        self.nodes[0].generatetoaddress(1, ADDRESS_BCRT1_UNSPENDABLE)\n+        assert_equal(self.nodes[0].getbestblockhash(), hashblock.receive().hex())\n+\n+        # Generate 2 blocks in nodes[1]\n+        self.nodes[1].generatetoaddress(2, ADDRESS_BCRT1_UNSPENDABLE)\n+\n+        # nodes[0] will reorg chain after connecting back nodes[1]\n+        connect_nodes(self.nodes[0], 1)\n+\n+        # Should receive nodes[1] tip\n+        assert_equal(self.nodes[1].getbestblockhash(), hashblock.receive().hex())\n+\n if __name__ == '__main__':\n     ZMQTest().main()"
      },
      {
        "sha": "dee7a04516a7612e48f2b40e7ef5cae58cb2ebb1",
        "filename": "test/functional/mempool_accept.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/mempool_accept.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/mempool_accept.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_accept.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -183,6 +183,7 @@ def run_test(self):\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': True}],\n             rawtxs=[tx.serialize().hex()],\n+            maxfeerate=0,\n         )\n \n         self.log.info('A transaction with no outputs')\n@@ -211,6 +212,7 @@ def run_test(self):\n             rawtxs=[tx.serialize().hex()],\n         )\n \n+        # The following two validations prevent overflow of the output amounts (see CVE-2010-5139).\n         self.log.info('A transaction with too large output value')\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n         tx.vout[0].nValue = 21000000 * COIN + 1"
      },
      {
        "sha": "0739d7e29b373eb70ef99613413a296ae280b135",
        "filename": "test/functional/mempool_package_onemore.py",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/mempool_package_onemore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/mempool_package_onemore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_package_onemore.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -33,7 +33,7 @@ def chain_transaction(self, node, parent_txids, vouts, value, fee, num_outputs):\n         outputs = {}\n         for i in range(num_outputs):\n             outputs[node.getnewaddress()] = send_value\n-        rawtx = node.createrawtransaction(inputs, outputs)\n+        rawtx = node.createrawtransaction(inputs, outputs, 0, True)\n         signedtx = node.signrawtransactionwithwallet(rawtx)\n         txid = node.sendrawtransaction(signedtx['hex'])\n         fulltx = node.getrawtransaction(txid, 1)\n@@ -75,10 +75,16 @@ def run_test(self):\n         # ...especially if its > 40k weight\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_transaction, self.nodes[0], [chain[0][0]], [1], chain[0][1], fee, 350)\n         # But not if it chains directly off the first transaction\n-        self.chain_transaction(self.nodes[0], [chain[0][0]], [1], chain[0][1], fee, 1)\n+        (replacable_txid, replacable_orig_value) = self.chain_transaction(self.nodes[0], [chain[0][0]], [1], chain[0][1], fee, 1)\n         # and the second chain should work just fine\n         self.chain_transaction(self.nodes[0], [second_chain], [0], second_chain_value, fee, 1)\n \n+        # Make sure we can RBF the chain which used our carve-out rule\n+        second_tx_outputs = {self.nodes[0].getrawtransaction(replacable_txid, True)[\"vout\"][0]['scriptPubKey']['addresses'][0]: replacable_orig_value - (Decimal(1) / Decimal(100))}\n+        second_tx = self.nodes[0].createrawtransaction([{'txid': chain[0][0], 'vout': 1}], second_tx_outputs)\n+        signed_second_tx = self.nodes[0].signrawtransactionwithwallet(second_tx)\n+        self.nodes[0].sendrawtransaction(signed_second_tx['hex'])\n+\n         # Finally, check that we added two transactions\n         assert_equal(len(self.nodes[0].getrawmempool(True)), MAX_ANCESTORS + 3)\n "
      },
      {
        "sha": "f9231614ce04ca56fcea2eb414131eb6109c16e8",
        "filename": "test/functional/mining_basic.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/mining_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/mining_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_basic.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -27,7 +27,7 @@\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n-    connect_nodes_bi,\n+    connect_nodes,\n )\n from test_framework.script import CScriptNum\n \n@@ -54,7 +54,7 @@ def mine_chain(self):\n         assert_equal(mining_info['currentblocktx'], 0)\n         assert_equal(mining_info['currentblockweight'], 4000)\n         self.restart_node(0)\n-        connect_nodes_bi(self.nodes, 0, 1)\n+        connect_nodes(self.nodes[0], 1)\n \n     def run_test(self):\n         self.mine_chain()"
      },
      {
        "sha": "3258a38e3cba70cf6831320f7e5a21246d1fa927",
        "filename": "test/functional/p2p_blocksonly.py",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/p2p_blocksonly.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/p2p_blocksonly.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_blocksonly.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -19,7 +19,7 @@ def set_test_params(self):\n     def run_test(self):\n         self.nodes[0].add_p2p_connection(P2PInterface())\n \n-        self.log.info('Check that txs from p2p are rejected')\n+        self.log.info('Check that txs from p2p are rejected and result in disconnect')\n         prevtx = self.nodes[0].getblock(self.nodes[0].getblockhash(1), 2)['tx'][0]\n         rawtx = self.nodes[0].createrawtransaction(\n             inputs=[{\n@@ -42,13 +42,17 @@ def run_test(self):\n         assert_equal(self.nodes[0].getnetworkinfo()['localrelay'], False)\n         with self.nodes[0].assert_debug_log(['transaction sent in violation of protocol peer=0']):\n             self.nodes[0].p2p.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n-            self.nodes[0].p2p.sync_with_ping()\n+            self.nodes[0].p2p.wait_for_disconnect()\n             assert_equal(self.nodes[0].getmempoolinfo()['size'], 0)\n \n+        # Remove the disconnected peer and add a new one.\n+        del self.nodes[0].p2ps[0]\n+        self.nodes[0].add_p2p_connection(P2PInterface())\n+\n         self.log.info('Check that txs from rpc are not rejected and relayed to other peers')\n         assert_equal(self.nodes[0].getpeerinfo()[0]['relaytxes'], True)\n         txid = self.nodes[0].testmempoolaccept([sigtx])[0]['txid']\n-        with self.nodes[0].assert_debug_log(['received getdata for: tx {} peer=0'.format(txid)]):\n+        with self.nodes[0].assert_debug_log(['received getdata for: tx {} peer=1'.format(txid)]):\n             self.nodes[0].sendrawtransaction(sigtx)\n             self.nodes[0].p2p.wait_for_tx(txid)\n             assert_equal(self.nodes[0].getmempoolinfo()['size'], 1)"
      },
      {
        "sha": "23dea4b7299b3eb39930ed1976b99e5394fb6901",
        "filename": "test/functional/p2p_disconnect_ban.py",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/p2p_disconnect_ban.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/p2p_disconnect_ban.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_disconnect_ban.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -9,7 +9,7 @@\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n-    connect_nodes_bi,\n+    connect_nodes,\n     wait_until,\n )\n \n@@ -18,6 +18,10 @@ def set_test_params(self):\n         self.num_nodes = 2\n \n     def run_test(self):\n+        self.log.info(\"Connect nodes both way\")\n+        connect_nodes(self.nodes[0], 1)\n+        connect_nodes(self.nodes[1], 0)\n+\n         self.log.info(\"Test setban and listbanned RPCs\")\n \n         self.log.info(\"setban: successfully ban single IP address\")\n@@ -74,7 +78,9 @@ def run_test(self):\n \n         # Clear ban lists\n         self.nodes[1].clearbanned()\n-        connect_nodes_bi(self.nodes, 0, 1)\n+        self.log.info(\"Connect nodes both way\")\n+        connect_nodes(self.nodes[0], 1)\n+        connect_nodes(self.nodes[1], 0)\n \n         self.log.info(\"Test disconnectnode RPCs\")\n \n@@ -93,7 +99,7 @@ def run_test(self):\n         assert not [node for node in self.nodes[0].getpeerinfo() if node['addr'] == address1]\n \n         self.log.info(\"disconnectnode: successfully reconnect node\")\n-        connect_nodes_bi(self.nodes, 0, 1)  # reconnect the node\n+        connect_nodes(self.nodes[0], 1)  # reconnect the node\n         assert_equal(len(self.nodes[0].getpeerinfo()), 2)\n         assert [node for node in self.nodes[0].getpeerinfo() if node['addr'] == address1]\n "
      },
      {
        "sha": "7d386c47f6e5acc9f45bf2897bacf60a03442422",
        "filename": "test/functional/p2p_dos_header_tree.py",
        "status": "added",
        "additions": 90,
        "deletions": 0,
        "changes": 90,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/p2p_dos_header_tree.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/p2p_dos_header_tree.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_dos_header_tree.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -0,0 +1,90 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that we reject low difficulty headers to prevent our block tree from filling up with useless bloat\"\"\"\n+\n+from test_framework.messages import (\n+    CBlockHeader,\n+    FromHex,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+    msg_headers,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import os\n+\n+\n+class RejectLowDifficultyHeadersTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.chain = 'testnet3'  # Use testnet chain because it has an early checkpoint\n+        self.num_nodes = 2\n+\n+    def add_options(self, parser):\n+        parser.add_argument(\n+            '--datafile',\n+            default='data/blockheader_testnet3.hex',\n+            help='Test data file (default: %(default)s)',\n+        )\n+\n+    def run_test(self):\n+        self.log.info(\"Read headers data\")\n+        self.headers_file_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), self.options.datafile)\n+        with open(self.headers_file_path, encoding='utf-8') as headers_data:\n+            h_lines = [l.strip() for l in headers_data.readlines()]\n+\n+        # The headers data is taken from testnet3 for early blocks from genesis until the first checkpoint. There are\n+        # two headers with valid POW at height 1 and 2, forking off from genesis. They are indicated by the FORK_PREFIX.\n+        FORK_PREFIX = 'fork:'\n+        self.headers = [l for l in h_lines if not l.startswith(FORK_PREFIX)]\n+        self.headers_fork = [l[len(FORK_PREFIX):] for l in h_lines if l.startswith(FORK_PREFIX)]\n+\n+        self.headers = [FromHex(CBlockHeader(), h) for h in self.headers]\n+        self.headers_fork = [FromHex(CBlockHeader(), h) for h in self.headers_fork]\n+\n+        self.log.info(\"Feed all non-fork headers, including and up to the first checkpoint\")\n+        self.nodes[0].add_p2p_connection(P2PInterface())\n+        self.nodes[0].p2p.send_message(msg_headers(self.headers))\n+        self.nodes[0].p2p.sync_with_ping()\n+        assert {\n+            'height': 546,\n+            'hash': '000000002a936ca763904c3c35fce2f3556c559c0214345d31b1bcebf76acb70',\n+            'branchlen': 546,\n+            'status': 'headers-only',\n+        } in self.nodes[0].getchaintips()\n+\n+        self.log.info(\"Feed all fork headers (fails due to checkpoint)\")\n+        with self.nodes[0].assert_debug_log(['bad-fork-prior-to-checkpoint (code 67)']):\n+            self.nodes[0].p2p.send_message(msg_headers(self.headers_fork))\n+            self.nodes[0].p2p.wait_for_disconnect()\n+\n+        self.log.info(\"Feed all fork headers (succeeds without checkpoint)\")\n+        # On node 0 it succeeds because checkpoints are disabled\n+        self.restart_node(0, extra_args=['-nocheckpoints'])\n+        self.nodes[0].add_p2p_connection(P2PInterface())\n+        self.nodes[0].p2p.send_message(msg_headers(self.headers_fork))\n+        self.nodes[0].p2p.sync_with_ping()\n+        assert {\n+            \"height\": 2,\n+            \"hash\": \"00000000b0494bd6c3d5ff79c497cfce40831871cbf39b1bc28bd1dac817dc39\",\n+            \"branchlen\": 2,\n+            \"status\": \"headers-only\",\n+        } in self.nodes[0].getchaintips()\n+\n+        # On node 1 it succeeds because no checkpoint has been reached yet by a chain tip\n+        self.nodes[1].add_p2p_connection(P2PInterface())\n+        self.nodes[1].p2p.send_message(msg_headers(self.headers_fork))\n+        self.nodes[1].p2p.sync_with_ping()\n+        assert {\n+            \"height\": 2,\n+            \"hash\": \"00000000b0494bd6c3d5ff79c497cfce40831871cbf39b1bc28bd1dac817dc39\",\n+            \"branchlen\": 2,\n+            \"status\": \"headers-only\",\n+        } in self.nodes[1].getchaintips()\n+\n+\n+if __name__ == '__main__':\n+    RejectLowDifficultyHeadersTest().main()"
      },
      {
        "sha": "905534b862f8d4b92c9e2db719de03cdcc2e8523",
        "filename": "test/functional/p2p_invalid_block.py",
        "status": "modified",
        "additions": 36,
        "deletions": 8,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/p2p_invalid_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/p2p_invalid_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_block.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -53,10 +53,11 @@ def run_test(self):\n         block_time = best_block[\"time\"] + 1\n \n         # Use merkle-root malleability to generate an invalid block with\n-        # same blockheader.\n+        # same blockheader (CVE-2012-2459).\n         # Manufacture a block with 3 transactions (coinbase, spend of prior\n         # coinbase, spend of that spend).  Duplicate the 3rd transaction to\n         # leave merkle root and blockheader unchanged but invalidate the block.\n+        # For more information on merkle-root malleability see src/consensus/merkle.cpp.\n         self.log.info(\"Test merkle root malleability.\")\n \n         block2 = create_block(tip, create_coinbase(height), block_time)\n@@ -81,15 +82,16 @@ def run_test(self):\n \n         node.p2p.send_blocks_and_test([block2], node, success=False, reject_reason='bad-txns-duplicate')\n \n-        # Check transactions for duplicate inputs\n+        # Check transactions for duplicate inputs (CVE-2018-17144)\n         self.log.info(\"Test duplicate input block.\")\n \n-        block2_orig.vtx[2].vin.append(block2_orig.vtx[2].vin[0])\n-        block2_orig.vtx[2].rehash()\n-        block2_orig.hashMerkleRoot = block2_orig.calc_merkle_root()\n-        block2_orig.rehash()\n-        block2_orig.solve()\n-        node.p2p.send_blocks_and_test([block2_orig], node, success=False, reject_reason='bad-txns-inputs-duplicate')\n+        block2_dup = copy.deepcopy(block2_orig)\n+        block2_dup.vtx[2].vin.append(block2_dup.vtx[2].vin[0])\n+        block2_dup.vtx[2].rehash()\n+        block2_dup.hashMerkleRoot = block2_dup.calc_merkle_root()\n+        block2_dup.rehash()\n+        block2_dup.solve()\n+        node.p2p.send_blocks_and_test([block2_dup], node, success=False, reject_reason='bad-txns-inputs-duplicate')\n \n         self.log.info(\"Test very broken block.\")\n \n@@ -105,5 +107,31 @@ def run_test(self):\n         node.p2p.send_blocks_and_test([block3], node, success=False, reject_reason='bad-cb-amount')\n \n \n+        # Complete testing of CVE-2012-2459 by sending the original block.\n+        # It should be accepted even though it has the same hash as the mutated one.\n+\n+        self.log.info(\"Test accepting original block after rejecting its mutated version.\")\n+        node.p2p.send_blocks_and_test([block2_orig], node, success=True, timeout=5)\n+\n+        # Update tip info\n+        height += 1\n+        block_time += 1\n+        tip = int(block2_orig.hash, 16)\n+\n+        # Complete testing of CVE-2018-17144, by checking for the inflation bug.\n+        # Create a block that spends the output of a tx in a previous block.\n+        block4 = create_block(tip, create_coinbase(height), block_time)\n+        tx3 = create_tx_with_script(tx2, 0, script_sig=b'\\x51', amount=50 * COIN)\n+\n+        # Duplicates input\n+        tx3.vin.append(tx3.vin[0])\n+        tx3.rehash()\n+        block4.vtx.append(tx3)\n+        block4.hashMerkleRoot = block4.calc_merkle_root()\n+        block4.rehash()\n+        block4.solve()\n+        self.log.info(\"Test inflation by duplicating input\")\n+        node.p2p.send_blocks_and_test([block4], node, success=False,  reject_reason='bad-txns-inputs-duplicate')\n+\n if __name__ == '__main__':\n     InvalidBlockRequestTest().main()"
      },
      {
        "sha": "58c72f89d816cc1811b18c7f073a6ef65419c3ab",
        "filename": "test/functional/p2p_invalid_messages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/p2p_invalid_messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/p2p_invalid_messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_messages.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -85,7 +85,7 @@ def run_test(self):\n \n             # Peer 1, despite serving up a bunch of nonsense, should still be connected.\n             self.log.info(\"Waiting for node to drop junk messages.\")\n-            node.p2p.sync_with_ping(timeout=120)\n+            node.p2p.sync_with_ping(timeout=320)\n             assert node.p2p.is_connected\n \n         #"
      },
      {
        "sha": "e6451d9f18c7b820ecde199aeb36bef95e195e50",
        "filename": "test/functional/p2p_node_network_limited.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/p2p_node_network_limited.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/p2p_node_network_limited.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_node_network_limited.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -14,7 +14,7 @@\n from test_framework.util import (\n     assert_equal,\n     disconnect_nodes,\n-    connect_nodes_bi,\n+    connect_nodes,\n     wait_until,\n )\n \n@@ -64,7 +64,7 @@ def run_test(self):\n         assert_equal(int(self.nodes[0].getnetworkinfo()['localservices'], 16), expected_services)\n \n         self.log.info(\"Mine enough blocks to reach the NODE_NETWORK_LIMITED range.\")\n-        connect_nodes_bi(self.nodes, 0, 1)\n+        connect_nodes(self.nodes[0], 1)\n         blocks = self.nodes[1].generatetoaddress(292, self.nodes[1].get_deterministic_priv_key().address)\n         self.sync_blocks([self.nodes[0], self.nodes[1]])\n \n@@ -90,7 +90,7 @@ def run_test(self):\n \n         # connect unsynced node 2 with pruned NODE_NETWORK_LIMITED peer\n         # because node 2 is in IBD and node 0 is a NODE_NETWORK_LIMITED peer, sync must not be possible\n-        connect_nodes_bi(self.nodes, 0, 2)\n+        connect_nodes(self.nodes[0], 2)\n         try:\n             self.sync_blocks([self.nodes[0], self.nodes[2]], timeout=5)\n         except:\n@@ -99,7 +99,7 @@ def run_test(self):\n         assert_equal(self.nodes[2].getblockheader(self.nodes[2].getbestblockhash())['height'], 0)\n \n         # now connect also to node 1 (non pruned)\n-        connect_nodes_bi(self.nodes, 1, 2)\n+        connect_nodes(self.nodes[1], 2)\n \n         # sync must be possible\n         self.sync_blocks()\n@@ -111,7 +111,7 @@ def run_test(self):\n         self.nodes[0].generatetoaddress(10, self.nodes[0].get_deterministic_priv_key().address)\n \n         # connect node1 (non pruned) with node0 (pruned) and check if the can sync\n-        connect_nodes_bi(self.nodes, 0, 1)\n+        connect_nodes(self.nodes[0], 1)\n \n         # sync must be possible, node 1 is no longer in IBD and should therefore connect to node 0 (NODE_NETWORK_LIMITED)\n         self.sync_blocks([self.nodes[0], self.nodes[1]])"
      },
      {
        "sha": "aada04f66f686398fd9d085fa91a9b8e327c5fff",
        "filename": "test/functional/p2p_tx_download.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/p2p_tx_download.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/p2p_tx_download.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_tx_download.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -121,6 +121,7 @@ def test_inv_block(self):\n         #   peer, plus\n         # * the first time it is re-requested from the outbound peer, plus\n         # * 2 seconds to avoid races\n+        assert self.nodes[1].getpeerinfo()[0]['inbound'] == False\n         timeout = 2 + (MAX_GETDATA_RANDOM_DELAY + INBOUND_PEER_TX_DELAY) + (\n             GETDATA_TX_INTERVAL + MAX_GETDATA_RANDOM_DELAY)\n         self.log.info(\"Tx should be received at node 1 after {} seconds\".format(timeout))"
      },
      {
        "sha": "266a0d6cd2d5e7bf1915f74c9765a66c2d17bc45",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -186,6 +186,7 @@ def _test_getchaintxstats(self):\n         assert_equal(chaintxstats['time'], b200['time'])\n         assert_equal(chaintxstats['txcount'], 201)\n         assert_equal(chaintxstats['window_final_block_hash'], b200_hash)\n+        assert_equal(chaintxstats['window_final_block_height'], 200)\n         assert_equal(chaintxstats['window_block_count'], 199)\n         assert_equal(chaintxstats['window_tx_count'], 199)\n         assert_equal(chaintxstats['window_interval'], time_diff)\n@@ -195,6 +196,7 @@ def _test_getchaintxstats(self):\n         assert_equal(chaintxstats['time'], b1['time'])\n         assert_equal(chaintxstats['txcount'], 2)\n         assert_equal(chaintxstats['window_final_block_hash'], b1_hash)\n+        assert_equal(chaintxstats['window_final_block_height'], 1)\n         assert_equal(chaintxstats['window_block_count'], 0)\n         assert 'window_tx_count' not in chaintxstats\n         assert 'window_interval' not in chaintxstats"
      },
      {
        "sha": "056e193d55a6a49fc867b5a2a739b7775503d755",
        "filename": "test/functional/rpc_createmultisig.py",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/rpc_createmultisig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/rpc_createmultisig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_createmultisig.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -134,6 +134,27 @@ def do_multisig(self):\n \n         assert_raises_rpc_error(-8, \"Missing redeemScript/witnessScript\", node2.signrawtransactionwithkey, rawtx, self.priv[0:self.nsigs-1], [prevtx_err])\n \n+        # if witnessScript specified, all ok\n+        prevtx_err[\"witnessScript\"] = prevtxs[0][\"redeemScript\"]\n+        node2.signrawtransactionwithkey(rawtx, self.priv[0:self.nsigs-1], [prevtx_err])\n+\n+        # both specified, also ok\n+        prevtx_err[\"redeemScript\"] = prevtxs[0][\"redeemScript\"]\n+        node2.signrawtransactionwithkey(rawtx, self.priv[0:self.nsigs-1], [prevtx_err])\n+\n+        # redeemScript mismatch to witnessScript\n+        prevtx_err[\"redeemScript\"] = \"6a\" # OP_RETURN\n+        assert_raises_rpc_error(-8, \"redeemScript does not correspond to witnessScript\", node2.signrawtransactionwithkey, rawtx, self.priv[0:self.nsigs-1], [prevtx_err])\n+\n+        # redeemScript does not match scriptPubKey\n+        del prevtx_err[\"witnessScript\"]\n+        assert_raises_rpc_error(-8, \"redeemScript/witnessScript does not match scriptPubKey\", node2.signrawtransactionwithkey, rawtx, self.priv[0:self.nsigs-1], [prevtx_err])\n+\n+        # witnessScript does not match scriptPubKey\n+        prevtx_err[\"witnessScript\"] = prevtx_err[\"redeemScript\"]\n+        del prevtx_err[\"redeemScript\"]\n+        assert_raises_rpc_error(-8, \"redeemScript/witnessScript does not match scriptPubKey\", node2.signrawtransactionwithkey, rawtx, self.priv[0:self.nsigs-1], [prevtx_err])\n+\n         rawtx2 = node2.signrawtransactionwithkey(rawtx, self.priv[0:self.nsigs - 1], prevtxs)\n         rawtx3 = node2.signrawtransactionwithkey(rawtx2[\"hex\"], [self.priv[-1]], prevtxs)\n "
      },
      {
        "sha": "c956af1cbe22ecd3890abdf1920e6b4d6d675457",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -12,7 +12,7 @@\n     assert_greater_than,\n     assert_greater_than_or_equal,\n     assert_raises_rpc_error,\n-    connect_nodes_bi,\n+    connect_nodes,\n     count_bytes,\n     find_vout_for_address,\n )\n@@ -35,10 +35,10 @@ def skip_test_if_missing_module(self):\n     def setup_network(self):\n         self.setup_nodes()\n \n-        connect_nodes_bi(self.nodes, 0, 1)\n-        connect_nodes_bi(self.nodes, 1, 2)\n-        connect_nodes_bi(self.nodes, 0, 2)\n-        connect_nodes_bi(self.nodes, 0, 3)\n+        connect_nodes(self.nodes[0], 1)\n+        connect_nodes(self.nodes[1], 2)\n+        connect_nodes(self.nodes[0], 2)\n+        connect_nodes(self.nodes[0], 3)\n \n     def run_test(self):\n         self.min_relay_tx_fee = self.nodes[0].getnetworkinfo()['relayfee']\n@@ -508,10 +508,10 @@ def test_locked_wallet(self):\n         for node in self.nodes:\n             node.settxfee(self.min_relay_tx_fee)\n \n-        connect_nodes_bi(self.nodes,0,1)\n-        connect_nodes_bi(self.nodes,1,2)\n-        connect_nodes_bi(self.nodes,0,2)\n-        connect_nodes_bi(self.nodes,0,3)\n+        connect_nodes(self.nodes[0], 1)\n+        connect_nodes(self.nodes[1], 2)\n+        connect_nodes(self.nodes[0], 2)\n+        connect_nodes(self.nodes[0], 3)\n         # Again lock the watchonly UTXO or nodes[0] may spend it, because\n         # lockunspent is memory-only and thus lost on restart\n         self.nodes[0].lockunspent(False, [{\"txid\": self.watchonly_txid, \"vout\": self.watchonly_vout}])"
      },
      {
        "sha": "595b40f7cb4c6260fa8c5e8e52063daa4c8df0bb",
        "filename": "test/functional/rpc_invalidateblock.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/rpc_invalidateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/rpc_invalidateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_invalidateblock.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -8,7 +8,7 @@\n from test_framework.address import ADDRESS_BCRT1_UNSPENDABLE\n from test_framework.util import (\n     assert_equal,\n-    connect_nodes_bi,\n+    connect_nodes,\n     wait_until,\n )\n \n@@ -33,7 +33,7 @@ def run_test(self):\n         assert_equal(self.nodes[1].getblockcount(), 6)\n \n         self.log.info(\"Connect nodes to force a reorg\")\n-        connect_nodes_bi(self.nodes, 0, 1)\n+        connect_nodes(self.nodes[0], 1)\n         self.sync_blocks(self.nodes[0:2])\n         assert_equal(self.nodes[0].getblockcount(), 6)\n         badhash = self.nodes[1].getblockhash(2)\n@@ -44,7 +44,7 @@ def run_test(self):\n         assert_equal(self.nodes[0].getbestblockhash(), besthash_n0)\n \n         self.log.info(\"Make sure we won't reorg to a lower work chain:\")\n-        connect_nodes_bi(self.nodes, 1, 2)\n+        connect_nodes(self.nodes[1], 2)\n         self.log.info(\"Sync node 2 to node 1 so both have 6 blocks\")\n         self.sync_blocks(self.nodes[1:3])\n         assert_equal(self.nodes[2].getblockcount(), 6)"
      },
      {
        "sha": "e24bf3111be254b88b23d225864b95a82b0a161f",
        "filename": "test/functional/rpc_net.py",
        "status": "modified",
        "additions": 46,
        "deletions": 6,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/rpc_net.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/rpc_net.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_net.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -15,12 +15,37 @@\n     assert_greater_than_or_equal,\n     assert_greater_than,\n     assert_raises_rpc_error,\n-    connect_nodes_bi,\n+    connect_nodes,\n     p2p_port,\n     wait_until,\n )\n from test_framework.mininode import P2PInterface\n-from test_framework.messages import CAddress, msg_addr, NODE_NETWORK, NODE_WITNESS\n+from test_framework.messages import (\n+    CAddress,\n+    msg_addr,\n+    NODE_NETWORK,\n+    NODE_WITNESS,\n+    NODE_GETUTXO,NODE_BLOOM,\n+    NODE_NETWORK_LIMITED,\n+)\n+\n+def assert_net_servicesnames(servicesflag, servicenames):\n+    \"\"\"Utility that checks if all flags are correctly decoded in\n+    `getpeerinfo` and `getnetworkinfo`.\n+\n+    :param servicesflag: The services as an integer.\n+    :param servicesnames: The list of decoded services names, as strings.\n+    \"\"\"\n+    if servicesflag & NODE_NETWORK:\n+        assert \"NETWORK\" in servicenames\n+    if servicesflag & NODE_GETUTXO:\n+        assert \"GETUTXO\" in servicenames\n+    if servicesflag & NODE_BLOOM:\n+        assert \"BLOOM\" in servicenames\n+    if servicesflag & NODE_WITNESS:\n+        assert \"WITNESS\" in servicenames\n+    if servicesflag & NODE_NETWORK_LIMITED:\n+        assert \"NETWORK_LIMITED\" in servicenames\n \n class NetTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -29,15 +54,19 @@ def set_test_params(self):\n         self.extra_args = [[\"-minrelaytxfee=0.00001000\"],[\"-minrelaytxfee=0.00000500\"]]\n \n     def run_test(self):\n+        self.log.info('Connect nodes both way')\n+        connect_nodes(self.nodes[0], 1)\n+        connect_nodes(self.nodes[1], 0)\n+\n         self._test_connection_count()\n         self._test_getnettotals()\n-        self._test_getnetworkinginfo()\n+        self._test_getnetworkinfo()\n         self._test_getaddednodeinfo()\n         self._test_getpeerinfo()\n         self._test_getnodeaddresses()\n \n     def _test_connection_count(self):\n-        # connect_nodes_bi connects each node to the other\n+        # connect_nodes connects each node to the other\n         assert_equal(self.nodes[0].getconnectioncount(), 2)\n \n     def _test_getnettotals(self):\n@@ -70,7 +99,7 @@ def _test_getnettotals(self):\n             assert_greater_than_or_equal(after['bytesrecv_per_msg'].get('pong', 0), before['bytesrecv_per_msg'].get('pong', 0) + 32)\n             assert_greater_than_or_equal(after['bytessent_per_msg'].get('ping', 0), before['bytessent_per_msg'].get('ping', 0) + 32)\n \n-    def _test_getnetworkinginfo(self):\n+    def _test_getnetworkinfo(self):\n         assert_equal(self.nodes[0].getnetworkinfo()['networkactive'], True)\n         assert_equal(self.nodes[0].getnetworkinfo()['connections'], 2)\n \n@@ -80,10 +109,18 @@ def _test_getnetworkinginfo(self):\n         wait_until(lambda: self.nodes[0].getnetworkinfo()['connections'] == 0, timeout=3)\n \n         self.nodes[0].setnetworkactive(state=True)\n-        connect_nodes_bi(self.nodes, 0, 1)\n+        self.log.info('Connect nodes both way')\n+        connect_nodes(self.nodes[0], 1)\n+        connect_nodes(self.nodes[1], 0)\n+\n         assert_equal(self.nodes[0].getnetworkinfo()['networkactive'], True)\n         assert_equal(self.nodes[0].getnetworkinfo()['connections'], 2)\n \n+        # check the `servicesnames` field\n+        network_info = [node.getnetworkinfo() for node in self.nodes]\n+        for info in network_info:\n+            assert_net_servicesnames(int(info[\"localservices\"]), info[\"localservicesnames\"])\n+\n     def _test_getaddednodeinfo(self):\n         assert_equal(self.nodes[0].getaddednodeinfo(), [])\n         # add a node (node2) to node0\n@@ -104,6 +141,9 @@ def _test_getpeerinfo(self):\n         assert_equal(peer_info[1][0]['addrbind'], peer_info[0][0]['addr'])\n         assert_equal(peer_info[0][0]['minfeefilter'], Decimal(\"0.00000500\"))\n         assert_equal(peer_info[1][0]['minfeefilter'], Decimal(\"0.00001000\"))\n+        # check the `servicesnames` field\n+        for info in peer_info:\n+            assert_net_servicesnames(int(info[0][\"services\"]), info[0][\"servicesnames\"])\n \n     def _test_getnodeaddresses(self):\n         self.nodes[0].add_p2p_connection(P2PInterface())"
      },
      {
        "sha": "0663ffdf5b1c5fab9acdbe58903734a2cd4a4467",
        "filename": "test/functional/rpc_preciousblock.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/rpc_preciousblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/rpc_preciousblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_preciousblock.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -7,7 +7,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    connect_nodes_bi,\n+    connect_nodes,\n )\n \n def unidirectional_node_sync_via_rpc(node_src, node_dest):\n@@ -60,7 +60,7 @@ def run_test(self):\n         self.log.info(\"Connect nodes and check no reorg occurs\")\n         # Submit competing blocks via RPC so any reorg should occur before we proceed (no way to wait on inaction for p2p sync)\n         node_sync_via_rpc(self.nodes[0:2])\n-        connect_nodes_bi(self.nodes,0,1)\n+        connect_nodes(self.nodes[0], 1)\n         assert_equal(self.nodes[0].getbestblockhash(), hashC)\n         assert_equal(self.nodes[1].getbestblockhash(), hashG)\n         self.log.info(\"Make Node0 prefer block G\")\n@@ -97,8 +97,8 @@ def run_test(self):\n         hashL = self.nodes[2].getbestblockhash()\n         self.log.info(\"Connect nodes and check no reorg occurs\")\n         node_sync_via_rpc(self.nodes[1:3])\n-        connect_nodes_bi(self.nodes,1,2)\n-        connect_nodes_bi(self.nodes,0,2)\n+        connect_nodes(self.nodes[1], 2)\n+        connect_nodes(self.nodes[0], 2)\n         assert_equal(self.nodes[0].getbestblockhash(), hashH)\n         assert_equal(self.nodes[1].getbestblockhash(), hashH)\n         assert_equal(self.nodes[2].getbestblockhash(), hashL)"
      },
      {
        "sha": "61572654e0bde92488816dc920ff4a8409087a8c",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 13,
        "deletions": 3,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -11,7 +11,7 @@\n     assert_equal,\n     assert_greater_than,\n     assert_raises_rpc_error,\n-    connect_nodes_bi,\n+    connect_nodes,\n     disconnect_nodes,\n     find_output,\n )\n@@ -72,8 +72,8 @@ def test_utxo_conversion(self):\n         assert_equal(online_node.gettxout(txid,0)[\"confirmations\"], 1)\n \n         # Reconnect\n-        connect_nodes_bi(self.nodes, 0, 1)\n-        connect_nodes_bi(self.nodes, 0, 2)\n+        connect_nodes(self.nodes[0], 1)\n+        connect_nodes(self.nodes[0], 2)\n \n     def run_test(self):\n         # Create and fund a raw tx for sending 10 BTC\n@@ -382,6 +382,16 @@ def test_psbt_input_keys(psbt_input, keys):\n         joined_decoded = self.nodes[0].decodepsbt(joined)\n         assert len(joined_decoded['inputs']) == 4 and len(joined_decoded['outputs']) == 2 and \"final_scriptwitness\" not in joined_decoded['inputs'][3] and \"final_scriptSig\" not in joined_decoded['inputs'][3]\n \n+        # Check that joining shuffles the inputs and outputs\n+        # 10 attempts should be enough to get a shuffled join\n+        shuffled = False\n+        for i in range(0, 10):\n+            shuffled_joined = self.nodes[0].joinpsbts([psbt, psbt2])\n+            shuffled |= joined != shuffled_joined\n+            if shuffled:\n+                break\n+        assert shuffled\n+\n         # Newly created PSBT needs UTXOs and updating\n         addr = self.nodes[1].getnewaddress(\"\", \"p2sh-segwit\")\n         txid = self.nodes[0].sendtoaddress(addr, 7)"
      },
      {
        "sha": "eb9833498830d1f5001716ce65443eed263aa707",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 36,
        "deletions": 6,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -17,7 +17,13 @@\n from io import BytesIO\n from test_framework.messages import CTransaction, ToHex\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_rpc_error, connect_nodes_bi, hex_str_to_bytes\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    connect_nodes,\n+    hex_str_to_bytes,\n+)\n+\n \n class multidict(dict):\n     \"\"\"Dictionary that allows duplicate keys.\n@@ -53,7 +59,7 @@ def skip_test_if_missing_module(self):\n \n     def setup_network(self):\n         super().setup_network()\n-        connect_nodes_bi(self.nodes, 0, 2)\n+        connect_nodes(self.nodes[0], 2)\n \n     def run_test(self):\n         self.log.info('prepare some coins for multiple *rawtransaction commands')\n@@ -432,27 +438,51 @@ def run_test(self):\n \n         self.log.info('sendrawtransaction/testmempoolaccept with maxfeerate')\n \n+        # Test a transaction with small fee\n         txId = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n         rawTx = self.nodes[0].getrawtransaction(txId, True)\n         vout = next(o for o in rawTx['vout'] if o['value'] == Decimal('1.00000000'))\n \n         self.sync_all()\n         inputs = [{ \"txid\" : txId, \"vout\" : vout['n'] }]\n-        outputs = { self.nodes[0].getnewaddress() : Decimal(\"0.99999000\") } # 1000 sat fee\n+        outputs = { self.nodes[0].getnewaddress() : Decimal(\"0.999990000\") } # 10000 sat fee\n         rawTx = self.nodes[2].createrawtransaction(inputs, outputs)\n         rawTxSigned = self.nodes[2].signrawtransactionwithwallet(rawTx)\n         assert_equal(rawTxSigned['complete'], True)\n-        # 1000 sat fee, ~100 b transaction, fee rate should land around 10 sat/b = 0.00010000 BTC/kB\n+        # 10000 sat fee, ~100 b transaction, fee rate should land around 100 sat/b = 0.00100000 BTC/kB\n         # Thus, testmempoolaccept should reject\n         testres = self.nodes[2].testmempoolaccept([rawTxSigned['hex']], 0.00001000)[0]\n         assert_equal(testres['allowed'], False)\n         assert_equal(testres['reject-reason'], '256: absurdly-high-fee')\n         # and sendrawtransaction should throw\n         assert_raises_rpc_error(-26, \"absurdly-high-fee\", self.nodes[2].sendrawtransaction, rawTxSigned['hex'], 0.00001000)\n         # And below calls should both succeed\n-        testres = self.nodes[2].testmempoolaccept(rawtxs=[rawTxSigned['hex']], maxfeerate='0.00070000')[0]\n+        testres = self.nodes[2].testmempoolaccept(rawtxs=[rawTxSigned['hex']])[0]\n+        assert_equal(testres['allowed'], True)\n+        self.nodes[2].sendrawtransaction(hexstring=rawTxSigned['hex'])\n+\n+        # Test a transaction with large fee\n+        txId = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        rawTx = self.nodes[0].getrawtransaction(txId, True)\n+        vout = next(o for o in rawTx['vout'] if o['value'] == Decimal('1.00000000'))\n+\n+        self.sync_all()\n+        inputs = [{ \"txid\" : txId, \"vout\" : vout['n'] }]\n+        outputs = { self.nodes[0].getnewaddress() : Decimal(\"0.98000000\") } # 2000000 sat fee\n+        rawTx = self.nodes[2].createrawtransaction(inputs, outputs)\n+        rawTxSigned = self.nodes[2].signrawtransactionwithwallet(rawTx)\n+        assert_equal(rawTxSigned['complete'], True)\n+        # 2000000 sat fee, ~100 b transaction, fee rate should land around 20000 sat/b = 0.20000000 BTC/kB\n+        # Thus, testmempoolaccept should reject\n+        testres = self.nodes[2].testmempoolaccept([rawTxSigned['hex']])[0]\n+        assert_equal(testres['allowed'], False)\n+        assert_equal(testres['reject-reason'], '256: absurdly-high-fee')\n+        # and sendrawtransaction should throw\n+        assert_raises_rpc_error(-26, \"absurdly-high-fee\", self.nodes[2].sendrawtransaction, rawTxSigned['hex'])\n+        # And below calls should both succeed\n+        testres = self.nodes[2].testmempoolaccept(rawtxs=[rawTxSigned['hex']], maxfeerate='0.20000000')[0]\n         assert_equal(testres['allowed'], True)\n-        self.nodes[2].sendrawtransaction(hexstring=rawTxSigned['hex'], maxfeerate='0.00070000')\n+        self.nodes[2].sendrawtransaction(hexstring=rawTxSigned['hex'], maxfeerate='0.20000000')\n \n \n if __name__ == '__main__':"
      },
      {
        "sha": "9f94d11a93f23e9196ca60c5cd914a7b47e5033d",
        "filename": "test/functional/rpc_scantxoutset.py",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/rpc_scantxoutset.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/rpc_scantxoutset.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_scantxoutset.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -58,6 +58,13 @@ def run_test(self):\n         self.start_node(0)\n         self.nodes[0].generate(110)\n \n+        scan = self.nodes[0].scantxoutset(\"start\", [])\n+        info = self.nodes[0].gettxoutsetinfo()\n+        assert_equal(scan['success'], True)\n+        assert_equal(scan['height'], info['height'])\n+        assert_equal(scan['txouts'], info['txouts'])\n+        assert_equal(scan['bestblock'], info['bestblock'])\n+\n         self.restart_node(0, ['-nowallet'])\n         self.log.info(\"Test if we have found the non HD unspent outputs.\")\n         assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"pkh(\" + pubk1 + \")\", \"pkh(\" + pubk2 + \")\", \"pkh(\" + pubk3 + \")\"])['total_amount'], Decimal(\"0.002\"))"
      },
      {
        "sha": "b1d2b6f431cda43321ad3d55bf2b0704b069b944",
        "filename": "test/functional/rpc_setban.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/rpc_setban.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/rpc_setban.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_setban.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -26,7 +26,7 @@ def run_test(self):\n         self.nodes[1].setban(\"127.0.0.1\", \"add\")\n \n         # Node 0 should not be able to reconnect\n-        with self.nodes[1].assert_debug_log(expected_msgs=['dropped (banned)\\n'],timeout=5):\n+        with self.nodes[1].assert_debug_log(expected_msgs=['dropped (banned)\\n'], timeout=5):\n             self.restart_node(1, [])\n             self.nodes[0].addnode(\"127.0.0.1:\" + str(p2p_port(1)), \"onetry\")\n "
      },
      {
        "sha": "3cb5f56bee5b16fa646d67721e0fee3899f75ebe",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -43,8 +43,8 @@\n BIP125_SEQUENCE_NUMBER = 0xfffffffd  # Sequence number that is BIP 125 opt-in and BIP 68-opt-out\n \n NODE_NETWORK = (1 << 0)\n-# NODE_GETUTXO = (1 << 1)\n-# NODE_BLOOM = (1 << 2)\n+NODE_GETUTXO = (1 << 1)\n+NODE_BLOOM = (1 << 2)\n NODE_WITNESS = (1 << 3)\n NODE_NETWORK_LIMITED = (1 << 10)\n \n@@ -803,7 +803,9 @@ def get_siphash_keys(self):\n         return [ key0, key1 ]\n \n     # Version 2 compact blocks use wtxid in shortids (rather than txid)\n-    def initialize_from_block(self, block, nonce=0, prefill_list = [0], use_witness = False):\n+    def initialize_from_block(self, block, nonce=0, prefill_list=None, use_witness=False):\n+        if prefill_list is None:\n+            prefill_list = [0]\n         self.header = CBlockHeader(block)\n         self.nonce = nonce\n         self.prefilled_txn = [ PrefilledTransaction(i, block.vtx[i]) for i in prefill_list ]"
      },
      {
        "sha": "166438cf70bb2a624ad8788defbc45403532c524",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -111,7 +111,7 @@ def __init__(self):\n     def is_connected(self):\n         return self._transport is not None\n \n-    def peer_connect(self, dstaddr, dstport, net=\"regtest\"):\n+    def peer_connect(self, dstaddr, dstport, *, net):\n         assert not self.is_connected\n         self.dstaddr = dstaddr\n         self.dstport = dstport"
      },
      {
        "sha": "780aa5fe03ebd5a2c9cd844714c1c035a3ae4691",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 13,
        "deletions": 3,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -25,7 +25,7 @@\n     PortSeed,\n     assert_equal,\n     check_json_precision,\n-    connect_nodes_bi,\n+    connect_nodes,\n     disconnect_nodes,\n     get_datadir_path,\n     initialize_datadir,\n@@ -281,8 +281,18 @@ def setup_network(self):\n         # Connect the nodes as a \"chain\".  This allows us\n         # to split the network between nodes 1 and 2 to get\n         # two halves that can work on competing chains.\n+        #\n+        # Topology looks like this:\n+        # node0 <-- node1 <-- node2 <-- node3\n+        #\n+        # If all nodes are in IBD (clean chain from genesis), node0 is assumed to be the source of blocks (miner). To\n+        # ensure block propagation, all nodes will establish outgoing connections toward node0.\n+        # See fPreferredDownload in net_processing.\n+        #\n+        # If further outbound connections are needed, they can be added at the beginning of the test with e.g.\n+        # connect_nodes(self.nodes[1], 2)\n         for i in range(self.num_nodes - 1):\n-            connect_nodes_bi(self.nodes, i, i + 1)\n+            connect_nodes(self.nodes[i + 1], i)\n         self.sync_all()\n \n     def setup_nodes(self):\n@@ -423,7 +433,7 @@ def join_network(self):\n         \"\"\"\n         Join the (previously split) network halves together.\n         \"\"\"\n-        connect_nodes_bi(self.nodes, 1, 2)\n+        connect_nodes(self.nodes[1], 2)\n         self.sync_all()\n \n     def sync_blocks(self, nodes=None, **kwargs):"
      },
      {
        "sha": "d8bfdfd040a9e05b3268a5d4e7260af597f6c0e5",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -313,24 +313,24 @@ def assert_debug_log(self, expected_msgs, timeout=2):\n         with open(debug_log, encoding='utf-8') as dl:\n             dl.seek(0, 2)\n             prev_size = dl.tell()\n-        try:\n-            yield\n-        finally:\n-            while True:\n-                found = True\n-                with open(debug_log, encoding='utf-8') as dl:\n-                    dl.seek(prev_size)\n-                    log = dl.read()\n-                print_log = \" - \" + \"\\n - \".join(log.splitlines())\n-                for expected_msg in expected_msgs:\n-                    if re.search(re.escape(expected_msg), log, flags=re.MULTILINE) is None:\n-                        found = False\n-                if found:\n-                    return\n-                if time.time() >= time_end:\n-                    break\n-                time.sleep(0.05)\n-            self._raise_assertion_error('Expected messages \"{}\" does not partially match log:\\n\\n{}\\n\\n'.format(str(expected_msgs), print_log))\n+\n+        yield\n+\n+        while True:\n+            found = True\n+            with open(debug_log, encoding='utf-8') as dl:\n+                dl.seek(prev_size)\n+                log = dl.read()\n+            print_log = \" - \" + \"\\n - \".join(log.splitlines())\n+            for expected_msg in expected_msgs:\n+                if re.search(re.escape(expected_msg), log, flags=re.MULTILINE) is None:\n+                    found = False\n+            if found:\n+                return\n+            if time.time() >= time_end:\n+                break\n+            time.sleep(0.05)\n+        self._raise_assertion_error('Expected messages \"{}\" does not partially match log:\\n\\n{}\\n\\n'.format(str(expected_msgs), print_log))\n \n     @contextlib.contextmanager\n     def assert_memory_usage_stable(self, *, increase_allowed=0.03):\n@@ -489,7 +489,7 @@ def add_p2p_connection(self, p2p_conn, *, wait_for_verack=True, **kwargs):\n         if 'dstaddr' not in kwargs:\n             kwargs['dstaddr'] = '127.0.0.1'\n \n-        p2p_conn.peer_connect(**kwargs)()\n+        p2p_conn.peer_connect(**kwargs, net=self.chain)()\n         self.p2ps.append(p2p_conn)\n         if wait_for_verack:\n             p2p_conn.wait_for_verack()"
      },
      {
        "sha": "3175872b005c4d5437a243e275f7671035a3fb6c",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 16,
        "deletions": 8,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -56,7 +56,9 @@ def assert_raises_message(exc, message, fun, *args, **kwds):\n         raise AssertionError(\"Use assert_raises_rpc_error() to test RPC failures\")\n     except exc as e:\n         if message is not None and message not in e.error['message']:\n-            raise AssertionError(\"Expected substring not found:\" + e.error['message'])\n+            raise AssertionError(\n+                \"Expected substring not found in error message:\\nsubstring: '{}'\\nerror message: '{}'.\".format(\n+                    message, e.error['message']))\n     except Exception as e:\n         raise AssertionError(\"Unexpected exception raised: \" + type(e).__name__)\n     else:\n@@ -116,7 +118,9 @@ def try_rpc(code, message, fun, *args, **kwds):\n         if (code is not None) and (code != e.error[\"code\"]):\n             raise AssertionError(\"Unexpected JSONRPC error code %i\" % e.error[\"code\"])\n         if (message is not None) and (message not in e.error['message']):\n-            raise AssertionError(\"Expected substring not found:\" + e.error['message'])\n+            raise AssertionError(\n+                \"Expected substring not found in error message:\\nsubstring: '{}'\\nerror message: '{}'.\".format(\n+                    message, e.error['message']))\n         return True\n     except Exception as e:\n         raise AssertionError(\"Unexpected exception raised: \" + type(e).__name__)\n@@ -283,14 +287,22 @@ def initialize_datadir(dirname, n, chain):\n     datadir = get_datadir_path(dirname, n)\n     if not os.path.isdir(datadir):\n         os.makedirs(datadir)\n+    # Translate chain name to config name\n+    if chain == 'testnet3':\n+        chain_name_conf_arg = 'testnet'\n+        chain_name_conf_section = 'test'\n+    else:\n+        chain_name_conf_arg = chain\n+        chain_name_conf_section = chain\n     with open(os.path.join(datadir, \"bitcoin.conf\"), 'w', encoding='utf8') as f:\n-        f.write(\"{}=1\\n\".format(chain))\n-        f.write(\"[{}]\\n\".format(chain))\n+        f.write(\"{}=1\\n\".format(chain_name_conf_arg))\n+        f.write(\"[{}]\\n\".format(chain_name_conf_section))\n         f.write(\"port=\" + str(p2p_port(n)) + \"\\n\")\n         f.write(\"rpcport=\" + str(rpc_port(n)) + \"\\n\")\n         f.write(\"server=1\\n\")\n         f.write(\"keypool=1\\n\")\n         f.write(\"discover=0\\n\")\n+        f.write(\"dnsseed=0\\n\")\n         f.write(\"listenonion=0\\n\")\n         f.write(\"printtoconsole=0\\n\")\n         f.write(\"upnp=0\\n\")\n@@ -365,10 +377,6 @@ def connect_nodes(from_connection, node_num):\n     # with transaction relaying\n     wait_until(lambda:  all(peer['version'] != 0 for peer in from_connection.getpeerinfo()))\n \n-def connect_nodes_bi(nodes, a, b):\n-    connect_nodes(nodes[a], b)\n-    connect_nodes(nodes[b], a)\n-\n def sync_blocks(rpc_connections, *, wait=1, timeout=60):\n     \"\"\"\n     Wait until everybody has the same tip."
      },
      {
        "sha": "9c92091f1de3d948ff22879bed690d4caf62f106",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -131,6 +131,7 @@\n     'wallet_createwallet.py --usecli',\n     'wallet_watchonly.py',\n     'wallet_watchonly.py --usecli',\n+    'wallet_reorgsrestore.py',\n     'interface_http.py',\n     'interface_rpc.py',\n     'rpc_psbt.py',\n@@ -196,6 +197,7 @@\n     'feature_uacomment.py',\n     'wallet_coinbase_category.py',\n     'feature_filelock.py',\n+    'p2p_dos_header_tree.py',\n     'p2p_unrequested_blocks.py',\n     'feature_includeconf.py',\n     'rpc_deriveaddresses.py',"
      },
      {
        "sha": "355cd7af7574913d57c68047c7c4d3f66929b1f5",
        "filename": "test/functional/tool_wallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/tool_wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/tool_wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/tool_wallet.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -19,6 +19,7 @@ class ToolWalletTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n+        self.rpc_timeout = 120\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "c41b31e2e15664e7959be7a958ecd82b9ea5afdc",
        "filename": "test/functional/wallet_address_types.py",
        "status": "modified",
        "additions": 15,
        "deletions": 3,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/wallet_address_types.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/wallet_address_types.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_address_types.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -62,9 +62,12 @@\n     assert_equal,\n     assert_greater_than,\n     assert_raises_rpc_error,\n-    connect_nodes_bi,\n+    connect_nodes,\n+)\n+from test_framework.segwit_addr import (\n+    encode,\n+    decode,\n )\n-\n \n class AddressTypeTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -87,7 +90,7 @@ def setup_network(self):\n         # Fully mesh-connect nodes for faster mempool sync\n         for i, j in itertools.product(range(self.num_nodes), repeat=2):\n             if i > j:\n-                connect_nodes_bi(self.nodes, i, j)\n+                connect_nodes(self.nodes[i], j)\n         self.sync_all()\n \n     def get_balances(self, confirmed=True):\n@@ -97,6 +100,13 @@ def get_balances(self, confirmed=True):\n         else:\n             return [self.nodes[i].getunconfirmedbalance() for i in range(4)]\n \n+    # Quick test of python bech32 implementation\n+    def test_python_bech32(self, addr):\n+        hrp = addr[:4]\n+        assert_equal(hrp, \"bcrt\")\n+        (witver, witprog) = decode(hrp, addr)\n+        assert_equal(encode(hrp, witver, witprog), addr)\n+\n     def test_address(self, node, address, multisig, typ):\n         \"\"\"Run sanity checks on an address.\"\"\"\n         info = self.nodes[node].getaddressinfo(address)\n@@ -121,6 +131,7 @@ def test_address(self, node, address, multisig, typ):\n             assert_equal(info['witness_version'], 0)\n             assert_equal(len(info['witness_program']), 40)\n             assert 'pubkey' in info\n+            self.test_python_bech32(info[\"address\"])\n         elif typ == 'legacy':\n             # P2SH-multisig\n             assert info['isscript']\n@@ -146,6 +157,7 @@ def test_address(self, node, address, multisig, typ):\n             assert_equal(info['witness_version'], 0)\n             assert_equal(len(info['witness_program']), 64)\n             assert 'pubkeys' in info\n+            self.test_python_bech32(info[\"address\"])\n         else:\n             # Unknown type\n             assert False"
      },
      {
        "sha": "e3aa6705e5c90dcd2c3d95cab0e1af287c0c4e63",
        "filename": "test/functional/wallet_avoidreuse.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/wallet_avoidreuse.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/wallet_avoidreuse.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_avoidreuse.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -8,7 +8,7 @@\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n-    connect_nodes_bi,\n+    connect_nodes,\n )\n \n # TODO: Copied from wallet_groups.py -- should perhaps move into util.py\n@@ -103,7 +103,7 @@ def test_persistence(self):\n         # Stop and restart node 1\n         self.stop_node(1)\n         self.start_node(1)\n-        connect_nodes_bi(self.nodes, 0, 1)\n+        connect_nodes(self.nodes[0], 1)\n \n         # Flags should still be node1.avoid_reuse=false, node2.avoid_reuse=true\n         assert_equal(self.nodes[0].getwalletinfo()[\"avoid_reuse\"], False)"
      },
      {
        "sha": "93178c5ab265c5dcba5d498aa5dc1de50c2513a6",
        "filename": "test/functional/wallet_backup.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/wallet_backup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/wallet_backup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_backup.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -49,6 +49,7 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         # nodes 1, 2,3 are spenders, let's give them a keypool=100\n         self.extra_args = [[\"-keypool=100\"], [\"-keypool=100\"], [\"-keypool=100\"], []]\n+        self.rpc_timeout = 120\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "c50dcd987a896fc5e8cbf1fcf73f83e176e998a9",
        "filename": "test/functional/wallet_balance.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/wallet_balance.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/wallet_balance.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_balance.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -11,7 +11,7 @@\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n-    connect_nodes_bi,\n+    connect_nodes,\n     sync_blocks,\n )\n \n@@ -211,7 +211,7 @@ def test_balances(*, fee_node_1=0):\n \n         # Now confirm tx_orig\n         self.restart_node(1, ['-persistmempool=0'])\n-        connect_nodes_bi(self.nodes, 0, 1)\n+        connect_nodes(self.nodes[0], 1)\n         sync_blocks(self.nodes)\n         self.nodes[1].sendrawtransaction(tx_orig)\n         self.nodes[1].generatetoaddress(1, ADDRESS_WATCHONLY)"
      },
      {
        "sha": "5b1c672a48f08450077e0b5f7e65859159e8ceab",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 42,
        "deletions": 12,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -12,7 +12,7 @@\n     assert_equal,\n     assert_fee_amount,\n     assert_raises_rpc_error,\n-    connect_nodes_bi,\n+    connect_nodes,\n     wait_until,\n )\n \n@@ -32,9 +32,9 @@ def setup_network(self):\n         self.setup_nodes()\n         # Only need nodes 0-2 running at start of test\n         self.stop_node(3)\n-        connect_nodes_bi(self.nodes, 0, 1)\n-        connect_nodes_bi(self.nodes, 1, 2)\n-        connect_nodes_bi(self.nodes, 0, 2)\n+        connect_nodes(self.nodes[0], 1)\n+        connect_nodes(self.nodes[1], 2)\n+        connect_nodes(self.nodes[0], 2)\n         self.sync_all(self.nodes[0:3])\n \n     def check_fee_amount(self, curr_balance, balance_with_fee, fee_per_byte, tx_size):\n@@ -218,7 +218,7 @@ def run_test(self):\n         node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(), node_0_bal + Decimal('10'), fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n \n         self.start_node(3)\n-        connect_nodes_bi(self.nodes, 0, 3)\n+        connect_nodes(self.nodes[0], 3)\n         self.sync_all()\n \n         # check if we can list zero value tx as available coins\n@@ -253,9 +253,9 @@ def run_test(self):\n         self.start_node(0, [\"-walletbroadcast=0\"])\n         self.start_node(1, [\"-walletbroadcast=0\"])\n         self.start_node(2, [\"-walletbroadcast=0\"])\n-        connect_nodes_bi(self.nodes, 0, 1)\n-        connect_nodes_bi(self.nodes, 1, 2)\n-        connect_nodes_bi(self.nodes, 0, 2)\n+        connect_nodes(self.nodes[0], 1)\n+        connect_nodes(self.nodes[1], 2)\n+        connect_nodes(self.nodes[0], 2)\n         self.sync_all(self.nodes[0:3])\n \n         txid_not_broadcast = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 2)\n@@ -280,9 +280,9 @@ def run_test(self):\n         self.start_node(0)\n         self.start_node(1)\n         self.start_node(2)\n-        connect_nodes_bi(self.nodes, 0, 1)\n-        connect_nodes_bi(self.nodes, 1, 2)\n-        connect_nodes_bi(self.nodes, 0, 2)\n+        connect_nodes(self.nodes[0], 1)\n+        connect_nodes(self.nodes[1], 2)\n+        connect_nodes(self.nodes[0], 2)\n         self.sync_blocks(self.nodes[0:3])\n \n         self.nodes[0].generate(1)\n@@ -433,7 +433,7 @@ def run_test(self):\n         # Split into two chains\n         rawtx = self.nodes[0].createrawtransaction([{\"txid\": singletxid, \"vout\": 0}], {chain_addrs[0]: node0_balance / 2 - Decimal('0.01'), chain_addrs[1]: node0_balance / 2 - Decimal('0.01')})\n         signedtx = self.nodes[0].signrawtransactionwithwallet(rawtx)\n-        singletxid = self.nodes[0].sendrawtransaction(signedtx[\"hex\"])\n+        singletxid = self.nodes[0].sendrawtransaction(signedtx[\"hex\"], 0)\n         self.nodes[0].generate(1)\n \n         # Make a long chain of unconfirmed payments without hitting mempool limit\n@@ -499,6 +499,36 @@ def run_test(self):\n         self.nodes[0].setlabel(change, 'foobar')\n         assert_equal(self.nodes[0].getaddressinfo(change)['ischange'], False)\n \n+        # Test gettransaction response with different arguments.\n+        self.log.info(\"Testing gettransaction response with different arguments...\")\n+        self.nodes[0].setlabel(change, 'baz')\n+        baz = self.nodes[0].listtransactions(label=\"baz\", count=1)[0]\n+        expected_receive_vout = {\"label\":    \"baz\",\n+                                 \"address\":  baz[\"address\"],\n+                                 \"amount\":   baz[\"amount\"],\n+                                 \"category\": baz[\"category\"],\n+                                 \"vout\":     baz[\"vout\"]}\n+        expected_fields = frozenset({'amount', 'bip125-replaceable', 'confirmations', 'details', 'fee',\n+                                     'hex', 'time', 'timereceived', 'trusted', 'txid', 'walletconflicts'})\n+        verbose_field = \"decoded\"\n+        expected_verbose_fields = expected_fields | {verbose_field}\n+\n+        self.log.debug(\"Testing gettransaction response without verbose\")\n+        tx = self.nodes[0].gettransaction(txid=txid)\n+        assert_equal(set([*tx]), expected_fields)\n+        assert_array_result(tx[\"details\"], {\"category\": \"receive\"}, expected_receive_vout)\n+\n+        self.log.debug(\"Testing gettransaction response with verbose set to False\")\n+        tx = self.nodes[0].gettransaction(txid=txid, verbose=False)\n+        assert_equal(set([*tx]), expected_fields)\n+        assert_array_result(tx[\"details\"], {\"category\": \"receive\"}, expected_receive_vout)\n+\n+        self.log.debug(\"Testing gettransaction response with verbose set to True\")\n+        tx = self.nodes[0].gettransaction(txid=txid, verbose=True)\n+        assert_equal(set([*tx]), expected_verbose_fields)\n+        assert_array_result(tx[\"details\"], {\"category\": \"receive\"}, expected_receive_vout)\n+        assert_equal(tx[verbose_field], self.nodes[0].decoderawtransaction(tx[\"hex\"]))\n+\n \n if __name__ == '__main__':\n     WalletTest().main()"
      },
      {
        "sha": "a7c79ec9166d28a129b16203a73c4df99249d2fb",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -23,7 +23,7 @@\n     assert_equal,\n     assert_greater_than,\n     assert_raises_rpc_error,\n-    connect_nodes_bi,\n+    connect_nodes,\n     hex_str_to_bytes,\n )\n \n@@ -48,7 +48,7 @@ def run_test(self):\n         self.nodes[1].encryptwallet(WALLET_PASSPHRASE)\n         self.nodes[1].walletpassphrase(WALLET_PASSPHRASE, WALLET_PASSPHRASE_TIMEOUT)\n \n-        connect_nodes_bi(self.nodes, 0, 1)\n+        connect_nodes(self.nodes[0], 1)\n         self.sync_all()\n \n         peer_node, rbf_node = self.nodes"
      },
      {
        "sha": "fa5d5a887856b7e56893ccea484cd2daa7ccf231",
        "filename": "test/functional/wallet_hd.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/wallet_hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/wallet_hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_hd.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -10,7 +10,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    connect_nodes_bi,\n+    connect_nodes,\n     assert_raises_rpc_error\n )\n \n@@ -82,7 +82,7 @@ def run_test(self):\n             assert_equal(hd_info_2[\"hdkeypath\"], \"m/0'/0'/\"+str(i)+\"'\")\n             assert_equal(hd_info_2[\"hdseedid\"], masterkeyid)\n         assert_equal(hd_add, hd_add_2)\n-        connect_nodes_bi(self.nodes, 0, 1)\n+        connect_nodes(self.nodes[0], 1)\n         self.sync_all()\n \n         # Needs rescan\n@@ -96,7 +96,7 @@ def run_test(self):\n         shutil.rmtree(os.path.join(self.nodes[1].datadir, \"regtest\", \"chainstate\"))\n         shutil.copyfile(os.path.join(self.nodes[1].datadir, \"hd.bak\"), os.path.join(self.nodes[1].datadir, \"regtest\", \"wallets\", \"wallet.dat\"))\n         self.start_node(1, extra_args=self.extra_args[1])\n-        connect_nodes_bi(self.nodes, 0, 1)\n+        connect_nodes(self.nodes[0], 1)\n         self.sync_all()\n         # Wallet automatically scans blocks older than key on startup\n         assert_equal(self.nodes[1].getbalance(), NUM_HD_ADDS + 1)"
      },
      {
        "sha": "23748e5dd76dc10e7c6a3f060c43864287945384",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -44,8 +44,10 @@ def skip_test_if_missing_module(self):\n     def setup_network(self):\n         self.setup_nodes()\n \n-    def test_importmulti(self, req, success, error_code=None, error_message=None, warnings=[]):\n+    def test_importmulti(self, req, success, error_code=None, error_message=None, warnings=None):\n         \"\"\"Run importmulti and assert success\"\"\"\n+        if warnings is None:\n+            warnings = []\n         result = self.nodes[1].importmulti([req])\n         observed_warnings = []\n         if 'warnings' in result[0]:"
      },
      {
        "sha": "2e70a9e0a510d119544a8625c93f70fc05af5ed1",
        "filename": "test/functional/wallet_keypool_topup.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/wallet_keypool_topup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/wallet_keypool_topup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool_topup.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -16,7 +16,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    connect_nodes_bi,\n+    connect_nodes,\n )\n \n \n@@ -38,9 +38,9 @@ def run_test(self):\n         self.stop_node(1)\n         shutil.copyfile(wallet_path, wallet_backup_path)\n         self.start_node(1, self.extra_args[1])\n-        connect_nodes_bi(self.nodes, 0, 1)\n-        connect_nodes_bi(self.nodes, 0, 2)\n-        connect_nodes_bi(self.nodes, 0, 3)\n+        connect_nodes(self.nodes[0], 1)\n+        connect_nodes(self.nodes[0], 2)\n+        connect_nodes(self.nodes[0], 3)\n \n         for i, output_type in enumerate([\"legacy\", \"p2sh-segwit\", \"bech32\"]):\n \n@@ -72,7 +72,7 @@ def run_test(self):\n             self.stop_node(idx)\n             shutil.copyfile(wallet_backup_path, wallet_path)\n             self.start_node(idx, self.extra_args[idx])\n-            connect_nodes_bi(self.nodes, 0, idx)\n+            connect_nodes(self.nodes[0], idx)\n             self.sync_all()\n \n             self.log.info(\"Verify keypool is restored and balance is correct\")"
      },
      {
        "sha": "4aeb3932557c7d04280de8b6c0bc77f28e3ca5fa",
        "filename": "test/functional/wallet_listsinceblock.py",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/wallet_listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/wallet_listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listsinceblock.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -5,9 +5,15 @@\n \"\"\"Test the listsincelast RPC.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_array_result, assert_raises_rpc_error\n+from test_framework.util import (\n+    assert_array_result,\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    connect_nodes,\n+)\n \n-class ListSinceBlockTest (BitcoinTestFramework):\n+\n+class ListSinceBlockTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = True\n@@ -16,6 +22,9 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def run_test(self):\n+        # All nodes are in IBD from genesis, so they'll need the miner (node2) to be an outbound connection, or have\n+        # only one connection. (See fPreferredDownload in net_processing)\n+        connect_nodes(self.nodes[1], 2)\n         self.nodes[2].generate(101)\n         self.sync_all()\n "
      },
      {
        "sha": "68bc45f9861d3c44bee49f90e575df119b4c5bdf",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 28,
        "deletions": 3,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -17,6 +17,8 @@\n     assert_raises_rpc_error,\n )\n \n+FEATURE_LATEST = 169900\n+\n \n class MultiWalletTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -27,6 +29,13 @@ def set_test_params(self):\n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n+    def add_options(self, parser):\n+        parser.add_argument(\n+            '--data_wallets_dir',\n+            default=os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data/wallets/'),\n+            help='Test data with wallet directories (default: %(default)s)',\n+        )\n+\n     def run_test(self):\n         node = self.nodes[0]\n \n@@ -93,12 +102,12 @@ def wallet_file(name):\n \n         # should not initialize if one wallet is a copy of another\n         shutil.copyfile(wallet_dir('w8'), wallet_dir('w8_copy'))\n-        exp_stderr = \"BerkeleyBatch: Can't open database w8_copy \\(duplicates fileid \\w+ from w8\\)\"\n+        exp_stderr = r\"BerkeleyBatch: Can't open database w8_copy \\(duplicates fileid \\w+ from w8\\)\"\n         self.nodes[0].assert_start_raises_init_error(['-wallet=w8', '-wallet=w8_copy'], exp_stderr, match=ErrorMatch.PARTIAL_REGEX)\n \n         # should not initialize if wallet file is a symlink\n         os.symlink('w8', wallet_dir('w8_symlink'))\n-        self.nodes[0].assert_start_raises_init_error(['-wallet=w8_symlink'], 'Error: Invalid -wallet path \\'w8_symlink\\'\\. .*', match=ErrorMatch.FULL_REGEX)\n+        self.nodes[0].assert_start_raises_init_error(['-wallet=w8_symlink'], r'Error: Invalid -wallet path \\'w8_symlink\\'\\. .*', match=ErrorMatch.FULL_REGEX)\n \n         # should not initialize if the specified walletdir does not exist\n         self.nodes[0].assert_start_raises_init_error(['-walletdir=bad'], 'Error: Specified -walletdir \"bad\" does not exist')\n@@ -139,7 +148,7 @@ def wallet_file(name):\n         competing_wallet_dir = os.path.join(self.options.tmpdir, 'competing_walletdir')\n         os.mkdir(competing_wallet_dir)\n         self.restart_node(0, ['-walletdir=' + competing_wallet_dir])\n-        exp_stderr = \"Error: Error initializing wallet database environment \\\"\\S+competing_walletdir\\\"!\"\n+        exp_stderr = r\"Error: Error initializing wallet database environment \\\"\\S+competing_walletdir\\\"!\"\n         self.nodes[1].assert_start_raises_init_error(['-walletdir=' + competing_wallet_dir], exp_stderr, match=ErrorMatch.PARTIAL_REGEX)\n \n         self.restart_node(0, extra_args)\n@@ -323,6 +332,22 @@ def wallet_file(name):\n         self.nodes[0].unloadwallet(wallet)\n         self.nodes[1].loadwallet(wallet)\n \n+        # Fail to load if wallet is downgraded\n+        shutil.copytree(os.path.join(self.options.data_wallets_dir, 'high_minversion'), wallet_dir('high_minversion'))\n+        self.restart_node(0, extra_args=['-upgradewallet={}'.format(FEATURE_LATEST)])\n+        assert {'name': 'high_minversion'} in self.nodes[0].listwalletdir()['wallets']\n+        self.log.info(\"Fail -upgradewallet that results in downgrade\")\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Wallet loading failed.\",\n+            lambda: self.nodes[0].loadwallet(filename='high_minversion'),\n+        )\n+        self.stop_node(\n+            i=0,\n+            expected_stderr='Error: Error loading {}: Wallet requires newer version of Bitcoin Core'.format(\n+                wallet_dir('high_minversion', 'wallet.dat')),\n+        )\n+\n \n if __name__ == '__main__':\n     MultiWalletTest().main()"
      },
      {
        "sha": "f48018e9fbe8fc2ae59ad63e5d36bd4db04f4811",
        "filename": "test/functional/wallet_reorgsrestore.py",
        "status": "added",
        "additions": 105,
        "deletions": 0,
        "changes": 105,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/wallet_reorgsrestore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/wallet_reorgsrestore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_reorgsrestore.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -0,0 +1,105 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"Test tx status in case of reorgs while wallet being shutdown.\n+\n+Wallet txn status rely on block connection/disconnection for its\n+accuracy. In case of reorgs happening while wallet being shutdown\n+block updates are not going to be received. At wallet loading, we\n+check against chain if confirmed txn are still in chain and change\n+their status if block in which they have been included has been\n+disconnected.\n+\"\"\"\n+\n+from decimal import Decimal\n+import os\n+import shutil\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+        connect_nodes,\n+        disconnect_nodes,\n+)\n+\n+class ReorgsRestoreTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 3\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        # Send a tx from which to conflict outputs later\n+        txid_conflict_from = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), Decimal(\"10\"))\n+        self.nodes[0].generate(1)\n+        self.sync_blocks()\n+\n+        # Disconnect node1 from others to reorg its chain later\n+        disconnect_nodes(self.nodes[0], 1)\n+        disconnect_nodes(self.nodes[1], 2)\n+        connect_nodes(self.nodes[0], 2)\n+\n+        # Send a tx to be unconfirmed later\n+        txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), Decimal(\"10\"))\n+        tx = self.nodes[0].gettransaction(txid)\n+        self.nodes[0].generate(4)\n+        tx_before_reorg = self.nodes[0].gettransaction(txid)\n+        assert_equal(tx_before_reorg[\"confirmations\"], 4)\n+\n+        # Disconnect node0 from node2 to broadcast a conflict on their respective chains\n+        disconnect_nodes(self.nodes[0], 2)\n+        nA = next(tx_out[\"vout\"] for tx_out in self.nodes[0].gettransaction(txid_conflict_from)[\"details\"] if tx_out[\"amount\"] == Decimal(\"10\"))\n+        inputs = []\n+        inputs.append({\"txid\": txid_conflict_from, \"vout\": nA})\n+        outputs_1 = {}\n+        outputs_2 = {}\n+\n+        # Create a conflicted tx broadcast on node0 chain and conflicting tx broadcast on node1 chain. Both spend from txid_conflict_from\n+        outputs_1[self.nodes[0].getnewaddress()] = Decimal(\"9.99998\")\n+        outputs_2[self.nodes[0].getnewaddress()] = Decimal(\"9.99998\")\n+        conflicted = self.nodes[0].signrawtransactionwithwallet(self.nodes[0].createrawtransaction(inputs, outputs_1))\n+        conflicting = self.nodes[0].signrawtransactionwithwallet(self.nodes[0].createrawtransaction(inputs, outputs_2))\n+\n+        conflicted_txid = self.nodes[0].sendrawtransaction(conflicted[\"hex\"])\n+        self.nodes[0].generate(1)\n+        conflicting_txid = self.nodes[2].sendrawtransaction(conflicting[\"hex\"])\n+        self.nodes[2].generate(9)\n+\n+        # Reconnect node0 and node2 and check that conflicted_txid is effectively conflicted\n+        connect_nodes(self.nodes[0], 2)\n+        self.sync_blocks([self.nodes[0], self.nodes[2]])\n+        conflicted = self.nodes[0].gettransaction(conflicted_txid)\n+        conflicting = self.nodes[0].gettransaction(conflicting_txid)\n+        assert_equal(conflicted[\"confirmations\"], -9)\n+        assert_equal(conflicted[\"walletconflicts\"][0], conflicting[\"txid\"])\n+\n+        # Node0 wallet is shutdown\n+        self.stop_node(0)\n+        self.start_node(0)\n+\n+        # The block chain re-orgs and the tx is included in a different block\n+        self.nodes[1].generate(9)\n+        self.nodes[1].sendrawtransaction(tx[\"hex\"])\n+        self.nodes[1].generate(1)\n+        self.nodes[1].sendrawtransaction(conflicted[\"hex\"])\n+        self.nodes[1].generate(1)\n+\n+        # Node0 wallet file is loaded on longest sync'ed node1\n+        self.stop_node(1)\n+        self.nodes[0].backupwallet(os.path.join(self.nodes[0].datadir, 'wallet.bak'))\n+        shutil.copyfile(os.path.join(self.nodes[0].datadir, 'wallet.bak'), os.path.join(self.nodes[1].datadir, 'regtest', 'wallet.dat'))\n+        self.start_node(1)\n+        tx_after_reorg = self.nodes[1].gettransaction(txid)\n+        # Check that normal confirmed tx is confirmed again but with different blockhash\n+        assert_equal(tx_after_reorg[\"confirmations\"], 2)\n+        assert(tx_before_reorg[\"blockhash\"] != tx_after_reorg[\"blockhash\"])\n+        conflicted_after_reorg = self.nodes[1].gettransaction(conflicted_txid)\n+        # Check that conflicted tx is confirmed again with blockhash different than previously conflicting tx\n+        assert_equal(conflicted_after_reorg[\"confirmations\"], 1)\n+        assert(conflicting[\"blockhash\"] != conflicted_after_reorg[\"blockhash\"])\n+\n+if __name__ == '__main__':\n+    ReorgsRestoreTest().main()"
      },
      {
        "sha": null,
        "filename": "test/functional/wallet_watchonly.py",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/wallet_watchonly.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/functional/wallet_watchonly.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_watchonly.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900"
      },
      {
        "sha": "bd947d194c52ddd2fb1eb4579ade4bf16cc4ceb9",
        "filename": "test/lint/check-doc.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/lint/check-doc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/lint/check-doc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/check-doc.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -15,8 +15,8 @@\n \n FOLDER_GREP = 'src'\n FOLDER_TEST = 'src/test/'\n-REGEX_ARG = '(?:ForceSet|SoftSet|Get|Is)(?:Bool)?Args?(?:Set)?\\(\"(-[^\"]+)\"'\n-REGEX_DOC = 'AddArg\\(\"(-[^\"=]+?)(?:=|\")'\n+REGEX_ARG = r'(?:ForceSet|SoftSet|Get|Is)(?:Bool)?Args?(?:Set)?\\(\"(-[^\"]+)\"'\n+REGEX_DOC = r'AddArg\\(\"(-[^\"=]+?)(?:=|\")'\n CMD_ROOT_DIR = '$(git rev-parse --show-toplevel)/{}'.format(FOLDER_GREP)\n CMD_GREP_ARGS = r\"git grep --perl-regexp '{}' -- {} ':(exclude){}'\".format(REGEX_ARG, CMD_ROOT_DIR, FOLDER_TEST)\n CMD_GREP_WALLET_ARGS = r\"git grep --function-context 'void WalletInit::AddWalletOptions' -- {} | grep AddArg\".format(CMD_ROOT_DIR)"
      },
      {
        "sha": "a33ab17f3f9384c6b85e402cca63b95b8e8817e2",
        "filename": "test/lint/check-rpc-mappings.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/lint/check-rpc-mappings.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/lint/check-rpc-mappings.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/check-rpc-mappings.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -48,13 +48,13 @@ def process_commands(fname):\n         for line in f:\n             line = line.rstrip()\n             if not in_rpcs:\n-                if re.match(\"static const CRPCCommand .*\\[\\] =\", line):\n+                if re.match(r\"static const CRPCCommand .*\\[\\] =\", line):\n                     in_rpcs = True\n             else:\n                 if line.startswith('};'):\n                     in_rpcs = False\n                 elif '{' in line and '\"' in line:\n-                    m = re.search('{ *(\"[^\"]*\"), *(\"[^\"]*\"), *&([^,]*), *{([^}]*)} *},', line)\n+                    m = re.search(r'{ *(\"[^\"]*\"), *(\"[^\"]*\"), *&([^,]*), *{([^}]*)} *},', line)\n                     assert m, 'No match to table expression: %s' % line\n                     name = parse_string(m.group(2))\n                     args_str = m.group(4).strip()\n@@ -80,7 +80,7 @@ def process_mapping(fname):\n                 if line.startswith('};'):\n                     in_rpcs = False\n                 elif '{' in line and '\"' in line:\n-                    m = re.search('{ *(\"[^\"]*\"), *([0-9]+) *, *(\"[^\"]*\") *},', line)\n+                    m = re.search(r'{ *(\"[^\"]*\"), *([0-9]+) *, *(\"[^\"]*\") *},', line)\n                     assert m, 'No match to table expression: %s' % line\n                     name = parse_string(m.group(1))\n                     idx = int(m.group(2))"
      },
      {
        "sha": "9f34d0f4dd64e2821edaa10733063c58fdcf21b6",
        "filename": "test/lint/lint-format-strings.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/lint/lint-format-strings.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/lint/lint-format-strings.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-format-strings.py?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -55,7 +55,7 @@ def normalize(s):\n     assert type(s) is str\n     s = s.replace(\"\\n\", \" \")\n     s = s.replace(\"\\t\", \" \")\n-    s = re.sub(\"/\\*.*?\\*/\", \" \", s)\n+    s = re.sub(r\"/\\*.*?\\*/\", \" \", s)\n     s = re.sub(\" {2,}\", \" \", s)\n     return s.strip()\n "
      },
      {
        "sha": "d27e45a23f96b3be885064f3e334a84882c02066",
        "filename": "test/lint/lint-includes.sh",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/lint/lint-includes.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/lint/lint-includes.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-includes.sh?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -11,6 +11,9 @@\n export LC_ALL=C\n IGNORE_REGEXP=\"/(leveldb|secp256k1|univalue)/\"\n \n+# cd to root folder of git repo for git ls-files to work properly\n+cd \"$(dirname $0)/../..\" || exit 1\n+\n filter_suffix() {\n     git ls-files | grep -E \"^src/.*\\.${1}\"'$' | grep -Ev \"${IGNORE_REGEXP}\"\n }"
      },
      {
        "sha": "33bb7b44faab2a2e1208e3b36bce145198ffc247",
        "filename": "test/lint/lint-python-dead-code-whitelist",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/lint/lint-python-dead-code-whitelist",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/lint/lint-python-dead-code-whitelist",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-python-dead-code-whitelist?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -6,6 +6,7 @@ _.converter  # unused attribute (test/functional/test_framework/test_framework.p\n _.daemon  # unused attribute (test/functional/test_framework/socks5.py)\n data_received  # unused function (test/functional/test_framework/mininode.py)\n DuplicateInput  # unused class (test/functional/data/invalid_txs.py)\n+DisabledOpcodeTemplates  # unused class (test/functional/data/invalid_txs.py)\n _.filename  # unused attribute (contrib/macdeploy/custom_dsstore.py)\n InvalidOPIFConstruction  # unused class (test/functional/data/invalid_txs.py)\n _.is_compressed  # unused property (test/functional/test_framework/key.py)"
      },
      {
        "sha": "1f9f035d304ea47ddf4445e7647bdbacf949b086",
        "filename": "test/lint/lint-python-mutable-default-parameters.sh",
        "status": "added",
        "additions": 52,
        "deletions": 0,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/lint/lint-python-mutable-default-parameters.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/lint/lint-python-mutable-default-parameters.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-python-mutable-default-parameters.sh?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -0,0 +1,52 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+# Detect when a mutable list or dict is used as a default parameter value in a Python function.\n+\n+export LC_ALL=C\n+EXIT_CODE=0\n+OUTPUT=$(git grep -E '^\\s*def [a-zA-Z0-9_]+\\(.*=\\s*(\\[|\\{)' -- \"*.py\")\n+if [[ ${OUTPUT} != \"\" ]]; then\n+    echo \"A mutable list or dict seems to be used as default parameter value:\"\n+    echo\n+    echo \"${OUTPUT}\"\n+    echo\n+    cat << EXAMPLE\n+This is how mutable list and dict default parameter values behave:\n+\n+>>> def f(i, j=[], k={}):\n+...     j.append(i)\n+...     k[i] = True\n+...     return j, k\n+...\n+>>> f(1)\n+([1], {1: True})\n+>>> f(1)\n+([1, 1], {1: True})\n+>>> f(2)\n+([1, 1, 2], {1: True, 2: True})\n+\n+The intended behaviour was likely:\n+\n+>>> def f(i, j=None, k=None):\n+...     if j is None:\n+...         j = []\n+...     if k is None:\n+...         k = {}\n+...     j.append(i)\n+...     k[i] = True\n+...     return j, k\n+...\n+>>> f(1)\n+([1], {1: True})\n+>>> f(1)\n+([1], {1: True})\n+>>> f(2)\n+([2], {2: True})\n+EXAMPLE\n+    EXIT_CODE=1\n+fi\n+exit ${EXIT_CODE}"
      },
      {
        "sha": "3c82ec19e3f12bbc23cf3ce9d4ca69d6fa1f225f",
        "filename": "test/lint/lint-python.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/lint/lint-python.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/lint/lint-python.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-python.sh?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -73,7 +73,6 @@ enabled=(\n     W291 # trailing whitespace\n     W292 # no newline at end of file\n     W293 # blank line contains whitespace\n-    W504 # line break after binary operator\n     W601 # .has_key() is deprecated, use \"in\"\n     W602 # deprecated form of raising exception\n     W603 # \"<>\" is deprecated, use \"!=\""
      },
      {
        "sha": "e70b73e1cccf9ec3b3e24ab26d23951952bd3a15",
        "filename": "test/lint/lint-spelling.sh",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/lint/lint-spelling.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/lint/lint-spelling.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-spelling.sh?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -9,6 +9,11 @@\n \n export LC_ALL=C\n \n+if ! command -v codespell > /dev/null; then\n+    echo \"Skipping spell check linting since codespell is not installed.\"\n+    exit 0\n+fi\n+\n IGNORE_WORDS_FILE=test/lint/lint-spelling.ignore-words.txt\n if ! codespell --check-filenames --disable-colors --quiet-level=7 --ignore-words=${IGNORE_WORDS_FILE} $(git ls-files -- \":(exclude)build-aux/m4/\" \":(exclude)contrib/seeds/*.txt\" \":(exclude)depends/\" \":(exclude)doc/release-notes/\" \":(exclude)src/leveldb/\" \":(exclude)src/qt/locale/\" \":(exclude)src/secp256k1/\" \":(exclude)src/univalue/\"); then\n     echo \"^ Warning: codespell identified likely spelling errors. Any false positives? Add them to the list of ignored words in ${IGNORE_WORDS_FILE}\""
      },
      {
        "sha": "42b519bb215e45823bd8cffe85fe00b1181b6799",
        "filename": "test/util/data/txcreateoutpubkey1.json",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/util/data/txcreateoutpubkey1.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a89927b52dc36004a5734e5c7e8d44a5436900/test/util/data/txcreateoutpubkey1.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/data/txcreateoutpubkey1.json?ref=d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "patch": "@@ -15,11 +15,7 @@\n             \"scriptPubKey\": {\n                 \"asm\": \"02a5613bd857b7048924264d1e70e08fb2a7e6527d32b7ab1bb993ac59964ff397 OP_CHECKSIG\",\n                 \"hex\": \"2102a5613bd857b7048924264d1e70e08fb2a7e6527d32b7ab1bb993ac59964ff397ac\",\n-                \"reqSigs\": 1,\n-                \"type\": \"pubkey\",\n-                \"addresses\": [\n-                    \"1FoG2386FG2tAJS9acMuiDsKy67aGg9MKz\"\n-                ]\n+                \"type\": \"pubkey\"\n             }\n         }\n     ],"
      }
    ]
  },
  {
    "sha": "b28c1030e55431f61746df09d546bb36bec91aa3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMjhjMTAzMGU1NTQzMWY2MTc0NmRmMDlkNTQ2YmIzNmJlYzkxYWEz",
    "commit": {
      "author": {
        "name": "BlockMechanic",
        "email": "blockmecha@gmail.com",
        "date": "2019-09-19T10:27:30Z"
      },
      "committer": {
        "name": "BlockMechanic",
        "email": "blockmecha@gmail.com",
        "date": "2019-09-19T10:27:30Z"
      },
      "message": "Working Android QT (5.12.4)\n\nKnown working android QT build depends modifications. It needs clean up though. Please note, i use QT 5.12.4",
      "tree": {
        "sha": "d7f1ab43155a4d82ab9c5f5e31db2e72601883d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d7f1ab43155a4d82ab9c5f5e31db2e72601883d1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b28c1030e55431f61746df09d546bb36bec91aa3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b28c1030e55431f61746df09d546bb36bec91aa3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b28c1030e55431f61746df09d546bb36bec91aa3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b28c1030e55431f61746df09d546bb36bec91aa3/comments",
    "author": {
      "login": "BlockMechanic",
      "id": 24528627,
      "node_id": "MDQ6VXNlcjI0NTI4NjI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/24528627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BlockMechanic",
      "html_url": "https://github.com/BlockMechanic",
      "followers_url": "https://api.github.com/users/BlockMechanic/followers",
      "following_url": "https://api.github.com/users/BlockMechanic/following{/other_user}",
      "gists_url": "https://api.github.com/users/BlockMechanic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BlockMechanic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BlockMechanic/subscriptions",
      "organizations_url": "https://api.github.com/users/BlockMechanic/orgs",
      "repos_url": "https://api.github.com/users/BlockMechanic/repos",
      "events_url": "https://api.github.com/users/BlockMechanic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BlockMechanic/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "BlockMechanic",
      "id": 24528627,
      "node_id": "MDQ6VXNlcjI0NTI4NjI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/24528627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BlockMechanic",
      "html_url": "https://github.com/BlockMechanic",
      "followers_url": "https://api.github.com/users/BlockMechanic/followers",
      "following_url": "https://api.github.com/users/BlockMechanic/following{/other_user}",
      "gists_url": "https://api.github.com/users/BlockMechanic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BlockMechanic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BlockMechanic/subscriptions",
      "organizations_url": "https://api.github.com/users/BlockMechanic/orgs",
      "repos_url": "https://api.github.com/users/BlockMechanic/repos",
      "events_url": "https://api.github.com/users/BlockMechanic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BlockMechanic/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1a89927b52dc36004a5734e5c7e8d44a5436900",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d1a89927b52dc36004a5734e5c7e8d44a5436900"
      }
    ],
    "stats": {
      "total": 182,
      "additions": 169,
      "deletions": 13
    },
    "files": [
      {
        "sha": "405a9e900c95a688f2200f2660dae93938410ea1",
        "filename": "depends/hosts/android.mk",
        "status": "added",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b28c1030e55431f61746df09d546bb36bec91aa3/depends/hosts/android.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b28c1030e55431f61746df09d546bb36bec91aa3/depends/hosts/android.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/android.mk?ref=b28c1030e55431f61746df09d546bb36bec91aa3",
        "patch": "@@ -0,0 +1,22 @@\n+ANDROID_SDK=$(ANDROID_SDK)\n+ANDROID_NDK=$(ANDROID_NDK)\n+NDK_VERSION=4.9\n+ANDROID_API_LEVEL=$(ANDROID_API_LEVEL)\n+ANDROID_TARGET_ARCH=$(ANDROID_TARGET_ARCH)\n+\n+ifeq (ANDROID_TARGET_ARCH,armeabi-v7a)\n+android_AR=$(ANDROID_TOOLCHAIN_BIN)/arm-linux-androideabi-ar\n+android_CXX=$(ANDROID_TOOLCHAIN_BIN)/$(HOST)eabi$(ANDROID_API_LEVEL)-clang++\n+android_CC=$(ANDROID_TOOLCHAIN_BIN)/$(HOST)eabi$(ANDROID_API_LEVEL)-clang\n+android_RANLIB=$(ANDROID_TOOLCHAIN_BIN)/arm-linux-androideabi-ranlib\n+elseif (ANDROID_TARGET_ARCH,x86)\n+android_AR=$(ANDROID_TOOLCHAIN_BIN)/i686-linux-android-ar\n+android_CXX=$(ANDROID_TOOLCHAIN_BIN)/i686-linux-android$(ANDROID_API_LEVEL)-clang++\n+android_CC=$(ANDROID_TOOLCHAIN_BIN)/i686-linux-android$(ANDROID_API_LEVEL)-clang\n+android_RANLIB=$(ANDROID_TOOLCHAIN_BIN)/i686-linux-android-ranlib\n+else\n+android_AR=$(ANDROID_TOOLCHAIN_BIN)/$(HOST)-ar\n+android_CXX=$(ANDROID_TOOLCHAIN_BIN)/$(HOST)$(ANDROID_API_LEVEL)-clang++\n+android_CC=$(ANDROID_TOOLCHAIN_BIN)/$(HOST)$(ANDROID_API_LEVEL)-clang\n+android_RANLIB=$(ANDROID_TOOLCHAIN_BIN)/$(HOST)-ranlib\n+endif"
      },
      {
        "sha": "bdf1a2fa6bd9ba0d3716e4ecac740ba9c3e6e5aa",
        "filename": "depends/packages/bdb.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b28c1030e55431f61746df09d546bb36bec91aa3/depends/packages/bdb.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b28c1030e55431f61746df09d546bb36bec91aa3/depends/packages/bdb.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/bdb.mk?ref=b28c1030e55431f61746df09d546bb36bec91aa3",
        "patch": "@@ -9,6 +9,8 @@ define $(package)_set_vars\n $(package)_config_opts=--disable-shared --enable-cxx --disable-replication\n $(package)_config_opts_mingw32=--enable-mingw\n $(package)_config_opts_linux=--with-pic\n+$(package)_config_opts_armv7a_android=--with-pic\n+$(package)_config_opts_i686_android=--with-pic\n $(package)_cxxflags=-std=c++11\n $(package)_cppflags_mingw32=-DUNICODE -D_UNICODE\n endef"
      },
      {
        "sha": "d2200307fb33e95e5818bf28556a4af2ac8ce91d",
        "filename": "depends/packages/boost.mk",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b28c1030e55431f61746df09d546bb36bec91aa3/depends/packages/boost.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b28c1030e55431f61746df09d546bb36bec91aa3/depends/packages/boost.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/boost.mk?ref=b28c1030e55431f61746df09d546bb36bec91aa3",
        "patch": "@@ -15,13 +15,20 @@ $(package)_config_opts_mingw32=binary-format=pe target-os=windows threadapi=win3\n $(package)_config_opts_x86_64_mingw32=address-model=64\n $(package)_config_opts_i686_mingw32=address-model=32\n $(package)_config_opts_i686_linux=address-model=32 architecture=x86\n+$(package)_config_opts_s390x_linux=address-model=64\n+$(package)_config_opts_sparc64_linux=address-model=64\n+$(package)_config_opts_alpha_linux=address-model=64\n+$(package)_config_opts_m68k_linux=address-model=32\n+$(package)_config_opts_x86_64_android=address-model=64\n+$(package)_config_opts_i686_android=address-model=32\n $(package)_toolset_$(host_os)=gcc\n $(package)_archiver_$(host_os)=$($(package)_ar)\n $(package)_toolset_darwin=darwin\n $(package)_archiver_darwin=$($(package)_libtool)\n $(package)_config_libraries=chrono,filesystem,system,thread,test\n $(package)_cxxflags=-std=c++11 -fvisibility=hidden\n $(package)_cxxflags_linux=-fPIC\n+$(package)_cxxflags_android=-fPIC\n endef\n \n define $(package)_preprocess_cmds"
      },
      {
        "sha": "286532d5bbdbb34464147be1720ae55fcd931cca",
        "filename": "depends/packages/libevent.mk",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b28c1030e55431f61746df09d546bb36bec91aa3/depends/packages/libevent.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b28c1030e55431f61746df09d546bb36bec91aa3/depends/packages/libevent.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/libevent.mk?ref=b28c1030e55431f61746df09d546bb36bec91aa3",
        "patch": "@@ -3,15 +3,18 @@ $(package)_version=2.1.8-stable\n $(package)_download_path=https://github.com/libevent/libevent/archive/\n $(package)_file_name=release-$($(package)_version).tar.gz\n $(package)_sha256_hash=316ddb401745ac5d222d7c529ef1eada12f58f6376a66c1118eee803cb70f83d\n+$(package)_patches=0001-fixup.patch\n \n define $(package)_preprocess_cmds\n-  ./autogen.sh\n+  ./autogen.sh && patch -p1 < $($(package)_patch_dir)/0001-fixup.patch\n endef\n \n define $(package)_set_vars\n   $(package)_config_opts=--disable-shared --disable-openssl --disable-libevent-regress --disable-samples\n   $(package)_config_opts_release=--disable-debug-mode\n   $(package)_config_opts_linux=--with-pic\n+  $(package)_config_opts_armv7a_android=--with-pic\n+  $(package)_config_opts_i686_android=--with-pic\n endef\n \n define $(package)_config_cmds"
      },
      {
        "sha": "59772cd201f29005d596144c6862ac4d9b1e02e7",
        "filename": "depends/packages/native_protobuf.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b28c1030e55431f61746df09d546bb36bec91aa3/depends/packages/native_protobuf.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b28c1030e55431f61746df09d546bb36bec91aa3/depends/packages/native_protobuf.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_protobuf.mk?ref=b28c1030e55431f61746df09d546bb36bec91aa3",
        "patch": "@@ -6,6 +6,8 @@ $(package)_sha256_hash=ee445612d544d885ae240ffbcbf9267faa9f593b7b101f21d58beceb9\n \n define $(package)_set_vars\n $(package)_config_opts=--disable-shared --without-zlib\n+$(package)_cxxflags_armv7a_android=-fPIC\n+$(package)_cxxflags_i686_android=-fPIC\n endef\n \n define $(package)_config_cmds"
      },
      {
        "sha": "feb62866cf06aca6d4416f90e10a4d1fb02d305d",
        "filename": "depends/packages/openssl.mk",
        "status": "modified",
        "additions": 14,
        "deletions": 1,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b28c1030e55431f61746df09d546bb36bec91aa3/depends/packages/openssl.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b28c1030e55431f61746df09d546bb36bec91aa3/depends/packages/openssl.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/openssl.mk?ref=b28c1030e55431f61746df09d546bb36bec91aa3",
        "patch": "@@ -54,14 +54,27 @@ $(package)_config_opts_mips_linux=linux-generic32\n $(package)_config_opts_powerpc_linux=linux-generic32\n $(package)_config_opts_riscv32_linux=linux-generic32\n $(package)_config_opts_riscv64_linux=linux-generic64\n+$(package)_config_opts_powerpc64le_linux=linux-generic64\n+$(package)_config_opts_sparc64_linux=linux-generic64\n+$(package)_config_opts_s390x_linux=linux-generic64\n+$(package)_config_opts_alpha_linux=linux-generic64\n+$(package)_config_opts_m68k_linux=linux-generic32\n $(package)_config_opts_x86_64_darwin=darwin64-x86_64-cc\n+$(package)_config_opts_aarch64_darwin=iphoneos-cross\n $(package)_config_opts_x86_64_mingw32=mingw64\n $(package)_config_opts_i686_mingw32=mingw\n+#$(package)_config_opts_android=linux-generic64\n+$(package)_config_opts_aarch64_android=linux-generic64 -fPIC\n+$(package)_config_opts_x86_64_android=linux-generic64 -fPIC\n+$(package)_config_opts_armv7a_android=linux-generic32 -fPIC\n+$(package)_config_opts_x86_android=linux-generic32 -fPIC\n+$(package)_config_opts_i686_android=linux-generic32 -fPIC\n endef\n \n define $(package)_preprocess_cmds\n   sed -i.old \"/define DATE/d\" util/mkbuildinf.pl && \\\n-  sed -i.old \"s|engines apps test|engines|\" Makefile.org\n+  sed -i.old \"s|engines apps test|engines|\" Makefile.org && \\\n+  LC_ALL=C sed -i.old \"s/-isysroot.*(CROSS_SDK)//\" Configure\n endef\n \n define $(package)_config_cmds"
      },
      {
        "sha": "022721681ad15045c669a2e922bd237c3fac655b",
        "filename": "depends/packages/packages.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b28c1030e55431f61746df09d546bb36bec91aa3/depends/packages/packages.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b28c1030e55431f61746df09d546bb36bec91aa3/depends/packages/packages.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/packages.mk?ref=b28c1030e55431f61746df09d546bb36bec91aa3",
        "patch": "@@ -6,7 +6,7 @@ protobuf_packages = protobuf\n qt_packages = qrencode zlib\n \n qt_linux_packages:=qt expat libxcb xcb_proto libXau xproto freetype fontconfig\n-\n+qt_android_packages:=qt expat libxcb xcb_proto libXau xproto freetype fontconfig\n rapidcheck_packages = rapidcheck\n \n qt_darwin_packages=qt"
      },
      {
        "sha": "def3e5fbef3e02fabad00ede948aa45b2f473ed8",
        "filename": "depends/packages/protobuf.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b28c1030e55431f61746df09d546bb36bec91aa3/depends/packages/protobuf.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b28c1030e55431f61746df09d546bb36bec91aa3/depends/packages/protobuf.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/protobuf.mk?ref=b28c1030e55431f61746df09d546bb36bec91aa3",
        "patch": "@@ -9,6 +9,8 @@ $(package)_cxxflags=-std=c++11\n define $(package)_set_vars\n   $(package)_config_opts=--disable-shared --with-protoc=$(build_prefix)/bin/protoc\n   $(package)_config_opts_linux=--with-pic\n+  $(package)_config_opts_armv7a_android=--with-pic\n+  $(package)_config_opts_i686_android=--with-pic\n endef\n \n define $(package)_preprocess_cmds"
      },
      {
        "sha": "771d62604f837ac395c234558d3988a0a44f4f53",
        "filename": "depends/packages/qrencode.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b28c1030e55431f61746df09d546bb36bec91aa3/depends/packages/qrencode.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b28c1030e55431f61746df09d546bb36bec91aa3/depends/packages/qrencode.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qrencode.mk?ref=b28c1030e55431f61746df09d546bb36bec91aa3",
        "patch": "@@ -8,6 +8,8 @@ define $(package)_set_vars\n $(package)_config_opts=--disable-shared --without-tools --without-tests --disable-sdltest\n $(package)_config_opts += --disable-gprof --disable-gcov --disable-mudflap\n $(package)_config_opts_linux=--with-pic\n+$(package)_config_opts_armv7a_android=--with-pic\n+$(package)_config_opts_i686_android=--with-pic\n endef\n \n define $(package)_preprocess_cmds"
      },
      {
        "sha": "eebf50e313805c0a705dcd16ebbe0abb71782ee4",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 30,
        "deletions": 9,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b28c1030e55431f61746df09d546bb36bec91aa3/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b28c1030e55431f61746df09d546bb36bec91aa3/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=b28c1030e55431f61746df09d546bb36bec91aa3",
        "patch": "@@ -1,20 +1,21 @@\n PACKAGE=qt\n-$(package)_version=5.9.8\n+$(package)_version=5.12.4\n $(package)_download_path=https://download.qt.io/official_releases/qt/5.9/$($(package)_version)/submodules\n-$(package)_suffix=opensource-src-$($(package)_version).tar.xz\n+$(package)_suffix=everywhere-src-$($(package)_version).tar.xz\n $(package)_file_name=qtbase-$($(package)_suffix)\n-$(package)_sha256_hash=9b9dec1f67df1f94bce2955c5604de992d529dde72050239154c56352da0907d\n+$(package)_sha256_hash=20fbc7efa54ff7db9552a7a2cdf9047b80253c1933c834f35b0bc5c1ae021195\n $(package)_dependencies=openssl zlib\n $(package)_linux_dependencies=freetype fontconfig libxcb\n+$(package)_android_dependencies=freetype fontconfig libxcb\n $(package)_build_subdir=qtbase\n $(package)_qt_libs=corelib network widgets gui plugins testlib\n-$(package)_patches=fix_qt_pkgconfig.patch mac-qmake.conf fix_configure_mac.patch fix_no_printer.patch fix_rcc_determinism.patch fix_riscv64_arch.patch xkb-default.patch no-xlib.patch\n+$(package)_patches=fix_qt_pkgconfig.patch mac-qmake.conf fix_configure_mac.patch fix_no_printer.patch fix_s390x_powerpc_mips_mipsel_architectures.patch aarch64-android-qmake.conf android-base-head.patch\n \n $(package)_qttranslations_file_name=qttranslations-$($(package)_suffix)\n-$(package)_qttranslations_sha256_hash=fb5a47799754af73d3bf501fe513342cfe2fc37f64e80df5533f6110e804220c\n+$(package)_qttranslations_sha256_hash=ab8dd55f5ca869cab51c3a6ce0888f854b96dc03c7f25d2bd3d2c50314ab60fb\n \n $(package)_qttools_file_name=qttools-$($(package)_suffix)\n-$(package)_qttools_sha256_hash=a97556eb7b2f30252cdd8a598c396cfce2b2f79d2bae883af6d3b26a2cdcc63c\n+$(package)_qttools_sha256_hash=3b0e353860a9c0cd4db9eeae5f94fef8811ed7d107e3e5e97e4a557f61bd6eb6\n \n $(package)_extra_sources  = $($(package)_qttranslations_file_name)\n $(package)_extra_sources += $($(package)_qttools_file_name)\n@@ -125,8 +126,29 @@ $(package)_config_opts_arm_linux += -platform linux-g++ -xplatform bitcoin-linux\n $(package)_config_opts_i686_linux  = -xplatform linux-g++-32\n $(package)_config_opts_x86_64_linux = -xplatform linux-g++-64\n $(package)_config_opts_aarch64_linux = -xplatform linux-aarch64-gnu-g++\n-$(package)_config_opts_riscv64_linux = -platform linux-g++ -xplatform bitcoin-linux-g++\n+$(package)_config_opts_riscv64_linux = -xplatform linux-g++ -xplatform bitcoin-linux-g++\n+$(package)_config_opts_s390x_linux += -xplatform linux-g++ -xplatform linux-g++-64\n+$(package)_config_opts_powerpc64le_linux += -xplatform linux-g++ -xplatform linux-g++-64\n+$(package)_config_opts_sparc64_linux += -xplatform linux-g++ -xplatform linux-g++-64\n+$(package)_config_opts_alpha_linux += -xplatform linux-g++ -xplatform linux-g++-64\n $(package)_config_opts_mingw32  = -no-opengl -xplatform win32-g++ -device-option CROSS_COMPILE=\"$(host)-\"\n+\n+$(package)_config_opts_android = -xplatform android-clang\n+$(package)_config_opts_android += -android-sdk $(ANDROID_SDK) \n+$(package)_config_opts_android += -android-ndk $(ANDROID_NDK) \n+$(package)_config_opts_android += -android-ndk-platform android-$(ANDROID_API_LEVEL) \n+$(package)_config_opts_android += -qpa qandroid \n+$(package)_config_opts_android += -system-freetype \n+$(package)_config_opts_android += -fontconfig \n+$(package)_config_opts_android += -opengl \n+$(package)_config_opts_android += -egl \n+$(package)_config_opts_android += -L $(host_prefix)/lib -I $(host_prefix)/include -static\n+\n+$(package)_config_opts_aarch64_android += -android-arch arm64-v8a \n+$(package)_config_opts_armv7a_android += -android-arch armeabi-v7a \n+$(package)_config_opts_x86_64_android += -android-arch x86_64 \n+$(package)_config_opts_i686_android += -android-arch i686 \n+\n $(package)_build_env  = QT_RCC_TEST=1\n $(package)_build_env += QT_RCC_SOURCE_DATE_OVERRIDE=1\n endef\n@@ -167,8 +189,7 @@ define $(package)_preprocess_cmds\n   patch -p1 -i $($(package)_patch_dir)/fix_qt_pkgconfig.patch &&\\\n   patch -p1 -i $($(package)_patch_dir)/fix_configure_mac.patch &&\\\n   patch -p1 -i $($(package)_patch_dir)/fix_no_printer.patch &&\\\n-  patch -p1 -i $($(package)_patch_dir)/fix_rcc_determinism.patch &&\\\n-  patch -p1 -i $($(package)_patch_dir)/xkb-default.patch &&\\\n+  patch -p1 -i $($(package)_patch_dir)/android-base-head.patch &&\\\n   echo \"!host_build: QMAKE_CFLAGS     += $($(package)_cflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n   echo \"!host_build: QMAKE_CXXFLAGS   += $($(package)_cxxflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n   echo \"!host_build: QMAKE_LFLAGS     += $($(package)_ldflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\"
      },
      {
        "sha": "77bdc8a4968eae21c32384cff49c0337b9f00749",
        "filename": "depends/packages/xproto.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b28c1030e55431f61746df09d546bb36bec91aa3/depends/packages/xproto.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b28c1030e55431f61746df09d546bb36bec91aa3/depends/packages/xproto.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/xproto.mk?ref=b28c1030e55431f61746df09d546bb36bec91aa3",
        "patch": "@@ -5,7 +5,7 @@ $(package)_file_name=$(package)-$($(package)_version).tar.bz2\n $(package)_sha256_hash=636162c1759805a5a0114a369dffdeccb8af8c859ef6e1445f26a4e6e046514f\n \n define $(package)_set_vars\n-$(package)_config_opts=--without-fop --without-xmlto --without-xsltproc --disable-specs\n+$(package)_config_opts=--disable-shared --without-fop --without-xmlto --without-xsltproc --disable-specs\n endef\n \n define $(package)_preprocess_cmds"
      },
      {
        "sha": "22c8cb5e01789f860b6c9049821ddc380ef813ed",
        "filename": "depends/packages/zeromq.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b28c1030e55431f61746df09d546bb36bec91aa3/depends/packages/zeromq.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b28c1030e55431f61746df09d546bb36bec91aa3/depends/packages/zeromq.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/zeromq.mk?ref=b28c1030e55431f61746df09d546bb36bec91aa3",
        "patch": "@@ -10,6 +10,8 @@ define $(package)_set_vars\n   $(package)_config_opts += --without-libsodium --without-libgssapi_krb5 --without-pgm --without-norm --without-vmci\n   $(package)_config_opts += --disable-libunwind --disable-radix-tree --without-gcov\n   $(package)_config_opts_linux=--with-pic\n+  $(package)_config_opts_armv7a_android=--with-pic\n+  $(package)_config_opts_i686_android=--with-pic\n   $(package)_cxxflags=-std=c++11\n endef\n "
      },
      {
        "sha": "594a43c115466d86c6c8dd4815b97b39c3a4f195",
        "filename": "depends/patches/libevent/0001-fixup.patch",
        "status": "added",
        "additions": 69,
        "deletions": 0,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b28c1030e55431f61746df09d546bb36bec91aa3/depends/patches/libevent/0001-fixup.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b28c1030e55431f61746df09d546bb36bec91aa3/depends/patches/libevent/0001-fixup.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/libevent/0001-fixup.patch?ref=b28c1030e55431f61746df09d546bb36bec91aa3",
        "patch": "@@ -0,0 +1,69 @@\n+From cadae3ab7abf45e61ecae8aac39d97d1f3cbd336 Mon Sep 17 00:00:00 2001\n+From: Lawrence Nahum <lawrence@greenaddress.it>\n+Date: Sun, 3 Dec 2017 22:56:09 +0100\n+Subject: [PATCH] fixup\n+\n+---\n+ configure.ac          | 1 +\n+ evutil_rand.c         | 3 +++\n+ include/event2/util.h | 4 ++--\n+ 3 files changed, 6 insertions(+), 2 deletions(-)\n+\n+diff --git a/configure.ac b/configure.ac\n+index 7528d37..3bb2121 100644\n+--- a/configure.ac\n++++ b/configure.ac\n+@@ -341,6 +341,7 @@ dnl Checks for library functions.\n+ AC_CHECK_FUNCS([ \\\n+   accept4 \\\n+   arc4random \\\n++  arc4random_addrandom \\\n+   arc4random_buf \\\n+   eventfd \\\n+   epoll_create1 \\\n+diff --git a/evutil_rand.c b/evutil_rand.c\n+index 046a14b..3f0bf2c 100644\n+--- a/evutil_rand.c\n++++ b/evutil_rand.c\n+@@ -191,6 +191,7 @@ evutil_secure_rng_get_bytes(void *buf, size_t n)\n+ {\n+ \tev_arc4random_buf(buf, n);\n+ }\n++#ifdef HAVE_ARC4RANDOM_ADDRANDOM\n+ \n+ void\n+ evutil_secure_rng_add_bytes(const char *buf, size_t n)\n+@@ -199,6 +200,8 @@ evutil_secure_rng_add_bytes(const char *buf, size_t n)\n+ \t    n>(size_t)INT_MAX ? INT_MAX : (int)n);\n+ }\n+ \n++#endif\n++\n+ void\n+ evutil_free_secure_rng_globals_(void)\n+ {\n+diff --git a/include/event2/util.h b/include/event2/util.h\n+index dd4bbb6..a9a169d 100644\n+--- a/include/event2/util.h\n++++ b/include/event2/util.h\n+@@ -841,7 +841,7 @@ int evutil_secure_rng_init(void);\n+  */\n+ EVENT2_EXPORT_SYMBOL\n+ int evutil_secure_rng_set_urandom_device_file(char *fname);\n+-\n++#ifdef HAVE_ARC4RANDOM_ADDRANDOM\n+ /** Seed the random number generator with extra random bytes.\n+ \n+     You should almost never need to call this function; it should be\n+@@ -858,7 +858,7 @@ int evutil_secure_rng_set_urandom_device_file(char *fname);\n+  */\n+ EVENT2_EXPORT_SYMBOL\n+ void evutil_secure_rng_add_bytes(const char *dat, size_t datlen);\n+-\n++#endif\n+ #ifdef __cplusplus\n+ }\n+ #endif\n+-- \n+2.14.3\n+"
      },
      {
        "sha": "15305f6c510528b0013edd09bd0c7d6a878de831",
        "filename": "depends/patches/qt/android-base-head.patch",
        "status": "added",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b28c1030e55431f61746df09d546bb36bec91aa3/depends/patches/qt/android-base-head.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b28c1030e55431f61746df09d546bb36bec91aa3/depends/patches/qt/android-base-head.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/android-base-head.patch?ref=b28c1030e55431f61746df09d546bb36bec91aa3",
        "patch": "@@ -0,0 +1,11 @@\n+--- old/qtbase/mkspecs/common/android-base-head.conf\t2019-06-12 22:59:14.000000000 +0200\n++++ new/qtbase/mkspecs/common/android-base-head.conf\t2019-08-11 19:33:26.978757478 +0200\n+@@ -71,8 +71,3 @@\n+ CROSS_COMPILE = $$NDK_TOOLCHAIN_PATH/bin/$$NDK_TOOLS_PREFIX-\n+ \n+ QMAKE_PCH_OUTPUT_EXT    = .gch\n+-\n+-QMAKE_CFLAGS_PRECOMPILE       = -x c-header -c ${QMAKE_PCH_INPUT} -o ${QMAKE_PCH_OUTPUT}\n+-QMAKE_CFLAGS_USE_PRECOMPILE   = -include ${QMAKE_PCH_OUTPUT_BASE}\n+-QMAKE_CXXFLAGS_PRECOMPILE     = -x c++-header -c ${QMAKE_PCH_INPUT} -o ${QMAKE_PCH_OUTPUT}\n+-QMAKE_CXXFLAGS_USE_PRECOMPILE = $$QMAKE_CFLAGS_USE_PRECOMPILE"
      }
    ]
  },
  {
    "sha": "2345330780e251c991a636a6a6e048fd47125a0b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMzQ1MzMwNzgwZTI1MWM5OTFhNjM2YTZhNmUwNDhmZDQ3MTI1YTBi",
    "commit": {
      "author": {
        "name": "BlockMechanic",
        "email": "blockmecha@gmail.com",
        "date": "2019-09-19T13:09:47Z"
      },
      "committer": {
        "name": "BlockMechanic",
        "email": "blockmecha@gmail.com",
        "date": "2019-09-19T13:09:47Z"
      },
      "message": "Update bitcoin_qt.m4\n\nFix to allow configure to detect at",
      "tree": {
        "sha": "34866ae295c08040a569aa6eadd2e170b6aad7a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/34866ae295c08040a569aa6eadd2e170b6aad7a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2345330780e251c991a636a6a6e048fd47125a0b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2345330780e251c991a636a6a6e048fd47125a0b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2345330780e251c991a636a6a6e048fd47125a0b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2345330780e251c991a636a6a6e048fd47125a0b/comments",
    "author": {
      "login": "BlockMechanic",
      "id": 24528627,
      "node_id": "MDQ6VXNlcjI0NTI4NjI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/24528627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BlockMechanic",
      "html_url": "https://github.com/BlockMechanic",
      "followers_url": "https://api.github.com/users/BlockMechanic/followers",
      "following_url": "https://api.github.com/users/BlockMechanic/following{/other_user}",
      "gists_url": "https://api.github.com/users/BlockMechanic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BlockMechanic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BlockMechanic/subscriptions",
      "organizations_url": "https://api.github.com/users/BlockMechanic/orgs",
      "repos_url": "https://api.github.com/users/BlockMechanic/repos",
      "events_url": "https://api.github.com/users/BlockMechanic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BlockMechanic/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "BlockMechanic",
      "id": 24528627,
      "node_id": "MDQ6VXNlcjI0NTI4NjI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/24528627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BlockMechanic",
      "html_url": "https://github.com/BlockMechanic",
      "followers_url": "https://api.github.com/users/BlockMechanic/followers",
      "following_url": "https://api.github.com/users/BlockMechanic/following{/other_user}",
      "gists_url": "https://api.github.com/users/BlockMechanic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BlockMechanic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BlockMechanic/subscriptions",
      "organizations_url": "https://api.github.com/users/BlockMechanic/orgs",
      "repos_url": "https://api.github.com/users/BlockMechanic/repos",
      "events_url": "https://api.github.com/users/BlockMechanic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BlockMechanic/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b28c1030e55431f61746df09d546bb36bec91aa3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b28c1030e55431f61746df09d546bb36bec91aa3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b28c1030e55431f61746df09d546bb36bec91aa3"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8a5bdd840e643c1c80c7041b2e360e249bca3c78",
        "filename": "build-aux/m4/bitcoin_qt.m4",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2345330780e251c991a636a6a6e048fd47125a0b/build-aux/m4/bitcoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2345330780e251c991a636a6a6e048fd47125a0b/build-aux/m4/bitcoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4?ref=2345330780e251c991a636a6a6e048fd47125a0b",
        "patch": "@@ -116,8 +116,10 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n   if test \"x$bitcoin_cv_static_qt\" = xyes; then\n     _BITCOIN_QT_FIND_STATIC_PLUGINS\n     AC_DEFINE(QT_STATICPLUGIN, 1, [Define this symbol if qt plugins are static])\n-    _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QMinimalIntegrationPlugin)],[-lqminimal])\n-    AC_DEFINE(QT_QPA_PLATFORM_MINIMAL, 1, [Define this symbol if the minimal qt platform exists])\n+    if test \"x$TARGET_OS\" != xandroid; then\n+       _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QMinimalIntegrationPlugin)],[-lqminimal])\n+       AC_DEFINE(QT_QPA_PLATFORM_MINIMAL, 1, [Define this symbol if the minimal qt platform exists])\n+    fi\n     if test \"x$TARGET_OS\" = xwindows; then\n       _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QWindowsIntegrationPlugin)],[-lqwindows])\n       AC_DEFINE(QT_QPA_PLATFORM_WINDOWS, 1, [Define this symbol if the qt platform is windows])"
      }
    ]
  }
]