sipa,2020-10-16 04:25:35,"A suggestion that is not included here is rejecting the _creation_ of witness v1 spends during a period preceding activation to protect users sending to such outputs too early. It's easy to add if desired, but perhaps less necessary.\n\n@sdaftuar Doing this for the entire defined/started/lockedin period adds additional non-homogeneity to network relay policy. @ajtowns suggested doing it only dur",https://github.com/bitcoin/bitcoin/pull/20165#issuecomment-709743739,709743739,
Sjors,2020-10-16 09:57:42,utACK 6d56873,https://github.com/bitcoin/bitcoin/pull/20165#issuecomment-709949608,709949608,
naumenkogs,2020-10-19 07:30:09,"utACK 6d568731862b1d888fa8db9effb3663dfe8e0e46\n\n-------- \n\nCould you elaborate on what this means:\n>@ajtowns suggested doing it only during during the lockedin period, to provide a short but still coordinated window of additional protection.",https://github.com/bitcoin/bitcoin/pull/20165#issuecomment-711756967,711756967,
sdaftuar,2020-10-19 18:50:57,"Concept ACK the change suggested in this PR.\n\n> A suggestion that is not included here is rejecting the _creation_ of witness v1 spends during a period preceding activation to protect users sending to such outputs too early. It's easy to add if desired, but perhaps less necessary.\n> \n> @sdaftuar Doing this for the entire defined/started/lockedin period adds additional non-homogeneity to ne",https://github.com/bitcoin/bitcoin/pull/20165#issuecomment-712373231,712373231,
sipa,2020-10-20 02:55:10,"@naumenkogs Some background, this was discussed on the last IRC dev meeting, where I brought up two things we can do:\n* Making sure *spending* of witnesses isn't standard until an activation is defined (as the node shouldn't behave differently up to that point)\n* Making sure *creating* witness v1 outputs are not allowed to protect users potentially accidentally creating anyonecanspend outputs ",https://github.com/bitcoin/bitcoin/pull/20165#issuecomment-712555558,712555558,
ajtowns,2020-10-20 09:41:53,"Concept ACK -- I think it makes sense to not do any ""create witness v1 outputs"" protection until an activation method is defined. \n\nMaking spends non-standard is valuable for signet (where standardness and consensus aren't all that different, so making something standard but not consensus-enforced means it can be relied on in practice).",https://github.com/bitcoin/bitcoin/pull/20165#issuecomment-712728451,712728451,
MarcoFalke,2020-10-21 12:02:35,Concept ACK will review when I am done reading through the other taproot changes,https://github.com/bitcoin/bitcoin/pull/20165#issuecomment-713519142,713519142,
MarcoFalke,2020-10-28 11:07:06,"I checked out the test and ran it against master, without failure. Similarly running master against this test didn't result in a failure either.\n\nConcept ACK on not changing policy for creation of v1 *outputs*\n\nACK 6d568731862b1d888fa8db9effb3663dfe8e0e46 üëâ\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SH",https://github.com/bitcoin/bitcoin/pull/20165#issuecomment-717861249,717861249,
Sjors,2020-10-31 08:42:51,utACK 3d0556d41087f945ed0a47a5d770076ad42ce432,https://github.com/bitcoin/bitcoin/pull/20165#issuecomment-719904395,719904395,
MarcoFalke,2020-11-02 08:33:34,"review ACK 3d0556d41087f945ed0a47a5d770076ad42ce432 üèì\ndid not review the test, but verified that it fails on master-bitcoind\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nreview ACK 3d0556d41087f945ed0a47a5d770076ad42ce432 üèì\ndid not review the test, but verified that it fails on master-bitcoind\n",https://github.com/bitcoin/bitcoin/pull/20165#issuecomment-720322381,720322381,
jnewbery,2020-11-02 08:47:21,utACK 3d0556d41087f945ed0a47a5d770076ad42ce432,https://github.com/bitcoin/bitcoin/pull/20165#issuecomment-720329283,720329283,
kallewoof,2020-10-16 04:25:01,"```suggestion\n            return taproot_active;\n```\n(Unless there is an assumption that there will be more stuff added below.)",https://github.com/bitcoin/bitcoin/pull/20165#discussion_r506043961,506043961,src/policy/policy.cpp
sipa,2020-10-16 04:28:20,"No, because we need to check all inputs. There can't be any return true's inside the loop body.",https://github.com/bitcoin/bitcoin/pull/20165#discussion_r506044677,506044677,src/policy/policy.cpp
kallewoof,2020-10-16 04:40:23,"D'oh, yep.",https://github.com/bitcoin/bitcoin/pull/20165#discussion_r506047552,506047552,src/policy/policy.cpp
jnewbery,2020-10-27 16:48:53,I don't understand what this change is doing.,https://github.com/bitcoin/bitcoin/pull/20165#discussion_r512858207,512858207,test/functional/feature_taproot.py
sipa,2020-10-27 17:00:31,"It's running every test twice.\n\nWhat motivated this: before this change, there are only 10 tests, the majority of which were non-standard. As a transaction is only standard when (at least) all its inputs are, this meant that almost all test transactions were expected to be nonstandard (as they contain more than one input). This means not much is tested: having one test incorrectly marked as stan",https://github.com/bitcoin/bitcoin/pull/20165#discussion_r512866757,512866757,test/functional/feature_taproot.py
jnewbery,2020-10-27 19:42:45,"ok, in that case I think this would be a bit more obvious:\n\n```diff\ndiff --git a/test/functional/feature_taproot.py b/test/functional/feature_taproot.py\nindex ca523572bc..5984ea4161 100755\n--- a/test/functional/feature_taproot.py\n+++ b/test/functional/feature_taproot.py\n@@ -1143,6 +1143,9 @@ def spenders_taproot_inactive():\n     add_spender(spenders, ""inactive/scriptpath_valid_opsu",https://github.com/bitcoin/bitcoin/pull/20165#discussion_r512980348,512980348,test/functional/feature_taproot.py
MarcoFalke,2020-10-28 11:06:47,"```suggestion\nbool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs, bool taproot_active);\n```\n\nI don't really like modifying code to accommodate tests. This is just asking for a mishap down the road, and at best someone else will have to clean it up anyway. It seems safer to have all callers pass down the bool explicitly.",https://github.com/bitcoin/bitcoin/pull/20165#discussion_r513357223,513357223,src/policy/policy.h
MarcoFalke,2020-10-28 12:42:30,"Ok, assuming that taproot activates, this code will go away either way, so consider my comment a style-nit.",https://github.com/bitcoin/bitcoin/pull/20165#discussion_r513410582,513410582,src/policy/policy.h
sipa,2020-10-30 22:54:27,"I've changed the approach, and moved it to a different commit.",https://github.com/bitcoin/bitcoin/pull/20165#discussion_r515415390,515415390,test/functional/feature_taproot.py
sipa,2020-10-30 22:54:40,I've made the argument mandatory.,https://github.com/bitcoin/bitcoin/pull/20165#discussion_r515415438,515415438,src/policy/policy.h
jonatack,2020-11-02 10:55:50,"525cbd425 omit ""or"" or s/or/or not/",https://github.com/bitcoin/bitcoin/pull/20165#discussion_r515891907,515891907,src/policy/policy.h
jonatack,2020-11-02 11:12:51,525cbd42 perhaps `s/auto/ThresholdState/` like `validation.cpp::L1834` and `mining.cpp::L820`,https://github.com/bitcoin/bitcoin/pull/20165#discussion_r515901191,515901191,src/validation.cpp
