[
  {
    "sha": "525cbd425e2f6a1dbd0febc53d7ada22cec4661f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MjVjYmQ0MjVlMmY2YTFkYmQwZmViYzUzZDdhZGEyMmNlYzQ2NjFm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-10-16T03:57:58Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-10-30T22:52:19Z"
      },
      "message": "Only relay Taproot spends if next block has it active",
      "tree": {
        "sha": "20e972c680f5d5cb3d22060d9abb730a33d6e7ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/20e972c680f5d5cb3d22060d9abb730a33d6e7ea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/525cbd425e2f6a1dbd0febc53d7ada22cec4661f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/525cbd425e2f6a1dbd0febc53d7ada22cec4661f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/525cbd425e2f6a1dbd0febc53d7ada22cec4661f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/525cbd425e2f6a1dbd0febc53d7ada22cec4661f/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "42b66a6b814bca130a9ccf0a3f747cf33d628232",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42b66a6b814bca130a9ccf0a3f747cf33d628232",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/42b66a6b814bca130a9ccf0a3f747cf33d628232"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 23,
      "deletions": 15
    },
    "files": [
      {
        "sha": "d5275b0b763f19d7bb0a39fcbb102829767e8491",
        "filename": "src/bench/ccoins_caching.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/525cbd425e2f6a1dbd0febc53d7ada22cec4661f/src/bench/ccoins_caching.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/525cbd425e2f6a1dbd0febc53d7ada22cec4661f/src/bench/ccoins_caching.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/ccoins_caching.cpp?ref=525cbd425e2f6a1dbd0febc53d7ada22cec4661f",
        "patch": "@@ -45,7 +45,7 @@ static void CCoinsCaching(benchmark::Bench& bench)\n     // Benchmark.\n     const CTransaction tx_1(t1);\n     bench.run([&] {\n-        bool success = AreInputsStandard(tx_1, coins);\n+        bool success = AreInputsStandard(tx_1, coins, false);\n         assert(success);\n     });\n     ECC_Stop();"
      },
      {
        "sha": "91997aa883ec4d00915f0f282a64ceadb60f0c1e",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/525cbd425e2f6a1dbd0febc53d7ada22cec4661f/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/525cbd425e2f6a1dbd0febc53d7ada22cec4661f/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=525cbd425e2f6a1dbd0febc53d7ada22cec4661f",
        "patch": "@@ -155,7 +155,7 @@ bool IsStandardTx(const CTransaction& tx, bool permit_bare_multisig, const CFeeR\n  *\n  * Note that only the non-witness portion of the transaction is checked here.\n  */\n-bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n+bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs, bool taproot_active)\n {\n     if (tx.IsCoinBase())\n         return true; // Coinbases don't use vin normally\n@@ -183,6 +183,9 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n             if (subscript.GetSigOpCount(true) > MAX_P2SH_SIGOPS) {\n                 return false;\n             }\n+        } else if (whichType == TxoutType::WITNESS_V1_TAPROOT) {\n+            // Don't allow Taproot spends unless Taproot is active.\n+            if (!taproot_active) return false;\n         }\n     }\n "
      },
      {
        "sha": "8090dff4c62067b13da8adf9b34fd8db5d67eaad",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/525cbd425e2f6a1dbd0febc53d7ada22cec4661f/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/525cbd425e2f6a1dbd0febc53d7ada22cec4661f/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=525cbd425e2f6a1dbd0febc53d7ada22cec4661f",
        "patch": "@@ -95,10 +95,11 @@ bool IsStandard(const CScript& scriptPubKey, TxoutType& whichType);\n bool IsStandardTx(const CTransaction& tx, bool permit_bare_multisig, const CFeeRate& dust_relay_fee, std::string& reason);\n     /**\n      * Check for standard transaction types\n-     * @param[in] mapInputs    Map of previous transactions that have outputs we're spending\n+     * @param[in] mapInputs       Map of previous transactions that have outputs we're spending\n+     * @param[in] taproot_active  Whether or taproot consensus rules are active (used to decide whether spends of them are permitted)\n      * @return True if all inputs (scriptSigs) use only standard transaction forms\n      */\n-bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n+bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs, bool taproot_active);\n     /**\n      * Check if the transaction is over standard P2WSH resources limit:\n      * 3600bytes witnessScript size, 80bytes per witness stack element, 100 witness stack elements"
      },
      {
        "sha": "ac034809b0571f9b3d014456ea78ade8a803b0e5",
        "filename": "src/test/fuzz/coins_view.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/525cbd425e2f6a1dbd0febc53d7ada22cec4661f/src/test/fuzz/coins_view.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/525cbd425e2f6a1dbd0febc53d7ada22cec4661f/src/test/fuzz/coins_view.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/coins_view.cpp?ref=525cbd425e2f6a1dbd0febc53d7ada22cec4661f",
        "patch": "@@ -229,7 +229,8 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             break;\n         }\n         case 1: {\n-            (void)AreInputsStandard(CTransaction{random_mutable_transaction}, coins_view_cache);\n+            (void)AreInputsStandard(CTransaction{random_mutable_transaction}, coins_view_cache, false);\n+            (void)AreInputsStandard(CTransaction{random_mutable_transaction}, coins_view_cache, true);\n             break;\n         }\n         case 2: {"
      },
      {
        "sha": "4f972dea1cdb8f507cfe93f550ccab2e1069f160",
        "filename": "src/test/fuzz/transaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/525cbd425e2f6a1dbd0febc53d7ada22cec4661f/src/test/fuzz/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/525cbd425e2f6a1dbd0febc53d7ada22cec4661f/src/test/fuzz/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/transaction.cpp?ref=525cbd425e2f6a1dbd0febc53d7ada22cec4661f",
        "patch": "@@ -95,7 +95,8 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n \n     CCoinsView coins_view;\n     const CCoinsViewCache coins_view_cache(&coins_view);\n-    (void)AreInputsStandard(tx, coins_view_cache);\n+    (void)AreInputsStandard(tx, coins_view_cache, false);\n+    (void)AreInputsStandard(tx, coins_view_cache, true);\n     (void)IsWitnessStandard(tx, coins_view_cache);\n \n     UniValue u(UniValue::VOBJ);"
      },
      {
        "sha": "856ec6346d5cc7a8330bcb86f0c3bb356f0d24be",
        "filename": "src/test/script_p2sh_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/525cbd425e2f6a1dbd0febc53d7ada22cec4661f/src/test/script_p2sh_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/525cbd425e2f6a1dbd0febc53d7ada22cec4661f/src/test/script_p2sh_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_p2sh_tests.cpp?ref=525cbd425e2f6a1dbd0febc53d7ada22cec4661f",
        "patch": "@@ -343,7 +343,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txTo.vin[3].scriptSig << OP_11 << OP_11 << std::vector<unsigned char>(oneAndTwo.begin(), oneAndTwo.end());\n     txTo.vin[4].scriptSig << std::vector<unsigned char>(fifteenSigops.begin(), fifteenSigops.end());\n \n-    BOOST_CHECK(::AreInputsStandard(CTransaction(txTo), coins));\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(txTo), coins, false));\n     // 22 P2SH sigops for all inputs (1 for vin[0], 6 for vin[3], 15 for vin[4]\n     BOOST_CHECK_EQUAL(GetP2SHSigOpCount(CTransaction(txTo), coins), 22U);\n \n@@ -356,7 +356,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txToNonStd1.vin[0].prevout.hash = txFrom.GetHash();\n     txToNonStd1.vin[0].scriptSig << std::vector<unsigned char>(sixteenSigops.begin(), sixteenSigops.end());\n \n-    BOOST_CHECK(!::AreInputsStandard(CTransaction(txToNonStd1), coins));\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(txToNonStd1), coins, false));\n     BOOST_CHECK_EQUAL(GetP2SHSigOpCount(CTransaction(txToNonStd1), coins), 16U);\n \n     CMutableTransaction txToNonStd2;\n@@ -368,7 +368,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txToNonStd2.vin[0].prevout.hash = txFrom.GetHash();\n     txToNonStd2.vin[0].scriptSig << std::vector<unsigned char>(twentySigops.begin(), twentySigops.end());\n \n-    BOOST_CHECK(!::AreInputsStandard(CTransaction(txToNonStd2), coins));\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(txToNonStd2), coins, false));\n     BOOST_CHECK_EQUAL(GetP2SHSigOpCount(CTransaction(txToNonStd2), coins), 20U);\n }\n "
      },
      {
        "sha": "1f520074b1ecfd35171aaacda1022d4dc8e2d20a",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/525cbd425e2f6a1dbd0febc53d7ada22cec4661f/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/525cbd425e2f6a1dbd0febc53d7ada22cec4661f/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=525cbd425e2f6a1dbd0febc53d7ada22cec4661f",
        "patch": "@@ -305,7 +305,7 @@ BOOST_AUTO_TEST_CASE(test_Get)\n     t1.vout[0].nValue = 90*CENT;\n     t1.vout[0].scriptPubKey << OP_1;\n \n-    BOOST_CHECK(AreInputsStandard(CTransaction(t1), coins));\n+    BOOST_CHECK(AreInputsStandard(CTransaction(t1), coins, false));\n }\n \n static void CreateCreditAndSpend(const FillableSigningProvider& keystore, const CScript& outscript, CTransactionRef& output, CMutableTransaction& input, bool success = true)"
      },
      {
        "sha": "8241cb159f3b102ae9fd08c6a8642431c25b4f3c",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/525cbd425e2f6a1dbd0febc53d7ada22cec4661f/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/525cbd425e2f6a1dbd0febc53d7ada22cec4661f/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=525cbd425e2f6a1dbd0febc53d7ada22cec4661f",
        "patch": "@@ -690,7 +690,9 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     }\n \n     // Check for non-standard pay-to-script-hash in inputs\n-    if (fRequireStandard && !AreInputsStandard(tx, m_view)) {\n+    const auto& params = args.m_chainparams.GetConsensus();\n+    auto taproot_state = VersionBitsState(::ChainActive().Tip(), params, Consensus::DEPLOYMENT_TAPROOT, versionbitscache);\n+    if (fRequireStandard && !AreInputsStandard(tx, m_view, taproot_state == ThresholdState::ACTIVE)) {\n         return state.Invalid(TxValidationResult::TX_INPUTS_NOT_STANDARD, \"bad-txns-nonstandard-inputs\");\n     }\n "
      },
      {
        "sha": "1d2e346aa8415c021d65e409968c526a93707287",
        "filename": "test/functional/feature_taproot.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/525cbd425e2f6a1dbd0febc53d7ada22cec4661f/test/functional/feature_taproot.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/525cbd425e2f6a1dbd0febc53d7ada22cec4661f/test/functional/feature_taproot.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_taproot.py?ref=525cbd425e2f6a1dbd0febc53d7ada22cec4661f",
        "patch": "@@ -1129,13 +1129,13 @@ def spenders_taproot_inactive():\n     ]\n     tap = taproot_construct(pub, scripts)\n \n-    # Test that keypath spending is valid & standard if compliant, but valid and nonstandard otherwise.\n-    add_spender(spenders, \"inactive/keypath_valid\", key=sec, tap=tap)\n+    # Test that keypath spending is valid & non-standard, regardless of validity.\n+    add_spender(spenders, \"inactive/keypath_valid\", key=sec, tap=tap, standard=False)\n     add_spender(spenders, \"inactive/keypath_invalidsig\", key=sec, tap=tap, standard=False, sighash=bitflipper(default_sighash))\n     add_spender(spenders, \"inactive/keypath_empty\", key=sec, tap=tap, standard=False, witness=[])\n \n-    # Same for scriptpath spending (but using future features like annex, leaf versions, or OP_SUCCESS is nonstandard).\n-    add_spender(spenders, \"inactive/scriptpath_valid\", key=sec, tap=tap, leaf=\"pk\", inputs=[getter(\"sign\")])\n+    # Same for scriptpath spending (and features like annex, leaf versions, or OP_SUCCESS don't change this)\n+    add_spender(spenders, \"inactive/scriptpath_valid\", key=sec, tap=tap, leaf=\"pk\", standard=False, inputs=[getter(\"sign\")])\n     add_spender(spenders, \"inactive/scriptpath_invalidsig\", key=sec, tap=tap, leaf=\"pk\", standard=False, inputs=[getter(\"sign\")], sighash=bitflipper(default_sighash))\n     add_spender(spenders, \"inactive/scriptpath_invalidcb\", key=sec, tap=tap, leaf=\"pk\", standard=False, inputs=[getter(\"sign\")], controlblock=bitflipper(default_controlblock))\n     add_spender(spenders, \"inactive/scriptpath_valid_unkleaf\", key=sec, tap=tap, leaf=\"future_leaf\", standard=False, inputs=[getter(\"sign\")])"
      }
    ]
  },
  {
    "sha": "3d0556d41087f945ed0a47a5d770076ad42ce432",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZDA1NTZkNDEwODdmOTQ1ZWQwYTQ3YTVkNzcwMDc2YWQ0MmNlNDMy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-10-30T22:51:51Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-10-30T22:52:38Z"
      },
      "message": "Increase feature_taproot inactive test coverage",
      "tree": {
        "sha": "48ae2c4b9d384c0e2c5bc87a90a6576f7896218a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/48ae2c4b9d384c0e2c5bc87a90a6576f7896218a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3d0556d41087f945ed0a47a5d770076ad42ce432",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d0556d41087f945ed0a47a5d770076ad42ce432",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3d0556d41087f945ed0a47a5d770076ad42ce432",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d0556d41087f945ed0a47a5d770076ad42ce432/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "525cbd425e2f6a1dbd0febc53d7ada22cec4661f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/525cbd425e2f6a1dbd0febc53d7ada22cec4661f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/525cbd425e2f6a1dbd0febc53d7ada22cec4661f"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 5,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3e47e24a3bbabbbf999f6d8b79feff964d11788f",
        "filename": "test/functional/feature_taproot.py",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d0556d41087f945ed0a47a5d770076ad42ce432/test/functional/feature_taproot.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d0556d41087f945ed0a47a5d770076ad42ce432/test/functional/feature_taproot.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_taproot.py?ref=3d0556d41087f945ed0a47a5d770076ad42ce432",
        "patch": "@@ -1451,7 +1451,11 @@ def run_test(self):\n \n         # Pre-taproot activation tests.\n         self.log.info(\"Pre-activation tests...\")\n-        self.test_spenders(self.nodes[0], spenders_taproot_inactive(), input_counts=[1, 2, 2, 2, 2, 3])\n+        # Run each test twice; once in isolation, and once combined with others. Testing in isolation\n+        # means that the standardness is verified in every test (as combined transactions are only standard\n+        # when all their inputs are standard).\n+        self.test_spenders(self.nodes[0], spenders_taproot_inactive(), input_counts=[1])\n+        self.test_spenders(self.nodes[0], spenders_taproot_inactive(), input_counts=[2, 3])\n \n \n if __name__ == '__main__':"
      }
    ]
  }
]