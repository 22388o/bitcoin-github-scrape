[
  {
    "sha": "e8c4a1e36969d2ef816d9dfaaee979a8cf6bfffe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOGM0YTFlMzY5NjlkMmVmODE2ZDlkZmFhZWU5NzlhOGNmNmJmZmZl",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2018-08-20T23:46:34Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2018-08-23T03:14:11Z"
      },
      "message": "Add new regtest ports in doc following #10825 ports reattributions\n\nAdd checkmempool and checkblockindex regtest true in doc",
      "tree": {
        "sha": "65fb50233cb963917722ee451a35b14847641dcd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/65fb50233cb963917722ee451a35b14847641dcd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e8c4a1e36969d2ef816d9dfaaee979a8cf6bfffe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8c4a1e36969d2ef816d9dfaaee979a8cf6bfffe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e8c4a1e36969d2ef816d9dfaaee979a8cf6bfffe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8c4a1e36969d2ef816d9dfaaee979a8cf6bfffe/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "271b379e636afa419c5208cb462c07090490266c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/271b379e636afa419c5208cb462c07090490266c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/271b379e636afa419c5208cb462c07090490266c"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 8,
      "deletions": 5
    },
    "files": [
      {
        "sha": "6ae2bd0f5e5c7d13e8c1790e9800b66b3b0eb016",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8c4a1e36969d2ef816d9dfaaee979a8cf6bfffe/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8c4a1e36969d2ef816d9dfaaee979a8cf6bfffe/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=e8c4a1e36969d2ef816d9dfaaee979a8cf6bfffe",
        "patch": "@@ -33,6 +33,7 @@ static void SetupCliArgs()\n {\n     const auto defaultBaseParams = CreateBaseChainParams(CBaseChainParams::MAIN);\n     const auto testnetBaseParams = CreateBaseChainParams(CBaseChainParams::TESTNET);\n+    const auto regtestBaseParams = CreateBaseChainParams(CBaseChainParams::REGTEST);\n \n     gArgs.AddArg(\"-?\", \"This help message\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-version\", \"Print version and exit\", false, OptionsCategory::OPTIONS);\n@@ -45,7 +46,7 @@ static void SetupCliArgs()\n     gArgs.AddArg(\"-rpcconnect=<ip>\", strprintf(\"Send commands to node running on <ip> (default: %s)\", DEFAULT_RPCCONNECT), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-rpccookiefile=<loc>\", _(\"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)\"), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-rpcpassword=<pw>\", \"Password for JSON-RPC connections\", false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-rpcport=<port>\", strprintf(\"Connect to JSON-RPC on <port> (default: %u or testnet: %u)\", defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort()), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-rpcport=<port>\", strprintf(\"Connect to JSON-RPC on <port> (default: %u, testnet: %u, regtest: %u)\", defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort(), regtestBaseParams->RPCPort()), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-rpcuser=<user>\", \"Username for JSON-RPC connections\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-rpcwait\", \"Wait for RPC server to start\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-rpcwallet=<walletname>\", \"Send RPC for non-default wallet on RPC server (needs to exactly match corresponding -wallet option passed to bitcoind)\", false, OptionsCategory::OPTIONS);"
      },
      {
        "sha": "1e73263e3dd70e4a595899df3c5104a0964797f1",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8c4a1e36969d2ef816d9dfaaee979a8cf6bfffe/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8c4a1e36969d2ef816d9dfaaee979a8cf6bfffe/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e8c4a1e36969d2ef816d9dfaaee979a8cf6bfffe",
        "patch": "@@ -343,8 +343,10 @@ void SetupServerArgs()\n {\n     const auto defaultBaseParams = CreateBaseChainParams(CBaseChainParams::MAIN);\n     const auto testnetBaseParams = CreateBaseChainParams(CBaseChainParams::TESTNET);\n+    const auto regtestBaseParams = CreateBaseChainParams(CBaseChainParams::REGTEST);\n     const auto defaultChainParams = CreateChainParams(CBaseChainParams::MAIN);\n     const auto testnetChainParams = CreateChainParams(CBaseChainParams::TESTNET);\n+    const auto regtestChainParams = CreateChainParams(CBaseChainParams::REGTEST);\n \n     // Hidden Options\n     std::vector<std::string> hidden_args = {\"-rpcssl\", \"-benchmark\", \"-h\", \"-help\", \"-socks\", \"-tor\", \"-debugnet\", \"-whitelistalwaysrelay\",\n@@ -416,7 +418,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-onlynet=<net>\", \"Make outgoing connections only through network <net> (ipv4, ipv6 or onion). Incoming connections are not affected by this option. This option can be specified multiple times to allow multiple networks.\", false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-peerbloomfilters\", strprintf(\"Support filtering of blocks and transaction with bloom filters (default: %u)\", DEFAULT_PEERBLOOMFILTERS), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-permitbaremultisig\", strprintf(\"Relay non-P2SH multisig (default: %u)\", DEFAULT_PERMIT_BAREMULTISIG), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-port=<port>\", strprintf(\"Listen for connections on <port> (default: %u or testnet: %u)\", defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort()), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-port=<port>\", strprintf(\"Listen for connections on <port> (default: %u, testnet: %u, regtest: %u)\", defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort(), regtestChainParams->GetDefaultPort()), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-proxy=<ip:port>\", \"Connect through SOCKS5 proxy\", false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-proxyrandomize\", strprintf(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\", DEFAULT_PROXYRANDOMIZE), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-seednode=<ip>\", \"Connect to a node to retrieve peer addresses, and disconnect. This option can be specified multiple times to connect to multiple nodes.\", false, OptionsCategory::CONNECTION);\n@@ -452,8 +454,8 @@ void SetupServerArgs()\n \n     gArgs.AddArg(\"-checkblocks=<n>\", strprintf(\"How many blocks to check at startup (default: %u, 0 = all)\", DEFAULT_CHECKBLOCKS), true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-checklevel=<n>\", strprintf(\"How thorough the block verification of -checkblocks is (0-4, default: %u)\", DEFAULT_CHECKLEVEL), true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-checkblockindex\", strprintf(\"Do a full consistency check for mapBlockIndex, setBlockIndexCandidates, chainActive and mapBlocksUnlinked occasionally. (default: %u)\", defaultChainParams->DefaultConsistencyChecks()), true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-checkmempool=<n>\", strprintf(\"Run checks every <n> transactions (default: %u)\", defaultChainParams->DefaultConsistencyChecks()), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-checkblockindex\", strprintf(\"Do a full consistency check for mapBlockIndex, setBlockIndexCandidates, chainActive and mapBlocksUnlinked occasionally. (default: %u, regtest: %u)\", defaultChainParams->DefaultConsistencyChecks(), regtestChainParams->DefaultConsistencyChecks()), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-checkmempool=<n>\", strprintf(\"Run checks every <n> transactions (default: %u, regtest: %u)\", defaultChainParams->DefaultConsistencyChecks(), regtestChainParams->DefaultConsistencyChecks()), true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-checkpoints\", strprintf(\"Disable expensive verification for known chain history (default: %u)\", DEFAULT_CHECKPOINTS_ENABLED), true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-deprecatedrpc=<method>\", \"Allows deprecated RPC method(s) to be used\", true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-dropmessagestest=<n>\", \"Randomly drop 1 of every <n> network messages\", true, OptionsCategory::DEBUG_TEST);\n@@ -507,7 +509,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-rpcbind=<addr>[:port]\", \"Bind to given address to listen for JSON-RPC connections. This option is ignored unless -rpcallowip is also passed. Port is optional and overrides -rpcport. Use [host]:port notation for IPv6. This option can be specified multiple times (default: 127.0.0.1 and ::1 i.e., localhost, or if -rpcallowip has been specified, 0.0.0.0 and :: i.e., all addresses)\", false, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpccookiefile=<loc>\", \"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)\", false, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcpassword=<pw>\", \"Password for JSON-RPC connections\", false, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcport=<port>\", strprintf(\"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\", defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort()), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcport=<port>\", strprintf(\"Listen for JSON-RPC connections on <port> (default: %u, testnet: %u, regtest: %u)\", defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort(), regtestBaseParams->RPCPort()), false, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcserialversion\", strprintf(\"Sets the serialization of raw transaction or block hex returned in non-verbose mode, non-segwit(0) or segwit(1) (default: %d)\", DEFAULT_RPC_SERIALIZE_VERSION), false, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcservertimeout=<n>\", strprintf(\"Timeout during HTTP requests (default: %d)\", DEFAULT_HTTP_SERVER_TIMEOUT), true, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcthreads=<n>\", strprintf(\"Set the number of threads to service RPC calls (default: %d)\", DEFAULT_HTTP_THREADS), false, OptionsCategory::RPC);"
      }
    ]
  }
]