[
  {
    "sha": "a0b4c2461724e9ec70e6cd3e36929c9270ffcebd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMGI0YzI0NjE3MjRlOWVjNzBlNmNkM2UzNjkyOWM5MjcwZmZjZWJk",
    "commit": {
      "author": {
        "name": "Dan Raviv",
        "email": "dan@soundradix.com",
        "date": "2017-09-14T14:59:09Z"
      },
      "committer": {
        "name": "Dan Raviv",
        "email": "dan@soundradix.com",
        "date": "2017-09-15T11:07:41Z"
      },
      "message": "Trivial: Fix validation comments\n\n- Move comment about transaction/block weight calculation so it applies not only to the GetBlockWeight function but also to GetTransactionWeight\n- Fix comment in validation.cpp referencing future deployment of BIP113. It has already been deployed.\n- The doc comment for BLOCK_DOWNLOAD_WINDOW wasn't updated since pruning was introduced, so it still refers to pruning as something that might happen in the future. A larger BLOCK_DOWNLOAD_WINDOW window would now, indeed, make pruning harder.",
      "tree": {
        "sha": "a697872259c6fc0bcef05cdfbd46011791777db0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a697872259c6fc0bcef05cdfbd46011791777db0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a0b4c2461724e9ec70e6cd3e36929c9270ffcebd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0b4c2461724e9ec70e6cd3e36929c9270ffcebd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a0b4c2461724e9ec70e6cd3e36929c9270ffcebd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0b4c2461724e9ec70e6cd3e36929c9270ffcebd/comments",
    "author": {
      "login": "danra",
      "id": 84245,
      "node_id": "MDQ6VXNlcjg0MjQ1",
      "avatar_url": "https://avatars.githubusercontent.com/u/84245?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danra",
      "html_url": "https://github.com/danra",
      "followers_url": "https://api.github.com/users/danra/followers",
      "following_url": "https://api.github.com/users/danra/following{/other_user}",
      "gists_url": "https://api.github.com/users/danra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danra/subscriptions",
      "organizations_url": "https://api.github.com/users/danra/orgs",
      "repos_url": "https://api.github.com/users/danra/repos",
      "events_url": "https://api.github.com/users/danra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danra/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "danra",
      "id": 84245,
      "node_id": "MDQ6VXNlcjg0MjQ1",
      "avatar_url": "https://avatars.githubusercontent.com/u/84245?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danra",
      "html_url": "https://github.com/danra",
      "followers_url": "https://api.github.com/users/danra/followers",
      "following_url": "https://api.github.com/users/danra/following{/other_user}",
      "gists_url": "https://api.github.com/users/danra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danra/subscriptions",
      "organizations_url": "https://api.github.com/users/danra/orgs",
      "repos_url": "https://api.github.com/users/danra/repos",
      "events_url": "https://api.github.com/users/danra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danra/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "09627b1dd41d1151a709d5ead82a924bf59e3d38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09627b1dd41d1151a709d5ead82a924bf59e3d38",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/09627b1dd41d1151a709d5ead82a924bf59e3d38"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 8,
      "deletions": 9
    },
    "files": [
      {
        "sha": "b6740c9d9fdd1bc266832d933eec8428fb7bff30",
        "filename": "src/consensus/validation.h",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0b4c2461724e9ec70e6cd3e36929c9270ffcebd/src/consensus/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0b4c2461724e9ec70e6cd3e36929c9270ffcebd/src/consensus/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/validation.h?ref=a0b4c2461724e9ec70e6cd3e36929c9270ffcebd",
        "patch": "@@ -89,17 +89,16 @@ class CValidationState {\n     std::string GetDebugMessage() const { return strDebugMessage; }\n };\n \n+// These implement the weight = (stripped_size * 4) + witness_size formula,\n+// using only serialization with and without witness data. As witness_size\n+// is equal to total_size - stripped_size, this formula is identical to:\n+// weight = (stripped_size * 3) + total_size.\n static inline int64_t GetTransactionWeight(const CTransaction& tx)\n {\n-    return ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR -1) + ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n+    return ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n }\n-\n static inline int64_t GetBlockWeight(const CBlock& block)\n {\n-    // This implements the weight = (stripped_size * 4) + witness_size formula,\n-    // using only serialization with and without witness data. As witness_size\n-    // is equal to total_size - stripped_size, this formula is identical to:\n-    // weight = (stripped_size * 3) + total_size.\n     return ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION);\n }\n "
      },
      {
        "sha": "12ffe085d745047654d6570587d3185a707c8879",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0b4c2461724e9ec70e6cd3e36929c9270ffcebd/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0b4c2461724e9ec70e6cd3e36929c9270ffcebd/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=a0b4c2461724e9ec70e6cd3e36929c9270ffcebd",
        "patch": "@@ -219,7 +219,7 @@ bool CheckFinalTx(const CTransaction &tx, int flags)\n     // IsFinalTx() with one more than chainActive.Height().\n     const int nBlockHeight = chainActive.Height() + 1;\n \n-    // BIP113 will require that time-locked transactions have nLockTime set to\n+    // BIP113 requires that time-locked transactions have nLockTime set to\n     // less than the median time of the previous block they're contained in.\n     // When the next block is created its previous block will be the current\n     // chain tip, so we use that to calculate the median time passed to"
      },
      {
        "sha": "6a77fe56be87676b294b3293039a4cccbd420df4",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0b4c2461724e9ec70e6cd3e36929c9270ffcebd/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0b4c2461724e9ec70e6cd3e36929c9270ffcebd/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=a0b4c2461724e9ec70e6cd3e36929c9270ffcebd",
        "patch": "@@ -94,8 +94,8 @@ static const int MAX_CMPCTBLOCK_DEPTH = 5;\n static const int MAX_BLOCKTXN_DEPTH = 10;\n /** Size of the \"block download window\": how far ahead of our current height do we fetch?\n  *  Larger windows tolerate larger download speed differences between peer, but increase the potential\n- *  degree of disordering of blocks on disk (which make reindexing and in the future perhaps pruning\n- *  harder). We'll probably want to make this a per-peer adaptive value at some point. */\n+ *  degree of disordering of blocks on disk (which make reindexing and pruning harder). We'll probably\n+ *  want to make this a per-peer adaptive value at some point. */\n static const unsigned int BLOCK_DOWNLOAD_WINDOW = 1024;\n /** Time to wait (in seconds) between writing blocks/block index to disk. */\n static const unsigned int DATABASE_WRITE_INTERVAL = 60 * 60;"
      }
    ]
  }
]