[
  {
    "sha": "2e1ac16121dd387baf5fed5d330d23c9e00992ad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZTFhYzE2MTIxZGQzODdiYWY1ZmVkNWQzMzBkMjNjOWUwMDk5MmFk",
    "commit": {
      "author": {
        "name": "Kamil Domanski",
        "email": "kdomanski@kdemail.net",
        "date": "2014-04-08T01:03:27Z"
      },
      "committer": {
        "name": "Kamil Domanski",
        "email": "kdomanski@kdemail.net",
        "date": "2014-04-08T01:03:27Z"
      },
      "message": "compile with C++11 support",
      "tree": {
        "sha": "d1f0219e43b15604cc0adc90c86d9075a2923d8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d1f0219e43b15604cc0adc90c86d9075a2923d8e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2e1ac16121dd387baf5fed5d330d23c9e00992ad",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e1ac16121dd387baf5fed5d330d23c9e00992ad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2e1ac16121dd387baf5fed5d330d23c9e00992ad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e1ac16121dd387baf5fed5d330d23c9e00992ad/comments",
    "author": {
      "login": "kdomanski",
      "id": 993296,
      "node_id": "MDQ6VXNlcjk5MzI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/993296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kdomanski",
      "html_url": "https://github.com/kdomanski",
      "followers_url": "https://api.github.com/users/kdomanski/followers",
      "following_url": "https://api.github.com/users/kdomanski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kdomanski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kdomanski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kdomanski/subscriptions",
      "organizations_url": "https://api.github.com/users/kdomanski/orgs",
      "repos_url": "https://api.github.com/users/kdomanski/repos",
      "events_url": "https://api.github.com/users/kdomanski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kdomanski/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kdomanski",
      "id": 993296,
      "node_id": "MDQ6VXNlcjk5MzI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/993296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kdomanski",
      "html_url": "https://github.com/kdomanski",
      "followers_url": "https://api.github.com/users/kdomanski/followers",
      "following_url": "https://api.github.com/users/kdomanski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kdomanski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kdomanski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kdomanski/subscriptions",
      "organizations_url": "https://api.github.com/users/kdomanski/orgs",
      "repos_url": "https://api.github.com/users/kdomanski/repos",
      "events_url": "https://api.github.com/users/kdomanski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kdomanski/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f4e1c347cf1861595609ba841d35c4a59b50bde2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4e1c347cf1861595609ba841d35c4a59b50bde2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f4e1c347cf1861595609ba841d35c4a59b50bde2"
      }
    ],
    "stats": {
      "total": 134,
      "additions": 134,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2af7ac769e7371a1e6be9d5f0ea5f78ef3adbae9",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e1ac16121dd387baf5fed5d330d23c9e00992ad/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e1ac16121dd387baf5fed5d330d23c9e00992ad/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=2e1ac16121dd387baf5fed5d330d23c9e00992ad",
        "patch": "@@ -119,6 +119,7 @@ AC_PROG_CXX\n AC_PROG_CC\n AC_PROG_CPP\n AC_PROG_CXXCPP\n+AX_CXX_COMPILE_STDCXX_11(noext,mandatory)\n AC_PROG_INSTALL\n AC_PROG_OBJC\n AC_PROG_LN_S"
      },
      {
        "sha": "af37acdb5ca2c9f76bffdc1a12edfb862282af56",
        "filename": "src/m4/ax_cxx_compile_stdcxx_11.m4",
        "status": "added",
        "additions": 133,
        "deletions": 0,
        "changes": 133,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e1ac16121dd387baf5fed5d330d23c9e00992ad/src/m4/ax_cxx_compile_stdcxx_11.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e1ac16121dd387baf5fed5d330d23c9e00992ad/src/m4/ax_cxx_compile_stdcxx_11.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/m4/ax_cxx_compile_stdcxx_11.m4?ref=2e1ac16121dd387baf5fed5d330d23c9e00992ad",
        "patch": "@@ -0,0 +1,133 @@\n+# ============================================================================\n+#  http://www.gnu.org/software/autoconf-archive/ax_cxx_compile_stdcxx_11.html\n+# ============================================================================\n+#\n+# SYNOPSIS\n+#\n+#   AX_CXX_COMPILE_STDCXX_11([ext|noext],[mandatory|optional])\n+#\n+# DESCRIPTION\n+#\n+#   Check for baseline language coverage in the compiler for the C++11\n+#   standard; if necessary, add switches to CXXFLAGS to enable support.\n+#\n+#   The first argument, if specified, indicates whether you insist on an\n+#   extended mode (e.g. -std=gnu++11) or a strict conformance mode (e.g.\n+#   -std=c++11).  If neither is specified, you get whatever works, with\n+#   preference for an extended mode.\n+#\n+#   The second argument, if specified 'mandatory' or if left unspecified,\n+#   indicates that baseline C++11 support is required and that the macro\n+#   should error out if no mode with that support is found.  If specified\n+#   'optional', then configuration proceeds regardless, after defining\n+#   HAVE_CXX11 if and only if a supporting mode is found.\n+#\n+# LICENSE\n+#\n+#   Copyright (c) 2008 Benjamin Kosnik <bkoz@redhat.com>\n+#   Copyright (c) 2012 Zack Weinberg <zackw@panix.com>\n+#   Copyright (c) 2013 Roy Stogner <roystgnr@ices.utexas.edu>\n+#\n+#   Copying and distribution of this file, with or without modification, are\n+#   permitted in any medium without royalty provided the copyright notice\n+#   and this notice are preserved. This file is offered as-is, without any\n+#   warranty.\n+\n+#serial 3\n+\n+m4_define([_AX_CXX_COMPILE_STDCXX_11_testbody], [\n+  template <typename T>\n+    struct check\n+    {\n+      static_assert(sizeof(int) <= sizeof(T), \"not big enough\");\n+    };\n+\n+    typedef check<check<bool>> right_angle_brackets;\n+\n+    int a;\n+    decltype(a) b;\n+\n+    typedef check<int> check_type;\n+    check_type c;\n+    check_type&& cr = static_cast<check_type&&>(c);\n+\n+    auto d = a;\n+])\n+\n+AC_DEFUN([AX_CXX_COMPILE_STDCXX_11], [dnl\n+  m4_if([$1], [], [],\n+        [$1], [ext], [],\n+        [$1], [noext], [],\n+        [m4_fatal([invalid argument `$1' to AX_CXX_COMPILE_STDCXX_11])])dnl\n+  m4_if([$2], [], [ax_cxx_compile_cxx11_required=true],\n+        [$2], [mandatory], [ax_cxx_compile_cxx11_required=true],\n+        [$2], [optional], [ax_cxx_compile_cxx11_required=false],\n+        [m4_fatal([invalid second argument `$2' to AX_CXX_COMPILE_STDCXX_11])])dnl\n+  AC_LANG_PUSH([C++])dnl\n+  ac_success=no\n+  AC_CACHE_CHECK(whether $CXX supports C++11 features by default,\n+  ax_cv_cxx_compile_cxx11,\n+  [AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_11_testbody])],\n+    [ax_cv_cxx_compile_cxx11=yes],\n+    [ax_cv_cxx_compile_cxx11=no])])\n+  if test x$ax_cv_cxx_compile_cxx11 = xyes; then\n+    ac_success=yes\n+  fi\n+\n+  m4_if([$1], [noext], [], [dnl\n+  if test x$ac_success = xno; then\n+    for switch in -std=gnu++11 -std=gnu++0x; do\n+      cachevar=AS_TR_SH([ax_cv_cxx_compile_cxx11_$switch])\n+      AC_CACHE_CHECK(whether $CXX supports C++11 features with $switch,\n+                     $cachevar,\n+        [ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+         CXXFLAGS=\"$CXXFLAGS $switch\"\n+         AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_11_testbody])],\n+          [eval $cachevar=yes],\n+          [eval $cachevar=no])\n+         CXXFLAGS=\"$ac_save_CXXFLAGS\"])\n+      if eval test x\\$$cachevar = xyes; then\n+        CXXFLAGS=\"$CXXFLAGS $switch\"\n+        ac_success=yes\n+        break\n+      fi\n+    done\n+  fi])\n+\n+  m4_if([$1], [ext], [], [dnl\n+  if test x$ac_success = xno; then\n+    for switch in -std=c++11 -std=c++0x; do\n+      cachevar=AS_TR_SH([ax_cv_cxx_compile_cxx11_$switch])\n+      AC_CACHE_CHECK(whether $CXX supports C++11 features with $switch,\n+                     $cachevar,\n+        [ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+         CXXFLAGS=\"$CXXFLAGS $switch\"\n+         AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_11_testbody])],\n+          [eval $cachevar=yes],\n+          [eval $cachevar=no])\n+         CXXFLAGS=\"$ac_save_CXXFLAGS\"])\n+      if eval test x\\$$cachevar = xyes; then\n+        CXXFLAGS=\"$CXXFLAGS $switch\"\n+        ac_success=yes\n+        break\n+      fi\n+    done\n+  fi])\n+  AC_LANG_POP([C++])\n+  if test x$ax_cxx_compile_cxx11_required = xtrue; then\n+    if test x$ac_success = xno; then\n+      AC_MSG_ERROR([*** A compiler with support for C++11 language features is required.])\n+    fi\n+  else\n+    if test x$ac_success = xno; then\n+      HAVE_CXX11=0\n+      AC_MSG_NOTICE([No compiler with C++11 support was found])\n+    else\n+      HAVE_CXX11=1\n+      AC_DEFINE(HAVE_CXX11,1,\n+                [define if the compiler supports basic C++11 syntax])\n+    fi\n+\n+    AC_SUBST(HAVE_CXX11)\n+  fi\n+])"
      }
    ]
  },
  {
    "sha": "6f9659ddd8247137f1f43a249211833524fa6b68",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Zjk2NTlkZGQ4MjQ3MTM3ZjFmNDNhMjQ5MjExODMzNTI0ZmE2YjY4",
    "commit": {
      "author": {
        "name": "Kamil Domanski",
        "email": "kdomanski@kdemail.net",
        "date": "2014-04-08T02:40:00Z"
      },
      "committer": {
        "name": "Kamil Domanski",
        "email": "kdomanski@kdemail.net",
        "date": "2014-04-08T02:40:46Z"
      },
      "message": "replace all boost::list_of with initializer lists",
      "tree": {
        "sha": "d977c396a2cc50943a77c99396a6d32a6c36504c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d977c396a2cc50943a77c99396a6d32a6c36504c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f9659ddd8247137f1f43a249211833524fa6b68",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f9659ddd8247137f1f43a249211833524fa6b68",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6f9659ddd8247137f1f43a249211833524fa6b68",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f9659ddd8247137f1f43a249211833524fa6b68/comments",
    "author": {
      "login": "kdomanski",
      "id": 993296,
      "node_id": "MDQ6VXNlcjk5MzI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/993296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kdomanski",
      "html_url": "https://github.com/kdomanski",
      "followers_url": "https://api.github.com/users/kdomanski/followers",
      "following_url": "https://api.github.com/users/kdomanski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kdomanski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kdomanski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kdomanski/subscriptions",
      "organizations_url": "https://api.github.com/users/kdomanski/orgs",
      "repos_url": "https://api.github.com/users/kdomanski/repos",
      "events_url": "https://api.github.com/users/kdomanski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kdomanski/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kdomanski",
      "id": 993296,
      "node_id": "MDQ6VXNlcjk5MzI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/993296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kdomanski",
      "html_url": "https://github.com/kdomanski",
      "followers_url": "https://api.github.com/users/kdomanski/followers",
      "following_url": "https://api.github.com/users/kdomanski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kdomanski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kdomanski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kdomanski/subscriptions",
      "organizations_url": "https://api.github.com/users/kdomanski/orgs",
      "repos_url": "https://api.github.com/users/kdomanski/repos",
      "events_url": "https://api.github.com/users/kdomanski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kdomanski/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2e1ac16121dd387baf5fed5d330d23c9e00992ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e1ac16121dd387baf5fed5d330d23c9e00992ad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2e1ac16121dd387baf5fed5d330d23c9e00992ad"
      }
    ],
    "stats": {
      "total": 125,
      "additions": 53,
      "deletions": 72
    },
    "files": [
      {
        "sha": "3f064fa4026b7db969eca9131fa28e064f91c4a6",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 14,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f9659ddd8247137f1f43a249211833524fa6b68/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f9659ddd8247137f1f43a249211833524fa6b68/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=6f9659ddd8247137f1f43a249211833524fa6b68",
        "patch": "@@ -10,10 +10,6 @@\n #include \"protocol.h\"\n #include \"util.h\"\n \n-#include <boost/assign/list_of.hpp>\n-\n-using namespace boost::assign;\n-\n //\n // Main network\n //\n@@ -147,11 +143,11 @@ class CMainParams : public CChainParams {\n         vSeeds.push_back(CDNSSeedData(\"bitnodes.io\", \"seed.bitnodes.io\"));\n         vSeeds.push_back(CDNSSeedData(\"xf2.org\", \"bitseed.xf2.org\"));\n \n-        base58Prefixes[PUBKEY_ADDRESS] = list_of(0);\n-        base58Prefixes[SCRIPT_ADDRESS] = list_of(5);\n-        base58Prefixes[SECRET_KEY] =     list_of(128);\n-        base58Prefixes[EXT_PUBLIC_KEY] = list_of(0x04)(0x88)(0xB2)(0x1E);\n-        base58Prefixes[EXT_SECRET_KEY] = list_of(0x04)(0x88)(0xAD)(0xE4);\n+        base58Prefixes[PUBKEY_ADDRESS] = {0};\n+        base58Prefixes[SCRIPT_ADDRESS] = {5};\n+        base58Prefixes[SECRET_KEY]     = {128};\n+        base58Prefixes[EXT_PUBLIC_KEY] = {0x04, 0x88, 0xB2, 0x1E};\n+        base58Prefixes[EXT_SECRET_KEY] = {0x04, 0x88, 0xAD, 0xE4};\n \n         // Convert the pnSeeds array into usable address objects.\n         for (unsigned int i = 0; i < ARRAYLEN(pnSeed); i++)\n@@ -211,11 +207,11 @@ class CTestNetParams : public CMainParams {\n         vSeeds.push_back(CDNSSeedData(\"bitcoin.petertodd.org\", \"testnet-seed.bitcoin.petertodd.org\"));\n         vSeeds.push_back(CDNSSeedData(\"bluematt.me\", \"testnet-seed.bluematt.me\"));\n \n-        base58Prefixes[PUBKEY_ADDRESS] = list_of(111);\n-        base58Prefixes[SCRIPT_ADDRESS] = list_of(196);\n-        base58Prefixes[SECRET_KEY]     = list_of(239);\n-        base58Prefixes[EXT_PUBLIC_KEY] = list_of(0x04)(0x35)(0x87)(0xCF);\n-        base58Prefixes[EXT_SECRET_KEY] = list_of(0x04)(0x35)(0x83)(0x94);\n+        base58Prefixes[PUBKEY_ADDRESS] = {111};\n+        base58Prefixes[SCRIPT_ADDRESS] = {196};\n+        base58Prefixes[SECRET_KEY]     = {239};\n+        base58Prefixes[EXT_PUBLIC_KEY] = {0x04, 0x35, 0x87, 0xCF};\n+        base58Prefixes[EXT_SECRET_KEY] = {0x04, 0x35, 0x83, 0x94};\n     }\n     virtual Network NetworkID() const { return CChainParams::TESTNET; }\n };"
      },
      {
        "sha": "eb0f89453ed7d7f377d1ac9b9d8d8c10657db7aa",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 24,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f9659ddd8247137f1f43a249211833524fa6b68/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f9659ddd8247137f1f43a249211833524fa6b68/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=6f9659ddd8247137f1f43a249211833524fa6b68",
        "patch": "@@ -9,7 +9,6 @@\n \n #include <stdint.h>\n \n-#include <boost/assign/list_of.hpp> // for 'map_list_of()'\n #include <boost/foreach.hpp>\n \n namespace Checkpoints\n@@ -37,21 +36,20 @@ namespace Checkpoints\n     //   (no blocks before with a timestamp after, none after with\n     //    timestamp before)\n     // + Contains no strange transactions\n-    static MapCheckpoints mapCheckpoints =\n-        boost::assign::map_list_of\n-        ( 11111, uint256(\"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d\"))\n-        ( 33333, uint256(\"0x000000002dd5588a74784eaa7ab0507a18ad16a236e7b1ce69f00d7ddfb5d0a6\"))\n-        ( 74000, uint256(\"0x0000000000573993a3c9e41ce34471c079dcf5f52a0e824a81e7f953b8661a20\"))\n-        (105000, uint256(\"0x00000000000291ce28027faea320c8d2b054b2e0fe44a773f3eefb151d6bdc97\"))\n-        (134444, uint256(\"0x00000000000005b12ffd4cd315cd34ffd4a594f430ac814c91184a0d42d2b0fe\"))\n-        (168000, uint256(\"0x000000000000099e61ea72015e79632f216fe6cb33d7899acb35b75c8303b763\"))\n-        (193000, uint256(\"0x000000000000059f452a5f7340de6682a977387c17010ff6e6c3bd83ca8b1317\"))\n-        (210000, uint256(\"0x000000000000048b95347e83192f69cf0366076336c639f9b7228e9ba171342e\"))\n-        (216116, uint256(\"0x00000000000001b4f4b433e81ee46494af945cf96014816a4e2370f11b23df4e\"))\n-        (225430, uint256(\"0x00000000000001c108384350f74090433e7fcf79a606b8e797f065b130575932\"))\n-        (250000, uint256(\"0x000000000000003887df1f29024b06fc2200b55f8af8f35453d7be294df2d214\"))\n-        (279000, uint256(\"0x0000000000000001ae8c72a0b0c301f67e3afca10e819efa9041e458e9bd7e40\"))\n-        ;\n+    static MapCheckpoints mapCheckpoints = {\n+        { 11111, uint256(\"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d\")},\n+        { 33333, uint256(\"0x000000002dd5588a74784eaa7ab0507a18ad16a236e7b1ce69f00d7ddfb5d0a6\")},\n+        { 74000, uint256(\"0x0000000000573993a3c9e41ce34471c079dcf5f52a0e824a81e7f953b8661a20\")},\n+        {105000, uint256(\"0x00000000000291ce28027faea320c8d2b054b2e0fe44a773f3eefb151d6bdc97\")},\n+        {134444, uint256(\"0x00000000000005b12ffd4cd315cd34ffd4a594f430ac814c91184a0d42d2b0fe\")},\n+        {168000, uint256(\"0x000000000000099e61ea72015e79632f216fe6cb33d7899acb35b75c8303b763\")},\n+        {193000, uint256(\"0x000000000000059f452a5f7340de6682a977387c17010ff6e6c3bd83ca8b1317\")},\n+        {210000, uint256(\"0x000000000000048b95347e83192f69cf0366076336c639f9b7228e9ba171342e\")},\n+        {216116, uint256(\"0x00000000000001b4f4b433e81ee46494af945cf96014816a4e2370f11b23df4e\")},\n+        {225430, uint256(\"0x00000000000001c108384350f74090433e7fcf79a606b8e797f065b130575932\")},\n+        {250000, uint256(\"0x000000000000003887df1f29024b06fc2200b55f8af8f35453d7be294df2d214\")},\n+        {279000, uint256(\"0x0000000000000001ae8c72a0b0c301f67e3afca10e819efa9041e458e9bd7e40\")}\n+        };\n     static const CCheckpointData data = {\n         &mapCheckpoints,\n         1389047471, // * UNIX timestamp of last checkpoint block\n@@ -60,21 +58,19 @@ namespace Checkpoints\n         60000.0     // * estimated number of transactions per day after checkpoint\n     };\n \n-    static MapCheckpoints mapCheckpointsTestnet =\n-        boost::assign::map_list_of\n-        ( 546, uint256(\"000000002a936ca763904c3c35fce2f3556c559c0214345d31b1bcebf76acb70\"))\n-        ;\n+    static MapCheckpoints mapCheckpointsTestnet = {\n+        { 546, uint256(\"000000002a936ca763904c3c35fce2f3556c559c0214345d31b1bcebf76acb70\")},\n+        };\n     static const CCheckpointData dataTestnet = {\n         &mapCheckpointsTestnet,\n         1338180505,\n         16341,\n         300\n     };\n \n-    static MapCheckpoints mapCheckpointsRegtest =\n-        boost::assign::map_list_of\n-        ( 0, uint256(\"0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"))\n-        ;\n+    static MapCheckpoints mapCheckpointsRegtest = {\n+        { 0, uint256(\"0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\")},\n+        };\n     static const CCheckpointData dataRegtest = {\n         &mapCheckpointsRegtest,\n         0,"
      },
      {
        "sha": "aae2495fdd2382c5fc42dbf764e0df40d86e9aa6",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f9659ddd8247137f1f43a249211833524fa6b68/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f9659ddd8247137f1f43a249211833524fa6b68/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=6f9659ddd8247137f1f43a249211833524fa6b68",
        "patch": "@@ -17,13 +17,11 @@\n \n #include <stdint.h>\n \n-#include <boost/assign/list_of.hpp>\n #include \"json/json_spirit_utils.h\"\n #include \"json/json_spirit_value.h\"\n \n using namespace std;\n using namespace boost;\n-using namespace boost::assign;\n using namespace json_spirit;\n \n Value getinfo(const Array& params, bool fHelp)"
      },
      {
        "sha": "33550c554075801a2357c4a2672f0652606f127d",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 17,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f9659ddd8247137f1f43a249211833524fa6b68/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f9659ddd8247137f1f43a249211833524fa6b68/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=6f9659ddd8247137f1f43a249211833524fa6b68",
        "patch": "@@ -17,13 +17,11 @@\n \n #include <stdint.h>\n \n-#include <boost/assign/list_of.hpp>\n #include \"json/json_spirit_utils.h\"\n #include \"json/json_spirit_value.h\"\n \n using namespace std;\n using namespace boost;\n-using namespace boost::assign;\n using namespace json_spirit;\n \n void ScriptPubKeyToJSON(const CScript& scriptPubKey, Object& out, bool fIncludeHex)\n@@ -234,7 +232,7 @@ Value listunspent(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"listunspent\", \"6, 9999999 \\\"[\\\\\\\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\\\\\",\\\\\\\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\\\\\"]\\\"\")\n         );\n \n-    RPCTypeCheck(params, list_of(int_type)(int_type)(array_type));\n+    RPCTypeCheck(params, {int_type, int_type, array_type});\n \n     int nMinDepth = 1;\n     if (params.size() > 0)\n@@ -344,7 +342,7 @@ Value createrawtransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\", \\\"{\\\\\\\"address\\\\\\\":0.01}\\\"\")\n         );\n \n-    RPCTypeCheck(params, list_of(array_type)(obj_type));\n+    RPCTypeCheck(params, {array_type, obj_type});\n \n     Array inputs = params[0].get_array();\n     Object sendTo = params[1].get_obj();\n@@ -489,7 +487,7 @@ Value decodescript(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"decodescript\", \"\\\"hexstring\\\"\")\n         );\n \n-    RPCTypeCheck(params, list_of(str_type));\n+    RPCTypeCheck(params, {str_type});\n \n     Object r;\n     CScript script;\n@@ -555,7 +553,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"signrawtransaction\", \"\\\"myhex\\\"\")\n         );\n \n-    RPCTypeCheck(params, list_of(str_type)(array_type)(array_type)(str_type), true);\n+    RPCTypeCheck(params, {str_type, array_type, array_type, str_type}, true);\n \n     vector<unsigned char> txData(ParseHexV(params[0], \"argument 1\"));\n     CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION);\n@@ -630,7 +628,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n \n             Object prevOut = p.get_obj();\n \n-            RPCTypeCheck(prevOut, map_list_of(\"txid\", str_type)(\"vout\", int_type)(\"scriptPubKey\", str_type));\n+            RPCTypeCheck(prevOut, std::map<std::string,Value_type>({{\"txid\", str_type},{\"vout\", int_type},{\"scriptPubKey\", str_type}}));\n \n             uint256 txid = ParseHashO(prevOut, \"txid\");\n \n@@ -661,7 +659,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n             // given), add redeemScript to the tempKeystore so it can be signed:\n             if (fGivenKeys && scriptPubKey.IsPayToScriptHash())\n             {\n-                RPCTypeCheck(prevOut, map_list_of(\"txid\", str_type)(\"vout\", int_type)(\"scriptPubKey\", str_type)(\"redeemScript\",str_type));\n+                RPCTypeCheck(prevOut, std::map<std::string,Value_type>({{\"txid\", str_type},{\"vout\", int_type},{\"scriptPubKey\", str_type},{\"redeemScript\",str_type}}));\n                 Value v = find_value(prevOut, \"redeemScript\");\n                 if (!(v == Value::null))\n                 {\n@@ -682,15 +680,14 @@ Value signrawtransaction(const Array& params, bool fHelp)\n     int nHashType = SIGHASH_ALL;\n     if (params.size() > 3 && params[3].type() != null_type)\n     {\n-        static map<string, int> mapSigHashValues =\n-            boost::assign::map_list_of\n-            (string(\"ALL\"), int(SIGHASH_ALL))\n-            (string(\"ALL|ANYONECANPAY\"), int(SIGHASH_ALL|SIGHASH_ANYONECANPAY))\n-            (string(\"NONE\"), int(SIGHASH_NONE))\n-            (string(\"NONE|ANYONECANPAY\"), int(SIGHASH_NONE|SIGHASH_ANYONECANPAY))\n-            (string(\"SINGLE\"), int(SIGHASH_SINGLE))\n-            (string(\"SINGLE|ANYONECANPAY\"), int(SIGHASH_SINGLE|SIGHASH_ANYONECANPAY))\n-            ;\n+        static map<string, int> mapSigHashValues = {\n+            {\"ALL\",                 SIGHASH_ALL},\n+            {\"ALL|ANYONECANPAY\",    SIGHASH_ALL|SIGHASH_ANYONECANPAY},\n+            {\"NONE\",                SIGHASH_NONE},\n+            {\"NONE|ANYONECANPAY\",   SIGHASH_NONE|SIGHASH_ANYONECANPAY},\n+            {\"SINGLE\",              SIGHASH_SINGLE},\n+            {\"SINGLE|ANYONECANPAY\", SIGHASH_SINGLE|SIGHASH_ANYONECANPAY}\n+            };\n         string strHashType = params[3].get_str();\n         if (mapSigHashValues.count(strHashType))\n             nHashType = mapSigHashValues[strHashType];"
      },
      {
        "sha": "b5b17ae72108f11e6796ff8ab2f08a68aaf19b2e",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f9659ddd8247137f1f43a249211833524fa6b68/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f9659ddd8247137f1f43a249211833524fa6b68/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=6f9659ddd8247137f1f43a249211833524fa6b68",
        "patch": "@@ -33,13 +33,13 @@ void StopRPCThreads();\n /*\n   Type-check arguments; throws JSONRPCError if wrong type given. Does not check that\n   the right number of arguments are passed, just that any passed are the correct type.\n-  Use like:  RPCTypeCheck(params, boost::assign::list_of(str_type)(int_type)(obj_type));\n+  Use like:  RPCTypeCheck(params, {str_type, bool_type, array_type});\n */\n void RPCTypeCheck(const json_spirit::Array& params,\n                   const std::list<json_spirit::Value_type>& typesExpected, bool fAllowNull=false);\n /*\n   Check for expected keys/value types in an Object.\n-  Use like: RPCTypeCheck(object, boost::assign::map_list_of(\"name\", str_type)(\"value\", int_type));\n+  Use like: RPCTypeCheck(object, std::map<std::string,Value_type>({{\"txid\", str_type}, {\"vout\", int_type}}));\n */\n void RPCTypeCheck(const json_spirit::Object& o,\n                   const std::map<std::string, json_spirit::Value_type>& typesExpected, bool fAllowNull=false);"
      },
      {
        "sha": "2e6741575d8459083d54d85e6313d302f5e34689",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f9659ddd8247137f1f43a249211833524fa6b68/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f9659ddd8247137f1f43a249211833524fa6b68/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=6f9659ddd8247137f1f43a249211833524fa6b68",
        "patch": "@@ -14,13 +14,11 @@\n \n #include <stdint.h>\n \n-#include <boost/assign/list_of.hpp>\n #include \"json/json_spirit_utils.h\"\n #include \"json/json_spirit_value.h\"\n \n using namespace std;\n using namespace boost;\n-using namespace boost::assign;\n using namespace json_spirit;\n \n int64_t nWalletUnlockTime;\n@@ -1780,9 +1778,9 @@ Value lockunspent(const Array& params, bool fHelp)\n         );\n \n     if (params.size() == 1)\n-        RPCTypeCheck(params, list_of(bool_type));\n+        RPCTypeCheck(params, {bool_type});\n     else\n-        RPCTypeCheck(params, list_of(bool_type)(array_type));\n+        RPCTypeCheck(params, {bool_type, array_type});\n \n     bool fUnlock = params[0].get_bool();\n \n@@ -1799,7 +1797,7 @@ Value lockunspent(const Array& params, bool fHelp)\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected object\");\n         const Object& o = output.get_obj();\n \n-        RPCTypeCheck(o, map_list_of(\"txid\", str_type)(\"vout\", int_type));\n+        RPCTypeCheck(o, std::map<std::string,Value_type>({{\"txid\", str_type}, {\"vout\", int_type}}));\n \n         string txid = find_value(o, \"txid\").get_str();\n         if (!IsHex(txid))"
      },
      {
        "sha": "da0e1e472dcd28a473a2ffaf2beca8dceb627a24",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 8,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f9659ddd8247137f1f43a249211833524fa6b68/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f9659ddd8247137f1f43a249211833524fa6b68/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=6f9659ddd8247137f1f43a249211833524fa6b68",
        "patch": "@@ -17,7 +17,6 @@\n \n #include <stdint.h>\n \n-#include <boost/assign/list_of.hpp> // for 'map_list_of()'\n #include <boost/date_time/posix_time/posix_time_types.hpp>\n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n@@ -115,16 +114,13 @@ static bool CheckNBits(unsigned int nbits1, int64_t time1, unsigned int nbits2,\n \n BOOST_AUTO_TEST_CASE(DoS_checknbits)\n {\n-    using namespace boost::assign; // for 'map_list_of()'\n-\n     // Timestamps,nBits from the bitcoin block chain.\n     // These are the block-chain checkpoint blocks\n     typedef std::map<int64_t, unsigned int> BlockData;\n-    BlockData chainData =\n-        map_list_of(1239852051,486604799)(1262749024,486594666)\n-        (1279305360,469854461)(1280200847,469830746)(1281678674,469809688)\n-        (1296207707,453179945)(1302624061,453036989)(1309640330,437004818)\n-        (1313172719,436789733);\n+    BlockData chainData ={\n+        {1239852051,486604799},{1262749024,486594666},{1279305360,469854461},\n+        {1280200847,469830746},{1281678674,469809688},{1296207707,453179945},\n+        {1302624061,453036989},{1309640330,437004818},{1313172719,436789733}};\n \n     // Make sure CheckNBits considers every combination of block-chain-lock-in-points\n     // \"sane\":"
      }
    ]
  },
  {
    "sha": "c7aa65b7d0bc3c3dbd7e2d50c5f73274829ea126",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjN2FhNjViN2QwYmMzYzNkYmQ3ZTJkNTBjNWY3MzI3NDgyOWVhMTI2",
    "commit": {
      "author": {
        "name": "Kamil Domanski",
        "email": "kdomanski@kdemail.net",
        "date": "2014-04-08T08:29:56Z"
      },
      "committer": {
        "name": "Kamil Domanski",
        "email": "kdomanski@kdemail.net",
        "date": "2014-04-08T08:29:56Z"
      },
      "message": "fixed issue with boost scoped enums in C++11",
      "tree": {
        "sha": "0f4067b8093b2be5068b64b6b75d601874559dc1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0f4067b8093b2be5068b64b6b75d601874559dc1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7aa65b7d0bc3c3dbd7e2d50c5f73274829ea126",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7aa65b7d0bc3c3dbd7e2d50c5f73274829ea126",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c7aa65b7d0bc3c3dbd7e2d50c5f73274829ea126",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7aa65b7d0bc3c3dbd7e2d50c5f73274829ea126/comments",
    "author": {
      "login": "kdomanski",
      "id": 993296,
      "node_id": "MDQ6VXNlcjk5MzI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/993296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kdomanski",
      "html_url": "https://github.com/kdomanski",
      "followers_url": "https://api.github.com/users/kdomanski/followers",
      "following_url": "https://api.github.com/users/kdomanski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kdomanski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kdomanski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kdomanski/subscriptions",
      "organizations_url": "https://api.github.com/users/kdomanski/orgs",
      "repos_url": "https://api.github.com/users/kdomanski/repos",
      "events_url": "https://api.github.com/users/kdomanski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kdomanski/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kdomanski",
      "id": 993296,
      "node_id": "MDQ6VXNlcjk5MzI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/993296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kdomanski",
      "html_url": "https://github.com/kdomanski",
      "followers_url": "https://api.github.com/users/kdomanski/followers",
      "following_url": "https://api.github.com/users/kdomanski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kdomanski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kdomanski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kdomanski/subscriptions",
      "organizations_url": "https://api.github.com/users/kdomanski/orgs",
      "repos_url": "https://api.github.com/users/kdomanski/repos",
      "events_url": "https://api.github.com/users/kdomanski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kdomanski/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6f9659ddd8247137f1f43a249211833524fa6b68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f9659ddd8247137f1f43a249211833524fa6b68",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6f9659ddd8247137f1f43a249211833524fa6b68"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "67ab96e6124dd59a9440c4ce8b3285dce0bc7058",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7aa65b7d0bc3c3dbd7e2d50c5f73274829ea126/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7aa65b7d0bc3c3dbd7e2d50c5f73274829ea126/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=c7aa65b7d0bc3c3dbd7e2d50c5f73274829ea126",
        "patch": "@@ -3,6 +3,14 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+// prevents undefined reference to boost::filesystem::detail::copy_file with C++11\n+#include <boost/version.hpp>\n+#if BOOST_VERSION >= 105100\n+  #define BOOST_NO_CXX11_SCOPED_ENUMS\n+#else\n+  #define BOOST_NO_SCOPED_ENUMS // deprecated as of BOOST 1.51\n+#endif\n+\n #include \"walletdb.h\"\n \n #include \"base58.h\""
      }
    ]
  },
  {
    "sha": "a223cd974999248b588ad1cebe5ad6f50ac8c40d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMjIzY2Q5NzQ5OTkyNDhiNTg4YWQxY2ViZTVhZDZmNTBhYzhjNDBk",
    "commit": {
      "author": {
        "name": "Kamil Domanski",
        "email": "kdomanski@kdemail.net",
        "date": "2014-04-08T09:48:11Z"
      },
      "committer": {
        "name": "Kamil Domanski",
        "email": "kdomanski@kdemail.net",
        "date": "2014-04-08T10:35:38Z"
      },
      "message": "changed BOOST_FOREACH etc. to C++11 range based for",
      "tree": {
        "sha": "ce0cd2ba4549725a91a9f90a9dbacc6588c11409",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ce0cd2ba4549725a91a9f90a9dbacc6588c11409"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a223cd974999248b588ad1cebe5ad6f50ac8c40d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a223cd974999248b588ad1cebe5ad6f50ac8c40d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a223cd974999248b588ad1cebe5ad6f50ac8c40d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a223cd974999248b588ad1cebe5ad6f50ac8c40d/comments",
    "author": {
      "login": "kdomanski",
      "id": 993296,
      "node_id": "MDQ6VXNlcjk5MzI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/993296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kdomanski",
      "html_url": "https://github.com/kdomanski",
      "followers_url": "https://api.github.com/users/kdomanski/followers",
      "following_url": "https://api.github.com/users/kdomanski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kdomanski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kdomanski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kdomanski/subscriptions",
      "organizations_url": "https://api.github.com/users/kdomanski/orgs",
      "repos_url": "https://api.github.com/users/kdomanski/repos",
      "events_url": "https://api.github.com/users/kdomanski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kdomanski/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kdomanski",
      "id": 993296,
      "node_id": "MDQ6VXNlcjk5MzI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/993296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kdomanski",
      "html_url": "https://github.com/kdomanski",
      "followers_url": "https://api.github.com/users/kdomanski/followers",
      "following_url": "https://api.github.com/users/kdomanski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kdomanski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kdomanski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kdomanski/subscriptions",
      "organizations_url": "https://api.github.com/users/kdomanski/orgs",
      "repos_url": "https://api.github.com/users/kdomanski/repos",
      "events_url": "https://api.github.com/users/kdomanski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kdomanski/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c7aa65b7d0bc3c3dbd7e2d50c5f73274829ea126",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7aa65b7d0bc3c3dbd7e2d50c5f73274829ea126",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c7aa65b7d0bc3c3dbd7e2d50c5f73274829ea126"
      }
    ],
    "stats": {
      "total": 640,
      "additions": 305,
      "deletions": 335
    },
    "files": [
      {
        "sha": "9e36d13339aabb5764853718d835656688dfa382",
        "filename": "src/alert.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/alert.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/alert.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alert.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -16,7 +16,6 @@\n \n #include <boost/algorithm/string/classification.hpp>\n #include <boost/algorithm/string/replace.hpp>\n-#include <boost/foreach.hpp>\n \n using namespace std;\n \n@@ -44,10 +43,10 @@ void CUnsignedAlert::SetNull()\n std::string CUnsignedAlert::ToString() const\n {\n     std::string strSetCancel;\n-    BOOST_FOREACH(int n, setCancel)\n+    for (int n : setCancel)\n         strSetCancel += strprintf(\"%d \", n);\n     std::string strSetSubVer;\n-    BOOST_FOREACH(std::string str, setSubVer)\n+    for (std::string str : setSubVer)\n         strSetSubVer += \"\\\"\" + str + \"\\\" \";\n     return strprintf(\n         \"CAlert(\\n\"\n@@ -219,7 +218,7 @@ bool CAlert::ProcessAlert(bool fThread)\n         }\n \n         // Check if this alert has been cancelled\n-        BOOST_FOREACH(PAIRTYPE(const uint256, CAlert)& item, mapAlerts)\n+        for (PAIRTYPE(const uint256, CAlert)& item : mapAlerts)\n         {\n             const CAlert& alert = item.second;\n             if (alert.Cancels(*this))"
      },
      {
        "sha": "657a78b2ab51dde2daa2950ab17d178d620170e1",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -148,7 +148,7 @@ bool CBloomFilter::IsRelevantAndUpdate(const CTransaction& tx, const uint256& ha\n     if (fFound)\n         return true;\n \n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    for (const CTxIn& txin : tx.vin)\n     {\n         // Match if the filter contains an outpoint tx spends\n         if (contains(txin.prevout))"
      },
      {
        "sha": "bce9b88892f2ebdf61ae577994ea6a6e43aa74ba",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -9,8 +9,6 @@\n \n #include <stdint.h>\n \n-#include <boost/foreach.hpp>\n-\n namespace Checkpoints\n {\n     typedef std::map<int, uint256> MapCheckpoints;\n@@ -148,9 +146,9 @@ namespace Checkpoints\n \n         const MapCheckpoints& checkpoints = *Checkpoints().mapCheckpoints;\n \n-        BOOST_REVERSE_FOREACH(const MapCheckpoints::value_type& i, checkpoints)\n+        for (auto i = checkpoints.rbegin(); i != checkpoints.rend(); i++)\n         {\n-            const uint256& hash = i.second;\n+            const uint256& hash = (*i).second;\n             std::map<uint256, CBlockIndex*>::const_iterator t = mapBlockIndex.find(hash);\n             if (t != mapBlockIndex.end())\n                 return t->second;"
      },
      {
        "sha": "66ff5b9327d24bc27f22efe2f0777554718adbd0",
        "filename": "src/checkqueue.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/checkqueue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/checkqueue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkqueue.h?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -8,7 +8,6 @@\n #include <algorithm>\n #include <vector>\n \n-#include <boost/foreach.hpp>\n #include <boost/thread/condition_variable.hpp>\n #include <boost/thread/locks.hpp>\n #include <boost/thread/mutex.hpp>\n@@ -112,7 +111,7 @@ template<typename T> class CCheckQueue {\n                 fOk = fAllOk;\n             }\n             // execute work\n-            BOOST_FOREACH(T &check, vChecks)\n+            for (T &check : vChecks)\n                 if (fOk)\n                     fOk = check();\n             vChecks.clear();\n@@ -137,7 +136,7 @@ template<typename T> class CCheckQueue {\n     // Add a batch of checks to the queue\n     void Add(std::vector<T> &vChecks) {\n         boost::unique_lock<boost::mutex> lock(mutex);\n-        BOOST_FOREACH(T &check, vChecks) {\n+        for (T &check : vChecks) {\n             queue.push_back(T());\n             check.swap(queue.back());\n         }"
      },
      {
        "sha": "c22d7f32d7866aa2ca3dde141a335c6f867eaf94",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -184,7 +184,7 @@ double CCoinsViewCache::GetPriority(const CTransaction &tx, int nHeight)\n     if (tx.IsCoinBase())\n         return 0.0;\n     double dResult = 0.0;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    for (const CTxIn& txin : tx.vin)\n     {\n         const CCoins &coins = GetCoins(txin.prevout.hash);\n         if (!coins.IsAvailable(txin.prevout.n)) continue;"
      },
      {
        "sha": "7e106c303e449f37171b9be7131a0cd8eb4a5d85",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -12,8 +12,6 @@\n #include <assert.h>\n #include <stdint.h>\n \n-#include <boost/foreach.hpp>\n-\n /** pruned version of CTransaction: only retains metadata and unspent transaction outputs\n  *\n  * Serialized format:\n@@ -98,7 +96,7 @@ class CCoins\n     }\n \n     void ClearUnspendable() {\n-        BOOST_FOREACH(CTxOut &txout, vout) {\n+        for (CTxOut &txout : vout) {\n             if (txout.scriptPubKey.IsUnspendable())\n                 txout.SetNull();\n         }\n@@ -232,7 +230,7 @@ class CCoins\n     // check whether the entire CCoins is spent\n     // note that only !IsPruned() CCoins can be serialized\n     bool IsPruned() const {\n-        BOOST_FOREACH(const CTxOut &out, vout)\n+        for (const CTxOut &out : vout)\n             if (!out.IsNull())\n                 return false;\n         return true;"
      },
      {
        "sha": "1cd8a60111d6c9dd7c1bb1034234250a7a380814",
        "filename": "src/core.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/core.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/core.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -109,7 +109,7 @@ bool CTransaction::IsNewerThan(const CTransaction& old) const\n int64_t CTransaction::GetValueOut() const\n {\n     int64_t nValueOut = 0;\n-    BOOST_FOREACH(const CTxOut& txout, vout)\n+    for (const CTxOut& txout : vout)\n     {\n         nValueOut += txout.nValue;\n         if (!MoneyRange(txout.nValue) || !MoneyRange(nValueOut))\n@@ -127,7 +127,7 @@ double CTransaction::ComputePriority(double dPriorityInputs, unsigned int nTxSiz\n     // risk encouraging people to create junk outputs to redeem later.\n     if (nTxSize == 0)\n         nTxSize = ::GetSerializeSize(*this, SER_NETWORK, PROTOCOL_VERSION);\n-    BOOST_FOREACH(const CTxIn& txin, vin)\n+    for (const CTxIn& txin : vin)\n     {\n         unsigned int offset = 41U + std::min(110U, (unsigned int)txin.scriptSig.size());\n         if (nTxSize > offset)\n@@ -220,7 +220,7 @@ uint256 CBlockHeader::GetHash() const\n uint256 CBlock::BuildMerkleTree() const\n {\n     vMerkleTree.clear();\n-    BOOST_FOREACH(const CTransaction& tx, vtx)\n+    for (const CTransaction& tx : vtx)\n         vMerkleTree.push_back(tx.GetHash());\n     int j = 0;\n     for (int nSize = vtx.size(); nSize > 1; nSize = (nSize + 1) / 2)\n@@ -256,7 +256,7 @@ uint256 CBlock::CheckMerkleBranch(uint256 hash, const std::vector<uint256>& vMer\n {\n     if (nIndex == -1)\n         return 0;\n-    BOOST_FOREACH(const uint256& otherside, vMerkleBranch)\n+    for (const uint256& otherside : vMerkleBranch)\n     {\n         if (nIndex & 1)\n             hash = Hash(BEGIN(otherside), END(otherside), BEGIN(hash), END(hash));"
      },
      {
        "sha": "a1a566edb43abf768b26830e8e4caff23fa8dac8",
        "filename": "src/crypter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -8,7 +8,6 @@\n \n #include <string>\n #include <vector>\n-#include <boost/foreach.hpp>\n #include <openssl/aes.h>\n #include <openssl/evp.h>\n \n@@ -257,7 +256,7 @@ bool CCryptoKeyStore::EncryptKeys(CKeyingMaterial& vMasterKeyIn)\n             return false;\n \n         fUseCrypto = true;\n-        BOOST_FOREACH(KeyMap::value_type& mKey, mapKeys)\n+        for (KeyMap::value_type& mKey : mapKeys)\n         {\n             const CKey &key = mKey.second;\n             CPubKey vchPubKey = key.GetPubKey();"
      },
      {
        "sha": "ef1b4974b9057811f83c5a6c724615d477b40a53",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -371,7 +371,7 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n     }\n \n     // -loadblock=\n-    BOOST_FOREACH(boost::filesystem::path &path, vImportFiles) {\n+    for (boost::filesystem::path &path : vImportFiles) {\n         FILE *file = fopen(path.string().c_str(), \"rb\");\n         if (file) {\n             CImportingNow imp;\n@@ -677,7 +677,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n \n     if (mapArgs.count(\"-onlynet\")) {\n         std::set<enum Network> nets;\n-        BOOST_FOREACH(std::string snet, mapMultiArgs[\"-onlynet\"]) {\n+        for (std::string snet : mapMultiArgs[\"-onlynet\"]) {\n             enum Network net = ParseNetwork(snet);\n             if (net == NET_UNROUTABLE)\n                 return InitError(strprintf(_(\"Unknown network specified in -onlynet: '%s'\"), snet));\n@@ -741,7 +741,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n     bool fBound = false;\n     if (!fNoListen) {\n         if (mapArgs.count(\"-bind\")) {\n-            BOOST_FOREACH(std::string strBind, mapMultiArgs[\"-bind\"]) {\n+            for (std::string strBind : mapMultiArgs[\"-bind\"]) {\n                 CService addrBind;\n                 if (!Lookup(strBind.c_str(), addrBind, GetListenPort(), false))\n                     return InitError(strprintf(_(\"Cannot resolve -bind address: '%s'\"), strBind));\n@@ -761,15 +761,15 @@ bool AppInit2(boost::thread_group& threadGroup)\n     }\n \n     if (mapArgs.count(\"-externalip\")) {\n-        BOOST_FOREACH(string strAddr, mapMultiArgs[\"-externalip\"]) {\n+        for (string strAddr : mapMultiArgs[\"-externalip\"]) {\n             CService addrLocal(strAddr, GetListenPort(), fNameLookup);\n             if (!addrLocal.IsValid())\n                 return InitError(strprintf(_(\"Cannot resolve -externalip address: '%s'\"), strAddr));\n             AddLocal(CService(strAddr, GetListenPort(), fNameLookup), LOCAL_MANUAL);\n         }\n     }\n \n-    BOOST_FOREACH(string strDest, mapMultiArgs[\"-seednode\"])\n+    for (string strDest : mapMultiArgs[\"-seednode\"])\n         AddOneShot(strDest);\n \n     // ********************************************************* Step 7: load block chain\n@@ -1054,7 +1054,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n     std::vector<boost::filesystem::path> vImportFiles;\n     if (mapArgs.count(\"-loadblock\"))\n     {\n-        BOOST_FOREACH(string strFile, mapMultiArgs[\"-loadblock\"])\n+        for (string strFile : mapMultiArgs[\"-loadblock\"])\n             vImportFiles.push_back(strFile);\n     }\n     threadGroup.create_thread(boost::bind(&ThreadImport, vImportFiles));"
      },
      {
        "sha": "bd2e0ea46682cb4289042106f9f999b09401ae33",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -9,8 +9,6 @@\n #include \"key.h\"\n #include \"script.h\"\n \n-#include <boost/foreach.hpp>\n-\n bool CKeyStore::GetPubKey(const CKeyID &address, CPubKey &vchPubKeyOut) const\n {\n     CKey key;"
      },
      {
        "sha": "295463756968f3b7ebece3fd7b2fa574222d540b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 41,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -248,9 +248,9 @@ void FinalizeNode(NodeId nodeid) {\n     LOCK(cs_main);\n     CNodeState *state = State(nodeid);\n \n-    BOOST_FOREACH(const QueuedBlock& entry, state->vBlocksInFlight)\n+    for (const QueuedBlock& entry : state->vBlocksInFlight)\n         mapBlocksInFlight.erase(entry.hash);\n-    BOOST_FOREACH(const uint256& hash, state->vBlocksToDownload)\n+    for (const uint256& hash : state->vBlocksToDownload)\n         mapBlocksToDownload.erase(hash);\n \n     mapNodeState.erase(nodeid);\n@@ -387,7 +387,7 @@ CBlockLocator CChain::GetLocator(const CBlockIndex *pindex) const {\n \n CBlockIndex *CChain::FindFork(const CBlockLocator &locator) const {\n     // Find the first block the caller has in the main chain\n-    BOOST_FOREACH(const uint256& hash, locator.vHave) {\n+    for (const uint256& hash : locator.vHave) {\n         std::map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hash);\n         if (mi != mapBlockIndex.end())\n         {\n@@ -428,7 +428,7 @@ bool AddOrphanTx(const CTransaction& tx)\n     }\n \n     mapOrphanTransactions[hash] = tx;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    for (const CTxIn& txin : tx.vin)\n         mapOrphanTransactionsByPrev[txin.prevout.hash].insert(hash);\n \n     LogPrint(\"mempool\", \"stored orphan tx %s (mapsz %\"PRIszu\")\\n\", hash.ToString(),\n@@ -441,7 +441,7 @@ void static EraseOrphanTx(uint256 hash)\n     if (!mapOrphanTransactions.count(hash))\n         return;\n     const CTransaction& tx = mapOrphanTransactions[hash];\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    for (const CTxIn& txin : tx.vin)\n     {\n         mapOrphanTransactionsByPrev[txin.prevout.hash].erase(hash);\n         if (mapOrphanTransactionsByPrev[txin.prevout.hash].empty())\n@@ -511,7 +511,7 @@ bool IsStandardTx(const CTransaction& tx, string& reason)\n         return false;\n     }\n \n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    for (const CTxIn& txin : tx.vin)\n     {\n         // Biggest 'standard' txin is a 3-signature 3-of-3 CHECKMULTISIG\n         // pay-to-script-hash, which is 3 ~80-byte signatures, 3\n@@ -532,7 +532,7 @@ bool IsStandardTx(const CTransaction& tx, string& reason)\n \n     unsigned int nDataOut = 0;\n     txnouttype whichType;\n-    BOOST_FOREACH(const CTxOut& txout, tx.vout) {\n+    for (const CTxOut& txout : tx.vout) {\n         if (!::IsStandard(txout.scriptPubKey, whichType)) {\n             reason = \"scriptpubkey\";\n             return false;\n@@ -565,7 +565,7 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n         nBlockTime = GetAdjustedTime();\n     if ((int64_t)tx.nLockTime < ((int64_t)tx.nLockTime < LOCKTIME_THRESHOLD ? (int64_t)nBlockHeight : nBlockTime))\n         return true;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    for (const CTxIn& txin : tx.vin)\n         if (!txin.IsFinal())\n             return false;\n     return true;\n@@ -639,11 +639,11 @@ bool AreInputsStandard(const CTransaction& tx, CCoinsViewCache& mapInputs)\n unsigned int GetLegacySigOpCount(const CTransaction& tx)\n {\n     unsigned int nSigOps = 0;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    for (const CTxIn& txin : tx.vin)\n     {\n         nSigOps += txin.scriptSig.GetSigOpCount(false);\n     }\n-    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+    for (const CTxOut& txout : tx.vout)\n     {\n         nSigOps += txout.scriptPubKey.GetSigOpCount(false);\n     }\n@@ -734,7 +734,7 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n \n     // Check for negative or overflow output values\n     int64_t nValueOut = 0;\n-    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+    for (const CTxOut& txout : tx.vout)\n     {\n         if (txout.nValue < 0)\n             return state.DoS(100, error(\"CheckTransaction() : txout.nValue negative\"),\n@@ -750,7 +750,7 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n \n     // Check for duplicate inputs\n     set<COutPoint> vInOutPoints;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    for (const CTxIn& txin : tx.vin)\n     {\n         if (vInOutPoints.count(txin.prevout))\n             return state.DoS(100, error(\"CheckTransaction() : duplicate inputs\"),\n@@ -766,7 +766,7 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n     }\n     else\n     {\n-        BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+        for (const CTxIn& txin : tx.vin)\n             if (txin.prevout.IsNull())\n                 return state.DoS(10, error(\"CheckTransaction() : prevout is null\"),\n                                  REJECT_INVALID, \"bad-txns-prevout-null\");\n@@ -799,7 +799,7 @@ int64_t GetMinFee(const CTransaction& tx, unsigned int nBytes, bool fAllowFree,\n     // is less than CENT:\n     if (nMinFee < nBaseFee && mode == GMF_SEND)\n     {\n-        BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+        for (const CTxOut& txout : tx.vout)\n             if (txout.nValue < CENT)\n                 nMinFee = nBaseFee;\n     }\n@@ -866,7 +866,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // do all inputs exist?\n         // Note that this does not check for the presence of actual outputs (see the next check for that),\n         // only helps filling in pfMissingInputs (to determine missing vs spent).\n-        BOOST_FOREACH(const CTxIn txin, tx.vin) {\n+        for (const CTxIn txin : tx.vin) {\n             if (!view.HaveCoins(txin.prevout.hash)) {\n                 if (pfMissingInputs)\n                     *pfMissingInputs = true;\n@@ -1051,7 +1051,7 @@ bool GetTransaction(const uint256 &hash, CTransaction &txOut, uint256 &hashBlock\n     if (pindexSlow) {\n         CBlock block;\n         if (ReadBlockFromDisk(block, pindexSlow)) {\n-            BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n+            for (const CTransaction &tx : block.vtx) {\n                 if (tx.GetHash() == hash) {\n                     txOut = tx;\n                     hashBlock = pindexSlow->GetBlockHash();\n@@ -1481,7 +1481,7 @@ void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n     bool ret;\n     // mark inputs spent\n     if (!tx.IsCoinBase()) {\n-        BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n+        for (const CTxIn &txin : tx.vin) {\n             CCoins &coins = inputs.GetCoins(txin.prevout.hash);\n             CTxInUndo undo;\n             ret = coins.Spend(txin.prevout, undo);\n@@ -1956,7 +1956,7 @@ bool static DisconnectTip(CValidationState &state) {\n     if (!WriteChainState(state))\n         return false;\n     // Resurrect mempool transactions from the disconnected block.\n-    BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n+    for (const CTransaction &tx : block.vtx) {\n         // ignore validation errors in resurrected transactions\n         list<CTransaction> removed;\n         CValidationState stateDummy; \n@@ -1969,7 +1969,7 @@ bool static DisconnectTip(CValidationState &state) {\n     UpdateTip(pindexDelete->pprev);\n     // Let wallets know transactions went from 1-confirmed to\n     // 0-confirmed or conflicted:\n-    BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n+    for (const CTransaction &tx : block.vtx) {\n         SyncWithWallets(tx.GetHash(), tx, NULL);\n     }\n     return true;\n@@ -2003,7 +2003,7 @@ bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew) {\n         return false;\n     // Remove conflicting transactions from the mempool.\n     list<CTransaction> txConflicted;\n-    BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n+    for (const CTransaction &tx : block.vtx) {\n         list<CTransaction> unused;\n         mempool.remove(tx, unused);\n         mempool.removeConflicts(tx, txConflicted);\n@@ -2013,11 +2013,11 @@ bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew) {\n     UpdateTip(pindexNew);\n     // Tell wallet about transactions that went from mempool\n     // to conflicted:\n-    BOOST_FOREACH(const CTransaction &tx, txConflicted) {\n+    for (const CTransaction &tx : txConflicted) {\n         SyncWithWallets(tx.GetHash(), tx, NULL);\n     }\n     // ... and about transactions that got confirmed:\n-    BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n+    for (const CTransaction &tx : block.vtx) {\n         SyncWithWallets(tx.GetHash(), tx, &block);\n     }\n     return true;\n@@ -2306,7 +2306,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n                              REJECT_INVALID, \"bad-cb-multiple\");\n \n     // Check transactions\n-    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n+    for (const CTransaction& tx : block.vtx)\n         if (!CheckTransaction(tx, state))\n             return error(\"CheckBlock() : CheckTransaction failed\");\n \n@@ -2326,7 +2326,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n                          REJECT_INVALID, \"bad-txns-duplicate\", true);\n \n     unsigned int nSigOps = 0;\n-    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n+    for (const CTransaction& tx : block.vtx)\n     {\n         nSigOps += GetLegacySigOpCount(tx);\n     }\n@@ -2370,7 +2370,7 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CDiskBlockPos* dbp)\n                                  REJECT_INVALID, \"time-too-old\");\n \n         // Check that all transactions are finalized\n-        BOOST_FOREACH(const CTransaction& tx, block.vtx)\n+        for (const CTransaction& tx : block.vtx)\n             if (!IsFinalTx(tx, nHeight, block.GetBlockTime()))\n                 return state.DoS(10, error(\"AcceptBlock() : contains a non-final transaction\"),\n                                  REJECT_INVALID, \"bad-txns-nonfinal\");\n@@ -2433,7 +2433,7 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CDiskBlockPos* dbp)\n     if (chainActive.Tip()->GetBlockHash() == hash)\n     {\n         LOCK(cs_vNodes);\n-        BOOST_FOREACH(CNode* pnode, vNodes)\n+        for (CNode* pnode : vNodes)\n             if (chainActive.Height() > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : nBlockEstimate))\n                 pnode->PushInventory(CInv(MSG_BLOCK, hash));\n     }\n@@ -2812,13 +2812,13 @@ bool static LoadBlockIndexDB()\n     // Calculate nChainWork\n     vector<pair<int, CBlockIndex*> > vSortedByHeight;\n     vSortedByHeight.reserve(mapBlockIndex.size());\n-    BOOST_FOREACH(const PAIRTYPE(uint256, CBlockIndex*)& item, mapBlockIndex)\n+    for (const PAIRTYPE(uint256, CBlockIndex*)& item : mapBlockIndex)\n     {\n         CBlockIndex* pindex = item.second;\n         vSortedByHeight.push_back(make_pair(pindex->nHeight, pindex));\n     }\n     sort(vSortedByHeight.begin(), vSortedByHeight.end());\n-    BOOST_FOREACH(const PAIRTYPE(int, CBlockIndex*)& item, vSortedByHeight)\n+    for (const PAIRTYPE(int, CBlockIndex*)& item : vSortedByHeight)\n     {\n         CBlockIndex* pindex = item.second;\n         pindex->nChainWork = (pindex->pprev ? pindex->pprev->nChainWork : 0) + pindex->GetBlockWork().getuint256();\n@@ -3168,7 +3168,7 @@ string GetWarnings(string strFor)\n     // Alerts\n     {\n         LOCK(cs_mapAlerts);\n-        BOOST_FOREACH(PAIRTYPE(const uint256, CAlert)& item, mapAlerts)\n+        for (PAIRTYPE(const uint256, CAlert)& item : mapAlerts)\n         {\n             const CAlert& alert = item.second;\n             if (alert.AppliesToMe() && alert.nPriority > nPriority)\n@@ -3280,7 +3280,7 @@ void static ProcessGetData(CNode* pfrom)\n                             // Thus, the protocol spec specified allows for us to provide duplicate txn here,\n                             // however we MUST always provide at least what the remote peer needs\n                             typedef std::pair<unsigned int, uint256> PairType;\n-                            BOOST_FOREACH(PairType& pair, merkleBlock.vMatchedTxn)\n+                            for (PairType& pair : merkleBlock.vMatchedTxn)\n                                 if (!pfrom->setInventoryKnown.count(CInv(MSG_TX, pair.second)))\n                                     pfrom->PushMessage(\"tx\", block.vtx[pair.first]);\n                         }\n@@ -3457,7 +3457,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         // Relay alerts\n         {\n             LOCK(cs_mapAlerts);\n-            BOOST_FOREACH(PAIRTYPE(const uint256, CAlert)& item, mapAlerts)\n+            for (PAIRTYPE(const uint256, CAlert)& item : mapAlerts)\n                 item.second.RelayTo(pfrom);\n         }\n \n@@ -3504,7 +3504,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         vector<CAddress> vAddrOk;\n         int64_t nNow = GetAdjustedTime();\n         int64_t nSince = nNow - 10 * 60;\n-        BOOST_FOREACH(CAddress& addr, vAddr)\n+        for (CAddress& addr : vAddr)\n         {\n             boost::this_thread::interruption_point();\n \n@@ -3526,7 +3526,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                     uint256 hashRand = hashSalt ^ (hashAddr<<32) ^ ((GetTime()+hashAddr)/(24*60*60));\n                     hashRand = Hash(BEGIN(hashRand), END(hashRand));\n                     multimap<uint256, CNode*> mapMix;\n-                    BOOST_FOREACH(CNode* pnode, vNodes)\n+                    for (CNode* pnode : vNodes)\n                     {\n                         if (pnode->nVersion < CADDR_TIME_VERSION)\n                             continue;\n@@ -3750,7 +3750,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                 }\n             }\n \n-            BOOST_FOREACH(uint256 hash, vEraseQueue)\n+            for (uint256 hash : vEraseQueue)\n                 EraseOrphanTx(hash);\n         }\n         else if (fMissingInputs)\n@@ -3801,7 +3801,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n     {\n         pfrom->vAddrToSend.clear();\n         vector<CAddress> vAddr = addrman.GetAddr();\n-        BOOST_FOREACH(const CAddress &addr, vAddr)\n+        for (const CAddress &addr : vAddr)\n             pfrom->PushAddress(addr);\n     }\n \n@@ -3813,7 +3813,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         std::vector<uint256> vtxid;\n         mempool.queryHashes(vtxid);\n         vector<CInv> vInv;\n-        BOOST_FOREACH(uint256& hash, vtxid) {\n+        for (uint256& hash : vtxid) {\n             CInv inv(MSG_TX, hash);\n             CTransaction tx;\n             bool fInMemPool = mempool.lookup(hash, tx);\n@@ -3924,7 +3924,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                 pfrom->setKnown.insert(alertHash);\n                 {\n                     LOCK(cs_vNodes);\n-                    BOOST_FOREACH(CNode* pnode, vNodes)\n+                    for (CNode* pnode : vNodes)\n                         alert.RelayTo(pnode);\n                 }\n             }\n@@ -4192,7 +4192,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         {\n             {\n                 LOCK(cs_vNodes);\n-                BOOST_FOREACH(CNode* pnode, vNodes)\n+                for (CNode* pnode : vNodes)\n                 {\n                     // Periodically clear setAddrKnown to allow refresh broadcasts\n                     if (nLastRebroadcast)\n@@ -4217,7 +4217,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         {\n             vector<CAddress> vAddr;\n             vAddr.reserve(pto->vAddrToSend.size());\n-            BOOST_FOREACH(const CAddress& addr, pto->vAddrToSend)\n+            for (const CAddress& addr : pto->vAddrToSend)\n             {\n                 // returns true if wasn't already contained in the set\n                 if (pto->setAddrKnown.insert(addr).second)\n@@ -4251,7 +4251,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n             state.fShouldBan = false;\n         }\n \n-        BOOST_FOREACH(const CBlockReject& reject, state.rejects)\n+        for (const CBlockReject& reject : state.rejects)\n             pto->PushMessage(\"reject\", (string)\"block\", reject.chRejectCode, reject.strRejectReason, reject.hashBlock);\n         state.rejects.clear();\n \n@@ -4278,7 +4278,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n             LOCK(pto->cs_inventory);\n             vInv.reserve(pto->vInventoryToSend.size());\n             vInvWait.reserve(pto->vInventoryToSend.size());\n-            BOOST_FOREACH(const CInv& inv, pto->vInventoryToSend)\n+            for (const CInv& inv : pto->vInventoryToSend)\n             {\n                 if (pto->setInventoryKnown.count(inv))\n                     continue;"
      },
      {
        "sha": "d1ec19459ac92fac18e516b7f715c88623c6c4ba",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -71,7 +71,7 @@ class COrphan\n     {\n         LogPrintf(\"COrphan(hash=%s, dPriority=%.1f, dFeePerKb=%.1f)\\n\",\n                ptx->GetHash().ToString(), dPriority, dFeePerKb);\n-        BOOST_FOREACH(uint256 hash, setDependsOn)\n+        for (uint256 hash : setDependsOn)\n             LogPrintf(\"   setDependsOn %s\\n\", hash.ToString());\n     }\n };\n@@ -165,7 +165,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n             double dPriority = 0;\n             int64_t nTotalIn = 0;\n             bool fMissingInputs = false;\n-            BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+            for (const CTxIn& txin : tx.vin)\n             {\n                 // Read prev transaction\n                 if (!view.HaveCoins(txin.prevout.hash))\n@@ -302,7 +302,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n             // Add transactions that depend on this one to the priority queue\n             if (mapDependers.count(hash))\n             {\n-                BOOST_FOREACH(COrphan* porphan, mapDependers[hash])\n+                for (COrphan* porphan : mapDependers[hash])\n                 {\n                     if (!porphan->setDependsOn.empty())\n                     {"
      },
      {
        "sha": "3c364f5a6531d3d0c54aa7097a28846f4c06d988",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 35,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -195,7 +195,7 @@ bool RecvLine(SOCKET hSocket, string& strLine)\n void static AdvertizeLocal()\n {\n     LOCK(cs_vNodes);\n-    BOOST_FOREACH(CNode* pnode, vNodes)\n+    for (CNode* pnode : vNodes)\n     {\n         if (pnode->fSuccessfullyConnected)\n         {\n@@ -437,7 +437,7 @@ CCriticalSection CNode::cs_totalBytesSent;\n CNode* FindNode(const CNetAddr& ip)\n {\n     LOCK(cs_vNodes);\n-    BOOST_FOREACH(CNode* pnode, vNodes)\n+    for (CNode* pnode : vNodes)\n         if ((CNetAddr)pnode->addr == ip)\n             return (pnode);\n     return NULL;\n@@ -446,7 +446,7 @@ CNode* FindNode(const CNetAddr& ip)\n CNode* FindNode(std::string addrName)\n {\n     LOCK(cs_vNodes);\n-    BOOST_FOREACH(CNode* pnode, vNodes)\n+    for (CNode* pnode : vNodes)\n         if (pnode->addrName == addrName)\n             return (pnode);\n     return NULL;\n@@ -455,7 +455,7 @@ CNode* FindNode(std::string addrName)\n CNode* FindNode(const CService& addr)\n {\n     LOCK(cs_vNodes);\n-    BOOST_FOREACH(CNode* pnode, vNodes)\n+    for (CNode* pnode : vNodes)\n         if ((CService)pnode->addr == addr)\n             return (pnode);\n     return NULL;\n@@ -771,7 +771,7 @@ void ThreadSocketHandler()\n             LOCK(cs_vNodes);\n             // Disconnect unused nodes\n             vector<CNode*> vNodesCopy = vNodes;\n-            BOOST_FOREACH(CNode* pnode, vNodesCopy)\n+            for (CNode* pnode : vNodesCopy)\n             {\n                 if (pnode->fDisconnect ||\n                     (pnode->GetRefCount() <= 0 && pnode->vRecvMsg.empty() && pnode->nSendSize == 0 && pnode->ssSend.empty()))\n@@ -796,7 +796,7 @@ void ThreadSocketHandler()\n         {\n             // Delete disconnected nodes\n             list<CNode*> vNodesDisconnectedCopy = vNodesDisconnected;\n-            BOOST_FOREACH(CNode* pnode, vNodesDisconnectedCopy)\n+            for (CNode* pnode : vNodesDisconnectedCopy)\n             {\n                 // wait until threads are done using it\n                 if (pnode->GetRefCount() <= 0)\n@@ -845,14 +845,14 @@ void ThreadSocketHandler()\n         SOCKET hSocketMax = 0;\n         bool have_fds = false;\n \n-        BOOST_FOREACH(SOCKET hListenSocket, vhListenSocket) {\n+        for (SOCKET hListenSocket : vhListenSocket) {\n             FD_SET(hListenSocket, &fdsetRecv);\n             hSocketMax = max(hSocketMax, hListenSocket);\n             have_fds = true;\n         }\n         {\n             LOCK(cs_vNodes);\n-            BOOST_FOREACH(CNode* pnode, vNodes)\n+            for (CNode* pnode : vNodes)\n             {\n                 if (pnode->hSocket == INVALID_SOCKET)\n                     continue;\n@@ -914,7 +914,7 @@ void ThreadSocketHandler()\n         //\n         // Accept new connections\n         //\n-        BOOST_FOREACH(SOCKET hListenSocket, vhListenSocket)\n+        for (SOCKET hListenSocket : vhListenSocket)\n         if (hListenSocket != INVALID_SOCKET && FD_ISSET(hListenSocket, &fdsetRecv))\n         {\n #ifdef USE_IPV6\n@@ -933,7 +933,7 @@ void ThreadSocketHandler()\n \n             {\n                 LOCK(cs_vNodes);\n-                BOOST_FOREACH(CNode* pnode, vNodes)\n+                for (CNode* pnode : vNodes)\n                     if (pnode->fInbound)\n                         nInbound++;\n             }\n@@ -977,10 +977,10 @@ void ThreadSocketHandler()\n         {\n             LOCK(cs_vNodes);\n             vNodesCopy = vNodes;\n-            BOOST_FOREACH(CNode* pnode, vNodesCopy)\n+            for (CNode* pnode : vNodesCopy)\n                 pnode->AddRef();\n         }\n-        BOOST_FOREACH(CNode* pnode, vNodesCopy)\n+        for (CNode* pnode : vNodesCopy)\n         {\n             boost::this_thread::interruption_point();\n \n@@ -1066,7 +1066,7 @@ void ThreadSocketHandler()\n         }\n         {\n             LOCK(cs_vNodes);\n-            BOOST_FOREACH(CNode* pnode, vNodesCopy)\n+            for (CNode* pnode : vNodesCopy)\n                 pnode->Release();\n         }\n \n@@ -1203,15 +1203,15 @@ void ThreadDNSAddressSeed()\n \n     LogPrintf(\"Loading addresses from DNS seeds (could take a while)\\n\");\n \n-    BOOST_FOREACH(const CDNSSeedData &seed, vSeeds) {\n+    for (const CDNSSeedData &seed : vSeeds) {\n         if (HaveNameProxy()) {\n             AddOneShot(seed.host);\n         } else {\n             vector<CNetAddr> vIPs;\n             vector<CAddress> vAdd;\n             if (LookupHost(seed.host.c_str(), vIPs))\n             {\n-                BOOST_FOREACH(CNetAddr& ip, vIPs)\n+                for (CNetAddr& ip : vIPs)\n                 {\n                     int nOneDay = 24*3600;\n                     CAddress addr = CAddress(CService(ip, Params().GetDefaultPort()));\n@@ -1275,7 +1275,7 @@ void ThreadOpenConnections()\n         for (int64_t nLoop = 0;; nLoop++)\n         {\n             ProcessOneShot();\n-            BOOST_FOREACH(string strAddr, mapMultiArgs[\"-connect\"])\n+            for (string strAddr : mapMultiArgs[\"-connect\"])\n             {\n                 CAddress addr;\n                 OpenNetworkConnection(addr, NULL, strAddr.c_str());\n@@ -1320,7 +1320,7 @@ void ThreadOpenConnections()\n         set<vector<unsigned char> > setConnected;\n         {\n             LOCK(cs_vNodes);\n-            BOOST_FOREACH(CNode* pnode, vNodes) {\n+            for (CNode* pnode : vNodes) {\n                 if (!pnode->fInbound) {\n                     setConnected.insert(pnode->addr.GetGroup());\n                     nOutbound++;\n@@ -1379,10 +1379,10 @@ void ThreadOpenAddedConnections()\n             list<string> lAddresses(0);\n             {\n                 LOCK(cs_vAddedNodes);\n-                BOOST_FOREACH(string& strAddNode, vAddedNodes)\n+                for (string& strAddNode : vAddedNodes)\n                     lAddresses.push_back(strAddNode);\n             }\n-            BOOST_FOREACH(string& strAddNode, lAddresses) {\n+            for (string& strAddNode : lAddresses) {\n                 CAddress addr;\n                 CSemaphoreGrant grant(*semOutbound);\n                 OpenNetworkConnection(addr, &grant, strAddNode.c_str());\n@@ -1397,20 +1397,20 @@ void ThreadOpenAddedConnections()\n         list<string> lAddresses(0);\n         {\n             LOCK(cs_vAddedNodes);\n-            BOOST_FOREACH(string& strAddNode, vAddedNodes)\n+            for (string& strAddNode : vAddedNodes)\n                 lAddresses.push_back(strAddNode);\n         }\n \n         list<vector<CService> > lservAddressesToAdd(0);\n-        BOOST_FOREACH(string& strAddNode, lAddresses)\n+        for (string& strAddNode : lAddresses)\n         {\n             vector<CService> vservNode(0);\n             if(Lookup(strAddNode.c_str(), vservNode, Params().GetDefaultPort(), fNameLookup, 0))\n             {\n                 lservAddressesToAdd.push_back(vservNode);\n                 {\n                     LOCK(cs_setservAddNodeAddresses);\n-                    BOOST_FOREACH(CService& serv, vservNode)\n+                    for (CService& serv : vservNode)\n                         setservAddNodeAddresses.insert(serv);\n                 }\n             }\n@@ -1419,17 +1419,17 @@ void ThreadOpenAddedConnections()\n         // (keeping in mind that addnode entries can have many IPs if fNameLookup)\n         {\n             LOCK(cs_vNodes);\n-            BOOST_FOREACH(CNode* pnode, vNodes)\n+            for (CNode* pnode : vNodes)\n                 for (list<vector<CService> >::iterator it = lservAddressesToAdd.begin(); it != lservAddressesToAdd.end(); it++)\n-                    BOOST_FOREACH(CService& addrNode, *(it))\n+                    for (CService& addrNode : *(it))\n                         if (pnode->addr == addrNode)\n                         {\n                             it = lservAddressesToAdd.erase(it);\n                             it--;\n                             break;\n                         }\n         }\n-        BOOST_FOREACH(vector<CService>& vserv, lservAddressesToAdd)\n+        for (vector<CService>& vserv : lservAddressesToAdd)\n         {\n             CSemaphoreGrant grant(*semOutbound);\n             OpenNetworkConnection(CAddress(vserv[i % vserv.size()]), &grant);\n@@ -1482,7 +1482,7 @@ void static StartSync(const vector<CNode*> &vNodes) {\n     int nBestHeight = g_signals.GetHeight().get_value_or(0);\n \n     // Iterate over all nodes\n-    BOOST_FOREACH(CNode* pnode, vNodes) {\n+    for (CNode* pnode : vNodes) {\n         // check preconditions for allowing a sync\n         if (!pnode->fClient && !pnode->fOneShot &&\n             !pnode->fDisconnect && pnode->fSuccessfullyConnected &&\n@@ -1514,7 +1514,7 @@ void ThreadMessageHandler()\n         {\n             LOCK(cs_vNodes);\n             vNodesCopy = vNodes;\n-            BOOST_FOREACH(CNode* pnode, vNodesCopy) {\n+            for (CNode* pnode : vNodesCopy) {\n                 pnode->AddRef();\n                 if (pnode == pnodeSync)\n                     fHaveSyncNode = true;\n@@ -1531,7 +1531,7 @@ void ThreadMessageHandler()\n \n         bool fSleep = true;\n \n-        BOOST_FOREACH(CNode* pnode, vNodesCopy)\n+        for (CNode* pnode : vNodesCopy)\n         {\n             if (pnode->fDisconnect)\n                 continue;\n@@ -1566,7 +1566,7 @@ void ThreadMessageHandler()\n \n         {\n             LOCK(cs_vNodes);\n-            BOOST_FOREACH(CNode* pnode, vNodesCopy)\n+            for (CNode* pnode : vNodesCopy)\n                 pnode->Release();\n         }\n \n@@ -1692,7 +1692,7 @@ void static Discover(boost::thread_group& threadGroup)\n         vector<CNetAddr> vaddr;\n         if (LookupHost(pszHostName, vaddr))\n         {\n-            BOOST_FOREACH (const CNetAddr &addr, vaddr)\n+            for (const CNetAddr &addr : vaddr)\n             {\n                 AddLocal(addr, LOCAL_IF);\n             }\n@@ -1800,18 +1800,18 @@ class CNetCleanup\n     ~CNetCleanup()\n     {\n         // Close sockets\n-        BOOST_FOREACH(CNode* pnode, vNodes)\n+        for (CNode* pnode : vNodes)\n             if (pnode->hSocket != INVALID_SOCKET)\n                 closesocket(pnode->hSocket);\n-        BOOST_FOREACH(SOCKET hListenSocket, vhListenSocket)\n+        for (SOCKET hListenSocket : vhListenSocket)\n             if (hListenSocket != INVALID_SOCKET)\n                 if (closesocket(hListenSocket) == SOCKET_ERROR)\n                     LogPrintf(\"closesocket(hListenSocket) failed with error %d\\n\", WSAGetLastError());\n \n         // clean up some globals (to help leak detection)\n-        BOOST_FOREACH(CNode *pnode, vNodes)\n+        for (CNode *pnode : vNodes)\n             delete pnode;\n-        BOOST_FOREACH(CNode *pnode, vNodesDisconnected)\n+        for (CNode *pnode : vNodesDisconnected)\n             delete pnode;\n         vNodes.clear();\n         vNodesDisconnected.clear();\n@@ -1859,7 +1859,7 @@ void RelayTransaction(const CTransaction& tx, const uint256& hash, const CDataSt\n         vRelayExpiration.push_back(std::make_pair(GetTime() + 15 * 60, inv));\n     }\n     LOCK(cs_vNodes);\n-    BOOST_FOREACH(CNode* pnode, vNodes)\n+    for (CNode* pnode : vNodes)\n     {\n         if(!pnode->fRelayTxes)\n             continue;"
      },
      {
        "sha": "c93371d25a402fdb23daec78f60ff4f8bb1764c5",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -24,7 +24,6 @@\n #include <arpa/inet.h>\n #endif\n \n-#include <boost/foreach.hpp>\n #include <boost/signals2/signal.hpp>\n #include <openssl/rand.h>\n \n@@ -352,7 +351,7 @@ class CNode\n     unsigned int GetTotalRecvSize()\n     {\n         unsigned int total = 0;\n-        BOOST_FOREACH(const CNetMessage &msg, vRecvMsg)\n+        for (const CNetMessage &msg : vRecvMsg)\n             total += msg.vRecv.size() + 24;\n         return total;\n     }\n@@ -364,7 +363,7 @@ class CNode\n     void SetRecvVersion(int nVersionIn)\n     {\n         nRecvVersion = nVersionIn;\n-        BOOST_FOREACH(CNetMessage &msg, vRecvMsg)\n+        for (CNetMessage &msg : vRecvMsg)\n             msg.SetVersion(nVersionIn);\n     }\n "
      },
      {
        "sha": "05b7da544e333293b4dc611f787f0540af16ed71",
        "filename": "src/qt/addressbookpage.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/qt/addressbookpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/qt/addressbookpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -248,7 +248,7 @@ void AddressBookPage::done(int retval)\n     // Figure out which address was selected, and return it\n     QModelIndexList indexes = table->selectionModel()->selectedRows(AddressTableModel::Address);\n \n-    foreach (QModelIndex index, indexes)\n+    for (QModelIndex index : indexes)\n     {\n         QVariant address = table->model()->data(index);\n         returnValue = address.toString();"
      },
      {
        "sha": "eb27e5e95c21cfa3b3552d4cdd98f18487be64be",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -79,7 +79,7 @@ class AddressTablePriv\n         cachedAddressTable.clear();\n         {\n             LOCK(wallet->cs_wallet);\n-            BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& item, wallet->mapAddressBook)\n+            for (const PAIRTYPE(CTxDestination, CAddressBookData)& item : wallet->mapAddressBook)\n             {\n                 const CBitcoinAddress& address = item.first;\n                 bool fMine = IsMine(*wallet, address.Get());"
      },
      {
        "sha": "021b568fe518cc33c0a2472e544031aa4728f107",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -855,7 +855,7 @@ void BitcoinGUI::dropEvent(QDropEvent *event)\n {\n     if(event->mimeData()->hasUrls())\n     {\n-        foreach(const QUrl &uri, event->mimeData()->urls())\n+        for (const QUrl &uri : event->mimeData()->urls())\n         {\n             emit receivedURI(uri.toString());\n         }"
      },
      {
        "sha": "0b2339145c118d01ffe0db40537b8e1da10dcd4f",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -46,9 +46,9 @@ int ClientModel::getNumConnections(unsigned int flags) const\n         return vNodes.size();\n \n     int nNum = 0;\n-    BOOST_FOREACH(CNode* pnode, vNodes)\n-    if (flags & (pnode->fInbound ? CONNECTIONS_IN : CONNECTIONS_OUT))\n-        nNum++;\n+    for (CNode* pnode : vNodes)\n+        if (flags & (pnode->fInbound ? CONNECTIONS_IN : CONNECTIONS_OUT))\n+            nNum++;\n \n     return nNum;\n }"
      },
      {
        "sha": "d844043c07b1a19c1ec1f3b99eec339d0916cccd",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -442,7 +442,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     bool fLowOutput = false;\n     bool fDust = false;\n     CTransaction txDummy;\n-    foreach(const qint64 &amount, CoinControlDialog::payAmounts)\n+    for (const qint64 &amount : CoinControlDialog::payAmounts)\n     {\n         nPayAmount += amount;\n \n@@ -475,7 +475,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     coinControl->ListSelected(vCoinControl);\n     model->getOutputs(vCoinControl, vOutputs);\n \n-    BOOST_FOREACH(const COutput& out, vOutputs)\n+    for (const COutput& out : vOutputs)\n     {\n         // unselect already spent, very unlikely scenario, this could happen\n         // when selected are spent elsewhere, like rpc or another computer\n@@ -657,7 +657,7 @@ void CoinControlDialog::updateView()\n     map<QString, vector<COutput> > mapCoins;\n     model->listCoins(mapCoins);\n \n-    BOOST_FOREACH(PAIRTYPE(QString, vector<COutput>) coins, mapCoins)\n+    for (PAIRTYPE(QString, vector<COutput>) coins : mapCoins)\n     {\n         QTreeWidgetItem *itemWalletAddress = new QTreeWidgetItem();\n         itemWalletAddress->setCheckState(COLUMN_CHECKBOX, Qt::Unchecked);\n@@ -685,7 +685,7 @@ void CoinControlDialog::updateView()\n         double dPrioritySum = 0;\n         int nChildren = 0;\n         int nInputSum = 0;\n-        BOOST_FOREACH(const COutput& out, coins.second)\n+        for (const COutput& out : coins.second)\n         {\n             int nInputSize = 0;\n             nSum += out.tx->vout[out.i].nValue;"
      },
      {
        "sha": "dba68e4648a396cc1c95ca920e8b0d3a7e9c4887",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -70,7 +70,7 @@ OptionsDialog::OptionsDialog(QWidget *parent) :\n     /* Display elements init */\n     QDir translations(\":translations\");\n     ui->lang->addItem(QString(\"(\") + tr(\"default\") + QString(\")\"), QVariant(\"\"));\n-    foreach(const QString &langStr, translations.entryList())\n+    for (const QString &langStr : translations.entryList())\n     {\n         QLocale locale(langStr);\n "
      },
      {
        "sha": "36fed2a486f0ad302d8424f7bc3505b4ee26c5b7",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -132,7 +132,7 @@ void PaymentServer::LoadRootCAs(X509_STORE* _store)\n \n     int nRootCerts = 0;\n     const QDateTime currentTime = QDateTime::currentDateTime();\n-    foreach (const QSslCertificate& cert, certList)\n+    for (const QSslCertificate& cert : certList)\n     {\n         if (currentTime < cert.effectiveDate() || currentTime > cert.expiryDate()) {\n             ReportInvalidCertificate(cert);\n@@ -234,7 +234,7 @@ bool PaymentServer::ipcParseCommandLine(int argc, char* argv[])\n bool PaymentServer::ipcSendCommandLine()\n {\n     bool fResult = false;\n-    foreach (const QString& r, savedPaymentRequests)\n+    for (const QString& r : savedPaymentRequests)\n     {\n         QLocalSocket* socket = new QLocalSocket();\n         socket->connectToServer(ipcServerName(), QIODevice::WriteOnly);\n@@ -363,7 +363,7 @@ void PaymentServer::uiReady()\n     initNetManager();\n \n     saveURIs = false;\n-    foreach (const QString& s, savedPaymentRequests)\n+    for (const QString& s : savedPaymentRequests)\n     {\n         handleURIOrFile(s);\n     }\n@@ -490,7 +490,7 @@ bool PaymentServer::processPaymentRequest(PaymentRequestPlus& request, SendCoins\n     QList<std::pair<CScript, qint64> > sendingTos = request.getPayTo();\n     QStringList addresses;\n \n-    foreach(const PAIRTYPE(CScript, qint64)& sendingTo, sendingTos) {\n+    for (const PAIRTYPE(CScript, qint64)& sendingTo : sendingTos) {\n         // Extract and check destination addresses\n         CTxDestination dest;\n         if (ExtractDestination(sendingTo.first, dest)) {\n@@ -657,7 +657,7 @@ void PaymentServer::reportSslErrors(QNetworkReply* reply, const QList<QSslError>\n     Q_UNUSED(reply);\n \n     QString errString;\n-    foreach (const QSslError& err, errs) {\n+    for (const QSslError& err : errs) {\n         qDebug() << \"PaymentServer::reportSslErrors : \" << err;\n         errString += err.errorString() + \"\\n\";\n     }"
      },
      {
        "sha": "18fe2fcafed4152ff623f150a62a7552a176983b",
        "filename": "src/qt/receivecoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/qt/receivecoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/qt/receivecoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -180,7 +180,7 @@ void ReceiveCoinsDialog::on_showRequestButton_clicked()\n         return;\n     QModelIndexList selection = ui->recentRequestsView->selectionModel()->selectedRows();\n \n-    foreach (QModelIndex index, selection)\n+    for (QModelIndex index : selection)\n     {\n         on_recentRequestsView_doubleClicked(index);\n     }"
      },
      {
        "sha": "574f57c04b87f6370a45e5f75325a0cffec7e1e4",
        "filename": "src/qt/recentrequeststablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/qt/recentrequeststablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/qt/recentrequeststablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -17,7 +17,7 @@ RecentRequestsTableModel::RecentRequestsTableModel(CWallet *wallet, WalletModel\n     // Load entries from wallet\n     std::vector<std::string> vReceiveRequests;\n     parent->loadReceiveRequests(vReceiveRequests);\n-    BOOST_FOREACH(const std::string& request, vReceiveRequests)\n+    for (const std::string& request : vReceiveRequests)\n         addNewRequest(request);\n \n     /* These columns must match the indices in the ColumnIndex enumeration */"
      },
      {
        "sha": "91ac8ae21a55335f76139a0964ea5466d8764cb1",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -83,7 +83,7 @@ bool parseCommandLine(std::vector<std::string> &args, const std::string &strComm\n         STATE_ESCAPE_DOUBLEQUOTED\n     } state = STATE_EATING_SPACES;\n     std::string curarg;\n-    foreach(char ch, strCommand)\n+    for (char ch : strCommand)\n     {\n         switch(state)\n         {"
      },
      {
        "sha": "597a6e76186130000c59996752a953360f7b737c",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -139,7 +139,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n \n     // Format confirmation message\n     QStringList formatted;\n-    foreach(const SendCoinsRecipient &rcp, recipients)\n+    for (const SendCoinsRecipient &rcp : recipients)\n     {\n         // generate bold amount string\n         QString amount = \"<b>\" + BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), rcp.amount);\n@@ -219,7 +219,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n     questionString.append(\"<hr />\");\n     qint64 totalAmount = currentTransaction.getTotalTransactionAmount() + txFee;\n     QStringList alternativeUnits;\n-    foreach(BitcoinUnits::Unit u, BitcoinUnits::availableUnits())\n+    for (BitcoinUnits::Unit u : BitcoinUnits::availableUnits())\n     {\n         if(u != model->getOptionsModel()->getDisplayUnit())\n             alternativeUnits.append(BitcoinUnits::formatWithUnit(u, totalAmount));"
      },
      {
        "sha": "fe0f367af5b431c1485e203eb5cc5cb56e1922f7",
        "filename": "src/qt/trafficgraphwidget.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/qt/trafficgraphwidget.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/qt/trafficgraphwidget.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/trafficgraphwidget.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -137,10 +137,10 @@ void TrafficGraphWidget::updateRates()\n     }\n \n     float tmax = 0.0f;\n-    foreach(float f, vSamplesIn) {\n+    for (float f : vSamplesIn) {\n         if(f > tmax) tmax = f;\n     }\n-    foreach(float f, vSamplesOut) {\n+    for (float f : vSamplesOut) {\n         if(f > tmax) tmax = f;\n     }\n     fMax = tmax;"
      },
      {
        "sha": "fe56c23e4d5ce37148682b3f4e627a8d6fe7ccae",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -86,7 +86,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, int vout, int u\n             if (nNet > 0)\n             {\n                 // Credit\n-                BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n+                for (const CTxOut& txout : wtx.vout)\n                 {\n                     if (wallet->IsMine(txout))\n                     {\n@@ -134,7 +134,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, int vout, int u\n             // Coinbase\n             //\n             int64_t nUnmatured = 0;\n-            BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n+            for (const CTxOut& txout : wtx.vout)\n                 nUnmatured += wallet->GetCredit(txout);\n             strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \";\n             if (wtx.IsInMainChain())\n@@ -153,19 +153,19 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, int vout, int u\n         else\n         {\n             bool fAllFromMe = true;\n-            BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n+            for (const CTxIn& txin : wtx.vin)\n                 fAllFromMe = fAllFromMe && wallet->IsMine(txin);\n \n             bool fAllToMe = true;\n-            BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n+            for (const CTxOut& txout : wtx.vout)\n                 fAllToMe = fAllToMe && wallet->IsMine(txout);\n \n             if (fAllFromMe)\n             {\n                 //\n                 // Debit\n                 //\n-                BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n+                for (const CTxOut& txout : wtx.vout)\n                 {\n                     if (wallet->IsMine(txout))\n                         continue;\n@@ -205,10 +205,10 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, int vout, int u\n                 //\n                 // Mixed debit transaction\n                 //\n-                BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n+                for (const CTxIn& txin : wtx.vin)\n                     if (wallet->IsMine(txin))\n                         strHTML += \"<b>\" + tr(\"Debit\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, -wallet->GetDebit(txin)) + \"<br>\";\n-                BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n+                for (const CTxOut& txout : wtx.vout)\n                     if (wallet->IsMine(txout))\n                         strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, wallet->GetCredit(txout)) + \"<br>\";\n             }\n@@ -227,14 +227,14 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, int vout, int u\n         strHTML += \"<b>\" + tr(\"Transaction ID\") + \":</b> \" + TransactionRecord::formatSubTxId(wtx.GetHash(), vout) + \"<br>\";\n \n         // Message from normal bitcoin:URI (bitcoin:123...?message=example)\n-        foreach (const PAIRTYPE(string, string)& r, wtx.vOrderForm)\n+        for  (const PAIRTYPE(string, string)& r : wtx.vOrderForm)\n             if (r.first == \"Message\")\n                 strHTML += \"<br><b>\" + tr(\"Message\") + \":</b><br>\" + GUIUtil::HtmlEscape(r.second, true) + \"<br>\";\n \n         //\n         // PaymentRequest info:\n         //\n-        foreach (const PAIRTYPE(string, string)& r, wtx.vOrderForm)\n+        for  (const PAIRTYPE(string, string)& r : wtx.vOrderForm)\n         {\n             if (r.first == \"PaymentRequest\")\n             {\n@@ -258,10 +258,10 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, int vout, int u\n         if (fDebug)\n         {\n             strHTML += \"<hr><br>\" + tr(\"Debug information\") + \"<br><br>\";\n-            BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n+            for (const CTxIn& txin : wtx.vin)\n                 if(wallet->IsMine(txin))\n                     strHTML += \"<b>\" + tr(\"Debit\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, -wallet->GetDebit(txin)) + \"<br>\";\n-            BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n+            for (const CTxOut& txout : wtx.vout)\n                 if(wallet->IsMine(txout))\n                     strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, wallet->GetCredit(txout)) + \"<br>\";\n \n@@ -273,7 +273,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, int vout, int u\n \n             {\n                 LOCK(wallet->cs_wallet);\n-                BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n+                for (const CTxIn& txin : wtx.vin)\n                 {\n                     COutPoint prevout = txin.prevout;\n "
      },
      {
        "sha": "6d5de317238ab178ec7139ef20f06f0e27c7fca2",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -42,7 +42,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n         //\n         // Credit\n         //\n-        BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n+        for (const CTxOut& txout : wtx.vout)\n         {\n             if(wallet->IsMine(txout))\n             {\n@@ -75,11 +75,11 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n     else\n     {\n         bool fAllFromMe = true;\n-        BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n+        for (const CTxIn& txin : wtx.vin)\n             fAllFromMe = fAllFromMe && wallet->IsMine(txin);\n \n         bool fAllToMe = true;\n-        BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n+        for (const CTxOut& txout : wtx.vout)\n             fAllToMe = fAllToMe && wallet->IsMine(txout);\n \n         if (fAllFromMe && fAllToMe)"
      },
      {
        "sha": "f0d2a0abb7f6e70a100242af2d2f642a75f115c4",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -148,7 +148,7 @@ class TransactionTablePriv\n                     {\n                         parent->beginInsertRows(QModelIndex(), lowerIndex, lowerIndex+toInsert.size()-1);\n                         int insert_idx = lowerIndex;\n-                        foreach(const TransactionRecord &rec, toInsert)\n+                        for (const TransactionRecord &rec : toInsert)\n                         {\n                             cachedWallet.insert(insert_idx, rec);\n                             insert_idx += 1;"
      },
      {
        "sha": "be3e1b9747adb36ab29e77654d10ff85d9ce8e0f",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -57,7 +57,7 @@ qint64 WalletModel::getBalance(const CCoinControl *coinControl) const\n         qint64 nBalance = 0;\n         std::vector<COutput> vCoins;\n         wallet->AvailableCoins(vCoins, true, coinControl);\n-        BOOST_FOREACH(const COutput& out, vCoins)\n+        for (const COutput& out : vCoins)\n             nBalance += out.tx->vout[out.i].nValue;\n \n         return nBalance;\n@@ -165,7 +165,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n     int nAddresses = 0;\n \n     // Pre-check input data for validity\n-    foreach(const SendCoinsRecipient &rcp, recipients)\n+    for (const SendCoinsRecipient &rcp : recipients)\n     {\n         if (rcp.paymentRequest.IsInitialized())\n         {   // PaymentRequest...\n@@ -260,7 +260,7 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n         CWalletTx *newTx = transaction.getTransaction();\n \n         // Store PaymentRequests in wtx.vOrderForm in wallet.\n-        foreach(const SendCoinsRecipient &rcp, transaction.getRecipients())\n+        for (const SendCoinsRecipient &rcp : transaction.getRecipients())\n         {\n             if (rcp.paymentRequest.IsInitialized())\n             {\n@@ -285,7 +285,7 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n \n     // Add addresses / update labels that we've sent to to the address book,\n     // and emit coinsSent signal for each recipient\n-    foreach(const SendCoinsRecipient &rcp, transaction.getRecipients())\n+    for (const SendCoinsRecipient &rcp : transaction.getRecipients())\n     {\n         // Don't touch the address book when we have a payment request\n         if (!rcp.paymentRequest.IsInitialized())\n@@ -451,7 +451,7 @@ static void ShowProgress(WalletModel *walletmodel, const std::string &title, int\n     if (nProgress == 100)\n     {\n         fQueueNotifications = false;\n-        BOOST_FOREACH(const PAIRTYPE(uint256, ChangeType)& notification, vQueueNotifications)\n+        for (const PAIRTYPE(uint256, ChangeType)& notification : vQueueNotifications)\n             NotifyTransactionChanged(walletmodel, NULL, notification.first, notification.second);\n         std::vector<std::pair<uint256, ChangeType> >().swap(vQueueNotifications); // clear\n     }\n@@ -521,7 +521,7 @@ bool WalletModel::getPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const\n void WalletModel::getOutputs(const std::vector<COutPoint>& vOutpoints, std::vector<COutput>& vOutputs)\n {\n     LOCK(wallet->cs_wallet);\n-    BOOST_FOREACH(const COutPoint& outpoint, vOutpoints)\n+    for (const COutPoint& outpoint : vOutpoints)\n     {\n         if (!wallet->mapWallet.count(outpoint.hash)) continue;\n         int nDepth = wallet->mapWallet[outpoint.hash].GetDepthInMainChain();\n@@ -548,7 +548,7 @@ void WalletModel::listCoins(std::map<QString, std::vector<COutput> >& mapCoins)\n     wallet->ListLockedCoins(vLockedCoins);\n \n     // add locked coins\n-    BOOST_FOREACH(const COutPoint& outpoint, vLockedCoins)\n+    for (const COutPoint& outpoint : vLockedCoins)\n     {\n         if (!wallet->mapWallet.count(outpoint.hash)) continue;\n         int nDepth = wallet->mapWallet[outpoint.hash].GetDepthInMainChain();\n@@ -557,7 +557,7 @@ void WalletModel::listCoins(std::map<QString, std::vector<COutput> >& mapCoins)\n         vCoins.push_back(out);\n     }\n \n-    BOOST_FOREACH(const COutput& out, vCoins)\n+    for (const COutput& out : vCoins)\n     {\n         COutput cout = out;\n \n@@ -600,8 +600,8 @@ void WalletModel::listLockedCoins(std::vector<COutPoint>& vOutpts)\n void WalletModel::loadReceiveRequests(std::vector<std::string>& vReceiveRequests)\n {\n     LOCK(wallet->cs_wallet);\n-    BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& item, wallet->mapAddressBook)\n-        BOOST_FOREACH(const PAIRTYPE(std::string, std::string)& item2, item.second.destdata)\n+    for (const PAIRTYPE(CTxDestination, CAddressBookData)& item : wallet->mapAddressBook)\n+        for (const PAIRTYPE(std::string, std::string)& item2 : item.second.destdata)\n             if (item2.first.size() > 2 && item2.first.substr(0,2) == \"rr\") // receive request\n                 vReceiveRequests.push_back(item2.second);\n }"
      },
      {
        "sha": "13f4d5f6c5ab2383e9232509f174a66b2afecf11",
        "filename": "src/qt/walletmodeltransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/qt/walletmodeltransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/qt/walletmodeltransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -44,7 +44,7 @@ void WalletModelTransaction::setTransactionFee(qint64 newFee)\n qint64 WalletModelTransaction::getTotalTransactionAmount()\n {\n     qint64 totalTransactionAmount = 0;\n-    foreach(const SendCoinsRecipient &rcp, recipients)\n+    for (const SendCoinsRecipient &rcp : recipients)\n     {\n         totalTransactionAmount += rcp.amount;\n     }"
      },
      {
        "sha": "2629c6ae7bafbc6e83a97cc17847ff3bef046ddd",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -60,7 +60,7 @@ Object blockToJSON(const CBlock& block, const CBlockIndex* blockindex)\n     result.push_back(Pair(\"version\", block.nVersion));\n     result.push_back(Pair(\"merkleroot\", block.hashMerkleRoot.GetHex()));\n     Array txs;\n-    BOOST_FOREACH(const CTransaction&tx, block.vtx)\n+    for (const CTransaction&tx : block.vtx)\n         txs.push_back(tx.GetHash().GetHex());\n     result.push_back(Pair(\"tx\", txs));\n     result.push_back(Pair(\"time\", (boost::int64_t)block.GetBlockTime()));\n@@ -167,7 +167,7 @@ Value getrawmempool(const Array& params, bool fHelp)\n     {\n         LOCK(mempool.cs);\n         Object o;\n-        BOOST_FOREACH(const PAIRTYPE(uint256, CTxMemPoolEntry)& entry, mempool.mapTx)\n+        for (const PAIRTYPE(uint256, CTxMemPoolEntry)& entry : mempool.mapTx)\n         {\n             const uint256& hash = entry.first;\n             const CTxMemPoolEntry& e = entry.second;\n@@ -180,7 +180,7 @@ Value getrawmempool(const Array& params, bool fHelp)\n             info.push_back(Pair(\"currentpriority\", e.GetPriority(chainActive.Height())));\n             const CTransaction& tx = e.GetTx();\n             set<string> setDepends;\n-            BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+            for (const CTxIn& txin : tx.vin)\n             {\n                 if (mempool.exists(txin.prevout.hash))\n                     setDepends.insert(txin.prevout.hash.ToString());\n@@ -197,7 +197,7 @@ Value getrawmempool(const Array& params, bool fHelp)\n         mempool.queryHashes(vtxid);\n \n         Array a;\n-        BOOST_FOREACH(const uint256& hash, vtxid)\n+        for (const uint256& hash : vtxid)\n             a.push_back(hash.ToString());\n \n         return a;"
      },
      {
        "sha": "02411ac19796121e70b158d608c9bebe8d7c593d",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -17,7 +17,6 @@\n #include <boost/asio/ssl.hpp>\n #include <boost/bind.hpp>\n #include <boost/filesystem.hpp>\n-#include <boost/foreach.hpp>\n #include <boost/iostreams/concepts.hpp>\n #include <boost/iostreams/stream.hpp>\n #include <boost/shared_ptr.hpp>\n@@ -117,7 +116,7 @@ void ConvertTo(Value& value, bool fAllowNull=false)\n Array RPCConvertValues(const std::string &strMethod, const std::vector<std::string> &strParams)\n {\n     Array params;\n-    BOOST_FOREACH(const std::string &param, strParams)\n+    for (const std::string &param : strParams)\n         params.push_back(param);\n \n     int n = params.size();"
      },
      {
        "sha": "10a8d97fdc50b76930807df8c4b1c3e42ca54da1",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -40,7 +40,7 @@ int64_t static DecodeDumpTime(const std::string &str) {\n \n std::string static EncodeDumpString(const std::string &str) {\n     std::stringstream ret;\n-    BOOST_FOREACH(unsigned char c, str) {\n+    for (unsigned char c : str) {\n         if (c <= 32 || c >= 128 || c == '%') {\n             ret << '%' << HexStr(&c, &c + 1);\n         } else {"
      },
      {
        "sha": "4cebd23dfe55df09c4e805a4d89b2cf948b6d4ad",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -322,7 +322,7 @@ Value getwork(const Array& params, bool fHelp)\n             {\n                 // Deallocate old blocks since they're obsolete now\n                 mapNewBlock.clear();\n-                BOOST_FOREACH(CBlockTemplate* pblocktemplate, vNewBlockTemplate)\n+                for (CBlockTemplate* pblocktemplate : vNewBlockTemplate)\n                     delete pblocktemplate;\n                 vNewBlockTemplate.clear();\n             }\n@@ -525,7 +525,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n     Array transactions;\n     map<uint256, int64_t> setTxIndex;\n     int i = 0;\n-    BOOST_FOREACH (CTransaction& tx, pblock->vtx)\n+    for  (CTransaction& tx : pblock->vtx)\n     {\n         uint256 txHash = tx.GetHash();\n         setTxIndex[txHash] = i++;\n@@ -542,7 +542,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n         entry.push_back(Pair(\"hash\", txHash.GetHex()));\n \n         Array deps;\n-        BOOST_FOREACH (const CTxIn &in, tx.vin)\n+        for  (const CTxIn &in : tx.vin)\n         {\n             if (setTxIndex.count(in.prevout.hash))\n                 deps.push_back(setTxIndex[in.prevout.hash]);"
      },
      {
        "sha": "55f89a49935a281389e214dce811ff0eba963a8e",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -114,7 +114,7 @@ class DescribeAddressVisitor : public boost::static_visitor<Object>\n         obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n         obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n         Array a;\n-        BOOST_FOREACH(const CTxDestination& addr, addresses)\n+        for (const CTxDestination& addr : addresses)\n             a.push_back(CBitcoinAddress(addr).ToString());\n         obj.push_back(Pair(\"addresses\", a));\n         if (whichType == TX_MULTISIG)"
      },
      {
        "sha": "78dead1222347d7a6eb7c6a30ac77dc650b1ce3a",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 10,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -11,7 +11,6 @@\n #include \"sync.h\"\n #include \"util.h\"\n \n-#include <boost/foreach.hpp>\n #include \"json/json_spirit_value.h\"\n \n using namespace json_spirit;\n@@ -49,7 +48,7 @@ Value ping(const Array& params, bool fHelp)\n \n     // Request that each node send a ping during next message processing pass\n     LOCK(cs_vNodes);\n-    BOOST_FOREACH(CNode* pNode, vNodes) {\n+    for (CNode* pNode : vNodes) {\n         pNode->fPingQueued = true;\n     }\n \n@@ -62,7 +61,7 @@ static void CopyNodeStats(std::vector<CNodeStats>& vstats)\n \n     LOCK(cs_vNodes);\n     vstats.reserve(vNodes.size());\n-    BOOST_FOREACH(CNode* pnode, vNodes) {\n+    for (CNode* pnode : vNodes) {\n         CNodeStats stats;\n         pnode->copyStats(stats);\n         vstats.push_back(stats);\n@@ -108,7 +107,7 @@ Value getpeerinfo(const Array& params, bool fHelp)\n \n     Array ret;\n \n-    BOOST_FOREACH(const CNodeStats& stats, vstats) {\n+    for (const CNodeStats& stats : vstats) {\n         Object obj;\n         CNodeStateStats statestats;\n         bool fStateStats = GetNodeStateStats(stats.nodeid, statestats);\n@@ -231,14 +230,14 @@ Value getaddednodeinfo(const Array& params, bool fHelp)\n     if (params.size() == 1)\n     {\n         LOCK(cs_vAddedNodes);\n-        BOOST_FOREACH(string& strAddNode, vAddedNodes)\n+        for (string& strAddNode : vAddedNodes)\n             laddedNodes.push_back(strAddNode);\n     }\n     else\n     {\n         string strNode = params[1].get_str();\n         LOCK(cs_vAddedNodes);\n-        BOOST_FOREACH(string& strAddNode, vAddedNodes)\n+        for (string& strAddNode : vAddedNodes)\n             if (strAddNode == strNode)\n             {\n                 laddedNodes.push_back(strAddNode);\n@@ -251,7 +250,7 @@ Value getaddednodeinfo(const Array& params, bool fHelp)\n     Array ret;\n     if (!fDns)\n     {\n-        BOOST_FOREACH(string& strAddNode, laddedNodes)\n+        for (string& strAddNode : laddedNodes)\n         {\n             Object obj;\n             obj.push_back(Pair(\"addednode\", strAddNode));\n@@ -261,7 +260,7 @@ Value getaddednodeinfo(const Array& params, bool fHelp)\n     }\n \n     list<pair<string, vector<CService> > > laddedAddreses(0);\n-    BOOST_FOREACH(string& strAddNode, laddedNodes)\n+    for (string& strAddNode : laddedNodes)\n     {\n         vector<CService> vservNode(0);\n         if(Lookup(strAddNode.c_str(), vservNode, Params().GetDefaultPort(), fNameLookup, 0))\n@@ -284,12 +283,12 @@ Value getaddednodeinfo(const Array& params, bool fHelp)\n \n         Array addresses;\n         bool fConnected = false;\n-        BOOST_FOREACH(CService& addrNode, it->second)\n+        for (CService& addrNode : it->second)\n         {\n             bool fFound = false;\n             Object node;\n             node.push_back(Pair(\"address\", addrNode.ToString()));\n-            BOOST_FOREACH(CNode* pnode, vNodes)\n+            for (CNode* pnode : vNodes)\n                 if (pnode->addr == addrNode)\n                 {\n                     fFound = true;"
      },
      {
        "sha": "e876e2860d170107bd75598826b01d9e12156f1b",
        "filename": "src/rpcprotocol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/rpcprotocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/rpcprotocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -14,7 +14,6 @@\n #include <boost/asio/ssl.hpp>\n #include <boost/bind.hpp>\n #include <boost/filesystem.hpp>\n-#include <boost/foreach.hpp>\n #include <boost/iostreams/concepts.hpp>\n #include <boost/iostreams/stream.hpp>\n #include <boost/shared_ptr.hpp>\n@@ -42,7 +41,7 @@ string HTTPPost(const string& strMsg, const map<string,string>& mapRequestHeader\n       << \"Content-Length: \" << strMsg.size() << \"\\r\\n\"\n       << \"Connection: close\\r\\n\"\n       << \"Accept: application/json\\r\\n\";\n-    BOOST_FOREACH(const PAIRTYPE(string, string)& item, mapRequestHeaders)\n+    for (const PAIRTYPE(string, string)& item : mapRequestHeaders)\n         s << item.first << \": \" << item.second << \"\\r\\n\";\n     s << \"\\r\\n\" << strMsg;\n "
      },
      {
        "sha": "0b6ba5b1b8158067499bea2862bb143eb69a2fa9",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -44,7 +44,7 @@ void ScriptPubKeyToJSON(const CScript& scriptPubKey, Object& out, bool fIncludeH\n     out.push_back(Pair(\"type\", GetTxnOutputType(type)));\n \n     Array a;\n-    BOOST_FOREACH(const CTxDestination& addr, addresses)\n+    for (const CTxDestination& addr : addresses)\n         a.push_back(CBitcoinAddress(addr).ToString());\n     out.push_back(Pair(\"addresses\", a));\n }\n@@ -55,7 +55,7 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, Object& entry)\n     entry.push_back(Pair(\"version\", tx.nVersion));\n     entry.push_back(Pair(\"locktime\", (boost::int64_t)tx.nLockTime));\n     Array vin;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    for (const CTxIn& txin : tx.vin)\n     {\n         Object in;\n         if (tx.IsCoinBase())\n@@ -246,7 +246,7 @@ Value listunspent(const Array& params, bool fHelp)\n     if (params.size() > 2)\n     {\n         Array inputs = params[2].get_array();\n-        BOOST_FOREACH(Value& input, inputs)\n+        for (Value& input : inputs)\n         {\n             CBitcoinAddress address(input.get_str());\n             if (!address.IsValid())\n@@ -261,7 +261,7 @@ Value listunspent(const Array& params, bool fHelp)\n     vector<COutput> vecOutputs;\n     assert(pwalletMain != NULL);\n     pwalletMain->AvailableCoins(vecOutputs, false);\n-    BOOST_FOREACH(const COutput& out, vecOutputs)\n+    for (const COutput& out : vecOutputs)\n     {\n         if (out.nDepth < nMinDepth || out.nDepth > nMaxDepth)\n             continue;\n@@ -349,7 +349,7 @@ Value createrawtransaction(const Array& params, bool fHelp)\n \n     CTransaction rawTx;\n \n-    BOOST_FOREACH(const Value& input, inputs)\n+    for (const Value& input : inputs)\n     {\n         const Object& o = input.get_obj();\n \n@@ -367,7 +367,7 @@ Value createrawtransaction(const Array& params, bool fHelp)\n     }\n \n     set<CBitcoinAddress> setAddress;\n-    BOOST_FOREACH(const Pair& s, sendTo)\n+    for (const Pair& s : sendTo)\n     {\n         CBitcoinAddress address(s.name_);\n         if (!address.IsValid())\n@@ -587,7 +587,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n         CCoinsViewMemPool viewMempool(viewChain, mempool);\n         view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n \n-        BOOST_FOREACH(const CTxIn& txin, mergedTx.vin) {\n+        for (const CTxIn& txin : mergedTx.vin) {\n             const uint256& prevHash = txin.prevout.hash;\n             CCoins coins;\n             view.GetCoins(prevHash, coins); // this is certainly allowed to fail\n@@ -602,7 +602,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n     {\n         fGivenKeys = true;\n         Array keys = params[2].get_array();\n-        BOOST_FOREACH(Value k, keys)\n+        for (Value k : keys)\n         {\n             CBitcoinSecret vchSecret;\n             bool fGood = vchSecret.SetString(k.get_str());\n@@ -621,7 +621,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n     if (params.size() > 1 && params[1].type() != null_type)\n     {\n         Array prevTxs = params[1].get_array();\n-        BOOST_FOREACH(Value& p, prevTxs)\n+        for (Value& p : prevTxs)\n         {\n             if (p.type() != obj_type)\n                 throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"expected object with {\\\"txid'\\\",\\\"vout\\\",\\\"scriptPubKey\\\"}\");\n@@ -715,7 +715,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n             SignSignature(keystore, prevPubKey, mergedTx, i, nHashType);\n \n         // ... and merge in other signatures:\n-        BOOST_FOREACH(const CTransaction& txv, txVariants)\n+        for (const CTransaction& txv : txVariants)\n         {\n             txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n         }"
      },
      {
        "sha": "d38f3848a8f4ad227a0d6419d3744d153b7642b2",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -19,7 +19,6 @@\n #include <boost/asio/ssl.hpp>\n #include <boost/bind.hpp>\n #include <boost/filesystem.hpp>\n-#include <boost/foreach.hpp>\n #include <boost/iostreams/concepts.hpp>\n #include <boost/iostreams/stream.hpp>\n #include <boost/shared_ptr.hpp>\n@@ -44,7 +43,7 @@ void RPCTypeCheck(const Array& params,\n                   bool fAllowNull)\n {\n     unsigned int i = 0;\n-    BOOST_FOREACH(Value_type t, typesExpected)\n+    for (Value_type t : typesExpected)\n     {\n         if (params.size() <= i)\n             break;\n@@ -64,7 +63,7 @@ void RPCTypeCheck(const Object& o,\n                   const map<string, Value_type>& typesExpected,\n                   bool fAllowNull)\n {\n-    BOOST_FOREACH(const PAIRTYPE(string, Value_type)& t, typesExpected)\n+    for (const PAIRTYPE(string, Value_type)& t : typesExpected)\n     {\n         const Value& v = find_value(o, t.first);\n         if (!fAllowNull && v.type() == null_type)\n@@ -373,7 +372,7 @@ bool ClientAllowed(const boost::asio::ip::address& address)\n \n     const string strAddress = address.to_string();\n     const vector<string>& vAllow = mapMultiArgs[\"-rpcallowip\"];\n-    BOOST_FOREACH(string strAllow, vAllow)\n+    for (string strAllow : vAllow)\n         if (WildcardMatch(strAddress, strAllow))\n             return true;\n     return false;"
      },
      {
        "sha": "d4e535e6bc02453fec22524456d22bfb2777fdd8",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 23,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -52,12 +52,12 @@ void WalletTxToJSON(const CWalletTx& wtx, Object& entry)\n     uint256 hash = wtx.GetHash();\n     entry.push_back(Pair(\"txid\", hash.GetHex()));\n     Array conflicts;\n-    BOOST_FOREACH(const uint256& conflict, wtx.GetConflicts())\n+    for (const uint256& conflict : wtx.GetConflicts())\n         conflicts.push_back(conflict.GetHex());\n     entry.push_back(Pair(\"walletconflicts\", conflicts));\n     entry.push_back(Pair(\"time\", (boost::int64_t)wtx.GetTxTime()));\n     entry.push_back(Pair(\"timereceived\", (boost::int64_t)wtx.nTimeReceived));\n-    BOOST_FOREACH(const PAIRTYPE(string,string)& item, wtx.mapValue)\n+    for (const PAIRTYPE(string,string)& item : wtx.mapValue)\n         entry.push_back(Pair(item.first, item.second));\n }\n \n@@ -127,7 +127,7 @@ CBitcoinAddress GetAccountAddress(string strAccount, bool bForceNew=false)\n              ++it)\n         {\n             const CWalletTx& wtx = (*it).second;\n-            BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n+            for (const CTxOut& txout : wtx.vout)\n                 if (txout.scriptPubKey == scriptPubKey)\n                     bKeyUsed = true;\n         }\n@@ -290,7 +290,7 @@ Value getaddressesbyaccount(const Array& params, bool fHelp)\n \n     // Find all addresses that have the given account\n     Array ret;\n-    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item, pwalletMain->mapAddressBook)\n+    for (const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item : pwalletMain->mapAddressBook)\n     {\n         const CBitcoinAddress& address = item.first;\n         const string& strName = item.second.name;\n@@ -373,10 +373,10 @@ Value listaddressgroupings(const Array& params, bool fHelp)\n \n     Array jsonGroupings;\n     map<CTxDestination, int64_t> balances = pwalletMain->GetAddressBalances();\n-    BOOST_FOREACH(set<CTxDestination> grouping, pwalletMain->GetAddressGroupings())\n+    for (set<CTxDestination> grouping : pwalletMain->GetAddressGroupings())\n     {\n         Array jsonGrouping;\n-        BOOST_FOREACH(CTxDestination address, grouping)\n+        for (CTxDestination address : grouping)\n         {\n             Array addressInfo;\n             addressInfo.push_back(CBitcoinAddress(address).ToString());\n@@ -488,7 +488,7 @@ Value getreceivedbyaddress(const Array& params, bool fHelp)\n         if (wtx.IsCoinBase() || !IsFinalTx(wtx))\n             continue;\n \n-        BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n+        for (const CTxOut& txout : wtx.vout)\n             if (txout.scriptPubKey == scriptPubKey)\n                 if (wtx.GetDepthInMainChain() >= nMinDepth)\n                     nAmount += txout.nValue;\n@@ -537,7 +537,7 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n         if (wtx.IsCoinBase() || !IsFinalTx(wtx))\n             continue;\n \n-        BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n+        for (const CTxOut& txout : wtx.vout)\n         {\n             CTxDestination address;\n             if (ExtractDestination(txout.scriptPubKey, address) && IsMine(*pwalletMain, address) && setAddress.count(address))\n@@ -634,10 +634,10 @@ Value getbalance(const Array& params, bool fHelp)\n             wtx.GetAmounts(listReceived, listSent, allFee, strSentAccount);\n             if (wtx.GetDepthInMainChain() >= nMinDepth)\n             {\n-                BOOST_FOREACH(const PAIRTYPE(CTxDestination,int64_t)& r, listReceived)\n+                for (const PAIRTYPE(CTxDestination,int64_t)& r : listReceived)\n                     nBalance += r.second;\n             }\n-            BOOST_FOREACH(const PAIRTYPE(CTxDestination,int64_t)& r, listSent)\n+            for (const PAIRTYPE(CTxDestination,int64_t)& r : listSent)\n                 nBalance -= r.second;\n             nBalance -= allFee;\n         }\n@@ -830,7 +830,7 @@ Value sendmany(const Array& params, bool fHelp)\n     vector<pair<CScript, int64_t> > vecSend;\n \n     int64_t totalAmount = 0;\n-    BOOST_FOREACH(const Pair& s, sendTo)\n+    for (const Pair& s : sendTo)\n     {\n         CBitcoinAddress address(s.name_);\n         if (!address.IsValid())\n@@ -952,7 +952,7 @@ Value ListReceived(const Array& params, bool fByAccounts)\n         if (nDepth < nMinDepth)\n             continue;\n \n-        BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n+        for (const CTxOut& txout : wtx.vout)\n         {\n             CTxDestination address;\n             if (!ExtractDestination(txout.scriptPubKey, address) || !IsMine(*pwalletMain, address))\n@@ -968,7 +968,7 @@ Value ListReceived(const Array& params, bool fByAccounts)\n     // Reply\n     Array ret;\n     map<string, tallyitem> mapAccountTally;\n-    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item, pwalletMain->mapAddressBook)\n+    for (const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item : pwalletMain->mapAddressBook)\n     {\n         const CBitcoinAddress& address = item.first;\n         const string& strAccount = item.second.name;\n@@ -1000,7 +1000,7 @@ Value ListReceived(const Array& params, bool fByAccounts)\n             Array transactions;\n             if (it != mapTally.end())\n             {\n-                BOOST_FOREACH(const uint256& item, (*it).second.txids)\n+                for (const uint256& item : (*it).second.txids)\n                 {\n                     transactions.push_back(item.GetHex());\n                 }\n@@ -1107,7 +1107,7 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n     // Sent\n     if ((!listSent.empty() || nFee != 0) && (fAllAccounts || strAccount == strSentAccount))\n     {\n-        BOOST_FOREACH(const PAIRTYPE(CTxDestination, int64_t)& s, listSent)\n+        for (const PAIRTYPE(CTxDestination, int64_t)& s : listSent)\n         {\n             Object entry;\n             entry.push_back(Pair(\"account\", strSentAccount));\n@@ -1124,7 +1124,7 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n     // Received\n     if (listReceived.size() > 0 && wtx.GetDepthInMainChain() >= nMinDepth)\n     {\n-        BOOST_FOREACH(const PAIRTYPE(CTxDestination, int64_t)& r, listReceived)\n+        for (const PAIRTYPE(CTxDestination, int64_t)& r : listReceived)\n         {\n             string account;\n             if (pwalletMain->mapAddressBook.count(r.first))\n@@ -1310,7 +1310,7 @@ Value listaccounts(const Array& params, bool fHelp)\n         nMinDepth = params[0].get_int();\n \n     map<string, int64_t> mapAccountBalances;\n-    BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& entry, pwalletMain->mapAddressBook) {\n+    for (const PAIRTYPE(CTxDestination, CAddressBookData)& entry : pwalletMain->mapAddressBook) {\n         if (IsMine(*pwalletMain, entry.first)) // This address belongs to me\n             mapAccountBalances[entry.second.name] = 0;\n     }\n@@ -1327,11 +1327,11 @@ Value listaccounts(const Array& params, bool fHelp)\n             continue;\n         wtx.GetAmounts(listReceived, listSent, nFee, strSentAccount);\n         mapAccountBalances[strSentAccount] -= nFee;\n-        BOOST_FOREACH(const PAIRTYPE(CTxDestination, int64_t)& s, listSent)\n+        for (const PAIRTYPE(CTxDestination, int64_t)& s : listSent)\n             mapAccountBalances[strSentAccount] -= s.second;\n         if (nDepth >= nMinDepth)\n         {\n-            BOOST_FOREACH(const PAIRTYPE(CTxDestination, int64_t)& r, listReceived)\n+            for (const PAIRTYPE(CTxDestination, int64_t)& r : listReceived)\n                 if (pwalletMain->mapAddressBook.count(r.first))\n                     mapAccountBalances[pwalletMain->mapAddressBook[r.first].name] += r.second;\n                 else\n@@ -1341,11 +1341,11 @@ Value listaccounts(const Array& params, bool fHelp)\n \n     list<CAccountingEntry> acentries;\n     CWalletDB(pwalletMain->strWalletFile).ListAccountCreditDebit(\"*\", acentries);\n-    BOOST_FOREACH(const CAccountingEntry& entry, acentries)\n+    for (const CAccountingEntry& entry : acentries)\n         mapAccountBalances[entry.strAccount] += entry.nCreditDebit;\n \n     Object ret;\n-    BOOST_FOREACH(const PAIRTYPE(string, int64_t)& accountBalance, mapAccountBalances) {\n+    for (const PAIRTYPE(string, int64_t)& accountBalance : mapAccountBalances) {\n         ret.push_back(Pair(accountBalance.first, ValueFromAmount(accountBalance.second)));\n     }\n     return ret;\n@@ -1791,7 +1791,7 @@ Value lockunspent(const Array& params, bool fHelp)\n     }\n \n     Array outputs = params[1].get_array();\n-    BOOST_FOREACH(Value& output, outputs)\n+    for (Value& output : outputs)\n     {\n         if (output.type() != obj_type)\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected object\");\n@@ -1851,7 +1851,7 @@ Value listlockunspent(const Array& params, bool fHelp)\n \n     Array ret;\n \n-    BOOST_FOREACH(COutPoint &outpt, vOutpts) {\n+    for (COutPoint &outpt : vOutpts) {\n         Object o;\n \n         o.push_back(Pair(\"txid\", outpt.hash.GetHex()));"
      },
      {
        "sha": "78bee81122b4c666005e24d17b0ff4576f6831de",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -14,7 +14,6 @@\n #include \"uint256.h\"\n #include \"util.h\"\n \n-#include <boost/foreach.hpp>\n #include <boost/tuple/tuple.hpp>\n #include <boost/tuple/tuple_comparison.hpp>\n \n@@ -1226,7 +1225,7 @@ bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, vector<vector<unsi\n \n     // Scan templates\n     const CScript& script1 = scriptPubKey;\n-    BOOST_FOREACH(const PAIRTYPE(txnouttype, CScript)& tplate, mTemplates)\n+    for (const PAIRTYPE(txnouttype, CScript)& tplate : mTemplates)\n     {\n         const CScript& script2 = tplate.second;\n         vSolutionsRet.clear();\n@@ -1435,7 +1434,7 @@ bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType)\n unsigned int HaveKeys(const vector<valtype>& pubkeys, const CKeyStore& keystore)\n {\n     unsigned int nResult = 0;\n-    BOOST_FOREACH(const valtype& pubkey, pubkeys)\n+    for (const valtype& pubkey : pubkeys)\n     {\n         CKeyID keyID = CPubKey(pubkey).GetID();\n         if (keystore.HaveKey(keyID))\n@@ -1573,7 +1572,7 @@ class CAffectedKeysVisitor : public boost::static_visitor<void> {\n         std::vector<CTxDestination> vDest;\n         int nRequired;\n         if (ExtractDestinations(script, type, vDest, nRequired)) {\n-            BOOST_FOREACH(const CTxDestination &dest, vDest)\n+            for (const CTxDestination &dest : vDest)\n                 boost::apply_visitor(*this, dest);\n         }\n     }\n@@ -1686,7 +1685,7 @@ bool SignSignature(const CKeyStore &keystore, const CTransaction& txFrom, CTrans\n static CScript PushAll(const vector<valtype>& values)\n {\n     CScript result;\n-    BOOST_FOREACH(const valtype& v, values)\n+    for (const valtype& v : values)\n         result << v;\n     return result;\n }\n@@ -1697,12 +1696,12 @@ static CScript CombineMultisig(CScript scriptPubKey, const CTransaction& txTo, u\n {\n     // Combine all the signatures we've got:\n     set<valtype> allsigs;\n-    BOOST_FOREACH(const valtype& v, sigs1)\n+    for (const valtype& v : sigs1)\n     {\n         if (!v.empty())\n             allsigs.insert(v);\n     }\n-    BOOST_FOREACH(const valtype& v, sigs2)\n+    for (const valtype& v : sigs2)\n     {\n         if (!v.empty())\n             allsigs.insert(v);\n@@ -1713,7 +1712,7 @@ static CScript CombineMultisig(CScript scriptPubKey, const CTransaction& txTo, u\n     unsigned int nSigsRequired = vSolutions.front()[0];\n     unsigned int nPubKeys = vSolutions.size()-2;\n     map<valtype, valtype> sigs;\n-    BOOST_FOREACH(const valtype& sig, allsigs)\n+    for (const valtype& sig : allsigs)\n     {\n         for (unsigned int i = 0; i < nPubKeys; i++)\n         {\n@@ -1943,7 +1942,7 @@ void CScript::SetMultisig(int nRequired, const std::vector<CPubKey>& keys)\n     this->clear();\n \n     *this << EncodeOP_N(nRequired);\n-    BOOST_FOREACH(const CPubKey& key, keys)\n+    for (const CPubKey& key : keys)\n         *this << key;\n     *this << EncodeOP_N(keys.size()) << OP_CHECKMULTISIG;\n }"
      },
      {
        "sha": "7f62384101a932d2d6a8a5cc3eb28adf676c55fd",
        "filename": "src/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.h?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -15,7 +15,6 @@\n #include <string>\n #include <vector>\n \n-#include <boost/foreach.hpp>\n #include <boost/variant.hpp>\n \n class CCoins;\n@@ -233,7 +232,7 @@ inline std::string ValueString(const std::vector<unsigned char>& vch)\n inline std::string StackString(const std::vector<std::vector<unsigned char> >& vStack)\n {\n     std::string str;\n-    BOOST_FOREACH(const std::vector<unsigned char>& vch, vStack)\n+    for (const std::vector<unsigned char>& vch : vStack)\n     {\n         if (!str.empty())\n             str += \" \";"
      },
      {
        "sha": "cfbfbbbf1a584ef7ee8ee63f1ccae59960b0f036",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -6,8 +6,6 @@\n \n #include \"util.h\"\n \n-#include <boost/foreach.hpp>\n-\n #ifdef DEBUG_LOCKCONTENTION\n void PrintLockContention(const char* pszName, const char* pszFile, int nLine)\n {\n@@ -61,14 +59,14 @@ static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch,\n {\n     LogPrintf(\"POTENTIAL DEADLOCK DETECTED\\n\");\n     LogPrintf(\"Previous lock order was:\\n\");\n-    BOOST_FOREACH(const PAIRTYPE(void*, CLockLocation)& i, s2)\n+    for (const PAIRTYPE(void*, CLockLocation)& i : s2)\n     {\n         if (i.first == mismatch.first) LogPrintf(\" (1)\");\n         if (i.first == mismatch.second) LogPrintf(\" (2)\");\n         LogPrintf(\" %s\\n\", i.second.ToString());\n     }\n     LogPrintf(\"Current lock order is:\\n\");\n-    BOOST_FOREACH(const PAIRTYPE(void*, CLockLocation)& i, s1)\n+    for (const PAIRTYPE(void*, CLockLocation)& i : s1)\n     {\n         if (i.first == mismatch.first) LogPrintf(\" (1)\");\n         if (i.first == mismatch.second) LogPrintf(\" (2)\");\n@@ -87,7 +85,7 @@ static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)\n     (*lockstack).push_back(std::make_pair(c, locklocation));\n \n     if (!fTry) {\n-        BOOST_FOREACH(const PAIRTYPE(void*, CLockLocation)& i, (*lockstack)) {\n+        for (const PAIRTYPE(void*, CLockLocation)& i : (*lockstack)) {\n             if (i.first == c) break;\n \n             std::pair<void*, void*> p1 = std::make_pair(i.first, c);\n@@ -131,14 +129,14 @@ void LeaveCritical()\n std::string LocksHeld()\n {\n     std::string result;\n-    BOOST_FOREACH(const PAIRTYPE(void*, CLockLocation)&i, *lockstack)\n+    for (const PAIRTYPE(void*, CLockLocation)&i : *lockstack)\n         result += i.second.ToString() + std::string(\"\\n\");\n     return result;\n }\n \n void AssertLockHeldInternal(const char *pszName, const char* pszFile, int nLine, void *cs)\n {\n-    BOOST_FOREACH(const PAIRTYPE(void*, CLockLocation)&i, *lockstack)\n+    for (const PAIRTYPE(void*, CLockLocation)&i : *lockstack)\n         if (i.first == cs) return;\n     fprintf(stderr, \"Assertion failed: lock %s not held in %s:%i; locks held:\\n%s\",\n             pszName, pszFile, nLine, LocksHeld().c_str());"
      },
      {
        "sha": "c8dc2b11fe1d83665af966bd592f76831fe1d8a1",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -18,7 +18,6 @@\n #include <stdint.h>\n \n #include <boost/date_time/posix_time/posix_time_types.hpp>\n-#include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n // Tests this internal-to-main.cpp method:\n@@ -124,9 +123,9 @@ BOOST_AUTO_TEST_CASE(DoS_checknbits)\n \n     // Make sure CheckNBits considers every combination of block-chain-lock-in-points\n     // \"sane\":\n-    BOOST_FOREACH(const BlockData::value_type& i, chainData)\n+    for (const BlockData::value_type& i : chainData)\n     {\n-        BOOST_FOREACH(const BlockData::value_type& j, chainData)\n+        for (const BlockData::value_type& j : chainData)\n         {\n             BOOST_CHECK(CheckNBits(i.second, i.first, j.second, j.first));\n         }"
      },
      {
        "sha": "237e301051693280e3b85b0bef52cad2b7dab428",
        "filename": "src/test/accounting_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/accounting_tests.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -7,7 +7,6 @@\n \n #include <stdint.h>\n \n-#include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n extern CWallet* pwalletMain;\n@@ -22,7 +21,7 @@ GetResults(CWalletDB& walletdb, std::map<int64_t, CAccountingEntry>& results)\n     results.clear();\n     BOOST_CHECK(walletdb.ReorderTransactions(pwalletMain) == DB_LOAD_OK);\n     walletdb.ListAccountCreditDebit(\"\", aes);\n-    BOOST_FOREACH(CAccountingEntry& ae, aes)\n+    for (CAccountingEntry& ae : aes)\n     {\n         results[ae.nOrderPos] = ae;\n     }"
      },
      {
        "sha": "49dffbc2863e0b1adb703c7884ac9612228c4959",
        "filename": "src/test/alert_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/test/alert_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/test/alert_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/alert_tests.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -16,7 +16,6 @@\n #include <fstream>\n \n #include <boost/filesystem/operations.hpp>\n-#include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n #if 0\n@@ -116,7 +115,7 @@ BOOST_AUTO_TEST_CASE(AlertApplies)\n {\n     SetMockTime(11);\n \n-    BOOST_FOREACH(const CAlert& alert, alerts)\n+    for (const CAlert& alert : alerts)\n     {\n         BOOST_CHECK(alert.CheckSignature());\n     }\n@@ -164,7 +163,7 @@ BOOST_AUTO_TEST_CASE(AlertNotify)\n \n     mapArgs[\"-alertnotify\"] = std::string(\"echo %s >> \") + temp.string();\n \n-    BOOST_FOREACH(CAlert alert, alerts)\n+    for (CAlert alert : alerts)\n         alert.ProcessAlert(false);\n \n     std::vector<std::string> r = read_lines(temp);"
      },
      {
        "sha": "26338ff629a7a628394bb97d54fb91a75118d1fa",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -13,7 +13,6 @@\n #include \"uint256.h\"\n #include \"util.h\"\n \n-#include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n #include \"json/json_spirit_reader_template.h\"\n #include \"json/json_spirit_utils.h\"\n@@ -28,7 +27,7 @@ BOOST_AUTO_TEST_SUITE(base58_tests)\n BOOST_AUTO_TEST_CASE(base58_EncodeBase58)\n {\n     Array tests = read_json(std::string(json_tests::base58_encode_decode, json_tests::base58_encode_decode + sizeof(json_tests::base58_encode_decode)));\n-    BOOST_FOREACH(Value& tv, tests)\n+    for (Value& tv : tests)\n     {\n         Array test = tv.get_array();\n         std::string strTest = write_string(tv, false);\n@@ -51,7 +50,7 @@ BOOST_AUTO_TEST_CASE(base58_DecodeBase58)\n     Array tests = read_json(std::string(json_tests::base58_encode_decode, json_tests::base58_encode_decode + sizeof(json_tests::base58_encode_decode)));\n     std::vector<unsigned char> result;\n \n-    BOOST_FOREACH(Value& tv, tests)\n+    for (Value& tv : tests)\n     {\n         Array test = tv.get_array();\n         std::string strTest = write_string(tv, false);\n@@ -127,7 +126,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n     CBitcoinSecret secret;\n     CBitcoinAddress addr;\n \n-    BOOST_FOREACH(Value& tv, tests)\n+    for (Value& tv : tests)\n     {\n         Array test = tv.get_array();\n         std::string strTest = write_string(tv, false);\n@@ -183,7 +182,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n {\n     Array tests = read_json(std::string(json_tests::base58_keys_valid, json_tests::base58_keys_valid + sizeof(json_tests::base58_keys_valid)));\n     std::vector<unsigned char> result;\n-    BOOST_FOREACH(Value& tv, tests)\n+    for (Value& tv : tests)\n     {\n         Array test = tv.get_array();\n         std::string strTest = write_string(tv, false);\n@@ -254,7 +253,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_invalid)\n     CBitcoinSecret secret;\n     CBitcoinAddress addr;\n \n-    BOOST_FOREACH(Value& tv, tests)\n+    for (Value& tv : tests)\n     {\n         Array test = tv.get_array();\n         std::string strTest = write_string(tv, false);"
      },
      {
        "sha": "465538185b0f664848f76ff44c8e0ce8e2a76ff9",
        "filename": "src/test/bip32_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/test/bip32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/test/bip32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bip32_tests.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -82,7 +82,7 @@ void RunTest(const TestVector &test) {\n     CExtPubKey pubkey;\n     key.SetMaster(&seed[0], seed.size());\n     pubkey = key.Neuter();\n-    BOOST_FOREACH(const TestDerivation &derive, test.vDerive) {\n+    for (const TestDerivation &derive : test.vDerive) {\n         unsigned char data[74];\n         key.Encode(data);\n         pubkey.Encode(data);"
      },
      {
        "sha": "4ad8fdf175dff334b5be18a7b84563164f003606",
        "filename": "src/test/canonical_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/test/canonical_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/test/canonical_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/canonical_tests.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -13,7 +13,6 @@\n #include \"data/sig_noncanonical.json.h\"\n #include \"data/sig_canonical.json.h\"\n \n-#include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n #include \"json/json_spirit_writer_template.h\"\n #include <openssl/ecdsa.h>\n@@ -69,7 +68,7 @@ BOOST_AUTO_TEST_CASE(script_canon)\n {\n     Array tests = read_json(std::string(json_tests::sig_canonical, json_tests::sig_canonical + sizeof(json_tests::sig_canonical)));\n \n-    BOOST_FOREACH(Value &tv, tests) {\n+    for (Value &tv : tests) {\n         string test = tv.get_str();\n         if (IsHex(test)) {\n             std::vector<unsigned char> sig = ParseHex(test);\n@@ -83,7 +82,7 @@ BOOST_AUTO_TEST_CASE(script_noncanon)\n {\n     Array tests = read_json(std::string(json_tests::sig_noncanonical, json_tests::sig_noncanonical + sizeof(json_tests::sig_noncanonical)));\n \n-    BOOST_FOREACH(Value &tv, tests) {\n+    for (Value &tv : tests) {\n         string test = tv.get_str();\n         if (IsHex(test)) {\n             std::vector<unsigned char> sig = ParseHex(test);"
      },
      {
        "sha": "ee1d3576970f81e26131d67ec59559f88716de25",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -8,7 +8,6 @@\n #include <vector>\n \n #include <boost/algorithm/string.hpp>\n-#include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n BOOST_AUTO_TEST_SUITE(getarg_tests)\n@@ -23,7 +22,7 @@ static void ResetArgs(const std::string& strArg)\n \n     // Convert to char*:\n     std::vector<const char*> vecChar;\n-    BOOST_FOREACH(std::string& s, vecArg)\n+    for (std::string& s : vecArg)\n         vecChar.push_back(s.c_str());\n \n     ParseParameters(vecChar.size(), &vecChar[0]);"
      },
      {
        "sha": "1373afe67c6bd5f542caae354842b5caa694a28d",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -254,7 +254,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     chainActive.Tip()->nHeight--;\n     SetMockTime(0);\n \n-    BOOST_FOREACH(CTransaction *tx, txFirst)\n+    for (CTransaction *tx : txFirst)\n         delete tx;\n \n }"
      },
      {
        "sha": "4027cd60d0c572c84e1c767ce560ceadab88c5fc",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -9,7 +9,6 @@\n #include \"uint256.h\"\n \n #include <boost/assign/std/vector.hpp>\n-#include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n using namespace std;\n@@ -28,7 +27,7 @@ sign_multisig(CScript scriptPubKey, vector<CKey> keys, CTransaction transaction,\n \n     CScript result;\n     result << OP_0; // CHECKMULTISIG bug workaround\n-    BOOST_FOREACH(const CKey &key, keys)\n+    for (const CKey &key : keys)\n     {\n         vector<unsigned char> vchSig;\n         BOOST_CHECK(key.Sign(hash, vchSig));"
      },
      {
        "sha": "f522d7f2447abada61c56ee65e436f668ea0c543",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -22,7 +22,6 @@\n #include <boost/algorithm/string/split.hpp>\n #include <boost/filesystem/operations.hpp>\n #include <boost/filesystem/path.hpp>\n-#include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n #include \"json/json_spirit_reader_template.h\"\n #include \"json/json_spirit_utils.h\"\n@@ -65,7 +64,7 @@ ParseScript(string s)\n     vector<string> words;\n     split(words, s, is_any_of(\" \\t\\n\"), token_compress_on);\n \n-    BOOST_FOREACH(string w, words)\n+    for (string w : words)\n     {\n         if (all(w, is_digit()) ||\n             (starts_with(w, \"-\") && all(string(w.begin()+1, w.end()), is_digit())))\n@@ -126,7 +125,7 @@ BOOST_AUTO_TEST_CASE(script_valid)\n     // scripts.\n     Array tests = read_json(std::string(json_tests::script_valid, json_tests::script_valid + sizeof(json_tests::script_valid)));\n \n-    BOOST_FOREACH(Value& tv, tests)\n+    for (Value& tv : tests)\n     {\n         Array test = tv.get_array();\n         string strTest = write_string(tv, false);\n@@ -150,7 +149,7 @@ BOOST_AUTO_TEST_CASE(script_invalid)\n     // Scripts that should evaluate as invalid\n     Array tests = read_json(std::string(json_tests::script_invalid, json_tests::script_invalid + sizeof(json_tests::script_invalid)));\n \n-    BOOST_FOREACH(Value& tv, tests)\n+    for (Value& tv : tests)\n     {\n         Array test = tv.get_array();\n         string strTest = write_string(tv, false);\n@@ -209,7 +208,7 @@ sign_multisig(CScript scriptPubKey, std::vector<CKey> keys, CTransaction transac\n     // and vice-versa)\n     //\n     result << OP_0;\n-    BOOST_FOREACH(const CKey &key, keys)\n+    for (const CKey &key : keys)\n     {\n         vector<unsigned char> vchSig;\n         BOOST_CHECK(key.Sign(hash, vchSig));"
      },
      {
        "sha": "d89e0af330bdc6662f95e4c50e2a245f3c77626c",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -166,7 +166,7 @@ BOOST_AUTO_TEST_CASE(sighash_from_data)\n {\n     Array tests = read_json(std::string(json_tests::sighash, json_tests::sighash + sizeof(json_tests::sighash)));\n \n-    BOOST_FOREACH(Value& tv, tests)\n+    for (Value& tv : tests)\n     {\n         Array test = tv.get_array();\n         std::string strTest = write_string(tv, false);"
      },
      {
        "sha": "b0f66480590a888f9943a555534a7cd9d4000562",
        "filename": "src/test/sigopcount_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/test/sigopcount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/test/sigopcount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sigopcount_tests.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -8,7 +8,6 @@\n \n #include <vector>\n \n-#include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n using namespace std;"
      },
      {
        "sha": "0049bc5beb063636710defd30fca60eab04fa774",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -34,7 +34,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n     // ... where all scripts are stringified scripts.\n     Array tests = read_json(std::string(json_tests::tx_valid, json_tests::tx_valid + sizeof(json_tests::tx_valid)));\n \n-    BOOST_FOREACH(Value& tv, tests)\n+    for (Value& tv : tests)\n     {\n         Array test = tv.get_array();\n         string strTest = write_string(tv, false);\n@@ -49,7 +49,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n             map<COutPoint, CScript> mapprevOutScriptPubKeys;\n             Array inputs = test[0].get_array();\n             bool fValid = true;\n-            BOOST_FOREACH(Value& input, inputs)\n+            for (Value& input : inputs)\n             {\n                 if (input.type() != array_type)\n                 {\n@@ -103,7 +103,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n     // ... where all scripts are stringified scripts.\n     Array tests = read_json(std::string(json_tests::tx_invalid, json_tests::tx_invalid + sizeof(json_tests::tx_invalid)));\n \n-    BOOST_FOREACH(Value& tv, tests)\n+    for (Value& tv : tests)\n     {\n         Array test = tv.get_array();\n         string strTest = write_string(tv, false);\n@@ -118,7 +118,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n             map<COutPoint, CScript> mapprevOutScriptPubKeys;\n             Array inputs = test[0].get_array();\n             bool fValid = true;\n-            BOOST_FOREACH(Value& input, inputs)\n+            for (Value& input : inputs)\n             {\n                 if (input.type() != array_type)\n                 {"
      },
      {
        "sha": "4bd14a64fe23a5bef63fe5c486280d5e37a9780b",
        "filename": "src/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/wallet_tests.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -9,7 +9,6 @@\n #include <utility>\n #include <vector>\n \n-#include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n // how many times to run all the tests to have a chance to catch errors that only show up with particular random shuffles\n@@ -50,7 +49,7 @@ static void add_coin(int64_t nValue, int nAge = 6*24, bool fIsFromMe = false, in\n \n static void empty_wallet(void)\n {\n-    BOOST_FOREACH(COutput output, vCoins)\n+    for (COutput output : vCoins)\n         delete output.tx;\n     vCoins.clear();\n }"
      },
      {
        "sha": "ec87892f935d344ad0104975c895624eb9705ddc",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -103,7 +103,7 @@ void CTxMemPool::remove(const CTransaction &tx, std::list<CTransaction>& removed\n         if (mapTx.count(hash))\n         {\n             removed.push_front(tx);\n-            BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+            for (const CTxIn& txin : tx.vin)\n                 mapNextTx.erase(txin.prevout);\n             mapTx.erase(hash);\n             nTransactionsUpdated++;\n@@ -116,7 +116,7 @@ void CTxMemPool::removeConflicts(const CTransaction &tx, std::list<CTransaction>\n     // Remove transactions which depend on inputs of tx, recursively\n     list<CTransaction> result;\n     LOCK(cs);\n-    BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n+    for (const CTxIn &txin : tx.vin) {\n         std::map<COutPoint, CInPoint>::iterator it = mapNextTx.find(txin.prevout);\n         if (it != mapNextTx.end()) {\n             const CTransaction &txConflict = *it->second.ptx;\n@@ -147,7 +147,7 @@ void CTxMemPool::check(CCoinsViewCache *pcoins) const\n     for (std::map<uint256, CTxMemPoolEntry>::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         unsigned int i = 0;\n         const CTransaction& tx = it->second.GetTx();\n-        BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n+        for (const CTxIn &txin : tx.vin) {\n             // Check that every mempool transaction's inputs refer to available coins, or other mempool tx's.\n             std::map<uint256, CTxMemPoolEntry>::const_iterator it2 = mapTx.find(txin.prevout.hash);\n             if (it2 != mapTx.end()) {"
      },
      {
        "sha": "2b4731b0eba5fb7de6888588e77db4615d0cc5ac",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -65,7 +65,6 @@\n #include <boost/algorithm/string/predicate.hpp> // for startswith() and endswith()\n #include <boost/filesystem.hpp>\n #include <boost/filesystem/fstream.hpp>\n-#include <boost/foreach.hpp>\n #include <boost/program_options/detail/config_file.hpp>\n #include <boost/program_options/parsers.hpp>\n #include <openssl/crypto.h>\n@@ -426,7 +425,7 @@ const signed char p_util_hexdigit[256] =\n \n bool IsHex(const string& str)\n {\n-    BOOST_FOREACH(char c, str)\n+    for (char c : str)\n     {\n         if (HexDigit(c) < 0)\n             return false;\n@@ -502,7 +501,7 @@ void ParseParameters(int argc, const char* const argv[])\n     }\n \n     // New 0.6 features:\n-    BOOST_FOREACH(const PAIRTYPE(string,string)& entry, mapArgs)\n+    for (const PAIRTYPE(string,string)& entry : mapArgs)\n     {\n         string name = entry.first;\n \n@@ -1288,7 +1287,7 @@ void AddTimeData(const CNetAddr& ip, int64_t nTime)\n             {\n                 // If nobody has a time different than ours but within 5 minutes of ours, give a warning\n                 bool fMatch = false;\n-                BOOST_FOREACH(int64_t nOffset, vSorted)\n+                for (int64_t nOffset : vSorted)\n                     if (nOffset != 0 && abs64(nOffset) < 5 * 60)\n                         fMatch = true;\n \n@@ -1303,7 +1302,7 @@ void AddTimeData(const CNetAddr& ip, int64_t nTime)\n             }\n         }\n         if (fDebug) {\n-            BOOST_FOREACH(int64_t n, vSorted)\n+            for (int64_t n : vSorted)\n                 LogPrintf(\"%+d  \", n);\n             LogPrintf(\"|  \");\n         }"
      },
      {
        "sha": "c4419497be63fbcdf8d511559c5047ba40ac8fd3",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 38,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -135,7 +135,7 @@ bool CWallet::Unlock(const SecureString& strWalletPassphrase)\n \n     {\n         LOCK(cs_wallet);\n-        BOOST_FOREACH(const MasterKeyMap::value_type& pMasterKey, mapMasterKeys)\n+        for (const MasterKeyMap::value_type& pMasterKey : mapMasterKeys)\n         {\n             if(!crypter.SetKeyFromPassphrase(strWalletPassphrase, pMasterKey.second.vchSalt, pMasterKey.second.nDeriveIterations, pMasterKey.second.nDerivationMethod))\n                 return false;\n@@ -158,7 +158,7 @@ bool CWallet::ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase,\n \n         CCrypter crypter;\n         CKeyingMaterial vMasterKey;\n-        BOOST_FOREACH(MasterKeyMap::value_type& pMasterKey, mapMasterKeys)\n+        for (MasterKeyMap::value_type& pMasterKey : mapMasterKeys)\n         {\n             if(!crypter.SetKeyFromPassphrase(strOldWalletPassphrase, pMasterKey.second.vchSalt, pMasterKey.second.nDeriveIterations, pMasterKey.second.nDerivationMethod))\n                 return false;\n@@ -251,7 +251,7 @@ set<uint256> CWallet::GetConflicts(const uint256& txid) const\n \n     std::pair<TxSpends::const_iterator, TxSpends::const_iterator> range;\n \n-    BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n+    for (const CTxIn& txin : wtx.vin)\n     {\n         if (mapTxSpends.count(txin.prevout) <= 1)\n             continue;  // No conflict if zero or one spends\n@@ -333,7 +333,7 @@ void CWallet::AddToSpends(const uint256& wtxid)\n     if (thisTx.IsCoinBase()) // Coinbases don't spend anything!\n         return;\n \n-    BOOST_FOREACH(const CTxIn& txin, thisTx.vin)\n+    for (const CTxIn& txin : thisTx.vin)\n         AddToSpends(txin.prevout, wtxid);\n }\n \n@@ -447,7 +447,7 @@ CWallet::TxItems CWallet::OrderedTxItems(std::list<CAccountingEntry>& acentries,\n     }\n     acentries.clear();\n     walletdb.ListAccountCreditDebit(strAccount, acentries);\n-    BOOST_FOREACH(CAccountingEntry& entry, acentries)\n+    for (CAccountingEntry& entry : acentries)\n     {\n         txOrdered.insert(make_pair(entry.nOrderPos, TxPair((CWalletTx*)0, &entry)));\n     }\n@@ -459,7 +459,7 @@ void CWallet::MarkDirty()\n {\n     {\n         LOCK(cs_wallet);\n-        BOOST_FOREACH(PAIRTYPE(const uint256, CWalletTx)& item, mapWallet)\n+        for (PAIRTYPE(const uint256, CWalletTx)& item : mapWallet)\n             item.second.MarkDirty();\n     }\n }\n@@ -613,7 +613,7 @@ void CWallet::SyncTransaction(const uint256 &hash, const CTransaction& tx, const\n     // If a transaction changes 'conflicted' state, that changes the balance\n     // available of the outputs it spends. So force those to be\n     // recomputed, also:\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    for (const CTxIn& txin : tx.vin)\n     {\n         if (mapWallet.count(txin.prevout.hash))\n             mapWallet[txin.prevout.hash].MarkDirty();\n@@ -747,7 +747,7 @@ void CWalletTx::GetAmounts(list<pair<CTxDestination, int64_t> >& listReceived,\n     }\n \n     // Sent/received.\n-    BOOST_FOREACH(const CTxOut& txout, vout)\n+    for (const CTxOut& txout : vout)\n     {\n         bool fIsMine;\n         // Only need to handle txouts if AT LEAST one of these is true:\n@@ -796,13 +796,13 @@ void CWalletTx::GetAccountAmounts(const string& strAccount, int64_t& nReceived,\n \n     if (strAccount == strSentAccount)\n     {\n-        BOOST_FOREACH(const PAIRTYPE(CTxDestination,int64_t)& s, listSent)\n+        for (const PAIRTYPE(CTxDestination,int64_t)& s : listSent)\n             nSent += s.second;\n         nFee = allFee;\n     }\n     {\n         LOCK(pwallet->cs_wallet);\n-        BOOST_FOREACH(const PAIRTYPE(CTxDestination,int64_t)& r, listReceived)\n+        for (const PAIRTYPE(CTxDestination,int64_t)& r : listReceived)\n         {\n             if (pwallet->mapAddressBook.count(r.first))\n             {\n@@ -851,7 +851,7 @@ int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n \n             CBlock block;\n             ReadBlockFromDisk(block, pindex);\n-            BOOST_FOREACH(CTransaction& tx, block.vtx)\n+            for (CTransaction& tx : block.vtx)\n             {\n                 if (AddToWalletIfInvolvingMe(tx.GetHash(), tx, &block, fUpdate))\n                     ret++;\n@@ -870,7 +870,7 @@ int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n void CWallet::ReacceptWalletTransactions()\n {\n     LOCK(cs_wallet);\n-    BOOST_FOREACH(PAIRTYPE(const uint256, CWalletTx)& item, mapWallet)\n+    for (PAIRTYPE(const uint256, CWalletTx)& item : mapWallet)\n     {\n         const uint256& wtxid = item.first;\n         CWalletTx& wtx = item.second;\n@@ -933,15 +933,15 @@ void CWallet::ResendWalletTransactions()\n         LOCK(cs_wallet);\n         // Sort them in chronological order\n         multimap<unsigned int, CWalletTx*> mapSorted;\n-        BOOST_FOREACH(PAIRTYPE(const uint256, CWalletTx)& item, mapWallet)\n+        for (PAIRTYPE(const uint256, CWalletTx)& item : mapWallet)\n         {\n             CWalletTx& wtx = item.second;\n             // Don't rebroadcast until it's had plenty of time that\n             // it should have gotten in already by now.\n             if (nTimeBestReceived - (int64_t)wtx.nTimeReceived > 5 * 60)\n                 mapSorted.insert(make_pair(wtx.nTimeReceived, &wtx));\n         }\n-        BOOST_FOREACH(PAIRTYPE(const unsigned int, CWalletTx*)& item, mapSorted)\n+        for (PAIRTYPE(const unsigned int, CWalletTx*)& item : mapSorted)\n         {\n             CWalletTx& wtx = *item.second;\n             wtx.RelayWalletTransaction();\n@@ -1101,7 +1101,7 @@ bool CWallet::SelectCoinsMinConf(int64_t nTargetValue, int nConfMine, int nConfT\n \n     random_shuffle(vCoins.begin(), vCoins.end(), GetRandInt);\n \n-    BOOST_FOREACH(COutput output, vCoins)\n+    for (COutput output : vCoins)\n     {\n         const CWalletTx *pcoin = output.tx;\n \n@@ -1192,7 +1192,7 @@ bool CWallet::SelectCoins(int64_t nTargetValue, set<pair<const CWalletTx*,unsign\n     // coin control -> return all selected outputs (we want all selected to go into the transaction for sure)\n     if (coinControl && coinControl->HasSelected())\n     {\n-        BOOST_FOREACH(const COutput& out, vCoins)\n+        for (const COutput& out : vCoins)\n         {\n             nValueRet += out.tx->vout[out.i].nValue;\n             setCoinsRet.insert(make_pair(out.tx, out.i));\n@@ -1212,7 +1212,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64_t> >& vecSend,\n                                 CWalletTx& wtxNew, CReserveKey& reservekey, int64_t& nFeeRet, std::string& strFailReason, const CCoinControl* coinControl)\n {\n     int64_t nValue = 0;\n-    BOOST_FOREACH (const PAIRTYPE(CScript, int64_t)& s, vecSend)\n+    for  (const PAIRTYPE(CScript, int64_t)& s : vecSend)\n     {\n         if (nValue < 0)\n         {\n@@ -1242,7 +1242,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64_t> >& vecSend,\n                 int64_t nTotalValue = nValue + nFeeRet;\n                 double dPriority = 0;\n                 // vouts to the payees\n-                BOOST_FOREACH (const PAIRTYPE(CScript, int64_t)& s, vecSend)\n+                for  (const PAIRTYPE(CScript, int64_t)& s : vecSend)\n                 {\n                     CTxOut txout(s.second, s.first);\n                     if (txout.IsDust(CTransaction::nMinRelayTxFee))\n@@ -1261,7 +1261,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64_t> >& vecSend,\n                     strFailReason = _(\"Insufficient funds\");\n                     return false;\n                 }\n-                BOOST_FOREACH(PAIRTYPE(const CWalletTx*, unsigned int) pcoin, setCoins)\n+                for (PAIRTYPE(const CWalletTx*, unsigned int) pcoin : setCoins)\n                 {\n                     int64_t nCredit = pcoin.first->vout[pcoin.second].nValue;\n                     //The priority after the next block (depth+1) is used instead of the current,\n@@ -1332,12 +1332,12 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64_t> >& vecSend,\n                     reservekey.ReturnKey();\n \n                 // Fill vin\n-                BOOST_FOREACH(const PAIRTYPE(const CWalletTx*,unsigned int)& coin, setCoins)\n+                for (const PAIRTYPE(const CWalletTx*,unsigned int)& coin : setCoins)\n                     wtxNew.vin.push_back(CTxIn(coin.first->GetHash(),coin.second));\n \n                 // Sign\n                 int nIn = 0;\n-                BOOST_FOREACH(const PAIRTYPE(const CWalletTx*,unsigned int)& coin, setCoins)\n+                for (const PAIRTYPE(const CWalletTx*,unsigned int)& coin : setCoins)\n                     if (!SignSignature(*this, *coin.first, wtxNew, nIn++))\n                     {\n                         strFailReason = _(\"Signing transaction failed\");\n@@ -1401,7 +1401,7 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n \n             // Notify that old coins are spent\n             set<CWalletTx*> setCoins;\n-            BOOST_FOREACH(const CTxIn& txin, wtxNew.vin)\n+            for (const CTxIn& txin : wtxNew.vin)\n             {\n                 CWalletTx &coin = mapWallet[txin.prevout.hash];\n                 coin.BindWallet(this);\n@@ -1557,7 +1557,7 @@ bool CWallet::DelAddressBook(const CTxDestination& address)\n         {\n             // Delete destdata tuples associated with address\n             std::string strAddress = CBitcoinAddress(address).ToString();\n-            BOOST_FOREACH(const PAIRTYPE(string, string) &item, mapAddressBook[address].destdata)\n+            for (const PAIRTYPE(string, string) &item : mapAddressBook[address].destdata)\n             {\n                 CWalletDB(strWalletFile).EraseDestData(strAddress, item.first);\n             }\n@@ -1593,7 +1593,7 @@ bool CWallet::NewKeyPool()\n     {\n         LOCK(cs_wallet);\n         CWalletDB walletdb(strWalletFile);\n-        BOOST_FOREACH(int64_t nIndex, setKeyPool)\n+        for (int64_t nIndex : setKeyPool)\n             walletdb.ErasePool(nIndex);\n         setKeyPool.clear();\n \n@@ -1742,7 +1742,7 @@ std::map<CTxDestination, int64_t> CWallet::GetAddressBalances()\n \n     {\n         LOCK(cs_wallet);\n-        BOOST_FOREACH(PAIRTYPE(uint256, CWalletTx) walletEntry, mapWallet)\n+        for (PAIRTYPE(uint256, CWalletTx) walletEntry : mapWallet)\n         {\n             CWalletTx *pcoin = &walletEntry.second;\n \n@@ -1782,15 +1782,15 @@ set< set<CTxDestination> > CWallet::GetAddressGroupings()\n     set< set<CTxDestination> > groupings;\n     set<CTxDestination> grouping;\n \n-    BOOST_FOREACH(PAIRTYPE(uint256, CWalletTx) walletEntry, mapWallet)\n+    for (PAIRTYPE(uint256, CWalletTx) walletEntry : mapWallet)\n     {\n         CWalletTx *pcoin = &walletEntry.second;\n \n         if (pcoin->vin.size() > 0)\n         {\n             bool any_mine = false;\n             // group all input addresses with each other\n-            BOOST_FOREACH(CTxIn txin, pcoin->vin)\n+            for (CTxIn txin : pcoin->vin)\n             {\n                 CTxDestination address;\n                 if(!IsMine(txin)) /* If this input isn't mine, ignore it */\n@@ -1804,7 +1804,7 @@ set< set<CTxDestination> > CWallet::GetAddressGroupings()\n             // group change with input addresses\n             if (any_mine)\n             {\n-               BOOST_FOREACH(CTxOut txout, pcoin->vout)\n+               for (CTxOut txout : pcoin->vout)\n                    if (IsChange(txout))\n                    {\n                        CTxDestination txoutAddr;\n@@ -1835,18 +1835,18 @@ set< set<CTxDestination> > CWallet::GetAddressGroupings()\n \n     set< set<CTxDestination>* > uniqueGroupings; // a set of pointers to groups of addresses\n     map< CTxDestination, set<CTxDestination>* > setmap;  // map addresses to the unique group containing it\n-    BOOST_FOREACH(set<CTxDestination> grouping, groupings)\n+    for (set<CTxDestination> grouping : groupings)\n     {\n         // make a set of all the groups hit by this new group\n         set< set<CTxDestination>* > hits;\n         map< CTxDestination, set<CTxDestination>* >::iterator it;\n-        BOOST_FOREACH(CTxDestination address, grouping)\n+        for (CTxDestination address : grouping)\n             if ((it = setmap.find(address)) != setmap.end())\n                 hits.insert((*it).second);\n \n         // merge all hit groups into a new single group and delete old groups\n         set<CTxDestination>* merged = new set<CTxDestination>(grouping);\n-        BOOST_FOREACH(set<CTxDestination>* hit, hits)\n+        for (set<CTxDestination>* hit : hits)\n         {\n             merged->insert(hit->begin(), hit->end());\n             uniqueGroupings.erase(hit);\n@@ -1855,12 +1855,12 @@ set< set<CTxDestination> > CWallet::GetAddressGroupings()\n         uniqueGroupings.insert(merged);\n \n         // update setmap\n-        BOOST_FOREACH(CTxDestination element, *merged)\n+        for (CTxDestination element : *merged)\n             setmap[element] = merged;\n     }\n \n     set< set<CTxDestination> > ret;\n-    BOOST_FOREACH(set<CTxDestination>* uniqueGrouping, uniqueGroupings)\n+    for (set<CTxDestination>* uniqueGrouping : uniqueGroupings)\n     {\n         ret.insert(*uniqueGrouping);\n         delete uniqueGrouping;\n@@ -1873,7 +1873,7 @@ set<CTxDestination> CWallet::GetAccountAddresses(string strAccount) const\n {\n     AssertLockHeld(cs_wallet); // mapWallet\n     set<CTxDestination> result;\n-    BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& item, mapAddressBook)\n+    for (const PAIRTYPE(CTxDestination, CAddressBookData)& item : mapAddressBook)\n     {\n         const CTxDestination& address = item.first;\n         const string& strName = item.second.name;\n@@ -1927,7 +1927,7 @@ void CWallet::GetAllReserveKeys(set<CKeyID>& setAddress) const\n     CWalletDB walletdb(strWalletFile);\n \n     LOCK2(cs_main, cs_wallet);\n-    BOOST_FOREACH(const int64_t& id, setKeyPool)\n+    for (const int64_t& id : setKeyPool)\n     {\n         CKeyPool keypool;\n         if (!walletdb.ReadPool(id, keypool))\n@@ -2001,7 +2001,7 @@ void CWallet::GetKeyBirthTimes(std::map<CKeyID, int64_t> &mapKeyBirth) const {\n     std::map<CKeyID, CBlockIndex*> mapKeyFirstBlock;\n     std::set<CKeyID> setKeys;\n     GetKeys(setKeys);\n-    BOOST_FOREACH(const CKeyID &keyid, setKeys) {\n+    for (const CKeyID &keyid : setKeys) {\n         if (mapKeyBirth.count(keyid) == 0)\n             mapKeyFirstBlock[keyid] = pindexMax;\n     }\n@@ -2020,10 +2020,10 @@ void CWallet::GetKeyBirthTimes(std::map<CKeyID, int64_t> &mapKeyBirth) const {\n         if (blit != mapBlockIndex.end() && chainActive.Contains(blit->second)) {\n             // ... which are already in a block\n             int nHeight = blit->second->nHeight;\n-            BOOST_FOREACH(const CTxOut &txout, wtx.vout) {\n+            for (const CTxOut &txout : wtx.vout) {\n                 // iterate over all their outputs\n                 ::ExtractAffectedKeys(*this, txout.scriptPubKey, vAffected);\n-                BOOST_FOREACH(const CKeyID &keyid, vAffected) {\n+                for (const CKeyID &keyid : vAffected) {\n                     // ... and all their affected keys\n                     std::map<CKeyID, CBlockIndex*>::iterator rit = mapKeyFirstBlock.find(keyid);\n                     if (rit != mapKeyFirstBlock.end() && nHeight < rit->second->nHeight)"
      },
      {
        "sha": "6f1b38a34b7e48cdb52bd338283371fcf6a92513",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -295,7 +295,7 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     }\n     bool IsMine(const CTransaction& tx) const\n     {\n-        BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+        for (const CTxOut& txout : tx.vout)\n             if (IsMine(txout))\n                 return true;\n         return false;\n@@ -307,7 +307,7 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     int64_t GetDebit(const CTransaction& tx) const\n     {\n         int64_t nDebit = 0;\n-        BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+        for (const CTxIn& txin : tx.vin)\n         {\n             nDebit += GetDebit(txin);\n             if (!MoneyRange(nDebit))\n@@ -318,7 +318,7 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     int64_t GetCredit(const CTransaction& tx) const\n     {\n         int64_t nCredit = 0;\n-        BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+        for (const CTxOut& txout : tx.vout)\n         {\n             nCredit += GetCredit(txout);\n             if (!MoneyRange(nCredit))\n@@ -329,7 +329,7 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     int64_t GetChange(const CTransaction& tx) const\n     {\n         int64_t nChange = 0;\n-        BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+        for (const CTxOut& txout : tx.vout)\n         {\n             nChange += GetChange(txout);\n             if (!MoneyRange(nChange))\n@@ -678,7 +678,7 @@ class CWalletTx : public CMerkleTx\n             return false;\n \n         // Trusted if all inputs are from us and are in the mempool:\n-        BOOST_FOREACH(const CTxIn& txin, vin)\n+        for (const CTxIn& txin : vin)\n         {\n             // Transactions not sent by us: not trusted\n             const CWalletTx* parent = pwallet->GetWalletTx(txin.prevout.hash);"
      },
      {
        "sha": "5513f3bd1f4334f6af4ba29a804d65722a98b60c",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a223cd974999248b588ad1cebe5ad6f50ac8c40d/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "patch": "@@ -20,7 +20,6 @@\n #include \"wallet.h\"\n \n #include <boost/filesystem.hpp>\n-#include <boost/foreach.hpp>\n \n using namespace std;\n using namespace boost;\n@@ -192,7 +191,7 @@ int64_t CWalletDB::GetAccountCreditDebit(const string& strAccount)\n     ListAccountCreditDebit(strAccount, entries);\n \n     int64_t nCreditDebit = 0;\n-    BOOST_FOREACH (const CAccountingEntry& entry, entries)\n+    for  (const CAccountingEntry& entry : entries)\n         nCreditDebit += entry.nCreditDebit;\n \n     return nCreditDebit;\n@@ -261,7 +260,7 @@ CWalletDB::ReorderTransactions(CWallet* pwallet)\n     }\n     list<CAccountingEntry> acentries;\n     ListAccountCreditDebit(\"\", acentries);\n-    BOOST_FOREACH(CAccountingEntry& entry, acentries)\n+    for (CAccountingEntry& entry : acentries)\n     {\n         txByTime.insert(make_pair(entry.nTime, TxPair((CWalletTx*)0, &entry)));\n     }\n@@ -288,7 +287,7 @@ CWalletDB::ReorderTransactions(CWallet* pwallet)\n         else\n         {\n             int64_t nOrderPosOff = 0;\n-            BOOST_FOREACH(const int64_t& nOffsetStart, nOrderPosOffsets)\n+            for (const int64_t& nOffsetStart : nOrderPosOffsets)\n             {\n                 if (nOrderPos >= nOffsetStart)\n                     ++nOrderPosOff;\n@@ -674,7 +673,7 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n     if ((wss.nKeys + wss.nCKeys) != wss.nKeyMeta)\n         pwallet->nTimeFirstKey = 1; // 0 would be considered 'no value'\n \n-    BOOST_FOREACH(uint256 hash, wss.vWalletUpgrade)\n+    for (uint256 hash : wss.vWalletUpgrade)\n         WriteTx(hash, pwallet->mapWallet[hash]);\n \n     // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n@@ -762,7 +761,7 @@ DBErrors CWalletDB::ZapWalletTx(CWallet* pwallet)\n         return err;\n \n     // erase each wallet TX\n-    BOOST_FOREACH (uint256& hash, vTxHash) {\n+    for  (uint256& hash : vTxHash) {\n         if (!EraseTx(hash))\n             return DB_CORRUPT;\n     }\n@@ -923,7 +922,7 @@ bool CWalletDB::Recover(CDBEnv& dbenv, std::string filename, bool fOnlyKeys)\n     CWalletScanState wss;\n \n     DbTxn* ptxn = dbenv.TxnBegin();\n-    BOOST_FOREACH(CDBEnv::KeyValPair& row, salvagedData)\n+    for (CDBEnv::KeyValPair& row : salvagedData)\n     {\n         if (fOnlyKeys)\n         {"
      }
    ]
  },
  {
    "sha": "2db558b27972aad5c9736e5fd0c313c81d1ca32e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZGI1NThiMjc5NzJhYWQ1Yzk3MzZlNWZkMGMzMTNjODFkMWNhMzJl",
    "commit": {
      "author": {
        "name": "Kamil Domanski",
        "email": "kdomanski@kdemail.net",
        "date": "2014-04-08T11:31:41Z"
      },
      "committer": {
        "name": "Kamil Domanski",
        "email": "kdomanski@kdemail.net",
        "date": "2014-04-08T11:31:41Z"
      },
      "message": "discarded PAIRTYPE macro in favor of std::pair",
      "tree": {
        "sha": "d304fbd244d0e48b5c88a737e63b3a3b5c4e595c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d304fbd244d0e48b5c88a737e63b3a3b5c4e595c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2db558b27972aad5c9736e5fd0c313c81d1ca32e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2db558b27972aad5c9736e5fd0c313c81d1ca32e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2db558b27972aad5c9736e5fd0c313c81d1ca32e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2db558b27972aad5c9736e5fd0c313c81d1ca32e/comments",
    "author": {
      "login": "kdomanski",
      "id": 993296,
      "node_id": "MDQ6VXNlcjk5MzI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/993296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kdomanski",
      "html_url": "https://github.com/kdomanski",
      "followers_url": "https://api.github.com/users/kdomanski/followers",
      "following_url": "https://api.github.com/users/kdomanski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kdomanski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kdomanski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kdomanski/subscriptions",
      "organizations_url": "https://api.github.com/users/kdomanski/orgs",
      "repos_url": "https://api.github.com/users/kdomanski/repos",
      "events_url": "https://api.github.com/users/kdomanski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kdomanski/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kdomanski",
      "id": 993296,
      "node_id": "MDQ6VXNlcjk5MzI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/993296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kdomanski",
      "html_url": "https://github.com/kdomanski",
      "followers_url": "https://api.github.com/users/kdomanski/followers",
      "following_url": "https://api.github.com/users/kdomanski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kdomanski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kdomanski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kdomanski/subscriptions",
      "organizations_url": "https://api.github.com/users/kdomanski/orgs",
      "repos_url": "https://api.github.com/users/kdomanski/repos",
      "events_url": "https://api.github.com/users/kdomanski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kdomanski/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a223cd974999248b588ad1cebe5ad6f50ac8c40d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a223cd974999248b588ad1cebe5ad6f50ac8c40d"
      }
    ],
    "stats": {
      "total": 101,
      "additions": 49,
      "deletions": 52
    },
    "files": [
      {
        "sha": "9bbf94b62647b0b9a300310d59cb56568c8297e6",
        "filename": "src/alert.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2db558b27972aad5c9736e5fd0c313c81d1ca32e/src/alert.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2db558b27972aad5c9736e5fd0c313c81d1ca32e/src/alert.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alert.cpp?ref=2db558b27972aad5c9736e5fd0c313c81d1ca32e",
        "patch": "@@ -218,7 +218,7 @@ bool CAlert::ProcessAlert(bool fThread)\n         }\n \n         // Check if this alert has been cancelled\n-        for (PAIRTYPE(const uint256, CAlert)& item : mapAlerts)\n+        for (std::pair<const uint256, CAlert>& item : mapAlerts)\n         {\n             const CAlert& alert = item.second;\n             if (alert.Cancels(*this))"
      },
      {
        "sha": "5514e6201b0d2518d664f975c4efee51aebe54f5",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2db558b27972aad5c9736e5fd0c313c81d1ca32e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2db558b27972aad5c9736e5fd0c313c81d1ca32e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=2db558b27972aad5c9736e5fd0c313c81d1ca32e",
        "patch": "@@ -2812,13 +2812,13 @@ bool static LoadBlockIndexDB()\n     // Calculate nChainWork\n     vector<pair<int, CBlockIndex*> > vSortedByHeight;\n     vSortedByHeight.reserve(mapBlockIndex.size());\n-    for (const PAIRTYPE(uint256, CBlockIndex*)& item : mapBlockIndex)\n+    for (const std::pair<uint256, CBlockIndex*>& item : mapBlockIndex)\n     {\n         CBlockIndex* pindex = item.second;\n         vSortedByHeight.push_back(make_pair(pindex->nHeight, pindex));\n     }\n     sort(vSortedByHeight.begin(), vSortedByHeight.end());\n-    for (const PAIRTYPE(int, CBlockIndex*)& item : vSortedByHeight)\n+    for (const std::pair<int, CBlockIndex*>& item : vSortedByHeight)\n     {\n         CBlockIndex* pindex = item.second;\n         pindex->nChainWork = (pindex->pprev ? pindex->pprev->nChainWork : 0) + pindex->GetBlockWork().getuint256();\n@@ -3168,7 +3168,7 @@ string GetWarnings(string strFor)\n     // Alerts\n     {\n         LOCK(cs_mapAlerts);\n-        for (PAIRTYPE(const uint256, CAlert)& item : mapAlerts)\n+        for (std::pair<const uint256, CAlert>& item : mapAlerts)\n         {\n             const CAlert& alert = item.second;\n             if (alert.AppliesToMe() && alert.nPriority > nPriority)\n@@ -3457,7 +3457,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         // Relay alerts\n         {\n             LOCK(cs_mapAlerts);\n-            for (PAIRTYPE(const uint256, CAlert)& item : mapAlerts)\n+            for (std::pair<const uint256, CAlert>& item : mapAlerts)\n                 item.second.RelayTo(pfrom);\n         }\n "
      },
      {
        "sha": "07fb377728dcaa3c9efcef84dda449ba68c33dc1",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2db558b27972aad5c9736e5fd0c313c81d1ca32e/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2db558b27972aad5c9736e5fd0c313c81d1ca32e/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=2db558b27972aad5c9736e5fd0c313c81d1ca32e",
        "patch": "@@ -79,7 +79,7 @@ class AddressTablePriv\n         cachedAddressTable.clear();\n         {\n             LOCK(wallet->cs_wallet);\n-            for (const PAIRTYPE(CTxDestination, CAddressBookData)& item : wallet->mapAddressBook)\n+            for (const std::pair<CTxDestination, CAddressBookData>& item : wallet->mapAddressBook)\n             {\n                 const CBitcoinAddress& address = item.first;\n                 bool fMine = IsMine(*wallet, address.Get());"
      },
      {
        "sha": "43dbb3ce88787b19a1a55d9df9f9e9b7acf7ffb0",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2db558b27972aad5c9736e5fd0c313c81d1ca32e/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2db558b27972aad5c9736e5fd0c313c81d1ca32e/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=2db558b27972aad5c9736e5fd0c313c81d1ca32e",
        "patch": "@@ -657,7 +657,7 @@ void CoinControlDialog::updateView()\n     map<QString, vector<COutput> > mapCoins;\n     model->listCoins(mapCoins);\n \n-    for (PAIRTYPE(QString, vector<COutput>) coins : mapCoins)\n+    for (std::pair<QString, vector<COutput>> coins : mapCoins)\n     {\n         QTreeWidgetItem *itemWalletAddress = new QTreeWidgetItem();\n         itemWalletAddress->setCheckState(COLUMN_CHECKBOX, Qt::Unchecked);"
      },
      {
        "sha": "aee81462d83b2365c95a0351c91deb5d9f2c3918",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2db558b27972aad5c9736e5fd0c313c81d1ca32e/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2db558b27972aad5c9736e5fd0c313c81d1ca32e/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=2db558b27972aad5c9736e5fd0c313c81d1ca32e",
        "patch": "@@ -490,7 +490,7 @@ bool PaymentServer::processPaymentRequest(PaymentRequestPlus& request, SendCoins\n     QList<std::pair<CScript, qint64> > sendingTos = request.getPayTo();\n     QStringList addresses;\n \n-    for (const PAIRTYPE(CScript, qint64)& sendingTo : sendingTos) {\n+    for (const std::pair<CScript, qint64>& sendingTo : sendingTos) {\n         // Extract and check destination addresses\n         CTxDestination dest;\n         if (ExtractDestination(sendingTo.first, dest)) {"
      },
      {
        "sha": "9ccc9dda79057a826601f7637a8dc92279cf1e4e",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2db558b27972aad5c9736e5fd0c313c81d1ca32e/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2db558b27972aad5c9736e5fd0c313c81d1ca32e/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=2db558b27972aad5c9736e5fd0c313c81d1ca32e",
        "patch": "@@ -227,14 +227,14 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, int vout, int u\n         strHTML += \"<b>\" + tr(\"Transaction ID\") + \":</b> \" + TransactionRecord::formatSubTxId(wtx.GetHash(), vout) + \"<br>\";\n \n         // Message from normal bitcoin:URI (bitcoin:123...?message=example)\n-        for  (const PAIRTYPE(string, string)& r : wtx.vOrderForm)\n+        for  (const std::pair<string, string>& r : wtx.vOrderForm)\n             if (r.first == \"Message\")\n                 strHTML += \"<br><b>\" + tr(\"Message\") + \":</b><br>\" + GUIUtil::HtmlEscape(r.second, true) + \"<br>\";\n \n         //\n         // PaymentRequest info:\n         //\n-        for  (const PAIRTYPE(string, string)& r : wtx.vOrderForm)\n+        for  (const std::pair<string, string>& r : wtx.vOrderForm)\n         {\n             if (r.first == \"PaymentRequest\")\n             {"
      },
      {
        "sha": "3f7ff651c2f3b3c19de91cb55d1f42b0cc4751a1",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2db558b27972aad5c9736e5fd0c313c81d1ca32e/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2db558b27972aad5c9736e5fd0c313c81d1ca32e/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=2db558b27972aad5c9736e5fd0c313c81d1ca32e",
        "patch": "@@ -451,7 +451,7 @@ static void ShowProgress(WalletModel *walletmodel, const std::string &title, int\n     if (nProgress == 100)\n     {\n         fQueueNotifications = false;\n-        for (const PAIRTYPE(uint256, ChangeType)& notification : vQueueNotifications)\n+        for (const std::pair<uint256, ChangeType>& notification : vQueueNotifications)\n             NotifyTransactionChanged(walletmodel, NULL, notification.first, notification.second);\n         std::vector<std::pair<uint256, ChangeType> >().swap(vQueueNotifications); // clear\n     }\n@@ -600,8 +600,8 @@ void WalletModel::listLockedCoins(std::vector<COutPoint>& vOutpts)\n void WalletModel::loadReceiveRequests(std::vector<std::string>& vReceiveRequests)\n {\n     LOCK(wallet->cs_wallet);\n-    for (const PAIRTYPE(CTxDestination, CAddressBookData)& item : wallet->mapAddressBook)\n-        for (const PAIRTYPE(std::string, std::string)& item2 : item.second.destdata)\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : wallet->mapAddressBook)\n+        for (const std::pair<std::string, std::string>& item2 : item.second.destdata)\n             if (item2.first.size() > 2 && item2.first.substr(0,2) == \"rr\") // receive request\n                 vReceiveRequests.push_back(item2.second);\n }"
      },
      {
        "sha": "616e5677a0b8f15626f476c85c63a1c2ce1fd36e",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2db558b27972aad5c9736e5fd0c313c81d1ca32e/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2db558b27972aad5c9736e5fd0c313c81d1ca32e/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=2db558b27972aad5c9736e5fd0c313c81d1ca32e",
        "patch": "@@ -167,7 +167,7 @@ Value getrawmempool(const Array& params, bool fHelp)\n     {\n         LOCK(mempool.cs);\n         Object o;\n-        for (const PAIRTYPE(uint256, CTxMemPoolEntry)& entry : mempool.mapTx)\n+        for (const std::pair<uint256, CTxMemPoolEntry>& entry : mempool.mapTx)\n         {\n             const uint256& hash = entry.first;\n             const CTxMemPoolEntry& e = entry.second;"
      },
      {
        "sha": "5214ff11a73ee2b84a42981235f049f4b8bf9ab7",
        "filename": "src/rpcprotocol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2db558b27972aad5c9736e5fd0c313c81d1ca32e/src/rpcprotocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2db558b27972aad5c9736e5fd0c313c81d1ca32e/src/rpcprotocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.cpp?ref=2db558b27972aad5c9736e5fd0c313c81d1ca32e",
        "patch": "@@ -41,7 +41,7 @@ string HTTPPost(const string& strMsg, const map<string,string>& mapRequestHeader\n       << \"Content-Length: \" << strMsg.size() << \"\\r\\n\"\n       << \"Connection: close\\r\\n\"\n       << \"Accept: application/json\\r\\n\";\n-    for (const PAIRTYPE(string, string)& item : mapRequestHeaders)\n+    for (const std::pair<string, string>& item : mapRequestHeaders)\n         s << item.first << \": \" << item.second << \"\\r\\n\";\n     s << \"\\r\\n\" << strMsg;\n "
      },
      {
        "sha": "aee8cb4e91cca553096d93a13c87ae24985ec434",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2db558b27972aad5c9736e5fd0c313c81d1ca32e/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2db558b27972aad5c9736e5fd0c313c81d1ca32e/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=2db558b27972aad5c9736e5fd0c313c81d1ca32e",
        "patch": "@@ -63,7 +63,7 @@ void RPCTypeCheck(const Object& o,\n                   const map<string, Value_type>& typesExpected,\n                   bool fAllowNull)\n {\n-    for (const PAIRTYPE(string, Value_type)& t : typesExpected)\n+    for (const std::pair<string, Value_type>& t : typesExpected)\n     {\n         const Value& v = find_value(o, t.first);\n         if (!fAllowNull && v.type() == null_type)"
      },
      {
        "sha": "8447f6a4054d59cbca57a6513472b25c7f13f25a",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2db558b27972aad5c9736e5fd0c313c81d1ca32e/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2db558b27972aad5c9736e5fd0c313c81d1ca32e/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=2db558b27972aad5c9736e5fd0c313c81d1ca32e",
        "patch": "@@ -57,7 +57,7 @@ void WalletTxToJSON(const CWalletTx& wtx, Object& entry)\n     entry.push_back(Pair(\"walletconflicts\", conflicts));\n     entry.push_back(Pair(\"time\", (boost::int64_t)wtx.GetTxTime()));\n     entry.push_back(Pair(\"timereceived\", (boost::int64_t)wtx.nTimeReceived));\n-    for (const PAIRTYPE(string,string)& item : wtx.mapValue)\n+    for (const std::pair<string,string>& item : wtx.mapValue)\n         entry.push_back(Pair(item.first, item.second));\n }\n \n@@ -290,7 +290,7 @@ Value getaddressesbyaccount(const Array& params, bool fHelp)\n \n     // Find all addresses that have the given account\n     Array ret;\n-    for (const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item : pwalletMain->mapAddressBook)\n+    for (const std::pair<CBitcoinAddress, CAddressBookData>& item : pwalletMain->mapAddressBook)\n     {\n         const CBitcoinAddress& address = item.first;\n         const string& strName = item.second.name;\n@@ -634,10 +634,10 @@ Value getbalance(const Array& params, bool fHelp)\n             wtx.GetAmounts(listReceived, listSent, allFee, strSentAccount);\n             if (wtx.GetDepthInMainChain() >= nMinDepth)\n             {\n-                for (const PAIRTYPE(CTxDestination,int64_t)& r : listReceived)\n+                for (const std::pair<CTxDestination,int64_t>& r : listReceived)\n                     nBalance += r.second;\n             }\n-            for (const PAIRTYPE(CTxDestination,int64_t)& r : listSent)\n+            for (const std::pair<CTxDestination,int64_t>& r : listSent)\n                 nBalance -= r.second;\n             nBalance -= allFee;\n         }\n@@ -968,7 +968,7 @@ Value ListReceived(const Array& params, bool fByAccounts)\n     // Reply\n     Array ret;\n     map<string, tallyitem> mapAccountTally;\n-    for (const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item : pwalletMain->mapAddressBook)\n+    for (const std::pair<CBitcoinAddress, CAddressBookData>& item : pwalletMain->mapAddressBook)\n     {\n         const CBitcoinAddress& address = item.first;\n         const string& strAccount = item.second.name;\n@@ -1107,7 +1107,7 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n     // Sent\n     if ((!listSent.empty() || nFee != 0) && (fAllAccounts || strAccount == strSentAccount))\n     {\n-        for (const PAIRTYPE(CTxDestination, int64_t)& s : listSent)\n+        for (const std::pair<CTxDestination, int64_t>& s : listSent)\n         {\n             Object entry;\n             entry.push_back(Pair(\"account\", strSentAccount));\n@@ -1124,7 +1124,7 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n     // Received\n     if (listReceived.size() > 0 && wtx.GetDepthInMainChain() >= nMinDepth)\n     {\n-        for (const PAIRTYPE(CTxDestination, int64_t)& r : listReceived)\n+        for (const std::pair<CTxDestination, int64_t>& r : listReceived)\n         {\n             string account;\n             if (pwalletMain->mapAddressBook.count(r.first))\n@@ -1310,7 +1310,7 @@ Value listaccounts(const Array& params, bool fHelp)\n         nMinDepth = params[0].get_int();\n \n     map<string, int64_t> mapAccountBalances;\n-    for (const PAIRTYPE(CTxDestination, CAddressBookData)& entry : pwalletMain->mapAddressBook) {\n+    for (const std::pair<CTxDestination, CAddressBookData>& entry : pwalletMain->mapAddressBook) {\n         if (IsMine(*pwalletMain, entry.first)) // This address belongs to me\n             mapAccountBalances[entry.second.name] = 0;\n     }\n@@ -1327,11 +1327,11 @@ Value listaccounts(const Array& params, bool fHelp)\n             continue;\n         wtx.GetAmounts(listReceived, listSent, nFee, strSentAccount);\n         mapAccountBalances[strSentAccount] -= nFee;\n-        for (const PAIRTYPE(CTxDestination, int64_t)& s : listSent)\n+        for (const std::pair<CTxDestination, int64_t>& s : listSent)\n             mapAccountBalances[strSentAccount] -= s.second;\n         if (nDepth >= nMinDepth)\n         {\n-            for (const PAIRTYPE(CTxDestination, int64_t)& r : listReceived)\n+            for (const std::pair<CTxDestination, int64_t>& r : listReceived)\n                 if (pwalletMain->mapAddressBook.count(r.first))\n                     mapAccountBalances[pwalletMain->mapAddressBook[r.first].name] += r.second;\n                 else\n@@ -1345,7 +1345,7 @@ Value listaccounts(const Array& params, bool fHelp)\n         mapAccountBalances[entry.strAccount] += entry.nCreditDebit;\n \n     Object ret;\n-    for (const PAIRTYPE(string, int64_t)& accountBalance : mapAccountBalances) {\n+    for (const std::pair<string, int64_t>& accountBalance : mapAccountBalances) {\n         ret.push_back(Pair(accountBalance.first, ValueFromAmount(accountBalance.second)));\n     }\n     return ret;"
      },
      {
        "sha": "90815bd6aca4477488e0bdf40b7dd61c6b3f7a76",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2db558b27972aad5c9736e5fd0c313c81d1ca32e/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2db558b27972aad5c9736e5fd0c313c81d1ca32e/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=2db558b27972aad5c9736e5fd0c313c81d1ca32e",
        "patch": "@@ -1225,7 +1225,7 @@ bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, vector<vector<unsi\n \n     // Scan templates\n     const CScript& script1 = scriptPubKey;\n-    for (const PAIRTYPE(txnouttype, CScript)& tplate : mTemplates)\n+    for (const std::pair<txnouttype, CScript>& tplate : mTemplates)\n     {\n         const CScript& script2 = tplate.second;\n         vSolutionsRet.clear();"
      },
      {
        "sha": "35fca945fde815fe3ee832d8d54ab18f3009dd13",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2db558b27972aad5c9736e5fd0c313c81d1ca32e/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2db558b27972aad5c9736e5fd0c313c81d1ca32e/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=2db558b27972aad5c9736e5fd0c313c81d1ca32e",
        "patch": "@@ -59,14 +59,14 @@ static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch,\n {\n     LogPrintf(\"POTENTIAL DEADLOCK DETECTED\\n\");\n     LogPrintf(\"Previous lock order was:\\n\");\n-    for (const PAIRTYPE(void*, CLockLocation)& i : s2)\n+    for (const std::pair<void*, CLockLocation>& i : s2)\n     {\n         if (i.first == mismatch.first) LogPrintf(\" (1)\");\n         if (i.first == mismatch.second) LogPrintf(\" (2)\");\n         LogPrintf(\" %s\\n\", i.second.ToString());\n     }\n     LogPrintf(\"Current lock order is:\\n\");\n-    for (const PAIRTYPE(void*, CLockLocation)& i : s1)\n+    for (const std::pair<void*, CLockLocation>& i : s1)\n     {\n         if (i.first == mismatch.first) LogPrintf(\" (1)\");\n         if (i.first == mismatch.second) LogPrintf(\" (2)\");\n@@ -85,7 +85,7 @@ static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)\n     (*lockstack).push_back(std::make_pair(c, locklocation));\n \n     if (!fTry) {\n-        for (const PAIRTYPE(void*, CLockLocation)& i : (*lockstack)) {\n+        for (const std::pair<void*, CLockLocation>& i : (*lockstack)) {\n             if (i.first == c) break;\n \n             std::pair<void*, void*> p1 = std::make_pair(i.first, c);\n@@ -129,14 +129,14 @@ void LeaveCritical()\n std::string LocksHeld()\n {\n     std::string result;\n-    for (const PAIRTYPE(void*, CLockLocation)&i : *lockstack)\n+    for (const std::pair<void*, CLockLocation>&i : *lockstack)\n         result += i.second.ToString() + std::string(\"\\n\");\n     return result;\n }\n \n void AssertLockHeldInternal(const char *pszName, const char* pszFile, int nLine, void *cs)\n {\n-    for (const PAIRTYPE(void*, CLockLocation)&i : *lockstack)\n+    for (const std::pair<void*, CLockLocation>&i : *lockstack)\n         if (i.first == cs) return;\n     fprintf(stderr, \"Assertion failed: lock %s not held in %s:%i; locks held:\\n%s\",\n             pszName, pszFile, nLine, LocksHeld().c_str());"
      },
      {
        "sha": "c2c50fa8be580cacb6280fc5a1f36610baccf4d1",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2db558b27972aad5c9736e5fd0c313c81d1ca32e/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2db558b27972aad5c9736e5fd0c313c81d1ca32e/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=2db558b27972aad5c9736e5fd0c313c81d1ca32e",
        "patch": "@@ -501,7 +501,7 @@ void ParseParameters(int argc, const char* const argv[])\n     }\n \n     // New 0.6 features:\n-    for (const PAIRTYPE(string,string)& entry : mapArgs)\n+    for (const std::pair<string,string>& entry : mapArgs)\n     {\n         string name = entry.first;\n "
      },
      {
        "sha": "07ca9f9d05bcc0f90854c6916832a8673e8c3402",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2db558b27972aad5c9736e5fd0c313c81d1ca32e/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2db558b27972aad5c9736e5fd0c313c81d1ca32e/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=2db558b27972aad5c9736e5fd0c313c81d1ca32e",
        "patch": "@@ -56,9 +56,6 @@ static const int64_t CENT = 1000000;\n #define PRIpdu    \"u\"\n #define PRIpdd    \"d\"\n \n-// This is needed because the foreach macro can't get over the comma in pair<t1, t2>\n-#define PAIRTYPE(t1, t2)    std::pair<t1, t2>\n-\n // Align by increasing pointer, must have extra space at end of buffer\n template <size_t nBytes, typename T>\n T* alignup(T* p)"
      },
      {
        "sha": "c5726dd5c4c4dd06b646e4d45e4a0d47791eefcf",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2db558b27972aad5c9736e5fd0c313c81d1ca32e/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2db558b27972aad5c9736e5fd0c313c81d1ca32e/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=2db558b27972aad5c9736e5fd0c313c81d1ca32e",
        "patch": "@@ -459,7 +459,7 @@ void CWallet::MarkDirty()\n {\n     {\n         LOCK(cs_wallet);\n-        for (PAIRTYPE(const uint256, CWalletTx)& item : mapWallet)\n+        for (std::pair<const uint256, CWalletTx>& item : mapWallet)\n             item.second.MarkDirty();\n     }\n }\n@@ -796,13 +796,13 @@ void CWalletTx::GetAccountAmounts(const string& strAccount, int64_t& nReceived,\n \n     if (strAccount == strSentAccount)\n     {\n-        for (const PAIRTYPE(CTxDestination,int64_t)& s : listSent)\n+        for (const std::pair<CTxDestination,int64_t>& s : listSent)\n             nSent += s.second;\n         nFee = allFee;\n     }\n     {\n         LOCK(pwallet->cs_wallet);\n-        for (const PAIRTYPE(CTxDestination,int64_t)& r : listReceived)\n+        for (const std::pair<CTxDestination,int64_t>& r : listReceived)\n         {\n             if (pwallet->mapAddressBook.count(r.first))\n             {\n@@ -870,7 +870,7 @@ int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n void CWallet::ReacceptWalletTransactions()\n {\n     LOCK(cs_wallet);\n-    for (PAIRTYPE(const uint256, CWalletTx)& item : mapWallet)\n+    for (std::pair<const uint256, CWalletTx>& item : mapWallet)\n     {\n         const uint256& wtxid = item.first;\n         CWalletTx& wtx = item.second;\n@@ -933,15 +933,15 @@ void CWallet::ResendWalletTransactions()\n         LOCK(cs_wallet);\n         // Sort them in chronological order\n         multimap<unsigned int, CWalletTx*> mapSorted;\n-        for (PAIRTYPE(const uint256, CWalletTx)& item : mapWallet)\n+        for (std::pair<const uint256, CWalletTx>& item : mapWallet)\n         {\n             CWalletTx& wtx = item.second;\n             // Don't rebroadcast until it's had plenty of time that\n             // it should have gotten in already by now.\n             if (nTimeBestReceived - (int64_t)wtx.nTimeReceived > 5 * 60)\n                 mapSorted.insert(make_pair(wtx.nTimeReceived, &wtx));\n         }\n-        for (PAIRTYPE(const unsigned int, CWalletTx*)& item : mapSorted)\n+        for (std::pair<const unsigned int, CWalletTx*>& item : mapSorted)\n         {\n             CWalletTx& wtx = *item.second;\n             wtx.RelayWalletTransaction();\n@@ -1212,7 +1212,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64_t> >& vecSend,\n                                 CWalletTx& wtxNew, CReserveKey& reservekey, int64_t& nFeeRet, std::string& strFailReason, const CCoinControl* coinControl)\n {\n     int64_t nValue = 0;\n-    for  (const PAIRTYPE(CScript, int64_t)& s : vecSend)\n+    for  (const std::pair<CScript, int64_t>& s : vecSend)\n     {\n         if (nValue < 0)\n         {\n@@ -1242,7 +1242,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64_t> >& vecSend,\n                 int64_t nTotalValue = nValue + nFeeRet;\n                 double dPriority = 0;\n                 // vouts to the payees\n-                for  (const PAIRTYPE(CScript, int64_t)& s : vecSend)\n+                for  (const std::pair<CScript, int64_t>& s : vecSend)\n                 {\n                     CTxOut txout(s.second, s.first);\n                     if (txout.IsDust(CTransaction::nMinRelayTxFee))\n@@ -1261,7 +1261,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64_t> >& vecSend,\n                     strFailReason = _(\"Insufficient funds\");\n                     return false;\n                 }\n-                for (PAIRTYPE(const CWalletTx*, unsigned int) pcoin : setCoins)\n+                for (std::pair<const CWalletTx*, unsigned int> pcoin : setCoins)\n                 {\n                     int64_t nCredit = pcoin.first->vout[pcoin.second].nValue;\n                     //The priority after the next block (depth+1) is used instead of the current,\n@@ -1332,12 +1332,12 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64_t> >& vecSend,\n                     reservekey.ReturnKey();\n \n                 // Fill vin\n-                for (const PAIRTYPE(const CWalletTx*,unsigned int)& coin : setCoins)\n+                for (const std::pair<const CWalletTx*,unsigned int>& coin : setCoins)\n                     wtxNew.vin.push_back(CTxIn(coin.first->GetHash(),coin.second));\n \n                 // Sign\n                 int nIn = 0;\n-                for (const PAIRTYPE(const CWalletTx*,unsigned int)& coin : setCoins)\n+                for (const std::pair<const CWalletTx*,unsigned int>& coin : setCoins)\n                     if (!SignSignature(*this, *coin.first, wtxNew, nIn++))\n                     {\n                         strFailReason = _(\"Signing transaction failed\");\n@@ -1557,7 +1557,7 @@ bool CWallet::DelAddressBook(const CTxDestination& address)\n         {\n             // Delete destdata tuples associated with address\n             std::string strAddress = CBitcoinAddress(address).ToString();\n-            for (const PAIRTYPE(string, string) &item : mapAddressBook[address].destdata)\n+            for (const std::pair<string, string> &item : mapAddressBook[address].destdata)\n             {\n                 CWalletDB(strWalletFile).EraseDestData(strAddress, item.first);\n             }\n@@ -1742,7 +1742,7 @@ std::map<CTxDestination, int64_t> CWallet::GetAddressBalances()\n \n     {\n         LOCK(cs_wallet);\n-        for (PAIRTYPE(uint256, CWalletTx) walletEntry : mapWallet)\n+        for (std::pair<uint256, CWalletTx> walletEntry : mapWallet)\n         {\n             CWalletTx *pcoin = &walletEntry.second;\n \n@@ -1782,7 +1782,7 @@ set< set<CTxDestination> > CWallet::GetAddressGroupings()\n     set< set<CTxDestination> > groupings;\n     set<CTxDestination> grouping;\n \n-    for (PAIRTYPE(uint256, CWalletTx) walletEntry : mapWallet)\n+    for (std::pair<uint256, CWalletTx> walletEntry : mapWallet)\n     {\n         CWalletTx *pcoin = &walletEntry.second;\n \n@@ -1873,7 +1873,7 @@ set<CTxDestination> CWallet::GetAccountAddresses(string strAccount) const\n {\n     AssertLockHeld(cs_wallet); // mapWallet\n     set<CTxDestination> result;\n-    for (const PAIRTYPE(CTxDestination, CAddressBookData)& item : mapAddressBook)\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : mapAddressBook)\n     {\n         const CTxDestination& address = item.first;\n         const string& strName = item.second.name;"
      }
    ]
  },
  {
    "sha": "1c1c95adbc8d661eb9a6cb70e046567f1c6406ec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYzFjOTVhZGJjOGQ2NjFlYjlhNmNiNzBlMDQ2NTY3ZjFjNjQwNmVj",
    "commit": {
      "author": {
        "name": "Kamil Domanski",
        "email": "kdomanski@kdemail.net",
        "date": "2014-04-08T18:05:16Z"
      },
      "committer": {
        "name": "Kamil Domanski",
        "email": "kdomanski@kdemail.net",
        "date": "2014-04-08T21:20:17Z"
      },
      "message": "spaces around string literals to conform with C++11",
      "tree": {
        "sha": "b3028cd8d2541225ba976a55a9fcca4d3cb6c935",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b3028cd8d2541225ba976a55a9fcca4d3cb6c935"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1c1c95adbc8d661eb9a6cb70e046567f1c6406ec",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c1c95adbc8d661eb9a6cb70e046567f1c6406ec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1c1c95adbc8d661eb9a6cb70e046567f1c6406ec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c1c95adbc8d661eb9a6cb70e046567f1c6406ec/comments",
    "author": {
      "login": "kdomanski",
      "id": 993296,
      "node_id": "MDQ6VXNlcjk5MzI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/993296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kdomanski",
      "html_url": "https://github.com/kdomanski",
      "followers_url": "https://api.github.com/users/kdomanski/followers",
      "following_url": "https://api.github.com/users/kdomanski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kdomanski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kdomanski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kdomanski/subscriptions",
      "organizations_url": "https://api.github.com/users/kdomanski/orgs",
      "repos_url": "https://api.github.com/users/kdomanski/repos",
      "events_url": "https://api.github.com/users/kdomanski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kdomanski/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kdomanski",
      "id": 993296,
      "node_id": "MDQ6VXNlcjk5MzI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/993296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kdomanski",
      "html_url": "https://github.com/kdomanski",
      "followers_url": "https://api.github.com/users/kdomanski/followers",
      "following_url": "https://api.github.com/users/kdomanski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kdomanski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kdomanski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kdomanski/subscriptions",
      "organizations_url": "https://api.github.com/users/kdomanski/orgs",
      "repos_url": "https://api.github.com/users/kdomanski/repos",
      "events_url": "https://api.github.com/users/kdomanski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kdomanski/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2db558b27972aad5c9736e5fd0c313c81d1ca32e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2db558b27972aad5c9736e5fd0c313c81d1ca32e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2db558b27972aad5c9736e5fd0c313c81d1ca32e"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 31,
      "deletions": 31
    },
    "files": [
      {
        "sha": "4a530d24dcdc5d636e84a8dbfa6510d1d282dd3d",
        "filename": "src/core.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c1c95adbc8d661eb9a6cb70e046567f1c6406ec/src/core.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c1c95adbc8d661eb9a6cb70e046567f1c6406ec/src/core.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.cpp?ref=1c1c95adbc8d661eb9a6cb70e046567f1c6406ec",
        "patch": "@@ -140,7 +140,7 @@ double CTransaction::ComputePriority(double dPriorityInputs, unsigned int nTxSiz\n std::string CTransaction::ToString() const\n {\n     std::string str;\n-    str += strprintf(\"CTransaction(hash=%s, ver=%d, vin.size=%\"PRIszu\", vout.size=%\"PRIszu\", nLockTime=%u)\\n\",\n+    str += strprintf(\"CTransaction(hash=%s, ver=%d, vin.size=%\" PRIszu \", vout.size=%\" PRIszu \", nLockTime=%u)\\n\",\n         GetHash().ToString().substr(0,10),\n         nVersion,\n         vin.size(),\n@@ -269,7 +269,7 @@ uint256 CBlock::CheckMerkleBranch(uint256 hash, const std::vector<uint256>& vMer\n \n void CBlock::print() const\n {\n-    LogPrintf(\"CBlock(hash=%s, ver=%d, hashPrevBlock=%s, hashMerkleRoot=%s, nTime=%u, nBits=%08x, nNonce=%u, vtx=%\"PRIszu\")\\n\",\n+    LogPrintf(\"CBlock(hash=%s, ver=%d, hashPrevBlock=%s, hashMerkleRoot=%s, nTime=%u, nBits=%08x, nNonce=%u, vtx=%\" PRIszu \")\\n\",\n         GetHash().ToString(),\n         nVersion,\n         hashPrevBlock.ToString(),"
      },
      {
        "sha": "5a6d37e978e40b1d5c5ff59ee35d6a08cfc1c35a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c1c95adbc8d661eb9a6cb70e046567f1c6406ec/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c1c95adbc8d661eb9a6cb70e046567f1c6406ec/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=1c1c95adbc8d661eb9a6cb70e046567f1c6406ec",
        "patch": "@@ -1085,12 +1085,12 @@ bool AppInit2(boost::thread_group& threadGroup)\n     RandAddSeedPerfmon();\n \n     //// debug print\n-    LogPrintf(\"mapBlockIndex.size() = %\"PRIszu\"\\n\",   mapBlockIndex.size());\n+    LogPrintf(\"mapBlockIndex.size() = %\"  PRIszu  \"\\n\",   mapBlockIndex.size());\n     LogPrintf(\"nBestHeight = %d\\n\",                   chainActive.Height());\n #ifdef ENABLE_WALLET\n-    LogPrintf(\"setKeyPool.size() = %\"PRIszu\"\\n\",      pwalletMain ? pwalletMain->setKeyPool.size() : 0);\n-    LogPrintf(\"mapWallet.size() = %\"PRIszu\"\\n\",       pwalletMain ? pwalletMain->mapWallet.size() : 0);\n-    LogPrintf(\"mapAddressBook.size() = %\"PRIszu\"\\n\",  pwalletMain ? pwalletMain->mapAddressBook.size() : 0);\n+    LogPrintf(\"setKeyPool.size() = %\"  PRIszu  \"\\n\",      pwalletMain ? pwalletMain->setKeyPool.size() : 0);\n+    LogPrintf(\"mapWallet.size() = %\"  PRIszu  \"\\n\",       pwalletMain ? pwalletMain->mapWallet.size() : 0);\n+    LogPrintf(\"mapAddressBook.size() = %\"  PRIszu  \"\\n\",  pwalletMain ? pwalletMain->mapAddressBook.size() : 0);\n #endif\n \n     StartNode(threadGroup);"
      },
      {
        "sha": "3e77bf4f9ac47ea867cc0504aaf4360b4d866b05",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c1c95adbc8d661eb9a6cb70e046567f1c6406ec/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c1c95adbc8d661eb9a6cb70e046567f1c6406ec/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=1c1c95adbc8d661eb9a6cb70e046567f1c6406ec",
        "patch": "@@ -431,7 +431,7 @@ bool AddOrphanTx(const CTransaction& tx)\n     for (const CTxIn& txin : tx.vin)\n         mapOrphanTransactionsByPrev[txin.prevout.hash].insert(hash);\n \n-    LogPrint(\"mempool\", \"stored orphan tx %s (mapsz %\"PRIszu\")\\n\", hash.ToString(),\n+    LogPrint(\"mempool\", \"stored orphan tx %s (mapsz %\" PRIszu \")\\n\", hash.ToString(),\n         mapOrphanTransactions.size());\n     return true;\n }\n@@ -3026,7 +3026,7 @@ void PrintBlockTree()\n         // print item\n         CBlock block;\n         ReadBlockFromDisk(block, pindex);\n-        LogPrintf(\"%d (blk%05u.dat:0x%x)  %s  tx %\"PRIszu\"\\n\",\n+        LogPrintf(\"%d (blk%05u.dat:0x%x)  %s  tx %\" PRIszu \"\\n\",\n             pindex->nHeight,\n             pindex->GetBlockPos().nFile, pindex->GetBlockPos().nPos,\n             DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", block.GetBlockTime()),\n@@ -3353,7 +3353,7 @@ void static ProcessGetData(CNode* pfrom)\n bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n {\n     RandAddSeedPerfmon();\n-    LogPrint(\"net\", \"received: %s (%\"PRIszu\" bytes)\\n\", strCommand, vRecv.size());\n+    LogPrint(\"net\", \"received: %s (%\" PRIszu \" bytes)\\n\", strCommand, vRecv.size());\n     if (mapArgs.count(\"-dropmessagestest\") && GetRand(atoi(mapArgs[\"-dropmessagestest\"])) == 0)\n     {\n         LogPrintf(\"dropmessagestest DROPPING RECV MESSAGE\\n\");\n@@ -3497,7 +3497,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         if (vAddr.size() > 1000)\n         {\n             Misbehaving(pfrom->GetId(), 20);\n-            return error(\"message addr size() = %\"PRIszu\"\", vAddr.size());\n+            return error(\"message addr size() = %\" PRIszu \"\", vAddr.size());\n         }\n \n         // Store the new addresses\n@@ -3560,7 +3560,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         if (vInv.size() > MAX_INV_SZ)\n         {\n             Misbehaving(pfrom->GetId(), 20);\n-            return error(\"message inv size() = %\"PRIszu\"\", vInv.size());\n+            return error(\"message inv size() = %\" PRIszu \"\", vInv.size());\n         }\n \n         LOCK(cs_main);\n@@ -3599,11 +3599,11 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         if (vInv.size() > MAX_INV_SZ)\n         {\n             Misbehaving(pfrom->GetId(), 20);\n-            return error(\"message getdata size() = %\"PRIszu\"\", vInv.size());\n+            return error(\"message getdata size() = %\" PRIszu \"\", vInv.size());\n         }\n \n         if (fDebug || (vInv.size() != 1))\n-            LogPrint(\"net\", \"received getdata (%\"PRIszu\" invsz)\\n\", vInv.size());\n+            LogPrint(\"net\", \"received getdata (%\" PRIszu \" invsz)\\n\", vInv.size());\n \n         if ((fDebug && vInv.size() > 0) || (vInv.size() == 1))\n             LogPrint(\"net\", \"received getdata for: %s\\n\", vInv[0].ToString());\n@@ -3711,7 +3711,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             vEraseQueue.push_back(inv.hash);\n \n \n-            LogPrint(\"mempool\", \"AcceptToMemoryPool: %s %s : accepted %s (poolsz %\"PRIszu\")\\n\",\n+            LogPrint(\"mempool\", \"AcceptToMemoryPool: %s %s : accepted %s (poolsz %\" PRIszu \")\\n\",\n                 pfrom->addr.ToString(), pfrom->cleanSubVer,\n                 tx.GetHash().ToString(),\n                 mempool.mapTx.size());\n@@ -3896,7 +3896,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         }\n \n         if (!(sProblem.empty())) {\n-            LogPrint(\"net\", \"pong %s %s: %s, %x expected, %x received, %\"PRIszu\" bytes\\n\",\n+            LogPrint(\"net\", \"pong %s %s: %s, %x expected, %x received, %\" PRIszu \" bytes\\n\",\n                 pfrom->addr.ToString(),\n                 pfrom->cleanSubVer,\n                 sProblem,\n@@ -4031,7 +4031,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n bool ProcessMessages(CNode* pfrom)\n {\n     //if (fDebug)\n-    //    LogPrintf(\"ProcessMessages(%\"PRIszu\" messages)\\n\", pfrom->vRecvMsg.size());\n+    //    LogPrintf(\"ProcessMessages(%\" PRIszu \" messages)\\n\", pfrom->vRecvMsg.size());\n \n     //\n     // Message format\n@@ -4059,7 +4059,7 @@ bool ProcessMessages(CNode* pfrom)\n         CNetMessage& msg = *it;\n \n         //if (fDebug)\n-        //    LogPrintf(\"ProcessMessages(message %u msgsz, %\"PRIszu\" bytes, complete:%s)\\n\",\n+        //    LogPrintf(\"ProcessMessages(message %u msgsz, %\" PRIszu \" bytes, complete:%s)\\n\",\n         //            msg.hdr.nMessageSize, msg.vRecv.size(),\n         //            msg.complete() ? \"Y\" : \"N\");\n "
      },
      {
        "sha": "49bddd80ff01e007288c3a29310ad5f7112b3bcf",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c1c95adbc8d661eb9a6cb70e046567f1c6406ec/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c1c95adbc8d661eb9a6cb70e046567f1c6406ec/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=1c1c95adbc8d661eb9a6cb70e046567f1c6406ec",
        "patch": "@@ -528,7 +528,7 @@ void static BitcoinMiner(CWallet *pwallet)\n         CBlock *pblock = &pblocktemplate->block;\n         IncrementExtraNonce(pblock, pindexPrev, nExtraNonce);\n \n-        LogPrintf(\"Running BitcoinMiner with %\"PRIszu\" transactions in block (%u bytes)\\n\", pblock->vtx.size(),\n+        LogPrintf(\"Running BitcoinMiner with %\" PRIszu \" transactions in block (%u bytes)\\n\", pblock->vtx.size(),\n                ::GetSerializeSize(*pblock, SER_NETWORK, PROTOCOL_VERSION));\n \n         //"
      },
      {
        "sha": "c10cea1f1b424bf3c4478582aa2c6597fbfa6a08",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c1c95adbc8d661eb9a6cb70e046567f1c6406ec/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c1c95adbc8d661eb9a6cb70e046567f1c6406ec/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=1c1c95adbc8d661eb9a6cb70e046567f1c6406ec",
        "patch": "@@ -185,7 +185,7 @@ CScript _createmultisig(const Array& params)\n     if ((int)keys.size() < nRequired)\n         throw runtime_error(\n             strprintf(\"not enough keys supplied \"\n-                      \"(got %\"PRIszu\" keys, but need at least %d to redeem)\", keys.size(), nRequired));\n+                      \"(got %\" PRIszu \" keys, but need at least %d to redeem)\", keys.size(), nRequired));\n     std::vector<CPubKey> pubkeys;\n     pubkeys.resize(keys.size());\n     for (unsigned int i = 0; i < keys.size(); i++)"
      },
      {
        "sha": "403d98dcad7cf716c03718576c23ae325c4ebf4d",
        "filename": "src/rpcprotocol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c1c95adbc8d661eb9a6cb70e046567f1c6406ec/src/rpcprotocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c1c95adbc8d661eb9a6cb70e046567f1c6406ec/src/rpcprotocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.cpp?ref=1c1c95adbc8d661eb9a6cb70e046567f1c6406ec",
        "patch": "@@ -91,7 +91,7 @@ string HTTPReply(int nStatus, const string& strMsg, bool keepalive)\n             \"HTTP/1.1 %d %s\\r\\n\"\n             \"Date: %s\\r\\n\"\n             \"Connection: %s\\r\\n\"\n-            \"Content-Length: %\"PRIszu\"\\r\\n\"\n+            \"Content-Length: %\" PRIszu \"\\r\\n\"\n             \"Content-Type: application/json\\r\\n\"\n             \"Server: bitcoin-json-rpc/%s\\r\\n\"\n             \"\\r\\n\""
      },
      {
        "sha": "73eece01e99281b090607cd853ec7e5d2eb3bf67",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c1c95adbc8d661eb9a6cb70e046567f1c6406ec/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c1c95adbc8d661eb9a6cb70e046567f1c6406ec/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=1c1c95adbc8d661eb9a6cb70e046567f1c6406ec",
        "patch": "@@ -315,21 +315,21 @@ BOOST_AUTO_TEST_CASE(strprintf_numbers)\n {\n     int64_t s64t = -9223372036854775807LL; /* signed 64 bit test value */\n     uint64_t u64t = 18446744073709551615ULL; /* unsigned 64 bit test value */\n-    BOOST_CHECK(strprintf(\"%s %d %s\", B, s64t, E) == B\" -9223372036854775807 \"E);\n-    BOOST_CHECK(strprintf(\"%s %u %s\", B, u64t, E) == B\" 18446744073709551615 \"E);\n-    BOOST_CHECK(strprintf(\"%s %x %s\", B, u64t, E) == B\" ffffffffffffffff \"E);\n+    BOOST_CHECK(strprintf(\"%s %d %s\", B, s64t, E) == B \" -9223372036854775807 \" E);\n+    BOOST_CHECK(strprintf(\"%s %u %s\", B, u64t, E) == B \" 18446744073709551615 \" E);\n+    BOOST_CHECK(strprintf(\"%s %x %s\", B, u64t, E) == B \" ffffffffffffffff \" E);\n \n     size_t st = 12345678; /* unsigned size_t test value */\n     ssize_t sst = -12345678; /* signed size_t test value */\n-    BOOST_CHECK(strprintf(\"%s %\"PRIszd\" %s\", B, sst, E) == B\" -12345678 \"E);\n-    BOOST_CHECK(strprintf(\"%s %\"PRIszu\" %s\", B, st, E) == B\" 12345678 \"E);\n-    BOOST_CHECK(strprintf(\"%s %\"PRIszx\" %s\", B, st, E) == B\" bc614e \"E);\n+    BOOST_CHECK(strprintf(\"%s %\" PRIszd \" %s\", B, sst, E) == B \" -12345678 \" E);\n+    BOOST_CHECK(strprintf(\"%s %\" PRIszu \" %s\", B, st, E) == B \" 12345678 \" E);\n+    BOOST_CHECK(strprintf(\"%s %\" PRIszx \" %s\", B, st, E) == B \" bc614e \" E);\n \n     ptrdiff_t pt = 87654321; /* positive ptrdiff_t test value */\n     ptrdiff_t spt = -87654321; /* negative ptrdiff_t test value */\n-    BOOST_CHECK(strprintf(\"%s %\"PRIpdd\" %s\", B, spt, E) == B\" -87654321 \"E);\n-    BOOST_CHECK(strprintf(\"%s %\"PRIpdu\" %s\", B, pt, E) == B\" 87654321 \"E);\n-    BOOST_CHECK(strprintf(\"%s %\"PRIpdx\" %s\", B, pt, E) == B\" 5397fb1 \"E);\n+    BOOST_CHECK(strprintf(\"%s %\" PRIpdd \" %s\", B, spt, E) == B \" -87654321 \" E);\n+    BOOST_CHECK(strprintf(\"%s %\" PRIpdu \" %s\", B, pt, E) == B \" 87654321 \" E);\n+    BOOST_CHECK(strprintf(\"%s %\" PRIpdx \" %s\", B, pt, E) == B \" 5397fb1 \" E);\n }\n #undef B\n #undef E"
      },
      {
        "sha": "88815b872829cda7f10e63c993f194775340b371",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c1c95adbc8d661eb9a6cb70e046567f1c6406ec/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c1c95adbc8d661eb9a6cb70e046567f1c6406ec/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=1c1c95adbc8d661eb9a6cb70e046567f1c6406ec",
        "patch": "@@ -1637,7 +1637,7 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n             if (!walletdb.WritePool(nEnd, CKeyPool(GenerateNewKey())))\n                 throw runtime_error(\"TopUpKeyPool() : writing generated key failed\");\n             setKeyPool.insert(nEnd);\n-            LogPrintf(\"keypool added key %d, size=%\"PRIszu\"\\n\", nEnd, setKeyPool.size());\n+            LogPrintf(\"keypool added key %d, size=%\" PRIszu \"\\n\", nEnd, setKeyPool.size());\n         }\n     }\n     return true;"
      },
      {
        "sha": "2bd43683e73de30cca252aea5f4fe4542ba3f223",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c1c95adbc8d661eb9a6cb70e046567f1c6406ec/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c1c95adbc8d661eb9a6cb70e046567f1c6406ec/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=1c1c95adbc8d661eb9a6cb70e046567f1c6406ec",
        "patch": "@@ -903,7 +903,7 @@ bool CWalletDB::Recover(CDBEnv& dbenv, std::string filename, bool fOnlyKeys)\n         LogPrintf(\"Salvage(aggressive) found no records in %s.\\n\", newFilename);\n         return false;\n     }\n-    LogPrintf(\"Salvage(aggressive) found %\"PRIszu\" records\\n\", salvagedData.size());\n+    LogPrintf(\"Salvage(aggressive) found %\" PRIszu \" records\\n\", salvagedData.size());\n \n     bool fSuccess = allOK;\n     Db* pdbCopy = new Db(&dbenv.dbenv, 0);"
      }
    ]
  },
  {
    "sha": "1b28a78a9996795b36ebd5b1b5aff6a48f1a54d7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYjI4YTc4YTk5OTY3OTViMzZlYmQ1YjFiNWFmZjZhNDhmMWE1NGQ3",
    "commit": {
      "author": {
        "name": "Kamil Domanski",
        "email": "kdomanski@kdemail.net",
        "date": "2014-04-08T20:17:17Z"
      },
      "committer": {
        "name": "Kamil Domanski",
        "email": "kdomanski@kdemail.net",
        "date": "2014-04-08T21:20:26Z"
      },
      "message": "changed deprecated std::auto_ptr to std::unique_ptr",
      "tree": {
        "sha": "e3386f737950e6df3a83876d10ac4d32df266c11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e3386f737950e6df3a83876d10ac4d32df266c11"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b28a78a9996795b36ebd5b1b5aff6a48f1a54d7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b28a78a9996795b36ebd5b1b5aff6a48f1a54d7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1b28a78a9996795b36ebd5b1b5aff6a48f1a54d7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b28a78a9996795b36ebd5b1b5aff6a48f1a54d7/comments",
    "author": {
      "login": "kdomanski",
      "id": 993296,
      "node_id": "MDQ6VXNlcjk5MzI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/993296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kdomanski",
      "html_url": "https://github.com/kdomanski",
      "followers_url": "https://api.github.com/users/kdomanski/followers",
      "following_url": "https://api.github.com/users/kdomanski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kdomanski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kdomanski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kdomanski/subscriptions",
      "organizations_url": "https://api.github.com/users/kdomanski/orgs",
      "repos_url": "https://api.github.com/users/kdomanski/repos",
      "events_url": "https://api.github.com/users/kdomanski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kdomanski/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kdomanski",
      "id": 993296,
      "node_id": "MDQ6VXNlcjk5MzI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/993296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kdomanski",
      "html_url": "https://github.com/kdomanski",
      "followers_url": "https://api.github.com/users/kdomanski/followers",
      "following_url": "https://api.github.com/users/kdomanski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kdomanski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kdomanski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kdomanski/subscriptions",
      "organizations_url": "https://api.github.com/users/kdomanski/orgs",
      "repos_url": "https://api.github.com/users/kdomanski/repos",
      "events_url": "https://api.github.com/users/kdomanski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kdomanski/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c1c95adbc8d661eb9a6cb70e046567f1c6406ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c1c95adbc8d661eb9a6cb70e046567f1c6406ec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c1c95adbc8d661eb9a6cb70e046567f1c6406ec"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "99003f405dec091ce3633620d49b51c4f0033603",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b28a78a9996795b36ebd5b1b5aff6a48f1a54d7/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b28a78a9996795b36ebd5b1b5aff6a48f1a54d7/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=1b28a78a9996795b36ebd5b1b5aff6a48f1a54d7",
        "patch": "@@ -107,7 +107,7 @@ class TxPriorityCompare\n CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n {\n     // Create new block\n-    auto_ptr<CBlockTemplate> pblocktemplate(new CBlockTemplate());\n+    std::unique_ptr<CBlockTemplate> pblocktemplate(new CBlockTemplate());\n     if(!pblocktemplate.get())\n         return NULL;\n     CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n@@ -522,7 +522,7 @@ void static BitcoinMiner(CWallet *pwallet)\n         unsigned int nTransactionsUpdatedLast = mempool.GetTransactionsUpdated();\n         CBlockIndex* pindexPrev = chainActive.Tip();\n \n-        auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlockWithKey(reservekey));\n+        std::unique_ptr<CBlockTemplate> pblocktemplate(CreateNewBlockWithKey(reservekey));\n         if (!pblocktemplate.get())\n             return;\n         CBlock *pblock = &pblocktemplate->block;"
      }
    ]
  },
  {
    "sha": "0a0a0362cf2ed53764f9d1a8b21a3268136099c8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYTBhMDM2MmNmMmVkNTM3NjRmOWQxYThiMjFhMzI2ODEzNjA5OWM4",
    "commit": {
      "author": {
        "name": "Kamil Domanski",
        "email": "kdomanski@kdemail.net",
        "date": "2014-04-12T00:16:52Z"
      },
      "committer": {
        "name": "Kamil Domanski",
        "email": "kdomanski@kdemail.net",
        "date": "2014-04-12T00:16:52Z"
      },
      "message": "switch from boost int types to <cinttypes>",
      "tree": {
        "sha": "5977524f418a5267ba972457a84157c7e31e88d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5977524f418a5267ba972457a84157c7e31e88d8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0a0a0362cf2ed53764f9d1a8b21a3268136099c8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a0a0362cf2ed53764f9d1a8b21a3268136099c8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0a0a0362cf2ed53764f9d1a8b21a3268136099c8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a0a0362cf2ed53764f9d1a8b21a3268136099c8/comments",
    "author": {
      "login": "kdomanski",
      "id": 993296,
      "node_id": "MDQ6VXNlcjk5MzI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/993296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kdomanski",
      "html_url": "https://github.com/kdomanski",
      "followers_url": "https://api.github.com/users/kdomanski/followers",
      "following_url": "https://api.github.com/users/kdomanski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kdomanski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kdomanski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kdomanski/subscriptions",
      "organizations_url": "https://api.github.com/users/kdomanski/orgs",
      "repos_url": "https://api.github.com/users/kdomanski/repos",
      "events_url": "https://api.github.com/users/kdomanski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kdomanski/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kdomanski",
      "id": 993296,
      "node_id": "MDQ6VXNlcjk5MzI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/993296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kdomanski",
      "html_url": "https://github.com/kdomanski",
      "followers_url": "https://api.github.com/users/kdomanski/followers",
      "following_url": "https://api.github.com/users/kdomanski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kdomanski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kdomanski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kdomanski/subscriptions",
      "organizations_url": "https://api.github.com/users/kdomanski/orgs",
      "repos_url": "https://api.github.com/users/kdomanski/repos",
      "events_url": "https://api.github.com/users/kdomanski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kdomanski/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1b28a78a9996795b36ebd5b1b5aff6a48f1a54d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b28a78a9996795b36ebd5b1b5aff6a48f1a54d7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1b28a78a9996795b36ebd5b1b5aff6a48f1a54d7"
      }
    ],
    "stats": {
      "total": 160,
      "additions": 80,
      "deletions": 80
    },
    "files": [
      {
        "sha": "46f5892f62dd122843698de8b3ab1ac11ff523ba",
        "filename": "src/json/json_spirit_reader_template.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a0a0362cf2ed53764f9d1a8b21a3268136099c8/src/json/json_spirit_reader_template.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a0a0362cf2ed53764f9d1a8b21a3268136099c8/src/json/json_spirit_reader_template.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/json/json_spirit_reader_template.h?ref=0a0a0362cf2ed53764f9d1a8b21a3268136099c8",
        "patch": "@@ -33,8 +33,8 @@\n \n namespace json_spirit\n {\n-    const spirit_namespace::int_parser < boost::int64_t >  int64_p  = spirit_namespace::int_parser < boost::int64_t  >();\n-    const spirit_namespace::uint_parser< boost::uint64_t > uint64_p = spirit_namespace::uint_parser< boost::uint64_t >();\n+    const spirit_namespace::int_parser < int64_t >  int64_p  = spirit_namespace::int_parser < int64_t  >();\n+    const spirit_namespace::uint_parser< uint64_t > uint64_p = spirit_namespace::uint_parser< uint64_t >();\n \n     template< class Iter_type >\n     bool is_eq( Iter_type first, Iter_type last, const char* c_str )\n@@ -270,12 +270,12 @@ namespace json_spirit\n             add_to_current( Value_type() );\n         }\n \n-        void new_int( boost::int64_t i )\n+        void new_int( int64_t i )\n         {\n             add_to_current( i );\n         }\n \n-        void new_uint64( boost::uint64_t ui )\n+        void new_uint64( uint64_t ui )\n         {\n             add_to_current( ui );\n         }\n@@ -425,8 +425,8 @@ namespace json_spirit\n                 typedef boost::function< void( Char_type )            > Char_action;\n                 typedef boost::function< void( Iter_type, Iter_type ) > Str_action;\n                 typedef boost::function< void( double )               > Real_action;\n-                typedef boost::function< void( boost::int64_t )       > Int_action;\n-                typedef boost::function< void( boost::uint64_t )      > Uint64_action;\n+                typedef boost::function< void( int64_t )       > Int_action;\n+                typedef boost::function< void( uint64_t )      > Uint64_action;\n \n                 Char_action   begin_obj  ( boost::bind( &Semantic_actions_t::begin_obj,   &self.actions_, _1 ) );\n                 Char_action   end_obj    ( boost::bind( &Semantic_actions_t::end_obj,     &self.actions_, _1 ) );"
      },
      {
        "sha": "9f3d07b95af1d63dd831aa6ecc6849814eaa4275",
        "filename": "src/json/json_spirit_value.h",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a0a0362cf2ed53764f9d1a8b21a3268136099c8/src/json/json_spirit_value.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a0a0362cf2ed53764f9d1a8b21a3268136099c8/src/json/json_spirit_value.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/json/json_spirit_value.h?ref=0a0a0362cf2ed53764f9d1a8b21a3268136099c8",
        "patch": "@@ -45,8 +45,8 @@ namespace json_spirit\n         Value_impl( const Array&       value );\n         Value_impl( bool               value );\n         Value_impl( int                value );\n-        Value_impl( boost::int64_t     value );\n-        Value_impl( boost::uint64_t    value );\n+        Value_impl( int64_t     value );\n+        Value_impl( uint64_t    value );\n         Value_impl( double             value );\n \n         Value_impl( const Value_impl& other );\n@@ -65,8 +65,8 @@ namespace json_spirit\n         const Array&       get_array()  const;\n         bool               get_bool()   const;\n         int                get_int()    const;\n-        boost::int64_t     get_int64()  const;\n-        boost::uint64_t    get_uint64() const;\n+        int64_t     get_int64()  const;\n+        uint64_t    get_uint64() const;\n         double             get_real()   const;\n \n         Object& get_obj();\n@@ -83,7 +83,7 @@ namespace json_spirit\n \n         typedef boost::variant< String_type, \n                                 boost::recursive_wrapper< Object >, boost::recursive_wrapper< Array >, \n-                                bool, boost::int64_t, double > Variant;\n+                                bool, int64_t, double > Variant;\n \n         Value_type type_;\n         Variant v_;\n@@ -258,23 +258,23 @@ namespace json_spirit\n     template< class Config >\n     Value_impl< Config >::Value_impl( int value )\n     :   type_( int_type )\n-    ,   v_( static_cast< boost::int64_t >( value ) )\n+    ,   v_( static_cast< int64_t >( value ) )\n     ,   is_uint64_( false )\n     {\n     }\n \n     template< class Config >\n-    Value_impl< Config >::Value_impl( boost::int64_t value )\n+    Value_impl< Config >::Value_impl( int64_t value )\n     :   type_( int_type )\n     ,   v_( value )\n     ,   is_uint64_( false )\n     {\n     }\n \n     template< class Config >\n-    Value_impl< Config >::Value_impl( boost::uint64_t value )\n+    Value_impl< Config >::Value_impl( uint64_t value )\n     :   type_( int_type )\n-    ,   v_( static_cast< boost::int64_t >( value ) )\n+    ,   v_( static_cast< int64_t >( value ) )\n     ,   is_uint64_( true )\n     {\n     }\n@@ -390,19 +390,19 @@ namespace json_spirit\n     }\n     \n     template< class Config >\n-    boost::int64_t Value_impl< Config >::get_int64() const\n+    int64_t Value_impl< Config >::get_int64() const\n     {\n         check_type(  int_type );\n \n-        return boost::get< boost::int64_t >( v_ );\n+        return boost::get< int64_t >( v_ );\n     }\n     \n     template< class Config >\n-    boost::uint64_t Value_impl< Config >::get_uint64() const\n+    uint64_t Value_impl< Config >::get_uint64() const\n     {\n         check_type(  int_type );\n \n-        return static_cast< boost::uint64_t >( get_int64() );\n+        return static_cast< uint64_t >( get_int64() );\n     }\n \n     template< class Config >\n@@ -481,13 +481,13 @@ namespace json_spirit\n         }\n        \n         template< class Value > \n-        boost::int64_t get_value( const Value& value, Type_to_type< boost::int64_t > )\n+        int64_t get_value( const Value& value, Type_to_type< int64_t > )\n         {\n             return value.get_int64();\n         }\n        \n         template< class Value > \n-        boost::uint64_t get_value( const Value& value, Type_to_type< boost::uint64_t > )\n+        uint64_t get_value( const Value& value, Type_to_type< uint64_t > )\n         {\n             return value.get_uint64();\n         }"
      },
      {
        "sha": "643d84da92e9abbd8a6f035c5397572a05a53cc6",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a0a0362cf2ed53764f9d1a8b21a3268136099c8/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a0a0362cf2ed53764f9d1a8b21a3268136099c8/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=0a0a0362cf2ed53764f9d1a8b21a3268136099c8",
        "patch": "@@ -63,8 +63,8 @@ Object blockToJSON(const CBlock& block, const CBlockIndex* blockindex)\n     for (const CTransaction&tx : block.vtx)\n         txs.push_back(tx.GetHash().GetHex());\n     result.push_back(Pair(\"tx\", txs));\n-    result.push_back(Pair(\"time\", (boost::int64_t)block.GetBlockTime()));\n-    result.push_back(Pair(\"nonce\", (boost::uint64_t)block.nNonce));\n+    result.push_back(Pair(\"time\", (int64_t)block.GetBlockTime()));\n+    result.push_back(Pair(\"nonce\", (uint64_t)block.nNonce));\n     result.push_back(Pair(\"bits\", HexBits(block.nBits)));\n     result.push_back(Pair(\"difficulty\", GetDifficulty(blockindex)));\n     result.push_back(Pair(\"chainwork\", blockindex->nChainWork.GetHex()));\n@@ -174,7 +174,7 @@ Value getrawmempool(const Array& params, bool fHelp)\n             Object info;\n             info.push_back(Pair(\"size\", (int)e.GetTxSize()));\n             info.push_back(Pair(\"fee\", ValueFromAmount(e.GetFee())));\n-            info.push_back(Pair(\"time\", (boost::int64_t)e.GetTime()));\n+            info.push_back(Pair(\"time\", (int64_t)e.GetTime()));\n             info.push_back(Pair(\"height\", (int)e.GetHeight()));\n             info.push_back(Pair(\"startingpriority\", e.GetPriority(e.GetHeight())));\n             info.push_back(Pair(\"currentpriority\", e.GetPriority(chainActive.Height())));\n@@ -314,11 +314,11 @@ Value gettxoutsetinfo(const Array& params, bool fHelp)\n \n     CCoinsStats stats;\n     if (pcoinsTip->GetStats(stats)) {\n-        ret.push_back(Pair(\"height\", (boost::int64_t)stats.nHeight));\n+        ret.push_back(Pair(\"height\", (int64_t)stats.nHeight));\n         ret.push_back(Pair(\"bestblock\", stats.hashBlock.GetHex()));\n-        ret.push_back(Pair(\"transactions\", (boost::int64_t)stats.nTransactions));\n-        ret.push_back(Pair(\"txouts\", (boost::int64_t)stats.nTransactionOutputs));\n-        ret.push_back(Pair(\"bytes_serialized\", (boost::int64_t)stats.nSerializedSize));\n+        ret.push_back(Pair(\"transactions\", (int64_t)stats.nTransactions));\n+        ret.push_back(Pair(\"txouts\", (int64_t)stats.nTransactionOutputs));\n+        ret.push_back(Pair(\"bytes_serialized\", (int64_t)stats.nSerializedSize));\n         ret.push_back(Pair(\"hash_serialized\", stats.hashSerialized.GetHex()));\n         ret.push_back(Pair(\"total_amount\", ValueFromAmount(stats.nTotalAmount)));\n     }"
      },
      {
        "sha": "3ebefec9bbc4ccbebff802d3b50cef2d417ff1b0",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 26,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a0a0362cf2ed53764f9d1a8b21a3268136099c8/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a0a0362cf2ed53764f9d1a8b21a3268136099c8/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=0a0a0362cf2ed53764f9d1a8b21a3268136099c8",
        "patch": "@@ -127,53 +127,53 @@ Array RPCConvertValues(const std::string &strMethod, const std::vector<std::stri\n     if (strMethod == \"stop\"                   && n > 0) ConvertTo<bool>(params[0]);\n     if (strMethod == \"getaddednodeinfo\"       && n > 0) ConvertTo<bool>(params[0]);\n     if (strMethod == \"setgenerate\"            && n > 0) ConvertTo<bool>(params[0]);\n-    if (strMethod == \"setgenerate\"            && n > 1) ConvertTo<boost::int64_t>(params[1]);\n-    if (strMethod == \"getnetworkhashps\"       && n > 0) ConvertTo<boost::int64_t>(params[0]);\n-    if (strMethod == \"getnetworkhashps\"       && n > 1) ConvertTo<boost::int64_t>(params[1]);\n+    if (strMethod == \"setgenerate\"            && n > 1) ConvertTo<int64_t>(params[1]);\n+    if (strMethod == \"getnetworkhashps\"       && n > 0) ConvertTo<int64_t>(params[0]);\n+    if (strMethod == \"getnetworkhashps\"       && n > 1) ConvertTo<int64_t>(params[1]);\n     if (strMethod == \"sendtoaddress\"          && n > 1) ConvertTo<double>(params[1]);\n     if (strMethod == \"settxfee\"               && n > 0) ConvertTo<double>(params[0]);\n-    if (strMethod == \"getreceivedbyaddress\"   && n > 1) ConvertTo<boost::int64_t>(params[1]);\n-    if (strMethod == \"getreceivedbyaccount\"   && n > 1) ConvertTo<boost::int64_t>(params[1]);\n-    if (strMethod == \"listreceivedbyaddress\"  && n > 0) ConvertTo<boost::int64_t>(params[0]);\n+    if (strMethod == \"getreceivedbyaddress\"   && n > 1) ConvertTo<int64_t>(params[1]);\n+    if (strMethod == \"getreceivedbyaccount\"   && n > 1) ConvertTo<int64_t>(params[1]);\n+    if (strMethod == \"listreceivedbyaddress\"  && n > 0) ConvertTo<int64_t>(params[0]);\n     if (strMethod == \"listreceivedbyaddress\"  && n > 1) ConvertTo<bool>(params[1]);\n-    if (strMethod == \"listreceivedbyaccount\"  && n > 0) ConvertTo<boost::int64_t>(params[0]);\n+    if (strMethod == \"listreceivedbyaccount\"  && n > 0) ConvertTo<int64_t>(params[0]);\n     if (strMethod == \"listreceivedbyaccount\"  && n > 1) ConvertTo<bool>(params[1]);\n-    if (strMethod == \"getbalance\"             && n > 1) ConvertTo<boost::int64_t>(params[1]);\n-    if (strMethod == \"getblockhash\"           && n > 0) ConvertTo<boost::int64_t>(params[0]);\n+    if (strMethod == \"getbalance\"             && n > 1) ConvertTo<int64_t>(params[1]);\n+    if (strMethod == \"getblockhash\"           && n > 0) ConvertTo<int64_t>(params[0]);\n     if (strMethod == \"move\"                   && n > 2) ConvertTo<double>(params[2]);\n-    if (strMethod == \"move\"                   && n > 3) ConvertTo<boost::int64_t>(params[3]);\n+    if (strMethod == \"move\"                   && n > 3) ConvertTo<int64_t>(params[3]);\n     if (strMethod == \"sendfrom\"               && n > 2) ConvertTo<double>(params[2]);\n-    if (strMethod == \"sendfrom\"               && n > 3) ConvertTo<boost::int64_t>(params[3]);\n-    if (strMethod == \"listtransactions\"       && n > 1) ConvertTo<boost::int64_t>(params[1]);\n-    if (strMethod == \"listtransactions\"       && n > 2) ConvertTo<boost::int64_t>(params[2]);\n-    if (strMethod == \"listaccounts\"           && n > 0) ConvertTo<boost::int64_t>(params[0]);\n-    if (strMethod == \"walletpassphrase\"       && n > 1) ConvertTo<boost::int64_t>(params[1]);\n+    if (strMethod == \"sendfrom\"               && n > 3) ConvertTo<int64_t>(params[3]);\n+    if (strMethod == \"listtransactions\"       && n > 1) ConvertTo<int64_t>(params[1]);\n+    if (strMethod == \"listtransactions\"       && n > 2) ConvertTo<int64_t>(params[2]);\n+    if (strMethod == \"listaccounts\"           && n > 0) ConvertTo<int64_t>(params[0]);\n+    if (strMethod == \"walletpassphrase\"       && n > 1) ConvertTo<int64_t>(params[1]);\n     if (strMethod == \"getblocktemplate\"       && n > 0) ConvertTo<Object>(params[0]);\n-    if (strMethod == \"listsinceblock\"         && n > 1) ConvertTo<boost::int64_t>(params[1]);\n+    if (strMethod == \"listsinceblock\"         && n > 1) ConvertTo<int64_t>(params[1]);\n     if (strMethod == \"sendmany\"               && n > 1) ConvertTo<Object>(params[1]);\n-    if (strMethod == \"sendmany\"               && n > 2) ConvertTo<boost::int64_t>(params[2]);\n-    if (strMethod == \"addmultisigaddress\"     && n > 0) ConvertTo<boost::int64_t>(params[0]);\n+    if (strMethod == \"sendmany\"               && n > 2) ConvertTo<int64_t>(params[2]);\n+    if (strMethod == \"addmultisigaddress\"     && n > 0) ConvertTo<int64_t>(params[0]);\n     if (strMethod == \"addmultisigaddress\"     && n > 1) ConvertTo<Array>(params[1]);\n-    if (strMethod == \"createmultisig\"         && n > 0) ConvertTo<boost::int64_t>(params[0]);\n+    if (strMethod == \"createmultisig\"         && n > 0) ConvertTo<int64_t>(params[0]);\n     if (strMethod == \"createmultisig\"         && n > 1) ConvertTo<Array>(params[1]);\n-    if (strMethod == \"listunspent\"            && n > 0) ConvertTo<boost::int64_t>(params[0]);\n-    if (strMethod == \"listunspent\"            && n > 1) ConvertTo<boost::int64_t>(params[1]);\n+    if (strMethod == \"listunspent\"            && n > 0) ConvertTo<int64_t>(params[0]);\n+    if (strMethod == \"listunspent\"            && n > 1) ConvertTo<int64_t>(params[1]);\n     if (strMethod == \"listunspent\"            && n > 2) ConvertTo<Array>(params[2]);\n     if (strMethod == \"getblock\"               && n > 1) ConvertTo<bool>(params[1]);\n-    if (strMethod == \"getrawtransaction\"      && n > 1) ConvertTo<boost::int64_t>(params[1]);\n+    if (strMethod == \"getrawtransaction\"      && n > 1) ConvertTo<int64_t>(params[1]);\n     if (strMethod == \"createrawtransaction\"   && n > 0) ConvertTo<Array>(params[0]);\n     if (strMethod == \"createrawtransaction\"   && n > 1) ConvertTo<Object>(params[1]);\n     if (strMethod == \"signrawtransaction\"     && n > 1) ConvertTo<Array>(params[1], true);\n     if (strMethod == \"signrawtransaction\"     && n > 2) ConvertTo<Array>(params[2], true);\n     if (strMethod == \"sendrawtransaction\"     && n > 1) ConvertTo<bool>(params[1], true);\n-    if (strMethod == \"gettxout\"               && n > 1) ConvertTo<boost::int64_t>(params[1]);\n+    if (strMethod == \"gettxout\"               && n > 1) ConvertTo<int64_t>(params[1]);\n     if (strMethod == \"gettxout\"               && n > 2) ConvertTo<bool>(params[2]);\n     if (strMethod == \"lockunspent\"            && n > 0) ConvertTo<bool>(params[0]);\n     if (strMethod == \"lockunspent\"            && n > 1) ConvertTo<Array>(params[1]);\n     if (strMethod == \"importprivkey\"          && n > 2) ConvertTo<bool>(params[2]);\n-    if (strMethod == \"verifychain\"            && n > 0) ConvertTo<boost::int64_t>(params[0]);\n-    if (strMethod == \"verifychain\"            && n > 1) ConvertTo<boost::int64_t>(params[1]);\n-    if (strMethod == \"keypoolrefill\"          && n > 0) ConvertTo<boost::int64_t>(params[0]);\n+    if (strMethod == \"verifychain\"            && n > 0) ConvertTo<int64_t>(params[0]);\n+    if (strMethod == \"verifychain\"            && n > 1) ConvertTo<int64_t>(params[1]);\n+    if (strMethod == \"keypoolrefill\"          && n > 0) ConvertTo<int64_t>(params[0]);\n     if (strMethod == \"getrawmempool\"          && n > 0) ConvertTo<bool>(params[0]);\n \n     return params;"
      },
      {
        "sha": "ed254354d412b940905fcd79e1efd0fc482c57f3",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a0a0362cf2ed53764f9d1a8b21a3268136099c8/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a0a0362cf2ed53764f9d1a8b21a3268136099c8/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=0a0a0362cf2ed53764f9d1a8b21a3268136099c8",
        "patch": "@@ -88,7 +88,7 @@ Value GetNetworkHashPS(int lookup, int height) {\n     uint256 workDiff = pb->nChainWork - pb0->nChainWork;\n     int64_t timeDiff = maxTime - minTime;\n \n-    return (boost::int64_t)(workDiff.getdouble() / timeDiff);\n+    return (int64_t)(workDiff.getdouble() / timeDiff);\n }\n \n Value getnetworkhashps(const Array& params, bool fHelp)\n@@ -226,8 +226,8 @@ Value gethashespersec(const Array& params, bool fHelp)\n         );\n \n     if (GetTimeMillis() - nHPSTimerStart > 8000)\n-        return (boost::int64_t)0;\n-    return (boost::int64_t)dHashesPerSec;\n+        return (int64_t)0;\n+    return (int64_t)dHashesPerSec;\n }\n #endif\n "
      },
      {
        "sha": "736b1c34871a54b3bbe9b8071821348f7904ec3d",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a0a0362cf2ed53764f9d1a8b21a3268136099c8/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a0a0362cf2ed53764f9d1a8b21a3268136099c8/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=0a0a0362cf2ed53764f9d1a8b21a3268136099c8",
        "patch": "@@ -67,18 +67,18 @@ Value getinfo(const Array& params, bool fHelp)\n     }\n #endif\n     obj.push_back(Pair(\"blocks\",        (int)chainActive.Height()));\n-    obj.push_back(Pair(\"timeoffset\",    (boost::int64_t)GetTimeOffset()));\n+    obj.push_back(Pair(\"timeoffset\",    (int64_t)GetTimeOffset()));\n     obj.push_back(Pair(\"connections\",   (int)vNodes.size()));\n     obj.push_back(Pair(\"proxy\",         (proxy.first.IsValid() ? proxy.first.ToStringIPPort() : string())));\n     obj.push_back(Pair(\"difficulty\",    (double)GetDifficulty()));\n     obj.push_back(Pair(\"testnet\",       TestNet()));\n #ifdef ENABLE_WALLET\n     if (pwalletMain) {\n-        obj.push_back(Pair(\"keypoololdest\", (boost::int64_t)pwalletMain->GetOldestKeyPoolTime()));\n+        obj.push_back(Pair(\"keypoololdest\", (int64_t)pwalletMain->GetOldestKeyPoolTime()));\n         obj.push_back(Pair(\"keypoolsize\",   (int)pwalletMain->GetKeyPoolSize()));\n     }\n     if (pwalletMain && pwalletMain->IsCrypted())\n-        obj.push_back(Pair(\"unlocked_until\", (boost::int64_t)nWalletUnlockTime));\n+        obj.push_back(Pair(\"unlocked_until\", (int64_t)nWalletUnlockTime));\n     obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(nTransactionFee)));\n #endif\n     obj.push_back(Pair(\"relayfee\",      ValueFromAmount(CTransaction::nMinRelayTxFee)));"
      },
      {
        "sha": "1c005d20e1e55922d2a17d9921be5168234b28e3",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a0a0362cf2ed53764f9d1a8b21a3268136099c8/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a0a0362cf2ed53764f9d1a8b21a3268136099c8/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=0a0a0362cf2ed53764f9d1a8b21a3268136099c8",
        "patch": "@@ -115,11 +115,11 @@ Value getpeerinfo(const Array& params, bool fHelp)\n         if (!(stats.addrLocal.empty()))\n             obj.push_back(Pair(\"addrlocal\", stats.addrLocal));\n         obj.push_back(Pair(\"services\", strprintf(\"%08x\", stats.nServices)));\n-        obj.push_back(Pair(\"lastsend\", (boost::int64_t)stats.nLastSend));\n-        obj.push_back(Pair(\"lastrecv\", (boost::int64_t)stats.nLastRecv));\n-        obj.push_back(Pair(\"bytessent\", (boost::int64_t)stats.nSendBytes));\n-        obj.push_back(Pair(\"bytesrecv\", (boost::int64_t)stats.nRecvBytes));\n-        obj.push_back(Pair(\"conntime\", (boost::int64_t)stats.nTimeConnected));\n+        obj.push_back(Pair(\"lastsend\", (int64_t)stats.nLastSend));\n+        obj.push_back(Pair(\"lastrecv\", (int64_t)stats.nLastRecv));\n+        obj.push_back(Pair(\"bytessent\", (int64_t)stats.nSendBytes));\n+        obj.push_back(Pair(\"bytesrecv\", (int64_t)stats.nRecvBytes));\n+        obj.push_back(Pair(\"conntime\", (int64_t)stats.nTimeConnected));\n         obj.push_back(Pair(\"pingtime\", stats.dPingTime));\n         if (stats.dPingWait > 0.0)\n             obj.push_back(Pair(\"pingwait\", stats.dPingWait));\n@@ -327,8 +327,8 @@ Value getnettotals(const Array& params, bool fHelp)\n        );\n \n     Object obj;\n-    obj.push_back(Pair(\"totalbytesrecv\", static_cast< boost::uint64_t>(CNode::GetTotalBytesRecv())));\n-    obj.push_back(Pair(\"totalbytessent\", static_cast<boost::uint64_t>(CNode::GetTotalBytesSent())));\n-    obj.push_back(Pair(\"timemillis\", static_cast<boost::int64_t>(GetTimeMillis())));\n+    obj.push_back(Pair(\"totalbytesrecv\", static_cast< uint64_t>(CNode::GetTotalBytesRecv())));\n+    obj.push_back(Pair(\"totalbytessent\", static_cast<uint64_t>(CNode::GetTotalBytesSent())));\n+    obj.push_back(Pair(\"timemillis\", static_cast<int64_t>(GetTimeMillis())));\n     return obj;\n }"
      },
      {
        "sha": "ba4bbb308150f2fc994944d8212c5eeeef3cf4dc",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a0a0362cf2ed53764f9d1a8b21a3268136099c8/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a0a0362cf2ed53764f9d1a8b21a3268136099c8/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=0a0a0362cf2ed53764f9d1a8b21a3268136099c8",
        "patch": "@@ -53,7 +53,7 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, Object& entry)\n {\n     entry.push_back(Pair(\"txid\", tx.GetHash().GetHex()));\n     entry.push_back(Pair(\"version\", tx.nVersion));\n-    entry.push_back(Pair(\"locktime\", (boost::int64_t)tx.nLockTime));\n+    entry.push_back(Pair(\"locktime\", (int64_t)tx.nLockTime));\n     Array vin;\n     for (const CTxIn& txin : tx.vin)\n     {\n@@ -63,13 +63,13 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, Object& entry)\n         else\n         {\n             in.push_back(Pair(\"txid\", txin.prevout.hash.GetHex()));\n-            in.push_back(Pair(\"vout\", (boost::int64_t)txin.prevout.n));\n+            in.push_back(Pair(\"vout\", (int64_t)txin.prevout.n));\n             Object o;\n             o.push_back(Pair(\"asm\", txin.scriptSig.ToString()));\n             o.push_back(Pair(\"hex\", HexStr(txin.scriptSig.begin(), txin.scriptSig.end())));\n             in.push_back(Pair(\"scriptSig\", o));\n         }\n-        in.push_back(Pair(\"sequence\", (boost::int64_t)txin.nSequence));\n+        in.push_back(Pair(\"sequence\", (int64_t)txin.nSequence));\n         vin.push_back(in);\n     }\n     entry.push_back(Pair(\"vin\", vin));\n@@ -79,7 +79,7 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, Object& entry)\n         const CTxOut& txout = tx.vout[i];\n         Object out;\n         out.push_back(Pair(\"value\", ValueFromAmount(txout.nValue)));\n-        out.push_back(Pair(\"n\", (boost::int64_t)i));\n+        out.push_back(Pair(\"n\", (int64_t)i));\n         Object o;\n         ScriptPubKeyToJSON(txout.scriptPubKey, o, true);\n         out.push_back(Pair(\"scriptPubKey\", o));\n@@ -97,8 +97,8 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, Object& entry)\n             if (chainActive.Contains(pindex))\n             {\n                 entry.push_back(Pair(\"confirmations\", 1 + chainActive.Height() - pindex->nHeight));\n-                entry.push_back(Pair(\"time\", (boost::int64_t)pindex->nTime));\n-                entry.push_back(Pair(\"blocktime\", (boost::int64_t)pindex->nTime));\n+                entry.push_back(Pair(\"time\", (int64_t)pindex->nTime));\n+                entry.push_back(Pair(\"blocktime\", (int64_t)pindex->nTime));\n             }\n             else\n                 entry.push_back(Pair(\"confirmations\", 0));"
      },
      {
        "sha": "ff1e78d6160f1a7876e22de5e82451865173b31b",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a0a0362cf2ed53764f9d1a8b21a3268136099c8/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a0a0362cf2ed53764f9d1a8b21a3268136099c8/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=0a0a0362cf2ed53764f9d1a8b21a3268136099c8",
        "patch": "@@ -47,16 +47,16 @@ void WalletTxToJSON(const CWalletTx& wtx, Object& entry)\n     {\n         entry.push_back(Pair(\"blockhash\", wtx.hashBlock.GetHex()));\n         entry.push_back(Pair(\"blockindex\", wtx.nIndex));\n-        entry.push_back(Pair(\"blocktime\", (boost::int64_t)(mapBlockIndex[wtx.hashBlock]->nTime)));\n+        entry.push_back(Pair(\"blocktime\", (int64_t)(mapBlockIndex[wtx.hashBlock]->nTime)));\n     }\n     uint256 hash = wtx.GetHash();\n     entry.push_back(Pair(\"txid\", hash.GetHex()));\n     Array conflicts;\n     for (const uint256& conflict : wtx.GetConflicts())\n         conflicts.push_back(conflict.GetHex());\n     entry.push_back(Pair(\"walletconflicts\", conflicts));\n-    entry.push_back(Pair(\"time\", (boost::int64_t)wtx.GetTxTime()));\n-    entry.push_back(Pair(\"timereceived\", (boost::int64_t)wtx.nTimeReceived));\n+    entry.push_back(Pair(\"time\", (int64_t)wtx.GetTxTime()));\n+    entry.push_back(Pair(\"timereceived\", (int64_t)wtx.nTimeReceived));\n     for (const std::pair<string,string>& item : wtx.mapValue)\n         entry.push_back(Pair(item.first, item.second));\n }\n@@ -1165,7 +1165,7 @@ void AcentryToJSON(const CAccountingEntry& acentry, const string& strAccount, Ar\n         Object entry;\n         entry.push_back(Pair(\"account\", acentry.strAccount));\n         entry.push_back(Pair(\"category\", \"move\"));\n-        entry.push_back(Pair(\"time\", (boost::int64_t)acentry.nTime));\n+        entry.push_back(Pair(\"time\", (int64_t)acentry.nTime));\n         entry.push_back(Pair(\"amount\", ValueFromAmount(acentry.nCreditDebit)));\n         entry.push_back(Pair(\"otheraccount\", acentry.strOtherAccount));\n         entry.push_back(Pair(\"comment\", acentry.strComment));\n@@ -1910,9 +1910,9 @@ Value getwalletinfo(const Array& params, bool fHelp)\n     obj.push_back(Pair(\"walletversion\", pwalletMain->GetVersion()));\n     obj.push_back(Pair(\"balance\",       ValueFromAmount(pwalletMain->GetBalance())));\n     obj.push_back(Pair(\"txcount\",       (int)pwalletMain->mapWallet.size()));\n-    obj.push_back(Pair(\"keypoololdest\", (boost::int64_t)pwalletMain->GetOldestKeyPoolTime()));\n+    obj.push_back(Pair(\"keypoololdest\", (int64_t)pwalletMain->GetOldestKeyPoolTime()));\n     obj.push_back(Pair(\"keypoolsize\",   (int)pwalletMain->GetKeyPoolSize()));\n     if (pwalletMain->IsCrypted())\n-        obj.push_back(Pair(\"unlocked_until\", (boost::int64_t)nWalletUnlockTime));\n+        obj.push_back(Pair(\"unlocked_until\", (int64_t)nWalletUnlockTime));\n     return obj;\n }"
      }
    ]
  }
]