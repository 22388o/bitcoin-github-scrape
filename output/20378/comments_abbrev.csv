practicalswift,2020-11-12 15:51:16,"Concept ACK\n\nThanks for fixing this. See #17208 for some historical context.\n\nSomewhat related: I think we have a float divide-by-zero in `src/validation.cpp` in the case of `nBlocksTotal == 0`. [gmaxwell suggested](https://github.com/bitcoin/bitcoin/pull/17208#issuecomment-547676331) initializing `nBlocksTotal` to `1` instead of `0` as a simple way to avoid the float divide-by-zero. I thi",https://github.com/bitcoin/bitcoin/pull/20378#issuecomment-726163824,726163824,
jonasschnelli,2020-11-12 16:09:21,Confirmed that this fixes the broken master builds (https://bitcoinbuilds.org/index.php?job=3b3274e1-c511-4799-aad2-38595f9c81fe).,https://github.com/bitcoin/bitcoin/pull/20378#issuecomment-726175149,726175149,
practicalswift,2020-11-12 16:13:00,ACK 440f8d3abe97b96f434dad5216d417a08fc10253,https://github.com/bitcoin/bitcoin/pull/20378#issuecomment-726177468,726177468,
practicalswift,2020-11-12 16:22:22,"> Somewhat related: I think we have a float divide-by-zero in `src/validation.cpp` in the case of `nBlocksTotal == 0`. [gmaxwell suggested](https://github.com/bitcoin/bitcoin/pull/17208#issuecomment-547676331) initializing `nBlocksTotal` to `1` instead of `0` as a simple way to avoid the float divide-by-zero. I think that makes sense.\n\nIt seems like this case got fixed by @instagibbs in ec30a7",https://github.com/bitcoin/bitcoin/pull/20378#issuecomment-726183073,726183073,
laanwj,2020-11-12 22:11:19,Code review ACK 440f8d3abe97b96f434dad5216d417a08fc10253,https://github.com/bitcoin/bitcoin/pull/20378#issuecomment-726370715,726370715,
hebasto,2020-11-12 15:43:10,Could a local variable with `feeCalc.est.pass.totalConfirmed + feeCalc.est.pass.inMempool + feeCalc.est.pass.leftMempool` value improve readability?,https://github.com/bitcoin/bitcoin/pull/20378#discussion_r522204807,522204807,src/wallet/wallet.cpp
jonasschnelli,2020-11-12 15:46:56,I did that initially but changed it to the inline-approach because it's just a log print... and I think it's still readable.,https://github.com/bitcoin/bitcoin/pull/20378#discussion_r522207825,522207825,src/wallet/wallet.cpp
practicalswift,2020-11-12 16:00:07,Nit: Could re-phrase as `(a + b + c) > 0.0 ? 100 * â€¦ / (a + b + c) : 0.0` to avoid comparing floating point with `==` :),https://github.com/bitcoin/bitcoin/pull/20378#discussion_r522218411,522218411,src/wallet/wallet.cpp
practicalswift,2020-11-12 16:00:15,Same nit applies here.,https://github.com/bitcoin/bitcoin/pull/20378#discussion_r522218533,522218533,src/wallet/wallet.cpp
jonasschnelli,2020-11-12 16:11:39,Good point. Fixed.,https://github.com/bitcoin/bitcoin/pull/20378#discussion_r522227265,522227265,src/wallet/wallet.cpp
LarryRuane,2020-11-12 19:56:09,"Suggestion; I haven't tested this yet, but it compiles. (UPDATE: tested)\n```\n    auto sum = [](const EstimatorBucket& b) { return b.totalConfirmed + b.inMempool + b.leftMempool; };\n    WalletLogPrintf(""Fee Calculation: Fee:%d Bytes:%u Needed:%d Tgt:%d (requested %d) Reason:\""%s\"" Decay %.5f: Estimation: (%g - %g) %.2f%% %.1f/(%.1f %d mem %.1f out) Fail: (%g - %g) %.2f%% %.1f/(%.1f %d mem %.1",https://github.com/bitcoin/bitcoin/pull/20378#discussion_r522383042,522383042,src/wallet/wallet.cpp
laanwj,2020-11-12 22:15:33,"Yes, making that a function is a bit more elegant, it makes it clearer that the same value is used for 0-comparison as for division.",https://github.com/bitcoin/bitcoin/pull/20378#discussion_r522462577,522462577,src/wallet/wallet.cpp
ajtowns,2020-11-13 04:23:58,"Or move the whole thing into a lambda?\n\n```c++\n    auto bucket_pct = [](const EstimatorBucket& b) {\n        double sum = b.totalConfirmed + b.inMempool + b.leftMempool;\n        return sum > 0.0 ? (100.0 * b.withinTaget / sum) : 0.0;\n    };\n```\n",https://github.com/bitcoin/bitcoin/pull/20378#discussion_r522611078,522611078,src/wallet/wallet.cpp
