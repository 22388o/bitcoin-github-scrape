[
  {
    "sha": "00d326da75c18e79a8d2c1e81965c4ad5cbf5138",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMGQzMjZkYTc1YzE4ZTc5YThkMmMxZTgxOTY1YzRhZDVjYmY1MTM4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2011-03-17T21:51:59Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2011-03-17T21:51:59Z"
      },
      "message": "Spent per txout\n\nChange some internal data structures to keep track of spentness of each wallet transaction output separately, to support partially-spent transactions:\n* an update to the data structures (vfSpent in CWalletTx instead of fSpent)\n* a backward-compatible update to the wallet disk format. Old clients reading back an updated wallet will ignore partially spent transactions when creating new ones, and may report a wrong balance, though.\n* some helper functions (CWalletTx: IsSpent, MarkSpent, MarkDirty to reset cached values, GetAvailableCredit which only counts unredeemed outputs)",
      "tree": {
        "sha": "0252e0d3622e42b8428e7069c1c48e050a266348",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0252e0d3622e42b8428e7069c1c48e050a266348"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/00d326da75c18e79a8d2c1e81965c4ad5cbf5138",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00d326da75c18e79a8d2c1e81965c4ad5cbf5138",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/00d326da75c18e79a8d2c1e81965c4ad5cbf5138",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00d326da75c18e79a8d2c1e81965c4ad5cbf5138/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b7ebc662eb186bf99beaa04d1d21544ffd2c4b2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7ebc662eb186bf99beaa04d1d21544ffd2c4b2e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b7ebc662eb186bf99beaa04d1d21544ffd2c4b2e"
      }
    ],
    "stats": {
      "total": 188,
      "additions": 145,
      "deletions": 43
    },
    "files": [
      {
        "sha": "933e722059ef36d15596ca8ad8a11ac13354d8c8",
        "filename": "main.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 34,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00d326da75c18e79a8d2c1e81965c4ad5cbf5138/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00d326da75c18e79a8d2c1e81965c4ad5cbf5138/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/main.cpp?ref=00d326da75c18e79a8d2c1e81965c4ad5cbf5138",
        "patch": "@@ -136,11 +136,7 @@ bool AddToWallet(const CWalletTx& wtxIn)\n                 wtx.fFromMe = wtxIn.fFromMe;\n                 fUpdated = true;\n             }\n-            if (wtxIn.fSpent && wtxIn.fSpent != wtx.fSpent)\n-            {\n-                wtx.fSpent = wtxIn.fSpent;\n-                fUpdated = true;\n-            }\n+            fUpdated |= wtx.UpdateSpent(wtxIn.vfSpent);\n         }\n \n         //// debug print\n@@ -221,10 +217,10 @@ void WalletUpdateSpent(const COutPoint& prevout)\n         if (mi != mapWallet.end())\n         {\n             CWalletTx& wtx = (*mi).second;\n-            if (!wtx.fSpent && wtx.vout[prevout.n].IsMine())\n+            if (!wtx.IsSpent(prevout.n) && wtx.vout[prevout.n].IsMine())\n             {\n                 printf(\"WalletUpdateSpent found spent coin %sbc %s\\n\", FormatMoney(wtx.GetCredit()).c_str(), wtx.GetHash().ToString().c_str());\n-                wtx.fSpent = true;\n+                wtx.MarkSpent(prevout.n);\n                 wtx.WriteToDisk();\n                 vWalletUpdated.push_back(prevout.hash);\n             }\n@@ -939,34 +935,34 @@ void ReacceptWalletTransactions()\n         foreach(PAIRTYPE(const uint256, CWalletTx)& item, mapWallet)\n         {\n             CWalletTx& wtx = item.second;\n-            if (wtx.fSpent && wtx.IsCoinBase())\n+            if (wtx.IsCoinBase() && wtx.IsSpent(0))\n                 continue;\n \n             CTxIndex txindex;\n+            bool fUpdated;\n             if (txdb.ReadTxIndex(wtx.GetHash(), txindex))\n             {\n                 // Update fSpent if a tx got spent somewhere else by a copy of wallet.dat\n-                if (!wtx.fSpent)\n+                if (txindex.vSpent.size() != wtx.vout.size())\n                 {\n-                    if (txindex.vSpent.size() != wtx.vout.size())\n-                    {\n-                        printf(\"ERROR: ReacceptWalletTransactions() : txindex.vSpent.size() %d != wtx.vout.size() %d\\n\", txindex.vSpent.size(), wtx.vout.size());\n-                        continue;\n-                    }\n-                    for (int i = 0; i < txindex.vSpent.size(); i++)\n-                    {\n-                        if (!txindex.vSpent[i].IsNull() && wtx.vout[i].IsMine())\n-                        {\n-                            wtx.fSpent = true;\n-                            vMissingTx.push_back(txindex.vSpent[i]);\n-                        }\n-                    }\n-                    if (wtx.fSpent)\n+                    printf(\"ERROR: ReacceptWalletTransactions() : txindex.vSpent.size() %d != wtx.vout.size() %d\\n\", txindex.vSpent.size(), wtx.vout.size());\n+                    continue;\n+                }\n+                for (int i = 0; i < txindex.vSpent.size(); i++)\n+                {\n+                    if (!txindex.vSpent[i].IsNull() && wtx.vout[i].IsMine())\n                     {\n-                        printf(\"ReacceptWalletTransactions found spent coin %sbc %s\\n\", FormatMoney(wtx.GetCredit()).c_str(), wtx.GetHash().ToString().c_str());\n-                        wtx.WriteToDisk();\n+                        wtx.MarkSpent(i);\n+                        fUpdated = true;\n+                        vMissingTx.push_back(txindex.vSpent[i]);\n                     }\n                 }\n+                if (fUpdated)\n+                {\n+                    printf(\"ReacceptWalletTransactions found spent coin %sbc %s\\n\", FormatMoney(wtx.GetCredit()).c_str(), wtx.GetHash().ToString().c_str());\n+                    wtx.MarkDirty();\n+                    wtx.WriteToDisk();\n+                }\n             }\n             else\n             {\n@@ -3732,9 +3728,9 @@ int64 GetBalance()\n         for (map<uint256, CWalletTx>::iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n         {\n             CWalletTx* pcoin = &(*it).second;\n-            if (!pcoin->IsFinal() || pcoin->fSpent || !pcoin->IsConfirmed())\n+            if (!pcoin->IsFinal() || !pcoin->IsConfirmed())\n                 continue;\n-            nTotal += pcoin->GetCredit();\n+            nTotal += pcoin->GetAvailableCredit();\n         }\n     }\n \n@@ -3763,14 +3759,17 @@ bool SelectCoinsMinConf(int64 nTargetValue, int nConfMine, int nConfTheirs, set<\n \n        foreach(CWalletTx* pcoin, vCoins)\n        {\n-            if (!pcoin->IsFinal() || pcoin->fSpent || !pcoin->IsConfirmed())\n+            if (!pcoin->IsFinal() || !pcoin->IsConfirmed())\n+                continue;\n+\n+            if (pcoin->IsCoinBase() && pcoin->GetBlocksToMaturity() > 0)\n                 continue;\n \n             int nDepth = pcoin->GetDepthInMainChain();\n             if (nDepth < (pcoin->IsFromMe() ? nConfMine : nConfTheirs))\n                 continue;\n \n-            int64 n = pcoin->GetCredit();\n+            int64 n = pcoin->GetAvailableCredit();\n             if (n <= 0)\n                 continue;\n             if (n == nTargetValue)\n@@ -4017,12 +4016,11 @@ bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n             // Mark old coins as spent\n             set<CWalletTx*> setCoins;\n             foreach(const CTxIn& txin, wtxNew.vin)\n-                setCoins.insert(&mapWallet[txin.prevout.hash]);\n-            foreach(CWalletTx* pcoin, setCoins)\n             {\n-                pcoin->fSpent = true;\n-                pcoin->WriteToDisk();\n-                vWalletUpdated.push_back(pcoin->GetHash());\n+                CWalletTx &pcoin = mapWallet[txin.prevout.hash];\n+                pcoin.MarkSpent(txin.prevout.n);\n+                pcoin.WriteToDisk();\n+                vWalletUpdated.push_back(pcoin.GetHash());\n             }\n         }\n "
      },
      {
        "sha": "48a5a1f1a9f663e485634caea7d82c2cfeea9b48",
        "filename": "main.h",
        "status": "modified",
        "additions": 113,
        "deletions": 9,
        "changes": 122,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00d326da75c18e79a8d2c1e81965c4ad5cbf5138/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00d326da75c18e79a8d2c1e81965c4ad5cbf5138/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/main.h?ref=00d326da75c18e79a8d2c1e81965c4ad5cbf5138",
        "patch": "@@ -738,6 +738,7 @@ class CMerkleTx : public CTransaction\n         fMerkleVerified = false;\n     }\n \n+\n     IMPLEMENT_SERIALIZE\n     (\n         nSerSize += SerReadWrite(s, *(CTransaction*)this, nType, nVersion, ser_action);\n@@ -774,15 +775,17 @@ class CWalletTx : public CMerkleTx\n     unsigned int fTimeReceivedIsTxTime;\n     unsigned int nTimeReceived;  // time received by this node\n     char fFromMe;\n-    char fSpent;\n     string strFromAccount;\n+    vector<char> vfSpent;\n \n     // memory only\n     mutable char fDebitCached;\n     mutable char fCreditCached;\n+    mutable char fAvailableCreditCached;\n     mutable char fChangeCached;\n     mutable int64 nDebitCached;\n     mutable int64 nCreditCached;\n+    mutable int64 nAvailableCreditCached;\n     mutable int64 nChangeCached;\n \n     // memory only UI hints\n@@ -814,8 +817,8 @@ class CWalletTx : public CMerkleTx\n         fTimeReceivedIsTxTime = false;\n         nTimeReceived = 0;\n         fFromMe = false;\n-        fSpent = false;\n         strFromAccount.clear();\n+        vfSpent.clear();\n         fDebitCached = false;\n         fCreditCached = false;\n         fChangeCached = false;\n@@ -832,22 +835,96 @@ class CWalletTx : public CMerkleTx\n         CWalletTx* pthis = const_cast<CWalletTx*>(this);\n         if (fRead)\n             pthis->Init();\n-        nSerSize += SerReadWrite(s, *(CMerkleTx*)this, nType, nVersion, ser_action);\n-        READWRITE(vtxPrev);\n+        char fSpent = false;\n \n-        pthis->mapValue[\"fromaccount\"] = pthis->strFromAccount;\n-        READWRITE(mapValue);\n-        pthis->strFromAccount = pthis->mapValue[\"fromaccount\"];\n-        pthis->mapValue.erase(\"fromaccount\");\n-        pthis->mapValue.erase(\"version\");\n+        if (!fRead)\n+        {\n+            pthis->mapValue[\"fromaccount\"] = pthis->strFromAccount;\n+\n+            string str;\n+            foreach(char f, vfSpent)\n+            {\n+                str += (f ? '1' : '0');\n+                if (f)\n+                    fSpent = true;\n+            }\n+            pthis->mapValue[\"spent\"] = str;\n+        }\n \n+        nSerSize += SerReadWrite(s, *(CMerkleTx*)this, nType, nVersion,ser_action);\n+        READWRITE(vtxPrev);\n+        READWRITE(mapValue);\n         READWRITE(vOrderForm);\n         READWRITE(fTimeReceivedIsTxTime);\n         READWRITE(nTimeReceived);\n         READWRITE(fFromMe);\n         READWRITE(fSpent);\n+\n+        if (fRead)\n+        {\n+            pthis->strFromAccount = pthis->mapValue[\"fromaccount\"];\n+\n+            if (mapValue.count(\"spent\"))\n+                foreach(char c, pthis->mapValue[\"spent\"])\n+                    pthis->vfSpent.push_back(c != '0');\n+            else\n+                pthis->vfSpent.assign(vout.size(), fSpent);\n+        }\n+\n+        pthis->mapValue.erase(\"fromaccount\");\n+        pthis->mapValue.erase(\"version\");\n+        pthis->mapValue.erase(\"spent\");\n     )\n \n+    // marks certain txout's as spent\n+    // returns true if any update took place\n+    bool UpdateSpent(const vector<char>& vfNewSpent)\n+    {\n+        bool fReturn;\n+        for (int i=0; i < vfNewSpent.size(); i++)\n+        {\n+            if (i == vfSpent.size())\n+                break;\n+\n+            if (vfNewSpent[i] && !vfSpent[i])\n+            {\n+                vfSpent[i] = true;\n+                fReturn = true;\n+                fAvailableCreditCached = false;\n+            }\n+        }\n+        return fReturn;\n+    }\n+\n+    void MarkDirty()\n+    {\n+        fCreditCached = false;\n+        fAvailableCreditCached = false;\n+        fDebitCached = false;\n+        fChangeCached = false;\n+    }\n+\n+    void MarkSpent(unsigned int nOut)\n+    {\n+        if (nOut >= vout.size())\n+            throw runtime_error(\"CWalletTx::MarkSpent() : nOut out of range\");\n+        vfSpent.resize(vout.size());\n+        if (!vfSpent[nOut])\n+        {\n+            vfSpent[nOut] = true;\n+            fAvailableCreditCached = false;\n+        }\n+    }\n+\n+    bool IsSpent(unsigned int nOut) const\n+    {\n+        if (nOut >= vout.size())\n+            throw runtime_error(\"CWalletTx::IsSpent() : nOut out of range\");\n+        if (nOut >= vfSpent.size())\n+            return false;\n+        return (!!vfSpent[nOut]);\n+    }\n+\n     int64 GetDebit() const\n     {\n         if (vin.empty())\n@@ -873,6 +950,33 @@ class CWalletTx : public CMerkleTx\n         return nCreditCached;\n     }\n \n+    int64 GetAvailableCredit(bool fUseCache=true) const\n+    {\n+        // Must wait until coinbase is safely deep enough in the chain before valuing it\n+        if (IsCoinBase() && GetBlocksToMaturity() > 0)\n+            return 0;\n+\n+        if (fUseCache && fAvailableCreditCached)\n+            return nAvailableCreditCached;\n+\n+        int64 nCredit = 0;\n+        for (int i = 0; i < vout.size(); i++)\n+        {\n+            if (!IsSpent(i))\n+            {\n+                const CTxOut &txout = vout[i];\n+                nCredit += txout.GetCredit();\n+                if (!MoneyRange(nCredit))\n+                    throw runtime_error(\"CWalletTx::GetAvailableCredit() : value out of range\");\n+            }\n+        }\n+\n+        nAvailableCreditCached = nCredit;\n+        fAvailableCreditCached = true;\n+        return nCredit;\n+    }\n+\n+\n     int64 GetChange() const\n     {\n         if (fChangeCached)"
      }
    ]
  }
]