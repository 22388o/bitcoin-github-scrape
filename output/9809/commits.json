[
  {
    "sha": "b0819c7e9b428631b806d97ff19beb2e218df31f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMDgxOWM3ZTliNDI4NjMxYjgwNmQ5N2ZmMTliZWIyZTIxOGRmMzFm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-16T19:59:28Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-16T19:59:50Z"
      },
      "message": "qt: periodic translations update",
      "tree": {
        "sha": "749a95728d29b2da0737f6d5d05280079eb1f46a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/749a95728d29b2da0737f6d5d05280079eb1f46a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b0819c7e9b428631b806d97ff19beb2e218df31f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYfSY4AAoJEHSBCwEjRsmmHg8H/jblDyYEbhpIerfrjT1CwIdd\n4drIcYzsFyp3on9gJ/gNbVJavGh7Sjx/Iz0wjWPw4N8ZJbiK1uT0qYnb4wFrIcSa\nIF9CMIGpDSUuCkveSHmrUoj8t+E4ySCKJwIxO24AnvWE2ZKjoVeuvJDsh6URiZAy\nzY/YGL11x4LlOtjWduzqyk2DlHSpT47YIY226mdCLsuULvtWhnwyRvlY1rORDL06\nv1dkywWBlTHy84NRl+nmd1zSFAVFOt5ZsAWZp4sdr35nxV0JXjM+VLHO1ZASVMfs\nYln1MNIXo5VuXtmDpDf3uiojE16A3uGsEVeE8hmie3cbGol+8PEI4mL089RGet8=\n=CsIz\n-----END PGP SIGNATURE-----",
        "payload": "tree 749a95728d29b2da0737f6d5d05280079eb1f46a\nparent dd98f045382428f450dc917a3933c9e4e8e1ba99\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1484596768 +0000\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1484596790 +0100\n\nqt: periodic translations update\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0819c7e9b428631b806d97ff19beb2e218df31f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b0819c7e9b428631b806d97ff19beb2e218df31f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0819c7e9b428631b806d97ff19beb2e218df31f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dd98f045382428f450dc917a3933c9e4e8e1ba99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd98f045382428f450dc917a3933c9e4e8e1ba99",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dd98f045382428f450dc917a3933c9e4e8e1ba99"
      }
    ],
    "stats": {
      "total": 826,
      "additions": 657,
      "deletions": 169
    },
    "files": [
      {
        "sha": "64bc7dac038cbff88e9b0103dd5d275312c39f0f",
        "filename": "src/qt/bitcoinstrings.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0819c7e9b428631b806d97ff19beb2e218df31f/src/qt/bitcoinstrings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0819c7e9b428631b806d97ff19beb2e218df31f/src/qt/bitcoinstrings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinstrings.cpp?ref=b0819c7e9b428631b806d97ff19beb2e218df31f",
        "patch": "@@ -132,14 +132,21 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Randomize credentials for every proxy connection. This enables Tor stream \"\n \"isolation (default: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n-\"Reduce storage requirements by pruning (deleting) old blocks. This mode is \"\n-\"incompatible with -txindex and -rescan. Warning: Reverting this setting \"\n-\"requires re-downloading the entire blockchain. (default: 0 = disable pruning \"\n-\"blocks, >%u = target size in MiB to use for block files)\"),\n+\"Reduce storage requirements by enabling pruning (deleting) of old blocks. \"\n+\"This allows the pruneblockchain RPC to be called to delete specific blocks, \"\n+\"and enables automatic pruning of old blocks if a target size in MiB is \"\n+\"provided. This mode is incompatible with -txindex and -rescan. Warning: \"\n+\"Reverting this setting requires re-downloading the entire blockchain. \"\n+\"(default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, >%u \"\n+\"= automatically prune block files to stay under the specified target size in \"\n+\"MiB)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Rescans are not possible in pruned mode. You will need to use -reindex which \"\n \"will download the whole blockchain again.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n+\"Set lowest fee rate (in %s/kB) for transactions to be included in block \"\n+\"creation. (default: %s)\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Set maximum size of high-priority/low-fee transactions in bytes (default: %d)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Set the number of script verification threads (%u to %d, 0 = auto, <0 = \""
      },
      {
        "sha": "3b5d7947f6bea78649a20ffa89bf5e09a7412000",
        "filename": "src/qt/locale/bitcoin_cs.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0819c7e9b428631b806d97ff19beb2e218df31f/src/qt/locale/bitcoin_cs.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0819c7e9b428631b806d97ff19beb2e218df31f/src/qt/locale/bitcoin_cs.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_cs.ts?ref=b0819c7e9b428631b806d97ff19beb2e218df31f",
        "patch": "@@ -3705,10 +3705,6 @@\n         <source>Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)</source>\n         <translation>Pou\u017e\u00edt samostatnou SOCKS5 proxy ke spojen\u00ed s prot\u011bj\u0161ky p\u0159es skryt\u00e9 slu\u017eby v Toru (v\u00fdchoz\u00ed: %s)</translation>\n     </message>\n-    <message>\n-        <source>Username and hashed password for JSON-RPC connections. The field &lt;userpw&gt; comes in the format: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. A canonical python script is included in share/rpcuser. This option can be specified multiple times</source>\n-        <translation>U\u017eivatelsk\u00e9 jm\u00e9no a zaha\u0161ovan\u00e9 heslo pro JSON-RPC spojen\u00ed. Pole &lt;userpw&gt; m\u00e1 form\u00e1t: &lt;U\u017dIVATELSK\u00c9_JM\u00c9NO&gt;:&lt;S\u016eL&gt;$&lt;HA\u0160&gt;. Pomocn\u00fd pythonn\u00ed skript je p\u0159ilo\u017een v share/rpcuser. Tuto volbu lze pou\u017e\u00edt i v\u00edcekr\u00e1t</translation>\n-    </message>\n     <message>\n         <source>Warning: Unknown block versions being mined! It's possible unknown rules are in effect</source>\n         <translation>Upozorn\u011bn\u00ed: S\u00ed\u0165 t\u011b\u017e\u00ed nezn\u00e1m\u00e9 verze blok\u016f! Je mo\u017en\u00e9, \u017ee jsou v platnosti nezn\u00e1m\u00e1 pravidla</translation>"
      },
      {
        "sha": "0b49b5aefcd9707b769c0d15c870a2082bea3c45",
        "filename": "src/qt/locale/bitcoin_da.ts",
        "status": "modified",
        "additions": 12,
        "deletions": 4,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0819c7e9b428631b806d97ff19beb2e218df31f/src/qt/locale/bitcoin_da.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0819c7e9b428631b806d97ff19beb2e218df31f/src/qt/locale/bitcoin_da.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_da.ts?ref=b0819c7e9b428631b806d97ff19beb2e218df31f",
        "patch": "@@ -2204,6 +2204,14 @@\n         <source>Warning: Unknown change address</source>\n         <translation>Advarsel: Ukendt byttepengeadresse</translation>\n     </message>\n+    <message>\n+        <source>Confirm custom change address</source>\n+        <translation>Bekr\u00e6ft tilpasset byttepengeadresse</translation>\n+    </message>\n+    <message>\n+        <source>The address you selected for change is not part of this wallet. Any or all funds in your wallet may be sent to this address. Are you sure?</source>\n+        <translation>Den adresse, du har valgt til byttepenge, er ikke en del af denne tegnebog. Nogle af eller alle penge i din tegnebog kan blive sendt til denne adresse. Er du sikker?</translation>\n+    </message>\n     <message>\n         <source>(no label)</source>\n         <translation>(ingen m\u00e6rkat)</translation>\n@@ -3125,6 +3133,10 @@\n         <source>Use UPnP to map the listening port (default: 1 when listening and no -proxy)</source>\n         <translation>Brug UPnP for at konfigurere den lyttende port (standard: 1 under lytning og ingen -proxy)</translation>\n     </message>\n+    <message>\n+        <source>Username and hashed password for JSON-RPC connections. The field &lt;userpw&gt; comes in the format: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. A canonical python script is included in share/rpcuser. The client then connects normally using the rpcuser=&lt;USERNAME&gt;/rpcpassword=&lt;PASSWORD&gt; pair of arguments. This option can be specified multiple times</source>\n+        <translation>Brugernavn og hashet adgangskode for JSON-RPC-forbindelser. Feltet &lt;userpw&gt; er i formatet: &lt;BRUGERNAVN&gt;:&lt;SALT&gt;$&lt;HASH&gt;. Et kanonisk Python-skript er inkluderet i share/rpcuser. Klienten forbinder s\u00e5 normalt ved hj\u00e6lp af argumentparret rpcuser=&lt;BRUGERNAVN&gt;/rpcpassword=&lt;ADGANGSKODE&gt;. Dette tilvalg kan angives flere gange</translation>\n+    </message>\n     <message>\n         <source>Wallet will not create transactions that violate mempool chain limits (default: %u)</source>\n         <translation>Tegnebogen vil ikke oprette transaktioner, som overtr\u00e6der begr\u00e6nsningen for hukommelsespuljek\u00e6den (standard: %u)</translation>\n@@ -3705,10 +3717,6 @@\n         <source>Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)</source>\n         <translation>Brug separat SOCS5-proxy for at n\u00e5 knuder via skjulte Tor-tjenester (standard: %s)</translation>\n     </message>\n-    <message>\n-        <source>Username and hashed password for JSON-RPC connections. The field &lt;userpw&gt; comes in the format: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. A canonical python script is included in share/rpcuser. This option can be specified multiple times</source>\n-        <translation>Brugernavn og hashet adgangskode for JSON-RPC-forbindelser. Feltet &lt;userpw&gt; er i formatet: &lt;BRUGERNAVN&gt;:&lt;SALT&gt;$&lt;HASH&gt;. Et kanonisk Python-skript inkluderes i share/rpcuser. Dette tilvalg kan angives flere gange</translation>\n-    </message>\n     <message>\n         <source>Warning: Unknown block versions being mined! It's possible unknown rules are in effect</source>\n         <translation>Advarsel: Ukendte blokversioner bliver minet! Det er muligt, at ukendte regler er i brug</translation>"
      },
      {
        "sha": "1dfd77cf61c571930e29b8c289c48272715115fd",
        "filename": "src/qt/locale/bitcoin_de.ts",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0819c7e9b428631b806d97ff19beb2e218df31f/src/qt/locale/bitcoin_de.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0819c7e9b428631b806d97ff19beb2e218df31f/src/qt/locale/bitcoin_de.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_de.ts?ref=b0819c7e9b428631b806d97ff19beb2e218df31f",
        "patch": "@@ -2589,6 +2589,10 @@\n         <source>Transaction total size</source>\n         <translation>Gesamte Transaktionsgr\u00f6\u00dfe</translation>\n     </message>\n+    <message>\n+        <source>Output index</source>\n+        <translation>Ausgabeindex</translation>\n+    </message>\n     <message>\n         <source>Merchant</source>\n         <translation>H\u00e4ndler</translation>\n@@ -3661,10 +3665,6 @@\n         <source>Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)</source>\n         <translation>Separaten SOCKS5-Proxy verwenden, um Gegenstellen \u00fcber versteckte Tor-Dienste zu erreichen (Standard: %s)</translation>\n     </message>\n-    <message>\n-        <source>Username and hashed password for JSON-RPC connections. The field &lt;userpw&gt; comes in the format: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. A canonical python script is included in share/rpcuser. This option can be specified multiple times</source>\n-        <translation>Benutzername und gehashtes Passwort f\u00fcr JSON-RPC Verbindungen. Das Feld &lt;userpw&gt; kommt im Format: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. Ein entsprechendes Pythonskript ist in share/rpcuser inbegriffen. Diese Option kann mehrere Male spezifiziert werden</translation>\n-    </message>\n     <message>\n         <source>Warning: Unknown block versions being mined! It's possible unknown rules are in effect</source>\n         <translation>Warnung: Unbekannte Blockversion wird durch Mining erzeugt! Es ist m\u00f6glich, dass unbekannte Regeln in Kraft sind.</translation>"
      },
      {
        "sha": "60dcc9f701c5acbe591341a89502ca8788209320",
        "filename": "src/qt/locale/bitcoin_en.ts",
        "status": "modified",
        "additions": 23,
        "deletions": 18,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0819c7e9b428631b806d97ff19beb2e218df31f/src/qt/locale/bitcoin_en.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0819c7e9b428631b806d97ff19beb2e218df31f/src/qt/locale/bitcoin_en.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_en.ts?ref=b0819c7e9b428631b806d97ff19beb2e218df31f",
        "patch": "@@ -778,7 +778,7 @@\n         <translation type=\"unfinished\">Confirmed</translation>\n     </message>\n     <message>\n-        <location filename=\"../coincontroldialog.cpp\" line=\"+54\"/>\n+        <location filename=\"../coincontroldialog.cpp\" line=\"+55\"/>\n         <source>Copy address</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3862,7 +3862,7 @@\n <context>\n     <name>bitcoin-core</name>\n     <message>\n-        <location filename=\"../bitcoinstrings.cpp\" line=\"+304\"/>\n+        <location filename=\"../bitcoinstrings.cpp\" line=\"+311\"/>\n         <source>Options:</source>\n         <translation>Options:</translation>\n     </message>\n@@ -3887,7 +3887,7 @@\n         <translation>Accept command line and JSON-RPC commands</translation>\n     </message>\n     <message>\n-        <location line=\"-207\"/>\n+        <location line=\"-214\"/>\n         <source>Accept connections from outside (default: 1 if no -proxy or -connect/-noconnect)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3917,17 +3917,12 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+9\"/>\n-        <source>Reduce storage requirements by pruning (deleting) old blocks. This mode is incompatible with -txindex and -rescan. Warning: Reverting this setting requires re-downloading the entire blockchain. (default: 0 = disable pruning blocks, &gt;%u = target size in MiB to use for block files)</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n-    <message>\n-        <location line=\"+5\"/>\n+        <location line=\"+18\"/>\n         <source>Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+129\"/>\n+        <location line=\"+132\"/>\n         <source>Error: A fatal internal error occurred, see debug.log for details</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3952,7 +3947,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-346\"/>\n+        <location line=\"-353\"/>\n         <source>Bitcoin Core</source>\n         <translation type=\"unfinished\">Bitcoin Core</translation>\n     </message>\n@@ -4022,7 +4017,17 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+24\"/>\n+        <location line=\"+14\"/>\n+        <source>Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex and -rescan. Warning: Reverting this setting requires re-downloading the entire blockchain. (default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, &gt;%u = automatically prune block files to stay under the specified target size in MiB)</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+12\"/>\n+        <source>Set lowest fee rate (in %s/kB) for transactions to be included in block creation. (default: %s)</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+5\"/>\n         <source>Set the number of script verification threads (%u to %d, 0 = auto, &lt;0 = leave that many cores free, default: %d)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4397,7 +4402,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-344\"/>\n+        <location line=\"-351\"/>\n         <source>Allow JSON-RPC connections from specified source. Valid for &lt;ip&gt; are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4457,7 +4462,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+11\"/>\n+        <location line=\"+18\"/>\n         <source>Set maximum size of high-priority/low-fee transactions in bytes (default: %d)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4662,12 +4667,12 @@\n         <translation>Password for JSON-RPC connections</translation>\n     </message>\n     <message>\n-        <location line=\"-228\"/>\n+        <location line=\"-235\"/>\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>Execute command when the best block changes (%s in cmd is replaced by block hash)</translation>\n     </message>\n     <message>\n-        <location line=\"+156\"/>\n+        <location line=\"+163\"/>\n         <source>Allow DNS lookups for -addnode, -seednode and -connect</source>\n         <translation>Allow DNS lookups for -addnode, -seednode and -connect</translation>\n     </message>\n@@ -4677,7 +4682,7 @@\n         <translation>Loading addresses...</translation>\n     </message>\n     <message>\n-        <location line=\"-277\"/>\n+        <location line=\"-284\"/>\n         <source>(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4732,7 +4737,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+19\"/>\n+        <location line=\"+26\"/>\n         <source>Sets the serialization of raw transaction or block hex returned in non-verbose mode, non-segwit(0) or segwit(1) (default: %d)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>"
      },
      {
        "sha": "1676f67979e2669e92fff5bd8f126349c0729df3",
        "filename": "src/qt/locale/bitcoin_en_GB.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0819c7e9b428631b806d97ff19beb2e218df31f/src/qt/locale/bitcoin_en_GB.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0819c7e9b428631b806d97ff19beb2e218df31f/src/qt/locale/bitcoin_en_GB.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_en_GB.ts?ref=b0819c7e9b428631b806d97ff19beb2e218df31f",
        "patch": "@@ -2513,10 +2513,6 @@\n         <source>Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)</source>\n         <translation>Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)</translation>\n     </message>\n-    <message>\n-        <source>Username and hashed password for JSON-RPC connections. The field &lt;userpw&gt; comes in the format: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. A canonical python script is included in share/rpcuser. This option can be specified multiple times</source>\n-        <translation>Username and hashed password for JSON-RPC connections. The field &lt;userpw&gt; comes in the format: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. A canonical python script is included in share/rpcuser. This option can be specified multiple times</translation>\n-    </message>\n     <message>\n         <source>Warning: Unknown block versions being mined! It's possible unknown rules are in effect</source>\n         <translation>Warning: Unknown block versions being mined! It's possible unknown rules are in effect</translation>"
      },
      {
        "sha": "5ba44a954c849f2231f43adfde9645a0461b685c",
        "filename": "src/qt/locale/bitcoin_es.ts",
        "status": "modified",
        "additions": 63,
        "deletions": 7,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0819c7e9b428631b806d97ff19beb2e218df31f/src/qt/locale/bitcoin_es.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0819c7e9b428631b806d97ff19beb2e218df31f/src/qt/locale/bitcoin_es.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_es.ts?ref=b0819c7e9b428631b806d97ff19beb2e218df31f",
        "patch": "@@ -1360,7 +1360,15 @@\n         <source>Node/Service</source>\n         <translation>Nodo/Servicio</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>NodeId</source>\n+        <translation>ID de nodo</translation>\n+    </message>\n+    <message>\n+        <source>Ping</source>\n+        <translation>Sonido</translation>\n+    </message>\n+</context>\n <context>\n     <name>QObject</name>\n     <message>\n@@ -1399,14 +1407,54 @@\n         <source>%1 ms</source>\n         <translation>%1 ms</translation>\n     </message>\n+    <message numerus=\"yes\">\n+        <source>%n second(s)</source>\n+        <translation><numerusform>%n segundo</numerusform><numerusform>%n segundos</numerusform></translation>\n+    </message>\n+    <message numerus=\"yes\">\n+        <source>%n minute(s)</source>\n+        <translation><numerusform>%n minuto</numerusform><numerusform>%n minutos</numerusform></translation>\n+    </message>\n+    <message numerus=\"yes\">\n+        <source>%n hour(s)</source>\n+        <translation><numerusform>%n hora</numerusform><numerusform>%n horas</numerusform></translation>\n+    </message>\n+    <message numerus=\"yes\">\n+        <source>%n day(s)</source>\n+        <translation><numerusform>%n dia</numerusform><numerusform>%n dias</numerusform></translation>\n+    </message>\n+    <message numerus=\"yes\">\n+        <source>%n week(s)</source>\n+        <translation><numerusform>%n semana</numerusform><numerusform>%n semanas</numerusform></translation>\n+    </message>\n     <message>\n         <source>%1 and %2</source>\n         <translation>%1 y %2</translation>\n     </message>\n-    </context>\n+    <message numerus=\"yes\">\n+        <source>%n year(s)</source>\n+        <translation><numerusform>%n a\u00f1o</numerusform><numerusform>%n a\u00f1os</numerusform></translation>\n+    </message>\n+    <message>\n+        <source>%1 didn't yet exit safely...</source>\n+        <translation>%1 no se ha cerrado de forma segura todav\u00eda...</translation>\n+    </message>\n+</context>\n <context>\n     <name>QObject::QObject</name>\n-    </context>\n+    <message>\n+        <source>Error: Specified data directory \"%1\" does not exist.</source>\n+        <translation>Error: El directorio de datos \u00ab%1\u00bb especificado no existe.</translation>\n+    </message>\n+    <message>\n+        <source>Error: Cannot parse configuration file: %1. Only use key=value syntax.</source>\n+        <translation>Error: No se puede analizar el archivo de configuraci\u00f3n: %1. Utilice \u00fanicamente la sintaxis clave=valor.</translation>\n+    </message>\n+    <message>\n+        <source>Error: %1</source>\n+        <translation>Error: %1</translation>\n+    </message>\n+</context>\n <context>\n     <name>QRImageWidget</name>\n     <message>\n@@ -1584,6 +1632,10 @@\n         <source>Ping Wait</source>\n         <translation>Espera de Ping</translation>\n     </message>\n+    <message>\n+        <source>Min Ping</source>\n+        <translation>Sonido M\u00ednimo</translation>\n+    </message>\n     <message>\n         <source>Time Offset</source>\n         <translation>Desplazamiento de tiempo</translation>\n@@ -1644,6 +1696,14 @@\n         <source>1 &amp;year</source>\n         <translation>1 &amp;a\u00f1o</translation>\n     </message>\n+    <message>\n+        <source>&amp;Disconnect</source>\n+        <translation>&amp;Desconectar</translation>\n+    </message>\n+    <message>\n+        <source>Ban for</source>\n+        <translation>Prohibir para</translation>\n+    </message>\n     <message>\n         <source>Welcome to the %1 RPC console.</source>\n         <translation>Bienvenido a la consola RPC %1.</translation>\n@@ -3546,10 +3606,6 @@\n         <source>Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)</source>\n         <translation>Usar distintos proxys SOCKS5 para comunicarse v\u00eda Tor de forma an\u00f3nima (Por defecto: %s)</translation>\n     </message>\n-    <message>\n-        <source>Username and hashed password for JSON-RPC connections. The field &lt;userpw&gt; comes in the format: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. A canonical python script is included in share/rpcuser. This option can be specified multiple times</source>\n-        <translation>Nombre de usuario y hash de la contrase\u00f1a para las conexiones JSON-RPC. El campo &lt;userpw&gt; tiene el formato: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. Se incluye un script python convencional en share/rpcuser. Esta opci\u00f3n puede ser especificada multiples veces</translation>\n-    </message>\n     <message>\n         <source>Warning: Unknown block versions being mined! It's possible unknown rules are in effect</source>\n         <translation>Advertencia: Se est\u00e1n minando versiones de bloques desconocidas! Es posible que normas desconocidas est\u00e9n activas</translation>"
      },
      {
        "sha": "c971d664d8bbeb435ec2a1671ef8222531e46c4a",
        "filename": "src/qt/locale/bitcoin_es_ES.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0819c7e9b428631b806d97ff19beb2e218df31f/src/qt/locale/bitcoin_es_ES.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0819c7e9b428631b806d97ff19beb2e218df31f/src/qt/locale/bitcoin_es_ES.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_es_ES.ts?ref=b0819c7e9b428631b806d97ff19beb2e218df31f",
        "patch": "@@ -3482,10 +3482,6 @@\n         <source>Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)</source>\n         <translation>Usar distintos proxys SOCKS5 para comunicarse v\u00eda Tor de forma an\u00f3nima (Por defecto: %s)</translation>\n     </message>\n-    <message>\n-        <source>Username and hashed password for JSON-RPC connections. The field &lt;userpw&gt; comes in the format: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. A canonical python script is included in share/rpcuser. This option can be specified multiple times</source>\n-        <translation>Nombre de usuario y hash de la contrase\u00f1a para las conexiones JSON-RPC. El campo &lt;userpw&gt; tiene el formato: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. Se incluye un script python convencional en share/rpcuser. Esta opci\u00f3n puede ser especificada multiples veces</translation>\n-    </message>\n     <message>\n         <source>Warning: Unknown block versions being mined! It's possible unknown rules are in effect</source>\n         <translation>Advertencia: Se est\u00e1n minando versiones de bloques desconocidas! Es posible que normas desconocidas est\u00e9n activas</translation>"
      },
      {
        "sha": "eef88b43a35a79dda91ea0be3e6cdb034bdd4e78",
        "filename": "src/qt/locale/bitcoin_fr.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0819c7e9b428631b806d97ff19beb2e218df31f/src/qt/locale/bitcoin_fr.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0819c7e9b428631b806d97ff19beb2e218df31f/src/qt/locale/bitcoin_fr.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_fr.ts?ref=b0819c7e9b428631b806d97ff19beb2e218df31f",
        "patch": "@@ -3705,10 +3705,6 @@\n         <source>Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)</source>\n         <translation>Utiliser un serveur mandataire SOCKS5 s\u00e9par\u00e9 pour atteindre les pairs par les services cach\u00e9s de Tor (par d\u00e9faut : %s)</translation>\n     </message>\n-    <message>\n-        <source>Username and hashed password for JSON-RPC connections. The field &lt;userpw&gt; comes in the format: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. A canonical python script is included in share/rpcuser. This option can be specified multiple times</source>\n-        <translation>Nom d'utilisateur et mot de passe hach\u00e9 pour les connexions JSON-RPC. Le champ &lt;userpw&gt; vient au format : &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. Un script python canonique est inclus dans share/rpcuser. Cette option peut \u00eatre sp\u00e9cifi\u00e9e plusieurs fois.</translation>\n-    </message>\n     <message>\n         <source>Warning: Unknown block versions being mined! It's possible unknown rules are in effect</source>\n         <translation>Avertissement : des versions de blocs inconnues sont min\u00e9es ! Il est possible que des r\u00e8gles inconnues soient en vigeur</translation>"
      },
      {
        "sha": "76cfdfafa53c8fbc70af32a9ac26dfcf2c4b5561",
        "filename": "src/qt/locale/bitcoin_it.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0819c7e9b428631b806d97ff19beb2e218df31f/src/qt/locale/bitcoin_it.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0819c7e9b428631b806d97ff19beb2e218df31f/src/qt/locale/bitcoin_it.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_it.ts?ref=b0819c7e9b428631b806d97ff19beb2e218df31f",
        "patch": "@@ -2582,10 +2582,6 @@ Per specificare pi\u00f9 URL separarli con una barra verticale \"|\".</translation>\n         <source>Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)</source>\n         <translation>Usa un proxy SOCKS5 a parte per raggiungere i peer attraverso gli hidden services di Tor (predefinito: %s)</translation>\n     </message>\n-    <message>\n-        <source>Username and hashed password for JSON-RPC connections. The field &lt;userpw&gt; comes in the format: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. A canonical python script is included in share/rpcuser. This option can be specified multiple times</source>\n-        <translation>Username e hash password per connessioni JSON-RPC. Il campo &lt;userpw&gt; utilizza il formato: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. Uno script python standard \u00e8 incluso in share/rpcuser. Questa opzione pu\u00f2 essere specificata pi\u00f9 volte</translation>\n-    </message>\n     <message>\n         <source>Warning: Unknown block versions being mined! It's possible unknown rules are in effect</source>\n         <translation>Attenzione: si stanno minando versioni sconocsiute di blocchi! E' possibile che siano attive regole sconosciute</translation>"
      },
      {
        "sha": "3b56a7685501c6ea8ee024c4ef68aef123a92ae5",
        "filename": "src/qt/locale/bitcoin_ja.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0819c7e9b428631b806d97ff19beb2e218df31f/src/qt/locale/bitcoin_ja.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0819c7e9b428631b806d97ff19beb2e218df31f/src/qt/locale/bitcoin_ja.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ja.ts?ref=b0819c7e9b428631b806d97ff19beb2e218df31f",
        "patch": "@@ -3706,10 +3706,6 @@\n         <source>Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)</source>\n         <translation>Tor \u79d8\u533f\u30b5\u30fc\u30d3\u30b9\u3092\u901a\u3057\u3001\u5225\u3005\u306e SOCKS5 \u30d7\u30ed\u30ad\u30b7\u3092\u7528\u3044\u308b\u3053\u3068\u3067\u30d4\u30a2\u306b\u5230\u9054\u3059\u308b (\u521d\u671f\u5024: %s)</translation>\n     </message>\n-    <message>\n-        <source>Username and hashed password for JSON-RPC connections. The field &lt;userpw&gt; comes in the format: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. A canonical python script is included in share/rpcuser. This option can be specified multiple times</source>\n-        <translation>JSON-RPC\u63a5\u7d9a\u6642\u306e\u30e6\u30fc\u30b6\u540d\u3068\u30cf\u30c3\u30b7\u30e5\u5316\u3055\u308c\u305f\u30d1\u30b9\u30ef\u30fc\u30c9\u3002&lt;userpw&gt; \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306f &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;\u3002\u6a19\u6e96\u7684\u306a Python \u30b9\u30af\u30ea\u30d7\u30c8\u304c share/rpcuser \u5185\u306b\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u8907\u6570\u56de\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002</translation>\n-    </message>\n     <message>\n         <source>Warning: Unknown block versions being mined! It's possible unknown rules are in effect</source>\n         <translation>\u8b66\u544a: \u672a\u77e5\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u30d6\u30ed\u30c3\u30af\u304c\u63a1\u6398\u3055\u308c\u307e\u3057\u305f\u3002\u672a\u77e5\u306e\u30eb\u30fc\u30eb\u304c\u5c0e\u5165\u3055\u308c\u305f\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059</translation>"
      },
      {
        "sha": "a80c6ccc452c6a6a9d746164408ca6d29ae41de0",
        "filename": "src/qt/locale/bitcoin_ko_KR.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0819c7e9b428631b806d97ff19beb2e218df31f/src/qt/locale/bitcoin_ko_KR.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0819c7e9b428631b806d97ff19beb2e218df31f/src/qt/locale/bitcoin_ko_KR.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ko_KR.ts?ref=b0819c7e9b428631b806d97ff19beb2e218df31f",
        "patch": "@@ -2897,10 +2897,6 @@\n         <source>Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)</source>\n         <translation>Tor \uc11c\ube44\uc2a4\ub97c \uc774\uc6a9\ud558\uc5ec \ud53c\uc5b4\uc5d0\uac8c \uc5f0\uacb0\ud558\uae30 \uc704\ud574 \ubd84\ub9ac\ub41c SOCKS5 \ud504\ub85d\uc2dc\ub97c \uc0ac\uc6a9 (\uae30\ubcf8\uac12: %s)</translation>\n     </message>\n-    <message>\n-        <source>Username and hashed password for JSON-RPC connections. The field &lt;userpw&gt; comes in the format: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. A canonical python script is included in share/rpcuser. This option can be specified multiple times</source>\n-        <translation>JSON-RPC \uc5f0\uacb0\uc2dc \uc0ac\uc6a9\uc790 \uc774\ub984\uacfc \ud574\uc2dc\ud654\ub41c \uc554\ud638\ubb38. &lt;userpw&gt; \ud544\ub4dc\ub294 &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt; \ud3ec\uba67\uc73c\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uc804\ud615\uc801 \ud30c\uc774\uc36c \uc2a4\ud06c\ub9bd\ud2b8\uc5d0\uc120 share/rpcuser\uac00 \ud3ec\ud568\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uc635\uc158\uc740 \uc5ec\ub7ec\ubc88 \uc9c0\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</translation>\n-    </message>\n     <message>\n         <source>Warning: Unknown block versions being mined! It's possible unknown rules are in effect</source>\n         <translation>\uacbd\uace0: \uc54c\ub824\uc9c0\uc9c0 \uc54a\uc740 \ubc84\uc804\uc758 \ube14\ub85d\uc774 \ucc44\uad74\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc54c\ub824\uc9c0\uc9c0 \uc54a\uc740 \uaddc\uce59\uc774 \uc801\uc6a9\ub418\uc5c8\uc744 \uac00\ub2a5\uc131\uc774 \uc788\uc2b5\ub2c8\ub2e4.</translation>"
      },
      {
        "sha": "f98cdd32d22bef9b96b85369e0a88467edd395b4",
        "filename": "src/qt/locale/bitcoin_nb.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0819c7e9b428631b806d97ff19beb2e218df31f/src/qt/locale/bitcoin_nb.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0819c7e9b428631b806d97ff19beb2e218df31f/src/qt/locale/bitcoin_nb.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_nb.ts?ref=b0819c7e9b428631b806d97ff19beb2e218df31f",
        "patch": "@@ -2201,10 +2201,6 @@\n         <source>Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)</source>\n         <translation>Bruk separate SOCKS5 proxyer for \u00e5 n\u00e5 noder via Tor skjulte tjenester (standardverdi: %s)</translation>\n     </message>\n-    <message>\n-        <source>Username and hashed password for JSON-RPC connections. The field &lt;userpw&gt; comes in the format: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. A canonical python script is included in share/rpcuser. This option can be specified multiple times</source>\n-        <translation>Brukernavn og hashet passord for JSON-RPC tilkoblinger. Feltet &lt;userpw&gt; kommer i formatet: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. Et Python-skript er inkludert i share/rpcuser. Dette alternativet kan angis flere ganger</translation>\n-    </message>\n     <message>\n         <source>(default: %s)</source>\n         <translation>(standardverdi: %s)</translation>"
      },
      {
        "sha": "8a09bed2ce09e512fc398a5a9e992274e0c6dfea",
        "filename": "src/qt/locale/bitcoin_nl.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0819c7e9b428631b806d97ff19beb2e218df31f/src/qt/locale/bitcoin_nl.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0819c7e9b428631b806d97ff19beb2e218df31f/src/qt/locale/bitcoin_nl.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_nl.ts?ref=b0819c7e9b428631b806d97ff19beb2e218df31f",
        "patch": "@@ -3481,10 +3481,6 @@\n         <source>Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)</source>\n         <translation>Gebruik een aparte SOCKS5 proxy om verborgen diensten van Tor te bereiken (standaard: %s)</translation>\n     </message>\n-    <message>\n-        <source>Username and hashed password for JSON-RPC connections. The field &lt;userpw&gt; comes in the format: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. A canonical python script is included in share/rpcuser. This option can be specified multiple times</source>\n-        <translation>Gebruikersnaam en gehasht wachtwoord voor JSON-RPC-verbindingen. De velden &lt;userpw&gt; is in het formaat: &lt;GEBRUIKERSNAAM&gt;:&lt;SALT&gt;$&lt;HASH&gt;. Een kanoniek Pythonscript is inbegrepen in de share/rpcuser. Deze optie kan meerdere keren worden meegegeven</translation>\n-    </message>\n     <message>\n         <source>Warning: Unknown block versions being mined! It's possible unknown rules are in effect</source>\n         <translation>Waarschuwing: Onbekende blok versies worden gemined! Er zijn mogelijk onbekende regels in werking getreden</translation>"
      },
      {
        "sha": "4d49399c11f31543a0e54c586df9fed6f0a3b3ca",
        "filename": "src/qt/locale/bitcoin_pt_BR.ts",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0819c7e9b428631b806d97ff19beb2e218df31f/src/qt/locale/bitcoin_pt_BR.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0819c7e9b428631b806d97ff19beb2e218df31f/src/qt/locale/bitcoin_pt_BR.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_pt_BR.ts?ref=b0819c7e9b428631b806d97ff19beb2e218df31f",
        "patch": "@@ -2196,6 +2196,10 @@\n         <source>Warning: Unknown change address</source>\n         <translation>Aviso: Endere\u00e7o de troco inv\u00e1lido</translation>\n     </message>\n+    <message>\n+        <source>Confirm custom change address</source>\n+        <translation>Confirmar endere\u00e7o de troco personalizado</translation>\n+    </message>\n     <message>\n         <source>(no label)</source>\n         <translation>(sem r\u00f3tuo)</translation>\n@@ -3693,10 +3697,6 @@\n         <source>Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)</source>\n         <translation>Use um proxy SOCKS5 separado para alcan\u00e7ar participantes da rede via servi\u00e7os ocultos Tor (padr\u00e3o: %s)</translation>\n     </message>\n-    <message>\n-        <source>Username and hashed password for JSON-RPC connections. The field &lt;userpw&gt; comes in the format: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. A canonical python script is included in share/rpcuser. This option can be specified multiple times</source>\n-        <translation>Nome de usu\u00e1rio e senha hash para conex\u00f5es JSON-RPC. O campo &lt;userpw&gt; vem com o formato: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. Um script python can\u00f4nico \u00e9 inclu\u00eddo em share/rpcuser. Essa op\u00e7\u00e3o pode ser especificada m\u00faltiplas vezes.</translation>\n-    </message>\n     <message>\n         <source>Warning: Unknown block versions being mined! It's possible unknown rules are in effect</source>\n         <translation>Aviso: Vers\u00f5es de bloco desconhecidas sendo mineradas! \u00c9 poss\u00edvel que regras estranhas estejam ativas</translation>"
      },
      {
        "sha": "7bfb3e710d18e7d7a1304f008db89b65c8d1e6c8",
        "filename": "src/qt/locale/bitcoin_pt_PT.ts",
        "status": "modified",
        "additions": 469,
        "deletions": 61,
        "changes": 530,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0819c7e9b428631b806d97ff19beb2e218df31f/src/qt/locale/bitcoin_pt_PT.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0819c7e9b428631b806d97ff19beb2e218df31f/src/qt/locale/bitcoin_pt_PT.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_pt_PT.ts?ref=b0819c7e9b428631b806d97ff19beb2e218df31f",
        "patch": "@@ -43,35 +43,159 @@\n     </message>\n     <message>\n         <source>Choose the address to send coins to</source>\n-        <translation>Escolhe qual o endere\u00e7o para o  qual enviar moedas</translation>\n+        <translation>Escolha o endere\u00e7o para enviar as moedas</translation>\n     </message>\n     <message>\n         <source>Choose the address to receive coins with</source>\n-        <translation>Escolhe qual o endere\u00e7o para receber moedas</translation>\n+        <translation>Escolha o endere\u00e7o para receber as moedas</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>C&amp;hoose</source>\n+        <translation>Escol&amp;her</translation>\n+    </message>\n+    <message>\n+        <source>Sending addresses</source>\n+        <translation>A enviar endere\u00e7os</translation>\n+    </message>\n+    <message>\n+        <source>Receiving addresses</source>\n+        <translation>A receber endere\u00e7os</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Copy Address</source>\n+        <translation>&amp;Copiar Endere\u00e7o</translation>\n+    </message>\n+    <message>\n+        <source>Copy &amp;Label</source>\n+        <translation>Copiar &amp;Etiqueta</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Edit</source>\n+        <translation>&amp;Editar</translation>\n+    </message>\n+    <message>\n+        <source>Export Address List</source>\n+        <translation>Exportar Lista de Endere\u00e7os</translation>\n+    </message>\n+    <message>\n+        <source>Comma separated file (*.csv)</source>\n+        <translation>Ficheiro separado por v\u00edrgulas (*.csv)</translation>\n+    </message>\n+    <message>\n+        <source>Exporting Failed</source>\n+        <translation>Exporta\u00e7\u00e3o Falhou</translation>\n+    </message>\n+    <message>\n+        <source>There was an error trying to save the address list to %1. Please try again.</source>\n+        <translation>Ocorreu um erro ao tentar guardar a lista de endere\u00e7os para %1. Por favor, tente novamente.</translation>\n+    </message>\n+</context>\n <context>\n     <name>AddressTableModel</name>\n-    </context>\n+    <message>\n+        <source>Label</source>\n+        <translation>Etiqueta</translation>\n+    </message>\n+    <message>\n+        <source>Address</source>\n+        <translation>Endere\u00e7o</translation>\n+    </message>\n+    <message>\n+        <source>(no label)</source>\n+        <translation>(sem etiqueta)</translation>\n+    </message>\n+</context>\n <context>\n     <name>AskPassphraseDialog</name>\n     <message>\n         <source>Passphrase Dialog</source>\n-        <translation>Janela da frase de palavra-passe</translation>\n+        <translation>Janela da Frase de Seguran\u00e7a</translation>\n     </message>\n     <message>\n         <source>Enter passphrase</source>\n-        <translation>Insira a frase de palavra-passe</translation>\n+        <translation>Insira a frase de seguran\u00e7a</translation>\n     </message>\n     <message>\n         <source>New passphrase</source>\n-        <translation>Nova frase de palavra-passe</translation>\n+        <translation>Nova frase de frase de seguran\u00e7a</translation>\n     </message>\n     <message>\n         <source>Repeat new passphrase</source>\n-        <translation>Repita a nova frase de palavra-passe</translation>\n+        <translation>Repita a nova frase de frase de seguran\u00e7a</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>Enter the new passphrase to the wallet.&lt;br/&gt;Please use a passphrase of &lt;b&gt;ten or more random characters&lt;/b&gt;, or &lt;b&gt;eight or more words&lt;/b&gt;.</source>\n+        <translation>Insira a nova frase de seguran\u00e7a para a carteira. &lt;br/&gt; Por favor, utilize uma frase de seguran\u00e7a de &lt;b&gt;10 ou mais carateres aleat\u00f3rios,&lt;/b&gt; ou &lt;b&gt;oito ou mais palavras&lt;/b&gt;.</translation>\n+    </message>\n+    <message>\n+        <source>Encrypt wallet</source>\n+        <translation>Encriptar carteira</translation>\n+    </message>\n+    <message>\n+        <source>This operation needs your wallet passphrase to unlock the wallet.</source>\n+        <translation>Esta opera\u00e7\u00e3o precisa da sua frase de seguran\u00e7a da carteira para desbloquear a mesma.</translation>\n+    </message>\n+    <message>\n+        <source>Unlock wallet</source>\n+        <translation>Desbloquear carteira</translation>\n+    </message>\n+    <message>\n+        <source>This operation needs your wallet passphrase to decrypt the wallet.</source>\n+        <translation>Esta opera\u00e7\u00e3o precisa da sua frase de seguran\u00e7a da carteira para desencriptar a mesma.</translation>\n+    </message>\n+    <message>\n+        <source>Decrypt wallet</source>\n+        <translation>Desencriptar carteira</translation>\n+    </message>\n+    <message>\n+        <source>Change passphrase</source>\n+        <translation>Alterar frase de seguran\u00e7a</translation>\n+    </message>\n+    <message>\n+        <source>Enter the old passphrase and new passphrase to the wallet.</source>\n+        <translation>Insira a frase de seguran\u00e7a antiga e a nova frase de seguran\u00e7a para a carteira.</translation>\n+    </message>\n+    <message>\n+        <source>Confirm wallet encryption</source>\n+        <translation>Confirmar encripta\u00e7\u00e3o da carteira</translation>\n+    </message>\n+    <message>\n+        <source>Warning: If you encrypt your wallet and lose your passphrase, you will &lt;b&gt;LOSE ALL OF YOUR BITCOINS&lt;/b&gt;!</source>\n+        <translation>Aviso: se encriptar a sua carteira e perder a sua frase de segurn\u00e7a, &lt;b&gt;PERDER\u00c1 TODOS OS SEUS BITCOINS&lt;/b&gt;!</translation>\n+    </message>\n+    <message>\n+        <source>Are you sure you wish to encrypt your wallet?</source>\n+        <translation>Tem a certeza que deseja encriptar a sua carteira?</translation>\n+    </message>\n+    <message>\n+        <source>Wallet encrypted</source>\n+        <translation>Carteira encriptada</translation>\n+    </message>\n+    <message>\n+        <source>Wallet encryption failed</source>\n+        <translation>Encripta\u00e7\u00e3o da carteira falhou</translation>\n+    </message>\n+    <message>\n+        <source>The supplied passphrases do not match.</source>\n+        <translation>As frases de seguran\u00e7a fornecidas n\u00e3o coincidem.</translation>\n+    </message>\n+    <message>\n+        <source>Wallet unlock failed</source>\n+        <translation>Desbloqueio da carteira falhou</translation>\n+    </message>\n+    <message>\n+        <source>Wallet decryption failed</source>\n+        <translation>Desencripta\u00e7\u00e3o da carteira falhou</translation>\n+    </message>\n+    <message>\n+        <source>Wallet passphrase was successfully changed.</source>\n+        <translation>A frase de seguran\u00e7a da carteira foi alterada com sucesso.</translation>\n+    </message>\n+    <message>\n+        <source>Warning: The Caps Lock key is on!</source>\n+        <translation>Aviso: a tecla Caps Lock est\u00e1 ligada!</translation>\n+    </message>\n+</context>\n <context>\n     <name>BanTableModel</name>\n     <message>\n@@ -95,15 +219,15 @@\n     </message>\n     <message>\n         <source>&amp;Overview</source>\n-        <translation>&amp;Sinopse</translation>\n+        <translation>&amp;Resumo</translation>\n     </message>\n     <message>\n         <source>Node</source>\n         <translation>N\u00f3</translation>\n     </message>\n     <message>\n         <source>Show general overview of wallet</source>\n-        <translation>Mostrar sinopse geral da carteira</translation>\n+        <translation>Mostrar resumo geral da carteira</translation>\n     </message>\n     <message>\n         <source>&amp;Transactions</source>\n@@ -123,19 +247,19 @@\n     </message>\n     <message>\n         <source>&amp;About %1</source>\n-        <translation>&amp;Acerca de %1</translation>\n+        <translation>&amp;Sobre o %1</translation>\n     </message>\n     <message>\n         <source>Show information about %1</source>\n-        <translation>Mostrar informa\u00e7\u00e3o sobre %1</translation>\n+        <translation>Mostrar informa\u00e7\u00e3o sobre o %1</translation>\n     </message>\n     <message>\n         <source>About &amp;Qt</source>\n-        <translation>Sobre &amp;Qt</translation>\n+        <translation>Sobre o &amp;Qt</translation>\n     </message>\n     <message>\n         <source>Show information about Qt</source>\n-        <translation>Mostrar informa\u00e7\u00e3o sobre Qt</translation>\n+        <translation>Mostrar informa\u00e7\u00e3o sobre o Qt</translation>\n     </message>\n     <message>\n         <source>&amp;Options...</source>\n@@ -151,11 +275,11 @@\n     </message>\n     <message>\n         <source>&amp;Backup Wallet...</source>\n-        <translation>&amp;Guardar Carteira...</translation>\n+        <translation>Efetuar &amp;C\u00f3pia de Seguran\u00e7a da Carteira...</translation>\n     </message>\n     <message>\n         <source>&amp;Change Passphrase...</source>\n-        <translation>Alterar &amp;Frase de Palavra-passe...</translation>\n+        <translation>Alterar &amp;Frase de Seguran\u00e7a...</translation>\n     </message>\n     <message>\n         <source>&amp;Sending addresses...</source>\n@@ -169,25 +293,37 @@\n         <source>Open &amp;URI...</source>\n         <translation>Abrir &amp;URI...</translation>\n     </message>\n+    <message>\n+        <source>Click to disable network activity.</source>\n+        <translation>Clique para desativar a atividade de rede.</translation>\n+    </message>\n+    <message>\n+        <source>Network activity disabled.</source>\n+        <translation>Atividade de rede desativada.</translation>\n+    </message>\n+    <message>\n+        <source>Click to enable network activity again.</source>\n+        <translation>Clique para ativar novamente a atividade de rede.</translation>\n+    </message>\n     <message>\n         <source>Reindexing blocks on disk...</source>\n         <translation>A reindexar os blocos no disco...</translation>\n     </message>\n     <message>\n         <source>Send coins to a Bitcoin address</source>\n-        <translation>Enviar moedas para um endere\u00e7o bitcoin</translation>\n+        <translation>Enviar moedas para um endere\u00e7o Bitcoin</translation>\n     </message>\n     <message>\n         <source>Backup wallet to another location</source>\n         <translation>Efetue uma c\u00f3pia de seguran\u00e7a da carteira para outra localiza\u00e7\u00e3o</translation>\n     </message>\n     <message>\n         <source>Change the passphrase used for wallet encryption</source>\n-        <translation>Alterar a frase de palavra-passe utilizada na encripta\u00e7\u00e3o da carteira</translation>\n+        <translation>Alterar a frase de seguran\u00e7a utilizada na encripta\u00e7\u00e3o da carteira</translation>\n     </message>\n     <message>\n         <source>&amp;Debug window</source>\n-        <translation>Janela de &amp;depura\u00e7\u00e3o</translation>\n+        <translation>Janela de &amp;Depura\u00e7\u00e3o</translation>\n     </message>\n     <message>\n         <source>Open debugging and diagnostic console</source>\n@@ -227,7 +363,7 @@\n     </message>\n     <message>\n         <source>Sign messages with your Bitcoin addresses to prove you own them</source>\n-        <translation>Assine mensagens com os seus endere\u00e7os Bitcoin para provar que os controla</translation>\n+        <translation>Assine as mensagens com os seus endere\u00e7os Bitcoin para provar que \u00e9 o propriet\u00e1rio dos mesmos</translation>\n     </message>\n     <message>\n         <source>Verify messages to ensure they were signed with specified Bitcoin addresses</source>\n@@ -317,6 +453,10 @@\n         <source>Up to date</source>\n         <translation>Atualizado</translation>\n     </message>\n+    <message>\n+        <source>%1 client</source>\n+        <translation>Cliente %1</translation>\n+    </message>\n     <message>\n         <source>Catching up...</source>\n         <translation>Recuperando o atraso...</translation>\n@@ -359,6 +499,14 @@\n         <source>Incoming transaction</source>\n         <translation>Transa\u00e7\u00e3o recebida</translation>\n     </message>\n+    <message>\n+        <source>HD key generation is &lt;b&gt;enabled&lt;/b&gt;</source>\n+        <translation>Cria\u00e7\u00e3o de chave HD est\u00e1 &lt;b&gt;ativada&lt;/b&gt;</translation>\n+    </message>\n+    <message>\n+        <source>HD key generation is &lt;b&gt;disabled&lt;/b&gt;</source>\n+        <translation>Cria\u00e7\u00e3o de chave HD est\u00e1 &lt;b&gt;desativada&lt;/b&gt;</translation>\n+    </message>\n     <message>\n         <source>Wallet is &lt;b&gt;encrypted&lt;/b&gt; and currently &lt;b&gt;unlocked&lt;/b&gt;</source>\n         <translation>A carteira est\u00e1 &lt;b&gt;encriptada&lt;/b&gt; e atualmente &lt;b&gt;desbloqueada&lt;/b&gt;</translation>\n@@ -438,7 +586,75 @@\n         <source>Confirmed</source>\n         <translation>Confirmada</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>Copy address</source>\n+        <translation>Copiar endere\u00e7o</translation>\n+    </message>\n+    <message>\n+        <source>Copy label</source>\n+        <translation>Copiar etiqueta</translation>\n+    </message>\n+    <message>\n+        <source>Copy amount</source>\n+        <translation>Copiar valor</translation>\n+    </message>\n+    <message>\n+        <source>Copy transaction ID</source>\n+        <translation>Copiar Id. da transa\u00e7\u00e3o</translation>\n+    </message>\n+    <message>\n+        <source>Lock unspent</source>\n+        <translation>Bloquear n\u00e3o gasto</translation>\n+    </message>\n+    <message>\n+        <source>Unlock unspent</source>\n+        <translation>Desbloquear n\u00e3o gasto</translation>\n+    </message>\n+    <message>\n+        <source>Copy quantity</source>\n+        <translation>Copiar quantidade</translation>\n+    </message>\n+    <message>\n+        <source>Copy fee</source>\n+        <translation>Copiar taxa</translation>\n+    </message>\n+    <message>\n+        <source>Copy after fee</source>\n+        <translation>Copiar depois da taxa</translation>\n+    </message>\n+    <message>\n+        <source>Copy bytes</source>\n+        <translation>Copiar bytes</translation>\n+    </message>\n+    <message>\n+        <source>Copy change</source>\n+        <translation>Copiar troco</translation>\n+    </message>\n+    <message>\n+        <source>(%1 locked)</source>\n+        <translation>(%1 bloqueado)</translation>\n+    </message>\n+    <message>\n+        <source>yes</source>\n+        <translation>sim</translation>\n+    </message>\n+    <message>\n+        <source>no</source>\n+        <translation>n\u00e3o</translation>\n+    </message>\n+    <message>\n+        <source>(no label)</source>\n+        <translation>(sem etiqueta)</translation>\n+    </message>\n+    <message>\n+        <source>change from %1 (%2)</source>\n+        <translation>troco de %1 (%2)</translation>\n+    </message>\n+    <message>\n+        <source>(change)</source>\n+        <translation>(troco)</translation>\n+    </message>\n+</context>\n <context>\n     <name>EditAddressDialog</name>\n     <message>\n@@ -461,12 +677,20 @@\n         <source>&amp;Address</source>\n         <translation>E&amp;ndere\u00e7o</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>Could not unlock wallet.</source>\n+        <translation>N\u00e3o foi poss\u00edvel desbloquear a carteira.</translation>\n+    </message>\n+    <message>\n+        <source>New key generation failed.</source>\n+        <translation>A cria\u00e7\u00e3o da nova chave falhou.</translation>\n+    </message>\n+</context>\n <context>\n     <name>FreespaceChecker</name>\n     <message>\n         <source>A new data directory will be created.</source>\n-        <translation>Ir\u00e1 ser criada uma nova diretoria de dados.</translation>\n+        <translation>Ser\u00e1 criada uma nova diretoria de dados.</translation>\n     </message>\n     <message>\n         <source>name</source>\n@@ -478,7 +702,7 @@\n     </message>\n     <message>\n         <source>Path already exists, and is not a directory.</source>\n-        <translation>Caminho j\u00e1 existe, e n\u00e3o \u00e9 uma pasta.</translation>\n+        <translation>O caminho j\u00e1 existe, e este n\u00e3o \u00e9 uma pasta.</translation>\n     </message>\n     <message>\n         <source>Cannot create data directory here.</source>\n@@ -497,7 +721,7 @@\n     </message>\n     <message>\n         <source>About %1</source>\n-        <translation>Sobre %1</translation>\n+        <translation>Sobre o %1</translation>\n     </message>\n     <message>\n         <source>Command-line options</source>\n@@ -517,25 +741,29 @@\n     </message>\n     <message>\n         <source>Choose data directory on startup (default: %u)</source>\n-        <translation>Escolha a diretoria dos dados no arranque (predefini\u00e7\u00e3o: %u)</translation>\n+        <translation>Escolher a pasta de dados no arranque (predefini\u00e7\u00e3o: %u)</translation>\n     </message>\n     <message>\n         <source>Set language, for example \"de_DE\" (default: system locale)</source>\n-        <translation>Definir linguagem, por exemplo \"pt_PT\" (por defeito: linguagem do sistema)</translation>\n+        <translation>Definir idioma, por exemplo \"pt_PT\" (predefini\u00e7\u00e3o: idioma do sistema)</translation>\n     </message>\n     <message>\n         <source>Start minimized</source>\n         <translation>Iniciar minimizado</translation>\n     </message>\n     <message>\n         <source>Set SSL root certificates for payment request (default: -system-)</source>\n-        <translation>Configurar certificados SSL root para pedido de pagamento (default: -system-)</translation>\n+        <translation>Definir certificados de raiz SSL para pedidos de pagamento (predefini\u00e7\u00e3o: -system-)</translation>\n     </message>\n     <message>\n         <source>Show splash screen on startup (default: %u)</source>\n         <translation>Mostrar o ecr\u00e3 de abertura no arranque (predefini\u00e7\u00e3o: %u)</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>Reset all settings changed in the GUI</source>\n+        <translation>Redefinir todas as defini\u00e7\u00f5es alteradas na GUI</translation>\n+    </message>\n+</context>\n <context>\n     <name>Intro</name>\n     <message>\n@@ -544,19 +772,19 @@\n     </message>\n     <message>\n         <source>Welcome to %1.</source>\n-        <translation>Bem-vindo a %1.</translation>\n+        <translation>Bem-vindo ao %1.</translation>\n     </message>\n     <message>\n         <source>Use the default data directory</source>\n-        <translation>Utilizar a diretoria de dados predefinida</translation>\n+        <translation>Utilizar a pasta de dados predefinida</translation>\n     </message>\n     <message>\n         <source>Use a custom data directory:</source>\n-        <translation>Utilizar uma diretoria de dados personalizada:</translation>\n+        <translation>Utilizar uma pasta de dados personalizada:</translation>\n     </message>\n     <message>\n         <source>Error: Specified data directory \"%1\" cannot be created.</source>\n-        <translation>Erro: n\u00e3o pode ser criada a diretoria de dados especificada como \"%1.</translation>\n+        <translation>Erro: n\u00e3o pode ser criada a pasta de dados especificada como \"%1.</translation>\n     </message>\n     <message>\n         <source>Error</source>\n@@ -577,15 +805,39 @@\n         <source>Form</source>\n         <translation>Formul\u00e1rio</translation>\n     </message>\n+    <message>\n+        <source>Number of blocks left</source>\n+        <translation>N\u00famero de blocos restantes</translation>\n+    </message>\n+    <message>\n+        <source>Unknown...</source>\n+        <translation>Desconhecido...</translation>\n+    </message>\n     <message>\n         <source>Last block time</source>\n         <translation>Data do \u00faltimo bloco</translation>\n     </message>\n+    <message>\n+        <source>Progress</source>\n+        <translation>Progresso</translation>\n+    </message>\n+    <message>\n+        <source>calculating...</source>\n+        <translation>a calcular...</translation>\n+    </message>\n+    <message>\n+        <source>Estimated time left until synced</source>\n+        <translation>tempo restante estimado at\u00e9 \u00e0 sincroniza\u00e7\u00e3o</translation>\n+    </message>\n     <message>\n         <source>Hide</source>\n-        <translation>Esconder</translation>\n+        <translation>Ocultar</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>Unknown. Syncing Headers (%1)...</source>\n+        <translation>Desconhecido. Sincroniza\u00e7\u00e3o de Cabe\u00e7alhos (%1)...</translation>\n+    </message>\n+</context>\n <context>\n     <name>OpenURIDialog</name>\n     <message>\n@@ -602,9 +854,13 @@\n     </message>\n     <message>\n         <source>Select payment request file</source>\n-        <translation>Seleccione o ficheiro de pedido de pagamento</translation>\n+        <translation>Selecione o ficheiro de pedido de pagamento</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>Select payment request file to open</source>\n+        <translation>Selecione o ficheiro de pedido de pagamento para abrir</translation>\n+    </message>\n+</context>\n <context>\n     <name>OptionsDialog</name>\n     <message>\n@@ -617,7 +873,7 @@\n     </message>\n     <message>\n         <source>Automatically start %1 after logging in to the system.</source>\n-        <translation>Come\u00e7ar o %1 automaticamente ao iniciar a sess\u00e3o no sistema.</translation>\n+        <translation>Iniciar automaticamente o %1 depois de iniciar a sess\u00e3o no sistema.</translation>\n     </message>\n     <message>\n         <source>&amp;Start %1 on system login</source>\n@@ -645,7 +901,7 @@\n     </message>\n     <message>\n         <source>IP address of the proxy (e.g. IPv4: 127.0.0.1 / IPv6: ::1)</source>\n-        <translation>Endere\u00e7o IP do proxy (p.ex. IPv4: 127.0.0.1 / IPv6: ::1)</translation>\n+        <translation>Endere\u00e7o de IP do proxy (exemplo, IPv4: 127.0.0.1 / IPv6: ::1)</translation>\n     </message>\n     <message>\n         <source>Minimize instead of exit the application when the window is closed. When this option is enabled, the application will be closed only after selecting Exit in the menu.</source>\n@@ -686,15 +942,15 @@\n     </message>\n     <message>\n         <source>Expert</source>\n-        <translation> Especialistas </translation>\n+        <translation> T\u00e9cnicos</translation>\n     </message>\n     <message>\n         <source>Enable coin &amp;control features</source>\n-        <translation>Ativar as funcionalidades de controlo de moedas</translation>\n+        <translation>Ativar as funcionalidades de &amp;controlo de moedas</translation>\n     </message>\n     <message>\n         <source>If you disable the spending of unconfirmed change, the change from a transaction cannot be used until that transaction has at least one confirmation. This also affects how your balance is computed.</source>\n-        <translation>No caso de desativar o gasto de troco n\u00e3o confirmado, o troco de uma transa\u00e7\u00e3o n\u00e3o poder\u00e1 ser utilizado at\u00e9 que essa transa\u00e7\u00e3o tenha pelo menos uma confirma\u00e7\u00e3o. Isto tamb\u00e9m afeta o c\u00e1lculo do seu saldo.</translation>\n+        <translation>Se desativar o gasto de troco n\u00e3o confirmado, o troco de uma transa\u00e7\u00e3o n\u00e3o pode ser utilizado at\u00e9 que essa transa\u00e7\u00e3o tenha pelo menos uma confirma\u00e7\u00e3o. Isto tamb\u00e9m afeta o c\u00e1lculo do seu saldo.</translation>\n     </message>\n     <message>\n         <source>&amp;Spend unconfirmed change</source>\n@@ -760,6 +1016,10 @@\n         <source>&amp;Window</source>\n         <translation>&amp;Janela</translation>\n     </message>\n+    <message>\n+        <source>&amp;Hide the icon from the system tray.</source>\n+        <translation>&amp;Ocultar o \u00edcone da bandeja do sistema.</translation>\n+    </message>\n     <message>\n         <source>Hide tray icon</source>\n         <translation>Ocultar \u00edcone da bandeja</translation>\n@@ -826,7 +1086,7 @@\n     </message>\n     <message>\n         <source>This change would require a client restart.</source>\n-        <translation>Esta altera\u00e7\u00e3o requer um rein\u00edcio do cliente.</translation>\n+        <translation>Esta altera\u00e7\u00e3o obrigar\u00e1 a um rein\u00edcio do cliente.</translation>\n     </message>\n     <message>\n         <source>The supplied proxy address is invalid.</source>\n@@ -910,6 +1170,34 @@\n </context>\n <context>\n     <name>PaymentServer</name>\n+    <message>\n+        <source>Payment request error</source>\n+        <translation>Erro do pedido de pagamento</translation>\n+    </message>\n+    <message>\n+        <source>Payment request rejected</source>\n+        <translation>Pedido de pagamento rejeitado</translation>\n+    </message>\n+    <message>\n+        <source>Payment request expired.</source>\n+        <translation>Pedido de pagamento expirado.</translation>\n+    </message>\n+    <message>\n+        <source>Payment request is not initialized.</source>\n+        <translation>O pedido de pagamento n\u00e3o foi inicializado.</translation>\n+    </message>\n+    <message>\n+        <source>Invalid payment request.</source>\n+        <translation>Pedido de pagamento inv\u00e1lido.</translation>\n+    </message>\n+    <message>\n+        <source>Refund from %1</source>\n+        <translation>Reembolso de %1</translation>\n+    </message>\n+    <message>\n+        <source>Error communicating with %1: %2</source>\n+        <translation>Erro ao comunicar com %1: %2</translation>\n+    </message>\n     </context>\n <context>\n     <name>PeerTableModel</name>\n@@ -1312,7 +1600,15 @@\n         <source>Remove</source>\n         <translation>Remover</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>Copy label</source>\n+        <translation>Copiar etiqueta</translation>\n+    </message>\n+    <message>\n+        <source>Copy amount</source>\n+        <translation>Copiar valor</translation>\n+    </message>\n+</context>\n <context>\n     <name>ReceiveRequestDialog</name>\n     <message>\n@@ -1331,13 +1627,29 @@\n         <source>&amp;Save Image...</source>\n         <translation>&amp;Salvar Imagem...</translation>\n     </message>\n+    <message>\n+        <source>Address</source>\n+        <translation>Endere\u00e7o</translation>\n+    </message>\n     <message>\n         <source>Amount</source>\n         <translation>Valor</translation>\n     </message>\n+    <message>\n+        <source>Label</source>\n+        <translation>Etiqueta</translation>\n+    </message>\n     </context>\n <context>\n     <name>RecentRequestsTableModel</name>\n+    <message>\n+        <source>Label</source>\n+        <translation>Etiqueta</translation>\n+    </message>\n+    <message>\n+        <source>(no label)</source>\n+        <translation>(sem etiqueta)</translation>\n+    </message>\n     </context>\n <context>\n     <name>SendCoinsDialog</name>\n@@ -1387,31 +1699,31 @@\n     </message>\n     <message>\n         <source>If this is activated, but the change address is empty or invalid, change will be sent to a newly generated address.</source>\n-        <translation>Se isto estiver ativo, mas o endere\u00e7o de troco estiver vazio ou for inv\u00e1lido, o troco ir\u00e1 ser enviado para um novo endere\u00e7o.</translation>\n+        <translation>Se isto estiver ativo, mas o endere\u00e7o de troco estiver vazio ou for inv\u00e1lido, o troco ser\u00e1 enviado para um novo endere\u00e7o gerado.</translation>\n     </message>\n     <message>\n         <source>Custom change address</source>\n         <translation>Endere\u00e7o de troco personalizado</translation>\n     </message>\n     <message>\n         <source>Transaction Fee:</source>\n-        <translation>Custo da Transa\u00e7\u00e3o:</translation>\n+        <translation>Taxa da transa\u00e7\u00e3o:</translation>\n     </message>\n     <message>\n         <source>Choose...</source>\n         <translation>Escolher...</translation>\n     </message>\n     <message>\n         <source>collapse fee-settings</source>\n-        <translation>fechar defini\u00e7\u00f5es-de custos</translation>\n+        <translation>ocultar defini\u00e7\u00f5es de taxa</translation>\n     </message>\n     <message>\n         <source>per kilobyte</source>\n         <translation>por kilobyte</translation>\n     </message>\n     <message>\n         <source>If the custom fee is set to 1000 satoshis and the transaction is only 250 bytes, then \"per kilobyte\" only pays 250 satoshis in fee, while \"total at least\" pays 1000 satoshis. For transactions bigger than a kilobyte both pay by kilobyte.</source>\n-        <translation>Se a taxa fixa for 1000 satoshis e a transa\u00e7\u00e3o for somente 250 bytes, pagar\u00e1 somente 250 satoshis \"por kilobyte\" em custos se trasacionar \"pelo menos\" 1000 satoshis. Transa\u00e7\u00f5es superiores a um kilobyte s\u00e3o cobradas por kilobyte.</translation>\n+        <translation>Se a taxa personalizada estiver definida para 1.000 satoshis e a transa\u00e7\u00e3o \u00e9 de apenas 250 bytes, ent\u00e3o paga apenas 250 satoshis \"por kilobyte\" na taxa, enquanto em \"total pelo menos\" paga 1.000 satoshis. Para transa\u00e7\u00f5es superiores a um kilobyte ambos pagam por kilobyte.</translation>\n     </message>\n     <message>\n         <source>Hide</source>\n@@ -1439,7 +1751,7 @@\n     </message>\n     <message>\n         <source>(Smart fee not initialized yet. This usually takes a few blocks...)</source>\n-        <translation>(Taxa inteligente ainda n\u00e3o foi acionada. Normalmente demora alguns blocos...)</translation>\n+        <translation>(A taxa inteligente ainda n\u00e3o foi inicializada. Isto normalmente demora alguns blocos...)</translation>\n     </message>\n     <message>\n         <source>normal</source>\n@@ -1481,7 +1793,63 @@\n         <source>S&amp;end</source>\n         <translation>E&amp;nviar</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>Copy quantity</source>\n+        <translation>Copiar quantidade</translation>\n+    </message>\n+    <message>\n+        <source>Copy amount</source>\n+        <translation>Copiar valor</translation>\n+    </message>\n+    <message>\n+        <source>Copy fee</source>\n+        <translation>Copiar taxa</translation>\n+    </message>\n+    <message>\n+        <source>Copy after fee</source>\n+        <translation>Copiar depois da taxa</translation>\n+    </message>\n+    <message>\n+        <source>Copy bytes</source>\n+        <translation>Copiar bytes</translation>\n+    </message>\n+    <message>\n+        <source>Copy change</source>\n+        <translation>Copiar troco</translation>\n+    </message>\n+    <message>\n+        <source>added as transaction fee</source>\n+        <translation>adicionado como taxa de transa\u00e7\u00e3o</translation>\n+    </message>\n+    <message>\n+        <source>The total exceeds your balance when the %1 transaction fee is included.</source>\n+        <translation>O total excede o seu saldo quando a taxa de transa\u00e7\u00e3o %1 est\u00e1 inclu\u00edda.</translation>\n+    </message>\n+    <message>\n+        <source>A fee higher than %1 is considered an absurdly high fee.</source>\n+        <translation>Uma taxa superior a %1 \u00e9 considerada uma taxa altamente absurda.</translation>\n+    </message>\n+    <message>\n+        <source>Payment request expired.</source>\n+        <translation>Pedido de pagamento expirado.</translation>\n+    </message>\n+    <message>\n+        <source>Pay only the required fee of %1</source>\n+        <translation>Pague apenas a taxa obrigat\u00f3ria de %1</translation>\n+    </message>\n+    <message>\n+        <source>Warning: Unknown change address</source>\n+        <translation>Aviso: endere\u00e7o de troco desconhecido</translation>\n+    </message>\n+    <message>\n+        <source>Confirm custom change address</source>\n+        <translation>Confirmar endere\u00e7o de troco personalizado</translation>\n+    </message>\n+    <message>\n+        <source>(no label)</source>\n+        <translation>(sem etiqueta)</translation>\n+    </message>\n+</context>\n <context>\n     <name>SendCoinsEntry</name>\n     <message>\n@@ -1530,7 +1898,7 @@\n     </message>\n     <message>\n         <source>S&amp;ubtract fee from amount</source>\n-        <translation>S&amp;ubtrair taxa ao montante</translation>\n+        <translation>S&amp;ubtrair a taxa ao montante</translation>\n     </message>\n     <message>\n         <source>Message:</source>\n@@ -1678,6 +2046,10 @@\n </context>\n <context>\n     <name>TransactionDesc</name>\n+    <message>\n+        <source>Transaction fee</source>\n+        <translation>Taxa de transa\u00e7\u00e3o</translation>\n+    </message>\n     <message>\n         <source>Amount</source>\n         <translation>Valor</translation>\n@@ -1692,9 +2064,49 @@\n     </context>\n <context>\n     <name>TransactionTableModel</name>\n+    <message>\n+        <source>Label</source>\n+        <translation>Etiqueta</translation>\n+    </message>\n+    <message>\n+        <source>(no label)</source>\n+        <translation>(sem etiqueta)</translation>\n+    </message>\n     </context>\n <context>\n     <name>TransactionView</name>\n+    <message>\n+        <source>Copy address</source>\n+        <translation>Copiar endere\u00e7o</translation>\n+    </message>\n+    <message>\n+        <source>Copy label</source>\n+        <translation>Copiar etiqueta</translation>\n+    </message>\n+    <message>\n+        <source>Copy amount</source>\n+        <translation>Copiar valor</translation>\n+    </message>\n+    <message>\n+        <source>Copy transaction ID</source>\n+        <translation>Copiar Id. da transa\u00e7\u00e3o</translation>\n+    </message>\n+    <message>\n+        <source>Comma separated file (*.csv)</source>\n+        <translation>Ficheiro separado por v\u00edrgulas (*.csv)</translation>\n+    </message>\n+    <message>\n+        <source>Label</source>\n+        <translation>Etiqueta</translation>\n+    </message>\n+    <message>\n+        <source>Address</source>\n+        <translation>Endere\u00e7o</translation>\n+    </message>\n+    <message>\n+        <source>Exporting Failed</source>\n+        <translation>Exporta\u00e7\u00e3o Falhou</translation>\n+    </message>\n     </context>\n <context>\n     <name>UnitDisplayStatusBarControl</name>\n@@ -1764,7 +2176,7 @@\n     </message>\n     <message>\n         <source>Fee (in %s/kB) to add to transactions you send (default: %s)</source>\n-        <translation>Taxa (em %s/kB) a adicionar \u00e0s transac\u00e7\u00f5es que envia (padr\u00e3o: %s)</translation>\n+        <translation>Taxa (em %s/kB) para adicionar \u00e0s transa\u00e7\u00f5es que envia (predefini\u00e7\u00e3o: %s)</translation>\n     </message>\n     <message>\n         <source>Pruning blockstore...</source>\n@@ -1800,7 +2212,7 @@\n     </message>\n     <message>\n         <source>Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)</source>\n-        <translation>Executar comando quando uma das transa\u00e7\u00f5es na carteira mudar (no comando, %s \u00e9 substitu\u00eddo pelo ID da Transa\u00e7\u00e3o)</translation>\n+        <translation>Executar o comando quando uma transa\u00e7\u00e3o da carteira muda (no comando, %s \u00e9 substitu\u00eddo pela Id. da Transa\u00e7\u00e3o)</translation>\n     </message>\n     <message>\n         <source>Set the number of script verification threads (%u to %d, 0 = auto, &lt;0 = leave that many cores free, default: %d)</source>\n@@ -2040,7 +2452,7 @@\n     </message>\n     <message>\n         <source>Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)</source>\n-        <translation>Taxas (em %s/kB) abaixo deste valor s\u00e3o consideradas nulas para propaga\u00e7\u00e3o, minera\u00e7\u00e3o e cria\u00e7\u00e3o de transac\u00e7\u00f5es (padr\u00e3o: %s)</translation>\n+        <translation>Taxas (em %s/kB) inferiores a este valor s\u00e3o consideradas nulas para propaga\u00e7\u00e3o, minera\u00e7\u00e3o e cria\u00e7\u00e3o de transa\u00e7\u00f5es (predefini\u00e7\u00e3o: %s)</translation>\n     </message>\n     <message>\n         <source>If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)</source>\n@@ -2220,7 +2632,7 @@\n     </message>\n     <message>\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n-        <translation>Executar comando quando o melhor bloco mudar (no comando, %s \u00e9 substitu\u00eddo pela hash do bloco)</translation>\n+        <translation>Executar o comando quando o melhor bloco muda (no comando, %s \u00e9 substitu\u00eddo pela hash do bloco)</translation>\n     </message>\n     <message>\n         <source>Allow DNS lookups for -addnode, -seednode and -connect</source>\n@@ -2286,10 +2698,6 @@\n         <source>Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)</source>\n         <translation>Use um proxy SOCKS5 separado para alcan\u00e7ar pares via servi\u00e7os ocultos do Tor (padr\u00e3o: %s)</translation>\n     </message>\n-    <message>\n-        <source>Username and hashed password for JSON-RPC connections. The field &lt;userpw&gt; comes in the format: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. A canonical python script is included in share/rpcuser. This option can be specified multiple times</source>\n-        <translation>Username e hash da password para liga\u00e7\u00f5es JSON-RPC. O campo &lt;userpw&gt; est\u00e1 no formato: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. Um script python est\u00e1 incluido em share/rpcuser. Esta op\u00e7\u00e3o pode ser especificada m\u00faltiplas vezes.</translation>\n-    </message>\n     <message>\n         <source>Warning: Unknown block versions being mined! It's possible unknown rules are in effect</source>\n         <translation>Aten\u00e7\u00e3o: Vers\u00f5es desconhecidas de blocos est\u00e3o a ser mineradas! \u00c9 poss\u00edvel que regras desconhecias est\u00e3o a ser efetuadas</translation>\n@@ -2372,7 +2780,7 @@\n     </message>\n     <message>\n         <source>Spend unconfirmed change when sending transactions (default: %u)</source>\n-        <translation>Gastar troco n\u00e3o confirmado ao enviar transac\u00e7\u00f5es (padr\u00e3o: %u)</translation>\n+        <translation>Gastar o troco n\u00e3o confirmado quando enviar transa\u00e7\u00f5es (predefini\u00e7\u00e3o: %u)</translation>\n     </message>\n     <message>\n         <source>Threshold for disconnecting misbehaving peers (default: %u)</source>"
      },
      {
        "sha": "11fa2f7fea2a1b80533208e70dbcae718d5b1b4c",
        "filename": "src/qt/locale/bitcoin_ru.ts",
        "status": "modified",
        "additions": 71,
        "deletions": 7,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0819c7e9b428631b806d97ff19beb2e218df31f/src/qt/locale/bitcoin_ru.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0819c7e9b428631b806d97ff19beb2e218df31f/src/qt/locale/bitcoin_ru.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ru.ts?ref=b0819c7e9b428631b806d97ff19beb2e218df31f",
        "patch": "@@ -543,7 +543,11 @@\n         <source>Wallet is &lt;b&gt;encrypted&lt;/b&gt; and currently &lt;b&gt;locked&lt;/b&gt;</source>\n         <translation>\u0411\u0443\u043c\u0430\u0436\u043d\u0438\u043a &lt;b&gt;\u0437\u0430\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d&lt;/b&gt; \u0438 \u0432 \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f &lt;b&gt;\u0437\u0430\u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u043d&lt;/b&gt;</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>A fatal error occurred. Bitcoin can no longer continue safely and will quit.</source>\n+        <translation>\u041f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u0430 \u043d\u0435\u0438\u0441\u043f\u0440\u0430\u0432\u0438\u043c\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430. Bitcoin \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u0438 \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u043a\u0440\u044b\u0442.</translation>\n+    </message>\n+</context>\n <context>\n     <name>CoinControlDialog</name>\n     <message>\n@@ -1431,10 +1435,26 @@\n         <source>%n year(s)</source>\n         <translation><numerusform>%n \u0433\u043e\u0434</numerusform><numerusform>%n \u0433\u043e\u0434\u0430</numerusform><numerusform>%n \u043b\u0435\u0442</numerusform><numerusform>%n \u043b\u0435\u0442</numerusform></translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>%1 didn't yet exit safely...</source>\n+        <translation>%1 \u0435\u0449\u0451 \u043d\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u043b\u0441\u044f \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e...</translation>\n+    </message>\n+</context>\n <context>\n     <name>QObject::QObject</name>\n-    </context>\n+    <message>\n+        <source>Error: Specified data directory \"%1\" does not exist.</source>\n+        <translation>\u041e\u0448\u0438\u0431\u043a\u0430: \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043a\u0430\u0442\u0430\u043b\u043e\u0433 \"%1\" \u043d\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442.</translation>\n+    </message>\n+    <message>\n+        <source>Error: Cannot parse configuration file: %1. Only use key=value syntax.</source>\n+        <translation>\u041e\u0448\u0438\u0431\u043a\u0430: \u043d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u0444\u0430\u0439\u043b: %1. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441 \u0432\u0438\u0434\u0430 \u043a\u043b\u044e\u0447=\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435.</translation>\n+    </message>\n+    <message>\n+        <source>Error: %1</source>\n+        <translation>\u041e\u0448\u0438\u0431\u043a\u0430: %1</translation>\n+    </message>\n+</context>\n <context>\n     <name>QRImageWidget</name>\n     <message>\n@@ -2184,6 +2204,14 @@\n         <source>Warning: Unknown change address</source>\n         <translation>\u0412\u043d\u0438\u043c\u0430\u043d\u0438\u0435: \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0439 \u0430\u0434\u0440\u0435\u0441 \u0434\u043b\u044f \u0441\u0434\u0430\u0447\u0438</translation>\n     </message>\n+    <message>\n+        <source>Confirm custom change address</source>\n+        <translation>\u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u0435 \u0441\u0432\u043e\u0439 \u0430\u0434\u0440\u0435\u0441 \u0434\u043b\u044f \u0441\u0434\u0430\u0447\u0438</translation>\n+    </message>\n+    <message>\n+        <source>The address you selected for change is not part of this wallet. Any or all funds in your wallet may be sent to this address. Are you sure?</source>\n+        <translation>\u0412\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0439 \u0432\u0430\u043c\u0438 \u0430\u0434\u0440\u0435\u0441 \u0434\u043b\u044f \u0441\u0434\u0430\u0447\u0438 \u043d\u0435 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u044d\u0442\u043e\u043c\u0443 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0443. \u0427\u0430\u0441\u0442\u044c \u0438\u043b\u0438 \u0432\u0441\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u044b \u043d\u0430 \u044d\u0442\u043e\u0442 \u0430\u0434\u0440\u0435\u0441. \u0412\u044b \u0443\u0432\u0435\u0440\u0435\u043d\u044b?</translation>\n+    </message>\n     <message>\n         <source>(no label)</source>\n         <translation>(\u043d\u0435\u0442 \u043c\u0435\u0442\u043a\u0438)</translation>\n@@ -2445,6 +2473,10 @@\n </context>\n <context>\n     <name>TransactionDesc</name>\n+    <message numerus=\"yes\">\n+        <source>Open for %n more block(s)</source>\n+        <translation><numerusform>\u041e\u0442\u043a\u0440\u044b\u0442\u043e \u0434\u043b\u044f \u0435\u0449\u0451 %n \u0431\u043b\u043e\u043a\u0430</numerusform><numerusform>\u041e\u0442\u043a\u0440\u044b\u0442\u043e \u0434\u043b\u044f \u0435\u0449\u0451 %n \u0431\u043b\u043e\u043a\u043e\u0432</numerusform><numerusform>\u041e\u0442\u043a\u0440\u044b\u0442\u043e \u0434\u043b\u044f \u0435\u0449\u0451 %n \u0431\u043b\u043e\u043a\u043e\u0432</numerusform><numerusform>\u041e\u0442\u043a\u0440\u044b\u0442\u043e \u0434\u043b\u044f \u0435\u0449\u0451 %n \u0431\u043b\u043e\u043a\u043e\u0432</numerusform></translation>\n+    </message>\n     <message>\n         <source>Open until %1</source>\n         <translation>\u041e\u0442\u043a\u0440\u044b\u0442\u043e \u0434\u043e %1</translation>\n@@ -2533,6 +2565,10 @@\n         <source>Credit</source>\n         <translation>\u041a\u0440\u0435\u0434\u0438\u0442</translation>\n     </message>\n+    <message numerus=\"yes\">\n+        <source>matures in %n more block(s)</source>\n+        <translation><numerusform>\u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e \u0447\u0435\u0440\u0435\u0437 %n \u0431\u043b\u043e\u043a</numerusform><numerusform>\u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e \u0447\u0435\u0440\u0435\u0437 %n \u0431\u043b\u043e\u043a\u0430</numerusform><numerusform>\u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e \u0447\u0435\u0440\u0435\u0437 %n \u0431\u043b\u043e\u043a\u043e\u0432</numerusform><numerusform>\u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e \u0447\u0435\u0440\u0435\u0437 %n \u0431\u043b\u043e\u043a\u043e\u0432</numerusform></translation>\n+    </message>\n     <message>\n         <source>not accepted</source>\n         <translation>\u043d\u0435 \u043f\u0440\u0438\u043d\u044f\u0442\u043e</translation>\n@@ -2635,6 +2671,10 @@\n         <source>Label</source>\n         <translation>\u041c\u0435\u0442\u043a\u0430</translation>\n     </message>\n+    <message numerus=\"yes\">\n+        <source>Open for %n more block(s)</source>\n+        <translation><numerusform>\u041e\u0442\u043a\u0440\u044b\u0442\u043e \u0434\u043b\u044f \u0435\u0449\u0451 %n \u0431\u043b\u043e\u043a\u0430</numerusform><numerusform>\u041e\u0442\u043a\u0440\u044b\u0442\u043e \u0434\u043b\u044f \u0435\u0449\u0451 %n \u0431\u043b\u043e\u043a\u043e\u0432</numerusform><numerusform>\u041e\u0442\u043a\u0440\u044b\u0442\u043e \u0434\u043b\u044f \u0435\u0449\u0451 %n \u0431\u043b\u043e\u043a\u043e\u0432</numerusform><numerusform>\u041e\u0442\u043a\u0440\u044b\u0442\u043e \u0434\u043b\u044f \u0435\u0449\u0451 %n \u0431\u043b\u043e\u043a\u043e\u0432</numerusform></translation>\n+    </message>\n     <message>\n         <source>Open until %1</source>\n         <translation>\u041e\u0442\u043a\u0440\u044b\u0442\u043e \u0434\u043e %1</translation>\n@@ -3077,6 +3117,10 @@\n         <source>The block database contains a block which appears to be from the future. This may be due to your computer's date and time being set incorrectly. Only rebuild the block database if you are sure that your computer's date and time are correct</source>\n         <translation>\u0411\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0431\u043b\u043e\u043a\u043e\u0432 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0431\u043b\u043e\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0438\u0437 \u0431\u0443\u0434\u0443\u0449\u0435\u0433\u043e. \u042d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0438\u0437-\u0437\u0430 \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u0442\u044b \u0438 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043d\u0430 \u0432\u0430\u0448\u0435\u043c \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u0435. \u041e\u0441\u0442\u0430\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0435\u0440\u0435\u0441\u0442\u0440\u043e\u0438\u0432\u0430\u0442\u044c \u0431\u0430\u0437\u0443 \u0431\u043b\u043e\u043a\u043e\u0432, \u0435\u0441\u043b\u0438 \u0432\u044b \u0443\u0432\u0435\u0440\u0435\u043d\u044b, \u0447\u0442\u043e \u0434\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b.</translation>\n     </message>\n+    <message>\n+        <source>This is a pre-release test build - use at your own risk - do not use for mining or merchant applications</source>\n+        <translation>\u042d\u0442\u043e \u043f\u0440\u0435-\u0440\u0435\u043b\u0438\u0437\u043d\u0430\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u0430\u044f \u0441\u0431\u043e\u0440\u043a\u0430 - \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043d\u0430 \u0441\u0432\u043e\u0439 \u0441\u0442\u0440\u0430\u0445 \u0438 \u0440\u0438\u0441\u043a - \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0434\u043b\u044f \u0434\u043e\u0431\u044b\u0447\u0438 \u0438\u043b\u0438 \u0442\u043e\u0440\u0433\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439</translation>\n+    </message>\n     <message>\n         <source>Unable to rewind the database to a pre-fork state. You will need to redownload the blockchain</source>\n         <translation>\u041d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043e\u0442\u043c\u043e\u0442\u0430\u0442\u044c \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043e \u043f\u0440\u0435\u0434-\u0444\u043e\u0440\u043a\u043e\u0432\u043e\u0433\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f. \u0412\u0430\u043c \u0431\u0443\u0434\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0435\u0440\u0435\u043a\u0430\u0447\u0430\u0442\u044c \u0446\u0435\u043f\u043e\u0447\u043a\u0443 \u0431\u043b\u043e\u043a\u043e\u0432.</translation>\n@@ -3085,6 +3129,22 @@\n         <source>Use UPnP to map the listening port (default: 1 when listening and no -proxy)</source>\n         <translation>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c UPnP \u0434\u043b\u044f \u043f\u0440\u043e\u0431\u0440\u043e\u0441\u0430 \u043f\u043e\u0440\u0442\u0430 (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 1, \u0435\u0441\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u043d\u0438\u0435 \u0438 \u043d\u0435\u0442 -proxy)</translation>\n     </message>\n+    <message>\n+        <source>Username and hashed password for JSON-RPC connections. The field &lt;userpw&gt; comes in the format: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. A canonical python script is included in share/rpcuser. The client then connects normally using the rpcuser=&lt;USERNAME&gt;/rpcpassword=&lt;PASSWORD&gt; pair of arguments. This option can be specified multiple times</source>\n+        <translation>\u0418\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u0445\u044d\u0448 \u043f\u0430\u0440\u043e\u043b\u044f \u0434\u043b\u044f JSON-RPC \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439. \u041f\u043e\u043b\u0435 &lt;userpw&gt; \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0444\u043e\u0440\u043c\u0430\u0442: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. \u041a\u0430\u043d\u043e\u043d\u0438\u0447\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u043d\u0430 \u043f\u0438\u0442\u043e\u043d\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 share/rpcuser. \u042d\u0442\u0430 \u043e\u043f\u0446\u0438\u044f \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437</translation>\n+    </message>\n+    <message>\n+        <source>Wallet will not create transactions that violate mempool chain limits (default: %u)</source>\n+        <translation>\u0411\u0443\u043c\u0430\u0436\u043d\u0438\u043a \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u0440\u0443\u0448\u0430\u044e\u0442 \u043b\u0438\u043c\u0438\u0442\u044b \u0446\u0435\u043f\u043e\u0447\u043a\u0438 \u043f\u0443\u043b\u0430 \u0432 \u043f\u0430\u043c\u044f\u0442\u0438 (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: %u)</translation>\n+    </message>\n+    <message>\n+        <source>Warning: The network does not appear to fully agree! Some miners appear to be experiencing issues.</source>\n+        <translation>\u0412\u043d\u0438\u043c\u0430\u043d\u0438\u0435: \u043f\u043e\u0445\u043e\u0436\u0435, \u0432 \u0441\u0435\u0442\u0438 \u043d\u0435\u0442 \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u0441\u043e\u0433\u043b\u0430\u0441\u0438\u044f! \u041d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u0430\u0439\u043d\u0435\u0440\u044b, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0438\u0441\u043f\u044b\u0442\u044b\u0432\u0430\u044e\u0442 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b.</translation>\n+    </message>\n+    <message>\n+        <source>Warning: We do not appear to fully agree with our peers! You may need to upgrade, or other nodes may need to upgrade.</source>\n+        <translation>\u0412\u043d\u0438\u043c\u0430\u043d\u0438\u0435: \u043c\u044b \u043d\u0435 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u044b \u0441 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u043c\u0438 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u043c\u0438! \u0412\u0430\u043c \u0438\u043b\u0438 \u0434\u0440\u0443\u0433\u0438\u043c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u043c, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u044c\u0441\u044f.</translation>\n+    </message>\n     <message>\n         <source>You need to rebuild the database using -reindex-chainstate to change -txindex</source>\n         <translation>\u0412\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0435\u0440\u0435\u0441\u043e\u0431\u0440\u0430\u0442\u044c \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e -reindex-chainstate, \u0447\u0442\u043e\u0431\u044b \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c -txindex</translation>\n@@ -3117,6 +3177,10 @@\n         <source>Cannot resolve -%s address: '%s'</source>\n         <translation>\u041d\u0435 \u0443\u0434\u0430\u0451\u0442\u0441\u044f \u0440\u0430\u0437\u0440\u0435\u0448\u0438\u0442\u044c \u0430\u0434\u0440\u0435\u0441 \u0432 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0435 -%s: '%s'</translation>\n     </message>\n+    <message>\n+        <source>Chain selection options:</source>\n+        <translation>\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0432\u044b\u0431\u043e\u0440\u0430 \u0446\u0435\u043f\u043e\u0447\u043a\u0438:</translation>\n+    </message>\n     <message>\n         <source>Change index out of range</source>\n         <translation>\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0438\u043d\u0434\u0435\u043a\u0441\u0430 \u0432\u043d\u0435 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430</translation>\n@@ -3313,6 +3377,10 @@\n         <source>Use UPnP to map the listening port (default: %u)</source>\n         <translation>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c UPnP \u0434\u043b\u044f \u043f\u0440\u043e\u0431\u0440\u043e\u0441\u0430 \u043f\u043e\u0440\u0442\u0430 (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: %u)</translation>\n     </message>\n+    <message>\n+        <source>Use the test chain</source>\n+        <translation>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0446\u0435\u043f\u043e\u0447\u043a\u0443</translation>\n+    </message>\n     <message>\n         <source>User Agent comment (%s) contains unsafe characters.</source>\n         <translation>\u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f (%s) \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043d\u0435\u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u044b\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b.</translation>\n@@ -3645,10 +3713,6 @@\n         <source>Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)</source>\n         <translation>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u043e\u043a\u0441\u0438 SOCKS5 \u0434\u043b\u044f \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0441 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u043c\u0438 \u0447\u0435\u0440\u0435\u0437 \u0441\u043a\u0440\u044b\u0442\u044b\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u044b Tor (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: %s)</translation>\n     </message>\n-    <message>\n-        <source>Username and hashed password for JSON-RPC connections. The field &lt;userpw&gt; comes in the format: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. A canonical python script is included in share/rpcuser. This option can be specified multiple times</source>\n-        <translation>\u0418\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u0445\u044d\u0448 \u043f\u0430\u0440\u043e\u043b\u044f \u0434\u043b\u044f JSON-RPC \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439. \u041f\u043e\u043b\u0435 &lt;userpw&gt; \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0444\u043e\u0440\u043c\u0430\u0442: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. \u041a\u0430\u043d\u043e\u043d\u0438\u0447\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u043d\u0430 \u043f\u0438\u0442\u043e\u043d\u0435 \u0432\u043a\u043b\u044e\u0447\u0435\u043d \u0432 \"share/rpcuser\". \u042d\u0442\u0430 \u043e\u043f\u0446\u0438\u044f \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437</translation>\n-    </message>\n     <message>\n         <source>Warning: Unknown block versions being mined! It's possible unknown rules are in effect</source>\n         <translation>\u0412\u043d\u0438\u043c\u0430\u043d\u0438\u0435: \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0430 \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u0431\u043b\u043e\u043a\u0430! \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u0432\u0441\u0442\u0443\u043f\u0438\u043b\u0438 \u0432 \u0441\u0438\u043b\u0443.</translation>"
      },
      {
        "sha": "15a32b2050176a3f71bcb580f4f42c743d0c986c",
        "filename": "src/qt/locale/bitcoin_sk.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0819c7e9b428631b806d97ff19beb2e218df31f/src/qt/locale/bitcoin_sk.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0819c7e9b428631b806d97ff19beb2e218df31f/src/qt/locale/bitcoin_sk.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_sk.ts?ref=b0819c7e9b428631b806d97ff19beb2e218df31f",
        "patch": "@@ -2294,10 +2294,6 @@\n         <source>Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)</source>\n         <translation>Pou\u017ei\u0165 samostatn\u00fd SOCKS5 proxy server na dosiahnutie po\u010d\u00edta\u010dov cez skryt\u00e9 slu\u017eby Tor (predvolen\u00e9: %s)</translation>\n     </message>\n-    <message>\n-        <source>Username and hashed password for JSON-RPC connections. The field &lt;userpw&gt; comes in the format: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. A canonical python script is included in share/rpcuser. This option can be specified multiple times</source>\n-        <translation>U\u017e\u00edvate\u013esk\u00e9 hash meno a heslo pre JSON-RPC pripojenia. Pole &lt;userpw&gt; je vo form\u00e1te &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. Kanonick\u00fd python skript je zahrnut\u00fd v share/rpcuser. Toto nastavenie m\u00f4\u017ee by\u0165 \u0161pecifikovan\u00e9 viac kr\u00e1t</translation>\n-    </message>\n     <message>\n         <source>Warning: Unknown block versions being mined! It's possible unknown rules are in effect</source>\n         <translation>Varovanie: Nezn\u00e1ma verzia blokov sa doluje! Je mo\u017en\u00e9, \u017ee nezn\u00e1me pravidl\u00e1 maj\u00fa efekt</translation>"
      },
      {
        "sha": "4d45d20cbfb760d191f7326c7fa70153112dba02",
        "filename": "src/qt/locale/bitcoin_sv.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0819c7e9b428631b806d97ff19beb2e218df31f/src/qt/locale/bitcoin_sv.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0819c7e9b428631b806d97ff19beb2e218df31f/src/qt/locale/bitcoin_sv.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_sv.ts?ref=b0819c7e9b428631b806d97ff19beb2e218df31f",
        "patch": "@@ -2646,10 +2646,6 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n         <source>Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)</source>\n         <translation>Anv\u00e4nd separat SOCKS5 proxy f\u00f6r att n\u00e5 kollegor via dolda tj\u00e4nster i Tor (f\u00f6rvalt: -%s)</translation>\n     </message>\n-    <message>\n-        <source>Username and hashed password for JSON-RPC connections. The field &lt;userpw&gt; comes in the format: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. A canonical python script is included in share/rpcuser. This option can be specified multiple times</source>\n-        <translation>Anv\u00e4ndarnamn och hashat l\u00f6senord f\u00f6r JSON-RPC-anslutningar. F\u00e4ltet &lt;userpw&gt; kommer i formatet: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. Ett kanoniskt pythonskript finns inkluderat i share/rpcuser. Detta alternativ kan anges flera g\u00e5nger</translation>\n-    </message>\n     <message>\n         <source>Warning: Unknown block versions being mined! It's possible unknown rules are in effect</source>\n         <translation>Varning: Ok\u00e4nda blockversioner bryts! Det \u00e4r m\u00f6jligt att ok\u00e4nda regler anv\u00e4nds</translation>"
      },
      {
        "sha": "d1249d09be05614cb7636a93bd42abb4024c39a0",
        "filename": "src/qt/locale/bitcoin_tr.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0819c7e9b428631b806d97ff19beb2e218df31f/src/qt/locale/bitcoin_tr.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0819c7e9b428631b806d97ff19beb2e218df31f/src/qt/locale/bitcoin_tr.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_tr.ts?ref=b0819c7e9b428631b806d97ff19beb2e218df31f",
        "patch": "@@ -2577,10 +2577,6 @@\n         <source>Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)</source>\n         <translation>E\u015flere gizli Tor servisleri ile ula\u015fmak i\u00e7in ayr\u0131 SOCKS5 vekil sunucusu kullan (varsay\u0131lan: %s)</translation>\n     </message>\n-    <message>\n-        <source>Username and hashed password for JSON-RPC connections. The field &lt;userpw&gt; comes in the format: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. A canonical python script is included in share/rpcuser. This option can be specified multiple times</source>\n-        <translation>JSON-RPC ba\u011flant\u0131lar\u0131 i\u00e7in kullan\u0131c\u0131 ismi ve karmalanm\u0131\u015f parola. &lt;userpw&gt; alan\u0131 \u015fu bi\u00e7imdedir: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. Kanonik bir Python beti\u011fi share/rpcuser klas\u00f6r\u00fcnde bulunabilir. Bu se\u00e7enek birden \u00e7ok kez belirtilebilir.</translation>\n-    </message>\n     <message>\n         <source>Warning: Unknown block versions being mined! It's possible unknown rules are in effect</source>\n         <translation>\u0130kaz: bilinmeyen blok s\u00fcr\u00fcm\u00fc olu\u015fturulmaya \u00e7al\u0131\u015f\u0131l\u0131yor. Bilinmeyen kurallar\u0131n i\u015flemesi m\u00fcmk\u00fcnd\u00fcr.</translation>"
      },
      {
        "sha": "9c46c18224793c4b9000474dc32721dc3d3c10e1",
        "filename": "src/qt/locale/bitcoin_uk.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0819c7e9b428631b806d97ff19beb2e218df31f/src/qt/locale/bitcoin_uk.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0819c7e9b428631b806d97ff19beb2e218df31f/src/qt/locale/bitcoin_uk.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_uk.ts?ref=b0819c7e9b428631b806d97ff19beb2e218df31f",
        "patch": "@@ -2157,10 +2157,6 @@\n         <source>Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)</source>\n         <translation>\u0412\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0432\u0430\u0442\u0438 \u043e\u043a\u0440\u0435\u043c\u0438\u0439 SOCKS5-\u043f\u0440\u043e\u043a\u0441\u0456 \u0434\u043b\u044f \u0437'\u0454\u0434\u043d\u0430\u043d\u043d\u044f \u0437 \u0443\u0447\u0430\u0441\u043d\u0438\u043a\u0430\u043c\u0438 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u0438\u0445\u043e\u0432\u0430\u043d\u0456 \u0441\u0435\u0440\u0432\u0456\u0441\u0438 Tor (\u0442\u0438\u043f\u043e\u0432\u043e: %s)</translation>\n     </message>\n-    <message>\n-        <source>Username and hashed password for JSON-RPC connections. The field &lt;userpw&gt; comes in the format: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. A canonical python script is included in share/rpcuser. This option can be specified multiple times</source>\n-        <translation>\u041b\u043e\u0433\u0456\u043d \u0442\u0430 \u0445\u0435\u0448\u043e\u0432\u0430\u043d\u0438\u0439 \u043f\u0430\u0440\u043e\u043b\u044c \u0434\u043b\u044f \u0437\u0432'\u044f\u0437\u043a\u0456\u0432 JSON-RPC. \u041f\u043e\u043b\u0435 &lt;userpw&gt; \u043c\u0430\u0454 \u0444\u043e\u0440\u043c\u0430\u0442: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. \u041a\u043b\u0430\u0441\u0438\u0447\u043d\u0438\u0439 Python script \u0434\u043e\u0434\u0430\u043d\u043e \u0434\u043e share/rpcuser. \u0426\u0435\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u043c\u043e\u0436\u0435 \u0431\u0443\u0442\u0438 \u0437\u0430\u0441\u0442\u043e\u0441\u043e\u0432\u0430\u043d\u0438\u0439 \u0434\u0435\u043a\u0456\u043b\u044c\u043a\u0430 \u0440\u0430\u0437\u0456\u0432.</translation>\n-    </message>\n     <message>\n         <source>(default: %s)</source>\n         <translation>(\u0442\u0438\u043f\u043e\u0432\u043e: %s)</translation>"
      },
      {
        "sha": "8267a4f0e3032af7d8a3374e21e7927705365bf5",
        "filename": "src/qt/locale/bitcoin_zh_CN.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0819c7e9b428631b806d97ff19beb2e218df31f/src/qt/locale/bitcoin_zh_CN.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0819c7e9b428631b806d97ff19beb2e218df31f/src/qt/locale/bitcoin_zh_CN.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_zh_CN.ts?ref=b0819c7e9b428631b806d97ff19beb2e218df31f",
        "patch": "@@ -3505,10 +3505,6 @@\n         <source>Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)</source>\n         <translation>\u901a\u8fc7Tor\u9690\u85cf\u670d\u52a1\u8fde\u63a5\u8282\u70b9\u65f6 \u4f7f\u7528\u4e0d\u540c\u7684SOCKS5\u4ee3\u7406 (\u9ed8\u8ba4: %s)</translation>\n     </message>\n-    <message>\n-        <source>Username and hashed password for JSON-RPC connections. The field &lt;userpw&gt; comes in the format: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. A canonical python script is included in share/rpcuser. This option can be specified multiple times</source>\n-        <translation>JSON-RPC \u8fde\u63a5\u8981\u4f7f\u7528\u7684\u7528\u6237\u540d\u548c\u6563\u5217\u5bc6\u7801\u3002&lt;userpw&gt; \u7684\u683c\u5f0f\u662f\uff1a&lt;\u7528\u6237\u540d&gt;:&lt;\u76d0&gt;$&lt;\u6563\u5217\u503c&gt;\u3002\u5728 share/rpcuser \u76ee\u5f55\u4e0b\u6709\u4e00\u4e2a\u793a\u8303\u7684 python \u811a\u672c\u3002\u8fd9\u4e2a\u9009\u9879\u53ef\u4ee5\u88ab\u591a\u6b21\u6307\u5b9a\u3002</translation>\n-    </message>\n     <message>\n         <source>Warning: Unknown block versions being mined! It's possible unknown rules are in effect</source>\n         <translation>\u8b66\u544a: \u672a\u77e5\u7684\u533a\u5757\u7248\u672c\u88ab\u6316\u6398\uff01\u672a\u77e5\u89c4\u5219\u53ef\u80fd\u5df2\u751f\u6548</translation>"
      },
      {
        "sha": "bdcf9662972afedde5c99d2dcb539e3060753103",
        "filename": "src/qt/locale/bitcoin_zh_TW.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0819c7e9b428631b806d97ff19beb2e218df31f/src/qt/locale/bitcoin_zh_TW.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0819c7e9b428631b806d97ff19beb2e218df31f/src/qt/locale/bitcoin_zh_TW.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_zh_TW.ts?ref=b0819c7e9b428631b806d97ff19beb2e218df31f",
        "patch": "@@ -3702,10 +3702,6 @@\n         <source>Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)</source>\n         <translation>\u4f7f\u7528\u53e6\u5916\u7684 SOCK5 \u4ee3\u7406\u4f3a\u670d\u5668\uff0c\u4f86\u900f\u904e Tor \u96b1\u85cf\u670d\u52d9\u8ddf\u5176\u4ed6\u7bc0\u9ede\u806f\u7d61(\u9810\u8a2d\u503c: %s)</translation>\n     </message>\n-    <message>\n-        <source>Username and hashed password for JSON-RPC connections. The field &lt;userpw&gt; comes in the format: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. A canonical python script is included in share/rpcuser. This option can be specified multiple times</source>\n-        <translation>JSON-RPC \u9023\u7dda\u8981\u7528\u7684\u4f7f\u7528\u8005\u540d\u7a31\u548c\u96dc\u6e4a\u5bc6\u78bc\u3002&lt;userpw&gt; \u7684\u683c\u5f0f\u662f\uff1a&lt;\u4f7f\u7528\u8005\u540d\u7a31&gt;:&lt;\u8abf\u5473\u503c&gt;$&lt;\u96dc\u6e4a\u503c&gt;\u3002\u5728 share/rpcuser \u76ee\u9304\u4e0b\u6709\u4e00\u500b\u793a\u7bc4\u7684 python \u7a0b\u5f0f\u3002\u9019\u500b\u9078\u9805\u53ef\u4ee5\u7d66\u5f88\u591a\u6b21\u3002</translation>\n-    </message>\n     <message>\n         <source>Warning: Unknown block versions being mined! It's possible unknown rules are in effect</source>\n         <translation>\u8b66\u544a: \u6709\u7926\u5de5\u6b63\u5728\u958b\u63a1\u4e0d\u660e\u7248\u672c\u7684\u5340\u584a\uff01\u9019\u8868\u793a\u6709\u4e0d\u660e\u7684\u4ea4\u6613\u898f\u5247\u6b63\u5728\u4f5c\u7528\u4e2d</translation>"
      }
    ]
  },
  {
    "sha": "812714fd80e96e28cd288c553c83838cecbfc2d9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MTI3MTRmZDgwZTk2ZTI4Y2QyODhjNTUzYzgzODM4Y2VjYmZjMmQ5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-01-16T21:33:10Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-01-16T22:07:30Z"
      },
      "message": "Merge #9484: Introduce assumevalid setting to skip validation presumed valid scripts.\n\n7b5e3fe Add assumevalid testcase (John Newbery)\ne440ac7 Introduce assumevalid setting to skip presumed valid scripts. (Gregory Maxwell)",
      "tree": {
        "sha": "05ff0a68dd7160451efb032d7dd792e12e6300e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/05ff0a68dd7160451efb032d7dd792e12e6300e5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/812714fd80e96e28cd288c553c83838cecbfc2d9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJYfUQjAAoJENuhpnN5oakx6GAQAKIrEt/9dprVw4TFcyq0ZOK4\nUibQHakHCAGyQ26oCgLTktsArP915ufmaUHMMcbe5N92mJo3xyVBLT1R1elTLmag\nJn7GAOHdCcxWyWzwWtbn78CyAIuDZSsBYR7USdd76dkyly7KC/2iuWJqkUwayYCd\nsUGAaxJ5c4oCrO+D3YOwmyCQliPcN3yEd1g/F4JWxwVSxAds21/J6Yi1Bl1nOq6h\nruJRBztFeqmM2XUWPejyCOBI9eS133zE7acPOJVMrBTew1wn++W2uv5MnQov1Z0Y\nQORm+VETMUlpXyme9KqXId5+BJjBPB3UPOtsFkw8u+zb6CL7Jankbj/e15bgYm6p\na8E7GmtSjwQW9e8mHWKjbioCbSU2Y0IVnq38+W+YgGc7qyF4YGHH62B3k8fB7uk/\nDTwD18rvztx8/WyEBApl8t7WHIvNtNr/bpmoOlWDxG0vDp/q1fD8/4m3oyxbb5Oq\nfpzB4Qx/xTkYxzNzXZcwRBX1hRLWcDuzeXpnyA38z64gQkPmOIeBNNsuoNN0oJoL\n5eSIMwxNxewMB4JA4rvo3Oc2xXo3+sPlM/1h5/a4aT9T4c4bODGiqplmN4wa2nnD\n3XdjjVXbFn2VyJOb0d/OG5TnZYl1r+z10j0KUneh36Yf4kErRQdcpIJrSbkEGhSP\n1uy8/eZL9LdWXoPStJGe\n=qJDy\n-----END PGP SIGNATURE-----",
        "payload": "tree 05ff0a68dd7160451efb032d7dd792e12e6300e5\nparent b0819c7e9b428631b806d97ff19beb2e218df31f\nparent 7b5e3fe0ccb434821927c9cc2e9f2fb0d7f01dc4\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1484602390 -0800\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1484604450 -0800\n\nMerge #9484: Introduce assumevalid setting to skip validation presumed valid scripts.\n\n7b5e3fe Add assumevalid testcase (John Newbery)\ne440ac7 Introduce assumevalid setting to skip presumed valid scripts. (Gregory Maxwell)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/812714fd80e96e28cd288c553c83838cecbfc2d9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/812714fd80e96e28cd288c553c83838cecbfc2d9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/812714fd80e96e28cd288c553c83838cecbfc2d9/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b0819c7e9b428631b806d97ff19beb2e218df31f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0819c7e9b428631b806d97ff19beb2e218df31f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b0819c7e9b428631b806d97ff19beb2e218df31f"
      },
      {
        "sha": "7b5e3fe0ccb434821927c9cc2e9f2fb0d7f01dc4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b5e3fe0ccb434821927c9cc2e9f2fb0d7f01dc4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7b5e3fe0ccb434821927c9cc2e9f2fb0d7f01dc4"
      }
    ],
    "stats": {
      "total": 278,
      "additions": 266,
      "deletions": 12
    },
    "files": [
      {
        "sha": "bbda55854ffe957170d92433ed53007a09cc9850",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 22,
        "deletions": 1,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/812714fd80e96e28cd288c553c83838cecbfc2d9/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/812714fd80e96e28cd288c553c83838cecbfc2d9/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=812714fd80e96e28cd288c553c83838cecbfc2d9",
        "patch": "@@ -52,7 +52,7 @@ Fee Estimation Changes\n   (previously 25) and for RPC calls (previously 2).\n \n Removal of Priority Estimation\n-------------------------------\n+-------------------------------\n \n - Estimation of \"priority\" needed for a transaction to be included within a target\n   number of blocks has been removed.  The rpc calls are deprecated and will either\n@@ -76,6 +76,27 @@ P2P connection management\n \n - New connections to manually added peers are much faster.\n \n+Introduction of assumed-valid blocks\n+-------------------------------------\n+\n+- A significant portion of the initial block download time is spent verifying\n+  scripts/signatures.  Although the verification must pass to ensure the security\n+  of the system, no other result from this verification is needed: If the node\n+  knew the history of a given block were valid it could skip checking scripts\n+  for its ancestors.\n+\n+- A new configuration option 'assumevalid' is provided to express this knowledge\n+  to the software.  Unlike the 'checkpoints' in the past this setting does not\n+  force the use of a particular chain: chains that are consistent with it are\n+  processed quicker, but other chains are still accepted if they'd otherwise\n+  be chosen as best. Also unlike 'checkpoints' the user can configure which\n+  block history is assumed true, this means that even outdated software can\n+  sync more quickly if the setting is updated by the user.\n+\n+- Because the validity of a chain history is a simple objective fact it is much\n+  easier to review this setting.  As a result the software ships with a default\n+  value adjusted to match the current chain shortly before release.  The use\n+  of this default value can be disabled by setting -assumevalid=0\n \n 0.14.0 Change log\n ================="
      },
      {
        "sha": "399ed25c91569998c78ba6ad1085167ba3adc844",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/812714fd80e96e28cd288c553c83838cecbfc2d9/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/812714fd80e96e28cd288c553c83838cecbfc2d9/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=812714fd80e96e28cd288c553c83838cecbfc2d9",
        "patch": "@@ -13,6 +13,11 @@ Before every minor and major release:\n * Update version in sources (see below)\n * Write release notes (see below)\n * Update `src/chainparams.cpp` nMinimumChainWork with information from the getblockchaininfo rpc.\n+* Update `src/chainparams.cpp` defaultAssumeValid  with information from the getblockhash rpc.\n+  - The selected value must not be orphaned so it may be useful to set the value two blocks back from the tip.\n+  - Testnet should be set some tens of thousands back from the tip due to reorgs there.\n+  - This update should be reviewed with a reindex-chainstate with assumevalid=0 to catch any defect\n+     that causes rejection of blocks in the past history.\n \n Before every major release:\n "
      },
      {
        "sha": "e4bc22951b3944a28b89ecee349a637e6bc6cf69",
        "filename": "qa/rpc-tests/assumevalid.py",
        "status": "added",
        "additions": 191,
        "deletions": 0,
        "changes": 191,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/812714fd80e96e28cd288c553c83838cecbfc2d9/qa/rpc-tests/assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/812714fd80e96e28cd288c553c83838cecbfc2d9/qa/rpc-tests/assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/assumevalid.py?ref=812714fd80e96e28cd288c553c83838cecbfc2d9",
        "patch": "@@ -0,0 +1,191 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+'''\n+assumevalid.py\n+\n+Test logic for skipping signature validation on blocks which we've assumed\n+valid (https://github.com/bitcoin/bitcoin/pull/9484)\n+\n+We build a chain that includes and invalid signature for one of the\n+transactions:\n+\n+    0:        genesis block\n+    1:        block 1 with coinbase transaction output.\n+    2-101:    bury that block with 100 blocks so the coinbase transaction\n+              output can be spent\n+    102:      a block containing a transaction spending the coinbase\n+              transaction output. The transaction has an invalid signature. \n+    103-2202: bury the bad block with just over two weeks' worth of blocks\n+              (2100 blocks)\n+\n+Start three nodes:\n+\n+    - node0 has no -assumevalid parameter. Try to sync to block 2202. It will\n+      reject block 102 and only sync as far as block 101\n+    - node1 has -assumevalid set to the hash of block 102. Try to sync to\n+      block 2202. node1 will sync all the way to block 2202.\n+    - node2 has -assumevalid set to the hash of block 102. Try to sync to\n+      block 200. node2 will reject block 102 since it's assumed valid, but it\n+      isn't buried by at least two weeks' work.\n+'''\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.key import CECKey\n+from test_framework.script import *\n+\n+class BaseNode(SingleNodeConnCB):\n+    def __init__(self):\n+        SingleNodeConnCB.__init__(self)\n+        self.last_inv = None\n+        self.last_headers = None\n+        self.last_block = None\n+        self.last_getdata = None\n+        self.block_announced = False\n+        self.last_getheaders = None\n+        self.disconnected = False\n+        self.last_blockhash_announced = None\n+\n+    def on_close(self, conn):\n+        self.disconnected = True\n+\n+    def wait_for_disconnect(self, timeout=60):\n+        test_function = lambda: self.disconnected\n+        assert(wait_until(test_function, timeout=timeout))\n+        return\n+\n+    def send_header_for_blocks(self, new_blocks):\n+        headers_message = msg_headers()\n+        headers_message.headers = [ CBlockHeader(b) for b in new_blocks ]\n+        self.send_message(headers_message)\n+\n+class SendHeadersTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 3\n+\n+    def setup_network(self):\n+        # Start node0. We don't start the other nodes yet since\n+        # we need to pre-mine a block with an invalid transaction\n+        # signature so we can pass in the block hash as assumevalid.\n+        self.nodes = []\n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\"]))\n+\n+    def run_test(self):\n+\n+        # Connect to node0\n+        node0 = BaseNode()\n+        connections = []\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], node0))\n+        node0.add_connection(connections[0])\n+\n+        NetworkThread().start() # Start up network handling in another thread\n+        node0.wait_for_verack()\n+\n+        # Build the blockchain\n+        self.tip = int(self.nodes[0].getbestblockhash(), 16)\n+        self.block_time = self.nodes[0].getblock(self.nodes[0].getbestblockhash())['time'] + 1\n+\n+        self.blocks = []\n+\n+        # Get a pubkey for the coinbase TXO\n+        coinbase_key = CECKey()\n+        coinbase_key.set_secretbytes(b\"horsebattery\")\n+        coinbase_pubkey = coinbase_key.get_pubkey()\n+\n+        # Create the first block with a coinbase output to our key\n+        height = 1\n+        block = create_block(self.tip, create_coinbase(height, coinbase_pubkey), self.block_time)\n+        self.blocks.append(block)\n+        self.block_time += 1\n+        block.solve()\n+        # Save the coinbase for later\n+        self.block1 = block\n+        self.tip = block.sha256\n+        height += 1\n+\n+        # Bury the block 100 deep so the coinbase output is spendable\n+        for i in range(100):\n+            block = create_block(self.tip, create_coinbase(height), self.block_time)\n+            block.solve()\n+            self.blocks.append(block)\n+            self.tip = block.sha256\n+            self.block_time += 1\n+            height += 1\n+\n+        # Create a transaction spending the coinbase output with an invalid (null) signature\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.block1.vtx[0].sha256, 0), scriptSig=b\"\"))\n+        tx.vout.append(CTxOut(49*100000000, CScript([OP_TRUE])))\n+        tx.calc_sha256()\n+\n+        block102 = create_block(self.tip, create_coinbase(height), self.block_time)\n+        self.block_time += 1\n+        block102.vtx.extend([tx])\n+        block102.hashMerkleRoot = block102.calc_merkle_root()\n+        block102.rehash()\n+        block102.solve()\n+        self.blocks.append(block102)\n+        self.tip = block102.sha256\n+        self.block_time += 1\n+        height += 1\n+\n+        # Bury the assumed valid block 2100 deep\n+        for i in range(2100):\n+            block = create_block(self.tip, create_coinbase(height), self.block_time)\n+            block.nVersion = 4\n+            block.solve()\n+            self.blocks.append(block)\n+            self.tip = block.sha256\n+            self.block_time += 1\n+            height += 1\n+\n+        # Start node1 and node2 with assumevalid so they accept a block with a bad signature.\n+        self.nodes.append(start_node(1, self.options.tmpdir,\n+                                     [\"-debug\", \"-assumevalid=\" + hex(block102.sha256)]))\n+        node1 = BaseNode()  # connects to node1\n+        connections.append(NodeConn('127.0.0.1', p2p_port(1), self.nodes[1], node1))\n+        node1.add_connection(connections[1])\n+        node1.wait_for_verack()\n+\n+        self.nodes.append(start_node(2, self.options.tmpdir,\n+                                     [\"-debug\", \"-assumevalid=\" + hex(block102.sha256)]))\n+        node2 = BaseNode()  # connects to node2\n+        connections.append(NodeConn('127.0.0.1', p2p_port(2), self.nodes[2], node2))\n+        node2.add_connection(connections[2])\n+        node2.wait_for_verack()\n+\n+        # send header lists to all three nodes\n+        node0.send_header_for_blocks(self.blocks[0:2000])\n+        node0.send_header_for_blocks(self.blocks[2000:])\n+        node1.send_header_for_blocks(self.blocks[0:2000])\n+        node1.send_header_for_blocks(self.blocks[2000:])\n+        node2.send_header_for_blocks(self.blocks[0:200])\n+\n+        # Send 102 blocks to node0. Block 102 will be rejected.\n+        for i in range(101):\n+            node0.send_message(msg_block(self.blocks[i]))\n+        node0.sync_with_ping() # make sure the most recent block is synced\n+        node0.send_message(msg_block(self.blocks[101]))\n+        assert_equal(self.nodes[0].getblock(self.nodes[0].getbestblockhash())['height'], 101)\n+\n+        # Send 3102 blocks to node1. All blocks will be accepted.\n+        for i in range(2202):\n+            node1.send_message(msg_block(self.blocks[i]))\n+        node1.sync_with_ping() # make sure the most recent block is synced\n+        assert_equal(self.nodes[1].getblock(self.nodes[1].getbestblockhash())['height'], 2202)\n+\n+        # Send 102 blocks to node2. Block 102 will be rejected.\n+        for i in range(101):\n+            node2.send_message(msg_block(self.blocks[i]))\n+        node2.sync_with_ping() # make sure the most recent block is synced\n+        node2.send_message(msg_block(self.blocks[101]))\n+        assert_equal(self.nodes[2].getblock(self.nodes[2].getbestblockhash())['height'], 101)\n+\n+if __name__ == '__main__':\n+    SendHeadersTest().main()"
      },
      {
        "sha": "d99f800f0a9d48214f58aa796c214a8a05f423c2",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/812714fd80e96e28cd288c553c83838cecbfc2d9/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/812714fd80e96e28cd288c553c83838cecbfc2d9/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=812714fd80e96e28cd288c553c83838cecbfc2d9",
        "patch": "@@ -99,6 +99,9 @@ class CMainParams : public CChainParams {\n         // The best chain should have at least this much work.\n         consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000002cb971dd56d1c583c20f90\");\n \n+        // By default assume that the signatures in ancestors of this block are valid.\n+        consensus.defaultAssumeValid = uint256S(\"0x0000000000000000030abc968e1bd635736e880b946085c93152969b9a81a6e2\"); //447235\n+\n         /**\n          * The message start string is designed to be unlikely to occur in normal data.\n          * The characters are rarely used upper ASCII, not valid as UTF-8, and produce\n@@ -201,6 +204,9 @@ class CTestNetParams : public CChainParams {\n         // The best chain should have at least this much work.\n         consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000000000198b4def2baa9338d6\");\n \n+        // By default assume that the signatures in ancestors of this block are valid.\n+        consensus.defaultAssumeValid = uint256S(\"0x000000000871ee6842d3648317ccc8a435eb8cc3c2429aee94faff9ba26b05a0\"); //1043841\n+\n         pchMessageStart[0] = 0x0b;\n         pchMessageStart[1] = 0x11;\n         pchMessageStart[2] = 0x09;\n@@ -283,6 +289,9 @@ class CRegTestParams : public CChainParams {\n         // The best chain should have at least this much work.\n         consensus.nMinimumChainWork = uint256S(\"0x00\");\n \n+        // By default assume that the signatures in ancestors of this block are valid.\n+        consensus.defaultAssumeValid = uint256S(\"0x00\");\n+\n         pchMessageStart[0] = 0xfa;\n         pchMessageStart[1] = 0xbf;\n         pchMessageStart[2] = 0xb5;"
      },
      {
        "sha": "3f98938f7ee2041695deef637eda97dcc2bf6cf6",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/812714fd80e96e28cd288c553c83838cecbfc2d9/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/812714fd80e96e28cd288c553c83838cecbfc2d9/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=812714fd80e96e28cd288c553c83838cecbfc2d9",
        "patch": "@@ -62,6 +62,7 @@ struct Params {\n     int64_t nPowTargetTimespan;\n     int64_t DifficultyAdjustmentInterval() const { return nPowTargetTimespan / nPowTargetSpacing; }\n     uint256 nMinimumChainWork;\n+    uint256 defaultAssumeValid;\n };\n } // namespace Consensus\n "
      },
      {
        "sha": "14c0a36f52e3ae154cb8245dc6fcafe010dffae7",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/812714fd80e96e28cd288c553c83838cecbfc2d9/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/812714fd80e96e28cd288c553c83838cecbfc2d9/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=812714fd80e96e28cd288c553c83838cecbfc2d9",
        "patch": "@@ -329,8 +329,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-blocknotify=<cmd>\", _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\"));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-blocksonly\", strprintf(_(\"Whether to operate in a blocks only mode (default: %u)\"), DEFAULT_BLOCKSONLY));\n-    strUsage += HelpMessageOpt(\"-checkblocks=<n>\", strprintf(_(\"How many blocks to check at startup (default: %u, 0 = all)\"), DEFAULT_CHECKBLOCKS));\n-    strUsage += HelpMessageOpt(\"-checklevel=<n>\", strprintf(_(\"How thorough the block verification of -checkblocks is (0-4, default: %u)\"), DEFAULT_CHECKLEVEL));\n+    strUsage +=HelpMessageOpt(\"-assumevalid=<hex>\", strprintf(_(\"If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)\"), Params(CBaseChainParams::MAIN).GetConsensus().defaultAssumeValid.GetHex(), Params(CBaseChainParams::TESTNET).GetConsensus().defaultAssumeValid.GetHex()));\n     strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), BITCOIN_CONF_FILENAME));\n     if (mode == HMM_BITCOIND)\n     {\n@@ -420,6 +419,8 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-uacomment=<cmt>\", _(\"Append comment to the user agent string\"));\n     if (showDebug)\n     {\n+        strUsage += HelpMessageOpt(\"-checkblocks=<n>\", strprintf(_(\"How many blocks to check at startup (default: %u, 0 = all)\"), DEFAULT_CHECKBLOCKS));\n+        strUsage += HelpMessageOpt(\"-checklevel=<n>\", strprintf(_(\"How thorough the block verification of -checkblocks is (0-4, default: %u)\"), DEFAULT_CHECKLEVEL));\n         strUsage += HelpMessageOpt(\"-checkblockindex\", strprintf(\"Do a full consistency check for mapBlockIndex, setBlockIndexCandidates, chainActive and mapBlocksUnlinked occasionally. Also sets -checkmempool (default: %u)\", Params(CBaseChainParams::MAIN).DefaultConsistencyChecks()));\n         strUsage += HelpMessageOpt(\"-checkmempool=<n>\", strprintf(\"Run checks every <n> transactions (default: %u)\", Params(CBaseChainParams::MAIN).DefaultConsistencyChecks()));\n         strUsage += HelpMessageOpt(\"-checkpoints\", strprintf(\"Disable expensive verification for known chain history (default: %u)\", DEFAULT_CHECKPOINTS_ENABLED));\n@@ -924,6 +925,12 @@ bool AppInitParameterInteraction()\n     fCheckBlockIndex = GetBoolArg(\"-checkblockindex\", chainparams.DefaultConsistencyChecks());\n     fCheckpointsEnabled = GetBoolArg(\"-checkpoints\", DEFAULT_CHECKPOINTS_ENABLED);\n \n+    hashAssumeValid = uint256S(GetArg(\"-assumevalid\", chainparams.GetConsensus().defaultAssumeValid.GetHex()));\n+    if (!hashAssumeValid.IsNull())\n+        LogPrintf(\"Assuming ancestors of block %s have valid signatures.\\n\", hashAssumeValid.GetHex());\n+    else\n+        LogPrintf(\"Validating signatures for all blocks.\\n\");\n+\n     // mempool limits\n     int64_t nMempoolSizeMax = GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     int64_t nMempoolSizeMin = GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000 * 40;"
      },
      {
        "sha": "2ad3dadeb6d030655fcfb7c3c9e4b6ae40a5f765",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 9,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/812714fd80e96e28cd288c553c83838cecbfc2d9/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/812714fd80e96e28cd288c553c83838cecbfc2d9/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=812714fd80e96e28cd288c553c83838cecbfc2d9",
        "patch": "@@ -78,6 +78,7 @@ uint64_t nPruneTarget = 0;\n int64_t nMaxTipAge = DEFAULT_MAX_TIP_AGE;\n bool fEnableReplacement = DEFAULT_ENABLE_REPLACEMENT;\n \n+uint256 hashAssumeValid;\n \n CFeeRate minRelayTxFee = CFeeRate(DEFAULT_MIN_RELAY_TX_FEE);\n CAmount maxTxFee = DEFAULT_TRANSACTION_MAXFEE;\n@@ -1389,11 +1390,10 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n         // Only if ALL inputs pass do we perform expensive ECDSA signature checks.\n         // Helps prevent CPU exhaustion attacks.\n \n-        // Skip ECDSA signature verification when connecting blocks before the\n-        // last block chain checkpoint. Assuming the checkpoints are valid this\n+        // Skip script verification when connecting blocks under the\n+        // assumedvalid block. Assuming the assumedvalid block is valid this\n         // is safe because block merkle hashes are still computed and checked,\n-        // and any change will be caught at the next checkpoint. Of course, if\n-        // the checkpoint is for a chain that's invalid due to false scriptSigs\n+        // Of course, if an assumed valid block is invalid due to false scriptSigs\n         // this optimization would allow an invalid chain to be accepted.\n         if (fScriptChecks) {\n             for (unsigned int i = 0; i < tx.vin.size(); i++) {\n@@ -1721,11 +1721,28 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     }\n \n     bool fScriptChecks = true;\n-    if (fCheckpointsEnabled) {\n-        CBlockIndex *pindexLastCheckpoint = Checkpoints::GetLastCheckpoint(chainparams.Checkpoints());\n-        if (pindexLastCheckpoint && pindexLastCheckpoint->GetAncestor(pindex->nHeight) == pindex) {\n-            // This block is an ancestor of a checkpoint: disable script checks\n-            fScriptChecks = false;\n+    if (!hashAssumeValid.IsNull()) {\n+        // We've been configured with the hash of a block which has been externally verified to have a valid history.\n+        // A suitable default value is included with the software and updated from time to time.  Because validity\n+        //  relative to a piece of software is an objective fact these defaults can be easily reviewed.\n+        // This setting doesn't force the selection of any particular chain but makes validating some faster by\n+        //  effectively caching the result of part of the verification.\n+        BlockMap::const_iterator  it = mapBlockIndex.find(hashAssumeValid);\n+        if (it != mapBlockIndex.end()) {\n+            if (it->second->GetAncestor(pindex->nHeight) == pindex &&\n+                pindexBestHeader->GetAncestor(pindex->nHeight) == pindex &&\n+                pindexBestHeader->nChainWork >= UintToArith256(chainparams.GetConsensus().nMinimumChainWork)) {\n+                // This block is a member of the assumed verified chain and an ancestor of the best header.\n+                // The equivalent time check discourages hashpower from extorting the network via DOS attack\n+                //  into accepting an invalid block through telling users they must manually set assumevalid.\n+                //  Requiring a software change or burying the invalid block, regardless of the setting, makes\n+                //  it hard to hide the implication of the demand.  This also avoids having release candidates\n+                //  that are hardly doing any signature verification at all in testing without having to\n+                //  artificially set the default assumed verified block further back.\n+                // The test against nMinimumChainWork prevents the skipping when denied access to any chain at\n+                //  least as good as the expected chain.\n+                fScriptChecks = (GetBlockProofEquivalentTime(*pindexBestHeader, *pindex, *pindexBestHeader, chainparams.GetConsensus()) <= 60 * 60 * 24 * 7 * 2);\n+            }\n         }\n     }\n "
      },
      {
        "sha": "e57c636422bd91809bb3eff72530c4412c0d7c92",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/812714fd80e96e28cd288c553c83838cecbfc2d9/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/812714fd80e96e28cd288c553c83838cecbfc2d9/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=812714fd80e96e28cd288c553c83838cecbfc2d9",
        "patch": "@@ -186,6 +186,9 @@ extern CAmount maxTxFee;\n extern int64_t nMaxTipAge;\n extern bool fEnableReplacement;\n \n+/** Block hash whose ancestors we will assume to have valid scripts without checking them. */\n+extern uint256 hashAssumeValid;\n+\n /** Best header we've seen so far (used for getheaders queries' starting points). */\n extern CBlockIndex *pindexBestHeader;\n "
      }
    ]
  },
  {
    "sha": "6696b4635ceb9b47aaa63244bff9032fa7b08354",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Njk2YjQ2MzVjZWI5YjQ3YWFhNjMyNDRiZmY5MDMyZmE3YjA4MzU0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-01-17T03:47:35Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-01-17T03:54:52Z"
      },
      "message": "Merge #9561: Wake message handling thread when we receive a new block\n\n241d893 Wake message handling thread when we receive a new block (Matt Corallo)\nf13914a Make WakeMessageHandler public (Matt Corallo)",
      "tree": {
        "sha": "1a4b948981bfa396b29b816535aa1469fda73e72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1a4b948981bfa396b29b816535aa1469fda73e72"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6696b4635ceb9b47aaa63244bff9032fa7b08354",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJYfZWMAAoJENuhpnN5oakx5RwP/34Q/zkuXABeIHESHkcYnenK\n1FFpUnmwjVotKZRkLcSkdCrpbGSsqRsXj50Yqb/N25NWACrOuZmegWz+xl0NrKIO\n01mI1rmPvry2GrgBMUL+y6PjBmr0XH2f7rBhjP0v3Y73TAg9O/yIClduEHTHznbb\n9YKrOwrR4pqN17FR+VgDmJ1Jyp0u13G5GSocaBSbuYJEKd1GH0mWoXPNc7Y1y/Lb\nAHyfH4sqewbrIVZx/l6neXzkkh1rSpHpgWqL7JMOQ/sFfORJFkfQuq/iJQ9NMU/w\nyTk4szpaHrVzxq6BSXvsFJ0kKOVH59WqdaZVnfMnpYubWc/x4rsPpz/nTSWABtNm\nQtdAjy7Kb0C//7chshxilNrwILJp4C4ZbGt7ESgJlvG+bev4vR+LZWTzjxdCBtza\nh5pGLkUVOyot2udgCnXSLkH/HyvpRhM2UbTPNb8VFfP3Q7fWd33hVtU1qjcX3NDz\nysqRsOS0/MLA1JkhTL0m8J8Tgz1MBIpWNDlJ8ejM6pxd3TwUNIPnJna1fgySnOp1\ndqlmTpvIUaMMBthuKihlK/6s9gq7A7r1G8lwvKGMXwG0/xBERWxC2QqzRZJyrNsN\nWt3aa9NqHMrMfm3vNVsGolhP3fzIIPM1GaXMAjY6X2lhj0c8DF3jZXYEJyALujhh\nQFrd7nda2sh4TWOoFJxQ\n=EES9\n-----END PGP SIGNATURE-----",
        "payload": "tree 1a4b948981bfa396b29b816535aa1469fda73e72\nparent 812714fd80e96e28cd288c553c83838cecbfc2d9\nparent 241d8938f4b5de1d2564ec7e064d8b0b8efd84a4\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1484624855 -0800\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1484625292 -0800\n\nMerge #9561: Wake message handling thread when we receive a new block\n\n241d893 Wake message handling thread when we receive a new block (Matt Corallo)\nf13914a Make WakeMessageHandler public (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6696b4635ceb9b47aaa63244bff9032fa7b08354",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6696b4635ceb9b47aaa63244bff9032fa7b08354",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6696b4635ceb9b47aaa63244bff9032fa7b08354/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "812714fd80e96e28cd288c553c83838cecbfc2d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/812714fd80e96e28cd288c553c83838cecbfc2d9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/812714fd80e96e28cd288c553c83838cecbfc2d9"
      },
      {
        "sha": "241d8938f4b5de1d2564ec7e064d8b0b8efd84a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/241d8938f4b5de1d2564ec7e064d8b0b8efd84a4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/241d8938f4b5de1d2564ec7e064d8b0b8efd84a4"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "a9da38146bba551ad7a25ab69d1d833e0d2f03e4",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6696b4635ceb9b47aaa63244bff9032fa7b08354/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6696b4635ceb9b47aaa63244bff9032fa7b08354/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=6696b4635ceb9b47aaa63244bff9032fa7b08354",
        "patch": "@@ -328,6 +328,8 @@ class CConnman\n     CSipHasher GetDeterministicRandomizer(uint64_t id);\n \n     unsigned int GetReceiveFloodSize() const;\n+\n+    void WakeMessageHandler();\n private:\n     struct ListenSocket {\n         SOCKET socket;\n@@ -344,8 +346,6 @@ class CConnman\n     void ThreadSocketHandler();\n     void ThreadDNSAddressSeed();\n \n-    void WakeMessageHandler();\n-\n     uint64_t CalculateKeyedNetGroup(const CAddress& ad);\n \n     CNode* FindNode(const CNetAddr& ip);"
      },
      {
        "sha": "03568283fbb78052f9758ef8dfacee42aef0eba1",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6696b4635ceb9b47aaa63244bff9032fa7b08354/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6696b4635ceb9b47aaa63244bff9032fa7b08354/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=6696b4635ceb9b47aaa63244bff9032fa7b08354",
        "patch": "@@ -827,6 +827,7 @@ void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CB\n                 }\n             }\n         });\n+        connman->WakeMessageHandler();\n     }\n \n     nTimeBestReceived = GetTime();"
      }
    ]
  },
  {
    "sha": "1ccfe9b1c93460e3d345948c3740cfeca45e2ee3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxY2NmZTliMWM5MzQ2MGUzZDM0NTk0OGMzNzQwY2ZlY2E0NWUyZWUz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-17T03:58:06Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-17T03:58:06Z"
      },
      "message": "Clarify comment about mempool/extra conflicts",
      "tree": {
        "sha": "6db980c650a08d5a72f486521fc187ca5b0da07c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6db980c650a08d5a72f486521fc187ca5b0da07c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ccfe9b1c93460e3d345948c3740cfeca45e2ee3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ccfe9b1c93460e3d345948c3740cfeca45e2ee3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1ccfe9b1c93460e3d345948c3740cfeca45e2ee3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ccfe9b1c93460e3d345948c3740cfeca45e2ee3/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fac4c78028d132ee7becc1dc54a0c881ae1a0287",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fac4c78028d132ee7becc1dc54a0c881ae1a0287",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fac4c78028d132ee7becc1dc54a0c881ae1a0287"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "4a311cbba2a65927eda6f798ff11ec6a4386c477",
        "filename": "src/blockencodings.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ccfe9b1c93460e3d345948c3740cfeca45e2ee3/src/blockencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ccfe9b1c93460e3d345948c3740cfeca45e2ee3/src/blockencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.cpp?ref=1ccfe9b1c93460e3d345948c3740cfeca45e2ee3",
        "patch": "@@ -143,7 +143,8 @@ ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& c\n                 mempool_count++;\n                 extra_count++;\n             } else {\n-                // If we find two mempool txn that match the short id, just request it.\n+                // If we find two mempool/extra txn that match the short id, just\n+                // request it.\n                 // This should be rare enough that the extra bandwidth doesn't matter,\n                 // but eating a round-trip due to FillBlock failure would be annoying\n                 // Note that we dont want duplication between extra_txn and mempool to"
      }
    ]
  },
  {
    "sha": "c5945804ca7e5edd9fce8c6de9b1f0ef775f9e79",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNTk0NTgwNGNhN2U1ZWRkOWZjZThjNmRlOWIxZjBlZjc3NWY5ZTc5",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-17T04:00:58Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-17T04:00:58Z"
      },
      "message": "Add braces around AddToCompactExtraTransactions",
      "tree": {
        "sha": "b6ed71d4a9ce0c15d6c5786bda5909040a8de994",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b6ed71d4a9ce0c15d6c5786bda5909040a8de994"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c5945804ca7e5edd9fce8c6de9b1f0ef775f9e79",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5945804ca7e5edd9fce8c6de9b1f0ef775f9e79",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c5945804ca7e5edd9fce8c6de9b1f0ef775f9e79",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5945804ca7e5edd9fce8c6de9b1f0ef775f9e79/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1ccfe9b1c93460e3d345948c3740cfeca45e2ee3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ccfe9b1c93460e3d345948c3740cfeca45e2ee3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1ccfe9b1c93460e3d345948c3740cfeca45e2ee3"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "b1e606abaed91de604a69a1c1b485fcb62d4baa7",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5945804ca7e5edd9fce8c6de9b1f0ef775f9e79/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5945804ca7e5edd9fce8c6de9b1f0ef775f9e79/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=c5945804ca7e5edd9fce8c6de9b1f0ef775f9e79",
        "patch": "@@ -1741,10 +1741,12 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 // See https://github.com/bitcoin/bitcoin/issues/8279 for details.\n                 assert(recentRejects);\n                 recentRejects->insert(tx.GetHash());\n-                if (RecursiveDynamicUsage(*ptx) < 100000)\n+                if (RecursiveDynamicUsage(*ptx) < 100000) {\n                     AddToCompactExtraTransactions(ptx);\n-            } else if (tx.HasWitness() && RecursiveDynamicUsage(*ptx) < 100000)\n+                }\n+            } else if (tx.HasWitness() && RecursiveDynamicUsage(*ptx) < 100000) {\n                 AddToCompactExtraTransactions(ptx);\n+            }\n \n             if (pfrom->fWhitelisted && GetBoolArg(\"-whitelistforcerelay\", DEFAULT_WHITELISTFORCERELAY)) {\n                 // Always relay transactions received from whitelisted peers, even"
      }
    ]
  },
  {
    "sha": "ee5c1ce5a6155d502d8e779d3490d6cf66374c3f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZTVjMWNlNWE2MTU1ZDUwMmQ4ZTc3OWQzNDkwZDZjZjY2Mzc0YzNm",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-01-11T06:31:16Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-01-18T03:07:13Z"
      },
      "message": "Bug-fix: listsinceblock: use closest common ancestor when a block hash was provided for a chain that was not the main chain.",
      "tree": {
        "sha": "8747ac02a8749c889f347b3f8fc2028e5b1fc385",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8747ac02a8749c889f347b3f8fc2028e5b1fc385"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee5c1ce5a6155d502d8e779d3490d6cf66374c3f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee5c1ce5a6155d502d8e779d3490d6cf66374c3f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ee5c1ce5a6155d502d8e779d3490d6cf66374c3f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee5c1ce5a6155d502d8e779d3490d6cf66374c3f/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6696b4635ceb9b47aaa63244bff9032fa7b08354",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6696b4635ceb9b47aaa63244bff9032fa7b08354",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6696b4635ceb9b47aaa63244bff9032fa7b08354"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 14,
      "deletions": 4
    },
    "files": [
      {
        "sha": "f99aed519aa1f136b6dc6f5aa243eb065cc7a14d",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 4,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee5c1ce5a6155d502d8e779d3490d6cf66374c3f/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee5c1ce5a6155d502d8e779d3490d6cf66374c3f/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=ee5c1ce5a6155d502d8e779d3490d6cf66374c3f",
        "patch": "@@ -1679,7 +1679,7 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    CBlockIndex *pindex = NULL;\n+    const CBlockIndex *pindex = NULL;\n     int target_confirms = 1;\n     isminefilter filter = ISMINE_SPENDABLE;\n \n@@ -1690,7 +1690,16 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n         blockId.SetHex(request.params[0].get_str());\n         BlockMap::iterator it = mapBlockIndex.find(blockId);\n         if (it != mapBlockIndex.end())\n+        {\n             pindex = it->second;\n+            if (chainActive[pindex->nHeight] != pindex)\n+            {\n+                // the block being asked for is a part of a deactivated chain;\n+                // we don't want to depend on its perceived height in the block\n+                // chain, we want to instead use the last common ancestor\n+                pindex = chainActive.FindFork(pindex);\n+            }\n+        }\n     }\n \n     if (request.params.size() > 1)\n@@ -1701,9 +1710,10 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter\");\n     }\n \n-    if(request.params.size() > 2)\n-        if(request.params[2].get_bool())\n-            filter = filter | ISMINE_WATCH_ONLY;\n+    if (request.params.size() > 2 && request.params[2].get_bool())\n+    {\n+        filter = filter | ISMINE_WATCH_ONLY;\n+    }\n \n     int depth = pindex ? (1 + chainActive.Height() - pindex->nHeight) : -1;\n "
      }
    ]
  },
  {
    "sha": "7ba0a00aae03b438e63d0ada9ff68a7618c7f907",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YmEwYTAwYWFlMDNiNDM4ZTYzZDBhZGE5ZmY2OGE3NjE4YzdmOTA3",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-01-11T11:02:25Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-01-18T03:31:20Z"
      },
      "message": "Testing: listsinceblock should not use orphan block height.",
      "tree": {
        "sha": "6503865cbbdd693375b3a4e5f2026451a83a4c64",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6503865cbbdd693375b3a4e5f2026451a83a4c64"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7ba0a00aae03b438e63d0ada9ff68a7618c7f907",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ba0a00aae03b438e63d0ada9ff68a7618c7f907",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7ba0a00aae03b438e63d0ada9ff68a7618c7f907",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ba0a00aae03b438e63d0ada9ff68a7618c7f907/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ee5c1ce5a6155d502d8e779d3490d6cf66374c3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee5c1ce5a6155d502d8e779d3490d6cf66374c3f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ee5c1ce5a6155d502d8e779d3490d6cf66374c3f"
      }
    ],
    "stats": {
      "total": 81,
      "additions": 81,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f3aa34a44d8917aa6f936ac835abbfbd0b1a96c9",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ba0a00aae03b438e63d0ada9ff68a7618c7f907/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ba0a00aae03b438e63d0ada9ff68a7618c7f907/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=7ba0a00aae03b438e63d0ada9ff68a7618c7f907",
        "patch": "@@ -152,6 +152,7 @@\n     'nulldummy.py',\n     'import-rescan.py',\n     'rpcnamedargs.py',\n+    'listsinceblock.py',\n ]\n if ENABLE_ZMQ:\n     testScripts.append('zmq_test.py')"
      },
      {
        "sha": "ca67b8ecebbaa1f9fd7cc6acc6e8e7835771c3ef",
        "filename": "qa/rpc-tests/listsinceblock.py",
        "status": "added",
        "additions": 80,
        "deletions": 0,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ba0a00aae03b438e63d0ada9ff68a7618c7f907/qa/rpc-tests/listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ba0a00aae03b438e63d0ada9ff68a7618c7f907/qa/rpc-tests/listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/listsinceblock.py?ref=7ba0a00aae03b438e63d0ada9ff68a7618c7f907",
        "patch": "@@ -0,0 +1,80 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+class ListSinceBlockTest (BitcoinTestFramework):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+\n+    def run_test (self):\n+        '''\n+        `listsinceblock` did not behave correctly when handed a block that was\n+        no longer in the main chain:\n+\n+             ab0\n+          /       \\\n+        aa1 [tx0]   bb1\n+         |           |\n+        aa2         bb2\n+         |           |\n+        aa3         bb3\n+                     |\n+                    bb4\n+\n+        Consider a client that has only seen block `aa3` above. It asks the node\n+        to `listsinceblock aa3`. But at some point prior the main chain switched\n+        to the bb chain.\n+\n+        Previously: listsinceblock would find height=4 for block aa3 and compare\n+        this to height=5 for the tip of the chain (bb4). It would then return\n+        results restricted to bb3-bb4.\n+\n+        Now: listsinceblock finds the fork at ab0 and returns results in the\n+        range bb1-bb4.\n+\n+        This test only checks that [tx0] is present.\n+        '''\n+\n+        assert_equal(self.is_network_split, False)\n+        self.nodes[2].generate(101)\n+        self.sync_all()\n+\n+        assert_equal(self.nodes[0].getbalance(), 0)\n+        assert_equal(self.nodes[1].getbalance(), 0)\n+        assert_equal(self.nodes[2].getbalance(), 50)\n+        assert_equal(self.nodes[3].getbalance(), 0)\n+\n+        # Split network into two\n+        self.split_network()\n+        assert_equal(self.is_network_split, True)\n+\n+        # send to nodes[0] from nodes[2]\n+        senttx = self.nodes[2].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n+\n+        # generate on both sides\n+        lastblockhash = self.nodes[1].generate(6)[5]\n+        self.nodes[2].generate(7)\n+        print('lastblockhash=%s' % (lastblockhash))\n+\n+        self.sync_all()\n+\n+        self.join_network()\n+\n+        # listsinceblock(lastblockhash) should now include tx, as seen from nodes[0]\n+        lsbres = self.nodes[0].listsinceblock(lastblockhash)\n+        found = False\n+        for tx in lsbres['transactions']:\n+            if tx['txid'] == senttx:\n+                found = True\n+                break\n+        assert_equal(found, True)\n+\n+if __name__ == '__main__':\n+    ListSinceBlockTest().main()"
      }
    ]
  },
  {
    "sha": "b0b57a17306a7e963a4fe463f84e2b150a00a859",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMGI1N2ExNzMwNmE3ZTk2M2E0ZmU0NjNmODRlMmIxNTBhMDBhODU5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-01-18T09:48:43Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-01-18T09:48:52Z"
      },
      "message": "Merge #9508: Remove unused Python imports\n\n95bab82 Remove unused Python imports (practicalswift)",
      "tree": {
        "sha": "809d4c3942e8042045767ef40e37ccc0e7701bc8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/809d4c3942e8042045767ef40e37ccc0e7701bc8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b0b57a17306a7e963a4fe463f84e2b150a00a859",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCgAGBQJYfzoEAAoJEC1/I3LlD+E3sYcH/0B3b39XsZn0+KsRRFzezlKP\noheYJ6ViwkcW0w54/5LYUy2PBDi8Z2r9nxpI68C5TKkiTTJ8V5lTkUbMxGBHw9ah\nCpbCDUA8AZm7YNT12V+yhHLLtziM+nLDM82qJIte+OLfFyLlNIglf/HljwEBRzkt\nODe3PsCZoicaGK+xnHr+cTwZxH9DoQj3TFOSV60S03UumPP8bMO+0naJzVprhAjy\n4IFSpC8IuoUOJHjR1SB3LUgZ8Xjp6ZrmgIPGj6HAY5ZwuW2DK3SYjD10S4xyChod\nZcEJqGJDhLB6QaAhqw0n6X9nVmCsrDhOmzB+L8JmAKfwDAGm7PsgP1UcNladAPM=\n=wZXe\n-----END PGP SIGNATURE-----",
        "payload": "tree 809d4c3942e8042045767ef40e37ccc0e7701bc8\nparent 6696b4635ceb9b47aaa63244bff9032fa7b08354\nparent 95bab821b3af268d23e9cf5f9da3dd7f1e396949\nauthor MarcoFalke <falke.marco@gmail.com> 1484732923 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1484732932 +0100\n\nMerge #9508: Remove unused Python imports\n\n95bab82 Remove unused Python imports (practicalswift)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0b57a17306a7e963a4fe463f84e2b150a00a859",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b0b57a17306a7e963a4fe463f84e2b150a00a859",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0b57a17306a7e963a4fe463f84e2b150a00a859/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6696b4635ceb9b47aaa63244bff9032fa7b08354",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6696b4635ceb9b47aaa63244bff9032fa7b08354",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6696b4635ceb9b47aaa63244bff9032fa7b08354"
      },
      {
        "sha": "95bab821b3af268d23e9cf5f9da3dd7f1e396949",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95bab821b3af268d23e9cf5f9da3dd7f1e396949",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/95bab821b3af268d23e9cf5f9da3dd7f1e396949"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 1,
      "deletions": 17
    },
    "files": [
      {
        "sha": "0cee0921b122cb15bd9d4af7970ee6131d82dfb7",
        "filename": "contrib/devtools/github-merge.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0b57a17306a7e963a4fe463f84e2b150a00a859/contrib/devtools/github-merge.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0b57a17306a7e963a4fe463f84e2b150a00a859/contrib/devtools/github-merge.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/github-merge.py?ref=b0b57a17306a7e963a4fe463f84e2b150a00a859",
        "patch": "@@ -15,7 +15,7 @@\n # In case of a clean merge that is accepted by the user, the local branch with\n # name $BRANCH is overwritten with the merged result, and optionally pushed.\n from __future__ import division,print_function,unicode_literals\n-import os,sys\n+import os\n from sys import stdin,stdout,stderr\n import argparse\n import subprocess"
      },
      {
        "sha": "18f9835faa25aeb1c5950c5ae72f92f68c9a7ed8",
        "filename": "contrib/devtools/test-security-check.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0b57a17306a7e963a4fe463f84e2b150a00a859/contrib/devtools/test-security-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0b57a17306a7e963a4fe463f84e2b150a00a859/contrib/devtools/test-security-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/test-security-check.py?ref=b0b57a17306a7e963a4fe463f84e2b150a00a859",
        "patch": "@@ -7,7 +7,6 @@\n '''\n from __future__ import division,print_function\n import subprocess\n-import sys\n import unittest\n \n def write_testcode(filename):"
      },
      {
        "sha": "3fdec134b86cca4ccb9f6d41313cf7c410974586",
        "filename": "contrib/linearize/linearize-data.py",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0b57a17306a7e963a4fe463f84e2b150a00a859/contrib/linearize/linearize-data.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0b57a17306a7e963a4fe463f84e2b150a00a859/contrib/linearize/linearize-data.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/linearize-data.py?ref=b0b57a17306a7e963a4fe463f84e2b150a00a859",
        "patch": "@@ -8,16 +8,10 @@\n #\n \n from __future__ import print_function, division\n-try: # Python 3\n-    import http.client as httplib\n-except ImportError: # Python 2\n-    import httplib\n-import json\n import struct\n import re\n import os\n import os.path\n-import base64\n import sys\n import hashlib\n import datetime"
      },
      {
        "sha": "00a54d0820b765c7afa59825cf84a8fffd7f0d1c",
        "filename": "contrib/linearize/linearize-hashes.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0b57a17306a7e963a4fe463f84e2b150a00a859/contrib/linearize/linearize-hashes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0b57a17306a7e963a4fe463f84e2b150a00a859/contrib/linearize/linearize-hashes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/linearize-hashes.py?ref=b0b57a17306a7e963a4fe463f84e2b150a00a859",
        "patch": "@@ -13,7 +13,6 @@\n except ImportError: # Python 2\n     import httplib\n import json\n-import struct\n import re\n import base64\n import sys"
      },
      {
        "sha": "6f57aa47e96488412539dd67e00f9892651b8c3c",
        "filename": "contrib/zmq/zmq_sub.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0b57a17306a7e963a4fe463f84e2b150a00a859/contrib/zmq/zmq_sub.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0b57a17306a7e963a4fe463f84e2b150a00a859/contrib/zmq/zmq_sub.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/zmq/zmq_sub.py?ref=b0b57a17306a7e963a4fe463f84e2b150a00a859",
        "patch": "@@ -3,7 +3,6 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-import array\n import binascii\n import zmq\n import struct"
      },
      {
        "sha": "7313c79b54fa1e55309bca0d5fbabe7a38093270",
        "filename": "qa/rpc-tests/nodehandling.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0b57a17306a7e963a4fe463f84e2b150a00a859/qa/rpc-tests/nodehandling.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0b57a17306a7e963a4fe463f84e2b150a00a859/qa/rpc-tests/nodehandling.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/nodehandling.py?ref=b0b57a17306a7e963a4fe463f84e2b150a00a859",
        "patch": "@@ -10,7 +10,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n-import http.client\n import urllib.parse\n \n class NodeHandlingTest (BitcoinTestFramework):"
      },
      {
        "sha": "1fd125fdcdd87a232f804a76daf8620e86c81767",
        "filename": "qa/rpc-tests/p2p-mempool.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0b57a17306a7e963a4fe463f84e2b150a00a859/qa/rpc-tests/p2p-mempool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0b57a17306a7e963a4fe463f84e2b150a00a859/qa/rpc-tests/p2p-mempool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-mempool.py?ref=b0b57a17306a7e963a4fe463f84e2b150a00a859",
        "patch": "@@ -6,7 +6,6 @@\n from test_framework.mininode import *\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-import time\n \n class TestNode(NodeConnCB):\n     def __init__(self):"
      },
      {
        "sha": "e9afb2b09afffc02a90a73baa6b01cf40bf06c6a",
        "filename": "qa/rpc-tests/zmq_test.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0b57a17306a7e963a4fe463f84e2b150a00a859/qa/rpc-tests/zmq_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0b57a17306a7e963a4fe463f84e2b150a00a859/qa/rpc-tests/zmq_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/zmq_test.py?ref=b0b57a17306a7e963a4fe463f84e2b150a00a859",
        "patch": "@@ -12,9 +12,6 @@\n import zmq\n import struct\n \n-import http.client\n-import urllib.parse\n-\n class ZMQTest (BitcoinTestFramework):\n \n     def __init__(self):"
      },
      {
        "sha": "5492fdb8c552418040aed93f2a763e4ec0f8e7a2",
        "filename": "share/qt/extract_strings_qt.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0b57a17306a7e963a4fe463f84e2b150a00a859/share/qt/extract_strings_qt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0b57a17306a7e963a4fe463f84e2b150a00a859/share/qt/extract_strings_qt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/qt/extract_strings_qt.py?ref=b0b57a17306a7e963a4fe463f84e2b150a00a859",
        "patch": "@@ -8,7 +8,6 @@\n '''\n from __future__ import division,print_function,unicode_literals\n from subprocess import Popen, PIPE\n-import glob\n import operator\n import os\n import sys"
      },
      {
        "sha": "e2087187aaba6a28f545435ead3935926da5007f",
        "filename": "src/test/bitcoin-util-test.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0b57a17306a7e963a4fe463f84e2b150a00a859/src/test/bitcoin-util-test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0b57a17306a7e963a4fe463f84e2b150a00a859/src/test/bitcoin-util-test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bitcoin-util-test.py?ref=b0b57a17306a7e963a4fe463f84e2b150a00a859",
        "patch": "@@ -5,7 +5,6 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n from __future__ import division,print_function,unicode_literals\n import os\n-import sys\n import bctest\n import buildenv\n import argparse"
      }
    ]
  },
  {
    "sha": "c70622e942a5da9a7afce32ba71447745ceefa45",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNzA2MjJlOTQyYTVkYTlhN2FmY2UzMmJhNzE0NDc3NDVjZWVmYTQ1",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-01-13T14:47:21Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-01-18T19:04:57Z"
      },
      "message": "Docs: Update CONTRIBUTING.md\n\nUpdate CONTRIBUTING.md to document the different components.\n\nNotably, trivial should only be used for PRs that do not change the\ncode.",
      "tree": {
        "sha": "47730996a97b3e7536e3385212e4ddeabe36a65b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/47730996a97b3e7536e3385212e4ddeabe36a65b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c70622e942a5da9a7afce32ba71447745ceefa45",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c70622e942a5da9a7afce32ba71447745ceefa45",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c70622e942a5da9a7afce32ba71447745ceefa45",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c70622e942a5da9a7afce32ba71447745ceefa45/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ed64bcec2dde1f4255f3bd5b0c2f01e4dfe260d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed64bcec2dde1f4255f3bd5b0c2f01e4dfe260d3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ed64bcec2dde1f4255f3bd5b0c2f01e4dfe260d3"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 22,
      "deletions": 1
    },
    "files": [
      {
        "sha": "47648cde22e40c7a0209f120c8a04e0c205bfb31",
        "filename": "CONTRIBUTING.md",
        "status": "modified",
        "additions": 22,
        "deletions": 1,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c70622e942a5da9a7afce32ba71447745ceefa45/CONTRIBUTING.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c70622e942a5da9a7afce32ba71447745ceefa45/CONTRIBUTING.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/CONTRIBUTING.md?ref=c70622e942a5da9a7afce32ba71447745ceefa45",
        "patch": "@@ -53,7 +53,28 @@ about Git.\n   - Create pull request\n \n The title of the pull request should be prefixed by the component or area that\n-the pull request affects. Examples:\n+the pull request affects. Valid areas as:\n+\n+  - *Consensus* for changes to consensus critical code\n+  - *Docs* for changes to the documentation\n+  - *Qt* for changes to bitcoin-qt\n+  - *Mining* for changes to the mining code\n+  - *Net* or *P2P* for changes to the peer-to-peer network code\n+  - *RPC/REST/ZMQ* for changes to the RPC, REST or ZMQ APIs\n+  - *Scripts and tools* for changes to the scripts and tools\n+  - *Tests* for changes to the bitcoin unit tests or QA tests\n+  - *Trivial* should **only** be used for PRs that do not change generated\n+    executable code. Notably, refactors (change of function arguments and code\n+    reorganization) and changes in behavior should **not** be marked as trivial.\n+    Examples of trivial PRs are changes to:\n+    - comments\n+    - whitespace\n+    - variable names\n+    - logging and messages\n+  - *Utils and libraries* for changes to the utils and libraries\n+  - *Wallet* for changes to the wallet code\n+\n+Examples:\n \n     Consensus: Add new opcode for BIP-XXXX OP_CHECKAWESOMESIG\n     Net: Automatically create hidden service, listen on Tor"
      }
    ]
  },
  {
    "sha": "6012967c4746095e6f66a142cb9f639544c17377",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MDEyOTY3YzQ3NDYwOTVlNmY2NmExNDJjYjlmNjM5NTQ0YzE3Mzc3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-18T18:24:02Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-18T19:05:30Z"
      },
      "message": "Merge #9512: Fix various things -fsanitize complains about\n\n82e8baa Avoid boost dynamic_bitset in rest_getutxos (Pieter Wuille)\n99f001e Fix memory leak in multiUserAuthorized (Pieter Wuille)\n5a0b7e4 Fix memory leak in net_tests (Pieter Wuille)\n6b03bfb Fix memory leak in wallet tests (Pieter Wuille)\nf94f3e0 Avoid integer overflows in scriptnum tests (Pieter Wuille)\n843c560 Avoid unaligned access in crypto i/o (Pieter Wuille)",
      "tree": {
        "sha": "3388f969b65a5f9c3388bde027b6c6c08b1af6c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3388f969b65a5f9c3388bde027b6c6c08b1af6c8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6012967c4746095e6f66a142cb9f639544c17377",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYf7x6AAoJEHSBCwEjRsmm1ToH/2+cTDwYGS6hWp1Ly8+MOlof\n6FHUgyjMOailmzAUCNz3iC0Cp51ZCed8V52VoAewiTNmbdIsn1bmbd6OpdSPhpb+\nFKGIu/uqB3x7EXWy8hzn8BlW1DudJzulkzgIx8BakYgWswyj2mq2Rmt8PQimD2rv\n6t9ePufWmFnfDB4dUVkdKO8OhCjfScGXWxCzBCbUCtuLTcZLfqNJUPfYrTRgE9o5\nDtM29hs8OKeYCARNREuuQHQK75kq0fFu78kEQIW1o4GCmh+qQQU9/RdvIN6JeaM7\nhUwNlTjir550vVuU1f3OId9Gjstmpc7aD5B0udhig827+EQlE1lc9MadgWRll6g=\n=DBHC\n-----END PGP SIGNATURE-----",
        "payload": "tree 3388f969b65a5f9c3388bde027b6c6c08b1af6c8\nparent b0b57a17306a7e963a4fe463f84e2b150a00a859\nparent 82e8baab3caaadb1d923d1332c577fb91b9c5747\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1484763842 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1484766330 +0100\n\nMerge #9512: Fix various things -fsanitize complains about\n\n82e8baa Avoid boost dynamic_bitset in rest_getutxos (Pieter Wuille)\n99f001e Fix memory leak in multiUserAuthorized (Pieter Wuille)\n5a0b7e4 Fix memory leak in net_tests (Pieter Wuille)\n6b03bfb Fix memory leak in wallet tests (Pieter Wuille)\nf94f3e0 Avoid integer overflows in scriptnum tests (Pieter Wuille)\n843c560 Avoid unaligned access in crypto i/o (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6012967c4746095e6f66a142cb9f639544c17377",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6012967c4746095e6f66a142cb9f639544c17377",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6012967c4746095e6f66a142cb9f639544c17377/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b0b57a17306a7e963a4fe463f84e2b150a00a859",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0b57a17306a7e963a4fe463f84e2b150a00a859",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b0b57a17306a7e963a4fe463f84e2b150a00a859"
      },
      {
        "sha": "82e8baab3caaadb1d923d1332c577fb91b9c5747",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82e8baab3caaadb1d923d1332c577fb91b9c5747",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/82e8baab3caaadb1d923d1332c577fb91b9c5747"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 49,
      "deletions": 25
    },
    "files": [
      {
        "sha": "4a9d1150b6777c04a0c5b5300dd8b89240968f6d",
        "filename": "src/crypto/common.h",
        "status": "modified",
        "additions": 26,
        "deletions": 10,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6012967c4746095e6f66a142cb9f639544c17377/src/crypto/common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6012967c4746095e6f66a142cb9f639544c17377/src/crypto/common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/common.h?ref=6012967c4746095e6f66a142cb9f639544c17377",
        "patch": "@@ -10,57 +10,73 @@\n #endif\n \n #include <stdint.h>\n+#include <string.h>\n \n #include \"compat/endian.h\"\n \n uint16_t static inline ReadLE16(const unsigned char* ptr)\n {\n-    return le16toh(*((uint16_t*)ptr));\n+    uint16_t x;\n+    memcpy((char*)&x, ptr, 2);\n+    return le16toh(x);\n }\n \n uint32_t static inline ReadLE32(const unsigned char* ptr)\n {\n-    return le32toh(*((uint32_t*)ptr));\n+    uint32_t x;\n+    memcpy((char*)&x, ptr, 4);\n+    return le32toh(x);\n }\n \n uint64_t static inline ReadLE64(const unsigned char* ptr)\n {\n-    return le64toh(*((uint64_t*)ptr));\n+    uint64_t x;\n+    memcpy((char*)&x, ptr, 8);\n+    return le64toh(x);\n }\n \n void static inline WriteLE16(unsigned char* ptr, uint16_t x)\n {\n-    *((uint16_t*)ptr) = htole16(x);\n+    uint16_t v = htole16(x);\n+    memcpy(ptr, (char*)&v, 2);\n }\n \n void static inline WriteLE32(unsigned char* ptr, uint32_t x)\n {\n-    *((uint32_t*)ptr) = htole32(x);\n+    uint32_t v = htole32(x);\n+    memcpy(ptr, (char*)&v, 4);\n }\n \n void static inline WriteLE64(unsigned char* ptr, uint64_t x)\n {\n-    *((uint64_t*)ptr) = htole64(x);\n+    uint64_t v = htole64(x);\n+    memcpy(ptr, (char*)&v, 8);\n }\n \n uint32_t static inline ReadBE32(const unsigned char* ptr)\n {\n-    return be32toh(*((uint32_t*)ptr));\n+    uint32_t x;\n+    memcpy((char*)&x, ptr, 4);\n+    return be32toh(x);\n }\n \n uint64_t static inline ReadBE64(const unsigned char* ptr)\n {\n-    return be64toh(*((uint64_t*)ptr));\n+    uint64_t x;\n+    memcpy((char*)&x, ptr, 8);\n+    return be64toh(x);\n }\n \n void static inline WriteBE32(unsigned char* ptr, uint32_t x)\n {\n-    *((uint32_t*)ptr) = htobe32(x);\n+    uint32_t v = htobe32(x);\n+    memcpy(ptr, (char*)&v, 4);\n }\n \n void static inline WriteBE64(unsigned char* ptr, uint64_t x)\n {\n-    *((uint64_t*)ptr) = htobe64(x);\n+    uint64_t v = htobe64(x);\n+    memcpy(ptr, (char*)&v, 8);\n }\n \n #endif // BITCOIN_CRYPTO_COMMON_H"
      },
      {
        "sha": "93beda09a48957c70cd8c42b04d38443b1addb56",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6012967c4746095e6f66a142cb9f639544c17377/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6012967c4746095e6f66a142cb9f639544c17377/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=6012967c4746095e6f66a142cb9f639544c17377",
        "patch": "@@ -113,8 +113,8 @@ static bool multiUserAuthorized(std::string strUserPass)\n             std::string strHash = vFields[2];\n \n             unsigned int KEY_SIZE = 32;\n-            unsigned char *out = new unsigned char[KEY_SIZE]; \n-            \n+            unsigned char out[KEY_SIZE];\n+\n             CHMAC_SHA256(reinterpret_cast<const unsigned char*>(strSalt.c_str()), strSalt.size()).Write(reinterpret_cast<const unsigned char*>(strPass.c_str()), strPass.size()).Finalize(out);\n             std::vector<unsigned char> hexvec(out, out+KEY_SIZE);\n             std::string strHashFromPass = HexStr(hexvec);"
      },
      {
        "sha": "a8f8e753c68e1d185e1f9b8ffeaa05a4c85ec606",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6012967c4746095e6f66a142cb9f639544c17377/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6012967c4746095e6f66a142cb9f639544c17377/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=6012967c4746095e6f66a142cb9f639544c17377",
        "patch": "@@ -17,7 +17,6 @@\n #include \"version.h\"\n \n #include <boost/algorithm/string.hpp>\n-#include <boost/dynamic_bitset.hpp>\n \n #include <univalue.h>\n \n@@ -502,7 +501,8 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n     vector<unsigned char> bitmap;\n     vector<CCoin> outs;\n     std::string bitmapStringRepresentation;\n-    boost::dynamic_bitset<unsigned char> hits(vOutPoints.size());\n+    std::vector<bool> hits;\n+    bitmap.resize((vOutPoints.size() + 7) / 8);\n     {\n         LOCK2(cs_main, mempool.cs);\n \n@@ -518,10 +518,11 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n         for (size_t i = 0; i < vOutPoints.size(); i++) {\n             CCoins coins;\n             uint256 hash = vOutPoints[i].hash;\n+            bool hit = false;\n             if (view.GetCoins(hash, coins)) {\n                 mempool.pruneSpent(hash, coins);\n                 if (coins.IsAvailable(vOutPoints[i].n)) {\n-                    hits[i] = true;\n+                    hit = true;\n                     // Safe to index into vout here because IsAvailable checked if it's off the end of the array, or if\n                     // n is valid but points to an already spent output (IsNull).\n                     CCoin coin;\n@@ -533,10 +534,11 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n                 }\n             }\n \n-            bitmapStringRepresentation.append(hits[i] ? \"1\" : \"0\"); // form a binary string representation (human-readable for json output)\n+            hits.push_back(hit);\n+            bitmapStringRepresentation.append(hit ? \"1\" : \"0\"); // form a binary string representation (human-readable for json output)\n+            bitmap[i / 8] |= ((uint8_t)hit) << (i % 8);\n         }\n     }\n-    boost::to_block_range(hits, std::back_inserter(bitmap));\n \n     switch (rf) {\n     case RF_BINARY: {"
      },
      {
        "sha": "b9ed4952bba68ca5c71858e7607c443392cdafd0",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6012967c4746095e6f66a142cb9f639544c17377/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6012967c4746095e6f66a142cb9f639544c17377/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=6012967c4746095e6f66a142cb9f639544c17377",
        "patch": "@@ -162,12 +162,12 @@ BOOST_AUTO_TEST_CASE(cnode_simple_test)\n     bool fInboundIn = false;\n \n     // Test that fFeeler is false by default.\n-    CNode* pnode1 = new CNode(id++, NODE_NETWORK, height, hSocket, addr, 0, 0, pszDest, fInboundIn);\n+    std::unique_ptr<CNode> pnode1(new CNode(id++, NODE_NETWORK, height, hSocket, addr, 0, 0, pszDest, fInboundIn));\n     BOOST_CHECK(pnode1->fInbound == false);\n     BOOST_CHECK(pnode1->fFeeler == false);\n \n     fInboundIn = true;\n-    CNode* pnode2 = new CNode(id++, NODE_NETWORK, height, hSocket, addr, 1, 1, pszDest, fInboundIn);\n+    std::unique_ptr<CNode> pnode2(new CNode(id++, NODE_NETWORK, height, hSocket, addr, 1, 1, pszDest, fInboundIn));\n     BOOST_CHECK(pnode2->fInbound == true);\n     BOOST_CHECK(pnode2->fFeeler == false);\n }"
      },
      {
        "sha": "1d5893bdc32166c61ba1d46b6f358be3d7b3c109",
        "filename": "src/test/scriptnum_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6012967c4746095e6f66a142cb9f639544c17377/src/test/scriptnum_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6012967c4746095e6f66a142cb9f639544c17377/src/test/scriptnum_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scriptnum_tests.cpp?ref=6012967c4746095e6f66a142cb9f639544c17377",
        "patch": "@@ -12,8 +12,10 @@\n \n BOOST_FIXTURE_TEST_SUITE(scriptnum_tests, BasicTestingSetup)\n \n-static const int64_t values[] = \\\n-{ 0, 1, CHAR_MIN, CHAR_MAX, UCHAR_MAX, SHRT_MIN, USHRT_MAX, INT_MIN, INT_MAX, UINT_MAX, LONG_MIN, LONG_MAX };\n+/** A selection of numbers that do not trigger int64_t overflow\n+ *  when added/subtracted. */\n+static const int64_t values[] = { 0, 1, -2, 127, 128, -255, 256, (1LL << 15) - 1, -(1LL << 16), (1LL << 24) - 1, (1LL << 31), 1 - (1LL << 32), 1LL << 40 };\n+\n static const int64_t offsets[] = { 1, 0x79, 0x80, 0x81, 0xFF, 0x7FFF, 0x8000, 0xFFFF, 0x10000};\n \n static bool verify(const CScriptNum10& bignum, const CScriptNum& scriptnum)"
      },
      {
        "sha": "ca086c86a80b03a6cc457407e2dfead6b83c4c3c",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6012967c4746095e6f66a142cb9f639544c17377/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6012967c4746095e6f66a142cb9f639544c17377/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=6012967c4746095e6f66a142cb9f639544c17377",
        "patch": "@@ -23,6 +23,8 @@\n \n using namespace std;\n \n+std::vector<std::unique_ptr<CWalletTx>> wtxn;\n+\n typedef set<pair<const CWalletTx*,unsigned int> > CoinSet;\n \n BOOST_FIXTURE_TEST_SUITE(wallet_tests, WalletTestingSetup)\n@@ -42,21 +44,21 @@ static void add_coin(const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = fa\n         // so stop vin being empty, and cache a non-zero Debit to fake out IsFromMe()\n         tx.vin.resize(1);\n     }\n-    CWalletTx* wtx = new CWalletTx(&wallet, MakeTransactionRef(std::move(tx)));\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&wallet, MakeTransactionRef(std::move(tx))));\n     if (fIsFromMe)\n     {\n         wtx->fDebitCached = true;\n         wtx->nDebitCached = 1;\n     }\n-    COutput output(wtx, nInput, nAge, true, true);\n+    COutput output(wtx.get(), nInput, nAge, true, true);\n     vCoins.push_back(output);\n+    wtxn.emplace_back(std::move(wtx));\n }\n \n static void empty_wallet(void)\n {\n-    BOOST_FOREACH(COutput output, vCoins)\n-        delete output.tx;\n     vCoins.clear();\n+    wtxn.clear();\n }\n \n static bool equal_sets(CoinSet a, CoinSet b)\n@@ -349,6 +351,8 @@ BOOST_AUTO_TEST_CASE(ApproximateBestSubset)\n     BOOST_CHECK(wallet.SelectCoinsMinConf(1003 * COIN, 1, 6, 0, vCoins, setCoinsRet, nValueRet));\n     BOOST_CHECK_EQUAL(nValueRet, 1003 * COIN);\n     BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U);\n+\n+    empty_wallet();\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "c36ec715f06d212381e0edfa4344514f1a575701",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMzZlYzcxNWYwNmQyMTIzODFlMGVkZmE0MzQ0NTE0ZjFhNTc1NzAx",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-01-18T03:37:40Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2017-01-19T07:31:55Z"
      },
      "message": "depends: qt: disable printer for all platforms, not just osx\n\nThis also fixes the native osx build.",
      "tree": {
        "sha": "14517fb7295e19a5c8274daa27f4ad7b811f9a14",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/14517fb7295e19a5c8274daa27f4ad7b811f9a14"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c36ec715f06d212381e0edfa4344514f1a575701",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJYgGtrAAoJEC7rn1zAlSbBpCoP/3qzbdstkm3BmGYV8e9jXoRb\nPx7h+v3QNf3NGsg4wbtuXM2lFziebS5/75WyGoORVCQ088meBSnq92W5s2JRZ3Or\nuEAouJ4NI/y8Go7IuGiwIQK1wS/CuhplPFrc4J/hKNckXoywQgDF6BT//4IJIs7b\nrM5w3Q/UvKrtA9MjVI0Ad45e+yz6Bd9510fz3YathYSIwsqpau4CFPYryBIuxzVR\noql2rmke4G22YunRmTOnRrzcAdQat5G9fO3XVkHaVHiNtBQNjNTGPnMvlGYawfNc\nrCSn8j19Ogzm/v469qBtCLVDB4yFhuTPBaC1jjjoZw2i27FKc0ieb9PbbbVGNxur\nhudv7RWshvh3BfqNB51I8g04t2fPzvqCAc/HBjEra7fRZgfkovnOU+ny/t4VS9ic\noR04EuBJekR7hfr0YchpcepjQ+h6Rkw1evEfIe0A/dNU6eUX+ZPCpT/U8lzVGte5\nFgNrHSZGBJ9keA+Z0KvZlI4NQsaBNLv2LpQqDBAEfe7Yyuf2IhS3Yrj03nWOXpnq\nibh45+31Ux05LNC+VgxQPTB3AkMB/zugQftcb27VTnZyS4HF4dSCBUp2M1MinoUx\n49c8d8LEXFLWcdbCDYtr2P9nTLwDdrhLIHf8IwybgYVteey1J4G64p1UIjz/3Gmz\nWImNvxbqeZ+W2Xj7yymD\n=EvVG\n-----END PGP SIGNATURE-----",
        "payload": "tree 14517fb7295e19a5c8274daa27f4ad7b811f9a14\nparent 6012967c4746095e6f66a142cb9f639544c17377\nauthor Cory Fields <cory-nospam-@coryfields.com> 1484710660 -0500\ncommitter fanquake <fanquake@gmail.com> 1484811115 +0800\n\ndepends: qt: disable printer for all platforms, not just osx\n\nThis also fixes the native osx build.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c36ec715f06d212381e0edfa4344514f1a575701",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c36ec715f06d212381e0edfa4344514f1a575701",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c36ec715f06d212381e0edfa4344514f1a575701/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6012967c4746095e6f66a142cb9f639544c17377",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6012967c4746095e6f66a142cb9f639544c17377",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6012967c4746095e6f66a142cb9f639544c17377"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6e38d1ac6a517859f516e02a2c5e167b59eaffcc",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c36ec715f06d212381e0edfa4344514f1a575701/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c36ec715f06d212381e0edfa4344514f1a575701/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=c36ec715f06d212381e0edfa4344514f1a575701",
        "patch": "@@ -78,6 +78,8 @@ $(package)_config_opts += -reduce-exports\n $(package)_config_opts += -static\n $(package)_config_opts += -silent\n $(package)_config_opts += -v\n+$(package)_config_opts += -no-feature-printer\n+$(package)_config_opts += -no-feature-printdialog\n \n ifneq ($(build_os),darwin)\n $(package)_config_opts_darwin = -xplatform macx-clang-linux"
      },
      {
        "sha": "f565fe3e75d1351fa5d3585ad4511f3215b01e53",
        "filename": "depends/patches/qt/mac-qmake.conf",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c36ec715f06d212381e0edfa4344514f1a575701/depends/patches/qt/mac-qmake.conf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c36ec715f06d212381e0edfa4344514f1a575701/depends/patches/qt/mac-qmake.conf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/mac-qmake.conf?ref=c36ec715f06d212381e0edfa4344514f1a575701",
        "patch": "@@ -1,6 +1,5 @@\n MAKEFILE_GENERATOR = UNIX\n CONFIG += app_bundle incremental global_init_link_order lib_version_first plugin_no_soname absolute_library_soname\n-DEFINES += QT_NO_PRINTER QT_NO_PRINTDIALOG\n QMAKE_INCREMENTAL_STYLE = sublib\n include(../common/macx.conf)\n include(../common/gcc-base-mac.conf)"
      }
    ]
  },
  {
    "sha": "9c9af5ab2d9e461bb6f2dee1390025ce82a3625b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YzlhZjVhYjJkOWU0NjFiYjZmMmRlZTEzOTAwMjVjZTgyYTM2MjVi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-19T08:02:26Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-19T08:03:46Z"
      },
      "message": "Merge #9499: Use recent-rejects, orphans, and recently-replaced txn for compact-block-reconstruction\n\nc594580 Add braces around AddToCompactExtraTransactions (Matt Corallo)\n1ccfe9b Clarify comment about mempool/extra conflicts (Matt Corallo)\nfac4c78 Make PartiallyDownloadedBlock::InitData's second param const (Matt Corallo)\nb55b416 Add extra_count lower bound to compact reconstruction debug print (Matt Corallo)\n863edb4 Consider all (<100k memusage) txn for compact-block-extra-txn cache (Matt Corallo)\n7f8c8ca Consider all orphan txn for compact-block-extra-txn cache (Matt Corallo)\n93380c5 Use replaced transactions in compact block reconstruction (Matt Corallo)\n1531652 Keep shared_ptrs to recently-replaced txn for compact blocks (Matt Corallo)\nedded80 Make ATMP optionally return the CTransactionRefs it replaced (Matt Corallo)\nc735540 Move ORPHAN constants from validation.h to net_processing.h (Matt Corallo)",
      "tree": {
        "sha": "a734a1ec64e61595aa7bad3fc114ecb18b896dc8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a734a1ec64e61595aa7bad3fc114ecb18b896dc8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c9af5ab2d9e461bb6f2dee1390025ce82a3625b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYgHLiAAoJEHSBCwEjRsmmeBMH/jZ8FasoTXIGUotgnnuoUgqh\nKDD4jVP+iSt2uUpLDLVcEz7ers3ajGSBaFBPuzpsmKkX88UG/oXSpaY/VeJTLsGk\naZFj2eXzAsjTC2uITp1Qj9KCq6ojMSjITdMv/FeGTtEdktoXx00JSPdpPtp8Hx07\nv4ZX4sYE8d39r/k89ZiLqmZCLEqCEXhc/xV1VXgWW/HzBsH0zUYefVU+V/8Dgds3\nn+ebTOhwq/Cbf+LYBWwuAOsNYrVzGq2JEQLiZBBOShSAG1Kn1zolIW4WfGgS8/Ib\n9mviojfR6iNjhyZakmiiVPiNPa1qC4MMFilRGdvlnbE6xBAcWX+v661+R9wJrfk=\n=8Pad\n-----END PGP SIGNATURE-----",
        "payload": "tree a734a1ec64e61595aa7bad3fc114ecb18b896dc8\nparent 6012967c4746095e6f66a142cb9f639544c17377\nparent c5945804ca7e5edd9fce8c6de9b1f0ef775f9e79\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1484812946 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1484813026 +0100\n\nMerge #9499: Use recent-rejects, orphans, and recently-replaced txn for compact-block-reconstruction\n\nc594580 Add braces around AddToCompactExtraTransactions (Matt Corallo)\n1ccfe9b Clarify comment about mempool/extra conflicts (Matt Corallo)\nfac4c78 Make PartiallyDownloadedBlock::InitData's second param const (Matt Corallo)\nb55b416 Add extra_count lower bound to compact reconstruction debug print (Matt Corallo)\n863edb4 Consider all (<100k memusage) txn for compact-block-extra-txn cache (Matt Corallo)\n7f8c8ca Consider all orphan txn for compact-block-extra-txn cache (Matt Corallo)\n93380c5 Use replaced transactions in compact block reconstruction (Matt Corallo)\n1531652 Keep shared_ptrs to recently-replaced txn for compact blocks (Matt Corallo)\nedded80 Make ATMP optionally return the CTransactionRefs it replaced (Matt Corallo)\nc735540 Move ORPHAN constants from validation.h to net_processing.h (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c9af5ab2d9e461bb6f2dee1390025ce82a3625b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9c9af5ab2d9e461bb6f2dee1390025ce82a3625b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c9af5ab2d9e461bb6f2dee1390025ce82a3625b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6012967c4746095e6f66a142cb9f639544c17377",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6012967c4746095e6f66a142cb9f639544c17377",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6012967c4746095e6f66a142cb9f639544c17377"
      },
      {
        "sha": "c5945804ca7e5edd9fce8c6de9b1f0ef775f9e79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5945804ca7e5edd9fce8c6de9b1f0ef775f9e79",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c5945804ca7e5edd9fce8c6de9b1f0ef775f9e79"
      }
    ],
    "stats": {
      "total": 136,
      "additions": 105,
      "deletions": 31
    },
    "files": [
      {
        "sha": "4a311cbba2a65927eda6f798ff11ec6a4386c477",
        "filename": "src/blockencodings.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 2,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c9af5ab2d9e461bb6f2dee1390025ce82a3625b/src/blockencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c9af5ab2d9e461bb6f2dee1390025ce82a3625b/src/blockencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.cpp?ref=9c9af5ab2d9e461bb6f2dee1390025ce82a3625b",
        "patch": "@@ -47,7 +47,7 @@ uint64_t CBlockHeaderAndShortTxIDs::GetShortID(const uint256& txhash) const {\n \n \n \n-ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& cmpctblock) {\n+ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& cmpctblock, const std::vector<std::pair<uint256, CTransactionRef>>& extra_txn) {\n     if (cmpctblock.header.IsNull() || (cmpctblock.shorttxids.empty() && cmpctblock.prefilledtxn.empty()))\n         return READ_STATUS_INVALID;\n     if (cmpctblock.shorttxids.size() + cmpctblock.prefilledtxn.size() > MAX_BLOCK_BASE_SIZE / MIN_TRANSACTION_BASE_SIZE)\n@@ -104,6 +104,7 @@ ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& c\n         return READ_STATUS_FAILED; // Short ID collision\n \n     std::vector<bool> have_txn(txn_available.size());\n+    {\n     LOCK(pool->cs);\n     const std::vector<std::pair<uint256, CTxMemPool::txiter> >& vTxHashes = pool->vTxHashes;\n     for (size_t i = 0; i < vTxHashes.size(); i++) {\n@@ -130,6 +131,38 @@ ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& c\n         if (mempool_count == shorttxids.size())\n             break;\n     }\n+    }\n+\n+    for (size_t i = 0; i < extra_txn.size(); i++) {\n+        uint64_t shortid = cmpctblock.GetShortID(extra_txn[i].first);\n+        std::unordered_map<uint64_t, uint16_t>::iterator idit = shorttxids.find(shortid);\n+        if (idit != shorttxids.end()) {\n+            if (!have_txn[idit->second]) {\n+                txn_available[idit->second] = extra_txn[i].second;\n+                have_txn[idit->second]  = true;\n+                mempool_count++;\n+                extra_count++;\n+            } else {\n+                // If we find two mempool/extra txn that match the short id, just\n+                // request it.\n+                // This should be rare enough that the extra bandwidth doesn't matter,\n+                // but eating a round-trip due to FillBlock failure would be annoying\n+                // Note that we dont want duplication between extra_txn and mempool to\n+                // trigger this case, so we compare witness hashes first\n+                if (txn_available[idit->second] &&\n+                        txn_available[idit->second]->GetWitnessHash() != extra_txn[i].second->GetWitnessHash()) {\n+                    txn_available[idit->second].reset();\n+                    mempool_count--;\n+                    extra_count--;\n+                }\n+            }\n+        }\n+        // Though ideally we'd continue scanning for the two-txn-match-shortid case,\n+        // the performance win of an early exit here is too good to pass up and worth\n+        // the extra risk.\n+        if (mempool_count == shorttxids.size())\n+            break;\n+    }\n \n     LogPrint(\"cmpctblock\", \"Initialized PartiallyDownloadedBlock for block %s using a cmpctblock of size %lu\\n\", cmpctblock.header.GetHash().ToString(), GetSerializeSize(cmpctblock, SER_NETWORK, PROTOCOL_VERSION));\n \n@@ -176,7 +209,7 @@ ReadStatus PartiallyDownloadedBlock::FillBlock(CBlock& block, const std::vector<\n         return READ_STATUS_CHECKBLOCK_FAILED;\n     }\n \n-    LogPrint(\"cmpctblock\", \"Successfully reconstructed block %s with %lu txn prefilled, %lu txn from mempool and %lu txn requested\\n\", hash.ToString(), prefilled_count, mempool_count, vtx_missing.size());\n+    LogPrint(\"cmpctblock\", \"Successfully reconstructed block %s with %lu txn prefilled, %lu txn from mempool (incl at least %lu from extra pool) and %lu txn requested\\n\", hash.ToString(), prefilled_count, mempool_count, extra_count, vtx_missing.size());\n     if (vtx_missing.size() < 5) {\n         for (const auto& tx : vtx_missing)\n             LogPrint(\"cmpctblock\", \"Reconstructed block %s required tx %s\\n\", hash.ToString(), tx->GetHash().ToString());"
      },
      {
        "sha": "281db9fe01f32dcf423a8c64bd934bba1a3f69fd",
        "filename": "src/blockencodings.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c9af5ab2d9e461bb6f2dee1390025ce82a3625b/src/blockencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c9af5ab2d9e461bb6f2dee1390025ce82a3625b/src/blockencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.h?ref=9c9af5ab2d9e461bb6f2dee1390025ce82a3625b",
        "patch": "@@ -194,13 +194,14 @@ class CBlockHeaderAndShortTxIDs {\n class PartiallyDownloadedBlock {\n protected:\n     std::vector<CTransactionRef> txn_available;\n-    size_t prefilled_count = 0, mempool_count = 0;\n+    size_t prefilled_count = 0, mempool_count = 0, extra_count = 0;\n     CTxMemPool* pool;\n public:\n     CBlockHeader header;\n     PartiallyDownloadedBlock(CTxMemPool* poolIn) : pool(poolIn) {}\n \n-    ReadStatus InitData(const CBlockHeaderAndShortTxIDs& cmpctblock);\n+    // extra_txn is a list of extra transactions to look at, in <witness hash, reference> form\n+    ReadStatus InitData(const CBlockHeaderAndShortTxIDs& cmpctblock, const std::vector<std::pair<uint256, CTransactionRef>>& extra_txn);\n     bool IsTxAvailable(size_t index) const;\n     ReadStatus FillBlock(CBlock& block, const std::vector<CTransactionRef>& vtx_missing);\n };"
      },
      {
        "sha": "5be011f944dec5fb0d1674b7d469152b9650bba1",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c9af5ab2d9e461bb6f2dee1390025ce82a3625b/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c9af5ab2d9e461bb6f2dee1390025ce82a3625b/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9c9af5ab2d9e461bb6f2dee1390025ce82a3625b",
        "patch": "@@ -345,6 +345,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-maxorphantx=<n>\", strprintf(_(\"Keep at most <n> unconnectable transactions in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n     strUsage += HelpMessageOpt(\"-maxmempool=<n>\", strprintf(_(\"Keep the transaction memory pool below <n> megabytes (default: %u)\"), DEFAULT_MAX_MEMPOOL_SIZE));\n     strUsage += HelpMessageOpt(\"-mempoolexpiry=<n>\", strprintf(_(\"Do not keep transactions in the mempool longer than <n> hours (default: %u)\"), DEFAULT_MEMPOOL_EXPIRY));\n+    strUsage += HelpMessageOpt(\"-blockreconstructionextratxn=<n>\", strprintf(_(\"Extra transactions to keep in memory for compact block reconstructions (default: %u)\"), DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN));\n     strUsage += HelpMessageOpt(\"-par=<n>\", strprintf(_(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\"),\n         -GetNumCores(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS));\n #ifndef WIN32"
      },
      {
        "sha": "36a52576357ee50d137d33f5802be508b24308a1",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 4,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c9af5ab2d9e461bb6f2dee1390025ce82a3625b/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c9af5ab2d9e461bb6f2dee1390025ce82a3625b/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=9c9af5ab2d9e461bb6f2dee1390025ce82a3625b",
        "patch": "@@ -59,6 +59,9 @@ map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(cs_main);\n map<COutPoint, set<map<uint256, COrphanTx>::iterator, IteratorComparator>> mapOrphanTransactionsByPrev GUARDED_BY(cs_main);\n void EraseOrphansFor(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+static size_t vExtraTxnForCompactIt = 0;\n+static std::vector<std::pair<uint256, CTransactionRef>> vExtraTxnForCompact GUARDED_BY(cs_main);\n+\n static const uint64_t RANDOMIZER_ID_ADDRESS_RELAY = 0x3cac0035b5866b90ULL; // SHA256(\"main address relay\")[0:8]\n \n // Internal stuff\n@@ -591,6 +594,17 @@ void UnregisterNodeSignals(CNodeSignals& nodeSignals)\n // mapOrphanTransactions\n //\n \n+void AddToCompactExtraTransactions(const CTransactionRef& tx)\n+{\n+    size_t max_extra_txn = GetArg(\"-blockreconstructionextratxn\", DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN);\n+    if (max_extra_txn <= 0)\n+        return;\n+    if (!vExtraTxnForCompact.size())\n+        vExtraTxnForCompact.resize(max_extra_txn);\n+    vExtraTxnForCompact[vExtraTxnForCompactIt] = std::make_pair(tx->GetWitnessHash(), tx);\n+    vExtraTxnForCompactIt = (vExtraTxnForCompactIt + 1) % max_extra_txn;\n+}\n+\n bool AddOrphanTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     const uint256& hash = tx->GetHash();\n@@ -617,6 +631,8 @@ bool AddOrphanTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRE\n         mapOrphanTransactionsByPrev[txin.prevout].insert(ret.first);\n     }\n \n+    AddToCompactExtraTransactions(tx);\n+\n     LogPrint(\"mempool\", \"stored orphan tx %s (mapsz %u outsz %u)\\n\", hash.ToString(),\n              mapOrphanTransactions.size(), mapOrphanTransactionsByPrev.size());\n     return true;\n@@ -1722,7 +1738,9 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         pfrom->setAskFor.erase(inv.hash);\n         mapAlreadyAskedFor.erase(inv.hash);\n \n-        if (!AlreadyHave(inv) && AcceptToMemoryPool(mempool, state, ptx, true, &fMissingInputs)) {\n+        std::list<CTransactionRef> lRemovedTxn;\n+\n+        if (!AlreadyHave(inv) && AcceptToMemoryPool(mempool, state, ptx, true, &fMissingInputs, &lRemovedTxn)) {\n             mempool.check(pcoinsTip);\n             RelayTransaction(tx, connman);\n             for (unsigned int i = 0; i < tx.vout.size(); i++) {\n@@ -1760,7 +1778,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n                     if (setMisbehaving.count(fromPeer))\n                         continue;\n-                    if (AcceptToMemoryPool(mempool, stateDummy, porphanTx, true, &fMissingInputs2)) {\n+                    if (AcceptToMemoryPool(mempool, stateDummy, porphanTx, true, &fMissingInputs2, &lRemovedTxn)) {\n                         LogPrint(\"mempool\", \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n                         RelayTransaction(orphanTx, connman);\n                         for (unsigned int i = 0; i < orphanTx.vout.size(); i++) {\n@@ -1833,6 +1851,11 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 // See https://github.com/bitcoin/bitcoin/issues/8279 for details.\n                 assert(recentRejects);\n                 recentRejects->insert(tx.GetHash());\n+                if (RecursiveDynamicUsage(*ptx) < 100000) {\n+                    AddToCompactExtraTransactions(ptx);\n+                }\n+            } else if (tx.HasWitness() && RecursiveDynamicUsage(*ptx) < 100000) {\n+                AddToCompactExtraTransactions(ptx);\n             }\n \n             if (pfrom->fWhitelisted && GetBoolArg(\"-whitelistforcerelay\", DEFAULT_WHITELISTFORCERELAY)) {\n@@ -1853,6 +1876,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 }\n             }\n         }\n+\n+        for (const CTransactionRef& tx : lRemovedTxn)\n+            AddToCompactExtraTransactions(tx);\n+\n         int nDoS = 0;\n         if (state.IsInvalid(nDoS))\n         {\n@@ -1969,7 +1996,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 }\n \n                 PartiallyDownloadedBlock& partialBlock = *(*queuedBlockIt)->partialBlock;\n-                ReadStatus status = partialBlock.InitData(cmpctblock);\n+                ReadStatus status = partialBlock.InitData(cmpctblock, vExtraTxnForCompact);\n                 if (status == READ_STATUS_INVALID) {\n                     MarkBlockAsReceived(pindex->GetBlockHash()); // Reset in-flight state in case of whitelist\n                     Misbehaving(pfrom->GetId(), 100);\n@@ -2005,7 +2032,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 // Optimistically try to reconstruct anyway since we might be\n                 // able to without any round trips.\n                 PartiallyDownloadedBlock tempBlock(&mempool);\n-                ReadStatus status = tempBlock.InitData(cmpctblock);\n+                ReadStatus status = tempBlock.InitData(cmpctblock, vExtraTxnForCompact);\n                 if (status != READ_STATUS_OK) {\n                     // TODO: don't ignore failures\n                     return true;"
      },
      {
        "sha": "7351c0e99c168c1ba3570dfb373ff25ada0cca6f",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c9af5ab2d9e461bb6f2dee1390025ce82a3625b/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c9af5ab2d9e461bb6f2dee1390025ce82a3625b/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=9c9af5ab2d9e461bb6f2dee1390025ce82a3625b",
        "patch": "@@ -9,6 +9,15 @@\n #include \"net.h\"\n #include \"validationinterface.h\"\n \n+/** Default for -maxorphantx, maximum number of orphan transactions kept in memory */\n+static const unsigned int DEFAULT_MAX_ORPHAN_TRANSACTIONS = 100;\n+/** Expiration time for orphan transactions in seconds */\n+static const int64_t ORPHAN_TX_EXPIRE_TIME = 20 * 60;\n+/** Minimum time between orphan transactions expire time checks in seconds */\n+static const int64_t ORPHAN_TX_EXPIRE_INTERVAL = 5 * 60;\n+/** Default number of orphan+recently-replaced txn to keep around for block reconstruction */\n+static const unsigned int DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN = 100;\n+\n /** Register with a network node to receive its signals */\n void RegisterNodeSignals(CNodeSignals& nodeSignals);\n /** Unregister a network node */"
      },
      {
        "sha": "c10de45f8bf8e2cd574c5b481e9b2c7c6feef879",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c9af5ab2d9e461bb6f2dee1390025ce82a3625b/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c9af5ab2d9e461bb6f2dee1390025ce82a3625b/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=9c9af5ab2d9e461bb6f2dee1390025ce82a3625b",
        "patch": "@@ -903,7 +903,7 @@ UniValue sendrawtransaction(const JSONRPCRequest& request)\n         // push to local node and sync with wallets\n         CValidationState state;\n         bool fMissingInputs;\n-        if (!AcceptToMemoryPool(mempool, state, std::move(tx), fLimitFree, &fMissingInputs, false, nMaxRawTxFee)) {\n+        if (!AcceptToMemoryPool(mempool, state, std::move(tx), fLimitFree, &fMissingInputs, NULL, false, nMaxRawTxFee)) {\n             if (state.IsInvalid()) {\n                 throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf(\"%i: %s\", state.GetRejectCode(), state.GetRejectReason()));\n             } else {"
      },
      {
        "sha": "311ac024f3b2c8ff9077772fabc6681b54d51706",
        "filename": "src/test/blockencodings_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c9af5ab2d9e461bb6f2dee1390025ce82a3625b/src/test/blockencodings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c9af5ab2d9e461bb6f2dee1390025ce82a3625b/src/test/blockencodings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockencodings_tests.cpp?ref=9c9af5ab2d9e461bb6f2dee1390025ce82a3625b",
        "patch": "@@ -11,6 +11,8 @@\n \n #include <boost/test/unit_test.hpp>\n \n+std::vector<std::pair<uint256, CTransactionRef>> extra_txn;\n+\n struct RegtestingSetup : public TestingSetup {\n     RegtestingSetup() : TestingSetup(CBaseChainParams::REGTEST) {}\n };\n@@ -73,7 +75,7 @@ BOOST_AUTO_TEST_CASE(SimpleRoundTripTest)\n         stream >> shortIDs2;\n \n         PartiallyDownloadedBlock partialBlock(&pool);\n-        BOOST_CHECK(partialBlock.InitData(shortIDs2) == READ_STATUS_OK);\n+        BOOST_CHECK(partialBlock.InitData(shortIDs2, extra_txn) == READ_STATUS_OK);\n         BOOST_CHECK( partialBlock.IsTxAvailable(0));\n         BOOST_CHECK(!partialBlock.IsTxAvailable(1));\n         BOOST_CHECK( partialBlock.IsTxAvailable(2));\n@@ -179,7 +181,7 @@ BOOST_AUTO_TEST_CASE(NonCoinbasePreforwardRTTest)\n         stream >> shortIDs2;\n \n         PartiallyDownloadedBlock partialBlock(&pool);\n-        BOOST_CHECK(partialBlock.InitData(shortIDs2) == READ_STATUS_OK);\n+        BOOST_CHECK(partialBlock.InitData(shortIDs2, extra_txn) == READ_STATUS_OK);\n         BOOST_CHECK(!partialBlock.IsTxAvailable(0));\n         BOOST_CHECK( partialBlock.IsTxAvailable(1));\n         BOOST_CHECK( partialBlock.IsTxAvailable(2));\n@@ -245,7 +247,7 @@ BOOST_AUTO_TEST_CASE(SufficientPreforwardRTTest)\n         stream >> shortIDs2;\n \n         PartiallyDownloadedBlock partialBlock(&pool);\n-        BOOST_CHECK(partialBlock.InitData(shortIDs2) == READ_STATUS_OK);\n+        BOOST_CHECK(partialBlock.InitData(shortIDs2, extra_txn) == READ_STATUS_OK);\n         BOOST_CHECK( partialBlock.IsTxAvailable(0));\n         BOOST_CHECK( partialBlock.IsTxAvailable(1));\n         BOOST_CHECK( partialBlock.IsTxAvailable(2));\n@@ -300,7 +302,7 @@ BOOST_AUTO_TEST_CASE(EmptyBlockRoundTripTest)\n         stream >> shortIDs2;\n \n         PartiallyDownloadedBlock partialBlock(&pool);\n-        BOOST_CHECK(partialBlock.InitData(shortIDs2) == READ_STATUS_OK);\n+        BOOST_CHECK(partialBlock.InitData(shortIDs2, extra_txn) == READ_STATUS_OK);\n         BOOST_CHECK(partialBlock.IsTxAvailable(0));\n \n         CBlock block2;"
      },
      {
        "sha": "c5367208baaef50c803c446cc61cbaef1242a7c0",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c9af5ab2d9e461bb6f2dee1390025ce82a3625b/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c9af5ab2d9e461bb6f2dee1390025ce82a3625b/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=9c9af5ab2d9e461bb6f2dee1390025ce82a3625b",
        "patch": "@@ -23,7 +23,7 @@ ToMemPool(CMutableTransaction& tx)\n     LOCK(cs_main);\n \n     CValidationState state;\n-    return AcceptToMemoryPool(mempool, state, MakeTransactionRef(tx), false, NULL, true, 0);\n+    return AcceptToMemoryPool(mempool, state, MakeTransactionRef(tx), false, NULL, NULL, true, 0);\n }\n \n BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)"
      },
      {
        "sha": "bb13cbaadbc8e3f1e4d94c3f86d6c1d09508a59f",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 7,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c9af5ab2d9e461bb6f2dee1390025ce82a3625b/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c9af5ab2d9e461bb6f2dee1390025ce82a3625b/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=9c9af5ab2d9e461bb6f2dee1390025ce82a3625b",
        "patch": "@@ -540,8 +540,8 @@ static bool IsCurrentForFeeEstimation()\n }\n \n bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const CTransactionRef& ptx, bool fLimitFree,\n-                              bool* pfMissingInputs, int64_t nAcceptTime, bool fOverrideMempoolLimit, const CAmount& nAbsurdFee,\n-                              std::vector<uint256>& vHashTxnToUncache)\n+                              bool* pfMissingInputs, int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n+                              bool fOverrideMempoolLimit, const CAmount& nAbsurdFee, std::vector<uint256>& vHashTxnToUncache)\n {\n     const CTransaction& tx = *ptx;\n     const uint256 hash = tx.GetHash();\n@@ -952,6 +952,8 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n                     hash.ToString(),\n                     FormatMoney(nModifiedFees - nConflictingFees),\n                     (int)nSize - (int)nConflictingSize);\n+            if (plTxnReplaced)\n+                plTxnReplaced->push_back(it->GetSharedTx());\n         }\n         pool.RemoveStaged(allConflicting, false);\n \n@@ -977,10 +979,11 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n }\n \n bool AcceptToMemoryPoolWithTime(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx, bool fLimitFree,\n-                        bool* pfMissingInputs, int64_t nAcceptTime, bool fOverrideMempoolLimit, const CAmount nAbsurdFee)\n+                        bool* pfMissingInputs, int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n+                        bool fOverrideMempoolLimit, const CAmount nAbsurdFee)\n {\n     std::vector<uint256> vHashTxToUncache;\n-    bool res = AcceptToMemoryPoolWorker(pool, state, tx, fLimitFree, pfMissingInputs, nAcceptTime, fOverrideMempoolLimit, nAbsurdFee, vHashTxToUncache);\n+    bool res = AcceptToMemoryPoolWorker(pool, state, tx, fLimitFree, pfMissingInputs, nAcceptTime, plTxnReplaced, fOverrideMempoolLimit, nAbsurdFee, vHashTxToUncache);\n     if (!res) {\n         BOOST_FOREACH(const uint256& hashTx, vHashTxToUncache)\n             pcoinsTip->Uncache(hashTx);\n@@ -992,9 +995,10 @@ bool AcceptToMemoryPoolWithTime(CTxMemPool& pool, CValidationState &state, const\n }\n \n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx, bool fLimitFree,\n-                        bool* pfMissingInputs, bool fOverrideMempoolLimit, const CAmount nAbsurdFee)\n+                        bool* pfMissingInputs, std::list<CTransactionRef>* plTxnReplaced,\n+                        bool fOverrideMempoolLimit, const CAmount nAbsurdFee)\n {\n-    return AcceptToMemoryPoolWithTime(pool, state, tx, fLimitFree, pfMissingInputs, GetTime(), fOverrideMempoolLimit, nAbsurdFee);\n+    return AcceptToMemoryPoolWithTime(pool, state, tx, fLimitFree, pfMissingInputs, GetTime(), plTxnReplaced, fOverrideMempoolLimit, nAbsurdFee);\n }\n \n /** Return transaction in txOut, and if it was found inside a block, its hash is placed in hashBlock */\n@@ -2160,7 +2164,7 @@ bool static DisconnectTip(CValidationState& state, const CChainParams& chainpara\n             const CTransaction& tx = *it;\n             // ignore validation errors in resurrected transactions\n             CValidationState stateDummy;\n-            if (tx.IsCoinBase() || !AcceptToMemoryPool(mempool, stateDummy, it, false, NULL, true)) {\n+            if (tx.IsCoinBase() || !AcceptToMemoryPool(mempool, stateDummy, it, false, NULL, NULL, true)) {\n                 mempool.removeRecursive(tx);\n             } else if (mempool.exists(tx.GetHash())) {\n                 vHashUpdate.push_back(tx.GetHash());"
      },
      {
        "sha": "6fcbb1c10849b030d602b9596959073f619b7acd",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 6,
        "deletions": 9,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c9af5ab2d9e461bb6f2dee1390025ce82a3625b/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c9af5ab2d9e461bb6f2dee1390025ce82a3625b/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=9c9af5ab2d9e461bb6f2dee1390025ce82a3625b",
        "patch": "@@ -59,12 +59,6 @@ static const CAmount DEFAULT_TRANSACTION_MAXFEE = 0.1 * COIN;\n static const CAmount HIGH_TX_FEE_PER_KB = 0.01 * COIN;\n //! -maxtxfee will warn if called with a higher fee than this amount (in satoshis)\n static const CAmount HIGH_MAX_TX_FEE = 100 * HIGH_TX_FEE_PER_KB;\n-/** Default for -maxorphantx, maximum number of orphan transactions kept in memory */\n-static const unsigned int DEFAULT_MAX_ORPHAN_TRANSACTIONS = 100;\n-/** Expiration time for orphan transactions in seconds */\n-static const int64_t ORPHAN_TX_EXPIRE_TIME = 20 * 60;\n-/** Minimum time between orphan transactions expire time checks in seconds */\n-static const int64_t ORPHAN_TX_EXPIRE_INTERVAL = 5 * 60;\n /** Default for -limitancestorcount, max number of in-mempool ancestors */\n static const unsigned int DEFAULT_ANCESTOR_LIMIT = 25;\n /** Default for -limitancestorsize, maximum kilobytes of tx + all in-mempool ancestors */\n@@ -319,13 +313,16 @@ void PruneAndFlush();\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nPruneUpToHeight);\n \n-/** (try to) add transaction to memory pool **/\n+/** (try to) add transaction to memory pool\n+ * plTxnReplaced will be appended to with all transactions replaced from mempool **/\n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx, bool fLimitFree,\n-                        bool* pfMissingInputs, bool fOverrideMempoolLimit=false, const CAmount nAbsurdFee=0);\n+                        bool* pfMissingInputs, std::list<CTransactionRef>* plTxnReplaced = NULL,\n+                        bool fOverrideMempoolLimit=false, const CAmount nAbsurdFee=0);\n \n /** (try to) add transaction to memory pool with a specified acceptance time **/\n bool AcceptToMemoryPoolWithTime(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx, bool fLimitFree,\n-                        bool* pfMissingInputs, int64_t nAcceptTime, bool fOverrideMempoolLimit=false, const CAmount nAbsurdFee=0);\n+                        bool* pfMissingInputs, int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced = NULL,\n+                        bool fOverrideMempoolLimit=false, const CAmount nAbsurdFee=0);\n \n /** Convert CValidationState to a human-readable message for logging */\n std::string FormatStateMessage(const CValidationState &state);"
      },
      {
        "sha": "0b18be87649fd03e96d91de2dab4f6fa84aa047a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c9af5ab2d9e461bb6f2dee1390025ce82a3625b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c9af5ab2d9e461bb6f2dee1390025ce82a3625b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=9c9af5ab2d9e461bb6f2dee1390025ce82a3625b",
        "patch": "@@ -3852,5 +3852,5 @@ int CMerkleTx::GetBlocksToMaturity() const\n \n bool CMerkleTx::AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState& state)\n {\n-    return ::AcceptToMemoryPool(mempool, state, tx, true, NULL, false, nAbsurdFee);\n+    return ::AcceptToMemoryPool(mempool, state, tx, true, NULL, NULL, false, nAbsurdFee);\n }"
      }
    ]
  },
  {
    "sha": "40ec7c7b0d2a5a37de90635b676b16884b622dd6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MGVjN2M3YjBkMmE1YTM3ZGU5MDYzNWI2NzZiMTY4ODRiNjIyZGQ2",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-03T14:09:57Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-19T08:10:04Z"
      },
      "message": "[Qt] Improve progress display during headers-sync and peer-finding",
      "tree": {
        "sha": "2e85b0992f571b5ed4e2790674e5d8a1c1a78bc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2e85b0992f571b5ed4e2790674e5d8a1c1a78bc5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/40ec7c7b0d2a5a37de90635b676b16884b622dd6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAliAdF0ACgkQKdS8tkFv\nU+xZVA//b7nO+/06l2GJVBYiBTr6o1oZdRYqLxan5P8bRkhXXUBm8w6U4gBBaHcl\ny7EiuQYbATd3549DpnGUEs4QheUDs1ChUiitvqantwmHxEb+bzCAmJUfj/JbMPJ8\nbKVrvGOK4jVvUPKu1gAS6C5w7NOAuwt6s85GHmS18FW+ETZ+CsIfvzV14T5a0jKl\nGhRq0Q9f/BdpshopXpRqf7X1r3zBsKsLSKDICkcqFvFEmaE1GHyL/R10AdWf9xFZ\np01PRbvmESLX/TYmER+s/v5ANVr67mBACs0ht7mN17oLPO3xR03tnTe1A0/35HbG\nrBQTqywuzf/VQFvS1ck1oRqtmIWn2pEYoO+5fnXskBa947xFrj10l1diou+yhZ7D\nzo4J4baOmyl4uA8lc9pNx6KH3385Nlz2BQIocTscHCxeIowTDvtu5j30HyMVg9Jf\n4F5yHIRN2swGz4PtDal9JFC+nxrjnrI4H2e0I39nK0OdOVvBL3Yi/Zrjmzb/fF7O\nIoRAkvxgdT+nEaMMLwy7hnywqKdA0Fr3GRHD4fyy3Ssjg0KSvpd0bW3v6/Y1sMmA\nk7YyqUudHNC0rP5e2TxQyNzT+5NAxZrGwwYattp5j/S2hKsxNhhVh3N7WvOC1URY\nkT3lrWLt5M0aP+a3fz3Pafh3pU3VV6/ELXv+Qx6ATDYc+eG/rg8=\n=HFfl\n-----END PGP SIGNATURE-----",
        "payload": "tree 2e85b0992f571b5ed4e2790674e5d8a1c1a78bc5\nparent 03e1d6ce349cc83b92140fec7d0c5f88893c0a9c\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1483452597 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1484813404 +0100\n\n[Qt] Improve progress display during headers-sync and peer-finding\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40ec7c7b0d2a5a37de90635b676b16884b622dd6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/40ec7c7b0d2a5a37de90635b676b16884b622dd6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40ec7c7b0d2a5a37de90635b676b16884b622dd6/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "03e1d6ce349cc83b92140fec7d0c5f88893c0a9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03e1d6ce349cc83b92140fec7d0c5f88893c0a9c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/03e1d6ce349cc83b92140fec7d0c5f88893c0a9c"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 18,
      "deletions": 3
    },
    "files": [
      {
        "sha": "cd790c60850a7533c3131b29056c3952a1e1f7fe",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 2,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40ec7c7b0d2a5a37de90635b676b16884b622dd6/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40ec7c7b0d2a5a37de90635b676b16884b622dd6/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=40ec7c7b0d2a5a37de90635b676b16884b622dd6",
        "patch": "@@ -748,6 +748,15 @@ void BitcoinGUI::setNetworkActive(bool networkActive)\n     updateNetworkState();\n }\n \n+void BitcoinGUI::updateHeadersSyncProgressLabel()\n+{\n+    int64_t headersTipTime = clientModel->getHeaderTipTime();\n+    int headersTipHeight = clientModel->getHeaderTipHeight();\n+    int estHeadersLeft = (GetTime() - headersTipTime)/600;\n+    if (estHeadersLeft > REQ_HEADER_HEIGHT_DELTA_SYNC)\n+        progressBarLabel->setText(tr(\"Syncing Headers (%1%)...\").arg(QString::number(100.0 / (headersTipHeight+estHeadersLeft)*headersTipHeight, 'f', 1)));\n+}\n+\n void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate, double nVerificationProgress, bool header)\n {\n     if (modalOverlay)\n@@ -768,9 +777,11 @@ void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate, double nVer\n     switch (blockSource) {\n         case BLOCK_SOURCE_NETWORK:\n             if (header) {\n+                updateHeadersSyncProgressLabel();\n                 return;\n             }\n             progressBarLabel->setText(tr(\"Synchronizing with network...\"));\n+            updateHeadersSyncProgressLabel();\n             break;\n         case BLOCK_SOURCE_DISK:\n             if (header) {\n@@ -786,8 +797,7 @@ void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate, double nVer\n             if (header) {\n                 return;\n             }\n-            // Case: not Importing, not Reindexing and no network connection\n-            progressBarLabel->setText(tr(\"No block source available...\"));\n+            progressBarLabel->setText(tr(\"Connecting to peers...\"));\n             break;\n     }\n "
      },
      {
        "sha": "5c7851c566def089efbb0cd09b5abfdc90c7a661",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40ec7c7b0d2a5a37de90635b676b16884b622dd6/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40ec7c7b0d2a5a37de90635b676b16884b622dd6/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=40ec7c7b0d2a5a37de90635b676b16884b622dd6",
        "patch": "@@ -149,6 +149,8 @@ class BitcoinGUI : public QMainWindow\n     /** Update UI with latest network info from model. */\n     void updateNetworkState();\n \n+    void updateHeadersSyncProgressLabel();\n+\n Q_SIGNALS:\n     /** Signal raised when a URI was entered or dragged to the GUI */\n     void receivedURI(const QString &uri);"
      },
      {
        "sha": "c495f621073ddeb33f494ec0adb4bec394c45329",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40ec7c7b0d2a5a37de90635b676b16884b622dd6/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40ec7c7b0d2a5a37de90635b676b16884b622dd6/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=40ec7c7b0d2a5a37de90635b676b16884b622dd6",
        "patch": "@@ -66,7 +66,7 @@ class ClientModel : public QObject\n \n     //! Return true if core is doing initial block download\n     bool inInitialBlockDownload() const;\n-    //! Return true if core is importing blocks\n+    //! Returns enum BlockSource of the current importing/syncing state\n     enum BlockSource getBlockSource() const;\n     //! Return true if network activity in core is enabled\n     bool getNetworkActive() const;"
      },
      {
        "sha": "6d1f12164ef1ff8e162ab3d4658090f6504d0bf3",
        "filename": "src/qt/modaloverlay.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40ec7c7b0d2a5a37de90635b676b16884b622dd6/src/qt/modaloverlay.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40ec7c7b0d2a5a37de90635b676b16884b622dd6/src/qt/modaloverlay.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/modaloverlay.h?ref=40ec7c7b0d2a5a37de90635b676b16884b622dd6",
        "patch": "@@ -8,6 +8,9 @@\n #include <QDateTime>\n #include <QWidget>\n \n+//! The required delta of headers to the estimated number of available headers until we show the IBD progress\n+static const int REQ_HEADER_HEIGHT_DELTA_SYNC = 24;\n+\n namespace Ui {\n     class ModalOverlay;\n }"
      }
    ]
  },
  {
    "sha": "fc089ae47a3773b35111b4abdcac8192aead4578",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYzA4OWFlNDdhMzc3M2IzNTExMWI0YWJkY2FjODE5MmFlYWQ0NTc4",
    "commit": {
      "author": {
        "name": "James White",
        "email": "jamesmacwhite@users.noreply.github.com",
        "date": "2017-01-14T08:26:31Z"
      },
      "committer": {
        "name": "James White",
        "email": "james@jmwhite.co.uk",
        "date": "2017-01-19T09:35:58Z"
      },
      "message": "Add IPv6 support to qos.sh",
      "tree": {
        "sha": "e56f8e7652dde4f34821b89e1b435c04887a2383",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e56f8e7652dde4f34821b89e1b435c04887a2383"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc089ae47a3773b35111b4abdcac8192aead4578",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc089ae47a3773b35111b4abdcac8192aead4578",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fc089ae47a3773b35111b4abdcac8192aead4578",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc089ae47a3773b35111b4abdcac8192aead4578/comments",
    "author": {
      "login": "jamesmacwhite",
      "id": 8067792,
      "node_id": "MDQ6VXNlcjgwNjc3OTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8067792?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesmacwhite",
      "html_url": "https://github.com/jamesmacwhite",
      "followers_url": "https://api.github.com/users/jamesmacwhite/followers",
      "following_url": "https://api.github.com/users/jamesmacwhite/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesmacwhite/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesmacwhite/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesmacwhite/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesmacwhite/orgs",
      "repos_url": "https://api.github.com/users/jamesmacwhite/repos",
      "events_url": "https://api.github.com/users/jamesmacwhite/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesmacwhite/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesmacwhite",
      "id": 8067792,
      "node_id": "MDQ6VXNlcjgwNjc3OTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8067792?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesmacwhite",
      "html_url": "https://github.com/jamesmacwhite",
      "followers_url": "https://api.github.com/users/jamesmacwhite/followers",
      "following_url": "https://api.github.com/users/jamesmacwhite/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesmacwhite/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesmacwhite/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesmacwhite/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesmacwhite/orgs",
      "repos_url": "https://api.github.com/users/jamesmacwhite/repos",
      "events_url": "https://api.github.com/users/jamesmacwhite/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesmacwhite/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e126d0c12ca66278d9e7b12187c5ff4fc02a7e6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e126d0c12ca66278d9e7b12187c5ff4fc02a7e6c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e126d0c12ca66278d9e7b12187c5ff4fc02a7e6c"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 24,
      "deletions": 10
    },
    "files": [
      {
        "sha": "0ded87c58f4ee721058f914682a283f9f9a69787",
        "filename": "contrib/qos/README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc089ae47a3773b35111b4abdcac8192aead4578/contrib/qos/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc089ae47a3773b35111b4abdcac8192aead4578/contrib/qos/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/qos/README.md?ref=fc089ae47a3773b35111b4abdcac8192aead4578",
        "patch": "@@ -1,5 +1,5 @@\n-### Qos ###\n+### QoS (Quality of service) ###\n \n-This is a Linux bash script that will set up tc to limit the outgoing bandwidth for connections to the Bitcoin network. It limits outbound TCP traffic with a source or destination port of 8333, but not if the destination IP is within a LAN (defined as 192.168.x.x).\n+This is a Linux bash script that will set up tc to limit the outgoing bandwidth for connections to the Bitcoin network. It limits outbound TCP traffic with a source or destination port of 8333, but not if the destination IP is within a LAN.\n \n This means one can have an always-on bitcoind instance running, and another local bitcoind/bitcoin-qt instance which connects to this node and receives blocks from it."
      },
      {
        "sha": "0d1dd65b4f58f1fdd57c268c508938f6287e8311",
        "filename": "contrib/qos/tc.sh",
        "status": "modified",
        "additions": 22,
        "deletions": 8,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc089ae47a3773b35111b4abdcac8192aead4578/contrib/qos/tc.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc089ae47a3773b35111b4abdcac8192aead4578/contrib/qos/tc.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/qos/tc.sh?ref=fc089ae47a3773b35111b4abdcac8192aead4578",
        "patch": "@@ -1,4 +1,4 @@\n-# Copyright (c) 2013 The Bitcoin Core developers\n+# Copyright (c) 2017 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -8,8 +8,10 @@ IF=\"eth0\"\n LINKCEIL=\"1gbit\"\n #limit outbound Bitcoin protocol traffic to this rate\n LIMIT=\"160kbit\"\n-#defines the address space for which you wish to disable rate limiting\n-LOCALNET=\"192.168.0.0/16\"\n+#defines the IPv4 address space for which you wish to disable rate limiting\n+LOCALNET_V4=\"192.168.0.0/16\"\n+#defines the IPv6 address space for which you wish to disable rate limiting\n+LOCALNET_V6=\"fe80::/10\"\n \n #delete existing rules\n tc qdisc del dev ${IF} root\n@@ -28,6 +30,12 @@ tc class add dev ${IF} parent 1:1 classid 1:11 htb rate ${LIMIT} ceil ${LIMIT} p\n tc filter add dev ${IF} parent 1: protocol ip prio 1 handle 1 fw classid 1:10\n tc filter add dev ${IF} parent 1: protocol ip prio 2 handle 2 fw classid 1:11\n \n+if [ ! -z \"${LOCALNET_V6}\" ] ; then\n+\t# v6 cannot have the same priority value as v4\n+\ttc filter add dev ${IF} parent 1: protocol ipv6 prio 3 handle 1 fw classid 1:10\n+\ttc filter add dev ${IF} parent 1: protocol ipv6 prio 4 handle 2 fw classid 1:11\n+fi\n+\n #delete any existing rules\n #disable for now\n #ret=0\n@@ -37,9 +45,15 @@ tc filter add dev ${IF} parent 1: protocol ip prio 2 handle 2 fw classid 1:11\n #done\n \n #limit outgoing traffic to and from port 8333. but not when dealing with a host on the local network\n-#\t(defined by $LOCALNET)\n-#\t--set-mark marks packages matching these criteria with the number \"2\"\n-#\tthese packages are filtered by the tc filter with \"handle 2\"\n+#\t(defined by $LOCALNET_V4 and $LOCALNET_V6)\n+#\t--set-mark marks packages matching these criteria with the number \"2\" (v4)\n+#\t--set-mark marks packages matching these criteria with the number \"4\" (v6)\n+#\tthese packets are filtered by the tc filter with \"handle 2\"\n #\tthis filter sends the packages into the 1:11 class, and this class is limited to ${LIMIT}\n-iptables -t mangle -A OUTPUT -p tcp -m tcp --dport 8333 ! -d ${LOCALNET} -j MARK --set-mark 0x2\n-iptables -t mangle -A OUTPUT -p tcp -m tcp --sport 8333 ! -d ${LOCALNET} -j MARK --set-mark 0x2\n+iptables -t mangle -A OUTPUT -p tcp -m tcp --dport 8333 ! -d ${LOCALNET_V4} -j MARK --set-mark 0x2\n+iptables -t mangle -A OUTPUT -p tcp -m tcp --sport 8333 ! -d ${LOCALNET_V4} -j MARK --set-mark 0x2\n+\n+if [ ! -z \"${LOCALNET_V6}\" ] ; then\n+\tip6tables -t mangle -A OUTPUT -p tcp -m tcp --dport 8333 ! -d ${LOCALNET_V6} -j MARK --set-mark 0x4\n+\tip6tables -t mangle -A OUTPUT -p tcp -m tcp --sport 8333 ! -d ${LOCALNET_V6} -j MARK --set-mark 0x4\n+fi"
      }
    ]
  },
  {
    "sha": "41cb05cc8f3c6b1ec564e24b66fd6c192fe36ed2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MWNiMDVjYzhmM2M2YjFlYzU2NGUyNGI2NmZkNmMxOTJmZTM2ZWQy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-19T13:11:27Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-19T13:11:49Z"
      },
      "message": "Merge #9552: Add IPv6 support to qos.sh\n\nfc089ae Add IPv6 support to qos.sh (James White)",
      "tree": {
        "sha": "67d255f90d1fe2beef32c01d9cfb76f67b17a61d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/67d255f90d1fe2beef32c01d9cfb76f67b17a61d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41cb05cc8f3c6b1ec564e24b66fd6c192fe36ed2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYgLsVAAoJEHSBCwEjRsmmv94H/jpEiTPopCJP3IIWv4QGhQx1\nhHqw/FQJ+AzVayWu0GZ6DrciZZT15OSBxWGok930CQsa63KvSxAn5YpIeLQ+jFXM\nvWfMFrZuWvFp5Yja/W4kw5cfU1JcElsfBQS9gM/shh7Po3fTf1A9xpVWEadTRTZL\nO2Ng5IIwVZeThZyMO+IPd7eNqeNapTblz+pteff58Wj50yxmvXg5u7crC6EbLkYy\nXrb4bGB/1XMJYJXrWPBv7jznEbYQz3zMjExiEmnORWHNgpvz1s2idssDvWIsH9b6\n4l6nPzSsyEESdS9lkISJMw1KvEkqrDMST1HvjG3oEAEzYlBpzycwefu2rrY4VrU=\n=XSxJ\n-----END PGP SIGNATURE-----",
        "payload": "tree 67d255f90d1fe2beef32c01d9cfb76f67b17a61d\nparent 9c9af5ab2d9e461bb6f2dee1390025ce82a3625b\nparent fc089ae47a3773b35111b4abdcac8192aead4578\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1484831487 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1484831509 +0100\n\nMerge #9552: Add IPv6 support to qos.sh\n\nfc089ae Add IPv6 support to qos.sh (James White)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41cb05cc8f3c6b1ec564e24b66fd6c192fe36ed2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/41cb05cc8f3c6b1ec564e24b66fd6c192fe36ed2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41cb05cc8f3c6b1ec564e24b66fd6c192fe36ed2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9c9af5ab2d9e461bb6f2dee1390025ce82a3625b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c9af5ab2d9e461bb6f2dee1390025ce82a3625b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9c9af5ab2d9e461bb6f2dee1390025ce82a3625b"
      },
      {
        "sha": "fc089ae47a3773b35111b4abdcac8192aead4578",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc089ae47a3773b35111b4abdcac8192aead4578",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fc089ae47a3773b35111b4abdcac8192aead4578"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 24,
      "deletions": 10
    },
    "files": [
      {
        "sha": "0ded87c58f4ee721058f914682a283f9f9a69787",
        "filename": "contrib/qos/README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41cb05cc8f3c6b1ec564e24b66fd6c192fe36ed2/contrib/qos/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41cb05cc8f3c6b1ec564e24b66fd6c192fe36ed2/contrib/qos/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/qos/README.md?ref=41cb05cc8f3c6b1ec564e24b66fd6c192fe36ed2",
        "patch": "@@ -1,5 +1,5 @@\n-### Qos ###\n+### QoS (Quality of service) ###\n \n-This is a Linux bash script that will set up tc to limit the outgoing bandwidth for connections to the Bitcoin network. It limits outbound TCP traffic with a source or destination port of 8333, but not if the destination IP is within a LAN (defined as 192.168.x.x).\n+This is a Linux bash script that will set up tc to limit the outgoing bandwidth for connections to the Bitcoin network. It limits outbound TCP traffic with a source or destination port of 8333, but not if the destination IP is within a LAN.\n \n This means one can have an always-on bitcoind instance running, and another local bitcoind/bitcoin-qt instance which connects to this node and receives blocks from it."
      },
      {
        "sha": "0d1dd65b4f58f1fdd57c268c508938f6287e8311",
        "filename": "contrib/qos/tc.sh",
        "status": "modified",
        "additions": 22,
        "deletions": 8,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41cb05cc8f3c6b1ec564e24b66fd6c192fe36ed2/contrib/qos/tc.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41cb05cc8f3c6b1ec564e24b66fd6c192fe36ed2/contrib/qos/tc.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/qos/tc.sh?ref=41cb05cc8f3c6b1ec564e24b66fd6c192fe36ed2",
        "patch": "@@ -1,4 +1,4 @@\n-# Copyright (c) 2013 The Bitcoin Core developers\n+# Copyright (c) 2017 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -8,8 +8,10 @@ IF=\"eth0\"\n LINKCEIL=\"1gbit\"\n #limit outbound Bitcoin protocol traffic to this rate\n LIMIT=\"160kbit\"\n-#defines the address space for which you wish to disable rate limiting\n-LOCALNET=\"192.168.0.0/16\"\n+#defines the IPv4 address space for which you wish to disable rate limiting\n+LOCALNET_V4=\"192.168.0.0/16\"\n+#defines the IPv6 address space for which you wish to disable rate limiting\n+LOCALNET_V6=\"fe80::/10\"\n \n #delete existing rules\n tc qdisc del dev ${IF} root\n@@ -28,6 +30,12 @@ tc class add dev ${IF} parent 1:1 classid 1:11 htb rate ${LIMIT} ceil ${LIMIT} p\n tc filter add dev ${IF} parent 1: protocol ip prio 1 handle 1 fw classid 1:10\n tc filter add dev ${IF} parent 1: protocol ip prio 2 handle 2 fw classid 1:11\n \n+if [ ! -z \"${LOCALNET_V6}\" ] ; then\n+\t# v6 cannot have the same priority value as v4\n+\ttc filter add dev ${IF} parent 1: protocol ipv6 prio 3 handle 1 fw classid 1:10\n+\ttc filter add dev ${IF} parent 1: protocol ipv6 prio 4 handle 2 fw classid 1:11\n+fi\n+\n #delete any existing rules\n #disable for now\n #ret=0\n@@ -37,9 +45,15 @@ tc filter add dev ${IF} parent 1: protocol ip prio 2 handle 2 fw classid 1:11\n #done\n \n #limit outgoing traffic to and from port 8333. but not when dealing with a host on the local network\n-#\t(defined by $LOCALNET)\n-#\t--set-mark marks packages matching these criteria with the number \"2\"\n-#\tthese packages are filtered by the tc filter with \"handle 2\"\n+#\t(defined by $LOCALNET_V4 and $LOCALNET_V6)\n+#\t--set-mark marks packages matching these criteria with the number \"2\" (v4)\n+#\t--set-mark marks packages matching these criteria with the number \"4\" (v6)\n+#\tthese packets are filtered by the tc filter with \"handle 2\"\n #\tthis filter sends the packages into the 1:11 class, and this class is limited to ${LIMIT}\n-iptables -t mangle -A OUTPUT -p tcp -m tcp --dport 8333 ! -d ${LOCALNET} -j MARK --set-mark 0x2\n-iptables -t mangle -A OUTPUT -p tcp -m tcp --sport 8333 ! -d ${LOCALNET} -j MARK --set-mark 0x2\n+iptables -t mangle -A OUTPUT -p tcp -m tcp --dport 8333 ! -d ${LOCALNET_V4} -j MARK --set-mark 0x2\n+iptables -t mangle -A OUTPUT -p tcp -m tcp --sport 8333 ! -d ${LOCALNET_V4} -j MARK --set-mark 0x2\n+\n+if [ ! -z \"${LOCALNET_V6}\" ] ; then\n+\tip6tables -t mangle -A OUTPUT -p tcp -m tcp --dport 8333 ! -d ${LOCALNET_V6} -j MARK --set-mark 0x4\n+\tip6tables -t mangle -A OUTPUT -p tcp -m tcp --sport 8333 ! -d ${LOCALNET_V6} -j MARK --set-mark 0x4\n+fi"
      }
    ]
  },
  {
    "sha": "e9e7993007a9bd9e16a22e74e422ec30d1b6fbc8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOWU3OTkzMDA3YTliZDllMTZhMjJlNzRlNDIyZWMzMGQxYjZmYmM4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-19T14:12:25Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-19T14:20:48Z"
      },
      "message": "Merge #9542: Docs: Update CONTRIBUTING.md\n\nc70622e Docs: Update CONTRIBUTING.md (John Newbery)",
      "tree": {
        "sha": "3b63e428e0b64a1525c67b17e8297a229f537e7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b63e428e0b64a1525c67b17e8297a229f537e7a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e9e7993007a9bd9e16a22e74e422ec30d1b6fbc8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYgMtAAAoJEHSBCwEjRsmmegYIAKzTD+g4xAMsyiei3NpzDgHW\nwLPMeyjk1Hx8qIyPjkFDdUzT/wXBjqpdSnHi4tIddOhikUfiuk9yBuKqE9ijsgT9\nxZ4vgELEdBojJ2crdjNIkxVkDScie242VVOBl/8tBlHxLOIVGrg6UsmJykiyQ+db\naLyjbmSD1nFBSmPivVRVv9ApypIj6YSfFjQuqG/MDsl1Hs8a5eE+74K7Ek6JfUu5\ntpYHbGGKsVp6zmIZKzQszPhKylFbcht9Ltn94zFIm8wPRgEzggn7ra17c0wrBF1f\nIjtdOkT3i/9+oeaQ/v6P/EvVCw865NJeW99vW7j2H4syYJHKlE68cNUJt1iXVis=\n=2gW/\n-----END PGP SIGNATURE-----",
        "payload": "tree 3b63e428e0b64a1525c67b17e8297a229f537e7a\nparent 41cb05cc8f3c6b1ec564e24b66fd6c192fe36ed2\nparent c70622e942a5da9a7afce32ba71447745ceefa45\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1484835145 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1484835648 +0100\n\nMerge #9542: Docs: Update CONTRIBUTING.md\n\nc70622e Docs: Update CONTRIBUTING.md (John Newbery)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9e7993007a9bd9e16a22e74e422ec30d1b6fbc8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e9e7993007a9bd9e16a22e74e422ec30d1b6fbc8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9e7993007a9bd9e16a22e74e422ec30d1b6fbc8/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "41cb05cc8f3c6b1ec564e24b66fd6c192fe36ed2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41cb05cc8f3c6b1ec564e24b66fd6c192fe36ed2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/41cb05cc8f3c6b1ec564e24b66fd6c192fe36ed2"
      },
      {
        "sha": "c70622e942a5da9a7afce32ba71447745ceefa45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c70622e942a5da9a7afce32ba71447745ceefa45",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c70622e942a5da9a7afce32ba71447745ceefa45"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 22,
      "deletions": 1
    },
    "files": [
      {
        "sha": "47648cde22e40c7a0209f120c8a04e0c205bfb31",
        "filename": "CONTRIBUTING.md",
        "status": "modified",
        "additions": 22,
        "deletions": 1,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9e7993007a9bd9e16a22e74e422ec30d1b6fbc8/CONTRIBUTING.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9e7993007a9bd9e16a22e74e422ec30d1b6fbc8/CONTRIBUTING.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/CONTRIBUTING.md?ref=e9e7993007a9bd9e16a22e74e422ec30d1b6fbc8",
        "patch": "@@ -53,7 +53,28 @@ about Git.\n   - Create pull request\n \n The title of the pull request should be prefixed by the component or area that\n-the pull request affects. Examples:\n+the pull request affects. Valid areas as:\n+\n+  - *Consensus* for changes to consensus critical code\n+  - *Docs* for changes to the documentation\n+  - *Qt* for changes to bitcoin-qt\n+  - *Mining* for changes to the mining code\n+  - *Net* or *P2P* for changes to the peer-to-peer network code\n+  - *RPC/REST/ZMQ* for changes to the RPC, REST or ZMQ APIs\n+  - *Scripts and tools* for changes to the scripts and tools\n+  - *Tests* for changes to the bitcoin unit tests or QA tests\n+  - *Trivial* should **only** be used for PRs that do not change generated\n+    executable code. Notably, refactors (change of function arguments and code\n+    reorganization) and changes in behavior should **not** be marked as trivial.\n+    Examples of trivial PRs are changes to:\n+    - comments\n+    - whitespace\n+    - variable names\n+    - logging and messages\n+  - *Utils and libraries* for changes to the utils and libraries\n+  - *Wallet* for changes to the wallet code\n+\n+Examples:\n \n     Consensus: Add new opcode for BIP-XXXX OP_CHECKAWESOMESIG\n     Net: Automatically create hidden service, listen on Tor"
      }
    ]
  },
  {
    "sha": "054d664215ca8d5f17d8aadbfc5b78a8dcd5115c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNTRkNjY0MjE1Y2E4ZDVmMTdkOGFhZGJmYzViNzhhOGRjZDUxMTVj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-19T14:21:27Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-19T14:29:09Z"
      },
      "message": "Merge #9498: Basic CCheckQueue Benchmarks\n\naad4cb5 Address ryanofsky feedback on CCheckQueue benchmarks. Eliminated magic numbers, fixed scoping of vectors (and memory movement component of benchmark). (Jeremy Rubin)\n9f03110 Add Basic CheckQueue Benchmark (Jeremy Rubin)",
      "tree": {
        "sha": "bad4a18ff966fa4bcafe186d52d4ab97bfa2f294",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bad4a18ff966fa4bcafe186d52d4ab97bfa2f294"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/054d664215ca8d5f17d8aadbfc5b78a8dcd5115c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYgM02AAoJEHSBCwEjRsmmgYsH/RXiVI102BH2IxQi77U4s+ma\ne9Bzvi47sDkzsJsQuyOABrfLpU/7TUcB4lqeDliiceFfRGKyf1Qe7P7Q0Aa5dmG9\nwmSBzEuG0bK6JGI8aHbDaP72G8tktfJ5nMsLYHQ6bybjwvW9JD6NdhCN+ED9bYwr\ndOWHQs4cVtakZYlnzySyWhOhsB1nDFbatv7MTaa5gQgV6+8QdAufSPS7zshiiXwi\n1o0CRTg5cL8QuLaRMUh4+19XJSGhH6xl6vbneI/4GxwAMZG3Oe8V9BnfV4RodXyd\nRGUKSeh8uRok2KF4kKYFRYQTS/TDEf7LaVprgMtEFiCPe9jWv09lvV9ITuMgxw4=\n=hPDU\n-----END PGP SIGNATURE-----",
        "payload": "tree bad4a18ff966fa4bcafe186d52d4ab97bfa2f294\nparent e9e7993007a9bd9e16a22e74e422ec30d1b6fbc8\nparent aad4cb50599b15d6fc439e465a616635e96466d1\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1484835687 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1484836149 +0100\n\nMerge #9498: Basic CCheckQueue Benchmarks\n\naad4cb5 Address ryanofsky feedback on CCheckQueue benchmarks. Eliminated magic numbers, fixed scoping of vectors (and memory movement component of benchmark). (Jeremy Rubin)\n9f03110 Add Basic CheckQueue Benchmark (Jeremy Rubin)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/054d664215ca8d5f17d8aadbfc5b78a8dcd5115c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/054d664215ca8d5f17d8aadbfc5b78a8dcd5115c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/054d664215ca8d5f17d8aadbfc5b78a8dcd5115c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e9e7993007a9bd9e16a22e74e422ec30d1b6fbc8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9e7993007a9bd9e16a22e74e422ec30d1b6fbc8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e9e7993007a9bd9e16a22e74e422ec30d1b6fbc8"
      },
      {
        "sha": "aad4cb50599b15d6fc439e465a616635e96466d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aad4cb50599b15d6fc439e465a616635e96466d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aad4cb50599b15d6fc439e465a616635e96466d1"
      }
    ],
    "stats": {
      "total": 104,
      "additions": 104,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8c699c2f8c5c4da0f5e035b24c88846a72dd7594",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/054d664215ca8d5f17d8aadbfc5b78a8dcd5115c/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/054d664215ca8d5f17d8aadbfc5b78a8dcd5115c/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=054d664215ca8d5f17d8aadbfc5b78a8dcd5115c",
        "patch": "@@ -15,6 +15,7 @@ bench_bench_bitcoin_SOURCES = \\\n   bench/bench.cpp \\\n   bench/bench.h \\\n   bench/checkblock.cpp \\\n+  bench/checkqueue.cpp \\\n   bench/Examples.cpp \\\n   bench/rollingbloom.cpp \\\n   bench/crypto_hash.cpp \\"
      },
      {
        "sha": "6fa9fe4fe8c489660346c2b1cd555748678be6ac",
        "filename": "src/bench/checkqueue.cpp",
        "status": "added",
        "additions": 103,
        "deletions": 0,
        "changes": 103,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/054d664215ca8d5f17d8aadbfc5b78a8dcd5115c/src/bench/checkqueue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/054d664215ca8d5f17d8aadbfc5b78a8dcd5115c/src/bench/checkqueue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/checkqueue.cpp?ref=054d664215ca8d5f17d8aadbfc5b78a8dcd5115c",
        "patch": "@@ -0,0 +1,103 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bench.h\"\n+#include \"util.h\"\n+#include \"validation.h\"\n+#include \"checkqueue.h\"\n+#include \"prevector.h\"\n+#include <vector>\n+#include <boost/thread/thread.hpp>\n+#include \"random.h\"\n+\n+\n+// This Benchmark tests the CheckQueue with the lightest\n+// weight Checks, so it should make any lock contention\n+// particularly visible\n+static const int MIN_CORES = 2;\n+static const size_t BATCHES = 101;\n+static const size_t BATCH_SIZE = 30;\n+static const int PREVECTOR_SIZE = 28;\n+static const int QUEUE_BATCH_SIZE = 128;\n+static void CCheckQueueSpeed(benchmark::State& state)\n+{\n+    struct FakeJobNoWork {\n+        bool operator()()\n+        {\n+            return true;\n+        }\n+        void swap(FakeJobNoWork& x){};\n+    };\n+    CCheckQueue<FakeJobNoWork> queue {QUEUE_BATCH_SIZE};\n+    boost::thread_group tg;\n+    for (auto x = 0; x < std::max(MIN_CORES, GetNumCores()); ++x) {\n+       tg.create_thread([&]{queue.Thread();});\n+    }\n+    while (state.KeepRunning()) {\n+        CCheckQueueControl<FakeJobNoWork> control(&queue);\n+\n+        // We call Add a number of times to simulate the behavior of adding\n+        // a block of transactions at once.\n+\n+        std::vector<std::vector<FakeJobNoWork>> vBatches(BATCHES);\n+        for (auto& vChecks : vBatches) {\n+            vChecks.resize(BATCH_SIZE);\n+        }\n+        for (auto& vChecks : vBatches) {\n+            // We can't make vChecks in the inner loop because we want to measure\n+            // the cost of getting the memory to each thread and we might get the same\n+            // memory\n+            control.Add(vChecks);\n+        }\n+        // control waits for completion by RAII, but\n+        // it is done explicitly here for clarity\n+        control.Wait();\n+    }\n+    tg.interrupt_all();\n+    tg.join_all();\n+}\n+\n+// This Benchmark tests the CheckQueue with a slightly realistic workload,\n+// where checks all contain a prevector that is indirect 50% of the time\n+// and there is a little bit of work done between calls to Add.\n+static void CCheckQueueSpeedPrevectorJob(benchmark::State& state)\n+{\n+    struct PrevectorJob {\n+        prevector<PREVECTOR_SIZE, uint8_t> p;\n+        PrevectorJob(){\n+        }\n+        PrevectorJob(FastRandomContext& insecure_rand){\n+            p.resize(insecure_rand.rand32() % (PREVECTOR_SIZE*2));\n+        }\n+        bool operator()()\n+        {\n+            return true;\n+        }\n+        void swap(PrevectorJob& x){p.swap(x.p);};\n+    };\n+    CCheckQueue<PrevectorJob> queue {QUEUE_BATCH_SIZE};\n+    boost::thread_group tg;\n+    for (auto x = 0; x < std::max(MIN_CORES, GetNumCores()); ++x) {\n+       tg.create_thread([&]{queue.Thread();});\n+    }\n+    while (state.KeepRunning()) {\n+        // Make insecure_rand here so that each iteration is identical.\n+        FastRandomContext insecure_rand(true);\n+        CCheckQueueControl<PrevectorJob> control(&queue);\n+        std::vector<std::vector<PrevectorJob>> vBatches(BATCHES);\n+        for (auto& vChecks : vBatches) {\n+            vChecks.reserve(BATCH_SIZE);\n+            for (size_t x = 0; x < BATCH_SIZE; ++x)\n+                vChecks.emplace_back(insecure_rand);\n+            control.Add(vChecks);\n+        }\n+        // control waits for completion by RAII, but\n+        // it is done explicitly here for clarity\n+        control.Wait();\n+    }\n+    tg.interrupt_all();\n+    tg.join_all();\n+}\n+BENCHMARK(CCheckQueueSpeed);\n+BENCHMARK(CCheckQueueSpeedPrevectorJob);"
      }
    ]
  },
  {
    "sha": "52dde66770d833ee5e42e7c5fee610453ae3852a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MmRkZTY2NzcwZDgzM2VlNWU0MmU3YzVmZWU2MTA0NTNhZTM4NTJh",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-01-17T15:40:41Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-01-19T16:29:29Z"
      },
      "message": "[wallet] Add include_unsafe argument to listunspent RPC",
      "tree": {
        "sha": "1cb223500d2737ffe81a3578df430e27ffaca8e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1cb223500d2737ffe81a3578df430e27ffaca8e7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/52dde66770d833ee5e42e7c5fee610453ae3852a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52dde66770d833ee5e42e7c5fee610453ae3852a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/52dde66770d833ee5e42e7c5fee610453ae3852a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52dde66770d833ee5e42e7c5fee610453ae3852a/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "766e8a40b478353a89622f42809ddb11e695a0c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/766e8a40b478353a89622f42809ddb11e695a0c9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/766e8a40b478353a89622f42809ddb11e695a0c9"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 36,
      "deletions": 14
    },
    "files": [
      {
        "sha": "283d458c8df90e486332a2b77fa7db759280aa9f",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52dde66770d833ee5e42e7c5fee610453ae3852a/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52dde66770d833ee5e42e7c5fee610453ae3852a/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=52dde66770d833ee5e42e7c5fee610453ae3852a",
        "patch": "@@ -79,16 +79,20 @@ void RPCTypeCheck(const UniValue& params,\n             break;\n \n         const UniValue& v = params[i];\n-        if (!((v.type() == t) || (fAllowNull && (v.isNull()))))\n-        {\n-            string err = strprintf(\"Expected type %s, got %s\",\n-                                   uvTypeName(t), uvTypeName(v.type()));\n-            throw JSONRPCError(RPC_TYPE_ERROR, err);\n+        if (!(fAllowNull && v.isNull())) {\n+            RPCTypeCheckArgument(v, t);\n         }\n         i++;\n     }\n }\n \n+void RPCTypeCheckArgument(const UniValue& value, UniValue::VType typeExpected)\n+{\n+    if (value.type() != typeExpected) {\n+        throw JSONRPCError(RPC_TYPE_ERROR, strprintf(\"Expected type %s, got %s\", uvTypeName(typeExpected), uvTypeName(value.type())));\n+    }\n+}\n+\n void RPCTypeCheckObj(const UniValue& o,\n     const map<string, UniValueType>& typesExpected,\n     bool fAllowNull,"
      },
      {
        "sha": "52f82866dc0c25967ac6039af62056847d355897",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52dde66770d833ee5e42e7c5fee610453ae3852a/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52dde66770d833ee5e42e7c5fee610453ae3852a/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=52dde66770d833ee5e42e7c5fee610453ae3852a",
        "patch": "@@ -78,6 +78,11 @@ bool RPCIsInWarmup(std::string *statusOut);\n void RPCTypeCheck(const UniValue& params,\n                   const std::list<UniValue::VType>& typesExpected, bool fAllowNull=false);\n \n+/**\n+ * Type-check one argument; throws JSONRPCError if wrong type given.\n+ */\n+void RPCTypeCheckArgument(const UniValue& value, UniValue::VType typeExpected);\n+\n /*\n   Check for expected keys/value types in an Object.\n */"
      },
      {
        "sha": "ffe0827befc2dfe24aa372c7983148f17f84c703",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 9,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52dde66770d833ee5e42e7c5fee610453ae3852a/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52dde66770d833ee5e42e7c5fee610453ae3852a/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=52dde66770d833ee5e42e7c5fee610453ae3852a",
        "patch": "@@ -2350,9 +2350,9 @@ UniValue listunspent(const JSONRPCRequest& request)\n     if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (request.fHelp || request.params.size() > 3)\n+    if (request.fHelp || request.params.size() > 4)\n         throw runtime_error(\n-            \"listunspent ( minconf maxconf  [\\\"addresses\\\",...] )\\n\"\n+            \"listunspent ( minconf maxconf  [\\\"addresses\\\",...] [include_unsafe] )\\n\"\n             \"\\nReturns array of unspent transaction outputs\\n\"\n             \"with between minconf and maxconf (inclusive) confirmations.\\n\"\n             \"Optionally filter to only include txouts paid to specified addresses.\\n\"\n@@ -2364,6 +2364,10 @@ UniValue listunspent(const JSONRPCRequest& request)\n             \"      \\\"address\\\"   (string) bitcoin address\\n\"\n             \"      ,...\\n\"\n             \"    ]\\n\"\n+            \"4. include_unsafe (bool, optional, default=true) Include outputs that are not safe to spend\\n\"\n+            \"                  because they come from unconfirmed untrusted transactions or unconfirmed\\n\"\n+            \"                  replacement transactions (cases where we are less sure that a conflicting\\n\"\n+            \"                  transaction won't be mined).\\n\"\n             \"\\nResult\\n\"\n             \"[                   (array of json object)\\n\"\n             \"  {\\n\"\n@@ -2387,18 +2391,21 @@ UniValue listunspent(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"listunspent\", \"6, 9999999 \\\"[\\\\\\\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\\\\\",\\\\\\\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\\\\\"]\\\"\")\n         );\n \n-    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM)(UniValue::VNUM)(UniValue::VARR));\n-\n     int nMinDepth = 1;\n-    if (request.params.size() > 0)\n+    if (request.params.size() > 0 && !request.params[0].isNull()) {\n+        RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n         nMinDepth = request.params[0].get_int();\n+    }\n \n     int nMaxDepth = 9999999;\n-    if (request.params.size() > 1)\n+    if (request.params.size() > 1 && !request.params[1].isNull()) {\n+        RPCTypeCheckArgument(request.params[1], UniValue::VNUM);\n         nMaxDepth = request.params[1].get_int();\n+    }\n \n     set<CBitcoinAddress> setAddress;\n-    if (request.params.size() > 2) {\n+    if (request.params.size() > 2 && !request.params[2].isNull()) {\n+        RPCTypeCheckArgument(request.params[2], UniValue::VARR);\n         UniValue inputs = request.params[2].get_array();\n         for (unsigned int idx = 0; idx < inputs.size(); idx++) {\n             const UniValue& input = inputs[idx];\n@@ -2411,11 +2418,17 @@ UniValue listunspent(const JSONRPCRequest& request)\n         }\n     }\n \n+    bool include_unsafe = true;\n+    if (request.params.size() > 3 && !request.params[3].isNull()) {\n+        RPCTypeCheckArgument(request.params[3], UniValue::VBOOL);\n+        include_unsafe = request.params[3].get_bool();\n+    }\n+\n     UniValue results(UniValue::VARR);\n     vector<COutput> vecOutputs;\n     assert(pwalletMain != NULL);\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n-    pwalletMain->AvailableCoins(vecOutputs, false, NULL, true);\n+    pwalletMain->AvailableCoins(vecOutputs, !include_unsafe, NULL, true);\n     BOOST_FOREACH(const COutput& out, vecOutputs) {\n         if (out.nDepth < nMinDepth || out.nDepth > nMaxDepth)\n             continue;\n@@ -2629,7 +2642,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"listreceivedbyaddress\",    &listreceivedbyaddress,    false,  {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n     { \"wallet\",             \"listsinceblock\",           &listsinceblock,           false,  {\"blockhash\",\"target_confirmations\",\"include_watchonly\"} },\n     { \"wallet\",             \"listtransactions\",         &listtransactions,         false,  {\"account\",\"count\",\"skip\",\"include_watchonly\"} },\n-    { \"wallet\",             \"listunspent\",              &listunspent,              false,  {\"minconf\",\"maxconf\",\"addresses\"} },\n+    { \"wallet\",             \"listunspent\",              &listunspent,              false,  {\"minconf\",\"maxconf\",\"addresses\",\"include_unsafe\"} },\n     { \"wallet\",             \"lockunspent\",              &lockunspent,              true,   {\"unlock\",\"transactions\"} },\n     { \"wallet\",             \"move\",                     &movecmd,                  false,  {\"fromaccount\",\"toaccount\",\"amount\",\"minconf\",\"comment\"} },\n     { \"wallet\",             \"sendfrom\",                 &sendfrom,                 false,  {\"fromaccount\",\"toaddress\",\"amount\",\"minconf\",\"comment\",\"comment_to\"} },"
      }
    ]
  },
  {
    "sha": "cc0243ad32cee1cc9faab317364b889beaf07647",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYzAyNDNhZDMyY2VlMWNjOWZhYWIzMTczNjRiODg5YmVhZjA3NjQ3",
    "commit": {
      "author": {
        "name": "mrbandrews",
        "email": "bandrewsny@gmail.com",
        "date": "2016-12-09T18:45:27Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-01-19T16:29:29Z"
      },
      "message": "[RPC] bumpfee\n\nThis command allows a user to increase the fee on a wallet transaction T, creating a \"bumper\" transaction B.\nT must signal that it is BIP-125 replaceable.\nT's change output is decremented to pay the additional fee.  (B will not add inputs to T.)\nT cannot have any descendant transactions.\nOnce B bumps T, neither T nor B's outputs can be spent until either T or (more likely) B is mined.\n\nIncludes code by @jonasschnelli and @ryanofsky",
      "tree": {
        "sha": "4b2bf04e18d2900823c5c9d1d779410eb08d8f0b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4b2bf04e18d2900823c5c9d1d779410eb08d8f0b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc0243ad32cee1cc9faab317364b889beaf07647",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc0243ad32cee1cc9faab317364b889beaf07647",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cc0243ad32cee1cc9faab317364b889beaf07647",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc0243ad32cee1cc9faab317364b889beaf07647/comments",
    "author": {
      "login": "mrbandrews",
      "id": 7504522,
      "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mrbandrews",
      "html_url": "https://github.com/mrbandrews",
      "followers_url": "https://api.github.com/users/mrbandrews/followers",
      "following_url": "https://api.github.com/users/mrbandrews/following{/other_user}",
      "gists_url": "https://api.github.com/users/mrbandrews/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mrbandrews/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
      "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
      "repos_url": "https://api.github.com/users/mrbandrews/repos",
      "events_url": "https://api.github.com/users/mrbandrews/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "52dde66770d833ee5e42e7c5fee610453ae3852a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52dde66770d833ee5e42e7c5fee610453ae3852a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/52dde66770d833ee5e42e7c5fee610453ae3852a"
      }
    ],
    "stats": {
      "total": 650,
      "additions": 650,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c87d3c71278cd39b9f8cb8e292d3d9f9f52ed164",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc0243ad32cee1cc9faab317364b889beaf07647/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc0243ad32cee1cc9faab317364b889beaf07647/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=cc0243ad32cee1cc9faab317364b889beaf07647",
        "patch": "@@ -151,6 +151,7 @@\n     'signmessages.py',\n     'nulldummy.py',\n     'import-rescan.py',\n+    'bumpfee.py',\n     'rpcnamedargs.py',\n ]\n if ENABLE_ZMQ:"
      },
      {
        "sha": "0ebd79f7f32ef902106db0d8a0e957ed1e2dc2f3",
        "filename": "qa/rpc-tests/bumpfee.py",
        "status": "added",
        "additions": 317,
        "deletions": 0,
        "changes": 317,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc0243ad32cee1cc9faab317364b889beaf07647/qa/rpc-tests/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc0243ad32cee1cc9faab317364b889beaf07647/qa/rpc-tests/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bumpfee.py?ref=cc0243ad32cee1cc9faab317364b889beaf07647",
        "patch": "@@ -0,0 +1,317 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from segwit import send_to_witness\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework import blocktools\n+from test_framework.mininode import CTransaction\n+from test_framework.util import *\n+from test_framework.util import *\n+\n+import io\n+import time\n+\n+# Sequence number that is BIP 125 opt-in and BIP 68-compliant\n+BIP125_SEQUENCE_NUMBER = 0xfffffffd\n+\n+WALLET_PASSPHRASE = \"test\"\n+WALLET_PASSPHRASE_TIMEOUT = 3600\n+\n+\n+class BumpFeeTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+\n+    def setup_network(self, split=False):\n+        extra_args = [[\"-debug\", \"-prematurewitness\", \"-walletprematurewitness\", \"-walletrbf={}\".format(i)]\n+                      for i in range(self.num_nodes)]\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+\n+        # Encrypt wallet for test_locked_wallet_fails test\n+        self.nodes[1].encryptwallet(WALLET_PASSPHRASE)\n+        bitcoind_processes[1].wait()\n+        self.nodes[1] = start_node(1, self.options.tmpdir, extra_args[1])\n+        self.nodes[1].walletpassphrase(WALLET_PASSPHRASE, WALLET_PASSPHRASE_TIMEOUT)\n+\n+        connect_nodes_bi(self.nodes, 0, 1)\n+        self.is_network_split = False\n+        self.sync_all()\n+\n+    def run_test(self):\n+        peer_node, rbf_node = self.nodes\n+        rbf_node_address = rbf_node.getnewaddress()\n+\n+        # fund rbf node with 10 coins of 0.001 btc (100,000 satoshis)\n+        print(\"Mining blocks...\")\n+        peer_node.generate(110)\n+        self.sync_all()\n+        for i in range(25):\n+            peer_node.sendtoaddress(rbf_node_address, 0.001)\n+        self.sync_all()\n+        peer_node.generate(1)\n+        self.sync_all()\n+        assert_equal(rbf_node.getbalance(), Decimal(\"0.025\"))\n+\n+        print(\"Running tests\")\n+        dest_address = peer_node.getnewaddress()\n+        test_small_output_fails(rbf_node, dest_address)\n+        test_dust_to_fee(rbf_node, dest_address)\n+        test_simple_bumpfee_succeeds(rbf_node, peer_node, dest_address)\n+        test_segwit_bumpfee_succeeds(rbf_node, dest_address)\n+        test_nonrbf_bumpfee_fails(peer_node, dest_address)\n+        test_notmine_bumpfee_fails(rbf_node, peer_node, dest_address)\n+        test_bumpfee_with_descendant_fails(rbf_node, rbf_node_address, dest_address)\n+        test_settxfee(rbf_node, dest_address)\n+        test_rebumping(rbf_node, dest_address)\n+        test_rebumping_not_replaceable(rbf_node, dest_address)\n+        test_unconfirmed_not_spendable(rbf_node, rbf_node_address)\n+        test_locked_wallet_fails(rbf_node, dest_address)\n+        print(\"Success\")\n+\n+\n+def test_simple_bumpfee_succeeds(rbf_node, peer_node, dest_address):\n+    rbfid = create_fund_sign_send(rbf_node, {dest_address: 0.00090000})\n+    rbftx = rbf_node.gettransaction(rbfid)\n+    sync_mempools((rbf_node, peer_node))\n+    assert rbfid in rbf_node.getrawmempool() and rbfid in peer_node.getrawmempool()\n+    bumped_tx = rbf_node.bumpfee(rbfid)\n+    assert bumped_tx[\"fee\"] - abs(rbftx[\"fee\"]) > 0\n+    # check that bumped_tx propogates, original tx was evicted and has a wallet conflict\n+    sync_mempools((rbf_node, peer_node))\n+    assert bumped_tx[\"txid\"] in rbf_node.getrawmempool()\n+    assert bumped_tx[\"txid\"] in peer_node.getrawmempool()\n+    assert rbfid not in rbf_node.getrawmempool()\n+    assert rbfid not in peer_node.getrawmempool()\n+    oldwtx = rbf_node.gettransaction(rbfid)\n+    assert len(oldwtx[\"walletconflicts\"]) > 0\n+    # check wallet transaction replaces and replaced_by values\n+    bumpedwtx = rbf_node.gettransaction(bumped_tx[\"txid\"])\n+    assert_equal(oldwtx[\"replaced_by_txid\"], bumped_tx[\"txid\"])\n+    assert_equal(bumpedwtx[\"replaces_txid\"], rbfid)\n+\n+\n+def test_segwit_bumpfee_succeeds(rbf_node, dest_address):\n+    # Create a transaction with segwit output, then create an RBF transaction\n+    # which spends it, and make sure bumpfee can be called on it.\n+\n+    segwit_in = next(u for u in rbf_node.listunspent() if u[\"amount\"] == Decimal(\"0.001\"))\n+    segwit_out = rbf_node.validateaddress(rbf_node.getnewaddress())\n+    rbf_node.addwitnessaddress(segwit_out[\"address\"])\n+    segwitid = send_to_witness(\n+        version=0,\n+        node=rbf_node,\n+        utxo=segwit_in,\n+        pubkey=segwit_out[\"pubkey\"],\n+        encode_p2sh=False,\n+        amount=Decimal(\"0.0009\"),\n+        sign=True)\n+\n+    rbfraw = rbf_node.createrawtransaction([{\n+        'txid': segwitid,\n+        'vout': 0,\n+        \"sequence\": BIP125_SEQUENCE_NUMBER\n+    }], {dest_address: Decimal(\"0.0005\"),\n+         get_change_address(rbf_node): Decimal(\"0.0003\")})\n+    rbfsigned = rbf_node.signrawtransaction(rbfraw)\n+    rbfid = rbf_node.sendrawtransaction(rbfsigned[\"hex\"])\n+    assert rbfid in rbf_node.getrawmempool()\n+\n+    bumped_tx = rbf_node.bumpfee(rbfid)\n+    assert bumped_tx[\"txid\"] in rbf_node.getrawmempool()\n+    assert rbfid not in rbf_node.getrawmempool()\n+\n+\n+def test_nonrbf_bumpfee_fails(peer_node, dest_address):\n+    # cannot replace a non RBF transaction (from node which did not enable RBF)\n+    not_rbfid = create_fund_sign_send(peer_node, {dest_address: 0.00090000})\n+    assert_raises_message(JSONRPCException, \"not BIP 125 replaceable\", peer_node.bumpfee, not_rbfid)\n+\n+\n+def test_notmine_bumpfee_fails(rbf_node, peer_node, dest_address):\n+    # cannot bump fee unless the tx has only inputs that we own.\n+    # here, the rbftx has a peer_node coin and then adds a rbf_node input\n+    # Note that this test depends upon the RPC code checking input ownership prior to change outputs\n+    # (since it can't use fundrawtransaction, it lacks a proper change output)\n+    utxos = [node.listunspent()[-1] for node in (rbf_node, peer_node)]\n+    inputs = [{\n+        \"txid\": utxo[\"txid\"],\n+        \"vout\": utxo[\"vout\"],\n+        \"address\": utxo[\"address\"],\n+        \"sequence\": BIP125_SEQUENCE_NUMBER\n+    } for utxo in utxos]\n+    output_val = sum(utxo[\"amount\"] for utxo in utxos) - Decimal(\"0.001\")\n+    rawtx = rbf_node.createrawtransaction(inputs, {dest_address: output_val})\n+    signedtx = rbf_node.signrawtransaction(rawtx)\n+    signedtx = peer_node.signrawtransaction(signedtx[\"hex\"])\n+    rbfid = rbf_node.sendrawtransaction(signedtx[\"hex\"])\n+    assert_raises_message(JSONRPCException, \"Transaction contains inputs that don't belong to this wallet\",\n+                          rbf_node.bumpfee, rbfid)\n+\n+\n+def test_bumpfee_with_descendant_fails(rbf_node, rbf_node_address, dest_address):\n+    # cannot bump fee if the transaction has a descendant\n+    # parent is send-to-self, so we don't have to check which output is change when creating the child tx\n+    parent_id = create_fund_sign_send(rbf_node, {rbf_node_address: 0.00050000})\n+    tx = rbf_node.createrawtransaction([{\"txid\": parent_id, \"vout\": 0}], {dest_address: 0.00020000})\n+    tx = rbf_node.signrawtransaction(tx)\n+    txid = rbf_node.sendrawtransaction(tx[\"hex\"])\n+    assert_raises_message(JSONRPCException, \"Transaction has descendants in the wallet\", rbf_node.bumpfee, parent_id)\n+\n+\n+def test_small_output_fails(rbf_node, dest_address):\n+    # cannot bump fee with a too-small output\n+    rbfid = spend_one_input(rbf_node,\n+                            Decimal(\"0.00100000\"),\n+                            {dest_address: 0.00080000,\n+                             get_change_address(rbf_node): Decimal(\"0.00010000\")})\n+    rbf_node.bumpfee(rbfid, {\"totalFee\": 20000})\n+\n+    rbfid = spend_one_input(rbf_node,\n+                            Decimal(\"0.00100000\"),\n+                            {dest_address: 0.00080000,\n+                             get_change_address(rbf_node): Decimal(\"0.00010000\")})\n+    assert_raises_message(JSONRPCException, \"Change output is too small\", rbf_node.bumpfee, rbfid, {\"totalFee\": 20001})\n+\n+\n+def test_dust_to_fee(rbf_node, dest_address):\n+    # check that if output is reduced to dust, it will be converted to fee\n+    # the bumped tx sets fee=9900, but it converts to 10,000\n+    rbfid = spend_one_input(rbf_node,\n+                            Decimal(\"0.00100000\"),\n+                            {dest_address: 0.00080000,\n+                             get_change_address(rbf_node): Decimal(\"0.00010000\")})\n+    fulltx = rbf_node.getrawtransaction(rbfid, 1)\n+    bumped_tx = rbf_node.bumpfee(rbfid, {\"totalFee\": 19900})\n+    full_bumped_tx = rbf_node.getrawtransaction(bumped_tx[\"txid\"], 1)\n+    assert_equal(bumped_tx[\"fee\"], Decimal(\"0.00020000\"))\n+    assert_equal(len(fulltx[\"vout\"]), 2)\n+    assert_equal(len(full_bumped_tx[\"vout\"]), 1)  #change output is eliminated\n+\n+\n+def test_settxfee(rbf_node, dest_address):\n+    # check that bumpfee reacts correctly to the use of settxfee (paytxfee)\n+    # increase feerate by 2.5x, test that fee increased at least 2x\n+    rbf_node.settxfee(Decimal(\"0.00001000\"))\n+    rbfid = create_fund_sign_send(rbf_node, {dest_address: 0.00090000})\n+    rbftx = rbf_node.gettransaction(rbfid)\n+    rbf_node.settxfee(Decimal(\"0.00002500\"))\n+    bumped_tx = rbf_node.bumpfee(rbfid)\n+    assert bumped_tx[\"fee\"] > 2 * abs(rbftx[\"fee\"])\n+    rbf_node.settxfee(Decimal(\"0.00000000\"))  # unset paytxfee\n+\n+\n+def test_rebumping(rbf_node, dest_address):\n+    # check that re-bumping the original tx fails, but bumping the bumper succeeds\n+    rbf_node.settxfee(Decimal(\"0.00001000\"))\n+    rbfid = create_fund_sign_send(rbf_node, {dest_address: 0.00090000})\n+    bumped = rbf_node.bumpfee(rbfid, {\"totalFee\": 1000})\n+    assert_raises_message(JSONRPCException, \"already bumped\", rbf_node.bumpfee, rbfid, {\"totalFee\": 2000})\n+    rbf_node.bumpfee(bumped[\"txid\"], {\"totalFee\": 2000})\n+\n+\n+def test_rebumping_not_replaceable(rbf_node, dest_address):\n+    # check that re-bumping a non-replaceable bump tx fails\n+    rbfid = create_fund_sign_send(rbf_node, {dest_address: 0.00090000})\n+    bumped = rbf_node.bumpfee(rbfid, {\"totalFee\": 10000, \"replaceable\": False})\n+    assert_raises_message(JSONRPCException, \"Transaction is not BIP 125 replaceable\", rbf_node.bumpfee, bumped[\"txid\"],\n+                          {\"totalFee\": 20000})\n+\n+\n+def test_unconfirmed_not_spendable(rbf_node, rbf_node_address):\n+    # check that unconfirmed outputs from bumped transactions are not spendable\n+    rbfid = create_fund_sign_send(rbf_node, {rbf_node_address: 0.00090000})\n+    rbftx = rbf_node.gettransaction(rbfid)[\"hex\"]\n+    assert rbfid in rbf_node.getrawmempool()\n+    bumpid = rbf_node.bumpfee(rbfid)[\"txid\"]\n+    assert bumpid in rbf_node.getrawmempool()\n+    assert rbfid not in rbf_node.getrawmempool()\n+\n+    # check that outputs from the bump transaction are not spendable\n+    # due to the replaces_txid check in CWallet::AvailableCoins\n+    assert_equal([t for t in rbf_node.listunspent(minconf=0, include_unsafe=False) if t[\"txid\"] == bumpid], [])\n+\n+    # submit a block with the rbf tx to clear the bump tx out of the mempool,\n+    # then call abandon to make sure the wallet doesn't attempt to resubmit the\n+    # bump tx, then invalidate the block so the rbf tx will be put back in the\n+    # mempool. this makes it possible to check whether the rbf tx outputs are\n+    # spendable before the rbf tx is confirmed.\n+    block = submit_block_with_tx(rbf_node, rbftx)\n+    rbf_node.abandontransaction(bumpid)\n+    rbf_node.invalidateblock(block.hash)\n+    assert bumpid not in rbf_node.getrawmempool()\n+    assert rbfid in rbf_node.getrawmempool()\n+\n+    # check that outputs from the rbf tx are not spendable before the\n+    # transaction is confirmed, due to the replaced_by_txid check in\n+    # CWallet::AvailableCoins\n+    assert_equal([t for t in rbf_node.listunspent(minconf=0, include_unsafe=False) if t[\"txid\"] == rbfid], [])\n+\n+    # check that the main output from the rbf tx is spendable after confirmed\n+    rbf_node.generate(1)\n+    assert_equal(\n+        sum(1 for t in rbf_node.listunspent(minconf=0, include_unsafe=False)\n+            if t[\"txid\"] == rbfid and t[\"address\"] == rbf_node_address and t[\"spendable\"]), 1)\n+\n+\n+def test_locked_wallet_fails(rbf_node, dest_address):\n+    rbfid = create_fund_sign_send(rbf_node, {dest_address: 0.00090000})\n+    rbf_node.walletlock()\n+    assert_raises_message(JSONRPCException, \"Please enter the wallet passphrase with walletpassphrase first.\",\n+                          rbf_node.bumpfee, rbfid)\n+\n+\n+def create_fund_sign_send(node, outputs):\n+    rawtx = node.createrawtransaction([], outputs)\n+    fundtx = node.fundrawtransaction(rawtx)\n+    signedtx = node.signrawtransaction(fundtx[\"hex\"])\n+    txid = node.sendrawtransaction(signedtx[\"hex\"])\n+    return txid\n+\n+\n+def spend_one_input(node, input_amount, outputs):\n+    input = dict(sequence=BIP125_SEQUENCE_NUMBER, **next(u for u in node.listunspent() if u[\"amount\"] == input_amount))\n+    rawtx = node.createrawtransaction([input], outputs)\n+    signedtx = node.signrawtransaction(rawtx)\n+    txid = node.sendrawtransaction(signedtx[\"hex\"])\n+    return txid\n+\n+\n+def get_change_address(node):\n+    \"\"\"Get a wallet change address.\n+\n+    There is no wallet RPC to access unused change addresses, so this creates a\n+    dummy transaction, calls fundrawtransaction to give add an input and change\n+    output, then returns the change address.\"\"\"\n+    dest_address = node.getnewaddress()\n+    dest_amount = Decimal(\"0.00012345\")\n+    rawtx = node.createrawtransaction([], {dest_address: dest_amount})\n+    fundtx = node.fundrawtransaction(rawtx)\n+    info = node.decoderawtransaction(fundtx[\"hex\"])\n+    return next(address for out in info[\"vout\"]\n+                if out[\"value\"] != dest_amount for address in out[\"scriptPubKey\"][\"addresses\"])\n+\n+\n+def submit_block_with_tx(node, tx):\n+    ctx = CTransaction()\n+    ctx.deserialize(io.BytesIO(hex_str_to_bytes(tx)))\n+\n+    tip = node.getbestblockhash()\n+    height = node.getblockcount() + 1\n+    block_time = node.getblockheader(tip)[\"mediantime\"] + 1\n+    block = blocktools.create_block(int(tip, 16), blocktools.create_coinbase(height), block_time)\n+    block.vtx.append(ctx)\n+    block.rehash()\n+    block.hashMerkleRoot = block.calc_merkle_root()\n+    block.solve()\n+    error = node.submitblock(bytes_to_hex_str(block.serialize(True)))\n+    if error is not None:\n+        raise Exception(error)\n+    return block\n+\n+\n+if __name__ == \"__main__\":\n+    BumpFeeTest().main()"
      },
      {
        "sha": "28d24b84fd76f793b916362f9d0c249b01f99e9a",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc0243ad32cee1cc9faab317364b889beaf07647/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc0243ad32cee1cc9faab317364b889beaf07647/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=cc0243ad32cee1cc9faab317364b889beaf07647",
        "patch": "@@ -116,6 +116,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"setnetworkactive\", 0, \"state\" },\n     { \"getmempoolancestors\", 1, \"verbose\" },\n     { \"getmempooldescendants\", 1, \"verbose\" },\n+    { \"bumpfee\", 1, \"options\" },\n     // Echo with conversion (For testing only)\n     { \"echojson\", 0, \"arg0\" },\n     { \"echojson\", 1, \"arg1\" },"
      },
      {
        "sha": "dc2c6d292e6845e5364e403bdb7d5cbda919e8f6",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 258,
        "deletions": 0,
        "changes": 258,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc0243ad32cee1cc9faab317364b889beaf07647/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc0243ad32cee1cc9faab317364b889beaf07647/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=cc0243ad32cee1cc9faab317364b889beaf07647",
        "patch": "@@ -11,8 +11,10 @@\n #include \"init.h\"\n #include \"validation.h\"\n #include \"net.h\"\n+#include \"policy/policy.h\"\n #include \"policy/rbf.h\"\n #include \"rpc/server.h\"\n+#include \"script/sign.h\"\n #include \"timedata.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n@@ -2595,6 +2597,261 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n+            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee (relay fee amount returned\\n\"\n+            \"by getnetworkinfo RPC) and to enter the node's mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. txid                  (string, required) The txid to be bumped\\n\"\n+            \"2. options               (object, optional)\\n\"\n+            \"   {\\n\"\n+            \"     \\\"confTarget\\\"        (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"     \\\"totalFee\\\"          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis.\\n\"\n+            \"                         In rare cases, the actual fee paid might be slightly higher than the specified\\n\"\n+            \"                         totalFee if the tx change output has to be removed because it is too close to\\n\"\n+            \"                         the dust threshold.\\n\"\n+            \"     \\\"replaceable\\\"       (boolean, optional, default true) Whether the new transaction should still be\\n\"\n+            \"                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n+            \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n+            \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n+            \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n+            \"                         still be replacable in practice, for example if it has unconfirmed ancestors which\\n\"\n+            \"                         are replaceable).\\n\"\n+            \"   }\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+            \"  \\\"oldfee\\\":  n,         (numeric) Fee of the replaced transaction\\n\"\n+            \"  \\\"fee\\\":     n,         (numeric) Fee of the new transaction\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n+            HelpExampleCli(\"bumpfee\", \"<txid>\"));\n+    }\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+\n+    // retrieve the original tx from the wallet\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    EnsureWalletIsUnlocked();\n+    if (!pwalletMain->mapWallet.count(hash)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    }\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (pwalletMain->HasWalletSpend(hash)) {\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+    }\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+        }\n+    }\n+\n+    if (wtx.GetDepthInMainChain() != 0) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+    }\n+\n+    if (!SignalsOptInRBF(wtx)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+    }\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\")) {\n+        throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+    }\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+    }\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i = 0; i < wtx.tx->vout.size(); ++i) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1) {\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            }\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1) {\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+    }\n+\n+    // optional parameters\n+    bool specifiedConfirmTarget = false;\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    bool replaceable = true;\n+    if (request.params.size() > 1) {\n+        UniValue options = request.params[1];\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"replaceable\", UniValueType(UniValue::VBOOL)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\") && options.exists(\"totalFee\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"confTarget and totalFee options should not both be set. Please provide either a confirmation target for fee estimation or an explicit total fee for the transaction.\");\n+        } else if (options.exists(\"confTarget\")) {\n+            specifiedConfirmTarget = true;\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) { // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+            }\n+        } else if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int64();\n+            if (totalFee <= 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            } else if (totalFee > maxTxFee) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than maxTxFee)\");\n+            }\n+        }\n+\n+        if (options.exists(\"replaceable\")) {\n+            replaceable = options[\"replaceable\"].get_bool();\n+        }\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n+    const int64_t maxNewTxSize = txSize + wtx.tx->vin.size();\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+    CAmount nNewFee;\n+    CFeeRate nNewFeeRate;\n+\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + minRelayTxFee.GetFee(maxNewTxSize);\n+        if (totalFee < minTotalFee) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid totalFee, must be at least %s (oldFee %s + relayFee %s)\", FormatMoney(minTotalFee), nOldFeeRate.GetFee(maxNewTxSize), minRelayTxFee.GetFee(maxNewTxSize)));\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, maxNewTxSize);\n+    } else {\n+        // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+        if (!specifiedConfirmTarget && payTxFee.GetFeePerK() != 0) {\n+            nNewFeeRate = payTxFee;\n+        } else {\n+            nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget);\n+        }\n+        if (nNewFeeRate.GetFeePerK() == 0) {\n+            nNewFeeRate = CWallet::fallbackFee;\n+        }\n+\n+        // new fee rate must be at least old rate + minimum relay rate\n+        if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK()) {\n+            nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+        }\n+\n+        nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's minimum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n+    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n+        throw JSONRPCError(RPC_MISC_ERROR, strprintf(\"New fee rate (%s) is less than the minimum fee rate (%s) to get into the mempool. totalFee value should to be at least %s or settxfee value should be at least %s to add transaction.\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFee(maxNewTxSize)), FormatMoney(minMempoolFeeRate.GetFeePerK())));\n+    }\n+\n+    // Now modify the output to increase the fee.\n+    // If the output is not large enough to pay the fee, fail.\n+    CAmount nDelta = nNewFee - nOldFee;\n+    assert(nDelta > 0);\n+    CMutableTransaction tx(*(wtx.tx));\n+    CTxOut* poutput = &(tx.vout[nOutput]);\n+    if (poutput->nValue < nDelta) {\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Change output is too small to bump the fee\");\n+    }\n+\n+    // If the output would become dust, discard it (converting the dust to fee)\n+    poutput->nValue -= nDelta;\n+    if (poutput->nValue <= poutput->GetDustThreshold(::minRelayTxFee)) {\n+        LogPrint(\"rpc\", \"Bumping fee and discarding dust output\\n\");\n+        nNewFee += poutput->nValue;\n+        tx.vout.erase(tx.vout.begin() + nOutput);\n+    }\n+\n+    // Mark new tx not replaceable, if requested.\n+    if (!replaceable) {\n+        for (auto& input : tx.vin) {\n+            if (input.nSequence < 0xfffffffe) input.nSequence = 0xfffffffe;\n+        }\n+    }\n+\n+    // sign the new tx\n+    CTransaction txNewConst(tx);\n+    int nIn = 0;\n+    for (auto& input : tx.vin) {\n+        std::map<uint256, CWalletTx>::const_iterator mi = pwalletMain->mapWallet.find(input.prevout.hash);\n+        assert(mi != pwalletMain->mapWallet.end() && input.prevout.n < mi->second.tx->vout.size());\n+        const CScript& scriptPubKey = mi->second.tx->vout[input.prevout.n].scriptPubKey;\n+        const CAmount& amount = mi->second.tx->vout[input.prevout.n].nValue;\n+        SignatureData sigdata;\n+        if (!ProduceSignature(TransactionSignatureCreator(pwalletMain, &txNewConst, nIn, amount, SIGHASH_ALL), scriptPubKey, sigdata)) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Can't sign transaction.\");\n+        }\n+        UpdateTransaction(tx, nIn, sigdata);\n+        nIn++;\n+    }\n+\n+    // commit/broadcast the tx\n+    CReserveKey reservekey(pwalletMain);\n+    CWalletTx wtxBumped(pwalletMain, MakeTransactionRef(std::move(tx)));\n+    wtxBumped.mapValue[\"replaces_txid\"] = hash.ToString();\n+    CValidationState state;\n+    if (!pwalletMain->CommitTransaction(wtxBumped, reservekey, g_connman.get(), state) || !state.IsValid()) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Error: The transaction was rejected! Reason given: %s\", state.GetRejectReason()));\n+    }\n+\n+    // mark the original tx as bumped\n+    if (!pwalletMain->MarkReplaced(wtx.GetHash(), wtxBumped.GetHash())) {\n+        // TODO: see if JSON-RPC has a standard way of returning a response\n+        // along with an exception. It would be good to return information about\n+        // wtxBumped to the caller even if marking the original transaction\n+        // replaced does not succeed for some reason.\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Created new bumpfee transaction but could not mark the original transaction as replaced.\");\n+    }\n+\n+    UniValue result(UniValue::VOBJ);\n+    result.push_back(Pair(\"txid\", wtxBumped.GetHash().GetHex()));\n+    result.push_back(Pair(\"oldfee\", ValueFromAmount(nOldFee)));\n+    result.push_back(Pair(\"fee\", ValueFromAmount(nNewFee)));\n+\n+    return result;\n+}\n+\n extern UniValue dumpprivkey(const JSONRPCRequest& request); // in rpcdump.cpp\n extern UniValue importprivkey(const JSONRPCRequest& request);\n extern UniValue importaddress(const JSONRPCRequest& request);\n@@ -2614,6 +2871,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"addmultisigaddress\",       &addmultisigaddress,       true,   {\"nrequired\",\"keys\",\"account\"} },\n     { \"wallet\",             \"addwitnessaddress\",        &addwitnessaddress,        true,   {\"address\"} },\n     { \"wallet\",             \"backupwallet\",             &backupwallet,             true,   {\"destination\"} },\n+    { \"wallet\",             \"bumpfee\",                  &bumpfee,                  true,   {\"txid\", \"options\"} },\n     { \"wallet\",             \"dumpprivkey\",              &dumpprivkey,              true,   {\"address\"}  },\n     { \"wallet\",             \"dumpwallet\",               &dumpwallet,               true,   {\"filename\"} },\n     { \"wallet\",             \"encryptwallet\",            &encryptwallet,            true,   {\"passphrase\"} },"
      },
      {
        "sha": "c1e1f2d7ea52efdc89504e86e635255c500eba4f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 67,
        "deletions": 0,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc0243ad32cee1cc9faab317364b889beaf07647/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc0243ad32cee1cc9faab317364b889beaf07647/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=cc0243ad32cee1cc9faab317364b889beaf07647",
        "patch": "@@ -411,6 +411,13 @@ set<uint256> CWallet::GetConflicts(const uint256& txid) const\n     return result;\n }\n \n+bool CWallet::HasWalletSpend(const uint256& txid) const\n+{\n+    AssertLockHeld(cs_wallet);\n+    auto iter = mapTxSpends.lower_bound(COutPoint(txid, 0));\n+    return (iter != mapTxSpends.end() && iter->first.hash == txid);\n+}\n+\n void CWallet::Flush(bool shutdown)\n {\n     bitdb.Flush(shutdown);\n@@ -826,6 +833,35 @@ void CWallet::MarkDirty()\n     }\n }\n \n+bool CWallet::MarkReplaced(const uint256& originalHash, const uint256& newHash)\n+{\n+    LOCK(cs_wallet);\n+\n+    auto mi = mapWallet.find(originalHash);\n+\n+    // There is a bug if MarkReplaced is not called on an existing wallet transaction.\n+    assert(mi != mapWallet.end());\n+\n+    CWalletTx& wtx = (*mi).second;\n+\n+    // Ensure for now that we're not overwriting data\n+    assert(wtx.mapValue.count(\"replaced_by_txid\") == 0);\n+\n+    wtx.mapValue[\"replaced_by_txid\"] = newHash.ToString();\n+\n+    CWalletDB walletdb(strWalletFile, \"r+\");\n+\n+    bool success = true;\n+    if (!walletdb.WriteTx(wtx)) {\n+        LogPrintf(\"%s: Updating walletdb tx %s failed\", __func__, wtx.GetHash().ToString());\n+        success = false;\n+    }\n+\n+    NotifyTransactionChanged(this, originalHash, CT_UPDATED);\n+\n+    return success;\n+}\n+\n bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n {\n     LOCK(cs_wallet);\n@@ -1981,6 +2017,37 @@ void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const\n             if (nDepth == 0 && !pcoin->InMempool())\n                 continue;\n \n+            // We should not consider coins from transactions that are replacing\n+            // other transactions.\n+            //\n+            // Example: There is a transaction A which is replaced by bumpfee\n+            // transaction B. In this case, we want to prevent creation of\n+            // a transaction B' which spends an output of B.\n+            //\n+            // Reason: If transaction A were initially confirmed, transactions B\n+            // and B' would no longer be valid, so the user would have to create\n+            // a new transaction C to replace B'. However, in the case of a\n+            // one-block reorg, transactions B' and C might BOTH be accepted,\n+            // when the user only wanted one of them. Specifically, there could\n+            // be a 1-block reorg away from the chain where transactions A and C\n+            // were accepted to another chain where B, B', and C were all\n+            // accepted.\n+            if (nDepth == 0 && fOnlyConfirmed && pcoin->mapValue.count(\"replaces_txid\")) {\n+                continue;\n+            }\n+\n+            // Similarly, we should not consider coins from transactions that\n+            // have been replaced. In the example above, we would want to prevent\n+            // creation of a transaction A' spending an output of A, because if\n+            // transaction B were initially confirmed, conflicting with A and\n+            // A', we wouldn't want to the user to create a transaction D\n+            // intending to replace A', but potentially resulting in a scenario\n+            // where A, A', and D could all be accepted (instead of just B and\n+            // D, or just A and A' like the user would want).\n+            if (nDepth == 0 && fOnlyConfirmed && pcoin->mapValue.count(\"replaced_by_txid\")) {\n+                continue;\n+            }\n+\n             for (unsigned int i = 0; i < pcoin->tx->vout.size(); i++) {\n                 isminetype mine = IsMine(pcoin->tx->vout[i]);\n                 if (!(IsSpent(wtxid, i)) && mine != ISMINE_NO &&"
      },
      {
        "sha": "50c5025c24a266c3e3c82a79c8698ae224948f0d",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc0243ad32cee1cc9faab317364b889beaf07647/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc0243ad32cee1cc9faab317364b889beaf07647/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=cc0243ad32cee1cc9faab317364b889beaf07647",
        "patch": "@@ -891,6 +891,9 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     //! Get wallet transactions that conflict with given transaction (spend same outputs)\n     std::set<uint256> GetConflicts(const uint256& txid) const;\n \n+    //! Check if a given transaction has any of its outputs spent by another transaction in the wallet\n+    bool HasWalletSpend(const uint256& txid) const;\n+\n     //! Flush wallet (bitdb flush)\n     void Flush(bool shutdown=false);\n \n@@ -927,6 +930,9 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     /* Mark a transaction (and it in-wallet descendants) as abandoned so its inputs may be respent. */\n     bool AbandonTransaction(const uint256& hashTx);\n \n+    /** Mark a transaction as replaced by another transaction (e.g., BIP 125). */\n+    bool MarkReplaced(const uint256& originalHash, const uint256& newHash);\n+\n     /* Returns the wallets help message */\n     static std::string GetWalletHelpString(bool showDebug);\n "
      }
    ]
  },
  {
    "sha": "989989354b68d3954fe2742b96c53eeb2e8a7670",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ODk5ODkzNTRiNjhkMzk1NGZlMjc0MmI5NmM1M2VlYjJlOGE3Njcw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-19T16:03:36Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-19T16:31:05Z"
      },
      "message": "Move wallet callbacks into cs_main (this effectively reverts #7946)",
      "tree": {
        "sha": "a687c5a58422f869ca8b7449b709ea9f94f1906f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a687c5a58422f869ca8b7449b709ea9f94f1906f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/989989354b68d3954fe2742b96c53eeb2e8a7670",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/989989354b68d3954fe2742b96c53eeb2e8a7670",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/989989354b68d3954fe2742b96c53eeb2e8a7670",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/989989354b68d3954fe2742b96c53eeb2e8a7670/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "054d664215ca8d5f17d8aadbfc5b78a8dcd5115c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/054d664215ca8d5f17d8aadbfc5b78a8dcd5115c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/054d664215ca8d5f17d8aadbfc5b78a8dcd5115c"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 8,
      "deletions": 9
    },
    "files": [
      {
        "sha": "6bc20edd04b24e1a6a55c4d2e244179b06fe6150",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/989989354b68d3954fe2742b96c53eeb2e8a7670/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/989989354b68d3954fe2742b96c53eeb2e8a7670/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=989989354b68d3954fe2742b96c53eeb2e8a7670",
        "patch": "@@ -2473,20 +2473,19 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n             pindexNewTip = chainActive.Tip();\n             pindexFork = chainActive.FindFork(pindexOldTip);\n             fInitialDownload = IsInitialBlockDownload();\n+\n+            // throw all transactions though the signal-interface\n+            for (const auto& pair : connectTrace.blocksConnected) {\n+                assert(pair.second);\n+                const CBlock& block = *(pair.second);\n+                for (unsigned int i = 0; i < block.vtx.size(); i++)\n+                    GetMainSignals().SyncTransaction(*block.vtx[i], pair.first, i);\n+            }\n         }\n         // When we reach this point, we switched to a new tip (stored in pindexNewTip).\n \n         // Notifications/callbacks that can run without cs_main\n \n-        // throw all transactions though the signal-interface\n-        // while _not_ holding the cs_main lock\n-        for (const auto& pair : connectTrace.blocksConnected) {\n-            assert(pair.second);\n-            const CBlock& block = *(pair.second);\n-            for (unsigned int i = 0; i < block.vtx.size(); i++)\n-                GetMainSignals().SyncTransaction(*block.vtx[i], pair.first, i);\n-        }\n-\n         // Notify external listeners about the new tip.\n         GetMainSignals().UpdatedBlockTip(pindexNewTip, pindexFork, fInitialDownload);\n "
      }
    ]
  },
  {
    "sha": "2ef52d3cf11bd3b1117da8a7affcf9fcfd133767",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZWY1MmQzY2YxMWJkM2IxMTE3ZGE4YTdhZmZjZjlmY2ZkMTMzNzY3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-19T18:59:19Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-19T18:59:24Z"
      },
      "message": "Merge #8456: [RPC] Simplified bumpfee command.\n\ncc0243a [RPC] bumpfee (mrbandrews)\n52dde66 [wallet] Add include_unsafe argument to listunspent RPC (Russell Yanofsky)\n766e8a4 [wallet] Add IsAllFromMe: true if all inputs are from wallet (Suhas Daftuar)",
      "tree": {
        "sha": "fc1634d32639bde0be2883125fd22adbb5511394",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fc1634d32639bde0be2883125fd22adbb5511394"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ef52d3cf11bd3b1117da8a7affcf9fcfd133767",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYgQyMAAoJEHSBCwEjRsmmmqgIAKX65mxhW2zOFauNnKUTwkMO\nNYzs+/3pQ5wCz+Eg1HGPHXjKWfUetnKN/8ThL2/0fkuFZZlOh4zlXINYAE87YmKr\n5MiS4PuNyY0aBjCxIMteh2Hte1OOxCbMMUl5rLXUoqzBvJs5ZPTTGa1EU4AQpNMS\nLXfixT7XVUFHZ+gOfa8+t86lUy+zqWyIgE2ZTRTY21YnqhoNxMRTSfM0jcOz/JfH\nAWL/DkJiuAbPSjzUwWig/lgJbjTyqntn/CzZauV4ihnJwChEt79llLdw8OTZR8Gx\n8l6SRRO5aUkEcEkjUc0QLKPkJ7/AZ6u+E/hC5nK23G41WHAOcqWlD2YE4hv258o=\n=/eXS\n-----END PGP SIGNATURE-----",
        "payload": "tree fc1634d32639bde0be2883125fd22adbb5511394\nparent 054d664215ca8d5f17d8aadbfc5b78a8dcd5115c\nparent cc0243ad32cee1cc9faab317364b889beaf07647\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1484852359 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1484852364 +0100\n\nMerge #8456: [RPC] Simplified bumpfee command.\n\ncc0243a [RPC] bumpfee (mrbandrews)\n52dde66 [wallet] Add include_unsafe argument to listunspent RPC (Russell Yanofsky)\n766e8a4 [wallet] Add IsAllFromMe: true if all inputs are from wallet (Suhas Daftuar)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ef52d3cf11bd3b1117da8a7affcf9fcfd133767",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2ef52d3cf11bd3b1117da8a7affcf9fcfd133767",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ef52d3cf11bd3b1117da8a7affcf9fcfd133767/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "054d664215ca8d5f17d8aadbfc5b78a8dcd5115c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/054d664215ca8d5f17d8aadbfc5b78a8dcd5115c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/054d664215ca8d5f17d8aadbfc5b78a8dcd5115c"
      },
      {
        "sha": "cc0243ad32cee1cc9faab317364b889beaf07647",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc0243ad32cee1cc9faab317364b889beaf07647",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cc0243ad32cee1cc9faab317364b889beaf07647"
      }
    ],
    "stats": {
      "total": 729,
      "additions": 715,
      "deletions": 14
    },
    "files": [
      {
        "sha": "c87d3c71278cd39b9f8cb8e292d3d9f9f52ed164",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ef52d3cf11bd3b1117da8a7affcf9fcfd133767/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ef52d3cf11bd3b1117da8a7affcf9fcfd133767/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=2ef52d3cf11bd3b1117da8a7affcf9fcfd133767",
        "patch": "@@ -151,6 +151,7 @@\n     'signmessages.py',\n     'nulldummy.py',\n     'import-rescan.py',\n+    'bumpfee.py',\n     'rpcnamedargs.py',\n ]\n if ENABLE_ZMQ:"
      },
      {
        "sha": "0ebd79f7f32ef902106db0d8a0e957ed1e2dc2f3",
        "filename": "qa/rpc-tests/bumpfee.py",
        "status": "added",
        "additions": 317,
        "deletions": 0,
        "changes": 317,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ef52d3cf11bd3b1117da8a7affcf9fcfd133767/qa/rpc-tests/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ef52d3cf11bd3b1117da8a7affcf9fcfd133767/qa/rpc-tests/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bumpfee.py?ref=2ef52d3cf11bd3b1117da8a7affcf9fcfd133767",
        "patch": "@@ -0,0 +1,317 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from segwit import send_to_witness\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework import blocktools\n+from test_framework.mininode import CTransaction\n+from test_framework.util import *\n+from test_framework.util import *\n+\n+import io\n+import time\n+\n+# Sequence number that is BIP 125 opt-in and BIP 68-compliant\n+BIP125_SEQUENCE_NUMBER = 0xfffffffd\n+\n+WALLET_PASSPHRASE = \"test\"\n+WALLET_PASSPHRASE_TIMEOUT = 3600\n+\n+\n+class BumpFeeTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+\n+    def setup_network(self, split=False):\n+        extra_args = [[\"-debug\", \"-prematurewitness\", \"-walletprematurewitness\", \"-walletrbf={}\".format(i)]\n+                      for i in range(self.num_nodes)]\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+\n+        # Encrypt wallet for test_locked_wallet_fails test\n+        self.nodes[1].encryptwallet(WALLET_PASSPHRASE)\n+        bitcoind_processes[1].wait()\n+        self.nodes[1] = start_node(1, self.options.tmpdir, extra_args[1])\n+        self.nodes[1].walletpassphrase(WALLET_PASSPHRASE, WALLET_PASSPHRASE_TIMEOUT)\n+\n+        connect_nodes_bi(self.nodes, 0, 1)\n+        self.is_network_split = False\n+        self.sync_all()\n+\n+    def run_test(self):\n+        peer_node, rbf_node = self.nodes\n+        rbf_node_address = rbf_node.getnewaddress()\n+\n+        # fund rbf node with 10 coins of 0.001 btc (100,000 satoshis)\n+        print(\"Mining blocks...\")\n+        peer_node.generate(110)\n+        self.sync_all()\n+        for i in range(25):\n+            peer_node.sendtoaddress(rbf_node_address, 0.001)\n+        self.sync_all()\n+        peer_node.generate(1)\n+        self.sync_all()\n+        assert_equal(rbf_node.getbalance(), Decimal(\"0.025\"))\n+\n+        print(\"Running tests\")\n+        dest_address = peer_node.getnewaddress()\n+        test_small_output_fails(rbf_node, dest_address)\n+        test_dust_to_fee(rbf_node, dest_address)\n+        test_simple_bumpfee_succeeds(rbf_node, peer_node, dest_address)\n+        test_segwit_bumpfee_succeeds(rbf_node, dest_address)\n+        test_nonrbf_bumpfee_fails(peer_node, dest_address)\n+        test_notmine_bumpfee_fails(rbf_node, peer_node, dest_address)\n+        test_bumpfee_with_descendant_fails(rbf_node, rbf_node_address, dest_address)\n+        test_settxfee(rbf_node, dest_address)\n+        test_rebumping(rbf_node, dest_address)\n+        test_rebumping_not_replaceable(rbf_node, dest_address)\n+        test_unconfirmed_not_spendable(rbf_node, rbf_node_address)\n+        test_locked_wallet_fails(rbf_node, dest_address)\n+        print(\"Success\")\n+\n+\n+def test_simple_bumpfee_succeeds(rbf_node, peer_node, dest_address):\n+    rbfid = create_fund_sign_send(rbf_node, {dest_address: 0.00090000})\n+    rbftx = rbf_node.gettransaction(rbfid)\n+    sync_mempools((rbf_node, peer_node))\n+    assert rbfid in rbf_node.getrawmempool() and rbfid in peer_node.getrawmempool()\n+    bumped_tx = rbf_node.bumpfee(rbfid)\n+    assert bumped_tx[\"fee\"] - abs(rbftx[\"fee\"]) > 0\n+    # check that bumped_tx propogates, original tx was evicted and has a wallet conflict\n+    sync_mempools((rbf_node, peer_node))\n+    assert bumped_tx[\"txid\"] in rbf_node.getrawmempool()\n+    assert bumped_tx[\"txid\"] in peer_node.getrawmempool()\n+    assert rbfid not in rbf_node.getrawmempool()\n+    assert rbfid not in peer_node.getrawmempool()\n+    oldwtx = rbf_node.gettransaction(rbfid)\n+    assert len(oldwtx[\"walletconflicts\"]) > 0\n+    # check wallet transaction replaces and replaced_by values\n+    bumpedwtx = rbf_node.gettransaction(bumped_tx[\"txid\"])\n+    assert_equal(oldwtx[\"replaced_by_txid\"], bumped_tx[\"txid\"])\n+    assert_equal(bumpedwtx[\"replaces_txid\"], rbfid)\n+\n+\n+def test_segwit_bumpfee_succeeds(rbf_node, dest_address):\n+    # Create a transaction with segwit output, then create an RBF transaction\n+    # which spends it, and make sure bumpfee can be called on it.\n+\n+    segwit_in = next(u for u in rbf_node.listunspent() if u[\"amount\"] == Decimal(\"0.001\"))\n+    segwit_out = rbf_node.validateaddress(rbf_node.getnewaddress())\n+    rbf_node.addwitnessaddress(segwit_out[\"address\"])\n+    segwitid = send_to_witness(\n+        version=0,\n+        node=rbf_node,\n+        utxo=segwit_in,\n+        pubkey=segwit_out[\"pubkey\"],\n+        encode_p2sh=False,\n+        amount=Decimal(\"0.0009\"),\n+        sign=True)\n+\n+    rbfraw = rbf_node.createrawtransaction([{\n+        'txid': segwitid,\n+        'vout': 0,\n+        \"sequence\": BIP125_SEQUENCE_NUMBER\n+    }], {dest_address: Decimal(\"0.0005\"),\n+         get_change_address(rbf_node): Decimal(\"0.0003\")})\n+    rbfsigned = rbf_node.signrawtransaction(rbfraw)\n+    rbfid = rbf_node.sendrawtransaction(rbfsigned[\"hex\"])\n+    assert rbfid in rbf_node.getrawmempool()\n+\n+    bumped_tx = rbf_node.bumpfee(rbfid)\n+    assert bumped_tx[\"txid\"] in rbf_node.getrawmempool()\n+    assert rbfid not in rbf_node.getrawmempool()\n+\n+\n+def test_nonrbf_bumpfee_fails(peer_node, dest_address):\n+    # cannot replace a non RBF transaction (from node which did not enable RBF)\n+    not_rbfid = create_fund_sign_send(peer_node, {dest_address: 0.00090000})\n+    assert_raises_message(JSONRPCException, \"not BIP 125 replaceable\", peer_node.bumpfee, not_rbfid)\n+\n+\n+def test_notmine_bumpfee_fails(rbf_node, peer_node, dest_address):\n+    # cannot bump fee unless the tx has only inputs that we own.\n+    # here, the rbftx has a peer_node coin and then adds a rbf_node input\n+    # Note that this test depends upon the RPC code checking input ownership prior to change outputs\n+    # (since it can't use fundrawtransaction, it lacks a proper change output)\n+    utxos = [node.listunspent()[-1] for node in (rbf_node, peer_node)]\n+    inputs = [{\n+        \"txid\": utxo[\"txid\"],\n+        \"vout\": utxo[\"vout\"],\n+        \"address\": utxo[\"address\"],\n+        \"sequence\": BIP125_SEQUENCE_NUMBER\n+    } for utxo in utxos]\n+    output_val = sum(utxo[\"amount\"] for utxo in utxos) - Decimal(\"0.001\")\n+    rawtx = rbf_node.createrawtransaction(inputs, {dest_address: output_val})\n+    signedtx = rbf_node.signrawtransaction(rawtx)\n+    signedtx = peer_node.signrawtransaction(signedtx[\"hex\"])\n+    rbfid = rbf_node.sendrawtransaction(signedtx[\"hex\"])\n+    assert_raises_message(JSONRPCException, \"Transaction contains inputs that don't belong to this wallet\",\n+                          rbf_node.bumpfee, rbfid)\n+\n+\n+def test_bumpfee_with_descendant_fails(rbf_node, rbf_node_address, dest_address):\n+    # cannot bump fee if the transaction has a descendant\n+    # parent is send-to-self, so we don't have to check which output is change when creating the child tx\n+    parent_id = create_fund_sign_send(rbf_node, {rbf_node_address: 0.00050000})\n+    tx = rbf_node.createrawtransaction([{\"txid\": parent_id, \"vout\": 0}], {dest_address: 0.00020000})\n+    tx = rbf_node.signrawtransaction(tx)\n+    txid = rbf_node.sendrawtransaction(tx[\"hex\"])\n+    assert_raises_message(JSONRPCException, \"Transaction has descendants in the wallet\", rbf_node.bumpfee, parent_id)\n+\n+\n+def test_small_output_fails(rbf_node, dest_address):\n+    # cannot bump fee with a too-small output\n+    rbfid = spend_one_input(rbf_node,\n+                            Decimal(\"0.00100000\"),\n+                            {dest_address: 0.00080000,\n+                             get_change_address(rbf_node): Decimal(\"0.00010000\")})\n+    rbf_node.bumpfee(rbfid, {\"totalFee\": 20000})\n+\n+    rbfid = spend_one_input(rbf_node,\n+                            Decimal(\"0.00100000\"),\n+                            {dest_address: 0.00080000,\n+                             get_change_address(rbf_node): Decimal(\"0.00010000\")})\n+    assert_raises_message(JSONRPCException, \"Change output is too small\", rbf_node.bumpfee, rbfid, {\"totalFee\": 20001})\n+\n+\n+def test_dust_to_fee(rbf_node, dest_address):\n+    # check that if output is reduced to dust, it will be converted to fee\n+    # the bumped tx sets fee=9900, but it converts to 10,000\n+    rbfid = spend_one_input(rbf_node,\n+                            Decimal(\"0.00100000\"),\n+                            {dest_address: 0.00080000,\n+                             get_change_address(rbf_node): Decimal(\"0.00010000\")})\n+    fulltx = rbf_node.getrawtransaction(rbfid, 1)\n+    bumped_tx = rbf_node.bumpfee(rbfid, {\"totalFee\": 19900})\n+    full_bumped_tx = rbf_node.getrawtransaction(bumped_tx[\"txid\"], 1)\n+    assert_equal(bumped_tx[\"fee\"], Decimal(\"0.00020000\"))\n+    assert_equal(len(fulltx[\"vout\"]), 2)\n+    assert_equal(len(full_bumped_tx[\"vout\"]), 1)  #change output is eliminated\n+\n+\n+def test_settxfee(rbf_node, dest_address):\n+    # check that bumpfee reacts correctly to the use of settxfee (paytxfee)\n+    # increase feerate by 2.5x, test that fee increased at least 2x\n+    rbf_node.settxfee(Decimal(\"0.00001000\"))\n+    rbfid = create_fund_sign_send(rbf_node, {dest_address: 0.00090000})\n+    rbftx = rbf_node.gettransaction(rbfid)\n+    rbf_node.settxfee(Decimal(\"0.00002500\"))\n+    bumped_tx = rbf_node.bumpfee(rbfid)\n+    assert bumped_tx[\"fee\"] > 2 * abs(rbftx[\"fee\"])\n+    rbf_node.settxfee(Decimal(\"0.00000000\"))  # unset paytxfee\n+\n+\n+def test_rebumping(rbf_node, dest_address):\n+    # check that re-bumping the original tx fails, but bumping the bumper succeeds\n+    rbf_node.settxfee(Decimal(\"0.00001000\"))\n+    rbfid = create_fund_sign_send(rbf_node, {dest_address: 0.00090000})\n+    bumped = rbf_node.bumpfee(rbfid, {\"totalFee\": 1000})\n+    assert_raises_message(JSONRPCException, \"already bumped\", rbf_node.bumpfee, rbfid, {\"totalFee\": 2000})\n+    rbf_node.bumpfee(bumped[\"txid\"], {\"totalFee\": 2000})\n+\n+\n+def test_rebumping_not_replaceable(rbf_node, dest_address):\n+    # check that re-bumping a non-replaceable bump tx fails\n+    rbfid = create_fund_sign_send(rbf_node, {dest_address: 0.00090000})\n+    bumped = rbf_node.bumpfee(rbfid, {\"totalFee\": 10000, \"replaceable\": False})\n+    assert_raises_message(JSONRPCException, \"Transaction is not BIP 125 replaceable\", rbf_node.bumpfee, bumped[\"txid\"],\n+                          {\"totalFee\": 20000})\n+\n+\n+def test_unconfirmed_not_spendable(rbf_node, rbf_node_address):\n+    # check that unconfirmed outputs from bumped transactions are not spendable\n+    rbfid = create_fund_sign_send(rbf_node, {rbf_node_address: 0.00090000})\n+    rbftx = rbf_node.gettransaction(rbfid)[\"hex\"]\n+    assert rbfid in rbf_node.getrawmempool()\n+    bumpid = rbf_node.bumpfee(rbfid)[\"txid\"]\n+    assert bumpid in rbf_node.getrawmempool()\n+    assert rbfid not in rbf_node.getrawmempool()\n+\n+    # check that outputs from the bump transaction are not spendable\n+    # due to the replaces_txid check in CWallet::AvailableCoins\n+    assert_equal([t for t in rbf_node.listunspent(minconf=0, include_unsafe=False) if t[\"txid\"] == bumpid], [])\n+\n+    # submit a block with the rbf tx to clear the bump tx out of the mempool,\n+    # then call abandon to make sure the wallet doesn't attempt to resubmit the\n+    # bump tx, then invalidate the block so the rbf tx will be put back in the\n+    # mempool. this makes it possible to check whether the rbf tx outputs are\n+    # spendable before the rbf tx is confirmed.\n+    block = submit_block_with_tx(rbf_node, rbftx)\n+    rbf_node.abandontransaction(bumpid)\n+    rbf_node.invalidateblock(block.hash)\n+    assert bumpid not in rbf_node.getrawmempool()\n+    assert rbfid in rbf_node.getrawmempool()\n+\n+    # check that outputs from the rbf tx are not spendable before the\n+    # transaction is confirmed, due to the replaced_by_txid check in\n+    # CWallet::AvailableCoins\n+    assert_equal([t for t in rbf_node.listunspent(minconf=0, include_unsafe=False) if t[\"txid\"] == rbfid], [])\n+\n+    # check that the main output from the rbf tx is spendable after confirmed\n+    rbf_node.generate(1)\n+    assert_equal(\n+        sum(1 for t in rbf_node.listunspent(minconf=0, include_unsafe=False)\n+            if t[\"txid\"] == rbfid and t[\"address\"] == rbf_node_address and t[\"spendable\"]), 1)\n+\n+\n+def test_locked_wallet_fails(rbf_node, dest_address):\n+    rbfid = create_fund_sign_send(rbf_node, {dest_address: 0.00090000})\n+    rbf_node.walletlock()\n+    assert_raises_message(JSONRPCException, \"Please enter the wallet passphrase with walletpassphrase first.\",\n+                          rbf_node.bumpfee, rbfid)\n+\n+\n+def create_fund_sign_send(node, outputs):\n+    rawtx = node.createrawtransaction([], outputs)\n+    fundtx = node.fundrawtransaction(rawtx)\n+    signedtx = node.signrawtransaction(fundtx[\"hex\"])\n+    txid = node.sendrawtransaction(signedtx[\"hex\"])\n+    return txid\n+\n+\n+def spend_one_input(node, input_amount, outputs):\n+    input = dict(sequence=BIP125_SEQUENCE_NUMBER, **next(u for u in node.listunspent() if u[\"amount\"] == input_amount))\n+    rawtx = node.createrawtransaction([input], outputs)\n+    signedtx = node.signrawtransaction(rawtx)\n+    txid = node.sendrawtransaction(signedtx[\"hex\"])\n+    return txid\n+\n+\n+def get_change_address(node):\n+    \"\"\"Get a wallet change address.\n+\n+    There is no wallet RPC to access unused change addresses, so this creates a\n+    dummy transaction, calls fundrawtransaction to give add an input and change\n+    output, then returns the change address.\"\"\"\n+    dest_address = node.getnewaddress()\n+    dest_amount = Decimal(\"0.00012345\")\n+    rawtx = node.createrawtransaction([], {dest_address: dest_amount})\n+    fundtx = node.fundrawtransaction(rawtx)\n+    info = node.decoderawtransaction(fundtx[\"hex\"])\n+    return next(address for out in info[\"vout\"]\n+                if out[\"value\"] != dest_amount for address in out[\"scriptPubKey\"][\"addresses\"])\n+\n+\n+def submit_block_with_tx(node, tx):\n+    ctx = CTransaction()\n+    ctx.deserialize(io.BytesIO(hex_str_to_bytes(tx)))\n+\n+    tip = node.getbestblockhash()\n+    height = node.getblockcount() + 1\n+    block_time = node.getblockheader(tip)[\"mediantime\"] + 1\n+    block = blocktools.create_block(int(tip, 16), blocktools.create_coinbase(height), block_time)\n+    block.vtx.append(ctx)\n+    block.rehash()\n+    block.hashMerkleRoot = block.calc_merkle_root()\n+    block.solve()\n+    error = node.submitblock(bytes_to_hex_str(block.serialize(True)))\n+    if error is not None:\n+        raise Exception(error)\n+    return block\n+\n+\n+if __name__ == \"__main__\":\n+    BumpFeeTest().main()"
      },
      {
        "sha": "5bdd84e555116e86640eeb541e9e19172c22ed01",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ef52d3cf11bd3b1117da8a7affcf9fcfd133767/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ef52d3cf11bd3b1117da8a7affcf9fcfd133767/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=2ef52d3cf11bd3b1117da8a7affcf9fcfd133767",
        "patch": "@@ -117,6 +117,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"setnetworkactive\", 0, \"state\" },\n     { \"getmempoolancestors\", 1, \"verbose\" },\n     { \"getmempooldescendants\", 1, \"verbose\" },\n+    { \"bumpfee\", 1, \"options\" },\n     // Echo with conversion (For testing only)\n     { \"echojson\", 0, \"arg0\" },\n     { \"echojson\", 1, \"arg1\" },"
      },
      {
        "sha": "283d458c8df90e486332a2b77fa7db759280aa9f",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ef52d3cf11bd3b1117da8a7affcf9fcfd133767/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ef52d3cf11bd3b1117da8a7affcf9fcfd133767/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=2ef52d3cf11bd3b1117da8a7affcf9fcfd133767",
        "patch": "@@ -79,16 +79,20 @@ void RPCTypeCheck(const UniValue& params,\n             break;\n \n         const UniValue& v = params[i];\n-        if (!((v.type() == t) || (fAllowNull && (v.isNull()))))\n-        {\n-            string err = strprintf(\"Expected type %s, got %s\",\n-                                   uvTypeName(t), uvTypeName(v.type()));\n-            throw JSONRPCError(RPC_TYPE_ERROR, err);\n+        if (!(fAllowNull && v.isNull())) {\n+            RPCTypeCheckArgument(v, t);\n         }\n         i++;\n     }\n }\n \n+void RPCTypeCheckArgument(const UniValue& value, UniValue::VType typeExpected)\n+{\n+    if (value.type() != typeExpected) {\n+        throw JSONRPCError(RPC_TYPE_ERROR, strprintf(\"Expected type %s, got %s\", uvTypeName(typeExpected), uvTypeName(value.type())));\n+    }\n+}\n+\n void RPCTypeCheckObj(const UniValue& o,\n     const map<string, UniValueType>& typesExpected,\n     bool fAllowNull,"
      },
      {
        "sha": "52f82866dc0c25967ac6039af62056847d355897",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ef52d3cf11bd3b1117da8a7affcf9fcfd133767/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ef52d3cf11bd3b1117da8a7affcf9fcfd133767/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=2ef52d3cf11bd3b1117da8a7affcf9fcfd133767",
        "patch": "@@ -78,6 +78,11 @@ bool RPCIsInWarmup(std::string *statusOut);\n void RPCTypeCheck(const UniValue& params,\n                   const std::list<UniValue::VType>& typesExpected, bool fAllowNull=false);\n \n+/**\n+ * Type-check one argument; throws JSONRPCError if wrong type given.\n+ */\n+void RPCTypeCheckArgument(const UniValue& value, UniValue::VType typeExpected);\n+\n /*\n   Check for expected keys/value types in an Object.\n */"
      },
      {
        "sha": "152e9cff90c4fb87b87998dc74da72ec81c5193a",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 280,
        "deletions": 9,
        "changes": 289,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ef52d3cf11bd3b1117da8a7affcf9fcfd133767/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ef52d3cf11bd3b1117da8a7affcf9fcfd133767/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=2ef52d3cf11bd3b1117da8a7affcf9fcfd133767",
        "patch": "@@ -11,8 +11,10 @@\n #include \"init.h\"\n #include \"validation.h\"\n #include \"net.h\"\n+#include \"policy/policy.h\"\n #include \"policy/rbf.h\"\n #include \"rpc/server.h\"\n+#include \"script/sign.h\"\n #include \"timedata.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n@@ -2364,9 +2366,9 @@ UniValue listunspent(const JSONRPCRequest& request)\n     if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (request.fHelp || request.params.size() > 3)\n+    if (request.fHelp || request.params.size() > 4)\n         throw runtime_error(\n-            \"listunspent ( minconf maxconf  [\\\"addresses\\\",...] )\\n\"\n+            \"listunspent ( minconf maxconf  [\\\"addresses\\\",...] [include_unsafe] )\\n\"\n             \"\\nReturns array of unspent transaction outputs\\n\"\n             \"with between minconf and maxconf (inclusive) confirmations.\\n\"\n             \"Optionally filter to only include txouts paid to specified addresses.\\n\"\n@@ -2378,6 +2380,10 @@ UniValue listunspent(const JSONRPCRequest& request)\n             \"      \\\"address\\\"   (string) bitcoin address\\n\"\n             \"      ,...\\n\"\n             \"    ]\\n\"\n+            \"4. include_unsafe (bool, optional, default=true) Include outputs that are not safe to spend\\n\"\n+            \"                  because they come from unconfirmed untrusted transactions or unconfirmed\\n\"\n+            \"                  replacement transactions (cases where we are less sure that a conflicting\\n\"\n+            \"                  transaction won't be mined).\\n\"\n             \"\\nResult\\n\"\n             \"[                   (array of json object)\\n\"\n             \"  {\\n\"\n@@ -2401,18 +2407,21 @@ UniValue listunspent(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"listunspent\", \"6, 9999999 \\\"[\\\\\\\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\\\\\",\\\\\\\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\\\\\"]\\\"\")\n         );\n \n-    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM)(UniValue::VNUM)(UniValue::VARR));\n-\n     int nMinDepth = 1;\n-    if (request.params.size() > 0)\n+    if (request.params.size() > 0 && !request.params[0].isNull()) {\n+        RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n         nMinDepth = request.params[0].get_int();\n+    }\n \n     int nMaxDepth = 9999999;\n-    if (request.params.size() > 1)\n+    if (request.params.size() > 1 && !request.params[1].isNull()) {\n+        RPCTypeCheckArgument(request.params[1], UniValue::VNUM);\n         nMaxDepth = request.params[1].get_int();\n+    }\n \n     set<CBitcoinAddress> setAddress;\n-    if (request.params.size() > 2) {\n+    if (request.params.size() > 2 && !request.params[2].isNull()) {\n+        RPCTypeCheckArgument(request.params[2], UniValue::VARR);\n         UniValue inputs = request.params[2].get_array();\n         for (unsigned int idx = 0; idx < inputs.size(); idx++) {\n             const UniValue& input = inputs[idx];\n@@ -2425,11 +2434,17 @@ UniValue listunspent(const JSONRPCRequest& request)\n         }\n     }\n \n+    bool include_unsafe = true;\n+    if (request.params.size() > 3 && !request.params[3].isNull()) {\n+        RPCTypeCheckArgument(request.params[3], UniValue::VBOOL);\n+        include_unsafe = request.params[3].get_bool();\n+    }\n+\n     UniValue results(UniValue::VARR);\n     vector<COutput> vecOutputs;\n     assert(pwalletMain != NULL);\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n-    pwalletMain->AvailableCoins(vecOutputs, false, NULL, true);\n+    pwalletMain->AvailableCoins(vecOutputs, !include_unsafe, NULL, true);\n     BOOST_FOREACH(const COutput& out, vecOutputs) {\n         if (out.nDepth < nMinDepth || out.nDepth > nMaxDepth)\n             continue;\n@@ -2619,6 +2634,261 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n+            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee (relay fee amount returned\\n\"\n+            \"by getnetworkinfo RPC) and to enter the node's mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. txid                  (string, required) The txid to be bumped\\n\"\n+            \"2. options               (object, optional)\\n\"\n+            \"   {\\n\"\n+            \"     \\\"confTarget\\\"        (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"     \\\"totalFee\\\"          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis.\\n\"\n+            \"                         In rare cases, the actual fee paid might be slightly higher than the specified\\n\"\n+            \"                         totalFee if the tx change output has to be removed because it is too close to\\n\"\n+            \"                         the dust threshold.\\n\"\n+            \"     \\\"replaceable\\\"       (boolean, optional, default true) Whether the new transaction should still be\\n\"\n+            \"                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n+            \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n+            \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n+            \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n+            \"                         still be replacable in practice, for example if it has unconfirmed ancestors which\\n\"\n+            \"                         are replaceable).\\n\"\n+            \"   }\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+            \"  \\\"oldfee\\\":  n,         (numeric) Fee of the replaced transaction\\n\"\n+            \"  \\\"fee\\\":     n,         (numeric) Fee of the new transaction\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n+            HelpExampleCli(\"bumpfee\", \"<txid>\"));\n+    }\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+\n+    // retrieve the original tx from the wallet\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    EnsureWalletIsUnlocked();\n+    if (!pwalletMain->mapWallet.count(hash)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    }\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (pwalletMain->HasWalletSpend(hash)) {\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+    }\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+        }\n+    }\n+\n+    if (wtx.GetDepthInMainChain() != 0) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+    }\n+\n+    if (!SignalsOptInRBF(wtx)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+    }\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\")) {\n+        throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+    }\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+    }\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i = 0; i < wtx.tx->vout.size(); ++i) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1) {\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            }\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1) {\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+    }\n+\n+    // optional parameters\n+    bool specifiedConfirmTarget = false;\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    bool replaceable = true;\n+    if (request.params.size() > 1) {\n+        UniValue options = request.params[1];\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"replaceable\", UniValueType(UniValue::VBOOL)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\") && options.exists(\"totalFee\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"confTarget and totalFee options should not both be set. Please provide either a confirmation target for fee estimation or an explicit total fee for the transaction.\");\n+        } else if (options.exists(\"confTarget\")) {\n+            specifiedConfirmTarget = true;\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) { // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+            }\n+        } else if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int64();\n+            if (totalFee <= 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            } else if (totalFee > maxTxFee) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than maxTxFee)\");\n+            }\n+        }\n+\n+        if (options.exists(\"replaceable\")) {\n+            replaceable = options[\"replaceable\"].get_bool();\n+        }\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n+    const int64_t maxNewTxSize = txSize + wtx.tx->vin.size();\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+    CAmount nNewFee;\n+    CFeeRate nNewFeeRate;\n+\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + minRelayTxFee.GetFee(maxNewTxSize);\n+        if (totalFee < minTotalFee) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid totalFee, must be at least %s (oldFee %s + relayFee %s)\", FormatMoney(minTotalFee), nOldFeeRate.GetFee(maxNewTxSize), minRelayTxFee.GetFee(maxNewTxSize)));\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, maxNewTxSize);\n+    } else {\n+        // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+        if (!specifiedConfirmTarget && payTxFee.GetFeePerK() != 0) {\n+            nNewFeeRate = payTxFee;\n+        } else {\n+            nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget);\n+        }\n+        if (nNewFeeRate.GetFeePerK() == 0) {\n+            nNewFeeRate = CWallet::fallbackFee;\n+        }\n+\n+        // new fee rate must be at least old rate + minimum relay rate\n+        if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK()) {\n+            nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+        }\n+\n+        nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's minimum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n+    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n+        throw JSONRPCError(RPC_MISC_ERROR, strprintf(\"New fee rate (%s) is less than the minimum fee rate (%s) to get into the mempool. totalFee value should to be at least %s or settxfee value should be at least %s to add transaction.\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFee(maxNewTxSize)), FormatMoney(minMempoolFeeRate.GetFeePerK())));\n+    }\n+\n+    // Now modify the output to increase the fee.\n+    // If the output is not large enough to pay the fee, fail.\n+    CAmount nDelta = nNewFee - nOldFee;\n+    assert(nDelta > 0);\n+    CMutableTransaction tx(*(wtx.tx));\n+    CTxOut* poutput = &(tx.vout[nOutput]);\n+    if (poutput->nValue < nDelta) {\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Change output is too small to bump the fee\");\n+    }\n+\n+    // If the output would become dust, discard it (converting the dust to fee)\n+    poutput->nValue -= nDelta;\n+    if (poutput->nValue <= poutput->GetDustThreshold(::minRelayTxFee)) {\n+        LogPrint(\"rpc\", \"Bumping fee and discarding dust output\\n\");\n+        nNewFee += poutput->nValue;\n+        tx.vout.erase(tx.vout.begin() + nOutput);\n+    }\n+\n+    // Mark new tx not replaceable, if requested.\n+    if (!replaceable) {\n+        for (auto& input : tx.vin) {\n+            if (input.nSequence < 0xfffffffe) input.nSequence = 0xfffffffe;\n+        }\n+    }\n+\n+    // sign the new tx\n+    CTransaction txNewConst(tx);\n+    int nIn = 0;\n+    for (auto& input : tx.vin) {\n+        std::map<uint256, CWalletTx>::const_iterator mi = pwalletMain->mapWallet.find(input.prevout.hash);\n+        assert(mi != pwalletMain->mapWallet.end() && input.prevout.n < mi->second.tx->vout.size());\n+        const CScript& scriptPubKey = mi->second.tx->vout[input.prevout.n].scriptPubKey;\n+        const CAmount& amount = mi->second.tx->vout[input.prevout.n].nValue;\n+        SignatureData sigdata;\n+        if (!ProduceSignature(TransactionSignatureCreator(pwalletMain, &txNewConst, nIn, amount, SIGHASH_ALL), scriptPubKey, sigdata)) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Can't sign transaction.\");\n+        }\n+        UpdateTransaction(tx, nIn, sigdata);\n+        nIn++;\n+    }\n+\n+    // commit/broadcast the tx\n+    CReserveKey reservekey(pwalletMain);\n+    CWalletTx wtxBumped(pwalletMain, MakeTransactionRef(std::move(tx)));\n+    wtxBumped.mapValue[\"replaces_txid\"] = hash.ToString();\n+    CValidationState state;\n+    if (!pwalletMain->CommitTransaction(wtxBumped, reservekey, g_connman.get(), state) || !state.IsValid()) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Error: The transaction was rejected! Reason given: %s\", state.GetRejectReason()));\n+    }\n+\n+    // mark the original tx as bumped\n+    if (!pwalletMain->MarkReplaced(wtx.GetHash(), wtxBumped.GetHash())) {\n+        // TODO: see if JSON-RPC has a standard way of returning a response\n+        // along with an exception. It would be good to return information about\n+        // wtxBumped to the caller even if marking the original transaction\n+        // replaced does not succeed for some reason.\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Created new bumpfee transaction but could not mark the original transaction as replaced.\");\n+    }\n+\n+    UniValue result(UniValue::VOBJ);\n+    result.push_back(Pair(\"txid\", wtxBumped.GetHash().GetHex()));\n+    result.push_back(Pair(\"oldfee\", ValueFromAmount(nOldFee)));\n+    result.push_back(Pair(\"fee\", ValueFromAmount(nNewFee)));\n+\n+    return result;\n+}\n+\n extern UniValue dumpprivkey(const JSONRPCRequest& request); // in rpcdump.cpp\n extern UniValue importprivkey(const JSONRPCRequest& request);\n extern UniValue importaddress(const JSONRPCRequest& request);\n@@ -2638,6 +2908,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"addmultisigaddress\",       &addmultisigaddress,       true,   {\"nrequired\",\"keys\",\"account\"} },\n     { \"wallet\",             \"addwitnessaddress\",        &addwitnessaddress,        true,   {\"address\"} },\n     { \"wallet\",             \"backupwallet\",             &backupwallet,             true,   {\"destination\"} },\n+    { \"wallet\",             \"bumpfee\",                  &bumpfee,                  true,   {\"txid\", \"options\"} },\n     { \"wallet\",             \"dumpprivkey\",              &dumpprivkey,              true,   {\"address\"}  },\n     { \"wallet\",             \"dumpwallet\",               &dumpwallet,               true,   {\"filename\"} },\n     { \"wallet\",             \"encryptwallet\",            &encryptwallet,            true,   {\"passphrase\"} },\n@@ -2666,7 +2937,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"listreceivedbyaddress\",    &listreceivedbyaddress,    false,  {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n     { \"wallet\",             \"listsinceblock\",           &listsinceblock,           false,  {\"blockhash\",\"target_confirmations\",\"include_watchonly\"} },\n     { \"wallet\",             \"listtransactions\",         &listtransactions,         false,  {\"account\",\"count\",\"skip\",\"include_watchonly\"} },\n-    { \"wallet\",             \"listunspent\",              &listunspent,              false,  {\"minconf\",\"maxconf\",\"addresses\"} },\n+    { \"wallet\",             \"listunspent\",              &listunspent,              false,  {\"minconf\",\"maxconf\",\"addresses\",\"include_unsafe\"} },\n     { \"wallet\",             \"lockunspent\",              &lockunspent,              true,   {\"unlock\",\"transactions\"} },\n     { \"wallet\",             \"move\",                     &movecmd,                  false,  {\"fromaccount\",\"toaccount\",\"amount\",\"minconf\",\"comment\"} },\n     { \"wallet\",             \"sendfrom\",                 &sendfrom,                 false,  {\"fromaccount\",\"toaddress\",\"amount\",\"minconf\",\"comment\",\"comment_to\"} },"
      },
      {
        "sha": "62519980992e03f8c5e1c562398a6b4a8b687bf9",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 90,
        "deletions": 0,
        "changes": 90,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ef52d3cf11bd3b1117da8a7affcf9fcfd133767/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ef52d3cf11bd3b1117da8a7affcf9fcfd133767/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=2ef52d3cf11bd3b1117da8a7affcf9fcfd133767",
        "patch": "@@ -411,6 +411,13 @@ set<uint256> CWallet::GetConflicts(const uint256& txid) const\n     return result;\n }\n \n+bool CWallet::HasWalletSpend(const uint256& txid) const\n+{\n+    AssertLockHeld(cs_wallet);\n+    auto iter = mapTxSpends.lower_bound(COutPoint(txid, 0));\n+    return (iter != mapTxSpends.end() && iter->first.hash == txid);\n+}\n+\n void CWallet::Flush(bool shutdown)\n {\n     bitdb.Flush(shutdown);\n@@ -826,6 +833,35 @@ void CWallet::MarkDirty()\n     }\n }\n \n+bool CWallet::MarkReplaced(const uint256& originalHash, const uint256& newHash)\n+{\n+    LOCK(cs_wallet);\n+\n+    auto mi = mapWallet.find(originalHash);\n+\n+    // There is a bug if MarkReplaced is not called on an existing wallet transaction.\n+    assert(mi != mapWallet.end());\n+\n+    CWalletTx& wtx = (*mi).second;\n+\n+    // Ensure for now that we're not overwriting data\n+    assert(wtx.mapValue.count(\"replaced_by_txid\") == 0);\n+\n+    wtx.mapValue[\"replaced_by_txid\"] = newHash.ToString();\n+\n+    CWalletDB walletdb(strWalletFile, \"r+\");\n+\n+    bool success = true;\n+    if (!walletdb.WriteTx(wtx)) {\n+        LogPrintf(\"%s: Updating walletdb tx %s failed\", __func__, wtx.GetHash().ToString());\n+        success = false;\n+    }\n+\n+    NotifyTransactionChanged(this, originalHash, CT_UPDATED);\n+\n+    return success;\n+}\n+\n bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n {\n     LOCK(cs_wallet);\n@@ -1154,6 +1190,8 @@ isminetype CWallet::IsMine(const CTxIn &txin) const\n     return ISMINE_NO;\n }\n \n+// Note that this function doesn't distinguish between a 0-valued input,\n+// and a not-\"is mine\" (according to the filter) input.\n CAmount CWallet::GetDebit(const CTxIn &txin, const isminefilter& filter) const\n {\n     {\n@@ -1236,6 +1274,27 @@ CAmount CWallet::GetDebit(const CTransaction& tx, const isminefilter& filter) co\n     return nDebit;\n }\n \n+bool CWallet::IsAllFromMe(const CTransaction& tx, const isminefilter& filter) const\n+{\n+    LOCK(cs_wallet);\n+\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    {\n+        auto mi = mapWallet.find(txin.prevout.hash);\n+        if (mi == mapWallet.end())\n+            return false; // any unknown inputs can't be from us\n+\n+        const CWalletTx& prev = (*mi).second;\n+\n+        if (txin.prevout.n >= prev.tx->vout.size())\n+            return false; // invalid input!\n+\n+        if (!(IsMine(prev.tx->vout[txin.prevout.n]) & filter))\n+            return false;\n+    }\n+    return true;\n+}\n+\n CAmount CWallet::GetCredit(const CTransaction& tx, const isminefilter& filter) const\n {\n     CAmount nCredit = 0;\n@@ -1958,6 +2017,37 @@ void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const\n             if (nDepth == 0 && !pcoin->InMempool())\n                 continue;\n \n+            // We should not consider coins from transactions that are replacing\n+            // other transactions.\n+            //\n+            // Example: There is a transaction A which is replaced by bumpfee\n+            // transaction B. In this case, we want to prevent creation of\n+            // a transaction B' which spends an output of B.\n+            //\n+            // Reason: If transaction A were initially confirmed, transactions B\n+            // and B' would no longer be valid, so the user would have to create\n+            // a new transaction C to replace B'. However, in the case of a\n+            // one-block reorg, transactions B' and C might BOTH be accepted,\n+            // when the user only wanted one of them. Specifically, there could\n+            // be a 1-block reorg away from the chain where transactions A and C\n+            // were accepted to another chain where B, B', and C were all\n+            // accepted.\n+            if (nDepth == 0 && fOnlyConfirmed && pcoin->mapValue.count(\"replaces_txid\")) {\n+                continue;\n+            }\n+\n+            // Similarly, we should not consider coins from transactions that\n+            // have been replaced. In the example above, we would want to prevent\n+            // creation of a transaction A' spending an output of A, because if\n+            // transaction B were initially confirmed, conflicting with A and\n+            // A', we wouldn't want to the user to create a transaction D\n+            // intending to replace A', but potentially resulting in a scenario\n+            // where A, A', and D could all be accepted (instead of just B and\n+            // D, or just A and A' like the user would want).\n+            if (nDepth == 0 && fOnlyConfirmed && pcoin->mapValue.count(\"replaced_by_txid\")) {\n+                continue;\n+            }\n+\n             for (unsigned int i = 0; i < pcoin->tx->vout.size(); i++) {\n                 isminetype mine = IsMine(pcoin->tx->vout[i]);\n                 if (!(IsSpent(wtxid, i)) && mine != ISMINE_NO &&"
      },
      {
        "sha": "ecc63a9a13a38d2c26f4e36c6112f9ec19b3e769",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ef52d3cf11bd3b1117da8a7affcf9fcfd133767/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ef52d3cf11bd3b1117da8a7affcf9fcfd133767/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=2ef52d3cf11bd3b1117da8a7affcf9fcfd133767",
        "patch": "@@ -825,6 +825,10 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     std::set<CTxDestination> GetAccountAddresses(const std::string& strAccount) const;\n \n     isminetype IsMine(const CTxIn& txin) const;\n+    /**\n+     * Returns amount of debit if the input matches the\n+     * filter, otherwise returns 0\n+     */\n     CAmount GetDebit(const CTxIn& txin, const isminefilter& filter) const;\n     isminetype IsMine(const CTxOut& txout) const;\n     CAmount GetCredit(const CTxOut& txout, const isminefilter& filter) const;\n@@ -834,6 +838,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     /** should probably be renamed to IsRelevantToMe */\n     bool IsFromMe(const CTransaction& tx) const;\n     CAmount GetDebit(const CTransaction& tx, const isminefilter& filter) const;\n+    /** Returns whether all of the inputs match the filter */\n+    bool IsAllFromMe(const CTransaction& tx, const isminefilter& filter) const;\n     CAmount GetCredit(const CTransaction& tx, const isminefilter& filter) const;\n     CAmount GetChange(const CTransaction& tx) const;\n     void SetBestChain(const CBlockLocator& loc);\n@@ -885,6 +891,9 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     //! Get wallet transactions that conflict with given transaction (spend same outputs)\n     std::set<uint256> GetConflicts(const uint256& txid) const;\n \n+    //! Check if a given transaction has any of its outputs spent by another transaction in the wallet\n+    bool HasWalletSpend(const uint256& txid) const;\n+\n     //! Flush wallet (bitdb flush)\n     void Flush(bool shutdown=false);\n \n@@ -921,6 +930,9 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     /* Mark a transaction (and it in-wallet descendants) as abandoned so its inputs may be respent. */\n     bool AbandonTransaction(const uint256& hashTx);\n \n+    /** Mark a transaction as replaced by another transaction (e.g., BIP 125). */\n+    bool MarkReplaced(const uint256& originalHash, const uint256& newHash);\n+\n     /* Returns the wallets help message */\n     static std::string GetWalletHelpString(bool showDebug);\n "
      }
    ]
  },
  {
    "sha": "b25068697fdbfe3bc463b470f1295a44318c4467",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMjUwNjg2OTdmZGJmZTNiYzQ2M2I0NzBmMTI5NWE0NDMxOGM0NDY3",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-19T19:09:44Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-19T19:09:49Z"
      },
      "message": "Merge #9461: [Qt] Improve progress display during headers-sync and peer-finding\n\n40ec7c7 [Qt] Improve progress display during headers-sync and peer-finding (Jonas Schnelli)",
      "tree": {
        "sha": "8eb7cffba1c848c3b7b928379780a4fa9c25aaef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8eb7cffba1c848c3b7b928379780a4fa9c25aaef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b25068697fdbfe3bc463b470f1295a44318c4467",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAliBDv0ACgkQKdS8tkFv\nU+zASRAAmAxwpTH/Ecq+DnUgmpJ9kEIBe01EFl34fYq72R0voDIaasludIfX0zj1\n44rTVz83V3gFzPil+ptG+1jB4h3wABF/4RWfqv8krMhBDMoEca1uCMTIpfTWkO2/\nsw1g2VwTGfWbWP5hcYQbOxRVSJ4HGlRyqCZtyU1Pr4ITT88tjjpyeUPIeivWgrrI\nNKP+UCByrN/7HWRMAC1klm/FBp/XUQwNloj01c4F4lnw4aFURPlfgOKvC7Qv/AhX\nAVXB1OEleVA8TDFdQRk/fETa6156mb9hILuyXKxs0GL5eoKdlsbusrU5cWAxOXPE\nGEP3rCAsL4wY/D82+vXypH+TRpdZYkVDj5I0EBG4OmazUdjXbjksv+EeK7Mor3fR\nc2i/+2oAAppK+Pj+GlHCe3Iqxlv9N81AgZ/wAhKgBkzCflggTE9biCdyYSaBkvS9\nWa+b+O6qVv85zWM13nuxL1FGfIYuyy++tSVJJL2crzFQp4yBceoPrNbuCD5xXHc6\nahHLq4ufC1YSzJtGbb056U+ETp87A65bNp/zJQ4/uei/W98RKc4dB43QWjUOO7jm\nH+ynVyNAb/tyTyy46BzGw9MmcP/qckBqVLkBvpNGP/KPTgebAvuwaXUjN66WpQI5\nTaA6CjOkFv6c7VgD++FTao+7DGOZLxp2i6vEC6lZUIOo8urO4XA=\n=g/wf\n-----END PGP SIGNATURE-----",
        "payload": "tree 8eb7cffba1c848c3b7b928379780a4fa9c25aaef\nparent 2ef52d3cf11bd3b1117da8a7affcf9fcfd133767\nparent 40ec7c7b0d2a5a37de90635b676b16884b622dd6\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1484852984 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1484852989 +0100\n\nMerge #9461: [Qt] Improve progress display during headers-sync and peer-finding\n\n40ec7c7 [Qt] Improve progress display during headers-sync and peer-finding (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b25068697fdbfe3bc463b470f1295a44318c4467",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b25068697fdbfe3bc463b470f1295a44318c4467",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b25068697fdbfe3bc463b470f1295a44318c4467/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2ef52d3cf11bd3b1117da8a7affcf9fcfd133767",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ef52d3cf11bd3b1117da8a7affcf9fcfd133767",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ef52d3cf11bd3b1117da8a7affcf9fcfd133767"
      },
      {
        "sha": "40ec7c7b0d2a5a37de90635b676b16884b622dd6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40ec7c7b0d2a5a37de90635b676b16884b622dd6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/40ec7c7b0d2a5a37de90635b676b16884b622dd6"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 18,
      "deletions": 3
    },
    "files": [
      {
        "sha": "b86437cede22dda3418a473ae53f2a044539d6c6",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 2,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b25068697fdbfe3bc463b470f1295a44318c4467/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b25068697fdbfe3bc463b470f1295a44318c4467/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=b25068697fdbfe3bc463b470f1295a44318c4467",
        "patch": "@@ -748,6 +748,15 @@ void BitcoinGUI::setNetworkActive(bool networkActive)\n     updateNetworkState();\n }\n \n+void BitcoinGUI::updateHeadersSyncProgressLabel()\n+{\n+    int64_t headersTipTime = clientModel->getHeaderTipTime();\n+    int headersTipHeight = clientModel->getHeaderTipHeight();\n+    int estHeadersLeft = (GetTime() - headersTipTime)/600;\n+    if (estHeadersLeft > REQ_HEADER_HEIGHT_DELTA_SYNC)\n+        progressBarLabel->setText(tr(\"Syncing Headers (%1%)...\").arg(QString::number(100.0 / (headersTipHeight+estHeadersLeft)*headersTipHeight, 'f', 1)));\n+}\n+\n void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate, double nVerificationProgress, bool header)\n {\n     if (modalOverlay)\n@@ -768,9 +777,11 @@ void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate, double nVer\n     switch (blockSource) {\n         case BLOCK_SOURCE_NETWORK:\n             if (header) {\n+                updateHeadersSyncProgressLabel();\n                 return;\n             }\n             progressBarLabel->setText(tr(\"Synchronizing with network...\"));\n+            updateHeadersSyncProgressLabel();\n             break;\n         case BLOCK_SOURCE_DISK:\n             if (header) {\n@@ -786,8 +797,7 @@ void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate, double nVer\n             if (header) {\n                 return;\n             }\n-            // Case: not Importing, not Reindexing and no network connection\n-            progressBarLabel->setText(tr(\"No block source available...\"));\n+            progressBarLabel->setText(tr(\"Connecting to peers...\"));\n             break;\n     }\n "
      },
      {
        "sha": "62d419d3ef8d43c874b19a583a7412d8ff807113",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b25068697fdbfe3bc463b470f1295a44318c4467/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b25068697fdbfe3bc463b470f1295a44318c4467/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=b25068697fdbfe3bc463b470f1295a44318c4467",
        "patch": "@@ -149,6 +149,8 @@ class BitcoinGUI : public QMainWindow\n     /** Update UI with latest network info from model. */\n     void updateNetworkState();\n \n+    void updateHeadersSyncProgressLabel();\n+\n Q_SIGNALS:\n     /** Signal raised when a URI was entered or dragged to the GUI */\n     void receivedURI(const QString &uri);"
      },
      {
        "sha": "2c10e633b84fdde5be03c4e748dfb8b0d7823d18",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b25068697fdbfe3bc463b470f1295a44318c4467/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b25068697fdbfe3bc463b470f1295a44318c4467/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=b25068697fdbfe3bc463b470f1295a44318c4467",
        "patch": "@@ -66,7 +66,7 @@ class ClientModel : public QObject\n \n     //! Return true if core is doing initial block download\n     bool inInitialBlockDownload() const;\n-    //! Return true if core is importing blocks\n+    //! Returns enum BlockSource of the current importing/syncing state\n     enum BlockSource getBlockSource() const;\n     //! Return true if network activity in core is enabled\n     bool getNetworkActive() const;"
      },
      {
        "sha": "6d1f12164ef1ff8e162ab3d4658090f6504d0bf3",
        "filename": "src/qt/modaloverlay.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b25068697fdbfe3bc463b470f1295a44318c4467/src/qt/modaloverlay.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b25068697fdbfe3bc463b470f1295a44318c4467/src/qt/modaloverlay.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/modaloverlay.h?ref=b25068697fdbfe3bc463b470f1295a44318c4467",
        "patch": "@@ -8,6 +8,9 @@\n #include <QDateTime>\n #include <QWidget>\n \n+//! The required delta of headers to the estimated number of available headers until we show the IBD progress\n+static const int REQ_HEADER_HEIGHT_DELTA_SYNC = 24;\n+\n namespace Ui {\n     class ModalOverlay;\n }"
      }
    ]
  },
  {
    "sha": "82274c02ed2d82537dc55f008a29edb1bc09bbc4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MjI3NGMwMmVkMmQ4MjUzN2RjNTVmMDA4YTI5ZWRiMWJjMDliYmM0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-19T19:19:29Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-19T19:20:04Z"
      },
      "message": "Merge #9535: Split CNode::cs_vSend: message processing and message sending\n\n376b3c2 Make the cs_sendProcessing a LOCK instead of a TRY_LOCK (Matt Corallo)\nd7c58ad Split CNode::cs_vSend: message processing and message sending (Matt Corallo)",
      "tree": {
        "sha": "fa0f03543fae1b52dab95bbb607e8a3b1e73fae3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fa0f03543fae1b52dab95bbb607e8a3b1e73fae3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/82274c02ed2d82537dc55f008a29edb1bc09bbc4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEbBAABCgAGBQJYgRFkAAoJEHSBCwEjRsmmGlMH+IjZchPU5UaoBX+SwNo05C4F\n4q26qetsu+6+zRHdiEvSDo8ydseE4sG3Ce/eEgiFAKXtiBOrZyN1qY/ed3FV+0PV\n9h83hOIGjN7S43dHWxLJM2sEAig47x+bXyANrKuxQRuFbmrUkf9SGEFRnCB5GChG\nPT4N2DQ+/R3Qy74pWXpNyosrtAgBBdYbjbasl28KBxXKH094HYO8PD83+42NRf+t\nsTf7D5emCpSqjF2lQ4W/n48NzYg4DDgVLI36hOPqYbC/1NB6OaxrtnEIy6rwsPCM\nafS4dBRNXpzrtt3nZS60f3pY/uG/sz7Jm8pHMKhiw89++II/NA3Qq1yJh0yDEw==\n=TMYf\n-----END PGP SIGNATURE-----",
        "payload": "tree fa0f03543fae1b52dab95bbb607e8a3b1e73fae3\nparent b25068697fdbfe3bc463b470f1295a44318c4467\nparent 376b3c2c6e329357e4793c1d1b90d1dc0f30fed0\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1484853569 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1484853604 +0100\n\nMerge #9535: Split CNode::cs_vSend: message processing and message sending\n\n376b3c2 Make the cs_sendProcessing a LOCK instead of a TRY_LOCK (Matt Corallo)\nd7c58ad Split CNode::cs_vSend: message processing and message sending (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82274c02ed2d82537dc55f008a29edb1bc09bbc4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/82274c02ed2d82537dc55f008a29edb1bc09bbc4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82274c02ed2d82537dc55f008a29edb1bc09bbc4/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b25068697fdbfe3bc463b470f1295a44318c4467",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b25068697fdbfe3bc463b470f1295a44318c4467",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b25068697fdbfe3bc463b470f1295a44318c4467"
      },
      {
        "sha": "376b3c2c6e329357e4793c1d1b90d1dc0f30fed0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/376b3c2c6e329357e4793c1d1b90d1dc0f30fed0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/376b3c2c6e329357e4793c1d1b90d1dc0f30fed0"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 12,
      "deletions": 15
    },
    "files": [
      {
        "sha": "1019d595442888d6645ab07a3d5dddbe33a32ef2",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 15,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82274c02ed2d82537dc55f008a29edb1bc09bbc4/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82274c02ed2d82537dc55f008a29edb1bc09bbc4/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=82274c02ed2d82537dc55f008a29edb1bc09bbc4",
        "patch": "@@ -1147,12 +1147,10 @@ void CConnman::ThreadSocketHandler()\n                 // * Hand off all complete messages to the processor, to be handled without\n                 //   blocking here.\n                 {\n-                    TRY_LOCK(pnode->cs_vSend, lockSend);\n-                    if (lockSend) {\n-                        if (!pnode->vSendMsg.empty()) {\n-                            FD_SET(pnode->hSocket, &fdsetSend);\n-                            continue;\n-                        }\n+                    LOCK(pnode->cs_vSend);\n+                    if (!pnode->vSendMsg.empty()) {\n+                        FD_SET(pnode->hSocket, &fdsetSend);\n+                        continue;\n                     }\n                 }\n                 {\n@@ -1272,12 +1270,10 @@ void CConnman::ThreadSocketHandler()\n                 continue;\n             if (FD_ISSET(pnode->hSocket, &fdsetSend))\n             {\n-                TRY_LOCK(pnode->cs_vSend, lockSend);\n-                if (lockSend) {\n-                    size_t nBytes = SocketSendData(pnode);\n-                    if (nBytes) {\n-                        RecordBytesSent(nBytes);\n-                    }\n+                LOCK(pnode->cs_vSend);\n+                size_t nBytes = SocketSendData(pnode);\n+                if (nBytes) {\n+                    RecordBytesSent(nBytes);\n                 }\n             }\n \n@@ -1875,9 +1871,8 @@ void CConnman::ThreadMessageHandler()\n \n             // Send messages\n             {\n-                TRY_LOCK(pnode->cs_vSend, lockSend);\n-                if (lockSend)\n-                    GetNodeSignals().SendMessages(pnode, *this, flagInterruptMsgProc);\n+                LOCK(pnode->cs_sendProcessing);\n+                GetNodeSignals().SendMessages(pnode, *this, flagInterruptMsgProc);\n             }\n             if (flagInterruptMsgProc)\n                 return;"
      },
      {
        "sha": "505962f51a0791789b09f721162ed9925a9bd453",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82274c02ed2d82537dc55f008a29edb1bc09bbc4/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82274c02ed2d82537dc55f008a29edb1bc09bbc4/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=82274c02ed2d82537dc55f008a29edb1bc09bbc4",
        "patch": "@@ -618,6 +618,8 @@ class CNode\n     std::list<CNetMessage> vProcessMsg;\n     size_t nProcessQueueSize;\n \n+    CCriticalSection cs_sendProcessing;\n+\n     std::deque<CInv> vRecvGetData;\n     uint64_t nRecvBytes;\n     std::atomic<int> nRecvVersion;"
      }
    ]
  },
  {
    "sha": "9aa4e6a6c2cb9b4465d014c8efa672a919ff8f89",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YWE0ZTZhNmMyY2I5YjQ0NjVkMDE0YzhlZmE2NzJhOTE5ZmY4Zjg5",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-12-19T08:04:05Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-19T19:38:37Z"
      },
      "message": "[Wallet] Add an option to keep the change address key, true by default",
      "tree": {
        "sha": "6e7eb37a4f2697417f84e3c3029e328132c7ad59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6e7eb37a4f2697417f84e3c3029e328132c7ad59"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9aa4e6a6c2cb9b4465d014c8efa672a919ff8f89",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAliBFb0ACgkQKdS8tkFv\nU+xQEBAAgtSKhLSvuygJhVYK3bVdvgVDcEETsl5rOHUcep4L31uv9pjXYxnl751A\nYKbuLGq9xdqwI6MUPbzL4WxwYGqVQEVsHpV5+krMCxNRke1KpE3SuHTA3DfYhB+Q\naLXNzhIGxh1tFd1UyBgWfx5wpdXvRsIq4FYMmBo2aPcJPr5P2FYsVjV55LQz24Lf\n9ejTVZsiUiVeBjXZS0M+4r53eKuxaM4EDAG3neLG3jIJ2uZot66zRV0Mr+jefRWY\nDq13FfJo/zxdO+R1RN5r5tgCx4t0ybBbPpc57YIVm/D/JvIvPp76uCZ0F6wsPXxA\nPc2SGLewYAAs3XNgcjxWJoo1j2ABXVJzTvhG1x4XN7elqYOh1FF+d1cTn4TNEmZs\n+D8CyHGPptAW9Yign3FMvjzZ1P5B4+zKawrW7/7j+hlpqmMhZDo+NcJW6wdnBuHm\nuzaaqxHkq8+/WhUOTugirUxJTT3LDmIuwvxbHqRiyMl1qoEIyvawqTVyqyzdZgfB\nT+ESr9er0QKYCUdNYbQQ9crenuYEm/r+M5mAito8C+cAwXPdStFb7+AXShHOL2uH\nzXmkYMqtZEhOj1fX5LuP78pQGzRhy1kqgawhJOATU/czQcm8eDBUMq/i7d6/zXPA\ntsFC+Od0Aggdtvvwuk662di3eHvs1jHoEO6tJYhPPMsLdCaPaPs=\n=CaVx\n-----END PGP SIGNATURE-----",
        "payload": "tree 6e7eb37a4f2697417f84e3c3029e328132c7ad59\nparent 9c9af5ab2d9e461bb6f2dee1390025ce82a3625b\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1482134645 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1484854717 +0100\n\n[Wallet] Add an option to keep the change address key, true by default\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9aa4e6a6c2cb9b4465d014c8efa672a919ff8f89",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9aa4e6a6c2cb9b4465d014c8efa672a919ff8f89",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9aa4e6a6c2cb9b4465d014c8efa672a919ff8f89/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9c9af5ab2d9e461bb6f2dee1390025ce82a3625b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c9af5ab2d9e461bb6f2dee1390025ce82a3625b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9c9af5ab2d9e461bb6f2dee1390025ce82a3625b"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 13,
      "deletions": 3
    },
    "files": [
      {
        "sha": "fa54197e7554c1caa8f581ff9d8472b3ca799df7",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9aa4e6a6c2cb9b4465d014c8efa672a919ff8f89/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9aa4e6a6c2cb9b4465d014c8efa672a919ff8f89/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=9aa4e6a6c2cb9b4465d014c8efa672a919ff8f89",
        "patch": "@@ -2496,6 +2496,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n                             \"     \\\"changePosition\\\"         (numeric, optional, default random) The index of the change output\\n\"\n                             \"     \\\"includeWatching\\\"        (boolean, optional, default false) Also select inputs which are watch only\\n\"\n                             \"     \\\"lockUnspents\\\"           (boolean, optional, default false) Lock selected unspent outputs\\n\"\n+                            \"     \\\"reserveChangeKey\\\"       (boolean, optional, default true) Reserves the change output key from the keypool\\n\"\n                             \"     \\\"feeRate\\\"                (numeric, optional, default not set: makes wallet determine the fee) Set a specific feerate (\" + CURRENCY_UNIT + \" per KB)\\n\"\n                             \"     \\\"subtractFeeFromOutputs\\\" (array, optional) A json array of integers.\\n\"\n                             \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n@@ -2528,6 +2529,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     int changePosition = -1;\n     bool includeWatching = false;\n     bool lockUnspents = false;\n+    bool reserveChangeKey = true;\n     CFeeRate feeRate = CFeeRate(0);\n     bool overrideEstimatedFeerate = false;\n     UniValue subtractFeeFromOutputs;\n@@ -2549,6 +2551,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n                 {\"changePosition\", UniValueType(UniValue::VNUM)},\n                 {\"includeWatching\", UniValueType(UniValue::VBOOL)},\n                 {\"lockUnspents\", UniValueType(UniValue::VBOOL)},\n+                {\"reserveChangeKey\", UniValueType(UniValue::VBOOL)},\n                 {\"feeRate\", UniValueType()}, // will be checked below\n                 {\"subtractFeeFromOutputs\", UniValueType(UniValue::VARR)},\n             },\n@@ -2572,6 +2575,9 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n         if (options.exists(\"lockUnspents\"))\n             lockUnspents = options[\"lockUnspents\"].get_bool();\n \n+        if (options.exists(\"reserveChangeKey\"))\n+            reserveChangeKey = options[\"reserveChangeKey\"].get_bool();\n+\n         if (options.exists(\"feeRate\"))\n         {\n             feeRate = CFeeRate(AmountFromValue(options[\"feeRate\"]));\n@@ -2608,7 +2614,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     CAmount nFeeOut;\n     string strFailReason;\n \n-    if(!pwalletMain->FundTransaction(tx, nFeeOut, overrideEstimatedFeerate, feeRate, changePosition, strFailReason, includeWatching, lockUnspents, setSubtractFeeFromOutputs, changeAddress))\n+    if(!pwalletMain->FundTransaction(tx, nFeeOut, overrideEstimatedFeerate, feeRate, changePosition, strFailReason, includeWatching, lockUnspents, setSubtractFeeFromOutputs, reserveChangeKey, changeAddress))\n         throw JSONRPCError(RPC_INTERNAL_ERROR, strFailReason);\n \n     UniValue result(UniValue::VOBJ);"
      },
      {
        "sha": "06382af1847f8eefd29005e86f33c4ae96efee4d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9aa4e6a6c2cb9b4465d014c8efa672a919ff8f89/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9aa4e6a6c2cb9b4465d014c8efa672a919ff8f89/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=9aa4e6a6c2cb9b4465d014c8efa672a919ff8f89",
        "patch": "@@ -2192,7 +2192,7 @@ bool CWallet::SelectCoins(const vector<COutput>& vAvailableCoins, const CAmount&\n     return res;\n }\n \n-bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, bool overrideEstimatedFeeRate, const CFeeRate& specificFeeRate, int& nChangePosInOut, std::string& strFailReason, bool includeWatching, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, const CTxDestination& destChange)\n+bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, bool overrideEstimatedFeeRate, const CFeeRate& specificFeeRate, int& nChangePosInOut, std::string& strFailReason, bool includeWatching, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, bool keepReserveKey, const CTxDestination& destChange)\n {\n     vector<CRecipient> vecSend;\n \n@@ -2241,6 +2241,10 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, bool ov\n         }\n     }\n \n+    // optionally keep the change output key\n+    if (keepReserveKey)\n+        reservekey.KeepKey();\n+\n     return true;\n }\n "
      },
      {
        "sha": "fb20062b965cb07349a397404bf976469f926d35",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9aa4e6a6c2cb9b4465d014c8efa672a919ff8f89/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9aa4e6a6c2cb9b4465d014c8efa672a919ff8f89/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=9aa4e6a6c2cb9b4465d014c8efa672a919ff8f89",
        "patch": "@@ -780,7 +780,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * Insert additional inputs into the transaction by\n      * calling CreateTransaction();\n      */\n-    bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, bool overrideEstimatedFeeRate, const CFeeRate& specificFeeRate, int& nChangePosInOut, std::string& strFailReason, bool includeWatching, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, const CTxDestination& destChange = CNoDestination());\n+    bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, bool overrideEstimatedFeeRate, const CFeeRate& specificFeeRate, int& nChangePosInOut, std::string& strFailReason, bool includeWatching, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, bool keepReserveKey = true, const CTxDestination& destChange = CNoDestination());\n \n     /**\n      * Create a new transaction paying the recipients with a set of coins"
      }
    ]
  },
  {
    "sha": "9eb325d079c7bbce749abe79d0bbac34d8ef5806",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZWIzMjVkMDc5YzdiYmNlNzQ5YWJlNzlkMGJiYWMzNGQ4ZWY1ODA2",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-12-19T08:10:33Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-19T19:45:29Z"
      },
      "message": "[QA] Add test for fundrawtransactions new reserveChangeKey option",
      "tree": {
        "sha": "075ae0d35c8ff1edde86ef91b31841dc9d93a16b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/075ae0d35c8ff1edde86ef91b31841dc9d93a16b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9eb325d079c7bbce749abe79d0bbac34d8ef5806",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAliBF1oACgkQKdS8tkFv\nU+w4lw/+MSWfWLmVZBDw/VSs3UDRL5Y2tIW/YNXF+KEhSURmzg6386CVbihsRpbJ\ntgFLPqKPGOFnYzt3VpJgoIDiSMWQD7sam9u4GBTK4jDyFhp1/Jr6q+QkgoKM4R3u\nSXJ4OF/Dtc/0dD8EZ7ggCE9jGB8jbbW8YLQjBumYDSlz630FGpD5avo34LhvGVZS\nXArOPRIAK7hi/S5Rk4CLOksETCd3S5RuQfZpKfw4Ric+eZI9BTQrQwlQpP678/u5\nyPf3Upp96qNZc8zSXHDQqjCPpmimbFQXnGBB7FPpiOlMhyTp6sP/d4j8ON7GQOZ3\naS+oJ4enE8q3PljHGrKv+PZQCnh07Sxj0+b9qQS7ydOKgozh75g7TMI9CgDviPAd\nvvo+1X7X9RNw0t3jnAVdDuLVJraw6URxMBsZQnXgpkX559wfKVf/aloNlChT0J7t\n4yimbPHYN/N1I6IFkdNvkqab51aQJwH4GMl/KCZ/YJxzQnETZM/zs1oRWsuNih9i\nPIbNwXUSs3daKhtIrAY9ZMfUj2utT62P4MB+yXGd9F/VGN4ijJGsdnBULkXeUxKD\ndH1wRQ7mbIpx7HTg00R9YDwuEoFwAu8iZ7ba1W6gCzTsE/xy5OgFznQU6S3/LdBQ\nqVZzdD1+XfHagBZukzl7G0kvWciOPTllW+rqzUuyRsBfTDWSm18=\n=J+TU\n-----END PGP SIGNATURE-----",
        "payload": "tree 075ae0d35c8ff1edde86ef91b31841dc9d93a16b\nparent 9aa4e6a6c2cb9b4465d014c8efa672a919ff8f89\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1482135033 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1484855129 +0100\n\n[QA] Add test for fundrawtransactions new reserveChangeKey option\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9eb325d079c7bbce749abe79d0bbac34d8ef5806",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9eb325d079c7bbce749abe79d0bbac34d8ef5806",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9eb325d079c7bbce749abe79d0bbac34d8ef5806/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9aa4e6a6c2cb9b4465d014c8efa672a919ff8f89",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9aa4e6a6c2cb9b4465d014c8efa672a919ff8f89",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9aa4e6a6c2cb9b4465d014c8efa672a919ff8f89"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 27,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b279c0b9d65694302fe20b2929762d0270b8ef28",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 27,
        "deletions": 1,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9eb325d079c7bbce749abe79d0bbac34d8ef5806/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9eb325d079c7bbce749abe79d0bbac34d8ef5806/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=9eb325d079c7bbce749abe79d0bbac34d8ef5806",
        "patch": "@@ -651,7 +651,7 @@ def run_test(self):\n         assert_equal(len(self.nodes[3].listunspent(1)), 1)\n \n         inputs = []\n-        outputs = {self.nodes[2].getnewaddress() : 1}\n+        outputs = {self.nodes[3].getnewaddress() : 1}\n         rawtx = self.nodes[3].createrawtransaction(inputs, outputs)\n         result = self.nodes[3].fundrawtransaction(rawtx) # uses min_relay_tx_fee (set by settxfee)\n         result2 = self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 2*min_relay_tx_fee})\n@@ -660,6 +660,32 @@ def run_test(self):\n         assert_fee_amount(result2['fee'], count_bytes(result2['hex']), 2 * result_fee_rate)\n         assert_fee_amount(result3['fee'], count_bytes(result3['hex']), 10 * result_fee_rate)\n \n+        #############################\n+        # Test address reuse option #\n+        #############################\n+\n+        result3 = self.nodes[3].fundrawtransaction(rawtx, {\"reserveChangeKey\": False})\n+        res_dec = self.nodes[0].decoderawtransaction(result3[\"hex\"])\n+        changeaddress = \"\"\n+        for out in res_dec['vout']:\n+            if out['value'] > 1.0:\n+                changeaddress += out['scriptPubKey']['addresses'][0]\n+        assert(changeaddress != \"\")\n+        nextaddr = self.nodes[3].getnewaddress()\n+        # frt should not have removed the key from the keypool\n+        assert(changeaddress == nextaddr)\n+\n+        result3 = self.nodes[3].fundrawtransaction(rawtx)\n+        res_dec = self.nodes[0].decoderawtransaction(result3[\"hex\"])\n+        changeaddress = \"\"\n+        for out in res_dec['vout']:\n+            if out['value'] > 1.0:\n+                changeaddress += out['scriptPubKey']['addresses'][0]\n+        assert(changeaddress != \"\")\n+        nextaddr = self.nodes[3].getnewaddress()\n+        # Now the change address key should be removed from the keypool\n+        assert(changeaddress != nextaddr)\n+\n         ######################################\n         # Test subtractFeeFromOutputs option #\n         ######################################"
      }
    ]
  },
  {
    "sha": "c9f3062d551823f006d400dddb54c12620cd29c4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOWYzMDYyZDU1MTgyM2YwMDZkNDAwZGRkYjU0YzEyNjIwY2QyOWM0",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-12-19T08:12:28Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-19T19:45:34Z"
      },
      "message": "Add fundrawtransactions new reserveChangeKey option to the release notes",
      "tree": {
        "sha": "78235a4b0954aba96d65695398a903b9fee13604",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/78235a4b0954aba96d65695398a903b9fee13604"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c9f3062d551823f006d400dddb54c12620cd29c4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAliBF14ACgkQKdS8tkFv\nU+xnlg/+NrBdGporlOsVeyDLgGozVz9cvXC9RXlv+wsMlVEkgIJokVy8oz5beuAD\nn636TXe8bL06eBzlrfHb/j7B0h1LU3lU4KQB2QR3kasiIp3yduUsbDHZLsnS17s2\nyn6liOjpy46nd3WXB93XKFx+LOtH+0svy4r781vOukVoD3TV7gea2pGACEJPlnWW\nzxCzqxkrpF2pEWMt5blNeb5OR5rFHHr+gdZUeaw9t/cYK7GfO/MZ2FDKRbTQalGW\nsHRNQlXrhANqk1AwJlvdDoqPg4ZElF4jU3fhOoennyZYYFWX8OLrMvoGiRV9al1V\n0s/1wAe7vh7GId+47L0o01y2v/ugGokf0ra5UTwuDWu87YQuZUE8YnpGks1tzXjk\nw7EwQl1q1HA17ToPhLW094CSw5HEdIlnyCIaWLanKNCz61+zhDbRiLaLxue1lx+f\nY0EFolwGdjhUqWnTjKTadZluHyXfBCs+Xo2mU6WtvCUIGL+1Y687xwzYPJ4gJh1r\nbDTDdBdSV79CGjJx6m/uxK7I2KWdnKUQxbtSLgkO0PquRaqSeWa+ofnosFCDpBAy\ne/bDnVweHeQ/WRAh2qCJIWIIRfIj4QeuG9rTj99xVqyXxpDaoUIgq9fE/B8AGACM\nWSau9Sda89r+MmIGuLlR7v4FVxxIMCdHSHoCOMzAZYsSmywRixI=\n=/J8Y\n-----END PGP SIGNATURE-----",
        "payload": "tree 78235a4b0954aba96d65695398a903b9fee13604\nparent 9eb325d079c7bbce749abe79d0bbac34d8ef5806\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1482135148 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1484855134 +0100\n\nAdd fundrawtransactions new reserveChangeKey option to the release notes\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9f3062d551823f006d400dddb54c12620cd29c4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c9f3062d551823f006d400dddb54c12620cd29c4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9f3062d551823f006d400dddb54c12620cd29c4/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9eb325d079c7bbce749abe79d0bbac34d8ef5806",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9eb325d079c7bbce749abe79d0bbac34d8ef5806",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9eb325d079c7bbce749abe79d0bbac34d8ef5806"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0ea9e1949e381695c6f3977d8c978d8a937c65bd",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9f3062d551823f006d400dddb54c12620cd29c4/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9f3062d551823f006d400dddb54c12620cd29c4/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=c9f3062d551823f006d400dddb54c12620cd29c4",
        "patch": "@@ -128,6 +128,16 @@ Call \"getmininginfo\" loses the \"testnet\" field in favor of the more generic \"cha\n \n ### Wallet\n \n+0.14.0 Fundrawtransaction change address reuse\n+==============================================\n+\n+Before 0.14, `fundrawtransaction` was by default wallet stateless. In almost all cases `fundrawtransaction` does add a change-output to the outputs of the funded transaction. Before 0.14, the used keypool key was never marked as change-address key and directly returned to the keypool (leading to address reuse).\n+Before 0.14, calling `getnewaddress` directly after `fundrawtransaction` did generate the same address as the change-output address.\n+\n+Since 0.14, fundrawtransaction does reserve the change-output-key from the keypool by default (optional by setting  `reserveChangeKey`, default = `true`)\n+\n+Users should also consider using `getrawchangeaddress()` in conjunction with `fundrawtransaction`'s `changeAddress` option.\n+\n ### GUI\n \n ### Tests"
      }
    ]
  },
  {
    "sha": "fa4d47814f298523aeb9a6658cc74fc46d316e33",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTRkNDc4MTRmMjk4NTIzYWViOWE2NjU4Y2M3NGZjNDZkMzE2ZTMz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-01-19T19:51:59Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-01-19T19:47:04Z"
      },
      "message": "qt: Use nPowTargetSpacing constant",
      "tree": {
        "sha": "b2a1f2e2df6e7d1b6a38eeb999cb3f0f9b4f9385",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b2a1f2e2df6e7d1b6a38eeb999cb3f0f9b4f9385"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa4d47814f298523aeb9a6658cc74fc46d316e33",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4d47814f298523aeb9a6658cc74fc46d316e33",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa4d47814f298523aeb9a6658cc74fc46d316e33",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4d47814f298523aeb9a6658cc74fc46d316e33/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b25068697fdbfe3bc463b470f1295a44318c4467",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b25068697fdbfe3bc463b470f1295a44318c4467",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b25068697fdbfe3bc463b470f1295a44318c4467"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 10,
      "deletions": 6
    },
    "files": [
      {
        "sha": "f86b09644b86c3ab7a19a4f34442cc2735b5d395",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4d47814f298523aeb9a6658cc74fc46d316e33/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4d47814f298523aeb9a6658cc74fc46d316e33/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=fa4d47814f298523aeb9a6658cc74fc46d316e33",
        "patch": "@@ -31,6 +31,7 @@\n #include \"macdockiconhandler.h\"\n #endif\n \n+#include \"chainparams.h\"\n #include \"init.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n@@ -752,8 +753,8 @@ void BitcoinGUI::updateHeadersSyncProgressLabel()\n {\n     int64_t headersTipTime = clientModel->getHeaderTipTime();\n     int headersTipHeight = clientModel->getHeaderTipHeight();\n-    int estHeadersLeft = (GetTime() - headersTipTime)/600;\n-    if (estHeadersLeft > REQ_HEADER_HEIGHT_DELTA_SYNC)\n+    int estHeadersLeft = (GetTime() - headersTipTime) / Params().GetConsensus().nPowTargetSpacing;\n+    if (estHeadersLeft > HEADER_HEIGHT_DELTA_SYNC)\n         progressBarLabel->setText(tr(\"Syncing Headers (%1%)...\").arg(QString::number(100.0 / (headersTipHeight+estHeadersLeft)*headersTipHeight, 'f', 1)));\n }\n "
      },
      {
        "sha": "4779ffa43f3a3ae41701a82427254322f020b664",
        "filename": "src/qt/modaloverlay.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4d47814f298523aeb9a6658cc74fc46d316e33/src/qt/modaloverlay.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4d47814f298523aeb9a6658cc74fc46d316e33/src/qt/modaloverlay.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/modaloverlay.cpp?ref=fa4d47814f298523aeb9a6658cc74fc46d316e33",
        "patch": "@@ -7,6 +7,8 @@\n \n #include \"guiutil.h\"\n \n+#include \"chainparams.h\"\n+\n #include <QResizeEvent>\n #include <QPropertyAnimation>\n \n@@ -125,11 +127,11 @@ void ModalOverlay::tipUpdate(int count, const QDateTime& blockDate, double nVeri\n \n     // estimate the number of headers left based on nPowTargetSpacing\n     // and check if the gui is not aware of the the best header (happens rarely)\n-    int estimateNumHeadersLeft = bestHeaderDate.secsTo(currentDate) / 600;\n+    int estimateNumHeadersLeft = bestHeaderDate.secsTo(currentDate) / Params().GetConsensus().nPowTargetSpacing;\n     bool hasBestHeader = bestHeaderHeight >= count;\n \n     // show remaining number of blocks\n-    if (estimateNumHeadersLeft < 24 && hasBestHeader) {\n+    if (estimateNumHeadersLeft < HEADER_HEIGHT_DELTA_SYNC && hasBestHeader) {\n         ui->numberOfBlocksLeft->setText(QString::number(bestHeaderHeight - count));\n     } else {\n         ui->numberOfBlocksLeft->setText(tr(\"Unknown. Syncing Headers (%1)...\").arg(bestHeaderHeight));"
      },
      {
        "sha": "21ccdbd8397e23bad36b45a6e9fd99e829428217",
        "filename": "src/qt/modaloverlay.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4d47814f298523aeb9a6658cc74fc46d316e33/src/qt/modaloverlay.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4d47814f298523aeb9a6658cc74fc46d316e33/src/qt/modaloverlay.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/modaloverlay.h?ref=fa4d47814f298523aeb9a6658cc74fc46d316e33",
        "patch": "@@ -9,7 +9,7 @@\n #include <QWidget>\n \n //! The required delta of headers to the estimated number of available headers until we show the IBD progress\n-static const int REQ_HEADER_HEIGHT_DELTA_SYNC = 24;\n+static constexpr int HEADER_HEIGHT_DELTA_SYNC = 24;\n \n namespace Ui {\n     class ModalOverlay;"
      },
      {
        "sha": "1e2842df73c7558725cd289734510a93d08ebec9",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4d47814f298523aeb9a6658cc74fc46d316e33/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4d47814f298523aeb9a6658cc74fc46d316e33/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=fa4d47814f298523aeb9a6658cc74fc46d316e33",
        "patch": "@@ -16,6 +16,7 @@\n #include \"walletmodel.h\"\n \n #include \"base58.h\"\n+#include \"chainparams.h\"\n #include \"wallet/coincontrol.h\"\n #include \"validation.h\" // mempool and minRelayTxFee\n #include \"ui_interface.h\"\n@@ -608,7 +609,7 @@ void SendCoinsDialog::updateGlobalFeeVariables()\n         CoinControlDialog::coinControl->nMinimumTotalFee = 0;\n \n         // show the estimated reuquired time for confirmation\n-        ui->confirmationTargetLabel->setText(GUIUtil::formatDurationStr(nConfirmTarget*600)+\" / \"+tr(\"%n block(s)\", \"\", nConfirmTarget));\n+        ui->confirmationTargetLabel->setText(GUIUtil::formatDurationStr(nConfirmTarget * Params().GetConsensus().nPowTargetSpacing) + \" / \" + tr(\"%n block(s)\", \"\", nConfirmTarget));\n     }\n     else\n     {"
      }
    ]
  },
  {
    "sha": "5b158707f23a290c750a083c8f7d43915bcc48c5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YjE1ODcwN2YyM2EyOTBjNzUwYTA4M2M4ZjdkNDM5MTViY2M0OGM1",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-01-19T21:17:38Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-01-20T01:31:29Z"
      },
      "message": "Use incrementalRelayFee for BIP 125 replacement",
      "tree": {
        "sha": "f0b49236012d13a64793127aed5f29918dcabd9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f0b49236012d13a64793127aed5f29918dcabd9c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5b158707f23a290c750a083c8f7d43915bcc48c5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b158707f23a290c750a083c8f7d43915bcc48c5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5b158707f23a290c750a083c8f7d43915bcc48c5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b158707f23a290c750a083c8f7d43915bcc48c5/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "82274c02ed2d82537dc55f008a29edb1bc09bbc4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82274c02ed2d82537dc55f008a29edb1bc09bbc4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/82274c02ed2d82537dc55f008a29edb1bc09bbc4"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "e605671e7dcf2f263aca366733206e50d94da8e2",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b158707f23a290c750a083c8f7d43915bcc48c5/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b158707f23a290c750a083c8f7d43915bcc48c5/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=5b158707f23a290c750a083c8f7d43915bcc48c5",
        "patch": "@@ -898,14 +898,14 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n             // Finally in addition to paying more fees than the conflicts the\n             // new transaction must pay for its own bandwidth.\n             CAmount nDeltaFees = nModifiedFees - nConflictingFees;\n-            if (nDeltaFees < ::minRelayTxFee.GetFee(nSize))\n+            if (nDeltaFees < ::incrementalRelayFee.GetFee(nSize))\n             {\n                 return state.DoS(0, false,\n                         REJECT_INSUFFICIENTFEE, \"insufficient fee\", false,\n                         strprintf(\"rejecting replacement %s, not enough additional fees to relay; %s < %s\",\n                               hash.ToString(),\n                               FormatMoney(nDeltaFees),\n-                              FormatMoney(::minRelayTxFee.GetFee(nSize))));\n+                              FormatMoney(::incrementalRelayFee.GetFee(nSize))));\n             }\n         }\n "
      },
      {
        "sha": "07c3688a4d3a46cec2fc36230951e6378df48798",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b158707f23a290c750a083c8f7d43915bcc48c5/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b158707f23a290c750a083c8f7d43915bcc48c5/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=5b158707f23a290c750a083c8f7d43915bcc48c5",
        "patch": "@@ -2652,8 +2652,8 @@ UniValue bumpfee(const JSONRPCRequest& request)\n             \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n             \"The user can specify a confirmation target for estimatefee.\\n\"\n             \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n-            \"At a minimum, the new fee rate must be high enough to pay a new relay fee (relay fee amount returned\\n\"\n-            \"by getnetworkinfo RPC) and to enter the node's mempool.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee over the original fee\\n\"\n+            \"to enter the node's mempool.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. txid                  (string, required) The txid to be bumped\\n\"\n             \"2. options               (object, optional)\\n\"\n@@ -2787,9 +2787,9 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     CFeeRate nNewFeeRate;\n \n     if (totalFee > 0) {\n-        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + minRelayTxFee.GetFee(maxNewTxSize);\n+        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + ::incrementalRelayFee.GetFee(maxNewTxSize);\n         if (totalFee < minTotalFee) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid totalFee, must be at least %s (oldFee %s + relayFee %s)\", FormatMoney(minTotalFee), nOldFeeRate.GetFee(maxNewTxSize), minRelayTxFee.GetFee(maxNewTxSize)));\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid totalFee, must be at least %s (oldFee %s + relayFee %s)\", FormatMoney(minTotalFee), nOldFeeRate.GetFee(maxNewTxSize), ::incrementalRelayFee.GetFee(maxNewTxSize)));\n         }\n         nNewFee = totalFee;\n         nNewFeeRate = CFeeRate(totalFee, maxNewTxSize);\n@@ -2804,9 +2804,9 @@ UniValue bumpfee(const JSONRPCRequest& request)\n             nNewFeeRate = CWallet::fallbackFee;\n         }\n \n-        // new fee rate must be at least old rate + minimum relay rate\n-        if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK()) {\n-            nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+        // new fee rate must be at least old rate + minimum incremental relay rate\n+        if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::incrementalRelayFee.GetFeePerK()) {\n+            nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::incrementalRelayFee.GetFeePerK());\n         }\n \n         nNewFee = nNewFeeRate.GetFee(maxNewTxSize);"
      }
    ]
  },
  {
    "sha": "de6400de5d4b654007f21901d9555ddea0face82",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZTY0MDBkZTVkNGI2NTQwMDdmMjE5MDFkOTU1NWRkZWEwZmFjZTgy",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-01-19T21:18:24Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-01-20T01:31:29Z"
      },
      "message": "Fix missing use of dustRelayFee",
      "tree": {
        "sha": "152210a039c84554b6a44df3e45e8fa8c242e100",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/152210a039c84554b6a44df3e45e8fa8c242e100"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/de6400de5d4b654007f21901d9555ddea0face82",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de6400de5d4b654007f21901d9555ddea0face82",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/de6400de5d4b654007f21901d9555ddea0face82",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de6400de5d4b654007f21901d9555ddea0face82/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5b158707f23a290c750a083c8f7d43915bcc48c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b158707f23a290c750a083c8f7d43915bcc48c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5b158707f23a290c750a083c8f7d43915bcc48c5"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "c0f7bbcb42fab94869ebc1e660040d0526238a14",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de6400de5d4b654007f21901d9555ddea0face82/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de6400de5d4b654007f21901d9555ddea0face82/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=de6400de5d4b654007f21901d9555ddea0face82",
        "patch": "@@ -2834,7 +2834,7 @@ UniValue bumpfee(const JSONRPCRequest& request)\n \n     // If the output would become dust, discard it (converting the dust to fee)\n     poutput->nValue -= nDelta;\n-    if (poutput->nValue <= poutput->GetDustThreshold(::minRelayTxFee)) {\n+    if (poutput->nValue <= poutput->GetDustThreshold(::dustRelayFee)) {\n         LogPrint(\"rpc\", \"Bumping fee and discarding dust output\\n\");\n         nNewFee += poutput->nValue;\n         tx.vout.erase(tx.vout.begin() + nOutput);"
      }
    ]
  },
  {
    "sha": "6b331e6cf977caa20c83a28a8c6c2af0b6c451c5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YjMzMWU2Y2Y5NzdjYWEyMGM4M2EyOGE4YzZjMmFmMGI2YzQ1MWM1",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-01-20T02:02:54Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-01-20T02:35:39Z"
      },
      "message": "Fix to have miner test aware of new separate block min tx fee",
      "tree": {
        "sha": "d193a52f0ed63168070e4bb328c0f36457a3f6b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d193a52f0ed63168070e4bb328c0f36457a3f6b0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b331e6cf977caa20c83a28a8c6c2af0b6c451c5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b331e6cf977caa20c83a28a8c6c2af0b6c451c5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6b331e6cf977caa20c83a28a8c6c2af0b6c451c5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b331e6cf977caa20c83a28a8c6c2af0b6c451c5/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "de6400de5d4b654007f21901d9555ddea0face82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de6400de5d4b654007f21901d9555ddea0face82",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/de6400de5d4b654007f21901d9555ddea0face82"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 7,
      "deletions": 4
    },
    "files": [
      {
        "sha": "f856d8a91a704b20b29c42cf74e2f06d7d9def64",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b331e6cf977caa20c83a28a8c6c2af0b6c451c5/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b331e6cf977caa20c83a28a8c6c2af0b6c451c5/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=6b331e6cf977caa20c83a28a8c6c2af0b6c451c5",
        "patch": "@@ -9,6 +9,7 @@\n #include \"consensus/validation.h\"\n #include \"validation.h\"\n #include \"miner.h\"\n+#include \"policy/policy.h\"\n #include \"pubkey.h\"\n #include \"script/standard.h\"\n #include \"txmempool.h\"\n@@ -24,6 +25,8 @@\n \n BOOST_FIXTURE_TEST_SUITE(miner_tests, TestingSetup)\n \n+static CFeeRate blockMinFeeRate = CFeeRate(DEFAULT_BLOCK_MIN_TX_FEE);\n+\n static\n struct {\n     unsigned char extranonce;\n@@ -112,16 +115,16 @@ void TestPackageSelection(const CChainParams& chainparams, CScript scriptPubKey,\n     BOOST_CHECK(pblocktemplate->block.vtx[2]->GetHash() == hashHighFeeTx);\n     BOOST_CHECK(pblocktemplate->block.vtx[3]->GetHash() == hashMediumFeeTx);\n \n-    // Test that a package below the min relay fee doesn't get included\n+    // Test that a package below the block min tx fee doesn't get included\n     tx.vin[0].prevout.hash = hashHighFeeTx;\n     tx.vout[0].nValue = 5000000000LL - 1000 - 50000; // 0 fee\n     uint256 hashFreeTx = tx.GetHash();\n     mempool.addUnchecked(hashFreeTx, entry.Fee(0).FromTx(tx));\n     size_t freeTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n \n     // Calculate a fee on child transaction that will put the package just\n-    // below the min relay fee (assuming 1 child tx of the same size).\n-    CAmount feeToUse = minRelayTxFee.GetFee(2*freeTxSize) - 1;\n+    // below the block min tx fee (assuming 1 child tx of the same size).\n+    CAmount feeToUse = blockMinFeeRate.GetFee(2*freeTxSize) - 1;\n \n     tx.vin[0].prevout.hash = hashFreeTx;\n     tx.vout[0].nValue = 5000000000LL - 1000 - 50000 - feeToUse;\n@@ -158,7 +161,7 @@ void TestPackageSelection(const CChainParams& chainparams, CScript scriptPubKey,\n     // This tx can't be mined by itself\n     tx.vin[0].prevout.hash = hashFreeTx2;\n     tx.vout.resize(1);\n-    feeToUse = minRelayTxFee.GetFee(freeTxSize);\n+    feeToUse = blockMinFeeRate.GetFee(freeTxSize);\n     tx.vout[0].nValue = 5000000000LL - 100000000 - feeToUse;\n     uint256 hashLowFeeTx2 = tx.GetHash();\n     mempool.addUnchecked(hashLowFeeTx2, entry.Fee(feeToUse).SpendsCoinbase(false).FromTx(tx));"
      }
    ]
  },
  {
    "sha": "bd92f2481c04db132555e151f4a57bb7a1c52ff1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZDkyZjI0ODFjMDRkYjEzMjU1NWUxNTFmNGE1N2JiN2ExYzUyZmYx",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-01-20T04:45:02Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-01-20T04:45:02Z"
      },
      "message": "[bugfix] save feeDelta instead of priorityDelta in DumpMempool",
      "tree": {
        "sha": "f898383bfab03a235d466d87e7d7b491fcc9dd56",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f898383bfab03a235d466d87e7d7b491fcc9dd56"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bd92f2481c04db132555e151f4a57bb7a1c52ff1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd92f2481c04db132555e151f4a57bb7a1c52ff1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bd92f2481c04db132555e151f4a57bb7a1c52ff1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd92f2481c04db132555e151f4a57bb7a1c52ff1/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "82274c02ed2d82537dc55f008a29edb1bc09bbc4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82274c02ed2d82537dc55f008a29edb1bc09bbc4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/82274c02ed2d82537dc55f008a29edb1bc09bbc4"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0509773aa9dc102a80eee9f70088ab6ac211a9e9",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd92f2481c04db132555e151f4a57bb7a1c52ff1/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd92f2481c04db132555e151f4a57bb7a1c52ff1/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=bd92f2481c04db132555e151f4a57bb7a1c52ff1",
        "patch": "@@ -4202,7 +4202,7 @@ void DumpMempool(void)\n     {\n         LOCK(mempool.cs);\n         for (const auto &i : mempool.mapDeltas) {\n-            mapDeltas[i.first] = i.second.first;\n+            mapDeltas[i.first] = i.second.second;\n         }\n         vinfo = mempool.infoAll();\n     }"
      }
    ]
  },
  {
    "sha": "8ff8d219c3d9a0b6f604bb99ca4a27ad77cdb69b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZmY4ZDIxOWMzZDlhMGI2ZjYwNGJiOTljYTRhMjdhZDc3Y2RiNjli",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2017-01-20T02:38:12Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2017-01-20T07:33:58Z"
      },
      "message": "Send final alert message to older peers after connecting.\n\nThe old Bitcoin alert system has long since been retired.\n( See also: https://bitcoin.org/en/alert/2016-11-01-alert-retirement )\n\nThis change causes each node to send any old peers that\n it connects with a copy of the final alert.\n\nThe alert it hardcode cancels all other alerts including\n other final alerts.",
      "tree": {
        "sha": "eac57a116e4f3fe4d88df2342e564d9f4accb72b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eac57a116e4f3fe4d88df2342e564d9f4accb72b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8ff8d219c3d9a0b6f604bb99ca4a27ad77cdb69b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ff8d219c3d9a0b6f604bb99ca4a27ad77cdb69b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8ff8d219c3d9a0b6f604bb99ca4a27ad77cdb69b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ff8d219c3d9a0b6f604bb99ca4a27ad77cdb69b/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "82274c02ed2d82537dc55f008a29edb1bc09bbc4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82274c02ed2d82537dc55f008a29edb1bc09bbc4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/82274c02ed2d82537dc55f008a29edb1bc09bbc4"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e49333ed2ca77ebbc77084a0d11623943cc0659c",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ff8d219c3d9a0b6f604bb99ca4a27ad77cdb69b/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ff8d219c3d9a0b6f604bb99ca4a27ad77cdb69b/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=8ff8d219c3d9a0b6f604bb99ca4a27ad77cdb69b",
        "patch": "@@ -1324,6 +1324,12 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         pfrom->nTimeOffset = nTimeOffset;\n         AddTimeData(pfrom->addr, nTimeOffset);\n \n+        // If the peer is old enough to have the old alert system, send it the final alert.\n+        if (pfrom->nVersion <= 70012) {\n+            CDataStream finalAlert(ParseHex(\"60010000000000000000000000ffffff7f00000000ffffff7ffeffff7f01ffffff7f00000000ffffff7f00ffffff7f002f555247454e543a20416c657274206b657920636f6d70726f6d697365642c2075706772616465207265717569726564004630440220653febd6410f470f6bae11cad19c48413becb1ac2c17f908fd0fd53bdc3abd5202206d0e9c96fe88d4a0f01ed9dedae2b6f9e00da94cad0fecaae66ecf689bf71b50\"), SER_NETWORK, PROTOCOL_VERSION);\n+            connman.PushMessage(pfrom, CNetMsgMaker(nSendVersion).Make(\"alert\", finalAlert));\n+        }\n+\n         // Feeler connections exist only to verify if address is online.\n         if (pfrom->fFeeler) {\n             assert(pfrom->fInbound == false);"
      }
    ]
  },
  {
    "sha": "44f2baac486688dd499611f77a0cf73276758bf9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NGYyYmFhYzQ4NjY4OGRkNDk5NjExZjc3YTBjZjczMjc2NzU4YmY5",
    "commit": {
      "author": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2017-01-19T19:39:03Z"
      },
      "committer": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2017-01-20T09:55:47Z"
      },
      "message": "Do not shadow local variable named `tx`.",
      "tree": {
        "sha": "5d0e9df6df919a2750328a09349a0fdb52dc6149",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5d0e9df6df919a2750328a09349a0fdb52dc6149"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/44f2baac486688dd499611f77a0cf73276758bf9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44f2baac486688dd499611f77a0cf73276758bf9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/44f2baac486688dd499611f77a0cf73276758bf9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44f2baac486688dd499611f77a0cf73276758bf9/comments",
    "author": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "82274c02ed2d82537dc55f008a29edb1bc09bbc4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82274c02ed2d82537dc55f008a29edb1bc09bbc4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/82274c02ed2d82537dc55f008a29edb1bc09bbc4"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "5027c5109c1bb421db04587a36eeee8296831ce6",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44f2baac486688dd499611f77a0cf73276758bf9/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44f2baac486688dd499611f77a0cf73276758bf9/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=44f2baac486688dd499611f77a0cf73276758bf9",
        "patch": "@@ -1877,8 +1877,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             }\n         }\n \n-        for (const CTransactionRef& tx : lRemovedTxn)\n-            AddToCompactExtraTransactions(tx);\n+        for (const CTransactionRef& removedTx : lRemovedTxn)\n+            AddToCompactExtraTransactions(removedTx);\n \n         int nDoS = 0;\n         if (state.IsInvalid(nDoS))"
      }
    ]
  },
  {
    "sha": "fe8e8efcf91fa92db68aabeb0a1709b032e60dd6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZThlOGVmY2Y5MWZhOTJkYjY4YWFiZWIwYTE3MDliMDMyZTYwZGQ2",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-01-20T02:18:46Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-01-20T12:40:36Z"
      },
      "message": "[rpc] Add incremental relay fee to getnetworkinfo",
      "tree": {
        "sha": "728949a4dc0b20890f579403cece6946de6cae0c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/728949a4dc0b20890f579403cece6946de6cae0c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fe8e8efcf91fa92db68aabeb0a1709b032e60dd6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe8e8efcf91fa92db68aabeb0a1709b032e60dd6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fe8e8efcf91fa92db68aabeb0a1709b032e60dd6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe8e8efcf91fa92db68aabeb0a1709b032e60dd6/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6b331e6cf977caa20c83a28a8c6c2af0b6c451c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b331e6cf977caa20c83a28a8c6c2af0b6c451c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6b331e6cf977caa20c83a28a8c6c2af0b6c451c5"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 5,
      "deletions": 2
    },
    "files": [
      {
        "sha": "36c22943791ed7a030634d304c4f346ec1c64fd0",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe8e8efcf91fa92db68aabeb0a1709b032e60dd6/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe8e8efcf91fa92db68aabeb0a1709b032e60dd6/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=fe8e8efcf91fa92db68aabeb0a1709b032e60dd6",
        "patch": "@@ -10,6 +10,7 @@\n #include \"net.h\"\n #include \"net_processing.h\"\n #include \"netbase.h\"\n+#include \"policy/policy.h\"\n #include \"protocol.h\"\n #include \"sync.h\"\n #include \"timedata.h\"\n@@ -417,6 +418,7 @@ UniValue getnetworkinfo(const JSONRPCRequest& request)\n             \"  ,...\\n\"\n             \"  ],\\n\"\n             \"  \\\"relayfee\\\": x.xxxxxxxx,                (numeric) minimum relay fee for non-free transactions in \" + CURRENCY_UNIT + \"/kB\\n\"\n+            \"  \\\"incrementalfee\\\": x.xxxxxxxx,          (numeric) minimum fee increment for mempool limiting or BIP 125 replacement in \" + CURRENCY_UNIT + \"/kB\\n\"\n             \"  \\\"localaddresses\\\": [                    (array) list of local addresses\\n\"\n             \"  {\\n\"\n             \"    \\\"address\\\": \\\"xxxx\\\",                 (string) network address\\n\"\n@@ -447,6 +449,7 @@ UniValue getnetworkinfo(const JSONRPCRequest& request)\n     }\n     obj.push_back(Pair(\"networks\",      GetNetworksInfo()));\n     obj.push_back(Pair(\"relayfee\",      ValueFromAmount(::minRelayTxFee.GetFeePerK())));\n+    obj.push_back(Pair(\"incrementalfee\", ValueFromAmount(::incrementalRelayFee.GetFeePerK())));\n     UniValue localAddresses(UniValue::VARR);\n     {\n         LOCK(cs_mapLocalHost);"
      },
      {
        "sha": "b62fbeb10eb4e1126de111212cb4ef7f322b09bf",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe8e8efcf91fa92db68aabeb0a1709b032e60dd6/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe8e8efcf91fa92db68aabeb0a1709b032e60dd6/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fe8e8efcf91fa92db68aabeb0a1709b032e60dd6",
        "patch": "@@ -2652,8 +2652,8 @@ UniValue bumpfee(const JSONRPCRequest& request)\n             \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n             \"The user can specify a confirmation target for estimatefee.\\n\"\n             \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n-            \"At a minimum, the new fee rate must be high enough to pay a new relay fee over the original fee\\n\"\n-            \"to enter the node's mempool.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay an additional new relay fee (incrementalfee\\n\"\n+            \"returned by getnetworkinfo) to enter the node's mempool.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. txid                  (string, required) The txid to be bumped\\n\"\n             \"2. options               (object, optional)\\n\""
      }
    ]
  },
  {
    "sha": "fb75cd04bba36bce7cc22ad1601826ba4b41760e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYjc1Y2QwNGJiYTM2YmNlN2NjMjJhZDE2MDE4MjZiYTRiNDE3NjBl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-20T13:32:09Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-20T13:32:42Z"
      },
      "message": "Merge #9377: fundrawtransaction: Keep change-output keys by default, make it optional\n\nc9f3062 Add fundrawtransactions new reserveChangeKey option to the release notes (Jonas Schnelli)\n9eb325d [QA] Add test for fundrawtransactions new reserveChangeKey option (Jonas Schnelli)\n9aa4e6a [Wallet] Add an option to keep the change address key, true by default (Jonas Schnelli)",
      "tree": {
        "sha": "3d1db0d8abc12f91d4e7afa6551e7f2b1c69d52e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3d1db0d8abc12f91d4e7afa6551e7f2b1c69d52e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb75cd04bba36bce7cc22ad1601826ba4b41760e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYghF6AAoJEHSBCwEjRsmmVDIIAIf8Ocnqcl+seNdsCNO4uLrI\nX8JzN+X/nsY2sTnCX5+sPciML/xX/fU7wQhXBMN/MoUBEAGdqA0C2KGExTb1nzqY\nZNIJCwAsCjdCDc+IJxF3zcXsHI9MDEpNBRLuuczwomnYv3toT3rmK+56uzd/Ho9f\nLL4kWUbHRPOHipOUclM+R6ORCyopKlemwRcSgE3oAxnMCgazRXb3tkR3/C1ftESm\nWrsitvnzJeOUUZGktfkPd/Qkn1UkmEnKUM0uUpcI3AekMXZ8q3ns23Pdp5LYtV34\n+2e/mTaiD1cMIOeOxo+sgbKTtMn5eaXtovVbk/IIaKceppXHw2d+zIY9Cc9/aD4=\n=uTIf\n-----END PGP SIGNATURE-----",
        "payload": "tree 3d1db0d8abc12f91d4e7afa6551e7f2b1c69d52e\nparent 82274c02ed2d82537dc55f008a29edb1bc09bbc4\nparent c9f3062d551823f006d400dddb54c12620cd29c4\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1484919129 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1484919162 +0100\n\nMerge #9377: fundrawtransaction: Keep change-output keys by default, make it optional\n\nc9f3062 Add fundrawtransactions new reserveChangeKey option to the release notes (Jonas Schnelli)\n9eb325d [QA] Add test for fundrawtransactions new reserveChangeKey option (Jonas Schnelli)\n9aa4e6a [Wallet] Add an option to keep the change address key, true by default (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb75cd04bba36bce7cc22ad1601826ba4b41760e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fb75cd04bba36bce7cc22ad1601826ba4b41760e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb75cd04bba36bce7cc22ad1601826ba4b41760e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "82274c02ed2d82537dc55f008a29edb1bc09bbc4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82274c02ed2d82537dc55f008a29edb1bc09bbc4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/82274c02ed2d82537dc55f008a29edb1bc09bbc4"
      },
      {
        "sha": "c9f3062d551823f006d400dddb54c12620cd29c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9f3062d551823f006d400dddb54c12620cd29c4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c9f3062d551823f006d400dddb54c12620cd29c4"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 50,
      "deletions": 4
    },
    "files": [
      {
        "sha": "0ea9e1949e381695c6f3977d8c978d8a937c65bd",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb75cd04bba36bce7cc22ad1601826ba4b41760e/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb75cd04bba36bce7cc22ad1601826ba4b41760e/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=fb75cd04bba36bce7cc22ad1601826ba4b41760e",
        "patch": "@@ -128,6 +128,16 @@ Call \"getmininginfo\" loses the \"testnet\" field in favor of the more generic \"cha\n \n ### Wallet\n \n+0.14.0 Fundrawtransaction change address reuse\n+==============================================\n+\n+Before 0.14, `fundrawtransaction` was by default wallet stateless. In almost all cases `fundrawtransaction` does add a change-output to the outputs of the funded transaction. Before 0.14, the used keypool key was never marked as change-address key and directly returned to the keypool (leading to address reuse).\n+Before 0.14, calling `getnewaddress` directly after `fundrawtransaction` did generate the same address as the change-output address.\n+\n+Since 0.14, fundrawtransaction does reserve the change-output-key from the keypool by default (optional by setting  `reserveChangeKey`, default = `true`)\n+\n+Users should also consider using `getrawchangeaddress()` in conjunction with `fundrawtransaction`'s `changeAddress` option.\n+\n ### GUI\n \n ### Tests"
      },
      {
        "sha": "b279c0b9d65694302fe20b2929762d0270b8ef28",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 27,
        "deletions": 1,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb75cd04bba36bce7cc22ad1601826ba4b41760e/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb75cd04bba36bce7cc22ad1601826ba4b41760e/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=fb75cd04bba36bce7cc22ad1601826ba4b41760e",
        "patch": "@@ -651,7 +651,7 @@ def run_test(self):\n         assert_equal(len(self.nodes[3].listunspent(1)), 1)\n \n         inputs = []\n-        outputs = {self.nodes[2].getnewaddress() : 1}\n+        outputs = {self.nodes[3].getnewaddress() : 1}\n         rawtx = self.nodes[3].createrawtransaction(inputs, outputs)\n         result = self.nodes[3].fundrawtransaction(rawtx) # uses min_relay_tx_fee (set by settxfee)\n         result2 = self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 2*min_relay_tx_fee})\n@@ -660,6 +660,32 @@ def run_test(self):\n         assert_fee_amount(result2['fee'], count_bytes(result2['hex']), 2 * result_fee_rate)\n         assert_fee_amount(result3['fee'], count_bytes(result3['hex']), 10 * result_fee_rate)\n \n+        #############################\n+        # Test address reuse option #\n+        #############################\n+\n+        result3 = self.nodes[3].fundrawtransaction(rawtx, {\"reserveChangeKey\": False})\n+        res_dec = self.nodes[0].decoderawtransaction(result3[\"hex\"])\n+        changeaddress = \"\"\n+        for out in res_dec['vout']:\n+            if out['value'] > 1.0:\n+                changeaddress += out['scriptPubKey']['addresses'][0]\n+        assert(changeaddress != \"\")\n+        nextaddr = self.nodes[3].getnewaddress()\n+        # frt should not have removed the key from the keypool\n+        assert(changeaddress == nextaddr)\n+\n+        result3 = self.nodes[3].fundrawtransaction(rawtx)\n+        res_dec = self.nodes[0].decoderawtransaction(result3[\"hex\"])\n+        changeaddress = \"\"\n+        for out in res_dec['vout']:\n+            if out['value'] > 1.0:\n+                changeaddress += out['scriptPubKey']['addresses'][0]\n+        assert(changeaddress != \"\")\n+        nextaddr = self.nodes[3].getnewaddress()\n+        # Now the change address key should be removed from the keypool\n+        assert(changeaddress != nextaddr)\n+\n         ######################################\n         # Test subtractFeeFromOutputs option #\n         ######################################"
      },
      {
        "sha": "55e7558498d24201055b590bb1ac59740cc06b95",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb75cd04bba36bce7cc22ad1601826ba4b41760e/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb75cd04bba36bce7cc22ad1601826ba4b41760e/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fb75cd04bba36bce7cc22ad1601826ba4b41760e",
        "patch": "@@ -2511,6 +2511,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n                             \"     \\\"changePosition\\\"         (numeric, optional, default random) The index of the change output\\n\"\n                             \"     \\\"includeWatching\\\"        (boolean, optional, default false) Also select inputs which are watch only\\n\"\n                             \"     \\\"lockUnspents\\\"           (boolean, optional, default false) Lock selected unspent outputs\\n\"\n+                            \"     \\\"reserveChangeKey\\\"       (boolean, optional, default true) Reserves the change output key from the keypool\\n\"\n                             \"     \\\"feeRate\\\"                (numeric, optional, default not set: makes wallet determine the fee) Set a specific feerate (\" + CURRENCY_UNIT + \" per KB)\\n\"\n                             \"     \\\"subtractFeeFromOutputs\\\" (array, optional) A json array of integers.\\n\"\n                             \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n@@ -2543,6 +2544,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     int changePosition = -1;\n     bool includeWatching = false;\n     bool lockUnspents = false;\n+    bool reserveChangeKey = true;\n     CFeeRate feeRate = CFeeRate(0);\n     bool overrideEstimatedFeerate = false;\n     UniValue subtractFeeFromOutputs;\n@@ -2564,6 +2566,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n                 {\"changePosition\", UniValueType(UniValue::VNUM)},\n                 {\"includeWatching\", UniValueType(UniValue::VBOOL)},\n                 {\"lockUnspents\", UniValueType(UniValue::VBOOL)},\n+                {\"reserveChangeKey\", UniValueType(UniValue::VBOOL)},\n                 {\"feeRate\", UniValueType()}, // will be checked below\n                 {\"subtractFeeFromOutputs\", UniValueType(UniValue::VARR)},\n             },\n@@ -2587,6 +2590,9 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n         if (options.exists(\"lockUnspents\"))\n             lockUnspents = options[\"lockUnspents\"].get_bool();\n \n+        if (options.exists(\"reserveChangeKey\"))\n+            reserveChangeKey = options[\"reserveChangeKey\"].get_bool();\n+\n         if (options.exists(\"feeRate\"))\n         {\n             feeRate = CFeeRate(AmountFromValue(options[\"feeRate\"]));\n@@ -2623,7 +2629,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     CAmount nFeeOut;\n     string strFailReason;\n \n-    if(!pwalletMain->FundTransaction(tx, nFeeOut, overrideEstimatedFeerate, feeRate, changePosition, strFailReason, includeWatching, lockUnspents, setSubtractFeeFromOutputs, changeAddress))\n+    if(!pwalletMain->FundTransaction(tx, nFeeOut, overrideEstimatedFeerate, feeRate, changePosition, strFailReason, includeWatching, lockUnspents, setSubtractFeeFromOutputs, reserveChangeKey, changeAddress))\n         throw JSONRPCError(RPC_INTERNAL_ERROR, strFailReason);\n \n     UniValue result(UniValue::VOBJ);"
      },
      {
        "sha": "358a5ecfc190a85ab9727cc3325644b876e7d162",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb75cd04bba36bce7cc22ad1601826ba4b41760e/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb75cd04bba36bce7cc22ad1601826ba4b41760e/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fb75cd04bba36bce7cc22ad1601826ba4b41760e",
        "patch": "@@ -2282,7 +2282,7 @@ bool CWallet::SelectCoins(const vector<COutput>& vAvailableCoins, const CAmount&\n     return res;\n }\n \n-bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, bool overrideEstimatedFeeRate, const CFeeRate& specificFeeRate, int& nChangePosInOut, std::string& strFailReason, bool includeWatching, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, const CTxDestination& destChange)\n+bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, bool overrideEstimatedFeeRate, const CFeeRate& specificFeeRate, int& nChangePosInOut, std::string& strFailReason, bool includeWatching, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, bool keepReserveKey, const CTxDestination& destChange)\n {\n     vector<CRecipient> vecSend;\n \n@@ -2331,6 +2331,10 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, bool ov\n         }\n     }\n \n+    // optionally keep the change output key\n+    if (keepReserveKey)\n+        reservekey.KeepKey();\n+\n     return true;\n }\n "
      },
      {
        "sha": "a7fc05b62dbbc2a454e5b4c10ec7d367b84ddccb",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb75cd04bba36bce7cc22ad1601826ba4b41760e/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb75cd04bba36bce7cc22ad1601826ba4b41760e/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=fb75cd04bba36bce7cc22ad1601826ba4b41760e",
        "patch": "@@ -780,7 +780,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * Insert additional inputs into the transaction by\n      * calling CreateTransaction();\n      */\n-    bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, bool overrideEstimatedFeeRate, const CFeeRate& specificFeeRate, int& nChangePosInOut, std::string& strFailReason, bool includeWatching, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, const CTxDestination& destChange = CNoDestination());\n+    bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, bool overrideEstimatedFeeRate, const CFeeRate& specificFeeRate, int& nChangePosInOut, std::string& strFailReason, bool includeWatching, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, bool keepReserveKey = true, const CTxDestination& destChange = CNoDestination());\n \n     /**\n      * Create a new transaction paying the recipients with a set of coins"
      }
    ]
  },
  {
    "sha": "b8d1b81077e4d0efcf9aafc00954d6ecd3d72d31",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOGQxYjgxMDc3ZTRkMGVmY2Y5YWFmYzAwOTU0ZDZlY2QzZDcyZDMx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-20T13:38:27Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-20T13:39:50Z"
      },
      "message": "trivial: squash missing field 'argNames' initializer warning in qt tests\n\nThe additional initializer is for the named arguments, which are unused\nin the test (and unfilled global fields will be initialized to 0\nanyhow), so this is a no-op apart from the warning.",
      "tree": {
        "sha": "a22ce72cdd97c524378399868fa3686ad0445b30",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a22ce72cdd97c524378399868fa3686ad0445b30"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b8d1b81077e4d0efcf9aafc00954d6ecd3d72d31",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYghM8AAoJEHSBCwEjRsmmwLUH/jA71GuzrN6U9upx0HG7p8pH\nlteH9RM5wF7sxqDuPMrQUq1eI55q9OqKh4XanBwHex+0t+JLX+ZqBmymAjUJJl/R\n0iwki57HYE9pwMRIHxwvzzzXMMD7NRjkbRaCQ0L1WRTtyd1cs49D4nvtV4zQIinc\nwJ2AT88JJhPlTpRWjCHjQgF7z5ECEorK3yiemo0xHl4BJUdPR+crQ/AflrF95EsS\neoX74Wp0nJJedadqOp4LansjQvjtBzIgQzRStUg9dpiQPWsDppVNAfzcdTsAj2YK\n+Dv317gN8IkAQRBTUdLIbEbqNcdcdV9lO3pzzn6F7geeqDybZCM94h58G5MPf6o=\n=oofR\n-----END PGP SIGNATURE-----",
        "payload": "tree a22ce72cdd97c524378399868fa3686ad0445b30\nparent fb75cd04bba36bce7cc22ad1601826ba4b41760e\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1484919507 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1484919590 +0100\n\ntrivial: squash missing field 'argNames' initializer warning in qt tests\n\nThe additional initializer is for the named arguments, which are unused\nin the test (and unfilled global fields will be initialized to 0\nanyhow), so this is a no-op apart from the warning.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8d1b81077e4d0efcf9aafc00954d6ecd3d72d31",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b8d1b81077e4d0efcf9aafc00954d6ecd3d72d31",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8d1b81077e4d0efcf9aafc00954d6ecd3d72d31/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fb75cd04bba36bce7cc22ad1601826ba4b41760e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb75cd04bba36bce7cc22ad1601826ba4b41760e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fb75cd04bba36bce7cc22ad1601826ba4b41760e"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "bd496f149c61c7e6c70bc8597b616749711f3454",
        "filename": "src/qt/test/rpcnestedtests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8d1b81077e4d0efcf9aafc00954d6ecd3d72d31/src/qt/test/rpcnestedtests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8d1b81077e4d0efcf9aafc00954d6ecd3d72d31/src/qt/test/rpcnestedtests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.cpp?ref=b8d1b81077e4d0efcf9aafc00954d6ecd3d72d31",
        "patch": "@@ -29,7 +29,7 @@ static UniValue rpcNestedTest_rpc(const JSONRPCRequest& request)\n \n static const CRPCCommand vRPCCommands[] =\n {\n-    { \"test\", \"rpcNestedTest\", &rpcNestedTest_rpc, true },\n+    { \"test\", \"rpcNestedTest\", &rpcNestedTest_rpc, true, {} },\n };\n \n void RPCNestedTests::rpcNestedTests()"
      }
    ]
  },
  {
    "sha": "af01cd3a3d0647c071e94d7b0bda7128fb9aeebe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZjAxY2QzYTNkMDY0N2MwNzFlOTRkN2IwYmRhNzEyOGZiOWFlZWJl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-20T13:44:48Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-20T13:45:12Z"
      },
      "message": "qt: Periodic translation update",
      "tree": {
        "sha": "8de1cbe1839251347f102645c70b56bf98d69c75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8de1cbe1839251347f102645c70b56bf98d69c75"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYghRqAAoJEHSBCwEjRsmmtoEIAJ7nLyHQvNVZ/hfJLA2Gz8VF\nmMzhMBzRLa7BbUjHvWrUe4qQz7n3utD83iHID8OsrJC8fpoLIOCwusOOfomMPb+2\n3Zq6/ciSY0lr+GB2Cmbg4OAV2xvaMFF+s/Cv8T6kIEe9OD+woHDtijP+8BFVsNlP\ny4FnhIAm3TSQUDUToLpuI5/MGYyiwwqmQViHUx8i3vPYonSYjywdLaze2L+tby9h\nDNtE4enF+Y0jqgm8MRdbmbRFjDsuBCpPJnMeern1cAmNnNHlYKQYRqKPvDEOrxtv\nNXprX2sAJ5+vfLKxKFp3q4zJ31g/9wETpIoubyykdpYPdaDUSmohYXEd+Yc+f9k=\n=OgDU\n-----END PGP SIGNATURE-----",
        "payload": "tree 8de1cbe1839251347f102645c70b56bf98d69c75\nparent b8d1b81077e4d0efcf9aafc00954d6ecd3d72d31\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1484919888 +0000\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1484919912 +0100\n\nqt: Periodic translation update\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b8d1b81077e4d0efcf9aafc00954d6ecd3d72d31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8d1b81077e4d0efcf9aafc00954d6ecd3d72d31",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b8d1b81077e4d0efcf9aafc00954d6ecd3d72d31"
      }
    ],
    "stats": {
      "total": 482,
      "additions": 348,
      "deletions": 134
    },
    "files": [
      {
        "sha": "a1e5cccc0b874871aad2974af57c5bf3a05ad68d",
        "filename": "src/qt/bitcoinstrings.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/bitcoinstrings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/bitcoinstrings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinstrings.cpp?ref=af01cd3a3d0647c071e94d7b0bda7128fb9aeebe",
        "patch": "@@ -78,6 +78,9 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Execute command when the best block changes (%s in cmd is replaced by block \"\n \"hash)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n+\"Extra transactions to keep in memory for compact block reconstructions \"\n+\"(default: %u)\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Fees (in %s/kB) smaller than this are considered zero fee for relaying, \"\n \"mining and transaction creation (default: %s)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n@@ -95,6 +98,10 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"If paytxfee is not set, include enough fee so transactions begin \"\n \"confirmation on average within n blocks (default: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n+\"If this block is in the chain assume that it and its ancestors are valid and \"\n+\"potentially skip their script verification (0 to verify all, default: %s, \"\n+\"testnet: %s)\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Invalid amount for -maxtxfee=<amount>: '%s' (must be at least the minrelay \"\n \"fee of %s to prevent stuck transactions)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\""
      },
      {
        "sha": "1679482c771c003c9bb70b247bc41fe751b87fbe",
        "filename": "src/qt/locale/bitcoin_af_ZA.ts",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_af_ZA.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_af_ZA.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_af_ZA.ts?ref=af01cd3a3d0647c071e94d7b0bda7128fb9aeebe",
        "patch": "@@ -9,10 +9,22 @@\n         <source>Copy the currently selected address to the system clipboard</source>\n         <translation>Maak 'n kopie van die huidige adres na die stelsel klipbord</translation>\n     </message>\n+    <message>\n+        <source>&amp;Copy</source>\n+        <translation>&amp;Kopie</translation>\n+    </message>\n+    <message>\n+        <source>Delete the currently selected address from the list</source>\n+        <translation>Verwyder die huidiglik gekieste address van die lys</translation>\n+    </message>\n     <message>\n         <source>&amp;Delete</source>\n         <translation>&amp;Verwyder</translation>\n     </message>\n+    <message>\n+        <source>Choose the address to send coins to</source>\n+        <translation>Kies die address na wie die muntstukke gestuur moet word</translation>\n+    </message>\n     </context>\n <context>\n     <name>AddressTableModel</name>\n@@ -410,6 +422,14 @@\n         <source>Copy amount</source>\n         <translation>Kopieer bedrag</translation>\n     </message>\n+    <message>\n+        <source>%1 to %2</source>\n+        <translation>%1 tot %2</translation>\n+    </message>\n+    <message>\n+        <source>or</source>\n+        <translation>of</translation>\n+    </message>\n     <message>\n         <source>(no label)</source>\n         <translation>(geen etiket)</translation>"
      },
      {
        "sha": "fd5a197c3e213242c68a9db7a3625510fffd1ef5",
        "filename": "src/qt/locale/bitcoin_ca.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_ca.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_ca.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ca.ts?ref=af01cd3a3d0647c071e94d7b0bda7128fb9aeebe",
        "patch": "@@ -2821,10 +2821,6 @@\n         <source>Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)</source>\n         <translation>Poda: la darrera sincronitzaci\u00f3 del moneder va m\u00e9s enll\u00e0 de les dades podades. Cal que activeu -reindex (baixeu tota la cadena de blocs de nou en cas de node podat)</translation>\n     </message>\n-    <message>\n-        <source>Reduce storage requirements by pruning (deleting) old blocks. This mode is incompatible with -txindex and -rescan. Warning: Reverting this setting requires re-downloading the entire blockchain. (default: 0 = disable pruning blocks, &gt;%u = target size in MiB to use for block files)</source>\n-        <translation>Redu\u00efu els requisits d'emmagatzematge podant (suprimint) els blocs antics. Aquest mode \u00e9s incompatible amb -txindex i -rescan. Av\u00eds: la reversi\u00f3 d'aquest par\u00e0metre implica haver de tornar a baixar la cadena de blocs sencera. (per defecte: 0 = inhabilita la poda de blocs, &gt;%u = mida objectiu en MiB per utilitzar en els fitxers de blocs)</translation>\n-    </message>\n     <message>\n         <source>Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.</source>\n         <translation>Els rescanejos no s\u00f3n possible en el mode de poda. Caldr\u00e0 que utilitzeu -reindex, que tornar\u00e0 a baixar la cadena de blocs sencera.</translation>"
      },
      {
        "sha": "f88508a10fcdcc072d763a862a4790ce33858d32",
        "filename": "src/qt/locale/bitcoin_ca_ES.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_ca_ES.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_ca_ES.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ca_ES.ts?ref=af01cd3a3d0647c071e94d7b0bda7128fb9aeebe",
        "patch": "@@ -2821,10 +2821,6 @@\n         <source>Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)</source>\n         <translation>Poda: la darrera sincronitzaci\u00f3 del moneder va m\u00e9s enll\u00e0 de les dades podades. Cal que activeu -reindex (baixeu tota la cadena de blocs de nou en cas de node podat)</translation>\n     </message>\n-    <message>\n-        <source>Reduce storage requirements by pruning (deleting) old blocks. This mode is incompatible with -txindex and -rescan. Warning: Reverting this setting requires re-downloading the entire blockchain. (default: 0 = disable pruning blocks, &gt;%u = target size in MiB to use for block files)</source>\n-        <translation>Redu\u00efu els requisits d'emmagatzematge podant (suprimint) els blocs antics. Aquest mode \u00e9s incompatible amb -txindex i -rescan. Av\u00eds: la reversi\u00f3 d'aquest par\u00e0metre implica haver de tornar a baixar la cadena de blocs sencera. (per defecte: 0 = inhabilita la poda de blocs, &gt;%u = mida objectiu en MiB per utilitzar en els fitxers de blocs)</translation>\n-    </message>\n     <message>\n         <source>Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.</source>\n         <translation>Els rescanejos no s\u00f3n possible en el mode de poda. Caldr\u00e0 que utilitzeu -reindex, que tornar\u00e0 a baixar la cadena de blocs sencera.</translation>"
      },
      {
        "sha": "2e911af14cd2340c66ccf1cce1c3d428b78a708a",
        "filename": "src/qt/locale/bitcoin_cs.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_cs.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_cs.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_cs.ts?ref=af01cd3a3d0647c071e94d7b0bda7128fb9aeebe",
        "patch": "@@ -3021,10 +3021,6 @@\n         <source>Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)</source>\n         <translation>Pro\u0159ez\u00e1v\u00e1n\u00ed: posledn\u00ed synchronizace pen\u011b\u017eenky prob\u011bhla p\u0159ed u\u017e pro\u0159ezan\u00fdmi daty. Je t\u0159eba prov\u00e9st -reindex (tedy v p\u0159\u00edpad\u011b pro\u0159ez\u00e1vac\u00edho re\u017eimu st\u00e1hnout znovu cel\u00fd \u0159et\u011bzec blok\u016f)</translation>\n     </message>\n-    <message>\n-        <source>Reduce storage requirements by pruning (deleting) old blocks. This mode is incompatible with -txindex and -rescan. Warning: Reverting this setting requires re-downloading the entire blockchain. (default: 0 = disable pruning blocks, &gt;%u = target size in MiB to use for block files)</source>\n-        <translation>Omezit n\u00e1roky na \u00falo\u017en\u00fd prostor pro\u0159ez\u00e1v\u00e1n\u00edm (maz\u00e1n\u00edm) star\u00fdch blok\u016f. Tento re\u017eim nen\u00ed slu\u010diteln\u00fd s -txindex ani -rescan. Upozorn\u011bn\u00ed: op\u011btovn\u00e1 zm\u011bna tohoto nastaven\u00ed bude vy\u017eadovat nov\u00e9 sta\u017een\u00ed cel\u00e9ho \u0159et\u011bzce blok\u016f. (v\u00fdchoz\u00ed: 0 = bloky nepro\u0159ez\u00e1vat, &gt;%u = c\u00edlov\u00e1 velikost soubor\u016f s bloky, v MiB)</translation>\n-    </message>\n     <message>\n         <source>Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.</source>\n         <translation>V pro\u0159ez\u00e1vac\u00edm re\u017eimu nen\u00ed mo\u017en\u00e9 p\u0159eskenov\u00e1vat \u0159et\u011bzec blok\u016f. Mus\u00ed\u0161 prov\u00e9st -reindex, co\u017e znovu st\u00e1hne cel\u00fd \u0159et\u011bzec blok\u016f.</translation>"
      },
      {
        "sha": "75eb5ae94da21f0d90fb9518f2daacd36c456a34",
        "filename": "src/qt/locale/bitcoin_da.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_da.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_da.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_da.ts?ref=af01cd3a3d0647c071e94d7b0bda7128fb9aeebe",
        "patch": "@@ -3029,10 +3029,6 @@\n         <source>Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)</source>\n         <translation>Besk\u00e6ring: Seneste synkronisering r\u00e6kker udover besk\u00e5rne data. Du er n\u00f8dt til at bruge -reindex (downloade hele blokk\u00e6den igen i fald af besk\u00e5ret knude)</translation>\n     </message>\n-    <message>\n-        <source>Reduce storage requirements by pruning (deleting) old blocks. This mode is incompatible with -txindex and -rescan. Warning: Reverting this setting requires re-downloading the entire blockchain. (default: 0 = disable pruning blocks, &gt;%u = target size in MiB to use for block files)</source>\n-        <translation>Reduc\u00e9r lagringskravene ved at besk\u00e6re (slette) gamle blokke. Denne tilstand er ikke kompatibel med -txindex og -rescan. Advarsel: Fortrydelse af denne indstilling kr\u00e6ver gendownload af hele blokk\u00e6den. (standard: 0 = deaktiv\u00e9r besk\u00e6ring af blokke, &gt;%u = m\u00e5lst\u00f8rrelse i MiB der skal bruges p\u00e5 blokfiler)</translation>\n-    </message>\n     <message>\n         <source>Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.</source>\n         <translation>Genindl\u00e6sninger er ikke mulige i besk\u00e5ret tilstand. Du er n\u00f8dt til at bruge -reindex, hvilket vil downloade hele blokk\u00e6den igen.</translation>"
      },
      {
        "sha": "59a45e3175728be91c46e2450e543f98ff2d5729",
        "filename": "src/qt/locale/bitcoin_de.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_de.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_de.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_de.ts?ref=af01cd3a3d0647c071e94d7b0bda7128fb9aeebe",
        "patch": "@@ -3005,10 +3005,6 @@\n         <source>Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)</source>\n         <translation>Prune (K\u00fcrzung): Die letzte Syncronisation der Wallet liegt vor gek\u00fcrzten (gel\u00f6schten) Bl\u00f6cken. Es ist ein -reindex (download der gesamten Blockkette) notwendig.</translation>\n     </message>\n-    <message>\n-        <source>Reduce storage requirements by pruning (deleting) old blocks. This mode is incompatible with -txindex and -rescan. Warning: Reverting this setting requires re-downloading the entire blockchain. (default: 0 = disable pruning blocks, &gt;%u = target size in MiB to use for block files)</source>\n-        <translation>Speicherplatzanforderung durch k\u00fcrzen (l\u00f6schen) alter Bl\u00f6cke reduzieren. Dieser Modus ist nicht mit -txindex und -rescan kompatibel. Warnung: Die Umkehr dieser Einstellung erfordert das erneute Herunterladen der gesamten Blockkette. (Standard: 0 = deaktiviert das K\u00fcrzen von Bl\u00f6cken, &gt;%u = Zielgr\u00f6\u00dfe in MiB, die f\u00fcr Blockdateien verwendet werden darf)</translation>\n-    </message>\n     <message>\n         <source>Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.</source>\n         <translation>Rescans sind im pruned mode nicht m\u00f6glich. Ein -reindex ist notwendig, welcher die gesmate Blockkette erneut herunterl\u00e4dt.</translation>"
      },
      {
        "sha": "dcfd86f3665579f3f464e46dce46bf0005cd82cb",
        "filename": "src/qt/locale/bitcoin_en.ts",
        "status": "modified",
        "additions": 44,
        "deletions": 29,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_en.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_en.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_en.ts?ref=af01cd3a3d0647c071e94d7b0bda7128fb9aeebe",
        "patch": "@@ -304,12 +304,12 @@\n         <translation>Sign &amp;message...</translation>\n     </message>\n     <message>\n-        <location line=\"+417\"/>\n+        <location line=\"+427\"/>\n         <source>Synchronizing with network...</source>\n         <translation>Synchronizing with network...</translation>\n     </message>\n     <message>\n-        <location line=\"-495\"/>\n+        <location line=\"-505\"/>\n         <source>&amp;Overview</source>\n         <translation>&amp;Overview</translation>\n     </message>\n@@ -419,12 +419,17 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+53\"/>\n+        <location line=\"+27\"/>\n+        <source>Syncing Headers (%1%)...</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+37\"/>\n         <source>Reindexing blocks on disk...</source>\n         <translation>Reindexing blocks on disk...</translation>\n     </message>\n     <message>\n-        <location line=\"-497\"/>\n+        <location line=\"-508\"/>\n         <source>Send coins to a Bitcoin address</source>\n         <translation>Send coins to a Bitcoin address</translation>\n     </message>\n@@ -454,12 +459,12 @@\n         <translation>&amp;Verify message...</translation>\n     </message>\n     <message>\n-        <location line=\"+504\"/>\n+        <location line=\"+514\"/>\n         <source>Bitcoin</source>\n         <translation>Bitcoin</translation>\n     </message>\n     <message>\n-        <location line=\"-729\"/>\n+        <location line=\"-739\"/>\n         <source>Wallet</source>\n         <translation>Wallet</translation>\n     </message>\n@@ -552,7 +557,7 @@\n         </translation>\n     </message>\n     <message>\n-        <location line=\"+49\"/>\n+        <location line=\"+60\"/>\n         <source>Indexing blocks on disk...</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -561,13 +566,8 @@\n         <source>Processing blocks on disk...</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n-    <message>\n-        <location line=\"+11\"/>\n-        <source>No block source available...</source>\n-        <translation>No block source available...</translation>\n-    </message>\n     <message numerus=\"yes\">\n-        <location line=\"+9\"/>\n+        <location line=\"+19\"/>\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation>\n             <numerusform>Processed %n block of transaction history.</numerusform>\n@@ -610,7 +610,7 @@\n         <translation>Up to date</translation>\n     </message>\n     <message>\n-        <location line=\"-428\"/>\n+        <location line=\"-438\"/>\n         <source>Show the %1 help message to get a list with possible Bitcoin command-line options</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -620,7 +620,12 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+255\"/>\n+        <location line=\"+227\"/>\n+        <source>Connecting to peers...</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+38\"/>\n         <source>Catching up...</source>\n         <translation>Catching up...</translation>\n     </message>\n@@ -3862,7 +3867,7 @@\n <context>\n     <name>bitcoin-core</name>\n     <message>\n-        <location filename=\"../bitcoinstrings.cpp\" line=\"+311\"/>\n+        <location filename=\"../bitcoinstrings.cpp\" line=\"+318\"/>\n         <source>Options:</source>\n         <translation>Options:</translation>\n     </message>\n@@ -3887,7 +3892,7 @@\n         <translation>Accept command line and JSON-RPC commands</translation>\n     </message>\n     <message>\n-        <location line=\"-214\"/>\n+        <location line=\"-221\"/>\n         <source>Accept connections from outside (default: 1 if no -proxy or -connect/-noconnect)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3902,12 +3907,12 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+34\"/>\n+        <location line=\"+37\"/>\n         <source>If &lt;category&gt; is not supplied or if &lt;category&gt; = 1, output all debugging information.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+32\"/>\n+        <location line=\"+36\"/>\n         <source>Prune configured below the minimum of %d MiB.  Please use a higher number.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3947,7 +3952,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-353\"/>\n+        <location line=\"-360\"/>\n         <source>Bitcoin Core</source>\n         <translation type=\"unfinished\">Bitcoin Core</translation>\n     </message>\n@@ -3997,7 +4002,17 @@\n         <translation>Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)</translation>\n     </message>\n     <message>\n-        <location line=\"+29\"/>\n+        <location line=\"+6\"/>\n+        <source>Extra transactions to keep in memory for compact block reconstructions (default: %u)</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+20\"/>\n+        <source>If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+10\"/>\n         <source>Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: %u seconds)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4402,7 +4417,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-351\"/>\n+        <location line=\"-358\"/>\n         <source>Allow JSON-RPC connections from specified source. Valid for &lt;ip&gt; are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4437,7 +4452,7 @@\n         <translation>Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)</translation>\n     </message>\n     <message>\n-        <location line=\"+9\"/>\n+        <location line=\"+12\"/>\n         <source>Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4447,7 +4462,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+3\"/>\n+        <location line=\"+7\"/>\n         <source>Invalid amount for -maxtxfee=&lt;amount&gt;: &apos;%s&apos; (must be at least the minrelay fee of %s to prevent stuck transactions)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4667,12 +4682,12 @@\n         <translation>Password for JSON-RPC connections</translation>\n     </message>\n     <message>\n-        <location line=\"-235\"/>\n+        <location line=\"-242\"/>\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>Execute command when the best block changes (%s in cmd is replaced by block hash)</translation>\n     </message>\n     <message>\n-        <location line=\"+163\"/>\n+        <location line=\"+170\"/>\n         <source>Allow DNS lookups for -addnode, -seednode and -connect</source>\n         <translation>Allow DNS lookups for -addnode, -seednode and -connect</translation>\n     </message>\n@@ -4682,7 +4697,7 @@\n         <translation>Loading addresses...</translation>\n     </message>\n     <message>\n-        <location line=\"-284\"/>\n+        <location line=\"-291\"/>\n         <source>(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4702,7 +4717,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+21\"/>\n+        <location line=\"+24\"/>\n         <source>Fees (in %s/kB) smaller than this are considered zero fee for transaction creation (default: %s)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4717,7 +4732,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+11\"/>\n+        <location line=\"+15\"/>\n         <source>Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>"
      },
      {
        "sha": "df3aad508762d9ffc3a9e5afb26a5628c2e62821",
        "filename": "src/qt/locale/bitcoin_en_GB.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_en_GB.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_en_GB.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_en_GB.ts?ref=af01cd3a3d0647c071e94d7b0bda7128fb9aeebe",
        "patch": "@@ -1873,10 +1873,6 @@\n         <source>Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)</source>\n         <translation>Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)</translation>\n     </message>\n-    <message>\n-        <source>Reduce storage requirements by pruning (deleting) old blocks. This mode is incompatible with -txindex and -rescan. Warning: Reverting this setting requires re-downloading the entire blockchain. (default: 0 = disable pruning blocks, &gt;%u = target size in MiB to use for block files)</source>\n-        <translation>Reduce storage requirements by pruning (deleting) old blocks. This mode is incompatible with -txindex and -rescan. Warning: Reverting this setting requires re-downloading the entire blockchain. (default: 0 = disable pruning blocks, &gt;%u = target size in MiB to use for block files)</translation>\n-    </message>\n     <message>\n         <source>Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.</source>\n         <translation>Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.</translation>"
      },
      {
        "sha": "b1e35148d7a963f680f6c1d932ec9d51b4f1c5b5",
        "filename": "src/qt/locale/bitcoin_es.ts",
        "status": "modified",
        "additions": 40,
        "deletions": 4,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_es.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_es.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_es.ts?ref=af01cd3a3d0647c071e94d7b0bda7128fb9aeebe",
        "patch": "@@ -1704,6 +1704,10 @@\n         <source>Ban for</source>\n         <translation>Prohibir para</translation>\n     </message>\n+    <message>\n+        <source>&amp;Unban</source>\n+        <translation>&amp;Unbano</translation>\n+    </message>\n     <message>\n         <source>Welcome to the %1 RPC console.</source>\n         <translation>Bienvenido a la consola RPC %1.</translation>\n@@ -1716,6 +1720,14 @@\n         <source>Type &lt;b&gt;help&lt;/b&gt; for an overview of available commands.</source>\n         <translation>Escriba &lt;b&gt;help&lt;/b&gt; para ver un resumen de los comandos disponibles.</translation>\n     </message>\n+    <message>\n+        <source>WARNING: Scammers have been active, telling users to type commands here, stealing their wallet contents. Do not use this console without fully understanding the ramification of a command.</source>\n+        <translation>ADVERTENCIA: Los estafadores han sido activados, dici\u00e9ndoles a los usuarios que escriban comandos aqu\u00ed, robando el contenido de sus monederos. No utilice esta consola sin entender completamente la repercusi\u00f3n de un comando.</translation>\n+    </message>\n+    <message>\n+        <source>Network activity disabled</source>\n+        <translation>Actividad de red deshabilitada</translation>\n+    </message>\n     <message>\n         <source>%1 B</source>\n         <translation>%1 B</translation>\n@@ -1835,6 +1847,10 @@\n         <source>Remove</source>\n         <translation>Eliminar</translation>\n     </message>\n+    <message>\n+        <source>Copy URI</source>\n+        <translation>Copiar URI</translation>\n+    </message>\n     <message>\n         <source>Copy label</source>\n         <translation>Copiar capa</translation>\n@@ -2060,6 +2076,10 @@\n         <source>Dust:</source>\n         <translation>Polvo:</translation>\n     </message>\n+    <message>\n+        <source>Confirmation time target:</source>\n+        <translation>Objetivo de tiempo de confirmaci\u00f3n</translation>\n+    </message>\n     <message>\n         <source>Clear &amp;All</source>\n         <translation>Vaciar &amp;todo</translation>\n@@ -2152,6 +2172,10 @@\n         <source>Transaction creation failed!</source>\n         <translation>\u00a1Fall\u00f3 la creaci\u00f3n de transacci\u00f3n!</translation>\n     </message>\n+    <message>\n+        <source>The transaction was rejected with the following reason: %1</source>\n+        <translation>Se ha rechazado la transacci\u00f3n por la siguiente raz\u00f3n: %1</translation>\n+    </message>\n     <message>\n         <source>A fee higher than %1 is considered an absurdly high fee.</source>\n         <translation>Una comisi\u00f3n mayor que %1 se considera una cuota irracionalmente alta.</translation>\n@@ -2160,10 +2184,18 @@\n         <source>Payment request expired.</source>\n         <translation>Solicitud de pago caducada.</translation>\n     </message>\n+    <message numerus=\"yes\">\n+        <source>%n block(s)</source>\n+        <translation><numerusform>%n bloque</numerusform><numerusform>%n bloques</numerusform></translation>\n+    </message>\n     <message>\n         <source>Pay only the required fee of %1</source>\n         <translation>Pagar \u00fanicamente la comisi\u00f3n solicitada de %1</translation>\n     </message>\n+    <message numerus=\"yes\">\n+        <source>Estimated to begin confirmation within %n block(s).</source>\n+        <translation><numerusform>Estimado para empezar la confirmaci\u00f3n dentro de %n bloque.</numerusform><numerusform>Estimado para empezar la confirmaci\u00f3n dentro de %n bloques.</numerusform></translation>\n+    </message>\n     <message>\n         <source>Warning: Invalid Bitcoin address</source>\n         <translation>Alerta: direcci\u00f3n Bitcoin inv\u00e1lida</translation>\n@@ -2172,6 +2204,14 @@\n         <source>Warning: Unknown change address</source>\n         <translation>Alerta: direcci\u00f3n cambiada desconocida</translation>\n     </message>\n+    <message>\n+        <source>Confirm custom change address</source>\n+        <translation>Confirmar direcci\u00f3n de cambio personalizada</translation>\n+    </message>\n+    <message>\n+        <source>The address you selected for change is not part of this wallet. Any or all funds in your wallet may be sent to this address. Are you sure?</source>\n+        <translation>La direcci\u00f3n que ha seleccionado para cambiar no es parte de este monedero. ninguno o todos los fondos de su monedero pueden ser enviados a esta direcci\u00f3n. \u00bfEst\u00e1 seguro?</translation>\n+    </message>\n     <message>\n         <source>(no label)</source>\n         <translation>(sin etiqueta)</translation>\n@@ -2959,10 +2999,6 @@\n         <source>Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)</source>\n         <translation>Poda: la ultima sincronizacion del monedero sobrepasa los datos podados. Necesitas reindexar con -reindex (o descargar la cadena de bloques de nuevo en el caso de un nodo podado)</translation>\n     </message>\n-    <message>\n-        <source>Reduce storage requirements by pruning (deleting) old blocks. This mode is incompatible with -txindex and -rescan. Warning: Reverting this setting requires re-downloading the entire blockchain. (default: 0 = disable pruning blocks, &gt;%u = target size in MiB to use for block files)</source>\n-        <translation>Reduce los requisitos de almacenaje podando (eliminando) los bloques viejos. Este modo es incompatible con -txindex y -rescan. Advertencia: Revertir este ajuste requiere volver a descargar la cadena de bloques al completo. (predeterminado: 0 = deshabilitar la poda de bloques, &gt;%u = objetivo de tama\u00f1o en MiB para usar para los archivos de bloques)</translation>\n-    </message>\n     <message>\n         <source>Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.</source>\n         <translation>Nos es posible re-escanear en modo podado.Necesitas utilizar -reindex el cual descargara la cadena de bloques al completo de nuevo.</translation>"
      },
      {
        "sha": "996b209ea21d7aae848767af145e2244581fbb8d",
        "filename": "src/qt/locale/bitcoin_es_ES.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_es_ES.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_es_ES.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_es_ES.ts?ref=af01cd3a3d0647c071e94d7b0bda7128fb9aeebe",
        "patch": "@@ -2839,10 +2839,6 @@\n         <source>Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)</source>\n         <translation>Poda:  la ultima sincronizacion de la cartera sobrepasa los datos podados. Necesitas reindexar con -reindex (o descargar la cadena de bloques de nuevo en el caso de un nodo podado)</translation>\n     </message>\n-    <message>\n-        <source>Reduce storage requirements by pruning (deleting) old blocks. This mode is incompatible with -txindex and -rescan. Warning: Reverting this setting requires re-downloading the entire blockchain. (default: 0 = disable pruning blocks, &gt;%u = target size in MiB to use for block files)</source>\n-        <translation>Reduce los requisitos de almacenaje podando (eliminando) los bloques viejos. Este modo es incompatible con -txindex y -rescan. Advertencia: Revertir este ajuste requiere volver a descargar la cadena de bloques al completo. (predeterminado: 0 = deshabilitar la poda de bloques, &gt;%u = objetivo de tama\u00f1o en MiB para usar para los archivos de bloques)</translation>\n-    </message>\n     <message>\n         <source>Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.</source>\n         <translation>Nos es posible re-escanear en modo podado.Necesitas utilizar -reindex el cual descargara la cadena de bloques al completo de nuevo.</translation>"
      },
      {
        "sha": "ba8880c4aac3ae23b231171ec8d787c57ce85079",
        "filename": "src/qt/locale/bitcoin_fi.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_fi.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_fi.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_fi.ts?ref=af01cd3a3d0647c071e94d7b0bda7128fb9aeebe",
        "patch": "@@ -1757,10 +1757,6 @@\n         <source>Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)</source>\n         <translation>Karsinta: viime lompakon synkronisointi menee karsitun datan taakse. Sinun tarvitsee ajaa -reindex (lataa koko lohkoketju uudelleen tapauksessa jossa karsiva noodi)</translation>\n     </message>\n-    <message>\n-        <source>Reduce storage requirements by pruning (deleting) old blocks. This mode is incompatible with -txindex and -rescan. Warning: Reverting this setting requires re-downloading the entire blockchain. (default: 0 = disable pruning blocks, &gt;%u = target size in MiB to use for block files)</source>\n-        <translation>V\u00e4henn\u00e4 levytilan tarvetta karsimalla (poistamalla) vanhoja lohkoja. T\u00e4m\u00e4 tila ei ole yhteensopiva -txindex ja -rescan -parametrien kanssa. Varoitus: T\u00e4m\u00e4n asetuksen peruutus vaatii koko lohkoketjun uudelleenlataamisen. (oletus: 0 = poista karsinta k\u00e4yt\u00f6st\u00e4, &gt;%u = kohdekoko muodossa MiB jota k\u00e4ytet\u00e4\u00e4n lohkotiedostoille) </translation>\n-    </message>\n     <message>\n         <source>Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.</source>\n         <translation>Uudelleenskannaukset eiv\u00e4t ole mahdollisia karsivassa tilassa. Sinun t\u00e4ytyy k\u00e4ytt\u00e4\u00e4 -reindex joka lataa koko lohkoketjun uudelleen.</translation>"
      },
      {
        "sha": "23b4d2a66fa1cf64d41ef9592567abae52b8a7dc",
        "filename": "src/qt/locale/bitcoin_fr.ts",
        "status": "modified",
        "additions": 24,
        "deletions": 8,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_fr.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_fr.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_fr.ts?ref=af01cd3a3d0647c071e94d7b0bda7128fb9aeebe",
        "patch": "@@ -1998,11 +1998,11 @@\n     </message>\n     <message>\n         <source>If this is activated, but the change address is empty or invalid, change will be sent to a newly generated address.</source>\n-        <translation>Si cette option est activ\u00e9e, et l'adresse de monnaie rendue est vide ou invalide, la monnaie sera envoy\u00e9e vers une adresse nouvellement g\u00e9n\u00e9r\u00e9e.</translation>\n+        <translation>Si cette option est activ\u00e9e et l'adresse de monnaie est vide ou invalide, la monnaie sera envoy\u00e9e vers une adresse nouvellement g\u00e9n\u00e9r\u00e9e.</translation>\n     </message>\n     <message>\n         <source>Custom change address</source>\n-        <translation>Adresse personnalis\u00e9e de monnaie rendue</translation>\n+        <translation>Adresse personnalis\u00e9e de monnaie</translation>\n     </message>\n     <message>\n         <source>Transaction Fee:</source>\n@@ -2202,7 +2202,15 @@\n     </message>\n     <message>\n         <source>Warning: Unknown change address</source>\n-        <translation>Avertissement : adresse de monnaie rendue inconnue</translation>\n+        <translation>Avertissement : adresse de monnaie inconnue</translation>\n+    </message>\n+    <message>\n+        <source>Confirm custom change address</source>\n+        <translation>Confimer l'adresse personnalis\u00e9e de monnaie</translation>\n+    </message>\n+    <message>\n+        <source>The address you selected for change is not part of this wallet. Any or all funds in your wallet may be sent to this address. Are you sure?</source>\n+        <translation>L'adresse que vous avez s\u00e9lectionn\u00e9e pour la monnaie ne fait pas partie de ce porte-monnaie. Les fonds de ce porte-monnaie peuvent en partie ou en totalit\u00e9 \u00eatre envoy\u00e9s vers cette adresse. \u00cates-vous certain ?</translation>\n     </message>\n     <message>\n         <source>(no label)</source>\n@@ -2307,7 +2315,7 @@\n     </message>\n     <message>\n         <source>Do not shut down the computer until this window disappears.</source>\n-        <translation>Ne pas fermer l'ordinateur jusqu'\u00e0 la disparition de cette fen\u00eatre.</translation>\n+        <translation>Ne pas \u00e9teindre l'ordinateur jusqu'\u00e0 la disparition de cette fen\u00eatre.</translation>\n     </message>\n </context>\n <context>\n@@ -3021,10 +3029,6 @@\n         <source>Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)</source>\n         <translation>\u00c9lagage : la derni\u00e8re synchronisation de porte-monnaie va par-del\u00e0 les donn\u00e9es \u00e9lagu\u00e9es.  Vous devez -reindex (r\u00e9indexer, t\u00e9l\u00e9charger de nouveau toute la cha\u00eene de blocs en cas de n\u0153ud \u00e9lagu\u00e9)</translation>\n     </message>\n-    <message>\n-        <source>Reduce storage requirements by pruning (deleting) old blocks. This mode is incompatible with -txindex and -rescan. Warning: Reverting this setting requires re-downloading the entire blockchain. (default: 0 = disable pruning blocks, &gt;%u = target size in MiB to use for block files)</source>\n-        <translation>R\u00e9duire les exigences de stockage en \u00e9laguant (supprimant) les anciens blocs. Ce mode est incompatible avec -txindex et -rescan. Avertissement : ramener ce param\u00e8tre \u00e0 sa valeur ant\u00e9rieure exige un nouveau t\u00e9l\u00e9chargement de la cha\u00eene de blocs en entier (par d\u00e9faut : 0 = d\u00e9sactiver l'\u00e9lagage des blocs, &gt;%u = taille cible en Mio \u00e0 utiliser pour les fichiers de blocs).</translation>\n-    </message>\n     <message>\n         <source>Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.</source>\n         <translation>Les rebalayages sont impossibles en mode \u00e9lagage. Vous devrez utiliser -reindex, ce qui t\u00e9l\u00e9chargera de nouveau la cha\u00eene de blocs en entier.</translation>\n@@ -3105,6 +3109,14 @@\n         <source>Please contribute if you find %s useful. Visit %s for further information about the software.</source>\n         <translation>Si vous trouvez %s utile, vous pouvez y contribuer. Vous trouverez davantage d'informations \u00e0 propos du logiciel sur %s.</translation>\n     </message>\n+    <message>\n+        <source>Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex and -rescan. Warning: Reverting this setting requires re-downloading the entire blockchain. (default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, &gt;%u = automatically prune block files to stay under the specified target size in MiB)</source>\n+        <translation>R\u00e9duire les exigences de stockage en activant l'\u00e9lagage (suppression) des anciens blocs. Cela permet d'appeler le RPC \u00ab pruneblockchain \u00bb pour supprimer des blocs pr\u00e9cis et active l'\u00e9lagage automatique des anciens blocs si une taille cible en Mio est fournie. Ce mode n'est pas compatible avec -txindex et -rescan. Avertissement : ramener ce param\u00e8tre \u00e0 sa valeur ant\u00e9rieure exige de ret\u00e9l\u00e9charger l'int\u00e9gralit\u00e9 de la cha\u00eene de blocs (par d\u00e9faut : 0 = d\u00e9sactiver l'\u00e9lagage des blocs, 1 = permettre l'\u00e9lagage manuel par RPC, &gt;%u = \u00e9laguer automatiquement les fichiers de blocs pour rester en de\u00e7\u00e0 de la taille cible pr\u00e9cis\u00e9e en Mio).</translation>\n+    </message>\n+    <message>\n+        <source>Set lowest fee rate (in %s/kB) for transactions to be included in block creation. (default: %s)</source>\n+        <translation>D\u00e9finir le taux minimal de frais (en %s/ko) pour les transactions \u00e0 inclure dans la cr\u00e9ation de blocs (par d\u00e9faut : %s)</translation>\n+    </message>\n     <message>\n         <source>Set the number of script verification threads (%u to %d, 0 = auto, &lt;0 = leave that many cores free, default: %d)</source>\n         <translation>D\u00e9finir le nombre de fils de v\u00e9rification des scripts (%u \u00e0 %d, 0 = auto, &lt; 0 = laisser ce nombre de c\u0153urs inutilis\u00e9s, par d\u00e9faut : %d)</translation>\n@@ -3125,6 +3137,10 @@\n         <source>Use UPnP to map the listening port (default: 1 when listening and no -proxy)</source>\n         <translation>Utiliser l'UPnP pour mapper le port d'\u00e9coute (par d\u00e9faut\u00a0: 1 en \u00e9coute et sans -proxy)</translation>\n     </message>\n+    <message>\n+        <source>Username and hashed password for JSON-RPC connections. The field &lt;userpw&gt; comes in the format: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. A canonical python script is included in share/rpcuser. The client then connects normally using the rpcuser=&lt;USERNAME&gt;/rpcpassword=&lt;PASSWORD&gt; pair of arguments. This option can be specified multiple times</source>\n+        <translation>Nom d'utilisateur et mot de passe hach\u00e9 pour les connexions JSON-RPC. Le champ &lt;userpw&gt; est au format : &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. Un script python canonique est inclus dans share/rpcuser. Le client se connecte ensuite normalement en utilisant la paire d'arguments rpcuser=&lt;USERNAME&gt;/rpcpassword=&lt;PASSWORD&gt;. Cette option peut \u00eatre sp\u00e9cifi\u00e9e plusieurs fois.</translation>\n+    </message>\n     <message>\n         <source>Wallet will not create transactions that violate mempool chain limits (default: %u)</source>\n         <translation>Un porte-monnaie ne cr\u00e9era aucune transaction qui enfreint les limites de cha\u00eene de la r\u00e9serve de m\u00e9moire (par d\u00e9faut : %u)</translation>"
      },
      {
        "sha": "1e359e52e58a6a0d553148a35a797a6fb906c206",
        "filename": "src/qt/locale/bitcoin_it.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_it.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_it.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_it.ts?ref=af01cd3a3d0647c071e94d7b0bda7128fb9aeebe",
        "patch": "@@ -1942,10 +1942,6 @@ Per specificare pi\u00f9 URL separarli con una barra verticale \"|\".</translation>\n         <source>Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)</source>\n         <translation>Prune: l'ultima sincronizzazione del wallet risulta essere oltre la riduzione dei dati. \u00c8 necessario eseguire un -reindex (scaricare nuovamente la blockchain in caso di nodo pruned)</translation>\n     </message>\n-    <message>\n-        <source>Reduce storage requirements by pruning (deleting) old blocks. This mode is incompatible with -txindex and -rescan. Warning: Reverting this setting requires re-downloading the entire blockchain. (default: 0 = disable pruning blocks, &gt;%u = target size in MiB to use for block files)</source>\n-        <translation>Riduce i requisiti di spazio di archiviazione attraverso la rimozione dei vecchi blocchi (pruning). Questa modalit\u00e0 \u00e8 incompatibile con l'opzione -txindex e -rescan. Attenzione: ripristinando questa opzione l'intera blockchain dovr\u00e0 essere riscaricata. (default: 0 = disabilita il pruning, &gt;%u = dimensione desiderata in MiB per i file dei blocchi)</translation>\n-    </message>\n     <message>\n         <source>Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.</source>\n         <translation>Non \u00e8 possibile un Rescan in modalit\u00e0 pruned. Sar\u00e0 necessario utilizzare -reindex che far\u00e0 scaricare nuovamente tutta la blockchain.</translation>"
      },
      {
        "sha": "0f3c9e596a7eccaa05751e8e6d71eef801c04d7f",
        "filename": "src/qt/locale/bitcoin_ja.ts",
        "status": "modified",
        "additions": 20,
        "deletions": 4,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_ja.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_ja.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ja.ts?ref=af01cd3a3d0647c071e94d7b0bda7128fb9aeebe",
        "patch": "@@ -2204,6 +2204,14 @@\n         <source>Warning: Unknown change address</source>\n         <translation>\u8b66\u544a\uff1a\u672a\u77e5\u306e\u304a\u3064\u308a\u30a2\u30c9\u30ec\u30b9\u3067\u3059</translation>\n     </message>\n+    <message>\n+        <source>Confirm custom change address</source>\n+        <translation>\u30ab\u30b9\u30bf\u30e0\u304a\u3064\u308a\u30a2\u30c9\u30ec\u30b9\u3092\u78ba\u8a8d</translation>\n+    </message>\n+    <message>\n+        <source>The address you selected for change is not part of this wallet. Any or all funds in your wallet may be sent to this address. Are you sure?</source>\n+        <translation>\u304a\u3064\u308a\u3068\u3057\u3066\u6307\u5b9a\u3055\u308c\u305f\u30a2\u30c9\u30ec\u30b9\u306f\u3053\u306e\u30a6\u30a9\u30ec\u30c3\u30c8\u306b\u5c5e\u3055\u306a\u3044\u3082\u306e\u306e\u3088\u3046\u3067\u3059\u3002\u3053\u306e\u30a6\u30a9\u30ec\u30c3\u30c8\u306e\u4e00\u90e8\u307e\u305f\u306f\u3059\u3079\u3066\u306e\u8cc7\u7523\u304c\u3053\u306e\u30a2\u30c9\u30ec\u30b9\u3078\u9001\u91d1\u3055\u308c\u307e\u3059\u3002\u3088\u308d\u3057\u3044\u3067\u3059\u304b\uff1f</translation>\n+    </message>\n     <message>\n         <source>(no label)</source>\n         <translation>\uff08\u30e9\u30d9\u30eb\u7121\u3057\uff09</translation>\n@@ -3021,10 +3029,6 @@\n         <source>Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)</source>\n         <translation>\u526a\u5b9a: \u6700\u5f8c\u306e\u30a6\u30a9\u30ec\u30c3\u30c8\u540c\u671f\u30dd\u30a4\u30f3\u30c8\u306f\u3001\u9078\u5b9a\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3088\u308a\u3082\u904e\u53bb\u306e\u3082\u306e\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002-reindex\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059 (\u526a\u5b9a\u3055\u308c\u305f\u30ce\u30fc\u30c9\u306e\u5834\u5408\u3001\u30d6\u30ed\u30c3\u30af\u30c1\u30a7\u30a4\u30f3\u5168\u4f53\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059)</translation>\n     </message>\n-    <message>\n-        <source>Reduce storage requirements by pruning (deleting) old blocks. This mode is incompatible with -txindex and -rescan. Warning: Reverting this setting requires re-downloading the entire blockchain. (default: 0 = disable pruning blocks, &gt;%u = target size in MiB to use for block files)</source>\n-        <translation>\u53e4\u3044\u30d6\u30ed\u30c3\u30af\u3092\u526a\u5b9a\u3059\u308b (\u524a\u9664\u3059\u308b) \u3053\u3068\u3067\u8a18\u61b6\u5bb9\u91cf\u306e\u5fc5\u8981\u91cf\u3092\u524a\u6e1b\u3059\u308b\u3002\u3053\u306e\u30e2\u30fc\u30c9\u3092\u6709\u52b9\u306b\u3059\u308b\u3068-txindex\u3084-rescan\u3068\u4e92\u63db\u6027\u304c\u306a\u304f\u306a\u308a\u307e\u3059\u3002\u8b66\u544a: \u3053\u306e\u8a2d\u5b9a\u306e\u518d\u6709\u52b9\u5316\u306b\u306f\u5168\u30d6\u30ed\u30c3\u30af\u30c1\u30a7\u30a4\u30f3\u306e\u518d\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u304c\u5fc5\u8981\u3068\u306a\u308a\u307e\u3059\u3002(\u898f\u5b9a\u5024: 0 = \u30d6\u30ed\u30c3\u30af\u306e\u526a\u5b9a\u7121\u52b9\u3001&gt;%u = \u30d6\u30ed\u30c3\u30af\u30d5\u30a1\u30a4\u30eb\u306b\u4f7f\u7528\u3059\u308bMiB\u5358\u4f4d\u306e\u76ee\u6a19\u30b5\u30a4\u30ba)</translation>\n-    </message>\n     <message>\n         <source>Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.</source>\n         <translation>\u526a\u5b9a\u30e2\u30fc\u30c9\u3067\u306f\u518d\u30b9\u30ad\u30e3\u30f3\u3092\u884c\u3046\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002-reindex\u3092\u6307\u5b9a\u3057\u3001\u30d6\u30ed\u30c3\u30af\u30c1\u30a7\u30a4\u30f3\u5168\u4f53\u3092\u518d\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</translation>\n@@ -3105,6 +3109,14 @@\n         <source>Please contribute if you find %s useful. Visit %s for further information about the software.</source>\n         <translation>%s \u304c\u6709\u7528\u3060\u3068\u611f\u3058\u3089\u308c\u305f\u65b9\u306f\u305c\u3072\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3078\u306e\u8ca2\u732e\u3092\u304a\u9858\u3044\u3057\u307e\u3059\u3002\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306e\u3088\u308a\u8a73\u7d30\u306a\u60c5\u5831\u306b\u3064\u3044\u3066\u306f %s \u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002</translation>\n     </message>\n+    <message>\n+        <source>Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex and -rescan. Warning: Reverting this setting requires re-downloading the entire blockchain. (default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, &gt;%u = automatically prune block files to stay under the specified target size in MiB)</source>\n+        <translation>\u53e4\u3044\u30d6\u30ed\u30c3\u30af\u306e\u526a\u5b9a (\u524a\u9664) \u3092\u6709\u52b9\u306b\u3059\u308b\u3053\u3068\u3067\u30b9\u30c8\u30ec\u30fc\u30b8\u306e\u5fc5\u8981\u91cf\u3092\u524a\u6e1b\u3059\u308b\u3002\u3053\u308c\u306b\u3088\u308a pruneblockchain RPC \u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u3067\u6307\u5b9a\u3055\u308c\u305f\u30d6\u30ed\u30c3\u30af\u3092\u524a\u9664\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u307e\u305f\u30bf\u30fc\u30b2\u30c3\u30c8\u30b5\u30a4\u30ba\u304c MiB \u5358\u4f4d\u3067\u6307\u5b9a\u3055\u308c\u305f\u5834\u5408\u306b\u306f\u53e4\u3044\u30d6\u30ed\u30c3\u30af\u306e\u81ea\u52d5\u526a\u5b9a\u304c\u6709\u52b9\u3068\u306a\u308a\u307e\u3059\u3002\u3053\u306e\u30e2\u30fc\u30c9\u306f -txindex \u304a\u3088\u3073 -rescan \u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u4e92\u63db\u6027\u304c\u3042\u308a\u307e\u305b\u3093\u3002\u8b66\u544a: \u3053\u306e\u8a2d\u5b9a\u3092\u6700\u6709\u52b9\u5316\u3059\u308b\u306b\u306f\u3059\u3079\u3066\u306e\u30d6\u30ed\u30c3\u30af\u30c1\u30a7\u30fc\u30f3\u306e\u518d\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u304c\u5fc5\u8981\u3068\u306a\u308a\u307e\u3059\u3002(\u30c7\u30d5\u30a9\u30eb\u30c8: 0 = \u30d6\u30ed\u30c3\u30af\u306e\u526a\u5b9a\u3092\u7121\u52b9\u5316\u3059\u308b, 1 = RPC \u7d4c\u7531\u3067\u306e\u624b\u52d5\u526a\u5b9a\u3092\u8a31\u53ef\u3059\u308b, &gt;%u = MiB \u5358\u4f4d\u3067\u6307\u5b9a\u3055\u308c\u305f\u30bf\u30fc\u30b2\u30c3\u30c8\u30b5\u30a4\u30ba\u3092\u5e38\u306b\u4e0b\u56de\u308b\u3088\u3046\u306b\u30d6\u30ed\u30c3\u30af\u30d5\u30a1\u30a4\u30eb\u3092\u81ea\u52d5\u7684\u306b\u526a\u5b9a\u3059\u308b)</translation>\n+    </message>\n+    <message>\n+        <source>Set lowest fee rate (in %s/kB) for transactions to be included in block creation. (default: %s)</source>\n+        <translation>\u30d6\u30ed\u30c3\u30af\u751f\u6210\u6642\u306b\u53d6\u308a\u8fbc\u307e\u308c\u308b\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u306e\u6700\u4f4e\u624b\u6570\u6599\u7387 (%s/kB \u5358\u4f4d)\u3002(\u30c7\u30d5\u30a9\u30eb\u30c8: %s)</translation>\n+    </message>\n     <message>\n         <source>Set the number of script verification threads (%u to %d, 0 = auto, &lt;0 = leave that many cores free, default: %d)</source>\n         <translation>\u30b9\u30af\u30ea\u30d7\u30c8\u691c\u8a3c\u30b9\u30ec\u30c3\u30c9\u3092\u8a2d\u5b9a (%u\u304b\u3089%d\u306e\u9593, 0 = \u81ea\u52d5, &lt;0 = \u305f\u304f\u3055\u3093\u306e\u30b3\u30a2\u3092\u81ea\u7531\u306b\u3057\u3066\u304a\u304f, \u521d\u671f\u5024: %d)</translation>\n@@ -3125,6 +3137,10 @@\n         <source>Use UPnP to map the listening port (default: 1 when listening and no -proxy)</source>\n         <translation>\u30ea\u30b9\u30f3 \u30dd\u30fc\u30c8\u306e\u5272\u5f53\u306b UPnP \u3092\u4f7f\u7528 (\u521d\u671f\u5024: \u30ea\u30b9\u30f3\u4e2d\u304a\u3088\u3073-proxy\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f1)</translation>\n     </message>\n+    <message>\n+        <source>Username and hashed password for JSON-RPC connections. The field &lt;userpw&gt; comes in the format: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. A canonical python script is included in share/rpcuser. The client then connects normally using the rpcuser=&lt;USERNAME&gt;/rpcpassword=&lt;PASSWORD&gt; pair of arguments. This option can be specified multiple times</source>\n+        <translation>JSON-RPC \u63a5\u7d9a\u6642\u306e\u30e6\u30fc\u30b6\u540d\u3068\u30cf\u30c3\u30b7\u30e5\u5316\u3055\u308c\u305f\u30d1\u30b9\u30ef\u30fc\u30c9\u3002&lt;userpw&gt; \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306f &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;\u3002\u6a19\u6e96\u7684\u306a Python \u30b9\u30af\u30ea\u30d7\u30c8\u304c share/rpcuser \u5185\u306b\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306f\u901a\u5e38\u306e\u5834\u5408\u306b\u306f rpcuser=&lt;USERNAME&gt;/rpcpassword=&lt;PASSWORD&gt; \u3092\u5229\u7528\u3057\u3066\u63a5\u7d9a\u3092\u884c\u3044\u307e\u3059\u3002\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u8907\u6570\u56de\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002</translation>\n+    </message>\n     <message>\n         <source>Wallet will not create transactions that violate mempool chain limits (default: %u)</source>\n         <translation>\u30a6\u30a9\u30ec\u30c3\u30c8\u304cmempool\u30c1\u30a7\u30fc\u30f3\u5236\u9650\u6570\u3092\u8d85\u3048\u3066\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3092\u4f5c\u3089\u306a\u3044\u3088\u3046\u306b\u3059\u308b (\u521d\u671f\u5024: %u)</translation>"
      },
      {
        "sha": "b5af4602c86643a3ffeb7973dc5f70a118885ff9",
        "filename": "src/qt/locale/bitcoin_ko_KR.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_ko_KR.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_ko_KR.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ko_KR.ts?ref=af01cd3a3d0647c071e94d7b0bda7128fb9aeebe",
        "patch": "@@ -2277,10 +2277,6 @@\n         <source>Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)</source>\n         <translation>\ube14\ub85d \ucd95\uc18c: \ub9c8\uc9c0\ub9c9 \uc9c0\uac11 \ub3d9\uae30\ud654 \uc9c0\uc810\uc774 \ucd95\uc18c\ub41c \ub370\uc774\ud130\ubcf4\ub2e4 \uacfc\uac70\uc758 \uac83 \uc785\ub2c8\ub2e4. -reindex\uac00 \ud544\uc694\ud569\ub2c8\ub2e4 (\uc815\uc9c0\ub41c \ub178\ub4dc\uc758 \uacbd\uc6b0 \ubaa8\ub4e0 \ube14\ub85d\uccb4\uc778\uc744 \uc7ac\ub2e4\uc6b4\ub85c\ub4dc\ud569\ub2c8\ub2e4)</translation>\n     </message>\n-    <message>\n-        <source>Reduce storage requirements by pruning (deleting) old blocks. This mode is incompatible with -txindex and -rescan. Warning: Reverting this setting requires re-downloading the entire blockchain. (default: 0 = disable pruning blocks, &gt;%u = target size in MiB to use for block files)</source>\n-        <translation>\uc624\ub798\ub41c \ube14\ub85d\uc744 \uc81c\uac70(\ucd95\uc18c)\ud558\uc5ec \ub514\uc2a4\ud06c \uc6a9\ub7c9\uc744 \uc904\uc785\ub2c8\ub2e4. \uc774 \ubaa8\ub4dc\ub294 -txindex \uc640 -rescan \uacfc \ud638\ud658\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uacbd\uace0: \uc774 \ubaa8\ub4dc\ub97c \ucde8\uc18c\ud558\uba74 \ubaa8\ub4e0 \ube14\ub85d\uccb4\uc778\uc744 \ub2e4\uc2dc \ub2e4\uc6b4\ub85c\ub4dc \ubc1b\uc544\uc57c \ud569\ub2c8\ub2e4. (\uae30\ubcf8\uac12:0 = \ube14\ub85d \ucd95\uc18c \ube44\ud65c\uc131\ud654, &gt;%u = \ube14\ub85d\ud30c\uc77c\uc5d0 \uc0ac\uc6a9\ud560 \uc6a9\ub7c9\uc744 MiB\ub2e8\uc704\ub85c \uc9c0\uc815)</translation>\n-    </message>\n     <message>\n         <source>Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.</source>\n         <translation>\ube14\ub85d \ucd95\uc18c \ubaa8\ub4dc\uc5d0\uc11c\ub294 \uc7ac\uac80\uc0c9\uc774 \ubd88\uac00\ub2a5 \ud569\ub2c8\ub2e4. -reindex \uba85\ub839\uc744 \uc0ac\uc6a9\ud574\uc11c \ubaa8\ub4e0 \ube14\ub85d\uccb4\uc778\uc744 \ub2e4\uc2dc \ub2e4\uc6b4\ub85c\ub4dc \ud574\uc57c \ud569\ub2c8\ub2e4.</translation>"
      },
      {
        "sha": "1f76fdb0b3f5bc2f28c7ef27f9d29d2721738bcd",
        "filename": "src/qt/locale/bitcoin_nb.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_nb.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_nb.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_nb.ts?ref=af01cd3a3d0647c071e94d7b0bda7128fb9aeebe",
        "patch": "@@ -1709,10 +1709,6 @@\n         <source>Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)</source>\n         <translation>Beskj\u00e6ring: siste lommeboksynkronisering g\u00e5r utenfor beskj\u00e6rte data. Du m\u00e5 bruke -reindex (laster ned hele blokkjeden igjen for beskj\u00e6rte noder)</translation>\n     </message>\n-    <message>\n-        <source>Reduce storage requirements by pruning (deleting) old blocks. This mode is incompatible with -txindex and -rescan. Warning: Reverting this setting requires re-downloading the entire blockchain. (default: 0 = disable pruning blocks, &gt;%u = target size in MiB to use for block files)</source>\n-        <translation>Reduser lagringsbehovet ved beskj\u00e6ring (sletting) av gamle blokker. Denne modusen er ikke kompatibel med -txindex og -rescan. Advarsel: Tilbakestilling av denne innstillingen krever at hele blokkjeden m\u00e5 lastes ned p\u00e5 nytt. (Standardverdi: 0 = deaktiver beskj\u00e6ring av blokker, &gt;%u = m\u00e5l for st\u00f8rrelse i MiB \u00e5 bruke for blokkfiler)</translation>\n-    </message>\n     <message>\n         <source>Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.</source>\n         <translation>Oms\u00f8k er ikke mulig i beskj\u00e6rt modus. Du vil m\u00e5tte bruke -reindex som vil laste nede hele blokkjeden p\u00e5 nytt.</translation>"
      },
      {
        "sha": "9094cd40a556d894eef2375593527b8a8764b8fb",
        "filename": "src/qt/locale/bitcoin_nl.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_nl.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_nl.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_nl.ts?ref=af01cd3a3d0647c071e94d7b0bda7128fb9aeebe",
        "patch": "@@ -2837,10 +2837,6 @@\n         <source>Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)</source>\n         <translation>Snoei: laatste portemoneesynchronisatie gaat verder dan de gesnoeide data. U moet -reindex gebruiken (download opnieuw de gehele blokketen voor een weggesnoeide node)</translation>\n     </message>\n-    <message>\n-        <source>Reduce storage requirements by pruning (deleting) old blocks. This mode is incompatible with -txindex and -rescan. Warning: Reverting this setting requires re-downloading the entire blockchain. (default: 0 = disable pruning blocks, &gt;%u = target size in MiB to use for block files)</source>\n-        <translation>Beperk benodigde opslag door snoeien (verwijderen) van oude blokken. Deze modus is niet-compatibele met -txindex en -rescan. Waarschuwing: Terugzetten van deze instellingen vereist opnieuw downloaden van gehele de blokketen. (standaard:0 = uitzetten snoeimodus, &gt;%u = doelgrootte in MiB voor blokbestanden)</translation>\n-    </message>\n     <message>\n         <source>Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.</source>\n         <translation>Herscannen is niet mogelijk in de snoeimodus. U moet -reindex gebruiken dat de hele blokketen opnieuw zal downloaden.</translation>"
      },
      {
        "sha": "ab6fb41870e1ae9e01825d76c06d26f56233ec9e",
        "filename": "src/qt/locale/bitcoin_pl.ts",
        "status": "modified",
        "additions": 157,
        "deletions": 9,
        "changes": 166,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_pl.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_pl.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_pl.ts?ref=af01cd3a3d0647c071e94d7b0bda7128fb9aeebe",
        "patch": "@@ -1209,7 +1209,47 @@\n         <source>Cannot start bitcoin: click-to-pay handler</source>\n         <translation>Nie mo\u017cna uruchomi\u0107 protoko\u0142u bitcoin: kliknij-by-zap\u0142aci\u0107</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>URI handling</source>\n+        <translation>Obs\u0142uga URI</translation>\n+    </message>\n+    <message>\n+        <source>Payment request expired.</source>\n+        <translation>\u017b\u0105danie p\u0142atno\u015bci up\u0142yn\u0119\u0142o.</translation>\n+    </message>\n+    <message>\n+        <source>Payment request is not initialized.</source>\n+        <translation>\u017b\u0105danie p\u0142atno\u015bci nie jest zainicjowane.</translation>\n+    </message>\n+    <message>\n+        <source>Unverified payment requests to custom payment scripts are unsupported.</source>\n+        <translation>Niezweryfikowane \u017c\u0105dania p\u0142atno\u015bci do w\u0142asnych skrypt\u00f3w p\u0142atno\u015bci s\u0105 niewspierane.</translation>\n+    </message>\n+    <message>\n+        <source>Invalid payment request.</source>\n+        <translation>Nieprawid\u0142owe \u017c\u0105danie p\u0142atno\u015bci</translation>\n+    </message>\n+    <message>\n+        <source>Refund from %1</source>\n+        <translation>Zwrot z %1</translation>\n+    </message>\n+    <message>\n+        <source>Payment request cannot be parsed!</source>\n+        <translation>\u017b\u0105danie p\u0142atno\u015bci nie mo\u017ce zosta\u0107 przetworzone.</translation>\n+    </message>\n+    <message>\n+        <source>Bad response from server %1</source>\n+        <translation>B\u0142\u0119dna odpowied\u017a z serwera %1</translation>\n+    </message>\n+    <message>\n+        <source>Network request error</source>\n+        <translation>B\u0142\u0105d \u017c\u0105dania sieci</translation>\n+    </message>\n+    <message>\n+        <source>Payment acknowledged</source>\n+        <translation>P\u0142atno\u015b\u0107 potwierdzona</translation>\n+    </message>\n+</context>\n <context>\n     <name>PeerTableModel</name>\n     <message>\n@@ -1220,7 +1260,15 @@\n         <source>Node/Service</source>\n         <translation>W\u0119ze\u0142/Us\u0142ugi</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>NodeId</source>\n+        <translation>Identyfikator w\u0119z\u0142a</translation>\n+    </message>\n+    <message>\n+        <source>Ping</source>\n+        <translation>Ping</translation>\n+    </message>\n+</context>\n <context>\n     <name>QObject</name>\n     <message>\n@@ -1259,17 +1307,45 @@\n         <source>%1 ms</source>\n         <translation>%1 ms</translation>\n     </message>\n+    <message numerus=\"yes\">\n+        <source>%n second(s)</source>\n+        <translation><numerusform>%n sekunda</numerusform><numerusform>%n sekund</numerusform><numerusform>%n sekund</numerusform></translation>\n+    </message>\n+    <message numerus=\"yes\">\n+        <source>%n minute(s)</source>\n+        <translation><numerusform>%n minuta</numerusform><numerusform>%n minut</numerusform><numerusform>%n minut</numerusform></translation>\n+    </message>\n     <message>\n         <source>%1 and %2</source>\n         <translation>%1 i %2</translation>\n     </message>\n     </context>\n <context>\n     <name>QObject::QObject</name>\n-    </context>\n+    <message>\n+        <source>Error: %1</source>\n+        <translation>B\u0142\u0105d: %1</translation>\n+    </message>\n+</context>\n <context>\n     <name>QRImageWidget</name>\n-    </context>\n+    <message>\n+        <source>&amp;Save Image...</source>\n+        <translation>&amp;Zapisz obraz...</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Copy Image</source>\n+        <translation>&amp;Kopiuj obraz</translation>\n+    </message>\n+    <message>\n+        <source>Save QR Code</source>\n+        <translation>Zapisz Kod QR</translation>\n+    </message>\n+    <message>\n+        <source>PNG Image (*.png)</source>\n+        <translation>Obraz PNG (*.png)</translation>\n+    </message>\n+</context>\n <context>\n     <name>RPCConsole</name>\n     <message>\n@@ -1428,6 +1504,10 @@\n         <source>Ping Wait</source>\n         <translation>Czas odpowiedzi</translation>\n     </message>\n+    <message>\n+        <source>Min Ping</source>\n+        <translation>Minimalny czas odpowiedzi</translation>\n+    </message>\n     <message>\n         <source>Time Offset</source>\n         <translation>Przesuni\u0119cie czasu</translation>\n@@ -1488,6 +1568,18 @@\n         <source>1 &amp;year</source>\n         <translation>1 &amp;rok</translation>\n     </message>\n+    <message>\n+        <source>&amp;Disconnect</source>\n+        <translation>&amp;Roz\u0142\u0105cz</translation>\n+    </message>\n+    <message>\n+        <source>Ban for</source>\n+        <translation>Zbanuj na</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Unban</source>\n+        <translation>&amp;Odblokuj</translation>\n+    </message>\n     <message>\n         <source>Welcome to the %1 RPC console.</source>\n         <translation>Witaj w konsoli %1 RPC.</translation>\n@@ -1619,10 +1711,18 @@\n         <source>Remove</source>\n         <translation>Usu\u0144</translation>\n     </message>\n+    <message>\n+        <source>Copy URI</source>\n+        <translation>Kopiuj URI:</translation>\n+    </message>\n     <message>\n         <source>Copy label</source>\n         <translation>Kopiuj etykiet\u0119</translation>\n     </message>\n+    <message>\n+        <source>Copy message</source>\n+        <translation>Kopiuj wiadomo\u015b\u0107</translation>\n+    </message>\n     <message>\n         <source>Copy amount</source>\n         <translation>Kopiuj kwot\u0119</translation>\n@@ -1646,14 +1746,34 @@\n         <source>&amp;Save Image...</source>\n         <translation>&amp;Zapisz obraz...</translation>\n     </message>\n+    <message>\n+        <source>Request payment to %1</source>\n+        <translation>Za\u017c\u0105daj p\u0142atno\u015bci do %1</translation>\n+    </message>\n+    <message>\n+        <source>Payment information</source>\n+        <translation>Informacje o p\u0142atno\u015bci</translation>\n+    </message>\n+    <message>\n+        <source>URI</source>\n+        <translation>URI</translation>\n+    </message>\n     <message>\n         <source>Address</source>\n         <translation>Adres</translation>\n     </message>\n+    <message>\n+        <source>Amount</source>\n+        <translation>Kwota</translation>\n+    </message>\n     <message>\n         <source>Label</source>\n         <translation>Etykieta</translation>\n     </message>\n+    <message>\n+        <source>Message</source>\n+        <translation>Wiadomo\u015b\u0107</translation>\n+    </message>\n     </context>\n <context>\n     <name>RecentRequestsTableModel</name>\n@@ -1665,11 +1785,23 @@\n         <source>Label</source>\n         <translation>Etykieta</translation>\n     </message>\n+    <message>\n+        <source>Message</source>\n+        <translation>Wiadomo\u015b\u0107</translation>\n+    </message>\n     <message>\n         <source>(no label)</source>\n         <translation>(brak etykiety)</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>(no message)</source>\n+        <translation>(brak wiadomo\u015bci)</translation>\n+    </message>\n+    <message>\n+        <source>Requested</source>\n+        <translation>Za\u017c\u0105dano</translation>\n+    </message>\n+</context>\n <context>\n     <name>SendCoinsDialog</name>\n     <message>\n@@ -1796,6 +1928,10 @@\n         <source>Dust:</source>\n         <translation>Py\u0142:</translation>\n     </message>\n+    <message>\n+        <source>Confirmation time target:</source>\n+        <translation>Docelowy czas potwierdzenia:</translation>\n+    </message>\n     <message>\n         <source>Clear &amp;All</source>\n         <translation>Wyczy\u015b\u0107 &amp;wszystko</translation>\n@@ -1840,6 +1976,14 @@\n         <source>Copy change</source>\n         <translation>Skopiuj reszt\u0119</translation>\n     </message>\n+    <message>\n+        <source>%1 to %2</source>\n+        <translation>%1 do %2</translation>\n+    </message>\n+    <message>\n+        <source>Payment request expired.</source>\n+        <translation>\u017b\u0105danie p\u0142atno\u015bci up\u0142yn\u0119\u0142o.</translation>\n+    </message>\n     <message>\n         <source>(no label)</source>\n         <translation>(brak etykiety)</translation>\n@@ -2078,6 +2222,14 @@ Zwr\u00f3\u0107 uwag\u0119, \u017ce poprawnie zweryfikowana wiadomo\u015b\u0107 potwierdza to, \u017ce nadaw\n         <source>label</source>\n         <translation>etykieta</translation>\n     </message>\n+    <message>\n+        <source>Message</source>\n+        <translation>Wiadomo\u015b\u0107</translation>\n+    </message>\n+    <message>\n+        <source>Amount</source>\n+        <translation>Kwota</translation>\n+    </message>\n     </context>\n <context>\n     <name>TransactionDescDialog</name>\n@@ -2250,10 +2402,6 @@ Zwr\u00f3\u0107 uwag\u0119, \u017ce poprawnie zweryfikowana wiadomo\u015b\u0107 potwierdza to, \u017ce nadaw\n         <source>Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)</source>\n         <translation>Prune: ostatnia synchronizacja portfela jest za danymi. Muszisz -reindexowa\u0107 (pobra\u0107 ca\u0142y ci\u0105g blok\u00f3w ponownie w przypadku przyci\u0119tego w\u0119z\u0142a)</translation>\n     </message>\n-    <message>\n-        <source>Reduce storage requirements by pruning (deleting) old blocks. This mode is incompatible with -txindex and -rescan. Warning: Reverting this setting requires re-downloading the entire blockchain. (default: 0 = disable pruning blocks, &gt;%u = target size in MiB to use for block files)</source>\n-        <translation>Zredukuj wymagan\u0105 ilo\u015b\u0107 miejsca na dysku poprzez usuwanie starych blok\u00f3w. Ten tryb jest niekompatybilny z -txindex oraz -rescan. Ostrze\u017cenie: Wycofanie tego ustawienia wymaga ponownego pobrania ca\u0142ego \u0142a\u0144cucha blok\u00f3w. (domy\u015blnie: 0 = wy\u0142\u0105cz usuwanie blok\u00f3w, &gt;%u = docelowy rozmiar w MiB jaki wykorzysta\u0107 na pliki z blokami)</translation>\n-    </message>\n     <message>\n         <source>Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.</source>\n         <translation>Ponowne skanowanie nie jest mo\u017cliwe w trybie przycinania. B\u0119dzie trzeba u\u017cy\u0107 -reindex, co pobierze ponownie ca\u0142y \u0142a\u0144cuch blok\u00f3w.</translation>"
      },
      {
        "sha": "e9ef5258f6e5ae5f7975a2d477358714e59c2df7",
        "filename": "src/qt/locale/bitcoin_pt_BR.ts",
        "status": "modified",
        "additions": 16,
        "deletions": 4,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_pt_BR.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_pt_BR.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_pt_BR.ts?ref=af01cd3a3d0647c071e94d7b0bda7128fb9aeebe",
        "patch": "@@ -2200,6 +2200,10 @@\n         <source>Confirm custom change address</source>\n         <translation>Confirmar endere\u00e7o de troco personalizado</translation>\n     </message>\n+    <message>\n+        <source>The address you selected for change is not part of this wallet. Any or all funds in your wallet may be sent to this address. Are you sure?</source>\n+        <translation>O endere\u00e7o selecionado para o troco n\u00e3o pertence a esta carteira. Alguns ou todos os fundos da sua carteira modem ser mandados para esse endere\u00e7o. Tem certeza?</translation>\n+    </message>\n     <message>\n         <source>(no label)</source>\n         <translation>(sem r\u00f3tuo)</translation>\n@@ -3017,10 +3021,6 @@\n         <source>Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)</source>\n         <translation>Prune: A ultima sincroniza\u00e7\u00e3o da carteira foi al\u00e9m do dado comprimido. Voc\u00ea precisa reindexar (fazer o download de toda a blockchain novamente)</translation>\n     </message>\n-    <message>\n-        <source>Reduce storage requirements by pruning (deleting) old blocks. This mode is incompatible with -txindex and -rescan. Warning: Reverting this setting requires re-downloading the entire blockchain. (default: 0 = disable pruning blocks, &gt;%u = target size in MiB to use for block files)</source>\n-        <translation>Reduza o armazenamento de dados apagando os blocos mais antigos. Esse modo \u00e9 incompat\u00edvel com -txindex e -rescan. Cuidado: Reverter essa configura\u00e7\u00e3o requer um novo download de toda a blockchain. (Padr\u00e3o: 0 = desabilitado, &gt;%u = tamanho em MiB para o uso de blocos cortados)</translation>\n-    </message>\n     <message>\n         <source>Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.</source>\n         <translation>Rescans n\u00e3o s\u00e3o poss\u00edveis no modo prune. Voc\u00ea precisa usar -reindex, que ir\u00e1 fazer o download de toda a blockchain novamente.</translation>\n@@ -3101,6 +3101,14 @@\n         <source>Please contribute if you find %s useful. Visit %s for further information about the software.</source>\n         <translation>Por favor contribua se voc\u00ea entender que %s \u00e9 \u00fatil. Visite %s para mais informa\u00e7\u00f5es sobre o software.</translation>\n     </message>\n+    <message>\n+        <source>Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex and -rescan. Warning: Reverting this setting requires re-downloading the entire blockchain. (default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, &gt;%u = automatically prune block files to stay under the specified target size in MiB)</source>\n+        <translation>Reduz o requerimente de espa\u00e7o habiitando o pruning (apagando) blocos antigos. Isso permite o chamar o comando pruneblockchain via RPC\u00a0para apagar blocos espec\u00edficos, e habiita o pruning autom\u00e1tico de blocos antigos se o tamanho em MiB for atingido. Esse modo \u00e9 incompat\u00edve com -txindex e -rescan. Aviso: Reverter essa configura\u00e7\u00e3o requer re-baixar\u00a0o blockchain inteiro. (padr\u00e3o: 0 = disabilitado, 1 = permite o pruning manua via RPC, &gt;%u = pruna os blocos para ficar abaixo do expecificado, em MiB)</translation>\n+    </message>\n+    <message>\n+        <source>Set lowest fee rate (in %s/kB) for transactions to be included in block creation. (default: %s)</source>\n+        <translation>Taxa (em %s/KiB) a ser adicionada \u00e0s transa\u00e7\u00f5es que voc\u00ea mandar (padr\u00e3o: %s)</translation>\n+    </message>\n     <message>\n         <source>Set the number of script verification threads (%u to %d, 0 = auto, &lt;0 = leave that many cores free, default: %d)</source>\n         <translation>Define o n\u00famero de threads de verifica\u00e7\u00e3o de script (%u a %d, 0 = autom\u00e1tico, &lt;0 = n\u00famero de cores deixados livres, padr\u00e3o: %d)</translation>\n@@ -3121,6 +3129,10 @@\n         <source>Use UPnP to map the listening port (default: 1 when listening and no -proxy)</source>\n         <translation>Use UPnP para mapear a porta escutada (padr\u00e3o: 1 quando escutando e sem -proxy)</translation>\n     </message>\n+    <message>\n+        <source>Username and hashed password for JSON-RPC connections. The field &lt;userpw&gt; comes in the format: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. A canonical python script is included in share/rpcuser. The client then connects normally using the rpcuser=&lt;USERNAME&gt;/rpcpassword=&lt;PASSWORD&gt; pair of arguments. This option can be specified multiple times</source>\n+        <translation>Nome de usu\u00e1rio e hash da senha para conex\u00f5es JSON-RPC. O campo &lt;userpw&gt; vem com o formato: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. Um script python can\u00f4nico \u00e9 inclu\u00eddo em share/rpcuser. O cliente pode conectar normalmente usando o rpcuser=&lt;USERNAME&gt;/rpcpassword=&lt;PASSWORD&gt;. Esta op\u00e7\u00e3o pode ser especificado multiplas vezes</translation>\n+    </message>\n     <message>\n         <source>Wallet will not create transactions that violate mempool chain limits (default: %u)</source>\n         <translation>A carteira n\u00e3o ir\u00e1 criar transa\u00e7\u00f5es que vioem o imite de mem\u00f3ria (padr\u00e3o: %u)</translation>"
      },
      {
        "sha": "785cc537b76c6e584ff0445241514c75c0e36b10",
        "filename": "src/qt/locale/bitcoin_pt_PT.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_pt_PT.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_pt_PT.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_pt_PT.ts?ref=af01cd3a3d0647c071e94d7b0bda7128fb9aeebe",
        "patch": "@@ -2162,10 +2162,6 @@\n         <source>Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)</source>\n         <translation>Suprimir: a \u00faltima sincroniza\u00e7\u00e3o da carteira vai al\u00e9m dos dados suprimidos. O que precisa para -reindex (transferir novamente toda a cadeia de blocos, no caso de n\u00f3 suprimido)</translation>\n     </message>\n-    <message>\n-        <source>Reduce storage requirements by pruning (deleting) old blocks. This mode is incompatible with -txindex and -rescan. Warning: Reverting this setting requires re-downloading the entire blockchain. (default: 0 = disable pruning blocks, &gt;%u = target size in MiB to use for block files)</source>\n-        <translation>Reduza os requisitos de armazenamento podando (eliminando) blocos antigos. Este modo \u00e9 incompat\u00edvel com -txindex e -rescan. Aviso: Reverter esta op\u00e7\u00e3o requer um novo descarregamento da cadeia de blocos completa. (padr\u00e3o: 0 = desactivar poda de blocos, &gt;%u = tamanho desejado em MiB para utilizar em ficheiros de blocos)</translation>\n-    </message>\n     <message>\n         <source>Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.</source>\n         <translation>Rean\u00e1lises n\u00e3o s\u00e3o poss\u00edveis no modo de suprimir. Para isso ter\u00e1 de utilizar -reindex que ir\u00e1 transferir novamente toda a cadeia de blocos.</translation>"
      },
      {
        "sha": "8dd94ff2204ad48d50a73eb9e0b41d23d1c5960b",
        "filename": "src/qt/locale/bitcoin_ru.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_ru.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_ru.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ru.ts?ref=af01cd3a3d0647c071e94d7b0bda7128fb9aeebe",
        "patch": "@@ -3029,10 +3029,6 @@\n         <source>Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)</source>\n         <translation>\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435: \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430 \u0432\u044b\u0448\u043b\u0430 \u0437\u0430 \u0440\u0430\u043c\u043a\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445. \u0412\u0430\u043c \u043d\u0443\u0436\u0435\u043d -reindex (\u0441\u043a\u0430\u0447\u0430\u0442\u044c \u0432\u0441\u044e  \u0446\u0435\u043f\u044c \u0431\u043b\u043e\u043a\u043e\u0432 \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0443\u0437\u043b\u0430)</translation>\n     </message>\n-    <message>\n-        <source>Reduce storage requirements by pruning (deleting) old blocks. This mode is incompatible with -txindex and -rescan. Warning: Reverting this setting requires re-downloading the entire blockchain. (default: 0 = disable pruning blocks, &gt;%u = target size in MiB to use for block files)</source>\n-        <translation>\u0423\u043c\u0435\u043d\u044c\u0448\u0438\u0442\u044c \u0440\u0430\u0437\u043c\u0435\u0440 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0437\u0430 \u0441\u0447\u0451\u0442 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f (\u043e\u0431\u0440\u0435\u0437\u0430\u043d\u0438\u044f) \u0441\u0442\u0430\u0440\u044b\u0445 \u0431\u043b\u043e\u043a\u043e\u0432. \u042d\u0442\u043e\u0442 \u0440\u0435\u0436\u0438\u043c \u043d\u0435\u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c \u0441 -txindex \u0438  -rescan. \u0412\u043d\u0438\u043c\u0430\u043d\u0438\u0435: \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u044d\u0442\u043e\u0439 \u043e\u043f\u0446\u0438\u0438 \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043f\u043e\u043b\u043d\u043e\u0439 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0446\u0435\u043f\u0438 \u0431\u043b\u043e\u043a\u043e\u0432. (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 0 = \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0431\u043b\u043e\u043a\u043e\u0432, &gt;%u = \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0432 \u041c\u0431 \u0434\u043b\u044f \u0444\u0430\u0439\u043b\u043e\u0432 \u0431\u043b\u043e\u043a\u043e\u0432)</translation>\n-    </message>\n     <message>\n         <source>Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.</source>\n         <translation>\u041f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0435 \u0441\u043a\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0432 \u0440\u0435\u0436\u0438\u043c\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f. \u0412\u0430\u043c \u043d\u0430\u0434\u043e \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c -reindex, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442 \u0437\u0430\u043d\u043e\u0432\u043e \u0432\u0441\u044e \u0446\u0435\u043f\u044c \u0431\u043b\u043e\u043a\u043e\u0432.</translation>"
      },
      {
        "sha": "fc7ccdeba22b90297bf5396fcbd3b36f18f5ecd6",
        "filename": "src/qt/locale/bitcoin_sv.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_sv.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_sv.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_sv.ts?ref=af01cd3a3d0647c071e94d7b0bda7128fb9aeebe",
        "patch": "@@ -2006,10 +2006,6 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n         <source>Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)</source>\n         <translation>Besk\u00e4rning: sista pl\u00e5nbokssynkroniseringen ligger utanf\u00f6r beskuren data. Du m\u00e5ste anv\u00e4nda -reindex (ladda ner hela blockkedjan igen eftersom noden beskurits)</translation>\n     </message>\n-    <message>\n-        <source>Reduce storage requirements by pruning (deleting) old blocks. This mode is incompatible with -txindex and -rescan. Warning: Reverting this setting requires re-downloading the entire blockchain. (default: 0 = disable pruning blocks, &gt;%u = target size in MiB to use for block files)</source>\n-        <translation>Minska lagringsbehovet genom att besk\u00e4ra (ta bort) gamla block. Detta l\u00e4ge \u00e4r inkompatibelt med -txindex och -rescan. Varning: \u00c4ndras denna inst\u00e4llning m\u00e5ste hela blockkedjan laddas ner igen. (f\u00f6rvalt: 0 = inaktivera besk\u00e4rning av block, &gt;%u = m\u00e5lstorlek i MiB att anv\u00e4nda f\u00f6r blockfiler)</translation>\n-    </message>\n     <message>\n         <source>Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.</source>\n         <translation>Omskanningar kan inte g\u00f6ras i beskuret l\u00e4ge. Du m\u00e5ste anv\u00e4nda -reindex vilket kommer ladda ner hela blockkedjan igen.</translation>"
      },
      {
        "sha": "ae565ee6658d42f9fb78e1742778d930dd0dc5b1",
        "filename": "src/qt/locale/bitcoin_tr.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_tr.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_tr.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_tr.ts?ref=af01cd3a3d0647c071e94d7b0bda7128fb9aeebe",
        "patch": "@@ -1937,10 +1937,6 @@\n         <source>Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)</source>\n         <translation>Budama: son c\u00fczdan e\u015fle\u015fmesi budanm\u0131\u015f verilerin \u00f6tesine gitmektedir. -reindex kullanman\u0131z gerekmektedir (Budanm\u0131\u015f d\u00fc\u011f\u00fcm ise t\u00fcm blok zincirini tekrar indirmeniz gerekir.)</translation>\n     </message>\n-    <message>\n-        <source>Reduce storage requirements by pruning (deleting) old blocks. This mode is incompatible with -txindex and -rescan. Warning: Reverting this setting requires re-downloading the entire blockchain. (default: 0 = disable pruning blocks, &gt;%u = target size in MiB to use for block files)</source>\n-        <translation>Depolama gereklili\u011fini eski bloklar\u0131 budayarak (silerek) d\u00fc\u015f\u00fcr. Bu kip -txindex ve -rescan ile uyumsuzdur. \u0130kaz: Bu ayar\u0131 geri almak t\u00fcm blok zincirini yeniden indirmeyi gerektirir. (varsay\u0131lan: 0 = bloklar\u0131 silmeyi devre d\u0131\u015f\u0131 b\u0131rak, &gt;%u = MiB olarak blok dosyalar\u0131 i\u00e7in kullan\u0131lacak hedef boyut)</translation>\n-    </message>\n     <message>\n         <source>Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.</source>\n         <translation>Tekrar taramalar budanm\u0131\u015f kipte m\u00fcmk\u00fcn de\u011fildir. T\u00fcm blok zincirini tekrar indirecek olan -reindex se\u00e7ene\u011fini kullanman\u0131z gerekecektir.</translation>"
      },
      {
        "sha": "a817c1baf21ee506ee8f278b69f415529d3c76b6",
        "filename": "src/qt/locale/bitcoin_uk.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_uk.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_uk.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_uk.ts?ref=af01cd3a3d0647c071e94d7b0bda7128fb9aeebe",
        "patch": "@@ -1677,10 +1677,6 @@\n         <source>Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)</source>\n         <translation>\u041e\u043f\u0435\u0440\u0430\u0446\u0456\u044f \u0432\u0456\u0434\u0441\u0456\u043a\u0430\u043d\u043d\u044f: \u043e\u0441\u0442\u0430\u043d\u043d\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0456\u0437\u0430\u0446\u0456\u044f \u0432\u043c\u0456\u0441\u0442\u0443 \u0433\u0430\u043c\u0430\u043d\u0446\u044e \u043d\u0435 \u043e\u0431\u043c\u0435\u0436\u0443\u0454\u0442\u044c\u0441\u044f \u0434\u0456\u044f\u043c\u0438 \u043d\u0430\u0434 \u0441\u043a\u043e\u0440\u043e\u0447\u0435\u043d\u0438\u043c\u0438 \u0434\u0430\u043d\u043d\u0438\u043c\u0438. \u0412\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u0456\u0434\u043d\u043e \u0437\u0440\u043e\u0431\u0438\u0442\u0438 \u043f\u0435\u0440\u0435\u0456\u043d\u0434\u0435\u043a\u0441\u0430\u0446\u0456\u044e -reindex (\u0437\u0430\u043d\u043e\u0432\u043e \u0437\u0430\u0432\u0430\u043d\u0442\u0430\u0436\u0438\u0442\u0438 \u0432\u0435c\u044c \u043b\u0430\u043d\u0446\u044e\u0436\u043e\u043a \u0431\u043b\u043e\u043a\u0456\u0432 \u0432 \u0440\u0430\u0437\u0456 \u043f\u043e\u044f\u0432\u0438 \u0441\u043a\u043e\u0440\u043e\u0447\u0435\u043d\u043e\u0433\u043e \u043b\u0430\u043d\u0446\u044e\u0433\u0430)</translation>\n     </message>\n-    <message>\n-        <source>Reduce storage requirements by pruning (deleting) old blocks. This mode is incompatible with -txindex and -rescan. Warning: Reverting this setting requires re-downloading the entire blockchain. (default: 0 = disable pruning blocks, &gt;%u = target size in MiB to use for block files)</source>\n-        <translation>\u0417\u043c\u0435\u043d\u0448\u0438\u0442\u0438 \u0432\u0438\u043c\u043e\u0433\u0438 \u0434\u043e \u043d\u0430\u044f\u0432\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0441\u0442\u043e\u0440\u0443 \u043d\u0430 \u043d\u043e\u0441\u0456\u0457 \u0434\u0430\u043d\u0438\u0445 \u0437\u0430 \u0434\u043e\u043f\u043e\u043c\u043e\u0433\u043e\u044e \u0441\u043a\u043e\u0440\u043e\u0447\u0435\u043d\u043d\u044f \u043b\u0430\u043d\u0446\u044e\u0436\u043a\u0430 (\u0432\u0438\u0434\u0430\u043b\u0435\u043d\u043d\u044f \u0441\u0442\u0430\u0440\u0438\u0445 \u0431\u043b\u043e\u043a\u0456\u0432). \u0426\u0435\u0439 \u0440\u0435\u0436\u0438\u043c \u043d\u0435\u0441\u0443\u043c\u0456\u0441\u043d\u0438\u0439 \u0437 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 -txindex \u0442\u0430 -rescan. \u0423\u0432\u0430\u0433\u0430: \u043f\u0440\u0438 \u043f\u043e\u0432\u0435\u0440\u043d\u0435\u043d\u043d\u0456 \u0434\u043e \u0442\u0438\u043f\u043e\u0432\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0432\u0438\u0434\u0430\u043b\u0435\u043d\u0456 \u0447\u0430\u0441\u0442\u0438\u043d\u0438 \u043b\u0430\u043d\u0446\u044e\u0436\u043a\u0430 \u0431\u0443\u0434\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0437\u0430\u0432\u0430\u043d\u0442\u0430\u0436\u0435\u043d\u043e. (\u0442\u0438\u043f\u043e\u0432\u043e: 0 = \u0432\u0438\u043c\u043a\u043d\u0443\u0442\u0438 \u0441\u043a\u043e\u0440\u043e\u0447\u0435\u043d\u043d\u044f \u043b\u0430\u043d\u0446\u044e\u0436\u043a\u0430, &gt;%u = \u043e\u0447\u0456\u043a\u0443\u0432\u0430\u043d\u0438\u0439 \u0440\u043e\u0437\u043c\u0456\u0440 \u0444\u0430\u0439\u043b\u0456\u0432 \u0431\u043b\u043e\u043a\u0456\u0432 \u0432 \u041c\u0456\u0411)</translation>\n-    </message>\n     <message>\n         <source>Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.</source>\n         <translation>\u041d\u0435\u043c\u043e\u0436\u043b\u0438\u0432\u043e \u043f\u0440\u043e\u0432\u0435\u0441\u0442\u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u0435 \u0441\u043a\u0430\u043d\u0443\u0432\u0430\u043d\u043d\u044f \u0437\u0456 \u0441\u043a\u043e\u0440\u043e\u0447\u0435\u043d\u0438\u043c \u043b\u0430\u043d\u0446\u044e\u0436\u043a\u043e\u043c. \u0412\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u0456\u0434\u043d\u043e \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u0430\u0442\u0438 -reindex \u0434\u043b\u044f \u0437\u0430\u0432\u0430\u043d\u0442\u0430\u0436\u0435\u043d\u043d\u044f \u043f\u043e\u0432\u043d\u043e\u0433\u043e \u043b\u0430\u043d\u0446\u044e\u0436\u043a\u0430 \u0431\u043b\u043e\u043a\u0456\u0432.</translation>"
      },
      {
        "sha": "e76d605a803690e68a7cab6388cabf9adca4c802",
        "filename": "src/qt/locale/bitcoin_zh_CN.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_zh_CN.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_zh_CN.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_zh_CN.ts?ref=af01cd3a3d0647c071e94d7b0bda7128fb9aeebe",
        "patch": "@@ -2970,10 +2970,6 @@\n         <source>Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)</source>\n         <translation>\u4fee\u526a\uff1a\u6700\u540e\u7684\u94b1\u5305\u540c\u6b65\u8d85\u8fc7\u4e86\u4fee\u526a\u7684\u6570\u636e\u3002\u4f60\u9700\u8981\u901a\u8fc7 -reindex (\u91cd\u65b0\u4e0b\u8f7d\u6574\u4e2a\u533a\u5757\u94fe\u4ee5\u9632\u4fee\u526a\u8282\u70b9)</translation>\n     </message>\n-    <message>\n-        <source>Reduce storage requirements by pruning (deleting) old blocks. This mode is incompatible with -txindex and -rescan. Warning: Reverting this setting requires re-downloading the entire blockchain. (default: 0 = disable pruning blocks, &gt;%u = target size in MiB to use for block files)</source>\n-        <translation>\u901a\u8fc7\u4fee\u526a(\u5220\u9664)\u65e7\u6570\u636e\u5757\u51cf\u5c11\u5b58\u50a8\u9700\u6c42\u3002\u6b64\u6a21\u5f0f\u4e0e -txindex \u548c -rescan\u4e0d\u517c\u5bb9\u3002\u8b66\u544a\uff1a\u8fd8\u539f\u6b64\u8bbe\u7f6e\u9700\u8981\u91cd\u65b0\u4e0b\u8f7d\u6574\u4e2a\u533a\u5757\u94fe\u3002(\u9ed8\u8ba4: 0 = \u7981\u7528\u4fee\u526a\u6570\u636e\u5757\uff0c &gt;%u = \u6570\u636e\u5757\u6587\u4ef6\u76ee\u6807\u5927\u5c0f\uff0c\u5355\u4f4d MiB)</translation>\n-    </message>\n     <message>\n         <source>Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.</source>\n         <translation>\u65e0\u6cd5\u5728\u5f00\u542f\u4fee\u526a\u7684\u72b6\u6001\u4e0b\u91cd\u626b\u63cf\uff0c\u8bf7\u4f7f\u7528 -reindex\u91cd\u65b0\u4e0b\u8f7d\u5b8c\u6574\u7684\u533a\u5757\u94fe\u3002</translation>"
      },
      {
        "sha": "4a8b1474d8d566e4136c2c51c6799f7ebf0f79e5",
        "filename": "src/qt/locale/bitcoin_zh_TW.ts",
        "status": "modified",
        "additions": 20,
        "deletions": 4,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_zh_TW.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe/src/qt/locale/bitcoin_zh_TW.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_zh_TW.ts?ref=af01cd3a3d0647c071e94d7b0bda7128fb9aeebe",
        "patch": "@@ -2200,6 +2200,14 @@\n         <source>Warning: Unknown change address</source>\n         <translation>\u8b66\u544a: \u4e0d\u660e\u7684\u627e\u96f6\u4f4d\u5740</translation>\n     </message>\n+    <message>\n+        <source>Confirm custom change address</source>\n+        <translation>\u81ea\u5b9a\u627e\u96f6\u4f4d\u5740\u78ba\u8a8d</translation>\n+    </message>\n+    <message>\n+        <source>The address you selected for change is not part of this wallet. Any or all funds in your wallet may be sent to this address. Are you sure?</source>\n+        <translation>\u9078\u64c7\u7684\u627e\u96f6\u4f4d\u5740\u4e26\u4e0d\u5c6c\u65bc\u9019\u500b\u9322\u5305\u3002\u90e8\u4efd\u6216\u662f\u5168\u90e8\u7684\u9322\u6703\u88ab\u9001\u5230\u9019\u500b\u4f4d\u5740\u53bb\u3002\u4f60\u78ba\u5b9a\u55ce\uff1f</translation>\n+    </message>\n     <message>\n         <source>(no label)</source>\n         <translation>(\u7121\u6a19\u8a18)</translation>\n@@ -3018,10 +3026,6 @@\n         <source>Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)</source>\n         <translation>\u4fee\u526a\u6a21\u5f0f\uff1a\u9322\u5305\u7684\u6700\u5f8c\u540c\u6b65\u72c0\u614b\u662f\u5728\u88ab\u4fee\u526a\u6389\u7684\u5340\u584a\u8cc7\u6599\u4e2d\u3002\u4f60\u9700\u8981\u7528 -reindex \u53c3\u6578\u57f7\u884c(\u6703\u91cd\u65b0\u4e0b\u8f09\u6574\u500b\u5340\u584a\u93c8)</translation>\n     </message>\n-    <message>\n-        <source>Reduce storage requirements by pruning (deleting) old blocks. This mode is incompatible with -txindex and -rescan. Warning: Reverting this setting requires re-downloading the entire blockchain. (default: 0 = disable pruning blocks, &gt;%u = target size in MiB to use for block files)</source>\n-        <translation>\u4fee\u526a(\u522a\u9664)\u6389\u8001\u820a\u5340\u584a\u4f86\u6e1b\u5c11\u9700\u8981\u7684\u5132\u5b58\u7a7a\u9593\u3002\u9019\u7a2e\u6a21\u5f0f\u6703\u95dc\u9589\u9322\u5305\u529f\u80fd\uff0c\u4e26\u4e14\u548c -txindex \u53ca -rescan \u53c3\u6578\u4e0d\u76f8\u5bb9\u3002\u8b66\u544a: \u5f9e\u9019\u7a2e\u6a21\u5f0f\u9084\u539f\u6703\u9700\u8981\u91cd\u65b0\u4e0b\u8f09\u4e00\u6574\u500b\u5340\u584a\u93c8\u3002(\u9810\u8a2d\u503c: 0 \u8868\u793a\u4e0d\u4fee\u526a\u5340\u584a\uff0c&gt;%u \u8868\u793a\u70ba\u5340\u584a\u6a94\u6848\u7684\u76ee\u6a19\u5927\u5c0f\uff0c\u55ae\u4f4d\u662f\u767e\u842c\u4f4d\u5143\u7d44 MiB)</translation>\n-    </message>\n     <message>\n         <source>Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.</source>\n         <translation>\u5728\u4fee\u526a\u6a21\u5f0f\u4e0b\u6c92\u8fa6\u6cd5\u91cd\u65b0\u6383\u63cf\u5340\u584a\u93c8\u3002\u4f60\u9700\u8981\u914d\u5408\u4f7f\u7528 -reindex \u53c3\u6578\u4f86\u91cd\u65b0\u4e0b\u8f09\u6574\u500b\u5340\u584a\u93c8\u3002</translation>\n@@ -3102,6 +3106,14 @@\n         <source>Please contribute if you find %s useful. Visit %s for further information about the software.</source>\n         <translation>\u5982\u679c\u4f60\u89ba\u5f97 %s \u6709\u7528\uff0c\u53ef\u4ee5\u5e6b\u52a9\u6211\u5011\u3002\u95dc\u65bc\u9019\u500b\u8edf\u9ad4\u7684\u66f4\u591a\u8cc7\u8a0a\u8acb\u898b %s\u3002</translation>\n     </message>\n+    <message>\n+        <source>Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex and -rescan. Warning: Reverting this setting requires re-downloading the entire blockchain. (default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, &gt;%u = automatically prune block files to stay under the specified target size in MiB)</source>\n+        <translation>\u4fee\u526a(\u522a\u9664)\u6389\u8001\u820a\u5340\u584a\u4ee5\u964d\u4f4e\u9700\u8981\u7684\u5132\u5b58\u7a7a\u9593\u3002\u9019\u6a23\u6703\u589e\u52a0\u4e00\u500b RPC \u6307\u4ee4 pruneblockchain\uff0c\u53ef\u4ee5\u4f7f\u7528\u5b83\u4f86\u522a\u9664\u6307\u5b9a\u7684\u5340\u584a\uff1b\u4e5f\u53ef\u4ee5\u6307\u5b9a\u76ee\u6a19\u5132\u5b58\u7a7a\u9593\u5927\u5c0f\uff0c\u4ee5\u555f\u7528\u5c0d\u8001\u820a\u5340\u584a\u7684\u81ea\u52d5\u4fee\u526a\u529f\u80fd\u3002\u9019\u500b\u6a21\u5f0f\u8ddf -txindex \u548c -rescan \u53c3\u6578\u4e0d\u76f8\u5bb9\u3002\u8b66\u544a: \u9084\u539f\u56de\u4e0d\u4fee\u526a\u6a21\u5f0f\u6703\u9700\u8981\u91cd\u65b0\u4e0b\u8f09\u4e00\u6574\u500b\u5340\u584a\u93c8\u3002(\u9810\u8a2d\u503c: 0 \u8868\u793a\u4e0d\u4fee\u526a\u5340\u584a\uff0c1 \u8868\u793a\u5141\u8a31\u4f7f\u7528 RPC \u6307\u4ee4\u505a\u4fee\u526a\uff0c&gt;%u \u7684\u503c\u8868\u793a\u70ba\u5340\u584a\u8cc7\u6599\u7684\u76ee\u6a19\u5927\u5c0f\uff0c\u55ae\u4f4d\u662f\u767e\u842c\u4f4d\u5143\u7d44\uff0cMiB)</translation>\n+    </message>\n+    <message>\n+        <source>Set lowest fee rate (in %s/kB) for transactions to be included in block creation. (default: %s)</source>\n+        <translation>\u8a2d\u5b9a\u88fd\u9020\u5340\u584a\u6642\uff0c\u6240\u8981\u5305\u542b\u4ea4\u6613\u6bcf\u5343\u4f4d\u5143\u7d44\u7684\u6700\u4f4e\u624b\u7e8c\u8cbb(\u55ae\u4f4d\u662f %s)\u3002(\u9810\u8a2d\u503c: %s)</translation>\n+    </message>\n     <message>\n         <source>Set the number of script verification threads (%u to %d, 0 = auto, &lt;0 = leave that many cores free, default: %d)</source>\n         <translation>\u8a2d\u5b9a\u6307\u4ee4\u78bc\u9a57\u8b49\u7684\u57f7\u884c\u7dd2\u6578\u76ee (%u \u5230 %d\uff0c0 \u8868\u793a\u7a0b\u5f0f\u81ea\u52d5\u6c7a\u5b9a\uff0c\u5c0f\u65bc 0 \u8868\u793a\u4fdd\u7559\u8655\u7406\u5668\u6838\u5fc3\u4e0d\u7528\u7684\u6578\u76ee\uff0c\u9810\u8a2d\u503c: %d)</translation>\n@@ -3122,6 +3134,10 @@\n         <source>Use UPnP to map the listening port (default: 1 when listening and no -proxy)</source>\n         <translation>\u662f\u5426\u8981\u4f7f\u7528\u300c\u901a\u7528\u5373\u63d2\u5373\u7528\u300d\u5354\u5b9a(UPnP)\uff0c\u4f86\u8a2d\u5b9a\u807d\u5019\u9023\u7dda\u7684\u901a\u8a0a\u57e0\u7684\u5c0d\u61c9(\u9810\u8a2d\u503c: \u7576\u6709\u807d\u5019\u9023\u7dda\u4e14\u6c92\u6709\u6307\u5b9a -proxy \u53c3\u6578\u6642\u70ba 1)</translation>\n     </message>\n+    <message>\n+        <source>Username and hashed password for JSON-RPC connections. The field &lt;userpw&gt; comes in the format: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. A canonical python script is included in share/rpcuser. The client then connects normally using the rpcuser=&lt;USERNAME&gt;/rpcpassword=&lt;PASSWORD&gt; pair of arguments. This option can be specified multiple times</source>\n+        <translation>JSON-RPC \u9023\u7dda\u8981\u7528\u7684\u4f7f\u7528\u8005\u540d\u7a31\u548c\u96dc\u6e4a\u5bc6\u78bc\u3002&lt;userpw&gt; \u7684\u683c\u5f0f\u662f\uff1a&lt;\u4f7f\u7528\u8005\u540d\u7a31&gt;:&lt;\u8abf\u5473\u503c&gt;$&lt;\u96dc\u6e4a\u503c&gt;\u3002\u5728 share/rpcuser \u76ee\u9304\u4e0b\u6709\u4e00\u500b\u793a\u7bc4\u7684 python \u7a0b\u5f0f\u3002\u4e4b\u5f8c\u5ba2\u6236\u7aef\u7a0b\u5f0f\u5c31\u53ef\u4ee5\u7528\u9019\u5c0d\u53c3\u6578\u6b63\u5e38\u9023\u7dda\uff1arpcuser=&lt;\u4f7f\u7528\u8005\u540d\u7a31&gt; \u548c rpcpassword=&lt;\u5bc6\u78bc&gt;\u3002\u9019\u500b\u9078\u9805\u53ef\u4ee5\u7d66\u5f88\u591a\u6b21\u3002</translation>\n+    </message>\n     <message>\n         <source>Wallet will not create transactions that violate mempool chain limits (default: %u)</source>\n         <translation>\u9322\u5305\u8edf\u9ad4\u4e0d\u6703\u7522\u751f\u9055\u53cd\u8a18\u61b6\u6c60\u4ea4\u6613\u93c8\u9650\u5236\u7684\u4ea4\u6613(\u9810\u8a2d\u503c: %u)</translation>"
      }
    ]
  },
  {
    "sha": "de1ae324bf3fb7451c1008a1a9721ff9f469533b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZTFhZTMyNGJmM2ZiNzQ1MWMxMDA4YTFhOTcyMWZmOWY0Njk1MzNi",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-01-11T16:25:18Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-01-20T20:04:16Z"
      },
      "message": "Exclude RBF txs from fee estimation",
      "tree": {
        "sha": "fe43e0852e270023a86948449d7322b3518f4545",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fe43e0852e270023a86948449d7322b3518f4545"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/de1ae324bf3fb7451c1008a1a9721ff9f469533b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de1ae324bf3fb7451c1008a1a9721ff9f469533b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/de1ae324bf3fb7451c1008a1a9721ff9f469533b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de1ae324bf3fb7451c1008a1a9721ff9f469533b/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e2e624d9ce54d5d0f1fc0b1934c798804d7d7cff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2e624d9ce54d5d0f1fc0b1934c798804d7d7cff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e2e624d9ce54d5d0f1fc0b1934c798804d7d7cff"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 7,
      "deletions": 5
    },
    "files": [
      {
        "sha": "f0b35324e88ba5f8ac2c952d05479df8a25a021d",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de1ae324bf3fb7451c1008a1a9721ff9f469533b/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de1ae324bf3fb7451c1008a1a9721ff9f469533b/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=de1ae324bf3fb7451c1008a1a9721ff9f469533b",
        "patch": "@@ -793,7 +793,8 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         // subsequent RemoveStaged() and addUnchecked() calls don't guarantee\n         // mempool consistency for us.\n         LOCK(pool.cs);\n-        if (setConflicts.size())\n+        const bool fReplacementTransaction = setConflicts.size();\n+        if (fReplacementTransaction)\n         {\n             CFeeRate newFeeRate(nModifiedFees, nSize);\n             set<uint256> setConflictsParents;\n@@ -954,10 +955,11 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         }\n         pool.RemoveStaged(allConflicting, false);\n \n-        // This transaction should only count for fee estimation if\n-        // the node is not behind and it is not dependent on any other\n-        // transactions in the mempool\n-        bool validForFeeEstimation = IsCurrentForFeeEstimation() && pool.HasNoInputsOf(tx);\n+        // This transaction should only count for fee estimation if it isn't a\n+        // BIP 125 replacement transaction (may not be widely supported), the\n+        // node is not behind, and the transaction is not dependent on any other\n+        // transactions in the mempool.\n+        bool validForFeeEstimation = !fReplacementTransaction && IsCurrentForFeeEstimation() && pool.HasNoInputsOf(tx);\n \n         // Store transaction in memory\n         pool.addUnchecked(hash, entry, setAncestors, validForFeeEstimation);"
      }
    ]
  },
  {
    "sha": "dd5b0114cf9021e8639e48c2a33f0aaf82aeb14e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZDViMDExNGNmOTAyMWU4NjM5ZTQ4YzJhMzNmMGFhZjgyYWViMTRl",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-01-20T19:13:14Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-01-20T20:05:12Z"
      },
      "message": "[Trivial] add comment about setting peer as HB peer.\n\nThis adds a comment to the new logic for setting HB peers based\non block validation (and aligns the code below to reflect the comment).\nIt's not obvious why we're checking mapBlocksInFlight. Add a comment to\nexplain.",
      "tree": {
        "sha": "1e39dd97a423962aafe604cdf9532909d4ccda6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1e39dd97a423962aafe604cdf9532909d4ccda6b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd5b0114cf9021e8639e48c2a33f0aaf82aeb14e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd5b0114cf9021e8639e48c2a33f0aaf82aeb14e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dd5b0114cf9021e8639e48c2a33f0aaf82aeb14e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd5b0114cf9021e8639e48c2a33f0aaf82aeb14e/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "af01cd3a3d0647c071e94d7b0bda7128fb9aeebe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 9,
      "deletions": 1
    },
    "files": [
      {
        "sha": "94faaac37b2a9d34c395f2e833e38a3eb3f08be1",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd5b0114cf9021e8639e48c2a33f0aaf82aeb14e/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd5b0114cf9021e8639e48c2a33f0aaf82aeb14e/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=dd5b0114cf9021e8639e48c2a33f0aaf82aeb14e",
        "patch": "@@ -865,7 +865,15 @@ void PeerLogicValidation::BlockChecked(const CBlock& block, const CValidationSta\n                 Misbehaving(it->second.first, nDoS);\n         }\n     }\n-    else if (state.IsValid() && !IsInitialBlockDownload() && mapBlocksInFlight.count(hash) == mapBlocksInFlight.size()) {\n+    // Check that:\n+    // 1. The block is valid\n+    // 2. We're not in initial block download\n+    // 3. This is currently the best block we're aware of. We haven't updated\n+    //    the tip yet so we have no way to check this directly here. Instead we\n+    //    just check that there are currently no other blocks in flight.\n+    else if (state.IsValid() &&\n+             !IsInitialBlockDownload() &&\n+             mapBlocksInFlight.count(hash) == mapBlocksInFlight.size()) {\n         if (it != mapBlockSource.end()) {\n             MaybeSetPeerAsAnnouncingHeaderAndIDs(it->second.first, *connman);\n         }"
      }
    ]
  },
  {
    "sha": "5cdf10611fe5ea77d4632c24e69e68aa9b8119e0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Y2RmMTA2MTFmZTVlYTc3ZDQ2MzJjMjRlNjllNjhhYTliODExOWUw",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-01-20T21:55:26Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-01-20T21:56:11Z"
      },
      "message": "Remove redundant semicolons in Python code",
      "tree": {
        "sha": "75f0b57b7d9d177d97e285aa2f3bc9e40bb10429",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/75f0b57b7d9d177d97e285aa2f3bc9e40bb10429"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5cdf10611fe5ea77d4632c24e69e68aa9b8119e0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cdf10611fe5ea77d4632c24e69e68aa9b8119e0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5cdf10611fe5ea77d4632c24e69e68aa9b8119e0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cdf10611fe5ea77d4632c24e69e68aa9b8119e0/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "82274c02ed2d82537dc55f008a29edb1bc09bbc4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82274c02ed2d82537dc55f008a29edb1bc09bbc4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/82274c02ed2d82537dc55f008a29edb1bc09bbc4"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 16,
      "deletions": 16
    },
    "files": [
      {
        "sha": "7ea49b65e1776a00084375c5271a7d1d7ec4d477",
        "filename": "contrib/devtools/clang-format-diff.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cdf10611fe5ea77d4632c24e69e68aa9b8119e0/contrib/devtools/clang-format-diff.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cdf10611fe5ea77d4632c24e69e68aa9b8119e0/contrib/devtools/clang-format-diff.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/clang-format-diff.py?ref=5cdf10611fe5ea77d4632c24e69e68aa9b8119e0",
        "patch": "@@ -128,7 +128,7 @@ def main():\n         line_count = int(match.group(3))\n       if line_count == 0:\n         continue\n-      end_line = start_line + line_count - 1;\n+      end_line = start_line + line_count - 1\n       lines_by_file.setdefault(filename, []).extend(\n           ['-lines', str(start_line) + ':' + str(end_line)])\n \n@@ -147,7 +147,7 @@ def main():\n                          stderr=None, stdin=subprocess.PIPE)\n     stdout, stderr = p.communicate()\n     if p.returncode != 0:\n-      sys.exit(p.returncode);\n+      sys.exit(p.returncode)\n \n     if not args.i:\n       with open(filename) as f:"
      },
      {
        "sha": "9286ab731f2955ed8f01e2b5ab2e56351564eb6c",
        "filename": "contrib/devtools/optimize-pngs.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cdf10611fe5ea77d4632c24e69e68aa9b8119e0/contrib/devtools/optimize-pngs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cdf10611fe5ea77d4632c24e69e68aa9b8119e0/contrib/devtools/optimize-pngs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/optimize-pngs.py?ref=5cdf10611fe5ea77d4632c24e69e68aa9b8119e0",
        "patch": "@@ -39,7 +39,7 @@ def content_hash(filename):\n         if extension.lower() == '.png':\n             print(\"optimizing \"+file+\"...\"),\n             file_path = os.path.join(absFolder, file)\n-            fileMetaMap = {'file' : file, 'osize': os.path.getsize(file_path), 'sha256Old' : file_hash(file_path)};\n+            fileMetaMap = {'file' : file, 'osize': os.path.getsize(file_path), 'sha256Old' : file_hash(file_path)}\n             fileMetaMap['contentHashPre'] = content_hash(file_path)\n         \n             pngCrushOutput = \"\""
      },
      {
        "sha": "5707188f23f85dfcbe3f7eb04d7e59e518db1368",
        "filename": "contrib/zmq/zmq_sub.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cdf10611fe5ea77d4632c24e69e68aa9b8119e0/contrib/zmq/zmq_sub.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cdf10611fe5ea77d4632c24e69e68aa9b8119e0/contrib/zmq/zmq_sub.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/zmq/zmq_sub.py?ref=5cdf10611fe5ea77d4632c24e69e68aa9b8119e0",
        "patch": "@@ -22,7 +22,7 @@\n         msg = zmqSubSocket.recv_multipart()\n         topic = str(msg[0])\n         body = msg[1]\n-        sequence = \"Unknown\";\n+        sequence = \"Unknown\"\n         if len(msg[-1]) == 4:\n           msgSequence = struct.unpack('<I', msg[-1])[-1]\n           sequence = str(msgSequence)"
      },
      {
        "sha": "162004065bb688ae4b5d07fc589bd226c06e2315",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cdf10611fe5ea77d4632c24e69e68aa9b8119e0/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cdf10611fe5ea77d4632c24e69e68aa9b8119e0/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=5cdf10611fe5ea77d4632c24e69e68aa9b8119e0",
        "patch": "@@ -226,7 +226,7 @@ def run_test(self):\n             assert(False)\n         rawtxfund = self.nodes[2].fundrawtransaction(rawtx, {'changeAddress': change, 'changePosition': 0})\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n-        out = dec_tx['vout'][0];\n+        out = dec_tx['vout'][0]\n         assert_equal(change, out['scriptPubKey']['addresses'][0])\n \n "
      },
      {
        "sha": "e100a3af9d44db250670962ed5148d48ae488ff7",
        "filename": "qa/rpc-tests/importmulti.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cdf10611fe5ea77d4632c24e69e68aa9b8119e0/qa/rpc-tests/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cdf10611fe5ea77d4632c24e69e68aa9b8119e0/qa/rpc-tests/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/importmulti.py?ref=5cdf10611fe5ea77d4632c24e69e68aa9b8119e0",
        "patch": "@@ -108,7 +108,7 @@ def run_test (self):\n             \"scriptPubKey\": address['scriptPubKey'],\n             \"pubkeys\": [ address['pubkey'] ],\n             \"internal\": True\n-        }];\n+        }]\n         result = self.nodes[1].importmulti(request)\n         assert_equal(result[0]['success'], True)\n         address_assert = self.nodes[1].validateaddress(address['address'])\n@@ -121,7 +121,7 @@ def run_test (self):\n         request = [{\n             \"scriptPubKey\": address['scriptPubKey'],\n             \"pubkeys\": [ address['pubkey'] ]\n-        }];\n+        }]\n         result = self.nodes[1].importmulti(request)\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -8)\n@@ -197,7 +197,7 @@ def run_test (self):\n         self.nodes[1].generate(100)\n         transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n         self.nodes[1].generate(1)\n-        transaction = self.nodes[1].gettransaction(transactionid);\n+        transaction = self.nodes[1].gettransaction(transactionid)\n \n         print(\"Should import a p2sh\")\n         result = self.nodes[1].importmulti([{\n@@ -222,7 +222,7 @@ def run_test (self):\n         self.nodes[1].generate(100)\n         transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n         self.nodes[1].generate(1)\n-        transaction = self.nodes[1].gettransaction(transactionid);\n+        transaction = self.nodes[1].gettransaction(transactionid)\n \n         print(\"Should import a p2sh with respective redeem script\")\n         result = self.nodes[1].importmulti([{\n@@ -246,7 +246,7 @@ def run_test (self):\n         self.nodes[1].generate(100)\n         transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n         self.nodes[1].generate(1)\n-        transaction = self.nodes[1].gettransaction(transactionid);\n+        transaction = self.nodes[1].gettransaction(transactionid)\n \n         print(\"Should import a p2sh with respective redeem script and private keys\")\n         result = self.nodes[1].importmulti([{\n@@ -270,7 +270,7 @@ def run_test (self):\n         self.nodes[1].generate(100)\n         transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n         self.nodes[1].generate(1)\n-        transaction = self.nodes[1].gettransaction(transactionid);\n+        transaction = self.nodes[1].gettransaction(transactionid)\n \n         print(\"Should import a p2sh with respective redeem script and private keys\")\n         result = self.nodes[1].importmulti([{\n@@ -312,7 +312,7 @@ def run_test (self):\n             \"scriptPubKey\": address['scriptPubKey'],\n             \"pubkeys\": [ address2['pubkey'] ],\n             \"internal\": True\n-        }];\n+        }]\n         result = self.nodes[1].importmulti(request)\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -5)"
      },
      {
        "sha": "86ce0b42e639aedc55aef106c54809e1f0139265",
        "filename": "qa/rpc-tests/p2p-feefilter.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cdf10611fe5ea77d4632c24e69e68aa9b8119e0/qa/rpc-tests/p2p-feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cdf10611fe5ea77d4632c24e69e68aa9b8119e0/qa/rpc-tests/p2p-feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-feefilter.py?ref=5cdf10611fe5ea77d4632c24e69e68aa9b8119e0",
        "patch": "@@ -21,9 +21,9 @@ def allInvsMatch(invsExpected, testnode):\n     for x in range(60):\n         with mininode_lock:\n             if (sorted(invsExpected) == sorted(testnode.txinvs)):\n-                return True;\n+                return True\n         time.sleep(1)\n-    return False;\n+    return False\n \n # TestNode: bare-bones \"peer\".  Used to track which invs are received from a node\n # and to send the node feefilter messages."
      },
      {
        "sha": "a7858ad3d854ae375322d0b299f038e272ab23bf",
        "filename": "qa/rpc-tests/p2p-segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cdf10611fe5ea77d4632c24e69e68aa9b8119e0/qa/rpc-tests/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cdf10611fe5ea77d4632c24e69e68aa9b8119e0/qa/rpc-tests/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-segwit.py?ref=5cdf10611fe5ea77d4632c24e69e68aa9b8119e0",
        "patch": "@@ -1662,7 +1662,7 @@ def test_witness_sigops(self):\n         # too many sigops (contributing to legacy sigop count).\n         checksig_count = (extra_sigops_available // 4) + 1\n         scriptPubKey_checksigs = CScript([OP_CHECKSIG]*checksig_count)\n-        tx2.vout.append(CTxOut(0, scriptPubKey_checksigs));\n+        tx2.vout.append(CTxOut(0, scriptPubKey_checksigs))\n         tx2.vin.pop()\n         tx2.wit.vtxinwit.pop()\n         tx2.vout[0].nValue -= tx.vout[-2].nValue"
      },
      {
        "sha": "299f5387e7c24c1935a9c1d7e271bdbc93ab7731",
        "filename": "qa/rpc-tests/segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cdf10611fe5ea77d4632c24e69e68aa9b8119e0/qa/rpc-tests/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cdf10611fe5ea77d4632c24e69e68aa9b8119e0/qa/rpc-tests/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/segwit.py?ref=5cdf10611fe5ea77d4632c24e69e68aa9b8119e0",
        "patch": "@@ -39,7 +39,7 @@ def addlength(script):\n     return scriptlen + script\n \n def create_witnessprogram(version, node, utxo, pubkey, encode_p2sh, amount):\n-    pkscript = witness_script(version, pubkey);\n+    pkscript = witness_script(version, pubkey)\n     if (encode_p2sh):\n         p2sh_hash = bytes_to_hex_str(ripemd160(sha256(hex_str_to_bytes(pkscript))))\n         pkscript = \"a914\"+p2sh_hash+\"87\""
      }
    ]
  },
  {
    "sha": "003cd60cc3697df25bb9dfa0bae0616a462af7ab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMDNjZDYwY2MzNjk3ZGYyNWJiOWRmYTBiYWUwNjE2YTQ2MmFmN2Fi",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-20T23:10:48Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-20T23:11:24Z"
      },
      "message": "Add missing mempool lock for CalculateMemPoolAncestors",
      "tree": {
        "sha": "43d28b8a59ca284a775dc7e1f41b1d3bd7f810d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/43d28b8a59ca284a775dc7e1f41b1d3bd7f810d6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/003cd60cc3697df25bb9dfa0bae0616a462af7ab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/003cd60cc3697df25bb9dfa0bae0616a462af7ab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/003cd60cc3697df25bb9dfa0bae0616a462af7ab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/003cd60cc3697df25bb9dfa0bae0616a462af7ab/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6012967c4746095e6f66a142cb9f639544c17377",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6012967c4746095e6f66a142cb9f639544c17377",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6012967c4746095e6f66a142cb9f639544c17377"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "34ca3bacad67fc42fb5a548ba0fa55dc798cf466",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/003cd60cc3697df25bb9dfa0bae0616a462af7ab/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/003cd60cc3697df25bb9dfa0bae0616a462af7ab/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=003cd60cc3697df25bb9dfa0bae0616a462af7ab",
        "patch": "@@ -173,6 +173,8 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n \n bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n {\n+    LOCK(cs);\n+\n     setEntries parentHashes;\n     const CTransaction &tx = entry.GetTx();\n "
      }
    ]
  },
  {
    "sha": "0b96abc35f1a9d46a27eeddd7df418d107c29c57",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYjk2YWJjMzVmMWE5ZDQ2YTI3ZWVkZGQ3ZGY0MThkMTA3YzI5YzU3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-01-22T12:17:37Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-01-22T12:17:41Z"
      },
      "message": "Merge #9554: [test] Avoid potential NULL pointer dereference in addrman_tests.cpp\n\nafab9f4 [test] Avoid potential NULL pointer dereference in addrman_tests.cpp (practicalswift)",
      "tree": {
        "sha": "6b43dd889eef2f627f0cfec501bdcb8b568aaf22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6b43dd889eef2f627f0cfec501bdcb8b568aaf22"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0b96abc35f1a9d46a27eeddd7df418d107c29c57",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCgAGBQJYhKLlAAoJEC1/I3LlD+E30nUH/27RWwWKG5bZ6NQ9UsV8tlvZ\nyYP4dlseAivfDcWcxbN5YzuYHRcJy/9awxV8/vEfGVXWnET+8cRAxD/PLwslg/SE\nz0dhlGvL6cMv/IEJ+Vv5+TXjHZbm8W/NluRJt/GZxa2V4hG4qiR0V1Vto9FgmRbf\n7qOhiw6bC3G09QsVjQDY2jLmduCvjy0rdptpZJ1aF8m3lGK5oyr7ZwsDwcygR2v5\n+7R+mZPwNeGQCuRofVyZC1ewGxCx4Yqi5ksusg/60BkZMAIkc9LYDvGidWq9F1xV\nnZU/0bl3zeG6rI1z/YqJtwys7fn+s0aBMh2GT0LwT9rnH7ZxGwWLH1Jzj7QW7Eo=\n=cK7L\n-----END PGP SIGNATURE-----",
        "payload": "tree 6b43dd889eef2f627f0cfec501bdcb8b568aaf22\nparent af01cd3a3d0647c071e94d7b0bda7128fb9aeebe\nparent afab9f47f619120f22e5d586d417c71551f8d000\nauthor MarcoFalke <falke.marco@gmail.com> 1485087457 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1485087461 +0100\n\nMerge #9554: [test] Avoid potential NULL pointer dereference in addrman_tests.cpp\n\nafab9f4 [test] Avoid potential NULL pointer dereference in addrman_tests.cpp (practicalswift)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b96abc35f1a9d46a27eeddd7df418d107c29c57",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0b96abc35f1a9d46a27eeddd7df418d107c29c57",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b96abc35f1a9d46a27eeddd7df418d107c29c57/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "af01cd3a3d0647c071e94d7b0bda7128fb9aeebe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/af01cd3a3d0647c071e94d7b0bda7128fb9aeebe"
      },
      {
        "sha": "afab9f47f619120f22e5d586d417c71551f8d000",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afab9f47f619120f22e5d586d417c71551f8d000",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/afab9f47f619120f22e5d586d417c71551f8d000"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "322addc9f6fe4876652d1dee0b88b4f5aad1154b",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b96abc35f1a9d46a27eeddd7df418d107c29c57/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b96abc35f1a9d46a27eeddd7df418d107c29c57/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=0b96abc35f1a9d46a27eeddd7df418d107c29c57",
        "patch": "@@ -297,7 +297,7 @@ BOOST_AUTO_TEST_CASE(addrman_find)\n     // Test 18; Find does not discriminate by port number.\n     CAddrInfo* info2 = addrman.Find(addr2);\n     BOOST_CHECK(info2);\n-    if (info2)\n+    if (info2 && info1)\n         BOOST_CHECK(info2->ToString() == info1->ToString());\n \n     // Test 19: Find returns another IP matching what we searched on."
      }
    ]
  },
  {
    "sha": "5c66d41b7ffe8557ce5036613c9854d2f1dc3c37",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YzY2ZDQxYjdmZmU4NTU3Y2U1MDM2NjEzYzk4NTRkMmYxZGMzYzM3",
    "commit": {
      "author": {
        "name": "Lauda",
        "email": "lauda.m@protonmail.ch",
        "date": "2017-01-13T15:05:16Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-01-22T12:18:51Z"
      },
      "message": "[Trivial] Grammar and typo correction\n\nMinor corrections in src\\test\\* .",
      "tree": {
        "sha": "665a4171ec4582a2d4ba91989a26ab5dd2dc34bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/665a4171ec4582a2d4ba91989a26ab5dd2dc34bf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5c66d41b7ffe8557ce5036613c9854d2f1dc3c37",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c66d41b7ffe8557ce5036613c9854d2f1dc3c37",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5c66d41b7ffe8557ce5036613c9854d2f1dc3c37",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c66d41b7ffe8557ce5036613c9854d2f1dc3c37/comments",
    "author": null,
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02e5308c1b9f3771bbe49bc5036215fa2bd66aa9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02e5308c1b9f3771bbe49bc5036215fa2bd66aa9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02e5308c1b9f3771bbe49bc5036215fa2bd66aa9"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "00446aa11e1352a55f75db17ed1ab91cf3cc822c",
        "filename": "src/test/cuckoocache_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c66d41b7ffe8557ce5036613c9854d2f1dc3c37/src/test/cuckoocache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c66d41b7ffe8557ce5036613c9854d2f1dc3c37/src/test/cuckoocache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/cuckoocache_tests.cpp?ref=5c66d41b7ffe8557ce5036613c9854d2f1dc3c37",
        "patch": "@@ -15,7 +15,7 @@\n  *  with deterministic seeds)\n  *  2) Some test methods are templated to allow for easier testing\n  *  against new versions / comparing\n- *  3) Results should be treated as a regression test, ie, did the behavior\n+ *  3) Results should be treated as a regression test, i.e., did the behavior\n  *  change significantly from what was expected. This can be OK, depending on\n  *  the nature of the change, but requires updating the tests to reflect the new\n  *  expected behavior. For example improving the hit rate may cause some tests"
      },
      {
        "sha": "d5d158027b1ea3211f8966c6e5797b2f773a5db8",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c66d41b7ffe8557ce5036613c9854d2f1dc3c37/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c66d41b7ffe8557ce5036613c9854d2f1dc3c37/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=5c66d41b7ffe8557ce5036613c9854d2f1dc3c37",
        "patch": "@@ -76,7 +76,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper_batch)\n         BOOST_CHECK(dbw.Read(key2, res));\n         BOOST_CHECK_EQUAL(res.ToString(), in2.ToString());\n \n-        // key3 never should've been written\n+        // key3 should've never been written\n         BOOST_CHECK(dbw.Read(key3, res) == false);\n     }\n }"
      },
      {
        "sha": "b071ab117b9ccec7d96df18ed6050cb4e2d84c38",
        "filename": "src/test/limitedmap_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c66d41b7ffe8557ce5036613c9854d2f1dc3c37/src/test/limitedmap_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c66d41b7ffe8557ce5036613c9854d2f1dc3c37/src/test/limitedmap_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/limitedmap_tests.cpp?ref=5c66d41b7ffe8557ce5036613c9854d2f1dc3c37",
        "patch": "@@ -27,7 +27,7 @@ BOOST_AUTO_TEST_CASE(limitedmap_test)\n     // make sure that the size is updated\n     BOOST_CHECK(map.size() == 1);\n \n-    // make sure that the new items is in the map\n+    // make sure that the new item is in the map\n     BOOST_CHECK(map.count(-1) == 1);\n \n     // insert 10 new items"
      },
      {
        "sha": "e4ddf9d618a8810770aa38478a2c839df08e2192",
        "filename": "src/test/scheduler_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c66d41b7ffe8557ce5036613c9854d2f1dc3c37/src/test/scheduler_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c66d41b7ffe8557ce5036613c9854d2f1dc3c37/src/test/scheduler_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scheduler_tests.cpp?ref=5c66d41b7ffe8557ce5036613c9854d2f1dc3c37",
        "patch": "@@ -47,8 +47,8 @@ BOOST_AUTO_TEST_CASE(manythreads)\n     //\n     // So... ten shared counters, which if all the tasks execute\n     // properly will sum to the number of tasks done.\n-    // Each task adds or subtracts from one of the counters a\n-    // random amount, and then schedules another task 0-1000\n+    // Each task adds or subtracts a random amount from one of the\n+    // counters, and then schedules another task 0-1000\n     // microseconds in the future to subtract or add from\n     // the counter -random_amount+1, so in the end the shared\n     // counters should sum to the number of initial tasks performed."
      },
      {
        "sha": "32184165f7e5aea90ad64f67bfec072947b3e70a",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c66d41b7ffe8557ce5036613c9854d2f1dc3c37/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c66d41b7ffe8557ce5036613c9854d2f1dc3c37/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=5c66d41b7ffe8557ce5036613c9854d2f1dc3c37",
        "patch": "@@ -465,7 +465,7 @@ class TestBuilder\n std::string JSONPrettyPrint(const UniValue& univalue)\n {\n     std::string ret = univalue.write(4);\n-    // Workaround for libunivalue pretty printer, which puts a space between comma's and newlines\n+    // Workaround for libunivalue pretty printer, which puts a space between commas and newlines\n     size_t pos = 0;\n     while ((pos = ret.find(\" \\n\", pos)) != std::string::npos) {\n         ret.replace(pos, 2, \"\\n\");"
      },
      {
        "sha": "4785415e3cc5dd61c48671e576b6c2ed4c0cebd5",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c66d41b7ffe8557ce5036613c9854d2f1dc3c37/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c66d41b7ffe8557ce5036613c9854d2f1dc3c37/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=5c66d41b7ffe8557ce5036613c9854d2f1dc3c37",
        "patch": "@@ -147,7 +147,7 @@ CTxMemPoolEntry TestMemPoolEntryHelper::FromTx(const CMutableTransaction &tx, CT\n }\n \n CTxMemPoolEntry TestMemPoolEntryHelper::FromTx(const CTransaction &txn, CTxMemPool *pool) {\n-    // Hack to assume either its completely dependent on other mempool txs or not at all\n+    // Hack to assume either it's completely dependent on other mempool txs or not at all\n     CAmount inChainValue = pool && pool->HasNoInputsOf(txn) ? txn.GetValueOut() : 0;\n \n     return CTxMemPoolEntry(MakeTransactionRef(txn), nFee, nTime, dPriority, nHeight,"
      }
    ]
  },
  {
    "sha": "ff58b1c3bdff5e5f687f10f9e40ce495ca49674e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZjU4YjFjM2JkZmY1ZTVmNjg3ZjEwZjllNDBjZTQ5NWNhNDk2NzRl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-01-22T12:28:14Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-01-22T12:28:43Z"
      },
      "message": "Merge #9610: [Trivial] Grammar and typo correction (laudaa)\n\n5c66d41 [Trivial] Grammar and typo correction (Lauda)",
      "tree": {
        "sha": "98f370c955cee910290661ddefd000110b68e6a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/98f370c955cee910290661ddefd000110b68e6a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff58b1c3bdff5e5f687f10f9e40ce495ca49674e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCgAGBQJYhKV7AAoJEC1/I3LlD+E3keIH/jFPIuyTqLGebMoSdg0PPSob\n5BpX+Afwc2/kPhyDeeJnFozUlU8EpSDrUArmiuo7PkqPeGWXk8OM1OGBtwN61/lj\nzii8UHRqmnIacVbOH3PQTkcqWcjPP3wQR3M/49OKNtcXgu+k1RrvYPgPKDT6UXst\nzEFj+aKVrKWVXrU5vufeNqlP4O2103Bdlfqk12VAASXeZst8Nu/Nle/vnsXHGdLG\netggKm3qpFQFWPTYdWuVU2nNaJgzfqC5mIJe5U8UXqlrP4Js3UbV2rEqCN3uMSSR\nlALln2/3U4kFar7pzdlqSk4OmX2rWDFpZODqdePiDMdDmk5IjGDJNLkDaaoPIw0=\n=KLiU\n-----END PGP SIGNATURE-----",
        "payload": "tree 98f370c955cee910290661ddefd000110b68e6a9\nparent 0b96abc35f1a9d46a27eeddd7df418d107c29c57\nparent 5c66d41b7ffe8557ce5036613c9854d2f1dc3c37\nauthor MarcoFalke <falke.marco@gmail.com> 1485088094 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1485088123 +0100\n\nMerge #9610: [Trivial] Grammar and typo correction (laudaa)\n\n5c66d41 [Trivial] Grammar and typo correction (Lauda)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff58b1c3bdff5e5f687f10f9e40ce495ca49674e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ff58b1c3bdff5e5f687f10f9e40ce495ca49674e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff58b1c3bdff5e5f687f10f9e40ce495ca49674e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0b96abc35f1a9d46a27eeddd7df418d107c29c57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b96abc35f1a9d46a27eeddd7df418d107c29c57",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0b96abc35f1a9d46a27eeddd7df418d107c29c57"
      },
      {
        "sha": "5c66d41b7ffe8557ce5036613c9854d2f1dc3c37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c66d41b7ffe8557ce5036613c9854d2f1dc3c37",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5c66d41b7ffe8557ce5036613c9854d2f1dc3c37"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "00446aa11e1352a55f75db17ed1ab91cf3cc822c",
        "filename": "src/test/cuckoocache_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff58b1c3bdff5e5f687f10f9e40ce495ca49674e/src/test/cuckoocache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff58b1c3bdff5e5f687f10f9e40ce495ca49674e/src/test/cuckoocache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/cuckoocache_tests.cpp?ref=ff58b1c3bdff5e5f687f10f9e40ce495ca49674e",
        "patch": "@@ -15,7 +15,7 @@\n  *  with deterministic seeds)\n  *  2) Some test methods are templated to allow for easier testing\n  *  against new versions / comparing\n- *  3) Results should be treated as a regression test, ie, did the behavior\n+ *  3) Results should be treated as a regression test, i.e., did the behavior\n  *  change significantly from what was expected. This can be OK, depending on\n  *  the nature of the change, but requires updating the tests to reflect the new\n  *  expected behavior. For example improving the hit rate may cause some tests"
      },
      {
        "sha": "d5d158027b1ea3211f8966c6e5797b2f773a5db8",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff58b1c3bdff5e5f687f10f9e40ce495ca49674e/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff58b1c3bdff5e5f687f10f9e40ce495ca49674e/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=ff58b1c3bdff5e5f687f10f9e40ce495ca49674e",
        "patch": "@@ -76,7 +76,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper_batch)\n         BOOST_CHECK(dbw.Read(key2, res));\n         BOOST_CHECK_EQUAL(res.ToString(), in2.ToString());\n \n-        // key3 never should've been written\n+        // key3 should've never been written\n         BOOST_CHECK(dbw.Read(key3, res) == false);\n     }\n }"
      },
      {
        "sha": "b071ab117b9ccec7d96df18ed6050cb4e2d84c38",
        "filename": "src/test/limitedmap_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff58b1c3bdff5e5f687f10f9e40ce495ca49674e/src/test/limitedmap_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff58b1c3bdff5e5f687f10f9e40ce495ca49674e/src/test/limitedmap_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/limitedmap_tests.cpp?ref=ff58b1c3bdff5e5f687f10f9e40ce495ca49674e",
        "patch": "@@ -27,7 +27,7 @@ BOOST_AUTO_TEST_CASE(limitedmap_test)\n     // make sure that the size is updated\n     BOOST_CHECK(map.size() == 1);\n \n-    // make sure that the new items is in the map\n+    // make sure that the new item is in the map\n     BOOST_CHECK(map.count(-1) == 1);\n \n     // insert 10 new items"
      },
      {
        "sha": "e4ddf9d618a8810770aa38478a2c839df08e2192",
        "filename": "src/test/scheduler_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff58b1c3bdff5e5f687f10f9e40ce495ca49674e/src/test/scheduler_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff58b1c3bdff5e5f687f10f9e40ce495ca49674e/src/test/scheduler_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scheduler_tests.cpp?ref=ff58b1c3bdff5e5f687f10f9e40ce495ca49674e",
        "patch": "@@ -47,8 +47,8 @@ BOOST_AUTO_TEST_CASE(manythreads)\n     //\n     // So... ten shared counters, which if all the tasks execute\n     // properly will sum to the number of tasks done.\n-    // Each task adds or subtracts from one of the counters a\n-    // random amount, and then schedules another task 0-1000\n+    // Each task adds or subtracts a random amount from one of the\n+    // counters, and then schedules another task 0-1000\n     // microseconds in the future to subtract or add from\n     // the counter -random_amount+1, so in the end the shared\n     // counters should sum to the number of initial tasks performed."
      },
      {
        "sha": "32184165f7e5aea90ad64f67bfec072947b3e70a",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff58b1c3bdff5e5f687f10f9e40ce495ca49674e/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff58b1c3bdff5e5f687f10f9e40ce495ca49674e/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=ff58b1c3bdff5e5f687f10f9e40ce495ca49674e",
        "patch": "@@ -465,7 +465,7 @@ class TestBuilder\n std::string JSONPrettyPrint(const UniValue& univalue)\n {\n     std::string ret = univalue.write(4);\n-    // Workaround for libunivalue pretty printer, which puts a space between comma's and newlines\n+    // Workaround for libunivalue pretty printer, which puts a space between commas and newlines\n     size_t pos = 0;\n     while ((pos = ret.find(\" \\n\", pos)) != std::string::npos) {\n         ret.replace(pos, 2, \"\\n\");"
      },
      {
        "sha": "4785415e3cc5dd61c48671e576b6c2ed4c0cebd5",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff58b1c3bdff5e5f687f10f9e40ce495ca49674e/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff58b1c3bdff5e5f687f10f9e40ce495ca49674e/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=ff58b1c3bdff5e5f687f10f9e40ce495ca49674e",
        "patch": "@@ -147,7 +147,7 @@ CTxMemPoolEntry TestMemPoolEntryHelper::FromTx(const CMutableTransaction &tx, CT\n }\n \n CTxMemPoolEntry TestMemPoolEntryHelper::FromTx(const CTransaction &txn, CTxMemPool *pool) {\n-    // Hack to assume either its completely dependent on other mempool txs or not at all\n+    // Hack to assume either it's completely dependent on other mempool txs or not at all\n     CAmount inChainValue = pool && pool->HasNoInputsOf(txn) ? txn.GetValueOut() : 0;\n \n     return CTxMemPoolEntry(MakeTransactionRef(txn), nFee, nTime, dPriority, nHeight,"
      }
    ]
  },
  {
    "sha": "eafba4e273f0f86ac0641f072cb23b57fb776a83",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYWZiYTRlMjczZjBmODZhYzA2NDFmMDcyY2IyM2I1N2ZiNzc2YTgz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-23T06:37:39Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-23T06:43:47Z"
      },
      "message": "Merge #9583: Move wallet callbacks into cs_main (this effectively reverts #7946)\n\n9899893 Move wallet callbacks into cs_main (this effectively reverts #7946) (Matt Corallo)",
      "tree": {
        "sha": "d02262c1e2766924ebc19b48dc231a0c3c5f99cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d02262c1e2766924ebc19b48dc231a0c3c5f99cb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eafba4e273f0f86ac0641f072cb23b57fb776a83",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYhaYkAAoJEHSBCwEjRsmmjKcH/jWnwvXe+LdfSwzPHfxoYM8B\nd2Y6lRHgriLCbKaEajsDYf49ID0/9jBU5rzBslL+USHXVR3VQ9S70HMlXcyeTiv+\nWnw5q05gZe7/pmbdCXbMr0HwbhkWkJWZGAOSKDWoNk1BFuvpSM9SqQcTazoolVH5\n0cN8FJYcDQrutJREYjjNKYlXWpVdBDuJegoWsZGe9mXZTYtGkQm/9BHiF6TEsKBy\nZmQtQbVNFw4GfcwbcHop5q1awayM5k1i02Vh6KsRh6wMHe9PirvZ1kY1ol27hxVu\naLCLkn2iUK2bT95WAIgUA2j4sJznu4QYMUMBBV5aN/KAUiJvhS13XchtpTWgWac=\n=ivQl\n-----END PGP SIGNATURE-----",
        "payload": "tree d02262c1e2766924ebc19b48dc231a0c3c5f99cb\nparent ff58b1c3bdff5e5f687f10f9e40ce495ca49674e\nparent 989989354b68d3954fe2742b96c53eeb2e8a7670\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1485153459 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1485153827 +0100\n\nMerge #9583: Move wallet callbacks into cs_main (this effectively reverts #7946)\n\n9899893 Move wallet callbacks into cs_main (this effectively reverts #7946) (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eafba4e273f0f86ac0641f072cb23b57fb776a83",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eafba4e273f0f86ac0641f072cb23b57fb776a83",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eafba4e273f0f86ac0641f072cb23b57fb776a83/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff58b1c3bdff5e5f687f10f9e40ce495ca49674e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff58b1c3bdff5e5f687f10f9e40ce495ca49674e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff58b1c3bdff5e5f687f10f9e40ce495ca49674e"
      },
      {
        "sha": "989989354b68d3954fe2742b96c53eeb2e8a7670",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/989989354b68d3954fe2742b96c53eeb2e8a7670",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/989989354b68d3954fe2742b96c53eeb2e8a7670"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 8,
      "deletions": 9
    },
    "files": [
      {
        "sha": "6bc20edd04b24e1a6a55c4d2e244179b06fe6150",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eafba4e273f0f86ac0641f072cb23b57fb776a83/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eafba4e273f0f86ac0641f072cb23b57fb776a83/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=eafba4e273f0f86ac0641f072cb23b57fb776a83",
        "patch": "@@ -2473,20 +2473,19 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n             pindexNewTip = chainActive.Tip();\n             pindexFork = chainActive.FindFork(pindexOldTip);\n             fInitialDownload = IsInitialBlockDownload();\n+\n+            // throw all transactions though the signal-interface\n+            for (const auto& pair : connectTrace.blocksConnected) {\n+                assert(pair.second);\n+                const CBlock& block = *(pair.second);\n+                for (unsigned int i = 0; i < block.vtx.size(); i++)\n+                    GetMainSignals().SyncTransaction(*block.vtx[i], pair.first, i);\n+            }\n         }\n         // When we reach this point, we switched to a new tip (stored in pindexNewTip).\n \n         // Notifications/callbacks that can run without cs_main\n \n-        // throw all transactions though the signal-interface\n-        // while _not_ holding the cs_main lock\n-        for (const auto& pair : connectTrace.blocksConnected) {\n-            assert(pair.second);\n-            const CBlock& block = *(pair.second);\n-            for (unsigned int i = 0; i < block.vtx.size(); i++)\n-                GetMainSignals().SyncTransaction(*block.vtx[i], pair.first, i);\n-        }\n-\n         // Notify external listeners about the new tip.\n         GetMainSignals().UpdatedBlockTip(pindexNewTip, pindexFork, fInitialDownload);\n "
      }
    ]
  },
  {
    "sha": "78849564144e073802a3858b953e2026e27d3047",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ODg0OTU2NDE0NGUwNzM4MDJhMzg1OGI5NTNlMjAyNmUyN2QzMDQ3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-23T07:50:13Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-23T12:18:16Z"
      },
      "message": "Merge #9511: Don't overwrite validation state with corruption check\n\n116419e Don't overwrite validation state with corruption check (Alex Morcos)",
      "tree": {
        "sha": "b0ac75fea6582021d77a8bea8603ba9c7f71ef5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b0ac75fea6582021d77a8bea8603ba9c7f71ef5d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/78849564144e073802a3858b953e2026e27d3047",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYhfSIAAoJEHSBCwEjRsmm2YUH/2I0exER0jOHGbW0rjHxSzxs\nwdYzAL6vl9ykiGLWOw+n5/J63+uFSN/smyeDEkG9NzGu4S5qVAGjhJdGnLiBBFdq\n9SvzvKeZdNippcakE3ihETPEBKD9mLU0qQMXssbPXFvlLiC0yB5nUc9P1CRy0l5E\n6PgkQU6+ECtDrXM+lmW5EVuvA8gHZiw2BXz1ozjo+ZaEencvqaBHi1bOl4dvKhP+\nG1xHp/VdsR+IKlMJk3gj5pRbOGd9V9NY4STl12We4CYjS0cd8OMScUI8ojE6FGHo\nw6XQHG8CXU9tRAeXG1ZmGYv/6UR8ahDV2x1IvgaI9dd6gs+GAPtTj0OpVQ9UKU0=\n=6ngM\n-----END PGP SIGNATURE-----",
        "payload": "tree b0ac75fea6582021d77a8bea8603ba9c7f71ef5d\nparent eafba4e273f0f86ac0641f072cb23b57fb776a83\nparent 116419e58dddef8fe3ff9806a1d8ceebe64ae3e6\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1485157813 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1485173896 +0100\n\nMerge #9511: Don't overwrite validation state with corruption check\n\n116419e Don't overwrite validation state with corruption check (Alex Morcos)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78849564144e073802a3858b953e2026e27d3047",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/78849564144e073802a3858b953e2026e27d3047",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78849564144e073802a3858b953e2026e27d3047/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eafba4e273f0f86ac0641f072cb23b57fb776a83",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eafba4e273f0f86ac0641f072cb23b57fb776a83",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eafba4e273f0f86ac0641f072cb23b57fb776a83"
      },
      {
        "sha": "116419e58dddef8fe3ff9806a1d8ceebe64ae3e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/116419e58dddef8fe3ff9806a1d8ceebe64ae3e6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/116419e58dddef8fe3ff9806a1d8ceebe64ae3e6"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "4fe03e419247abea76f38f08422270409f2b9d36",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78849564144e073802a3858b953e2026e27d3047/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78849564144e073802a3858b953e2026e27d3047/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=78849564144e073802a3858b953e2026e27d3047",
        "patch": "@@ -921,12 +921,13 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n             // SCRIPT_VERIFY_CLEANSTACK requires SCRIPT_VERIFY_WITNESS, so we\n             // need to turn both off, and compare against just turning off CLEANSTACK\n             // to see if the failure is specifically due to witness validation.\n-            if (!tx.HasWitness() && CheckInputs(tx, state, view, true, scriptVerifyFlags & ~(SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_CLEANSTACK), true, txdata) &&\n-                !CheckInputs(tx, state, view, true, scriptVerifyFlags & ~SCRIPT_VERIFY_CLEANSTACK, true, txdata)) {\n+            CValidationState stateDummy; // Want reported failures to be from first CheckInputs\n+            if (!tx.HasWitness() && CheckInputs(tx, stateDummy, view, true, scriptVerifyFlags & ~(SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_CLEANSTACK), true, txdata) &&\n+                !CheckInputs(tx, stateDummy, view, true, scriptVerifyFlags & ~SCRIPT_VERIFY_CLEANSTACK, true, txdata)) {\n                 // Only the witness is missing, so the transaction itself may be fine.\n                 state.SetCorruptionPossible();\n             }\n-            return false;\n+            return false; // state filled in by CheckInputs\n         }\n \n         // Check again against just the consensus-critical mandatory script"
      }
    ]
  },
  {
    "sha": "5cf3c60fccb198c16819fcf8a0c5635b5b630496",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Y2YzYzYwZmNjYjE5OGMxNjgxOWZjZjhhMGM1NjM1YjViNjMwNDk2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-23T12:22:32Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-23T13:02:54Z"
      },
      "message": "Merge #9607: Remove redundant semicolons in Python code\n\n5cdf106 Remove redundant semicolons in Python code (practicalswift)",
      "tree": {
        "sha": "27b9895584ceaff9e65ab1f4be0c65aa5dcfe476",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/27b9895584ceaff9e65ab1f4be0c65aa5dcfe476"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5cf3c60fccb198c16819fcf8a0c5635b5b630496",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYhf7+AAoJEHSBCwEjRsmmZoUH/1mz0dvz0Ma18njLjlJ5TPjm\nozFCwhW8gOLe3p72WB1gIwmEaVbYJZP5ScBVl8K1F7eeVJUx9CBQYYm92tZTiVJe\nHiVjk/V4fKdP6dJGlPmQQaPrx6Q5C10hmsJ7hsNV/DDG9qiDMOfkqaEn8s4HBUA/\nK2KswrOMBRN5ydRufP+MwQj3APXT/NPuNFqkeAKXtDqOHnJwpcCinTHeHzDCJ1xa\nE7sXsXR5/WNNRLYINM416dudR7bwBFvY5iQqcQWcbLcxQ831V8rk6L88rO2+d8me\nOq5MZ+otFnafnpjLZxDVIMIMP+OAsbOw1mMpyHpchRx63XtBTK1YQlnqTcOL+x0=\n=NEPY\n-----END PGP SIGNATURE-----",
        "payload": "tree 27b9895584ceaff9e65ab1f4be0c65aa5dcfe476\nparent 78849564144e073802a3858b953e2026e27d3047\nparent 5cdf10611fe5ea77d4632c24e69e68aa9b8119e0\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1485174152 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1485176574 +0100\n\nMerge #9607: Remove redundant semicolons in Python code\n\n5cdf106 Remove redundant semicolons in Python code (practicalswift)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cf3c60fccb198c16819fcf8a0c5635b5b630496",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5cf3c60fccb198c16819fcf8a0c5635b5b630496",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cf3c60fccb198c16819fcf8a0c5635b5b630496/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "78849564144e073802a3858b953e2026e27d3047",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78849564144e073802a3858b953e2026e27d3047",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/78849564144e073802a3858b953e2026e27d3047"
      },
      {
        "sha": "5cdf10611fe5ea77d4632c24e69e68aa9b8119e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cdf10611fe5ea77d4632c24e69e68aa9b8119e0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5cdf10611fe5ea77d4632c24e69e68aa9b8119e0"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 16,
      "deletions": 16
    },
    "files": [
      {
        "sha": "7ea49b65e1776a00084375c5271a7d1d7ec4d477",
        "filename": "contrib/devtools/clang-format-diff.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cf3c60fccb198c16819fcf8a0c5635b5b630496/contrib/devtools/clang-format-diff.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cf3c60fccb198c16819fcf8a0c5635b5b630496/contrib/devtools/clang-format-diff.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/clang-format-diff.py?ref=5cf3c60fccb198c16819fcf8a0c5635b5b630496",
        "patch": "@@ -128,7 +128,7 @@ def main():\n         line_count = int(match.group(3))\n       if line_count == 0:\n         continue\n-      end_line = start_line + line_count - 1;\n+      end_line = start_line + line_count - 1\n       lines_by_file.setdefault(filename, []).extend(\n           ['-lines', str(start_line) + ':' + str(end_line)])\n \n@@ -147,7 +147,7 @@ def main():\n                          stderr=None, stdin=subprocess.PIPE)\n     stdout, stderr = p.communicate()\n     if p.returncode != 0:\n-      sys.exit(p.returncode);\n+      sys.exit(p.returncode)\n \n     if not args.i:\n       with open(filename) as f:"
      },
      {
        "sha": "9286ab731f2955ed8f01e2b5ab2e56351564eb6c",
        "filename": "contrib/devtools/optimize-pngs.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cf3c60fccb198c16819fcf8a0c5635b5b630496/contrib/devtools/optimize-pngs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cf3c60fccb198c16819fcf8a0c5635b5b630496/contrib/devtools/optimize-pngs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/optimize-pngs.py?ref=5cf3c60fccb198c16819fcf8a0c5635b5b630496",
        "patch": "@@ -39,7 +39,7 @@ def content_hash(filename):\n         if extension.lower() == '.png':\n             print(\"optimizing \"+file+\"...\"),\n             file_path = os.path.join(absFolder, file)\n-            fileMetaMap = {'file' : file, 'osize': os.path.getsize(file_path), 'sha256Old' : file_hash(file_path)};\n+            fileMetaMap = {'file' : file, 'osize': os.path.getsize(file_path), 'sha256Old' : file_hash(file_path)}\n             fileMetaMap['contentHashPre'] = content_hash(file_path)\n         \n             pngCrushOutput = \"\""
      },
      {
        "sha": "5707188f23f85dfcbe3f7eb04d7e59e518db1368",
        "filename": "contrib/zmq/zmq_sub.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cf3c60fccb198c16819fcf8a0c5635b5b630496/contrib/zmq/zmq_sub.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cf3c60fccb198c16819fcf8a0c5635b5b630496/contrib/zmq/zmq_sub.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/zmq/zmq_sub.py?ref=5cf3c60fccb198c16819fcf8a0c5635b5b630496",
        "patch": "@@ -22,7 +22,7 @@\n         msg = zmqSubSocket.recv_multipart()\n         topic = str(msg[0])\n         body = msg[1]\n-        sequence = \"Unknown\";\n+        sequence = \"Unknown\"\n         if len(msg[-1]) == 4:\n           msgSequence = struct.unpack('<I', msg[-1])[-1]\n           sequence = str(msgSequence)"
      },
      {
        "sha": "7396ba46a4f137f92bd6400940bd014561d9f0c6",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cf3c60fccb198c16819fcf8a0c5635b5b630496/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cf3c60fccb198c16819fcf8a0c5635b5b630496/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=5cf3c60fccb198c16819fcf8a0c5635b5b630496",
        "patch": "@@ -226,7 +226,7 @@ def run_test(self):\n             assert(False)\n         rawtxfund = self.nodes[2].fundrawtransaction(rawtx, {'changeAddress': change, 'changePosition': 0})\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n-        out = dec_tx['vout'][0];\n+        out = dec_tx['vout'][0]\n         assert_equal(change, out['scriptPubKey']['addresses'][0])\n \n "
      },
      {
        "sha": "e100a3af9d44db250670962ed5148d48ae488ff7",
        "filename": "qa/rpc-tests/importmulti.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cf3c60fccb198c16819fcf8a0c5635b5b630496/qa/rpc-tests/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cf3c60fccb198c16819fcf8a0c5635b5b630496/qa/rpc-tests/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/importmulti.py?ref=5cf3c60fccb198c16819fcf8a0c5635b5b630496",
        "patch": "@@ -108,7 +108,7 @@ def run_test (self):\n             \"scriptPubKey\": address['scriptPubKey'],\n             \"pubkeys\": [ address['pubkey'] ],\n             \"internal\": True\n-        }];\n+        }]\n         result = self.nodes[1].importmulti(request)\n         assert_equal(result[0]['success'], True)\n         address_assert = self.nodes[1].validateaddress(address['address'])\n@@ -121,7 +121,7 @@ def run_test (self):\n         request = [{\n             \"scriptPubKey\": address['scriptPubKey'],\n             \"pubkeys\": [ address['pubkey'] ]\n-        }];\n+        }]\n         result = self.nodes[1].importmulti(request)\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -8)\n@@ -197,7 +197,7 @@ def run_test (self):\n         self.nodes[1].generate(100)\n         transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n         self.nodes[1].generate(1)\n-        transaction = self.nodes[1].gettransaction(transactionid);\n+        transaction = self.nodes[1].gettransaction(transactionid)\n \n         print(\"Should import a p2sh\")\n         result = self.nodes[1].importmulti([{\n@@ -222,7 +222,7 @@ def run_test (self):\n         self.nodes[1].generate(100)\n         transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n         self.nodes[1].generate(1)\n-        transaction = self.nodes[1].gettransaction(transactionid);\n+        transaction = self.nodes[1].gettransaction(transactionid)\n \n         print(\"Should import a p2sh with respective redeem script\")\n         result = self.nodes[1].importmulti([{\n@@ -246,7 +246,7 @@ def run_test (self):\n         self.nodes[1].generate(100)\n         transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n         self.nodes[1].generate(1)\n-        transaction = self.nodes[1].gettransaction(transactionid);\n+        transaction = self.nodes[1].gettransaction(transactionid)\n \n         print(\"Should import a p2sh with respective redeem script and private keys\")\n         result = self.nodes[1].importmulti([{\n@@ -270,7 +270,7 @@ def run_test (self):\n         self.nodes[1].generate(100)\n         transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n         self.nodes[1].generate(1)\n-        transaction = self.nodes[1].gettransaction(transactionid);\n+        transaction = self.nodes[1].gettransaction(transactionid)\n \n         print(\"Should import a p2sh with respective redeem script and private keys\")\n         result = self.nodes[1].importmulti([{\n@@ -312,7 +312,7 @@ def run_test (self):\n             \"scriptPubKey\": address['scriptPubKey'],\n             \"pubkeys\": [ address2['pubkey'] ],\n             \"internal\": True\n-        }];\n+        }]\n         result = self.nodes[1].importmulti(request)\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -5)"
      },
      {
        "sha": "86ce0b42e639aedc55aef106c54809e1f0139265",
        "filename": "qa/rpc-tests/p2p-feefilter.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cf3c60fccb198c16819fcf8a0c5635b5b630496/qa/rpc-tests/p2p-feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cf3c60fccb198c16819fcf8a0c5635b5b630496/qa/rpc-tests/p2p-feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-feefilter.py?ref=5cf3c60fccb198c16819fcf8a0c5635b5b630496",
        "patch": "@@ -21,9 +21,9 @@ def allInvsMatch(invsExpected, testnode):\n     for x in range(60):\n         with mininode_lock:\n             if (sorted(invsExpected) == sorted(testnode.txinvs)):\n-                return True;\n+                return True\n         time.sleep(1)\n-    return False;\n+    return False\n \n # TestNode: bare-bones \"peer\".  Used to track which invs are received from a node\n # and to send the node feefilter messages."
      },
      {
        "sha": "a7858ad3d854ae375322d0b299f038e272ab23bf",
        "filename": "qa/rpc-tests/p2p-segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cf3c60fccb198c16819fcf8a0c5635b5b630496/qa/rpc-tests/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cf3c60fccb198c16819fcf8a0c5635b5b630496/qa/rpc-tests/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-segwit.py?ref=5cf3c60fccb198c16819fcf8a0c5635b5b630496",
        "patch": "@@ -1662,7 +1662,7 @@ def test_witness_sigops(self):\n         # too many sigops (contributing to legacy sigop count).\n         checksig_count = (extra_sigops_available // 4) + 1\n         scriptPubKey_checksigs = CScript([OP_CHECKSIG]*checksig_count)\n-        tx2.vout.append(CTxOut(0, scriptPubKey_checksigs));\n+        tx2.vout.append(CTxOut(0, scriptPubKey_checksigs))\n         tx2.vin.pop()\n         tx2.wit.vtxinwit.pop()\n         tx2.vout[0].nValue -= tx.vout[-2].nValue"
      },
      {
        "sha": "299f5387e7c24c1935a9c1d7e271bdbc93ab7731",
        "filename": "qa/rpc-tests/segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cf3c60fccb198c16819fcf8a0c5635b5b630496/qa/rpc-tests/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cf3c60fccb198c16819fcf8a0c5635b5b630496/qa/rpc-tests/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/segwit.py?ref=5cf3c60fccb198c16819fcf8a0c5635b5b630496",
        "patch": "@@ -39,7 +39,7 @@ def addlength(script):\n     return scriptlen + script\n \n def create_witnessprogram(version, node, utxo, pubkey, encode_p2sh, amount):\n-    pkscript = witness_script(version, pubkey);\n+    pkscript = witness_script(version, pubkey)\n     if (encode_p2sh):\n         p2sh_hash = bytes_to_hex_str(ripemd160(sha256(hex_str_to_bytes(pkscript))))\n         pkscript = \"a914\"+p2sh_hash+\"87\""
      }
    ]
  },
  {
    "sha": "5a00659b58800ce52b652a31d551a984926c46de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YTAwNjU5YjU4ODAwY2U1MmI2NTJhMzFkNTUxYTk4NDkyNmM0NmRl",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-01-23T14:54:11Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-01-23T14:54:11Z"
      },
      "message": "[wallet] Clarify getbalance help string to explain interaction with bumpfee\n\nDocumentation change only, no change in behavior.",
      "tree": {
        "sha": "3929d1532747f8c083c51bca786e9c5f9ad9f4fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3929d1532747f8c083c51bca786e9c5f9ad9f4fa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5a00659b58800ce52b652a31d551a984926c46de",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a00659b58800ce52b652a31d551a984926c46de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5a00659b58800ce52b652a31d551a984926c46de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a00659b58800ce52b652a31d551a984926c46de/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5cf3c60fccb198c16819fcf8a0c5635b5b630496",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cf3c60fccb198c16819fcf8a0c5635b5b630496",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5cf3c60fccb198c16819fcf8a0c5635b5b630496"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 19,
      "deletions": 5
    },
    "files": [
      {
        "sha": "ef40032ee3405d20da4ce482dc51bd25c01a419d",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 5,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a00659b58800ce52b652a31d551a984926c46de/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a00659b58800ce52b652a31d551a984926c46de/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=5a00659b58800ce52b652a31d551a984926c46de",
        "patch": "@@ -668,8 +668,19 @@ UniValue getbalance(const JSONRPCRequest& request)\n             \"Note that the account \\\"\\\" is not the same as leaving the parameter out.\\n\"\n             \"The server total may be different to the balance in the default \\\"\\\" account.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"account\\\"      (string, optional) DEPRECATED. The selected account, or \\\"*\\\" for entire wallet. It may be the default account using \\\"\\\".\\n\"\n-            \"2. minconf          (numeric, optional, default=1) Only include transactions confirmed at least this many times.\\n\"\n+            \"1. \\\"account\\\"         (string, optional) DEPRECATED. The account string may be given as a\\n\"\n+            \"                     specific account name to find the balance associated with wallet keys in\\n\"\n+            \"                     a named account, or as the empty string (\\\"\\\") to find the balance\\n\"\n+            \"                     associated with wallet keys not in any named account, or as \\\"*\\\" to find\\n\"\n+            \"                     the balance associated with all wallet keys regardless of account.\\n\"\n+            \"                     When this option is specified, it calculates the balance in a different\\n\"\n+            \"                     way than when it is not specified, and which can count spends twice when\\n\"\n+            \"                     there are conflicting pending transactions (such as those created by\\n\"\n+            \"                     the bumpfee command), temporarily resulting in low or even negative\\n\"\n+            \"                     balances. In general, account balance calculation is not considered\\n\"\n+            \"                     reliable and has resulted in confusing outcomes, so it is recommended to\\n\"\n+            \"                     avoid passing this argument.\\n\"\n+            \"2. minconf           (numeric, optional, default=1) Only include transactions confirmed at least this many times.\\n\"\n             \"3. include_watchonly (bool, optional, default=false) Also include balance in watch-only addresses (see 'importaddress')\\n\"\n             \"\\nResult:\\n\"\n             \"amount              (numeric) The total amount in \" + CURRENCY_UNIT + \" received for this account.\\n\"\n@@ -696,9 +707,12 @@ UniValue getbalance(const JSONRPCRequest& request)\n             filter = filter | ISMINE_WATCH_ONLY;\n \n     if (request.params[0].get_str() == \"*\") {\n-        // Calculate total balance a different way from GetBalance()\n-        // (GetBalance() sums up all unspent TxOuts)\n-        // getbalance and \"getbalance * 1 true\" should return the same number\n+        // Calculate total balance in a very different way from GetBalance().\n+        // The biggest difference is that GetBalance() sums up all unspent\n+        // TxOuts paying to the wallet, while this sums up both spent and\n+        // unspent TxOuts paying to the wallet, and then subtracts the values of\n+        // TxIns spending from the wallet. This also has fewer restrictions on\n+        // which unconfirmed transactions are considered trusted.\n         CAmount nBalance = 0;\n         for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n         {"
      }
    ]
  },
  {
    "sha": "727a79836035b02e82e31a3c941396146eabc207",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MjdhNzk4MzYwMzViMDJlODJlMzFhM2M5NDEzOTYxNDZlYWJjMjA3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-23T15:13:29Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-23T15:16:37Z"
      },
      "message": "Merge #9516: Bug-fix: listsinceblock: use fork point as reference for blocks in reorg'd chains\n\n7ba0a00 Testing: listsinceblock should not use orphan block height. (Karl-Johan Alm)\nee5c1ce Bug-fix: listsinceblock: use closest common ancestor when a block hash was provided for a chain that was not the main chain. (Karl-Johan Alm)",
      "tree": {
        "sha": "b6e7f412e439c36896db28237c343dfe0097df07",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b6e7f412e439c36896db28237c343dfe0097df07"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/727a79836035b02e82e31a3c941396146eabc207",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYhh5VAAoJEHSBCwEjRsmmG/8H/iGDGgKXc71//CNqAhSm38O5\nwV5aOLei9sMxCcVdlRlGtjYLHX7RYWj86Q3+3JKvhjfd5oTBFuLelOgO0dZYmq67\njYimKUsS1W2VTa9BAjKe/9HInX8kcv1jxIVHFqFR65PMkAtz88ohxqsocrDHjuIR\n/ODnJmzKKp4wCvXJkPNMZMmJtokCeXHx9+gaj8DuA+8SHYvESljAzgUd/H0miKt8\nlECxECZSGivqziJB5aYJR7/G1XaLQgaOr6urFCb1wK1j8ijNQzy9yj089WIkUFZ1\nx7+Ipktg7qY02V3ovOGPpUO6JoEkUzzeHAOEEfpf4QK/vmeWEXM/sM2Zu2xibe4=\n=Jjq1\n-----END PGP SIGNATURE-----",
        "payload": "tree b6e7f412e439c36896db28237c343dfe0097df07\nparent 5cf3c60fccb198c16819fcf8a0c5635b5b630496\nparent 7ba0a00aae03b438e63d0ada9ff68a7618c7f907\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1485184409 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1485184597 +0100\n\nMerge #9516: Bug-fix: listsinceblock: use fork point as reference for blocks in reorg'd chains\n\n7ba0a00 Testing: listsinceblock should not use orphan block height. (Karl-Johan Alm)\nee5c1ce Bug-fix: listsinceblock: use closest common ancestor when a block hash was provided for a chain that was not the main chain. (Karl-Johan Alm)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/727a79836035b02e82e31a3c941396146eabc207",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/727a79836035b02e82e31a3c941396146eabc207",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/727a79836035b02e82e31a3c941396146eabc207/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5cf3c60fccb198c16819fcf8a0c5635b5b630496",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cf3c60fccb198c16819fcf8a0c5635b5b630496",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5cf3c60fccb198c16819fcf8a0c5635b5b630496"
      },
      {
        "sha": "7ba0a00aae03b438e63d0ada9ff68a7618c7f907",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ba0a00aae03b438e63d0ada9ff68a7618c7f907",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7ba0a00aae03b438e63d0ada9ff68a7618c7f907"
      }
    ],
    "stats": {
      "total": 99,
      "additions": 95,
      "deletions": 4
    },
    "files": [
      {
        "sha": "26bc6a73dfa2807e3111fe5da6d1a4a7e23d4334",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/727a79836035b02e82e31a3c941396146eabc207/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/727a79836035b02e82e31a3c941396146eabc207/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=727a79836035b02e82e31a3c941396146eabc207",
        "patch": "@@ -153,6 +153,7 @@\n     'import-rescan.py',\n     'bumpfee.py',\n     'rpcnamedargs.py',\n+    'listsinceblock.py',\n ]\n if ENABLE_ZMQ:\n     testScripts.append('zmq_test.py')"
      },
      {
        "sha": "ca67b8ecebbaa1f9fd7cc6acc6e8e7835771c3ef",
        "filename": "qa/rpc-tests/listsinceblock.py",
        "status": "added",
        "additions": 80,
        "deletions": 0,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/727a79836035b02e82e31a3c941396146eabc207/qa/rpc-tests/listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/727a79836035b02e82e31a3c941396146eabc207/qa/rpc-tests/listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/listsinceblock.py?ref=727a79836035b02e82e31a3c941396146eabc207",
        "patch": "@@ -0,0 +1,80 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+class ListSinceBlockTest (BitcoinTestFramework):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+\n+    def run_test (self):\n+        '''\n+        `listsinceblock` did not behave correctly when handed a block that was\n+        no longer in the main chain:\n+\n+             ab0\n+          /       \\\n+        aa1 [tx0]   bb1\n+         |           |\n+        aa2         bb2\n+         |           |\n+        aa3         bb3\n+                     |\n+                    bb4\n+\n+        Consider a client that has only seen block `aa3` above. It asks the node\n+        to `listsinceblock aa3`. But at some point prior the main chain switched\n+        to the bb chain.\n+\n+        Previously: listsinceblock would find height=4 for block aa3 and compare\n+        this to height=5 for the tip of the chain (bb4). It would then return\n+        results restricted to bb3-bb4.\n+\n+        Now: listsinceblock finds the fork at ab0 and returns results in the\n+        range bb1-bb4.\n+\n+        This test only checks that [tx0] is present.\n+        '''\n+\n+        assert_equal(self.is_network_split, False)\n+        self.nodes[2].generate(101)\n+        self.sync_all()\n+\n+        assert_equal(self.nodes[0].getbalance(), 0)\n+        assert_equal(self.nodes[1].getbalance(), 0)\n+        assert_equal(self.nodes[2].getbalance(), 50)\n+        assert_equal(self.nodes[3].getbalance(), 0)\n+\n+        # Split network into two\n+        self.split_network()\n+        assert_equal(self.is_network_split, True)\n+\n+        # send to nodes[0] from nodes[2]\n+        senttx = self.nodes[2].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n+\n+        # generate on both sides\n+        lastblockhash = self.nodes[1].generate(6)[5]\n+        self.nodes[2].generate(7)\n+        print('lastblockhash=%s' % (lastblockhash))\n+\n+        self.sync_all()\n+\n+        self.join_network()\n+\n+        # listsinceblock(lastblockhash) should now include tx, as seen from nodes[0]\n+        lsbres = self.nodes[0].listsinceblock(lastblockhash)\n+        found = False\n+        for tx in lsbres['transactions']:\n+            if tx['txid'] == senttx:\n+                found = True\n+                break\n+        assert_equal(found, True)\n+\n+if __name__ == '__main__':\n+    ListSinceBlockTest().main()"
      },
      {
        "sha": "6d08f604834130bdf6a3f235daacc9ddd10bb35c",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 4,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/727a79836035b02e82e31a3c941396146eabc207/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/727a79836035b02e82e31a3c941396146eabc207/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=727a79836035b02e82e31a3c941396146eabc207",
        "patch": "@@ -1681,7 +1681,7 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    CBlockIndex *pindex = NULL;\n+    const CBlockIndex *pindex = NULL;\n     int target_confirms = 1;\n     isminefilter filter = ISMINE_SPENDABLE;\n \n@@ -1692,7 +1692,16 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n         blockId.SetHex(request.params[0].get_str());\n         BlockMap::iterator it = mapBlockIndex.find(blockId);\n         if (it != mapBlockIndex.end())\n+        {\n             pindex = it->second;\n+            if (chainActive[pindex->nHeight] != pindex)\n+            {\n+                // the block being asked for is a part of a deactivated chain;\n+                // we don't want to depend on its perceived height in the block\n+                // chain, we want to instead use the last common ancestor\n+                pindex = chainActive.FindFork(pindex);\n+            }\n+        }\n     }\n \n     if (request.params.size() > 1)\n@@ -1703,9 +1712,10 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter\");\n     }\n \n-    if(request.params.size() > 2)\n-        if(request.params[2].get_bool())\n-            filter = filter | ISMINE_WATCH_ONLY;\n+    if (request.params.size() > 2 && request.params[2].get_bool())\n+    {\n+        filter = filter | ISMINE_WATCH_ONLY;\n+    }\n \n     int depth = pindex ? (1 + chainActive.Height() - pindex->nHeight) : -1;\n "
      }
    ]
  },
  {
    "sha": "71148b8947fe8b4d756822420a7f31c380159425",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MTE0OGI4OTQ3ZmU4YjRkNzU2ODIyNDIwYTdmMzFjMzgwMTU5NDI1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-01-23T18:31:28Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-01-23T18:42:36Z"
      },
      "message": "Merge #9596: [bugfix] save feeDelta instead of priorityDelta in DumpMempool\n\nbd92f24 [bugfix] save feeDelta instead of priorityDelta in DumpMempool (Alex Morcos)",
      "tree": {
        "sha": "9fb483cae4bb657ffdfd2c6435a61279cd0b5eed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9fb483cae4bb657ffdfd2c6435a61279cd0b5eed"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/71148b8947fe8b4d756822420a7f31c380159425",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJYhk6dAAoJENuhpnN5oakxRDMQAOS3rRM80bt21BukmUn7z8AO\nKxJljM81/Z3wyKm09wi7HnlTk4M7fuDFBYvLg4taBHZ1YPTnqAgbevOh+znIREHm\nyy71I9GiXZQ0ualHMt+GIJ9GKJo/eL0+YErUBqTm+C9WbH+mF5lU4okrmB/D8x5I\nArTZt2AamAUGX2Ivko3rBvT4uR41R+RAEOPhudtszF1twRp0MNURtZQE998N7cZp\nwdmM/9Kw6m2D7yt2XQOfw60iy1+x/2s3knhIuqd8ZpCuAdS+KRCMicQagba8M/Yt\nMhV7rsMbTrMwe0qbOBS2iUl/sLKyO5ybgMYTG9rh/wMrJbl4T/0DkINuEYWBSfSf\nrfdwcUJknlYVMTgVj7C+d2YHNFcd2kTAzW+bOJh2Kzun9/bIcz/8jZWsdAzdZgsh\n+dMEc4S5C0eqq3hpFeY0moXEHy00QPxuRaWHtGAGp0shrqBoarVg5hXKNGiAMDBl\nHSHrYebDh3c6oiU/doV1j+Bw0Qyo2avmGdUqXwVa2s6SW8+Gd1ii1/O+d+vTJjz/\nopMuawcMTCvQMpNn+IfaSWDiTfEi0eLDx+MtuEHRPcUw4hfyXax/CXYyR76LjXpT\nqqfyBq6phd91YXr1bgCEUsbRV9HQpUuKKHA6HCTRtfqItahjSPZG4ui4B0rGq+Y7\nKFQx2QAoTsDcuqMopQz6\n=s/B6\n-----END PGP SIGNATURE-----",
        "payload": "tree 9fb483cae4bb657ffdfd2c6435a61279cd0b5eed\nparent 727a79836035b02e82e31a3c941396146eabc207\nparent bd92f2481c04db132555e151f4a57bb7a1c52ff1\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1485196288 -0800\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1485196956 -0800\n\nMerge #9596: [bugfix] save feeDelta instead of priorityDelta in DumpMempool\n\nbd92f24 [bugfix] save feeDelta instead of priorityDelta in DumpMempool (Alex Morcos)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71148b8947fe8b4d756822420a7f31c380159425",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/71148b8947fe8b4d756822420a7f31c380159425",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71148b8947fe8b4d756822420a7f31c380159425/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "727a79836035b02e82e31a3c941396146eabc207",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/727a79836035b02e82e31a3c941396146eabc207",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/727a79836035b02e82e31a3c941396146eabc207"
      },
      {
        "sha": "bd92f2481c04db132555e151f4a57bb7a1c52ff1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd92f2481c04db132555e151f4a57bb7a1c52ff1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bd92f2481c04db132555e151f4a57bb7a1c52ff1"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "881292d613b5325ccd2c1f4af14c0869b78fb2b7",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71148b8947fe8b4d756822420a7f31c380159425/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71148b8947fe8b4d756822420a7f31c380159425/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=71148b8947fe8b4d756822420a7f31c380159425",
        "patch": "@@ -4202,7 +4202,7 @@ void DumpMempool(void)\n     {\n         LOCK(mempool.cs);\n         for (const auto &i : mempool.mapDeltas) {\n-            mapDeltas[i.first] = i.second.first;\n+            mapDeltas[i.first] = i.second.second;\n         }\n         vinfo = mempool.infoAll();\n     }"
      }
    ]
  },
  {
    "sha": "ff25c32392596883c13623eed6018fabb7877ed7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZjI1YzMyMzkyNTk2ODgzYzEzNjIzZWVkNjAxOGZhYmI3ODc3ZWQ3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-03-26T15:44:50Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-01-23T20:43:22Z"
      },
      "message": "mempool: add notification for added/removed entries\n\nAdd notification signals to make it possible to subscribe to mempool\nchanges:\n\n- NotifyEntryAdded(CTransactionRef)>\n- NotifyEntryRemoved(CTransactionRef, MemPoolRemovalReason)>\n\nAlso add a mempool removal reason enumeration, which is passed to the\nremoved notification based on why the transaction was removed from\nthe mempool.",
      "tree": {
        "sha": "faf5e8691f9c93c2a173961a969b3e420bf7ae39",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/faf5e8691f9c93c2a173961a969b3e420bf7ae39"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff25c32392596883c13623eed6018fabb7877ed7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff25c32392596883c13623eed6018fabb7877ed7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ff25c32392596883c13623eed6018fabb7877ed7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff25c32392596883c13623eed6018fabb7877ed7/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "71148b8947fe8b4d756822420a7f31c380159425",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71148b8947fe8b4d756822420a7f31c380159425",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/71148b8947fe8b4d756822420a7f31c380159425"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 39,
      "deletions": 17
    },
    "files": [
      {
        "sha": "54400caccc806db6e9afb70c879d7e07044c3a5f",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 10,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff25c32392596883c13623eed6018fabb7877ed7/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff25c32392596883c13623eed6018fabb7877ed7/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=ff25c32392596883c13623eed6018fabb7877ed7",
        "patch": "@@ -393,6 +393,7 @@ void CTxMemPool::AddTransactionsUpdated(unsigned int n)\n \n bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, setEntries &setAncestors, bool validFeeEstimate)\n {\n+    NotifyEntryAdded(entry.GetSharedTx());\n     // Add to memory pool without checking anything.\n     // Used by main.cpp AcceptToMemoryPool(), which DOES do\n     // all the appropriate checks.\n@@ -449,8 +450,9 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n     return true;\n }\n \n-void CTxMemPool::removeUnchecked(txiter it)\n+void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason)\n {\n+    NotifyEntryRemoved(it->GetSharedTx(), reason);\n     const uint256 hash = it->GetTx().GetHash();\n     BOOST_FOREACH(const CTxIn& txin, it->GetTx().vin)\n         mapNextTx.erase(txin.prevout);\n@@ -502,7 +504,7 @@ void CTxMemPool::CalculateDescendants(txiter entryit, setEntries &setDescendants\n     }\n }\n \n-void CTxMemPool::removeRecursive(const CTransaction &origTx)\n+void CTxMemPool::removeRecursive(const CTransaction &origTx, MemPoolRemovalReason reason)\n {\n     // Remove transaction from memory pool\n     {\n@@ -529,7 +531,8 @@ void CTxMemPool::removeRecursive(const CTransaction &origTx)\n         BOOST_FOREACH(txiter it, txToRemove) {\n             CalculateDescendants(it, setAllRemoves);\n         }\n-        RemoveStaged(setAllRemoves, false);\n+\n+        RemoveStaged(setAllRemoves, false, reason);\n     }\n }\n \n@@ -567,7 +570,7 @@ void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMem\n     for (txiter it : txToRemove) {\n         CalculateDescendants(it, setAllRemoves);\n     }\n-    RemoveStaged(setAllRemoves, false);\n+    RemoveStaged(setAllRemoves, false, MemPoolRemovalReason::REORG);\n }\n \n void CTxMemPool::removeConflicts(const CTransaction &tx)\n@@ -581,7 +584,7 @@ void CTxMemPool::removeConflicts(const CTransaction &tx)\n             if (txConflict != tx)\n             {\n                 ClearPrioritisation(txConflict.GetHash());\n-                removeRecursive(txConflict);\n+                removeRecursive(txConflict, MemPoolRemovalReason::CONFLICT);\n             }\n         }\n     }\n@@ -610,7 +613,7 @@ void CTxMemPool::removeForBlock(const std::vector<CTransactionRef>& vtx, unsigne\n         if (it != mapTx.end()) {\n             setEntries stage;\n             stage.insert(it);\n-            RemoveStaged(stage, true);\n+            RemoveStaged(stage, true, MemPoolRemovalReason::BLOCK);\n         }\n         removeConflicts(*tx);\n         ClearPrioritisation(tx->GetHash());\n@@ -989,11 +992,11 @@ size_t CTxMemPool::DynamicMemoryUsage() const {\n     return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 15 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + memusage::DynamicUsage(mapLinks) + memusage::DynamicUsage(vTxHashes) + cachedInnerUsage;\n }\n \n-void CTxMemPool::RemoveStaged(setEntries &stage, bool updateDescendants) {\n+void CTxMemPool::RemoveStaged(setEntries &stage, bool updateDescendants, MemPoolRemovalReason reason) {\n     AssertLockHeld(cs);\n     UpdateForRemoveFromMempool(stage, updateDescendants);\n     BOOST_FOREACH(const txiter& it, stage) {\n-        removeUnchecked(it);\n+        removeUnchecked(it, reason);\n     }\n }\n \n@@ -1009,7 +1012,7 @@ int CTxMemPool::Expire(int64_t time) {\n     BOOST_FOREACH(txiter removeit, toremove) {\n         CalculateDescendants(removeit, stage);\n     }\n-    RemoveStaged(stage, false);\n+    RemoveStaged(stage, false, MemPoolRemovalReason::EXPIRY);\n     return stage.size();\n }\n \n@@ -1118,7 +1121,7 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<uint256>* pvNoSpendsRe\n             BOOST_FOREACH(txiter iter, stage)\n                 txn.push_back(iter->GetTx());\n         }\n-        RemoveStaged(stage, false);\n+        RemoveStaged(stage, false, MemPoolRemovalReason::SIZELIMIT);\n         if (pvNoSpendsRemaining) {\n             BOOST_FOREACH(const CTransaction& tx, txn) {\n                 BOOST_FOREACH(const CTxIn& txin, tx.vin) {"
      },
      {
        "sha": "f842a07dd657153208c5f946e9b3cd3212a96815",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 22,
        "deletions": 3,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff25c32392596883c13623eed6018fabb7877ed7/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff25c32392596883c13623eed6018fabb7877ed7/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=ff25c32392596883c13623eed6018fabb7877ed7",
        "patch": "@@ -25,6 +25,8 @@\n #include \"boost/multi_index/ordered_index.hpp\"\n #include \"boost/multi_index/hashed_index.hpp\"\n \n+#include <boost/signals2/signal.hpp>\n+\n class CAutoFile;\n class CBlockIndex;\n \n@@ -333,6 +335,19 @@ struct TxMempoolInfo\n     int64_t nFeeDelta;\n };\n \n+/** Reason why a transaction was removed from the mempool,\n+ * this is passed to the notification signal.\n+ */\n+enum class MemPoolRemovalReason {\n+    UNKNOWN = 0, //! Manually removed or unknown reason\n+    EXPIRY,      //! Expired from mempool\n+    SIZELIMIT,   //! Removed in size limiting\n+    REORG,       //! Removed for reorganization\n+    BLOCK,       //! Removed for block\n+    CONFLICT,    //! Removed for conflict with in-block transaction\n+    REPLACED     //! Removed for replacement\n+};\n+\n /**\n  * CTxMemPool stores valid-according-to-the-current-best-chain transactions\n  * that may be included in the next block.\n@@ -521,10 +536,11 @@ class CTxMemPool\n     bool addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, bool validFeeEstimate = true);\n     bool addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, setEntries &setAncestors, bool validFeeEstimate = true);\n \n-    void removeRecursive(const CTransaction &tx);\n+    void removeRecursive(const CTransaction &tx, MemPoolRemovalReason reason = MemPoolRemovalReason::UNKNOWN);\n     void removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight, int flags);\n     void removeConflicts(const CTransaction &tx);\n     void removeForBlock(const std::vector<CTransactionRef>& vtx, unsigned int nBlockHeight);\n+\n     void clear();\n     void _clear(); //lock free\n     bool CompareDepthAndScore(const uint256& hasha, const uint256& hashb);\n@@ -551,7 +567,7 @@ class CTxMemPool\n      *  Set updateDescendants to true when removing a tx that was in a block, so\n      *  that any in-mempool descendants have their ancestor state updated.\n      */\n-    void RemoveStaged(setEntries &stage, bool updateDescendants);\n+    void RemoveStaged(setEntries &stage, bool updateDescendants, MemPoolRemovalReason reason = MemPoolRemovalReason::UNKNOWN);\n \n     /** When adding transactions from a disconnected block back to the mempool,\n      *  new mempool entries may have children in the mempool (which is generally\n@@ -647,6 +663,9 @@ class CTxMemPool\n \n     size_t DynamicMemoryUsage() const;\n \n+    boost::signals2::signal<void (CTransactionRef)> NotifyEntryAdded;\n+    boost::signals2::signal<void (CTransactionRef, MemPoolRemovalReason)> NotifyEntryRemoved;\n+\n private:\n     /** UpdateForDescendants is used by UpdateTransactionsFromBlock to update\n      *  the descendants for a single transaction that has been added to the\n@@ -683,7 +702,7 @@ class CTxMemPool\n      *  transactions in a chain before we've updated all the state for the\n      *  removal.\n      */\n-    void removeUnchecked(txiter entry);\n+    void removeUnchecked(txiter entry, MemPoolRemovalReason reason = MemPoolRemovalReason::UNKNOWN);\n };\n \n /** "
      },
      {
        "sha": "d382e121bc724ec7fe3b3acda6cf350af858f4cb",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff25c32392596883c13623eed6018fabb7877ed7/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff25c32392596883c13623eed6018fabb7877ed7/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=ff25c32392596883c13623eed6018fabb7877ed7",
        "patch": "@@ -956,7 +956,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n             if (plTxnReplaced)\n                 plTxnReplaced->push_back(it->GetSharedTx());\n         }\n-        pool.RemoveStaged(allConflicting, false);\n+        pool.RemoveStaged(allConflicting, false, MemPoolRemovalReason::REPLACED);\n \n         // This transaction should only count for fee estimation if\n         // the node is not behind and it is not dependent on any other\n@@ -2166,7 +2166,7 @@ bool static DisconnectTip(CValidationState& state, const CChainParams& chainpara\n             // ignore validation errors in resurrected transactions\n             CValidationState stateDummy;\n             if (tx.IsCoinBase() || !AcceptToMemoryPool(mempool, stateDummy, it, false, NULL, NULL, true)) {\n-                mempool.removeRecursive(tx);\n+                mempool.removeRecursive(tx, MemPoolRemovalReason::REORG);\n             } else if (mempool.exists(tx.GetHash())) {\n                 vHashUpdate.push_back(tx.GetHash());\n             }\n@@ -3597,7 +3597,7 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n             return error(\"VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n         // check level 1: verify block validity\n         if (nCheckLevel >= 1 && !CheckBlock(block, state, chainparams.GetConsensus()))\n-            return error(\"%s: *** found bad block at %d, hash=%s (%s)\\n\", __func__, \n+            return error(\"%s: *** found bad block at %d, hash=%s (%s)\\n\", __func__,\n                          pindex->nHeight, pindex->GetBlockHash().ToString(), FormatStateMessage(state));\n         // check level 2: verify undo validity\n         if (nCheckLevel >= 2 && pindex) {\n@@ -3768,7 +3768,7 @@ bool LoadBlockIndex(const CChainParams& chainparams)\n     return true;\n }\n \n-bool InitBlockIndex(const CChainParams& chainparams) \n+bool InitBlockIndex(const CChainParams& chainparams)\n {\n     LOCK(cs_main);\n "
      }
    ]
  },
  {
    "sha": "4afbde6028708541c4da8732a1bd12fb8735fdae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YWZiZGU2MDI4NzA4NTQxYzRkYTg3MzJhMWJkMTJmYjg3MzVmZGFl",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-12-16T16:34:39Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-01-23T20:43:22Z"
      },
      "message": "Introduce MemPoolConflictRemovalTracker\n\nAnalogue to ConnectTrace that tracks transactions that have been removed from the mempool due to conflicts and then passes them through SyncTransaction at the end of its scope.",
      "tree": {
        "sha": "b609405705274e9f07f9df6e419df9a78599d592",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b609405705274e9f07f9df6e419df9a78599d592"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4afbde6028708541c4da8732a1bd12fb8735fdae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4afbde6028708541c4da8732a1bd12fb8735fdae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4afbde6028708541c4da8732a1bd12fb8735fdae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4afbde6028708541c4da8732a1bd12fb8735fdae/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff25c32392596883c13623eed6018fabb7877ed7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff25c32392596883c13623eed6018fabb7877ed7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff25c32392596883c13623eed6018fabb7877ed7"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 45,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b882416961ea06da62da759b7b4edda73016ee53",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 0,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4afbde6028708541c4da8732a1bd12fb8735fdae/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4afbde6028708541c4da8732a1bd12fb8735fdae/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=4afbde6028708541c4da8732a1bd12fb8735fdae",
        "patch": "@@ -157,6 +157,39 @@ namespace {\n     set<int> setDirtyFileInfo;\n } // anon namespace\n \n+/* Use this class to start tracking transactions that are removed from the\n+ * mempool and pass all those transactions through SyncTransaction when the\n+ * object goes out of scope. This is currently only used to call SyncTransaction\n+ * on conflicts removed from the mempool during block connection.  Applied in\n+ * ActivateBestChain around ActivateBestStep which in turn calls:\n+ * ConnectTip->removeForBlock->removeConflicts\n+ */\n+class MemPoolConflictRemovalTracker\n+{\n+private:\n+    std::vector<CTransactionRef> conflictedTxs;\n+    CTxMemPool &pool;\n+\n+public:\n+    MemPoolConflictRemovalTracker(CTxMemPool &_pool) : pool(_pool) {\n+        pool.NotifyEntryRemoved.connect(boost::bind(&MemPoolConflictRemovalTracker::NotifyEntryRemoved, this, _1, _2));\n+    }\n+\n+    void NotifyEntryRemoved(CTransactionRef txRemoved, MemPoolRemovalReason reason) {\n+        if (reason == MemPoolRemovalReason::CONFLICT) {\n+            conflictedTxs.push_back(txRemoved);\n+        }\n+    }\n+\n+    ~MemPoolConflictRemovalTracker() {\n+        pool.NotifyEntryRemoved.disconnect(boost::bind(&MemPoolConflictRemovalTracker::NotifyEntryRemoved, this, _1, _2));\n+        for (const auto& tx : conflictedTxs) {\n+            GetMainSignals().SyncTransaction(*tx, NULL, CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK);\n+        }\n+        conflictedTxs.clear();\n+    }\n+};\n+\n CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator)\n {\n     // Find the first block the caller has in the main chain\n@@ -2453,6 +2486,14 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n         bool fInitialDownload;\n         {\n             LOCK(cs_main);\n+            { // TODO: Tempoarily ensure that mempool removals are notified before\n+              // connected transactions.  This shouldn't matter, but the abandoned\n+              // state of transactions in our wallet is currently cleared when we\n+              // receive another notification and there is a race condition where\n+              // notification of a connected conflict might cause an outside process\n+              // to abandon a transaction and then have it inadvertantly cleared by\n+              // the notification that the conflicted transaction was evicted.\n+            MemPoolConflictRemovalTracker mrt(mempool);\n             CBlockIndex *pindexOldTip = chainActive.Tip();\n             if (pindexMostWork == NULL) {\n                 pindexMostWork = FindMostWorkChain();\n@@ -2476,6 +2517,10 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n             fInitialDownload = IsInitialBlockDownload();\n \n             // throw all transactions though the signal-interface\n+\n+            } // MemPoolConflictRemovalTracker destroyed and conflict evictions are notified\n+\n+            // Transactions in the connnected block are notified\n             for (const auto& pair : connectTrace.blocksConnected) {\n                 assert(pair.second);\n                 const CBlock& block = *(pair.second);"
      }
    ]
  },
  {
    "sha": "094e4b33839404d9c18200fc30d9a993a3dc106f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOTRlNGIzMzgzOTQwNGQ5YzE4MjAwZmMzMGQ5YTk5M2EzZGMxMDZm",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-12-16T19:17:13Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-01-23T20:43:22Z"
      },
      "message": "Better document usage of SyncTransaction",
      "tree": {
        "sha": "7a85d9479cb849c407a7b7c4a4d4aaf0e607cea7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a85d9479cb849c407a7b7c4a4d4aaf0e607cea7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/094e4b33839404d9c18200fc30d9a993a3dc106f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/094e4b33839404d9c18200fc30d9a993a3dc106f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/094e4b33839404d9c18200fc30d9a993a3dc106f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/094e4b33839404d9c18200fc30d9a993a3dc106f/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4afbde6028708541c4da8732a1bd12fb8735fdae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4afbde6028708541c4da8732a1bd12fb8735fdae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4afbde6028708541c4da8732a1bd12fb8735fdae"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 19,
      "deletions": 4
    },
    "files": [
      {
        "sha": "a2e76f2036e1ddd16ecdb11b0ece62a1e73df032",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/094e4b33839404d9c18200fc30d9a993a3dc106f/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/094e4b33839404d9c18200fc30d9a993a3dc106f/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=094e4b33839404d9c18200fc30d9a993a3dc106f",
        "patch": "@@ -50,9 +50,16 @@ class CValidationInterface {\n struct CMainSignals {\n     /** Notifies listeners of updated block chain tip */\n     boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    /** A posInBlock value for SyncTransaction which indicates the transaction was conflicted, disconnected, or not in a block */\n+    /** A posInBlock value for SyncTransaction calls for tranactions not\n+     * included in connected blocks such as transactions removed from mempool,\n+     * accepted to mempool or appearing in disconnected blocks.*/\n     static const int SYNC_TRANSACTION_NOT_IN_BLOCK = -1;\n-    /** Notifies listeners of updated transaction data (transaction, and optionally the block it is found in. */\n+    /** Notifies listeners of updated transaction data (transaction, and\n+     * optionally the block it is found in). Called with block data when\n+     * transaction is included in a connected block, and without block data when\n+     * transaction was accepted to mempool, removed from mempool (only when\n+     * removal was due to conflict from connected block), or appeared in a\n+     * disconnected block.*/\n     boost::signals2::signal<void (const CTransaction &, const CBlockIndex *pindex, int posInBlock)> SyncTransaction;\n     /** Notifies listeners of an updated transaction without new data (for now: a coinbase potentially becoming visible). */\n     boost::signals2::signal<void (const uint256 &)> UpdatedTransaction;"
      },
      {
        "sha": "b4715622cf4f867b9f9163870ff2cacadd3f20a7",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/094e4b33839404d9c18200fc30d9a993a3dc106f/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/094e4b33839404d9c18200fc30d9a993a3dc106f/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=094e4b33839404d9c18200fc30d9a993a3dc106f",
        "patch": "@@ -1003,9 +1003,17 @@ bool CWallet::LoadToWallet(const CWalletTx& wtxIn)\n }\n \n /**\n- * Add a transaction to the wallet, or update it.\n- * pblock is optional, but should be provided if the transaction is known to be in a block.\n+ * Add a transaction to the wallet, or update it.  pIndex and posInBlock should\n+ * be set when the transaction was known to be included in a block.  When\n+ * posInBlock = SYNC_TRANSACTION_NOT_IN_BLOCK (-1) , then wallet state is not\n+ * updated in AddToWallet, but notifications happen and cached balances are\n+ * marked dirty.\n  * If fUpdate is true, existing transactions will be updated.\n+ * TODO: One exception to this is that the abandoned state is cleared under the\n+ * assumption that any further notification of a transaction that was considered\n+ * abandoned is an indication that it is not safe to be considered abandoned.\n+ * Abandoned state should probably be more carefuly tracked via different\n+ * posInBlock signals or by checking mempool presence when necessary.\n  */\n bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate)\n {"
      }
    ]
  },
  {
    "sha": "be31a2b3635b893930c731a2929bb593dae9847e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZTMxYTJiMzYzNWI4OTM5MzBjNzMxYTI5MjliYjU5M2RhZTk4NDdl",
    "commit": {
      "author": {
        "name": "Lauda",
        "email": "lauda.m@protonmail.ch",
        "date": "2017-01-23T22:46:06Z"
      },
      "committer": {
        "name": "Lauda",
        "email": "lauda.m@protonmail.ch",
        "date": "2017-01-23T22:46:06Z"
      },
      "message": "[Trivial] Update license year range to 2017\n\nThe same as #7363.",
      "tree": {
        "sha": "33a5a8ddb695fd9c3e585741a0020a726d0b4130",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/33a5a8ddb695fd9c3e585741a0020a726d0b4130"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/be31a2b3635b893930c731a2929bb593dae9847e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be31a2b3635b893930c731a2929bb593dae9847e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/be31a2b3635b893930c731a2929bb593dae9847e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be31a2b3635b893930c731a2929bb593dae9847e/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "5cf3c60fccb198c16819fcf8a0c5635b5b630496",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cf3c60fccb198c16819fcf8a0c5635b5b630496",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5cf3c60fccb198c16819fcf8a0c5635b5b630496"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "c6203c0f76d2b49f73b273413b464cac6e1c71c5",
        "filename": "COPYING",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be31a2b3635b893930c731a2929bb593dae9847e/COPYING",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be31a2b3635b893930c731a2929bb593dae9847e/COPYING",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/COPYING?ref=be31a2b3635b893930c731a2929bb593dae9847e",
        "patch": "@@ -1,6 +1,6 @@\n The MIT License (MIT)\n \n-Copyright (c) 2009-2016 The Bitcoin Core developers\n+Copyright (c) 2009-2017 The Bitcoin Core developers\n \n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal"
      },
      {
        "sha": "346695043d9d12dfdfe2f03e0b7e9fbe9c1559eb",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be31a2b3635b893930c731a2929bb593dae9847e/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be31a2b3635b893930c731a2929bb593dae9847e/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=be31a2b3635b893930c731a2929bb593dae9847e",
        "patch": "@@ -5,7 +5,7 @@ define(_CLIENT_VERSION_MINOR, 13)\n define(_CLIENT_VERSION_REVISION, 99)\n define(_CLIENT_VERSION_BUILD, 0)\n define(_CLIENT_VERSION_IS_RELEASE, false)\n-define(_COPYRIGHT_YEAR, 2016)\n+define(_COPYRIGHT_YEAR, 2017)\n define(_COPYRIGHT_HOLDERS,[The %s developers])\n define(_COPYRIGHT_HOLDERS_SUBSTITUTION,[[Bitcoin Core]])\n AC_INIT([Bitcoin Core],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[https://github.com/bitcoin/bitcoin/issues],[bitcoin],[https://bitcoincore.org/])"
      },
      {
        "sha": "72d64ce62d2a7e588b495adeec2cdc497c0ead3a",
        "filename": "contrib/debian/copyright",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be31a2b3635b893930c731a2929bb593dae9847e/contrib/debian/copyright",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be31a2b3635b893930c731a2929bb593dae9847e/contrib/debian/copyright",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/copyright?ref=be31a2b3635b893930c731a2929bb593dae9847e",
        "patch": "@@ -5,7 +5,7 @@ Upstream-Contact: Satoshi Nakamoto <satoshin@gmx.com>\n Source: https://github.com/bitcoin/bitcoin\n \n Files: *\n-Copyright: 2009-2016, Bitcoin Core Developers\n+Copyright: 2009-2017, Bitcoin Core Developers\n License: Expat\n Comment: The Bitcoin Core Developers encompasses the current developers listed on bitcoin.org,\n          as well as the numerous contributors to the project."
      },
      {
        "sha": "0b27bb1bdfccee570629caec8c2bb96bc952f5b9",
        "filename": "src/clientversion.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be31a2b3635b893930c731a2929bb593dae9847e/src/clientversion.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be31a2b3635b893930c731a2929bb593dae9847e/src/clientversion.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/clientversion.h?ref=be31a2b3635b893930c731a2929bb593dae9847e",
        "patch": "@@ -26,7 +26,7 @@\n  * Copyright year (2009-this)\n  * Todo: update this when changing our copyright comments in the source\n  */\n-#define COPYRIGHT_YEAR 2016\n+#define COPYRIGHT_YEAR 2017\n \n #endif //HAVE_CONFIG_H\n "
      }
    ]
  },
  {
    "sha": "50864529b6e7295bac0bb8af094c903c567f20bb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MDg2NDUyOWI2ZTcyOTViYWMwYmI4YWYwOTRjOTAzYzU2N2YyMGJi",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-24T08:22:56Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-24T08:24:41Z"
      },
      "message": "Merge #9588: qt: Use nPowTargetSpacing constant\n\nfa4d478 qt: Use nPowTargetSpacing constant (MarcoFalke)",
      "tree": {
        "sha": "3474518cd37ad133a7a1f9c989ba79608d72405e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3474518cd37ad133a7a1f9c989ba79608d72405e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/50864529b6e7295bac0bb8af094c903c567f20bb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAliHD0kACgkQKdS8tkFv\nU+xomxAAp6H8fQmlO2fHLRdbVD5tN+1XGtwM2qU7QvMm7p0PGK15SyeVxTSqtnC8\nLComq6wuhDBzerSevJtuR82m6rClOnlOD2WPuw8dn8N5TfiLbMszi8g4TXH2qDzV\nxCeWuoWJTeR96euNWk30MdFPxKhnDu0VYMNNEhemCqIzwtY0nSbQ9Q1EQ/WR2Twh\nKNC6hOSgLf48DCi2n4C7+sYripwtk9A1uIcVJFanMGZAFqfVJR9p+/Lucu79iFO/\nsEBBTeH7/xY4+ajbiclcHVvAJQ3TUxdXHFjSH87mtfWMlTT17iWrxKELLoiZZAnl\nM/JnwayOngT9x7yz1bq/d8UoJFbIqN9p68BFCA6rV01DYj1wx+bjKcfftdcXEo+4\neijw0u1Ml30ZFm/bUTT2UZx2BRuebCKmF3vl/mZ+7U0lZWY748k2w6C2MPdZgTgx\nWAw5EUvbcJ4wM0ASEOA2PZ7IZDKKSnl0Hlg+tQGZ+BsKjnu4je3oQlSGG+W7bCJL\nitHPz0LKZjsyxvMrDSgRN47ICJaZL2vNOuByPCAe+yiJNuUL8fWcgMyvmhQG+ONE\nsc5tmyqaPb3v/lmYSv+a4Zw90YkyirujILdv/3zbHP+P8iQcIUMyiNfHc/MwfGiA\nES1rzOfnXeImaCS/zGeuC8XV8T/yqqUwKaxEVNvXlulQQZKMZi8=\n=Z8YJ\n-----END PGP SIGNATURE-----",
        "payload": "tree 3474518cd37ad133a7a1f9c989ba79608d72405e\nparent 71148b8947fe8b4d756822420a7f31c380159425\nparent fa4d47814f298523aeb9a6658cc74fc46d316e33\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1485246176 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1485246281 +0100\n\nMerge #9588: qt: Use nPowTargetSpacing constant\n\nfa4d478 qt: Use nPowTargetSpacing constant (MarcoFalke)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50864529b6e7295bac0bb8af094c903c567f20bb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/50864529b6e7295bac0bb8af094c903c567f20bb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50864529b6e7295bac0bb8af094c903c567f20bb/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "71148b8947fe8b4d756822420a7f31c380159425",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71148b8947fe8b4d756822420a7f31c380159425",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/71148b8947fe8b4d756822420a7f31c380159425"
      },
      {
        "sha": "fa4d47814f298523aeb9a6658cc74fc46d316e33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4d47814f298523aeb9a6658cc74fc46d316e33",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa4d47814f298523aeb9a6658cc74fc46d316e33"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 10,
      "deletions": 6
    },
    "files": [
      {
        "sha": "f86b09644b86c3ab7a19a4f34442cc2735b5d395",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50864529b6e7295bac0bb8af094c903c567f20bb/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50864529b6e7295bac0bb8af094c903c567f20bb/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=50864529b6e7295bac0bb8af094c903c567f20bb",
        "patch": "@@ -31,6 +31,7 @@\n #include \"macdockiconhandler.h\"\n #endif\n \n+#include \"chainparams.h\"\n #include \"init.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n@@ -752,8 +753,8 @@ void BitcoinGUI::updateHeadersSyncProgressLabel()\n {\n     int64_t headersTipTime = clientModel->getHeaderTipTime();\n     int headersTipHeight = clientModel->getHeaderTipHeight();\n-    int estHeadersLeft = (GetTime() - headersTipTime)/600;\n-    if (estHeadersLeft > REQ_HEADER_HEIGHT_DELTA_SYNC)\n+    int estHeadersLeft = (GetTime() - headersTipTime) / Params().GetConsensus().nPowTargetSpacing;\n+    if (estHeadersLeft > HEADER_HEIGHT_DELTA_SYNC)\n         progressBarLabel->setText(tr(\"Syncing Headers (%1%)...\").arg(QString::number(100.0 / (headersTipHeight+estHeadersLeft)*headersTipHeight, 'f', 1)));\n }\n "
      },
      {
        "sha": "4779ffa43f3a3ae41701a82427254322f020b664",
        "filename": "src/qt/modaloverlay.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50864529b6e7295bac0bb8af094c903c567f20bb/src/qt/modaloverlay.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50864529b6e7295bac0bb8af094c903c567f20bb/src/qt/modaloverlay.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/modaloverlay.cpp?ref=50864529b6e7295bac0bb8af094c903c567f20bb",
        "patch": "@@ -7,6 +7,8 @@\n \n #include \"guiutil.h\"\n \n+#include \"chainparams.h\"\n+\n #include <QResizeEvent>\n #include <QPropertyAnimation>\n \n@@ -125,11 +127,11 @@ void ModalOverlay::tipUpdate(int count, const QDateTime& blockDate, double nVeri\n \n     // estimate the number of headers left based on nPowTargetSpacing\n     // and check if the gui is not aware of the the best header (happens rarely)\n-    int estimateNumHeadersLeft = bestHeaderDate.secsTo(currentDate) / 600;\n+    int estimateNumHeadersLeft = bestHeaderDate.secsTo(currentDate) / Params().GetConsensus().nPowTargetSpacing;\n     bool hasBestHeader = bestHeaderHeight >= count;\n \n     // show remaining number of blocks\n-    if (estimateNumHeadersLeft < 24 && hasBestHeader) {\n+    if (estimateNumHeadersLeft < HEADER_HEIGHT_DELTA_SYNC && hasBestHeader) {\n         ui->numberOfBlocksLeft->setText(QString::number(bestHeaderHeight - count));\n     } else {\n         ui->numberOfBlocksLeft->setText(tr(\"Unknown. Syncing Headers (%1)...\").arg(bestHeaderHeight));"
      },
      {
        "sha": "21ccdbd8397e23bad36b45a6e9fd99e829428217",
        "filename": "src/qt/modaloverlay.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50864529b6e7295bac0bb8af094c903c567f20bb/src/qt/modaloverlay.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50864529b6e7295bac0bb8af094c903c567f20bb/src/qt/modaloverlay.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/modaloverlay.h?ref=50864529b6e7295bac0bb8af094c903c567f20bb",
        "patch": "@@ -9,7 +9,7 @@\n #include <QWidget>\n \n //! The required delta of headers to the estimated number of available headers until we show the IBD progress\n-static const int REQ_HEADER_HEIGHT_DELTA_SYNC = 24;\n+static constexpr int HEADER_HEIGHT_DELTA_SYNC = 24;\n \n namespace Ui {\n     class ModalOverlay;"
      },
      {
        "sha": "1e2842df73c7558725cd289734510a93d08ebec9",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50864529b6e7295bac0bb8af094c903c567f20bb/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50864529b6e7295bac0bb8af094c903c567f20bb/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=50864529b6e7295bac0bb8af094c903c567f20bb",
        "patch": "@@ -16,6 +16,7 @@\n #include \"walletmodel.h\"\n \n #include \"base58.h\"\n+#include \"chainparams.h\"\n #include \"wallet/coincontrol.h\"\n #include \"validation.h\" // mempool and minRelayTxFee\n #include \"ui_interface.h\"\n@@ -608,7 +609,7 @@ void SendCoinsDialog::updateGlobalFeeVariables()\n         CoinControlDialog::coinControl->nMinimumTotalFee = 0;\n \n         // show the estimated reuquired time for confirmation\n-        ui->confirmationTargetLabel->setText(GUIUtil::formatDurationStr(nConfirmTarget*600)+\" / \"+tr(\"%n block(s)\", \"\", nConfirmTarget));\n+        ui->confirmationTargetLabel->setText(GUIUtil::formatDurationStr(nConfirmTarget * Params().GetConsensus().nPowTargetSpacing) + \" / \" + tr(\"%n block(s)\", \"\", nConfirmTarget));\n     }\n     else\n     {"
      }
    ]
  },
  {
    "sha": "4a1dc35ca5326e81cca718f5c28e804542fec6d3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YTFkYzM1Y2E1MzI2ZTgxY2NhNzE4ZjVjMjhlODA0NTQyZmVjNmQz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-24T09:07:50Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-24T09:08:01Z"
      },
      "message": "Merge #9371: Notify on removal\n\n094e4b3 Better document usage of SyncTransaction (Alex Morcos)\n4afbde6 Introduce MemPoolConflictRemovalTracker (Alex Morcos)\nff25c32 mempool: add notification for added/removed entries (Wladimir J. van der Laan)",
      "tree": {
        "sha": "8b02f68b293dc6a5c03608bc0504871c0addc084",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b02f68b293dc6a5c03608bc0504871c0addc084"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a1dc35ca5326e81cca718f5c28e804542fec6d3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYhxlxAAoJEHSBCwEjRsmmZ54IAMx647Fk6kSXIJoHJiRI304C\nPxcQ0RpRdYGQTaFgs6RY+ZkA654AFuY6jocj2cL4HlUmEMFOMWjxr2G8feU6jJ1I\nyj9ny+s/Rgymw+DSl+9wOoJaxQs8itl/FOIdLBR9VSlrSWjZYBGlhz1ktyFxcYQZ\nEE5m6dAgilyBNA6kXlfLz7LzK4UTiUQ4/tjcY1MlczBSnzvNXQJvs6dpMoNWkkVX\nUo0yQXitbxEBZNsOk+CBJh5iheO9PDgDrd7jOc3p6RJXnhP+RfzyuEuIVrOtKgEZ\n/p8qnDjZ5iyxITZFGGC0AQVkZpclOdV1qf4EBAdA9c+0zzPICFEjqgRdRhx3rYo=\n=P/cJ\n-----END PGP SIGNATURE-----",
        "payload": "tree 8b02f68b293dc6a5c03608bc0504871c0addc084\nparent 50864529b6e7295bac0bb8af094c903c567f20bb\nparent 094e4b33839404d9c18200fc30d9a993a3dc106f\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1485248870 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1485248881 +0100\n\nMerge #9371: Notify on removal\n\n094e4b3 Better document usage of SyncTransaction (Alex Morcos)\n4afbde6 Introduce MemPoolConflictRemovalTracker (Alex Morcos)\nff25c32 mempool: add notification for added/removed entries (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a1dc35ca5326e81cca718f5c28e804542fec6d3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4a1dc35ca5326e81cca718f5c28e804542fec6d3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a1dc35ca5326e81cca718f5c28e804542fec6d3/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "50864529b6e7295bac0bb8af094c903c567f20bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50864529b6e7295bac0bb8af094c903c567f20bb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/50864529b6e7295bac0bb8af094c903c567f20bb"
      },
      {
        "sha": "094e4b33839404d9c18200fc30d9a993a3dc106f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/094e4b33839404d9c18200fc30d9a993a3dc106f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/094e4b33839404d9c18200fc30d9a993a3dc106f"
      }
    ],
    "stats": {
      "total": 124,
      "additions": 103,
      "deletions": 21
    },
    "files": [
      {
        "sha": "54400caccc806db6e9afb70c879d7e07044c3a5f",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 10,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a1dc35ca5326e81cca718f5c28e804542fec6d3/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a1dc35ca5326e81cca718f5c28e804542fec6d3/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=4a1dc35ca5326e81cca718f5c28e804542fec6d3",
        "patch": "@@ -393,6 +393,7 @@ void CTxMemPool::AddTransactionsUpdated(unsigned int n)\n \n bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, setEntries &setAncestors, bool validFeeEstimate)\n {\n+    NotifyEntryAdded(entry.GetSharedTx());\n     // Add to memory pool without checking anything.\n     // Used by main.cpp AcceptToMemoryPool(), which DOES do\n     // all the appropriate checks.\n@@ -449,8 +450,9 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n     return true;\n }\n \n-void CTxMemPool::removeUnchecked(txiter it)\n+void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason)\n {\n+    NotifyEntryRemoved(it->GetSharedTx(), reason);\n     const uint256 hash = it->GetTx().GetHash();\n     BOOST_FOREACH(const CTxIn& txin, it->GetTx().vin)\n         mapNextTx.erase(txin.prevout);\n@@ -502,7 +504,7 @@ void CTxMemPool::CalculateDescendants(txiter entryit, setEntries &setDescendants\n     }\n }\n \n-void CTxMemPool::removeRecursive(const CTransaction &origTx)\n+void CTxMemPool::removeRecursive(const CTransaction &origTx, MemPoolRemovalReason reason)\n {\n     // Remove transaction from memory pool\n     {\n@@ -529,7 +531,8 @@ void CTxMemPool::removeRecursive(const CTransaction &origTx)\n         BOOST_FOREACH(txiter it, txToRemove) {\n             CalculateDescendants(it, setAllRemoves);\n         }\n-        RemoveStaged(setAllRemoves, false);\n+\n+        RemoveStaged(setAllRemoves, false, reason);\n     }\n }\n \n@@ -567,7 +570,7 @@ void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMem\n     for (txiter it : txToRemove) {\n         CalculateDescendants(it, setAllRemoves);\n     }\n-    RemoveStaged(setAllRemoves, false);\n+    RemoveStaged(setAllRemoves, false, MemPoolRemovalReason::REORG);\n }\n \n void CTxMemPool::removeConflicts(const CTransaction &tx)\n@@ -581,7 +584,7 @@ void CTxMemPool::removeConflicts(const CTransaction &tx)\n             if (txConflict != tx)\n             {\n                 ClearPrioritisation(txConflict.GetHash());\n-                removeRecursive(txConflict);\n+                removeRecursive(txConflict, MemPoolRemovalReason::CONFLICT);\n             }\n         }\n     }\n@@ -610,7 +613,7 @@ void CTxMemPool::removeForBlock(const std::vector<CTransactionRef>& vtx, unsigne\n         if (it != mapTx.end()) {\n             setEntries stage;\n             stage.insert(it);\n-            RemoveStaged(stage, true);\n+            RemoveStaged(stage, true, MemPoolRemovalReason::BLOCK);\n         }\n         removeConflicts(*tx);\n         ClearPrioritisation(tx->GetHash());\n@@ -989,11 +992,11 @@ size_t CTxMemPool::DynamicMemoryUsage() const {\n     return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 15 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + memusage::DynamicUsage(mapLinks) + memusage::DynamicUsage(vTxHashes) + cachedInnerUsage;\n }\n \n-void CTxMemPool::RemoveStaged(setEntries &stage, bool updateDescendants) {\n+void CTxMemPool::RemoveStaged(setEntries &stage, bool updateDescendants, MemPoolRemovalReason reason) {\n     AssertLockHeld(cs);\n     UpdateForRemoveFromMempool(stage, updateDescendants);\n     BOOST_FOREACH(const txiter& it, stage) {\n-        removeUnchecked(it);\n+        removeUnchecked(it, reason);\n     }\n }\n \n@@ -1009,7 +1012,7 @@ int CTxMemPool::Expire(int64_t time) {\n     BOOST_FOREACH(txiter removeit, toremove) {\n         CalculateDescendants(removeit, stage);\n     }\n-    RemoveStaged(stage, false);\n+    RemoveStaged(stage, false, MemPoolRemovalReason::EXPIRY);\n     return stage.size();\n }\n \n@@ -1118,7 +1121,7 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<uint256>* pvNoSpendsRe\n             BOOST_FOREACH(txiter iter, stage)\n                 txn.push_back(iter->GetTx());\n         }\n-        RemoveStaged(stage, false);\n+        RemoveStaged(stage, false, MemPoolRemovalReason::SIZELIMIT);\n         if (pvNoSpendsRemaining) {\n             BOOST_FOREACH(const CTransaction& tx, txn) {\n                 BOOST_FOREACH(const CTxIn& txin, tx.vin) {"
      },
      {
        "sha": "f842a07dd657153208c5f946e9b3cd3212a96815",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 22,
        "deletions": 3,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a1dc35ca5326e81cca718f5c28e804542fec6d3/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a1dc35ca5326e81cca718f5c28e804542fec6d3/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=4a1dc35ca5326e81cca718f5c28e804542fec6d3",
        "patch": "@@ -25,6 +25,8 @@\n #include \"boost/multi_index/ordered_index.hpp\"\n #include \"boost/multi_index/hashed_index.hpp\"\n \n+#include <boost/signals2/signal.hpp>\n+\n class CAutoFile;\n class CBlockIndex;\n \n@@ -333,6 +335,19 @@ struct TxMempoolInfo\n     int64_t nFeeDelta;\n };\n \n+/** Reason why a transaction was removed from the mempool,\n+ * this is passed to the notification signal.\n+ */\n+enum class MemPoolRemovalReason {\n+    UNKNOWN = 0, //! Manually removed or unknown reason\n+    EXPIRY,      //! Expired from mempool\n+    SIZELIMIT,   //! Removed in size limiting\n+    REORG,       //! Removed for reorganization\n+    BLOCK,       //! Removed for block\n+    CONFLICT,    //! Removed for conflict with in-block transaction\n+    REPLACED     //! Removed for replacement\n+};\n+\n /**\n  * CTxMemPool stores valid-according-to-the-current-best-chain transactions\n  * that may be included in the next block.\n@@ -521,10 +536,11 @@ class CTxMemPool\n     bool addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, bool validFeeEstimate = true);\n     bool addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, setEntries &setAncestors, bool validFeeEstimate = true);\n \n-    void removeRecursive(const CTransaction &tx);\n+    void removeRecursive(const CTransaction &tx, MemPoolRemovalReason reason = MemPoolRemovalReason::UNKNOWN);\n     void removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight, int flags);\n     void removeConflicts(const CTransaction &tx);\n     void removeForBlock(const std::vector<CTransactionRef>& vtx, unsigned int nBlockHeight);\n+\n     void clear();\n     void _clear(); //lock free\n     bool CompareDepthAndScore(const uint256& hasha, const uint256& hashb);\n@@ -551,7 +567,7 @@ class CTxMemPool\n      *  Set updateDescendants to true when removing a tx that was in a block, so\n      *  that any in-mempool descendants have their ancestor state updated.\n      */\n-    void RemoveStaged(setEntries &stage, bool updateDescendants);\n+    void RemoveStaged(setEntries &stage, bool updateDescendants, MemPoolRemovalReason reason = MemPoolRemovalReason::UNKNOWN);\n \n     /** When adding transactions from a disconnected block back to the mempool,\n      *  new mempool entries may have children in the mempool (which is generally\n@@ -647,6 +663,9 @@ class CTxMemPool\n \n     size_t DynamicMemoryUsage() const;\n \n+    boost::signals2::signal<void (CTransactionRef)> NotifyEntryAdded;\n+    boost::signals2::signal<void (CTransactionRef, MemPoolRemovalReason)> NotifyEntryRemoved;\n+\n private:\n     /** UpdateForDescendants is used by UpdateTransactionsFromBlock to update\n      *  the descendants for a single transaction that has been added to the\n@@ -683,7 +702,7 @@ class CTxMemPool\n      *  transactions in a chain before we've updated all the state for the\n      *  removal.\n      */\n-    void removeUnchecked(txiter entry);\n+    void removeUnchecked(txiter entry, MemPoolRemovalReason reason = MemPoolRemovalReason::UNKNOWN);\n };\n \n /** "
      },
      {
        "sha": "b882416961ea06da62da759b7b4edda73016ee53",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 49,
        "deletions": 4,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a1dc35ca5326e81cca718f5c28e804542fec6d3/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a1dc35ca5326e81cca718f5c28e804542fec6d3/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=4a1dc35ca5326e81cca718f5c28e804542fec6d3",
        "patch": "@@ -157,6 +157,39 @@ namespace {\n     set<int> setDirtyFileInfo;\n } // anon namespace\n \n+/* Use this class to start tracking transactions that are removed from the\n+ * mempool and pass all those transactions through SyncTransaction when the\n+ * object goes out of scope. This is currently only used to call SyncTransaction\n+ * on conflicts removed from the mempool during block connection.  Applied in\n+ * ActivateBestChain around ActivateBestStep which in turn calls:\n+ * ConnectTip->removeForBlock->removeConflicts\n+ */\n+class MemPoolConflictRemovalTracker\n+{\n+private:\n+    std::vector<CTransactionRef> conflictedTxs;\n+    CTxMemPool &pool;\n+\n+public:\n+    MemPoolConflictRemovalTracker(CTxMemPool &_pool) : pool(_pool) {\n+        pool.NotifyEntryRemoved.connect(boost::bind(&MemPoolConflictRemovalTracker::NotifyEntryRemoved, this, _1, _2));\n+    }\n+\n+    void NotifyEntryRemoved(CTransactionRef txRemoved, MemPoolRemovalReason reason) {\n+        if (reason == MemPoolRemovalReason::CONFLICT) {\n+            conflictedTxs.push_back(txRemoved);\n+        }\n+    }\n+\n+    ~MemPoolConflictRemovalTracker() {\n+        pool.NotifyEntryRemoved.disconnect(boost::bind(&MemPoolConflictRemovalTracker::NotifyEntryRemoved, this, _1, _2));\n+        for (const auto& tx : conflictedTxs) {\n+            GetMainSignals().SyncTransaction(*tx, NULL, CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK);\n+        }\n+        conflictedTxs.clear();\n+    }\n+};\n+\n CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator)\n {\n     // Find the first block the caller has in the main chain\n@@ -956,7 +989,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n             if (plTxnReplaced)\n                 plTxnReplaced->push_back(it->GetSharedTx());\n         }\n-        pool.RemoveStaged(allConflicting, false);\n+        pool.RemoveStaged(allConflicting, false, MemPoolRemovalReason::REPLACED);\n \n         // This transaction should only count for fee estimation if\n         // the node is not behind and it is not dependent on any other\n@@ -2166,7 +2199,7 @@ bool static DisconnectTip(CValidationState& state, const CChainParams& chainpara\n             // ignore validation errors in resurrected transactions\n             CValidationState stateDummy;\n             if (tx.IsCoinBase() || !AcceptToMemoryPool(mempool, stateDummy, it, false, NULL, NULL, true)) {\n-                mempool.removeRecursive(tx);\n+                mempool.removeRecursive(tx, MemPoolRemovalReason::REORG);\n             } else if (mempool.exists(tx.GetHash())) {\n                 vHashUpdate.push_back(tx.GetHash());\n             }\n@@ -2453,6 +2486,14 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n         bool fInitialDownload;\n         {\n             LOCK(cs_main);\n+            { // TODO: Tempoarily ensure that mempool removals are notified before\n+              // connected transactions.  This shouldn't matter, but the abandoned\n+              // state of transactions in our wallet is currently cleared when we\n+              // receive another notification and there is a race condition where\n+              // notification of a connected conflict might cause an outside process\n+              // to abandon a transaction and then have it inadvertantly cleared by\n+              // the notification that the conflicted transaction was evicted.\n+            MemPoolConflictRemovalTracker mrt(mempool);\n             CBlockIndex *pindexOldTip = chainActive.Tip();\n             if (pindexMostWork == NULL) {\n                 pindexMostWork = FindMostWorkChain();\n@@ -2476,6 +2517,10 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n             fInitialDownload = IsInitialBlockDownload();\n \n             // throw all transactions though the signal-interface\n+\n+            } // MemPoolConflictRemovalTracker destroyed and conflict evictions are notified\n+\n+            // Transactions in the connnected block are notified\n             for (const auto& pair : connectTrace.blocksConnected) {\n                 assert(pair.second);\n                 const CBlock& block = *(pair.second);\n@@ -3597,7 +3642,7 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n             return error(\"VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n         // check level 1: verify block validity\n         if (nCheckLevel >= 1 && !CheckBlock(block, state, chainparams.GetConsensus()))\n-            return error(\"%s: *** found bad block at %d, hash=%s (%s)\\n\", __func__, \n+            return error(\"%s: *** found bad block at %d, hash=%s (%s)\\n\", __func__,\n                          pindex->nHeight, pindex->GetBlockHash().ToString(), FormatStateMessage(state));\n         // check level 2: verify undo validity\n         if (nCheckLevel >= 2 && pindex) {\n@@ -3768,7 +3813,7 @@ bool LoadBlockIndex(const CChainParams& chainparams)\n     return true;\n }\n \n-bool InitBlockIndex(const CChainParams& chainparams) \n+bool InitBlockIndex(const CChainParams& chainparams)\n {\n     LOCK(cs_main);\n "
      },
      {
        "sha": "a2e76f2036e1ddd16ecdb11b0ece62a1e73df032",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a1dc35ca5326e81cca718f5c28e804542fec6d3/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a1dc35ca5326e81cca718f5c28e804542fec6d3/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=4a1dc35ca5326e81cca718f5c28e804542fec6d3",
        "patch": "@@ -50,9 +50,16 @@ class CValidationInterface {\n struct CMainSignals {\n     /** Notifies listeners of updated block chain tip */\n     boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    /** A posInBlock value for SyncTransaction which indicates the transaction was conflicted, disconnected, or not in a block */\n+    /** A posInBlock value for SyncTransaction calls for tranactions not\n+     * included in connected blocks such as transactions removed from mempool,\n+     * accepted to mempool or appearing in disconnected blocks.*/\n     static const int SYNC_TRANSACTION_NOT_IN_BLOCK = -1;\n-    /** Notifies listeners of updated transaction data (transaction, and optionally the block it is found in. */\n+    /** Notifies listeners of updated transaction data (transaction, and\n+     * optionally the block it is found in). Called with block data when\n+     * transaction is included in a connected block, and without block data when\n+     * transaction was accepted to mempool, removed from mempool (only when\n+     * removal was due to conflict from connected block), or appeared in a\n+     * disconnected block.*/\n     boost::signals2::signal<void (const CTransaction &, const CBlockIndex *pindex, int posInBlock)> SyncTransaction;\n     /** Notifies listeners of an updated transaction without new data (for now: a coinbase potentially becoming visible). */\n     boost::signals2::signal<void (const uint256 &)> UpdatedTransaction;"
      },
      {
        "sha": "b4715622cf4f867b9f9163870ff2cacadd3f20a7",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a1dc35ca5326e81cca718f5c28e804542fec6d3/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a1dc35ca5326e81cca718f5c28e804542fec6d3/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=4a1dc35ca5326e81cca718f5c28e804542fec6d3",
        "patch": "@@ -1003,9 +1003,17 @@ bool CWallet::LoadToWallet(const CWalletTx& wtxIn)\n }\n \n /**\n- * Add a transaction to the wallet, or update it.\n- * pblock is optional, but should be provided if the transaction is known to be in a block.\n+ * Add a transaction to the wallet, or update it.  pIndex and posInBlock should\n+ * be set when the transaction was known to be included in a block.  When\n+ * posInBlock = SYNC_TRANSACTION_NOT_IN_BLOCK (-1) , then wallet state is not\n+ * updated in AddToWallet, but notifications happen and cached balances are\n+ * marked dirty.\n  * If fUpdate is true, existing transactions will be updated.\n+ * TODO: One exception to this is that the abandoned state is cleared under the\n+ * assumption that any further notification of a transaction that was considered\n+ * abandoned is an indication that it is not safe to be considered abandoned.\n+ * Abandoned state should probably be more carefuly tracked via different\n+ * posInBlock signals or by checking mempool presence when necessary.\n  */\n bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate)\n {"
      }
    ]
  },
  {
    "sha": "1ac878ace623d43993894b6de02fc83ef1df7093",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYWM4NzhhY2U2MjNkNDM5OTM4OTRiNmRlMDJmYzgzZWYxZGY3MDkz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-24T12:23:40Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-24T12:27:07Z"
      },
      "message": "Merge #9617: [Trivial] Update license year range to 2017\n\nbe31a2b [Trivial] Update license year range to 2017 (Lauda)",
      "tree": {
        "sha": "f61841a4a718ed22197295e3e77f23cd645f854a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f61841a4a718ed22197295e3e77f23cd645f854a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ac878ace623d43993894b6de02fc83ef1df7093",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYh0gcAAoJEHSBCwEjRsmmxxkIALcB2SJI84gIqGe2uw/rzOJN\n188e7/CShphn/LV1iSTsMsaaKZTSiOqe/q6dL0UK5IUK+e9KbXdijkAHwB2/U84o\nlM8nUkIRtXWq2CyZeZ5ApllsTV4kUm9JOkuBMK7TPfckw0CaJbK6UHia0GfzGW3D\nOry4M39jKOmNCo3F81h8AlBfkqOMnf1OBdHy6pQDOFzDjZ1+TwzAYcD7LIvNglN3\njpZlExaz4jdcPMuVfs+8m9Bm5kguc1fqc6otVnO0We0+c3UMfWoxbCO5CR3T+vaF\n4C+OUUuqn20nL3Mz35uuUo8VV4XdQRayUpoc1w04iMchpUxQGVNorYn8va7r3Js=\n=rYZv\n-----END PGP SIGNATURE-----",
        "payload": "tree f61841a4a718ed22197295e3e77f23cd645f854a\nparent 4a1dc35ca5326e81cca718f5c28e804542fec6d3\nparent be31a2b3635b893930c731a2929bb593dae9847e\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1485260620 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1485260827 +0100\n\nMerge #9617: [Trivial] Update license year range to 2017\n\nbe31a2b [Trivial] Update license year range to 2017 (Lauda)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ac878ace623d43993894b6de02fc83ef1df7093",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1ac878ace623d43993894b6de02fc83ef1df7093",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ac878ace623d43993894b6de02fc83ef1df7093/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4a1dc35ca5326e81cca718f5c28e804542fec6d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a1dc35ca5326e81cca718f5c28e804542fec6d3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4a1dc35ca5326e81cca718f5c28e804542fec6d3"
      },
      {
        "sha": "be31a2b3635b893930c731a2929bb593dae9847e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be31a2b3635b893930c731a2929bb593dae9847e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/be31a2b3635b893930c731a2929bb593dae9847e"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "c6203c0f76d2b49f73b273413b464cac6e1c71c5",
        "filename": "COPYING",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ac878ace623d43993894b6de02fc83ef1df7093/COPYING",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ac878ace623d43993894b6de02fc83ef1df7093/COPYING",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/COPYING?ref=1ac878ace623d43993894b6de02fc83ef1df7093",
        "patch": "@@ -1,6 +1,6 @@\n The MIT License (MIT)\n \n-Copyright (c) 2009-2016 The Bitcoin Core developers\n+Copyright (c) 2009-2017 The Bitcoin Core developers\n \n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal"
      },
      {
        "sha": "346695043d9d12dfdfe2f03e0b7e9fbe9c1559eb",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ac878ace623d43993894b6de02fc83ef1df7093/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ac878ace623d43993894b6de02fc83ef1df7093/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=1ac878ace623d43993894b6de02fc83ef1df7093",
        "patch": "@@ -5,7 +5,7 @@ define(_CLIENT_VERSION_MINOR, 13)\n define(_CLIENT_VERSION_REVISION, 99)\n define(_CLIENT_VERSION_BUILD, 0)\n define(_CLIENT_VERSION_IS_RELEASE, false)\n-define(_COPYRIGHT_YEAR, 2016)\n+define(_COPYRIGHT_YEAR, 2017)\n define(_COPYRIGHT_HOLDERS,[The %s developers])\n define(_COPYRIGHT_HOLDERS_SUBSTITUTION,[[Bitcoin Core]])\n AC_INIT([Bitcoin Core],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[https://github.com/bitcoin/bitcoin/issues],[bitcoin],[https://bitcoincore.org/])"
      },
      {
        "sha": "72d64ce62d2a7e588b495adeec2cdc497c0ead3a",
        "filename": "contrib/debian/copyright",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ac878ace623d43993894b6de02fc83ef1df7093/contrib/debian/copyright",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ac878ace623d43993894b6de02fc83ef1df7093/contrib/debian/copyright",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/copyright?ref=1ac878ace623d43993894b6de02fc83ef1df7093",
        "patch": "@@ -5,7 +5,7 @@ Upstream-Contact: Satoshi Nakamoto <satoshin@gmx.com>\n Source: https://github.com/bitcoin/bitcoin\n \n Files: *\n-Copyright: 2009-2016, Bitcoin Core Developers\n+Copyright: 2009-2017, Bitcoin Core Developers\n License: Expat\n Comment: The Bitcoin Core Developers encompasses the current developers listed on bitcoin.org,\n          as well as the numerous contributors to the project."
      },
      {
        "sha": "0b27bb1bdfccee570629caec8c2bb96bc952f5b9",
        "filename": "src/clientversion.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ac878ace623d43993894b6de02fc83ef1df7093/src/clientversion.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ac878ace623d43993894b6de02fc83ef1df7093/src/clientversion.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/clientversion.h?ref=1ac878ace623d43993894b6de02fc83ef1df7093",
        "patch": "@@ -26,7 +26,7 @@\n  * Copyright year (2009-this)\n  * Todo: update this when changing our copyright comments in the source\n  */\n-#define COPYRIGHT_YEAR 2016\n+#define COPYRIGHT_YEAR 2017\n \n #endif //HAVE_CONFIG_H\n "
      }
    ]
  },
  {
    "sha": "ac9a84679a46250c696301bee2d66e75ddeb1223",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYzlhODQ2NzlhNDYyNTBjNjk2MzAxYmVlMmQ2NmU3NWRkZWIxMjIz",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-01-24T17:08:07Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-01-24T17:08:07Z"
      },
      "message": "[Trivial] fix logging typo in FlushStateToDisk()",
      "tree": {
        "sha": "7b64e1955101bd81b875f6fa26b77d155d5814e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7b64e1955101bd81b875f6fa26b77d155d5814e6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ac9a84679a46250c696301bee2d66e75ddeb1223",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac9a84679a46250c696301bee2d66e75ddeb1223",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ac9a84679a46250c696301bee2d66e75ddeb1223",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac9a84679a46250c696301bee2d66e75ddeb1223/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1ac878ace623d43993894b6de02fc83ef1df7093",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ac878ace623d43993894b6de02fc83ef1df7093",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1ac878ace623d43993894b6de02fc83ef1df7093"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e6bc2288d20e411ba4377ea88aaa36f27b915b67",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac9a84679a46250c696301bee2d66e75ddeb1223/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac9a84679a46250c696301bee2d66e75ddeb1223/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=ac9a84679a46250c696301bee2d66e75ddeb1223",
        "patch": "@@ -2061,7 +2061,7 @@ bool static FlushStateToDisk(CValidationState &state, FlushStateMode mode, int n\n                 setDirtyBlockIndex.erase(it++);\n             }\n             if (!pblocktree->WriteBatchSync(vFiles, nLastBlockFile, vBlocks)) {\n-                return AbortNode(state, \"Files to write to block index database\");\n+                return AbortNode(state, \"Failed to write to block index database\");\n             }\n         }\n         // Finally remove any pruned files"
      }
    ]
  },
  {
    "sha": "b68f898efa095dce03533be8ac015c1faef23053",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNjhmODk4ZWZhMDk1ZGNlMDM1MzNiZThhYzAxNWMxZmFlZjIzMDUz",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-24T20:16:27Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-24T20:16:55Z"
      },
      "message": "Merge #9624: [Trivial] fix logging typo in FlushStateToDisk()\n\nac9a846 [Trivial] fix logging typo in FlushStateToDisk() (John Newbery)",
      "tree": {
        "sha": "7b64e1955101bd81b875f6fa26b77d155d5814e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7b64e1955101bd81b875f6fa26b77d155d5814e6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b68f898efa095dce03533be8ac015c1faef23053",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAliHtjcACgkQKdS8tkFv\nU+zMvw//bvbpDt8wuJm8VkW9uNVwWWs+csdglPjjratI9d0T1eiLSBBcJGswtxTu\nfc4IzcUJjxpHCbOxJ+ddku5Uui/nAMHrSMhJLeld0UKthmKBy5dhnlLMomije8Wk\nVa+NYN1l0JIMmCjoYv56nEhdTnGEsZkucfKk67xmwEjdWADzRRCyNjCvQ1BNP/ND\nCiU/0evy+bDbbzgMXhT1z1FgRykW3Cs6HrGizwEf2e/TR0J6fhYpHMGrjgf8V6Nr\niuPEZ0Z9lN/+lgeNftZg65k6fZTJiCP0EMQ0EDkVZLpnlGoXz8S0eAiQstSYyyxK\nMh1lMilfF7G+C3BUSHBg2itYoeFvXvSKC1cxi6bXuxsZiml+ZCUjekW3isOy2T8u\n+roxT7UeGitG3xGS6AkOm41TlD2p4XE1xwn37/VUmNy1tRohqc7UClCHEkAXbcYq\n36pSXHgvhjJ3bm+HPJSIAWYRVj/SEVKQP4r6+JT6cS8CH894t5R+II6mSxdcEEbp\ncVV1ZGq7I/llDggsR+pWH4AiGdpTAEuO/88iSSkOpNGXoSNzxO12NGUM5J/+FcuW\nkO4TYuxGqBpUGApmqVBELM2LYNvyB6H4cBrHXiAVWkFKF/aGT+T/F4tbP1yfSTK+\nO3oJoRPDPdlu9zsMW8/Xa6WDQBwhPk76mtt6q9vi0EEvLQ30q7E=\n=YP/T\n-----END PGP SIGNATURE-----",
        "payload": "tree 7b64e1955101bd81b875f6fa26b77d155d5814e6\nparent 1ac878ace623d43993894b6de02fc83ef1df7093\nparent ac9a84679a46250c696301bee2d66e75ddeb1223\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1485288987 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1485289015 +0100\n\nMerge #9624: [Trivial] fix logging typo in FlushStateToDisk()\n\nac9a846 [Trivial] fix logging typo in FlushStateToDisk() (John Newbery)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b68f898efa095dce03533be8ac015c1faef23053",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b68f898efa095dce03533be8ac015c1faef23053",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b68f898efa095dce03533be8ac015c1faef23053/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1ac878ace623d43993894b6de02fc83ef1df7093",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ac878ace623d43993894b6de02fc83ef1df7093",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1ac878ace623d43993894b6de02fc83ef1df7093"
      },
      {
        "sha": "ac9a84679a46250c696301bee2d66e75ddeb1223",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac9a84679a46250c696301bee2d66e75ddeb1223",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ac9a84679a46250c696301bee2d66e75ddeb1223"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e6bc2288d20e411ba4377ea88aaa36f27b915b67",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b68f898efa095dce03533be8ac015c1faef23053/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b68f898efa095dce03533be8ac015c1faef23053/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=b68f898efa095dce03533be8ac015c1faef23053",
        "patch": "@@ -2061,7 +2061,7 @@ bool static FlushStateToDisk(CValidationState &state, FlushStateMode mode, int n\n                 setDirtyBlockIndex.erase(it++);\n             }\n             if (!pblocktree->WriteBatchSync(vFiles, nLastBlockFile, vBlocks)) {\n-                return AbortNode(state, \"Files to write to block index database\");\n+                return AbortNode(state, \"Failed to write to block index database\");\n             }\n         }\n         // Finally remove any pruned files"
      }
    ]
  },
  {
    "sha": "5be01906e59d484ec997b594e39bab528845bb78",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YmUwMTkwNmU1OWQ0ODRlYzk5N2I1OTRlMzliYWI1Mjg4NDViYjc4",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-24T21:49:15Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-24T22:01:43Z"
      },
      "message": "Delete some unused (and broken) functions in CConnman",
      "tree": {
        "sha": "6173b2d27f4df59c88ed01d22396b2f1d74c286f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6173b2d27f4df59c88ed01d22396b2f1d74c286f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5be01906e59d484ec997b594e39bab528845bb78",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5be01906e59d484ec997b594e39bab528845bb78",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5be01906e59d484ec997b594e39bab528845bb78",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5be01906e59d484ec997b594e39bab528845bb78/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b68f898efa095dce03533be8ac015c1faef23053",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b68f898efa095dce03533be8ac015c1faef23053",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b68f898efa095dce03533be8ac015c1faef23053"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 0,
      "deletions": 32
    },
    "files": [
      {
        "sha": "4e296a31141e3329f281621daa89f7442ff10227",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 28,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5be01906e59d484ec997b594e39bab528845bb78/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5be01906e59d484ec997b594e39bab528845bb78/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=5be01906e59d484ec997b594e39bab528845bb78",
        "patch": "@@ -2371,24 +2371,6 @@ void CConnman::GetNodeStats(std::vector<CNodeStats>& vstats)\n     }\n }\n \n-bool CConnman::DisconnectAddress(const CNetAddr& netAddr)\n-{\n-    if (CNode* pnode = FindNode(netAddr)) {\n-        pnode->fDisconnect = true;\n-        return true;\n-    }\n-    return false;\n-}\n-\n-bool CConnman::DisconnectSubnet(const CSubNet& subNet)\n-{\n-    if (CNode* pnode = FindNode(subNet)) {\n-        pnode->fDisconnect = true;\n-        return true;\n-    }\n-    return false;\n-}\n-\n bool CConnman::DisconnectNode(const std::string& strNode)\n {\n     if (CNode* pnode = FindNode(strNode)) {\n@@ -2409,16 +2391,6 @@ bool CConnman::DisconnectNode(NodeId id)\n     return false;\n }\n \n-void CConnman::RelayTransaction(const CTransaction& tx)\n-{\n-    CInv inv(MSG_TX, tx.GetHash());\n-    LOCK(cs_vNodes);\n-    BOOST_FOREACH(CNode* pnode, vNodes)\n-    {\n-        pnode->PushInventory(inv);\n-    }\n-}\n-\n void CConnman::RecordBytesRecv(uint64_t bytes)\n {\n     LOCK(cs_totalBytesRecv);"
      },
      {
        "sha": "0b8efcc882ad50be9422084adc9963df9d8eade1",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5be01906e59d484ec997b594e39bab528845bb78/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5be01906e59d484ec997b594e39bab528845bb78/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=5be01906e59d484ec997b594e39bab528845bb78",
        "patch": "@@ -243,8 +243,6 @@ class CConnman\n         post();\n     };\n \n-    void RelayTransaction(const CTransaction& tx);\n-\n     // Addrman functions\n     size_t GetAddressCount() const;\n     void SetServices(const CService &addr, ServiceFlags nServices);\n@@ -286,10 +284,8 @@ class CConnman\n \n     size_t GetNodeCount(NumConnections num);\n     void GetNodeStats(std::vector<CNodeStats>& vstats);\n-    bool DisconnectAddress(const CNetAddr& addr);\n     bool DisconnectNode(const std::string& node);\n     bool DisconnectNode(NodeId id);\n-    bool DisconnectSubnet(const CSubNet& subnet);\n \n     unsigned int GetSendBufferSize() const;\n "
      }
    ]
  },
  {
    "sha": "3c37dc40d39e1a1e56b6b0d3e660626a78656d4f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYzM3ZGM0MGQzOWUxYTFlNTZiNmIwZDNlNjYwNjI2YTc4NjU2ZDRm",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-24T21:50:27Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-24T22:01:45Z"
      },
      "message": "Ensure cs_vNodes is held when using the return value from FindNode",
      "tree": {
        "sha": "82ed28ec4782f4fd063a4462781dde83479ef744",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/82ed28ec4782f4fd063a4462781dde83479ef744"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c37dc40d39e1a1e56b6b0d3e660626a78656d4f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c37dc40d39e1a1e56b6b0d3e660626a78656d4f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3c37dc40d39e1a1e56b6b0d3e660626a78656d4f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c37dc40d39e1a1e56b6b0d3e660626a78656d4f/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5be01906e59d484ec997b594e39bab528845bb78",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5be01906e59d484ec997b594e39bab528845bb78",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5be01906e59d484ec997b594e39bab528845bb78"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 4,
      "deletions": 5
    },
    "files": [
      {
        "sha": "7489b3f32be0dfeeea9f2b29f22598588ca3d743",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c37dc40d39e1a1e56b6b0d3e660626a78656d4f/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c37dc40d39e1a1e56b6b0d3e660626a78656d4f/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=3c37dc40d39e1a1e56b6b0d3e660626a78656d4f",
        "patch": "@@ -369,15 +369,13 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n             // In that case, drop the connection that was just created, and return the existing CNode instead.\n             // Also store the name we used to connect in that CNode, so that future FindNode() calls to that\n             // name catch this early.\n+            LOCK(cs_vNodes);\n             CNode* pnode = FindNode((CService)addrConnect);\n             if (pnode)\n             {\n                 pnode->AddRef();\n-                {\n-                    LOCK(cs_vNodes);\n-                    if (pnode->addrName.empty()) {\n-                        pnode->addrName = std::string(pszDest);\n-                    }\n+                if (pnode->addrName.empty()) {\n+                    pnode->addrName = std::string(pszDest);\n                 }\n                 CloseSocket(hSocket);\n                 return pnode;\n@@ -2373,6 +2371,7 @@ void CConnman::GetNodeStats(std::vector<CNodeStats>& vstats)\n \n bool CConnman::DisconnectNode(const std::string& strNode)\n {\n+    LOCK(cs_vNodes);\n     if (CNode* pnode = FindNode(strNode)) {\n         pnode->fDisconnect = true;\n         return true;"
      }
    ]
  },
  {
    "sha": "29fb311858f098e79ed5334a128f2b0c8c88b235",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOWZiMzExODU4ZjA5OGU3OWVkNTMzNGExMjhmMmIwYzhjODhiMjM1",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-01-24T17:46:01Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-01-25T01:28:00Z"
      },
      "message": "Increase minimum debug.log size to 10MB after shrink.",
      "tree": {
        "sha": "36c7743b6c30b57f74fcf39b5ad08ab1c6d39327",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/36c7743b6c30b57f74fcf39b5ad08ab1c6d39327"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/29fb311858f098e79ed5334a128f2b0c8c88b235",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29fb311858f098e79ed5334a128f2b0c8c88b235",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/29fb311858f098e79ed5334a128f2b0c8c88b235",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29fb311858f098e79ed5334a128f2b0c8c88b235/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1ac878ace623d43993894b6de02fc83ef1df7093",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ac878ace623d43993894b6de02fc83ef1df7093",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1ac878ace623d43993894b6de02fc83ef1df7093"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 10,
      "deletions": 3
    },
    "files": [
      {
        "sha": "c3ceb22953b645c92e57051e2b1c3b4ca510e8fe",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29fb311858f098e79ed5334a128f2b0c8c88b235/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29fb311858f098e79ed5334a128f2b0c8c88b235/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=29fb311858f098e79ed5334a128f2b0c8c88b235",
        "patch": "@@ -1149,8 +1149,11 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n #ifndef WIN32\n     CreatePidFile(GetPidFile(), getpid());\n #endif\n-    if (GetBoolArg(\"-shrinkdebugfile\", !fDebug))\n+    if (GetBoolArg(\"-shrinkdebugfile\", !fDebug)) {\n+        // Do this first since it both loads a bunch of debug.log into memory,\n+        // and because this needs to happen before any other debug.log printing\n         ShrinkDebugFile();\n+    }\n \n     if (fPrintToDebugLog)\n         OpenDebugLog();"
      },
      {
        "sha": "ba157625d8055a1f934bb2e691fad3f5ab976ad6",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29fb311858f098e79ed5334a128f2b0c8c88b235/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29fb311858f098e79ed5334a128f2b0c8c88b235/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=29fb311858f098e79ed5334a128f2b0c8c88b235",
        "patch": "@@ -723,13 +723,17 @@ void AllocateFileRange(FILE *file, unsigned int offset, unsigned int length) {\n \n void ShrinkDebugFile()\n {\n+    // Amount of debug.log to save at end when shrinking (must fit in memory)\n+    constexpr size_t RECENT_DEBUG_HISTORY_SIZE = 10 * 1000000;\n     // Scroll debug.log if it's getting too big\n     boost::filesystem::path pathLog = GetDataDir() / \"debug.log\";\n     FILE* file = fopen(pathLog.string().c_str(), \"r\");\n-    if (file && boost::filesystem::file_size(pathLog) > 10 * 1000000)\n+    // If debug.log file is more than 10% bigger the RECENT_DEBUG_HISTORY_SIZE\n+    // trim it down by saving only the last RECENT_DEBUG_HISTORY_SIZE bytes\n+    if (file && boost::filesystem::file_size(pathLog) > 11 * (RECENT_DEBUG_HISTORY_SIZE / 10))\n     {\n         // Restart the file with some of the end\n-        std::vector <char> vch(200000,0);\n+        std::vector<char> vch(RECENT_DEBUG_HISTORY_SIZE, 0);\n         fseek(file, -((long)vch.size()), SEEK_END);\n         int nBytes = fread(vch.data(), 1, vch.size(), file);\n         fclose(file);"
      }
    ]
  },
  {
    "sha": "99464bc38e9575ff47f8e33223b252dcea2055e3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTQ2NGJjMzhlOTU3NWZmNDdmOGUzMzIyM2IyNTJkY2VhMjA1NWUz",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-01-19T18:01:18Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-01-25T14:48:14Z"
      },
      "message": "net: Consistently use GetTimeMicros() for inactivity checks\n\nThe use of mocktime in test logic means that comparisons between\nGetTime() and GetTimeMicros()/1000000 are unreliable since the former\ncan use mocktime values while the latter always gets the system clock;\nthis changes the networking code's inactivity checks to consistently\nuse the system clock for inactivity comparisons.\n\nAlso remove some hacks from setmocktime() that are no longer needed,\nnow that we're using the system clock for nLastSend and nLastRecv.",
      "tree": {
        "sha": "8b01122ab862afac1470e86d0a780780329250d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b01122ab862afac1470e86d0a780780329250d7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/99464bc38e9575ff47f8e33223b252dcea2055e3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99464bc38e9575ff47f8e33223b252dcea2055e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/99464bc38e9575ff47f8e33223b252dcea2055e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99464bc38e9575ff47f8e33223b252dcea2055e3/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "054d664215ca8d5f17d8aadbfc5b78a8dcd5115c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/054d664215ca8d5f17d8aadbfc5b78a8dcd5115c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/054d664215ca8d5f17d8aadbfc5b78a8dcd5115c"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 28,
      "deletions": 18
    },
    "files": [
      {
        "sha": "97480df13145ff118575618edd9b4353482e6f67",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99464bc38e9575ff47f8e33223b252dcea2055e3/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99464bc38e9575ff47f8e33223b252dcea2055e3/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=99464bc38e9575ff47f8e33223b252dcea2055e3",
        "patch": "@@ -391,7 +391,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n         uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n         CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, pszDest ? pszDest : \"\", false);\n         pnode->nServicesExpected = ServiceFlags(addrConnect.nServices & nRelevantServices);\n-        pnode->nTimeConnected = GetTime();\n+        pnode->nTimeConnected = GetSystemTimeInSeconds();\n         pnode->AddRef();\n         GetNodeSignals().InitializeNode(pnode, *this);\n         {\n@@ -771,7 +771,7 @@ size_t CConnman::SocketSendData(CNode *pnode)\n         assert(data.size() > pnode->nSendOffset);\n         int nBytes = send(pnode->hSocket, reinterpret_cast<const char*>(data.data()) + pnode->nSendOffset, data.size() - pnode->nSendOffset, MSG_NOSIGNAL | MSG_DONTWAIT);\n         if (nBytes > 0) {\n-            pnode->nLastSend = GetTime();\n+            pnode->nLastSend = GetSystemTimeInSeconds();\n             pnode->nSendBytes += nBytes;\n             pnode->nSendOffset += nBytes;\n             nSentSize += nBytes;\n@@ -1284,7 +1284,7 @@ void CConnman::ThreadSocketHandler()\n             //\n             // Inactivity checking\n             //\n-            int64_t nTime = GetTime();\n+            int64_t nTime = GetSystemTimeInSeconds();\n             if (nTime - pnode->nTimeConnected > 60)\n             {\n                 if (pnode->nLastRecv == 0 || pnode->nLastSend == 0)\n@@ -2570,7 +2570,7 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     nLastRecv = 0;\n     nSendBytes = 0;\n     nRecvBytes = 0;\n-    nTimeConnected = GetTime();\n+    nTimeConnected = GetSystemTimeInSeconds();\n     nTimeOffset = 0;\n     addrName = addrNameIn == \"\" ? addr.ToStringIPPort() : addrNameIn;\n     nVersion = 0;"
      },
      {
        "sha": "60406c20597772b6b4de88c893a3a6fd7ef05fbd",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99464bc38e9575ff47f8e33223b252dcea2055e3/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99464bc38e9575ff47f8e33223b252dcea2055e3/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=99464bc38e9575ff47f8e33223b252dcea2055e3",
        "patch": "@@ -1023,11 +1023,11 @@ void RPCConsole::updateNodeDetail(const CNodeCombinedStats *stats)\n         peerAddrDetails += \"<br />\" + tr(\"via %1\").arg(QString::fromStdString(stats->nodeStats.addrLocal));\n     ui->peerHeading->setText(peerAddrDetails);\n     ui->peerServices->setText(GUIUtil::formatServicesStr(stats->nodeStats.nServices));\n-    ui->peerLastSend->setText(stats->nodeStats.nLastSend ? GUIUtil::formatDurationStr(GetTime() - stats->nodeStats.nLastSend) : tr(\"never\"));\n-    ui->peerLastRecv->setText(stats->nodeStats.nLastRecv ? GUIUtil::formatDurationStr(GetTime() - stats->nodeStats.nLastRecv) : tr(\"never\"));\n+    ui->peerLastSend->setText(stats->nodeStats.nLastSend ? GUIUtil::formatDurationStr(GetSystemTimeInSeconds() - stats->nodeStats.nLastSend) : tr(\"never\"));\n+    ui->peerLastRecv->setText(stats->nodeStats.nLastRecv ? GUIUtil::formatDurationStr(GetSystemTimeInSeconds() - stats->nodeStats.nLastRecv) : tr(\"never\"));\n     ui->peerBytesSent->setText(FormatBytes(stats->nodeStats.nSendBytes));\n     ui->peerBytesRecv->setText(FormatBytes(stats->nodeStats.nRecvBytes));\n-    ui->peerConnTime->setText(GUIUtil::formatDurationStr(GetTime() - stats->nodeStats.nTimeConnected));\n+    ui->peerConnTime->setText(GUIUtil::formatDurationStr(GetSystemTimeInSeconds() - stats->nodeStats.nTimeConnected));\n     ui->peerPingTime->setText(GUIUtil::formatPingTime(stats->nodeStats.dPingTime));\n     ui->peerPingWait->setText(GUIUtil::formatPingTime(stats->nodeStats.dPingWait));\n     ui->peerMinPing->setText(GUIUtil::formatPingTime(stats->nodeStats.dMinPing));"
      },
      {
        "sha": "480c45516c55e1424f67d9a05a66e50a37c6ad4e",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 11,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99464bc38e9575ff47f8e33223b252dcea2055e3/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99464bc38e9575ff47f8e33223b252dcea2055e3/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=99464bc38e9575ff47f8e33223b252dcea2055e3",
        "patch": "@@ -431,22 +431,16 @@ UniValue setmocktime(const JSONRPCRequest& request)\n     if (!Params().MineBlocksOnDemand())\n         throw runtime_error(\"setmocktime for regression testing (-regtest mode) only\");\n \n-    // cs_vNodes is locked and node send/receive times are updated\n-    // atomically with the time change to prevent peers from being\n-    // disconnected because we think we haven't communicated with them\n-    // in a long time.\n+    // For now, don't change mocktime if we're in the middle of validation, as\n+    // this could have an effect on mempool time-based eviction, as well as\n+    // IsCurrentForFeeEstimation() and IsInitialBlockDownload().\n+    // TODO: figure out the right way to synchronize around mocktime, and\n+    // ensure all callsites of GetTime() are accessing this safely.\n     LOCK(cs_main);\n \n     RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM));\n     SetMockTime(request.params[0].get_int64());\n \n-    uint64_t t = GetTime();\n-    if(g_connman) {\n-        g_connman->ForEachNode([t](CNode* pnode) {\n-            pnode->nLastSend = pnode->nLastRecv = t;\n-        });\n-    }\n-\n     return NullUniValue;\n }\n "
      },
      {
        "sha": "87a25866e9a5d32bf0b60006cd7dacfb54adbb6e",
        "filename": "src/utiltime.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99464bc38e9575ff47f8e33223b252dcea2055e3/src/utiltime.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99464bc38e9575ff47f8e33223b252dcea2055e3/src/utiltime.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utiltime.cpp?ref=99464bc38e9575ff47f8e33223b252dcea2055e3",
        "patch": "@@ -46,6 +46,11 @@ int64_t GetTimeMicros()\n     return now;\n }\n \n+int64_t GetSystemTimeInSeconds()\n+{\n+    return GetTimeMicros()/1000000;\n+}\n+\n /** Return a time useful for the debug log */\n int64_t GetLogTimeMicros()\n {"
      },
      {
        "sha": "05c6790495098dcdaaaf5b2440dbc750def49876",
        "filename": "src/utiltime.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99464bc38e9575ff47f8e33223b252dcea2055e3/src/utiltime.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99464bc38e9575ff47f8e33223b252dcea2055e3/src/utiltime.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utiltime.h?ref=99464bc38e9575ff47f8e33223b252dcea2055e3",
        "patch": "@@ -9,9 +9,20 @@\n #include <stdint.h>\n #include <string>\n \n+/**\n+ * GetTimeMicros() and GetTimeMillis() both return the system time, but in\n+ * different units. GetTime() returns the sytem time in seconds, but also\n+ * supports mocktime, where the time can be specified by the user, eg for\n+ * testing (eg with the setmocktime rpc, or -mocktime argument).\n+ *\n+ * TODO: Rework these functions to be type-safe (so that we don't inadvertently\n+ * compare numbers with different units, or compare a mocktime to system time).\n+ */\n+\n int64_t GetTime();\n int64_t GetTimeMillis();\n int64_t GetTimeMicros();\n+int64_t GetSystemTimeInSeconds(); // Like GetTime(), but not mockable\n int64_t GetLogTimeMicros();\n void SetMockTime(int64_t nMockTimeIn);\n void MilliSleep(int64_t n);"
      }
    ]
  },
  {
    "sha": "2f10f06196ace64c549172f9ab081d28115228d5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZjEwZjA2MTk2YWNlNjRjNTQ5MTcyZjlhYjA4MWQyODExNTIyOGQ1",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2017-01-25T14:30:38Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2017-01-25T15:21:37Z"
      },
      "message": "qa: Increase a sync_blocks timeout in pruning.py",
      "tree": {
        "sha": "c45c9bf9835750d6095898b01fe63935fe9a8ac5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c45c9bf9835750d6095898b01fe63935fe9a8ac5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2f10f06196ace64c549172f9ab081d28115228d5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f10f06196ace64c549172f9ab081d28115228d5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2f10f06196ace64c549172f9ab081d28115228d5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f10f06196ace64c549172f9ab081d28115228d5/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9ec1330b455c1ab2eb6b89f8a2ab885677d4ae8a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ec1330b455c1ab2eb6b89f8a2ab885677d4ae8a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9ec1330b455c1ab2eb6b89f8a2ab885677d4ae8a"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e740127d37f6755fa992f4d313a8b68bc2bca832",
        "filename": "qa/rpc-tests/pruning.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f10f06196ace64c549172f9ab081d28115228d5/qa/rpc-tests/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f10f06196ace64c549172f9ab081d28115228d5/qa/rpc-tests/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/pruning.py?ref=2f10f06196ace64c549172f9ab081d28115228d5",
        "patch": "@@ -314,7 +314,7 @@ def wallet_test(self):\n         print (\"Syncing node 5 to test wallet\")\n         connect_nodes(self.nodes[0], 5)\n         nds = [self.nodes[0], self.nodes[5]]\n-        sync_blocks(nds)\n+        sync_blocks(nds, wait=5, timeout=300)\n         try:\n             stop_node(self.nodes[5],5) #stop and start to trigger rescan\n             start_node(5, self.options.tmpdir, [\"-debug=1\",\"-prune=550\"])"
      }
    ]
  },
  {
    "sha": "b9d95bd9a1b3e8613373ecd228805518f2852985",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOWQ5NWJkOWExYjNlODYxMzM3M2VjZDIyODgwNTUxOGYyODUyOTg1",
    "commit": {
      "author": {
        "name": "Douglas Roark",
        "email": "doug@bloq.com",
        "date": "2017-01-19T06:22:46Z"
      },
      "committer": {
        "name": "Douglas Roark",
        "email": "doug@bloq.com",
        "date": "2017-01-25T21:12:03Z"
      },
      "message": "Fix various minor linearization script issues\n\n- The last-timestamp-encountered variable wasn\u2019t being used properly. Rewrite code to properly allow for new blockchain files to be written when split by month.\n- Properly set a blockchain file\u2019s access and modify times.\n- Add a \u201cdebug output\u201d option to quiet certain output that might not always be desirable.\n- Update the README.",
      "tree": {
        "sha": "f6de99345ffce71288c6347bde1ba1879bb290dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f6de99345ffce71288c6347bde1ba1879bb290dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b9d95bd9a1b3e8613373ecd228805518f2852985",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9d95bd9a1b3e8613373ecd228805518f2852985",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b9d95bd9a1b3e8613373ecd228805518f2852985",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9d95bd9a1b3e8613373ecd228805518f2852985/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "b68f898efa095dce03533be8ac015c1faef23053",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b68f898efa095dce03533be8ac015c1faef23053",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b68f898efa095dce03533be8ac015c1faef23053"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 41,
      "deletions": 18
    },
    "files": [
      {
        "sha": "0971e7816b48f62a3881368f7e5f0503b692a3d7",
        "filename": "contrib/linearize/README.md",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9d95bd9a1b3e8613373ecd228805518f2852985/contrib/linearize/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9d95bd9a1b3e8613373ecd228805518f2852985/contrib/linearize/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/README.md?ref=b9d95bd9a1b3e8613373ecd228805518f2852985",
        "patch": "@@ -32,15 +32,21 @@ Required configuration file settings:\n * `output`: Output directory for linearized `blocks/blkNNNNN.dat` output.\n \n Optional config file setting for linearize-data:\n-* `file_timestamp`: Set each file's last-modified time to that of the most\n-recent block in that file.\n+* `debug_output`: Some printouts may not always be desired. If true, such output\n+will be printed.\n+* `file_timestamp`: Set each file's last-accessed and last-modified times,\n+respectively, to the current time and to the timestamp of the most recent block\n+written to the script's blockchain.\n * `genesis`: The hash of the genesis block in the blockchain.\n * `input`: bitcoind blocks/ directory containing blkNNNNN.dat\n * `hashlist`: text file containing list of block hashes created by\n linearize-hashes.py.\n * `max_out_sz`: Maximum size for files created by the `output_file` option.\n (Default: `1000*1000*1000 bytes`)\n * `netmagic`: Network magic number.\n+* `out_of_order_cache_sz`: If out-of-order blocks are being read, the block can\n+be written to a cache so that the blockchain doesn't have to be seeked again.\n+This option specifies the cache size. (Default: `100*1000*1000 bytes`)\n * `rev_hash_bytes`: If true, the block hash list written by linearize-hashes.py\n will be byte-reversed when read by linearize-data.py. See the linearize-hashes\n entry for more information."
      },
      {
        "sha": "db53dc0ef69ebd4b3842be8ce307babc44a9f04b",
        "filename": "contrib/linearize/example-linearize.cfg",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9d95bd9a1b3e8613373ecd228805518f2852985/contrib/linearize/example-linearize.cfg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9d95bd9a1b3e8613373ecd228805518f2852985/contrib/linearize/example-linearize.cfg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/example-linearize.cfg?ref=b9d95bd9a1b3e8613373ecd228805518f2852985",
        "patch": "@@ -1,4 +1,3 @@\n-\n # bitcoind RPC settings (linearize-hashes)\n rpcuser=someuser\n rpcpassword=somepassword\n@@ -21,6 +20,9 @@ input=/home/example/.bitcoin/blocks\n #genesis=000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943\n #input=/home/example/.bitcoin/testnet3/blocks\n \n+# \"output\" option causes blockchain files to be written to the given location,\n+# with \"output_file\" ignored. If not used, \"output_file\" is used instead.\n+# output=/home/example/blockchain_directory\n output_file=/home/example/Downloads/bootstrap.dat\n hashlist=hashlist.txt\n \n@@ -29,3 +31,12 @@ out_of_order_cache_sz = 100000000\n \n # Do we want the reverse the hash bytes coming from getblockhash?\n rev_hash_bytes = False\n+\n+# On a new month, do we want to set the access and modify times of the new\n+# blockchain file?\n+file_timestamp = 0\n+# Do we want to split the blockchain files given a new month or specific height?\n+split_timestamp = 0\n+\n+# Do we want debug printouts?\n+debug_output = False"
      },
      {
        "sha": "afcec2b60ae4f5d4ceae805bc076dbf39c982c62",
        "filename": "contrib/linearize/linearize-data.py",
        "status": "modified",
        "additions": 21,
        "deletions": 15,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9d95bd9a1b3e8613373ecd228805518f2852985/contrib/linearize/linearize-data.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9d95bd9a1b3e8613373ecd228805518f2852985/contrib/linearize/linearize-data.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/linearize-data.py?ref=b9d95bd9a1b3e8613373ecd228805518f2852985",
        "patch": "@@ -134,32 +134,32 @@ def writeBlock(self, inhdr, blk_hdr, rawblock):\n \t\tif not self.fileOutput and ((self.outsz + blockSizeOnDisk) > self.maxOutSz):\n \t\t\tself.outF.close()\n \t\t\tif self.setFileTime:\n-\t\t\t\tos.utime(outFname, (int(time.time()), highTS))\n+\t\t\t\tos.utime(self.outFname, (int(time.time()), self.highTS))\n \t\t\tself.outF = None\n \t\t\tself.outFname = None\n \t\t\tself.outFn = self.outFn + 1\n \t\t\tself.outsz = 0\n \n \t\t(blkDate, blkTS) = get_blk_dt(blk_hdr)\n \t\tif self.timestampSplit and (blkDate > self.lastDate):\n-\t\t\tprint(\"New month \" + blkDate.strftime(\"%Y-%m\") + \" @ \" + hash_str)\n-\t\t\tlastDate = blkDate\n-\t\t\tif outF:\n-\t\t\t\toutF.close()\n-\t\t\t\tif setFileTime:\n-\t\t\t\t\tos.utime(outFname, (int(time.time()), highTS))\n+\t\t\tprint(\"New month \" + blkDate.strftime(\"%Y-%m\") + \" @ \" + self.hash_str)\n+\t\t\tself.lastDate = blkDate\n+\t\t\tif self.outF:\n+\t\t\t\tself.outF.close()\n+\t\t\t\tif self.setFileTime:\n+\t\t\t\t\tos.utime(self.outFname, (int(time.time()), self.highTS))\n \t\t\t\tself.outF = None\n \t\t\t\tself.outFname = None\n \t\t\t\tself.outFn = self.outFn + 1\n \t\t\t\tself.outsz = 0\n \n \t\tif not self.outF:\n \t\t\tif self.fileOutput:\n-\t\t\t\toutFname = self.settings['output_file']\n+\t\t\t\tself.outFname = self.settings['output_file']\n \t\t\telse:\n-\t\t\t\toutFname = os.path.join(self.settings['output'], \"blk%05d.dat\" % self.outFn)\n-\t\t\tprint(\"Output file \" + outFname)\n-\t\t\tself.outF = open(outFname, \"wb\")\n+\t\t\t\tself.outFname = os.path.join(self.settings['output'], \"blk%05d.dat\" % self.outFn)\n+\t\t\tprint(\"Output file \" + self.outFname)\n+\t\t\tself.outF = open(self.outFname, \"wb\")\n \n \t\tself.outF.write(inhdr)\n \t\tself.outF.write(blk_hdr)\n@@ -223,13 +223,16 @@ def run(self):\n \t\t\tblk_hdr = self.inF.read(80)\n \t\t\tinExtent = BlockExtent(self.inFn, self.inF.tell(), inhdr, blk_hdr, inLen)\n \n-\t\t\thash_str = calc_hash_str(blk_hdr)\n-\t\t\tif not hash_str in blkmap:\n-\t\t\t\tprint(\"Skipping unknown block \" + hash_str)\n+\t\t\tself.hash_str = calc_hash_str(blk_hdr)\n+\t\t\tif not self.hash_str in blkmap:\n+\t\t\t\t# Because blocks can be written to files out-of-order as of 0.10, the script\n+\t\t\t\t# may encounter blocks it doesn't know about. Treat as debug output.\n+\t\t\t\tif settings['debug_output'] == 'true':\n+\t\t\t\t\tprint(\"Skipping unknown block \" + self.hash_str)\n \t\t\t\tself.inF.seek(inLen, os.SEEK_CUR)\n \t\t\t\tcontinue\n \n-\t\t\tblkHeight = self.blkmap[hash_str]\n+\t\t\tblkHeight = self.blkmap[self.hash_str]\n \t\t\tself.blkCountIn += 1\n \n \t\t\tif self.blkCountOut == blkHeight:\n@@ -295,12 +298,15 @@ def run(self):\n \t\tsettings['max_out_sz'] = 1000 * 1000 * 1000\n \tif 'out_of_order_cache_sz' not in settings:\n \t\tsettings['out_of_order_cache_sz'] = 100 * 1000 * 1000\n+\tif 'debug_output' not in settings:\n+\t\tsettings['debug_output'] = 'false'\n \n \tsettings['max_out_sz'] = int(settings['max_out_sz'])\n \tsettings['split_timestamp'] = int(settings['split_timestamp'])\n \tsettings['file_timestamp'] = int(settings['file_timestamp'])\n \tsettings['netmagic'] = unhexlify(settings['netmagic'].encode('utf-8'))\n \tsettings['out_of_order_cache_sz'] = int(settings['out_of_order_cache_sz'])\n+\tsettings['debug_output'] = settings['debug_output'].lower()\n \n \tif 'output_file' not in settings and 'output' not in settings:\n \t\tprint(\"Missing output file / directory\")"
      }
    ]
  },
  {
    "sha": "236618061a445d2cb11e722cfac5fdae5be26abb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMzY2MTgwNjFhNDQ1ZDJjYjExZTcyMmNmYWM1ZmRhZTViZTI2YWJi",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-24T21:51:22Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-25T23:59:16Z"
      },
      "message": "Do not add to vNodes until fOneShot/fFeeler/fAddNode have been set",
      "tree": {
        "sha": "274900c35be308f40059881f196fcdc35cb02132",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/274900c35be308f40059881f196fcdc35cb02132"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/236618061a445d2cb11e722cfac5fdae5be26abb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/236618061a445d2cb11e722cfac5fdae5be26abb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/236618061a445d2cb11e722cfac5fdae5be26abb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/236618061a445d2cb11e722cfac5fdae5be26abb/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3c37dc40d39e1a1e56b6b0d3e660626a78656d4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c37dc40d39e1a1e56b6b0d3e660626a78656d4f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3c37dc40d39e1a1e56b6b0d3e660626a78656d4f"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 10,
      "deletions": 9
    },
    "files": [
      {
        "sha": "108d95a1762d2a0c9ae558a9265a646f53e87e87",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 9,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236618061a445d2cb11e722cfac5fdae5be26abb/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236618061a445d2cb11e722cfac5fdae5be26abb/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=236618061a445d2cb11e722cfac5fdae5be26abb",
        "patch": "@@ -342,8 +342,8 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n         CNode* pnode = FindNode((CService)addrConnect);\n         if (pnode)\n         {\n-            pnode->AddRef();\n-            return pnode;\n+            LogPrintf(\"Failed to open new connection, already connected\\n\");\n+            return NULL;\n         }\n     }\n \n@@ -373,12 +373,12 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n             CNode* pnode = FindNode((CService)addrConnect);\n             if (pnode)\n             {\n-                pnode->AddRef();\n                 if (pnode->addrName.empty()) {\n                     pnode->addrName = std::string(pszDest);\n                 }\n                 CloseSocket(hSocket);\n-                return pnode;\n+                LogPrintf(\"Failed to open new connection, already connected\\n\");\n+                return NULL;\n             }\n         }\n \n@@ -391,11 +391,6 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n         pnode->nServicesExpected = ServiceFlags(addrConnect.nServices & nRelevantServices);\n         pnode->nTimeConnected = GetTime();\n         pnode->AddRef();\n-        GetNodeSignals().InitializeNode(pnode, *this);\n-        {\n-            LOCK(cs_vNodes);\n-            vNodes.push_back(pnode);\n-        }\n \n         return pnode;\n     } else if (!proxyConnectionFailed) {\n@@ -1838,6 +1833,12 @@ bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n     if (fAddnode)\n         pnode->fAddnode = true;\n \n+    {\n+        LOCK(cs_vNodes);\n+        vNodes.push_back(pnode);\n+    }\n+    GetNodeSignals().InitializeNode(pnode, *this);\n+\n     return true;\n }\n "
      }
    ]
  },
  {
    "sha": "f89502306dcf6393a2c7b0efbb0fa728fc582137",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODk1MDIzMDZkY2Y2MzkzYTJjN2IwZWZiYjBmYTcyOGZjNTgyMTM3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-01-26T00:12:09Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-01-26T00:12:11Z"
      },
      "message": "Merge #9628: qa: Increase a sync_blocks timeout in pruning.py\n\n2f10f06 qa: Increase a sync_blocks timeout in pruning.py (Suhas Daftuar)",
      "tree": {
        "sha": "1419baf1fc3ff231632bcd3962caa7df39be496b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1419baf1fc3ff231632bcd3962caa7df39be496b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f89502306dcf6393a2c7b0efbb0fa728fc582137",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCgAGBQJYiT7bAAoJEC1/I3LlD+E30QsH/0Ypm/k3MHe510iw0XtGmcGB\nkP7fcDxDBhcsQe4xwSl35TuyYTJ89883Jf/wR5QCB5oJD68Fc71XaokexGu9DGBQ\nwkFAS4mmNuhcpIaVqTLF/P+nZT5g4Z+XlawmEsOfqaW2X3632idBdy67GqjXPhYE\noOFEFF2240KdviZps2maO0RoK2aiaDyINvq9Xs79I4emT8YkxXRJN1UYnAO4hu+T\nHpBSFuMbAYvmU1zriq1hfmE85/zjmIKggRRDNBdRchRGhX4Q6nhQ6CiXNUYPkE++\n4SZjwSAQ/h7bAiLLXR/Sl3H0ZXLi5Q5NP7sItkrq3+dwDmIlvKznqW4J4+2Ssq8=\n=VWDE\n-----END PGP SIGNATURE-----",
        "payload": "tree 1419baf1fc3ff231632bcd3962caa7df39be496b\nparent b68f898efa095dce03533be8ac015c1faef23053\nparent 2f10f06196ace64c549172f9ab081d28115228d5\nauthor MarcoFalke <falke.marco@gmail.com> 1485389529 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1485389531 +0100\n\nMerge #9628: qa: Increase a sync_blocks timeout in pruning.py\n\n2f10f06 qa: Increase a sync_blocks timeout in pruning.py (Suhas Daftuar)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f89502306dcf6393a2c7b0efbb0fa728fc582137",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f89502306dcf6393a2c7b0efbb0fa728fc582137",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f89502306dcf6393a2c7b0efbb0fa728fc582137/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b68f898efa095dce03533be8ac015c1faef23053",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b68f898efa095dce03533be8ac015c1faef23053",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b68f898efa095dce03533be8ac015c1faef23053"
      },
      {
        "sha": "2f10f06196ace64c549172f9ab081d28115228d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f10f06196ace64c549172f9ab081d28115228d5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2f10f06196ace64c549172f9ab081d28115228d5"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "60a1a86fa8ca7c753dcc9043f4214dd08db99c13",
        "filename": "qa/rpc-tests/pruning.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f89502306dcf6393a2c7b0efbb0fa728fc582137/qa/rpc-tests/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f89502306dcf6393a2c7b0efbb0fa728fc582137/qa/rpc-tests/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/pruning.py?ref=f89502306dcf6393a2c7b0efbb0fa728fc582137",
        "patch": "@@ -331,7 +331,7 @@ def wallet_test(self):\n         print (\"Syncing node 5 to test wallet\")\n         connect_nodes(self.nodes[0], 5)\n         nds = [self.nodes[0], self.nodes[5]]\n-        sync_blocks(nds)\n+        sync_blocks(nds, wait=5, timeout=300)\n         try:\n             stop_node(self.nodes[5],5) #stop and start to trigger rescan\n             start_node(5, self.options.tmpdir, [\"-debug=1\",\"-prune=550\"])"
      }
    ]
  },
  {
    "sha": "ae9719ab87a05ca4c3293b2f8675f17b16ed5872",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZTk3MTlhYjg3YTA1Y2E0YzMyOTNiMmY4Njc1ZjE3YjE2ZWQ1ODcy",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-01-26T03:20:02Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-01-26T03:24:40Z"
      },
      "message": "Refactor GetMinimumFee to give option of providing targetFee",
      "tree": {
        "sha": "264da44e84591767467c1ed2e1d2c620523b27ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/264da44e84591767467c1ed2e1d2c620523b27ad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ae9719ab87a05ca4c3293b2f8675f17b16ed5872",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae9719ab87a05ca4c3293b2f8675f17b16ed5872",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ae9719ab87a05ca4c3293b2f8675f17b16ed5872",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae9719ab87a05ca4c3293b2f8675f17b16ed5872/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fe8e8efcf91fa92db68aabeb0a1709b032e60dd6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe8e8efcf91fa92db68aabeb0a1709b032e60dd6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fe8e8efcf91fa92db68aabeb0a1709b032e60dd6"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 12,
      "deletions": 2
    },
    "files": [
      {
        "sha": "c46d5ed7806264f407e29e877e2cee563f80670c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae9719ab87a05ca4c3293b2f8675f17b16ed5872/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae9719ab87a05ca4c3293b2f8675f17b16ed5872/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=ae9719ab87a05ca4c3293b2f8675f17b16ed5872",
        "patch": "@@ -2790,8 +2790,13 @@ CAmount CWallet::GetRequiredFee(unsigned int nTxBytes)\n \n CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool)\n {\n-    // payTxFee is user-set \"I want to pay this much\"\n-    CAmount nFeeNeeded = payTxFee.GetFee(nTxBytes);\n+    // payTxFee is the user-set global for desired feerate\n+    return GetMinimumFee(nTxBytes, nConfirmTarget, pool, payTxFee.GetFee(nTxBytes));\n+}\n+\n+CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, CAmount targetFee)\n+{\n+    CAmount nFeeNeeded = targetFee;\n     // User didn't set: use -txconfirmtarget to estimate...\n     if (nFeeNeeded == 0) {\n         int estimateFoundTarget = nConfirmTarget;"
      },
      {
        "sha": "f95c0589d68fb401389efe55da11fc760ff250fa",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae9719ab87a05ca4c3293b2f8675f17b16ed5872/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae9719ab87a05ca4c3293b2f8675f17b16ed5872/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=ae9719ab87a05ca4c3293b2f8675f17b16ed5872",
        "patch": "@@ -802,6 +802,11 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * and the required fee\n      */\n     static CAmount GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool);\n+    /**\n+     * Estimate the minimum fee considering required fee and targetFee or if 0\n+     * then fee estimation for nConfirmTarget\n+     */\n+    static CAmount GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, CAmount targetFee);\n     /**\n      * Return the minimum required fee taking into account the\n      * floating relay fee and user set minimum transaction fee"
      }
    ]
  },
  {
    "sha": "3f9f9629cc1e4d9490dc13615114760e1889d5c6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZjlmOTYyOWNjMWU0ZDk0OTBkYzEzNjE1MTE0NzYwZTE4ODlkNWM2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-26T08:57:01Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-26T08:57:45Z"
      },
      "message": "Merge #9606: net: Consistently use GetTimeMicros() for inactivity checks\n\n99464bc net: Consistently use GetTimeMicros() for inactivity checks (Suhas Daftuar)",
      "tree": {
        "sha": "9fc9c71487eb4414e82183f82a200e8bd7bc842a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9fc9c71487eb4414e82183f82a200e8bd7bc842a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f9f9629cc1e4d9490dc13615114760e1889d5c6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYiboJAAoJEHSBCwEjRsmmRWMH/1+CaKZMocho6UJ4BPZIO94M\nzBhX3tR+Jt/flN6G3RKnvDQiKe4uZZn8jCpQB7NvjeJ7jxGO0Yf/7OOZLW5Wyofq\n8cbpYAvpAUdXRFGwpwqCcKMh6kO328vb5yDrPsv5lTNe14OSvC6LG8dWhkmtHOf6\nx+5YQfxnxIiLTSGQchB2cIc6HynY7iyRLgwBw6B7h8zSjwK9ZFr8231bS1Mhn1ch\nRKoS7zAJERk0Nlg55D7ArjKHV32o6ubsg+jr/Kq3UkN9bG2AbpBT3TuS54YXSAUr\nxFpjShlt1WTj1VtKsbi6jg6tXRg7Qz+rG+lgj2alr0Tt3ItGo17B6Ma5hr7a4Y0=\n=rvwV\n-----END PGP SIGNATURE-----",
        "payload": "tree 9fc9c71487eb4414e82183f82a200e8bd7bc842a\nparent f89502306dcf6393a2c7b0efbb0fa728fc582137\nparent 99464bc38e9575ff47f8e33223b252dcea2055e3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1485421021 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1485421065 +0100\n\nMerge #9606: net: Consistently use GetTimeMicros() for inactivity checks\n\n99464bc net: Consistently use GetTimeMicros() for inactivity checks (Suhas Daftuar)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f9f9629cc1e4d9490dc13615114760e1889d5c6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3f9f9629cc1e4d9490dc13615114760e1889d5c6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f9f9629cc1e4d9490dc13615114760e1889d5c6/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f89502306dcf6393a2c7b0efbb0fa728fc582137",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f89502306dcf6393a2c7b0efbb0fa728fc582137",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f89502306dcf6393a2c7b0efbb0fa728fc582137"
      },
      {
        "sha": "99464bc38e9575ff47f8e33223b252dcea2055e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99464bc38e9575ff47f8e33223b252dcea2055e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/99464bc38e9575ff47f8e33223b252dcea2055e3"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 28,
      "deletions": 18
    },
    "files": [
      {
        "sha": "1563a0963ff99b53365088042e39d1ea22e209a8",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f9f9629cc1e4d9490dc13615114760e1889d5c6/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f9f9629cc1e4d9490dc13615114760e1889d5c6/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=3f9f9629cc1e4d9490dc13615114760e1889d5c6",
        "patch": "@@ -391,7 +391,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n         uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n         CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, pszDest ? pszDest : \"\", false);\n         pnode->nServicesExpected = ServiceFlags(addrConnect.nServices & nRelevantServices);\n-        pnode->nTimeConnected = GetTime();\n+        pnode->nTimeConnected = GetSystemTimeInSeconds();\n         pnode->AddRef();\n         GetNodeSignals().InitializeNode(pnode, *this);\n         {\n@@ -771,7 +771,7 @@ size_t CConnman::SocketSendData(CNode *pnode)\n         assert(data.size() > pnode->nSendOffset);\n         int nBytes = send(pnode->hSocket, reinterpret_cast<const char*>(data.data()) + pnode->nSendOffset, data.size() - pnode->nSendOffset, MSG_NOSIGNAL | MSG_DONTWAIT);\n         if (nBytes > 0) {\n-            pnode->nLastSend = GetTime();\n+            pnode->nLastSend = GetSystemTimeInSeconds();\n             pnode->nSendBytes += nBytes;\n             pnode->nSendOffset += nBytes;\n             nSentSize += nBytes;\n@@ -1280,7 +1280,7 @@ void CConnman::ThreadSocketHandler()\n             //\n             // Inactivity checking\n             //\n-            int64_t nTime = GetTime();\n+            int64_t nTime = GetSystemTimeInSeconds();\n             if (nTime - pnode->nTimeConnected > 60)\n             {\n                 if (pnode->nLastRecv == 0 || pnode->nLastSend == 0)\n@@ -2565,7 +2565,7 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     nLastRecv = 0;\n     nSendBytes = 0;\n     nRecvBytes = 0;\n-    nTimeConnected = GetTime();\n+    nTimeConnected = GetSystemTimeInSeconds();\n     nTimeOffset = 0;\n     addrName = addrNameIn == \"\" ? addr.ToStringIPPort() : addrNameIn;\n     nVersion = 0;"
      },
      {
        "sha": "60406c20597772b6b4de88c893a3a6fd7ef05fbd",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f9f9629cc1e4d9490dc13615114760e1889d5c6/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f9f9629cc1e4d9490dc13615114760e1889d5c6/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=3f9f9629cc1e4d9490dc13615114760e1889d5c6",
        "patch": "@@ -1023,11 +1023,11 @@ void RPCConsole::updateNodeDetail(const CNodeCombinedStats *stats)\n         peerAddrDetails += \"<br />\" + tr(\"via %1\").arg(QString::fromStdString(stats->nodeStats.addrLocal));\n     ui->peerHeading->setText(peerAddrDetails);\n     ui->peerServices->setText(GUIUtil::formatServicesStr(stats->nodeStats.nServices));\n-    ui->peerLastSend->setText(stats->nodeStats.nLastSend ? GUIUtil::formatDurationStr(GetTime() - stats->nodeStats.nLastSend) : tr(\"never\"));\n-    ui->peerLastRecv->setText(stats->nodeStats.nLastRecv ? GUIUtil::formatDurationStr(GetTime() - stats->nodeStats.nLastRecv) : tr(\"never\"));\n+    ui->peerLastSend->setText(stats->nodeStats.nLastSend ? GUIUtil::formatDurationStr(GetSystemTimeInSeconds() - stats->nodeStats.nLastSend) : tr(\"never\"));\n+    ui->peerLastRecv->setText(stats->nodeStats.nLastRecv ? GUIUtil::formatDurationStr(GetSystemTimeInSeconds() - stats->nodeStats.nLastRecv) : tr(\"never\"));\n     ui->peerBytesSent->setText(FormatBytes(stats->nodeStats.nSendBytes));\n     ui->peerBytesRecv->setText(FormatBytes(stats->nodeStats.nRecvBytes));\n-    ui->peerConnTime->setText(GUIUtil::formatDurationStr(GetTime() - stats->nodeStats.nTimeConnected));\n+    ui->peerConnTime->setText(GUIUtil::formatDurationStr(GetSystemTimeInSeconds() - stats->nodeStats.nTimeConnected));\n     ui->peerPingTime->setText(GUIUtil::formatPingTime(stats->nodeStats.dPingTime));\n     ui->peerPingWait->setText(GUIUtil::formatPingTime(stats->nodeStats.dPingWait));\n     ui->peerMinPing->setText(GUIUtil::formatPingTime(stats->nodeStats.dMinPing));"
      },
      {
        "sha": "480c45516c55e1424f67d9a05a66e50a37c6ad4e",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 11,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f9f9629cc1e4d9490dc13615114760e1889d5c6/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f9f9629cc1e4d9490dc13615114760e1889d5c6/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=3f9f9629cc1e4d9490dc13615114760e1889d5c6",
        "patch": "@@ -431,22 +431,16 @@ UniValue setmocktime(const JSONRPCRequest& request)\n     if (!Params().MineBlocksOnDemand())\n         throw runtime_error(\"setmocktime for regression testing (-regtest mode) only\");\n \n-    // cs_vNodes is locked and node send/receive times are updated\n-    // atomically with the time change to prevent peers from being\n-    // disconnected because we think we haven't communicated with them\n-    // in a long time.\n+    // For now, don't change mocktime if we're in the middle of validation, as\n+    // this could have an effect on mempool time-based eviction, as well as\n+    // IsCurrentForFeeEstimation() and IsInitialBlockDownload().\n+    // TODO: figure out the right way to synchronize around mocktime, and\n+    // ensure all callsites of GetTime() are accessing this safely.\n     LOCK(cs_main);\n \n     RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM));\n     SetMockTime(request.params[0].get_int64());\n \n-    uint64_t t = GetTime();\n-    if(g_connman) {\n-        g_connman->ForEachNode([t](CNode* pnode) {\n-            pnode->nLastSend = pnode->nLastRecv = t;\n-        });\n-    }\n-\n     return NullUniValue;\n }\n "
      },
      {
        "sha": "87a25866e9a5d32bf0b60006cd7dacfb54adbb6e",
        "filename": "src/utiltime.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f9f9629cc1e4d9490dc13615114760e1889d5c6/src/utiltime.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f9f9629cc1e4d9490dc13615114760e1889d5c6/src/utiltime.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utiltime.cpp?ref=3f9f9629cc1e4d9490dc13615114760e1889d5c6",
        "patch": "@@ -46,6 +46,11 @@ int64_t GetTimeMicros()\n     return now;\n }\n \n+int64_t GetSystemTimeInSeconds()\n+{\n+    return GetTimeMicros()/1000000;\n+}\n+\n /** Return a time useful for the debug log */\n int64_t GetLogTimeMicros()\n {"
      },
      {
        "sha": "05c6790495098dcdaaaf5b2440dbc750def49876",
        "filename": "src/utiltime.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f9f9629cc1e4d9490dc13615114760e1889d5c6/src/utiltime.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f9f9629cc1e4d9490dc13615114760e1889d5c6/src/utiltime.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utiltime.h?ref=3f9f9629cc1e4d9490dc13615114760e1889d5c6",
        "patch": "@@ -9,9 +9,20 @@\n #include <stdint.h>\n #include <string>\n \n+/**\n+ * GetTimeMicros() and GetTimeMillis() both return the system time, but in\n+ * different units. GetTime() returns the sytem time in seconds, but also\n+ * supports mocktime, where the time can be specified by the user, eg for\n+ * testing (eg with the setmocktime rpc, or -mocktime argument).\n+ *\n+ * TODO: Rework these functions to be type-safe (so that we don't inadvertently\n+ * compare numbers with different units, or compare a mocktime to system time).\n+ */\n+\n int64_t GetTime();\n int64_t GetTimeMillis();\n int64_t GetTimeMicros();\n+int64_t GetSystemTimeInSeconds(); // Like GetTime(), but not mockable\n int64_t GetLogTimeMicros();\n void SetMockTime(int64_t nMockTimeIn);\n void MilliSleep(int64_t n);"
      }
    ]
  },
  {
    "sha": "07421cf2a7cf78ccfacc42f2ee43b5a6f30fb7cc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNzQyMWNmMmE3Y2Y3OGNjZmFjYzQyZjJlZTQzYjVhNmYzMGZiN2Nj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-26T09:08:22Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-26T09:14:13Z"
      },
      "message": "Merge #9613: [wallet] Clarify getbalance help string to explain interaction with bumpfee\n\n5a00659 [wallet] Clarify getbalance help string to explain interaction with bumpfee (Russell Yanofsky)",
      "tree": {
        "sha": "fdc911d3f57eeca7371b713c49253cfa404de800",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fdc911d3f57eeca7371b713c49253cfa404de800"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/07421cf2a7cf78ccfacc42f2ee43b5a6f30fb7cc",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYib3lAAoJEHSBCwEjRsmm4HIH/0N7I0FkCid0I7dAL4rNL9cL\nhBNXujibM3esXyLgHysmvEU+KhL7bhPfjDJcM+CKG+6sTo9eDTmJKjNzWDsWOlBK\n56wvEJ3rax4pL/g6inBKhZRuQuNGd1kTsRdeDP1LM5HYukUDmR/CgJEbOY8dyAlJ\nWqcyOJxUn7z3IqZo+8WeO40IYsMuOwQEgRB0r4OFGDQP6omvrpIIEGxW6P7lBxXK\nF7RB9X+ipyC8/x9YSo2LVFYIw3TNARUdf1cJviLY1lyMBvqS1BT4JmJeDBxiVwKN\nJvfTr9MFQku68No5hqkxK3+SiaYHM6Gv/MBxXLqCF2A1s29sz8OJYI7NHTgdao4=\n=V4Xv\n-----END PGP SIGNATURE-----",
        "payload": "tree fdc911d3f57eeca7371b713c49253cfa404de800\nparent 3f9f9629cc1e4d9490dc13615114760e1889d5c6\nparent 5a00659b58800ce52b652a31d551a984926c46de\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1485421702 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1485422053 +0100\n\nMerge #9613: [wallet] Clarify getbalance help string to explain interaction with bumpfee\n\n5a00659 [wallet] Clarify getbalance help string to explain interaction with bumpfee (Russell Yanofsky)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07421cf2a7cf78ccfacc42f2ee43b5a6f30fb7cc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/07421cf2a7cf78ccfacc42f2ee43b5a6f30fb7cc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07421cf2a7cf78ccfacc42f2ee43b5a6f30fb7cc/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3f9f9629cc1e4d9490dc13615114760e1889d5c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f9f9629cc1e4d9490dc13615114760e1889d5c6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f9f9629cc1e4d9490dc13615114760e1889d5c6"
      },
      {
        "sha": "5a00659b58800ce52b652a31d551a984926c46de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a00659b58800ce52b652a31d551a984926c46de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5a00659b58800ce52b652a31d551a984926c46de"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 19,
      "deletions": 5
    },
    "files": [
      {
        "sha": "87bf3ecbb0516088aff52ce72f4356b2a5de0b00",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 5,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07421cf2a7cf78ccfacc42f2ee43b5a6f30fb7cc/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07421cf2a7cf78ccfacc42f2ee43b5a6f30fb7cc/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=07421cf2a7cf78ccfacc42f2ee43b5a6f30fb7cc",
        "patch": "@@ -668,8 +668,19 @@ UniValue getbalance(const JSONRPCRequest& request)\n             \"Note that the account \\\"\\\" is not the same as leaving the parameter out.\\n\"\n             \"The server total may be different to the balance in the default \\\"\\\" account.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"account\\\"      (string, optional) DEPRECATED. The selected account, or \\\"*\\\" for entire wallet. It may be the default account using \\\"\\\".\\n\"\n-            \"2. minconf          (numeric, optional, default=1) Only include transactions confirmed at least this many times.\\n\"\n+            \"1. \\\"account\\\"         (string, optional) DEPRECATED. The account string may be given as a\\n\"\n+            \"                     specific account name to find the balance associated with wallet keys in\\n\"\n+            \"                     a named account, or as the empty string (\\\"\\\") to find the balance\\n\"\n+            \"                     associated with wallet keys not in any named account, or as \\\"*\\\" to find\\n\"\n+            \"                     the balance associated with all wallet keys regardless of account.\\n\"\n+            \"                     When this option is specified, it calculates the balance in a different\\n\"\n+            \"                     way than when it is not specified, and which can count spends twice when\\n\"\n+            \"                     there are conflicting pending transactions (such as those created by\\n\"\n+            \"                     the bumpfee command), temporarily resulting in low or even negative\\n\"\n+            \"                     balances. In general, account balance calculation is not considered\\n\"\n+            \"                     reliable and has resulted in confusing outcomes, so it is recommended to\\n\"\n+            \"                     avoid passing this argument.\\n\"\n+            \"2. minconf           (numeric, optional, default=1) Only include transactions confirmed at least this many times.\\n\"\n             \"3. include_watchonly (bool, optional, default=false) Also include balance in watch-only addresses (see 'importaddress')\\n\"\n             \"\\nResult:\\n\"\n             \"amount              (numeric) The total amount in \" + CURRENCY_UNIT + \" received for this account.\\n\"\n@@ -696,9 +707,12 @@ UniValue getbalance(const JSONRPCRequest& request)\n             filter = filter | ISMINE_WATCH_ONLY;\n \n     if (request.params[0].get_str() == \"*\") {\n-        // Calculate total balance a different way from GetBalance()\n-        // (GetBalance() sums up all unspent TxOuts)\n-        // getbalance and \"getbalance * 1 true\" should return the same number\n+        // Calculate total balance in a very different way from GetBalance().\n+        // The biggest difference is that GetBalance() sums up all unspent\n+        // TxOuts paying to the wallet, while this sums up both spent and\n+        // unspent TxOuts paying to the wallet, and then subtracts the values of\n+        // TxIns spending from the wallet. This also has fewer restrictions on\n+        // which unconfirmed transactions are considered trusted.\n         CAmount nBalance = 0;\n         for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n         {"
      }
    ]
  },
  {
    "sha": "10dc58a2aa79f0ef98ed27de6f193b9024594d54",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMGRjNThhMmFhNzlmMGVmOThlZDI3ZGU2ZjE5M2I5MDI0NTk0ZDU0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-26T09:14:34Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-26T09:15:21Z"
      },
      "message": "Merge #9587: Do not shadow local variable named `tx`.\n\n44f2baa Do not shadow local variable named `tx`. (Pavel Jan\u00edk)",
      "tree": {
        "sha": "972f4c4d1b024bd41c58efe6a2ecae0939a6bbd3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/972f4c4d1b024bd41c58efe6a2ecae0939a6bbd3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10dc58a2aa79f0ef98ed27de6f193b9024594d54",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYib4pAAoJEHSBCwEjRsmmqhoH/jSKJ4wmQ1zjyXMg8S5qxorN\n+2kr8rn/FFNBtKktvg8r70JFVhjwH9TY4l9zX5N/unk3e1+P1NhCzdcvTq+RpWhH\nJwiCxAIvsQWSnlpxV5e0S27vGd/66hLFPaJdSS4KBkvO9qkg4tYyB0vzEKFuahSZ\nqja9UlBrEzVH0VhlFbK2hma/niVqM1U7gm4JcH2BiCmVUvfb+JWZ3U/5jMTMkh3e\niezsBZtmiygnOJJbyp/+BTXlALKqb8YWtHHuMXBc426hfI1RNSCD8+2nAWLVcVkK\njxCMPFt+gGXzh1m04AG+VoMN5yKeeSRODkp7I33ovjBIcyUDHO8fb7HIlysgCkk=\n=1fvk\n-----END PGP SIGNATURE-----",
        "payload": "tree 972f4c4d1b024bd41c58efe6a2ecae0939a6bbd3\nparent 07421cf2a7cf78ccfacc42f2ee43b5a6f30fb7cc\nparent 44f2baac486688dd499611f77a0cf73276758bf9\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1485422074 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1485422121 +0100\n\nMerge #9587: Do not shadow local variable named `tx`.\n\n44f2baa Do not shadow local variable named `tx`. (Pavel Jan\u00edk)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10dc58a2aa79f0ef98ed27de6f193b9024594d54",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/10dc58a2aa79f0ef98ed27de6f193b9024594d54",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10dc58a2aa79f0ef98ed27de6f193b9024594d54/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "07421cf2a7cf78ccfacc42f2ee43b5a6f30fb7cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07421cf2a7cf78ccfacc42f2ee43b5a6f30fb7cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/07421cf2a7cf78ccfacc42f2ee43b5a6f30fb7cc"
      },
      {
        "sha": "44f2baac486688dd499611f77a0cf73276758bf9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44f2baac486688dd499611f77a0cf73276758bf9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/44f2baac486688dd499611f77a0cf73276758bf9"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "5027c5109c1bb421db04587a36eeee8296831ce6",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10dc58a2aa79f0ef98ed27de6f193b9024594d54/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10dc58a2aa79f0ef98ed27de6f193b9024594d54/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=10dc58a2aa79f0ef98ed27de6f193b9024594d54",
        "patch": "@@ -1877,8 +1877,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             }\n         }\n \n-        for (const CTransactionRef& tx : lRemovedTxn)\n-            AddToCompactExtraTransactions(tx);\n+        for (const CTransactionRef& removedTx : lRemovedTxn)\n+            AddToCompactExtraTransactions(removedTx);\n \n         int nDoS = 0;\n         if (state.IsInvalid(nDoS))"
      }
    ]
  },
  {
    "sha": "5ac668759dedb5272aefd33f305ae76c854a5737",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YWM2Njg3NTlkZWRiNTI3MmFlZmQzM2YzMDVhZTc2Yzg1NGE1NzM3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-26T09:30:36Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-26T09:30:59Z"
      },
      "message": "Merge #9574: [depends] Fix QT build on OSX\n\nc36ec71 depends: qt: disable printer for all platforms, not just osx (Cory Fields)",
      "tree": {
        "sha": "204330a13d527827831c52c109ac158d3e4a9f3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/204330a13d527827831c52c109ac158d3e4a9f3c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5ac668759dedb5272aefd33f305ae76c854a5737",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYicHTAAoJEHSBCwEjRsmmluwH/2mtDXEwemwqv+DN6PfrgcNE\ncsUBkLnOHu1hjYU+P5QNTGcqKNA+NJZBEjVpHsKiGUoJ5tKXpoFnHA3Zz4D4//6U\nAcHeDEkbHd+oSUuvD1sGABUWzHBCvhKMMeXKUTvkggl+VmHWR49hLAUaQV6n+Aah\nZIsf3IM+mzZK44EBEprytxNmbkQcj5eQ1XAGcuizDWG0hG48B7gDhlnjrtxXMQIB\n5WpEKg8cjO8R85m1kXL5PKP7J4Qm+Xst23Jum3wdv9HbjIbRsXwqJIeRGTnSsLWt\nPtAxYZt6eDXwPBHg1m2ZnfCbUF00MCM0xEhHn69kWVmpCaKro7jVcLzsp2AD+UQ=\n=UpUy\n-----END PGP SIGNATURE-----",
        "payload": "tree 204330a13d527827831c52c109ac158d3e4a9f3c\nparent 10dc58a2aa79f0ef98ed27de6f193b9024594d54\nparent c36ec715f06d212381e0edfa4344514f1a575701\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1485423036 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1485423059 +0100\n\nMerge #9574: [depends] Fix QT build on OSX\n\nc36ec71 depends: qt: disable printer for all platforms, not just osx (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ac668759dedb5272aefd33f305ae76c854a5737",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5ac668759dedb5272aefd33f305ae76c854a5737",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ac668759dedb5272aefd33f305ae76c854a5737/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "10dc58a2aa79f0ef98ed27de6f193b9024594d54",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10dc58a2aa79f0ef98ed27de6f193b9024594d54",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/10dc58a2aa79f0ef98ed27de6f193b9024594d54"
      },
      {
        "sha": "c36ec715f06d212381e0edfa4344514f1a575701",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c36ec715f06d212381e0edfa4344514f1a575701",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c36ec715f06d212381e0edfa4344514f1a575701"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6e38d1ac6a517859f516e02a2c5e167b59eaffcc",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ac668759dedb5272aefd33f305ae76c854a5737/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ac668759dedb5272aefd33f305ae76c854a5737/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=5ac668759dedb5272aefd33f305ae76c854a5737",
        "patch": "@@ -78,6 +78,8 @@ $(package)_config_opts += -reduce-exports\n $(package)_config_opts += -static\n $(package)_config_opts += -silent\n $(package)_config_opts += -v\n+$(package)_config_opts += -no-feature-printer\n+$(package)_config_opts += -no-feature-printdialog\n \n ifneq ($(build_os),darwin)\n $(package)_config_opts_darwin = -xplatform macx-clang-linux"
      },
      {
        "sha": "f565fe3e75d1351fa5d3585ad4511f3215b01e53",
        "filename": "depends/patches/qt/mac-qmake.conf",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ac668759dedb5272aefd33f305ae76c854a5737/depends/patches/qt/mac-qmake.conf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ac668759dedb5272aefd33f305ae76c854a5737/depends/patches/qt/mac-qmake.conf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/mac-qmake.conf?ref=5ac668759dedb5272aefd33f305ae76c854a5737",
        "patch": "@@ -1,6 +1,5 @@\n MAKEFILE_GENERATOR = UNIX\n CONFIG += app_bundle incremental global_init_link_order lib_version_first plugin_no_soname absolute_library_soname\n-DEFINES += QT_NO_PRINTER QT_NO_PRINTDIALOG\n QMAKE_INCREMENTAL_STYLE = sublib\n include(../common/macx.conf)\n include(../common/gcc-base-mac.conf)"
      }
    ]
  },
  {
    "sha": "fd7021142a7a215c8b2e1b51f7bfe2a612886c7d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZDcwMjExNDJhN2EyMTVjOGIyZTFiNTFmN2JmZTJhNjEyODg2Yzdk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-26T09:31:51Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-26T09:31:55Z"
      },
      "message": "Merge #9594: Send final alert message to older peers after connecting.\n\n8ff8d21 Send final alert message to older peers after connecting. (Gregory Maxwell)",
      "tree": {
        "sha": "fc41e009397adc52db237301823ee45a71637511",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fc41e009397adc52db237301823ee45a71637511"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fd7021142a7a215c8b2e1b51f7bfe2a612886c7d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYicILAAoJEHSBCwEjRsmm0FUIAK/TZ78xOfGLi5xjk4zjrvDq\n3sF4U2KXkI6fNTU/b1yqFEXZ7BhbqNntXthYk2UFe4M+05kBmoZSWKau4eSP/cyx\nCt/NTduqROLnX58UTFzCLKObfAhd6Aq36RgA86HHU/BJZmfauan8HZa9GMtKRTei\nGjcT1xnl1BkIi2EisyDbOK5wfpUl3iho1uc2hHJH3x5N103f7lHU+NxY7EdvQgfs\nbS6kyMPtSCWQRD8QwHmHssczpnI0CvygPm40tl0SRaqVx8UkrN/Y/+UXztFkw/1n\n6KMjPUEeF+ycgyEt1ihcImC6QBgdeo1GsbrPo6UbI4CnnNEvnl8qekJ60WEKfv4=\n=1ksV\n-----END PGP SIGNATURE-----",
        "payload": "tree fc41e009397adc52db237301823ee45a71637511\nparent 5ac668759dedb5272aefd33f305ae76c854a5737\nparent 8ff8d219c3d9a0b6f604bb99ca4a27ad77cdb69b\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1485423111 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1485423115 +0100\n\nMerge #9594: Send final alert message to older peers after connecting.\n\n8ff8d21 Send final alert message to older peers after connecting. (Gregory Maxwell)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd7021142a7a215c8b2e1b51f7bfe2a612886c7d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fd7021142a7a215c8b2e1b51f7bfe2a612886c7d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd7021142a7a215c8b2e1b51f7bfe2a612886c7d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5ac668759dedb5272aefd33f305ae76c854a5737",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ac668759dedb5272aefd33f305ae76c854a5737",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5ac668759dedb5272aefd33f305ae76c854a5737"
      },
      {
        "sha": "8ff8d219c3d9a0b6f604bb99ca4a27ad77cdb69b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ff8d219c3d9a0b6f604bb99ca4a27ad77cdb69b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ff8d219c3d9a0b6f604bb99ca4a27ad77cdb69b"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "678541a44fbfa6575b05263f4beb3812f74a75fc",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd7021142a7a215c8b2e1b51f7bfe2a612886c7d/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd7021142a7a215c8b2e1b51f7bfe2a612886c7d/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=fd7021142a7a215c8b2e1b51f7bfe2a612886c7d",
        "patch": "@@ -1324,6 +1324,12 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         pfrom->nTimeOffset = nTimeOffset;\n         AddTimeData(pfrom->addr, nTimeOffset);\n \n+        // If the peer is old enough to have the old alert system, send it the final alert.\n+        if (pfrom->nVersion <= 70012) {\n+            CDataStream finalAlert(ParseHex(\"60010000000000000000000000ffffff7f00000000ffffff7ffeffff7f01ffffff7f00000000ffffff7f00ffffff7f002f555247454e543a20416c657274206b657920636f6d70726f6d697365642c2075706772616465207265717569726564004630440220653febd6410f470f6bae11cad19c48413becb1ac2c17f908fd0fd53bdc3abd5202206d0e9c96fe88d4a0f01ed9dedae2b6f9e00da94cad0fecaae66ecf689bf71b50\"), SER_NETWORK, PROTOCOL_VERSION);\n+            connman.PushMessage(pfrom, CNetMsgMaker(nSendVersion).Make(\"alert\", finalAlert));\n+        }\n+\n         // Feeler connections exist only to verify if address is online.\n         if (pfrom->fFeeler) {\n             assert(pfrom->fInbound == false);"
      }
    ]
  },
  {
    "sha": "9b4d2673b7757fd242b13c972c73897c92a90ce1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YjRkMjY3M2I3NzU3ZmQyNDJiMTNjOTcyYzczODk3YzkyYTkwY2Ux",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-26T09:53:07Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-26T09:53:14Z"
      },
      "message": "Merge #9519: Exclude RBF replacement txs from fee estimation\n\nde1ae32 Exclude RBF txs from fee estimation (Alex Morcos)",
      "tree": {
        "sha": "479808926ab380f6c3782920b1e9937d4edbf188",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/479808926ab380f6c3782920b1e9937d4edbf188"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b4d2673b7757fd242b13c972c73897c92a90ce1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYiccKAAoJEHSBCwEjRsmmz58H/3hBhN1UX5T96+CPJSPNwjF/\nZxdWa2ljd7hh5Lw6qA6JRLxfweDEk2BtqCWMqUJ1baqz2Md+SyS0Ncem5NK8Qh6x\nixi6D+piNeoLfhjtTcNWrIkKi31AhrpfGtAtSmb5zBiZPBiZ6/GNy90GtMaRWeSZ\nEATe3SpiyX3Vg7VFe+XSjUISlwfi3L36hvHSGZJgD8uspFbrB3GKMpLuXWzOprSG\n0UUwlQuGM3A/tnVSwbVfyJ/83DX6YXBGHSCgDfkoPr6HANpozHeL4ADRLAYX8Bjt\nTuKek5O0i7hWjxgEZbAOJo4rlO/QjOIHJ03dHBbCRFBtNa6EgnIH/aCSoPclecs=\n=srEy\n-----END PGP SIGNATURE-----",
        "payload": "tree 479808926ab380f6c3782920b1e9937d4edbf188\nparent fd7021142a7a215c8b2e1b51f7bfe2a612886c7d\nparent de1ae324bf3fb7451c1008a1a9721ff9f469533b\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1485424387 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1485424394 +0100\n\nMerge #9519: Exclude RBF replacement txs from fee estimation\n\nde1ae32 Exclude RBF txs from fee estimation (Alex Morcos)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b4d2673b7757fd242b13c972c73897c92a90ce1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9b4d2673b7757fd242b13c972c73897c92a90ce1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b4d2673b7757fd242b13c972c73897c92a90ce1/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fd7021142a7a215c8b2e1b51f7bfe2a612886c7d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd7021142a7a215c8b2e1b51f7bfe2a612886c7d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd7021142a7a215c8b2e1b51f7bfe2a612886c7d"
      },
      {
        "sha": "de1ae324bf3fb7451c1008a1a9721ff9f469533b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de1ae324bf3fb7451c1008a1a9721ff9f469533b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/de1ae324bf3fb7451c1008a1a9721ff9f469533b"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 7,
      "deletions": 5
    },
    "files": [
      {
        "sha": "d499d7a0d17e6007973de333fae3f6eae4f79c04",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b4d2673b7757fd242b13c972c73897c92a90ce1/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b4d2673b7757fd242b13c972c73897c92a90ce1/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=9b4d2673b7757fd242b13c972c73897c92a90ce1",
        "patch": "@@ -827,7 +827,8 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         // subsequent RemoveStaged() and addUnchecked() calls don't guarantee\n         // mempool consistency for us.\n         LOCK(pool.cs);\n-        if (setConflicts.size())\n+        const bool fReplacementTransaction = setConflicts.size();\n+        if (fReplacementTransaction)\n         {\n             CFeeRate newFeeRate(nModifiedFees, nSize);\n             set<uint256> setConflictsParents;\n@@ -991,10 +992,11 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         }\n         pool.RemoveStaged(allConflicting, false, MemPoolRemovalReason::REPLACED);\n \n-        // This transaction should only count for fee estimation if\n-        // the node is not behind and it is not dependent on any other\n-        // transactions in the mempool\n-        bool validForFeeEstimation = IsCurrentForFeeEstimation() && pool.HasNoInputsOf(tx);\n+        // This transaction should only count for fee estimation if it isn't a\n+        // BIP 125 replacement transaction (may not be widely supported), the\n+        // node is not behind, and the transaction is not dependent on any other\n+        // transactions in the mempool.\n+        bool validForFeeEstimation = !fReplacementTransaction && IsCurrentForFeeEstimation() && pool.HasNoInputsOf(tx);\n \n         // Store transaction in memory\n         pool.addUnchecked(hash, entry, setAncestors, validForFeeEstimation);"
      }
    ]
  },
  {
    "sha": "04b877361be8a457b4d4f7fd2277d73f00e2e61c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNGI4NzczNjFiZThhNDU3YjRkNGY3ZmQyMjc3ZDczZjAwZTJlNjFj",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-26T12:21:11Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-26T12:22:36Z"
      },
      "message": "[Qt] fix transaction details output-index to reflect vout index",
      "tree": {
        "sha": "5d7ae51226f5fe8f2b657bb68db8aad7eb6fccc8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5d7ae51226f5fe8f2b657bb68db8aad7eb6fccc8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/04b877361be8a457b4d4f7fd2277d73f00e2e61c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAliJ6gwACgkQKdS8tkFv\nU+zkPQ/+KS7K2MGU2EnHy+1fIL0xH6ohaDGVfx/BizcVgV+hTrpgPTYoHYycgaW2\nj4gsPlyJ36o53J0AiaSxwaYMDokG7rbmPqTSIg5KLsFqfl+49m1YPj5Uywqqa1TQ\nXuE87feGF/PIBAay7FitpF9o3bvpXSXPEFiLgz18Oc/liWeRlrLgTtLRe0JvwNLB\n4X8k1OqQSLiMMiAAoi+sjzrsmIsJA55Dse44TBgWHMzjRTzFSLqvXOhBakWpoOQ1\nFHd2Vul9ixK39xteWelON2wxpiMpAMVF/KEz+ciQfuaPIKIY+p3wRVMkv4HVuAa2\n+eO7DbhwT4Mnw5WbDv1zSdFc1787XCqUHdu0DB7A7vsZGlJpOfHseznMLGmbsOLz\naHWabQoHkVUtCp+GA5xC5VNbUy06pFStiNx4w+XHBnDEaKMEietPLEQP4LDmfqja\n7+sra9mzQw2G4jxP/X7O5ILAAkpRlTyzSmVPuuQwa4ZCr6lQsgyOUVjxEH8Cifqc\nZ9fbHTVBmd0rVOYIM34zYpfsYcbvpt+8jGf2RlUHNYptkWwUdKUcp3CYH759ctJT\nbpZ2YkDxI8m4QjOX2hBhUDIp/T2/huvgqHeSB2E7LFLbeTq/nuU/SHEfQeT9634E\n/rt/gI6cvoPvSzAJAf/56oaac/4BgK1IU4UnUlzF13q+ccpGC8Y=\n=HsKC\n-----END PGP SIGNATURE-----",
        "payload": "tree 5d7ae51226f5fe8f2b657bb68db8aad7eb6fccc8\nparent 9b4d2673b7757fd242b13c972c73897c92a90ce1\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1485433271 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1485433356 +0100\n\n[Qt] fix transaction details output-index to reflect vout index\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04b877361be8a457b4d4f7fd2277d73f00e2e61c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/04b877361be8a457b4d4f7fd2277d73f00e2e61c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04b877361be8a457b4d4f7fd2277d73f00e2e61c/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9b4d2673b7757fd242b13c972c73897c92a90ce1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b4d2673b7757fd242b13c972c73897c92a90ce1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9b4d2673b7757fd242b13c972c73897c92a90ce1"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "a9d9b6887ec3b45634763e01ecc9c9629d23286c",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04b877361be8a457b4d4f7fd2277d73f00e2e61c/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04b877361be8a457b4d4f7fd2277d73f00e2e61c/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=04b877361be8a457b4d4f7fd2277d73f00e2e61c",
        "patch": "@@ -47,14 +47,15 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n         //\n         // Credit\n         //\n-        BOOST_FOREACH(const CTxOut& txout, wtx.tx->vout)\n+        for(unsigned int i = 0; i < wtx.tx->vout.size(); i++)\n         {\n+            const CTxOut& txout = wtx.tx->vout[i];\n             isminetype mine = wallet->IsMine(txout);\n             if(mine)\n             {\n                 TransactionRecord sub(hash, nTime);\n                 CTxDestination address;\n-                sub.idx = parts.size(); // sequence number\n+                sub.idx = i; // vout index\n                 sub.credit = txout.nValue;\n                 sub.involvesWatchAddress = mine & ISMINE_WATCH_ONLY;\n                 if (ExtractDestination(txout.scriptPubKey, address) && IsMine(*wallet, address))\n@@ -118,7 +119,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n             {\n                 const CTxOut& txout = wtx.tx->vout[nOut];\n                 TransactionRecord sub(hash, nTime);\n-                sub.idx = parts.size();\n+                sub.idx = nOut;\n                 sub.involvesWatchAddress = involvesWatchAddress;\n \n                 if(wallet->IsMine(txout))"
      }
    ]
  },
  {
    "sha": "e8021ec9193c7e8137f9716bcafd197a357a624e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplODAyMWVjOTE5M2M3ZTgxMzdmOTcxNmJjYWZkMTk3YTM1N2E2MjRl",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-01-26T03:16:15Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-01-26T14:43:00Z"
      },
      "message": "Use CWallet::GetMinimumFee in bumpfee\n\nUse the wallet's fee calculation logic to properly clamp fee against minimums and maximums when calculating the fee for a bumpfee transaction.  Unless totalFee is explictly given, in which case, manually check against min, but do nothing to adjust given fee.\n\nIn all cases do a final check against maxTxFee (after adding any incremental amount).",
      "tree": {
        "sha": "31cbe60ee63f4f88613dd9424cadef34ca68d32a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/31cbe60ee63f4f88613dd9424cadef34ca68d32a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e8021ec9193c7e8137f9716bcafd197a357a624e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8021ec9193c7e8137f9716bcafd197a357a624e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e8021ec9193c7e8137f9716bcafd197a357a624e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8021ec9193c7e8137f9716bcafd197a357a624e/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ae9719ab87a05ca4c3293b2f8675f17b16ed5872",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae9719ab87a05ca4c3293b2f8675f17b16ed5872",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ae9719ab87a05ca4c3293b2f8675f17b16ed5872"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 25,
      "deletions": 17
    },
    "files": [
      {
        "sha": "9ae36653b8cab240151437cccfa8e4ccefd6b7e5",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 17,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8021ec9193c7e8137f9716bcafd197a357a624e/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8021ec9193c7e8137f9716bcafd197a357a624e/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=e8021ec9193c7e8137f9716bcafd197a357a624e",
        "patch": "@@ -2739,6 +2739,10 @@ UniValue bumpfee(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n     }\n \n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n+    const int64_t maxNewTxSize = txSize + wtx.tx->vin.size();\n+\n     // optional parameters\n     bool specifiedConfirmTarget = false;\n     int newConfirmTarget = nTxConfirmTarget;\n@@ -2764,10 +2768,11 @@ UniValue bumpfee(const JSONRPCRequest& request)\n             }\n         } else if (options.exists(\"totalFee\")) {\n             totalFee = options[\"totalFee\"].get_int64();\n-            if (totalFee <= 0) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n-            } else if (totalFee > maxTxFee) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than maxTxFee)\");\n+            CAmount requiredFee = CWallet::GetRequiredFee(maxNewTxSize);\n+            if (totalFee < requiredFee ) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER,\n+                                   strprintf(\"Insufficient totalFee (cannot be less than required fee %s)\",\n+                                             FormatMoney(requiredFee)));\n             }\n         }\n \n@@ -2776,10 +2781,6 @@ UniValue bumpfee(const JSONRPCRequest& request)\n         }\n     }\n \n-    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n-    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n-    const int64_t maxNewTxSize = txSize + wtx.tx->vin.size();\n-\n     // calculate the old fee and fee-rate\n     CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n     CFeeRate nOldFeeRate(nOldFee, txSize);\n@@ -2794,24 +2795,31 @@ UniValue bumpfee(const JSONRPCRequest& request)\n         nNewFee = totalFee;\n         nNewFeeRate = CFeeRate(totalFee, maxNewTxSize);\n     } else {\n-        // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n-        if (!specifiedConfirmTarget && payTxFee.GetFeePerK() != 0) {\n-            nNewFeeRate = payTxFee;\n-        } else {\n-            nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget);\n+        // if user specified a confirm target then don't consider any global payTxFee\n+        if (specifiedConfirmTarget) {\n+            nNewFee = CWallet::GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool, CAmount(0));\n         }\n-        if (nNewFeeRate.GetFeePerK() == 0) {\n-            nNewFeeRate = CWallet::fallbackFee;\n+        // otherwise use the regular wallet logic to select payTxFee or default confirm target\n+        else {\n+            nNewFee = CWallet::GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool);\n         }\n \n+        nNewFeeRate = CFeeRate(nNewFee, maxNewTxSize);\n+\n         // new fee rate must be at least old rate + minimum incremental relay rate\n         if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::incrementalRelayFee.GetFeePerK()) {\n             nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::incrementalRelayFee.GetFeePerK());\n+            nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n         }\n-\n-        nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n     }\n \n+    // Check that in all cases the new fee doesn't violate maxTxFee\n+     if (nNewFee > maxTxFee) {\n+         throw JSONRPCError(RPC_MISC_ERROR,\n+                            strprintf(\"Specified or calculated fee %s is too high (cannot be higher than maxTxFee %s)\",\n+                                      FormatMoney(nNewFee), FormatMoney(maxTxFee)));\n+     }\n+\n     // check that fee rate is higher than mempool's minimum fee\n     // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n     // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,"
      }
    ]
  },
  {
    "sha": "fab035f2f7f7bcfca7898d00105f6cb539a2c8da",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWIwMzVmMmY3ZjdiY2ZjYTc4OThkMDAxMDVmNmNiNTM5YTJjOGRh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-01-12T02:59:21Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-01-26T15:30:15Z"
      },
      "message": "qa: Actually test assertions in pruning.py\n\nAlso refactor to use wrapper for stop_node",
      "tree": {
        "sha": "f2708d561ec2539d5de856c769d067d8485c83c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f2708d561ec2539d5de856c769d067d8485c83c2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fab035f2f7f7bcfca7898d00105f6cb539a2c8da",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab035f2f7f7bcfca7898d00105f6cb539a2c8da",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fab035f2f7f7bcfca7898d00105f6cb539a2c8da",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab035f2f7f7bcfca7898d00105f6cb539a2c8da/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9b4d2673b7757fd242b13c972c73897c92a90ce1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b4d2673b7757fd242b13c972c73897c92a90ce1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9b4d2673b7757fd242b13c972c73897c92a90ce1"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 17,
      "deletions": 21
    },
    "files": [
      {
        "sha": "9d155478e251a605479c097a945b6e573397efe9",
        "filename": "qa/rpc-tests/pruning.py",
        "status": "modified",
        "additions": 17,
        "deletions": 21,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab035f2f7f7bcfca7898d00105f6cb539a2c8da/qa/rpc-tests/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab035f2f7f7bcfca7898d00105f6cb539a2c8da/qa/rpc-tests/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/pruning.py?ref=fab035f2f7f7bcfca7898d00105f6cb539a2c8da",
        "patch": "@@ -103,7 +103,7 @@ def create_chain_with_staleblocks(self):\n             # Disconnect node 0 so it can mine a longer reorg chain without knowing about node 1's soon-to-be-stale chain\n             # Node 2 stays connected, so it hears about the stale blocks and then reorg's when node0 reconnects\n             # Stopping node 0 also clears its mempool, so it doesn't have node1's transactions to accidentally mine\n-            stop_node(self.nodes[0],0)\n+            self.stop_node(0)\n             self.nodes[0]=start_node(0, self.options.tmpdir, [\"-debug\",\"-maxreceivebuffer=20000\",\"-blockmaxsize=999000\", \"-checkblocks=5\"], timewait=900)\n             # Mine 24 blocks in node 1\n             for i in range(24):\n@@ -128,7 +128,7 @@ def reorg_test(self):\n         # This will cause Node 2 to do a reorg requiring 288 blocks of undo data to the reorg_test chain\n         # Reboot node 1 to clear its mempool (hopefully make the invalidate faster)\n         # Lower the block max size so we don't keep mining all our big mempool transactions (from disconnected blocks)\n-        stop_node(self.nodes[1],1)\n+        self.stop_node(1)\n         self.nodes[1]=start_node(1, self.options.tmpdir, [\"-debug\",\"-maxreceivebuffer=20000\",\"-blockmaxsize=5000\", \"-checkblocks=5\", \"-disablesafemode\"], timewait=900)\n \n         height = self.nodes[1].getblockcount()\n@@ -151,7 +151,7 @@ def reorg_test(self):\n         print(\"New best height\", self.nodes[1].getblockcount())\n \n         # Reboot node1 to clear those giant tx's from mempool\n-        stop_node(self.nodes[1],1)\n+        self.stop_node(1)\n         self.nodes[1]=start_node(1, self.options.tmpdir, [\"-debug\",\"-maxreceivebuffer=20000\",\"-blockmaxsize=5000\", \"-checkblocks=5\", \"-disablesafemode\"], timewait=900)\n \n         print(\"Generating new longer chain of 300 more blocks\")\n@@ -231,7 +231,7 @@ def manual_test(self, node_number, use_timestamp):\n         node = self.nodes[node_number] = start_node(node_number, self.options.tmpdir, [\"-debug=0\"], timewait=900)\n         assert_equal(node.getblockcount(), 995)\n         assert_raises_message(JSONRPCException, \"not in prune mode\", node.pruneblockchain, 500)\n-        stop_node(node, node_number)\n+        self.stop_node(node_number)\n \n         # now re-start in manual pruning mode\n         node = self.nodes[node_number] = start_node(node_number, self.options.tmpdir, [\"-debug=0\",\"-prune=1\"], timewait=900)\n@@ -266,25 +266,21 @@ def has_block(index):\n \n         # mine 6 blocks so we are at height 1001 (i.e., above PruneAfterHeight)\n         node.generate(6)\n+        assert_equal(node.getblockchaininfo()[\"blocks\"], 1001)\n \n-        # negative and zero inputs should raise an exception\n-        try:\n-            node.pruneblockchain(-10)\n-            raise AssertionError(\"pruneblockchain(-10) should have failed.\")\n-        except:\n-            pass\n-\n-        try:\n-            node.pruneblockchain(0)\n-            raise AssertionError(\"pruneblockchain(0) should have failed.\")\n-        except:\n-            pass\n+        # negative heights should raise an exception\n+        assert_raises_message(JSONRPCException, \"Negative\", node.pruneblockchain, -10)\n \n         # height=100 too low to prune first block file so this is a no-op\n         prune(100)\n         if not has_block(0):\n             raise AssertionError(\"blk00000.dat is missing when should still be there\")\n \n+        # Does nothing\n+        node.pruneblockchain(height(0))\n+        if not has_block(0):\n+            raise AssertionError(\"blk00000.dat is missing when should still be there\")\n+\n         # height=500 should prune first file\n         prune(500)\n         if has_block(0):\n@@ -311,7 +307,7 @@ def has_block(index):\n             raise AssertionError(\"blk00003.dat is still there, should be pruned by now\")\n \n         # stop node, start back up with auto-prune at 550MB, make sure still runs\n-        stop_node(node, node_number)\n+        self.stop_node(node_number)\n         self.nodes[node_number] = start_node(node_number, self.options.tmpdir, [\"-debug=0\",\"-prune=550\"], timewait=900)\n \n         print(\"Success\")\n@@ -320,7 +316,7 @@ def wallet_test(self):\n         # check that the pruning node's wallet is still in good shape\n         print(\"Stop and start pruning node to trigger wallet rescan\")\n         try:\n-            stop_node(self.nodes[2], 2)\n+            self.stop_node(2)\n             start_node(2, self.options.tmpdir, [\"-debug=1\",\"-prune=550\"])\n             print(\"Success\")\n         except Exception as detail:\n@@ -333,7 +329,7 @@ def wallet_test(self):\n         nds = [self.nodes[0], self.nodes[5]]\n         sync_blocks(nds, wait=5, timeout=300)\n         try:\n-            stop_node(self.nodes[5],5) #stop and start to trigger rescan\n+            self.stop_node(5) #stop and start to trigger rescan\n             start_node(5, self.options.tmpdir, [\"-debug=1\",\"-prune=550\"])\n             print (\"Success\")\n         except Exception as detail:\n@@ -353,8 +349,8 @@ def run_test(self):\n         # N0=N1=N2 **...*(995)\n \n         # stop manual-pruning node with 995 blocks\n-        stop_node(self.nodes[3],3)\n-        stop_node(self.nodes[4],4)\n+        self.stop_node(3)\n+        self.stop_node(4)\n \n         print(\"Check that we haven't started pruning yet because we're below PruneAfterHeight\")\n         self.test_height_min()"
      }
    ]
  },
  {
    "sha": "0c0c63f70a5376b87508e8f1c73dcbc59c8a96ed",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYzBjNjNmNzBhNTM3NmI4NzUwOGU4ZjFjNzNkY2JjNTljOGE5NmVk",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-01-23T18:15:24Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-01-26T17:03:47Z"
      },
      "message": "Introduce WALLET_INCREMENTAL_RELAY_FEE\n\nHave wallet's default bump value be higher than the default incrementalRelayFee to future proof against changes to incremental relay fee.  Only applies when not setting the fee rate directly.",
      "tree": {
        "sha": "a89c36f1736f2f2e2015581792aa1572c5ca2c2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a89c36f1736f2f2e2015581792aa1572c5ca2c2d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0c0c63f70a5376b87508e8f1c73dcbc59c8a96ed",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c0c63f70a5376b87508e8f1c73dcbc59c8a96ed",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0c0c63f70a5376b87508e8f1c73dcbc59c8a96ed",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c0c63f70a5376b87508e8f1c73dcbc59c8a96ed/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e8021ec9193c7e8137f9716bcafd197a357a624e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8021ec9193c7e8137f9716bcafd197a357a624e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8021ec9193c7e8137f9716bcafd197a357a624e"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 14,
      "deletions": 4
    },
    "files": [
      {
        "sha": "6517bae52cd39c69f59d366481bbc08a11c01234",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 4,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c0c63f70a5376b87508e8f1c73dcbc59c8a96ed/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c0c63f70a5376b87508e8f1c73dcbc59c8a96ed/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=0c0c63f70a5376b87508e8f1c73dcbc59c8a96ed",
        "patch": "@@ -2786,11 +2786,19 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     CFeeRate nOldFeeRate(nOldFee, txSize);\n     CAmount nNewFee;\n     CFeeRate nNewFeeRate;\n+    // The wallet uses a conservative WALLET_INCREMENTAL_RELAY_FEE value to\n+    // future proof against changes to network wide policy for incremental relay\n+    // fee that our node may not be aware of.\n+    CFeeRate walletIncrementalRelayFee = CFeeRate(WALLET_INCREMENTAL_RELAY_FEE);\n+    if (::incrementalRelayFee > walletIncrementalRelayFee) {\n+        walletIncrementalRelayFee = ::incrementalRelayFee;\n+    }\n \n     if (totalFee > 0) {\n         CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + ::incrementalRelayFee.GetFee(maxNewTxSize);\n         if (totalFee < minTotalFee) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid totalFee, must be at least %s (oldFee %s + relayFee %s)\", FormatMoney(minTotalFee), nOldFeeRate.GetFee(maxNewTxSize), ::incrementalRelayFee.GetFee(maxNewTxSize)));\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Insufficient totalFee, must be at least %s (oldFee %s + incrementalFee %s)\",\n+                                                                FormatMoney(minTotalFee), FormatMoney(nOldFeeRate.GetFee(maxNewTxSize)), FormatMoney(::incrementalRelayFee.GetFee(maxNewTxSize))));\n         }\n         nNewFee = totalFee;\n         nNewFeeRate = CFeeRate(totalFee, maxNewTxSize);\n@@ -2806,9 +2814,9 @@ UniValue bumpfee(const JSONRPCRequest& request)\n \n         nNewFeeRate = CFeeRate(nNewFee, maxNewTxSize);\n \n-        // new fee rate must be at least old rate + minimum incremental relay rate\n-        if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::incrementalRelayFee.GetFeePerK()) {\n-            nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::incrementalRelayFee.GetFeePerK());\n+        // New fee rate must be at least old rate + minimum incremental relay rate\n+        if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + walletIncrementalRelayFee.GetFeePerK()) {\n+            nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + walletIncrementalRelayFee.GetFeePerK());\n             nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n         }\n     }"
      },
      {
        "sha": "764a7aa268f7407787b1df250ea5a57dc2931b6d",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c0c63f70a5376b87508e8f1c73dcbc59c8a96ed/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c0c63f70a5376b87508e8f1c73dcbc59c8a96ed/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=0c0c63f70a5376b87508e8f1c73dcbc59c8a96ed",
        "patch": "@@ -48,6 +48,8 @@ static const CAmount DEFAULT_TRANSACTION_FEE = 0;\n static const CAmount DEFAULT_FALLBACK_FEE = 20000;\n //! -mintxfee default\n static const CAmount DEFAULT_TRANSACTION_MINFEE = 1000;\n+//! minimum recommended increment for BIP 125 replacement txs\n+static const CAmount WALLET_INCREMENTAL_RELAY_FEE = 5000;\n //! target minimum change amount\n static const CAmount MIN_CHANGE = CENT;\n //! final minimum change amount after paying for fees"
      }
    ]
  },
  {
    "sha": "4b189c13401bcd350c05cf8194beaeb3d18b3ebc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YjE4OWMxMzQwMWJjZDM1MGMwNWNmODE5NGJlYWViM2QxOGIzZWJj",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-01-23T18:15:48Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-01-26T17:03:47Z"
      },
      "message": "Change bumpfee result value from 'oldfee' to 'origfee'.\n\nThe result value indicates the actual fee on the transaction that was replaced. But there is an error message which uses the description 'oldfee' to refer to the original fee rate applied to the new transaction's estimated max size.  It was confusing that two different uses of 'oldfee' had two different numeric values.",
      "tree": {
        "sha": "8592419a816b2e4abc3e992e05f2e022573e15d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8592419a816b2e4abc3e992e05f2e022573e15d3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4b189c13401bcd350c05cf8194beaeb3d18b3ebc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b189c13401bcd350c05cf8194beaeb3d18b3ebc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4b189c13401bcd350c05cf8194beaeb3d18b3ebc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b189c13401bcd350c05cf8194beaeb3d18b3ebc/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0c0c63f70a5376b87508e8f1c73dcbc59c8a96ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c0c63f70a5376b87508e8f1c73dcbc59c8a96ed",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0c0c63f70a5376b87508e8f1c73dcbc59c8a96ed"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "2e381630c8ad6fa51819ee27ee482b33c6133b10",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b189c13401bcd350c05cf8194beaeb3d18b3ebc/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b189c13401bcd350c05cf8194beaeb3d18b3ebc/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=4b189c13401bcd350c05cf8194beaeb3d18b3ebc",
        "patch": "@@ -2674,8 +2674,8 @@ UniValue bumpfee(const JSONRPCRequest& request)\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n-            \"  \\\"oldfee\\\":  n,         (numeric) Fee of the replaced transaction\\n\"\n-            \"  \\\"fee\\\":     n,         (numeric) Fee of the new transaction\\n\"\n+            \"  \\\"origfee\\\":  n,         (numeric) Fee of the replaced transaction\\n\"\n+            \"  \\\"fee\\\":      n,         (numeric) Fee of the new transaction\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n@@ -2899,7 +2899,7 @@ UniValue bumpfee(const JSONRPCRequest& request)\n \n     UniValue result(UniValue::VOBJ);\n     result.push_back(Pair(\"txid\", wtxBumped.GetHash().GetHex()));\n-    result.push_back(Pair(\"oldfee\", ValueFromAmount(nOldFee)));\n+    result.push_back(Pair(\"origfee\", ValueFromAmount(nOldFee)));\n     result.push_back(Pair(\"fee\", ValueFromAmount(nNewFee)));\n \n     return result;"
      }
    ]
  },
  {
    "sha": "b7b48c8bbdf7a90861610b035d8b0a247ef78c45",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiN2I0OGM4YmJkZjdhOTA4NjE2MTBiMDM1ZDhiMGEyNDdlZjc4YzQ1",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-01-27T08:43:41Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-01-27T09:13:20Z"
      },
      "message": "Refactor: Remove using namespace <xxx> from src/*.cpp.",
      "tree": {
        "sha": "76e6ff7c7547127960ff5e603da95b669cbfdb26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/76e6ff7c7547127960ff5e603da95b669cbfdb26"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b7b48c8bbdf7a90861610b035d8b0a247ef78c45",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7b48c8bbdf7a90861610b035d8b0a247ef78c45",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b7b48c8bbdf7a90861610b035d8b0a247ef78c45",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7b48c8bbdf7a90861610b035d8b0a247ef78c45/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9b4d2673b7757fd242b13c972c73897c92a90ce1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b4d2673b7757fd242b13c972c73897c92a90ce1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9b4d2673b7757fd242b13c972c73897c92a90ce1"
      }
    ],
    "stats": {
      "total": 385,
      "additions": 179,
      "deletions": 206
    },
    "files": [
      {
        "sha": "8d47cb76e8a58bebaf10b494776d240ea6793ca5",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 15,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7b48c8bbdf7a90861610b035d8b0a247ef78c45/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7b48c8bbdf7a90861610b035d8b0a247ef78c45/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=b7b48c8bbdf7a90861610b035d8b0a247ef78c45",
        "patch": "@@ -19,23 +19,21 @@\n #define LN2SQUARED 0.4804530139182014246671025263266649717305529515945455\n #define LN2 0.6931471805599453094172321214581765680755001343602552\n \n-using namespace std;\n-\n CBloomFilter::CBloomFilter(unsigned int nElements, double nFPRate, unsigned int nTweakIn, unsigned char nFlagsIn) :\n     /**\n      * The ideal size for a bloom filter with a given number of elements and false positive rate is:\n      * - nElements * log(fp rate) / ln(2)^2\n      * We ignore filter parameters which will create a bloom filter larger than the protocol limits\n      */\n-    vData(min((unsigned int)(-1  / LN2SQUARED * nElements * log(nFPRate)), MAX_BLOOM_FILTER_SIZE * 8) / 8),\n+    vData(std::min((unsigned int)(-1  / LN2SQUARED * nElements * log(nFPRate)), MAX_BLOOM_FILTER_SIZE * 8) / 8),\n     /**\n      * The ideal number of hash functions is filter size * ln(2) / number of elements\n      * Again, we ignore filter parameters which will create a bloom filter with more hash functions than the protocol limits\n      * See https://en.wikipedia.org/wiki/Bloom_filter for an explanation of these formulas\n      */\n     isFull(false),\n     isEmpty(true),\n-    nHashFuncs(min((unsigned int)(vData.size() * 8 / nElements * LN2), MAX_HASH_FUNCS)),\n+    nHashFuncs(std::min((unsigned int)(vData.size() * 8 / nElements * LN2), MAX_HASH_FUNCS)),\n     nTweak(nTweakIn),\n     nFlags(nFlagsIn)\n {\n@@ -58,7 +56,7 @@ inline unsigned int CBloomFilter::Hash(unsigned int nHashNum, const std::vector<\n     return MurmurHash3(nHashNum * 0xFBA4C795 + nTweak, vDataToHash) % (vData.size() * 8);\n }\n \n-void CBloomFilter::insert(const vector<unsigned char>& vKey)\n+void CBloomFilter::insert(const std::vector<unsigned char>& vKey)\n {\n     if (isFull)\n         return;\n@@ -75,17 +73,17 @@ void CBloomFilter::insert(const COutPoint& outpoint)\n {\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n     stream << outpoint;\n-    vector<unsigned char> data(stream.begin(), stream.end());\n+    std::vector<unsigned char> data(stream.begin(), stream.end());\n     insert(data);\n }\n \n void CBloomFilter::insert(const uint256& hash)\n {\n-    vector<unsigned char> data(hash.begin(), hash.end());\n+    std::vector<unsigned char> data(hash.begin(), hash.end());\n     insert(data);\n }\n \n-bool CBloomFilter::contains(const vector<unsigned char>& vKey) const\n+bool CBloomFilter::contains(const std::vector<unsigned char>& vKey) const\n {\n     if (isFull)\n         return true;\n@@ -105,13 +103,13 @@ bool CBloomFilter::contains(const COutPoint& outpoint) const\n {\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n     stream << outpoint;\n-    vector<unsigned char> data(stream.begin(), stream.end());\n+    std::vector<unsigned char> data(stream.begin(), stream.end());\n     return contains(data);\n }\n \n bool CBloomFilter::contains(const uint256& hash) const\n {\n-    vector<unsigned char> data(hash.begin(), hash.end());\n+    std::vector<unsigned char> data(hash.begin(), hash.end());\n     return contains(data);\n }\n \n@@ -154,7 +152,7 @@ bool CBloomFilter::IsRelevantAndUpdate(const CTransaction& tx)\n         // This means clients don't have to update the filter themselves when a new relevant tx \n         // is discovered in order to find spending transactions, which avoids round-tripping and race conditions.\n         CScript::const_iterator pc = txout.scriptPubKey.begin();\n-        vector<unsigned char> data;\n+        std::vector<unsigned char> data;\n         while (pc < txout.scriptPubKey.end())\n         {\n             opcodetype opcode;\n@@ -168,7 +166,7 @@ bool CBloomFilter::IsRelevantAndUpdate(const CTransaction& tx)\n                 else if ((nFlags & BLOOM_UPDATE_MASK) == BLOOM_UPDATE_P2PUBKEY_ONLY)\n                 {\n                     txnouttype type;\n-                    vector<vector<unsigned char> > vSolutions;\n+                    std::vector<std::vector<unsigned char> > vSolutions;\n                     if (Solver(txout.scriptPubKey, type, vSolutions) &&\n                             (type == TX_PUBKEY || type == TX_MULTISIG))\n                         insert(COutPoint(hash, i));\n@@ -189,7 +187,7 @@ bool CBloomFilter::IsRelevantAndUpdate(const CTransaction& tx)\n \n         // Match if the filter contains any arbitrary script data element in any scriptSig in tx\n         CScript::const_iterator pc = txin.scriptSig.begin();\n-        vector<unsigned char> data;\n+        std::vector<unsigned char> data;\n         while (pc < txin.scriptSig.end())\n         {\n             opcodetype opcode;\n@@ -280,7 +278,7 @@ void CRollingBloomFilter::insert(const std::vector<unsigned char>& vKey)\n \n void CRollingBloomFilter::insert(const uint256& hash)\n {\n-    vector<unsigned char> vData(hash.begin(), hash.end());\n+    std::vector<unsigned char> vData(hash.begin(), hash.end());\n     insert(vData);\n }\n \n@@ -300,7 +298,7 @@ bool CRollingBloomFilter::contains(const std::vector<unsigned char>& vKey) const\n \n bool CRollingBloomFilter::contains(const uint256& hash) const\n {\n-    vector<unsigned char> vData(hash.begin(), hash.end());\n+    std::vector<unsigned char> vData(hash.begin(), hash.end());\n     return contains(vData);\n }\n "
      },
      {
        "sha": "a5b369c4fc4c3e11eb6e33a0e5fc47a9e90b8752",
        "filename": "src/chain.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7b48c8bbdf7a90861610b035d8b0a247ef78c45/src/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7b48c8bbdf7a90861610b035d8b0a247ef78c45/src/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.cpp?ref=b7b48c8bbdf7a90861610b035d8b0a247ef78c45",
        "patch": "@@ -5,8 +5,6 @@\n \n #include \"chain.h\"\n \n-using namespace std;\n-\n /**\n  * CChain implementation\n  */"
      },
      {
        "sha": "a5f232c22857a05b55ae3f79a3106122300065ea",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 16,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7b48c8bbdf7a90861610b035d8b0a247ef78c45/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7b48c8bbdf7a90861610b035d8b0a247ef78c45/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=b7b48c8bbdf7a90861610b035d8b0a247ef78c45",
        "patch": "@@ -20,13 +20,11 @@\n #include <boost/algorithm/string/split.hpp>\n #include <boost/assign/list_of.hpp>\n \n-using namespace std;\n-\n CScript ParseScript(const std::string& s)\n {\n     CScript result;\n \n-    static map<string, opcodetype> mapOpNames;\n+    static std::map<std::string, opcodetype> mapOpNames;\n \n     if (mapOpNames.empty())\n     {\n@@ -39,15 +37,15 @@ CScript ParseScript(const std::string& s)\n             const char* name = GetOpName((opcodetype)op);\n             if (strcmp(name, \"OP_UNKNOWN\") == 0)\n                 continue;\n-            string strName(name);\n+            std::string strName(name);\n             mapOpNames[strName] = (opcodetype)op;\n             // Convenience: OP_ADD and just ADD are both recognized:\n             boost::algorithm::replace_first(strName, \"OP_\", \"\");\n             mapOpNames[strName] = (opcodetype)op;\n         }\n     }\n \n-    vector<string> words;\n+    std::vector<std::string> words;\n     boost::algorithm::split(words, s, boost::algorithm::is_any_of(\" \\t\\n\"), boost::algorithm::token_compress_on);\n \n     for (std::vector<std::string>::const_iterator w = words.begin(); w != words.end(); ++w)\n@@ -57,16 +55,16 @@ CScript ParseScript(const std::string& s)\n             // Empty string, ignore. (boost::split given '' will return one word)\n         }\n         else if (all(*w, boost::algorithm::is_digit()) ||\n-            (boost::algorithm::starts_with(*w, \"-\") && all(string(w->begin()+1, w->end()), boost::algorithm::is_digit())))\n+            (boost::algorithm::starts_with(*w, \"-\") && all(std::string(w->begin()+1, w->end()), boost::algorithm::is_digit())))\n         {\n             // Number\n             int64_t n = atoi64(*w);\n             result << n;\n         }\n-        else if (boost::algorithm::starts_with(*w, \"0x\") && (w->begin()+2 != w->end()) && IsHex(string(w->begin()+2, w->end())))\n+        else if (boost::algorithm::starts_with(*w, \"0x\") && (w->begin()+2 != w->end()) && IsHex(std::string(w->begin()+2, w->end())))\n         {\n             // Raw hex data, inserted NOT pushed onto stack:\n-            std::vector<unsigned char> raw = ParseHex(string(w->begin()+2, w->end()));\n+            std::vector<unsigned char> raw = ParseHex(std::string(w->begin()+2, w->end()));\n             result.insert(result.end(), raw.begin(), raw.end());\n         }\n         else if (w->size() >= 2 && boost::algorithm::starts_with(*w, \"'\") && boost::algorithm::ends_with(*w, \"'\"))\n@@ -83,7 +81,7 @@ CScript ParseScript(const std::string& s)\n         }\n         else\n         {\n-            throw runtime_error(\"script parse error\");\n+            throw std::runtime_error(\"script parse error\");\n         }\n     }\n \n@@ -95,7 +93,7 @@ bool DecodeHexTx(CMutableTransaction& tx, const std::string& strHexTx, bool fTry\n     if (!IsHex(strHexTx))\n         return false;\n \n-    vector<unsigned char> txData(ParseHex(strHexTx));\n+    std::vector<unsigned char> txData(ParseHex(strHexTx));\n \n     if (fTryNoWitness) {\n         CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS);\n@@ -138,9 +136,9 @@ bool DecodeHexBlk(CBlock& block, const std::string& strHexBlk)\n     return true;\n }\n \n-uint256 ParseHashUV(const UniValue& v, const string& strName)\n+uint256 ParseHashUV(const UniValue& v, const std::string& strName)\n {\n-    string strHex;\n+    std::string strHex;\n     if (v.isStr())\n         strHex = v.getValStr();\n     return ParseHashStr(strHex, strName);  // Note: ParseHashStr(\"\") throws a runtime_error\n@@ -149,19 +147,19 @@ uint256 ParseHashUV(const UniValue& v, const string& strName)\n uint256 ParseHashStr(const std::string& strHex, const std::string& strName)\n {\n     if (!IsHex(strHex)) // Note: IsHex(\"\") is false\n-        throw runtime_error(strName+\" must be hexadecimal string (not '\"+strHex+\"')\");\n+        throw std::runtime_error(strName + \" must be hexadecimal string (not '\" + strHex + \"')\");\n \n     uint256 result;\n     result.SetHex(strHex);\n     return result;\n }\n \n-vector<unsigned char> ParseHexUV(const UniValue& v, const string& strName)\n+std::vector<unsigned char> ParseHexUV(const UniValue& v, const std::string& strName)\n {\n-    string strHex;\n+    std::string strHex;\n     if (v.isStr())\n         strHex = v.getValStr();\n     if (!IsHex(strHex))\n-        throw runtime_error(strName+\" must be hexadecimal string (not '\"+strHex+\"')\");\n+        throw std::runtime_error(strName + \" must be hexadecimal string (not '\" + strHex + \"')\");\n     return ParseHex(strHex);\n }"
      },
      {
        "sha": "b0993a131f02a8be24b33d36b8b43c60225d12de",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 22,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7b48c8bbdf7a90861610b035d8b0a247ef78c45/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7b48c8bbdf7a90861610b035d8b0a247ef78c45/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=b7b48c8bbdf7a90861610b035d8b0a247ef78c45",
        "patch": "@@ -18,16 +18,14 @@\n #include <boost/assign/list_of.hpp>\n #include <boost/foreach.hpp>\n \n-using namespace std;\n-\n-string FormatScript(const CScript& script)\n+std::string FormatScript(const CScript& script)\n {\n-    string ret;\n+    std::string ret;\n     CScript::const_iterator it = script.begin();\n     opcodetype op;\n     while (it != script.end()) {\n         CScript::const_iterator it2 = it;\n-        vector<unsigned char> vch;\n+        std::vector<unsigned char> vch;\n         if (script.GetOp2(it, op, &vch)) {\n             if (op == OP_0) {\n                 ret += \"0 \";\n@@ -36,9 +34,9 @@ string FormatScript(const CScript& script)\n                 ret += strprintf(\"%i \", op - OP_1NEGATE - 1);\n                 continue;\n             } else if (op >= OP_NOP && op <= OP_NOP10) {\n-                string str(GetOpName(op));\n-                if (str.substr(0, 3) == string(\"OP_\")) {\n-                    ret += str.substr(3, string::npos) + \" \";\n+                std::string str(GetOpName(op));\n+                if (str.substr(0, 3) == std::string(\"OP_\")) {\n+                    ret += str.substr(3, std::string::npos) + \" \";\n                     continue;\n                 }\n             }\n@@ -55,14 +53,14 @@ string FormatScript(const CScript& script)\n     return ret.substr(0, ret.size() - 1);\n }\n \n-const map<unsigned char, string> mapSigHashTypes =\n+const std::map<unsigned char, std::string> mapSigHashTypes =\n     boost::assign::map_list_of\n-    (static_cast<unsigned char>(SIGHASH_ALL), string(\"ALL\"))\n-    (static_cast<unsigned char>(SIGHASH_ALL|SIGHASH_ANYONECANPAY), string(\"ALL|ANYONECANPAY\"))\n-    (static_cast<unsigned char>(SIGHASH_NONE), string(\"NONE\"))\n-    (static_cast<unsigned char>(SIGHASH_NONE|SIGHASH_ANYONECANPAY), string(\"NONE|ANYONECANPAY\"))\n-    (static_cast<unsigned char>(SIGHASH_SINGLE), string(\"SINGLE\"))\n-    (static_cast<unsigned char>(SIGHASH_SINGLE|SIGHASH_ANYONECANPAY), string(\"SINGLE|ANYONECANPAY\"))\n+    (static_cast<unsigned char>(SIGHASH_ALL), std::string(\"ALL\"))\n+    (static_cast<unsigned char>(SIGHASH_ALL|SIGHASH_ANYONECANPAY), std::string(\"ALL|ANYONECANPAY\"))\n+    (static_cast<unsigned char>(SIGHASH_NONE), std::string(\"NONE\"))\n+    (static_cast<unsigned char>(SIGHASH_NONE|SIGHASH_ANYONECANPAY), std::string(\"NONE|ANYONECANPAY\"))\n+    (static_cast<unsigned char>(SIGHASH_SINGLE), std::string(\"SINGLE\"))\n+    (static_cast<unsigned char>(SIGHASH_SINGLE|SIGHASH_ANYONECANPAY), std::string(\"SINGLE|ANYONECANPAY\"))\n     ;\n \n /**\n@@ -72,11 +70,11 @@ const map<unsigned char, string> mapSigHashTypes =\n  *                                     of a signature. Only pass true for scripts you believe could contain signatures. For example,\n  *                                     pass false, or omit the this argument (defaults to false), for scriptPubKeys.\n  */\n-string ScriptToAsmStr(const CScript& script, const bool fAttemptSighashDecode)\n+std::string ScriptToAsmStr(const CScript& script, const bool fAttemptSighashDecode)\n {\n-    string str;\n+    std::string str;\n     opcodetype opcode;\n-    vector<unsigned char> vch;\n+    std::vector<unsigned char> vch;\n     CScript::const_iterator pc = script.begin();\n     while (pc < script.end()) {\n         if (!str.empty()) {\n@@ -87,12 +85,12 @@ string ScriptToAsmStr(const CScript& script, const bool fAttemptSighashDecode)\n             return str;\n         }\n         if (0 <= opcode && opcode <= OP_PUSHDATA4) {\n-            if (vch.size() <= static_cast<vector<unsigned char>::size_type>(4)) {\n+            if (vch.size() <= static_cast<std::vector<unsigned char>::size_type>(4)) {\n                 str += strprintf(\"%d\", CScriptNum(vch, false).getint());\n             } else {\n                 // the IsUnspendable check makes sure not to try to decode OP_RETURN data that may match the format of a signature\n                 if (fAttemptSighashDecode && !script.IsUnspendable()) {\n-                    string strSigHashDecode;\n+                    std::string strSigHashDecode;\n                     // goal: only attempt to decode a defined sighash type from data that looks like a signature within a scriptSig.\n                     // this won't decode correctly formatted public keys in Pubkey or Multisig scripts due to\n                     // the restrictions on the pubkey formats (see IsCompressedOrUncompressedPubKey) being incongruous with the\n@@ -116,7 +114,7 @@ string ScriptToAsmStr(const CScript& script, const bool fAttemptSighashDecode)\n     return str;\n }\n \n-string EncodeHexTx(const CTransaction& tx, const int serialFlags)\n+std::string EncodeHexTx(const CTransaction& tx, const int serialFlags)\n {\n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION | serialFlags);\n     ssTx << tx;\n@@ -127,7 +125,7 @@ void ScriptPubKeyToUniv(const CScript& scriptPubKey,\n                         UniValue& out, bool fIncludeHex)\n {\n     txnouttype type;\n-    vector<CTxDestination> addresses;\n+    std::vector<CTxDestination> addresses;\n     int nRequired;\n \n     out.pushKV(\"asm\", ScriptToAsmStr(scriptPubKey));"
      },
      {
        "sha": "453fd833a3ba7f53f6c519336177260577706a48",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 16,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7b48c8bbdf7a90861610b035d8b0a247ef78c45/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7b48c8bbdf7a90861610b035d8b0a247ef78c45/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=b7b48c8bbdf7a90861610b035d8b0a247ef78c45",
        "patch": "@@ -65,8 +65,6 @@\n #include \"zmq/zmqnotificationinterface.h\"\n #endif\n \n-using namespace std;\n-\n bool fFeeEstimatesInitialized = false;\n static const bool DEFAULT_PROXYRANDOMIZE = true;\n static const bool DEFAULT_REST_ENABLE = false;\n@@ -310,10 +308,10 @@ void OnRPCStopped()\n void OnRPCPreCommand(const CRPCCommand& cmd)\n {\n     // Observe safe mode\n-    string strWarning = GetWarnings(\"rpc\");\n+    std::string strWarning = GetWarnings(\"rpc\");\n     if (strWarning != \"\" && !GetBoolArg(\"-disablesafemode\", DEFAULT_DISABLE_SAFEMODE) &&\n         !cmd.okSafeMode)\n-        throw JSONRPCError(RPC_FORBIDDEN_BY_SAFE_MODE, string(\"Safe mode: \") + strWarning);\n+        throw JSONRPCError(RPC_FORBIDDEN_BY_SAFE_MODE, std::string(\"Safe mode: \") + strWarning);\n }\n \n std::string HelpMessage(HelpMessageMode mode)\n@@ -322,7 +320,7 @@ std::string HelpMessage(HelpMessageMode mode)\n \n     // When adding new options to the categories, please keep and ensure alphabetical ordering.\n     // Do not translate _(...) -help-debug options, Many technical terms, and only a very small audience, so is unnecessary stress to translators.\n-    string strUsage = HelpMessageGroup(_(\"Options:\"));\n+    std::string strUsage = HelpMessageGroup(_(\"Options:\"));\n     strUsage += HelpMessageOpt(\"-?\", _(\"Print this help message and exit\"));\n     strUsage += HelpMessageOpt(\"-version\", _(\"Print version and exit\"));\n     strUsage += HelpMessageOpt(\"-alertnotify=<cmd>\", _(\"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\"));\n@@ -436,7 +434,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT));\n         strUsage += HelpMessageOpt(\"-bip9params=deployment:start:end\", \"Use given start/end times for specified BIP9 deployment (regtest-only)\");\n     }\n-    string debugCategories = \"addrman, alert, bench, cmpctblock, coindb, db, http, libevent, lock, mempool, mempoolrej, net, proxy, prune, rand, reindex, rpc, selectcoins, tor, zmq\"; // Don't translate these and qt below\n+    std::string debugCategories = \"addrman, alert, bench, cmpctblock, coindb, db, http, libevent, lock, mempool, mempoolrej, net, proxy, prune, rand, reindex, rpc, selectcoins, tor, zmq\"; // Don't translate these and qt below\n     if (mode == HMM_BITCOIN_QT)\n         debugCategories += \", qt\";\n     strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +\n@@ -576,15 +574,14 @@ struct CImportingNow\n // works correctly.\n void CleanupBlockRevFiles()\n {\n-    using namespace boost::filesystem;\n-    map<string, path> mapBlockFiles;\n+    std::map<std::string, boost::filesystem::path> mapBlockFiles;\n \n     // Glob all blk?????.dat and rev?????.dat files from the blocks directory.\n     // Remove the rev files immediately and insert the blk file paths into an\n     // ordered map keyed by block file index.\n     LogPrintf(\"Removing unusable blk?????.dat and rev?????.dat files for -reindex with -prune\\n\");\n-    path blocksdir = GetDataDir() / \"blocks\";\n-    for (directory_iterator it(blocksdir); it != directory_iterator(); it++) {\n+    boost::filesystem::path blocksdir = GetDataDir() / \"blocks\";\n+    for (boost::filesystem::directory_iterator it(blocksdir); it != boost::filesystem::directory_iterator(); it++) {\n         if (is_regular_file(*it) &&\n             it->path().filename().string().length() == 12 &&\n             it->path().filename().string().substr(8,4) == \".dat\")\n@@ -601,7 +598,7 @@ void CleanupBlockRevFiles()\n     // keeping a separate counter.  Once we hit a gap (or if 0 doesn't exist)\n     // start removing block files.\n     int nContigCounter = 0;\n-    BOOST_FOREACH(const PAIRTYPE(string, path)& item, mapBlockFiles) {\n+    BOOST_FOREACH(const PAIRTYPE(std::string, boost::filesystem::path)& item, mapBlockFiles) {\n         if (atoi(item.first) == nContigCounter) {\n             nContigCounter++;\n             continue;\n@@ -894,8 +891,8 @@ bool AppInitParameterInteraction()\n     fDebug = mapMultiArgs.count(\"-debug\");\n     // Special-case: if -debug=0/-nodebug is set, turn off debugging messages\n     if (fDebug) {\n-        const vector<string>& categories = mapMultiArgs.at(\"-debug\");\n-        if (GetBoolArg(\"-nodebug\", false) || find(categories.begin(), categories.end(), string(\"0\")) != categories.end())\n+        const std::vector<std::string>& categories = mapMultiArgs.at(\"-debug\");\n+        if (GetBoolArg(\"-nodebug\", false) || find(categories.begin(), categories.end(), std::string(\"0\")) != categories.end())\n             fDebug = false;\n     }\n \n@@ -1063,7 +1060,7 @@ bool AppInitParameterInteraction()\n         if (!chainparams.MineBlocksOnDemand()) {\n             return InitError(\"BIP9 parameters may only be overridden on regtest.\");\n         }\n-        const vector<string>& deployments = mapMultiArgs.at(\"-bip9params\");\n+        const std::vector<std::string>& deployments = mapMultiArgs.at(\"-bip9params\");\n         for (auto i : deployments) {\n             std::vector<std::string> vDeploymentParams;\n             boost::split(vDeploymentParams, i, boost::is_any_of(\":\"));\n@@ -1208,9 +1205,9 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     RegisterNodeSignals(GetNodeSignals());\n \n     // sanitize comments per BIP-0014, format user agent and check total size\n-    std::vector<string> uacomments;\n+    std::vector<std::string> uacomments;\n     if (mapMultiArgs.count(\"-uacomment\")) {\n-        BOOST_FOREACH(string cmt, mapMultiArgs.at(\"-uacomment\"))\n+        BOOST_FOREACH(std::string cmt, mapMultiArgs.at(\"-uacomment\"))\n         {\n             if (cmt != SanitizeString(cmt, SAFE_CHARS_UA_COMMENT))\n                 return InitError(strprintf(_(\"User Agent comment (%s) contains unsafe characters.\"), cmt));"
      },
      {
        "sha": "e3f3e4621ad8c9f19bb7ae3d256d068b77313782",
        "filename": "src/merkleblock.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7b48c8bbdf7a90861610b035d8b0a247ef78c45/src/merkleblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7b48c8bbdf7a90861610b035d8b0a247ef78c45/src/merkleblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.cpp?ref=b7b48c8bbdf7a90861610b035d8b0a247ef78c45",
        "patch": "@@ -9,14 +9,12 @@\n #include \"consensus/consensus.h\"\n #include \"utilstrencodings.h\"\n \n-using namespace std;\n-\n CMerkleBlock::CMerkleBlock(const CBlock& block, CBloomFilter& filter)\n {\n     header = block.GetBlockHeader();\n \n-    vector<bool> vMatch;\n-    vector<uint256> vHashes;\n+    std::vector<bool> vMatch;\n+    std::vector<uint256> vHashes;\n \n     vMatch.reserve(block.vtx.size());\n     vHashes.reserve(block.vtx.size());\n@@ -27,7 +25,7 @@ CMerkleBlock::CMerkleBlock(const CBlock& block, CBloomFilter& filter)\n         if (filter.IsRelevantAndUpdate(*block.vtx[i]))\n         {\n             vMatch.push_back(true);\n-            vMatchedTxn.push_back(make_pair(i, hash));\n+            vMatchedTxn.push_back(std::make_pair(i, hash));\n         }\n         else\n             vMatch.push_back(false);\n@@ -41,8 +39,8 @@ CMerkleBlock::CMerkleBlock(const CBlock& block, const std::set<uint256>& txids)\n {\n     header = block.GetBlockHeader();\n \n-    vector<bool> vMatch;\n-    vector<uint256> vHashes;\n+    std::vector<bool> vMatch;\n+    std::vector<uint256> vHashes;\n \n     vMatch.reserve(block.vtx.size());\n     vHashes.reserve(block.vtx.size());"
      },
      {
        "sha": "d01edd93b52e65b3178b6cbd4e9db4a01b62375c",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7b48c8bbdf7a90861610b035d8b0a247ef78c45/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7b48c8bbdf7a90861610b035d8b0a247ef78c45/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=b7b48c8bbdf7a90861610b035d8b0a247ef78c45",
        "patch": "@@ -31,8 +31,6 @@\n #include <queue>\n #include <utility>\n \n-using namespace std;\n-\n //////////////////////////////////////////////////////////////////////////////\n //\n // BitcoinMiner\n@@ -500,7 +498,7 @@ void BlockAssembler::addPackageTxs()\n         }\n \n         // Package can be added. Sort the entries in a valid order.\n-        vector<CTxMemPool::txiter> sortedEntries;\n+        std::vector<CTxMemPool::txiter> sortedEntries;\n         SortForBlock(ancestors, iter, sortedEntries);\n \n         for (size_t i=0; i<sortedEntries.size(); ++i) {\n@@ -529,7 +527,7 @@ void BlockAssembler::addPriorityTxs()\n     fNeedSizeAccounting = true;\n \n     // This vector will be sorted into a priority queue:\n-    vector<TxCoinAgePriority> vecPriority;\n+    std::vector<TxCoinAgePriority> vecPriority;\n     TxCoinAgePriorityCompare pricomparer;\n     std::map<CTxMemPool::txiter, double, CTxMemPool::CompareIteratorByHash> waitPriMap;\n     typedef std::map<CTxMemPool::txiter, double, CTxMemPool::CompareIteratorByHash>::iterator waitPriIter;"
      },
      {
        "sha": "b9667eb6c64b7e7092ae8a62e291d71ab578d1bc",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 53,
        "changes": 104,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7b48c8bbdf7a90861610b035d8b0a247ef78c45/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7b48c8bbdf7a90861610b035d8b0a247ef78c45/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=b7b48c8bbdf7a90861610b035d8b0a247ef78c45",
        "patch": "@@ -32,8 +32,6 @@\n \n #include <boost/thread.hpp>\n \n-using namespace std;\n-\n #if defined(NDEBUG)\n # error \"Bitcoin cannot be compiled without assertions.\"\n #endif\n@@ -55,8 +53,8 @@ struct COrphanTx {\n     NodeId fromPeer;\n     int64_t nTimeExpire;\n };\n-map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(cs_main);\n-map<COutPoint, set<map<uint256, COrphanTx>::iterator, IteratorComparator>> mapOrphanTransactionsByPrev GUARDED_BY(cs_main);\n+std::map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(cs_main);\n+std::map<COutPoint, std::set<std::map<uint256, COrphanTx>::iterator, IteratorComparator>> mapOrphanTransactionsByPrev GUARDED_BY(cs_main);\n void EraseOrphansFor(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n static size_t vExtraTxnForCompactIt = 0;\n@@ -76,7 +74,7 @@ namespace {\n      * Set mapBlockSource[hash].second to false if the node should not be\n      * punished if the block is invalid.\n      */\n-    map<uint256, std::pair<NodeId, bool>> mapBlockSource;\n+    std::map<uint256, std::pair<NodeId, bool>> mapBlockSource;\n \n     /**\n      * Filter for transactions that were recently rejected by\n@@ -108,10 +106,10 @@ namespace {\n         bool fValidatedHeaders;                                  //!< Whether this block has validated headers at the time of request.\n         std::unique_ptr<PartiallyDownloadedBlock> partialBlock;  //!< Optional, used for CMPCTBLOCK downloads\n     };\n-    map<uint256, pair<NodeId, list<QueuedBlock>::iterator> > mapBlocksInFlight;\n+    std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator> > mapBlocksInFlight;\n \n     /** Stack of nodes which we have set to announce using compact blocks */\n-    list<NodeId> lNodesAnnouncingHeaderAndIDs;\n+    std::list<NodeId> lNodesAnnouncingHeaderAndIDs;\n \n     /** Number of preferable block download peers. */\n     int nPreferredDownload = 0;\n@@ -135,7 +133,7 @@ namespace {\n \n struct CBlockReject {\n     unsigned char chRejectCode;\n-    string strRejectReason;\n+    std::string strRejectReason;\n     uint256 hashBlock;\n };\n \n@@ -172,7 +170,7 @@ struct CNodeState {\n     bool fSyncStarted;\n     //! Since when we're stalling block download progress (in microseconds), or 0.\n     int64_t nStallingSince;\n-    list<QueuedBlock> vBlocksInFlight;\n+    std::list<QueuedBlock> vBlocksInFlight;\n     //! When the first entry in vBlocksInFlight started downloading. Don't care when vBlocksInFlight is empty.\n     int64_t nDownloadingSince;\n     int nBlocksInFlight;\n@@ -224,11 +222,11 @@ struct CNodeState {\n };\n \n /** Map maintaining per-node state. Requires cs_main. */\n-map<NodeId, CNodeState> mapNodeState;\n+std::map<NodeId, CNodeState> mapNodeState;\n \n // Requires cs_main.\n CNodeState *State(NodeId pnode) {\n-    map<NodeId, CNodeState>::iterator it = mapNodeState.find(pnode);\n+    std::map<NodeId, CNodeState>::iterator it = mapNodeState.find(pnode);\n     if (it == mapNodeState.end())\n         return NULL;\n     return &it->second;\n@@ -310,7 +308,7 @@ void FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTime) {\n // Returns a bool indicating whether we requested this block.\n // Also used if a block was /not/ received and timed out or started with another peer\n bool MarkBlockAsReceived(const uint256& hash) {\n-    map<uint256, pair<NodeId, list<QueuedBlock>::iterator> >::iterator itInFlight = mapBlocksInFlight.find(hash);\n+    std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator> >::iterator itInFlight = mapBlocksInFlight.find(hash);\n     if (itInFlight != mapBlocksInFlight.end()) {\n         CNodeState *state = State(itInFlight->second.first);\n         state->nBlocksInFlightValidHeaders -= itInFlight->second.second->fValidatedHeaders;\n@@ -334,12 +332,12 @@ bool MarkBlockAsReceived(const uint256& hash) {\n // Requires cs_main.\n // returns false, still setting pit, if the block was already in flight from the same peer\n // pit will only be valid as long as the same cs_main lock is being held\n-bool MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, const Consensus::Params& consensusParams, const CBlockIndex *pindex = NULL, list<QueuedBlock>::iterator **pit = NULL) {\n+bool MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, const Consensus::Params& consensusParams, const CBlockIndex* pindex = NULL, std::list<QueuedBlock>::iterator** pit = NULL) {\n     CNodeState *state = State(nodeid);\n     assert(state != NULL);\n \n     // Short-circuit most stuff in case its from the same node\n-    map<uint256, pair<NodeId, list<QueuedBlock>::iterator> >::iterator itInFlight = mapBlocksInFlight.find(hash);\n+    std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator> >::iterator itInFlight = mapBlocksInFlight.find(hash);\n     if (itInFlight != mapBlocksInFlight.end() && itInFlight->second.first == nodeid) {\n         *pit = &itInFlight->second.second;\n         return false;\n@@ -348,7 +346,7 @@ bool MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, const Consensus::Pa\n     // Make sure it's not listed somewhere already.\n     MarkBlockAsReceived(hash);\n \n-    list<QueuedBlock>::iterator it = state->vBlocksInFlight.insert(state->vBlocksInFlight.end(),\n+    std::list<QueuedBlock>::iterator it = state->vBlocksInFlight.insert(state->vBlocksInFlight.end(),\n             {hash, pindex, pindex != NULL, std::unique_ptr<PartiallyDownloadedBlock>(pit ? new PartiallyDownloadedBlock(&mempool) : NULL)});\n     state->nBlocksInFlight++;\n     state->nBlocksInFlightValidHeaders += it->fValidatedHeaders;\n@@ -640,7 +638,7 @@ bool AddOrphanTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRE\n \n int static EraseOrphanTx(uint256 hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n-    map<uint256, COrphanTx>::iterator it = mapOrphanTransactions.find(hash);\n+    std::map<uint256, COrphanTx>::iterator it = mapOrphanTransactions.find(hash);\n     if (it == mapOrphanTransactions.end())\n         return 0;\n     BOOST_FOREACH(const CTxIn& txin, it->second.tx->vin)\n@@ -659,10 +657,10 @@ int static EraseOrphanTx(uint256 hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n void EraseOrphansFor(NodeId peer)\n {\n     int nErased = 0;\n-    map<uint256, COrphanTx>::iterator iter = mapOrphanTransactions.begin();\n+    std::map<uint256, COrphanTx>::iterator iter = mapOrphanTransactions.begin();\n     while (iter != mapOrphanTransactions.end())\n     {\n-        map<uint256, COrphanTx>::iterator maybeErase = iter++; // increment to avoid iterator becoming invalid\n+        std::map<uint256, COrphanTx>::iterator maybeErase = iter++; // increment to avoid iterator becoming invalid\n         if (maybeErase->second.fromPeer == peer)\n         {\n             nErased += EraseOrphanTx(maybeErase->second.tx->GetHash());\n@@ -681,10 +679,10 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans) EXCLUSIVE_LOCKS_REQUIRE\n         // Sweep out expired orphan pool entries:\n         int nErased = 0;\n         int64_t nMinExpTime = nNow + ORPHAN_TX_EXPIRE_TIME - ORPHAN_TX_EXPIRE_INTERVAL;\n-        map<uint256, COrphanTx>::iterator iter = mapOrphanTransactions.begin();\n+        std::map<uint256, COrphanTx>::iterator iter = mapOrphanTransactions.begin();\n         while (iter != mapOrphanTransactions.end())\n         {\n-            map<uint256, COrphanTx>::iterator maybeErase = iter++;\n+            std::map<uint256, COrphanTx>::iterator maybeErase = iter++;\n             if (maybeErase->second.nTimeExpire <= nNow) {\n                 nErased += EraseOrphanTx(maybeErase->second.tx->GetHash());\n             } else {\n@@ -699,7 +697,7 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans) EXCLUSIVE_LOCKS_REQUIRE\n     {\n         // Evict a random orphan:\n         uint256 randomhash = GetRandHash();\n-        map<uint256, COrphanTx>::iterator it = mapOrphanTransactions.lower_bound(randomhash);\n+        std::map<uint256, COrphanTx>::iterator it = mapOrphanTransactions.lower_bound(randomhash);\n         if (it == mapOrphanTransactions.end())\n             it = mapOrphanTransactions.begin();\n         EraseOrphanTx(it->first);\n@@ -961,7 +959,7 @@ static void RelayAddress(const CAddress& addr, bool fReachable, CConnman& connma\n void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParams, CConnman& connman, std::atomic<bool>& interruptMsgProc)\n {\n     std::deque<CInv>::iterator it = pfrom->vRecvGetData.begin();\n-    vector<CInv> vNotFound;\n+    std::vector<CInv> vNotFound;\n     CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n     LOCK(cs_main);\n \n@@ -1083,7 +1081,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                         // Bypass PushInventory, this must send even if redundant,\n                         // and we want it right after the last block so they don't\n                         // wait for other stuff first.\n-                        vector<CInv> vInv;\n+                        std::vector<CInv> vInv;\n                         vInv.push_back(CInv(MSG_BLOCK, chainActive.Tip()->GetBlockHash()));\n                         connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::INV, vInv));\n                         pfrom->hashContinue.SetNull();\n@@ -1160,7 +1158,7 @@ inline void static SendBlockTransactions(const CBlock& block, const BlockTransac\n     connman.PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::BLOCKTXN, resp));\n }\n \n-bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman& connman, std::atomic<bool>& interruptMsgProc)\n+bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman& connman, std::atomic<bool>& interruptMsgProc)\n {\n     LogPrint(\"net\", \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->id);\n     if (IsArgSet(\"-dropmessagestest\") && GetRand(GetArg(\"-dropmessagestest\", 0)) == 0)\n@@ -1190,7 +1188,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         // Each connection can only send one version message\n         if (pfrom->nVersion != 0)\n         {\n-            connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_DUPLICATE, string(\"Duplicate version message\")));\n+            connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_DUPLICATE, std::string(\"Duplicate version message\")));\n             LOCK(cs_main);\n             Misbehaving(pfrom->GetId(), 1);\n             return false;\n@@ -1311,7 +1309,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         pfrom->fSuccessfullyConnected = true;\n \n-        string remoteAddr;\n+        std::string remoteAddr;\n         if (fLogIPs)\n             remoteAddr = \", peeraddr=\" + pfrom->addr.ToString();\n \n@@ -1352,7 +1350,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n     if (strCommand == NetMsgType::VERACK)\n     {\n-        pfrom->SetRecvVersion(min(pfrom->nVersion, PROTOCOL_VERSION));\n+        pfrom->SetRecvVersion(std::min(pfrom->nVersion, PROTOCOL_VERSION));\n \n         if (!pfrom->fInbound) {\n             // Mark this node as currently connected, so we update its timestamp later.\n@@ -1385,7 +1383,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n     else if (strCommand == NetMsgType::ADDR)\n     {\n-        vector<CAddress> vAddr;\n+        std::vector<CAddress> vAddr;\n         vRecv >> vAddr;\n \n         // Don't want addr from older versions unless seeding\n@@ -1399,7 +1397,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         }\n \n         // Store the new addresses\n-        vector<CAddress> vAddrOk;\n+        std::vector<CAddress> vAddrOk;\n         int64_t nNow = GetAdjustedTime();\n         int64_t nSince = nNow - 10 * 60;\n         BOOST_FOREACH(CAddress& addr, vAddr)\n@@ -1462,7 +1460,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n     else if (strCommand == NetMsgType::INV)\n     {\n-        vector<CInv> vInv;\n+        std::vector<CInv> vInv;\n         vRecv >> vInv;\n         if (vInv.size() > MAX_INV_SZ)\n         {\n@@ -1529,7 +1527,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n     else if (strCommand == NetMsgType::GETDATA)\n     {\n-        vector<CInv> vInv;\n+        std::vector<CInv> vInv;\n         vRecv >> vInv;\n         if (vInv.size() > MAX_INV_SZ)\n         {\n@@ -1691,7 +1689,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         }\n \n         // we must use CBlocks, as CBlockHeaders won't include the 0x00 nTx count at the end\n-        vector<CBlock> vHeaders;\n+        std::vector<CBlock> vHeaders;\n         int nLimit = MAX_HEADERS_RESULTS;\n         LogPrint(\"net\", \"getheaders %d to %s from peer=%d\\n\", (pindex ? pindex->nHeight : -1), hashStop.IsNull() ? \"end\" : hashStop.ToString(), pfrom->id);\n         for (; pindex; pindex = chainActive.Next(pindex))\n@@ -1727,8 +1725,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             return true;\n         }\n \n-        deque<COutPoint> vWorkQueue;\n-        vector<uint256> vEraseQueue;\n+        std::deque<COutPoint> vWorkQueue;\n+        std::vector<uint256> vEraseQueue;\n         CTransactionRef ptx;\n         vRecv >> ptx;\n         const CTransaction& tx = *ptx;\n@@ -1761,7 +1759,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 mempool.size(), mempool.DynamicMemoryUsage() / 1000);\n \n             // Recursively process any orphan transactions that depended on this one\n-            set<NodeId> setMisbehaving;\n+            std::set<NodeId> setMisbehaving;\n             while (!vWorkQueue.empty()) {\n                 auto itByPrev = mapOrphanTransactionsByPrev.find(vWorkQueue.front());\n                 vWorkQueue.pop_front();\n@@ -1955,7 +1953,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         assert(pindex);\n         UpdateBlockAvailability(pfrom->GetId(), pindex->GetBlockHash());\n \n-        std::map<uint256, pair<NodeId, list<QueuedBlock>::iterator> >::iterator blockInFlightIt = mapBlocksInFlight.find(pindex->GetBlockHash());\n+        std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator> >::iterator blockInFlightIt = mapBlocksInFlight.find(pindex->GetBlockHash());\n         bool fAlreadyInFlight = blockInFlightIt != mapBlocksInFlight.end();\n \n         if (pindex->nStatus & BLOCK_HAVE_DATA) // Nothing to do here\n@@ -1990,7 +1988,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         if (pindex->nHeight <= chainActive.Height() + 2) {\n             if ((!fAlreadyInFlight && nodestate->nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER) ||\n                  (fAlreadyInFlight && blockInFlightIt->second.first == pfrom->GetId())) {\n-                list<QueuedBlock>::iterator *queuedBlockIt = NULL;\n+                std::list<QueuedBlock>::iterator* queuedBlockIt = NULL;\n                 if (!MarkBlockAsInFlight(pfrom->GetId(), pindex->GetBlockHash(), chainparams.GetConsensus(), pindex, &queuedBlockIt)) {\n                     if (!(*queuedBlockIt)->partialBlock)\n                         (*queuedBlockIt)->partialBlock.reset(new PartiallyDownloadedBlock(&mempool));\n@@ -2108,7 +2106,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         {\n             LOCK(cs_main);\n \n-            map<uint256, pair<NodeId, list<QueuedBlock>::iterator> >::iterator it = mapBlocksInFlight.find(resp.blockhash);\n+            std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator> >::iterator it = mapBlocksInFlight.find(resp.blockhash);\n             if (it == mapBlocksInFlight.end() || !it->second.second->partialBlock ||\n                     it->second.first != pfrom->GetId()) {\n                 LogPrint(\"net\", \"Peer %d sent us block transactions for block we weren't expecting\\n\", pfrom->id);\n@@ -2265,7 +2263,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         // If this set of headers is valid and ends in a block with at least as\n         // much work as our tip, download as much as possible.\n         if (fCanDirectFetch && pindexLast->IsValid(BLOCK_VALID_TREE) && chainActive.Tip()->nChainWork <= pindexLast->nChainWork) {\n-            vector<const CBlockIndex *> vToFetch;\n+            std::vector<const CBlockIndex*> vToFetch;\n             const CBlockIndex *pindexWalk = pindexLast;\n             // Calculate all the blocks we'd need to switch to pindexLast, up to a limit.\n             while (pindexWalk && !chainActive.Contains(pindexWalk) && vToFetch.size() <= MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n@@ -2286,7 +2284,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                         pindexLast->GetBlockHash().ToString(),\n                         pindexLast->nHeight);\n             } else {\n-                vector<CInv> vGetData;\n+                std::vector<CInv> vGetData;\n                 // Download as much as possible, from earliest to latest.\n                 BOOST_REVERSE_FOREACH(const CBlockIndex *pindex, vToFetch) {\n                     if (nodestate->nBlocksInFlight >= MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n@@ -2365,7 +2363,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         pfrom->fSentAddr = true;\n \n         pfrom->vAddrToSend.clear();\n-        vector<CAddress> vAddr = connman.GetAddresses();\n+        std::vector<CAddress> vAddr = connman.GetAddresses();\n         FastRandomContext insecure_rand;\n         BOOST_FOREACH(const CAddress &addr, vAddr)\n             pfrom->PushAddress(addr, insecure_rand);\n@@ -2496,7 +2494,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n     else if (strCommand == NetMsgType::FILTERADD)\n     {\n-        vector<unsigned char> vData;\n+        std::vector<unsigned char> vData;\n         vRecv >> vData;\n \n         // Nodes must NEVER send a data item > 520 bytes (the max size for a script data object,\n@@ -2534,10 +2532,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     {\n         if (fDebug) {\n             try {\n-                string strMsg; unsigned char ccode; string strReason;\n+                std::string strMsg; unsigned char ccode; std::string strReason;\n                 vRecv >> LIMITED_STRING(strMsg, CMessageHeader::COMMAND_SIZE) >> ccode >> LIMITED_STRING(strReason, MAX_REJECT_MESSAGE_LENGTH);\n \n-                ostringstream ss;\n+                std::ostringstream ss;\n                 ss << strMsg << \" code \" << itostr(ccode) << \": \" << strReason;\n \n                 if (strMsg == NetMsgType::BLOCK || strMsg == NetMsgType::TX)\n@@ -2635,7 +2633,7 @@ bool ProcessMessages(CNode* pfrom, CConnman& connman, std::atomic<bool>& interru\n             LogPrintf(\"PROCESSMESSAGE: ERRORS IN HEADER %s peer=%d\\n\", SanitizeString(hdr.GetCommand()), pfrom->id);\n             return fMoreWork;\n         }\n-        string strCommand = hdr.GetCommand();\n+        std::string strCommand = hdr.GetCommand();\n \n         // Message size\n         unsigned int nMessageSize = hdr.nMessageSize;\n@@ -2664,7 +2662,7 @@ bool ProcessMessages(CNode* pfrom, CConnman& connman, std::atomic<bool>& interru\n         }\n         catch (const std::ios_base::failure& e)\n         {\n-            connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_MALFORMED, string(\"error parsing message\")));\n+            connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_MALFORMED, std::string(\"error parsing message\")));\n             if (strstr(e.what(), \"end of data\"))\n             {\n                 // Allow exceptions from under-length message on vRecv\n@@ -2761,7 +2759,7 @@ bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsg\n         CNodeState &state = *State(pto->GetId());\n \n         BOOST_FOREACH(const CBlockReject& reject, state.rejects)\n-            connman.PushMessage(pto, msgMaker.Make(NetMsgType::REJECT, (string)NetMsgType::BLOCK, reject.chRejectCode, reject.strRejectReason, reject.hashBlock));\n+            connman.PushMessage(pto, msgMaker.Make(NetMsgType::REJECT, (std::string)NetMsgType::BLOCK, reject.chRejectCode, reject.strRejectReason, reject.hashBlock));\n         state.rejects.clear();\n \n         if (state.fShouldBan) {\n@@ -2794,7 +2792,7 @@ bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsg\n         //\n         if (pto->nNextAddrSend < nNow) {\n             pto->nNextAddrSend = PoissonNextSend(nNow, AVG_ADDRESS_BROADCAST_INTERVAL);\n-            vector<CAddress> vAddr;\n+            std::vector<CAddress> vAddr;\n             vAddr.reserve(pto->vAddrToSend.size());\n             BOOST_FOREACH(const CAddress& addr, pto->vAddrToSend)\n             {\n@@ -2862,7 +2860,7 @@ bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsg\n             // blocks, or if the peer doesn't want headers, just\n             // add all to the inv queue.\n             LOCK(pto->cs_inventory);\n-            vector<CBlock> vHeaders;\n+            std::vector<CBlock> vHeaders;\n             bool fRevertToInv = ((!state.fPreferHeaders &&\n                                  (!state.fPreferHeaderAndIDs || pto->vBlockHashesToAnnounce.size() > 1)) ||\n                                 pto->vBlockHashesToAnnounce.size() > MAX_BLOCKS_TO_ANNOUNCE);\n@@ -2994,7 +2992,7 @@ bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsg\n         //\n         // Message: inventory\n         //\n-        vector<CInv> vInv;\n+        std::vector<CInv> vInv;\n         {\n             LOCK(pto->cs_inventory);\n             vInv.reserve(std::max<size_t>(pto->vInventoryBlockToSend.size(), INVENTORY_BROADCAST_MAX));\n@@ -3059,7 +3057,7 @@ bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsg\n             // Determine transactions to relay\n             if (fSendTrickle) {\n                 // Produce a vector with all candidates for sending\n-                vector<std::set<uint256>::iterator> vInvTx;\n+                std::vector<std::set<uint256>::iterator> vInvTx;\n                 vInvTx.reserve(pto->setInventoryTxToSend.size());\n                 for (std::set<uint256>::iterator it = pto->setInventoryTxToSend.begin(); it != pto->setInventoryTxToSend.end(); it++) {\n                     vInvTx.push_back(it);\n@@ -3153,9 +3151,9 @@ bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsg\n         //\n         // Message: getdata (blocks)\n         //\n-        vector<CInv> vGetData;\n+        std::vector<CInv> vGetData;\n         if (!pto->fClient && (fFetch || !IsInitialBlockDownload()) && state.nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n-            vector<const CBlockIndex*> vToDownload;\n+            std::vector<const CBlockIndex*> vToDownload;\n             NodeId staller = -1;\n             FindNextBlocksToDownload(pto->GetId(), MAX_BLOCKS_IN_TRANSIT_PER_PEER - state.nBlocksInFlight, vToDownload, staller, consensusParams);\n             BOOST_FOREACH(const CBlockIndex *pindex, vToDownload) {"
      },
      {
        "sha": "54eefcafe364fc570afbebcff49505725760774d",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 27,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7b48c8bbdf7a90861610b035d8b0a247ef78c45/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7b48c8bbdf7a90861610b035d8b0a247ef78c45/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=b7b48c8bbdf7a90861610b035d8b0a247ef78c45",
        "patch": "@@ -20,8 +20,6 @@\n \n #include <univalue.h>\n \n-using namespace std;\n-\n static const size_t MAX_GETUTXOS_OUTPOINTS = 15; //allow a max of 15 outpoints to be queried at once\n \n enum RetFormat {\n@@ -64,7 +62,7 @@ extern UniValue mempoolToJSON(bool fVerbose = false);\n extern void ScriptPubKeyToJSON(const CScript& scriptPubKey, UniValue& out, bool fIncludeHex);\n extern UniValue blockheaderToJSON(const CBlockIndex* blockindex);\n \n-static bool RESTERR(HTTPRequest* req, enum HTTPStatusCode status, string message)\n+static bool RESTERR(HTTPRequest* req, enum HTTPStatusCode status, std::string message)\n {\n     req->WriteHeader(\"Content-Type\", \"text/plain\");\n     req->WriteReply(status, message + \"\\r\\n\");\n@@ -92,9 +90,9 @@ static enum RetFormat ParseDataFormat(std::string& param, const std::string& str\n     return rf_names[0].rf;\n }\n \n-static string AvailableDataFormatsString()\n+static std::string AvailableDataFormatsString()\n {\n-    string formats = \"\";\n+    std::string formats = \"\";\n     for (unsigned int i = 0; i < ARRAYLEN(rf_names); i++)\n         if (strlen(rf_names[i].name) > 0) {\n             formats.append(\".\");\n@@ -108,7 +106,7 @@ static string AvailableDataFormatsString()\n     return formats;\n }\n \n-static bool ParseHashStr(const string& strReq, uint256& v)\n+static bool ParseHashStr(const std::string& strReq, uint256& v)\n {\n     if (!IsHex(strReq) || (strReq.size() != 64))\n         return false;\n@@ -132,7 +130,7 @@ static bool rest_headers(HTTPRequest* req,\n         return false;\n     std::string param;\n     const RetFormat rf = ParseDataFormat(param, strURIPart);\n-    vector<string> path;\n+    std::vector<std::string> path;\n     boost::split(path, param, boost::is_any_of(\"/\"));\n \n     if (path.size() != 2)\n@@ -142,7 +140,7 @@ static bool rest_headers(HTTPRequest* req,\n     if (count < 1 || count > 2000)\n         return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + path[0]);\n \n-    string hashStr = path[1];\n+    std::string hashStr = path[1];\n     uint256 hash;\n     if (!ParseHashStr(hashStr, hash))\n         return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n@@ -168,14 +166,14 @@ static bool rest_headers(HTTPRequest* req,\n \n     switch (rf) {\n     case RF_BINARY: {\n-        string binaryHeader = ssHeader.str();\n+        std::string binaryHeader = ssHeader.str();\n         req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n         req->WriteReply(HTTP_OK, binaryHeader);\n         return true;\n     }\n \n     case RF_HEX: {\n-        string strHex = HexStr(ssHeader.begin(), ssHeader.end()) + \"\\n\";\n+        std::string strHex = HexStr(ssHeader.begin(), ssHeader.end()) + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"text/plain\");\n         req->WriteReply(HTTP_OK, strHex);\n         return true;\n@@ -185,7 +183,7 @@ static bool rest_headers(HTTPRequest* req,\n         BOOST_FOREACH(const CBlockIndex *pindex, headers) {\n             jsonHeaders.push_back(blockheaderToJSON(pindex));\n         }\n-        string strJSON = jsonHeaders.write() + \"\\n\";\n+        std::string strJSON = jsonHeaders.write() + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"application/json\");\n         req->WriteReply(HTTP_OK, strJSON);\n         return true;\n@@ -232,22 +230,22 @@ static bool rest_block(HTTPRequest* req,\n \n     switch (rf) {\n     case RF_BINARY: {\n-        string binaryBlock = ssBlock.str();\n+        std::string binaryBlock = ssBlock.str();\n         req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n         req->WriteReply(HTTP_OK, binaryBlock);\n         return true;\n     }\n \n     case RF_HEX: {\n-        string strHex = HexStr(ssBlock.begin(), ssBlock.end()) + \"\\n\";\n+        std::string strHex = HexStr(ssBlock.begin(), ssBlock.end()) + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"text/plain\");\n         req->WriteReply(HTTP_OK, strHex);\n         return true;\n     }\n \n     case RF_JSON: {\n         UniValue objBlock = blockToJSON(block, pblockindex, showTxDetails);\n-        string strJSON = objBlock.write() + \"\\n\";\n+        std::string strJSON = objBlock.write() + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"application/json\");\n         req->WriteReply(HTTP_OK, strJSON);\n         return true;\n@@ -287,7 +285,7 @@ static bool rest_chaininfo(HTTPRequest* req, const std::string& strURIPart)\n         JSONRPCRequest jsonRequest;\n         jsonRequest.params = UniValue(UniValue::VARR);\n         UniValue chainInfoObject = getblockchaininfo(jsonRequest);\n-        string strJSON = chainInfoObject.write() + \"\\n\";\n+        std::string strJSON = chainInfoObject.write() + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"application/json\");\n         req->WriteReply(HTTP_OK, strJSON);\n         return true;\n@@ -312,7 +310,7 @@ static bool rest_mempool_info(HTTPRequest* req, const std::string& strURIPart)\n     case RF_JSON: {\n         UniValue mempoolInfoObject = mempoolInfoToJSON();\n \n-        string strJSON = mempoolInfoObject.write() + \"\\n\";\n+        std::string strJSON = mempoolInfoObject.write() + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"application/json\");\n         req->WriteReply(HTTP_OK, strJSON);\n         return true;\n@@ -337,7 +335,7 @@ static bool rest_mempool_contents(HTTPRequest* req, const std::string& strURIPar\n     case RF_JSON: {\n         UniValue mempoolObject = mempoolToJSON(true);\n \n-        string strJSON = mempoolObject.write() + \"\\n\";\n+        std::string strJSON = mempoolObject.write() + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"application/json\");\n         req->WriteReply(HTTP_OK, strJSON);\n         return true;\n@@ -372,14 +370,14 @@ static bool rest_tx(HTTPRequest* req, const std::string& strURIPart)\n \n     switch (rf) {\n     case RF_BINARY: {\n-        string binaryTx = ssTx.str();\n+        std::string binaryTx = ssTx.str();\n         req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n         req->WriteReply(HTTP_OK, binaryTx);\n         return true;\n     }\n \n     case RF_HEX: {\n-        string strHex = HexStr(ssTx.begin(), ssTx.end()) + \"\\n\";\n+        std::string strHex = HexStr(ssTx.begin(), ssTx.end()) + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"text/plain\");\n         req->WriteReply(HTTP_OK, strHex);\n         return true;\n@@ -388,7 +386,7 @@ static bool rest_tx(HTTPRequest* req, const std::string& strURIPart)\n     case RF_JSON: {\n         UniValue objTx(UniValue::VOBJ);\n         TxToJSON(*tx, hashBlock, objTx);\n-        string strJSON = objTx.write() + \"\\n\";\n+        std::string strJSON = objTx.write() + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"application/json\");\n         req->WriteReply(HTTP_OK, strJSON);\n         return true;\n@@ -410,7 +408,7 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n     std::string param;\n     const RetFormat rf = ParseDataFormat(param, strURIPart);\n \n-    vector<string> uriParts;\n+    std::vector<std::string> uriParts;\n     if (param.length() > 1)\n     {\n         std::string strUriParams = param.substr(1);\n@@ -424,7 +422,7 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n \n     bool fInputParsed = false;\n     bool fCheckMemPool = false;\n-    vector<COutPoint> vOutPoints;\n+    std::vector<COutPoint> vOutPoints;\n \n     // parse/deserialize input\n     // input-format = output-format, rest/getutxos/bin requires binary input, gives binary output, ...\n@@ -498,8 +496,8 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n         return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Error: max outpoints exceeded (max: %d, tried: %d)\", MAX_GETUTXOS_OUTPOINTS, vOutPoints.size()));\n \n     // check spentness and form a bitmap (as well as a JSON capable human-readable string representation)\n-    vector<unsigned char> bitmap;\n-    vector<CCoin> outs;\n+    std::vector<unsigned char> bitmap;\n+    std::vector<CCoin> outs;\n     std::string bitmapStringRepresentation;\n     std::vector<bool> hits;\n     bitmap.resize((vOutPoints.size() + 7) / 8);\n@@ -546,7 +544,7 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n         // use exact same output as mentioned in Bip64\n         CDataStream ssGetUTXOResponse(SER_NETWORK, PROTOCOL_VERSION);\n         ssGetUTXOResponse << chainActive.Height() << chainActive.Tip()->GetBlockHash() << bitmap << outs;\n-        string ssGetUTXOResponseString = ssGetUTXOResponse.str();\n+        std::string ssGetUTXOResponseString = ssGetUTXOResponse.str();\n \n         req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n         req->WriteReply(HTTP_OK, ssGetUTXOResponseString);\n@@ -556,7 +554,7 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n     case RF_HEX: {\n         CDataStream ssGetUTXOResponse(SER_NETWORK, PROTOCOL_VERSION);\n         ssGetUTXOResponse << chainActive.Height() << chainActive.Tip()->GetBlockHash() << bitmap << outs;\n-        string strHex = HexStr(ssGetUTXOResponse.begin(), ssGetUTXOResponse.end()) + \"\\n\";\n+        std::string strHex = HexStr(ssGetUTXOResponse.begin(), ssGetUTXOResponse.end()) + \"\\n\";\n \n         req->WriteHeader(\"Content-Type\", \"text/plain\");\n         req->WriteReply(HTTP_OK, strHex);\n@@ -588,7 +586,7 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n         objGetUTXOResponse.push_back(Pair(\"utxos\", utxos));\n \n         // return json string\n-        string strJSON = objGetUTXOResponse.write() + \"\\n\";\n+        std::string strJSON = objGetUTXOResponse.write() + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"application/json\");\n         req->WriteReply(HTTP_OK, strJSON);\n         return true;"
      },
      {
        "sha": "2ff6437c732cc4571bc3671574f39f6c53bedb11",
        "filename": "src/timedata.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7b48c8bbdf7a90861610b035d8b0a247ef78c45/src/timedata.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7b48c8bbdf7a90861610b035d8b0a247ef78c45/src/timedata.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/timedata.cpp?ref=b7b48c8bbdf7a90861610b035d8b0a247ef78c45",
        "patch": "@@ -17,8 +17,6 @@\n \n #include <boost/foreach.hpp>\n \n-using namespace std;\n-\n static CCriticalSection cs_nTimeOffset;\n static int64_t nTimeOffset = 0;\n \n@@ -51,7 +49,7 @@ void AddTimeData(const CNetAddr& ip, int64_t nOffsetSample)\n {\n     LOCK(cs_nTimeOffset);\n     // Ignore duplicates\n-    static set<CNetAddr> setKnown;\n+    static std::set<CNetAddr> setKnown;\n     if (setKnown.size() == BITCOIN_TIMEDATA_MAX_SAMPLES)\n         return;\n     if (!setKnown.insert(ip).second)"
      },
      {
        "sha": "1a30bb58ad80bcdd4b6b92aa46573f8d51523a27",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 12,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7b48c8bbdf7a90861610b035d8b0a247ef78c45/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7b48c8bbdf7a90861610b035d8b0a247ef78c45/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=b7b48c8bbdf7a90861610b035d8b0a247ef78c45",
        "patch": "@@ -14,8 +14,6 @@\n \n #include <boost/thread.hpp>\n \n-using namespace std;\n-\n static const char DB_COINS = 'c';\n static const char DB_BLOCK_FILES = 'f';\n static const char DB_TXINDEX = 't';\n@@ -32,11 +30,11 @@ CCoinsViewDB::CCoinsViewDB(size_t nCacheSize, bool fMemory, bool fWipe) : db(Get\n }\n \n bool CCoinsViewDB::GetCoins(const uint256 &txid, CCoins &coins) const {\n-    return db.Read(make_pair(DB_COINS, txid), coins);\n+    return db.Read(std::make_pair(DB_COINS, txid), coins);\n }\n \n bool CCoinsViewDB::HaveCoins(const uint256 &txid) const {\n-    return db.Exists(make_pair(DB_COINS, txid));\n+    return db.Exists(std::make_pair(DB_COINS, txid));\n }\n \n uint256 CCoinsViewDB::GetBestBlock() const {\n@@ -53,9 +51,9 @@ bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n     for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end();) {\n         if (it->second.flags & CCoinsCacheEntry::DIRTY) {\n             if (it->second.coins.IsPruned())\n-                batch.Erase(make_pair(DB_COINS, it->first));\n+                batch.Erase(std::make_pair(DB_COINS, it->first));\n             else\n-                batch.Write(make_pair(DB_COINS, it->first), it->second.coins);\n+                batch.Write(std::make_pair(DB_COINS, it->first), it->second.coins);\n             changed++;\n         }\n         count++;\n@@ -73,7 +71,7 @@ CBlockTreeDB::CBlockTreeDB(size_t nCacheSize, bool fMemory, bool fWipe) : CDBWra\n }\n \n bool CBlockTreeDB::ReadBlockFileInfo(int nFile, CBlockFileInfo &info) {\n-    return Read(make_pair(DB_BLOCK_FILES, nFile), info);\n+    return Read(std::make_pair(DB_BLOCK_FILES, nFile), info);\n }\n \n bool CBlockTreeDB::WriteReindexing(bool fReindexing) {\n@@ -139,23 +137,23 @@ void CCoinsViewDBCursor::Next()\n bool CBlockTreeDB::WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*> >& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo) {\n     CDBBatch batch(*this);\n     for (std::vector<std::pair<int, const CBlockFileInfo*> >::const_iterator it=fileInfo.begin(); it != fileInfo.end(); it++) {\n-        batch.Write(make_pair(DB_BLOCK_FILES, it->first), *it->second);\n+        batch.Write(std::make_pair(DB_BLOCK_FILES, it->first), *it->second);\n     }\n     batch.Write(DB_LAST_BLOCK, nLastFile);\n     for (std::vector<const CBlockIndex*>::const_iterator it=blockinfo.begin(); it != blockinfo.end(); it++) {\n-        batch.Write(make_pair(DB_BLOCK_INDEX, (*it)->GetBlockHash()), CDiskBlockIndex(*it));\n+        batch.Write(std::make_pair(DB_BLOCK_INDEX, (*it)->GetBlockHash()), CDiskBlockIndex(*it));\n     }\n     return WriteBatch(batch, true);\n }\n \n bool CBlockTreeDB::ReadTxIndex(const uint256 &txid, CDiskTxPos &pos) {\n-    return Read(make_pair(DB_TXINDEX, txid), pos);\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);\n }\n \n bool CBlockTreeDB::WriteTxIndex(const std::vector<std::pair<uint256, CDiskTxPos> >&vect) {\n     CDBBatch batch(*this);\n     for (std::vector<std::pair<uint256,CDiskTxPos> >::const_iterator it=vect.begin(); it!=vect.end(); it++)\n-        batch.Write(make_pair(DB_TXINDEX, it->first), it->second);\n+        batch.Write(std::make_pair(DB_TXINDEX, it->first), it->second);\n     return WriteBatch(batch);\n }\n \n@@ -175,7 +173,7 @@ bool CBlockTreeDB::LoadBlockIndexGuts(boost::function<CBlockIndex*(const uint256\n {\n     std::unique_ptr<CDBIterator> pcursor(NewIterator());\n \n-    pcursor->Seek(make_pair(DB_BLOCK_INDEX, uint256()));\n+    pcursor->Seek(std::make_pair(DB_BLOCK_INDEX, uint256()));\n \n     // Load mapBlockIndex\n     while (pcursor->Valid()) {"
      },
      {
        "sha": "a1a37dac755b1eff45b4422d1645b6dc84f7aae0",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7b48c8bbdf7a90861610b035d8b0a247ef78c45/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7b48c8bbdf7a90861610b035d8b0a247ef78c45/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=b7b48c8bbdf7a90861610b035d8b0a247ef78c45",
        "patch": "@@ -18,8 +18,6 @@\n #include \"utiltime.h\"\n #include \"version.h\"\n \n-using namespace std;\n-\n CTxMemPoolEntry::CTxMemPoolEntry(const CTransactionRef& _tx, const CAmount& _nFee,\n                                  int64_t _nTime, double _entryPriority, unsigned int _entryHeight,\n                                  CAmount _inChainInputValue,\n@@ -658,7 +656,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n     const int64_t nSpendHeight = GetSpendHeight(mempoolDuplicate);\n \n     LOCK(cs);\n-    list<const CTxMemPoolEntry*> waitingOnDependants;\n+    std::list<const CTxMemPoolEntry*> waitingOnDependants;\n     for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         unsigned int i = 0;\n         checkTotal += it->GetTxSize();\n@@ -816,7 +814,7 @@ std::vector<CTxMemPool::indexed_transaction_set::const_iterator> CTxMemPool::Get\n     return iters;\n }\n \n-void CTxMemPool::queryHashes(vector<uint256>& vtxid)\n+void CTxMemPool::queryHashes(std::vector<uint256>& vtxid)\n {\n     LOCK(cs);\n     auto iters = GetSortedDepthAndScore();\n@@ -920,7 +918,7 @@ CTxMemPool::ReadFeeEstimates(CAutoFile& filein)\n     return true;\n }\n \n-void CTxMemPool::PrioritiseTransaction(const uint256 hash, const string strHash, double dPriorityDelta, const CAmount& nFeeDelta)\n+void CTxMemPool::PrioritiseTransaction(const uint256 hash, const std::string strHash, double dPriorityDelta, const CAmount& nFeeDelta)\n {\n     {\n         LOCK(cs);"
      },
      {
        "sha": "5a14e7475e1c7d386c0101a2b661a7bebc18fab7",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 24,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7b48c8bbdf7a90861610b035d8b0a247ef78c45/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7b48c8bbdf7a90861610b035d8b0a247ef78c45/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=b7b48c8bbdf7a90861610b035d8b0a247ef78c45",
        "patch": "@@ -46,8 +46,6 @@\n #include <boost/math/distributions/poisson.hpp>\n #include <boost/thread.hpp>\n \n-using namespace std;\n-\n #if defined(NDEBUG)\n # error \"Bitcoin cannot be compiled without assertions.\"\n #endif\n@@ -90,7 +88,7 @@ static void CheckBlockIndex(const Consensus::Params& consensusParams);\n /** Constant stuff for coinbase transactions we create: */\n CScript COINBASE_FLAGS;\n \n-const string strMessageMagic = \"Bitcoin Signed Message:\\n\";\n+const std::string strMessageMagic = \"Bitcoin Signed Message:\\n\";\n \n // Internal stuff\n namespace {\n@@ -123,11 +121,11 @@ namespace {\n      * as good as our current tip or better. Entries may be failed, though, and pruning nodes may be\n      * missing the data for the block.\n      */\n-    set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexCandidates;\n+    std::set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexCandidates;\n     /** All pairs A->B, where A (or one of its ancestors) misses transactions, but B has transactions.\n      * Pruned nodes may have entries where B is missing data.\n      */\n-    multimap<CBlockIndex*, CBlockIndex*> mapBlocksUnlinked;\n+    std::multimap<CBlockIndex*, CBlockIndex*> mapBlocksUnlinked;\n \n     CCriticalSection cs_LastBlockFile;\n     std::vector<CBlockFileInfo> vinfoBlockFile;\n@@ -151,10 +149,10 @@ namespace {\n     arith_uint256 nLastPreciousChainwork = 0;\n \n     /** Dirty block index entries. */\n-    set<CBlockIndex*> setDirtyBlockIndex;\n+    std::set<CBlockIndex*> setDirtyBlockIndex;\n \n     /** Dirty block file entries. */\n-    set<int> setDirtyFileInfo;\n+    std::set<int> setDirtyFileInfo;\n } // anon namespace\n \n /* Use this class to start tracking transactions that are removed from the\n@@ -517,7 +515,7 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fChe\n \n     // Check for duplicate inputs - note that this check is slow so we skip it in CheckBlock\n     if (fCheckDuplicateInputs) {\n-        set<COutPoint> vInOutPoints;\n+        std::set<COutPoint> vInOutPoints;\n         for (const auto& txin : tx.vin)\n         {\n             if (!vInOutPoints.insert(txin.prevout).second)\n@@ -596,7 +594,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n     }\n \n     // Rather not work on nonstandard transactions (unless -testnet/-regtest)\n-    string reason;\n+    std::string reason;\n     if (fRequireStandard && !IsStandardTx(tx, reason, witnessEnabled))\n         return state.DoS(0, false, REJECT_NONSTANDARD, reason);\n \n@@ -611,7 +609,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         return state.Invalid(false, REJECT_ALREADY_KNOWN, \"txn-already-in-mempool\");\n \n     // Check for conflicts with in-memory transactions\n-    set<uint256> setConflicts;\n+    std::set<uint256> setConflicts;\n     {\n     LOCK(pool.cs); // protect pool.mapNextTx\n     BOOST_FOREACH(const CTxIn &txin, tx.vin)\n@@ -831,7 +829,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         if (fReplacementTransaction)\n         {\n             CFeeRate newFeeRate(nModifiedFees, nSize);\n-            set<uint256> setConflictsParents;\n+            std::set<uint256> setConflictsParents;\n             const int maxDescendantsToVisit = 100;\n             CTxMemPool::setEntries setIterConflicting;\n             BOOST_FOREACH(const uint256 &hashConflicting, setConflicts)\n@@ -2052,13 +2050,13 @@ bool static FlushStateToDisk(CValidationState &state, FlushStateMode mode, int n\n         {\n             std::vector<std::pair<int, const CBlockFileInfo*> > vFiles;\n             vFiles.reserve(setDirtyFileInfo.size());\n-            for (set<int>::iterator it = setDirtyFileInfo.begin(); it != setDirtyFileInfo.end(); ) {\n-                vFiles.push_back(make_pair(*it, &vinfoBlockFile[*it]));\n+            for (std::set<int>::iterator it = setDirtyFileInfo.begin(); it != setDirtyFileInfo.end(); ) {\n+                vFiles.push_back(std::make_pair(*it, &vinfoBlockFile[*it]));\n                 setDirtyFileInfo.erase(it++);\n             }\n             std::vector<const CBlockIndex*> vBlocks;\n             vBlocks.reserve(setDirtyBlockIndex.size());\n-            for (set<CBlockIndex*>::iterator it = setDirtyBlockIndex.begin(); it != setDirtyBlockIndex.end(); ) {\n+            for (std::set<CBlockIndex*>::iterator it = setDirtyBlockIndex.begin(); it != setDirtyBlockIndex.end(); ) {\n                 vBlocks.push_back(*it);\n                 setDirtyBlockIndex.erase(it++);\n             }\n@@ -2670,7 +2668,7 @@ CBlockIndex* AddToBlockIndex(const CBlockHeader& block)\n     // to avoid miners withholding blocks but broadcasting headers, to get a\n     // competitive advantage.\n     pindexNew->nSequenceId = 0;\n-    BlockMap::iterator mi = mapBlockIndex.insert(make_pair(hash, pindexNew)).first;\n+    BlockMap::iterator mi = mapBlockIndex.insert(std::make_pair(hash, pindexNew)).first;\n     pindexNew->phashBlock = &((*mi).first);\n     BlockMap::iterator miPrev = mapBlockIndex.find(block.hashPrevBlock);\n     if (miPrev != mapBlockIndex.end())\n@@ -2707,7 +2705,7 @@ bool ReceivedBlockTransactions(const CBlock &block, CValidationState& state, CBl\n \n     if (pindexNew->pprev == NULL || pindexNew->pprev->nChainTx) {\n         // If pindexNew is the genesis block or all parents are BLOCK_VALID_TRANSACTIONS.\n-        deque<CBlockIndex*> queue;\n+        std::deque<CBlockIndex*> queue;\n         queue.push_back(pindexNew);\n \n         // Recursively process any descendant blocks that now may be eligible to be connected.\n@@ -3329,7 +3327,7 @@ void PruneOneBlockFile(const int fileNumber)\n \n void UnlinkPrunedFiles(std::set<int>& setFilesToPrune)\n {\n-    for (set<int>::iterator it = setFilesToPrune.begin(); it != setFilesToPrune.end(); ++it) {\n+    for (std::set<int>::iterator it = setFilesToPrune.begin(); it != setFilesToPrune.end(); ++it) {\n         CDiskBlockPos pos(*it, 0);\n         boost::filesystem::remove(GetBlockPosFilename(pos, \"blk\"));\n         boost::filesystem::remove(GetBlockPosFilename(pos, \"rev\"));\n@@ -3347,7 +3345,7 @@ void FindFilesToPruneManual(std::set<int>& setFilesToPrune, int nManualPruneHeig\n         return;\n \n     // last block to prune is the lesser of (user-specified height, MIN_BLOCKS_TO_KEEP from the tip)\n-    unsigned int nLastBlockWeCanPrune = min((unsigned)nManualPruneHeight, chainActive.Tip()->nHeight - MIN_BLOCKS_TO_KEEP);\n+    unsigned int nLastBlockWeCanPrune = std::min((unsigned)nManualPruneHeight, chainActive.Tip()->nHeight - MIN_BLOCKS_TO_KEEP);\n     int count=0;\n     for (int fileNumber = 0; fileNumber < nLastBlockFile; fileNumber++) {\n         if (vinfoBlockFile[fileNumber].nSize == 0 || vinfoBlockFile[fileNumber].nHeightLast > nLastBlockWeCanPrune)\n@@ -3474,8 +3472,8 @@ CBlockIndex * InsertBlockIndex(uint256 hash)\n     // Create new\n     CBlockIndex* pindexNew = new CBlockIndex();\n     if (!pindexNew)\n-        throw runtime_error(std::string(__func__) + \": new CBlockIndex failed\");\n-    mi = mapBlockIndex.insert(make_pair(hash, pindexNew)).first;\n+        throw std::runtime_error(std::string(__func__) + \": new CBlockIndex failed\");\n+    mi = mapBlockIndex.insert(std::make_pair(hash, pindexNew)).first;\n     pindexNew->phashBlock = &((*mi).first);\n \n     return pindexNew;\n@@ -3489,12 +3487,12 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams)\n     boost::this_thread::interruption_point();\n \n     // Calculate nChainWork\n-    vector<pair<int, CBlockIndex*> > vSortedByHeight;\n+    std::vector<std::pair<int, CBlockIndex*> > vSortedByHeight;\n     vSortedByHeight.reserve(mapBlockIndex.size());\n     BOOST_FOREACH(const PAIRTYPE(uint256, CBlockIndex*)& item, mapBlockIndex)\n     {\n         CBlockIndex* pindex = item.second;\n-        vSortedByHeight.push_back(make_pair(pindex->nHeight, pindex));\n+        vSortedByHeight.push_back(std::make_pair(pindex->nHeight, pindex));\n     }\n     sort(vSortedByHeight.begin(), vSortedByHeight.end());\n     BOOST_FOREACH(const PAIRTYPE(int, CBlockIndex*)& item, vSortedByHeight)\n@@ -3545,7 +3543,7 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams)\n \n     // Check presence of blk files\n     LogPrintf(\"Checking all blk files are present...\\n\");\n-    set<int> setBlkDataFiles;\n+    std::set<int> setBlkDataFiles;\n     BOOST_FOREACH(const PAIRTYPE(uint256, CBlockIndex*)& item, mapBlockIndex)\n     {\n         CBlockIndex* pindex = item.second;\n@@ -3932,7 +3930,7 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n                 NotifyHeaderTip();\n \n                 // Recursively process earlier encountered successors of this block\n-                deque<uint256> queue;\n+                std::deque<uint256> queue;\n                 queue.push_back(hash);\n                 while (!queue.empty()) {\n                     uint256 head = queue.front();"
      }
    ]
  },
  {
    "sha": "d9e4d1d9fbd962ac055b5098901a39766f1a0fdb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOWU0ZDFkOWZiZDk2MmFjMDU1YjUwOTg5MDFhMzk3NjZmMWEwZmRi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-27T15:17:31Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-27T15:17:39Z"
      },
      "message": "Merge #9637: [Qt] fix transaction details output-index to reflect vout index\n\n04b8773 [Qt] fix transaction details output-index to reflect vout index (Jonas Schnelli)",
      "tree": {
        "sha": "5d7ae51226f5fe8f2b657bb68db8aad7eb6fccc8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5d7ae51226f5fe8f2b657bb68db8aad7eb6fccc8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d9e4d1d9fbd962ac055b5098901a39766f1a0fdb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYi2STAAoJEHSBCwEjRsmmtikH/3k2IqyBjHT5NTqf0W0iA8XF\nJsYKEp7qJlAaOWkatc5g8RlT+TtWg1TRgJCJPsedGcH9CsfsaCPSQCgmQqAjUfaE\nE0QN7ubhWEmaJb22BwM0e0qJURNhD4W86NCnvAUZEClhuXTv7UDjHKhkHUf95sUa\n4zNnGVsxxcG71ZtvAFBBJxlnHeWX0ExmJLfEr4sdnIFyTxFUBV5ALNzEZi75dPzx\nxriKA7E98mBtxUJpZQpZhnYRpYMr2323Yobc+wRajhcbvQ1DPsOlplNXSHYoTB0S\nuTK/A1/kZUeaafsBKJiONUwvoU8runL02vkIaZ9tGyfZX0gXKasIC0A+Gb0lCUw=\n=OkzA\n-----END PGP SIGNATURE-----",
        "payload": "tree 5d7ae51226f5fe8f2b657bb68db8aad7eb6fccc8\nparent 9b4d2673b7757fd242b13c972c73897c92a90ce1\nparent 04b877361be8a457b4d4f7fd2277d73f00e2e61c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1485530251 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1485530259 +0100\n\nMerge #9637: [Qt] fix transaction details output-index to reflect vout index\n\n04b8773 [Qt] fix transaction details output-index to reflect vout index (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9e4d1d9fbd962ac055b5098901a39766f1a0fdb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d9e4d1d9fbd962ac055b5098901a39766f1a0fdb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9e4d1d9fbd962ac055b5098901a39766f1a0fdb/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9b4d2673b7757fd242b13c972c73897c92a90ce1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b4d2673b7757fd242b13c972c73897c92a90ce1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9b4d2673b7757fd242b13c972c73897c92a90ce1"
      },
      {
        "sha": "04b877361be8a457b4d4f7fd2277d73f00e2e61c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04b877361be8a457b4d4f7fd2277d73f00e2e61c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/04b877361be8a457b4d4f7fd2277d73f00e2e61c"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "a9d9b6887ec3b45634763e01ecc9c9629d23286c",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9e4d1d9fbd962ac055b5098901a39766f1a0fdb/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9e4d1d9fbd962ac055b5098901a39766f1a0fdb/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=d9e4d1d9fbd962ac055b5098901a39766f1a0fdb",
        "patch": "@@ -47,14 +47,15 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n         //\n         // Credit\n         //\n-        BOOST_FOREACH(const CTxOut& txout, wtx.tx->vout)\n+        for(unsigned int i = 0; i < wtx.tx->vout.size(); i++)\n         {\n+            const CTxOut& txout = wtx.tx->vout[i];\n             isminetype mine = wallet->IsMine(txout);\n             if(mine)\n             {\n                 TransactionRecord sub(hash, nTime);\n                 CTxDestination address;\n-                sub.idx = parts.size(); // sequence number\n+                sub.idx = i; // vout index\n                 sub.credit = txout.nValue;\n                 sub.involvesWatchAddress = mine & ISMINE_WATCH_ONLY;\n                 if (ExtractDestination(txout.scriptPubKey, address) && IsMine(*wallet, address))\n@@ -118,7 +119,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n             {\n                 const CTxOut& txout = wtx.tx->vout[nOut];\n                 TransactionRecord sub(hash, nTime);\n-                sub.idx = parts.size();\n+                sub.idx = nOut;\n                 sub.involvesWatchAddress = involvesWatchAddress;\n \n                 if(wallet->IsMine(txout))"
      }
    ]
  },
  {
    "sha": "a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphN2VhMmY4ZmRiZTkzOTJiY2JkNGEyMTlhNDJlYmQ5NTE4ZDJlMmVm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-27T15:21:57Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-27T15:33:17Z"
      },
      "message": "Merge #9638: qa: Actually test assertions in pruning.py\n\nfab035f qa: Actually test assertions in pruning.py (MarcoFalke)",
      "tree": {
        "sha": "7ec139eb1c94eccaf611f8436267950f77ac8619",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7ec139eb1c94eccaf611f8436267950f77ac8619"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYi2g9AAoJEHSBCwEjRsmm1FYH/0LmUpLDAfyMcf8SCvMA3oZa\nVI4QmGw3V4snjIutOM9OgEm4IFNmo/I7ZnfOqfgj+3ST+UirOfiFg8n3ceitVuDb\n6SvkSP6Xog/lvmUHiHMUMXCjorNQBIfvqkBrxhjATIBPwgmC+K3+Mh6S/HaBwAwk\npWvDJDeZPcNrgkLsexfzUZVdhYQY4foyg80fs38AlEqAoGISOaOkq9j4kIMajCxi\nWSZhlR7S2qJFnz8y24PvNtPxhvh6V9Vxz/YUer4o9oKZMUmJJ4HnWxljg1IX4elB\nSd8gUfuZVJe+XTIpLW6FfU0WqxHusho21GqN8oul7b+s87BkQoM050WQafJ6i0k=\n=WiIV\n-----END PGP SIGNATURE-----",
        "payload": "tree 7ec139eb1c94eccaf611f8436267950f77ac8619\nparent d9e4d1d9fbd962ac055b5098901a39766f1a0fdb\nparent fab035f2f7f7bcfca7898d00105f6cb539a2c8da\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1485530517 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1485531197 +0100\n\nMerge #9638: qa: Actually test assertions in pruning.py\n\nfab035f qa: Actually test assertions in pruning.py (MarcoFalke)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d9e4d1d9fbd962ac055b5098901a39766f1a0fdb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9e4d1d9fbd962ac055b5098901a39766f1a0fdb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d9e4d1d9fbd962ac055b5098901a39766f1a0fdb"
      },
      {
        "sha": "fab035f2f7f7bcfca7898d00105f6cb539a2c8da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab035f2f7f7bcfca7898d00105f6cb539a2c8da",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fab035f2f7f7bcfca7898d00105f6cb539a2c8da"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 17,
      "deletions": 21
    },
    "files": [
      {
        "sha": "9d155478e251a605479c097a945b6e573397efe9",
        "filename": "qa/rpc-tests/pruning.py",
        "status": "modified",
        "additions": 17,
        "deletions": 21,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef/qa/rpc-tests/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef/qa/rpc-tests/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/pruning.py?ref=a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef",
        "patch": "@@ -103,7 +103,7 @@ def create_chain_with_staleblocks(self):\n             # Disconnect node 0 so it can mine a longer reorg chain without knowing about node 1's soon-to-be-stale chain\n             # Node 2 stays connected, so it hears about the stale blocks and then reorg's when node0 reconnects\n             # Stopping node 0 also clears its mempool, so it doesn't have node1's transactions to accidentally mine\n-            stop_node(self.nodes[0],0)\n+            self.stop_node(0)\n             self.nodes[0]=start_node(0, self.options.tmpdir, [\"-debug\",\"-maxreceivebuffer=20000\",\"-blockmaxsize=999000\", \"-checkblocks=5\"], timewait=900)\n             # Mine 24 blocks in node 1\n             for i in range(24):\n@@ -128,7 +128,7 @@ def reorg_test(self):\n         # This will cause Node 2 to do a reorg requiring 288 blocks of undo data to the reorg_test chain\n         # Reboot node 1 to clear its mempool (hopefully make the invalidate faster)\n         # Lower the block max size so we don't keep mining all our big mempool transactions (from disconnected blocks)\n-        stop_node(self.nodes[1],1)\n+        self.stop_node(1)\n         self.nodes[1]=start_node(1, self.options.tmpdir, [\"-debug\",\"-maxreceivebuffer=20000\",\"-blockmaxsize=5000\", \"-checkblocks=5\", \"-disablesafemode\"], timewait=900)\n \n         height = self.nodes[1].getblockcount()\n@@ -151,7 +151,7 @@ def reorg_test(self):\n         print(\"New best height\", self.nodes[1].getblockcount())\n \n         # Reboot node1 to clear those giant tx's from mempool\n-        stop_node(self.nodes[1],1)\n+        self.stop_node(1)\n         self.nodes[1]=start_node(1, self.options.tmpdir, [\"-debug\",\"-maxreceivebuffer=20000\",\"-blockmaxsize=5000\", \"-checkblocks=5\", \"-disablesafemode\"], timewait=900)\n \n         print(\"Generating new longer chain of 300 more blocks\")\n@@ -231,7 +231,7 @@ def manual_test(self, node_number, use_timestamp):\n         node = self.nodes[node_number] = start_node(node_number, self.options.tmpdir, [\"-debug=0\"], timewait=900)\n         assert_equal(node.getblockcount(), 995)\n         assert_raises_message(JSONRPCException, \"not in prune mode\", node.pruneblockchain, 500)\n-        stop_node(node, node_number)\n+        self.stop_node(node_number)\n \n         # now re-start in manual pruning mode\n         node = self.nodes[node_number] = start_node(node_number, self.options.tmpdir, [\"-debug=0\",\"-prune=1\"], timewait=900)\n@@ -266,25 +266,21 @@ def has_block(index):\n \n         # mine 6 blocks so we are at height 1001 (i.e., above PruneAfterHeight)\n         node.generate(6)\n+        assert_equal(node.getblockchaininfo()[\"blocks\"], 1001)\n \n-        # negative and zero inputs should raise an exception\n-        try:\n-            node.pruneblockchain(-10)\n-            raise AssertionError(\"pruneblockchain(-10) should have failed.\")\n-        except:\n-            pass\n-\n-        try:\n-            node.pruneblockchain(0)\n-            raise AssertionError(\"pruneblockchain(0) should have failed.\")\n-        except:\n-            pass\n+        # negative heights should raise an exception\n+        assert_raises_message(JSONRPCException, \"Negative\", node.pruneblockchain, -10)\n \n         # height=100 too low to prune first block file so this is a no-op\n         prune(100)\n         if not has_block(0):\n             raise AssertionError(\"blk00000.dat is missing when should still be there\")\n \n+        # Does nothing\n+        node.pruneblockchain(height(0))\n+        if not has_block(0):\n+            raise AssertionError(\"blk00000.dat is missing when should still be there\")\n+\n         # height=500 should prune first file\n         prune(500)\n         if has_block(0):\n@@ -311,7 +307,7 @@ def has_block(index):\n             raise AssertionError(\"blk00003.dat is still there, should be pruned by now\")\n \n         # stop node, start back up with auto-prune at 550MB, make sure still runs\n-        stop_node(node, node_number)\n+        self.stop_node(node_number)\n         self.nodes[node_number] = start_node(node_number, self.options.tmpdir, [\"-debug=0\",\"-prune=550\"], timewait=900)\n \n         print(\"Success\")\n@@ -320,7 +316,7 @@ def wallet_test(self):\n         # check that the pruning node's wallet is still in good shape\n         print(\"Stop and start pruning node to trigger wallet rescan\")\n         try:\n-            stop_node(self.nodes[2], 2)\n+            self.stop_node(2)\n             start_node(2, self.options.tmpdir, [\"-debug=1\",\"-prune=550\"])\n             print(\"Success\")\n         except Exception as detail:\n@@ -333,7 +329,7 @@ def wallet_test(self):\n         nds = [self.nodes[0], self.nodes[5]]\n         sync_blocks(nds, wait=5, timeout=300)\n         try:\n-            stop_node(self.nodes[5],5) #stop and start to trigger rescan\n+            self.stop_node(5) #stop and start to trigger rescan\n             start_node(5, self.options.tmpdir, [\"-debug=1\",\"-prune=550\"])\n             print (\"Success\")\n         except Exception as detail:\n@@ -353,8 +349,8 @@ def run_test(self):\n         # N0=N1=N2 **...*(995)\n \n         # stop manual-pruning node with 995 blocks\n-        stop_node(self.nodes[3],3)\n-        stop_node(self.nodes[4],4)\n+        self.stop_node(3)\n+        self.stop_node(4)\n \n         print(\"Check that we haven't started pruning yet because we're below PruneAfterHeight\")\n         self.test_height_min()"
      }
    ]
  },
  {
    "sha": "cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYzE2ZDk5ZjFkYzgzMDViMWIyNTVmMWNjMGYyYjE1MTZhYTc3ZWQw",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-01-18T15:15:37Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-01-27T20:22:35Z"
      },
      "message": "[trivial] Fix typos in comments",
      "tree": {
        "sha": "e07bb46576b327b22a3b2d0c8d51b7be29a13280",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e07bb46576b327b22a3b2d0c8d51b7be29a13280"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 24,
      "deletions": 24
    },
    "files": [
      {
        "sha": "69f0e9247af978552d4640d97fe8fed0cbe8192f",
        "filename": "contrib/linearize/example-linearize.cfg",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/contrib/linearize/example-linearize.cfg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/contrib/linearize/example-linearize.cfg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/example-linearize.cfg?ref=cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
        "patch": "@@ -24,7 +24,7 @@ input=/home/example/.bitcoin/blocks\n output_file=/home/example/Downloads/bootstrap.dat\n hashlist=hashlist.txt\n \n-# Maxmimum size in bytes of out-of-order blocks cache in memory\n+# Maximum size in bytes of out-of-order blocks cache in memory\n out_of_order_cache_sz = 100000000\n \n # Do we want the reverse the hash bytes coming from getblockhash?"
      },
      {
        "sha": "ab84bf8e35605d88df241568d0e1ac52c644e625",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
        "patch": "@@ -255,7 +255,7 @@ bool CAddrMan::Add_(const CAddress& addr, const CNetAddr& source, int64_t nTimeP\n     int nId;\n     CAddrInfo* pinfo = Find(addr, &nId);\n \n-    // Do not set a penality for a source's self-announcement\n+    // Do not set a penalty for a source's self-announcement\n     if (addr == source) {\n         nTimePenalty = 0;\n     }"
      },
      {
        "sha": "3998283bb13ebc015056ab4080b998ea57d56719",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
        "patch": "@@ -147,7 +147,7 @@ template<typename K, int Size, CChainParams::Base58Type Type> class CBitcoinExtK\n     K GetKey() {\n         K ret;\n         if (vchData.size() == Size) {\n-            //if base58 encouded data not holds a ext key, return a !IsValid() key\n+            // If base58 encoded data does not hold an ext key, return a !IsValid() key\n             ret.Decode(&vchData[0]);\n         }\n         return ret;"
      },
      {
        "sha": "a549ec29eaafdf97eac290251c3f7f8d33519a6f",
        "filename": "src/bench/perf.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/bench/perf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/bench/perf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/perf.cpp?ref=cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
        "patch": "@@ -6,7 +6,7 @@\n \n #if defined(__i386__) || defined(__x86_64__)\n \n-/* These architectures support quering the cycle counter\n+/* These architectures support querying the cycle counter\n  * from user space, no need for any syscall overhead.\n  */\n void perf_init(void) { }"
      },
      {
        "sha": "5a1d80d421210907ce3bedb3bcd32f5a738d3467",
        "filename": "src/blockencodings.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/blockencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/blockencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.h?ref=cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
        "patch": "@@ -99,7 +99,7 @@ class BlockTransactions {\n     }\n };\n \n-// Dumb serialization/storage-helper for CBlockHeaderAndShortTxIDs and PartiallyDownlaodedBlock\n+// Dumb serialization/storage-helper for CBlockHeaderAndShortTxIDs and PartiallyDownloadedBlock\n struct PrefilledTransaction {\n     // Used as an offset since last prefilled tx in CBlockHeaderAndShortTxIDs,\n     // as a proper transaction-in-block-index in PartiallyDownloadedBlock"
      },
      {
        "sha": "6240e82857eb99c6fe2f371a058211b4a77469ff",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
        "patch": "@@ -47,7 +47,7 @@ struct Params {\n     /** Block height at which BIP66 becomes active */\n     int BIP66Height;\n     /**\n-     * Minimum blocks including miner confirmation of the total of 2016 blocks in a retargetting period,\n+     * Minimum blocks including miner confirmation of the total of 2016 blocks in a retargeting period,\n      * (nPowTargetTimespan / nPowTargetSpacing) which is also used for BIP9 deployments.\n      * Examples: 1916 for 95%, 1512 for testchains.\n      */"
      },
      {
        "sha": "ff47e9776b643db85d72405385ee339da5ad33b8",
        "filename": "src/cuckoocache.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/cuckoocache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/cuckoocache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/cuckoocache.h?ref=cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
        "patch": "@@ -257,7 +257,7 @@ class cache\n      *\n      * First, epoch_check decrements and checks the cheap heuristic, and then does\n      * a more expensive scan if the cheap heuristic runs out. If the expensive\n-     * scan suceeds, the epochs are aged and old elements are allow_erased. The\n+     * scan succeeds, the epochs are aged and old elements are allow_erased. The\n      * cheap heuristic is reset to retrigger after the worst case growth of the\n      * current epoch's elements would exceed the epoch_size.\n      */\n@@ -395,7 +395,7 @@ class cache\n             * 1) On first iteration, last_loc == invalid(), find returns last, so\n             *    last_loc defaults to locs[0].\n             * 2) On further iterations, where last_loc == locs[k], last_loc will\n-            *    go to locs[k+1 % 8], i.e., next of the 8 indicies wrapping around\n+            *    go to locs[k+1 % 8], i.e., next of the 8 indices wrapping around\n             *    to 0 if needed.\n             *\n             * This prevents moving the element we just put in."
      },
      {
        "sha": "daac7a0f1a7034b97c131203d6ef83d9142d45ef",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
        "patch": "@@ -25,7 +25,7 @@\n static const char* WWW_AUTH_HEADER_DATA = \"Basic realm=\\\"jsonrpc\\\"\";\n \n /** Simple one-shot callback timer to be used by the RPC mechanism to e.g.\n- * re-lock the wellet.\n+ * re-lock the wallet.\n  */\n class HTTPRPCTimer : public RPCTimerBase\n {"
      },
      {
        "sha": "e936e068f44ae657dd4f82649c26140fe61fbf44",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
        "patch": "@@ -1553,7 +1553,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     }\n \n     if (chainparams.GetConsensus().vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout != 0) {\n-        // Only advertize witness capabilities if they have a reasonable start time.\n+        // Only advertise witness capabilities if they have a reasonable start time.\n         // This allows us to have the code merged without a defined softfork, by setting its\n         // end time to 0.\n         // Note that setting NODE_WITNESS is never required: the only downside from not"
      },
      {
        "sha": "a85c2b7452e356fdc028bb1604a0f45caa2c5d88",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
        "patch": "@@ -49,7 +49,7 @@ class CNetAddr\n         bool IsIPv4() const;    // IPv4 mapped address (::FFFF:0:0/96, 0.0.0.0/0)\n         bool IsIPv6() const;    // IPv6 address (not mapped IPv4, not Tor)\n         bool IsRFC1918() const; // IPv4 private networks (10.0.0.0/8, 192.168.0.0/16, 172.16.0.0/12)\n-        bool IsRFC2544() const; // IPv4 inter-network communcations (192.18.0.0/15)\n+        bool IsRFC2544() const; // IPv4 inter-network communications (192.18.0.0/15)\n         bool IsRFC6598() const; // IPv4 ISP-level NAT (100.64.0.0/10)\n         bool IsRFC5737() const; // IPv4 documentation addresses (192.0.2.0/24, 198.51.100.0/24, 203.0.113.0/24)\n         bool IsRFC3849() const; // IPv6 documentation address (2001:0DB8::/32)"
      },
      {
        "sha": "4b34e73eb7a454aa8b7a579dd618c5b5052aef24",
        "filename": "src/qt/bantablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/qt/bantablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/qt/bantablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bantablemodel.cpp?ref=cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
        "patch": "@@ -64,7 +64,7 @@ class BanTablePriv\n         }\n \n         if (sortColumn >= 0)\n-            // sort cachedBanlist (use stable sort to prevent rows jumping around unneceesarily)\n+            // sort cachedBanlist (use stable sort to prevent rows jumping around unnecessarily)\n             qStableSort(cachedBanlist.begin(), cachedBanlist.end(), BannedNodeLessThan(sortColumn, sortOrder));\n     }\n "
      },
      {
        "sha": "9d46280a37b4099234502d89c8569c8c43d540c6",
        "filename": "src/qt/paymentserver.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/qt/paymentserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/qt/paymentserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.h?ref=cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
        "patch": "@@ -21,10 +21,10 @@\n //\n // When startup is finished and the main window is\n // shown, a signal is sent to slot uiReady(), which\n-// emits a receivedURL() signal for any payment\n+// emits a receivedURI() signal for any payment\n // requests that happened during startup.\n //\n-// After startup, receivedURL() happens as usual.\n+// After startup, receivedURI() happens as usual.\n //\n // This class has one more feature: a static\n // method that finds URIs passed in the command line"
      },
      {
        "sha": "1c0ed663c1fdfb596eaf88e2ba561998812d7b67",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
        "patch": "@@ -608,7 +608,7 @@ void SendCoinsDialog::updateGlobalFeeVariables()\n         // set nMinimumTotalFee to 0 to not accidentally pay a custom fee\n         CoinControlDialog::coinControl->nMinimumTotalFee = 0;\n \n-        // show the estimated reuquired time for confirmation\n+        // show the estimated required time for confirmation\n         ui->confirmationTargetLabel->setText(GUIUtil::formatDurationStr(nConfirmTarget * Params().GetConsensus().nPowTargetSpacing) + \" / \" + tr(\"%n block(s)\", \"\", nConfirmTarget));\n     }\n     else"
      },
      {
        "sha": "7ab4125284666b293f62309ae62c2099a3b1de25",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
        "patch": "@@ -39,7 +39,7 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n \n     QString version = tr(PACKAGE_NAME) + \" \" + tr(\"version\") + \" \" + QString::fromStdString(FormatFullVersion());\n     /* On x86 add a bit specifier to the version so that users can distinguish between\n-     * 32 and 64 bit builds. On other architectures, 32/64 bit may be more ambigious.\n+     * 32 and 64 bit builds. On other architectures, 32/64 bit may be more ambiguous.\n      */\n #if defined(__x86_64__)\n     version += \" \" + tr(\"(%1-bit)\").arg(64);"
      },
      {
        "sha": "35747552feaf0587f907c2bb593b986c041865be",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
        "patch": "@@ -150,7 +150,7 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n             obj.push_back(Pair(\"pingwait\", stats.dPingWait));\n         obj.push_back(Pair(\"version\", stats.nVersion));\n         // Use the sanitized form of subver here, to avoid tricksy remote peers from\n-        // corrupting or modifiying the JSON output by putting special characters in\n+        // corrupting or modifying the JSON output by putting special characters in\n         // their ver message.\n         obj.push_back(Pair(\"subver\", stats.cleanSubVer));\n         obj.push_back(Pair(\"inbound\", stats.fInbound));"
      },
      {
        "sha": "9f4741b1cd95d17bd0117de1dc64db920d3a24c2",
        "filename": "src/script/script.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
        "patch": "@@ -129,7 +129,7 @@ const char* GetOpName(opcodetype opcode)\n     case OP_CHECKMULTISIG          : return \"OP_CHECKMULTISIG\";\n     case OP_CHECKMULTISIGVERIFY    : return \"OP_CHECKMULTISIGVERIFY\";\n \n-    // expanson\n+    // expansion\n     case OP_NOP1                   : return \"OP_NOP1\";\n     case OP_CHECKLOCKTIMEVERIFY    : return \"OP_CHECKLOCKTIMEVERIFY\";\n     case OP_CHECKSEQUENCEVERIFY    : return \"OP_CHECKSEQUENCEVERIFY\";"
      },
      {
        "sha": "9661a665140499148dc2cf8e803f2aea160a4845",
        "filename": "src/test/serialize_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/test/serialize_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/test/serialize_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/serialize_tests.cpp?ref=cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
        "patch": "@@ -90,7 +90,7 @@ BOOST_AUTO_TEST_CASE(sizes)\n \n BOOST_AUTO_TEST_CASE(floats_conversion)\n {\n-    // Choose values that map unambigiously to binary floating point to avoid\n+    // Choose values that map unambiguously to binary floating point to avoid\n     // rounding issues at the compiler side.\n     BOOST_CHECK_EQUAL(ser_uint32_to_float(0x00000000), 0.0F);\n     BOOST_CHECK_EQUAL(ser_uint32_to_float(0x3f000000), 0.5F);\n@@ -109,7 +109,7 @@ BOOST_AUTO_TEST_CASE(floats_conversion)\n \n BOOST_AUTO_TEST_CASE(doubles_conversion)\n {\n-    // Choose values that map unambigiously to binary floating point to avoid\n+    // Choose values that map unambiguously to binary floating point to avoid\n     // rounding issues at the compiler side.\n     BOOST_CHECK_EQUAL(ser_uint64_to_double(0x0000000000000000ULL), 0.0);\n     BOOST_CHECK_EQUAL(ser_uint64_to_double(0x3fe0000000000000ULL), 0.5);"
      },
      {
        "sha": "c49c5d9eb2a83f39838a8d0e0a9e763a9b4508b3",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
        "patch": "@@ -372,7 +372,7 @@ class TorController\n     struct event *reconnect_ev;\n     float reconnect_timeout;\n     CService service;\n-    /** Cooie for SAFECOOKIE auth */\n+    /** Cookie for SAFECOOKIE auth */\n     std::vector<uint8_t> cookie;\n     /** ClientNonce for SAFECOOKIE auth */\n     std::vector<uint8_t> clientNonce;"
      },
      {
        "sha": "db1a02455f862fa1ac1b8bee2e316e123de1471c",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
        "patch": "@@ -355,7 +355,7 @@ enum class MemPoolRemovalReason {\n  * Transactions are added when they are seen on the network (or created by the\n  * local node), but not all transactions seen are added to the pool. For\n  * example, the following new transactions will not be added to the mempool:\n- * - a transaction which doesn't make the mimimum fee requirements.\n+ * - a transaction which doesn't meet the minimum fee requirements.\n  * - a new transaction that double-spends an input of a transaction already in\n  * the pool where the new transaction does not meet the Replace-By-Fee\n  * requirements as defined in BIP 125."
      },
      {
        "sha": "c7b3e4f168655260f38c381b050706d18d23ce5a",
        "filename": "src/utiltime.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/utiltime.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/utiltime.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utiltime.cpp?ref=cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
        "patch": "@@ -63,7 +63,7 @@ void MilliSleep(int64_t n)\n {\n \n /**\n- * Boost's sleep_for was uninterruptable when backed by nanosleep from 1.50\n+ * Boost's sleep_for was uninterruptible when backed by nanosleep from 1.50\n  * until fixed in 1.52. Use the deprecated sleep method for the broken case.\n  * See: https://svn.boost.org/trac/boost/ticket/7238\n  */"
      },
      {
        "sha": "517202a9bb84a6441e011f00b9f2ae21d060628a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
        "patch": "@@ -2576,7 +2576,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                 // BIP125 defines opt-in RBF as any nSequence < maxint-1, so\n                 // we use the highest possible value in that range (maxint-2)\n                 // to avoid conflicting with other possible uses of nSequence,\n-                // and in the spirit of \"smallest posible change from prior\n+                // and in the spirit of \"smallest possible change from prior\n                 // behavior.\"\n                 for (const auto& coin : setCoins)\n                     txNew.vin.push_back(CTxIn(coin.first->GetHash(),coin.second,CScript(),"
      }
    ]
  },
  {
    "sha": "342eb9618abf53c21bd860bfccdf5b5195aab094",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDJlYjk2MThhYmY1M2MyMWJkODYwYmZjY2RmNWI1MTk1YWFiMDk0",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-01-19T22:23:52Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-01-28T06:54:30Z"
      },
      "message": "build: find qt's renamed helper libs from 5.7",
      "tree": {
        "sha": "106f80b3869a50c7da35bf949c94de5835ca2a81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/106f80b3869a50c7da35bf949c94de5835ca2a81"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/342eb9618abf53c21bd860bfccdf5b5195aab094",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/342eb9618abf53c21bd860bfccdf5b5195aab094",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/342eb9618abf53c21bd860bfccdf5b5195aab094",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/342eb9618abf53c21bd860bfccdf5b5195aab094/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f43fc3037f3d583eeefe358c8102540a30da7e39",
        "filename": "build-aux/m4/bitcoin_qt.m4",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/342eb9618abf53c21bd860bfccdf5b5195aab094/build-aux/m4/bitcoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/342eb9618abf53c21bd860bfccdf5b5195aab094/build-aux/m4/bitcoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4?ref=342eb9618abf53c21bd860bfccdf5b5195aab094",
        "patch": "@@ -473,8 +473,8 @@ AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITHOUT_PKGCONFIG],[\n   ])\n \n   BITCOIN_QT_CHECK(AC_CHECK_LIB([z] ,[main],,AC_MSG_WARN([zlib not found. Assuming qt has it built-in])))\n-  BITCOIN_QT_CHECK(AC_CHECK_LIB([png] ,[main],,AC_MSG_WARN([libpng not found. Assuming qt has it built-in])))\n-  BITCOIN_QT_CHECK(AC_CHECK_LIB([jpeg] ,[main],,AC_MSG_WARN([libjpeg not found. Assuming qt has it built-in])))\n+  BITCOIN_QT_CHECK(AC_SEARCH_LIBS([png_error] ,[qtpng png],,AC_MSG_WARN([libpng not found. Assuming qt has it built-in])))\n+  BITCOIN_QT_CHECK(AC_SEARCH_LIBS([jpeg_create_decompress] ,[qtjpeg jpeg],,AC_MSG_WARN([libjpeg not found. Assuming qt has it built-in])))\n   BITCOIN_QT_CHECK(AC_SEARCH_LIBS([pcre16_exec], [qtpcre pcre16],,AC_MSG_WARN([libpcre16 not found. Assuming qt has it built-in])))\n   BITCOIN_QT_CHECK(AC_SEARCH_LIBS([hb_ot_tags_from_script] ,[qtharfbuzzng harfbuzz],,AC_MSG_WARN([libharfbuzz not found. Assuming qt has it built-in or support is disabled])))\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Core]   ,[main],,BITCOIN_QT_FAIL(lib$QT_LIB_PREFIXCore not found)))"
      }
    ]
  },
  {
    "sha": "8efa34fb772bb320e657d18751f1751a4ee48731",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZWZhMzRmYjc3MmJiMzIwZTY1N2QxODc1MWYxNzUxYTRlZTQ4NzMx",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-01-19T22:20:35Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-01-28T06:54:30Z"
      },
      "message": "depends: add a zlib build\n\nqt5.7 changed the location of some of its symbols, creating a circular\ndependency in Qt5Core. Rather than trying to fix that up, build our own zlib\nrather than having it built for us.",
      "tree": {
        "sha": "368c63ce784e72f3db5542b8d80adbfb62a56bdc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/368c63ce784e72f3db5542b8d80adbfb62a56bdc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8efa34fb772bb320e657d18751f1751a4ee48731",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8efa34fb772bb320e657d18751f1751a4ee48731",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8efa34fb772bb320e657d18751f1751a4ee48731",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8efa34fb772bb320e657d18751f1751a4ee48731/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "342eb9618abf53c21bd860bfccdf5b5195aab094",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/342eb9618abf53c21bd860bfccdf5b5195aab094",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/342eb9618abf53c21bd860bfccdf5b5195aab094"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 28,
      "deletions": 3
    },
    "files": [
      {
        "sha": "088723ebd0d56d6bc2ca2eba20597d52e142ac02",
        "filename": "depends/packages/packages.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8efa34fb772bb320e657d18751f1751a4ee48731/depends/packages/packages.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8efa34fb772bb320e657d18751f1751a4ee48731/depends/packages/packages.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/packages.mk?ref=8efa34fb772bb320e657d18751f1751a4ee48731",
        "patch": "@@ -2,7 +2,7 @@ packages:=boost openssl libevent zeromq\n native_packages := native_ccache\n \n qt_native_packages = native_protobuf\n-qt_packages = qrencode protobuf\n+qt_packages = qrencode protobuf zlib\n \n qt_x86_64_linux_packages:=qt expat dbus libxcb xcb_proto libXau xproto freetype fontconfig libX11 xextproto libXext xtrans\n qt_i686_linux_packages:=$(qt_x86_64_linux_packages)"
      },
      {
        "sha": "7898927a81ea6becf349e62730fd68cfd88b4ed5",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8efa34fb772bb320e657d18751f1751a4ee48731/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8efa34fb772bb320e657d18751f1751a4ee48731/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=8efa34fb772bb320e657d18751f1751a4ee48731",
        "patch": "@@ -4,7 +4,7 @@ $(package)_download_path=http://download.qt.io/official_releases/qt/5.7/$($(pack\n $(package)_suffix=opensource-src-$($(package)_version).tar.gz\n $(package)_file_name=qtbase-$($(package)_suffix)\n $(package)_sha256_hash=95f83e532d23b3ddbde7973f380ecae1bac13230340557276f75f2e37984e410\n-$(package)_dependencies=openssl\n+$(package)_dependencies=openssl zlib\n $(package)_linux_dependencies=freetype fontconfig libxcb libX11 xproto libXext\n $(package)_build_subdir=qtbase\n $(package)_qt_libs=corelib network widgets gui plugins testlib\n@@ -73,7 +73,7 @@ $(package)_config_opts += -prefix $(host_prefix)\n $(package)_config_opts += -qt-libpng\n $(package)_config_opts += -qt-libjpeg\n $(package)_config_opts += -qt-pcre\n-$(package)_config_opts += -qt-zlib\n+$(package)_config_opts += -system-zlib\n $(package)_config_opts += -reduce-exports\n $(package)_config_opts += -static\n $(package)_config_opts += -silent"
      },
      {
        "sha": "7ff5d00bbdc6494f43cf5a164509377dff6c6d49",
        "filename": "depends/packages/zlib.mk",
        "status": "added",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8efa34fb772bb320e657d18751f1751a4ee48731/depends/packages/zlib.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8efa34fb772bb320e657d18751f1751a4ee48731/depends/packages/zlib.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/zlib.mk?ref=8efa34fb772bb320e657d18751f1751a4ee48731",
        "patch": "@@ -0,0 +1,25 @@\n+package=zlib\n+$(package)_version=1.2.11\n+$(package)_download_path=http://www.zlib.net\n+$(package)_file_name=$(package)-$($(package)_version).tar.gz\n+$(package)_sha256_hash=c3e5e9fdd5004dcb542feda5ee4f0ff0744628baf8ed2dd5d66f8ca1197cb1a1\n+\n+define $(package)_set_vars\n+$(package)_build_opts= CC=\"$($(package)_cc)\"\n+$(package)_build_opts+=CFLAGS=\"$($(package)_cflags) $($(package)_cppflags) -fPIC\"\n+$(package)_build_opts+=AR=\"$($(package)_ar)\"\n+$(package)_build_opts+=RANLIB=\"$($(package)_ranlib)\"\n+endef\n+\n+define $(package)_config_cmds\n+  ./configure --static --prefix=$(host_prefix)\n+endef\n+\n+define $(package)_build_cmds\n+  $(MAKE) $($(package)_build_opts) libz.a\n+endef\n+\n+define $(package)_stage_cmds\n+  $(MAKE) DESTDIR=$($(package)_staging_dir) install $($(package)_build_opts)\n+endef\n+"
      }
    ]
  },
  {
    "sha": "b5f374fef71ba2ba99e3d9629b66fd1491fd7c90",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNWYzNzRmZWY3MWJhMmJhOTllM2Q5NjI5YjY2ZmQxNDkxZmQ3Yzkw",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-01-27T17:10:13Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-01-28T06:54:30Z"
      },
      "message": "qt: fix build with zlib for target\n\nThis contains a few hacks very specific to Qt's buildsystem. These can be\nreverted once we split the build between native and target builds.\n\nQt's build contains a circular dependency when not using a system zlib.\nBy far the easiest fix is to switch to a system zlib, rather than Qt's own.\nHowever, that confuses Qt's cross build which assumes that when using a system\nzlib, it should also find a system (native) zlib for native tools. The build\nbreaks if that zlib is not present.\n\nTo solve this:\n1. Always use a system zlib rather than the one provided by qt\n2. Set force_bootstrap, which instructs the build tools to be built as though\n   we're cross-compiling (build != target)\n3. For build tools, use qt's internal zlib so that a native zlib is not\nrequired.\n\nStep 3 means that if any zlib headers are found by the native build, it will\nconfuse Qt's internal zlib build. So we also need to make sure that the target\nheaders/libs aren't found. To do so, specify that our\ncflags/cxxflags/cppflags/ldflags only apply for non-host builds.",
      "tree": {
        "sha": "b0b6316ee3b1f7f34fa41aeab8ac90c8e65e9cfe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b0b6316ee3b1f7f34fa41aeab8ac90c8e65e9cfe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b5f374fef71ba2ba99e3d9629b66fd1491fd7c90",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5f374fef71ba2ba99e3d9629b66fd1491fd7c90",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b5f374fef71ba2ba99e3d9629b66fd1491fd7c90",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5f374fef71ba2ba99e3d9629b66fd1491fd7c90/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8efa34fb772bb320e657d18751f1751a4ee48731",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8efa34fb772bb320e657d18751f1751a4ee48731",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8efa34fb772bb320e657d18751f1751a4ee48731"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 13,
      "deletions": 10
    },
    "files": [
      {
        "sha": "bbfdb766ed694025c0124140c00b3044ca362d02",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5f374fef71ba2ba99e3d9629b66fd1491fd7c90/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5f374fef71ba2ba99e3d9629b66fd1491fd7c90/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=b5f374fef71ba2ba99e3d9629b66fd1491fd7c90",
        "patch": "@@ -140,19 +140,22 @@ define $(package)_preprocess_cmds\n   patch -p1 < $($(package)_patch_dir)/pidlist_absolute.patch && \\\n   patch -p1 < $($(package)_patch_dir)/fix-xcb-include-order.patch && \\\n   patch -p1 < $($(package)_patch_dir)/fix_qt_pkgconfig.patch && \\\n-  echo \"QMAKE_CFLAGS     += $($(package)_cflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n-  echo \"QMAKE_CXXFLAGS   += $($(package)_cxxflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n-  echo \"QMAKE_LFLAGS     += $($(package)_ldflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n-  sed -i.old \"s|QMAKE_CFLAGS            = |QMAKE_CFLAGS            = $($(package)_cflags) $($(package)_cppflags) |\" qtbase/mkspecs/win32-g++/qmake.conf && \\\n-  sed -i.old \"s|QMAKE_LFLAGS            = |QMAKE_LFLAGS            = $($(package)_ldflags) |\" qtbase/mkspecs/win32-g++/qmake.conf && \\\n-  sed -i.old \"s|QMAKE_CXXFLAGS          = |QMAKE_CXXFLAGS            = $($(package)_cxxflags) $($(package)_cppflags) |\" qtbase/mkspecs/win32-g++/qmake.conf\n+  echo \"!host_build: QMAKE_CFLAGS     += $($(package)_cflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n+  echo \"!host_build: QMAKE_CXXFLAGS   += $($(package)_cxxflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n+  echo \"!host_build: QMAKE_LFLAGS     += $($(package)_ldflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n+  sed -i.old \"s|QMAKE_CFLAGS            = |!host_build: QMAKE_CFLAGS            = $($(package)_cflags) $($(package)_cppflags) |\" qtbase/mkspecs/win32-g++/qmake.conf && \\\n+  sed -i.old \"s|QMAKE_LFLAGS            = |!host_build: QMAKE_LFLAGS            = $($(package)_ldflags) |\" qtbase/mkspecs/win32-g++/qmake.conf && \\\n+  sed -i.old \"s|QMAKE_CXXFLAGS          = |!host_build: QMAKE_CXXFLAGS            = $($(package)_cxxflags) $($(package)_cppflags) |\" qtbase/mkspecs/win32-g++/qmake.conf\n+\n endef\n \n define $(package)_config_cmds\n   export PKG_CONFIG_SYSROOT_DIR=/ && \\\n   export PKG_CONFIG_LIBDIR=$(host_prefix)/lib/pkgconfig && \\\n   export PKG_CONFIG_PATH=$(host_prefix)/share/pkgconfig  && \\\n   ./configure $($(package)_config_opts) && \\\n+  echo \"host_build: QT_CONFIG ~= s/system-zlib/zlib\" >> mkspecs/qconfig.pri && \\\n+  echo \"CONFIG += force_bootstrap\" >> mkspecs/qconfig.pri && \\\n   $(MAKE) sub-src-clean && \\\n   cd ../qttranslations && ../qtbase/bin/qmake qttranslations.pro -o Makefile && \\\n   cd translations && ../../qtbase/bin/qmake translations.pro -o Makefile && cd ../.. &&\\"
      },
      {
        "sha": "ca70d30b15e9c4115f1e7c2ac885858244fd123b",
        "filename": "depends/patches/qt/mac-qmake.conf",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5f374fef71ba2ba99e3d9629b66fd1491fd7c90/depends/patches/qt/mac-qmake.conf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5f374fef71ba2ba99e3d9629b66fd1491fd7c90/depends/patches/qt/mac-qmake.conf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/mac-qmake.conf?ref=b5f374fef71ba2ba99e3d9629b66fd1491fd7c90",
        "patch": "@@ -14,10 +14,10 @@ QMAKE_MAC_SDK.macosx.Path = $${MAC_SDK_PATH}\n QMAKE_MAC_SDK.macosx.platform_name = macosx\n QMAKE_MAC_SDK.macosx.SDKVersion = $${MAC_SDK_VERSION}\n QMAKE_MAC_SDK.macosx.PlatformPath = /phony\n-QMAKE_CFLAGS += -target $${MAC_TARGET}\n-QMAKE_OBJECTIVE_CFLAGS += $$QMAKE_CFLAGS\n-QMAKE_CXXFLAGS += $$QMAKE_CFLAGS\n-QMAKE_LFLAGS += -target $${MAC_TARGET} -mlinker-version=$${MAC_LD64_VERSION}\n+!host_build: QMAKE_CFLAGS += -target $${MAC_TARGET}\n+!host_build: QMAKE_OBJECTIVE_CFLAGS += $$QMAKE_CFLAGS\n+!host_build: QMAKE_CXXFLAGS += $$QMAKE_CFLAGS\n+!host_build: QMAKE_LFLAGS += -target $${MAC_TARGET} -mlinker-version=$${MAC_LD64_VERSION}\n QMAKE_AR = $${CROSS_COMPILE}ar cq\n QMAKE_RANLIB=$${CROSS_COMPILE}ranlib\n QMAKE_LIBTOOL=$${CROSS_COMPILE}libtool"
      }
    ]
  },
  {
    "sha": "95f97f4b94b9d534cf61c3c82ff728eff00423e5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NWY5N2Y0Yjk0YjlkNTM0Y2Y2MWMzYzgyZmY3MjhlZmYwMDQyM2U1",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-01-28T08:03:57Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-01-28T08:04:57Z"
      },
      "message": "Skip RAII event tests if libevent is built without event_set_mem_functions",
      "tree": {
        "sha": "73eff321a197c7f22089c091620781b64a240c15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/73eff321a197c7f22089c091620781b64a240c15"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/95f97f4b94b9d534cf61c3c82ff728eff00423e5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95f97f4b94b9d534cf61c3c82ff728eff00423e5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/95f97f4b94b9d534cf61c3c82ff728eff00423e5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95f97f4b94b9d534cf61c3c82ff728eff00423e5/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "05a55a639b6cd01b06be285db53edccdaf2ca189",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05a55a639b6cd01b06be285db53edccdaf2ca189",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/05a55a639b6cd01b06be285db53edccdaf2ca189"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0f40874f55c10494ce4766848e1a58ee68bda6aa",
        "filename": "src/test/raii_event_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95f97f4b94b9d534cf61c3c82ff728eff00423e5/src/test/raii_event_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95f97f4b94b9d534cf61c3c82ff728eff00423e5/src/test/raii_event_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/raii_event_tests.cpp?ref=95f97f4b94b9d534cf61c3c82ff728eff00423e5",
        "patch": "@@ -3,6 +3,10 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <event2/event.h>\n+\n+#ifdef EVENT_SET_MEM_FUNCTIONS_IMPLEMENTED\n+// It would probably be ideal to define dummy test(s) that report skipped, but boost::test doesn't seem to make that practical (at least not in versions available with common distros)\n+\n #include <map>\n #include <stdlib.h>\n \n@@ -86,3 +90,5 @@ BOOST_AUTO_TEST_CASE(raii_event_order)\n }\n \n BOOST_AUTO_TEST_SUITE_END()\n+\n+#endif  // EVENT_SET_MEM_FUNCTIONS_IMPLEMENTED"
      }
    ]
  },
  {
    "sha": "fa5137c11d2d4accd9bfc68b3498e7e16829c3ab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTUxMzdjMTFkMmQ0YWNjZDliZmM2OGIzNDk4ZTdlMTY4MjljM2Fi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-01-28T15:58:29Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-01-28T15:57:08Z"
      },
      "message": "[doc] Remove unused clang format dev script\n\nAlso, update the clang format file to reflect the current coding\nstyle mentioned in the developer notes.",
      "tree": {
        "sha": "a712302f90b56aef5f25ce086c10f1dd645f2fb1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a712302f90b56aef5f25ce086c10f1dd645f2fb1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa5137c11d2d4accd9bfc68b3498e7e16829c3ab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5137c11d2d4accd9bfc68b3498e7e16829c3ab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa5137c11d2d4accd9bfc68b3498e7e16829c3ab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5137c11d2d4accd9bfc68b3498e7e16829c3ab/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 6,
      "deletions": 71
    },
    "files": [
      {
        "sha": "34f2af68666a9d51419a463ed89f7361464fd5d8",
        "filename": "contrib/devtools/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5137c11d2d4accd9bfc68b3498e7e16829c3ab/contrib/devtools/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5137c11d2d4accd9bfc68b3498e7e16829c3ab/contrib/devtools/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/README.md?ref=fa5137c11d2d4accd9bfc68b3498e7e16829c3ab",
        "patch": "@@ -8,11 +8,6 @@ check-doc.py\n Check if all command line args are documented. The return value indicates the\n number of undocumented args.\n \n-clang-format.py\n-===============\n-\n-A script to format cpp source code according to [.clang-format](../../src/.clang-format). This should only be applied to new files or files which are currently not actively developed on. Also, git subtrees are not subject to formatting.\n-\n clang-format-diff.py\n ===================\n \n@@ -24,6 +19,7 @@ the script should be called from the git root folder as follows.\n ```\n git diff -U0 HEAD~1.. | ./contrib/devtools/clang-format-diff.py -p1 -i -v\n ```\n+\n copyright\\_header.py\n ====================\n "
      },
      {
        "sha": "cee99047ac67e69fe767a910ac56811e574cfc8d",
        "filename": "contrib/devtools/clang-format.py",
        "status": "removed",
        "additions": 0,
        "deletions": 62,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef/contrib/devtools/clang-format.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef/contrib/devtools/clang-format.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/clang-format.py?ref=a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef",
        "patch": "@@ -1,62 +0,0 @@\n-#!/usr/bin/env python\n-'''\n-Wrapper script for clang-format\n-\n-Copyright (c) 2015 MarcoFalke\n-Copyright (c) 2015 The Bitcoin Core developers\n-Distributed under the MIT software license, see the accompanying\n-file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-'''\n-\n-import os\n-import sys\n-import subprocess\n-\n-tested_versions = ['3.6.0', '3.6.1', '3.6.2'] # A set of versions known to produce the same output\n-accepted_file_extensions = ('.h', '.cpp') # Files to format\n-\n-def check_clang_format_version(clang_format_exe):\n-    try:\n-        output = subprocess.check_output([clang_format_exe, '-version'])\n-        for ver in tested_versions:\n-            if ver in output:\n-                print \"Detected clang-format version \" + ver\n-                return\n-        raise RuntimeError(\"Untested version: \" + output)\n-    except Exception as e:\n-        print 'Could not verify version of ' + clang_format_exe + '.'\n-        raise e\n-\n-def check_command_line_args(argv):\n-    required_args = ['{clang-format-exe}', '{files}']\n-    example_args = ['clang-format-3.x', 'src/main.cpp', 'src/wallet/*']\n-\n-    if(len(argv) < len(required_args) + 1):\n-        for word in (['Usage:', argv[0]] + required_args):\n-            print word,\n-        print ''\n-        for word in (['E.g:', argv[0]] + example_args):\n-            print word,\n-        print ''\n-        sys.exit(1)\n-\n-def run_clang_format(clang_format_exe, files):\n-    for target in files:\n-        if os.path.isdir(target):\n-            for path, dirs, files in os.walk(target):\n-                run_clang_format(clang_format_exe, (os.path.join(path, f) for f in files))\n-        elif target.endswith(accepted_file_extensions):\n-            print \"Format \" + target\n-            subprocess.check_call([clang_format_exe, '-i', '-style=file', target], stdout=open(os.devnull, 'wb'), stderr=subprocess.STDOUT)\n-        else:\n-            print \"Skip \" + target\n-\n-def main(argv):\n-    check_command_line_args(argv)\n-    clang_format_exe = argv[1]\n-    files = argv[2:]\n-    check_clang_format_version(clang_format_exe)\n-    run_clang_format(clang_format_exe, files)\n-\n-if __name__ == \"__main__\":\n-    main(sys.argv)"
      },
      {
        "sha": "989ad8d03ebdeb1f43f40c06dcf9c7b91392bff0",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5137c11d2d4accd9bfc68b3498e7e16829c3ab/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5137c11d2d4accd9bfc68b3498e7e16829c3ab/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=fa5137c11d2d4accd9bfc68b3498e7e16829c3ab",
        "patch": "@@ -4,10 +4,11 @@ Developer Notes\n Various coding styles have been used during the history of the codebase,\n and the result is not very consistent. However, we're now trying to converge to\n a single style, so please use it in new code. Old code will be converted\n-gradually.\n+gradually and you are encouraged to use the provided\n+[clang-format-diff script](/contrib/devtools/README.md#clang-format-diffpy)\n+to clean up the patch automatically before submitting a pull request.\n+\n - Basic rules specified in [src/.clang-format](/src/.clang-format).\n-  Use a recent clang-format to format automatically using one of the [dev scripts]\n-  (/contrib/devtools/README.md#clang-formatpy).\n   - Braces on new lines for namespaces, classes, functions, methods.\n   - Braces on the same line for everything else.\n   - 4 space indentation (no tabs) for every block except namespaces."
      },
      {
        "sha": "fc53509138fad0ad50144b8210ff23a90b155db0",
        "filename": "src/.clang-format",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5137c11d2d4accd9bfc68b3498e7e16829c3ab/src/.clang-format",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5137c11d2d4accd9bfc68b3498e7e16829c3ab/src/.clang-format",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/.clang-format?ref=fa5137c11d2d4accd9bfc68b3498e7e16829c3ab",
        "patch": "@@ -6,7 +6,7 @@ AlignTrailingComments: true\n AllowAllParametersOfDeclarationOnNextLine: false\n AllowShortBlocksOnASingleLine: false\n AllowShortFunctionsOnASingleLine: All\n-AllowShortIfStatementsOnASingleLine: false\n+AllowShortIfStatementsOnASingleLine: true\n AllowShortLoopsOnASingleLine: false\n AlwaysBreakBeforeMultilineStrings: false\n AlwaysBreakTemplateDeclarations: true"
      }
    ]
  },
  {
    "sha": "0fea960ca917b73aff853fe88476174c8a313863",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZmVhOTYwY2E5MTdiNzNhZmY4NTNmZTg4NDc2MTc0YzhhMzEzODYz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-01-29T15:05:06Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-01-29T15:05:37Z"
      },
      "message": "Merge #9510: [trivial] Fix typos in comments\n\ncc16d99 [trivial] Fix typos in comments (practicalswift)",
      "tree": {
        "sha": "e07bb46576b327b22a3b2d0c8d51b7be29a13280",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e07bb46576b327b22a3b2d0c8d51b7be29a13280"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0fea960ca917b73aff853fe88476174c8a313863",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCgAGBQJYjgTBAAoJEC1/I3LlD+E3zKIH/ije9pVMoo3HEPWsdSzR9KMV\nCI1fcbxINwgXwnDs24kAOe6jzMghp63P+xm5RNn5GoNMrHkp7J0KbGAyLo9bWKrN\nWdw1XI/tIeNk/ooqDRt/5SD42v/6SEMqFBxxjjPNZxMSPEhpqQPoKJfnMsWtrjsp\nUdYiWLBXcDj88ZHOljRTbD3PC9HUCRqaOReTNDrV6W/gRVgHLJmla9zwe8b7U+WO\nSfKabzQP5U303iBXdelvMkIT+5ivKzLa2w9FJsaadn0XVIFb8+O9AQ1uuoOpW28G\niobMikZWg++rD1D/pxsCptR2EpognnoTR/cT4dHt5PoeZxlHcVwyc1ESQ9WXlhY=\n=v+aR\n-----END PGP SIGNATURE-----",
        "payload": "tree e07bb46576b327b22a3b2d0c8d51b7be29a13280\nparent a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef\nparent cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0\nauthor MarcoFalke <falke.marco@gmail.com> 1485702306 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1485702337 +0100\n\nMerge #9510: [trivial] Fix typos in comments\n\ncc16d99 [trivial] Fix typos in comments (practicalswift)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fea960ca917b73aff853fe88476174c8a313863",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0fea960ca917b73aff853fe88476174c8a313863",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fea960ca917b73aff853fe88476174c8a313863/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef"
      },
      {
        "sha": "cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 24,
      "deletions": 24
    },
    "files": [
      {
        "sha": "69f0e9247af978552d4640d97fe8fed0cbe8192f",
        "filename": "contrib/linearize/example-linearize.cfg",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fea960ca917b73aff853fe88476174c8a313863/contrib/linearize/example-linearize.cfg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fea960ca917b73aff853fe88476174c8a313863/contrib/linearize/example-linearize.cfg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/example-linearize.cfg?ref=0fea960ca917b73aff853fe88476174c8a313863",
        "patch": "@@ -24,7 +24,7 @@ input=/home/example/.bitcoin/blocks\n output_file=/home/example/Downloads/bootstrap.dat\n hashlist=hashlist.txt\n \n-# Maxmimum size in bytes of out-of-order blocks cache in memory\n+# Maximum size in bytes of out-of-order blocks cache in memory\n out_of_order_cache_sz = 100000000\n \n # Do we want the reverse the hash bytes coming from getblockhash?"
      },
      {
        "sha": "ab84bf8e35605d88df241568d0e1ac52c644e625",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fea960ca917b73aff853fe88476174c8a313863/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fea960ca917b73aff853fe88476174c8a313863/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=0fea960ca917b73aff853fe88476174c8a313863",
        "patch": "@@ -255,7 +255,7 @@ bool CAddrMan::Add_(const CAddress& addr, const CNetAddr& source, int64_t nTimeP\n     int nId;\n     CAddrInfo* pinfo = Find(addr, &nId);\n \n-    // Do not set a penality for a source's self-announcement\n+    // Do not set a penalty for a source's self-announcement\n     if (addr == source) {\n         nTimePenalty = 0;\n     }"
      },
      {
        "sha": "3998283bb13ebc015056ab4080b998ea57d56719",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fea960ca917b73aff853fe88476174c8a313863/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fea960ca917b73aff853fe88476174c8a313863/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=0fea960ca917b73aff853fe88476174c8a313863",
        "patch": "@@ -147,7 +147,7 @@ template<typename K, int Size, CChainParams::Base58Type Type> class CBitcoinExtK\n     K GetKey() {\n         K ret;\n         if (vchData.size() == Size) {\n-            //if base58 encouded data not holds a ext key, return a !IsValid() key\n+            // If base58 encoded data does not hold an ext key, return a !IsValid() key\n             ret.Decode(&vchData[0]);\n         }\n         return ret;"
      },
      {
        "sha": "a549ec29eaafdf97eac290251c3f7f8d33519a6f",
        "filename": "src/bench/perf.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fea960ca917b73aff853fe88476174c8a313863/src/bench/perf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fea960ca917b73aff853fe88476174c8a313863/src/bench/perf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/perf.cpp?ref=0fea960ca917b73aff853fe88476174c8a313863",
        "patch": "@@ -6,7 +6,7 @@\n \n #if defined(__i386__) || defined(__x86_64__)\n \n-/* These architectures support quering the cycle counter\n+/* These architectures support querying the cycle counter\n  * from user space, no need for any syscall overhead.\n  */\n void perf_init(void) { }"
      },
      {
        "sha": "5a1d80d421210907ce3bedb3bcd32f5a738d3467",
        "filename": "src/blockencodings.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fea960ca917b73aff853fe88476174c8a313863/src/blockencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fea960ca917b73aff853fe88476174c8a313863/src/blockencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.h?ref=0fea960ca917b73aff853fe88476174c8a313863",
        "patch": "@@ -99,7 +99,7 @@ class BlockTransactions {\n     }\n };\n \n-// Dumb serialization/storage-helper for CBlockHeaderAndShortTxIDs and PartiallyDownlaodedBlock\n+// Dumb serialization/storage-helper for CBlockHeaderAndShortTxIDs and PartiallyDownloadedBlock\n struct PrefilledTransaction {\n     // Used as an offset since last prefilled tx in CBlockHeaderAndShortTxIDs,\n     // as a proper transaction-in-block-index in PartiallyDownloadedBlock"
      },
      {
        "sha": "6240e82857eb99c6fe2f371a058211b4a77469ff",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fea960ca917b73aff853fe88476174c8a313863/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fea960ca917b73aff853fe88476174c8a313863/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=0fea960ca917b73aff853fe88476174c8a313863",
        "patch": "@@ -47,7 +47,7 @@ struct Params {\n     /** Block height at which BIP66 becomes active */\n     int BIP66Height;\n     /**\n-     * Minimum blocks including miner confirmation of the total of 2016 blocks in a retargetting period,\n+     * Minimum blocks including miner confirmation of the total of 2016 blocks in a retargeting period,\n      * (nPowTargetTimespan / nPowTargetSpacing) which is also used for BIP9 deployments.\n      * Examples: 1916 for 95%, 1512 for testchains.\n      */"
      },
      {
        "sha": "ff47e9776b643db85d72405385ee339da5ad33b8",
        "filename": "src/cuckoocache.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fea960ca917b73aff853fe88476174c8a313863/src/cuckoocache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fea960ca917b73aff853fe88476174c8a313863/src/cuckoocache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/cuckoocache.h?ref=0fea960ca917b73aff853fe88476174c8a313863",
        "patch": "@@ -257,7 +257,7 @@ class cache\n      *\n      * First, epoch_check decrements and checks the cheap heuristic, and then does\n      * a more expensive scan if the cheap heuristic runs out. If the expensive\n-     * scan suceeds, the epochs are aged and old elements are allow_erased. The\n+     * scan succeeds, the epochs are aged and old elements are allow_erased. The\n      * cheap heuristic is reset to retrigger after the worst case growth of the\n      * current epoch's elements would exceed the epoch_size.\n      */\n@@ -395,7 +395,7 @@ class cache\n             * 1) On first iteration, last_loc == invalid(), find returns last, so\n             *    last_loc defaults to locs[0].\n             * 2) On further iterations, where last_loc == locs[k], last_loc will\n-            *    go to locs[k+1 % 8], i.e., next of the 8 indicies wrapping around\n+            *    go to locs[k+1 % 8], i.e., next of the 8 indices wrapping around\n             *    to 0 if needed.\n             *\n             * This prevents moving the element we just put in."
      },
      {
        "sha": "daac7a0f1a7034b97c131203d6ef83d9142d45ef",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fea960ca917b73aff853fe88476174c8a313863/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fea960ca917b73aff853fe88476174c8a313863/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=0fea960ca917b73aff853fe88476174c8a313863",
        "patch": "@@ -25,7 +25,7 @@\n static const char* WWW_AUTH_HEADER_DATA = \"Basic realm=\\\"jsonrpc\\\"\";\n \n /** Simple one-shot callback timer to be used by the RPC mechanism to e.g.\n- * re-lock the wellet.\n+ * re-lock the wallet.\n  */\n class HTTPRPCTimer : public RPCTimerBase\n {"
      },
      {
        "sha": "e936e068f44ae657dd4f82649c26140fe61fbf44",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fea960ca917b73aff853fe88476174c8a313863/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fea960ca917b73aff853fe88476174c8a313863/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=0fea960ca917b73aff853fe88476174c8a313863",
        "patch": "@@ -1553,7 +1553,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     }\n \n     if (chainparams.GetConsensus().vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout != 0) {\n-        // Only advertize witness capabilities if they have a reasonable start time.\n+        // Only advertise witness capabilities if they have a reasonable start time.\n         // This allows us to have the code merged without a defined softfork, by setting its\n         // end time to 0.\n         // Note that setting NODE_WITNESS is never required: the only downside from not"
      },
      {
        "sha": "a85c2b7452e356fdc028bb1604a0f45caa2c5d88",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fea960ca917b73aff853fe88476174c8a313863/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fea960ca917b73aff853fe88476174c8a313863/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=0fea960ca917b73aff853fe88476174c8a313863",
        "patch": "@@ -49,7 +49,7 @@ class CNetAddr\n         bool IsIPv4() const;    // IPv4 mapped address (::FFFF:0:0/96, 0.0.0.0/0)\n         bool IsIPv6() const;    // IPv6 address (not mapped IPv4, not Tor)\n         bool IsRFC1918() const; // IPv4 private networks (10.0.0.0/8, 192.168.0.0/16, 172.16.0.0/12)\n-        bool IsRFC2544() const; // IPv4 inter-network communcations (192.18.0.0/15)\n+        bool IsRFC2544() const; // IPv4 inter-network communications (192.18.0.0/15)\n         bool IsRFC6598() const; // IPv4 ISP-level NAT (100.64.0.0/10)\n         bool IsRFC5737() const; // IPv4 documentation addresses (192.0.2.0/24, 198.51.100.0/24, 203.0.113.0/24)\n         bool IsRFC3849() const; // IPv6 documentation address (2001:0DB8::/32)"
      },
      {
        "sha": "4b34e73eb7a454aa8b7a579dd618c5b5052aef24",
        "filename": "src/qt/bantablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fea960ca917b73aff853fe88476174c8a313863/src/qt/bantablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fea960ca917b73aff853fe88476174c8a313863/src/qt/bantablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bantablemodel.cpp?ref=0fea960ca917b73aff853fe88476174c8a313863",
        "patch": "@@ -64,7 +64,7 @@ class BanTablePriv\n         }\n \n         if (sortColumn >= 0)\n-            // sort cachedBanlist (use stable sort to prevent rows jumping around unneceesarily)\n+            // sort cachedBanlist (use stable sort to prevent rows jumping around unnecessarily)\n             qStableSort(cachedBanlist.begin(), cachedBanlist.end(), BannedNodeLessThan(sortColumn, sortOrder));\n     }\n "
      },
      {
        "sha": "9d46280a37b4099234502d89c8569c8c43d540c6",
        "filename": "src/qt/paymentserver.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fea960ca917b73aff853fe88476174c8a313863/src/qt/paymentserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fea960ca917b73aff853fe88476174c8a313863/src/qt/paymentserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.h?ref=0fea960ca917b73aff853fe88476174c8a313863",
        "patch": "@@ -21,10 +21,10 @@\n //\n // When startup is finished and the main window is\n // shown, a signal is sent to slot uiReady(), which\n-// emits a receivedURL() signal for any payment\n+// emits a receivedURI() signal for any payment\n // requests that happened during startup.\n //\n-// After startup, receivedURL() happens as usual.\n+// After startup, receivedURI() happens as usual.\n //\n // This class has one more feature: a static\n // method that finds URIs passed in the command line"
      },
      {
        "sha": "1c0ed663c1fdfb596eaf88e2ba561998812d7b67",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fea960ca917b73aff853fe88476174c8a313863/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fea960ca917b73aff853fe88476174c8a313863/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=0fea960ca917b73aff853fe88476174c8a313863",
        "patch": "@@ -608,7 +608,7 @@ void SendCoinsDialog::updateGlobalFeeVariables()\n         // set nMinimumTotalFee to 0 to not accidentally pay a custom fee\n         CoinControlDialog::coinControl->nMinimumTotalFee = 0;\n \n-        // show the estimated reuquired time for confirmation\n+        // show the estimated required time for confirmation\n         ui->confirmationTargetLabel->setText(GUIUtil::formatDurationStr(nConfirmTarget * Params().GetConsensus().nPowTargetSpacing) + \" / \" + tr(\"%n block(s)\", \"\", nConfirmTarget));\n     }\n     else"
      },
      {
        "sha": "7ab4125284666b293f62309ae62c2099a3b1de25",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fea960ca917b73aff853fe88476174c8a313863/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fea960ca917b73aff853fe88476174c8a313863/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=0fea960ca917b73aff853fe88476174c8a313863",
        "patch": "@@ -39,7 +39,7 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n \n     QString version = tr(PACKAGE_NAME) + \" \" + tr(\"version\") + \" \" + QString::fromStdString(FormatFullVersion());\n     /* On x86 add a bit specifier to the version so that users can distinguish between\n-     * 32 and 64 bit builds. On other architectures, 32/64 bit may be more ambigious.\n+     * 32 and 64 bit builds. On other architectures, 32/64 bit may be more ambiguous.\n      */\n #if defined(__x86_64__)\n     version += \" \" + tr(\"(%1-bit)\").arg(64);"
      },
      {
        "sha": "35747552feaf0587f907c2bb593b986c041865be",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fea960ca917b73aff853fe88476174c8a313863/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fea960ca917b73aff853fe88476174c8a313863/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=0fea960ca917b73aff853fe88476174c8a313863",
        "patch": "@@ -150,7 +150,7 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n             obj.push_back(Pair(\"pingwait\", stats.dPingWait));\n         obj.push_back(Pair(\"version\", stats.nVersion));\n         // Use the sanitized form of subver here, to avoid tricksy remote peers from\n-        // corrupting or modifiying the JSON output by putting special characters in\n+        // corrupting or modifying the JSON output by putting special characters in\n         // their ver message.\n         obj.push_back(Pair(\"subver\", stats.cleanSubVer));\n         obj.push_back(Pair(\"inbound\", stats.fInbound));"
      },
      {
        "sha": "9f4741b1cd95d17bd0117de1dc64db920d3a24c2",
        "filename": "src/script/script.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fea960ca917b73aff853fe88476174c8a313863/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fea960ca917b73aff853fe88476174c8a313863/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=0fea960ca917b73aff853fe88476174c8a313863",
        "patch": "@@ -129,7 +129,7 @@ const char* GetOpName(opcodetype opcode)\n     case OP_CHECKMULTISIG          : return \"OP_CHECKMULTISIG\";\n     case OP_CHECKMULTISIGVERIFY    : return \"OP_CHECKMULTISIGVERIFY\";\n \n-    // expanson\n+    // expansion\n     case OP_NOP1                   : return \"OP_NOP1\";\n     case OP_CHECKLOCKTIMEVERIFY    : return \"OP_CHECKLOCKTIMEVERIFY\";\n     case OP_CHECKSEQUENCEVERIFY    : return \"OP_CHECKSEQUENCEVERIFY\";"
      },
      {
        "sha": "9661a665140499148dc2cf8e803f2aea160a4845",
        "filename": "src/test/serialize_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fea960ca917b73aff853fe88476174c8a313863/src/test/serialize_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fea960ca917b73aff853fe88476174c8a313863/src/test/serialize_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/serialize_tests.cpp?ref=0fea960ca917b73aff853fe88476174c8a313863",
        "patch": "@@ -90,7 +90,7 @@ BOOST_AUTO_TEST_CASE(sizes)\n \n BOOST_AUTO_TEST_CASE(floats_conversion)\n {\n-    // Choose values that map unambigiously to binary floating point to avoid\n+    // Choose values that map unambiguously to binary floating point to avoid\n     // rounding issues at the compiler side.\n     BOOST_CHECK_EQUAL(ser_uint32_to_float(0x00000000), 0.0F);\n     BOOST_CHECK_EQUAL(ser_uint32_to_float(0x3f000000), 0.5F);\n@@ -109,7 +109,7 @@ BOOST_AUTO_TEST_CASE(floats_conversion)\n \n BOOST_AUTO_TEST_CASE(doubles_conversion)\n {\n-    // Choose values that map unambigiously to binary floating point to avoid\n+    // Choose values that map unambiguously to binary floating point to avoid\n     // rounding issues at the compiler side.\n     BOOST_CHECK_EQUAL(ser_uint64_to_double(0x0000000000000000ULL), 0.0);\n     BOOST_CHECK_EQUAL(ser_uint64_to_double(0x3fe0000000000000ULL), 0.5);"
      },
      {
        "sha": "c49c5d9eb2a83f39838a8d0e0a9e763a9b4508b3",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fea960ca917b73aff853fe88476174c8a313863/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fea960ca917b73aff853fe88476174c8a313863/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=0fea960ca917b73aff853fe88476174c8a313863",
        "patch": "@@ -372,7 +372,7 @@ class TorController\n     struct event *reconnect_ev;\n     float reconnect_timeout;\n     CService service;\n-    /** Cooie for SAFECOOKIE auth */\n+    /** Cookie for SAFECOOKIE auth */\n     std::vector<uint8_t> cookie;\n     /** ClientNonce for SAFECOOKIE auth */\n     std::vector<uint8_t> clientNonce;"
      },
      {
        "sha": "db1a02455f862fa1ac1b8bee2e316e123de1471c",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fea960ca917b73aff853fe88476174c8a313863/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fea960ca917b73aff853fe88476174c8a313863/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=0fea960ca917b73aff853fe88476174c8a313863",
        "patch": "@@ -355,7 +355,7 @@ enum class MemPoolRemovalReason {\n  * Transactions are added when they are seen on the network (or created by the\n  * local node), but not all transactions seen are added to the pool. For\n  * example, the following new transactions will not be added to the mempool:\n- * - a transaction which doesn't make the mimimum fee requirements.\n+ * - a transaction which doesn't meet the minimum fee requirements.\n  * - a new transaction that double-spends an input of a transaction already in\n  * the pool where the new transaction does not meet the Replace-By-Fee\n  * requirements as defined in BIP 125."
      },
      {
        "sha": "c7b3e4f168655260f38c381b050706d18d23ce5a",
        "filename": "src/utiltime.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fea960ca917b73aff853fe88476174c8a313863/src/utiltime.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fea960ca917b73aff853fe88476174c8a313863/src/utiltime.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utiltime.cpp?ref=0fea960ca917b73aff853fe88476174c8a313863",
        "patch": "@@ -63,7 +63,7 @@ void MilliSleep(int64_t n)\n {\n \n /**\n- * Boost's sleep_for was uninterruptable when backed by nanosleep from 1.50\n+ * Boost's sleep_for was uninterruptible when backed by nanosleep from 1.50\n  * until fixed in 1.52. Use the deprecated sleep method for the broken case.\n  * See: https://svn.boost.org/trac/boost/ticket/7238\n  */"
      },
      {
        "sha": "517202a9bb84a6441e011f00b9f2ae21d060628a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fea960ca917b73aff853fe88476174c8a313863/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fea960ca917b73aff853fe88476174c8a313863/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=0fea960ca917b73aff853fe88476174c8a313863",
        "patch": "@@ -2576,7 +2576,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                 // BIP125 defines opt-in RBF as any nSequence < maxint-1, so\n                 // we use the highest possible value in that range (maxint-2)\n                 // to avoid conflicting with other possible uses of nSequence,\n-                // and in the spirit of \"smallest posible change from prior\n+                // and in the spirit of \"smallest possible change from prior\n                 // behavior.\"\n                 for (const auto& coin : setCoins)\n                     txNew.vin.push_back(CTxIn(coin.first->GetHash(),coin.second,CScript(),"
      }
    ]
  },
  {
    "sha": "5f62e3eb6381e455a1b83ab6fb368a132124d2a3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZjYyZTNlYjYzODFlNDU1YTFiODNhYjZmYjM2OGExMzIxMjRkMmEz",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-01-29T17:19:55Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-01-29T17:19:55Z"
      },
      "message": "Fix typos",
      "tree": {
        "sha": "eef3a02c5c59b6d75a3c35b7f3ad4cba38d9d8a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eef3a02c5c59b6d75a3c35b7f3ad4cba38d9d8a7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f62e3eb6381e455a1b83ab6fb368a132124d2a3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f62e3eb6381e455a1b83ab6fb368a132124d2a3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5f62e3eb6381e455a1b83ab6fb368a132124d2a3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f62e3eb6381e455a1b83ab6fb368a132124d2a3/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0fea960ca917b73aff853fe88476174c8a313863",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fea960ca917b73aff853fe88476174c8a313863",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0fea960ca917b73aff853fe88476174c8a313863"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "6ee5df47039e6f732b46e421d02f81bf5ccbf24a",
        "filename": "contrib/gitian-build.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f62e3eb6381e455a1b83ab6fb368a132124d2a3/contrib/gitian-build.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f62e3eb6381e455a1b83ab6fb368a132124d2a3/contrib/gitian-build.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-build.sh?ref=5f62e3eb6381e455a1b83ab6fb368a132124d2a3",
        "patch": "@@ -41,7 +41,7 @@ Options:\n -c|--commit\tIndicate that the version argument is for a commit or branch\n -u|--url\tSpecify the URL of the repository. Default is https://github.com/bitcoin/bitcoin\n -v|--verify \tVerify the gitian build\n--b|--build\tDo a gitiain build\n+-b|--build\tDo a gitian build\n -s|--sign\tMake signed binaries for Windows and Mac OSX\n -B|--buildsign\tBuild both signed and unsigned binaries\n -o|--os\t\tSpecify which Operating Systems the build is for. Default is lwx. l for linux, w for windows, x for osx"
      },
      {
        "sha": "5995f9f438983b6050c361459af41c1eb5056fee",
        "filename": "contrib/macdeploy/macdeployqtplus",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f62e3eb6381e455a1b83ab6fb368a132124d2a3/contrib/macdeploy/macdeployqtplus",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f62e3eb6381e455a1b83ab6fb368a132124d2a3/contrib/macdeploy/macdeployqtplus",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/macdeployqtplus?ref=5f62e3eb6381e455a1b83ab6fb368a132124d2a3",
        "patch": "@@ -340,7 +340,7 @@ def deployFrameworks(frameworks, bundlePath, binaryPath, strip, verbose, deploym\n         # install_name_tool the new id into the binary\n         changeInstallName(framework.installName, framework.deployedInstallName, binaryPath, verbose)\n         \n-        # Copy farmework to app bundle.\n+        # Copy framework to app bundle.\n         deployedBinaryPath = copyFramework(framework, bundlePath, verbose)\n         # Skip the rest if already was deployed.\n         if deployedBinaryPath is None:\n@@ -492,7 +492,7 @@ ap.add_argument(\"-no-strip\", dest=\"strip\", action=\"store_false\", default=True, h\n ap.add_argument(\"-sign\", dest=\"sign\", action=\"store_true\", default=False, help=\"sign .app bundle with codesign tool\")\n ap.add_argument(\"-dmg\", nargs=\"?\", const=\"\", metavar=\"basename\", help=\"create a .dmg disk image; if basename is not specified, a camel-cased version of the app name is used\")\n ap.add_argument(\"-fancy\", nargs=1, metavar=\"plist\", default=[], help=\"make a fancy looking disk image using the given plist file with instructions; requires -dmg to work\")\n-ap.add_argument(\"-add-qt-tr\", nargs=1, metavar=\"languages\", default=[], help=\"add Qt translation files to the bundle's ressources; the language list must be separated with commas, not with whitespace\")\n+ap.add_argument(\"-add-qt-tr\", nargs=1, metavar=\"languages\", default=[], help=\"add Qt translation files to the bundle's resources; the language list must be separated with commas, not with whitespace\")\n ap.add_argument(\"-translations-dir\", nargs=1, metavar=\"path\", default=None, help=\"Path to Qt's translation files\")\n ap.add_argument(\"-add-resources\", nargs=\"+\", metavar=\"path\", default=[], help=\"list of additional files or folders to be copied into the bundle's resources; must be the last argument\")\n ap.add_argument(\"-volname\", nargs=1, metavar=\"volname\", default=[], help=\"custom volume name for dmg\")"
      },
      {
        "sha": "e1fd0b317b0ed8329856048f1f20aaef58eac0cc",
        "filename": "contrib/rpm/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f62e3eb6381e455a1b83ab6fb368a132124d2a3/contrib/rpm/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f62e3eb6381e455a1b83ab6fb368a132124d2a3/contrib/rpm/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/rpm/README.md?ref=5f62e3eb6381e455a1b83ab6fb368a132124d2a3",
        "patch": "@@ -31,7 +31,7 @@ through `Source23` are used.\n Sources 30-39 should be reserved for SELinux related files. Currently only\n `Source30` through `Source32` are used. Until those files are in a tagged\n release, the full URL specified in the RPM spec file will not work. You can get\n-them from the git ropository where you retrieved this file.\n+them from the git repository where you retrieved this file.\n \n Sources 100+ are for files that are not source tarballs and are not maintained\n in the bitcoin git repository. At present only an SVG version of the Bitcoin"
      },
      {
        "sha": "8d50144c21f9bd3726b9b12e09e8c3ff44d6e595",
        "filename": "share/certs/PrivateKeyNotes.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f62e3eb6381e455a1b83ab6fb368a132124d2a3/share/certs/PrivateKeyNotes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f62e3eb6381e455a1b83ab6fb368a132124d2a3/share/certs/PrivateKeyNotes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/certs/PrivateKeyNotes.md?ref=5f62e3eb6381e455a1b83ab6fb368a132124d2a3",
        "patch": "@@ -2,7 +2,7 @@ Code-signing private key notes\n ==\n \n The private keys for these certificates were generated on Gavin's main work machine,\n-following the certificate authoritys' recommendations for generating certificate\n+following the certificate authority's recommendations for generating certificate\n signing requests.\n \n For OSX, the private key was generated by Keychain.app on Gavin's main work machine."
      },
      {
        "sha": "1c1acb6b1038b9f5f6d4134979e434bdb0e823c3",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f62e3eb6381e455a1b83ab6fb368a132124d2a3/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f62e3eb6381e455a1b83ab6fb368a132124d2a3/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=5f62e3eb6381e455a1b83ab6fb368a132124d2a3",
        "patch": "@@ -770,7 +770,7 @@ void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate, double nVer\n     if (!clientModel)\n         return;\n \n-    // Prevent orphan statusbar messages (e.g. hover Quit in main menu, wait until chain-sync starts -> garbelled text)\n+    // Prevent orphan statusbar messages (e.g. hover Quit in main menu, wait until chain-sync starts -> garbled text)\n     statusBar()->clearMessage();\n \n     // Acquire current block source"
      },
      {
        "sha": "5d6c0e2e31f252a5a0d06be45c0e46e53d8fc712",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f62e3eb6381e455a1b83ab6fb368a132124d2a3/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f62e3eb6381e455a1b83ab6fb368a132124d2a3/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=5f62e3eb6381e455a1b83ab6fb368a132124d2a3",
        "patch": "@@ -536,7 +536,7 @@ int TableViewLastColumnResizingFixer::getAvailableWidthForColumn(int column)\n     return nResult;\n }\n \n-// Make sure we don't make the columns wider than the tables viewport width.\n+// Make sure we don't make the columns wider than the table's viewport width.\n void TableViewLastColumnResizingFixer::adjustTableColumnsWidth()\n {\n     disconnectViewHeadersSignals();\n@@ -570,7 +570,7 @@ void TableViewLastColumnResizingFixer::on_sectionResized(int logicalIndex, int o\n     }\n }\n \n-// When the tabless geometry is ready, we manually perform the stretch of the \"Message\" column,\n+// When the table's geometry is ready, we manually perform the stretch of the \"Message\" column,\n // as the \"Stretch\" resize mode does not allow for interactive resizing.\n void TableViewLastColumnResizingFixer::on_geometriesChanged()\n {"
      },
      {
        "sha": "913aa5e24bf113349a030be978b0f5e7a43d23d7",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f62e3eb6381e455a1b83ab6fb368a132124d2a3/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f62e3eb6381e455a1b83ab6fb368a132124d2a3/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=5f62e3eb6381e455a1b83ab6fb368a132124d2a3",
        "patch": "@@ -140,7 +140,7 @@ namespace GUIUtil\n      * Also makes sure the column widths are never larger than the table's viewport.\n      * In Qt, all columns are resizable from the right, but it's not intuitive resizing the last column from the right.\n      * Usually our second to last columns behave as if stretched, and when on strech mode, columns aren't resizable\n-     * interactively or programatically.\n+     * interactively or programmatically.\n      *\n      * This helper object takes care of this issue.\n      *"
      }
    ]
  },
  {
    "sha": "720b5794803444f7afd965490975f46bc23fdab2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MjBiNTc5NDgwMzQ0NGY3YWZkOTY1NDkwOTc1ZjQ2YmMyM2ZkYWIy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-30T08:00:51Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-30T08:15:29Z"
      },
      "message": "Merge #9646: depends: Fix cross build for qt5.7\n\nb5f374f qt: fix build with zlib for target (Cory Fields)\n8efa34f depends: add a zlib build (Cory Fields)\n342eb96 build: find qt's renamed helper libs from 5.7 (Cory Fields)",
      "tree": {
        "sha": "f148c60dd3a58537f4b46e09f23b037c1828c42a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f148c60dd3a58537f4b46e09f23b037c1828c42a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/720b5794803444f7afd965490975f46bc23fdab2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYjvYhAAoJEHSBCwEjRsmmS74H/1+Pql009foJRGhTTXnHR2II\nniPfv0ekM7+f8iTW5TnCZ8l8PpEcCxFNALXyoYZHKbjtrRH5Y32uKzqwtqvAHGWX\nimu1Wl56dM+6bJMBsV5/tPrWnI2kQ6xX/cgIMgk/yQctQSrOFvTseQ7U6dnChB+0\nub5LKwfkQE771CIhckgjJPv4/yyo6RWG9kOBY4S66qAma+107pqfJsyFWK/bx8zb\nyjFJvGzA+xw0oBj4PRhE5cYYLg9+UG5pEI6aQaXi/CrTraJYZVOTkKnTPeNnHd7Q\n3nwKXZaFwJ8gowup0G7qLxyba+eVRgotPZ89AowFZ2rSidT+c2dAG60tHkXjdP8=\n=2F+H\n-----END PGP SIGNATURE-----",
        "payload": "tree f148c60dd3a58537f4b46e09f23b037c1828c42a\nparent 0fea960ca917b73aff853fe88476174c8a313863\nparent b5f374fef71ba2ba99e3d9629b66fd1491fd7c90\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1485763251 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1485764129 +0100\n\nMerge #9646: depends: Fix cross build for qt5.7\n\nb5f374f qt: fix build with zlib for target (Cory Fields)\n8efa34f depends: add a zlib build (Cory Fields)\n342eb96 build: find qt's renamed helper libs from 5.7 (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/720b5794803444f7afd965490975f46bc23fdab2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/720b5794803444f7afd965490975f46bc23fdab2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/720b5794803444f7afd965490975f46bc23fdab2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0fea960ca917b73aff853fe88476174c8a313863",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fea960ca917b73aff853fe88476174c8a313863",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0fea960ca917b73aff853fe88476174c8a313863"
      },
      {
        "sha": "b5f374fef71ba2ba99e3d9629b66fd1491fd7c90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5f374fef71ba2ba99e3d9629b66fd1491fd7c90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b5f374fef71ba2ba99e3d9629b66fd1491fd7c90"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 43,
      "deletions": 15
    },
    "files": [
      {
        "sha": "f43fc3037f3d583eeefe358c8102540a30da7e39",
        "filename": "build-aux/m4/bitcoin_qt.m4",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/720b5794803444f7afd965490975f46bc23fdab2/build-aux/m4/bitcoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/720b5794803444f7afd965490975f46bc23fdab2/build-aux/m4/bitcoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4?ref=720b5794803444f7afd965490975f46bc23fdab2",
        "patch": "@@ -473,8 +473,8 @@ AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITHOUT_PKGCONFIG],[\n   ])\n \n   BITCOIN_QT_CHECK(AC_CHECK_LIB([z] ,[main],,AC_MSG_WARN([zlib not found. Assuming qt has it built-in])))\n-  BITCOIN_QT_CHECK(AC_CHECK_LIB([png] ,[main],,AC_MSG_WARN([libpng not found. Assuming qt has it built-in])))\n-  BITCOIN_QT_CHECK(AC_CHECK_LIB([jpeg] ,[main],,AC_MSG_WARN([libjpeg not found. Assuming qt has it built-in])))\n+  BITCOIN_QT_CHECK(AC_SEARCH_LIBS([png_error] ,[qtpng png],,AC_MSG_WARN([libpng not found. Assuming qt has it built-in])))\n+  BITCOIN_QT_CHECK(AC_SEARCH_LIBS([jpeg_create_decompress] ,[qtjpeg jpeg],,AC_MSG_WARN([libjpeg not found. Assuming qt has it built-in])))\n   BITCOIN_QT_CHECK(AC_SEARCH_LIBS([pcre16_exec], [qtpcre pcre16],,AC_MSG_WARN([libpcre16 not found. Assuming qt has it built-in])))\n   BITCOIN_QT_CHECK(AC_SEARCH_LIBS([hb_ot_tags_from_script] ,[qtharfbuzzng harfbuzz],,AC_MSG_WARN([libharfbuzz not found. Assuming qt has it built-in or support is disabled])))\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Core]   ,[main],,BITCOIN_QT_FAIL(lib$QT_LIB_PREFIXCore not found)))"
      },
      {
        "sha": "088723ebd0d56d6bc2ca2eba20597d52e142ac02",
        "filename": "depends/packages/packages.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/720b5794803444f7afd965490975f46bc23fdab2/depends/packages/packages.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/720b5794803444f7afd965490975f46bc23fdab2/depends/packages/packages.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/packages.mk?ref=720b5794803444f7afd965490975f46bc23fdab2",
        "patch": "@@ -2,7 +2,7 @@ packages:=boost openssl libevent zeromq\n native_packages := native_ccache\n \n qt_native_packages = native_protobuf\n-qt_packages = qrencode protobuf\n+qt_packages = qrencode protobuf zlib\n \n qt_x86_64_linux_packages:=qt expat dbus libxcb xcb_proto libXau xproto freetype fontconfig libX11 xextproto libXext xtrans\n qt_i686_linux_packages:=$(qt_x86_64_linux_packages)"
      },
      {
        "sha": "bbfdb766ed694025c0124140c00b3044ca362d02",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 11,
        "deletions": 8,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/720b5794803444f7afd965490975f46bc23fdab2/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/720b5794803444f7afd965490975f46bc23fdab2/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=720b5794803444f7afd965490975f46bc23fdab2",
        "patch": "@@ -4,7 +4,7 @@ $(package)_download_path=http://download.qt.io/official_releases/qt/5.7/$($(pack\n $(package)_suffix=opensource-src-$($(package)_version).tar.gz\n $(package)_file_name=qtbase-$($(package)_suffix)\n $(package)_sha256_hash=95f83e532d23b3ddbde7973f380ecae1bac13230340557276f75f2e37984e410\n-$(package)_dependencies=openssl\n+$(package)_dependencies=openssl zlib\n $(package)_linux_dependencies=freetype fontconfig libxcb libX11 xproto libXext\n $(package)_build_subdir=qtbase\n $(package)_qt_libs=corelib network widgets gui plugins testlib\n@@ -73,7 +73,7 @@ $(package)_config_opts += -prefix $(host_prefix)\n $(package)_config_opts += -qt-libpng\n $(package)_config_opts += -qt-libjpeg\n $(package)_config_opts += -qt-pcre\n-$(package)_config_opts += -qt-zlib\n+$(package)_config_opts += -system-zlib\n $(package)_config_opts += -reduce-exports\n $(package)_config_opts += -static\n $(package)_config_opts += -silent\n@@ -140,19 +140,22 @@ define $(package)_preprocess_cmds\n   patch -p1 < $($(package)_patch_dir)/pidlist_absolute.patch && \\\n   patch -p1 < $($(package)_patch_dir)/fix-xcb-include-order.patch && \\\n   patch -p1 < $($(package)_patch_dir)/fix_qt_pkgconfig.patch && \\\n-  echo \"QMAKE_CFLAGS     += $($(package)_cflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n-  echo \"QMAKE_CXXFLAGS   += $($(package)_cxxflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n-  echo \"QMAKE_LFLAGS     += $($(package)_ldflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n-  sed -i.old \"s|QMAKE_CFLAGS            = |QMAKE_CFLAGS            = $($(package)_cflags) $($(package)_cppflags) |\" qtbase/mkspecs/win32-g++/qmake.conf && \\\n-  sed -i.old \"s|QMAKE_LFLAGS            = |QMAKE_LFLAGS            = $($(package)_ldflags) |\" qtbase/mkspecs/win32-g++/qmake.conf && \\\n-  sed -i.old \"s|QMAKE_CXXFLAGS          = |QMAKE_CXXFLAGS            = $($(package)_cxxflags) $($(package)_cppflags) |\" qtbase/mkspecs/win32-g++/qmake.conf\n+  echo \"!host_build: QMAKE_CFLAGS     += $($(package)_cflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n+  echo \"!host_build: QMAKE_CXXFLAGS   += $($(package)_cxxflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n+  echo \"!host_build: QMAKE_LFLAGS     += $($(package)_ldflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n+  sed -i.old \"s|QMAKE_CFLAGS            = |!host_build: QMAKE_CFLAGS            = $($(package)_cflags) $($(package)_cppflags) |\" qtbase/mkspecs/win32-g++/qmake.conf && \\\n+  sed -i.old \"s|QMAKE_LFLAGS            = |!host_build: QMAKE_LFLAGS            = $($(package)_ldflags) |\" qtbase/mkspecs/win32-g++/qmake.conf && \\\n+  sed -i.old \"s|QMAKE_CXXFLAGS          = |!host_build: QMAKE_CXXFLAGS            = $($(package)_cxxflags) $($(package)_cppflags) |\" qtbase/mkspecs/win32-g++/qmake.conf\n+\n endef\n \n define $(package)_config_cmds\n   export PKG_CONFIG_SYSROOT_DIR=/ && \\\n   export PKG_CONFIG_LIBDIR=$(host_prefix)/lib/pkgconfig && \\\n   export PKG_CONFIG_PATH=$(host_prefix)/share/pkgconfig  && \\\n   ./configure $($(package)_config_opts) && \\\n+  echo \"host_build: QT_CONFIG ~= s/system-zlib/zlib\" >> mkspecs/qconfig.pri && \\\n+  echo \"CONFIG += force_bootstrap\" >> mkspecs/qconfig.pri && \\\n   $(MAKE) sub-src-clean && \\\n   cd ../qttranslations && ../qtbase/bin/qmake qttranslations.pro -o Makefile && \\\n   cd translations && ../../qtbase/bin/qmake translations.pro -o Makefile && cd ../.. &&\\"
      },
      {
        "sha": "7ff5d00bbdc6494f43cf5a164509377dff6c6d49",
        "filename": "depends/packages/zlib.mk",
        "status": "added",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/720b5794803444f7afd965490975f46bc23fdab2/depends/packages/zlib.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/720b5794803444f7afd965490975f46bc23fdab2/depends/packages/zlib.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/zlib.mk?ref=720b5794803444f7afd965490975f46bc23fdab2",
        "patch": "@@ -0,0 +1,25 @@\n+package=zlib\n+$(package)_version=1.2.11\n+$(package)_download_path=http://www.zlib.net\n+$(package)_file_name=$(package)-$($(package)_version).tar.gz\n+$(package)_sha256_hash=c3e5e9fdd5004dcb542feda5ee4f0ff0744628baf8ed2dd5d66f8ca1197cb1a1\n+\n+define $(package)_set_vars\n+$(package)_build_opts= CC=\"$($(package)_cc)\"\n+$(package)_build_opts+=CFLAGS=\"$($(package)_cflags) $($(package)_cppflags) -fPIC\"\n+$(package)_build_opts+=AR=\"$($(package)_ar)\"\n+$(package)_build_opts+=RANLIB=\"$($(package)_ranlib)\"\n+endef\n+\n+define $(package)_config_cmds\n+  ./configure --static --prefix=$(host_prefix)\n+endef\n+\n+define $(package)_build_cmds\n+  $(MAKE) $($(package)_build_opts) libz.a\n+endef\n+\n+define $(package)_stage_cmds\n+  $(MAKE) DESTDIR=$($(package)_staging_dir) install $($(package)_build_opts)\n+endef\n+"
      },
      {
        "sha": "ca70d30b15e9c4115f1e7c2ac885858244fd123b",
        "filename": "depends/patches/qt/mac-qmake.conf",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/720b5794803444f7afd965490975f46bc23fdab2/depends/patches/qt/mac-qmake.conf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/720b5794803444f7afd965490975f46bc23fdab2/depends/patches/qt/mac-qmake.conf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/mac-qmake.conf?ref=720b5794803444f7afd965490975f46bc23fdab2",
        "patch": "@@ -14,10 +14,10 @@ QMAKE_MAC_SDK.macosx.Path = $${MAC_SDK_PATH}\n QMAKE_MAC_SDK.macosx.platform_name = macosx\n QMAKE_MAC_SDK.macosx.SDKVersion = $${MAC_SDK_VERSION}\n QMAKE_MAC_SDK.macosx.PlatformPath = /phony\n-QMAKE_CFLAGS += -target $${MAC_TARGET}\n-QMAKE_OBJECTIVE_CFLAGS += $$QMAKE_CFLAGS\n-QMAKE_CXXFLAGS += $$QMAKE_CFLAGS\n-QMAKE_LFLAGS += -target $${MAC_TARGET} -mlinker-version=$${MAC_LD64_VERSION}\n+!host_build: QMAKE_CFLAGS += -target $${MAC_TARGET}\n+!host_build: QMAKE_OBJECTIVE_CFLAGS += $$QMAKE_CFLAGS\n+!host_build: QMAKE_CXXFLAGS += $$QMAKE_CFLAGS\n+!host_build: QMAKE_LFLAGS += -target $${MAC_TARGET} -mlinker-version=$${MAC_LD64_VERSION}\n QMAKE_AR = $${CROSS_COMPILE}ar cq\n QMAKE_RANLIB=$${CROSS_COMPILE}ranlib\n QMAKE_LIBTOOL=$${CROSS_COMPILE}libtool"
      }
    ]
  },
  {
    "sha": "d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMmM5ZTRkNDIyOTE3NDIyNWFkMGMzZWQ5ZGMzNjYzMjRlZDVkZDNi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-30T09:07:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-30T09:38:56Z"
      },
      "message": "Merge #9615: Wallet incremental fee\n\n4b189c1 Change bumpfee result value from 'oldfee' to 'origfee'. (Alex Morcos)\n0c0c63f Introduce WALLET_INCREMENTAL_RELAY_FEE (Alex Morcos)\ne8021ec Use CWallet::GetMinimumFee in bumpfee (Alex Morcos)\nae9719a Refactor GetMinimumFee to give option of providing targetFee (Alex Morcos)\nfe8e8ef [rpc] Add incremental relay fee to getnetworkinfo (Alex Morcos)\n6b331e6 Fix to have miner test aware of new separate block min tx fee (Alex Morcos)\nde6400d Fix missing use of dustRelayFee (Alex Morcos)\n5b15870 Use incrementalRelayFee for BIP 125 replacement (Alex Morcos)",
      "tree": {
        "sha": "4aec2a7be4890d08e514f0b115f9e3ec53d3331c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4aec2a7be4890d08e514f0b115f9e3ec53d3331c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYjwmwAAoJEHSBCwEjRsmmqMoH/2Gh6nZG7+Ofg9BPfR2Jcz7l\nhseLxcaTFs8sCvJfK0h5dif1BTQLcFMNcj/yvx5NM2m+s5WNllK68XQrUdLVUnRG\nH10v0IO7UD3O4FkwPxkn92h/xpqafhFZyL3aL2f/1HgTlz0ThuOM0d+tl9QSKkt0\niFOIpV8ggF+SXDqlps83UK/J12PxzdIUSz+vKXf0Lez5EjTLHoiFCUc01WJQoXmM\nrp9PmAp5Dv9G6eR8eB1GhCqyX/pYoSBmPXKK6vF2Gi+BdJBqsQPBA9bvecBm7iZx\nWFaxtDwYu0r9FIiAe0ojTb4JbXF343KMhG8T+oHM90I7IN8iBk5bz2u+gHJQXWg=\n=QDYg\n-----END PGP SIGNATURE-----",
        "payload": "tree 4aec2a7be4890d08e514f0b115f9e3ec53d3331c\nparent 720b5794803444f7afd965490975f46bc23fdab2\nparent 4b189c13401bcd350c05cf8194beaeb3d18b3ebc\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1485767241 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1485769136 +0100\n\nMerge #9615: Wallet incremental fee\n\n4b189c1 Change bumpfee result value from 'oldfee' to 'origfee'. (Alex Morcos)\n0c0c63f Introduce WALLET_INCREMENTAL_RELAY_FEE (Alex Morcos)\ne8021ec Use CWallet::GetMinimumFee in bumpfee (Alex Morcos)\nae9719a Refactor GetMinimumFee to give option of providing targetFee (Alex Morcos)\nfe8e8ef [rpc] Add incremental relay fee to getnetworkinfo (Alex Morcos)\n6b331e6 Fix to have miner test aware of new separate block min tx fee (Alex Morcos)\nde6400d Fix missing use of dustRelayFee (Alex Morcos)\n5b15870 Use incrementalRelayFee for BIP 125 replacement (Alex Morcos)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "720b5794803444f7afd965490975f46bc23fdab2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/720b5794803444f7afd965490975f46bc23fdab2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/720b5794803444f7afd965490975f46bc23fdab2"
      },
      {
        "sha": "4b189c13401bcd350c05cf8194beaeb3d18b3ebc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b189c13401bcd350c05cf8194beaeb3d18b3ebc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4b189c13401bcd350c05cf8194beaeb3d18b3ebc"
      }
    ],
    "stats": {
      "total": 106,
      "additions": 70,
      "deletions": 36
    },
    "files": [
      {
        "sha": "f590db5efaa7474c438a6b4a70a55d9a32a16e2a",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b",
        "patch": "@@ -10,6 +10,7 @@\n #include \"net.h\"\n #include \"net_processing.h\"\n #include \"netbase.h\"\n+#include \"policy/policy.h\"\n #include \"protocol.h\"\n #include \"sync.h\"\n #include \"timedata.h\"\n@@ -417,6 +418,7 @@ UniValue getnetworkinfo(const JSONRPCRequest& request)\n             \"  ,...\\n\"\n             \"  ],\\n\"\n             \"  \\\"relayfee\\\": x.xxxxxxxx,                (numeric) minimum relay fee for non-free transactions in \" + CURRENCY_UNIT + \"/kB\\n\"\n+            \"  \\\"incrementalfee\\\": x.xxxxxxxx,          (numeric) minimum fee increment for mempool limiting or BIP 125 replacement in \" + CURRENCY_UNIT + \"/kB\\n\"\n             \"  \\\"localaddresses\\\": [                    (array) list of local addresses\\n\"\n             \"  {\\n\"\n             \"    \\\"address\\\": \\\"xxxx\\\",                 (string) network address\\n\"\n@@ -447,6 +449,7 @@ UniValue getnetworkinfo(const JSONRPCRequest& request)\n     }\n     obj.push_back(Pair(\"networks\",      GetNetworksInfo()));\n     obj.push_back(Pair(\"relayfee\",      ValueFromAmount(::minRelayTxFee.GetFeePerK())));\n+    obj.push_back(Pair(\"incrementalfee\", ValueFromAmount(::incrementalRelayFee.GetFeePerK())));\n     UniValue localAddresses(UniValue::VARR);\n     {\n         LOCK(cs_mapLocalHost);"
      },
      {
        "sha": "f856d8a91a704b20b29c42cf74e2f06d7d9def64",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b",
        "patch": "@@ -9,6 +9,7 @@\n #include \"consensus/validation.h\"\n #include \"validation.h\"\n #include \"miner.h\"\n+#include \"policy/policy.h\"\n #include \"pubkey.h\"\n #include \"script/standard.h\"\n #include \"txmempool.h\"\n@@ -24,6 +25,8 @@\n \n BOOST_FIXTURE_TEST_SUITE(miner_tests, TestingSetup)\n \n+static CFeeRate blockMinFeeRate = CFeeRate(DEFAULT_BLOCK_MIN_TX_FEE);\n+\n static\n struct {\n     unsigned char extranonce;\n@@ -112,16 +115,16 @@ void TestPackageSelection(const CChainParams& chainparams, CScript scriptPubKey,\n     BOOST_CHECK(pblocktemplate->block.vtx[2]->GetHash() == hashHighFeeTx);\n     BOOST_CHECK(pblocktemplate->block.vtx[3]->GetHash() == hashMediumFeeTx);\n \n-    // Test that a package below the min relay fee doesn't get included\n+    // Test that a package below the block min tx fee doesn't get included\n     tx.vin[0].prevout.hash = hashHighFeeTx;\n     tx.vout[0].nValue = 5000000000LL - 1000 - 50000; // 0 fee\n     uint256 hashFreeTx = tx.GetHash();\n     mempool.addUnchecked(hashFreeTx, entry.Fee(0).FromTx(tx));\n     size_t freeTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n \n     // Calculate a fee on child transaction that will put the package just\n-    // below the min relay fee (assuming 1 child tx of the same size).\n-    CAmount feeToUse = minRelayTxFee.GetFee(2*freeTxSize) - 1;\n+    // below the block min tx fee (assuming 1 child tx of the same size).\n+    CAmount feeToUse = blockMinFeeRate.GetFee(2*freeTxSize) - 1;\n \n     tx.vin[0].prevout.hash = hashFreeTx;\n     tx.vout[0].nValue = 5000000000LL - 1000 - 50000 - feeToUse;\n@@ -158,7 +161,7 @@ void TestPackageSelection(const CChainParams& chainparams, CScript scriptPubKey,\n     // This tx can't be mined by itself\n     tx.vin[0].prevout.hash = hashFreeTx2;\n     tx.vout.resize(1);\n-    feeToUse = minRelayTxFee.GetFee(freeTxSize);\n+    feeToUse = blockMinFeeRate.GetFee(freeTxSize);\n     tx.vout[0].nValue = 5000000000LL - 100000000 - feeToUse;\n     uint256 hashLowFeeTx2 = tx.GetHash();\n     mempool.addUnchecked(hashLowFeeTx2, entry.Fee(feeToUse).SpendsCoinbase(false).FromTx(tx));"
      },
      {
        "sha": "3142b32914475252f42706d139f1a1fcbc5bdc0a",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b",
        "patch": "@@ -932,14 +932,14 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n             // Finally in addition to paying more fees than the conflicts the\n             // new transaction must pay for its own bandwidth.\n             CAmount nDeltaFees = nModifiedFees - nConflictingFees;\n-            if (nDeltaFees < ::minRelayTxFee.GetFee(nSize))\n+            if (nDeltaFees < ::incrementalRelayFee.GetFee(nSize))\n             {\n                 return state.DoS(0, false,\n                         REJECT_INSUFFICIENTFEE, \"insufficient fee\", false,\n                         strprintf(\"rejecting replacement %s, not enough additional fees to relay; %s < %s\",\n                               hash.ToString(),\n                               FormatMoney(nDeltaFees),\n-                              FormatMoney(::minRelayTxFee.GetFee(nSize))));\n+                              FormatMoney(::incrementalRelayFee.GetFee(nSize))));\n             }\n         }\n "
      },
      {
        "sha": "bfc738afadfb874eb88be42bae508aa986f82e25",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 28,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b",
        "patch": "@@ -2682,8 +2682,8 @@ UniValue bumpfee(const JSONRPCRequest& request)\n             \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n             \"The user can specify a confirmation target for estimatefee.\\n\"\n             \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n-            \"At a minimum, the new fee rate must be high enough to pay a new relay fee (relay fee amount returned\\n\"\n-            \"by getnetworkinfo RPC) and to enter the node's mempool.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay an additional new relay fee (incrementalfee\\n\"\n+            \"returned by getnetworkinfo) to enter the node's mempool.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. txid                  (string, required) The txid to be bumped\\n\"\n             \"2. options               (object, optional)\\n\"\n@@ -2704,8 +2704,8 @@ UniValue bumpfee(const JSONRPCRequest& request)\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n-            \"  \\\"oldfee\\\":  n,         (numeric) Fee of the replaced transaction\\n\"\n-            \"  \\\"fee\\\":     n,         (numeric) Fee of the new transaction\\n\"\n+            \"  \\\"origfee\\\":  n,         (numeric) Fee of the replaced transaction\\n\"\n+            \"  \\\"fee\\\":      n,         (numeric) Fee of the new transaction\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n@@ -2769,6 +2769,10 @@ UniValue bumpfee(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n     }\n \n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n+    const int64_t maxNewTxSize = txSize + wtx.tx->vin.size();\n+\n     // optional parameters\n     bool specifiedConfirmTarget = false;\n     int newConfirmTarget = nTxConfirmTarget;\n@@ -2794,10 +2798,11 @@ UniValue bumpfee(const JSONRPCRequest& request)\n             }\n         } else if (options.exists(\"totalFee\")) {\n             totalFee = options[\"totalFee\"].get_int64();\n-            if (totalFee <= 0) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n-            } else if (totalFee > maxTxFee) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than maxTxFee)\");\n+            CAmount requiredFee = CWallet::GetRequiredFee(maxNewTxSize);\n+            if (totalFee < requiredFee ) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER,\n+                                   strprintf(\"Insufficient totalFee (cannot be less than required fee %s)\",\n+                                             FormatMoney(requiredFee)));\n             }\n         }\n \n@@ -2806,42 +2811,53 @@ UniValue bumpfee(const JSONRPCRequest& request)\n         }\n     }\n \n-    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n-    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n-    const int64_t maxNewTxSize = txSize + wtx.tx->vin.size();\n-\n     // calculate the old fee and fee-rate\n     CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n     CFeeRate nOldFeeRate(nOldFee, txSize);\n     CAmount nNewFee;\n     CFeeRate nNewFeeRate;\n+    // The wallet uses a conservative WALLET_INCREMENTAL_RELAY_FEE value to\n+    // future proof against changes to network wide policy for incremental relay\n+    // fee that our node may not be aware of.\n+    CFeeRate walletIncrementalRelayFee = CFeeRate(WALLET_INCREMENTAL_RELAY_FEE);\n+    if (::incrementalRelayFee > walletIncrementalRelayFee) {\n+        walletIncrementalRelayFee = ::incrementalRelayFee;\n+    }\n \n     if (totalFee > 0) {\n-        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + minRelayTxFee.GetFee(maxNewTxSize);\n+        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + ::incrementalRelayFee.GetFee(maxNewTxSize);\n         if (totalFee < minTotalFee) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid totalFee, must be at least %s (oldFee %s + relayFee %s)\", FormatMoney(minTotalFee), nOldFeeRate.GetFee(maxNewTxSize), minRelayTxFee.GetFee(maxNewTxSize)));\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Insufficient totalFee, must be at least %s (oldFee %s + incrementalFee %s)\",\n+                                                                FormatMoney(minTotalFee), FormatMoney(nOldFeeRate.GetFee(maxNewTxSize)), FormatMoney(::incrementalRelayFee.GetFee(maxNewTxSize))));\n         }\n         nNewFee = totalFee;\n         nNewFeeRate = CFeeRate(totalFee, maxNewTxSize);\n     } else {\n-        // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n-        if (!specifiedConfirmTarget && payTxFee.GetFeePerK() != 0) {\n-            nNewFeeRate = payTxFee;\n-        } else {\n-            nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget);\n+        // if user specified a confirm target then don't consider any global payTxFee\n+        if (specifiedConfirmTarget) {\n+            nNewFee = CWallet::GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool, CAmount(0));\n         }\n-        if (nNewFeeRate.GetFeePerK() == 0) {\n-            nNewFeeRate = CWallet::fallbackFee;\n+        // otherwise use the regular wallet logic to select payTxFee or default confirm target\n+        else {\n+            nNewFee = CWallet::GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool);\n         }\n \n-        // new fee rate must be at least old rate + minimum relay rate\n-        if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK()) {\n-            nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n-        }\n+        nNewFeeRate = CFeeRate(nNewFee, maxNewTxSize);\n \n-        nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n+        // New fee rate must be at least old rate + minimum incremental relay rate\n+        if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + walletIncrementalRelayFee.GetFeePerK()) {\n+            nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + walletIncrementalRelayFee.GetFeePerK());\n+            nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n+        }\n     }\n \n+    // Check that in all cases the new fee doesn't violate maxTxFee\n+     if (nNewFee > maxTxFee) {\n+         throw JSONRPCError(RPC_MISC_ERROR,\n+                            strprintf(\"Specified or calculated fee %s is too high (cannot be higher than maxTxFee %s)\",\n+                                      FormatMoney(nNewFee), FormatMoney(maxTxFee)));\n+     }\n+\n     // check that fee rate is higher than mempool's minimum fee\n     // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n     // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n@@ -2864,7 +2880,7 @@ UniValue bumpfee(const JSONRPCRequest& request)\n \n     // If the output would become dust, discard it (converting the dust to fee)\n     poutput->nValue -= nDelta;\n-    if (poutput->nValue <= poutput->GetDustThreshold(::minRelayTxFee)) {\n+    if (poutput->nValue <= poutput->GetDustThreshold(::dustRelayFee)) {\n         LogPrint(\"rpc\", \"Bumping fee and discarding dust output\\n\");\n         nNewFee += poutput->nValue;\n         tx.vout.erase(tx.vout.begin() + nOutput);\n@@ -2913,7 +2929,7 @@ UniValue bumpfee(const JSONRPCRequest& request)\n \n     UniValue result(UniValue::VOBJ);\n     result.push_back(Pair(\"txid\", wtxBumped.GetHash().GetHex()));\n-    result.push_back(Pair(\"oldfee\", ValueFromAmount(nOldFee)));\n+    result.push_back(Pair(\"origfee\", ValueFromAmount(nOldFee)));\n     result.push_back(Pair(\"fee\", ValueFromAmount(nNewFee)));\n \n     return result;"
      },
      {
        "sha": "9a5f35b6e3702045a0310023885451abbc40a478",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b",
        "patch": "@@ -2802,8 +2802,13 @@ CAmount CWallet::GetRequiredFee(unsigned int nTxBytes)\n \n CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool)\n {\n-    // payTxFee is user-set \"I want to pay this much\"\n-    CAmount nFeeNeeded = payTxFee.GetFee(nTxBytes);\n+    // payTxFee is the user-set global for desired feerate\n+    return GetMinimumFee(nTxBytes, nConfirmTarget, pool, payTxFee.GetFee(nTxBytes));\n+}\n+\n+CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, CAmount targetFee)\n+{\n+    CAmount nFeeNeeded = targetFee;\n     // User didn't set: use -txconfirmtarget to estimate...\n     if (nFeeNeeded == 0) {\n         int estimateFoundTarget = nConfirmTarget;"
      },
      {
        "sha": "200ec0cba2bc444be183ea79775cabeff6b213fa",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b",
        "patch": "@@ -48,6 +48,8 @@ static const CAmount DEFAULT_TRANSACTION_FEE = 0;\n static const CAmount DEFAULT_FALLBACK_FEE = 20000;\n //! -mintxfee default\n static const CAmount DEFAULT_TRANSACTION_MINFEE = 1000;\n+//! minimum recommended increment for BIP 125 replacement txs\n+static const CAmount WALLET_INCREMENTAL_RELAY_FEE = 5000;\n //! target minimum change amount\n static const CAmount MIN_CHANGE = CENT;\n //! final minimum change amount after paying for fees\n@@ -802,6 +804,11 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * and the required fee\n      */\n     static CAmount GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool);\n+    /**\n+     * Estimate the minimum fee considering required fee and targetFee or if 0\n+     * then fee estimation for nConfirmTarget\n+     */\n+    static CAmount GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, CAmount targetFee);\n     /**\n      * Return the minimum required fee taking into account the\n      * floating relay fee and user set minimum transaction fee"
      }
    ]
  },
  {
    "sha": "36966a1c0e6415964008c679c1a01d9883486e87",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNjk2NmExYzBlNjQxNTk2NDAwOGM2NzljMWEwMWQ5ODgzNDg2ZTg3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-30T11:44:08Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-30T11:48:43Z"
      },
      "message": "Merge #9626: Clean up a few CConnman cs_vNodes/CNode things\n\n2366180 Do not add to vNodes until fOneShot/fFeeler/fAddNode have been set (Matt Corallo)\n3c37dc4 Ensure cs_vNodes is held when using the return value from FindNode (Matt Corallo)\n5be0190 Delete some unused (and broken) functions in CConnman (Matt Corallo)",
      "tree": {
        "sha": "38605d1ae60dee2ff6943b4a2535a6c163164b85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/38605d1ae60dee2ff6943b4a2535a6c163164b85"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/36966a1c0e6415964008c679c1a01d9883486e87",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYjygbAAoJEHSBCwEjRsmmU/0H/j711RE/EGSSM94Gsr2L3fe2\nkaCTCsqvYX/QaI+3dqdxP1WNoCN1mOirzyyefrgZmGPCDUJE+SNgAqwjx5Y0Wc9k\nP5rBS54aou1MdUxUlGbM57Z8uKNlsS9HZch2Pn4p5344n721luFq87X7UObkAWS1\nrd9AQXZ8utO8jo0w2D5RmDVYBuLNHiyd3bmk4oXizoV/z1cyitXKZRs9FVDUBBY8\nC/vMgFnkW/CdTvWQLwBvz4tqYq/h9TO2NDGQnwtgYdiBv5bjs+dK5O5JJCtxaPf1\nV/jZW1GXrvXm2iZ6/LlCTZWWNK+V76usmfVg0Up+iGGLPjm7ptSQuzUmySwlUk8=\n=Yda0\n-----END PGP SIGNATURE-----",
        "payload": "tree 38605d1ae60dee2ff6943b4a2535a6c163164b85\nparent d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b\nparent 236618061a445d2cb11e722cfac5fdae5be26abb\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1485776648 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1485776923 +0100\n\nMerge #9626: Clean up a few CConnman cs_vNodes/CNode things\n\n2366180 Do not add to vNodes until fOneShot/fFeeler/fAddNode have been set (Matt Corallo)\n3c37dc4 Ensure cs_vNodes is held when using the return value from FindNode (Matt Corallo)\n5be0190 Delete some unused (and broken) functions in CConnman (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36966a1c0e6415964008c679c1a01d9883486e87",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/36966a1c0e6415964008c679c1a01d9883486e87",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36966a1c0e6415964008c679c1a01d9883486e87/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b"
      },
      {
        "sha": "236618061a445d2cb11e722cfac5fdae5be26abb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/236618061a445d2cb11e722cfac5fdae5be26abb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/236618061a445d2cb11e722cfac5fdae5be26abb"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 14,
      "deletions": 46
    },
    "files": [
      {
        "sha": "df88b12c76fd566bd2405f7396307c1a12990a16",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 42,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36966a1c0e6415964008c679c1a01d9883486e87/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36966a1c0e6415964008c679c1a01d9883486e87/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=36966a1c0e6415964008c679c1a01d9883486e87",
        "patch": "@@ -342,8 +342,8 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n         CNode* pnode = FindNode((CService)addrConnect);\n         if (pnode)\n         {\n-            pnode->AddRef();\n-            return pnode;\n+            LogPrintf(\"Failed to open new connection, already connected\\n\");\n+            return NULL;\n         }\n     }\n \n@@ -369,18 +369,16 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n             // In that case, drop the connection that was just created, and return the existing CNode instead.\n             // Also store the name we used to connect in that CNode, so that future FindNode() calls to that\n             // name catch this early.\n+            LOCK(cs_vNodes);\n             CNode* pnode = FindNode((CService)addrConnect);\n             if (pnode)\n             {\n-                pnode->AddRef();\n-                {\n-                    LOCK(cs_vNodes);\n-                    if (pnode->addrName.empty()) {\n-                        pnode->addrName = std::string(pszDest);\n-                    }\n+                if (pnode->addrName.empty()) {\n+                    pnode->addrName = std::string(pszDest);\n                 }\n                 CloseSocket(hSocket);\n-                return pnode;\n+                LogPrintf(\"Failed to open new connection, already connected\\n\");\n+                return NULL;\n             }\n         }\n \n@@ -393,11 +391,6 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n         pnode->nServicesExpected = ServiceFlags(addrConnect.nServices & nRelevantServices);\n         pnode->nTimeConnected = GetSystemTimeInSeconds();\n         pnode->AddRef();\n-        GetNodeSignals().InitializeNode(pnode, *this);\n-        {\n-            LOCK(cs_vNodes);\n-            vNodes.push_back(pnode);\n-        }\n \n         return pnode;\n     } else if (!proxyConnectionFailed) {\n@@ -1840,6 +1833,12 @@ bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n     if (fAddnode)\n         pnode->fAddnode = true;\n \n+    {\n+        LOCK(cs_vNodes);\n+        vNodes.push_back(pnode);\n+    }\n+    GetNodeSignals().InitializeNode(pnode, *this);\n+\n     return true;\n }\n \n@@ -2371,26 +2370,9 @@ void CConnman::GetNodeStats(std::vector<CNodeStats>& vstats)\n     }\n }\n \n-bool CConnman::DisconnectAddress(const CNetAddr& netAddr)\n-{\n-    if (CNode* pnode = FindNode(netAddr)) {\n-        pnode->fDisconnect = true;\n-        return true;\n-    }\n-    return false;\n-}\n-\n-bool CConnman::DisconnectSubnet(const CSubNet& subNet)\n-{\n-    if (CNode* pnode = FindNode(subNet)) {\n-        pnode->fDisconnect = true;\n-        return true;\n-    }\n-    return false;\n-}\n-\n bool CConnman::DisconnectNode(const std::string& strNode)\n {\n+    LOCK(cs_vNodes);\n     if (CNode* pnode = FindNode(strNode)) {\n         pnode->fDisconnect = true;\n         return true;\n@@ -2409,16 +2391,6 @@ bool CConnman::DisconnectNode(NodeId id)\n     return false;\n }\n \n-void CConnman::RelayTransaction(const CTransaction& tx)\n-{\n-    CInv inv(MSG_TX, tx.GetHash());\n-    LOCK(cs_vNodes);\n-    BOOST_FOREACH(CNode* pnode, vNodes)\n-    {\n-        pnode->PushInventory(inv);\n-    }\n-}\n-\n void CConnman::RecordBytesRecv(uint64_t bytes)\n {\n     LOCK(cs_totalBytesRecv);"
      },
      {
        "sha": "0b8efcc882ad50be9422084adc9963df9d8eade1",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36966a1c0e6415964008c679c1a01d9883486e87/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36966a1c0e6415964008c679c1a01d9883486e87/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=36966a1c0e6415964008c679c1a01d9883486e87",
        "patch": "@@ -243,8 +243,6 @@ class CConnman\n         post();\n     };\n \n-    void RelayTransaction(const CTransaction& tx);\n-\n     // Addrman functions\n     size_t GetAddressCount() const;\n     void SetServices(const CService &addr, ServiceFlags nServices);\n@@ -286,10 +284,8 @@ class CConnman\n \n     size_t GetNodeCount(NumConnections num);\n     void GetNodeStats(std::vector<CNodeStats>& vstats);\n-    bool DisconnectAddress(const CNetAddr& addr);\n     bool DisconnectNode(const std::string& node);\n     bool DisconnectNode(NodeId id);\n-    bool DisconnectSubnet(const CSubNet& subnet);\n \n     unsigned int GetSendBufferSize() const;\n "
      }
    ]
  },
  {
    "sha": "668de70be039a4f1ffcf20aeae2a22ee71fc55a8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NjhkZTcwYmUwMzlhNGYxZmZjZjIwYWVhZTJhMjJlZTcxZmM1NWE4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-01-30T12:13:07Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-01-30T12:13:20Z"
      },
      "message": "Merge #9644: [refactor] Remove using namespace <xxx> from src/\n\nb7b48c8 Refactor: Remove using namespace <xxx> from src/*.cpp. (Karl-Johan Alm)",
      "tree": {
        "sha": "e6baaf60d95d75452af3ebacd57da5479d4a3ebd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e6baaf60d95d75452af3ebacd57da5479d4a3ebd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/668de70be039a4f1ffcf20aeae2a22ee71fc55a8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCgAGBQJYjy3gAAoJEC1/I3LlD+E3/tAIAIyNgZED0//5K1J/nHv5dy6Z\n3Bavi/eu4RiAiQsd9JG8F0PNjt5TAEw45gaCSFgBmWpGXF2ofi5ZHePyOZLC3bn/\nkLF+AphTGHuak5YPoou0u6Hosnw0V6KlLncs0WNCVVa4qtkgD5wzafn6Rjz+1CUV\nzX6Mw9qPh0IXsk2Zj0/xr3h6K2T7rG5vN+tdMsC7BGyo4hc+tb7fEpKqPSrHg+F2\npxCrg3fuNXnnhKF3p5mmSdOe4vqzTf9dGPvdTO8ZP+/yjo8QiyGArMqajYzAWsI8\nZQIP8j+sZ/lXwhhbM1/t0831GtR8h2oQ1cSI5xpxUz+hJcEbj6+9tvf8BGzZUTQ=\n=Sc8+\n-----END PGP SIGNATURE-----",
        "payload": "tree e6baaf60d95d75452af3ebacd57da5479d4a3ebd\nparent 36966a1c0e6415964008c679c1a01d9883486e87\nparent b7b48c8bbdf7a90861610b035d8b0a247ef78c45\nauthor MarcoFalke <falke.marco@gmail.com> 1485778387 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1485778400 +0100\n\nMerge #9644: [refactor] Remove using namespace <xxx> from src/\n\nb7b48c8 Refactor: Remove using namespace <xxx> from src/*.cpp. (Karl-Johan Alm)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/668de70be039a4f1ffcf20aeae2a22ee71fc55a8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/668de70be039a4f1ffcf20aeae2a22ee71fc55a8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "36966a1c0e6415964008c679c1a01d9883486e87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36966a1c0e6415964008c679c1a01d9883486e87",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/36966a1c0e6415964008c679c1a01d9883486e87"
      },
      {
        "sha": "b7b48c8bbdf7a90861610b035d8b0a247ef78c45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7b48c8bbdf7a90861610b035d8b0a247ef78c45",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b7b48c8bbdf7a90861610b035d8b0a247ef78c45"
      }
    ],
    "stats": {
      "total": 385,
      "additions": 179,
      "deletions": 206
    },
    "files": [
      {
        "sha": "8d47cb76e8a58bebaf10b494776d240ea6793ca5",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 15,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=668de70be039a4f1ffcf20aeae2a22ee71fc55a8",
        "patch": "@@ -19,23 +19,21 @@\n #define LN2SQUARED 0.4804530139182014246671025263266649717305529515945455\n #define LN2 0.6931471805599453094172321214581765680755001343602552\n \n-using namespace std;\n-\n CBloomFilter::CBloomFilter(unsigned int nElements, double nFPRate, unsigned int nTweakIn, unsigned char nFlagsIn) :\n     /**\n      * The ideal size for a bloom filter with a given number of elements and false positive rate is:\n      * - nElements * log(fp rate) / ln(2)^2\n      * We ignore filter parameters which will create a bloom filter larger than the protocol limits\n      */\n-    vData(min((unsigned int)(-1  / LN2SQUARED * nElements * log(nFPRate)), MAX_BLOOM_FILTER_SIZE * 8) / 8),\n+    vData(std::min((unsigned int)(-1  / LN2SQUARED * nElements * log(nFPRate)), MAX_BLOOM_FILTER_SIZE * 8) / 8),\n     /**\n      * The ideal number of hash functions is filter size * ln(2) / number of elements\n      * Again, we ignore filter parameters which will create a bloom filter with more hash functions than the protocol limits\n      * See https://en.wikipedia.org/wiki/Bloom_filter for an explanation of these formulas\n      */\n     isFull(false),\n     isEmpty(true),\n-    nHashFuncs(min((unsigned int)(vData.size() * 8 / nElements * LN2), MAX_HASH_FUNCS)),\n+    nHashFuncs(std::min((unsigned int)(vData.size() * 8 / nElements * LN2), MAX_HASH_FUNCS)),\n     nTweak(nTweakIn),\n     nFlags(nFlagsIn)\n {\n@@ -58,7 +56,7 @@ inline unsigned int CBloomFilter::Hash(unsigned int nHashNum, const std::vector<\n     return MurmurHash3(nHashNum * 0xFBA4C795 + nTweak, vDataToHash) % (vData.size() * 8);\n }\n \n-void CBloomFilter::insert(const vector<unsigned char>& vKey)\n+void CBloomFilter::insert(const std::vector<unsigned char>& vKey)\n {\n     if (isFull)\n         return;\n@@ -75,17 +73,17 @@ void CBloomFilter::insert(const COutPoint& outpoint)\n {\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n     stream << outpoint;\n-    vector<unsigned char> data(stream.begin(), stream.end());\n+    std::vector<unsigned char> data(stream.begin(), stream.end());\n     insert(data);\n }\n \n void CBloomFilter::insert(const uint256& hash)\n {\n-    vector<unsigned char> data(hash.begin(), hash.end());\n+    std::vector<unsigned char> data(hash.begin(), hash.end());\n     insert(data);\n }\n \n-bool CBloomFilter::contains(const vector<unsigned char>& vKey) const\n+bool CBloomFilter::contains(const std::vector<unsigned char>& vKey) const\n {\n     if (isFull)\n         return true;\n@@ -105,13 +103,13 @@ bool CBloomFilter::contains(const COutPoint& outpoint) const\n {\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n     stream << outpoint;\n-    vector<unsigned char> data(stream.begin(), stream.end());\n+    std::vector<unsigned char> data(stream.begin(), stream.end());\n     return contains(data);\n }\n \n bool CBloomFilter::contains(const uint256& hash) const\n {\n-    vector<unsigned char> data(hash.begin(), hash.end());\n+    std::vector<unsigned char> data(hash.begin(), hash.end());\n     return contains(data);\n }\n \n@@ -154,7 +152,7 @@ bool CBloomFilter::IsRelevantAndUpdate(const CTransaction& tx)\n         // This means clients don't have to update the filter themselves when a new relevant tx \n         // is discovered in order to find spending transactions, which avoids round-tripping and race conditions.\n         CScript::const_iterator pc = txout.scriptPubKey.begin();\n-        vector<unsigned char> data;\n+        std::vector<unsigned char> data;\n         while (pc < txout.scriptPubKey.end())\n         {\n             opcodetype opcode;\n@@ -168,7 +166,7 @@ bool CBloomFilter::IsRelevantAndUpdate(const CTransaction& tx)\n                 else if ((nFlags & BLOOM_UPDATE_MASK) == BLOOM_UPDATE_P2PUBKEY_ONLY)\n                 {\n                     txnouttype type;\n-                    vector<vector<unsigned char> > vSolutions;\n+                    std::vector<std::vector<unsigned char> > vSolutions;\n                     if (Solver(txout.scriptPubKey, type, vSolutions) &&\n                             (type == TX_PUBKEY || type == TX_MULTISIG))\n                         insert(COutPoint(hash, i));\n@@ -189,7 +187,7 @@ bool CBloomFilter::IsRelevantAndUpdate(const CTransaction& tx)\n \n         // Match if the filter contains any arbitrary script data element in any scriptSig in tx\n         CScript::const_iterator pc = txin.scriptSig.begin();\n-        vector<unsigned char> data;\n+        std::vector<unsigned char> data;\n         while (pc < txin.scriptSig.end())\n         {\n             opcodetype opcode;\n@@ -280,7 +278,7 @@ void CRollingBloomFilter::insert(const std::vector<unsigned char>& vKey)\n \n void CRollingBloomFilter::insert(const uint256& hash)\n {\n-    vector<unsigned char> vData(hash.begin(), hash.end());\n+    std::vector<unsigned char> vData(hash.begin(), hash.end());\n     insert(vData);\n }\n \n@@ -300,7 +298,7 @@ bool CRollingBloomFilter::contains(const std::vector<unsigned char>& vKey) const\n \n bool CRollingBloomFilter::contains(const uint256& hash) const\n {\n-    vector<unsigned char> vData(hash.begin(), hash.end());\n+    std::vector<unsigned char> vData(hash.begin(), hash.end());\n     return contains(vData);\n }\n "
      },
      {
        "sha": "a5b369c4fc4c3e11eb6e33a0e5fc47a9e90b8752",
        "filename": "src/chain.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.cpp?ref=668de70be039a4f1ffcf20aeae2a22ee71fc55a8",
        "patch": "@@ -5,8 +5,6 @@\n \n #include \"chain.h\"\n \n-using namespace std;\n-\n /**\n  * CChain implementation\n  */"
      },
      {
        "sha": "a5f232c22857a05b55ae3f79a3106122300065ea",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 16,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=668de70be039a4f1ffcf20aeae2a22ee71fc55a8",
        "patch": "@@ -20,13 +20,11 @@\n #include <boost/algorithm/string/split.hpp>\n #include <boost/assign/list_of.hpp>\n \n-using namespace std;\n-\n CScript ParseScript(const std::string& s)\n {\n     CScript result;\n \n-    static map<string, opcodetype> mapOpNames;\n+    static std::map<std::string, opcodetype> mapOpNames;\n \n     if (mapOpNames.empty())\n     {\n@@ -39,15 +37,15 @@ CScript ParseScript(const std::string& s)\n             const char* name = GetOpName((opcodetype)op);\n             if (strcmp(name, \"OP_UNKNOWN\") == 0)\n                 continue;\n-            string strName(name);\n+            std::string strName(name);\n             mapOpNames[strName] = (opcodetype)op;\n             // Convenience: OP_ADD and just ADD are both recognized:\n             boost::algorithm::replace_first(strName, \"OP_\", \"\");\n             mapOpNames[strName] = (opcodetype)op;\n         }\n     }\n \n-    vector<string> words;\n+    std::vector<std::string> words;\n     boost::algorithm::split(words, s, boost::algorithm::is_any_of(\" \\t\\n\"), boost::algorithm::token_compress_on);\n \n     for (std::vector<std::string>::const_iterator w = words.begin(); w != words.end(); ++w)\n@@ -57,16 +55,16 @@ CScript ParseScript(const std::string& s)\n             // Empty string, ignore. (boost::split given '' will return one word)\n         }\n         else if (all(*w, boost::algorithm::is_digit()) ||\n-            (boost::algorithm::starts_with(*w, \"-\") && all(string(w->begin()+1, w->end()), boost::algorithm::is_digit())))\n+            (boost::algorithm::starts_with(*w, \"-\") && all(std::string(w->begin()+1, w->end()), boost::algorithm::is_digit())))\n         {\n             // Number\n             int64_t n = atoi64(*w);\n             result << n;\n         }\n-        else if (boost::algorithm::starts_with(*w, \"0x\") && (w->begin()+2 != w->end()) && IsHex(string(w->begin()+2, w->end())))\n+        else if (boost::algorithm::starts_with(*w, \"0x\") && (w->begin()+2 != w->end()) && IsHex(std::string(w->begin()+2, w->end())))\n         {\n             // Raw hex data, inserted NOT pushed onto stack:\n-            std::vector<unsigned char> raw = ParseHex(string(w->begin()+2, w->end()));\n+            std::vector<unsigned char> raw = ParseHex(std::string(w->begin()+2, w->end()));\n             result.insert(result.end(), raw.begin(), raw.end());\n         }\n         else if (w->size() >= 2 && boost::algorithm::starts_with(*w, \"'\") && boost::algorithm::ends_with(*w, \"'\"))\n@@ -83,7 +81,7 @@ CScript ParseScript(const std::string& s)\n         }\n         else\n         {\n-            throw runtime_error(\"script parse error\");\n+            throw std::runtime_error(\"script parse error\");\n         }\n     }\n \n@@ -95,7 +93,7 @@ bool DecodeHexTx(CMutableTransaction& tx, const std::string& strHexTx, bool fTry\n     if (!IsHex(strHexTx))\n         return false;\n \n-    vector<unsigned char> txData(ParseHex(strHexTx));\n+    std::vector<unsigned char> txData(ParseHex(strHexTx));\n \n     if (fTryNoWitness) {\n         CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS);\n@@ -138,9 +136,9 @@ bool DecodeHexBlk(CBlock& block, const std::string& strHexBlk)\n     return true;\n }\n \n-uint256 ParseHashUV(const UniValue& v, const string& strName)\n+uint256 ParseHashUV(const UniValue& v, const std::string& strName)\n {\n-    string strHex;\n+    std::string strHex;\n     if (v.isStr())\n         strHex = v.getValStr();\n     return ParseHashStr(strHex, strName);  // Note: ParseHashStr(\"\") throws a runtime_error\n@@ -149,19 +147,19 @@ uint256 ParseHashUV(const UniValue& v, const string& strName)\n uint256 ParseHashStr(const std::string& strHex, const std::string& strName)\n {\n     if (!IsHex(strHex)) // Note: IsHex(\"\") is false\n-        throw runtime_error(strName+\" must be hexadecimal string (not '\"+strHex+\"')\");\n+        throw std::runtime_error(strName + \" must be hexadecimal string (not '\" + strHex + \"')\");\n \n     uint256 result;\n     result.SetHex(strHex);\n     return result;\n }\n \n-vector<unsigned char> ParseHexUV(const UniValue& v, const string& strName)\n+std::vector<unsigned char> ParseHexUV(const UniValue& v, const std::string& strName)\n {\n-    string strHex;\n+    std::string strHex;\n     if (v.isStr())\n         strHex = v.getValStr();\n     if (!IsHex(strHex))\n-        throw runtime_error(strName+\" must be hexadecimal string (not '\"+strHex+\"')\");\n+        throw std::runtime_error(strName + \" must be hexadecimal string (not '\" + strHex + \"')\");\n     return ParseHex(strHex);\n }"
      },
      {
        "sha": "b0993a131f02a8be24b33d36b8b43c60225d12de",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 22,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=668de70be039a4f1ffcf20aeae2a22ee71fc55a8",
        "patch": "@@ -18,16 +18,14 @@\n #include <boost/assign/list_of.hpp>\n #include <boost/foreach.hpp>\n \n-using namespace std;\n-\n-string FormatScript(const CScript& script)\n+std::string FormatScript(const CScript& script)\n {\n-    string ret;\n+    std::string ret;\n     CScript::const_iterator it = script.begin();\n     opcodetype op;\n     while (it != script.end()) {\n         CScript::const_iterator it2 = it;\n-        vector<unsigned char> vch;\n+        std::vector<unsigned char> vch;\n         if (script.GetOp2(it, op, &vch)) {\n             if (op == OP_0) {\n                 ret += \"0 \";\n@@ -36,9 +34,9 @@ string FormatScript(const CScript& script)\n                 ret += strprintf(\"%i \", op - OP_1NEGATE - 1);\n                 continue;\n             } else if (op >= OP_NOP && op <= OP_NOP10) {\n-                string str(GetOpName(op));\n-                if (str.substr(0, 3) == string(\"OP_\")) {\n-                    ret += str.substr(3, string::npos) + \" \";\n+                std::string str(GetOpName(op));\n+                if (str.substr(0, 3) == std::string(\"OP_\")) {\n+                    ret += str.substr(3, std::string::npos) + \" \";\n                     continue;\n                 }\n             }\n@@ -55,14 +53,14 @@ string FormatScript(const CScript& script)\n     return ret.substr(0, ret.size() - 1);\n }\n \n-const map<unsigned char, string> mapSigHashTypes =\n+const std::map<unsigned char, std::string> mapSigHashTypes =\n     boost::assign::map_list_of\n-    (static_cast<unsigned char>(SIGHASH_ALL), string(\"ALL\"))\n-    (static_cast<unsigned char>(SIGHASH_ALL|SIGHASH_ANYONECANPAY), string(\"ALL|ANYONECANPAY\"))\n-    (static_cast<unsigned char>(SIGHASH_NONE), string(\"NONE\"))\n-    (static_cast<unsigned char>(SIGHASH_NONE|SIGHASH_ANYONECANPAY), string(\"NONE|ANYONECANPAY\"))\n-    (static_cast<unsigned char>(SIGHASH_SINGLE), string(\"SINGLE\"))\n-    (static_cast<unsigned char>(SIGHASH_SINGLE|SIGHASH_ANYONECANPAY), string(\"SINGLE|ANYONECANPAY\"))\n+    (static_cast<unsigned char>(SIGHASH_ALL), std::string(\"ALL\"))\n+    (static_cast<unsigned char>(SIGHASH_ALL|SIGHASH_ANYONECANPAY), std::string(\"ALL|ANYONECANPAY\"))\n+    (static_cast<unsigned char>(SIGHASH_NONE), std::string(\"NONE\"))\n+    (static_cast<unsigned char>(SIGHASH_NONE|SIGHASH_ANYONECANPAY), std::string(\"NONE|ANYONECANPAY\"))\n+    (static_cast<unsigned char>(SIGHASH_SINGLE), std::string(\"SINGLE\"))\n+    (static_cast<unsigned char>(SIGHASH_SINGLE|SIGHASH_ANYONECANPAY), std::string(\"SINGLE|ANYONECANPAY\"))\n     ;\n \n /**\n@@ -72,11 +70,11 @@ const map<unsigned char, string> mapSigHashTypes =\n  *                                     of a signature. Only pass true for scripts you believe could contain signatures. For example,\n  *                                     pass false, or omit the this argument (defaults to false), for scriptPubKeys.\n  */\n-string ScriptToAsmStr(const CScript& script, const bool fAttemptSighashDecode)\n+std::string ScriptToAsmStr(const CScript& script, const bool fAttemptSighashDecode)\n {\n-    string str;\n+    std::string str;\n     opcodetype opcode;\n-    vector<unsigned char> vch;\n+    std::vector<unsigned char> vch;\n     CScript::const_iterator pc = script.begin();\n     while (pc < script.end()) {\n         if (!str.empty()) {\n@@ -87,12 +85,12 @@ string ScriptToAsmStr(const CScript& script, const bool fAttemptSighashDecode)\n             return str;\n         }\n         if (0 <= opcode && opcode <= OP_PUSHDATA4) {\n-            if (vch.size() <= static_cast<vector<unsigned char>::size_type>(4)) {\n+            if (vch.size() <= static_cast<std::vector<unsigned char>::size_type>(4)) {\n                 str += strprintf(\"%d\", CScriptNum(vch, false).getint());\n             } else {\n                 // the IsUnspendable check makes sure not to try to decode OP_RETURN data that may match the format of a signature\n                 if (fAttemptSighashDecode && !script.IsUnspendable()) {\n-                    string strSigHashDecode;\n+                    std::string strSigHashDecode;\n                     // goal: only attempt to decode a defined sighash type from data that looks like a signature within a scriptSig.\n                     // this won't decode correctly formatted public keys in Pubkey or Multisig scripts due to\n                     // the restrictions on the pubkey formats (see IsCompressedOrUncompressedPubKey) being incongruous with the\n@@ -116,7 +114,7 @@ string ScriptToAsmStr(const CScript& script, const bool fAttemptSighashDecode)\n     return str;\n }\n \n-string EncodeHexTx(const CTransaction& tx, const int serialFlags)\n+std::string EncodeHexTx(const CTransaction& tx, const int serialFlags)\n {\n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION | serialFlags);\n     ssTx << tx;\n@@ -127,7 +125,7 @@ void ScriptPubKeyToUniv(const CScript& scriptPubKey,\n                         UniValue& out, bool fIncludeHex)\n {\n     txnouttype type;\n-    vector<CTxDestination> addresses;\n+    std::vector<CTxDestination> addresses;\n     int nRequired;\n \n     out.pushKV(\"asm\", ScriptToAsmStr(scriptPubKey));"
      },
      {
        "sha": "d7d60b0fbcec3ca6cdb4d5515c567823b6a134b2",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 16,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=668de70be039a4f1ffcf20aeae2a22ee71fc55a8",
        "patch": "@@ -65,8 +65,6 @@\n #include \"zmq/zmqnotificationinterface.h\"\n #endif\n \n-using namespace std;\n-\n bool fFeeEstimatesInitialized = false;\n static const bool DEFAULT_PROXYRANDOMIZE = true;\n static const bool DEFAULT_REST_ENABLE = false;\n@@ -310,10 +308,10 @@ void OnRPCStopped()\n void OnRPCPreCommand(const CRPCCommand& cmd)\n {\n     // Observe safe mode\n-    string strWarning = GetWarnings(\"rpc\");\n+    std::string strWarning = GetWarnings(\"rpc\");\n     if (strWarning != \"\" && !GetBoolArg(\"-disablesafemode\", DEFAULT_DISABLE_SAFEMODE) &&\n         !cmd.okSafeMode)\n-        throw JSONRPCError(RPC_FORBIDDEN_BY_SAFE_MODE, string(\"Safe mode: \") + strWarning);\n+        throw JSONRPCError(RPC_FORBIDDEN_BY_SAFE_MODE, std::string(\"Safe mode: \") + strWarning);\n }\n \n std::string HelpMessage(HelpMessageMode mode)\n@@ -322,7 +320,7 @@ std::string HelpMessage(HelpMessageMode mode)\n \n     // When adding new options to the categories, please keep and ensure alphabetical ordering.\n     // Do not translate _(...) -help-debug options, Many technical terms, and only a very small audience, so is unnecessary stress to translators.\n-    string strUsage = HelpMessageGroup(_(\"Options:\"));\n+    std::string strUsage = HelpMessageGroup(_(\"Options:\"));\n     strUsage += HelpMessageOpt(\"-?\", _(\"Print this help message and exit\"));\n     strUsage += HelpMessageOpt(\"-version\", _(\"Print version and exit\"));\n     strUsage += HelpMessageOpt(\"-alertnotify=<cmd>\", _(\"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\"));\n@@ -436,7 +434,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT));\n         strUsage += HelpMessageOpt(\"-bip9params=deployment:start:end\", \"Use given start/end times for specified BIP9 deployment (regtest-only)\");\n     }\n-    string debugCategories = \"addrman, alert, bench, cmpctblock, coindb, db, http, libevent, lock, mempool, mempoolrej, net, proxy, prune, rand, reindex, rpc, selectcoins, tor, zmq\"; // Don't translate these and qt below\n+    std::string debugCategories = \"addrman, alert, bench, cmpctblock, coindb, db, http, libevent, lock, mempool, mempoolrej, net, proxy, prune, rand, reindex, rpc, selectcoins, tor, zmq\"; // Don't translate these and qt below\n     if (mode == HMM_BITCOIN_QT)\n         debugCategories += \", qt\";\n     strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +\n@@ -576,15 +574,14 @@ struct CImportingNow\n // works correctly.\n void CleanupBlockRevFiles()\n {\n-    using namespace boost::filesystem;\n-    map<string, path> mapBlockFiles;\n+    std::map<std::string, boost::filesystem::path> mapBlockFiles;\n \n     // Glob all blk?????.dat and rev?????.dat files from the blocks directory.\n     // Remove the rev files immediately and insert the blk file paths into an\n     // ordered map keyed by block file index.\n     LogPrintf(\"Removing unusable blk?????.dat and rev?????.dat files for -reindex with -prune\\n\");\n-    path blocksdir = GetDataDir() / \"blocks\";\n-    for (directory_iterator it(blocksdir); it != directory_iterator(); it++) {\n+    boost::filesystem::path blocksdir = GetDataDir() / \"blocks\";\n+    for (boost::filesystem::directory_iterator it(blocksdir); it != boost::filesystem::directory_iterator(); it++) {\n         if (is_regular_file(*it) &&\n             it->path().filename().string().length() == 12 &&\n             it->path().filename().string().substr(8,4) == \".dat\")\n@@ -601,7 +598,7 @@ void CleanupBlockRevFiles()\n     // keeping a separate counter.  Once we hit a gap (or if 0 doesn't exist)\n     // start removing block files.\n     int nContigCounter = 0;\n-    BOOST_FOREACH(const PAIRTYPE(string, path)& item, mapBlockFiles) {\n+    BOOST_FOREACH(const PAIRTYPE(std::string, boost::filesystem::path)& item, mapBlockFiles) {\n         if (atoi(item.first) == nContigCounter) {\n             nContigCounter++;\n             continue;\n@@ -894,8 +891,8 @@ bool AppInitParameterInteraction()\n     fDebug = mapMultiArgs.count(\"-debug\");\n     // Special-case: if -debug=0/-nodebug is set, turn off debugging messages\n     if (fDebug) {\n-        const vector<string>& categories = mapMultiArgs.at(\"-debug\");\n-        if (GetBoolArg(\"-nodebug\", false) || find(categories.begin(), categories.end(), string(\"0\")) != categories.end())\n+        const std::vector<std::string>& categories = mapMultiArgs.at(\"-debug\");\n+        if (GetBoolArg(\"-nodebug\", false) || find(categories.begin(), categories.end(), std::string(\"0\")) != categories.end())\n             fDebug = false;\n     }\n \n@@ -1063,7 +1060,7 @@ bool AppInitParameterInteraction()\n         if (!chainparams.MineBlocksOnDemand()) {\n             return InitError(\"BIP9 parameters may only be overridden on regtest.\");\n         }\n-        const vector<string>& deployments = mapMultiArgs.at(\"-bip9params\");\n+        const std::vector<std::string>& deployments = mapMultiArgs.at(\"-bip9params\");\n         for (auto i : deployments) {\n             std::vector<std::string> vDeploymentParams;\n             boost::split(vDeploymentParams, i, boost::is_any_of(\":\"));\n@@ -1208,9 +1205,9 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     RegisterNodeSignals(GetNodeSignals());\n \n     // sanitize comments per BIP-0014, format user agent and check total size\n-    std::vector<string> uacomments;\n+    std::vector<std::string> uacomments;\n     if (mapMultiArgs.count(\"-uacomment\")) {\n-        BOOST_FOREACH(string cmt, mapMultiArgs.at(\"-uacomment\"))\n+        BOOST_FOREACH(std::string cmt, mapMultiArgs.at(\"-uacomment\"))\n         {\n             if (cmt != SanitizeString(cmt, SAFE_CHARS_UA_COMMENT))\n                 return InitError(strprintf(_(\"User Agent comment (%s) contains unsafe characters.\"), cmt));"
      },
      {
        "sha": "e3f3e4621ad8c9f19bb7ae3d256d068b77313782",
        "filename": "src/merkleblock.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/merkleblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/merkleblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.cpp?ref=668de70be039a4f1ffcf20aeae2a22ee71fc55a8",
        "patch": "@@ -9,14 +9,12 @@\n #include \"consensus/consensus.h\"\n #include \"utilstrencodings.h\"\n \n-using namespace std;\n-\n CMerkleBlock::CMerkleBlock(const CBlock& block, CBloomFilter& filter)\n {\n     header = block.GetBlockHeader();\n \n-    vector<bool> vMatch;\n-    vector<uint256> vHashes;\n+    std::vector<bool> vMatch;\n+    std::vector<uint256> vHashes;\n \n     vMatch.reserve(block.vtx.size());\n     vHashes.reserve(block.vtx.size());\n@@ -27,7 +25,7 @@ CMerkleBlock::CMerkleBlock(const CBlock& block, CBloomFilter& filter)\n         if (filter.IsRelevantAndUpdate(*block.vtx[i]))\n         {\n             vMatch.push_back(true);\n-            vMatchedTxn.push_back(make_pair(i, hash));\n+            vMatchedTxn.push_back(std::make_pair(i, hash));\n         }\n         else\n             vMatch.push_back(false);\n@@ -41,8 +39,8 @@ CMerkleBlock::CMerkleBlock(const CBlock& block, const std::set<uint256>& txids)\n {\n     header = block.GetBlockHeader();\n \n-    vector<bool> vMatch;\n-    vector<uint256> vHashes;\n+    std::vector<bool> vMatch;\n+    std::vector<uint256> vHashes;\n \n     vMatch.reserve(block.vtx.size());\n     vHashes.reserve(block.vtx.size());"
      },
      {
        "sha": "d01edd93b52e65b3178b6cbd4e9db4a01b62375c",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=668de70be039a4f1ffcf20aeae2a22ee71fc55a8",
        "patch": "@@ -31,8 +31,6 @@\n #include <queue>\n #include <utility>\n \n-using namespace std;\n-\n //////////////////////////////////////////////////////////////////////////////\n //\n // BitcoinMiner\n@@ -500,7 +498,7 @@ void BlockAssembler::addPackageTxs()\n         }\n \n         // Package can be added. Sort the entries in a valid order.\n-        vector<CTxMemPool::txiter> sortedEntries;\n+        std::vector<CTxMemPool::txiter> sortedEntries;\n         SortForBlock(ancestors, iter, sortedEntries);\n \n         for (size_t i=0; i<sortedEntries.size(); ++i) {\n@@ -529,7 +527,7 @@ void BlockAssembler::addPriorityTxs()\n     fNeedSizeAccounting = true;\n \n     // This vector will be sorted into a priority queue:\n-    vector<TxCoinAgePriority> vecPriority;\n+    std::vector<TxCoinAgePriority> vecPriority;\n     TxCoinAgePriorityCompare pricomparer;\n     std::map<CTxMemPool::txiter, double, CTxMemPool::CompareIteratorByHash> waitPriMap;\n     typedef std::map<CTxMemPool::txiter, double, CTxMemPool::CompareIteratorByHash>::iterator waitPriIter;"
      },
      {
        "sha": "b9667eb6c64b7e7092ae8a62e291d71ab578d1bc",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 53,
        "changes": 104,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=668de70be039a4f1ffcf20aeae2a22ee71fc55a8",
        "patch": "@@ -32,8 +32,6 @@\n \n #include <boost/thread.hpp>\n \n-using namespace std;\n-\n #if defined(NDEBUG)\n # error \"Bitcoin cannot be compiled without assertions.\"\n #endif\n@@ -55,8 +53,8 @@ struct COrphanTx {\n     NodeId fromPeer;\n     int64_t nTimeExpire;\n };\n-map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(cs_main);\n-map<COutPoint, set<map<uint256, COrphanTx>::iterator, IteratorComparator>> mapOrphanTransactionsByPrev GUARDED_BY(cs_main);\n+std::map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(cs_main);\n+std::map<COutPoint, std::set<std::map<uint256, COrphanTx>::iterator, IteratorComparator>> mapOrphanTransactionsByPrev GUARDED_BY(cs_main);\n void EraseOrphansFor(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n static size_t vExtraTxnForCompactIt = 0;\n@@ -76,7 +74,7 @@ namespace {\n      * Set mapBlockSource[hash].second to false if the node should not be\n      * punished if the block is invalid.\n      */\n-    map<uint256, std::pair<NodeId, bool>> mapBlockSource;\n+    std::map<uint256, std::pair<NodeId, bool>> mapBlockSource;\n \n     /**\n      * Filter for transactions that were recently rejected by\n@@ -108,10 +106,10 @@ namespace {\n         bool fValidatedHeaders;                                  //!< Whether this block has validated headers at the time of request.\n         std::unique_ptr<PartiallyDownloadedBlock> partialBlock;  //!< Optional, used for CMPCTBLOCK downloads\n     };\n-    map<uint256, pair<NodeId, list<QueuedBlock>::iterator> > mapBlocksInFlight;\n+    std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator> > mapBlocksInFlight;\n \n     /** Stack of nodes which we have set to announce using compact blocks */\n-    list<NodeId> lNodesAnnouncingHeaderAndIDs;\n+    std::list<NodeId> lNodesAnnouncingHeaderAndIDs;\n \n     /** Number of preferable block download peers. */\n     int nPreferredDownload = 0;\n@@ -135,7 +133,7 @@ namespace {\n \n struct CBlockReject {\n     unsigned char chRejectCode;\n-    string strRejectReason;\n+    std::string strRejectReason;\n     uint256 hashBlock;\n };\n \n@@ -172,7 +170,7 @@ struct CNodeState {\n     bool fSyncStarted;\n     //! Since when we're stalling block download progress (in microseconds), or 0.\n     int64_t nStallingSince;\n-    list<QueuedBlock> vBlocksInFlight;\n+    std::list<QueuedBlock> vBlocksInFlight;\n     //! When the first entry in vBlocksInFlight started downloading. Don't care when vBlocksInFlight is empty.\n     int64_t nDownloadingSince;\n     int nBlocksInFlight;\n@@ -224,11 +222,11 @@ struct CNodeState {\n };\n \n /** Map maintaining per-node state. Requires cs_main. */\n-map<NodeId, CNodeState> mapNodeState;\n+std::map<NodeId, CNodeState> mapNodeState;\n \n // Requires cs_main.\n CNodeState *State(NodeId pnode) {\n-    map<NodeId, CNodeState>::iterator it = mapNodeState.find(pnode);\n+    std::map<NodeId, CNodeState>::iterator it = mapNodeState.find(pnode);\n     if (it == mapNodeState.end())\n         return NULL;\n     return &it->second;\n@@ -310,7 +308,7 @@ void FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTime) {\n // Returns a bool indicating whether we requested this block.\n // Also used if a block was /not/ received and timed out or started with another peer\n bool MarkBlockAsReceived(const uint256& hash) {\n-    map<uint256, pair<NodeId, list<QueuedBlock>::iterator> >::iterator itInFlight = mapBlocksInFlight.find(hash);\n+    std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator> >::iterator itInFlight = mapBlocksInFlight.find(hash);\n     if (itInFlight != mapBlocksInFlight.end()) {\n         CNodeState *state = State(itInFlight->second.first);\n         state->nBlocksInFlightValidHeaders -= itInFlight->second.second->fValidatedHeaders;\n@@ -334,12 +332,12 @@ bool MarkBlockAsReceived(const uint256& hash) {\n // Requires cs_main.\n // returns false, still setting pit, if the block was already in flight from the same peer\n // pit will only be valid as long as the same cs_main lock is being held\n-bool MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, const Consensus::Params& consensusParams, const CBlockIndex *pindex = NULL, list<QueuedBlock>::iterator **pit = NULL) {\n+bool MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, const Consensus::Params& consensusParams, const CBlockIndex* pindex = NULL, std::list<QueuedBlock>::iterator** pit = NULL) {\n     CNodeState *state = State(nodeid);\n     assert(state != NULL);\n \n     // Short-circuit most stuff in case its from the same node\n-    map<uint256, pair<NodeId, list<QueuedBlock>::iterator> >::iterator itInFlight = mapBlocksInFlight.find(hash);\n+    std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator> >::iterator itInFlight = mapBlocksInFlight.find(hash);\n     if (itInFlight != mapBlocksInFlight.end() && itInFlight->second.first == nodeid) {\n         *pit = &itInFlight->second.second;\n         return false;\n@@ -348,7 +346,7 @@ bool MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, const Consensus::Pa\n     // Make sure it's not listed somewhere already.\n     MarkBlockAsReceived(hash);\n \n-    list<QueuedBlock>::iterator it = state->vBlocksInFlight.insert(state->vBlocksInFlight.end(),\n+    std::list<QueuedBlock>::iterator it = state->vBlocksInFlight.insert(state->vBlocksInFlight.end(),\n             {hash, pindex, pindex != NULL, std::unique_ptr<PartiallyDownloadedBlock>(pit ? new PartiallyDownloadedBlock(&mempool) : NULL)});\n     state->nBlocksInFlight++;\n     state->nBlocksInFlightValidHeaders += it->fValidatedHeaders;\n@@ -640,7 +638,7 @@ bool AddOrphanTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRE\n \n int static EraseOrphanTx(uint256 hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n-    map<uint256, COrphanTx>::iterator it = mapOrphanTransactions.find(hash);\n+    std::map<uint256, COrphanTx>::iterator it = mapOrphanTransactions.find(hash);\n     if (it == mapOrphanTransactions.end())\n         return 0;\n     BOOST_FOREACH(const CTxIn& txin, it->second.tx->vin)\n@@ -659,10 +657,10 @@ int static EraseOrphanTx(uint256 hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n void EraseOrphansFor(NodeId peer)\n {\n     int nErased = 0;\n-    map<uint256, COrphanTx>::iterator iter = mapOrphanTransactions.begin();\n+    std::map<uint256, COrphanTx>::iterator iter = mapOrphanTransactions.begin();\n     while (iter != mapOrphanTransactions.end())\n     {\n-        map<uint256, COrphanTx>::iterator maybeErase = iter++; // increment to avoid iterator becoming invalid\n+        std::map<uint256, COrphanTx>::iterator maybeErase = iter++; // increment to avoid iterator becoming invalid\n         if (maybeErase->second.fromPeer == peer)\n         {\n             nErased += EraseOrphanTx(maybeErase->second.tx->GetHash());\n@@ -681,10 +679,10 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans) EXCLUSIVE_LOCKS_REQUIRE\n         // Sweep out expired orphan pool entries:\n         int nErased = 0;\n         int64_t nMinExpTime = nNow + ORPHAN_TX_EXPIRE_TIME - ORPHAN_TX_EXPIRE_INTERVAL;\n-        map<uint256, COrphanTx>::iterator iter = mapOrphanTransactions.begin();\n+        std::map<uint256, COrphanTx>::iterator iter = mapOrphanTransactions.begin();\n         while (iter != mapOrphanTransactions.end())\n         {\n-            map<uint256, COrphanTx>::iterator maybeErase = iter++;\n+            std::map<uint256, COrphanTx>::iterator maybeErase = iter++;\n             if (maybeErase->second.nTimeExpire <= nNow) {\n                 nErased += EraseOrphanTx(maybeErase->second.tx->GetHash());\n             } else {\n@@ -699,7 +697,7 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans) EXCLUSIVE_LOCKS_REQUIRE\n     {\n         // Evict a random orphan:\n         uint256 randomhash = GetRandHash();\n-        map<uint256, COrphanTx>::iterator it = mapOrphanTransactions.lower_bound(randomhash);\n+        std::map<uint256, COrphanTx>::iterator it = mapOrphanTransactions.lower_bound(randomhash);\n         if (it == mapOrphanTransactions.end())\n             it = mapOrphanTransactions.begin();\n         EraseOrphanTx(it->first);\n@@ -961,7 +959,7 @@ static void RelayAddress(const CAddress& addr, bool fReachable, CConnman& connma\n void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParams, CConnman& connman, std::atomic<bool>& interruptMsgProc)\n {\n     std::deque<CInv>::iterator it = pfrom->vRecvGetData.begin();\n-    vector<CInv> vNotFound;\n+    std::vector<CInv> vNotFound;\n     CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n     LOCK(cs_main);\n \n@@ -1083,7 +1081,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                         // Bypass PushInventory, this must send even if redundant,\n                         // and we want it right after the last block so they don't\n                         // wait for other stuff first.\n-                        vector<CInv> vInv;\n+                        std::vector<CInv> vInv;\n                         vInv.push_back(CInv(MSG_BLOCK, chainActive.Tip()->GetBlockHash()));\n                         connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::INV, vInv));\n                         pfrom->hashContinue.SetNull();\n@@ -1160,7 +1158,7 @@ inline void static SendBlockTransactions(const CBlock& block, const BlockTransac\n     connman.PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::BLOCKTXN, resp));\n }\n \n-bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman& connman, std::atomic<bool>& interruptMsgProc)\n+bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman& connman, std::atomic<bool>& interruptMsgProc)\n {\n     LogPrint(\"net\", \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->id);\n     if (IsArgSet(\"-dropmessagestest\") && GetRand(GetArg(\"-dropmessagestest\", 0)) == 0)\n@@ -1190,7 +1188,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         // Each connection can only send one version message\n         if (pfrom->nVersion != 0)\n         {\n-            connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_DUPLICATE, string(\"Duplicate version message\")));\n+            connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_DUPLICATE, std::string(\"Duplicate version message\")));\n             LOCK(cs_main);\n             Misbehaving(pfrom->GetId(), 1);\n             return false;\n@@ -1311,7 +1309,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         pfrom->fSuccessfullyConnected = true;\n \n-        string remoteAddr;\n+        std::string remoteAddr;\n         if (fLogIPs)\n             remoteAddr = \", peeraddr=\" + pfrom->addr.ToString();\n \n@@ -1352,7 +1350,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n     if (strCommand == NetMsgType::VERACK)\n     {\n-        pfrom->SetRecvVersion(min(pfrom->nVersion, PROTOCOL_VERSION));\n+        pfrom->SetRecvVersion(std::min(pfrom->nVersion, PROTOCOL_VERSION));\n \n         if (!pfrom->fInbound) {\n             // Mark this node as currently connected, so we update its timestamp later.\n@@ -1385,7 +1383,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n     else if (strCommand == NetMsgType::ADDR)\n     {\n-        vector<CAddress> vAddr;\n+        std::vector<CAddress> vAddr;\n         vRecv >> vAddr;\n \n         // Don't want addr from older versions unless seeding\n@@ -1399,7 +1397,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         }\n \n         // Store the new addresses\n-        vector<CAddress> vAddrOk;\n+        std::vector<CAddress> vAddrOk;\n         int64_t nNow = GetAdjustedTime();\n         int64_t nSince = nNow - 10 * 60;\n         BOOST_FOREACH(CAddress& addr, vAddr)\n@@ -1462,7 +1460,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n     else if (strCommand == NetMsgType::INV)\n     {\n-        vector<CInv> vInv;\n+        std::vector<CInv> vInv;\n         vRecv >> vInv;\n         if (vInv.size() > MAX_INV_SZ)\n         {\n@@ -1529,7 +1527,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n     else if (strCommand == NetMsgType::GETDATA)\n     {\n-        vector<CInv> vInv;\n+        std::vector<CInv> vInv;\n         vRecv >> vInv;\n         if (vInv.size() > MAX_INV_SZ)\n         {\n@@ -1691,7 +1689,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         }\n \n         // we must use CBlocks, as CBlockHeaders won't include the 0x00 nTx count at the end\n-        vector<CBlock> vHeaders;\n+        std::vector<CBlock> vHeaders;\n         int nLimit = MAX_HEADERS_RESULTS;\n         LogPrint(\"net\", \"getheaders %d to %s from peer=%d\\n\", (pindex ? pindex->nHeight : -1), hashStop.IsNull() ? \"end\" : hashStop.ToString(), pfrom->id);\n         for (; pindex; pindex = chainActive.Next(pindex))\n@@ -1727,8 +1725,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             return true;\n         }\n \n-        deque<COutPoint> vWorkQueue;\n-        vector<uint256> vEraseQueue;\n+        std::deque<COutPoint> vWorkQueue;\n+        std::vector<uint256> vEraseQueue;\n         CTransactionRef ptx;\n         vRecv >> ptx;\n         const CTransaction& tx = *ptx;\n@@ -1761,7 +1759,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 mempool.size(), mempool.DynamicMemoryUsage() / 1000);\n \n             // Recursively process any orphan transactions that depended on this one\n-            set<NodeId> setMisbehaving;\n+            std::set<NodeId> setMisbehaving;\n             while (!vWorkQueue.empty()) {\n                 auto itByPrev = mapOrphanTransactionsByPrev.find(vWorkQueue.front());\n                 vWorkQueue.pop_front();\n@@ -1955,7 +1953,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         assert(pindex);\n         UpdateBlockAvailability(pfrom->GetId(), pindex->GetBlockHash());\n \n-        std::map<uint256, pair<NodeId, list<QueuedBlock>::iterator> >::iterator blockInFlightIt = mapBlocksInFlight.find(pindex->GetBlockHash());\n+        std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator> >::iterator blockInFlightIt = mapBlocksInFlight.find(pindex->GetBlockHash());\n         bool fAlreadyInFlight = blockInFlightIt != mapBlocksInFlight.end();\n \n         if (pindex->nStatus & BLOCK_HAVE_DATA) // Nothing to do here\n@@ -1990,7 +1988,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         if (pindex->nHeight <= chainActive.Height() + 2) {\n             if ((!fAlreadyInFlight && nodestate->nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER) ||\n                  (fAlreadyInFlight && blockInFlightIt->second.first == pfrom->GetId())) {\n-                list<QueuedBlock>::iterator *queuedBlockIt = NULL;\n+                std::list<QueuedBlock>::iterator* queuedBlockIt = NULL;\n                 if (!MarkBlockAsInFlight(pfrom->GetId(), pindex->GetBlockHash(), chainparams.GetConsensus(), pindex, &queuedBlockIt)) {\n                     if (!(*queuedBlockIt)->partialBlock)\n                         (*queuedBlockIt)->partialBlock.reset(new PartiallyDownloadedBlock(&mempool));\n@@ -2108,7 +2106,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         {\n             LOCK(cs_main);\n \n-            map<uint256, pair<NodeId, list<QueuedBlock>::iterator> >::iterator it = mapBlocksInFlight.find(resp.blockhash);\n+            std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator> >::iterator it = mapBlocksInFlight.find(resp.blockhash);\n             if (it == mapBlocksInFlight.end() || !it->second.second->partialBlock ||\n                     it->second.first != pfrom->GetId()) {\n                 LogPrint(\"net\", \"Peer %d sent us block transactions for block we weren't expecting\\n\", pfrom->id);\n@@ -2265,7 +2263,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         // If this set of headers is valid and ends in a block with at least as\n         // much work as our tip, download as much as possible.\n         if (fCanDirectFetch && pindexLast->IsValid(BLOCK_VALID_TREE) && chainActive.Tip()->nChainWork <= pindexLast->nChainWork) {\n-            vector<const CBlockIndex *> vToFetch;\n+            std::vector<const CBlockIndex*> vToFetch;\n             const CBlockIndex *pindexWalk = pindexLast;\n             // Calculate all the blocks we'd need to switch to pindexLast, up to a limit.\n             while (pindexWalk && !chainActive.Contains(pindexWalk) && vToFetch.size() <= MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n@@ -2286,7 +2284,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                         pindexLast->GetBlockHash().ToString(),\n                         pindexLast->nHeight);\n             } else {\n-                vector<CInv> vGetData;\n+                std::vector<CInv> vGetData;\n                 // Download as much as possible, from earliest to latest.\n                 BOOST_REVERSE_FOREACH(const CBlockIndex *pindex, vToFetch) {\n                     if (nodestate->nBlocksInFlight >= MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n@@ -2365,7 +2363,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         pfrom->fSentAddr = true;\n \n         pfrom->vAddrToSend.clear();\n-        vector<CAddress> vAddr = connman.GetAddresses();\n+        std::vector<CAddress> vAddr = connman.GetAddresses();\n         FastRandomContext insecure_rand;\n         BOOST_FOREACH(const CAddress &addr, vAddr)\n             pfrom->PushAddress(addr, insecure_rand);\n@@ -2496,7 +2494,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n     else if (strCommand == NetMsgType::FILTERADD)\n     {\n-        vector<unsigned char> vData;\n+        std::vector<unsigned char> vData;\n         vRecv >> vData;\n \n         // Nodes must NEVER send a data item > 520 bytes (the max size for a script data object,\n@@ -2534,10 +2532,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     {\n         if (fDebug) {\n             try {\n-                string strMsg; unsigned char ccode; string strReason;\n+                std::string strMsg; unsigned char ccode; std::string strReason;\n                 vRecv >> LIMITED_STRING(strMsg, CMessageHeader::COMMAND_SIZE) >> ccode >> LIMITED_STRING(strReason, MAX_REJECT_MESSAGE_LENGTH);\n \n-                ostringstream ss;\n+                std::ostringstream ss;\n                 ss << strMsg << \" code \" << itostr(ccode) << \": \" << strReason;\n \n                 if (strMsg == NetMsgType::BLOCK || strMsg == NetMsgType::TX)\n@@ -2635,7 +2633,7 @@ bool ProcessMessages(CNode* pfrom, CConnman& connman, std::atomic<bool>& interru\n             LogPrintf(\"PROCESSMESSAGE: ERRORS IN HEADER %s peer=%d\\n\", SanitizeString(hdr.GetCommand()), pfrom->id);\n             return fMoreWork;\n         }\n-        string strCommand = hdr.GetCommand();\n+        std::string strCommand = hdr.GetCommand();\n \n         // Message size\n         unsigned int nMessageSize = hdr.nMessageSize;\n@@ -2664,7 +2662,7 @@ bool ProcessMessages(CNode* pfrom, CConnman& connman, std::atomic<bool>& interru\n         }\n         catch (const std::ios_base::failure& e)\n         {\n-            connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_MALFORMED, string(\"error parsing message\")));\n+            connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_MALFORMED, std::string(\"error parsing message\")));\n             if (strstr(e.what(), \"end of data\"))\n             {\n                 // Allow exceptions from under-length message on vRecv\n@@ -2761,7 +2759,7 @@ bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsg\n         CNodeState &state = *State(pto->GetId());\n \n         BOOST_FOREACH(const CBlockReject& reject, state.rejects)\n-            connman.PushMessage(pto, msgMaker.Make(NetMsgType::REJECT, (string)NetMsgType::BLOCK, reject.chRejectCode, reject.strRejectReason, reject.hashBlock));\n+            connman.PushMessage(pto, msgMaker.Make(NetMsgType::REJECT, (std::string)NetMsgType::BLOCK, reject.chRejectCode, reject.strRejectReason, reject.hashBlock));\n         state.rejects.clear();\n \n         if (state.fShouldBan) {\n@@ -2794,7 +2792,7 @@ bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsg\n         //\n         if (pto->nNextAddrSend < nNow) {\n             pto->nNextAddrSend = PoissonNextSend(nNow, AVG_ADDRESS_BROADCAST_INTERVAL);\n-            vector<CAddress> vAddr;\n+            std::vector<CAddress> vAddr;\n             vAddr.reserve(pto->vAddrToSend.size());\n             BOOST_FOREACH(const CAddress& addr, pto->vAddrToSend)\n             {\n@@ -2862,7 +2860,7 @@ bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsg\n             // blocks, or if the peer doesn't want headers, just\n             // add all to the inv queue.\n             LOCK(pto->cs_inventory);\n-            vector<CBlock> vHeaders;\n+            std::vector<CBlock> vHeaders;\n             bool fRevertToInv = ((!state.fPreferHeaders &&\n                                  (!state.fPreferHeaderAndIDs || pto->vBlockHashesToAnnounce.size() > 1)) ||\n                                 pto->vBlockHashesToAnnounce.size() > MAX_BLOCKS_TO_ANNOUNCE);\n@@ -2994,7 +2992,7 @@ bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsg\n         //\n         // Message: inventory\n         //\n-        vector<CInv> vInv;\n+        std::vector<CInv> vInv;\n         {\n             LOCK(pto->cs_inventory);\n             vInv.reserve(std::max<size_t>(pto->vInventoryBlockToSend.size(), INVENTORY_BROADCAST_MAX));\n@@ -3059,7 +3057,7 @@ bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsg\n             // Determine transactions to relay\n             if (fSendTrickle) {\n                 // Produce a vector with all candidates for sending\n-                vector<std::set<uint256>::iterator> vInvTx;\n+                std::vector<std::set<uint256>::iterator> vInvTx;\n                 vInvTx.reserve(pto->setInventoryTxToSend.size());\n                 for (std::set<uint256>::iterator it = pto->setInventoryTxToSend.begin(); it != pto->setInventoryTxToSend.end(); it++) {\n                     vInvTx.push_back(it);\n@@ -3153,9 +3151,9 @@ bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsg\n         //\n         // Message: getdata (blocks)\n         //\n-        vector<CInv> vGetData;\n+        std::vector<CInv> vGetData;\n         if (!pto->fClient && (fFetch || !IsInitialBlockDownload()) && state.nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n-            vector<const CBlockIndex*> vToDownload;\n+            std::vector<const CBlockIndex*> vToDownload;\n             NodeId staller = -1;\n             FindNextBlocksToDownload(pto->GetId(), MAX_BLOCKS_IN_TRANSIT_PER_PEER - state.nBlocksInFlight, vToDownload, staller, consensusParams);\n             BOOST_FOREACH(const CBlockIndex *pindex, vToDownload) {"
      },
      {
        "sha": "54eefcafe364fc570afbebcff49505725760774d",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 27,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=668de70be039a4f1ffcf20aeae2a22ee71fc55a8",
        "patch": "@@ -20,8 +20,6 @@\n \n #include <univalue.h>\n \n-using namespace std;\n-\n static const size_t MAX_GETUTXOS_OUTPOINTS = 15; //allow a max of 15 outpoints to be queried at once\n \n enum RetFormat {\n@@ -64,7 +62,7 @@ extern UniValue mempoolToJSON(bool fVerbose = false);\n extern void ScriptPubKeyToJSON(const CScript& scriptPubKey, UniValue& out, bool fIncludeHex);\n extern UniValue blockheaderToJSON(const CBlockIndex* blockindex);\n \n-static bool RESTERR(HTTPRequest* req, enum HTTPStatusCode status, string message)\n+static bool RESTERR(HTTPRequest* req, enum HTTPStatusCode status, std::string message)\n {\n     req->WriteHeader(\"Content-Type\", \"text/plain\");\n     req->WriteReply(status, message + \"\\r\\n\");\n@@ -92,9 +90,9 @@ static enum RetFormat ParseDataFormat(std::string& param, const std::string& str\n     return rf_names[0].rf;\n }\n \n-static string AvailableDataFormatsString()\n+static std::string AvailableDataFormatsString()\n {\n-    string formats = \"\";\n+    std::string formats = \"\";\n     for (unsigned int i = 0; i < ARRAYLEN(rf_names); i++)\n         if (strlen(rf_names[i].name) > 0) {\n             formats.append(\".\");\n@@ -108,7 +106,7 @@ static string AvailableDataFormatsString()\n     return formats;\n }\n \n-static bool ParseHashStr(const string& strReq, uint256& v)\n+static bool ParseHashStr(const std::string& strReq, uint256& v)\n {\n     if (!IsHex(strReq) || (strReq.size() != 64))\n         return false;\n@@ -132,7 +130,7 @@ static bool rest_headers(HTTPRequest* req,\n         return false;\n     std::string param;\n     const RetFormat rf = ParseDataFormat(param, strURIPart);\n-    vector<string> path;\n+    std::vector<std::string> path;\n     boost::split(path, param, boost::is_any_of(\"/\"));\n \n     if (path.size() != 2)\n@@ -142,7 +140,7 @@ static bool rest_headers(HTTPRequest* req,\n     if (count < 1 || count > 2000)\n         return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + path[0]);\n \n-    string hashStr = path[1];\n+    std::string hashStr = path[1];\n     uint256 hash;\n     if (!ParseHashStr(hashStr, hash))\n         return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n@@ -168,14 +166,14 @@ static bool rest_headers(HTTPRequest* req,\n \n     switch (rf) {\n     case RF_BINARY: {\n-        string binaryHeader = ssHeader.str();\n+        std::string binaryHeader = ssHeader.str();\n         req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n         req->WriteReply(HTTP_OK, binaryHeader);\n         return true;\n     }\n \n     case RF_HEX: {\n-        string strHex = HexStr(ssHeader.begin(), ssHeader.end()) + \"\\n\";\n+        std::string strHex = HexStr(ssHeader.begin(), ssHeader.end()) + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"text/plain\");\n         req->WriteReply(HTTP_OK, strHex);\n         return true;\n@@ -185,7 +183,7 @@ static bool rest_headers(HTTPRequest* req,\n         BOOST_FOREACH(const CBlockIndex *pindex, headers) {\n             jsonHeaders.push_back(blockheaderToJSON(pindex));\n         }\n-        string strJSON = jsonHeaders.write() + \"\\n\";\n+        std::string strJSON = jsonHeaders.write() + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"application/json\");\n         req->WriteReply(HTTP_OK, strJSON);\n         return true;\n@@ -232,22 +230,22 @@ static bool rest_block(HTTPRequest* req,\n \n     switch (rf) {\n     case RF_BINARY: {\n-        string binaryBlock = ssBlock.str();\n+        std::string binaryBlock = ssBlock.str();\n         req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n         req->WriteReply(HTTP_OK, binaryBlock);\n         return true;\n     }\n \n     case RF_HEX: {\n-        string strHex = HexStr(ssBlock.begin(), ssBlock.end()) + \"\\n\";\n+        std::string strHex = HexStr(ssBlock.begin(), ssBlock.end()) + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"text/plain\");\n         req->WriteReply(HTTP_OK, strHex);\n         return true;\n     }\n \n     case RF_JSON: {\n         UniValue objBlock = blockToJSON(block, pblockindex, showTxDetails);\n-        string strJSON = objBlock.write() + \"\\n\";\n+        std::string strJSON = objBlock.write() + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"application/json\");\n         req->WriteReply(HTTP_OK, strJSON);\n         return true;\n@@ -287,7 +285,7 @@ static bool rest_chaininfo(HTTPRequest* req, const std::string& strURIPart)\n         JSONRPCRequest jsonRequest;\n         jsonRequest.params = UniValue(UniValue::VARR);\n         UniValue chainInfoObject = getblockchaininfo(jsonRequest);\n-        string strJSON = chainInfoObject.write() + \"\\n\";\n+        std::string strJSON = chainInfoObject.write() + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"application/json\");\n         req->WriteReply(HTTP_OK, strJSON);\n         return true;\n@@ -312,7 +310,7 @@ static bool rest_mempool_info(HTTPRequest* req, const std::string& strURIPart)\n     case RF_JSON: {\n         UniValue mempoolInfoObject = mempoolInfoToJSON();\n \n-        string strJSON = mempoolInfoObject.write() + \"\\n\";\n+        std::string strJSON = mempoolInfoObject.write() + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"application/json\");\n         req->WriteReply(HTTP_OK, strJSON);\n         return true;\n@@ -337,7 +335,7 @@ static bool rest_mempool_contents(HTTPRequest* req, const std::string& strURIPar\n     case RF_JSON: {\n         UniValue mempoolObject = mempoolToJSON(true);\n \n-        string strJSON = mempoolObject.write() + \"\\n\";\n+        std::string strJSON = mempoolObject.write() + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"application/json\");\n         req->WriteReply(HTTP_OK, strJSON);\n         return true;\n@@ -372,14 +370,14 @@ static bool rest_tx(HTTPRequest* req, const std::string& strURIPart)\n \n     switch (rf) {\n     case RF_BINARY: {\n-        string binaryTx = ssTx.str();\n+        std::string binaryTx = ssTx.str();\n         req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n         req->WriteReply(HTTP_OK, binaryTx);\n         return true;\n     }\n \n     case RF_HEX: {\n-        string strHex = HexStr(ssTx.begin(), ssTx.end()) + \"\\n\";\n+        std::string strHex = HexStr(ssTx.begin(), ssTx.end()) + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"text/plain\");\n         req->WriteReply(HTTP_OK, strHex);\n         return true;\n@@ -388,7 +386,7 @@ static bool rest_tx(HTTPRequest* req, const std::string& strURIPart)\n     case RF_JSON: {\n         UniValue objTx(UniValue::VOBJ);\n         TxToJSON(*tx, hashBlock, objTx);\n-        string strJSON = objTx.write() + \"\\n\";\n+        std::string strJSON = objTx.write() + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"application/json\");\n         req->WriteReply(HTTP_OK, strJSON);\n         return true;\n@@ -410,7 +408,7 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n     std::string param;\n     const RetFormat rf = ParseDataFormat(param, strURIPart);\n \n-    vector<string> uriParts;\n+    std::vector<std::string> uriParts;\n     if (param.length() > 1)\n     {\n         std::string strUriParams = param.substr(1);\n@@ -424,7 +422,7 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n \n     bool fInputParsed = false;\n     bool fCheckMemPool = false;\n-    vector<COutPoint> vOutPoints;\n+    std::vector<COutPoint> vOutPoints;\n \n     // parse/deserialize input\n     // input-format = output-format, rest/getutxos/bin requires binary input, gives binary output, ...\n@@ -498,8 +496,8 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n         return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Error: max outpoints exceeded (max: %d, tried: %d)\", MAX_GETUTXOS_OUTPOINTS, vOutPoints.size()));\n \n     // check spentness and form a bitmap (as well as a JSON capable human-readable string representation)\n-    vector<unsigned char> bitmap;\n-    vector<CCoin> outs;\n+    std::vector<unsigned char> bitmap;\n+    std::vector<CCoin> outs;\n     std::string bitmapStringRepresentation;\n     std::vector<bool> hits;\n     bitmap.resize((vOutPoints.size() + 7) / 8);\n@@ -546,7 +544,7 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n         // use exact same output as mentioned in Bip64\n         CDataStream ssGetUTXOResponse(SER_NETWORK, PROTOCOL_VERSION);\n         ssGetUTXOResponse << chainActive.Height() << chainActive.Tip()->GetBlockHash() << bitmap << outs;\n-        string ssGetUTXOResponseString = ssGetUTXOResponse.str();\n+        std::string ssGetUTXOResponseString = ssGetUTXOResponse.str();\n \n         req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n         req->WriteReply(HTTP_OK, ssGetUTXOResponseString);\n@@ -556,7 +554,7 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n     case RF_HEX: {\n         CDataStream ssGetUTXOResponse(SER_NETWORK, PROTOCOL_VERSION);\n         ssGetUTXOResponse << chainActive.Height() << chainActive.Tip()->GetBlockHash() << bitmap << outs;\n-        string strHex = HexStr(ssGetUTXOResponse.begin(), ssGetUTXOResponse.end()) + \"\\n\";\n+        std::string strHex = HexStr(ssGetUTXOResponse.begin(), ssGetUTXOResponse.end()) + \"\\n\";\n \n         req->WriteHeader(\"Content-Type\", \"text/plain\");\n         req->WriteReply(HTTP_OK, strHex);\n@@ -588,7 +586,7 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n         objGetUTXOResponse.push_back(Pair(\"utxos\", utxos));\n \n         // return json string\n-        string strJSON = objGetUTXOResponse.write() + \"\\n\";\n+        std::string strJSON = objGetUTXOResponse.write() + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"application/json\");\n         req->WriteReply(HTTP_OK, strJSON);\n         return true;"
      },
      {
        "sha": "2ff6437c732cc4571bc3671574f39f6c53bedb11",
        "filename": "src/timedata.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/timedata.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/timedata.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/timedata.cpp?ref=668de70be039a4f1ffcf20aeae2a22ee71fc55a8",
        "patch": "@@ -17,8 +17,6 @@\n \n #include <boost/foreach.hpp>\n \n-using namespace std;\n-\n static CCriticalSection cs_nTimeOffset;\n static int64_t nTimeOffset = 0;\n \n@@ -51,7 +49,7 @@ void AddTimeData(const CNetAddr& ip, int64_t nOffsetSample)\n {\n     LOCK(cs_nTimeOffset);\n     // Ignore duplicates\n-    static set<CNetAddr> setKnown;\n+    static std::set<CNetAddr> setKnown;\n     if (setKnown.size() == BITCOIN_TIMEDATA_MAX_SAMPLES)\n         return;\n     if (!setKnown.insert(ip).second)"
      },
      {
        "sha": "1a30bb58ad80bcdd4b6b92aa46573f8d51523a27",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 12,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=668de70be039a4f1ffcf20aeae2a22ee71fc55a8",
        "patch": "@@ -14,8 +14,6 @@\n \n #include <boost/thread.hpp>\n \n-using namespace std;\n-\n static const char DB_COINS = 'c';\n static const char DB_BLOCK_FILES = 'f';\n static const char DB_TXINDEX = 't';\n@@ -32,11 +30,11 @@ CCoinsViewDB::CCoinsViewDB(size_t nCacheSize, bool fMemory, bool fWipe) : db(Get\n }\n \n bool CCoinsViewDB::GetCoins(const uint256 &txid, CCoins &coins) const {\n-    return db.Read(make_pair(DB_COINS, txid), coins);\n+    return db.Read(std::make_pair(DB_COINS, txid), coins);\n }\n \n bool CCoinsViewDB::HaveCoins(const uint256 &txid) const {\n-    return db.Exists(make_pair(DB_COINS, txid));\n+    return db.Exists(std::make_pair(DB_COINS, txid));\n }\n \n uint256 CCoinsViewDB::GetBestBlock() const {\n@@ -53,9 +51,9 @@ bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n     for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end();) {\n         if (it->second.flags & CCoinsCacheEntry::DIRTY) {\n             if (it->second.coins.IsPruned())\n-                batch.Erase(make_pair(DB_COINS, it->first));\n+                batch.Erase(std::make_pair(DB_COINS, it->first));\n             else\n-                batch.Write(make_pair(DB_COINS, it->first), it->second.coins);\n+                batch.Write(std::make_pair(DB_COINS, it->first), it->second.coins);\n             changed++;\n         }\n         count++;\n@@ -73,7 +71,7 @@ CBlockTreeDB::CBlockTreeDB(size_t nCacheSize, bool fMemory, bool fWipe) : CDBWra\n }\n \n bool CBlockTreeDB::ReadBlockFileInfo(int nFile, CBlockFileInfo &info) {\n-    return Read(make_pair(DB_BLOCK_FILES, nFile), info);\n+    return Read(std::make_pair(DB_BLOCK_FILES, nFile), info);\n }\n \n bool CBlockTreeDB::WriteReindexing(bool fReindexing) {\n@@ -139,23 +137,23 @@ void CCoinsViewDBCursor::Next()\n bool CBlockTreeDB::WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*> >& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo) {\n     CDBBatch batch(*this);\n     for (std::vector<std::pair<int, const CBlockFileInfo*> >::const_iterator it=fileInfo.begin(); it != fileInfo.end(); it++) {\n-        batch.Write(make_pair(DB_BLOCK_FILES, it->first), *it->second);\n+        batch.Write(std::make_pair(DB_BLOCK_FILES, it->first), *it->second);\n     }\n     batch.Write(DB_LAST_BLOCK, nLastFile);\n     for (std::vector<const CBlockIndex*>::const_iterator it=blockinfo.begin(); it != blockinfo.end(); it++) {\n-        batch.Write(make_pair(DB_BLOCK_INDEX, (*it)->GetBlockHash()), CDiskBlockIndex(*it));\n+        batch.Write(std::make_pair(DB_BLOCK_INDEX, (*it)->GetBlockHash()), CDiskBlockIndex(*it));\n     }\n     return WriteBatch(batch, true);\n }\n \n bool CBlockTreeDB::ReadTxIndex(const uint256 &txid, CDiskTxPos &pos) {\n-    return Read(make_pair(DB_TXINDEX, txid), pos);\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);\n }\n \n bool CBlockTreeDB::WriteTxIndex(const std::vector<std::pair<uint256, CDiskTxPos> >&vect) {\n     CDBBatch batch(*this);\n     for (std::vector<std::pair<uint256,CDiskTxPos> >::const_iterator it=vect.begin(); it!=vect.end(); it++)\n-        batch.Write(make_pair(DB_TXINDEX, it->first), it->second);\n+        batch.Write(std::make_pair(DB_TXINDEX, it->first), it->second);\n     return WriteBatch(batch);\n }\n \n@@ -175,7 +173,7 @@ bool CBlockTreeDB::LoadBlockIndexGuts(boost::function<CBlockIndex*(const uint256\n {\n     std::unique_ptr<CDBIterator> pcursor(NewIterator());\n \n-    pcursor->Seek(make_pair(DB_BLOCK_INDEX, uint256()));\n+    pcursor->Seek(std::make_pair(DB_BLOCK_INDEX, uint256()));\n \n     // Load mapBlockIndex\n     while (pcursor->Valid()) {"
      },
      {
        "sha": "a1a37dac755b1eff45b4422d1645b6dc84f7aae0",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=668de70be039a4f1ffcf20aeae2a22ee71fc55a8",
        "patch": "@@ -18,8 +18,6 @@\n #include \"utiltime.h\"\n #include \"version.h\"\n \n-using namespace std;\n-\n CTxMemPoolEntry::CTxMemPoolEntry(const CTransactionRef& _tx, const CAmount& _nFee,\n                                  int64_t _nTime, double _entryPriority, unsigned int _entryHeight,\n                                  CAmount _inChainInputValue,\n@@ -658,7 +656,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n     const int64_t nSpendHeight = GetSpendHeight(mempoolDuplicate);\n \n     LOCK(cs);\n-    list<const CTxMemPoolEntry*> waitingOnDependants;\n+    std::list<const CTxMemPoolEntry*> waitingOnDependants;\n     for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         unsigned int i = 0;\n         checkTotal += it->GetTxSize();\n@@ -816,7 +814,7 @@ std::vector<CTxMemPool::indexed_transaction_set::const_iterator> CTxMemPool::Get\n     return iters;\n }\n \n-void CTxMemPool::queryHashes(vector<uint256>& vtxid)\n+void CTxMemPool::queryHashes(std::vector<uint256>& vtxid)\n {\n     LOCK(cs);\n     auto iters = GetSortedDepthAndScore();\n@@ -920,7 +918,7 @@ CTxMemPool::ReadFeeEstimates(CAutoFile& filein)\n     return true;\n }\n \n-void CTxMemPool::PrioritiseTransaction(const uint256 hash, const string strHash, double dPriorityDelta, const CAmount& nFeeDelta)\n+void CTxMemPool::PrioritiseTransaction(const uint256 hash, const std::string strHash, double dPriorityDelta, const CAmount& nFeeDelta)\n {\n     {\n         LOCK(cs);"
      },
      {
        "sha": "fe8f8365be098b3c3ef90bcd2a04ccb09b7cea5b",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 24,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=668de70be039a4f1ffcf20aeae2a22ee71fc55a8",
        "patch": "@@ -46,8 +46,6 @@\n #include <boost/math/distributions/poisson.hpp>\n #include <boost/thread.hpp>\n \n-using namespace std;\n-\n #if defined(NDEBUG)\n # error \"Bitcoin cannot be compiled without assertions.\"\n #endif\n@@ -90,7 +88,7 @@ static void CheckBlockIndex(const Consensus::Params& consensusParams);\n /** Constant stuff for coinbase transactions we create: */\n CScript COINBASE_FLAGS;\n \n-const string strMessageMagic = \"Bitcoin Signed Message:\\n\";\n+const std::string strMessageMagic = \"Bitcoin Signed Message:\\n\";\n \n // Internal stuff\n namespace {\n@@ -123,11 +121,11 @@ namespace {\n      * as good as our current tip or better. Entries may be failed, though, and pruning nodes may be\n      * missing the data for the block.\n      */\n-    set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexCandidates;\n+    std::set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexCandidates;\n     /** All pairs A->B, where A (or one of its ancestors) misses transactions, but B has transactions.\n      * Pruned nodes may have entries where B is missing data.\n      */\n-    multimap<CBlockIndex*, CBlockIndex*> mapBlocksUnlinked;\n+    std::multimap<CBlockIndex*, CBlockIndex*> mapBlocksUnlinked;\n \n     CCriticalSection cs_LastBlockFile;\n     std::vector<CBlockFileInfo> vinfoBlockFile;\n@@ -151,10 +149,10 @@ namespace {\n     arith_uint256 nLastPreciousChainwork = 0;\n \n     /** Dirty block index entries. */\n-    set<CBlockIndex*> setDirtyBlockIndex;\n+    std::set<CBlockIndex*> setDirtyBlockIndex;\n \n     /** Dirty block file entries. */\n-    set<int> setDirtyFileInfo;\n+    std::set<int> setDirtyFileInfo;\n } // anon namespace\n \n /* Use this class to start tracking transactions that are removed from the\n@@ -517,7 +515,7 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fChe\n \n     // Check for duplicate inputs - note that this check is slow so we skip it in CheckBlock\n     if (fCheckDuplicateInputs) {\n-        set<COutPoint> vInOutPoints;\n+        std::set<COutPoint> vInOutPoints;\n         for (const auto& txin : tx.vin)\n         {\n             if (!vInOutPoints.insert(txin.prevout).second)\n@@ -596,7 +594,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n     }\n \n     // Rather not work on nonstandard transactions (unless -testnet/-regtest)\n-    string reason;\n+    std::string reason;\n     if (fRequireStandard && !IsStandardTx(tx, reason, witnessEnabled))\n         return state.DoS(0, false, REJECT_NONSTANDARD, reason);\n \n@@ -611,7 +609,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         return state.Invalid(false, REJECT_ALREADY_KNOWN, \"txn-already-in-mempool\");\n \n     // Check for conflicts with in-memory transactions\n-    set<uint256> setConflicts;\n+    std::set<uint256> setConflicts;\n     {\n     LOCK(pool.cs); // protect pool.mapNextTx\n     BOOST_FOREACH(const CTxIn &txin, tx.vin)\n@@ -831,7 +829,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         if (fReplacementTransaction)\n         {\n             CFeeRate newFeeRate(nModifiedFees, nSize);\n-            set<uint256> setConflictsParents;\n+            std::set<uint256> setConflictsParents;\n             const int maxDescendantsToVisit = 100;\n             CTxMemPool::setEntries setIterConflicting;\n             BOOST_FOREACH(const uint256 &hashConflicting, setConflicts)\n@@ -2052,13 +2050,13 @@ bool static FlushStateToDisk(CValidationState &state, FlushStateMode mode, int n\n         {\n             std::vector<std::pair<int, const CBlockFileInfo*> > vFiles;\n             vFiles.reserve(setDirtyFileInfo.size());\n-            for (set<int>::iterator it = setDirtyFileInfo.begin(); it != setDirtyFileInfo.end(); ) {\n-                vFiles.push_back(make_pair(*it, &vinfoBlockFile[*it]));\n+            for (std::set<int>::iterator it = setDirtyFileInfo.begin(); it != setDirtyFileInfo.end(); ) {\n+                vFiles.push_back(std::make_pair(*it, &vinfoBlockFile[*it]));\n                 setDirtyFileInfo.erase(it++);\n             }\n             std::vector<const CBlockIndex*> vBlocks;\n             vBlocks.reserve(setDirtyBlockIndex.size());\n-            for (set<CBlockIndex*>::iterator it = setDirtyBlockIndex.begin(); it != setDirtyBlockIndex.end(); ) {\n+            for (std::set<CBlockIndex*>::iterator it = setDirtyBlockIndex.begin(); it != setDirtyBlockIndex.end(); ) {\n                 vBlocks.push_back(*it);\n                 setDirtyBlockIndex.erase(it++);\n             }\n@@ -2670,7 +2668,7 @@ CBlockIndex* AddToBlockIndex(const CBlockHeader& block)\n     // to avoid miners withholding blocks but broadcasting headers, to get a\n     // competitive advantage.\n     pindexNew->nSequenceId = 0;\n-    BlockMap::iterator mi = mapBlockIndex.insert(make_pair(hash, pindexNew)).first;\n+    BlockMap::iterator mi = mapBlockIndex.insert(std::make_pair(hash, pindexNew)).first;\n     pindexNew->phashBlock = &((*mi).first);\n     BlockMap::iterator miPrev = mapBlockIndex.find(block.hashPrevBlock);\n     if (miPrev != mapBlockIndex.end())\n@@ -2707,7 +2705,7 @@ bool ReceivedBlockTransactions(const CBlock &block, CValidationState& state, CBl\n \n     if (pindexNew->pprev == NULL || pindexNew->pprev->nChainTx) {\n         // If pindexNew is the genesis block or all parents are BLOCK_VALID_TRANSACTIONS.\n-        deque<CBlockIndex*> queue;\n+        std::deque<CBlockIndex*> queue;\n         queue.push_back(pindexNew);\n \n         // Recursively process any descendant blocks that now may be eligible to be connected.\n@@ -3329,7 +3327,7 @@ void PruneOneBlockFile(const int fileNumber)\n \n void UnlinkPrunedFiles(std::set<int>& setFilesToPrune)\n {\n-    for (set<int>::iterator it = setFilesToPrune.begin(); it != setFilesToPrune.end(); ++it) {\n+    for (std::set<int>::iterator it = setFilesToPrune.begin(); it != setFilesToPrune.end(); ++it) {\n         CDiskBlockPos pos(*it, 0);\n         boost::filesystem::remove(GetBlockPosFilename(pos, \"blk\"));\n         boost::filesystem::remove(GetBlockPosFilename(pos, \"rev\"));\n@@ -3347,7 +3345,7 @@ void FindFilesToPruneManual(std::set<int>& setFilesToPrune, int nManualPruneHeig\n         return;\n \n     // last block to prune is the lesser of (user-specified height, MIN_BLOCKS_TO_KEEP from the tip)\n-    unsigned int nLastBlockWeCanPrune = min((unsigned)nManualPruneHeight, chainActive.Tip()->nHeight - MIN_BLOCKS_TO_KEEP);\n+    unsigned int nLastBlockWeCanPrune = std::min((unsigned)nManualPruneHeight, chainActive.Tip()->nHeight - MIN_BLOCKS_TO_KEEP);\n     int count=0;\n     for (int fileNumber = 0; fileNumber < nLastBlockFile; fileNumber++) {\n         if (vinfoBlockFile[fileNumber].nSize == 0 || vinfoBlockFile[fileNumber].nHeightLast > nLastBlockWeCanPrune)\n@@ -3474,8 +3472,8 @@ CBlockIndex * InsertBlockIndex(uint256 hash)\n     // Create new\n     CBlockIndex* pindexNew = new CBlockIndex();\n     if (!pindexNew)\n-        throw runtime_error(std::string(__func__) + \": new CBlockIndex failed\");\n-    mi = mapBlockIndex.insert(make_pair(hash, pindexNew)).first;\n+        throw std::runtime_error(std::string(__func__) + \": new CBlockIndex failed\");\n+    mi = mapBlockIndex.insert(std::make_pair(hash, pindexNew)).first;\n     pindexNew->phashBlock = &((*mi).first);\n \n     return pindexNew;\n@@ -3489,12 +3487,12 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams)\n     boost::this_thread::interruption_point();\n \n     // Calculate nChainWork\n-    vector<pair<int, CBlockIndex*> > vSortedByHeight;\n+    std::vector<std::pair<int, CBlockIndex*> > vSortedByHeight;\n     vSortedByHeight.reserve(mapBlockIndex.size());\n     BOOST_FOREACH(const PAIRTYPE(uint256, CBlockIndex*)& item, mapBlockIndex)\n     {\n         CBlockIndex* pindex = item.second;\n-        vSortedByHeight.push_back(make_pair(pindex->nHeight, pindex));\n+        vSortedByHeight.push_back(std::make_pair(pindex->nHeight, pindex));\n     }\n     sort(vSortedByHeight.begin(), vSortedByHeight.end());\n     BOOST_FOREACH(const PAIRTYPE(int, CBlockIndex*)& item, vSortedByHeight)\n@@ -3545,7 +3543,7 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams)\n \n     // Check presence of blk files\n     LogPrintf(\"Checking all blk files are present...\\n\");\n-    set<int> setBlkDataFiles;\n+    std::set<int> setBlkDataFiles;\n     BOOST_FOREACH(const PAIRTYPE(uint256, CBlockIndex*)& item, mapBlockIndex)\n     {\n         CBlockIndex* pindex = item.second;\n@@ -3932,7 +3930,7 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n                 NotifyHeaderTip();\n \n                 // Recursively process earlier encountered successors of this block\n-                deque<uint256> queue;\n+                std::deque<uint256> queue;\n                 queue.push_back(hash);\n                 while (!queue.empty()) {\n                     uint256 head = queue.front();"
      }
    ]
  },
  {
    "sha": "71fc17f6673eae2e44d226e21692283a85786c44",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MWZjMTdmNjY3M2VhZTJlNDRkMjI2ZTIxNjkyMjgzYTg1Nzg2YzQ0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-30T12:28:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-30T12:33:00Z"
      },
      "message": "qt: periodic translations update",
      "tree": {
        "sha": "c936d46415615007df140bf7e23f11aa6c4d4513",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c936d46415615007df140bf7e23f11aa6c4d4513"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/71fc17f6673eae2e44d226e21692283a85786c44",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYjzJ9AAoJEHSBCwEjRsmmE0kIALaRrDTaKkoV5gWVhTx/kId6\nXRl3XyUhdfK/BFlRlNEA2drY9roUV+rY99wbfTMWarn12N7rhM6+Ij6OyK1BaqPe\nJHLo5NZr4LtEDPC84EbEoqlKB3NW5F+4ShX7hMVFcSj3siMJ+zS/vuwqYS0fOAXH\n4y0tB+uyjeGW717eb3JioaHTxLt/O+EiCzMWC+O/GVeZ+1hdFc9Aa5dWGjgq4IHG\n1bdOzkR9EHgJuDmZjNMnCAx7G/63ZqFBMv9+3R/nttRp5KuWHF5Wa/UO/L4nipmR\nCfEpun3f66y0S7ZuWEqgQdjW1JUQ7RPF6Oc8RS0XKXQRh89b+IAvxS9BH8ZWsR0=\n=5TtN\n-----END PGP SIGNATURE-----",
        "payload": "tree c936d46415615007df140bf7e23f11aa6c4d4513\nparent 668de70be039a4f1ffcf20aeae2a22ee71fc55a8\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1485779324 +0000\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1485779580 +0100\n\nqt: periodic translations update\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71fc17f6673eae2e44d226e21692283a85786c44",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/71fc17f6673eae2e44d226e21692283a85786c44",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71fc17f6673eae2e44d226e21692283a85786c44/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "668de70be039a4f1ffcf20aeae2a22ee71fc55a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/668de70be039a4f1ffcf20aeae2a22ee71fc55a8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/668de70be039a4f1ffcf20aeae2a22ee71fc55a8"
      }
    ],
    "stats": {
      "total": 651,
      "additions": 450,
      "deletions": 201
    },
    "files": [
      {
        "sha": "9726987b63b22ef829ddede88a3d8f2838fcbf30",
        "filename": "src/qt/locale/bitcoin_af.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_af.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_af.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_af.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -381,10 +381,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>Blokke op skyf word geprosesseer...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Geen blokbron beskikbaar...</translation>\n-    </message>\n     <message>\n         <source>%1 behind</source>\n         <translation>%1 agter</translation>"
      },
      {
        "sha": "9b865f29bff632d3c88ed2e3e7f750e6b37d1000",
        "filename": "src/qt/locale/bitcoin_ar.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_ar.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_ar.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ar.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -421,10 +421,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>\u0645\u0639\u0627\u0644\u062c\u0629 \u0627\u0644\u0643\u062a\u0644 \u0639\u0644\u0649 \u0627\u0644\u0642\u0631\u0635...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>\u0644\u0627 \u064a\u0648\u062c\u062f \u0623\u064a \u0645\u0635\u062f\u0631 \u0627\u0644\u0643\u062a\u0644\u0629</translation>\n-    </message>\n     <message>\n         <source>%1 behind</source>\n         <translation>\u062e\u0644\u0641 %1</translation>"
      },
      {
        "sha": "62f2ffc9e64da559375a5de9f1b2081c5aa65725",
        "filename": "src/qt/locale/bitcoin_be_BY.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_be_BY.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_be_BY.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_be_BY.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -389,10 +389,6 @@\n         <source>&amp;Command-line options</source>\n         <translation>\u041e\u043f\u0446\u044b\u0456 \u043a\u0430\u043c\u0430\u043d\u0434\u043d\u0430\u0433\u0430 \u0440\u0430\u0434\u043a\u0430</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>\u041a\u0440\u044b\u043d\u0456\u0446\u0430 \u0431\u043b\u043e\u043a\u0430\u045e \u043d\u0435\u0434\u0430\u0441\u044f\u0436\u043d\u0430\u044f...</translation>\n-    </message>\n     <message>\n         <source>%1 behind</source>\n         <translation>%1 \u0442\u0430\u043c\u0443</translation>"
      },
      {
        "sha": "c5716983043df30f71037557f5ccf468a7f5e2d7",
        "filename": "src/qt/locale/bitcoin_bg.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_bg.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_bg.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_bg.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -421,10 +421,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0432\u0430\u043d\u0435 \u043d\u0430 \u0431\u043b\u043e\u043a\u043e\u0432\u0435 \u043d\u0430 \u0434\u0438\u0441\u043a\u0430...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>\u041b\u0438\u043f\u0441\u0432\u0430 \u0438\u0437\u0442\u043e\u0447\u043d\u0438\u043a \u043d\u0430 \u0431\u043b\u043e\u043a\u043e\u0432\u0435\u0442\u0435...</translation>\n-    </message>\n     <message>\n         <source>%1 behind</source>\n         <translation>%1 \u0437\u0430\u0434</translation>"
      },
      {
        "sha": "84f51d18a866e6cd5664eb040239bcf063d33375",
        "filename": "src/qt/locale/bitcoin_ca.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_ca.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_ca.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ca.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -441,10 +441,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>S'estan processant els blocs al disc...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>No hi ha cap font de bloc disponible...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>S'ha processat %n bloc de l'historial de transacci\u00f3.</numerusform><numerusform>S'han processat %n blocs de l'historial de transacci\u00f3.</numerusform></translation>"
      },
      {
        "sha": "0123f8faab974fe4c6a8a4e277a89f8f6399e60d",
        "filename": "src/qt/locale/bitcoin_ca@valencia.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_ca@valencia.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_ca@valencia.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ca@valencia.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -393,10 +393,6 @@\n         <source>&amp;Command-line options</source>\n         <translation>Opcions de la &amp;l\u00ednia d'ordes</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>No hi ha cap font de bloc disponible...</translation>\n-    </message>\n     <message>\n         <source>%1 behind</source>\n         <translation>%1 darrere</translation>"
      },
      {
        "sha": "8cbb57bd3539d28d7ab770d39a21c76312300994",
        "filename": "src/qt/locale/bitcoin_ca_ES.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_ca_ES.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_ca_ES.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ca_ES.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -441,10 +441,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>S'estan processant els blocs al disc...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>No hi ha cap font de bloc disponible...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>S'ha processat %n bloc de l'historial de transacci\u00f3.</numerusform><numerusform>S'han processat %n blocs de l'historial de transacci\u00f3.</numerusform></translation>"
      },
      {
        "sha": "67c595ab34ec7c3e2c3678964fd96e5ab29d6eee",
        "filename": "src/qt/locale/bitcoin_cs.ts",
        "status": "modified",
        "additions": 12,
        "deletions": 4,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_cs.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_cs.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_cs.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -441,10 +441,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>Zpracov\u00e1v\u00e1m bloky na disku...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Nen\u00ed dostupn\u00fd \u017e\u00e1dn\u00fd zdroj blok\u016f...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>Zpracov\u00e1n %n blok transak\u010dn\u00ed historie.</numerusform><numerusform>Zpracov\u00e1ny %n bloky transak\u010dn\u00ed historie.</numerusform><numerusform>Zpracov\u00e1no %n blok\u016f transak\u010dn\u00ed historie.</numerusform></translation>\n@@ -2204,6 +2200,14 @@\n         <source>Warning: Unknown change address</source>\n         <translation>Upozorn\u011bn\u00ed: Nezn\u00e1m\u00e1 adresa pro drobn\u00e9</translation>\n     </message>\n+    <message>\n+        <source>Confirm custom change address</source>\n+        <translation>Potvr\u010f vlastn\u00ed adresu pro drobn\u00e9</translation>\n+    </message>\n+    <message>\n+        <source>The address you selected for change is not part of this wallet. Any or all funds in your wallet may be sent to this address. Are you sure?</source>\n+        <translation>Adresa, kterou jsi zvolil pro drobn\u00e9, nen\u00ed sou\u010d\u00e1st\u00ed t\u00e9to pen\u011b\u017eenky. Potenci\u00e1ln\u011b v\u0161echny prost\u0159edky z tv\u00e9 pen\u011b\u017eenky mohou b\u00fdt na tuto adresu odesl\u00e1ny. Souhlas\u00ed\u0161, aby se tak stalo?</translation>\n+    </message>\n     <message>\n         <source>(no label)</source>\n         <translation>(bez ozna\u010den\u00ed)</translation>\n@@ -3121,6 +3125,10 @@\n         <source>Use UPnP to map the listening port (default: 1 when listening and no -proxy)</source>\n         <translation>Pou\u017e\u00edt UPnP k namapov\u00e1n\u00ed naslouchac\u00edho portu (v\u00fdchoz\u00ed: 1, pokud naslouch\u00e1 a nepou\u017e\u00edv\u00e1 -proxy)</translation>\n     </message>\n+    <message>\n+        <source>Username and hashed password for JSON-RPC connections. The field &lt;userpw&gt; comes in the format: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. A canonical python script is included in share/rpcuser. The client then connects normally using the rpcuser=&lt;USERNAME&gt;/rpcpassword=&lt;PASSWORD&gt; pair of arguments. This option can be specified multiple times</source>\n+        <translation>U\u017eivatelsk\u00e9 jm\u00e9no a zaha\u0161ovan\u00e9 heslo pro JSON-RPC spojen\u00ed. Pole &lt;userpw&gt; m\u00e1 form\u00e1t: &lt;U\u017dIVATELSK\u00c9_JM\u00c9NO&gt;:&lt;S\u016eL&gt;$&lt;HA\u0160&gt;. Pomocn\u00fd pythonn\u00ed skript je p\u0159ilo\u017een v share/rpcuser. Klient se pak u\u017e p\u0159ipojuje norm\u00e1ln\u011b pomoc\u00ed p\u00e1ru argument\u016f rpcuser=&lt;U\u017dIVATELSK\u00c9_JM\u00c9NO&gt;/rpcpassword=&lt;HESLO&gt;. Tuto volbu lze pou\u017e\u00edt i v\u00edcekr\u00e1t</translation>\n+    </message>\n     <message>\n         <source>Wallet will not create transactions that violate mempool chain limits (default: %u)</source>\n         <translation>Pen\u011b\u017eenka nebude vytv\u00e1\u0159et transakce, kter\u00e9 by poru\u0161ovaly limity transak\u010dn\u00edho z\u00e1sobn\u00edku na \u0159et\u011bzce (v\u00fdchoz\u00ed: %u)</translation>"
      },
      {
        "sha": "54ef4a2bdf5c5a9535e013b9f752422f5284ddf3",
        "filename": "src/qt/locale/bitcoin_da.ts",
        "status": "modified",
        "additions": 24,
        "deletions": 4,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_da.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_da.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_da.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -329,6 +329,10 @@\n         <source>Click to enable network activity again.</source>\n         <translation>Klik for a aktivere netv\u00e6rksaktivitet igen.</translation>\n     </message>\n+    <message>\n+        <source>Syncing Headers (%1%)...</source>\n+        <translation>Synkroniserer hoveder (%1%)\u2026</translation>\n+    </message>\n     <message>\n         <source>Reindexing blocks on disk...</source>\n         <translation>Genindekserer blokke p\u00e5 disken\u2026</translation>\n@@ -441,10 +445,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>Bearbejder blokke p\u00e5 disken\u2026</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Ingen blokkilde tilg\u00e6ngelig\u2026</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>Bearbejdede %n blok med transaktionshistorik.</numerusform><numerusform>Bearbejdede %n blokke med transaktionshistorik.</numerusform></translation>\n@@ -485,6 +485,10 @@\n         <source>%1 client</source>\n         <translation>%1-klient</translation>\n     </message>\n+    <message>\n+        <source>Connecting to peers...</source>\n+        <translation>Forbinder til knuder\u2026</translation>\n+    </message>\n     <message>\n         <source>Catching up...</source>\n         <translation>Indhenter\u2026</translation>\n@@ -3093,6 +3097,14 @@\n         <source>Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)</source>\n         <translation>Udf\u00f8r kommando, n\u00e5r en transaktion i tegnebogen \u00e6ndres (%s i kommandoen erstattes med TxID)</translation>\n     </message>\n+    <message>\n+        <source>Extra transactions to keep in memory for compact block reconstructions (default: %u)</source>\n+        <translation>Ekstra transaktioner, der skal beholdes i hukommelsen til kompakte blokgenopbygninger (standard: %u)</translation>\n+    </message>\n+    <message>\n+        <source>If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)</source>\n+        <translation>Hvis denne blok er i k\u00e6den, s\u00e5 antag at den og dens forg\u00e6ngere er gyldige, og spring potentielt deres scriptverificering over (0 for at verificere alle, standard: %s, testnet: %s)</translation>\n+    </message>\n     <message>\n         <source>Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: %u seconds)</source>\n         <translation>Justering af maksimalt tilladt gennemsnitlig afvigelse fra peer-tid. Den lokale opfattelse af tid kan blive p\u00e5virket frem eller tilbage af peers med denne m\u00e6ngde tid. (standard: %u sekunder)</translation>\n@@ -3109,6 +3121,14 @@\n         <source>Please contribute if you find %s useful. Visit %s for further information about the software.</source>\n         <translation>Overvej venligst at bidrage til udviklingen, hvis du finder %s brugbar. Bes\u00f8g %s for yderligere information om softwaren.</translation>\n     </message>\n+    <message>\n+        <source>Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex and -rescan. Warning: Reverting this setting requires re-downloading the entire blockchain. (default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, &gt;%u = automatically prune block files to stay under the specified target size in MiB)</source>\n+        <translation>Reduc\u00e9r pladskravene ved at besk\u00e6re (slette, \"prune\") gamle blokke. Dette tillader pruneblockchain-RPC'en at blive kaldt for at slette specifikke blokke, og det aktiverer automatisk besk\u00e6ring af gamle blokke, hvis en m\u00e5lst\u00f8rrelse i MiB er angivet. Denne tilstand er ikke kompatibel med -txindex og -rescan. Advarsel: Fortrydelse af denne indstilling kr\u00e6ver download af hele blokk\u00e6den igen. (standard: 0 = sl\u00e5 besk\u00e6ring af blokke fra, 1 = tillad manuel besk\u00e6ring via RPC, &gt;%u = besk\u00e6r automatisk blokfiler for at bliver under den angivne m\u00e5lst\u00f8rrelse i MiB)</translation>\n+    </message>\n+    <message>\n+        <source>Set lowest fee rate (in %s/kB) for transactions to be included in block creation. (default: %s)</source>\n+        <translation>S\u00e6t den laveste gebyrrate (i %s/kB) for transaktioner, der skal inkluderes i blokoprettelse. (standard: %s)</translation>\n+    </message>\n     <message>\n         <source>Set the number of script verification threads (%u to %d, 0 = auto, &lt;0 = leave that many cores free, default: %d)</source>\n         <translation>S\u00e6t antallet af scriptverificeringstr\u00e5de (%u til %d, 0 = auto, &lt;0 = efterlad det antal kernet fri, standard: %d)</translation>"
      },
      {
        "sha": "af79d4773633cf8af7096723d50358251bb74a0e",
        "filename": "src/qt/locale/bitcoin_de.ts",
        "status": "modified",
        "additions": 16,
        "deletions": 4,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_de.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_de.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_de.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -329,6 +329,10 @@\n         <source>Click to enable network activity again.</source>\n         <translation>Klicken zum Aktivieren der Netzwerkaktivit\u00e4t.</translation>\n     </message>\n+    <message>\n+        <source>Syncing Headers (%1%)...</source>\n+        <translation>Kopfdaten werden synchronisiert (%1%)...</translation>\n+    </message>\n     <message>\n         <source>Reindexing blocks on disk...</source>\n         <translation>Reindiziere Bl\u00f6cke auf Datentr\u00e4ger...</translation>\n@@ -441,10 +445,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>Verarbeite Bl\u00f6cke auf Datentr\u00e4ger...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Keine Blockquelle verf\u00fcgbar...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>%n Block des Transaktionsverlaufs verarbeitet.</numerusform><numerusform>%n Bl\u00f6cke des Transaktionsverlaufs verarbeitet.</numerusform></translation>\n@@ -485,6 +485,10 @@\n         <source>%1 client</source>\n         <translation>%1 Client</translation>\n     </message>\n+    <message>\n+        <source>Connecting to peers...</source>\n+        <translation>Verbinde mit Netzwerk...</translation>\n+    </message>\n     <message>\n         <source>Catching up...</source>\n         <translation>Hole auf...</translation>\n@@ -2192,6 +2196,10 @@\n         <source>Warning: Unknown change address</source>\n         <translation>Warnung: Unbekannte Wechselgeld-Adresse</translation>\n     </message>\n+    <message>\n+        <source>Confirm custom change address</source>\n+        <translation>Best\u00e4tige benutzerdefinierte Wechselgeld-Adresse</translation>\n+    </message>\n     <message>\n         <source>(no label)</source>\n         <translation>(keine Bezeichnung)</translation>\n@@ -3101,6 +3109,10 @@\n         <source>Use UPnP to map the listening port (default: 1 when listening and no -proxy)</source>\n         <translation>UPnP verwenden, um eine Portweiterleitung einzurichten (Standard: 1, wenn abgeh\u00f6rt wird und -proxy nicht gesetzt ist)</translation>\n     </message>\n+    <message>\n+        <source>Username and hashed password for JSON-RPC connections. The field &lt;userpw&gt; comes in the format: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. A canonical python script is included in share/rpcuser. The client then connects normally using the rpcuser=&lt;USERNAME&gt;/rpcpassword=&lt;PASSWORD&gt; pair of arguments. This option can be specified multiple times</source>\n+        <translation>Benutzername und gehashtes Passwort f\u00fcr JSON-RPC Verbindungen. Das Feld &lt;userpw&gt; kommt im Format: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. Ein kanonisches Pythonskript ist in share/rpcuser inbegriffen. Der client benutzt wie gehabt, die rpcuser/rpcpassword Parameter. Diese Option kann mehrere Male spezifiziert werden</translation>\n+    </message>\n     <message>\n         <source>Warning: The network does not appear to fully agree! Some miners appear to be experiencing issues.</source>\n         <translation>Warnung: Das Netzwerk scheint nicht vollst\u00e4ndig \u00fcbereinzustimmen! Einige Miner scheinen Probleme zu haben.</translation>"
      },
      {
        "sha": "0390a378e7717b6232a11ad4f18e70e1b0c1f552",
        "filename": "src/qt/locale/bitcoin_el_GR.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_el_GR.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_el_GR.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_el_GR.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -245,10 +245,6 @@\n         <source>&amp;Command-line options</source>\n         <translation>&amp;\u0395\u03c0\u03b9\u03bb\u03bf\u03b3\u03ad\u03c2 \u03b3\u03c1\u03b1\u03bc\u03bc\u03ae\u03c2 \u03b5\u03bd\u03c4\u03bf\u03bb\u03ce\u03bd</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>\u0397 \u03c0\u03b7\u03b3\u03ae \u03c4\u03bf\u03c5 \u03bc\u03c0\u03bb\u03bf\u03ba \u03b4\u03b5\u03bd \u03b5\u03b9\u03bd\u03b1\u03b9 \u03b4\u03b9\u03b1\u03b8\u03ad\u03c3\u03b9\u03bc\u03b7... </translation>\n-    </message>\n     <message>\n         <source>%1 behind</source>\n         <translation>%1 \u03c0\u03af\u03c3\u03c9</translation>"
      },
      {
        "sha": "cc834a8b96af40d10f3f57564dc8010ca32feff1",
        "filename": "src/qt/locale/bitcoin_en.ts",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_en.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_en.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_en.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -299,7 +299,7 @@\n <context>\n     <name>BitcoinGUI</name>\n     <message>\n-        <location filename=\"../bitcoingui.cpp\" line=\"+356\"/>\n+        <location filename=\"../bitcoingui.cpp\" line=\"+357\"/>\n         <source>Sign &amp;message...</source>\n         <translation>Sign &amp;message...</translation>\n     </message>\n@@ -1134,7 +1134,7 @@\n     <message>\n         <location line=\"+7\"/>\n         <location line=\"+26\"/>\n-        <location filename=\"../modaloverlay.cpp\" line=\"+136\"/>\n+        <location filename=\"../modaloverlay.cpp\" line=\"+138\"/>\n         <source>Unknown...</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2533,7 +2533,7 @@\n     <name>SendCoinsDialog</name>\n     <message>\n         <location filename=\"../forms/sendcoinsdialog.ui\" line=\"+14\"/>\n-        <location filename=\"../sendcoinsdialog.cpp\" line=\"+553\"/>\n+        <location filename=\"../sendcoinsdialog.cpp\" line=\"+554\"/>\n         <source>Send Coins</source>\n         <translation>Send Coins</translation>\n     </message>"
      },
      {
        "sha": "8af5db3e645ebf502d136fa12fe83c003f99a1ef",
        "filename": "src/qt/locale/bitcoin_en_GB.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_en_GB.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_en_GB.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_en_GB.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -333,10 +333,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>Processing blocks on disk...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>No block source available...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>Processed %n block of transaction history.</numerusform><numerusform>Processed %n blocks of transaction history.</numerusform></translation>"
      },
      {
        "sha": "b4ed5e7fd503fe47e05f48742d2168cb9095e7fa",
        "filename": "src/qt/locale/bitcoin_eo.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_eo.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_eo.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_eo.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -241,10 +241,6 @@\n         <source>&amp;Command-line options</source>\n         <translation>&amp;Komandliniaj agordaj\u0302oj</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Neniu fonto de blokoj trovebla...</translation>\n-    </message>\n     <message>\n         <source>%1 behind</source>\n         <translation>mankas %1</translation>"
      },
      {
        "sha": "fc71bf841be38ae8141fdc1bbb6ff2fb0638bea1",
        "filename": "src/qt/locale/bitcoin_es.ts",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_es.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_es.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_es.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -329,6 +329,10 @@\n         <source>Click to enable network activity again.</source>\n         <translation>Pulsar para volver a habilitar la actividad de red.</translation>\n     </message>\n+    <message>\n+        <source>Syncing Headers (%1%)...</source>\n+        <translation>Sincronizando cabeceras (%1%)</translation>\n+    </message>\n     <message>\n         <source>Reindexing blocks on disk...</source>\n         <translation>Reindexando bloques en disco...</translation>\n@@ -441,10 +445,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>Procesando bloques en disco...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Ninguna fuente de bloques disponible...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>%n bloque procesado del historial de transacciones.</numerusform><numerusform>%n bloques procesados del historial de transacciones.</numerusform></translation>\n@@ -3618,6 +3618,11 @@\n         <source>Output debugging information (default: %u, supplying &lt;category&gt; is optional)</source>\n         <translation>Mostrar depuraci\u00f3n (por defecto: %u, proporcionar &lt;category&gt; es opcional)</translation>\n     </message>\n+    <message>\n+        <source>Sets the serialization of raw transaction or block hex returned in non-verbose mode, non-segwit(0) or segwit(1) (default: %d)</source>\n+        <translation>https://www.transifex.com/joyful-world/breaking-english/\n+Establecer la serializaci\u00f3n de las transacciones sin procesar o el bloque hex devuelto en non-verbose mode, non-segwit(O) o segwit(1) (default: %d)</translation>\n+    </message>\n     <message>\n         <source>Support filtering of blocks and transaction with bloom filters (default: %u)</source>\n         <translation>Admite filtrado de bloques, y transacciones con filtros Bloom. Reduce la carga de red. ( por defecto :%u)</translation>"
      },
      {
        "sha": "77e6ef16f3390d616e0788828447784c7afa7a6b",
        "filename": "src/qt/locale/bitcoin_es_DO.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_es_DO.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_es_DO.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_es_DO.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -237,10 +237,6 @@\n         <source>&amp;Command-line options</source>\n         <translation>&amp;Opciones de linea de comando</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Ninguna fuente de bloques disponible ...</translation>\n-    </message>\n     <message>\n         <source>%1 behind</source>\n         <translation>%1 atr\u00e1s</translation>"
      },
      {
        "sha": "7865483183d9fb6161876fbb559cda7e804223a0",
        "filename": "src/qt/locale/bitcoin_es_ES.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_es_ES.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_es_ES.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_es_ES.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -429,10 +429,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>Procesando bloques en disco...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Ninguna fuente de bloques disponible ...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>%n bloque procesado del historial de transacciones.</numerusform><numerusform>%n bloques procesados del historial de transacciones.</numerusform></translation>"
      },
      {
        "sha": "f95b01d33b9179dce5eb5e8f0ce9223310ef7d16",
        "filename": "src/qt/locale/bitcoin_et.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_et.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_et.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_et.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -385,10 +385,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>K\u00f5vakettal olevate plokkide t\u00f6\u00f6tlemine...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Plokkide allikas pole saadaval...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>T\u00f6\u00f6deldud %n plokk transaktsioonide ajaloost.</numerusform><numerusform>T\u00f6\u00f6deldud %n plokki transaktsioonide ajaloost.</numerusform></translation>"
      },
      {
        "sha": "c9cfad0f2a56c11099c561fc5bff786d87858454",
        "filename": "src/qt/locale/bitcoin_fa.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_fa.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_fa.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_fa.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -357,10 +357,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>\u067e\u0631\u062f\u0627\u0632\u0634 \u0628\u0644\u0648\u06a9\u200c\u0647\u0627 \u0631\u0648\u06cc \u062f\u06cc\u0633\u06a9...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>\u0645\u0646\u0628\u0639\u06cc \u0628\u0631\u0627\u06cc \u062f\u0631\u06cc\u0627\u0641\u062a \u0628\u0644\u0627\u06a9 \u062f\u0631 \u062f\u0633\u062a\u0631\u0633 \u0646\u06cc\u0633\u062a...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>\u067e\u0631\u062f\u0627\u0632\u0634 %n  \u0628\u0644\u0627\u06a9 \u0627\u0632 \u062a\u0627\u0631\u06cc\u062e\u0686\u0647 \u06cc \u062a\u0631\u0627\u06a9\u0646\u0634 \u0647\u0627 </numerusform></translation>"
      },
      {
        "sha": "ef76abc098e13bddc0d401d29e71718efc7d60a6",
        "filename": "src/qt/locale/bitcoin_fi.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_fi.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_fi.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_fi.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -273,10 +273,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>K\u00e4sitell\u00e4\u00e4n lohkoja levyll\u00e4...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Lohkojen l\u00e4hdett\u00e4 ei saatavilla...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>Prosessoitu %n lohko rahansiirtohistoriasta.</numerusform><numerusform>Prosessoitu %n lohkoa rahansiirtohistoriasta.</numerusform></translation>"
      },
      {
        "sha": "92682ff297a455694365e109e8619b814905a50b",
        "filename": "src/qt/locale/bitcoin_fr.ts",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_fr.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_fr.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_fr.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -441,10 +441,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>Traitement des blocs sur le disque...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Aucune source de blocs disponible...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>%n bloc d'historique transactionnel a \u00e9t\u00e9 trait\u00e9</numerusform><numerusform>%n blocs d'historique transactionnel ont \u00e9t\u00e9 trait\u00e9s</numerusform></translation>\n@@ -485,6 +481,10 @@\n         <source>%1 client</source>\n         <translation>Client %1</translation>\n     </message>\n+    <message>\n+        <source>Connecting to peers...</source>\n+        <translation>Connexion aux pairs...</translation>\n+    </message>\n     <message>\n         <source>Catching up...</source>\n         <translation>Rattrapage\u2026</translation>\n@@ -3093,6 +3093,10 @@\n         <source>Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)</source>\n         <translation>Ex\u00e9cuter la commande lorsqu'une transaction de porte-monnaie change (%s dans la commande est remplac\u00e9e par TxID)</translation>\n     </message>\n+    <message>\n+        <source>If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)</source>\n+        <translation>Si ce bloc est dans la cha\u00eene, supposer qu'il est valide, ainsi que ces anc\u00eatres, et ignorer potentiellement la v\u00e9rification de leur script (0 pour tout v\u00e9rifier, valeur par d\u00e9faut : %s, r\u00e9seau de test : %s)</translation>\n+    </message>\n     <message>\n         <source>Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: %u seconds)</source>\n         <translation>R\u00e9glage moyen maximal autoris\u00e9 de d\u00e9calage de l'heure d'un pair. La perspective locale du temps peut \u00eatre influenc\u00e9e par les pairs, en avance ou en retard, de cette valeur. (Par d\u00e9faut : %u secondes)</translation>"
      },
      {
        "sha": "4d02aa5114d620da54ccad3452270128dfd73888",
        "filename": "src/qt/locale/bitcoin_fr_FR.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_fr_FR.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_fr_FR.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_fr_FR.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -261,10 +261,6 @@\n         <source>Indexing blocks on disk...</source>\n         <translation>Indexation des blocs sur le disque...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Aucun bloc source disponible</translation>\n-    </message>\n     <message>\n         <source>%1 behind</source>\n         <translation>en retard de %1</translation>"
      },
      {
        "sha": "ff0804d79b52b83798a41dbc3d2a065fa207dfad",
        "filename": "src/qt/locale/bitcoin_gl.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_gl.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_gl.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_gl.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -225,10 +225,6 @@\n         <source>&amp;Command-line options</source>\n         <translation>Opci\u00f3ns da li\u00f1a de comandos</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Non hai orixe de bloques dispo\u00f1ible...</translation>\n-    </message>\n     <message>\n         <source>%1 behind</source>\n         <translation>%1 detr\u00e1s</translation>"
      },
      {
        "sha": "78ef446ff1b29db9671fa1786e9472e52f4a3a86",
        "filename": "src/qt/locale/bitcoin_he.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_he.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_he.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_he.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -317,10 +317,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>\u05de\u05e2\u05d1\u05d3 \u05d1\u05dc\u05d5\u05e7\u05d9\u05dd \u05e2\u05dc \u05d4\u05d3\u05d9\u05e1\u05e7...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>\u05d0\u05d9\u05df \u05de\u05e7\u05d5\u05e8 \u05de\u05e7\u05d8\u05e2\u05d9\u05dd \u05d6\u05de\u05d9\u05df\u2026</translation>\n-    </message>\n     <message>\n         <source>%1 behind</source>\n         <translation>%1 \u05de\u05d0\u05d7\u05d5\u05e8</translation>"
      },
      {
        "sha": "28270e8c2e159e9014ee313fa66d8aab800477ac",
        "filename": "src/qt/locale/bitcoin_hu.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_hu.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_hu.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_hu.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -257,10 +257,6 @@\n         <source>%n active connection(s) to Bitcoin network</source>\n         <translation><numerusform>%n akt\u00edv kapcsolat a Bitcoin h\u00e1l\u00f3zathoz</numerusform><numerusform>%n akt\u00edv kapcsolat a Bitcoin h\u00e1l\u00f3zathoz</numerusform></translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Blokk forr\u00e1sa ismeretlen...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>%n blokk feldolgozva a tranzakci\u00f3 el\u0151zm\u00e9nyb\u0151l.</numerusform><numerusform>%n blokk feldolgozva a tranzakci\u00f3 el\u0151zm\u00e9nyb\u0151l.</numerusform></translation>"
      },
      {
        "sha": "fd77f07cd854fa228cf0cc46caec9cfd8e713285",
        "filename": "src/qt/locale/bitcoin_id_ID.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_id_ID.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_id_ID.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_id_ID.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -253,10 +253,6 @@\n         <source>%n active connection(s) to Bitcoin network</source>\n         <translation><numerusform>%n koneksi aktif ke jaringan Bitcoin</numerusform></translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Sumber blok tidak tersedia...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>%n blok dari riwayat transaksi diproses.</numerusform></translation>"
      },
      {
        "sha": "484e7f86bd2bc88597c9c9182a7919d5d13377c7",
        "filename": "src/qt/locale/bitcoin_it.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_it.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_it.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_it.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -401,10 +401,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>Processando i blocchi su disco...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Nessuna fonte di blocchi disponibile...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>Elaborato %n blocco dello storico transazioni.</numerusform><numerusform>Elaborati %n blocchi dello storico transazioni.</numerusform></translation>"
      },
      {
        "sha": "f81818896fcf1afc104a9f2363563e98ee2ec5ef",
        "filename": "src/qt/locale/bitcoin_ja.ts",
        "status": "modified",
        "additions": 16,
        "deletions": 4,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_ja.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_ja.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ja.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -329,6 +329,10 @@\n         <source>Click to enable network activity again.</source>\n         <translation>\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u6d3b\u52d5\u3092\u518d\u3073\u6709\u52b9\u5316\u3057\u307e\u3059\u3002</translation>\n     </message>\n+    <message>\n+        <source>Syncing Headers (%1%)...</source>\n+        <translation>\u672a\u77e5\u3002\u30d8\u30c3\u30c0\u3092\u540c\u671f\u3057\u3066\u3044\u307e\u3059 (%1%)...</translation>\n+    </message>\n     <message>\n         <source>Reindexing blocks on disk...</source>\n         <translation>\u30c7\u30a3\u30b9\u30af\u4e0a\u306e\u30d6\u30ed\u30c3\u30af\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u518d\u4f5c\u6210\u4e2d...</translation>\n@@ -441,10 +445,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>\u30c7\u30a3\u30b9\u30af\u4e0a\u306e\u30d6\u30ed\u30c3\u30af\u3092\u51e6\u7406\u3057\u3066\u3044\u307e\u3059...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>\u5229\u7528\u53ef\u80fd\u306a\u30d6\u30ed\u30c3\u30af\u304c\u3042\u308a\u307e\u305b\u3093...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u5c65\u6b74\u306e %n \u30d6\u30ed\u30c3\u30af\u3092\u51e6\u7406\u3057\u307e\u3057\u305f\u3002</numerusform></translation>\n@@ -485,6 +485,10 @@\n         <source>%1 client</source>\n         <translation>%1 \u30af\u30e9\u30a4\u30a2\u30f3\u30c8</translation>\n     </message>\n+    <message>\n+        <source>Connecting to peers...</source>\n+        <translation>\u30d4\u30a2\u306b\u63a5\u7d9a\u3057\u3066\u3044\u307e\u3059...</translation>\n+    </message>\n     <message>\n         <source>Catching up...</source>\n         <translation>\u8ffd\u8de1\u4e2d...</translation>\n@@ -3093,6 +3097,14 @@\n         <source>Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)</source>\n         <translation>\u30a6\u30a9\u30ec\u30c3\u30c8\u306e\u53d6\u5f15\u3092\u5909\u66f4\u3059\u308b\u969b\u306b\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c (cmd \u306e %s \u306f TxID \u306b\u7f6e\u63db\u3055\u308c\u308b)</translation>\n     </message>\n+    <message>\n+        <source>Extra transactions to keep in memory for compact block reconstructions (default: %u)</source>\n+        <translation>\u30b3\u30f3\u30d1\u30af\u30c8\u30d6\u30ed\u30c3\u30af\u518d\u69cb\u6210\u306e\u305f\u3081\u306b\u8ffd\u52a0\u306e\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3092\u30e1\u30e2\u30ea\u5185\u306b\u4fdd\u7ba1\u3057\u3066\u304a\u304f (\u30c7\u30d5\u30a9\u30eb\u30c8: %u)</translation>\n+    </message>\n+    <message>\n+        <source>If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)</source>\n+        <translation>\u3053\u306e\u30d6\u30ed\u30c3\u30af\u304c\u30d6\u30ed\u30c3\u30af\u30c1\u30a7\u30fc\u30f3\u5185\u306b\u542b\u307e\u308c\u3066\u3044\u305f\u5834\u5408\u306b\u306f\u3001\u3053\u306e\u30d6\u30ed\u30c3\u30af\u304a\u3088\u3073\u305d\u308c\u4ee5\u524d\u306e\u3059\u3079\u3066\u306e\u30d6\u30ed\u30c3\u30af\u3092\u6709\u52b9\u3067\u3042\u308b\u3068\u307f\u306a\u3057\u3001\u30b9\u30af\u30ea\u30d7\u30c8\u306e\u691c\u8a3c\u3092\u7701\u7565\u3059\u308b (0\u306a\u3089\u3059\u3079\u3066\u3092\u691c\u8a3c\u3001\u30c7\u30d5\u30a9\u30eb\u30c8: %s\u3001\u30c6\u30b9\u30c8\u30cd\u30c3\u30c8: %s)</translation>\n+    </message>\n     <message>\n         <source>Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: %u seconds)</source>\n         <translation>\u6642\u9593\u30aa\u30d5\u30bb\u30c3\u30c8\u8abf\u6574\u5024\u306e\u30d4\u30a2\u4e2d\u592e\u5024\u306b\u5bfe\u3059\u308b\u6700\u5927\u306e\u8a31\u5bb9\u5024\u3002\u30ed\u30fc\u30ab\u30eb\u6642\u9593\u306e\u898b\u8fbc\u307f\u5024\u306f\u3001\u63a5\u7d9a\u3059\u308b\u30d4\u30a2\u306b\u3088\u308a\u524d\u65b9\u306a\u3044\u3057\u5f8c\u65b9\u3078\u5f71\u97ff\u3055\u308c\u307e\u3059\u3002(\u521d\u671f\u5024: %u \u79d2)</translation>"
      },
      {
        "sha": "14378ebea16a66256f75a9cb4d9f9e893a205ec2",
        "filename": "src/qt/locale/bitcoin_ka.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_ka.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_ka.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ka.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -237,10 +237,6 @@\n         <source>&amp;Command-line options</source>\n         <translation>\u10e1\u10d0\u10d9\u10dd\u10db\u10d0\u10dc\u10d3\u10dd \u10e1\u10e2\u10e0\u10d8\u10e5\u10dd\u10dc\u10d8\u10e1 \u10dd\u10de&amp;\u10ea\u10d8\u10d4\u10d1\u10d8</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>\u10d1\u10da\u10dd\u10d9\u10d4\u10d1\u10d8\u10e1 \u10ec\u10e7\u10d0\u10e0\u10dd \u10db\u10d8\u10e3\u10ec\u10d5\u10d3\u10dd\u10db\u10d4\u10da\u10d8\u10d0...</translation>\n-    </message>\n     <message>\n         <source>%1 behind</source>\n         <translation>%1 \u10d2\u10d0\u10d5\u10da\u10d8\u10da\u10d8\u10d0</translation>"
      },
      {
        "sha": "9b5c1c077ef518d069eb1f7c0f45ae37fb1012b2",
        "filename": "src/qt/locale/bitcoin_ko_KR.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_ko_KR.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_ko_KR.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ko_KR.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -429,10 +429,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>\ub514\uc2a4\ud06c\uc5d0\uc11c \ube14\ub85d \ucc98\ub9ac\uc911...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>\uc0ac\uc6a9 \uac00\ub2a5\ud55c \ube14\ub85d\uc774 \uc5c6\uc2b5\ub2c8\ub2e4...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>%n \ube14\ub7ed \ub9cc\ud07c\uc758 \uac70\ub798 \uae30\ub85d\uc774 \ucc98\ub9ac\ub428.</numerusform></translation>"
      },
      {
        "sha": "d84dd7e4e229d4f2e70e178b22274439db49e0bf",
        "filename": "src/qt/locale/bitcoin_la.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_la.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_la.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_la.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -193,10 +193,6 @@\n         <source>&amp;Command-line options</source>\n         <translation>Optiones mandati initiantis</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Nulla fons frustorum absens...</translation>\n-    </message>\n     <message>\n         <source>%1 behind</source>\n         <translation>%1 post</translation>"
      },
      {
        "sha": "2953da443ab5c0e4d31e36654d5c9ccb309c2730",
        "filename": "src/qt/locale/bitcoin_lv_LV.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_lv_LV.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_lv_LV.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_lv_LV.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -229,10 +229,6 @@\n         <source>&amp;Command-line options</source>\n         <translation>&amp;Komandrindas iesp\u0113jas</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Nav pieejams neviens bloku avots...</translation>\n-    </message>\n     <message>\n         <source>%1 behind</source>\n         <translation>%1 aizmugur\u0113</translation>"
      },
      {
        "sha": "183cbac80aaedf6e978e40af982dfeb36186af5f",
        "filename": "src/qt/locale/bitcoin_nb.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_nb.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_nb.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_nb.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -265,10 +265,6 @@\n         <source>%n active connection(s) to Bitcoin network</source>\n         <translation><numerusform>%n aktiv forbindelse til Bitcoin-nettverket</numerusform><numerusform>%n aktive forbindelser til Bitcoin-nettverket</numerusform></translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Ingen kilde for blokker tilgjengelig...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>Lastet %n blokk med transaksjonshistorikk.</numerusform><numerusform>Lastet %n blokker med transaksjonshistorikk.</numerusform></translation>"
      },
      {
        "sha": "2b625b5a078b93ee259c984b43c49ed45e19a471",
        "filename": "src/qt/locale/bitcoin_nl.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_nl.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_nl.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_nl.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -429,10 +429,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>Bezig met verwerken van blokken op harde schijf...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Geen bron voor blokken beschikbaar...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>%n blok aan transactiegeschiedenis verwerkt.</numerusform><numerusform>%n blokken aan transactiegeschiedenis verwerkt.</numerusform></translation>"
      },
      {
        "sha": "46348140700e77fce82d5e84956636beb4904a4d",
        "filename": "src/qt/locale/bitcoin_pl.ts",
        "status": "modified",
        "additions": 73,
        "deletions": 5,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_pl.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_pl.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_pl.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -167,14 +167,34 @@\n         <source>Confirm wallet encryption</source>\n         <translation>Potwierd\u017a szyfrowanie portfela</translation>\n     </message>\n+    <message>\n+        <source>Warning: If you encrypt your wallet and lose your passphrase, you will &lt;b&gt;LOSE ALL OF YOUR BITCOINS&lt;/b&gt;!</source>\n+        <translation>Uwaga: je\u015bli zaszyfrujesz sw\u00f3j portfel i zgubisz has\u0142o &lt;b&gt;STRACISZ WSZYSTKIE SWOJE BITCOINY&lt;/b&gt;!</translation>\n+    </message>\n+    <message>\n+        <source>Are you sure you wish to encrypt your wallet?</source>\n+        <translation>Jeste\u015b pewien, \u017ce chcesz zaszyfrowa\u0107 sw\u00f3j portfel?</translation>\n+    </message>\n     <message>\n         <source>Wallet encrypted</source>\n         <translation>Portfel zaszyfrowany</translation>\n     </message>\n+    <message>\n+        <source>%1 will close now to finish the encryption process. Remember that encrypting your wallet cannot fully protect your bitcoins from being stolen by malware infecting your computer.</source>\n+        <translation>%1 zamknie si\u0119 aby doko\u0144czy\u0107 proces szyfrowania. Pami\u0119taj, \u017ce szyfrowanie portfela nie zabezpiecza w pe\u0142ni Twoich bitcoin\u00f3w przed kradzie\u017c\u0105 przez wirusy lub trojany mog\u0105ce zainfekowa\u0107 Tw\u00f3j komputer.</translation>\n+    </message>\n+    <message>\n+        <source>IMPORTANT: Any previous backups you have made of your wallet file should be replaced with the newly generated, encrypted wallet file. For security reasons, previous backups of the unencrypted wallet file will become useless as soon as you start using the new, encrypted wallet.</source>\n+        <translation>WA\u017bNE: Wszystkie wykonane wcze\u015bniej kopie pliku portfela powinny by\u0107 zamienione na nowe, szyfrowane pliki. Z powod\u00f3w bezpiecze\u0144stwa, poprzednie kopie nieszyfrowanych plik\u00f3w portfela stan\u0105 si\u0119 bezu\u017cyteczne jak tylko zaczniesz korzysta\u0107 z nowego, szyfrowanego portfela.</translation>\n+    </message>\n     <message>\n         <source>Wallet encryption failed</source>\n         <translation>Szyfrowanie portfela nie powiod\u0142o si\u0119</translation>\n     </message>\n+    <message>\n+        <source>Wallet encryption failed due to an internal error. Your wallet was not encrypted.</source>\n+        <translation>Szyfrowanie portfela nie powiod\u0142o si\u0119 z powodu wewn\u0119trznego b\u0142\u0119du. Tw\u00f3j portfel nie zosta\u0142 zaszyfrowany.</translation>\n+    </message>\n     <message>\n         <source>The supplied passphrases do not match.</source>\n         <translation>Podane has\u0142a nie s\u0105 takie same.</translation>\n@@ -409,10 +429,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>Przetwarzanie blocks on disk...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Brak dost\u0119pnych \u017ar\u00f3de\u0142 blok\u00f3w...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>Przetworzono %n blok\u00f3w historii transakcji.</numerusform><numerusform>Przetworzono %n blok\u00f3w historii transakcji.</numerusform><numerusform>Przetworzono %n blok\u00f3w historii transakcji.</numerusform></translation>\n@@ -1980,10 +1996,34 @@\n         <source>%1 to %2</source>\n         <translation>%1 do %2</translation>\n     </message>\n+    <message>\n+        <source>or</source>\n+        <translation>lub</translation>\n+    </message>\n+    <message>\n+        <source>The amount to pay must be larger than 0.</source>\n+        <translation>Kwota do zap\u0142acenia musi by\u0107 wi\u0119ksza od 0.</translation>\n+    </message>\n+    <message>\n+        <source>Transaction creation failed!</source>\n+        <translation>Utworzenie transakcji nie powiod\u0142o si\u0119!</translation>\n+    </message>\n     <message>\n         <source>Payment request expired.</source>\n         <translation>\u017b\u0105danie p\u0142atno\u015bci up\u0142yn\u0119\u0142o.</translation>\n     </message>\n+    <message>\n+        <source>Pay only the required fee of %1</source>\n+        <translation>Zap\u0142a\u0107 tylko wymagan\u0105 op\u0142at\u0119 w wysoko\u015bci %1</translation>\n+    </message>\n+    <message>\n+        <source>Warning: Invalid Bitcoin address</source>\n+        <translation>Ostrze\u017cenie: nieprawid\u0142owy adres Bitcoin</translation>\n+    </message>\n+    <message>\n+        <source>Warning: Unknown change address</source>\n+        <translation>Ostrze\u017cenie: Nieznany adres reszty</translation>\n+    </message>\n     <message>\n         <source>(no label)</source>\n         <translation>(brak etykiety)</translation>\n@@ -2070,7 +2110,11 @@\n     </context>\n <context>\n     <name>SendConfirmationDialog</name>\n-    </context>\n+    <message>\n+        <source>Yes</source>\n+        <translation>Tak</translation>\n+    </message>\n+</context>\n <context>\n     <name>ShutdownWindow</name>\n     <message>\n@@ -2169,6 +2213,22 @@ Zwr\u00f3\u0107 uwag\u0119, \u017ce poprawnie zweryfikowana wiadomo\u015b\u0107 potwierdza to, \u017ce nadaw\n         <source>Reset all verify message fields</source>\n         <translation>Resetuje wszystkie pola weryfikacji wiadomo\u015bci</translation>\n     </message>\n+    <message>\n+        <source>Wallet unlock was cancelled.</source>\n+        <translation>Odblokowanie portfela zosta\u0142o anulowane.</translation>\n+    </message>\n+    <message>\n+        <source>Private key for the entered address is not available.</source>\n+        <translation>Klucz prywatny dla podanego adresu nie jest dost\u0119pny.</translation>\n+    </message>\n+    <message>\n+        <source>Message signing failed.</source>\n+        <translation>Podpisanie wiadomo\u015bci nie powiod\u0142o si\u0119.</translation>\n+    </message>\n+    <message>\n+        <source>Message signed.</source>\n+        <translation>Wiadomo\u015b\u0107 podpisana.</translation>\n+    </message>\n     </context>\n <context>\n     <name>SplashScreen</name>\n@@ -2730,6 +2790,10 @@ Zwr\u00f3\u0107 uwag\u0119, \u017ce poprawnie zweryfikowana wiadomo\u015b\u0107 potwierdza to, \u017ce nadaw\n         <source>Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)</source>\n         <translation>Uruchom polecenie przy otrzymaniu odpowiedniego powiadomienia lub gdy zobaczymy naprawd\u0119 d\u0142ugie rozga\u0142\u0119zienie (%s w poleceniu jest podstawiane za komunikat)</translation>\n     </message>\n+    <message>\n+        <source>Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)</source>\n+        <translation>Op\u0142aty (w %s/Kb) mniejsze ni\u017c ta, b\u0119d\u0105 traktowane jako zerowe przy tworzeniu, przesy\u0142aniu i zatwierdzaniu transakcji (domy\u015blnie: %s)</translation>\n+    </message>\n     <message>\n         <source>If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)</source>\n         <translation>Je\u017celi nie ustawiono paytxfee, do\u0142\u0105cz wystarczaj\u0105ca op\u0142at\u0119, aby transakcja mog\u0142a zosta\u0107 zatwierdzona w ci\u0105gu \u015bredniej ilo\u015bci n blok\u00f3w (domy\u015blnie: %u)</translation>\n@@ -2750,6 +2814,10 @@ Zwr\u00f3\u0107 uwag\u0119, \u017ce poprawnie zweryfikowana wiadomo\u015b\u0107 potwierdza to, \u017ce nadaw\n         <source>The transaction amount is too small to send after the fee has been deducted</source>\n         <translation>Zbyt niska kwota transakcji do wys\u0142ania po odj\u0119ciu op\u0142aty</translation>\n     </message>\n+    <message>\n+        <source>Use hierarchical deterministic key generation (HD) after BIP32. Only has effect during wallet creation/first start</source>\n+        <translation>U\u017cyj hierarchicznej deterministycznej metody generowania kluczy (HD) zgodnie z BIP32. Ma znaczenie tylko podczas tworzenia portfela/pierwszego startu.</translation>\n+    </message>\n     <message>\n         <source>Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway</source>\n         <translation>W\u0119z\u0142y z bia\u0142ej listy nie mog\u0105 zosta\u0107 zbanowane za ataki DoS, a ich transakcje b\u0119d\u0105 zawsze przekazywane, nawet je\u017celi b\u0119d\u0105 znajdywa\u0107 si\u0119 ju\u017c w pami\u0119ci, przydatne np. dla bramek p\u0142atniczych</translation>"
      },
      {
        "sha": "c6370353030e6a6bd210c194d76a19e7819d5410",
        "filename": "src/qt/locale/bitcoin_pt_BR.ts",
        "status": "modified",
        "additions": 16,
        "deletions": 4,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_pt_BR.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_pt_BR.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_pt_BR.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -325,6 +325,10 @@\n         <source>Click to enable network activity again.</source>\n         <translation>Clique para ativar a atividade de rede.</translation>\n     </message>\n+    <message>\n+        <source>Syncing Headers (%1%)...</source>\n+        <translation>Sincronizando cabe\u00e7ahos (%1%)...</translation>\n+    </message>\n     <message>\n         <source>Reindexing blocks on disk...</source>\n         <translation>Reindexando blocos no disco...</translation>\n@@ -437,10 +441,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>Processando blocos no disco...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Nenhum servidor dispon\u00edvel...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>%n bloco processado do hist\u00f3rico de transa\u00e7\u00f5es.</numerusform><numerusform>%n blocos processados do hist\u00f3rico de transa\u00e7\u00f5es.</numerusform></translation>\n@@ -481,6 +481,10 @@\n         <source>%1 client</source>\n         <translation>%1</translation>\n     </message>\n+    <message>\n+        <source>Connecting to peers...</source>\n+        <translation>Conectando...</translation>\n+    </message>\n     <message>\n         <source>Catching up...</source>\n         <translation>Recuperando o atraso ...</translation>\n@@ -3085,6 +3089,14 @@\n         <source>Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)</source>\n         <translation>Executa um comando quando uma transa\u00e7\u00e3o da carteira mudar (%s no comando ser\u00e1 substitu\u00eddo por TxID)</translation>\n     </message>\n+    <message>\n+        <source>Extra transactions to keep in memory for compact block reconstructions (default: %u)</source>\n+        <translation>Transa\u00e7\u00f5es extras para manter na mem\u00f3ria para reconstru\u00e7\u00f5es de blocos compactos (padr\u00e3o: %u)</translation>\n+    </message>\n+    <message>\n+        <source>If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)</source>\n+        <translation>Se\u00a0este bloco est\u00e1 no blockchain, assume-se que ele e seus ancestrais s\u00e3o v\u00e1lidos e podem ignorar a verifica\u00e7\u00e3o de scripts (0 para verificar todos, padr\u00e3o: %s, testnet: %s)</translation>\n+    </message>\n     <message>\n         <source>Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: %u seconds)</source>\n         <translation>A media m\u00e1xima permitida de peer time compensa o ajuste. Perspectiva local de hor\u00e1rio pode ser influenciada por pares \u00e0 frente ou atr\u00e1s neste montante. (padr\u00e3o: %u segundos)</translation>"
      },
      {
        "sha": "c97272d4b73b35ea6a1335f13142ddc827f323db",
        "filename": "src/qt/locale/bitcoin_pt_PT.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_pt_PT.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_pt_PT.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_pt_PT.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -417,10 +417,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>A processar blocos no disco...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Nenhuma fonte de blocos dispon\u00edvel...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>Processado %n bloco do hist\u00f3rico de transa\u00e7\u00f5es.</numerusform><numerusform>Processados %n blocos do hist\u00f3rico de transa\u00e7\u00f5es.</numerusform></translation>"
      },
      {
        "sha": "3d3a4b04316fcac64a4359b6cdc768be27c7ce26",
        "filename": "src/qt/locale/bitcoin_ro_RO.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_ro_RO.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_ro_RO.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ro_RO.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -253,10 +253,6 @@\n         <source>%n active connection(s) to Bitcoin network</source>\n         <translation><numerusform>%n conexiune activ\u0103 c\u0103tre re\u0163eaua Bitcoin</numerusform><numerusform>%n conexiuni active c\u0103tre re\u0163eaua Bitcoin</numerusform><numerusform>%n de conexiuni active c\u0103tre re\u0163eaua Bitcoin</numerusform></translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Nici o surs\u0103 de bloc disponibil\u0103...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>S-a procesat %n bloc din istoricul tranzac\u0163iilor.</numerusform><numerusform>S-au procesat %n blocuri din istoricul tranzac\u0163iilor.</numerusform><numerusform>S-au procesat %n de blocuri din istoricul tranzac\u0163iilor.</numerusform></translation>"
      },
      {
        "sha": "b5f40fc0589007f64a96ba5f14abf6c88bccd3d8",
        "filename": "src/qt/locale/bitcoin_ru.ts",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_ru.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_ru.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ru.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -63,7 +63,7 @@\n     </message>\n     <message>\n         <source>These are your Bitcoin addresses for sending payments. Always check the amount and the receiving address before sending coins.</source>\n-        <translation>\u042d\u0442\u043e \u0432\u0430\u0448\u0438 \u0430\u0434\u0440\u0435\u0441\u0430 Bitcoin \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439. \u0412\u0441\u0435\u0433\u0434\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438 \u0430\u0434\u0440\u0435\u0441 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f \u043f\u0435\u0440\u0435\u0434 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u043e\u0439 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430.</translation>\n+        <translation>\u042d\u0442\u043e \u0432\u0430\u0448\u0438 \u0430\u0434\u0440\u0435\u0441\u0430 Bitcoin \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439. \u0412\u0441\u0435\u0433\u0434\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0439\u0442\u0435 \u0441\u0443\u043c\u043c\u0443 \u0438 \u0430\u0434\u0440\u0435\u0441 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f \u043f\u0435\u0440\u0435\u0434 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u043e\u0439 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430.</translation>\n     </message>\n     <message>\n         <source>These are your Bitcoin addresses for receiving payments. It is recommended to use a new receiving address for each transaction.</source>\n@@ -441,10 +441,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0431\u043b\u043e\u043a\u043e\u0432 \u043d\u0430 \u0434\u0438\u0441\u043a\u0435...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>\u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0431\u043b\u043e\u043a\u043e\u0432 \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d %n \u0431\u043b\u043e\u043a \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439.</numerusform><numerusform>\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043e %n \u0431\u043b\u043e\u043a\u0430 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439.</numerusform><numerusform>\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043e %n \u0431\u043b\u043e\u043a\u043e\u0432 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439.</numerusform><numerusform>\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043e %n \u0431\u043b\u043e\u043a\u043e\u0432 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439.</numerusform></translation>\n@@ -485,6 +481,10 @@\n         <source>%1 client</source>\n         <translation>%1 \u043a\u043b\u0438\u0435\u043d\u0442</translation>\n     </message>\n+    <message>\n+        <source>Connecting to peers...</source>\n+        <translation>\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u043f\u0438\u0440\u0430\u043c...</translation>\n+    </message>\n     <message>\n         <source>Catching up...</source>\n         <translation>\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0438\u0440\u0443\u0435\u0442\u0441\u044f...</translation>"
      },
      {
        "sha": "87dc620f0e1bf9854680283ca3fe38f106f4978e",
        "filename": "src/qt/locale/bitcoin_sk.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_sk.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_sk.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_sk.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -277,10 +277,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>Spracov\u00e1vam bloky na disku...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Nedostupn\u00fd zdroj blokov...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>Spracovan\u00fdch %n blok transak\u010dnej hist\u00f3rie.</numerusform><numerusform>Spracovan\u00fdch %n bloky transak\u010dnej hist\u00f3rie.</numerusform><numerusform>Spracovan\u00fdch %n blokov transak\u010dnej hist\u00f3rie.</numerusform></translation>"
      },
      {
        "sha": "8a21f978ef1323846d38dd01c41552e2a510a3eb",
        "filename": "src/qt/locale/bitcoin_sl_SI.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_sl_SI.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_sl_SI.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_sl_SI.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -261,10 +261,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>Obdelava blokov na disku ...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Ni virov za prenos blokov ...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>%n obdelan blok zgodovine transakcij.</numerusform><numerusform>%n obdelana bloka zgodovine transakcij.</numerusform><numerusform>%n obdelani bloki zgodovine transakcij.</numerusform><numerusform>%n obdelanih blokov zgodovine transakcij.</numerusform></translation>"
      },
      {
        "sha": "f880dd227e582e897a33f1338e37ba818f46136b",
        "filename": "src/qt/locale/bitcoin_sr.ts",
        "status": "modified",
        "additions": 50,
        "deletions": 2,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_sr.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_sr.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_sr.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -37,6 +37,22 @@\n         <source>&amp;Delete</source>\n         <translation>&amp;\u0418\u0437\u0431\u0440\u0438\u0448\u0438</translation>\n     </message>\n+    <message>\n+        <source>Choose the address to send coins to</source>\n+        <translation>Izbirajte adresu za slanje</translation>\n+    </message>\n+    <message>\n+        <source>Choose the address to receive coins with</source>\n+        <translation>Izbirajte adresu za primanje</translation>\n+    </message>\n+    <message>\n+        <source>Sending addresses</source>\n+        <translation>Adresa za slanje</translation>\n+    </message>\n+    <message>\n+        <source>Receiving addresses</source>\n+        <translation>Adresa za primanje</translation>\n+    </message>\n     </context>\n <context>\n     <name>AddressTableModel</name>\n@@ -145,6 +161,10 @@\n         <source>Tabs toolbar</source>\n         <translation>\u0422\u0440\u0430\u043a\u0430 \u0441\u0430 \u043a\u0430\u0440\u0442\u0438\u0446\u0430\u043c\u0430</translation>\n     </message>\n+    <message>\n+        <source>Error</source>\n+        <translation>Gre\u0161ka</translation>\n+    </message>\n     <message>\n         <source>Up to date</source>\n         <translation>\u0410\u0436\u0443\u0440\u043d\u043e</translation>\n@@ -220,6 +240,10 @@\n     </context>\n <context>\n     <name>Intro</name>\n+    <message>\n+        <source>Error</source>\n+        <translation>Gre\u0161ka</translation>\n+    </message>\n     </context>\n <context>\n     <name>ModalOverlay</name>\n@@ -278,6 +302,14 @@\n     </context>\n <context>\n     <name>RPCConsole</name>\n+    <message>\n+        <source>Yes</source>\n+        <translation>Da</translation>\n+    </message>\n+    <message>\n+        <source>No</source>\n+        <translation>Ne</translation>\n+    </message>\n     </context>\n <context>\n     <name>ReceiveCoinsDialog</name>\n@@ -293,6 +325,10 @@\n         <source>&amp;Message:</source>\n         <translation>Poruka:</translation>\n     </message>\n+    <message>\n+        <source>Show</source>\n+        <translation>Prika\u017ei</translation>\n+    </message>\n     </context>\n <context>\n     <name>ReceiveRequestDialog</name>\n@@ -348,7 +384,11 @@\n     </context>\n <context>\n     <name>SendConfirmationDialog</name>\n-    </context>\n+    <message>\n+        <source>Yes</source>\n+        <translation>Da</translation>\n+    </message>\n+</context>\n <context>\n     <name>ShutdownWindow</name>\n     </context>\n@@ -431,6 +471,10 @@\n         <source>Loading addresses...</source>\n         <translation>u\u010ditavam adrese....</translation>\n     </message>\n+    <message>\n+        <source>Insufficient funds</source>\n+        <translation>Nedovoljno sredstava</translation>\n+    </message>\n     <message>\n         <source>Loading block index...</source>\n         <translation>U\u010ditavam blok indeksa...</translation>\n@@ -447,5 +491,9 @@\n         <source>Done loading</source>\n         <translation>Zavr\u0161eno u\u010ditavanje</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>Error</source>\n+        <translation>Gre\u0161ka</translation>\n+    </message>\n+</context>\n </TS>\n\\ No newline at end of file"
      },
      {
        "sha": "2986115a62096cd171508800934150fac120a6b9",
        "filename": "src/qt/locale/bitcoin_sv.ts",
        "status": "modified",
        "additions": 189,
        "deletions": 9,
        "changes": 198,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_sv.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_sv.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_sv.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -318,6 +318,22 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n         <source>Open &amp;URI...</source>\n         <translation>\u00d6ppna &amp;URI...</translation>\n     </message>\n+    <message>\n+        <source>Click to disable network activity.</source>\n+        <translation>Klicka f\u00f6r att inaktivera n\u00e4tverksaktivitet.</translation>\n+    </message>\n+    <message>\n+        <source>Network activity disabled.</source>\n+        <translation>N\u00e4tverksaktivitet inaktiverad.</translation>\n+    </message>\n+    <message>\n+        <source>Click to enable network activity again.</source>\n+        <translation>Klicka f\u00f6r att aktivera n\u00e4tverksaktivitet igen.</translation>\n+    </message>\n+    <message>\n+        <source>Syncing Headers (%1%)...</source>\n+        <translation>Synkar huvuden (%1%)...</translation>\n+    </message>\n     <message>\n         <source>Reindexing blocks on disk...</source>\n         <translation>\u00c5terindexerar block p\u00e5 disken...</translation>\n@@ -430,10 +446,6 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n         <source>Processing blocks on disk...</source>\n         <translation>Bearbetar block p\u00e5 disken...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Ingen block-k\u00e4lla tillg\u00e4nglig...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>Bearbetade %n block av transaktionshistoriken.</numerusform><numerusform>Bearbetade %n block av transaktionshistoriken.</numerusform></translation>\n@@ -474,6 +486,10 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n         <source>%1 client</source>\n         <translation>%1-klient</translation>\n     </message>\n+    <message>\n+        <source>Connecting to peers...</source>\n+        <translation>Ansluter till noder...</translation>\n+    </message>\n     <message>\n         <source>Catching up...</source>\n         <translation>H\u00e4mtar senaste...</translation>\n@@ -607,6 +623,18 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n         <source>Copy amount</source>\n         <translation>Kopiera belopp</translation>\n     </message>\n+    <message>\n+        <source>Copy transaction ID</source>\n+        <translation>Kopiera transaktions-ID</translation>\n+    </message>\n+    <message>\n+        <source>yes</source>\n+        <translation>ja</translation>\n+    </message>\n+    <message>\n+        <source>no</source>\n+        <translation>nej</translation>\n+    </message>\n     <message>\n         <source>(no label)</source>\n         <translation>(Ingen etikett)</translation>\n@@ -634,6 +662,10 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n         <source>&amp;Address</source>\n         <translation>&amp;Adress</translation>\n     </message>\n+    <message>\n+        <source>Could not unlock wallet.</source>\n+        <translation>Kunde inte l\u00e5sa upp pl\u00e5nboken.</translation>\n+    </message>\n     </context>\n <context>\n     <name>FreespaceChecker</name>\n@@ -762,15 +794,35 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n         <source>Form</source>\n         <translation>Formul\u00e4r</translation>\n     </message>\n+    <message>\n+        <source>Number of blocks left</source>\n+        <translation>Antal block kvar</translation>\n+    </message>\n+    <message>\n+        <source>Unknown...</source>\n+        <translation>Ok\u00e4nt...</translation>\n+    </message>\n     <message>\n         <source>Last block time</source>\n         <translation>Sista blocktid</translation>\n     </message>\n+    <message>\n+        <source>Progress</source>\n+        <translation>F\u00f6rlopp</translation>\n+    </message>\n+    <message>\n+        <source>calculating...</source>\n+        <translation>ber\u00e4knar...</translation>\n+    </message>\n     <message>\n         <source>Hide</source>\n         <translation>G\u00f6m</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>Unknown. Syncing Headers (%1)...</source>\n+        <translation>Ok\u00e4nd. Synkar huvuden (%1)...</translation>\n+    </message>\n+</context>\n <context>\n     <name>OpenURIDialog</name>\n     <message>\n@@ -1102,6 +1154,18 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n </context>\n <context>\n     <name>PaymentServer</name>\n+    <message>\n+        <source>URI handling</source>\n+        <translation>URI-hantering</translation>\n+    </message>\n+    <message>\n+        <source>Refund from %1</source>\n+        <translation>\u00c5terbetalning fr\u00e5n %1</translation>\n+    </message>\n+    <message>\n+        <source>Bad response from server %1</source>\n+        <translation>Felaktigt svar fr\u00e5n server %1</translation>\n+    </message>\n     </context>\n <context>\n     <name>PeerTableModel</name>\n@@ -1113,7 +1177,11 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n         <source>Node/Service</source>\n         <translation>Nod/Tj\u00e4nst</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>Ping</source>\n+        <translation>Ping</translation>\n+    </message>\n+</context>\n <context>\n     <name>QObject</name>\n     <message>\n@@ -1152,14 +1220,42 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n         <source>%1 ms</source>\n         <translation>%1 ms</translation>\n     </message>\n+    <message numerus=\"yes\">\n+        <source>%n second(s)</source>\n+        <translation><numerusform>%n sekund</numerusform><numerusform>%n sekunder</numerusform></translation>\n+    </message>\n+    <message numerus=\"yes\">\n+        <source>%n minute(s)</source>\n+        <translation><numerusform>%n minut</numerusform><numerusform>%n minuter</numerusform></translation>\n+    </message>\n+    <message numerus=\"yes\">\n+        <source>%n hour(s)</source>\n+        <translation><numerusform>%n timme</numerusform><numerusform>%n timmar</numerusform></translation>\n+    </message>\n+    <message numerus=\"yes\">\n+        <source>%n day(s)</source>\n+        <translation><numerusform>%n dag</numerusform><numerusform>%n dagar</numerusform></translation>\n+    </message>\n+    <message numerus=\"yes\">\n+        <source>%n week(s)</source>\n+        <translation><numerusform>%n vecka</numerusform><numerusform>%n veckor</numerusform></translation>\n+    </message>\n     <message>\n         <source>%1 and %2</source>\n         <translation>%1 och %2</translation>\n     </message>\n+    <message numerus=\"yes\">\n+        <source>%n year(s)</source>\n+        <translation><numerusform>%n \u00e5r</numerusform><numerusform>%n \u00e5r</numerusform></translation>\n+    </message>\n     </context>\n <context>\n     <name>QObject::QObject</name>\n-    </context>\n+    <message>\n+        <source>Error: %1</source>\n+        <translation>Fel: %1</translation>\n+    </message>\n+</context>\n <context>\n     <name>QRImageWidget</name>\n     </context>\n@@ -1512,10 +1608,18 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n         <source>Remove</source>\n         <translation>Ta bort</translation>\n     </message>\n+    <message>\n+        <source>Copy URI</source>\n+        <translation>Kopiera URI</translation>\n+    </message>\n     <message>\n         <source>Copy label</source>\n         <translation>Kopiera etikett</translation>\n     </message>\n+    <message>\n+        <source>Copy message</source>\n+        <translation>Kopiera meddelande</translation>\n+    </message>\n     <message>\n         <source>Copy amount</source>\n         <translation>Kopiera belopp</translation>\n@@ -1539,6 +1643,14 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n         <source>&amp;Save Image...</source>\n         <translation>&amp;Spara Bild...</translation>\n     </message>\n+    <message>\n+        <source>Payment information</source>\n+        <translation>Betalinformaton</translation>\n+    </message>\n+    <message>\n+        <source>URI</source>\n+        <translation>URI</translation>\n+    </message>\n     <message>\n         <source>Address</source>\n         <translation>Adress</translation>\n@@ -1547,17 +1659,33 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n         <source>Label</source>\n         <translation>Etikett</translation>\n     </message>\n+    <message>\n+        <source>Message</source>\n+        <translation>Meddelande</translation>\n+    </message>\n     </context>\n <context>\n     <name>RecentRequestsTableModel</name>\n+    <message>\n+        <source>Date</source>\n+        <translation>Datum</translation>\n+    </message>\n     <message>\n         <source>Label</source>\n         <translation>Etikett</translation>\n     </message>\n+    <message>\n+        <source>Message</source>\n+        <translation>Meddelande</translation>\n+    </message>\n     <message>\n         <source>(no label)</source>\n         <translation>(Ingen etikett)</translation>\n     </message>\n+    <message>\n+        <source>(no message)</source>\n+        <translation>(inget meddelande)</translation>\n+    </message>\n     </context>\n <context>\n     <name>SendCoinsDialog</name>\n@@ -1705,6 +1833,18 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n         <source>Copy amount</source>\n         <translation>Kopiera belopp</translation>\n     </message>\n+    <message>\n+        <source>%1 to %2</source>\n+        <translation>%1 till %2</translation>\n+    </message>\n+    <message>\n+        <source>or</source>\n+        <translation>eller</translation>\n+    </message>\n+    <message numerus=\"yes\">\n+        <source>%n block(s)</source>\n+        <translation><numerusform>%n block</numerusform><numerusform>%n block</numerusform></translation>\n+    </message>\n     <message>\n         <source>(no label)</source>\n         <translation>(Ingen etikett)</translation>\n@@ -1791,7 +1931,11 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n     </context>\n <context>\n     <name>SendConfirmationDialog</name>\n-    </context>\n+    <message>\n+        <source>Yes</source>\n+        <translation>Ja</translation>\n+    </message>\n+</context>\n <context>\n     <name>ShutdownWindow</name>\n     <message>\n@@ -1889,7 +2033,19 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n         <source>Reset all verify message fields</source>\n         <translation>Rensa alla f\u00e4lt</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>Message signed.</source>\n+        <translation>Meddelande signerat.</translation>\n+    </message>\n+    <message>\n+        <source>The signature could not be decoded.</source>\n+        <translation>Signaturen kunde inte avkodas.</translation>\n+    </message>\n+    <message>\n+        <source>Message verified.</source>\n+        <translation>Meddelande verifierat.</translation>\n+    </message>\n+</context>\n <context>\n     <name>SplashScreen</name>\n     <message>\n@@ -1906,6 +2062,18 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n </context>\n <context>\n     <name>TransactionDesc</name>\n+    <message>\n+        <source>Status</source>\n+        <translation>Status</translation>\n+    </message>\n+    <message>\n+        <source>Date</source>\n+        <translation>Datum</translation>\n+    </message>\n+    <message>\n+        <source>Message</source>\n+        <translation>Meddelande</translation>\n+    </message>\n     </context>\n <context>\n     <name>TransactionDescDialog</name>\n@@ -1916,6 +2084,10 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n     </context>\n <context>\n     <name>TransactionTableModel</name>\n+    <message>\n+        <source>Date</source>\n+        <translation>Datum</translation>\n+    </message>\n     <message>\n         <source>Label</source>\n         <translation>Etikett</translation>\n@@ -1939,10 +2111,18 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n         <source>Copy amount</source>\n         <translation>Kopiera belopp</translation>\n     </message>\n+    <message>\n+        <source>Copy transaction ID</source>\n+        <translation>Kopiera transaktions-ID</translation>\n+    </message>\n     <message>\n         <source>Comma separated file (*.csv)</source>\n         <translation>Kommaseparerad fil (*.csv)</translation>\n     </message>\n+    <message>\n+        <source>Date</source>\n+        <translation>Datum</translation>\n+    </message>\n     <message>\n         <source>Label</source>\n         <translation>Etikett</translation>"
      },
      {
        "sha": "ea84d11d39b314583622ebee529ce8516bef7650",
        "filename": "src/qt/locale/bitcoin_th_TH.ts",
        "status": "modified",
        "additions": 12,
        "deletions": 4,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_th_TH.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_th_TH.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_th_TH.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -41,6 +41,18 @@\n         <source>&amp;Delete</source>\n         <translation>&amp;\u0e25\u0e1a</translation>\n     </message>\n+    <message>\n+        <source>Choose the address to send coins to</source>\n+        <translation>\u0e40\u0e25\u0e37\u0e2d\u0e01\u0e17\u0e35\u0e48\u0e2d\u0e22\u0e39\u0e48\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e2a\u0e48\u0e07\u0e40\u0e2b\u0e23\u0e35\u0e22\u0e0d\u0e44\u0e1b\u0e44\u0e27\u0e49</translation>\n+    </message>\n+    <message>\n+        <source>Choose the address to receive coins with</source>\n+        <translation>\u0e40\u0e25\u0e37\u0e2d\u0e01\u0e17\u0e35\u0e48\u0e2d\u0e22\u0e39\u0e48\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e2a\u0e48\u0e07\u0e40\u0e2b\u0e23\u0e35\u0e22\u0e0d\u0e44\u0e1b\u0e44\u0e27\u0e49</translation>\n+    </message>\n+    <message>\n+        <source>Sending addresses</source>\n+        <translation>\u0e2a\u0e48\u0e07\u0e17\u0e35\u0e48\u0e2d\u0e22\u0e39\u0e48</translation>\n+    </message>\n     </context>\n <context>\n     <name>AddressTableModel</name>\n@@ -273,10 +285,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>\u0e01\u0e33\u0e25\u0e31\u0e07\u0e14\u0e33\u0e40\u0e19\u0e34\u0e19\u0e01\u0e32\u0e23\u0e01\u0e31\u0e1a\u0e1a\u0e25\u0e47\u0e2d\u0e01\u0e43\u0e19\u0e14\u0e34\u0e2a\u0e01\u0e4c...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>\u0e44\u0e21\u0e48\u0e21\u0e35\u0e1a\u0e25\u0e47\u0e2d\u0e01\u0e40\u0e23\u0e34\u0e48\u0e21\u0e15\u0e49\u0e19 \u0e43\u0e2b\u0e49\u0e43\u0e0a\u0e49\u0e44\u0e14\u0e49...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>%n \u0e1a\u0e25\u0e47\u0e2d\u0e01\u0e43\u0e19\u0e1b\u0e23\u0e30\u0e27\u0e31\u0e15\u0e34\u0e23\u0e32\u0e22\u0e01\u0e32\u0e23 \u0e44\u0e14\u0e49\u0e23\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e14\u0e33\u0e40\u0e19\u0e34\u0e19\u0e01\u0e32\u0e23\u0e40\u0e23\u0e35\u0e22\u0e1a\u0e23\u0e49\u0e2d\u0e22\u0e41\u0e25\u0e49\u0e27</numerusform></translation>"
      },
      {
        "sha": "c37a518968e085108d07c3c105e740484e3ef033",
        "filename": "src/qt/locale/bitcoin_tr.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_tr.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_tr.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_tr.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -361,10 +361,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>Bloklar diske yaz\u0131d\u0131r\u0131l\u0131yor...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Hi\u00e7bir blok kayna\u011f\u0131 mevcut de\u011fil...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>Muamele tarih\u00e7esinden %n blok i\u015flendi.</numerusform><numerusform>Muamele tarih\u00e7esinden %n blok i\u015flendi</numerusform></translation>"
      },
      {
        "sha": "2c017fc52e2e664b523694210de3c718d3639995",
        "filename": "src/qt/locale/bitcoin_uk.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_uk.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_uk.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_uk.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -257,10 +257,6 @@\n         <source>%n active connection(s) to Bitcoin network</source>\n         <translation><numerusform>%n \u0430\u043a\u0442\u0438\u0432\u043d\u0435 \u0437'\u0454\u0434\u043d\u0430\u043d\u043d\u044f \u0437 \u043c\u0435\u0440\u0435\u0436\u0435\u044e Bitcoin</numerusform><numerusform>%n \u0430\u043a\u0442\u0438\u0432\u043d\u0456 \u0437'\u0454\u0434\u043d\u0430\u043d\u043d\u044f \u0437 \u043c\u0435\u0440\u0435\u0436\u0435\u044e Bitcoin</numerusform><numerusform>%n \u0430\u043a\u0442\u0438\u0432\u043d\u0438\u0445 \u0437'\u0454\u0434\u043d\u0430\u043d\u044c \u0437 \u043c\u0435\u0440\u0435\u0436\u0435\u044e Bitcoin</numerusform></translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>\u041d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e \u0436\u043e\u0434\u043d\u043e\u0433\u043e \u0434\u0436\u0435\u0440\u0435\u043b\u0430 \u0431\u043b\u043e\u043a\u0456\u0432...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>\u041e\u0431\u0440\u043e\u0431\u043b\u0435\u043d\u043e %n \u0431\u043b\u043e\u043a \u0456\u0441\u0442\u043e\u0440\u0456\u0457 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0456\u0439.</numerusform><numerusform>\u041e\u0431\u0440\u043e\u0431\u043b\u0435\u043d\u043e %n \u0431\u043b\u043e\u043a\u0438 \u0456\u0441\u0442\u043e\u0440\u0456\u0457 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0456\u0439.</numerusform><numerusform>\u041e\u0431\u0440\u043e\u0431\u043b\u0435\u043d\u043e %n \u0431\u043b\u043e\u043a\u0456\u0432 \u0456\u0441\u0442\u043e\u0440\u0456\u0457 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0456\u0439.</numerusform></translation>"
      },
      {
        "sha": "3898c441af1f1b6f7148415397b1f4e60b2c1aa2",
        "filename": "src/qt/locale/bitcoin_uz@Cyrl.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_uz@Cyrl.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_uz@Cyrl.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_uz@Cyrl.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -245,10 +245,6 @@\n         <source>%n active connection(s) to Bitcoin network</source>\n         <translation><numerusform>%n \u0442\u0430 Bitcoin \u0442\u0430\u0440\u043c\u043e\u0493\u0438\u0433\u0430 \u0444\u0430\u043e\u043b \u0443\u043b\u0430\u043d\u0438\u0448 \u043c\u0430\u0432\u0436\u0443\u0434</numerusform></translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>\u0411\u043b\u043e\u043a \u043c\u0430\u043d\u0431\u0430\u043b\u0430\u0440\u0438 \u043c\u0430\u0432\u0436\u0443\u0434 \u044d\u043c\u0430\u0441...</translation>\n-    </message>\n     <message>\n         <source>%1 behind</source>\n         <translation>%1 \u043e\u0440\u049b\u0430\u0434\u0430</translation>"
      },
      {
        "sha": "e98bc080e269471180225adb029568aee24ba5d4",
        "filename": "src/qt/locale/bitcoin_zh_CN.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_zh_CN.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_zh_CN.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_zh_CN.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -441,10 +441,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>\u6b63\u5728\u5904\u7406\u6570\u636e\u5757...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>\u6c92\u6709\u53ef\u7528\u7684\u533a\u5757\u6765\u6e90...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>\u5df2\u5904\u7406 %n \u4e2a\u4ea4\u6613\u5386\u53f2\u6570\u636e\u5757\u3002</numerusform></translation>"
      },
      {
        "sha": "bd0533a83eaa39ad41e03ae87b7321cce4962709",
        "filename": "src/qt/locale/bitcoin_zh_TW.ts",
        "status": "modified",
        "additions": 17,
        "deletions": 5,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_zh_TW.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_zh_TW.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_zh_TW.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -329,6 +329,10 @@\n         <source>Click to enable network activity again.</source>\n         <translation>\u6309\u4e00\u4e0b\u5c31\u53c8\u6703\u4f7f\u7528\u7db2\u8def\u3002</translation>\n     </message>\n+    <message>\n+        <source>Syncing Headers (%1%)...</source>\n+        <translation>\u6b63\u5728\u540c\u6b65\u524d\u5c0e\u8cc7\u6599(%1%)\u4e2d...</translation>\n+    </message>\n     <message>\n         <source>Reindexing blocks on disk...</source>\n         <translation>\u6b63\u5728\u70ba\u78c1\u789f\u88e1\u7684\u5340\u584a\u91cd\u5efa\u7d22\u5f15...</translation>\n@@ -441,10 +445,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>\u6b63\u5728\u8655\u7406\u78c1\u789f\u88e1\u7684\u5340\u584a\u8cc7\u6599...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>\u6c92\u6709\u53ef\u7528\u7684\u5340\u584a\u4f86\u6e90...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>\u5df2\u7d93\u8655\u7406\u4e86 %n \u500b\u5340\u584a\u7684\u4ea4\u6613\u7d00\u9304\u3002</numerusform></translation>\n@@ -485,6 +485,10 @@\n         <source>%1 client</source>\n         <translation>%1 \u5ba2\u6236\u7aef\u8edf\u9ad4</translation>\n     </message>\n+    <message>\n+        <source>Connecting to peers...</source>\n+        <translation>\u6b63\u5728\u8ddf\u5176\u4ed6\u7bc0\u9ede\u9023\u7dda\u4e2d...</translation>\n+    </message>\n     <message>\n         <source>Catching up...</source>\n         <translation>\u6b63\u5728\u8d95\u9032\u5ea6...</translation>\n@@ -3090,6 +3094,14 @@\n         <source>Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)</source>\n         <translation>\u7576\u9322\u5305\u6709\u4ea4\u6613\u6539\u8b8a\u6642\u8981\u57f7\u884c\u7684\u6307\u4ee4(\u6307\u4ee4\u4e2d\u7684 %s \u6703\u88ab\u53d6\u4ee3\u6210\u4ea4\u6613\u8b58\u5225\u78bc)</translation>\n     </message>\n+    <message>\n+        <source>Extra transactions to keep in memory for compact block reconstructions (default: %u)</source>\n+        <translation>\u70ba\u4e86\u5c07\u6458\u8981\u5340\u584a\u5b8c\u6574\u56de\u7d44\u800c\u984d\u5916\u4fdd\u7559\u5728\u8a18\u61b6\u9ad4\u4e2d\u7684\u4ea4\u6613\u6578\u91cf(\u9810\u8a2d\u503c: %u)</translation>\n+    </message>\n+    <message>\n+        <source>If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)</source>\n+        <translation>\u5047\u8a2d\u5df2\u7d93\u5728\u5340\u584a\u93c8\u4e2d\u7684\u5340\u584a\u4ee5\u53ca\u5176\u5148\u524d\u7684\u5340\u584a\u90fd\u5408\u6cd5\uff0c\u56e0\u6b64\u5c0d\u5b83\u5011\u7565\u904e\u6307\u4ee4\u78bc\u9a57\u8b49(0 \u8868\u793a\u4e00\u5f8b\u8981\u9a57\u8b49\uff0c\u9810\u8a2d\u503c: %s, \u6e2c\u8a66\u7db2\u8def: %s)</translation>\n+    </message>\n     <message>\n         <source>Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: %u seconds)</source>\n         <translation>\u8ddf\u5176\u4ed6\u7bc0\u9ede\u7684\u6642\u9593\u5dee\u6700\u9ad8\u53ef\u63a5\u53d7\u7684\u4e2d\u4f4d\u6578\u503c\u3002\u672c\u6a5f\u6240\u8a8d\u70ba\u7684\u6642\u9593\u53ef\u80fd\u6703\u88ab\u5176\u4ed6\u7bc0\u9ede\u5f71\u97ff\uff0c\u5f80\u524d\u6216\u5f80\u5f8c\u5728\u9019\u500b\u503c\u4e4b\u5167\u3002(\u9810\u8a2d\u503c: %u \u79d2)</translation>\n@@ -3384,7 +3396,7 @@\n     </message>\n     <message>\n         <source>Use the test chain</source>\n-        <translation>\u4f7f\u7528\u6e2c\u8a66\u93c8</translation>\n+        <translation>\u4f7f\u7528\u6e2c\u8a66\u5340\u584a\u93c8</translation>\n     </message>\n     <message>\n         <source>User Agent comment (%s) contains unsafe characters.</source>"
      }
    ]
  },
  {
    "sha": "53ab12d9318d5d195ccc77028b0e3ae66dc6e1fd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1M2FiMTJkOTMxOGQ1ZDE5NWNjYzc3MDI4YjBlM2FlNjZkYzZlMWZk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-01-30T12:49:34Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-01-30T12:50:01Z"
      },
      "message": "Merge #9649: [doc] Remove unused clang format dev script\n\nfa5137c [doc] Remove unused clang format dev script (MarcoFalke)",
      "tree": {
        "sha": "5cfc1e547de4c0354691e90c078d0aef4fbce031",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5cfc1e547de4c0354691e90c078d0aef4fbce031"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/53ab12d9318d5d195ccc77028b0e3ae66dc6e1fd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCgAGBQJYjzZ5AAoJEC1/I3LlD+E3RTsIAIcj7TiOMfs+ut4Gf3B3F3aC\nMiaMVzUW5Kca2LHb0KO39tVtJrqXMkWOkFGN9h4BxCuoY2Jb+qSlpNnI31eq8CEp\no/NinTqChMhOlP2Y08KkJCwWeBTREdy83ooZ9X4EVfmSU2rSSpGwiOFJ5a25HSqZ\nRZJlkKA+NxpjgbJ2h7ZxuKGTQbAYvuGIeeZzghs6SbocRe0/HknwpPZ36fiJU3nX\n4uRaKa7KFMH8mw2C9Xeq/wcah9AKjfBlrVLQkr3wB/DWpXssM7oHcG/zxCm9FKH1\nIEC4kxe/ViY25VjATmjIsUoeYZ/PEpSHdU5t4kJcIvhSOknb+mzG8ZYAGvyE9/0=\n=tCvt\n-----END PGP SIGNATURE-----",
        "payload": "tree 5cfc1e547de4c0354691e90c078d0aef4fbce031\nparent 71fc17f6673eae2e44d226e21692283a85786c44\nparent fa5137c11d2d4accd9bfc68b3498e7e16829c3ab\nauthor MarcoFalke <falke.marco@gmail.com> 1485780574 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1485780601 +0100\n\nMerge #9649: [doc] Remove unused clang format dev script\n\nfa5137c [doc] Remove unused clang format dev script (MarcoFalke)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53ab12d9318d5d195ccc77028b0e3ae66dc6e1fd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/53ab12d9318d5d195ccc77028b0e3ae66dc6e1fd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53ab12d9318d5d195ccc77028b0e3ae66dc6e1fd/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "71fc17f6673eae2e44d226e21692283a85786c44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71fc17f6673eae2e44d226e21692283a85786c44",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/71fc17f6673eae2e44d226e21692283a85786c44"
      },
      {
        "sha": "fa5137c11d2d4accd9bfc68b3498e7e16829c3ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5137c11d2d4accd9bfc68b3498e7e16829c3ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa5137c11d2d4accd9bfc68b3498e7e16829c3ab"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 6,
      "deletions": 71
    },
    "files": [
      {
        "sha": "34f2af68666a9d51419a463ed89f7361464fd5d8",
        "filename": "contrib/devtools/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53ab12d9318d5d195ccc77028b0e3ae66dc6e1fd/contrib/devtools/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53ab12d9318d5d195ccc77028b0e3ae66dc6e1fd/contrib/devtools/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/README.md?ref=53ab12d9318d5d195ccc77028b0e3ae66dc6e1fd",
        "patch": "@@ -8,11 +8,6 @@ check-doc.py\n Check if all command line args are documented. The return value indicates the\n number of undocumented args.\n \n-clang-format.py\n-===============\n-\n-A script to format cpp source code according to [.clang-format](../../src/.clang-format). This should only be applied to new files or files which are currently not actively developed on. Also, git subtrees are not subject to formatting.\n-\n clang-format-diff.py\n ===================\n \n@@ -24,6 +19,7 @@ the script should be called from the git root folder as follows.\n ```\n git diff -U0 HEAD~1.. | ./contrib/devtools/clang-format-diff.py -p1 -i -v\n ```\n+\n copyright\\_header.py\n ====================\n "
      },
      {
        "sha": "cee99047ac67e69fe767a910ac56811e574cfc8d",
        "filename": "contrib/devtools/clang-format.py",
        "status": "removed",
        "additions": 0,
        "deletions": 62,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/contrib/devtools/clang-format.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/contrib/devtools/clang-format.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/clang-format.py?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -1,62 +0,0 @@\n-#!/usr/bin/env python\n-'''\n-Wrapper script for clang-format\n-\n-Copyright (c) 2015 MarcoFalke\n-Copyright (c) 2015 The Bitcoin Core developers\n-Distributed under the MIT software license, see the accompanying\n-file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-'''\n-\n-import os\n-import sys\n-import subprocess\n-\n-tested_versions = ['3.6.0', '3.6.1', '3.6.2'] # A set of versions known to produce the same output\n-accepted_file_extensions = ('.h', '.cpp') # Files to format\n-\n-def check_clang_format_version(clang_format_exe):\n-    try:\n-        output = subprocess.check_output([clang_format_exe, '-version'])\n-        for ver in tested_versions:\n-            if ver in output:\n-                print \"Detected clang-format version \" + ver\n-                return\n-        raise RuntimeError(\"Untested version: \" + output)\n-    except Exception as e:\n-        print 'Could not verify version of ' + clang_format_exe + '.'\n-        raise e\n-\n-def check_command_line_args(argv):\n-    required_args = ['{clang-format-exe}', '{files}']\n-    example_args = ['clang-format-3.x', 'src/main.cpp', 'src/wallet/*']\n-\n-    if(len(argv) < len(required_args) + 1):\n-        for word in (['Usage:', argv[0]] + required_args):\n-            print word,\n-        print ''\n-        for word in (['E.g:', argv[0]] + example_args):\n-            print word,\n-        print ''\n-        sys.exit(1)\n-\n-def run_clang_format(clang_format_exe, files):\n-    for target in files:\n-        if os.path.isdir(target):\n-            for path, dirs, files in os.walk(target):\n-                run_clang_format(clang_format_exe, (os.path.join(path, f) for f in files))\n-        elif target.endswith(accepted_file_extensions):\n-            print \"Format \" + target\n-            subprocess.check_call([clang_format_exe, '-i', '-style=file', target], stdout=open(os.devnull, 'wb'), stderr=subprocess.STDOUT)\n-        else:\n-            print \"Skip \" + target\n-\n-def main(argv):\n-    check_command_line_args(argv)\n-    clang_format_exe = argv[1]\n-    files = argv[2:]\n-    check_clang_format_version(clang_format_exe)\n-    run_clang_format(clang_format_exe, files)\n-\n-if __name__ == \"__main__\":\n-    main(sys.argv)"
      },
      {
        "sha": "989ad8d03ebdeb1f43f40c06dcf9c7b91392bff0",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53ab12d9318d5d195ccc77028b0e3ae66dc6e1fd/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53ab12d9318d5d195ccc77028b0e3ae66dc6e1fd/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=53ab12d9318d5d195ccc77028b0e3ae66dc6e1fd",
        "patch": "@@ -4,10 +4,11 @@ Developer Notes\n Various coding styles have been used during the history of the codebase,\n and the result is not very consistent. However, we're now trying to converge to\n a single style, so please use it in new code. Old code will be converted\n-gradually.\n+gradually and you are encouraged to use the provided\n+[clang-format-diff script](/contrib/devtools/README.md#clang-format-diffpy)\n+to clean up the patch automatically before submitting a pull request.\n+\n - Basic rules specified in [src/.clang-format](/src/.clang-format).\n-  Use a recent clang-format to format automatically using one of the [dev scripts]\n-  (/contrib/devtools/README.md#clang-formatpy).\n   - Braces on new lines for namespaces, classes, functions, methods.\n   - Braces on the same line for everything else.\n   - 4 space indentation (no tabs) for every block except namespaces."
      },
      {
        "sha": "fc53509138fad0ad50144b8210ff23a90b155db0",
        "filename": "src/.clang-format",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53ab12d9318d5d195ccc77028b0e3ae66dc6e1fd/src/.clang-format",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53ab12d9318d5d195ccc77028b0e3ae66dc6e1fd/src/.clang-format",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/.clang-format?ref=53ab12d9318d5d195ccc77028b0e3ae66dc6e1fd",
        "patch": "@@ -6,7 +6,7 @@ AlignTrailingComments: true\n AllowAllParametersOfDeclarationOnNextLine: false\n AllowShortBlocksOnASingleLine: false\n AllowShortFunctionsOnASingleLine: All\n-AllowShortIfStatementsOnASingleLine: false\n+AllowShortIfStatementsOnASingleLine: true\n AllowShortLoopsOnASingleLine: false\n AlwaysBreakBeforeMultilineStrings: false\n AlwaysBreakTemplateDeclarations: true"
      }
    ]
  },
  {
    "sha": "e99f0d7ad443ff72087c6f80e9fab65cace0bf19",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOTlmMGQ3YWQ0NDNmZjcyMDg3YzZmODBlOWZhYjY1Y2FjZTBiZjE5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-30T12:56:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-30T12:56:24Z"
      },
      "message": "Merge #9647: Skip RAII event tests if libevent is built without event_set_mem_functions\n\n95f97f4 Skip RAII event tests if libevent is built without event_set_mem_functions (Luke Dashjr)",
      "tree": {
        "sha": "f9a300f6f587cc14a999a9c77682f61212d18016",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f9a300f6f587cc14a999a9c77682f61212d18016"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e99f0d7ad443ff72087c6f80e9fab65cace0bf19",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYjzf4AAoJEHSBCwEjRsmmsP8H/2CtZDub59oaF488O66uC+fa\nRCaQnMa2+KRpOlFgzNIPra2VvpKmrfuv+N0akFuW4Qvet4BL3w2W6HEBWM1ZJ6cV\nWTF0sm3YlAISYdBImT2puuLyotvsw/o9i2+wgImM5fbHkL5RUrvMFcWEFebNhofG\nX2KzL2FrncsIsLZ4WL8UEw6NgQvblw1raiSlYdHI2HIauxQI7rA46JMb0X4nJuog\nfGoEYOpkznY7GJwvBu+/CpGDrYcPtXQk/sU0PRliW3BtGdr4vaWzq4j3O70lkRUC\np/qpWTAw/ryRnu6davRFHtggJTPrjan3Xf5s86Tx7BwemzdU+7tcCvfP0v+h6PI=\n=sp1X\n-----END PGP SIGNATURE-----",
        "payload": "tree f9a300f6f587cc14a999a9c77682f61212d18016\nparent 53ab12d9318d5d195ccc77028b0e3ae66dc6e1fd\nparent 95f97f4b94b9d534cf61c3c82ff728eff00423e5\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1485780981 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1485780984 +0100\n\nMerge #9647: Skip RAII event tests if libevent is built without event_set_mem_functions\n\n95f97f4 Skip RAII event tests if libevent is built without event_set_mem_functions (Luke Dashjr)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e99f0d7ad443ff72087c6f80e9fab65cace0bf19",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e99f0d7ad443ff72087c6f80e9fab65cace0bf19",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e99f0d7ad443ff72087c6f80e9fab65cace0bf19/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "53ab12d9318d5d195ccc77028b0e3ae66dc6e1fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53ab12d9318d5d195ccc77028b0e3ae66dc6e1fd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/53ab12d9318d5d195ccc77028b0e3ae66dc6e1fd"
      },
      {
        "sha": "95f97f4b94b9d534cf61c3c82ff728eff00423e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95f97f4b94b9d534cf61c3c82ff728eff00423e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/95f97f4b94b9d534cf61c3c82ff728eff00423e5"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0f40874f55c10494ce4766848e1a58ee68bda6aa",
        "filename": "src/test/raii_event_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e99f0d7ad443ff72087c6f80e9fab65cace0bf19/src/test/raii_event_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e99f0d7ad443ff72087c6f80e9fab65cace0bf19/src/test/raii_event_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/raii_event_tests.cpp?ref=e99f0d7ad443ff72087c6f80e9fab65cace0bf19",
        "patch": "@@ -3,6 +3,10 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <event2/event.h>\n+\n+#ifdef EVENT_SET_MEM_FUNCTIONS_IMPLEMENTED\n+// It would probably be ideal to define dummy test(s) that report skipped, but boost::test doesn't seem to make that practical (at least not in versions available with common distros)\n+\n #include <map>\n #include <stdlib.h>\n \n@@ -86,3 +90,5 @@ BOOST_AUTO_TEST_CASE(raii_event_order)\n }\n \n BOOST_AUTO_TEST_SUITE_END()\n+\n+#endif  // EVENT_SET_MEM_FUNCTIONS_IMPLEMENTED"
      }
    ]
  },
  {
    "sha": "d625b907a1800a5a30c4ad285641c7418d2c28c1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNjI1YjkwN2ExODAwYTVhMzBjNGFkMjg1NjQxYzc0MThkMmMyOGMx",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2017-01-26T17:57:04Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-01-30T16:47:10Z"
      },
      "message": "wallet: Refactor dummy signature signing for reusability",
      "tree": {
        "sha": "ab77fc0f12bd438e34a52882fbc97e667948a0cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab77fc0f12bd438e34a52882fbc97e667948a0cd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d625b907a1800a5a30c4ad285641c7418d2c28c1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d625b907a1800a5a30c4ad285641c7418d2c28c1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d625b907a1800a5a30c4ad285641c7418d2c28c1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d625b907a1800a5a30c4ad285641c7418d2c28c1/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e99f0d7ad443ff72087c6f80e9fab65cace0bf19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e99f0d7ad443ff72087c6f80e9fab65cace0bf19",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e99f0d7ad443ff72087c6f80e9fab65cace0bf19"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 30,
      "deletions": 15
    },
    "files": [
      {
        "sha": "a7b8022bd9c79e025ab601e8cc3563170239f022",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 15,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d625b907a1800a5a30c4ad285641c7418d2c28c1/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d625b907a1800a5a30c4ad285641c7418d2c28c1/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d625b907a1800a5a30c4ad285641c7418d2c28c1",
        "patch": "@@ -2583,21 +2583,9 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                                               std::numeric_limits<unsigned int>::max() - (fWalletRbf ? 2 : 1)));\n \n                 // Fill in dummy signatures for fee calculation.\n-                int nIn = 0;\n-                for (const auto& coin : setCoins)\n-                {\n-                    const CScript& scriptPubKey = coin.first->tx->vout[coin.second].scriptPubKey;\n-                    SignatureData sigdata;\n-\n-                    if (!ProduceSignature(DummySignatureCreator(this), scriptPubKey, sigdata))\n-                    {\n-                        strFailReason = _(\"Signing transaction failed\");\n-                        return false;\n-                    } else {\n-                        UpdateTransaction(txNew, nIn, sigdata);\n-                    }\n-\n-                    nIn++;\n+                if (!DummySignTx(txNew, setCoins)) {\n+                    strFailReason = _(\"Signing transaction failed\");\n+                    return false;\n                 }\n \n                 unsigned int nBytes = GetVirtualTransactionSize(txNew);"
      },
      {
        "sha": "1de04ae16a3889ba69fff022cba1ba0e240afebd",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d625b907a1800a5a30c4ad285641c7418d2c28c1/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d625b907a1800a5a30c4ad285641c7418d2c28c1/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=d625b907a1800a5a30c4ad285641c7418d2c28c1",
        "patch": "@@ -13,6 +13,7 @@\n #include \"utilstrencodings.h\"\n #include \"validationinterface.h\"\n #include \"script/ismine.h\"\n+#include \"script/sign.h\"\n #include \"wallet/crypter.h\"\n #include \"wallet/walletdb.h\"\n #include \"wallet/rpcwallet.h\"\n@@ -796,6 +797,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& entries);\n     bool AddAccountingEntry(const CAccountingEntry&);\n     bool AddAccountingEntry(const CAccountingEntry&, CWalletDB *pwalletdb);\n+    template <typename ContainerType>\n+    bool DummySignTx(CMutableTransaction &txNew, const ContainerType &coins);\n \n     static CFeeRate minTxFee;\n     static CFeeRate fallbackFee;\n@@ -1028,4 +1031,28 @@ class CAccount\n     }\n };\n \n+// Helper for producing a bunch of max-sized low-S signatures (eg 72 bytes)\n+// ContainerType is meant to hold pair<CWalletTx *, int>, and be iterable\n+// so that each entry corresponds to each vIn, in order.\n+template <typename ContainerType>\n+bool CWallet::DummySignTx(CMutableTransaction &txNew, const ContainerType &coins)\n+{\n+    // Fill in dummy signatures for fee calculation.\n+    int nIn = 0;\n+    for (const auto& coin : coins)\n+    {\n+        const CScript& scriptPubKey = coin.first->tx->vout[coin.second].scriptPubKey;\n+        SignatureData sigdata;\n+\n+        if (!ProduceSignature(DummySignatureCreator(this), scriptPubKey, sigdata))\n+        {\n+            return false;\n+        } else {\n+            UpdateTransaction(txNew, nIn, sigdata);\n+        }\n+\n+        nIn++;\n+    }\n+    return true;\n+}\n #endif // BITCOIN_WALLET_WALLET_H"
      }
    ]
  },
  {
    "sha": "178454dde93ffa55343c17fcc6414f1f982f71e3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNzg0NTRkZGU5M2ZmYTU1MzQzYzE3ZmNjNjQxNGYxZjk4MmY3MWUz",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-01-31T00:09:29Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-01-31T00:09:29Z"
      },
      "message": "Contrib: Add jtimon pgp keys for commit sigs and future gitian builds",
      "tree": {
        "sha": "7c2d1e9e5e70fc82f266b9c49d90c026fda4b9be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7c2d1e9e5e70fc82f266b9c49d90c026fda4b9be"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/178454dde93ffa55343c17fcc6414f1f982f71e3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYj9W5AAoJEIhmwY6hyUSiw1sP/j4bK8GQr/4tPCQzdm0Ee+Vv\npWQWLrMYJ2AZ8e31DcAElgvT2UPCOP502l5G4DS91olZNPX5tSNYNqOQaiolF8qJ\nBbp4U/sBRKI5xHuAAOQ9jMA4SDB4XRlQvM0Zd8fxQmQgaOtVCDBU7YX8DeLLCq37\nx0bdCXiLpe1+/f/lpNTeq+ccR0IcKu9wpmzIDzDCpJULpHIJkqlrheXHpI+GaRwO\nHur4SwM8iGBgDCAkDv+bKDMMPov2Asgav3j+zrerdS4veXo2gXgPXm1QRMCgFiZM\nCXSN+KoRs3ZsA2f0YmxHp2XnVB0SMhzi1wsOkIX7U0s41jwVlXxmSQzOGTMJ1JoL\n1rgn83vSOaipp7+BF+uXhuevQLYgkzXPh9Qh2tf5/onuwz4SOnzp44gGiGqlTewM\nimwWCwO9uphUx4MQpdaU/AbvIErzQYbf0XYF7UJp03kV24RYSpGMtO2zWlLux9yM\nk4rp3Yn0mPgJzEPPlaXUIeGXBjKOguaja5pF+v2aqm2jUrc3e99eRpoiZ5DCmwBd\nQwQ8VpWXaRPVqTGO7F8kxGXbNTh5eVwC4cVEkkDUf4BWKj2h63j8owYcNY4W5pYm\nqDM8NqlKmJIknHEsclDl3RhuPJuGzEflUXQpbRx1H3ekS7A4t8EpC9lvuPbmTdqS\n1N+vGrPtTRtfDPCbElh/\n=uGyT\n-----END PGP SIGNATURE-----",
        "payload": "tree 7c2d1e9e5e70fc82f266b9c49d90c026fda4b9be\nparent e99f0d7ad443ff72087c6f80e9fab65cace0bf19\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1485821369 +0100\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1485821369 +0100\n\nContrib: Add jtimon pgp keys for commit sigs and future gitian builds\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/178454dde93ffa55343c17fcc6414f1f982f71e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/178454dde93ffa55343c17fcc6414f1f982f71e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/178454dde93ffa55343c17fcc6414f1f982f71e3/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e99f0d7ad443ff72087c6f80e9fab65cace0bf19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e99f0d7ad443ff72087c6f80e9fab65cace0bf19",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e99f0d7ad443ff72087c6f80e9fab65cace0bf19"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": [
      {
        "sha": "88d0de1503bb6a6bed7710b68b5526e85a855812",
        "filename": "contrib/gitian-keys/jtimon-key.pgp",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/178454dde93ffa55343c17fcc6414f1f982f71e3/contrib/gitian-keys/jtimon-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/178454dde93ffa55343c17fcc6414f1f982f71e3/contrib/gitian-keys/jtimon-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/jtimon-key.pgp?ref=178454dde93ffa55343c17fcc6414f1f982f71e3"
      }
    ]
  },
  {
    "sha": "d45955fa0992639d6c9856a73c5f7599cc14f811",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNDU5NTVmYTA5OTI2MzlkNmM5ODU2YTczYzVmNzU5OWNjMTRmODEx",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-01-24T01:32:52Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-01-31T22:20:26Z"
      },
      "message": "Net: CConnman: Make some methods const",
      "tree": {
        "sha": "a0a9863ae62314e35fe33f572cda41b9cdfc0d13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a0a9863ae62314e35fe33f572cda41b9cdfc0d13"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d45955fa0992639d6c9856a73c5f7599cc14f811",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYkQ2qAAoJEIhmwY6hyUSiz9AP+wbkpExJs9XQR4JqJGVJFwux\n/6Eq7cmu+Rd2qa4KLcBDOWl/Z/DNO439a6Y3M30K+yKmEPmrdQ7gMbXePQQ8XtLe\n+lX7vBlUnOUSVfUPOWhNEaV780J7dLmP/n1hxP+V0X0rvnr5q8D2Oy6u57tA0ghT\nUnOjjyzCG8ZH3HZ+KSLxuo21VrNA4AlwR+U+uao7iKaOMzUViI782KTkunbf3I6O\nrKMbJnelG5uJh2+MwBhb6HNdGGlQTiDUPkm74kjCwyaSIXpu1rqzVBz/B2xdg+x5\ngh2xsCevAg6g99BnUhGKoNNT/vIgVB/l4dcTJpEPIsse0Z7CVzVvTvWMf0tYf6zL\nxuz7HoONYPzrYjmI5I/H7FF6murvxAV5RpfvD0Xxlgxzugh4Lq93jJhwTiPea7Ub\nWR0RRL6BhEFHS+ojhnMNPKhnGH5zLA+zPeF/wYXudPCUXHQknzZsXqW8hm7bIXeC\nDbmQARk+A9M8RE61fKTzBbjalB2Lv3Gg95RoNOgzGWrfD2953PtbfbHA8DTSpbXK\nGr99lOkC1Gv+bkWWecDghxlGrR2cYYn/j/KcAApNpOZBdhGyiWJ2L0HA92U9sXBY\nvX0ISqMazw8Fbvf1smTtJM5RQmuSJB4yWWYIVaMLAS5pLYAkLYr90lt3xjGKi7b6\nclnXE8CuQ6c9eA4FujpO\n=Onlg\n-----END PGP SIGNATURE-----",
        "payload": "tree a0a9863ae62314e35fe33f572cda41b9cdfc0d13\nparent e99f0d7ad443ff72087c6f80e9fab65cace0bf19\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1485221572 +0100\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1485901226 +0100\n\nNet: CConnman: Make some methods const\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d45955fa0992639d6c9856a73c5f7599cc14f811",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d45955fa0992639d6c9856a73c5f7599cc14f811",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d45955fa0992639d6c9856a73c5f7599cc14f811/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e99f0d7ad443ff72087c6f80e9fab65cace0bf19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e99f0d7ad443ff72087c6f80e9fab65cace0bf19",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e99f0d7ad443ff72087c6f80e9fab65cace0bf19"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "5a5d94cd118d62ab5e0000243a47e18dd4171dc9",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d45955fa0992639d6c9856a73c5f7599cc14f811/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d45955fa0992639d6c9856a73c5f7599cc14f811/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=d45955fa0992639d6c9856a73c5f7599cc14f811",
        "patch": "@@ -754,7 +754,7 @@ const uint256& CNetMessage::GetMessageHash() const\n \n \n // requires LOCK(cs_vSend)\n-size_t CConnman::SocketSendData(CNode *pnode)\n+size_t CConnman::SocketSendData(CNode *pnode) const\n {\n     auto it = pnode->vSendMsg.begin();\n     size_t nSentSize = 0;\n@@ -2687,12 +2687,12 @@ int64_t PoissonNextSend(int64_t nNow, int average_interval_seconds) {\n     return nNow + (int64_t)(log1p(GetRand(1ULL << 48) * -0.0000000000000035527136788 /* -1/2^48 */) * average_interval_seconds * -1000000.0 + 0.5);\n }\n \n-CSipHasher CConnman::GetDeterministicRandomizer(uint64_t id)\n+CSipHasher CConnman::GetDeterministicRandomizer(uint64_t id) const\n {\n     return CSipHasher(nSeed0, nSeed1).Write(id);\n }\n \n-uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad)\n+uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const\n {\n     std::vector<unsigned char> vchNetGroup(ad.GetGroup());\n "
      },
      {
        "sha": "6228f7b50840954ea2999fae84d4619f1a5a5504",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d45955fa0992639d6c9856a73c5f7599cc14f811/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d45955fa0992639d6c9856a73c5f7599cc14f811/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=d45955fa0992639d6c9856a73c5f7599cc14f811",
        "patch": "@@ -321,7 +321,7 @@ class CConnman\n     int GetBestHeight() const;\n \n     /** Get a unique deterministic randomizer. */\n-    CSipHasher GetDeterministicRandomizer(uint64_t id);\n+    CSipHasher GetDeterministicRandomizer(uint64_t id) const;\n \n     unsigned int GetReceiveFloodSize() const;\n \n@@ -342,7 +342,7 @@ class CConnman\n     void ThreadSocketHandler();\n     void ThreadDNSAddressSeed();\n \n-    uint64_t CalculateKeyedNetGroup(const CAddress& ad);\n+    uint64_t CalculateKeyedNetGroup(const CAddress& ad) const;\n \n     CNode* FindNode(const CNetAddr& ip);\n     CNode* FindNode(const CSubNet& subNet);\n@@ -357,7 +357,7 @@ class CConnman\n \n     NodeId GetNewNodeId();\n \n-    size_t SocketSendData(CNode *pnode);\n+    size_t SocketSendData(CNode *pnode) const;\n     //!check is the banlist has unwritten changes\n     bool BannedSetIsDirty();\n     //!set the \"dirty\" flag for the banlist"
      }
    ]
  },
  {
    "sha": "fc7f2ffad481870e62ab2f798f941577983c5a39",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYzdmMmZmYWQ0ODE4NzBlNjJhYjJmNzk4Zjk0MTU3Nzk4M2M1YTM5",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-01-31T21:57:40Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-01-31T22:29:28Z"
      },
      "message": "Net: Make CNetMsgMaker more const",
      "tree": {
        "sha": "e259ea9e8005549726a713339046281f35086bb4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e259ea9e8005549726a713339046281f35086bb4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc7f2ffad481870e62ab2f798f941577983c5a39",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYkQ/LAAoJEIhmwY6hyUSiI+gQAI2MfSdlCakRNNM3oFsxt35q\nvpucb0oPngt1WdDksekT5SNwuoURAvnXtU47v/op+4/N5ZpvM/kBnSqxadv3tEtR\nPGKTGLqqJGd4Hl9QVoqjbEcFdXTbllKq2vsrLsnMV6If3qixP+eQV0XSfgrUoXvk\nEQfCo/s0wbbzUkKQ67oG+pbKgEbRAa1LS/ty4JciEhvN9iAsE05josG1KIzOeo43\no8BmLiVgIE1aqePwNIo9tM3nFvX3K5rF3GhG/E5d8zIMtPLXR0aL30N2F8Xwsbns\nhaBx88f7WKFxbh7bodX6J+7XQzRBAfx07kTxFDugR+3574IZdzC5Medj3YhfjdWG\nEZ7vDcXDiCujg50osRkNsM3zlcczKkoKZJkp1Ps2sCgjER1jusKQjWtI8JTH0FaT\n/bX/GbyihpEAC6uZvpmDSTJU/R5j7+o3n44x5NnMf/xzwwE6owXg0Fy6P0I13glU\nMEqOzTaeYHbKO05ZdidtapSe9KXTOjG5YQXvV+9qsYQ1fpQcOhjBntWZtSoNI+hW\nN+StVlfUKXPPNNGWibCOlWrRIc7LO5/8Njd2Djs6hLFlvICtw6/yr8OwUQ8HesOL\nzetJCW8lQguET5k4jHZ6lJ7MHqwJ+0vOhIUBaPost4fhZuN+V5Fextef5wyq9MyN\nJe50D+IQvjf1zKwWlQGK\n=yZUb\n-----END PGP SIGNATURE-----",
        "payload": "tree e259ea9e8005549726a713339046281f35086bb4\nparent d45955fa0992639d6c9856a73c5f7599cc14f811\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1485899860 +0100\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1485901768 +0100\n\nNet: Make CNetMsgMaker more const\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc7f2ffad481870e62ab2f798f941577983c5a39",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fc7f2ffad481870e62ab2f798f941577983c5a39",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc7f2ffad481870e62ab2f798f941577983c5a39/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d45955fa0992639d6c9856a73c5f7599cc14f811",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d45955fa0992639d6c9856a73c5f7599cc14f811",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d45955fa0992639d6c9856a73c5f7599cc14f811"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "99577933810ab636ce623133aa24ff38a86d7dec",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc7f2ffad481870e62ab2f798f941577983c5a39/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc7f2ffad481870e62ab2f798f941577983c5a39/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=fc7f2ffad481870e62ab2f798f941577983c5a39",
        "patch": "@@ -778,7 +778,7 @@ static uint256 most_recent_block_hash;\n \n void PeerLogicValidation::NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) {\n     std::shared_ptr<const CBlockHeaderAndShortTxIDs> pcmpctblock = std::make_shared<const CBlockHeaderAndShortTxIDs> (*pblock, true);\n-    CNetMsgMaker msgMaker(PROTOCOL_VERSION);\n+    const CNetMsgMaker msgMaker(PROTOCOL_VERSION);\n \n     LOCK(cs_main);\n \n@@ -960,7 +960,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n {\n     std::deque<CInv>::iterator it = pfrom->vRecvGetData.begin();\n     std::vector<CInv> vNotFound;\n-    CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n+    const CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n     LOCK(cs_main);\n \n     while (it != pfrom->vRecvGetData.end()) {\n@@ -1153,7 +1153,7 @@ inline void static SendBlockTransactions(const CBlock& block, const BlockTransac\n         resp.txn[i] = block.vtx[req.indexes[i]];\n     }\n     LOCK(cs_main);\n-    CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n+    const CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n     int nSendFlags = State(pfrom->GetId())->fWantsCmpctWitness ? 0 : SERIALIZE_TRANSACTION_NO_WITNESS;\n     connman.PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::BLOCKTXN, resp));\n }\n@@ -1346,7 +1346,7 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n     }\n \n     // At this point, the outgoing message serialization version can't change.\n-    CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n+    const CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n \n     if (strCommand == NetMsgType::VERACK)\n     {\n@@ -2721,7 +2721,7 @@ bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsg\n             return true;\n \n         // If we get here, the outgoing message serialization version is set and can't change.\n-        CNetMsgMaker msgMaker(pto->GetSendVersion());\n+        const CNetMsgMaker msgMaker(pto->GetSendVersion());\n \n         //\n         // Message: ping"
      },
      {
        "sha": "8e8a6e4a026ee824795e2af21c3eec1c7e761299",
        "filename": "src/netmessagemaker.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc7f2ffad481870e62ab2f798f941577983c5a39/src/netmessagemaker.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc7f2ffad481870e62ab2f798f941577983c5a39/src/netmessagemaker.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netmessagemaker.h?ref=fc7f2ffad481870e62ab2f798f941577983c5a39",
        "patch": "@@ -15,7 +15,7 @@ class CNetMsgMaker\n     CNetMsgMaker(int nVersionIn) : nVersion(nVersionIn){}\n \n     template <typename... Args>\n-    CSerializedNetMsg Make(int nFlags, std::string sCommand, Args&&... args)\n+    CSerializedNetMsg Make(int nFlags, std::string sCommand, Args&&... args) const\n     {\n         CSerializedNetMsg msg;\n         msg.command = std::move(sCommand);\n@@ -24,7 +24,7 @@ class CNetMsgMaker\n     }\n \n     template <typename... Args>\n-    CSerializedNetMsg Make(std::string sCommand, Args&&... args)\n+    CSerializedNetMsg Make(std::string sCommand, Args&&... args) const\n     {\n         return Make(0, std::move(sCommand), std::forward<Args>(args)...);\n     }"
      }
    ]
  },
  {
    "sha": "0729102f99241b9716456ad40bf778c09f650b1b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNzI5MTAyZjk5MjQxYjk3MTY0NTZhZDQwYmY3NzhjMDlmNjUwYjFi",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-01-31T22:07:20Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-01-31T22:45:47Z"
      },
      "message": "Net: pass interruptMsgProc as const where possible",
      "tree": {
        "sha": "75e5d3dae5e83419f3a9eaa97c12797f29076bbd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/75e5d3dae5e83419f3a9eaa97c12797f29076bbd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0729102f99241b9716456ad40bf778c09f650b1b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYkROdAAoJEIhmwY6hyUSiMD8P/ilxxESMM/MsATDwM3xJIf5T\nYbW2Pm25bIydq8pbEUFizO/Ls4CTEZzeSJwXkC15PxAvPjLAfcg7v+TzPclMLQYB\n4XwMo9nwUlZ7+NMJ/TAjEhI2UA3vds2+Hc17v0o7/bK/wms1y8I0TJeRBJwx/eQh\n2X9nR/Mj+a2eWHpPgRvQSCrc1vDfTmeNZCAAN18brigpheklSCbxWpkniBp54Sf3\nzkvTICPI2KKGW6V1TDd9NXtUv98Fk9DMfDO1h7owMQ/+p7TtlK9AIzQe7hJefgNe\n9hVuPFRVi0ZwwoXV5tK/stKzXdnNH2kxSnCF/awOoLJ9lR2xyhlTNwLEVJG3LHXQ\nZ04Vp2IRSVOqfmSqmCH9EbJpZzJh4GMR5TlBqMlk8cgAdxdQblMHks8GLPaR57P0\nGgVCJjlUJm24PG6n4qnvTeGNSarb51vlkANLUBzMuCrwIUZPV4elMQCKvFRjrz2F\nh6jiun3iHFhygKE/2p0W49BS3M9jr5NfLrioRtH3aO8t6UnNeONMKyigQiKTC8tz\nGJ/hTKxmCuxNpREmkD2dxF9rSSZkX8haV/vflpHe+04Nm19bSmWjJMdFuqICQ6h4\nLzKUEYSMbA53llgMuZpq5oFqvKejAsYCBpfTLn5WYQWtqQQCi307Q+QEe9dfmP4V\n6Etejir6ya9UMOWqIojI\n=XAnl\n-----END PGP SIGNATURE-----",
        "payload": "tree 75e5d3dae5e83419f3a9eaa97c12797f29076bbd\nparent fc7f2ffad481870e62ab2f798f941577983c5a39\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1485900440 +0100\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1485902747 +0100\n\nNet: pass interruptMsgProc as const where possible\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0729102f99241b9716456ad40bf778c09f650b1b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0729102f99241b9716456ad40bf778c09f650b1b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0729102f99241b9716456ad40bf778c09f650b1b/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fc7f2ffad481870e62ab2f798f941577983c5a39",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc7f2ffad481870e62ab2f798f941577983c5a39",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fc7f2ffad481870e62ab2f798f941577983c5a39"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "1cc86a662684d3845ed3ef4a9b10b2c237702ec8",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0729102f99241b9716456ad40bf778c09f650b1b/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0729102f99241b9716456ad40bf778c09f650b1b/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=0729102f99241b9716456ad40bf778c09f650b1b",
        "patch": "@@ -956,7 +956,7 @@ static void RelayAddress(const CAddress& addr, bool fReachable, CConnman& connma\n     connman.ForEachNodeThen(std::move(sortfunc), std::move(pushfunc));\n }\n \n-void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParams, CConnman& connman, std::atomic<bool>& interruptMsgProc)\n+void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParams, CConnman& connman, const std::atomic<bool>& interruptMsgProc)\n {\n     std::deque<CInv>::iterator it = pfrom->vRecvGetData.begin();\n     std::vector<CInv> vNotFound;\n@@ -1158,7 +1158,7 @@ inline void static SendBlockTransactions(const CBlock& block, const BlockTransac\n     connman.PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::BLOCKTXN, resp));\n }\n \n-bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman& connman, std::atomic<bool>& interruptMsgProc)\n+bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman& connman, const std::atomic<bool>& interruptMsgProc)\n {\n     LogPrint(\"net\", \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->id);\n     if (IsArgSet(\"-dropmessagestest\") && GetRand(GetArg(\"-dropmessagestest\", 0)) == 0)\n@@ -2579,7 +2579,7 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n     return true;\n }\n \n-bool ProcessMessages(CNode* pfrom, CConnman& connman, std::atomic<bool>& interruptMsgProc)\n+bool ProcessMessages(CNode* pfrom, CConnman& connman, const std::atomic<bool>& interruptMsgProc)\n {\n     const CChainParams& chainparams = Params();\n     //\n@@ -2712,7 +2712,7 @@ class CompareInvMempoolOrder\n     }\n };\n \n-bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsgProc)\n+bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interruptMsgProc)\n {\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     {"
      },
      {
        "sha": "9e3f1b715667a9216d69cbccaab59bd906bf21b3",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0729102f99241b9716456ad40bf778c09f650b1b/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0729102f99241b9716456ad40bf778c09f650b1b/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=0729102f99241b9716456ad40bf778c09f650b1b",
        "patch": "@@ -49,7 +49,7 @@ bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats);\n void Misbehaving(NodeId nodeid, int howmuch);\n \n /** Process protocol messages received from a given node */\n-bool ProcessMessages(CNode* pfrom, CConnman& connman, std::atomic<bool>& interrupt);\n+bool ProcessMessages(CNode* pfrom, CConnman& connman, const std::atomic<bool>& interrupt);\n /**\n  * Send queued protocol messages to be sent to a give node.\n  *\n@@ -58,6 +58,6 @@ bool ProcessMessages(CNode* pfrom, CConnman& connman, std::atomic<bool>& interru\n  * @param[in]   interrupt       Interrupt condition for processing threads\n  * @return                      True if there is more work to be done\n  */\n-bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interrupt);\n+bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interrupt);\n \n #endif // BITCOIN_NET_PROCESSING_H"
      }
    ]
  },
  {
    "sha": "f62659448cdfd752447117fb73ab5328fbe3e41d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNjI2NTk0NDhjZGZkNzUyNDQ3MTE3ZmI3M2FiNTMyOGZiZTNlNDFk",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2017-01-26T17:59:32Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-02-01T01:03:45Z"
      },
      "message": "rpc: bumpfee: use correct maximum signed tx size for fee calculation\n\nMore accurate than simply adding one byte per input, and properly handles the\ncase where the original transaction happened to have very small signatures",
      "tree": {
        "sha": "0f255ce9d302ff9ae07368cb0c278ce60583a063",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0f255ce9d302ff9ae07368cb0c278ce60583a063"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f62659448cdfd752447117fb73ab5328fbe3e41d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f62659448cdfd752447117fb73ab5328fbe3e41d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f62659448cdfd752447117fb73ab5328fbe3e41d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f62659448cdfd752447117fb73ab5328fbe3e41d/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d625b907a1800a5a30c4ad285641c7418d2c28c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d625b907a1800a5a30c4ad285641c7418d2c28c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d625b907a1800a5a30c4ad285641c7418d2c28c1"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 35,
      "deletions": 4
    },
    "files": [
      {
        "sha": "4f763fd6e2f3a2a4cb741b2548ad6028fc7ebac7",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 4,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f62659448cdfd752447117fb73ab5328fbe3e41d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f62659448cdfd752447117fb73ab5328fbe3e41d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=f62659448cdfd752447117fb73ab5328fbe3e41d",
        "patch": "@@ -2664,6 +2664,33 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+// Calculate the size of the transaction assuming all signatures are max size\n+// Use DummySignatureCreator, which inserts 72 byte signatures everywhere.\n+// TODO: re-use this in CWallet::CreateTransaction (right now\n+// CreateTransaction uses the constructed dummy-signed tx to do a priority\n+// calculation, but we should be able to refactor after priority is removed).\n+// NOTE: this requires that all inputs must be in mapWallet (eg the tx should\n+// be IsAllFromMe).\n+int64_t CalculateMaximumSignedTxSize(const CTransaction &tx)\n+{\n+    CMutableTransaction txNew(tx);\n+    std::vector<pair<CWalletTx *, unsigned int>> vCoins;\n+    // Look up the inputs.  We should have already checked that this transaction\n+    // IsAllFromMe(ISMINE_SPENDABLE), so every input should already be in our\n+    // wallet, with a valid index into the vout array.\n+    for (auto& input : tx.vin) {\n+        const auto mi = pwalletMain->mapWallet.find(input.prevout.hash);\n+        assert(mi != pwalletMain->mapWallet.end() && input.prevout.n < mi->second.tx->vout.size());\n+        vCoins.emplace_back(make_pair(&(mi->second), input.prevout.n));\n+    }\n+    if (!pwalletMain->DummySignTx(txNew, vCoins)) {\n+        // This should never happen, because IsAllFromMe(ISMINE_SPENDABLE)\n+        // implies that we can sign for every input.\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that cannot be signed\");\n+    }\n+    return GetVirtualTransactionSize(txNew);\n+}\n+\n UniValue bumpfee(const JSONRPCRequest& request)\n {\n     if (!EnsureWalletIsAvailable(request.fHelp)) {\n@@ -2769,9 +2796,9 @@ UniValue bumpfee(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n     }\n \n-    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    // Calculate the expected size of the new transaction.\n     int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n-    const int64_t maxNewTxSize = txSize + wtx.tx->vin.size();\n+    const int64_t maxNewTxSize = CalculateMaximumSignedTxSize(*wtx.tx);\n \n     // optional parameters\n     bool specifiedConfirmTarget = false;\n@@ -2845,8 +2872,12 @@ UniValue bumpfee(const JSONRPCRequest& request)\n         nNewFeeRate = CFeeRate(nNewFee, maxNewTxSize);\n \n         // New fee rate must be at least old rate + minimum incremental relay rate\n-        if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + walletIncrementalRelayFee.GetFeePerK()) {\n-            nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + walletIncrementalRelayFee.GetFeePerK());\n+        // walletIncrementalRelayFee.GetFeePerK() should be exact, because it's initialized\n+        // in that unit (fee per kb).\n+        // However, nOldFeeRate is a calculated value from the tx fee/size, so\n+        // add 1 satoshi to the result, because it may have been rounded down.\n+        if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + 1 + walletIncrementalRelayFee.GetFeePerK()) {\n+            nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + 1 + walletIncrementalRelayFee.GetFeePerK());\n             nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n         }\n     }"
      }
    ]
  },
  {
    "sha": "9522b53a91f28032c34b94662d50b000534708ce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NTIyYjUzYTkxZjI4MDMyYzM0Yjk0NjYyZDUwYjAwMDUzNDcwOGNl",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2017-01-26T17:57:42Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-02-01T01:03:45Z"
      },
      "message": "rpc: bumpfee: handle errors more gracefully",
      "tree": {
        "sha": "b9fb2476ca21c7d62366eab57aef7cdf5ec791a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b9fb2476ca21c7d62366eab57aef7cdf5ec791a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9522b53a91f28032c34b94662d50b000534708ce",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9522b53a91f28032c34b94662d50b000534708ce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9522b53a91f28032c34b94662d50b000534708ce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9522b53a91f28032c34b94662d50b000534708ce/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f62659448cdfd752447117fb73ab5328fbe3e41d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f62659448cdfd752447117fb73ab5328fbe3e41d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f62659448cdfd752447117fb73ab5328fbe3e41d"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 12,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8b135b0e0f7e3bb5836feb88b57e13505ac86d4c",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 2,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9522b53a91f28032c34b94662d50b000534708ce/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9522b53a91f28032c34b94662d50b000534708ce/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=9522b53a91f28032c34b94662d50b000534708ce",
        "patch": "@@ -2733,6 +2733,7 @@ UniValue bumpfee(const JSONRPCRequest& request)\n             \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n             \"  \\\"origfee\\\":  n,         (numeric) Fee of the replaced transaction\\n\"\n             \"  \\\"fee\\\":      n,         (numeric) Fee of the new transaction\\n\"\n+            \"  \\\"errors\\\":  [ str... ] (json array of strings) Errors encountered during processing (may be empty)\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n@@ -2945,23 +2946,32 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     CWalletTx wtxBumped(pwalletMain, MakeTransactionRef(std::move(tx)));\n     wtxBumped.mapValue[\"replaces_txid\"] = hash.ToString();\n     CValidationState state;\n-    if (!pwalletMain->CommitTransaction(wtxBumped, reservekey, g_connman.get(), state) || !state.IsValid()) {\n+    if (!pwalletMain->CommitTransaction(wtxBumped, reservekey, g_connman.get(), state)) {\n+        // NOTE: CommitTransaction never returns false, so this should never happen.\n         throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Error: The transaction was rejected! Reason given: %s\", state.GetRejectReason()));\n     }\n \n+    UniValue vErrors(UniValue::VARR);\n+    if (state.IsInvalid()) {\n+        // This can happen if the mempool rejected the transaction.  Report\n+        // what happened in the \"errors\" response.\n+        vErrors.push_back(strprintf(\"Error: The transaction was rejected: %s\", FormatStateMessage(state)));\n+    }\n+\n     // mark the original tx as bumped\n     if (!pwalletMain->MarkReplaced(wtx.GetHash(), wtxBumped.GetHash())) {\n         // TODO: see if JSON-RPC has a standard way of returning a response\n         // along with an exception. It would be good to return information about\n         // wtxBumped to the caller even if marking the original transaction\n         // replaced does not succeed for some reason.\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Created new bumpfee transaction but could not mark the original transaction as replaced.\");\n+        vErrors.push_back(\"Error: Created new bumpfee transaction but could not mark the original transaction as replaced.\");\n     }\n \n     UniValue result(UniValue::VOBJ);\n     result.push_back(Pair(\"txid\", wtxBumped.GetHash().GetHex()));\n     result.push_back(Pair(\"origfee\", ValueFromAmount(nOldFee)));\n     result.push_back(Pair(\"fee\", ValueFromAmount(nNewFee)));\n+    result.push_back(Pair(\"errors\", vErrors));\n \n     return result;\n }"
      }
    ]
  },
  {
    "sha": "1581ecbc33edd9d6257e50b11d8854fbccaf8ad8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNTgxZWNiYzMzZWRkOWQ2MjU3ZTUwYjExZDg4NTRmYmNjYWY4YWQ4",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-01-30T22:57:27Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-01T02:03:14Z"
      },
      "message": "Use configparser in rpc-tests.py\n\nRemove the use of wildcard imports in rpc-tests.py and replace with\nconfigparser.",
      "tree": {
        "sha": "630822a42a8ccb6798efed9e3beeca675e265ba9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/630822a42a8ccb6798efed9e3beeca675e265ba9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1581ecbc33edd9d6257e50b11d8854fbccaf8ad8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1581ecbc33edd9d6257e50b11d8854fbccaf8ad8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1581ecbc33edd9d6257e50b11d8854fbccaf8ad8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1581ecbc33edd9d6257e50b11d8854fbccaf8ad8/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 41,
      "deletions": 36
    },
    "files": [
      {
        "sha": "1ee2dfb734ede01f76a6f192be0441a372bea756",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1581ecbc33edd9d6257e50b11d8854fbccaf8ad8/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1581ecbc33edd9d6257e50b11d8854fbccaf8ad8/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=1581ecbc33edd9d6257e50b11d8854fbccaf8ad8",
        "patch": "@@ -227,9 +227,6 @@ EXTRA_DIST = $(top_srcdir)/share/genbuild.sh qa/pull-tester/rpc-tests.py qa/rpc-\n \n CLEANFILES = $(OSX_DMG) $(BITCOIN_WIN_INSTALLER)\n \n-# This file is problematic for out-of-tree builds if it exists.\n-DISTCLEANFILES = qa/pull-tester/tests_config.pyc\n-\n .INTERMEDIATE: $(COVERAGE_INFO)\n \n DISTCHECK_CONFIGURE_FLAGS = --enable-man"
      },
      {
        "sha": "1452ff74c0c644e1d7ac52209cf1cbbc5d7a8d16",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1581ecbc33edd9d6257e50b11d8854fbccaf8ad8/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1581ecbc33edd9d6257e50b11d8854fbccaf8ad8/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=1581ecbc33edd9d6257e50b11d8854fbccaf8ad8",
        "patch": "@@ -1087,7 +1087,7 @@ AC_SUBST(ZMQ_LIBS)\n AC_SUBST(PROTOBUF_LIBS)\n AC_SUBST(QR_LIBS)\n AC_CONFIG_FILES([Makefile src/Makefile doc/man/Makefile share/setup.nsi share/qt/Info.plist src/test/buildenv.py])\n-AC_CONFIG_FILES([qa/pull-tester/tests_config.py],[chmod +x qa/pull-tester/tests_config.py])\n+AC_CONFIG_FILES([qa/pull-tester/tests_config.ini],[chmod +x qa/pull-tester/tests_config.ini])\n AC_CONFIG_FILES([contrib/devtools/split-debug.sh],[chmod +x contrib/devtools/split-debug.sh])\n AC_CONFIG_LINKS([qa/pull-tester/rpc-tests.py:qa/pull-tester/rpc-tests.py])\n "
      },
      {
        "sha": "52157474074cbbfb8a75dea870304a7cf5f9fbe1",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 15,
        "deletions": 18,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1581ecbc33edd9d6257e50b11d8854fbccaf8ad8/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1581ecbc33edd9d6257e50b11d8854fbccaf8ad8/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=1581ecbc33edd9d6257e50b11d8854fbccaf8ad8",
        "patch": "@@ -21,6 +21,7 @@\n \n \"\"\"\n \n+import configparser\n import os\n import time\n import shutil\n@@ -29,26 +30,22 @@\n import tempfile\n import re\n \n-sys.path.append(\"qa/pull-tester/\")\n-from tests_config import *\n-\n BOLD = (\"\",\"\")\n if os.name == 'posix':\n     # primitive formatting on supported\n     # terminal via ANSI escape sequences:\n     BOLD = ('\\033[0m', '\\033[1m')\n \n-RPC_TESTS_DIR = SRCDIR + '/qa/rpc-tests/'\n+# Read config generated by configure.\n+config = configparser.ConfigParser()\n+config.read_file(open(os.path.dirname(__file__) + \"/tests_config.ini\"))\n+\n+ENABLE_WALLET = config[\"components\"][\"ENABLE_WALLET\"] == \"True\"\n+ENABLE_UTILS = config[\"components\"][\"ENABLE_UTILS\"] == \"True\"\n+ENABLE_BITCOIND = config[\"components\"][\"ENABLE_BITCOIND\"] == \"True\"\n+ENABLE_ZMQ = config[\"components\"][\"ENABLE_ZMQ\"] == \"True\"\n \n-#If imported values are not defined then set to zero (or disabled)\n-if 'ENABLE_WALLET' not in vars():\n-    ENABLE_WALLET=0\n-if 'ENABLE_BITCOIND' not in vars():\n-    ENABLE_BITCOIND=0\n-if 'ENABLE_UTILS' not in vars():\n-    ENABLE_UTILS=0\n-if 'ENABLE_ZMQ' not in vars():\n-    ENABLE_ZMQ=0\n+RPC_TESTS_DIR = config[\"environment\"][\"SRCDIR\"] + '/qa/rpc-tests/'\n \n ENABLE_COVERAGE=0\n \n@@ -76,15 +73,15 @@\n \n #Set env vars\n if \"BITCOIND\" not in os.environ:\n-    os.environ[\"BITCOIND\"] = BUILDDIR + '/src/bitcoind' + EXEEXT\n+    os.environ[\"BITCOIND\"] = config[\"environment\"][\"BUILDDIR\"] + '/src/bitcoind' + config[\"environment\"][\"EXEEXT\"]\n \n-if EXEEXT == \".exe\" and \"-win\" not in opts:\n+if config[\"environment\"][\"EXEEXT\"] == \".exe\" and \"-win\" not in opts:\n     # https://github.com/bitcoin/bitcoin/commit/d52802551752140cf41f0d9a225a43e84404d3e9\n     # https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-136646964\n     print(\"Win tests currently disabled by default.  Use -win option to enable\")\n     sys.exit(0)\n \n-if not (ENABLE_WALLET == 1 and ENABLE_UTILS == 1 and ENABLE_BITCOIND == 1):\n+if not (ENABLE_WALLET and ENABLE_UTILS and ENABLE_BITCOIND):\n     print(\"No rpc tests to run. Wallet, utils, and bitcoind must all be enabled\")\n     sys.exit(0)\n \n@@ -209,8 +206,8 @@ def runtests():\n     if ENABLE_COVERAGE:\n         coverage = RPCCoverage()\n         print(\"Initializing coverage directory at %s\\n\" % coverage.dir)\n-    flags = [\"--srcdir=%s/src\" % BUILDDIR] + passon_args\n-    flags.append(\"--cachedir=%s/qa/cache\" % BUILDDIR)\n+    flags = [\"--srcdir=%s/src\" % config[\"environment\"][\"BUILDDIR\"]] + passon_args\n+    flags.append(\"--cachedir=%s/qa/cache\" % config[\"environment\"][\"BUILDDIR\"])\n     if coverage:\n         flags.append(coverage.flag)\n "
      },
      {
        "sha": "8317caaeb514a3ad47d0e238a05a4773d92173aa",
        "filename": "qa/pull-tester/tests_config.ini.in",
        "status": "added",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1581ecbc33edd9d6257e50b11d8854fbccaf8ad8/qa/pull-tester/tests_config.ini.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1581ecbc33edd9d6257e50b11d8854fbccaf8ad8/qa/pull-tester/tests_config.ini.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/tests_config.ini.in?ref=1581ecbc33edd9d6257e50b11d8854fbccaf8ad8",
        "patch": "@@ -0,0 +1,25 @@\n+# Copyright (c) 2013-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# These environment variables are set by the build process and read by\n+# rpc-tests.py\n+\n+[DEFAULT]\n+# Provides default values for whether different components are enabled\n+ENABLE_WALLET=False\n+ENABLE_UTILS=False\n+ENABLE_BITCOIND=False\n+ENABLE_ZMQ=False\n+\n+[environment]\n+SRCDIR=@abs_top_srcdir@\n+BUILDDIR=@abs_top_builddir@\n+EXEEXT=@EXEEXT@\n+\n+[components]\n+# Which components are enabled. These are commented out by `configure` if they were disabled when running config.\n+@ENABLE_WALLET_TRUE@ENABLE_WALLET=True\n+@BUILD_BITCOIN_UTILS_TRUE@ENABLE_UTILS=True\n+@BUILD_BITCOIND_TRUE@ENABLE_BITCOIND=True\n+@ENABLE_ZMQ_TRUE@ENABLE_ZMQ=True"
      },
      {
        "sha": "a0d0a3d98a86becd64c699fa8bb67bb2ae79629c",
        "filename": "qa/pull-tester/tests_config.py.in",
        "status": "removed",
        "additions": 0,
        "deletions": 14,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef/qa/pull-tester/tests_config.py.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef/qa/pull-tester/tests_config.py.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/tests_config.py.in?ref=a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef",
        "patch": "@@ -1,14 +0,0 @@\n-#!/usr/bin/env python3\n-# Copyright (c) 2013-2016 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-SRCDIR=\"@abs_top_srcdir@\"\n-BUILDDIR=\"@abs_top_builddir@\"\n-EXEEXT=\"@EXEEXT@\"\n-\n-# These will turn into comments if they were disabled when configuring.\n-@ENABLE_WALLET_TRUE@ENABLE_WALLET=1\n-@BUILD_BITCOIN_UTILS_TRUE@ENABLE_UTILS=1\n-@BUILD_BITCOIND_TRUE@ENABLE_BITCOIND=1\n-@ENABLE_ZMQ_TRUE@ENABLE_ZMQ=1"
      }
    ]
  },
  {
    "sha": "7bfb77045c4b06db3597c023de97411ed287e252",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YmZiNzcwNDVjNGIwNmRiMzU5N2MwMjNkZTk3NDExZWQyODdlMjUy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-01T07:41:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-01T07:42:53Z"
      },
      "message": "Merge #9640: Bumpfee: bugfixes for error handling and feerate calculation\n\n9522b53 rpc: bumpfee: handle errors more gracefully (Suhas Daftuar)\nf626594 rpc: bumpfee: use correct maximum signed tx size for fee calculation (Suhas Daftuar)\nd625b90 wallet: Refactor dummy signature signing for reusability (Suhas Daftuar)",
      "tree": {
        "sha": "b9fb2476ca21c7d62366eab57aef7cdf5ec791a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b9fb2476ca21c7d62366eab57aef7cdf5ec791a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7bfb77045c4b06db3597c023de97411ed287e252",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYkZF9AAoJEHSBCwEjRsmmFBEIAIbEaG0k973KJLuouy82AYCs\nKLOzmS18uwZFoQEApn73iT1xYMJs4z2XQ5zDOGEb5v6rWIP4jojIyuFxm/WSDk1m\ni0jSdXhdjdDriqnZjmTguw/LXFonLoz/GDlxXZZQ+EoJ2zAHZOqb2O/cm0af0Uyd\n8CbP5zFFiWUXNfCrfiQ1xbKlopCIzQmKsM5tH9fyKqcUCZscTpGoxFBPFT7bmFvx\nIIzTauxHpvXfAgEPJKVznSE4usqioVBh8YAx2eh1TTBGj+2UteEqCvmyleTeBc0u\nBcqrljUaNex8tTdcty+OPz3bWnQ0WYr/j9Z5AkB/PcSUz/AlYWH/dUo0UojqIWU=\n=JpIP\n-----END PGP SIGNATURE-----",
        "payload": "tree b9fb2476ca21c7d62366eab57aef7cdf5ec791a9\nparent e99f0d7ad443ff72087c6f80e9fab65cace0bf19\nparent 9522b53a91f28032c34b94662d50b000534708ce\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1485934881 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1485934973 +0100\n\nMerge #9640: Bumpfee: bugfixes for error handling and feerate calculation\n\n9522b53 rpc: bumpfee: handle errors more gracefully (Suhas Daftuar)\nf626594 rpc: bumpfee: use correct maximum signed tx size for fee calculation (Suhas Daftuar)\nd625b90 wallet: Refactor dummy signature signing for reusability (Suhas Daftuar)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bfb77045c4b06db3597c023de97411ed287e252",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7bfb77045c4b06db3597c023de97411ed287e252",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bfb77045c4b06db3597c023de97411ed287e252/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e99f0d7ad443ff72087c6f80e9fab65cace0bf19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e99f0d7ad443ff72087c6f80e9fab65cace0bf19",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e99f0d7ad443ff72087c6f80e9fab65cace0bf19"
      },
      {
        "sha": "9522b53a91f28032c34b94662d50b000534708ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9522b53a91f28032c34b94662d50b000534708ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9522b53a91f28032c34b94662d50b000534708ce"
      }
    ],
    "stats": {
      "total": 98,
      "additions": 77,
      "deletions": 21
    },
    "files": [
      {
        "sha": "8b135b0e0f7e3bb5836feb88b57e13505ac86d4c",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 6,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bfb77045c4b06db3597c023de97411ed287e252/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bfb77045c4b06db3597c023de97411ed287e252/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=7bfb77045c4b06db3597c023de97411ed287e252",
        "patch": "@@ -2664,6 +2664,33 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+// Calculate the size of the transaction assuming all signatures are max size\n+// Use DummySignatureCreator, which inserts 72 byte signatures everywhere.\n+// TODO: re-use this in CWallet::CreateTransaction (right now\n+// CreateTransaction uses the constructed dummy-signed tx to do a priority\n+// calculation, but we should be able to refactor after priority is removed).\n+// NOTE: this requires that all inputs must be in mapWallet (eg the tx should\n+// be IsAllFromMe).\n+int64_t CalculateMaximumSignedTxSize(const CTransaction &tx)\n+{\n+    CMutableTransaction txNew(tx);\n+    std::vector<pair<CWalletTx *, unsigned int>> vCoins;\n+    // Look up the inputs.  We should have already checked that this transaction\n+    // IsAllFromMe(ISMINE_SPENDABLE), so every input should already be in our\n+    // wallet, with a valid index into the vout array.\n+    for (auto& input : tx.vin) {\n+        const auto mi = pwalletMain->mapWallet.find(input.prevout.hash);\n+        assert(mi != pwalletMain->mapWallet.end() && input.prevout.n < mi->second.tx->vout.size());\n+        vCoins.emplace_back(make_pair(&(mi->second), input.prevout.n));\n+    }\n+    if (!pwalletMain->DummySignTx(txNew, vCoins)) {\n+        // This should never happen, because IsAllFromMe(ISMINE_SPENDABLE)\n+        // implies that we can sign for every input.\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that cannot be signed\");\n+    }\n+    return GetVirtualTransactionSize(txNew);\n+}\n+\n UniValue bumpfee(const JSONRPCRequest& request)\n {\n     if (!EnsureWalletIsAvailable(request.fHelp)) {\n@@ -2706,6 +2733,7 @@ UniValue bumpfee(const JSONRPCRequest& request)\n             \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n             \"  \\\"origfee\\\":  n,         (numeric) Fee of the replaced transaction\\n\"\n             \"  \\\"fee\\\":      n,         (numeric) Fee of the new transaction\\n\"\n+            \"  \\\"errors\\\":  [ str... ] (json array of strings) Errors encountered during processing (may be empty)\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n@@ -2769,9 +2797,9 @@ UniValue bumpfee(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n     }\n \n-    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    // Calculate the expected size of the new transaction.\n     int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n-    const int64_t maxNewTxSize = txSize + wtx.tx->vin.size();\n+    const int64_t maxNewTxSize = CalculateMaximumSignedTxSize(*wtx.tx);\n \n     // optional parameters\n     bool specifiedConfirmTarget = false;\n@@ -2845,8 +2873,12 @@ UniValue bumpfee(const JSONRPCRequest& request)\n         nNewFeeRate = CFeeRate(nNewFee, maxNewTxSize);\n \n         // New fee rate must be at least old rate + minimum incremental relay rate\n-        if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + walletIncrementalRelayFee.GetFeePerK()) {\n-            nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + walletIncrementalRelayFee.GetFeePerK());\n+        // walletIncrementalRelayFee.GetFeePerK() should be exact, because it's initialized\n+        // in that unit (fee per kb).\n+        // However, nOldFeeRate is a calculated value from the tx fee/size, so\n+        // add 1 satoshi to the result, because it may have been rounded down.\n+        if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + 1 + walletIncrementalRelayFee.GetFeePerK()) {\n+            nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + 1 + walletIncrementalRelayFee.GetFeePerK());\n             nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n         }\n     }\n@@ -2914,23 +2946,32 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     CWalletTx wtxBumped(pwalletMain, MakeTransactionRef(std::move(tx)));\n     wtxBumped.mapValue[\"replaces_txid\"] = hash.ToString();\n     CValidationState state;\n-    if (!pwalletMain->CommitTransaction(wtxBumped, reservekey, g_connman.get(), state) || !state.IsValid()) {\n+    if (!pwalletMain->CommitTransaction(wtxBumped, reservekey, g_connman.get(), state)) {\n+        // NOTE: CommitTransaction never returns false, so this should never happen.\n         throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Error: The transaction was rejected! Reason given: %s\", state.GetRejectReason()));\n     }\n \n+    UniValue vErrors(UniValue::VARR);\n+    if (state.IsInvalid()) {\n+        // This can happen if the mempool rejected the transaction.  Report\n+        // what happened in the \"errors\" response.\n+        vErrors.push_back(strprintf(\"Error: The transaction was rejected: %s\", FormatStateMessage(state)));\n+    }\n+\n     // mark the original tx as bumped\n     if (!pwalletMain->MarkReplaced(wtx.GetHash(), wtxBumped.GetHash())) {\n         // TODO: see if JSON-RPC has a standard way of returning a response\n         // along with an exception. It would be good to return information about\n         // wtxBumped to the caller even if marking the original transaction\n         // replaced does not succeed for some reason.\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Created new bumpfee transaction but could not mark the original transaction as replaced.\");\n+        vErrors.push_back(\"Error: Created new bumpfee transaction but could not mark the original transaction as replaced.\");\n     }\n \n     UniValue result(UniValue::VOBJ);\n     result.push_back(Pair(\"txid\", wtxBumped.GetHash().GetHex()));\n     result.push_back(Pair(\"origfee\", ValueFromAmount(nOldFee)));\n     result.push_back(Pair(\"fee\", ValueFromAmount(nNewFee)));\n+    result.push_back(Pair(\"errors\", vErrors));\n \n     return result;\n }"
      },
      {
        "sha": "a7b8022bd9c79e025ab601e8cc3563170239f022",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 15,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bfb77045c4b06db3597c023de97411ed287e252/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bfb77045c4b06db3597c023de97411ed287e252/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=7bfb77045c4b06db3597c023de97411ed287e252",
        "patch": "@@ -2583,21 +2583,9 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                                               std::numeric_limits<unsigned int>::max() - (fWalletRbf ? 2 : 1)));\n \n                 // Fill in dummy signatures for fee calculation.\n-                int nIn = 0;\n-                for (const auto& coin : setCoins)\n-                {\n-                    const CScript& scriptPubKey = coin.first->tx->vout[coin.second].scriptPubKey;\n-                    SignatureData sigdata;\n-\n-                    if (!ProduceSignature(DummySignatureCreator(this), scriptPubKey, sigdata))\n-                    {\n-                        strFailReason = _(\"Signing transaction failed\");\n-                        return false;\n-                    } else {\n-                        UpdateTransaction(txNew, nIn, sigdata);\n-                    }\n-\n-                    nIn++;\n+                if (!DummySignTx(txNew, setCoins)) {\n+                    strFailReason = _(\"Signing transaction failed\");\n+                    return false;\n                 }\n \n                 unsigned int nBytes = GetVirtualTransactionSize(txNew);"
      },
      {
        "sha": "1de04ae16a3889ba69fff022cba1ba0e240afebd",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bfb77045c4b06db3597c023de97411ed287e252/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bfb77045c4b06db3597c023de97411ed287e252/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=7bfb77045c4b06db3597c023de97411ed287e252",
        "patch": "@@ -13,6 +13,7 @@\n #include \"utilstrencodings.h\"\n #include \"validationinterface.h\"\n #include \"script/ismine.h\"\n+#include \"script/sign.h\"\n #include \"wallet/crypter.h\"\n #include \"wallet/walletdb.h\"\n #include \"wallet/rpcwallet.h\"\n@@ -796,6 +797,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& entries);\n     bool AddAccountingEntry(const CAccountingEntry&);\n     bool AddAccountingEntry(const CAccountingEntry&, CWalletDB *pwalletdb);\n+    template <typename ContainerType>\n+    bool DummySignTx(CMutableTransaction &txNew, const ContainerType &coins);\n \n     static CFeeRate minTxFee;\n     static CFeeRate fallbackFee;\n@@ -1028,4 +1031,28 @@ class CAccount\n     }\n };\n \n+// Helper for producing a bunch of max-sized low-S signatures (eg 72 bytes)\n+// ContainerType is meant to hold pair<CWalletTx *, int>, and be iterable\n+// so that each entry corresponds to each vIn, in order.\n+template <typename ContainerType>\n+bool CWallet::DummySignTx(CMutableTransaction &txNew, const ContainerType &coins)\n+{\n+    // Fill in dummy signatures for fee calculation.\n+    int nIn = 0;\n+    for (const auto& coin : coins)\n+    {\n+        const CScript& scriptPubKey = coin.first->tx->vout[coin.second].scriptPubKey;\n+        SignatureData sigdata;\n+\n+        if (!ProduceSignature(DummySignatureCreator(this), scriptPubKey, sigdata))\n+        {\n+            return false;\n+        } else {\n+            UpdateTransaction(txNew, nIn, sigdata);\n+        }\n+\n+        nIn++;\n+    }\n+    return true;\n+}\n #endif // BITCOIN_WALLET_WALLET_H"
      }
    ]
  },
  {
    "sha": "77bd8c4cab67b6df6a09f856534653c7e064d6ec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3N2JkOGM0Y2FiNjdiNmRmNmEwOWY4NTY1MzQ2NTNjN2UwNjRkNmVj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-01T10:33:51Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-01T10:41:00Z"
      },
      "message": "Merge #9625: Increase minimum debug.log size to 10MB after shrink.\n\n29fb311 Increase minimum debug.log size to 10MB after shrink. (Alex Morcos)",
      "tree": {
        "sha": "d178cf918598660ff40bc061c42f00b04008d7db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d178cf918598660ff40bc061c42f00b04008d7db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/77bd8c4cab67b6df6a09f856534653c7e064d6ec",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYkbs8AAoJEHSBCwEjRsmmnI4IAJYP15iCR6oF0X+BYFTyNvLd\nbgHeezeLBuCD0kB1O2bpYThFSSPyxM/zMje6Bxz9G9QrwmF5MBGfkEc+iGtLQ2uk\n3141JpOJDxVbdh99aa2rilZAKvTdtC165CXQLipV9sujNwqVIcQsbTqJdsZdWodQ\nu5vSD/8Ud/sd6N6CdqYjlbUMAOjZ2U36CnMy8+OP7IhKJNkDZl1JCkKI6ZnGAv3D\n9M42stDQgaLJZerPgFqAgdy1vzOeI4jB/pi+6/wzEY9mPsGk5GTyxpffm8P7mMtS\n+opdoreC03so2s1Jxs3P9Y5VVcfdHFCkntIH0Bbsy9r6xE7GRix8a670u+gs2hQ=\n=10Y+\n-----END PGP SIGNATURE-----",
        "payload": "tree d178cf918598660ff40bc061c42f00b04008d7db\nparent 7bfb77045c4b06db3597c023de97411ed287e252\nparent 29fb311858f098e79ed5334a128f2b0c8c88b235\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1485945231 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1485945660 +0100\n\nMerge #9625: Increase minimum debug.log size to 10MB after shrink.\n\n29fb311 Increase minimum debug.log size to 10MB after shrink. (Alex Morcos)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77bd8c4cab67b6df6a09f856534653c7e064d6ec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/77bd8c4cab67b6df6a09f856534653c7e064d6ec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77bd8c4cab67b6df6a09f856534653c7e064d6ec/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7bfb77045c4b06db3597c023de97411ed287e252",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bfb77045c4b06db3597c023de97411ed287e252",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7bfb77045c4b06db3597c023de97411ed287e252"
      },
      {
        "sha": "29fb311858f098e79ed5334a128f2b0c8c88b235",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29fb311858f098e79ed5334a128f2b0c8c88b235",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29fb311858f098e79ed5334a128f2b0c8c88b235"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 10,
      "deletions": 3
    },
    "files": [
      {
        "sha": "7c108ac4a63817510f8222807704f530441fd57f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77bd8c4cab67b6df6a09f856534653c7e064d6ec/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77bd8c4cab67b6df6a09f856534653c7e064d6ec/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=77bd8c4cab67b6df6a09f856534653c7e064d6ec",
        "patch": "@@ -1146,8 +1146,11 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n #ifndef WIN32\n     CreatePidFile(GetPidFile(), getpid());\n #endif\n-    if (GetBoolArg(\"-shrinkdebugfile\", !fDebug))\n+    if (GetBoolArg(\"-shrinkdebugfile\", !fDebug)) {\n+        // Do this first since it both loads a bunch of debug.log into memory,\n+        // and because this needs to happen before any other debug.log printing\n         ShrinkDebugFile();\n+    }\n \n     if (fPrintToDebugLog)\n         OpenDebugLog();"
      },
      {
        "sha": "ba157625d8055a1f934bb2e691fad3f5ab976ad6",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77bd8c4cab67b6df6a09f856534653c7e064d6ec/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77bd8c4cab67b6df6a09f856534653c7e064d6ec/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=77bd8c4cab67b6df6a09f856534653c7e064d6ec",
        "patch": "@@ -723,13 +723,17 @@ void AllocateFileRange(FILE *file, unsigned int offset, unsigned int length) {\n \n void ShrinkDebugFile()\n {\n+    // Amount of debug.log to save at end when shrinking (must fit in memory)\n+    constexpr size_t RECENT_DEBUG_HISTORY_SIZE = 10 * 1000000;\n     // Scroll debug.log if it's getting too big\n     boost::filesystem::path pathLog = GetDataDir() / \"debug.log\";\n     FILE* file = fopen(pathLog.string().c_str(), \"r\");\n-    if (file && boost::filesystem::file_size(pathLog) > 10 * 1000000)\n+    // If debug.log file is more than 10% bigger the RECENT_DEBUG_HISTORY_SIZE\n+    // trim it down by saving only the last RECENT_DEBUG_HISTORY_SIZE bytes\n+    if (file && boost::filesystem::file_size(pathLog) > 11 * (RECENT_DEBUG_HISTORY_SIZE / 10))\n     {\n         // Restart the file with some of the end\n-        std::vector <char> vch(200000,0);\n+        std::vector<char> vch(RECENT_DEBUG_HISTORY_SIZE, 0);\n         fseek(file, -((long)vch.size()), SEEK_END);\n         int nBytes = fread(vch.data(), 1, vch.size(), file);\n         fclose(file);"
      }
    ]
  },
  {
    "sha": "3eba88d44cdfd9d4d2bfc19cd6049d90ee05fc1c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZWJhODhkNDRjZGZkOWQ0ZDJiZmMxOWNkNjA0OWQ5MGVlMDVmYzFj",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-02-01T17:18:31Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-02-01T17:18:31Z"
      },
      "message": "clarify listunspent amount description",
      "tree": {
        "sha": "05e650b48583862cb94739d5f0d43f05f15beca5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/05e650b48583862cb94739d5f0d43f05f15beca5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3eba88d44cdfd9d4d2bfc19cd6049d90ee05fc1c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3eba88d44cdfd9d4d2bfc19cd6049d90ee05fc1c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3eba88d44cdfd9d4d2bfc19cd6049d90ee05fc1c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3eba88d44cdfd9d4d2bfc19cd6049d90ee05fc1c/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b68f898efa095dce03533be8ac015c1faef23053",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b68f898efa095dce03533be8ac015c1faef23053",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b68f898efa095dce03533be8ac015c1faef23053"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8272bdc43fa2d4d7fa1cdfa628fc16153fa9ba50",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3eba88d44cdfd9d4d2bfc19cd6049d90ee05fc1c/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3eba88d44cdfd9d4d2bfc19cd6049d90ee05fc1c/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=3eba88d44cdfd9d4d2bfc19cd6049d90ee05fc1c",
        "patch": "@@ -2402,7 +2402,7 @@ UniValue listunspent(const JSONRPCRequest& request)\n             \"    \\\"address\\\" : \\\"address\\\",    (string) the bitcoin address\\n\"\n             \"    \\\"account\\\" : \\\"account\\\",    (string) DEPRECATED. The associated account, or \\\"\\\" for the default account\\n\"\n             \"    \\\"scriptPubKey\\\" : \\\"key\\\",   (string) the script key\\n\"\n-            \"    \\\"amount\\\" : x.xxx,         (numeric) the transaction amount in \" + CURRENCY_UNIT + \"\\n\"\n+            \"    \\\"amount\\\" : x.xxx,         (numeric) the transaction output amount in \" + CURRENCY_UNIT + \"\\n\"\n             \"    \\\"confirmations\\\" : n,      (numeric) The number of confirmations\\n\"\n             \"    \\\"redeemScript\\\" : n        (string) The redeemScript if scriptPubKey is P2SH\\n\"\n             \"    \\\"spendable\\\" : xxx,        (bool) Whether we have the private keys to spend this output\\n\""
      }
    ]
  },
  {
    "sha": "3e900acafaa2d40218d8b6167f1a80affd84c8c4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZTkwMGFjYWZhYTJkNDAyMThkOGI2MTY3ZjFhODBhZmZkODRjOGM0",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-31T19:59:32Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-01T23:22:27Z"
      },
      "message": "Require merge commits merge branches on top of other merge commits\n\nSpecifically, require that the left branch (first restult of git\nshow -s --format=format:%P) is a signed merge commit, instead of\nallowing either. This is fine for now, but might need to be relaxed\nin the future.\n\nAlso fixes an out-of-file-descriptors issue by holding too many\nopen FDs writing to /dev/null",
      "tree": {
        "sha": "fbda39c30b410283bd42b58c2db7ef872dc63b13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fbda39c30b410283bd42b58c2db7ef872dc63b13"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3e900acafaa2d40218d8b6167f1a80affd84c8c4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e900acafaa2d40218d8b6167f1a80affd84c8c4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3e900acafaa2d40218d8b6167f1a80affd84c8c4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e900acafaa2d40218d8b6167f1a80affd84c8c4/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "77bd8c4cab67b6df6a09f856534653c7e064d6ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77bd8c4cab67b6df6a09f856534653c7e064d6ec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/77bd8c4cab67b6df6a09f856534653c7e064d6ec"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b2cebdf1a0f9f09661404e378c3250d72ac1c80d",
        "filename": "contrib/verify-commits/verify-commits.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e900acafaa2d40218d8b6167f1a80affd84c8c4/contrib/verify-commits/verify-commits.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e900acafaa2d40218d8b6167f1a80affd84c8c4/contrib/verify-commits/verify-commits.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/verify-commits.sh?ref=3e900acafaa2d40218d8b6167f1a80affd84c8c4",
        "patch": "@@ -28,9 +28,10 @@ IS_SIGNED () {\n \tlocal PARENTS\n \tPARENTS=$(git show -s --format=format:%P $1)\n \tfor PARENT in $PARENTS; do\n-\t\tif IS_SIGNED $PARENT > /dev/null; then\n+\t\tif IS_SIGNED $PARENT; then\n \t\t\treturn 0;\n \t\tfi\n+\t\tbreak\n \tdone\n \tif ! \"$HAVE_FAILED\"; then\n \t\techo \"No parent of $1 was signed with a trusted key!\" > /dev/stderr"
      }
    ]
  },
  {
    "sha": "ba94426d531d45643e37567412c3f9d97f71ae5f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYTk0NDI2ZDUzMWQ0NTY0M2UzNzU2NzQxMmMzZjlkOTdmNzFhZTVm",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-31T20:32:23Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-01T23:22:55Z"
      },
      "message": "Test that pushes to bitcoin/bitcoin are signed per verify-commits",
      "tree": {
        "sha": "d7f55c438470d0021187d18b5ace12e61b828807",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d7f55c438470d0021187d18b5ace12e61b828807"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ba94426d531d45643e37567412c3f9d97f71ae5f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba94426d531d45643e37567412c3f9d97f71ae5f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ba94426d531d45643e37567412c3f9d97f71ae5f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba94426d531d45643e37567412c3f9d97f71ae5f/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3e900acafaa2d40218d8b6167f1a80affd84c8c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e900acafaa2d40218d8b6167f1a80affd84c8c4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3e900acafaa2d40218d8b6167f1a80affd84c8c4"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ccd249092527d5174c705db522db246debdd3ff9",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba94426d531d45643e37567412c3f9d97f71ae5f/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba94426d531d45643e37567412c3f9d97f71ae5f/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=ba94426d531d45643e37567412c3f9d97f71ae5f",
        "patch": "@@ -51,6 +51,9 @@ before_script:\n     - if [ -n \"$OSX_SDK\" -a -f depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then tar -C depends/SDKs -xf depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz; fi\n     - make $MAKEJOBS -C depends HOST=$HOST $DEP_OPTS\n script:\n+    - if [ \"$RUN_TESTS\" = \"true\" -a \"$TRAVIS_REPO_SLUG\" = \"bitcoin/bitcoin\" -a \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then while read LINE; do travis_retry gpg --keyserver hkp://pool.sks-keyservers.net --recv-keys $LINE; done < contrib/verify-commits/trusted-keys; fi\n+    - if [ \"$RUN_TESTS\" = \"true\" -a \"$TRAVIS_REPO_SLUG\" = \"bitcoin/bitcoin\" -a \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then git fetch --unshallow; fi\n+    - if [ \"$RUN_TESTS\" = \"true\" -a \"$TRAVIS_REPO_SLUG\" = \"bitcoin/bitcoin\" -a \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then contrib/verify-commits/verify-commits.sh; fi\n     - export TRAVIS_COMMIT_LOG=`git log --format=fuller -1`\n     - if [ -n \"$USE_SHELL\" ]; then export CONFIG_SHELL=\"$USE_SHELL\"; fi\n     - OUTDIR=$BASE_OUTDIR/$TRAVIS_PULL_REQUEST/$TRAVIS_JOB_NUMBER-$HOST"
      }
    ]
  },
  {
    "sha": "e30d9287fd48afcbeebc5062870eb6ffa5d2644a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMzBkOTI4N2ZkNDhhZmNiZWViYzUwNjI4NzBlYjZmZmE1ZDI2NDRh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-02T09:13:07Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-02T09:13:21Z"
      },
      "message": "Merge #9663: [RPC] clarify listunspent amount description\n\n3eba88d clarify listunspent amount description (Gregory Sanders)",
      "tree": {
        "sha": "8946ef6d662b9b5a46c5717cac42a0d95e1dc723",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8946ef6d662b9b5a46c5717cac42a0d95e1dc723"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e30d9287fd48afcbeebc5062870eb6ffa5d2644a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYkvgxAAoJEHSBCwEjRsmm/YAH/iIBedfMLRTYY5BP4xE7GF7d\n8OFgVv8FO6YniE6zy+6ztIFmS57D4sulGDfNGV2/6SbAstU9h51FN1daUmESeStF\nZFH9TXv8PrPToawJ6oZPeL8epuEAoQ+EGTSgMmnlCsmjdShr/etkUAKtdqppniaP\nyWP32ScfxVatGzPiBYydRvKAArJ++v7fhkyHa+MpTwCt3HnXaTaNDrpcCjyv4oFz\nmgphatriwCEhy/5/ZgiHxlwB+4bIgWfPVaYSdETLjKapSxkn3S61eMHTUEjcTvFx\nPZaEZeqU0KLKaf/tHvQ/wzE5pyJYA/AuW87KHP5wnWfOBWIF1tlktKYUlGI+VJI=\n=RISD\n-----END PGP SIGNATURE-----",
        "payload": "tree 8946ef6d662b9b5a46c5717cac42a0d95e1dc723\nparent 77bd8c4cab67b6df6a09f856534653c7e064d6ec\nparent 3eba88d44cdfd9d4d2bfc19cd6049d90ee05fc1c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1486026787 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1486026801 +0100\n\nMerge #9663: [RPC] clarify listunspent amount description\n\n3eba88d clarify listunspent amount description (Gregory Sanders)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e30d9287fd48afcbeebc5062870eb6ffa5d2644a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e30d9287fd48afcbeebc5062870eb6ffa5d2644a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e30d9287fd48afcbeebc5062870eb6ffa5d2644a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "77bd8c4cab67b6df6a09f856534653c7e064d6ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77bd8c4cab67b6df6a09f856534653c7e064d6ec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/77bd8c4cab67b6df6a09f856534653c7e064d6ec"
      },
      {
        "sha": "3eba88d44cdfd9d4d2bfc19cd6049d90ee05fc1c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3eba88d44cdfd9d4d2bfc19cd6049d90ee05fc1c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3eba88d44cdfd9d4d2bfc19cd6049d90ee05fc1c"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "36753d111632ee83662253aad053c83a0c3b028e",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e30d9287fd48afcbeebc5062870eb6ffa5d2644a/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e30d9287fd48afcbeebc5062870eb6ffa5d2644a/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=e30d9287fd48afcbeebc5062870eb6ffa5d2644a",
        "patch": "@@ -2416,7 +2416,7 @@ UniValue listunspent(const JSONRPCRequest& request)\n             \"    \\\"address\\\" : \\\"address\\\",    (string) the bitcoin address\\n\"\n             \"    \\\"account\\\" : \\\"account\\\",    (string) DEPRECATED. The associated account, or \\\"\\\" for the default account\\n\"\n             \"    \\\"scriptPubKey\\\" : \\\"key\\\",   (string) the script key\\n\"\n-            \"    \\\"amount\\\" : x.xxx,         (numeric) the transaction amount in \" + CURRENCY_UNIT + \"\\n\"\n+            \"    \\\"amount\\\" : x.xxx,         (numeric) the transaction output amount in \" + CURRENCY_UNIT + \"\\n\"\n             \"    \\\"confirmations\\\" : n,      (numeric) The number of confirmations\\n\"\n             \"    \\\"redeemScript\\\" : n        (string) The redeemScript if scriptPubKey is P2SH\\n\"\n             \"    \\\"spendable\\\" : xxx,        (bool) Whether we have the private keys to spend this output\\n\""
      }
    ]
  },
  {
    "sha": "ae972a5e996a8883369c424348682a2c1597877e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZTk3MmE1ZTk5NmE4ODgzMzY5YzQyNDM0ODY4MmEyYzE1OTc4Nzdl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-02T09:19:06Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-02T09:19:15Z"
      },
      "message": "Merge #9580: Fix various minor linearization script issues\n\nb9d95bd Fix various minor linearization script issues (Douglas Roark)",
      "tree": {
        "sha": "24433e1c4e49940b1ea59898ed8054d096e14136",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/24433e1c4e49940b1ea59898ed8054d096e14136"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ae972a5e996a8883369c424348682a2c1597877e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYkvmTAAoJEHSBCwEjRsmmcSwIAIjxu46EHiHRDpUdJnPWmG+Y\nq50/9gWOz95UclhVUmXs4S2qRolZRgmmqbU2uFbNt8ekKUTcoU9ruhkADsy+1RXZ\neLHAb7NVFHRUYijonNCUORwe52bF4F171dGuF1HSS/MQXs83HgVcmelgEbCCFKh+\n6Dn09Knb9kilo+7zmm8zpgDGl8pZormFpdzg6kvQdZMqNgd7lkF1nAyTbBtMusJU\njgzvz2WolQPAO/4yU9UF8Ef2rZTmUWw+4HvfsUYlpCOGLbvSnFLzfOD+bQfqoic3\n6bBHhM6AsYmsCuyI2mk1lSg4rrf6/fY/txeCSiBVzLeGeM7nNOwNatQQC90wCik=\n=aLpp\n-----END PGP SIGNATURE-----",
        "payload": "tree 24433e1c4e49940b1ea59898ed8054d096e14136\nparent e30d9287fd48afcbeebc5062870eb6ffa5d2644a\nparent b9d95bd9a1b3e8613373ecd228805518f2852985\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1486027146 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1486027155 +0100\n\nMerge #9580: Fix various minor linearization script issues\n\nb9d95bd Fix various minor linearization script issues (Douglas Roark)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae972a5e996a8883369c424348682a2c1597877e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ae972a5e996a8883369c424348682a2c1597877e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae972a5e996a8883369c424348682a2c1597877e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e30d9287fd48afcbeebc5062870eb6ffa5d2644a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e30d9287fd48afcbeebc5062870eb6ffa5d2644a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e30d9287fd48afcbeebc5062870eb6ffa5d2644a"
      },
      {
        "sha": "b9d95bd9a1b3e8613373ecd228805518f2852985",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9d95bd9a1b3e8613373ecd228805518f2852985",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b9d95bd9a1b3e8613373ecd228805518f2852985"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 41,
      "deletions": 18
    },
    "files": [
      {
        "sha": "0971e7816b48f62a3881368f7e5f0503b692a3d7",
        "filename": "contrib/linearize/README.md",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae972a5e996a8883369c424348682a2c1597877e/contrib/linearize/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae972a5e996a8883369c424348682a2c1597877e/contrib/linearize/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/README.md?ref=ae972a5e996a8883369c424348682a2c1597877e",
        "patch": "@@ -32,15 +32,21 @@ Required configuration file settings:\n * `output`: Output directory for linearized `blocks/blkNNNNN.dat` output.\n \n Optional config file setting for linearize-data:\n-* `file_timestamp`: Set each file's last-modified time to that of the most\n-recent block in that file.\n+* `debug_output`: Some printouts may not always be desired. If true, such output\n+will be printed.\n+* `file_timestamp`: Set each file's last-accessed and last-modified times,\n+respectively, to the current time and to the timestamp of the most recent block\n+written to the script's blockchain.\n * `genesis`: The hash of the genesis block in the blockchain.\n * `input`: bitcoind blocks/ directory containing blkNNNNN.dat\n * `hashlist`: text file containing list of block hashes created by\n linearize-hashes.py.\n * `max_out_sz`: Maximum size for files created by the `output_file` option.\n (Default: `1000*1000*1000 bytes`)\n * `netmagic`: Network magic number.\n+* `out_of_order_cache_sz`: If out-of-order blocks are being read, the block can\n+be written to a cache so that the blockchain doesn't have to be seeked again.\n+This option specifies the cache size. (Default: `100*1000*1000 bytes`)\n * `rev_hash_bytes`: If true, the block hash list written by linearize-hashes.py\n will be byte-reversed when read by linearize-data.py. See the linearize-hashes\n entry for more information."
      },
      {
        "sha": "2cc910edfed158643d45a17d9b63bec6a39db378",
        "filename": "contrib/linearize/example-linearize.cfg",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae972a5e996a8883369c424348682a2c1597877e/contrib/linearize/example-linearize.cfg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae972a5e996a8883369c424348682a2c1597877e/contrib/linearize/example-linearize.cfg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/example-linearize.cfg?ref=ae972a5e996a8883369c424348682a2c1597877e",
        "patch": "@@ -1,4 +1,3 @@\n-\n # bitcoind RPC settings (linearize-hashes)\n rpcuser=someuser\n rpcpassword=somepassword\n@@ -21,6 +20,9 @@ input=/home/example/.bitcoin/blocks\n #genesis=000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943\n #input=/home/example/.bitcoin/testnet3/blocks\n \n+# \"output\" option causes blockchain files to be written to the given location,\n+# with \"output_file\" ignored. If not used, \"output_file\" is used instead.\n+# output=/home/example/blockchain_directory\n output_file=/home/example/Downloads/bootstrap.dat\n hashlist=hashlist.txt\n \n@@ -29,3 +31,12 @@ out_of_order_cache_sz = 100000000\n \n # Do we want the reverse the hash bytes coming from getblockhash?\n rev_hash_bytes = False\n+\n+# On a new month, do we want to set the access and modify times of the new\n+# blockchain file?\n+file_timestamp = 0\n+# Do we want to split the blockchain files given a new month or specific height?\n+split_timestamp = 0\n+\n+# Do we want debug printouts?\n+debug_output = False"
      },
      {
        "sha": "afcec2b60ae4f5d4ceae805bc076dbf39c982c62",
        "filename": "contrib/linearize/linearize-data.py",
        "status": "modified",
        "additions": 21,
        "deletions": 15,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae972a5e996a8883369c424348682a2c1597877e/contrib/linearize/linearize-data.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae972a5e996a8883369c424348682a2c1597877e/contrib/linearize/linearize-data.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/linearize-data.py?ref=ae972a5e996a8883369c424348682a2c1597877e",
        "patch": "@@ -134,32 +134,32 @@ def writeBlock(self, inhdr, blk_hdr, rawblock):\n \t\tif not self.fileOutput and ((self.outsz + blockSizeOnDisk) > self.maxOutSz):\n \t\t\tself.outF.close()\n \t\t\tif self.setFileTime:\n-\t\t\t\tos.utime(outFname, (int(time.time()), highTS))\n+\t\t\t\tos.utime(self.outFname, (int(time.time()), self.highTS))\n \t\t\tself.outF = None\n \t\t\tself.outFname = None\n \t\t\tself.outFn = self.outFn + 1\n \t\t\tself.outsz = 0\n \n \t\t(blkDate, blkTS) = get_blk_dt(blk_hdr)\n \t\tif self.timestampSplit and (blkDate > self.lastDate):\n-\t\t\tprint(\"New month \" + blkDate.strftime(\"%Y-%m\") + \" @ \" + hash_str)\n-\t\t\tlastDate = blkDate\n-\t\t\tif outF:\n-\t\t\t\toutF.close()\n-\t\t\t\tif setFileTime:\n-\t\t\t\t\tos.utime(outFname, (int(time.time()), highTS))\n+\t\t\tprint(\"New month \" + blkDate.strftime(\"%Y-%m\") + \" @ \" + self.hash_str)\n+\t\t\tself.lastDate = blkDate\n+\t\t\tif self.outF:\n+\t\t\t\tself.outF.close()\n+\t\t\t\tif self.setFileTime:\n+\t\t\t\t\tos.utime(self.outFname, (int(time.time()), self.highTS))\n \t\t\t\tself.outF = None\n \t\t\t\tself.outFname = None\n \t\t\t\tself.outFn = self.outFn + 1\n \t\t\t\tself.outsz = 0\n \n \t\tif not self.outF:\n \t\t\tif self.fileOutput:\n-\t\t\t\toutFname = self.settings['output_file']\n+\t\t\t\tself.outFname = self.settings['output_file']\n \t\t\telse:\n-\t\t\t\toutFname = os.path.join(self.settings['output'], \"blk%05d.dat\" % self.outFn)\n-\t\t\tprint(\"Output file \" + outFname)\n-\t\t\tself.outF = open(outFname, \"wb\")\n+\t\t\t\tself.outFname = os.path.join(self.settings['output'], \"blk%05d.dat\" % self.outFn)\n+\t\t\tprint(\"Output file \" + self.outFname)\n+\t\t\tself.outF = open(self.outFname, \"wb\")\n \n \t\tself.outF.write(inhdr)\n \t\tself.outF.write(blk_hdr)\n@@ -223,13 +223,16 @@ def run(self):\n \t\t\tblk_hdr = self.inF.read(80)\n \t\t\tinExtent = BlockExtent(self.inFn, self.inF.tell(), inhdr, blk_hdr, inLen)\n \n-\t\t\thash_str = calc_hash_str(blk_hdr)\n-\t\t\tif not hash_str in blkmap:\n-\t\t\t\tprint(\"Skipping unknown block \" + hash_str)\n+\t\t\tself.hash_str = calc_hash_str(blk_hdr)\n+\t\t\tif not self.hash_str in blkmap:\n+\t\t\t\t# Because blocks can be written to files out-of-order as of 0.10, the script\n+\t\t\t\t# may encounter blocks it doesn't know about. Treat as debug output.\n+\t\t\t\tif settings['debug_output'] == 'true':\n+\t\t\t\t\tprint(\"Skipping unknown block \" + self.hash_str)\n \t\t\t\tself.inF.seek(inLen, os.SEEK_CUR)\n \t\t\t\tcontinue\n \n-\t\t\tblkHeight = self.blkmap[hash_str]\n+\t\t\tblkHeight = self.blkmap[self.hash_str]\n \t\t\tself.blkCountIn += 1\n \n \t\t\tif self.blkCountOut == blkHeight:\n@@ -295,12 +298,15 @@ def run(self):\n \t\tsettings['max_out_sz'] = 1000 * 1000 * 1000\n \tif 'out_of_order_cache_sz' not in settings:\n \t\tsettings['out_of_order_cache_sz'] = 100 * 1000 * 1000\n+\tif 'debug_output' not in settings:\n+\t\tsettings['debug_output'] = 'false'\n \n \tsettings['max_out_sz'] = int(settings['max_out_sz'])\n \tsettings['split_timestamp'] = int(settings['split_timestamp'])\n \tsettings['file_timestamp'] = int(settings['file_timestamp'])\n \tsettings['netmagic'] = unhexlify(settings['netmagic'].encode('utf-8'))\n \tsettings['out_of_order_cache_sz'] = int(settings['out_of_order_cache_sz'])\n+\tsettings['debug_output'] = settings['debug_output'].lower()\n \n \tif 'output_file' not in settings and 'output' not in settings:\n \t\tprint(\"Missing output file / directory\")"
      }
    ]
  },
  {
    "sha": "4e19efba033167ee530d36e22f404b74b09f7955",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZTE5ZWZiYTAzMzE2N2VlNTMwZDM2ZTIyZjQwNGI3NGIwOWY3OTU1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-02T09:21:06Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-02T10:57:40Z"
      },
      "message": "Merge #9556: Remove redundant semicolons\n\n8fc6989 Remove redundant semicolons (practicalswift)",
      "tree": {
        "sha": "fd08c1a26178d215c70b90b85d1c7f7cb526125e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fd08c1a26178d215c70b90b85d1c7f7cb526125e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4e19efba033167ee530d36e22f404b74b09f7955",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYkxCkAAoJEHSBCwEjRsmmDXoH/06IYCzh3LCWPUp6f+Pj7MjE\nK57T/VVPDkXbEzB2uhavcT/GNCvZ4mke7wZF5J+4+sDGHyao4vKIIgXmnzo62jWS\nFJO849MDtCwDvOTk/zGEflLIwfsO/CqCfZ5LXganBlzVeAZLmKcUV3eu8ryoqyvx\ntZBTlbbGJzVltz58rNVpSD4WinUnI10YTnYoELXmv0UxOvQv72CP31QQSX2E6OCu\nr31Dcg2C6lv698/qrknyef97XNEnbDky5auu4xAS96cIIbiGtBlp12dIXhGGyXvv\nhqKcp4ULLofarUbQrD5UihxPb5LZSDQMK1oorMN35n12IP4ohfCxRDJCxzE17NI=\n=a7Tj\n-----END PGP SIGNATURE-----",
        "payload": "tree fd08c1a26178d215c70b90b85d1c7f7cb526125e\nparent ae972a5e996a8883369c424348682a2c1597877e\nparent 8fc698935f01a9f0675e509761fb69be8d43e80a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1486027266 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1486033060 +0100\n\nMerge #9556: Remove redundant semicolons\n\n8fc6989 Remove redundant semicolons (practicalswift)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e19efba033167ee530d36e22f404b74b09f7955",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4e19efba033167ee530d36e22f404b74b09f7955",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e19efba033167ee530d36e22f404b74b09f7955/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ae972a5e996a8883369c424348682a2c1597877e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae972a5e996a8883369c424348682a2c1597877e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ae972a5e996a8883369c424348682a2c1597877e"
      },
      {
        "sha": "8fc698935f01a9f0675e509761fb69be8d43e80a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fc698935f01a9f0675e509761fb69be8d43e80a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8fc698935f01a9f0675e509761fb69be8d43e80a"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "a14a2386a264f7c2dacd298545bf7697c87be825",
        "filename": "src/hash.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e19efba033167ee530d36e22f404b74b09f7955/src/hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e19efba033167ee530d36e22f404b74b09f7955/src/hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.cpp?ref=4e19efba033167ee530d36e22f404b74b09f7955",
        "patch": "@@ -57,7 +57,7 @@ unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char\n             k1 = ROTL32(k1, 15);\n             k1 *= c2;\n             h1 ^= k1;\n-        };\n+        }\n     }\n \n     //----------"
      },
      {
        "sha": "c594daca0d0dd116b6ebf2e599a621245a9be712",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e19efba033167ee530d36e22f404b74b09f7955/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e19efba033167ee530d36e22f404b74b09f7955/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=4e19efba033167ee530d36e22f404b74b09f7955",
        "patch": "@@ -697,15 +697,15 @@ class submitblock_StateCatcher : public CValidationInterface\n     bool found;\n     CValidationState state;\n \n-    submitblock_StateCatcher(const uint256 &hashIn) : hash(hashIn), found(false), state() {};\n+    submitblock_StateCatcher(const uint256 &hashIn) : hash(hashIn), found(false), state() {}\n \n protected:\n     virtual void BlockChecked(const CBlock& block, const CValidationState& stateIn) {\n         if (block.GetHash() != hash)\n             return;\n         found = true;\n         state = stateIn;\n-    };\n+    }\n };\n \n UniValue submitblock(const JSONRPCRequest& request)"
      },
      {
        "sha": "e2b5573abd8c76fd0634de48f88ecbabd51c92c0",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e19efba033167ee530d36e22f404b74b09f7955/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e19efba033167ee530d36e22f404b74b09f7955/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=4e19efba033167ee530d36e22f404b74b09f7955",
        "patch": "@@ -292,7 +292,7 @@ BOOST_AUTO_TEST_CASE(versionbits_computeblockversion)\n         blocksToMine--;\n         nTime += 600;\n         nHeight += 1;\n-    };\n+    }\n \n     nTime = nTimeout;\n     // FAILED is only triggered at the end of a period, so CBV should be setting"
      }
    ]
  },
  {
    "sha": "7c93952feccb66254268c110e09797da3d337f7f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YzkzOTUyZmVjY2I2NjI1NDI2OGMxMTBlMDk3OTdkYTNkMzM3Zjdm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-02T12:04:35Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-02T12:04:53Z"
      },
      "message": "Merge #9656: Check verify-commits on pushes to master\n\nba94426 Test that pushes to bitcoin/bitcoin are signed per verify-commits (Matt Corallo)\n3e900ac Require merge commits merge branches on top of other merge commits (Matt Corallo)",
      "tree": {
        "sha": "ccd9bc9db1dde81e392f59a8368510d5b825a7ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ccd9bc9db1dde81e392f59a8368510d5b825a7ef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7c93952feccb66254268c110e09797da3d337f7f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYkyBlAAoJEHSBCwEjRsmmEjYIAIW9BVMhWyZQNXe2zFhqVWKF\nAKIJC87LjoHbWmq5HowzOS4YvGJkyllgeTZtTNnl9j52082fi+rgPYjr1jHKKv7R\n0FxZHzWlAEBq6dXIQbhl+m7XSZ+jvgh54jKwLxj/oai9ajtyhv+cvmg/oWqTQ2yf\nrbuZOcmFWu03LIiGg6dPm1iapP7Ok6RCkJgqke8/brxAkdPRYviMLTPZfD0+B/7A\nz3U9rv8y4rhrq2zmnSDLeIpQw9nPvnm+yFZNYnT8ubdOQNy0z2Bnqk7Jgxk9serx\nXWYQe3kmh0ZtUcDjmuF/uN0NqLQqkYj7DgXFbei4rhv7HfeFDCpc2BMsjVLPdP4=\n=WMpN\n-----END PGP SIGNATURE-----",
        "payload": "tree ccd9bc9db1dde81e392f59a8368510d5b825a7ef\nparent 4e19efba033167ee530d36e22f404b74b09f7955\nparent ba94426d531d45643e37567412c3f9d97f71ae5f\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1486037075 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1486037093 +0100\n\nMerge #9656: Check verify-commits on pushes to master\n\nba94426 Test that pushes to bitcoin/bitcoin are signed per verify-commits (Matt Corallo)\n3e900ac Require merge commits merge branches on top of other merge commits (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c93952feccb66254268c110e09797da3d337f7f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7c93952feccb66254268c110e09797da3d337f7f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c93952feccb66254268c110e09797da3d337f7f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4e19efba033167ee530d36e22f404b74b09f7955",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e19efba033167ee530d36e22f404b74b09f7955",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4e19efba033167ee530d36e22f404b74b09f7955"
      },
      {
        "sha": "ba94426d531d45643e37567412c3f9d97f71ae5f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba94426d531d45643e37567412c3f9d97f71ae5f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ba94426d531d45643e37567412c3f9d97f71ae5f"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 5,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ccd249092527d5174c705db522db246debdd3ff9",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c93952feccb66254268c110e09797da3d337f7f/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c93952feccb66254268c110e09797da3d337f7f/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=7c93952feccb66254268c110e09797da3d337f7f",
        "patch": "@@ -51,6 +51,9 @@ before_script:\n     - if [ -n \"$OSX_SDK\" -a -f depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then tar -C depends/SDKs -xf depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz; fi\n     - make $MAKEJOBS -C depends HOST=$HOST $DEP_OPTS\n script:\n+    - if [ \"$RUN_TESTS\" = \"true\" -a \"$TRAVIS_REPO_SLUG\" = \"bitcoin/bitcoin\" -a \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then while read LINE; do travis_retry gpg --keyserver hkp://pool.sks-keyservers.net --recv-keys $LINE; done < contrib/verify-commits/trusted-keys; fi\n+    - if [ \"$RUN_TESTS\" = \"true\" -a \"$TRAVIS_REPO_SLUG\" = \"bitcoin/bitcoin\" -a \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then git fetch --unshallow; fi\n+    - if [ \"$RUN_TESTS\" = \"true\" -a \"$TRAVIS_REPO_SLUG\" = \"bitcoin/bitcoin\" -a \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then contrib/verify-commits/verify-commits.sh; fi\n     - export TRAVIS_COMMIT_LOG=`git log --format=fuller -1`\n     - if [ -n \"$USE_SHELL\" ]; then export CONFIG_SHELL=\"$USE_SHELL\"; fi\n     - OUTDIR=$BASE_OUTDIR/$TRAVIS_PULL_REQUEST/$TRAVIS_JOB_NUMBER-$HOST"
      },
      {
        "sha": "b2cebdf1a0f9f09661404e378c3250d72ac1c80d",
        "filename": "contrib/verify-commits/verify-commits.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c93952feccb66254268c110e09797da3d337f7f/contrib/verify-commits/verify-commits.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c93952feccb66254268c110e09797da3d337f7f/contrib/verify-commits/verify-commits.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/verify-commits.sh?ref=7c93952feccb66254268c110e09797da3d337f7f",
        "patch": "@@ -28,9 +28,10 @@ IS_SIGNED () {\n \tlocal PARENTS\n \tPARENTS=$(git show -s --format=format:%P $1)\n \tfor PARENT in $PARENTS; do\n-\t\tif IS_SIGNED $PARENT > /dev/null; then\n+\t\tif IS_SIGNED $PARENT; then\n \t\t\treturn 0;\n \t\tfi\n+\t\tbreak\n \tdone\n \tif ! \"$HAVE_FAILED\"; then\n \t\techo \"No parent of $1 was signed with a trusted key!\" > /dev/stderr"
      }
    ]
  },
  {
    "sha": "1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYzJlZGQ5ZjY3MDdkMTZjMDNlY2ZiYTA5NGIxY2ZlYzJkZGM0ZGNl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-02T12:25:52Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-02T12:25:59Z"
      },
      "message": "Merge #9654: Add jtimon pgp keys for commit sigs and future gitian builds\n\n178454d Contrib: Add jtimon pgp keys for commit sigs and future gitian builds (Jorge Tim\u00f3n)",
      "tree": {
        "sha": "2aa3b10ff7085d0b0777ed82076ad52ec0d9add2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2aa3b10ff7085d0b0777ed82076ad52ec0d9add2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYkyVXAAoJEHSBCwEjRsmmt5gH/16VID43DCGs7W1kWyCdkOvJ\nPYJ6fe6k7thKg3rVCLgBoSV8f5ikHYWVVBrJz3s3s39sKVb+hZd4LLOI9eWaoYOG\n5pkFN+tar5boiIWNcM7CIlwykHDvSQp4nE/WO7ewWr7GhstF516P0FItCm17ZfHs\nbkJw6R6N1ZXFiLsGd45gZ+T9iQ/6eM3y+co0iHrNdQC4XBpk9HjPb7w4MGMFND6H\n0UQcnAsPhjHVC3U70v3OgOQWh/Rsds3hXQXnCNHQNJh11lG670zcczpWBA2eCMPg\n6iDUYvkH+Nb7wl+QO5NBoM5OS3yUh29DYpCxzyyGbAdYQSaep6JHyiqdN0IvvlE=\n=eS0p\n-----END PGP SIGNATURE-----",
        "payload": "tree 2aa3b10ff7085d0b0777ed82076ad52ec0d9add2\nparent 7c93952feccb66254268c110e09797da3d337f7f\nparent 178454dde93ffa55343c17fcc6414f1f982f71e3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1486038352 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1486038359 +0100\n\nMerge #9654: Add jtimon pgp keys for commit sigs and future gitian builds\n\n178454d Contrib: Add jtimon pgp keys for commit sigs and future gitian builds (Jorge Tim\u00f3n)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7c93952feccb66254268c110e09797da3d337f7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c93952feccb66254268c110e09797da3d337f7f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7c93952feccb66254268c110e09797da3d337f7f"
      },
      {
        "sha": "178454dde93ffa55343c17fcc6414f1f982f71e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/178454dde93ffa55343c17fcc6414f1f982f71e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/178454dde93ffa55343c17fcc6414f1f982f71e3"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": [
      {
        "sha": "88d0de1503bb6a6bed7710b68b5526e85a855812",
        "filename": "contrib/gitian-keys/jtimon-key.pgp",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce/contrib/gitian-keys/jtimon-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce/contrib/gitian-keys/jtimon-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/jtimon-key.pgp?ref=1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce"
      }
    ]
  },
  {
    "sha": "885cfdd2179a2aae733d0690f5a2ef23d181768e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ODVjZmRkMjE3OWEyYWFlNzMzZDA2OTBmNWEyZWYyM2QxODE3Njhl",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-02T18:51:57Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-02T18:51:57Z"
      },
      "message": "Fix super-unlikely race introduced in 236618061a445d2cb11e72\n\nOnce the CNode has been added to vNodes, it is possible that it is\ndisconnected+deleted in the socket handler thread. However, after\nthat we now call InitializeNode, which accesses the pnode.\n\nhelgrind managed to tickle this case (somehow), but I suspect it\nrequires in immensely braindead scheduler.",
      "tree": {
        "sha": "e7ccb13171258fa0d9736c27dd713836fb17e8b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e7ccb13171258fa0d9736c27dd713836fb17e8b9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/885cfdd2179a2aae733d0690f5a2ef23d181768e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/885cfdd2179a2aae733d0690f5a2ef23d181768e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/885cfdd2179a2aae733d0690f5a2ef23d181768e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/885cfdd2179a2aae733d0690f5a2ef23d181768e/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "35d3348adcb3c3af7eeacdbc2248cf168b1389d0",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/885cfdd2179a2aae733d0690f5a2ef23d181768e/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/885cfdd2179a2aae733d0690f5a2ef23d181768e/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=885cfdd2179a2aae733d0690f5a2ef23d181768e",
        "patch": "@@ -1833,11 +1833,11 @@ bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n     if (fAddnode)\n         pnode->fAddnode = true;\n \n+    GetNodeSignals().InitializeNode(pnode, *this);\n     {\n         LOCK(cs_vNodes);\n         vNodes.push_back(pnode);\n     }\n-    GetNodeSignals().InitializeNode(pnode, *this);\n \n     return true;\n }"
      }
    ]
  },
  {
    "sha": "80ff0344aebbdebdfa7433d855b0aa9de6c4bed3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MGZmMDM0NGFlYmJkZWJkZmE3NDMzZDg1NWIwYWE5ZGU2YzRiZWQz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-12-15T00:41:37Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-02T18:56:05Z"
      },
      "message": "Dont deserialize nVersion into CNode, should fix #9212",
      "tree": {
        "sha": "586c959f54a062154d05ceed8689ba676f27ddd7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/586c959f54a062154d05ceed8689ba676f27ddd7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/80ff0344aebbdebdfa7433d855b0aa9de6c4bed3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80ff0344aebbdebdfa7433d855b0aa9de6c4bed3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/80ff0344aebbdebdfa7433d855b0aa9de6c4bed3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80ff0344aebbdebdfa7433d855b0aa9de6c4bed3/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 8,
      "deletions": 6
    },
    "files": [
      {
        "sha": "6dcb907bcfceb0498d0df667cf221b2f4a089212",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80ff0344aebbdebdfa7433d855b0aa9de6c4bed3/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80ff0344aebbdebdfa7433d855b0aa9de6c4bed3/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=80ff0344aebbdebdfa7433d855b0aa9de6c4bed3",
        "patch": "@@ -1199,7 +1199,8 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n         CAddress addrFrom;\n         uint64_t nNonce = 1;\n         uint64_t nServiceInt;\n-        vRecv >> pfrom->nVersion >> nServiceInt >> nTime >> addrMe;\n+        int nVersion;\n+        vRecv >> nVersion >> nServiceInt >> nTime >> addrMe;\n         pfrom->nServices = ServiceFlags(nServiceInt);\n         if (!pfrom->fInbound)\n         {\n@@ -1214,18 +1215,18 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n             return false;\n         }\n \n-        if (pfrom->nVersion < MIN_PEER_PROTO_VERSION)\n+        if (nVersion < MIN_PEER_PROTO_VERSION)\n         {\n             // disconnect from peers older than this proto version\n-            LogPrintf(\"peer=%d using obsolete version %i; disconnecting\\n\", pfrom->id, pfrom->nVersion);\n+            LogPrintf(\"peer=%d using obsolete version %i; disconnecting\\n\", pfrom->id, nVersion);\n             connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_OBSOLETE,\n                                strprintf(\"Version must be %d or greater\", MIN_PEER_PROTO_VERSION)));\n             pfrom->fDisconnect = true;\n             return false;\n         }\n \n-        if (pfrom->nVersion == 10300)\n-            pfrom->nVersion = 300;\n+        if (nVersion == 10300)\n+            nVersion = 300;\n         if (!vRecv.empty())\n             vRecv >> addrFrom >> nNonce;\n         if (!vRecv.empty()) {\n@@ -1277,7 +1278,8 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n \n         // Change version\n         connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERACK));\n-        int nSendVersion = std::min(pfrom->nVersion, PROTOCOL_VERSION);\n+        int nSendVersion = std::min(nVersion, PROTOCOL_VERSION);\n+        pfrom->nVersion = nVersion;\n         pfrom->SetSendVersion(nSendVersion);\n \n         if (!pfrom->fInbound)"
      }
    ]
  },
  {
    "sha": "2046617b5e06ddb7f960b28219c155995542f029",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMDQ2NjE3YjVlMDZkZGI3Zjk2MGIyODIxOWMxNTU5OTU1NDJmMDI5",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-01-18T23:15:00Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-02T21:13:52Z"
      },
      "message": "net: deserialize the entire version message locally\n\nThis avoids having some vars set if the version negotiation fails.\n\nAlso copy it all into CNode at the same site. nVersion and\nfSuccessfullyConnected are set last, as they are the gates for the other vars.\nMake them atomic for that reason.",
      "tree": {
        "sha": "53a62fc8ab3fc3361f026f7c1f6429d0456a5887",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/53a62fc8ab3fc3361f026f7c1f6429d0456a5887"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2046617b5e06ddb7f960b28219c155995542f029",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2046617b5e06ddb7f960b28219c155995542f029",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2046617b5e06ddb7f960b28219c155995542f029",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2046617b5e06ddb7f960b28219c155995542f029/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "80ff0344aebbdebdfa7433d855b0aa9de6c4bed3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80ff0344aebbdebdfa7433d855b0aa9de6c4bed3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/80ff0344aebbdebdfa7433d855b0aa9de6c4bed3"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 36,
      "deletions": 29
    },
    "files": [
      {
        "sha": "c51ae5a18dff426e3ebf436056fa75769a695444",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2046617b5e06ddb7f960b28219c155995542f029/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2046617b5e06ddb7f960b28219c155995542f029/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=2046617b5e06ddb7f960b28219c155995542f029",
        "patch": "@@ -627,7 +627,7 @@ class CNode\n     const CAddress addr;\n     std::string addrName;\n     CService addrLocal;\n-    int nVersion;\n+    std::atomic<int> nVersion;\n     // strSubVer is whatever byte array we read from the wire. However, this field is intended\n     // to be printed out, displayed to humans in various forms and so on. So we sanitize it and\n     // store the sanitized version in cleanSubVer. The original should be used when dealing with\n@@ -639,7 +639,7 @@ class CNode\n     bool fAddnode;\n     bool fClient;\n     const bool fInbound;\n-    bool fSuccessfullyConnected;\n+    std::atomic_bool fSuccessfullyConnected;\n     std::atomic_bool fDisconnect;\n     // We use fRelayTxes for two purposes -\n     // a) it allows us to not relay tx invs before receiving the peer's version message"
      },
      {
        "sha": "d1e6b1ae045a6ff1ceccb8f4f2ea0fb41306fb5d",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 27,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2046617b5e06ddb7f960b28219c155995542f029/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2046617b5e06ddb7f960b28219c155995542f029/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=2046617b5e06ddb7f960b28219c155995542f029",
        "patch": "@@ -1199,16 +1199,23 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n         CAddress addrFrom;\n         uint64_t nNonce = 1;\n         uint64_t nServiceInt;\n+        ServiceFlags nServices;\n         int nVersion;\n+        int nSendVersion;\n+        std::string strSubVer;\n+        int nStartingHeight = -1;\n+        bool fRelay = true;\n+\n         vRecv >> nVersion >> nServiceInt >> nTime >> addrMe;\n-        pfrom->nServices = ServiceFlags(nServiceInt);\n+        nSendVersion = std::min(nVersion, PROTOCOL_VERSION);\n+        nServices = ServiceFlags(nServiceInt);\n         if (!pfrom->fInbound)\n         {\n-            connman.SetServices(pfrom->addr, pfrom->nServices);\n+            connman.SetServices(pfrom->addr, nServices);\n         }\n-        if (pfrom->nServicesExpected & ~pfrom->nServices)\n+        if (pfrom->nServicesExpected & ~nServices)\n         {\n-            LogPrint(\"net\", \"peer=%d does not offer the expected services (%08x offered, %08x expected); disconnecting\\n\", pfrom->id, pfrom->nServices, pfrom->nServicesExpected);\n+            LogPrint(\"net\", \"peer=%d does not offer the expected services (%08x offered, %08x expected); disconnecting\\n\", pfrom->id, nServices, pfrom->nServicesExpected);\n             connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_NONSTANDARD,\n                                strprintf(\"Expected to offer services %08x\", pfrom->nServicesExpected)));\n             pfrom->fDisconnect = true;\n@@ -1230,20 +1237,13 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n         if (!vRecv.empty())\n             vRecv >> addrFrom >> nNonce;\n         if (!vRecv.empty()) {\n-            vRecv >> LIMITED_STRING(pfrom->strSubVer, MAX_SUBVERSION_LENGTH);\n-            pfrom->cleanSubVer = SanitizeString(pfrom->strSubVer);\n+            vRecv >> LIMITED_STRING(strSubVer, MAX_SUBVERSION_LENGTH);\n         }\n         if (!vRecv.empty()) {\n-            vRecv >> pfrom->nStartingHeight;\n+            vRecv >> nStartingHeight;\n         }\n-        {\n-            LOCK(pfrom->cs_filter);\n-            if (!vRecv.empty())\n-                vRecv >> pfrom->fRelayTxes; // set to true after we get the first filter* message\n-            else\n-                pfrom->fRelayTxes = true;\n-        }\n-\n+        if (!vRecv.empty())\n+            vRecv >> fRelay;\n         // Disconnect if we connected to ourself\n         if (pfrom->fInbound && !connman.CheckIncomingNonce(nNonce))\n         {\n@@ -1252,7 +1252,6 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n             return true;\n         }\n \n-        pfrom->addrLocal = addrMe;\n         if (pfrom->fInbound && addrMe.IsRoutable())\n         {\n             SeenLocal(addrMe);\n@@ -1262,9 +1261,25 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n         if (pfrom->fInbound)\n             PushNodeVersion(pfrom, connman, GetAdjustedTime());\n \n-        pfrom->fClient = !(pfrom->nServices & NODE_NETWORK);\n+        connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERACK));\n+\n+        pfrom->nServices = nServices;\n+        pfrom->addrLocal = addrMe;\n+        pfrom->strSubVer = strSubVer;\n+        pfrom->cleanSubVer = SanitizeString(strSubVer);\n+        pfrom->nStartingHeight = nStartingHeight;\n+        pfrom->fClient = !(nServices & NODE_NETWORK);\n+        {\n+            LOCK(pfrom->cs_filter);\n+            pfrom->fRelayTxes = fRelay; // set to true after we get the first filter* message\n+        }\n+\n+        // Change version\n+        pfrom->SetSendVersion(nSendVersion);\n+        pfrom->nVersion = nVersion;\n+        pfrom->fSuccessfullyConnected = true;\n \n-        if((pfrom->nServices & NODE_WITNESS))\n+        if((nServices & NODE_WITNESS))\n         {\n             LOCK(cs_main);\n             State(pfrom->GetId())->fHaveWitness = true;\n@@ -1276,12 +1291,6 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n         UpdatePreferredDownload(pfrom, State(pfrom->GetId()));\n         }\n \n-        // Change version\n-        connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERACK));\n-        int nSendVersion = std::min(nVersion, PROTOCOL_VERSION);\n-        pfrom->nVersion = nVersion;\n-        pfrom->SetSendVersion(nSendVersion);\n-\n         if (!pfrom->fInbound)\n         {\n             // Advertise our address\n@@ -1309,8 +1318,6 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n             connman.MarkAddressGood(pfrom->addr);\n         }\n \n-        pfrom->fSuccessfullyConnected = true;\n-\n         std::string remoteAddr;\n         if (fLogIPs)\n             remoteAddr = \", peeraddr=\" + pfrom->addr.ToString();\n@@ -1352,7 +1359,7 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n \n     if (strCommand == NetMsgType::VERACK)\n     {\n-        pfrom->SetRecvVersion(std::min(pfrom->nVersion, PROTOCOL_VERSION));\n+        pfrom->SetRecvVersion(std::min(pfrom->nVersion.load(), PROTOCOL_VERSION));\n \n         if (!pfrom->fInbound) {\n             // Mark this node as currently connected, so we update its timestamp later."
      }
    ]
  },
  {
    "sha": "12752af0cc99745d6273ef072645d999c26a9ef7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMjc1MmFmMGNjOTk3NDVkNjI3M2VmMDcyNjQ1ZDk5OWMyNmE5ZWY3",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-01-21T01:34:57Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-02T21:14:16Z"
      },
      "message": "net: don't run callbacks on nodes that haven't completed the version handshake\n\nSince ForEach* are can be used to send messages to  all nodes, the caller may\nend up sending a message before the version handshake is complete. To limit\nthis, filter out these nodes. While we're at it, may as well filter out\ndisconnected nodes as well.\n\nDelete unused methods rather than updating them.",
      "tree": {
        "sha": "a7e0a2f8beec66f4486fef0ced9450a16b616731",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a7e0a2f8beec66f4486fef0ced9450a16b616731"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/12752af0cc99745d6273ef072645d999c26a9ef7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12752af0cc99745d6273ef072645d999c26a9ef7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/12752af0cc99745d6273ef072645d999c26a9ef7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12752af0cc99745d6273ef072645d999c26a9ef7/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2046617b5e06ddb7f960b28219c155995542f029",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2046617b5e06ddb7f960b28219c155995542f029",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2046617b5e06ddb7f960b28219c155995542f029"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 25,
      "deletions": 57
    },
    "files": [
      {
        "sha": "19358dd5b795a1632c07711edaff1e1ebc6c8945",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12752af0cc99745d6273ef072645d999c26a9ef7/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12752af0cc99745d6273ef072645d999c26a9ef7/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=12752af0cc99745d6273ef072645d999c26a9ef7",
        "patch": "@@ -2630,6 +2630,11 @@ void CNode::AskFor(const CInv& inv)\n     mapAskFor.insert(std::make_pair(nRequestTime, inv));\n }\n \n+bool CConnman::NodeFullyConnected(const CNode* pnode)\n+{\n+    return pnode && pnode->fSuccessfullyConnected && !pnode->fDisconnect;\n+}\n+\n void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n {\n     size_t nMessageSize = msg.data.size();\n@@ -2680,7 +2685,7 @@ bool CConnman::ForNode(NodeId id, std::function<bool(CNode* pnode)> func)\n             break;\n         }\n     }\n-    return found != nullptr && func(found);\n+    return found != nullptr && NodeFullyConnected(found) && func(found);\n }\n \n int64_t PoissonNextSend(int64_t nNow, int average_interval_seconds) {"
      },
      {
        "sha": "05f178f9c50faa55d2ae5ef10f6eee0de52d9c06",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 19,
        "deletions": 56,
        "changes": 75,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12752af0cc99745d6273ef072645d999c26a9ef7/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12752af0cc99745d6273ef072645d999c26a9ef7/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=12752af0cc99745d6273ef072645d999c26a9ef7",
        "patch": "@@ -161,85 +161,45 @@ class CConnman\n \n     void PushMessage(CNode* pnode, CSerializedNetMsg&& msg);\n \n-    template<typename Callable>\n-    bool ForEachNodeContinueIf(Callable&& func)\n-    {\n-        LOCK(cs_vNodes);\n-        for (auto&& node : vNodes)\n-            if(!func(node))\n-                return false;\n-        return true;\n-    };\n-\n-    template<typename Callable>\n-    bool ForEachNodeContinueIf(Callable&& func) const\n-    {\n-        LOCK(cs_vNodes);\n-        for (const auto& node : vNodes)\n-            if(!func(node))\n-                return false;\n-        return true;\n-    };\n-\n-    template<typename Callable, typename CallableAfter>\n-    bool ForEachNodeContinueIfThen(Callable&& pre, CallableAfter&& post)\n-    {\n-        bool ret = true;\n-        LOCK(cs_vNodes);\n-        for (auto&& node : vNodes)\n-            if(!pre(node)) {\n-                ret = false;\n-                break;\n-            }\n-        post();\n-        return ret;\n-    };\n-\n-    template<typename Callable, typename CallableAfter>\n-    bool ForEachNodeContinueIfThen(Callable&& pre, CallableAfter&& post) const\n-    {\n-        bool ret = true;\n-        LOCK(cs_vNodes);\n-        for (const auto& node : vNodes)\n-            if(!pre(node)) {\n-                ret = false;\n-                break;\n-            }\n-        post();\n-        return ret;\n-    };\n-\n     template<typename Callable>\n     void ForEachNode(Callable&& func)\n     {\n         LOCK(cs_vNodes);\n-        for (auto&& node : vNodes)\n-            func(node);\n+        for (auto&& node : vNodes) {\n+            if (NodeFullyConnected(node))\n+                func(node);\n+        }\n     };\n \n     template<typename Callable>\n     void ForEachNode(Callable&& func) const\n     {\n         LOCK(cs_vNodes);\n-        for (const auto& node : vNodes)\n-            func(node);\n+        for (auto&& node : vNodes) {\n+            if (NodeFullyConnected(node))\n+                func(node);\n+        }\n     };\n \n     template<typename Callable, typename CallableAfter>\n     void ForEachNodeThen(Callable&& pre, CallableAfter&& post)\n     {\n         LOCK(cs_vNodes);\n-        for (auto&& node : vNodes)\n-            pre(node);\n+        for (auto&& node : vNodes) {\n+            if (NodeFullyConnected(node))\n+                pre(node);\n+        }\n         post();\n     };\n \n     template<typename Callable, typename CallableAfter>\n     void ForEachNodeThen(Callable&& pre, CallableAfter&& post) const\n     {\n         LOCK(cs_vNodes);\n-        for (const auto& node : vNodes)\n-            pre(node);\n+        for (auto&& node : vNodes) {\n+            if (NodeFullyConnected(node))\n+                pre(node);\n+        }\n         post();\n     };\n \n@@ -372,6 +332,9 @@ class CConnman\n     void RecordBytesRecv(uint64_t bytes);\n     void RecordBytesSent(uint64_t bytes);\n \n+    // Whether the node should be passed out in ForEach* callbacks\n+    static bool NodeFullyConnected(const CNode* pnode);\n+\n     // Network usage totals\n     CCriticalSection cs_totalBytesRecv;\n     CCriticalSection cs_totalBytesSent;"
      }
    ]
  },
  {
    "sha": "7a8c2519015650acd51eaf42719f04e53f839bbe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YThjMjUxOTAxNTY1MGFjZDUxZWFmNDI3MTlmMDRlNTNmODM5YmJl",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-01-26T17:35:49Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-02T21:14:16Z"
      },
      "message": "net: Disallow sending messages until the version handshake is complete\n\nThis is a change in behavior, though it's much more sane now than before.",
      "tree": {
        "sha": "a0dde75654c96f4c40654e083217d4c63fc7f747",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a0dde75654c96f4c40654e083217d4c63fc7f747"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7a8c2519015650acd51eaf42719f04e53f839bbe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a8c2519015650acd51eaf42719f04e53f839bbe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7a8c2519015650acd51eaf42719f04e53f839bbe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a8c2519015650acd51eaf42719f04e53f839bbe/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "12752af0cc99745d6273ef072645d999c26a9ef7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12752af0cc99745d6273ef072645d999c26a9ef7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/12752af0cc99745d6273ef072645d999c26a9ef7"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 7,
      "deletions": 3
    },
    "files": [
      {
        "sha": "a7acd6edffd13a4d061c36d81d35b8aaa616a757",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a8c2519015650acd51eaf42719f04e53f839bbe/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a8c2519015650acd51eaf42719f04e53f839bbe/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=7a8c2519015650acd51eaf42719f04e53f839bbe",
        "patch": "@@ -1277,7 +1277,6 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n         // Change version\n         pfrom->SetSendVersion(nSendVersion);\n         pfrom->nVersion = nVersion;\n-        pfrom->fSuccessfullyConnected = true;\n \n         if((nServices & NODE_WITNESS))\n         {\n@@ -1387,6 +1386,7 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n             nCMPCTBLOCKVersion = 1;\n             connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::SENDCMPCT, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion));\n         }\n+        pfrom->fSuccessfullyConnected = true;\n     }\n \n \n@@ -2725,8 +2725,8 @@ bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsg\n {\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     {\n-        // Don't send anything until we get its version message\n-        if (pto->nVersion == 0 || pto->fDisconnect)\n+        // Don't send anything until the version handshake is complete\n+        if (!pto->fSuccessfullyConnected || pto->fDisconnect)\n             return true;\n \n         // If we get here, the outgoing message serialization version is set and can't change."
      },
      {
        "sha": "a8f09ba6aef7a74d5b6c4a46fd2fa2803ec92fce",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a8c2519015650acd51eaf42719f04e53f839bbe/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a8c2519015650acd51eaf42719f04e53f839bbe/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=7a8c2519015650acd51eaf42719f04e53f839bbe",
        "patch": "@@ -55,6 +55,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n     dummyNode1.SetSendVersion(PROTOCOL_VERSION);\n     GetNodeSignals().InitializeNode(&dummyNode1, *connman);\n     dummyNode1.nVersion = 1;\n+    dummyNode1.fSuccessfullyConnected = true;\n     Misbehaving(dummyNode1.GetId(), 100); // Should get banned\n     SendMessages(&dummyNode1, *connman, interruptDummy);\n     BOOST_CHECK(connman->IsBanned(addr1));\n@@ -65,6 +66,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n     dummyNode2.SetSendVersion(PROTOCOL_VERSION);\n     GetNodeSignals().InitializeNode(&dummyNode2, *connman);\n     dummyNode2.nVersion = 1;\n+    dummyNode2.fSuccessfullyConnected = true;\n     Misbehaving(dummyNode2.GetId(), 50);\n     SendMessages(&dummyNode2, *connman, interruptDummy);\n     BOOST_CHECK(!connman->IsBanned(addr2)); // 2 not banned yet...\n@@ -85,6 +87,7 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n     dummyNode1.SetSendVersion(PROTOCOL_VERSION);\n     GetNodeSignals().InitializeNode(&dummyNode1, *connman);\n     dummyNode1.nVersion = 1;\n+    dummyNode1.fSuccessfullyConnected = true;\n     Misbehaving(dummyNode1.GetId(), 100);\n     SendMessages(&dummyNode1, *connman, interruptDummy);\n     BOOST_CHECK(!connman->IsBanned(addr1));\n@@ -110,6 +113,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     dummyNode.SetSendVersion(PROTOCOL_VERSION);\n     GetNodeSignals().InitializeNode(&dummyNode, *connman);\n     dummyNode.nVersion = 1;\n+    dummyNode.fSuccessfullyConnected = true;\n \n     Misbehaving(dummyNode.GetId(), 100);\n     SendMessages(&dummyNode, *connman, interruptDummy);"
      }
    ]
  },
  {
    "sha": "08bb6f4ed48359aedd869450b99799b9c734084b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOGJiNmY0ZWQ0ODM1OWFlZGQ4Njk0NTBiOTk3OTliOWM3MzQwODRi",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-02T19:33:41Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-02T21:14:16Z"
      },
      "message": "net: log an error rather than asserting if send version is misused\n\nAlso cleaned up the comments and moved from the header to the .cpp so that\nlogging headers aren't needed from net.h",
      "tree": {
        "sha": "57b415e1f950001d44192ec2d071875661a27f19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/57b415e1f950001d44192ec2d071875661a27f19"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/08bb6f4ed48359aedd869450b99799b9c734084b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08bb6f4ed48359aedd869450b99799b9c734084b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/08bb6f4ed48359aedd869450b99799b9c734084b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08bb6f4ed48359aedd869450b99799b9c734084b/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7a8c2519015650acd51eaf42719f04e53f839bbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a8c2519015650acd51eaf42719f04e53f839bbe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7a8c2519015650acd51eaf42719f04e53f839bbe"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 29,
      "deletions": 19
    },
    "files": [
      {
        "sha": "db914096f8896c52b65fb723c417570c83348eec",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08bb6f4ed48359aedd869450b99799b9c734084b/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08bb6f4ed48359aedd869450b99799b9c734084b/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=08bb6f4ed48359aedd869450b99799b9c734084b",
        "patch": "@@ -689,6 +689,33 @@ bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete\n     return true;\n }\n \n+void CNode::SetSendVersion(int nVersionIn)\n+{\n+    // Send version may only be changed in the version message, and\n+    // only one version message is allowed per session. We can therefore\n+    // treat this value as const and even atomic as long as it's only used\n+    // once a version message has been successfully processed. Any attempt to\n+    // set this twice is an error.\n+    if (nSendVersion != 0) {\n+        error(\"Send version already set for node: %i. Refusing to change from %i to %i\", id, nSendVersion, nVersionIn);\n+    } else {\n+        nSendVersion = nVersionIn;\n+    }\n+}\n+\n+int CNode::GetSendVersion() const\n+{\n+    // The send version should always be explicitly set to\n+    // INIT_PROTO_VERSION rather than using this value until SetSendVersion\n+    // has been called.\n+    if (nSendVersion == 0) {\n+        error(\"Requesting unset send version for node: %i. Using %i\", id, INIT_PROTO_VERSION);\n+        return INIT_PROTO_VERSION;\n+    }\n+    return nSendVersion;\n+}\n+\n+\n int CNetMessage::readHeader(const char *pch, unsigned int nBytes)\n {\n     // copy data to temporary parsing buffer"
      },
      {
        "sha": "1e3033785ef40401fb6d8f68bb21bcd9528968a0",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 19,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08bb6f4ed48359aedd869450b99799b9c734084b/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08bb6f4ed48359aedd869450b99799b9c734084b/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=08bb6f4ed48359aedd869450b99799b9c734084b",
        "patch": "@@ -723,25 +723,8 @@ class CNode\n     {\n         return nRecvVersion;\n     }\n-    void SetSendVersion(int nVersionIn)\n-    {\n-        // Send version may only be changed in the version message, and\n-        // only one version message is allowed per session. We can therefore\n-        // treat this value as const and even atomic as long as it's only used\n-        // once the handshake is complete. Any attempt to set this twice is an\n-        // error.\n-        assert(nSendVersion == 0);\n-        nSendVersion = nVersionIn;\n-    }\n-\n-    int GetSendVersion() const\n-    {\n-        // The send version should always be explicitly set to\n-        // INIT_PROTO_VERSION rather than using this value until the handshake\n-        // is complete.\n-        assert(nSendVersion != 0);\n-        return nSendVersion;\n-    }\n+    void SetSendVersion(int nVersionIn);\n+    int GetSendVersion() const;\n \n     CNode* AddRef()\n     {"
      }
    ]
  },
  {
    "sha": "7ea0ad539ff83f09cf617a9fb7c4d774e45efdc0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZWEwYWQ1MzlmZjgzZjA5Y2Y2MTdhOWZiN2M0ZDc3NGU0NWVmZGMw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-06-06T18:45:35Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-02T22:32:27Z"
      },
      "message": "Fail in DecodeHexTx if there is extra data at the end",
      "tree": {
        "sha": "341c591b9f6a281ec39ffa612808c9780b8b12a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/341c591b9f6a281ec39ffa612808c9780b8b12a5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7ea0ad539ff83f09cf617a9fb7c4d774e45efdc0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ea0ad539ff83f09cf617a9fb7c4d774e45efdc0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7ea0ad539ff83f09cf617a9fb7c4d774e45efdc0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ea0ad539ff83f09cf617a9fb7c4d774e45efdc0/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a8d667e3bc74e71824fd919beaf81e7e73053022",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ea0ad539ff83f09cf617a9fb7c4d774e45efdc0/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ea0ad539ff83f09cf617a9fb7c4d774e45efdc0/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=7ea0ad539ff83f09cf617a9fb7c4d774e45efdc0",
        "patch": "@@ -111,6 +111,8 @@ bool DecodeHexTx(CMutableTransaction& tx, const std::string& strHexTx, bool fTry\n     CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION);\n     try {\n         ssData >> tx;\n+        if (!ssData.empty())\n+            return false;\n     }\n     catch (const std::exception&) {\n         return false;"
      }
    ]
  },
  {
    "sha": "922bea90c274d45b13812a031242964aa15b6c1d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MjJiZWE5MGMyNzRkNDViMTM4MTJhMDMxMjQyOTY0YWExNWI2YzFk",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-28T16:32:34Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-02T22:32:27Z"
      },
      "message": "Better handle invalid parameters to signrawtransaction\n\nThis silently skips trying to merge signatures from inputs which\ndo not exist from transactions provided to signrawtransaction,\ninstead of hitting an assert.",
      "tree": {
        "sha": "346f2e9d3d3ec0179eecfe2a3e50d7a76a1dae94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/346f2e9d3d3ec0179eecfe2a3e50d7a76a1dae94"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/922bea90c274d45b13812a031242964aa15b6c1d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/922bea90c274d45b13812a031242964aa15b6c1d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/922bea90c274d45b13812a031242964aa15b6c1d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/922bea90c274d45b13812a031242964aa15b6c1d/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7ea0ad539ff83f09cf617a9fb7c4d774e45efdc0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ea0ad539ff83f09cf617a9fb7c4d774e45efdc0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7ea0ad539ff83f09cf617a9fb7c4d774e45efdc0"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "21396ebb09b78f9e625846adeb5763a778fa2b58",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/922bea90c274d45b13812a031242964aa15b6c1d/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/922bea90c274d45b13812a031242964aa15b6c1d/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=922bea90c274d45b13812a031242964aa15b6c1d",
        "patch": "@@ -835,7 +835,9 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n \n         // ... and merge in other signatures:\n         BOOST_FOREACH(const CMutableTransaction& txv, txVariants) {\n-            sigdata = CombineSignatures(prevPubKey, TransactionSignatureChecker(&txConst, i, amount), sigdata, DataFromTransaction(txv, i));\n+            if (txv.vin.size() > i) {\n+                sigdata = CombineSignatures(prevPubKey, TransactionSignatureChecker(&txConst, i, amount), sigdata, DataFromTransaction(txv, i));\n+            }\n         }\n \n         UpdateTransaction(mergedTx, i, sigdata);"
      }
    ]
  },
  {
    "sha": "691710a648c54c96c302ebbe666da85cfaada5f9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OTE3MTBhNjQ4YzU0Yzk2YzMwMmViYmU2NjZkYTg1Y2ZhYWRhNWY5",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-02T20:11:28Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-02T22:32:28Z"
      },
      "message": "[qa] Test that decoderawtransaction throws with extra data appended",
      "tree": {
        "sha": "363c7864c6279624bd5d4a2c948c0aa461d30dc2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/363c7864c6279624bd5d4a2c948c0aa461d30dc2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/691710a648c54c96c302ebbe666da85cfaada5f9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/691710a648c54c96c302ebbe666da85cfaada5f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/691710a648c54c96c302ebbe666da85cfaada5f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/691710a648c54c96c302ebbe666da85cfaada5f9/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "922bea90c274d45b13812a031242964aa15b6c1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/922bea90c274d45b13812a031242964aa15b6c1d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/922bea90c274d45b13812a031242964aa15b6c1d"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "009f01f79b53007ebc6d068b405f5d9c71f7c283",
        "filename": "qa/rpc-tests/signrawtransactions.py",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/691710a648c54c96c302ebbe666da85cfaada5f9/qa/rpc-tests/signrawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/691710a648c54c96c302ebbe666da85cfaada5f9/qa/rpc-tests/signrawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/signrawtransactions.py?ref=691710a648c54c96c302ebbe666da85cfaada5f9",
        "patch": "@@ -78,6 +78,16 @@ def script_verification_error_test(self):\n         outputs = {'mpLQjfK79b7CCV4VMJWEWAj5Mpx8Up5zxB': 0.1}\n \n         rawTx = self.nodes[0].createrawtransaction(inputs, outputs)\n+\n+        # Make sure decoderawtransaction is at least marginally sane\n+        decodedRawTx = self.nodes[0].decoderawtransaction(rawTx)\n+        for i, inp in enumerate(inputs):\n+            assert_equal(decodedRawTx[\"vin\"][i][\"txid\"], inp[\"txid\"])\n+            assert_equal(decodedRawTx[\"vin\"][i][\"vout\"], inp[\"vout\"])\n+\n+        # Make sure decoderawtransaction throws if there is extra data\n+        assert_raises(JSONRPCException, self.nodes[0].decoderawtransaction, rawTx + \"00\")\n+\n         rawTxSigned = self.nodes[0].signrawtransaction(rawTx, scripts, privKeys)\n \n         # 3) The transaction has no complete set of signatures"
      }
    ]
  },
  {
    "sha": "ec4f7e433e5b1724ca427e73fb264de693e82235",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYzRmN2U0MzNlNWIxNzI0Y2E0MjdlNzNmYjI2NGRlNjkzZTgyMjM1",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-02T21:24:31Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-02T22:32:28Z"
      },
      "message": "[qa] Add second input to signrawtransaction test case",
      "tree": {
        "sha": "d4ffb1e47d199f1ef5749a878010414da97c3f6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d4ffb1e47d199f1ef5749a878010414da97c3f6d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ec4f7e433e5b1724ca427e73fb264de693e82235",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec4f7e433e5b1724ca427e73fb264de693e82235",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ec4f7e433e5b1724ca427e73fb264de693e82235",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec4f7e433e5b1724ca427e73fb264de693e82235/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "691710a648c54c96c302ebbe666da85cfaada5f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/691710a648c54c96c302ebbe666da85cfaada5f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/691710a648c54c96c302ebbe666da85cfaada5f9"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 5,
      "deletions": 3
    },
    "files": [
      {
        "sha": "1705ab96c41dcb262a6d99952893fbfe21919db2",
        "filename": "qa/rpc-tests/signrawtransactions.py",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec4f7e433e5b1724ca427e73fb264de693e82235/qa/rpc-tests/signrawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec4f7e433e5b1724ca427e73fb264de693e82235/qa/rpc-tests/signrawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/signrawtransactions.py?ref=ec4f7e433e5b1724ca427e73fb264de693e82235",
        "patch": "@@ -26,12 +26,14 @@ def successful_signing_test(self):\n \n         1) The transaction has a complete set of signatures\n         2) No script verification error occurred\"\"\"\n-        privKeys = ['cUeKHd5orzT3mz8P9pxyREHfsWtVfgsfDjiZZBcjUBAaGk1BTj7N']\n+        privKeys = ['cUeKHd5orzT3mz8P9pxyREHfsWtVfgsfDjiZZBcjUBAaGk1BTj7N', 'cVKpPfVKSJxKqVpE9awvXNWuLHCa5j5tiE7K6zbUSptFpTEtiFrA']\n \n         inputs = [\n-            # Valid pay-to-pubkey script\n+            # Valid pay-to-pubkey scripts\n             {'txid': '9b907ef1e3c26fc71fe4a4b3580bc75264112f95050014157059c736f0202e71', 'vout': 0,\n-             'scriptPubKey': '76a91460baa0f494b38ce3c940dea67f3804dc52d1fb9488ac'}\n+             'scriptPubKey': '76a91460baa0f494b38ce3c940dea67f3804dc52d1fb9488ac'},\n+            {'txid': '83a4f6a6b73660e13ee6cb3c6063fa3759c50c9b7521d0536022961898f4fb02', 'vout': 0,\n+             'scriptPubKey': '76a914669b857c03a5ed269d5d85a1ffac9ed5d663072788ac'},\n         ]\n \n         outputs = {'mpLQjfK79b7CCV4VMJWEWAj5Mpx8Up5zxB': 0.1}"
      }
    ]
  },
  {
    "sha": "4ec057dfa72fbb910fec69305af1ff6d5e03ca30",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZWMwNTdkZmE3MmZiYjkxMGZlYzY5MzA1YWYxZmY2ZDVlMDNjYTMw",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-02T22:34:22Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-02T22:34:22Z"
      },
      "message": "[wallet] Set correct metadata on bumpfee wallet transactions\n\nPreserve comment, order form, and account strings from the original wallet\ntransaction. Also set fTimeReceivedIsTxTime and fFromMe fields for consistency\nwith CWallet::CreateTransaction. The latter two fields don't influence current\nwallet behavior, but do record that the transaction originated in the wallet\ninstead of coming from the network or sendrawtransaction.",
      "tree": {
        "sha": "5af99d42db58e14be8b403783411c0af67dfd3c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5af99d42db58e14be8b403783411c0af67dfd3c3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4ec057dfa72fbb910fec69305af1ff6d5e03ca30",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ec057dfa72fbb910fec69305af1ff6d5e03ca30",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4ec057dfa72fbb910fec69305af1ff6d5e03ca30",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ec057dfa72fbb910fec69305af1ff6d5e03ca30/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 14,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ac282796c1460e717485d1798fea4e35197691fe",
        "filename": "qa/rpc-tests/bumpfee.py",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ec057dfa72fbb910fec69305af1ff6d5e03ca30/qa/rpc-tests/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ec057dfa72fbb910fec69305af1ff6d5e03ca30/qa/rpc-tests/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bumpfee.py?ref=4ec057dfa72fbb910fec69305af1ff6d5e03ca30",
        "patch": "@@ -69,6 +69,7 @@ def run_test(self):\n         test_rebumping(rbf_node, dest_address)\n         test_rebumping_not_replaceable(rbf_node, dest_address)\n         test_unconfirmed_not_spendable(rbf_node, rbf_node_address)\n+        test_bumpfee_metadata(rbf_node, dest_address)\n         test_locked_wallet_fails(rbf_node, dest_address)\n         print(\"Success\")\n \n@@ -257,6 +258,14 @@ def test_unconfirmed_not_spendable(rbf_node, rbf_node_address):\n             if t[\"txid\"] == rbfid and t[\"address\"] == rbf_node_address and t[\"spendable\"]), 1)\n \n \n+def test_bumpfee_metadata(rbf_node, dest_address):\n+    rbfid = rbf_node.sendtoaddress(dest_address, 0.00090000, \"comment value\", \"to value\")\n+    bumped_tx = rbf_node.bumpfee(rbfid)\n+    bumped_wtx = rbf_node.gettransaction(bumped_tx[\"txid\"])\n+    assert_equal(bumped_wtx[\"comment\"], \"comment value\")\n+    assert_equal(bumped_wtx[\"to\"], \"to value\")\n+\n+\n def test_locked_wallet_fails(rbf_node, dest_address):\n     rbfid = create_fund_sign_send(rbf_node, {dest_address: 0.00090000})\n     rbf_node.walletlock()"
      },
      {
        "sha": "45b572aa2e2e6cff596552d8dd332728644c4d27",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ec057dfa72fbb910fec69305af1ff6d5e03ca30/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ec057dfa72fbb910fec69305af1ff6d5e03ca30/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=4ec057dfa72fbb910fec69305af1ff6d5e03ca30",
        "patch": "@@ -2944,7 +2944,12 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     // commit/broadcast the tx\n     CReserveKey reservekey(pwalletMain);\n     CWalletTx wtxBumped(pwalletMain, MakeTransactionRef(std::move(tx)));\n+    wtxBumped.mapValue = wtx.mapValue;\n     wtxBumped.mapValue[\"replaces_txid\"] = hash.ToString();\n+    wtxBumped.vOrderForm = wtx.vOrderForm;\n+    wtxBumped.strFromAccount = wtx.strFromAccount;\n+    wtxBumped.fTimeReceivedIsTxTime = true;\n+    wtxBumped.fFromMe = true;\n     CValidationState state;\n     if (!pwalletMain->CommitTransaction(wtxBumped, reservekey, g_connman.get(), state)) {\n         // NOTE: CommitTransaction never returns false, so this should never happen."
      }
    ]
  },
  {
    "sha": "6dbfe08c29535bb7b0359de8fe22acedcbf3532a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZGJmZTA4YzI5NTM1YmI3YjAzNTlkZThmZTIyYWNlZGNiZjM1MzJh",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-02T21:24:52Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-02T22:40:49Z"
      },
      "message": "[qa] test signrawtransaction merge with missing inputs",
      "tree": {
        "sha": "578be411a76bd269454aac797efe135d7e376cda",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/578be411a76bd269454aac797efe135d7e376cda"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6dbfe08c29535bb7b0359de8fe22acedcbf3532a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6dbfe08c29535bb7b0359de8fe22acedcbf3532a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6dbfe08c29535bb7b0359de8fe22acedcbf3532a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6dbfe08c29535bb7b0359de8fe22acedcbf3532a/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ec4f7e433e5b1724ca427e73fb264de693e82235",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec4f7e433e5b1724ca427e73fb264de693e82235",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ec4f7e433e5b1724ca427e73fb264de693e82235"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 16,
      "deletions": 0
    },
    "files": [
      {
        "sha": "109312bd5f2dfd4b05a6bcda0a5c068c1e21b4f8",
        "filename": "qa/rpc-tests/signrawtransactions.py",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dbfe08c29535bb7b0359de8fe22acedcbf3532a/qa/rpc-tests/signrawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dbfe08c29535bb7b0359de8fe22acedcbf3532a/qa/rpc-tests/signrawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/signrawtransactions.py?ref=6dbfe08c29535bb7b0359de8fe22acedcbf3532a",
        "patch": "@@ -48,6 +48,22 @@ def successful_signing_test(self):\n         # 2) No script verification error occurred\n         assert 'errors' not in rawTxSigned\n \n+        # Check that signrawtransaction doesn't blow up on garbage merge attempts\n+        dummyTxInconsistent = self.nodes[0].createrawtransaction([inputs[0]], outputs)\n+        rawTxUnsigned = self.nodes[0].signrawtransaction(rawTx + dummyTxInconsistent, inputs)\n+\n+        assert 'complete' in rawTxUnsigned\n+        assert_equal(rawTxUnsigned['complete'], False)\n+\n+        # Check that signrawtransaction properly merges unsigned and signed txn, even with garbage in the middle\n+        rawTxSigned2 = self.nodes[0].signrawtransaction(rawTxUnsigned[\"hex\"] + dummyTxInconsistent + rawTxSigned[\"hex\"], inputs)\n+\n+        assert 'complete' in rawTxSigned2\n+        assert_equal(rawTxSigned2['complete'], True)\n+\n+        assert 'errors' not in rawTxSigned2\n+\n+\n     def script_verification_error_test(self):\n         \"\"\"Creates and signs a raw transaction with valid (vin 0), invalid (vin 1) and one missing (vin 2) input script.\n "
      }
    ]
  },
  {
    "sha": "fd13eca147be80f3ebd1a5a1db1ce75bbeeb1953",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZDEzZWNhMTQ3YmU4MGYzZWJkMWE1YTFkYjFjZTc1YmJlZWIxOTUz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-03T01:03:46Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-03T01:03:46Z"
      },
      "message": "Lock cs_vSend and cs_inventory in a consistent order even in TRY",
      "tree": {
        "sha": "20264c24f6a72441d97670f977f9a8cc86ed89aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/20264c24f6a72441d97670f977f9a8cc86ed89aa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fd13eca147be80f3ebd1a5a1db1ce75bbeeb1953",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd13eca147be80f3ebd1a5a1db1ce75bbeeb1953",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fd13eca147be80f3ebd1a5a1db1ce75bbeeb1953",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd13eca147be80f3ebd1a5a1db1ce75bbeeb1953/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 6,
      "deletions": 5
    },
    "files": [
      {
        "sha": "5cddc6f44dcc026a342f0d90643ec39441207c3a",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd13eca147be80f3ebd1a5a1db1ce75bbeeb1953/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd13eca147be80f3ebd1a5a1db1ce75bbeeb1953/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=fd13eca147be80f3ebd1a5a1db1ce75bbeeb1953",
        "patch": "@@ -1070,12 +1070,13 @@ void CConnman::ThreadSocketHandler()\n                 {\n                     bool fDelete = false;\n                     {\n-                        TRY_LOCK(pnode->cs_vSend, lockSend);\n-                        if (lockSend)\n+                        TRY_LOCK(pnode->cs_inventory, lockInv);\n+                        if (lockInv)\n                         {\n-                                TRY_LOCK(pnode->cs_inventory, lockInv);\n-                                if (lockInv)\n-                                    fDelete = true;\n+                            TRY_LOCK(pnode->cs_vSend, lockSend);\n+                            if (lockSend) {\n+                                fDelete = true;\n+                            }\n                         }\n                     }\n                     if (fDelete)"
      }
    ]
  },
  {
    "sha": "8465631845eac3db834942a4feb50f65c3401c68",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NDY1NjMxODQ1ZWFjM2RiODM0OTQyYTRmZWI1MGY2NWMzNDAxYzY4",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-03T03:22:01Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-03T03:31:27Z"
      },
      "message": "Always enforce lock strict lock ordering (try or not)",
      "tree": {
        "sha": "cdd5873fa56481570050a64ef6216cf5a880e5de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cdd5873fa56481570050a64ef6216cf5a880e5de"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8465631845eac3db834942a4feb50f65c3401c68",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8465631845eac3db834942a4feb50f65c3401c68",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8465631845eac3db834942a4feb50f65c3401c68",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8465631845eac3db834942a4feb50f65c3401c68/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fd13eca147be80f3ebd1a5a1db1ce75bbeeb1953",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd13eca147be80f3ebd1a5a1db1ce75bbeeb1953",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd13eca147be80f3ebd1a5a1db1ce75bbeeb1953"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 1,
      "deletions": 25
    },
    "files": [
      {
        "sha": "25773f08e9830f69322cff0294ec5fe2cdb986b8",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 25,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8465631845eac3db834942a4feb50f65c3401c68/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8465631845eac3db834942a4feb50f65c3401c68/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=8465631845eac3db834942a4feb50f65c3401c68",
        "patch": "@@ -77,52 +77,28 @@ boost::thread_specific_ptr<LockStack> lockstack;\n \n static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch, const LockStack& s1, const LockStack& s2)\n {\n-    // We attempt to not assert on probably-not deadlocks by assuming that\n-    // a try lock will immediately have otherwise bailed if it had\n-    // failed to get the lock\n-    // We do this by, for the locks which triggered the potential deadlock,\n-    // in either lockorder, checking that the second of the two which is locked\n-    // is only a TRY_LOCK, ignoring locks if they are reentrant.\n-    bool firstLocked = false;\n-    bool secondLocked = false;\n-    bool onlyMaybeDeadlock = false;\n-\n     LogPrintf(\"POTENTIAL DEADLOCK DETECTED\\n\");\n     LogPrintf(\"Previous lock order was:\\n\");\n     BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, s2) {\n         if (i.first == mismatch.first) {\n             LogPrintf(\" (1)\");\n-            if (!firstLocked && secondLocked && i.second.fTry)\n-                onlyMaybeDeadlock = true;\n-            firstLocked = true;\n         }\n         if (i.first == mismatch.second) {\n             LogPrintf(\" (2)\");\n-            if (!secondLocked && firstLocked && i.second.fTry)\n-                onlyMaybeDeadlock = true;\n-            secondLocked = true;\n         }\n         LogPrintf(\" %s\\n\", i.second.ToString());\n     }\n-    firstLocked = false;\n-    secondLocked = false;\n     LogPrintf(\"Current lock order is:\\n\");\n     BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, s1) {\n         if (i.first == mismatch.first) {\n             LogPrintf(\" (1)\");\n-            if (!firstLocked && secondLocked && i.second.fTry)\n-                onlyMaybeDeadlock = true;\n-            firstLocked = true;\n         }\n         if (i.first == mismatch.second) {\n             LogPrintf(\" (2)\");\n-            if (!secondLocked && firstLocked && i.second.fTry)\n-                onlyMaybeDeadlock = true;\n-            secondLocked = true;\n         }\n         LogPrintf(\" %s\\n\", i.second.ToString());\n     }\n-    assert(onlyMaybeDeadlock);\n+    assert(false);\n }\n \n static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)"
      }
    ]
  },
  {
    "sha": "7b2d96b634f9fd283480caf3bece56138d0587e3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YjJkOTZiNjM0ZjlmZDI4MzQ4MGNhZjNiZWNlNTYxMzhkMDU4N2Uz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-03T18:48:48Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-03T18:50:17Z"
      },
      "message": "Access WorkQueue::running only within the cs lock.\n\nThis removes a \"race\" between Interrupt() and Run(), though it\nshould not effect any of our supported platforms.",
      "tree": {
        "sha": "d98da761bff6f498388ea56ef6d0b11649a92881",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d98da761bff6f498388ea56ef6d0b11649a92881"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7b2d96b634f9fd283480caf3bece56138d0587e3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b2d96b634f9fd283480caf3bece56138d0587e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7b2d96b634f9fd283480caf3bece56138d0587e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b2d96b634f9fd283480caf3bece56138d0587e3/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e1763c6ad276ca3b00b4a707f7b8a8af2d90bbc4",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b2d96b634f9fd283480caf3bece56138d0587e3/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b2d96b634f9fd283480caf3bece56138d0587e3/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=7b2d96b634f9fd283480caf3bece56138d0587e3",
        "patch": "@@ -118,7 +118,7 @@ class WorkQueue\n     void Run()\n     {\n         ThreadCounter count(*this);\n-        while (running) {\n+        while (true) {\n             std::unique_ptr<WorkItem> i;\n             {\n                 std::unique_lock<std::mutex> lock(cs);"
      }
    ]
  },
  {
    "sha": "a3511628d0976c15ab71c244853cdda4b25e2ad4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMzUxMTYyOGQwOTc2YzE1YWI3MWMyNDQ4NTNjZGRhNGIyNWUyYWQ0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-04T10:37:14Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-04T10:37:26Z"
      },
      "message": "Merge #9679: Access WorkQueue::running only within the cs lock\n\n7b2d96b Access WorkQueue::running only within the cs lock. (Matt Corallo)",
      "tree": {
        "sha": "d98da761bff6f498388ea56ef6d0b11649a92881",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d98da761bff6f498388ea56ef6d0b11649a92881"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a3511628d0976c15ab71c244853cdda4b25e2ad4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYla7mAAoJEHSBCwEjRsmmzsQIAKHdryMcI1s8Q14W52QomRIp\nPJ4G4n4H2VC9Da2hOmnqErsZ45Kp1xhdHcYYZ0ob3PXbFO/GH4XqPSps8UlyQm8H\nTwW0xZgyE6Fyy4AS+kIjRPjl34mjso4oN+H5+TlD0NPTRbFhEal73+66di6qSIQR\n/+5cvLRQQ11uyW3d8kicAzeqqM0Cn8bxc8PjSeRR/a2EVh5iZ4JnB9gUvkT/qmFU\nY3HzK5sfgfPKC7uznVabsxY1VvAInPNLIF9Hzi6VvpegrqIMWL8yA2R4tVG3+WHy\npwBTAnMBfCqhfUp6tDz8+ZegZYT9H8LarLLYQbfEkUxKZ3sY6LV5zAR+OEnuRTM=\n=txox\n-----END PGP SIGNATURE-----",
        "payload": "tree d98da761bff6f498388ea56ef6d0b11649a92881\nparent 1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce\nparent 7b2d96b634f9fd283480caf3bece56138d0587e3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1486204634 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1486204646 +0100\n\nMerge #9679: Access WorkQueue::running only within the cs lock\n\n7b2d96b Access WorkQueue::running only within the cs lock. (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3511628d0976c15ab71c244853cdda4b25e2ad4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a3511628d0976c15ab71c244853cdda4b25e2ad4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3511628d0976c15ab71c244853cdda4b25e2ad4/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce"
      },
      {
        "sha": "7b2d96b634f9fd283480caf3bece56138d0587e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b2d96b634f9fd283480caf3bece56138d0587e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7b2d96b634f9fd283480caf3bece56138d0587e3"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e1763c6ad276ca3b00b4a707f7b8a8af2d90bbc4",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3511628d0976c15ab71c244853cdda4b25e2ad4/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3511628d0976c15ab71c244853cdda4b25e2ad4/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=a3511628d0976c15ab71c244853cdda4b25e2ad4",
        "patch": "@@ -118,7 +118,7 @@ class WorkQueue\n     void Run()\n     {\n         ThreadCounter count(*this);\n-        while (running) {\n+        while (true) {\n             std::unique_ptr<WorkItem> i;\n             {\n                 std::unique_lock<std::mutex> lock(cs);"
      }
    ]
  },
  {
    "sha": "496691741dfe252ff477913a89e5363aa7030d71",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OTY2OTE3NDFkZmUyNTJmZjQ3NzkxM2E4OWU1MzYzYWE3MDMwZDcx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-04T10:37:57Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-04T10:38:02Z"
      },
      "message": "Merge #9609: net: fix remaining net assertions\n\n08bb6f4 net: log an error rather than asserting if send version is misused (Cory Fields)\n7a8c251 net: Disallow sending messages until the version handshake is complete (Cory Fields)\n12752af net: don't run callbacks on nodes that haven't completed the version handshake (Cory Fields)\n2046617 net: deserialize the entire version message locally (Cory Fields)\n80ff034 Dont deserialize nVersion into CNode, should fix #9212 (Matt Corallo)",
      "tree": {
        "sha": "22dcb0fe82ecb66a9f7dcab96e45312582c71a6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/22dcb0fe82ecb66a9f7dcab96e45312582c71a6d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/496691741dfe252ff477913a89e5363aa7030d71",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYla8KAAoJEHSBCwEjRsmm+jIIAJVmUnGgRV5bZzvYNvulbbTy\nMGfqrqET1Kbf205zhIRFqX+0VLi1sR3gvT+3LhjvWBW1wYErmJHVXT1VAwT0You4\nHO/YI607XlTyhvNYQGqjN39eEq08+atMuPQql2NIPGjCvX2BFQwKveIXC7n24ETM\nA3F8EKDaLu0P0TBPqhONZ0WQ2ZGT8K5ct9/GP5xb+Jvr9ODLDy7sH6zqvokObFU6\nmPMG9mxtcBz63nzZ4VVD6alm2q8GZrjVs6/VLKRJli09XIODHc+YQtaAzxjpo73Q\nfSf1aVSwIRTwr3eSgbIlwpIl/AuwpbpY9dYoNlLFn9LnOgZA4NG9RwHkAYblyx0=\n=s1aq\n-----END PGP SIGNATURE-----",
        "payload": "tree 22dcb0fe82ecb66a9f7dcab96e45312582c71a6d\nparent a3511628d0976c15ab71c244853cdda4b25e2ad4\nparent 08bb6f4ed48359aedd869450b99799b9c734084b\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1486204677 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1486204682 +0100\n\nMerge #9609: net: fix remaining net assertions\n\n08bb6f4 net: log an error rather than asserting if send version is misused (Cory Fields)\n7a8c251 net: Disallow sending messages until the version handshake is complete (Cory Fields)\n12752af net: don't run callbacks on nodes that haven't completed the version handshake (Cory Fields)\n2046617 net: deserialize the entire version message locally (Cory Fields)\n80ff034 Dont deserialize nVersion into CNode, should fix #9212 (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/496691741dfe252ff477913a89e5363aa7030d71",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/496691741dfe252ff477913a89e5363aa7030d71",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/496691741dfe252ff477913a89e5363aa7030d71/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a3511628d0976c15ab71c244853cdda4b25e2ad4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3511628d0976c15ab71c244853cdda4b25e2ad4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a3511628d0976c15ab71c244853cdda4b25e2ad4"
      },
      {
        "sha": "08bb6f4ed48359aedd869450b99799b9c734084b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08bb6f4ed48359aedd869450b99799b9c734084b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/08bb6f4ed48359aedd869450b99799b9c734084b"
      }
    ],
    "stats": {
      "total": 213,
      "additions": 102,
      "deletions": 111
    },
    "files": [
      {
        "sha": "db914096f8896c52b65fb723c417570c83348eec",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 1,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/496691741dfe252ff477913a89e5363aa7030d71/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/496691741dfe252ff477913a89e5363aa7030d71/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=496691741dfe252ff477913a89e5363aa7030d71",
        "patch": "@@ -689,6 +689,33 @@ bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete\n     return true;\n }\n \n+void CNode::SetSendVersion(int nVersionIn)\n+{\n+    // Send version may only be changed in the version message, and\n+    // only one version message is allowed per session. We can therefore\n+    // treat this value as const and even atomic as long as it's only used\n+    // once a version message has been successfully processed. Any attempt to\n+    // set this twice is an error.\n+    if (nSendVersion != 0) {\n+        error(\"Send version already set for node: %i. Refusing to change from %i to %i\", id, nSendVersion, nVersionIn);\n+    } else {\n+        nSendVersion = nVersionIn;\n+    }\n+}\n+\n+int CNode::GetSendVersion() const\n+{\n+    // The send version should always be explicitly set to\n+    // INIT_PROTO_VERSION rather than using this value until SetSendVersion\n+    // has been called.\n+    if (nSendVersion == 0) {\n+        error(\"Requesting unset send version for node: %i. Using %i\", id, INIT_PROTO_VERSION);\n+        return INIT_PROTO_VERSION;\n+    }\n+    return nSendVersion;\n+}\n+\n+\n int CNetMessage::readHeader(const char *pch, unsigned int nBytes)\n {\n     // copy data to temporary parsing buffer\n@@ -2630,6 +2657,11 @@ void CNode::AskFor(const CInv& inv)\n     mapAskFor.insert(std::make_pair(nRequestTime, inv));\n }\n \n+bool CConnman::NodeFullyConnected(const CNode* pnode)\n+{\n+    return pnode && pnode->fSuccessfullyConnected && !pnode->fDisconnect;\n+}\n+\n void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n {\n     size_t nMessageSize = msg.data.size();\n@@ -2680,7 +2712,7 @@ bool CConnman::ForNode(NodeId id, std::function<bool(CNode* pnode)> func)\n             break;\n         }\n     }\n-    return found != nullptr && func(found);\n+    return found != nullptr && NodeFullyConnected(found) && func(found);\n }\n \n int64_t PoissonNextSend(int64_t nNow, int average_interval_seconds) {"
      },
      {
        "sha": "1e3033785ef40401fb6d8f68bb21bcd9528968a0",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 23,
        "deletions": 77,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/496691741dfe252ff477913a89e5363aa7030d71/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/496691741dfe252ff477913a89e5363aa7030d71/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=496691741dfe252ff477913a89e5363aa7030d71",
        "patch": "@@ -161,85 +161,45 @@ class CConnman\n \n     void PushMessage(CNode* pnode, CSerializedNetMsg&& msg);\n \n-    template<typename Callable>\n-    bool ForEachNodeContinueIf(Callable&& func)\n-    {\n-        LOCK(cs_vNodes);\n-        for (auto&& node : vNodes)\n-            if(!func(node))\n-                return false;\n-        return true;\n-    };\n-\n-    template<typename Callable>\n-    bool ForEachNodeContinueIf(Callable&& func) const\n-    {\n-        LOCK(cs_vNodes);\n-        for (const auto& node : vNodes)\n-            if(!func(node))\n-                return false;\n-        return true;\n-    };\n-\n-    template<typename Callable, typename CallableAfter>\n-    bool ForEachNodeContinueIfThen(Callable&& pre, CallableAfter&& post)\n-    {\n-        bool ret = true;\n-        LOCK(cs_vNodes);\n-        for (auto&& node : vNodes)\n-            if(!pre(node)) {\n-                ret = false;\n-                break;\n-            }\n-        post();\n-        return ret;\n-    };\n-\n-    template<typename Callable, typename CallableAfter>\n-    bool ForEachNodeContinueIfThen(Callable&& pre, CallableAfter&& post) const\n-    {\n-        bool ret = true;\n-        LOCK(cs_vNodes);\n-        for (const auto& node : vNodes)\n-            if(!pre(node)) {\n-                ret = false;\n-                break;\n-            }\n-        post();\n-        return ret;\n-    };\n-\n     template<typename Callable>\n     void ForEachNode(Callable&& func)\n     {\n         LOCK(cs_vNodes);\n-        for (auto&& node : vNodes)\n-            func(node);\n+        for (auto&& node : vNodes) {\n+            if (NodeFullyConnected(node))\n+                func(node);\n+        }\n     };\n \n     template<typename Callable>\n     void ForEachNode(Callable&& func) const\n     {\n         LOCK(cs_vNodes);\n-        for (const auto& node : vNodes)\n-            func(node);\n+        for (auto&& node : vNodes) {\n+            if (NodeFullyConnected(node))\n+                func(node);\n+        }\n     };\n \n     template<typename Callable, typename CallableAfter>\n     void ForEachNodeThen(Callable&& pre, CallableAfter&& post)\n     {\n         LOCK(cs_vNodes);\n-        for (auto&& node : vNodes)\n-            pre(node);\n+        for (auto&& node : vNodes) {\n+            if (NodeFullyConnected(node))\n+                pre(node);\n+        }\n         post();\n     };\n \n     template<typename Callable, typename CallableAfter>\n     void ForEachNodeThen(Callable&& pre, CallableAfter&& post) const\n     {\n         LOCK(cs_vNodes);\n-        for (const auto& node : vNodes)\n-            pre(node);\n+        for (auto&& node : vNodes) {\n+            if (NodeFullyConnected(node))\n+                pre(node);\n+        }\n         post();\n     };\n \n@@ -372,6 +332,9 @@ class CConnman\n     void RecordBytesRecv(uint64_t bytes);\n     void RecordBytesSent(uint64_t bytes);\n \n+    // Whether the node should be passed out in ForEach* callbacks\n+    static bool NodeFullyConnected(const CNode* pnode);\n+\n     // Network usage totals\n     CCriticalSection cs_totalBytesRecv;\n     CCriticalSection cs_totalBytesSent;\n@@ -627,7 +590,7 @@ class CNode\n     const CAddress addr;\n     std::string addrName;\n     CService addrLocal;\n-    int nVersion;\n+    std::atomic<int> nVersion;\n     // strSubVer is whatever byte array we read from the wire. However, this field is intended\n     // to be printed out, displayed to humans in various forms and so on. So we sanitize it and\n     // store the sanitized version in cleanSubVer. The original should be used when dealing with\n@@ -639,7 +602,7 @@ class CNode\n     bool fAddnode;\n     bool fClient;\n     const bool fInbound;\n-    bool fSuccessfullyConnected;\n+    std::atomic_bool fSuccessfullyConnected;\n     std::atomic_bool fDisconnect;\n     // We use fRelayTxes for two purposes -\n     // a) it allows us to not relay tx invs before receiving the peer's version message\n@@ -760,25 +723,8 @@ class CNode\n     {\n         return nRecvVersion;\n     }\n-    void SetSendVersion(int nVersionIn)\n-    {\n-        // Send version may only be changed in the version message, and\n-        // only one version message is allowed per session. We can therefore\n-        // treat this value as const and even atomic as long as it's only used\n-        // once the handshake is complete. Any attempt to set this twice is an\n-        // error.\n-        assert(nSendVersion == 0);\n-        nSendVersion = nVersionIn;\n-    }\n-\n-    int GetSendVersion() const\n-    {\n-        // The send version should always be explicitly set to\n-        // INIT_PROTO_VERSION rather than using this value until the handshake\n-        // is complete.\n-        assert(nSendVersion != 0);\n-        return nSendVersion;\n-    }\n+    void SetSendVersion(int nVersionIn);\n+    int GetSendVersion() const;\n \n     CNode* AddRef()\n     {"
      },
      {
        "sha": "a7acd6edffd13a4d061c36d81d35b8aaa616a757",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 33,
        "changes": 75,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/496691741dfe252ff477913a89e5363aa7030d71/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/496691741dfe252ff477913a89e5363aa7030d71/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=496691741dfe252ff477913a89e5363aa7030d71",
        "patch": "@@ -1199,50 +1199,51 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n         CAddress addrFrom;\n         uint64_t nNonce = 1;\n         uint64_t nServiceInt;\n-        vRecv >> pfrom->nVersion >> nServiceInt >> nTime >> addrMe;\n-        pfrom->nServices = ServiceFlags(nServiceInt);\n+        ServiceFlags nServices;\n+        int nVersion;\n+        int nSendVersion;\n+        std::string strSubVer;\n+        int nStartingHeight = -1;\n+        bool fRelay = true;\n+\n+        vRecv >> nVersion >> nServiceInt >> nTime >> addrMe;\n+        nSendVersion = std::min(nVersion, PROTOCOL_VERSION);\n+        nServices = ServiceFlags(nServiceInt);\n         if (!pfrom->fInbound)\n         {\n-            connman.SetServices(pfrom->addr, pfrom->nServices);\n+            connman.SetServices(pfrom->addr, nServices);\n         }\n-        if (pfrom->nServicesExpected & ~pfrom->nServices)\n+        if (pfrom->nServicesExpected & ~nServices)\n         {\n-            LogPrint(\"net\", \"peer=%d does not offer the expected services (%08x offered, %08x expected); disconnecting\\n\", pfrom->id, pfrom->nServices, pfrom->nServicesExpected);\n+            LogPrint(\"net\", \"peer=%d does not offer the expected services (%08x offered, %08x expected); disconnecting\\n\", pfrom->id, nServices, pfrom->nServicesExpected);\n             connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_NONSTANDARD,\n                                strprintf(\"Expected to offer services %08x\", pfrom->nServicesExpected)));\n             pfrom->fDisconnect = true;\n             return false;\n         }\n \n-        if (pfrom->nVersion < MIN_PEER_PROTO_VERSION)\n+        if (nVersion < MIN_PEER_PROTO_VERSION)\n         {\n             // disconnect from peers older than this proto version\n-            LogPrintf(\"peer=%d using obsolete version %i; disconnecting\\n\", pfrom->id, pfrom->nVersion);\n+            LogPrintf(\"peer=%d using obsolete version %i; disconnecting\\n\", pfrom->id, nVersion);\n             connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_OBSOLETE,\n                                strprintf(\"Version must be %d or greater\", MIN_PEER_PROTO_VERSION)));\n             pfrom->fDisconnect = true;\n             return false;\n         }\n \n-        if (pfrom->nVersion == 10300)\n-            pfrom->nVersion = 300;\n+        if (nVersion == 10300)\n+            nVersion = 300;\n         if (!vRecv.empty())\n             vRecv >> addrFrom >> nNonce;\n         if (!vRecv.empty()) {\n-            vRecv >> LIMITED_STRING(pfrom->strSubVer, MAX_SUBVERSION_LENGTH);\n-            pfrom->cleanSubVer = SanitizeString(pfrom->strSubVer);\n+            vRecv >> LIMITED_STRING(strSubVer, MAX_SUBVERSION_LENGTH);\n         }\n         if (!vRecv.empty()) {\n-            vRecv >> pfrom->nStartingHeight;\n+            vRecv >> nStartingHeight;\n         }\n-        {\n-            LOCK(pfrom->cs_filter);\n-            if (!vRecv.empty())\n-                vRecv >> pfrom->fRelayTxes; // set to true after we get the first filter* message\n-            else\n-                pfrom->fRelayTxes = true;\n-        }\n-\n+        if (!vRecv.empty())\n+            vRecv >> fRelay;\n         // Disconnect if we connected to ourself\n         if (pfrom->fInbound && !connman.CheckIncomingNonce(nNonce))\n         {\n@@ -1251,7 +1252,6 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n             return true;\n         }\n \n-        pfrom->addrLocal = addrMe;\n         if (pfrom->fInbound && addrMe.IsRoutable())\n         {\n             SeenLocal(addrMe);\n@@ -1261,9 +1261,24 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n         if (pfrom->fInbound)\n             PushNodeVersion(pfrom, connman, GetAdjustedTime());\n \n-        pfrom->fClient = !(pfrom->nServices & NODE_NETWORK);\n+        connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERACK));\n \n-        if((pfrom->nServices & NODE_WITNESS))\n+        pfrom->nServices = nServices;\n+        pfrom->addrLocal = addrMe;\n+        pfrom->strSubVer = strSubVer;\n+        pfrom->cleanSubVer = SanitizeString(strSubVer);\n+        pfrom->nStartingHeight = nStartingHeight;\n+        pfrom->fClient = !(nServices & NODE_NETWORK);\n+        {\n+            LOCK(pfrom->cs_filter);\n+            pfrom->fRelayTxes = fRelay; // set to true after we get the first filter* message\n+        }\n+\n+        // Change version\n+        pfrom->SetSendVersion(nSendVersion);\n+        pfrom->nVersion = nVersion;\n+\n+        if((nServices & NODE_WITNESS))\n         {\n             LOCK(cs_main);\n             State(pfrom->GetId())->fHaveWitness = true;\n@@ -1275,11 +1290,6 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n         UpdatePreferredDownload(pfrom, State(pfrom->GetId()));\n         }\n \n-        // Change version\n-        connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERACK));\n-        int nSendVersion = std::min(pfrom->nVersion, PROTOCOL_VERSION);\n-        pfrom->SetSendVersion(nSendVersion);\n-\n         if (!pfrom->fInbound)\n         {\n             // Advertise our address\n@@ -1307,8 +1317,6 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n             connman.MarkAddressGood(pfrom->addr);\n         }\n \n-        pfrom->fSuccessfullyConnected = true;\n-\n         std::string remoteAddr;\n         if (fLogIPs)\n             remoteAddr = \", peeraddr=\" + pfrom->addr.ToString();\n@@ -1350,7 +1358,7 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n \n     if (strCommand == NetMsgType::VERACK)\n     {\n-        pfrom->SetRecvVersion(std::min(pfrom->nVersion, PROTOCOL_VERSION));\n+        pfrom->SetRecvVersion(std::min(pfrom->nVersion.load(), PROTOCOL_VERSION));\n \n         if (!pfrom->fInbound) {\n             // Mark this node as currently connected, so we update its timestamp later.\n@@ -1378,6 +1386,7 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n             nCMPCTBLOCKVersion = 1;\n             connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::SENDCMPCT, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion));\n         }\n+        pfrom->fSuccessfullyConnected = true;\n     }\n \n \n@@ -2716,8 +2725,8 @@ bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsg\n {\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     {\n-        // Don't send anything until we get its version message\n-        if (pto->nVersion == 0 || pto->fDisconnect)\n+        // Don't send anything until the version handshake is complete\n+        if (!pto->fSuccessfullyConnected || pto->fDisconnect)\n             return true;\n \n         // If we get here, the outgoing message serialization version is set and can't change."
      },
      {
        "sha": "a8f09ba6aef7a74d5b6c4a46fd2fa2803ec92fce",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/496691741dfe252ff477913a89e5363aa7030d71/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/496691741dfe252ff477913a89e5363aa7030d71/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=496691741dfe252ff477913a89e5363aa7030d71",
        "patch": "@@ -55,6 +55,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n     dummyNode1.SetSendVersion(PROTOCOL_VERSION);\n     GetNodeSignals().InitializeNode(&dummyNode1, *connman);\n     dummyNode1.nVersion = 1;\n+    dummyNode1.fSuccessfullyConnected = true;\n     Misbehaving(dummyNode1.GetId(), 100); // Should get banned\n     SendMessages(&dummyNode1, *connman, interruptDummy);\n     BOOST_CHECK(connman->IsBanned(addr1));\n@@ -65,6 +66,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n     dummyNode2.SetSendVersion(PROTOCOL_VERSION);\n     GetNodeSignals().InitializeNode(&dummyNode2, *connman);\n     dummyNode2.nVersion = 1;\n+    dummyNode2.fSuccessfullyConnected = true;\n     Misbehaving(dummyNode2.GetId(), 50);\n     SendMessages(&dummyNode2, *connman, interruptDummy);\n     BOOST_CHECK(!connman->IsBanned(addr2)); // 2 not banned yet...\n@@ -85,6 +87,7 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n     dummyNode1.SetSendVersion(PROTOCOL_VERSION);\n     GetNodeSignals().InitializeNode(&dummyNode1, *connman);\n     dummyNode1.nVersion = 1;\n+    dummyNode1.fSuccessfullyConnected = true;\n     Misbehaving(dummyNode1.GetId(), 100);\n     SendMessages(&dummyNode1, *connman, interruptDummy);\n     BOOST_CHECK(!connman->IsBanned(addr1));\n@@ -110,6 +113,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     dummyNode.SetSendVersion(PROTOCOL_VERSION);\n     GetNodeSignals().InitializeNode(&dummyNode, *connman);\n     dummyNode.nVersion = 1;\n+    dummyNode.fSuccessfullyConnected = true;\n \n     Misbehaving(dummyNode.GetId(), 100);\n     SendMessages(&dummyNode, *connman, interruptDummy);"
      }
    ]
  },
  {
    "sha": "7821db30e16149a3d8b7f467a4e5ac276af6ccbd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ODIxZGIzMGUxNjE0OWEzZDhiN2Y0NjdhNGU1YWMyNzZhZjZjY2Jk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-04T10:39:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-04T10:39:17Z"
      },
      "message": "Merge #9671: Fix super-unlikely race introduced in 236618061a445d2cb11e72\n\n885cfdd Fix super-unlikely race introduced in 236618061a445d2cb11e72 (Matt Corallo)",
      "tree": {
        "sha": "625caa1ca255af87d1e0892d9bec5c8872688db8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/625caa1ca255af87d1e0892d9bec5c8872688db8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7821db30e16149a3d8b7f467a4e5ac276af6ccbd",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYla9VAAoJEHSBCwEjRsmm/LIIAJaEih1U6X0xyMrdm9SLb942\nFEKI1XEXYVRtFZ//G9g/K90dsyAiuEgJiC/7iLuiZPejREOK14ij8LiPtVvM+OHg\ntx2XXSEaDfrnHj5sJNQHISqbDoSK5VtrN2D252uNjBc3c4DJdXGPI3/9fvICLTgv\nIQj13a8150LKFWqjgQa8qgcE66GdW28oSkFxbUGRRrmeQ+yUP1tVpmAXgpY4BR4b\nOMWigzgazdi2dSZC97f/lvkOu0ZEPqdMl8AfUGwo2D0fWQd/qkw87aB2CZ8AsNfy\nHR8rp0sTdJv41k05FcbE9oUFMV2fiUxbS/kvbjN23+iSjf9QGfaEhFxwi+9RDJ4=\n=hgXL\n-----END PGP SIGNATURE-----",
        "payload": "tree 625caa1ca255af87d1e0892d9bec5c8872688db8\nparent 496691741dfe252ff477913a89e5363aa7030d71\nparent 885cfdd2179a2aae733d0690f5a2ef23d181768e\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1486204752 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1486204757 +0100\n\nMerge #9671: Fix super-unlikely race introduced in 236618061a445d2cb11e72\n\n885cfdd Fix super-unlikely race introduced in 236618061a445d2cb11e72 (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7821db30e16149a3d8b7f467a4e5ac276af6ccbd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7821db30e16149a3d8b7f467a4e5ac276af6ccbd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7821db30e16149a3d8b7f467a4e5ac276af6ccbd/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "496691741dfe252ff477913a89e5363aa7030d71",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/496691741dfe252ff477913a89e5363aa7030d71",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/496691741dfe252ff477913a89e5363aa7030d71"
      },
      {
        "sha": "885cfdd2179a2aae733d0690f5a2ef23d181768e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/885cfdd2179a2aae733d0690f5a2ef23d181768e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/885cfdd2179a2aae733d0690f5a2ef23d181768e"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1559bd20cdf66c8a9eb10d312fa6ca1d4f72fc08",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7821db30e16149a3d8b7f467a4e5ac276af6ccbd/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7821db30e16149a3d8b7f467a4e5ac276af6ccbd/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=7821db30e16149a3d8b7f467a4e5ac276af6ccbd",
        "patch": "@@ -1860,11 +1860,11 @@ bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n     if (fAddnode)\n         pnode->fAddnode = true;\n \n+    GetNodeSignals().InitializeNode(pnode, *this);\n     {\n         LOCK(cs_vNodes);\n         vNodes.push_back(pnode);\n     }\n-    GetNodeSignals().InitializeNode(pnode, *this);\n \n     return true;\n }"
      }
    ]
  },
  {
    "sha": "2a962d4540a253f63803d1f145fa26b938e69633",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYTk2MmQ0NTQwYTI1M2Y2MzgwM2QxZjE0NWZhMjZiOTM4ZTY5NjMz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-04T21:44:05Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-04T21:44:05Z"
      },
      "message": "Fixup style a bit by moving { to the same line as if statements",
      "tree": {
        "sha": "79ec56379d85434fd8b7672647754fb529b246ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/79ec56379d85434fd8b7672647754fb529b246ca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2a962d4540a253f63803d1f145fa26b938e69633",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a962d4540a253f63803d1f145fa26b938e69633",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2a962d4540a253f63803d1f145fa26b938e69633",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a962d4540a253f63803d1f145fa26b938e69633/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8465631845eac3db834942a4feb50f65c3401c68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8465631845eac3db834942a4feb50f65c3401c68",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8465631845eac3db834942a4feb50f65c3401c68"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 3,
      "deletions": 6
    },
    "files": [
      {
        "sha": "704d3b8d34fd848de48dd3f98d4fc534a5242b7a",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a962d4540a253f63803d1f145fa26b938e69633/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a962d4540a253f63803d1f145fa26b938e69633/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=2a962d4540a253f63803d1f145fa26b938e69633",
        "patch": "@@ -1066,21 +1066,18 @@ void CConnman::ThreadSocketHandler()\n             BOOST_FOREACH(CNode* pnode, vNodesDisconnectedCopy)\n             {\n                 // wait until threads are done using it\n-                if (pnode->GetRefCount() <= 0)\n-                {\n+                if (pnode->GetRefCount() <= 0) {\n                     bool fDelete = false;\n                     {\n                         TRY_LOCK(pnode->cs_inventory, lockInv);\n-                        if (lockInv)\n-                        {\n+                        if (lockInv) {\n                             TRY_LOCK(pnode->cs_vSend, lockSend);\n                             if (lockSend) {\n                                 fDelete = true;\n                             }\n                         }\n                     }\n-                    if (fDelete)\n-                    {\n+                    if (fDelete) {\n                         vNodesDisconnected.remove(pnode);\n                         DeleteNode(pnode);\n                     }"
      }
    ]
  },
  {
    "sha": "ac719c936dee55f386a8be88fe298d1b44b467dc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYzcxOWM5MzZkZWU1NWYzODZhOGJlODhmZTI5OGQxYjQ0YjQ2N2Rj",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2017-02-05T17:37:13Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2017-02-05T17:37:13Z"
      },
      "message": "Init ECC context for test_bitcoin_fuzzy.\n\nThis avoids calling things like pubkey_parse with a null context argument.",
      "tree": {
        "sha": "25a7d4d60c2ac724a290ec68e8fd15a8d1a9b8c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/25a7d4d60c2ac724a290ec68e8fd15a8d1a9b8c8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ac719c936dee55f386a8be88fe298d1b44b467dc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac719c936dee55f386a8be88fe298d1b44b467dc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ac719c936dee55f386a8be88fe298d1b44b467dc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac719c936dee55f386a8be88fe298d1b44b467dc/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7821db30e16149a3d8b7f467a4e5ac276af6ccbd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7821db30e16149a3d8b7f467a4e5ac276af6ccbd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7821db30e16149a3d8b7f467a4e5ac276af6ccbd"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c4983f6f5ccdf213f3d4044720634ab5a516e89f",
        "filename": "src/test/test_bitcoin_fuzzy.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac719c936dee55f386a8be88fe298d1b44b467dc/src/test/test_bitcoin_fuzzy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac719c936dee55f386a8be88fe298d1b44b467dc/src/test/test_bitcoin_fuzzy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin_fuzzy.cpp?ref=ac719c936dee55f386a8be88fe298d1b44b467dc",
        "patch": "@@ -18,6 +18,7 @@\n #include \"streams.h\"\n #include \"undo.h\"\n #include \"version.h\"\n+#include \"pubkey.h\"\n \n #include <stdint.h>\n #include <unistd.h>\n@@ -60,6 +61,7 @@ bool read_stdin(std::vector<char> &data) {\n \n int main(int argc, char **argv)\n {\n+    ECCVerifyHandle globalVerifyHandle;\n     std::vector<char> buffer;\n     if (!read_stdin(buffer)) return 0;\n "
      }
    ]
  },
  {
    "sha": "923dc447eaa8e017985b2afbbb12dd1283fbea0e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MjNkYzQ0N2VhYThlMDE3OTg1YjJhZmJiYjEyZGQxMjgzZmJlYTBl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-02-05T19:58:47Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-02-05T20:08:08Z"
      },
      "message": "Merge #9578: Add missing mempool lock for CalculateMemPoolAncestors\n\n003cd60 Add missing mempool lock for CalculateMemPoolAncestors (Matt Corallo)",
      "tree": {
        "sha": "140832de7142baf9334e2b51b302fc7ab347ad37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/140832de7142baf9334e2b51b302fc7ab347ad37"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/923dc447eaa8e017985b2afbbb12dd1283fbea0e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJYl4YpAAoJENuhpnN5oakxeeQP/1jtSWrpTJxeM5IPc44QW5Ii\nDapMmIPsZvP4MShsGp3Urm+QKpSsZ630RuuvVcUbnua66h7Z4TowEBBPuv0LOY6p\nTyP8m6VTLBLcG/QjG98E/7UJjcsUY+cWR0mdUade9jcIIAFGpM34t4C09kmJxjyl\nO0zQIzmkIpbtrVL9QIFgZ2AQAy6yqD12mBuGc4j0/ILcIfO5VdCgwrhroZT1nCB2\nzxsGtDV47gKjkqixHjb7uuqP07vdAIZ1rqReRsSs3tHGCACSyoOEVr3euPjUe1xd\nlO/7h+qT8HeZHkiz0L6griupRWA96q/s5rfvW6+Ufs2R/VxJhgcn5rSfsA7SQCOV\nETmZftGGAMhEJsJ3AHkt1wMDXlAyP1oWhkHhB4lbw8J/oZ75r+7I5SBtHcF5B+pR\nPdc/mfPtpgHTn9FaxksOe+xoF35D68ULNG/kQeoobiKdIjQl91WPMC1r/6Aig/Fe\nEPIfCgpWsFMkbqzQ4sGIM+zcOtcvef1JiLDrX+bYhCJq/zSj1ultGqPBtgGtKkhh\ny6z1DAQ+NQU6pOZZIzF6vYNetLOJYj9l4RmXqJq1kk2uKtbLEk5qg9b+bj10A3u3\nrO8Cu3lSy5UbMIh3n9aLlaUdavwc0ajXn9bY8VLKtoniyytPXCzGlGOprZHsZoZI\nsEaQoz0u7MY2wWObRbOQ\n=RtwK\n-----END PGP SIGNATURE-----",
        "payload": "tree 140832de7142baf9334e2b51b302fc7ab347ad37\nparent 7821db30e16149a3d8b7f467a4e5ac276af6ccbd\nparent 003cd60cc3697df25bb9dfa0bae0616a462af7ab\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1486324727 -0800\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1486325288 -0800\n\nMerge #9578: Add missing mempool lock for CalculateMemPoolAncestors\n\n003cd60 Add missing mempool lock for CalculateMemPoolAncestors (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/923dc447eaa8e017985b2afbbb12dd1283fbea0e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/923dc447eaa8e017985b2afbbb12dd1283fbea0e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/923dc447eaa8e017985b2afbbb12dd1283fbea0e/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7821db30e16149a3d8b7f467a4e5ac276af6ccbd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7821db30e16149a3d8b7f467a4e5ac276af6ccbd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7821db30e16149a3d8b7f467a4e5ac276af6ccbd"
      },
      {
        "sha": "003cd60cc3697df25bb9dfa0bae0616a462af7ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/003cd60cc3697df25bb9dfa0bae0616a462af7ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/003cd60cc3697df25bb9dfa0bae0616a462af7ab"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "236527a2ba87da1dc954a3a50f59e63d8ad80fb2",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/923dc447eaa8e017985b2afbbb12dd1283fbea0e/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/923dc447eaa8e017985b2afbbb12dd1283fbea0e/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=923dc447eaa8e017985b2afbbb12dd1283fbea0e",
        "patch": "@@ -171,6 +171,8 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n \n bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n {\n+    LOCK(cs);\n+\n     setEntries parentHashes;\n     const CTransaction &tx = entry.GetTx();\n "
      }
    ]
  },
  {
    "sha": "fc67cd22f83f5d1186b7d787cdf4de2c1f1983d5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYzY3Y2QyMmY4M2Y1ZDExODZiN2Q3ODdjZGY0ZGUyYzFmMTk4M2Q1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-06T07:55:59Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-06T08:22:14Z"
      },
      "message": "Merge #9691: Init ECC context for test_bitcoin_fuzzy.\n\nac719c9 Init ECC context for test_bitcoin_fuzzy. (Gregory Maxwell)",
      "tree": {
        "sha": "8874dc116667e1f58fc5616e4d9069030a520af1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8874dc116667e1f58fc5616e4d9069030a520af1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc67cd22f83f5d1186b7d787cdf4de2c1f1983d5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYmDI2AAoJEHSBCwEjRsmmR28IAIU08v7XTs7RTSRlv8ykY5Is\n1GsF+VD7wLvit9GpNvpzD+D8kAacdyZXXMgsRFeDfwfqtdhoGrE8BDjjfTY1/VrM\njGTiX5LqOfSw0qARj84sp/eUUtTAfQ5jcKk/YyHMdPg/N/SFW6+yHXRVQ4fT1X0J\n9yLpx+qQE5+I3zNKwLPusFQp9HMM01V6p9MBTn7yQuHs9wRLCMsv520ua2yVjXGb\nLLiqEjo8sp/1R+iG/q+fZA6rcAcqn9fOVmuOS622WplJDinzxDYVvuEcGIs1fDAt\nstpXQUwasdLdvmXwFQRN7KRtbTBp+MaH6qeoCiFp6NLMjBV2kNPLLTm4EA2viz4=\n=CnPR\n-----END PGP SIGNATURE-----",
        "payload": "tree 8874dc116667e1f58fc5616e4d9069030a520af1\nparent 923dc447eaa8e017985b2afbbb12dd1283fbea0e\nparent ac719c936dee55f386a8be88fe298d1b44b467dc\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1486367759 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1486369334 +0100\n\nMerge #9691: Init ECC context for test_bitcoin_fuzzy.\n\nac719c9 Init ECC context for test_bitcoin_fuzzy. (Gregory Maxwell)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc67cd22f83f5d1186b7d787cdf4de2c1f1983d5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fc67cd22f83f5d1186b7d787cdf4de2c1f1983d5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc67cd22f83f5d1186b7d787cdf4de2c1f1983d5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "923dc447eaa8e017985b2afbbb12dd1283fbea0e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/923dc447eaa8e017985b2afbbb12dd1283fbea0e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/923dc447eaa8e017985b2afbbb12dd1283fbea0e"
      },
      {
        "sha": "ac719c936dee55f386a8be88fe298d1b44b467dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac719c936dee55f386a8be88fe298d1b44b467dc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ac719c936dee55f386a8be88fe298d1b44b467dc"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c4983f6f5ccdf213f3d4044720634ab5a516e89f",
        "filename": "src/test/test_bitcoin_fuzzy.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc67cd22f83f5d1186b7d787cdf4de2c1f1983d5/src/test/test_bitcoin_fuzzy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc67cd22f83f5d1186b7d787cdf4de2c1f1983d5/src/test/test_bitcoin_fuzzy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin_fuzzy.cpp?ref=fc67cd22f83f5d1186b7d787cdf4de2c1f1983d5",
        "patch": "@@ -18,6 +18,7 @@\n #include \"streams.h\"\n #include \"undo.h\"\n #include \"version.h\"\n+#include \"pubkey.h\"\n \n #include <stdint.h>\n #include <unistd.h>\n@@ -60,6 +61,7 @@ bool read_stdin(std::vector<char> &data) {\n \n int main(int argc, char **argv)\n {\n+    ECCVerifyHandle globalVerifyHandle;\n     std::vector<char> buffer;\n     if (!read_stdin(buffer)) return 0;\n "
      }
    ]
  },
  {
    "sha": "8d6447ecf79cd9a875552f0940098394085345e1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZDY0NDdlY2Y3OWNkOWE4NzU1NTJmMDk0MDA5ODM5NDA4NTM0NWUx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-06T11:48:41Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-06T11:48:55Z"
      },
      "message": "Merge #9673: Set correct metadata on bumpfee wallet transactions\n\n4ec057d [wallet] Set correct metadata on bumpfee wallet transactions (Russell Yanofsky)",
      "tree": {
        "sha": "1e424e221dbf4e8cf8f3cf8a651dcb8457576baf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1e424e221dbf4e8cf8f3cf8a651dcb8457576baf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d6447ecf79cd9a875552f0940098394085345e1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYmGKnAAoJEHSBCwEjRsmmmp8IAMU2FpThsU5GFHBALquBh8NQ\nWCq8o00n9N0GU8jO2NQ4T8H0CCHJgU2Rlld68xTJ+3kJge8qtLFGWENPr9IOK+8v\n4jN/gH6/knmJulfTbOXulsI1sHL1YkOHsEWvoWqBKKiVQwi3QCUsdavmtFEx7PXG\nqqSyf7nuW5ebnBeS+jSSzoaRIObXcIY9yZ34pAgFdvBVaWj14jL0fEwSZYlo/d1y\nwqhaAPxfDYlI32QIPv7oe6mruAtoCyLS8CpT/ehc4McRBBCpUmc8xVL6Tk/F9KIc\ndIblWIX2xPcXNt3OfA2Xi9oA94sYCQhxr+ZFCrIhqdFMODS6ladduv+kZYVJi30=\n=UMXs\n-----END PGP SIGNATURE-----",
        "payload": "tree 1e424e221dbf4e8cf8f3cf8a651dcb8457576baf\nparent fc67cd22f83f5d1186b7d787cdf4de2c1f1983d5\nparent 4ec057dfa72fbb910fec69305af1ff6d5e03ca30\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1486381721 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1486381735 +0100\n\nMerge #9673: Set correct metadata on bumpfee wallet transactions\n\n4ec057d [wallet] Set correct metadata on bumpfee wallet transactions (Russell Yanofsky)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d6447ecf79cd9a875552f0940098394085345e1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8d6447ecf79cd9a875552f0940098394085345e1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d6447ecf79cd9a875552f0940098394085345e1/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fc67cd22f83f5d1186b7d787cdf4de2c1f1983d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc67cd22f83f5d1186b7d787cdf4de2c1f1983d5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fc67cd22f83f5d1186b7d787cdf4de2c1f1983d5"
      },
      {
        "sha": "4ec057dfa72fbb910fec69305af1ff6d5e03ca30",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ec057dfa72fbb910fec69305af1ff6d5e03ca30",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4ec057dfa72fbb910fec69305af1ff6d5e03ca30"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 14,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ac282796c1460e717485d1798fea4e35197691fe",
        "filename": "qa/rpc-tests/bumpfee.py",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d6447ecf79cd9a875552f0940098394085345e1/qa/rpc-tests/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d6447ecf79cd9a875552f0940098394085345e1/qa/rpc-tests/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bumpfee.py?ref=8d6447ecf79cd9a875552f0940098394085345e1",
        "patch": "@@ -69,6 +69,7 @@ def run_test(self):\n         test_rebumping(rbf_node, dest_address)\n         test_rebumping_not_replaceable(rbf_node, dest_address)\n         test_unconfirmed_not_spendable(rbf_node, rbf_node_address)\n+        test_bumpfee_metadata(rbf_node, dest_address)\n         test_locked_wallet_fails(rbf_node, dest_address)\n         print(\"Success\")\n \n@@ -257,6 +258,14 @@ def test_unconfirmed_not_spendable(rbf_node, rbf_node_address):\n             if t[\"txid\"] == rbfid and t[\"address\"] == rbf_node_address and t[\"spendable\"]), 1)\n \n \n+def test_bumpfee_metadata(rbf_node, dest_address):\n+    rbfid = rbf_node.sendtoaddress(dest_address, 0.00090000, \"comment value\", \"to value\")\n+    bumped_tx = rbf_node.bumpfee(rbfid)\n+    bumped_wtx = rbf_node.gettransaction(bumped_tx[\"txid\"])\n+    assert_equal(bumped_wtx[\"comment\"], \"comment value\")\n+    assert_equal(bumped_wtx[\"to\"], \"to value\")\n+\n+\n def test_locked_wallet_fails(rbf_node, dest_address):\n     rbfid = create_fund_sign_send(rbf_node, {dest_address: 0.00090000})\n     rbf_node.walletlock()"
      },
      {
        "sha": "45b572aa2e2e6cff596552d8dd332728644c4d27",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d6447ecf79cd9a875552f0940098394085345e1/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d6447ecf79cd9a875552f0940098394085345e1/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=8d6447ecf79cd9a875552f0940098394085345e1",
        "patch": "@@ -2944,7 +2944,12 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     // commit/broadcast the tx\n     CReserveKey reservekey(pwalletMain);\n     CWalletTx wtxBumped(pwalletMain, MakeTransactionRef(std::move(tx)));\n+    wtxBumped.mapValue = wtx.mapValue;\n     wtxBumped.mapValue[\"replaces_txid\"] = hash.ToString();\n+    wtxBumped.vOrderForm = wtx.vOrderForm;\n+    wtxBumped.strFromAccount = wtx.strFromAccount;\n+    wtxBumped.fTimeReceivedIsTxTime = true;\n+    wtxBumped.fFromMe = true;\n     CValidationState state;\n     if (!pwalletMain->CommitTransaction(wtxBumped, reservekey, g_connman.get(), state)) {\n         // NOTE: CommitTransaction never returns false, so this should never happen."
      }
    ]
  },
  {
    "sha": "986ba005eda65cf91f698cccaab792da569022f9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ODZiYTAwNWVkYTY1Y2Y5MWY2OThjY2NhYWI3OTJkYTU2OTAyMmY5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-06T11:54:02Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-06T13:20:05Z"
      },
      "message": "Merge #9651: Fix typos\n\n5f62e3e Fix typos (practicalswift)",
      "tree": {
        "sha": "277503a56ccd798651ca32a1e5cb693c4fd88789",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/277503a56ccd798651ca32a1e5cb693c4fd88789"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/986ba005eda65cf91f698cccaab792da569022f9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYmHgFAAoJEHSBCwEjRsmmG6IH/0eBG1NnRORBEEYYzkJpWJHW\nAri+uT9GNLpRcsc26Q4XLY3sg/sXm8/s802KIqrg0fVP9WREoCn/4p8DvQNxqbBw\n1KrzXfyrGVcSPU6aSlmN0vgKjKCCyGnUSS67ay0p6iKtn1U86QOp+FwHOm51e3G6\nPaLLWNbLfVXxZfIQ+yzlKkIygELmBQ78ruQArNA1+VBHmixWDDZuKPWLAa6jVPdi\nQP2iGch4U41X6lyhWSw3P8713GncPSuuXbz2X9gfCnKX9cex8Cql/nH31q7e0Kmh\nJ7hTi8Sk2DbrIxIxC5FTQ8/MVrw8lrafgkR+t7qgKDSXjynykakXriM0ra1Fbck=\n=kFLS\n-----END PGP SIGNATURE-----",
        "payload": "tree 277503a56ccd798651ca32a1e5cb693c4fd88789\nparent 8d6447ecf79cd9a875552f0940098394085345e1\nparent 5f62e3eb6381e455a1b83ab6fb368a132124d2a3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1486382042 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1486387205 +0100\n\nMerge #9651: Fix typos\n\n5f62e3e Fix typos (practicalswift)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/986ba005eda65cf91f698cccaab792da569022f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/986ba005eda65cf91f698cccaab792da569022f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/986ba005eda65cf91f698cccaab792da569022f9/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d6447ecf79cd9a875552f0940098394085345e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d6447ecf79cd9a875552f0940098394085345e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d6447ecf79cd9a875552f0940098394085345e1"
      },
      {
        "sha": "5f62e3eb6381e455a1b83ab6fb368a132124d2a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f62e3eb6381e455a1b83ab6fb368a132124d2a3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f62e3eb6381e455a1b83ab6fb368a132124d2a3"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "6ee5df47039e6f732b46e421d02f81bf5ccbf24a",
        "filename": "contrib/gitian-build.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/986ba005eda65cf91f698cccaab792da569022f9/contrib/gitian-build.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/986ba005eda65cf91f698cccaab792da569022f9/contrib/gitian-build.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-build.sh?ref=986ba005eda65cf91f698cccaab792da569022f9",
        "patch": "@@ -41,7 +41,7 @@ Options:\n -c|--commit\tIndicate that the version argument is for a commit or branch\n -u|--url\tSpecify the URL of the repository. Default is https://github.com/bitcoin/bitcoin\n -v|--verify \tVerify the gitian build\n--b|--build\tDo a gitiain build\n+-b|--build\tDo a gitian build\n -s|--sign\tMake signed binaries for Windows and Mac OSX\n -B|--buildsign\tBuild both signed and unsigned binaries\n -o|--os\t\tSpecify which Operating Systems the build is for. Default is lwx. l for linux, w for windows, x for osx"
      },
      {
        "sha": "5995f9f438983b6050c361459af41c1eb5056fee",
        "filename": "contrib/macdeploy/macdeployqtplus",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/986ba005eda65cf91f698cccaab792da569022f9/contrib/macdeploy/macdeployqtplus",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/986ba005eda65cf91f698cccaab792da569022f9/contrib/macdeploy/macdeployqtplus",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/macdeployqtplus?ref=986ba005eda65cf91f698cccaab792da569022f9",
        "patch": "@@ -340,7 +340,7 @@ def deployFrameworks(frameworks, bundlePath, binaryPath, strip, verbose, deploym\n         # install_name_tool the new id into the binary\n         changeInstallName(framework.installName, framework.deployedInstallName, binaryPath, verbose)\n         \n-        # Copy farmework to app bundle.\n+        # Copy framework to app bundle.\n         deployedBinaryPath = copyFramework(framework, bundlePath, verbose)\n         # Skip the rest if already was deployed.\n         if deployedBinaryPath is None:\n@@ -492,7 +492,7 @@ ap.add_argument(\"-no-strip\", dest=\"strip\", action=\"store_false\", default=True, h\n ap.add_argument(\"-sign\", dest=\"sign\", action=\"store_true\", default=False, help=\"sign .app bundle with codesign tool\")\n ap.add_argument(\"-dmg\", nargs=\"?\", const=\"\", metavar=\"basename\", help=\"create a .dmg disk image; if basename is not specified, a camel-cased version of the app name is used\")\n ap.add_argument(\"-fancy\", nargs=1, metavar=\"plist\", default=[], help=\"make a fancy looking disk image using the given plist file with instructions; requires -dmg to work\")\n-ap.add_argument(\"-add-qt-tr\", nargs=1, metavar=\"languages\", default=[], help=\"add Qt translation files to the bundle's ressources; the language list must be separated with commas, not with whitespace\")\n+ap.add_argument(\"-add-qt-tr\", nargs=1, metavar=\"languages\", default=[], help=\"add Qt translation files to the bundle's resources; the language list must be separated with commas, not with whitespace\")\n ap.add_argument(\"-translations-dir\", nargs=1, metavar=\"path\", default=None, help=\"Path to Qt's translation files\")\n ap.add_argument(\"-add-resources\", nargs=\"+\", metavar=\"path\", default=[], help=\"list of additional files or folders to be copied into the bundle's resources; must be the last argument\")\n ap.add_argument(\"-volname\", nargs=1, metavar=\"volname\", default=[], help=\"custom volume name for dmg\")"
      },
      {
        "sha": "e1fd0b317b0ed8329856048f1f20aaef58eac0cc",
        "filename": "contrib/rpm/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/986ba005eda65cf91f698cccaab792da569022f9/contrib/rpm/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/986ba005eda65cf91f698cccaab792da569022f9/contrib/rpm/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/rpm/README.md?ref=986ba005eda65cf91f698cccaab792da569022f9",
        "patch": "@@ -31,7 +31,7 @@ through `Source23` are used.\n Sources 30-39 should be reserved for SELinux related files. Currently only\n `Source30` through `Source32` are used. Until those files are in a tagged\n release, the full URL specified in the RPM spec file will not work. You can get\n-them from the git ropository where you retrieved this file.\n+them from the git repository where you retrieved this file.\n \n Sources 100+ are for files that are not source tarballs and are not maintained\n in the bitcoin git repository. At present only an SVG version of the Bitcoin"
      },
      {
        "sha": "8d50144c21f9bd3726b9b12e09e8c3ff44d6e595",
        "filename": "share/certs/PrivateKeyNotes.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/986ba005eda65cf91f698cccaab792da569022f9/share/certs/PrivateKeyNotes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/986ba005eda65cf91f698cccaab792da569022f9/share/certs/PrivateKeyNotes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/certs/PrivateKeyNotes.md?ref=986ba005eda65cf91f698cccaab792da569022f9",
        "patch": "@@ -2,7 +2,7 @@ Code-signing private key notes\n ==\n \n The private keys for these certificates were generated on Gavin's main work machine,\n-following the certificate authoritys' recommendations for generating certificate\n+following the certificate authority's recommendations for generating certificate\n signing requests.\n \n For OSX, the private key was generated by Keychain.app on Gavin's main work machine."
      },
      {
        "sha": "1c1acb6b1038b9f5f6d4134979e434bdb0e823c3",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/986ba005eda65cf91f698cccaab792da569022f9/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/986ba005eda65cf91f698cccaab792da569022f9/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=986ba005eda65cf91f698cccaab792da569022f9",
        "patch": "@@ -770,7 +770,7 @@ void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate, double nVer\n     if (!clientModel)\n         return;\n \n-    // Prevent orphan statusbar messages (e.g. hover Quit in main menu, wait until chain-sync starts -> garbelled text)\n+    // Prevent orphan statusbar messages (e.g. hover Quit in main menu, wait until chain-sync starts -> garbled text)\n     statusBar()->clearMessage();\n \n     // Acquire current block source"
      },
      {
        "sha": "5d6c0e2e31f252a5a0d06be45c0e46e53d8fc712",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/986ba005eda65cf91f698cccaab792da569022f9/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/986ba005eda65cf91f698cccaab792da569022f9/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=986ba005eda65cf91f698cccaab792da569022f9",
        "patch": "@@ -536,7 +536,7 @@ int TableViewLastColumnResizingFixer::getAvailableWidthForColumn(int column)\n     return nResult;\n }\n \n-// Make sure we don't make the columns wider than the tables viewport width.\n+// Make sure we don't make the columns wider than the table's viewport width.\n void TableViewLastColumnResizingFixer::adjustTableColumnsWidth()\n {\n     disconnectViewHeadersSignals();\n@@ -570,7 +570,7 @@ void TableViewLastColumnResizingFixer::on_sectionResized(int logicalIndex, int o\n     }\n }\n \n-// When the tabless geometry is ready, we manually perform the stretch of the \"Message\" column,\n+// When the table's geometry is ready, we manually perform the stretch of the \"Message\" column,\n // as the \"Stretch\" resize mode does not allow for interactive resizing.\n void TableViewLastColumnResizingFixer::on_geometriesChanged()\n {"
      },
      {
        "sha": "913aa5e24bf113349a030be978b0f5e7a43d23d7",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/986ba005eda65cf91f698cccaab792da569022f9/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/986ba005eda65cf91f698cccaab792da569022f9/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=986ba005eda65cf91f698cccaab792da569022f9",
        "patch": "@@ -140,7 +140,7 @@ namespace GUIUtil\n      * Also makes sure the column widths are never larger than the table's viewport.\n      * In Qt, all columns are resizable from the right, but it's not intuitive resizing the last column from the right.\n      * Usually our second to last columns behave as if stretched, and when on strech mode, columns aren't resizable\n-     * interactively or programatically.\n+     * interactively or programmatically.\n      *\n      * This helper object takes care of this issue.\n      *"
      }
    ]
  },
  {
    "sha": "09e0c28f8566d9614084e5f52739f6241d80685a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOWUwYzI4Zjg1NjZkOTYxNDA4NGU1ZjUyNzM5ZjYyNDFkODA2ODVh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-06T13:31:37Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-06T13:34:53Z"
      },
      "message": "Merge #9659: Net: Turn some methods and params/variables const\n\n0729102 Net: pass interruptMsgProc as const where possible (Jorge Tim\u00f3n)\nfc7f2ff Net: Make CNetMsgMaker more const (Jorge Tim\u00f3n)\nd45955f Net: CConnman: Make some methods const (Jorge Tim\u00f3n)",
      "tree": {
        "sha": "f4a3b7a961db349d0b34fa57a6876cd3914027a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f4a3b7a961db349d0b34fa57a6876cd3914027a0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/09e0c28f8566d9614084e5f52739f6241d80685a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYmHt9AAoJEHSBCwEjRsmmkuoH/iqpv2WqkgfDXserjcUgBRxR\n3KQhEjUzsvi6b3uHfnZ7RzfSEos11BwcREygoCYiRykltEVYOQRKoGG3uDupe9AP\nBU9BiULxTqlxzhYodkQL2gGqruL2PuppNEWWKmm27iwMHnSibOROVNoKuDP/YWsp\nNup47Q3EEqLyDlIkeuBhMj+Lbt2WqlzLBsfZR0HiFfMfzvsMr9IA76mpgEemOyPX\n6o0fpiNHrOgGwnbnKmYu9JVHtIVGDDbDUJOKtm6MHP61jDWjeDS/YpSboEHuyBTN\nnXOevDyISxtLLKy0ZBSy/StYosVaYwN0sG3hXi5fz0SwZR0+I3bZU3Esrn3YufU=\n=+WWN\n-----END PGP SIGNATURE-----",
        "payload": "tree f4a3b7a961db349d0b34fa57a6876cd3914027a0\nparent 986ba005eda65cf91f698cccaab792da569022f9\nparent 0729102f99241b9716456ad40bf778c09f650b1b\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1486387897 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1486388093 +0100\n\nMerge #9659: Net: Turn some methods and params/variables const\n\n0729102 Net: pass interruptMsgProc as const where possible (Jorge Tim\u00f3n)\nfc7f2ff Net: Make CNetMsgMaker more const (Jorge Tim\u00f3n)\nd45955f Net: CConnman: Make some methods const (Jorge Tim\u00f3n)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09e0c28f8566d9614084e5f52739f6241d80685a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/09e0c28f8566d9614084e5f52739f6241d80685a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09e0c28f8566d9614084e5f52739f6241d80685a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "986ba005eda65cf91f698cccaab792da569022f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/986ba005eda65cf91f698cccaab792da569022f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/986ba005eda65cf91f698cccaab792da569022f9"
      },
      {
        "sha": "0729102f99241b9716456ad40bf778c09f650b1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0729102f99241b9716456ad40bf778c09f650b1b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0729102f99241b9716456ad40bf778c09f650b1b"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 19,
      "deletions": 19
    },
    "files": [
      {
        "sha": "4d0d781d6d2e8732b8c23adbe862fb16015ac483",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09e0c28f8566d9614084e5f52739f6241d80685a/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09e0c28f8566d9614084e5f52739f6241d80685a/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=09e0c28f8566d9614084e5f52739f6241d80685a",
        "patch": "@@ -781,7 +781,7 @@ const uint256& CNetMessage::GetMessageHash() const\n \n \n // requires LOCK(cs_vSend)\n-size_t CConnman::SocketSendData(CNode *pnode)\n+size_t CConnman::SocketSendData(CNode *pnode) const\n {\n     auto it = pnode->vSendMsg.begin();\n     size_t nSentSize = 0;\n@@ -2719,12 +2719,12 @@ int64_t PoissonNextSend(int64_t nNow, int average_interval_seconds) {\n     return nNow + (int64_t)(log1p(GetRand(1ULL << 48) * -0.0000000000000035527136788 /* -1/2^48 */) * average_interval_seconds * -1000000.0 + 0.5);\n }\n \n-CSipHasher CConnman::GetDeterministicRandomizer(uint64_t id)\n+CSipHasher CConnman::GetDeterministicRandomizer(uint64_t id) const\n {\n     return CSipHasher(nSeed0, nSeed1).Write(id);\n }\n \n-uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad)\n+uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const\n {\n     std::vector<unsigned char> vchNetGroup(ad.GetGroup());\n "
      },
      {
        "sha": "38f8d82ceb306a617840553f8a03abea12dd1335",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09e0c28f8566d9614084e5f52739f6241d80685a/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09e0c28f8566d9614084e5f52739f6241d80685a/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=09e0c28f8566d9614084e5f52739f6241d80685a",
        "patch": "@@ -281,7 +281,7 @@ class CConnman\n     int GetBestHeight() const;\n \n     /** Get a unique deterministic randomizer. */\n-    CSipHasher GetDeterministicRandomizer(uint64_t id);\n+    CSipHasher GetDeterministicRandomizer(uint64_t id) const;\n \n     unsigned int GetReceiveFloodSize() const;\n \n@@ -302,7 +302,7 @@ class CConnman\n     void ThreadSocketHandler();\n     void ThreadDNSAddressSeed();\n \n-    uint64_t CalculateKeyedNetGroup(const CAddress& ad);\n+    uint64_t CalculateKeyedNetGroup(const CAddress& ad) const;\n \n     CNode* FindNode(const CNetAddr& ip);\n     CNode* FindNode(const CSubNet& subNet);\n@@ -317,7 +317,7 @@ class CConnman\n \n     NodeId GetNewNodeId();\n \n-    size_t SocketSendData(CNode *pnode);\n+    size_t SocketSendData(CNode *pnode) const;\n     //!check is the banlist has unwritten changes\n     bool BannedSetIsDirty();\n     //!set the \"dirty\" flag for the banlist"
      },
      {
        "sha": "3a89c7ac423780b035357397c4a1f2219880c9d7",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09e0c28f8566d9614084e5f52739f6241d80685a/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09e0c28f8566d9614084e5f52739f6241d80685a/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=09e0c28f8566d9614084e5f52739f6241d80685a",
        "patch": "@@ -778,7 +778,7 @@ static uint256 most_recent_block_hash;\n \n void PeerLogicValidation::NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) {\n     std::shared_ptr<const CBlockHeaderAndShortTxIDs> pcmpctblock = std::make_shared<const CBlockHeaderAndShortTxIDs> (*pblock, true);\n-    CNetMsgMaker msgMaker(PROTOCOL_VERSION);\n+    const CNetMsgMaker msgMaker(PROTOCOL_VERSION);\n \n     LOCK(cs_main);\n \n@@ -956,11 +956,11 @@ static void RelayAddress(const CAddress& addr, bool fReachable, CConnman& connma\n     connman.ForEachNodeThen(std::move(sortfunc), std::move(pushfunc));\n }\n \n-void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParams, CConnman& connman, std::atomic<bool>& interruptMsgProc)\n+void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParams, CConnman& connman, const std::atomic<bool>& interruptMsgProc)\n {\n     std::deque<CInv>::iterator it = pfrom->vRecvGetData.begin();\n     std::vector<CInv> vNotFound;\n-    CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n+    const CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n     LOCK(cs_main);\n \n     while (it != pfrom->vRecvGetData.end()) {\n@@ -1153,12 +1153,12 @@ inline void static SendBlockTransactions(const CBlock& block, const BlockTransac\n         resp.txn[i] = block.vtx[req.indexes[i]];\n     }\n     LOCK(cs_main);\n-    CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n+    const CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n     int nSendFlags = State(pfrom->GetId())->fWantsCmpctWitness ? 0 : SERIALIZE_TRANSACTION_NO_WITNESS;\n     connman.PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::BLOCKTXN, resp));\n }\n \n-bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman& connman, std::atomic<bool>& interruptMsgProc)\n+bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman& connman, const std::atomic<bool>& interruptMsgProc)\n {\n     LogPrint(\"net\", \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->id);\n     if (IsArgSet(\"-dropmessagestest\") && GetRand(GetArg(\"-dropmessagestest\", 0)) == 0)\n@@ -1354,7 +1354,7 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n     }\n \n     // At this point, the outgoing message serialization version can't change.\n-    CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n+    const CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n \n     if (strCommand == NetMsgType::VERACK)\n     {\n@@ -2588,7 +2588,7 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n     return true;\n }\n \n-bool ProcessMessages(CNode* pfrom, CConnman& connman, std::atomic<bool>& interruptMsgProc)\n+bool ProcessMessages(CNode* pfrom, CConnman& connman, const std::atomic<bool>& interruptMsgProc)\n {\n     const CChainParams& chainparams = Params();\n     //\n@@ -2721,7 +2721,7 @@ class CompareInvMempoolOrder\n     }\n };\n \n-bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsgProc)\n+bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interruptMsgProc)\n {\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     {\n@@ -2730,7 +2730,7 @@ bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsg\n             return true;\n \n         // If we get here, the outgoing message serialization version is set and can't change.\n-        CNetMsgMaker msgMaker(pto->GetSendVersion());\n+        const CNetMsgMaker msgMaker(pto->GetSendVersion());\n \n         //\n         // Message: ping"
      },
      {
        "sha": "9e3f1b715667a9216d69cbccaab59bd906bf21b3",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09e0c28f8566d9614084e5f52739f6241d80685a/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09e0c28f8566d9614084e5f52739f6241d80685a/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=09e0c28f8566d9614084e5f52739f6241d80685a",
        "patch": "@@ -49,7 +49,7 @@ bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats);\n void Misbehaving(NodeId nodeid, int howmuch);\n \n /** Process protocol messages received from a given node */\n-bool ProcessMessages(CNode* pfrom, CConnman& connman, std::atomic<bool>& interrupt);\n+bool ProcessMessages(CNode* pfrom, CConnman& connman, const std::atomic<bool>& interrupt);\n /**\n  * Send queued protocol messages to be sent to a give node.\n  *\n@@ -58,6 +58,6 @@ bool ProcessMessages(CNode* pfrom, CConnman& connman, std::atomic<bool>& interru\n  * @param[in]   interrupt       Interrupt condition for processing threads\n  * @return                      True if there is more work to be done\n  */\n-bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interrupt);\n+bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interrupt);\n \n #endif // BITCOIN_NET_PROCESSING_H"
      },
      {
        "sha": "8e8a6e4a026ee824795e2af21c3eec1c7e761299",
        "filename": "src/netmessagemaker.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09e0c28f8566d9614084e5f52739f6241d80685a/src/netmessagemaker.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09e0c28f8566d9614084e5f52739f6241d80685a/src/netmessagemaker.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netmessagemaker.h?ref=09e0c28f8566d9614084e5f52739f6241d80685a",
        "patch": "@@ -15,7 +15,7 @@ class CNetMsgMaker\n     CNetMsgMaker(int nVersionIn) : nVersion(nVersionIn){}\n \n     template <typename... Args>\n-    CSerializedNetMsg Make(int nFlags, std::string sCommand, Args&&... args)\n+    CSerializedNetMsg Make(int nFlags, std::string sCommand, Args&&... args) const\n     {\n         CSerializedNetMsg msg;\n         msg.command = std::move(sCommand);\n@@ -24,7 +24,7 @@ class CNetMsgMaker\n     }\n \n     template <typename... Args>\n-    CSerializedNetMsg Make(std::string sCommand, Args&&... args)\n+    CSerializedNetMsg Make(std::string sCommand, Args&&... args) const\n     {\n         return Make(0, std::move(sCommand), std::forward<Args>(args)...);\n     }"
      }
    ]
  },
  {
    "sha": "40f7e27d25ff74f023371ba607f727375581cb7a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MGY3ZTI3ZDI1ZmY3NGYwMjMzNzFiYTYwN2Y3MjczNzU1ODFjYjdh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-06T13:35:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-06T13:51:00Z"
      },
      "message": "Merge #9650: Better handle invalid parameters to signrawtransaction\n\n6dbfe08 [qa] test signrawtransaction merge with missing inputs (Matt Corallo)\nec4f7e4 [qa] Add second input to signrawtransaction test case (Matt Corallo)\n691710a [qa] Test that decoderawtransaction throws with extra data appended (Matt Corallo)\n922bea9 Better handle invalid parameters to signrawtransaction (Matt Corallo)\n7ea0ad5 Fail in DecodeHexTx if there is extra data at the end (Matt Corallo)",
      "tree": {
        "sha": "233ed140671895319bb9a0eb019e6f5475514e78",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/233ed140671895319bb9a0eb019e6f5475514e78"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/40f7e27d25ff74f023371ba607f727375581cb7a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYmH9EAAoJEHSBCwEjRsmm4SAH/iRVbfrgQgtJwXc5A6cenu8Q\n+iSRHxBdyOnwdxARGAHnYiv5nC/W8cru20fyZwheCTXGqhBMV5zV8wdNk6AxauUI\ns9KEd3MDrlf1ZkaJ5VioSvP9/76VXvrb3ma3YXK9jG+uWcA2nnx0IPvWc4JiK0/+\nbJhmRKQ/Rwrrlbt/ftgvbDNKt7WIhuoPvO1Xr0c1U+11R/FAe27OGvh4Ha/3by6p\nwfeXVKKroeAyFurMEcFV/hg02kmNYBtolcDyNydoCOgJyfmpkUJkzJRlqhiMJNUz\nE2AUtZLiGMIdEYO4IFy2hMEgsV82ysWzu11P42nnklNR5DhE3xjlhUUvFMbn4LQ=\n=oGN4\n-----END PGP SIGNATURE-----",
        "payload": "tree 233ed140671895319bb9a0eb019e6f5475514e78\nparent 09e0c28f8566d9614084e5f52739f6241d80685a\nparent 6dbfe08c29535bb7b0359de8fe22acedcbf3532a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1486388144 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1486389060 +0100\n\nMerge #9650: Better handle invalid parameters to signrawtransaction\n\n6dbfe08 [qa] test signrawtransaction merge with missing inputs (Matt Corallo)\nec4f7e4 [qa] Add second input to signrawtransaction test case (Matt Corallo)\n691710a [qa] Test that decoderawtransaction throws with extra data appended (Matt Corallo)\n922bea9 Better handle invalid parameters to signrawtransaction (Matt Corallo)\n7ea0ad5 Fail in DecodeHexTx if there is extra data at the end (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40f7e27d25ff74f023371ba607f727375581cb7a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/40f7e27d25ff74f023371ba607f727375581cb7a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40f7e27d25ff74f023371ba607f727375581cb7a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "09e0c28f8566d9614084e5f52739f6241d80685a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09e0c28f8566d9614084e5f52739f6241d80685a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/09e0c28f8566d9614084e5f52739f6241d80685a"
      },
      {
        "sha": "6dbfe08c29535bb7b0359de8fe22acedcbf3532a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6dbfe08c29535bb7b0359de8fe22acedcbf3532a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6dbfe08c29535bb7b0359de8fe22acedcbf3532a"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 36,
      "deletions": 4
    },
    "files": [
      {
        "sha": "109312bd5f2dfd4b05a6bcda0a5c068c1e21b4f8",
        "filename": "qa/rpc-tests/signrawtransactions.py",
        "status": "modified",
        "additions": 31,
        "deletions": 3,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40f7e27d25ff74f023371ba607f727375581cb7a/qa/rpc-tests/signrawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40f7e27d25ff74f023371ba607f727375581cb7a/qa/rpc-tests/signrawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/signrawtransactions.py?ref=40f7e27d25ff74f023371ba607f727375581cb7a",
        "patch": "@@ -26,12 +26,14 @@ def successful_signing_test(self):\n \n         1) The transaction has a complete set of signatures\n         2) No script verification error occurred\"\"\"\n-        privKeys = ['cUeKHd5orzT3mz8P9pxyREHfsWtVfgsfDjiZZBcjUBAaGk1BTj7N']\n+        privKeys = ['cUeKHd5orzT3mz8P9pxyREHfsWtVfgsfDjiZZBcjUBAaGk1BTj7N', 'cVKpPfVKSJxKqVpE9awvXNWuLHCa5j5tiE7K6zbUSptFpTEtiFrA']\n \n         inputs = [\n-            # Valid pay-to-pubkey script\n+            # Valid pay-to-pubkey scripts\n             {'txid': '9b907ef1e3c26fc71fe4a4b3580bc75264112f95050014157059c736f0202e71', 'vout': 0,\n-             'scriptPubKey': '76a91460baa0f494b38ce3c940dea67f3804dc52d1fb9488ac'}\n+             'scriptPubKey': '76a91460baa0f494b38ce3c940dea67f3804dc52d1fb9488ac'},\n+            {'txid': '83a4f6a6b73660e13ee6cb3c6063fa3759c50c9b7521d0536022961898f4fb02', 'vout': 0,\n+             'scriptPubKey': '76a914669b857c03a5ed269d5d85a1ffac9ed5d663072788ac'},\n         ]\n \n         outputs = {'mpLQjfK79b7CCV4VMJWEWAj5Mpx8Up5zxB': 0.1}\n@@ -46,6 +48,22 @@ def successful_signing_test(self):\n         # 2) No script verification error occurred\n         assert 'errors' not in rawTxSigned\n \n+        # Check that signrawtransaction doesn't blow up on garbage merge attempts\n+        dummyTxInconsistent = self.nodes[0].createrawtransaction([inputs[0]], outputs)\n+        rawTxUnsigned = self.nodes[0].signrawtransaction(rawTx + dummyTxInconsistent, inputs)\n+\n+        assert 'complete' in rawTxUnsigned\n+        assert_equal(rawTxUnsigned['complete'], False)\n+\n+        # Check that signrawtransaction properly merges unsigned and signed txn, even with garbage in the middle\n+        rawTxSigned2 = self.nodes[0].signrawtransaction(rawTxUnsigned[\"hex\"] + dummyTxInconsistent + rawTxSigned[\"hex\"], inputs)\n+\n+        assert 'complete' in rawTxSigned2\n+        assert_equal(rawTxSigned2['complete'], True)\n+\n+        assert 'errors' not in rawTxSigned2\n+\n+\n     def script_verification_error_test(self):\n         \"\"\"Creates and signs a raw transaction with valid (vin 0), invalid (vin 1) and one missing (vin 2) input script.\n \n@@ -78,6 +96,16 @@ def script_verification_error_test(self):\n         outputs = {'mpLQjfK79b7CCV4VMJWEWAj5Mpx8Up5zxB': 0.1}\n \n         rawTx = self.nodes[0].createrawtransaction(inputs, outputs)\n+\n+        # Make sure decoderawtransaction is at least marginally sane\n+        decodedRawTx = self.nodes[0].decoderawtransaction(rawTx)\n+        for i, inp in enumerate(inputs):\n+            assert_equal(decodedRawTx[\"vin\"][i][\"txid\"], inp[\"txid\"])\n+            assert_equal(decodedRawTx[\"vin\"][i][\"vout\"], inp[\"vout\"])\n+\n+        # Make sure decoderawtransaction throws if there is extra data\n+        assert_raises(JSONRPCException, self.nodes[0].decoderawtransaction, rawTx + \"00\")\n+\n         rawTxSigned = self.nodes[0].signrawtransaction(rawTx, scripts, privKeys)\n \n         # 3) The transaction has no complete set of signatures"
      },
      {
        "sha": "a8d667e3bc74e71824fd919beaf81e7e73053022",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40f7e27d25ff74f023371ba607f727375581cb7a/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40f7e27d25ff74f023371ba607f727375581cb7a/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=40f7e27d25ff74f023371ba607f727375581cb7a",
        "patch": "@@ -111,6 +111,8 @@ bool DecodeHexTx(CMutableTransaction& tx, const std::string& strHexTx, bool fTry\n     CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION);\n     try {\n         ssData >> tx;\n+        if (!ssData.empty())\n+            return false;\n     }\n     catch (const std::exception&) {\n         return false;"
      },
      {
        "sha": "21396ebb09b78f9e625846adeb5763a778fa2b58",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40f7e27d25ff74f023371ba607f727375581cb7a/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40f7e27d25ff74f023371ba607f727375581cb7a/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=40f7e27d25ff74f023371ba607f727375581cb7a",
        "patch": "@@ -835,7 +835,9 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n \n         // ... and merge in other signatures:\n         BOOST_FOREACH(const CMutableTransaction& txv, txVariants) {\n-            sigdata = CombineSignatures(prevPubKey, TransactionSignatureChecker(&txConst, i, amount), sigdata, DataFromTransaction(txv, i));\n+            if (txv.vin.size() > i) {\n+                sigdata = CombineSignatures(prevPubKey, TransactionSignatureChecker(&txConst, i, amount), sigdata, DataFromTransaction(txv, i));\n+            }\n         }\n \n         UpdateTransaction(mergedTx, i, sigdata);"
      }
    ]
  },
  {
    "sha": "91bfffff5d1de034661e7fd6b319447b47ae6e33",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MWJmZmZmZjVkMWRlMDM0NjYxZTdmZDZiMzE5NDQ3YjQ3YWU2ZTMz",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-01-31T18:15:40Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-06T13:51:27Z"
      },
      "message": "Use argparse in rpc_tests.py\n\nThis commit replaces the roll-your-own argument parsing in rpc_tests.py\nwith Python's standard library argparse.",
      "tree": {
        "sha": "88b40a8e9353f40181f692f4e6e86676da157a58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/88b40a8e9353f40181f692f4e6e86676da157a58"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/91bfffff5d1de034661e7fd6b319447b47ae6e33",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91bfffff5d1de034661e7fd6b319447b47ae6e33",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/91bfffff5d1de034661e7fd6b319447b47ae6e33",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91bfffff5d1de034661e7fd6b319447b47ae6e33/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1581ecbc33edd9d6257e50b11d8854fbccaf8ad8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1581ecbc33edd9d6257e50b11d8854fbccaf8ad8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1581ecbc33edd9d6257e50b11d8854fbccaf8ad8"
      }
    ],
    "stats": {
      "total": 83,
      "additions": 44,
      "deletions": 39
    },
    "files": [
      {
        "sha": "862859919ae0c42935d4bac173222a503a368836",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 44,
        "deletions": 39,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91bfffff5d1de034661e7fd6b319447b47ae6e33/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91bfffff5d1de034661e7fd6b319447b47ae6e33/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=91bfffff5d1de034661e7fd6b319447b47ae6e33",
        "patch": "@@ -21,6 +21,7 @@\n \n \"\"\"\n \n+import argparse\n import configparser\n import os\n import time\n@@ -30,6 +31,19 @@\n import tempfile\n import re\n \n+# Parse arguments and pass through unrecognised args\n+parser = argparse.ArgumentParser(add_help=False)\n+parser.add_argument('--coverage', action='store_true')\n+parser.add_argument('-extended', action='store_true')\n+parser.add_argument('--help', '-h', '-?', action='store_true')\n+parser.add_argument('--parallel', type=int, default=4)\n+parser.add_argument('-win', action='store_true')\n+(args, unknown_args) = parser.parse_known_args()\n+\n+#Create a set to store arguments and create the passon string\n+tests = set(arg for arg in unknown_args if arg[:2] != \"--\")\n+passon_args = [arg for arg in unknown_args if arg[:2] == \"--\"]\n+\n BOLD = (\"\",\"\")\n if os.name == 'posix':\n     # primitive formatting on supported\n@@ -47,35 +61,14 @@\n \n RPC_TESTS_DIR = config[\"environment\"][\"SRCDIR\"] + '/qa/rpc-tests/'\n \n-ENABLE_COVERAGE=0\n-\n-#Create a set to store arguments and create the passon string\n-opts = set()\n-passon_args = []\n-PASSON_REGEX = re.compile(\"^--\")\n-PARALLEL_REGEX = re.compile('^-parallel=')\n-\n-print_help = False\n-run_parallel = 4\n-\n-for arg in sys.argv[1:]:\n-    if arg == \"--help\" or arg == \"-h\" or arg == \"-?\":\n-        print_help = True\n-        break\n-    if arg == '--coverage':\n-        ENABLE_COVERAGE = 1\n-    elif PASSON_REGEX.match(arg):\n-        passon_args.append(arg)\n-    elif PARALLEL_REGEX.match(arg):\n-        run_parallel = int(arg.split(sep='=', maxsplit=1)[1])\n-    else:\n-        opts.add(arg)\n+print_help = args.help\n+run_parallel = args.parallel\n \n #Set env vars\n if \"BITCOIND\" not in os.environ:\n     os.environ[\"BITCOIND\"] = config[\"environment\"][\"BUILDDIR\"] + '/src/bitcoind' + config[\"environment\"][\"EXEEXT\"]\n \n-if config[\"environment\"][\"EXEEXT\"] == \".exe\" and \"-win\" not in opts:\n+if config[\"environment\"][\"EXEEXT\"] == \".exe\" and not args.win:\n     # https://github.com/bitcoin/bitcoin/commit/d52802551752140cf41f0d9a225a43e84404d3e9\n     # https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-136646964\n     print(\"Win tests currently disabled by default.  Use -win option to enable\")\n@@ -95,7 +88,7 @@\n         # ENABLE_ZMQ=0\n         raise\n \n-testScripts = [\n+BASE_SCRIPTS= [\n     # longest test should go first, to favor running tests in parallel\n     'wallet-hd.py',\n     'walletbackup.py',\n@@ -152,10 +145,9 @@\n     'rpcnamedargs.py',\n     'listsinceblock.py',\n ]\n-if ENABLE_ZMQ:\n-    testScripts.append('zmq_test.py')\n+ZMQ_SCRIPTS = [\"zmq_test.py\"]\n \n-testScriptsExt = [\n+EXTENDED_SCRIPTS = [\n     'pruning.py',\n     # vv Tests less than 20m vv\n     'smartfees.py',\n@@ -184,26 +176,39 @@\n     'replace-by-fee.py',\n ]\n \n+ALL_SCRIPTS = BASE_SCRIPTS + ZMQ_SCRIPTS + EXTENDED_SCRIPTS\n \n def runtests():\n-    test_list = []\n-    if '-extended' in opts:\n-        test_list = testScripts + testScriptsExt\n-    elif len(opts) == 0 or (len(opts) == 1 and \"-win\" in opts):\n-        test_list = testScripts\n+    # Build list of tests\n+    if len(tests) != 0:\n+        # Individual tests have been specified. Run specified tests that exist\n+        # in the ALL_SCRIPTS list. Accept the name with or without .py extension.\n+        test_list = [t for t in ALL_SCRIPTS if\n+                (t in tests or re.sub(\".py$\", \"\", t) in tests)]\n+        if len(test_list) == 0:\n+            print(\"No valid test scripts specified. Check that your test is in one \"\n+                  \"of the test lists in rpc-tests.py or run rpc-tests.py with no arguments to run all tests\")\n+            sys.exit(0)\n     else:\n-        for t in testScripts + testScriptsExt:\n-            if t in opts or re.sub(\".py$\", \"\", t) in opts:\n-                test_list.append(t)\n-\n-    if print_help:\n+        # No individual tests have been specified. Run base tests, and\n+        # optionally ZMQ tests and extended tests.\n+        test_list = BASE_SCRIPTS\n+        if ENABLE_ZMQ:\n+            test_list += ZMQ_SCRIPTS\n+        if args.extended:\n+            test_list += EXTENDED_SCRIPTS\n+            # TODO: BASE_SCRIPTS and EXTENDED_SCRIPTS are sorted by runtime\n+            # (for parallel running efficiency). This combined list will is no\n+            # longer sorted.\n+\n+    if args.help:\n         # Only print help of the first script and exit\n         subprocess.check_call((RPC_TESTS_DIR + test_list[0]).split() + ['-h'])\n         sys.exit(0)\n \n     coverage = None\n \n-    if ENABLE_COVERAGE:\n+    if args.coverage:\n         coverage = RPCCoverage()\n         print(\"Initializing coverage directory at %s\\n\" % coverage.dir)\n     flags = [\"--srcdir=%s/src\" % config[\"environment\"][\"BUILDDIR\"]] + passon_args"
      }
    ]
  },
  {
    "sha": "afd38e7cc875e79f282ebf1c63fa10bf2d2af8d2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZmQzOGU3Y2M4NzVlNzlmMjgyZWJmMWM2M2ZhMTBiZjJkMmFmOGQy",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-01-31T19:32:49Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-06T13:55:16Z"
      },
      "message": "Improve rpc-tests.py arguments\n\nA few miscellaneous improvements to rpc-tests.py command line arguments:\n\n - make all arguments start with double dash for consistency\n - improve help text and output\n - add nozmq argument to explicitly exclude the ZMQ tests\n - change 'parallel' to 'jobs'",
      "tree": {
        "sha": "d20eed45965e575aba67357b36daaa91ddd5bc2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d20eed45965e575aba67357b36daaa91ddd5bc2e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/afd38e7cc875e79f282ebf1c63fa10bf2d2af8d2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afd38e7cc875e79f282ebf1c63fa10bf2d2af8d2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/afd38e7cc875e79f282ebf1c63fa10bf2d2af8d2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afd38e7cc875e79f282ebf1c63fa10bf2d2af8d2/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "91bfffff5d1de034661e7fd6b319447b47ae6e33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91bfffff5d1de034661e7fd6b319447b47ae6e33",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91bfffff5d1de034661e7fd6b319447b47ae6e33"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 23,
      "deletions": 25
    },
    "files": [
      {
        "sha": "637999ae48ada7fe3f5a2c13242bb0c59f1446d1",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 23,
        "deletions": 25,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afd38e7cc875e79f282ebf1c63fa10bf2d2af8d2/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afd38e7cc875e79f282ebf1c63fa10bf2d2af8d2/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=afd38e7cc875e79f282ebf1c63fa10bf2d2af8d2",
        "patch": "@@ -2,19 +2,11 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n \"\"\"\n-Run Regression Test Suite\n+rpc-tests.py - run regression test suite\n \n This module calls down into individual test cases via subprocess. It will\n-forward all unrecognized arguments onto the individual test scripts, other\n-than:\n-\n-    - `-extended`: run the \"extended\" test suite in addition to the basic one.\n-    - `-win`: signal that this is running in a Windows environment, and we\n-      should run the tests.\n-    - `--coverage`: this generates a basic coverage report for the RPC\n-      interface.\n+forward all unrecognized arguments onto the individual test scripts.\n \n For a description of arguments recognized by test scripts, see\n `qa/pull-tester/test_framework/test_framework.py:BitcoinTestFramework.main`.\n@@ -32,12 +24,18 @@\n import re\n \n # Parse arguments and pass through unrecognised args\n-parser = argparse.ArgumentParser(add_help=False)\n-parser.add_argument('--coverage', action='store_true')\n-parser.add_argument('-extended', action='store_true')\n-parser.add_argument('--help', '-h', '-?', action='store_true')\n-parser.add_argument('--parallel', type=int, default=4)\n-parser.add_argument('-win', action='store_true')\n+parser = argparse.ArgumentParser(add_help=False,\n+                                 usage='%(prog)s [rpc-test.py options] [script options] [scripts]',\n+                                 description=__doc__,\n+                                 epilog='''\n+Help text and arguments for individual test script:''',\n+                                 formatter_class=argparse.RawTextHelpFormatter)\n+parser.add_argument('--coverage', action='store_true', help='generate a basic coverage report for the RPC interface')\n+parser.add_argument('--extended', action='store_true', help='run the extended test suite in addition to the basic tests')\n+parser.add_argument('--help', '-h', '-?', action='store_true', help='print help text and exit')\n+parser.add_argument('--jobs', '-j', type=int, default=4, help='how many test scripts to run in parallel. Default=4.')\n+parser.add_argument('--nozmq', action='store_true', help='do not run the zmq tests')\n+parser.add_argument('--win', action='store_true', help='signal that this is running in a Windows environment and that we should run the tests')\n (args, unknown_args) = parser.parse_known_args()\n \n #Create a set to store arguments and create the passon string\n@@ -57,12 +55,12 @@\n ENABLE_WALLET = config[\"components\"][\"ENABLE_WALLET\"] == \"True\"\n ENABLE_UTILS = config[\"components\"][\"ENABLE_UTILS\"] == \"True\"\n ENABLE_BITCOIND = config[\"components\"][\"ENABLE_BITCOIND\"] == \"True\"\n-ENABLE_ZMQ = config[\"components\"][\"ENABLE_ZMQ\"] == \"True\"\n+ENABLE_ZMQ = config[\"components\"][\"ENABLE_ZMQ\"] == \"True\" and not args.nozmq\n \n RPC_TESTS_DIR = config[\"environment\"][\"SRCDIR\"] + '/qa/rpc-tests/'\n \n print_help = args.help\n-run_parallel = args.parallel\n+jobs = args.jobs\n \n #Set env vars\n if \"BITCOIND\" not in os.environ:\n@@ -71,7 +69,7 @@\n if config[\"environment\"][\"EXEEXT\"] == \".exe\" and not args.win:\n     # https://github.com/bitcoin/bitcoin/commit/d52802551752140cf41f0d9a225a43e84404d3e9\n     # https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-136646964\n-    print(\"Win tests currently disabled by default.  Use -win option to enable\")\n+    print(\"Win tests currently disabled by default.  Use --win option to enable\")\n     sys.exit(0)\n \n if not (ENABLE_WALLET and ENABLE_UTILS and ENABLE_BITCOIND):\n@@ -83,9 +81,8 @@\n     try:\n         import zmq\n     except ImportError:\n-        print(\"ERROR: \\\"import zmq\\\" failed. Set ENABLE_ZMQ=0 or \"\n-              \"to run zmq tests, see dependency info in /qa/README.md.\")\n-        # ENABLE_ZMQ=0\n+        print(\"ERROR: \\\"import zmq\\\" failed. Use -nozmq to run without the ZMQ tests.\"\n+              \"To run zmq tests, see dependency info in /qa/README.md.\")\n         raise\n \n BASE_SCRIPTS= [\n@@ -202,7 +199,8 @@ def runtests():\n             # longer sorted.\n \n     if args.help:\n-        # Only print help of the first script and exit\n+        # Print help for rpc-tests.py, then print help of the first script and exit.\n+        parser.print_help()\n         subprocess.check_call((RPC_TESTS_DIR + test_list[0]).split() + ['-h'])\n         sys.exit(0)\n \n@@ -216,15 +214,15 @@ def runtests():\n     if coverage:\n         flags.append(coverage.flag)\n \n-    if len(test_list) > 1 and run_parallel > 1:\n+    if len(test_list) > 1 and jobs > 1:\n         # Populate cache\n         subprocess.check_output([RPC_TESTS_DIR + 'create_cache.py'] + flags)\n \n     #Run Tests\n     max_len_name = len(max(test_list, key=len))\n     time_sum = 0\n     time0 = time.time()\n-    job_queue = RPCTestHandler(run_parallel, test_list, flags)\n+    job_queue = RPCTestHandler(jobs, test_list, flags)\n     results = BOLD[1] + \"%s | %s | %s\\n\\n\" % (\"TEST\".ljust(max_len_name), \"PASSED\", \"DURATION\") + BOLD[0]\n     all_passed = True\n     for _ in range(len(test_list)):"
      }
    ]
  },
  {
    "sha": "870cd2b58aba30ecd57c624ab1f1724b3235cb4d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NzBjZDJiNThhYmEzMGVjZDU3YzYyNGFiMWYxNzI0YjMyMzVjYjRk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-06T13:57:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-06T13:58:02Z"
      },
      "message": "Merge #9378: [trivial] Add documentation for CWalletTx::fFromMe member.\n\n39c77b0 Add documentation for CWalletTx::fFromMe member. (Russell Yanofsky)",
      "tree": {
        "sha": "b5ae2e0aaa770c34cb9018e8bfb2320a5823909e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b5ae2e0aaa770c34cb9018e8bfb2320a5823909e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/870cd2b58aba30ecd57c624ab1f1724b3235cb4d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYmIDqAAoJEHSBCwEjRsmmbF8H/0KY1lHP9iKtfFpA3UlTIaxg\ncIhB2Ib6eGyDwwMTE3Bs2ZQCdWtxQc+c6zHs1ST3p/bEd1ZyXsg/C/8YecSuV80R\nvR8zO4XQeVcaDyKcI/HuhWbCCFNKeRBaT4XMGOjeO8Z3YfrjEYIwztIGafWDPC02\nNWcirvK0DQsUgIVI+oeZGF6mjT5jkDM4bQ0ONGjZneHP+utnXhR3cqidPE5Yzcir\nNO5btuaSHhKEzKxRixH2NwCfcsNz4jqV0CVo2JRqg0JdvXDMTlVdk//8Ys9Ng+Ty\nCfeuPZ295nZdUaLRSUBhnT28NcLEtbYLo3vyT2ht1HcU30LQIodi5/4CUNtgpTU=\n=jLHw\n-----END PGP SIGNATURE-----",
        "payload": "tree b5ae2e0aaa770c34cb9018e8bfb2320a5823909e\nparent 40f7e27d25ff74f023371ba607f727375581cb7a\nparent 39c77b00e3d61dfea1f45be5d3b77e5adea7b91a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1486389464 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1486389482 +0100\n\nMerge #9378: [trivial] Add documentation for CWalletTx::fFromMe member.\n\n39c77b0 Add documentation for CWalletTx::fFromMe member. (Russell Yanofsky)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/870cd2b58aba30ecd57c624ab1f1724b3235cb4d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/870cd2b58aba30ecd57c624ab1f1724b3235cb4d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/870cd2b58aba30ecd57c624ab1f1724b3235cb4d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "40f7e27d25ff74f023371ba607f727375581cb7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40f7e27d25ff74f023371ba607f727375581cb7a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/40f7e27d25ff74f023371ba607f727375581cb7a"
      },
      {
        "sha": "39c77b00e3d61dfea1f45be5d3b77e5adea7b91a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39c77b00e3d61dfea1f45be5d3b77e5adea7b91a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/39c77b00e3d61dfea1f45be5d3b77e5adea7b91a"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ea4787c3639cce1b17a9357b57446d7299245b3f",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/870cd2b58aba30ecd57c624ab1f1724b3235cb4d/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/870cd2b58aba30ecd57c624ab1f1724b3235cb4d/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=870cd2b58aba30ecd57c624ab1f1724b3235cb4d",
        "patch": "@@ -261,6 +261,11 @@ class CWalletTx : public CMerkleTx\n     unsigned int fTimeReceivedIsTxTime;\n     unsigned int nTimeReceived; //!< time received by this node\n     unsigned int nTimeSmart;\n+    /**\n+     * From me flag is set to 1 for transactions that were created by the wallet\n+     * on this bitcoin node, and set to 0 for transactions that were created\n+     * externally and came in through the network or sendrawtransaction RPC.\n+     */\n     char fFromMe;\n     std::string strFromAccount;\n     int64_t nOrderPos; //!< position in ordered transaction list"
      }
    ]
  },
  {
    "sha": "3de3ccdfaaa5edcf4e0924860d960e7e0db5a9b9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZGUzY2NkZmFhYTVlZGNmNGUwOTI0ODYwZDk2MGU3ZTBkYjVhOWI5",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-06T14:07:14Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-06T14:07:14Z"
      },
      "message": "Refactor rpc-tests.py\n\n- add main()\n- remove global variables",
      "tree": {
        "sha": "ef9ac5296e1beaa04f5eaf77214f2c660410a705",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef9ac5296e1beaa04f5eaf77214f2c660410a705"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3de3ccdfaaa5edcf4e0924860d960e7e0db5a9b9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3de3ccdfaaa5edcf4e0924860d960e7e0db5a9b9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3de3ccdfaaa5edcf4e0924860d960e7e0db5a9b9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3de3ccdfaaa5edcf4e0924860d960e7e0db5a9b9/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "afd38e7cc875e79f282ebf1c63fa10bf2d2af8d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afd38e7cc875e79f282ebf1c63fa10bf2d2af8d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/afd38e7cc875e79f282ebf1c63fa10bf2d2af8d2"
      }
    ],
    "stats": {
      "total": 185,
      "additions": 100,
      "deletions": 85
    },
    "files": [
      {
        "sha": "1b4c905641170ed7fa708f4e2e6ec2e75a79f22f",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 100,
        "deletions": 85,
        "changes": 185,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3de3ccdfaaa5edcf4e0924860d960e7e0db5a9b9/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3de3ccdfaaa5edcf4e0924860d960e7e0db5a9b9/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=3de3ccdfaaa5edcf4e0924860d960e7e0db5a9b9",
        "patch": "@@ -23,69 +23,8 @@\n import tempfile\n import re\n \n-# Parse arguments and pass through unrecognised args\n-parser = argparse.ArgumentParser(add_help=False,\n-                                 usage='%(prog)s [rpc-test.py options] [script options] [scripts]',\n-                                 description=__doc__,\n-                                 epilog='''\n-Help text and arguments for individual test script:''',\n-                                 formatter_class=argparse.RawTextHelpFormatter)\n-parser.add_argument('--coverage', action='store_true', help='generate a basic coverage report for the RPC interface')\n-parser.add_argument('--extended', action='store_true', help='run the extended test suite in addition to the basic tests')\n-parser.add_argument('--help', '-h', '-?', action='store_true', help='print help text and exit')\n-parser.add_argument('--jobs', '-j', type=int, default=4, help='how many test scripts to run in parallel. Default=4.')\n-parser.add_argument('--nozmq', action='store_true', help='do not run the zmq tests')\n-parser.add_argument('--win', action='store_true', help='signal that this is running in a Windows environment and that we should run the tests')\n-(args, unknown_args) = parser.parse_known_args()\n-\n-#Create a set to store arguments and create the passon string\n-tests = set(arg for arg in unknown_args if arg[:2] != \"--\")\n-passon_args = [arg for arg in unknown_args if arg[:2] == \"--\"]\n-\n-BOLD = (\"\",\"\")\n-if os.name == 'posix':\n-    # primitive formatting on supported\n-    # terminal via ANSI escape sequences:\n-    BOLD = ('\\033[0m', '\\033[1m')\n-\n-# Read config generated by configure.\n-config = configparser.ConfigParser()\n-config.read_file(open(os.path.dirname(__file__) + \"/tests_config.ini\"))\n-\n-ENABLE_WALLET = config[\"components\"][\"ENABLE_WALLET\"] == \"True\"\n-ENABLE_UTILS = config[\"components\"][\"ENABLE_UTILS\"] == \"True\"\n-ENABLE_BITCOIND = config[\"components\"][\"ENABLE_BITCOIND\"] == \"True\"\n-ENABLE_ZMQ = config[\"components\"][\"ENABLE_ZMQ\"] == \"True\" and not args.nozmq\n-\n-RPC_TESTS_DIR = config[\"environment\"][\"SRCDIR\"] + '/qa/rpc-tests/'\n-\n-print_help = args.help\n-jobs = args.jobs\n-\n-#Set env vars\n-if \"BITCOIND\" not in os.environ:\n-    os.environ[\"BITCOIND\"] = config[\"environment\"][\"BUILDDIR\"] + '/src/bitcoind' + config[\"environment\"][\"EXEEXT\"]\n-\n-if config[\"environment\"][\"EXEEXT\"] == \".exe\" and not args.win:\n-    # https://github.com/bitcoin/bitcoin/commit/d52802551752140cf41f0d9a225a43e84404d3e9\n-    # https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-136646964\n-    print(\"Win tests currently disabled by default.  Use --win option to enable\")\n-    sys.exit(0)\n-\n-if not (ENABLE_WALLET and ENABLE_UTILS and ENABLE_BITCOIND):\n-    print(\"No rpc tests to run. Wallet, utils, and bitcoind must all be enabled\")\n-    sys.exit(0)\n-\n-# python3-zmq may not be installed. Handle this gracefully and with some helpful info\n-if ENABLE_ZMQ:\n-    try:\n-        import zmq\n-    except ImportError:\n-        print(\"ERROR: \\\"import zmq\\\" failed. Use -nozmq to run without the ZMQ tests.\"\n-              \"To run zmq tests, see dependency info in /qa/README.md.\")\n-        raise\n-\n BASE_SCRIPTS= [\n+    # Scripts that are run by the travis build process\n     # longest test should go first, to favor running tests in parallel\n     'wallet-hd.py',\n     'walletbackup.py',\n@@ -142,9 +81,15 @@\n     'rpcnamedargs.py',\n     'listsinceblock.py',\n ]\n-ZMQ_SCRIPTS = [\"zmq_test.py\"]\n+\n+ZMQ_SCRIPTS = [\n+    # ZMQ test can only be run if bitcoin was built with zmq-enabled.\n+    # call rpc_tests.py with -nozmq to explicitly exclude these tests.\n+    \"zmq_test.py\"]\n \n EXTENDED_SCRIPTS = [\n+    # These tests are not run by the travis build process.\n+    # Longest test should go first, to favor running tests in parallel\n     'pruning.py',\n     # vv Tests less than 20m vv\n     'smartfees.py',\n@@ -175,7 +120,55 @@\n \n ALL_SCRIPTS = BASE_SCRIPTS + ZMQ_SCRIPTS + EXTENDED_SCRIPTS\n \n-def runtests():\n+def main():\n+    # Parse arguments and pass through unrecognised args\n+    parser = argparse.ArgumentParser(add_help=False,\n+                                     usage='%(prog)s [rpc-test.py options] [script options] [scripts]',\n+                                     description=__doc__,\n+                                     epilog='''\n+    Help text and arguments for individual test script:''',\n+                                     formatter_class=argparse.RawTextHelpFormatter)\n+    parser.add_argument('--coverage', action='store_true', help='generate a basic coverage report for the RPC interface')\n+    parser.add_argument('--extended', action='store_true', help='run the extended test suite in addition to the basic tests')\n+    parser.add_argument('--help', '-h', '-?', action='store_true', help='print help text and exit')\n+    parser.add_argument('--nozmq', action='store_true', help='do not run the zmq tests')\n+    parser.add_argument('--jobs', '-j', type=int, default=4, help='how many test scripts to run in parallel. Default=4.')\n+    parser.add_argument('--win', action='store_true', help='signal that this is running in a Windows environment and that we should run the tests')\n+    (args, unknown_args) = parser.parse_known_args()\n+\n+    # Create a set to store arguments and create the passon string\n+    tests = set(arg for arg in unknown_args if arg[:2] != \"--\")\n+    passon_args = [arg for arg in unknown_args if arg[:2] == \"--\"]\n+\n+    # Read config generated by configure.\n+    config = configparser.ConfigParser()\n+    config.read_file(open(os.path.dirname(__file__) + \"/tests_config.ini\"))\n+\n+    enable_wallet = config[\"components\"][\"ENABLE_WALLET\"] == \"True\"\n+    enable_utils = config[\"components\"][\"ENABLE_UTILS\"] == \"True\"\n+    enable_bitcoind = config[\"components\"][\"ENABLE_BITCOIND\"] == \"True\"\n+    enable_zmq = config[\"components\"][\"ENABLE_ZMQ\"] == \"True\" and not args.nozmq\n+\n+    if config[\"environment\"][\"EXEEXT\"] == \".exe\" and not args.win:\n+        # https://github.com/bitcoin/bitcoin/commit/d52802551752140cf41f0d9a225a43e84404d3e9\n+        # https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-136646964\n+        print(\"Win tests currently disabled by default.  Use --win option to enable\")\n+        sys.exit(0)\n+\n+    if not (enable_wallet and enable_utils and enable_bitcoind):\n+        print(\"No rpc tests to run. Wallet, utils, and bitcoind must all be enabled\")\n+        print(\"Rerun `configure` with -enable-wallet, -with-utils and -with-daemon and rerun make\")\n+        sys.exit(0)\n+\n+    # python3-zmq may not be installed. Handle this gracefully and with some helpful info\n+    if enable_zmq:\n+        try:\n+            import zmq\n+        except ImportError:\n+            print(\"ERROR: \\\"import zmq\\\" failed. Use -nozmq to run without the ZMQ tests.\"\n+                  \"To run zmq tests, see dependency info in /qa/README.md.\")\n+            raise\n+\n     # Build list of tests\n     if len(tests) != 0:\n         # Individual tests have been specified. Run specified tests that exist\n@@ -185,12 +178,15 @@ def runtests():\n         if len(test_list) == 0:\n             print(\"No valid test scripts specified. Check that your test is in one \"\n                   \"of the test lists in rpc-tests.py or run rpc-tests.py with no arguments to run all tests\")\n+            print(\"Scripts not found:\")\n+            print(tests)\n             sys.exit(0)\n+\n     else:\n         # No individual tests have been specified. Run base tests, and\n         # optionally ZMQ tests and extended tests.\n         test_list = BASE_SCRIPTS\n-        if ENABLE_ZMQ:\n+        if enable_zmq:\n             test_list += ZMQ_SCRIPTS\n         if args.extended:\n             test_list += EXTENDED_SCRIPTS\n@@ -201,30 +197,47 @@ def runtests():\n     if args.help:\n         # Print help for rpc-tests.py, then print help of the first script and exit.\n         parser.print_help()\n-        subprocess.check_call((RPC_TESTS_DIR + test_list[0]).split() + ['-h'])\n+        subprocess.check_call((config[\"environment\"][\"SRCDIR\"] + '/qa/rpc-tests/' + test_list[0]).split() + ['-h'])\n         sys.exit(0)\n \n-    coverage = None\n+    runtests(test_list, config[\"environment\"][\"SRCDIR\"], config[\"environment\"][\"BUILDDIR\"], config[\"environment\"][\"EXEEXT\"], args.jobs, args.coverage, passon_args)\n+\n+def runtests(test_list, src_dir, build_dir, exeext, jobs=1, enable_coverage=False, args=[]):\n+    BOLD = (\"\",\"\")\n+    if os.name == 'posix':\n+        # primitive formatting on supported\n+        # terminal via ANSI escape sequences:\n+        BOLD = ('\\033[0m', '\\033[1m')\n+\n+    #Set env vars\n+    if \"BITCOIND\" not in os.environ:\n+        os.environ[\"BITCOIND\"] = build_dir + '/src/bitcoind' + exeext\n+\n+    tests_dir = src_dir + '/qa/rpc-tests/'\n \n-    if args.coverage:\n+    flags = [\"--srcdir=\" + src_dir] + args\n+    flags.append(\"--cachedir=%s/qa/cache\" % build_dir)\n+\n+    if enable_coverage:\n         coverage = RPCCoverage()\n-        print(\"Initializing coverage directory at %s\\n\" % coverage.dir)\n-    flags = [\"--srcdir=%s/src\" % config[\"environment\"][\"BUILDDIR\"]] + passon_args\n-    flags.append(\"--cachedir=%s/qa/cache\" % config[\"environment\"][\"BUILDDIR\"])\n-    if coverage:\n         flags.append(coverage.flag)\n+        print(\"Initializing coverage directory at %s\\n\" % coverage.dir)\n+    else:\n+        coverage = None\n \n     if len(test_list) > 1 and jobs > 1:\n         # Populate cache\n-        subprocess.check_output([RPC_TESTS_DIR + 'create_cache.py'] + flags)\n+        subprocess.check_output([tests_dir + 'create_cache.py'] + flags)\n \n     #Run Tests\n-    max_len_name = len(max(test_list, key=len))\n+    all_passed = True\n     time_sum = 0\n     time0 = time.time()\n-    job_queue = RPCTestHandler(jobs, test_list, flags)\n+\n+    job_queue = RPCTestHandler(jobs, tests_dir, test_list, flags)\n+\n+    max_len_name = len(max(test_list, key=len))\n     results = BOLD[1] + \"%s | %s | %s\\n\\n\" % (\"TEST\".ljust(max_len_name), \"PASSED\", \"DURATION\") + BOLD[0]\n-    all_passed = True\n     for _ in range(len(test_list)):\n         (name, stdout, stderr, passed, duration) = job_queue.get_next()\n         all_passed = all_passed and passed\n@@ -233,8 +246,10 @@ def runtests():\n         print('\\n' + BOLD[1] + name + BOLD[0] + \":\")\n         print('' if passed else stdout + '\\n', end='')\n         print('' if stderr == '' else 'stderr:\\n' + stderr + '\\n', end='')\n-        results += \"%s | %s | %s s\\n\" % (name.ljust(max_len_name), str(passed).ljust(6), duration)\n         print(\"Pass: %s%s%s, Duration: %s s\\n\" % (BOLD[1], passed, BOLD[0], duration))\n+\n+        results += \"%s | %s | %s s\\n\" % (name.ljust(max_len_name), str(passed).ljust(6), duration)\n+\n     results += BOLD[1] + \"\\n%s | %s | %s s (accumulated)\" % (\"ALL\".ljust(max_len_name), str(all_passed).ljust(6), time_sum) + BOLD[0]\n     print(results)\n     print(\"\\nRuntime: %s s\" % (int(time.time() - time0)))\n@@ -247,15 +262,15 @@ def runtests():\n \n     sys.exit(not all_passed)\n \n-\n class RPCTestHandler:\n     \"\"\"\n     Trigger the testscrips passed in via the list.\n     \"\"\"\n \n-    def __init__(self, num_tests_parallel, test_list=None, flags=None):\n+    def __init__(self, num_tests_parallel, tests_dir, test_list=None, flags=None):\n         assert(num_tests_parallel >= 1)\n         self.num_jobs = num_tests_parallel\n+        self.tests_dir = tests_dir\n         self.test_list = test_list\n         self.flags = flags\n         self.num_running = 0\n@@ -275,7 +290,7 @@ def get_next(self):\n             log_stderr = tempfile.SpooledTemporaryFile(max_size=2**16)\n             self.jobs.append((t,\n                               time.time(),\n-                              subprocess.Popen((RPC_TESTS_DIR + t).split() + self.flags + port_seed,\n+                              subprocess.Popen((self.tests_dir + t).split() + self.flags + port_seed,\n                                                universal_newlines=True,\n                                                stdout=log_stdout,\n                                                stderr=log_stderr),\n@@ -340,10 +355,10 @@ def _get_uncovered_rpc_commands(self):\n \n         \"\"\"\n         # This is shared from `qa/rpc-tests/test-framework/coverage.py`\n-        REFERENCE_FILENAME = 'rpc_interface.txt'\n-        COVERAGE_FILE_PREFIX = 'coverage.'\n+        reference_filename = 'rpc_interface.txt'\n+        coverage_file_prefix = 'coverage.'\n \n-        coverage_ref_filename = os.path.join(self.dir, REFERENCE_FILENAME)\n+        coverage_ref_filename = os.path.join(self.dir, reference_filename)\n         coverage_filenames = set()\n         all_cmds = set()\n         covered_cmds = set()\n@@ -356,7 +371,7 @@ def _get_uncovered_rpc_commands(self):\n \n         for root, dirs, files in os.walk(self.dir):\n             for filename in files:\n-                if filename.startswith(COVERAGE_FILE_PREFIX):\n+                if filename.startswith(coverage_file_prefix):\n                     coverage_filenames.add(os.path.join(root, filename))\n \n         for filename in coverage_filenames:\n@@ -367,4 +382,4 @@ def _get_uncovered_rpc_commands(self):\n \n \n if __name__ == '__main__':\n-    runtests()\n+    main()"
      }
    ]
  },
  {
    "sha": "02464da5e4aa8c19d4fff3859dcdee822e2af78c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMjQ2NGRhNWU0YWE4YzE5ZDRmZmYzODU5ZGNkZWU4MjJlMmFmNzhj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-06T14:01:49Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-06T15:14:17Z"
      },
      "message": "Merge #9227: Make nWalletDBUpdated atomic to avoid a potential race.\n\nd63ff62 Make nWalletDBUpdated atomic to avoid a potential race. (Patrick Strateman)",
      "tree": {
        "sha": "00784ec6963a8370dc424c679856abd61331874e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/00784ec6963a8370dc424c679856abd61331874e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/02464da5e4aa8c19d4fff3859dcdee822e2af78c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYmJLJAAoJEHSBCwEjRsmms6AH/26zTashm69W7W/8IwkDssLF\nE482XeQTPMKcCbqOqXJ+YmMkJBhUx1Y4n4UesZyc6fZZ0mSxo6xL01Ua8fp18mPj\ntxFHdrokc4PmvjZx931jGo0tdLOPZMtlQPInANNz+NGBk5UV+hMTcM7X3uzA7Mds\nFLwbXBF+iIaZoAsFtzQYLk/BFRew92G7dorfjWIZ02G8WpkbGJQQw99DT8f4gXFb\neuelWUlUeZ8nX14V8p8YjYgrUlqG9al2Y4sGRaircFhGOhSgLtlZ1zVqmHOfIiQq\noAflPVx3L2Cx2YRJrqlzHXGs2utHOHRosakJTMi5QVLWGRiG49giwTXdNZnk2ek=\n=YaN3\n-----END PGP SIGNATURE-----",
        "payload": "tree 00784ec6963a8370dc424c679856abd61331874e\nparent 870cd2b58aba30ecd57c624ab1f1724b3235cb4d\nparent d63ff6265b0c6ae30efcbb9120d4db419606198a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1486389709 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1486394057 +0100\n\nMerge #9227: Make nWalletDBUpdated atomic to avoid a potential race.\n\nd63ff62 Make nWalletDBUpdated atomic to avoid a potential race. (Patrick Strateman)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02464da5e4aa8c19d4fff3859dcdee822e2af78c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/02464da5e4aa8c19d4fff3859dcdee822e2af78c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02464da5e4aa8c19d4fff3859dcdee822e2af78c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "870cd2b58aba30ecd57c624ab1f1724b3235cb4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/870cd2b58aba30ecd57c624ab1f1724b3235cb4d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/870cd2b58aba30ecd57c624ab1f1724b3235cb4d"
      },
      {
        "sha": "d63ff6265b0c6ae30efcbb9120d4db419606198a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d63ff6265b0c6ae30efcbb9120d4db419606198a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d63ff6265b0c6ae30efcbb9120d4db419606198a"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 43,
      "deletions": 33
    },
    "files": [
      {
        "sha": "7d1b429b3069635f49b5d9c9d8470b12fe3a9af1",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02464da5e4aa8c19d4fff3859dcdee822e2af78c/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02464da5e4aa8c19d4fff3859dcdee822e2af78c/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=02464da5e4aa8c19d4fff3859dcdee822e2af78c",
        "patch": "@@ -24,9 +24,6 @@\n using namespace std;\n \n \n-unsigned int nWalletDBUpdated;\n-\n-\n //\n // CDB\n //"
      },
      {
        "sha": "b4ce044e7f58da2eea808d3e253f87d20bd892d2",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02464da5e4aa8c19d4fff3859dcdee822e2af78c/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02464da5e4aa8c19d4fff3859dcdee822e2af78c/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=02464da5e4aa8c19d4fff3859dcdee822e2af78c",
        "patch": "@@ -23,8 +23,6 @@\n static const unsigned int DEFAULT_WALLET_DBLOGSIZE = 100;\n static const bool DEFAULT_WALLET_PRIVDB = true;\n \n-extern unsigned int nWalletDBUpdated;\n-\n class CDBEnv\n {\n private:"
      },
      {
        "sha": "a5e8752fc0daaa1e82af2a6bc5f8276c7cdc922e",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02464da5e4aa8c19d4fff3859dcdee822e2af78c/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02464da5e4aa8c19d4fff3859dcdee822e2af78c/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=02464da5e4aa8c19d4fff3859dcdee822e2af78c",
        "patch": "@@ -3691,7 +3691,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n         walletInstance->ScanForWalletTransactions(pindexRescan, true);\n         LogPrintf(\" rescan      %15dms\\n\", GetTimeMillis() - nStart);\n         walletInstance->SetBestChain(chainActive.GetLocator());\n-        nWalletDBUpdated++;\n+        CWalletDB::IncrementUpdateCounter();\n \n         // Restore wallet transaction metadata after -zapwallettxes=1\n         if (GetBoolArg(\"-zapwallettxes\", false) && GetArg(\"-zapwallettxes\", \"1\") != \"2\")"
      },
      {
        "sha": "b00ce36b708b2bc9405fe6fca928c45d539d88ad",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 26,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02464da5e4aa8c19d4fff3859dcdee822e2af78c/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02464da5e4aa8c19d4fff3859dcdee822e2af78c/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=02464da5e4aa8c19d4fff3859dcdee822e2af78c",
        "patch": "@@ -15,6 +15,8 @@\n #include \"utiltime.h\"\n #include \"wallet/wallet.h\"\n \n+#include <atomic>\n+\n #include <boost/version.hpp>\n #include <boost/filesystem.hpp>\n #include <boost/foreach.hpp>\n@@ -24,51 +26,53 @@ using namespace std;\n \n static uint64_t nAccountingEntryNumber = 0;\n \n+static std::atomic<unsigned int> nWalletDBUpdateCounter;\n+\n //\n // CWalletDB\n //\n \n bool CWalletDB::WriteName(const string& strAddress, const string& strName)\n {\n-    nWalletDBUpdated++;\n+    nWalletDBUpdateCounter++;\n     return Write(make_pair(string(\"name\"), strAddress), strName);\n }\n \n bool CWalletDB::EraseName(const string& strAddress)\n {\n     // This should only be used for sending addresses, never for receiving addresses,\n     // receiving addresses must always have an address book entry if they're not change return.\n-    nWalletDBUpdated++;\n+    nWalletDBUpdateCounter++;\n     return Erase(make_pair(string(\"name\"), strAddress));\n }\n \n bool CWalletDB::WritePurpose(const string& strAddress, const string& strPurpose)\n {\n-    nWalletDBUpdated++;\n+    nWalletDBUpdateCounter++;\n     return Write(make_pair(string(\"purpose\"), strAddress), strPurpose);\n }\n \n bool CWalletDB::ErasePurpose(const string& strPurpose)\n {\n-    nWalletDBUpdated++;\n+    nWalletDBUpdateCounter++;\n     return Erase(make_pair(string(\"purpose\"), strPurpose));\n }\n \n bool CWalletDB::WriteTx(const CWalletTx& wtx)\n {\n-    nWalletDBUpdated++;\n+    nWalletDBUpdateCounter++;\n     return Write(std::make_pair(std::string(\"tx\"), wtx.GetHash()), wtx);\n }\n \n bool CWalletDB::EraseTx(uint256 hash)\n {\n-    nWalletDBUpdated++;\n+    nWalletDBUpdateCounter++;\n     return Erase(std::make_pair(std::string(\"tx\"), hash));\n }\n \n bool CWalletDB::WriteKey(const CPubKey& vchPubKey, const CPrivKey& vchPrivKey, const CKeyMetadata& keyMeta)\n {\n-    nWalletDBUpdated++;\n+    nWalletDBUpdateCounter++;\n \n     if (!Write(std::make_pair(std::string(\"keymeta\"), vchPubKey),\n                keyMeta, false))\n@@ -88,7 +92,7 @@ bool CWalletDB::WriteCryptedKey(const CPubKey& vchPubKey,\n                                 const CKeyMetadata &keyMeta)\n {\n     const bool fEraseUnencryptedKey = true;\n-    nWalletDBUpdated++;\n+    nWalletDBUpdateCounter++;\n \n     if (!Write(std::make_pair(std::string(\"keymeta\"), vchPubKey),\n             keyMeta))\n@@ -106,31 +110,31 @@ bool CWalletDB::WriteCryptedKey(const CPubKey& vchPubKey,\n \n bool CWalletDB::WriteMasterKey(unsigned int nID, const CMasterKey& kMasterKey)\n {\n-    nWalletDBUpdated++;\n+    nWalletDBUpdateCounter++;\n     return Write(std::make_pair(std::string(\"mkey\"), nID), kMasterKey, true);\n }\n \n bool CWalletDB::WriteCScript(const uint160& hash, const CScript& redeemScript)\n {\n-    nWalletDBUpdated++;\n+    nWalletDBUpdateCounter++;\n     return Write(std::make_pair(std::string(\"cscript\"), hash), *(const CScriptBase*)(&redeemScript), false);\n }\n \n bool CWalletDB::WriteWatchOnly(const CScript &dest)\n {\n-    nWalletDBUpdated++;\n+    nWalletDBUpdateCounter++;\n     return Write(std::make_pair(std::string(\"watchs\"), *(const CScriptBase*)(&dest)), '1');\n }\n \n bool CWalletDB::EraseWatchOnly(const CScript &dest)\n {\n-    nWalletDBUpdated++;\n+    nWalletDBUpdateCounter++;\n     return Erase(std::make_pair(std::string(\"watchs\"), *(const CScriptBase*)(&dest)));\n }\n \n bool CWalletDB::WriteBestBlock(const CBlockLocator& locator)\n {\n-    nWalletDBUpdated++;\n+    nWalletDBUpdateCounter++;\n     Write(std::string(\"bestblock\"), CBlockLocator()); // Write empty block locator so versions that require a merkle branch automatically rescan\n     return Write(std::string(\"bestblock_nomerkle\"), locator);\n }\n@@ -143,13 +147,13 @@ bool CWalletDB::ReadBestBlock(CBlockLocator& locator)\n \n bool CWalletDB::WriteOrderPosNext(int64_t nOrderPosNext)\n {\n-    nWalletDBUpdated++;\n+    nWalletDBUpdateCounter++;\n     return Write(std::string(\"orderposnext\"), nOrderPosNext);\n }\n \n bool CWalletDB::WriteDefaultKey(const CPubKey& vchPubKey)\n {\n-    nWalletDBUpdated++;\n+    nWalletDBUpdateCounter++;\n     return Write(std::string(\"defaultkey\"), vchPubKey);\n }\n \n@@ -160,13 +164,13 @@ bool CWalletDB::ReadPool(int64_t nPool, CKeyPool& keypool)\n \n bool CWalletDB::WritePool(int64_t nPool, const CKeyPool& keypool)\n {\n-    nWalletDBUpdated++;\n+    nWalletDBUpdateCounter++;\n     return Write(std::make_pair(std::string(\"pool\"), nPool), keypool);\n }\n \n bool CWalletDB::ErasePool(int64_t nPool)\n {\n-    nWalletDBUpdated++;\n+    nWalletDBUpdateCounter++;\n     return Erase(std::make_pair(std::string(\"pool\"), nPool));\n }\n \n@@ -780,20 +784,20 @@ void ThreadFlushWalletDB()\n     if (!GetBoolArg(\"-flushwallet\", DEFAULT_FLUSHWALLET))\n         return;\n \n-    unsigned int nLastSeen = nWalletDBUpdated;\n-    unsigned int nLastFlushed = nWalletDBUpdated;\n+    unsigned int nLastSeen = CWalletDB::GetUpdateCounter();\n+    unsigned int nLastFlushed = CWalletDB::GetUpdateCounter();\n     int64_t nLastWalletUpdate = GetTime();\n     while (true)\n     {\n         MilliSleep(500);\n \n-        if (nLastSeen != nWalletDBUpdated)\n+        if (nLastSeen != CWalletDB::GetUpdateCounter())\n         {\n-            nLastSeen = nWalletDBUpdated;\n+            nLastSeen = CWalletDB::GetUpdateCounter();\n             nLastWalletUpdate = GetTime();\n         }\n \n-        if (nLastFlushed != nWalletDBUpdated && GetTime() - nLastWalletUpdate >= 2)\n+        if (nLastFlushed != CWalletDB::GetUpdateCounter() && GetTime() - nLastWalletUpdate >= 2)\n         {\n             TRY_LOCK(bitdb.cs_db,lockDb);\n             if (lockDb)\n@@ -815,7 +819,7 @@ void ThreadFlushWalletDB()\n                     if (_mi != bitdb.mapFileUseCount.end())\n                     {\n                         LogPrint(\"db\", \"Flushing %s\\n\", strFile);\n-                        nLastFlushed = nWalletDBUpdated;\n+                        nLastFlushed = CWalletDB::GetUpdateCounter();\n                         int64_t nStart = GetTimeMillis();\n \n                         // Flush wallet file so it's self contained\n@@ -922,19 +926,29 @@ bool CWalletDB::Recover(CDBEnv& dbenv, const std::string& filename)\n \n bool CWalletDB::WriteDestData(const std::string &address, const std::string &key, const std::string &value)\n {\n-    nWalletDBUpdated++;\n+    nWalletDBUpdateCounter++;\n     return Write(std::make_pair(std::string(\"destdata\"), std::make_pair(address, key)), value);\n }\n \n bool CWalletDB::EraseDestData(const std::string &address, const std::string &key)\n {\n-    nWalletDBUpdated++;\n+    nWalletDBUpdateCounter++;\n     return Erase(std::make_pair(std::string(\"destdata\"), std::make_pair(address, key)));\n }\n \n \n bool CWalletDB::WriteHDChain(const CHDChain& chain)\n {\n-    nWalletDBUpdated++;\n+    nWalletDBUpdateCounter++;\n     return Write(std::string(\"hdchain\"), chain);\n }\n+\n+void CWalletDB::IncrementUpdateCounter()\n+{\n+    nWalletDBUpdateCounter++;\n+}\n+\n+unsigned int CWalletDB::GetUpdateCounter()\n+{\n+    return nWalletDBUpdateCounter;\n+}"
      },
      {
        "sha": "8437a95ba7744b9393085f0b38065b0a3b929c50",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02464da5e4aa8c19d4fff3859dcdee822e2af78c/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02464da5e4aa8c19d4fff3859dcdee822e2af78c/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=02464da5e4aa8c19d4fff3859dcdee822e2af78c",
        "patch": "@@ -176,10 +176,11 @@ class CWalletDB : public CDB\n     //! write the hdchain model (external chain child index counter)\n     bool WriteHDChain(const CHDChain& chain);\n \n+    static void IncrementUpdateCounter();\n+    static unsigned int GetUpdateCounter();\n private:\n     CWalletDB(const CWalletDB&);\n     void operator=(const CWalletDB&);\n-\n };\n \n void ThreadFlushWalletDB();"
      }
    ]
  },
  {
    "sha": "45e2e085612463dd9cca9f1b221733afa6d52991",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NWUyZTA4NTYxMjQ2M2RkOWNjYTlmMWIyMjE3MzNhZmE2ZDUyOTkx",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-06T18:47:24Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-06T19:48:50Z"
      },
      "message": "net: rearrange so that socket accesses can be grouped together",
      "tree": {
        "sha": "61a599d965a34037f358eb5c03489d82206da0d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/61a599d965a34037f358eb5c03489d82206da0d0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/45e2e085612463dd9cca9f1b221733afa6d52991",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45e2e085612463dd9cca9f1b221733afa6d52991",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/45e2e085612463dd9cca9f1b221733afa6d52991",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45e2e085612463dd9cca9f1b221733afa6d52991/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02464da5e4aa8c19d4fff3859dcdee822e2af78c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02464da5e4aa8c19d4fff3859dcdee822e2af78c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02464da5e4aa8c19d4fff3859dcdee822e2af78c"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 23,
      "deletions": 14
    },
    "files": [
      {
        "sha": "b47514fd925d580b372fe4a7430957f16caa2647",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 14,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45e2e085612463dd9cca9f1b221733afa6d52991/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45e2e085612463dd9cca9f1b221733afa6d52991/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=45e2e085612463dd9cca9f1b221733afa6d52991",
        "patch": "@@ -1152,9 +1152,6 @@ void CConnman::ThreadSocketHandler()\n             {\n                 if (pnode->hSocket == INVALID_SOCKET)\n                     continue;\n-                FD_SET(pnode->hSocket, &fdsetError);\n-                hSocketMax = std::max(hSocketMax, pnode->hSocket);\n-                have_fds = true;\n \n                 // Implement the following logic:\n                 // * If there is data to send, select() for sending data. As this only\n@@ -1166,16 +1163,24 @@ void CConnman::ThreadSocketHandler()\n                 //   receiving data.\n                 // * Hand off all complete messages to the processor, to be handled without\n                 //   blocking here.\n+\n+                bool select_recv = !pnode->fPauseRecv;\n+                bool select_send;\n                 {\n                     LOCK(pnode->cs_vSend);\n-                    if (!pnode->vSendMsg.empty()) {\n-                        FD_SET(pnode->hSocket, &fdsetSend);\n-                        continue;\n-                    }\n+                    select_send = !pnode->vSendMsg.empty();\n                 }\n-                {\n-                    if (!pnode->fPauseRecv)\n-                        FD_SET(pnode->hSocket, &fdsetRecv);\n+\n+                FD_SET(pnode->hSocket, &fdsetError);\n+                hSocketMax = std::max(hSocketMax, pnode->hSocket);\n+                have_fds = true;\n+\n+                if (select_send) {\n+                    FD_SET(pnode->hSocket, &fdsetSend);\n+                    continue;\n+                }\n+                if (select_recv) {\n+                    FD_SET(pnode->hSocket, &fdsetRecv);\n                 }\n             }\n         }\n@@ -1229,9 +1234,15 @@ void CConnman::ThreadSocketHandler()\n             //\n             // Receive\n             //\n+            bool recvSet = false;\n+            bool sendSet = false;\n+            bool errorSet = false;\n             if (pnode->hSocket == INVALID_SOCKET)\n                 continue;\n-            if (FD_ISSET(pnode->hSocket, &fdsetRecv) || FD_ISSET(pnode->hSocket, &fdsetError))\n+            recvSet = FD_ISSET(pnode->hSocket, &fdsetRecv);\n+            sendSet = FD_ISSET(pnode->hSocket, &fdsetSend);\n+            errorSet = FD_ISSET(pnode->hSocket, &fdsetError);\n+            if (recvSet || errorSet)\n             {\n                 {\n                     {\n@@ -1286,9 +1297,7 @@ void CConnman::ThreadSocketHandler()\n             //\n             // Send\n             //\n-            if (pnode->hSocket == INVALID_SOCKET)\n-                continue;\n-            if (FD_ISSET(pnode->hSocket, &fdsetSend))\n+            if (sendSet)\n             {\n                 LOCK(pnode->cs_vSend);\n                 size_t nBytes = SocketSendData(pnode);"
      }
    ]
  },
  {
    "sha": "9a0b784deaab6b9fffcab227d928987b981d0572",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YTBiNzg0ZGVhYWI2YjlmZmZjYWIyMjdkOTI4OTg3Yjk4MWQwNTcy",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-06T19:05:45Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-06T19:48:50Z"
      },
      "message": "net: add a lock around hSocket",
      "tree": {
        "sha": "798813108d73e10d0bf9ee61be34efd4657d11a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/798813108d73e10d0bf9ee61be34efd4657d11a5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9a0b784deaab6b9fffcab227d928987b981d0572",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a0b784deaab6b9fffcab227d928987b981d0572",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9a0b784deaab6b9fffcab227d928987b981d0572",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a0b784deaab6b9fffcab227d928987b981d0572/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "45e2e085612463dd9cca9f1b221733afa6d52991",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45e2e085612463dd9cca9f1b221733afa6d52991",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/45e2e085612463dd9cca9f1b221733afa6d52991"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 29,
      "deletions": 15
    },
    "files": [
      {
        "sha": "2625cccaa3a922c400157297bbc7de1c87424c54",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 15,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a0b784deaab6b9fffcab227d928987b981d0572/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a0b784deaab6b9fffcab227d928987b981d0572/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=9a0b784deaab6b9fffcab227d928987b981d0572",
        "patch": "@@ -425,6 +425,7 @@ void CConnman::DumpBanlist()\n void CNode::CloseSocketDisconnect()\n {\n     fDisconnect = true;\n+    LOCK(cs_hSocket);\n     if (hSocket != INVALID_SOCKET)\n     {\n         LogPrint(\"net\", \"disconnecting peer=%d\\n\", id);\n@@ -789,7 +790,13 @@ size_t CConnman::SocketSendData(CNode *pnode) const\n     while (it != pnode->vSendMsg.end()) {\n         const auto &data = *it;\n         assert(data.size() > pnode->nSendOffset);\n-        int nBytes = send(pnode->hSocket, reinterpret_cast<const char*>(data.data()) + pnode->nSendOffset, data.size() - pnode->nSendOffset, MSG_NOSIGNAL | MSG_DONTWAIT);\n+        int nBytes = 0;\n+        {\n+            LOCK(pnode->cs_hSocket);\n+            if (pnode->hSocket == INVALID_SOCKET)\n+                break;\n+            nBytes = send(pnode->hSocket, reinterpret_cast<const char*>(data.data()) + pnode->nSendOffset, data.size() - pnode->nSendOffset, MSG_NOSIGNAL | MSG_DONTWAIT);\n+        }\n         if (nBytes > 0) {\n             pnode->nLastSend = GetSystemTimeInSeconds();\n             pnode->nSendBytes += nBytes;\n@@ -1150,9 +1157,6 @@ void CConnman::ThreadSocketHandler()\n             LOCK(cs_vNodes);\n             BOOST_FOREACH(CNode* pnode, vNodes)\n             {\n-                if (pnode->hSocket == INVALID_SOCKET)\n-                    continue;\n-\n                 // Implement the following logic:\n                 // * If there is data to send, select() for sending data. As this only\n                 //   happens when optimistic write failed, we choose to first drain the\n@@ -1171,6 +1175,10 @@ void CConnman::ThreadSocketHandler()\n                     select_send = !pnode->vSendMsg.empty();\n                 }\n \n+                LOCK(pnode->cs_hSocket);\n+                if (pnode->hSocket == INVALID_SOCKET)\n+                    continue;\n+\n                 FD_SET(pnode->hSocket, &fdsetError);\n                 hSocketMax = std::max(hSocketMax, pnode->hSocket);\n                 have_fds = true;\n@@ -1237,18 +1245,27 @@ void CConnman::ThreadSocketHandler()\n             bool recvSet = false;\n             bool sendSet = false;\n             bool errorSet = false;\n-            if (pnode->hSocket == INVALID_SOCKET)\n-                continue;\n-            recvSet = FD_ISSET(pnode->hSocket, &fdsetRecv);\n-            sendSet = FD_ISSET(pnode->hSocket, &fdsetSend);\n-            errorSet = FD_ISSET(pnode->hSocket, &fdsetError);\n+            {\n+                LOCK(pnode->cs_hSocket);\n+                if (pnode->hSocket == INVALID_SOCKET)\n+                    continue;\n+                recvSet = FD_ISSET(pnode->hSocket, &fdsetRecv);\n+                sendSet = FD_ISSET(pnode->hSocket, &fdsetSend);\n+                errorSet = FD_ISSET(pnode->hSocket, &fdsetError);\n+            }\n             if (recvSet || errorSet)\n             {\n                 {\n                     {\n                         // typical socket buffer is 8K-64K\n                         char pchBuf[0x10000];\n-                        int nBytes = recv(pnode->hSocket, pchBuf, sizeof(pchBuf), MSG_DONTWAIT);\n+                        int nBytes = 0;\n+                        {\n+                            LOCK(pnode->cs_hSocket);\n+                            if (pnode->hSocket == INVALID_SOCKET)\n+                                continue;\n+                            nBytes = recv(pnode->hSocket, pchBuf, sizeof(pchBuf), MSG_DONTWAIT);\n+                        }\n                         if (nBytes > 0)\n                         {\n                             bool notify = false;\n@@ -2286,8 +2303,7 @@ void CConnman::Stop()\n \n     // Close sockets\n     BOOST_FOREACH(CNode* pnode, vNodes)\n-        if (pnode->hSocket != INVALID_SOCKET)\n-            CloseSocket(pnode->hSocket);\n+        pnode->CloseSocketDisconnect();\n     BOOST_FOREACH(ListenSocket& hListenSocket, vhListenSocket)\n         if (hListenSocket.socket != INVALID_SOCKET)\n             if (!CloseSocket(hListenSocket.socket))\n@@ -2688,9 +2704,6 @@ void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n     size_t nBytesSent = 0;\n     {\n         LOCK(pnode->cs_vSend);\n-        if(pnode->hSocket == INVALID_SOCKET) {\n-            return;\n-        }\n         bool optimisticSend(pnode->vSendMsg.empty());\n \n         //log total amount of bytes per command"
      },
      {
        "sha": "e5a19e0f43ef484525e5b4c531c9c3e4941b4f7c",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a0b784deaab6b9fffcab227d928987b981d0572/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a0b784deaab6b9fffcab227d928987b981d0572/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=9a0b784deaab6b9fffcab227d928987b981d0572",
        "patch": "@@ -572,6 +572,7 @@ class CNode\n     uint64_t nSendBytes;\n     std::deque<std::vector<unsigned char>> vSendMsg;\n     CCriticalSection cs_vSend;\n+    CCriticalSection cs_hSocket;\n \n     CCriticalSection cs_vProcessMsg;\n     std::list<CNetMessage> vProcessMsg;"
      }
    ]
  },
  {
    "sha": "8713de83a076c0e8e80f3bb0a6edf1f17d3856db",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NzEzZGU4M2EwNzZjMGU4ZTgwZjNiYjBhNmVkZjFmMTdkMzg1NmRi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-07T09:41:47Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-07T12:01:41Z"
      },
      "message": "build: Add options to override BDB cflags/libs\n\nAdd environment settings to specify the CFLAGS and LIBS to be used for\nBerkeleyDB directly. These will completely by-pass autodetection in the\nsame way as other similar flags.\n\n```\nBDB_CFLAGS  C compiler flags for BerkeleyDB, bypasses autodetection\nBDB_LIBS    Linker flags for BerkeleyDB, bypasses autodetection\n```\n\nImplements #3921.",
      "tree": {
        "sha": "68f3a96c4c1aa59d13f687e710bd8dcc6667afbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/68f3a96c4c1aa59d13f687e710bd8dcc6667afbe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8713de83a076c0e8e80f3bb0a6edf1f17d3856db",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8713de83a076c0e8e80f3bb0a6edf1f17d3856db",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8713de83a076c0e8e80f3bb0a6edf1f17d3856db",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8713de83a076c0e8e80f3bb0a6edf1f17d3856db/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02464da5e4aa8c19d4fff3859dcdee822e2af78c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02464da5e4aa8c19d4fff3859dcdee822e2af78c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02464da5e4aa8c19d4fff3859dcdee822e2af78c"
      }
    ],
    "stats": {
      "total": 120,
      "additions": 64,
      "deletions": 56
    },
    "files": [
      {
        "sha": "980f1e8f19cd2f1351be332d4908f7ba75ce4cfb",
        "filename": "build-aux/m4/bitcoin_find_bdb48.m4",
        "status": "modified",
        "additions": 64,
        "deletions": 56,
        "changes": 120,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8713de83a076c0e8e80f3bb0a6edf1f17d3856db/build-aux/m4/bitcoin_find_bdb48.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8713de83a076c0e8e80f3bb0a6edf1f17d3856db/build-aux/m4/bitcoin_find_bdb48.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_find_bdb48.m4?ref=8713de83a076c0e8e80f3bb0a6edf1f17d3856db",
        "patch": "@@ -3,68 +3,76 @@ dnl Distributed under the MIT software license, see the accompanying\n dnl file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n AC_DEFUN([BITCOIN_FIND_BDB48],[\n-  AC_MSG_CHECKING([for Berkeley DB C++ headers])\n-  BDB_CPPFLAGS=\n-  BDB_LIBS=\n-  bdbpath=X\n-  bdb48path=X\n-  bdbdirlist=\n-  for _vn in 4.8 48 4 5 ''; do\n-    for _pfx in b lib ''; do\n-      bdbdirlist=\"$bdbdirlist ${_pfx}db${_vn}\"\n+  AC_ARG_VAR(BDB_CFLAGS, [C compiler flags for BerkeleyDB, bypasses autodetection])\n+  AC_ARG_VAR(BDB_LIBS, [Linker flags for BerkeleyDB, bypasses autodetection])\n+\n+  if test \"x$BDB_CFLAGS\" = \"x\"; then\n+    AC_MSG_CHECKING([for Berkeley DB C++ headers])\n+    BDB_CPPFLAGS=\n+    bdbpath=X\n+    bdb48path=X\n+    bdbdirlist=\n+    for _vn in 4.8 48 4 5 ''; do\n+      for _pfx in b lib ''; do\n+        bdbdirlist=\"$bdbdirlist ${_pfx}db${_vn}\"\n+      done\n+    done\n+    for searchpath in $bdbdirlist ''; do\n+      test -n \"${searchpath}\" && searchpath=\"${searchpath}/\"\n+      AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+        #include <${searchpath}db_cxx.h>\n+      ]],[[\n+        #if !((DB_VERSION_MAJOR == 4 && DB_VERSION_MINOR >= 8) || DB_VERSION_MAJOR > 4)\n+          #error \"failed to find bdb 4.8+\"\n+        #endif\n+      ]])],[\n+        if test \"x$bdbpath\" = \"xX\"; then\n+          bdbpath=\"${searchpath}\"\n+        fi\n+      ],[\n+        continue\n+      ])\n+      AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+        #include <${searchpath}db_cxx.h>\n+      ]],[[\n+        #if !(DB_VERSION_MAJOR == 4 && DB_VERSION_MINOR == 8)\n+          #error \"failed to find bdb 4.8\"\n+        #endif\n+      ]])],[\n+        bdb48path=\"${searchpath}\"\n+        break\n+      ],[])\n     done\n-  done\n-  for searchpath in $bdbdirlist ''; do\n-    test -n \"${searchpath}\" && searchpath=\"${searchpath}/\"\n-    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n-      #include <${searchpath}db_cxx.h>\n-    ]],[[\n-      #if !((DB_VERSION_MAJOR == 4 && DB_VERSION_MINOR >= 8) || DB_VERSION_MAJOR > 4)\n-        #error \"failed to find bdb 4.8+\"\n-      #endif\n-    ]])],[\n-      if test \"x$bdbpath\" = \"xX\"; then\n-        bdbpath=\"${searchpath}\"\n-      fi\n-    ],[\n-      continue\n-    ])\n-    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n-      #include <${searchpath}db_cxx.h>\n-    ]],[[\n-      #if !(DB_VERSION_MAJOR == 4 && DB_VERSION_MINOR == 8)\n-        #error \"failed to find bdb 4.8\"\n-      #endif\n-    ]])],[\n-      bdb48path=\"${searchpath}\"\n-      break\n-    ],[])\n-  done\n-  if test \"x$bdbpath\" = \"xX\"; then\n-    AC_MSG_RESULT([no])\n-    AC_MSG_ERROR([libdb_cxx headers missing, ]AC_PACKAGE_NAME[ requires this library for wallet functionality (--disable-wallet to disable wallet functionality)])\n-  elif test \"x$bdb48path\" = \"xX\"; then\n-    BITCOIN_SUBDIR_TO_INCLUDE(BDB_CPPFLAGS,[${bdbpath}],db_cxx)\n-    AC_ARG_WITH([incompatible-bdb],[AS_HELP_STRING([--with-incompatible-bdb], [allow using a bdb version other than 4.8])],[\n-      AC_MSG_WARN([Found Berkeley DB other than 4.8; wallets opened by this build will not be portable!])\n-    ],[\n-      AC_MSG_ERROR([Found Berkeley DB other than 4.8, required for portable wallets (--with-incompatible-bdb to ignore or --disable-wallet to disable wallet functionality)])\n-    ])\n+    if test \"x$bdbpath\" = \"xX\"; then\n+      AC_MSG_RESULT([no])\n+      AC_MSG_ERROR([libdb_cxx headers missing, ]AC_PACKAGE_NAME[ requires this library for wallet functionality (--disable-wallet to disable wallet functionality)])\n+    elif test \"x$bdb48path\" = \"xX\"; then\n+      BITCOIN_SUBDIR_TO_INCLUDE(BDB_CPPFLAGS,[${bdbpath}],db_cxx)\n+      AC_ARG_WITH([incompatible-bdb],[AS_HELP_STRING([--with-incompatible-bdb], [allow using a bdb version other than 4.8])],[\n+        AC_MSG_WARN([Found Berkeley DB other than 4.8; wallets opened by this build will not be portable!])\n+      ],[\n+        AC_MSG_ERROR([Found Berkeley DB other than 4.8, required for portable wallets (--with-incompatible-bdb to ignore or --disable-wallet to disable wallet functionality)])\n+      ])\n+    else\n+      BITCOIN_SUBDIR_TO_INCLUDE(BDB_CPPFLAGS,[${bdb48path}],db_cxx)\n+      bdbpath=\"${bdb48path}\"\n+    fi\n   else\n-    BITCOIN_SUBDIR_TO_INCLUDE(BDB_CPPFLAGS,[${bdb48path}],db_cxx)\n-    bdbpath=\"${bdb48path}\"\n+    BDB_CPPFLAGS=${BDB_CFLAGS}\n   fi\n   AC_SUBST(BDB_CPPFLAGS)\n   \n-  # TODO: Ideally this could find the library version and make sure it matches the headers being used\n-  for searchlib in db_cxx-4.8 db_cxx; do\n-    AC_CHECK_LIB([$searchlib],[main],[\n-      BDB_LIBS=\"-l${searchlib}\"\n-      break\n-    ])\n-  done\n   if test \"x$BDB_LIBS\" = \"x\"; then\n-      AC_MSG_ERROR([libdb_cxx missing, ]AC_PACKAGE_NAME[ requires this library for wallet functionality (--disable-wallet to disable wallet functionality)])\n+    # TODO: Ideally this could find the library version and make sure it matches the headers being used\n+    for searchlib in db_cxx-4.8 db_cxx; do\n+      AC_CHECK_LIB([$searchlib],[main],[\n+        BDB_LIBS=\"-l${searchlib}\"\n+        break\n+      ])\n+    done\n+    if test \"x$BDB_LIBS\" = \"x\"; then\n+        AC_MSG_ERROR([libdb_cxx missing, ]AC_PACKAGE_NAME[ requires this library for wallet functionality (--disable-wallet to disable wallet functionality)])\n+    fi\n   fi\n   AC_SUBST(BDB_LIBS)\n ])"
      }
    ]
  },
  {
    "sha": "5cc2ebb619b6bc7125e6a5f83f860dfcaa759d93",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Y2MyZWJiNjE5YjZiYzcxMjVlNmE1ZjgzZjg2MGRmY2FhNzU5ZDkz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-07T09:58:18Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-07T12:01:41Z"
      },
      "message": "Update OpenBSD and FreeBSD build steps\n\nRe-try with most recent versions, and use BDB_CFLAGS/BDB_LIBS to\ndirectly point at BerkeleyDB instead of CPPFLAGS hacks.",
      "tree": {
        "sha": "da367badf48c3712b9ae98ca3adc53c6157b39ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da367badf48c3712b9ae98ca3adc53c6157b39ca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5cc2ebb619b6bc7125e6a5f83f860dfcaa759d93",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cc2ebb619b6bc7125e6a5f83f860dfcaa759d93",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5cc2ebb619b6bc7125e6a5f83f860dfcaa759d93",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cc2ebb619b6bc7125e6a5f83f860dfcaa759d93/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8713de83a076c0e8e80f3bb0a6edf1f17d3856db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8713de83a076c0e8e80f3bb0a6edf1f17d3856db",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8713de83a076c0e8e80f3bb0a6edf1f17d3856db"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 6,
      "deletions": 4
    },
    "files": [
      {
        "sha": "f4a9826d8079a57185be0e43a57a87854dc3140c",
        "filename": "doc/build-openbsd.md",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cc2ebb619b6bc7125e6a5f83f860dfcaa759d93/doc/build-openbsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cc2ebb619b6bc7125e6a5f83f860dfcaa759d93/doc/build-openbsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-openbsd.md?ref=5cc2ebb619b6bc7125e6a5f83f860dfcaa759d93",
        "patch": "@@ -1,6 +1,6 @@\n OpenBSD build guide\n ======================\n-(updated for OpenBSD 5.9)\n+(updated for OpenBSD 6.0)\n \n This guide describes how to build bitcoind and command-line utilities on OpenBSD.\n \n@@ -124,7 +124,7 @@ To configure with wallet:\n ```bash\n ./configure --with-gui=no --with-boost=$BOOST_PREFIX \\\n     CC=egcc CXX=eg++ CPP=ecpp \\\n-    LDFLAGS=\"-L${BDB_PREFIX}/lib/\" CPPFLAGS=\"-I${BDB_PREFIX}/include/\"\n+    BDB_LIBS=\"-L${BDB_PREFIX}/lib -ldb_cxx-4.8\" BDB_CFLAGS=\"-I${BDB_PREFIX}/include\"\n ```\n \n To configure without wallet:\n@@ -142,6 +142,8 @@ gmake check\n Clang (not currently working)\n ------------------------------\n \n+WARNING: This is outdated, needs to be updated for OpenBSD 6.0 and re-tried.\n+\n Using a newer g++ results in linking the new code to a new libstdc++.\n Libraries built with the old g++, will still import the old library.\n This gives conflicts, necessitating rebuild of all C++ dependencies of the application."
      },
      {
        "sha": "31a88a1b18c64c214aad5ea5ad75ac79d25aa57a",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cc2ebb619b6bc7125e6a5f83f860dfcaa759d93/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cc2ebb619b6bc7125e6a5f83f860dfcaa759d93/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=5cc2ebb619b6bc7125e6a5f83f860dfcaa759d93",
        "patch": "@@ -315,7 +315,7 @@ For further documentation on the depends system see [README.md](../depends/READM\n Building on FreeBSD\n --------------------\n \n-(Updated as of FreeBSD 10.3)\n+(Updated as of FreeBSD 11.0)\n \n Clang is installed by default as `cc` compiler, this makes it easier to get\n started than on [OpenBSD](build-openbsd.md). Installing dependencies:\n@@ -337,7 +337,7 @@ with 4.8-built Bitcoin Core is needed follow the steps under \"Berkeley DB\" above\n Then build using:\n \n     ./autogen.sh\n-    ./configure --with-incompatible-bdb CPPFLAGS=-I/usr/local/include/db5 LDFLAGS=-L/usr/local/lib/db5\n+    ./configure --with-incompatible-bdb BDB_CFLAGS=\"-I/usr/local/include/db5\" BDB_LIBS=\"-L/usr/local/lib -ldb_cxx-5\"\n     make\n \n *Note on debugging*: The version of `gdb` installed by default is [ancient and considered harmful](https://wiki.freebsd.org/GdbRetirement)."
      }
    ]
  },
  {
    "sha": "729de15b6365face6ae9e12a03624da33a6302f0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MjlkZTE1YjYzNjVmYWNlNmFlOWUxMmEwMzYyNGRhMzNhNjMwMmYw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-07T12:03:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-07T12:03:57Z"
      },
      "message": "Merge #9604: [Trivial] add comment about setting peer as HB peer.\n\ndd5b011 [Trivial] add comment about setting peer as HB peer. (John Newbery)",
      "tree": {
        "sha": "7c93bffbb4ce457da7b6b957f4fbd935613f4462",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7c93bffbb4ce457da7b6b957f4fbd935613f4462"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/729de15b6365face6ae9e12a03624da33a6302f0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYmbetAAoJEHSBCwEjRsmmORsIAII0DsYucc5oQ1kdTBzwW+Vt\nBynxZ9iYG/CK/k994ovdE5zVsoJH+chvP6++/f630WyYzEJ06IasFwAFRtrZXwp9\nMotHDeq+4FUepTEs+pA1ButvIU2BlxXdG4S2aRMPM4tQqqhhm00ztuumnb4R3nu1\n8FFdOEQV/RJ2mHAqKOXuy85n5lWjifcpgr+3OIwo3/VE+7bu5OzYdWcecjAY3DdV\n83qVMVfpEaYRhovnDTWungSUbqSyLDq+W/iCnZakGPcG8dm4hgjLC2NRyW/uGmCi\nKv1a8nJ9vQLKPe1OvtYyj8xKUqJyPRiZfAZs3PfLDjQxd/9XnFBVblCKmWiBGeA=\n=Mhs7\n-----END PGP SIGNATURE-----",
        "payload": "tree 7c93bffbb4ce457da7b6b957f4fbd935613f4462\nparent 02464da5e4aa8c19d4fff3859dcdee822e2af78c\nparent dd5b0114cf9021e8639e48c2a33f0aaf82aeb14e\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1486469001 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1486469037 +0100\n\nMerge #9604: [Trivial] add comment about setting peer as HB peer.\n\ndd5b011 [Trivial] add comment about setting peer as HB peer. (John Newbery)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/729de15b6365face6ae9e12a03624da33a6302f0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/729de15b6365face6ae9e12a03624da33a6302f0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/729de15b6365face6ae9e12a03624da33a6302f0/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02464da5e4aa8c19d4fff3859dcdee822e2af78c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02464da5e4aa8c19d4fff3859dcdee822e2af78c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02464da5e4aa8c19d4fff3859dcdee822e2af78c"
      },
      {
        "sha": "dd5b0114cf9021e8639e48c2a33f0aaf82aeb14e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd5b0114cf9021e8639e48c2a33f0aaf82aeb14e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dd5b0114cf9021e8639e48c2a33f0aaf82aeb14e"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 9,
      "deletions": 1
    },
    "files": [
      {
        "sha": "bb14e69d83c236601661be0003f2ccea33e0a14f",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/729de15b6365face6ae9e12a03624da33a6302f0/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/729de15b6365face6ae9e12a03624da33a6302f0/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=729de15b6365face6ae9e12a03624da33a6302f0",
        "patch": "@@ -863,7 +863,15 @@ void PeerLogicValidation::BlockChecked(const CBlock& block, const CValidationSta\n                 Misbehaving(it->second.first, nDoS);\n         }\n     }\n-    else if (state.IsValid() && !IsInitialBlockDownload() && mapBlocksInFlight.count(hash) == mapBlocksInFlight.size()) {\n+    // Check that:\n+    // 1. The block is valid\n+    // 2. We're not in initial block download\n+    // 3. This is currently the best block we're aware of. We haven't updated\n+    //    the tip yet so we have no way to check this directly here. Instead we\n+    //    just check that there are currently no other blocks in flight.\n+    else if (state.IsValid() &&\n+             !IsInitialBlockDownload() &&\n+             mapBlocksInFlight.count(hash) == mapBlocksInFlight.size()) {\n         if (it != mapBlockSource.end()) {\n             MaybeSetPeerAsAnnouncingHeaderAndIDs(it->second.first, *connman);\n         }"
      }
    ]
  },
  {
    "sha": "b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNzA5ZmU3ZmZjNDRhZTE0YmJkMjQwM2NkZmJmYTRmY2Y5NGNlZjZi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-07T14:25:26Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-07T14:28:50Z"
      },
      "message": "Merge #9532: Remove unused variables\n\n90fd29b Remove unused int64_t nSinceLastSeen (practicalswift)\nac4a095 Remove unused Python variables (practicalswift)",
      "tree": {
        "sha": "9f6005c08a05024d07bcbf358f9b170d3c77f857",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9f6005c08a05024d07bcbf358f9b170d3c77f857"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYmdmiAAoJEHSBCwEjRsmmMwMIAMa1ffF08b4/Q0/BCnRChV51\ngiiA4DQhTR2Atbfcjt8xYudpyExTa1HvobgZ+eUdGp0hpuia1HHB5xwy6Vw7G1H4\numtWiggcwEyI2TSJOpW5L1VWD5rwh4vK3JGp/Z9hmERXuradyWX1kUTTPWtRubFk\nUqnxaccWcCWuXxnMUanMB/ZfIKu2HymVzPdqjTjWGENtWNFGvkPeG3SPb+Z6etVf\nAf3gbq4ejL2YlQMKIoAA1n6C8Uz9HmlBDLy7PYyEMCWhoOvbUobGemTUwlc4guNc\nGTQnuLhgDODfnAnyZIc78CvXQRs7MT2a7Vo8P1y8YqQ+OnXSwkW1dl0szTbAH+s=\n=c/FM\n-----END PGP SIGNATURE-----",
        "payload": "tree 9f6005c08a05024d07bcbf358f9b170d3c77f857\nparent 729de15b6365face6ae9e12a03624da33a6302f0\nparent 90fd29bd0dcbaf5d5c4ef9e69824297c35f0b88e\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1486477526 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1486477730 +0100\n\nMerge #9532: Remove unused variables\n\n90fd29b Remove unused int64_t nSinceLastSeen (practicalswift)\nac4a095 Remove unused Python variables (practicalswift)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "729de15b6365face6ae9e12a03624da33a6302f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/729de15b6365face6ae9e12a03624da33a6302f0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/729de15b6365face6ae9e12a03624da33a6302f0"
      },
      {
        "sha": "90fd29bd0dcbaf5d5c4ef9e69824297c35f0b88e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90fd29bd0dcbaf5d5c4ef9e69824297c35f0b88e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/90fd29bd0dcbaf5d5c4ef9e69824297c35f0b88e"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 2,
      "deletions": 11
    },
    "files": [
      {
        "sha": "0d09692b36f03bcd73c2f1db4788551512c7282b",
        "filename": "contrib/testgen/base58.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b/contrib/testgen/base58.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b/contrib/testgen/base58.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/testgen/base58.py?ref=b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b",
        "patch": "@@ -84,7 +84,6 @@ def b58decode_chk(v):\n     result = b58decode(v)\n     if result is None:\n         return None\n-    h3 = checksum(result[:-4])\n     if result[-4:] == checksum(result[:-4]):\n         return result[:-4]\n     else:"
      },
      {
        "sha": "ac0701e6be6070addb4a66441b675f5b84fc554b",
        "filename": "contrib/testgen/gen_base58_test_vectors.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b/contrib/testgen/gen_base58_test_vectors.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b/contrib/testgen/gen_base58_test_vectors.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/testgen/gen_base58_test_vectors.py?ref=b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b",
        "patch": "@@ -45,7 +45,6 @@ def is_valid(v):\n     result = b58decode_chk(v)\n     if result is None:\n         return False\n-    valid = False\n     for template in templates:\n         prefix = str(bytearray(template[0]))\n         suffix = str(bytearray(template[2]))"
      },
      {
        "sha": "8b1403083f29832edf8c621173ff5b7c1b5db7d8",
        "filename": "qa/rpc-tests/forknotify.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b/qa/rpc-tests/forknotify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b/qa/rpc-tests/forknotify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/forknotify.py?ref=b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b",
        "patch": "@@ -22,7 +22,7 @@ def __init__(self):\n     def setup_network(self):\n         self.nodes = []\n         self.alert_filename = os.path.join(self.options.tmpdir, \"alert.txt\")\n-        with open(self.alert_filename, 'w', encoding='utf8') as f:\n+        with open(self.alert_filename, 'w', encoding='utf8'):\n             pass  # Just open then close to create zero-length file\n         self.nodes.append(start_node(0, self.options.tmpdir,\n                             [\"-blockversion=2\", \"-alertnotify=echo %s >> \\\"\" + self.alert_filename + \"\\\"\"]))"
      },
      {
        "sha": "2f339bb54f6a1ec430e97581fdde649e7d300a16",
        "filename": "qa/rpc-tests/p2p-segwit.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b/qa/rpc-tests/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b/qa/rpc-tests/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-segwit.py?ref=b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b",
        "patch": "@@ -951,7 +951,6 @@ def test_tx_relay_after_segwit_activation(self):\n         tx.rehash()\n \n         tx_hash = tx.sha256\n-        tx_value = tx.vout[0].nValue\n \n         # Verify that unnecessary witnesses are rejected.\n         self.test_node.announce_tx_and_wait_for_getdata(tx)"
      },
      {
        "sha": "1b90b23330f046400fb79b21dbb39ace6fbfa96e",
        "filename": "qa/rpc-tests/receivedby.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b/qa/rpc-tests/receivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b/qa/rpc-tests/receivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/receivedby.py?ref=b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b",
        "patch": "@@ -14,7 +14,6 @@ def get_sub_array_from_array(object_array, to_match):\n         Finds and returns a sub array from an array of arrays.\n         to_match should be a unique idetifier of a sub array\n     '''\n-    num_matched = 0\n     for item in object_array:\n         all_match = True\n         for key,value in to_match.items():\n@@ -104,7 +103,7 @@ def run_test(self):\n         received_by_account_json = get_sub_array_from_array(self.nodes[1].listreceivedbyaccount(),{\"account\":account})\n         if len(received_by_account_json) == 0:\n             raise AssertionError(\"No accounts found in node\")\n-        balance_by_account = rec_by_accountArr = self.nodes[1].getreceivedbyaccount(account)\n+        balance_by_account = self.nodes[1].getreceivedbyaccount(account)\n \n         txid = self.nodes[0].sendtoaddress(addr, 0.1)\n         self.sync_all()"
      },
      {
        "sha": "2b29dfdd2bd923ce65536757e3e0d5b0ce9db87e",
        "filename": "qa/rpc-tests/replace-by-fee.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b/qa/rpc-tests/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b/qa/rpc-tests/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/replace-by-fee.py?ref=b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b",
        "patch": "@@ -393,7 +393,6 @@ def test_too_many_replacements(self):\n         utxo = make_utxo(self.nodes[0], initial_nValue)\n         fee = int(0.0001*COIN)\n         split_value = int((initial_nValue-fee)/(MAX_REPLACEMENT_LIMIT+1))\n-        actual_fee = initial_nValue - split_value*(MAX_REPLACEMENT_LIMIT+1)\n \n         outputs = []\n         for i in range(MAX_REPLACEMENT_LIMIT+1):"
      },
      {
        "sha": "c82e0adffa52335a0527fc961801ffc3b9bc8864",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b",
        "patch": "@@ -359,7 +359,6 @@ def run_test (self):\n         rawtx = self.nodes[0].createrawtransaction([{\"txid\":singletxid, \"vout\":0}], {chain_addrs[0]:node0_balance/2-Decimal('0.01'), chain_addrs[1]:node0_balance/2-Decimal('0.01')})\n         signedtx = self.nodes[0].signrawtransaction(rawtx)\n         singletxid = self.nodes[0].sendrawtransaction(signedtx[\"hex\"])\n-        txids = [singletxid, singletxid]\n         self.nodes[0].generate(1)\n \n         # Make a long chain of unconfirmed payments without hitting mempool limit"
      },
      {
        "sha": "f3c238fbb2cb054e123b25d411b48a0666709bac",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b",
        "patch": "@@ -54,11 +54,8 @@ double CAddrInfo::GetChance(int64_t nNow) const\n {\n     double fChance = 1.0;\n \n-    int64_t nSinceLastSeen = nNow - nTime;\n     int64_t nSinceLastTry = nNow - nLastTry;\n \n-    if (nSinceLastSeen < 0)\n-        nSinceLastSeen = 0;\n     if (nSinceLastTry < 0)\n         nSinceLastTry = 0;\n "
      }
    ]
  },
  {
    "sha": "a47da4b6fecaba81dafe777b25be24e04a428e37",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNDdkYTRiNmZlY2FiYTgxZGFmZTc3N2IyNWJlMjRlMDRhNDI4ZTM3",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-02-03T08:20:54Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-02-07T14:46:38Z"
      },
      "message": "Use z = std::max(x - y, 0); instead of z = x - y; if (z < 0) z = 0;",
      "tree": {
        "sha": "2ef78a9d89b312b71aa06316443ce2de96d58c8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2ef78a9d89b312b71aa06316443ce2de96d58c8e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a47da4b6fecaba81dafe777b25be24e04a428e37",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a47da4b6fecaba81dafe777b25be24e04a428e37",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a47da4b6fecaba81dafe777b25be24e04a428e37",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a47da4b6fecaba81dafe777b25be24e04a428e37/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 2,
      "deletions": 8
    },
    "files": [
      {
        "sha": "b6ab4c6305184ca31ebe27282bb58a38a3ec7f3a",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a47da4b6fecaba81dafe777b25be24e04a428e37/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a47da4b6fecaba81dafe777b25be24e04a428e37/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=a47da4b6fecaba81dafe777b25be24e04a428e37",
        "patch": "@@ -53,11 +53,7 @@ bool CAddrInfo::IsTerrible(int64_t nNow) const\n double CAddrInfo::GetChance(int64_t nNow) const\n {\n     double fChance = 1.0;\n-\n-    int64_t nSinceLastTry = nNow - nLastTry;\n-\n-    if (nSinceLastTry < 0)\n-        nSinceLastTry = 0;\n+    int64_t nSinceLastTry = std::max<int64_t>(nNow - nLastTry, 0);\n \n     // deprioritize very recent attempts away\n     if (nSinceLastTry < 60 * 10)"
      },
      {
        "sha": "d4fd8bd37262cf9025737de0e27b5c29a7c42fb4",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a47da4b6fecaba81dafe777b25be24e04a428e37/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a47da4b6fecaba81dafe777b25be24e04a428e37/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=a47da4b6fecaba81dafe777b25be24e04a428e37",
        "patch": "@@ -563,9 +563,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         }\n \n         // after fee\n-        nAfterFee = nAmount - nPayFee;\n-        if (nAfterFee < 0)\n-            nAfterFee = 0;\n+        nAfterFee = std::max<CAmount>(nAmount - nPayFee, 0);\n     }\n \n     // actually update labels"
      }
    ]
  },
  {
    "sha": "29c53289a9e6bb34a098ea87d923968e3ac6d75d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOWM1MzI4OWE5ZTZiYjM0YTA5OGVhODdkOTIzOTY4ZTNhYzZkNzVk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-07T18:07:29Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-07T18:07:29Z"
      },
      "message": "bench: Fix initialization order in registration\n\nThe initialization order of global data structures in different\nimplementation units is undefined. Making use of this is essentially\ngambling on what the linker does, the so-called [Static initialization\norder fiasco](https://isocpp.org/wiki/faq/ctors#static-init-order).\n\nIn this case it apparently worked on Linux but failed on OpenBSD and\nFreeBSD.\n\nTo create it on first use, make the registration structure local to\na function.\n\nFixes #8910.",
      "tree": {
        "sha": "5f9a42f47526e1daa742ac1adeb6617eef37740f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5f9a42f47526e1daa742ac1adeb6617eef37740f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/29c53289a9e6bb34a098ea87d923968e3ac6d75d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29c53289a9e6bb34a098ea87d923968e3ac6d75d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/29c53289a9e6bb34a098ea87d923968e3ac6d75d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29c53289a9e6bb34a098ea87d923968e3ac6d75d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 10,
      "deletions": 9
    },
    "files": [
      {
        "sha": "3c9df4f713c1408ebf8ffe4bc0fc1fe8d0217902",
        "filename": "src/bench/bench.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29c53289a9e6bb34a098ea87d923968e3ac6d75d/src/bench/bench.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29c53289a9e6bb34a098ea87d923968e3ac6d75d/src/bench/bench.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.cpp?ref=29c53289a9e6bb34a098ea87d923968e3ac6d75d",
        "patch": "@@ -9,7 +9,10 @@\n #include <iomanip>\n #include <sys/time.h>\n \n-std::map<std::string, benchmark::BenchFunction> benchmark::BenchRunner::benchmarks;\n+benchmark::BenchRunner::BenchmarkMap &benchmark::BenchRunner::benchmarks() {\n+    static std::map<std::string, benchmark::BenchFunction> benchmarks_map;\n+    return benchmarks_map;\n+}\n \n static double gettimedouble(void) {\n     struct timeval tv;\n@@ -19,7 +22,7 @@ static double gettimedouble(void) {\n \n benchmark::BenchRunner::BenchRunner(std::string name, benchmark::BenchFunction func)\n {\n-    benchmarks.insert(std::make_pair(name, func));\n+    benchmarks().insert(std::make_pair(name, func));\n }\n \n void\n@@ -29,12 +32,9 @@ benchmark::BenchRunner::RunAll(double elapsedTimeForOne)\n     std::cout << \"#Benchmark\" << \",\" << \"count\" << \",\" << \"min\" << \",\" << \"max\" << \",\" << \"average\" << \",\"\n               << \"min_cycles\" << \",\" << \"max_cycles\" << \",\" << \"average_cycles\" << \"\\n\";\n \n-    for (std::map<std::string,benchmark::BenchFunction>::iterator it = benchmarks.begin();\n-         it != benchmarks.end(); ++it) {\n-\n-        State state(it->first, elapsedTimeForOne);\n-        benchmark::BenchFunction& func = it->second;\n-        func(state);\n+    for (const auto &p: benchmarks()) {\n+        State state(p.first, elapsedTimeForOne);\n+        p.second(state);\n     }\n     perf_fini();\n }"
      },
      {
        "sha": "0e7605c726779776554ff7af6a95778eae5d05e0",
        "filename": "src/bench/bench.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29c53289a9e6bb34a098ea87d923968e3ac6d75d/src/bench/bench.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29c53289a9e6bb34a098ea87d923968e3ac6d75d/src/bench/bench.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.h?ref=29c53289a9e6bb34a098ea87d923968e3ac6d75d",
        "patch": "@@ -63,7 +63,8 @@ namespace benchmark {\n \n     class BenchRunner\n     {\n-        static std::map<std::string, BenchFunction> benchmarks;\n+        typedef std::map<std::string, BenchFunction> BenchmarkMap;\n+        static BenchmarkMap &benchmarks();\n \n     public:\n         BenchRunner(std::string name, BenchFunction func);"
      }
    ]
  },
  {
    "sha": "618ee9249b178d94911ea66cb4b5291f000ef1fb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MThlZTkyNDliMTc4ZDk0OTExZWE2NmNiNGI1MjkxZjAwMGVmMWZi",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-07T19:15:28Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-07T19:15:28Z"
      },
      "message": "Further-enforce lockordering by enforcing directly after TRY_LOCKs",
      "tree": {
        "sha": "dde47fee6a3afbdd91f54b35173e25812509de87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dde47fee6a3afbdd91f54b35173e25812509de87"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/618ee9249b178d94911ea66cb4b5291f000ef1fb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/618ee9249b178d94911ea66cb4b5291f000ef1fb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/618ee9249b178d94911ea66cb4b5291f000ef1fb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/618ee9249b178d94911ea66cb4b5291f000ef1fb/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2a962d4540a253f63803d1f145fa26b938e69633",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a962d4540a253f63803d1f145fa26b938e69633",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2a962d4540a253f63803d1f145fa26b938e69633"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 13,
      "deletions": 15
    },
    "files": [
      {
        "sha": "fce57f1df9f72ed068afae3a505a69dd67f6a1ac",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 15,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/618ee9249b178d94911ea66cb4b5291f000ef1fb/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/618ee9249b178d94911ea66cb4b5291f000ef1fb/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=618ee9249b178d94911ea66cb4b5291f000ef1fb",
        "patch": "@@ -110,21 +110,19 @@ static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)\n \n     (*lockstack).push_back(std::make_pair(c, locklocation));\n \n-    if (!fTry) {\n-        BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, (*lockstack)) {\n-            if (i.first == c)\n-                break;\n-\n-            std::pair<void*, void*> p1 = std::make_pair(i.first, c);\n-            if (lockdata.lockorders.count(p1))\n-                continue;\n-            lockdata.lockorders[p1] = (*lockstack);\n-\n-            std::pair<void*, void*> p2 = std::make_pair(c, i.first);\n-            lockdata.invlockorders.insert(p2);\n-            if (lockdata.lockorders.count(p2))\n-                potential_deadlock_detected(p1, lockdata.lockorders[p2], lockdata.lockorders[p1]);\n-        }\n+    BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, (*lockstack)) {\n+        if (i.first == c)\n+            break;\n+\n+        std::pair<void*, void*> p1 = std::make_pair(i.first, c);\n+        if (lockdata.lockorders.count(p1))\n+            continue;\n+        lockdata.lockorders[p1] = (*lockstack);\n+\n+        std::pair<void*, void*> p2 = std::make_pair(c, i.first);\n+        lockdata.invlockorders.insert(p2);\n+        if (lockdata.lockorders.count(p2))\n+            potential_deadlock_detected(p1, lockdata.lockorders[p2], lockdata.lockorders[p1]);\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "2cbd1196b7a07b08cfd91417f2e8ddd09d9f2082",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyY2JkMTE5NmI3YTA3YjA4Y2ZkOTE0MTdmMmU4ZGRkMDlkOWYyMDgy",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-07T20:23:17Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-07T22:44:46Z"
      },
      "message": "Disconnect peers which we do not receive VERACKs from within 60 sec",
      "tree": {
        "sha": "9498b7cb6c5713d3cbe88a94a7c131af0072dab8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9498b7cb6c5713d3cbe88a94a7c131af0072dab8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2cbd1196b7a07b08cfd91417f2e8ddd09d9f2082",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2cbd1196b7a07b08cfd91417f2e8ddd09d9f2082",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2cbd1196b7a07b08cfd91417f2e8ddd09d9f2082",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2cbd1196b7a07b08cfd91417f2e8ddd09d9f2082/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3394f8a08ea43a72fa4d19c58fa3df51f31c0d78",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2cbd1196b7a07b08cfd91417f2e8ddd09d9f2082/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2cbd1196b7a07b08cfd91417f2e8ddd09d9f2082/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=2cbd1196b7a07b08cfd91417f2e8ddd09d9f2082",
        "patch": "@@ -1323,6 +1323,11 @@ void CConnman::ThreadSocketHandler()\n                     LogPrintf(\"ping timeout: %fs\\n\", 0.000001 * (GetTimeMicros() - pnode->nPingUsecStart));\n                     pnode->fDisconnect = true;\n                 }\n+                else if (!pnode->fSuccessfullyConnected)\n+                {\n+                    LogPrintf(\"version handshake timeout from %d\\n\", pnode->id);\n+                    pnode->fDisconnect = true;\n+                }\n             }\n         }\n         {"
      }
    ]
  },
  {
    "sha": "d304fef3746039183f51b3ac8f4774dcf3a64f59",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMzA0ZmVmMzc0NjAzOTE4M2Y1MWIzYWM4ZjQ3NzRkY2YzYTY0ZjU5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-02-08T03:40:19Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-02-08T03:43:13Z"
      },
      "message": "Merge #9712: bench: Fix initialization order in registration\n\n29c5328 bench: Fix initialization order in registration (Wladimir J. van der Laan)",
      "tree": {
        "sha": "5f9a42f47526e1daa742ac1adeb6617eef37740f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5f9a42f47526e1daa742ac1adeb6617eef37740f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d304fef3746039183f51b3ac8f4774dcf3a64f59",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCgAGBQJYmpPRAAoJEC1/I3LlD+E3SxQH/2Sl1tFCn+tpnhnFAXtpbK2x\nDRCmvsMhxm+dknetT3aeXNtRW6XGfv0OKXT9/YSGnWTcEOkhwqOE33ulkzflexJo\n72pzBwQ5/a6HKxYshu+LUInGeqPJDSCA3oYX4pM4x2mvudiX8nLcfuwujSfbh71f\nsB7ConLmOD7g1r7kMdl5/4vSUMszIMZ4V/QPh+5Mqitk3f6F+ccLtgrnkO8Ncjk8\nzAkiiiLZSu9ZVkxLhuuTrZm/WJVAOpox660Jk7trCHw7ifSSLIH+vl48uljGm8Gz\njjpRY4uTAM2DwCNKKTuMuRcwsk/hUaVZ80isIw3y9ZMMoBkFwJZB+sGQrXVWN5Q=\n=3/Fu\n-----END PGP SIGNATURE-----",
        "payload": "tree 5f9a42f47526e1daa742ac1adeb6617eef37740f\nparent b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b\nparent 29c53289a9e6bb34a098ea87d923968e3ac6d75d\nauthor MarcoFalke <falke.marco@gmail.com> 1486525219 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1486525393 +0100\n\nMerge #9712: bench: Fix initialization order in registration\n\n29c5328 bench: Fix initialization order in registration (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d304fef3746039183f51b3ac8f4774dcf3a64f59",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d304fef3746039183f51b3ac8f4774dcf3a64f59",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d304fef3746039183f51b3ac8f4774dcf3a64f59/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b"
      },
      {
        "sha": "29c53289a9e6bb34a098ea87d923968e3ac6d75d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29c53289a9e6bb34a098ea87d923968e3ac6d75d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29c53289a9e6bb34a098ea87d923968e3ac6d75d"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 10,
      "deletions": 9
    },
    "files": [
      {
        "sha": "3c9df4f713c1408ebf8ffe4bc0fc1fe8d0217902",
        "filename": "src/bench/bench.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d304fef3746039183f51b3ac8f4774dcf3a64f59/src/bench/bench.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d304fef3746039183f51b3ac8f4774dcf3a64f59/src/bench/bench.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.cpp?ref=d304fef3746039183f51b3ac8f4774dcf3a64f59",
        "patch": "@@ -9,7 +9,10 @@\n #include <iomanip>\n #include <sys/time.h>\n \n-std::map<std::string, benchmark::BenchFunction> benchmark::BenchRunner::benchmarks;\n+benchmark::BenchRunner::BenchmarkMap &benchmark::BenchRunner::benchmarks() {\n+    static std::map<std::string, benchmark::BenchFunction> benchmarks_map;\n+    return benchmarks_map;\n+}\n \n static double gettimedouble(void) {\n     struct timeval tv;\n@@ -19,7 +22,7 @@ static double gettimedouble(void) {\n \n benchmark::BenchRunner::BenchRunner(std::string name, benchmark::BenchFunction func)\n {\n-    benchmarks.insert(std::make_pair(name, func));\n+    benchmarks().insert(std::make_pair(name, func));\n }\n \n void\n@@ -29,12 +32,9 @@ benchmark::BenchRunner::RunAll(double elapsedTimeForOne)\n     std::cout << \"#Benchmark\" << \",\" << \"count\" << \",\" << \"min\" << \",\" << \"max\" << \",\" << \"average\" << \",\"\n               << \"min_cycles\" << \",\" << \"max_cycles\" << \",\" << \"average_cycles\" << \"\\n\";\n \n-    for (std::map<std::string,benchmark::BenchFunction>::iterator it = benchmarks.begin();\n-         it != benchmarks.end(); ++it) {\n-\n-        State state(it->first, elapsedTimeForOne);\n-        benchmark::BenchFunction& func = it->second;\n-        func(state);\n+    for (const auto &p: benchmarks()) {\n+        State state(p.first, elapsedTimeForOne);\n+        p.second(state);\n     }\n     perf_fini();\n }"
      },
      {
        "sha": "0e7605c726779776554ff7af6a95778eae5d05e0",
        "filename": "src/bench/bench.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d304fef3746039183f51b3ac8f4774dcf3a64f59/src/bench/bench.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d304fef3746039183f51b3ac8f4774dcf3a64f59/src/bench/bench.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.h?ref=d304fef3746039183f51b3ac8f4774dcf3a64f59",
        "patch": "@@ -63,7 +63,8 @@ namespace benchmark {\n \n     class BenchRunner\n     {\n-        static std::map<std::string, BenchFunction> benchmarks;\n+        typedef std::map<std::string, BenchFunction> BenchmarkMap;\n+        static BenchmarkMap &benchmarks();\n \n     public:\n         BenchRunner(std::string name, BenchFunction func);"
      }
    ]
  },
  {
    "sha": "6a55515a9b8f3cd438c9b851131d18ebb13f1a58",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YTU1NTE1YTliOGYzY2Q0MzhjOWI4NTExMzFkMThlYmIxM2YxYTU4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-08T13:18:18Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-08T13:38:28Z"
      },
      "message": "Merge #9705: build: Add options to override BDB cflags/libs\n\n5cc2ebb Update OpenBSD and FreeBSD build steps (Wladimir J. van der Laan)\n8713de8 build: Add options to override BDB cflags/libs (Wladimir J. van der Laan)",
      "tree": {
        "sha": "e84862e39c325cf6823b2fde2984213a5f026572",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e84862e39c325cf6823b2fde2984213a5f026572"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6a55515a9b8f3cd438c9b851131d18ebb13f1a58",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYmx9UAAoJEHSBCwEjRsmmA2UH/iqj+CfEdZmNxscqUXCrNPi8\nXJitYn4Lnin3gLASBvPDLRpeMF+0Tg7HqXIXdsuBASKPw+ZYNLKSZ/HDADf6Uqxb\n4/vva6aIQRHGvVdKkYYFnZWnjZm10yMT8gvoHZDwrdEK8Vrd1aRQoJQ545oSXlOB\nmD7UJzuJbgpv230NImF+KHh5dLcqgFl4rYjAGhtjN4yEo8qhcHaam4n2yN6AebYy\nnO5vcpH78ZrMV72smkuUu39OJVJSaiQfitvZPrmv0h0rQe1O8RtPXQHPpQiXUBXi\nlrlDqpDGcI5rEQvtpcMA/sRHRqymFCRmNLnbWitG7u3xcgzWYspRR3RqTzbJ3mY=\n=2e8W\n-----END PGP SIGNATURE-----",
        "payload": "tree e84862e39c325cf6823b2fde2984213a5f026572\nparent d304fef3746039183f51b3ac8f4774dcf3a64f59\nparent 5cc2ebb619b6bc7125e6a5f83f860dfcaa759d93\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1486559898 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1486561108 +0100\n\nMerge #9705: build: Add options to override BDB cflags/libs\n\n5cc2ebb Update OpenBSD and FreeBSD build steps (Wladimir J. van der Laan)\n8713de8 build: Add options to override BDB cflags/libs (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a55515a9b8f3cd438c9b851131d18ebb13f1a58",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6a55515a9b8f3cd438c9b851131d18ebb13f1a58",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a55515a9b8f3cd438c9b851131d18ebb13f1a58/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d304fef3746039183f51b3ac8f4774dcf3a64f59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d304fef3746039183f51b3ac8f4774dcf3a64f59",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d304fef3746039183f51b3ac8f4774dcf3a64f59"
      },
      {
        "sha": "5cc2ebb619b6bc7125e6a5f83f860dfcaa759d93",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cc2ebb619b6bc7125e6a5f83f860dfcaa759d93",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5cc2ebb619b6bc7125e6a5f83f860dfcaa759d93"
      }
    ],
    "stats": {
      "total": 130,
      "additions": 70,
      "deletions": 60
    },
    "files": [
      {
        "sha": "980f1e8f19cd2f1351be332d4908f7ba75ce4cfb",
        "filename": "build-aux/m4/bitcoin_find_bdb48.m4",
        "status": "modified",
        "additions": 64,
        "deletions": 56,
        "changes": 120,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a55515a9b8f3cd438c9b851131d18ebb13f1a58/build-aux/m4/bitcoin_find_bdb48.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a55515a9b8f3cd438c9b851131d18ebb13f1a58/build-aux/m4/bitcoin_find_bdb48.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_find_bdb48.m4?ref=6a55515a9b8f3cd438c9b851131d18ebb13f1a58",
        "patch": "@@ -3,68 +3,76 @@ dnl Distributed under the MIT software license, see the accompanying\n dnl file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n AC_DEFUN([BITCOIN_FIND_BDB48],[\n-  AC_MSG_CHECKING([for Berkeley DB C++ headers])\n-  BDB_CPPFLAGS=\n-  BDB_LIBS=\n-  bdbpath=X\n-  bdb48path=X\n-  bdbdirlist=\n-  for _vn in 4.8 48 4 5 ''; do\n-    for _pfx in b lib ''; do\n-      bdbdirlist=\"$bdbdirlist ${_pfx}db${_vn}\"\n+  AC_ARG_VAR(BDB_CFLAGS, [C compiler flags for BerkeleyDB, bypasses autodetection])\n+  AC_ARG_VAR(BDB_LIBS, [Linker flags for BerkeleyDB, bypasses autodetection])\n+\n+  if test \"x$BDB_CFLAGS\" = \"x\"; then\n+    AC_MSG_CHECKING([for Berkeley DB C++ headers])\n+    BDB_CPPFLAGS=\n+    bdbpath=X\n+    bdb48path=X\n+    bdbdirlist=\n+    for _vn in 4.8 48 4 5 ''; do\n+      for _pfx in b lib ''; do\n+        bdbdirlist=\"$bdbdirlist ${_pfx}db${_vn}\"\n+      done\n+    done\n+    for searchpath in $bdbdirlist ''; do\n+      test -n \"${searchpath}\" && searchpath=\"${searchpath}/\"\n+      AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+        #include <${searchpath}db_cxx.h>\n+      ]],[[\n+        #if !((DB_VERSION_MAJOR == 4 && DB_VERSION_MINOR >= 8) || DB_VERSION_MAJOR > 4)\n+          #error \"failed to find bdb 4.8+\"\n+        #endif\n+      ]])],[\n+        if test \"x$bdbpath\" = \"xX\"; then\n+          bdbpath=\"${searchpath}\"\n+        fi\n+      ],[\n+        continue\n+      ])\n+      AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+        #include <${searchpath}db_cxx.h>\n+      ]],[[\n+        #if !(DB_VERSION_MAJOR == 4 && DB_VERSION_MINOR == 8)\n+          #error \"failed to find bdb 4.8\"\n+        #endif\n+      ]])],[\n+        bdb48path=\"${searchpath}\"\n+        break\n+      ],[])\n     done\n-  done\n-  for searchpath in $bdbdirlist ''; do\n-    test -n \"${searchpath}\" && searchpath=\"${searchpath}/\"\n-    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n-      #include <${searchpath}db_cxx.h>\n-    ]],[[\n-      #if !((DB_VERSION_MAJOR == 4 && DB_VERSION_MINOR >= 8) || DB_VERSION_MAJOR > 4)\n-        #error \"failed to find bdb 4.8+\"\n-      #endif\n-    ]])],[\n-      if test \"x$bdbpath\" = \"xX\"; then\n-        bdbpath=\"${searchpath}\"\n-      fi\n-    ],[\n-      continue\n-    ])\n-    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n-      #include <${searchpath}db_cxx.h>\n-    ]],[[\n-      #if !(DB_VERSION_MAJOR == 4 && DB_VERSION_MINOR == 8)\n-        #error \"failed to find bdb 4.8\"\n-      #endif\n-    ]])],[\n-      bdb48path=\"${searchpath}\"\n-      break\n-    ],[])\n-  done\n-  if test \"x$bdbpath\" = \"xX\"; then\n-    AC_MSG_RESULT([no])\n-    AC_MSG_ERROR([libdb_cxx headers missing, ]AC_PACKAGE_NAME[ requires this library for wallet functionality (--disable-wallet to disable wallet functionality)])\n-  elif test \"x$bdb48path\" = \"xX\"; then\n-    BITCOIN_SUBDIR_TO_INCLUDE(BDB_CPPFLAGS,[${bdbpath}],db_cxx)\n-    AC_ARG_WITH([incompatible-bdb],[AS_HELP_STRING([--with-incompatible-bdb], [allow using a bdb version other than 4.8])],[\n-      AC_MSG_WARN([Found Berkeley DB other than 4.8; wallets opened by this build will not be portable!])\n-    ],[\n-      AC_MSG_ERROR([Found Berkeley DB other than 4.8, required for portable wallets (--with-incompatible-bdb to ignore or --disable-wallet to disable wallet functionality)])\n-    ])\n+    if test \"x$bdbpath\" = \"xX\"; then\n+      AC_MSG_RESULT([no])\n+      AC_MSG_ERROR([libdb_cxx headers missing, ]AC_PACKAGE_NAME[ requires this library for wallet functionality (--disable-wallet to disable wallet functionality)])\n+    elif test \"x$bdb48path\" = \"xX\"; then\n+      BITCOIN_SUBDIR_TO_INCLUDE(BDB_CPPFLAGS,[${bdbpath}],db_cxx)\n+      AC_ARG_WITH([incompatible-bdb],[AS_HELP_STRING([--with-incompatible-bdb], [allow using a bdb version other than 4.8])],[\n+        AC_MSG_WARN([Found Berkeley DB other than 4.8; wallets opened by this build will not be portable!])\n+      ],[\n+        AC_MSG_ERROR([Found Berkeley DB other than 4.8, required for portable wallets (--with-incompatible-bdb to ignore or --disable-wallet to disable wallet functionality)])\n+      ])\n+    else\n+      BITCOIN_SUBDIR_TO_INCLUDE(BDB_CPPFLAGS,[${bdb48path}],db_cxx)\n+      bdbpath=\"${bdb48path}\"\n+    fi\n   else\n-    BITCOIN_SUBDIR_TO_INCLUDE(BDB_CPPFLAGS,[${bdb48path}],db_cxx)\n-    bdbpath=\"${bdb48path}\"\n+    BDB_CPPFLAGS=${BDB_CFLAGS}\n   fi\n   AC_SUBST(BDB_CPPFLAGS)\n   \n-  # TODO: Ideally this could find the library version and make sure it matches the headers being used\n-  for searchlib in db_cxx-4.8 db_cxx; do\n-    AC_CHECK_LIB([$searchlib],[main],[\n-      BDB_LIBS=\"-l${searchlib}\"\n-      break\n-    ])\n-  done\n   if test \"x$BDB_LIBS\" = \"x\"; then\n-      AC_MSG_ERROR([libdb_cxx missing, ]AC_PACKAGE_NAME[ requires this library for wallet functionality (--disable-wallet to disable wallet functionality)])\n+    # TODO: Ideally this could find the library version and make sure it matches the headers being used\n+    for searchlib in db_cxx-4.8 db_cxx; do\n+      AC_CHECK_LIB([$searchlib],[main],[\n+        BDB_LIBS=\"-l${searchlib}\"\n+        break\n+      ])\n+    done\n+    if test \"x$BDB_LIBS\" = \"x\"; then\n+        AC_MSG_ERROR([libdb_cxx missing, ]AC_PACKAGE_NAME[ requires this library for wallet functionality (--disable-wallet to disable wallet functionality)])\n+    fi\n   fi\n   AC_SUBST(BDB_LIBS)\n ])"
      },
      {
        "sha": "f4a9826d8079a57185be0e43a57a87854dc3140c",
        "filename": "doc/build-openbsd.md",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a55515a9b8f3cd438c9b851131d18ebb13f1a58/doc/build-openbsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a55515a9b8f3cd438c9b851131d18ebb13f1a58/doc/build-openbsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-openbsd.md?ref=6a55515a9b8f3cd438c9b851131d18ebb13f1a58",
        "patch": "@@ -1,6 +1,6 @@\n OpenBSD build guide\n ======================\n-(updated for OpenBSD 5.9)\n+(updated for OpenBSD 6.0)\n \n This guide describes how to build bitcoind and command-line utilities on OpenBSD.\n \n@@ -124,7 +124,7 @@ To configure with wallet:\n ```bash\n ./configure --with-gui=no --with-boost=$BOOST_PREFIX \\\n     CC=egcc CXX=eg++ CPP=ecpp \\\n-    LDFLAGS=\"-L${BDB_PREFIX}/lib/\" CPPFLAGS=\"-I${BDB_PREFIX}/include/\"\n+    BDB_LIBS=\"-L${BDB_PREFIX}/lib -ldb_cxx-4.8\" BDB_CFLAGS=\"-I${BDB_PREFIX}/include\"\n ```\n \n To configure without wallet:\n@@ -142,6 +142,8 @@ gmake check\n Clang (not currently working)\n ------------------------------\n \n+WARNING: This is outdated, needs to be updated for OpenBSD 6.0 and re-tried.\n+\n Using a newer g++ results in linking the new code to a new libstdc++.\n Libraries built with the old g++, will still import the old library.\n This gives conflicts, necessitating rebuild of all C++ dependencies of the application."
      },
      {
        "sha": "31a88a1b18c64c214aad5ea5ad75ac79d25aa57a",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a55515a9b8f3cd438c9b851131d18ebb13f1a58/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a55515a9b8f3cd438c9b851131d18ebb13f1a58/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=6a55515a9b8f3cd438c9b851131d18ebb13f1a58",
        "patch": "@@ -315,7 +315,7 @@ For further documentation on the depends system see [README.md](../depends/READM\n Building on FreeBSD\n --------------------\n \n-(Updated as of FreeBSD 10.3)\n+(Updated as of FreeBSD 11.0)\n \n Clang is installed by default as `cc` compiler, this makes it easier to get\n started than on [OpenBSD](build-openbsd.md). Installing dependencies:\n@@ -337,7 +337,7 @@ with 4.8-built Bitcoin Core is needed follow the steps under \"Berkeley DB\" above\n Then build using:\n \n     ./autogen.sh\n-    ./configure --with-incompatible-bdb CPPFLAGS=-I/usr/local/include/db5 LDFLAGS=-L/usr/local/lib/db5\n+    ./configure --with-incompatible-bdb BDB_CFLAGS=\"-I/usr/local/include/db5\" BDB_LIBS=\"-L/usr/local/lib -ldb_cxx-5\"\n     make\n \n *Note on debugging*: The version of `gdb` installed by default is [ancient and considered harmful](https://wiki.freebsd.org/GdbRetirement)."
      }
    ]
  },
  {
    "sha": "dd163f57886991f3d564c9b0b1bf2ccc8f4ba784",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZDE2M2Y1Nzg4Njk5MWYzZDU2NGM5YjBiMWJmMmNjYzhmNGJhNzg0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-08T13:46:35Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-08T13:46:43Z"
      },
      "message": "Merge #9674: Always enforce strict lock ordering (try or not)\n\n618ee92 Further-enforce lockordering by enforcing directly after TRY_LOCKs (Matt Corallo)\n2a962d4 Fixup style a bit by moving { to the same line as if statements (Matt Corallo)\n8465631 Always enforce lock strict lock ordering (try or not) (Matt Corallo)\nfd13eca Lock cs_vSend and cs_inventory in a consistent order even in TRY (Matt Corallo)",
      "tree": {
        "sha": "38a182fcb34ffc35c3eb59ce96c5e170e0bc3980",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/38a182fcb34ffc35c3eb59ce96c5e170e0bc3980"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd163f57886991f3d564c9b0b1bf2ccc8f4ba784",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYmyFDAAoJEHSBCwEjRsmmdkkH/1Hl13jtx23gEvzpRdaOe+Xs\nmSB1RVUA/stzqL4LrEfMPQzDWDKaud1H9OZGVCosxb/C8DDaQh56LAV9AcoJ/T7w\na438PEeJs48U1LZxKYpVhpX8CUalaR82DlA+5xNtnpeVuBQI7K3MRUs0n48Vrs+g\nuNx3Lqv22/Ls7InBWsriU4Yf+QblB/ISUpAIA2W8e8CVwunabbMZwI7AZ5T4pVwQ\nZHUnd14qgSuuQBU5Ql5k33tQBoHKm5xU97L9TwbGQ29vGHQgI+XFPgDTS7bq25DT\nprK5Eqf1pK1d8+WWZjcE69CRweX837njIgXDto683rLNgVYmLP2VD8NBA2on8Dk=\n=191Y\n-----END PGP SIGNATURE-----",
        "payload": "tree 38a182fcb34ffc35c3eb59ce96c5e170e0bc3980\nparent 6a55515a9b8f3cd438c9b851131d18ebb13f1a58\nparent 618ee9249b178d94911ea66cb4b5291f000ef1fb\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1486561595 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1486561603 +0100\n\nMerge #9674: Always enforce strict lock ordering (try or not)\n\n618ee92 Further-enforce lockordering by enforcing directly after TRY_LOCKs (Matt Corallo)\n2a962d4 Fixup style a bit by moving { to the same line as if statements (Matt Corallo)\n8465631 Always enforce lock strict lock ordering (try or not) (Matt Corallo)\nfd13eca Lock cs_vSend and cs_inventory in a consistent order even in TRY (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd163f57886991f3d564c9b0b1bf2ccc8f4ba784",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dd163f57886991f3d564c9b0b1bf2ccc8f4ba784",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd163f57886991f3d564c9b0b1bf2ccc8f4ba784/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6a55515a9b8f3cd438c9b851131d18ebb13f1a58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a55515a9b8f3cd438c9b851131d18ebb13f1a58",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6a55515a9b8f3cd438c9b851131d18ebb13f1a58"
      },
      {
        "sha": "618ee9249b178d94911ea66cb4b5291f000ef1fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/618ee9249b178d94911ea66cb4b5291f000ef1fb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/618ee9249b178d94911ea66cb4b5291f000ef1fb"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 20,
      "deletions": 48
    },
    "files": [
      {
        "sha": "2242afb8634edf1ed6771db2078227109e00815b",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 10,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd163f57886991f3d564c9b0b1bf2ccc8f4ba784/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd163f57886991f3d564c9b0b1bf2ccc8f4ba784/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=dd163f57886991f3d564c9b0b1bf2ccc8f4ba784",
        "patch": "@@ -1093,20 +1093,18 @@ void CConnman::ThreadSocketHandler()\n             BOOST_FOREACH(CNode* pnode, vNodesDisconnectedCopy)\n             {\n                 // wait until threads are done using it\n-                if (pnode->GetRefCount() <= 0)\n-                {\n+                if (pnode->GetRefCount() <= 0) {\n                     bool fDelete = false;\n                     {\n-                        TRY_LOCK(pnode->cs_vSend, lockSend);\n-                        if (lockSend)\n-                        {\n-                                TRY_LOCK(pnode->cs_inventory, lockInv);\n-                                if (lockInv)\n-                                    fDelete = true;\n+                        TRY_LOCK(pnode->cs_inventory, lockInv);\n+                        if (lockInv) {\n+                            TRY_LOCK(pnode->cs_vSend, lockSend);\n+                            if (lockSend) {\n+                                fDelete = true;\n+                            }\n                         }\n                     }\n-                    if (fDelete)\n-                    {\n+                    if (fDelete) {\n                         vNodesDisconnected.remove(pnode);\n                         DeleteNode(pnode);\n                     }"
      },
      {
        "sha": "fce57f1df9f72ed068afae3a505a69dd67f6a1ac",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 38,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd163f57886991f3d564c9b0b1bf2ccc8f4ba784/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd163f57886991f3d564c9b0b1bf2ccc8f4ba784/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=dd163f57886991f3d564c9b0b1bf2ccc8f4ba784",
        "patch": "@@ -77,52 +77,28 @@ boost::thread_specific_ptr<LockStack> lockstack;\n \n static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch, const LockStack& s1, const LockStack& s2)\n {\n-    // We attempt to not assert on probably-not deadlocks by assuming that\n-    // a try lock will immediately have otherwise bailed if it had\n-    // failed to get the lock\n-    // We do this by, for the locks which triggered the potential deadlock,\n-    // in either lockorder, checking that the second of the two which is locked\n-    // is only a TRY_LOCK, ignoring locks if they are reentrant.\n-    bool firstLocked = false;\n-    bool secondLocked = false;\n-    bool onlyMaybeDeadlock = false;\n-\n     LogPrintf(\"POTENTIAL DEADLOCK DETECTED\\n\");\n     LogPrintf(\"Previous lock order was:\\n\");\n     BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, s2) {\n         if (i.first == mismatch.first) {\n             LogPrintf(\" (1)\");\n-            if (!firstLocked && secondLocked && i.second.fTry)\n-                onlyMaybeDeadlock = true;\n-            firstLocked = true;\n         }\n         if (i.first == mismatch.second) {\n             LogPrintf(\" (2)\");\n-            if (!secondLocked && firstLocked && i.second.fTry)\n-                onlyMaybeDeadlock = true;\n-            secondLocked = true;\n         }\n         LogPrintf(\" %s\\n\", i.second.ToString());\n     }\n-    firstLocked = false;\n-    secondLocked = false;\n     LogPrintf(\"Current lock order is:\\n\");\n     BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, s1) {\n         if (i.first == mismatch.first) {\n             LogPrintf(\" (1)\");\n-            if (!firstLocked && secondLocked && i.second.fTry)\n-                onlyMaybeDeadlock = true;\n-            firstLocked = true;\n         }\n         if (i.first == mismatch.second) {\n             LogPrintf(\" (2)\");\n-            if (!secondLocked && firstLocked && i.second.fTry)\n-                onlyMaybeDeadlock = true;\n-            secondLocked = true;\n         }\n         LogPrintf(\" %s\\n\", i.second.ToString());\n     }\n-    assert(onlyMaybeDeadlock);\n+    assert(false);\n }\n \n static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)\n@@ -134,21 +110,19 @@ static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)\n \n     (*lockstack).push_back(std::make_pair(c, locklocation));\n \n-    if (!fTry) {\n-        BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, (*lockstack)) {\n-            if (i.first == c)\n-                break;\n+    BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, (*lockstack)) {\n+        if (i.first == c)\n+            break;\n \n-            std::pair<void*, void*> p1 = std::make_pair(i.first, c);\n-            if (lockdata.lockorders.count(p1))\n-                continue;\n-            lockdata.lockorders[p1] = (*lockstack);\n+        std::pair<void*, void*> p1 = std::make_pair(i.first, c);\n+        if (lockdata.lockorders.count(p1))\n+            continue;\n+        lockdata.lockorders[p1] = (*lockstack);\n \n-            std::pair<void*, void*> p2 = std::make_pair(c, i.first);\n-            lockdata.invlockorders.insert(p2);\n-            if (lockdata.lockorders.count(p2))\n-                potential_deadlock_detected(p1, lockdata.lockorders[p2], lockdata.lockorders[p1]);\n-        }\n+        std::pair<void*, void*> p2 = std::make_pair(c, i.first);\n+        lockdata.invlockorders.insert(p2);\n+        if (lockdata.lockorders.count(p2))\n+            potential_deadlock_detected(p1, lockdata.lockorders[p2], lockdata.lockorders[p1]);\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "9db8eecac1c713c760c0217b6acb7455c657fa8b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZGI4ZWVjYWMxYzcxM2M3NjBjMDIxN2I2YWNiNzQ1NWM2NTdmYThi",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-07T14:56:53Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-08T15:24:02Z"
      },
      "message": "Fix RPC failure testing\n\nMake sure that RPC tests are actually checking failures correctly by:\n\n- Catching JSON RPC exceptions and verifying the error codes and messages.\n- Failing the test case if the JSON RPC exception isn't raised.",
      "tree": {
        "sha": "02faa45b0da7cd2271cf4a3b089e78dd0e308f4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/02faa45b0da7cd2271cf4a3b089e78dd0e308f4d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9db8eecac1c713c760c0217b6acb7455c657fa8b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9db8eecac1c713c760c0217b6acb7455c657fa8b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9db8eecac1c713c760c0217b6acb7455c657fa8b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9db8eecac1c713c760c0217b6acb7455c657fa8b/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "729de15b6365face6ae9e12a03624da33a6302f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/729de15b6365face6ae9e12a03624da33a6302f0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/729de15b6365face6ae9e12a03624da33a6302f0"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 21,
      "deletions": 4
    },
    "files": [
      {
        "sha": "da2d8f040f0a2c51121ac688b9dbfaf9067dbcef",
        "filename": "qa/rpc-tests/rpcnamedargs.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9db8eecac1c713c760c0217b6acb7455c657fa8b/qa/rpc-tests/rpcnamedargs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9db8eecac1c713c760c0217b6acb7455c657fa8b/qa/rpc-tests/rpcnamedargs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rpcnamedargs.py?ref=9db8eecac1c713c760c0217b6acb7455c657fa8b",
        "patch": "@@ -37,7 +37,7 @@ def run_test(self):\n         h = node.help(command='getinfo')\n         assert(h.startswith('getinfo\\n'))\n \n-        assert_raises_jsonrpc(-8, node.help, random='getinfo')\n+        assert_raises_jsonrpc(-8, 'Unknown named parameter', node.help, random='getinfo')\n \n         h = node.getblockhash(height=0)\n         node.getblock(blockhash=h)"
      },
      {
        "sha": "dc8555c44c08cb0a15fbaa9cdd579c7fa25f1521",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 20,
        "deletions": 3,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9db8eecac1c713c760c0217b6acb7455c657fa8b/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9db8eecac1c713c760c0217b6acb7455c657fa8b/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=9db8eecac1c713c760c0217b6acb7455c657fa8b",
        "patch": "@@ -550,13 +550,30 @@ def assert_raises_message(exc, message, fun, *args, **kwds):\n     else:\n         raise AssertionError(\"No exception raised\")\n \n-def assert_raises_jsonrpc(code, fun, *args, **kwds):\n-    '''Check for specific JSONRPC exception code'''\n+def assert_raises_jsonrpc(code, message, fun, *args, **kwds):\n+    \"\"\"Run an RPC and verify that a specific JSONRPC exception code and message is raised.\n+\n+    Calls function `fun` with arguments `args` and `kwds`. Catches a JSONRPCException\n+    and verifies that the error code and message are as expected. Throws AssertionError if\n+    no JSONRPCException was returned or if the error code/message are not as expected.\n+\n+    Args:\n+        code (int), optional: the error code returned by the RPC call (defined\n+            in src/rpc/protocol.h). Set to None if checking the error code is not required.\n+        message (string), optional: [a substring of] the error string returned by the\n+            RPC call. Set to None if checking the error string is not required\n+        fun (function): the function to call. This should be the name of an RPC.\n+        args*: positional arguments for the function.\n+        kwds**: named arguments for the function.\n+    \"\"\"\n     try:\n         fun(*args, **kwds)\n     except JSONRPCException as e:\n-        if e.error[\"code\"] != code:\n+        # JSONRPCException was thrown as expected. Check the code and message values are correct.\n+        if (code is not None) and (code != e.error[\"code\"]):\n             raise AssertionError(\"Unexpected JSONRPC error code %i\" % e.error[\"code\"])\n+        if (message is not None) and (message not in e.error['message']):\n+            raise AssertionError(\"Expected substring not found:\"+e.error['message'])\n     except Exception as e:\n         raise AssertionError(\"Unexpected exception raised: \"+type(e).__name__)\n     else:"
      }
    ]
  },
  {
    "sha": "8aaba7a6b7327a4c83308c68b50f07ed4c2aa675",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YWFiYTdhNmI3MzI3YTRjODMzMDhjNjhiNTBmMDdlZDRjMmFhNjc1",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-07T22:35:57Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-08T17:05:13Z"
      },
      "message": "qa: mininode learns when a socket connects, not its first action",
      "tree": {
        "sha": "27f1a68f53e54b8817e835888f136d8a38588bca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/27f1a68f53e54b8817e835888f136d8a38588bca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8aaba7a6b7327a4c83308c68b50f07ed4c2aa675",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8aaba7a6b7327a4c83308c68b50f07ed4c2aa675",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8aaba7a6b7327a4c83308c68b50f07ed4c2aa675",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8aaba7a6b7327a4c83308c68b50f07ed4c2aa675/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2cbd1196b7a07b08cfd91417f2e8ddd09d9f2082",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2cbd1196b7a07b08cfd91417f2e8ddd09d9f2082",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2cbd1196b7a07b08cfd91417f2e8ddd09d9f2082"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 24,
      "deletions": 12
    },
    "files": [
      {
        "sha": "696a065282c624125718ba54bb58674723115bdf",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 24,
        "deletions": 12,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8aaba7a6b7327a4c83308c68b50f07ed4c2aa675/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8aaba7a6b7327a4c83308c68b50f07ed4c2aa675/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=8aaba7a6b7327a4c83308c68b50f07ed4c2aa675",
        "patch": "@@ -1614,7 +1614,7 @@ class NodeConn(asyncore.dispatcher):\n         \"regtest\": b\"\\xfa\\xbf\\xb5\\xda\",   # regtest\n     }\n \n-    def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=NODE_NETWORK):\n+    def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=NODE_NETWORK, send_version=True):\n         asyncore.dispatcher.__init__(self, map=mininode_socket_map)\n         self.log = logging.getLogger(\"NodeConn(%s:%d)\" % (dstaddr, dstport))\n         self.dstaddr = dstaddr\n@@ -1631,14 +1631,16 @@ def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=NODE\n         self.disconnect = False\n         self.nServices = 0\n \n-        # stuff version msg into sendbuf\n-        vt = msg_version()\n-        vt.nServices = services\n-        vt.addrTo.ip = self.dstaddr\n-        vt.addrTo.port = self.dstport\n-        vt.addrFrom.ip = \"0.0.0.0\"\n-        vt.addrFrom.port = 0\n-        self.send_message(vt, True)\n+        if send_version:\n+            # stuff version msg into sendbuf\n+            vt = msg_version()\n+            vt.nServices = services\n+            vt.addrTo.ip = self.dstaddr\n+            vt.addrTo.port = self.dstport\n+            vt.addrFrom.ip = \"0.0.0.0\"\n+            vt.addrFrom.port = 0\n+            self.send_message(vt, True)\n+\n         print('MiniNode: Connecting to Bitcoin Node IP # ' + dstaddr + ':' \\\n             + str(dstport))\n \n@@ -1652,8 +1654,9 @@ def show_debug_msg(self, msg):\n         self.log.debug(msg)\n \n     def handle_connect(self):\n-        self.show_debug_msg(\"MiniNode: Connected & Listening: \\n\")\n-        self.state = \"connected\"\n+        if self.state != \"connected\":\n+            self.show_debug_msg(\"MiniNode: Connected & Listening: \\n\")\n+            self.state = \"connected\"\n \n     def handle_close(self):\n         self.show_debug_msg(\"MiniNode: Closing Connection to %s:%d... \"\n@@ -1681,11 +1684,20 @@ def readable(self):\n \n     def writable(self):\n         with mininode_lock:\n+            pre_connection = self.state == \"connecting\"\n             length = len(self.sendbuf)\n-        return (length > 0)\n+        return (length > 0 or pre_connection)\n \n     def handle_write(self):\n         with mininode_lock:\n+            # asyncore does not expose socket connection, only the first read/write\n+            # event, thus we must check connection manually here to know when we\n+            # actually connect\n+            if self.state == \"connecting\":\n+                self.handle_connect()\n+            if not self.writable():\n+                return\n+\n             try:\n                 sent = self.send(self.sendbuf)\n             except:"
      }
    ]
  },
  {
    "sha": "b436f92f727686cd8a10ddff5cd22ee6366fe8c8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNDM2ZjkyZjcyNzY4NmNkOGExMGRkZmY1Y2QyMmVlNjM2NmZlOGM4",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-07T22:40:28Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-08T17:05:13Z"
      },
      "message": "qa: Expose on-connection to mininode listeners",
      "tree": {
        "sha": "d09f40037676273d0567db612897e32d2d62e263",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d09f40037676273d0567db612897e32d2d62e263"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b436f92f727686cd8a10ddff5cd22ee6366fe8c8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b436f92f727686cd8a10ddff5cd22ee6366fe8c8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b436f92f727686cd8a10ddff5cd22ee6366fe8c8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b436f92f727686cd8a10ddff5cd22ee6366fe8c8/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8aaba7a6b7327a4c83308c68b50f07ed4c2aa675",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8aaba7a6b7327a4c83308c68b50f07ed4c2aa675",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8aaba7a6b7327a4c83308c68b50f07ed4c2aa675"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5b563c58ae1e1a17e50caa42f165a28fd3d739d7",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b436f92f727686cd8a10ddff5cd22ee6366fe8c8/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b436f92f727686cd8a10ddff5cd22ee6366fe8c8/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=b436f92f727686cd8a10ddff5cd22ee6366fe8c8",
        "patch": "@@ -1540,6 +1540,7 @@ def on_ping(self, conn, message):\n         if conn.ver_send > BIP0031_VERSION:\n             conn.send_message(msg_pong(message.nonce))\n     def on_reject(self, conn, message): pass\n+    def on_open(self, conn): pass\n     def on_close(self, conn): pass\n     def on_mempool(self, conn): pass\n     def on_pong(self, conn, message): pass\n@@ -1657,6 +1658,7 @@ def handle_connect(self):\n         if self.state != \"connected\":\n             self.show_debug_msg(\"MiniNode: Connected & Listening: \\n\")\n             self.state = \"connected\"\n+            self.cb.on_open(self)\n \n     def handle_close(self):\n         self.show_debug_msg(\"MiniNode: Closing Connection to %s:%d... \""
      }
    ]
  },
  {
    "sha": "c8cee26100c4f5196aff452d75a24ea7f1135595",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOGNlZTI2MTAwYzRmNTE5NmFmZjQ1MmQ3NWEyNGVhN2YxMTM1NTk1",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-02-08T04:07:13Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-02-08T18:51:05Z"
      },
      "message": "Qt/Intro: Update block chain size",
      "tree": {
        "sha": "6890f3df233dc1447c82ea9f2c1622d09700ad26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6890f3df233dc1447c82ea9f2c1622d09700ad26"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c8cee26100c4f5196aff452d75a24ea7f1135595",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8cee26100c4f5196aff452d75a24ea7f1135595",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c8cee26100c4f5196aff452d75a24ea7f1135595",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8cee26100c4f5196aff452d75a24ea7f1135595/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e4382fbef56a0e04b0ed834e8b3a3a16f81db149",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4382fbef56a0e04b0ed834e8b3a3a16f81db149",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e4382fbef56a0e04b0ed834e8b3a3a16f81db149"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "9c2aab602bdb0484935dd3ca67d1c069dd2dd740",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8cee26100c4f5196aff452d75a24ea7f1135595/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8cee26100c4f5196aff452d75a24ea7f1135595/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=c8cee26100c4f5196aff452d75a24ea7f1135595",
        "patch": "@@ -23,7 +23,7 @@\n \n static const uint64_t GB_BYTES = 1000000000LL;\n /* Minimum free space (in GB) needed for data directory */\n-static const uint64_t BLOCK_CHAIN_SIZE = 80;\n+static const uint64_t BLOCK_CHAIN_SIZE = 120;\n /* Minimum free space (in GB) needed for data directory when pruned; Does not include prune target */\n static const uint64_t CHAIN_STATE_SIZE = 2;\n /* Total required space (in GB) depending on user choice (prune, not prune) */"
      }
    ]
  },
  {
    "sha": "93ffba7163b4f3c0262c58c1e76e252350e4260e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5M2ZmYmE3MTYzYjRmM2MwMjYyYzU4YzFlNzZlMjUyMzUwZTQyNjBl",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-02-08T04:00:16Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-02-08T18:51:05Z"
      },
      "message": "Bugfix: Qt/Intro: Chain state needs to be stored even with the full blockchain",
      "tree": {
        "sha": "03d387e395a9ad84798e40cfb895bd20530a1acd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/03d387e395a9ad84798e40cfb895bd20530a1acd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/93ffba7163b4f3c0262c58c1e76e252350e4260e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93ffba7163b4f3c0262c58c1e76e252350e4260e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/93ffba7163b4f3c0262c58c1e76e252350e4260e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93ffba7163b4f3c0262c58c1e76e252350e4260e/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c8cee26100c4f5196aff452d75a24ea7f1135595",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8cee26100c4f5196aff452d75a24ea7f1135595",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c8cee26100c4f5196aff452d75a24ea7f1135595"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "e45ba2d151292a0f995f61551f0bfb0007cae1fd",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93ffba7163b4f3c0262c58c1e76e252350e4260e/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93ffba7163b4f3c0262c58c1e76e252350e4260e/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=93ffba7163b4f3c0262c58c1e76e252350e4260e",
        "patch": "@@ -126,8 +126,10 @@ Intro::Intro(QWidget *parent) :\n     ui->storageLabel->setText(ui->storageLabel->text().arg(tr(PACKAGE_NAME)));\n     uint64_t pruneTarget = std::max<int64_t>(0, GetArg(\"-prune\", 0));\n     requiredSpace = BLOCK_CHAIN_SIZE;\n-    if (pruneTarget)\n-        requiredSpace = CHAIN_STATE_SIZE + std::ceil(pruneTarget * 1024 * 1024.0 / GB_BYTES);\n+    if (pruneTarget) {\n+        requiredSpace = std::ceil(pruneTarget * 1024 * 1024.0 / GB_BYTES);\n+    }\n+    requiredSpace += CHAIN_STATE_SIZE;\n     ui->sizeWarningLabel->setText(ui->sizeWarningLabel->text().arg(tr(PACKAGE_NAME)).arg(requiredSpace));\n     startThread();\n }"
      }
    ]
  },
  {
    "sha": "a9baa6d742c0425af4fb048cbd85707143227e84",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOWJhYTZkNzQyYzA0MjVhZjRmYjA0OGNiZDg1NzA3MTQzMjI3ZTg0",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-02-08T19:16:00Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-02-08T19:16:00Z"
      },
      "message": "Bugfix: Qt/Intro: Pruned nodes never require *more* space",
      "tree": {
        "sha": "0ea8c8162781158a50dedb6f46efd707b0fab03b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0ea8c8162781158a50dedb6f46efd707b0fab03b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a9baa6d742c0425af4fb048cbd85707143227e84",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9baa6d742c0425af4fb048cbd85707143227e84",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a9baa6d742c0425af4fb048cbd85707143227e84",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9baa6d742c0425af4fb048cbd85707143227e84/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "93ffba7163b4f3c0262c58c1e76e252350e4260e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93ffba7163b4f3c0262c58c1e76e252350e4260e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/93ffba7163b4f3c0262c58c1e76e252350e4260e"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "96bddb81edf425f2a365176bbae3b632bf6f3edf",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9baa6d742c0425af4fb048cbd85707143227e84/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9baa6d742c0425af4fb048cbd85707143227e84/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=a9baa6d742c0425af4fb048cbd85707143227e84",
        "patch": "@@ -127,7 +127,10 @@ Intro::Intro(QWidget *parent) :\n     uint64_t pruneTarget = std::max<int64_t>(0, GetArg(\"-prune\", 0));\n     requiredSpace = BLOCK_CHAIN_SIZE;\n     if (pruneTarget) {\n-        requiredSpace = std::ceil(pruneTarget * 1024 * 1024.0 / GB_BYTES);\n+        uint64_t prunedGBs = std::ceil(pruneTarget * 1024 * 1024.0 / GB_BYTES);\n+        if (prunedGBs <= requiredSpace) {\n+            requiredSpace = prunedGBs;\n+        }\n     }\n     requiredSpace += CHAIN_STATE_SIZE;\n     ui->sizeWarningLabel->setText(ui->sizeWarningLabel->text().arg(tr(PACKAGE_NAME)).arg(requiredSpace));"
      }
    ]
  },
  {
    "sha": "36164faa338d387177c6328496f63ac11eda3b78",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNjE2NGZhYTMzOGQzODcxNzdjNjMyODQ5NmY2M2FjMTFlZGEzYjc4",
    "commit": {
      "author": {
        "name": "Koki Takahashi",
        "email": "Koki.Takahashi@jp.sony.com",
        "date": "2017-02-03T08:12:21Z"
      },
      "committer": {
        "name": "Koki Takahashi",
        "email": "k.takahashi@sonyged.com",
        "date": "2017-02-09T02:56:44Z"
      },
      "message": "Fix typo and spelling inconsistency in CONTRIBUTING.md\n\nFix spellings of GitHub\n\nRemove unnecessary changes\n\nFix GitHub spelling on doc/translation_process.md",
      "tree": {
        "sha": "cb2d0a6e0d860c952bf2af0ff2512bd0d397b9c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cb2d0a6e0d860c952bf2af0ff2512bd0d397b9c3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/36164faa338d387177c6328496f63ac11eda3b78",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36164faa338d387177c6328496f63ac11eda3b78",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/36164faa338d387177c6328496f63ac11eda3b78",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36164faa338d387177c6328496f63ac11eda3b78/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "7f97b108b1f5982414f63b5751f3e4d56fd45ff6",
        "filename": "CONTRIBUTING.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36164faa338d387177c6328496f63ac11eda3b78/CONTRIBUTING.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36164faa338d387177c6328496f63ac11eda3b78/CONTRIBUTING.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/CONTRIBUTING.md?ref=36164faa338d387177c6328496f63ac11eda3b78",
        "patch": "@@ -194,7 +194,7 @@ request. Typically reviewers will review the code for obvious errors, as well as\n test out the patch set and opine on the technical merits of the patch. Project\n maintainers take into account the peer review when determining if there is\n consensus to merge a pull request (remember that discussions may have been\n-spread out over github, mailing list and IRC discussions). The following\n+spread out over GitHub, mailing list and IRC discussions). The following\n language is used within pull-request comments:\n \n   - ACK means \"I have tested the code and I agree it should be merged\";"
      },
      {
        "sha": "6f750106e4710dbe29eb95ab0f0a54454d488657",
        "filename": "contrib/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36164faa338d387177c6328496f63ac11eda3b78/contrib/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36164faa338d387177c6328496f63ac11eda3b78/contrib/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/README.md?ref=36164faa338d387177c6328496f63ac11eda3b78",
        "patch": "@@ -3,7 +3,7 @@ Repository Tools\n \n ### [Developer tools](/contrib/devtools) ###\n Specific tools for developers working on this repository.\n-Contains the script `github-merge.py` for merging github pull requests securely and signing them using GPG.\n+Contains the script `github-merge.py` for merging GitHub pull requests securely and signing them using GPG.\n \n ### [Verify-Commits](/contrib/verify-commits) ###\n Tool to verify that every merge commit was signed by a developer using the above `github-merge.py` script."
      },
      {
        "sha": "67c5e15a15041f77122a8d0745a3164abde9e8d0",
        "filename": "contrib/devtools/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36164faa338d387177c6328496f63ac11eda3b78/contrib/devtools/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36164faa338d387177c6328496f63ac11eda3b78/contrib/devtools/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/README.md?ref=36164faa338d387177c6328496f63ac11eda3b78",
        "patch": "@@ -125,7 +125,7 @@ check or whatever).\n \n This means that there are no potential race conditions (where a\n pullreq gets updated while you're reviewing it, but before you click\n-merge), and when using GPG signatures, that even a compromised github\n+merge), and when using GPG signatures, that even a compromised GitHub\n couldn't mess with the sources.\n \n Setup"
      },
      {
        "sha": "3a7e4f73b3d60d5a88e20615205d77aa056a7c9f",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36164faa338d387177c6328496f63ac11eda3b78/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36164faa338d387177c6328496f63ac11eda3b78/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=36164faa338d387177c6328496f63ac11eda3b78",
        "patch": "@@ -448,7 +448,7 @@ Current subtrees include:\n   - Upstream at https://github.com/jgarzik/univalue ; report important PRs to Core to avoid delay.\n \n \n-Git and github tips\n+Git and GitHub tips\n ---------------------\n \n - For resolving merge/rebase conflicts, it can be useful to enable diff3 style using"
      },
      {
        "sha": "1702637d53ebd7a0c2f827ed114260d0f515ee51",
        "filename": "doc/translation_process.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36164faa338d387177c6328496f63ac11eda3b78/doc/translation_process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36164faa338d387177c6328496f63ac11eda3b78/doc/translation_process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/translation_process.md?ref=36164faa338d387177c6328496f63ac11eda3b78",
        "patch": "@@ -4,7 +4,7 @@ Translations\n The Bitcoin-Core project has been designed to support multiple localisations. This makes adding new phrases, and completely new languages easily achievable. For managing all application translations, Bitcoin-Core makes use of the Transifex online translation management tool.\n \n ### Helping to translate (using Transifex)\n-Transifex is setup to monitor the Github repo for updates, and when code containing new translations is found, Transifex will process any changes. It may take several hours after a pull-request has been merged, to appear in the Transifex web interface.\n+Transifex is setup to monitor the GitHub repo for updates, and when code containing new translations is found, Transifex will process any changes. It may take several hours after a pull-request has been merged, to appear in the Transifex web interface.\n \n Multiple language support is critical in assisting Bitcoin\u2019s global adoption, and growth. One of Bitcoin\u2019s greatest strengths is cross-border money transfers, any help making that easier is greatly appreciated.\n \n@@ -32,7 +32,7 @@ QToolBar *toolbar = addToolBar(tr(\"Tabs toolbar\"));\n ### Creating a pull-request\n For general PRs, you shouldn\u2019t include any updates to the translation source files. They will be updated periodically, primarily around pre-releases, allowing time for any new phrases to be translated before public releases. This is also important in avoiding translation related merge conflicts.\n \n-When an updated source file is merged into the Github repo, Transifex will automatically detect it (although it can take several hours). Once processed, the new strings will show up as \"Remaining\" in the Transifex web interface and are ready for translators.\n+When an updated source file is merged into the GitHub repo, Transifex will automatically detect it (although it can take several hours). Once processed, the new strings will show up as \"Remaining\" in the Transifex web interface and are ready for translators.\n \n To create the pull-request, use the following commands:\n ```"
      },
      {
        "sha": "1019ff6653b7842f0e18371bc577eeb1faebd313",
        "filename": "doc/zmq.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36164faa338d387177c6328496f63ac11eda3b78/doc/zmq.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36164faa338d387177c6328496f63ac11eda3b78/doc/zmq.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/zmq.md?ref=36164faa338d387177c6328496f63ac11eda3b78",
        "patch": "@@ -1,4 +1,4 @@\n-# Block and Transaction Broadcasting With ZeroMQ\n+# Block and Transaction Broadcasting with ZeroMQ\n \n [ZeroMQ](http://zeromq.org/) is a lightweight wrapper around TCP\n connections, inter-process communication, and shared-memory,\n@@ -50,7 +50,7 @@ during the *configure* step of building bitcoind:\n     $ ./configure --disable-zmq (other options)\n \n To actually enable operation, one must set the appropriate options on\n-the commandline or in the configuration file.\n+the command line or in the configuration file.\n \n ## Usage\n "
      }
    ]
  },
  {
    "sha": "36f9d3ae6da48325b0a37ad7fd1abe263a0f2c9a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNmY5ZDNhZTZkYTQ4MzI1YjBhMzdhZDdmZDFhYmUyNjNhMGYyYzlh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-09T06:29:53Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-09T06:30:10Z"
      },
      "message": "Merge #9718: Qt/Intro: Various fixes\n\na9baa6d Bugfix: Qt/Intro: Pruned nodes never require *more* space (Luke Dashjr)\n93ffba7 Bugfix: Qt/Intro: Chain state needs to be stored even with the full blockchain (Luke Dashjr)\nc8cee26 Qt/Intro: Update block chain size (Luke Dashjr)",
      "tree": {
        "sha": "bb1270a3f1d2dabe008496c5e702d164ed30e90f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb1270a3f1d2dabe008496c5e702d164ed30e90f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/36f9d3ae6da48325b0a37ad7fd1abe263a0f2c9a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYnAxyAAoJEHSBCwEjRsmmw3gH/1jmztkQlP7kX6Iz+7Dsx/WW\ns4/7hl6GX3+T1b7UYbrNlA+LwJK5VRe9Q8nZw6x0eTp/QRLxD8fdV1jp8gw6urJC\nQsSCQCCER2TVtxYqESRfkGMFTvAO54U7+vLTJwK7AynKIJIZbJOvImcWcdKBowzu\n8nYI0IspomRgnFoGGj2uBnbq2E77qbI0ekB4nPwLfsp/HGuXXVLdVOjx17R0qOOu\nj/tJ8rrU/FuSVd4LvwlmlnVEcrGahPlme+jNzSRPD5PlBvSbXmevsObk0M+NjtJN\nGFuqc3Zxafz0UHHOx9kBQ+iEsLxVOCGVklEDWYQS2O2q6ivmT7LbRPagid3qLU0=\n=k+7T\n-----END PGP SIGNATURE-----",
        "payload": "tree bb1270a3f1d2dabe008496c5e702d164ed30e90f\nparent dd163f57886991f3d564c9b0b1bf2ccc8f4ba784\nparent a9baa6d742c0425af4fb048cbd85707143227e84\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1486621793 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1486621810 +0100\n\nMerge #9718: Qt/Intro: Various fixes\n\na9baa6d Bugfix: Qt/Intro: Pruned nodes never require *more* space (Luke Dashjr)\n93ffba7 Bugfix: Qt/Intro: Chain state needs to be stored even with the full blockchain (Luke Dashjr)\nc8cee26 Qt/Intro: Update block chain size (Luke Dashjr)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36f9d3ae6da48325b0a37ad7fd1abe263a0f2c9a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/36f9d3ae6da48325b0a37ad7fd1abe263a0f2c9a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36f9d3ae6da48325b0a37ad7fd1abe263a0f2c9a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dd163f57886991f3d564c9b0b1bf2ccc8f4ba784",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd163f57886991f3d564c9b0b1bf2ccc8f4ba784",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dd163f57886991f3d564c9b0b1bf2ccc8f4ba784"
      },
      {
        "sha": "a9baa6d742c0425af4fb048cbd85707143227e84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9baa6d742c0425af4fb048cbd85707143227e84",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a9baa6d742c0425af4fb048cbd85707143227e84"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 8,
      "deletions": 3
    },
    "files": [
      {
        "sha": "6b5ac47f205f053b4653c639fb74cece90d18cde",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36f9d3ae6da48325b0a37ad7fd1abe263a0f2c9a/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36f9d3ae6da48325b0a37ad7fd1abe263a0f2c9a/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=36f9d3ae6da48325b0a37ad7fd1abe263a0f2c9a",
        "patch": "@@ -23,7 +23,7 @@\n \n static const uint64_t GB_BYTES = 1000000000LL;\n /* Minimum free space (in GB) needed for data directory */\n-static const uint64_t BLOCK_CHAIN_SIZE = 80;\n+static const uint64_t BLOCK_CHAIN_SIZE = 120;\n /* Minimum free space (in GB) needed for data directory when pruned; Does not include prune target */\n static const uint64_t CHAIN_STATE_SIZE = 2;\n /* Total required space (in GB) depending on user choice (prune, not prune) */\n@@ -126,8 +126,13 @@ Intro::Intro(QWidget *parent) :\n     ui->storageLabel->setText(ui->storageLabel->text().arg(tr(PACKAGE_NAME)));\n     uint64_t pruneTarget = std::max<int64_t>(0, GetArg(\"-prune\", 0));\n     requiredSpace = BLOCK_CHAIN_SIZE;\n-    if (pruneTarget)\n-        requiredSpace = CHAIN_STATE_SIZE + std::ceil(pruneTarget * 1024 * 1024.0 / GB_BYTES);\n+    if (pruneTarget) {\n+        uint64_t prunedGBs = std::ceil(pruneTarget * 1024 * 1024.0 / GB_BYTES);\n+        if (prunedGBs <= requiredSpace) {\n+            requiredSpace = prunedGBs;\n+        }\n+    }\n+    requiredSpace += CHAIN_STATE_SIZE;\n     ui->sizeWarningLabel->setText(ui->sizeWarningLabel->text().arg(tr(PACKAGE_NAME)).arg(requiredSpace));\n     startThread();\n }"
      }
    ]
  },
  {
    "sha": "ca9955e706d346ea54ee128741444107af9b3977",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYTk5NTVlNzA2ZDM0NmVhNTRlZTEyODc0MTQ0NDEwN2FmOWIzOTc3",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-02-09T10:28:01Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-02-09T10:28:01Z"
      },
      "message": "Remove bitseed.xf2.org form the dns seed list",
      "tree": {
        "sha": "861ea1f799fc9d9c4d21d09bdc2828201e60d8c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/861ea1f799fc9d9c4d21d09bdc2828201e60d8c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca9955e706d346ea54ee128741444107af9b3977",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAlicRDsACgkQKdS8tkFv\nU+xmqw//UJdLrlkU10tCE8oP7Nby7FiMYnycawC+3ta0xO0J/TMwFvxJIg/S57VX\ngnR0KsoKbaktZD1ORtUmzHRbLXpropxc7KfzxvPxsU8pDHepCmMgvGKI3QvC4hxP\nOKJWOGmCMWt43sADaBmuzjDdU2AgYyUYbxQfXPz+r/Og92J8dCcr/6Jlm0tiI3dR\niFPddhZ3ooHKVOTRJcaPGOeTLRPXiqUOb82i5bPFrqMBv7EbBh6oBvq2qOCymFLQ\n6JYjmhTinrc6TXqj7RI+A5dc6JMw3SQqYPRh6ijfDOnv+dEAGaDZEIP5hgC8zGcS\nzVcpv5K4+bl/XUkIOpPU1dCUzBnvm/uY2va+MgYjokV5kwYLGgysBjQ+cRCvt2I2\nM6B8br47mGGyuRjuCwmWRQ+eeaCM/n8eP/pncffv0pVw7epbEgFOmt+GogKX0ohX\nr47DCPZkWEz+wiisG5Xed0B2Qgl6jXw3NRWdsbQLOdwPNpuR8alO02oT21LQ1vPM\nV3iIuVS1W1xlURYyPs4t9MsoI/XnPaoVmNBb3fPycWpYb5NfmsuF3TzAsYyJwbJT\nUz/LeoqH9KxGj+aegTKQVaHJITydcs8s6dlQkzkQTjF2goEZht1O+z9RKRVoUGvx\nZyhl2C0d2R7BPNX+PvjHoYxrw9w9+mkFoAeV4cnEAOHBJqxABIk=\n=iTeX\n-----END PGP SIGNATURE-----",
        "payload": "tree 861ea1f799fc9d9c4d21d09bdc2828201e60d8c4\nparent 36f9d3ae6da48325b0a37ad7fd1abe263a0f2c9a\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1486636081 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1486636081 +0100\n\nRemove bitseed.xf2.org form the dns seed list\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca9955e706d346ea54ee128741444107af9b3977",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ca9955e706d346ea54ee128741444107af9b3977",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca9955e706d346ea54ee128741444107af9b3977/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "36f9d3ae6da48325b0a37ad7fd1abe263a0f2c9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36f9d3ae6da48325b0a37ad7fd1abe263a0f2c9a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/36f9d3ae6da48325b0a37ad7fd1abe263a0f2c9a"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6c6f677df79cf545ebba84778ed025c0be898acf",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca9955e706d346ea54ee128741444107af9b3977/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca9955e706d346ea54ee128741444107af9b3977/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=ca9955e706d346ea54ee128741444107af9b3977",
        "patch": "@@ -124,7 +124,6 @@ class CMainParams : public CChainParams {\n         vSeeds.push_back(CDNSSeedData(\"bluematt.me\", \"dnsseed.bluematt.me\", true)); // Matt Corallo, only supports x9\n         vSeeds.push_back(CDNSSeedData(\"dashjr.org\", \"dnsseed.bitcoin.dashjr.org\")); // Luke Dashjr\n         vSeeds.push_back(CDNSSeedData(\"bitcoinstats.com\", \"seed.bitcoinstats.com\", true)); // Christian Decker, supports x1 - xf\n-        vSeeds.push_back(CDNSSeedData(\"xf2.org\", \"bitseed.xf2.org\")); // Jeff Garzik\n         vSeeds.push_back(CDNSSeedData(\"bitcoin.jonasschnelli.ch\", \"seed.bitcoin.jonasschnelli.ch\", true)); // Jonas Schnelli, only supports x1, x5, x9, and xd\n \n         base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,0);"
      }
    ]
  },
  {
    "sha": "66f861ade9db108f979a9bdf8d90e8fca028e2a3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NmY4NjFhZGU5ZGIxMDhmOTc5YTliZGY4ZDkwZThmY2EwMjhlMmEz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-07T22:43:36Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-09T22:34:03Z"
      },
      "message": "Add a test for P2P inactivity timeouts",
      "tree": {
        "sha": "ca572ce1139535658ee44eafa7ee63d19ad204f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ca572ce1139535658ee44eafa7ee63d19ad204f8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/66f861ade9db108f979a9bdf8d90e8fca028e2a3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66f861ade9db108f979a9bdf8d90e8fca028e2a3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/66f861ade9db108f979a9bdf8d90e8fca028e2a3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66f861ade9db108f979a9bdf8d90e8fca028e2a3/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b436f92f727686cd8a10ddff5cd22ee6366fe8c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b436f92f727686cd8a10ddff5cd22ee6366fe8c8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b436f92f727686cd8a10ddff5cd22ee6366fe8c8"
      }
    ],
    "stats": {
      "total": 104,
      "additions": 104,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2cf4adb9a0431bb1e49b092bd40a4914b2e8b34a",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66f861ade9db108f979a9bdf8d90e8fca028e2a3/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66f861ade9db108f979a9bdf8d90e8fca028e2a3/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=66f861ade9db108f979a9bdf8d90e8fca028e2a3",
        "patch": "@@ -168,6 +168,7 @@\n     # vv Tests less than 2m vv\n     'bip68-sequence.py',\n     'getblocktemplate_longpoll.py',\n+    'p2p-timeouts.py',\n     # vv Tests less than 60s vv\n     'bip9-softforks.py',\n     'p2p-feefilter.py',"
      },
      {
        "sha": "f1b190587d8efa7d43584507b13e390ca3bbe711",
        "filename": "qa/rpc-tests/p2p-timeouts.py",
        "status": "added",
        "additions": 103,
        "deletions": 0,
        "changes": 103,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66f861ade9db108f979a9bdf8d90e8fca028e2a3/qa/rpc-tests/p2p-timeouts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66f861ade9db108f979a9bdf8d90e8fca028e2a3/qa/rpc-tests/p2p-timeouts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-timeouts.py?ref=66f861ade9db108f979a9bdf8d90e8fca028e2a3",
        "patch": "@@ -0,0 +1,103 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\" TimeoutsTest -- test various net timeouts (only in extended tests)\n+\n+- Create three bitcoind nodes:\n+\n+    no_verack_node - we never send a verack in response to their version\n+    no_version_node - we never send a version (only a ping)\n+    no_send_node - we never send any P2P message.\n+\n+- Start all three nodes\n+- Wait 1 second\n+- Assert that we're connected\n+- Send a ping to no_verack_node and no_version_node\n+- Wait 30 seconds\n+- Assert that we're still connected\n+- Send a ping to no_verack_node and no_version_node\n+- Wait 31 seconds\n+- Assert that we're no longer connected (timeout to receive version/verack is 60 seconds)\n+\"\"\"\n+\n+from time import sleep\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+class TestNode(SingleNodeConnCB):\n+    def __init__(self):\n+        SingleNodeConnCB.__init__(self)\n+        self.connected = False\n+        self.received_version = False\n+\n+    def on_open(self, conn):\n+        self.connected = True\n+\n+    def on_close(self, conn):\n+        self.connected = False\n+\n+    def on_version(self, conn, message):\n+        # Don't send a verack in response\n+        self.received_version = True\n+\n+class TimeoutsTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        self.nodes = []\n+\n+        # Start up node0 to be a version 1, pre-segwit node.\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, \n+                [[\"-debug\", \"-logtimemicros=1\"]])\n+\n+    def run_test(self):\n+        # Setup the p2p connections and start up the network thread.\n+        self.no_verack_node = TestNode() # never send verack\n+        self.no_version_node = TestNode() # never send version (just ping)\n+        self.no_send_node = TestNode() # never send anything\n+\n+        connections = []\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], self.no_verack_node))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], self.no_version_node, send_version=False))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], self.no_send_node, send_version=False))\n+        self.no_verack_node.add_connection(connections[0])\n+        self.no_version_node.add_connection(connections[1])\n+        self.no_send_node.add_connection(connections[2])\n+\n+        NetworkThread().start()  # Start up network handling in another thread\n+\n+        sleep(1)\n+\n+        assert(self.no_verack_node.connected)\n+        assert(self.no_version_node.connected)\n+        assert(self.no_send_node.connected)\n+\n+        ping_msg = msg_ping()\n+        connections[0].send_message(ping_msg)\n+        connections[1].send_message(ping_msg)\n+\n+        sleep(30)\n+\n+        assert(self.no_verack_node.received_version)\n+\n+        assert(self.no_verack_node.connected)\n+        assert(self.no_version_node.connected)\n+        assert(self.no_send_node.connected)\n+\n+        connections[0].send_message(ping_msg)\n+        connections[1].send_message(ping_msg)\n+\n+        sleep(31)\n+\n+        assert(not self.no_verack_node.connected)\n+        assert(not self.no_version_node.connected)\n+        assert(not self.no_send_node.connected)\n+\n+if __name__ == '__main__':\n+    TimeoutsTest().main()"
      }
    ]
  },
  {
    "sha": "33f3b21407a38faaaee2d72d16e8eb340fe74657",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozM2YzYjIxNDA3YTM4ZmFhYWVlMmQ3MmQxNmU4ZWIzNDBmZTc0NjU3",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-02-10T08:14:17Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-02-10T08:14:21Z"
      },
      "message": "Merge #9730: Remove bitseed.xf2.org form the dns seed list\n\nca9955e Remove bitseed.xf2.org form the dns seed list (Jonas Schnelli)",
      "tree": {
        "sha": "861ea1f799fc9d9c4d21d09bdc2828201e60d8c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/861ea1f799fc9d9c4d21d09bdc2828201e60d8c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/33f3b21407a38faaaee2d72d16e8eb340fe74657",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAliddl0ACgkQKdS8tkFv\nU+yYqQ/+K6jfgQVKjVsaf7QGZDWdYjecruCg5cwwQJh0WdwpG1Yrd5I1zVNEsht3\ngiHm0QslXtJlxP1E/huRSQM88igyDYK9pPBqfbXIpXSWe1Qs3tidcYnqk6bQhE1D\nBdxP1t2Q7WmFuBIZrcX10VNYJJu+ZBHQ/Ro6ODsa7Xeey01hB1uq8nNUnoTLNn7I\nrSmC05lcDKRkCtBRwRsAo6ifQVjAFv+Xvi+uGTM/pmkJMcSnzGUbdEsM2gNIiN3N\n0PgQwlN/k9ek+w2FgTShvibVnfq95l7UU5d31d9a4VadCHuqey6PjWF3xjBI2I+/\nkbX+MqbLm5MMnOUruQv3qic34QFsFDjD5K5Q4EkaVXLlJuA39OPP9vILpmhyBUKR\naIhyC8VpSHs7mRVQ0x85+CnrYTVELfhFAKCe9CTwpGyiRuzTHz2FfkLOQw0B7usU\nflX6M4jDpPFR2109FFUePk2iDFtCiWf+I7mS4uK+JxYT/+GYKW2gw0nB8UkU+SvS\nX032cg61OZZkYlFA2mK8V5K58T5KYJ6tgh++NZ63sj2VRj6m2PcNW2IMoCVkMqUl\n2VKxWefsDy5T2xPPpHAqBTdNpz/U58h5yD/1nQYmwTkk6P5Pkssn/i8uID54MfVF\nwNCkvDZlmcUx8KKdOpgRUl9kgDeUWgoLoCYAv5ogSJQdOHf1IoU=\n=ilul\n-----END PGP SIGNATURE-----",
        "payload": "tree 861ea1f799fc9d9c4d21d09bdc2828201e60d8c4\nparent 36f9d3ae6da48325b0a37ad7fd1abe263a0f2c9a\nparent ca9955e706d346ea54ee128741444107af9b3977\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1486714457 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1486714461 +0100\n\nMerge #9730: Remove bitseed.xf2.org form the dns seed list\n\nca9955e Remove bitseed.xf2.org form the dns seed list (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33f3b21407a38faaaee2d72d16e8eb340fe74657",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/33f3b21407a38faaaee2d72d16e8eb340fe74657",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33f3b21407a38faaaee2d72d16e8eb340fe74657/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "36f9d3ae6da48325b0a37ad7fd1abe263a0f2c9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36f9d3ae6da48325b0a37ad7fd1abe263a0f2c9a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/36f9d3ae6da48325b0a37ad7fd1abe263a0f2c9a"
      },
      {
        "sha": "ca9955e706d346ea54ee128741444107af9b3977",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca9955e706d346ea54ee128741444107af9b3977",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ca9955e706d346ea54ee128741444107af9b3977"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6c6f677df79cf545ebba84778ed025c0be898acf",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33f3b21407a38faaaee2d72d16e8eb340fe74657/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33f3b21407a38faaaee2d72d16e8eb340fe74657/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=33f3b21407a38faaaee2d72d16e8eb340fe74657",
        "patch": "@@ -124,7 +124,6 @@ class CMainParams : public CChainParams {\n         vSeeds.push_back(CDNSSeedData(\"bluematt.me\", \"dnsseed.bluematt.me\", true)); // Matt Corallo, only supports x9\n         vSeeds.push_back(CDNSSeedData(\"dashjr.org\", \"dnsseed.bitcoin.dashjr.org\")); // Luke Dashjr\n         vSeeds.push_back(CDNSSeedData(\"bitcoinstats.com\", \"seed.bitcoinstats.com\", true)); // Christian Decker, supports x1 - xf\n-        vSeeds.push_back(CDNSSeedData(\"xf2.org\", \"bitseed.xf2.org\")); // Jeff Garzik\n         vSeeds.push_back(CDNSSeedData(\"bitcoin.jonasschnelli.ch\", \"seed.bitcoin.jonasschnelli.ch\", true)); // Jonas Schnelli, only supports x1, x5, x9, and xd\n \n         base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,0);"
      }
    ]
  },
  {
    "sha": "5e903a5ed96809af31cdcf6037e6c284832a02a6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZTkwM2E1ZWQ5NjgwOWFmMzFjZGNmNjAzN2U2YzI4NDgzMmEwMmE2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-10T08:49:04Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-10T08:56:27Z"
      },
      "message": "devtools: Handle Qt formatting characters edge-case in update-translations.py\n\nIf both numeric format specifiers and \"others\" are used, assume we're\ndealing with a Qt-formatted message. In the case of Qt formatting (see\nhttps://doc.qt.io/qt-5/qstring.html#arg) only numeric formats are\nreplaced at all. This means \"(percentage: %1%)\" is valid (which was\nintroduced in #9461), without needing any kind of escaping that would be\nnecessary for strprintf.  Without this, this function would wrongly\ndetect '%)' as a printf format specifier.",
      "tree": {
        "sha": "79ca74509bdfd8b1a9a85091ae10af1b95b5f3da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/79ca74509bdfd8b1a9a85091ae10af1b95b5f3da"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5e903a5ed96809af31cdcf6037e6c284832a02a6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e903a5ed96809af31cdcf6037e6c284832a02a6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5e903a5ed96809af31cdcf6037e6c284832a02a6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e903a5ed96809af31cdcf6037e6c284832a02a6/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "33f3b21407a38faaaee2d72d16e8eb340fe74657",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33f3b21407a38faaaee2d72d16e8eb340fe74657",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/33f3b21407a38faaaee2d72d16e8eb340fe74657"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2011841005930eb975a54bcd59693c27b4a70f2c",
        "filename": "contrib/devtools/update-translations.py",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e903a5ed96809af31cdcf6037e6c284832a02a6/contrib/devtools/update-translations.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e903a5ed96809af31cdcf6037e6c284832a02a6/contrib/devtools/update-translations.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/update-translations.py?ref=5e903a5ed96809af31cdcf6037e6c284832a02a6",
        "patch": "@@ -65,6 +65,14 @@ def split_format_specifiers(specifiers):\n         else:\n             other.append(s)\n \n+    # If both numeric format specifiers and \"others\" are used, assume we're dealing\n+    # with a Qt-formatted message. In the case of Qt formatting (see https://doc.qt.io/qt-5/qstring.html#arg)\n+    # only numeric formats are replaced at all. This means \"(percentage: %1%)\" is valid, without needing\n+    # any kind of escaping that would be necessary for strprintf. Without this, this function\n+    # would wrongly detect '%)' as a printf format specifier.\n+    if numeric:\n+        other = []\n+\n     # numeric (Qt) can be present in any order, others (strprintf) must be in specified order\n     return set(numeric),other\n "
      }
    ]
  },
  {
    "sha": "7179e7ca0db493dccbfd88f64738252844aab6ff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MTc5ZTdjYTBkYjQ5M2RjY2JmZDg4ZjY0NzM4MjUyODQ0YWFiNmZm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-10T08:56:36Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-10T08:56:36Z"
      },
      "message": "qt: Periodic translations update",
      "tree": {
        "sha": "41bbae1ba75840706af3df05a5290ae265a02684",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/41bbae1ba75840706af3df05a5290ae265a02684"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7179e7ca0db493dccbfd88f64738252844aab6ff",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7179e7ca0db493dccbfd88f64738252844aab6ff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7179e7ca0db493dccbfd88f64738252844aab6ff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7179e7ca0db493dccbfd88f64738252844aab6ff/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5e903a5ed96809af31cdcf6037e6c284832a02a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e903a5ed96809af31cdcf6037e6c284832a02a6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5e903a5ed96809af31cdcf6037e6c284832a02a6"
      }
    ],
    "stats": {
      "total": 1736,
      "additions": 1512,
      "deletions": 224
    },
    "files": [
      {
        "sha": "f38c425137020ded31353635e466c526a0127f0f",
        "filename": "src/qt/locale/bitcoin_cs.ts",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7179e7ca0db493dccbfd88f64738252844aab6ff/src/qt/locale/bitcoin_cs.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7179e7ca0db493dccbfd88f64738252844aab6ff/src/qt/locale/bitcoin_cs.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_cs.ts?ref=7179e7ca0db493dccbfd88f64738252844aab6ff",
        "patch": "@@ -329,6 +329,10 @@\n         <source>Click to enable network activity again.</source>\n         <translation>Kliknut\u00edm op\u011bt umo\u017en\u00ed\u0161 spojen\u00ed do s\u00edt\u011b.</translation>\n     </message>\n+    <message>\n+        <source>Syncing Headers (%1%)...</source>\n+        <translation>Synchronizuji z\u00e1hlav\u00ed blok\u016f (%1 %)\u2026</translation>\n+    </message>\n     <message>\n         <source>Reindexing blocks on disk...</source>\n         <translation>Vytv\u00e1\u0159\u00edm nov\u00fd index blok\u016f na disku...</translation>\n@@ -481,6 +485,10 @@\n         <source>%1 client</source>\n         <translation>%1 klient</translation>\n     </message>\n+    <message>\n+        <source>Connecting to peers...</source>\n+        <translation>P\u0159ipojuji se\u2026</translation>\n+    </message>\n     <message>\n         <source>Catching up...</source>\n         <translation>Stahuji...</translation>\n@@ -3089,6 +3097,14 @@\n         <source>Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)</source>\n         <translation>Spustit p\u0159\u00edkaz, kdy\u017e se objev\u00ed transakce t\u00fdkaj\u00edc\u00ed se pen\u011b\u017eenky (%s se v p\u0159\u00edkazu nahrad\u00ed za TxID)</translation>\n     </message>\n+    <message>\n+        <source>Extra transactions to keep in memory for compact block reconstructions (default: %u)</source>\n+        <translation>Po\u010det extra transakc\u00ed, kter\u00e9 se maj\u00ed dr\u017eet v pam\u011bti pro \u00fa\u010dely rekonstrukce kompaktn\u00edch blok\u016f (v\u00fdchoz\u00ed: %u)</translation>\n+    </message>\n+    <message>\n+        <source>If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)</source>\n+        <translation>Pokud je tenhle blok v \u0159et\u011bzci, tak p\u0159edpokl\u00e1dat, \u017ee on i jeho n\u00e1sledn\u00edci jsou platn\u00ed, a potenci\u00e1ln\u011b p\u0159esko\u010dit ov\u011b\u0159ov\u00e1n\u00ed jejich skript\u016f (0 = ov\u011b\u0159ovat v\u0161e, v\u00fdchoz\u00ed: %s, testnet: %s)</translation>\n+    </message>\n     <message>\n         <source>Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: %u seconds)</source>\n         <translation>Maxim\u00e1ln\u00ed povolen\u00e9 se\u0159izov\u00e1n\u00ed \u010dasu medi\u00e1nem \u010das\u016f prot\u011bj\u0161k\u016f. M\u00edstn\u00ed vn\u00edm\u00e1n\u00ed \u010dasu m\u016f\u017ee b\u00fdt ovlivn\u011bno prot\u011bj\u0161ky, a to dop\u0159edu nebo dozadu a\u017e o toto mno\u017estv\u00ed. (v\u00fdchoz\u00ed: %u vte\u0159in)</translation>\n@@ -3105,6 +3121,14 @@\n         <source>Please contribute if you find %s useful. Visit %s for further information about the software.</source>\n         <translation>Pros\u00edme, zapoj se nebo p\u0159isp\u011bj, pokud ti %s p\u0159ijde u\u017eite\u010dn\u00fd. V\u00edce informac\u00ed o programu je na %s.</translation>\n     </message>\n+    <message>\n+        <source>Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex and -rescan. Warning: Reverting this setting requires re-downloading the entire blockchain. (default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, &gt;%u = automatically prune block files to stay under the specified target size in MiB)</source>\n+        <translation>Omezit n\u00e1roky na \u00falo\u017en\u00fd prostor pro\u0159ez\u00e1v\u00e1n\u00edm (maz\u00e1n\u00edm) star\u00fdch blok\u016f. Tato volba tak\u00e9 umo\u017en\u00ed pou\u017e\u00edt RPC vol\u00e1n\u00ed pruneblockchain ke smaz\u00e1n\u00ed konkr\u00e9tn\u00edch blok\u016f a d\u00e1le automatick\u00e9 pro\u0159ez\u00e1v\u00e1n\u00ed star\u00fdch blok\u016f, pokud je zad\u00e1na c\u00edlov\u00e1 velikost soubor\u016f s bloky v MiB. Tento re\u017eim nen\u00ed slu\u010diteln\u00fd s -txindex ani -rescan. Upozorn\u011bn\u00ed: op\u011btovn\u00e1 zm\u011bna tohoto nastaven\u00ed bude vy\u017eadovat nov\u00e9 sta\u017een\u00ed cel\u00e9ho \u0159et\u011bzce blok\u016f. (v\u00fdchoz\u00ed: 0 = bloky nepro\u0159ez\u00e1vat, 1 = povolit ru\u010dn\u00ed pro\u0159ez\u00e1v\u00e1n\u00ed skrze RPC, &gt;%u = automatick\u00e9 pro\u0159ez\u00e1v\u00e1n\u00ed blok\u016f tak, aby byla udr\u017eena c\u00edlov\u00e1 velikost soubor\u016f s bloky, v MiB)</translation>\n+    </message>\n+    <message>\n+        <source>Set lowest fee rate (in %s/kB) for transactions to be included in block creation. (default: %s)</source>\n+        <translation>Nastavit nejni\u017e\u0161\u00ed akceptovateln\u00fd poplatek (v %s/kB) pro transakce, kter\u00e9 maj\u00ed b\u00fdt zahrnuty do nov\u00fdch blok\u016f. (v\u00fdchoz\u00ed: %s)</translation>\n+    </message>\n     <message>\n         <source>Set the number of script verification threads (%u to %d, 0 = auto, &lt;0 = leave that many cores free, default: %d)</source>\n         <translation>Nastaven\u00ed po\u010dtu vl\u00e1ken pro verifikaci skript\u016f (%u a\u017e %d, 0 = automaticky, &lt;0 = nechat dan\u00fd po\u010det jader voln\u00fd, v\u00fdchoz\u00ed: %d)</translation>"
      },
      {
        "sha": "f62f1e4a734d39538a281a90f29a0d698cfd70b6",
        "filename": "src/qt/locale/bitcoin_en.ts",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7179e7ca0db493dccbfd88f64738252844aab6ff/src/qt/locale/bitcoin_en.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7179e7ca0db493dccbfd88f64738252844aab6ff/src/qt/locale/bitcoin_en.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_en.ts?ref=7179e7ca0db493dccbfd88f64738252844aab6ff",
        "patch": "@@ -1083,7 +1083,7 @@\n         <translation>Use a custom data directory:</translation>\n     </message>\n     <message>\n-        <location filename=\"../intro.cpp\" line=\"+89\"/>\n+        <location filename=\"../intro.cpp\" line=\"+94\"/>\n         <source>Error: Specified data directory &quot;%1&quot; cannot be created.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>"
      },
      {
        "sha": "313d5e3be14b67ef1ec205503df3287884e24b26",
        "filename": "src/qt/locale/bitcoin_et.ts",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7179e7ca0db493dccbfd88f64738252844aab6ff/src/qt/locale/bitcoin_et.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7179e7ca0db493dccbfd88f64738252844aab6ff/src/qt/locale/bitcoin_et.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_et.ts?ref=7179e7ca0db493dccbfd88f64738252844aab6ff",
        "patch": "@@ -214,6 +214,10 @@\n </context>\n <context>\n     <name>BanTableModel</name>\n+    <message>\n+        <source>IP/Netmask</source>\n+        <translation>IP/V\u00f5rgumask</translation>\n+    </message>\n     </context>\n <context>\n     <name>BitcoinGUI</name>\n@@ -787,6 +791,10 @@\n         <source>&amp;Window</source>\n         <translation>&amp;Aken</translation>\n     </message>\n+    <message>\n+        <source>Hide tray icon</source>\n+        <translation>Peida tegumiriba ikoon</translation>\n+    </message>\n     <message>\n         <source>Show only a tray icon after minimizing the window.</source>\n         <translation>Minimeeri systray alale.</translation>\n@@ -903,10 +911,30 @@\n         <source>N/A</source>\n         <translation>N/A</translation>\n     </message>\n+    <message>\n+        <source>%1 ms</source>\n+        <translation>%1 ms</translation>\n+    </message>\n+    <message numerus=\"yes\">\n+        <source>%n hour(s)</source>\n+        <translation><numerusform>%n tund</numerusform><numerusform>%n tundi</numerusform></translation>\n+    </message>\n+    <message numerus=\"yes\">\n+        <source>%n day(s)</source>\n+        <translation><numerusform>%n p\u00e4ev</numerusform><numerusform>%n p\u00e4eva</numerusform></translation>\n+    </message>\n+    <message numerus=\"yes\">\n+        <source>%n week(s)</source>\n+        <translation><numerusform>%n n\u00e4dal</numerusform><numerusform>%n n\u00e4dalat</numerusform></translation>\n+    </message>\n     <message>\n         <source>%1 and %2</source>\n         <translation>%1 ja %2</translation>\n     </message>\n+    <message numerus=\"yes\">\n+        <source>%n year(s)</source>\n+        <translation><numerusform>%n aasta</numerusform><numerusform>%n aastat</numerusform></translation>\n+    </message>\n     </context>\n <context>\n     <name>QObject::QObject</name>"
      },
      {
        "sha": "21800231596a0bd70db1ab0f290fd1ec9bcf5534",
        "filename": "src/qt/locale/bitcoin_fr.ts",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7179e7ca0db493dccbfd88f64738252844aab6ff/src/qt/locale/bitcoin_fr.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7179e7ca0db493dccbfd88f64738252844aab6ff/src/qt/locale/bitcoin_fr.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_fr.ts?ref=7179e7ca0db493dccbfd88f64738252844aab6ff",
        "patch": "@@ -329,6 +329,10 @@\n         <source>Click to enable network activity again.</source>\n         <translation>Cliquer pour r\u00e9activer l'activit\u00e9 r\u00e9seau.</translation>\n     </message>\n+    <message>\n+        <source>Syncing Headers (%1%)...</source>\n+        <translation>Synchronisation des en-t\u00eates (%1)...</translation>\n+    </message>\n     <message>\n         <source>Reindexing blocks on disk...</source>\n         <translation>R\u00e9indexation des blocs sur le disque...</translation>"
      },
      {
        "sha": "9f2c7626de09550ee73eb86eaed9c3acbc01bfc7",
        "filename": "src/qt/locale/bitcoin_it.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7179e7ca0db493dccbfd88f64738252844aab6ff/src/qt/locale/bitcoin_it.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7179e7ca0db493dccbfd88f64738252844aab6ff/src/qt/locale/bitcoin_it.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_it.ts?ref=7179e7ca0db493dccbfd88f64738252844aab6ff",
        "patch": "@@ -702,10 +702,6 @@\n         <source>Error</source>\n         <translation>Errore</translation>\n     </message>\n-    <message numerus=\"yes\">\n-        <source>%n GB of free space available</source>\n-        <translation><numerusform>GB di spazio libero disponibile</numerusform><numerusform>%n GB di spazio disponibile</numerusform></translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>(of %n GB needed)</source>\n         <translation><numerusform>(di %nGB richiesti)</numerusform><numerusform>(%n GB richiesti)</numerusform></translation>"
      },
      {
        "sha": "3202587cbd54bc3773667a348375112c358ded02",
        "filename": "src/qt/locale/bitcoin_pt_BR.ts",
        "status": "modified",
        "additions": 24,
        "deletions": 16,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7179e7ca0db493dccbfd88f64738252844aab6ff/src/qt/locale/bitcoin_pt_BR.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7179e7ca0db493dccbfd88f64738252844aab6ff/src/qt/locale/bitcoin_pt_BR.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_pt_BR.ts?ref=7179e7ca0db493dccbfd88f64738252844aab6ff",
        "patch": "@@ -23,7 +23,7 @@\n     </message>\n     <message>\n         <source>C&amp;lose</source>\n-        <translation>Fechar</translation>\n+        <translation>&amp;Fechar</translation>\n     </message>\n     <message>\n         <source>Delete the currently selected address from the list</source>\n@@ -39,7 +39,7 @@\n     </message>\n     <message>\n         <source>&amp;Delete</source>\n-        <translation>&amp;Excluir</translation>\n+        <translation>E&amp;xcluir</translation>\n     </message>\n     <message>\n         <source>Choose the address to send coins to</source>\n@@ -102,15 +102,15 @@\n     <name>AddressTableModel</name>\n     <message>\n         <source>Label</source>\n-        <translation>R\u00f3tuo</translation>\n+        <translation>R\u00f3tulo</translation>\n     </message>\n     <message>\n         <source>Address</source>\n         <translation>Endere\u00e7o</translation>\n     </message>\n     <message>\n         <source>(no label)</source>\n-        <translation>(sem r\u00f3tuo)</translation>\n+        <translation>(sem r\u00f3tulo)</translation>\n     </message>\n </context>\n <context>\n@@ -231,7 +231,7 @@\n     <name>BitcoinGUI</name>\n     <message>\n         <source>Sign &amp;message...</source>\n-        <translation>&amp;Assinar mensagem...</translation>\n+        <translation>Assinar &amp;mensagem...</translation>\n     </message>\n     <message>\n         <source>Synchronizing with network...</source>\n@@ -375,7 +375,7 @@\n     </message>\n     <message>\n         <source>&amp;Show / Hide</source>\n-        <translation>&amp;Exibir/Ocultar</translation>\n+        <translation>&amp;Exibir / Ocultar</translation>\n     </message>\n     <message>\n         <source>Show or hide the main Window</source>\n@@ -479,7 +479,7 @@\n     </message>\n     <message>\n         <source>%1 client</source>\n-        <translation>%1</translation>\n+        <translation>%1 cliente</translation>\n     </message>\n     <message>\n         <source>Connecting to peers...</source>\n@@ -688,7 +688,7 @@\n     </message>\n     <message>\n         <source>(no label)</source>\n-        <translation>(sem r\u00f3tuo)</translation>\n+        <translation>(sem r\u00f3tulo)</translation>\n     </message>\n     <message>\n         <source>change from %1 (%2)</source>\n@@ -1360,6 +1360,10 @@\n         <source>Node/Service</source>\n         <translation>N\u00f3/Servi\u00e7o</translation>\n     </message>\n+    <message>\n+        <source>NodeId</source>\n+        <translation>ID do n\u00f3</translation>\n+    </message>\n     <message>\n         <source>Ping</source>\n         <translation>Ping</translation>\n@@ -1900,7 +1904,7 @@\n     </message>\n     <message>\n         <source>Label</source>\n-        <translation>R\u00f3tuo</translation>\n+        <translation>R\u00f3tulo</translation>\n     </message>\n     <message>\n         <source>Message</source>\n@@ -1923,15 +1927,15 @@\n     </message>\n     <message>\n         <source>Label</source>\n-        <translation>R\u00f3tuo</translation>\n+        <translation>R\u00f3tulo</translation>\n     </message>\n     <message>\n         <source>Message</source>\n         <translation>Mensagem</translation>\n     </message>\n     <message>\n         <source>(no label)</source>\n-        <translation>(sem r\u00f3tuo)</translation>\n+        <translation>(sem r\u00f3tulo)</translation>\n     </message>\n     <message>\n         <source>(no message)</source>\n@@ -2210,7 +2214,7 @@\n     </message>\n     <message>\n         <source>(no label)</source>\n-        <translation>(sem r\u00f3tuo)</translation>\n+        <translation>(sem r\u00f3tulo)</translation>\n     </message>\n </context>\n <context>\n@@ -2665,7 +2669,7 @@\n     </message>\n     <message>\n         <source>Label</source>\n-        <translation>R\u00f3tuo</translation>\n+        <translation>R\u00f3tulo</translation>\n     </message>\n     <message numerus=\"yes\">\n         <source>Open for %n more block(s)</source>\n@@ -2741,7 +2745,7 @@\n     </message>\n     <message>\n         <source>(no label)</source>\n-        <translation>(sem r\u00f3tuo)</translation>\n+        <translation>(sem r\u00f3tulo)</translation>\n     </message>\n     <message>\n         <source>Transaction status. Hover over this field to show number of confirmations.</source>\n@@ -2888,7 +2892,7 @@\n     </message>\n     <message>\n         <source>Label</source>\n-        <translation>R\u00f3tuo</translation>\n+        <translation>R\u00f3tulo</translation>\n     </message>\n     <message>\n         <source>Address</source>\n@@ -3797,6 +3801,10 @@\n         <source>Relay non-P2SH multisig (default: %u)</source>\n         <translation>Retransmitir P2SH n\u00e3o multisig (padr\u00e3o: %u)</translation>\n     </message>\n+    <message>\n+        <source>Send transactions with full-RBF opt-in enabled (default: %u)</source>\n+        <translation>Ativar op\u00e7\u00e3o full-RBF nas transa\u00e7\u00f5es enviadas (padr\u00e3o: %u)</translation>\n+    </message>\n     <message>\n         <source>Set key pool size to &lt;n&gt; (default: %u)</source>\n         <translation>Defina o tamanho da chave para piscina&lt;n&gt; (padr\u00e3o: %u)</translation>\n@@ -3819,7 +3827,7 @@\n     </message>\n     <message>\n         <source>Specify pid file (default: %s)</source>\n-        <translation>Especificar aqrquivo pid (padr\u00e3o: %s)</translation>\n+        <translation>Especificar arquivo pid (padr\u00e3o: %s)</translation>\n     </message>\n     <message>\n         <source>Spend unconfirmed change when sending transactions (default: %u)</source>"
      },
      {
        "sha": "2de0d14ddd24bdc6adddf6d72c0d47729159291f",
        "filename": "src/qt/locale/bitcoin_tr.ts",
        "status": "modified",
        "additions": 1406,
        "deletions": 202,
        "changes": 1608,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7179e7ca0db493dccbfd88f64738252844aab6ff/src/qt/locale/bitcoin_tr.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7179e7ca0db493dccbfd88f64738252844aab6ff/src/qt/locale/bitcoin_tr.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_tr.ts?ref=7179e7ca0db493dccbfd88f64738252844aab6ff"
      },
      {
        "sha": "20875c232722ac12e09037eafbc3d74e3942b401",
        "filename": "src/qt/locale/bitcoin_zh_CN.ts",
        "status": "modified",
        "additions": 25,
        "deletions": 1,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7179e7ca0db493dccbfd88f64738252844aab6ff/src/qt/locale/bitcoin_zh_CN.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7179e7ca0db493dccbfd88f64738252844aab6ff/src/qt/locale/bitcoin_zh_CN.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_zh_CN.ts?ref=7179e7ca0db493dccbfd88f64738252844aab6ff",
        "patch": "@@ -481,6 +481,10 @@\n         <source>%1 client</source>\n         <translation>%1 \u5ba2\u6236</translation>\n     </message>\n+    <message>\n+        <source>Connecting to peers...</source>\n+        <translation>\u6b63\u5728\u8fde\u63a5\u5230\u8282\u70b9\u2026\u2026</translation>\n+    </message>\n     <message>\n         <source>Catching up...</source>\n         <translation>\u66f4\u65b0\u4e2d...</translation>\n@@ -1927,7 +1931,11 @@\n         <source>(no amount requested)</source>\n         <translation>\uff08\u65e0\u8bf7\u6c42\u91d1\u989d\uff09</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>Requested</source>\n+        <translation>\u603b\u989d</translation>\n+    </message>\n+</context>\n <context>\n     <name>SendCoinsDialog</name>\n     <message>\n@@ -2178,6 +2186,10 @@\n         <source>Warning: Unknown change address</source>\n         <translation>\u8b66\u544a\uff1a\u672a\u77e5\u7684\u66f4\u6539\u5730\u5740</translation>\n     </message>\n+    <message>\n+        <source>The address you selected for change is not part of this wallet. Any or all funds in your wallet may be sent to this address. Are you sure?</source>\n+        <translation>\u4f60\u9009\u62e9\u7684\u627e\u96f6\u5730\u5740\u672a\u88ab\u5305\u542b\u5728\u672c\u94b1\u5305\u4e2d\uff0c\u4f60\u94b1\u5305\u4e2d\u7684\u90e8\u5206\u6216\u5168\u90e8\u91d1\u989d\u5c06\u88ab\u53d1\u9001\u81f3\u8be5\u5730\u5740\u3002\u4f60\u786e\u5b9a\u8981\u8fd9\u6837\u505a\u5417\uff1f</translation>\n+    </message>\n     <message>\n         <source>(no label)</source>\n         <translation>(\u65e0\u6807\u7b7e)</translation>\n@@ -2459,6 +2471,14 @@\n         <source>0/unconfirmed, %1</source>\n         <translation>0/\u672a\u786e\u8ba4\uff0c%1</translation>\n     </message>\n+    <message>\n+        <source>in memory pool</source>\n+        <translation>\u5728\u5185\u5b58\u6c60\u4e2d</translation>\n+    </message>\n+    <message>\n+        <source>not in memory pool</source>\n+        <translation>\u4e0d\u5728\u5185\u5b58\u6c60\u4e2d</translation>\n+    </message>\n     <message>\n         <source>abandoned</source>\n         <translation>\u5df2\u629b\u5f03</translation>\n@@ -3200,6 +3220,10 @@\n         <source>Use UPnP to map the listening port (default: %u)</source>\n         <translation>\u4f7f\u7528UPnp\u6620\u5c04\u76d1\u542c\u7aef\u53e3 (\u9ed8\u8ba4: %u) </translation>\n     </message>\n+    <message>\n+        <source>Use the test chain</source>\n+        <translation>\u4f7f\u7528\u6d4b\u8bd5\u94fe</translation>\n+    </message>\n     <message>\n         <source>User Agent comment (%s) contains unsafe characters.</source>\n         <translation>\u7528\u6237\u4ee3\u7406\u8bc4\u8bba(%s)\u5305\u542b\u4e0d\u5b89\u5168\u7684\u5b57\u7b26\u3002</translation>"
      }
    ]
  },
  {
    "sha": "4dfac2c95084dd0bcf0d7d5dc2e9d60f027a7be4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZGZhYzJjOTUwODRkZDBiY2YwZDdkNWRjMmU5ZDYwZjAyN2E3YmU0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-10T09:16:14Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-10T09:29:09Z"
      },
      "message": "Update seeds tooling to Python 3\n\nAll the other tooling scripts require Python 3, it makes sense to do so\nhere too.\n\nAlso document the dependency on python3-dnspython.",
      "tree": {
        "sha": "066630f819c0c0e9ac20eb45330efac24bb93008",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/066630f819c0c0e9ac20eb45330efac24bb93008"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4dfac2c95084dd0bcf0d7d5dc2e9d60f027a7be4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4dfac2c95084dd0bcf0d7d5dc2e9d60f027a7be4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4dfac2c95084dd0bcf0d7d5dc2e9d60f027a7be4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4dfac2c95084dd0bcf0d7d5dc2e9d60f027a7be4/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "33f3b21407a38faaaee2d72d16e8eb340fe74657",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33f3b21407a38faaaee2d72d16e8eb340fe74657",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/33f3b21407a38faaaee2d72d16e8eb340fe74657"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 18,
      "deletions": 13
    },
    "files": [
      {
        "sha": "aa97dafdb57b599809085cd744e78c2552c38a37",
        "filename": "contrib/seeds/README.md",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4dfac2c95084dd0bcf0d7d5dc2e9d60f027a7be4/contrib/seeds/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4dfac2c95084dd0bcf0d7d5dc2e9d60f027a7be4/contrib/seeds/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/README.md?ref=4dfac2c95084dd0bcf0d7d5dc2e9d60f027a7be4",
        "patch": "@@ -1,11 +1,16 @@\n-### Seeds ###\n+# Seeds\n \n Utility to generate the seeds.txt list that is compiled into the client\n (see [src/chainparamsseeds.h](/src/chainparamsseeds.h) and other utilities in [contrib/seeds](/contrib/seeds)).\n \n The seeds compiled into the release are created from sipa's DNS seed data, like this:\n \n     curl -s http://bitcoin.sipa.be/seeds.txt > seeds_main.txt\n-    python makeseeds.py < seeds_main.txt > nodes_main.txt\n-    python generate-seeds.py . > ../../src/chainparamsseeds.h\n+    python3 makeseeds.py < seeds_main.txt > nodes_main.txt\n+    python3 generate-seeds.py . > ../../src/chainparamsseeds.h\n \n+## Dependencies\n+\n+Ubuntu:\n+\n+    sudo apt-get install python3-dnspython"
      },
      {
        "sha": "b0ac92ae0363902b9698ec169040d851bfb6a558",
        "filename": "contrib/seeds/generate-seeds.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4dfac2c95084dd0bcf0d7d5dc2e9d60f027a7be4/contrib/seeds/generate-seeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4dfac2c95084dd0bcf0d7d5dc2e9d60f027a7be4/contrib/seeds/generate-seeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/generate-seeds.py?ref=4dfac2c95084dd0bcf0d7d5dc2e9d60f027a7be4",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python\n-# Copyright (c) 2014 Wladimir J. van der Laan\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2017 Wladimir J. van der Laan\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n '''\n@@ -31,7 +31,7 @@\n \n These should be pasted into `src/chainparamsseeds.h`.\n '''\n-from __future__ import print_function, division\n+\n from base64 import b32decode\n from binascii import a2b_hex\n import sys, os"
      },
      {
        "sha": "33fbb5851e739ccb0a4bcc8368081317ed2d7a0c",
        "filename": "contrib/seeds/makeseeds.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4dfac2c95084dd0bcf0d7d5dc2e9d60f027a7be4/contrib/seeds/makeseeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4dfac2c95084dd0bcf0d7d5dc2e9d60f027a7be4/contrib/seeds/makeseeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/makeseeds.py?ref=4dfac2c95084dd0bcf0d7d5dc2e9d60f027a7be4",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python\n-# Copyright (c) 2013-2016 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2013-2017 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #\n@@ -14,13 +14,13 @@\n \n # These are hosts that have been observed to be behaving strangely (e.g.\n # aggressively connecting to every node).\n-SUSPICIOUS_HOSTS = set([\n+SUSPICIOUS_HOSTS = {\n     \"130.211.129.106\", \"178.63.107.226\",\n     \"83.81.130.26\", \"88.198.17.7\", \"148.251.238.178\", \"176.9.46.6\",\n     \"54.173.72.127\", \"54.174.10.182\", \"54.183.64.54\", \"54.194.231.211\",\n     \"54.66.214.167\", \"54.66.220.137\", \"54.67.33.14\", \"54.77.251.214\",\n     \"54.94.195.96\", \"54.94.200.247\"\n-])\n+}\n \n import re\n import sys\n@@ -104,7 +104,7 @@ def filtermultiport(ips):\n     hist = collections.defaultdict(list)\n     for ip in ips:\n         hist[ip['sortkey']].append(ip)\n-    return [value[0] for (key,value) in hist.items() if len(value)==1]\n+    return [value[0] for (key,value) in list(hist.items()) if len(value)==1]\n \n # Based on Greg Maxwell's seed_filter.py\n def filterbyasn(ips, max_per_asn, max_total):\n@@ -164,9 +164,9 @@ def main():\n \n     for ip in ips:\n         if ip['net'] == 'ipv6':\n-            print '[%s]:%i' % (ip['ip'], ip['port'])\n+            print('[%s]:%i' % (ip['ip'], ip['port']))\n         else:\n-            print '%s:%i' % (ip['ip'], ip['port'])\n+            print('%s:%i' % (ip['ip'], ip['port']))\n \n if __name__ == '__main__':\n     main()"
      }
    ]
  },
  {
    "sha": "bfa9393c06decdcb679f82350102863f0b4ca7a8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZmE5MzkzYzA2ZGVjZGNiNjc5ZjgyMzUwMTAyODYzZjBiNGNhN2E4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-10T09:58:17Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-10T10:04:33Z"
      },
      "message": "contrib/seeds: Update PATTERN_AGENT\n\ngmaxwell: Adds the newest versions, drops everything multiple softforks ago.",
      "tree": {
        "sha": "e2c559f98e81b681ee885d915f5fc6317ccce3bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e2c559f98e81b681ee885d915f5fc6317ccce3bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bfa9393c06decdcb679f82350102863f0b4ca7a8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfa9393c06decdcb679f82350102863f0b4ca7a8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bfa9393c06decdcb679f82350102863f0b4ca7a8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfa9393c06decdcb679f82350102863f0b4ca7a8/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4dfac2c95084dd0bcf0d7d5dc2e9d60f027a7be4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4dfac2c95084dd0bcf0d7d5dc2e9d60f027a7be4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4dfac2c95084dd0bcf0d7d5dc2e9d60f027a7be4"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "afe902fd7f0630380a727270bcfe759fdbbd4dd5",
        "filename": "contrib/seeds/README.md",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9393c06decdcb679f82350102863f0b4ca7a8/contrib/seeds/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9393c06decdcb679f82350102863f0b4ca7a8/contrib/seeds/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/README.md?ref=bfa9393c06decdcb679f82350102863f0b4ca7a8",
        "patch": "@@ -3,6 +3,9 @@\n Utility to generate the seeds.txt list that is compiled into the client\n (see [src/chainparamsseeds.h](/src/chainparamsseeds.h) and other utilities in [contrib/seeds](/contrib/seeds)).\n \n+Be sure to update `PATTERN_AGENT` in `makeseeds.py` to include the current version,\n+and remove old versions as necessary.\n+\n The seeds compiled into the release are created from sipa's DNS seed data, like this:\n \n     curl -s http://bitcoin.sipa.be/seeds.txt > seeds_main.txt"
      },
      {
        "sha": "34f0f576716ed1f1c5bb166477f8df3174ee59f9",
        "filename": "contrib/seeds/makeseeds.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9393c06decdcb679f82350102863f0b4ca7a8/contrib/seeds/makeseeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9393c06decdcb679f82350102863f0b4ca7a8/contrib/seeds/makeseeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/makeseeds.py?ref=bfa9393c06decdcb679f82350102863f0b4ca7a8",
        "patch": "@@ -30,7 +30,7 @@\n PATTERN_IPV4 = re.compile(r\"^((\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})):(\\d+)$\")\n PATTERN_IPV6 = re.compile(r\"^\\[([0-9a-z:]+)\\]:(\\d+)$\")\n PATTERN_ONION = re.compile(r\"^([abcdefghijklmnopqrstuvwxyz234567]{16}\\.onion):(\\d+)$\")\n-PATTERN_AGENT = re.compile(r\"^(\\/Satoshi:0\\.8\\.6\\/|\\/Satoshi:0\\.9\\.(2|3|4|5)\\/|\\/Satoshi:0\\.10\\.\\d{1,2}\\/|\\/Satoshi:0\\.11\\.\\d{1,2}\\/)$\")\n+PATTERN_AGENT = re.compile(r\"^(/Satoshi:0.12.(0|1|99)/|/Satoshi:0.13.(0|1|2|99)/)$\")\n \n def parseline(line):\n     sline = line.split()"
      }
    ]
  },
  {
    "sha": "a60677e394faf57968be57e44ece127c3bb6881f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNjA2NzdlMzk0ZmFmNTc5NjhiZTU3ZTQ0ZWNlMTI3YzNiYjY4ODFm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-10T09:29:13Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-10T10:04:34Z"
      },
      "message": "Pre-0.14.0 hardcoded seeds update",
      "tree": {
        "sha": "ed45a583362e013cf005459e701a818ddbdf6563",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ed45a583362e013cf005459e701a818ddbdf6563"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a60677e394faf57968be57e44ece127c3bb6881f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a60677e394faf57968be57e44ece127c3bb6881f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a60677e394faf57968be57e44ece127c3bb6881f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a60677e394faf57968be57e44ece127c3bb6881f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bfa9393c06decdcb679f82350102863f0b4ca7a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfa9393c06decdcb679f82350102863f0b4ca7a8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bfa9393c06decdcb679f82350102863f0b4ca7a8"
      }
    ],
    "stats": {
      "total": 3662,
      "additions": 2062,
      "deletions": 1600
    },
    "files": [
      {
        "sha": "0451771daed4597c0a7b76e4a8a78fd603ee2a1b",
        "filename": "contrib/seeds/nodes_main.txt",
        "status": "modified",
        "additions": 1031,
        "deletions": 800,
        "changes": 1831,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a60677e394faf57968be57e44ece127c3bb6881f/contrib/seeds/nodes_main.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a60677e394faf57968be57e44ece127c3bb6881f/contrib/seeds/nodes_main.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/nodes_main.txt?ref=a60677e394faf57968be57e44ece127c3bb6881f",
        "patch": "@@ -1,937 +1,1168 @@\n-5.2.145.201:8333\n-5.22.142.214:8333\n-5.53.172.197:8333\n-5.189.161.164:8333\n-5.230.140.166:8333\n-5.231.3.130:8333\n-5.255.80.103:8333\n-14.202.230.49:8333\n-18.85.11.130:8333\n-23.91.97.25:8333\n-23.94.100.122:8333\n-23.95.99.132:8333\n-24.115.8.206:8333\n-24.127.128.191:8333\n-24.154.178.25:8333\n-24.207.103.43:8333\n-24.207.104.105:8333\n-24.210.230.150:8333\n-24.224.18.84:8333\n-24.246.168.106:8333\n-27.254.64.47:8333\n-31.6.71.123:8333\n-31.6.71.124:8333\n-31.14.134.13:8333\n-31.30.36.220:8333\n-31.164.6.104:8333\n+2.7.8.12:8333\n+2.228.70.198:8333\n+5.39.64.7:8333\n+5.45.80.34:38333\n+5.51.160.38:8333\n+5.61.33.33:8333\n+5.61.37.12:8333\n+5.95.80.47:8333\n+5.102.164.173:8333\n+5.175.71.130:8333\n+5.189.165.22:8333\n+5.199.130.228:8333\n+5.228.100.222:8333\n+5.255.64.231:8333\n+13.93.6.133:8333\n+18.85.34.10:8333\n+18.241.0.63:8333\n+23.28.128.65:8333\n+23.248.113.52:8333\n+23.253.151.73:8333\n+24.4.96.121:8333\n+24.69.65.191:8333\n+24.87.8.43:8333\n+24.150.224.110:8333\n+24.227.69.146:8333\n+27.0.235.33:8333\n 31.170.106.203:8333\n-31.185.134.201:8333\n-31.204.128.99:8333\n-31.204.128.219:8333\n-37.1.219.88:8333\n-37.97.132.109:8333\n-37.120.160.55:8333\n+31.184.197.96:8333\n+31.214.240.56:8333\n+37.1.202.134:8333\n+37.18.74.232:8333\n+37.34.48.17:8333\n+37.48.64.140:8333\n+37.97.141.116:8333\n+37.120.164.16:8333\n 37.120.169.123:8333\n-37.139.32.46:8333\n-37.221.163.218:8333\n-38.130.192.72:8333\n-41.75.96.80:8333\n-45.3.0.49:8333\n-45.33.72.185:8333\n-45.33.96.129:8333\n-45.56.4.63:8333\n-45.79.0.127:8333\n-45.79.80.102:8333\n-45.79.97.30:8333\n-45.79.132.219:8333\n-46.21.97.135:8333\n-46.28.205.67:8333\n-46.28.206.188:8333\n-46.29.20.209:8333\n-46.50.234.179:8333\n-46.101.160.168:8333\n-46.166.161.35:8333\n-46.166.161.103:8333\n-46.182.132.100:8333\n-46.218.227.92:8333\n-46.226.109.20:8333\n-46.227.66.132:8333\n-46.227.66.138:8333\n-46.229.165.154:8333\n-46.229.165.155:8333\n+37.143.9.128:8333\n+37.153.172.227:8333\n+37.193.227.16:8333\n+37.205.8.78:8333\n+37.220.0.114:8333\n+37.232.218.199:8333\n+38.140.161.53:8333\n+40.87.70.120:8333\n+41.162.163.93:8333\n+42.2.198.48:8333\n+45.20.67.1:8333\n+45.55.197.77:8333\n+45.56.97.63:8333\n+45.58.38.162:8333\n+45.63.1.33:8333\n+45.79.2.70:8333\n+46.16.240.98:8333\n+46.19.137.74:8333\n+46.28.206.146:8333\n+46.32.252.197:8333\n+46.59.13.59:8333\n+46.59.39.195:8333\n+46.148.16.210:8333\n+46.160.195.121:8333\n+46.166.142.21:8333\n+46.166.160.29:8330\n+46.188.44.20:8333\n 46.229.238.187:8333\n-46.234.104.48:8333\n-46.239.107.74:8333\n-46.244.0.138:8333\n-46.254.72.195:8333\n-50.5.13.44:8333\n-50.7.37.114:8333\n-50.30.37.103:8333\n-50.39.105.60:8333\n-50.106.40.231:8333\n-52.29.0.37:8333\n-52.76.192.246:8333\n-54.152.192.179:8333\n-54.169.64.174:8333\n-54.175.160.22:8333\n-54.199.128.0:8333\n-58.96.171.129:8333\n-58.161.238.57:8333\n-60.251.195.221:8333\n-61.35.225.19:8333\n+46.231.16.149:8333\n+47.88.100.130:8333\n+47.89.192.134:8333\n+47.185.194.160:8333\n+47.189.129.218:8333\n+49.65.2.140:8333\n+50.3.72.129:8333\n+50.31.99.225:8333\n+51.175.33.95:8333\n+52.1.165.219:8333\n+52.10.170.186:8333\n+52.51.128.216:8333\n+54.197.130.244:8333\n+58.59.2.22:8333\n+58.84.6.81:8333\n+59.125.8.143:8333\n+59.167.130.139:8333\n+61.47.2.20:8333\n 62.43.130.178:8333\n-62.65.39.12:8333\n+62.76.96.6:8333\n 62.107.200.30:8333\n+62.133.15.58:8333\n 62.133.194.2:8333\n-62.181.238.186:8333\n-62.183.22.50:8333\n-62.210.85.120:8333\n-62.210.162.89:8333\n+62.133.194.156:8333\n+62.138.1.95:8333\n+62.216.238.3:8333\n 62.238.34.125:8333\n-64.25.171.73:8333\n-64.27.166.30:8333\n-64.53.137.101:8333\n-64.71.72.44:8333\n+63.137.40.207:8333\n+63.231.96.109:8333\n+64.78.240.150:8333\n 64.83.225.146:8333\n-64.121.3.163:8333\n-64.203.102.86:8333\n-65.94.131.59:8333\n-65.188.136.233:8333\n-66.11.162.218:8333\n-66.23.228.133:8333\n-66.90.137.89:8333\n-66.114.33.49:8333\n-66.150.105.77:8333\n+64.137.236.68:8833\n+64.156.193.120:8333\n+66.79.160.82:8333\n+66.91.230.231:8333\n+66.135.128.121:8333\n 66.172.10.4:8333\n 66.194.38.250:8333\n 66.194.38.253:8333\n-66.194.38.254:8333\n-66.231.97.172:8333\n+66.215.34.26:8333\n 66.240.237.155:8333\n-67.159.13.34:8333\n-67.205.74.206:8333\n+67.205.96.108:8333\n+67.205.128.5:8333\n+67.219.233.140:8333\n 67.221.193.55:8333\n-67.227.72.17:8333\n-68.65.120.53:8333\n-68.65.205.226:9000\n-68.144.4.34:8333\n-69.39.49.199:8333\n+68.100.196.118:8333\n+68.132.193.222:8333\n+68.168.118.234:8333\n+69.11.97.43:8333\n+69.30.229.10:8333\n 69.50.171.205:8333\n-69.65.41.21:8333\n-69.113.98.61:8333\n-69.119.97.39:8333\n-69.146.70.124:8333\n-69.193.71.2:8333\n-70.46.10.237:8333\n-70.80.200.187:8333\n-70.185.97.117:8333\n-71.254.160.25:8333\n-72.28.203.5:8333\n-72.52.130.110:8333\n-72.83.194.122:8333\n-72.128.32.167:8333\n-72.179.136.80:8333\n-72.235.38.70:8333\n-74.50.44.193:8333\n-74.72.60.83:8333\n-74.80.234.116:8333\n-74.207.233.193:8333\n-75.112.233.128:8333\n-75.118.166.197:8333\n-75.140.0.241:8333\n-75.159.240.66:8333\n-75.174.5.26:8333\n-76.72.160.252:8333\n-76.72.160.254:8333\n-76.74.170.112:8333\n-76.79.201.54:8333\n-76.175.166.164:8333\n-76.179.105.27:8333\n-77.68.37.200:8333\n-77.234.49.196:8333\n-77.247.229.93:8333\n-78.24.72.78:8333\n-78.47.32.147:8333\n-78.84.100.95:8333\n-78.121.69.23:8333\n-78.129.167.5:8333\n-78.193.96.155:8333\n-79.19.37.179:8333\n+69.125.193.145:8333\n+69.162.139.125:8333\n+70.35.98.39:8333\n+70.112.32.29:8333\n+71.126.181.146:8333\n+72.180.32.105:8333\n+73.226.64.145:8333\n+74.83.140.242:8333\n+74.84.128.158:9333\n+74.122.237.124:8333\n+74.215.133.145:8333\n+75.76.101.169:8333\n+75.85.13.8:8333\n+75.86.168.13:8333\n+75.170.97.25:8333\n+75.177.137.134:8333\n+76.76.227.136:8333\n+77.53.136.6:8333\n+77.110.11.52:8333\n+78.25.32.206:8333\n+78.34.8.120:8333\n+78.46.32.99:8333\n+78.56.9.214:8333\n+78.56.229.177:8333\n+78.129.237.245:8333\n+78.196.172.45:8333\n 79.132.230.144:8333\n-79.133.43.63:8333\n-79.134.201.66:8333\n 79.169.35.235:8333\n-80.57.227.14:8333\n+79.172.194.219:8333\n 80.64.65.87:8333\n-80.86.92.70:8333\n-80.100.203.151:8333\n-80.101.32.121:8333\n-80.161.178.73:8333\n-80.240.129.170:8333\n-81.7.11.50:8333\n-81.7.11.55:8333\n-81.17.17.40:9333\n-81.30.39.83:8333\n-81.90.36.7:9444\n-81.136.224.77:8333\n-81.162.231.211:8333\n-81.184.0.143:8333\n-81.198.128.86:8333\n+80.89.137.115:8333\n+80.93.36.173:8333\n+80.101.167.100:8333\n+80.114.34.158:8333\n+80.127.136.50:8333\n+80.188.139.82:8333\n+80.222.39.77:8333\n+80.223.105.69:8333\n+80.229.151.187:8333\n+80.240.129.221:8333\n+81.7.10.238:8333\n+81.7.13.84:8333\n+81.27.96.92:8333\n+81.35.143.98:8333\n+81.82.201.5:8333\n+81.83.96.5:8333\n+81.169.227.36:8333\n+81.171.2.119:8333\n+81.171.38.130:8333\n+81.175.255.118:8333\n+81.207.8.49:8333\n+81.228.194.187:8333\n+82.9.1.77:8333\n 82.11.33.229:8333\n-82.79.128.134:8333\n-82.118.233.111:8333\n-82.135.139.30:8333\n+82.102.13.117:8333\n+82.116.203.240:8333\n+82.130.103.16:8333\n+82.136.65.227:8333\n+82.158.227.238:8333\n+82.197.212.25:8333\n 82.199.102.10:8333\n-82.221.106.17:8333\n-82.221.108.21:8333\n+82.200.204.41:8333\n+82.200.204.119:8333\n+82.221.105.223:8333\n 82.221.108.27:8333\n-83.137.41.3:8333\n-83.142.197.168:8333\n+82.221.111.136:8333\n+82.221.139.97:8333\n+83.137.41.10:8333\n 83.143.130.19:8333\n 83.150.9.196:8333\n-83.183.17.191:8333\n-83.227.173.83:8333\n-83.230.5.15:8333\n-83.233.105.151:443\n-83.246.75.8:8333\n-83.250.133.158:8333\n-83.255.66.118:8334\n-84.24.69.59:8333\n+83.169.2.43:8333\n+83.217.203.130:8333\n+83.249.88.52:8333\n+84.26.162.92:8333\n 84.42.193.6:8333\n-84.45.98.87:8333\n-84.54.128.11:8333\n-84.212.200.24:8333\n-84.215.198.109:8333\n-84.230.4.177:8333\n-85.95.228.83:8333\n-85.95.228.123:8333\n-85.114.128.134:8333\n-85.214.66.168:8333\n-85.214.147.162:8333\n-85.243.168.4:8333\n-86.1.0.18:8333\n-87.79.77.106:8333\n-87.91.156.110:8333\n-87.236.196.222:8333\n-88.85.75.152:8333\n-88.87.1.230:8333\n-88.87.92.102:8333\n-88.89.69.202:8333\n-88.97.72.229:8333\n-88.164.117.99:8333\n-88.198.32.131:8333\n+84.134.194.115:8333\n+84.201.32.115:8333\n+84.212.232.71:8333\n+84.238.140.176:8333\n+85.10.104.34:8333\n+85.21.144.226:8333\n+85.25.194.12:8333\n+85.144.79.190:8333\n+85.145.228.192:8333\n+85.194.238.130:8333\n+85.228.201.80:8333\n+85.229.228.174:8333\n+85.236.233.87:8333\n+86.80.204.185:8333\n+86.105.227.190:8333\n+86.135.39.40:8333\n+87.106.139.127:8333\n+87.120.8.5:8333\n+87.120.37.230:8333\n+87.239.101.102:8333\n+87.243.197.82:8333\n+88.112.112.173:8333\n+88.150.192.17:8333\n+88.185.155.134:8333\n+88.202.202.221:8333\n 88.202.230.87:8333\n-88.214.193.154:8343\n-88.214.194.226:8343\n-89.10.155.88:8333\n-89.46.101.44:8333\n-89.163.224.212:8333\n-89.174.248.20:8333\n-89.202.231.198:8333\n-89.212.75.6:8333\n+88.208.39.182:8333\n+89.34.99.41:8333\n+89.163.224.187:8333\n+89.169.233.150:8333\n+89.184.65.85:8333\n+89.212.91.219:8333\n+89.249.178.36:8333\n 90.149.38.172:8333\n-90.169.106.139:8333\n-91.64.101.150:8333\n-91.65.196.179:8333\n-91.121.80.17:8333\n-91.126.77.77:8333\n-91.145.76.156:8333\n-91.152.150.35:8333\n-91.192.137.17:8333\n-91.196.170.110:8333\n+91.65.97.157:8333\n+91.107.64.143:8333\n+91.114.35.107:8333\n+91.135.0.187:8333\n+91.145.110.95:8333\n+91.157.38.151:8333\n 91.197.44.133:8333\n-91.207.68.144:8333\n-91.210.105.28:8333\n-91.211.102.101:8333\n-91.211.106.34:8333\n-91.214.200.205:8333\n-91.220.43.146:8333\n-91.222.71.89:8333\n-91.224.140.242:8333\n-91.229.76.14:8333\n+91.205.176.54:8333\n+91.206.203.10:8333\n+91.206.203.18:8333\n+91.215.35.130:8333\n+91.219.239.159:8333\n+91.223.133.2:8333\n+91.223.133.40:8333\n+91.226.10.90:8333\n+91.240.141.169:8333\n 92.27.7.209:8333\n-92.51.167.88:8333\n-92.247.229.163:8333\n-93.84.114.106:8333\n-93.113.36.172:8333\n+92.89.67.207:8333\n+92.221.201.138:8333\n+93.95.187.122:8333\n+93.103.73.187:8333\n+93.123.80.47:8333\n 93.188.224.253:8333\n-94.75.239.69:8333\n-94.190.227.112:8333\n-94.214.2.74:8333\n-94.224.162.65:8333\n-94.236.198.253:8333\n+93.190.69.242:8333\n+94.19.12.244:8333\n+94.156.128.116:8333\n+94.177.171.73:8333\n+94.181.44.104:8333\n+94.237.26.173:8333\n 94.242.229.158:8333\n-95.84.138.99:8333\n-95.95.168.87:8333\n+94.255.128.98:8333\n+95.79.35.50:8333\n+95.91.41.39:8333\n 95.110.234.93:8333\n-95.130.9.200:8333\n-95.165.168.168:8333\n-95.170.235.254:8333\n-95.211.130.154:8333\n-96.46.68.104:8333\n-96.127.202.148:8333\n-97.76.171.35:8333\n-98.160.160.67:8333\n-99.126.197.187:8333\n-99.198.173.1:8333\n-101.100.174.138:8333\n-101.164.201.208:8333\n-103.224.165.48:8333\n-104.128.225.223:8333\n+95.128.48.209:8333\n+95.183.48.71:8333\n+96.23.67.85:8333\n+97.64.177.10:8333\n+97.104.201.95:8333\n+98.29.197.149:8333\n+98.169.2.107:8333\n+99.232.48.72:8333\n+101.100.141.55:8333\n+103.7.32.40:8333\n+103.53.225.69:8333\n+103.249.106.74:8333\n+104.128.224.13:8333\n 104.128.228.252:8333\n-104.131.192.94:8333\n-104.155.45.201:8334\n-104.194.28.195:8663\n-104.211.1.27:8333\n-104.221.38.177:8333\n-104.236.9.79:8333\n-104.236.129.178:8333\n-104.236.186.249:8333\n-104.236.194.15:8333\n-104.238.128.214:8333\n+104.155.1.158:8333\n+104.168.128.50:8333\n+104.199.160.228:8333\n+104.204.109.11:8333\n+104.219.251.118:8333\n+104.223.3.129:8333\n+104.223.3.219:8333\n 104.238.130.182:8333\n-106.38.234.84:8333\n-106.185.36.204:8333\n-106.185.38.67:8333\n-107.6.4.145:8333\n-107.150.2.6:8333\n-107.150.40.234:8333\n-107.170.13.184:8333\n-107.181.250.216:8333\n-107.191.101.111:8333\n-107.191.106.115:8333\n+104.245.99.227:8333\n+106.38.234.89:8333\n+106.104.134.218:8333\n+107.136.6.71:8333\n+107.150.45.210:8333\n+107.151.144.103:8333\n+107.170.44.99:8333\n+107.181.137.133:8333\n+107.191.102.13:8333\n+108.58.252.82:8333\n+108.59.9.167:8333\n 108.59.12.163:8333\n-108.161.129.247:8333\n-109.193.160.140:8333\n-109.197.13.54:8333\n-109.230.7.248:8333\n-109.234.106.191:8333\n-109.236.137.80:8333\n-109.251.161.121:8333\n-112.65.231.226:8333\n-115.70.166.57:8333\n-115.159.42.80:8333\n-117.18.73.34:8333\n-118.67.201.40:8333\n-118.100.86.246:8333\n-118.110.104.152:8333\n-119.224.64.141:8333\n+108.162.106.215:8333\n+108.168.133.164:8333\n+108.173.202.101:8333\n+108.180.110.190:8333\n+109.29.75.40:8333\n+109.120.194.136:8333\n+109.230.230.88:8333\n+109.235.67.115:8333\n+109.235.69.120:8333\n+109.236.90.199:8333\n+109.255.0.107:8333\n+110.10.130.12:8333\n+110.10.176.94:8333\n+110.132.172.251:8333\n+111.90.158.17:8333\n+115.66.205.171:8333\n+116.31.123.139:8333\n+118.192.48.46:8333\n+118.193.164.98:8333\n+119.29.156.231:8333\n+119.63.44.133:19980\n+119.81.99.27:8333\n+119.106.12.169:8333\n+119.147.137.155:19980\n+119.185.1.182:8333\n 120.55.193.136:8333\n-122.106.169.178:8333\n-123.203.174.15:8333\n-123.255.232.94:8333\n-124.148.165.165:8333\n-124.232.141.31:8333\n-128.30.92.69:8333\n-128.39.141.182:8333\n-128.84.167.20:8333\n-128.111.73.10:8333\n-128.127.38.195:8333\n+121.254.173.23:8333\n+121.254.173.40:8333\n+123.56.129.45:8333\n+123.203.163.128:8333\n+123.206.32.198:8333\n+124.189.160.221:8333\n+124.189.192.232:8333\n 128.140.224.162:8333\n-128.199.101.104:8333\n-128.233.224.35:8333\n-128.253.3.193:20020\n-130.180.228.138:8333\n-130.185.144.213:8333\n-130.255.73.207:8333\n-133.218.233.11:8333\n-134.249.128.23:8333\n-136.159.234.234:8333\n-137.116.160.176:8333\n-139.162.2.145:8333\n-139.162.23.117:8333\n-141.134.69.253:8333\n-141.255.162.215:8333\n-144.122.163.187:8333\n-145.131.3.54:8333\n-145.255.4.94:8333\n-146.0.32.101:8337\n-147.83.72.91:8333\n-148.103.28.68:8333\n-149.5.32.102:8333\n-149.210.164.195:8333\n-150.101.163.241:8333\n-151.236.11.189:8333\n-152.3.136.56:8333\n-154.20.208.25:8333\n-158.181.104.149:8333\n-159.253.96.226:8333\n-160.36.130.180:8333\n+128.199.68.205:8333\n+130.234.207.115:8333\n+131.113.41.123:8333\n+131.114.72.104:8333\n+132.204.108.155:8333\n+134.119.13.230:8333\n+134.213.133.206:8333\n+134.213.133.207:8333\n+135.23.5.3:8333\n+137.74.0.66:8333\n+138.68.1.45:8333\n+138.68.2.194:8333\n+138.68.64.19:8333\n+138.68.64.28:8333\n+139.59.42.248:8333\n+139.220.240.153:8333\n+140.112.107.118:8333\n+140.186.224.112:8333\n+141.52.64.141:8333\n+142.68.237.107:8333\n+142.217.12.106:8333\n+146.60.204.92:8333\n+146.185.161.209:8333\n+148.103.7.119:8333\n+149.210.133.244:8333\n+150.229.0.143:8333\n+151.231.238.25:8333\n+151.248.160.227:8333\n+153.230.228.15:8333\n+155.133.43.249:8333\n+158.58.238.145:8333\n+158.109.79.13:34821\n+159.203.70.208:8333\n+160.16.206.31:8333\n 162.209.1.233:8333\n 162.209.4.125:8333\n-162.209.106.123:8333\n-162.210.198.184:8333\n-162.248.99.164:53011\n+162.216.192.231:8333\n+162.243.100.111:8333\n+162.246.11.194:8333\n 162.248.102.117:8333\n-162.251.108.53:8333\n-163.44.2.48:8333\n-163.158.36.17:8333\n-166.230.71.67:8333\n-167.160.36.62:8333\n-167.160.169.92:8333\n-168.93.129.220:8333\n-169.55.99.84:8333\n-169.228.66.43:8333\n-172.9.169.242:8333\n-173.32.11.194:8333\n-173.230.228.136:8333\n-173.246.107.34:8333\n-173.254.235.34:8333\n-174.0.128.222:8333\n-174.25.130.148:8333\n-174.50.64.101:8333\n-175.140.232.141:8333\n-176.36.37.62:8333\n-176.46.9.96:8333\n-176.124.110.27:8333\n-177.39.16.102:8333\n-178.17.173.2:8333\n-178.62.5.248:8333\n-178.62.70.16:8333\n+162.252.46.83:8333\n+163.172.33.78:8333\n+163.172.194.30:8333\n+169.229.198.106:8333\n+170.75.195.168:8333\n+172.103.205.197:8333\n+172.245.225.126:8333\n+173.179.37.8:8333\n+173.208.203.74:8333\n+173.252.46.16:8333\n+174.117.141.124:8333\n+175.126.38.158:8333\n+175.126.38.177:8333\n+175.139.106.119:8333\n+175.140.232.66:8333\n+176.9.117.100:8333\n+176.36.33.121:8333\n+176.36.99.222:8333\n+176.56.227.36:8333\n+176.100.100.206:8333\n+176.106.144.183:8333\n+176.123.7.148:8333\n+176.126.167.10:8333\n+176.223.201.198:8333\n+178.62.68.62:8333\n+178.62.102.56:8333\n 178.62.203.185:8333\n-178.79.160.118:8333\n-178.169.206.244:8333\n-178.193.234.62:8333\n-178.199.96.108:8333\n-178.254.18.96:8333\n+178.124.197.101:8333\n+178.170.138.202:8333\n+178.175.129.18:8333\n+178.188.47.62:8333\n+178.199.240.22:8333\n+178.218.209.162:8333\n+178.237.35.34:8333\n+178.238.224.242:8333\n+178.254.34.144:8333\n 178.254.34.161:8333\n-178.255.41.123:8333\n-180.210.34.58:9801\n-182.92.226.212:8333\n-182.171.246.142:8333\n-184.23.8.9:8333\n-184.58.162.35:8333\n-184.154.9.170:8333\n-185.8.238.165:8333\n+179.43.183.2:8333\n+180.200.128.58:8333\n+182.93.34.130:8333\n+185.8.238.197:8333\n+185.11.139.172:8333\n 185.24.97.11:8333\n-185.31.137.139:8333\n-185.38.44.64:8333\n-185.53.128.180:8333\n-185.53.129.244:8333\n-185.77.129.119:8333\n-185.77.129.156:8333\n-185.82.203.92:8333\n-188.20.97.18:8333\n-188.126.8.14:8333\n-188.138.33.239:8333\n-188.155.136.70:8333\n+185.24.233.100:8333\n+185.25.48.71:8333\n+185.25.48.114:8333\n+185.28.76.179:8333\n+185.70.105.152:8339\n+185.77.128.69:8333\n+185.77.128.241:8333\n+185.86.79.87:8333\n+185.89.102.2:3333\n+185.89.102.53:3333\n+185.109.144.155:8333\n+185.117.75.50:8333\n+185.121.173.223:8333\n+185.128.41.157:8333\n+185.130.226.106:8333\n+185.145.130.76:8333\n+188.63.192.104:8333\n+188.113.164.231:8333\n 188.166.229.112:8333\n-188.182.108.129:8333\n-188.226.225.174:8010\n-188.242.171.8:8333\n-188.243.4.139:8333\n-190.10.9.234:8333\n-190.10.10.147:8333\n+188.214.128.77:8333\n+190.10.8.211:8333\n 190.81.160.184:8333\n-190.85.201.37:8333\n-192.34.227.230:8333\n-192.77.189.200:8333\n-192.124.224.7:8333\n-192.146.137.1:8333\n-192.203.228.71:8333\n-192.206.202.20:8333\n-193.0.109.3:8333\n-193.41.229.130:8333\n-193.41.229.156:8333\n+190.111.231.19:8333\n+192.131.44.93:8333\n+192.206.202.6:8333\n+192.227.245.133:8333\n+192.241.74.123:8333\n+192.241.74.126:8333\n+192.254.71.222:8333\n+193.10.64.85:8333\n+193.46.80.101:8333\n 193.49.43.219:8333\n-193.147.71.120:8333\n-193.179.65.233:8333\n+193.93.79.215:8333\n 193.183.99.46:8333\n-193.192.37.135:8333\n 193.234.224.195:8333\n-194.58.108.213:8333\n-194.187.96.2:8333\n-194.255.31.59:8333\n-195.36.6.101:8333\n-195.58.238.243:8333\n-195.197.175.190:8333\n-195.239.1.66:8333\n-198.48.196.230:8333\n-198.50.192.160:8333\n-198.57.210.27:8333\n-198.84.195.179:8333\n-198.167.140.8:8333\n+193.239.80.155:8333\n+194.63.140.208:8333\n+194.87.1.232:8333\n+194.187.227.18:8333\n+194.247.12.136:8333\n+195.91.176.86:8333\n+196.28.98.20:8333\n+198.44.249.35:8333\n+198.84.172.252:8333\n 198.204.224.106:8333\n-199.127.226.245:8333\n-199.201.110.8:8333\n-199.233.234.90:8333\n+198.211.97.46:8333\n+199.66.64.198:8333\n+199.101.100.58:8333\n+199.101.100.59:8333\n+199.127.224.50:8333\n+200.46.241.71:8333\n 200.116.98.185:8333\n-202.60.70.18:8333\n-203.151.140.14:8333\n-204.112.203.52:8333\n+203.9.225.13:8333\n+203.177.142.37:8333\n 205.200.247.149:8333\n-207.226.141.253:8333\n-207.255.42.202:8333\n-208.53.164.19:8333\n-208.66.68.127:8333\n-208.66.68.130:8333\n-208.71.171.232:8341\n-208.76.200.200:8333\n-208.82.98.189:8333\n-208.85.193.31:8333\n-208.111.48.41:8333\n-208.111.48.45:8333\n-209.34.232.72:8333\n-209.81.9.223:8333\n-209.90.224.2:8333\n+205.209.131.150:13838\n+206.53.64.74:8333\n+206.72.192.69:8333\n+206.123.112.180:8333\n+208.66.208.153:8333\n+208.68.174.76:8333\n+208.107.97.242:8333\n+208.111.48.132:8333\n+208.118.235.190:8333\n+209.6.205.126:8333\n+209.40.96.121:8333\n+209.58.130.137:8333\n+209.73.142.226:8333\n 209.90.224.4:8333\n-209.126.98.174:8333\n-209.136.72.69:8333\n-209.195.4.74:8333\n-209.197.13.62:8333\n-211.72.227.8:8333\n-212.51.144.42:8333\n-212.71.233.127:8333\n-212.126.14.122:8333\n-212.159.44.50:8333\n-213.5.36.58:8333\n-213.57.33.10:8333\n-213.66.205.194:8333\n-213.136.73.125:8333\n-213.155.3.216:8333\n-213.155.7.24:8333\n-213.167.17.6:8333\n-213.223.138.13:8333\n-216.15.78.182:8333\n-216.38.129.164:8333\n-216.48.168.8:8333\n-216.169.141.169:8333\n-216.245.206.181:8333\n-216.249.204.161:8333\n-216.250.138.230:8333\n+209.126.69.243:8333\n+209.126.108.91:8333\n+209.195.4.18:8333\n+209.250.6.190:8333\n+210.54.37.225:8333\n+210.223.3.44:8333\n+211.149.234.109:8333\n+212.51.140.183:8333\n+212.90.179.206:8333\n+212.93.226.90:8333\n+212.110.171.118:8333\n+212.202.132.17:8333\n+213.91.205.134:8333\n+213.165.68.218:8333\n+213.196.200.213:8333\n+216.59.4.212:8333\n+216.74.32.109:8333\n+216.158.225.70:8333\n+216.164.138.13:8333\n+216.167.236.247:8333\n+216.197.79.74:8333\n 217.11.225.189:8333\n-217.12.34.158:8333\n-217.12.202.33:8333\n-217.20.171.43:8333\n-217.23.1.126:8333\n-217.23.11.138:8333\n+217.12.199.207:8333\n+217.20.130.72:8333\n+217.23.6.148:8333\n+217.23.140.103:8333\n+217.28.96.180:8333\n+217.35.130.42:8333\n 217.111.66.79:8333\n-217.155.202.191:8333\n 217.158.9.102:8333\n-217.172.32.18:20993\n-220.245.196.37:8333\n-[2001:1291:2bf:1::100]:8333\n+217.168.143.169:8333\n+217.209.32.219:8333\n+218.161.33.165:8333\n+221.121.144.138:8333\n+[2001:0:4137:9e76:2048:3a84:bb91:e846]:8333\n+[2001:0:4137:9e76:2066:e9e:b489:f8b8]:8333\n+[2001:0:4137:9e76:3854:1211:b5ac:a96b]:8333\n+[2001:0:4137:9e76:4e3:1f66:cd4c:829f]:8333\n+[2001:0:4137:9e76:ad:1f4:9ea9:fa2e]:8333\n+[2001:0:4137:9e76:e5:baa:b66f:f418]:8333\n+[2001:0:53aa:64c:20a2:59c4:ad22:93ea]:8333\n+[2001:0:53aa:64c:59:617f:a10d:e0]:8333\n+[2001:0:5ef5:79fb:200f:3ae5:3cbc:74c9]:8333\n+[2001:0:5ef5:79fb:38f2:13b4:b208:5604]:8333\n+[2001:0:5ef5:79fd:200b:22a7:cc50:f52d]:8333\n+[2001:0:5ef5:79fd:24ef:1aef:a994:303d]:8333\n+[2001:0:5ef5:79fd:24fc:b5d:ad4f:4db2]:8333\n+[2001:0:5ef5:79fd:28bf:2d23:e02e:c3ef]:8333\n+[2001:0:5ef5:79fd:3cd0:3c2e:da44:a759]:8333\n+[2001:0:5ef5:79fd:87e:fd7:b1c2:1b4]:8333\n+[2001:0:9d38:6ab8:18db:3bda:ab90:e81e]:8333\n+[2001:0:9d38:6ab8:4e7:1660:862f:a6d7]:8333\n+[2001:0:9d38:6ab8:6:2b:5074:9588]:8333\n+[2001:0:9d38:6abd:10f8:a7d7:bb90:f524]:8333\n+[2001:13d8:1c01:1000::11]:8333\n+[2001:15c0:65ff:610::2]:8333\n+[2001:1608:10:156:ae::4adb]:8333\n+[2001:1620:b1b:8888:20d:b9ff:fe41:6710]:8333\n+[2001:1620:b1b:face:20d:b9ff:fe41:6710]:8333\n [2001:1620:f00:282::2]:8333\n [2001:1620:f00:8282::1]:8333\n-[2001:19f0:5000:8de8:5400:ff:fe12:55e4]:8333\n-[2001:19f0:6c00:9103:5400:ff:fe10:a8d3]:8333\n-[2001:1b60:3:172:142b:6dff:fe7a:117]:8333\n-[2001:410:a000:4050:8463:90b0:fffb:4e58]:8333\n+[2001:1680:101:1ae::1]:8333\n+[2001:16d8:ff00:85de:20c:29ff:fe52:9594]:8333\n+[2001:19f0:4400:434d:5400:ff:fe42:2678]:8333\n+[2001:19f0:5000:8c8b:5400:ff:fe1f:c023]:8333\n+[2001:19f0:5000:8ce6:5400:ff:fe1b:24a9]:8333\n+[2001:19f0:5:314:5400:ff:fe2c:42e8]:8333\n+[2001:19f0:5:51b:5400:ff:fe49:fe5b]:8333\n+[2001:19f0:5:bc:5400:ff:fe3b:9339]:8333\n+[2001:1af8:4020:a020:5::]:8333\n+[2001:1bc8:1a0:590e:2e0:f4ff:fe16:3a39]:8333\n+[2001:1c04:1401:8f00:f4fe:4fff:fe0c:df40]:8333\n+[2001:4128:6135:10:20c:29ff:fe69:9e81]:8333\n [2001:4128:6135:2010:21e:bff:fee8:a3c0]:8333\n-[2001:41d0:1008:761::17c]:8333\n+[2001:4128:6135:e001:5054:ff:fe37:e9eb]:8333\n+[2001:41d0:1000:1024::]:8333\n+[2001:41d0:1000:1433::]:8333\n+[2001:41d0:1004:22ae::]:8333\n+[2001:41d0:1004:2996::]:8333\n+[2001:41d0:1008:11e0::1a5c:6d9d]:8333\n+[2001:41d0:1008:11e0::b74:baf7]:8333\n+[2001:41d0:1008:237a::]:8333\n+[2001:41d0:1008:2752::]:8333\n+[2001:41d0:1008:494::]:8333\n [2001:41d0:1:45d8::1]:8333\n-[2001:41d0:1:6cd3::]:8333\n+[2001:41d0:1:5630::1]:8333\n+[2001:41d0:1:6f57::1]:8333\n+[2001:41d0:1:801e::1]:8333\n+[2001:41d0:1:8852::1]:8333\n [2001:41d0:1:8b26::1]:8333\n-[2001:41d0:1:afda::]:8200\n+[2001:41d0:1:a5b8::1]:8333\n [2001:41d0:1:b26b::1]:8333\n [2001:41d0:1:c139::1]:8333\n [2001:41d0:1:c8d7::1]:8333\n-[2001:41d0:1:f59f::33]:8333\n-[2001:41d0:1:f7cc::1]:8333\n-[2001:41d0:2:1021::1]:8333\n-[2001:41d0:2:37c3::]:8200\n-[2001:41d0:2:4797:2323:2323:2323:2323]:8333\n-[2001:41d0:2:53df::]:8333\n+[2001:41d0:1:d227::]:8333\n+[2001:41d0:1:dbc4::1]:8333\n+[2001:41d0:1:dc5d::1]:8333\n+[2001:41d0:1:e13b::1]:8333\n+[2001:41d0:1:ef5b::1]:8333\n+[2001:41d0:2:16be::1]:8333\n+[2001:41d0:2:203c::1]:8333\n+[2001:41d0:2:38c5::1]:8333\n+[2001:41d0:2:519::]:8333\n [2001:41d0:2:9c94::1]:8333\n-[2001:41d0:2:9d3e::1]:8333\n-[2001:41d0:2:a24f::]:8333\n-[2001:41d0:2:a35a::]:8333\n-[2001:41d0:2:b2b8::]:8333\n-[2001:41d0:2:c1d9::]:8333\n-[2001:41d0:2:c6e::]:8333\n+[2001:41d0:2:b792::]:8333\n+[2001:41d0:2:bf2a::]:8333\n+[2001:41d0:2:c793::]:8333\n [2001:41d0:2:c9bf::]:8333\n-[2001:41d0:2:f1a5::]:8333\n-[2001:41d0:52:a00::105f]:8333\n-[2001:41d0:52:cff::6f5]:8333\n-[2001:41d0:52:d00::6e2]:8333\n-[2001:41d0:8:3e75::1]:8333\n-[2001:41d0:8:62ab::1]:8333\n+[2001:41d0:303:4f0::]:8333\n+[2001:41d0:8:1a8a::1]:8333\n+[2001:41d0:8:3fa9::1]:8333\n+[2001:41d0:8:4670::1]:8333\n+[2001:41d0:8:4f48::1]:8333\n [2001:41d0:8:6728::]:8333\n-[2001:41d0:8:b30a::1]:8333\n-[2001:41d0:8:bc26::1]:8333\n-[2001:41d0:8:be9a::1]:8333\n-[2001:41d0:8:d984::]:8333\n-[2001:41d0:8:eb8b::]:8333\n-[2001:41d0:a:13a2::1]:8333\n-[2001:41d0:a:2b18::1]:8333\n-[2001:41d0:a:2d14::]:8333\n-[2001:41d0:a:4558::1df2:76d3]:8333\n-[2001:41d0:a:4aaa::]:8333\n-[2001:41d0:a:635b::1]:8333\n-[2001:41d0:a:63d8::1]:8333\n+[2001:41d0:8:72c2:d:242:ac11:2]:8333\n+[2001:41d0:8:8007::]:8333\n+[2001:41d0:8:a71c::]:8333\n+[2001:41d0:8:bccc::1]:8333\n+[2001:41d0:8:bd45::1]:8333\n+[2001:41d0:8:c67c::]:8333\n+[2001:41d0:8:de3d::1]:8333\n+[2001:41d0:8:e257::1]:8333\n+[2001:41d0:8:e3e4::1]:8333\n+[2001:41d0:a:14cc::1]:8333\n+[2001:41d0:a:15b2::1]:8333\n+[2001:41d0:a:1ac9::1]:8333\n+[2001:41d0:a:2496::1]:8333\n+[2001:41d0:a:308c::]:8333\n+[2001:41d0:a:5879::]:8333\n+[2001:41d0:a:6810::1]:8333\n+[2001:41d0:a:682d::1]:8333\n [2001:41d0:a:6c29::1]:8333\n-[2001:41d0:a:f9cd::1]:8333\n-[2001:41d0:d:20a4::]:8333\n+[2001:41d0:a:f52a::1]:8333\n+[2001:41d0:d:111c::]:8333\n+[2001:41d0:e:1388::1]:8333\n [2001:41d0:e:26b::1]:8333\n+[2001:41d0:e:f73::1]:8333\n [2001:41d0:fc8c:a200:7a24:afff:fe9d:c69b]:8333\n+[2001:41f0:61:0:72f3:95ff:fe09:7521]:8333\n [2001:41f0:61::7]:8333\n-[2001:41f0::2]:8333\n-[2001:44b8:41bd:6101:148e:4022:4950:e861]:8333\n-[2001:470:1:2f9:0:1:107a:a301]:8333\n-[2001:470:1f0b:ad6::2]:8333\n-[2001:470:1f11:12d5::ae1:5611]:8333\n+[2001:4428:200:8171:db6:2ff4:9c0e:a2da]:8333\n+[2001:470:1f07:151c:baac:6fff:feb7:3ba9]:8333\n+[2001:470:1f0b:ad6:a60:6eff:fec6:2323]:8333\n+[2001:470:1f11:617::10f]:8333\n+[2001:470:1f14:73e::2]:8333\n [2001:470:1f14:7d::2]:8333\n-[2001:470:27:ce::2]:8333\n+[2001:470:1f15:11f8::10]:8333\n+[2001:470:1f15:1b95:2c3e:8a9a:24e1:7084]:8333\n+[2001:470:1f15:e9b::3ef]:8333\n+[2001:470:1f1d:3a9::10]:8333\n+[2001:470:25:482::2]:8333\n+[2001:470:27:19f::2]:8333\n+[2001:470:27:665::2]:8333\n+[2001:470:28:365::4]:8333\n [2001:470:41:6::2]:8333\n-[2001:470:507d:0:6ab5:99ff:fe73:ac18]:8333\n-[2001:470:583e::2a]:8333\n-[2001:470:5f:5f::232]:8333\n-[2001:470:66:119::2]:8333\n-[2001:470:6c4f::cafe]:8333\n-[2001:470:6f:327:913b:7fe:8545:a4f5]:8333\n-[2001:470:7dda:1::1]:8333\n-[2001:470:95c1::2]:8333\n-[2001:470:b1d0:ffff::1000]:8333\n-[2001:470:d00d:0:3664:a9ff:fe9a:5150]:8333\n-[2001:470:fab7:1::1]:8333\n-[2001:4800:7819:104:be76:4eff:fe05:c828]:8333\n-[2001:4800:7819:104:be76:4eff:fe05:c9a0]:8333\n+[2001:470:727b::11:14]:8333\n+[2001:470:7:2f0::2]:8333\n+[2001:470:7:65::2]:8333\n+[2001:470:7f85::2]:8333\n+[2001:470:8:2e1:5825:39df:3e4c:54a8]:8333\n+[2001:470:8:2e1::43]:8333\n+[2001:470:8:2e1:ae2a:e257:4470:6350]:8333\n+[2001:470:a:c13::2]:8333\n [2001:4801:7819:74:b745:b9d5:ff10:a61a]:8333\n [2001:4801:7819:74:b745:b9d5:ff10:aaec]:8333\n [2001:4801:7828:104:be76:4eff:fe10:1325]:8333\n-[2001:4802:7800:1:be76:4eff:fe20:f023]:8333\n [2001:4802:7800:2:30d7:1775:ff20:1858]:8333\n-[2001:4802:7800:2:be76:4eff:fe20:6c26]:8333\n-[2001:4802:7802:101:be76:4eff:fe20:256]:8333\n-[2001:4802:7802:103:be76:4eff:fe20:2de8]:8333\n-[2001:4830:1100:2e8::2]:8333\n-[2001:4b98:dc2:41:216:3eff:fe56:f659]:8333\n-[2001:4ba0:fffa:5d::93]:8333\n-[2001:4ba0:ffff:1be:1:1005:0:1]:8333\n-[2001:4dd0:ff00:867f::3]:8333\n+[2001:4ba0:babe:832::]:8333\n+[2001:4ba0:cafe:379::1]:8333\n+[2001:4ba0:ffee:33::10]:8333\n [2001:4dd0:ff00:9a67::9]:8333\n-[2001:5c0:1400:b::3cc7]:8333\n [2001:610:1b19::3]:8333\n [2001:610:600:a41::2]:8333\n-[2001:67c:26b4::]:8333\n-[2001:8d8:840:500::39:1ae]:8333\n-[2001:8d8:965:4a00::10:9343]:8333\n-[2001:980:4650:1:2e0:53ff:fe13:2449]:8333\n+[2001:678:174:4021::2:8333]:8333\n+[2001:67c:16dc:1201:5054:ff:fe17:4dac]:8333\n+[2001:67c:2128:ffff:6062:36ff:fe30:6532]:8333\n+[2001:67c:2564:331:3547:6e28:85a4:fb27]:8333\n+[2001:6a0:200:368::2]:8333\n+[2001:718:801:311:5054:ff:fe19:c483]:8333\n+[2001:7b8:2ff:8f::2]:8333\n+[2001:8d8:8a6:4400::3f:86c]:8333\n+[2001:8d8:923:8400::87:ebd]:8333\n+[2001:960:66d::2]:8333\n [2001:981:46:1:ba27:ebff:fe5b:edee]:8333\n-[2001:9c8:53e9:369a:226:2dff:fe1b:7472]:8333\n-[2001:9d8:cafe:3::87]:8333\n-[2001:b10:11:21:3e07:54ff:fe48:7248]:8333\n-[2001:ba8:1f1:f34c::2]:8333\n-[2001:bc8:2310:100::1]:8333\n-[2001:bc8:3427:101:7a4f:8be:2611:6e79]:8333\n-[2001:bc8:3505:200::1]:8333\n-[2001:cc0:a004::30:1d]:8333\n-[2001:e42:102:1209:153:121:76:171]:8333\n-[2002:17ea:14eb::17ea:14eb]:8333\n-[2002:2f8:2bc5::2f8:2bc5]:8333\n-[2002:4047:482c::4047:482c]:8333\n-[2002:45c3:8cca::45c3:8cca]:8333\n-[2002:46bb:8a41:0:226:b0ff:feed:5f12]:8888\n-[2002:46bb:8c3c:0:8d55:8fbb:15fa:f4e0]:8765\n-[2002:4c48:a0fe::4c48:a0fe]:8333\n-[2002:4d44:25c8::4d44:25c8]:8333\n-[2002:505f:aaa2::505f:aaa2]:8333\n-[2002:5bc1:799d::5bc1:799d]:8333\n-[2002:6dec:5472::6dec:5472]:8333\n-[2002:8c6d:6521:9617:12bf:48ff:fed8:1724]:8333\n-[2002:ac52:94e2::ac52:94e2]:8333\n-[2002:af7e:3eca::af7e:3eca]:8333\n-[2002:b009:20c5::b009:20c5]:8333\n-[2002:c06f:39a0::c06f:39a0]:8333\n-[2002:c23a:738a::c23a:738a]:8333\n-[2002:c70f:7442::c70f:7442]:8333\n-[2002:cec5:be4f::cec5:be4f]:8333\n-[2002:d149:9e3a::d149:9e3a]:8333\n+[2001:ba8:1f1:f069::2]:8333\n+[2001:bc8:225f:10e:505:6573:7573:d0a]:8333\n+[2001:bc8:2706::1]:8333\n+[2001:bc8:323c:100::53]:8333\n+[2001:bc8:323c:100::80:4]:8333\n+[2001:bc8:323c:100::cafe]:8333\n+[2001:bc8:3680:4242::1]:8333\n+[2001:bc8:399f:f000::1]:8333\n+[2001:bc8:3cbf::5]:8333\n+[2001:bc8:4700:2300::19:807]:8333\n+[2001:e42:102:1805:160:16:206:31]:8333\n+[2002:12f1:3f::12f1:3f]:8333\n+[2002:1e2:5349::1e2:5349]:8333\n+[2002:1e2:5588::1e2:5588]:8333\n+[2002:2501:cf62::2501:cf62]:8333\n+[2002:268c:a135::268c:a135]:8333\n+[2002:2a33:99db::2a33:99db]:8332\n+[2002:2ebc:2c14::7]:8333\n+[2002:2f59:2c9c::2f59:2c9c]:11885\n+[2002:2f5a:3619::2f5a:3619]:8333\n+[2002:2f5a:36a4::2f5a:36a4]:8333\n+[2002:2f5a:429::2f5a:429]:8333\n+[2002:2f5a:562a::2f5a:562a]:8333\n+[2002:3a3b:216::3a3b:216]:8333\n+[2002:3dfa:5d23::3dfa:5d23]:8333\n+[2002:424f:a052::424f:a052]:8333\n+[2002:451e:e922::451e:e922]:8333\n+[2002:4540:4b30::4540:4b30]:8333\n+[2002:51ab:7cc::51ab:7cc]:8333\n+[2002:527:de11::527:de11]:8333\n+[2002:5395:7d01::5395:7d01]:8333\n+[2002:5395:7d2a::5395:7d2a]:8333\n+[2002:5669:e3be::5669:e3be]:8333\n+[2002:566a:5d6d::566a:5d6d]:8333\n+[2002:59b9:f820::59b9:f820]:8333\n+[2002:59f8:ac69::59f8:ac69]:8333\n+[2002:5bd4:b65a::5bd4:b65a]:8333\n+[2002:5c3f:39db::5c3f:39db]:8333\n+[2002:5d33:8d03::5d33:8d03]:8333\n+[2002:5d67:49bb::5d67:49bb]:8333\n+[2002:5dae:5d5f::5dae:5d5f]:8333\n+[2002:5dbe:8cc6::5dbe:8cc6]:8333\n+[2002:5dbe:9503::5dbe:9503]:8333\n+[2002:5fd3:8944::5fd3:8944]:8333\n+[2002:5fd3:9467::5fd3:9467]:8333\n+[2002:67f9:6a48::67f9:6a48]:8333\n+[2002:67f9:6a4a::67f9:6a4a]:8333\n+[2002:67f9:6a95::67f9:6a95]:8333\n+[2002:6a0e:3ea8::6a0e:3ea8]:10011\n+[2002:6b96:375a::6b96:375a]:8333\n+[2002:6ca8:cffb::6ca8:cffb]:8333\n+[2002:6caf:234::6caf:234]:8333\n+[2002:6dec:58f5::6dec:58f5]:8333\n+[2002:6dec:5ac7::6dec:5ac7]:8333\n+[2002:7237:4a02::7237:4a02]:20033\n+[2002:7237:94fd::7237:94fd]:10011\n+[2002:7237:e428::7237:e428]:8333\n+[2002:7237:fcf6::7237:fcf6]:20188\n+[2002:76c0:96e6::76c0:96e6]:8333\n+[2002:7819:7e80::7819:7e80]:7743\n+[2002:781a:ea86::781a:ea86]:8333\n+[2002:781a:f3c2::781a:f3c2]:14475\n+[2002:784c:c2c0::784c:c2c0]:8333\n+[2002:784c:ec97::784c:ec97]:8333\n+[2002:792b:261a::792b:261a]:8333\n+[2002:88f3:8cca::88f3:8cca]:8333\n+[2002:88f3:a83c::88f3:a83c]:8333\n+[2002:8ac9:516f::8ac9:516f]:8333\n+[2002:8b81:6d78::8b81:6d78]:50344\n+[2002:8b81:6e5c::8b81:6e5c]:38176\n+[2002:8bc4:90a6::8bc4:90a6]:8333\n+[2002:ac52:b854::ac52:b854]:8333\n+[2002:add0:c14a::add0:c14a]:8333\n+[2002:b07e:a70a::b07e:a70a]:8333\n+[2002:b27c:c565:1::250]:8333\n+[2002:b27c:c565::1]:8333\n+[2002:b94d:80f1::b94d:80f1]:8333\n+[2002:b982:e26a::b982:e26a]:8333\n+[2002:bcd5:3145::bcd5:3145]:8333\n+[2002:c08a:d22b::c08a:d22b]:8333\n+[2002:c0c7:f8e3::c0c7:f8e3]:32771\n+[2002:c1a9:fc5a::c1a9:fc5a]:8333\n+[2002:c23f:8fc5::c23f:8fc5]:8333\n+[2002:d395:ea6d::d395:ea6d]:8333\n [2002:d917:ca5::d917:ca5]:8333\n-[2400:8900::f03c:91ff:fe50:153f]:8333\n-[2400:8900::f03c:91ff:fe6e:823e]:8333\n-[2400:8900::f03c:91ff:fea8:1934]:8333\n-[2400:8901::f03c:91ff:fe26:c4d6]:8333\n+[2002:d917:e91::d917:e91]:8333\n+[2002:db71:f434::db71:f434]:8333\n+[2400:2651:161:1000:6847:d40f:aaa3:4848]:8333\n [2400:8901::f03c:91ff:fec8:4280]:8333\n-[2400:8901::f03c:91ff:fec8:660f]:8333\n-[2401:1800:7800:102:be76:4eff:fe1c:559]:8333\n [2401:1800:7800:102:be76:4eff:fe1c:a7d]:8333\n+[2401:2500:203:10:153:120:156:83]:8333\n+[2401:a400:3200:5600:14ee:f361:4bdc:1f7c]:8333\n+[2403:4200:403:2::ff]:8333\n [2405:aa00:2::40]:8333\n-[2600:3c00::f03c:91ff:fe18:59b2]:8333\n-[2600:3c00::f03c:91ff:fe26:bfb6]:8333\n-[2600:3c00::f03c:91ff:fe33:88e3]:8333\n-[2600:3c00::f03c:91ff:fe6e:7297]:8333\n-[2600:3c00::f03c:91ff:fe84:8a6e]:8333\n+[240b:10:ca20:f0:224:e8ff:fe1f:60d9]:8333\n+[240b:250:1e0:2400:b9ef:8fe3:a69a:7378]:8333\n+[240d:1a:302:8600:8876:a36d:12ee:f285]:8333\n+[2600:3c00::f03c:91ff:fe91:3e49]:8333\n+[2600:3c00::f03c:91ff:febb:981e]:8333\n [2600:3c01::f03c:91ff:fe18:6adf]:8333\n-[2600:3c01::f03c:91ff:fe26:c4b8]:8333\n-[2600:3c01::f03c:91ff:fe3b:1f76]:8333\n-[2600:3c01::f03c:91ff:fe50:5e06]:8333\n-[2600:3c01::f03c:91ff:fe61:289b]:8333\n [2600:3c01::f03c:91ff:fe69:89e9]:8333\n-[2600:3c01::f03c:91ff:fe84:ac15]:8333\n-[2600:3c01::f03c:91ff:fe98:68bb]:8333\n-[2600:3c02::f03c:91ff:fe26:713]:8333\n-[2600:3c02::f03c:91ff:fe26:c49e]:8333\n-[2600:3c02::f03c:91ff:fe84:97d8]:8333\n-[2600:3c02::f03c:91ff:fec8:8feb]:8333\n+[2600:3c01::f03c:91ff:fe91:6a29]:8333\n+[2600:3c01::f03c:91ff:fef1:1eaa]:8333\n [2600:3c03::f03c:91ff:fe18:da80]:8333\n-[2600:3c03::f03c:91ff:fe26:c49b]:8333\n-[2600:3c03::f03c:91ff:fe50:5fa7]:8333\n+[2600:3c03::f03c:91ff:fe28:1445]:8333\n [2600:3c03::f03c:91ff:fe67:d2e]:8333\n-[2600:3c03::f03c:91ff:fe6e:1803]:8333\n-[2600:3c03::f03c:91ff:fec8:4bbe]:8333\n-[2600:3c03::f03c:91ff:fee4:4e16]:8333\n-[2601:18d:8300:58a6::2e4]:8333\n-[2601:240:4600:40c0:250:56ff:fea4:6305]:8333\n-[2601:581:c200:a719:542c:9cd5:4852:f7d9]:8333\n-[2601:647:4900:85f1:ca2a:14ff:fe51:bb35]:8333\n-[2601:c2:c002:b300:54a0:15b5:19f7:530d]:8333\n-[2602:306:ccff:ad7f:b116:52be:64ba:db3a]:8333\n-[2602:ae:1982:9400:846:f78c:fec:4d57]:8333\n+[2600:3c03::f03c:91ff:fe89:116f]:8333\n+[2600:3c03::f03c:91ff:feb0:5fc4]:8333\n+[2600:3c03::f03c:91ff:fee0:233e]:8333\n+[2600:3c03::f03c:91ff:fee0:51]:8333\n+[2600:8805:2400:14e:226:4aff:fe02:2ba4]:8333\n+[2600:8807:5080:3301:1487:83b7:33d7:eb97]:8333\n+[2601:186:c100:6bcd:16bd:cea1:235d:1c19]:8333\n+[2601:18c:4200:28d0:e4d:e9ff:fec5:76d0]:8333\n+[2601:247:8201:6251:30e6:7b95:69bf:9248]:8333\n+[2601:602:9980:f78:211:11ff:fec5:1ae]:8333\n+[2602:ae:1993:de00:2c50:9a44:8f11:77a5]:8333\n+[2602:ff68:0:1:21e:bff:feca:db72]:8333\n+[2602:ff68:0:1:2bd:27ff:feb0:adf8]:8333\n+[2602:ff68:0:1::5]:8333\n+[2602:ff68:0:5:2bd:27ff:feb0:adf8]:8333\n [2602:ffc5:1f::1f:2d61]:8333\n [2602:ffc5:1f::1f:9211]:8333\n-[2602:ffc5::75d5:c1c3]:8333\n+[2602:ffc5::9e63:27a2]:8333\n+[2602:ffc5::c30:1c75]:8333\n [2602:ffc5::ffc5:b844]:8333\n [2602:ffe8:100:2::457:936b]:8333\n-[2602:ffe8:100:2::9d20:2e3c]:8333\n-[2602:ffea:1001:72b::578b]:8333\n-[2602:ffea:a::24c4:d9fd]:8333\n-[2604:0:c1:100:1ec1:deff:fe54:2235]:8333\n-[2604:180:1:1af::42a9]:8333\n-[2604:180:3:702::c9de]:8333\n-[2604:4080:1114:0:3285:a9ff:fe93:850c]:8333\n-[2604:6000:ffc0:3c:64a3:94d0:4f1d:1da8]:8333\n-[2605:6000:f380:9a01:ba09:8aff:fed4:3511]:8333\n-[2605:6001:e00f:7b00:c587:6d91:6eff:eeba]:8333\n-[2605:f700:c0:1::25c3:2a3e]:8333\n-[2606:6000:a441:9903:5054:ff:fe78:66ff]:8333\n-[2607:5300:100:200::1c83]:9334\n-[2607:5300:10::a1]:8333\n-[2607:5300:60:1c2f::1]:8333\n-[2607:5300:60:2b90::1]:8333\n-[2607:5300:60:3320::1]:8333\n-[2607:5300:60:385::1]:8333\n-[2607:5300:60:4a85::]:8333\n-[2607:5300:60:65e4::]:8333\n-[2607:5300:60:6918::]:8333\n-[2607:5300:60:711a:78::a7b5]:8333\n-[2607:5300:60:714::1]:8333\n-[2607:5300:60:870::1]:8333\n-[2607:5300:60:952e:3733::1414]:8333\n-[2607:f1c0:848:1000::48:943c]:8333\n-[2607:f2e0:f:5df::2]:8333\n-[2607:f748:1200:f8:21e:67ff:fe99:8f07]:8333\n-[2607:f948:0:1::7]:8333\n-[2607:ff68:100:36::131]:8333\n-[2803:6900:1::117]:8333\n-[2a00:1098:0:80:1000:25:0:1]:8333\n-[2a00:1178:2:43:5054:ff:fe84:f86f]:8333\n-[2a00:1178:2:43:5054:ff:fee7:2eb6]:8333\n-[2a00:1178:2:43:8983:cc27:d72:d97a]:8333\n-[2a00:1328:e100:cc42:230:48ff:fe92:55c]:8333\n+[2604:180:2:eee::ca46]:8333\n+[2604:880:d:85::be37]:8333\n+[2604:9a00:2100:a009:2::]:8333\n+[2604:a880:2:d0::301:8001]:8333\n+[2604:a880:2:d0::4a9:1001]:8333\n+[2604:a880:2:d0::53a:c001]:8333\n+[2604:a880:400:d0::ad7:e001]:8333\n+[2604:a880:400:d0::dcf:f001]:8333\n+[2605:4d00::50]:8333\n+[2605:6000:edc8:300::ddfe]:8333\n+[2605:6000:ffc0:70:74d5:225c:f553:5bb8]:8333\n+[2606:6000:c148:7003:5054:ff:fe78:66ff]:8333\n+[2606:6000:e6d6:d701:d428:5e44:a2c9:3ff6]:8333\n+[2606:c680:1:4a:2016:d1ff:fe93:52a7]:8333\n+[2607:5300:203:118:3733::1414]:8333\n+[2607:5300:60:13bb::1]:8333\n+[2607:5300:60:1966::1]:8333\n+[2607:5300:60:2218::]:8333\n+[2607:5300:60:3775::]:8333\n+[2607:5300:60:3ddf::]:8333\n+[2607:5300:60:a654::]:8333\n+[2607:5300:60:a7a3::]:8333\n+[2607:5300:60:ac0::1]:8333\n+[2607:5300:60:cf97::]:8333\n+[2607:f0d0:1901:19::6]:8333\n+[2607:f128:40:1202:69:162:139:125]:8333\n+[2607:f128:40:1703::2]:8333\n+[2607:f178:0:8::106]:8333\n+[2607:f1c0:84d:8900::7e:cad]:8333\n+[2607:f948:0:1::1:40]:8333\n+[2607:fcd0:100:2302::6094:635a]:8333\n+[2607:fcd0:100:6a00::3a96:1]:8333\n+[2607:fcd0:100:6a02::7ff0:1]:8333\n+[2607:fcd0:100:8203::8c58:dbc]:8333\n+[2607:fea8:1360:9c2:221a:6ff:fe47:776d]:8333\n+[2607:fea8:4da0:9ce:5114:a8ec:20f5:a50b]:8333\n+[2607:fea8:5df:fda0:feaa:14ff:feda:c79a]:8333\n+[2607:fea8:84c0:163:f42c:baff:fecc:6bbf]:8333\n+[2607:ff10:c5:502:225:90ff:fe32:d446]:8333\n+[2607:ff48:aa81:800::96cf:1]:8333\n+[2620:11c:5001:1118:d267:e5ff:fee9:e673]:8333\n+[2620:b8:4000:1000::93:1]:8333\n+[2800:1a0::9]:8333\n+[2a00:1178:2:43:19fd:d43e:b77:edeb]:8333\n+[2a00:1178:2:43:b4e3:e562:f811:d761]:8333\n [2a00:14f0:e000:80d2:cd1a::1]:8333\n+[2a00:1630:14::101]:8333\n [2a00:1630:2:1802:188:122:91:11]:8333\n-[2a00:18e0:0:1800::1]:8333\n-[2a00:18e0:0:dcc5:109:234:106:191]:8333\n-[2a00:1a28:1157:87::94c7]:8333\n+[2a00:1630:2:500::4]:8333\n+[2a00:1768:2001:24::148:218]:8333\n+[2a00:1768:2001:27::142:21]:8333\n+[2a00:1a48:7810:101:be76:4eff:fe08:c774]:8333\n [2a00:1ca8:37::a5fc:40d1]:8333\n [2a00:1ca8:37::ab6d:ce2c]:8333\n-[2a00:7143:100:0:216:3eff:fe2e:74a3]:8333\n-[2a00:7143:100:0:216:3eff:fed3:5c21]:8333\n-[2a00:7c80:0:45::123]:8333\n+[2a00:1dc0:2255:10::2]:8333\n+[2a00:7c80:0:71::8]:8333\n+[2a00:7c80:0:97::7]:8333\n+[2a00:bbe0:0:42:222:64ff:fe9a:e206]:8333\n+[2a00:c98:2050:a020:3::110]:8333\n+[2a00:dcc0:eda:98:183:193:1d24:b53a]:8333\n [2a00:dcc0:eda:98:183:193:c382:6bdb]:8333\n [2a00:dcc0:eda:98:183:193:f72e:d943]:8333\n-[2a00:f820:17::4af:1]:8333\n-[2a00:f940:2:1:2::101d]:8333\n-[2a00:f940:2:1:2::6ac]:8333\n-[2a01:1b0:7999:402::131]:8333\n-[2a01:238:42dd:f900:7a6c:2bc6:4041:c43]:8333\n-[2a01:238:4313:6300:2189:1c97:696b:5ea]:8333\n-[2a01:488:66:1000:5c33:91f9:0:1]:8333\n-[2a01:488:66:1000:b01c:178d:0:1]:8333\n+[2a00:f90:ff0:c100:53c4:97a7:8b59:796a]:8333\n+[2a01:238:435c:de00:b110:38cf:192d:b2c]:28333\n+[2a01:348:6:7cf::2]:8333\n+[2a01:368:e012:8888:216:3eff:fe24:1162]:8333\n+[2a01:488:66:1000:53a9:22b:0:1]:8333\n+[2a01:488:67:1000:523:ffa7:0:1]:8333\n+[2a01:488:67:1000:b01c:3379:0:1]:8333\n [2a01:4f8:100:34ce::2]:8333\n-[2a01:4f8:100:34e4::2]:8333\n [2a01:4f8:100:44e7::2]:8333\n-[2a01:4f8:100:510e::2]:8333\n-[2a01:4f8:100:5128::2]:8333\n-[2a01:4f8:110:5105::2]:8333\n-[2a01:4f8:110:516c::2]:8333\n+[2a01:4f8:10a:2e4::2]:8333\n+[2a01:4f8:10a:34e::2]:8333\n+[2a01:4f8:10a:51d::2]:8333\n+[2a01:4f8:10a:622::2]:8333\n+[2a01:4f8:10a:85f::2]:8333\n+[2a01:4f8:10a:864::2]:8333\n+[2a01:4f8:10a:d04::2]:8333\n+[2a01:4f8:110:334c::2]:8333\n+[2a01:4f8:110:536e::2]:8333\n [2a01:4f8:120:43e4::2]:8333\n-[2a01:4f8:120:62e6::2]:8333\n [2a01:4f8:120:702e::2]:8333\n-[2a01:4f8:120:8203::2]:8333\n-[2a01:4f8:121:234d::2]:8333\n-[2a01:4f8:121:261::2]:8333\n-[2a01:4f8:130:11ea::2]:8333\n+[2a01:4f8:121:4346::2]:8333\n [2a01:4f8:130:3332::2]:8333\n-[2a01:4f8:130:40ab::2]:8333\n-[2a01:4f8:130:632c::2]:8333\n-[2a01:4f8:130:6366::2]:8333\n-[2a01:4f8:130:934f::2]:8333\n+[2a01:4f8:131:33ad::2]:8333\n [2a01:4f8:131:33ad:fea1::666]:8333\n-[2a01:4f8:140:2195::2]:8333\n-[2a01:4f8:140:6333::2]:8333\n-[2a01:4f8:140:930d::2]:8333\n+[2a01:4f8:140:31b0::2]:8333\n+[2a01:4f8:140:4088::2]:8333\n+[2a01:4f8:140:931a::2]:8333\n [2a01:4f8:140:93b0::2]:8333\n-[2a01:4f8:141:1167::2]:8333\n+[2a01:4f8:141:13ad::c451]:8333\n [2a01:4f8:141:186::2]:8333\n-[2a01:4f8:141:53f0::2]:8333\n-[2a01:4f8:150:336a::2]:8333\n-[2a01:4f8:150:72ee::4202]:8333\n-[2a01:4f8:150:8324::2]:9001\n-[2a01:4f8:151:21ca::2]:8333\n-[2a01:4f8:151:41c2:0:5404:a67e:f250]:8333\n-[2a01:4f8:151:5128::2]:8333\n+[2a01:4f8:141:22ae::2]:8333\n+[2a01:4f8:141:322c::2]:8333\n+[2a01:4f8:150:11d4::2]:8333\n+[2a01:4f8:150:440f::2]:8333\n+[2a01:4f8:150:61ee::2]:8333\n+[2a01:4f8:150:726b::2]:8333\n+[2a01:4f8:151:30c9::2]:15000\n+[2a01:4f8:151:41a2::2]:8333\n+[2a01:4f8:151:41cc::2]:8333\n [2a01:4f8:151:52c6::154]:8333\n-[2a01:4f8:151:6347::2]:9001\n-[2a01:4f8:160:5136::2]:8333\n-[2a01:4f8:160:72c5::2858:e1c5]:8333\n-[2a01:4f8:160:72c5::593b:60d5]:8333\n+[2a01:4f8:151:600b::1:1]:8333\n+[2a01:4f8:151:7175::2]:8333\n+[2a01:4f8:160:41f0::1:33]:8333\n+[2a01:4f8:160:5328::27f0:187a]:8333\n [2a01:4f8:160:814f::2]:8333\n-[2a01:4f8:161:13d0::2]:8333\n-[2a01:4f8:161:228f::2]:8333\n-[2a01:4f8:161:51c4::2]:8333\n-[2a01:4f8:161:60a7::2]:8333\n+[2a01:4f8:161:21ad::333:30]:8333\n [2a01:4f8:161:7026::2]:8333\n-[2a01:4f8:161:9184::2]:8333\n-[2a01:4f8:162:2108::2]:8333\n-[2a01:4f8:162:218c::2]:8333\n-[2a01:4f8:162:4443::2]:8333\n-[2a01:4f8:162:51a3::2]:8333\n+[2a01:4f8:162:4110::2]:8333\n+[2a01:4f8:162:4348::2]:8333\n+[2a01:4f8:171:1c1b::2]:8333\n+[2a01:4f8:171:1c3::2]:8333\n+[2a01:4f8:171:2258::2]:8333\n+[2a01:4f8:171:2a70::2]:8333\n+[2a01:4f8:171:2e1b::2]:8333\n+[2a01:4f8:171:2f28::2]:8333\n+[2a01:4f8:171:3248::2]:8333\n+[2a01:4f8:171:380c::2]:8333\n [2a01:4f8:171:b93::2]:8333\n-[2a01:4f8:190:1483::1]:8333\n-[2a01:4f8:190:4495::2]:8333\n-[2a01:4f8:190:64c9::2]:8333\n+[2a01:4f8:171:d0a::2]:8333\n+[2a01:4f8:172:116c::2]:8333\n+[2a01:4f8:172:1287::2]:8333\n+[2a01:4f8:172:17a9::2]:8333\n+[2a01:4f8:172:1ca7::2]:8333\n+[2a01:4f8:172:2159::2]:8333\n+[2a01:4f8:172:3a41::2]:8333\n+[2a01:4f8:172:3b42::2]:8333\n+[2a01:4f8:172:3ec1::2]:8333\n+[2a01:4f8:172:3ec2::2]:8333\n+[2a01:4f8:172:aeb::2]:8333\n+[2a01:4f8:172:aec::2]:8333\n+[2a01:4f8:173:10ab::2]:8333\n+[2a01:4f8:173:1551::2]:8333\n+[2a01:4f8:173:1bca::2]:8333\n+[2a01:4f8:173:1e2e::2]:8333\n+[2a01:4f8:173:2162::2]:8333\n+[2a01:4f8:173:21e6::2]:8333\n+[2a01:4f8:173:42::2]:8333\n+[2a01:4f8:173:cc1::2]:8333\n+[2a01:4f8:190:1253::2]:8333\n+[2a01:4f8:190:24eb::2]:8333\n+[2a01:4f8:190:34f0::2]:8333\n+[2a01:4f8:190:528d::2]:8333\n [2a01:4f8:190:91ce::2]:8333\n [2a01:4f8:191:2194::83]:8333\n [2a01:4f8:191:40e8::2]:8333\n-[2a01:4f8:191:44b4::2]:8333\n-[2a01:4f8:191:8242::2]:8333\n-[2a01:4f8:191:83a2::2]:8333\n-[2a01:4f8:192:11b2::2]:8333\n+[2a01:4f8:191:8165::2]:22556\n+[2a01:4f8:191:81b7::2]:8333\n+[2a01:4f8:191:8328::3]:8333\n+[2a01:4f8:192:11b2::2]:8343\n [2a01:4f8:192:216c::2]:8333\n-[2a01:4f8:192:22b3::2]:8333\n+[2a01:4f8:192:22af::2]:8333\n+[2a01:4f8:192:2422::2]:8333\n+[2a01:4f8:192:34d0::2]:8333\n [2a01:4f8:192:440b::2]:8333\n+[2a01:4f8:192:5230::2]:8333\n [2a01:4f8:192:db::2]:8333\n [2a01:4f8:200:1012::2]:8333\n-[2a01:4f8:200:23d1::dead:beef]:8333\n-[2a01:4f8:200:506d::2]:8333\n-[2a01:4f8:200:51f0::2]:8333\n-[2a01:4f8:200:5389::2]:8333\n-[2a01:4f8:200:53e3::2]:8333\n-[2a01:4f8:200:6344::2]:8333\n-[2a01:4f8:200:6396::2]:8333\n-[2a01:4f8:200:63af::119]:8333\n-[2a01:4f8:200:71e3:78b4:f3ff:fead:e8cf]:8333\n-[2a01:4f8:201:214c::2]:8333\n-[2a01:4f8:201:233:1::3]:8333\n-[2a01:4f8:201:3e3::2]:8333\n+[2a01:4f8:200:414e::2]:8333\n+[2a01:4f8:200:416a::2]:8333\n+[2a01:4f8:201:21a7::2]:8333\n+[2a01:4f8:201:4017::11]:8333\n [2a01:4f8:201:6011::4]:8333\n [2a01:4f8:201:60d5::2]:8333\n-[2a01:4f8:202:265::2]:8333\n-[2a01:4f8:202:3115::2]:8333\n+[2a01:4f8:202:12d6::2]:8333\n [2a01:4f8:202:31e3::2]:8333\n-[2a01:4f8:202:31ef::2]:8333\n-[2a01:4f8:202:3392::2]:8333\n+[2a01:4f8:202:32c6::2]:8333\n [2a01:4f8:202:53c3::2]:8333\n-[2a01:4f8:202:63f4::2]:8333\n-[2a01:4f8:202:7227::2]:8333\n-[2a01:4f8:210:2227::2]:8333\n-[2a01:4f8:210:24aa::2]:8333\n [2a01:4f8:211:14cf::2]:8333\n-[2a01:4f8:211:181b::2]:8333\n-[2a01:4f8:212:289e::2]:8333\n-[2a01:4f8:212:33db::2]:18333\n-[2a01:4f8:a0:112f::2]:8333\n-[2a01:4f8:a0:3174::2]:8333\n-[2a01:4f8:a0:328c::2]:8333\n-[2a01:4f8:a0:5243::2]:8333\n-[2a01:4f8:c17:19b9::2]:8333\n-[2a01:4f8:c17:1a41::2]:8333\n-[2a01:4f8:c17:1a92::2]:8333\n-[2a01:4f8:c17:273::2]:8333\n-[2a01:4f8:c17:435::2]:8333\n-[2a01:4f8:c17:755::2]:8333\n-[2a01:4f8:c17:b54::2]:8333\n-[2a01:4f8:d16:9384::2]:8333\n+[2a01:4f8:211:1ec5::2]:8333\n+[2a01:4f8:211:483::2]:8333\n+[2a01:4f8:211:d99::8]:8333\n+[2a01:4f8:212:1826::2]:8333\n+[2a01:4f8:212:27a8::2]:8333\n+[2a01:4f8:221:801::2]:8333\n+[2a01:4f8:a0:12cc::2]:8333\n+[2a01:4f8:a0:746a:101:1:1:2]:8333\n+[2a01:4f8:a0:828a::2]:8333\n+[2a01:4f8:c17:2eef::2]:8333\n+[2a01:4f8:c17:2f3c::2]:3333\n+[2a01:4f8:c17:3b02::2]:8333\n+[2a01:4f8:c17:4245::2]:8333\n+[2a01:4f8:c17:464f::2]:8333\n+[2a01:4f8:c17:4a1c::2]:8333\n+[2a01:4f8:c17:4c5d::2]:8333\n+[2a01:4f8:c17:67f8::2]:8333\n+[2a01:4f8:c17:6dd0::2]:8333\n+[2a01:4f8:c17:710b::2]:8333\n+[2a01:4f8:c17:714::2]:8333\n+[2a01:4f8:c17:72c6::2]:8333\n [2a01:608:ffff:a009:8bf5:879d:e51a:f837]:8333\n-[2a01:680:10:10:f2de:f1ff:fec9:dc0]:8333\n-[2a01:7c8:aaac:1f6:5054:ff:fe30:e585]:8333\n-[2a01:7c8:aaac:20b:5054:ff:fe24:435e]:8333\n+[2a01:680:10:10::1]:8333\n+[2a01:6f0:ffff:120::8dcb]:8333\n+[2a01:79c:cebc:857c:98c1:88ff:fef5:90de]:8333\n+[2a01:79d:7377:2629:7e57:7e57:1:1]:8333\n [2a01:7c8:aaac:43d:5054:ff:fe4e:3dd4]:8333\n-[2a01:7c8:aaad:256::1]:8333\n-[2a01:7c8:aab6:ea:5054:ff:feff:eac3]:8333\n-[2a01:7c8:aab9:5a:5054:ff:fe89:7b26]:8333\n-[2a01:7c8:aabc:2c8:5054:ff:fe35:6581]:8333\n-[2a01:7e00::f03c:91ff:fe18:301e]:8333\n-[2a01:7e00::f03c:91ff:fe18:3942]:8333\n+[2a01:7c8:aab5:3e6:5054:ff:fed7:4e54]:8333\n+[2a01:7c8:aabd:3d5:5054:ff:fe95:f586]:8333\n+[2a01:7c8:aac1:453:d0d2:af96:fa88:5d0e]:8333\n+[2a01:7c8:aac3:663:5054:ff:fe25:8c69]:8333\n+[2a01:7c8:aac3:97:5054:ff:fea7:3780]:8333\n+[2a01:7c8:aac4:567:5054:ff:fedc:518a]:8333\n [2a01:7e00::f03c:91ff:fe26:8c87]:8333\n-[2a01:7e00::f03c:91ff:fe50:6206]:8333\n-[2a01:7e00::f03c:91ff:fe67:559d]:8333\n-[2a01:7e00::f03c:91ff:fe84:434f]:8333\n+[2a01:7e00::f03c:91ff:fe50:94b8]:8333\n+[2a01:7e00::f03c:91ff:fe55:2c]:8333\n [2a01:7e00::f03c:91ff:fe89:1143]:8333\n-[2a01:7e00::f03c:91ff:fe98:2505]:8333\n-[2a01:7e00::f03c:91ff:fedb:352e]:8333\n-[2a01:7e01::f03c:91ff:fec8:d7b5]:8333\n-[2a01:e34:ee33:1640:c504:f677:b28a:ba42]:8333\n-[2a01:e35:2e7e:bc0:e079:f55e:cef3:b5d7]:8333\n+[2a01:7e00::f03c:91ff:fe89:53fd]:8333\n+[2a01:7e00::f03c:91ff:fedf:b70f]:8333\n+[2a01:b000::4166:515b:ef9e:b3]:8333\n+[2a01:b2e0:2::40]:8333\n+[2a01:e34:ec29:24c0:f3:ddaf:9f59:586f]:8333\n+[2a01:e34:eed7:6670:ec1b:bf7c:b012:6069]:8333\n [2a01:e35:2ee5:610:21f:d0ff:fe4e:7460]:8333\n [2a01:e35:8a3f:47c0:c617:feff:fe3c:9fbd]:8333\n-[2a01:e35:8aca:6a0:211:aff:fe5e:295e]:8333\n-[2a02:180:a:18:81:7:11:50]:8333\n-[2a02:1810:1d87:6a00:5604:a6ff:fe60:d87d]:8333\n-[2a02:2168:1144:5c01:d63d:7eff:fedd:4f8e]:8333\n-[2a02:2498:6d7b:7001:b508:b39d:2cea:5b7a]:8333\n-[2a02:2528:503:2::15]:8333\n-[2a02:2528:fa:1a56:216:44ff:fe6a:d112]:8333\n-[2a02:27f8:2012:0:e9f7:268f:c441:6129]:8333\n+[2a01:e35:8bff:70b0:1e1b:dff:fe0b:236d]:8333\n+[2a02:1205:34c3:a4e0:d63d:7eff:fe98:10c8]:8333\n+[2a02:1205:34da:aa00:5882:249d:ddbf:bc43]:8333\n+[2a02:1205:5051:a640:d6ae:52ff:fea3:ac]:8333\n+[2a02:1205:c689:d980:baae:edff:feea:9445]:8333\n+[2a02:120b:2c2a:5ec0:10dd:31ff:fe42:5079]:8333\n+[2a02:120b:2c35:69d0:219:99ff:fe6b:4ec3]:8333\n+[2a02:120b:c3c2:ff60:21f:5bff:fec3:a7ad]:24312\n+[2a02:13b8:4000:1000:216:e6ff:fe92:8619]:8333\n+[2a02:13b8:4000:1000::27]:8333\n+[2a02:17d0:2a:4400:40f:3dd4:b053:47ad]:8333\n+[2a02:180:1:1::517:afb]:8333\n+[2a02:180:6:1::18]:8333\n+[2a02:1810:1d11:f900:6872:f28e:8126:f635]:8333\n+[2a02:27a8:0:1:52e5:49ff:fee3:3b49]:8333\n [2a02:348:86:3011::1]:8333\n-[2a02:4780:1:1::1:8a01]:8333\n-[2a02:578:5002:116::2]:8333\n+[2a02:390:9000:0:218:7dff:fe10:be33]:8333\n+[2a02:582:78c1:7600:2d49:6212:29d3:abb]:8333\n [2a02:6080::1:190b:69e3]:8333\n-[2a02:6080::1:e893:d9d6]:8333\n-[2a02:770:4000::139]:8333\n+[2a02:750:7:3305::575]:8333\n+[2a02:752:100:3::53]:8333\n+[2a02:7aa0:1201::7501:d950]:8333\n [2a02:7aa0:1201::deb3:81a2]:8333\n-[2a02:8010:b001::5860:59b5]:8333\n-[2a02:810d:21c0:f00:a248:1cff:feb8:5348]:8333\n-[2a02:a50::21b:24ff:fe93:4e39]:8333\n-[2a02:a80:0:1200::2]:8333\n-[2a02:c200:0:10:2:1:5830:1]:8333\n-[2a02:c200:0:10:2:5:4692:1]:8333\n-[2a02:c200:0:10:3:0:7158:1]:8333\n-[2a02:c200:0:10::2244:1]:8333\n-[2a02:c200:1:10:2:3:3339:1]:8333\n-[2a02:c200:1:10:2:3:7844:1]:8333\n-[2a02:c200:1:10:2:5:6288:1]:8333\n-[2a02:c200:1:10:3:0:5912:1]:8333\n+[2a02:7aa0:1619::a037:69a6]:8333\n+[2a02:810d:14c0:8694:d250:99ff:fe81:23d9]:8333\n+[2a02:a50::dacb:8aff:fe36:8d2d]:8333\n+[2a02:c200:0:10:3:0:2591:1]:8333\n+[2a02:c200:1:10:2:5:9982:1]:8333\n+[2a02:c200:1:10:3:0:9290:1]:8333\n+[2a02:c205:3000:7158::1]:8333\n+[2a02:c205:3001:4522::1]:8333\n+[2a02:c205:3001:6549::1]:8333\n+[2a02:c207:2008:3772::1]:8333\n+[2a02:c207:2008:6519::1]:8333\n+[2a02:c207:2009:213::1]:8333\n+[2a02:c207:2009:7858::1]:8333\n+[2a02:c207:2010:302::1]:8333\n+[2a02:c207:3001:5824::1]:8333\n+[2a02:ce80:0:20::1]:8333\n [2a03:4000:2:496::8]:8333\n+[2a03:4000:6:416c::53]:8333\n [2a03:4000:6:8009::1]:8333\n-[2a03:4000:6:8063::bcd0]:8333\n-[2a03:4900:fffc:b::2]:8333\n-[2a03:b0c0:1:d0::d:5001]:8333\n+[2a03:4000:9:8e::1]:8333\n+[2a03:7380:2140:17:51fe:3519:b571:4a13]:8333\n+[2a03:b0c0:0:1010::7a3:1001]:8333\n+[2a03:b0c0:0:1010::7aa:4001]:8333\n+[2a03:b0c0:3:d0::1b99:c001]:8333\n+[2a03:b0c0:3:d0::1b99:e001]:8333\n+[2a03:b0c0:3:d0::1b9a:3001]:8333\n+[2a03:b0c0:3:d0::2208:6001]:8333\n+[2a03:b0c0:3:d0::23f7:1001]:8333\n+[2a03:b0c0:3:d0::23f7:9001]:8333\n+[2a03:b0c0:3:d0::23fb:2001]:8333\n+[2a03:b0c0:3:d0::23fb:3001]:8333\n+[2a03:b0c0:3:d0::23fb:5001]:8333\n+[2a03:b0c0:3:d0::23fb:7001]:8333\n+[2a03:b0c0:3:d0::2400:1]:8333\n+[2a03:b0c0:3:d0::2400:3001]:8333\n+[2a03:b0c0:3:d0::2400:e001]:8333\n+[2a03:b0c0:3:d0::2401:e001]:8333\n+[2a03:b0c0:3:d0::2402:2001]:8333\n+[2a03:b0c0:3:d0::2402:8001]:8333\n+[2a03:b0c0:3:d0::2402:9001]:8333\n+[2a03:b0c0:3:d0::2402:b001]:8333\n+[2a03:b0c0:3:d0::2402:d001]:8333\n+[2a03:b0c0:3:d0::2403:1001]:8333\n+[2a03:b0c0:3:d0::2403:2001]:8333\n+[2a03:b0c0:3:d0::2403:4001]:8333\n+[2a03:b0c0:3:d0::2403:6001]:8333\n+[2a03:b0c0:3:d0::2403:a001]:8333\n+[2a03:b0c0:3:d0::2403:b001]:8333\n+[2a03:b0c0:3:d0::2403:f001]:8333\n+[2a03:b0c0:3:d0::2404:6001]:8333\n+[2a03:b0c0:3:d0::2404:b001]:8333\n [2a03:f80:ed15:149:154:155:235:1]:8333\n-[2a03:f80:ed15:149:154:155:241:1]:8333\n-[2a03:f80:ed16:ca7:ea75:b12d:2af:9e2a]:8333\n-[2a04:1980:3100:1aab:290:faff:fe70:a3d8]:8333\n-[2a04:1980:3100:1aab:e61d:2dff:fe29:f590]:8333\n-[2a04:2f80:6:200::89]:8333\n-[2a04:ac00:1:4a0b:5054:ff:fe00:5af5]:8333\n-[2a04:ad80:0:68::35da]:8333\n-3ffk7iumtx3cegbi.onion:8333\n+[2a04:1980:3100:1aac:e61d:2dff:fe29:f241]:8333\n+[2a04:1980:3100:1aac:e61d:2dff:fe29:f251]:8333\n+[2a04:2180:0:1::5a49:3c06]:8333\n+[2a04:2180:1:7::3]:8333\n+[2a04:2e00:5:2e:9a4b:e1ff:fe62:6dc0]:8333\n+[2a04:3542:1000:910:8492:b8ff:fe91:711d]:8333\n+[2a04:dbc3:fffe:0:e61f:13ff:fe95:8401]:8333\n+[2a06:9fc0:2a06:9fc0:2a06:9fc1:67c:e706]:8333\n+[2c0f:f738:2004:82::]:8333\n+2hryb3uh3tzwgnya.onion:8333\n 3nmbbakinewlgdln.onion:8333\n-4j77gihpokxu2kj4.onion:8333\n-546esc6botbjfbxb.onion:8333\n-5at7sq5nm76xijkd.onion:8333\n-77mx2jsxaoyesz2p.onion:8333\n-7g7j54btiaxhtsiy.onion:8333\n-a6obdgzn67l7exu3.onion:8333\n-ab64h7olpl7qpxci.onion:8333\n-am2a4rahltfuxz6l.onion:8333\n-azuxls4ihrr2mep7.onion:8333\n-bitcoin7bi4op7wb.onion:8333\n-bitcoinostk4e4re.onion:8333\n+3qeri3tmhzmpegyv.onion:8333\n+4wdknmecghcmclq5.onion:8333\n+53tsjt6zq3iasv5q.onion:8333\n+5cg7qeywvwo6vxpt.onion:8333\n+5gbcrgqxcbxj253s.onion:8333\n+6cn4ilbwkrkh7gwo.onion:8333\n+6e4jrnn7igeqxmlf.onion:8333\n+6ymgbvnn6d5nfmv4.onion:8333\n+6zsh3bfduhpo7ldl.onion:8333\n+72fq6phv4fg4rhvh.onion:8333\n+7gdqp6npusk4lfwk.onion:8333\n+a7emxol55e623lqc.onion:8333\n+assbiydziq77zaki.onion:8333\n+bafk5ioatlgt7dgl.onion:8333\n bk7yp6epnmcllq72.onion:8333\n-bmutjfrj5btseddb.onion:8333\n-ceeji4qpfs3ms3zc.onion:8333\n-clexmzqio7yhdao4.onion:8333\n+brwqezn6le54w2bb.onion:8333\n+bs4bq6s6qkvt5hpi.onion:8333\n+bup5n5e3kurvjzf3.onion:8333\n+c2tpqkaz4ihjzwgb.onion:8333\n+cernrmrk5zomzozn.onion:8333\n+cfyegj64ht3jpodr.onion:8333\n+cg5vg54cazzpvoug.onion:8333\n+cgk4u2lxrvml4jvb.onion:8333\n+cjygd7pu5lqkky5j.onion:8333\n+d6wubsdtr46dd5ki.onion:8333\n+dfq6yjc3aelplwr4.onion:8333\n+dqpxwlpnv3z3hznl.onion:8333\n+eamfospuveabaimd.onion:8333\n+ep2mjzox3kvb6ax4.onion:8333\n+fpbxb4wjudiw2w5a.onion:8333\n+fu5hfsbbf5jwsvhv.onion:8333\n+g4freoibsczujle3.onion:8333\n gb5ypqt63du3wfhn.onion:8333\n-h2vlpudzphzqxutd.onion:8333\n-n42h7r6oumcfsbrs.onion:4176\n-ncwk3lutemffcpc4.onion:8333\n+ggdy2pb2avlbtjwq.onion:8333\n+gh2aiddzxmvyrnue.onion:8333\n+gnxgylbgzvaazkq7.onion:8333\n+hnizdxnejel64ubk.onion:8333\n+htvdcmlc3abji2ab.onion:8443\n+hwuboois4gslupgx.onion:8333\n+hxz6gowludlj6d5a.onion:8333\n+j6umo4bnsztpsonc.onion:8333\n+jdunmaocwbbnw565.onion:8333\n+ktv3qlxl7xvmdlf4.onion:8333\n+kvd44sw7skb5folw.onion:8333\n+kwimnzm6vd4zakvl.onion:8333\n+la5xhk3lprxzxmz2.onion:8333\n+lc7cx67end26uutp.onion:8352\n+mwu5og2agcspmgkx.onion:8333\n+mzxkipiyekaoh7my.onion:8333\n+n6rwlrtwpqc7qwo7.onion:8333\n+nj36424yccqph62z.onion:8333\n+o256w7t3vcgktmxk.onion:8333\n+o4sl5na6jeqgi3l6.onion:8333\n okdzjarwekbshnof.onion:8333\n-pjghcivzkoersesd.onion:8333\n-rw7ocjltix26mefn.onion:8333\n-uws7itep7o3yinxo.onion:8333\n-vk3qjdehyy4dwcxw.onion:8333\n+oyebydl2pacx6v26.onion:8333\n+p5mx2imj75dpmime.onion:8333\n+psco6bxjewljrczx.onion:8333\n+pxtgswet6tlgrbwj.onion:8333\n+rb4v3fhgx2zr4rre.onion:8333\n+rjlnp3hwvrsmap6e.onion:8333\n+rlafimkctvz63llg.onion:8333\n+rxjvy5eyttep5tts.onion:8333\n+seoskudzk6vn6mqz.onion:8333\n+tpgdufxxsw3jkrdf.onion:8333\n+tuiyvqgi3o675pjb.onion:8333\n+tx4zd7d5exonnblh.onion:8333\n+uokg6avfgbhofls3.onion:8333\n+v3gjphgqy5hygcml.onion:8333\n+vhdoxqq63xr53ol7.onion:8333\n+visevrizz3quyagj.onion:8333\n vqpye2k5rcqvj5mq.onion:8333\n-wpi7rpvhnndl52ee.onion:8333\n+wfsx2gi7djhy22hk.onion:8333\n+wg6vwmbrzyyzapun.onion:8333\n+xub4w3w4wwk56xiq.onion:8333\n+ycivnom44dmxx4ob.onion:8333\n+ywskufc62bf2fum4.onion:8333\n+z4fax2vxg23t2ddf.onion:8333\n+zo5dklwelmdrpo5n.onion:8333"
      },
      {
        "sha": "396a411689a814025e1f9cfe6be15a4238e3ce9a",
        "filename": "src/chainparamsseeds.h",
        "status": "modified",
        "additions": 1031,
        "deletions": 800,
        "changes": 1831,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a60677e394faf57968be57e44ece127c3bb6881f/src/chainparamsseeds.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a60677e394faf57968be57e44ece127c3bb6881f/src/chainparamsseeds.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsseeds.h?ref=a60677e394faf57968be57e44ece127c3bb6881f"
      }
    ]
  },
  {
    "sha": "2447c1024e6069bfe62ddff65c4e1aaf28f32b38",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNDQ3YzEwMjRlNjA2OWJmZTYyZGRmZjY1YzRlMWFhZjI4ZjMyYjM4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-10T11:38:45Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-10T11:42:53Z"
      },
      "message": "Merge #9698: net: fix socket close race\n\n9a0b784 net: add a lock around hSocket (Cory Fields)\n45e2e08 net: rearrange so that socket accesses can be grouped together (Cory Fields)",
      "tree": {
        "sha": "a929c469faa7df9271676e1024504092a72f92fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a929c469faa7df9271676e1024504092a72f92fb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2447c1024e6069bfe62ddff65c4e1aaf28f32b38",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYnac9AAoJEHSBCwEjRsmmrKsH/3Nhg4shtoBks8iO/tN9ErCf\n++w7OSUElvCCkEpQb2B/CuA/4knAMJy5wFUGi3/RZYT8K6+n08BJN+Y/13tbR5OG\nlg7bxphtHKfpcIsIe7aLHeExCOAaImcQCFW0BktuaaLFbvknQgIEHZWT7ctixFSb\nsZThxh6NGIAbfh8rdDpoFJ8HcUOPmWGnjbpsehc2c0DPfyqQJdUod48QnxZO1MZ5\n9alQsTnFBll6l40lGap4aSHglyE8zE8lhPXFdporAAJqoYAMtDIbIzuGeUn6iIOF\nU/08+sNIrf6cjUNPrECjuw8vHkZVzByxPQAkdkSSgMxmqI/Hyhc0FLcyPgF6cQM=\n=oNsu\n-----END PGP SIGNATURE-----",
        "payload": "tree a929c469faa7df9271676e1024504092a72f92fb\nparent 33f3b21407a38faaaee2d72d16e8eb340fe74657\nparent 9a0b784deaab6b9fffcab227d928987b981d0572\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1486726725 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1486726973 +0100\n\nMerge #9698: net: fix socket close race\n\n9a0b784 net: add a lock around hSocket (Cory Fields)\n45e2e08 net: rearrange so that socket accesses can be grouped together (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2447c1024e6069bfe62ddff65c4e1aaf28f32b38",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2447c1024e6069bfe62ddff65c4e1aaf28f32b38",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2447c1024e6069bfe62ddff65c4e1aaf28f32b38/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "33f3b21407a38faaaee2d72d16e8eb340fe74657",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33f3b21407a38faaaee2d72d16e8eb340fe74657",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/33f3b21407a38faaaee2d72d16e8eb340fe74657"
      },
      {
        "sha": "9a0b784deaab6b9fffcab227d928987b981d0572",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a0b784deaab6b9fffcab227d928987b981d0572",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9a0b784deaab6b9fffcab227d928987b981d0572"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 49,
      "deletions": 26
    },
    "files": [
      {
        "sha": "7c45cff1dd286a509ad50e4ba8303b449ab1dd98",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 26,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2447c1024e6069bfe62ddff65c4e1aaf28f32b38/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2447c1024e6069bfe62ddff65c4e1aaf28f32b38/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=2447c1024e6069bfe62ddff65c4e1aaf28f32b38",
        "patch": "@@ -425,6 +425,7 @@ void CConnman::DumpBanlist()\n void CNode::CloseSocketDisconnect()\n {\n     fDisconnect = true;\n+    LOCK(cs_hSocket);\n     if (hSocket != INVALID_SOCKET)\n     {\n         LogPrint(\"net\", \"disconnecting peer=%d\\n\", id);\n@@ -789,7 +790,13 @@ size_t CConnman::SocketSendData(CNode *pnode) const\n     while (it != pnode->vSendMsg.end()) {\n         const auto &data = *it;\n         assert(data.size() > pnode->nSendOffset);\n-        int nBytes = send(pnode->hSocket, reinterpret_cast<const char*>(data.data()) + pnode->nSendOffset, data.size() - pnode->nSendOffset, MSG_NOSIGNAL | MSG_DONTWAIT);\n+        int nBytes = 0;\n+        {\n+            LOCK(pnode->cs_hSocket);\n+            if (pnode->hSocket == INVALID_SOCKET)\n+                break;\n+            nBytes = send(pnode->hSocket, reinterpret_cast<const char*>(data.data()) + pnode->nSendOffset, data.size() - pnode->nSendOffset, MSG_NOSIGNAL | MSG_DONTWAIT);\n+        }\n         if (nBytes > 0) {\n             pnode->nLastSend = GetSystemTimeInSeconds();\n             pnode->nSendBytes += nBytes;\n@@ -1148,12 +1155,6 @@ void CConnman::ThreadSocketHandler()\n             LOCK(cs_vNodes);\n             BOOST_FOREACH(CNode* pnode, vNodes)\n             {\n-                if (pnode->hSocket == INVALID_SOCKET)\n-                    continue;\n-                FD_SET(pnode->hSocket, &fdsetError);\n-                hSocketMax = std::max(hSocketMax, pnode->hSocket);\n-                have_fds = true;\n-\n                 // Implement the following logic:\n                 // * If there is data to send, select() for sending data. As this only\n                 //   happens when optimistic write failed, we choose to first drain the\n@@ -1164,16 +1165,28 @@ void CConnman::ThreadSocketHandler()\n                 //   receiving data.\n                 // * Hand off all complete messages to the processor, to be handled without\n                 //   blocking here.\n+\n+                bool select_recv = !pnode->fPauseRecv;\n+                bool select_send;\n                 {\n                     LOCK(pnode->cs_vSend);\n-                    if (!pnode->vSendMsg.empty()) {\n-                        FD_SET(pnode->hSocket, &fdsetSend);\n-                        continue;\n-                    }\n+                    select_send = !pnode->vSendMsg.empty();\n                 }\n-                {\n-                    if (!pnode->fPauseRecv)\n-                        FD_SET(pnode->hSocket, &fdsetRecv);\n+\n+                LOCK(pnode->cs_hSocket);\n+                if (pnode->hSocket == INVALID_SOCKET)\n+                    continue;\n+\n+                FD_SET(pnode->hSocket, &fdsetError);\n+                hSocketMax = std::max(hSocketMax, pnode->hSocket);\n+                have_fds = true;\n+\n+                if (select_send) {\n+                    FD_SET(pnode->hSocket, &fdsetSend);\n+                    continue;\n+                }\n+                if (select_recv) {\n+                    FD_SET(pnode->hSocket, &fdsetRecv);\n                 }\n             }\n         }\n@@ -1227,15 +1240,30 @@ void CConnman::ThreadSocketHandler()\n             //\n             // Receive\n             //\n-            if (pnode->hSocket == INVALID_SOCKET)\n-                continue;\n-            if (FD_ISSET(pnode->hSocket, &fdsetRecv) || FD_ISSET(pnode->hSocket, &fdsetError))\n+            bool recvSet = false;\n+            bool sendSet = false;\n+            bool errorSet = false;\n+            {\n+                LOCK(pnode->cs_hSocket);\n+                if (pnode->hSocket == INVALID_SOCKET)\n+                    continue;\n+                recvSet = FD_ISSET(pnode->hSocket, &fdsetRecv);\n+                sendSet = FD_ISSET(pnode->hSocket, &fdsetSend);\n+                errorSet = FD_ISSET(pnode->hSocket, &fdsetError);\n+            }\n+            if (recvSet || errorSet)\n             {\n                 {\n                     {\n                         // typical socket buffer is 8K-64K\n                         char pchBuf[0x10000];\n-                        int nBytes = recv(pnode->hSocket, pchBuf, sizeof(pchBuf), MSG_DONTWAIT);\n+                        int nBytes = 0;\n+                        {\n+                            LOCK(pnode->cs_hSocket);\n+                            if (pnode->hSocket == INVALID_SOCKET)\n+                                continue;\n+                            nBytes = recv(pnode->hSocket, pchBuf, sizeof(pchBuf), MSG_DONTWAIT);\n+                        }\n                         if (nBytes > 0)\n                         {\n                             bool notify = false;\n@@ -1284,9 +1312,7 @@ void CConnman::ThreadSocketHandler()\n             //\n             // Send\n             //\n-            if (pnode->hSocket == INVALID_SOCKET)\n-                continue;\n-            if (FD_ISSET(pnode->hSocket, &fdsetSend))\n+            if (sendSet)\n             {\n                 LOCK(pnode->cs_vSend);\n                 size_t nBytes = SocketSendData(pnode);\n@@ -2275,8 +2301,7 @@ void CConnman::Stop()\n \n     // Close sockets\n     BOOST_FOREACH(CNode* pnode, vNodes)\n-        if (pnode->hSocket != INVALID_SOCKET)\n-            CloseSocket(pnode->hSocket);\n+        pnode->CloseSocketDisconnect();\n     BOOST_FOREACH(ListenSocket& hListenSocket, vhListenSocket)\n         if (hListenSocket.socket != INVALID_SOCKET)\n             if (!CloseSocket(hListenSocket.socket))\n@@ -2677,9 +2702,6 @@ void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n     size_t nBytesSent = 0;\n     {\n         LOCK(pnode->cs_vSend);\n-        if(pnode->hSocket == INVALID_SOCKET) {\n-            return;\n-        }\n         bool optimisticSend(pnode->vSendMsg.empty());\n \n         //log total amount of bytes per command"
      },
      {
        "sha": "e5a19e0f43ef484525e5b4c531c9c3e4941b4f7c",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2447c1024e6069bfe62ddff65c4e1aaf28f32b38/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2447c1024e6069bfe62ddff65c4e1aaf28f32b38/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=2447c1024e6069bfe62ddff65c4e1aaf28f32b38",
        "patch": "@@ -572,6 +572,7 @@ class CNode\n     uint64_t nSendBytes;\n     std::deque<std::vector<unsigned char>> vSendMsg;\n     CCriticalSection cs_vSend;\n+    CCriticalSection cs_hSocket;\n \n     CCriticalSection cs_vProcessMsg;\n     std::list<CNetMessage> vProcessMsg;"
      }
    ]
  },
  {
    "sha": "321d0fc6b6624c65508f8b9059418cb936f0bbbe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMjFkMGZjNmI2NjI0YzY1NTA4ZjhiOTA1OTQxOGNiOTM2ZjBiYmJl",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-06T07:34:57Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-10T16:32:39Z"
      },
      "message": "net: fix a few races. Credit @TheBlueMatt\n\nThese are (afaik) all long-standing races or concurrent accesses. Going\nforward, we can clean these up so that they're not all individual atomic\naccesses.\n\n- Reintroduce cs_vRecv to guard receive-specific vars\n- Lock vRecv/vSend for CNodeStats\n- Make some vars atomic.\n- Only set the connection time in CNode's constructor so that it doesn't change",
      "tree": {
        "sha": "57a99a1ede16e5449db2d230ddbc7a3b561547be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/57a99a1ede16e5449db2d230ddbc7a3b561547be"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/321d0fc6b6624c65508f8b9059418cb936f0bbbe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/321d0fc6b6624c65508f8b9059418cb936f0bbbe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/321d0fc6b6624c65508f8b9059418cb936f0bbbe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/321d0fc6b6624c65508f8b9059418cb936f0bbbe/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2447c1024e6069bfe62ddff65c4e1aaf28f32b38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2447c1024e6069bfe62ddff65c4e1aaf28f32b38",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2447c1024e6069bfe62ddff65c4e1aaf28f32b38"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 22,
      "deletions": 15
    },
    "files": [
      {
        "sha": "c96ca469ff62eb8e1686e173333bed71e01d2bec",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 5,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/321d0fc6b6624c65508f8b9059418cb936f0bbbe/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/321d0fc6b6624c65508f8b9059418cb936f0bbbe/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=321d0fc6b6624c65508f8b9059418cb936f0bbbe",
        "patch": "@@ -389,7 +389,6 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n         uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n         CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, pszDest ? pszDest : \"\", false);\n         pnode->nServicesExpected = ServiceFlags(addrConnect.nServices & nRelevantServices);\n-        pnode->nTimeConnected = GetSystemTimeInSeconds();\n         pnode->AddRef();\n \n         return pnode;\n@@ -612,10 +611,16 @@ void CNode::copyStats(CNodeStats &stats)\n     X(fInbound);\n     X(fAddnode);\n     X(nStartingHeight);\n-    X(nSendBytes);\n-    X(mapSendBytesPerMsgCmd);\n-    X(nRecvBytes);\n-    X(mapRecvBytesPerMsgCmd);\n+    {\n+        LOCK(cs_vSend);\n+        X(mapSendBytesPerMsgCmd);\n+        X(nSendBytes);\n+    }\n+    {\n+        LOCK(cs_vRecv);\n+        X(mapRecvBytesPerMsgCmd);\n+        X(nRecvBytes);\n+    }\n     X(fWhitelisted);\n \n     // It is common for nodes with good ping times to suddenly become lagged,\n@@ -643,6 +648,7 @@ bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete\n {\n     complete = false;\n     int64_t nTimeMicros = GetTimeMicros();\n+    LOCK(cs_vRecv);\n     nLastRecv = nTimeMicros / 1000000;\n     nRecvBytes += nBytes;\n     while (nBytes > 0) {"
      },
      {
        "sha": "89501c764e50abb2bdd82d9927dd9a9aacbcc949",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 10,
        "deletions": 9,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/321d0fc6b6624c65508f8b9059418cb936f0bbbe/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/321d0fc6b6624c65508f8b9059418cb936f0bbbe/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=321d0fc6b6624c65508f8b9059418cb936f0bbbe",
        "patch": "@@ -573,6 +573,7 @@ class CNode\n     std::deque<std::vector<unsigned char>> vSendMsg;\n     CCriticalSection cs_vSend;\n     CCriticalSection cs_hSocket;\n+    CCriticalSection cs_vRecv;\n \n     CCriticalSection cs_vProcessMsg;\n     std::list<CNetMessage> vProcessMsg;\n@@ -584,10 +585,10 @@ class CNode\n     uint64_t nRecvBytes;\n     std::atomic<int> nRecvVersion;\n \n-    int64_t nLastSend;\n-    int64_t nLastRecv;\n+    std::atomic<int64_t> nLastSend;\n+    std::atomic<int64_t> nLastRecv;\n     int64_t nTimeConnected;\n-    int64_t nTimeOffset;\n+    std::atomic<int64_t> nTimeOffset;\n     const CAddress addr;\n     std::string addrName;\n     CService addrLocal;\n@@ -614,7 +615,7 @@ class CNode\n     CSemaphoreGrant grantOutbound;\n     CCriticalSection cs_filter;\n     CBloomFilter* pfilter;\n-    int nRefCount;\n+    std::atomic<int> nRefCount;\n     const NodeId id;\n \n     const uint64_t nKeyedNetGroup;\n@@ -665,15 +666,15 @@ class CNode\n \n     // Ping time measurement:\n     // The pong reply we're expecting, or 0 if no pong expected.\n-    uint64_t nPingNonceSent;\n+    std::atomic<uint64_t> nPingNonceSent;\n     // Time (in usec) the last ping was sent, or 0 if no ping was ever sent.\n-    int64_t nPingUsecStart;\n+    std::atomic<int64_t> nPingUsecStart;\n     // Last measured round-trip time.\n-    int64_t nPingUsecTime;\n+    std::atomic<int64_t> nPingUsecTime;\n     // Best measured round-trip time.\n-    int64_t nMinPingUsecTime;\n+    std::atomic<int64_t> nMinPingUsecTime;\n     // Whether a ping is requested.\n-    bool fPingQueued;\n+    std::atomic<bool> fPingQueued;\n     // Minimum fee rate with which to filter inv's to this node\n     CAmount minFeeFilter;\n     CCriticalSection cs_feeFilter;"
      },
      {
        "sha": "e89a897bd544df74b5444fe706422ea2ab4f3bfe",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/321d0fc6b6624c65508f8b9059418cb936f0bbbe/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/321d0fc6b6624c65508f8b9059418cb936f0bbbe/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=321d0fc6b6624c65508f8b9059418cb936f0bbbe",
        "patch": "@@ -2450,7 +2450,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                     if (pingUsecTime > 0) {\n                         // Successful ping time measurement, replace previous\n                         pfrom->nPingUsecTime = pingUsecTime;\n-                        pfrom->nMinPingUsecTime = std::min(pfrom->nMinPingUsecTime, pingUsecTime);\n+                        pfrom->nMinPingUsecTime = std::min(pfrom->nMinPingUsecTime.load(), pingUsecTime);\n                     } else {\n                         // This should never happen\n                         sProblem = \"Timing mishap\";"
      }
    ]
  },
  {
    "sha": "644f1234e22626a7b5618a1dae60a8457a4063b1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NDRmMTIzNGUyMjYyNmE3YjU2MThhMWRhZTYwYTg0NTdhNDA2M2Ix",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-06T16:42:49Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-10T16:32:40Z"
      },
      "message": "Make nTimeConnected const in CNode",
      "tree": {
        "sha": "1126ea900c892ed9ec77b62e11640e18bd5f7c0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1126ea900c892ed9ec77b62e11640e18bd5f7c0a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/644f1234e22626a7b5618a1dae60a8457a4063b1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/644f1234e22626a7b5618a1dae60a8457a4063b1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/644f1234e22626a7b5618a1dae60a8457a4063b1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/644f1234e22626a7b5618a1dae60a8457a4063b1/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "321d0fc6b6624c65508f8b9059418cb936f0bbbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/321d0fc6b6624c65508f8b9059418cb936f0bbbe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/321d0fc6b6624c65508f8b9059418cb936f0bbbe"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "0e6e00d58b7216511b7a979510f770b16c94df80",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/644f1234e22626a7b5618a1dae60a8457a4063b1/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/644f1234e22626a7b5618a1dae60a8457a4063b1/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=644f1234e22626a7b5618a1dae60a8457a4063b1",
        "patch": "@@ -2574,6 +2574,7 @@ unsigned int CConnman::GetReceiveFloodSize() const { return nReceiveFloodSize; }\n unsigned int CConnman::GetSendBufferSize() const{ return nSendBufferMaxSize; }\n \n CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress& addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const std::string& addrNameIn, bool fInboundIn) :\n+    nTimeConnected(GetSystemTimeInSeconds()),\n     addr(addrIn),\n     fInbound(fInboundIn),\n     id(idIn),\n@@ -2593,7 +2594,6 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     nLastRecv = 0;\n     nSendBytes = 0;\n     nRecvBytes = 0;\n-    nTimeConnected = GetSystemTimeInSeconds();\n     nTimeOffset = 0;\n     addrName = addrNameIn == \"\" ? addr.ToStringIPPort() : addrNameIn;\n     nVersion = 0;"
      },
      {
        "sha": "4bbcfac88b13b0745516a409e111017d6792c006",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/644f1234e22626a7b5618a1dae60a8457a4063b1/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/644f1234e22626a7b5618a1dae60a8457a4063b1/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=644f1234e22626a7b5618a1dae60a8457a4063b1",
        "patch": "@@ -587,7 +587,7 @@ class CNode\n \n     std::atomic<int64_t> nLastSend;\n     std::atomic<int64_t> nLastRecv;\n-    int64_t nTimeConnected;\n+    const int64_t nTimeConnected;\n     std::atomic<int64_t> nTimeOffset;\n     const CAddress addr;\n     std::string addrName;"
      }
    ]
  },
  {
    "sha": "ae683c1b1960b32134f5a5a29504691c91f39cf3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZTY4M2MxYjE5NjBiMzIxMzRmNWE1YTI5NTA0NjkxYzkxZjM5Y2Yz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-06T16:44:38Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-10T16:32:40Z"
      },
      "message": "Avoid copying CNodeStats to make helgrind OK with buggy std::string",
      "tree": {
        "sha": "28065ae3fc560bc8e36fb9b0568422d142ff3371",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/28065ae3fc560bc8e36fb9b0568422d142ff3371"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ae683c1b1960b32134f5a5a29504691c91f39cf3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae683c1b1960b32134f5a5a29504691c91f39cf3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ae683c1b1960b32134f5a5a29504691c91f39cf3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae683c1b1960b32134f5a5a29504691c91f39cf3/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "644f1234e22626a7b5618a1dae60a8457a4063b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/644f1234e22626a7b5618a1dae60a8457a4063b1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/644f1234e22626a7b5618a1dae60a8457a4063b1"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 2,
      "deletions": 3
    },
    "files": [
      {
        "sha": "b7243dce2050591a71f1ead56fada78e7b8f06c5",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae683c1b1960b32134f5a5a29504691c91f39cf3/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae683c1b1960b32134f5a5a29504691c91f39cf3/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=ae683c1b1960b32134f5a5a29504691c91f39cf3",
        "patch": "@@ -2420,9 +2420,8 @@ void CConnman::GetNodeStats(std::vector<CNodeStats>& vstats)\n     vstats.reserve(vNodes.size());\n     for(std::vector<CNode*>::iterator it = vNodes.begin(); it != vNodes.end(); ++it) {\n         CNode* pnode = *it;\n-        CNodeStats stats;\n-        pnode->copyStats(stats);\n-        vstats.push_back(stats);\n+        vstats.emplace_back();\n+        pnode->copyStats(vstats.back());\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "512731bed0782f10092de35a960153b17ecc11eb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MTI3MzFiZWQwNzgyZjEwMDkyZGUzNWE5NjAxNTNiMTdlY2MxMWVi",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-06T16:53:34Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-10T16:32:40Z"
      },
      "message": "Access fRelayTxes with cs_filter lock in copyStats",
      "tree": {
        "sha": "f2026be6a805a95efc78a6063a815e2f87bcbe15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f2026be6a805a95efc78a6063a815e2f87bcbe15"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/512731bed0782f10092de35a960153b17ecc11eb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/512731bed0782f10092de35a960153b17ecc11eb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/512731bed0782f10092de35a960153b17ecc11eb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/512731bed0782f10092de35a960153b17ecc11eb/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ae683c1b1960b32134f5a5a29504691c91f39cf3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae683c1b1960b32134f5a5a29504691c91f39cf3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ae683c1b1960b32134f5a5a29504691c91f39cf3"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ea8a2a0a4aefd912e6da77946a27853c770065e5",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512731bed0782f10092de35a960153b17ecc11eb/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512731bed0782f10092de35a960153b17ecc11eb/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=512731bed0782f10092de35a960153b17ecc11eb",
        "patch": "@@ -600,7 +600,10 @@ void CNode::copyStats(CNodeStats &stats)\n     stats.nodeid = this->GetId();\n     X(nServices);\n     X(addr);\n-    X(fRelayTxes);\n+    {\n+        LOCK(cs_filter);\n+        X(fRelayTxes);\n+    }\n     X(nLastSend);\n     X(nLastRecv);\n     X(nTimeConnected);"
      }
    ]
  },
  {
    "sha": "96f42d8a12871b8d5c4e31fd27d8135f97c6b3e0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NmY0MmQ4YTEyODcxYjhkNWM0ZTMxZmQyN2Q4MTM1Zjk3YzZiM2Uw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-06T17:15:30Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-10T16:32:40Z"
      },
      "message": "Make nStartingHeight atomic",
      "tree": {
        "sha": "5935b61ce9d80ea69f50a206f9dae5cf982d2153",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5935b61ce9d80ea69f50a206f9dae5cf982d2153"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/96f42d8a12871b8d5c4e31fd27d8135f97c6b3e0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96f42d8a12871b8d5c4e31fd27d8135f97c6b3e0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/96f42d8a12871b8d5c4e31fd27d8135f97c6b3e0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96f42d8a12871b8d5c4e31fd27d8135f97c6b3e0/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "512731bed0782f10092de35a960153b17ecc11eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/512731bed0782f10092de35a960153b17ecc11eb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/512731bed0782f10092de35a960153b17ecc11eb"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "566284c70b6d3610778fd152cc10a9dea088e022",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96f42d8a12871b8d5c4e31fd27d8135f97c6b3e0/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96f42d8a12871b8d5c4e31fd27d8135f97c6b3e0/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=96f42d8a12871b8d5c4e31fd27d8135f97c6b3e0",
        "patch": "@@ -628,7 +628,7 @@ class CNode\n \n public:\n     uint256 hashContinue;\n-    int nStartingHeight;\n+    std::atomic<int> nStartingHeight;\n \n     // flood relay\n     std::vector<CAddress> vAddrToSend;"
      }
    ]
  },
  {
    "sha": "0f3187261519c7568ef4211ce12b9740a3c1200f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZjMxODcyNjE1MTljNzU2OGVmNDIxMWNlMTJiOTc0MGEzYzEyMDBm",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-06T17:20:16Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-10T16:32:41Z"
      },
      "message": "Make nServices atomic",
      "tree": {
        "sha": "dde1f3a08dfe991f4ec9c901f739b3d047620398",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dde1f3a08dfe991f4ec9c901f739b3d047620398"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0f3187261519c7568ef4211ce12b9740a3c1200f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f3187261519c7568ef4211ce12b9740a3c1200f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0f3187261519c7568ef4211ce12b9740a3c1200f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f3187261519c7568ef4211ce12b9740a3c1200f/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "96f42d8a12871b8d5c4e31fd27d8135f97c6b3e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96f42d8a12871b8d5c4e31fd27d8135f97c6b3e0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/96f42d8a12871b8d5c4e31fd27d8135f97c6b3e0"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "cf742a8caa59c2c0ac0296b5b276f203e430a19d",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f3187261519c7568ef4211ce12b9740a3c1200f/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f3187261519c7568ef4211ce12b9740a3c1200f/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=0f3187261519c7568ef4211ce12b9740a3c1200f",
        "patch": "@@ -564,7 +564,7 @@ class CNode\n     friend class CConnman;\n public:\n     // socket\n-    ServiceFlags nServices;\n+    std::atomic<ServiceFlags> nServices;\n     ServiceFlags nServicesExpected;\n     SOCKET hSocket;\n     size_t nSendSize; // total size of all vSendMsg entries"
      }
    ]
  },
  {
    "sha": "22b4966a29501c4f3f2e970ac5008fbd91e665a9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMmI0OTY2YTI5NTAxYzRmM2YyZTk3MGFjNTAwOGZiZDkxZTY2NWE5",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-06T17:08:31Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-10T16:32:41Z"
      },
      "message": "Move [clean|str]SubVer writes/copyStats into a lock",
      "tree": {
        "sha": "2beb02b98598c74d44f4471bf157405804b7c321",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2beb02b98598c74d44f4471bf157405804b7c321"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/22b4966a29501c4f3f2e970ac5008fbd91e665a9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22b4966a29501c4f3f2e970ac5008fbd91e665a9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/22b4966a29501c4f3f2e970ac5008fbd91e665a9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22b4966a29501c4f3f2e970ac5008fbd91e665a9/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0f3187261519c7568ef4211ce12b9740a3c1200f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f3187261519c7568ef4211ce12b9740a3c1200f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0f3187261519c7568ef4211ce12b9740a3c1200f"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 13,
      "deletions": 4
    },
    "files": [
      {
        "sha": "e7521f86d14373781e5dbdddf329d328a97bd245",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22b4966a29501c4f3f2e970ac5008fbd91e665a9/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22b4966a29501c4f3f2e970ac5008fbd91e665a9/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=22b4966a29501c4f3f2e970ac5008fbd91e665a9",
        "patch": "@@ -610,7 +610,10 @@ void CNode::copyStats(CNodeStats &stats)\n     X(nTimeOffset);\n     X(addrName);\n     X(nVersion);\n-    X(cleanSubVer);\n+    {\n+        LOCK(cs_SubVer);\n+        X(cleanSubVer);\n+    }\n     X(fInbound);\n     X(fAddnode);\n     X(nStartingHeight);"
      },
      {
        "sha": "ddc050eb1f67c299f8c135602b41fab648746d7e",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22b4966a29501c4f3f2e970ac5008fbd91e665a9/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22b4966a29501c4f3f2e970ac5008fbd91e665a9/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=22b4966a29501c4f3f2e970ac5008fbd91e665a9",
        "patch": "@@ -598,6 +598,7 @@ class CNode\n     // store the sanitized version in cleanSubVer. The original should be used when dealing with\n     // the network or wire types and the cleaned string used when displayed or logged.\n     std::string strSubVer, cleanSubVer;\n+    CCriticalSection cs_SubVer; // used for both cleanSubVer and strSubVer\n     bool fWhitelisted; // This peer can bypass DoS banning.\n     bool fFeeler; // If true this node is being used as a short lived feeler.\n     bool fOneShot;"
      },
      {
        "sha": "b5feac2d5926662e6ea5d597490e05e2e3cfa170",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22b4966a29501c4f3f2e970ac5008fbd91e665a9/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22b4966a29501c4f3f2e970ac5008fbd91e665a9/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=22b4966a29501c4f3f2e970ac5008fbd91e665a9",
        "patch": "@@ -1211,6 +1211,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         int nVersion;\n         int nSendVersion;\n         std::string strSubVer;\n+        std::string cleanSubVer;\n         int nStartingHeight = -1;\n         bool fRelay = true;\n \n@@ -1246,6 +1247,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             vRecv >> addrFrom >> nNonce;\n         if (!vRecv.empty()) {\n             vRecv >> LIMITED_STRING(strSubVer, MAX_SUBVERSION_LENGTH);\n+            cleanSubVer = SanitizeString(strSubVer);\n         }\n         if (!vRecv.empty()) {\n             vRecv >> nStartingHeight;\n@@ -1273,8 +1275,11 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n \n         pfrom->nServices = nServices;\n         pfrom->addrLocal = addrMe;\n-        pfrom->strSubVer = strSubVer;\n-        pfrom->cleanSubVer = SanitizeString(strSubVer);\n+        {\n+            LOCK(pfrom->cs_SubVer);\n+            pfrom->strSubVer = strSubVer;\n+            pfrom->cleanSubVer = cleanSubVer;\n+        }\n         pfrom->nStartingHeight = nStartingHeight;\n         pfrom->fClient = !(nServices & NODE_NETWORK);\n         {\n@@ -1330,7 +1335,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             remoteAddr = \", peeraddr=\" + pfrom->addr.ToString();\n \n         LogPrintf(\"receive version message: %s: version %d, blocks=%d, us=%s, peer=%d%s\\n\",\n-                  pfrom->cleanSubVer, pfrom->nVersion,\n+                  cleanSubVer, pfrom->nVersion,\n                   pfrom->nStartingHeight, addrMe.ToString(), pfrom->id,\n                   remoteAddr);\n "
      }
    ]
  },
  {
    "sha": "d8f2b8a8c032b83a3bd90750e58abaeece7e34e7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOGYyYjhhOGMwMzJiODNhM2JkOTA3NTBlNThhYmFlZWNlN2UzNGU3",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-06T22:38:57Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-10T16:32:41Z"
      },
      "message": "Make nTimeBestReceived atomic",
      "tree": {
        "sha": "3c68096b426ed16e3be504c7f6cd4b767d05c1d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3c68096b426ed16e3be504c7f6cd4b767d05c1d0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8f2b8a8c032b83a3bd90750e58abaeece7e34e7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8f2b8a8c032b83a3bd90750e58abaeece7e34e7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d8f2b8a8c032b83a3bd90750e58abaeece7e34e7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8f2b8a8c032b83a3bd90750e58abaeece7e34e7/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "22b4966a29501c4f3f2e970ac5008fbd91e665a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22b4966a29501c4f3f2e970ac5008fbd91e665a9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/22b4966a29501c4f3f2e970ac5008fbd91e665a9"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "62397e68ce0cbc75ae7a22bc8ed531eafd38b199",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8f2b8a8c032b83a3bd90750e58abaeece7e34e7/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8f2b8a8c032b83a3bd90750e58abaeece7e34e7/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=d8f2b8a8c032b83a3bd90750e58abaeece7e34e7",
        "patch": "@@ -36,7 +36,7 @@\n # error \"Bitcoin cannot be compiled without assertions.\"\n #endif\n \n-int64_t nTimeBestReceived = 0; // Used only to inform the wallet of when we last received a block\n+std::atomic<int64_t> nTimeBestReceived(0); // Used only to inform the wallet of when we last received a block\n \n struct IteratorComparator\n {"
      }
    ]
  },
  {
    "sha": "036073bf87c07f8d69e39168dd93a52f1aafe85c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMzYwNzNiZjg3YzA3ZjhkNjllMzkxNjhkZDkzYTUyZjFhYWZlODVj",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-06T17:04:34Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-10T16:32:41Z"
      },
      "message": "Move CNode::addrName accesses behind locked accessors",
      "tree": {
        "sha": "95cdeea1af6e92752009b265b4f1b67e1d040f7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/95cdeea1af6e92752009b265b4f1b67e1d040f7f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/036073bf87c07f8d69e39168dd93a52f1aafe85c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/036073bf87c07f8d69e39168dd93a52f1aafe85c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/036073bf87c07f8d69e39168dd93a52f1aafe85c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/036073bf87c07f8d69e39168dd93a52f1aafe85c/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8f2b8a8c032b83a3bd90750e58abaeece7e34e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8f2b8a8c032b83a3bd90750e58abaeece7e34e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8f2b8a8c032b83a3bd90750e58abaeece7e34e7"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 30,
      "deletions": 10
    },
    "files": [
      {
        "sha": "8aa12619843fa9c409bbbcb12181973bbf5bd4a5",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 8,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/036073bf87c07f8d69e39168dd93a52f1aafe85c/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/036073bf87c07f8d69e39168dd93a52f1aafe85c/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=036073bf87c07f8d69e39168dd93a52f1aafe85c",
        "patch": "@@ -307,9 +307,11 @@ CNode* CConnman::FindNode(const CSubNet& subNet)\n CNode* CConnman::FindNode(const std::string& addrName)\n {\n     LOCK(cs_vNodes);\n-    BOOST_FOREACH(CNode* pnode, vNodes)\n-        if (pnode->addrName == addrName)\n+    BOOST_FOREACH(CNode* pnode, vNodes) {\n+        if (pnode->GetAddrName() == addrName) {\n             return (pnode);\n+        }\n+    }\n     return NULL;\n }\n \n@@ -373,9 +375,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n             CNode* pnode = FindNode((CService)addrConnect);\n             if (pnode)\n             {\n-                if (pnode->addrName.empty()) {\n-                    pnode->addrName = std::string(pszDest);\n-                }\n+                pnode->MaybeSetAddrName(std::string(pszDest));\n                 CloseSocket(hSocket);\n                 LogPrintf(\"Failed to open new connection, already connected\\n\");\n                 return NULL;\n@@ -593,6 +593,19 @@ void CConnman::AddWhitelistedRange(const CSubNet &subnet) {\n     vWhitelistedRange.push_back(subnet);\n }\n \n+\n+std::string CNode::GetAddrName() const {\n+    LOCK(cs_addrName);\n+    return addrName;\n+}\n+\n+void CNode::MaybeSetAddrName(const std::string& addrNameIn) {\n+    LOCK(cs_addrName);\n+    if (addrName.empty()) {\n+        addrName = addrNameIn;\n+    }\n+}\n+\n #undef X\n #define X(name) stats.name = name\n void CNode::copyStats(CNodeStats &stats)\n@@ -608,7 +621,7 @@ void CNode::copyStats(CNodeStats &stats)\n     X(nLastRecv);\n     X(nTimeConnected);\n     X(nTimeOffset);\n-    X(addrName);\n+    stats.addrName = GetAddrName();\n     X(nVersion);\n     {\n         LOCK(cs_SubVer);\n@@ -1798,8 +1811,9 @@ std::vector<AddedNodeInfo> CConnman::GetAddedNodeInfo()\n             if (pnode->addr.IsValid()) {\n                 mapConnected[pnode->addr] = pnode->fInbound;\n             }\n-            if (!pnode->addrName.empty()) {\n-                mapConnectedByName[pnode->addrName] = std::make_pair(pnode->fInbound, static_cast<const CService&>(pnode->addr));\n+            std::string addrName = pnode->GetAddrName();\n+            if (!addrName.empty()) {\n+                mapConnectedByName[std::move(addrName)] = std::make_pair(pnode->fInbound, static_cast<const CService&>(pnode->addr));\n             }\n         }\n     }"
      },
      {
        "sha": "2cfc74e3d55c9c6f8565cec2f6e568c8c8d7b327",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/036073bf87c07f8d69e39168dd93a52f1aafe85c/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/036073bf87c07f8d69e39168dd93a52f1aafe85c/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=036073bf87c07f8d69e39168dd93a52f1aafe85c",
        "patch": "@@ -590,7 +590,6 @@ class CNode\n     const int64_t nTimeConnected;\n     std::atomic<int64_t> nTimeOffset;\n     const CAddress addr;\n-    std::string addrName;\n     CService addrLocal;\n     std::atomic<int> nVersion;\n     // strSubVer is whatever byte array we read from the wire. However, this field is intended\n@@ -696,6 +695,9 @@ class CNode\n     const int nMyStartingHeight;\n     int nSendVersion;\n     std::list<CNetMessage> vRecvMsg;  // Used only by SocketHandler thread\n+\n+    mutable CCriticalSection cs_addrName;\n+    std::string addrName;\n public:\n \n     NodeId GetId() const {\n@@ -798,6 +800,10 @@ class CNode\n     {\n         return nLocalServices;\n     }\n+\n+    std::string GetAddrName() const;\n+    //! Sets the addrName only if it was not previously set\n+    void MaybeSetAddrName(const std::string& addrNameIn);\n };\n \n "
      },
      {
        "sha": "b0c9b3c71ba170786e5cdab38b6ec439cd855d92",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/036073bf87c07f8d69e39168dd93a52f1aafe85c/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/036073bf87c07f8d69e39168dd93a52f1aafe85c/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=036073bf87c07f8d69e39168dd93a52f1aafe85c",
        "patch": "@@ -264,7 +264,7 @@ void PushNodeVersion(CNode *pnode, CConnman& connman, int64_t nTime)\n \n void InitializeNode(CNode *pnode, CConnman& connman) {\n     CAddress addr = pnode->addr;\n-    std::string addrName = pnode->addrName;\n+    std::string addrName = pnode->GetAddrName();\n     NodeId nodeid = pnode->GetId();\n     {\n         LOCK(cs_main);"
      }
    ]
  },
  {
    "sha": "db2dc7a58cb0a3df58188b748df8e0d04ba76f00",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYjJkYzdhNThjYjBhM2RmNTgxODhiNzQ4ZGY4ZTBkMDRiYTc2ZjAw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-06T17:18:51Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-10T16:32:41Z"
      },
      "message": "Move CNode::addrLocal access behind locked accessors",
      "tree": {
        "sha": "061df504e100195d1dc93313652c9e2a1ecdc545",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/061df504e100195d1dc93313652c9e2a1ecdc545"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/db2dc7a58cb0a3df58188b748df8e0d04ba76f00",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db2dc7a58cb0a3df58188b748df8e0d04ba76f00",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/db2dc7a58cb0a3df58188b748df8e0d04ba76f00",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db2dc7a58cb0a3df58188b748df8e0d04ba76f00/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "036073bf87c07f8d69e39168dd93a52f1aafe85c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/036073bf87c07f8d69e39168dd93a52f1aafe85c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/036073bf87c07f8d69e39168dd93a52f1aafe85c"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 29,
      "deletions": 7
    },
    "files": [
      {
        "sha": "505eb971c09e944d8bd90eb4f525d8b8e3131bf3",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 4,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db2dc7a58cb0a3df58188b748df8e0d04ba76f00/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db2dc7a58cb0a3df58188b748df8e0d04ba76f00/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=db2dc7a58cb0a3df58188b748df8e0d04ba76f00",
        "patch": "@@ -164,8 +164,9 @@ int GetnScore(const CService& addr)\n // Is our peer's addrLocal potentially useful as an external IP source?\n bool IsPeerAddrLocalGood(CNode *pnode)\n {\n-    return fDiscover && pnode->addr.IsRoutable() && pnode->addrLocal.IsRoutable() &&\n-           !IsLimited(pnode->addrLocal.GetNetwork());\n+    CService addrLocal = pnode->GetAddrLocal();\n+    return fDiscover && pnode->addr.IsRoutable() && addrLocal.IsRoutable() &&\n+           !IsLimited(addrLocal.GetNetwork());\n }\n \n // pushes our own address to a peer\n@@ -180,7 +181,7 @@ void AdvertiseLocal(CNode *pnode)\n         if (IsPeerAddrLocalGood(pnode) && (!addrLocal.IsRoutable() ||\n              GetRand((GetnScore(addrLocal) > LOCAL_MANUAL) ? 8:2) == 0))\n         {\n-            addrLocal.SetIP(pnode->addrLocal);\n+            addrLocal.SetIP(pnode->GetAddrLocal());\n         }\n         if (addrLocal.IsRoutable())\n         {\n@@ -606,6 +607,20 @@ void CNode::MaybeSetAddrName(const std::string& addrNameIn) {\n     }\n }\n \n+CService CNode::GetAddrLocal() const {\n+    LOCK(cs_addrLocal);\n+    return addrLocal;\n+}\n+\n+void CNode::SetAddrLocal(const CService& addrLocalIn) {\n+    LOCK(cs_addrLocal);\n+    if (addrLocal.IsValid()) {\n+        error(\"Addr local already set for node: %i. Refusing to change from %s to %s\", id, addrLocal.ToString(), addrLocalIn.ToString());\n+    } else {\n+        addrLocal = addrLocalIn;\n+    }\n+}\n+\n #undef X\n #define X(name) stats.name = name\n void CNode::copyStats(CNodeStats &stats)\n@@ -659,7 +674,8 @@ void CNode::copyStats(CNodeStats &stats)\n     stats.dPingWait = (((double)nPingUsecWait) / 1e6);\n \n     // Leave string empty if addrLocal invalid (not filled in yet)\n-    stats.addrLocal = addrLocal.IsValid() ? addrLocal.ToString() : \"\";\n+    CService addrLocalUnlocked = GetAddrLocal();\n+    stats.addrLocal = addrLocalUnlocked.IsValid() ? addrLocalUnlocked.ToString() : \"\";\n }\n #undef X\n "
      },
      {
        "sha": "29b6a44c88ff2a0dfbccc9f87720e5bbab5ef42c",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db2dc7a58cb0a3df58188b748df8e0d04ba76f00/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db2dc7a58cb0a3df58188b748df8e0d04ba76f00/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=db2dc7a58cb0a3df58188b748df8e0d04ba76f00",
        "patch": "@@ -590,7 +590,6 @@ class CNode\n     const int64_t nTimeConnected;\n     std::atomic<int64_t> nTimeOffset;\n     const CAddress addr;\n-    CService addrLocal;\n     std::atomic<int> nVersion;\n     // strSubVer is whatever byte array we read from the wire. However, this field is intended\n     // to be printed out, displayed to humans in various forms and so on. So we sanitize it and\n@@ -698,6 +697,9 @@ class CNode\n \n     mutable CCriticalSection cs_addrName;\n     std::string addrName;\n+\n+    CService addrLocal;\n+    mutable CCriticalSection cs_addrLocal;\n public:\n \n     NodeId GetId() const {\n@@ -731,6 +733,10 @@ class CNode\n     void SetSendVersion(int nVersionIn);\n     int GetSendVersion() const;\n \n+    CService GetAddrLocal() const;\n+    //! May not be called more than once\n+    void SetAddrLocal(const CService& addrLocalIn);\n+\n     CNode* AddRef()\n     {\n         nRefCount++;"
      },
      {
        "sha": "7d76aa0b4860ff34a098865e4d7a8a133df290e1",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db2dc7a58cb0a3df58188b748df8e0d04ba76f00/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db2dc7a58cb0a3df58188b748df8e0d04ba76f00/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=db2dc7a58cb0a3df58188b748df8e0d04ba76f00",
        "patch": "@@ -1274,7 +1274,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERACK));\n \n         pfrom->nServices = nServices;\n-        pfrom->addrLocal = addrMe;\n+        pfrom->SetAddrLocal(addrMe);\n         {\n             LOCK(pfrom->cs_SubVer);\n             pfrom->strSubVer = strSubVer;\n@@ -1315,7 +1315,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                     LogPrint(\"net\", \"ProcessMessages: advertising address %s\\n\", addr.ToString());\n                     pfrom->PushAddress(addr, insecure_rand);\n                 } else if (IsPeerAddrLocalGood(pfrom)) {\n-                    addr.SetIP(pfrom->addrLocal);\n+                    addr.SetIP(addrMe);\n                     LogPrint(\"net\", \"ProcessMessages: advertising address %s\\n\", addr.ToString());\n                     pfrom->PushAddress(addr, insecure_rand);\n                 }"
      }
    ]
  },
  {
    "sha": "b860915f8b0dae98e57a254d11575ea41f5c5a79",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiODYwOTE1ZjhiMGRhZTk4ZTU3YTI1NGQxMTU3NWVhNDFmNWM1YTc5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-02-10T17:02:10Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-02-10T17:02:56Z"
      },
      "message": "Merge #9707: Fix RPC failure testing\n\n9db8eec Fix RPC failure testing (John Newbery)",
      "tree": {
        "sha": "743d0c2798aa8181e31cf08e9f9ddfd7745f4c2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/743d0c2798aa8181e31cf08e9f9ddfd7745f4c2b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b860915f8b0dae98e57a254d11575ea41f5c5a79",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCgAGBQJYnfJAAAoJEC1/I3LlD+E3e6gIAJ/Ess2J4vcBmsvPmgAx3s/A\nOH8WygpzyKYZSWWhxcT8dzjmT/fKbROr/u95FtOvNppBqbR0PZ352L0ALJvaodll\nxN3vsQQ2BGU5bfo5pO/C2ktye92MmLHE8EV81YPw7uHtGkAftVjzL2fldE1ek09A\nA0B0Ikuyo5uKx/wevytTVSxFh+vdKOepb47sugPr8KdJL6NUfKgGB/n0Ch0acAuv\nxN19BQnFAxkvpLxePXYBz4b3pA5OZ1nJvM/xQEhFSK8YDL6LOg4ox1/BwcaIn2nf\nURhiS83Ta2jiPsAdUu1EqGOI2OW9iUR0zoumx6EPP1cqTHWG2Bgx//nc5hbzb5w=\n=pFZZ\n-----END PGP SIGNATURE-----",
        "payload": "tree 743d0c2798aa8181e31cf08e9f9ddfd7745f4c2b\nparent 2447c1024e6069bfe62ddff65c4e1aaf28f32b38\nparent 9db8eecac1c713c760c0217b6acb7455c657fa8b\nauthor MarcoFalke <falke.marco@gmail.com> 1486746130 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1486746176 +0100\n\nMerge #9707: Fix RPC failure testing\n\n9db8eec Fix RPC failure testing (John Newbery)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b860915f8b0dae98e57a254d11575ea41f5c5a79",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b860915f8b0dae98e57a254d11575ea41f5c5a79",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b860915f8b0dae98e57a254d11575ea41f5c5a79/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2447c1024e6069bfe62ddff65c4e1aaf28f32b38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2447c1024e6069bfe62ddff65c4e1aaf28f32b38",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2447c1024e6069bfe62ddff65c4e1aaf28f32b38"
      },
      {
        "sha": "9db8eecac1c713c760c0217b6acb7455c657fa8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9db8eecac1c713c760c0217b6acb7455c657fa8b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9db8eecac1c713c760c0217b6acb7455c657fa8b"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 21,
      "deletions": 4
    },
    "files": [
      {
        "sha": "da2d8f040f0a2c51121ac688b9dbfaf9067dbcef",
        "filename": "qa/rpc-tests/rpcnamedargs.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b860915f8b0dae98e57a254d11575ea41f5c5a79/qa/rpc-tests/rpcnamedargs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b860915f8b0dae98e57a254d11575ea41f5c5a79/qa/rpc-tests/rpcnamedargs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rpcnamedargs.py?ref=b860915f8b0dae98e57a254d11575ea41f5c5a79",
        "patch": "@@ -37,7 +37,7 @@ def run_test(self):\n         h = node.help(command='getinfo')\n         assert(h.startswith('getinfo\\n'))\n \n-        assert_raises_jsonrpc(-8, node.help, random='getinfo')\n+        assert_raises_jsonrpc(-8, 'Unknown named parameter', node.help, random='getinfo')\n \n         h = node.getblockhash(height=0)\n         node.getblock(blockhash=h)"
      },
      {
        "sha": "dc8555c44c08cb0a15fbaa9cdd579c7fa25f1521",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 20,
        "deletions": 3,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b860915f8b0dae98e57a254d11575ea41f5c5a79/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b860915f8b0dae98e57a254d11575ea41f5c5a79/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=b860915f8b0dae98e57a254d11575ea41f5c5a79",
        "patch": "@@ -550,13 +550,30 @@ def assert_raises_message(exc, message, fun, *args, **kwds):\n     else:\n         raise AssertionError(\"No exception raised\")\n \n-def assert_raises_jsonrpc(code, fun, *args, **kwds):\n-    '''Check for specific JSONRPC exception code'''\n+def assert_raises_jsonrpc(code, message, fun, *args, **kwds):\n+    \"\"\"Run an RPC and verify that a specific JSONRPC exception code and message is raised.\n+\n+    Calls function `fun` with arguments `args` and `kwds`. Catches a JSONRPCException\n+    and verifies that the error code and message are as expected. Throws AssertionError if\n+    no JSONRPCException was returned or if the error code/message are not as expected.\n+\n+    Args:\n+        code (int), optional: the error code returned by the RPC call (defined\n+            in src/rpc/protocol.h). Set to None if checking the error code is not required.\n+        message (string), optional: [a substring of] the error string returned by the\n+            RPC call. Set to None if checking the error string is not required\n+        fun (function): the function to call. This should be the name of an RPC.\n+        args*: positional arguments for the function.\n+        kwds**: named arguments for the function.\n+    \"\"\"\n     try:\n         fun(*args, **kwds)\n     except JSONRPCException as e:\n-        if e.error[\"code\"] != code:\n+        # JSONRPCException was thrown as expected. Check the code and message values are correct.\n+        if (code is not None) and (code != e.error[\"code\"]):\n             raise AssertionError(\"Unexpected JSONRPC error code %i\" % e.error[\"code\"])\n+        if (message is not None) and (message not in e.error['message']):\n+            raise AssertionError(\"Expected substring not found:\"+e.error['message'])\n     except Exception as e:\n         raise AssertionError(\"Unexpected exception raised: \"+type(e).__name__)\n     else:"
      }
    ]
  },
  {
    "sha": "442887f27fb5809e72862d4385eba86588bc97d0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NDI4ODdmMjdmYjU4MDllNzI4NjJkNDM4NWViYTg2NTg4YmM5N2Qw",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-03T21:23:13Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-10T20:40:28Z"
      },
      "message": "Require timestamps for importmulti keys\n\nAdditionally, accept a \"now\" timestamp, to allow avoiding rescans for keys\nwhich are known never to have been used.\n\nNote that the behavior when \"now\" is specified is slightly different than the\nprevious behavior when no timestamp was specified at all. Previously, when no\ntimestamp was specified, it would avoid rescanning during the importmulti call,\nbut set the key's nCreateTime value to 1, which would not prevent future block\nreads in later ScanForWalletTransactions calls. With this change, passing a\n\"now\" timestamp will set the key's nCreateTime to the current block time\ninstead of 1.\n\nFixes #9491",
      "tree": {
        "sha": "203a8fb48e26aaa644aa5f21c9a3bf92ef886786",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/203a8fb48e26aaa644aa5f21c9a3bf92ef886786"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/442887f27fb5809e72862d4385eba86588bc97d0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/442887f27fb5809e72862d4385eba86588bc97d0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/442887f27fb5809e72862d4385eba86588bc97d0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/442887f27fb5809e72862d4385eba86588bc97d0/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02464da5e4aa8c19d4fff3859dcdee822e2af78c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02464da5e4aa8c19d4fff3859dcdee822e2af78c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02464da5e4aa8c19d4fff3859dcdee822e2af78c"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 64,
      "deletions": 9
    },
    "files": [
      {
        "sha": "8f60e63e2e50dd7ecc7c2f84b5aace5a68d83440",
        "filename": "qa/rpc-tests/import-rescan.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/442887f27fb5809e72862d4385eba86588bc97d0/qa/rpc-tests/import-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/442887f27fb5809e72862d4385eba86588bc97d0/qa/rpc-tests/import-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/import-rescan.py?ref=442887f27fb5809e72862d4385eba86588bc97d0",
        "patch": "@@ -33,6 +33,7 @@ def call_import_rpc(call, data, address, scriptPubKey, pubkey, key, label, node,\n             \"scriptPubKey\": {\n                 \"address\": address\n             },\n+            \"timestamp\": \"now\",\n             \"pubkeys\": [pubkey] if data == Data.pub else [],\n             \"keys\": [key] if data == Data.priv else [],\n             \"label\": label,"
      },
      {
        "sha": "b4d4b6c5b8048faee3fcc2b895d37e51446fb4cc",
        "filename": "qa/rpc-tests/importmulti.py",
        "status": "modified",
        "additions": 34,
        "deletions": 3,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/442887f27fb5809e72862d4385eba86588bc97d0/qa/rpc-tests/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/442887f27fb5809e72862d4385eba86588bc97d0/qa/rpc-tests/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/importmulti.py?ref=442887f27fb5809e72862d4385eba86588bc97d0",
        "patch": "@@ -52,7 +52,8 @@ def run_test (self):\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n-            }\n+            },\n+            \"timestamp\": \"now\",\n         }])\n         assert_equal(result[0]['success'], True)\n         address_assert = self.nodes[1].validateaddress(address['address'])\n@@ -65,6 +66,7 @@ def run_test (self):\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n             \"internal\": True\n         }])\n         assert_equal(result[0]['success'], True)\n@@ -76,7 +78,8 @@ def run_test (self):\n         print(\"Should not import a scriptPubKey without internal flag\")\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n-            \"scriptPubKey\": address['scriptPubKey']\n+            \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n         }])\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -8)\n@@ -93,6 +96,7 @@ def run_test (self):\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n             },\n+            \"timestamp\": \"now\",\n             \"pubkeys\": [ address['pubkey'] ]\n         }])\n         assert_equal(result[0]['success'], True)\n@@ -106,6 +110,7 @@ def run_test (self):\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         request = [{\n             \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n             \"pubkeys\": [ address['pubkey'] ],\n             \"internal\": True\n         }]\n@@ -120,6 +125,7 @@ def run_test (self):\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         request = [{\n             \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n             \"pubkeys\": [ address['pubkey'] ]\n         }]\n         result = self.nodes[1].importmulti(request)\n@@ -137,6 +143,7 @@ def run_test (self):\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n             },\n+            \"timestamp\": \"now\",\n             \"keys\": [ self.nodes[0].dumpprivkey(address['address']) ]\n         }])\n         assert_equal(result[0]['success'], True)\n@@ -151,6 +158,7 @@ def run_test (self):\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n             },\n+            \"timestamp\": \"now\",\n             \"keys\": [ self.nodes[0].dumpprivkey(address['address']) ],\n             \"watchonly\": True\n         }])\n@@ -166,6 +174,7 @@ def run_test (self):\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n             \"keys\": [ self.nodes[0].dumpprivkey(address['address']) ],\n             \"internal\": True\n         }])\n@@ -179,6 +188,7 @@ def run_test (self):\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n             \"keys\": [ self.nodes[0].dumpprivkey(address['address']) ]\n         }])\n         assert_equal(result[0]['success'], False)\n@@ -203,7 +213,8 @@ def run_test (self):\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": multi_sig_script['address']\n-            }\n+            },\n+            \"timestamp\": \"now\",\n         }])\n         assert_equal(result[0]['success'], True)\n         address_assert = self.nodes[1].validateaddress(multi_sig_script['address'])\n@@ -229,6 +240,7 @@ def run_test (self):\n             \"scriptPubKey\": {\n                 \"address\": multi_sig_script['address']\n             },\n+            \"timestamp\": \"now\",\n             \"redeemscript\": multi_sig_script['redeemScript']\n         }])\n         assert_equal(result[0]['success'], True)\n@@ -253,6 +265,7 @@ def run_test (self):\n             \"scriptPubKey\": {\n                 \"address\": multi_sig_script['address']\n             },\n+            \"timestamp\": \"now\",\n             \"redeemscript\": multi_sig_script['redeemScript'],\n             \"keys\": [ self.nodes[0].dumpprivkey(sig_address_1['address']), self.nodes[0].dumpprivkey(sig_address_2['address'])]\n         }])\n@@ -277,6 +290,7 @@ def run_test (self):\n             \"scriptPubKey\": {\n                 \"address\": multi_sig_script['address']\n             },\n+            \"timestamp\": \"now\",\n             \"redeemscript\": multi_sig_script['redeemScript'],\n             \"keys\": [ self.nodes[0].dumpprivkey(sig_address_1['address']), self.nodes[0].dumpprivkey(sig_address_2['address'])],\n             \"watchonly\": True\n@@ -294,6 +308,7 @@ def run_test (self):\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n             },\n+            \"timestamp\": \"now\",\n             \"pubkeys\": [ address2['pubkey'] ]\n         }])\n         assert_equal(result[0]['success'], False)\n@@ -310,6 +325,7 @@ def run_test (self):\n         address2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         request = [{\n             \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n             \"pubkeys\": [ address2['pubkey'] ],\n             \"internal\": True\n         }]\n@@ -330,6 +346,7 @@ def run_test (self):\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n             },\n+            \"timestamp\": \"now\",\n             \"keys\": [ self.nodes[0].dumpprivkey(address2['address']) ]\n         }])\n         assert_equal(result[0]['success'], False)\n@@ -346,6 +363,7 @@ def run_test (self):\n         address2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n             \"keys\": [ self.nodes[0].dumpprivkey(address2['address']) ],\n             \"internal\": True\n         }])\n@@ -356,5 +374,18 @@ def run_test (self):\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n \n+        # Bad or missing timestamps\n+        print(\"Should throw on invalid or missing timestamp values\")\n+        assert_raises_message(JSONRPCException, 'Missing required timestamp field for key',\n+            self.nodes[1].importmulti, [{\n+                \"scriptPubKey\": address['scriptPubKey'],\n+            }])\n+        assert_raises_message(JSONRPCException, 'Expected number or \"now\" timestamp value for key. got type string',\n+            self.nodes[1].importmulti, [{\n+                \"scriptPubKey\": address['scriptPubKey'],\n+                \"timestamp\": \"\",\n+            }])\n+\n+\n if __name__ == '__main__':\n     ImportMultiTest ().main ()"
      },
      {
        "sha": "4674c95bfe606e1eabe9cdf78f7c588e08936448",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 6,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/442887f27fb5809e72862d4385eba86588bc97d0/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/442887f27fb5809e72862d4385eba86588bc97d0/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=442887f27fb5809e72862d4385eba86588bc97d0",
        "patch": "@@ -640,7 +640,8 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n }\n \n \n-UniValue processImport(const UniValue& data) {\n+UniValue ProcessImport(const UniValue& data, const int64_t timestamp)\n+{\n     try {\n         bool success = false;\n \n@@ -659,7 +660,6 @@ UniValue processImport(const UniValue& data) {\n         const bool& internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n         const bool& watchOnly = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;\n         const string& label = data.exists(\"label\") && !internal ? data[\"label\"].get_str() : \"\";\n-        const int64_t& timestamp = data.exists(\"timestamp\") && data[\"timestamp\"].get_int64() > 1 ? data[\"timestamp\"].get_int64() : 1;\n \n         bool isScript = scriptPubKey.getType() == UniValue::VSTR;\n         bool isP2SH = strRedeemScript.length() > 0;\n@@ -958,6 +958,20 @@ UniValue processImport(const UniValue& data) {\n     }\n }\n \n+int64_t GetImportTimestamp(const UniValue& data, int64_t now)\n+{\n+    if (data.exists(\"timestamp\")) {\n+        const UniValue& timestamp = data[\"timestamp\"];\n+        if (timestamp.isNum()) {\n+            return timestamp.get_int64();\n+        } else if (timestamp.isStr() && timestamp.get_str() == \"now\") {\n+            return now;\n+        }\n+        throw JSONRPCError(RPC_TYPE_ERROR, strprintf(\"Expected number or \\\"now\\\" timestamp value for key. got type %s\", uvTypeName(timestamp.type())));\n+    }\n+    throw JSONRPCError(RPC_TYPE_ERROR, \"Missing required timestamp field for key\");\n+}\n+\n UniValue importmulti(const JSONRPCRequest& mainRequest)\n {\n     // clang-format off\n@@ -970,13 +984,17 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n             \"  [     (array of json objects)\\n\"\n             \"    {\\n\"\n             \"      \\\"scriptPubKey\\\": \\\"<script>\\\" | { \\\"address\\\":\\\"<address>\\\" }, (string / json, required) Type of scriptPubKey (string for script, json for address)\\n\"\n+            \"      \\\"timestamp\\\": timestamp | \\\"now\\\"                        , (integer / string, required) Creation time of the key in seconds since epoch (Jan 1 1970 GMT),\\n\"\n+            \"                                                              or the string \\\"now\\\" to substitute the current synced blockchain time. The timestamp of the oldest\\n\"\n+            \"                                                              key will determine how far back blockchain rescans need to begin for missing wallet transactions.\\n\"\n+            \"                                                              \\\"now\\\" can be specified to bypass scanning, for keys which are known to never have been used, and\\n\"\n+            \"                                                              0 can be specified to scan the entire blockchain.\\n\"\n             \"      \\\"redeemscript\\\": \\\"<script>\\\"                            , (string, optional) Allowed only if the scriptPubKey is a P2SH address or a P2SH scriptPubKey\\n\"\n             \"      \\\"pubkeys\\\": [\\\"<pubKey>\\\", ... ]                         , (array, optional) Array of strings giving pubkeys that must occur in the output or redeemscript\\n\"\n             \"      \\\"keys\\\": [\\\"<key>\\\", ... ]                               , (array, optional) Array of strings giving private keys whose corresponding public keys must occur in the output or redeemscript\\n\"\n             \"      \\\"internal\\\": <true>                                    , (boolean, optional, default: false) Stating whether matching outputs should be be treated as not incoming payments\\n\"\n             \"      \\\"watchonly\\\": <true>                                   , (boolean, optional, default: false) Stating whether matching outputs should be considered watched even when they're not spendable, only allowed if keys are empty\\n\"\n             \"      \\\"label\\\": <label>                                      , (string, optional, default: '') Label to assign to the address (aka account name, for now), only allowed with internal=false\\n\"\n-            \"      \\\"timestamp\\\": 1454686740,                                (integer, optional, default now) Timestamp\\n\"\n             \"    }\\n\"\n             \"  ,...\\n\"\n             \"  ]\\n\"\n@@ -1015,6 +1033,12 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n     EnsureWalletIsUnlocked();\n \n+    // Verify all timestamps are present before importing any keys.\n+    const int64_t now = chainActive.Tip() ? chainActive.Tip()->GetBlockTime() : 0;\n+    for (const UniValue& data : requests.getValues()) {\n+        GetImportTimestamp(data, now);\n+    }\n+\n     bool fRunScan = false;\n     const int64_t minimumTimestamp = 1;\n     int64_t nLowestTimestamp = 0;\n@@ -1028,7 +1052,8 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n     UniValue response(UniValue::VARR);\n \n     BOOST_FOREACH (const UniValue& data, requests.getValues()) {\n-        const UniValue result = processImport(data);\n+        const int64_t timestamp = std::max(GetImportTimestamp(data, now), minimumTimestamp);\n+        const UniValue result = ProcessImport(data, timestamp);\n         response.push_back(result);\n \n         if (!fRescan) {\n@@ -1041,8 +1066,6 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n         }\n \n         // Get the lowest timestamp.\n-        const int64_t& timestamp = data.exists(\"timestamp\") && data[\"timestamp\"].get_int64() > minimumTimestamp ? data[\"timestamp\"].get_int64() : minimumTimestamp;\n-\n         if (timestamp < nLowestTimestamp) {\n             nLowestTimestamp = timestamp;\n         }"
      }
    ]
  },
  {
    "sha": "3cf991756cf357b651c6415e3d950e5aa9d355ab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozY2Y5OTE3NTZjZjM1N2I2NTFjNjQxNWUzZDk1MGU1YWE5ZDM1NWFi",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-06T16:13:05Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-10T20:40:28Z"
      },
      "message": "Add test to check new importmulti \"now\" value\n\nEasiest way to test this was to expose the timestamp via the validateaddress\nRPC (which was already looking up and returning key metadata).",
      "tree": {
        "sha": "f38afae8fed8244798b0e85eb7d64e24a8a2ed01",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f38afae8fed8244798b0e85eb7d64e24a8a2ed01"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3cf991756cf357b651c6415e3d950e5aa9d355ab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cf991756cf357b651c6415e3d950e5aa9d355ab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3cf991756cf357b651c6415e3d950e5aa9d355ab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cf991756cf357b651c6415e3d950e5aa9d355ab/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "442887f27fb5809e72862d4385eba86588bc97d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/442887f27fb5809e72862d4385eba86588bc97d0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/442887f27fb5809e72862d4385eba86588bc97d0"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 13,
      "deletions": 4
    },
    "files": [
      {
        "sha": "b9874ccb855dd6a650e4dc4318a4afa8a29dc334",
        "filename": "qa/rpc-tests/importmulti.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cf991756cf357b651c6415e3d950e5aa9d355ab/qa/rpc-tests/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cf991756cf357b651c6415e3d950e5aa9d355ab/qa/rpc-tests/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/importmulti.py?ref=3cf991756cf357b651c6415e3d950e5aa9d355ab",
        "patch": "@@ -139,6 +139,7 @@ def run_test (self):\n         # Address + Private key + !watchonly\n         print(\"Should import an address with private key\")\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['time']\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n@@ -150,6 +151,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], True)\n+        assert_equal(address_assert['timestamp'], timestamp)\n \n         # Address + Private key + watchonly\n         print(\"Should not import an address with private key and with watchonly\")"
      },
      {
        "sha": "25fad3c2e38e315efe901a9080f3499274e9179c",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cf991756cf357b651c6415e3d950e5aa9d355ab/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cf991756cf357b651c6415e3d950e5aa9d355ab/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=3cf991756cf357b651c6415e3d950e5aa9d355ab",
        "patch": "@@ -167,6 +167,7 @@ UniValue validateaddress(const JSONRPCRequest& request)\n             \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string) The hex value of the raw public key\\n\"\n             \"  \\\"iscompressed\\\" : true|false,  (boolean) If the address is compressed\\n\"\n             \"  \\\"account\\\" : \\\"account\\\"         (string) DEPRECATED. The account associated with the address, \\\"\\\" is the default account\\n\"\n+            \"  \\\"timestamp\\\" : timestamp,        (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n             \"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n             \"  \\\"hdmasterkeyid\\\" : \\\"<hash160>\\\" (string, optional) The Hash160 of the HD master pubkey\\n\"\n             \"}\\n\"\n@@ -204,10 +205,16 @@ UniValue validateaddress(const JSONRPCRequest& request)\n         if (pwalletMain && pwalletMain->mapAddressBook.count(dest))\n             ret.push_back(Pair(\"account\", pwalletMain->mapAddressBook[dest].name));\n         CKeyID keyID;\n-        if (pwalletMain && address.GetKeyID(keyID) && pwalletMain->mapKeyMetadata.count(keyID) && !pwalletMain->mapKeyMetadata[keyID].hdKeypath.empty())\n-        {\n-            ret.push_back(Pair(\"hdkeypath\", pwalletMain->mapKeyMetadata[keyID].hdKeypath));\n-            ret.push_back(Pair(\"hdmasterkeyid\", pwalletMain->mapKeyMetadata[keyID].hdMasterKeyID.GetHex()));\n+        if (pwalletMain) {\n+            const auto& meta = pwalletMain->mapKeyMetadata;\n+            auto it = address.GetKeyID(keyID) ? meta.find(keyID) : meta.end();\n+            if (it != meta.end()) {\n+                ret.push_back(Pair(\"timestamp\", it->second.nCreateTime));\n+                if (!it->second.hdKeypath.empty()) {\n+                    ret.push_back(Pair(\"hdkeypath\", it->second.hdKeypath));\n+                    ret.push_back(Pair(\"hdmasterkeyid\", it->second.hdMasterKeyID.GetHex()));\n+                }\n+            }\n         }\n #endif\n     }"
      }
    ]
  },
  {
    "sha": "266a8114cbe2a87a6c84d7690a7716a18d782c56",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNjZhODExNGNiZTJhODdhNmM4NGQ3NjkwYTc3MTZhMThkNzgyYzU2",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-07T16:08:08Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-10T20:40:28Z"
      },
      "message": "Use MTP for importmulti \"now\" timestamps",
      "tree": {
        "sha": "772a6f3de292c0c246d151ab23babce021f21748",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/772a6f3de292c0c246d151ab23babce021f21748"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/266a8114cbe2a87a6c84d7690a7716a18d782c56",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/266a8114cbe2a87a6c84d7690a7716a18d782c56",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/266a8114cbe2a87a6c84d7690a7716a18d782c56",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/266a8114cbe2a87a6c84d7690a7716a18d782c56/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3cf991756cf357b651c6415e3d950e5aa9d355ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cf991756cf357b651c6415e3d950e5aa9d355ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3cf991756cf357b651c6415e3d950e5aa9d355ab"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "52e40d6c1cc3d07fe4c17649cf6f6d8741299d86",
        "filename": "qa/rpc-tests/importmulti.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/266a8114cbe2a87a6c84d7690a7716a18d782c56/qa/rpc-tests/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/266a8114cbe2a87a6c84d7690a7716a18d782c56/qa/rpc-tests/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/importmulti.py?ref=266a8114cbe2a87a6c84d7690a7716a18d782c56",
        "patch": "@@ -139,7 +139,7 @@ def run_test (self):\n         # Address + Private key + !watchonly\n         print(\"Should import an address with private key\")\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['time']\n+        timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']"
      },
      {
        "sha": "9310a320c76c4737eaabcadcde7eccc3c43f9033",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/266a8114cbe2a87a6c84d7690a7716a18d782c56/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/266a8114cbe2a87a6c84d7690a7716a18d782c56/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=266a8114cbe2a87a6c84d7690a7716a18d782c56",
        "patch": "@@ -1034,7 +1034,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n     EnsureWalletIsUnlocked();\n \n     // Verify all timestamps are present before importing any keys.\n-    const int64_t now = chainActive.Tip() ? chainActive.Tip()->GetBlockTime() : 0;\n+    const int64_t now = chainActive.Tip() ? chainActive.Tip()->GetMedianTimePast() : 0;\n     for (const UniValue& data : requests.getValues()) {\n         GetImportTimestamp(data, now);\n     }"
      }
    ]
  },
  {
    "sha": "a58370e6a2d4dce50eefbcab5bde9f14facef8fc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNTgzNzBlNmEyZDRkY2U1MGVlZmJjYWI1YmRlOWYxNGZhY2VmOGZj",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2016-11-08T21:28:20Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-10T20:49:00Z"
      },
      "message": "Dedup nTimeFirstKey update logic\n\nAlso make nTimeFirstKey member variable private.\n\nThis is just a cleanup change, it doesn't change behavior in any significant\nway.",
      "tree": {
        "sha": "b5c4fd59bba41e4383f1536d908f0fcedbe176f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b5c4fd59bba41e4383f1536d908f0fcedbe176f8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a58370e6a2d4dce50eefbcab5bde9f14facef8fc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a58370e6a2d4dce50eefbcab5bde9f14facef8fc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a58370e6a2d4dce50eefbcab5bde9f14facef8fc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a58370e6a2d4dce50eefbcab5bde9f14facef8fc/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "266a8114cbe2a87a6c84d7690a7716a18d782c56",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/266a8114cbe2a87a6c84d7690a7716a18d782c56",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/266a8114cbe2a87a6c84d7690a7716a18d782c56"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 24,
      "deletions": 23
    },
    "files": [
      {
        "sha": "f358d720cd930be66c33a03804ae359eea566785",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 9,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a58370e6a2d4dce50eefbcab5bde9f14facef8fc/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a58370e6a2d4dce50eefbcab5bde9f14facef8fc/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=a58370e6a2d4dce50eefbcab5bde9f14facef8fc",
        "patch": "@@ -143,7 +143,7 @@ UniValue importprivkey(const JSONRPCRequest& request)\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n \n         // whenever a key is imported, we need to scan the whole chain\n-        pwalletMain->nTimeFirstKey = 1; // 0 would be considered 'no value'\n+        pwalletMain->UpdateTimeFirstKey(1);\n \n         if (fRescan) {\n             pwalletMain->ScanForWalletTransactions(chainActive.Genesis(), true);\n@@ -500,8 +500,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n     while (pindex && pindex->pprev && pindex->GetBlockTime() > nTimeBegin - 7200)\n         pindex = pindex->pprev;\n \n-    if (!pwalletMain->nTimeFirstKey || nTimeBegin < pwalletMain->nTimeFirstKey)\n-        pwalletMain->nTimeFirstKey = nTimeBegin;\n+    pwalletMain->UpdateTimeFirstKey(nTimeBegin);\n \n     LogPrintf(\"Rescanning last %i blocks\\n\", chainActive.Height() - pindex->nHeight + 1);\n     pwalletMain->ScanForWalletTransactions(pindex);\n@@ -782,9 +781,7 @@ UniValue ProcessImport(const UniValue& data, const int64_t timestamp)\n                         throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n                     }\n \n-                    if (timestamp < pwalletMain->nTimeFirstKey) {\n-                        pwalletMain->nTimeFirstKey = timestamp;\n-                    }\n+                    pwalletMain->UpdateTimeFirstKey(timestamp);\n                 }\n             }\n \n@@ -912,9 +909,7 @@ UniValue ProcessImport(const UniValue& data, const int64_t timestamp)\n                     throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n                 }\n \n-                if (timestamp < pwalletMain->nTimeFirstKey) {\n-                    pwalletMain->nTimeFirstKey = timestamp;\n-                }\n+                pwalletMain->UpdateTimeFirstKey(timestamp);\n \n                 success = true;\n             }"
      },
      {
        "sha": "192af22cb83968dfdbaa2748c846e829497bf5c6",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 5,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a58370e6a2d4dce50eefbcab5bde9f14facef8fc/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a58370e6a2d4dce50eefbcab5bde9f14facef8fc/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=a58370e6a2d4dce50eefbcab5bde9f14facef8fc",
        "patch": "@@ -113,8 +113,7 @@ CPubKey CWallet::GenerateNewKey()\n     assert(secret.VerifyPubKey(pubkey));\n \n     mapKeyMetadata[pubkey.GetID()] = metadata;\n-    if (!nTimeFirstKey || nCreationTime < nTimeFirstKey)\n-        nTimeFirstKey = nCreationTime;\n+    UpdateTimeFirstKey(nCreationTime);\n \n     if (!AddKeyPubKey(secret, pubkey))\n         throw std::runtime_error(std::string(__func__) + \": AddKey failed\");\n@@ -210,9 +209,7 @@ bool CWallet::AddCryptedKey(const CPubKey &vchPubKey,\n bool CWallet::LoadKeyMetadata(const CPubKey &pubkey, const CKeyMetadata &meta)\n {\n     AssertLockHeld(cs_wallet); // mapKeyMetadata\n-    if (meta.nCreateTime && (!nTimeFirstKey || meta.nCreateTime < nTimeFirstKey))\n-        nTimeFirstKey = meta.nCreateTime;\n-\n+    UpdateTimeFirstKey(meta.nCreateTime);\n     mapKeyMetadata[pubkey.GetID()] = meta;\n     return true;\n }\n@@ -222,6 +219,18 @@ bool CWallet::LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigne\n     return CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret);\n }\n \n+void CWallet::UpdateTimeFirstKey(int64_t nCreateTime)\n+{\n+    AssertLockHeld(cs_wallet);\n+    if (nCreateTime <= 1) {\n+        // Cannot determine birthday information, so set the wallet birthday to\n+        // the beginning of time.\n+        nTimeFirstKey = 1;\n+    } else if (!nTimeFirstKey || nCreateTime < nTimeFirstKey) {\n+        nTimeFirstKey = nCreateTime;\n+    }\n+}\n+\n bool CWallet::AddCScript(const CScript& redeemScript)\n {\n     if (!CCryptoKeyStore::AddCScript(redeemScript))"
      },
      {
        "sha": "8d3ee9dddcf6e1732b21c8fcaeec2204ad9ab5b9",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a58370e6a2d4dce50eefbcab5bde9f14facef8fc/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a58370e6a2d4dce50eefbcab5bde9f14facef8fc/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=a58370e6a2d4dce50eefbcab5bde9f14facef8fc",
        "patch": "@@ -611,6 +611,9 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool fFileBacked;\n \n     std::set<int64_t> setKeyPool;\n+\n+    int64_t nTimeFirstKey;\n+\n public:\n     /*\n      * Main wallet lock.\n@@ -688,8 +691,6 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     std::set<COutPoint> setLockedCoins;\n \n-    int64_t nTimeFirstKey;\n-\n     const CWalletTx* GetWalletTx(const uint256& hash) const;\n \n     //! check whether we are allowed to upgrade (or already support) to the named feature\n@@ -730,6 +731,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool LoadKeyMetadata(const CPubKey &pubkey, const CKeyMetadata &metadata);\n \n     bool LoadMinVersion(int nVersion) { AssertLockHeld(cs_wallet); nWalletVersion = nVersion; nWalletMaxVersion = std::max(nWalletMaxVersion, nVersion); return true; }\n+    void UpdateTimeFirstKey(int64_t nCreateTime);\n \n     //! Adds an encrypted key to the store, and saves it to disk.\n     bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);"
      },
      {
        "sha": "15e1e4c45f6e080a5e5662350d038f91f81649cf",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a58370e6a2d4dce50eefbcab5bde9f14facef8fc/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a58370e6a2d4dce50eefbcab5bde9f14facef8fc/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=a58370e6a2d4dce50eefbcab5bde9f14facef8fc",
        "patch": "@@ -357,7 +357,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n \n             // Watch-only addresses have no birthday information for now,\n             // so set the wallet birthday to the beginning of time.\n-            pwallet->nTimeFirstKey = 1;\n+            pwallet->UpdateTimeFirstKey(1);\n         }\n         else if (strType == \"key\" || strType == \"wkey\")\n         {\n@@ -467,11 +467,6 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             wss.nKeyMeta++;\n \n             pwallet->LoadKeyMetadata(vchPubKey, keyMeta);\n-\n-            // find earliest key creation time, as wallet birthday\n-            if (!pwallet->nTimeFirstKey ||\n-                (keyMeta.nCreateTime < pwallet->nTimeFirstKey))\n-                pwallet->nTimeFirstKey = keyMeta.nCreateTime;\n         }\n         else if (strType == \"defaultkey\")\n         {\n@@ -626,7 +621,7 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n \n     // nTimeFirstKey is only reliable if all keys have metadata\n     if ((wss.nKeys + wss.nCKeys) != wss.nKeyMeta)\n-        pwallet->nTimeFirstKey = 1; // 0 would be considered 'no value'\n+        pwallet->UpdateTimeFirstKey(1);\n \n     BOOST_FOREACH(uint256 hash, wss.vWalletUpgrade)\n         WriteTx(pwallet->mapWallet[hash]);"
      }
    ]
  },
  {
    "sha": "a80f98b1c7a49432dc53d18d0fb51ac334de96be",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphODBmOThiMWM3YTQ5NDMyZGM1M2QxOGQwZmI1MWFjMzM0ZGU5NmJl",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2016-11-08T21:55:02Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-10T21:11:19Z"
      },
      "message": "Use importmulti timestamp when importing watch only keys\n\nWhen importing a watch-only address over importmulti with a specific timestamp,\nthe wallet's nTimeFirstKey is currently set to 1. After this change, the\nprovided timestamp will be used and stored as metadata associated with\nwatch-only key. This can improve wallet performance because it can avoid the\nneed to scan the entire blockchain for watch only addresses when timestamps are\nprovided.\n\nAlso adds timestamp to validateaddress return value (needed for tests).\n\nFixes #9034.",
      "tree": {
        "sha": "ee85a02c68e6157baabd8d7c06b0af3e96b04ec9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee85a02c68e6157baabd8d7c06b0af3e96b04ec9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a80f98b1c7a49432dc53d18d0fb51ac334de96be",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a80f98b1c7a49432dc53d18d0fb51ac334de96be",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a80f98b1c7a49432dc53d18d0fb51ac334de96be",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a80f98b1c7a49432dc53d18d0fb51ac334de96be/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a58370e6a2d4dce50eefbcab5bde9f14facef8fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a58370e6a2d4dce50eefbcab5bde9f14facef8fc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a58370e6a2d4dce50eefbcab5bde9f14facef8fc"
      }
    ],
    "stats": {
      "total": 142,
      "additions": 107,
      "deletions": 35
    },
    "files": [
      {
        "sha": "02a932e737f06aa1be7cec27ba98f246299ce578",
        "filename": "qa/rpc-tests/importmulti.py",
        "status": "modified",
        "additions": 32,
        "deletions": 1,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a80f98b1c7a49432dc53d18d0fb51ac334de96be/qa/rpc-tests/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a80f98b1c7a49432dc53d18d0fb51ac334de96be/qa/rpc-tests/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/importmulti.py?ref=a80f98b1c7a49432dc53d18d0fb51ac334de96be",
        "patch": "@@ -20,6 +20,7 @@ def run_test (self):\n         print (\"Mining blocks...\")\n         self.nodes[0].generate(1)\n         self.nodes[1].generate(1)\n+        timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n \n         # keyword definition\n         PRIV_KEY = 'privkey'\n@@ -59,6 +60,9 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal(address_assert['timestamp'], timestamp)\n+        watchonly_address = address['address']\n+        watchonly_timestamp = timestamp\n \n \n         # ScriptPubKey + internal\n@@ -73,6 +77,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal(address_assert['timestamp'], timestamp)\n \n         # ScriptPubKey + !internal\n         print(\"Should not import a scriptPubKey without internal flag\")\n@@ -87,6 +92,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal('timestamp' in address_assert, False)\n \n \n         # Address + Public key + !Internal\n@@ -103,6 +109,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal(address_assert['timestamp'], timestamp)\n \n \n         # ScriptPubKey + Public key + internal\n@@ -119,6 +126,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal(address_assert['timestamp'], timestamp)\n \n         # ScriptPubKey + Public key + !internal\n         print(\"Should not import a scriptPubKey without internal and with public key\")\n@@ -135,11 +143,11 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal('timestamp' in address_assert, False)\n \n         # Address + Private key + !watchonly\n         print(\"Should import an address with private key\")\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n@@ -170,6 +178,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal('timestamp' in address_assert, False)\n \n         # ScriptPubKey + Private key + internal\n         print(\"Should import a scriptPubKey with internal and with private key\")\n@@ -184,6 +193,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], True)\n+        assert_equal(address_assert['timestamp'], timestamp)\n \n         # ScriptPubKey + Private key + !internal\n         print(\"Should not import a scriptPubKey without internal and with private key\")\n@@ -199,6 +209,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal('timestamp' in address_assert, False)\n \n \n         # P2SH address\n@@ -209,6 +220,7 @@ def run_test (self):\n         self.nodes[1].generate(100)\n         transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n         self.nodes[1].generate(1)\n+        timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n         transaction = self.nodes[1].gettransaction(transactionid)\n \n         print(\"Should import a p2sh\")\n@@ -222,6 +234,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(multi_sig_script['address'])\n         assert_equal(address_assert['isscript'], True)\n         assert_equal(address_assert['iswatchonly'], True)\n+        assert_equal(address_assert['timestamp'], timestamp)\n         p2shunspent = self.nodes[1].listunspent(0,999999, [multi_sig_script['address']])[0]\n         assert_equal(p2shunspent['spendable'], False)\n         assert_equal(p2shunspent['solvable'], False)\n@@ -235,6 +248,7 @@ def run_test (self):\n         self.nodes[1].generate(100)\n         transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n         self.nodes[1].generate(1)\n+        timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n         transaction = self.nodes[1].gettransaction(transactionid)\n \n         print(\"Should import a p2sh with respective redeem script\")\n@@ -246,6 +260,8 @@ def run_test (self):\n             \"redeemscript\": multi_sig_script['redeemScript']\n         }])\n         assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].validateaddress(multi_sig_script['address'])\n+        assert_equal(address_assert['timestamp'], timestamp)\n \n         p2shunspent = self.nodes[1].listunspent(0,999999, [multi_sig_script['address']])[0]\n         assert_equal(p2shunspent['spendable'], False)\n@@ -260,6 +276,7 @@ def run_test (self):\n         self.nodes[1].generate(100)\n         transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n         self.nodes[1].generate(1)\n+        timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n         transaction = self.nodes[1].gettransaction(transactionid)\n \n         print(\"Should import a p2sh with respective redeem script and private keys\")\n@@ -272,6 +289,8 @@ def run_test (self):\n             \"keys\": [ self.nodes[0].dumpprivkey(sig_address_1['address']), self.nodes[0].dumpprivkey(sig_address_2['address'])]\n         }])\n         assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].validateaddress(multi_sig_script['address'])\n+        assert_equal(address_assert['timestamp'], timestamp)\n \n         p2shunspent = self.nodes[1].listunspent(0,999999, [multi_sig_script['address']])[0]\n         assert_equal(p2shunspent['spendable'], False)\n@@ -319,6 +338,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal('timestamp' in address_assert, False)\n \n \n         # ScriptPubKey + Public key + internal + Wrong pubkey\n@@ -338,6 +358,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal('timestamp' in address_assert, False)\n \n \n         # Address + Private key + !watchonly + Wrong private key\n@@ -357,6 +378,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal('timestamp' in address_assert, False)\n \n \n         # ScriptPubKey + Private key + internal + Wrong private key\n@@ -375,6 +397,15 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal('timestamp' in address_assert, False)\n+\n+        # restart nodes to check for proper serialization/deserialization of watch only address\n+        stop_nodes(self.nodes)\n+        self.nodes = start_nodes(2, self.options.tmpdir)\n+        address_assert = self.nodes[1].validateaddress(watchonly_address)\n+        assert_equal(address_assert['iswatchonly'], True)\n+        assert_equal(address_assert['ismine'], False)\n+        assert_equal(address_assert['timestamp'], watchonly_timestamp);\n \n         # Bad or missing timestamps\n         print(\"Should throw on invalid or missing timestamp values\")"
      },
      {
        "sha": "6fd50127bd5b3bb915e9e784d8d201227ddcaa67",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a80f98b1c7a49432dc53d18d0fb51ac334de96be/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a80f98b1c7a49432dc53d18d0fb51ac334de96be/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=a80f98b1c7a49432dc53d18d0fb51ac334de96be",
        "patch": "@@ -208,6 +208,9 @@ UniValue validateaddress(const JSONRPCRequest& request)\n         if (pwalletMain) {\n             const auto& meta = pwalletMain->mapKeyMetadata;\n             auto it = address.GetKeyID(keyID) ? meta.find(keyID) : meta.end();\n+            if (it == meta.end()) {\n+                it = meta.find(CScriptID(scriptPubKey));\n+            }\n             if (it != meta.end()) {\n                 ret.push_back(Pair(\"timestamp\", it->second.nCreateTime));\n                 if (!it->second.hdKeypath.empty()) {"
      },
      {
        "sha": "0a3225937e1b2be773ee7aafedfdb6c22afc1e20",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 9,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a80f98b1c7a49432dc53d18d0fb51ac334de96be/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a80f98b1c7a49432dc53d18d0fb51ac334de96be/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=a80f98b1c7a49432dc53d18d0fb51ac334de96be",
        "patch": "@@ -161,7 +161,7 @@ void ImportScript(const CScript& script, const string& strLabel, bool isRedeemSc\n \n     pwalletMain->MarkDirty();\n \n-    if (!pwalletMain->HaveWatchOnly(script) && !pwalletMain->AddWatchOnly(script))\n+    if (!pwalletMain->HaveWatchOnly(script) && !pwalletMain->AddWatchOnly(script, 0 /* nCreateTime */))\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n \n     if (isRedeemScript) {\n@@ -575,15 +575,17 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     if (!file.is_open())\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot open wallet dump file\");\n \n-    std::map<CKeyID, int64_t> mapKeyBirth;\n+    std::map<CTxDestination, int64_t> mapKeyBirth;\n     std::set<CKeyID> setKeyPool;\n     pwalletMain->GetKeyBirthTimes(mapKeyBirth);\n     pwalletMain->GetAllReserveKeys(setKeyPool);\n \n     // sort time/key pairs\n     std::vector<std::pair<int64_t, CKeyID> > vKeyBirth;\n-    for (std::map<CKeyID, int64_t>::const_iterator it = mapKeyBirth.begin(); it != mapKeyBirth.end(); it++) {\n-        vKeyBirth.push_back(std::make_pair(it->second, it->first));\n+    for (const auto& entry : mapKeyBirth) {\n+        if (const CKeyID* keyID = boost::get<CKeyID>(&entry.first)) { // set and test\n+            vKeyBirth.push_back(std::make_pair(entry.second, *keyID));\n+        }\n     }\n     mapKeyBirth.clear();\n     std::sort(vKeyBirth.begin(), vKeyBirth.end());\n@@ -720,7 +722,7 @@ UniValue ProcessImport(const UniValue& data, const int64_t timestamp)\n \n             pwalletMain->MarkDirty();\n \n-            if (!pwalletMain->HaveWatchOnly(redeemScript) && !pwalletMain->AddWatchOnly(redeemScript)) {\n+            if (!pwalletMain->HaveWatchOnly(redeemScript) && !pwalletMain->AddWatchOnly(redeemScript, timestamp)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n \n@@ -737,7 +739,7 @@ UniValue ProcessImport(const UniValue& data, const int64_t timestamp)\n \n             pwalletMain->MarkDirty();\n \n-            if (!pwalletMain->HaveWatchOnly(redeemDestination) && !pwalletMain->AddWatchOnly(redeemDestination)) {\n+            if (!pwalletMain->HaveWatchOnly(redeemDestination) && !pwalletMain->AddWatchOnly(redeemDestination, timestamp)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n \n@@ -830,7 +832,7 @@ UniValue ProcessImport(const UniValue& data, const int64_t timestamp)\n \n                 pwalletMain->MarkDirty();\n \n-                if (!pwalletMain->HaveWatchOnly(pubKeyScript) && !pwalletMain->AddWatchOnly(pubKeyScript)) {\n+                if (!pwalletMain->HaveWatchOnly(pubKeyScript) && !pwalletMain->AddWatchOnly(pubKeyScript, timestamp)) {\n                     throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n                 }\n \n@@ -848,7 +850,7 @@ UniValue ProcessImport(const UniValue& data, const int64_t timestamp)\n \n                 pwalletMain->MarkDirty();\n \n-                if (!pwalletMain->HaveWatchOnly(scriptRawPubKey) && !pwalletMain->AddWatchOnly(scriptRawPubKey)) {\n+                if (!pwalletMain->HaveWatchOnly(scriptRawPubKey) && !pwalletMain->AddWatchOnly(scriptRawPubKey, timestamp)) {\n                     throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n                 }\n \n@@ -922,7 +924,7 @@ UniValue ProcessImport(const UniValue& data, const int64_t timestamp)\n \n                 pwalletMain->MarkDirty();\n \n-                if (!pwalletMain->HaveWatchOnly(script) && !pwalletMain->AddWatchOnly(script)) {\n+                if (!pwalletMain->HaveWatchOnly(script) && !pwalletMain->AddWatchOnly(script, timestamp)) {\n                     throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n                 }\n "
      },
      {
        "sha": "f8f5a9306dc1c631301489adac23f3e8e771d024",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 9,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a80f98b1c7a49432dc53d18d0fb51ac334de96be/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a80f98b1c7a49432dc53d18d0fb51ac334de96be/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=a80f98b1c7a49432dc53d18d0fb51ac334de96be",
        "patch": "@@ -206,11 +206,11 @@ bool CWallet::AddCryptedKey(const CPubKey &vchPubKey,\n     return false;\n }\n \n-bool CWallet::LoadKeyMetadata(const CPubKey &pubkey, const CKeyMetadata &meta)\n+bool CWallet::LoadKeyMetadata(const CTxDestination& keyID, const CKeyMetadata &meta)\n {\n     AssertLockHeld(cs_wallet); // mapKeyMetadata\n     UpdateTimeFirstKey(meta.nCreateTime);\n-    mapKeyMetadata[pubkey.GetID()] = meta;\n+    mapKeyMetadata[keyID] = meta;\n     return true;\n }\n \n@@ -256,15 +256,22 @@ bool CWallet::LoadCScript(const CScript& redeemScript)\n     return CCryptoKeyStore::AddCScript(redeemScript);\n }\n \n-bool CWallet::AddWatchOnly(const CScript &dest)\n+bool CWallet::AddWatchOnly(const CScript& dest)\n {\n     if (!CCryptoKeyStore::AddWatchOnly(dest))\n         return false;\n-    nTimeFirstKey = 1; // No birthday information for watch-only keys.\n+    const CKeyMetadata& meta = mapKeyMetadata[CScriptID(dest)];\n+    UpdateTimeFirstKey(meta.nCreateTime);\n     NotifyWatchonlyChanged(true);\n     if (!fFileBacked)\n         return true;\n-    return CWalletDB(strWalletFile).WriteWatchOnly(dest);\n+    return CWalletDB(strWalletFile).WriteWatchOnly(dest, meta);\n+}\n+\n+bool CWallet::AddWatchOnly(const CScript& dest, int64_t nCreateTime)\n+{\n+    mapKeyMetadata[CScriptID(dest)].nCreateTime = nCreateTime;\n+    return AddWatchOnly(dest);\n }\n \n bool CWallet::RemoveWatchOnly(const CScript &dest)\n@@ -3425,14 +3432,16 @@ class CAffectedKeysVisitor : public boost::static_visitor<void> {\n     void operator()(const CNoDestination &none) {}\n };\n \n-void CWallet::GetKeyBirthTimes(std::map<CKeyID, int64_t> &mapKeyBirth) const {\n+void CWallet::GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) const {\n     AssertLockHeld(cs_wallet); // mapKeyMetadata\n     mapKeyBirth.clear();\n \n     // get birth times for keys with metadata\n-    for (std::map<CKeyID, CKeyMetadata>::const_iterator it = mapKeyMetadata.begin(); it != mapKeyMetadata.end(); it++)\n-        if (it->second.nCreateTime)\n-            mapKeyBirth[it->first] = it->second.nCreateTime;\n+    for (const auto& entry : mapKeyMetadata) {\n+        if (entry.second.nCreateTime) {\n+            mapKeyBirth[entry.first] = entry.second.nCreateTime;\n+        }\n+    }\n \n     // map in which we'll infer heights of other keys\n     CBlockIndex *pindexMax = chainActive[std::max(0, chainActive.Height() - 144)]; // the tip can be reorganized; use a 144-block safety margin"
      },
      {
        "sha": "990c3bdf4196a48224dbc3e7736a5feecbaa8ffc",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 17,
        "deletions": 4,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a80f98b1c7a49432dc53d18d0fb51ac334de96be/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a80f98b1c7a49432dc53d18d0fb51ac334de96be/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=a80f98b1c7a49432dc53d18d0fb51ac334de96be",
        "patch": "@@ -614,6 +614,17 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     int64_t nTimeFirstKey;\n \n+    /**\n+     * Private version of AddWatchOnly method which does not accept a\n+     * timestamp, and which will reset the wallet's nTimeFirstKey value to 1 if\n+     * the watch key did not previously have a timestamp associated with it.\n+     * Because this is an inherited virtual method, it is accessible despite\n+     * being marked private, but it is marked private anyway to encourage use\n+     * of the other AddWatchOnly which accepts a timestamp and sets\n+     * nTimeFirstKey more intelligently for more efficient rescans.\n+     */\n+    bool AddWatchOnly(const CScript& dest) override;\n+\n public:\n     /*\n      * Main wallet lock.\n@@ -638,7 +649,9 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n             mapKeyMetadata[keyid] = CKeyMetadata(keypool.nTime);\n     }\n \n-    std::map<CKeyID, CKeyMetadata> mapKeyMetadata;\n+    // Map from Key ID (for regular keys) or Script ID (for watch-only keys) to\n+    // key metadata.\n+    std::map<CTxDestination, CKeyMetadata> mapKeyMetadata;\n \n     typedef std::map<unsigned int, CMasterKey> MasterKeyMap;\n     MasterKeyMap mapMasterKeys;\n@@ -728,7 +741,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     //! Adds a key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadKey(const CKey& key, const CPubKey &pubkey) { return CCryptoKeyStore::AddKeyPubKey(key, pubkey); }\n     //! Load metadata (used by LoadWallet)\n-    bool LoadKeyMetadata(const CPubKey &pubkey, const CKeyMetadata &metadata);\n+    bool LoadKeyMetadata(const CTxDestination& pubKey, const CKeyMetadata &metadata);\n \n     bool LoadMinVersion(int nVersion) { AssertLockHeld(cs_wallet); nWalletVersion = nVersion; nWalletMaxVersion = std::max(nWalletMaxVersion, nVersion); return true; }\n     void UpdateTimeFirstKey(int64_t nCreateTime);\n@@ -750,7 +763,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool GetDestData(const CTxDestination &dest, const std::string &key, std::string *value) const;\n \n     //! Adds a watch-only address to the store, and saves it to disk.\n-    bool AddWatchOnly(const CScript &dest);\n+    bool AddWatchOnly(const CScript& dest, int64_t nCreateTime);\n     bool RemoveWatchOnly(const CScript &dest);\n     //! Adds a watch-only address to the store, without saving it to disk (used by LoadWallet)\n     bool LoadWatchOnly(const CScript &dest);\n@@ -759,7 +772,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase, const SecureString& strNewWalletPassphrase);\n     bool EncryptWallet(const SecureString& strWalletPassphrase);\n \n-    void GetKeyBirthTimes(std::map<CKeyID, int64_t> &mapKeyBirth) const;\n+    void GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) const;\n \n     /** \n      * Increment the next transaction order id"
      },
      {
        "sha": "106a59d5623046e21fa3c9513b50044a9a474a18",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 11,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a80f98b1c7a49432dc53d18d0fb51ac334de96be/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a80f98b1c7a49432dc53d18d0fb51ac334de96be/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=a80f98b1c7a49432dc53d18d0fb51ac334de96be",
        "patch": "@@ -120,15 +120,19 @@ bool CWalletDB::WriteCScript(const uint160& hash, const CScript& redeemScript)\n     return Write(std::make_pair(std::string(\"cscript\"), hash), *(const CScriptBase*)(&redeemScript), false);\n }\n \n-bool CWalletDB::WriteWatchOnly(const CScript &dest)\n+bool CWalletDB::WriteWatchOnly(const CScript &dest, const CKeyMetadata& keyMeta)\n {\n     nWalletDBUpdateCounter++;\n+    if (!Write(std::make_pair(std::string(\"watchmeta\"), *(const CScriptBase*)(&dest)), keyMeta))\n+        return false;\n     return Write(std::make_pair(std::string(\"watchs\"), *(const CScriptBase*)(&dest)), '1');\n }\n \n bool CWalletDB::EraseWatchOnly(const CScript &dest)\n {\n     nWalletDBUpdateCounter++;\n+    if (!Erase(std::make_pair(std::string(\"watchmeta\"), *(const CScriptBase*)(&dest))))\n+        return false;\n     return Erase(std::make_pair(std::string(\"watchs\"), *(const CScriptBase*)(&dest)));\n }\n \n@@ -259,14 +263,15 @@ class CWalletScanState {\n public:\n     unsigned int nKeys;\n     unsigned int nCKeys;\n+    unsigned int nWatchKeys;\n     unsigned int nKeyMeta;\n     bool fIsEncrypted;\n     bool fAnyUnordered;\n     int nFileVersion;\n     vector<uint256> vWalletUpgrade;\n \n     CWalletScanState() {\n-        nKeys = nCKeys = nKeyMeta = 0;\n+        nKeys = nCKeys = nWatchKeys = nKeyMeta = 0;\n         fIsEncrypted = false;\n         fAnyUnordered = false;\n         nFileVersion = 0;\n@@ -348,16 +353,13 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n         }\n         else if (strType == \"watchs\")\n         {\n+            wss.nWatchKeys++;\n             CScript script;\n             ssKey >> *(CScriptBase*)(&script);\n             char fYes;\n             ssValue >> fYes;\n             if (fYes == '1')\n                 pwallet->LoadWatchOnly(script);\n-\n-            // Watch-only addresses have no birthday information for now,\n-            // so set the wallet birthday to the beginning of time.\n-            pwallet->UpdateTimeFirstKey(1);\n         }\n         else if (strType == \"key\" || strType == \"wkey\")\n         {\n@@ -458,15 +460,27 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             }\n             wss.fIsEncrypted = true;\n         }\n-        else if (strType == \"keymeta\")\n+        else if (strType == \"keymeta\" || strType == \"watchmeta\")\n         {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n+            CTxDestination keyID;\n+            if (strType == \"keymeta\")\n+            {\n+              CPubKey vchPubKey;\n+              ssKey >> vchPubKey;\n+              keyID = vchPubKey.GetID();\n+            }\n+            else if (strType == \"watchmeta\")\n+            {\n+              CScript script;\n+              ssKey >> *(CScriptBase*)(&script);\n+              keyID = CScriptID(script);\n+            }\n+\n             CKeyMetadata keyMeta;\n             ssValue >> keyMeta;\n             wss.nKeyMeta++;\n \n-            pwallet->LoadKeyMetadata(vchPubKey, keyMeta);\n+            pwallet->LoadKeyMetadata(keyID, keyMeta);\n         }\n         else if (strType == \"defaultkey\")\n         {\n@@ -620,7 +634,7 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n            wss.nKeys, wss.nCKeys, wss.nKeyMeta, wss.nKeys + wss.nCKeys);\n \n     // nTimeFirstKey is only reliable if all keys have metadata\n-    if ((wss.nKeys + wss.nCKeys) != wss.nKeyMeta)\n+    if ((wss.nKeys + wss.nCKeys + wss.nWatchKeys) != wss.nKeyMeta)\n         pwallet->UpdateTimeFirstKey(1);\n \n     BOOST_FOREACH(uint256 hash, wss.vWalletUpgrade)"
      },
      {
        "sha": "c7c65465df9a8fafb104c7a1e3875af71e60d1c8",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a80f98b1c7a49432dc53d18d0fb51ac334de96be/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a80f98b1c7a49432dc53d18d0fb51ac334de96be/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=a80f98b1c7a49432dc53d18d0fb51ac334de96be",
        "patch": "@@ -135,7 +135,7 @@ class CWalletDB : public CDB\n \n     bool WriteCScript(const uint160& hash, const CScript& redeemScript);\n \n-    bool WriteWatchOnly(const CScript &script);\n+    bool WriteWatchOnly(const CScript &script, const CKeyMetadata &keymeta);\n     bool EraseWatchOnly(const CScript &script);\n \n     bool WriteBestBlock(const CBlockLocator& locator);"
      }
    ]
  },
  {
    "sha": "a06ede9a138d0fb86b0de17c42b936d9fe6e2158",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMDZlZGU5YTEzOGQwZmI4NmIwZGUxN2M0MmI5MzZkOWZlNmUyMTU4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-02-10T23:53:31Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-02-11T00:58:55Z"
      },
      "message": "Merge #9708: Clean up all known races/platform-specific UB at the time PR was opened\n\ndb2dc7a Move CNode::addrLocal access behind locked accessors (Matt Corallo)\n036073b Move CNode::addrName accesses behind locked accessors (Matt Corallo)\nd8f2b8a Make nTimeBestReceived atomic (Matt Corallo)\n22b4966 Move [clean|str]SubVer writes/copyStats into a lock (Matt Corallo)\n0f31872 Make nServices atomic (Matt Corallo)\n96f42d8 Make nStartingHeight atomic (Matt Corallo)\n512731b Access fRelayTxes with cs_filter lock in copyStats (Matt Corallo)\nae683c1 Avoid copying CNodeStats to make helgrind OK with buggy std::string (Matt Corallo)\n644f123 Make nTimeConnected const in CNode (Matt Corallo)\n321d0fc net: fix a few races. Credit @TheBlueMatt (Cory Fields)",
      "tree": {
        "sha": "10645c8703ca75cd91609812c4c5d9804b6e09c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/10645c8703ca75cd91609812c4c5d9804b6e09c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a06ede9a138d0fb86b0de17c42b936d9fe6e2158",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJYnmHQAAoJENuhpnN5oakxCCkP/iPePjc3F1Ay60ja7Vd82W60\nBfuyR7SWZ7ol25WAGrgfccJvdYvGaJZu1mDlZuiSrguNjh8fGUqW22/EQ5rAMuHz\nBmR2cMm7w+DLlSUUTf2oZmPer43sCNs6uW+MfqUel91DHvwbEBY+6vQxblDFP6ng\nodPraWLHmgfkPc+iCjLABA5bcepgLkQGX7J3HSq+IWG5wNAXMH4rDR4VVtY62LFt\nz4caVPbK2594tGQlNWTJGs5DjSyPV/uLoAOpB9i6FS2zm92HitcaPfO9pdOsgZWd\npkXQQFibN4P30+9QhGyErHkgM8jFOU9HYHHOP2aQLBTZ2+cTyQH8hViJuFi7TKOV\nng9UFN2lnHs/cz8RDUXI66k+lvL0b5j2fX9RmxlHfGMh0fSRzj7UJq6a2T1ycN2X\nO6weK6pUUFSb25GxOLiVssaO1zFY/1ARnlUOL6yCXXdKFYIZyyuAm4Y2lLuFa41p\nPQqo6dc9H69KCK/ELewV2gDZcDRxHxTyZCAtY5/87QC2H2YPHaDws6uDxbV5nJZh\njMZK07cn0JSBvzIZI097OxDhXSfZjwYJdtNNqv1PZo74ExpFHjrHOi86vIkN1llc\nF7wLy9Ni8R1J9tvh535FCVFXmfNXe30OlCm3Oqmy57y2EE5c263Er/Y2qjNj31GL\n6Gr5rDLisIEgJ55IE1DH\n=0Dlc\n-----END PGP SIGNATURE-----",
        "payload": "tree 10645c8703ca75cd91609812c4c5d9804b6e09c4\nparent b860915f8b0dae98e57a254d11575ea41f5c5a79\nparent db2dc7a58cb0a3df58188b748df8e0d04ba76f00\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1486770811 -0800\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1486774735 -0800\n\nMerge #9708: Clean up all known races/platform-specific UB at the time PR was opened\n\ndb2dc7a Move CNode::addrLocal access behind locked accessors (Matt Corallo)\n036073b Move CNode::addrName accesses behind locked accessors (Matt Corallo)\nd8f2b8a Make nTimeBestReceived atomic (Matt Corallo)\n22b4966 Move [clean|str]SubVer writes/copyStats into a lock (Matt Corallo)\n0f31872 Make nServices atomic (Matt Corallo)\n96f42d8 Make nStartingHeight atomic (Matt Corallo)\n512731b Access fRelayTxes with cs_filter lock in copyStats (Matt Corallo)\nae683c1 Avoid copying CNodeStats to make helgrind OK with buggy std::string (Matt Corallo)\n644f123 Make nTimeConnected const in CNode (Matt Corallo)\n321d0fc net: fix a few races. Credit @TheBlueMatt (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a06ede9a138d0fb86b0de17c42b936d9fe6e2158",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a06ede9a138d0fb86b0de17c42b936d9fe6e2158",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a06ede9a138d0fb86b0de17c42b936d9fe6e2158/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b860915f8b0dae98e57a254d11575ea41f5c5a79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b860915f8b0dae98e57a254d11575ea41f5c5a79",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b860915f8b0dae98e57a254d11575ea41f5c5a79"
      },
      {
        "sha": "db2dc7a58cb0a3df58188b748df8e0d04ba76f00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db2dc7a58cb0a3df58188b748df8e0d04ba76f00",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/db2dc7a58cb0a3df58188b748df8e0d04ba76f00"
      }
    ],
    "stats": {
      "total": 150,
      "additions": 105,
      "deletions": 45
    },
    "files": [
      {
        "sha": "505eb971c09e944d8bd90eb4f525d8b8e3131bf3",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 64,
        "deletions": 23,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a06ede9a138d0fb86b0de17c42b936d9fe6e2158/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a06ede9a138d0fb86b0de17c42b936d9fe6e2158/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=a06ede9a138d0fb86b0de17c42b936d9fe6e2158",
        "patch": "@@ -164,8 +164,9 @@ int GetnScore(const CService& addr)\n // Is our peer's addrLocal potentially useful as an external IP source?\n bool IsPeerAddrLocalGood(CNode *pnode)\n {\n-    return fDiscover && pnode->addr.IsRoutable() && pnode->addrLocal.IsRoutable() &&\n-           !IsLimited(pnode->addrLocal.GetNetwork());\n+    CService addrLocal = pnode->GetAddrLocal();\n+    return fDiscover && pnode->addr.IsRoutable() && addrLocal.IsRoutable() &&\n+           !IsLimited(addrLocal.GetNetwork());\n }\n \n // pushes our own address to a peer\n@@ -180,7 +181,7 @@ void AdvertiseLocal(CNode *pnode)\n         if (IsPeerAddrLocalGood(pnode) && (!addrLocal.IsRoutable() ||\n              GetRand((GetnScore(addrLocal) > LOCAL_MANUAL) ? 8:2) == 0))\n         {\n-            addrLocal.SetIP(pnode->addrLocal);\n+            addrLocal.SetIP(pnode->GetAddrLocal());\n         }\n         if (addrLocal.IsRoutable())\n         {\n@@ -307,9 +308,11 @@ CNode* CConnman::FindNode(const CSubNet& subNet)\n CNode* CConnman::FindNode(const std::string& addrName)\n {\n     LOCK(cs_vNodes);\n-    BOOST_FOREACH(CNode* pnode, vNodes)\n-        if (pnode->addrName == addrName)\n+    BOOST_FOREACH(CNode* pnode, vNodes) {\n+        if (pnode->GetAddrName() == addrName) {\n             return (pnode);\n+        }\n+    }\n     return NULL;\n }\n \n@@ -373,9 +376,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n             CNode* pnode = FindNode((CService)addrConnect);\n             if (pnode)\n             {\n-                if (pnode->addrName.empty()) {\n-                    pnode->addrName = std::string(pszDest);\n-                }\n+                pnode->MaybeSetAddrName(std::string(pszDest));\n                 CloseSocket(hSocket);\n                 LogPrintf(\"Failed to open new connection, already connected\\n\");\n                 return NULL;\n@@ -389,7 +390,6 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n         uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n         CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, pszDest ? pszDest : \"\", false);\n         pnode->nServicesExpected = ServiceFlags(addrConnect.nServices & nRelevantServices);\n-        pnode->nTimeConnected = GetSystemTimeInSeconds();\n         pnode->AddRef();\n \n         return pnode;\n@@ -594,28 +594,67 @@ void CConnman::AddWhitelistedRange(const CSubNet &subnet) {\n     vWhitelistedRange.push_back(subnet);\n }\n \n+\n+std::string CNode::GetAddrName() const {\n+    LOCK(cs_addrName);\n+    return addrName;\n+}\n+\n+void CNode::MaybeSetAddrName(const std::string& addrNameIn) {\n+    LOCK(cs_addrName);\n+    if (addrName.empty()) {\n+        addrName = addrNameIn;\n+    }\n+}\n+\n+CService CNode::GetAddrLocal() const {\n+    LOCK(cs_addrLocal);\n+    return addrLocal;\n+}\n+\n+void CNode::SetAddrLocal(const CService& addrLocalIn) {\n+    LOCK(cs_addrLocal);\n+    if (addrLocal.IsValid()) {\n+        error(\"Addr local already set for node: %i. Refusing to change from %s to %s\", id, addrLocal.ToString(), addrLocalIn.ToString());\n+    } else {\n+        addrLocal = addrLocalIn;\n+    }\n+}\n+\n #undef X\n #define X(name) stats.name = name\n void CNode::copyStats(CNodeStats &stats)\n {\n     stats.nodeid = this->GetId();\n     X(nServices);\n     X(addr);\n-    X(fRelayTxes);\n+    {\n+        LOCK(cs_filter);\n+        X(fRelayTxes);\n+    }\n     X(nLastSend);\n     X(nLastRecv);\n     X(nTimeConnected);\n     X(nTimeOffset);\n-    X(addrName);\n+    stats.addrName = GetAddrName();\n     X(nVersion);\n-    X(cleanSubVer);\n+    {\n+        LOCK(cs_SubVer);\n+        X(cleanSubVer);\n+    }\n     X(fInbound);\n     X(fAddnode);\n     X(nStartingHeight);\n-    X(nSendBytes);\n-    X(mapSendBytesPerMsgCmd);\n-    X(nRecvBytes);\n-    X(mapRecvBytesPerMsgCmd);\n+    {\n+        LOCK(cs_vSend);\n+        X(mapSendBytesPerMsgCmd);\n+        X(nSendBytes);\n+    }\n+    {\n+        LOCK(cs_vRecv);\n+        X(mapRecvBytesPerMsgCmd);\n+        X(nRecvBytes);\n+    }\n     X(fWhitelisted);\n \n     // It is common for nodes with good ping times to suddenly become lagged,\n@@ -635,14 +674,16 @@ void CNode::copyStats(CNodeStats &stats)\n     stats.dPingWait = (((double)nPingUsecWait) / 1e6);\n \n     // Leave string empty if addrLocal invalid (not filled in yet)\n-    stats.addrLocal = addrLocal.IsValid() ? addrLocal.ToString() : \"\";\n+    CService addrLocalUnlocked = GetAddrLocal();\n+    stats.addrLocal = addrLocalUnlocked.IsValid() ? addrLocalUnlocked.ToString() : \"\";\n }\n #undef X\n \n bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete)\n {\n     complete = false;\n     int64_t nTimeMicros = GetTimeMicros();\n+    LOCK(cs_vRecv);\n     nLastRecv = nTimeMicros / 1000000;\n     nRecvBytes += nBytes;\n     while (nBytes > 0) {\n@@ -1786,8 +1827,9 @@ std::vector<AddedNodeInfo> CConnman::GetAddedNodeInfo()\n             if (pnode->addr.IsValid()) {\n                 mapConnected[pnode->addr] = pnode->fInbound;\n             }\n-            if (!pnode->addrName.empty()) {\n-                mapConnectedByName[pnode->addrName] = std::make_pair(pnode->fInbound, static_cast<const CService&>(pnode->addr));\n+            std::string addrName = pnode->GetAddrName();\n+            if (!addrName.empty()) {\n+                mapConnectedByName[std::move(addrName)] = std::make_pair(pnode->fInbound, static_cast<const CService&>(pnode->addr));\n             }\n         }\n     }\n@@ -2414,9 +2456,8 @@ void CConnman::GetNodeStats(std::vector<CNodeStats>& vstats)\n     vstats.reserve(vNodes.size());\n     for(std::vector<CNode*>::iterator it = vNodes.begin(); it != vNodes.end(); ++it) {\n         CNode* pnode = *it;\n-        CNodeStats stats;\n-        pnode->copyStats(stats);\n-        vstats.push_back(stats);\n+        vstats.emplace_back();\n+        pnode->copyStats(vstats.back());\n     }\n }\n \n@@ -2568,6 +2609,7 @@ unsigned int CConnman::GetReceiveFloodSize() const { return nReceiveFloodSize; }\n unsigned int CConnman::GetSendBufferSize() const{ return nSendBufferMaxSize; }\n \n CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress& addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const std::string& addrNameIn, bool fInboundIn) :\n+    nTimeConnected(GetSystemTimeInSeconds()),\n     addr(addrIn),\n     fInbound(fInboundIn),\n     id(idIn),\n@@ -2587,7 +2629,6 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     nLastRecv = 0;\n     nSendBytes = 0;\n     nRecvBytes = 0;\n-    nTimeConnected = GetSystemTimeInSeconds();\n     nTimeOffset = 0;\n     addrName = addrNameIn == \"\" ? addr.ToStringIPPort() : addrNameIn;\n     nVersion = 0;"
      },
      {
        "sha": "29b6a44c88ff2a0dfbccc9f87720e5bbab5ef42c",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 28,
        "deletions": 14,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a06ede9a138d0fb86b0de17c42b936d9fe6e2158/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a06ede9a138d0fb86b0de17c42b936d9fe6e2158/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=a06ede9a138d0fb86b0de17c42b936d9fe6e2158",
        "patch": "@@ -564,7 +564,7 @@ class CNode\n     friend class CConnman;\n public:\n     // socket\n-    ServiceFlags nServices;\n+    std::atomic<ServiceFlags> nServices;\n     ServiceFlags nServicesExpected;\n     SOCKET hSocket;\n     size_t nSendSize; // total size of all vSendMsg entries\n@@ -573,6 +573,7 @@ class CNode\n     std::deque<std::vector<unsigned char>> vSendMsg;\n     CCriticalSection cs_vSend;\n     CCriticalSection cs_hSocket;\n+    CCriticalSection cs_vRecv;\n \n     CCriticalSection cs_vProcessMsg;\n     std::list<CNetMessage> vProcessMsg;\n@@ -584,19 +585,18 @@ class CNode\n     uint64_t nRecvBytes;\n     std::atomic<int> nRecvVersion;\n \n-    int64_t nLastSend;\n-    int64_t nLastRecv;\n-    int64_t nTimeConnected;\n-    int64_t nTimeOffset;\n+    std::atomic<int64_t> nLastSend;\n+    std::atomic<int64_t> nLastRecv;\n+    const int64_t nTimeConnected;\n+    std::atomic<int64_t> nTimeOffset;\n     const CAddress addr;\n-    std::string addrName;\n-    CService addrLocal;\n     std::atomic<int> nVersion;\n     // strSubVer is whatever byte array we read from the wire. However, this field is intended\n     // to be printed out, displayed to humans in various forms and so on. So we sanitize it and\n     // store the sanitized version in cleanSubVer. The original should be used when dealing with\n     // the network or wire types and the cleaned string used when displayed or logged.\n     std::string strSubVer, cleanSubVer;\n+    CCriticalSection cs_SubVer; // used for both cleanSubVer and strSubVer\n     bool fWhitelisted; // This peer can bypass DoS banning.\n     bool fFeeler; // If true this node is being used as a short lived feeler.\n     bool fOneShot;\n@@ -614,7 +614,7 @@ class CNode\n     CSemaphoreGrant grantOutbound;\n     CCriticalSection cs_filter;\n     CBloomFilter* pfilter;\n-    int nRefCount;\n+    std::atomic<int> nRefCount;\n     const NodeId id;\n \n     const uint64_t nKeyedNetGroup;\n@@ -627,7 +627,7 @@ class CNode\n \n public:\n     uint256 hashContinue;\n-    int nStartingHeight;\n+    std::atomic<int> nStartingHeight;\n \n     // flood relay\n     std::vector<CAddress> vAddrToSend;\n@@ -665,15 +665,15 @@ class CNode\n \n     // Ping time measurement:\n     // The pong reply we're expecting, or 0 if no pong expected.\n-    uint64_t nPingNonceSent;\n+    std::atomic<uint64_t> nPingNonceSent;\n     // Time (in usec) the last ping was sent, or 0 if no ping was ever sent.\n-    int64_t nPingUsecStart;\n+    std::atomic<int64_t> nPingUsecStart;\n     // Last measured round-trip time.\n-    int64_t nPingUsecTime;\n+    std::atomic<int64_t> nPingUsecTime;\n     // Best measured round-trip time.\n-    int64_t nMinPingUsecTime;\n+    std::atomic<int64_t> nMinPingUsecTime;\n     // Whether a ping is requested.\n-    bool fPingQueued;\n+    std::atomic<bool> fPingQueued;\n     // Minimum fee rate with which to filter inv's to this node\n     CAmount minFeeFilter;\n     CCriticalSection cs_feeFilter;\n@@ -694,6 +694,12 @@ class CNode\n     const int nMyStartingHeight;\n     int nSendVersion;\n     std::list<CNetMessage> vRecvMsg;  // Used only by SocketHandler thread\n+\n+    mutable CCriticalSection cs_addrName;\n+    std::string addrName;\n+\n+    CService addrLocal;\n+    mutable CCriticalSection cs_addrLocal;\n public:\n \n     NodeId GetId() const {\n@@ -727,6 +733,10 @@ class CNode\n     void SetSendVersion(int nVersionIn);\n     int GetSendVersion() const;\n \n+    CService GetAddrLocal() const;\n+    //! May not be called more than once\n+    void SetAddrLocal(const CService& addrLocalIn);\n+\n     CNode* AddRef()\n     {\n         nRefCount++;\n@@ -796,6 +806,10 @@ class CNode\n     {\n         return nLocalServices;\n     }\n+\n+    std::string GetAddrName() const;\n+    //! Sets the addrName only if it was not previously set\n+    void MaybeSetAddrName(const std::string& addrNameIn);\n };\n \n "
      },
      {
        "sha": "7d76aa0b4860ff34a098865e4d7a8a133df290e1",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 8,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a06ede9a138d0fb86b0de17c42b936d9fe6e2158/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a06ede9a138d0fb86b0de17c42b936d9fe6e2158/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=a06ede9a138d0fb86b0de17c42b936d9fe6e2158",
        "patch": "@@ -36,7 +36,7 @@\n # error \"Bitcoin cannot be compiled without assertions.\"\n #endif\n \n-int64_t nTimeBestReceived = 0; // Used only to inform the wallet of when we last received a block\n+std::atomic<int64_t> nTimeBestReceived(0); // Used only to inform the wallet of when we last received a block\n \n struct IteratorComparator\n {\n@@ -264,7 +264,7 @@ void PushNodeVersion(CNode *pnode, CConnman& connman, int64_t nTime)\n \n void InitializeNode(CNode *pnode, CConnman& connman) {\n     CAddress addr = pnode->addr;\n-    std::string addrName = pnode->addrName;\n+    std::string addrName = pnode->GetAddrName();\n     NodeId nodeid = pnode->GetId();\n     {\n         LOCK(cs_main);\n@@ -1211,6 +1211,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         int nVersion;\n         int nSendVersion;\n         std::string strSubVer;\n+        std::string cleanSubVer;\n         int nStartingHeight = -1;\n         bool fRelay = true;\n \n@@ -1246,6 +1247,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             vRecv >> addrFrom >> nNonce;\n         if (!vRecv.empty()) {\n             vRecv >> LIMITED_STRING(strSubVer, MAX_SUBVERSION_LENGTH);\n+            cleanSubVer = SanitizeString(strSubVer);\n         }\n         if (!vRecv.empty()) {\n             vRecv >> nStartingHeight;\n@@ -1272,9 +1274,12 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERACK));\n \n         pfrom->nServices = nServices;\n-        pfrom->addrLocal = addrMe;\n-        pfrom->strSubVer = strSubVer;\n-        pfrom->cleanSubVer = SanitizeString(strSubVer);\n+        pfrom->SetAddrLocal(addrMe);\n+        {\n+            LOCK(pfrom->cs_SubVer);\n+            pfrom->strSubVer = strSubVer;\n+            pfrom->cleanSubVer = cleanSubVer;\n+        }\n         pfrom->nStartingHeight = nStartingHeight;\n         pfrom->fClient = !(nServices & NODE_NETWORK);\n         {\n@@ -1310,7 +1315,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                     LogPrint(\"net\", \"ProcessMessages: advertising address %s\\n\", addr.ToString());\n                     pfrom->PushAddress(addr, insecure_rand);\n                 } else if (IsPeerAddrLocalGood(pfrom)) {\n-                    addr.SetIP(pfrom->addrLocal);\n+                    addr.SetIP(addrMe);\n                     LogPrint(\"net\", \"ProcessMessages: advertising address %s\\n\", addr.ToString());\n                     pfrom->PushAddress(addr, insecure_rand);\n                 }\n@@ -1330,7 +1335,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             remoteAddr = \", peeraddr=\" + pfrom->addr.ToString();\n \n         LogPrintf(\"receive version message: %s: version %d, blocks=%d, us=%s, peer=%d%s\\n\",\n-                  pfrom->cleanSubVer, pfrom->nVersion,\n+                  cleanSubVer, pfrom->nVersion,\n                   pfrom->nStartingHeight, addrMe.ToString(), pfrom->id,\n                   remoteAddr);\n \n@@ -2450,7 +2455,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                     if (pingUsecTime > 0) {\n                         // Successful ping time measurement, replace previous\n                         pfrom->nPingUsecTime = pingUsecTime;\n-                        pfrom->nMinPingUsecTime = std::min(pfrom->nMinPingUsecTime, pingUsecTime);\n+                        pfrom->nMinPingUsecTime = std::min(pfrom->nMinPingUsecTime.load(), pingUsecTime);\n                     } else {\n                         // This should never happen\n                         sProblem = \"Timing mishap\";"
      }
    ]
  },
  {
    "sha": "d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOTc4YzQxZTFlYzRmY2YyYzRkMDk2ZjA5YWYwMzVmOWU4YTdhZDgx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-11T07:46:00Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-11T07:46:10Z"
      },
      "message": "Merge #9736: Pre-0.14.0 hardcoded seeds update\n\na60677e Pre-0.14.0 hardcoded seeds update (Wladimir J. van der Laan)\nbfa9393 contrib/seeds: Update PATTERN_AGENT (Wladimir J. van der Laan)\n4dfac2c Update seeds tooling to Python 3 (Wladimir J. van der Laan)",
      "tree": {
        "sha": "7ea9ed145b65fd4428a6819d58effd98e77f7434",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7ea9ed145b65fd4428a6819d58effd98e77f7434"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYnsFCAAoJEHSBCwEjRsmmAWAH/3gdJ3nbFtakIYKlKbshgVfp\nhroGDmw4OjqKKqqjpbv57H8Wa3uC1s0BcqygM/2M/+k1/kX/WAQcPpK1xW7JV1IU\nQAjzvt111+rQgnT2Iyj/1hQ/2G01JdgSMxucxmWlcr9ARvz9IOIuSD3DNW7vjX97\nVvJ23+SANA1y2TbbU5MPIcAx3zjIsNHg25IunnGVhA8GaCFxWykWHFpkp4Jmoc0g\nJHkVFysRHD1Tlh9kTvNacO6sp8svSGwmigjh2K1aul6evpgQoWd2V5w8dZ7Ek90s\nINhQHov3P3b+hXiU5rJjJlBS+nnC/PkKOgRkjguRqBmoO0s0McSI59mceRzBfB4=\n=fj+w\n-----END PGP SIGNATURE-----",
        "payload": "tree 7ea9ed145b65fd4428a6819d58effd98e77f7434\nparent a06ede9a138d0fb86b0de17c42b936d9fe6e2158\nparent a60677e394faf57968be57e44ece127c3bb6881f\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1486799160 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1486799170 +0100\n\nMerge #9736: Pre-0.14.0 hardcoded seeds update\n\na60677e Pre-0.14.0 hardcoded seeds update (Wladimir J. van der Laan)\nbfa9393 contrib/seeds: Update PATTERN_AGENT (Wladimir J. van der Laan)\n4dfac2c Update seeds tooling to Python 3 (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a06ede9a138d0fb86b0de17c42b936d9fe6e2158",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a06ede9a138d0fb86b0de17c42b936d9fe6e2158",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a06ede9a138d0fb86b0de17c42b936d9fe6e2158"
      },
      {
        "sha": "a60677e394faf57968be57e44ece127c3bb6881f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a60677e394faf57968be57e44ece127c3bb6881f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a60677e394faf57968be57e44ece127c3bb6881f"
      }
    ],
    "stats": {
      "total": 3698,
      "additions": 2084,
      "deletions": 1614
    },
    "files": [
      {
        "sha": "afe902fd7f0630380a727270bcfe759fdbbd4dd5",
        "filename": "contrib/seeds/README.md",
        "status": "modified",
        "additions": 11,
        "deletions": 3,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81/contrib/seeds/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81/contrib/seeds/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/README.md?ref=d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81",
        "patch": "@@ -1,11 +1,19 @@\n-### Seeds ###\n+# Seeds\n \n Utility to generate the seeds.txt list that is compiled into the client\n (see [src/chainparamsseeds.h](/src/chainparamsseeds.h) and other utilities in [contrib/seeds](/contrib/seeds)).\n \n+Be sure to update `PATTERN_AGENT` in `makeseeds.py` to include the current version,\n+and remove old versions as necessary.\n+\n The seeds compiled into the release are created from sipa's DNS seed data, like this:\n \n     curl -s http://bitcoin.sipa.be/seeds.txt > seeds_main.txt\n-    python makeseeds.py < seeds_main.txt > nodes_main.txt\n-    python generate-seeds.py . > ../../src/chainparamsseeds.h\n+    python3 makeseeds.py < seeds_main.txt > nodes_main.txt\n+    python3 generate-seeds.py . > ../../src/chainparamsseeds.h\n+\n+## Dependencies\n+\n+Ubuntu:\n \n+    sudo apt-get install python3-dnspython"
      },
      {
        "sha": "b0ac92ae0363902b9698ec169040d851bfb6a558",
        "filename": "contrib/seeds/generate-seeds.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81/contrib/seeds/generate-seeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81/contrib/seeds/generate-seeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/generate-seeds.py?ref=d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python\n-# Copyright (c) 2014 Wladimir J. van der Laan\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2017 Wladimir J. van der Laan\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n '''\n@@ -31,7 +31,7 @@\n \n These should be pasted into `src/chainparamsseeds.h`.\n '''\n-from __future__ import print_function, division\n+\n from base64 import b32decode\n from binascii import a2b_hex\n import sys, os"
      },
      {
        "sha": "34f0f576716ed1f1c5bb166477f8df3174ee59f9",
        "filename": "contrib/seeds/makeseeds.py",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81/contrib/seeds/makeseeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81/contrib/seeds/makeseeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/makeseeds.py?ref=d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python\n-# Copyright (c) 2013-2016 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2013-2017 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #\n@@ -14,13 +14,13 @@\n \n # These are hosts that have been observed to be behaving strangely (e.g.\n # aggressively connecting to every node).\n-SUSPICIOUS_HOSTS = set([\n+SUSPICIOUS_HOSTS = {\n     \"130.211.129.106\", \"178.63.107.226\",\n     \"83.81.130.26\", \"88.198.17.7\", \"148.251.238.178\", \"176.9.46.6\",\n     \"54.173.72.127\", \"54.174.10.182\", \"54.183.64.54\", \"54.194.231.211\",\n     \"54.66.214.167\", \"54.66.220.137\", \"54.67.33.14\", \"54.77.251.214\",\n     \"54.94.195.96\", \"54.94.200.247\"\n-])\n+}\n \n import re\n import sys\n@@ -30,7 +30,7 @@\n PATTERN_IPV4 = re.compile(r\"^((\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})):(\\d+)$\")\n PATTERN_IPV6 = re.compile(r\"^\\[([0-9a-z:]+)\\]:(\\d+)$\")\n PATTERN_ONION = re.compile(r\"^([abcdefghijklmnopqrstuvwxyz234567]{16}\\.onion):(\\d+)$\")\n-PATTERN_AGENT = re.compile(r\"^(\\/Satoshi:0\\.8\\.6\\/|\\/Satoshi:0\\.9\\.(2|3|4|5)\\/|\\/Satoshi:0\\.10\\.\\d{1,2}\\/|\\/Satoshi:0\\.11\\.\\d{1,2}\\/)$\")\n+PATTERN_AGENT = re.compile(r\"^(/Satoshi:0.12.(0|1|99)/|/Satoshi:0.13.(0|1|2|99)/)$\")\n \n def parseline(line):\n     sline = line.split()\n@@ -104,7 +104,7 @@ def filtermultiport(ips):\n     hist = collections.defaultdict(list)\n     for ip in ips:\n         hist[ip['sortkey']].append(ip)\n-    return [value[0] for (key,value) in hist.items() if len(value)==1]\n+    return [value[0] for (key,value) in list(hist.items()) if len(value)==1]\n \n # Based on Greg Maxwell's seed_filter.py\n def filterbyasn(ips, max_per_asn, max_total):\n@@ -164,9 +164,9 @@ def main():\n \n     for ip in ips:\n         if ip['net'] == 'ipv6':\n-            print '[%s]:%i' % (ip['ip'], ip['port'])\n+            print('[%s]:%i' % (ip['ip'], ip['port']))\n         else:\n-            print '%s:%i' % (ip['ip'], ip['port'])\n+            print('%s:%i' % (ip['ip'], ip['port']))\n \n if __name__ == '__main__':\n     main()"
      },
      {
        "sha": "0451771daed4597c0a7b76e4a8a78fd603ee2a1b",
        "filename": "contrib/seeds/nodes_main.txt",
        "status": "modified",
        "additions": 1031,
        "deletions": 800,
        "changes": 1831,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81/contrib/seeds/nodes_main.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81/contrib/seeds/nodes_main.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/nodes_main.txt?ref=d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81",
        "patch": "@@ -1,937 +1,1168 @@\n-5.2.145.201:8333\n-5.22.142.214:8333\n-5.53.172.197:8333\n-5.189.161.164:8333\n-5.230.140.166:8333\n-5.231.3.130:8333\n-5.255.80.103:8333\n-14.202.230.49:8333\n-18.85.11.130:8333\n-23.91.97.25:8333\n-23.94.100.122:8333\n-23.95.99.132:8333\n-24.115.8.206:8333\n-24.127.128.191:8333\n-24.154.178.25:8333\n-24.207.103.43:8333\n-24.207.104.105:8333\n-24.210.230.150:8333\n-24.224.18.84:8333\n-24.246.168.106:8333\n-27.254.64.47:8333\n-31.6.71.123:8333\n-31.6.71.124:8333\n-31.14.134.13:8333\n-31.30.36.220:8333\n-31.164.6.104:8333\n+2.7.8.12:8333\n+2.228.70.198:8333\n+5.39.64.7:8333\n+5.45.80.34:38333\n+5.51.160.38:8333\n+5.61.33.33:8333\n+5.61.37.12:8333\n+5.95.80.47:8333\n+5.102.164.173:8333\n+5.175.71.130:8333\n+5.189.165.22:8333\n+5.199.130.228:8333\n+5.228.100.222:8333\n+5.255.64.231:8333\n+13.93.6.133:8333\n+18.85.34.10:8333\n+18.241.0.63:8333\n+23.28.128.65:8333\n+23.248.113.52:8333\n+23.253.151.73:8333\n+24.4.96.121:8333\n+24.69.65.191:8333\n+24.87.8.43:8333\n+24.150.224.110:8333\n+24.227.69.146:8333\n+27.0.235.33:8333\n 31.170.106.203:8333\n-31.185.134.201:8333\n-31.204.128.99:8333\n-31.204.128.219:8333\n-37.1.219.88:8333\n-37.97.132.109:8333\n-37.120.160.55:8333\n+31.184.197.96:8333\n+31.214.240.56:8333\n+37.1.202.134:8333\n+37.18.74.232:8333\n+37.34.48.17:8333\n+37.48.64.140:8333\n+37.97.141.116:8333\n+37.120.164.16:8333\n 37.120.169.123:8333\n-37.139.32.46:8333\n-37.221.163.218:8333\n-38.130.192.72:8333\n-41.75.96.80:8333\n-45.3.0.49:8333\n-45.33.72.185:8333\n-45.33.96.129:8333\n-45.56.4.63:8333\n-45.79.0.127:8333\n-45.79.80.102:8333\n-45.79.97.30:8333\n-45.79.132.219:8333\n-46.21.97.135:8333\n-46.28.205.67:8333\n-46.28.206.188:8333\n-46.29.20.209:8333\n-46.50.234.179:8333\n-46.101.160.168:8333\n-46.166.161.35:8333\n-46.166.161.103:8333\n-46.182.132.100:8333\n-46.218.227.92:8333\n-46.226.109.20:8333\n-46.227.66.132:8333\n-46.227.66.138:8333\n-46.229.165.154:8333\n-46.229.165.155:8333\n+37.143.9.128:8333\n+37.153.172.227:8333\n+37.193.227.16:8333\n+37.205.8.78:8333\n+37.220.0.114:8333\n+37.232.218.199:8333\n+38.140.161.53:8333\n+40.87.70.120:8333\n+41.162.163.93:8333\n+42.2.198.48:8333\n+45.20.67.1:8333\n+45.55.197.77:8333\n+45.56.97.63:8333\n+45.58.38.162:8333\n+45.63.1.33:8333\n+45.79.2.70:8333\n+46.16.240.98:8333\n+46.19.137.74:8333\n+46.28.206.146:8333\n+46.32.252.197:8333\n+46.59.13.59:8333\n+46.59.39.195:8333\n+46.148.16.210:8333\n+46.160.195.121:8333\n+46.166.142.21:8333\n+46.166.160.29:8330\n+46.188.44.20:8333\n 46.229.238.187:8333\n-46.234.104.48:8333\n-46.239.107.74:8333\n-46.244.0.138:8333\n-46.254.72.195:8333\n-50.5.13.44:8333\n-50.7.37.114:8333\n-50.30.37.103:8333\n-50.39.105.60:8333\n-50.106.40.231:8333\n-52.29.0.37:8333\n-52.76.192.246:8333\n-54.152.192.179:8333\n-54.169.64.174:8333\n-54.175.160.22:8333\n-54.199.128.0:8333\n-58.96.171.129:8333\n-58.161.238.57:8333\n-60.251.195.221:8333\n-61.35.225.19:8333\n+46.231.16.149:8333\n+47.88.100.130:8333\n+47.89.192.134:8333\n+47.185.194.160:8333\n+47.189.129.218:8333\n+49.65.2.140:8333\n+50.3.72.129:8333\n+50.31.99.225:8333\n+51.175.33.95:8333\n+52.1.165.219:8333\n+52.10.170.186:8333\n+52.51.128.216:8333\n+54.197.130.244:8333\n+58.59.2.22:8333\n+58.84.6.81:8333\n+59.125.8.143:8333\n+59.167.130.139:8333\n+61.47.2.20:8333\n 62.43.130.178:8333\n-62.65.39.12:8333\n+62.76.96.6:8333\n 62.107.200.30:8333\n+62.133.15.58:8333\n 62.133.194.2:8333\n-62.181.238.186:8333\n-62.183.22.50:8333\n-62.210.85.120:8333\n-62.210.162.89:8333\n+62.133.194.156:8333\n+62.138.1.95:8333\n+62.216.238.3:8333\n 62.238.34.125:8333\n-64.25.171.73:8333\n-64.27.166.30:8333\n-64.53.137.101:8333\n-64.71.72.44:8333\n+63.137.40.207:8333\n+63.231.96.109:8333\n+64.78.240.150:8333\n 64.83.225.146:8333\n-64.121.3.163:8333\n-64.203.102.86:8333\n-65.94.131.59:8333\n-65.188.136.233:8333\n-66.11.162.218:8333\n-66.23.228.133:8333\n-66.90.137.89:8333\n-66.114.33.49:8333\n-66.150.105.77:8333\n+64.137.236.68:8833\n+64.156.193.120:8333\n+66.79.160.82:8333\n+66.91.230.231:8333\n+66.135.128.121:8333\n 66.172.10.4:8333\n 66.194.38.250:8333\n 66.194.38.253:8333\n-66.194.38.254:8333\n-66.231.97.172:8333\n+66.215.34.26:8333\n 66.240.237.155:8333\n-67.159.13.34:8333\n-67.205.74.206:8333\n+67.205.96.108:8333\n+67.205.128.5:8333\n+67.219.233.140:8333\n 67.221.193.55:8333\n-67.227.72.17:8333\n-68.65.120.53:8333\n-68.65.205.226:9000\n-68.144.4.34:8333\n-69.39.49.199:8333\n+68.100.196.118:8333\n+68.132.193.222:8333\n+68.168.118.234:8333\n+69.11.97.43:8333\n+69.30.229.10:8333\n 69.50.171.205:8333\n-69.65.41.21:8333\n-69.113.98.61:8333\n-69.119.97.39:8333\n-69.146.70.124:8333\n-69.193.71.2:8333\n-70.46.10.237:8333\n-70.80.200.187:8333\n-70.185.97.117:8333\n-71.254.160.25:8333\n-72.28.203.5:8333\n-72.52.130.110:8333\n-72.83.194.122:8333\n-72.128.32.167:8333\n-72.179.136.80:8333\n-72.235.38.70:8333\n-74.50.44.193:8333\n-74.72.60.83:8333\n-74.80.234.116:8333\n-74.207.233.193:8333\n-75.112.233.128:8333\n-75.118.166.197:8333\n-75.140.0.241:8333\n-75.159.240.66:8333\n-75.174.5.26:8333\n-76.72.160.252:8333\n-76.72.160.254:8333\n-76.74.170.112:8333\n-76.79.201.54:8333\n-76.175.166.164:8333\n-76.179.105.27:8333\n-77.68.37.200:8333\n-77.234.49.196:8333\n-77.247.229.93:8333\n-78.24.72.78:8333\n-78.47.32.147:8333\n-78.84.100.95:8333\n-78.121.69.23:8333\n-78.129.167.5:8333\n-78.193.96.155:8333\n-79.19.37.179:8333\n+69.125.193.145:8333\n+69.162.139.125:8333\n+70.35.98.39:8333\n+70.112.32.29:8333\n+71.126.181.146:8333\n+72.180.32.105:8333\n+73.226.64.145:8333\n+74.83.140.242:8333\n+74.84.128.158:9333\n+74.122.237.124:8333\n+74.215.133.145:8333\n+75.76.101.169:8333\n+75.85.13.8:8333\n+75.86.168.13:8333\n+75.170.97.25:8333\n+75.177.137.134:8333\n+76.76.227.136:8333\n+77.53.136.6:8333\n+77.110.11.52:8333\n+78.25.32.206:8333\n+78.34.8.120:8333\n+78.46.32.99:8333\n+78.56.9.214:8333\n+78.56.229.177:8333\n+78.129.237.245:8333\n+78.196.172.45:8333\n 79.132.230.144:8333\n-79.133.43.63:8333\n-79.134.201.66:8333\n 79.169.35.235:8333\n-80.57.227.14:8333\n+79.172.194.219:8333\n 80.64.65.87:8333\n-80.86.92.70:8333\n-80.100.203.151:8333\n-80.101.32.121:8333\n-80.161.178.73:8333\n-80.240.129.170:8333\n-81.7.11.50:8333\n-81.7.11.55:8333\n-81.17.17.40:9333\n-81.30.39.83:8333\n-81.90.36.7:9444\n-81.136.224.77:8333\n-81.162.231.211:8333\n-81.184.0.143:8333\n-81.198.128.86:8333\n+80.89.137.115:8333\n+80.93.36.173:8333\n+80.101.167.100:8333\n+80.114.34.158:8333\n+80.127.136.50:8333\n+80.188.139.82:8333\n+80.222.39.77:8333\n+80.223.105.69:8333\n+80.229.151.187:8333\n+80.240.129.221:8333\n+81.7.10.238:8333\n+81.7.13.84:8333\n+81.27.96.92:8333\n+81.35.143.98:8333\n+81.82.201.5:8333\n+81.83.96.5:8333\n+81.169.227.36:8333\n+81.171.2.119:8333\n+81.171.38.130:8333\n+81.175.255.118:8333\n+81.207.8.49:8333\n+81.228.194.187:8333\n+82.9.1.77:8333\n 82.11.33.229:8333\n-82.79.128.134:8333\n-82.118.233.111:8333\n-82.135.139.30:8333\n+82.102.13.117:8333\n+82.116.203.240:8333\n+82.130.103.16:8333\n+82.136.65.227:8333\n+82.158.227.238:8333\n+82.197.212.25:8333\n 82.199.102.10:8333\n-82.221.106.17:8333\n-82.221.108.21:8333\n+82.200.204.41:8333\n+82.200.204.119:8333\n+82.221.105.223:8333\n 82.221.108.27:8333\n-83.137.41.3:8333\n-83.142.197.168:8333\n+82.221.111.136:8333\n+82.221.139.97:8333\n+83.137.41.10:8333\n 83.143.130.19:8333\n 83.150.9.196:8333\n-83.183.17.191:8333\n-83.227.173.83:8333\n-83.230.5.15:8333\n-83.233.105.151:443\n-83.246.75.8:8333\n-83.250.133.158:8333\n-83.255.66.118:8334\n-84.24.69.59:8333\n+83.169.2.43:8333\n+83.217.203.130:8333\n+83.249.88.52:8333\n+84.26.162.92:8333\n 84.42.193.6:8333\n-84.45.98.87:8333\n-84.54.128.11:8333\n-84.212.200.24:8333\n-84.215.198.109:8333\n-84.230.4.177:8333\n-85.95.228.83:8333\n-85.95.228.123:8333\n-85.114.128.134:8333\n-85.214.66.168:8333\n-85.214.147.162:8333\n-85.243.168.4:8333\n-86.1.0.18:8333\n-87.79.77.106:8333\n-87.91.156.110:8333\n-87.236.196.222:8333\n-88.85.75.152:8333\n-88.87.1.230:8333\n-88.87.92.102:8333\n-88.89.69.202:8333\n-88.97.72.229:8333\n-88.164.117.99:8333\n-88.198.32.131:8333\n+84.134.194.115:8333\n+84.201.32.115:8333\n+84.212.232.71:8333\n+84.238.140.176:8333\n+85.10.104.34:8333\n+85.21.144.226:8333\n+85.25.194.12:8333\n+85.144.79.190:8333\n+85.145.228.192:8333\n+85.194.238.130:8333\n+85.228.201.80:8333\n+85.229.228.174:8333\n+85.236.233.87:8333\n+86.80.204.185:8333\n+86.105.227.190:8333\n+86.135.39.40:8333\n+87.106.139.127:8333\n+87.120.8.5:8333\n+87.120.37.230:8333\n+87.239.101.102:8333\n+87.243.197.82:8333\n+88.112.112.173:8333\n+88.150.192.17:8333\n+88.185.155.134:8333\n+88.202.202.221:8333\n 88.202.230.87:8333\n-88.214.193.154:8343\n-88.214.194.226:8343\n-89.10.155.88:8333\n-89.46.101.44:8333\n-89.163.224.212:8333\n-89.174.248.20:8333\n-89.202.231.198:8333\n-89.212.75.6:8333\n+88.208.39.182:8333\n+89.34.99.41:8333\n+89.163.224.187:8333\n+89.169.233.150:8333\n+89.184.65.85:8333\n+89.212.91.219:8333\n+89.249.178.36:8333\n 90.149.38.172:8333\n-90.169.106.139:8333\n-91.64.101.150:8333\n-91.65.196.179:8333\n-91.121.80.17:8333\n-91.126.77.77:8333\n-91.145.76.156:8333\n-91.152.150.35:8333\n-91.192.137.17:8333\n-91.196.170.110:8333\n+91.65.97.157:8333\n+91.107.64.143:8333\n+91.114.35.107:8333\n+91.135.0.187:8333\n+91.145.110.95:8333\n+91.157.38.151:8333\n 91.197.44.133:8333\n-91.207.68.144:8333\n-91.210.105.28:8333\n-91.211.102.101:8333\n-91.211.106.34:8333\n-91.214.200.205:8333\n-91.220.43.146:8333\n-91.222.71.89:8333\n-91.224.140.242:8333\n-91.229.76.14:8333\n+91.205.176.54:8333\n+91.206.203.10:8333\n+91.206.203.18:8333\n+91.215.35.130:8333\n+91.219.239.159:8333\n+91.223.133.2:8333\n+91.223.133.40:8333\n+91.226.10.90:8333\n+91.240.141.169:8333\n 92.27.7.209:8333\n-92.51.167.88:8333\n-92.247.229.163:8333\n-93.84.114.106:8333\n-93.113.36.172:8333\n+92.89.67.207:8333\n+92.221.201.138:8333\n+93.95.187.122:8333\n+93.103.73.187:8333\n+93.123.80.47:8333\n 93.188.224.253:8333\n-94.75.239.69:8333\n-94.190.227.112:8333\n-94.214.2.74:8333\n-94.224.162.65:8333\n-94.236.198.253:8333\n+93.190.69.242:8333\n+94.19.12.244:8333\n+94.156.128.116:8333\n+94.177.171.73:8333\n+94.181.44.104:8333\n+94.237.26.173:8333\n 94.242.229.158:8333\n-95.84.138.99:8333\n-95.95.168.87:8333\n+94.255.128.98:8333\n+95.79.35.50:8333\n+95.91.41.39:8333\n 95.110.234.93:8333\n-95.130.9.200:8333\n-95.165.168.168:8333\n-95.170.235.254:8333\n-95.211.130.154:8333\n-96.46.68.104:8333\n-96.127.202.148:8333\n-97.76.171.35:8333\n-98.160.160.67:8333\n-99.126.197.187:8333\n-99.198.173.1:8333\n-101.100.174.138:8333\n-101.164.201.208:8333\n-103.224.165.48:8333\n-104.128.225.223:8333\n+95.128.48.209:8333\n+95.183.48.71:8333\n+96.23.67.85:8333\n+97.64.177.10:8333\n+97.104.201.95:8333\n+98.29.197.149:8333\n+98.169.2.107:8333\n+99.232.48.72:8333\n+101.100.141.55:8333\n+103.7.32.40:8333\n+103.53.225.69:8333\n+103.249.106.74:8333\n+104.128.224.13:8333\n 104.128.228.252:8333\n-104.131.192.94:8333\n-104.155.45.201:8334\n-104.194.28.195:8663\n-104.211.1.27:8333\n-104.221.38.177:8333\n-104.236.9.79:8333\n-104.236.129.178:8333\n-104.236.186.249:8333\n-104.236.194.15:8333\n-104.238.128.214:8333\n+104.155.1.158:8333\n+104.168.128.50:8333\n+104.199.160.228:8333\n+104.204.109.11:8333\n+104.219.251.118:8333\n+104.223.3.129:8333\n+104.223.3.219:8333\n 104.238.130.182:8333\n-106.38.234.84:8333\n-106.185.36.204:8333\n-106.185.38.67:8333\n-107.6.4.145:8333\n-107.150.2.6:8333\n-107.150.40.234:8333\n-107.170.13.184:8333\n-107.181.250.216:8333\n-107.191.101.111:8333\n-107.191.106.115:8333\n+104.245.99.227:8333\n+106.38.234.89:8333\n+106.104.134.218:8333\n+107.136.6.71:8333\n+107.150.45.210:8333\n+107.151.144.103:8333\n+107.170.44.99:8333\n+107.181.137.133:8333\n+107.191.102.13:8333\n+108.58.252.82:8333\n+108.59.9.167:8333\n 108.59.12.163:8333\n-108.161.129.247:8333\n-109.193.160.140:8333\n-109.197.13.54:8333\n-109.230.7.248:8333\n-109.234.106.191:8333\n-109.236.137.80:8333\n-109.251.161.121:8333\n-112.65.231.226:8333\n-115.70.166.57:8333\n-115.159.42.80:8333\n-117.18.73.34:8333\n-118.67.201.40:8333\n-118.100.86.246:8333\n-118.110.104.152:8333\n-119.224.64.141:8333\n+108.162.106.215:8333\n+108.168.133.164:8333\n+108.173.202.101:8333\n+108.180.110.190:8333\n+109.29.75.40:8333\n+109.120.194.136:8333\n+109.230.230.88:8333\n+109.235.67.115:8333\n+109.235.69.120:8333\n+109.236.90.199:8333\n+109.255.0.107:8333\n+110.10.130.12:8333\n+110.10.176.94:8333\n+110.132.172.251:8333\n+111.90.158.17:8333\n+115.66.205.171:8333\n+116.31.123.139:8333\n+118.192.48.46:8333\n+118.193.164.98:8333\n+119.29.156.231:8333\n+119.63.44.133:19980\n+119.81.99.27:8333\n+119.106.12.169:8333\n+119.147.137.155:19980\n+119.185.1.182:8333\n 120.55.193.136:8333\n-122.106.169.178:8333\n-123.203.174.15:8333\n-123.255.232.94:8333\n-124.148.165.165:8333\n-124.232.141.31:8333\n-128.30.92.69:8333\n-128.39.141.182:8333\n-128.84.167.20:8333\n-128.111.73.10:8333\n-128.127.38.195:8333\n+121.254.173.23:8333\n+121.254.173.40:8333\n+123.56.129.45:8333\n+123.203.163.128:8333\n+123.206.32.198:8333\n+124.189.160.221:8333\n+124.189.192.232:8333\n 128.140.224.162:8333\n-128.199.101.104:8333\n-128.233.224.35:8333\n-128.253.3.193:20020\n-130.180.228.138:8333\n-130.185.144.213:8333\n-130.255.73.207:8333\n-133.218.233.11:8333\n-134.249.128.23:8333\n-136.159.234.234:8333\n-137.116.160.176:8333\n-139.162.2.145:8333\n-139.162.23.117:8333\n-141.134.69.253:8333\n-141.255.162.215:8333\n-144.122.163.187:8333\n-145.131.3.54:8333\n-145.255.4.94:8333\n-146.0.32.101:8337\n-147.83.72.91:8333\n-148.103.28.68:8333\n-149.5.32.102:8333\n-149.210.164.195:8333\n-150.101.163.241:8333\n-151.236.11.189:8333\n-152.3.136.56:8333\n-154.20.208.25:8333\n-158.181.104.149:8333\n-159.253.96.226:8333\n-160.36.130.180:8333\n+128.199.68.205:8333\n+130.234.207.115:8333\n+131.113.41.123:8333\n+131.114.72.104:8333\n+132.204.108.155:8333\n+134.119.13.230:8333\n+134.213.133.206:8333\n+134.213.133.207:8333\n+135.23.5.3:8333\n+137.74.0.66:8333\n+138.68.1.45:8333\n+138.68.2.194:8333\n+138.68.64.19:8333\n+138.68.64.28:8333\n+139.59.42.248:8333\n+139.220.240.153:8333\n+140.112.107.118:8333\n+140.186.224.112:8333\n+141.52.64.141:8333\n+142.68.237.107:8333\n+142.217.12.106:8333\n+146.60.204.92:8333\n+146.185.161.209:8333\n+148.103.7.119:8333\n+149.210.133.244:8333\n+150.229.0.143:8333\n+151.231.238.25:8333\n+151.248.160.227:8333\n+153.230.228.15:8333\n+155.133.43.249:8333\n+158.58.238.145:8333\n+158.109.79.13:34821\n+159.203.70.208:8333\n+160.16.206.31:8333\n 162.209.1.233:8333\n 162.209.4.125:8333\n-162.209.106.123:8333\n-162.210.198.184:8333\n-162.248.99.164:53011\n+162.216.192.231:8333\n+162.243.100.111:8333\n+162.246.11.194:8333\n 162.248.102.117:8333\n-162.251.108.53:8333\n-163.44.2.48:8333\n-163.158.36.17:8333\n-166.230.71.67:8333\n-167.160.36.62:8333\n-167.160.169.92:8333\n-168.93.129.220:8333\n-169.55.99.84:8333\n-169.228.66.43:8333\n-172.9.169.242:8333\n-173.32.11.194:8333\n-173.230.228.136:8333\n-173.246.107.34:8333\n-173.254.235.34:8333\n-174.0.128.222:8333\n-174.25.130.148:8333\n-174.50.64.101:8333\n-175.140.232.141:8333\n-176.36.37.62:8333\n-176.46.9.96:8333\n-176.124.110.27:8333\n-177.39.16.102:8333\n-178.17.173.2:8333\n-178.62.5.248:8333\n-178.62.70.16:8333\n+162.252.46.83:8333\n+163.172.33.78:8333\n+163.172.194.30:8333\n+169.229.198.106:8333\n+170.75.195.168:8333\n+172.103.205.197:8333\n+172.245.225.126:8333\n+173.179.37.8:8333\n+173.208.203.74:8333\n+173.252.46.16:8333\n+174.117.141.124:8333\n+175.126.38.158:8333\n+175.126.38.177:8333\n+175.139.106.119:8333\n+175.140.232.66:8333\n+176.9.117.100:8333\n+176.36.33.121:8333\n+176.36.99.222:8333\n+176.56.227.36:8333\n+176.100.100.206:8333\n+176.106.144.183:8333\n+176.123.7.148:8333\n+176.126.167.10:8333\n+176.223.201.198:8333\n+178.62.68.62:8333\n+178.62.102.56:8333\n 178.62.203.185:8333\n-178.79.160.118:8333\n-178.169.206.244:8333\n-178.193.234.62:8333\n-178.199.96.108:8333\n-178.254.18.96:8333\n+178.124.197.101:8333\n+178.170.138.202:8333\n+178.175.129.18:8333\n+178.188.47.62:8333\n+178.199.240.22:8333\n+178.218.209.162:8333\n+178.237.35.34:8333\n+178.238.224.242:8333\n+178.254.34.144:8333\n 178.254.34.161:8333\n-178.255.41.123:8333\n-180.210.34.58:9801\n-182.92.226.212:8333\n-182.171.246.142:8333\n-184.23.8.9:8333\n-184.58.162.35:8333\n-184.154.9.170:8333\n-185.8.238.165:8333\n+179.43.183.2:8333\n+180.200.128.58:8333\n+182.93.34.130:8333\n+185.8.238.197:8333\n+185.11.139.172:8333\n 185.24.97.11:8333\n-185.31.137.139:8333\n-185.38.44.64:8333\n-185.53.128.180:8333\n-185.53.129.244:8333\n-185.77.129.119:8333\n-185.77.129.156:8333\n-185.82.203.92:8333\n-188.20.97.18:8333\n-188.126.8.14:8333\n-188.138.33.239:8333\n-188.155.136.70:8333\n+185.24.233.100:8333\n+185.25.48.71:8333\n+185.25.48.114:8333\n+185.28.76.179:8333\n+185.70.105.152:8339\n+185.77.128.69:8333\n+185.77.128.241:8333\n+185.86.79.87:8333\n+185.89.102.2:3333\n+185.89.102.53:3333\n+185.109.144.155:8333\n+185.117.75.50:8333\n+185.121.173.223:8333\n+185.128.41.157:8333\n+185.130.226.106:8333\n+185.145.130.76:8333\n+188.63.192.104:8333\n+188.113.164.231:8333\n 188.166.229.112:8333\n-188.182.108.129:8333\n-188.226.225.174:8010\n-188.242.171.8:8333\n-188.243.4.139:8333\n-190.10.9.234:8333\n-190.10.10.147:8333\n+188.214.128.77:8333\n+190.10.8.211:8333\n 190.81.160.184:8333\n-190.85.201.37:8333\n-192.34.227.230:8333\n-192.77.189.200:8333\n-192.124.224.7:8333\n-192.146.137.1:8333\n-192.203.228.71:8333\n-192.206.202.20:8333\n-193.0.109.3:8333\n-193.41.229.130:8333\n-193.41.229.156:8333\n+190.111.231.19:8333\n+192.131.44.93:8333\n+192.206.202.6:8333\n+192.227.245.133:8333\n+192.241.74.123:8333\n+192.241.74.126:8333\n+192.254.71.222:8333\n+193.10.64.85:8333\n+193.46.80.101:8333\n 193.49.43.219:8333\n-193.147.71.120:8333\n-193.179.65.233:8333\n+193.93.79.215:8333\n 193.183.99.46:8333\n-193.192.37.135:8333\n 193.234.224.195:8333\n-194.58.108.213:8333\n-194.187.96.2:8333\n-194.255.31.59:8333\n-195.36.6.101:8333\n-195.58.238.243:8333\n-195.197.175.190:8333\n-195.239.1.66:8333\n-198.48.196.230:8333\n-198.50.192.160:8333\n-198.57.210.27:8333\n-198.84.195.179:8333\n-198.167.140.8:8333\n+193.239.80.155:8333\n+194.63.140.208:8333\n+194.87.1.232:8333\n+194.187.227.18:8333\n+194.247.12.136:8333\n+195.91.176.86:8333\n+196.28.98.20:8333\n+198.44.249.35:8333\n+198.84.172.252:8333\n 198.204.224.106:8333\n-199.127.226.245:8333\n-199.201.110.8:8333\n-199.233.234.90:8333\n+198.211.97.46:8333\n+199.66.64.198:8333\n+199.101.100.58:8333\n+199.101.100.59:8333\n+199.127.224.50:8333\n+200.46.241.71:8333\n 200.116.98.185:8333\n-202.60.70.18:8333\n-203.151.140.14:8333\n-204.112.203.52:8333\n+203.9.225.13:8333\n+203.177.142.37:8333\n 205.200.247.149:8333\n-207.226.141.253:8333\n-207.255.42.202:8333\n-208.53.164.19:8333\n-208.66.68.127:8333\n-208.66.68.130:8333\n-208.71.171.232:8341\n-208.76.200.200:8333\n-208.82.98.189:8333\n-208.85.193.31:8333\n-208.111.48.41:8333\n-208.111.48.45:8333\n-209.34.232.72:8333\n-209.81.9.223:8333\n-209.90.224.2:8333\n+205.209.131.150:13838\n+206.53.64.74:8333\n+206.72.192.69:8333\n+206.123.112.180:8333\n+208.66.208.153:8333\n+208.68.174.76:8333\n+208.107.97.242:8333\n+208.111.48.132:8333\n+208.118.235.190:8333\n+209.6.205.126:8333\n+209.40.96.121:8333\n+209.58.130.137:8333\n+209.73.142.226:8333\n 209.90.224.4:8333\n-209.126.98.174:8333\n-209.136.72.69:8333\n-209.195.4.74:8333\n-209.197.13.62:8333\n-211.72.227.8:8333\n-212.51.144.42:8333\n-212.71.233.127:8333\n-212.126.14.122:8333\n-212.159.44.50:8333\n-213.5.36.58:8333\n-213.57.33.10:8333\n-213.66.205.194:8333\n-213.136.73.125:8333\n-213.155.3.216:8333\n-213.155.7.24:8333\n-213.167.17.6:8333\n-213.223.138.13:8333\n-216.15.78.182:8333\n-216.38.129.164:8333\n-216.48.168.8:8333\n-216.169.141.169:8333\n-216.245.206.181:8333\n-216.249.204.161:8333\n-216.250.138.230:8333\n+209.126.69.243:8333\n+209.126.108.91:8333\n+209.195.4.18:8333\n+209.250.6.190:8333\n+210.54.37.225:8333\n+210.223.3.44:8333\n+211.149.234.109:8333\n+212.51.140.183:8333\n+212.90.179.206:8333\n+212.93.226.90:8333\n+212.110.171.118:8333\n+212.202.132.17:8333\n+213.91.205.134:8333\n+213.165.68.218:8333\n+213.196.200.213:8333\n+216.59.4.212:8333\n+216.74.32.109:8333\n+216.158.225.70:8333\n+216.164.138.13:8333\n+216.167.236.247:8333\n+216.197.79.74:8333\n 217.11.225.189:8333\n-217.12.34.158:8333\n-217.12.202.33:8333\n-217.20.171.43:8333\n-217.23.1.126:8333\n-217.23.11.138:8333\n+217.12.199.207:8333\n+217.20.130.72:8333\n+217.23.6.148:8333\n+217.23.140.103:8333\n+217.28.96.180:8333\n+217.35.130.42:8333\n 217.111.66.79:8333\n-217.155.202.191:8333\n 217.158.9.102:8333\n-217.172.32.18:20993\n-220.245.196.37:8333\n-[2001:1291:2bf:1::100]:8333\n+217.168.143.169:8333\n+217.209.32.219:8333\n+218.161.33.165:8333\n+221.121.144.138:8333\n+[2001:0:4137:9e76:2048:3a84:bb91:e846]:8333\n+[2001:0:4137:9e76:2066:e9e:b489:f8b8]:8333\n+[2001:0:4137:9e76:3854:1211:b5ac:a96b]:8333\n+[2001:0:4137:9e76:4e3:1f66:cd4c:829f]:8333\n+[2001:0:4137:9e76:ad:1f4:9ea9:fa2e]:8333\n+[2001:0:4137:9e76:e5:baa:b66f:f418]:8333\n+[2001:0:53aa:64c:20a2:59c4:ad22:93ea]:8333\n+[2001:0:53aa:64c:59:617f:a10d:e0]:8333\n+[2001:0:5ef5:79fb:200f:3ae5:3cbc:74c9]:8333\n+[2001:0:5ef5:79fb:38f2:13b4:b208:5604]:8333\n+[2001:0:5ef5:79fd:200b:22a7:cc50:f52d]:8333\n+[2001:0:5ef5:79fd:24ef:1aef:a994:303d]:8333\n+[2001:0:5ef5:79fd:24fc:b5d:ad4f:4db2]:8333\n+[2001:0:5ef5:79fd:28bf:2d23:e02e:c3ef]:8333\n+[2001:0:5ef5:79fd:3cd0:3c2e:da44:a759]:8333\n+[2001:0:5ef5:79fd:87e:fd7:b1c2:1b4]:8333\n+[2001:0:9d38:6ab8:18db:3bda:ab90:e81e]:8333\n+[2001:0:9d38:6ab8:4e7:1660:862f:a6d7]:8333\n+[2001:0:9d38:6ab8:6:2b:5074:9588]:8333\n+[2001:0:9d38:6abd:10f8:a7d7:bb90:f524]:8333\n+[2001:13d8:1c01:1000::11]:8333\n+[2001:15c0:65ff:610::2]:8333\n+[2001:1608:10:156:ae::4adb]:8333\n+[2001:1620:b1b:8888:20d:b9ff:fe41:6710]:8333\n+[2001:1620:b1b:face:20d:b9ff:fe41:6710]:8333\n [2001:1620:f00:282::2]:8333\n [2001:1620:f00:8282::1]:8333\n-[2001:19f0:5000:8de8:5400:ff:fe12:55e4]:8333\n-[2001:19f0:6c00:9103:5400:ff:fe10:a8d3]:8333\n-[2001:1b60:3:172:142b:6dff:fe7a:117]:8333\n-[2001:410:a000:4050:8463:90b0:fffb:4e58]:8333\n+[2001:1680:101:1ae::1]:8333\n+[2001:16d8:ff00:85de:20c:29ff:fe52:9594]:8333\n+[2001:19f0:4400:434d:5400:ff:fe42:2678]:8333\n+[2001:19f0:5000:8c8b:5400:ff:fe1f:c023]:8333\n+[2001:19f0:5000:8ce6:5400:ff:fe1b:24a9]:8333\n+[2001:19f0:5:314:5400:ff:fe2c:42e8]:8333\n+[2001:19f0:5:51b:5400:ff:fe49:fe5b]:8333\n+[2001:19f0:5:bc:5400:ff:fe3b:9339]:8333\n+[2001:1af8:4020:a020:5::]:8333\n+[2001:1bc8:1a0:590e:2e0:f4ff:fe16:3a39]:8333\n+[2001:1c04:1401:8f00:f4fe:4fff:fe0c:df40]:8333\n+[2001:4128:6135:10:20c:29ff:fe69:9e81]:8333\n [2001:4128:6135:2010:21e:bff:fee8:a3c0]:8333\n-[2001:41d0:1008:761::17c]:8333\n+[2001:4128:6135:e001:5054:ff:fe37:e9eb]:8333\n+[2001:41d0:1000:1024::]:8333\n+[2001:41d0:1000:1433::]:8333\n+[2001:41d0:1004:22ae::]:8333\n+[2001:41d0:1004:2996::]:8333\n+[2001:41d0:1008:11e0::1a5c:6d9d]:8333\n+[2001:41d0:1008:11e0::b74:baf7]:8333\n+[2001:41d0:1008:237a::]:8333\n+[2001:41d0:1008:2752::]:8333\n+[2001:41d0:1008:494::]:8333\n [2001:41d0:1:45d8::1]:8333\n-[2001:41d0:1:6cd3::]:8333\n+[2001:41d0:1:5630::1]:8333\n+[2001:41d0:1:6f57::1]:8333\n+[2001:41d0:1:801e::1]:8333\n+[2001:41d0:1:8852::1]:8333\n [2001:41d0:1:8b26::1]:8333\n-[2001:41d0:1:afda::]:8200\n+[2001:41d0:1:a5b8::1]:8333\n [2001:41d0:1:b26b::1]:8333\n [2001:41d0:1:c139::1]:8333\n [2001:41d0:1:c8d7::1]:8333\n-[2001:41d0:1:f59f::33]:8333\n-[2001:41d0:1:f7cc::1]:8333\n-[2001:41d0:2:1021::1]:8333\n-[2001:41d0:2:37c3::]:8200\n-[2001:41d0:2:4797:2323:2323:2323:2323]:8333\n-[2001:41d0:2:53df::]:8333\n+[2001:41d0:1:d227::]:8333\n+[2001:41d0:1:dbc4::1]:8333\n+[2001:41d0:1:dc5d::1]:8333\n+[2001:41d0:1:e13b::1]:8333\n+[2001:41d0:1:ef5b::1]:8333\n+[2001:41d0:2:16be::1]:8333\n+[2001:41d0:2:203c::1]:8333\n+[2001:41d0:2:38c5::1]:8333\n+[2001:41d0:2:519::]:8333\n [2001:41d0:2:9c94::1]:8333\n-[2001:41d0:2:9d3e::1]:8333\n-[2001:41d0:2:a24f::]:8333\n-[2001:41d0:2:a35a::]:8333\n-[2001:41d0:2:b2b8::]:8333\n-[2001:41d0:2:c1d9::]:8333\n-[2001:41d0:2:c6e::]:8333\n+[2001:41d0:2:b792::]:8333\n+[2001:41d0:2:bf2a::]:8333\n+[2001:41d0:2:c793::]:8333\n [2001:41d0:2:c9bf::]:8333\n-[2001:41d0:2:f1a5::]:8333\n-[2001:41d0:52:a00::105f]:8333\n-[2001:41d0:52:cff::6f5]:8333\n-[2001:41d0:52:d00::6e2]:8333\n-[2001:41d0:8:3e75::1]:8333\n-[2001:41d0:8:62ab::1]:8333\n+[2001:41d0:303:4f0::]:8333\n+[2001:41d0:8:1a8a::1]:8333\n+[2001:41d0:8:3fa9::1]:8333\n+[2001:41d0:8:4670::1]:8333\n+[2001:41d0:8:4f48::1]:8333\n [2001:41d0:8:6728::]:8333\n-[2001:41d0:8:b30a::1]:8333\n-[2001:41d0:8:bc26::1]:8333\n-[2001:41d0:8:be9a::1]:8333\n-[2001:41d0:8:d984::]:8333\n-[2001:41d0:8:eb8b::]:8333\n-[2001:41d0:a:13a2::1]:8333\n-[2001:41d0:a:2b18::1]:8333\n-[2001:41d0:a:2d14::]:8333\n-[2001:41d0:a:4558::1df2:76d3]:8333\n-[2001:41d0:a:4aaa::]:8333\n-[2001:41d0:a:635b::1]:8333\n-[2001:41d0:a:63d8::1]:8333\n+[2001:41d0:8:72c2:d:242:ac11:2]:8333\n+[2001:41d0:8:8007::]:8333\n+[2001:41d0:8:a71c::]:8333\n+[2001:41d0:8:bccc::1]:8333\n+[2001:41d0:8:bd45::1]:8333\n+[2001:41d0:8:c67c::]:8333\n+[2001:41d0:8:de3d::1]:8333\n+[2001:41d0:8:e257::1]:8333\n+[2001:41d0:8:e3e4::1]:8333\n+[2001:41d0:a:14cc::1]:8333\n+[2001:41d0:a:15b2::1]:8333\n+[2001:41d0:a:1ac9::1]:8333\n+[2001:41d0:a:2496::1]:8333\n+[2001:41d0:a:308c::]:8333\n+[2001:41d0:a:5879::]:8333\n+[2001:41d0:a:6810::1]:8333\n+[2001:41d0:a:682d::1]:8333\n [2001:41d0:a:6c29::1]:8333\n-[2001:41d0:a:f9cd::1]:8333\n-[2001:41d0:d:20a4::]:8333\n+[2001:41d0:a:f52a::1]:8333\n+[2001:41d0:d:111c::]:8333\n+[2001:41d0:e:1388::1]:8333\n [2001:41d0:e:26b::1]:8333\n+[2001:41d0:e:f73::1]:8333\n [2001:41d0:fc8c:a200:7a24:afff:fe9d:c69b]:8333\n+[2001:41f0:61:0:72f3:95ff:fe09:7521]:8333\n [2001:41f0:61::7]:8333\n-[2001:41f0::2]:8333\n-[2001:44b8:41bd:6101:148e:4022:4950:e861]:8333\n-[2001:470:1:2f9:0:1:107a:a301]:8333\n-[2001:470:1f0b:ad6::2]:8333\n-[2001:470:1f11:12d5::ae1:5611]:8333\n+[2001:4428:200:8171:db6:2ff4:9c0e:a2da]:8333\n+[2001:470:1f07:151c:baac:6fff:feb7:3ba9]:8333\n+[2001:470:1f0b:ad6:a60:6eff:fec6:2323]:8333\n+[2001:470:1f11:617::10f]:8333\n+[2001:470:1f14:73e::2]:8333\n [2001:470:1f14:7d::2]:8333\n-[2001:470:27:ce::2]:8333\n+[2001:470:1f15:11f8::10]:8333\n+[2001:470:1f15:1b95:2c3e:8a9a:24e1:7084]:8333\n+[2001:470:1f15:e9b::3ef]:8333\n+[2001:470:1f1d:3a9::10]:8333\n+[2001:470:25:482::2]:8333\n+[2001:470:27:19f::2]:8333\n+[2001:470:27:665::2]:8333\n+[2001:470:28:365::4]:8333\n [2001:470:41:6::2]:8333\n-[2001:470:507d:0:6ab5:99ff:fe73:ac18]:8333\n-[2001:470:583e::2a]:8333\n-[2001:470:5f:5f::232]:8333\n-[2001:470:66:119::2]:8333\n-[2001:470:6c4f::cafe]:8333\n-[2001:470:6f:327:913b:7fe:8545:a4f5]:8333\n-[2001:470:7dda:1::1]:8333\n-[2001:470:95c1::2]:8333\n-[2001:470:b1d0:ffff::1000]:8333\n-[2001:470:d00d:0:3664:a9ff:fe9a:5150]:8333\n-[2001:470:fab7:1::1]:8333\n-[2001:4800:7819:104:be76:4eff:fe05:c828]:8333\n-[2001:4800:7819:104:be76:4eff:fe05:c9a0]:8333\n+[2001:470:727b::11:14]:8333\n+[2001:470:7:2f0::2]:8333\n+[2001:470:7:65::2]:8333\n+[2001:470:7f85::2]:8333\n+[2001:470:8:2e1:5825:39df:3e4c:54a8]:8333\n+[2001:470:8:2e1::43]:8333\n+[2001:470:8:2e1:ae2a:e257:4470:6350]:8333\n+[2001:470:a:c13::2]:8333\n [2001:4801:7819:74:b745:b9d5:ff10:a61a]:8333\n [2001:4801:7819:74:b745:b9d5:ff10:aaec]:8333\n [2001:4801:7828:104:be76:4eff:fe10:1325]:8333\n-[2001:4802:7800:1:be76:4eff:fe20:f023]:8333\n [2001:4802:7800:2:30d7:1775:ff20:1858]:8333\n-[2001:4802:7800:2:be76:4eff:fe20:6c26]:8333\n-[2001:4802:7802:101:be76:4eff:fe20:256]:8333\n-[2001:4802:7802:103:be76:4eff:fe20:2de8]:8333\n-[2001:4830:1100:2e8::2]:8333\n-[2001:4b98:dc2:41:216:3eff:fe56:f659]:8333\n-[2001:4ba0:fffa:5d::93]:8333\n-[2001:4ba0:ffff:1be:1:1005:0:1]:8333\n-[2001:4dd0:ff00:867f::3]:8333\n+[2001:4ba0:babe:832::]:8333\n+[2001:4ba0:cafe:379::1]:8333\n+[2001:4ba0:ffee:33::10]:8333\n [2001:4dd0:ff00:9a67::9]:8333\n-[2001:5c0:1400:b::3cc7]:8333\n [2001:610:1b19::3]:8333\n [2001:610:600:a41::2]:8333\n-[2001:67c:26b4::]:8333\n-[2001:8d8:840:500::39:1ae]:8333\n-[2001:8d8:965:4a00::10:9343]:8333\n-[2001:980:4650:1:2e0:53ff:fe13:2449]:8333\n+[2001:678:174:4021::2:8333]:8333\n+[2001:67c:16dc:1201:5054:ff:fe17:4dac]:8333\n+[2001:67c:2128:ffff:6062:36ff:fe30:6532]:8333\n+[2001:67c:2564:331:3547:6e28:85a4:fb27]:8333\n+[2001:6a0:200:368::2]:8333\n+[2001:718:801:311:5054:ff:fe19:c483]:8333\n+[2001:7b8:2ff:8f::2]:8333\n+[2001:8d8:8a6:4400::3f:86c]:8333\n+[2001:8d8:923:8400::87:ebd]:8333\n+[2001:960:66d::2]:8333\n [2001:981:46:1:ba27:ebff:fe5b:edee]:8333\n-[2001:9c8:53e9:369a:226:2dff:fe1b:7472]:8333\n-[2001:9d8:cafe:3::87]:8333\n-[2001:b10:11:21:3e07:54ff:fe48:7248]:8333\n-[2001:ba8:1f1:f34c::2]:8333\n-[2001:bc8:2310:100::1]:8333\n-[2001:bc8:3427:101:7a4f:8be:2611:6e79]:8333\n-[2001:bc8:3505:200::1]:8333\n-[2001:cc0:a004::30:1d]:8333\n-[2001:e42:102:1209:153:121:76:171]:8333\n-[2002:17ea:14eb::17ea:14eb]:8333\n-[2002:2f8:2bc5::2f8:2bc5]:8333\n-[2002:4047:482c::4047:482c]:8333\n-[2002:45c3:8cca::45c3:8cca]:8333\n-[2002:46bb:8a41:0:226:b0ff:feed:5f12]:8888\n-[2002:46bb:8c3c:0:8d55:8fbb:15fa:f4e0]:8765\n-[2002:4c48:a0fe::4c48:a0fe]:8333\n-[2002:4d44:25c8::4d44:25c8]:8333\n-[2002:505f:aaa2::505f:aaa2]:8333\n-[2002:5bc1:799d::5bc1:799d]:8333\n-[2002:6dec:5472::6dec:5472]:8333\n-[2002:8c6d:6521:9617:12bf:48ff:fed8:1724]:8333\n-[2002:ac52:94e2::ac52:94e2]:8333\n-[2002:af7e:3eca::af7e:3eca]:8333\n-[2002:b009:20c5::b009:20c5]:8333\n-[2002:c06f:39a0::c06f:39a0]:8333\n-[2002:c23a:738a::c23a:738a]:8333\n-[2002:c70f:7442::c70f:7442]:8333\n-[2002:cec5:be4f::cec5:be4f]:8333\n-[2002:d149:9e3a::d149:9e3a]:8333\n+[2001:ba8:1f1:f069::2]:8333\n+[2001:bc8:225f:10e:505:6573:7573:d0a]:8333\n+[2001:bc8:2706::1]:8333\n+[2001:bc8:323c:100::53]:8333\n+[2001:bc8:323c:100::80:4]:8333\n+[2001:bc8:323c:100::cafe]:8333\n+[2001:bc8:3680:4242::1]:8333\n+[2001:bc8:399f:f000::1]:8333\n+[2001:bc8:3cbf::5]:8333\n+[2001:bc8:4700:2300::19:807]:8333\n+[2001:e42:102:1805:160:16:206:31]:8333\n+[2002:12f1:3f::12f1:3f]:8333\n+[2002:1e2:5349::1e2:5349]:8333\n+[2002:1e2:5588::1e2:5588]:8333\n+[2002:2501:cf62::2501:cf62]:8333\n+[2002:268c:a135::268c:a135]:8333\n+[2002:2a33:99db::2a33:99db]:8332\n+[2002:2ebc:2c14::7]:8333\n+[2002:2f59:2c9c::2f59:2c9c]:11885\n+[2002:2f5a:3619::2f5a:3619]:8333\n+[2002:2f5a:36a4::2f5a:36a4]:8333\n+[2002:2f5a:429::2f5a:429]:8333\n+[2002:2f5a:562a::2f5a:562a]:8333\n+[2002:3a3b:216::3a3b:216]:8333\n+[2002:3dfa:5d23::3dfa:5d23]:8333\n+[2002:424f:a052::424f:a052]:8333\n+[2002:451e:e922::451e:e922]:8333\n+[2002:4540:4b30::4540:4b30]:8333\n+[2002:51ab:7cc::51ab:7cc]:8333\n+[2002:527:de11::527:de11]:8333\n+[2002:5395:7d01::5395:7d01]:8333\n+[2002:5395:7d2a::5395:7d2a]:8333\n+[2002:5669:e3be::5669:e3be]:8333\n+[2002:566a:5d6d::566a:5d6d]:8333\n+[2002:59b9:f820::59b9:f820]:8333\n+[2002:59f8:ac69::59f8:ac69]:8333\n+[2002:5bd4:b65a::5bd4:b65a]:8333\n+[2002:5c3f:39db::5c3f:39db]:8333\n+[2002:5d33:8d03::5d33:8d03]:8333\n+[2002:5d67:49bb::5d67:49bb]:8333\n+[2002:5dae:5d5f::5dae:5d5f]:8333\n+[2002:5dbe:8cc6::5dbe:8cc6]:8333\n+[2002:5dbe:9503::5dbe:9503]:8333\n+[2002:5fd3:8944::5fd3:8944]:8333\n+[2002:5fd3:9467::5fd3:9467]:8333\n+[2002:67f9:6a48::67f9:6a48]:8333\n+[2002:67f9:6a4a::67f9:6a4a]:8333\n+[2002:67f9:6a95::67f9:6a95]:8333\n+[2002:6a0e:3ea8::6a0e:3ea8]:10011\n+[2002:6b96:375a::6b96:375a]:8333\n+[2002:6ca8:cffb::6ca8:cffb]:8333\n+[2002:6caf:234::6caf:234]:8333\n+[2002:6dec:58f5::6dec:58f5]:8333\n+[2002:6dec:5ac7::6dec:5ac7]:8333\n+[2002:7237:4a02::7237:4a02]:20033\n+[2002:7237:94fd::7237:94fd]:10011\n+[2002:7237:e428::7237:e428]:8333\n+[2002:7237:fcf6::7237:fcf6]:20188\n+[2002:76c0:96e6::76c0:96e6]:8333\n+[2002:7819:7e80::7819:7e80]:7743\n+[2002:781a:ea86::781a:ea86]:8333\n+[2002:781a:f3c2::781a:f3c2]:14475\n+[2002:784c:c2c0::784c:c2c0]:8333\n+[2002:784c:ec97::784c:ec97]:8333\n+[2002:792b:261a::792b:261a]:8333\n+[2002:88f3:8cca::88f3:8cca]:8333\n+[2002:88f3:a83c::88f3:a83c]:8333\n+[2002:8ac9:516f::8ac9:516f]:8333\n+[2002:8b81:6d78::8b81:6d78]:50344\n+[2002:8b81:6e5c::8b81:6e5c]:38176\n+[2002:8bc4:90a6::8bc4:90a6]:8333\n+[2002:ac52:b854::ac52:b854]:8333\n+[2002:add0:c14a::add0:c14a]:8333\n+[2002:b07e:a70a::b07e:a70a]:8333\n+[2002:b27c:c565:1::250]:8333\n+[2002:b27c:c565::1]:8333\n+[2002:b94d:80f1::b94d:80f1]:8333\n+[2002:b982:e26a::b982:e26a]:8333\n+[2002:bcd5:3145::bcd5:3145]:8333\n+[2002:c08a:d22b::c08a:d22b]:8333\n+[2002:c0c7:f8e3::c0c7:f8e3]:32771\n+[2002:c1a9:fc5a::c1a9:fc5a]:8333\n+[2002:c23f:8fc5::c23f:8fc5]:8333\n+[2002:d395:ea6d::d395:ea6d]:8333\n [2002:d917:ca5::d917:ca5]:8333\n-[2400:8900::f03c:91ff:fe50:153f]:8333\n-[2400:8900::f03c:91ff:fe6e:823e]:8333\n-[2400:8900::f03c:91ff:fea8:1934]:8333\n-[2400:8901::f03c:91ff:fe26:c4d6]:8333\n+[2002:d917:e91::d917:e91]:8333\n+[2002:db71:f434::db71:f434]:8333\n+[2400:2651:161:1000:6847:d40f:aaa3:4848]:8333\n [2400:8901::f03c:91ff:fec8:4280]:8333\n-[2400:8901::f03c:91ff:fec8:660f]:8333\n-[2401:1800:7800:102:be76:4eff:fe1c:559]:8333\n [2401:1800:7800:102:be76:4eff:fe1c:a7d]:8333\n+[2401:2500:203:10:153:120:156:83]:8333\n+[2401:a400:3200:5600:14ee:f361:4bdc:1f7c]:8333\n+[2403:4200:403:2::ff]:8333\n [2405:aa00:2::40]:8333\n-[2600:3c00::f03c:91ff:fe18:59b2]:8333\n-[2600:3c00::f03c:91ff:fe26:bfb6]:8333\n-[2600:3c00::f03c:91ff:fe33:88e3]:8333\n-[2600:3c00::f03c:91ff:fe6e:7297]:8333\n-[2600:3c00::f03c:91ff:fe84:8a6e]:8333\n+[240b:10:ca20:f0:224:e8ff:fe1f:60d9]:8333\n+[240b:250:1e0:2400:b9ef:8fe3:a69a:7378]:8333\n+[240d:1a:302:8600:8876:a36d:12ee:f285]:8333\n+[2600:3c00::f03c:91ff:fe91:3e49]:8333\n+[2600:3c00::f03c:91ff:febb:981e]:8333\n [2600:3c01::f03c:91ff:fe18:6adf]:8333\n-[2600:3c01::f03c:91ff:fe26:c4b8]:8333\n-[2600:3c01::f03c:91ff:fe3b:1f76]:8333\n-[2600:3c01::f03c:91ff:fe50:5e06]:8333\n-[2600:3c01::f03c:91ff:fe61:289b]:8333\n [2600:3c01::f03c:91ff:fe69:89e9]:8333\n-[2600:3c01::f03c:91ff:fe84:ac15]:8333\n-[2600:3c01::f03c:91ff:fe98:68bb]:8333\n-[2600:3c02::f03c:91ff:fe26:713]:8333\n-[2600:3c02::f03c:91ff:fe26:c49e]:8333\n-[2600:3c02::f03c:91ff:fe84:97d8]:8333\n-[2600:3c02::f03c:91ff:fec8:8feb]:8333\n+[2600:3c01::f03c:91ff:fe91:6a29]:8333\n+[2600:3c01::f03c:91ff:fef1:1eaa]:8333\n [2600:3c03::f03c:91ff:fe18:da80]:8333\n-[2600:3c03::f03c:91ff:fe26:c49b]:8333\n-[2600:3c03::f03c:91ff:fe50:5fa7]:8333\n+[2600:3c03::f03c:91ff:fe28:1445]:8333\n [2600:3c03::f03c:91ff:fe67:d2e]:8333\n-[2600:3c03::f03c:91ff:fe6e:1803]:8333\n-[2600:3c03::f03c:91ff:fec8:4bbe]:8333\n-[2600:3c03::f03c:91ff:fee4:4e16]:8333\n-[2601:18d:8300:58a6::2e4]:8333\n-[2601:240:4600:40c0:250:56ff:fea4:6305]:8333\n-[2601:581:c200:a719:542c:9cd5:4852:f7d9]:8333\n-[2601:647:4900:85f1:ca2a:14ff:fe51:bb35]:8333\n-[2601:c2:c002:b300:54a0:15b5:19f7:530d]:8333\n-[2602:306:ccff:ad7f:b116:52be:64ba:db3a]:8333\n-[2602:ae:1982:9400:846:f78c:fec:4d57]:8333\n+[2600:3c03::f03c:91ff:fe89:116f]:8333\n+[2600:3c03::f03c:91ff:feb0:5fc4]:8333\n+[2600:3c03::f03c:91ff:fee0:233e]:8333\n+[2600:3c03::f03c:91ff:fee0:51]:8333\n+[2600:8805:2400:14e:226:4aff:fe02:2ba4]:8333\n+[2600:8807:5080:3301:1487:83b7:33d7:eb97]:8333\n+[2601:186:c100:6bcd:16bd:cea1:235d:1c19]:8333\n+[2601:18c:4200:28d0:e4d:e9ff:fec5:76d0]:8333\n+[2601:247:8201:6251:30e6:7b95:69bf:9248]:8333\n+[2601:602:9980:f78:211:11ff:fec5:1ae]:8333\n+[2602:ae:1993:de00:2c50:9a44:8f11:77a5]:8333\n+[2602:ff68:0:1:21e:bff:feca:db72]:8333\n+[2602:ff68:0:1:2bd:27ff:feb0:adf8]:8333\n+[2602:ff68:0:1::5]:8333\n+[2602:ff68:0:5:2bd:27ff:feb0:adf8]:8333\n [2602:ffc5:1f::1f:2d61]:8333\n [2602:ffc5:1f::1f:9211]:8333\n-[2602:ffc5::75d5:c1c3]:8333\n+[2602:ffc5::9e63:27a2]:8333\n+[2602:ffc5::c30:1c75]:8333\n [2602:ffc5::ffc5:b844]:8333\n [2602:ffe8:100:2::457:936b]:8333\n-[2602:ffe8:100:2::9d20:2e3c]:8333\n-[2602:ffea:1001:72b::578b]:8333\n-[2602:ffea:a::24c4:d9fd]:8333\n-[2604:0:c1:100:1ec1:deff:fe54:2235]:8333\n-[2604:180:1:1af::42a9]:8333\n-[2604:180:3:702::c9de]:8333\n-[2604:4080:1114:0:3285:a9ff:fe93:850c]:8333\n-[2604:6000:ffc0:3c:64a3:94d0:4f1d:1da8]:8333\n-[2605:6000:f380:9a01:ba09:8aff:fed4:3511]:8333\n-[2605:6001:e00f:7b00:c587:6d91:6eff:eeba]:8333\n-[2605:f700:c0:1::25c3:2a3e]:8333\n-[2606:6000:a441:9903:5054:ff:fe78:66ff]:8333\n-[2607:5300:100:200::1c83]:9334\n-[2607:5300:10::a1]:8333\n-[2607:5300:60:1c2f::1]:8333\n-[2607:5300:60:2b90::1]:8333\n-[2607:5300:60:3320::1]:8333\n-[2607:5300:60:385::1]:8333\n-[2607:5300:60:4a85::]:8333\n-[2607:5300:60:65e4::]:8333\n-[2607:5300:60:6918::]:8333\n-[2607:5300:60:711a:78::a7b5]:8333\n-[2607:5300:60:714::1]:8333\n-[2607:5300:60:870::1]:8333\n-[2607:5300:60:952e:3733::1414]:8333\n-[2607:f1c0:848:1000::48:943c]:8333\n-[2607:f2e0:f:5df::2]:8333\n-[2607:f748:1200:f8:21e:67ff:fe99:8f07]:8333\n-[2607:f948:0:1::7]:8333\n-[2607:ff68:100:36::131]:8333\n-[2803:6900:1::117]:8333\n-[2a00:1098:0:80:1000:25:0:1]:8333\n-[2a00:1178:2:43:5054:ff:fe84:f86f]:8333\n-[2a00:1178:2:43:5054:ff:fee7:2eb6]:8333\n-[2a00:1178:2:43:8983:cc27:d72:d97a]:8333\n-[2a00:1328:e100:cc42:230:48ff:fe92:55c]:8333\n+[2604:180:2:eee::ca46]:8333\n+[2604:880:d:85::be37]:8333\n+[2604:9a00:2100:a009:2::]:8333\n+[2604:a880:2:d0::301:8001]:8333\n+[2604:a880:2:d0::4a9:1001]:8333\n+[2604:a880:2:d0::53a:c001]:8333\n+[2604:a880:400:d0::ad7:e001]:8333\n+[2604:a880:400:d0::dcf:f001]:8333\n+[2605:4d00::50]:8333\n+[2605:6000:edc8:300::ddfe]:8333\n+[2605:6000:ffc0:70:74d5:225c:f553:5bb8]:8333\n+[2606:6000:c148:7003:5054:ff:fe78:66ff]:8333\n+[2606:6000:e6d6:d701:d428:5e44:a2c9:3ff6]:8333\n+[2606:c680:1:4a:2016:d1ff:fe93:52a7]:8333\n+[2607:5300:203:118:3733::1414]:8333\n+[2607:5300:60:13bb::1]:8333\n+[2607:5300:60:1966::1]:8333\n+[2607:5300:60:2218::]:8333\n+[2607:5300:60:3775::]:8333\n+[2607:5300:60:3ddf::]:8333\n+[2607:5300:60:a654::]:8333\n+[2607:5300:60:a7a3::]:8333\n+[2607:5300:60:ac0::1]:8333\n+[2607:5300:60:cf97::]:8333\n+[2607:f0d0:1901:19::6]:8333\n+[2607:f128:40:1202:69:162:139:125]:8333\n+[2607:f128:40:1703::2]:8333\n+[2607:f178:0:8::106]:8333\n+[2607:f1c0:84d:8900::7e:cad]:8333\n+[2607:f948:0:1::1:40]:8333\n+[2607:fcd0:100:2302::6094:635a]:8333\n+[2607:fcd0:100:6a00::3a96:1]:8333\n+[2607:fcd0:100:6a02::7ff0:1]:8333\n+[2607:fcd0:100:8203::8c58:dbc]:8333\n+[2607:fea8:1360:9c2:221a:6ff:fe47:776d]:8333\n+[2607:fea8:4da0:9ce:5114:a8ec:20f5:a50b]:8333\n+[2607:fea8:5df:fda0:feaa:14ff:feda:c79a]:8333\n+[2607:fea8:84c0:163:f42c:baff:fecc:6bbf]:8333\n+[2607:ff10:c5:502:225:90ff:fe32:d446]:8333\n+[2607:ff48:aa81:800::96cf:1]:8333\n+[2620:11c:5001:1118:d267:e5ff:fee9:e673]:8333\n+[2620:b8:4000:1000::93:1]:8333\n+[2800:1a0::9]:8333\n+[2a00:1178:2:43:19fd:d43e:b77:edeb]:8333\n+[2a00:1178:2:43:b4e3:e562:f811:d761]:8333\n [2a00:14f0:e000:80d2:cd1a::1]:8333\n+[2a00:1630:14::101]:8333\n [2a00:1630:2:1802:188:122:91:11]:8333\n-[2a00:18e0:0:1800::1]:8333\n-[2a00:18e0:0:dcc5:109:234:106:191]:8333\n-[2a00:1a28:1157:87::94c7]:8333\n+[2a00:1630:2:500::4]:8333\n+[2a00:1768:2001:24::148:218]:8333\n+[2a00:1768:2001:27::142:21]:8333\n+[2a00:1a48:7810:101:be76:4eff:fe08:c774]:8333\n [2a00:1ca8:37::a5fc:40d1]:8333\n [2a00:1ca8:37::ab6d:ce2c]:8333\n-[2a00:7143:100:0:216:3eff:fe2e:74a3]:8333\n-[2a00:7143:100:0:216:3eff:fed3:5c21]:8333\n-[2a00:7c80:0:45::123]:8333\n+[2a00:1dc0:2255:10::2]:8333\n+[2a00:7c80:0:71::8]:8333\n+[2a00:7c80:0:97::7]:8333\n+[2a00:bbe0:0:42:222:64ff:fe9a:e206]:8333\n+[2a00:c98:2050:a020:3::110]:8333\n+[2a00:dcc0:eda:98:183:193:1d24:b53a]:8333\n [2a00:dcc0:eda:98:183:193:c382:6bdb]:8333\n [2a00:dcc0:eda:98:183:193:f72e:d943]:8333\n-[2a00:f820:17::4af:1]:8333\n-[2a00:f940:2:1:2::101d]:8333\n-[2a00:f940:2:1:2::6ac]:8333\n-[2a01:1b0:7999:402::131]:8333\n-[2a01:238:42dd:f900:7a6c:2bc6:4041:c43]:8333\n-[2a01:238:4313:6300:2189:1c97:696b:5ea]:8333\n-[2a01:488:66:1000:5c33:91f9:0:1]:8333\n-[2a01:488:66:1000:b01c:178d:0:1]:8333\n+[2a00:f90:ff0:c100:53c4:97a7:8b59:796a]:8333\n+[2a01:238:435c:de00:b110:38cf:192d:b2c]:28333\n+[2a01:348:6:7cf::2]:8333\n+[2a01:368:e012:8888:216:3eff:fe24:1162]:8333\n+[2a01:488:66:1000:53a9:22b:0:1]:8333\n+[2a01:488:67:1000:523:ffa7:0:1]:8333\n+[2a01:488:67:1000:b01c:3379:0:1]:8333\n [2a01:4f8:100:34ce::2]:8333\n-[2a01:4f8:100:34e4::2]:8333\n [2a01:4f8:100:44e7::2]:8333\n-[2a01:4f8:100:510e::2]:8333\n-[2a01:4f8:100:5128::2]:8333\n-[2a01:4f8:110:5105::2]:8333\n-[2a01:4f8:110:516c::2]:8333\n+[2a01:4f8:10a:2e4::2]:8333\n+[2a01:4f8:10a:34e::2]:8333\n+[2a01:4f8:10a:51d::2]:8333\n+[2a01:4f8:10a:622::2]:8333\n+[2a01:4f8:10a:85f::2]:8333\n+[2a01:4f8:10a:864::2]:8333\n+[2a01:4f8:10a:d04::2]:8333\n+[2a01:4f8:110:334c::2]:8333\n+[2a01:4f8:110:536e::2]:8333\n [2a01:4f8:120:43e4::2]:8333\n-[2a01:4f8:120:62e6::2]:8333\n [2a01:4f8:120:702e::2]:8333\n-[2a01:4f8:120:8203::2]:8333\n-[2a01:4f8:121:234d::2]:8333\n-[2a01:4f8:121:261::2]:8333\n-[2a01:4f8:130:11ea::2]:8333\n+[2a01:4f8:121:4346::2]:8333\n [2a01:4f8:130:3332::2]:8333\n-[2a01:4f8:130:40ab::2]:8333\n-[2a01:4f8:130:632c::2]:8333\n-[2a01:4f8:130:6366::2]:8333\n-[2a01:4f8:130:934f::2]:8333\n+[2a01:4f8:131:33ad::2]:8333\n [2a01:4f8:131:33ad:fea1::666]:8333\n-[2a01:4f8:140:2195::2]:8333\n-[2a01:4f8:140:6333::2]:8333\n-[2a01:4f8:140:930d::2]:8333\n+[2a01:4f8:140:31b0::2]:8333\n+[2a01:4f8:140:4088::2]:8333\n+[2a01:4f8:140:931a::2]:8333\n [2a01:4f8:140:93b0::2]:8333\n-[2a01:4f8:141:1167::2]:8333\n+[2a01:4f8:141:13ad::c451]:8333\n [2a01:4f8:141:186::2]:8333\n-[2a01:4f8:141:53f0::2]:8333\n-[2a01:4f8:150:336a::2]:8333\n-[2a01:4f8:150:72ee::4202]:8333\n-[2a01:4f8:150:8324::2]:9001\n-[2a01:4f8:151:21ca::2]:8333\n-[2a01:4f8:151:41c2:0:5404:a67e:f250]:8333\n-[2a01:4f8:151:5128::2]:8333\n+[2a01:4f8:141:22ae::2]:8333\n+[2a01:4f8:141:322c::2]:8333\n+[2a01:4f8:150:11d4::2]:8333\n+[2a01:4f8:150:440f::2]:8333\n+[2a01:4f8:150:61ee::2]:8333\n+[2a01:4f8:150:726b::2]:8333\n+[2a01:4f8:151:30c9::2]:15000\n+[2a01:4f8:151:41a2::2]:8333\n+[2a01:4f8:151:41cc::2]:8333\n [2a01:4f8:151:52c6::154]:8333\n-[2a01:4f8:151:6347::2]:9001\n-[2a01:4f8:160:5136::2]:8333\n-[2a01:4f8:160:72c5::2858:e1c5]:8333\n-[2a01:4f8:160:72c5::593b:60d5]:8333\n+[2a01:4f8:151:600b::1:1]:8333\n+[2a01:4f8:151:7175::2]:8333\n+[2a01:4f8:160:41f0::1:33]:8333\n+[2a01:4f8:160:5328::27f0:187a]:8333\n [2a01:4f8:160:814f::2]:8333\n-[2a01:4f8:161:13d0::2]:8333\n-[2a01:4f8:161:228f::2]:8333\n-[2a01:4f8:161:51c4::2]:8333\n-[2a01:4f8:161:60a7::2]:8333\n+[2a01:4f8:161:21ad::333:30]:8333\n [2a01:4f8:161:7026::2]:8333\n-[2a01:4f8:161:9184::2]:8333\n-[2a01:4f8:162:2108::2]:8333\n-[2a01:4f8:162:218c::2]:8333\n-[2a01:4f8:162:4443::2]:8333\n-[2a01:4f8:162:51a3::2]:8333\n+[2a01:4f8:162:4110::2]:8333\n+[2a01:4f8:162:4348::2]:8333\n+[2a01:4f8:171:1c1b::2]:8333\n+[2a01:4f8:171:1c3::2]:8333\n+[2a01:4f8:171:2258::2]:8333\n+[2a01:4f8:171:2a70::2]:8333\n+[2a01:4f8:171:2e1b::2]:8333\n+[2a01:4f8:171:2f28::2]:8333\n+[2a01:4f8:171:3248::2]:8333\n+[2a01:4f8:171:380c::2]:8333\n [2a01:4f8:171:b93::2]:8333\n-[2a01:4f8:190:1483::1]:8333\n-[2a01:4f8:190:4495::2]:8333\n-[2a01:4f8:190:64c9::2]:8333\n+[2a01:4f8:171:d0a::2]:8333\n+[2a01:4f8:172:116c::2]:8333\n+[2a01:4f8:172:1287::2]:8333\n+[2a01:4f8:172:17a9::2]:8333\n+[2a01:4f8:172:1ca7::2]:8333\n+[2a01:4f8:172:2159::2]:8333\n+[2a01:4f8:172:3a41::2]:8333\n+[2a01:4f8:172:3b42::2]:8333\n+[2a01:4f8:172:3ec1::2]:8333\n+[2a01:4f8:172:3ec2::2]:8333\n+[2a01:4f8:172:aeb::2]:8333\n+[2a01:4f8:172:aec::2]:8333\n+[2a01:4f8:173:10ab::2]:8333\n+[2a01:4f8:173:1551::2]:8333\n+[2a01:4f8:173:1bca::2]:8333\n+[2a01:4f8:173:1e2e::2]:8333\n+[2a01:4f8:173:2162::2]:8333\n+[2a01:4f8:173:21e6::2]:8333\n+[2a01:4f8:173:42::2]:8333\n+[2a01:4f8:173:cc1::2]:8333\n+[2a01:4f8:190:1253::2]:8333\n+[2a01:4f8:190:24eb::2]:8333\n+[2a01:4f8:190:34f0::2]:8333\n+[2a01:4f8:190:528d::2]:8333\n [2a01:4f8:190:91ce::2]:8333\n [2a01:4f8:191:2194::83]:8333\n [2a01:4f8:191:40e8::2]:8333\n-[2a01:4f8:191:44b4::2]:8333\n-[2a01:4f8:191:8242::2]:8333\n-[2a01:4f8:191:83a2::2]:8333\n-[2a01:4f8:192:11b2::2]:8333\n+[2a01:4f8:191:8165::2]:22556\n+[2a01:4f8:191:81b7::2]:8333\n+[2a01:4f8:191:8328::3]:8333\n+[2a01:4f8:192:11b2::2]:8343\n [2a01:4f8:192:216c::2]:8333\n-[2a01:4f8:192:22b3::2]:8333\n+[2a01:4f8:192:22af::2]:8333\n+[2a01:4f8:192:2422::2]:8333\n+[2a01:4f8:192:34d0::2]:8333\n [2a01:4f8:192:440b::2]:8333\n+[2a01:4f8:192:5230::2]:8333\n [2a01:4f8:192:db::2]:8333\n [2a01:4f8:200:1012::2]:8333\n-[2a01:4f8:200:23d1::dead:beef]:8333\n-[2a01:4f8:200:506d::2]:8333\n-[2a01:4f8:200:51f0::2]:8333\n-[2a01:4f8:200:5389::2]:8333\n-[2a01:4f8:200:53e3::2]:8333\n-[2a01:4f8:200:6344::2]:8333\n-[2a01:4f8:200:6396::2]:8333\n-[2a01:4f8:200:63af::119]:8333\n-[2a01:4f8:200:71e3:78b4:f3ff:fead:e8cf]:8333\n-[2a01:4f8:201:214c::2]:8333\n-[2a01:4f8:201:233:1::3]:8333\n-[2a01:4f8:201:3e3::2]:8333\n+[2a01:4f8:200:414e::2]:8333\n+[2a01:4f8:200:416a::2]:8333\n+[2a01:4f8:201:21a7::2]:8333\n+[2a01:4f8:201:4017::11]:8333\n [2a01:4f8:201:6011::4]:8333\n [2a01:4f8:201:60d5::2]:8333\n-[2a01:4f8:202:265::2]:8333\n-[2a01:4f8:202:3115::2]:8333\n+[2a01:4f8:202:12d6::2]:8333\n [2a01:4f8:202:31e3::2]:8333\n-[2a01:4f8:202:31ef::2]:8333\n-[2a01:4f8:202:3392::2]:8333\n+[2a01:4f8:202:32c6::2]:8333\n [2a01:4f8:202:53c3::2]:8333\n-[2a01:4f8:202:63f4::2]:8333\n-[2a01:4f8:202:7227::2]:8333\n-[2a01:4f8:210:2227::2]:8333\n-[2a01:4f8:210:24aa::2]:8333\n [2a01:4f8:211:14cf::2]:8333\n-[2a01:4f8:211:181b::2]:8333\n-[2a01:4f8:212:289e::2]:8333\n-[2a01:4f8:212:33db::2]:18333\n-[2a01:4f8:a0:112f::2]:8333\n-[2a01:4f8:a0:3174::2]:8333\n-[2a01:4f8:a0:328c::2]:8333\n-[2a01:4f8:a0:5243::2]:8333\n-[2a01:4f8:c17:19b9::2]:8333\n-[2a01:4f8:c17:1a41::2]:8333\n-[2a01:4f8:c17:1a92::2]:8333\n-[2a01:4f8:c17:273::2]:8333\n-[2a01:4f8:c17:435::2]:8333\n-[2a01:4f8:c17:755::2]:8333\n-[2a01:4f8:c17:b54::2]:8333\n-[2a01:4f8:d16:9384::2]:8333\n+[2a01:4f8:211:1ec5::2]:8333\n+[2a01:4f8:211:483::2]:8333\n+[2a01:4f8:211:d99::8]:8333\n+[2a01:4f8:212:1826::2]:8333\n+[2a01:4f8:212:27a8::2]:8333\n+[2a01:4f8:221:801::2]:8333\n+[2a01:4f8:a0:12cc::2]:8333\n+[2a01:4f8:a0:746a:101:1:1:2]:8333\n+[2a01:4f8:a0:828a::2]:8333\n+[2a01:4f8:c17:2eef::2]:8333\n+[2a01:4f8:c17:2f3c::2]:3333\n+[2a01:4f8:c17:3b02::2]:8333\n+[2a01:4f8:c17:4245::2]:8333\n+[2a01:4f8:c17:464f::2]:8333\n+[2a01:4f8:c17:4a1c::2]:8333\n+[2a01:4f8:c17:4c5d::2]:8333\n+[2a01:4f8:c17:67f8::2]:8333\n+[2a01:4f8:c17:6dd0::2]:8333\n+[2a01:4f8:c17:710b::2]:8333\n+[2a01:4f8:c17:714::2]:8333\n+[2a01:4f8:c17:72c6::2]:8333\n [2a01:608:ffff:a009:8bf5:879d:e51a:f837]:8333\n-[2a01:680:10:10:f2de:f1ff:fec9:dc0]:8333\n-[2a01:7c8:aaac:1f6:5054:ff:fe30:e585]:8333\n-[2a01:7c8:aaac:20b:5054:ff:fe24:435e]:8333\n+[2a01:680:10:10::1]:8333\n+[2a01:6f0:ffff:120::8dcb]:8333\n+[2a01:79c:cebc:857c:98c1:88ff:fef5:90de]:8333\n+[2a01:79d:7377:2629:7e57:7e57:1:1]:8333\n [2a01:7c8:aaac:43d:5054:ff:fe4e:3dd4]:8333\n-[2a01:7c8:aaad:256::1]:8333\n-[2a01:7c8:aab6:ea:5054:ff:feff:eac3]:8333\n-[2a01:7c8:aab9:5a:5054:ff:fe89:7b26]:8333\n-[2a01:7c8:aabc:2c8:5054:ff:fe35:6581]:8333\n-[2a01:7e00::f03c:91ff:fe18:301e]:8333\n-[2a01:7e00::f03c:91ff:fe18:3942]:8333\n+[2a01:7c8:aab5:3e6:5054:ff:fed7:4e54]:8333\n+[2a01:7c8:aabd:3d5:5054:ff:fe95:f586]:8333\n+[2a01:7c8:aac1:453:d0d2:af96:fa88:5d0e]:8333\n+[2a01:7c8:aac3:663:5054:ff:fe25:8c69]:8333\n+[2a01:7c8:aac3:97:5054:ff:fea7:3780]:8333\n+[2a01:7c8:aac4:567:5054:ff:fedc:518a]:8333\n [2a01:7e00::f03c:91ff:fe26:8c87]:8333\n-[2a01:7e00::f03c:91ff:fe50:6206]:8333\n-[2a01:7e00::f03c:91ff:fe67:559d]:8333\n-[2a01:7e00::f03c:91ff:fe84:434f]:8333\n+[2a01:7e00::f03c:91ff:fe50:94b8]:8333\n+[2a01:7e00::f03c:91ff:fe55:2c]:8333\n [2a01:7e00::f03c:91ff:fe89:1143]:8333\n-[2a01:7e00::f03c:91ff:fe98:2505]:8333\n-[2a01:7e00::f03c:91ff:fedb:352e]:8333\n-[2a01:7e01::f03c:91ff:fec8:d7b5]:8333\n-[2a01:e34:ee33:1640:c504:f677:b28a:ba42]:8333\n-[2a01:e35:2e7e:bc0:e079:f55e:cef3:b5d7]:8333\n+[2a01:7e00::f03c:91ff:fe89:53fd]:8333\n+[2a01:7e00::f03c:91ff:fedf:b70f]:8333\n+[2a01:b000::4166:515b:ef9e:b3]:8333\n+[2a01:b2e0:2::40]:8333\n+[2a01:e34:ec29:24c0:f3:ddaf:9f59:586f]:8333\n+[2a01:e34:eed7:6670:ec1b:bf7c:b012:6069]:8333\n [2a01:e35:2ee5:610:21f:d0ff:fe4e:7460]:8333\n [2a01:e35:8a3f:47c0:c617:feff:fe3c:9fbd]:8333\n-[2a01:e35:8aca:6a0:211:aff:fe5e:295e]:8333\n-[2a02:180:a:18:81:7:11:50]:8333\n-[2a02:1810:1d87:6a00:5604:a6ff:fe60:d87d]:8333\n-[2a02:2168:1144:5c01:d63d:7eff:fedd:4f8e]:8333\n-[2a02:2498:6d7b:7001:b508:b39d:2cea:5b7a]:8333\n-[2a02:2528:503:2::15]:8333\n-[2a02:2528:fa:1a56:216:44ff:fe6a:d112]:8333\n-[2a02:27f8:2012:0:e9f7:268f:c441:6129]:8333\n+[2a01:e35:8bff:70b0:1e1b:dff:fe0b:236d]:8333\n+[2a02:1205:34c3:a4e0:d63d:7eff:fe98:10c8]:8333\n+[2a02:1205:34da:aa00:5882:249d:ddbf:bc43]:8333\n+[2a02:1205:5051:a640:d6ae:52ff:fea3:ac]:8333\n+[2a02:1205:c689:d980:baae:edff:feea:9445]:8333\n+[2a02:120b:2c2a:5ec0:10dd:31ff:fe42:5079]:8333\n+[2a02:120b:2c35:69d0:219:99ff:fe6b:4ec3]:8333\n+[2a02:120b:c3c2:ff60:21f:5bff:fec3:a7ad]:24312\n+[2a02:13b8:4000:1000:216:e6ff:fe92:8619]:8333\n+[2a02:13b8:4000:1000::27]:8333\n+[2a02:17d0:2a:4400:40f:3dd4:b053:47ad]:8333\n+[2a02:180:1:1::517:afb]:8333\n+[2a02:180:6:1::18]:8333\n+[2a02:1810:1d11:f900:6872:f28e:8126:f635]:8333\n+[2a02:27a8:0:1:52e5:49ff:fee3:3b49]:8333\n [2a02:348:86:3011::1]:8333\n-[2a02:4780:1:1::1:8a01]:8333\n-[2a02:578:5002:116::2]:8333\n+[2a02:390:9000:0:218:7dff:fe10:be33]:8333\n+[2a02:582:78c1:7600:2d49:6212:29d3:abb]:8333\n [2a02:6080::1:190b:69e3]:8333\n-[2a02:6080::1:e893:d9d6]:8333\n-[2a02:770:4000::139]:8333\n+[2a02:750:7:3305::575]:8333\n+[2a02:752:100:3::53]:8333\n+[2a02:7aa0:1201::7501:d950]:8333\n [2a02:7aa0:1201::deb3:81a2]:8333\n-[2a02:8010:b001::5860:59b5]:8333\n-[2a02:810d:21c0:f00:a248:1cff:feb8:5348]:8333\n-[2a02:a50::21b:24ff:fe93:4e39]:8333\n-[2a02:a80:0:1200::2]:8333\n-[2a02:c200:0:10:2:1:5830:1]:8333\n-[2a02:c200:0:10:2:5:4692:1]:8333\n-[2a02:c200:0:10:3:0:7158:1]:8333\n-[2a02:c200:0:10::2244:1]:8333\n-[2a02:c200:1:10:2:3:3339:1]:8333\n-[2a02:c200:1:10:2:3:7844:1]:8333\n-[2a02:c200:1:10:2:5:6288:1]:8333\n-[2a02:c200:1:10:3:0:5912:1]:8333\n+[2a02:7aa0:1619::a037:69a6]:8333\n+[2a02:810d:14c0:8694:d250:99ff:fe81:23d9]:8333\n+[2a02:a50::dacb:8aff:fe36:8d2d]:8333\n+[2a02:c200:0:10:3:0:2591:1]:8333\n+[2a02:c200:1:10:2:5:9982:1]:8333\n+[2a02:c200:1:10:3:0:9290:1]:8333\n+[2a02:c205:3000:7158::1]:8333\n+[2a02:c205:3001:4522::1]:8333\n+[2a02:c205:3001:6549::1]:8333\n+[2a02:c207:2008:3772::1]:8333\n+[2a02:c207:2008:6519::1]:8333\n+[2a02:c207:2009:213::1]:8333\n+[2a02:c207:2009:7858::1]:8333\n+[2a02:c207:2010:302::1]:8333\n+[2a02:c207:3001:5824::1]:8333\n+[2a02:ce80:0:20::1]:8333\n [2a03:4000:2:496::8]:8333\n+[2a03:4000:6:416c::53]:8333\n [2a03:4000:6:8009::1]:8333\n-[2a03:4000:6:8063::bcd0]:8333\n-[2a03:4900:fffc:b::2]:8333\n-[2a03:b0c0:1:d0::d:5001]:8333\n+[2a03:4000:9:8e::1]:8333\n+[2a03:7380:2140:17:51fe:3519:b571:4a13]:8333\n+[2a03:b0c0:0:1010::7a3:1001]:8333\n+[2a03:b0c0:0:1010::7aa:4001]:8333\n+[2a03:b0c0:3:d0::1b99:c001]:8333\n+[2a03:b0c0:3:d0::1b99:e001]:8333\n+[2a03:b0c0:3:d0::1b9a:3001]:8333\n+[2a03:b0c0:3:d0::2208:6001]:8333\n+[2a03:b0c0:3:d0::23f7:1001]:8333\n+[2a03:b0c0:3:d0::23f7:9001]:8333\n+[2a03:b0c0:3:d0::23fb:2001]:8333\n+[2a03:b0c0:3:d0::23fb:3001]:8333\n+[2a03:b0c0:3:d0::23fb:5001]:8333\n+[2a03:b0c0:3:d0::23fb:7001]:8333\n+[2a03:b0c0:3:d0::2400:1]:8333\n+[2a03:b0c0:3:d0::2400:3001]:8333\n+[2a03:b0c0:3:d0::2400:e001]:8333\n+[2a03:b0c0:3:d0::2401:e001]:8333\n+[2a03:b0c0:3:d0::2402:2001]:8333\n+[2a03:b0c0:3:d0::2402:8001]:8333\n+[2a03:b0c0:3:d0::2402:9001]:8333\n+[2a03:b0c0:3:d0::2402:b001]:8333\n+[2a03:b0c0:3:d0::2402:d001]:8333\n+[2a03:b0c0:3:d0::2403:1001]:8333\n+[2a03:b0c0:3:d0::2403:2001]:8333\n+[2a03:b0c0:3:d0::2403:4001]:8333\n+[2a03:b0c0:3:d0::2403:6001]:8333\n+[2a03:b0c0:3:d0::2403:a001]:8333\n+[2a03:b0c0:3:d0::2403:b001]:8333\n+[2a03:b0c0:3:d0::2403:f001]:8333\n+[2a03:b0c0:3:d0::2404:6001]:8333\n+[2a03:b0c0:3:d0::2404:b001]:8333\n [2a03:f80:ed15:149:154:155:235:1]:8333\n-[2a03:f80:ed15:149:154:155:241:1]:8333\n-[2a03:f80:ed16:ca7:ea75:b12d:2af:9e2a]:8333\n-[2a04:1980:3100:1aab:290:faff:fe70:a3d8]:8333\n-[2a04:1980:3100:1aab:e61d:2dff:fe29:f590]:8333\n-[2a04:2f80:6:200::89]:8333\n-[2a04:ac00:1:4a0b:5054:ff:fe00:5af5]:8333\n-[2a04:ad80:0:68::35da]:8333\n-3ffk7iumtx3cegbi.onion:8333\n+[2a04:1980:3100:1aac:e61d:2dff:fe29:f241]:8333\n+[2a04:1980:3100:1aac:e61d:2dff:fe29:f251]:8333\n+[2a04:2180:0:1::5a49:3c06]:8333\n+[2a04:2180:1:7::3]:8333\n+[2a04:2e00:5:2e:9a4b:e1ff:fe62:6dc0]:8333\n+[2a04:3542:1000:910:8492:b8ff:fe91:711d]:8333\n+[2a04:dbc3:fffe:0:e61f:13ff:fe95:8401]:8333\n+[2a06:9fc0:2a06:9fc0:2a06:9fc1:67c:e706]:8333\n+[2c0f:f738:2004:82::]:8333\n+2hryb3uh3tzwgnya.onion:8333\n 3nmbbakinewlgdln.onion:8333\n-4j77gihpokxu2kj4.onion:8333\n-546esc6botbjfbxb.onion:8333\n-5at7sq5nm76xijkd.onion:8333\n-77mx2jsxaoyesz2p.onion:8333\n-7g7j54btiaxhtsiy.onion:8333\n-a6obdgzn67l7exu3.onion:8333\n-ab64h7olpl7qpxci.onion:8333\n-am2a4rahltfuxz6l.onion:8333\n-azuxls4ihrr2mep7.onion:8333\n-bitcoin7bi4op7wb.onion:8333\n-bitcoinostk4e4re.onion:8333\n+3qeri3tmhzmpegyv.onion:8333\n+4wdknmecghcmclq5.onion:8333\n+53tsjt6zq3iasv5q.onion:8333\n+5cg7qeywvwo6vxpt.onion:8333\n+5gbcrgqxcbxj253s.onion:8333\n+6cn4ilbwkrkh7gwo.onion:8333\n+6e4jrnn7igeqxmlf.onion:8333\n+6ymgbvnn6d5nfmv4.onion:8333\n+6zsh3bfduhpo7ldl.onion:8333\n+72fq6phv4fg4rhvh.onion:8333\n+7gdqp6npusk4lfwk.onion:8333\n+a7emxol55e623lqc.onion:8333\n+assbiydziq77zaki.onion:8333\n+bafk5ioatlgt7dgl.onion:8333\n bk7yp6epnmcllq72.onion:8333\n-bmutjfrj5btseddb.onion:8333\n-ceeji4qpfs3ms3zc.onion:8333\n-clexmzqio7yhdao4.onion:8333\n+brwqezn6le54w2bb.onion:8333\n+bs4bq6s6qkvt5hpi.onion:8333\n+bup5n5e3kurvjzf3.onion:8333\n+c2tpqkaz4ihjzwgb.onion:8333\n+cernrmrk5zomzozn.onion:8333\n+cfyegj64ht3jpodr.onion:8333\n+cg5vg54cazzpvoug.onion:8333\n+cgk4u2lxrvml4jvb.onion:8333\n+cjygd7pu5lqkky5j.onion:8333\n+d6wubsdtr46dd5ki.onion:8333\n+dfq6yjc3aelplwr4.onion:8333\n+dqpxwlpnv3z3hznl.onion:8333\n+eamfospuveabaimd.onion:8333\n+ep2mjzox3kvb6ax4.onion:8333\n+fpbxb4wjudiw2w5a.onion:8333\n+fu5hfsbbf5jwsvhv.onion:8333\n+g4freoibsczujle3.onion:8333\n gb5ypqt63du3wfhn.onion:8333\n-h2vlpudzphzqxutd.onion:8333\n-n42h7r6oumcfsbrs.onion:4176\n-ncwk3lutemffcpc4.onion:8333\n+ggdy2pb2avlbtjwq.onion:8333\n+gh2aiddzxmvyrnue.onion:8333\n+gnxgylbgzvaazkq7.onion:8333\n+hnizdxnejel64ubk.onion:8333\n+htvdcmlc3abji2ab.onion:8443\n+hwuboois4gslupgx.onion:8333\n+hxz6gowludlj6d5a.onion:8333\n+j6umo4bnsztpsonc.onion:8333\n+jdunmaocwbbnw565.onion:8333\n+ktv3qlxl7xvmdlf4.onion:8333\n+kvd44sw7skb5folw.onion:8333\n+kwimnzm6vd4zakvl.onion:8333\n+la5xhk3lprxzxmz2.onion:8333\n+lc7cx67end26uutp.onion:8352\n+mwu5og2agcspmgkx.onion:8333\n+mzxkipiyekaoh7my.onion:8333\n+n6rwlrtwpqc7qwo7.onion:8333\n+nj36424yccqph62z.onion:8333\n+o256w7t3vcgktmxk.onion:8333\n+o4sl5na6jeqgi3l6.onion:8333\n okdzjarwekbshnof.onion:8333\n-pjghcivzkoersesd.onion:8333\n-rw7ocjltix26mefn.onion:8333\n-uws7itep7o3yinxo.onion:8333\n-vk3qjdehyy4dwcxw.onion:8333\n+oyebydl2pacx6v26.onion:8333\n+p5mx2imj75dpmime.onion:8333\n+psco6bxjewljrczx.onion:8333\n+pxtgswet6tlgrbwj.onion:8333\n+rb4v3fhgx2zr4rre.onion:8333\n+rjlnp3hwvrsmap6e.onion:8333\n+rlafimkctvz63llg.onion:8333\n+rxjvy5eyttep5tts.onion:8333\n+seoskudzk6vn6mqz.onion:8333\n+tpgdufxxsw3jkrdf.onion:8333\n+tuiyvqgi3o675pjb.onion:8333\n+tx4zd7d5exonnblh.onion:8333\n+uokg6avfgbhofls3.onion:8333\n+v3gjphgqy5hygcml.onion:8333\n+vhdoxqq63xr53ol7.onion:8333\n+visevrizz3quyagj.onion:8333\n vqpye2k5rcqvj5mq.onion:8333\n-wpi7rpvhnndl52ee.onion:8333\n+wfsx2gi7djhy22hk.onion:8333\n+wg6vwmbrzyyzapun.onion:8333\n+xub4w3w4wwk56xiq.onion:8333\n+ycivnom44dmxx4ob.onion:8333\n+ywskufc62bf2fum4.onion:8333\n+z4fax2vxg23t2ddf.onion:8333\n+zo5dklwelmdrpo5n.onion:8333"
      },
      {
        "sha": "396a411689a814025e1f9cfe6be15a4238e3ce9a",
        "filename": "src/chainparamsseeds.h",
        "status": "modified",
        "additions": 1031,
        "deletions": 800,
        "changes": 1831,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81/src/chainparamsseeds.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81/src/chainparamsseeds.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsseeds.h?ref=d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81"
      }
    ]
  },
  {
    "sha": "a432aa0aa83310f0eb053329fb4b2670ce92b1c6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNDMyYWEwYWE4MzMxMGYwZWIwNTMzMjlmYjRiMjY3MGNlOTJiMWM2",
    "commit": {
      "author": {
        "name": "Takashi Mitsuta",
        "email": "knhn1117@gmail.com",
        "date": "2017-02-12T07:44:43Z"
      },
      "committer": {
        "name": "Takashi Mitsuta",
        "email": "knhn1117@gmail.com",
        "date": "2017-02-12T07:44:43Z"
      },
      "message": "Remove unused module from rpc-tests",
      "tree": {
        "sha": "83137ddbaa52dc7066f1911015b2b6a199efff8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/83137ddbaa52dc7066f1911015b2b6a199efff8f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a432aa0aa83310f0eb053329fb4b2670ce92b1c6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a432aa0aa83310f0eb053329fb4b2670ce92b1c6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a432aa0aa83310f0eb053329fb4b2670ce92b1c6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a432aa0aa83310f0eb053329fb4b2670ce92b1c6/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 1,
      "deletions": 14
    },
    "files": [
      {
        "sha": "e03bc1c37b6dcab4c9fee75032b4ef3385c5370d",
        "filename": "qa/rpc-tests/bip68-112-113-p2p.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a432aa0aa83310f0eb053329fb4b2670ce92b1c6/qa/rpc-tests/bip68-112-113-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a432aa0aa83310f0eb053329fb4b2670ce92b1c6/qa/rpc-tests/bip68-112-113-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip68-112-113-p2p.py?ref=a432aa0aa83310f0eb053329fb4b2670ce92b1c6",
        "patch": "@@ -5,7 +5,7 @@\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.util import *\n-from test_framework.mininode import ToHex, CTransaction, NetworkThread\n+from test_framework.mininode import ToHex, NetworkThread\n from test_framework.blocktools import create_coinbase, create_block\n from test_framework.comptool import TestInstance, TestManager\n from test_framework.script import *"
      },
      {
        "sha": "1b099f933967524d9826229e270e78fa13b9188c",
        "filename": "qa/rpc-tests/bip68-sequence.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a432aa0aa83310f0eb053329fb4b2670ce92b1c6/qa/rpc-tests/bip68-sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a432aa0aa83310f0eb053329fb4b2670ce92b1c6/qa/rpc-tests/bip68-sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip68-sequence.py?ref=a432aa0aa83310f0eb053329fb4b2670ce92b1c6",
        "patch": "@@ -9,8 +9,6 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-from test_framework.script import *\n-from test_framework.mininode import *\n from test_framework.blocktools import *\n \n SEQUENCE_LOCKTIME_DISABLE_FLAG = (1<<31)"
      },
      {
        "sha": "e02cb4c300b039ac25a25365edf66ceb750229b3",
        "filename": "qa/rpc-tests/bumpfee.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a432aa0aa83310f0eb053329fb4b2670ce92b1c6/qa/rpc-tests/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a432aa0aa83310f0eb053329fb4b2670ce92b1c6/qa/rpc-tests/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bumpfee.py?ref=a432aa0aa83310f0eb053329fb4b2670ce92b1c6",
        "patch": "@@ -8,10 +8,8 @@\n from test_framework import blocktools\n from test_framework.mininode import CTransaction\n from test_framework.util import *\n-from test_framework.util import *\n \n import io\n-import time\n \n # Sequence number that is BIP 125 opt-in and BIP 68-compliant\n BIP125_SEQUENCE_NUMBER = 0xfffffffd"
      },
      {
        "sha": "47dfe4f5fd18ee12a248c26615f53d97fc68993d",
        "filename": "qa/rpc-tests/p2p-compactblocks.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a432aa0aa83310f0eb053329fb4b2670ce92b1c6/qa/rpc-tests/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a432aa0aa83310f0eb053329fb4b2670ce92b1c6/qa/rpc-tests/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-compactblocks.py?ref=a432aa0aa83310f0eb053329fb4b2670ce92b1c6",
        "patch": "@@ -7,7 +7,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment\n-from test_framework.siphash import siphash256\n from test_framework.script import CScript, OP_TRUE\n \n '''"
      },
      {
        "sha": "f9a40955c06c2b4411d34d23d001f58f703e5b76",
        "filename": "qa/rpc-tests/rpcnamedargs.py",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a432aa0aa83310f0eb053329fb4b2670ce92b1c6/qa/rpc-tests/rpcnamedargs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a432aa0aa83310f0eb053329fb4b2670ce92b1c6/qa/rpc-tests/rpcnamedargs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rpcnamedargs.py?ref=a432aa0aa83310f0eb053329fb4b2670ce92b1c6",
        "patch": "@@ -3,17 +3,11 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-from decimal import Decimal\n-\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.authproxy import JSONRPCException\n from test_framework.util import (\n     assert_equal,\n     assert_raises_jsonrpc,\n-    assert_is_hex_string,\n-    assert_is_hash_string,\n     start_nodes,\n-    connect_nodes_bi,\n )\n \n "
      },
      {
        "sha": "45a9db05717372008c2c07fa62be66d9a39f0491",
        "filename": "qa/rpc-tests/wallet-accounts.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a432aa0aa83310f0eb053329fb4b2670ce92b1c6/qa/rpc-tests/wallet-accounts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a432aa0aa83310f0eb053329fb4b2670ce92b1c6/qa/rpc-tests/wallet-accounts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet-accounts.py?ref=a432aa0aa83310f0eb053329fb4b2670ce92b1c6",
        "patch": "@@ -6,9 +6,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     start_nodes,\n-    start_node,\n     assert_equal,\n-    connect_nodes_bi,\n )\n \n "
      }
    ]
  },
  {
    "sha": "0b4f273e9cf7166dbd103e116b5d991e359e673d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYjRmMjczZTljZjcxNjZkYmQxMDNlMTE2YjVkOTkxZTM1OWU2NzNk",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-02-13T22:49:10Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-02-13T22:50:16Z"
      },
      "message": "Bugfix: Qt/Options: Restore persistent \"restart required\" notice",
      "tree": {
        "sha": "cf8c3c194e4c705cdcd668177f92ddc25ce9955f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf8c3c194e4c705cdcd668177f92ddc25ce9955f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0b4f273e9cf7166dbd103e116b5d991e359e673d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b4f273e9cf7166dbd103e116b5d991e359e673d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0b4f273e9cf7166dbd103e116b5d991e359e673d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b4f273e9cf7166dbd103e116b5d991e359e673d/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3cd836c1d855b92e7c73ab31979f471c4f8dad68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cd836c1d855b92e7c73ab31979f471c4f8dad68",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3cd836c1d855b92e7c73ab31979f471c4f8dad68"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6d65f4c11621be9d04fe3f008865235f43379ec6",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b4f273e9cf7166dbd103e116b5d991e359e673d/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b4f273e9cf7166dbd103e116b5d991e359e673d/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=0b4f273e9cf7166dbd103e116b5d991e359e673d",
        "patch": "@@ -258,6 +258,9 @@ void OptionsDialog::showRestartWarning(bool fPersistent)\n void OptionsDialog::clearStatusLabel()\n {\n     ui->statusLabel->clear();\n+    if (model && model->isRestartRequired()) {\n+        showRestartWarning(true);\n+    }\n }\n \n void OptionsDialog::updateProxyValidationState()\n@@ -267,7 +270,7 @@ void OptionsDialog::updateProxyValidationState()\n     if (pUiProxyIp->isValid() && (!ui->proxyPort->isEnabled() || ui->proxyPort->text().toInt() > 0) && (!ui->proxyPortTor->isEnabled() || ui->proxyPortTor->text().toInt() > 0))\n     {\n         setOkButtonState(otherProxyWidget->isValid()); //only enable ok button if both proxys are valid\n-        ui->statusLabel->clear();\n+        clearStatusLabel();\n     }\n     else\n     {"
      }
    ]
  },
  {
    "sha": "9acf25cc013c013ee5b07dba7b1319b7c5a7b6a4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YWNmMjVjYzAxM2MwMTNlZTViMDdkYmE3YjEzMTliN2M1YTdiNmE0",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-13T22:54:51Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-13T22:54:51Z"
      },
      "message": "Return error when importmulti called with invalid address.\n\nLack of error checking noticed by Alex Morcos <morcos@chaincode.com>",
      "tree": {
        "sha": "4565391074de7304a344e97c1418ada6ff11fc38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4565391074de7304a344e97c1418ada6ff11fc38"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9acf25cc013c013ee5b07dba7b1319b7c5a7b6a4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9acf25cc013c013ee5b07dba7b1319b7c5a7b6a4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9acf25cc013c013ee5b07dba7b1319b7c5a7b6a4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9acf25cc013c013ee5b07dba7b1319b7c5a7b6a4/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 13,
      "deletions": 0
    },
    "files": [
      {
        "sha": "43964610e5b3e97f20524dc76a7c11a829c18a0c",
        "filename": "qa/rpc-tests/importmulti.py",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9acf25cc013c013ee5b07dba7b1319b7c5a7b6a4/qa/rpc-tests/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9acf25cc013c013ee5b07dba7b1319b7c5a7b6a4/qa/rpc-tests/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/importmulti.py?ref=9acf25cc013c013ee5b07dba7b1319b7c5a7b6a4",
        "patch": "@@ -59,6 +59,16 @@ def run_test (self):\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n \n+        print(\"Should not import an invalid address\")\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": \"not valid address\",\n+            },\n+            \"timestamp\": \"now\",\n+        }])\n+        assert_equal(result[0]['success'], False)\n+        assert_equal(result[0]['error']['code'], -5)\n+        assert_equal(result[0]['error']['message'], 'Invalid address')\n \n         # ScriptPubKey + internal\n         print(\"Should import a scriptPubKey with internal flag\")"
      },
      {
        "sha": "738643eb0170baa395006b069ec4440ea3e3ae42",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9acf25cc013c013ee5b07dba7b1319b7c5a7b6a4/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9acf25cc013c013ee5b07dba7b1319b7c5a7b6a4/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=9acf25cc013c013ee5b07dba7b1319b7c5a7b6a4",
        "patch": "@@ -671,6 +671,9 @@ UniValue processImport(const UniValue& data) {\n \n         if (!isScript) {\n             address = CBitcoinAddress(output);\n+            if (!address.IsValid()) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n+            }\n             script = GetScriptForDestination(address.Get());\n         } else {\n             if (!IsHex(output)) {"
      }
    ]
  },
  {
    "sha": "c45b9fb54c5ca068a5e276c3bd6ebf4ae720f6f7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNDViOWZiNTRjNWNhMDY4YTVlMjc2YzNiZDZlYmY0YWU3MjBmNmY3",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-07T17:02:02Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-13T23:55:34Z"
      },
      "message": "net: correctly ban before the handshake is complete\n\n7a8c251901 made a change to avoid getting into SendMessages() until the\nversion handshake (VERSION + VERACK) is complete. That was done to avoid\nleaking out messages to nodes who could connect, but never bothered sending\nus their version/verack.\n\nUnfortunately, the ban tally and possible disconnect are done as part of\nSendMessages(). So after 7a8c251901, if a peer managed to do something\nbannable before completing the handshake (say send 100 non-version messages\nbefore their version), they wouldn't actually end up getting\ndisconnected/banned. That's fixed here by checking the banscore as part of\nProcessMessages() in addition to SendMessages().",
      "tree": {
        "sha": "0bdc565d53b939f0f227b108406c82f034cb5e61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0bdc565d53b939f0f227b108406c82f034cb5e61"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c45b9fb54c5ca068a5e276c3bd6ebf4ae720f6f7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c45b9fb54c5ca068a5e276c3bd6ebf4ae720f6f7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c45b9fb54c5ca068a5e276c3bd6ebf4ae720f6f7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c45b9fb54c5ca068a5e276c3bd6ebf4ae720f6f7/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d304fef3746039183f51b3ac8f4774dcf3a64f59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d304fef3746039183f51b3ac8f4774dcf3a64f59",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d304fef3746039183f51b3ac8f4774dcf3a64f59"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 37,
      "deletions": 23
    },
    "files": [
      {
        "sha": "587e857970c482d91b89c5749bcc61f4816ed695",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 23,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c45b9fb54c5ca068a5e276c3bd6ebf4ae720f6f7/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c45b9fb54c5ca068a5e276c3bd6ebf4ae720f6f7/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=c45b9fb54c5ca068a5e276c3bd6ebf4ae720f6f7",
        "patch": "@@ -2596,6 +2596,36 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n     return true;\n }\n \n+static bool SendRejectsAndCheckIfBanned(CNode* pnode, CConnman& connman)\n+{\n+    AssertLockHeld(cs_main);\n+    CNodeState &state = *State(pnode->GetId());\n+\n+    BOOST_FOREACH(const CBlockReject& reject, state.rejects) {\n+        connman.PushMessage(pnode, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, (std::string)NetMsgType::BLOCK, reject.chRejectCode, reject.strRejectReason, reject.hashBlock));\n+    }\n+    state.rejects.clear();\n+\n+    if (state.fShouldBan) {\n+        state.fShouldBan = false;\n+        if (pnode->fWhitelisted)\n+            LogPrintf(\"Warning: not punishing whitelisted peer %s!\\n\", pnode->addr.ToString());\n+        else if (pnode->fAddnode)\n+            LogPrintf(\"Warning: not punishing addnoded peer %s!\\n\", pnode->addr.ToString());\n+        else {\n+            pnode->fDisconnect = true;\n+            if (pnode->addr.IsLocal())\n+                LogPrintf(\"Warning: not banning local peer %s!\\n\", pnode->addr.ToString());\n+            else\n+            {\n+                connman.Ban(pnode->addr, BanReasonNodeMisbehaving);\n+            }\n+        }\n+        return true;\n+    }\n+    return false;\n+}\n+\n bool ProcessMessages(CNode* pfrom, CConnman& connman, const std::atomic<bool>& interruptMsgProc)\n {\n     const CChainParams& chainparams = Params();\n@@ -2706,8 +2736,12 @@ bool ProcessMessages(CNode* pfrom, CConnman& connman, const std::atomic<bool>& i\n             PrintExceptionContinue(NULL, \"ProcessMessages()\");\n         }\n \n-        if (!fRet)\n+        if (!fRet) {\n             LogPrintf(\"%s(%s, %u bytes) FAILED peer=%d\\n\", __func__, SanitizeString(strCommand), nMessageSize, pfrom->id);\n+        }\n+\n+        LOCK(cs_main);\n+        SendRejectsAndCheckIfBanned(pfrom, connman);\n \n     return fMoreWork;\n }\n@@ -2773,30 +2807,10 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n         if (!lockMain)\n             return true;\n \n+        if (SendRejectsAndCheckIfBanned(pto, connman))\n+            return true;\n         CNodeState &state = *State(pto->GetId());\n \n-        BOOST_FOREACH(const CBlockReject& reject, state.rejects)\n-            connman.PushMessage(pto, msgMaker.Make(NetMsgType::REJECT, (std::string)NetMsgType::BLOCK, reject.chRejectCode, reject.strRejectReason, reject.hashBlock));\n-        state.rejects.clear();\n-\n-        if (state.fShouldBan) {\n-            state.fShouldBan = false;\n-            if (pto->fWhitelisted)\n-                LogPrintf(\"Warning: not punishing whitelisted peer %s!\\n\", pto->addr.ToString());\n-            else if (pto->fAddnode)\n-                LogPrintf(\"Warning: not punishing addnoded peer %s!\\n\", pto->addr.ToString());\n-            else {\n-                pto->fDisconnect = true;\n-                if (pto->addr.IsLocal())\n-                    LogPrintf(\"Warning: not banning local peer %s!\\n\", pto->addr.ToString());\n-                else\n-                {\n-                    connman.Ban(pto->addr, BanReasonNodeMisbehaving);\n-                }\n-                return true;\n-            }\n-        }\n-\n         // Address refresh broadcast\n         int64_t nNow = GetTimeMicros();\n         if (!IsInitialBlockDownload() && pto->nNextLocalAddrSend < nNow) {"
      }
    ]
  },
  {
    "sha": "8502e7acbe0f42fd6e6979681bc9c4610c4fb8cb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NTAyZTdhY2JlMGY0MmZkNmU2OTc5NjgxYmM5YzQ2MTBjNGZiOGNi",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-08T06:02:49Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-13T23:55:35Z"
      },
      "message": "net: parse reject earlier\n\nPrior to this change, all messages were ignored until a VERSION message was\nreceived, as well as possibly incurring a ban score.\n\nSince REJECT messages can be sent at any time (including as a response to a bad\nVERSION message), make sure to always parse them.\n\nMoving this parsing up keeps it from being caught in the\nif (pfrom->nVersion == 0) check below.",
      "tree": {
        "sha": "97a314e94a2d0fc3915fb0f62003c2b1cc67f122",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/97a314e94a2d0fc3915fb0f62003c2b1cc67f122"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8502e7acbe0f42fd6e6979681bc9c4610c4fb8cb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8502e7acbe0f42fd6e6979681bc9c4610c4fb8cb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8502e7acbe0f42fd6e6979681bc9c4610c4fb8cb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8502e7acbe0f42fd6e6979681bc9c4610c4fb8cb/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c45b9fb54c5ca068a5e276c3bd6ebf4ae720f6f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c45b9fb54c5ca068a5e276c3bd6ebf4ae720f6f7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c45b9fb54c5ca068a5e276c3bd6ebf4ae720f6f7"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 24,
      "deletions": 26
    },
    "files": [
      {
        "sha": "b304da76c254a16f560ad4d2259ded7b978363e8",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 26,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8502e7acbe0f42fd6e6979681bc9c4610c4fb8cb/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8502e7acbe0f42fd6e6979681bc9c4610c4fb8cb/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=8502e7acbe0f42fd6e6979681bc9c4610c4fb8cb",
        "patch": "@@ -1190,8 +1190,31 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         }\n     }\n \n+    if (strCommand == NetMsgType::REJECT)\n+    {\n+        if (fDebug) {\n+            try {\n+                std::string strMsg; unsigned char ccode; std::string strReason;\n+                vRecv >> LIMITED_STRING(strMsg, CMessageHeader::COMMAND_SIZE) >> ccode >> LIMITED_STRING(strReason, MAX_REJECT_MESSAGE_LENGTH);\n+\n+                std::ostringstream ss;\n+                ss << strMsg << \" code \" << itostr(ccode) << \": \" << strReason;\n \n-    if (strCommand == NetMsgType::VERSION)\n+                if (strMsg == NetMsgType::BLOCK || strMsg == NetMsgType::TX)\n+                {\n+                    uint256 hash;\n+                    vRecv >> hash;\n+                    ss << \": hash \" << hash.ToString();\n+                }\n+                LogPrint(\"net\", \"Reject %s\\n\", SanitizeString(ss.str()));\n+            } catch (const std::ios_base::failure&) {\n+                // Avoid feedback loops by preventing reject messages from triggering a new reject message.\n+                LogPrint(\"net\", \"Unparseable reject message received\\n\");\n+            }\n+        }\n+    }\n+\n+    else if (strCommand == NetMsgType::VERSION)\n     {\n         // Each connection can only send one version message\n         if (pfrom->nVersion != 0)\n@@ -2544,31 +2567,6 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         pfrom->fRelayTxes = true;\n     }\n \n-\n-    else if (strCommand == NetMsgType::REJECT)\n-    {\n-        if (fDebug) {\n-            try {\n-                std::string strMsg; unsigned char ccode; std::string strReason;\n-                vRecv >> LIMITED_STRING(strMsg, CMessageHeader::COMMAND_SIZE) >> ccode >> LIMITED_STRING(strReason, MAX_REJECT_MESSAGE_LENGTH);\n-\n-                std::ostringstream ss;\n-                ss << strMsg << \" code \" << itostr(ccode) << \": \" << strReason;\n-\n-                if (strMsg == NetMsgType::BLOCK || strMsg == NetMsgType::TX)\n-                {\n-                    uint256 hash;\n-                    vRecv >> hash;\n-                    ss << \": hash \" << hash.ToString();\n-                }\n-                LogPrint(\"net\", \"Reject %s\\n\", SanitizeString(ss.str()));\n-            } catch (const std::ios_base::failure&) {\n-                // Avoid feedback loops by preventing reject messages from triggering a new reject message.\n-                LogPrint(\"net\", \"Unparseable reject message received\\n\");\n-            }\n-        }\n-    }\n-\n     else if (strCommand == NetMsgType::FEEFILTER) {\n         CAmount newFeeFilter = 0;\n         vRecv >> newFeeFilter;"
      }
    ]
  },
  {
    "sha": "cbfc5a6728d389fbb15e0555cdf50f1b04595106",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYmZjNWE2NzI4ZDM4OWZiYjE1ZTA1NTVjZGY1MGYxYjA0NTk1MTA2",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-08T06:04:53Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-13T23:55:35Z"
      },
      "message": "net: require a verack before responding to anything else\n\n7a8c251901 made this logic hard to follow. After that change, messages would\nnot be sent to a peer via SendMessages() before the handshake was complete, but\nmessages could still be sent as a response to an incoming message.\n\nFor example, if a peer had not yet sent a verack, we wouldn't notify it about\nnew blocks, but we would respond to a PING with a PONG.\n\nThis change makes the behavior straightforward: until we've received a verack,\nnever send any message other than version/verack/reject.\n\nThe behavior until a VERACK is received has always been undefined, this change\njust tightens our policy.\n\nThis also makes testing much easier, because we can now connect but not send\nversion/verack, and anything sent to us is an error.",
      "tree": {
        "sha": "81dc1e8af09985a0bb8ec094af118261cd84c595",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/81dc1e8af09985a0bb8ec094af118261cd84c595"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cbfc5a6728d389fbb15e0555cdf50f1b04595106",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbfc5a6728d389fbb15e0555cdf50f1b04595106",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cbfc5a6728d389fbb15e0555cdf50f1b04595106",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbfc5a6728d389fbb15e0555cdf50f1b04595106/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8502e7acbe0f42fd6e6979681bc9c4610c4fb8cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8502e7acbe0f42fd6e6979681bc9c4610c4fb8cb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8502e7acbe0f42fd6e6979681bc9c4610c4fb8cb"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 7,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f458a352560cc4eb9fc34e77dd631c0e9b93b0fb",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cbfc5a6728d389fbb15e0555cdf50f1b04595106/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cbfc5a6728d389fbb15e0555cdf50f1b04595106/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=cbfc5a6728d389fbb15e0555cdf50f1b04595106",
        "patch": "@@ -1420,6 +1420,13 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         pfrom->fSuccessfullyConnected = true;\n     }\n \n+    else if (!pfrom->fSuccessfullyConnected)\n+    {\n+        // Must have a verack message before anything else\n+        LOCK(cs_main);\n+        Misbehaving(pfrom->GetId(), 1);\n+        return false;\n+    }\n \n     else if (strCommand == NetMsgType::ADDR)\n     {"
      }
    ]
  },
  {
    "sha": "5b5e4f8330634dc33446854677badc52aef43b82",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YjVlNGY4MzMwNjM0ZGMzMzQ0Njg1NDY3N2JhZGM1MmFlZjQzYjgy",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-07T22:35:57Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-13T23:56:03Z"
      },
      "message": "qa: mininode learns when a socket connects, not its first action",
      "tree": {
        "sha": "90490eb07008b587e6b648e1888d252276d9d17e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/90490eb07008b587e6b648e1888d252276d9d17e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5b5e4f8330634dc33446854677badc52aef43b82",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b5e4f8330634dc33446854677badc52aef43b82",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5b5e4f8330634dc33446854677badc52aef43b82",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b5e4f8330634dc33446854677badc52aef43b82/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cbfc5a6728d389fbb15e0555cdf50f1b04595106",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbfc5a6728d389fbb15e0555cdf50f1b04595106",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cbfc5a6728d389fbb15e0555cdf50f1b04595106"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 24,
      "deletions": 12
    },
    "files": [
      {
        "sha": "696a065282c624125718ba54bb58674723115bdf",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 24,
        "deletions": 12,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b5e4f8330634dc33446854677badc52aef43b82/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b5e4f8330634dc33446854677badc52aef43b82/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=5b5e4f8330634dc33446854677badc52aef43b82",
        "patch": "@@ -1614,7 +1614,7 @@ class NodeConn(asyncore.dispatcher):\n         \"regtest\": b\"\\xfa\\xbf\\xb5\\xda\",   # regtest\n     }\n \n-    def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=NODE_NETWORK):\n+    def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=NODE_NETWORK, send_version=True):\n         asyncore.dispatcher.__init__(self, map=mininode_socket_map)\n         self.log = logging.getLogger(\"NodeConn(%s:%d)\" % (dstaddr, dstport))\n         self.dstaddr = dstaddr\n@@ -1631,14 +1631,16 @@ def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=NODE\n         self.disconnect = False\n         self.nServices = 0\n \n-        # stuff version msg into sendbuf\n-        vt = msg_version()\n-        vt.nServices = services\n-        vt.addrTo.ip = self.dstaddr\n-        vt.addrTo.port = self.dstport\n-        vt.addrFrom.ip = \"0.0.0.0\"\n-        vt.addrFrom.port = 0\n-        self.send_message(vt, True)\n+        if send_version:\n+            # stuff version msg into sendbuf\n+            vt = msg_version()\n+            vt.nServices = services\n+            vt.addrTo.ip = self.dstaddr\n+            vt.addrTo.port = self.dstport\n+            vt.addrFrom.ip = \"0.0.0.0\"\n+            vt.addrFrom.port = 0\n+            self.send_message(vt, True)\n+\n         print('MiniNode: Connecting to Bitcoin Node IP # ' + dstaddr + ':' \\\n             + str(dstport))\n \n@@ -1652,8 +1654,9 @@ def show_debug_msg(self, msg):\n         self.log.debug(msg)\n \n     def handle_connect(self):\n-        self.show_debug_msg(\"MiniNode: Connected & Listening: \\n\")\n-        self.state = \"connected\"\n+        if self.state != \"connected\":\n+            self.show_debug_msg(\"MiniNode: Connected & Listening: \\n\")\n+            self.state = \"connected\"\n \n     def handle_close(self):\n         self.show_debug_msg(\"MiniNode: Closing Connection to %s:%d... \"\n@@ -1681,11 +1684,20 @@ def readable(self):\n \n     def writable(self):\n         with mininode_lock:\n+            pre_connection = self.state == \"connecting\"\n             length = len(self.sendbuf)\n-        return (length > 0)\n+        return (length > 0 or pre_connection)\n \n     def handle_write(self):\n         with mininode_lock:\n+            # asyncore does not expose socket connection, only the first read/write\n+            # event, thus we must check connection manually here to know when we\n+            # actually connect\n+            if self.state == \"connecting\":\n+                self.handle_connect()\n+            if not self.writable():\n+                return\n+\n             try:\n                 sent = self.send(self.sendbuf)\n             except:"
      }
    ]
  },
  {
    "sha": "8650bbb660eaf8c81d714f1518ecc8c35ae17463",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NjUwYmJiNjYwZWFmOGM4MWQ3MTRmMTUxOGVjYzhjMzVhZTE3NDYz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-07T22:40:28Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-13T23:56:03Z"
      },
      "message": "qa: Expose on-connection to mininode listeners",
      "tree": {
        "sha": "c5b6a654665ccf928fe12400cea292dfd84e1bf4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c5b6a654665ccf928fe12400cea292dfd84e1bf4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8650bbb660eaf8c81d714f1518ecc8c35ae17463",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8650bbb660eaf8c81d714f1518ecc8c35ae17463",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8650bbb660eaf8c81d714f1518ecc8c35ae17463",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8650bbb660eaf8c81d714f1518ecc8c35ae17463/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5b5e4f8330634dc33446854677badc52aef43b82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b5e4f8330634dc33446854677badc52aef43b82",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5b5e4f8330634dc33446854677badc52aef43b82"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5b563c58ae1e1a17e50caa42f165a28fd3d739d7",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8650bbb660eaf8c81d714f1518ecc8c35ae17463/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8650bbb660eaf8c81d714f1518ecc8c35ae17463/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=8650bbb660eaf8c81d714f1518ecc8c35ae17463",
        "patch": "@@ -1540,6 +1540,7 @@ def on_ping(self, conn, message):\n         if conn.ver_send > BIP0031_VERSION:\n             conn.send_message(msg_pong(message.nonce))\n     def on_reject(self, conn, message): pass\n+    def on_open(self, conn): pass\n     def on_close(self, conn): pass\n     def on_mempool(self, conn): pass\n     def on_pong(self, conn, message): pass\n@@ -1657,6 +1658,7 @@ def handle_connect(self):\n         if self.state != \"connected\":\n             self.show_debug_msg(\"MiniNode: Connected & Listening: \\n\")\n             self.state = \"connected\"\n+            self.cb.on_open(self)\n \n     def handle_close(self):\n         self.show_debug_msg(\"MiniNode: Closing Connection to %s:%d... \""
      }
    ]
  },
  {
    "sha": "d9434918d277bba534933ebc8c63ba81e613f603",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOTQzNDkxOGQyNzdiYmE1MzQ5MzNlYmM4YzYzYmE4MWU2MTNmNjAz",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-08T06:17:58Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-13T23:56:03Z"
      },
      "message": "qa: add a test to detect leaky p2p messages\n\nThis is certainly not exhaustive, but it's better than nothing. Adds checks\nfor:\n\n- Any message received before sending a version\n- Any message received other than version/reject before sending a verack\n\nIt also tries to goad the remote into sending a pong, address, or block\nannouncement.",
      "tree": {
        "sha": "4bf71e301e86cdab80fe9648b01fa904d66b8d31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4bf71e301e86cdab80fe9648b01fa904d66b8d31"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d9434918d277bba534933ebc8c63ba81e613f603",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9434918d277bba534933ebc8c63ba81e613f603",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d9434918d277bba534933ebc8c63ba81e613f603",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9434918d277bba534933ebc8c63ba81e613f603/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8650bbb660eaf8c81d714f1518ecc8c35ae17463",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8650bbb660eaf8c81d714f1518ecc8c35ae17463",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8650bbb660eaf8c81d714f1518ecc8c35ae17463"
      }
    ],
    "stats": {
      "total": 146,
      "additions": 146,
      "deletions": 0
    },
    "files": [
      {
        "sha": "31018125416a25bae5cb886641b6c355d47a4bae",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9434918d277bba534933ebc8c63ba81e613f603/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9434918d277bba534933ebc8c63ba81e613f603/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=d9434918d277bba534933ebc8c63ba81e613f603",
        "patch": "@@ -154,6 +154,7 @@\n     'bumpfee.py',\n     'rpcnamedargs.py',\n     'listsinceblock.py',\n+    'p2p-leaktests.py',\n ]\n if ENABLE_ZMQ:\n     testScripts.append('zmq_test.py')"
      },
      {
        "sha": "41ca84d779890cded199129d7739fbbd348a894c",
        "filename": "qa/rpc-tests/p2p-leaktests.py",
        "status": "added",
        "additions": 145,
        "deletions": 0,
        "changes": 145,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9434918d277bba534933ebc8c63ba81e613f603/qa/rpc-tests/p2p-leaktests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9434918d277bba534933ebc8c63ba81e613f603/qa/rpc-tests/p2p-leaktests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-leaktests.py?ref=d9434918d277bba534933ebc8c63ba81e613f603",
        "patch": "@@ -0,0 +1,145 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+'''\n+Test for message sending before handshake completion\n+\n+A node should never send anything other than VERSION/VERACK/REJECT until it's\n+received a VERACK.\n+\n+This test connects to a node and sends it a few messages, trying to intice it\n+into sending us something it shouldn't.\n+'''\n+\n+banscore = 10\n+\n+class CLazyNode(NodeConnCB):\n+    def __init__(self):\n+        self.connection = None\n+        self.unexpected_msg = False\n+        self.connected = False\n+        super().__init__()\n+\n+    def add_connection(self, conn):\n+        self.connection = conn\n+\n+    def send_message(self, message):\n+        self.connection.send_message(message)\n+\n+    def bad_message(self, message):\n+        self.unexpected_msg = True\n+        print(\"should not have received message: %s\" % message.command)\n+\n+    def on_open(self, conn):\n+        self.connected = True\n+\n+    def on_version(self, conn, message): self.bad_message(message)\n+    def on_verack(self, conn, message): self.bad_message(message)\n+    def on_reject(self, conn, message): self.bad_message(message)\n+    def on_inv(self, conn, message): self.bad_message(message)\n+    def on_addr(self, conn, message): self.bad_message(message)\n+    def on_alert(self, conn, message): self.bad_message(message)\n+    def on_getdata(self, conn, message): self.bad_message(message)\n+    def on_getblocks(self, conn, message): self.bad_message(message)\n+    def on_tx(self, conn, message): self.bad_message(message)\n+    def on_block(self, conn, message): self.bad_message(message)\n+    def on_getaddr(self, conn, message): self.bad_message(message)\n+    def on_headers(self, conn, message): self.bad_message(message)\n+    def on_getheaders(self, conn, message): self.bad_message(message)\n+    def on_ping(self, conn, message): self.bad_message(message)\n+    def on_mempool(self, conn): self.bad_message(message)\n+    def on_pong(self, conn, message): self.bad_message(message)\n+    def on_feefilter(self, conn, message): self.bad_message(message)\n+    def on_sendheaders(self, conn, message): self.bad_message(message)\n+    def on_sendcmpct(self, conn, message): self.bad_message(message)\n+    def on_cmpctblock(self, conn, message): self.bad_message(message)\n+    def on_getblocktxn(self, conn, message): self.bad_message(message)\n+    def on_blocktxn(self, conn, message): self.bad_message(message)\n+\n+# Node that never sends a version. We'll use this to send a bunch of messages\n+# anyway, and eventually get disconnected.\n+class CNodeNoVersionBan(CLazyNode):\n+    def __init__(self):\n+        super().__init__()\n+\n+    # send a bunch of veracks without sending a message. This should get us disconnected.\n+    # NOTE: implementation-specific check here. Remove if bitcoind ban behavior changes\n+    def on_open(self, conn):\n+        super().on_open(conn)\n+        for i in range(banscore):\n+            self.send_message(msg_verack())\n+\n+    def on_reject(self, conn, message): pass\n+\n+# Node that never sends a version. This one just sits idle and hopes to receive\n+# any message (it shouldn't!)\n+class CNodeNoVersionIdle(CLazyNode):\n+    def __init__(self):\n+        super().__init__()\n+\n+# Node that sends a version but not a verack.\n+class CNodeNoVerackIdle(CLazyNode):\n+    def __init__(self):\n+        self.version_received = False\n+        super().__init__()\n+\n+    def on_reject(self, conn, message): pass\n+    def on_verack(self, conn, message): pass\n+    # When version is received, don't reply with a verack. Instead, see if the\n+    # node will give us a message that it shouldn't. This is not an exhaustive\n+    # list!\n+    def on_version(self, conn, message):\n+        self.version_received = True\n+        conn.send_message(msg_ping())\n+        conn.send_message(msg_getaddr())\n+\n+class P2PLeakTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 1\n+    def setup_network(self):\n+        extra_args = [['-debug', '-banscore='+str(banscore)]\n+                      for i in range(self.num_nodes)]\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+\n+    def run_test(self):\n+        no_version_bannode = CNodeNoVersionBan()\n+        no_version_idlenode = CNodeNoVersionIdle()\n+        no_verack_idlenode = CNodeNoVerackIdle()\n+\n+        connections = []\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], no_version_bannode, send_version=False))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], no_version_idlenode, send_version=False))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], no_verack_idlenode))\n+        no_version_bannode.add_connection(connections[0])\n+        no_version_idlenode.add_connection(connections[1])\n+        no_verack_idlenode.add_connection(connections[2])\n+\n+        NetworkThread().start()  # Start up network handling in another thread\n+\n+        assert(wait_until(lambda: no_version_bannode.connected and no_version_idlenode.connected and no_verack_idlenode.version_received, timeout=10))\n+\n+        # Mine a block and make sure that it's not sent to the connected nodes\n+        self.nodes[0].generate(1)\n+\n+        #Give the node enough time to possibly leak out a message\n+        time.sleep(5)\n+\n+        #This node should have been banned\n+        assert(no_version_bannode.connection.state == \"closed\")\n+\n+        [conn.disconnect_node() for conn in connections]\n+\n+        # Make sure no unexpected messages came in\n+        assert(no_version_bannode.unexpected_msg == False)\n+        assert(no_version_idlenode.unexpected_msg == False)\n+        assert(no_verack_idlenode.unexpected_msg == False)\n+\n+if __name__ == '__main__':\n+    P2PLeakTest().main()"
      }
    ]
  },
  {
    "sha": "ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYzY2ZDA2ZTZlZjM4YjRjMmNmMjI0NmJhMmVlYjNkMTdhNjA0MGU1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-14T11:10:53Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-14T11:21:34Z"
      },
      "message": "Merge #9735: devtools: Handle Qt formatting characters edge-case in update-translations.py\n\n7179e7c qt: Periodic translations update (Wladimir J. van der Laan)\n5e903a5 devtools: Handle Qt formatting characters edge-case in update-translations.py (Wladimir J. van der Laan)",
      "tree": {
        "sha": "eccd7c588c7bd2982e823809c4efc902a18fe211",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eccd7c588c7bd2982e823809c4efc902a18fe211"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYoug+AAoJEHSBCwEjRsmm/P8IAI9LXS9j7xC/9r6nemVyT2vq\nmAlYue5OiN0vuCU1uhQlAW54mRZ9r/gJW9m3BxDitYbtExiUH0q3Kad14I9xozZr\n8sFv5k42w/u6pEsk7VQUBwwz7A81+6gTx+gVRnbyimdz+b76468U81C3odmMSrxw\nI+sVyVTNeyrgms6a9kjAHChMxIb/JmdDYjXfRRrrpSrCiIPV/wPbMJ8ooK4ALomb\nL6Cg5NuWRXzvB7hJup0pYbt/NJRn81YebicLh45uqpI1z8hEanHgx3tlV53dRb/C\nm1KYQEsMpQcLOwuODB+7Mr1iA/PbDMpR9uYQbp+4hduKKcitMN3rk/R4/XfRNpg=\n=0qo/\n-----END PGP SIGNATURE-----",
        "payload": "tree eccd7c588c7bd2982e823809c4efc902a18fe211\nparent d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81\nparent 7179e7ca0db493dccbfd88f64738252844aab6ff\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487070653 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487071294 +0100\n\nMerge #9735: devtools: Handle Qt formatting characters edge-case in update-translations.py\n\n7179e7c qt: Periodic translations update (Wladimir J. van der Laan)\n5e903a5 devtools: Handle Qt formatting characters edge-case in update-translations.py (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81"
      },
      {
        "sha": "7179e7ca0db493dccbfd88f64738252844aab6ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7179e7ca0db493dccbfd88f64738252844aab6ff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7179e7ca0db493dccbfd88f64738252844aab6ff"
      }
    ],
    "stats": {
      "total": 1744,
      "additions": 1520,
      "deletions": 224
    },
    "files": [
      {
        "sha": "2011841005930eb975a54bcd59693c27b4a70f2c",
        "filename": "contrib/devtools/update-translations.py",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5/contrib/devtools/update-translations.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5/contrib/devtools/update-translations.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/update-translations.py?ref=ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5",
        "patch": "@@ -65,6 +65,14 @@ def split_format_specifiers(specifiers):\n         else:\n             other.append(s)\n \n+    # If both numeric format specifiers and \"others\" are used, assume we're dealing\n+    # with a Qt-formatted message. In the case of Qt formatting (see https://doc.qt.io/qt-5/qstring.html#arg)\n+    # only numeric formats are replaced at all. This means \"(percentage: %1%)\" is valid, without needing\n+    # any kind of escaping that would be necessary for strprintf. Without this, this function\n+    # would wrongly detect '%)' as a printf format specifier.\n+    if numeric:\n+        other = []\n+\n     # numeric (Qt) can be present in any order, others (strprintf) must be in specified order\n     return set(numeric),other\n "
      },
      {
        "sha": "f38c425137020ded31353635e466c526a0127f0f",
        "filename": "src/qt/locale/bitcoin_cs.ts",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5/src/qt/locale/bitcoin_cs.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5/src/qt/locale/bitcoin_cs.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_cs.ts?ref=ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5",
        "patch": "@@ -329,6 +329,10 @@\n         <source>Click to enable network activity again.</source>\n         <translation>Kliknut\u00edm op\u011bt umo\u017en\u00ed\u0161 spojen\u00ed do s\u00edt\u011b.</translation>\n     </message>\n+    <message>\n+        <source>Syncing Headers (%1%)...</source>\n+        <translation>Synchronizuji z\u00e1hlav\u00ed blok\u016f (%1 %)\u2026</translation>\n+    </message>\n     <message>\n         <source>Reindexing blocks on disk...</source>\n         <translation>Vytv\u00e1\u0159\u00edm nov\u00fd index blok\u016f na disku...</translation>\n@@ -481,6 +485,10 @@\n         <source>%1 client</source>\n         <translation>%1 klient</translation>\n     </message>\n+    <message>\n+        <source>Connecting to peers...</source>\n+        <translation>P\u0159ipojuji se\u2026</translation>\n+    </message>\n     <message>\n         <source>Catching up...</source>\n         <translation>Stahuji...</translation>\n@@ -3089,6 +3097,14 @@\n         <source>Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)</source>\n         <translation>Spustit p\u0159\u00edkaz, kdy\u017e se objev\u00ed transakce t\u00fdkaj\u00edc\u00ed se pen\u011b\u017eenky (%s se v p\u0159\u00edkazu nahrad\u00ed za TxID)</translation>\n     </message>\n+    <message>\n+        <source>Extra transactions to keep in memory for compact block reconstructions (default: %u)</source>\n+        <translation>Po\u010det extra transakc\u00ed, kter\u00e9 se maj\u00ed dr\u017eet v pam\u011bti pro \u00fa\u010dely rekonstrukce kompaktn\u00edch blok\u016f (v\u00fdchoz\u00ed: %u)</translation>\n+    </message>\n+    <message>\n+        <source>If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)</source>\n+        <translation>Pokud je tenhle blok v \u0159et\u011bzci, tak p\u0159edpokl\u00e1dat, \u017ee on i jeho n\u00e1sledn\u00edci jsou platn\u00ed, a potenci\u00e1ln\u011b p\u0159esko\u010dit ov\u011b\u0159ov\u00e1n\u00ed jejich skript\u016f (0 = ov\u011b\u0159ovat v\u0161e, v\u00fdchoz\u00ed: %s, testnet: %s)</translation>\n+    </message>\n     <message>\n         <source>Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: %u seconds)</source>\n         <translation>Maxim\u00e1ln\u00ed povolen\u00e9 se\u0159izov\u00e1n\u00ed \u010dasu medi\u00e1nem \u010das\u016f prot\u011bj\u0161k\u016f. M\u00edstn\u00ed vn\u00edm\u00e1n\u00ed \u010dasu m\u016f\u017ee b\u00fdt ovlivn\u011bno prot\u011bj\u0161ky, a to dop\u0159edu nebo dozadu a\u017e o toto mno\u017estv\u00ed. (v\u00fdchoz\u00ed: %u vte\u0159in)</translation>\n@@ -3105,6 +3121,14 @@\n         <source>Please contribute if you find %s useful. Visit %s for further information about the software.</source>\n         <translation>Pros\u00edme, zapoj se nebo p\u0159isp\u011bj, pokud ti %s p\u0159ijde u\u017eite\u010dn\u00fd. V\u00edce informac\u00ed o programu je na %s.</translation>\n     </message>\n+    <message>\n+        <source>Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex and -rescan. Warning: Reverting this setting requires re-downloading the entire blockchain. (default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, &gt;%u = automatically prune block files to stay under the specified target size in MiB)</source>\n+        <translation>Omezit n\u00e1roky na \u00falo\u017en\u00fd prostor pro\u0159ez\u00e1v\u00e1n\u00edm (maz\u00e1n\u00edm) star\u00fdch blok\u016f. Tato volba tak\u00e9 umo\u017en\u00ed pou\u017e\u00edt RPC vol\u00e1n\u00ed pruneblockchain ke smaz\u00e1n\u00ed konkr\u00e9tn\u00edch blok\u016f a d\u00e1le automatick\u00e9 pro\u0159ez\u00e1v\u00e1n\u00ed star\u00fdch blok\u016f, pokud je zad\u00e1na c\u00edlov\u00e1 velikost soubor\u016f s bloky v MiB. Tento re\u017eim nen\u00ed slu\u010diteln\u00fd s -txindex ani -rescan. Upozorn\u011bn\u00ed: op\u011btovn\u00e1 zm\u011bna tohoto nastaven\u00ed bude vy\u017eadovat nov\u00e9 sta\u017een\u00ed cel\u00e9ho \u0159et\u011bzce blok\u016f. (v\u00fdchoz\u00ed: 0 = bloky nepro\u0159ez\u00e1vat, 1 = povolit ru\u010dn\u00ed pro\u0159ez\u00e1v\u00e1n\u00ed skrze RPC, &gt;%u = automatick\u00e9 pro\u0159ez\u00e1v\u00e1n\u00ed blok\u016f tak, aby byla udr\u017eena c\u00edlov\u00e1 velikost soubor\u016f s bloky, v MiB)</translation>\n+    </message>\n+    <message>\n+        <source>Set lowest fee rate (in %s/kB) for transactions to be included in block creation. (default: %s)</source>\n+        <translation>Nastavit nejni\u017e\u0161\u00ed akceptovateln\u00fd poplatek (v %s/kB) pro transakce, kter\u00e9 maj\u00ed b\u00fdt zahrnuty do nov\u00fdch blok\u016f. (v\u00fdchoz\u00ed: %s)</translation>\n+    </message>\n     <message>\n         <source>Set the number of script verification threads (%u to %d, 0 = auto, &lt;0 = leave that many cores free, default: %d)</source>\n         <translation>Nastaven\u00ed po\u010dtu vl\u00e1ken pro verifikaci skript\u016f (%u a\u017e %d, 0 = automaticky, &lt;0 = nechat dan\u00fd po\u010det jader voln\u00fd, v\u00fdchoz\u00ed: %d)</translation>"
      },
      {
        "sha": "f62f1e4a734d39538a281a90f29a0d698cfd70b6",
        "filename": "src/qt/locale/bitcoin_en.ts",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5/src/qt/locale/bitcoin_en.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5/src/qt/locale/bitcoin_en.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_en.ts?ref=ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5",
        "patch": "@@ -1083,7 +1083,7 @@\n         <translation>Use a custom data directory:</translation>\n     </message>\n     <message>\n-        <location filename=\"../intro.cpp\" line=\"+89\"/>\n+        <location filename=\"../intro.cpp\" line=\"+94\"/>\n         <source>Error: Specified data directory &quot;%1&quot; cannot be created.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>"
      },
      {
        "sha": "313d5e3be14b67ef1ec205503df3287884e24b26",
        "filename": "src/qt/locale/bitcoin_et.ts",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5/src/qt/locale/bitcoin_et.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5/src/qt/locale/bitcoin_et.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_et.ts?ref=ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5",
        "patch": "@@ -214,6 +214,10 @@\n </context>\n <context>\n     <name>BanTableModel</name>\n+    <message>\n+        <source>IP/Netmask</source>\n+        <translation>IP/V\u00f5rgumask</translation>\n+    </message>\n     </context>\n <context>\n     <name>BitcoinGUI</name>\n@@ -787,6 +791,10 @@\n         <source>&amp;Window</source>\n         <translation>&amp;Aken</translation>\n     </message>\n+    <message>\n+        <source>Hide tray icon</source>\n+        <translation>Peida tegumiriba ikoon</translation>\n+    </message>\n     <message>\n         <source>Show only a tray icon after minimizing the window.</source>\n         <translation>Minimeeri systray alale.</translation>\n@@ -903,10 +911,30 @@\n         <source>N/A</source>\n         <translation>N/A</translation>\n     </message>\n+    <message>\n+        <source>%1 ms</source>\n+        <translation>%1 ms</translation>\n+    </message>\n+    <message numerus=\"yes\">\n+        <source>%n hour(s)</source>\n+        <translation><numerusform>%n tund</numerusform><numerusform>%n tundi</numerusform></translation>\n+    </message>\n+    <message numerus=\"yes\">\n+        <source>%n day(s)</source>\n+        <translation><numerusform>%n p\u00e4ev</numerusform><numerusform>%n p\u00e4eva</numerusform></translation>\n+    </message>\n+    <message numerus=\"yes\">\n+        <source>%n week(s)</source>\n+        <translation><numerusform>%n n\u00e4dal</numerusform><numerusform>%n n\u00e4dalat</numerusform></translation>\n+    </message>\n     <message>\n         <source>%1 and %2</source>\n         <translation>%1 ja %2</translation>\n     </message>\n+    <message numerus=\"yes\">\n+        <source>%n year(s)</source>\n+        <translation><numerusform>%n aasta</numerusform><numerusform>%n aastat</numerusform></translation>\n+    </message>\n     </context>\n <context>\n     <name>QObject::QObject</name>"
      },
      {
        "sha": "21800231596a0bd70db1ab0f290fd1ec9bcf5534",
        "filename": "src/qt/locale/bitcoin_fr.ts",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5/src/qt/locale/bitcoin_fr.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5/src/qt/locale/bitcoin_fr.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_fr.ts?ref=ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5",
        "patch": "@@ -329,6 +329,10 @@\n         <source>Click to enable network activity again.</source>\n         <translation>Cliquer pour r\u00e9activer l'activit\u00e9 r\u00e9seau.</translation>\n     </message>\n+    <message>\n+        <source>Syncing Headers (%1%)...</source>\n+        <translation>Synchronisation des en-t\u00eates (%1)...</translation>\n+    </message>\n     <message>\n         <source>Reindexing blocks on disk...</source>\n         <translation>R\u00e9indexation des blocs sur le disque...</translation>"
      },
      {
        "sha": "9f2c7626de09550ee73eb86eaed9c3acbc01bfc7",
        "filename": "src/qt/locale/bitcoin_it.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5/src/qt/locale/bitcoin_it.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5/src/qt/locale/bitcoin_it.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_it.ts?ref=ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5",
        "patch": "@@ -702,10 +702,6 @@\n         <source>Error</source>\n         <translation>Errore</translation>\n     </message>\n-    <message numerus=\"yes\">\n-        <source>%n GB of free space available</source>\n-        <translation><numerusform>GB di spazio libero disponibile</numerusform><numerusform>%n GB di spazio disponibile</numerusform></translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>(of %n GB needed)</source>\n         <translation><numerusform>(di %nGB richiesti)</numerusform><numerusform>(%n GB richiesti)</numerusform></translation>"
      },
      {
        "sha": "3202587cbd54bc3773667a348375112c358ded02",
        "filename": "src/qt/locale/bitcoin_pt_BR.ts",
        "status": "modified",
        "additions": 24,
        "deletions": 16,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5/src/qt/locale/bitcoin_pt_BR.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5/src/qt/locale/bitcoin_pt_BR.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_pt_BR.ts?ref=ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5",
        "patch": "@@ -23,7 +23,7 @@\n     </message>\n     <message>\n         <source>C&amp;lose</source>\n-        <translation>Fechar</translation>\n+        <translation>&amp;Fechar</translation>\n     </message>\n     <message>\n         <source>Delete the currently selected address from the list</source>\n@@ -39,7 +39,7 @@\n     </message>\n     <message>\n         <source>&amp;Delete</source>\n-        <translation>&amp;Excluir</translation>\n+        <translation>E&amp;xcluir</translation>\n     </message>\n     <message>\n         <source>Choose the address to send coins to</source>\n@@ -102,15 +102,15 @@\n     <name>AddressTableModel</name>\n     <message>\n         <source>Label</source>\n-        <translation>R\u00f3tuo</translation>\n+        <translation>R\u00f3tulo</translation>\n     </message>\n     <message>\n         <source>Address</source>\n         <translation>Endere\u00e7o</translation>\n     </message>\n     <message>\n         <source>(no label)</source>\n-        <translation>(sem r\u00f3tuo)</translation>\n+        <translation>(sem r\u00f3tulo)</translation>\n     </message>\n </context>\n <context>\n@@ -231,7 +231,7 @@\n     <name>BitcoinGUI</name>\n     <message>\n         <source>Sign &amp;message...</source>\n-        <translation>&amp;Assinar mensagem...</translation>\n+        <translation>Assinar &amp;mensagem...</translation>\n     </message>\n     <message>\n         <source>Synchronizing with network...</source>\n@@ -375,7 +375,7 @@\n     </message>\n     <message>\n         <source>&amp;Show / Hide</source>\n-        <translation>&amp;Exibir/Ocultar</translation>\n+        <translation>&amp;Exibir / Ocultar</translation>\n     </message>\n     <message>\n         <source>Show or hide the main Window</source>\n@@ -479,7 +479,7 @@\n     </message>\n     <message>\n         <source>%1 client</source>\n-        <translation>%1</translation>\n+        <translation>%1 cliente</translation>\n     </message>\n     <message>\n         <source>Connecting to peers...</source>\n@@ -688,7 +688,7 @@\n     </message>\n     <message>\n         <source>(no label)</source>\n-        <translation>(sem r\u00f3tuo)</translation>\n+        <translation>(sem r\u00f3tulo)</translation>\n     </message>\n     <message>\n         <source>change from %1 (%2)</source>\n@@ -1360,6 +1360,10 @@\n         <source>Node/Service</source>\n         <translation>N\u00f3/Servi\u00e7o</translation>\n     </message>\n+    <message>\n+        <source>NodeId</source>\n+        <translation>ID do n\u00f3</translation>\n+    </message>\n     <message>\n         <source>Ping</source>\n         <translation>Ping</translation>\n@@ -1900,7 +1904,7 @@\n     </message>\n     <message>\n         <source>Label</source>\n-        <translation>R\u00f3tuo</translation>\n+        <translation>R\u00f3tulo</translation>\n     </message>\n     <message>\n         <source>Message</source>\n@@ -1923,15 +1927,15 @@\n     </message>\n     <message>\n         <source>Label</source>\n-        <translation>R\u00f3tuo</translation>\n+        <translation>R\u00f3tulo</translation>\n     </message>\n     <message>\n         <source>Message</source>\n         <translation>Mensagem</translation>\n     </message>\n     <message>\n         <source>(no label)</source>\n-        <translation>(sem r\u00f3tuo)</translation>\n+        <translation>(sem r\u00f3tulo)</translation>\n     </message>\n     <message>\n         <source>(no message)</source>\n@@ -2210,7 +2214,7 @@\n     </message>\n     <message>\n         <source>(no label)</source>\n-        <translation>(sem r\u00f3tuo)</translation>\n+        <translation>(sem r\u00f3tulo)</translation>\n     </message>\n </context>\n <context>\n@@ -2665,7 +2669,7 @@\n     </message>\n     <message>\n         <source>Label</source>\n-        <translation>R\u00f3tuo</translation>\n+        <translation>R\u00f3tulo</translation>\n     </message>\n     <message numerus=\"yes\">\n         <source>Open for %n more block(s)</source>\n@@ -2741,7 +2745,7 @@\n     </message>\n     <message>\n         <source>(no label)</source>\n-        <translation>(sem r\u00f3tuo)</translation>\n+        <translation>(sem r\u00f3tulo)</translation>\n     </message>\n     <message>\n         <source>Transaction status. Hover over this field to show number of confirmations.</source>\n@@ -2888,7 +2892,7 @@\n     </message>\n     <message>\n         <source>Label</source>\n-        <translation>R\u00f3tuo</translation>\n+        <translation>R\u00f3tulo</translation>\n     </message>\n     <message>\n         <source>Address</source>\n@@ -3797,6 +3801,10 @@\n         <source>Relay non-P2SH multisig (default: %u)</source>\n         <translation>Retransmitir P2SH n\u00e3o multisig (padr\u00e3o: %u)</translation>\n     </message>\n+    <message>\n+        <source>Send transactions with full-RBF opt-in enabled (default: %u)</source>\n+        <translation>Ativar op\u00e7\u00e3o full-RBF nas transa\u00e7\u00f5es enviadas (padr\u00e3o: %u)</translation>\n+    </message>\n     <message>\n         <source>Set key pool size to &lt;n&gt; (default: %u)</source>\n         <translation>Defina o tamanho da chave para piscina&lt;n&gt; (padr\u00e3o: %u)</translation>\n@@ -3819,7 +3827,7 @@\n     </message>\n     <message>\n         <source>Specify pid file (default: %s)</source>\n-        <translation>Especificar aqrquivo pid (padr\u00e3o: %s)</translation>\n+        <translation>Especificar arquivo pid (padr\u00e3o: %s)</translation>\n     </message>\n     <message>\n         <source>Spend unconfirmed change when sending transactions (default: %u)</source>"
      },
      {
        "sha": "2de0d14ddd24bdc6adddf6d72c0d47729159291f",
        "filename": "src/qt/locale/bitcoin_tr.ts",
        "status": "modified",
        "additions": 1406,
        "deletions": 202,
        "changes": 1608,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5/src/qt/locale/bitcoin_tr.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5/src/qt/locale/bitcoin_tr.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_tr.ts?ref=ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5"
      },
      {
        "sha": "20875c232722ac12e09037eafbc3d74e3942b401",
        "filename": "src/qt/locale/bitcoin_zh_CN.ts",
        "status": "modified",
        "additions": 25,
        "deletions": 1,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5/src/qt/locale/bitcoin_zh_CN.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5/src/qt/locale/bitcoin_zh_CN.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_zh_CN.ts?ref=ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5",
        "patch": "@@ -481,6 +481,10 @@\n         <source>%1 client</source>\n         <translation>%1 \u5ba2\u6236</translation>\n     </message>\n+    <message>\n+        <source>Connecting to peers...</source>\n+        <translation>\u6b63\u5728\u8fde\u63a5\u5230\u8282\u70b9\u2026\u2026</translation>\n+    </message>\n     <message>\n         <source>Catching up...</source>\n         <translation>\u66f4\u65b0\u4e2d...</translation>\n@@ -1927,7 +1931,11 @@\n         <source>(no amount requested)</source>\n         <translation>\uff08\u65e0\u8bf7\u6c42\u91d1\u989d\uff09</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>Requested</source>\n+        <translation>\u603b\u989d</translation>\n+    </message>\n+</context>\n <context>\n     <name>SendCoinsDialog</name>\n     <message>\n@@ -2178,6 +2186,10 @@\n         <source>Warning: Unknown change address</source>\n         <translation>\u8b66\u544a\uff1a\u672a\u77e5\u7684\u66f4\u6539\u5730\u5740</translation>\n     </message>\n+    <message>\n+        <source>The address you selected for change is not part of this wallet. Any or all funds in your wallet may be sent to this address. Are you sure?</source>\n+        <translation>\u4f60\u9009\u62e9\u7684\u627e\u96f6\u5730\u5740\u672a\u88ab\u5305\u542b\u5728\u672c\u94b1\u5305\u4e2d\uff0c\u4f60\u94b1\u5305\u4e2d\u7684\u90e8\u5206\u6216\u5168\u90e8\u91d1\u989d\u5c06\u88ab\u53d1\u9001\u81f3\u8be5\u5730\u5740\u3002\u4f60\u786e\u5b9a\u8981\u8fd9\u6837\u505a\u5417\uff1f</translation>\n+    </message>\n     <message>\n         <source>(no label)</source>\n         <translation>(\u65e0\u6807\u7b7e)</translation>\n@@ -2459,6 +2471,14 @@\n         <source>0/unconfirmed, %1</source>\n         <translation>0/\u672a\u786e\u8ba4\uff0c%1</translation>\n     </message>\n+    <message>\n+        <source>in memory pool</source>\n+        <translation>\u5728\u5185\u5b58\u6c60\u4e2d</translation>\n+    </message>\n+    <message>\n+        <source>not in memory pool</source>\n+        <translation>\u4e0d\u5728\u5185\u5b58\u6c60\u4e2d</translation>\n+    </message>\n     <message>\n         <source>abandoned</source>\n         <translation>\u5df2\u629b\u5f03</translation>\n@@ -3200,6 +3220,10 @@\n         <source>Use UPnP to map the listening port (default: %u)</source>\n         <translation>\u4f7f\u7528UPnp\u6620\u5c04\u76d1\u542c\u7aef\u53e3 (\u9ed8\u8ba4: %u) </translation>\n     </message>\n+    <message>\n+        <source>Use the test chain</source>\n+        <translation>\u4f7f\u7528\u6d4b\u8bd5\u94fe</translation>\n+    </message>\n     <message>\n         <source>User Agent comment (%s) contains unsafe characters.</source>\n         <translation>\u7528\u6237\u4ee3\u7406\u8bc4\u8bba(%s)\u5305\u542b\u4e0d\u5b89\u5168\u7684\u5b57\u7b26\u3002</translation>"
      }
    ]
  },
  {
    "sha": "4b6ccccc16b615c01939678e589f8e09cfc15d70",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YjZjY2NjYzE2YjYxNWMwMTkzOTY3OGU1ODlmOGUwOWNmYzE1ZDcw",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-02-14T10:05:50Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-02-14T12:50:57Z"
      },
      "message": "Selectively suppress deprecation warnings",
      "tree": {
        "sha": "dbd5f5828be83046111fd7f5d1f562405cc04dd2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dbd5f5828be83046111fd7f5d1f562405cc04dd2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4b6ccccc16b615c01939678e589f8e09cfc15d70",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAlii/TIACgkQKdS8tkFv\nU+xc1Q/+KlGaCU7GyicC1SX9+l5fO6TFfFY8cNKFYKQ2h3E5AcRz4sAbWNz4FpxK\nz7P7XAFmEpkGVPAF0ij8hXyGxGQdxdYQyeHctk3Z2cv9sfo/DVcODOwY2gihJdeX\nX/868m2hlOnD0j1dI6nixYO9BxStDzrdZxMlsla4GOZR5IyFZD+uv2WXHiKZgKlD\no/AOg/JznDiHlw3jYsbsUIjFCAxOHjyku5CRWTTz+4tgYc5O5EtKmtIlS/qLc5bK\nUoEWq9EWD8eUsE+YubsXDuJgLBBFvaCXeel+bZUSHTtzNulw+Iqjz0tQk246nxBe\nP5DfZp9TYodnogrHuWjTC6ZWvxU5xu0wp+CvfoVYibvCqD+nquHOzMsgovrRHRuq\nVdDBs/gOAwfu7c1tOm2xgrFe1kaYPtUgAvioSKL1XJcJOb1jiImtQOpw31zg2wCl\nmoXqdNZEYWhXA7xfeDLAzmYlixEk6Pj5QzgeeDhJIDA+Y1foA/btS4Wfk7ZQq+DM\nJqi6XNxbc+QgxRy8yqhiDOe2fzu1pwovN2MoUmAHjM+OCFxSVdW7PxdhkDjXeahW\nPOdzmxJBMWgGcxgw/o8tjLqpuWTZRxEK/NW9q/WTXfuf+82fIiPRzhmJ5CBHuVEK\nMVtUmjpHIisGU8Ie4yXIL9mI69/1grlLlZsjW5UMhMFe3Niu3nI=\n=kqNT\n-----END PGP SIGNATURE-----",
        "payload": "tree dbd5f5828be83046111fd7f5d1f562405cc04dd2\nparent d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1487066750 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1487076657 +0100\n\nSelectively suppress deprecation warnings\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b6ccccc16b615c01939678e589f8e09cfc15d70",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4b6ccccc16b615c01939678e589f8e09cfc15d70",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b6ccccc16b615c01939678e589f8e09cfc15d70/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e0961fe7dd8d30a2e27e9e5fa36be17266550054",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b6ccccc16b615c01939678e589f8e09cfc15d70/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b6ccccc16b615c01939678e589f8e09cfc15d70/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=4b6ccccc16b615c01939678e589f8e09cfc15d70",
        "patch": "@@ -762,6 +762,8 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n \n \n #elif defined(Q_OS_MAC)\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n // based on: https://github.com/Mozketo/LaunchAtLoginController/blob/master/LaunchAtLoginController.m\n \n #include <CoreFoundation/CoreFoundation.h>\n@@ -824,6 +826,7 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n     }\n     return true;\n }\n+#pragma GCC diagnostic pop\n #else\n \n bool GetStartOnSystemStartup() { return false; }"
      },
      {
        "sha": "a2fea3fdc64fb8d488a0e0498002f52bf461f208",
        "filename": "src/qt/paymentrequestplus.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b6ccccc16b615c01939678e589f8e09cfc15d70/src/qt/paymentrequestplus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b6ccccc16b615c01939678e589f8e09cfc15d70/src/qt/paymentrequestplus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.h?ref=4b6ccccc16b615c01939678e589f8e09cfc15d70",
        "patch": "@@ -5,7 +5,10 @@\n #ifndef BITCOIN_QT_PAYMENTREQUESTPLUS_H\n #define BITCOIN_QT_PAYMENTREQUESTPLUS_H\n \n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n #include \"paymentrequest.pb.h\"\n+#pragma GCC diagnostic pop\n \n #include \"base58.h\"\n "
      }
    ]
  },
  {
    "sha": "edc9e63c57992a839614dd2f9a54f77fdbffb6ab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZGM5ZTYzYzU3OTkyYTgzOTYxNGRkMmY5YTU0Zjc3ZmRiZmZiNmFi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-14T13:24:27Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-14T13:32:22Z"
      },
      "message": "Merge #9682: Require timestamps for importmulti keys\n\n266a811 Use MTP for importmulti \"now\" timestamps (Russell Yanofsky)\n3cf9917 Add test to check new importmulti \"now\" value (Russell Yanofsky)\n442887f Require timestamps for importmulti keys (Russell Yanofsky)",
      "tree": {
        "sha": "0330a67aa73f8d590e360feadffe5146197e2f37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0330a67aa73f8d590e360feadffe5146197e2f37"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/edc9e63c57992a839614dd2f9a54f77fdbffb6ab",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYowbmAAoJEHSBCwEjRsmmniIH/2EE57LuGSbcGOl02bMXVeRD\n5j7CswRWZ4oCZYd5cpOKTxN+k/Vh3ajuRgXwSdOIbVk8DLQh04Xz/gGgN0CX0BWF\nyiRXuASlr0r5+sllL109PK632m5WxdN48wIQ323zC4EfapXR77v4FqIdulXX+2K8\nSrGqOne4c7W4WciGfd3KyrfN6JTjkce5nFFuUyAUkK22ccDQEQd0XLMRzBX0H9yM\nPjia1fAQxyx4Spm3QO6pZt25+1Hf1eHwY6JoHPC/tvIsYgim/pBPWESyFaxlW/Mf\nIDUb1ZmOM96g0gj50FA2xUBdzX/FdUSBOuOKoiCuWttaZgZJOoTded2rc14m7ug=\n=xupR\n-----END PGP SIGNATURE-----",
        "payload": "tree 0330a67aa73f8d590e360feadffe5146197e2f37\nparent ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5\nparent 266a8114cbe2a87a6c84d7690a7716a18d782c56\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487078667 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487079142 +0100\n\nMerge #9682: Require timestamps for importmulti keys\n\n266a811 Use MTP for importmulti \"now\" timestamps (Russell Yanofsky)\n3cf9917 Add test to check new importmulti \"now\" value (Russell Yanofsky)\n442887f Require timestamps for importmulti keys (Russell Yanofsky)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/edc9e63c57992a839614dd2f9a54f77fdbffb6ab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/edc9e63c57992a839614dd2f9a54f77fdbffb6ab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/edc9e63c57992a839614dd2f9a54f77fdbffb6ab/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5"
      },
      {
        "sha": "266a8114cbe2a87a6c84d7690a7716a18d782c56",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/266a8114cbe2a87a6c84d7690a7716a18d782c56",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/266a8114cbe2a87a6c84d7690a7716a18d782c56"
      }
    ],
    "stats": {
      "total": 90,
      "additions": 77,
      "deletions": 13
    },
    "files": [
      {
        "sha": "8f60e63e2e50dd7ecc7c2f84b5aace5a68d83440",
        "filename": "qa/rpc-tests/import-rescan.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/edc9e63c57992a839614dd2f9a54f77fdbffb6ab/qa/rpc-tests/import-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/edc9e63c57992a839614dd2f9a54f77fdbffb6ab/qa/rpc-tests/import-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/import-rescan.py?ref=edc9e63c57992a839614dd2f9a54f77fdbffb6ab",
        "patch": "@@ -33,6 +33,7 @@ def call_import_rpc(call, data, address, scriptPubKey, pubkey, key, label, node,\n             \"scriptPubKey\": {\n                 \"address\": address\n             },\n+            \"timestamp\": \"now\",\n             \"pubkeys\": [pubkey] if data == Data.pub else [],\n             \"keys\": [key] if data == Data.priv else [],\n             \"label\": label,"
      },
      {
        "sha": "52e40d6c1cc3d07fe4c17649cf6f6d8741299d86",
        "filename": "qa/rpc-tests/importmulti.py",
        "status": "modified",
        "additions": 36,
        "deletions": 3,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/edc9e63c57992a839614dd2f9a54f77fdbffb6ab/qa/rpc-tests/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/edc9e63c57992a839614dd2f9a54f77fdbffb6ab/qa/rpc-tests/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/importmulti.py?ref=edc9e63c57992a839614dd2f9a54f77fdbffb6ab",
        "patch": "@@ -52,7 +52,8 @@ def run_test (self):\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n-            }\n+            },\n+            \"timestamp\": \"now\",\n         }])\n         assert_equal(result[0]['success'], True)\n         address_assert = self.nodes[1].validateaddress(address['address'])\n@@ -65,6 +66,7 @@ def run_test (self):\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n             \"internal\": True\n         }])\n         assert_equal(result[0]['success'], True)\n@@ -76,7 +78,8 @@ def run_test (self):\n         print(\"Should not import a scriptPubKey without internal flag\")\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n-            \"scriptPubKey\": address['scriptPubKey']\n+            \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n         }])\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -8)\n@@ -93,6 +96,7 @@ def run_test (self):\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n             },\n+            \"timestamp\": \"now\",\n             \"pubkeys\": [ address['pubkey'] ]\n         }])\n         assert_equal(result[0]['success'], True)\n@@ -106,6 +110,7 @@ def run_test (self):\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         request = [{\n             \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n             \"pubkeys\": [ address['pubkey'] ],\n             \"internal\": True\n         }]\n@@ -120,6 +125,7 @@ def run_test (self):\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         request = [{\n             \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n             \"pubkeys\": [ address['pubkey'] ]\n         }]\n         result = self.nodes[1].importmulti(request)\n@@ -133,16 +139,19 @@ def run_test (self):\n         # Address + Private key + !watchonly\n         print(\"Should import an address with private key\")\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n             },\n+            \"timestamp\": \"now\",\n             \"keys\": [ self.nodes[0].dumpprivkey(address['address']) ]\n         }])\n         assert_equal(result[0]['success'], True)\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], True)\n+        assert_equal(address_assert['timestamp'], timestamp)\n \n         # Address + Private key + watchonly\n         print(\"Should not import an address with private key and with watchonly\")\n@@ -151,6 +160,7 @@ def run_test (self):\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n             },\n+            \"timestamp\": \"now\",\n             \"keys\": [ self.nodes[0].dumpprivkey(address['address']) ],\n             \"watchonly\": True\n         }])\n@@ -166,6 +176,7 @@ def run_test (self):\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n             \"keys\": [ self.nodes[0].dumpprivkey(address['address']) ],\n             \"internal\": True\n         }])\n@@ -179,6 +190,7 @@ def run_test (self):\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n             \"keys\": [ self.nodes[0].dumpprivkey(address['address']) ]\n         }])\n         assert_equal(result[0]['success'], False)\n@@ -203,7 +215,8 @@ def run_test (self):\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": multi_sig_script['address']\n-            }\n+            },\n+            \"timestamp\": \"now\",\n         }])\n         assert_equal(result[0]['success'], True)\n         address_assert = self.nodes[1].validateaddress(multi_sig_script['address'])\n@@ -229,6 +242,7 @@ def run_test (self):\n             \"scriptPubKey\": {\n                 \"address\": multi_sig_script['address']\n             },\n+            \"timestamp\": \"now\",\n             \"redeemscript\": multi_sig_script['redeemScript']\n         }])\n         assert_equal(result[0]['success'], True)\n@@ -253,6 +267,7 @@ def run_test (self):\n             \"scriptPubKey\": {\n                 \"address\": multi_sig_script['address']\n             },\n+            \"timestamp\": \"now\",\n             \"redeemscript\": multi_sig_script['redeemScript'],\n             \"keys\": [ self.nodes[0].dumpprivkey(sig_address_1['address']), self.nodes[0].dumpprivkey(sig_address_2['address'])]\n         }])\n@@ -277,6 +292,7 @@ def run_test (self):\n             \"scriptPubKey\": {\n                 \"address\": multi_sig_script['address']\n             },\n+            \"timestamp\": \"now\",\n             \"redeemscript\": multi_sig_script['redeemScript'],\n             \"keys\": [ self.nodes[0].dumpprivkey(sig_address_1['address']), self.nodes[0].dumpprivkey(sig_address_2['address'])],\n             \"watchonly\": True\n@@ -294,6 +310,7 @@ def run_test (self):\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n             },\n+            \"timestamp\": \"now\",\n             \"pubkeys\": [ address2['pubkey'] ]\n         }])\n         assert_equal(result[0]['success'], False)\n@@ -310,6 +327,7 @@ def run_test (self):\n         address2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         request = [{\n             \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n             \"pubkeys\": [ address2['pubkey'] ],\n             \"internal\": True\n         }]\n@@ -330,6 +348,7 @@ def run_test (self):\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n             },\n+            \"timestamp\": \"now\",\n             \"keys\": [ self.nodes[0].dumpprivkey(address2['address']) ]\n         }])\n         assert_equal(result[0]['success'], False)\n@@ -346,6 +365,7 @@ def run_test (self):\n         address2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n             \"keys\": [ self.nodes[0].dumpprivkey(address2['address']) ],\n             \"internal\": True\n         }])\n@@ -356,5 +376,18 @@ def run_test (self):\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n \n+        # Bad or missing timestamps\n+        print(\"Should throw on invalid or missing timestamp values\")\n+        assert_raises_message(JSONRPCException, 'Missing required timestamp field for key',\n+            self.nodes[1].importmulti, [{\n+                \"scriptPubKey\": address['scriptPubKey'],\n+            }])\n+        assert_raises_message(JSONRPCException, 'Expected number or \"now\" timestamp value for key. got type string',\n+            self.nodes[1].importmulti, [{\n+                \"scriptPubKey\": address['scriptPubKey'],\n+                \"timestamp\": \"\",\n+            }])\n+\n+\n if __name__ == '__main__':\n     ImportMultiTest ().main ()"
      },
      {
        "sha": "25fad3c2e38e315efe901a9080f3499274e9179c",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/edc9e63c57992a839614dd2f9a54f77fdbffb6ab/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/edc9e63c57992a839614dd2f9a54f77fdbffb6ab/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=edc9e63c57992a839614dd2f9a54f77fdbffb6ab",
        "patch": "@@ -167,6 +167,7 @@ UniValue validateaddress(const JSONRPCRequest& request)\n             \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string) The hex value of the raw public key\\n\"\n             \"  \\\"iscompressed\\\" : true|false,  (boolean) If the address is compressed\\n\"\n             \"  \\\"account\\\" : \\\"account\\\"         (string) DEPRECATED. The account associated with the address, \\\"\\\" is the default account\\n\"\n+            \"  \\\"timestamp\\\" : timestamp,        (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n             \"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n             \"  \\\"hdmasterkeyid\\\" : \\\"<hash160>\\\" (string, optional) The Hash160 of the HD master pubkey\\n\"\n             \"}\\n\"\n@@ -204,10 +205,16 @@ UniValue validateaddress(const JSONRPCRequest& request)\n         if (pwalletMain && pwalletMain->mapAddressBook.count(dest))\n             ret.push_back(Pair(\"account\", pwalletMain->mapAddressBook[dest].name));\n         CKeyID keyID;\n-        if (pwalletMain && address.GetKeyID(keyID) && pwalletMain->mapKeyMetadata.count(keyID) && !pwalletMain->mapKeyMetadata[keyID].hdKeypath.empty())\n-        {\n-            ret.push_back(Pair(\"hdkeypath\", pwalletMain->mapKeyMetadata[keyID].hdKeypath));\n-            ret.push_back(Pair(\"hdmasterkeyid\", pwalletMain->mapKeyMetadata[keyID].hdMasterKeyID.GetHex()));\n+        if (pwalletMain) {\n+            const auto& meta = pwalletMain->mapKeyMetadata;\n+            auto it = address.GetKeyID(keyID) ? meta.find(keyID) : meta.end();\n+            if (it != meta.end()) {\n+                ret.push_back(Pair(\"timestamp\", it->second.nCreateTime));\n+                if (!it->second.hdKeypath.empty()) {\n+                    ret.push_back(Pair(\"hdkeypath\", it->second.hdKeypath));\n+                    ret.push_back(Pair(\"hdmasterkeyid\", it->second.hdMasterKeyID.GetHex()));\n+                }\n+            }\n         }\n #endif\n     }"
      },
      {
        "sha": "9310a320c76c4737eaabcadcde7eccc3c43f9033",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 6,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/edc9e63c57992a839614dd2f9a54f77fdbffb6ab/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/edc9e63c57992a839614dd2f9a54f77fdbffb6ab/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=edc9e63c57992a839614dd2f9a54f77fdbffb6ab",
        "patch": "@@ -640,7 +640,8 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n }\n \n \n-UniValue processImport(const UniValue& data) {\n+UniValue ProcessImport(const UniValue& data, const int64_t timestamp)\n+{\n     try {\n         bool success = false;\n \n@@ -659,7 +660,6 @@ UniValue processImport(const UniValue& data) {\n         const bool& internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n         const bool& watchOnly = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;\n         const string& label = data.exists(\"label\") && !internal ? data[\"label\"].get_str() : \"\";\n-        const int64_t& timestamp = data.exists(\"timestamp\") && data[\"timestamp\"].get_int64() > 1 ? data[\"timestamp\"].get_int64() : 1;\n \n         bool isScript = scriptPubKey.getType() == UniValue::VSTR;\n         bool isP2SH = strRedeemScript.length() > 0;\n@@ -958,6 +958,20 @@ UniValue processImport(const UniValue& data) {\n     }\n }\n \n+int64_t GetImportTimestamp(const UniValue& data, int64_t now)\n+{\n+    if (data.exists(\"timestamp\")) {\n+        const UniValue& timestamp = data[\"timestamp\"];\n+        if (timestamp.isNum()) {\n+            return timestamp.get_int64();\n+        } else if (timestamp.isStr() && timestamp.get_str() == \"now\") {\n+            return now;\n+        }\n+        throw JSONRPCError(RPC_TYPE_ERROR, strprintf(\"Expected number or \\\"now\\\" timestamp value for key. got type %s\", uvTypeName(timestamp.type())));\n+    }\n+    throw JSONRPCError(RPC_TYPE_ERROR, \"Missing required timestamp field for key\");\n+}\n+\n UniValue importmulti(const JSONRPCRequest& mainRequest)\n {\n     // clang-format off\n@@ -970,13 +984,17 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n             \"  [     (array of json objects)\\n\"\n             \"    {\\n\"\n             \"      \\\"scriptPubKey\\\": \\\"<script>\\\" | { \\\"address\\\":\\\"<address>\\\" }, (string / json, required) Type of scriptPubKey (string for script, json for address)\\n\"\n+            \"      \\\"timestamp\\\": timestamp | \\\"now\\\"                        , (integer / string, required) Creation time of the key in seconds since epoch (Jan 1 1970 GMT),\\n\"\n+            \"                                                              or the string \\\"now\\\" to substitute the current synced blockchain time. The timestamp of the oldest\\n\"\n+            \"                                                              key will determine how far back blockchain rescans need to begin for missing wallet transactions.\\n\"\n+            \"                                                              \\\"now\\\" can be specified to bypass scanning, for keys which are known to never have been used, and\\n\"\n+            \"                                                              0 can be specified to scan the entire blockchain.\\n\"\n             \"      \\\"redeemscript\\\": \\\"<script>\\\"                            , (string, optional) Allowed only if the scriptPubKey is a P2SH address or a P2SH scriptPubKey\\n\"\n             \"      \\\"pubkeys\\\": [\\\"<pubKey>\\\", ... ]                         , (array, optional) Array of strings giving pubkeys that must occur in the output or redeemscript\\n\"\n             \"      \\\"keys\\\": [\\\"<key>\\\", ... ]                               , (array, optional) Array of strings giving private keys whose corresponding public keys must occur in the output or redeemscript\\n\"\n             \"      \\\"internal\\\": <true>                                    , (boolean, optional, default: false) Stating whether matching outputs should be be treated as not incoming payments\\n\"\n             \"      \\\"watchonly\\\": <true>                                   , (boolean, optional, default: false) Stating whether matching outputs should be considered watched even when they're not spendable, only allowed if keys are empty\\n\"\n             \"      \\\"label\\\": <label>                                      , (string, optional, default: '') Label to assign to the address (aka account name, for now), only allowed with internal=false\\n\"\n-            \"      \\\"timestamp\\\": 1454686740,                                (integer, optional, default now) Timestamp\\n\"\n             \"    }\\n\"\n             \"  ,...\\n\"\n             \"  ]\\n\"\n@@ -1015,6 +1033,12 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n     EnsureWalletIsUnlocked();\n \n+    // Verify all timestamps are present before importing any keys.\n+    const int64_t now = chainActive.Tip() ? chainActive.Tip()->GetMedianTimePast() : 0;\n+    for (const UniValue& data : requests.getValues()) {\n+        GetImportTimestamp(data, now);\n+    }\n+\n     bool fRunScan = false;\n     const int64_t minimumTimestamp = 1;\n     int64_t nLowestTimestamp = 0;\n@@ -1028,7 +1052,8 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n     UniValue response(UniValue::VARR);\n \n     BOOST_FOREACH (const UniValue& data, requests.getValues()) {\n-        const UniValue result = processImport(data);\n+        const int64_t timestamp = std::max(GetImportTimestamp(data, now), minimumTimestamp);\n+        const UniValue result = ProcessImport(data, timestamp);\n         response.push_back(result);\n \n         if (!fRescan) {\n@@ -1041,8 +1066,6 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n         }\n \n         // Get the lowest timestamp.\n-        const int64_t& timestamp = data.exists(\"timestamp\") && data[\"timestamp\"].get_int64() > minimumTimestamp ? data[\"timestamp\"].get_int64() : minimumTimestamp;\n-\n         if (timestamp < nLowestTimestamp) {\n             nLowestTimestamp = timestamp;\n         }"
      }
    ]
  },
  {
    "sha": "b08656e343141a7262975e245f7c4cd70829a678",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMDg2NTZlMzQzMTQxYTcyNjI5NzVlMjQ1ZjdjNGNkNzA4MjlhNjc4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-14T13:34:20Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-14T13:35:15Z"
      },
      "message": "Merge #9715: Disconnect peers which we do not receive VERACKs from within 60 sec\n\n66f861a Add a test for P2P inactivity timeouts (Matt Corallo)\nb436f92 qa: Expose on-connection to mininode listeners (Matt Corallo)\n8aaba7a qa: mininode learns when a socket connects, not its first action (Matt Corallo)\n2cbd119 Disconnect peers which we do not receive VERACKs from within 60 sec (Matt Corallo)",
      "tree": {
        "sha": "1036c3a9956b65eb7ff9176f6f25bb0da835e8d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1036c3a9956b65eb7ff9176f6f25bb0da835e8d0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b08656e343141a7262975e245f7c4cd70829a678",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYoweTAAoJEHSBCwEjRsmmFqIIALaXgmeMaEAPjdfkixtAvjut\nZN94bUzFg36d0EDQpyTrmd6VJhd8OTaInLXc10lPUpPHBlIuKECU7Y6QtGu/eWKk\ny5IB+OL814tZ7ZsUkrc7OD9ZOvF10NRGkLI6q3oR/6+RCGX7OTVbRLxRJJQ15dpe\nFKgYmR8/kTtu65iV0F/6O4NFJBrZaxeAMSyI6FL05qVwfd+Ycu5w7puj/FgMGYva\n2JpvQ+4EIm16yQCr57jGEPwD3QGhcEQvXfiIDfrP4qDmsMd7Tho6KobIM0aztp+q\nc55P8eZwMruCoava3BYJ7la7XSQ/GwtDK/QVoTRXE9NtBROsX07dtMUsBEKkiIM=\n=gs7z\n-----END PGP SIGNATURE-----",
        "payload": "tree 1036c3a9956b65eb7ff9176f6f25bb0da835e8d0\nparent edc9e63c57992a839614dd2f9a54f77fdbffb6ab\nparent 66f861ade9db108f979a9bdf8d90e8fca028e2a3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487079260 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487079315 +0100\n\nMerge #9715: Disconnect peers which we do not receive VERACKs from within 60 sec\n\n66f861a Add a test for P2P inactivity timeouts (Matt Corallo)\nb436f92 qa: Expose on-connection to mininode listeners (Matt Corallo)\n8aaba7a qa: mininode learns when a socket connects, not its first action (Matt Corallo)\n2cbd119 Disconnect peers which we do not receive VERACKs from within 60 sec (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b08656e343141a7262975e245f7c4cd70829a678",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b08656e343141a7262975e245f7c4cd70829a678",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b08656e343141a7262975e245f7c4cd70829a678/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "edc9e63c57992a839614dd2f9a54f77fdbffb6ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/edc9e63c57992a839614dd2f9a54f77fdbffb6ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/edc9e63c57992a839614dd2f9a54f77fdbffb6ab"
      },
      {
        "sha": "66f861ade9db108f979a9bdf8d90e8fca028e2a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66f861ade9db108f979a9bdf8d90e8fca028e2a3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/66f861ade9db108f979a9bdf8d90e8fca028e2a3"
      }
    ],
    "stats": {
      "total": 147,
      "additions": 135,
      "deletions": 12
    },
    "files": [
      {
        "sha": "2cf4adb9a0431bb1e49b092bd40a4914b2e8b34a",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b08656e343141a7262975e245f7c4cd70829a678/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b08656e343141a7262975e245f7c4cd70829a678/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=b08656e343141a7262975e245f7c4cd70829a678",
        "patch": "@@ -168,6 +168,7 @@\n     # vv Tests less than 2m vv\n     'bip68-sequence.py',\n     'getblocktemplate_longpoll.py',\n+    'p2p-timeouts.py',\n     # vv Tests less than 60s vv\n     'bip9-softforks.py',\n     'p2p-feefilter.py',"
      },
      {
        "sha": "f1b190587d8efa7d43584507b13e390ca3bbe711",
        "filename": "qa/rpc-tests/p2p-timeouts.py",
        "status": "added",
        "additions": 103,
        "deletions": 0,
        "changes": 103,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b08656e343141a7262975e245f7c4cd70829a678/qa/rpc-tests/p2p-timeouts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b08656e343141a7262975e245f7c4cd70829a678/qa/rpc-tests/p2p-timeouts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-timeouts.py?ref=b08656e343141a7262975e245f7c4cd70829a678",
        "patch": "@@ -0,0 +1,103 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\" TimeoutsTest -- test various net timeouts (only in extended tests)\n+\n+- Create three bitcoind nodes:\n+\n+    no_verack_node - we never send a verack in response to their version\n+    no_version_node - we never send a version (only a ping)\n+    no_send_node - we never send any P2P message.\n+\n+- Start all three nodes\n+- Wait 1 second\n+- Assert that we're connected\n+- Send a ping to no_verack_node and no_version_node\n+- Wait 30 seconds\n+- Assert that we're still connected\n+- Send a ping to no_verack_node and no_version_node\n+- Wait 31 seconds\n+- Assert that we're no longer connected (timeout to receive version/verack is 60 seconds)\n+\"\"\"\n+\n+from time import sleep\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+class TestNode(SingleNodeConnCB):\n+    def __init__(self):\n+        SingleNodeConnCB.__init__(self)\n+        self.connected = False\n+        self.received_version = False\n+\n+    def on_open(self, conn):\n+        self.connected = True\n+\n+    def on_close(self, conn):\n+        self.connected = False\n+\n+    def on_version(self, conn, message):\n+        # Don't send a verack in response\n+        self.received_version = True\n+\n+class TimeoutsTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        self.nodes = []\n+\n+        # Start up node0 to be a version 1, pre-segwit node.\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, \n+                [[\"-debug\", \"-logtimemicros=1\"]])\n+\n+    def run_test(self):\n+        # Setup the p2p connections and start up the network thread.\n+        self.no_verack_node = TestNode() # never send verack\n+        self.no_version_node = TestNode() # never send version (just ping)\n+        self.no_send_node = TestNode() # never send anything\n+\n+        connections = []\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], self.no_verack_node))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], self.no_version_node, send_version=False))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], self.no_send_node, send_version=False))\n+        self.no_verack_node.add_connection(connections[0])\n+        self.no_version_node.add_connection(connections[1])\n+        self.no_send_node.add_connection(connections[2])\n+\n+        NetworkThread().start()  # Start up network handling in another thread\n+\n+        sleep(1)\n+\n+        assert(self.no_verack_node.connected)\n+        assert(self.no_version_node.connected)\n+        assert(self.no_send_node.connected)\n+\n+        ping_msg = msg_ping()\n+        connections[0].send_message(ping_msg)\n+        connections[1].send_message(ping_msg)\n+\n+        sleep(30)\n+\n+        assert(self.no_verack_node.received_version)\n+\n+        assert(self.no_verack_node.connected)\n+        assert(self.no_version_node.connected)\n+        assert(self.no_send_node.connected)\n+\n+        connections[0].send_message(ping_msg)\n+        connections[1].send_message(ping_msg)\n+\n+        sleep(31)\n+\n+        assert(not self.no_verack_node.connected)\n+        assert(not self.no_version_node.connected)\n+        assert(not self.no_send_node.connected)\n+\n+if __name__ == '__main__':\n+    TimeoutsTest().main()"
      },
      {
        "sha": "5b563c58ae1e1a17e50caa42f165a28fd3d739d7",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 26,
        "deletions": 12,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b08656e343141a7262975e245f7c4cd70829a678/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b08656e343141a7262975e245f7c4cd70829a678/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=b08656e343141a7262975e245f7c4cd70829a678",
        "patch": "@@ -1540,6 +1540,7 @@ def on_ping(self, conn, message):\n         if conn.ver_send > BIP0031_VERSION:\n             conn.send_message(msg_pong(message.nonce))\n     def on_reject(self, conn, message): pass\n+    def on_open(self, conn): pass\n     def on_close(self, conn): pass\n     def on_mempool(self, conn): pass\n     def on_pong(self, conn, message): pass\n@@ -1614,7 +1615,7 @@ class NodeConn(asyncore.dispatcher):\n         \"regtest\": b\"\\xfa\\xbf\\xb5\\xda\",   # regtest\n     }\n \n-    def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=NODE_NETWORK):\n+    def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=NODE_NETWORK, send_version=True):\n         asyncore.dispatcher.__init__(self, map=mininode_socket_map)\n         self.log = logging.getLogger(\"NodeConn(%s:%d)\" % (dstaddr, dstport))\n         self.dstaddr = dstaddr\n@@ -1631,14 +1632,16 @@ def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=NODE\n         self.disconnect = False\n         self.nServices = 0\n \n-        # stuff version msg into sendbuf\n-        vt = msg_version()\n-        vt.nServices = services\n-        vt.addrTo.ip = self.dstaddr\n-        vt.addrTo.port = self.dstport\n-        vt.addrFrom.ip = \"0.0.0.0\"\n-        vt.addrFrom.port = 0\n-        self.send_message(vt, True)\n+        if send_version:\n+            # stuff version msg into sendbuf\n+            vt = msg_version()\n+            vt.nServices = services\n+            vt.addrTo.ip = self.dstaddr\n+            vt.addrTo.port = self.dstport\n+            vt.addrFrom.ip = \"0.0.0.0\"\n+            vt.addrFrom.port = 0\n+            self.send_message(vt, True)\n+\n         print('MiniNode: Connecting to Bitcoin Node IP # ' + dstaddr + ':' \\\n             + str(dstport))\n \n@@ -1652,8 +1655,10 @@ def show_debug_msg(self, msg):\n         self.log.debug(msg)\n \n     def handle_connect(self):\n-        self.show_debug_msg(\"MiniNode: Connected & Listening: \\n\")\n-        self.state = \"connected\"\n+        if self.state != \"connected\":\n+            self.show_debug_msg(\"MiniNode: Connected & Listening: \\n\")\n+            self.state = \"connected\"\n+            self.cb.on_open(self)\n \n     def handle_close(self):\n         self.show_debug_msg(\"MiniNode: Closing Connection to %s:%d... \"\n@@ -1681,11 +1686,20 @@ def readable(self):\n \n     def writable(self):\n         with mininode_lock:\n+            pre_connection = self.state == \"connecting\"\n             length = len(self.sendbuf)\n-        return (length > 0)\n+        return (length > 0 or pre_connection)\n \n     def handle_write(self):\n         with mininode_lock:\n+            # asyncore does not expose socket connection, only the first read/write\n+            # event, thus we must check connection manually here to know when we\n+            # actually connect\n+            if self.state == \"connecting\":\n+                self.handle_connect()\n+            if not self.writable():\n+                return\n+\n             try:\n                 sent = self.send(self.sendbuf)\n             except:"
      },
      {
        "sha": "de5fc29693e8247ccc107ac0f211172942585158",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b08656e343141a7262975e245f7c4cd70829a678/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b08656e343141a7262975e245f7c4cd70829a678/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=b08656e343141a7262975e245f7c4cd70829a678",
        "patch": "@@ -1388,6 +1388,11 @@ void CConnman::ThreadSocketHandler()\n                     LogPrintf(\"ping timeout: %fs\\n\", 0.000001 * (GetTimeMicros() - pnode->nPingUsecStart));\n                     pnode->fDisconnect = true;\n                 }\n+                else if (!pnode->fSuccessfullyConnected)\n+                {\n+                    LogPrintf(\"version handshake timeout from %d\\n\", pnode->id);\n+                    pnode->fDisconnect = true;\n+                }\n             }\n         }\n         {"
      }
    ]
  },
  {
    "sha": "e87ce95fbdc6ca6ef822c978d98b2acba5948ee1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplODdjZTk1ZmJkYzZjYTZlZjgyMmM5NzhkOThiMmFjYmE1OTQ4ZWUx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-14T13:37:14Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-14T13:42:29Z"
      },
      "message": "Merge #9720: net: fix banning and disallow sending messages before receiving verack\n\nd943491 qa: add a test to detect leaky p2p messages (Cory Fields)\n8650bbb qa: Expose on-connection to mininode listeners (Matt Corallo)\n5b5e4f8 qa: mininode learns when a socket connects, not its first action (Matt Corallo)\ncbfc5a6 net: require a verack before responding to anything else (Cory Fields)\n8502e7a net: parse reject earlier (Cory Fields)\nc45b9fb net: correctly ban before the handshake is complete (Cory Fields)",
      "tree": {
        "sha": "b255d343837257c0998a57a064fe2575ab81bfaa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b255d343837257c0998a57a064fe2575ab81bfaa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e87ce95fbdc6ca6ef822c978d98b2acba5948ee1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYowlFAAoJEHSBCwEjRsmmf4oH/jQwD9F9Y/4DsxKGfGtLRFgl\n2lw5WswxuH+vMUt3pvrLjti0L5DstNpeF/WlGxVqenNBF2rxUwggUt9iNke7sTvp\n7vld19WSpUeYUfLlhTalaZ60VE9KvstZWWYyj9JISU8DwpAr/onOTBAhna8JkIZ3\nxNmJLIxsaIZhe3iXe0RohgBwe9K/r+l3tJYxFxiB0IiFyq6oyYe+ccAOzjDkO0NO\nABvcuZvYH3v/KAhQyFdHaHIA6NAEapfpfwcrr52S8OBNdJ9w1eBj+VH4F1AeizZz\nDBWMpLvBoUFyR+YhJbF8HKN82wVKKGGMfPM71RvY1MfkX5qZEIZ1Q+yIbvR4Mfw=\n=kFKV\n-----END PGP SIGNATURE-----",
        "payload": "tree b255d343837257c0998a57a064fe2575ab81bfaa\nparent b08656e343141a7262975e245f7c4cd70829a678\nparent d9434918d277bba534933ebc8c63ba81e613f603\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487079434 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487079749 +0100\n\nMerge #9720: net: fix banning and disallow sending messages before receiving verack\n\nd943491 qa: add a test to detect leaky p2p messages (Cory Fields)\n8650bbb qa: Expose on-connection to mininode listeners (Matt Corallo)\n5b5e4f8 qa: mininode learns when a socket connects, not its first action (Matt Corallo)\ncbfc5a6 net: require a verack before responding to anything else (Cory Fields)\n8502e7a net: parse reject earlier (Cory Fields)\nc45b9fb net: correctly ban before the handshake is complete (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e87ce95fbdc6ca6ef822c978d98b2acba5948ee1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e87ce95fbdc6ca6ef822c978d98b2acba5948ee1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e87ce95fbdc6ca6ef822c978d98b2acba5948ee1/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b08656e343141a7262975e245f7c4cd70829a678",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b08656e343141a7262975e245f7c4cd70829a678",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b08656e343141a7262975e245f7c4cd70829a678"
      },
      {
        "sha": "d9434918d277bba534933ebc8c63ba81e613f603",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9434918d277bba534933ebc8c63ba81e613f603",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d9434918d277bba534933ebc8c63ba81e613f603"
      }
    ],
    "stats": {
      "total": 263,
      "additions": 214,
      "deletions": 49
    },
    "files": [
      {
        "sha": "20ab0fdd1de300632402b430b82b98626b15c3dc",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e87ce95fbdc6ca6ef822c978d98b2acba5948ee1/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e87ce95fbdc6ca6ef822c978d98b2acba5948ee1/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=e87ce95fbdc6ca6ef822c978d98b2acba5948ee1",
        "patch": "@@ -154,6 +154,7 @@\n     'bumpfee.py',\n     'rpcnamedargs.py',\n     'listsinceblock.py',\n+    'p2p-leaktests.py',\n ]\n if ENABLE_ZMQ:\n     testScripts.append('zmq_test.py')"
      },
      {
        "sha": "41ca84d779890cded199129d7739fbbd348a894c",
        "filename": "qa/rpc-tests/p2p-leaktests.py",
        "status": "added",
        "additions": 145,
        "deletions": 0,
        "changes": 145,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e87ce95fbdc6ca6ef822c978d98b2acba5948ee1/qa/rpc-tests/p2p-leaktests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e87ce95fbdc6ca6ef822c978d98b2acba5948ee1/qa/rpc-tests/p2p-leaktests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-leaktests.py?ref=e87ce95fbdc6ca6ef822c978d98b2acba5948ee1",
        "patch": "@@ -0,0 +1,145 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+'''\n+Test for message sending before handshake completion\n+\n+A node should never send anything other than VERSION/VERACK/REJECT until it's\n+received a VERACK.\n+\n+This test connects to a node and sends it a few messages, trying to intice it\n+into sending us something it shouldn't.\n+'''\n+\n+banscore = 10\n+\n+class CLazyNode(NodeConnCB):\n+    def __init__(self):\n+        self.connection = None\n+        self.unexpected_msg = False\n+        self.connected = False\n+        super().__init__()\n+\n+    def add_connection(self, conn):\n+        self.connection = conn\n+\n+    def send_message(self, message):\n+        self.connection.send_message(message)\n+\n+    def bad_message(self, message):\n+        self.unexpected_msg = True\n+        print(\"should not have received message: %s\" % message.command)\n+\n+    def on_open(self, conn):\n+        self.connected = True\n+\n+    def on_version(self, conn, message): self.bad_message(message)\n+    def on_verack(self, conn, message): self.bad_message(message)\n+    def on_reject(self, conn, message): self.bad_message(message)\n+    def on_inv(self, conn, message): self.bad_message(message)\n+    def on_addr(self, conn, message): self.bad_message(message)\n+    def on_alert(self, conn, message): self.bad_message(message)\n+    def on_getdata(self, conn, message): self.bad_message(message)\n+    def on_getblocks(self, conn, message): self.bad_message(message)\n+    def on_tx(self, conn, message): self.bad_message(message)\n+    def on_block(self, conn, message): self.bad_message(message)\n+    def on_getaddr(self, conn, message): self.bad_message(message)\n+    def on_headers(self, conn, message): self.bad_message(message)\n+    def on_getheaders(self, conn, message): self.bad_message(message)\n+    def on_ping(self, conn, message): self.bad_message(message)\n+    def on_mempool(self, conn): self.bad_message(message)\n+    def on_pong(self, conn, message): self.bad_message(message)\n+    def on_feefilter(self, conn, message): self.bad_message(message)\n+    def on_sendheaders(self, conn, message): self.bad_message(message)\n+    def on_sendcmpct(self, conn, message): self.bad_message(message)\n+    def on_cmpctblock(self, conn, message): self.bad_message(message)\n+    def on_getblocktxn(self, conn, message): self.bad_message(message)\n+    def on_blocktxn(self, conn, message): self.bad_message(message)\n+\n+# Node that never sends a version. We'll use this to send a bunch of messages\n+# anyway, and eventually get disconnected.\n+class CNodeNoVersionBan(CLazyNode):\n+    def __init__(self):\n+        super().__init__()\n+\n+    # send a bunch of veracks without sending a message. This should get us disconnected.\n+    # NOTE: implementation-specific check here. Remove if bitcoind ban behavior changes\n+    def on_open(self, conn):\n+        super().on_open(conn)\n+        for i in range(banscore):\n+            self.send_message(msg_verack())\n+\n+    def on_reject(self, conn, message): pass\n+\n+# Node that never sends a version. This one just sits idle and hopes to receive\n+# any message (it shouldn't!)\n+class CNodeNoVersionIdle(CLazyNode):\n+    def __init__(self):\n+        super().__init__()\n+\n+# Node that sends a version but not a verack.\n+class CNodeNoVerackIdle(CLazyNode):\n+    def __init__(self):\n+        self.version_received = False\n+        super().__init__()\n+\n+    def on_reject(self, conn, message): pass\n+    def on_verack(self, conn, message): pass\n+    # When version is received, don't reply with a verack. Instead, see if the\n+    # node will give us a message that it shouldn't. This is not an exhaustive\n+    # list!\n+    def on_version(self, conn, message):\n+        self.version_received = True\n+        conn.send_message(msg_ping())\n+        conn.send_message(msg_getaddr())\n+\n+class P2PLeakTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 1\n+    def setup_network(self):\n+        extra_args = [['-debug', '-banscore='+str(banscore)]\n+                      for i in range(self.num_nodes)]\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+\n+    def run_test(self):\n+        no_version_bannode = CNodeNoVersionBan()\n+        no_version_idlenode = CNodeNoVersionIdle()\n+        no_verack_idlenode = CNodeNoVerackIdle()\n+\n+        connections = []\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], no_version_bannode, send_version=False))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], no_version_idlenode, send_version=False))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], no_verack_idlenode))\n+        no_version_bannode.add_connection(connections[0])\n+        no_version_idlenode.add_connection(connections[1])\n+        no_verack_idlenode.add_connection(connections[2])\n+\n+        NetworkThread().start()  # Start up network handling in another thread\n+\n+        assert(wait_until(lambda: no_version_bannode.connected and no_version_idlenode.connected and no_verack_idlenode.version_received, timeout=10))\n+\n+        # Mine a block and make sure that it's not sent to the connected nodes\n+        self.nodes[0].generate(1)\n+\n+        #Give the node enough time to possibly leak out a message\n+        time.sleep(5)\n+\n+        #This node should have been banned\n+        assert(no_version_bannode.connection.state == \"closed\")\n+\n+        [conn.disconnect_node() for conn in connections]\n+\n+        # Make sure no unexpected messages came in\n+        assert(no_version_bannode.unexpected_msg == False)\n+        assert(no_version_idlenode.unexpected_msg == False)\n+        assert(no_verack_idlenode.unexpected_msg == False)\n+\n+if __name__ == '__main__':\n+    P2PLeakTest().main()"
      },
      {
        "sha": "3ec1a1c27d28e6fcb8cbbd1ba0fff01e92a23599",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 68,
        "deletions": 49,
        "changes": 117,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e87ce95fbdc6ca6ef822c978d98b2acba5948ee1/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e87ce95fbdc6ca6ef822c978d98b2acba5948ee1/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=e87ce95fbdc6ca6ef822c978d98b2acba5948ee1",
        "patch": "@@ -1190,8 +1190,31 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         }\n     }\n \n+    if (strCommand == NetMsgType::REJECT)\n+    {\n+        if (fDebug) {\n+            try {\n+                std::string strMsg; unsigned char ccode; std::string strReason;\n+                vRecv >> LIMITED_STRING(strMsg, CMessageHeader::COMMAND_SIZE) >> ccode >> LIMITED_STRING(strReason, MAX_REJECT_MESSAGE_LENGTH);\n \n-    if (strCommand == NetMsgType::VERSION)\n+                std::ostringstream ss;\n+                ss << strMsg << \" code \" << itostr(ccode) << \": \" << strReason;\n+\n+                if (strMsg == NetMsgType::BLOCK || strMsg == NetMsgType::TX)\n+                {\n+                    uint256 hash;\n+                    vRecv >> hash;\n+                    ss << \": hash \" << hash.ToString();\n+                }\n+                LogPrint(\"net\", \"Reject %s\\n\", SanitizeString(ss.str()));\n+            } catch (const std::ios_base::failure&) {\n+                // Avoid feedback loops by preventing reject messages from triggering a new reject message.\n+                LogPrint(\"net\", \"Unparseable reject message received\\n\");\n+            }\n+        }\n+    }\n+\n+    else if (strCommand == NetMsgType::VERSION)\n     {\n         // Each connection can only send one version message\n         if (pfrom->nVersion != 0)\n@@ -1402,6 +1425,13 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         pfrom->fSuccessfullyConnected = true;\n     }\n \n+    else if (!pfrom->fSuccessfullyConnected)\n+    {\n+        // Must have a verack message before anything else\n+        LOCK(cs_main);\n+        Misbehaving(pfrom->GetId(), 1);\n+        return false;\n+    }\n \n     else if (strCommand == NetMsgType::ADDR)\n     {\n@@ -2549,31 +2579,6 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         pfrom->fRelayTxes = true;\n     }\n \n-\n-    else if (strCommand == NetMsgType::REJECT)\n-    {\n-        if (fDebug) {\n-            try {\n-                std::string strMsg; unsigned char ccode; std::string strReason;\n-                vRecv >> LIMITED_STRING(strMsg, CMessageHeader::COMMAND_SIZE) >> ccode >> LIMITED_STRING(strReason, MAX_REJECT_MESSAGE_LENGTH);\n-\n-                std::ostringstream ss;\n-                ss << strMsg << \" code \" << itostr(ccode) << \": \" << strReason;\n-\n-                if (strMsg == NetMsgType::BLOCK || strMsg == NetMsgType::TX)\n-                {\n-                    uint256 hash;\n-                    vRecv >> hash;\n-                    ss << \": hash \" << hash.ToString();\n-                }\n-                LogPrint(\"net\", \"Reject %s\\n\", SanitizeString(ss.str()));\n-            } catch (const std::ios_base::failure&) {\n-                // Avoid feedback loops by preventing reject messages from triggering a new reject message.\n-                LogPrint(\"net\", \"Unparseable reject message received\\n\");\n-            }\n-        }\n-    }\n-\n     else if (strCommand == NetMsgType::FEEFILTER) {\n         CAmount newFeeFilter = 0;\n         vRecv >> newFeeFilter;\n@@ -2601,6 +2606,36 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n     return true;\n }\n \n+static bool SendRejectsAndCheckIfBanned(CNode* pnode, CConnman& connman)\n+{\n+    AssertLockHeld(cs_main);\n+    CNodeState &state = *State(pnode->GetId());\n+\n+    BOOST_FOREACH(const CBlockReject& reject, state.rejects) {\n+        connman.PushMessage(pnode, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, (std::string)NetMsgType::BLOCK, reject.chRejectCode, reject.strRejectReason, reject.hashBlock));\n+    }\n+    state.rejects.clear();\n+\n+    if (state.fShouldBan) {\n+        state.fShouldBan = false;\n+        if (pnode->fWhitelisted)\n+            LogPrintf(\"Warning: not punishing whitelisted peer %s!\\n\", pnode->addr.ToString());\n+        else if (pnode->fAddnode)\n+            LogPrintf(\"Warning: not punishing addnoded peer %s!\\n\", pnode->addr.ToString());\n+        else {\n+            pnode->fDisconnect = true;\n+            if (pnode->addr.IsLocal())\n+                LogPrintf(\"Warning: not banning local peer %s!\\n\", pnode->addr.ToString());\n+            else\n+            {\n+                connman.Ban(pnode->addr, BanReasonNodeMisbehaving);\n+            }\n+        }\n+        return true;\n+    }\n+    return false;\n+}\n+\n bool ProcessMessages(CNode* pfrom, CConnman& connman, const std::atomic<bool>& interruptMsgProc)\n {\n     const CChainParams& chainparams = Params();\n@@ -2711,8 +2746,12 @@ bool ProcessMessages(CNode* pfrom, CConnman& connman, const std::atomic<bool>& i\n             PrintExceptionContinue(NULL, \"ProcessMessages()\");\n         }\n \n-        if (!fRet)\n+        if (!fRet) {\n             LogPrintf(\"%s(%s, %u bytes) FAILED peer=%d\\n\", __func__, SanitizeString(strCommand), nMessageSize, pfrom->id);\n+        }\n+\n+        LOCK(cs_main);\n+        SendRejectsAndCheckIfBanned(pfrom, connman);\n \n     return fMoreWork;\n }\n@@ -2778,30 +2817,10 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n         if (!lockMain)\n             return true;\n \n+        if (SendRejectsAndCheckIfBanned(pto, connman))\n+            return true;\n         CNodeState &state = *State(pto->GetId());\n \n-        BOOST_FOREACH(const CBlockReject& reject, state.rejects)\n-            connman.PushMessage(pto, msgMaker.Make(NetMsgType::REJECT, (std::string)NetMsgType::BLOCK, reject.chRejectCode, reject.strRejectReason, reject.hashBlock));\n-        state.rejects.clear();\n-\n-        if (state.fShouldBan) {\n-            state.fShouldBan = false;\n-            if (pto->fWhitelisted)\n-                LogPrintf(\"Warning: not punishing whitelisted peer %s!\\n\", pto->addr.ToString());\n-            else if (pto->fAddnode)\n-                LogPrintf(\"Warning: not punishing addnoded peer %s!\\n\", pto->addr.ToString());\n-            else {\n-                pto->fDisconnect = true;\n-                if (pto->addr.IsLocal())\n-                    LogPrintf(\"Warning: not banning local peer %s!\\n\", pto->addr.ToString());\n-                else\n-                {\n-                    connman.Ban(pto->addr, BanReasonNodeMisbehaving);\n-                }\n-                return true;\n-            }\n-        }\n-\n         // Address refresh broadcast\n         int64_t nNow = GetTimeMicros();\n         if (!IsInitialBlockDownload() && pto->nNextLocalAddrSend < nNow) {"
      }
    ]
  },
  {
    "sha": "a441db01b527431a3d7ba169f1afd9c3bc04748f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNDQxZGIwMWI1Mjc0MzFhM2Q3YmExNjlmMWFmZDljM2JjMDQ3NDhm",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-02-14T14:56:52Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-02-14T14:57:02Z"
      },
      "message": "Merge #9755: Bugfix: Qt/Options: Restore persistent \"restart required\" notice\n\n0b4f273 Bugfix: Qt/Options: Restore persistent \"restart required\" notice (Luke Dashjr)",
      "tree": {
        "sha": "05d37f68cd0d5454adc5c35e77904c47c2288281",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/05d37f68cd0d5454adc5c35e77904c47c2288281"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a441db01b527431a3d7ba169f1afd9c3bc04748f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAlijGr4ACgkQKdS8tkFv\nU+z/6Q//Wqpq+0ui5qCZahVT9rerXye+dPJiMLI2JvcjxsNqQ+H4sEyfIKjL4LWS\nDZyhmubvTxf8+LuyDqu+DKljNwJ2atsY31oCiv5VJ5mEv64EpO0xjyPkX133ovmW\nL+wEVemsro5/67Q3kyRjxpa9Tb4eAmzm+lR3M7RNM4VCr1XzLyso1osn+lwYPpnZ\n+UDEM5/n3sHWvmex51i/CL8lftNb/xlKWlFzzYQFKYYFn6b6uT+rws6fk0LCCzd7\nev7bhcTiy+O8IP21WTn8KGkasRdY2Y2WlgN4DBXeY8DJt9d5oUiP6nEhemgfWFuz\nntJYuyD9y5RymEAawM7xyqomJ80MHv0xuJvDZNnnm6hf3aqfwnHZKjYQ118GNTNh\nOnfQzuR4DADLMCaK3vNvbDGOXoXIk3APiCbijqpFX9q7UZz2crz802oTwRpNcVop\nRDceSjl+dZaNwudxUrgCbFiKzXiWznduiN/6VBLewEnsKkNsFNylebJ2klf2tu3h\nS4+SdqauIG9vZWdRYQjy6mQNpzCOgQxHYxajGx4+B6fvp8DblQpDVRK1I7LWlYdk\nbZn9Z9QTvhUcdVa7CrMmq9eG5/pbyX5pOyLw/L91g7lTktDo17jVmVRS4vbWugpH\nc6fHZd7mGrGTo9Bk/u6PlD+LGsAS6aoX2I5d6L+SCKg+GoGcza0=\n=P6en\n-----END PGP SIGNATURE-----",
        "payload": "tree 05d37f68cd0d5454adc5c35e77904c47c2288281\nparent e87ce95fbdc6ca6ef822c978d98b2acba5948ee1\nparent 0b4f273e9cf7166dbd103e116b5d991e359e673d\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1487084212 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1487084222 +0100\n\nMerge #9755: Bugfix: Qt/Options: Restore persistent \"restart required\" notice\n\n0b4f273 Bugfix: Qt/Options: Restore persistent \"restart required\" notice (Luke Dashjr)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a441db01b527431a3d7ba169f1afd9c3bc04748f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a441db01b527431a3d7ba169f1afd9c3bc04748f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a441db01b527431a3d7ba169f1afd9c3bc04748f/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e87ce95fbdc6ca6ef822c978d98b2acba5948ee1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e87ce95fbdc6ca6ef822c978d98b2acba5948ee1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e87ce95fbdc6ca6ef822c978d98b2acba5948ee1"
      },
      {
        "sha": "0b4f273e9cf7166dbd103e116b5d991e359e673d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b4f273e9cf7166dbd103e116b5d991e359e673d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0b4f273e9cf7166dbd103e116b5d991e359e673d"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7ff00b1e9eeb1f2ecae3b4516513e0c259efdbd2",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a441db01b527431a3d7ba169f1afd9c3bc04748f/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a441db01b527431a3d7ba169f1afd9c3bc04748f/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=a441db01b527431a3d7ba169f1afd9c3bc04748f",
        "patch": "@@ -277,6 +277,9 @@ void OptionsDialog::showRestartWarning(bool fPersistent)\n void OptionsDialog::clearStatusLabel()\n {\n     ui->statusLabel->clear();\n+    if (model && model->isRestartRequired()) {\n+        showRestartWarning(true);\n+    }\n }\n \n void OptionsDialog::updateProxyValidationState()\n@@ -286,7 +289,7 @@ void OptionsDialog::updateProxyValidationState()\n     if (pUiProxyIp->isValid() && (!ui->proxyPort->isEnabled() || ui->proxyPort->text().toInt() > 0) && (!ui->proxyPortTor->isEnabled() || ui->proxyPortTor->text().toInt() > 0))\n     {\n         setOkButtonState(otherProxyWidget->isValid()); //only enable ok button if both proxys are valid\n-        ui->statusLabel->clear();\n+        clearStatusLabel();\n     }\n     else\n     {"
      }
    ]
  },
  {
    "sha": "0c9b9b7d646333cb3212f1bea98e629c416cbe42",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYzliOWI3ZDY0NjMzM2NiMzIxMmYxYmVhOThlNjI5YzQxNmNiZTQy",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-02-06T14:16:18Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-02-14T19:19:40Z"
      },
      "message": "[trivial] Fix recently introduced typos in comments",
      "tree": {
        "sha": "1367ac5ad5c472b827962e95046aef1cecf2f102",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1367ac5ad5c472b827962e95046aef1cecf2f102"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0c9b9b7d646333cb3212f1bea98e629c416cbe42",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c9b9b7d646333cb3212f1bea98e629c416cbe42",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0c9b9b7d646333cb3212f1bea98e629c416cbe42",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c9b9b7d646333cb3212f1bea98e629c416cbe42/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "870cd2b58aba30ecd57c624ab1f1724b3235cb4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/870cd2b58aba30ecd57c624ab1f1724b3235cb4d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/870cd2b58aba30ecd57c624ab1f1724b3235cb4d"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "cf265180ffae56b7de88410316ec736ed62a65f1",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c9b9b7d646333cb3212f1bea98e629c416cbe42/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c9b9b7d646333cb3212f1bea98e629c416cbe42/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=0c9b9b7d646333cb3212f1bea98e629c416cbe42",
        "patch": "@@ -934,7 +934,7 @@ bool AppInitParameterInteraction()\n     int64_t nMempoolSizeMin = GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000 * 40;\n     if (nMempoolSizeMax < 0 || nMempoolSizeMax < nMempoolSizeMin)\n         return InitError(strprintf(_(\"-maxmempool must be at least %d MB\"), std::ceil(nMempoolSizeMin / 1000000.0)));\n-    // incremental relay fee sets the minimimum feerate increase necessary for BIP 125 replacement in the mempool\n+    // incremental relay fee sets the minimum feerate increase necessary for BIP 125 replacement in the mempool\n     // and the amount the mempool min fee increases above the feerate of txs evicted due to mempool limiting.\n     if (IsArgSet(\"-incrementalrelayfee\"))\n     {"
      },
      {
        "sha": "29bdb376821751612aae0da7b08d56844daf9917",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c9b9b7d646333cb3212f1bea98e629c416cbe42/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c9b9b7d646333cb3212f1bea98e629c416cbe42/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=0c9b9b7d646333cb3212f1bea98e629c416cbe42",
        "patch": "@@ -24,7 +24,7 @@ class CRPCConvertParam\n };\n \n /**\n- * Specifiy a (method, idx, name) here if the argument is a non-string RPC\n+ * Specify a (method, idx, name) here if the argument is a non-string RPC\n  * argument and needs to be converted from JSON.\n  *\n  * @note Parameter indexes start from 0."
      },
      {
        "sha": "45a5896da1b78ca44c2476cf701456b3b1755ae7",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c9b9b7d646333cb3212f1bea98e629c416cbe42/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c9b9b7d646333cb3212f1bea98e629c416cbe42/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=0c9b9b7d646333cb3212f1bea98e629c416cbe42",
        "patch": "@@ -435,7 +435,7 @@ UniValue setmocktime(const JSONRPCRequest& request)\n     // this could have an effect on mempool time-based eviction, as well as\n     // IsCurrentForFeeEstimation() and IsInitialBlockDownload().\n     // TODO: figure out the right way to synchronize around mocktime, and\n-    // ensure all callsites of GetTime() are accessing this safely.\n+    // ensure all call sites of GetTime() are accessing this safely.\n     LOCK(cs_main);\n \n     RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM));"
      },
      {
        "sha": "cc3290c63157097887b5c3978e7644afd08555f4",
        "filename": "src/utiltime.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c9b9b7d646333cb3212f1bea98e629c416cbe42/src/utiltime.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c9b9b7d646333cb3212f1bea98e629c416cbe42/src/utiltime.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utiltime.h?ref=0c9b9b7d646333cb3212f1bea98e629c416cbe42",
        "patch": "@@ -11,7 +11,7 @@\n \n /**\n  * GetTimeMicros() and GetTimeMillis() both return the system time, but in\n- * different units. GetTime() returns the sytem time in seconds, but also\n+ * different units. GetTime() returns the system time in seconds, but also\n  * supports mocktime, where the time can be specified by the user, eg for\n  * testing (eg with the setmocktime rpc, or -mocktime argument).\n  *"
      },
      {
        "sha": "144b5d5c0cf5daba451ed4bec0fadb453c693619",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c9b9b7d646333cb3212f1bea98e629c416cbe42/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c9b9b7d646333cb3212f1bea98e629c416cbe42/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=0c9b9b7d646333cb3212f1bea98e629c416cbe42",
        "patch": "@@ -1429,7 +1429,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n         // Helps prevent CPU exhaustion attacks.\n \n         // Skip script verification when connecting blocks under the\n-        // assumedvalid block. Assuming the assumedvalid block is valid this\n+        // assumevalid block. Assuming the assumevalid block is valid this\n         // is safe because block merkle hashes are still computed and checked,\n         // Of course, if an assumed valid block is invalid due to false scriptSigs\n         // this optimization would allow an invalid chain to be accepted.\n@@ -1771,7 +1771,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n                 pindexBestHeader->GetAncestor(pindex->nHeight) == pindex &&\n                 pindexBestHeader->nChainWork >= UintToArith256(chainparams.GetConsensus().nMinimumChainWork)) {\n                 // This block is a member of the assumed verified chain and an ancestor of the best header.\n-                // The equivalent time check discourages hashpower from extorting the network via DOS attack\n+                // The equivalent time check discourages hash power from extorting the network via DOS attack\n                 //  into accepting an invalid block through telling users they must manually set assumevalid.\n                 //  Requiring a software change or burying the invalid block, regardless of the setting, makes\n                 //  it hard to hide the implication of the demand.  This also avoids having release candidates\n@@ -2486,12 +2486,12 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n         bool fInitialDownload;\n         {\n             LOCK(cs_main);\n-            { // TODO: Tempoarily ensure that mempool removals are notified before\n+            { // TODO: Temporarily ensure that mempool removals are notified before\n               // connected transactions.  This shouldn't matter, but the abandoned\n               // state of transactions in our wallet is currently cleared when we\n               // receive another notification and there is a race condition where\n               // notification of a connected conflict might cause an outside process\n-              // to abandon a transaction and then have it inadvertantly cleared by\n+              // to abandon a transaction and then have it inadvertently cleared by\n               // the notification that the conflicted transaction was evicted.\n             MemPoolConflictRemovalTracker mrt(mempool);\n             CBlockIndex *pindexOldTip = chainActive.Tip();\n@@ -2520,7 +2520,7 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n \n             } // MemPoolConflictRemovalTracker destroyed and conflict evictions are notified\n \n-            // Transactions in the connnected block are notified\n+            // Transactions in the connected block are notified\n             for (const auto& pair : connectTrace.blocksConnected) {\n                 assert(pair.second);\n                 const CBlock& block = *(pair.second);"
      },
      {
        "sha": "a494eb6990fee9db508b77cc26b26a7504613982",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c9b9b7d646333cb3212f1bea98e629c416cbe42/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c9b9b7d646333cb3212f1bea98e629c416cbe42/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=0c9b9b7d646333cb3212f1bea98e629c416cbe42",
        "patch": "@@ -50,7 +50,7 @@ class CValidationInterface {\n struct CMainSignals {\n     /** Notifies listeners of updated block chain tip */\n     boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    /** A posInBlock value for SyncTransaction calls for tranactions not\n+    /** A posInBlock value for SyncTransaction calls for transactions not\n      * included in connected blocks such as transactions removed from mempool,\n      * accepted to mempool or appearing in disconnected blocks.*/\n     static const int SYNC_TRANSACTION_NOT_IN_BLOCK = -1;"
      },
      {
        "sha": "01005bf3380c2c9bcb27474e975e5696ce70d8c9",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c9b9b7d646333cb3212f1bea98e629c416cbe42/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c9b9b7d646333cb3212f1bea98e629c416cbe42/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=0c9b9b7d646333cb3212f1bea98e629c416cbe42",
        "patch": "@@ -2725,7 +2725,7 @@ UniValue bumpfee(const JSONRPCRequest& request)\n             \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n             \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n             \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n-            \"                         still be replacable in practice, for example if it has unconfirmed ancestors which\\n\"\n+            \"                         still be replaceable in practice, for example if it has unconfirmed ancestors which\\n\"\n             \"                         are replaceable).\\n\"\n             \"   }\\n\"\n             \"\\nResult:\\n\""
      },
      {
        "sha": "49b943d87b8bf1655d6c972d46afb6700c9bd8e0",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c9b9b7d646333cb3212f1bea98e629c416cbe42/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c9b9b7d646333cb3212f1bea98e629c416cbe42/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=0c9b9b7d646333cb3212f1bea98e629c416cbe42",
        "patch": "@@ -1012,7 +1012,7 @@ bool CWallet::LoadToWallet(const CWalletTx& wtxIn)\n  * TODO: One exception to this is that the abandoned state is cleared under the\n  * assumption that any further notification of a transaction that was considered\n  * abandoned is an indication that it is not safe to be considered abandoned.\n- * Abandoned state should probably be more carefuly tracked via different\n+ * Abandoned state should probably be more carefully tracked via different\n  * posInBlock signals or by checking mempool presence when necessary.\n  */\n bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate)"
      }
    ]
  },
  {
    "sha": "4c69d683f22ad8bc310c901b50b8892da7a3c70c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YzY5ZDY4M2YyMmFkOGJjMzEwYzkwMWI1MGI4ODkyZGE3YTNjNzBj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-15T08:26:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-15T08:27:47Z"
      },
      "message": "Merge #9553: Use z = std::max(x - y, 0) instead of z = x - y; if (z < 0) z = 0;\n\na47da4b Use z = std::max(x - y, 0); instead of z = x - y; if (z < 0) z = 0; (practicalswift)",
      "tree": {
        "sha": "dd6fa87b3f96b2bf3bd39cfb3598a1dfea2f3c74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dd6fa87b3f96b2bf3bd39cfb3598a1dfea2f3c74"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4c69d683f22ad8bc310c901b50b8892da7a3c70c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYpBEDAAoJEHSBCwEjRsmm87EH+QHWHP5PQaRvFIEAWaSFOHQy\n104xNZhFE9JNHUzN+yzEqfGRpbzI34dX2IV0XEUqj2EZjkiQ+vON+tbVsg2E6sQr\ngpXCI7DacdJew9CoyJLN5aANHhcifPiFzcMH5Xaf7UV017GsE8Yhlt1YgsxPgJCc\nt7Xt46KBYkyArG3jnftnVclSlMLdQb6kSw2bhpRBDQt9Xm3u8BpaeczdxzxiEY88\ntdJInMp6S4X3DMoNcvVBy+0N8yoNjnt75oAnYM5CTXbW2a+4pktt3NMyVvQqwcqb\nnu9RwEbThdHFY9y5I8S02vKvZ6br3tDHz6FeFOGQbKDMozP5vxn5UioL+yERCA4=\n=HSpr\n-----END PGP SIGNATURE-----",
        "payload": "tree dd6fa87b3f96b2bf3bd39cfb3598a1dfea2f3c74\nparent a441db01b527431a3d7ba169f1afd9c3bc04748f\nparent a47da4b6fecaba81dafe777b25be24e04a428e37\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487147172 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487147267 +0100\n\nMerge #9553: Use z = std::max(x - y, 0) instead of z = x - y; if (z < 0) z = 0;\n\na47da4b Use z = std::max(x - y, 0); instead of z = x - y; if (z < 0) z = 0; (practicalswift)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c69d683f22ad8bc310c901b50b8892da7a3c70c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4c69d683f22ad8bc310c901b50b8892da7a3c70c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c69d683f22ad8bc310c901b50b8892da7a3c70c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a441db01b527431a3d7ba169f1afd9c3bc04748f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a441db01b527431a3d7ba169f1afd9c3bc04748f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a441db01b527431a3d7ba169f1afd9c3bc04748f"
      },
      {
        "sha": "a47da4b6fecaba81dafe777b25be24e04a428e37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a47da4b6fecaba81dafe777b25be24e04a428e37",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a47da4b6fecaba81dafe777b25be24e04a428e37"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 2,
      "deletions": 8
    },
    "files": [
      {
        "sha": "b6ab4c6305184ca31ebe27282bb58a38a3ec7f3a",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c69d683f22ad8bc310c901b50b8892da7a3c70c/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c69d683f22ad8bc310c901b50b8892da7a3c70c/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=4c69d683f22ad8bc310c901b50b8892da7a3c70c",
        "patch": "@@ -53,11 +53,7 @@ bool CAddrInfo::IsTerrible(int64_t nNow) const\n double CAddrInfo::GetChance(int64_t nNow) const\n {\n     double fChance = 1.0;\n-\n-    int64_t nSinceLastTry = nNow - nLastTry;\n-\n-    if (nSinceLastTry < 0)\n-        nSinceLastTry = 0;\n+    int64_t nSinceLastTry = std::max<int64_t>(nNow - nLastTry, 0);\n \n     // deprioritize very recent attempts away\n     if (nSinceLastTry < 60 * 10)"
      },
      {
        "sha": "d4fd8bd37262cf9025737de0e27b5c29a7c42fb4",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c69d683f22ad8bc310c901b50b8892da7a3c70c/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c69d683f22ad8bc310c901b50b8892da7a3c70c/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=4c69d683f22ad8bc310c901b50b8892da7a3c70c",
        "patch": "@@ -563,9 +563,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         }\n \n         // after fee\n-        nAfterFee = nAmount - nPayFee;\n-        if (nAfterFee < 0)\n-            nAfterFee = 0;\n+        nAfterFee = std::max<CAmount>(nAmount - nPayFee, 0);\n     }\n \n     // actually update labels"
      }
    ]
  },
  {
    "sha": "d8e8b06bd0659b35e51effe35400408ec15bb09b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOGU4YjA2YmQwNjU5YjM1ZTUxZWZmZTM1NDAwNDA4ZWMxNWJiMDli",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-15T10:12:00Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-15T10:13:48Z"
      },
      "message": "Merge #9108: Use importmulti timestamp when importing watch only keys (on top of #9682)\n\na80f98b Use importmulti timestamp when importing watch only keys (Russell Yanofsky)\na58370e Dedup nTimeFirstKey update logic (Russell Yanofsky)",
      "tree": {
        "sha": "d19a69d8d9cea2f4ad3180e05802f116959ef4c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d19a69d8d9cea2f4ad3180e05802f116959ef4c3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8e8b06bd0659b35e51effe35400408ec15bb09b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYpCncAAoJEHSBCwEjRsmmWF0H/ic74RImVZB0Hh/PCCbPmJ2n\nri2N5CbVMiQGpApNrKjn9fOt3u86o+Hhu6fCJRnAl7QPno4LTydEXahn8WhMOyY3\nrAWmQNlhQDnyPODVKbIOTRAOSuCmbovBMPj8myS5r9vojfizhUVQZI+ZXmow+JLg\nZUDzNBo1CtUeUdioz2amW4/vqBZK0DUWhXyAZ9Q1IzM5nfV5m2+zvrUMSrbOP1G0\n9PJqkg5HJvHM0rpsynlYudtiscL/j0ZLgAxqOTY6a7qakQjkzNJcgoKYp0BAsQNM\n1UOsfP1P8hmP3+EwAyopJ1tY3LDjmDuW5ERHl/WwjaVFkgTD+cuuNe88jK376Zo=\n=u7eT\n-----END PGP SIGNATURE-----",
        "payload": "tree d19a69d8d9cea2f4ad3180e05802f116959ef4c3\nparent 4c69d683f22ad8bc310c901b50b8892da7a3c70c\nparent a80f98b1c7a49432dc53d18d0fb51ac334de96be\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487153520 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487153628 +0100\n\nMerge #9108: Use importmulti timestamp when importing watch only keys (on top of #9682)\n\na80f98b Use importmulti timestamp when importing watch only keys (Russell Yanofsky)\na58370e Dedup nTimeFirstKey update logic (Russell Yanofsky)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8e8b06bd0659b35e51effe35400408ec15bb09b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d8e8b06bd0659b35e51effe35400408ec15bb09b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8e8b06bd0659b35e51effe35400408ec15bb09b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4c69d683f22ad8bc310c901b50b8892da7a3c70c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c69d683f22ad8bc310c901b50b8892da7a3c70c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4c69d683f22ad8bc310c901b50b8892da7a3c70c"
      },
      {
        "sha": "a80f98b1c7a49432dc53d18d0fb51ac334de96be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a80f98b1c7a49432dc53d18d0fb51ac334de96be",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a80f98b1c7a49432dc53d18d0fb51ac334de96be"
      }
    ],
    "stats": {
      "total": 187,
      "additions": 130,
      "deletions": 57
    },
    "files": [
      {
        "sha": "02a932e737f06aa1be7cec27ba98f246299ce578",
        "filename": "qa/rpc-tests/importmulti.py",
        "status": "modified",
        "additions": 32,
        "deletions": 1,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8e8b06bd0659b35e51effe35400408ec15bb09b/qa/rpc-tests/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8e8b06bd0659b35e51effe35400408ec15bb09b/qa/rpc-tests/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/importmulti.py?ref=d8e8b06bd0659b35e51effe35400408ec15bb09b",
        "patch": "@@ -20,6 +20,7 @@ def run_test (self):\n         print (\"Mining blocks...\")\n         self.nodes[0].generate(1)\n         self.nodes[1].generate(1)\n+        timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n \n         # keyword definition\n         PRIV_KEY = 'privkey'\n@@ -59,6 +60,9 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal(address_assert['timestamp'], timestamp)\n+        watchonly_address = address['address']\n+        watchonly_timestamp = timestamp\n \n \n         # ScriptPubKey + internal\n@@ -73,6 +77,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal(address_assert['timestamp'], timestamp)\n \n         # ScriptPubKey + !internal\n         print(\"Should not import a scriptPubKey without internal flag\")\n@@ -87,6 +92,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal('timestamp' in address_assert, False)\n \n \n         # Address + Public key + !Internal\n@@ -103,6 +109,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal(address_assert['timestamp'], timestamp)\n \n \n         # ScriptPubKey + Public key + internal\n@@ -119,6 +126,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal(address_assert['timestamp'], timestamp)\n \n         # ScriptPubKey + Public key + !internal\n         print(\"Should not import a scriptPubKey without internal and with public key\")\n@@ -135,11 +143,11 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal('timestamp' in address_assert, False)\n \n         # Address + Private key + !watchonly\n         print(\"Should import an address with private key\")\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n@@ -170,6 +178,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal('timestamp' in address_assert, False)\n \n         # ScriptPubKey + Private key + internal\n         print(\"Should import a scriptPubKey with internal and with private key\")\n@@ -184,6 +193,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], True)\n+        assert_equal(address_assert['timestamp'], timestamp)\n \n         # ScriptPubKey + Private key + !internal\n         print(\"Should not import a scriptPubKey without internal and with private key\")\n@@ -199,6 +209,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal('timestamp' in address_assert, False)\n \n \n         # P2SH address\n@@ -209,6 +220,7 @@ def run_test (self):\n         self.nodes[1].generate(100)\n         transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n         self.nodes[1].generate(1)\n+        timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n         transaction = self.nodes[1].gettransaction(transactionid)\n \n         print(\"Should import a p2sh\")\n@@ -222,6 +234,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(multi_sig_script['address'])\n         assert_equal(address_assert['isscript'], True)\n         assert_equal(address_assert['iswatchonly'], True)\n+        assert_equal(address_assert['timestamp'], timestamp)\n         p2shunspent = self.nodes[1].listunspent(0,999999, [multi_sig_script['address']])[0]\n         assert_equal(p2shunspent['spendable'], False)\n         assert_equal(p2shunspent['solvable'], False)\n@@ -235,6 +248,7 @@ def run_test (self):\n         self.nodes[1].generate(100)\n         transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n         self.nodes[1].generate(1)\n+        timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n         transaction = self.nodes[1].gettransaction(transactionid)\n \n         print(\"Should import a p2sh with respective redeem script\")\n@@ -246,6 +260,8 @@ def run_test (self):\n             \"redeemscript\": multi_sig_script['redeemScript']\n         }])\n         assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].validateaddress(multi_sig_script['address'])\n+        assert_equal(address_assert['timestamp'], timestamp)\n \n         p2shunspent = self.nodes[1].listunspent(0,999999, [multi_sig_script['address']])[0]\n         assert_equal(p2shunspent['spendable'], False)\n@@ -260,6 +276,7 @@ def run_test (self):\n         self.nodes[1].generate(100)\n         transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n         self.nodes[1].generate(1)\n+        timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n         transaction = self.nodes[1].gettransaction(transactionid)\n \n         print(\"Should import a p2sh with respective redeem script and private keys\")\n@@ -272,6 +289,8 @@ def run_test (self):\n             \"keys\": [ self.nodes[0].dumpprivkey(sig_address_1['address']), self.nodes[0].dumpprivkey(sig_address_2['address'])]\n         }])\n         assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].validateaddress(multi_sig_script['address'])\n+        assert_equal(address_assert['timestamp'], timestamp)\n \n         p2shunspent = self.nodes[1].listunspent(0,999999, [multi_sig_script['address']])[0]\n         assert_equal(p2shunspent['spendable'], False)\n@@ -319,6 +338,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal('timestamp' in address_assert, False)\n \n \n         # ScriptPubKey + Public key + internal + Wrong pubkey\n@@ -338,6 +358,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal('timestamp' in address_assert, False)\n \n \n         # Address + Private key + !watchonly + Wrong private key\n@@ -357,6 +378,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal('timestamp' in address_assert, False)\n \n \n         # ScriptPubKey + Private key + internal + Wrong private key\n@@ -375,6 +397,15 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal('timestamp' in address_assert, False)\n+\n+        # restart nodes to check for proper serialization/deserialization of watch only address\n+        stop_nodes(self.nodes)\n+        self.nodes = start_nodes(2, self.options.tmpdir)\n+        address_assert = self.nodes[1].validateaddress(watchonly_address)\n+        assert_equal(address_assert['iswatchonly'], True)\n+        assert_equal(address_assert['ismine'], False)\n+        assert_equal(address_assert['timestamp'], watchonly_timestamp);\n \n         # Bad or missing timestamps\n         print(\"Should throw on invalid or missing timestamp values\")"
      },
      {
        "sha": "6fd50127bd5b3bb915e9e784d8d201227ddcaa67",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8e8b06bd0659b35e51effe35400408ec15bb09b/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8e8b06bd0659b35e51effe35400408ec15bb09b/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=d8e8b06bd0659b35e51effe35400408ec15bb09b",
        "patch": "@@ -208,6 +208,9 @@ UniValue validateaddress(const JSONRPCRequest& request)\n         if (pwalletMain) {\n             const auto& meta = pwalletMain->mapKeyMetadata;\n             auto it = address.GetKeyID(keyID) ? meta.find(keyID) : meta.end();\n+            if (it == meta.end()) {\n+                it = meta.find(CScriptID(scriptPubKey));\n+            }\n             if (it != meta.end()) {\n                 ret.push_back(Pair(\"timestamp\", it->second.nCreateTime));\n                 if (!it->second.hdKeypath.empty()) {"
      },
      {
        "sha": "0a3225937e1b2be773ee7aafedfdb6c22afc1e20",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 18,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8e8b06bd0659b35e51effe35400408ec15bb09b/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8e8b06bd0659b35e51effe35400408ec15bb09b/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=d8e8b06bd0659b35e51effe35400408ec15bb09b",
        "patch": "@@ -143,7 +143,7 @@ UniValue importprivkey(const JSONRPCRequest& request)\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n \n         // whenever a key is imported, we need to scan the whole chain\n-        pwalletMain->nTimeFirstKey = 1; // 0 would be considered 'no value'\n+        pwalletMain->UpdateTimeFirstKey(1);\n \n         if (fRescan) {\n             pwalletMain->ScanForWalletTransactions(chainActive.Genesis(), true);\n@@ -161,7 +161,7 @@ void ImportScript(const CScript& script, const string& strLabel, bool isRedeemSc\n \n     pwalletMain->MarkDirty();\n \n-    if (!pwalletMain->HaveWatchOnly(script) && !pwalletMain->AddWatchOnly(script))\n+    if (!pwalletMain->HaveWatchOnly(script) && !pwalletMain->AddWatchOnly(script, 0 /* nCreateTime */))\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n \n     if (isRedeemScript) {\n@@ -500,8 +500,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n     while (pindex && pindex->pprev && pindex->GetBlockTime() > nTimeBegin - 7200)\n         pindex = pindex->pprev;\n \n-    if (!pwalletMain->nTimeFirstKey || nTimeBegin < pwalletMain->nTimeFirstKey)\n-        pwalletMain->nTimeFirstKey = nTimeBegin;\n+    pwalletMain->UpdateTimeFirstKey(nTimeBegin);\n \n     LogPrintf(\"Rescanning last %i blocks\\n\", chainActive.Height() - pindex->nHeight + 1);\n     pwalletMain->ScanForWalletTransactions(pindex);\n@@ -576,15 +575,17 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     if (!file.is_open())\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot open wallet dump file\");\n \n-    std::map<CKeyID, int64_t> mapKeyBirth;\n+    std::map<CTxDestination, int64_t> mapKeyBirth;\n     std::set<CKeyID> setKeyPool;\n     pwalletMain->GetKeyBirthTimes(mapKeyBirth);\n     pwalletMain->GetAllReserveKeys(setKeyPool);\n \n     // sort time/key pairs\n     std::vector<std::pair<int64_t, CKeyID> > vKeyBirth;\n-    for (std::map<CKeyID, int64_t>::const_iterator it = mapKeyBirth.begin(); it != mapKeyBirth.end(); it++) {\n-        vKeyBirth.push_back(std::make_pair(it->second, it->first));\n+    for (const auto& entry : mapKeyBirth) {\n+        if (const CKeyID* keyID = boost::get<CKeyID>(&entry.first)) { // set and test\n+            vKeyBirth.push_back(std::make_pair(entry.second, *keyID));\n+        }\n     }\n     mapKeyBirth.clear();\n     std::sort(vKeyBirth.begin(), vKeyBirth.end());\n@@ -721,7 +722,7 @@ UniValue ProcessImport(const UniValue& data, const int64_t timestamp)\n \n             pwalletMain->MarkDirty();\n \n-            if (!pwalletMain->HaveWatchOnly(redeemScript) && !pwalletMain->AddWatchOnly(redeemScript)) {\n+            if (!pwalletMain->HaveWatchOnly(redeemScript) && !pwalletMain->AddWatchOnly(redeemScript, timestamp)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n \n@@ -738,7 +739,7 @@ UniValue ProcessImport(const UniValue& data, const int64_t timestamp)\n \n             pwalletMain->MarkDirty();\n \n-            if (!pwalletMain->HaveWatchOnly(redeemDestination) && !pwalletMain->AddWatchOnly(redeemDestination)) {\n+            if (!pwalletMain->HaveWatchOnly(redeemDestination) && !pwalletMain->AddWatchOnly(redeemDestination, timestamp)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n \n@@ -782,9 +783,7 @@ UniValue ProcessImport(const UniValue& data, const int64_t timestamp)\n                         throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n                     }\n \n-                    if (timestamp < pwalletMain->nTimeFirstKey) {\n-                        pwalletMain->nTimeFirstKey = timestamp;\n-                    }\n+                    pwalletMain->UpdateTimeFirstKey(timestamp);\n                 }\n             }\n \n@@ -833,7 +832,7 @@ UniValue ProcessImport(const UniValue& data, const int64_t timestamp)\n \n                 pwalletMain->MarkDirty();\n \n-                if (!pwalletMain->HaveWatchOnly(pubKeyScript) && !pwalletMain->AddWatchOnly(pubKeyScript)) {\n+                if (!pwalletMain->HaveWatchOnly(pubKeyScript) && !pwalletMain->AddWatchOnly(pubKeyScript, timestamp)) {\n                     throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n                 }\n \n@@ -851,7 +850,7 @@ UniValue ProcessImport(const UniValue& data, const int64_t timestamp)\n \n                 pwalletMain->MarkDirty();\n \n-                if (!pwalletMain->HaveWatchOnly(scriptRawPubKey) && !pwalletMain->AddWatchOnly(scriptRawPubKey)) {\n+                if (!pwalletMain->HaveWatchOnly(scriptRawPubKey) && !pwalletMain->AddWatchOnly(scriptRawPubKey, timestamp)) {\n                     throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n                 }\n \n@@ -912,9 +911,7 @@ UniValue ProcessImport(const UniValue& data, const int64_t timestamp)\n                     throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n                 }\n \n-                if (timestamp < pwalletMain->nTimeFirstKey) {\n-                    pwalletMain->nTimeFirstKey = timestamp;\n-                }\n+                pwalletMain->UpdateTimeFirstKey(timestamp);\n \n                 success = true;\n             }\n@@ -927,7 +924,7 @@ UniValue ProcessImport(const UniValue& data, const int64_t timestamp)\n \n                 pwalletMain->MarkDirty();\n \n-                if (!pwalletMain->HaveWatchOnly(script) && !pwalletMain->AddWatchOnly(script)) {\n+                if (!pwalletMain->HaveWatchOnly(script) && !pwalletMain->AddWatchOnly(script, timestamp)) {\n                     throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n                 }\n "
      },
      {
        "sha": "f8f5a9306dc1c631301489adac23f3e8e771d024",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 14,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8e8b06bd0659b35e51effe35400408ec15bb09b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8e8b06bd0659b35e51effe35400408ec15bb09b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d8e8b06bd0659b35e51effe35400408ec15bb09b",
        "patch": "@@ -113,8 +113,7 @@ CPubKey CWallet::GenerateNewKey()\n     assert(secret.VerifyPubKey(pubkey));\n \n     mapKeyMetadata[pubkey.GetID()] = metadata;\n-    if (!nTimeFirstKey || nCreationTime < nTimeFirstKey)\n-        nTimeFirstKey = nCreationTime;\n+    UpdateTimeFirstKey(nCreationTime);\n \n     if (!AddKeyPubKey(secret, pubkey))\n         throw std::runtime_error(std::string(__func__) + \": AddKey failed\");\n@@ -207,13 +206,11 @@ bool CWallet::AddCryptedKey(const CPubKey &vchPubKey,\n     return false;\n }\n \n-bool CWallet::LoadKeyMetadata(const CPubKey &pubkey, const CKeyMetadata &meta)\n+bool CWallet::LoadKeyMetadata(const CTxDestination& keyID, const CKeyMetadata &meta)\n {\n     AssertLockHeld(cs_wallet); // mapKeyMetadata\n-    if (meta.nCreateTime && (!nTimeFirstKey || meta.nCreateTime < nTimeFirstKey))\n-        nTimeFirstKey = meta.nCreateTime;\n-\n-    mapKeyMetadata[pubkey.GetID()] = meta;\n+    UpdateTimeFirstKey(meta.nCreateTime);\n+    mapKeyMetadata[keyID] = meta;\n     return true;\n }\n \n@@ -222,6 +219,18 @@ bool CWallet::LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigne\n     return CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret);\n }\n \n+void CWallet::UpdateTimeFirstKey(int64_t nCreateTime)\n+{\n+    AssertLockHeld(cs_wallet);\n+    if (nCreateTime <= 1) {\n+        // Cannot determine birthday information, so set the wallet birthday to\n+        // the beginning of time.\n+        nTimeFirstKey = 1;\n+    } else if (!nTimeFirstKey || nCreateTime < nTimeFirstKey) {\n+        nTimeFirstKey = nCreateTime;\n+    }\n+}\n+\n bool CWallet::AddCScript(const CScript& redeemScript)\n {\n     if (!CCryptoKeyStore::AddCScript(redeemScript))\n@@ -247,15 +256,22 @@ bool CWallet::LoadCScript(const CScript& redeemScript)\n     return CCryptoKeyStore::AddCScript(redeemScript);\n }\n \n-bool CWallet::AddWatchOnly(const CScript &dest)\n+bool CWallet::AddWatchOnly(const CScript& dest)\n {\n     if (!CCryptoKeyStore::AddWatchOnly(dest))\n         return false;\n-    nTimeFirstKey = 1; // No birthday information for watch-only keys.\n+    const CKeyMetadata& meta = mapKeyMetadata[CScriptID(dest)];\n+    UpdateTimeFirstKey(meta.nCreateTime);\n     NotifyWatchonlyChanged(true);\n     if (!fFileBacked)\n         return true;\n-    return CWalletDB(strWalletFile).WriteWatchOnly(dest);\n+    return CWalletDB(strWalletFile).WriteWatchOnly(dest, meta);\n+}\n+\n+bool CWallet::AddWatchOnly(const CScript& dest, int64_t nCreateTime)\n+{\n+    mapKeyMetadata[CScriptID(dest)].nCreateTime = nCreateTime;\n+    return AddWatchOnly(dest);\n }\n \n bool CWallet::RemoveWatchOnly(const CScript &dest)\n@@ -3416,14 +3432,16 @@ class CAffectedKeysVisitor : public boost::static_visitor<void> {\n     void operator()(const CNoDestination &none) {}\n };\n \n-void CWallet::GetKeyBirthTimes(std::map<CKeyID, int64_t> &mapKeyBirth) const {\n+void CWallet::GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) const {\n     AssertLockHeld(cs_wallet); // mapKeyMetadata\n     mapKeyBirth.clear();\n \n     // get birth times for keys with metadata\n-    for (std::map<CKeyID, CKeyMetadata>::const_iterator it = mapKeyMetadata.begin(); it != mapKeyMetadata.end(); it++)\n-        if (it->second.nCreateTime)\n-            mapKeyBirth[it->first] = it->second.nCreateTime;\n+    for (const auto& entry : mapKeyMetadata) {\n+        if (entry.second.nCreateTime) {\n+            mapKeyBirth[entry.first] = entry.second.nCreateTime;\n+        }\n+    }\n \n     // map in which we'll infer heights of other keys\n     CBlockIndex *pindexMax = chainActive[std::max(0, chainActive.Height() - 144)]; // the tip can be reorganized; use a 144-block safety margin"
      },
      {
        "sha": "990c3bdf4196a48224dbc3e7736a5feecbaa8ffc",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 21,
        "deletions": 6,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8e8b06bd0659b35e51effe35400408ec15bb09b/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8e8b06bd0659b35e51effe35400408ec15bb09b/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=d8e8b06bd0659b35e51effe35400408ec15bb09b",
        "patch": "@@ -611,6 +611,20 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool fFileBacked;\n \n     std::set<int64_t> setKeyPool;\n+\n+    int64_t nTimeFirstKey;\n+\n+    /**\n+     * Private version of AddWatchOnly method which does not accept a\n+     * timestamp, and which will reset the wallet's nTimeFirstKey value to 1 if\n+     * the watch key did not previously have a timestamp associated with it.\n+     * Because this is an inherited virtual method, it is accessible despite\n+     * being marked private, but it is marked private anyway to encourage use\n+     * of the other AddWatchOnly which accepts a timestamp and sets\n+     * nTimeFirstKey more intelligently for more efficient rescans.\n+     */\n+    bool AddWatchOnly(const CScript& dest) override;\n+\n public:\n     /*\n      * Main wallet lock.\n@@ -635,7 +649,9 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n             mapKeyMetadata[keyid] = CKeyMetadata(keypool.nTime);\n     }\n \n-    std::map<CKeyID, CKeyMetadata> mapKeyMetadata;\n+    // Map from Key ID (for regular keys) or Script ID (for watch-only keys) to\n+    // key metadata.\n+    std::map<CTxDestination, CKeyMetadata> mapKeyMetadata;\n \n     typedef std::map<unsigned int, CMasterKey> MasterKeyMap;\n     MasterKeyMap mapMasterKeys;\n@@ -688,8 +704,6 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     std::set<COutPoint> setLockedCoins;\n \n-    int64_t nTimeFirstKey;\n-\n     const CWalletTx* GetWalletTx(const uint256& hash) const;\n \n     //! check whether we are allowed to upgrade (or already support) to the named feature\n@@ -727,9 +741,10 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     //! Adds a key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadKey(const CKey& key, const CPubKey &pubkey) { return CCryptoKeyStore::AddKeyPubKey(key, pubkey); }\n     //! Load metadata (used by LoadWallet)\n-    bool LoadKeyMetadata(const CPubKey &pubkey, const CKeyMetadata &metadata);\n+    bool LoadKeyMetadata(const CTxDestination& pubKey, const CKeyMetadata &metadata);\n \n     bool LoadMinVersion(int nVersion) { AssertLockHeld(cs_wallet); nWalletVersion = nVersion; nWalletMaxVersion = std::max(nWalletMaxVersion, nVersion); return true; }\n+    void UpdateTimeFirstKey(int64_t nCreateTime);\n \n     //! Adds an encrypted key to the store, and saves it to disk.\n     bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n@@ -748,7 +763,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool GetDestData(const CTxDestination &dest, const std::string &key, std::string *value) const;\n \n     //! Adds a watch-only address to the store, and saves it to disk.\n-    bool AddWatchOnly(const CScript &dest);\n+    bool AddWatchOnly(const CScript& dest, int64_t nCreateTime);\n     bool RemoveWatchOnly(const CScript &dest);\n     //! Adds a watch-only address to the store, without saving it to disk (used by LoadWallet)\n     bool LoadWatchOnly(const CScript &dest);\n@@ -757,7 +772,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase, const SecureString& strNewWalletPassphrase);\n     bool EncryptWallet(const SecureString& strWalletPassphrase);\n \n-    void GetKeyBirthTimes(std::map<CKeyID, int64_t> &mapKeyBirth) const;\n+    void GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) const;\n \n     /** \n      * Increment the next transaction order id"
      },
      {
        "sha": "106a59d5623046e21fa3c9513b50044a9a474a18",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 17,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8e8b06bd0659b35e51effe35400408ec15bb09b/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8e8b06bd0659b35e51effe35400408ec15bb09b/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=d8e8b06bd0659b35e51effe35400408ec15bb09b",
        "patch": "@@ -120,15 +120,19 @@ bool CWalletDB::WriteCScript(const uint160& hash, const CScript& redeemScript)\n     return Write(std::make_pair(std::string(\"cscript\"), hash), *(const CScriptBase*)(&redeemScript), false);\n }\n \n-bool CWalletDB::WriteWatchOnly(const CScript &dest)\n+bool CWalletDB::WriteWatchOnly(const CScript &dest, const CKeyMetadata& keyMeta)\n {\n     nWalletDBUpdateCounter++;\n+    if (!Write(std::make_pair(std::string(\"watchmeta\"), *(const CScriptBase*)(&dest)), keyMeta))\n+        return false;\n     return Write(std::make_pair(std::string(\"watchs\"), *(const CScriptBase*)(&dest)), '1');\n }\n \n bool CWalletDB::EraseWatchOnly(const CScript &dest)\n {\n     nWalletDBUpdateCounter++;\n+    if (!Erase(std::make_pair(std::string(\"watchmeta\"), *(const CScriptBase*)(&dest))))\n+        return false;\n     return Erase(std::make_pair(std::string(\"watchs\"), *(const CScriptBase*)(&dest)));\n }\n \n@@ -259,14 +263,15 @@ class CWalletScanState {\n public:\n     unsigned int nKeys;\n     unsigned int nCKeys;\n+    unsigned int nWatchKeys;\n     unsigned int nKeyMeta;\n     bool fIsEncrypted;\n     bool fAnyUnordered;\n     int nFileVersion;\n     vector<uint256> vWalletUpgrade;\n \n     CWalletScanState() {\n-        nKeys = nCKeys = nKeyMeta = 0;\n+        nKeys = nCKeys = nWatchKeys = nKeyMeta = 0;\n         fIsEncrypted = false;\n         fAnyUnordered = false;\n         nFileVersion = 0;\n@@ -348,16 +353,13 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n         }\n         else if (strType == \"watchs\")\n         {\n+            wss.nWatchKeys++;\n             CScript script;\n             ssKey >> *(CScriptBase*)(&script);\n             char fYes;\n             ssValue >> fYes;\n             if (fYes == '1')\n                 pwallet->LoadWatchOnly(script);\n-\n-            // Watch-only addresses have no birthday information for now,\n-            // so set the wallet birthday to the beginning of time.\n-            pwallet->nTimeFirstKey = 1;\n         }\n         else if (strType == \"key\" || strType == \"wkey\")\n         {\n@@ -458,20 +460,27 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             }\n             wss.fIsEncrypted = true;\n         }\n-        else if (strType == \"keymeta\")\n+        else if (strType == \"keymeta\" || strType == \"watchmeta\")\n         {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n+            CTxDestination keyID;\n+            if (strType == \"keymeta\")\n+            {\n+              CPubKey vchPubKey;\n+              ssKey >> vchPubKey;\n+              keyID = vchPubKey.GetID();\n+            }\n+            else if (strType == \"watchmeta\")\n+            {\n+              CScript script;\n+              ssKey >> *(CScriptBase*)(&script);\n+              keyID = CScriptID(script);\n+            }\n+\n             CKeyMetadata keyMeta;\n             ssValue >> keyMeta;\n             wss.nKeyMeta++;\n \n-            pwallet->LoadKeyMetadata(vchPubKey, keyMeta);\n-\n-            // find earliest key creation time, as wallet birthday\n-            if (!pwallet->nTimeFirstKey ||\n-                (keyMeta.nCreateTime < pwallet->nTimeFirstKey))\n-                pwallet->nTimeFirstKey = keyMeta.nCreateTime;\n+            pwallet->LoadKeyMetadata(keyID, keyMeta);\n         }\n         else if (strType == \"defaultkey\")\n         {\n@@ -625,8 +634,8 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n            wss.nKeys, wss.nCKeys, wss.nKeyMeta, wss.nKeys + wss.nCKeys);\n \n     // nTimeFirstKey is only reliable if all keys have metadata\n-    if ((wss.nKeys + wss.nCKeys) != wss.nKeyMeta)\n-        pwallet->nTimeFirstKey = 1; // 0 would be considered 'no value'\n+    if ((wss.nKeys + wss.nCKeys + wss.nWatchKeys) != wss.nKeyMeta)\n+        pwallet->UpdateTimeFirstKey(1);\n \n     BOOST_FOREACH(uint256 hash, wss.vWalletUpgrade)\n         WriteTx(pwallet->mapWallet[hash]);"
      },
      {
        "sha": "c7c65465df9a8fafb104c7a1e3875af71e60d1c8",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8e8b06bd0659b35e51effe35400408ec15bb09b/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8e8b06bd0659b35e51effe35400408ec15bb09b/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=d8e8b06bd0659b35e51effe35400408ec15bb09b",
        "patch": "@@ -135,7 +135,7 @@ class CWalletDB : public CDB\n \n     bool WriteCScript(const uint160& hash, const CScript& redeemScript);\n \n-    bool WriteWatchOnly(const CScript &script);\n+    bool WriteWatchOnly(const CScript &script, const CKeyMetadata &keymeta);\n     bool EraseWatchOnly(const CScript &script);\n \n     bool WriteBestBlock(const CBlockLocator& locator);"
      }
    ]
  },
  {
    "sha": "6c5427d24ca18ce01e46242876e24f68a9c72cc3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YzU0MjdkMjRjYTE4Y2UwMWU0NjI0Mjg3NmUyNGY2OGE5YzcyY2Mz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-15T10:31:28Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-15T10:31:28Z"
      },
      "message": "wallet: Prevent \"overrides a member function but is not marked 'override'\" warnings\n\nBecause it is used inconsistently at least version 5.4.0 of g++ to\ncomplains about methods that don't use override. There is two ways to go\nabout this: remove override from the methods having it, or add it to the\nmethods missing it. I chose the second.",
      "tree": {
        "sha": "73b07bb5f5bc6a2bce2e5cde55d47337d81317b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/73b07bb5f5bc6a2bce2e5cde55d47337d81317b5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6c5427d24ca18ce01e46242876e24f68a9c72cc3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c5427d24ca18ce01e46242876e24f68a9c72cc3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6c5427d24ca18ce01e46242876e24f68a9c72cc3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c5427d24ca18ce01e46242876e24f68a9c72cc3/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8e8b06bd0659b35e51effe35400408ec15bb09b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8e8b06bd0659b35e51effe35400408ec15bb09b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8e8b06bd0659b35e51effe35400408ec15bb09b"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 11,
      "deletions": 11
    },
    "files": [
      {
        "sha": "a7b15a8441c8410925bd0a1a4ae9b032517483ea",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c5427d24ca18ce01e46242876e24f68a9c72cc3/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c5427d24ca18ce01e46242876e24f68a9c72cc3/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=6c5427d24ca18ce01e46242876e24f68a9c72cc3",
        "patch": "@@ -737,7 +737,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     CPubKey GenerateNewKey();\n     void DeriveNewChildKey(CKeyMetadata& metadata, CKey& secret);\n     //! Adds a key to the store, and saves it to disk.\n-    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey);\n+    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override;\n     //! Adds a key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadKey(const CKey& key, const CPubKey &pubkey) { return CCryptoKeyStore::AddKeyPubKey(key, pubkey); }\n     //! Load metadata (used by LoadWallet)\n@@ -747,10 +747,10 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void UpdateTimeFirstKey(int64_t nCreateTime);\n \n     //! Adds an encrypted key to the store, and saves it to disk.\n-    bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n+    bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret) override;\n     //! Adds an encrypted key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n-    bool AddCScript(const CScript& redeemScript);\n+    bool AddCScript(const CScript& redeemScript) override;\n     bool LoadCScript(const CScript& redeemScript);\n \n     //! Adds a destination data tuple to the store, and saves it to disk\n@@ -764,7 +764,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     //! Adds a watch-only address to the store, and saves it to disk.\n     bool AddWatchOnly(const CScript& dest, int64_t nCreateTime);\n-    bool RemoveWatchOnly(const CScript &dest);\n+    bool RemoveWatchOnly(const CScript &dest) override;\n     //! Adds a watch-only address to the store, without saving it to disk (used by LoadWallet)\n     bool LoadWatchOnly(const CScript &dest);\n \n@@ -786,11 +786,11 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void MarkDirty();\n     bool AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose=true);\n     bool LoadToWallet(const CWalletTx& wtxIn);\n-    void SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock);\n+    void SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock) override;\n     bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate);\n     int ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n     void ReacceptWalletTransactions();\n-    void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman);\n+    void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) override;\n     std::vector<uint256> ResendWalletTransactionsBefore(int64_t nTime, CConnman* connman);\n     CAmount GetBalance() const;\n     CAmount GetUnconfirmedBalance() const;\n@@ -872,7 +872,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool IsAllFromMe(const CTransaction& tx, const isminefilter& filter) const;\n     CAmount GetCredit(const CTransaction& tx, const isminefilter& filter) const;\n     CAmount GetChange(const CTransaction& tx) const;\n-    void SetBestChain(const CBlockLocator& loc);\n+    void SetBestChain(const CBlockLocator& loc) override;\n \n     DBErrors LoadWallet(bool& fFirstRunRet);\n     DBErrors ZapWalletTx(std::vector<CWalletTx>& vWtx);\n@@ -882,9 +882,9 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     bool DelAddressBook(const CTxDestination& address);\n \n-    void UpdatedTransaction(const uint256 &hashTx);\n+    void UpdatedTransaction(const uint256 &hashTx) override;\n \n-    void Inventory(const uint256 &hash)\n+    void Inventory(const uint256 &hash) override\n     {\n         {\n             LOCK(cs_wallet);\n@@ -894,8 +894,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         }\n     }\n \n-    void GetScriptForMining(boost::shared_ptr<CReserveScript> &script);\n-    void ResetRequestCount(const uint256 &hash)\n+    void GetScriptForMining(boost::shared_ptr<CReserveScript> &script) override;\n+    void ResetRequestCount(const uint256 &hash) override\n     {\n         LOCK(cs_wallet);\n         mapRequestCount[hash] = 0;"
      }
    ]
  },
  {
    "sha": "ba803efb687c2cb408176c546a544a8466c652ea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYTgwM2VmYjY4N2MyY2I0MDgxNzZjNTQ2YTU0NGE4NDY2YzY1MmVh",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-02-13T22:28:39Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-02-15T13:17:57Z"
      },
      "message": "Harden against mistakes handling invalid blocks\n\nFixes a bug in AcceptBlock() in invoking CheckBlock() with incorrect\narguments, and restores a call to CheckBlock() from ProcessNewBlock()\nas belt-and-suspenders.\n\nUpdates the (overspecified) tests to match behavior.",
      "tree": {
        "sha": "c7659cde7bfce8c021c27f762bcb7a0d88b88df2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c7659cde7bfce8c021c27f762bcb7a0d88b88df2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ba803efb687c2cb408176c546a544a8466c652ea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba803efb687c2cb408176c546a544a8466c652ea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ba803efb687c2cb408176c546a544a8466c652ea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba803efb687c2cb408176c546a544a8466c652ea/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 13,
      "deletions": 7
    },
    "files": [
      {
        "sha": "44e5f103224651b9b01155484315de78eb8c00a8",
        "filename": "qa/rpc-tests/p2p-fullblocktest.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba803efb687c2cb408176c546a544a8466c652ea/qa/rpc-tests/p2p-fullblocktest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba803efb687c2cb408176c546a544a8466c652ea/qa/rpc-tests/p2p-fullblocktest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-fullblocktest.py?ref=ba803efb687c2cb408176c546a544a8466c652ea",
        "patch": "@@ -398,7 +398,7 @@ def update_block(block_number, new_transactions):\n \n         # Extend the b26 chain to make sure bitcoind isn't accepting b26\n         b27 = block(27, spend=out[7])\n-        yield rejected(RejectResult(16, b'bad-prevblk'))\n+        yield rejected(RejectResult(0, b'bad-prevblk'))\n \n         # Now try a too-large-coinbase script\n         tip(15)\n@@ -410,7 +410,7 @@ def update_block(block_number, new_transactions):\n \n         # Extend the b28 chain to make sure bitcoind isn't accepting b28\n         b29 = block(29, spend=out[7])\n-        yield rejected(RejectResult(16, b'bad-prevblk'))\n+        yield rejected(RejectResult(0, b'bad-prevblk'))\n \n         # b30 has a max-sized coinbase scriptSig.\n         tip(23)"
      },
      {
        "sha": "4ce0723b21cccd8425ee77b2256bf3c89decf82f",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 5,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba803efb687c2cb408176c546a544a8466c652ea/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba803efb687c2cb408176c546a544a8466c652ea/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=ba803efb687c2cb408176c546a544a8466c652ea",
        "patch": "@@ -3187,7 +3187,7 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n     }\n     if (fNewBlock) *fNewBlock = true;\n \n-    if (!CheckBlock(block, state, chainparams.GetConsensus(), GetAdjustedTime()) ||\n+    if (!CheckBlock(block, state, chainparams.GetConsensus()) ||\n         !ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindex->pprev)) {\n         if (state.IsInvalid() && !state.CorruptionPossible()) {\n             pindex->nStatus |= BLOCK_FAILED_VALID;\n@@ -3229,13 +3229,19 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool *fNewBlock)\n {\n     {\n-        LOCK(cs_main);\n-\n-        // Store to disk\n         CBlockIndex *pindex = NULL;\n         if (fNewBlock) *fNewBlock = false;\n         CValidationState state;\n-        bool ret = AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, NULL, fNewBlock);\n+        // Ensure that CheckBlock() passes before calling AcceptBlock, as\n+        // belt-and-suspenders.\n+        bool ret = CheckBlock(*pblock, state, chainparams.GetConsensus());\n+\n+        LOCK(cs_main);\n+\n+        if (ret) {\n+            // Store to disk\n+            ret = AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, NULL, fNewBlock);\n+        }\n         CheckBlockIndex(chainparams.GetConsensus());\n         if (!ret) {\n             GetMainSignals().BlockChecked(*pblock, state);"
      }
    ]
  },
  {
    "sha": "476cc47da084633ac17b9b3c9257fab425b3bbba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NzZjYzQ3ZGEwODQ2MzNhYzE3YjliM2M5MjU3ZmFiNDI1YjNiYmJh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-15T14:08:54Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-15T14:08:59Z"
      },
      "message": "Merge #9758: Selectively suppress deprecation warnings\n\n4b6cccc Selectively suppress deprecation warnings (Jonas Schnelli)",
      "tree": {
        "sha": "c4bfe9386ffe2ea44937c298aa39cb6b92e41bd1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c4bfe9386ffe2ea44937c298aa39cb6b92e41bd1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/476cc47da084633ac17b9b3c9257fab425b3bbba",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYpGD7AAoJEHSBCwEjRsmmSCkIAIN3H4FCr+qo5ZHCWDbVdfob\n5S4NhRE/nNtx7NXPR+A3dcqEQKEavvP77FVOaR3ZvThYD/vABtQdYJ1JkXIsgJTN\nV7wCRYCXBp/Er1P/Bi8RLzh8f9SYEldi8H4tEjWXcj7ciX7Dq265+HRsIrR4CnYt\n8hDLIGduZ/9i0/G/iUxbObWBHFcWPD1KBndoD3j9OQ2KeW2Hwcr4hVrggpCP1SRi\nj/HuEYsSZC26oWdAA5zWBN4vDw/Ncu6OoVOGhuyMM24az38jJ623h6zRByZwD+SR\nHW6iAK5CrkgaZB+VTkxvheK3bE3hngs4tegEDmJ0yApTywmsZ00IynTd4GMOhYs=\n=T3IM\n-----END PGP SIGNATURE-----",
        "payload": "tree c4bfe9386ffe2ea44937c298aa39cb6b92e41bd1\nparent d8e8b06bd0659b35e51effe35400408ec15bb09b\nparent 4b6ccccc16b615c01939678e589f8e09cfc15d70\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487167734 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487167739 +0100\n\nMerge #9758: Selectively suppress deprecation warnings\n\n4b6cccc Selectively suppress deprecation warnings (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/476cc47da084633ac17b9b3c9257fab425b3bbba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/476cc47da084633ac17b9b3c9257fab425b3bbba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/476cc47da084633ac17b9b3c9257fab425b3bbba/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8e8b06bd0659b35e51effe35400408ec15bb09b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8e8b06bd0659b35e51effe35400408ec15bb09b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8e8b06bd0659b35e51effe35400408ec15bb09b"
      },
      {
        "sha": "4b6ccccc16b615c01939678e589f8e09cfc15d70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b6ccccc16b615c01939678e589f8e09cfc15d70",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4b6ccccc16b615c01939678e589f8e09cfc15d70"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e0961fe7dd8d30a2e27e9e5fa36be17266550054",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/476cc47da084633ac17b9b3c9257fab425b3bbba/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/476cc47da084633ac17b9b3c9257fab425b3bbba/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=476cc47da084633ac17b9b3c9257fab425b3bbba",
        "patch": "@@ -762,6 +762,8 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n \n \n #elif defined(Q_OS_MAC)\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n // based on: https://github.com/Mozketo/LaunchAtLoginController/blob/master/LaunchAtLoginController.m\n \n #include <CoreFoundation/CoreFoundation.h>\n@@ -824,6 +826,7 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n     }\n     return true;\n }\n+#pragma GCC diagnostic pop\n #else\n \n bool GetStartOnSystemStartup() { return false; }"
      },
      {
        "sha": "a2fea3fdc64fb8d488a0e0498002f52bf461f208",
        "filename": "src/qt/paymentrequestplus.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/476cc47da084633ac17b9b3c9257fab425b3bbba/src/qt/paymentrequestplus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/476cc47da084633ac17b9b3c9257fab425b3bbba/src/qt/paymentrequestplus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.h?ref=476cc47da084633ac17b9b3c9257fab425b3bbba",
        "patch": "@@ -5,7 +5,10 @@\n #ifndef BITCOIN_QT_PAYMENTREQUESTPLUS_H\n #define BITCOIN_QT_PAYMENTREQUESTPLUS_H\n \n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n #include \"paymentrequest.pb.h\"\n+#pragma GCC diagnostic pop\n \n #include \"base58.h\"\n "
      }
    ]
  },
  {
    "sha": "7a93af8340d95add7f0d9ddf051aa242302cfc10",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YTkzYWY4MzQwZDk1YWRkN2YwZDlkZGYwNTFhYTI0MjMwMmNmYzEw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-15T14:31:04Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-15T15:29:16Z"
      },
      "message": "Merge #9756: Return error when importmulti called with invalid address.\n\n9acf25c Return error when importmulti called with invalid address. (Russell Yanofsky)",
      "tree": {
        "sha": "7e7e6fdd4e47baa194cd284e1b92e478f49c51bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7e7e6fdd4e47baa194cd284e1b92e478f49c51bb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7a93af8340d95add7f0d9ddf051aa242302cfc10",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYpHPMAAoJEHSBCwEjRsmmeHsH/288lgHWcvzC+U1fc/F0Ft5x\nzCvmbJLngOlPuYyUVCcROd6gH1uI1bp67pqgnAlSF0MncPLp8HMiYL5DnZI1Tm/p\ngqDXOKmRsp0rIjIQbyTxnXdduqUYdMP/MfdgoLIfB2MQZUif1UmKljknrKi5g9Xd\nKebbdtNOKcmn2xgttpuTZR+vwkHx+cZKAt/7r96Ca3IqFfeLpBY/q0ra8GcrxWeZ\nC/TFcudQ5OrkaS3i7rwQkoNy618ggHul4pueBcKIePM43KwAxMqggzRCQFmMgNa+\n/J/5ck+SA/loT2oH5BnnUtdM3Fxz0fP1DOunnIsJb9VfIdP8NV2scSLyR0SJKRo=\n=fQi4\n-----END PGP SIGNATURE-----",
        "payload": "tree 7e7e6fdd4e47baa194cd284e1b92e478f49c51bb\nparent 476cc47da084633ac17b9b3c9257fab425b3bbba\nparent 9acf25cc013c013ee5b07dba7b1319b7c5a7b6a4\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487169064 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487172556 +0100\n\nMerge #9756: Return error when importmulti called with invalid address.\n\n9acf25c Return error when importmulti called with invalid address. (Russell Yanofsky)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a93af8340d95add7f0d9ddf051aa242302cfc10",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7a93af8340d95add7f0d9ddf051aa242302cfc10",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a93af8340d95add7f0d9ddf051aa242302cfc10/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "476cc47da084633ac17b9b3c9257fab425b3bbba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/476cc47da084633ac17b9b3c9257fab425b3bbba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/476cc47da084633ac17b9b3c9257fab425b3bbba"
      },
      {
        "sha": "9acf25cc013c013ee5b07dba7b1319b7c5a7b6a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9acf25cc013c013ee5b07dba7b1319b7c5a7b6a4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9acf25cc013c013ee5b07dba7b1319b7c5a7b6a4"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 13,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1aa4ba2e18f2a286a9a2ef3c80420d70a010c9b2",
        "filename": "qa/rpc-tests/importmulti.py",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a93af8340d95add7f0d9ddf051aa242302cfc10/qa/rpc-tests/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a93af8340d95add7f0d9ddf051aa242302cfc10/qa/rpc-tests/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/importmulti.py?ref=7a93af8340d95add7f0d9ddf051aa242302cfc10",
        "patch": "@@ -64,6 +64,16 @@ def run_test (self):\n         watchonly_address = address['address']\n         watchonly_timestamp = timestamp\n \n+        print(\"Should not import an invalid address\")\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": \"not valid address\",\n+            },\n+            \"timestamp\": \"now\",\n+        }])\n+        assert_equal(result[0]['success'], False)\n+        assert_equal(result[0]['error']['code'], -5)\n+        assert_equal(result[0]['error']['message'], 'Invalid address')\n \n         # ScriptPubKey + internal\n         print(\"Should import a scriptPubKey with internal flag\")"
      },
      {
        "sha": "908655d4118d3db48efceff18e4008395024d7f6",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a93af8340d95add7f0d9ddf051aa242302cfc10/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a93af8340d95add7f0d9ddf051aa242302cfc10/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=7a93af8340d95add7f0d9ddf051aa242302cfc10",
        "patch": "@@ -672,6 +672,9 @@ UniValue ProcessImport(const UniValue& data, const int64_t timestamp)\n \n         if (!isScript) {\n             address = CBitcoinAddress(output);\n+            if (!address.IsValid()) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n+            }\n             script = GetScriptForDestination(address.Get());\n         } else {\n             if (!IsHex(output)) {"
      }
    ]
  },
  {
    "sha": "07afcd6379bb46ace5856f6a47a9188cf9aed2ea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowN2FmY2Q2Mzc5YmI0NmFjZTU4NTZmNmE0N2E5MTg4Y2Y5YWVkMmVh",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-15T22:01:30Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-15T22:01:30Z"
      },
      "message": "Add missing cs_wallet lock that triggers new lock held assertion\n\nA new AssertLockHeld(cs_wallet) call was added in commit a58370e\n\"Dedup nTimeFirstKey update logic\" (part of PR #9108).\n\nThe lock held assertion will fail when loading prexisting wallets files from\nbefore the #9108 merge that have watch-only keys.",
      "tree": {
        "sha": "61d3f1f987dcf8ec9a89919d2756d0b3fc51fe7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/61d3f1f987dcf8ec9a89919d2756d0b3fc51fe7f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/07afcd6379bb46ace5856f6a47a9188cf9aed2ea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07afcd6379bb46ace5856f6a47a9188cf9aed2ea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/07afcd6379bb46ace5856f6a47a9188cf9aed2ea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07afcd6379bb46ace5856f6a47a9188cf9aed2ea/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7a93af8340d95add7f0d9ddf051aa242302cfc10",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a93af8340d95add7f0d9ddf051aa242302cfc10",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7a93af8340d95add7f0d9ddf051aa242302cfc10"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "81fdde401ecb68aa660065cae937e662dc5f8c9a",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07afcd6379bb46ace5856f6a47a9188cf9aed2ea/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07afcd6379bb46ace5856f6a47a9188cf9aed2ea/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=07afcd6379bb46ace5856f6a47a9188cf9aed2ea",
        "patch": "@@ -559,8 +559,8 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n     bool fNoncriticalErrors = false;\n     DBErrors result = DB_LOAD_OK;\n \n+    LOCK(pwallet->cs_wallet);\n     try {\n-        LOCK(pwallet->cs_wallet);\n         int nMinVersion = 0;\n         if (Read((string)\"minversion\", nMinVersion))\n         {"
      }
    ]
  },
  {
    "sha": "1e92e041ddc8232bcf64f09fd70891b80ac05c66",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZTkyZTA0MWRkYzgyMzJiY2Y2NGYwOWZkNzA4OTFiODBhYzA1YzY2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-16T09:22:17Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-16T09:23:41Z"
      },
      "message": "Merge #9765: Harden against mistakes handling invalid blocks\n\nba803ef Harden against mistakes handling invalid blocks (Suhas Daftuar)",
      "tree": {
        "sha": "be67cb270126a6fa21ff7f542ebc5afb6b1f194a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/be67cb270126a6fa21ff7f542ebc5afb6b1f194a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e92e041ddc8232bcf64f09fd70891b80ac05c66",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYpW+dAAoJEHSBCwEjRsmmjgYH/1/GgC7sQZPxBdurSXmEfqJ8\nSI3C/qyA5UsWI6RpRhb0sM1n/64fTXmkiKSohNudwEVE6rSAL3VjvXPYHhksO7ip\nHC2PMDkyswg2ci72xHKNYbjW7zw6ex1B79g6qhcQ5oAQ3wW1auaxS0ChYGmIxb5Q\n0kz7ELzPoEE4JHmzlWvlNKglO1eJJP0iVkMHs0xw2HYqQ0YdPGff8OvRbZP+o9pE\nsB2cMHOXCqT2ZW+0/5pYbcEMWT6pEU9nblazEYBrKbwnBcHqig81aHZCtimE+sOh\nMAHvzKMyhmL3diaylvqvB2WWmg2obKHarlI3WTz2Ofv1HiDInEOAbbB9gQEMFFU=\n=Emsa\n-----END PGP SIGNATURE-----",
        "payload": "tree be67cb270126a6fa21ff7f542ebc5afb6b1f194a\nparent 7a93af8340d95add7f0d9ddf051aa242302cfc10\nparent ba803efb687c2cb408176c546a544a8466c652ea\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487236937 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487237021 +0100\n\nMerge #9765: Harden against mistakes handling invalid blocks\n\nba803ef Harden against mistakes handling invalid blocks (Suhas Daftuar)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e92e041ddc8232bcf64f09fd70891b80ac05c66",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1e92e041ddc8232bcf64f09fd70891b80ac05c66",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e92e041ddc8232bcf64f09fd70891b80ac05c66/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7a93af8340d95add7f0d9ddf051aa242302cfc10",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a93af8340d95add7f0d9ddf051aa242302cfc10",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7a93af8340d95add7f0d9ddf051aa242302cfc10"
      },
      {
        "sha": "ba803efb687c2cb408176c546a544a8466c652ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba803efb687c2cb408176c546a544a8466c652ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ba803efb687c2cb408176c546a544a8466c652ea"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 13,
      "deletions": 7
    },
    "files": [
      {
        "sha": "44e5f103224651b9b01155484315de78eb8c00a8",
        "filename": "qa/rpc-tests/p2p-fullblocktest.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e92e041ddc8232bcf64f09fd70891b80ac05c66/qa/rpc-tests/p2p-fullblocktest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e92e041ddc8232bcf64f09fd70891b80ac05c66/qa/rpc-tests/p2p-fullblocktest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-fullblocktest.py?ref=1e92e041ddc8232bcf64f09fd70891b80ac05c66",
        "patch": "@@ -398,7 +398,7 @@ def update_block(block_number, new_transactions):\n \n         # Extend the b26 chain to make sure bitcoind isn't accepting b26\n         b27 = block(27, spend=out[7])\n-        yield rejected(RejectResult(16, b'bad-prevblk'))\n+        yield rejected(RejectResult(0, b'bad-prevblk'))\n \n         # Now try a too-large-coinbase script\n         tip(15)\n@@ -410,7 +410,7 @@ def update_block(block_number, new_transactions):\n \n         # Extend the b28 chain to make sure bitcoind isn't accepting b28\n         b29 = block(29, spend=out[7])\n-        yield rejected(RejectResult(16, b'bad-prevblk'))\n+        yield rejected(RejectResult(0, b'bad-prevblk'))\n \n         # b30 has a max-sized coinbase scriptSig.\n         tip(23)"
      },
      {
        "sha": "4ce0723b21cccd8425ee77b2256bf3c89decf82f",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 5,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e92e041ddc8232bcf64f09fd70891b80ac05c66/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e92e041ddc8232bcf64f09fd70891b80ac05c66/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=1e92e041ddc8232bcf64f09fd70891b80ac05c66",
        "patch": "@@ -3187,7 +3187,7 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n     }\n     if (fNewBlock) *fNewBlock = true;\n \n-    if (!CheckBlock(block, state, chainparams.GetConsensus(), GetAdjustedTime()) ||\n+    if (!CheckBlock(block, state, chainparams.GetConsensus()) ||\n         !ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindex->pprev)) {\n         if (state.IsInvalid() && !state.CorruptionPossible()) {\n             pindex->nStatus |= BLOCK_FAILED_VALID;\n@@ -3229,13 +3229,19 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool *fNewBlock)\n {\n     {\n-        LOCK(cs_main);\n-\n-        // Store to disk\n         CBlockIndex *pindex = NULL;\n         if (fNewBlock) *fNewBlock = false;\n         CValidationState state;\n-        bool ret = AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, NULL, fNewBlock);\n+        // Ensure that CheckBlock() passes before calling AcceptBlock, as\n+        // belt-and-suspenders.\n+        bool ret = CheckBlock(*pblock, state, chainparams.GetConsensus());\n+\n+        LOCK(cs_main);\n+\n+        if (ret) {\n+            // Store to disk\n+            ret = AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, NULL, fNewBlock);\n+        }\n         CheckBlockIndex(chainparams.GetConsensus());\n         if (!ret) {\n             GetMainSignals().BlockChecked(*pblock, state);"
      }
    ]
  },
  {
    "sha": "f8af89a9182059929bf8a6facd45478f90dd9b25",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOGFmODlhOTE4MjA1OTkyOWJmOGE2ZmFjZDQ1NDc4ZjkwZGQ5YjI1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-16T09:24:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-16T09:24:24Z"
      },
      "message": "Merge #9764: wallet: Prevent \"overrides a member function but is not marked 'override'\" warnings\n\n6c5427d wallet: Prevent \"overrides a member function but is not marked 'override'\" warnings (Wladimir J. van der Laan)",
      "tree": {
        "sha": "9d6f1d2834291ba59002a20238fd67466a9b9217",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9d6f1d2834291ba59002a20238fd67466a9b9217"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8af89a9182059929bf8a6facd45478f90dd9b25",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYpW/IAAoJEHSBCwEjRsmmWjgH/inJyvcCKc/TvU6Uhxw8Dxbp\nP5SuLbt5kn7d5WNKa7Aw+4UZehDn65cMbQ4wq5anhQFT1Hyw1hASIQSvqkEDR9vC\n0WKU73Hmf9o0BDOEnP58f3CoYo6xtbw7G7rdKBekIx2coOLnh7jB/VVcSQyEKg03\nyfyOCu7y8YbNh8pOGZvTN/dAiphJVy2cN0fkAvHz+Y8waU+0S47fB3AAjnm2RZuS\n+yTgcqgbFnzNFfvbX9/e3k1CGVWWjVYqUoMmvvYtqICA3VZFTtvi4s84vi7kN/1a\nLdsTQTkALZDLby1B+Umg3MKkJZAhTgLJbsfmIEXpUcwwhpE4NFKY49Vgb4eOCYY=\n=9Ls6\n-----END PGP SIGNATURE-----",
        "payload": "tree 9d6f1d2834291ba59002a20238fd67466a9b9217\nparent 1e92e041ddc8232bcf64f09fd70891b80ac05c66\nparent 6c5427d24ca18ce01e46242876e24f68a9c72cc3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487237061 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487237064 +0100\n\nMerge #9764: wallet: Prevent \"overrides a member function but is not marked 'override'\" warnings\n\n6c5427d wallet: Prevent \"overrides a member function but is not marked 'override'\" warnings (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8af89a9182059929bf8a6facd45478f90dd9b25",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f8af89a9182059929bf8a6facd45478f90dd9b25",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8af89a9182059929bf8a6facd45478f90dd9b25/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1e92e041ddc8232bcf64f09fd70891b80ac05c66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e92e041ddc8232bcf64f09fd70891b80ac05c66",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1e92e041ddc8232bcf64f09fd70891b80ac05c66"
      },
      {
        "sha": "6c5427d24ca18ce01e46242876e24f68a9c72cc3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c5427d24ca18ce01e46242876e24f68a9c72cc3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6c5427d24ca18ce01e46242876e24f68a9c72cc3"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 11,
      "deletions": 11
    },
    "files": [
      {
        "sha": "a7b15a8441c8410925bd0a1a4ae9b032517483ea",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8af89a9182059929bf8a6facd45478f90dd9b25/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8af89a9182059929bf8a6facd45478f90dd9b25/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=f8af89a9182059929bf8a6facd45478f90dd9b25",
        "patch": "@@ -737,7 +737,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     CPubKey GenerateNewKey();\n     void DeriveNewChildKey(CKeyMetadata& metadata, CKey& secret);\n     //! Adds a key to the store, and saves it to disk.\n-    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey);\n+    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override;\n     //! Adds a key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadKey(const CKey& key, const CPubKey &pubkey) { return CCryptoKeyStore::AddKeyPubKey(key, pubkey); }\n     //! Load metadata (used by LoadWallet)\n@@ -747,10 +747,10 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void UpdateTimeFirstKey(int64_t nCreateTime);\n \n     //! Adds an encrypted key to the store, and saves it to disk.\n-    bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n+    bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret) override;\n     //! Adds an encrypted key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n-    bool AddCScript(const CScript& redeemScript);\n+    bool AddCScript(const CScript& redeemScript) override;\n     bool LoadCScript(const CScript& redeemScript);\n \n     //! Adds a destination data tuple to the store, and saves it to disk\n@@ -764,7 +764,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     //! Adds a watch-only address to the store, and saves it to disk.\n     bool AddWatchOnly(const CScript& dest, int64_t nCreateTime);\n-    bool RemoveWatchOnly(const CScript &dest);\n+    bool RemoveWatchOnly(const CScript &dest) override;\n     //! Adds a watch-only address to the store, without saving it to disk (used by LoadWallet)\n     bool LoadWatchOnly(const CScript &dest);\n \n@@ -786,11 +786,11 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void MarkDirty();\n     bool AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose=true);\n     bool LoadToWallet(const CWalletTx& wtxIn);\n-    void SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock);\n+    void SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock) override;\n     bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate);\n     int ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n     void ReacceptWalletTransactions();\n-    void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman);\n+    void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) override;\n     std::vector<uint256> ResendWalletTransactionsBefore(int64_t nTime, CConnman* connman);\n     CAmount GetBalance() const;\n     CAmount GetUnconfirmedBalance() const;\n@@ -872,7 +872,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool IsAllFromMe(const CTransaction& tx, const isminefilter& filter) const;\n     CAmount GetCredit(const CTransaction& tx, const isminefilter& filter) const;\n     CAmount GetChange(const CTransaction& tx) const;\n-    void SetBestChain(const CBlockLocator& loc);\n+    void SetBestChain(const CBlockLocator& loc) override;\n \n     DBErrors LoadWallet(bool& fFirstRunRet);\n     DBErrors ZapWalletTx(std::vector<CWalletTx>& vWtx);\n@@ -882,9 +882,9 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     bool DelAddressBook(const CTxDestination& address);\n \n-    void UpdatedTransaction(const uint256 &hashTx);\n+    void UpdatedTransaction(const uint256 &hashTx) override;\n \n-    void Inventory(const uint256 &hash)\n+    void Inventory(const uint256 &hash) override\n     {\n         {\n             LOCK(cs_wallet);\n@@ -894,8 +894,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         }\n     }\n \n-    void GetScriptForMining(boost::shared_ptr<CReserveScript> &script);\n-    void ResetRequestCount(const uint256 &hash)\n+    void GetScriptForMining(boost::shared_ptr<CReserveScript> &script) override;\n+    void ResetRequestCount(const uint256 &hash) override\n     {\n         LOCK(cs_wallet);\n         mapRequestCount[hash] = 0;"
      }
    ]
  },
  {
    "sha": "e43a58514dd38dacd930aa4c94afb998d4360183",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNDNhNTg1MTRkZDM4ZGFjZDkzMGFhNGM5NGFmYjk5OGQ0MzYwMTgz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-16T09:25:20Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-16T09:30:33Z"
      },
      "message": "Merge #9771: Add missing cs_wallet lock that triggers new lock held assertion\n\n07afcd6 Add missing cs_wallet lock that triggers new lock held assertion (Russell Yanofsky)",
      "tree": {
        "sha": "47d9aedeed5b0d69ec6e908552dfc077b67b38a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/47d9aedeed5b0d69ec6e908552dfc077b67b38a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e43a58514dd38dacd930aa4c94afb998d4360183",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYpXE5AAoJEHSBCwEjRsmmt2gIAIv+jL1OUWMrjtgeh2zvT2fb\nRM8v0yGXlnwJ4eHwe17zPM+JEyejBt7Lb5cAI+nJbOPAMq8wtplwsFi3ud3YH48s\nqAEVNcgx2psLpJL+BumFex8xzPZu4sE5liUMGbnGivsBBiDzVlzaeO/jylZhRF61\nOHq9WJppYEFqO/Rd2SC6puuMuV5Bnc5Aq/nrwICOdE0oz3fTP92uITvTsarF0s3b\nXOIRBekPgVUJAdm3Pn+Naw0Tn8l+EkxLJx154Rk22qyHR4agg7sV9pCa8UlwhBnP\nfSHew9xuAJHmPcrLeB0aNUNq0+MViTL7U6+gfrSDw+SEf1lCZFear7vqK56KwvE=\n=c76a\n-----END PGP SIGNATURE-----",
        "payload": "tree 47d9aedeed5b0d69ec6e908552dfc077b67b38a9\nparent f8af89a9182059929bf8a6facd45478f90dd9b25\nparent 07afcd6379bb46ace5856f6a47a9188cf9aed2ea\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487237120 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487237433 +0100\n\nMerge #9771: Add missing cs_wallet lock that triggers new lock held assertion\n\n07afcd6 Add missing cs_wallet lock that triggers new lock held assertion (Russell Yanofsky)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e43a58514dd38dacd930aa4c94afb998d4360183",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e43a58514dd38dacd930aa4c94afb998d4360183",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e43a58514dd38dacd930aa4c94afb998d4360183/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f8af89a9182059929bf8a6facd45478f90dd9b25",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8af89a9182059929bf8a6facd45478f90dd9b25",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f8af89a9182059929bf8a6facd45478f90dd9b25"
      },
      {
        "sha": "07afcd6379bb46ace5856f6a47a9188cf9aed2ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07afcd6379bb46ace5856f6a47a9188cf9aed2ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/07afcd6379bb46ace5856f6a47a9188cf9aed2ea"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "81fdde401ecb68aa660065cae937e662dc5f8c9a",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e43a58514dd38dacd930aa4c94afb998d4360183/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e43a58514dd38dacd930aa4c94afb998d4360183/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=e43a58514dd38dacd930aa4c94afb998d4360183",
        "patch": "@@ -559,8 +559,8 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n     bool fNoncriticalErrors = false;\n     DBErrors result = DB_LOAD_OK;\n \n+    LOCK(pwallet->cs_wallet);\n     try {\n-        LOCK(pwallet->cs_wallet);\n         int nMinVersion = 0;\n         if (Read((string)\"minversion\", nMinVersion))\n         {"
      }
    ]
  },
  {
    "sha": "00e623d0b8cd1c261a2671aa8ab221a0474bc7c8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMGU2MjNkMGI4Y2QxYzI2MWEyNjcxYWE4YWIyMjFhMDQ3NGJjN2M4",
    "commit": {
      "author": {
        "name": "CryptAxe",
        "email": "cryptaxe@gmail.com",
        "date": "2017-02-15T07:00:04Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-16T12:52:38Z"
      },
      "message": "[Trivial] Update comments referencing main.cpp",
      "tree": {
        "sha": "09484354eb8b5cb3c4ac573189bdd38db4a1b43c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/09484354eb8b5cb3c4ac573189bdd38db4a1b43c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/00e623d0b8cd1c261a2671aa8ab221a0474bc7c8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00e623d0b8cd1c261a2671aa8ab221a0474bc7c8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/00e623d0b8cd1c261a2671aa8ab221a0474bc7c8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00e623d0b8cd1c261a2671aa8ab221a0474bc7c8/comments",
    "author": {
      "login": "CryptAxe",
      "id": 8107318,
      "node_id": "MDQ6VXNlcjgxMDczMTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8107318?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CryptAxe",
      "html_url": "https://github.com/CryptAxe",
      "followers_url": "https://api.github.com/users/CryptAxe/followers",
      "following_url": "https://api.github.com/users/CryptAxe/following{/other_user}",
      "gists_url": "https://api.github.com/users/CryptAxe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CryptAxe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CryptAxe/subscriptions",
      "organizations_url": "https://api.github.com/users/CryptAxe/orgs",
      "repos_url": "https://api.github.com/users/CryptAxe/repos",
      "events_url": "https://api.github.com/users/CryptAxe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CryptAxe/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a441db01b527431a3d7ba169f1afd9c3bc04748f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a441db01b527431a3d7ba169f1afd9c3bc04748f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a441db01b527431a3d7ba169f1afd9c3bc04748f"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "b932b2dd853ff0e710e037f2d431e850551dd635",
        "filename": "CONTRIBUTING.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00e623d0b8cd1c261a2671aa8ab221a0474bc7c8/CONTRIBUTING.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00e623d0b8cd1c261a2671aa8ab221a0474bc7c8/CONTRIBUTING.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/CONTRIBUTING.md?ref=00e623d0b8cd1c261a2671aa8ab221a0474bc7c8",
        "patch": "@@ -38,7 +38,7 @@ fixes or code moves with actual code changes.\n Commit messages should be verbose by default consisting of a short subject line\n (50 chars max), a blank line and detailed explanatory text as separate\n paragraph(s); unless the title alone is self-explanatory (like \"Corrected typo\n-in main.cpp\") then a single title line is sufficient. Commit messages should be\n+in init.cpp\") then a single title line is sufficient. Commit messages should be\n helpful to people reading your code in the future, so explain the reasoning for\n your decisions. Further explanation [here](http://chris.beams.io/posts/git-commit/).\n \n@@ -79,7 +79,7 @@ Examples:\n     Consensus: Add new opcode for BIP-XXXX OP_CHECKAWESOMESIG\n     Net: Automatically create hidden service, listen on Tor\n     Qt: Add feed bump button\n-    Trivial: Fix typo in main.cpp\n+    Trivial: Fix typo in init.cpp\n \n If a pull request is specifically not to be considered for merging (yet) please\n prefix the title with [WIP] or use [Tasks Lists](https://help.github.com/articles/basic-writing-and-formatting-syntax/#task-lists)"
      },
      {
        "sha": "c62e6ae838a94b03f3055e9c1921c2b656449958",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00e623d0b8cd1c261a2671aa8ab221a0474bc7c8/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00e623d0b8cd1c261a2671aa8ab221a0474bc7c8/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=00e623d0b8cd1c261a2671aa8ab221a0474bc7c8",
        "patch": "@@ -23,7 +23,7 @@\n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n-// Tests this internal-to-main.cpp method:\n+// Tests these internal-to-net_processing.cpp methods:\n extern bool AddOrphanTx(const CTransactionRef& tx, NodeId peer);\n extern void EraseOrphansFor(NodeId peer);\n extern unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans);"
      },
      {
        "sha": "5842dd88d838c8159b79d97d349ecdfe5d9ffa43",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00e623d0b8cd1c261a2671aa8ab221a0474bc7c8/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00e623d0b8cd1c261a2671aa8ab221a0474bc7c8/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=00e623d0b8cd1c261a2671aa8ab221a0474bc7c8",
        "patch": "@@ -395,7 +395,7 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n {\n     NotifyEntryAdded(entry.GetSharedTx());\n     // Add to memory pool without checking anything.\n-    // Used by main.cpp AcceptToMemoryPool(), which DOES do\n+    // Used by AcceptToMemoryPool(), which DOES do\n     // all the appropriate checks.\n     LOCK(cs);\n     indexed_transaction_set::iterator newit = mapTx.insert(entry).first;"
      }
    ]
  },
  {
    "sha": "8743320d6cb31291c0786b33124209b76f6c1904",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NzQzMzIwZDZjYjMxMjkxYzA3ODZiMzMxMjQyMDliNzZmNmMxOTA0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-16T13:01:00Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-16T13:01:14Z"
      },
      "message": "Merge #9763: [Trivial] Update comments referencing main.cpp\n\n00e623d [Trivial] Update comments referencing main.cpp (CryptAxe)",
      "tree": {
        "sha": "9d383afed19f5da6ecd0e90cf64550b86cb4f9d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9d383afed19f5da6ecd0e90cf64550b86cb4f9d4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8743320d6cb31291c0786b33124209b76f6c1904",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYpaKaAAoJEHSBCwEjRsmm7a4IALwlomhN4Nm4gXBcqROaTrlq\ndaVk4mPoBLemrFV1i7QnwSWvxI/JymHpH8lp1Zn9PjV70huS+mn3iirUXCN27uig\nx1/mUnjeX2SBDfVNkNa+gJ3mChlmqQHXT5H7cbv73l3ystVc2YA+EUZ8Jj3J2c1Q\n0TfPdYC06SlTsHXCWmwKXRBlcb5iPOFpWRu6lEauEyQmTifX+c5ipnIzsBjMia3Q\nLQQHujbdFwNAbz9N2EiDsQV5dxSUtN8/zDMjCfvFb12Lw/k9onvt80e6yrTM208+\nplDVW+g8/1YmiIOeBHMUT2zQB8hkV8CBqba3q0DYakQtEyZfeVS/4etcYOY7ssc=\n=CQsv\n-----END PGP SIGNATURE-----",
        "payload": "tree 9d383afed19f5da6ecd0e90cf64550b86cb4f9d4\nparent e43a58514dd38dacd930aa4c94afb998d4360183\nparent 00e623d0b8cd1c261a2671aa8ab221a0474bc7c8\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487250060 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487250074 +0100\n\nMerge #9763: [Trivial] Update comments referencing main.cpp\n\n00e623d [Trivial] Update comments referencing main.cpp (CryptAxe)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8743320d6cb31291c0786b33124209b76f6c1904",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8743320d6cb31291c0786b33124209b76f6c1904",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8743320d6cb31291c0786b33124209b76f6c1904/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e43a58514dd38dacd930aa4c94afb998d4360183",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e43a58514dd38dacd930aa4c94afb998d4360183",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e43a58514dd38dacd930aa4c94afb998d4360183"
      },
      {
        "sha": "00e623d0b8cd1c261a2671aa8ab221a0474bc7c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00e623d0b8cd1c261a2671aa8ab221a0474bc7c8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/00e623d0b8cd1c261a2671aa8ab221a0474bc7c8"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "b932b2dd853ff0e710e037f2d431e850551dd635",
        "filename": "CONTRIBUTING.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8743320d6cb31291c0786b33124209b76f6c1904/CONTRIBUTING.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8743320d6cb31291c0786b33124209b76f6c1904/CONTRIBUTING.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/CONTRIBUTING.md?ref=8743320d6cb31291c0786b33124209b76f6c1904",
        "patch": "@@ -38,7 +38,7 @@ fixes or code moves with actual code changes.\n Commit messages should be verbose by default consisting of a short subject line\n (50 chars max), a blank line and detailed explanatory text as separate\n paragraph(s); unless the title alone is self-explanatory (like \"Corrected typo\n-in main.cpp\") then a single title line is sufficient. Commit messages should be\n+in init.cpp\") then a single title line is sufficient. Commit messages should be\n helpful to people reading your code in the future, so explain the reasoning for\n your decisions. Further explanation [here](http://chris.beams.io/posts/git-commit/).\n \n@@ -79,7 +79,7 @@ Examples:\n     Consensus: Add new opcode for BIP-XXXX OP_CHECKAWESOMESIG\n     Net: Automatically create hidden service, listen on Tor\n     Qt: Add feed bump button\n-    Trivial: Fix typo in main.cpp\n+    Trivial: Fix typo in init.cpp\n \n If a pull request is specifically not to be considered for merging (yet) please\n prefix the title with [WIP] or use [Tasks Lists](https://help.github.com/articles/basic-writing-and-formatting-syntax/#task-lists)"
      },
      {
        "sha": "c62e6ae838a94b03f3055e9c1921c2b656449958",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8743320d6cb31291c0786b33124209b76f6c1904/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8743320d6cb31291c0786b33124209b76f6c1904/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=8743320d6cb31291c0786b33124209b76f6c1904",
        "patch": "@@ -23,7 +23,7 @@\n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n-// Tests this internal-to-main.cpp method:\n+// Tests these internal-to-net_processing.cpp methods:\n extern bool AddOrphanTx(const CTransactionRef& tx, NodeId peer);\n extern void EraseOrphansFor(NodeId peer);\n extern unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans);"
      },
      {
        "sha": "5842dd88d838c8159b79d97d349ecdfe5d9ffa43",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8743320d6cb31291c0786b33124209b76f6c1904/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8743320d6cb31291c0786b33124209b76f6c1904/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=8743320d6cb31291c0786b33124209b76f6c1904",
        "patch": "@@ -395,7 +395,7 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n {\n     NotifyEntryAdded(entry.GetSharedTx());\n     // Add to memory pool without checking anything.\n-    // Used by main.cpp AcceptToMemoryPool(), which DOES do\n+    // Used by AcceptToMemoryPool(), which DOES do\n     // all the appropriate checks.\n     LOCK(cs);\n     indexed_transaction_set::iterator newit = mapTx.insert(entry).first;"
      }
    ]
  },
  {
    "sha": "8be0866883ff4efec9182194e900a05742e1b322",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YmUwODY2ODgzZmY0ZWZlYzkxODIxOTRlOTAwYTA1NzQyZTFiMzIy",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-14T20:00:34Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-16T14:05:55Z"
      },
      "message": "[qa] Simplify import-rescan.py\n\nGet rid of partial functions so the test can be more easily extended to add\nmore variants of imports with options that affect rescanning (e.g. different\nkey timestamps).\n\nAlso change the second half of the test to send /to/ the imported addresses,\ninstead of /from/ the imported addresses. The goal of this part of the test was\nto confirm that the wallet would pick up new transactions after an import\nregardless of whether or not a rescan happened during the import. But because\nthe wallet can only do this reliably for incoming transactions and not outgoing\ntransactions (which require the wallet to look up transaction inputs) the test\npreviously was less meaningful than it should have been.",
      "tree": {
        "sha": "a29c555b05eccd3c9e386d558724740e93eb8cb0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a29c555b05eccd3c9e386d558724740e93eb8cb0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8be0866883ff4efec9182194e900a05742e1b322",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8be0866883ff4efec9182194e900a05742e1b322",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8be0866883ff4efec9182194e900a05742e1b322",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8be0866883ff4efec9182194e900a05742e1b322/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "afae75fd3dad48b7a5db72732141d421c6864b9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afae75fd3dad48b7a5db72732141d421c6864b9b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/afae75fd3dad48b7a5db72732141d421c6864b9b"
      }
    ],
    "stats": {
      "total": 224,
      "additions": 112,
      "deletions": 112
    },
    "files": [
      {
        "sha": "7734ad5e47e85b5366ff7de2c280f12b97be7e49",
        "filename": "qa/rpc-tests/import-rescan.py",
        "status": "modified",
        "additions": 112,
        "deletions": 112,
        "changes": 224,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8be0866883ff4efec9182194e900a05742e1b322/qa/rpc-tests/import-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8be0866883ff4efec9182194e900a05742e1b322/qa/rpc-tests/import-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/import-rescan.py?ref=8be0866883ff4efec9182194e900a05742e1b322",
        "patch": "@@ -2,6 +2,22 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test rescan behavior of importaddress, importpubkey, importprivkey, and\n+importmulti RPCs with different types of keys and rescan options.\n+\n+Test uses three connected nodes.\n+\n+In the first part of the test, node 0 creates an address for each type of\n+import RPC call and sends BTC to it. Then nodes 1 and 2 import the addresses,\n+and the test makes listtransactions and getbalance calls to confirm that the\n+importing node either did or did not execute rescans picking up the send\n+transactions.\n+\n+In the second part of the test, node 0 sends more BTC to each address, and the\n+test makes more listtransactions and getbalance calls to confirm that the\n+importing nodes pick up the new transactions regardless of whether rescans\n+happened previously.\n+\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (start_nodes, connect_nodes, sync_blocks, assert_equal)\n@@ -10,53 +26,72 @@\n import collections\n import enum\n import itertools\n-import functools\n \n Call = enum.Enum(\"Call\", \"single multi\")\n Data = enum.Enum(\"Data\", \"address pub priv\")\n-ImportNode = collections.namedtuple(\"ImportNode\", \"rescan\")\n-\n-\n-def call_import_rpc(call, data, address, scriptPubKey, pubkey, key, label, node, rescan):\n-    \"\"\"Helper that calls a wallet import RPC on a bitcoin node.\"\"\"\n-    watchonly = data != Data.priv\n-    if call == Call.single:\n-        if data == Data.address:\n-            response = node.importaddress(address, label, rescan)\n-        elif data == Data.pub:\n-            response = node.importpubkey(pubkey, label, rescan)\n-        elif data == Data.priv:\n-            response = node.importprivkey(key, label, rescan)\n-        assert_equal(response, None)\n-    elif call == Call.multi:\n-        response = node.importmulti([{\n-            \"scriptPubKey\": {\n-                \"address\": address\n-            },\n-            \"timestamp\": \"now\",\n-            \"pubkeys\": [pubkey] if data == Data.pub else [],\n-            \"keys\": [key] if data == Data.priv else [],\n-            \"label\": label,\n-            \"watchonly\": watchonly\n-        }], {\"rescan\": rescan})\n-        assert_equal(response, [{\"success\": True}])\n-    return watchonly\n-\n-\n-# List of RPCs that import a wallet key or address in various ways.\n-IMPORT_RPCS = [functools.partial(call_import_rpc, call, data) for call, data in itertools.product(Call, Data)]\n-\n-# List of bitcoind nodes that will import keys.\n-IMPORT_NODES = [\n-    ImportNode(rescan=True),\n-    ImportNode(rescan=False),\n-]\n+Rescan = enum.Enum(\"Rescan\", \"no yes\")\n+\n+\n+class Variant(collections.namedtuple(\"Variant\", \"call data rescan\")):\n+    \"\"\"Helper for importing one key and verifying scanned transactions.\"\"\"\n+\n+    def do_import(self):\n+        \"\"\"Call one key import RPC.\"\"\"\n+\n+        if self.call == Call.single:\n+            if self.data == Data.address:\n+                response = self.node.importaddress(self.address[\"address\"], self.label, self.rescan == Rescan.yes)\n+            elif self.data == Data.pub:\n+                response = self.node.importpubkey(self.address[\"pubkey\"], self.label, self.rescan == Rescan.yes)\n+            elif self.data == Data.priv:\n+                response = self.node.importprivkey(self.key, self.label, self.rescan == Rescan.yes)\n+            assert_equal(response, None)\n+        elif self.call == Call.multi:\n+            response = self.node.importmulti([{\n+                \"scriptPubKey\": {\n+                    \"address\": self.address[\"address\"]\n+                },\n+                \"timestamp\": \"now\",\n+                \"pubkeys\": [self.address[\"pubkey\"]] if self.data == Data.pub else [],\n+                \"keys\": [self.key] if self.data == Data.priv else [],\n+                \"label\": self.label,\n+                \"watchonly\": self.data != Data.priv\n+            }], {\"rescan\": self.rescan == Rescan.yes})\n+            assert_equal(response, [{\"success\": True}])\n+\n+    def check(self, txid=None, amount=None):\n+        \"\"\"Verify that getbalance/listtransactions return expected values.\"\"\"\n+\n+        balance = self.node.getbalance(self.label, 0, True)\n+        assert_equal(balance, self.expected_balance)\n+\n+        txs = self.node.listtransactions(self.label, 10000, 0, True)\n+        assert_equal(len(txs), self.expected_txs)\n+\n+        if txid is not None:\n+            tx, = [tx for tx in txs if tx[\"txid\"] == txid]\n+            assert_equal(tx[\"account\"], self.label)\n+            assert_equal(tx[\"address\"], self.address[\"address\"])\n+            assert_equal(tx[\"amount\"], amount)\n+            assert_equal(tx[\"category\"], \"receive\")\n+            assert_equal(tx[\"label\"], self.label)\n+            assert_equal(tx[\"txid\"], txid)\n+            assert_equal(tx[\"confirmations\"], 1)\n+            assert_equal(\"trusted\" not in tx, True)\n+            if self.data != Data.priv:\n+                assert_equal(tx[\"involvesWatchonly\"], True)\n+            else:\n+                assert_equal(\"involvesWatchonly\" not in tx, True)\n+\n+\n+# List of Variants for each way a key or address could be imported.\n+IMPORT_VARIANTS = [Variant(*variants) for variants in itertools.product(Call, Data, Rescan)]\n \n \n class ImportRescanTest(BitcoinTestFramework):\n     def __init__(self):\n         super().__init__()\n-        self.num_nodes = 1 + len(IMPORT_NODES)\n+        self.num_nodes = 3\n \n     def setup_network(self):\n         extra_args = [[\"-debug=1\"] for _ in range(self.num_nodes)]\n@@ -67,89 +102,54 @@ def setup_network(self):\n     def run_test(self):\n         # Create one transaction on node 0 with a unique amount and label for\n         # each possible type of wallet import RPC.\n-        import_rpc_variants = []\n-        for i, import_rpc in enumerate(IMPORT_RPCS):\n-            label = \"label{}\".format(i)\n-            addr = self.nodes[0].validateaddress(self.nodes[0].getnewaddress(label))\n-            key = self.nodes[0].dumpprivkey(addr[\"address\"])\n-            amount = 24.9375 - i * .0625\n-            txid = self.nodes[0].sendtoaddress(addr[\"address\"], amount)\n-            import_rpc = functools.partial(import_rpc, addr[\"address\"], addr[\"scriptPubKey\"], addr[\"pubkey\"], key,\n-                                           label)\n-            import_rpc_variants.append((import_rpc, label, amount, txid, addr))\n-\n+        for i, variant in enumerate(IMPORT_VARIANTS):\n+            variant.label = \"label {} {}\".format(i, variant)\n+            variant.address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress(variant.label))\n+            variant.key = self.nodes[0].dumpprivkey(variant.address[\"address\"])\n+            variant.initial_amount = 25 - (i + 1) / 4.0\n+            variant.initial_txid = self.nodes[0].sendtoaddress(variant.address[\"address\"], variant.initial_amount)\n+\n+        # Generate a block containing the initial transactions.\n         self.nodes[0].generate(1)\n         assert_equal(self.nodes[0].getrawmempool(), [])\n         sync_blocks(self.nodes)\n \n-        # For each importing node and variation of wallet import RPC, invoke\n-        # the RPC and check the results from getbalance and listtransactions.\n-        for node, import_node in zip(self.nodes[1:], IMPORT_NODES):\n-            for import_rpc, label, amount, txid, addr in import_rpc_variants:\n-                watchonly = import_rpc(node, import_node.rescan)\n-\n-                balance = node.getbalance(label, 0, True)\n-                if import_node.rescan:\n-                    assert_equal(balance, amount)\n-                else:\n-                    assert_equal(balance, 0)\n-\n-                txs = node.listtransactions(label, 10000, 0, True)\n-                if import_node.rescan:\n-                    assert_equal(len(txs), 1)\n-                    assert_equal(txs[0][\"account\"], label)\n-                    assert_equal(txs[0][\"address\"], addr[\"address\"])\n-                    assert_equal(txs[0][\"amount\"], amount)\n-                    assert_equal(txs[0][\"category\"], \"receive\")\n-                    assert_equal(txs[0][\"label\"], label)\n-                    assert_equal(txs[0][\"txid\"], txid)\n-                    assert_equal(txs[0][\"confirmations\"], 1)\n-                    assert_equal(\"trusted\" not in txs[0], True)\n-                    if watchonly:\n-                        assert_equal(txs[0][\"involvesWatchonly\"], True)\n-                    else:\n-                        assert_equal(\"involvesWatchonly\" not in txs[0], True)\n-                else:\n-                    assert_equal(len(txs), 0)\n-\n-        # Create spends for all the imported addresses.\n-        spend_txids = []\n+        # For each variation of wallet key import, invoke the import RPC and\n+        # check the results from getbalance and listtransactions. Import to\n+        # node 1 if rescanning is expected, and to node 2 if rescanning is not\n+        # expected. Node 2 is reserved for imports that do not cause rescans,\n+        # so later import calls don't inadvertently cause the wallet to pick up\n+        # transactions from earlier import calls where a rescan was not\n+        # expected (this would make it complicated to figure out expected\n+        # balances in the second part of the test.)\n+        for variant in IMPORT_VARIANTS:\n+            variant.node = self.nodes[1 if variant.rescan == Rescan.yes else 2]\n+            variant.do_import()\n+            if variant.rescan == Rescan.yes:\n+                variant.expected_balance = variant.initial_amount\n+                variant.expected_txs = 1\n+                variant.check(variant.initial_txid, variant.initial_amount)\n+            else:\n+                variant.expected_balance = 0\n+                variant.expected_txs = 0\n+                variant.check()\n+\n+        # Create new transactions sending to each address.\n         fee = self.nodes[0].getnetworkinfo()[\"relayfee\"]\n-        for import_rpc, label, amount, txid, addr in import_rpc_variants:\n-            raw_tx = self.nodes[0].getrawtransaction(txid)\n-            decoded_tx = self.nodes[0].decoderawtransaction(raw_tx)\n-            input_vout = next(out[\"n\"] for out in decoded_tx[\"vout\"]\n-                              if out[\"scriptPubKey\"][\"addresses\"] == [addr[\"address\"]])\n-            inputs = [{\"txid\": txid, \"vout\": input_vout}]\n-            outputs = {self.nodes[0].getnewaddress(): Decimal(amount) - fee}\n-            raw_spend_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_spend_tx = self.nodes[0].signrawtransaction(raw_spend_tx)\n-            spend_txid = self.nodes[0].sendrawtransaction(signed_spend_tx[\"hex\"])\n-            spend_txids.append(spend_txid)\n+        for i, variant in enumerate(IMPORT_VARIANTS):\n+            variant.sent_amount = 25 - (2 * i + 1) / 8.0\n+            variant.sent_txid = self.nodes[0].sendtoaddress(variant.address[\"address\"], variant.sent_amount)\n \n+        # Generate a block containing the new transactions.\n         self.nodes[0].generate(1)\n         assert_equal(self.nodes[0].getrawmempool(), [])\n         sync_blocks(self.nodes)\n \n-        # Check the results from getbalance and listtransactions after the spends.\n-        for node, import_node in zip(self.nodes[1:], IMPORT_NODES):\n-            txs = node.listtransactions(\"*\", 10000, 0, True)\n-            for (import_rpc, label, amount, txid, addr), spend_txid in zip(import_rpc_variants, spend_txids):\n-                balance = node.getbalance(label, 0, True)\n-                spend_tx = [tx for tx in txs if tx[\"txid\"] == spend_txid]\n-                if import_node.rescan:\n-                    assert_equal(balance, amount)\n-                    assert_equal(len(spend_tx), 1)\n-                    assert_equal(spend_tx[0][\"account\"], \"\")\n-                    assert_equal(spend_tx[0][\"amount\"] + spend_tx[0][\"fee\"], -amount)\n-                    assert_equal(spend_tx[0][\"category\"], \"send\")\n-                    assert_equal(\"label\" not in spend_tx[0], True)\n-                    assert_equal(spend_tx[0][\"confirmations\"], 1)\n-                    assert_equal(\"trusted\" not in spend_tx[0], True)\n-                    assert_equal(\"involvesWatchonly\" not in txs[0], True)\n-                else:\n-                    assert_equal(balance, 0)\n-                    assert_equal(spend_tx, [])\n+        # Check the latest results from getbalance and listtransactions.\n+        for variant in IMPORT_VARIANTS:\n+            variant.expected_balance += variant.sent_amount\n+            variant.expected_txs += 1\n+            variant.check(variant.sent_txid, variant.sent_amount)\n \n \n if __name__ == \"__main__\":"
      }
    ]
  },
  {
    "sha": "c28583d0629bc6e12ea5d8c660c9b3586be5ad71",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMjg1ODNkMDYyOWJjNmUxMmVhNWQ4YzY2MGM5YjM1ODZiZTVhZDcx",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-14T22:39:26Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-16T14:05:55Z"
      },
      "message": "[qa] Extend import-rescan.py to test specific key timestamps",
      "tree": {
        "sha": "4926d531316e4a934f81ce21416a195a4df8d349",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4926d531316e4a934f81ce21416a195a4df8d349"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c28583d0629bc6e12ea5d8c660c9b3586be5ad71",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c28583d0629bc6e12ea5d8c660c9b3586be5ad71",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c28583d0629bc6e12ea5d8c660c9b3586be5ad71",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c28583d0629bc6e12ea5d8c660c9b3586be5ad71/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8be0866883ff4efec9182194e900a05742e1b322",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8be0866883ff4efec9182194e900a05742e1b322",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8be0866883ff4efec9182194e900a05742e1b322"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 15,
      "deletions": 11
    },
    "files": [
      {
        "sha": "7ca606828f3f52829ca359a484e4b9f9739a5aa2",
        "filename": "qa/rpc-tests/import-rescan.py",
        "status": "modified",
        "additions": 15,
        "deletions": 11,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c28583d0629bc6e12ea5d8c660c9b3586be5ad71/qa/rpc-tests/import-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c28583d0629bc6e12ea5d8c660c9b3586be5ad71/qa/rpc-tests/import-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/import-rescan.py?ref=c28583d0629bc6e12ea5d8c660c9b3586be5ad71",
        "patch": "@@ -20,7 +20,7 @@\n \"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (start_nodes, connect_nodes, sync_blocks, assert_equal)\n+from test_framework.util import (start_nodes, connect_nodes, sync_blocks, assert_equal, set_node_times)\n from decimal import Decimal\n \n import collections\n@@ -29,13 +29,13 @@\n \n Call = enum.Enum(\"Call\", \"single multi\")\n Data = enum.Enum(\"Data\", \"address pub priv\")\n-Rescan = enum.Enum(\"Rescan\", \"no yes\")\n+Rescan = enum.Enum(\"Rescan\", \"no yes late_timestamp\")\n \n \n class Variant(collections.namedtuple(\"Variant\", \"call data rescan\")):\n     \"\"\"Helper for importing one key and verifying scanned transactions.\"\"\"\n \n-    def do_import(self):\n+    def do_import(self, timestamp):\n         \"\"\"Call one key import RPC.\"\"\"\n \n         if self.call == Call.single:\n@@ -51,15 +51,15 @@ def do_import(self):\n                 \"scriptPubKey\": {\n                     \"address\": self.address[\"address\"]\n                 },\n-                \"timestamp\": \"now\",\n+                \"timestamp\": timestamp + (1 if self.rescan == Rescan.late_timestamp else 0),\n                 \"pubkeys\": [self.address[\"pubkey\"]] if self.data == Data.pub else [],\n                 \"keys\": [self.key] if self.data == Data.priv else [],\n                 \"label\": self.label,\n                 \"watchonly\": self.data != Data.priv\n-            }], {\"rescan\": self.rescan == Rescan.yes})\n+            }], {\"rescan\": self.rescan in (Rescan.yes, Rescan.late_timestamp)})\n             assert_equal(response, [{\"success\": True}])\n \n-    def check(self, txid=None, amount=None):\n+    def check(self, txid=None, amount=None, confirmations=None):\n         \"\"\"Verify that getbalance/listtransactions return expected values.\"\"\"\n \n         balance = self.node.getbalance(self.label, 0, True)\n@@ -76,7 +76,7 @@ def check(self, txid=None, amount=None):\n             assert_equal(tx[\"category\"], \"receive\")\n             assert_equal(tx[\"label\"], self.label)\n             assert_equal(tx[\"txid\"], txid)\n-            assert_equal(tx[\"confirmations\"], 1)\n+            assert_equal(tx[\"confirmations\"], confirmations)\n             assert_equal(\"trusted\" not in tx, True)\n             if self.data != Data.priv:\n                 assert_equal(tx[\"involvesWatchonly\"], True)\n@@ -109,9 +109,13 @@ def run_test(self):\n             variant.initial_amount = 25 - (i + 1) / 4.0\n             variant.initial_txid = self.nodes[0].sendtoaddress(variant.address[\"address\"], variant.initial_amount)\n \n-        # Generate a block containing the initial transactions.\n+        # Generate a block containing the initial transactions, then another\n+        # block further in the future (past the rescan window).\n         self.nodes[0].generate(1)\n         assert_equal(self.nodes[0].getrawmempool(), [])\n+        timestamp = self.nodes[0].getblockheader(self.nodes[0].getbestblockhash())[\"time\"]\n+        set_node_times(self.nodes, timestamp + 1)\n+        self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n \n         # For each variation of wallet key import, invoke the import RPC and\n@@ -124,11 +128,11 @@ def run_test(self):\n         # balances in the second part of the test.)\n         for variant in IMPORT_VARIANTS:\n             variant.node = self.nodes[1 if variant.rescan == Rescan.yes else 2]\n-            variant.do_import()\n+            variant.do_import(timestamp)\n             if variant.rescan == Rescan.yes:\n                 variant.expected_balance = variant.initial_amount\n                 variant.expected_txs = 1\n-                variant.check(variant.initial_txid, variant.initial_amount)\n+                variant.check(variant.initial_txid, variant.initial_amount, 2)\n             else:\n                 variant.expected_balance = 0\n                 variant.expected_txs = 0\n@@ -149,7 +153,7 @@ def run_test(self):\n         for variant in IMPORT_VARIANTS:\n             variant.expected_balance += variant.sent_amount\n             variant.expected_txs += 1\n-            variant.check(variant.sent_txid, variant.sent_amount)\n+            variant.check(variant.sent_txid, variant.sent_amount, 1)\n \n \n if __name__ == \"__main__\":"
      }
    ]
  },
  {
    "sha": "38d3e9ee5900dffb02207211ad5da8f0751e4605",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOGQzZTllZTU5MDBkZmZiMDIyMDcyMTFhZDVkYThmMDc1MWU0NjA1",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-15T16:28:50Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-16T14:05:55Z"
      },
      "message": "[qa] Extend import-rescan.py to test imports on pruned nodes.",
      "tree": {
        "sha": "7b83d3c55885ff95d0bd6e30349537987a23eb58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7b83d3c55885ff95d0bd6e30349537987a23eb58"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/38d3e9ee5900dffb02207211ad5da8f0751e4605",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38d3e9ee5900dffb02207211ad5da8f0751e4605",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/38d3e9ee5900dffb02207211ad5da8f0751e4605",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38d3e9ee5900dffb02207211ad5da8f0751e4605/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c28583d0629bc6e12ea5d8c660c9b3586be5ad71",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c28583d0629bc6e12ea5d8c660c9b3586be5ad71",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c28583d0629bc6e12ea5d8c660c9b3586be5ad71"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 43,
      "deletions": 21
    },
    "files": [
      {
        "sha": "bd03491f11b1605d37f907692ea5c49bc3f68413",
        "filename": "qa/rpc-tests/import-rescan.py",
        "status": "modified",
        "additions": 43,
        "deletions": 21,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38d3e9ee5900dffb02207211ad5da8f0751e4605/qa/rpc-tests/import-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38d3e9ee5900dffb02207211ad5da8f0751e4605/qa/rpc-tests/import-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/import-rescan.py?ref=38d3e9ee5900dffb02207211ad5da8f0751e4605",
        "patch": "@@ -5,10 +5,8 @@\n \"\"\"Test rescan behavior of importaddress, importpubkey, importprivkey, and\n importmulti RPCs with different types of keys and rescan options.\n \n-Test uses three connected nodes.\n-\n In the first part of the test, node 0 creates an address for each type of\n-import RPC call and sends BTC to it. Then nodes 1 and 2 import the addresses,\n+import RPC call and sends BTC to it. Then other nodes import the addresses,\n and the test makes listtransactions and getbalance calls to confirm that the\n importing node either did or did not execute rescans picking up the send\n transactions.\n@@ -19,6 +17,7 @@\n happened previously.\n \"\"\"\n \n+from test_framework.authproxy import JSONRPCException\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (start_nodes, connect_nodes, sync_blocks, assert_equal, set_node_times)\n from decimal import Decimal\n@@ -32,20 +31,24 @@\n Rescan = enum.Enum(\"Rescan\", \"no yes late_timestamp\")\n \n \n-class Variant(collections.namedtuple(\"Variant\", \"call data rescan\")):\n+class Variant(collections.namedtuple(\"Variant\", \"call data rescan prune\")):\n     \"\"\"Helper for importing one key and verifying scanned transactions.\"\"\"\n \n     def do_import(self, timestamp):\n         \"\"\"Call one key import RPC.\"\"\"\n \n         if self.call == Call.single:\n             if self.data == Data.address:\n-                response = self.node.importaddress(self.address[\"address\"], self.label, self.rescan == Rescan.yes)\n+                response, error = try_rpc(self.node.importaddress, self.address[\"address\"], self.label,\n+                                          self.rescan == Rescan.yes)\n             elif self.data == Data.pub:\n-                response = self.node.importpubkey(self.address[\"pubkey\"], self.label, self.rescan == Rescan.yes)\n+                response, error = try_rpc(self.node.importpubkey, self.address[\"pubkey\"], self.label,\n+                                          self.rescan == Rescan.yes)\n             elif self.data == Data.priv:\n-                response = self.node.importprivkey(self.key, self.label, self.rescan == Rescan.yes)\n+                response, error = try_rpc(self.node.importprivkey, self.key, self.label, self.rescan == Rescan.yes)\n             assert_equal(response, None)\n+            assert_equal(error, {'message': 'Rescan is disabled in pruned mode',\n+                                 'code': -4} if self.expect_disabled else None)\n         elif self.call == Call.multi:\n             response = self.node.importmulti([{\n                 \"scriptPubKey\": {\n@@ -85,16 +88,29 @@ def check(self, txid=None, amount=None, confirmations=None):\n \n \n # List of Variants for each way a key or address could be imported.\n-IMPORT_VARIANTS = [Variant(*variants) for variants in itertools.product(Call, Data, Rescan)]\n+IMPORT_VARIANTS = [Variant(*variants) for variants in itertools.product(Call, Data, Rescan, (False, True))]\n+\n+# List of nodes to import keys to. Half the nodes will have pruning disabled,\n+# half will have it enabled. Different nodes will be used for imports that are\n+# expected to cause rescans, and imports that are not expected to cause\n+# rescans, in order to prevent rescans during later imports picking up\n+# transactions associated with earlier imports. This makes it easier to keep\n+# track of expected balances and transactions.\n+ImportNode = collections.namedtuple(\"ImportNode\", \"prune rescan\")\n+IMPORT_NODES = [ImportNode(*fields) for fields in itertools.product((False, True), repeat=2)]\n \n \n class ImportRescanTest(BitcoinTestFramework):\n     def __init__(self):\n         super().__init__()\n-        self.num_nodes = 3\n+        self.num_nodes = 1 + len(IMPORT_NODES)\n \n     def setup_network(self):\n         extra_args = [[\"-debug=1\"] for _ in range(self.num_nodes)]\n+        for i, import_node in enumerate(IMPORT_NODES, 1):\n+            if import_node.prune:\n+                extra_args[i] += [\"-prune=1\"]\n+\n         self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n         for i in range(1, self.num_nodes):\n             connect_nodes(self.nodes[i], 0)\n@@ -119,17 +135,13 @@ def run_test(self):\n         sync_blocks(self.nodes)\n \n         # For each variation of wallet key import, invoke the import RPC and\n-        # check the results from getbalance and listtransactions. Import to\n-        # node 1 if rescanning is expected, and to node 2 if rescanning is not\n-        # expected. Node 2 is reserved for imports that do not cause rescans,\n-        # so later import calls don't inadvertently cause the wallet to pick up\n-        # transactions from earlier import calls where a rescan was not\n-        # expected (this would make it complicated to figure out expected\n-        # balances in the second part of the test.)\n+        # check the results from getbalance and listtransactions.\n         for variant in IMPORT_VARIANTS:\n-            variant.node = self.nodes[1 if variant.rescan == Rescan.yes else 2]\n+            variant.expect_disabled = variant.rescan == Rescan.yes and variant.prune and variant.call == Call.single\n+            expect_rescan = variant.rescan == Rescan.yes and not variant.expect_disabled\n+            variant.node = self.nodes[1 + IMPORT_NODES.index(ImportNode(variant.prune, expect_rescan))]\n             variant.do_import(timestamp)\n-            if variant.rescan == Rescan.yes:\n+            if expect_rescan:\n                 variant.expected_balance = variant.initial_amount\n                 variant.expected_txs = 1\n                 variant.check(variant.initial_txid, variant.initial_amount, 2)\n@@ -151,9 +163,19 @@ def run_test(self):\n \n         # Check the latest results from getbalance and listtransactions.\n         for variant in IMPORT_VARIANTS:\n-            variant.expected_balance += variant.sent_amount\n-            variant.expected_txs += 1\n-            variant.check(variant.sent_txid, variant.sent_amount, 1)\n+            if not variant.expect_disabled:\n+                variant.expected_balance += variant.sent_amount\n+                variant.expected_txs += 1\n+                variant.check(variant.sent_txid, variant.sent_amount, 1)\n+            else:\n+                variant.check()\n+\n+\n+def try_rpc(func, *args, **kwargs):\n+    try:\n+        return func(*args, **kwargs), None\n+    except JSONRPCException as e:\n+        return None, e.error\n \n \n if __name__ == \"__main__\":"
      }
    ]
  },
  {
    "sha": "afae75fd3dad48b7a5db72732141d421c6864b9b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZmFlNzVmZDNkYWQ0OGI3YTVkYjcyNzMyMTQxZDQyMWM2ODY0Yjli",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-16T14:05:46Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-16T14:05:55Z"
      },
      "message": "Merge #9675: Fix typo and spelling inconsistency in CONTRIBUTING.md\n\n36164fa Fix typo and spelling inconsistency in CONTRIBUTING.md (Koki Takahashi)",
      "tree": {
        "sha": "da1b8a35399fa0137a9dff85f67a9b2b5315d759",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da1b8a35399fa0137a9dff85f67a9b2b5315d759"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/afae75fd3dad48b7a5db72732141d421c6864b9b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYpbHDAAoJEHSBCwEjRsmmRMIH/j2wo1CTFN2AL1uXgN8TtAd4\nBWlIjcqozAy2GD48roo8QrPkD8/xzHAbLL3HZfGD9X5R2i3VJGCvhXcsUzRvTr8O\nkQJcGFI83qe1/eLGISw0m94yLV2/2Hg6ONcXarpBQbzPWPpSEqFA44zgFHVFTJQG\nTVu6WY/ENaSICXP41CAzPT97Q0GljBO+G58jU3DAbHd6GGqiqleF7VQWg+OZiChV\nz5EXT2EwjeFI9QO1FaVl/7oAuXg8uQHBsNja6XW0bvG18kWN5t1j1ZU4bKhUVgjV\nyJ8xKBtNiQIAxbABjmvcczW8T6l2t5BkYkFb7loTP4VD20UFtGavixL0O/Bzc00=\n=5Vj5\n-----END PGP SIGNATURE-----",
        "payload": "tree da1b8a35399fa0137a9dff85f67a9b2b5315d759\nparent 8743320d6cb31291c0786b33124209b76f6c1904\nparent 36164faa338d387177c6328496f63ac11eda3b78\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487253946 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487253955 +0100\n\nMerge #9675: Fix typo and spelling inconsistency in CONTRIBUTING.md\n\n36164fa Fix typo and spelling inconsistency in CONTRIBUTING.md (Koki Takahashi)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afae75fd3dad48b7a5db72732141d421c6864b9b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/afae75fd3dad48b7a5db72732141d421c6864b9b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afae75fd3dad48b7a5db72732141d421c6864b9b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8743320d6cb31291c0786b33124209b76f6c1904",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8743320d6cb31291c0786b33124209b76f6c1904",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8743320d6cb31291c0786b33124209b76f6c1904"
      },
      {
        "sha": "36164faa338d387177c6328496f63ac11eda3b78",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36164faa338d387177c6328496f63ac11eda3b78",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/36164faa338d387177c6328496f63ac11eda3b78"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "fc8d58d97df49dfb039c8caee2293a82c93862c0",
        "filename": "CONTRIBUTING.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afae75fd3dad48b7a5db72732141d421c6864b9b/CONTRIBUTING.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afae75fd3dad48b7a5db72732141d421c6864b9b/CONTRIBUTING.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/CONTRIBUTING.md?ref=afae75fd3dad48b7a5db72732141d421c6864b9b",
        "patch": "@@ -194,7 +194,7 @@ request. Typically reviewers will review the code for obvious errors, as well as\n test out the patch set and opine on the technical merits of the patch. Project\n maintainers take into account the peer review when determining if there is\n consensus to merge a pull request (remember that discussions may have been\n-spread out over github, mailing list and IRC discussions). The following\n+spread out over GitHub, mailing list and IRC discussions). The following\n language is used within pull-request comments:\n \n   - ACK means \"I have tested the code and I agree it should be merged\";"
      },
      {
        "sha": "6f750106e4710dbe29eb95ab0f0a54454d488657",
        "filename": "contrib/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afae75fd3dad48b7a5db72732141d421c6864b9b/contrib/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afae75fd3dad48b7a5db72732141d421c6864b9b/contrib/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/README.md?ref=afae75fd3dad48b7a5db72732141d421c6864b9b",
        "patch": "@@ -3,7 +3,7 @@ Repository Tools\n \n ### [Developer tools](/contrib/devtools) ###\n Specific tools for developers working on this repository.\n-Contains the script `github-merge.py` for merging github pull requests securely and signing them using GPG.\n+Contains the script `github-merge.py` for merging GitHub pull requests securely and signing them using GPG.\n \n ### [Verify-Commits](/contrib/verify-commits) ###\n Tool to verify that every merge commit was signed by a developer using the above `github-merge.py` script."
      },
      {
        "sha": "67c5e15a15041f77122a8d0745a3164abde9e8d0",
        "filename": "contrib/devtools/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afae75fd3dad48b7a5db72732141d421c6864b9b/contrib/devtools/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afae75fd3dad48b7a5db72732141d421c6864b9b/contrib/devtools/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/README.md?ref=afae75fd3dad48b7a5db72732141d421c6864b9b",
        "patch": "@@ -125,7 +125,7 @@ check or whatever).\n \n This means that there are no potential race conditions (where a\n pullreq gets updated while you're reviewing it, but before you click\n-merge), and when using GPG signatures, that even a compromised github\n+merge), and when using GPG signatures, that even a compromised GitHub\n couldn't mess with the sources.\n \n Setup"
      },
      {
        "sha": "3a7e4f73b3d60d5a88e20615205d77aa056a7c9f",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afae75fd3dad48b7a5db72732141d421c6864b9b/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afae75fd3dad48b7a5db72732141d421c6864b9b/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=afae75fd3dad48b7a5db72732141d421c6864b9b",
        "patch": "@@ -448,7 +448,7 @@ Current subtrees include:\n   - Upstream at https://github.com/jgarzik/univalue ; report important PRs to Core to avoid delay.\n \n \n-Git and github tips\n+Git and GitHub tips\n ---------------------\n \n - For resolving merge/rebase conflicts, it can be useful to enable diff3 style using"
      },
      {
        "sha": "1702637d53ebd7a0c2f827ed114260d0f515ee51",
        "filename": "doc/translation_process.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afae75fd3dad48b7a5db72732141d421c6864b9b/doc/translation_process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afae75fd3dad48b7a5db72732141d421c6864b9b/doc/translation_process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/translation_process.md?ref=afae75fd3dad48b7a5db72732141d421c6864b9b",
        "patch": "@@ -4,7 +4,7 @@ Translations\n The Bitcoin-Core project has been designed to support multiple localisations. This makes adding new phrases, and completely new languages easily achievable. For managing all application translations, Bitcoin-Core makes use of the Transifex online translation management tool.\n \n ### Helping to translate (using Transifex)\n-Transifex is setup to monitor the Github repo for updates, and when code containing new translations is found, Transifex will process any changes. It may take several hours after a pull-request has been merged, to appear in the Transifex web interface.\n+Transifex is setup to monitor the GitHub repo for updates, and when code containing new translations is found, Transifex will process any changes. It may take several hours after a pull-request has been merged, to appear in the Transifex web interface.\n \n Multiple language support is critical in assisting Bitcoin\u2019s global adoption, and growth. One of Bitcoin\u2019s greatest strengths is cross-border money transfers, any help making that easier is greatly appreciated.\n \n@@ -32,7 +32,7 @@ QToolBar *toolbar = addToolBar(tr(\"Tabs toolbar\"));\n ### Creating a pull-request\n For general PRs, you shouldn\u2019t include any updates to the translation source files. They will be updated periodically, primarily around pre-releases, allowing time for any new phrases to be translated before public releases. This is also important in avoiding translation related merge conflicts.\n \n-When an updated source file is merged into the Github repo, Transifex will automatically detect it (although it can take several hours). Once processed, the new strings will show up as \"Remaining\" in the Transifex web interface and are ready for translators.\n+When an updated source file is merged into the GitHub repo, Transifex will automatically detect it (although it can take several hours). Once processed, the new strings will show up as \"Remaining\" in the Transifex web interface and are ready for translators.\n \n To create the pull-request, use the following commands:\n ```"
      },
      {
        "sha": "1019ff6653b7842f0e18371bc577eeb1faebd313",
        "filename": "doc/zmq.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afae75fd3dad48b7a5db72732141d421c6864b9b/doc/zmq.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afae75fd3dad48b7a5db72732141d421c6864b9b/doc/zmq.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/zmq.md?ref=afae75fd3dad48b7a5db72732141d421c6864b9b",
        "patch": "@@ -1,4 +1,4 @@\n-# Block and Transaction Broadcasting With ZeroMQ\n+# Block and Transaction Broadcasting with ZeroMQ\n \n [ZeroMQ](http://zeromq.org/) is a lightweight wrapper around TCP\n connections, inter-process communication, and shared-memory,\n@@ -50,7 +50,7 @@ during the *configure* step of building bitcoind:\n     $ ./configure --disable-zmq (other options)\n \n To actually enable operation, one must set the appropriate options on\n-the commandline or in the configuration file.\n+the command line or in the configuration file.\n \n ## Usage\n "
      }
    ]
  },
  {
    "sha": "e662af358305b9fa4da772ec37c8356a9fc92ab6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNjYyYWYzNTgzMDViOWZhNGRhNzcyZWMzN2M4MzU2YTlmYzkyYWI2",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-14T22:39:26Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-16T14:05:55Z"
      },
      "message": "Use 2 hour grace period for key timestamps in importmulti rescans\n\nGregory Maxwell <greg@xiph.org> pointed out the lack of grace period in\nhttps://github.com/bitcoin/bitcoin/pull/9490#issue-199407998.\n\nThe importwallet RPC which uses key timestamps in a similar way already has a 2\nhour grace period.",
      "tree": {
        "sha": "3af65e84fbad7dafc5ea8b7a31d4698434f55d58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3af65e84fbad7dafc5ea8b7a31d4698434f55d58"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e662af358305b9fa4da772ec37c8356a9fc92ab6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e662af358305b9fa4da772ec37c8356a9fc92ab6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e662af358305b9fa4da772ec37c8356a9fc92ab6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e662af358305b9fa4da772ec37c8356a9fc92ab6/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "38d3e9ee5900dffb02207211ad5da8f0751e4605",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38d3e9ee5900dffb02207211ad5da8f0751e4605",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/38d3e9ee5900dffb02207211ad5da8f0751e4605"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 8,
      "deletions": 4
    },
    "files": [
      {
        "sha": "54cc6d2642adff69688326786b403048b102fb38",
        "filename": "qa/rpc-tests/import-rescan.py",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e662af358305b9fa4da772ec37c8356a9fc92ab6/qa/rpc-tests/import-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e662af358305b9fa4da772ec37c8356a9fc92ab6/qa/rpc-tests/import-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/import-rescan.py?ref=e662af358305b9fa4da772ec37c8356a9fc92ab6",
        "patch": "@@ -54,7 +54,7 @@ def do_import(self, timestamp):\n                 \"scriptPubKey\": {\n                     \"address\": self.address[\"address\"]\n                 },\n-                \"timestamp\": timestamp + (1 if self.rescan == Rescan.late_timestamp else 0),\n+                \"timestamp\": timestamp + RESCAN_WINDOW + (1 if self.rescan == Rescan.late_timestamp else 0),\n                 \"pubkeys\": [self.address[\"pubkey\"]] if self.data == Data.pub else [],\n                 \"keys\": [self.key] if self.data == Data.priv else [],\n                 \"label\": self.label,\n@@ -99,6 +99,9 @@ def check(self, txid=None, amount=None, confirmations=None):\n ImportNode = collections.namedtuple(\"ImportNode\", \"prune rescan\")\n IMPORT_NODES = [ImportNode(*fields) for fields in itertools.product((False, True), repeat=2)]\n \n+# Rescans start at the earliest block up to 2 hours before the key timestamp.\n+RESCAN_WINDOW = 2 * 60 * 60\n+\n \n class ImportRescanTest(BitcoinTestFramework):\n     def __init__(self):\n@@ -130,7 +133,7 @@ def run_test(self):\n         self.nodes[0].generate(1)\n         assert_equal(self.nodes[0].getrawmempool(), [])\n         timestamp = self.nodes[0].getblockheader(self.nodes[0].getbestblockhash())[\"time\"]\n-        set_node_times(self.nodes, timestamp + 1)\n+        set_node_times(self.nodes, timestamp + RESCAN_WINDOW + 1)\n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n "
      },
      {
        "sha": "30f2414675a3894f217ccca936f572b0b8664d50",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e662af358305b9fa4da772ec37c8356a9fc92ab6/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e662af358305b9fa4da772ec37c8356a9fc92ab6/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=e662af358305b9fa4da772ec37c8356a9fc92ab6",
        "patch": "@@ -988,7 +988,8 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n             \"                                                              or the string \\\"now\\\" to substitute the current synced blockchain time. The timestamp of the oldest\\n\"\n             \"                                                              key will determine how far back blockchain rescans need to begin for missing wallet transactions.\\n\"\n             \"                                                              \\\"now\\\" can be specified to bypass scanning, for keys which are known to never have been used, and\\n\"\n-            \"                                                              0 can be specified to scan the entire blockchain.\\n\"\n+            \"                                                              0 can be specified to scan the entire blockchain. Blocks up to 2 hours before the earliest key\\n\"\n+            \"                                                              creation time of all keys being imported by the importmulti call will be scanned.\\n\"\n             \"      \\\"redeemscript\\\": \\\"<script>\\\"                            , (string, optional) Allowed only if the scriptPubKey is a P2SH address or a P2SH scriptPubKey\\n\"\n             \"      \\\"pubkeys\\\": [\\\"<pubKey>\\\", ... ]                         , (array, optional) Array of strings giving pubkeys that must occur in the output or redeemscript\\n\"\n             \"      \\\"keys\\\": [\\\"<key>\\\", ... ]                               , (array, optional) Array of strings giving private keys whose corresponding public keys must occur in the output or redeemscript\\n\"\n@@ -1072,7 +1073,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n     }\n \n     if (fRescan && fRunScan && requests.size() && nLowestTimestamp <= chainActive.Tip()->GetBlockTimeMax()) {\n-        CBlockIndex* pindex = nLowestTimestamp > minimumTimestamp ? chainActive.FindEarliestAtLeast(nLowestTimestamp) : chainActive.Genesis();\n+        CBlockIndex* pindex = nLowestTimestamp > minimumTimestamp ? chainActive.FindEarliestAtLeast(std::max<int64_t>(nLowestTimestamp - 7200, 0)) : chainActive.Genesis();\n \n         if (pindex) {\n             pwalletMain->ScanForWalletTransactions(pindex, true);"
      }
    ]
  },
  {
    "sha": "3f78e460ba980d38149ee50ff5dfd75741aad9f2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZjc4ZTQ2MGJhOTgwZDM4MTQ5ZWU1MGZmNWRmZDc1NzQxYWFkOWYy",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2017-02-16T19:31:03Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2017-02-16T19:31:03Z"
      },
      "message": "Update nMinimumChainWork and defaultAssumeValid.",
      "tree": {
        "sha": "bd1ff3b89846a7f3f14cc6295c7801e95c6c0dc6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd1ff3b89846a7f3f14cc6295c7801e95c6c0dc6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f78e460ba980d38149ee50ff5dfd75741aad9f2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f78e460ba980d38149ee50ff5dfd75741aad9f2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3f78e460ba980d38149ee50ff5dfd75741aad9f2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f78e460ba980d38149ee50ff5dfd75741aad9f2/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "afae75fd3dad48b7a5db72732141d421c6864b9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afae75fd3dad48b7a5db72732141d421c6864b9b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/afae75fd3dad48b7a5db72732141d421c6864b9b"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "383d9849af9752490c44b8259bd99692e21a2def",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f78e460ba980d38149ee50ff5dfd75741aad9f2/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f78e460ba980d38149ee50ff5dfd75741aad9f2/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=3f78e460ba980d38149ee50ff5dfd75741aad9f2",
        "patch": "@@ -97,10 +97,10 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 1510704000; // November 15th, 2017.\n \n         // The best chain should have at least this much work.\n-        consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000002cb971dd56d1c583c20f90\");\n+        consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000003f94d1ad391682fe038bf5\");\n \n         // By default assume that the signatures in ancestors of this block are valid.\n-        consensus.defaultAssumeValid = uint256S(\"0x0000000000000000030abc968e1bd635736e880b946085c93152969b9a81a6e2\"); //447235\n+        consensus.defaultAssumeValid = uint256S(\"0x00000000000000000013176bf8d7dfeab4e1db31dc93bc311b436e82ab226b90\"); //453354\n \n         /**\n          * The message start string is designed to be unlikely to occur in normal data.\n@@ -201,10 +201,10 @@ class CTestNetParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 1493596800; // May 1st 2017\n \n         // The best chain should have at least this much work.\n-        consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000000000198b4def2baa9338d6\");\n+        consensus.nMinimumChainWork = uint256S(\"0x00000000000000000000000000000000000000000000001f057509eba81aed91\");\n \n         // By default assume that the signatures in ancestors of this block are valid.\n-        consensus.defaultAssumeValid = uint256S(\"0x000000000871ee6842d3648317ccc8a435eb8cc3c2429aee94faff9ba26b05a0\"); //1043841\n+        consensus.defaultAssumeValid = uint256S(\"0x00000000000128796ee387cf110ccb9d2f36cffaf7f73079c995377c65ac0dcc\"); //1079274\n \n         pchMessageStart[0] = 0x0b;\n         pchMessageStart[1] = 0x11;"
      }
    ]
  },
  {
    "sha": "91fb506e0a156d5b4f2e9ca76ee8de0b591b2ee0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MWZiNTA2ZTBhMTU2ZDViNGYyZTljYTc2ZWU4ZGUwYjU5MWIyZWUw",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-02-16T16:07:15Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-02-16T22:47:56Z"
      },
      "message": "Add two hour buffer to manual pruning",
      "tree": {
        "sha": "e7125dd6ab4eca8a5fe9ac7b3940320c14441f31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e7125dd6ab4eca8a5fe9ac7b3940320c14441f31"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/91fb506e0a156d5b4f2e9ca76ee8de0b591b2ee0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91fb506e0a156d5b4f2e9ca76ee8de0b591b2ee0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/91fb506e0a156d5b4f2e9ca76ee8de0b591b2ee0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91fb506e0a156d5b4f2e9ca76ee8de0b591b2ee0/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "afae75fd3dad48b7a5db72732141d421c6864b9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afae75fd3dad48b7a5db72732141d421c6864b9b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/afae75fd3dad48b7a5db72732141d421c6864b9b"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "7b69c81ff9c42ac95bd8fc0f289607b77c65695d",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91fb506e0a156d5b4f2e9ca76ee8de0b591b2ee0/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91fb506e0a156d5b4f2e9ca76ee8de0b591b2ee0/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=91fb506e0a156d5b4f2e9ca76ee8de0b591b2ee0",
        "patch": "@@ -820,7 +820,8 @@ UniValue pruneblockchain(const JSONRPCRequest& request)\n         throw runtime_error(\n             \"pruneblockchain\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"height\\\"       (numeric, required) The block height to prune up to. May be set to a discrete height, or to a unix timestamp to prune based on block time.\\n\"\n+            \"1. \\\"height\\\"       (numeric, required) The block height to prune up to. May be set to a discrete height, or a unix timestamp\\n\"\n+            \"                  to prune blocks whose block time is at least 2 hours older than the provided timestamp.\\n\"\n             \"\\nResult:\\n\"\n             \"n    (numeric) Height of the last block pruned.\\n\"\n             \"\\nExamples:\\n\"\n@@ -839,7 +840,8 @@ UniValue pruneblockchain(const JSONRPCRequest& request)\n     // Height value more than a billion is too high to be a block height, and\n     // too low to be a block time (corresponds to timestamp from Sep 2001).\n     if (heightParam > 1000000000) {\n-        CBlockIndex* pindex = chainActive.FindEarliestAtLeast(heightParam);\n+        // Add a 2 hour buffer to include blocks which might have had old timestamps\n+        CBlockIndex* pindex = chainActive.FindEarliestAtLeast(heightParam - 7200);\n         if (!pindex) {\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Could not find block with at least the specified timestamp.\");\n         }"
      }
    ]
  },
  {
    "sha": "55c403b8febe02555c52bac7028cd6b1f006fad1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NWM0MDNiOGZlYmUwMjU1NWM1MmJhYzcwMjhjZDZiMWYwMDZmYWQx",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-15T19:19:16Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-17T08:04:37Z"
      },
      "message": "Ensure `-maxsigcachesize` is in valid range\n\n- If the -maxsigcachesize parameter is set to zero, setup a minimum sized\nsigcache (2 elements) rather than segfaulting.\n- Handle maxsigcachesize being negative\n- Handle maxsigcachesize being too large",
      "tree": {
        "sha": "5c1a5795990b01c47e49a03d3854e2c3a100766c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c1a5795990b01c47e49a03d3854e2c3a100766c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/55c403b8febe02555c52bac7028cd6b1f006fad1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55c403b8febe02555c52bac7028cd6b1f006fad1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/55c403b8febe02555c52bac7028cd6b1f006fad1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55c403b8febe02555c52bac7028cd6b1f006fad1/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "476cc47da084633ac17b9b3c9257fab425b3bbba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/476cc47da084633ac17b9b3c9257fab425b3bbba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/476cc47da084633ac17b9b3c9257fab425b3bbba"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 5,
      "deletions": 2
    },
    "files": [
      {
        "sha": "6f364e42d13d8c220e8f4cd9c5e4c33374782054",
        "filename": "src/script/sigcache.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55c403b8febe02555c52bac7028cd6b1f006fad1/src/script/sigcache.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55c403b8febe02555c52bac7028cd6b1f006fad1/src/script/sigcache.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.cpp?ref=55c403b8febe02555c52bac7028cd6b1f006fad1",
        "patch": "@@ -93,8 +93,9 @@ static CSignatureCache signatureCache;\n // To be called once in AppInit2/TestingSetup to initialize the signatureCache\n void InitSignatureCache()\n {\n-    size_t nMaxCacheSize = GetArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n-    if (nMaxCacheSize <= 0) return;\n+    // nMaxCacheSize is unsigned. If -maxsigcachesize is set to zero,\n+    // setup_bytes creates the minimum possible cache (2 elements).\n+    size_t nMaxCacheSize = std::min(std::max((int64_t)0, GetArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE)), MAX_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n     size_t nElems = signatureCache.setup_bytes(nMaxCacheSize);\n     LogPrintf(\"Using %zu MiB out of %zu requested for signature cache, able to store %zu elements\\n\",\n             (nElems*sizeof(uint256)) >>20, nMaxCacheSize>>20, nElems);"
      },
      {
        "sha": "238952bb954df1daaa9af91a36f32d2d23d26b66",
        "filename": "src/script/sigcache.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55c403b8febe02555c52bac7028cd6b1f006fad1/src/script/sigcache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55c403b8febe02555c52bac7028cd6b1f006fad1/src/script/sigcache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.h?ref=55c403b8febe02555c52bac7028cd6b1f006fad1",
        "patch": "@@ -14,6 +14,8 @@\n // systems). Due to how we count cache size, actual memory usage is slightly\n // more (~32.25 MB)\n static const unsigned int DEFAULT_MAX_SIG_CACHE_SIZE = 32;\n+// Maximum sig cache size allowed\n+static const int64_t MAX_MAX_SIG_CACHE_SIZE = 16384;\n \n class CPubKey;\n "
      }
    ]
  },
  {
    "sha": "8dee8221770893fbf0ec6c19ad385537984ba44f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZGVlODIyMTc3MDg5M2ZiZjBlYzZjMTlhZDM4NTUzNzk4NGJhNDRm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-17T08:05:39Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-17T08:05:48Z"
      },
      "message": "Merge #9777: Handle unusual maxsigcachesize gracefully\n\n55c403b Ensure `-maxsigcachesize` is in valid range (John Newbery)",
      "tree": {
        "sha": "9d4cb1ad29d62306f787aa72e9fdb8f433971fc9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9d4cb1ad29d62306f787aa72e9fdb8f433971fc9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8dee8221770893fbf0ec6c19ad385537984ba44f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYpq7cAAoJEHSBCwEjRsmmYUoH/RfGcXlafNMCMRyGizgWmswB\nY/jgvK4A4Uixv8W7EB4IbvhPZsCAFbR4VA/vmBT9UhZq71scSOxyHaJjJV8WJfAl\nG30mJVyac82fjb1k1cgvg4bTYqLqKP+6F62BJ7wKD46zsh4IuD9seqNIfQAs4Gor\nZI1dl4avm7wZ939l4o8gTC1HZkomNj2XYmkVg5vuWQ3JPMF6ooKx9E3zknNqUFvh\nOsIOn8DfN2bQxh7R6PGP6dqDMuZ7KiHz65fJkj9IXAsCWYfA39BXYjhiZ5zKVHGJ\nDAkMT+O9DoUL3OroDTTQ8zYP5pUDgH0iejE6ZSaoAXHI6sSJBNOmFIvGApDJYCQ=\n=xFHf\n-----END PGP SIGNATURE-----",
        "payload": "tree 9d4cb1ad29d62306f787aa72e9fdb8f433971fc9\nparent afae75fd3dad48b7a5db72732141d421c6864b9b\nparent 55c403b8febe02555c52bac7028cd6b1f006fad1\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487318739 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487318748 +0100\n\nMerge #9777: Handle unusual maxsigcachesize gracefully\n\n55c403b Ensure `-maxsigcachesize` is in valid range (John Newbery)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8dee8221770893fbf0ec6c19ad385537984ba44f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8dee8221770893fbf0ec6c19ad385537984ba44f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8dee8221770893fbf0ec6c19ad385537984ba44f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "afae75fd3dad48b7a5db72732141d421c6864b9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afae75fd3dad48b7a5db72732141d421c6864b9b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/afae75fd3dad48b7a5db72732141d421c6864b9b"
      },
      {
        "sha": "55c403b8febe02555c52bac7028cd6b1f006fad1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55c403b8febe02555c52bac7028cd6b1f006fad1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/55c403b8febe02555c52bac7028cd6b1f006fad1"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 5,
      "deletions": 2
    },
    "files": [
      {
        "sha": "6f364e42d13d8c220e8f4cd9c5e4c33374782054",
        "filename": "src/script/sigcache.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dee8221770893fbf0ec6c19ad385537984ba44f/src/script/sigcache.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dee8221770893fbf0ec6c19ad385537984ba44f/src/script/sigcache.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.cpp?ref=8dee8221770893fbf0ec6c19ad385537984ba44f",
        "patch": "@@ -93,8 +93,9 @@ static CSignatureCache signatureCache;\n // To be called once in AppInit2/TestingSetup to initialize the signatureCache\n void InitSignatureCache()\n {\n-    size_t nMaxCacheSize = GetArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n-    if (nMaxCacheSize <= 0) return;\n+    // nMaxCacheSize is unsigned. If -maxsigcachesize is set to zero,\n+    // setup_bytes creates the minimum possible cache (2 elements).\n+    size_t nMaxCacheSize = std::min(std::max((int64_t)0, GetArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE)), MAX_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n     size_t nElems = signatureCache.setup_bytes(nMaxCacheSize);\n     LogPrintf(\"Using %zu MiB out of %zu requested for signature cache, able to store %zu elements\\n\",\n             (nElems*sizeof(uint256)) >>20, nMaxCacheSize>>20, nElems);"
      },
      {
        "sha": "238952bb954df1daaa9af91a36f32d2d23d26b66",
        "filename": "src/script/sigcache.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dee8221770893fbf0ec6c19ad385537984ba44f/src/script/sigcache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dee8221770893fbf0ec6c19ad385537984ba44f/src/script/sigcache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.h?ref=8dee8221770893fbf0ec6c19ad385537984ba44f",
        "patch": "@@ -14,6 +14,8 @@\n // systems). Due to how we count cache size, actual memory usage is slightly\n // more (~32.25 MB)\n static const unsigned int DEFAULT_MAX_SIG_CACHE_SIZE = 32;\n+// Maximum sig cache size allowed\n+static const int64_t MAX_MAX_SIG_CACHE_SIZE = 16384;\n \n class CPubKey;\n "
      }
    ]
  },
  {
    "sha": "3c02b957402e5bde9d106db2e390f2d0a79be815",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYzAyYjk1NzQwMmU1YmRlOWQxMDZkYjJlMzkwZjJkMGE3OWJlODE1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-17T11:41:36Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-17T11:41:49Z"
      },
      "message": "Merge #9779: Update nMinimumChainWork and defaultAssumeValid.\n\n3f78e46 Update nMinimumChainWork and defaultAssumeValid. (Gregory Maxwell)",
      "tree": {
        "sha": "be6e3a79078493c792693988cce895c97e99a10f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/be6e3a79078493c792693988cce895c97e99a10f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c02b957402e5bde9d106db2e390f2d0a79be815",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYpuF9AAoJEHSBCwEjRsmmBrUH/2V3YXZr20jqfuT3KgLUm3MZ\nDRsckcIhn74ckHLB6v1HvzOD0WesguGZs3w09FEoV7pMMYTuXi8BEf5tg01yFRPy\nB2FZeWXk9Jp8VxHKwX9hrRqwjqQHJWfyLfWLETp4sow3XDmj714LeA2kOCip6ZEE\nhjOv0khBsZoxvX1ej9FFQXqpKG8JZo8u5DF4zKm7vw61g3q9NRigIUJ7Oau65X2O\naSdhSLSoiW892+3BC9ZMpfQ6EWDWhe8YfHanpl8BDGI49woXUjLqc6IegncPBMWM\nUrCVyLP/PXrqjQ4rE4Nsvnm66p/3rBQHI/PAV3MbkIPN+hhhtMRH9YW0OvtuUzU=\n=5aq8\n-----END PGP SIGNATURE-----",
        "payload": "tree be6e3a79078493c792693988cce895c97e99a10f\nparent 8dee8221770893fbf0ec6c19ad385537984ba44f\nparent 3f78e460ba980d38149ee50ff5dfd75741aad9f2\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487331696 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487331709 +0100\n\nMerge #9779: Update nMinimumChainWork and defaultAssumeValid.\n\n3f78e46 Update nMinimumChainWork and defaultAssumeValid. (Gregory Maxwell)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c02b957402e5bde9d106db2e390f2d0a79be815",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3c02b957402e5bde9d106db2e390f2d0a79be815",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c02b957402e5bde9d106db2e390f2d0a79be815/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8dee8221770893fbf0ec6c19ad385537984ba44f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8dee8221770893fbf0ec6c19ad385537984ba44f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8dee8221770893fbf0ec6c19ad385537984ba44f"
      },
      {
        "sha": "3f78e460ba980d38149ee50ff5dfd75741aad9f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f78e460ba980d38149ee50ff5dfd75741aad9f2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f78e460ba980d38149ee50ff5dfd75741aad9f2"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "383d9849af9752490c44b8259bd99692e21a2def",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c02b957402e5bde9d106db2e390f2d0a79be815/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c02b957402e5bde9d106db2e390f2d0a79be815/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=3c02b957402e5bde9d106db2e390f2d0a79be815",
        "patch": "@@ -97,10 +97,10 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 1510704000; // November 15th, 2017.\n \n         // The best chain should have at least this much work.\n-        consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000002cb971dd56d1c583c20f90\");\n+        consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000003f94d1ad391682fe038bf5\");\n \n         // By default assume that the signatures in ancestors of this block are valid.\n-        consensus.defaultAssumeValid = uint256S(\"0x0000000000000000030abc968e1bd635736e880b946085c93152969b9a81a6e2\"); //447235\n+        consensus.defaultAssumeValid = uint256S(\"0x00000000000000000013176bf8d7dfeab4e1db31dc93bc311b436e82ab226b90\"); //453354\n \n         /**\n          * The message start string is designed to be unlikely to occur in normal data.\n@@ -201,10 +201,10 @@ class CTestNetParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 1493596800; // May 1st 2017\n \n         // The best chain should have at least this much work.\n-        consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000000000198b4def2baa9338d6\");\n+        consensus.nMinimumChainWork = uint256S(\"0x00000000000000000000000000000000000000000000001f057509eba81aed91\");\n \n         // By default assume that the signatures in ancestors of this block are valid.\n-        consensus.defaultAssumeValid = uint256S(\"0x000000000871ee6842d3648317ccc8a435eb8cc3c2429aee94faff9ba26b05a0\"); //1043841\n+        consensus.defaultAssumeValid = uint256S(\"0x00000000000128796ee387cf110ccb9d2f36cffaf7f73079c995377c65ac0dcc\"); //1079274\n \n         pchMessageStart[0] = 0x0b;\n         pchMessageStart[1] = 0x11;"
      }
    ]
  },
  {
    "sha": "ad168ef4e3083aecdffaf920637fee8d57a09fb8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZDE2OGVmNGUzMDgzYWVjZGZmYWY5MjA2MzdmZWU4ZDU3YTA5ZmI4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-17T11:44:35Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-17T11:51:08Z"
      },
      "message": "Merge #9778: Add two hour buffer to manual pruning\n\n91fb506 Add two hour buffer to manual pruning (Alex Morcos)",
      "tree": {
        "sha": "5d2e550ff21674202e80b7eec11083b62d6ca6c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5d2e550ff21674202e80b7eec11083b62d6ca6c5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ad168ef4e3083aecdffaf920637fee8d57a09fb8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYpuOsAAoJEHSBCwEjRsmmutgIAMogDEXRmshW8pa9HattvTGC\nStCjm+3xlEKVHEGjl5xhuLJJfEjO5j974mxKLJnBP2SLnSkwlhxuPYj7Wm4UYZZf\naCByBlf3waFuCX3h59/JGEbnix/G5epMo/7H9/hzP4Gj1PBTO0oKsaPZdyLKIVwY\nIo2PUIJdNSIbxRDS9JUSFlZCs/q3qbhgucX8CH3Jky1+c9QJ528l9F7/7zjO7M6A\n/0ltYsahiD794+dfD++KboK3n+9QYF3dJLcE5XEAlS8FAdLAW3bc7k/Rrk2WjYE6\nXriKHUco5qa+vIf48qYclZx1A2lMWdJXvaWKUughZd9F2LaSHtqlX810DAIj7Vo=\n=oFZm\n-----END PGP SIGNATURE-----",
        "payload": "tree 5d2e550ff21674202e80b7eec11083b62d6ca6c5\nparent 3c02b957402e5bde9d106db2e390f2d0a79be815\nparent 91fb506e0a156d5b4f2e9ca76ee8de0b591b2ee0\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487331875 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487332268 +0100\n\nMerge #9778: Add two hour buffer to manual pruning\n\n91fb506 Add two hour buffer to manual pruning (Alex Morcos)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad168ef4e3083aecdffaf920637fee8d57a09fb8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ad168ef4e3083aecdffaf920637fee8d57a09fb8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad168ef4e3083aecdffaf920637fee8d57a09fb8/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3c02b957402e5bde9d106db2e390f2d0a79be815",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c02b957402e5bde9d106db2e390f2d0a79be815",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3c02b957402e5bde9d106db2e390f2d0a79be815"
      },
      {
        "sha": "91fb506e0a156d5b4f2e9ca76ee8de0b591b2ee0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91fb506e0a156d5b4f2e9ca76ee8de0b591b2ee0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91fb506e0a156d5b4f2e9ca76ee8de0b591b2ee0"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "7b69c81ff9c42ac95bd8fc0f289607b77c65695d",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad168ef4e3083aecdffaf920637fee8d57a09fb8/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad168ef4e3083aecdffaf920637fee8d57a09fb8/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=ad168ef4e3083aecdffaf920637fee8d57a09fb8",
        "patch": "@@ -820,7 +820,8 @@ UniValue pruneblockchain(const JSONRPCRequest& request)\n         throw runtime_error(\n             \"pruneblockchain\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"height\\\"       (numeric, required) The block height to prune up to. May be set to a discrete height, or to a unix timestamp to prune based on block time.\\n\"\n+            \"1. \\\"height\\\"       (numeric, required) The block height to prune up to. May be set to a discrete height, or a unix timestamp\\n\"\n+            \"                  to prune blocks whose block time is at least 2 hours older than the provided timestamp.\\n\"\n             \"\\nResult:\\n\"\n             \"n    (numeric) Height of the last block pruned.\\n\"\n             \"\\nExamples:\\n\"\n@@ -839,7 +840,8 @@ UniValue pruneblockchain(const JSONRPCRequest& request)\n     // Height value more than a billion is too high to be a block height, and\n     // too low to be a block time (corresponds to timestamp from Sep 2001).\n     if (heightParam > 1000000000) {\n-        CBlockIndex* pindex = chainActive.FindEarliestAtLeast(heightParam);\n+        // Add a 2 hour buffer to include blocks which might have had old timestamps\n+        CBlockIndex* pindex = chainActive.FindEarliestAtLeast(heightParam - 7200);\n         if (!pindex) {\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Could not find block with at least the specified timestamp.\");\n         }"
      }
    ]
  },
  {
    "sha": "9828f9a9962c1bee5c343847030b9cfd87a40a5e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ODI4ZjlhOTk2MmMxYmVlNWMzNDM4NDcwMzBiOWNmZDg3YTQwYTVl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-17T11:53:31Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-17T11:53:41Z"
      },
      "message": "Merge #9761: Use 2 hour grace period for key timestamps in importmulti rescans\n\ne662af3 Use 2 hour grace period for key timestamps in importmulti rescans (Russell Yanofsky)\n38d3e9e [qa] Extend import-rescan.py to test imports on pruned nodes. (Russell Yanofsky)\nc28583d [qa] Extend import-rescan.py to test specific key timestamps (Russell Yanofsky)\n8be0866 [qa] Simplify import-rescan.py (Russell Yanofsky)",
      "tree": {
        "sha": "0bd64187e4f2dcff3b5bddee5fb0c9e59cdf6dca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0bd64187e4f2dcff3b5bddee5fb0c9e59cdf6dca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9828f9a9962c1bee5c343847030b9cfd87a40a5e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYpuRFAAoJEHSBCwEjRsmmJXUH/ROvMg886aFO4sBoU+OeLYW+\nKDMoZDupDANHNsMwY2hxuhU0iQ5Ncewta7r9uSLCT0zNt7e9Oerb8ohTd4zh0Su7\noufIPQtHAYrD3sVC9v4ZkuwZ45xa04wWitNhmQTqbiczGOFAMTB8vSDl6O3u+USt\nGjxTMFpq6YQe3IclzEcoYxkQaxgCkhoSx93eEbzTmGjLe62YzOtWLJ8VYDrIG5uk\nFb3Eu0H9900JQKGz7cbqSq5uppQYZTnPZmILmpGqdgp3AUGKBpT9I0wetqBC0Cux\nwHdysgik8OmHJozikagACZQKhtcTU+S+3GrqDu/ldveQptekBxL+MOgxmbAQkLM=\n=dTGM\n-----END PGP SIGNATURE-----",
        "payload": "tree 0bd64187e4f2dcff3b5bddee5fb0c9e59cdf6dca\nparent ad168ef4e3083aecdffaf920637fee8d57a09fb8\nparent e662af358305b9fa4da772ec37c8356a9fc92ab6\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487332411 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487332421 +0100\n\nMerge #9761: Use 2 hour grace period for key timestamps in importmulti rescans\n\ne662af3 Use 2 hour grace period for key timestamps in importmulti rescans (Russell Yanofsky)\n38d3e9e [qa] Extend import-rescan.py to test imports on pruned nodes. (Russell Yanofsky)\nc28583d [qa] Extend import-rescan.py to test specific key timestamps (Russell Yanofsky)\n8be0866 [qa] Simplify import-rescan.py (Russell Yanofsky)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9828f9a9962c1bee5c343847030b9cfd87a40a5e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9828f9a9962c1bee5c343847030b9cfd87a40a5e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9828f9a9962c1bee5c343847030b9cfd87a40a5e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ad168ef4e3083aecdffaf920637fee8d57a09fb8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad168ef4e3083aecdffaf920637fee8d57a09fb8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ad168ef4e3083aecdffaf920637fee8d57a09fb8"
      },
      {
        "sha": "e662af358305b9fa4da772ec37c8356a9fc92ab6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e662af358305b9fa4da772ec37c8356a9fc92ab6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e662af358305b9fa4da772ec37c8356a9fc92ab6"
      }
    ],
    "stats": {
      "total": 260,
      "additions": 145,
      "deletions": 115
    },
    "files": [
      {
        "sha": "54cc6d2642adff69688326786b403048b102fb38",
        "filename": "qa/rpc-tests/import-rescan.py",
        "status": "modified",
        "additions": 142,
        "deletions": 113,
        "changes": 255,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9828f9a9962c1bee5c343847030b9cfd87a40a5e/qa/rpc-tests/import-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9828f9a9962c1bee5c343847030b9cfd87a40a5e/qa/rpc-tests/import-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/import-rescan.py?ref=9828f9a9962c1bee5c343847030b9cfd87a40a5e",
        "patch": "@@ -2,55 +2,105 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n+\"\"\"Test rescan behavior of importaddress, importpubkey, importprivkey, and\n+importmulti RPCs with different types of keys and rescan options.\n+\n+In the first part of the test, node 0 creates an address for each type of\n+import RPC call and sends BTC to it. Then other nodes import the addresses,\n+and the test makes listtransactions and getbalance calls to confirm that the\n+importing node either did or did not execute rescans picking up the send\n+transactions.\n+\n+In the second part of the test, node 0 sends more BTC to each address, and the\n+test makes more listtransactions and getbalance calls to confirm that the\n+importing nodes pick up the new transactions regardless of whether rescans\n+happened previously.\n+\"\"\"\n+\n+from test_framework.authproxy import JSONRPCException\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (start_nodes, connect_nodes, sync_blocks, assert_equal)\n+from test_framework.util import (start_nodes, connect_nodes, sync_blocks, assert_equal, set_node_times)\n from decimal import Decimal\n \n import collections\n import enum\n import itertools\n-import functools\n \n Call = enum.Enum(\"Call\", \"single multi\")\n Data = enum.Enum(\"Data\", \"address pub priv\")\n-ImportNode = collections.namedtuple(\"ImportNode\", \"rescan\")\n-\n-\n-def call_import_rpc(call, data, address, scriptPubKey, pubkey, key, label, node, rescan):\n-    \"\"\"Helper that calls a wallet import RPC on a bitcoin node.\"\"\"\n-    watchonly = data != Data.priv\n-    if call == Call.single:\n-        if data == Data.address:\n-            response = node.importaddress(address, label, rescan)\n-        elif data == Data.pub:\n-            response = node.importpubkey(pubkey, label, rescan)\n-        elif data == Data.priv:\n-            response = node.importprivkey(key, label, rescan)\n-        assert_equal(response, None)\n-    elif call == Call.multi:\n-        response = node.importmulti([{\n-            \"scriptPubKey\": {\n-                \"address\": address\n-            },\n-            \"timestamp\": \"now\",\n-            \"pubkeys\": [pubkey] if data == Data.pub else [],\n-            \"keys\": [key] if data == Data.priv else [],\n-            \"label\": label,\n-            \"watchonly\": watchonly\n-        }], {\"rescan\": rescan})\n-        assert_equal(response, [{\"success\": True}])\n-    return watchonly\n-\n-\n-# List of RPCs that import a wallet key or address in various ways.\n-IMPORT_RPCS = [functools.partial(call_import_rpc, call, data) for call, data in itertools.product(Call, Data)]\n-\n-# List of bitcoind nodes that will import keys.\n-IMPORT_NODES = [\n-    ImportNode(rescan=True),\n-    ImportNode(rescan=False),\n-]\n+Rescan = enum.Enum(\"Rescan\", \"no yes late_timestamp\")\n+\n+\n+class Variant(collections.namedtuple(\"Variant\", \"call data rescan prune\")):\n+    \"\"\"Helper for importing one key and verifying scanned transactions.\"\"\"\n+\n+    def do_import(self, timestamp):\n+        \"\"\"Call one key import RPC.\"\"\"\n+\n+        if self.call == Call.single:\n+            if self.data == Data.address:\n+                response, error = try_rpc(self.node.importaddress, self.address[\"address\"], self.label,\n+                                          self.rescan == Rescan.yes)\n+            elif self.data == Data.pub:\n+                response, error = try_rpc(self.node.importpubkey, self.address[\"pubkey\"], self.label,\n+                                          self.rescan == Rescan.yes)\n+            elif self.data == Data.priv:\n+                response, error = try_rpc(self.node.importprivkey, self.key, self.label, self.rescan == Rescan.yes)\n+            assert_equal(response, None)\n+            assert_equal(error, {'message': 'Rescan is disabled in pruned mode',\n+                                 'code': -4} if self.expect_disabled else None)\n+        elif self.call == Call.multi:\n+            response = self.node.importmulti([{\n+                \"scriptPubKey\": {\n+                    \"address\": self.address[\"address\"]\n+                },\n+                \"timestamp\": timestamp + RESCAN_WINDOW + (1 if self.rescan == Rescan.late_timestamp else 0),\n+                \"pubkeys\": [self.address[\"pubkey\"]] if self.data == Data.pub else [],\n+                \"keys\": [self.key] if self.data == Data.priv else [],\n+                \"label\": self.label,\n+                \"watchonly\": self.data != Data.priv\n+            }], {\"rescan\": self.rescan in (Rescan.yes, Rescan.late_timestamp)})\n+            assert_equal(response, [{\"success\": True}])\n+\n+    def check(self, txid=None, amount=None, confirmations=None):\n+        \"\"\"Verify that getbalance/listtransactions return expected values.\"\"\"\n+\n+        balance = self.node.getbalance(self.label, 0, True)\n+        assert_equal(balance, self.expected_balance)\n+\n+        txs = self.node.listtransactions(self.label, 10000, 0, True)\n+        assert_equal(len(txs), self.expected_txs)\n+\n+        if txid is not None:\n+            tx, = [tx for tx in txs if tx[\"txid\"] == txid]\n+            assert_equal(tx[\"account\"], self.label)\n+            assert_equal(tx[\"address\"], self.address[\"address\"])\n+            assert_equal(tx[\"amount\"], amount)\n+            assert_equal(tx[\"category\"], \"receive\")\n+            assert_equal(tx[\"label\"], self.label)\n+            assert_equal(tx[\"txid\"], txid)\n+            assert_equal(tx[\"confirmations\"], confirmations)\n+            assert_equal(\"trusted\" not in tx, True)\n+            if self.data != Data.priv:\n+                assert_equal(tx[\"involvesWatchonly\"], True)\n+            else:\n+                assert_equal(\"involvesWatchonly\" not in tx, True)\n+\n+\n+# List of Variants for each way a key or address could be imported.\n+IMPORT_VARIANTS = [Variant(*variants) for variants in itertools.product(Call, Data, Rescan, (False, True))]\n+\n+# List of nodes to import keys to. Half the nodes will have pruning disabled,\n+# half will have it enabled. Different nodes will be used for imports that are\n+# expected to cause rescans, and imports that are not expected to cause\n+# rescans, in order to prevent rescans during later imports picking up\n+# transactions associated with earlier imports. This makes it easier to keep\n+# track of expected balances and transactions.\n+ImportNode = collections.namedtuple(\"ImportNode\", \"prune rescan\")\n+IMPORT_NODES = [ImportNode(*fields) for fields in itertools.product((False, True), repeat=2)]\n+\n+# Rescans start at the earliest block up to 2 hours before the key timestamp.\n+RESCAN_WINDOW = 2 * 60 * 60\n \n \n class ImportRescanTest(BitcoinTestFramework):\n@@ -60,96 +110,75 @@ def __init__(self):\n \n     def setup_network(self):\n         extra_args = [[\"-debug=1\"] for _ in range(self.num_nodes)]\n+        for i, import_node in enumerate(IMPORT_NODES, 1):\n+            if import_node.prune:\n+                extra_args[i] += [\"-prune=1\"]\n+\n         self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n         for i in range(1, self.num_nodes):\n             connect_nodes(self.nodes[i], 0)\n \n     def run_test(self):\n         # Create one transaction on node 0 with a unique amount and label for\n         # each possible type of wallet import RPC.\n-        import_rpc_variants = []\n-        for i, import_rpc in enumerate(IMPORT_RPCS):\n-            label = \"label{}\".format(i)\n-            addr = self.nodes[0].validateaddress(self.nodes[0].getnewaddress(label))\n-            key = self.nodes[0].dumpprivkey(addr[\"address\"])\n-            amount = 24.9375 - i * .0625\n-            txid = self.nodes[0].sendtoaddress(addr[\"address\"], amount)\n-            import_rpc = functools.partial(import_rpc, addr[\"address\"], addr[\"scriptPubKey\"], addr[\"pubkey\"], key,\n-                                           label)\n-            import_rpc_variants.append((import_rpc, label, amount, txid, addr))\n-\n+        for i, variant in enumerate(IMPORT_VARIANTS):\n+            variant.label = \"label {} {}\".format(i, variant)\n+            variant.address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress(variant.label))\n+            variant.key = self.nodes[0].dumpprivkey(variant.address[\"address\"])\n+            variant.initial_amount = 25 - (i + 1) / 4.0\n+            variant.initial_txid = self.nodes[0].sendtoaddress(variant.address[\"address\"], variant.initial_amount)\n+\n+        # Generate a block containing the initial transactions, then another\n+        # block further in the future (past the rescan window).\n         self.nodes[0].generate(1)\n         assert_equal(self.nodes[0].getrawmempool(), [])\n+        timestamp = self.nodes[0].getblockheader(self.nodes[0].getbestblockhash())[\"time\"]\n+        set_node_times(self.nodes, timestamp + RESCAN_WINDOW + 1)\n+        self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n \n-        # For each importing node and variation of wallet import RPC, invoke\n-        # the RPC and check the results from getbalance and listtransactions.\n-        for node, import_node in zip(self.nodes[1:], IMPORT_NODES):\n-            for import_rpc, label, amount, txid, addr in import_rpc_variants:\n-                watchonly = import_rpc(node, import_node.rescan)\n-\n-                balance = node.getbalance(label, 0, True)\n-                if import_node.rescan:\n-                    assert_equal(balance, amount)\n-                else:\n-                    assert_equal(balance, 0)\n-\n-                txs = node.listtransactions(label, 10000, 0, True)\n-                if import_node.rescan:\n-                    assert_equal(len(txs), 1)\n-                    assert_equal(txs[0][\"account\"], label)\n-                    assert_equal(txs[0][\"address\"], addr[\"address\"])\n-                    assert_equal(txs[0][\"amount\"], amount)\n-                    assert_equal(txs[0][\"category\"], \"receive\")\n-                    assert_equal(txs[0][\"label\"], label)\n-                    assert_equal(txs[0][\"txid\"], txid)\n-                    assert_equal(txs[0][\"confirmations\"], 1)\n-                    assert_equal(\"trusted\" not in txs[0], True)\n-                    if watchonly:\n-                        assert_equal(txs[0][\"involvesWatchonly\"], True)\n-                    else:\n-                        assert_equal(\"involvesWatchonly\" not in txs[0], True)\n-                else:\n-                    assert_equal(len(txs), 0)\n-\n-        # Create spends for all the imported addresses.\n-        spend_txids = []\n+        # For each variation of wallet key import, invoke the import RPC and\n+        # check the results from getbalance and listtransactions.\n+        for variant in IMPORT_VARIANTS:\n+            variant.expect_disabled = variant.rescan == Rescan.yes and variant.prune and variant.call == Call.single\n+            expect_rescan = variant.rescan == Rescan.yes and not variant.expect_disabled\n+            variant.node = self.nodes[1 + IMPORT_NODES.index(ImportNode(variant.prune, expect_rescan))]\n+            variant.do_import(timestamp)\n+            if expect_rescan:\n+                variant.expected_balance = variant.initial_amount\n+                variant.expected_txs = 1\n+                variant.check(variant.initial_txid, variant.initial_amount, 2)\n+            else:\n+                variant.expected_balance = 0\n+                variant.expected_txs = 0\n+                variant.check()\n+\n+        # Create new transactions sending to each address.\n         fee = self.nodes[0].getnetworkinfo()[\"relayfee\"]\n-        for import_rpc, label, amount, txid, addr in import_rpc_variants:\n-            raw_tx = self.nodes[0].getrawtransaction(txid)\n-            decoded_tx = self.nodes[0].decoderawtransaction(raw_tx)\n-            input_vout = next(out[\"n\"] for out in decoded_tx[\"vout\"]\n-                              if out[\"scriptPubKey\"][\"addresses\"] == [addr[\"address\"]])\n-            inputs = [{\"txid\": txid, \"vout\": input_vout}]\n-            outputs = {self.nodes[0].getnewaddress(): Decimal(amount) - fee}\n-            raw_spend_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_spend_tx = self.nodes[0].signrawtransaction(raw_spend_tx)\n-            spend_txid = self.nodes[0].sendrawtransaction(signed_spend_tx[\"hex\"])\n-            spend_txids.append(spend_txid)\n+        for i, variant in enumerate(IMPORT_VARIANTS):\n+            variant.sent_amount = 25 - (2 * i + 1) / 8.0\n+            variant.sent_txid = self.nodes[0].sendtoaddress(variant.address[\"address\"], variant.sent_amount)\n \n+        # Generate a block containing the new transactions.\n         self.nodes[0].generate(1)\n         assert_equal(self.nodes[0].getrawmempool(), [])\n         sync_blocks(self.nodes)\n \n-        # Check the results from getbalance and listtransactions after the spends.\n-        for node, import_node in zip(self.nodes[1:], IMPORT_NODES):\n-            txs = node.listtransactions(\"*\", 10000, 0, True)\n-            for (import_rpc, label, amount, txid, addr), spend_txid in zip(import_rpc_variants, spend_txids):\n-                balance = node.getbalance(label, 0, True)\n-                spend_tx = [tx for tx in txs if tx[\"txid\"] == spend_txid]\n-                if import_node.rescan:\n-                    assert_equal(balance, amount)\n-                    assert_equal(len(spend_tx), 1)\n-                    assert_equal(spend_tx[0][\"account\"], \"\")\n-                    assert_equal(spend_tx[0][\"amount\"] + spend_tx[0][\"fee\"], -amount)\n-                    assert_equal(spend_tx[0][\"category\"], \"send\")\n-                    assert_equal(\"label\" not in spend_tx[0], True)\n-                    assert_equal(spend_tx[0][\"confirmations\"], 1)\n-                    assert_equal(\"trusted\" not in spend_tx[0], True)\n-                    assert_equal(\"involvesWatchonly\" not in txs[0], True)\n-                else:\n-                    assert_equal(balance, 0)\n-                    assert_equal(spend_tx, [])\n+        # Check the latest results from getbalance and listtransactions.\n+        for variant in IMPORT_VARIANTS:\n+            if not variant.expect_disabled:\n+                variant.expected_balance += variant.sent_amount\n+                variant.expected_txs += 1\n+                variant.check(variant.sent_txid, variant.sent_amount, 1)\n+            else:\n+                variant.check()\n+\n+\n+def try_rpc(func, *args, **kwargs):\n+    try:\n+        return func(*args, **kwargs), None\n+    except JSONRPCException as e:\n+        return None, e.error\n \n \n if __name__ == \"__main__\":"
      },
      {
        "sha": "30f2414675a3894f217ccca936f572b0b8664d50",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9828f9a9962c1bee5c343847030b9cfd87a40a5e/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9828f9a9962c1bee5c343847030b9cfd87a40a5e/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=9828f9a9962c1bee5c343847030b9cfd87a40a5e",
        "patch": "@@ -988,7 +988,8 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n             \"                                                              or the string \\\"now\\\" to substitute the current synced blockchain time. The timestamp of the oldest\\n\"\n             \"                                                              key will determine how far back blockchain rescans need to begin for missing wallet transactions.\\n\"\n             \"                                                              \\\"now\\\" can be specified to bypass scanning, for keys which are known to never have been used, and\\n\"\n-            \"                                                              0 can be specified to scan the entire blockchain.\\n\"\n+            \"                                                              0 can be specified to scan the entire blockchain. Blocks up to 2 hours before the earliest key\\n\"\n+            \"                                                              creation time of all keys being imported by the importmulti call will be scanned.\\n\"\n             \"      \\\"redeemscript\\\": \\\"<script>\\\"                            , (string, optional) Allowed only if the scriptPubKey is a P2SH address or a P2SH scriptPubKey\\n\"\n             \"      \\\"pubkeys\\\": [\\\"<pubKey>\\\", ... ]                         , (array, optional) Array of strings giving pubkeys that must occur in the output or redeemscript\\n\"\n             \"      \\\"keys\\\": [\\\"<key>\\\", ... ]                               , (array, optional) Array of strings giving private keys whose corresponding public keys must occur in the output or redeemscript\\n\"\n@@ -1072,7 +1073,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n     }\n \n     if (fRescan && fRunScan && requests.size() && nLowestTimestamp <= chainActive.Tip()->GetBlockTimeMax()) {\n-        CBlockIndex* pindex = nLowestTimestamp > minimumTimestamp ? chainActive.FindEarliestAtLeast(nLowestTimestamp) : chainActive.Genesis();\n+        CBlockIndex* pindex = nLowestTimestamp > minimumTimestamp ? chainActive.FindEarliestAtLeast(std::max<int64_t>(nLowestTimestamp - 7200, 0)) : chainActive.Genesis();\n \n         if (pindex) {\n             pwalletMain->ScanForWalletTransactions(pindex, true);"
      }
    ]
  },
  {
    "sha": "f87e8f53920adfa80a3f4af9435370dc272c3783",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODdlOGY1MzkyMGFkZmE4MGEzZjRhZjk0MzUzNzBkYzI3MmMzNzgz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-17T16:26:01Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-17T16:27:18Z"
      },
      "message": "build: bump version to 0.14.99\n\nNow that 0.14 branch has been split off, master is 0.14.99 (pre-0.15).\n\nAlso clean out release notes.",
      "tree": {
        "sha": "124de2635a27102d08dad98d0be7b1e6a3e5465c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/124de2635a27102d08dad98d0be7b1e6a3e5465c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f87e8f53920adfa80a3f4af9435370dc272c3783",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYpyRsAAoJEHSBCwEjRsmmoYMIAIIOPmgcK/wVAHtkCUv6Vpx3\nqWXptGE65ccthgZPS6jWFO12OgrG/UwvjJMqnZymZaOD0g7UdD1/CpgLLo8JylQz\nEgg3r31wuH3dlDTxLLTV+EPlYmiWK1T4jm9PlX4UuaLUXPTgLQKs3CfBR89yYpOL\nwfSOxmYKjdjZMk2iovO+vW9IWXqcw2r+xxagidhWDjGfe5+RhF/qx3Q2G+EAuFk1\noEWJg4dm7I0viJDc7TvZsyXdbhi3QOx4IUcyfQXsPmzVgLXcaVwGHILroUJWy4Bf\n5h6N7AszwDqgv/0ZnOFiT9f5E9mDyQfN5LeNaitYR3Vm5N8qvX1wBdAGqL6kgZ0=\n=K29t\n-----END PGP SIGNATURE-----",
        "payload": "tree 124de2635a27102d08dad98d0be7b1e6a3e5465c\nparent 9828f9a9962c1bee5c343847030b9cfd87a40a5e\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487348761 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487348838 +0100\n\nbuild: bump version to 0.14.99\n\nNow that 0.14 branch has been split off, master is 0.14.99 (pre-0.15).\n\nAlso clean out release notes.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f87e8f53920adfa80a3f4af9435370dc272c3783",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f87e8f53920adfa80a3f4af9435370dc272c3783",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f87e8f53920adfa80a3f4af9435370dc272c3783/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9828f9a9962c1bee5c343847030b9cfd87a40a5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9828f9a9962c1bee5c343847030b9cfd87a40a5e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9828f9a9962c1bee5c343847030b9cfd87a40a5e"
      }
    ],
    "stats": {
      "total": 121,
      "additions": 5,
      "deletions": 116
    },
    "files": [
      {
        "sha": "64a6234449339982d51dede65148a6c4e64f662b",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f87e8f53920adfa80a3f4af9435370dc272c3783/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f87e8f53920adfa80a3f4af9435370dc272c3783/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=f87e8f53920adfa80a3f4af9435370dc272c3783",
        "patch": "@@ -1,7 +1,7 @@\n dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n AC_PREREQ([2.60])\n define(_CLIENT_VERSION_MAJOR, 0)\n-define(_CLIENT_VERSION_MINOR, 13)\n+define(_CLIENT_VERSION_MINOR, 14)\n define(_CLIENT_VERSION_REVISION, 99)\n define(_CLIENT_VERSION_BUILD, 0)\n define(_CLIENT_VERSION_IS_RELEASE, false)"
      },
      {
        "sha": "45436a6b151a103d4adec0d8484a5f1d580bb61f",
        "filename": "doc/Doxyfile",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f87e8f53920adfa80a3f4af9435370dc272c3783/doc/Doxyfile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f87e8f53920adfa80a3f4af9435370dc272c3783/doc/Doxyfile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/Doxyfile?ref=f87e8f53920adfa80a3f4af9435370dc272c3783",
        "patch": "@@ -38,7 +38,7 @@ PROJECT_NAME           = \"Bitcoin Core\"\n # could be handy for archiving the generated documentation or if some version\n # control system is used.\n \n-PROJECT_NUMBER         = 0.13.99\n+PROJECT_NUMBER         = 0.14.99\n \n # Using the PROJECT_BRIEF tag one can provide an optional one line description\n # for a project that appears at the top of each page and should give viewer a"
      },
      {
        "sha": "09f32bc09effcd4d07ea12af3801f1cf26e1659b",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f87e8f53920adfa80a3f4af9435370dc272c3783/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f87e8f53920adfa80a3f4af9435370dc272c3783/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=f87e8f53920adfa80a3f4af9435370dc272c3783",
        "patch": "@@ -1,4 +1,4 @@\n-Bitcoin Core 0.13.99\n+Bitcoin Core 0.14.99\n =====================\n \n Setup"
      },
      {
        "sha": "0e4c9ce04febb43e3da0739bf9f56ea08b6f5d1d",
        "filename": "doc/README_windows.txt",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f87e8f53920adfa80a3f4af9435370dc272c3783/doc/README_windows.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f87e8f53920adfa80a3f4af9435370dc272c3783/doc/README_windows.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README_windows.txt?ref=f87e8f53920adfa80a3f4af9435370dc272c3783",
        "patch": "@@ -1,4 +1,4 @@\n-Bitcoin Core 0.13.99\r\n+Bitcoin Core 0.14.99\r\n =====================\r\n \r\n Intro\r"
      },
      {
        "sha": "eaa0b330ebb9ae09e672be83cb10c3bfffafa73f",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 0,
        "deletions": 111,
        "changes": 111,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f87e8f53920adfa80a3f4af9435370dc272c3783/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f87e8f53920adfa80a3f4af9435370dc272c3783/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=f87e8f53920adfa80a3f4af9435370dc272c3783",
        "patch": "@@ -33,117 +33,6 @@ frequently tested on them.\n Notable changes\n ===============\n \n-Low-level RPC changes\n-----------------------\n-\n-- `importprunedfunds` only accepts two required arguments. Some versions accept\n-  an optional third arg, which was always ignored. Make sure to never pass more\n-  than two arguments.\n-\n-Fee Estimation Changes\n-----------------------\n-\n-- Since 0.13.2 fee estimation for a confirmation target of 1 block has been\n-  disabled. This is only a minor behavior change as there was often insufficient\n-  data for this target anyway. `estimatefee 1` will now always return -1 and\n-  `estimatesmartfee 1` will start searching at a target of 2.\n-\n-- The default target for fee estimation is changed to 6 blocks in both the GUI\n-  (previously 25) and for RPC calls (previously 2).\n-\n-Removal of Priority Estimation\n--------------------------------\n-\n-- Estimation of \"priority\" needed for a transaction to be included within a target\n-  number of blocks has been removed.  The rpc calls are deprecated and will either\n-  return -1 or 1e24 appropriately. The format for `fee_estimates.dat` has also\n-  changed to no longer save these priority estimates. It will automatically be\n-  converted to the new format which is not readable by prior versions of the\n-  software.\n-\n-- The concept of \"priority\" (coin age) transactions is planned to be removed in\n-  the next major version. To prepare for this, the default for the rate limit of\n-  priority transactions (`-limitfreerelay`) has been set to `0` kB/minute. This\n-  is not to be confused with the `prioritisetransaction` RPC which will remain\n-  supported for adding fee deltas to transactions.\n-\n-P2P connection management\n---------------------------\n-\n-- Peers manually added through the addnode option or addnode RPC now have their own\n-  limit of eight connections which does not compete with other inbound or outbound\n-  connection usage and is not subject to the maxconnections limitation.\n-\n-- New connections to manually added peers are much faster.\n-\n-Introduction of assumed-valid blocks\n--------------------------------------\n-\n-- A significant portion of the initial block download time is spent verifying\n-  scripts/signatures.  Although the verification must pass to ensure the security\n-  of the system, no other result from this verification is needed: If the node\n-  knew the history of a given block were valid it could skip checking scripts\n-  for its ancestors.\n-\n-- A new configuration option 'assumevalid' is provided to express this knowledge\n-  to the software.  Unlike the 'checkpoints' in the past this setting does not\n-  force the use of a particular chain: chains that are consistent with it are\n-  processed quicker, but other chains are still accepted if they'd otherwise\n-  be chosen as best. Also unlike 'checkpoints' the user can configure which\n-  block history is assumed true, this means that even outdated software can\n-  sync more quickly if the setting is updated by the user.\n-\n-- Because the validity of a chain history is a simple objective fact it is much\n-  easier to review this setting.  As a result the software ships with a default\n-  value adjusted to match the current chain shortly before release.  The use\n-  of this default value can be disabled by setting -assumevalid=0\n-\n-0.14.0 Change log\n-=================\n-\n-Detailed release notes follow. This overview includes changes that affect\n-behavior, not code moves, refactors and string updates. For convenience in locating\n-the code changes and accompanying discussion, both the pull request and\n-git merge commit are mentioned.\n-\n-### RPC and REST\n-\n-UTXO set query (`GET /rest/getutxos/<checkmempool>/<txid>-<n>/<txid>-<n>/.../<txid>-<n>.<bin|hex|json>`) responses\n-were changed to return status code HTTP_BAD_REQUEST (400) instead of HTTP_INTERNAL_SERVER_ERROR (500) when requests\n-contain invalid parameters.\n-\n-The first boolean argument to `getaddednodeinfo` has been removed. This is an incompatible change.\n-\n-Call \"getmininginfo\" loses the \"testnet\" field in favor of the more generic \"chain\" (which has been present for years).\n-\n-### Configuration and command-line options\n-\n-### Block and transaction handling\n-\n-### P2P protocol and network code\n-\n-### Validation\n-\n-### Build system\n-\n-### Wallet\n-\n-0.14.0 Fundrawtransaction change address reuse\n-==============================================\n-\n-Before 0.14, `fundrawtransaction` was by default wallet stateless. In almost all cases `fundrawtransaction` does add a change-output to the outputs of the funded transaction. Before 0.14, the used keypool key was never marked as change-address key and directly returned to the keypool (leading to address reuse).\n-Before 0.14, calling `getnewaddress` directly after `fundrawtransaction` did generate the same address as the change-output address.\n-\n-Since 0.14, fundrawtransaction does reserve the change-output-key from the keypool by default (optional by setting  `reserveChangeKey`, default = `true`)\n-\n-Users should also consider using `getrawchangeaddress()` in conjunction with `fundrawtransaction`'s `changeAddress` option.\n-\n-### GUI\n-\n-### Tests\n-\n-### Miscellaneous\n-\n Credits\n =======\n "
      },
      {
        "sha": "69154d546dd795ab38abe96fa285fa2f33a3e62e",
        "filename": "src/clientversion.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f87e8f53920adfa80a3f4af9435370dc272c3783/src/clientversion.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f87e8f53920adfa80a3f4af9435370dc272c3783/src/clientversion.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/clientversion.h?ref=f87e8f53920adfa80a3f4af9435370dc272c3783",
        "patch": "@@ -15,7 +15,7 @@\n \n //! These need to be macros, as clientversion.cpp's and bitcoin*-res.rc's voodoo requires it\n #define CLIENT_VERSION_MAJOR 0\n-#define CLIENT_VERSION_MINOR 13\n+#define CLIENT_VERSION_MINOR 14\n #define CLIENT_VERSION_REVISION 99\n #define CLIENT_VERSION_BUILD 0\n "
      }
    ]
  },
  {
    "sha": "a6a3e58c483700bd5f2bc7d117a621e0c4af60e3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNmEzZTU4YzQ4MzcwMGJkNWYyYmM3ZDExN2E2MjFlMGM0YWY2MGUz",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-17T19:22:56Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-17T19:22:56Z"
      },
      "message": "Various review markups for rpc-tests.py improvements",
      "tree": {
        "sha": "6e4cf1bfe8691b5f68fa3911dd17edf2f37c6245",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6e4cf1bfe8691b5f68fa3911dd17edf2f37c6245"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6a3e58c483700bd5f2bc7d117a621e0c4af60e3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6a3e58c483700bd5f2bc7d117a621e0c4af60e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a6a3e58c483700bd5f2bc7d117a621e0c4af60e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6a3e58c483700bd5f2bc7d117a621e0c4af60e3/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3de3ccdfaaa5edcf4e0924860d960e7e0db5a9b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3de3ccdfaaa5edcf4e0924860d960e7e0db5a9b9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3de3ccdfaaa5edcf4e0924860d960e7e0db5a9b9"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 21,
      "deletions": 26
    },
    "files": [
      {
        "sha": "18e08f06c40196b5f897e24a33f90247a7fef1bc",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 17,
        "deletions": 15,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6a3e58c483700bd5f2bc7d117a621e0c4af60e3/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6a3e58c483700bd5f2bc7d117a621e0c4af60e3/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=a6a3e58c483700bd5f2bc7d117a621e0c4af60e3",
        "patch": "@@ -8,6 +8,8 @@\n This module calls down into individual test cases via subprocess. It will\n forward all unrecognized arguments onto the individual test scripts.\n \n+RPC tests are disabled on Windows by default. Use --force to run them anyway.\n+\n For a description of arguments recognized by test scripts, see\n `qa/pull-tester/test_framework/test_framework.py:BitcoinTestFramework.main`.\n \n@@ -24,8 +26,8 @@\n import re\n \n BASE_SCRIPTS= [\n-    # Scripts that are run by the travis build process\n-    # longest test should go first, to favor running tests in parallel\n+    # Scripts that are run by the travis build process.\n+    # Longest test should go first, to favor running tests in parallel\n     'wallet-hd.py',\n     'walletbackup.py',\n     # vv Tests less than 5m vv\n@@ -130,11 +132,11 @@ def main():\n                                      formatter_class=argparse.RawTextHelpFormatter)\n     parser.add_argument('--coverage', action='store_true', help='generate a basic coverage report for the RPC interface')\n     parser.add_argument('--extended', action='store_true', help='run the extended test suite in addition to the basic tests')\n+    parser.add_argument('--force', '-f', action='store_true', help='run tests even on platforms where they are disabled by default (e.g. windows).')\n     parser.add_argument('--help', '-h', '-?', action='store_true', help='print help text and exit')\n-    parser.add_argument('--nozmq', action='store_true', help='do not run the zmq tests')\n     parser.add_argument('--jobs', '-j', type=int, default=4, help='how many test scripts to run in parallel. Default=4.')\n-    parser.add_argument('--win', action='store_true', help='signal that this is running in a Windows environment and that we should run the tests')\n-    (args, unknown_args) = parser.parse_known_args()\n+    parser.add_argument('--nozmq', action='store_true', help='do not run the zmq tests')\n+    args, unknown_args = parser.parse_known_args()\n \n     # Create a set to store arguments and create the passon string\n     tests = set(arg for arg in unknown_args if arg[:2] != \"--\")\n@@ -144,15 +146,15 @@ def main():\n     config = configparser.ConfigParser()\n     config.read_file(open(os.path.dirname(__file__) + \"/tests_config.ini\"))\n \n-    enable_wallet = config[\"components\"][\"ENABLE_WALLET\"] == \"True\"\n-    enable_utils = config[\"components\"][\"ENABLE_UTILS\"] == \"True\"\n-    enable_bitcoind = config[\"components\"][\"ENABLE_BITCOIND\"] == \"True\"\n-    enable_zmq = config[\"components\"][\"ENABLE_ZMQ\"] == \"True\" and not args.nozmq\n+    enable_wallet = config[\"components\"].getboolean(\"ENABLE_WALLET\")\n+    enable_utils = config[\"components\"].getboolean(\"ENABLE_UTILS\")\n+    enable_bitcoind = config[\"components\"].getboolean(\"ENABLE_BITCOIND\")\n+    enable_zmq = config[\"components\"].getboolean(\"ENABLE_ZMQ\") and not args.nozmq\n \n-    if config[\"environment\"][\"EXEEXT\"] == \".exe\" and not args.win:\n+    if config[\"environment\"][\"EXEEXT\"] == \".exe\" and not args.force:\n         # https://github.com/bitcoin/bitcoin/commit/d52802551752140cf41f0d9a225a43e84404d3e9\n         # https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-136646964\n-        print(\"Win tests currently disabled by default.  Use --win option to enable\")\n+        print(\"Tests currently disabled on Windows by default. Use --force option to enable\")\n         sys.exit(0)\n \n     if not (enable_wallet and enable_utils and enable_bitcoind):\n@@ -170,12 +172,12 @@ def main():\n             raise\n \n     # Build list of tests\n-    if len(tests) != 0:\n+    if tests:\n         # Individual tests have been specified. Run specified tests that exist\n         # in the ALL_SCRIPTS list. Accept the name with or without .py extension.\n         test_list = [t for t in ALL_SCRIPTS if\n                 (t in tests or re.sub(\".py$\", \"\", t) in tests)]\n-        if len(test_list) == 0:\n+        if not test_list:\n             print(\"No valid test scripts specified. Check that your test is in one \"\n                   \"of the test lists in rpc-tests.py or run rpc-tests.py with no arguments to run all tests\")\n             print(\"Scripts not found:\")\n@@ -200,9 +202,9 @@ def main():\n         subprocess.check_call((config[\"environment\"][\"SRCDIR\"] + '/qa/rpc-tests/' + test_list[0]).split() + ['-h'])\n         sys.exit(0)\n \n-    runtests(test_list, config[\"environment\"][\"SRCDIR\"], config[\"environment\"][\"BUILDDIR\"], config[\"environment\"][\"EXEEXT\"], args.jobs, args.coverage, passon_args)\n+    run_tests(test_list, config[\"environment\"][\"SRCDIR\"], config[\"environment\"][\"BUILDDIR\"], config[\"environment\"][\"EXEEXT\"], args.jobs, args.coverage, passon_args)\n \n-def runtests(test_list, src_dir, build_dir, exeext, jobs=1, enable_coverage=False, args=[]):\n+def run_tests(test_list, src_dir, build_dir, exeext, jobs=1, enable_coverage=False, args=[]):\n     BOLD = (\"\",\"\")\n     if os.name == 'posix':\n         # primitive formatting on supported"
      },
      {
        "sha": "e3e457d0b1d120c13036c5cbfb84004b7168a361",
        "filename": "qa/pull-tester/tests_config.ini.in",
        "status": "modified",
        "additions": 4,
        "deletions": 11,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6a3e58c483700bd5f2bc7d117a621e0c4af60e3/qa/pull-tester/tests_config.ini.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6a3e58c483700bd5f2bc7d117a621e0c4af60e3/qa/pull-tester/tests_config.ini.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/tests_config.ini.in?ref=a6a3e58c483700bd5f2bc7d117a621e0c4af60e3",
        "patch": "@@ -5,21 +5,14 @@\n # These environment variables are set by the build process and read by\n # rpc-tests.py\n \n-[DEFAULT]\n-# Provides default values for whether different components are enabled\n-ENABLE_WALLET=False\n-ENABLE_UTILS=False\n-ENABLE_BITCOIND=False\n-ENABLE_ZMQ=False\n-\n [environment]\n SRCDIR=@abs_top_srcdir@\n BUILDDIR=@abs_top_builddir@\n EXEEXT=@EXEEXT@\n \n [components]\n # Which components are enabled. These are commented out by `configure` if they were disabled when running config.\n-@ENABLE_WALLET_TRUE@ENABLE_WALLET=True\n-@BUILD_BITCOIN_UTILS_TRUE@ENABLE_UTILS=True\n-@BUILD_BITCOIND_TRUE@ENABLE_BITCOIND=True\n-@ENABLE_ZMQ_TRUE@ENABLE_ZMQ=True\n+@ENABLE_WALLET_TRUE@ENABLE_WALLET=true\n+@BUILD_BITCOIN_UTILS_TRUE@ENABLE_UTILS=true\n+@BUILD_BITCOIND_TRUE@ENABLE_BITCOIND=true\n+@ENABLE_ZMQ_TRUE@ENABLE_ZMQ=true"
      }
    ]
  },
  {
    "sha": "914fad155d9fc76b42b3a0414dd14b5ebc36062f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MTRmYWQxNTVkOWZjNzZiNDJiM2EwNDE0ZGQxNGI1ZWJjMzYwNjJm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-02-17T19:41:45Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-02-17T19:42:22Z"
      },
      "message": "Make KEY_SIZE a compile-time constant",
      "tree": {
        "sha": "a88e47c6feb771fd23c77ef3cbf2e028e1bdc1d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a88e47c6feb771fd23c77ef3cbf2e028e1bdc1d1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/914fad155d9fc76b42b3a0414dd14b5ebc36062f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/914fad155d9fc76b42b3a0414dd14b5ebc36062f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/914fad155d9fc76b42b3a0414dd14b5ebc36062f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/914fad155d9fc76b42b3a0414dd14b5ebc36062f/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f87e8f53920adfa80a3f4af9435370dc272c3783",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f87e8f53920adfa80a3f4af9435370dc272c3783",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f87e8f53920adfa80a3f4af9435370dc272c3783"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8ac6925acdac6ee044e5e7d2f8797980760b647e",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/914fad155d9fc76b42b3a0414dd14b5ebc36062f/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/914fad155d9fc76b42b3a0414dd14b5ebc36062f/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=914fad155d9fc76b42b3a0414dd14b5ebc36062f",
        "patch": "@@ -112,7 +112,7 @@ static bool multiUserAuthorized(std::string strUserPass)\n             std::string strSalt = vFields[1];\n             std::string strHash = vFields[2];\n \n-            unsigned int KEY_SIZE = 32;\n+            static const unsigned int KEY_SIZE = 32;\n             unsigned char out[KEY_SIZE];\n \n             CHMAC_SHA256(reinterpret_cast<const unsigned char*>(strSalt.c_str()), strSalt.size()).Write(reinterpret_cast<const unsigned char*>(strPass.c_str()), strPass.size()).Finalize(out);"
      }
    ]
  },
  {
    "sha": "c801c82e253dc4956069b6110f65b43f538dd5a1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjODAxYzgyZTI1M2RjNDk1NjA2OWI2MTEwZjY1YjQzZjUzOGRkNWEx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-02-17T19:54:32Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-02-17T19:54:32Z"
      },
      "message": "Move BIP70_MAX_PAYMENTREQUEST_SIZE to header",
      "tree": {
        "sha": "b7c0483ecb1300bd8a4b571376f5b7ba3b5a5368",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b7c0483ecb1300bd8a4b571376f5b7ba3b5a5368"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c801c82e253dc4956069b6110f65b43f538dd5a1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c801c82e253dc4956069b6110f65b43f538dd5a1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c801c82e253dc4956069b6110f65b43f538dd5a1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c801c82e253dc4956069b6110f65b43f538dd5a1/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "914fad155d9fc76b42b3a0414dd14b5ebc36062f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/914fad155d9fc76b42b3a0414dd14b5ebc36062f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/914fad155d9fc76b42b3a0414dd14b5ebc36062f"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 1,
      "deletions": 3
    },
    "files": [
      {
        "sha": "dd75f12076d9e78a7df3aa7c09196d9128d07e51",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c801c82e253dc4956069b6110f65b43f538dd5a1/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c801c82e253dc4956069b6110f65b43f538dd5a1/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=c801c82e253dc4956069b6110f65b43f538dd5a1",
        "patch": "@@ -55,8 +55,6 @@ const char* BIP70_MESSAGE_PAYMENTREQUEST = \"PaymentRequest\";\n const char* BIP71_MIMETYPE_PAYMENT = \"application/bitcoin-payment\";\n const char* BIP71_MIMETYPE_PAYMENTACK = \"application/bitcoin-paymentack\";\n const char* BIP71_MIMETYPE_PAYMENTREQUEST = \"application/bitcoin-paymentrequest\";\n-// BIP70 max payment request size in bytes (DoS protection)\n-const qint64 BIP70_MAX_PAYMENTREQUEST_SIZE = 50000;\n \n struct X509StoreDeleter {\n       void operator()(X509_STORE* b) {"
      },
      {
        "sha": "7c6d4507fe6ce0c7055c1c6e02869638fe703c59",
        "filename": "src/qt/paymentserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c801c82e253dc4956069b6110f65b43f538dd5a1/src/qt/paymentserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c801c82e253dc4956069b6110f65b43f538dd5a1/src/qt/paymentserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.h?ref=c801c82e253dc4956069b6110f65b43f538dd5a1",
        "patch": "@@ -53,7 +53,7 @@ class QUrl;\n QT_END_NAMESPACE\n \n // BIP70 max payment request size in bytes (DoS protection)\n-extern const qint64 BIP70_MAX_PAYMENTREQUEST_SIZE;\n+static const qint64 BIP70_MAX_PAYMENTREQUEST_SIZE = 50000;\n \n class PaymentServer : public QObject\n {"
      }
    ]
  },
  {
    "sha": "3301587dc5c7937141282f3799592d1e398495fb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMzAxNTg3ZGM1Yzc5MzcxNDEyODJmMzc5OTU5MmQxZTM5ODQ5NWZi",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-17T20:04:30Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-17T20:06:09Z"
      },
      "message": "boost: remove iostreams includes\n\nThey're unused and produce nasty deprecation warnings",
      "tree": {
        "sha": "0da178bc816e1bd9cf72726e8069b432651977e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0da178bc816e1bd9cf72726e8069b432651977e3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3301587dc5c7937141282f3799592d1e398495fb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3301587dc5c7937141282f3799592d1e398495fb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3301587dc5c7937141282f3799592d1e398495fb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3301587dc5c7937141282f3799592d1e398495fb/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f87e8f53920adfa80a3f4af9435370dc272c3783",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f87e8f53920adfa80a3f4af9435370dc272c3783",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f87e8f53920adfa80a3f4af9435370dc272c3783"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 0,
      "deletions": 2
    },
    "files": [
      {
        "sha": "0b763acd451d613f15cb1924799ee2219ed06988",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3301587dc5c7937141282f3799592d1e398495fb/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3301587dc5c7937141282f3799592d1e398495fb/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=3301587dc5c7937141282f3799592d1e398495fb",
        "patch": "@@ -18,8 +18,6 @@\n #include <boost/bind.hpp>\n #include <boost/filesystem.hpp>\n #include <boost/foreach.hpp>\n-#include <boost/iostreams/concepts.hpp>\n-#include <boost/iostreams/stream.hpp>\n #include <boost/shared_ptr.hpp>\n #include <boost/signals2/signal.hpp>\n #include <boost/thread.hpp>"
      }
    ]
  },
  {
    "sha": "df42bcdbfebefc908dab7780e931d9ae9ead9d89",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZjQyYmNkYmZlYmVmYzkwOGRhYjc3ODBlOTMxZDlhZTllYWQ5ZDg5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-17T20:47:30Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-17T20:48:05Z"
      },
      "message": "Merge #9785: Avoid variable length arrays\n\nc801c82 Move BIP70_MAX_PAYMENTREQUEST_SIZE to header (Pieter Wuille)\n914fad1 Make KEY_SIZE a compile-time constant (Pieter Wuille)",
      "tree": {
        "sha": "b7c0483ecb1300bd8a4b571376f5b7ba3b5a5368",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b7c0483ecb1300bd8a4b571376f5b7ba3b5a5368"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df42bcdbfebefc908dab7780e931d9ae9ead9d89",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYp2GFAAoJEHSBCwEjRsmm+iYH/iBkHT57NJMWR0Y5I7+GtlNb\n3msg/MJ5PeMSakTh1oOixkOrIYsEE/ivkfu7GNB5xBdyIWASy0TKEPLiNtAPR8bw\nk4a31o5BlnA0lRCJRFSWK8g5kpFKTLK4u7s8Mr9S3u9GqVelxj4SaAjFCA6oMDrM\nCIv10/81yHko0eBE8R/78sKFQ88GEKs+vIAAQykNF/feYnSYTe7rAaBIaNMd+Tv5\nYLm9hbzRB/MZHrZr7Qrszlep98z+3NIhZeFjZDzyYlbZ15OeEMcwPdf2LetzcGfH\nsnT0+hHVpveOD8EnnUrM/H6oOkHhcQn9g0cxBc7Ej/pqTgLxdK30rmT+v77+KLo=\n=3Fun\n-----END PGP SIGNATURE-----",
        "payload": "tree b7c0483ecb1300bd8a4b571376f5b7ba3b5a5368\nparent f87e8f53920adfa80a3f4af9435370dc272c3783\nparent c801c82e253dc4956069b6110f65b43f538dd5a1\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487364450 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487364485 +0100\n\nMerge #9785: Avoid variable length arrays\n\nc801c82 Move BIP70_MAX_PAYMENTREQUEST_SIZE to header (Pieter Wuille)\n914fad1 Make KEY_SIZE a compile-time constant (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df42bcdbfebefc908dab7780e931d9ae9ead9d89",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/df42bcdbfebefc908dab7780e931d9ae9ead9d89",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df42bcdbfebefc908dab7780e931d9ae9ead9d89/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f87e8f53920adfa80a3f4af9435370dc272c3783",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f87e8f53920adfa80a3f4af9435370dc272c3783",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f87e8f53920adfa80a3f4af9435370dc272c3783"
      },
      {
        "sha": "c801c82e253dc4956069b6110f65b43f538dd5a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c801c82e253dc4956069b6110f65b43f538dd5a1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c801c82e253dc4956069b6110f65b43f538dd5a1"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 2,
      "deletions": 4
    },
    "files": [
      {
        "sha": "8ac6925acdac6ee044e5e7d2f8797980760b647e",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df42bcdbfebefc908dab7780e931d9ae9ead9d89/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df42bcdbfebefc908dab7780e931d9ae9ead9d89/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=df42bcdbfebefc908dab7780e931d9ae9ead9d89",
        "patch": "@@ -112,7 +112,7 @@ static bool multiUserAuthorized(std::string strUserPass)\n             std::string strSalt = vFields[1];\n             std::string strHash = vFields[2];\n \n-            unsigned int KEY_SIZE = 32;\n+            static const unsigned int KEY_SIZE = 32;\n             unsigned char out[KEY_SIZE];\n \n             CHMAC_SHA256(reinterpret_cast<const unsigned char*>(strSalt.c_str()), strSalt.size()).Write(reinterpret_cast<const unsigned char*>(strPass.c_str()), strPass.size()).Finalize(out);"
      },
      {
        "sha": "dd75f12076d9e78a7df3aa7c09196d9128d07e51",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df42bcdbfebefc908dab7780e931d9ae9ead9d89/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df42bcdbfebefc908dab7780e931d9ae9ead9d89/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=df42bcdbfebefc908dab7780e931d9ae9ead9d89",
        "patch": "@@ -55,8 +55,6 @@ const char* BIP70_MESSAGE_PAYMENTREQUEST = \"PaymentRequest\";\n const char* BIP71_MIMETYPE_PAYMENT = \"application/bitcoin-payment\";\n const char* BIP71_MIMETYPE_PAYMENTACK = \"application/bitcoin-paymentack\";\n const char* BIP71_MIMETYPE_PAYMENTREQUEST = \"application/bitcoin-paymentrequest\";\n-// BIP70 max payment request size in bytes (DoS protection)\n-const qint64 BIP70_MAX_PAYMENTREQUEST_SIZE = 50000;\n \n struct X509StoreDeleter {\n       void operator()(X509_STORE* b) {"
      },
      {
        "sha": "7c6d4507fe6ce0c7055c1c6e02869638fe703c59",
        "filename": "src/qt/paymentserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df42bcdbfebefc908dab7780e931d9ae9ead9d89/src/qt/paymentserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df42bcdbfebefc908dab7780e931d9ae9ead9d89/src/qt/paymentserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.h?ref=df42bcdbfebefc908dab7780e931d9ae9ead9d89",
        "patch": "@@ -53,7 +53,7 @@ class QUrl;\n QT_END_NAMESPACE\n \n // BIP70 max payment request size in bytes (DoS protection)\n-extern const qint64 BIP70_MAX_PAYMENTREQUEST_SIZE;\n+static const qint64 BIP70_MAX_PAYMENTREQUEST_SIZE = 50000;\n \n class PaymentServer : public QObject\n {"
      }
    ]
  },
  {
    "sha": "12f46fa7d87d9639781fd8aad62e11f6fed0a808",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMmY0NmZhN2Q4N2Q5NjM5NzgxZmQ4YWFkNjJlMTFmNmZlZDBhODA4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-17T20:48:29Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-17T20:48:37Z"
      },
      "message": "Merge #9786: boost: remove iostreams includes\n\n3301587 boost: remove iostreams includes (Cory Fields)",
      "tree": {
        "sha": "5976c03295739c73c834a118db0ccc61a6ef4a23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5976c03295739c73c834a118db0ccc61a6ef4a23"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/12f46fa7d87d9639781fd8aad62e11f6fed0a808",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYp2GlAAoJEHSBCwEjRsmmxdcIAMllhWprpm7ClMwQwdkwrP+U\nVBWlSeyEE0mhRkuan5G5qUK0gp2l+I5cSTf2trCamgpLOOrC9eGC7dUkbd+nmIjf\nPc3h8xA7cklkmOS36+RzWD6fH4MmeocHD4D4fyToFsGQmpF5qkyGJttw5cD2lH9A\nyCWhgzNhe3PvCs7G0kCRheZIV5eM/xoW5PtUhpmTgihiFvZN0ABrOEIP3sgRSk44\n3LY68wrVqDg7MEe2aUdDNb47lv0NUgYPxjdkzquFOoZQ5i6lpXmTrPXViu4IY4H5\n5Yv6NYufHXM22UApjhyB61ppz35LLHMIrKQ3SEC2dpiHwuqk/Sr60rLqlOvD7x4=\n=sc9P\n-----END PGP SIGNATURE-----",
        "payload": "tree 5976c03295739c73c834a118db0ccc61a6ef4a23\nparent df42bcdbfebefc908dab7780e931d9ae9ead9d89\nparent 3301587dc5c7937141282f3799592d1e398495fb\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487364509 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487364517 +0100\n\nMerge #9786: boost: remove iostreams includes\n\n3301587 boost: remove iostreams includes (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12f46fa7d87d9639781fd8aad62e11f6fed0a808",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/12f46fa7d87d9639781fd8aad62e11f6fed0a808",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12f46fa7d87d9639781fd8aad62e11f6fed0a808/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "df42bcdbfebefc908dab7780e931d9ae9ead9d89",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df42bcdbfebefc908dab7780e931d9ae9ead9d89",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df42bcdbfebefc908dab7780e931d9ae9ead9d89"
      },
      {
        "sha": "3301587dc5c7937141282f3799592d1e398495fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3301587dc5c7937141282f3799592d1e398495fb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3301587dc5c7937141282f3799592d1e398495fb"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 0,
      "deletions": 2
    },
    "files": [
      {
        "sha": "0b763acd451d613f15cb1924799ee2219ed06988",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12f46fa7d87d9639781fd8aad62e11f6fed0a808/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12f46fa7d87d9639781fd8aad62e11f6fed0a808/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=12f46fa7d87d9639781fd8aad62e11f6fed0a808",
        "patch": "@@ -18,8 +18,6 @@\n #include <boost/bind.hpp>\n #include <boost/filesystem.hpp>\n #include <boost/foreach.hpp>\n-#include <boost/iostreams/concepts.hpp>\n-#include <boost/iostreams/stream.hpp>\n #include <boost/shared_ptr.hpp>\n #include <boost/signals2/signal.hpp>\n #include <boost/thread.hpp>"
      }
    ]
  },
  {
    "sha": "8e5cca027fd911b3e7f64495c75986ccf997f6a0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZTVjY2EwMjdmZDkxMWIzZTdmNjQ0OTVjNzU5ODZjY2Y5OTdmNmEw",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-17T21:11:40Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-17T21:11:43Z"
      },
      "message": "gitian: bump descriptors for master\n\nThis was skipped for the 0.14 cycle.",
      "tree": {
        "sha": "7e93b8aa665709219ce6507c17af947fa263faf6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7e93b8aa665709219ce6507c17af947fa263faf6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8e5cca027fd911b3e7f64495c75986ccf997f6a0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e5cca027fd911b3e7f64495c75986ccf997f6a0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8e5cca027fd911b3e7f64495c75986ccf997f6a0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e5cca027fd911b3e7f64495c75986ccf997f6a0/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "12f46fa7d87d9639781fd8aad62e11f6fed0a808",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12f46fa7d87d9639781fd8aad62e11f6fed0a808",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/12f46fa7d87d9639781fd8aad62e11f6fed0a808"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "00af4bdc6fa81e2cbfc1550feb5f2a99cb0f8f44",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e5cca027fd911b3e7f64495c75986ccf997f6a0/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e5cca027fd911b3e7f64495c75986ccf997f6a0/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=8e5cca027fd911b3e7f64495c75986ccf997f6a0",
        "patch": "@@ -1,5 +1,5 @@\n ---\n-name: \"bitcoin-linux-0.13\"\n+name: \"bitcoin-linux-0.15\"\n enable_cache: true\n suites:\n - \"trusty\""
      },
      {
        "sha": "05cc65414fc537678b9b9c511781c326746427b9",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e5cca027fd911b3e7f64495c75986ccf997f6a0/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e5cca027fd911b3e7f64495c75986ccf997f6a0/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=8e5cca027fd911b3e7f64495c75986ccf997f6a0",
        "patch": "@@ -1,5 +1,5 @@\n ---\n-name: \"bitcoin-osx-0.13\"\n+name: \"bitcoin-osx-0.15\"\n enable_cache: true\n suites:\n - \"trusty\""
      },
      {
        "sha": "6fead7c208de0d0abbd8835a2c0bfbe8c501213f",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e5cca027fd911b3e7f64495c75986ccf997f6a0/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e5cca027fd911b3e7f64495c75986ccf997f6a0/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=8e5cca027fd911b3e7f64495c75986ccf997f6a0",
        "patch": "@@ -1,5 +1,5 @@\n ---\n-name: \"bitcoin-win-0.13\"\n+name: \"bitcoin-win-0.15\"\n enable_cache: true\n suites:\n - \"trusty\""
      }
    ]
  },
  {
    "sha": "5c8fd508112016c3821b71112270afe83e6949ac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YzhmZDUwODExMjAxNmMzODIxYjcxMTEyMjcwYWZlODNlNjk0OWFj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-02-17T23:28:28Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-02-17T23:28:28Z"
      },
      "message": "Avoid VLA in hash.h",
      "tree": {
        "sha": "54ac54a1078e32ff13ac90949822209a6fbf85a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/54ac54a1078e32ff13ac90949822209a6fbf85a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5c8fd508112016c3821b71112270afe83e6949ac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c8fd508112016c3821b71112270afe83e6949ac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5c8fd508112016c3821b71112270afe83e6949ac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c8fd508112016c3821b71112270afe83e6949ac/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "12f46fa7d87d9639781fd8aad62e11f6fed0a808",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12f46fa7d87d9639781fd8aad62e11f6fed0a808",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/12f46fa7d87d9639781fd8aad62e11f6fed0a808"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "eacb8f04fef378ab80a1b1df15689525e5d45895",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c8fd508112016c3821b71112270afe83e6949ac/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c8fd508112016c3821b71112270afe83e6949ac/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=5c8fd508112016c3821b71112270afe83e6949ac",
        "patch": "@@ -25,9 +25,9 @@ class CHash256 {\n     static const size_t OUTPUT_SIZE = CSHA256::OUTPUT_SIZE;\n \n     void Finalize(unsigned char hash[OUTPUT_SIZE]) {\n-        unsigned char buf[sha.OUTPUT_SIZE];\n+        unsigned char buf[CSHA256::OUTPUT_SIZE];\n         sha.Finalize(buf);\n-        sha.Reset().Write(buf, sha.OUTPUT_SIZE).Finalize(hash);\n+        sha.Reset().Write(buf, CSHA256::OUTPUT_SIZE).Finalize(hash);\n     }\n \n     CHash256& Write(const unsigned char *data, size_t len) {\n@@ -49,9 +49,9 @@ class CHash160 {\n     static const size_t OUTPUT_SIZE = CRIPEMD160::OUTPUT_SIZE;\n \n     void Finalize(unsigned char hash[OUTPUT_SIZE]) {\n-        unsigned char buf[sha.OUTPUT_SIZE];\n+        unsigned char buf[CSHA256::OUTPUT_SIZE];\n         sha.Finalize(buf);\n-        CRIPEMD160().Write(buf, sha.OUTPUT_SIZE).Finalize(hash);\n+        CRIPEMD160().Write(buf, CSHA256::OUTPUT_SIZE).Finalize(hash);\n     }\n \n     CHash160& Write(const unsigned char *data, size_t len) {"
      }
    ]
  },
  {
    "sha": "50a226563cd8d7c0a5e8448e87fede0eb72a8354",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MGEyMjY1NjNjZDhkN2MwYTVlODQ0OGU4N2ZlZGUwZWI3MmE4MzU0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-02-18T01:18:08Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-02-18T01:19:04Z"
      },
      "message": "Merge #9788: gitian: bump descriptors for master\n\n8e5cca0 gitian: bump descriptors for master (Cory Fields)",
      "tree": {
        "sha": "7e93b8aa665709219ce6507c17af947fa263faf6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7e93b8aa665709219ce6507c17af947fa263faf6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/50a226563cd8d7c0a5e8448e87fede0eb72a8354",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCgAGBQJYp6EIAAoJEC1/I3LlD+E3PoEH/iI0FKOwqZM5plQw0J5KseWP\njL5baz9JMEzYz0AjQsOD2pavmhbP/olbQCGsZQ0HIqp+M9GbIB3C/2Lxh3Rve+QW\nalzg2T+MwYJB0StrGFBKraI5eobnZn1ZAg64iRErg2NsjNFzPiLfYSufVYqMB0s1\npWOplINTu3MCcUFKNN5oUNmvs1GR0EK9YVzLP4+nIAXuYsYIHSHjJbivjq1O0iRC\ntVlPiFjsUtGcY97uMSG/3ToywK37lyAeYFkbHrVFOdCnnTT6AoQLsKfL928OjnYi\n1byRo+JCcc25JGnrQZP0WDenj8zO3elwvuoQaZs6/poluHvMrHp4TI/N72xCxbQ=\n=6BtY\n-----END PGP SIGNATURE-----",
        "payload": "tree 7e93b8aa665709219ce6507c17af947fa263faf6\nparent 12f46fa7d87d9639781fd8aad62e11f6fed0a808\nparent 8e5cca027fd911b3e7f64495c75986ccf997f6a0\nauthor MarcoFalke <falke.marco@gmail.com> 1487380688 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1487380744 +0100\n\nMerge #9788: gitian: bump descriptors for master\n\n8e5cca0 gitian: bump descriptors for master (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50a226563cd8d7c0a5e8448e87fede0eb72a8354",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/50a226563cd8d7c0a5e8448e87fede0eb72a8354",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50a226563cd8d7c0a5e8448e87fede0eb72a8354/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "12f46fa7d87d9639781fd8aad62e11f6fed0a808",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12f46fa7d87d9639781fd8aad62e11f6fed0a808",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/12f46fa7d87d9639781fd8aad62e11f6fed0a808"
      },
      {
        "sha": "8e5cca027fd911b3e7f64495c75986ccf997f6a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e5cca027fd911b3e7f64495c75986ccf997f6a0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8e5cca027fd911b3e7f64495c75986ccf997f6a0"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "00af4bdc6fa81e2cbfc1550feb5f2a99cb0f8f44",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50a226563cd8d7c0a5e8448e87fede0eb72a8354/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50a226563cd8d7c0a5e8448e87fede0eb72a8354/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=50a226563cd8d7c0a5e8448e87fede0eb72a8354",
        "patch": "@@ -1,5 +1,5 @@\n ---\n-name: \"bitcoin-linux-0.13\"\n+name: \"bitcoin-linux-0.15\"\n enable_cache: true\n suites:\n - \"trusty\""
      },
      {
        "sha": "05cc65414fc537678b9b9c511781c326746427b9",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50a226563cd8d7c0a5e8448e87fede0eb72a8354/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50a226563cd8d7c0a5e8448e87fede0eb72a8354/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=50a226563cd8d7c0a5e8448e87fede0eb72a8354",
        "patch": "@@ -1,5 +1,5 @@\n ---\n-name: \"bitcoin-osx-0.13\"\n+name: \"bitcoin-osx-0.15\"\n enable_cache: true\n suites:\n - \"trusty\""
      },
      {
        "sha": "6fead7c208de0d0abbd8835a2c0bfbe8c501213f",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50a226563cd8d7c0a5e8448e87fede0eb72a8354/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50a226563cd8d7c0a5e8448e87fede0eb72a8354/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=50a226563cd8d7c0a5e8448e87fede0eb72a8354",
        "patch": "@@ -1,5 +1,5 @@\n ---\n-name: \"bitcoin-win-0.13\"\n+name: \"bitcoin-win-0.15\"\n enable_cache: true\n suites:\n - \"trusty\""
      }
    ]
  },
  {
    "sha": "8efd1c820b9a782d8608d54d924658536178295c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZWZkMWM4MjBiOWE3ODJkODYwOGQ1NGQ5MjQ2NTg1MzYxNzgyOTVj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-02-18T10:31:18Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-02-18T10:31:32Z"
      },
      "message": "Merge #9744: Remove unused module from rpc-tests\n\na432aa0 Remove unused module from rpc-tests (Takashi Mitsuta)",
      "tree": {
        "sha": "25bfbd4fb3f9f42e1a7397dbc2ce53d9442bc26d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/25bfbd4fb3f9f42e1a7397dbc2ce53d9442bc26d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8efd1c820b9a782d8608d54d924658536178295c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCgAGBQJYqCKEAAoJEC1/I3LlD+E3Hk0IALGCS67qJrRBeu6VQoVTuCsr\nxGte6ZGm9nzJZOQ0C0n1ZXJe/yflFCMc3vIDp0lev1SShcIdmrPQSW62eeshRIWa\nlxCdwfmCjiXQMWNEMiOXVKesqlGQxcu5PymvmXq2sKkXpfQHv+YxkIKZwu9I7lK1\nPzrB+/mMFGJtu0at7DfXGAxY0fyvNCuXHomR0NyrD77zMW12SM7Bl+5ylz0atnUp\nCo6z93s25nNZ3mPKCXDqou8U+6M4k2jm26Wk5Hn1smIxHtubFTKDSYTp5v1Gta9I\nbJcxgj5V9kcKIUQDpUL7hlclhHsd904lmTDiDyeurHnGvJjjPvKqWiQLfNNufrM=\n=EQ9b\n-----END PGP SIGNATURE-----",
        "payload": "tree 25bfbd4fb3f9f42e1a7397dbc2ce53d9442bc26d\nparent 50a226563cd8d7c0a5e8448e87fede0eb72a8354\nparent a432aa0aa83310f0eb053329fb4b2670ce92b1c6\nauthor MarcoFalke <falke.marco@gmail.com> 1487413878 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1487413892 +0100\n\nMerge #9744: Remove unused module from rpc-tests\n\na432aa0 Remove unused module from rpc-tests (Takashi Mitsuta)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8efd1c820b9a782d8608d54d924658536178295c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8efd1c820b9a782d8608d54d924658536178295c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8efd1c820b9a782d8608d54d924658536178295c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "50a226563cd8d7c0a5e8448e87fede0eb72a8354",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50a226563cd8d7c0a5e8448e87fede0eb72a8354",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/50a226563cd8d7c0a5e8448e87fede0eb72a8354"
      },
      {
        "sha": "a432aa0aa83310f0eb053329fb4b2670ce92b1c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a432aa0aa83310f0eb053329fb4b2670ce92b1c6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a432aa0aa83310f0eb053329fb4b2670ce92b1c6"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 1,
      "deletions": 14
    },
    "files": [
      {
        "sha": "e03bc1c37b6dcab4c9fee75032b4ef3385c5370d",
        "filename": "qa/rpc-tests/bip68-112-113-p2p.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8efd1c820b9a782d8608d54d924658536178295c/qa/rpc-tests/bip68-112-113-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8efd1c820b9a782d8608d54d924658536178295c/qa/rpc-tests/bip68-112-113-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip68-112-113-p2p.py?ref=8efd1c820b9a782d8608d54d924658536178295c",
        "patch": "@@ -5,7 +5,7 @@\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.util import *\n-from test_framework.mininode import ToHex, CTransaction, NetworkThread\n+from test_framework.mininode import ToHex, NetworkThread\n from test_framework.blocktools import create_coinbase, create_block\n from test_framework.comptool import TestInstance, TestManager\n from test_framework.script import *"
      },
      {
        "sha": "1b099f933967524d9826229e270e78fa13b9188c",
        "filename": "qa/rpc-tests/bip68-sequence.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8efd1c820b9a782d8608d54d924658536178295c/qa/rpc-tests/bip68-sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8efd1c820b9a782d8608d54d924658536178295c/qa/rpc-tests/bip68-sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip68-sequence.py?ref=8efd1c820b9a782d8608d54d924658536178295c",
        "patch": "@@ -9,8 +9,6 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-from test_framework.script import *\n-from test_framework.mininode import *\n from test_framework.blocktools import *\n \n SEQUENCE_LOCKTIME_DISABLE_FLAG = (1<<31)"
      },
      {
        "sha": "e02cb4c300b039ac25a25365edf66ceb750229b3",
        "filename": "qa/rpc-tests/bumpfee.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8efd1c820b9a782d8608d54d924658536178295c/qa/rpc-tests/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8efd1c820b9a782d8608d54d924658536178295c/qa/rpc-tests/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bumpfee.py?ref=8efd1c820b9a782d8608d54d924658536178295c",
        "patch": "@@ -8,10 +8,8 @@\n from test_framework import blocktools\n from test_framework.mininode import CTransaction\n from test_framework.util import *\n-from test_framework.util import *\n \n import io\n-import time\n \n # Sequence number that is BIP 125 opt-in and BIP 68-compliant\n BIP125_SEQUENCE_NUMBER = 0xfffffffd"
      },
      {
        "sha": "47dfe4f5fd18ee12a248c26615f53d97fc68993d",
        "filename": "qa/rpc-tests/p2p-compactblocks.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8efd1c820b9a782d8608d54d924658536178295c/qa/rpc-tests/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8efd1c820b9a782d8608d54d924658536178295c/qa/rpc-tests/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-compactblocks.py?ref=8efd1c820b9a782d8608d54d924658536178295c",
        "patch": "@@ -7,7 +7,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment\n-from test_framework.siphash import siphash256\n from test_framework.script import CScript, OP_TRUE\n \n '''"
      },
      {
        "sha": "f9a40955c06c2b4411d34d23d001f58f703e5b76",
        "filename": "qa/rpc-tests/rpcnamedargs.py",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8efd1c820b9a782d8608d54d924658536178295c/qa/rpc-tests/rpcnamedargs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8efd1c820b9a782d8608d54d924658536178295c/qa/rpc-tests/rpcnamedargs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rpcnamedargs.py?ref=8efd1c820b9a782d8608d54d924658536178295c",
        "patch": "@@ -3,17 +3,11 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-from decimal import Decimal\n-\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.authproxy import JSONRPCException\n from test_framework.util import (\n     assert_equal,\n     assert_raises_jsonrpc,\n-    assert_is_hex_string,\n-    assert_is_hash_string,\n     start_nodes,\n-    connect_nodes_bi,\n )\n \n "
      },
      {
        "sha": "45a9db05717372008c2c07fa62be66d9a39f0491",
        "filename": "qa/rpc-tests/wallet-accounts.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8efd1c820b9a782d8608d54d924658536178295c/qa/rpc-tests/wallet-accounts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8efd1c820b9a782d8608d54d924658536178295c/qa/rpc-tests/wallet-accounts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet-accounts.py?ref=8efd1c820b9a782d8608d54d924658536178295c",
        "patch": "@@ -6,9 +6,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     start_nodes,\n-    start_node,\n     assert_equal,\n-    connect_nodes_bi,\n )\n \n "
      }
    ]
  },
  {
    "sha": "eb4910193accabdb2edf6a361d52050c851de96e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYjQ5MTAxOTNhY2NhYmRiMmVkZjZhMzYxZDUyMDUwYzg1MWRlOTZl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-17T17:21:18Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-02-18T10:55:33Z"
      },
      "message": "doc: Update manpages for master\n\n(cherry picked from commit 268c390d02d99a4a93a0a01221e273d2b9695ff7)",
      "tree": {
        "sha": "55158797a0c359c150c2a3270d777e79863cdfb9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/55158797a0c359c150c2a3270d777e79863cdfb9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb4910193accabdb2edf6a361d52050c851de96e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb4910193accabdb2edf6a361d52050c851de96e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eb4910193accabdb2edf6a361d52050c851de96e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb4910193accabdb2edf6a361d52050c851de96e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "50a226563cd8d7c0a5e8448e87fede0eb72a8354",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50a226563cd8d7c0a5e8448e87fede0eb72a8354",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/50a226563cd8d7c0a5e8448e87fede0eb72a8354"
      }
    ],
    "stats": {
      "total": 279,
      "additions": 179,
      "deletions": 100
    },
    "files": [
      {
        "sha": "0493241b1e07e90db2ac06eacaaa12ff3a6cd1e9",
        "filename": "doc/man/bitcoin-cli.1",
        "status": "modified",
        "additions": 16,
        "deletions": 14,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb4910193accabdb2edf6a361d52050c851de96e/doc/man/bitcoin-cli.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb4910193accabdb2edf6a361d52050c851de96e/doc/man/bitcoin-cli.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-cli.1?ref=eb4910193accabdb2edf6a361d52050c851de96e",
        "patch": "@@ -1,19 +1,17 @@\n-.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.46.5.\n-.TH BITCOIN-CLI \"1\" \"September 2016\" \"bitcoin-cli v0.13.0.0\" \"User Commands\"\n+.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.4.\n+.TH BITCOIN-CLI \"1\" \"February 2017\" \"bitcoin-cli v0.14.99.0\" \"User Commands\"\n .SH NAME\n-bitcoin-cli \\- manual page for bitcoin-cli v0.13.0.0\n+bitcoin-cli \\- manual page for bitcoin-cli v0.14.99.0\n .SH DESCRIPTION\n-Bitcoin Core RPC client version v0.13.0.0\n+Bitcoin Core RPC client version v0.14.99.0\n .SS \"Usage:\"\n .TP\n bitcoin\\-cli [options] <command> [params]\n Send command to Bitcoin Core\n-.TP\n-bitcoin\\-cli [options] help\n-List commands\n-.TP\n-bitcoin\\-cli [options] help <command>\n-Get help for a command\n+.IP\n+bitcoin\\-cli [options] \\fB\\-named\\fR <command> [name=value] ... Send command to Bitcoin Core (with named arguments)\n+bitcoin\\-cli [options] help                List commands\n+bitcoin\\-cli [options] help <command>      Get help for a command\n .SH OPTIONS\n .HP\n \\-?\n@@ -40,6 +38,10 @@ Enter regression test mode, which uses a special chain in which blocks\n can be solved instantly. This is intended for regression testing\n tools and app development.\n .HP\n+\\fB\\-named\\fR\n+.IP\n+Pass named instead of positional arguments (default: false)\n+.HP\n \\fB\\-rpcconnect=\\fR<ip>\n .IP\n Send commands to node running on <ip> (default: 127.0.0.1)\n@@ -69,16 +71,16 @@ Timeout during HTTP requests (default: 900)\n Read extra arguments from standard input, one per line until EOF/Ctrl\\-D\n (recommended for sensitive information such as passphrases)\n .SH COPYRIGHT\n-Copyright (C) 2009-2016 The Bitcoin Core developers\n+Copyright (C) 2009-2017 The Bitcoin Core developers\n \n Please contribute if you find Bitcoin Core useful. Visit\n <https://bitcoincore.org> for further information about the software.\n The source code is available from <https://github.com/bitcoin/bitcoin>.\n \n This is experimental software.\n Distributed under the MIT software license, see the accompanying file COPYING\n-or <http://www.opensource.org/licenses/mit-license.php>.\n+or <https://opensource.org/licenses/MIT>\n \n This product includes software developed by the OpenSSL Project for use in the\n-OpenSSL Toolkit <https://www.openssl.org/> and cryptographic software written\n-by Eric Young and UPnP software written by Thomas Bernard.\n+OpenSSL Toolkit <https://www.openssl.org> and cryptographic software written by\n+Eric Young and UPnP software written by Thomas Bernard."
      },
      {
        "sha": "ce252612e57a2ae402921f7ed50cf7199679aa1e",
        "filename": "doc/man/bitcoin-qt.1",
        "status": "modified",
        "additions": 69,
        "deletions": 38,
        "changes": 107,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb4910193accabdb2edf6a361d52050c851de96e/doc/man/bitcoin-qt.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb4910193accabdb2edf6a361d52050c851de96e/doc/man/bitcoin-qt.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-qt.1?ref=eb4910193accabdb2edf6a361d52050c851de96e",
        "patch": "@@ -1,9 +1,9 @@\n-.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.46.5.\n-.TH BITCOIN-QT \"1\" \"September 2016\" \"bitcoin-qt v0.13.0.0\" \"User Commands\"\n+.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.4.\n+.TH BITCOIN-QT \"1\" \"February 2017\" \"bitcoin-qt v0.14.99.0\" \"User Commands\"\n .SH NAME\n-bitcoin-qt \\- manual page for bitcoin-qt v0.13.0.0\n+bitcoin-qt \\- manual page for bitcoin-qt v0.14.99.0\n .SH DESCRIPTION\n-Bitcoin Core version v0.13.0.0 (64\\-bit)\n+Bitcoin Core version v0.14.99.0 (64\\-bit)\n Usage:\n .IP\n bitcoin\\-qt [command\\-line options]\n@@ -27,13 +27,14 @@ long fork (%s in cmd is replaced by message)\n Execute command when the best block changes (%s in cmd is replaced by\n block hash)\n .HP\n-\\fB\\-checkblocks=\\fR<n>\n+\\fB\\-assumevalid=\\fR<hex>\n .IP\n-How many blocks to check at startup (default: 288, 0 = all)\n-.HP\n-\\fB\\-checklevel=\\fR<n>\n-.IP\n-How thorough the block verification of \\fB\\-checkblocks\\fR is (0\\-4, default: 3)\n+If this block is in the chain assume that it and its ancestors are valid\n+and potentially skip their script verification (0 to verify all,\n+default:\n+00000000000000000013176bf8d7dfeab4e1db31dc93bc311b436e82ab226b90,\n+testnet:\n+00000000000128796ee387cf110ccb9d2f36cffaf7f73079c995377c65ac0dcc)\n .HP\n \\fB\\-conf=\\fR<file>\n .IP\n@@ -62,11 +63,16 @@ Keep the transaction memory pool below <n> megabytes (default: 300)\n \\fB\\-mempoolexpiry=\\fR<n>\n .IP\n Do not keep transactions in the mempool longer than <n> hours (default:\n-72)\n+336)\n+.HP\n+\\fB\\-blockreconstructionextratxn=\\fR<n>\n+.IP\n+Extra transactions to keep in memory for compact block reconstructions\n+(default: 100)\n .HP\n \\fB\\-par=\\fR<n>\n .IP\n-Set the number of script verification threads (\\fB\\-4\\fR to 16, 0 = auto, <0 =\n+Set the number of script verification threads (\\fB\\-2\\fR to 16, 0 = auto, <0 =\n leave that many cores free, default: 0)\n .HP\n \\fB\\-pid=\\fR<file>\n@@ -75,13 +81,15 @@ Specify pid file (default: bitcoind.pid)\n .HP\n \\fB\\-prune=\\fR<n>\n .IP\n-Reduce storage requirements by enabling pruning (deleting) of old blocks.\n-This allows the pruneblockchain RPC to be called to delete specific blocks,\n-and enables automatic pruning of old blocks if a target size in MiB is\n-provided. This mode is incompatible with \\fB\\-txindex\\fR and \\fB\\-rescan\\fR.\n-Warning: Reverting this setting requires re\\-downloading the entire blockchain.\n-(default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, >550 =\n-automatically prune block files to stay under the specified target size in MiB)\n+Reduce storage requirements by enabling pruning (deleting) of old\n+blocks. This allows the pruneblockchain RPC to be called to\n+delete specific blocks, and enables automatic pruning of old\n+blocks if a target size in MiB is provided. This mode is\n+incompatible with \\fB\\-txindex\\fR and \\fB\\-rescan\\fR. Warning: Reverting this\n+setting requires re\\-downloading the entire blockchain. (default:\n+0 = disable pruning blocks, 1 = allow manual pruning via RPC,\n+>550 = automatically prune block files to stay under the\n+specified target size in MiB)\n .HP\n \\fB\\-reindex\\-chainstate\\fR\n .IP\n@@ -123,7 +131,8 @@ for IPv6\n .HP\n \\fB\\-connect=\\fR<ip>\n .IP\n-Connect only to the specified node(s)\n+Connect only to the specified node(s); \\fB\\-noconnect\\fR or \\fB\\-connect\\fR=\\fI\\,0\\/\\fR alone to\n+disable automatic connections\n .HP\n \\fB\\-discover\\fR\n .IP\n@@ -137,7 +146,7 @@ Allow DNS lookups for \\fB\\-addnode\\fR, \\fB\\-seednode\\fR and \\fB\\-connect\\fR (def\n \\fB\\-dnsseed\\fR\n .IP\n Query for peer addresses via DNS lookup, if low on addresses (default: 1\n-unless \\fB\\-connect\\fR)\n+unless \\fB\\-connect\\fR/\\-noconnect)\n .HP\n \\fB\\-externalip=\\fR<ip>\n .IP\n@@ -149,7 +158,8 @@ Always query for peer addresses via DNS lookup (default: 0)\n .HP\n \\fB\\-listen\\fR\n .IP\n-Accept connections from outside (default: 1 if no \\fB\\-proxy\\fR or \\fB\\-connect\\fR)\n+Accept connections from outside (default: 1 if no \\fB\\-proxy\\fR or\n+\\fB\\-connect\\fR/\\-noconnect)\n .HP\n \\fB\\-listenonion\\fR\n .IP\n@@ -204,6 +214,11 @@ Connect through SOCKS5 proxy\n Randomize credentials for every proxy connection. This enables Tor\n stream isolation (default: 1)\n .HP\n+\\fB\\-rpcserialversion\\fR\n+.IP\n+Sets the serialization of raw transaction or block hex returned in\n+non\\-verbose mode, non\\-segwit(0) or segwit(1) (default: 1)\n+.HP\n \\fB\\-seednode=\\fR<ip>\n .IP\n Connect to a node to retrieve peer addresses, and disconnect\n@@ -221,17 +236,22 @@ Tor control port to use if onion listening enabled (default:\n .IP\n Tor control port password (default: empty)\n .HP\n+\\fB\\-upnp\\fR\n+.IP\n+Use UPnP to map the listening port (default: 0)\n+.HP\n \\fB\\-whitebind=\\fR<addr>\n .IP\n Bind to given address and whitelist peers connecting to it. Use\n [host]:port notation for IPv6\n .HP\n-\\fB\\-whitelist=\\fR<netmask>\n+\\fB\\-whitelist=\\fR<IP address or network>\n .IP\n-Whitelist peers connecting from the given netmask or IP address. Can be\n-specified multiple times. Whitelisted peers cannot be DoS banned\n-and their transactions are always relayed, even if they are\n-already in the mempool, useful e.g. for a gateway\n+Whitelist peers connecting from the given IP address (e.g. 1.2.3.4) or\n+CIDR notated network (e.g. 1.2.3.0/24). Can be specified multiple\n+times. Whitelisted peers cannot be DoS banned and their\n+transactions are always relayed, even if they are already in the\n+mempool, useful e.g. for a gateway\n .HP\n \\fB\\-whitelistrelay\\fR\n .IP\n@@ -240,7 +260,7 @@ not relaying transactions (default: 1)\n .HP\n \\fB\\-whitelistforcerelay\\fR\n .IP\n-Force relay of transactions from whitelisted peers even they violate\n+Force relay of transactions from whitelisted peers even if they violate\n local relay policy (default: 1)\n .HP\n \\fB\\-maxuploadtarget=\\fR<n>\n@@ -287,13 +307,17 @@ Spend unconfirmed change when sending transactions (default: 1)\n \\fB\\-txconfirmtarget=\\fR<n>\n .IP\n If paytxfee is not set, include enough fee so transactions begin\n-confirmation on average within n blocks (default: 2)\n+confirmation on average within n blocks (default: 6)\n .HP\n \\fB\\-usehd\\fR\n .IP\n Use hierarchical deterministic key generation (HD) after BIP32. Only has\n effect during wallet creation/first start (default: 1)\n .HP\n+\\fB\\-walletrbf\\fR\n+.IP\n+Send transactions with full\\-RBF opt\\-in enabled (default: 0)\n+.HP\n \\fB\\-upgradewallet\\fR\n .IP\n Upgrade wallet to latest format on startup\n@@ -347,9 +371,9 @@ Append comment to the user agent string\n Output debugging information (default: 0, supplying <category> is\n optional). If <category> is not supplied or if <category> = 1,\n output all debugging information.<category> can be: addrman,\n-alert, bench, coindb, db, http, libevent, lock, mempool,\n-mempoolrej, net, proxy, prune, rand, reindex, rpc, selectcoins,\n-tor, zmq, qt.\n+alert, bench, cmpctblock, coindb, db, http, libevent, lock,\n+mempool, mempoolrej, net, proxy, prune, rand, reindex, rpc,\n+selectcoins, tor, zmq, qt.\n .HP\n \\fB\\-help\\-debug\\fR\n .IP\n@@ -422,6 +446,11 @@ Set maximum block size in bytes (default: 750000)\n .IP\n Set maximum size of high\\-priority/low\\-fee transactions in bytes\n (default: 0)\n+.HP\n+\\fB\\-blockmintxfee=\\fR<amt>\n+.IP\n+Set lowest fee rate (in BTC/kB) for transactions to be included in block\n+creation. (default: 0.00001)\n .PP\n RPC server options:\n .HP\n@@ -455,8 +484,10 @@ Password for JSON\\-RPC connections\n .IP\n Username and hashed password for JSON\\-RPC connections. The field\n <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A\n-canonical python script is included in share/rpcuser. This option\n-can be specified multiple times\n+canonical python script is included in share/rpcuser. The client\n+then connects normally using the\n+rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This\n+option can be specified multiple times\n .HP\n \\fB\\-rpcport=\\fR<port>\n .IP\n@@ -500,16 +531,16 @@ Show splash screen on startup (default: 1)\n .IP\n Reset all settings changed in the GUI\n .SH COPYRIGHT\n-Copyright (C) 2009-2016 The Bitcoin Core developers\n+Copyright (C) 2009-2017 The Bitcoin Core developers\n \n Please contribute if you find Bitcoin Core useful. Visit\n <https://bitcoincore.org> for further information about the software.\n The source code is available from <https://github.com/bitcoin/bitcoin>.\n \n This is experimental software.\n Distributed under the MIT software license, see the accompanying file COPYING\n-or <http://www.opensource.org/licenses/mit-license.php>.\n+or <https://opensource.org/licenses/MIT>\n \n This product includes software developed by the OpenSSL Project for use in the\n-OpenSSL Toolkit <https://www.openssl.org/> and cryptographic software written\n-by Eric Young and UPnP software written by Thomas Bernard.\n+OpenSSL Toolkit <https://www.openssl.org> and cryptographic software written by\n+Eric Young and UPnP software written by Thomas Bernard."
      },
      {
        "sha": "98adf2f5b1e5d7445326a0782ddd081a3e079b99",
        "filename": "doc/man/bitcoin-tx.1",
        "status": "modified",
        "additions": 25,
        "deletions": 10,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb4910193accabdb2edf6a361d52050c851de96e/doc/man/bitcoin-tx.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb4910193accabdb2edf6a361d52050c851de96e/doc/man/bitcoin-tx.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-tx.1?ref=eb4910193accabdb2edf6a361d52050c851de96e",
        "patch": "@@ -1,9 +1,9 @@\n-.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.46.5.\n-.TH BITCOIN-TX \"1\" \"September 2016\" \"bitcoin-tx v0.13.0.0\" \"User Commands\"\n+.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.4.\n+.TH BITCOIN-TX \"1\" \"February 2017\" \"bitcoin-tx v0.14.99.0\" \"User Commands\"\n .SH NAME\n-bitcoin-tx \\- manual page for bitcoin-tx v0.13.0.0\n+bitcoin-tx \\- manual page for bitcoin-tx v0.14.99.0\n .SH DESCRIPTION\n-Bitcoin Core bitcoin\\-tx utility version v0.13.0.0\n+Bitcoin Core bitcoin\\-tx utility version v0.14.99.0\n .SS \"Usage:\"\n .TP\n bitcoin\\-tx [options] <hex\\-tx> [commands]\n@@ -67,13 +67,28 @@ outaddr=VALUE:ADDRESS\n .IP\n Add address\\-based output to TX\n .IP\n+outpubkey=VALUE:PUBKEY[:FLAGS]\n+.IP\n+Add pay\\-to\\-pubkey output to TX. Optionally add the \"W\" flag to produce a\n+pay\\-to\\-witness\\-pubkey\\-hash output. Optionally add the \"S\" flag to\n+wrap the output in a pay\\-to\\-script\\-hash.\n+.IP\n outdata=[VALUE:]DATA\n .IP\n Add data\\-based output to TX\n .IP\n-outscript=VALUE:SCRIPT\n+outscript=VALUE:SCRIPT[:FLAGS]\n+.IP\n+Add raw script output to TX. Optionally add the \"W\" flag to produce a\n+pay\\-to\\-witness\\-script\\-hash output. Optionally add the \"S\" flag to\n+wrap the output in a pay\\-to\\-script\\-hash.\n+.IP\n+outmultisig=VALUE:REQUIRED:PUBKEYS:PUBKEY1:PUBKEY2:....[:FLAGS]\n .IP\n-Add raw script output to TX\n+Add Pay To n\\-of\\-m Multi\\-sig output to TX. n = REQUIRED, m = PUBKEYS.\n+Optionally add the \"W\" flag to produce a\n+pay\\-to\\-witness\\-script\\-hash output. Optionally add the \"S\" flag to\n+wrap the output in a pay\\-to\\-script\\-hash.\n .IP\n sign=SIGHASH\\-FLAGS\n .IP\n@@ -92,16 +107,16 @@ set=NAME:JSON\\-STRING\n .IP\n Set register NAME to given JSON\\-STRING\n .SH COPYRIGHT\n-Copyright (C) 2009-2016 The Bitcoin Core developers\n+Copyright (C) 2009-2017 The Bitcoin Core developers\n \n Please contribute if you find Bitcoin Core useful. Visit\n <https://bitcoincore.org> for further information about the software.\n The source code is available from <https://github.com/bitcoin/bitcoin>.\n \n This is experimental software.\n Distributed under the MIT software license, see the accompanying file COPYING\n-or <http://www.opensource.org/licenses/mit-license.php>.\n+or <https://opensource.org/licenses/MIT>\n \n This product includes software developed by the OpenSSL Project for use in the\n-OpenSSL Toolkit <https://www.openssl.org/> and cryptographic software written\n-by Eric Young and UPnP software written by Thomas Bernard.\n+OpenSSL Toolkit <https://www.openssl.org> and cryptographic software written by\n+Eric Young and UPnP software written by Thomas Bernard."
      },
      {
        "sha": "fb066e0c6f310fbbe34423cff059052bcdf73af6",
        "filename": "doc/man/bitcoind.1",
        "status": "modified",
        "additions": 69,
        "deletions": 38,
        "changes": 107,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb4910193accabdb2edf6a361d52050c851de96e/doc/man/bitcoind.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb4910193accabdb2edf6a361d52050c851de96e/doc/man/bitcoind.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoind.1?ref=eb4910193accabdb2edf6a361d52050c851de96e",
        "patch": "@@ -1,9 +1,9 @@\n-.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.46.5.\n-.TH BITCOIND \"1\" \"September 2016\" \"bitcoind v0.13.0.0\" \"User Commands\"\n+.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.4.\n+.TH BITCOIND \"1\" \"February 2017\" \"bitcoind v0.14.99.0\" \"User Commands\"\n .SH NAME\n-bitcoind \\- manual page for bitcoind v0.13.0.0\n+bitcoind \\- manual page for bitcoind v0.14.99.0\n .SH DESCRIPTION\n-Bitcoin Core Daemon version v0.13.0.0\n+Bitcoin Core Daemon version v0.14.99.0\n .SS \"Usage:\"\n .TP\n bitcoind [options]\n@@ -28,13 +28,14 @@ long fork (%s in cmd is replaced by message)\n Execute command when the best block changes (%s in cmd is replaced by\n block hash)\n .HP\n-\\fB\\-checkblocks=\\fR<n>\n+\\fB\\-assumevalid=\\fR<hex>\n .IP\n-How many blocks to check at startup (default: 288, 0 = all)\n-.HP\n-\\fB\\-checklevel=\\fR<n>\n-.IP\n-How thorough the block verification of \\fB\\-checkblocks\\fR is (0\\-4, default: 3)\n+If this block is in the chain assume that it and its ancestors are valid\n+and potentially skip their script verification (0 to verify all,\n+default:\n+00000000000000000013176bf8d7dfeab4e1db31dc93bc311b436e82ab226b90,\n+testnet:\n+00000000000128796ee387cf110ccb9d2f36cffaf7f73079c995377c65ac0dcc)\n .HP\n \\fB\\-conf=\\fR<file>\n .IP\n@@ -67,11 +68,16 @@ Keep the transaction memory pool below <n> megabytes (default: 300)\n \\fB\\-mempoolexpiry=\\fR<n>\n .IP\n Do not keep transactions in the mempool longer than <n> hours (default:\n-72)\n+336)\n+.HP\n+\\fB\\-blockreconstructionextratxn=\\fR<n>\n+.IP\n+Extra transactions to keep in memory for compact block reconstructions\n+(default: 100)\n .HP\n \\fB\\-par=\\fR<n>\n .IP\n-Set the number of script verification threads (\\fB\\-4\\fR to 16, 0 = auto, <0 =\n+Set the number of script verification threads (\\fB\\-2\\fR to 16, 0 = auto, <0 =\n leave that many cores free, default: 0)\n .HP\n \\fB\\-pid=\\fR<file>\n@@ -80,13 +86,15 @@ Specify pid file (default: bitcoind.pid)\n .HP\n \\fB\\-prune=\\fR<n>\n .IP\n-Reduce storage requirements by enabling pruning (deleting) of old blocks.\n-This allows the pruneblockchain RPC to be called to delete specific blocks,\n-and enables automatic pruning of old blocks if a target size in MiB is\n-provided. This mode is incompatible with \\fB\\-txindex\\fR and \\fB\\-rescan\\fR.\n-Warning: Reverting this setting requires re\\-downloading the entire blockchain.\n-(default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, >550 =\n-automatically prune block files to stay under the specified target size in MiB)\n+Reduce storage requirements by enabling pruning (deleting) of old\n+blocks. This allows the pruneblockchain RPC to be called to\n+delete specific blocks, and enables automatic pruning of old\n+blocks if a target size in MiB is provided. This mode is\n+incompatible with \\fB\\-txindex\\fR and \\fB\\-rescan\\fR. Warning: Reverting this\n+setting requires re\\-downloading the entire blockchain. (default:\n+0 = disable pruning blocks, 1 = allow manual pruning via RPC,\n+>550 = automatically prune block files to stay under the\n+specified target size in MiB)\n .HP\n \\fB\\-reindex\\-chainstate\\fR\n .IP\n@@ -128,7 +136,8 @@ for IPv6\n .HP\n \\fB\\-connect=\\fR<ip>\n .IP\n-Connect only to the specified node(s)\n+Connect only to the specified node(s); \\fB\\-noconnect\\fR or \\fB\\-connect\\fR=\\fI\\,0\\/\\fR alone to\n+disable automatic connections\n .HP\n \\fB\\-discover\\fR\n .IP\n@@ -142,7 +151,7 @@ Allow DNS lookups for \\fB\\-addnode\\fR, \\fB\\-seednode\\fR and \\fB\\-connect\\fR (def\n \\fB\\-dnsseed\\fR\n .IP\n Query for peer addresses via DNS lookup, if low on addresses (default: 1\n-unless \\fB\\-connect\\fR)\n+unless \\fB\\-connect\\fR/\\-noconnect)\n .HP\n \\fB\\-externalip=\\fR<ip>\n .IP\n@@ -154,7 +163,8 @@ Always query for peer addresses via DNS lookup (default: 0)\n .HP\n \\fB\\-listen\\fR\n .IP\n-Accept connections from outside (default: 1 if no \\fB\\-proxy\\fR or \\fB\\-connect\\fR)\n+Accept connections from outside (default: 1 if no \\fB\\-proxy\\fR or\n+\\fB\\-connect\\fR/\\-noconnect)\n .HP\n \\fB\\-listenonion\\fR\n .IP\n@@ -209,6 +219,11 @@ Connect through SOCKS5 proxy\n Randomize credentials for every proxy connection. This enables Tor\n stream isolation (default: 1)\n .HP\n+\\fB\\-rpcserialversion\\fR\n+.IP\n+Sets the serialization of raw transaction or block hex returned in\n+non\\-verbose mode, non\\-segwit(0) or segwit(1) (default: 1)\n+.HP\n \\fB\\-seednode=\\fR<ip>\n .IP\n Connect to a node to retrieve peer addresses, and disconnect\n@@ -226,17 +241,22 @@ Tor control port to use if onion listening enabled (default:\n .IP\n Tor control port password (default: empty)\n .HP\n+\\fB\\-upnp\\fR\n+.IP\n+Use UPnP to map the listening port (default: 0)\n+.HP\n \\fB\\-whitebind=\\fR<addr>\n .IP\n Bind to given address and whitelist peers connecting to it. Use\n [host]:port notation for IPv6\n .HP\n-\\fB\\-whitelist=\\fR<netmask>\n+\\fB\\-whitelist=\\fR<IP address or network>\n .IP\n-Whitelist peers connecting from the given netmask or IP address. Can be\n-specified multiple times. Whitelisted peers cannot be DoS banned\n-and their transactions are always relayed, even if they are\n-already in the mempool, useful e.g. for a gateway\n+Whitelist peers connecting from the given IP address (e.g. 1.2.3.4) or\n+CIDR notated network (e.g. 1.2.3.0/24). Can be specified multiple\n+times. Whitelisted peers cannot be DoS banned and their\n+transactions are always relayed, even if they are already in the\n+mempool, useful e.g. for a gateway\n .HP\n \\fB\\-whitelistrelay\\fR\n .IP\n@@ -245,7 +265,7 @@ not relaying transactions (default: 1)\n .HP\n \\fB\\-whitelistforcerelay\\fR\n .IP\n-Force relay of transactions from whitelisted peers even they violate\n+Force relay of transactions from whitelisted peers even if they violate\n local relay policy (default: 1)\n .HP\n \\fB\\-maxuploadtarget=\\fR<n>\n@@ -292,13 +312,17 @@ Spend unconfirmed change when sending transactions (default: 1)\n \\fB\\-txconfirmtarget=\\fR<n>\n .IP\n If paytxfee is not set, include enough fee so transactions begin\n-confirmation on average within n blocks (default: 2)\n+confirmation on average within n blocks (default: 6)\n .HP\n \\fB\\-usehd\\fR\n .IP\n Use hierarchical deterministic key generation (HD) after BIP32. Only has\n effect during wallet creation/first start (default: 1)\n .HP\n+\\fB\\-walletrbf\\fR\n+.IP\n+Send transactions with full\\-RBF opt\\-in enabled (default: 0)\n+.HP\n \\fB\\-upgradewallet\\fR\n .IP\n Upgrade wallet to latest format on startup\n@@ -352,9 +376,9 @@ Append comment to the user agent string\n Output debugging information (default: 0, supplying <category> is\n optional). If <category> is not supplied or if <category> = 1,\n output all debugging information.<category> can be: addrman,\n-alert, bench, coindb, db, http, libevent, lock, mempool,\n-mempoolrej, net, proxy, prune, rand, reindex, rpc, selectcoins,\n-tor, zmq.\n+alert, bench, cmpctblock, coindb, db, http, libevent, lock,\n+mempool, mempoolrej, net, proxy, prune, rand, reindex, rpc,\n+selectcoins, tor, zmq.\n .HP\n \\fB\\-help\\-debug\\fR\n .IP\n@@ -427,6 +451,11 @@ Set maximum block size in bytes (default: 750000)\n .IP\n Set maximum size of high\\-priority/low\\-fee transactions in bytes\n (default: 0)\n+.HP\n+\\fB\\-blockmintxfee=\\fR<amt>\n+.IP\n+Set lowest fee rate (in BTC/kB) for transactions to be included in block\n+creation. (default: 0.00001)\n .PP\n RPC server options:\n .HP\n@@ -460,8 +489,10 @@ Password for JSON\\-RPC connections\n .IP\n Username and hashed password for JSON\\-RPC connections. The field\n <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A\n-canonical python script is included in share/rpcuser. This option\n-can be specified multiple times\n+canonical python script is included in share/rpcuser. The client\n+then connects normally using the\n+rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This\n+option can be specified multiple times\n .HP\n \\fB\\-rpcport=\\fR<port>\n .IP\n@@ -479,16 +510,16 @@ option can be specified multiple times\n .IP\n Set the number of threads to service RPC calls (default: 4)\n .SH COPYRIGHT\n-Copyright (C) 2009-2016 The Bitcoin Core developers\n+Copyright (C) 2009-2017 The Bitcoin Core developers\n \n Please contribute if you find Bitcoin Core useful. Visit\n <https://bitcoincore.org> for further information about the software.\n The source code is available from <https://github.com/bitcoin/bitcoin>.\n \n This is experimental software.\n Distributed under the MIT software license, see the accompanying file COPYING\n-or <http://www.opensource.org/licenses/mit-license.php>.\n+or <https://opensource.org/licenses/MIT>\n \n This product includes software developed by the OpenSSL Project for use in the\n-OpenSSL Toolkit <https://www.openssl.org/> and cryptographic software written\n-by Eric Young and UPnP software written by Thomas Bernard.\n+OpenSSL Toolkit <https://www.openssl.org> and cryptographic software written by\n+Eric Young and UPnP software written by Thomas Bernard."
      }
    ]
  },
  {
    "sha": "aa5fa642b0e7ce2ea55e2298886f212f11a8894e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYTVmYTY0MmIwZTdjZTJlYTU1ZTIyOTg4ODZmMjEyZjExYTg4OTRl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-02-18T11:11:45Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-02-18T11:13:09Z"
      },
      "message": "Merge #9696: [trivial] Fix recently introduced typos in comments\n\n0c9b9b7 [trivial] Fix recently introduced typos in comments (practicalswift)",
      "tree": {
        "sha": "1bf216ac62d62ece4b07e4ad83ac8d97e3ca6673",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1bf216ac62d62ece4b07e4ad83ac8d97e3ca6673"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa5fa642b0e7ce2ea55e2298886f212f11a8894e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCgAGBQJYqCxFAAoJEC1/I3LlD+E30Y4H/RyoOsyrGT5TCrH8FMurLrLT\n6I6dTUD2hRCJB0DcMhqs82qyUIEItwNYeCqF9iLk/JzalHd4vxOQSnmc4vObAqf1\n29/juPj/NKimmVzemH0/0bC68++MCyNVancaZtKS+e2lApjpGIjDXOGfLQzwrbgS\nI2QxEBfCSXaNd+jOpR3+zm6QIMIoN7ScqxYhi2ESAD0v3Jli9HmNIMkVUAMeeujF\nqL9Xqbcd85kAvvnHcB4BkDpUN2A0uPe8PE3VxoqHpmfVPrmyT1URrBLRBS++jmna\nHFusIdkwBAtL0mmPNqzDd5vsdGvT07KDrpO4RHs0lctY6GGJeZI4y9HWqXA4pLM=\n=9D9Q\n-----END PGP SIGNATURE-----",
        "payload": "tree 1bf216ac62d62ece4b07e4ad83ac8d97e3ca6673\nparent 8efd1c820b9a782d8608d54d924658536178295c\nparent 0c9b9b7d646333cb3212f1bea98e629c416cbe42\nauthor MarcoFalke <falke.marco@gmail.com> 1487416305 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1487416389 +0100\n\nMerge #9696: [trivial] Fix recently introduced typos in comments\n\n0c9b9b7 [trivial] Fix recently introduced typos in comments (practicalswift)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa5fa642b0e7ce2ea55e2298886f212f11a8894e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aa5fa642b0e7ce2ea55e2298886f212f11a8894e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa5fa642b0e7ce2ea55e2298886f212f11a8894e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8efd1c820b9a782d8608d54d924658536178295c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8efd1c820b9a782d8608d54d924658536178295c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8efd1c820b9a782d8608d54d924658536178295c"
      },
      {
        "sha": "0c9b9b7d646333cb3212f1bea98e629c416cbe42",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c9b9b7d646333cb3212f1bea98e629c416cbe42",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0c9b9b7d646333cb3212f1bea98e629c416cbe42"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "cf265180ffae56b7de88410316ec736ed62a65f1",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa5fa642b0e7ce2ea55e2298886f212f11a8894e/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa5fa642b0e7ce2ea55e2298886f212f11a8894e/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=aa5fa642b0e7ce2ea55e2298886f212f11a8894e",
        "patch": "@@ -934,7 +934,7 @@ bool AppInitParameterInteraction()\n     int64_t nMempoolSizeMin = GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000 * 40;\n     if (nMempoolSizeMax < 0 || nMempoolSizeMax < nMempoolSizeMin)\n         return InitError(strprintf(_(\"-maxmempool must be at least %d MB\"), std::ceil(nMempoolSizeMin / 1000000.0)));\n-    // incremental relay fee sets the minimimum feerate increase necessary for BIP 125 replacement in the mempool\n+    // incremental relay fee sets the minimum feerate increase necessary for BIP 125 replacement in the mempool\n     // and the amount the mempool min fee increases above the feerate of txs evicted due to mempool limiting.\n     if (IsArgSet(\"-incrementalrelayfee\"))\n     {"
      },
      {
        "sha": "29bdb376821751612aae0da7b08d56844daf9917",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa5fa642b0e7ce2ea55e2298886f212f11a8894e/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa5fa642b0e7ce2ea55e2298886f212f11a8894e/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=aa5fa642b0e7ce2ea55e2298886f212f11a8894e",
        "patch": "@@ -24,7 +24,7 @@ class CRPCConvertParam\n };\n \n /**\n- * Specifiy a (method, idx, name) here if the argument is a non-string RPC\n+ * Specify a (method, idx, name) here if the argument is a non-string RPC\n  * argument and needs to be converted from JSON.\n  *\n  * @note Parameter indexes start from 0."
      },
      {
        "sha": "140cb4840b147e8e86696bf303151c4be8c60655",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa5fa642b0e7ce2ea55e2298886f212f11a8894e/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa5fa642b0e7ce2ea55e2298886f212f11a8894e/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=aa5fa642b0e7ce2ea55e2298886f212f11a8894e",
        "patch": "@@ -445,7 +445,7 @@ UniValue setmocktime(const JSONRPCRequest& request)\n     // this could have an effect on mempool time-based eviction, as well as\n     // IsCurrentForFeeEstimation() and IsInitialBlockDownload().\n     // TODO: figure out the right way to synchronize around mocktime, and\n-    // ensure all callsites of GetTime() are accessing this safely.\n+    // ensure all call sites of GetTime() are accessing this safely.\n     LOCK(cs_main);\n \n     RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM));"
      },
      {
        "sha": "cc3290c63157097887b5c3978e7644afd08555f4",
        "filename": "src/utiltime.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa5fa642b0e7ce2ea55e2298886f212f11a8894e/src/utiltime.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa5fa642b0e7ce2ea55e2298886f212f11a8894e/src/utiltime.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utiltime.h?ref=aa5fa642b0e7ce2ea55e2298886f212f11a8894e",
        "patch": "@@ -11,7 +11,7 @@\n \n /**\n  * GetTimeMicros() and GetTimeMillis() both return the system time, but in\n- * different units. GetTime() returns the sytem time in seconds, but also\n+ * different units. GetTime() returns the system time in seconds, but also\n  * supports mocktime, where the time can be specified by the user, eg for\n  * testing (eg with the setmocktime rpc, or -mocktime argument).\n  *"
      },
      {
        "sha": "00f29eb62e6b053d75a40e87a0c10092274fffac",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa5fa642b0e7ce2ea55e2298886f212f11a8894e/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa5fa642b0e7ce2ea55e2298886f212f11a8894e/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=aa5fa642b0e7ce2ea55e2298886f212f11a8894e",
        "patch": "@@ -1429,7 +1429,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n         // Helps prevent CPU exhaustion attacks.\n \n         // Skip script verification when connecting blocks under the\n-        // assumedvalid block. Assuming the assumedvalid block is valid this\n+        // assumevalid block. Assuming the assumevalid block is valid this\n         // is safe because block merkle hashes are still computed and checked,\n         // Of course, if an assumed valid block is invalid due to false scriptSigs\n         // this optimization would allow an invalid chain to be accepted.\n@@ -1771,7 +1771,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n                 pindexBestHeader->GetAncestor(pindex->nHeight) == pindex &&\n                 pindexBestHeader->nChainWork >= UintToArith256(chainparams.GetConsensus().nMinimumChainWork)) {\n                 // This block is a member of the assumed verified chain and an ancestor of the best header.\n-                // The equivalent time check discourages hashpower from extorting the network via DOS attack\n+                // The equivalent time check discourages hash power from extorting the network via DOS attack\n                 //  into accepting an invalid block through telling users they must manually set assumevalid.\n                 //  Requiring a software change or burying the invalid block, regardless of the setting, makes\n                 //  it hard to hide the implication of the demand.  This also avoids having release candidates\n@@ -2486,12 +2486,12 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n         bool fInitialDownload;\n         {\n             LOCK(cs_main);\n-            { // TODO: Tempoarily ensure that mempool removals are notified before\n+            { // TODO: Temporarily ensure that mempool removals are notified before\n               // connected transactions.  This shouldn't matter, but the abandoned\n               // state of transactions in our wallet is currently cleared when we\n               // receive another notification and there is a race condition where\n               // notification of a connected conflict might cause an outside process\n-              // to abandon a transaction and then have it inadvertantly cleared by\n+              // to abandon a transaction and then have it inadvertently cleared by\n               // the notification that the conflicted transaction was evicted.\n             MemPoolConflictRemovalTracker mrt(mempool);\n             CBlockIndex *pindexOldTip = chainActive.Tip();\n@@ -2520,7 +2520,7 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n \n             } // MemPoolConflictRemovalTracker destroyed and conflict evictions are notified\n \n-            // Transactions in the connnected block are notified\n+            // Transactions in the connected block are notified\n             for (const auto& pair : connectTrace.blocksConnected) {\n                 assert(pair.second);\n                 const CBlock& block = *(pair.second);"
      },
      {
        "sha": "a494eb6990fee9db508b77cc26b26a7504613982",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa5fa642b0e7ce2ea55e2298886f212f11a8894e/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa5fa642b0e7ce2ea55e2298886f212f11a8894e/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=aa5fa642b0e7ce2ea55e2298886f212f11a8894e",
        "patch": "@@ -50,7 +50,7 @@ class CValidationInterface {\n struct CMainSignals {\n     /** Notifies listeners of updated block chain tip */\n     boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    /** A posInBlock value for SyncTransaction calls for tranactions not\n+    /** A posInBlock value for SyncTransaction calls for transactions not\n      * included in connected blocks such as transactions removed from mempool,\n      * accepted to mempool or appearing in disconnected blocks.*/\n     static const int SYNC_TRANSACTION_NOT_IN_BLOCK = -1;"
      },
      {
        "sha": "01005bf3380c2c9bcb27474e975e5696ce70d8c9",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa5fa642b0e7ce2ea55e2298886f212f11a8894e/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa5fa642b0e7ce2ea55e2298886f212f11a8894e/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=aa5fa642b0e7ce2ea55e2298886f212f11a8894e",
        "patch": "@@ -2725,7 +2725,7 @@ UniValue bumpfee(const JSONRPCRequest& request)\n             \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n             \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n             \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n-            \"                         still be replacable in practice, for example if it has unconfirmed ancestors which\\n\"\n+            \"                         still be replaceable in practice, for example if it has unconfirmed ancestors which\\n\"\n             \"                         are replaceable).\\n\"\n             \"   }\\n\"\n             \"\\nResult:\\n\""
      },
      {
        "sha": "c5be732cccb7c781aa0302a9197f46c47a689241",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa5fa642b0e7ce2ea55e2298886f212f11a8894e/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa5fa642b0e7ce2ea55e2298886f212f11a8894e/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=aa5fa642b0e7ce2ea55e2298886f212f11a8894e",
        "patch": "@@ -1028,7 +1028,7 @@ bool CWallet::LoadToWallet(const CWalletTx& wtxIn)\n  * TODO: One exception to this is that the abandoned state is cleared under the\n  * assumption that any further notification of a transaction that was considered\n  * abandoned is an indication that it is not safe to be considered abandoned.\n- * Abandoned state should probably be more carefuly tracked via different\n+ * Abandoned state should probably be more carefully tracked via different\n  * posInBlock signals or by checking mempool presence when necessary.\n  */\n bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate)"
      }
    ]
  },
  {
    "sha": "7ff4a538a8682cdf02a4bcd6f15499c841001b73",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZmY0YTUzOGE4NjgyY2RmMDJhNGJjZDZmMTU0OTljODQxMDAxYjcz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-02-18T14:29:14Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-02-18T14:29:40Z"
      },
      "message": "Merge #9657: Improve rpc-tests.py\n\na6a3e58 Various review markups for rpc-tests.py improvements (John Newbery)\n3de3ccd Refactor rpc-tests.py (John Newbery)\nafd38e7 Improve rpc-tests.py arguments (John Newbery)\n91bffff Use argparse in rpc_tests.py (John Newbery)\n1581ecb Use configparser in rpc-tests.py (John Newbery)",
      "tree": {
        "sha": "b6fbdfda91ad52df1c32240392ca88c9ed8280ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b6fbdfda91ad52df1c32240392ca88c9ed8280ef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7ff4a538a8682cdf02a4bcd6f15499c841001b73",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCgAGBQJYqFpUAAoJEC1/I3LlD+E36HYH/iWnYz47quJjvP1/l/Bqiu7P\n1DibY4eduNXsHYc9+59PVkBoh/6tHmZlLzeG+2QgqzOAgR+HDq/sgGxZP0cqy0e7\nIedPly5GL0OG3/v+KWRq55+YKA5JDSNV4owOOdB2e+kuZsEWV8kcl+aJXLyly7tb\nC2NDJu6FUDxqymhYLVENMTk15TGKtMyqzNE7YtXmAL3jmmpGis0eXtYbUu9GSqkc\n6YpsrLUsHZHKqALD86jfNtxYHSgaVXxAYZFPYnqyXqpPbvqkz0FnqytnMTMPH5kK\naTQebP3zhqChCauC8im73vU7X5lk6Qlv1Oz1PRX60ipYergH+pDWAukQGNOeBoM=\n=/AXA\n-----END PGP SIGNATURE-----",
        "payload": "tree b6fbdfda91ad52df1c32240392ca88c9ed8280ef\nparent aa5fa642b0e7ce2ea55e2298886f212f11a8894e\nparent a6a3e58c483700bd5f2bc7d117a621e0c4af60e3\nauthor MarcoFalke <falke.marco@gmail.com> 1487428154 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1487428180 +0100\n\nMerge #9657: Improve rpc-tests.py\n\na6a3e58 Various review markups for rpc-tests.py improvements (John Newbery)\n3de3ccd Refactor rpc-tests.py (John Newbery)\nafd38e7 Improve rpc-tests.py arguments (John Newbery)\n91bffff Use argparse in rpc_tests.py (John Newbery)\n1581ecb Use configparser in rpc-tests.py (John Newbery)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ff4a538a8682cdf02a4bcd6f15499c841001b73",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7ff4a538a8682cdf02a4bcd6f15499c841001b73",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ff4a538a8682cdf02a4bcd6f15499c841001b73/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aa5fa642b0e7ce2ea55e2298886f212f11a8894e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa5fa642b0e7ce2ea55e2298886f212f11a8894e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aa5fa642b0e7ce2ea55e2298886f212f11a8894e"
      },
      {
        "sha": "a6a3e58c483700bd5f2bc7d117a621e0c4af60e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6a3e58c483700bd5f2bc7d117a621e0c4af60e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a6a3e58c483700bd5f2bc7d117a621e0c4af60e3"
      }
    ],
    "stats": {
      "total": 286,
      "additions": 152,
      "deletions": 134
    },
    "files": [
      {
        "sha": "1ee2dfb734ede01f76a6f192be0441a372bea756",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ff4a538a8682cdf02a4bcd6f15499c841001b73/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ff4a538a8682cdf02a4bcd6f15499c841001b73/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=7ff4a538a8682cdf02a4bcd6f15499c841001b73",
        "patch": "@@ -227,9 +227,6 @@ EXTRA_DIST = $(top_srcdir)/share/genbuild.sh qa/pull-tester/rpc-tests.py qa/rpc-\n \n CLEANFILES = $(OSX_DMG) $(BITCOIN_WIN_INSTALLER)\n \n-# This file is problematic for out-of-tree builds if it exists.\n-DISTCLEANFILES = qa/pull-tester/tests_config.pyc\n-\n .INTERMEDIATE: $(COVERAGE_INFO)\n \n DISTCHECK_CONFIGURE_FLAGS = --enable-man"
      },
      {
        "sha": "78129fb202923a9d9ddc10ea8cc211587f807449",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ff4a538a8682cdf02a4bcd6f15499c841001b73/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ff4a538a8682cdf02a4bcd6f15499c841001b73/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=7ff4a538a8682cdf02a4bcd6f15499c841001b73",
        "patch": "@@ -1087,7 +1087,7 @@ AC_SUBST(ZMQ_LIBS)\n AC_SUBST(PROTOBUF_LIBS)\n AC_SUBST(QR_LIBS)\n AC_CONFIG_FILES([Makefile src/Makefile doc/man/Makefile share/setup.nsi share/qt/Info.plist src/test/buildenv.py])\n-AC_CONFIG_FILES([qa/pull-tester/tests_config.py],[chmod +x qa/pull-tester/tests_config.py])\n+AC_CONFIG_FILES([qa/pull-tester/tests_config.ini],[chmod +x qa/pull-tester/tests_config.ini])\n AC_CONFIG_FILES([contrib/devtools/split-debug.sh],[chmod +x contrib/devtools/split-debug.sh])\n AC_CONFIG_LINKS([qa/pull-tester/rpc-tests.py:qa/pull-tester/rpc-tests.py])\n "
      },
      {
        "sha": "973165c4c8b6aea745da5271a7d352d574d839fb",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 133,
        "deletions": 116,
        "changes": 249,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ff4a538a8682cdf02a4bcd6f15499c841001b73/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ff4a538a8682cdf02a4bcd6f15499c841001b73/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=7ff4a538a8682cdf02a4bcd6f15499c841001b73",
        "patch": "@@ -2,25 +2,21 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n \"\"\"\n-Run Regression Test Suite\n+rpc-tests.py - run regression test suite\n \n This module calls down into individual test cases via subprocess. It will\n-forward all unrecognized arguments onto the individual test scripts, other\n-than:\n+forward all unrecognized arguments onto the individual test scripts.\n \n-    - `-extended`: run the \"extended\" test suite in addition to the basic one.\n-    - `-win`: signal that this is running in a Windows environment, and we\n-      should run the tests.\n-    - `--coverage`: this generates a basic coverage report for the RPC\n-      interface.\n+RPC tests are disabled on Windows by default. Use --force to run them anyway.\n \n For a description of arguments recognized by test scripts, see\n `qa/pull-tester/test_framework/test_framework.py:BitcoinTestFramework.main`.\n \n \"\"\"\n \n+import argparse\n+import configparser\n import os\n import time\n import shutil\n@@ -29,77 +25,9 @@\n import tempfile\n import re\n \n-sys.path.append(\"qa/pull-tester/\")\n-from tests_config import *\n-\n-BOLD = (\"\",\"\")\n-if os.name == 'posix':\n-    # primitive formatting on supported\n-    # terminal via ANSI escape sequences:\n-    BOLD = ('\\033[0m', '\\033[1m')\n-\n-RPC_TESTS_DIR = SRCDIR + '/qa/rpc-tests/'\n-\n-#If imported values are not defined then set to zero (or disabled)\n-if 'ENABLE_WALLET' not in vars():\n-    ENABLE_WALLET=0\n-if 'ENABLE_BITCOIND' not in vars():\n-    ENABLE_BITCOIND=0\n-if 'ENABLE_UTILS' not in vars():\n-    ENABLE_UTILS=0\n-if 'ENABLE_ZMQ' not in vars():\n-    ENABLE_ZMQ=0\n-\n-ENABLE_COVERAGE=0\n-\n-#Create a set to store arguments and create the passon string\n-opts = set()\n-passon_args = []\n-PASSON_REGEX = re.compile(\"^--\")\n-PARALLEL_REGEX = re.compile('^-parallel=')\n-\n-print_help = False\n-run_parallel = 4\n-\n-for arg in sys.argv[1:]:\n-    if arg == \"--help\" or arg == \"-h\" or arg == \"-?\":\n-        print_help = True\n-        break\n-    if arg == '--coverage':\n-        ENABLE_COVERAGE = 1\n-    elif PASSON_REGEX.match(arg):\n-        passon_args.append(arg)\n-    elif PARALLEL_REGEX.match(arg):\n-        run_parallel = int(arg.split(sep='=', maxsplit=1)[1])\n-    else:\n-        opts.add(arg)\n-\n-#Set env vars\n-if \"BITCOIND\" not in os.environ:\n-    os.environ[\"BITCOIND\"] = BUILDDIR + '/src/bitcoind' + EXEEXT\n-\n-if EXEEXT == \".exe\" and \"-win\" not in opts:\n-    # https://github.com/bitcoin/bitcoin/commit/d52802551752140cf41f0d9a225a43e84404d3e9\n-    # https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-136646964\n-    print(\"Win tests currently disabled by default.  Use -win option to enable\")\n-    sys.exit(0)\n-\n-if not (ENABLE_WALLET == 1 and ENABLE_UTILS == 1 and ENABLE_BITCOIND == 1):\n-    print(\"No rpc tests to run. Wallet, utils, and bitcoind must all be enabled\")\n-    sys.exit(0)\n-\n-# python3-zmq may not be installed. Handle this gracefully and with some helpful info\n-if ENABLE_ZMQ:\n-    try:\n-        import zmq\n-    except ImportError:\n-        print(\"ERROR: \\\"import zmq\\\" failed. Set ENABLE_ZMQ=0 or \"\n-              \"to run zmq tests, see dependency info in /qa/README.md.\")\n-        # ENABLE_ZMQ=0\n-        raise\n-\n-testScripts = [\n-    # longest test should go first, to favor running tests in parallel\n+BASE_SCRIPTS= [\n+    # Scripts that are run by the travis build process.\n+    # Longest test should go first, to favor running tests in parallel\n     'wallet-hd.py',\n     'walletbackup.py',\n     # vv Tests less than 5m vv\n@@ -156,10 +84,15 @@\n     'listsinceblock.py',\n     'p2p-leaktests.py',\n ]\n-if ENABLE_ZMQ:\n-    testScripts.append('zmq_test.py')\n \n-testScriptsExt = [\n+ZMQ_SCRIPTS = [\n+    # ZMQ test can only be run if bitcoin was built with zmq-enabled.\n+    # call rpc_tests.py with -nozmq to explicitly exclude these tests.\n+    \"zmq_test.py\"]\n+\n+EXTENDED_SCRIPTS = [\n+    # These tests are not run by the travis build process.\n+    # Longest test should go first, to favor running tests in parallel\n     'pruning.py',\n     # vv Tests less than 20m vv\n     'smartfees.py',\n@@ -189,44 +122,126 @@\n     'replace-by-fee.py',\n ]\n \n+ALL_SCRIPTS = BASE_SCRIPTS + ZMQ_SCRIPTS + EXTENDED_SCRIPTS\n+\n+def main():\n+    # Parse arguments and pass through unrecognised args\n+    parser = argparse.ArgumentParser(add_help=False,\n+                                     usage='%(prog)s [rpc-test.py options] [script options] [scripts]',\n+                                     description=__doc__,\n+                                     epilog='''\n+    Help text and arguments for individual test script:''',\n+                                     formatter_class=argparse.RawTextHelpFormatter)\n+    parser.add_argument('--coverage', action='store_true', help='generate a basic coverage report for the RPC interface')\n+    parser.add_argument('--extended', action='store_true', help='run the extended test suite in addition to the basic tests')\n+    parser.add_argument('--force', '-f', action='store_true', help='run tests even on platforms where they are disabled by default (e.g. windows).')\n+    parser.add_argument('--help', '-h', '-?', action='store_true', help='print help text and exit')\n+    parser.add_argument('--jobs', '-j', type=int, default=4, help='how many test scripts to run in parallel. Default=4.')\n+    parser.add_argument('--nozmq', action='store_true', help='do not run the zmq tests')\n+    args, unknown_args = parser.parse_known_args()\n+\n+    # Create a set to store arguments and create the passon string\n+    tests = set(arg for arg in unknown_args if arg[:2] != \"--\")\n+    passon_args = [arg for arg in unknown_args if arg[:2] == \"--\"]\n+\n+    # Read config generated by configure.\n+    config = configparser.ConfigParser()\n+    config.read_file(open(os.path.dirname(__file__) + \"/tests_config.ini\"))\n+\n+    enable_wallet = config[\"components\"].getboolean(\"ENABLE_WALLET\")\n+    enable_utils = config[\"components\"].getboolean(\"ENABLE_UTILS\")\n+    enable_bitcoind = config[\"components\"].getboolean(\"ENABLE_BITCOIND\")\n+    enable_zmq = config[\"components\"].getboolean(\"ENABLE_ZMQ\") and not args.nozmq\n+\n+    if config[\"environment\"][\"EXEEXT\"] == \".exe\" and not args.force:\n+        # https://github.com/bitcoin/bitcoin/commit/d52802551752140cf41f0d9a225a43e84404d3e9\n+        # https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-136646964\n+        print(\"Tests currently disabled on Windows by default. Use --force option to enable\")\n+        sys.exit(0)\n \n-def runtests():\n-    test_list = []\n-    if '-extended' in opts:\n-        test_list = testScripts + testScriptsExt\n-    elif len(opts) == 0 or (len(opts) == 1 and \"-win\" in opts):\n-        test_list = testScripts\n-    else:\n-        for t in testScripts + testScriptsExt:\n-            if t in opts or re.sub(\".py$\", \"\", t) in opts:\n-                test_list.append(t)\n+    if not (enable_wallet and enable_utils and enable_bitcoind):\n+        print(\"No rpc tests to run. Wallet, utils, and bitcoind must all be enabled\")\n+        print(\"Rerun `configure` with -enable-wallet, -with-utils and -with-daemon and rerun make\")\n+        sys.exit(0)\n+\n+    # python3-zmq may not be installed. Handle this gracefully and with some helpful info\n+    if enable_zmq:\n+        try:\n+            import zmq\n+        except ImportError:\n+            print(\"ERROR: \\\"import zmq\\\" failed. Use -nozmq to run without the ZMQ tests.\"\n+                  \"To run zmq tests, see dependency info in /qa/README.md.\")\n+            raise\n+\n+    # Build list of tests\n+    if tests:\n+        # Individual tests have been specified. Run specified tests that exist\n+        # in the ALL_SCRIPTS list. Accept the name with or without .py extension.\n+        test_list = [t for t in ALL_SCRIPTS if\n+                (t in tests or re.sub(\".py$\", \"\", t) in tests)]\n+        if not test_list:\n+            print(\"No valid test scripts specified. Check that your test is in one \"\n+                  \"of the test lists in rpc-tests.py or run rpc-tests.py with no arguments to run all tests\")\n+            print(\"Scripts not found:\")\n+            print(tests)\n+            sys.exit(0)\n \n-    if print_help:\n-        # Only print help of the first script and exit\n-        subprocess.check_call((RPC_TESTS_DIR + test_list[0]).split() + ['-h'])\n+    else:\n+        # No individual tests have been specified. Run base tests, and\n+        # optionally ZMQ tests and extended tests.\n+        test_list = BASE_SCRIPTS\n+        if enable_zmq:\n+            test_list += ZMQ_SCRIPTS\n+        if args.extended:\n+            test_list += EXTENDED_SCRIPTS\n+            # TODO: BASE_SCRIPTS and EXTENDED_SCRIPTS are sorted by runtime\n+            # (for parallel running efficiency). This combined list will is no\n+            # longer sorted.\n+\n+    if args.help:\n+        # Print help for rpc-tests.py, then print help of the first script and exit.\n+        parser.print_help()\n+        subprocess.check_call((config[\"environment\"][\"SRCDIR\"] + '/qa/rpc-tests/' + test_list[0]).split() + ['-h'])\n         sys.exit(0)\n \n-    coverage = None\n+    run_tests(test_list, config[\"environment\"][\"SRCDIR\"], config[\"environment\"][\"BUILDDIR\"], config[\"environment\"][\"EXEEXT\"], args.jobs, args.coverage, passon_args)\n+\n+def run_tests(test_list, src_dir, build_dir, exeext, jobs=1, enable_coverage=False, args=[]):\n+    BOLD = (\"\",\"\")\n+    if os.name == 'posix':\n+        # primitive formatting on supported\n+        # terminal via ANSI escape sequences:\n+        BOLD = ('\\033[0m', '\\033[1m')\n+\n+    #Set env vars\n+    if \"BITCOIND\" not in os.environ:\n+        os.environ[\"BITCOIND\"] = build_dir + '/src/bitcoind' + exeext\n+\n+    tests_dir = src_dir + '/qa/rpc-tests/'\n \n-    if ENABLE_COVERAGE:\n+    flags = [\"--srcdir=\" + src_dir] + args\n+    flags.append(\"--cachedir=%s/qa/cache\" % build_dir)\n+\n+    if enable_coverage:\n         coverage = RPCCoverage()\n-        print(\"Initializing coverage directory at %s\\n\" % coverage.dir)\n-    flags = [\"--srcdir=%s/src\" % BUILDDIR] + passon_args\n-    flags.append(\"--cachedir=%s/qa/cache\" % BUILDDIR)\n-    if coverage:\n         flags.append(coverage.flag)\n+        print(\"Initializing coverage directory at %s\\n\" % coverage.dir)\n+    else:\n+        coverage = None\n \n-    if len(test_list) > 1 and run_parallel > 1:\n+    if len(test_list) > 1 and jobs > 1:\n         # Populate cache\n-        subprocess.check_output([RPC_TESTS_DIR + 'create_cache.py'] + flags)\n+        subprocess.check_output([tests_dir + 'create_cache.py'] + flags)\n \n     #Run Tests\n-    max_len_name = len(max(test_list, key=len))\n+    all_passed = True\n     time_sum = 0\n     time0 = time.time()\n-    job_queue = RPCTestHandler(run_parallel, test_list, flags)\n+\n+    job_queue = RPCTestHandler(jobs, tests_dir, test_list, flags)\n+\n+    max_len_name = len(max(test_list, key=len))\n     results = BOLD[1] + \"%s | %s | %s\\n\\n\" % (\"TEST\".ljust(max_len_name), \"PASSED\", \"DURATION\") + BOLD[0]\n-    all_passed = True\n     for _ in range(len(test_list)):\n         (name, stdout, stderr, passed, duration) = job_queue.get_next()\n         all_passed = all_passed and passed\n@@ -235,8 +250,10 @@ def runtests():\n         print('\\n' + BOLD[1] + name + BOLD[0] + \":\")\n         print('' if passed else stdout + '\\n', end='')\n         print('' if stderr == '' else 'stderr:\\n' + stderr + '\\n', end='')\n-        results += \"%s | %s | %s s\\n\" % (name.ljust(max_len_name), str(passed).ljust(6), duration)\n         print(\"Pass: %s%s%s, Duration: %s s\\n\" % (BOLD[1], passed, BOLD[0], duration))\n+\n+        results += \"%s | %s | %s s\\n\" % (name.ljust(max_len_name), str(passed).ljust(6), duration)\n+\n     results += BOLD[1] + \"\\n%s | %s | %s s (accumulated)\" % (\"ALL\".ljust(max_len_name), str(all_passed).ljust(6), time_sum) + BOLD[0]\n     print(results)\n     print(\"\\nRuntime: %s s\" % (int(time.time() - time0)))\n@@ -249,15 +266,15 @@ def runtests():\n \n     sys.exit(not all_passed)\n \n-\n class RPCTestHandler:\n     \"\"\"\n     Trigger the testscrips passed in via the list.\n     \"\"\"\n \n-    def __init__(self, num_tests_parallel, test_list=None, flags=None):\n+    def __init__(self, num_tests_parallel, tests_dir, test_list=None, flags=None):\n         assert(num_tests_parallel >= 1)\n         self.num_jobs = num_tests_parallel\n+        self.tests_dir = tests_dir\n         self.test_list = test_list\n         self.flags = flags\n         self.num_running = 0\n@@ -277,7 +294,7 @@ def get_next(self):\n             log_stderr = tempfile.SpooledTemporaryFile(max_size=2**16)\n             self.jobs.append((t,\n                               time.time(),\n-                              subprocess.Popen((RPC_TESTS_DIR + t).split() + self.flags + port_seed,\n+                              subprocess.Popen((self.tests_dir + t).split() + self.flags + port_seed,\n                                                universal_newlines=True,\n                                                stdout=log_stdout,\n                                                stderr=log_stderr),\n@@ -342,10 +359,10 @@ def _get_uncovered_rpc_commands(self):\n \n         \"\"\"\n         # This is shared from `qa/rpc-tests/test-framework/coverage.py`\n-        REFERENCE_FILENAME = 'rpc_interface.txt'\n-        COVERAGE_FILE_PREFIX = 'coverage.'\n+        reference_filename = 'rpc_interface.txt'\n+        coverage_file_prefix = 'coverage.'\n \n-        coverage_ref_filename = os.path.join(self.dir, REFERENCE_FILENAME)\n+        coverage_ref_filename = os.path.join(self.dir, reference_filename)\n         coverage_filenames = set()\n         all_cmds = set()\n         covered_cmds = set()\n@@ -358,7 +375,7 @@ def _get_uncovered_rpc_commands(self):\n \n         for root, dirs, files in os.walk(self.dir):\n             for filename in files:\n-                if filename.startswith(COVERAGE_FILE_PREFIX):\n+                if filename.startswith(coverage_file_prefix):\n                     coverage_filenames.add(os.path.join(root, filename))\n \n         for filename in coverage_filenames:\n@@ -369,4 +386,4 @@ def _get_uncovered_rpc_commands(self):\n \n \n if __name__ == '__main__':\n-    runtests()\n+    main()"
      },
      {
        "sha": "e3e457d0b1d120c13036c5cbfb84004b7168a361",
        "filename": "qa/pull-tester/tests_config.ini.in",
        "status": "added",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ff4a538a8682cdf02a4bcd6f15499c841001b73/qa/pull-tester/tests_config.ini.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ff4a538a8682cdf02a4bcd6f15499c841001b73/qa/pull-tester/tests_config.ini.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/tests_config.ini.in?ref=7ff4a538a8682cdf02a4bcd6f15499c841001b73",
        "patch": "@@ -0,0 +1,18 @@\n+# Copyright (c) 2013-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# These environment variables are set by the build process and read by\n+# rpc-tests.py\n+\n+[environment]\n+SRCDIR=@abs_top_srcdir@\n+BUILDDIR=@abs_top_builddir@\n+EXEEXT=@EXEEXT@\n+\n+[components]\n+# Which components are enabled. These are commented out by `configure` if they were disabled when running config.\n+@ENABLE_WALLET_TRUE@ENABLE_WALLET=true\n+@BUILD_BITCOIN_UTILS_TRUE@ENABLE_UTILS=true\n+@BUILD_BITCOIND_TRUE@ENABLE_BITCOIND=true\n+@ENABLE_ZMQ_TRUE@ENABLE_ZMQ=true"
      },
      {
        "sha": "a0d0a3d98a86becd64c699fa8bb67bb2ae79629c",
        "filename": "qa/pull-tester/tests_config.py.in",
        "status": "removed",
        "additions": 0,
        "deletions": 14,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa5fa642b0e7ce2ea55e2298886f212f11a8894e/qa/pull-tester/tests_config.py.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa5fa642b0e7ce2ea55e2298886f212f11a8894e/qa/pull-tester/tests_config.py.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/tests_config.py.in?ref=aa5fa642b0e7ce2ea55e2298886f212f11a8894e",
        "patch": "@@ -1,14 +0,0 @@\n-#!/usr/bin/env python3\n-# Copyright (c) 2013-2016 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-SRCDIR=\"@abs_top_srcdir@\"\n-BUILDDIR=\"@abs_top_builddir@\"\n-EXEEXT=\"@EXEEXT@\"\n-\n-# These will turn into comments if they were disabled when configuring.\n-@ENABLE_WALLET_TRUE@ENABLE_WALLET=1\n-@BUILD_BITCOIN_UTILS_TRUE@ENABLE_UTILS=1\n-@BUILD_BITCOIND_TRUE@ENABLE_BITCOIND=1\n-@ENABLE_ZMQ_TRUE@ENABLE_ZMQ=1"
      }
    ]
  },
  {
    "sha": "1f9e904f455679d1a297204a2ce44465e32751e2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZjllOTA0ZjQ1NTY3OWQxYTI5NzIwNGEyY2U0NDQ2NWUzMjc1MWUy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-19T12:23:50Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-19T12:28:30Z"
      },
      "message": "Merge #9791: Avoid VLA in hash.h\n\n5c8fd50 Avoid VLA in hash.h (Pieter Wuille)",
      "tree": {
        "sha": "0d9da649e7f02856b544d1cf9e8efb5f97fb58e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d9da649e7f02856b544d1cf9e8efb5f97fb58e5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1f9e904f455679d1a297204a2ce44465e32751e2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYqY9uAAoJEHSBCwEjRsmm6kQIAMvRiv16lv2WzVKGVmoSZ4d8\nd3HTra74rl0j+5id9LT/ETSnLwAx9IcXMnchrf7xUYFl1MosseJBTp5F0LQl1UUF\n7GTa1ylvFDvNqcFWZJXUCjoFa4BdTe8HlXjKLgNLvUtigACNba3OnlV+ZbK+Ke6k\nM8njJ94ov76hhPapDjk4Wn20ZwG9TSqeAl/I+0xmPTZ536ih4eeMbpQfbbWMq8EH\nilBdIcsMZ5JM5IbcwLvoOQgkBqTA8UtNKGx+c80sM//0qvHrp4ofyWijhO8bZitv\npkn/DASi+Gv3odxQJt6byW/7BuHFcLlF5+BYg4XD4HjaVFGEstLVFbZL3oCP4Io=\n=986G\n-----END PGP SIGNATURE-----",
        "payload": "tree 0d9da649e7f02856b544d1cf9e8efb5f97fb58e5\nparent 7ff4a538a8682cdf02a4bcd6f15499c841001b73\nparent 5c8fd508112016c3821b71112270afe83e6949ac\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487507030 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487507310 +0100\n\nMerge #9791: Avoid VLA in hash.h\n\n5c8fd50 Avoid VLA in hash.h (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f9e904f455679d1a297204a2ce44465e32751e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1f9e904f455679d1a297204a2ce44465e32751e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f9e904f455679d1a297204a2ce44465e32751e2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7ff4a538a8682cdf02a4bcd6f15499c841001b73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ff4a538a8682cdf02a4bcd6f15499c841001b73",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7ff4a538a8682cdf02a4bcd6f15499c841001b73"
      },
      {
        "sha": "5c8fd508112016c3821b71112270afe83e6949ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c8fd508112016c3821b71112270afe83e6949ac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5c8fd508112016c3821b71112270afe83e6949ac"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "eacb8f04fef378ab80a1b1df15689525e5d45895",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f9e904f455679d1a297204a2ce44465e32751e2/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f9e904f455679d1a297204a2ce44465e32751e2/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=1f9e904f455679d1a297204a2ce44465e32751e2",
        "patch": "@@ -25,9 +25,9 @@ class CHash256 {\n     static const size_t OUTPUT_SIZE = CSHA256::OUTPUT_SIZE;\n \n     void Finalize(unsigned char hash[OUTPUT_SIZE]) {\n-        unsigned char buf[sha.OUTPUT_SIZE];\n+        unsigned char buf[CSHA256::OUTPUT_SIZE];\n         sha.Finalize(buf);\n-        sha.Reset().Write(buf, sha.OUTPUT_SIZE).Finalize(hash);\n+        sha.Reset().Write(buf, CSHA256::OUTPUT_SIZE).Finalize(hash);\n     }\n \n     CHash256& Write(const unsigned char *data, size_t len) {\n@@ -49,9 +49,9 @@ class CHash160 {\n     static const size_t OUTPUT_SIZE = CRIPEMD160::OUTPUT_SIZE;\n \n     void Finalize(unsigned char hash[OUTPUT_SIZE]) {\n-        unsigned char buf[sha.OUTPUT_SIZE];\n+        unsigned char buf[CSHA256::OUTPUT_SIZE];\n         sha.Finalize(buf);\n-        CRIPEMD160().Write(buf, sha.OUTPUT_SIZE).Finalize(hash);\n+        CRIPEMD160().Write(buf, CSHA256::OUTPUT_SIZE).Finalize(hash);\n     }\n \n     CHash160& Write(const unsigned char *data, size_t len) {"
      }
    ]
  },
  {
    "sha": "390a39bb5cf4eca849a75802f92a361a9bcac310",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOTBhMzliYjVjZjRlY2E4NDlhNzU4MDJmOTJhMzYxYTliY2FjMzEw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-19T15:02:30Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-19T15:03:35Z"
      },
      "message": "Merge #9795: doc: Update manpages for master (laanwj)\n\neb49101 doc: Update manpages for master (Wladimir J. van der Laan)",
      "tree": {
        "sha": "b0d1ae658f2773cf406bf50786becb31bdb85b18",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b0d1ae658f2773cf406bf50786becb31bdb85b18"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/390a39bb5cf4eca849a75802f92a361a9bcac310",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYqbPHAAoJEHSBCwEjRsmmYa4H/3StS3W/xdNJdCAp6vvgrBoU\nqIssTPYiJ6SbNMlDo2ELTEV+rttdX51umcw6K7KHQAkX6ebhIh+yx5kzXnM/71FG\ne+h+fiyCM4C/p5eq7Hy5SpMTQZ3MxrK9+IbqllaDuG8JFfKKIA8LX7E+tbLoqINm\n8iNHNVW+DZ7yIB3/06fuY8rqh7DXSGxRzqS5WPGK9wN6XfoDwue9lzn2XzYwGOVP\n6O+JgZJzL1ceTNBUZMQXCaHMh24F8RWhTCAQLUPIxfhZaMLVYQpwlr5KamKKop/h\nW1Jwm0W/rdQfAJwD/G+poeHhWQN7VqtAFKjtYxtaLFpXMKq2Tc/D61Y1jLOnKpU=\n=rf0f\n-----END PGP SIGNATURE-----",
        "payload": "tree b0d1ae658f2773cf406bf50786becb31bdb85b18\nparent 1f9e904f455679d1a297204a2ce44465e32751e2\nparent eb4910193accabdb2edf6a361d52050c851de96e\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487516550 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487516615 +0100\n\nMerge #9795: doc: Update manpages for master (laanwj)\n\neb49101 doc: Update manpages for master (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/390a39bb5cf4eca849a75802f92a361a9bcac310",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/390a39bb5cf4eca849a75802f92a361a9bcac310",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/390a39bb5cf4eca849a75802f92a361a9bcac310/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1f9e904f455679d1a297204a2ce44465e32751e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f9e904f455679d1a297204a2ce44465e32751e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1f9e904f455679d1a297204a2ce44465e32751e2"
      },
      {
        "sha": "eb4910193accabdb2edf6a361d52050c851de96e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb4910193accabdb2edf6a361d52050c851de96e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb4910193accabdb2edf6a361d52050c851de96e"
      }
    ],
    "stats": {
      "total": 279,
      "additions": 179,
      "deletions": 100
    },
    "files": [
      {
        "sha": "0493241b1e07e90db2ac06eacaaa12ff3a6cd1e9",
        "filename": "doc/man/bitcoin-cli.1",
        "status": "modified",
        "additions": 16,
        "deletions": 14,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/390a39bb5cf4eca849a75802f92a361a9bcac310/doc/man/bitcoin-cli.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/390a39bb5cf4eca849a75802f92a361a9bcac310/doc/man/bitcoin-cli.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-cli.1?ref=390a39bb5cf4eca849a75802f92a361a9bcac310",
        "patch": "@@ -1,19 +1,17 @@\n-.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.46.5.\n-.TH BITCOIN-CLI \"1\" \"September 2016\" \"bitcoin-cli v0.13.0.0\" \"User Commands\"\n+.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.4.\n+.TH BITCOIN-CLI \"1\" \"February 2017\" \"bitcoin-cli v0.14.99.0\" \"User Commands\"\n .SH NAME\n-bitcoin-cli \\- manual page for bitcoin-cli v0.13.0.0\n+bitcoin-cli \\- manual page for bitcoin-cli v0.14.99.0\n .SH DESCRIPTION\n-Bitcoin Core RPC client version v0.13.0.0\n+Bitcoin Core RPC client version v0.14.99.0\n .SS \"Usage:\"\n .TP\n bitcoin\\-cli [options] <command> [params]\n Send command to Bitcoin Core\n-.TP\n-bitcoin\\-cli [options] help\n-List commands\n-.TP\n-bitcoin\\-cli [options] help <command>\n-Get help for a command\n+.IP\n+bitcoin\\-cli [options] \\fB\\-named\\fR <command> [name=value] ... Send command to Bitcoin Core (with named arguments)\n+bitcoin\\-cli [options] help                List commands\n+bitcoin\\-cli [options] help <command>      Get help for a command\n .SH OPTIONS\n .HP\n \\-?\n@@ -40,6 +38,10 @@ Enter regression test mode, which uses a special chain in which blocks\n can be solved instantly. This is intended for regression testing\n tools and app development.\n .HP\n+\\fB\\-named\\fR\n+.IP\n+Pass named instead of positional arguments (default: false)\n+.HP\n \\fB\\-rpcconnect=\\fR<ip>\n .IP\n Send commands to node running on <ip> (default: 127.0.0.1)\n@@ -69,16 +71,16 @@ Timeout during HTTP requests (default: 900)\n Read extra arguments from standard input, one per line until EOF/Ctrl\\-D\n (recommended for sensitive information such as passphrases)\n .SH COPYRIGHT\n-Copyright (C) 2009-2016 The Bitcoin Core developers\n+Copyright (C) 2009-2017 The Bitcoin Core developers\n \n Please contribute if you find Bitcoin Core useful. Visit\n <https://bitcoincore.org> for further information about the software.\n The source code is available from <https://github.com/bitcoin/bitcoin>.\n \n This is experimental software.\n Distributed under the MIT software license, see the accompanying file COPYING\n-or <http://www.opensource.org/licenses/mit-license.php>.\n+or <https://opensource.org/licenses/MIT>\n \n This product includes software developed by the OpenSSL Project for use in the\n-OpenSSL Toolkit <https://www.openssl.org/> and cryptographic software written\n-by Eric Young and UPnP software written by Thomas Bernard.\n+OpenSSL Toolkit <https://www.openssl.org> and cryptographic software written by\n+Eric Young and UPnP software written by Thomas Bernard."
      },
      {
        "sha": "ce252612e57a2ae402921f7ed50cf7199679aa1e",
        "filename": "doc/man/bitcoin-qt.1",
        "status": "modified",
        "additions": 69,
        "deletions": 38,
        "changes": 107,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/390a39bb5cf4eca849a75802f92a361a9bcac310/doc/man/bitcoin-qt.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/390a39bb5cf4eca849a75802f92a361a9bcac310/doc/man/bitcoin-qt.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-qt.1?ref=390a39bb5cf4eca849a75802f92a361a9bcac310",
        "patch": "@@ -1,9 +1,9 @@\n-.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.46.5.\n-.TH BITCOIN-QT \"1\" \"September 2016\" \"bitcoin-qt v0.13.0.0\" \"User Commands\"\n+.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.4.\n+.TH BITCOIN-QT \"1\" \"February 2017\" \"bitcoin-qt v0.14.99.0\" \"User Commands\"\n .SH NAME\n-bitcoin-qt \\- manual page for bitcoin-qt v0.13.0.0\n+bitcoin-qt \\- manual page for bitcoin-qt v0.14.99.0\n .SH DESCRIPTION\n-Bitcoin Core version v0.13.0.0 (64\\-bit)\n+Bitcoin Core version v0.14.99.0 (64\\-bit)\n Usage:\n .IP\n bitcoin\\-qt [command\\-line options]\n@@ -27,13 +27,14 @@ long fork (%s in cmd is replaced by message)\n Execute command when the best block changes (%s in cmd is replaced by\n block hash)\n .HP\n-\\fB\\-checkblocks=\\fR<n>\n+\\fB\\-assumevalid=\\fR<hex>\n .IP\n-How many blocks to check at startup (default: 288, 0 = all)\n-.HP\n-\\fB\\-checklevel=\\fR<n>\n-.IP\n-How thorough the block verification of \\fB\\-checkblocks\\fR is (0\\-4, default: 3)\n+If this block is in the chain assume that it and its ancestors are valid\n+and potentially skip their script verification (0 to verify all,\n+default:\n+00000000000000000013176bf8d7dfeab4e1db31dc93bc311b436e82ab226b90,\n+testnet:\n+00000000000128796ee387cf110ccb9d2f36cffaf7f73079c995377c65ac0dcc)\n .HP\n \\fB\\-conf=\\fR<file>\n .IP\n@@ -62,11 +63,16 @@ Keep the transaction memory pool below <n> megabytes (default: 300)\n \\fB\\-mempoolexpiry=\\fR<n>\n .IP\n Do not keep transactions in the mempool longer than <n> hours (default:\n-72)\n+336)\n+.HP\n+\\fB\\-blockreconstructionextratxn=\\fR<n>\n+.IP\n+Extra transactions to keep in memory for compact block reconstructions\n+(default: 100)\n .HP\n \\fB\\-par=\\fR<n>\n .IP\n-Set the number of script verification threads (\\fB\\-4\\fR to 16, 0 = auto, <0 =\n+Set the number of script verification threads (\\fB\\-2\\fR to 16, 0 = auto, <0 =\n leave that many cores free, default: 0)\n .HP\n \\fB\\-pid=\\fR<file>\n@@ -75,13 +81,15 @@ Specify pid file (default: bitcoind.pid)\n .HP\n \\fB\\-prune=\\fR<n>\n .IP\n-Reduce storage requirements by enabling pruning (deleting) of old blocks.\n-This allows the pruneblockchain RPC to be called to delete specific blocks,\n-and enables automatic pruning of old blocks if a target size in MiB is\n-provided. This mode is incompatible with \\fB\\-txindex\\fR and \\fB\\-rescan\\fR.\n-Warning: Reverting this setting requires re\\-downloading the entire blockchain.\n-(default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, >550 =\n-automatically prune block files to stay under the specified target size in MiB)\n+Reduce storage requirements by enabling pruning (deleting) of old\n+blocks. This allows the pruneblockchain RPC to be called to\n+delete specific blocks, and enables automatic pruning of old\n+blocks if a target size in MiB is provided. This mode is\n+incompatible with \\fB\\-txindex\\fR and \\fB\\-rescan\\fR. Warning: Reverting this\n+setting requires re\\-downloading the entire blockchain. (default:\n+0 = disable pruning blocks, 1 = allow manual pruning via RPC,\n+>550 = automatically prune block files to stay under the\n+specified target size in MiB)\n .HP\n \\fB\\-reindex\\-chainstate\\fR\n .IP\n@@ -123,7 +131,8 @@ for IPv6\n .HP\n \\fB\\-connect=\\fR<ip>\n .IP\n-Connect only to the specified node(s)\n+Connect only to the specified node(s); \\fB\\-noconnect\\fR or \\fB\\-connect\\fR=\\fI\\,0\\/\\fR alone to\n+disable automatic connections\n .HP\n \\fB\\-discover\\fR\n .IP\n@@ -137,7 +146,7 @@ Allow DNS lookups for \\fB\\-addnode\\fR, \\fB\\-seednode\\fR and \\fB\\-connect\\fR (def\n \\fB\\-dnsseed\\fR\n .IP\n Query for peer addresses via DNS lookup, if low on addresses (default: 1\n-unless \\fB\\-connect\\fR)\n+unless \\fB\\-connect\\fR/\\-noconnect)\n .HP\n \\fB\\-externalip=\\fR<ip>\n .IP\n@@ -149,7 +158,8 @@ Always query for peer addresses via DNS lookup (default: 0)\n .HP\n \\fB\\-listen\\fR\n .IP\n-Accept connections from outside (default: 1 if no \\fB\\-proxy\\fR or \\fB\\-connect\\fR)\n+Accept connections from outside (default: 1 if no \\fB\\-proxy\\fR or\n+\\fB\\-connect\\fR/\\-noconnect)\n .HP\n \\fB\\-listenonion\\fR\n .IP\n@@ -204,6 +214,11 @@ Connect through SOCKS5 proxy\n Randomize credentials for every proxy connection. This enables Tor\n stream isolation (default: 1)\n .HP\n+\\fB\\-rpcserialversion\\fR\n+.IP\n+Sets the serialization of raw transaction or block hex returned in\n+non\\-verbose mode, non\\-segwit(0) or segwit(1) (default: 1)\n+.HP\n \\fB\\-seednode=\\fR<ip>\n .IP\n Connect to a node to retrieve peer addresses, and disconnect\n@@ -221,17 +236,22 @@ Tor control port to use if onion listening enabled (default:\n .IP\n Tor control port password (default: empty)\n .HP\n+\\fB\\-upnp\\fR\n+.IP\n+Use UPnP to map the listening port (default: 0)\n+.HP\n \\fB\\-whitebind=\\fR<addr>\n .IP\n Bind to given address and whitelist peers connecting to it. Use\n [host]:port notation for IPv6\n .HP\n-\\fB\\-whitelist=\\fR<netmask>\n+\\fB\\-whitelist=\\fR<IP address or network>\n .IP\n-Whitelist peers connecting from the given netmask or IP address. Can be\n-specified multiple times. Whitelisted peers cannot be DoS banned\n-and their transactions are always relayed, even if they are\n-already in the mempool, useful e.g. for a gateway\n+Whitelist peers connecting from the given IP address (e.g. 1.2.3.4) or\n+CIDR notated network (e.g. 1.2.3.0/24). Can be specified multiple\n+times. Whitelisted peers cannot be DoS banned and their\n+transactions are always relayed, even if they are already in the\n+mempool, useful e.g. for a gateway\n .HP\n \\fB\\-whitelistrelay\\fR\n .IP\n@@ -240,7 +260,7 @@ not relaying transactions (default: 1)\n .HP\n \\fB\\-whitelistforcerelay\\fR\n .IP\n-Force relay of transactions from whitelisted peers even they violate\n+Force relay of transactions from whitelisted peers even if they violate\n local relay policy (default: 1)\n .HP\n \\fB\\-maxuploadtarget=\\fR<n>\n@@ -287,13 +307,17 @@ Spend unconfirmed change when sending transactions (default: 1)\n \\fB\\-txconfirmtarget=\\fR<n>\n .IP\n If paytxfee is not set, include enough fee so transactions begin\n-confirmation on average within n blocks (default: 2)\n+confirmation on average within n blocks (default: 6)\n .HP\n \\fB\\-usehd\\fR\n .IP\n Use hierarchical deterministic key generation (HD) after BIP32. Only has\n effect during wallet creation/first start (default: 1)\n .HP\n+\\fB\\-walletrbf\\fR\n+.IP\n+Send transactions with full\\-RBF opt\\-in enabled (default: 0)\n+.HP\n \\fB\\-upgradewallet\\fR\n .IP\n Upgrade wallet to latest format on startup\n@@ -347,9 +371,9 @@ Append comment to the user agent string\n Output debugging information (default: 0, supplying <category> is\n optional). If <category> is not supplied or if <category> = 1,\n output all debugging information.<category> can be: addrman,\n-alert, bench, coindb, db, http, libevent, lock, mempool,\n-mempoolrej, net, proxy, prune, rand, reindex, rpc, selectcoins,\n-tor, zmq, qt.\n+alert, bench, cmpctblock, coindb, db, http, libevent, lock,\n+mempool, mempoolrej, net, proxy, prune, rand, reindex, rpc,\n+selectcoins, tor, zmq, qt.\n .HP\n \\fB\\-help\\-debug\\fR\n .IP\n@@ -422,6 +446,11 @@ Set maximum block size in bytes (default: 750000)\n .IP\n Set maximum size of high\\-priority/low\\-fee transactions in bytes\n (default: 0)\n+.HP\n+\\fB\\-blockmintxfee=\\fR<amt>\n+.IP\n+Set lowest fee rate (in BTC/kB) for transactions to be included in block\n+creation. (default: 0.00001)\n .PP\n RPC server options:\n .HP\n@@ -455,8 +484,10 @@ Password for JSON\\-RPC connections\n .IP\n Username and hashed password for JSON\\-RPC connections. The field\n <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A\n-canonical python script is included in share/rpcuser. This option\n-can be specified multiple times\n+canonical python script is included in share/rpcuser. The client\n+then connects normally using the\n+rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This\n+option can be specified multiple times\n .HP\n \\fB\\-rpcport=\\fR<port>\n .IP\n@@ -500,16 +531,16 @@ Show splash screen on startup (default: 1)\n .IP\n Reset all settings changed in the GUI\n .SH COPYRIGHT\n-Copyright (C) 2009-2016 The Bitcoin Core developers\n+Copyright (C) 2009-2017 The Bitcoin Core developers\n \n Please contribute if you find Bitcoin Core useful. Visit\n <https://bitcoincore.org> for further information about the software.\n The source code is available from <https://github.com/bitcoin/bitcoin>.\n \n This is experimental software.\n Distributed under the MIT software license, see the accompanying file COPYING\n-or <http://www.opensource.org/licenses/mit-license.php>.\n+or <https://opensource.org/licenses/MIT>\n \n This product includes software developed by the OpenSSL Project for use in the\n-OpenSSL Toolkit <https://www.openssl.org/> and cryptographic software written\n-by Eric Young and UPnP software written by Thomas Bernard.\n+OpenSSL Toolkit <https://www.openssl.org> and cryptographic software written by\n+Eric Young and UPnP software written by Thomas Bernard."
      },
      {
        "sha": "98adf2f5b1e5d7445326a0782ddd081a3e079b99",
        "filename": "doc/man/bitcoin-tx.1",
        "status": "modified",
        "additions": 25,
        "deletions": 10,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/390a39bb5cf4eca849a75802f92a361a9bcac310/doc/man/bitcoin-tx.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/390a39bb5cf4eca849a75802f92a361a9bcac310/doc/man/bitcoin-tx.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-tx.1?ref=390a39bb5cf4eca849a75802f92a361a9bcac310",
        "patch": "@@ -1,9 +1,9 @@\n-.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.46.5.\n-.TH BITCOIN-TX \"1\" \"September 2016\" \"bitcoin-tx v0.13.0.0\" \"User Commands\"\n+.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.4.\n+.TH BITCOIN-TX \"1\" \"February 2017\" \"bitcoin-tx v0.14.99.0\" \"User Commands\"\n .SH NAME\n-bitcoin-tx \\- manual page for bitcoin-tx v0.13.0.0\n+bitcoin-tx \\- manual page for bitcoin-tx v0.14.99.0\n .SH DESCRIPTION\n-Bitcoin Core bitcoin\\-tx utility version v0.13.0.0\n+Bitcoin Core bitcoin\\-tx utility version v0.14.99.0\n .SS \"Usage:\"\n .TP\n bitcoin\\-tx [options] <hex\\-tx> [commands]\n@@ -67,13 +67,28 @@ outaddr=VALUE:ADDRESS\n .IP\n Add address\\-based output to TX\n .IP\n+outpubkey=VALUE:PUBKEY[:FLAGS]\n+.IP\n+Add pay\\-to\\-pubkey output to TX. Optionally add the \"W\" flag to produce a\n+pay\\-to\\-witness\\-pubkey\\-hash output. Optionally add the \"S\" flag to\n+wrap the output in a pay\\-to\\-script\\-hash.\n+.IP\n outdata=[VALUE:]DATA\n .IP\n Add data\\-based output to TX\n .IP\n-outscript=VALUE:SCRIPT\n+outscript=VALUE:SCRIPT[:FLAGS]\n+.IP\n+Add raw script output to TX. Optionally add the \"W\" flag to produce a\n+pay\\-to\\-witness\\-script\\-hash output. Optionally add the \"S\" flag to\n+wrap the output in a pay\\-to\\-script\\-hash.\n+.IP\n+outmultisig=VALUE:REQUIRED:PUBKEYS:PUBKEY1:PUBKEY2:....[:FLAGS]\n .IP\n-Add raw script output to TX\n+Add Pay To n\\-of\\-m Multi\\-sig output to TX. n = REQUIRED, m = PUBKEYS.\n+Optionally add the \"W\" flag to produce a\n+pay\\-to\\-witness\\-script\\-hash output. Optionally add the \"S\" flag to\n+wrap the output in a pay\\-to\\-script\\-hash.\n .IP\n sign=SIGHASH\\-FLAGS\n .IP\n@@ -92,16 +107,16 @@ set=NAME:JSON\\-STRING\n .IP\n Set register NAME to given JSON\\-STRING\n .SH COPYRIGHT\n-Copyright (C) 2009-2016 The Bitcoin Core developers\n+Copyright (C) 2009-2017 The Bitcoin Core developers\n \n Please contribute if you find Bitcoin Core useful. Visit\n <https://bitcoincore.org> for further information about the software.\n The source code is available from <https://github.com/bitcoin/bitcoin>.\n \n This is experimental software.\n Distributed under the MIT software license, see the accompanying file COPYING\n-or <http://www.opensource.org/licenses/mit-license.php>.\n+or <https://opensource.org/licenses/MIT>\n \n This product includes software developed by the OpenSSL Project for use in the\n-OpenSSL Toolkit <https://www.openssl.org/> and cryptographic software written\n-by Eric Young and UPnP software written by Thomas Bernard.\n+OpenSSL Toolkit <https://www.openssl.org> and cryptographic software written by\n+Eric Young and UPnP software written by Thomas Bernard."
      },
      {
        "sha": "fb066e0c6f310fbbe34423cff059052bcdf73af6",
        "filename": "doc/man/bitcoind.1",
        "status": "modified",
        "additions": 69,
        "deletions": 38,
        "changes": 107,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/390a39bb5cf4eca849a75802f92a361a9bcac310/doc/man/bitcoind.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/390a39bb5cf4eca849a75802f92a361a9bcac310/doc/man/bitcoind.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoind.1?ref=390a39bb5cf4eca849a75802f92a361a9bcac310",
        "patch": "@@ -1,9 +1,9 @@\n-.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.46.5.\n-.TH BITCOIND \"1\" \"September 2016\" \"bitcoind v0.13.0.0\" \"User Commands\"\n+.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.4.\n+.TH BITCOIND \"1\" \"February 2017\" \"bitcoind v0.14.99.0\" \"User Commands\"\n .SH NAME\n-bitcoind \\- manual page for bitcoind v0.13.0.0\n+bitcoind \\- manual page for bitcoind v0.14.99.0\n .SH DESCRIPTION\n-Bitcoin Core Daemon version v0.13.0.0\n+Bitcoin Core Daemon version v0.14.99.0\n .SS \"Usage:\"\n .TP\n bitcoind [options]\n@@ -28,13 +28,14 @@ long fork (%s in cmd is replaced by message)\n Execute command when the best block changes (%s in cmd is replaced by\n block hash)\n .HP\n-\\fB\\-checkblocks=\\fR<n>\n+\\fB\\-assumevalid=\\fR<hex>\n .IP\n-How many blocks to check at startup (default: 288, 0 = all)\n-.HP\n-\\fB\\-checklevel=\\fR<n>\n-.IP\n-How thorough the block verification of \\fB\\-checkblocks\\fR is (0\\-4, default: 3)\n+If this block is in the chain assume that it and its ancestors are valid\n+and potentially skip their script verification (0 to verify all,\n+default:\n+00000000000000000013176bf8d7dfeab4e1db31dc93bc311b436e82ab226b90,\n+testnet:\n+00000000000128796ee387cf110ccb9d2f36cffaf7f73079c995377c65ac0dcc)\n .HP\n \\fB\\-conf=\\fR<file>\n .IP\n@@ -67,11 +68,16 @@ Keep the transaction memory pool below <n> megabytes (default: 300)\n \\fB\\-mempoolexpiry=\\fR<n>\n .IP\n Do not keep transactions in the mempool longer than <n> hours (default:\n-72)\n+336)\n+.HP\n+\\fB\\-blockreconstructionextratxn=\\fR<n>\n+.IP\n+Extra transactions to keep in memory for compact block reconstructions\n+(default: 100)\n .HP\n \\fB\\-par=\\fR<n>\n .IP\n-Set the number of script verification threads (\\fB\\-4\\fR to 16, 0 = auto, <0 =\n+Set the number of script verification threads (\\fB\\-2\\fR to 16, 0 = auto, <0 =\n leave that many cores free, default: 0)\n .HP\n \\fB\\-pid=\\fR<file>\n@@ -80,13 +86,15 @@ Specify pid file (default: bitcoind.pid)\n .HP\n \\fB\\-prune=\\fR<n>\n .IP\n-Reduce storage requirements by enabling pruning (deleting) of old blocks.\n-This allows the pruneblockchain RPC to be called to delete specific blocks,\n-and enables automatic pruning of old blocks if a target size in MiB is\n-provided. This mode is incompatible with \\fB\\-txindex\\fR and \\fB\\-rescan\\fR.\n-Warning: Reverting this setting requires re\\-downloading the entire blockchain.\n-(default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, >550 =\n-automatically prune block files to stay under the specified target size in MiB)\n+Reduce storage requirements by enabling pruning (deleting) of old\n+blocks. This allows the pruneblockchain RPC to be called to\n+delete specific blocks, and enables automatic pruning of old\n+blocks if a target size in MiB is provided. This mode is\n+incompatible with \\fB\\-txindex\\fR and \\fB\\-rescan\\fR. Warning: Reverting this\n+setting requires re\\-downloading the entire blockchain. (default:\n+0 = disable pruning blocks, 1 = allow manual pruning via RPC,\n+>550 = automatically prune block files to stay under the\n+specified target size in MiB)\n .HP\n \\fB\\-reindex\\-chainstate\\fR\n .IP\n@@ -128,7 +136,8 @@ for IPv6\n .HP\n \\fB\\-connect=\\fR<ip>\n .IP\n-Connect only to the specified node(s)\n+Connect only to the specified node(s); \\fB\\-noconnect\\fR or \\fB\\-connect\\fR=\\fI\\,0\\/\\fR alone to\n+disable automatic connections\n .HP\n \\fB\\-discover\\fR\n .IP\n@@ -142,7 +151,7 @@ Allow DNS lookups for \\fB\\-addnode\\fR, \\fB\\-seednode\\fR and \\fB\\-connect\\fR (def\n \\fB\\-dnsseed\\fR\n .IP\n Query for peer addresses via DNS lookup, if low on addresses (default: 1\n-unless \\fB\\-connect\\fR)\n+unless \\fB\\-connect\\fR/\\-noconnect)\n .HP\n \\fB\\-externalip=\\fR<ip>\n .IP\n@@ -154,7 +163,8 @@ Always query for peer addresses via DNS lookup (default: 0)\n .HP\n \\fB\\-listen\\fR\n .IP\n-Accept connections from outside (default: 1 if no \\fB\\-proxy\\fR or \\fB\\-connect\\fR)\n+Accept connections from outside (default: 1 if no \\fB\\-proxy\\fR or\n+\\fB\\-connect\\fR/\\-noconnect)\n .HP\n \\fB\\-listenonion\\fR\n .IP\n@@ -209,6 +219,11 @@ Connect through SOCKS5 proxy\n Randomize credentials for every proxy connection. This enables Tor\n stream isolation (default: 1)\n .HP\n+\\fB\\-rpcserialversion\\fR\n+.IP\n+Sets the serialization of raw transaction or block hex returned in\n+non\\-verbose mode, non\\-segwit(0) or segwit(1) (default: 1)\n+.HP\n \\fB\\-seednode=\\fR<ip>\n .IP\n Connect to a node to retrieve peer addresses, and disconnect\n@@ -226,17 +241,22 @@ Tor control port to use if onion listening enabled (default:\n .IP\n Tor control port password (default: empty)\n .HP\n+\\fB\\-upnp\\fR\n+.IP\n+Use UPnP to map the listening port (default: 0)\n+.HP\n \\fB\\-whitebind=\\fR<addr>\n .IP\n Bind to given address and whitelist peers connecting to it. Use\n [host]:port notation for IPv6\n .HP\n-\\fB\\-whitelist=\\fR<netmask>\n+\\fB\\-whitelist=\\fR<IP address or network>\n .IP\n-Whitelist peers connecting from the given netmask or IP address. Can be\n-specified multiple times. Whitelisted peers cannot be DoS banned\n-and their transactions are always relayed, even if they are\n-already in the mempool, useful e.g. for a gateway\n+Whitelist peers connecting from the given IP address (e.g. 1.2.3.4) or\n+CIDR notated network (e.g. 1.2.3.0/24). Can be specified multiple\n+times. Whitelisted peers cannot be DoS banned and their\n+transactions are always relayed, even if they are already in the\n+mempool, useful e.g. for a gateway\n .HP\n \\fB\\-whitelistrelay\\fR\n .IP\n@@ -245,7 +265,7 @@ not relaying transactions (default: 1)\n .HP\n \\fB\\-whitelistforcerelay\\fR\n .IP\n-Force relay of transactions from whitelisted peers even they violate\n+Force relay of transactions from whitelisted peers even if they violate\n local relay policy (default: 1)\n .HP\n \\fB\\-maxuploadtarget=\\fR<n>\n@@ -292,13 +312,17 @@ Spend unconfirmed change when sending transactions (default: 1)\n \\fB\\-txconfirmtarget=\\fR<n>\n .IP\n If paytxfee is not set, include enough fee so transactions begin\n-confirmation on average within n blocks (default: 2)\n+confirmation on average within n blocks (default: 6)\n .HP\n \\fB\\-usehd\\fR\n .IP\n Use hierarchical deterministic key generation (HD) after BIP32. Only has\n effect during wallet creation/first start (default: 1)\n .HP\n+\\fB\\-walletrbf\\fR\n+.IP\n+Send transactions with full\\-RBF opt\\-in enabled (default: 0)\n+.HP\n \\fB\\-upgradewallet\\fR\n .IP\n Upgrade wallet to latest format on startup\n@@ -352,9 +376,9 @@ Append comment to the user agent string\n Output debugging information (default: 0, supplying <category> is\n optional). If <category> is not supplied or if <category> = 1,\n output all debugging information.<category> can be: addrman,\n-alert, bench, coindb, db, http, libevent, lock, mempool,\n-mempoolrej, net, proxy, prune, rand, reindex, rpc, selectcoins,\n-tor, zmq.\n+alert, bench, cmpctblock, coindb, db, http, libevent, lock,\n+mempool, mempoolrej, net, proxy, prune, rand, reindex, rpc,\n+selectcoins, tor, zmq.\n .HP\n \\fB\\-help\\-debug\\fR\n .IP\n@@ -427,6 +451,11 @@ Set maximum block size in bytes (default: 750000)\n .IP\n Set maximum size of high\\-priority/low\\-fee transactions in bytes\n (default: 0)\n+.HP\n+\\fB\\-blockmintxfee=\\fR<amt>\n+.IP\n+Set lowest fee rate (in BTC/kB) for transactions to be included in block\n+creation. (default: 0.00001)\n .PP\n RPC server options:\n .HP\n@@ -460,8 +489,10 @@ Password for JSON\\-RPC connections\n .IP\n Username and hashed password for JSON\\-RPC connections. The field\n <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A\n-canonical python script is included in share/rpcuser. This option\n-can be specified multiple times\n+canonical python script is included in share/rpcuser. The client\n+then connects normally using the\n+rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This\n+option can be specified multiple times\n .HP\n \\fB\\-rpcport=\\fR<port>\n .IP\n@@ -479,16 +510,16 @@ option can be specified multiple times\n .IP\n Set the number of threads to service RPC calls (default: 4)\n .SH COPYRIGHT\n-Copyright (C) 2009-2016 The Bitcoin Core developers\n+Copyright (C) 2009-2017 The Bitcoin Core developers\n \n Please contribute if you find Bitcoin Core useful. Visit\n <https://bitcoincore.org> for further information about the software.\n The source code is available from <https://github.com/bitcoin/bitcoin>.\n \n This is experimental software.\n Distributed under the MIT software license, see the accompanying file COPYING\n-or <http://www.opensource.org/licenses/mit-license.php>.\n+or <https://opensource.org/licenses/MIT>\n \n This product includes software developed by the OpenSSL Project for use in the\n-OpenSSL Toolkit <https://www.openssl.org/> and cryptographic software written\n-by Eric Young and UPnP software written by Thomas Bernard.\n+OpenSSL Toolkit <https://www.openssl.org> and cryptographic software written by\n+Eric Young and UPnP software written by Thomas Bernard."
      }
    ]
  }
]