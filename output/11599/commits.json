[
  {
    "sha": "190bf62be1214b072513c7fd7e01cc191723967c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOTBiZjYyYmUxMjE0YjA3MjUxM2M3ZmQ3ZTAxY2MxOTE3MjM5Njdj",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-11-03T11:49:16Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-08-31T14:00:38Z"
      },
      "message": "scripted-diff: Small locking rename\n\nCall sync.h primitives \"locks\" and \"mutexes\" instead of \"blocks\" and \"waitable\ncritical sections\" to match current coding conventions and c++11 standard\nnames.\n\nThis PR does not rename the \"CCriticalSection\" class (though this could be done\nas a followup) because it is used everywhere and would swamp the other changes\nin this PR. Plain mutexes should mostly be preferred instead of recursive\nmutexes in new code anyway.\n\n-BEGIN VERIFY SCRIPT-\nset -x\nset -e\nren() { git grep -l $1 | xargs sed -i s/$1/$2/; }\nren CCriticalBlock           UniqueLock\nren CWaitableCriticalSection Mutex\nren CConditionVariable       std::condition_variable\nren cs_GenesisWait           g_genesis_wait_mutex\nren condvar_GenesisWait      g_genesis_wait_cv\nperl -0777 -pi -e 's/.*typedef.*condition_variable.*\\n\\n?//g' src/sync.h\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "aeece6f0d62abfa11a70875d120350f0374cabee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aeece6f0d62abfa11a70875d120350f0374cabee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/190bf62be1214b072513c7fd7e01cc191723967c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/190bf62be1214b072513c7fd7e01cc191723967c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/190bf62be1214b072513c7fd7e01cc191723967c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/190bf62be1214b072513c7fd7e01cc191723967c/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "385ad110400bc9646dcf2e38b64b7080182a7344",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/385ad110400bc9646dcf2e38b64b7080182a7344",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/385ad110400bc9646dcf2e38b64b7080182a7344"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 22,
      "deletions": 25
    },
    "files": [
      {
        "sha": "326f7f6b648adedb7e5ec43e98f027ca4900c2cd",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/190bf62be1214b072513c7fd7e01cc191723967c/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/190bf62be1214b072513c7fd7e01cc191723967c/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=190bf62be1214b072513c7fd7e01cc191723967c",
        "patch": "@@ -69,7 +69,7 @@ class WorkQueue\n {\n private:\n     /** Mutex protects entire object */\n-    CWaitableCriticalSection cs;\n+    Mutex cs;\n     std::condition_variable cond;\n     std::deque<std::unique_ptr<WorkItem>> queue;\n     bool running;"
      },
      {
        "sha": "27966319d65c4d8c9d8617fd7b7d3bc8cd99374c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/190bf62be1214b072513c7fd7e01cc191723967c/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/190bf62be1214b072513c7fd7e01cc191723967c/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=190bf62be1214b072513c7fd7e01cc191723967c",
        "patch": "@@ -561,17 +561,17 @@ static void BlockNotifyCallback(bool initialSync, const CBlockIndex *pBlockIndex\n }\n \n static bool fHaveGenesis = false;\n-static CWaitableCriticalSection cs_GenesisWait;\n-static CConditionVariable condvar_GenesisWait;\n+static Mutex g_genesis_wait_mutex;\n+static std::condition_variable g_genesis_wait_cv;\n \n static void BlockNotifyGenesisWait(bool, const CBlockIndex *pBlockIndex)\n {\n     if (pBlockIndex != nullptr) {\n         {\n-            LOCK(cs_GenesisWait);\n+            LOCK(g_genesis_wait_mutex);\n             fHaveGenesis = true;\n         }\n-        condvar_GenesisWait.notify_all();\n+        g_genesis_wait_cv.notify_all();\n     }\n }\n \n@@ -1661,12 +1661,12 @@ bool AppInitMain()\n \n     // Wait for genesis block to be processed\n     {\n-        WAIT_LOCK(cs_GenesisWait, lock);\n+        WAIT_LOCK(g_genesis_wait_mutex, lock);\n         // We previously could hang here if StartShutdown() is called prior to\n         // ThreadImport getting started, so instead we just wait on a timer to\n         // check ShutdownRequested() regularly.\n         while (!fHaveGenesis && !ShutdownRequested()) {\n-            condvar_GenesisWait.wait_for(lock, std::chrono::milliseconds(500));\n+            g_genesis_wait_cv.wait_for(lock, std::chrono::milliseconds(500));\n         }\n         uiInterface.NotifyBlockTip_disconnect(BlockNotifyGenesisWait);\n     }"
      },
      {
        "sha": "9f6c426ab7aebab02a4bfd536d17cb564d1ce90e",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/190bf62be1214b072513c7fd7e01cc191723967c/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/190bf62be1214b072513c7fd7e01cc191723967c/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=190bf62be1214b072513c7fd7e01cc191723967c",
        "patch": "@@ -427,7 +427,7 @@ class CConnman\n     bool fMsgProcWake;\n \n     std::condition_variable condMsgProc;\n-    CWaitableCriticalSection mutexMsgProc;\n+    Mutex mutexMsgProc;\n     std::atomic<bool> flagInterruptMsgProc;\n \n     CThreadInterrupt interruptNet;"
      },
      {
        "sha": "503d5b363600e4629d615fe864a30d7a8ef64ecf",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/190bf62be1214b072513c7fd7e01cc191723967c/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/190bf62be1214b072513c7fd7e01cc191723967c/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=190bf62be1214b072513c7fd7e01cc191723967c",
        "patch": "@@ -296,7 +296,7 @@ void RandAddSeedSleep()\n }\n \n \n-static CWaitableCriticalSection cs_rng_state;\n+static Mutex cs_rng_state;\n static unsigned char rng_state[32] = {0};\n static uint64_t rng_counter = 0;\n "
      },
      {
        "sha": "f0d767bbfc5a1058a56b456a20020aea0aca3c5c",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/190bf62be1214b072513c7fd7e01cc191723967c/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/190bf62be1214b072513c7fd7e01cc191723967c/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=190bf62be1214b072513c7fd7e01cc191723967c",
        "patch": "@@ -50,7 +50,7 @@ struct CUpdatedBlock\n     int height;\n };\n \n-static CWaitableCriticalSection cs_blockchange;\n+static Mutex cs_blockchange;\n static std::condition_variable cond_blockchange;\n static CUpdatedBlock latestblock;\n "
      },
      {
        "sha": "40709bdd7fe43b2444a1a840ce9fce8d072cf3ac",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 6,
        "deletions": 9,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/190bf62be1214b072513c7fd7e01cc191723967c/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/190bf62be1214b072513c7fd7e01cc191723967c/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=190bf62be1214b072513c7fd7e01cc191723967c",
        "patch": "@@ -107,18 +107,15 @@ class LOCKABLE AnnotatedMixin : public PARENT\n typedef AnnotatedMixin<std::recursive_mutex> CCriticalSection;\n \n /** Wrapped mutex: supports waiting but not recursive locking */\n-typedef AnnotatedMixin<std::mutex> CWaitableCriticalSection;\n-\n-/** Just a typedef for std::condition_variable, can be wrapped later if desired */\n-typedef std::condition_variable CConditionVariable;\n+typedef AnnotatedMixin<std::mutex> Mutex;\n \n #ifdef DEBUG_LOCKCONTENTION\n void PrintLockContention(const char* pszName, const char* pszFile, int nLine);\n #endif\n \n /** Wrapper around std::unique_lock style lock for Mutex. */\n template <typename Mutex, typename Base = typename Mutex::UniqueLock>\n-class SCOPED_LOCKABLE CCriticalBlock : public Base\n+class SCOPED_LOCKABLE UniqueLock : public Base\n {\n private:\n     void Enter(const char* pszName, const char* pszFile, int nLine)\n@@ -144,15 +141,15 @@ class SCOPED_LOCKABLE CCriticalBlock : public Base\n     }\n \n public:\n-    CCriticalBlock(Mutex& mutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false) EXCLUSIVE_LOCK_FUNCTION(mutexIn) : Base(mutexIn, std::defer_lock)\n+    UniqueLock(Mutex& mutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false) EXCLUSIVE_LOCK_FUNCTION(mutexIn) : Base(mutexIn, std::defer_lock)\n     {\n         if (fTry)\n             TryEnter(pszName, pszFile, nLine);\n         else\n             Enter(pszName, pszFile, nLine);\n     }\n \n-    CCriticalBlock(Mutex* pmutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false) EXCLUSIVE_LOCK_FUNCTION(pmutexIn)\n+    UniqueLock(Mutex* pmutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false) EXCLUSIVE_LOCK_FUNCTION(pmutexIn)\n     {\n         if (!pmutexIn) return;\n \n@@ -163,7 +160,7 @@ class SCOPED_LOCKABLE CCriticalBlock : public Base\n             Enter(pszName, pszFile, nLine);\n     }\n \n-    ~CCriticalBlock() UNLOCK_FUNCTION()\n+    ~UniqueLock() UNLOCK_FUNCTION()\n     {\n         if (Base::owns_lock())\n             LeaveCritical();\n@@ -176,7 +173,7 @@ class SCOPED_LOCKABLE CCriticalBlock : public Base\n };\n \n template<typename MutexArg>\n-using DebugLock = CCriticalBlock<typename std::remove_reference<typename std::remove_pointer<MutexArg>::type>::type>;\n+using DebugLock = UniqueLock<typename std::remove_reference<typename std::remove_pointer<MutexArg>::type>::type>;\n \n #define PASTE(x, y) x ## y\n #define PASTE2(x, y) PASTE(x, y)"
      },
      {
        "sha": "df0380546e3f850471edb5d9e3e7e099f8ede2e5",
        "filename": "src/test/sync_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/190bf62be1214b072513c7fd7e01cc191723967c/src/test/sync_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/190bf62be1214b072513c7fd7e01cc191723967c/src/test/sync_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sync_tests.cpp?ref=190bf62be1214b072513c7fd7e01cc191723967c",
        "patch": "@@ -41,7 +41,7 @@ BOOST_AUTO_TEST_CASE(potential_deadlock_detected)\n     CCriticalSection rmutex1, rmutex2;\n     TestPotentialDeadLockDetected(rmutex1, rmutex2);\n \n-    CWaitableCriticalSection mutex1, mutex2;\n+    Mutex mutex1, mutex2;\n     TestPotentialDeadLockDetected(mutex1, mutex2);\n \n     #ifdef DEBUG_LOCKORDER"
      },
      {
        "sha": "9c6fccfcdeccd514a760be7922d612f79580c891",
        "filename": "src/threadinterrupt.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/190bf62be1214b072513c7fd7e01cc191723967c/src/threadinterrupt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/190bf62be1214b072513c7fd7e01cc191723967c/src/threadinterrupt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/threadinterrupt.h?ref=190bf62be1214b072513c7fd7e01cc191723967c",
        "patch": "@@ -30,7 +30,7 @@ class CThreadInterrupt\n \n private:\n     std::condition_variable cond;\n-    CWaitableCriticalSection mut;\n+    Mutex mut;\n     std::atomic<bool> flag;\n };\n "
      },
      {
        "sha": "a9eea5edd9c80c5405d4725c2d372287fbee969f",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/190bf62be1214b072513c7fd7e01cc191723967c/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/190bf62be1214b072513c7fd7e01cc191723967c/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=190bf62be1214b072513c7fd7e01cc191723967c",
        "patch": "@@ -217,8 +217,8 @@ CCriticalSection cs_main;\n BlockMap& mapBlockIndex = g_chainstate.mapBlockIndex;\n CChain& chainActive = g_chainstate.chainActive;\n CBlockIndex *pindexBestHeader = nullptr;\n-CWaitableCriticalSection g_best_block_mutex;\n-CConditionVariable g_best_block_cv;\n+Mutex g_best_block_mutex;\n+std::condition_variable g_best_block_cv;\n uint256 g_best_block;\n int nScriptCheckThreads = 0;\n std::atomic_bool fImporting(false);"
      },
      {
        "sha": "3df6456eca084c8285d73feb12c6ae65a937c44f",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/190bf62be1214b072513c7fd7e01cc191723967c/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/190bf62be1214b072513c7fd7e01cc191723967c/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=190bf62be1214b072513c7fd7e01cc191723967c",
        "patch": "@@ -151,8 +151,8 @@ extern BlockMap& mapBlockIndex;\n extern uint64_t nLastBlockTx;\n extern uint64_t nLastBlockWeight;\n extern const std::string strMessageMagic;\n-extern CWaitableCriticalSection g_best_block_mutex;\n-extern CConditionVariable g_best_block_cv;\n+extern Mutex g_best_block_mutex;\n+extern std::condition_variable g_best_block_cv;\n extern uint256 g_best_block;\n extern std::atomic_bool fImporting;\n extern std::atomic_bool fReindex;"
      }
    ]
  }
]