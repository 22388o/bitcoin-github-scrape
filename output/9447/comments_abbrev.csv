morcos,2016-12-30T16:09:06Z,Seems to fail `sendheaders.py` but not on my local machine...  I'll look into it...,https://github.com/bitcoin/bitcoin/pull/9447#issuecomment-269788793,269788793,
rebroad,2016-12-31T06:17:06Z,I like the coding style and elegance of this. Will help with testing.,https://github.com/bitcoin/bitcoin/pull/9447#issuecomment-269851859,269851859,
morcos,2016-12-31T14:30:18Z,"@rebroad As mentioned in the PR comment, this is built off 3 other PR's.  All of your comments either belong on those PR's or are related to the last commit which was just for debugging the travis failure and will be removed.  I have just left it there for now in case anyone else wants to see the error details.",https://github.com/bitcoin/bitcoin/pull/9447#issuecomment-269867345,269867345,
TheBlueMatt,2016-12-31T16:19:12Z,@morcos claimed on IRC the test failures might be (in part) due to the issue mentioned at https://github.com/bitcoin/bitcoin/pull/9375#issuecomment-269871618,https://github.com/bitcoin/bitcoin/pull/9447#issuecomment-269871743,269871743,
rebroad,2017-01-01T10:32:50Z,"@morcos although most of the lines I am commenting on have not been introduced by you, given you are changing the code near to them, I tought it was a good opportunity to suggest these changes as I believe they ought to be changed at some point, so perhaps could be with this PR.",https://github.com/bitcoin/bitcoin/pull/9447#issuecomment-269898285,269898285,
morcos,2017-01-01T18:19:34Z,"Rebased with the newest commit from #9375 which fixes the failure.\n\nFor clarity only the 5 commits on which I'm the author are meant for review here.  The others are contained in the linked PR's...\n\n",https://github.com/bitcoin/bitcoin/pull/9447#issuecomment-269913476,269913476,
MarcoFalke,2017-01-01T18:51:57Z,"OT: Imo it makes sense to octomerge all pulls which this pull depends on and rebase the commits of this pull on top of the merge commit. Thus, the original commit hashes are preserved and it is clear what was old and should be reviewed in other pulls. Also, it is easier to see the fresh commits.",https://github.com/bitcoin/bitcoin/pull/9447#issuecomment-269914553,269914553,
morcos,2017-01-06T21:00:30Z,"Rebased and I think done the way @MarcoFalke suggested.\n\nAddressed feedback\n",https://github.com/bitcoin/bitcoin/pull/9447#issuecomment-271004747,271004747,
morcos,2017-01-17T18:19:25Z,rebased,https://github.com/bitcoin/bitcoin/pull/9447#issuecomment-273252886,273252886,
da2ce7,2017-02-07T16:29:09Z,"#9375, #9252, and #9400 are merged, needs rebase.",https://github.com/bitcoin/bitcoin/pull/9447#issuecomment-278053808,278053808,
morcos,2017-02-14T18:38:42Z,rebased,https://github.com/bitcoin/bitcoin/pull/9447#issuecomment-279795397,279795397,
jtimon,2017-09-06T00:41:35Z,More concurrency! concept ACK,https://github.com/bitcoin/bitcoin/pull/9447#issuecomment-327341699,327341699,
TheBlueMatt,2017-09-06T00:46:52Z,This should likely be closed in favor of #10984.,https://github.com/bitcoin/bitcoin/pull/9447#issuecomment-327342404,327342404,
ryanofsky,2017-10-12T18:08:44Z,"Should this still be closed in favor of #10984?\n",https://github.com/bitcoin/bitcoin/pull/9447#issuecomment-336219907,336219907,
rebroad,2016-12-31T06:06:53Z,why not make this < instead of <= ? why do we avoid requesting compact blocks for competing best blocks?,https://github.com/bitcoin/bitcoin/pull/9447#discussion_r94269789,94269789,src/net_processing.cpp
rebroad,2016-12-31T06:11:00Z,What is the deal with block height 165?,https://github.com/bitcoin/bitcoin/pull/9447#discussion_r94269821,94269821,src/net_processing.cpp
rebroad,2016-12-31T06:12:12Z,Very much approve of the variable namings chosen in various places.,https://github.com/bitcoin/bitcoin/pull/9447#discussion_r94269827,94269827,src/net_processing.cpp
rebroad,2016-12-31T06:15:06Z,"Why not make this <=2 rather than ==1 (for mapBlocksInFlight.size())? this way if two blocks get announced in close proximity we can request compact blocks for both of them (rather than compact block for the oldest, and full block for the most recent).",https://github.com/bitcoin/bitcoin/pull/9447#discussion_r94269850,94269850,src/net_processing.cpp
rebroad,2017-01-01T10:31:14Z,@morcos I couldn't see this added line in any of the 3 PRs you mentioned.,https://github.com/bitcoin/bitcoin/pull/9447#discussion_r94282342,94282342,src/net_processing.cpp
instagibbs,2017-01-04T15:58:47Z,"""Only ask for the full block from the first peer we requested from""?",https://github.com/bitcoin/bitcoin/pull/9447#discussion_r94608924,94608924,src/net_processing.cpp
instagibbs,2017-01-04T16:07:51Z,could just do the `-= itInFlight->second.second->fValidatedHeaders` as above to match.,https://github.com/bitcoin/bitcoin/pull/9447#discussion_r94610828,94610828,src/net_processing.cpp
instagibbs,2017-01-04T16:30:50Z,since C++11 can also just capture the return value and set as `range.first` instead of worrying about iterator invalidation.,https://github.com/bitcoin/bitcoin/pull/9447#discussion_r94615561,94615561,src/net_processing.cpp
ryanofsky,2017-01-05T21:29:06Z,"I think indexing might by `NodeId` would be better than using a multimap, because it would ensure that there couldn't be multiple entries for a block from the same node. I'd suggest:\n\n```\ntypedef map<pair<uint256, NodeId>, list<QueuedBlock>::iterator> BlockDownloadMap;\n```\n\nThis also would let you replace some of the while loops added here with direct lookups. I thought some of these (",https://github.com/bitcoin/bitcoin/pull/9447#discussion_r94855329,94855329,src/net_processing.cpp
ryanofsky,2017-01-05T21:55:45Z,Could you expand this comment a little bit to describe the condition being checked? In particular I don't understand how the IsWitnessEnabled and fHaveWitness parts relate to making the request.,https://github.com/bitcoin/bitcoin/pull/9447#discussion_r94860099,94860099,src/net_processing.cpp
ryanofsky,2017-01-05T22:01:36Z,"Is this change (""Only request full blocks from the peer we thought had the block in-flight"") a change in behavior? Or is it just a cleanup after the previous multimap commit? It seems like this commit should be merged into the preceding or following one, or the commit message should be extended to say what the effect is, what motivates it.",https://github.com/bitcoin/bitcoin/pull/9447#discussion_r94861101,94861101,src/net_processing.cpp
morcos,2017-01-06T20:58:06Z,I'm unsure about this change.  In particular there are a lot of mmapBlocksInFlight.count(hash) calls that would get a bit less clear...   I'll think about it some more,https://github.com/bitcoin/bitcoin/pull/9447#discussion_r95018911,95018911,src/net_processing.cpp
ryanofsky,2017-01-06T21:24:20Z,"Yeah, I noticed that in the later commits. You could have a count helper function returning std::distance(range.first, range.second). I do think a map is a better way to represent the data, but the c++ map implementation does makes it a little awkward. Anyway, it's just something to consider.",https://github.com/bitcoin/bitcoin/pull/9447#discussion_r95022954,95022954,src/net_processing.cpp
TheBlueMatt,2017-02-24T17:15:01Z,Can you AssertLockHeld?,https://github.com/bitcoin/bitcoin/pull/9447#discussion_r102987559,102987559,src/net_processing.cpp
TheBlueMatt,2017-02-24T17:15:05Z,Can you AssertLockHeld?,https://github.com/bitcoin/bitcoin/pull/9447#discussion_r102987571,102987571,src/net_processing.cpp
TheBlueMatt,2017-02-24T21:12:37Z,"Also, maybe consider just pulling the MSG_CMPCT_BLOCK setting a bit later down up to here and just requesting the block in this if statement (possibly before the while loop above).",https://github.com/bitcoin/bitcoin/pull/9447#discussion_r103034117,103034117,src/net_processing.cpp
TheBlueMatt,2017-02-24T21:13:44Z,"In the strange case that a peer does not set the fHaveWItness service bit, but does announce compact blocks v2, I believe this line would result in a full block request. More generally, because the two if statements always have to be in sync to avoid this, I really prefer we pull the actual request logic into this if statement.",https://github.com/bitcoin/bitcoin/pull/9447#discussion_r103034317,103034317,src/net_processing.cpp
TheBlueMatt,2017-02-24T21:20:38Z,"The way I read this, the use of countPartialBlocksStarted, instead of a countBlocksStarted, means that we will request up to two compact blocks at a time, even if we are already requesting the full block from a peer. This seems strange to me, why not just max 2 in-flights at the same time for a given block, with the second never being a full block?",https://github.com/bitcoin/bitcoin/pull/9447#discussion_r103035443,103035443,src/net_processing.cpp
TheBlueMatt,2017-02-24T21:26:55Z,"Further, simply adding the entry to vToFetch here may result in a null pointer dereference, I believe. If a peer announces two headers messages back-to-back, the first time we will MarkBlockAsInFlight to them, and the second time we'll hit this condition and add the entry to vToFetch again (which should also be fixed). Further down, we'll MarkBlockAsInFlight to them again, but MarkBlockAsInFlight ",https://github.com/bitcoin/bitcoin/pull/9447#discussion_r103036470,103036470,src/net_processing.cpp
TheBlueMatt,2017-02-24T21:27:49Z,"I believe the above needs fixing in three ways - MarkBlockAsInFlight needs to be more robust against NULL pit, the request needs to move into this if statement and skip the remainder of this block of code, and we shouldn't double-request from the same peer.",https://github.com/bitcoin/bitcoin/pull/9447#discussion_r103036611,103036611,src/net_processing.cpp
TheBlueMatt,2017-02-24T21:30:17Z,"Also, why drop the fInFlightFromSamePeer option? It looks like we'll never getblocktxn from two peers simultaneously?",https://github.com/bitcoin/bitcoin/pull/9447#discussion_r103037047,103037047,src/net_processing.cpp
TheBlueMatt,2017-02-24T21:31:57Z,"OK, so why not just check fPeerWasFirstRequest and MarkBlockAsNotInFlight otherwise?",https://github.com/bitcoin/bitcoin/pull/9447#discussion_r103037352,103037352,src/net_processing.cpp
jameshilliard,2017-06-28T22:11:52Z,Should this be configurable? Might make sense for miners to have this higher.,https://github.com/bitcoin/bitcoin/pull/9447#discussion_r124669986,124669986,src/net_processing.h
TheBlueMatt,2017-06-28T22:18:47Z,"Likely not, asking all your peers for a copy of the block poses the same network-DoS risks as connecting to hundreds of nodes, which people like to do because they believe it will help (though it usually actually hurts) them get their blocks out faster.\n\nMore importantly, if you're a miner and have good peers, I think it'd be somewhat rare for you to receive a third compact block announce befo",https://github.com/bitcoin/bitcoin/pull/9447#discussion_r124671168,124671168,src/net_processing.h
jameshilliard,2017-06-28T22:50:22Z,What do you think the upper limit is before it would generally cause a negative impact? Maybe just have an upper limit like we do for max outbound connections.,https://github.com/bitcoin/bitcoin/pull/9447#discussion_r124676221,124676221,src/net_processing.h
TheBlueMatt,2017-06-28T22:54:22Z,"Probably around 2 :p. Its really only useful if your peer got stuck doing something and wasn't able to respond or is being actively malicious. Once we've fixed the block-on-block-validation-before-responding-to-blocktxn-requests issue, it should be somewhat rare for this to help more than a very small amount.",https://github.com/bitcoin/bitcoin/pull/9447#discussion_r124676800,124676800,src/net_processing.h
