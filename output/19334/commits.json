[
  {
    "sha": "27b27663849932971eb5deadb1f19234b9cd97ea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyN2IyNzY2Mzg0OTkzMjk3MWViNWRlYWRiMWYxOTIzNGI5Y2Q5N2Vh",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-15T21:59:24Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-07-14T15:07:16Z"
      },
      "message": "walletdb: Move BerkeleyDatabase::Flush(true) to Close()\n\nInstead of having Flush optionally shutdown the database and\nenvironment, add a Close() function that does that.",
      "tree": {
        "sha": "f8fa0655e170c4c2b1edbc7eaa440cdc101295a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f8fa0655e170c4c2b1edbc7eaa440cdc101295a7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/27b27663849932971eb5deadb1f19234b9cd97ea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27b27663849932971eb5deadb1f19234b9cd97ea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/27b27663849932971eb5deadb1f19234b9cd97ea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27b27663849932971eb5deadb1f19234b9cd97ea/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "834ac4c0f50c0795b55f5586ecc4b1db251be58d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/834ac4c0f50c0795b55f5586ecc4b1db251be58d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/834ac4c0f50c0795b55f5586ecc4b1db251be58d"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 41,
      "deletions": 30
    },
    "files": [
      {
        "sha": "0989dc21c324a609564d250b78b490f9a3d8a291",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 14,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27b27663849932971eb5deadb1f19234b9cd97ea/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27b27663849932971eb5deadb1f19234b9cd97ea/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=27b27663849932971eb5deadb1f19234b9cd97ea",
        "patch": "@@ -324,6 +324,15 @@ void BerkeleyEnvironment::CheckpointLSN(const std::string& strFile)\n     dbenv->lsn_reset(strFile.c_str(), 0);\n }\n \n+BerkeleyDatabase::~BerkeleyDatabase()\n+{\n+    if (env) {\n+        LOCK(cs_db);\n+        size_t erased = env->m_databases.erase(strFile);\n+        assert(erased == 1);\n+        env->m_fileids.erase(strFile);\n+    }\n+}\n \n BerkeleyBatch::BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode, bool fFlushOnCloseIn) : pdb(nullptr), activeTxn(nullptr), m_cursor(nullptr)\n {\n@@ -685,22 +694,17 @@ bool BerkeleyDatabase::Backup(const std::string& strDest) const\n     }\n }\n \n-void BerkeleyDatabase::Flush(bool shutdown)\n+void BerkeleyDatabase::Flush()\n {\n     if (!IsDummy()) {\n-        env->Flush(shutdown);\n-        if (shutdown) {\n-            LOCK(cs_db);\n-            g_dbenvs.erase(env->Directory().string());\n-            env = nullptr;\n-        } else {\n-            // TODO: To avoid g_dbenvs.erase erasing the environment prematurely after the\n-            // first database shutdown when multiple databases are open in the same\n-            // environment, should replace raw database `env` pointers with shared or weak\n-            // pointers, or else separate the database and environment shutdowns so\n-            // environments can be shut down after databases.\n-            env->m_fileids.erase(strFile);\n-        }\n+        env->Flush(false);\n+    }\n+}\n+\n+void BerkeleyDatabase::Close()\n+{\n+    if (!IsDummy()) {\n+        env->Flush(true);\n     }\n }\n "
      },
      {
        "sha": "52cd9d92dfd7d24ea52dbed1b22e8c1c07907571",
        "filename": "src/wallet/bdb.h",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27b27663849932971eb5deadb1f19234b9cd97ea/src/wallet/bdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27b27663849932971eb5deadb1f19234b9cd97ea/src/wallet/bdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.h?ref=27b27663849932971eb5deadb1f19234b9cd97ea",
        "patch": "@@ -115,12 +115,7 @@ class BerkeleyDatabase\n         assert(inserted.second);\n     }\n \n-    ~BerkeleyDatabase() {\n-        if (env) {\n-            size_t erased = env->m_databases.erase(strFile);\n-            assert(erased == 1);\n-        }\n-    }\n+    ~BerkeleyDatabase();\n \n     /** Rewrite the entire database on disk, with the exception of key pszSkip if non-zero\n      */\n@@ -130,9 +125,13 @@ class BerkeleyDatabase\n      */\n     bool Backup(const std::string& strDest) const;\n \n-    /** Make sure all changes are flushed to disk.\n+    /** Make sure all changes are flushed to database file.\n+     */\n+    void Flush();\n+    /** Flush to the database file and close the database.\n+     *  Also close the environment if no other databases are open in it.\n      */\n-    void Flush(bool shutdown);\n+    void Close();\n     /* flush the wallet passively (TRY_LOCK)\n        ideal to be called periodically */\n     bool PeriodicFlush();"
      },
      {
        "sha": "2a81d30133dcea1b91be94a3ade9edbdcbe5767a",
        "filename": "src/wallet/load.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27b27663849932971eb5deadb1f19234b9cd97ea/src/wallet/load.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27b27663849932971eb5deadb1f19234b9cd97ea/src/wallet/load.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/load.cpp?ref=27b27663849932971eb5deadb1f19234b9cd97ea",
        "patch": "@@ -99,14 +99,14 @@ void StartWallets(CScheduler& scheduler, const ArgsManager& args)\n void FlushWallets()\n {\n     for (const std::shared_ptr<CWallet>& pwallet : GetWallets()) {\n-        pwallet->Flush(false);\n+        pwallet->Flush();\n     }\n }\n \n void StopWallets()\n {\n     for (const std::shared_ptr<CWallet>& pwallet : GetWallets()) {\n-        pwallet->Flush(true);\n+        pwallet->Close();\n     }\n }\n "
      },
      {
        "sha": "cee2f2214c75782e2443805f5c7a732c86212a73",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27b27663849932971eb5deadb1f19234b9cd97ea/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27b27663849932971eb5deadb1f19234b9cd97ea/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=27b27663849932971eb5deadb1f19234b9cd97ea",
        "patch": "@@ -439,9 +439,14 @@ bool CWallet::HasWalletSpend(const uint256& txid) const\n     return (iter != mapTxSpends.end() && iter->first.hash == txid);\n }\n \n-void CWallet::Flush(bool shutdown)\n+void CWallet::Flush()\n {\n-    database->Flush(shutdown);\n+    database->Flush();\n+}\n+\n+void CWallet::Close()\n+{\n+    database->Close();\n }\n \n void CWallet::SyncMetaData(std::pair<TxSpends::iterator, TxSpends::iterator> range)"
      },
      {
        "sha": "a761caf38c6092bc78b1d4edbb133245395540a7",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27b27663849932971eb5deadb1f19234b9cd97ea/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27b27663849932971eb5deadb1f19234b9cd97ea/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=27b27663849932971eb5deadb1f19234b9cd97ea",
        "patch": "@@ -1087,7 +1087,10 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     bool HasWalletSpend(const uint256& txid) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     //! Flush wallet (bitdb flush)\n-    void Flush(bool shutdown=false);\n+    void Flush();\n+\n+    //! Close wallet database\n+    void Close();\n \n     /** Wallet is about to be unloaded */\n     boost::signals2::signal<void ()> NotifyUnload;"
      },
      {
        "sha": "9f25b1ae7dd13d98dcbbc801271bbf65b408fec8",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27b27663849932971eb5deadb1f19234b9cd97ea/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27b27663849932971eb5deadb1f19234b9cd97ea/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=27b27663849932971eb5deadb1f19234b9cd97ea",
        "patch": "@@ -17,7 +17,7 @@ namespace WalletTool {\n static void WalletToolReleaseWallet(CWallet* wallet)\n {\n     wallet->WalletLogPrintf(\"Releasing wallet\\n\");\n-    wallet->Flush(true);\n+    wallet->Close();\n     delete wallet;\n }\n \n@@ -133,7 +133,7 @@ bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)\n         std::shared_ptr<CWallet> wallet_instance = CreateWallet(name, path);\n         if (wallet_instance) {\n             WalletShowInfo(wallet_instance.get());\n-            wallet_instance->Flush(true);\n+            wallet_instance->Close();\n         }\n     } else if (command == \"info\" || command == \"salvage\") {\n         if (!fs::exists(path)) {\n@@ -145,7 +145,7 @@ bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)\n             std::shared_ptr<CWallet> wallet_instance = LoadWallet(name, path);\n             if (!wallet_instance) return false;\n             WalletShowInfo(wallet_instance.get());\n-            wallet_instance->Flush(true);\n+            wallet_instance->Close();\n         } else if (command == \"salvage\") {\n             return SalvageWallet(path);\n         }"
      }
    ]
  },
  {
    "sha": "71d28e7cdca1c8553531bb3a4725d7916363ec5c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MWQyOGU3Y2RjYTFjODU1MzUzMWJiM2E0NzI1ZDc5MTYzNjNlYzVj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-20T00:51:07Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-07-14T15:07:16Z"
      },
      "message": "walletdb: Introduce AddRef and RemoveRef functions\n\nRefactor mapFileUseCount increment and decrement to separate functions\nAddRef and RemoveRef",
      "tree": {
        "sha": "297581efdd39252282410442280cddcc61aa03e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/297581efdd39252282410442280cddcc61aa03e5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/71d28e7cdca1c8553531bb3a4725d7916363ec5c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71d28e7cdca1c8553531bb3a4725d7916363ec5c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/71d28e7cdca1c8553531bb3a4725d7916363ec5c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71d28e7cdca1c8553531bb3a4725d7916363ec5c/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "27b27663849932971eb5deadb1f19234b9cd97ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27b27663849932971eb5deadb1f19234b9cd97ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/27b27663849932971eb5deadb1f19234b9cd97ea"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 24,
      "deletions": 7
    },
    "files": [
      {
        "sha": "8ca4991f04dfe0c737536b60f6e63e530f7cc2b8",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 7,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71d28e7cdca1c8553531bb3a4725d7916363ec5c/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71d28e7cdca1c8553531bb3a4725d7916363ec5c/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=71d28e7cdca1c8553531bb3a4725d7916363ec5c",
        "patch": "@@ -334,7 +334,7 @@ BerkeleyDatabase::~BerkeleyDatabase()\n     }\n }\n \n-BerkeleyBatch::BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode, bool fFlushOnCloseIn) : pdb(nullptr), activeTxn(nullptr), m_cursor(nullptr)\n+BerkeleyBatch::BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode, bool fFlushOnCloseIn) : pdb(nullptr), activeTxn(nullptr), m_cursor(nullptr), m_database(database)\n {\n     fReadOnly = (!strchr(pszMode, '+') && !strchr(pszMode, 'w'));\n     fFlushOnClose = fFlushOnCloseIn;\n@@ -408,7 +408,7 @@ BerkeleyBatch::BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode, bo\n                 fReadOnly = fTmp;\n             }\n         }\n-        ++env->mapFileUseCount[strFilename];\n+        database.AddRef();\n         strFile = strFilename;\n     }\n }\n@@ -446,11 +446,7 @@ void BerkeleyBatch::Close()\n     if (fFlushOnClose)\n         Flush();\n \n-    {\n-        LOCK(cs_db);\n-        --env->mapFileUseCount[strFile];\n-    }\n-    env->m_db_in_use.notify_all();\n+    m_database.RemoveRef();\n }\n \n void BerkeleyEnvironment::CloseDb(const std::string& strFile)\n@@ -846,6 +842,21 @@ bool BerkeleyBatch::HasKey(CDataStream&& key)\n     return ret == 0;\n }\n \n+void BerkeleyDatabase::AddRef()\n+{\n+    LOCK(cs_db);\n+    ++env->mapFileUseCount[strFile];\n+}\n+\n+void BerkeleyDatabase::RemoveRef()\n+{\n+    {\n+        LOCK(cs_db);\n+        --env->mapFileUseCount[strFile];\n+    }\n+    env->m_db_in_use.notify_all();\n+}\n+\n std::unique_ptr<BerkeleyBatch> BerkeleyDatabase::MakeBatch(const char* mode, bool flush_on_close)\n {\n     return MakeUnique<BerkeleyBatch>(*this, mode, flush_on_close);"
      },
      {
        "sha": "9c4d6afa87d71bf409a8efaf66b565419eac289b",
        "filename": "src/wallet/bdb.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71d28e7cdca1c8553531bb3a4725d7916363ec5c/src/wallet/bdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71d28e7cdca1c8553531bb3a4725d7916363ec5c/src/wallet/bdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.h?ref=71d28e7cdca1c8553531bb3a4725d7916363ec5c",
        "patch": "@@ -121,6 +121,11 @@ class BerkeleyDatabase\n      */\n     bool Rewrite(const char* pszSkip=nullptr);\n \n+    /** Indicate the a new database user has began using the database. */\n+    void AddRef();\n+    /** Indicate that database user has stopped using the database and that it could be flushed or closed. */\n+    void RemoveRef();\n+\n     /** Back up the entire database to a file.\n      */\n     bool Backup(const std::string& strDest) const;\n@@ -212,6 +217,7 @@ class BerkeleyBatch : public DatabaseBatch\n     bool fReadOnly;\n     bool fFlushOnClose;\n     BerkeleyEnvironment *env;\n+    BerkeleyDatabase& m_database;\n \n public:\n     explicit BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode = \"r+\", bool fFlushOnCloseIn=true);"
      }
    ]
  },
  {
    "sha": "2179dbcbcd0b9bef7ad9c907b85294b9a1bccf0f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMTc5ZGJjYmNkMGI5YmVmN2FkOWM5MDdiODUyOTRiOWExYmNjZjBm",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-20T00:55:07Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-07-14T15:07:16Z"
      },
      "message": "walletdb: Add BerkeleyDatabase::Open dummy function\n\nAdds an Open function for the class abstraction that does nothing for\nnow.",
      "tree": {
        "sha": "3d5c7b7ca6781b0a3d1e3e257e7006435c4a71ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3d5c7b7ca6781b0a3d1e3e257e7006435c4a71ec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2179dbcbcd0b9bef7ad9c907b85294b9a1bccf0f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2179dbcbcd0b9bef7ad9c907b85294b9a1bccf0f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2179dbcbcd0b9bef7ad9c907b85294b9a1bccf0f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2179dbcbcd0b9bef7ad9c907b85294b9a1bccf0f/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "71d28e7cdca1c8553531bb3a4725d7916363ec5c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71d28e7cdca1c8553531bb3a4725d7916363ec5c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/71d28e7cdca1c8553531bb3a4725d7916363ec5c"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "06ee9ae5eedc0529d080e200e87ab88dd441a0f4",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2179dbcbcd0b9bef7ad9c907b85294b9a1bccf0f/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2179dbcbcd0b9bef7ad9c907b85294b9a1bccf0f/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=2179dbcbcd0b9bef7ad9c907b85294b9a1bccf0f",
        "patch": "@@ -413,6 +413,11 @@ BerkeleyBatch::BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode, bo\n     }\n }\n \n+void BerkeleyDatabase::Open(const char* mode)\n+{\n+    throw std::logic_error(\"BerkeleyDatabase does not implement Open. This function should not be called.\");\n+}\n+\n void BerkeleyBatch::Flush()\n {\n     if (activeTxn)"
      },
      {
        "sha": "bbaeefa4140951b0bf0056fc1af56642816c84a2",
        "filename": "src/wallet/bdb.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2179dbcbcd0b9bef7ad9c907b85294b9a1bccf0f/src/wallet/bdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2179dbcbcd0b9bef7ad9c907b85294b9a1bccf0f/src/wallet/bdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.h?ref=2179dbcbcd0b9bef7ad9c907b85294b9a1bccf0f",
        "patch": "@@ -117,6 +117,10 @@ class BerkeleyDatabase\n \n     ~BerkeleyDatabase();\n \n+    /** Open the database if it is not already opened.\n+     *  Dummy function, doesn't do anything right now, but is needed for class abstraction */\n+    void Open(const char* mode);\n+\n     /** Rewrite the entire database on disk, with the exception of key pszSkip if non-zero\n      */\n     bool Rewrite(const char* pszSkip=nullptr);"
      }
    ]
  },
  {
    "sha": "d416ae560e46a4846a3fd5990b7d390d2ef30ec8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNDE2YWU1NjBlNDZhNDg0NmEzZmQ1OTkwYjdkMzkwZDJlZjMwZWM4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-15T20:24:00Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-07-14T15:07:16Z"
      },
      "message": "walletdb: Introduce WalletDatabase abstract class\n\nMake WalletDatabase actually an abstract class and not just a typedef\nfor BerkeleyDatabase. Have BerkeleyDatabase inherit this class.",
      "tree": {
        "sha": "3e859a51aba093050caabfc31ab873a27c16f39b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e859a51aba093050caabfc31ab873a27c16f39b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d416ae560e46a4846a3fd5990b7d390d2ef30ec8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d416ae560e46a4846a3fd5990b7d390d2ef30ec8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d416ae560e46a4846a3fd5990b7d390d2ef30ec8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d416ae560e46a4846a3fd5990b7d390d2ef30ec8/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2179dbcbcd0b9bef7ad9c907b85294b9a1bccf0f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2179dbcbcd0b9bef7ad9c907b85294b9a1bccf0f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2179dbcbcd0b9bef7ad9c907b85294b9a1bccf0f"
      }
    ],
    "stats": {
      "total": 117,
      "additions": 84,
      "deletions": 33
    },
    "files": [
      {
        "sha": "85b09d8baca462fc36eb586efabd5585ff0bcf7b",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d416ae560e46a4846a3fd5990b7d390d2ef30ec8/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d416ae560e46a4846a3fd5990b7d390d2ef30ec8/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=d416ae560e46a4846a3fd5990b7d390d2ef30ec8",
        "patch": "@@ -24,7 +24,6 @@\n #include <univalue.h>\n \n #ifdef ENABLE_WALLET\n-#include <wallet/bdb.h>\n #include <wallet/db.h>\n #include <wallet/wallet.h>\n #endif"
      },
      {
        "sha": "7fed9601b0b2e862a93d28ad8476f54e10c0bf6c",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d416ae560e46a4846a3fd5990b7d390d2ef30ec8/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d416ae560e46a4846a3fd5990b7d390d2ef30ec8/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=d416ae560e46a4846a3fd5990b7d390d2ef30ec8",
        "patch": "@@ -862,7 +862,7 @@ void BerkeleyDatabase::RemoveRef()\n     env->m_db_in_use.notify_all();\n }\n \n-std::unique_ptr<BerkeleyBatch> BerkeleyDatabase::MakeBatch(const char* mode, bool flush_on_close)\n+std::unique_ptr<DatabaseBatch> BerkeleyDatabase::MakeBatch(const char* mode, bool flush_on_close)\n {\n     return MakeUnique<BerkeleyBatch>(*this, mode, flush_on_close);\n }"
      },
      {
        "sha": "b8b585631ac36a280709d166638df8b332ff9594",
        "filename": "src/wallet/bdb.h",
        "status": "modified",
        "additions": 16,
        "deletions": 21,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d416ae560e46a4846a3fd5990b7d390d2ef30ec8/src/wallet/bdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d416ae560e46a4846a3fd5990b7d390d2ef30ec8/src/wallet/bdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.h?ref=d416ae560e46a4846a3fd5990b7d390d2ef30ec8",
        "patch": "@@ -98,64 +98,59 @@ class BerkeleyBatch;\n /** An instance of this class represents one database.\n  * For BerkeleyDB this is just a (env, strFile) tuple.\n  **/\n-class BerkeleyDatabase\n+class BerkeleyDatabase : public WalletDatabase\n {\n     friend class BerkeleyBatch;\n public:\n     /** Create dummy DB handle */\n-    BerkeleyDatabase() : nUpdateCounter(0), nLastSeen(0), nLastFlushed(0), nLastWalletUpdate(0), env(nullptr)\n+    BerkeleyDatabase() : WalletDatabase(), env(nullptr)\n     {\n     }\n \n     /** Create DB handle to real database */\n     BerkeleyDatabase(std::shared_ptr<BerkeleyEnvironment> env, std::string filename) :\n-        nUpdateCounter(0), nLastSeen(0), nLastFlushed(0), nLastWalletUpdate(0), env(std::move(env)), strFile(std::move(filename))\n+        WalletDatabase(), env(std::move(env)), strFile(std::move(filename))\n     {\n         auto inserted = this->env->m_databases.emplace(strFile, std::ref(*this));\n         assert(inserted.second);\n     }\n \n-    ~BerkeleyDatabase();\n+    ~BerkeleyDatabase() override;\n \n     /** Open the database if it is not already opened.\n      *  Dummy function, doesn't do anything right now, but is needed for class abstraction */\n-    void Open(const char* mode);\n+    void Open(const char* mode) override;\n \n     /** Rewrite the entire database on disk, with the exception of key pszSkip if non-zero\n      */\n-    bool Rewrite(const char* pszSkip=nullptr);\n+    bool Rewrite(const char* pszSkip=nullptr) override;\n \n     /** Indicate the a new database user has began using the database. */\n-    void AddRef();\n+    void AddRef() override;\n     /** Indicate that database user has stopped using the database and that it could be flushed or closed. */\n-    void RemoveRef();\n+    void RemoveRef() override;\n \n     /** Back up the entire database to a file.\n      */\n-    bool Backup(const std::string& strDest) const;\n+    bool Backup(const std::string& strDest) const override;\n \n     /** Make sure all changes are flushed to database file.\n      */\n-    void Flush();\n+    void Flush() override;\n     /** Flush to the database file and close the database.\n      *  Also close the environment if no other databases are open in it.\n      */\n-    void Close();\n+    void Close() override;\n     /* flush the wallet passively (TRY_LOCK)\n        ideal to be called periodically */\n-    bool PeriodicFlush();\n+    bool PeriodicFlush() override;\n \n-    void IncrementUpdateCounter();\n-\n-    void ReloadDbEnv();\n+    void IncrementUpdateCounter() override;\n \n-    std::atomic<unsigned int> nUpdateCounter;\n-    unsigned int nLastSeen;\n-    unsigned int nLastFlushed;\n-    int64_t nLastWalletUpdate;\n+    void ReloadDbEnv() override;\n \n     /** Verifies the environment and database file */\n-    bool Verify(bilingual_str& error);\n+    bool Verify(bilingual_str& error) override;\n \n     /**\n      * Pointer to shared database environment.\n@@ -172,7 +167,7 @@ class BerkeleyDatabase\n     std::unique_ptr<Db> m_db;\n \n     /** Make a BerkeleyBatch connected to this database */\n-    std::unique_ptr<BerkeleyBatch> MakeBatch(const char* mode, bool flush_on_close);\n+    std::unique_ptr<DatabaseBatch> MakeBatch(const char* mode = \"r+\", bool flush_on_close = true) override;\n \n private:\n     std::string strFile;"
      },
      {
        "sha": "12dc1cc96bd4beac77ee8cf6c14630a59ad273ce",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 60,
        "deletions": 0,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d416ae560e46a4846a3fd5990b7d390d2ef30ec8/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d416ae560e46a4846a3fd5990b7d390d2ef30ec8/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=d416ae560e46a4846a3fd5990b7d390d2ef30ec8",
        "patch": "@@ -10,8 +10,12 @@\n #include <fs.h>\n #include <streams.h>\n \n+#include <atomic>\n+#include <memory>\n #include <string>\n \n+struct bilingual_str;\n+\n /** Given a wallet directory path or legacy file path, return path to main data file in the wallet database. */\n fs::path WalletDataFilePath(const fs::path& wallet_path);\n void SplitWalletPath(const fs::path& wallet_path, fs::path& env_directory, std::string& database_filename);\n@@ -94,4 +98,60 @@ class DatabaseBatch\n     virtual bool TxnAbort() = 0;\n };\n \n+/** An instance of this class represents one database.\n+ **/\n+class WalletDatabase\n+{\n+public:\n+    /** Create dummy DB handle */\n+    WalletDatabase() : nUpdateCounter(0), nLastSeen(0), nLastFlushed(0), nLastWalletUpdate(0) {}\n+    virtual ~WalletDatabase() {};\n+\n+    /** Open the database if it is not already opened. */\n+    virtual void Open(const char* mode) = 0;\n+\n+    //! Counts the number of active database users to be sure that the database is not closed while someone is using it\n+    std::atomic<int> m_refcount{0};\n+    /** Indicate the a new database user has began using the database. Increments m_refcount */\n+    virtual void AddRef() = 0;\n+    /** Indicate that database user has stopped using the database and that it could be flushed or closed. Decrement m_refcount */\n+    virtual void RemoveRef() = 0;\n+\n+    /** Rewrite the entire database on disk, with the exception of key pszSkip if non-zero\n+     */\n+    virtual bool Rewrite(const char* pszSkip=nullptr) = 0;\n+\n+    /** Back up the entire database to a file.\n+     */\n+    virtual bool Backup(const std::string& strDest) const = 0;\n+\n+    /** Make sure all changes are flushed to database file.\n+     */\n+    virtual void Flush() = 0;\n+    /** Flush to the database file and close the database.\n+     *  Also close the environment if no other databases are open in it.\n+     */\n+    virtual void Close() = 0;\n+    /* flush the wallet passively (TRY_LOCK)\n+       ideal to be called periodically */\n+    virtual bool PeriodicFlush() = 0;\n+\n+    virtual void IncrementUpdateCounter() = 0;\n+\n+    virtual void ReloadDbEnv() = 0;\n+\n+    std::atomic<unsigned int> nUpdateCounter;\n+    unsigned int nLastSeen;\n+    unsigned int nLastFlushed;\n+    int64_t nLastWalletUpdate;\n+\n+    /** Verifies the environment and database file */\n+    virtual bool Verify(bilingual_str& error) = 0;\n+\n+    std::string m_file_path;\n+\n+    /** Make a DatabaseBatch connected to this database */\n+    virtual std::unique_ptr<DatabaseBatch> MakeBatch(const char* mode = \"r+\", bool flush_on_close = true) = 0;\n+};\n+\n #endif // BITCOIN_WALLET_DB_H"
      },
      {
        "sha": "8c409b40cd0667729668ca28aac16369928fd7dc",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d416ae560e46a4846a3fd5990b7d390d2ef30ec8/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d416ae560e46a4846a3fd5990b7d390d2ef30ec8/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=d416ae560e46a4846a3fd5990b7d390d2ef30ec8",
        "patch": "@@ -1012,20 +1012,20 @@ bool IsWalletLoaded(const fs::path& wallet_path)\n }\n \n /** Return object for accessing database at specified path. */\n-std::unique_ptr<BerkeleyDatabase> CreateWalletDatabase(const fs::path& path)\n+std::unique_ptr<WalletDatabase> CreateWalletDatabase(const fs::path& path)\n {\n     std::string filename;\n     return MakeUnique<BerkeleyDatabase>(GetWalletEnv(path, filename), std::move(filename));\n }\n \n /** Return object for accessing dummy database with no read/write capabilities. */\n-std::unique_ptr<BerkeleyDatabase> CreateDummyWalletDatabase()\n+std::unique_ptr<WalletDatabase> CreateDummyWalletDatabase()\n {\n     return MakeUnique<BerkeleyDatabase>();\n }\n \n /** Return object for accessing temporary in-memory database. */\n-std::unique_ptr<BerkeleyDatabase> CreateMockWalletDatabase()\n+std::unique_ptr<WalletDatabase> CreateMockWalletDatabase()\n {\n     return MakeUnique<BerkeleyDatabase>(std::make_shared<BerkeleyEnvironment>(), \"\");\n }"
      },
      {
        "sha": "7c5bf7652b70e0789a04ad56dc266424817af7e8",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d416ae560e46a4846a3fd5990b7d390d2ef30ec8/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d416ae560e46a4846a3fd5990b7d390d2ef30ec8/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=d416ae560e46a4846a3fd5990b7d390d2ef30ec8",
        "patch": "@@ -40,9 +40,6 @@ class CWalletTx;\n class uint160;\n class uint256;\n \n-/** Backend-agnostic database type. */\n-using WalletDatabase = BerkeleyDatabase;\n-\n /** Error statuses for the wallet database */\n enum class DBErrors\n {\n@@ -280,7 +277,7 @@ class WalletBatch\n     //! Abort current transaction\n     bool TxnAbort();\n private:\n-    std::unique_ptr<BerkeleyBatch> m_batch;\n+    std::unique_ptr<DatabaseBatch> m_batch;\n     WalletDatabase& m_database;\n };\n \n@@ -294,12 +291,12 @@ bool ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, st\n bool IsWalletLoaded(const fs::path& wallet_path);\n \n /** Return object for accessing database at specified path. */\n-std::unique_ptr<BerkeleyDatabase> CreateWalletDatabase(const fs::path& path);\n+std::unique_ptr<WalletDatabase> CreateWalletDatabase(const fs::path& path);\n \n /** Return object for accessing dummy database with no read/write capabilities. */\n-std::unique_ptr<BerkeleyDatabase> CreateDummyWalletDatabase();\n+std::unique_ptr<WalletDatabase> CreateDummyWalletDatabase();\n \n /** Return object for accessing temporary in-memory database. */\n-std::unique_ptr<BerkeleyDatabase> CreateMockWalletDatabase();\n+std::unique_ptr<WalletDatabase> CreateMockWalletDatabase();\n \n #endif // BITCOIN_WALLET_WALLETDB_H"
      }
    ]
  }
]