[
  {
    "sha": "1430e4d5ae156f569d37de0fbbc22a7ac3c41cc4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNDMwZTRkNWFlMTU2ZjU2OWQzN2RlMGZiYmMyMmE3YWMzYzQxY2M0",
    "commit": {
      "author": {
        "name": "Kalle Alm",
        "email": "kalle.alm@gmail.com",
        "date": "2017-01-05T13:47:05Z"
      },
      "committer": {
        "name": "Kalle Alm",
        "email": "kalle.alm@gmail.com",
        "date": "2017-01-05T13:47:05Z"
      },
      "message": "Trivial refactor: replace all BOOST_FOREACH (qt/).",
      "tree": {
        "sha": "7a1729d4639428a4cf34a0cfb68e52f08c480117",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a1729d4639428a4cf34a0cfb68e52f08c480117"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1430e4d5ae156f569d37de0fbbc22a7ac3c41cc4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1430e4d5ae156f569d37de0fbbc22a7ac3c41cc4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1430e4d5ae156f569d37de0fbbc22a7ac3c41cc4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1430e4d5ae156f569d37de0fbbc22a7ac3c41cc4/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ce43630d1e97368f454ad6a7b65a24263ab5be71",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce43630d1e97368f454ad6a7b65a24263ab5be71",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ce43630d1e97368f454ad6a7b65a24263ab5be71"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 24,
      "deletions": 34
    },
    "files": [
      {
        "sha": "911fc1d60c75c1f2dd849520067bb39fa692adb6",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1430e4d5ae156f569d37de0fbbc22a7ac3c41cc4/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1430e4d5ae156f569d37de0fbbc22a7ac3c41cc4/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=1430e4d5ae156f569d37de0fbbc22a7ac3c41cc4",
        "patch": "@@ -10,8 +10,6 @@\n #include \"base58.h\"\n #include \"wallet/wallet.h\"\n \n-#include <boost/foreach.hpp>\n-\n #include <QFont>\n #include <QDebug>\n \n@@ -81,7 +79,7 @@ class AddressTablePriv\n         cachedAddressTable.clear();\n         {\n             LOCK(wallet->cs_wallet);\n-            BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& item, wallet->mapAddressBook)\n+            for (const PAIRTYPE(CTxDestination, CAddressBookData)& item : wallet->mapAddressBook)\n             {\n                 const CBitcoinAddress& address = item.first;\n                 bool fMine = IsMine(*wallet, address.Get());"
      },
      {
        "sha": "3900929833895d5bebca003455e071080c748faa",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1430e4d5ae156f569d37de0fbbc22a7ac3c41cc4/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1430e4d5ae156f569d37de0fbbc22a7ac3c41cc4/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=1430e4d5ae156f569d37de0fbbc22a7ac3c41cc4",
        "patch": "@@ -455,7 +455,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     coinControl->ListSelected(vCoinControl);\n     model->getOutputs(vCoinControl, vOutputs);\n \n-    BOOST_FOREACH(const COutput& out, vOutputs) {\n+    for (const COutput& out : vOutputs) {\n         // unselect already spent, very unlikely scenario, this could happen\n         // when selected are spent elsewhere, like rpc or another computer\n         uint256 txhash = out.tx->GetHash();\n@@ -651,7 +651,7 @@ void CoinControlDialog::updateView()\n     std::map<QString, std::vector<COutput> > mapCoins;\n     model->listCoins(mapCoins);\n \n-    BOOST_FOREACH(const PAIRTYPE(QString, std::vector<COutput>)& coins, mapCoins) {\n+    for (const PAIRTYPE(QString, std::vector<COutput>)& coins : mapCoins) {\n         CCoinControlWidgetItem *itemWalletAddress = new CCoinControlWidgetItem();\n         itemWalletAddress->setCheckState(COLUMN_CHECKBOX, Qt::Unchecked);\n         QString sWalletAddress = coins.first;\n@@ -676,7 +676,7 @@ void CoinControlDialog::updateView()\n \n         CAmount nSum = 0;\n         int nChildren = 0;\n-        BOOST_FOREACH(const COutput& out, coins.second) {\n+        for (const COutput& out : coins.second) {\n             nSum += out.tx->tx->vout[out.i].nValue;\n             nChildren++;\n "
      },
      {
        "sha": "601d9300780ba5d7e7d8f6198bcd899c9e3d225d",
        "filename": "src/qt/peertablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1430e4d5ae156f569d37de0fbbc22a7ac3c41cc4/src/qt/peertablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1430e4d5ae156f569d37de0fbbc22a7ac3c41cc4/src/qt/peertablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.cpp?ref=1430e4d5ae156f569d37de0fbbc22a7ac3c41cc4",
        "patch": "@@ -79,7 +79,7 @@ class PeerTablePriv\n             TRY_LOCK(cs_main, lockMain);\n             if (lockMain)\n             {\n-                BOOST_FOREACH(CNodeCombinedStats &stats, cachedNodeStats)\n+                for (CNodeCombinedStats &stats : cachedNodeStats)\n                     stats.fNodeStateStatsAvailable = GetNodeStateStats(stats.nodeStats.nodeid, stats.nodeStateStats);\n             }\n         }"
      },
      {
        "sha": "b8927017e83e9bb2c21e0d2da2e49f2561e20bd3",
        "filename": "src/qt/recentrequeststablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1430e4d5ae156f569d37de0fbbc22a7ac3c41cc4/src/qt/recentrequeststablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1430e4d5ae156f569d37de0fbbc22a7ac3c41cc4/src/qt/recentrequeststablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.cpp?ref=1430e4d5ae156f569d37de0fbbc22a7ac3c41cc4",
        "patch": "@@ -11,8 +11,6 @@\n #include \"clientversion.h\"\n #include \"streams.h\"\n \n-#include <boost/foreach.hpp>\n-\n RecentRequestsTableModel::RecentRequestsTableModel(CWallet *wallet, WalletModel *parent) :\n     QAbstractTableModel(parent), walletModel(parent)\n {\n@@ -22,7 +20,7 @@ RecentRequestsTableModel::RecentRequestsTableModel(CWallet *wallet, WalletModel\n     // Load entries from wallet\n     std::vector<std::string> vReceiveRequests;\n     parent->loadReceiveRequests(vReceiveRequests);\n-    BOOST_FOREACH(const std::string& request, vReceiveRequests)\n+    for (const std::string& request : vReceiveRequests)\n         addNewRequest(request);\n \n     /* These columns must match the indices in the ColumnIndex enumeration */"
      },
      {
        "sha": "0751c00440d8cfe526b15ad8ee59a41f7154a54b",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1430e4d5ae156f569d37de0fbbc22a7ac3c41cc4/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1430e4d5ae156f569d37de0fbbc22a7ac3c41cc4/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=1430e4d5ae156f569d37de0fbbc22a7ac3c41cc4",
        "patch": "@@ -133,7 +133,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n         // Coinbase\n         //\n         CAmount nUnmatured = 0;\n-        BOOST_FOREACH(const CTxOut& txout, wtx.tx->vout)\n+        for (const CTxOut& txout : wtx.tx->vout)\n             nUnmatured += wallet->GetCredit(txout, ISMINE_ALL);\n         strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \";\n         if (wtx.IsInMainChain())\n@@ -152,14 +152,14 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n     else\n     {\n         isminetype fAllFromMe = ISMINE_SPENDABLE;\n-        BOOST_FOREACH(const CTxIn& txin, wtx.tx->vin)\n+        for (const CTxIn& txin : wtx.tx->vin)\n         {\n             isminetype mine = wallet->IsMine(txin);\n             if(fAllFromMe > mine) fAllFromMe = mine;\n         }\n \n         isminetype fAllToMe = ISMINE_SPENDABLE;\n-        BOOST_FOREACH(const CTxOut& txout, wtx.tx->vout)\n+        for (const CTxOut& txout : wtx.tx->vout)\n         {\n             isminetype mine = wallet->IsMine(txout);\n             if(fAllToMe > mine) fAllToMe = mine;\n@@ -173,7 +173,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n             //\n             // Debit\n             //\n-            BOOST_FOREACH(const CTxOut& txout, wtx.tx->vout)\n+            for (const CTxOut& txout : wtx.tx->vout)\n             {\n                 // Ignore change\n                 isminetype toSelf = wallet->IsMine(txout);\n@@ -221,10 +221,10 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n             //\n             // Mixed debit transaction\n             //\n-            BOOST_FOREACH(const CTxIn& txin, wtx.tx->vin)\n+            for (const CTxIn& txin : wtx.tx->vin)\n                 if (wallet->IsMine(txin))\n                     strHTML += \"<b>\" + tr(\"Debit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, -wallet->GetDebit(txin, ISMINE_ALL)) + \"<br>\";\n-            BOOST_FOREACH(const CTxOut& txout, wtx.tx->vout)\n+            for (const CTxOut& txout : wtx.tx->vout)\n                 if (wallet->IsMine(txout))\n                     strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, wallet->GetCredit(txout, ISMINE_ALL)) + \"<br>\";\n         }\n@@ -276,10 +276,10 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n     if (fDebug)\n     {\n         strHTML += \"<hr><br>\" + tr(\"Debug information\") + \"<br><br>\";\n-        BOOST_FOREACH(const CTxIn& txin, wtx.tx->vin)\n+        for (const CTxIn& txin : wtx.tx->vin)\n             if(wallet->IsMine(txin))\n                 strHTML += \"<b>\" + tr(\"Debit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, -wallet->GetDebit(txin, ISMINE_ALL)) + \"<br>\";\n-        BOOST_FOREACH(const CTxOut& txout, wtx.tx->vout)\n+        for (const CTxOut& txout : wtx.tx->vout)\n             if(wallet->IsMine(txout))\n                 strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, wallet->GetCredit(txout, ISMINE_ALL)) + \"<br>\";\n \n@@ -289,7 +289,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n         strHTML += \"<br><b>\" + tr(\"Inputs\") + \":</b>\";\n         strHTML += \"<ul>\";\n \n-        BOOST_FOREACH(const CTxIn& txin, wtx.tx->vin)\n+        for (const CTxIn& txin : wtx.tx->vin)\n         {\n             COutPoint prevout = txin.prevout;\n "
      },
      {
        "sha": "6d294d2d21908e634ad434e4d64ad9fa3afc7af7",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1430e4d5ae156f569d37de0fbbc22a7ac3c41cc4/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1430e4d5ae156f569d37de0fbbc22a7ac3c41cc4/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=1430e4d5ae156f569d37de0fbbc22a7ac3c41cc4",
        "patch": "@@ -12,8 +12,6 @@\n \n #include <stdint.h>\n \n-#include <boost/foreach.hpp>\n-\n /* Return positive answer if transaction should be shown in list.\n  */\n bool TransactionRecord::showTransaction(const CWalletTx &wtx)\n@@ -47,7 +45,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n         //\n         // Credit\n         //\n-        BOOST_FOREACH(const CTxOut& txout, wtx.tx->vout)\n+        for (const CTxOut& txout : wtx.tx->vout)\n         {\n             isminetype mine = wallet->IsMine(txout);\n             if(mine)\n@@ -83,15 +81,15 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n     {\n         bool involvesWatchAddress = false;\n         isminetype fAllFromMe = ISMINE_SPENDABLE;\n-        BOOST_FOREACH(const CTxIn& txin, wtx.tx->vin)\n+        for (const CTxIn& txin : wtx.tx->vin)\n         {\n             isminetype mine = wallet->IsMine(txin);\n             if(mine & ISMINE_WATCH_ONLY) involvesWatchAddress = true;\n             if(fAllFromMe > mine) fAllFromMe = mine;\n         }\n \n         isminetype fAllToMe = ISMINE_SPENDABLE;\n-        BOOST_FOREACH(const CTxOut& txout, wtx.tx->vout)\n+        for (const CTxOut& txout : wtx.tx->vout)\n         {\n             isminetype mine = wallet->IsMine(txout);\n             if(mine & ISMINE_WATCH_ONLY) involvesWatchAddress = true;"
      },
      {
        "sha": "6c75a9701cc33aebad40682844a09001481f4827",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1430e4d5ae156f569d37de0fbbc22a7ac3c41cc4/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1430e4d5ae156f569d37de0fbbc22a7ac3c41cc4/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=1430e4d5ae156f569d37de0fbbc22a7ac3c41cc4",
        "patch": "@@ -26,8 +26,6 @@\n #include <QIcon>\n #include <QList>\n \n-#include <boost/foreach.hpp>\n-\n // Amount column is right-aligned it contains numbers\n static int column_alignments[] = {\n         Qt::AlignLeft|Qt::AlignVCenter, /* status */"
      },
      {
        "sha": "52f516ea5d24c2d492881d846a225765c8298cff",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1430e4d5ae156f569d37de0fbbc22a7ac3c41cc4/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1430e4d5ae156f569d37de0fbbc22a7ac3c41cc4/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=1430e4d5ae156f569d37de0fbbc22a7ac3c41cc4",
        "patch": "@@ -28,8 +28,6 @@\n #include <QSet>\n #include <QTimer>\n \n-#include <boost/foreach.hpp>\n-\n WalletModel::WalletModel(const PlatformStyle *platformStyle, CWallet *_wallet, OptionsModel *_optionsModel, QObject *parent) :\n     QObject(parent), wallet(_wallet), optionsModel(_optionsModel), addressTableModel(0),\n     transactionTableModel(0),\n@@ -65,7 +63,7 @@ CAmount WalletModel::getBalance(const CCoinControl *coinControl) const\n         CAmount nBalance = 0;\n         std::vector<COutput> vCoins;\n         wallet->AvailableCoins(vCoins, true, coinControl);\n-        BOOST_FOREACH(const COutput& out, vCoins)\n+        for (const COutput& out : vCoins)\n             if(out.fSpendable)\n                 nBalance += out.tx->tx->vout[out.i].nValue;\n \n@@ -575,7 +573,7 @@ bool WalletModel::getPrivKey(const CKeyID &address, CKey& vchPrivKeyOut) const\n void WalletModel::getOutputs(const std::vector<COutPoint>& vOutpoints, std::vector<COutput>& vOutputs)\n {\n     LOCK2(cs_main, wallet->cs_wallet);\n-    BOOST_FOREACH(const COutPoint& outpoint, vOutpoints)\n+    for (const COutPoint& outpoint : vOutpoints)\n     {\n         if (!wallet->mapWallet.count(outpoint.hash)) continue;\n         int nDepth = wallet->mapWallet[outpoint.hash].GetDepthInMainChain();\n@@ -602,7 +600,7 @@ void WalletModel::listCoins(std::map<QString, std::vector<COutput> >& mapCoins)\n     wallet->ListLockedCoins(vLockedCoins);\n \n     // add locked coins\n-    BOOST_FOREACH(const COutPoint& outpoint, vLockedCoins)\n+    for (const COutPoint& outpoint : vLockedCoins)\n     {\n         if (!wallet->mapWallet.count(outpoint.hash)) continue;\n         int nDepth = wallet->mapWallet[outpoint.hash].GetDepthInMainChain();\n@@ -612,7 +610,7 @@ void WalletModel::listCoins(std::map<QString, std::vector<COutput> >& mapCoins)\n             vCoins.push_back(out);\n     }\n \n-    BOOST_FOREACH(const COutput& out, vCoins)\n+    for (const COutput& out : vCoins)\n     {\n         COutput cout = out;\n \n@@ -656,8 +654,8 @@ void WalletModel::listLockedCoins(std::vector<COutPoint>& vOutpts)\n void WalletModel::loadReceiveRequests(std::vector<std::string>& vReceiveRequests)\n {\n     LOCK(wallet->cs_wallet);\n-    BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& item, wallet->mapAddressBook)\n-        BOOST_FOREACH(const PAIRTYPE(std::string, std::string)& item2, item.second.destdata)\n+    for (const PAIRTYPE(CTxDestination, CAddressBookData)& item : wallet->mapAddressBook)\n+        for (const PAIRTYPE(std::string, std::string)& item2 : item.second.destdata)\n             if (item2.first.size() > 2 && item2.first.substr(0,2) == \"rr\") // receive request\n                 vReceiveRequests.push_back(item2.second);\n }"
      }
    ]
  },
  {
    "sha": "27b75410f017ff7b2a021e9527d7f9d3fed100ed",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyN2I3NTQxMGYwMTdmZjdiMmEwMjFlOTUyN2Q3ZjlkM2ZlZDEwMGVk",
    "commit": {
      "author": {
        "name": "Kalle Alm",
        "email": "kalle.alm@gmail.com",
        "date": "2017-01-05T13:47:20Z"
      },
      "committer": {
        "name": "Kalle Alm",
        "email": "kalle.alm@gmail.com",
        "date": "2017-01-05T13:47:20Z"
      },
      "message": "Trivial refactor: replace all BOOST_FOREACH (rpc/).",
      "tree": {
        "sha": "eaf4164dfb4cc0fabf193f5824c0de569023163c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eaf4164dfb4cc0fabf193f5824c0de569023163c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/27b75410f017ff7b2a021e9527d7f9d3fed100ed",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27b75410f017ff7b2a021e9527d7f9d3fed100ed",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/27b75410f017ff7b2a021e9527d7f9d3fed100ed",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27b75410f017ff7b2a021e9527d7f9d3fed100ed/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1430e4d5ae156f569d37de0fbbc22a7ac3c41cc4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1430e4d5ae156f569d37de0fbbc22a7ac3c41cc4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1430e4d5ae156f569d37de0fbbc22a7ac3c41cc4"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 25,
      "deletions": 28
    },
    "files": [
      {
        "sha": "715e668b18cd05b5d660824b143e910a2f86f426",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27b75410f017ff7b2a021e9527d7f9d3fed100ed/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27b75410f017ff7b2a021e9527d7f9d3fed100ed/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=27b75410f017ff7b2a021e9527d7f9d3fed100ed",
        "patch": "@@ -368,14 +368,14 @@ void entryToJSON(UniValue &info, const CTxMemPoolEntry &e)\n     info.push_back(Pair(\"ancestorfees\", e.GetModFeesWithAncestors()));\n     const CTransaction& tx = e.GetTx();\n     set<string> setDepends;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    for (const CTxIn& txin : tx.vin)\n     {\n         if (mempool.exists(txin.prevout.hash))\n             setDepends.insert(txin.prevout.hash.ToString());\n     }\n \n     UniValue depends(UniValue::VARR);\n-    BOOST_FOREACH(const string& dep, setDepends)\n+    for (const string& dep : setDepends)\n     {\n         depends.push_back(dep);\n     }\n@@ -389,7 +389,7 @@ UniValue mempoolToJSON(bool fVerbose = false)\n     {\n         LOCK(mempool.cs);\n         UniValue o(UniValue::VOBJ);\n-        BOOST_FOREACH(const CTxMemPoolEntry& e, mempool.mapTx)\n+        for (const CTxMemPoolEntry& e : mempool.mapTx)\n         {\n             const uint256& hash = e.GetTx().GetHash();\n             UniValue info(UniValue::VOBJ);\n@@ -404,7 +404,7 @@ UniValue mempoolToJSON(bool fVerbose = false)\n         mempool.queryHashes(vtxid);\n \n         UniValue a(UniValue::VARR);\n-        BOOST_FOREACH(const uint256& hash, vtxid)\n+        for (const uint256& hash : vtxid)\n             a.push_back(hash.ToString());\n \n         return a;\n@@ -488,14 +488,14 @@ UniValue getmempoolancestors(const JSONRPCRequest& request)\n \n     if (!fVerbose) {\n         UniValue o(UniValue::VARR);\n-        BOOST_FOREACH(CTxMemPool::txiter ancestorIt, setAncestors) {\n+        for (CTxMemPool::txiter ancestorIt : setAncestors) {\n             o.push_back(ancestorIt->GetTx().GetHash().ToString());\n         }\n \n         return o;\n     } else {\n         UniValue o(UniValue::VOBJ);\n-        BOOST_FOREACH(CTxMemPool::txiter ancestorIt, setAncestors) {\n+        for (CTxMemPool::txiter ancestorIt : setAncestors) {\n             const CTxMemPoolEntry &e = *ancestorIt;\n             const uint256& _hash = e.GetTx().GetHash();\n             UniValue info(UniValue::VOBJ);\n@@ -552,14 +552,14 @@ UniValue getmempooldescendants(const JSONRPCRequest& request)\n \n     if (!fVerbose) {\n         UniValue o(UniValue::VARR);\n-        BOOST_FOREACH(CTxMemPool::txiter descendantIt, setDescendants) {\n+        for (CTxMemPool::txiter descendantIt : setDescendants) {\n             o.push_back(descendantIt->GetTx().GetHash().ToString());\n         }\n \n         return o;\n     } else {\n         UniValue o(UniValue::VOBJ);\n-        BOOST_FOREACH(CTxMemPool::txiter descendantIt, setDescendants) {\n+        for (CTxMemPool::txiter descendantIt : setDescendants) {\n             const CTxMemPoolEntry &e = *descendantIt;\n             const uint256& _hash = e.GetTx().GetHash();\n             UniValue info(UniValue::VOBJ);\n@@ -1161,7 +1161,7 @@ UniValue getchaintips(const JSONRPCRequest& request)\n     std::set<const CBlockIndex*> setOrphans;\n     std::set<const CBlockIndex*> setPrevs;\n \n-    BOOST_FOREACH(const PAIRTYPE(const uint256, CBlockIndex*)& item, mapBlockIndex)\n+    for (const PAIRTYPE(const uint256, CBlockIndex*)& item : mapBlockIndex)\n     {\n         if (!chainActive.Contains(item.second)) {\n             setOrphans.insert(item.second);\n@@ -1181,7 +1181,7 @@ UniValue getchaintips(const JSONRPCRequest& request)\n \n     /* Construct the output array.  */\n     UniValue res(UniValue::VARR);\n-    BOOST_FOREACH(const CBlockIndex* block, setTips)\n+    for (const CBlockIndex* block : setTips)\n     {\n         UniValue obj(UniValue::VOBJ);\n         obj.push_back(Pair(\"height\", block->nHeight));"
      },
      {
        "sha": "8119a716cae0fd733d5a25b7d1b6130194c4bc2f",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27b75410f017ff7b2a021e9527d7f9d3fed100ed/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27b75410f017ff7b2a021e9527d7f9d3fed100ed/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=27b75410f017ff7b2a021e9527d7f9d3fed100ed",
        "patch": "@@ -573,7 +573,7 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n         entry.push_back(Pair(\"hash\", tx.GetWitnessHash().GetHex()));\n \n         UniValue deps(UniValue::VARR);\n-        BOOST_FOREACH (const CTxIn &in, tx.vin)\n+        for (const CTxIn &in : tx.vin)\n         {\n             if (setTxIndex.count(in.prevout.hash))\n                 deps.push_back(setTxIndex[in.prevout.hash]);"
      },
      {
        "sha": "cfc5f2bc57e843303dca9edafcc6eb446b73b5e8",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27b75410f017ff7b2a021e9527d7f9d3fed100ed/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27b75410f017ff7b2a021e9527d7f9d3fed100ed/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=27b75410f017ff7b2a021e9527d7f9d3fed100ed",
        "patch": "@@ -137,7 +137,7 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n             obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n             obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n             UniValue a(UniValue::VARR);\n-            BOOST_FOREACH(const CTxDestination& addr, addresses)\n+            for (const CTxDestination& addr : addresses)\n                 a.push_back(CBitcoinAddress(addr).ToString());\n             obj.push_back(Pair(\"addresses\", a));\n             if (whichType == TX_MULTISIG)"
      },
      {
        "sha": "de6a05192ea1ab7daf9b599262773f91c0ee8974",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27b75410f017ff7b2a021e9527d7f9d3fed100ed/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27b75410f017ff7b2a021e9527d7f9d3fed100ed/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=27b75410f017ff7b2a021e9527d7f9d3fed100ed",
        "patch": "@@ -18,8 +18,6 @@\n #include \"utilstrencodings.h\"\n #include \"version.h\"\n \n-#include <boost/foreach.hpp>\n-\n #include <univalue.h>\n \n using namespace std;\n@@ -124,7 +122,7 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n \n     UniValue ret(UniValue::VARR);\n \n-    BOOST_FOREACH(const CNodeStats& stats, vstats) {\n+    for (const CNodeStats& stats : vstats) {\n         UniValue obj(UniValue::VOBJ);\n         CNodeStateStats statestats;\n         bool fStateStats = GetNodeStateStats(stats.nodeid, statestats);\n@@ -158,22 +156,22 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n             obj.push_back(Pair(\"synced_headers\", statestats.nSyncHeight));\n             obj.push_back(Pair(\"synced_blocks\", statestats.nCommonHeight));\n             UniValue heights(UniValue::VARR);\n-            BOOST_FOREACH(int height, statestats.vHeightInFlight) {\n+            for (int height : statestats.vHeightInFlight) {\n                 heights.push_back(height);\n             }\n             obj.push_back(Pair(\"inflight\", heights));\n         }\n         obj.push_back(Pair(\"whitelisted\", stats.fWhitelisted));\n \n         UniValue sendPerMsgCmd(UniValue::VOBJ);\n-        BOOST_FOREACH(const mapMsgCmdSize::value_type &i, stats.mapSendBytesPerMsgCmd) {\n+        for (const mapMsgCmdSize::value_type &i : stats.mapSendBytesPerMsgCmd) {\n             if (i.second > 0)\n                 sendPerMsgCmd.push_back(Pair(i.first, i.second));\n         }\n         obj.push_back(Pair(\"bytessent_per_msg\", sendPerMsgCmd));\n \n         UniValue recvPerMsgCmd(UniValue::VOBJ);\n-        BOOST_FOREACH(const mapMsgCmdSize::value_type &i, stats.mapRecvBytesPerMsgCmd) {\n+        for (const mapMsgCmdSize::value_type &i : stats.mapRecvBytesPerMsgCmd) {\n             if (i.second > 0)\n                 recvPerMsgCmd.push_back(Pair(i.first, i.second));\n         }\n@@ -446,7 +444,7 @@ UniValue getnetworkinfo(const JSONRPCRequest& request)\n     UniValue localAddresses(UniValue::VARR);\n     {\n         LOCK(cs_mapLocalHost);\n-        BOOST_FOREACH(const PAIRTYPE(CNetAddr, LocalServiceInfo) &item, mapLocalHost)\n+        for (const PAIRTYPE(CNetAddr, LocalServiceInfo) &item : mapLocalHost)\n         {\n             UniValue rec(UniValue::VOBJ);\n             rec.push_back(Pair(\"address\", item.first.ToString()));"
      },
      {
        "sha": "ca055d73ee48db5d4bf90c3adaa8db7096105ab7",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27b75410f017ff7b2a021e9527d7f9d3fed100ed/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27b75410f017ff7b2a021e9527d7f9d3fed100ed/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=27b75410f017ff7b2a021e9527d7f9d3fed100ed",
        "patch": "@@ -54,7 +54,7 @@ void ScriptPubKeyToJSON(const CScript& scriptPubKey, UniValue& out, bool fInclud\n     out.push_back(Pair(\"type\", GetTxnOutputType(type)));\n \n     UniValue a(UniValue::VARR);\n-    BOOST_FOREACH(const CTxDestination& addr, addresses)\n+    for (const CTxDestination& addr : addresses)\n         a.push_back(CBitcoinAddress(addr).ToString());\n     out.push_back(Pair(\"addresses\", a));\n }\n@@ -341,7 +341,7 @@ UniValue verifytxoutproof(const JSONRPCRequest& request)\n     if (!mapBlockIndex.count(merkleBlock.header.GetHash()) || !chainActive.Contains(mapBlockIndex[merkleBlock.header.GetHash()]))\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found in chain\");\n \n-    BOOST_FOREACH(const uint256& hash, vMatch)\n+    for (const uint256& hash : vMatch)\n         res.push_back(hash.GetHex());\n     return res;\n }\n@@ -432,7 +432,7 @@ UniValue createrawtransaction(const JSONRPCRequest& request)\n \n     set<CBitcoinAddress> setAddress;\n     vector<string> addrList = sendTo.getKeys();\n-    BOOST_FOREACH(const string& name_, addrList) {\n+    for (const string& name_ : addrList) {\n \n         if (name_ == \"data\") {\n             std::vector<unsigned char> data = ParseHexV(sendTo[name_].getValStr(),\"Data\");\n@@ -687,7 +687,7 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n         CCoinsViewMemPool viewMempool(&viewChain, mempool);\n         view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n \n-        BOOST_FOREACH(const CTxIn& txin, mergedTx.vin) {\n+        for (const CTxIn& txin : mergedTx.vin) {\n             const uint256& prevHash = txin.prevout.hash;\n             CCoins coins;\n             view.AccessCoins(prevHash); // this is certainly allowed to fail\n@@ -830,7 +830,7 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n             ProduceSignature(MutableTransactionSignatureCreator(&keystore, &mergedTx, i, amount, nHashType), prevPubKey, sigdata);\n \n         // ... and merge in other signatures:\n-        BOOST_FOREACH(const CMutableTransaction& txv, txVariants) {\n+        for (const CMutableTransaction& txv : txVariants) {\n             sigdata = CombineSignatures(prevPubKey, TransactionSignatureChecker(&txConst, i, amount), sigdata, DataFromTransaction(txv, i));\n         }\n "
      },
      {
        "sha": "42f83dfd45e578e0986d2adb0c9d2ac14d886e85",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27b75410f017ff7b2a021e9527d7f9d3fed100ed/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27b75410f017ff7b2a021e9527d7f9d3fed100ed/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=27b75410f017ff7b2a021e9527d7f9d3fed100ed",
        "patch": "@@ -17,7 +17,6 @@\n \n #include <boost/bind.hpp>\n #include <boost/filesystem.hpp>\n-#include <boost/foreach.hpp>\n #include <boost/iostreams/concepts.hpp>\n #include <boost/iostreams/stream.hpp>\n #include <boost/shared_ptr.hpp>\n@@ -72,7 +71,7 @@ void RPCTypeCheck(const UniValue& params,\n                   bool fAllowNull)\n {\n     unsigned int i = 0;\n-    BOOST_FOREACH(UniValue::VType t, typesExpected)\n+    for (UniValue::VType t : typesExpected)\n     {\n         if (params.size() <= i)\n             break;\n@@ -107,7 +106,7 @@ void RPCTypeCheckObj(const UniValue& o,\n \n     if (fStrict)\n     {\n-        BOOST_FOREACH(const string& k, o.getKeys())\n+        for (const string& k : o.getKeys())\n         {\n             if (typesExpected.count(k) == 0)\n             {\n@@ -186,7 +185,7 @@ std::string CRPCTable::help(const std::string& strCommand) const\n         vCommands.push_back(make_pair(mi->second->category + mi->first, mi->second));\n     sort(vCommands.begin(), vCommands.end());\n \n-    BOOST_FOREACH(const PAIRTYPE(string, const CRPCCommand*)& command, vCommands)\n+    for (const PAIRTYPE(string, const CRPCCommand*)& command : vCommands)\n     {\n         const CRPCCommand *pcmd = command.second;\n         string strMethod = pcmd->name;"
      }
    ]
  },
  {
    "sha": "bf59fbc82eec56d69b79adc413fa413dac987748",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZjU5ZmJjODJlZWM1NmQ2OWI3OWFkYzQxM2ZhNDEzZGFjOTg3NzQ4",
    "commit": {
      "author": {
        "name": "Kalle Alm",
        "email": "kalle.alm@gmail.com",
        "date": "2017-01-05T13:47:52Z"
      },
      "committer": {
        "name": "Kalle Alm",
        "email": "kalle.alm@gmail.com",
        "date": "2017-01-05T13:47:52Z"
      },
      "message": "Trivial refactor: replace all BOOST_FOREACH (bench/ & test/).",
      "tree": {
        "sha": "0a55c6eff73dcd29b5c2567a4dcf263be6da84b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0a55c6eff73dcd29b5c2567a4dcf263be6da84b6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf59fbc82eec56d69b79adc413fa413dac987748",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf59fbc82eec56d69b79adc413fa413dac987748",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bf59fbc82eec56d69b79adc413fa413dac987748",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf59fbc82eec56d69b79adc413fa413dac987748/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "27b75410f017ff7b2a021e9527d7f9d3fed100ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27b75410f017ff7b2a021e9527d7f9d3fed100ed",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/27b75410f017ff7b2a021e9527d7f9d3fed100ed"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 13,
      "deletions": 20
    },
    "files": [
      {
        "sha": "37b6c0b69d67817aa3bd233824545eda0f8d0091",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf59fbc82eec56d69b79adc413fa413dac987748/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf59fbc82eec56d69b79adc413fa413dac987748/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=bf59fbc82eec56d69b79adc413fa413dac987748",
        "patch": "@@ -5,7 +5,6 @@\n #include \"bench.h\"\n #include \"wallet/wallet.h\"\n \n-#include <boost/foreach.hpp>\n #include <set>\n \n static void addCoin(const CAmount& nValue, const CWallet& wallet, std::vector<COutput>& vCoins)\n@@ -39,7 +38,7 @@ static void CoinSelection(benchmark::State& state)\n \n     while (state.KeepRunning()) {\n         // Empty wallet.\n-        BOOST_FOREACH (COutput output, vCoins)\n+        for (COutput output : vCoins)\n             delete output.tx;\n         vCoins.clear();\n "
      },
      {
        "sha": "f8527041797a6cbb3d0b57f65b826c359bcd4ca9",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf59fbc82eec56d69b79adc413fa413dac987748/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf59fbc82eec56d69b79adc413fa413dac987748/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=bf59fbc82eec56d69b79adc413fa413dac987748",
        "patch": "@@ -20,7 +20,6 @@\n \n #include <boost/assign/list_of.hpp> // for 'map_list_of()'\n #include <boost/date_time/posix_time/posix_time_types.hpp>\n-#include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n // Tests this internal-to-main.cpp method:"
      },
      {
        "sha": "b33cdb9fe6bf72d34b2eb13a979f3a2981806aa9",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf59fbc82eec56d69b79adc413fa413dac987748/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf59fbc82eec56d69b79adc413fa413dac987748/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=bf59fbc82eec56d69b79adc413fa413dac987748",
        "patch": "@@ -15,7 +15,6 @@\n #include \"utilstrencodings.h\"\n #include \"test/test_bitcoin.h\"\n \n-#include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n #include <univalue.h>"
      },
      {
        "sha": "7c772bff2fd8b1c25f1a209d7043aa20a5e63e8b",
        "filename": "src/test/bip32_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf59fbc82eec56d69b79adc413fa413dac987748/src/test/bip32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf59fbc82eec56d69b79adc413fa413dac987748/src/test/bip32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bip32_tests.cpp?ref=bf59fbc82eec56d69b79adc413fa413dac987748",
        "patch": "@@ -84,7 +84,7 @@ void RunTest(const TestVector &test) {\n     CExtPubKey pubkey;\n     key.SetMaster(&seed[0], seed.size());\n     pubkey = key.Neuter();\n-    BOOST_FOREACH(const TestDerivation &derive, test.vDerive) {\n+    for (const TestDerivation& derive : test.vDerive) {\n         unsigned char data[74];\n         key.Encode(data);\n         pubkey.Encode(data);"
      },
      {
        "sha": "408585c34e64985836ba3c56be33300d62127adb",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf59fbc82eec56d69b79adc413fa413dac987748/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf59fbc82eec56d69b79adc413fa413dac987748/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=bf59fbc82eec56d69b79adc413fa413dac987748",
        "patch": "@@ -165,7 +165,7 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n                     missed_an_entry = true;\n                 }\n             }\n-            BOOST_FOREACH(const CCoinsViewCacheTest *test, stack) {\n+            for (const CCoinsViewCacheTest *test : stack) {\n                 test->SelfTest();\n             }\n         }"
      },
      {
        "sha": "c79675f5a6dd1a3b848187fcd1744f4980b45218",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf59fbc82eec56d69b79adc413fa413dac987748/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf59fbc82eec56d69b79adc413fa413dac987748/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=bf59fbc82eec56d69b79adc413fa413dac987748",
        "patch": "@@ -9,7 +9,6 @@\n #include <vector>\n \n #include <boost/algorithm/string.hpp>\n-#include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n BOOST_FIXTURE_TEST_SUITE(getarg_tests, BasicTestingSetup)\n@@ -25,7 +24,7 @@ static void ResetArgs(const std::string& strArg)\n \n     // Convert to char*:\n     std::vector<const char*> vecChar;\n-    BOOST_FOREACH(std::string& s, vecArg)\n+    for (std::string& s : vecArg)\n         vecChar.push_back(s.c_str());\n \n     ParseParameters(vecChar.size(), &vecChar[0]);"
      },
      {
        "sha": "c686f679c28c1ed381be87207f11e72c7f639217",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf59fbc82eec56d69b79adc413fa413dac987748/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf59fbc82eec56d69b79adc413fa413dac987748/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=bf59fbc82eec56d69b79adc413fa413dac987748",
        "patch": "@@ -14,7 +14,6 @@\n #include \"test/test_bitcoin.h\"\n \n \n-#include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n typedef std::vector<unsigned char> valtype;\n@@ -28,7 +27,7 @@ sign_multisig(CScript scriptPubKey, std::vector<CKey> keys, CTransaction transac\n \n     CScript result;\n     result << OP_0; // CHECKMULTISIG bug workaround\n-    BOOST_FOREACH(const CKey &key, keys)\n+    for (const CKey &key : keys)\n     {\n         std::vector<unsigned char> vchSig;\n         BOOST_CHECK(key.Sign(hash, vchSig));"
      },
      {
        "sha": "2f0f66e8115c61bcd04f957e6dc8783874cb2caa",
        "filename": "src/test/prevector_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf59fbc82eec56d69b79adc413fa413dac987748/src/test/prevector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf59fbc82eec56d69b79adc413fa413dac987748/src/test/prevector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/prevector_tests.cpp?ref=bf59fbc82eec56d69b79adc413fa413dac987748",
        "patch": "@@ -12,6 +12,7 @@\n #include \"test/test_random.h\"\n \n #include <boost/test/unit_test.hpp>\n+#include <boost/foreach.hpp>\n \n BOOST_FIXTURE_TEST_SUITE(PrevectorTests, TestingSetup)\n \n@@ -53,13 +54,13 @@ class prevector_tester {\n         local_check(pretype(real_vector.begin(), real_vector.end()) == pre_vector);\n         local_check(pretype(pre_vector.begin(), pre_vector.end()) == pre_vector);\n         size_t pos = 0;\n-        BOOST_FOREACH(const T& v, pre_vector) {\n+        for (const T& v : pre_vector) {\n              local_check(v == real_vector[pos++]);\n         }\n         BOOST_REVERSE_FOREACH(const T& v, pre_vector) {\n              local_check(v == real_vector[--pos]);\n         }\n-        BOOST_FOREACH(const T& v, const_pre_vector) {\n+        for (const T& v : const_pre_vector) {\n              local_check(v == real_vector[pos++]);\n         }\n         BOOST_REVERSE_FOREACH(const T& v, const_pre_vector) {"
      },
      {
        "sha": "73df9c9e8306a160ed4434b1a5c0a658c676c6b9",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf59fbc82eec56d69b79adc413fa413dac987748/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf59fbc82eec56d69b79adc413fa413dac987748/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=bf59fbc82eec56d69b79adc413fa413dac987748",
        "patch": "@@ -24,7 +24,6 @@\n #include <string>\n #include <vector>\n \n-#include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n #include <univalue.h>\n@@ -932,7 +931,7 @@ BOOST_AUTO_TEST_CASE(script_build)\n \n     std::string strGen;\n \n-    BOOST_FOREACH(TestBuilder& test, tests) {\n+    for (TestBuilder& test : tests) {\n         test.Test();\n         std::string str = JSONPrettyPrint(test.GetJSON());\n #ifndef UPDATE_JSON_TESTS\n@@ -1038,7 +1037,7 @@ sign_multisig(CScript scriptPubKey, std::vector<CKey> keys, CTransaction transac\n     // and vice-versa)\n     //\n     result << OP_0;\n-    BOOST_FOREACH(const CKey &key, keys)\n+    for (const CKey &key : keys)\n     {\n         std::vector<unsigned char> vchSig;\n         BOOST_CHECK(key.Sign(hash, vchSig));"
      },
      {
        "sha": "0384d12dab8cdeadf654b382775c317d76431ec0",
        "filename": "src/test/sigopcount_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf59fbc82eec56d69b79adc413fa413dac987748/src/test/sigopcount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf59fbc82eec56d69b79adc413fa413dac987748/src/test/sigopcount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sigopcount_tests.cpp?ref=bf59fbc82eec56d69b79adc413fa413dac987748",
        "patch": "@@ -12,7 +12,6 @@\n \n #include <vector>\n \n-#include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n // Helpers:"
      },
      {
        "sha": "1458e8805661e1ffe19f400156601f78f4670694",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf59fbc82eec56d69b79adc413fa413dac987748/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf59fbc82eec56d69b79adc413fa413dac987748/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=bf59fbc82eec56d69b79adc413fa413dac987748",
        "patch": "@@ -121,7 +121,7 @@ TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>&\n \n     // Replace mempool-selected txns with just coinbase plus passed-in txns:\n     block.vtx.resize(1);\n-    BOOST_FOREACH(const CMutableTransaction& tx, txns)\n+    for (const CMutableTransaction& tx : txns)\n         block.vtx.push_back(MakeTransactionRef(tx));\n     // IncrementExtraNonce creates a valid coinbase and merkleRoot\n     unsigned int extraNonce = 0;"
      },
      {
        "sha": "c1577fdbfc68e9b89c5be1519e0c0af30ef7fd98",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf59fbc82eec56d69b79adc413fa413dac987748/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf59fbc82eec56d69b79adc413fa413dac987748/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=bf59fbc82eec56d69b79adc413fa413dac987748",
        "patch": "@@ -28,7 +28,6 @@\n #include <boost/assign/list_of.hpp>\n #include <boost/test/unit_test.hpp>\n #include <boost/assign/list_of.hpp>\n-#include <boost/foreach.hpp>\n \n #include <univalue.h>\n \n@@ -65,7 +64,7 @@ unsigned int ParseScriptFlags(std::string strFlags)\n     std::vector<std::string> words;\n     boost::algorithm::split(words, strFlags, boost::algorithm::is_any_of(\",\"));\n \n-    BOOST_FOREACH(std::string word, words)\n+    for (std::string word : words)\n     {\n         if (!mapFlagNames.count(word))\n             BOOST_ERROR(\"Bad test: unknown verification flag '\" << word << \"'\");\n@@ -391,7 +390,7 @@ void CheckWithFlag(const CTransactionRef& output, const CMutableTransaction& inp\n static CScript PushAll(const std::vector<valtype>& values)\n {\n     CScript result;\n-    BOOST_FOREACH(const valtype& v, values) {\n+    for (const valtype& v : values) {\n         if (v.size() == 0) {\n             result << OP_0;\n         } else if (v.size() == 1 && v[0] >= 1 && v[0] <= 16) {"
      }
    ]
  },
  {
    "sha": "23c98201879ea7d051f199904bc3c0ce9050d393",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyM2M5ODIwMTg3OWVhN2QwNTFmMTk5OTA0YmMzYzBjZTkwNTBkMzkz",
    "commit": {
      "author": {
        "name": "Kalle Alm",
        "email": "kalle.alm@gmail.com",
        "date": "2017-01-05T13:48:08Z"
      },
      "committer": {
        "name": "Kalle Alm",
        "email": "kalle.alm@gmail.com",
        "date": "2017-01-05T13:48:08Z"
      },
      "message": "Trivial refactor: replace all BOOST_FOREACH (wallet/).",
      "tree": {
        "sha": "e57446656a32bf267c47a66e9496a62a4b65f002",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e57446656a32bf267c47a66e9496a62a4b65f002"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/23c98201879ea7d051f199904bc3c0ce9050d393",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23c98201879ea7d051f199904bc3c0ce9050d393",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/23c98201879ea7d051f199904bc3c0ce9050d393",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23c98201879ea7d051f199904bc3c0ce9050d393/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bf59fbc82eec56d69b79adc413fa413dac987748",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf59fbc82eec56d69b79adc413fa413dac987748",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bf59fbc82eec56d69b79adc413fa413dac987748"
      }
    ],
    "stats": {
      "total": 183,
      "additions": 89,
      "deletions": 94
    },
    "files": [
      {
        "sha": "33be47273fc8a7215b61a2c1bce703eba3050ef5",
        "filename": "src/wallet/crypter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23c98201879ea7d051f199904bc3c0ce9050d393/src/wallet/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23c98201879ea7d051f199904bc3c0ce9050d393/src/wallet/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.cpp?ref=23c98201879ea7d051f199904bc3c0ce9050d393",
        "patch": "@@ -12,7 +12,6 @@\n \n #include <string>\n #include <vector>\n-#include <boost/foreach.hpp>\n \n int CCrypter::BytesToKeySHA512AES(const std::vector<unsigned char>& chSalt, const SecureString& strKeyData, int count, unsigned char *key,unsigned char *iv) const\n {\n@@ -285,7 +284,7 @@ bool CCryptoKeyStore::EncryptKeys(CKeyingMaterial& vMasterKeyIn)\n             return false;\n \n         fUseCrypto = true;\n-        BOOST_FOREACH(KeyMap::value_type& mKey, mapKeys)\n+        for (KeyMap::value_type& mKey : mapKeys)\n         {\n             const CKey &key = mKey.second;\n             CPubKey vchPubKey = key.GetPubKey();"
      },
      {
        "sha": "f629d05c00092a15094805b15ee2432b1131977d",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23c98201879ea7d051f199904bc3c0ce9050d393/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23c98201879ea7d051f199904bc3c0ce9050d393/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=23c98201879ea7d051f199904bc3c0ce9050d393",
        "patch": "@@ -25,7 +25,6 @@\n #include <univalue.h>\n \n #include <boost/assign/list_of.hpp>\n-#include <boost/foreach.hpp>\n \n using namespace std;\n \n@@ -51,7 +50,7 @@ int64_t static DecodeDumpTime(const std::string &str) {\n \n std::string static EncodeDumpString(const std::string &str) {\n     std::stringstream ret;\n-    BOOST_FOREACH(unsigned char c, str) {\n+    for (unsigned char c : str) {\n         if (c <= 32 || c >= 128 || c == '%') {\n             ret << '%' << HexStr(&c, &c + 1);\n         } else {\n@@ -1027,7 +1026,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     UniValue response(UniValue::VARR);\n \n-    BOOST_FOREACH (const UniValue& data, requests.getValues()) {\n+    for (const UniValue& data : requests.getValues()) {\n         const UniValue result = processImport(data);\n         response.push_back(result);\n "
      },
      {
        "sha": "904769c8f8bd9aba9fcd44afee409e2ae32233e2",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 23,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23c98201879ea7d051f199904bc3c0ce9050d393/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23c98201879ea7d051f199904bc3c0ce9050d393/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=23c98201879ea7d051f199904bc3c0ce9050d393",
        "patch": "@@ -72,7 +72,7 @@ void WalletTxToJSON(const CWalletTx& wtx, UniValue& entry)\n     uint256 hash = wtx.GetHash();\n     entry.push_back(Pair(\"txid\", hash.GetHex()));\n     UniValue conflicts(UniValue::VARR);\n-    BOOST_FOREACH(const uint256& conflict, wtx.GetConflicts())\n+    for (const uint256& conflict : wtx.GetConflicts())\n         conflicts.push_back(conflict.GetHex());\n     entry.push_back(Pair(\"walletconflicts\", conflicts));\n     entry.push_back(Pair(\"time\", wtx.GetTxTime()));\n@@ -90,7 +90,7 @@ void WalletTxToJSON(const CWalletTx& wtx, UniValue& entry)\n     }\n     entry.push_back(Pair(\"bip125-replaceable\", rbfStatus));\n \n-    BOOST_FOREACH(const PAIRTYPE(string,string)& item, wtx.mapValue)\n+    for (const PAIRTYPE(string, string)& item : wtx.mapValue)\n         entry.push_back(Pair(item.first, item.second));\n }\n \n@@ -326,7 +326,7 @@ UniValue getaddressesbyaccount(const JSONRPCRequest& request)\n \n     // Find all addresses that have the given account\n     UniValue ret(UniValue::VARR);\n-    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item, pwalletMain->mapAddressBook)\n+    for (const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item : pwalletMain->mapAddressBook)\n     {\n         const CBitcoinAddress& address = item.first;\n         const string& strName = item.second.name;\n@@ -463,10 +463,10 @@ UniValue listaddressgroupings(const JSONRPCRequest& request)\n \n     UniValue jsonGroupings(UniValue::VARR);\n     map<CTxDestination, CAmount> balances = pwalletMain->GetAddressBalances();\n-    BOOST_FOREACH(set<CTxDestination> grouping, pwalletMain->GetAddressGroupings())\n+    for (set<CTxDestination> grouping : pwalletMain->GetAddressGroupings())\n     {\n         UniValue jsonGrouping(UniValue::VARR);\n-        BOOST_FOREACH(CTxDestination address, grouping)\n+        for (CTxDestination address : grouping)\n         {\n             UniValue addressInfo(UniValue::VARR);\n             addressInfo.push_back(CBitcoinAddress(address).ToString());\n@@ -586,7 +586,7 @@ UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n         if (wtx.IsCoinBase() || !CheckFinalTx(*wtx.tx))\n             continue;\n \n-        BOOST_FOREACH(const CTxOut& txout, wtx.tx->vout)\n+        for (const CTxOut& txout : wtx.tx->vout)\n             if (txout.scriptPubKey == scriptPubKey)\n                 if (wtx.GetDepthInMainChain() >= nMinDepth)\n                     nAmount += txout.nValue;\n@@ -640,7 +640,7 @@ UniValue getreceivedbyaccount(const JSONRPCRequest& request)\n         if (wtx.IsCoinBase() || !CheckFinalTx(*wtx.tx))\n             continue;\n \n-        BOOST_FOREACH(const CTxOut& txout, wtx.tx->vout)\n+        for (const CTxOut& txout : wtx.tx->vout)\n         {\n             CTxDestination address;\n             if (ExtractDestination(txout.scriptPubKey, address) && IsMine(*pwalletMain, address) && setAddress.count(address))\n@@ -711,10 +711,10 @@ UniValue getbalance(const JSONRPCRequest& request)\n             wtx.GetAmounts(listReceived, listSent, allFee, strSentAccount, filter);\n             if (wtx.GetDepthInMainChain() >= nMinDepth)\n             {\n-                BOOST_FOREACH(const COutputEntry& r, listReceived)\n+                for (const COutputEntry& r : listReceived)\n                     nBalance += r.amount;\n             }\n-            BOOST_FOREACH(const COutputEntry& s, listSent)\n+            for (const COutputEntry& s : listSent)\n                 nBalance -= s.amount;\n             nBalance -= allFee;\n         }\n@@ -921,7 +921,7 @@ UniValue sendmany(const JSONRPCRequest& request)\n \n     CAmount totalAmount = 0;\n     vector<string> keys = sendTo.getKeys();\n-    BOOST_FOREACH(const string& name_, keys)\n+    for (const string& name_ : keys)\n     {\n         CBitcoinAddress address(name_);\n         if (!address.IsValid())\n@@ -1156,7 +1156,7 @@ UniValue ListReceived(const UniValue& params, bool fByAccounts)\n         if (nDepth < nMinDepth)\n             continue;\n \n-        BOOST_FOREACH(const CTxOut& txout, wtx.tx->vout)\n+        for (const CTxOut& txout : wtx.tx->vout)\n         {\n             CTxDestination address;\n             if (!ExtractDestination(txout.scriptPubKey, address))\n@@ -1178,7 +1178,7 @@ UniValue ListReceived(const UniValue& params, bool fByAccounts)\n     // Reply\n     UniValue ret(UniValue::VARR);\n     map<string, tallyitem> mapAccountTally;\n-    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item, pwalletMain->mapAddressBook)\n+    for (const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item : pwalletMain->mapAddressBook)\n     {\n         const CBitcoinAddress& address = item.first;\n         const string& strAccount = item.second.name;\n@@ -1217,7 +1217,7 @@ UniValue ListReceived(const UniValue& params, bool fByAccounts)\n             UniValue transactions(UniValue::VARR);\n             if (it != mapTally.end())\n             {\n-                BOOST_FOREACH(const uint256& _item, (*it).second.txids)\n+                for (const uint256& _item : (*it).second.txids)\n                 {\n                     transactions.push_back(_item.GetHex());\n                 }\n@@ -1343,7 +1343,7 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n     // Sent\n     if ((!listSent.empty() || nFee != 0) && (fAllAccounts || strAccount == strSentAccount))\n     {\n-        BOOST_FOREACH(const COutputEntry& s, listSent)\n+        for (const COutputEntry& s : listSent)\n         {\n             UniValue entry(UniValue::VOBJ);\n             if(involvesWatchonly || (::IsMine(*pwalletMain, s.destination) & ISMINE_WATCH_ONLY))\n@@ -1366,7 +1366,7 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n     // Received\n     if (listReceived.size() > 0 && wtx.GetDepthInMainChain() >= nMinDepth)\n     {\n-        BOOST_FOREACH(const COutputEntry& r, listReceived)\n+        for (const COutputEntry& r : listReceived)\n         {\n             string account;\n             if (pwalletMain->mapAddressBook.count(r.destination))\n@@ -1586,7 +1586,7 @@ UniValue listaccounts(const JSONRPCRequest& request)\n             includeWatchonly = includeWatchonly | ISMINE_WATCH_ONLY;\n \n     map<string, CAmount> mapAccountBalances;\n-    BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& entry, pwalletMain->mapAddressBook) {\n+    for (const PAIRTYPE(CTxDestination, CAddressBookData)& entry : pwalletMain->mapAddressBook) {\n         if (IsMine(*pwalletMain, entry.first) & includeWatchonly) // This address belongs to me\n             mapAccountBalances[entry.second.name] = 0;\n     }\n@@ -1603,11 +1603,11 @@ UniValue listaccounts(const JSONRPCRequest& request)\n             continue;\n         wtx.GetAmounts(listReceived, listSent, nFee, strSentAccount, includeWatchonly);\n         mapAccountBalances[strSentAccount] -= nFee;\n-        BOOST_FOREACH(const COutputEntry& s, listSent)\n+        for (const COutputEntry& s : listSent)\n             mapAccountBalances[strSentAccount] -= s.amount;\n         if (nDepth >= nMinDepth)\n         {\n-            BOOST_FOREACH(const COutputEntry& r, listReceived)\n+            for (const COutputEntry& r : listReceived)\n                 if (pwalletMain->mapAddressBook.count(r.destination))\n                     mapAccountBalances[pwalletMain->mapAddressBook[r.destination].name] += r.amount;\n                 else\n@@ -1616,11 +1616,11 @@ UniValue listaccounts(const JSONRPCRequest& request)\n     }\n \n     const list<CAccountingEntry> & acentries = pwalletMain->laccentries;\n-    BOOST_FOREACH(const CAccountingEntry& entry, acentries)\n+    for (const CAccountingEntry& entry : acentries)\n         mapAccountBalances[entry.strAccount] += entry.nCreditDebit;\n \n     UniValue ret(UniValue::VOBJ);\n-    BOOST_FOREACH(const PAIRTYPE(string, CAmount)& accountBalance, mapAccountBalances) {\n+    for (const PAIRTYPE(string, CAmount)& accountBalance : mapAccountBalances) {\n         ret.push_back(Pair(accountBalance.first, ValueFromAmount(accountBalance.second)));\n     }\n     return ret;\n@@ -2233,7 +2233,7 @@ UniValue listlockunspent(const JSONRPCRequest& request)\n \n     UniValue ret(UniValue::VARR);\n \n-    BOOST_FOREACH(COutPoint &outpt, vOutpts) {\n+    for (COutPoint &outpt : vOutpts) {\n         UniValue o(UniValue::VOBJ);\n \n         o.push_back(Pair(\"txid\", outpt.hash.GetHex()));\n@@ -2338,7 +2338,7 @@ UniValue resendwallettransactions(const JSONRPCRequest& request)\n \n     std::vector<uint256> txids = pwalletMain->ResendWalletTransactionsBefore(GetTime(), g_connman.get());\n     UniValue result(UniValue::VARR);\n-    BOOST_FOREACH(const uint256& txid, txids)\n+    for (const uint256& txid : txids)\n     {\n         result.push_back(txid.ToString());\n     }\n@@ -2416,7 +2416,7 @@ UniValue listunspent(const JSONRPCRequest& request)\n     assert(pwalletMain != NULL);\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n     pwalletMain->AvailableCoins(vecOutputs, false, NULL, true);\n-    BOOST_FOREACH(const COutput& out, vecOutputs) {\n+    for (const COutput& out : vecOutputs) {\n         if (out.nDepth < nMinDepth || out.nDepth > nMaxDepth)\n             continue;\n "
      },
      {
        "sha": "330878ceb585a793a19cbeed7c0b4192cc97acbd",
        "filename": "src/wallet/test/accounting_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23c98201879ea7d051f199904bc3c0ce9050d393/src/wallet/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23c98201879ea7d051f199904bc3c0ce9050d393/src/wallet/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/accounting_tests.cpp?ref=23c98201879ea7d051f199904bc3c0ce9050d393",
        "patch": "@@ -8,7 +8,6 @@\n \n #include <stdint.h>\n \n-#include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n extern CWallet* pwalletMain;\n@@ -23,7 +22,7 @@ GetResults(std::map<CAmount, CAccountingEntry>& results)\n     results.clear();\n     BOOST_CHECK(pwalletMain->ReorderTransactions() == DB_LOAD_OK);\n     pwalletMain->ListAccountCreditDebit(\"\", aes);\n-    BOOST_FOREACH(CAccountingEntry& ae, aes)\n+    for (CAccountingEntry& ae : aes)\n     {\n         results[ae.nOrderPos] = ae;\n     }"
      },
      {
        "sha": "672ede52fd297f85a96bf56156601e5755a1ebc2",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23c98201879ea7d051f199904bc3c0ce9050d393/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23c98201879ea7d051f199904bc3c0ce9050d393/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=23c98201879ea7d051f199904bc3c0ce9050d393",
        "patch": "@@ -11,7 +11,6 @@\n \n #include \"wallet/test/wallet_test_fixture.h\"\n \n-#include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n // how many times to run all the tests to have a chance to catch errors that only show up with particular random shuffles\n@@ -54,7 +53,7 @@ static void add_coin(const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = fa\n \n static void empty_wallet(void)\n {\n-    BOOST_FOREACH(COutput output, vCoins)\n+    for (COutput output : vCoins)\n         delete output.tx;\n     vCoins.clear();\n }"
      },
      {
        "sha": "010c75e37173760bf606a4c3823376f0a8f459af",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 55,
        "deletions": 55,
        "changes": 110,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23c98201879ea7d051f199904bc3c0ce9050d393/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23c98201879ea7d051f199904bc3c0ce9050d393/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=23c98201879ea7d051f199904bc3c0ce9050d393",
        "patch": "@@ -284,7 +284,7 @@ bool CWallet::Unlock(const SecureString& strWalletPassphrase)\n \n     {\n         LOCK(cs_wallet);\n-        BOOST_FOREACH(const MasterKeyMap::value_type& pMasterKey, mapMasterKeys)\n+        for (const MasterKeyMap::value_type& pMasterKey : mapMasterKeys)\n         {\n             if(!crypter.SetKeyFromPassphrase(strWalletPassphrase, pMasterKey.second.vchSalt, pMasterKey.second.nDeriveIterations, pMasterKey.second.nDerivationMethod))\n                 return false;\n@@ -307,7 +307,7 @@ bool CWallet::ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase,\n \n         CCrypter crypter;\n         CKeyingMaterial vMasterKey;\n-        BOOST_FOREACH(MasterKeyMap::value_type& pMasterKey, mapMasterKeys)\n+        for (MasterKeyMap::value_type& pMasterKey : mapMasterKeys)\n         {\n             if(!crypter.SetKeyFromPassphrase(strOldWalletPassphrase, pMasterKey.second.vchSalt, pMasterKey.second.nDeriveIterations, pMasterKey.second.nDerivationMethod))\n                 return false;\n@@ -400,7 +400,7 @@ set<uint256> CWallet::GetConflicts(const uint256& txid) const\n \n     std::pair<TxSpends::const_iterator, TxSpends::const_iterator> range;\n \n-    BOOST_FOREACH(const CTxIn& txin, wtx.tx->vin)\n+    for (const CTxIn& txin : wtx.tx->vin)\n     {\n         if (mapTxSpends.count(txin.prevout) <= 1)\n             continue;  // No conflict if zero or one spends\n@@ -552,7 +552,7 @@ void CWallet::AddToSpends(const uint256& wtxid)\n     if (thisTx.IsCoinBase()) // Coinbases don't spend anything!\n         return;\n \n-    BOOST_FOREACH(const CTxIn& txin, thisTx.tx->vin)\n+    for (const CTxIn& txin : thisTx.tx->vin)\n         AddToSpends(txin.prevout, wtxid);\n }\n \n@@ -676,7 +676,7 @@ DBErrors CWallet::ReorderTransactions()\n     }\n     list<CAccountingEntry> acentries;\n     walletdb.ListAccountCreditDebit(\"\", acentries);\n-    BOOST_FOREACH(CAccountingEntry& entry, acentries)\n+    for (CAccountingEntry& entry : acentries)\n     {\n         txByTime.insert(make_pair(entry.nTime, TxPair((CWalletTx*)0, &entry)));\n     }\n@@ -706,7 +706,7 @@ DBErrors CWallet::ReorderTransactions()\n         else\n         {\n             int64_t nOrderPosOff = 0;\n-            BOOST_FOREACH(const int64_t& nOffsetStart, nOrderPosOffsets)\n+            for (const int64_t& nOffsetStart : nOrderPosOffsets)\n             {\n                 if (nOrderPos >= nOffsetStart)\n                     ++nOrderPosOff;\n@@ -795,7 +795,7 @@ bool CWallet::GetAccountPubkey(CPubKey &pubKey, std::string strAccount, bool bFo\n             for (map<uint256, CWalletTx>::iterator it = mapWallet.begin();\n                  it != mapWallet.end() && account.vchPubKey.IsValid();\n                  ++it)\n-                BOOST_FOREACH(const CTxOut& txout, (*it).second.tx->vout)\n+                for (const CTxOut& txout : (*it).second.tx->vout)\n                     if (txout.scriptPubKey == scriptPubKey) {\n                         bForceNew = true;\n                         break;\n@@ -821,7 +821,7 @@ void CWallet::MarkDirty()\n {\n     {\n         LOCK(cs_wallet);\n-        BOOST_FOREACH(PAIRTYPE(const uint256, CWalletTx)& item, mapWallet)\n+        for (PAIRTYPE(const uint256, CWalletTx)& item : mapWallet)\n             item.second.MarkDirty();\n     }\n }\n@@ -954,7 +954,7 @@ bool CWallet::LoadToWallet(const CWalletTx& wtxIn)\n     wtx.BindWallet(this);\n     wtxOrdered.insert(make_pair(wtx.nOrderPos, TxPair(&wtx, (CAccountingEntry*)0)));\n     AddToSpends(hash);\n-    BOOST_FOREACH(const CTxIn& txin, wtx.tx->vin) {\n+    for (const CTxIn& txin : wtx.tx->vin) {\n         if (mapWallet.count(txin.prevout.hash)) {\n             CWalletTx& prevtx = mapWallet[txin.prevout.hash];\n             if (prevtx.nIndex == -1 && !prevtx.hashUnset()) {\n@@ -977,7 +977,7 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlockIndex\n         AssertLockHeld(cs_wallet);\n \n         if (posInBlock != -1) {\n-            BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+            for (const CTxIn& txin : tx.vin) {\n                 std::pair<TxSpends::const_iterator, TxSpends::const_iterator> range = mapTxSpends.equal_range(txin.prevout);\n                 while (range.first != range.second) {\n                     if (range.first->second != tx.GetHash()) {\n@@ -1051,7 +1051,7 @@ bool CWallet::AbandonTransaction(const uint256& hashTx)\n             }\n             // If a transaction changes 'conflicted' state, that changes the balance\n             // available of the outputs it spends. So force those to be recomputed\n-            BOOST_FOREACH(const CTxIn& txin, wtx.tx->vin)\n+            for (const CTxIn& txin : wtx.tx->vin)\n             {\n                 if (mapWallet.count(txin.prevout.hash))\n                     mapWallet[txin.prevout.hash].MarkDirty();\n@@ -1112,7 +1112,7 @@ void CWallet::MarkConflicted(const uint256& hashBlock, const uint256& hashTx)\n             }\n             // If a transaction changes 'conflicted' state, that changes the balance\n             // available of the outputs it spends. So force those to be recomputed\n-            BOOST_FOREACH(const CTxIn& txin, wtx.tx->vin)\n+            for (const CTxIn& txin : wtx.tx->vin)\n             {\n                 if (mapWallet.count(txin.prevout.hash))\n                     mapWallet[txin.prevout.hash].MarkDirty();\n@@ -1131,7 +1131,7 @@ void CWallet::SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex,\n     // If a transaction changes 'conflicted' state, that changes the balance\n     // available of the outputs it spends. So force those to be\n     // recomputed, also:\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    for (const CTxIn& txin : tx.vin)\n     {\n         if (mapWallet.count(txin.prevout.hash))\n             mapWallet[txin.prevout.hash].MarkDirty();\n@@ -1213,7 +1213,7 @@ CAmount CWallet::GetChange(const CTxOut& txout) const\n \n bool CWallet::IsMine(const CTransaction& tx) const\n {\n-    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+    for (const CTxOut& txout : tx.vout)\n         if (IsMine(txout))\n             return true;\n     return false;\n@@ -1227,7 +1227,7 @@ bool CWallet::IsFromMe(const CTransaction& tx) const\n CAmount CWallet::GetDebit(const CTransaction& tx, const isminefilter& filter) const\n {\n     CAmount nDebit = 0;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    for (const CTxIn& txin : tx.vin)\n     {\n         nDebit += GetDebit(txin, filter);\n         if (!MoneyRange(nDebit))\n@@ -1239,7 +1239,7 @@ CAmount CWallet::GetDebit(const CTransaction& tx, const isminefilter& filter) co\n CAmount CWallet::GetCredit(const CTransaction& tx, const isminefilter& filter) const\n {\n     CAmount nCredit = 0;\n-    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+    for (const CTxOut& txout : tx.vout)\n     {\n         nCredit += GetCredit(txout, filter);\n         if (!MoneyRange(nCredit))\n@@ -1251,7 +1251,7 @@ CAmount CWallet::GetCredit(const CTransaction& tx, const isminefilter& filter) c\n CAmount CWallet::GetChange(const CTransaction& tx) const\n {\n     CAmount nChange = 0;\n-    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+    for (const CTxOut& txout : tx.vout)\n     {\n         nChange += GetChange(txout);\n         if (!MoneyRange(nChange))\n@@ -1436,13 +1436,13 @@ void CWalletTx::GetAccountAmounts(const string& strAccount, CAmount& nReceived,\n \n     if (strAccount == strSentAccount)\n     {\n-        BOOST_FOREACH(const COutputEntry& s, listSent)\n+        for (const COutputEntry& s : listSent)\n             nSent += s.amount;\n         nFee = allFee;\n     }\n     {\n         LOCK(pwallet->cs_wallet);\n-        BOOST_FOREACH(const COutputEntry& r, listReceived)\n+        for (const COutputEntry& r : listReceived)\n         {\n             if (pwallet->mapAddressBook.count(r.destination))\n             {\n@@ -1514,7 +1514,7 @@ void CWallet::ReacceptWalletTransactions()\n     std::map<int64_t, CWalletTx*> mapSorted;\n \n     // Sort pending wallet transactions based on their initial wallet insertion order\n-    BOOST_FOREACH(PAIRTYPE(const uint256, CWalletTx)& item, mapWallet)\n+    for (PAIRTYPE(const uint256, CWalletTx)& item : mapWallet)\n     {\n         const uint256& wtxid = item.first;\n         CWalletTx& wtx = item.second;\n@@ -1528,7 +1528,7 @@ void CWallet::ReacceptWalletTransactions()\n     }\n \n     // Try to add wallet transactions to memory pool\n-    BOOST_FOREACH(PAIRTYPE(const int64_t, CWalletTx*)& item, mapSorted)\n+    for (PAIRTYPE(const int64_t, CWalletTx*)& item : mapSorted)\n     {\n         CWalletTx& wtx = *(item.second);\n \n@@ -1759,7 +1759,7 @@ bool CWalletTx::IsTrusted() const\n         return false;\n \n     // Trusted if all inputs are from us and are in the mempool:\n-    BOOST_FOREACH(const CTxIn& txin, tx->vin)\n+    for (const CTxIn& txin : tx->vin)\n     {\n         // Transactions not sent by us: not trusted\n         const CWalletTx* parent = pwallet->GetWalletTx(txin.prevout.hash);\n@@ -1788,15 +1788,15 @@ std::vector<uint256> CWallet::ResendWalletTransactionsBefore(int64_t nTime, CCon\n     LOCK(cs_wallet);\n     // Sort them in chronological order\n     multimap<unsigned int, CWalletTx*> mapSorted;\n-    BOOST_FOREACH(PAIRTYPE(const uint256, CWalletTx)& item, mapWallet)\n+    for (PAIRTYPE(const uint256, CWalletTx)& item : mapWallet)\n     {\n         CWalletTx& wtx = item.second;\n         // Don't rebroadcast if newer than nTime:\n         if (wtx.nTimeReceived > nTime)\n             continue;\n         mapSorted.insert(make_pair(wtx.nTimeReceived, &wtx));\n     }\n-    BOOST_FOREACH(PAIRTYPE(const unsigned int, CWalletTx*)& item, mapSorted)\n+    for (PAIRTYPE(const unsigned int, CWalletTx*)& item : mapSorted)\n     {\n         CWalletTx& wtx = *item.second;\n         if (wtx.RelayWalletTransaction(connman))\n@@ -2033,7 +2033,7 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n \n     random_shuffle(vCoins.begin(), vCoins.end(), GetRandInt);\n \n-    BOOST_FOREACH(const COutput &output, vCoins)\n+    for (const COutput &output : vCoins)\n     {\n         if (!output.fSpendable)\n             continue;\n@@ -2130,7 +2130,7 @@ bool CWallet::SelectCoins(const vector<COutput>& vAvailableCoins, const CAmount&\n     // coin control -> return all selected outputs (we want all selected to go into the transaction for sure)\n     if (coinControl && coinControl->HasSelected() && !coinControl->fAllowOtherInputs)\n     {\n-        BOOST_FOREACH(const COutput& out, vCoins)\n+        for (const COutput& out : vCoins)\n         {\n             if (!out.fSpendable)\n                  continue;\n@@ -2147,7 +2147,7 @@ bool CWallet::SelectCoins(const vector<COutput>& vAvailableCoins, const CAmount&\n     std::vector<COutPoint> vPresetInputs;\n     if (coinControl)\n         coinControl->ListSelected(vPresetInputs);\n-    BOOST_FOREACH(const COutPoint& outpoint, vPresetInputs)\n+    for (const COutPoint& outpoint : vPresetInputs)\n     {\n         map<uint256, CWalletTx>::const_iterator it = mapWallet.find(outpoint.hash);\n         if (it != mapWallet.end())\n@@ -2197,7 +2197,7 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, bool ov\n     vector<CRecipient> vecSend;\n \n     // Turn the txout set into a CRecipient vector\n-    BOOST_FOREACH(const CTxOut& txOut, tx.vout)\n+    for (const CTxOut& txOut : tx.vout)\n     {\n         CRecipient recipient = {txOut.scriptPubKey, txOut.nValue, false};\n         vecSend.push_back(recipient);\n@@ -2210,7 +2210,7 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, bool ov\n     coinControl.fOverrideFeeRate = overrideEstimatedFeeRate;\n     coinControl.nFeeRate = specificFeeRate;\n \n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    for (const CTxIn& txin : tx.vin)\n         coinControl.Select(txin.prevout);\n \n     CReserveKey reservekey(this);\n@@ -2222,7 +2222,7 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, bool ov\n         tx.vout.insert(tx.vout.begin() + nChangePosInOut, wtx.tx->vout[nChangePosInOut]);\n \n     // Add new txins (keeping original txin scriptSig/order)\n-    BOOST_FOREACH(const CTxIn& txin, wtx.tx->vin)\n+    for (const CTxIn& txin : wtx.tx->vin)\n     {\n         if (!coinControl.IsSelected(txin.prevout))\n         {\n@@ -2245,7 +2245,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n     CAmount nValue = 0;\n     int nChangePosRequest = nChangePosInOut;\n     unsigned int nSubtractFeeFromAmount = 0;\n-    BOOST_FOREACH (const CRecipient& recipient, vecSend)\n+    for (const CRecipient& recipient : vecSend)\n     {\n         if (nValue < 0 || recipient.nAmount < 0)\n         {\n@@ -2320,7 +2320,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                     nValueToSelect += nFeeRet;\n                 double dPriority = 0;\n                 // vouts to the payees\n-                BOOST_FOREACH (const CRecipient& recipient, vecSend)\n+                for (const CRecipient& recipient : vecSend)\n                 {\n                     CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n \n@@ -2359,7 +2359,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                     strFailReason = _(\"Insufficient funds\");\n                     return false;\n                 }\n-                BOOST_FOREACH(PAIRTYPE(const CWalletTx*, unsigned int) pcoin, setCoins)\n+                for (PAIRTYPE(const CWalletTx*, unsigned int) pcoin : setCoins)\n                 {\n                     CAmount nCredit = pcoin.first->tx->vout[pcoin.second].nValue;\n                     //The coin age after the next block (depth+1) is used instead of the current,\n@@ -2470,14 +2470,14 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                 // to avoid conflicting with other possible uses of nSequence,\n                 // and in the spirit of \"smallest posible change from prior\n                 // behavior.\"\n-                BOOST_FOREACH(const PAIRTYPE(const CWalletTx*,unsigned int)& coin, setCoins)\n+                for (const PAIRTYPE(const CWalletTx*,unsigned int)& coin : setCoins)\n                     txNew.vin.push_back(CTxIn(coin.first->GetHash(),coin.second,CScript(),\n                                               std::numeric_limits<unsigned int>::max() - (fWalletRbf ? 2 : 1)));\n \n                 // Sign\n                 int nIn = 0;\n                 CTransaction txNewConst(txNew);\n-                BOOST_FOREACH(const PAIRTYPE(const CWalletTx*,unsigned int)& coin, setCoins)\n+                for (const PAIRTYPE(const CWalletTx*,unsigned int)& coin : setCoins)\n                 {\n                     bool signSuccess;\n                     const CScript& scriptPubKey = coin.first->tx->vout[coin.second].scriptPubKey;\n@@ -2502,7 +2502,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n \n                 // Remove scriptSigs if we used dummy signatures for fee calculation\n                 if (!sign) {\n-                    BOOST_FOREACH (CTxIn& vin, txNew.vin) {\n+                    for (CTxIn& vin : txNew.vin) {\n                         vin.scriptSig = CScript();\n                         vin.scriptWitness.SetNull();\n                     }\n@@ -2595,7 +2595,7 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey, CCon\n             AddToWallet(wtxNew);\n \n             // Notify that old coins are spent\n-            BOOST_FOREACH(const CTxIn& txin, wtxNew.tx->vin)\n+            for (const CTxIn& txin : wtxNew.tx->vin)\n             {\n                 CWalletTx &coin = mapWallet[txin.prevout.hash];\n                 coin.BindWallet(this);\n@@ -2778,7 +2778,7 @@ bool CWallet::DelAddressBook(const CTxDestination& address)\n         {\n             // Delete destdata tuples associated with address\n             std::string strAddress = CBitcoinAddress(address).ToString();\n-            BOOST_FOREACH(const PAIRTYPE(string, string) &item, mapAddressBook[address].destdata)\n+            for (const PAIRTYPE(string, string)& item : mapAddressBook[address].destdata)\n             {\n                 CWalletDB(strWalletFile).EraseDestData(strAddress, item.first);\n             }\n@@ -2814,7 +2814,7 @@ bool CWallet::NewKeyPool()\n     {\n         LOCK(cs_wallet);\n         CWalletDB walletdb(strWalletFile);\n-        BOOST_FOREACH(int64_t nIndex, setKeyPool)\n+        for (int64_t nIndex : setKeyPool)\n             walletdb.ErasePool(nIndex);\n         setKeyPool.clear();\n \n@@ -2955,7 +2955,7 @@ std::map<CTxDestination, CAmount> CWallet::GetAddressBalances()\n \n     {\n         LOCK(cs_wallet);\n-        BOOST_FOREACH(PAIRTYPE(uint256, CWalletTx) walletEntry, mapWallet)\n+        for (PAIRTYPE(uint256, CWalletTx) walletEntry : mapWallet)\n         {\n             CWalletTx *pcoin = &walletEntry.second;\n \n@@ -2995,15 +2995,15 @@ set< set<CTxDestination> > CWallet::GetAddressGroupings()\n     set< set<CTxDestination> > groupings;\n     set<CTxDestination> grouping;\n \n-    BOOST_FOREACH(PAIRTYPE(uint256, CWalletTx) walletEntry, mapWallet)\n+    for (PAIRTYPE(uint256, CWalletTx) walletEntry : mapWallet)\n     {\n         CWalletTx *pcoin = &walletEntry.second;\n \n         if (pcoin->tx->vin.size() > 0)\n         {\n             bool any_mine = false;\n             // group all input addresses with each other\n-            BOOST_FOREACH(CTxIn txin, pcoin->tx->vin)\n+            for (CTxIn txin : pcoin->tx->vin)\n             {\n                 CTxDestination address;\n                 if(!IsMine(txin)) /* If this input isn't mine, ignore it */\n@@ -3017,7 +3017,7 @@ set< set<CTxDestination> > CWallet::GetAddressGroupings()\n             // group change with input addresses\n             if (any_mine)\n             {\n-               BOOST_FOREACH(CTxOut txout, pcoin->tx->vout)\n+               for (CTxOut txout : pcoin->tx->vout)\n                    if (IsChange(txout))\n                    {\n                        CTxDestination txoutAddr;\n@@ -3048,18 +3048,18 @@ set< set<CTxDestination> > CWallet::GetAddressGroupings()\n \n     set< set<CTxDestination>* > uniqueGroupings; // a set of pointers to groups of addresses\n     map< CTxDestination, set<CTxDestination>* > setmap;  // map addresses to the unique group containing it\n-    BOOST_FOREACH(set<CTxDestination> _grouping, groupings)\n+    for (set<CTxDestination> _grouping : groupings)\n     {\n         // make a set of all the groups hit by this new group\n         set< set<CTxDestination>* > hits;\n         map< CTxDestination, set<CTxDestination>* >::iterator it;\n-        BOOST_FOREACH(CTxDestination address, _grouping)\n+        for (CTxDestination address : _grouping)\n             if ((it = setmap.find(address)) != setmap.end())\n                 hits.insert((*it).second);\n \n         // merge all hit groups into a new single group and delete old groups\n         set<CTxDestination>* merged = new set<CTxDestination>(_grouping);\n-        BOOST_FOREACH(set<CTxDestination>* hit, hits)\n+        for (set<CTxDestination>* hit : hits)\n         {\n             merged->insert(hit->begin(), hit->end());\n             uniqueGroupings.erase(hit);\n@@ -3068,12 +3068,12 @@ set< set<CTxDestination> > CWallet::GetAddressGroupings()\n         uniqueGroupings.insert(merged);\n \n         // update setmap\n-        BOOST_FOREACH(CTxDestination element, *merged)\n+        for (CTxDestination element : *merged)\n             setmap[element] = merged;\n     }\n \n     set< set<CTxDestination> > ret;\n-    BOOST_FOREACH(set<CTxDestination>* uniqueGrouping, uniqueGroupings)\n+    for (set<CTxDestination>* uniqueGrouping : uniqueGroupings)\n     {\n         ret.insert(*uniqueGrouping);\n         delete uniqueGrouping;\n@@ -3117,7 +3117,7 @@ std::set<CTxDestination> CWallet::GetAccountAddresses(const std::string& strAcco\n {\n     LOCK(cs_wallet);\n     set<CTxDestination> result;\n-    BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& item, mapAddressBook)\n+    for (const PAIRTYPE(CTxDestination, CAddressBookData)& item : mapAddressBook)\n     {\n         const CTxDestination& address = item.first;\n         const string& strName = item.second.name;\n@@ -3167,7 +3167,7 @@ void CWallet::GetAllReserveKeys(set<CKeyID>& setAddress) const\n     CWalletDB walletdb(strWalletFile);\n \n     LOCK2(cs_main, cs_wallet);\n-    BOOST_FOREACH(const int64_t& id, setKeyPool)\n+    for (const int64_t& id : setKeyPool)\n     {\n         CKeyPool keypool;\n         if (!walletdb.ReadPool(id, keypool))\n@@ -3253,7 +3253,7 @@ class CAffectedKeysVisitor : public boost::static_visitor<void> {\n         std::vector<CTxDestination> vDest;\n         int nRequired;\n         if (ExtractDestinations(script, type, vDest, nRequired)) {\n-            BOOST_FOREACH(const CTxDestination &dest, vDest)\n+            for (const CTxDestination &dest : vDest)\n                 boost::apply_visitor(*this, dest);\n         }\n     }\n@@ -3286,7 +3286,7 @@ void CWallet::GetKeyBirthTimes(std::map<CKeyID, int64_t> &mapKeyBirth) const {\n     std::map<CKeyID, CBlockIndex*> mapKeyFirstBlock;\n     std::set<CKeyID> setKeys;\n     GetKeys(setKeys);\n-    BOOST_FOREACH(const CKeyID &keyid, setKeys) {\n+    for (const CKeyID &keyid : setKeys) {\n         if (mapKeyBirth.count(keyid) == 0)\n             mapKeyFirstBlock[keyid] = pindexMax;\n     }\n@@ -3305,10 +3305,10 @@ void CWallet::GetKeyBirthTimes(std::map<CKeyID, int64_t> &mapKeyBirth) const {\n         if (blit != mapBlockIndex.end() && chainActive.Contains(blit->second)) {\n             // ... which are already in a block\n             int nHeight = blit->second->nHeight;\n-            BOOST_FOREACH(const CTxOut &txout, wtx.tx->vout) {\n+            for (const CTxOut &txout : wtx.tx->vout) {\n                 // iterate over all their outputs\n                 CAffectedKeysVisitor(*this, vAffected).Process(txout.scriptPubKey);\n-                BOOST_FOREACH(const CKeyID &keyid, vAffected) {\n+                for (const CKeyID &keyid : vAffected) {\n                     // ... and all their affected keys\n                     std::map<CKeyID, CBlockIndex*>::iterator rit = mapKeyFirstBlock.find(keyid);\n                     if (rit != mapKeyFirstBlock.end() && nHeight < rit->second->nHeight)\n@@ -3554,7 +3554,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n         {\n             CWalletDB walletdb(walletFile);\n \n-            BOOST_FOREACH(const CWalletTx& wtxOld, vWtx)\n+            for (const CWalletTx& wtxOld : vWtx)\n             {\n                 uint256 hash = wtxOld.GetHash();\n                 std::map<uint256, CWalletTx>::iterator mi = walletInstance->mapWallet.find(hash);"
      },
      {
        "sha": "40740cfd2a7f446ffbc8b43db6cfd6510d9c2c41",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23c98201879ea7d051f199904bc3c0ce9050d393/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23c98201879ea7d051f199904bc3c0ce9050d393/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=23c98201879ea7d051f199904bc3c0ce9050d393",
        "patch": "@@ -17,7 +17,6 @@\n \n #include <boost/version.hpp>\n #include <boost/filesystem.hpp>\n-#include <boost/foreach.hpp>\n #include <boost/thread.hpp>\n \n using namespace std;\n@@ -202,7 +201,7 @@ CAmount CWalletDB::GetAccountCreditDebit(const string& strAccount)\n     ListAccountCreditDebit(strAccount, entries);\n \n     CAmount nCreditDebit = 0;\n-    BOOST_FOREACH (const CAccountingEntry& entry, entries)\n+    for (const CAccountingEntry& entry : entries)\n         nCreditDebit += entry.nCreditDebit;\n \n     return nCreditDebit;\n@@ -624,7 +623,7 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n     if ((wss.nKeys + wss.nCKeys) != wss.nKeyMeta)\n         pwallet->nTimeFirstKey = 1; // 0 would be considered 'no value'\n \n-    BOOST_FOREACH(uint256 hash, wss.vWalletUpgrade)\n+    for (uint256 hash : wss.vWalletUpgrade)\n         WriteTx(pwallet->mapWallet[hash]);\n \n     // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n@@ -639,7 +638,7 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n \n     pwallet->laccentries.clear();\n     ListAccountCreditDebit(\"*\", pwallet->laccentries);\n-    BOOST_FOREACH(CAccountingEntry& entry, pwallet->laccentries) {\n+    for (CAccountingEntry& entry : pwallet->laccentries) {\n         pwallet->wtxOrdered.insert(make_pair(entry.nOrderPos, CWallet::TxPair((CWalletTx*)0, &entry)));\n     }\n \n@@ -728,7 +727,7 @@ DBErrors CWalletDB::ZapSelectTx(CWallet* pwallet, vector<uint256>& vTxHashIn, ve\n     // erase each matching wallet TX\n     bool delerror = false;\n     vector<uint256>::iterator it = vTxHashIn.begin();\n-    BOOST_FOREACH (uint256 hash, vTxHash) {\n+    for (uint256 hash : vTxHash) {\n         while (it < vTxHashIn.end() && (*it) < hash) {\n             it++;\n         }\n@@ -760,7 +759,7 @@ DBErrors CWalletDB::ZapWalletTx(CWallet* pwallet, vector<CWalletTx>& vWtx)\n         return err;\n \n     // erase each wallet TX\n-    BOOST_FOREACH (uint256& hash, vTxHash) {\n+    for (uint256& hash : vTxHash) {\n         if (!EraseTx(hash))\n             return DB_CORRUPT;\n     }\n@@ -881,7 +880,7 @@ bool CWalletDB::Recover(CDBEnv& dbenv, const std::string& filename, bool fOnlyKe\n     CWalletScanState wss;\n \n     DbTxn* ptxn = dbenv.TxnBegin();\n-    BOOST_FOREACH(CDBEnv::KeyValPair& row, salvagedData)\n+    for (CDBEnv::KeyValPair& row : salvagedData)\n     {\n         if (fOnlyKeys)\n         {"
      }
    ]
  },
  {
    "sha": "5330fa96acc2c066364650b7556c6958f3d271a7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MzMwZmE5NmFjYzJjMDY2MzY0NjUwYjc1NTZjNjk1OGYzZDI3MWE3",
    "commit": {
      "author": {
        "name": "Kalle Alm",
        "email": "kalle.alm@gmail.com",
        "date": "2017-01-05T13:48:24Z"
      },
      "committer": {
        "name": "Kalle Alm",
        "email": "kalle.alm@gmail.com",
        "date": "2017-01-05T13:48:24Z"
      },
      "message": "Trivial refactor: replace all BOOST_FOREACH (script/).",
      "tree": {
        "sha": "35aaa4f01053f39ef9288ca2e9eb22efa88b67a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/35aaa4f01053f39ef9288ca2e9eb22efa88b67a7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5330fa96acc2c066364650b7556c6958f3d271a7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5330fa96acc2c066364650b7556c6958f3d271a7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5330fa96acc2c066364650b7556c6958f3d271a7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5330fa96acc2c066364650b7556c6958f3d271a7/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "23c98201879ea7d051f199904bc3c0ce9050d393",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23c98201879ea7d051f199904bc3c0ce9050d393",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/23c98201879ea7d051f199904bc3c0ce9050d393"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 7,
      "deletions": 13
    },
    "files": [
      {
        "sha": "a542939d040c6ee4c0bfe7fda2fd222b75abe48a",
        "filename": "src/script/ismine.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5330fa96acc2c066364650b7556c6958f3d271a7/src/script/ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5330fa96acc2c066364650b7556c6958f3d271a7/src/script/ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.cpp?ref=5330fa96acc2c066364650b7556c6958f3d271a7",
        "patch": "@@ -11,16 +11,14 @@\n #include \"script/standard.h\"\n #include \"script/sign.h\"\n \n-#include <boost/foreach.hpp>\n-\n using namespace std;\n \n typedef vector<unsigned char> valtype;\n \n unsigned int HaveKeys(const vector<valtype>& pubkeys, const CKeyStore& keystore)\n {\n     unsigned int nResult = 0;\n-    BOOST_FOREACH(const valtype& pubkey, pubkeys)\n+    for (const valtype& pubkey : pubkeys)\n     {\n         CKeyID keyID = CPubKey(pubkey).GetID();\n         if (keystore.HaveKey(keyID))"
      },
      {
        "sha": "983ed48c0ec8bee53d67b345ed042172df90ad0c",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5330fa96acc2c066364650b7556c6958f3d271a7/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5330fa96acc2c066364650b7556c6958f3d271a7/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=5330fa96acc2c066364650b7556c6958f3d271a7",
        "patch": "@@ -12,8 +12,6 @@\n #include \"script/standard.h\"\n #include \"uint256.h\"\n \n-#include <boost/foreach.hpp>\n-\n using namespace std;\n \n typedef std::vector<unsigned char> valtype;\n@@ -128,7 +126,7 @@ static bool SignStep(const BaseSignatureCreator& creator, const CScript& scriptP\n static CScript PushAll(const vector<valtype>& values)\n {\n     CScript result;\n-    BOOST_FOREACH(const valtype& v, values) {\n+    for (const valtype& v : values) {\n         if (v.size() == 0) {\n             result << OP_0;\n         } else if (v.size() == 1 && v[0] >= 1 && v[0] <= 16) {\n@@ -234,12 +232,12 @@ static vector<valtype> CombineMultisig(const CScript& scriptPubKey, const BaseSi\n {\n     // Combine all the signatures we've got:\n     set<valtype> allsigs;\n-    BOOST_FOREACH(const valtype& v, sigs1)\n+    for (const valtype& v : sigs1)\n     {\n         if (!v.empty())\n             allsigs.insert(v);\n     }\n-    BOOST_FOREACH(const valtype& v, sigs2)\n+    for (const valtype& v : sigs2)\n     {\n         if (!v.empty())\n             allsigs.insert(v);\n@@ -250,7 +248,7 @@ static vector<valtype> CombineMultisig(const CScript& scriptPubKey, const BaseSi\n     unsigned int nSigsRequired = vSolutions.front()[0];\n     unsigned int nPubKeys = vSolutions.size()-2;\n     map<valtype, valtype> sigs;\n-    BOOST_FOREACH(const valtype& sig, allsigs)\n+    for (const valtype& sig : allsigs)\n     {\n         for (unsigned int i = 0; i < nPubKeys; i++)\n         {"
      },
      {
        "sha": "134f953614558f87b53bbebd3ade6aca5faf7a02",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5330fa96acc2c066364650b7556c6958f3d271a7/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5330fa96acc2c066364650b7556c6958f3d271a7/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=5330fa96acc2c066364650b7556c6958f3d271a7",
        "patch": "@@ -10,8 +10,6 @@\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n \n-#include <boost/foreach.hpp>\n-\n using namespace std;\n \n typedef vector<unsigned char> valtype;\n@@ -96,7 +94,7 @@ bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, vector<vector<unsi\n \n     // Scan templates\n     const CScript& script1 = scriptPubKey;\n-    BOOST_FOREACH(const PAIRTYPE(txnouttype, CScript)& tplate, mTemplates)\n+    for (const PAIRTYPE(txnouttype, CScript)& tplate : mTemplates)\n     {\n         const CScript& script2 = tplate.second;\n         vSolutionsRet.clear();\n@@ -295,7 +293,7 @@ CScript GetScriptForMultisig(int nRequired, const std::vector<CPubKey>& keys)\n     CScript script;\n \n     script << CScript::EncodeOP_N(nRequired);\n-    BOOST_FOREACH(const CPubKey& key, keys)\n+    for (const CPubKey& key : keys)\n         script << ToByteVector(key);\n     script << CScript::EncodeOP_N(keys.size()) << OP_CHECKMULTISIG;\n     return script;"
      }
    ]
  },
  {
    "sha": "f7877d0366c22c0542e40dccd9e34c48462e2aac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNzg3N2QwMzY2YzIyYzA1NDJlNDBkY2NkOWUzNGM0ODQ2MmUyYWFj",
    "commit": {
      "author": {
        "name": "Kalle Alm",
        "email": "kalle.alm@gmail.com",
        "date": "2017-01-05T13:48:46Z"
      },
      "committer": {
        "name": "Kalle Alm",
        "email": "kalle.alm@gmail.com",
        "date": "2017-01-05T13:48:46Z"
      },
      "message": "Trivial refactor: replace all BOOST_FOREACH (policy/).",
      "tree": {
        "sha": "57ef4f8aac43eeb173c38e4b9e04fc1aff5dc2bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/57ef4f8aac43eeb173c38e4b9e04fc1aff5dc2bf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f7877d0366c22c0542e40dccd9e34c48462e2aac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7877d0366c22c0542e40dccd9e34c48462e2aac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f7877d0366c22c0542e40dccd9e34c48462e2aac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7877d0366c22c0542e40dccd9e34c48462e2aac/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5330fa96acc2c066364650b7556c6958f3d271a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5330fa96acc2c066364650b7556c6958f3d271a7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5330fa96acc2c066364650b7556c6958f3d271a7"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 4,
      "deletions": 6
    },
    "files": [
      {
        "sha": "85e7548542d33692e53c442772ccfdb9e01e0ef6",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7877d0366c22c0542e40dccd9e34c48462e2aac/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7877d0366c22c0542e40dccd9e34c48462e2aac/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=f7877d0366c22c0542e40dccd9e34c48462e2aac",
        "patch": "@@ -12,8 +12,6 @@\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n \n-#include <boost/foreach.hpp>\n-\n     /**\n      * Check transaction inputs to mitigate two\n      * potential denial-of-service attacks:\n@@ -73,7 +71,7 @@ bool IsStandardTx(const CTransaction& tx, std::string& reason, const bool witnes\n         return false;\n     }\n \n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    for (const CTxIn& txin : tx.vin)\n     {\n         // Biggest 'standard' txin is a 15-of-15 P2SH multisig with compressed\n         // keys (remember the 520 byte limit on redeemScript size). That works\n@@ -94,7 +92,7 @@ bool IsStandardTx(const CTransaction& tx, std::string& reason, const bool witnes\n \n     unsigned int nDataOut = 0;\n     txnouttype whichType;\n-    BOOST_FOREACH(const CTxOut& txout, tx.vout) {\n+    for (const CTxOut& txout : tx.vout) {\n         if (!::IsStandard(txout.scriptPubKey, whichType, witnessEnabled)) {\n             reason = \"scriptpubkey\";\n             return false;"
      },
      {
        "sha": "755ef83c9af11a3d01efa95216b94eb8f897a167",
        "filename": "src/policy/rbf.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7877d0366c22c0542e40dccd9e34c48462e2aac/src/policy/rbf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7877d0366c22c0542e40dccd9e34c48462e2aac/src/policy/rbf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.cpp?ref=f7877d0366c22c0542e40dccd9e34c48462e2aac",
        "patch": "@@ -6,7 +6,7 @@\n \n bool SignalsOptInRBF(const CTransaction &tx)\n {\n-    BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n+    for (const CTxIn &txin : tx.vin) {\n         if (txin.nSequence < std::numeric_limits<unsigned int>::max()-1) {\n             return true;\n         }\n@@ -38,7 +38,7 @@ RBFTransactionState IsRBFOptIn(const CTransaction &tx, CTxMemPool &pool)\n     CTxMemPoolEntry entry = *pool.mapTx.find(tx.GetHash());\n     pool.CalculateMemPoolAncestors(entry, setAncestors, noLimit, noLimit, noLimit, noLimit, dummy, false);\n \n-    BOOST_FOREACH(CTxMemPool::txiter it, setAncestors) {\n+    for (CTxMemPool::txiter it : setAncestors) {\n         if (SignalsOptInRBF(it->GetTx())) {\n             return RBF_TRANSACTIONSTATE_REPLACEABLE_BIP125;\n         }"
      }
    ]
  },
  {
    "sha": "3f94cce40a0eb7ee86f8d39b9eddfd36de52a232",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZjk0Y2NlNDBhMGViN2VlODZmOGQzOWI5ZWRkZmQzNmRlNTJhMjMy",
    "commit": {
      "author": {
        "name": "Kalle Alm",
        "email": "kalle.alm@gmail.com",
        "date": "2017-01-05T13:49:06Z"
      },
      "committer": {
        "name": "Kalle Alm",
        "email": "kalle.alm@gmail.com",
        "date": "2017-01-05T13:49:06Z"
      },
      "message": "Trivial refactor: replace all BOOST_FOREACH (src/).",
      "tree": {
        "sha": "e91c91af78f8bb54ec3a301ee68689fd116299da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e91c91af78f8bb54ec3a301ee68689fd116299da"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f94cce40a0eb7ee86f8d39b9eddfd36de52a232",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f94cce40a0eb7ee86f8d39b9eddfd36de52a232",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3f94cce40a0eb7ee86f8d39b9eddfd36de52a232",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f94cce40a0eb7ee86f8d39b9eddfd36de52a232/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f7877d0366c22c0542e40dccd9e34c48462e2aac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7877d0366c22c0542e40dccd9e34c48462e2aac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f7877d0366c22c0542e40dccd9e34c48462e2aac"
      }
    ],
    "stats": {
      "total": 295,
      "additions": 142,
      "deletions": 153
    },
    "files": [
      {
        "sha": "cd14a67fb7c66af0be6011dffab2b60f19a726aa",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f94cce40a0eb7ee86f8d39b9eddfd36de52a232/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f94cce40a0eb7ee86f8d39b9eddfd36de52a232/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=3f94cce40a0eb7ee86f8d39b9eddfd36de52a232",
        "patch": "@@ -490,7 +490,7 @@ static void MutateTxSign(CMutableTransaction& tx, const std::string& flagStr)\n             ProduceSignature(MutableTransactionSignatureCreator(&keystore, &mergedTx, i, amount, nHashType), prevPubKey, sigdata);\n \n         // ... and merge in other signatures:\n-        BOOST_FOREACH(const CTransaction& txv, txVariants)\n+        for (const CTransaction& txv : txVariants)\n             sigdata = CombineSignatures(prevPubKey, MutableTransactionSignatureChecker(&mergedTx, i, amount), sigdata, DataFromTransaction(txv, i));\n         UpdateTransaction(mergedTx, i, sigdata);\n "
      },
      {
        "sha": "a5be3e6f689e7f597ae8d99b4b855cb430fcc813",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f94cce40a0eb7ee86f8d39b9eddfd36de52a232/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f94cce40a0eb7ee86f8d39b9eddfd36de52a232/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=3f94cce40a0eb7ee86f8d39b9eddfd36de52a232",
        "patch": "@@ -14,8 +14,6 @@\n #include <math.h>\n #include <stdlib.h>\n \n-#include <boost/foreach.hpp>\n-\n #define LN2SQUARED 0.4804530139182014246671025263266649717305529515945455\n #define LN2 0.6931471805599453094172321214581765680755001343602552\n \n@@ -181,7 +179,7 @@ bool CBloomFilter::IsRelevantAndUpdate(const CTransaction& tx)\n     if (fFound)\n         return true;\n \n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    for (const CTxIn& txin : tx.vin)\n     {\n         // Match if the filter contains an outpoint tx spends\n         if (contains(txin.prevout))"
      },
      {
        "sha": "5dd1c6782ed727554cc1511df24ec8002cfba183",
        "filename": "src/checkqueue.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f94cce40a0eb7ee86f8d39b9eddfd36de52a232/src/checkqueue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f94cce40a0eb7ee86f8d39b9eddfd36de52a232/src/checkqueue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkqueue.h?ref=3f94cce40a0eb7ee86f8d39b9eddfd36de52a232",
        "patch": "@@ -8,7 +8,6 @@\n #include <algorithm>\n #include <vector>\n \n-#include <boost/foreach.hpp>\n #include <boost/thread/condition_variable.hpp>\n #include <boost/thread/locks.hpp>\n #include <boost/thread/mutex.hpp>\n@@ -119,7 +118,7 @@ class CCheckQueue\n                 fOk = fAllOk;\n             }\n             // execute work\n-            BOOST_FOREACH (T& check, vChecks)\n+            for (T& check : vChecks)\n                 if (fOk)\n                     fOk = check();\n             vChecks.clear();\n@@ -146,7 +145,7 @@ class CCheckQueue\n     void Add(std::vector<T>& vChecks)\n     {\n         boost::unique_lock<boost::mutex> lock(mutex);\n-        BOOST_FOREACH (T& check, vChecks) {\n+        for (T& check : vChecks) {\n             queue.push_back(T());\n             check.swap(queue.back());\n         }"
      },
      {
        "sha": "f44781bfa4ec61cf92d23f365236ceecf61beb40",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f94cce40a0eb7ee86f8d39b9eddfd36de52a232/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f94cce40a0eb7ee86f8d39b9eddfd36de52a232/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=3f94cce40a0eb7ee86f8d39b9eddfd36de52a232",
        "patch": "@@ -294,7 +294,7 @@ double CCoinsViewCache::GetPriority(const CTransaction &tx, int nHeight, CAmount\n     if (tx.IsCoinBase())\n         return 0.0;\n     double dResult = 0.0;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    for (const CTxIn& txin : tx.vin)\n     {\n         const CCoins* coins = AccessCoins(txin.prevout.hash);\n         assert(coins);"
      },
      {
        "sha": "2e9c2fb4d37c1a6a995526f27bf736fe535760a4",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f94cce40a0eb7ee86f8d39b9eddfd36de52a232/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f94cce40a0eb7ee86f8d39b9eddfd36de52a232/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=3f94cce40a0eb7ee86f8d39b9eddfd36de52a232",
        "patch": "@@ -16,7 +16,6 @@\n #include <assert.h>\n #include <stdint.h>\n \n-#include <boost/foreach.hpp>\n #include <boost/unordered_map.hpp>\n \n /** \n@@ -119,7 +118,7 @@ class CCoins\n     }\n \n     void ClearUnspendable() {\n-        BOOST_FOREACH(CTxOut &txout, vout) {\n+        for (CTxOut &txout : vout) {\n             if (txout.scriptPubKey.IsUnspendable())\n                 txout.SetNull();\n         }\n@@ -227,15 +226,15 @@ class CCoins\n     //! check whether the entire CCoins is spent\n     //! note that only !IsPruned() CCoins can be serialized\n     bool IsPruned() const {\n-        BOOST_FOREACH(const CTxOut &out, vout)\n+        for (const CTxOut &out : vout)\n             if (!out.IsNull())\n                 return false;\n         return true;\n     }\n \n     size_t DynamicMemoryUsage() const {\n         size_t ret = memusage::DynamicUsage(vout);\n-        BOOST_FOREACH(const CTxOut &out, vout) {\n+        for (const CTxOut &out : vout) {\n             ret += RecursiveDynamicUsage(out.scriptPubKey);\n         }\n         return ret;"
      },
      {
        "sha": "68b5e914a2a1f6f9573e815b2d193baf697790da",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f94cce40a0eb7ee86f8d39b9eddfd36de52a232/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f94cce40a0eb7ee86f8d39b9eddfd36de52a232/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=3f94cce40a0eb7ee86f8d39b9eddfd36de52a232",
        "patch": "@@ -16,7 +16,6 @@\n #include \"utilstrencodings.h\"\n \n #include <boost/assign/list_of.hpp>\n-#include <boost/foreach.hpp>\n \n using namespace std;\n \n@@ -143,7 +142,7 @@ void ScriptPubKeyToUniv(const CScript& scriptPubKey,\n     out.pushKV(\"type\", GetTxnOutputType(type));\n \n     UniValue a(UniValue::VARR);\n-    BOOST_FOREACH(const CTxDestination& addr, addresses)\n+    for (const CTxDestination& addr : addresses)\n         a.push_back(CBitcoinAddress(addr).ToString());\n     out.pushKV(\"addresses\", a);\n }"
      },
      {
        "sha": "17e3b6a0d7f54facb6a1348a1d09cd1a8d8452b1",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f94cce40a0eb7ee86f8d39b9eddfd36de52a232/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f94cce40a0eb7ee86f8d39b9eddfd36de52a232/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=3f94cce40a0eb7ee86f8d39b9eddfd36de52a232",
        "patch": "@@ -19,7 +19,6 @@\n #include \"utilstrencodings.h\"\n \n #include <boost/algorithm/string.hpp> // boost::trim\n-#include <boost/foreach.hpp> //BOOST_FOREACH\n \n /** WWW-Authenticate to present with 401 Unauthorized response */\n static const char* WWW_AUTH_HEADER_DATA = \"Basic realm=\\\"jsonrpc\\\"\";\n@@ -95,7 +94,7 @@ static bool multiUserAuthorized(std::string strUserPass)\n \n     if (mapMultiArgs.count(\"-rpcauth\") > 0) {\n         //Search for multi-user login/pass \"rpcauth\" from config\n-        BOOST_FOREACH(std::string strRPCAuth, mapMultiArgs.at(\"-rpcauth\"))\n+        for (std::string strRPCAuth : mapMultiArgs.at(\"-rpcauth\"))\n         {\n             std::vector<std::string> vFields;\n             boost::split(vFields, strRPCAuth, boost::is_any_of(\":$\"));"
      },
      {
        "sha": "bf45ea5ecc9546bae7c258387c0da36efc8564b9",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f94cce40a0eb7ee86f8d39b9eddfd36de52a232/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f94cce40a0eb7ee86f8d39b9eddfd36de52a232/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=3f94cce40a0eb7ee86f8d39b9eddfd36de52a232",
        "patch": "@@ -593,7 +593,7 @@ void CleanupBlockRevFiles()\n     // keeping a separate counter.  Once we hit a gap (or if 0 doesn't exist)\n     // start removing block files.\n     int nContigCounter = 0;\n-    BOOST_FOREACH(const PAIRTYPE(string, path)& item, mapBlockFiles) {\n+    for (const PAIRTYPE(string, path)& item : mapBlockFiles) {\n         if (atoi(item.first) == nContigCounter) {\n             nContigCounter++;\n             continue;\n@@ -646,7 +646,7 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n     }\n \n     // -loadblock=\n-    BOOST_FOREACH(const boost::filesystem::path& path, vImportFiles) {\n+    for (const boost::filesystem::path& path : vImportFiles) {\n         FILE *file = fopen(path.string().c_str(), \"rb\");\n         if (file) {\n             LogPrintf(\"Importing blocks file %s...\\n\", path.string());\n@@ -1159,7 +1159,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     // sanitize comments per BIP-0014, format user agent and check total size\n     std::vector<string> uacomments;\n     if (mapMultiArgs.count(\"-uacomment\")) {\n-        BOOST_FOREACH(string cmt, mapMultiArgs.at(\"-uacomment\"))\n+        for (string cmt : mapMultiArgs.at(\"-uacomment\"))\n         {\n             if (cmt != SanitizeString(cmt, SAFE_CHARS_UA_COMMENT))\n                 return InitError(strprintf(_(\"User Agent comment (%s) contains unsafe characters.\"), cmt));\n@@ -1174,7 +1174,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     if (mapMultiArgs.count(\"-onlynet\")) {\n         std::set<enum Network> nets;\n-        BOOST_FOREACH(const std::string& snet, mapMultiArgs.at(\"-onlynet\")) {\n+        for (const std::string& snet : mapMultiArgs.at(\"-onlynet\")) {\n             enum Network net = ParseNetwork(snet);\n             if (net == NET_UNROUTABLE)\n                 return InitError(strprintf(_(\"Unknown network specified in -onlynet: '%s'\"), snet));\n@@ -1188,7 +1188,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     }\n \n     if (mapMultiArgs.count(\"-whitelist\")) {\n-        BOOST_FOREACH(const std::string& net, mapMultiArgs.at(\"-whitelist\")) {\n+        for (const std::string& net : mapMultiArgs.at(\"-whitelist\")) {\n             CSubNet subnet;\n             LookupSubNet(net.c_str(), subnet);\n             if (!subnet.IsValid())\n@@ -1241,15 +1241,15 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     if (fListen) {\n         bool fBound = false;\n         if (mapMultiArgs.count(\"-bind\")) {\n-            BOOST_FOREACH(const std::string& strBind, mapMultiArgs.at(\"-bind\")) {\n+            for (const std::string& strBind : mapMultiArgs.at(\"-bind\")) {\n                 CService addrBind;\n                 if (!Lookup(strBind.c_str(), addrBind, GetListenPort(), false))\n                     return InitError(ResolveErrMsg(\"bind\", strBind));\n                 fBound |= Bind(connman, addrBind, (BF_EXPLICIT | BF_REPORT_ERROR));\n             }\n         }\n         if (mapMultiArgs.count(\"-whitebind\")) {\n-            BOOST_FOREACH(const std::string& strBind, mapMultiArgs.at(\"-whitebind\")) {\n+            for (const std::string& strBind : mapMultiArgs.at(\"-whitebind\")) {\n                 CService addrBind;\n                 if (!Lookup(strBind.c_str(), addrBind, 0, false))\n                     return InitError(ResolveErrMsg(\"whitebind\", strBind));\n@@ -1269,7 +1269,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     }\n \n     if (mapMultiArgs.count(\"-externalip\")) {\n-        BOOST_FOREACH(const std::string& strAddr, mapMultiArgs.at(\"-externalip\")) {\n+        for (const std::string& strAddr : mapMultiArgs.at(\"-externalip\")) {\n             CService addrLocal;\n             if (Lookup(strAddr.c_str(), addrLocal, GetListenPort(), fNameLookup) && addrLocal.IsValid())\n                 AddLocal(addrLocal, LOCAL_MANUAL);\n@@ -1279,7 +1279,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     }\n \n     if (mapMultiArgs.count(\"-seednode\")) {\n-        BOOST_FOREACH(const std::string& strDest, mapMultiArgs.at(\"-seednode\"))\n+        for (const std::string& strDest : mapMultiArgs.at(\"-seednode\"))\n             connman.AddOneShot(strDest);\n     }\n \n@@ -1531,7 +1531,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     std::vector<boost::filesystem::path> vImportFiles;\n     if (mapMultiArgs.count(\"-loadblock\"))\n     {\n-        BOOST_FOREACH(const std::string& strFile, mapMultiArgs.at(\"-loadblock\"))\n+        for (const std::string& strFile : mapMultiArgs.at(\"-loadblock\"))\n             vImportFiles.push_back(strFile);\n     }\n "
      },
      {
        "sha": "8454175ca81a0e5538a8b1ce054e46b65b3d67ea",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f94cce40a0eb7ee86f8d39b9eddfd36de52a232/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f94cce40a0eb7ee86f8d39b9eddfd36de52a232/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=3f94cce40a0eb7ee86f8d39b9eddfd36de52a232",
        "patch": "@@ -9,8 +9,6 @@\n #include \"pubkey.h\"\n #include \"util.h\"\n \n-#include <boost/foreach.hpp>\n-\n bool CKeyStore::AddKey(const CKey &key) {\n     return AddKeyPubKey(key, key.GetPubKey());\n }"
      },
      {
        "sha": "515f40c943df7944d8a9463487568f2f1f563289",
        "filename": "src/memusage.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f94cce40a0eb7ee86f8d39b9eddfd36de52a232/src/memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f94cce40a0eb7ee86f8d39b9eddfd36de52a232/src/memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/memusage.h?ref=3f94cce40a0eb7ee86f8d39b9eddfd36de52a232",
        "patch": "@@ -13,7 +13,6 @@\n #include <set>\n #include <vector>\n \n-#include <boost/foreach.hpp>\n #include <boost/unordered_set.hpp>\n #include <boost/unordered_map.hpp>\n "
      },
      {
        "sha": "71cf2f4e38658f838f03dc7fe89ec76830f05426",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f94cce40a0eb7ee86f8d39b9eddfd36de52a232/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f94cce40a0eb7ee86f8d39b9eddfd36de52a232/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=3f94cce40a0eb7ee86f8d39b9eddfd36de52a232",
        "patch": "@@ -202,7 +202,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n \n bool BlockAssembler::isStillDependent(CTxMemPool::txiter iter)\n {\n-    BOOST_FOREACH(CTxMemPool::txiter parent, mempool.GetMemPoolParents(iter))\n+    for (CTxMemPool::txiter parent : mempool.GetMemPoolParents(iter))\n     {\n         if (!inBlock.count(parent)) {\n             return true;\n@@ -242,7 +242,7 @@ bool BlockAssembler::TestPackage(uint64_t packageSize, int64_t packageSigOpsCost\n bool BlockAssembler::TestPackageTransactions(const CTxMemPool::setEntries& package)\n {\n     uint64_t nPotentialBlockSize = nBlockSize; // only used with fNeedSizeAccounting\n-    BOOST_FOREACH (const CTxMemPool::txiter it, package) {\n+    for (const CTxMemPool::txiter it : package) {\n         if (!IsFinalTx(it->GetTx(), nHeight, nLockTimeCutoff))\n             return false;\n         if (!fIncludeWitness && it->GetTx().HasWitness())\n@@ -339,11 +339,11 @@ void BlockAssembler::AddToBlock(CTxMemPool::txiter iter)\n void BlockAssembler::UpdatePackagesForAdded(const CTxMemPool::setEntries& alreadyAdded,\n         indexed_modified_transaction_set &mapModifiedTx)\n {\n-    BOOST_FOREACH(const CTxMemPool::txiter it, alreadyAdded) {\n+    for (const CTxMemPool::txiter it : alreadyAdded) {\n         CTxMemPool::setEntries descendants;\n         mempool.CalculateDescendants(it, descendants);\n         // Insert all descendants (not yet in block) into the modified set\n-        BOOST_FOREACH(CTxMemPool::txiter desc, descendants) {\n+        for (CTxMemPool::txiter desc : descendants) {\n             if (alreadyAdded.count(desc))\n                 continue;\n             modtxiter mit = mapModifiedTx.find(desc);\n@@ -576,7 +576,7 @@ void BlockAssembler::addPriorityTxs()\n \n             // This tx was successfully added, so\n             // add transactions that depend on this one to the priority queue to try again\n-            BOOST_FOREACH(CTxMemPool::txiter child, mempool.GetMemPoolChildren(iter))\n+            for (CTxMemPool::txiter child : mempool.GetMemPoolChildren(iter))\n             {\n                 waitPriIter wpiter = waitPriMap.find(child);\n                 if (wpiter != waitPriMap.end()) {"
      },
      {
        "sha": "9801db90cf651719ee03702fd187de2aba364240",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 35,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f94cce40a0eb7ee86f8d39b9eddfd36de52a232/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f94cce40a0eb7ee86f8d39b9eddfd36de52a232/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=3f94cce40a0eb7ee86f8d39b9eddfd36de52a232",
        "patch": "@@ -289,7 +289,7 @@ bool IsReachable(const CNetAddr& addr)\n CNode* CConnman::FindNode(const CNetAddr& ip)\n {\n     LOCK(cs_vNodes);\n-    BOOST_FOREACH(CNode* pnode, vNodes)\n+    for (CNode* pnode : vNodes)\n         if ((CNetAddr)pnode->addr == ip)\n             return (pnode);\n     return NULL;\n@@ -298,7 +298,7 @@ CNode* CConnman::FindNode(const CNetAddr& ip)\n CNode* CConnman::FindNode(const CSubNet& subNet)\n {\n     LOCK(cs_vNodes);\n-    BOOST_FOREACH(CNode* pnode, vNodes)\n+    for (CNode* pnode : vNodes)\n     if (subNet.Match((CNetAddr)pnode->addr))\n         return (pnode);\n     return NULL;\n@@ -307,7 +307,7 @@ CNode* CConnman::FindNode(const CSubNet& subNet)\n CNode* CConnman::FindNode(const std::string& addrName)\n {\n     LOCK(cs_vNodes);\n-    BOOST_FOREACH(CNode* pnode, vNodes)\n+    for (CNode* pnode : vNodes)\n         if (pnode->addrName == addrName)\n             return (pnode);\n     return NULL;\n@@ -316,7 +316,7 @@ CNode* CConnman::FindNode(const std::string& addrName)\n CNode* CConnman::FindNode(const CService& addr)\n {\n     LOCK(cs_vNodes);\n-    BOOST_FOREACH(CNode* pnode, vNodes)\n+    for (CNode* pnode : vNodes)\n         if ((CService)pnode->addr == addr)\n             return (pnode);\n     return NULL;\n@@ -325,7 +325,7 @@ CNode* CConnman::FindNode(const CService& addr)\n bool CConnman::CheckIncomingNonce(uint64_t nonce)\n {\n     LOCK(cs_vNodes);\n-    BOOST_FOREACH(CNode* pnode, vNodes) {\n+    for (CNode* pnode : vNodes) {\n         if (!pnode->fSuccessfullyConnected && !pnode->fInbound && pnode->GetLocalNonce() == nonce)\n             return false;\n     }\n@@ -517,7 +517,7 @@ void CConnman::Ban(const CSubNet& subNet, const BanReason &banReason, int64_t ba\n         clientInterface->BannedListChanged();\n     {\n         LOCK(cs_vNodes);\n-        BOOST_FOREACH(CNode* pnode, vNodes) {\n+        for (CNode* pnode : vNodes) {\n             if (subNet.Match((CNetAddr)pnode->addr))\n                 pnode->fDisconnect = true;\n         }\n@@ -593,7 +593,7 @@ void CConnman::SetBannedSetDirty(bool dirty)\n \n bool CConnman::IsWhitelistedRange(const CNetAddr &addr) {\n     LOCK(cs_vWhitelistedRange);\n-    BOOST_FOREACH(const CSubNet& subnet, vWhitelistedRange) {\n+    for (const CSubNet& subnet : vWhitelistedRange) {\n         if (subnet.Match(addr))\n             return true;\n     }\n@@ -867,7 +867,7 @@ bool CConnman::AttemptToEvictConnection()\n     {\n         LOCK(cs_vNodes);\n \n-        BOOST_FOREACH(CNode *node, vNodes) {\n+        for (CNode *node : vNodes) {\n             if (node->fWhitelisted)\n                 continue;\n             if (!node->fInbound)\n@@ -927,7 +927,7 @@ bool CConnman::AttemptToEvictConnection()\n     unsigned int nMostConnections = 0;\n     int64_t nMostConnectionsTime = 0;\n     std::map<uint64_t, std::vector<NodeEvictionCandidate> > mapNetGroupNodes;\n-    BOOST_FOREACH(const NodeEvictionCandidate &node, vEvictionCandidates) {\n+    for (const NodeEvictionCandidate &node : vEvictionCandidates) {\n         mapNetGroupNodes[node.nKeyedNetGroup].push_back(node);\n         int64_t grouptime = mapNetGroupNodes[node.nKeyedNetGroup][0].nTimeConnected;\n         size_t groupsize = mapNetGroupNodes[node.nKeyedNetGroup].size();\n@@ -969,7 +969,7 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     bool whitelisted = hListenSocket.whitelisted || IsWhitelistedRange(addr);\n     {\n         LOCK(cs_vNodes);\n-        BOOST_FOREACH(CNode* pnode, vNodes)\n+        for (CNode* pnode : vNodes)\n             if (pnode->fInbound)\n                 nInbound++;\n     }\n@@ -1049,7 +1049,7 @@ void CConnman::ThreadSocketHandler()\n             LOCK(cs_vNodes);\n             // Disconnect unused nodes\n             std::vector<CNode*> vNodesCopy = vNodes;\n-            BOOST_FOREACH(CNode* pnode, vNodesCopy)\n+            for (CNode* pnode : vNodesCopy)\n             {\n                 if (pnode->fDisconnect ||\n                     (pnode->GetRefCount() <= 0 && pnode->vRecvMsg.empty() && pnode->nSendSize == 0))\n@@ -1072,7 +1072,7 @@ void CConnman::ThreadSocketHandler()\n         {\n             // Delete disconnected nodes\n             std::list<CNode*> vNodesDisconnectedCopy = vNodesDisconnected;\n-            BOOST_FOREACH(CNode* pnode, vNodesDisconnectedCopy)\n+            for (CNode* pnode : vNodesDisconnectedCopy)\n             {\n                 // wait until threads are done using it\n                 if (pnode->GetRefCount() <= 0)\n@@ -1126,15 +1126,15 @@ void CConnman::ThreadSocketHandler()\n         SOCKET hSocketMax = 0;\n         bool have_fds = false;\n \n-        BOOST_FOREACH(const ListenSocket& hListenSocket, vhListenSocket) {\n+        for (const ListenSocket& hListenSocket : vhListenSocket) {\n             FD_SET(hListenSocket.socket, &fdsetRecv);\n             hSocketMax = std::max(hSocketMax, hListenSocket.socket);\n             have_fds = true;\n         }\n \n         {\n             LOCK(cs_vNodes);\n-            BOOST_FOREACH(CNode* pnode, vNodes)\n+            for (CNode* pnode : vNodes)\n             {\n                 if (pnode->hSocket == INVALID_SOCKET)\n                     continue;\n@@ -1199,7 +1199,7 @@ void CConnman::ThreadSocketHandler()\n         //\n         // Accept new connections\n         //\n-        BOOST_FOREACH(const ListenSocket& hListenSocket, vhListenSocket)\n+        for (const ListenSocket& hListenSocket : vhListenSocket)\n         {\n             if (hListenSocket.socket != INVALID_SOCKET && FD_ISSET(hListenSocket.socket, &fdsetRecv))\n             {\n@@ -1214,10 +1214,10 @@ void CConnman::ThreadSocketHandler()\n         {\n             LOCK(cs_vNodes);\n             vNodesCopy = vNodes;\n-            BOOST_FOREACH(CNode* pnode, vNodesCopy)\n+            for (CNode* pnode : vNodesCopy)\n                 pnode->AddRef();\n         }\n-        BOOST_FOREACH(CNode* pnode, vNodesCopy)\n+        for (CNode* pnode : vNodesCopy)\n         {\n             if (interruptNet)\n                 return;\n@@ -1314,7 +1314,7 @@ void CConnman::ThreadSocketHandler()\n         }\n         {\n             LOCK(cs_vNodes);\n-            BOOST_FOREACH(CNode* pnode, vNodesCopy)\n+            for (CNode* pnode : vNodesCopy)\n                 pnode->Release();\n         }\n     }\n@@ -1489,7 +1489,7 @@ void CConnman::ThreadDNSAddressSeed()\n \n     LogPrintf(\"Loading addresses from DNS seeds (could take a while)\\n\");\n \n-    BOOST_FOREACH(const CDNSSeedData &seed, vSeeds) {\n+    for (const CDNSSeedData &seed : vSeeds) {\n         if (HaveNameProxy()) {\n             AddOneShot(seed.host);\n         } else {\n@@ -1498,7 +1498,7 @@ void CConnman::ThreadDNSAddressSeed()\n             ServiceFlags requiredServiceBits = nRelevantServices;\n             if (LookupHost(GetDNSHost(seed, &requiredServiceBits).c_str(), vIPs, 0, true))\n             {\n-                BOOST_FOREACH(const CNetAddr& ip, vIPs)\n+                for (const CNetAddr& ip : vIPs)\n                 {\n                     int nOneDay = 24*3600;\n                     CAddress addr = CAddress(CService(ip, Params().GetDefaultPort()), requiredServiceBits);\n@@ -1576,7 +1576,7 @@ void CConnman::ThreadOpenConnections()\n         for (int64_t nLoop = 0;; nLoop++)\n         {\n             ProcessOneShot();\n-            BOOST_FOREACH(const std::string& strAddr, mapMultiArgs.at(\"-connect\"))\n+            for (const std::string& strAddr : mapMultiArgs.at(\"-connect\"))\n             {\n                 CAddress addr(CService(), NODE_NONE);\n                 OpenNetworkConnection(addr, false, NULL, strAddr.c_str());\n@@ -1630,7 +1630,7 @@ void CConnman::ThreadOpenConnections()\n         std::set<std::vector<unsigned char> > setConnected;\n         {\n             LOCK(cs_vNodes);\n-            BOOST_FOREACH(CNode* pnode, vNodes) {\n+            for (CNode* pnode : vNodes) {\n                 if (!pnode->fInbound) {\n                     setConnected.insert(pnode->addr.GetGroup());\n                     nOutbound++;\n@@ -1724,7 +1724,7 @@ std::vector<AddedNodeInfo> CConnman::GetAddedNodeInfo()\n     {\n         LOCK(cs_vAddedNodes);\n         ret.reserve(vAddedNodes.size());\n-        BOOST_FOREACH(const std::string& strAddNode, vAddedNodes)\n+        for (const std::string& strAddNode : vAddedNodes)\n             lAddresses.push_back(strAddNode);\n     }\n \n@@ -1744,7 +1744,7 @@ std::vector<AddedNodeInfo> CConnman::GetAddedNodeInfo()\n         }\n     }\n \n-    BOOST_FOREACH(const std::string& strAddNode, lAddresses) {\n+    for (const std::string& strAddNode : lAddresses) {\n         CService service(LookupNumeric(strAddNode.c_str(), Params().GetDefaultPort()));\n         if (service.IsValid()) {\n             // strAddNode is an IP:port\n@@ -1837,14 +1837,14 @@ void CConnman::ThreadMessageHandler()\n         {\n             LOCK(cs_vNodes);\n             vNodesCopy = vNodes;\n-            BOOST_FOREACH(CNode* pnode, vNodesCopy) {\n+            for (CNode* pnode : vNodesCopy) {\n                 pnode->AddRef();\n             }\n         }\n \n         bool fSleep = true;\n \n-        BOOST_FOREACH(CNode* pnode, vNodesCopy)\n+        for (CNode* pnode : vNodesCopy)\n         {\n             if (pnode->fDisconnect)\n                 continue;\n@@ -1881,7 +1881,7 @@ void CConnman::ThreadMessageHandler()\n \n         {\n             LOCK(cs_vNodes);\n-            BOOST_FOREACH(CNode* pnode, vNodesCopy)\n+            for (CNode* pnode : vNodesCopy)\n                 pnode->Release();\n         }\n \n@@ -2008,7 +2008,7 @@ void Discover(boost::thread_group& threadGroup)\n         std::vector<CNetAddr> vaddr;\n         if (LookupHost(pszHostName, vaddr, 0, true))\n         {\n-            BOOST_FOREACH (const CNetAddr &addr, vaddr)\n+            for (const CNetAddr &addr : vaddr)\n             {\n                 if (AddLocal(addr, LOCAL_IF))\n                     LogPrintf(\"%s: %s - %s\\n\", __func__, pszHostName, addr.ToString());\n@@ -2057,7 +2057,7 @@ void CConnman::SetNetworkActive(bool active)\n \n         LOCK(cs_vNodes);\n         // Close sockets to all nodes\n-        BOOST_FOREACH(CNode* pnode, vNodes) {\n+        for (CNode* pnode : vNodes) {\n             pnode->CloseSocketDisconnect();\n         }\n     } else {\n@@ -2234,19 +2234,19 @@ void CConnman::Stop()\n     }\n \n     // Close sockets\n-    BOOST_FOREACH(CNode* pnode, vNodes)\n+    for (CNode* pnode : vNodes)\n         if (pnode->hSocket != INVALID_SOCKET)\n             CloseSocket(pnode->hSocket);\n-    BOOST_FOREACH(ListenSocket& hListenSocket, vhListenSocket)\n+    for (ListenSocket& hListenSocket : vhListenSocket)\n         if (hListenSocket.socket != INVALID_SOCKET)\n             if (!CloseSocket(hListenSocket.socket))\n                 LogPrintf(\"CloseSocket(hListenSocket) failed with error %s\\n\", NetworkErrorString(WSAGetLastError()));\n \n     // clean up some globals (to help leak detection)\n-    BOOST_FOREACH(CNode *pnode, vNodes) {\n+    for (CNode *pnode : vNodes) {\n         DeleteNode(pnode);\n     }\n-    BOOST_FOREACH(CNode *pnode, vNodesDisconnected) {\n+    for (CNode *pnode : vNodesDisconnected) {\n         DeleteNode(pnode);\n     }\n     vNodes.clear();\n@@ -2395,7 +2395,7 @@ void CConnman::RelayTransaction(const CTransaction& tx)\n {\n     CInv inv(MSG_TX, tx.GetHash());\n     LOCK(cs_vNodes);\n-    BOOST_FOREACH(CNode* pnode, vNodes)\n+    for (CNode* pnode : vNodes)\n     {\n         pnode->PushInventory(inv);\n     }\n@@ -2584,7 +2584,7 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     lastSentFeeFilter = 0;\n     nextSendTimeFeeFilter = 0;\n \n-    BOOST_FOREACH(const std::string &msg, getAllNetMessageTypes())\n+    for (const std::string &msg : getAllNetMessageTypes())\n         mapRecvBytesPerMsgCmd[msg] = 0;\n     mapRecvBytesPerMsgCmd[NET_MESSAGE_COMMAND_OTHER] = 0;\n "
      },
      {
        "sha": "58b82bc386a90c3702dc586c394536df2b6271df",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f94cce40a0eb7ee86f8d39b9eddfd36de52a232/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f94cce40a0eb7ee86f8d39b9eddfd36de52a232/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=3f94cce40a0eb7ee86f8d39b9eddfd36de52a232",
        "patch": "@@ -33,7 +33,6 @@\n #endif\n \n #include <boost/filesystem/path.hpp>\n-#include <boost/foreach.hpp>\n #include <boost/signals2/signal.hpp>\n \n class CAddrMan;\n@@ -740,7 +739,7 @@ class CNode\n     unsigned int GetTotalRecvSize()\n     {\n         unsigned int total = 0;\n-        BOOST_FOREACH(const CNetMessage &msg, vRecvMsg)\n+        for (const CNetMessage &msg : vRecvMsg)\n             total += msg.vRecv.size() + 24;\n         return total;\n     }\n@@ -752,7 +751,7 @@ class CNode\n     void SetRecvVersion(int nVersionIn)\n     {\n         nRecvVersion = nVersionIn;\n-        BOOST_FOREACH(CNetMessage &msg, vRecvMsg)\n+        for (CNetMessage &msg : vRecvMsg)\n             msg.SetVersion(nVersionIn);\n     }\n     void SetSendVersion(int nVersionIn)"
      },
      {
        "sha": "a0325ab9a5f75cb5268d356ee1f03dd768ffcc98",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 17,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f94cce40a0eb7ee86f8d39b9eddfd36de52a232/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f94cce40a0eb7ee86f8d39b9eddfd36de52a232/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=3f94cce40a0eb7ee86f8d39b9eddfd36de52a232",
        "patch": "@@ -31,6 +31,7 @@\n #include \"validationinterface.h\"\n \n #include <boost/thread.hpp>\n+#include <boost/foreach.hpp>\n \n using namespace std;\n \n@@ -285,7 +286,7 @@ void FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTime) {\n         fUpdateConnectionTime = true;\n     }\n \n-    BOOST_FOREACH(const QueuedBlock& entry, state->vBlocksInFlight) {\n+    for (const QueuedBlock& entry : state->vBlocksInFlight) {\n         mapBlocksInFlight.erase(entry.hash);\n     }\n     EraseOrphansFor(nodeid);\n@@ -514,7 +515,7 @@ void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<CBl\n         // are not yet downloaded and not in flight to vBlocks. In the mean time, update\n         // pindexLastCommonBlock as long as all ancestors are already downloaded, or if it's\n         // already part of our chain (and therefore don't need it even if pruned).\n-        BOOST_FOREACH(CBlockIndex* pindex, vToFetch) {\n+        for (CBlockIndex* pindex : vToFetch) {\n             if (!pindex->IsValid(BLOCK_VALID_TREE)) {\n                 // We consider the chain that this peer is on invalid.\n                 return;\n@@ -558,7 +559,7 @@ bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats) {\n     stats.nMisbehavior = state->nMisbehavior;\n     stats.nSyncHeight = state->pindexBestKnownBlock ? state->pindexBestKnownBlock->nHeight : -1;\n     stats.nCommonHeight = state->pindexLastCommonBlock ? state->pindexLastCommonBlock->nHeight : -1;\n-    BOOST_FOREACH(const QueuedBlock& queue, state->vBlocksInFlight) {\n+    for (const QueuedBlock& queue : state->vBlocksInFlight) {\n         if (queue.pindex)\n             stats.vHeightInFlight.push_back(queue.pindex->nHeight);\n     }\n@@ -608,7 +609,7 @@ bool AddOrphanTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRE\n \n     auto ret = mapOrphanTransactions.emplace(hash, COrphanTx{tx, peer, GetTime() + ORPHAN_TX_EXPIRE_TIME});\n     assert(ret.second);\n-    BOOST_FOREACH(const CTxIn& txin, tx->vin) {\n+    for (const CTxIn& txin : tx->vin) {\n         mapOrphanTransactionsByPrev[txin.prevout].insert(ret.first);\n     }\n \n@@ -622,7 +623,7 @@ int static EraseOrphanTx(uint256 hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n     map<uint256, COrphanTx>::iterator it = mapOrphanTransactions.find(hash);\n     if (it == mapOrphanTransactions.end())\n         return 0;\n-    BOOST_FOREACH(const CTxIn& txin, it->second.tx->vin)\n+    for (const CTxIn& txin : it->second.tx->vin)\n     {\n         auto itPrev = mapOrphanTransactionsByPrev.find(txin.prevout);\n         if (itPrev == mapOrphanTransactionsByPrev.end())\n@@ -745,7 +746,7 @@ void PeerLogicValidation::SyncTransaction(const CTransaction& tx, const CBlockIn\n     // Erase orphan transactions include or precluded by this block\n     if (vOrphanErase.size()) {\n         int nErased = 0;\n-        BOOST_FOREACH(uint256 &orphanHash, vOrphanErase) {\n+        for (uint256 &orphanHash : vOrphanErase) {\n             nErased += EraseOrphanTx(orphanHash);\n         }\n         LogPrint(\"mempool\", \"Erased %d orphan tx included or conflicted by block\\n\", nErased);\n@@ -970,7 +971,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                             // Thus, the protocol spec specified allows for us to provide duplicate txn here,\n                             // however we MUST always provide at least what the remote peer needs\n                             typedef std::pair<unsigned int, uint256> PairType;\n-                            BOOST_FOREACH(PairType& pair, merkleBlock.vMatchedTxn)\n+                            for (PairType& pair : merkleBlock.vMatchedTxn)\n                                 connman.PushMessage(pfrom, msgMaker.Make(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::TX, *block.vtx[pair.first]));\n                         }\n                         // else\n@@ -1295,7 +1296,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         vector<CAddress> vAddrOk;\n         int64_t nNow = GetAdjustedTime();\n         int64_t nSince = nNow - 10 * 60;\n-        BOOST_FOREACH(CAddress& addr, vAddr)\n+        for (CAddress& addr : vAddr)\n         {\n             if (interruptMsgProc)\n                 return true;\n@@ -1687,21 +1688,21 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 }\n             }\n \n-            BOOST_FOREACH(uint256 hash, vEraseQueue)\n+            for (uint256 hash : vEraseQueue)\n                 EraseOrphanTx(hash);\n         }\n         else if (fMissingInputs)\n         {\n             bool fRejectedParents = false; // It may be the case that the orphans parents have all been rejected\n-            BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+            for (const CTxIn& txin : tx.vin) {\n                 if (recentRejects->contains(txin.prevout.hash)) {\n                     fRejectedParents = true;\n                     break;\n                 }\n             }\n             if (!fRejectedParents) {\n                 uint32_t nFetchFlags = GetFetchFlags(pfrom, chainActive.Tip(), chainparams.GetConsensus());\n-                BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+                for (const CTxIn& txin : tx.vin) {\n                     CInv _inv(MSG_TX | nFetchFlags, txin.prevout.hash);\n                     pfrom->AddInventoryKnown(_inv);\n                     if (!AlreadyHave(_inv)) pfrom->AskFor(_inv);\n@@ -2233,7 +2234,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         pfrom->vAddrToSend.clear();\n         vector<CAddress> vAddr = connman.GetAddresses();\n         FastRandomContext insecure_rand;\n-        BOOST_FOREACH(const CAddress &addr, vAddr)\n+        for (const CAddress &addr : vAddr)\n             pfrom->PushAddress(addr, insecure_rand);\n     }\n \n@@ -2636,7 +2637,7 @@ bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsg\n \n         CNodeState &state = *State(pto->GetId());\n \n-        BOOST_FOREACH(const CBlockReject& reject, state.rejects)\n+        for (const CBlockReject& reject : state.rejects)\n             connman.PushMessage(pto, msgMaker.Make(NetMsgType::REJECT, (string)NetMsgType::BLOCK, reject.chRejectCode, reject.strRejectReason, reject.hashBlock));\n         state.rejects.clear();\n \n@@ -2670,7 +2671,7 @@ bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsg\n             pto->nNextAddrSend = PoissonNextSend(nNow, AVG_ADDRESS_BROADCAST_INTERVAL);\n             vector<CAddress> vAddr;\n             vAddr.reserve(pto->vAddrToSend.size());\n-            BOOST_FOREACH(const CAddress& addr, pto->vAddrToSend)\n+            for (const CAddress& addr : pto->vAddrToSend)\n             {\n                 if (!pto->addrKnown.contains(addr.GetKey()))\n                 {\n@@ -2748,7 +2749,7 @@ bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsg\n                 // Try to find first header that our peer doesn't have, and\n                 // then send all headers past that one.  If we come across any\n                 // headers that aren't on chainActive, give up.\n-                BOOST_FOREACH(const uint256 &hash, pto->vBlockHashesToAnnounce) {\n+                for (const uint256 &hash : pto->vBlockHashesToAnnounce) {\n                     BlockMap::iterator mi = mapBlockIndex.find(hash);\n                     assert(mi != mapBlockIndex.end());\n                     CBlockIndex *pindex = mi->second;\n@@ -2858,7 +2859,7 @@ bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsg\n             vInv.reserve(std::max<size_t>(pto->vInventoryBlockToSend.size(), INVENTORY_BROADCAST_MAX));\n \n             // Add blocks\n-            BOOST_FOREACH(const uint256& hash, pto->vInventoryBlockToSend) {\n+            for (const uint256& hash : pto->vInventoryBlockToSend) {\n                 vInv.push_back(CInv(MSG_BLOCK, hash));\n                 if (vInv.size() == MAX_INV_SZ) {\n                     connman.PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\n@@ -3016,7 +3017,7 @@ bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsg\n             vector<CBlockIndex*> vToDownload;\n             NodeId staller = -1;\n             FindNextBlocksToDownload(pto->GetId(), MAX_BLOCKS_IN_TRANSIT_PER_PEER - state.nBlocksInFlight, vToDownload, staller, consensusParams);\n-            BOOST_FOREACH(CBlockIndex *pindex, vToDownload) {\n+            for (CBlockIndex *pindex : vToDownload) {\n                 uint32_t nFetchFlags = GetFetchFlags(pto, pindex->pprev, consensusParams);\n                 vGetData.push_back(CInv(MSG_BLOCK | nFetchFlags, pindex->GetBlockHash()));\n                 MarkBlockAsInFlight(pto->GetId(), pindex->GetBlockHash(), consensusParams, pindex);"
      },
      {
        "sha": "391bb9c57d6adcea7b991f5b59d9d5832f6a661a",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f94cce40a0eb7ee86f8d39b9eddfd36de52a232/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f94cce40a0eb7ee86f8d39b9eddfd36de52a232/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=3f94cce40a0eb7ee86f8d39b9eddfd36de52a232",
        "patch": "@@ -163,7 +163,7 @@ static bool rest_headers(HTTPRequest* req,\n     }\n \n     CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n-    BOOST_FOREACH(const CBlockIndex *pindex, headers) {\n+    for (const CBlockIndex *pindex : headers) {\n         ssHeader << pindex->GetBlockHeader();\n     }\n \n@@ -183,7 +183,7 @@ static bool rest_headers(HTTPRequest* req,\n     }\n     case RF_JSON: {\n         UniValue jsonHeaders(UniValue::VARR);\n-        BOOST_FOREACH(const CBlockIndex *pindex, headers) {\n+        for (const CBlockIndex *pindex : headers) {\n             jsonHeaders.push_back(blockheaderToJSON(pindex));\n         }\n         string strJSON = jsonHeaders.write() + \"\\n\";\n@@ -571,7 +571,7 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n         objGetUTXOResponse.push_back(Pair(\"bitmap\", bitmapStringRepresentation));\n \n         UniValue utxos(UniValue::VARR);\n-        BOOST_FOREACH (const CCoin& coin, outs) {\n+        for (const CCoin& coin : outs) {\n             UniValue utxo(UniValue::VOBJ);\n             utxo.push_back(Pair(\"txvers\", (int32_t)coin.nTxVer));\n             utxo.push_back(Pair(\"height\", (int32_t)coin.nHeight));"
      },
      {
        "sha": "80872a908c9b8329cbf3b75f066d129a11ec7515",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f94cce40a0eb7ee86f8d39b9eddfd36de52a232/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f94cce40a0eb7ee86f8d39b9eddfd36de52a232/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=3f94cce40a0eb7ee86f8d39b9eddfd36de52a232",
        "patch": "@@ -9,7 +9,6 @@\n \n #include <stdio.h>\n \n-#include <boost/foreach.hpp>\n #include <boost/thread.hpp>\n \n #ifdef DEBUG_LOCKCONTENTION\n@@ -89,7 +88,7 @@ static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch,\n \n     LogPrintf(\"POTENTIAL DEADLOCK DETECTED\\n\");\n     LogPrintf(\"Previous lock order was:\\n\");\n-    BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, s2) {\n+    for (const PAIRTYPE(void*, CLockLocation)& i : s2) {\n         if (i.first == mismatch.first) {\n             LogPrintf(\" (1)\");\n             if (!firstLocked && secondLocked && i.second.fTry)\n@@ -107,7 +106,7 @@ static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch,\n     firstLocked = false;\n     secondLocked = false;\n     LogPrintf(\"Current lock order is:\\n\");\n-    BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, s1) {\n+    for (const PAIRTYPE(void*, CLockLocation)& i : s1) {\n         if (i.first == mismatch.first) {\n             LogPrintf(\" (1)\");\n             if (!firstLocked && secondLocked && i.second.fTry)\n@@ -135,7 +134,7 @@ static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)\n     (*lockstack).push_back(std::make_pair(c, locklocation));\n \n     if (!fTry) {\n-        BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, (*lockstack)) {\n+        for (const PAIRTYPE(void*, CLockLocation)& i : (*lockstack)) {\n             if (i.first == c)\n                 break;\n \n@@ -170,14 +169,14 @@ void LeaveCritical()\n std::string LocksHeld()\n {\n     std::string result;\n-    BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, *lockstack)\n+    for (const PAIRTYPE(void*, CLockLocation)& i : *lockstack)\n         result += i.second.ToString() + std::string(\"\\n\");\n     return result;\n }\n \n void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs)\n {\n-    BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, *lockstack)\n+    for (const PAIRTYPE(void*, CLockLocation)& i : *lockstack)\n         if (i.first == cs)\n             return;\n     fprintf(stderr, \"Assertion failed: lock %s not held in %s:%i; locks held:\\n%s\", pszName, pszFile, nLine, LocksHeld().c_str());"
      },
      {
        "sha": "9888e1c248853fae7848e30f0ef5e07e319c9ba2",
        "filename": "src/timedata.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f94cce40a0eb7ee86f8d39b9eddfd36de52a232/src/timedata.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f94cce40a0eb7ee86f8d39b9eddfd36de52a232/src/timedata.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/timedata.cpp?ref=3f94cce40a0eb7ee86f8d39b9eddfd36de52a232",
        "patch": "@@ -15,8 +15,6 @@\n #include \"utilstrencodings.h\"\n #include \"warnings.h\"\n \n-#include <boost/foreach.hpp>\n-\n using namespace std;\n \n static CCriticalSection cs_nTimeOffset;\n@@ -97,7 +95,7 @@ void AddTimeData(const CNetAddr& ip, int64_t nOffsetSample)\n             {\n                 // If nobody has a time different than ours but within 5 minutes of ours, give a warning\n                 bool fMatch = false;\n-                BOOST_FOREACH(int64_t nOffset, vSorted)\n+                for (int64_t nOffset : vSorted)\n                     if (nOffset != 0 && abs64(nOffset) < 5 * 60)\n                         fMatch = true;\n \n@@ -111,7 +109,7 @@ void AddTimeData(const CNetAddr& ip, int64_t nOffsetSample)\n             }\n         }\n         \n-        BOOST_FOREACH(int64_t n, vSorted)\n+        for (int64_t n : vSorted)\n             LogPrint(\"net\", \"%+d  \", n);\n         LogPrint(\"net\", \"|  \");\n         "
      },
      {
        "sha": "99e82c4feb9cfed7748e2defff6bc34b65b96593",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f94cce40a0eb7ee86f8d39b9eddfd36de52a232/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f94cce40a0eb7ee86f8d39b9eddfd36de52a232/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=3f94cce40a0eb7ee86f8d39b9eddfd36de52a232",
        "patch": "@@ -17,7 +17,6 @@\n #include <boost/function.hpp>\n #include <boost/bind.hpp>\n #include <boost/signals2/signal.hpp>\n-#include <boost/foreach.hpp>\n #include <boost/algorithm/string/predicate.hpp>\n #include <boost/algorithm/string/split.hpp>\n #include <boost/algorithm/string/classification.hpp>\n@@ -430,7 +429,7 @@ void TorController::add_onion_cb(TorControlConnection& _conn, const TorControlRe\n {\n     if (reply.code == 250) {\n         LogPrint(\"tor\", \"tor: ADD_ONION successful\\n\");\n-        BOOST_FOREACH(const std::string &s, reply.lines) {\n+        for (const std::string &s : reply.lines) {\n             std::map<std::string,std::string> m = ParseTorReplyMapping(s);\n             std::map<std::string,std::string>::iterator i;\n             if ((i = m.find(\"ServiceID\")) != m.end())\n@@ -549,7 +548,7 @@ void TorController::protocolinfo_cb(TorControlConnection& _conn, const TorContro\n          * 250-AUTH METHODS=NULL\n          * 250-AUTH METHODS=HASHEDPASSWORD\n          */\n-        BOOST_FOREACH(const std::string &s, reply.lines) {\n+        for (const std::string &s : reply.lines) {\n             std::pair<std::string,std::string> l = SplitTorReplyLine(s);\n             if (l.first == \"AUTH\") {\n                 std::map<std::string,std::string> m = ParseTorReplyMapping(l.second);\n@@ -566,7 +565,7 @@ void TorController::protocolinfo_cb(TorControlConnection& _conn, const TorContro\n                 }\n             }\n         }\n-        BOOST_FOREACH(const std::string &s, methods) {\n+        for (const std::string &s : methods) {\n             LogPrint(\"tor\", \"tor: Supported authentication method: %s\\n\", s);\n         }\n         // Prefer NULL, otherwise SAFECOOKIE. If a password is provided, use HASHEDPASSWORD"
      },
      {
        "sha": "0a0dbb1f9df676b771f142ac68bd6b426429f8e0",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 26,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f94cce40a0eb7ee86f8d39b9eddfd36de52a232/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f94cce40a0eb7ee86f8d39b9eddfd36de52a232/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=3f94cce40a0eb7ee86f8d39b9eddfd36de52a232",
        "patch": "@@ -5,6 +5,8 @@\n \n #include \"txmempool.h\"\n \n+#include <boost/foreach.hpp>\n+\n #include \"clientversion.h\"\n #include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n@@ -91,12 +93,12 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n         setAllDescendants.insert(cit);\n         stageEntries.erase(cit);\n         const setEntries &setChildren = GetMemPoolChildren(cit);\n-        BOOST_FOREACH(const txiter childEntry, setChildren) {\n+        for (const txiter childEntry : setChildren) {\n             cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n             if (cacheIt != cachedDescendants.end()) {\n                 // We've already calculated this one, just add the entries for this set\n                 // but don't traverse again.\n-                BOOST_FOREACH(const txiter cacheEntry, cacheIt->second) {\n+                for (const txiter cacheEntry : cacheIt->second) {\n                     setAllDescendants.insert(cacheEntry);\n                 }\n             } else if (!setAllDescendants.count(childEntry)) {\n@@ -110,7 +112,7 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n     int64_t modifySize = 0;\n     CAmount modifyFee = 0;\n     int64_t modifyCount = 0;\n-    BOOST_FOREACH(txiter cit, setAllDescendants) {\n+    for (txiter cit : setAllDescendants) {\n         if (!setExclude.count(cit->GetTx().GetHash())) {\n             modifySize += cit->GetTxSize();\n             modifyFee += cit->GetModifiedFee();\n@@ -218,7 +220,7 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n         }\n \n         const setEntries & setMemPoolParents = GetMemPoolParents(stageit);\n-        BOOST_FOREACH(const txiter &phash, setMemPoolParents) {\n+        for (const txiter &phash : setMemPoolParents) {\n             // If this is a new ancestor, add it.\n             if (setAncestors.count(phash) == 0) {\n                 parentHashes.insert(phash);\n@@ -237,13 +239,13 @@ void CTxMemPool::UpdateAncestorsOf(bool add, txiter it, setEntries &setAncestors\n {\n     setEntries parentIters = GetMemPoolParents(it);\n     // add or remove this tx as a child of each parent\n-    BOOST_FOREACH(txiter piter, parentIters) {\n+    for (txiter piter : parentIters) {\n         UpdateChild(piter, it, add);\n     }\n     const int64_t updateCount = (add ? 1 : -1);\n     const int64_t updateSize = updateCount * it->GetTxSize();\n     const CAmount updateFee = updateCount * it->GetModifiedFee();\n-    BOOST_FOREACH(txiter ancestorIt, setAncestors) {\n+    for (txiter ancestorIt : setAncestors) {\n         mapTx.modify(ancestorIt, update_descendant_state(updateSize, updateFee, updateCount));\n     }\n }\n@@ -254,7 +256,7 @@ void CTxMemPool::UpdateEntryForAncestors(txiter it, const setEntries &setAncesto\n     int64_t updateSize = 0;\n     CAmount updateFee = 0;\n     int64_t updateSigOpsCost = 0;\n-    BOOST_FOREACH(txiter ancestorIt, setAncestors) {\n+    for (txiter ancestorIt : setAncestors) {\n         updateSize += ancestorIt->GetTxSize();\n         updateFee += ancestorIt->GetModifiedFee();\n         updateSigOpsCost += ancestorIt->GetSigOpCost();\n@@ -265,7 +267,7 @@ void CTxMemPool::UpdateEntryForAncestors(txiter it, const setEntries &setAncesto\n void CTxMemPool::UpdateChildrenForRemoval(txiter it)\n {\n     const setEntries &setMemPoolChildren = GetMemPoolChildren(it);\n-    BOOST_FOREACH(txiter updateIt, setMemPoolChildren) {\n+    for (txiter updateIt : setMemPoolChildren) {\n         UpdateParent(updateIt, it, false);\n     }\n }\n@@ -282,19 +284,19 @@ void CTxMemPool::UpdateForRemoveFromMempool(const setEntries &entriesToRemove, b\n         // Here we only update statistics and not data in mapLinks (which\n         // we need to preserve until we're finished with all operations that\n         // need to traverse the mempool).\n-        BOOST_FOREACH(txiter removeIt, entriesToRemove) {\n+        for (txiter removeIt : entriesToRemove) {\n             setEntries setDescendants;\n             CalculateDescendants(removeIt, setDescendants);\n             setDescendants.erase(removeIt); // don't update state for self\n             int64_t modifySize = -((int64_t)removeIt->GetTxSize());\n             CAmount modifyFee = -removeIt->GetModifiedFee();\n             int modifySigOps = -removeIt->GetSigOpCost();\n-            BOOST_FOREACH(txiter dit, setDescendants) {\n+            for (txiter dit : setDescendants) {\n                 mapTx.modify(dit, update_ancestor_state(modifySize, modifyFee, -1, modifySigOps));\n             }\n         }\n     }\n-    BOOST_FOREACH(txiter removeIt, entriesToRemove) {\n+    for (txiter removeIt : entriesToRemove) {\n         setEntries setAncestors;\n         const CTxMemPoolEntry &entry = *removeIt;\n         std::string dummy;\n@@ -323,7 +325,7 @@ void CTxMemPool::UpdateForRemoveFromMempool(const setEntries &entriesToRemove, b\n     // After updating all the ancestor sizes, we can now sever the link between each\n     // transaction being removed and any mempool children (ie, update setMemPoolParents\n     // for each direct child of a transaction being removed).\n-    BOOST_FOREACH(txiter removeIt, entriesToRemove) {\n+    for (txiter removeIt : entriesToRemove) {\n         UpdateChildrenForRemoval(removeIt);\n     }\n }\n@@ -431,7 +433,7 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n     // to clean up the mess we're leaving here.\n \n     // Update ancestors with information about this tx\n-    BOOST_FOREACH (const uint256 &phash, setParentTransactions) {\n+    for (const uint256 &phash : setParentTransactions) {\n         txiter pit = mapTx.find(phash);\n         if (pit != mapTx.end()) {\n             UpdateParent(newit, pit, true);\n@@ -453,7 +455,7 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n void CTxMemPool::removeUnchecked(txiter it)\n {\n     const uint256 hash = it->GetTx().GetHash();\n-    BOOST_FOREACH(const CTxIn& txin, it->GetTx().vin)\n+    for (const CTxIn& txin : it->GetTx().vin)\n         mapNextTx.erase(txin.prevout);\n \n     if (vTxHashes.size() > 1) {\n@@ -495,7 +497,7 @@ void CTxMemPool::CalculateDescendants(txiter entryit, setEntries &setDescendants\n         stage.erase(it);\n \n         const setEntries &setChildren = GetMemPoolChildren(it);\n-        BOOST_FOREACH(const txiter &childiter, setChildren) {\n+        for (const txiter &childiter : setChildren) {\n             if (!setDescendants.count(childiter)) {\n                 stage.insert(childiter);\n             }\n@@ -527,7 +529,7 @@ void CTxMemPool::removeRecursive(const CTransaction &origTx)\n             }\n         }\n         setEntries setAllRemoves;\n-        BOOST_FOREACH(txiter it, txToRemove) {\n+        for (txiter it : txToRemove) {\n             CalculateDescendants(it, setAllRemoves);\n         }\n         RemoveStaged(setAllRemoves, false);\n@@ -548,7 +550,7 @@ void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMem\n             // So it's critical that we remove the tx and not depend on the LockPoints.\n             txToRemove.insert(it);\n         } else if (it->GetSpendsCoinbase()) {\n-            BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+            for (const CTxIn& txin : tx.vin) {\n                 indexed_transaction_set::const_iterator it2 = mapTx.find(txin.prevout.hash);\n                 if (it2 != mapTx.end())\n                     continue;\n@@ -575,7 +577,7 @@ void CTxMemPool::removeConflicts(const CTransaction &tx)\n {\n     // Remove transactions which depend on inputs of tx, recursively\n     LOCK(cs);\n-    BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n+    for (const CTxIn &txin : tx.vin) {\n         auto it = mapNextTx.find(txin.prevout);\n         if (it != mapNextTx.end()) {\n             const CTransaction &txConflict = *it->second;\n@@ -671,7 +673,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n         setEntries setParentCheck;\n         int64_t parentSizes = 0;\n         int64_t parentSigOpCost = 0;\n-        BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n+        for (const CTxIn &txin : tx.vin) {\n             // Check that every mempool transaction's inputs refer to available coins, or other mempool tx's.\n             indexed_transaction_set::const_iterator it2 = mapTx.find(txin.prevout.hash);\n             if (it2 != mapTx.end()) {\n@@ -704,7 +706,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n         CAmount nFeesCheck = it->GetModifiedFee();\n         int64_t nSigOpCheck = it->GetSigOpCost();\n \n-        BOOST_FOREACH(txiter ancestorIt, setAncestors) {\n+        for (txiter ancestorIt : setAncestors) {\n             nSizeCheck += ancestorIt->GetTxSize();\n             nFeesCheck += ancestorIt->GetModifiedFee();\n             nSigOpCheck += ancestorIt->GetSigOpCost();\n@@ -934,7 +936,7 @@ void CTxMemPool::PrioritiseTransaction(const uint256 hash, const string strHash,\n             uint64_t nNoLimit = std::numeric_limits<uint64_t>::max();\n             std::string dummy;\n             CalculateMemPoolAncestors(*it, setAncestors, nNoLimit, nNoLimit, nNoLimit, nNoLimit, dummy, false);\n-            BOOST_FOREACH(txiter ancestorIt, setAncestors) {\n+            for (txiter ancestorIt : setAncestors) {\n                 mapTx.modify(ancestorIt, update_descendant_state(0, nFeeDelta, 0));\n             }\n         }\n@@ -994,7 +996,7 @@ size_t CTxMemPool::DynamicMemoryUsage() const {\n void CTxMemPool::RemoveStaged(setEntries &stage, bool updateDescendants) {\n     AssertLockHeld(cs);\n     UpdateForRemoveFromMempool(stage, updateDescendants);\n-    BOOST_FOREACH(const txiter& it, stage) {\n+    for (const txiter& it : stage) {\n         removeUnchecked(it);\n     }\n }\n@@ -1008,7 +1010,7 @@ int CTxMemPool::Expire(int64_t time) {\n         it++;\n     }\n     setEntries stage;\n-    BOOST_FOREACH(txiter removeit, toremove) {\n+    for (txiter removeit : toremove) {\n         CalculateDescendants(removeit, stage);\n     }\n     RemoveStaged(stage, false);\n@@ -1117,13 +1119,13 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<uint256>* pvNoSpendsRe\n         std::vector<CTransaction> txn;\n         if (pvNoSpendsRemaining) {\n             txn.reserve(stage.size());\n-            BOOST_FOREACH(txiter iter, stage)\n+            for (txiter iter : stage)\n                 txn.push_back(iter->GetTx());\n         }\n         RemoveStaged(stage, false);\n         if (pvNoSpendsRemaining) {\n-            BOOST_FOREACH(const CTransaction& tx, txn) {\n-                BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+            for (const CTransaction& tx : txn) {\n+                for (const CTxIn& txin : tx.vin) {\n                     if (exists(txin.prevout.hash))\n                         continue;\n                     auto iter = mapNextTx.lower_bound(COutPoint(txin.prevout.hash, 0));"
      },
      {
        "sha": "60fe1815ca200213b3177f4b07825a86066b89f5",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f94cce40a0eb7ee86f8d39b9eddfd36de52a232/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f94cce40a0eb7ee86f8d39b9eddfd36de52a232/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=3f94cce40a0eb7ee86f8d39b9eddfd36de52a232",
        "patch": "@@ -77,7 +77,6 @@\n #include <boost/algorithm/string/predicate.hpp> // for startswith() and endswith()\n #include <boost/filesystem.hpp>\n #include <boost/filesystem/fstream.hpp>\n-#include <boost/foreach.hpp>\n #include <boost/program_options/detail/config_file.hpp>\n #include <boost/program_options/parsers.hpp>\n #include <boost/thread.hpp>"
      },
      {
        "sha": "4ae3d4b817b9ef6bc9fe515e97a9cd5319b4f589",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 20,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f94cce40a0eb7ee86f8d39b9eddfd36de52a232/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f94cce40a0eb7ee86f8d39b9eddfd36de52a232/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=3f94cce40a0eb7ee86f8d39b9eddfd36de52a232",
        "patch": "@@ -45,6 +45,7 @@\n #include <boost/filesystem/fstream.hpp>\n #include <boost/math/distributions/poisson.hpp>\n #include <boost/thread.hpp>\n+#include <boost/foreach.hpp>\n \n using namespace std;\n \n@@ -159,7 +160,7 @@ namespace {\n CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator)\n {\n     // Find the first block the caller has in the main chain\n-    BOOST_FOREACH(const uint256& hash, locator.vHave) {\n+    for (const uint256& hash : locator.vHave) {\n         BlockMap::iterator mi = mapBlockIndex.find(hash);\n         if (mi != mapBlockIndex.end())\n         {\n@@ -391,7 +392,7 @@ bool CheckSequenceLocks(const CTransaction &tx, int flags, LockPoints* lp, bool\n             // lock on a mempool input, so we can use the return value of\n             // CheckSequenceLocks to indicate the LockPoints validity\n             int maxInputHeight = 0;\n-            BOOST_FOREACH(int height, prevheights) {\n+            for (int height : prevheights) {\n                 // Can ignore mempool inputs since we'll fail if they had non-zero locks\n                 if (height != tip->nHeight+1) {\n                     maxInputHeight = std::max(maxInputHeight, height);\n@@ -512,7 +513,7 @@ void LimitMempoolSize(CTxMemPool& pool, size_t limit, unsigned long age) {\n \n     std::vector<uint256> vNoSpendsRemaining;\n     pool.TrimToSize(limit, &vNoSpendsRemaining);\n-    BOOST_FOREACH(const uint256& removed, vNoSpendsRemaining)\n+    for (const uint256& removed : vNoSpendsRemaining)\n         pcoinsTip->Uncache(removed);\n }\n \n@@ -567,7 +568,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n     set<uint256> setConflicts;\n     {\n     LOCK(pool.cs); // protect pool.mapNextTx\n-    BOOST_FOREACH(const CTxIn &txin, tx.vin)\n+    for (const CTxIn &txin : tx.vin)\n     {\n         auto itConflicting = pool.mapNextTx.find(txin.prevout);\n         if (itConflicting != pool.mapNextTx.end())\n@@ -590,7 +591,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n                 bool fReplacementOptOut = true;\n                 if (fEnableReplacement)\n                 {\n-                    BOOST_FOREACH(const CTxIn &_txin, ptxConflicting->vin)\n+                    for (const CTxIn &_txin : ptxConflicting->vin)\n                     {\n                         if (_txin.nSequence < std::numeric_limits<unsigned int>::max()-1)\n                         {\n@@ -630,7 +631,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         // do all inputs exist?\n         // Note that this does not check for the presence of actual outputs (see the next check for that),\n         // and only helps with filling in pfMissingInputs (to determine missing vs spent).\n-        BOOST_FOREACH(const CTxIn txin, tx.vin) {\n+        for (const CTxIn txin : tx.vin) {\n             if (!pcoinsTip->HaveCoinsInCache(txin.prevout.hash))\n                 vHashTxnToUncache.push_back(txin.prevout.hash);\n             if (!view.HaveCoins(txin.prevout.hash)) {\n@@ -684,7 +685,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         // Keep track of transactions that spend a coinbase, which we re-scan\n         // during reorgs to ensure COINBASE_MATURITY is still met.\n         bool fSpendsCoinbase = false;\n-        BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n+        for (const CTxIn &txin : tx.vin) {\n             const CCoins *coins = view.AccessCoins(txin.prevout.hash);\n             if (coins->IsCoinBase()) {\n                 fSpendsCoinbase = true;\n@@ -755,7 +756,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         // that we have the set of all ancestors we can detect this\n         // pathological case by making sure setConflicts and setAncestors don't\n         // intersect.\n-        BOOST_FOREACH(CTxMemPool::txiter ancestorIt, setAncestors)\n+        for (CTxMemPool::txiter ancestorIt : setAncestors)\n         {\n             const uint256 &hashAncestor = ancestorIt->GetTx().GetHash();\n             if (setConflicts.count(hashAncestor))\n@@ -785,7 +786,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n             set<uint256> setConflictsParents;\n             const int maxDescendantsToVisit = 100;\n             CTxMemPool::setEntries setIterConflicting;\n-            BOOST_FOREACH(const uint256 &hashConflicting, setConflicts)\n+            for (const uint256 &hashConflicting : setConflicts)\n             {\n                 CTxMemPool::txiter mi = pool.mapTx.find(hashConflicting);\n                 if (mi == pool.mapTx.end())\n@@ -821,7 +822,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n                                   oldFeeRate.ToString()));\n                 }\n \n-                BOOST_FOREACH(const CTxIn &txin, mi->GetTx().vin)\n+                for (const CTxIn &txin : mi->GetTx().vin)\n                 {\n                     setConflictsParents.insert(txin.prevout.hash);\n                 }\n@@ -834,10 +835,10 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n             if (nConflictingCount <= maxDescendantsToVisit) {\n                 // If not too many to replace, then calculate the set of\n                 // transactions that would have to be evicted\n-                BOOST_FOREACH(CTxMemPool::txiter it, setIterConflicting) {\n+                for (CTxMemPool::txiter it : setIterConflicting) {\n                     pool.CalculateDescendants(it, allConflicting);\n                 }\n-                BOOST_FOREACH(CTxMemPool::txiter it, allConflicting) {\n+                for (CTxMemPool::txiter it : allConflicting) {\n                     nConflictingFees += it->GetModifiedFee();\n                     nConflictingSize += it->GetTxSize();\n                 }\n@@ -930,7 +931,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         }\n \n         // Remove conflicting transactions from the mempool\n-        BOOST_FOREACH(const CTxMemPool::txiter it, allConflicting)\n+        for (const CTxMemPool::txiter it : allConflicting)\n         {\n             LogPrint(\"mempool\", \"replacing tx %s with %s for %s BTC additional fees, %d delta bytes\\n\",\n                     it->GetTx().GetHash().ToString(),\n@@ -962,7 +963,7 @@ bool AcceptToMemoryPoolWithTime(CTxMemPool& pool, CValidationState &state, const\n     std::vector<uint256> vHashTxToUncache;\n     bool res = AcceptToMemoryPoolWorker(pool, state, tx, fLimitFree, pfMissingInputs, nAcceptTime, fOverrideMempoolLimit, nAbsurdFee, vHashTxToUncache);\n     if (!res) {\n-        BOOST_FOREACH(const uint256& hashTx, vHashTxToUncache)\n+        for (const uint256& hashTx : vHashTxToUncache)\n             pcoinsTip->Uncache(hashTx);\n     }\n     // After we've (potentially) uncached entries, ensure our coins cache is still within its size limits\n@@ -1267,7 +1268,7 @@ void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, CTxUndo &txund\n     // mark inputs spent\n     if (!tx.IsCoinBase()) {\n         txundo.vprevout.reserve(tx.vin.size());\n-        BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n+        for (const CTxIn &txin : tx.vin) {\n             CCoinsModifier coins = inputs.ModifyCoins(txin.prevout.hash);\n             unsigned nPos = txin.prevout.n;\n \n@@ -3177,7 +3178,7 @@ bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams,\n uint64_t CalculateCurrentUsage()\n {\n     uint64_t retval = 0;\n-    BOOST_FOREACH(const CBlockFileInfo &file, vinfoBlockFile) {\n+    for (const CBlockFileInfo &file : vinfoBlockFile) {\n         retval += file.nSize + file.nUndoSize;\n     }\n     return retval;\n@@ -3351,13 +3352,13 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams)\n     // Calculate nChainWork\n     vector<pair<int, CBlockIndex*> > vSortedByHeight;\n     vSortedByHeight.reserve(mapBlockIndex.size());\n-    BOOST_FOREACH(const PAIRTYPE(uint256, CBlockIndex*)& item, mapBlockIndex)\n+    for (const PAIRTYPE(uint256, CBlockIndex*)& item : mapBlockIndex)\n     {\n         CBlockIndex* pindex = item.second;\n         vSortedByHeight.push_back(make_pair(pindex->nHeight, pindex));\n     }\n     sort(vSortedByHeight.begin(), vSortedByHeight.end());\n-    BOOST_FOREACH(const PAIRTYPE(int, CBlockIndex*)& item, vSortedByHeight)\n+    for (const PAIRTYPE(int, CBlockIndex*)& item : vSortedByHeight)\n     {\n         CBlockIndex* pindex = item.second;\n         pindex->nChainWork = (pindex->pprev ? pindex->pprev->nChainWork : 0) + GetBlockProof(*pindex);\n@@ -3405,7 +3406,7 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams)\n     // Check presence of blk files\n     LogPrintf(\"Checking all blk files are present...\\n\");\n     set<int> setBlkDataFiles;\n-    BOOST_FOREACH(const PAIRTYPE(uint256, CBlockIndex*)& item, mapBlockIndex)\n+    for (const PAIRTYPE(uint256, CBlockIndex*)& item : mapBlockIndex)\n     {\n         CBlockIndex* pindex = item.second;\n         if (pindex->nStatus & BLOCK_HAVE_DATA) {\n@@ -3659,7 +3660,7 @@ void UnloadBlockIndex()\n         warningcache[b].clear();\n     }\n \n-    BOOST_FOREACH(BlockMap::value_type& entry, mapBlockIndex) {\n+    for (BlockMap::value_type& entry : mapBlockIndex) {\n         delete entry.second;\n     }\n     mapBlockIndex.clear();"
      }
    ]
  }
]