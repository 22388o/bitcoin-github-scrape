[
  {
    "sha": "5e3600ebf7f1a7667624b8a10f2c70bfd4a789e9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZTM2MDBlYmY3ZjFhNzY2NzYyNGI4YTEwZjJjNzBiZmQ0YTc4OWU5",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2017-10-10T06:04:13Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2017-11-21T23:42:56Z"
      },
      "message": "Add option to avoid warning on certain network upgrades\n\nThe \"-vbignore=bit:start:end\" option can be used to prevent bitcoin\nfrom alerting the user of known but uninteresting proposed upgrades\nthat are being signalled via the version field.",
      "tree": {
        "sha": "1293f7413b1c708b132447a546d1eb12806cdc08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1293f7413b1c708b132447a546d1eb12806cdc08"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5e3600ebf7f1a7667624b8a10f2c70bfd4a789e9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e3600ebf7f1a7667624b8a10f2c70bfd4a789e9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5e3600ebf7f1a7667624b8a10f2c70bfd4a789e9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e3600ebf7f1a7667624b8a10f2c70bfd4a789e9/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d4267a3ab271d9affd3c1b0c2e30062490af804e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4267a3ab271d9affd3c1b0c2e30062490af804e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d4267a3ab271d9affd3c1b0c2e30062490af804e"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 61,
      "deletions": 5
    },
    "files": [
      {
        "sha": "07d2bf6f7952bab3f20bbe232dd0522a9fbb43b7",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e3600ebf7f1a7667624b8a10f2c70bfd4a789e9/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e3600ebf7f1a7667624b8a10f2c70bfd4a789e9/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=5e3600ebf7f1a7667624b8a10f2c70bfd4a789e9",
        "patch": "@@ -439,6 +439,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT));\n         strUsage += HelpMessageOpt(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT));\n         strUsage += HelpMessageOpt(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\");\n+        strUsage += HelpMessageOpt(\"-vbignore=bit:start:end\", \"Ignore use of given version bit between given start/end times\");\n     }\n     strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +\n         _(\"If <category> is not supplied or if <category> = 1, output all debugging information.\") + \" \" + _(\"<category> can be:\") + \" \" + ListLogCategories() + \".\");\n@@ -1108,6 +1109,30 @@ bool AppInitParameterInteraction()\n         fEnableReplacement = (std::find(vstrReplacementModes.begin(), vstrReplacementModes.end(), \"fee\") != vstrReplacementModes.end());\n     }\n \n+    if (gArgs.IsArgSet(\"-vbignore\")) {\n+        // Allow ignoring version bit parameters for forks that you will not enforce\n+        for (const std::string& strIgnoreVersionBits : gArgs.GetArgs(\"-vbignore\")) {\n+            std::vector<std::string> vIgnore;\n+            boost::split(vIgnore, strIgnoreVersionBits, boost::is_any_of(\":\"));\n+            if (vIgnore.size() != 3) {\n+                return InitError(\"Version bits ignore instruction malformed, expecting bit:start:end\");\n+            }\n+            int64_t nBeginTime, nEndTime;\n+            int32_t nBit;\n+            if (!ParseInt32(vIgnore[0], &nBit) || nBit < 0 || nBit > 28) {\n+                return InitError(strprintf(\"Invalid version bit (%s)\", vIgnore[0]));\n+            }\n+            if (!ParseInt64(vIgnore[1], &nBeginTime)) {\n+                return InitError(strprintf(\"Invalid start time (%s)\", vIgnore[1]));\n+            }\n+            if (!ParseInt64(vIgnore[2], &nEndTime)) {\n+                return InitError(strprintf(\"Invalid end time (%s)\", vIgnore[2]));\n+            }\n+            LogPrintf(\"Ignoring version bit %d from start=%ld, end=%ld\\n\", nBit, nBeginTime, nEndTime);\n+            ignorebits.emplace_back(nBit, nBeginTime, nEndTime);\n+        }\n+    }\n+\n     if (gArgs.IsArgSet(\"-vbparams\")) {\n         // Allow overriding version bits parameters for testing\n         if (!chainparams.MineBlocksOnDemand()) {"
      },
      {
        "sha": "60c3df2244cd7f529f2ab3a713bcd885dec770da",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e3600ebf7f1a7667624b8a10f2c70bfd4a789e9/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e3600ebf7f1a7667624b8a10f2c70bfd4a789e9/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=5e3600ebf7f1a7667624b8a10f2c70bfd4a789e9",
        "patch": "@@ -128,7 +128,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     assert(pindexPrev != nullptr);\n     nHeight = pindexPrev->nHeight + 1;\n \n-    pblock->nVersion = ComputeBlockVersion(pindexPrev, chainparams.GetConsensus());\n+    pblock->nVersion = ComputeBlockVersion(pindexPrev, chainparams.GetConsensus(), IgnoreBitsMode::ibmFALSE);\n     // -regtest only: allow overriding block.nVersion with\n     // -blockversion=N to test forking scenarios\n     if (chainparams.MineBlocksOnDemand())"
      },
      {
        "sha": "4490c13643b4b0906735a2e4b5a09d80f73ed519",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 3,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e3600ebf7f1a7667624b8a10f2c70bfd4a789e9/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e3600ebf7f1a7667624b8a10f2c70bfd4a789e9/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=5e3600ebf7f1a7667624b8a10f2c70bfd4a789e9",
        "patch": "@@ -1565,8 +1565,9 @@ void ThreadScriptCheck() {\n \n // Protected by cs_main\n VersionBitsCache versionbitscache;\n+std::vector<IgnoreVersionBits> ignorebits;\n \n-int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n+int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params, IgnoreBitsMode use_ignorebits)\n {\n     LOCK(cs_main);\n     int32_t nVersion = VERSIONBITS_TOP_BITS;\n@@ -1577,6 +1578,14 @@ int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Para\n             nVersion |= VersionBitsMask(params, (Consensus::DeploymentPos)i);\n         }\n     }\n+    if (use_ignorebits == IgnoreBitsMode::ibmTRUE) {\n+        int64_t mtp = (pindexPrev == nullptr ? 0 : pindexPrev->GetMedianTimePast());\n+        for (const auto& ib : ignorebits) {\n+            if (ib.beginTime <= mtp && mtp < ib.endTime) {\n+                nVersion |= (((uint32_t)1) << ib.bit);\n+            }\n+        }\n+    }\n \n     return nVersion;\n }\n@@ -1601,7 +1610,7 @@ class WarningBitsConditionChecker : public AbstractThresholdConditionChecker\n     {\n         return ((pindex->nVersion & VERSIONBITS_TOP_MASK) == VERSIONBITS_TOP_BITS) &&\n                ((pindex->nVersion >> bit) & 1) != 0 &&\n-               ((ComputeBlockVersion(pindex->pprev, params) >> bit) & 1) == 0;\n+               ((ComputeBlockVersion(pindex->pprev, params, IgnoreBitsMode::ibmTRUE) >> bit) & 1) == 0;\n     }\n };\n \n@@ -2058,7 +2067,7 @@ void static UpdateTip(CBlockIndex *pindexNew, const CChainParams& chainParams) {\n         // Check the version of the last 100 blocks to see if we need to upgrade:\n         for (int i = 0; i < 100 && pindex != nullptr; i++)\n         {\n-            int32_t nExpectedVersion = ComputeBlockVersion(pindex->pprev, chainParams.GetConsensus());\n+            int32_t nExpectedVersion = ComputeBlockVersion(pindex->pprev, chainParams.GetConsensus(), IgnoreBitsMode::ibmTRUE);\n             if (pindex->nVersion > VERSIONBITS_LAST_OLD_BLOCK_VERSION && (pindex->nVersion & ~nExpectedVersion) != 0)\n                 ++nUpgraded;\n             pindex = pindex->pprev;"
      },
      {
        "sha": "0c6de7ecb4661a5f90b73f9743075eeec14ae0e0",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e3600ebf7f1a7667624b8a10f2c70bfd4a789e9/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e3600ebf7f1a7667624b8a10f2c70bfd4a789e9/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=5e3600ebf7f1a7667624b8a10f2c70bfd4a789e9",
        "patch": "@@ -461,10 +461,20 @@ int GetSpendHeight(const CCoinsViewCache& inputs);\n \n extern VersionBitsCache versionbitscache;\n \n+/**\n+ * Ignorable version bits\n+ */\n+extern std::vector<IgnoreVersionBits> ignorebits;\n+enum class IgnoreBitsMode {\n+  ibmFALSE = 0,\n+  ibmTRUE = 1,\n+};\n+\n /**\n  * Determine what nVersion a new block should use.\n  */\n-int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params);\n+\n+int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params, IgnoreBitsMode use_ignorebits = IgnoreBitsMode::ibmFALSE);\n \n /** Reject codes greater or equal to this can be returned by AcceptToMemPool\n  * for transactions, to signal internal conditions. They cannot and should not"
      },
      {
        "sha": "4af9a376720099477c6c91957691384682708d4a",
        "filename": "src/versionbits.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e3600ebf7f1a7667624b8a10f2c70bfd4a789e9/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e3600ebf7f1a7667624b8a10f2c70bfd4a789e9/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=5e3600ebf7f1a7667624b8a10f2c70bfd4a789e9",
        "patch": "@@ -72,6 +72,18 @@ struct VersionBitsCache\n     void Clear();\n };\n \n+struct IgnoreVersionBits {\n+    int bit;\n+    int64_t beginTime;\n+    int64_t endTime;\n+\n+    IgnoreVersionBits(int _bit, int64_t _begin, int64_t _end)\n+        : bit(_bit), beginTime(_begin), endTime(_end)\n+    {\n+    }\n+};\n+\n+\n ThresholdState VersionBitsState(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache);\n BIP9Stats VersionBitsStatistics(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos);\n int VersionBitsStateSinceHeight(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache);"
      }
    ]
  },
  {
    "sha": "98b8d66c303d793373bfbb14b7d3660e783e902b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OGI4ZDY2YzMwM2Q3OTMzNzNiZmJiMTRiN2QzNjYwZTc4M2U5MDJi",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2017-10-10T06:53:05Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2017-11-21T23:42:56Z"
      },
      "message": "Ignore signalling for irrelevant forks\n\nThis provides the ability to specify irrelevant versionbit signalling\nas part of the chain parameters, in order to avoid issuing warnings for\npossible consensus changes. The \"-novbignoredefaults\" option can be used\nto disable this behaviour.\n\nThis patch ignores signalling for BIP109 via bit 28 in 2016/2017 on\ntestnet via this mechanism.",
      "tree": {
        "sha": "edc458de580e11bb8bcde54de0cb72f6bb35d3a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/edc458de580e11bb8bcde54de0cb72f6bb35d3a0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/98b8d66c303d793373bfbb14b7d3660e783e902b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98b8d66c303d793373bfbb14b7d3660e783e902b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/98b8d66c303d793373bfbb14b7d3660e783e902b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98b8d66c303d793373bfbb14b7d3660e783e902b/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5e3600ebf7f1a7667624b8a10f2c70bfd4a789e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e3600ebf7f1a7667624b8a10f2c70bfd4a789e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5e3600ebf7f1a7667624b8a10f2c70bfd4a789e9"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 22,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8f8b541164ab2e2bd387bd153d20260f47708c7d",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98b8d66c303d793373bfbb14b7d3660e783e902b/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98b8d66c303d793373bfbb14b7d3660e783e902b/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=98b8d66c303d793373bfbb14b7d3660e783e902b",
        "patch": "@@ -5,6 +5,7 @@\n \n #include <chainparams.h>\n #include <consensus/merkle.h>\n+#include <versionbits.h>\n \n #include <tinyformat.h>\n #include <util.h>\n@@ -171,6 +172,8 @@ class CMainParams : public CChainParams {\n                         //   (the tx=... number in the SetBestChain debug.log lines)\n             3.1         // * estimated number of transactions per second after that timestamp\n         };\n+\n+        vIgnoreBits.clear();\n     }\n };\n \n@@ -261,6 +264,12 @@ class CTestNetParams : public CChainParams {\n             0.15\n         };\n \n+        vIgnoreBits.clear();\n+        vIgnoreBits.emplace_back(\n+            28,         // BIP 109 by Bitcoin Classic\n+            1453334400, // 2016-01-21 00:00:00 +0000\n+            1514764800  // 2018-01-01 00:00:00 +0000\n+            );\n     }\n };\n \n@@ -331,6 +340,8 @@ class CRegTestParams : public CChainParams {\n             0\n         };\n \n+        vIgnoreBits.clear();\n+\n         base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,111);\n         base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,196);\n         base58Prefixes[SECRET_KEY] =     std::vector<unsigned char>(1,239);"
      },
      {
        "sha": "57b09b6ef062cff8fa891a29870006deeb593ec8",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98b8d66c303d793373bfbb14b7d3660e783e902b/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98b8d66c303d793373bfbb14b7d3660e783e902b/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=98b8d66c303d793373bfbb14b7d3660e783e902b",
        "patch": "@@ -10,6 +10,7 @@\n #include <consensus/params.h>\n #include <primitives/block.h>\n #include <protocol.h>\n+#include <versionbits.h>\n \n #include <memory>\n #include <vector>\n@@ -77,6 +78,7 @@ class CChainParams\n     const std::vector<SeedSpec6>& FixedSeeds() const { return vFixedSeeds; }\n     const CCheckpointData& Checkpoints() const { return checkpointData; }\n     const ChainTxData& TxData() const { return chainTxData; }\n+    const std::vector<IgnoreVersionBits>& IgnoreBits() const { return vIgnoreBits; }\n     void UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout);\n protected:\n     CChainParams() {}\n@@ -96,6 +98,7 @@ class CChainParams\n     bool fMineBlocksOnDemand;\n     CCheckpointData checkpointData;\n     ChainTxData chainTxData;\n+    std::vector<IgnoreVersionBits> vIgnoreBits;\n };\n \n /**"
      },
      {
        "sha": "35ae2e9c1973a8a7c23db23e72e1b5c3cb9696a4",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98b8d66c303d793373bfbb14b7d3660e783e902b/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98b8d66c303d793373bfbb14b7d3660e783e902b/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=98b8d66c303d793373bfbb14b7d3660e783e902b",
        "patch": "@@ -71,6 +71,7 @@ bool fFeeEstimatesInitialized = false;\n static const bool DEFAULT_PROXYRANDOMIZE = true;\n static const bool DEFAULT_REST_ENABLE = false;\n static const bool DEFAULT_STOPAFTERBLOCKIMPORT = false;\n+static const bool DEFAULT_VB_IGNORE_DEFAULTS = true;\n \n std::unique_ptr<CConnman> g_connman;\n std::unique_ptr<PeerLogicValidation> peerLogic;\n@@ -440,6 +441,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT));\n         strUsage += HelpMessageOpt(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\");\n         strUsage += HelpMessageOpt(\"-vbignore=bit:start:end\", \"Ignore use of given version bit between given start/end times\");\n+        strUsage += HelpMessageOpt(\"-vbignoredefaults=<n>\", strprintf(\"Ignore version bits per chain defaults (default: %u).\", DEFAULT_VB_IGNORE_DEFAULTS));\n     }\n     strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +\n         _(\"If <category> is not supplied or if <category> = 1, output all debugging information.\") + \" \" + _(\"<category> can be:\") + \" \" + ListLogCategories() + \".\");\n@@ -1109,6 +1111,12 @@ bool AppInitParameterInteraction()\n         fEnableReplacement = (std::find(vstrReplacementModes.begin(), vstrReplacementModes.end(), \"fee\") != vstrReplacementModes.end());\n     }\n \n+    if (gArgs.GetBoolArg(\"-vbignoredefaults\", DEFAULT_VB_IGNORE_DEFAULTS)) {\n+        for (const IgnoreVersionBits& ivb : chainparams.IgnoreBits()) {\n+            LogPrintf(\"Ignoring version bit %d from start=%ld, end=%ld (default)\\n\", ivb.bit, ivb.beginTime, ivb.endTime);\n+            ignorebits.push_back(ivb);\n+        }\n+    }\n     if (gArgs.IsArgSet(\"-vbignore\")) {\n         // Allow ignoring version bit parameters for forks that you will not enforce\n         for (const std::string& strIgnoreVersionBits : gArgs.GetArgs(\"-vbignore\")) {"
      }
    ]
  }
]