[
  {
    "sha": "bfc96207998c284e2cb6eb99c99b755a161e723d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZmM5NjIwNzk5OGMyODRlMmNiNmViOTljOTliNzU1YTE2MWU3MjNk",
    "commit": {
      "author": {
        "name": "Alexander Kjeldaas",
        "email": "alexander.kjeldaas@gmail.com",
        "date": "2012-11-11T06:11:13Z"
      },
      "committer": {
        "name": "Alexander Kjeldaas",
        "email": "alexander.kjeldaas@gmail.com",
        "date": "2012-11-14T03:00:23Z"
      },
      "message": "Simplify CMutexLock\n\no Remove unused Leave and GetLock functions\no Make Enter and TryEnter private.\no Simplify Enter and TryEnter.\n  boost::unique_lock doesn't really know whether the\n  mutex it wraps is locked or not when the defer_lock\n  option is used.\n  The boost::recursive_mutex does not expose this\n  information, so unique_lock only infers this\n  knowledge.  When taking the lock is defered, it\n  (randomly) assumes that the lock is not taken.\n  boost::unique_lock has the following definition:\n\n        unique_lock(Mutex& m_,defer_lock_t):\n            m(&m_),is_locked(false)\n        {}\n\n        bool owns_lock() const\n        {\n            return is_locked;\n        }\n  Thus it is a mistake to check owns_lock() in Enter\n  and TryEnter - they will always return false.",
      "tree": {
        "sha": "205ae4cdb170e1fbb30a8891dbac4d5db622d499",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/205ae4cdb170e1fbb30a8891dbac4d5db622d499"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bfc96207998c284e2cb6eb99c99b755a161e723d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfc96207998c284e2cb6eb99c99b755a161e723d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bfc96207998c284e2cb6eb99c99b755a161e723d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfc96207998c284e2cb6eb99c99b755a161e723d/comments",
    "author": {
      "login": "alexanderkjeldaas",
      "id": 339369,
      "node_id": "MDQ6VXNlcjMzOTM2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/339369?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexanderkjeldaas",
      "html_url": "https://github.com/alexanderkjeldaas",
      "followers_url": "https://api.github.com/users/alexanderkjeldaas/followers",
      "following_url": "https://api.github.com/users/alexanderkjeldaas/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexanderkjeldaas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexanderkjeldaas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexanderkjeldaas/subscriptions",
      "organizations_url": "https://api.github.com/users/alexanderkjeldaas/orgs",
      "repos_url": "https://api.github.com/users/alexanderkjeldaas/repos",
      "events_url": "https://api.github.com/users/alexanderkjeldaas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexanderkjeldaas/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "alexanderkjeldaas",
      "id": 339369,
      "node_id": "MDQ6VXNlcjMzOTM2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/339369?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexanderkjeldaas",
      "html_url": "https://github.com/alexanderkjeldaas",
      "followers_url": "https://api.github.com/users/alexanderkjeldaas/followers",
      "following_url": "https://api.github.com/users/alexanderkjeldaas/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexanderkjeldaas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexanderkjeldaas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexanderkjeldaas/subscriptions",
      "organizations_url": "https://api.github.com/users/alexanderkjeldaas/orgs",
      "repos_url": "https://api.github.com/users/alexanderkjeldaas/repos",
      "events_url": "https://api.github.com/users/alexanderkjeldaas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexanderkjeldaas/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6ca2ea2fa2465c80f60830241d53cbd278870288",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ca2ea2fa2465c80f60830241d53cbd278870288",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6ca2ea2fa2465c80f60830241d53cbd278870288"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 10,
      "deletions": 30
    },
    "files": [
      {
        "sha": "9dfc6697c6b5771c58dae086c53660df4ea878af",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 10,
        "deletions": 30,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfc96207998c284e2cb6eb99c99b755a161e723d/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfc96207998c284e2cb6eb99c99b755a161e723d/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=bfc96207998c284e2cb6eb99c99b755a161e723d",
        "patch": "@@ -37,46 +37,31 @@ class CMutexLock\n {\n private:\n     boost::unique_lock<Mutex> lock;\n-public:\n \n     void Enter(const char* pszName, const char* pszFile, int nLine)\n     {\n-        if (!lock.owns_lock())\n-        {\n-            EnterCritical(pszName, pszFile, nLine, (void*)(lock.mutex()));\n+        EnterCritical(pszName, pszFile, nLine, (void*)(lock.mutex()));\n #ifdef DEBUG_LOCKCONTENTION\n-            if (!lock.try_lock())\n-            {\n-                PrintLockContention(pszName, pszFile, nLine);\n+        if (!lock.try_lock())\n+        {\n+            PrintLockContention(pszName, pszFile, nLine);\n #endif\n-            lock.lock();\n+        lock.lock();\n #ifdef DEBUG_LOCKCONTENTION\n-            }\n-#endif\n-        }\n-    }\n-\n-    void Leave()\n-    {\n-        if (lock.owns_lock())\n-        {\n-            lock.unlock();\n-            LeaveCritical();\n         }\n+#endif\n     }\n \n     bool TryEnter(const char* pszName, const char* pszFile, int nLine)\n     {\n+        EnterCritical(pszName, pszFile, nLine, (void*)(lock.mutex()), true);\n+        lock.try_lock();\n         if (!lock.owns_lock())\n-        {\n-            EnterCritical(pszName, pszFile, nLine, (void*)(lock.mutex()), true);\n-            lock.try_lock();\n-            if (!lock.owns_lock())\n-                LeaveCritical();\n-        }\n+            LeaveCritical();\n         return lock.owns_lock();\n     }\n \n+public:\n     CMutexLock(Mutex& mutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false) : lock(mutexIn, boost::defer_lock)\n     {\n         if (fTry)\n@@ -95,11 +80,6 @@ class CMutexLock\n     {\n         return lock.owns_lock();\n     }\n-\n-    boost::unique_lock<Mutex> &GetLock()\n-    {\n-        return lock;\n-    }\n };\n \n typedef CMutexLock<CCriticalSection> CCriticalBlock;"
      }
    ]
  }
]