[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/426913811",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14387#issuecomment-426913811",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14387",
    "id": 426913811,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNjkxMzgxMQ==",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-04T07:29:16Z",
    "updated_at": "2018-10-04T07:29:16Z",
    "author_association": "MEMBER",
    "body": "Can you post \"typical\" case benchmark comparisons?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/426913811/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/426933620",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14387#issuecomment-426933620",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14387",
    "id": 426933620,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNjkzMzYyMA==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-04T08:38:43Z",
    "updated_at": "2018-11-02T15:05:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#14400](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14400.html) (Add Benchmark to test input de-duplication worst case by JeremyRubin)\n* [#14397](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14397.html) (Faster duplicate input check in CheckTransaction (alternative to #14387) by sipa)\n* [#14074](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14074.html) (Use std::unordered_set instead of set in blockfilter interface by jimpo)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/426933620/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/426939786",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14387#issuecomment-426939786",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14387",
    "id": 426939786,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNjkzOTc4Ng==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-04T08:58:00Z",
    "updated_at": "2018-10-04T08:58:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "@JeremyRubin Impressive speedup! What is the risk-reward trade-off we're facing with this change? More specifically: what risks do you see associated with this change to consensus critical code?\r\n\r\nDoes the change in which DoS error gets reported for transactions which have both duplicates and null inputs have any consequences or impose any risks?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/426939786/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/427202088",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14387#issuecomment-427202088",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14387",
    "id": 427202088,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzIwMjA4OA==",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?u=4a9af998e1a560b3f49c3827f453e1bcbe6a5cfb&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-04T23:33:33Z",
    "updated_at": "2018-10-04T23:33:33Z",
    "author_association": "MEMBER",
    "body": "Anyone measured `-reindex` with and without this change? ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/427202088/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/427265702",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14387#issuecomment-427265702",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14387",
    "id": 427265702,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzI2NTcwMg==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-05T07:00:01Z",
    "updated_at": "2018-10-05T07:00:01Z",
    "author_association": "MEMBER",
    "body": "My immediate reaction is that this seems very complex compared to a naive std::set comparison! This also pulls our SipHash implementation into consensus-critical code, which seems like a big price to pay for a performance win. I lean pretty strongly towards concept NACK.\r\n\r\n@JeremyRubin - your PR description talks about what this PR does, but not why. This makes block propagation faster, but do we have an understanding of how much these milliseconds matter? Is there a way we can determine whether the increased complexity introduced is a reasonable price to pay for the performance win?\r\n\r\nAlso, +1 to @MarcoFalke's comment here: https://github.com/bitcoin/bitcoin/pull/14387#discussion_r222560971 . Can reviewers *please* not start nitting code before there's been a concept discussion. ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/427265702/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/427267896",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14387#issuecomment-427267896",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14387",
    "id": 427267896,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzI2Nzg5Ng==",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?u=8cdd8653982252593843d7369ecfebe432b89768&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-05T07:10:31Z",
    "updated_at": "2018-10-05T07:10:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "Goal was to minimize the performance regression caused by the CVE fix. Understand this is sensitive code for that reason. This code is also generally theoretically useful for several other contexts because it is O(N). An adapted version (different parameters) could be used to check for duplicate inputs across a large number of txns (e.g., mempool syncing context).\r\n\r\n\r\nIt's actually not thaaat complicated; it's basically just a bloom filter. The complexity is also mostly in the performance, the correctness is somewhat easy to check.\r\n\r\nI don't know if the performance win is worth it. I'll leave that for others to determine. Just putting it out there.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/427267896/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/427274569",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14387#issuecomment-427274569",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14387",
    "id": 427274569,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzI3NDU2OQ==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-05T07:40:07Z",
    "updated_at": "2018-10-05T07:41:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "@JeremyRubin It is sufficiently complicated to introduce undefined behaviour in consensus critical code without any of the reviewers noticing .-)\r\n\r\nI'm afraid the code as it is currently formulated will trigger undefined behaviour due to shift exponents being too large.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/427274569/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/427278833",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14387#issuecomment-427278833",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14387",
    "id": 427278833,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzI3ODgzMw==",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?u=8cdd8653982252593843d7369ecfebe432b89768&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-05T07:57:16Z",
    "updated_at": "2018-10-05T07:57:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "@practicalswift i think I fixed that -- can you confirm? (and also a copy-paste error on which bit was being set :(  )",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/427278833/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/427301352",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14387#issuecomment-427301352",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14387",
    "id": 427301352,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzMwMTM1Mg==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-05T09:24:49Z",
    "updated_at": "2018-10-05T09:30:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "@practicalswift No, I'm afraid the undefined behaviour is still present.\r\n\r\nCheck this code:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/4ec7597add35cfc458680fcba2b8fb64931711ef/src/consensus/tx_verify.cpp#L281-L288",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/427301352/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/427490408",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14387#issuecomment-427490408",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14387",
    "id": 427490408,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzQ5MDQwOA==",
    "user": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?u=63e5c438c242094837a9deeda775d77988b508bf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-05T20:32:27Z",
    "updated_at": "2018-10-05T20:32:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "I feel like this is too much review work vs the gain.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/427490408/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/427538381",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14387#issuecomment-427538381",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14387",
    "id": 427538381,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzUzODM4MQ==",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?u=8cdd8653982252593843d7369ecfebe432b89768&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-06T02:13:13Z",
    "updated_at": "2018-10-06T02:13:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "@gmaxwell @sipa please re-review the updated version (should you have time). @practicalswift I think I have eliminated the UB, if not please let me know.\r\n\r\nIn this version I have kept complexity limited in scope to validation.cpp.\r\n\r\nPerformance wise this version is actually a bit better in the worst case compared to using the filter per-transaction (DuplicateInputs) and better in an average case (DeserializeAndCheckBlockTest) compared to master.\r\n\r\nThe simpler put all in vector then sort then find duplicate algorithm could be used here too.\r\n\r\nThe major benefit of this approach (as amended) is that we not only detect duplicate inputs per transaction, but across the entire block at the same time. This guarantees we won't see an in-block double spend in ConnectBlock and CheckTxInputs. This might enable us to parallelize checking that inputs exist (against a cache that tracks at what index an output created in that block was created).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/427538381/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/427667282",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14387#issuecomment-427667282",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14387",
    "id": 427667282,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzY2NzI4Mg==",
    "user": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?u=63e5c438c242094837a9deeda775d77988b508bf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-07T16:39:50Z",
    "updated_at": "2018-10-07T16:39:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "> The major benefit of this approach (as amended) is that we not only detect duplicate inputs per transaction, but across the entire block at the sam\r\n\r\nOne can't do that without losing the ability to cache the check as part of the wtxid validity caching, as the simpler check could be.\r\n\r\nI am failing to see the argument for a gain here that even justifies reviewing the change at all. ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/427667282/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/428037255",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14387#issuecomment-428037255",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14387",
    "id": 428037255,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyODAzNzI1NQ==",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?u=8cdd8653982252593843d7369ecfebe432b89768&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-09T02:18:28Z",
    "updated_at": "2018-10-09T02:18:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "@gmaxwell That's not accurate -- by fixing the salt for the hash (which should be safe -- I will consider this more closely), you could store three uint64_t's per input in the wtxid validity cache and then re-insert those on the forward pass of the algorithm. To be clear, this just saves sip-hashing at the expense of memory, but you can just keep a table of precomputed sip-hashes for the inputs in the top of the mempool if it's actually an issue. Once you have the hashes, the check itself is very inexpensive... At the very least, such a cache could be configurable. \r\n\r\nBy checking (without inserting) that *all* of the outputs (not txids) created in a transaction are not already in the table as we scan we ensure that none of the inputs spent are created later in the block. This can also be done with an additional backwards pass with a new table only tracking TXIDs for no hashing (for tx in txs.reverse(): insert_table(txid); for input in tx.inputs(): check_table(input.coutpoint.hash)). The overall expected more work on either of these approaches is around 2x, and with current parameters this is reasonable. With this check completed, it would be possible to apply all the transactions in a block out of order. Without removing any checks or adding parallelization, this should make *less fragile* much of the code after CheckBlock (e.g., ConnectBlock) because we never reach it for a block which has out-of-longchain-order transactions (and cause us to have to abort partially applied transactions).\r\n\r\nI wanted to get *just* the duplicates checking reviewed and accepted first, then, in the future work on these other projects.\r\n\r\n@instagibbs with this current version, it seems to minorly worse (1.5% median to median) on DeserializeAndCheckBlockTest. I'm unaware if this is a representative sample of blocks or if this tell you anything about the larger performance of a block being validated with respect to things like number of transactions, caches, etc so I'm reticent to give too much weight to this one in any case. If you have ideas for how we can write a better benchmark to test this for future work, let's chat about it.\r\n\r\nDeserializeAndCheckBlockTest, 5, 160, 12.2812, 0.0153002, 0.0154073, 0.0153456\r\nDeserializeAndCheckBlockTest, 5, 160, 12.5319, 0.0153902, 0.0159464, 0.0155924\r\n\r\n\r\nMuch thanks to all the reviewers who have spent their time reviewing this PR so-far, I appreciate that you took the time to review this contribution to Bitcoin.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/428037255/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/436294355",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14387#issuecomment-436294355",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14387",
    "id": 436294355,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjI5NDM1NQ==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-06T15:31:36Z",
    "updated_at": "2018-11-06T15:31:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/436294355/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/442743132",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14387#issuecomment-442743132",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14387",
    "id": 442743132,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0Mjc0MzEzMg==",
    "user": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?u=63e5c438c242094837a9deeda775d77988b508bf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-29T08:11:20Z",
    "updated_at": "2018-11-29T08:13:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jnewbery  nothing in this PR is in the block propagation typical case anymore (not since we finally implemented the full BIP152 HB mode forwarding), so the belief that this speeds up block propagation is largely mistaken.\r\n\r\n\"Goal was to minimize the performance regression caused by the CVE fix.\" -- there wasn't one, or at least not an interesting one.  The speedup to duplicate checking was later superseded by changes to allow blocks to be propagated without validating anything more than hash consistency.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/442743132/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/442748969",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14387#issuecomment-442748969",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14387",
    "id": 442748969,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0Mjc0ODk2OQ==",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?u=8cdd8653982252593843d7369ecfebe432b89768&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-29T08:34:00Z",
    "updated_at": "2018-11-29T08:34:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "@gmaxwell see #14837 which supersedes this PR.\r\n\r\n In my opinion, you are incorrect that CheckBlock is not latency sensitive. Certainly there are a large class of users for whom CheckBlock performance is critical (e.g., miners performing full validation before mining a new block, and miners calling testblockvalidity to get a new template).\r\n\r\nThis also has a non negligible impact on benchmarks like DeserializeAndCheckBlockTest, which suggests to me that speeding up these checks is important for reindexing, bootstrap, and other activities. ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/442748969/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/442749214",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14387#issuecomment-442749214",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14387",
    "id": 442749214,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0Mjc0OTIxNA==",
    "user": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?u=a0e0040aacd7d4f0787481e8ac30b494fa429e11&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-29T08:34:52Z",
    "updated_at": "2018-11-29T08:34:52Z",
    "author_association": "MEMBER",
    "body": "Closing in favour of #14837.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/442749214/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/442753508",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14387#issuecomment-442753508",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14387",
    "id": 442753508,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0Mjc1MzUwOA==",
    "user": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?u=63e5c438c242094837a9deeda775d77988b508bf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-29T08:50:25Z",
    "updated_at": "2018-11-29T08:50:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "> In my opinion, you are incorrect that CheckBlock is not latency sensitive. Certainly there are a large class of users for whom CheckBlock performance is critical (e.g., miners performing full validation before mining a new block, and miners calling testblockvalidity to get a new template).\r\n\r\nWhen it was on the critical path of propagation the small delays involved were cumulative across the whole network. As a result even though one was not particularly interesting, the sum total could be.  Without that effect, you only get the single one shot delay.   The effect of a one shot half millisecond delay on mining is negligible, and efforts spend considering that optimization could be better spent on things like getting testblockvalidity out of the critical path-- which would be an order of magnitude larger speedup,  likely _simpler_ to review and verify, and would also further moot the new proposed benefit.\r\n\r\n> This also has a non negligible impact on benchmarks like DeserializeAndCheckBlockTest, which suggests to me that speeding up these checks is important for reindexing, bootstrap, and other activities.\r\n\r\nThat logic is spurious. Microbenchmarks are microbenchmarks.  If it had an impact on reindexing/bootstrap it could be measured.  If it did make a big impact there that would be an argument in favor of it, but unless prior profiling was erroneous, that isn't possible.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/442753508/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/442755968",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14387#issuecomment-442755968",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14387",
    "id": 442755968,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0Mjc1NTk2OA==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-29T08:58:48Z",
    "updated_at": "2018-11-29T08:59:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "@JeremyRand Regarding my comment regarding UB above. The problem was the following:\r\n\r\n```\r\nuint64_t bit1 = 1<<((std::get<0>(h)) & 63);\r\n```\r\n\r\n... is problematic due to ...\r\n\r\n```\r\n$ cling\r\n[cling]$ #include <cstdint>\r\n[cling]$ 1 << 63\r\nwarning: shift count >= width of type [-Wshift-count-overflow]\r\n 1 << 63\r\n   ^  ~~\r\n(int) 0\r\n```\r\n\r\n... which can be contrasted to ...\r\n\r\n```\r\n$ cling\r\n[cling]$ #include <cstdint>\r\n[cling]$ static_cast<uint64_t>(1) << 63\r\n(unsigned long) 9223372036854775808\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/442755968/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222560971",
    "pull_request_review_id": 161475347,
    "id": 222560971,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMjU2MDk3MQ==",
    "diff_hunk": "@@ -0,0 +1,104 @@\n+// Copyright (c) 2011-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <miner.h>\n+#include <policy/policy.h>\n+#include <pow.h>\n+#include <scheduler.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <utiltime.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+#include <boost/thread.hpp>\n+\n+#include <list>\n+#include <vector>\n+\n+\n+static void DuplicateInputs(benchmark::State& state)\n+{\n+    const std::vector<unsigned char> op_true{OP_TRUE};\n+\n+\n+    const CScript SCRIPT_PUB{CScript(OP_TRUE)};\n+\n+    // Switch to regtest so we can mine faster\n+    // Also segwit is active, so we can include witness transactions\n+    SelectParams(CBaseChainParams::REGTEST);\n+\n+    InitScriptExecutionCache();\n+\n+    boost::thread_group thread_group;\n+    CScheduler scheduler;\n+    const CChainParams& chainparams = Params();\n+    {\n+        ::pblocktree.reset(new CBlockTreeDB(1 << 20, true));\n+        ::pcoinsdbview.reset(new CCoinsViewDB(1 << 23, true));\n+        ::pcoinsTip.reset(new CCoinsViewCache(pcoinsdbview.get()));\n+\n+        thread_group.create_thread(boost::bind(&CScheduler::serviceQueue, &scheduler));\n+        GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n+        LoadGenesisBlock(chainparams);\n+        CValidationState state;\n+        ActivateBestChain(state, chainparams);\n+        assert(::chainActive.Tip() != nullptr);\n+        const bool witness_enabled{IsWitnessEnabled(::chainActive.Tip(), chainparams.GetConsensus())};\n+        assert(witness_enabled);\n+    }\n+\n+    CBlock block{};\n+    CMutableTransaction coinbaseTx{};\n+    CMutableTransaction naughtyTx{};\n+\n+    CBlockIndex* pindexPrev = ::chainActive.Tip();\n+    assert(pindexPrev != nullptr);\n+    block.nBits          = GetNextWorkRequired(pindexPrev, &block, chainparams.GetConsensus());\n+    block.nNonce         = 0;\n+    auto nHeight = pindexPrev->nHeight + 1;\n+    block.nTime = ::chainActive.Tip()->GetMedianTimePast() + 1;\n+\n+    // Make a coinbase TX\n+    coinbaseTx.vin.resize(1);\n+    coinbaseTx.vin[0].prevout.SetNull();\n+    coinbaseTx.vout.resize(1);\n+    coinbaseTx.vout[0].scriptPubKey = SCRIPT_PUB;\n+    coinbaseTx.vout[0].nValue = GetBlockSubsidy(nHeight, chainparams.GetConsensus());\n+    coinbaseTx.vin[0].scriptSig = CScript() << nHeight << OP_0;\n+\n+\n+    naughtyTx.vout.resize(1);\n+    naughtyTx.vout[0].nValue = 0;\n+    naughtyTx.vout[0].scriptPubKey = SCRIPT_PUB;\n+\n+    int n_inputs = (((MAX_BLOCK_SERIALIZED_SIZE/WITNESS_SCALE_FACTOR) - (CTransaction(coinbaseTx).GetTotalSize() + CTransaction(naughtyTx).GetTotalSize()))/41) - 100;\n+    for (int x = 0; x < (n_inputs-1); ++x) {\n+        naughtyTx.vin.emplace_back(GetRandHash(), 0, CScript(), 0);\n+    }\n+    naughtyTx.vin.emplace_back(naughtyTx.vin.back());\n+\n+    block.vtx.push_back(MakeTransactionRef(std::move(coinbaseTx)));\n+    block.vtx.push_back(MakeTransactionRef(std::move(naughtyTx)));\n+\n+    block.hashMerkleRoot = BlockMerkleRoot(block);\n+    ",
    "path": "src/bench/duplicate_inputs.cpp",
    "position": null,
    "original_position": 91,
    "commit_id": "1f2477364d20cce37249f06a99424169a2326780",
    "original_commit_id": "5d768bf136e75be7fb2a18dd500f75749f24fb52",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: some trailing white space here?\r\n\r\nAlso, I removed all comments about the linter failure, because they are just distracting from the actual pull request.",
    "created_at": "2018-10-04T07:24:17Z",
    "updated_at": "2018-10-06T01:14:33Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14387#discussion_r222560971",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14387",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222560971"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14387#discussion_r222560971"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14387"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222560971/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 91,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222660847",
    "pull_request_review_id": 161600373,
    "id": 222660847,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMjY2MDg0Nw==",
    "diff_hunk": "@@ -181,25 +185,167 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fChe\n     }\n \n     // Check for duplicate inputs - note that this check is slow so we skip it in CheckBlock\n-    if (fCheckDuplicateInputs) {\n-        std::set<COutPoint> vInOutPoints;\n-        for (const auto& txin : tx.vin)\n-        {\n-            if (!vInOutPoints.insert(txin.prevout).second)\n-                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n-        }\n-    }\n-\n-    if (tx.IsCoinBase())\n-    {\n+    if (tx.IsCoinBase() ) {\n         if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n             return state.DoS(100, false, REJECT_INVALID, \"bad-cb-length\");\n-    }\n-    else\n-    {\n-        for (const auto& txin : tx.vin)\n-            if (txin.prevout.IsNull())\n+    } else if (!fCheckDuplicateInputs || tx.vin.size() == 1){\n+        for (const auto& txin : tx.vin) {\n+            if (txin.prevout.IsNull()) {\n                 return state.DoS(10, false, REJECT_INVALID, \"bad-txns-prevout-null\");\n+            }\n+        }\n+    } else{\n+        // This duplication checking algorithm uses a probabilistic filter\n+        // to check for collisions efficiently.\n+        //\n+        // This is faster than the naive construction, using a set, which\n+        // requires more allocation and comparison of uint256s.\n+        //\n+        // First we create a bitset table with 1<<21 elements. This\n+        // is around 300 KB, so we construct it on the heap.\n+        //\n+        // We also allow reusing a 'dirty' table because zeroing 300 KB\n+        // can be expensive, and the table will operate acceptably for all of the\n+        // transactions in a given block.\n+        //\n+        // Then, we iterate through the elements one by one, generated 8 salted",
    "path": "src/consensus/tx_verify.cpp",
    "position": null,
    "original_position": 63,
    "commit_id": "1f2477364d20cce37249f06a99424169a2326780",
    "original_commit_id": "5d768bf136e75be7fb2a18dd500f75749f24fb52",
    "user": {
      "login": "leishman",
      "id": 3648618,
      "node_id": "MDQ6VXNlcjM2NDg2MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3648618?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leishman",
      "html_url": "https://github.com/leishman",
      "followers_url": "https://api.github.com/users/leishman/followers",
      "following_url": "https://api.github.com/users/leishman/following{/other_user}",
      "gists_url": "https://api.github.com/users/leishman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leishman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leishman/subscriptions",
      "organizations_url": "https://api.github.com/users/leishman/orgs",
      "repos_url": "https://api.github.com/users/leishman/repos",
      "events_url": "https://api.github.com/users/leishman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leishman/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why 8?",
    "created_at": "2018-10-04T13:08:53Z",
    "updated_at": "2018-10-06T01:14:33Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14387#discussion_r222660847",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14387",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222660847"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14387#discussion_r222660847"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14387"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222660847/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 211,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222861377",
    "pull_request_review_id": 161852481,
    "id": 222861377,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMjg2MTM3Nw==",
    "diff_hunk": "@@ -181,25 +185,167 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fChe\n     }\n \n     // Check for duplicate inputs - note that this check is slow so we skip it in CheckBlock\n-    if (fCheckDuplicateInputs) {\n-        std::set<COutPoint> vInOutPoints;\n-        for (const auto& txin : tx.vin)\n-        {\n-            if (!vInOutPoints.insert(txin.prevout).second)\n-                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n-        }\n-    }\n-\n-    if (tx.IsCoinBase())\n-    {\n+    if (tx.IsCoinBase() ) {\n         if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n             return state.DoS(100, false, REJECT_INVALID, \"bad-cb-length\");\n-    }\n-    else\n-    {\n-        for (const auto& txin : tx.vin)\n-            if (txin.prevout.IsNull())\n+    } else if (!fCheckDuplicateInputs || tx.vin.size() == 1){\n+        for (const auto& txin : tx.vin) {\n+            if (txin.prevout.IsNull()) {\n                 return state.DoS(10, false, REJECT_INVALID, \"bad-txns-prevout-null\");\n+            }\n+        }\n+    } else{\n+        // This duplication checking algorithm uses a probabilistic filter\n+        // to check for collisions efficiently.\n+        //\n+        // This is faster than the naive construction, using a set, which\n+        // requires more allocation and comparison of uint256s.\n+        //\n+        // First we create a bitset table with 1<<21 elements. This\n+        // is around 300 KB, so we construct it on the heap.\n+        //\n+        // We also allow reusing a 'dirty' table because zeroing 300 KB\n+        // can be expensive, and the table will operate acceptably for all of the\n+        // transactions in a given block.\n+        //\n+        // Then, we iterate through the elements one by one, generated 8 salted",
    "path": "src/consensus/tx_verify.cpp",
    "position": null,
    "original_position": 63,
    "commit_id": "1f2477364d20cce37249f06a99424169a2326780",
    "original_commit_id": "5d768bf136e75be7fb2a18dd500f75749f24fb52",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It's my favorite number!\r\n\r\nIt's to get the expected work below one for the worst case as shown in the analysis.\r\n\r\nWe could add a 9th hash (we have more bits in the hash computed) but every hash adds more memory accesses in our table.\r\n\r\nWe could also remove a hash or two and the EV would be less than 10, which is probably acceptable 2. At about 4 or 5 hashes is when it blows up a bit more to an \"unacceptable point\" (EV 50 to 500 comparisons).\r\n\r\nSolve for x such that:\r\n\r\nSum  i = 0 to 24390 [ i*( i*x / 2**21)**x ] < 1\r\n\r\n\r\nIt's also possible to modify the algorithm such that if a false positive is hit, you do the current set based algorithm up to the conflict. I'm not sure how to analyze that though, and the current code is sufficiently simple with low enough probability of expensive scan that we don't care that much.\r\n",
    "created_at": "2018-10-04T23:59:31Z",
    "updated_at": "2018-10-06T01:14:33Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14387#discussion_r222861377",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14387",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222861377"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14387#discussion_r222861377"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14387"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222861377/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 211,
    "side": "RIGHT",
    "in_reply_to_id": 222660847
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222886217",
    "pull_request_review_id": 161882460,
    "id": 222886217,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMjg4NjIxNw==",
    "diff_hunk": "@@ -181,25 +185,167 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fChe\n     }\n \n     // Check for duplicate inputs - note that this check is slow so we skip it in CheckBlock\n-    if (fCheckDuplicateInputs) {\n-        std::set<COutPoint> vInOutPoints;\n-        for (const auto& txin : tx.vin)\n-        {\n-            if (!vInOutPoints.insert(txin.prevout).second)\n-                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n-        }\n-    }\n-\n-    if (tx.IsCoinBase())\n-    {\n+    if (tx.IsCoinBase() ) {\n         if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n             return state.DoS(100, false, REJECT_INVALID, \"bad-cb-length\");\n-    }\n-    else\n-    {\n-        for (const auto& txin : tx.vin)\n-            if (txin.prevout.IsNull())\n+    } else if (!fCheckDuplicateInputs || tx.vin.size() == 1){\n+        for (const auto& txin : tx.vin) {\n+            if (txin.prevout.IsNull()) {\n                 return state.DoS(10, false, REJECT_INVALID, \"bad-txns-prevout-null\");\n+            }\n+        }\n+    } else{\n+        // This duplication checking algorithm uses a probabilistic filter\n+        // to check for collisions efficiently.\n+        //\n+        // This is faster than the naive construction, using a set, which\n+        // requires more allocation and comparison of uint256s.\n+        //\n+        // First we create a bitset table with 1<<21 elements. This\n+        // is around 300 KB, so we construct it on the heap.\n+        //\n+        // We also allow reusing a 'dirty' table because zeroing 300 KB\n+        // can be expensive, and the table will operate acceptably for all of the\n+        // transactions in a given block.\n+        //\n+        // Then, we iterate through the elements one by one, generated 8 salted",
    "path": "src/consensus/tx_verify.cpp",
    "position": null,
    "original_position": 63,
    "commit_id": "1f2477364d20cce37249f06a99424169a2326780",
    "original_commit_id": "5d768bf136e75be7fb2a18dd500f75749f24fb52",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "More precisely, it's one of two choices (9 hashes or 8) with 21 bits with expected work less than 1.\r\n\r\nExtracting 9 hashes from 3 64 bit integers is a bit more complex code wise, but doable.\r\n\r\n>>> sorted((sum(i*(float(i)*x/ 2.0**y)**x for i in xrange(24930)) if (x*y <= 192) else  ('Inf', 0, 0),y,x) for y in xrange(1,22) for x in xrange(1,20))[:10]\r\n\r\n[(0.10374566662377155, 21, 9), (0.4157347268068221, 21, 8), (1.9074647424172138, 21, 7), (10.226961125517702, 21, 6), (53.11778131137103, 20, 9), (65.8563129753341, 21, 5), (106.42809006254646, 20, 8), (244.15548702940336, 20, 7), (529.481130078109, 21, 4), (654.5255120331329, 20, 6)]\r\n\r\nAnother option would be to increase the number of hashes to 16 and then use a 20 bit table, requiring a 320-bit hash . This makes the expected work about 7 comparisons in the worst case, but makes the table half as large which reduces the constant bloat.",
    "created_at": "2018-10-05T03:54:19Z",
    "updated_at": "2018-10-06T01:14:33Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14387#discussion_r222886217",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14387",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222886217"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14387#discussion_r222886217"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14387"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222886217/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 211,
    "side": "RIGHT",
    "in_reply_to_id": 222660847
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222902655",
    "pull_request_review_id": 161902822,
    "id": 222902655,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMjkwMjY1NQ==",
    "diff_hunk": "@@ -181,25 +185,167 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fChe\n     }\n \n     // Check for duplicate inputs - note that this check is slow so we skip it in CheckBlock\n-    if (fCheckDuplicateInputs) {\n-        std::set<COutPoint> vInOutPoints;\n-        for (const auto& txin : tx.vin)\n-        {\n-            if (!vInOutPoints.insert(txin.prevout).second)\n-                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n-        }\n-    }\n-\n-    if (tx.IsCoinBase())\n-    {\n+    if (tx.IsCoinBase() ) {\n         if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n             return state.DoS(100, false, REJECT_INVALID, \"bad-cb-length\");\n-    }\n-    else\n-    {\n-        for (const auto& txin : tx.vin)\n-            if (txin.prevout.IsNull())\n+    } else if (!fCheckDuplicateInputs || tx.vin.size() == 1){\n+        for (const auto& txin : tx.vin) {\n+            if (txin.prevout.IsNull()) {\n                 return state.DoS(10, false, REJECT_INVALID, \"bad-txns-prevout-null\");\n+            }\n+        }\n+    } else{\n+        // This duplication checking algorithm uses a probabilistic filter\n+        // to check for collisions efficiently.\n+        //\n+        // This is faster than the naive construction, using a set, which\n+        // requires more allocation and comparison of uint256s.",
    "path": "src/consensus/tx_verify.cpp",
    "position": null,
    "original_position": 54,
    "commit_id": "1f2477364d20cce37249f06a99424169a2326780",
    "original_commit_id": "5d768bf136e75be7fb2a18dd500f75749f24fb52",
    "user": {
      "login": "leishman",
      "id": 3648618,
      "node_id": "MDQ6VXNlcjM2NDg2MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3648618?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leishman",
      "html_url": "https://github.com/leishman",
      "followers_url": "https://api.github.com/users/leishman/followers",
      "following_url": "https://api.github.com/users/leishman/following{/other_user}",
      "gists_url": "https://api.github.com/users/leishman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leishman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leishman/subscriptions",
      "organizations_url": "https://api.github.com/users/leishman/orgs",
      "repos_url": "https://api.github.com/users/leishman/repos",
      "events_url": "https://api.github.com/users/leishman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leishman/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "How does your implementation compare to using `std::unordered_set`?",
    "created_at": "2018-10-05T06:27:00Z",
    "updated_at": "2018-10-06T01:14:33Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14387#discussion_r222902655",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14387",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222902655"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14387#discussion_r222902655"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14387"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222902655/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 202,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222903474",
    "pull_request_review_id": 161903780,
    "id": 222903474,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMjkwMzQ3NA==",
    "diff_hunk": "@@ -181,25 +185,167 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fChe\n     }\n \n     // Check for duplicate inputs - note that this check is slow so we skip it in CheckBlock\n-    if (fCheckDuplicateInputs) {\n-        std::set<COutPoint> vInOutPoints;\n-        for (const auto& txin : tx.vin)\n-        {\n-            if (!vInOutPoints.insert(txin.prevout).second)\n-                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n-        }\n-    }\n-\n-    if (tx.IsCoinBase())\n-    {\n+    if (tx.IsCoinBase() ) {\n         if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n             return state.DoS(100, false, REJECT_INVALID, \"bad-cb-length\");\n-    }\n-    else\n-    {\n-        for (const auto& txin : tx.vin)\n-            if (txin.prevout.IsNull())\n+    } else if (!fCheckDuplicateInputs || tx.vin.size() == 1){\n+        for (const auto& txin : tx.vin) {\n+            if (txin.prevout.IsNull()) {\n                 return state.DoS(10, false, REJECT_INVALID, \"bad-txns-prevout-null\");\n+            }\n+        }\n+    } else{\n+        // This duplication checking algorithm uses a probabilistic filter\n+        // to check for collisions efficiently.\n+        //\n+        // This is faster than the naive construction, using a set, which\n+        // requires more allocation and comparison of uint256s.\n+        //\n+        // First we create a bitset table with 1<<21 elements. This\n+        // is around 300 KB, so we construct it on the heap.\n+        //\n+        // We also allow reusing a 'dirty' table because zeroing 300 KB\n+        // can be expensive, and the table will operate acceptably for all of the\n+        // transactions in a given block.\n+        //\n+        // Then, we iterate through the elements one by one, generated 8 salted",
    "path": "src/consensus/tx_verify.cpp",
    "position": null,
    "original_position": 63,
    "commit_id": "1f2477364d20cce37249f06a99424169a2326780",
    "original_commit_id": "5d768bf136e75be7fb2a18dd500f75749f24fb52",
    "user": {
      "login": "leishman",
      "id": 3648618,
      "node_id": "MDQ6VXNlcjM2NDg2MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3648618?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leishman",
      "html_url": "https://github.com/leishman",
      "followers_url": "https://api.github.com/users/leishman/followers",
      "following_url": "https://api.github.com/users/leishman/following{/other_user}",
      "gists_url": "https://api.github.com/users/leishman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leishman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leishman/subscriptions",
      "organizations_url": "https://api.github.com/users/leishman/orgs",
      "repos_url": "https://api.github.com/users/leishman/repos",
      "events_url": "https://api.github.com/users/leishman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leishman/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Ok cool. Thanks for the analysis. 8 seems like a pretty reasonable choice. I left a comment above, but was wondering how this bloom filter compares to native unordered set implementations in the stdlib.\r\n\r\n",
    "created_at": "2018-10-05T06:30:01Z",
    "updated_at": "2018-10-06T01:14:33Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14387#discussion_r222903474",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14387",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222903474"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14387#discussion_r222903474"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14387"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222903474/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 211,
    "side": "RIGHT",
    "in_reply_to_id": 222660847
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222907779",
    "pull_request_review_id": 161909222,
    "id": 222907779,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMjkwNzc3OQ==",
    "diff_hunk": "@@ -181,25 +185,167 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fChe\n     }\n \n     // Check for duplicate inputs - note that this check is slow so we skip it in CheckBlock\n-    if (fCheckDuplicateInputs) {\n-        std::set<COutPoint> vInOutPoints;\n-        for (const auto& txin : tx.vin)\n-        {\n-            if (!vInOutPoints.insert(txin.prevout).second)\n-                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n-        }\n-    }\n-\n-    if (tx.IsCoinBase())\n-    {\n+    if (tx.IsCoinBase() ) {\n         if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n             return state.DoS(100, false, REJECT_INVALID, \"bad-cb-length\");\n-    }\n-    else\n-    {\n-        for (const auto& txin : tx.vin)\n-            if (txin.prevout.IsNull())\n+    } else if (!fCheckDuplicateInputs || tx.vin.size() == 1){\n+        for (const auto& txin : tx.vin) {\n+            if (txin.prevout.IsNull()) {\n                 return state.DoS(10, false, REJECT_INVALID, \"bad-txns-prevout-null\");\n+            }\n+        }\n+    } else{\n+        // This duplication checking algorithm uses a probabilistic filter\n+        // to check for collisions efficiently.\n+        //\n+        // This is faster than the naive construction, using a set, which\n+        // requires more allocation and comparison of uint256s.",
    "path": "src/consensus/tx_verify.cpp",
    "position": null,
    "original_position": 54,
    "commit_id": "1f2477364d20cce37249f06a99424169a2326780",
    "original_commit_id": "5d768bf136e75be7fb2a18dd500f75749f24fb52",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "See https://github.com/bitcoin/bitcoin/pull/14397 for a more obvious version that is just the obvious thing.\r\n\r\nFor std::unordered_set, I'm clocking much worse performance for DeserializeAndCheckBlockTest and 2x worse performance for DuplicateInputs.\r\n",
    "created_at": "2018-10-05T06:56:00Z",
    "updated_at": "2018-10-06T01:14:33Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14387#discussion_r222907779",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14387",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222907779"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14387#discussion_r222907779"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14387"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222907779/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 202,
    "side": "RIGHT",
    "in_reply_to_id": 222902655
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222908232",
    "pull_request_review_id": 161909736,
    "id": 222908232,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMjkwODIzMg==",
    "diff_hunk": "@@ -181,25 +185,167 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fChe\n     }\n \n     // Check for duplicate inputs - note that this check is slow so we skip it in CheckBlock\n-    if (fCheckDuplicateInputs) {\n-        std::set<COutPoint> vInOutPoints;\n-        for (const auto& txin : tx.vin)\n-        {\n-            if (!vInOutPoints.insert(txin.prevout).second)\n-                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n-        }\n-    }\n-\n-    if (tx.IsCoinBase())\n-    {\n+    if (tx.IsCoinBase() ) {\n         if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n             return state.DoS(100, false, REJECT_INVALID, \"bad-cb-length\");\n-    }\n-    else\n-    {\n-        for (const auto& txin : tx.vin)\n-            if (txin.prevout.IsNull())\n+    } else if (!fCheckDuplicateInputs || tx.vin.size() == 1){\n+        for (const auto& txin : tx.vin) {\n+            if (txin.prevout.IsNull()) {\n                 return state.DoS(10, false, REJECT_INVALID, \"bad-txns-prevout-null\");\n+            }\n+        }\n+    } else{\n+        // This duplication checking algorithm uses a probabilistic filter\n+        // to check for collisions efficiently.\n+        //\n+        // This is faster than the naive construction, using a set, which\n+        // requires more allocation and comparison of uint256s.",
    "path": "src/consensus/tx_verify.cpp",
    "position": null,
    "original_position": 54,
    "commit_id": "1f2477364d20cce37249f06a99424169a2326780",
    "original_commit_id": "5d768bf136e75be7fb2a18dd500f75749f24fb52",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@leishman I tried a few alternatives:\r\n* Master: 13.6 ms\r\n* #14397: 6.3 ms\r\n* Using a sorted vector with SipHash'ed prevouts: 3.7 ms\r\n* This PR: 2.7 ms\r\n",
    "created_at": "2018-10-05T06:58:09Z",
    "updated_at": "2018-10-06T01:14:33Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14387#discussion_r222908232",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14387",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222908232"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14387#discussion_r222908232"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14387"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222908232/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 202,
    "side": "RIGHT",
    "in_reply_to_id": 222902655
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222909637",
    "pull_request_review_id": 161911531,
    "id": 222909637,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMjkwOTYzNw==",
    "diff_hunk": "@@ -181,25 +185,167 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fChe\n     }\n \n     // Check for duplicate inputs - note that this check is slow so we skip it in CheckBlock\n-    if (fCheckDuplicateInputs) {\n-        std::set<COutPoint> vInOutPoints;\n-        for (const auto& txin : tx.vin)\n-        {\n-            if (!vInOutPoints.insert(txin.prevout).second)\n-                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n-        }\n-    }\n-\n-    if (tx.IsCoinBase())\n-    {\n+    if (tx.IsCoinBase() ) {\n         if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n             return state.DoS(100, false, REJECT_INVALID, \"bad-cb-length\");\n-    }\n-    else\n-    {\n-        for (const auto& txin : tx.vin)\n-            if (txin.prevout.IsNull())\n+    } else if (!fCheckDuplicateInputs || tx.vin.size() == 1){\n+        for (const auto& txin : tx.vin) {\n+            if (txin.prevout.IsNull()) {\n                 return state.DoS(10, false, REJECT_INVALID, \"bad-txns-prevout-null\");\n+            }\n+        }\n+    } else{\n+        // This duplication checking algorithm uses a probabilistic filter\n+        // to check for collisions efficiently.\n+        //\n+        // This is faster than the naive construction, using a set, which\n+        // requires more allocation and comparison of uint256s.",
    "path": "src/consensus/tx_verify.cpp",
    "position": null,
    "original_position": 54,
    "commit_id": "1f2477364d20cce37249f06a99424169a2326780",
    "original_commit_id": "5d768bf136e75be7fb2a18dd500f75749f24fb52",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I like sorting the siphash'd prevouts -- I'm guessing you then do the expensive check if that collides? Or are you tracking the pointers when you sort too?",
    "created_at": "2018-10-05T07:05:38Z",
    "updated_at": "2018-10-06T01:14:33Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14387#discussion_r222909637",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14387",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222909637"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14387#discussion_r222909637"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14387"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222909637/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 202,
    "side": "RIGHT",
    "in_reply_to_id": 222902655
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222910439",
    "pull_request_review_id": 161912565,
    "id": 222910439,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMjkxMDQzOQ==",
    "diff_hunk": "@@ -181,25 +185,167 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fChe\n     }\n \n     // Check for duplicate inputs - note that this check is slow so we skip it in CheckBlock\n-    if (fCheckDuplicateInputs) {\n-        std::set<COutPoint> vInOutPoints;\n-        for (const auto& txin : tx.vin)\n-        {\n-            if (!vInOutPoints.insert(txin.prevout).second)\n-                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n-        }\n-    }\n-\n-    if (tx.IsCoinBase())\n-    {\n+    if (tx.IsCoinBase() ) {\n         if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n             return state.DoS(100, false, REJECT_INVALID, \"bad-cb-length\");\n-    }\n-    else\n-    {\n-        for (const auto& txin : tx.vin)\n-            if (txin.prevout.IsNull())\n+    } else if (!fCheckDuplicateInputs || tx.vin.size() == 1){\n+        for (const auto& txin : tx.vin) {\n+            if (txin.prevout.IsNull()) {\n                 return state.DoS(10, false, REJECT_INVALID, \"bad-txns-prevout-null\");\n+            }\n+        }\n+    } else{\n+        // This duplication checking algorithm uses a probabilistic filter\n+        // to check for collisions efficiently.\n+        //\n+        // This is faster than the naive construction, using a set, which\n+        // requires more allocation and comparison of uint256s.",
    "path": "src/consensus/tx_verify.cpp",
    "position": null,
    "original_position": 54,
    "commit_id": "1f2477364d20cce37249f06a99424169a2326780",
    "original_commit_id": "5d768bf136e75be7fb2a18dd500f75749f24fb52",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@JeremyRubin Yeah, just delay the expensive check until after the cheap check fails. I haven't PR'ed that because I only have PoC, and I don't want to overload reviewers with a series of PRs without even knowing if we want to increase complexity here at all.",
    "created_at": "2018-10-05T07:09:53Z",
    "updated_at": "2018-10-06T01:14:33Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14387#discussion_r222910439",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14387",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222910439"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14387#discussion_r222910439"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14387"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222910439/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 202,
    "side": "RIGHT",
    "in_reply_to_id": 222902655
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222916084",
    "pull_request_review_id": 161919724,
    "id": 222916084,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMjkxNjA4NA==",
    "diff_hunk": "@@ -181,25 +185,167 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fChe\n     }\n \n     // Check for duplicate inputs - note that this check is slow so we skip it in CheckBlock\n-    if (fCheckDuplicateInputs) {\n-        std::set<COutPoint> vInOutPoints;\n-        for (const auto& txin : tx.vin)\n-        {\n-            if (!vInOutPoints.insert(txin.prevout).second)\n-                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n-        }\n-    }\n-\n-    if (tx.IsCoinBase())\n-    {\n+    if (tx.IsCoinBase() ) {\n         if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n             return state.DoS(100, false, REJECT_INVALID, \"bad-cb-length\");\n-    }\n-    else\n-    {\n-        for (const auto& txin : tx.vin)\n-            if (txin.prevout.IsNull())\n+    } else if (!fCheckDuplicateInputs || tx.vin.size() == 1){\n+        for (const auto& txin : tx.vin) {\n+            if (txin.prevout.IsNull()) {\n                 return state.DoS(10, false, REJECT_INVALID, \"bad-txns-prevout-null\");\n+            }\n+        }\n+    } else{\n+        // This duplication checking algorithm uses a probabilistic filter\n+        // to check for collisions efficiently.\n+        //\n+        // This is faster than the naive construction, using a set, which\n+        // requires more allocation and comparison of uint256s.",
    "path": "src/consensus/tx_verify.cpp",
    "position": null,
    "original_position": 54,
    "commit_id": "1f2477364d20cce37249f06a99424169a2326780",
    "original_commit_id": "5d768bf136e75be7fb2a18dd500f75749f24fb52",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "For the expensive check, you can still do it in O(n) per colliding entry FYI, which is less expensive than doing the full O(n log n) expensive check given that we don't expect colliding entries without a duplicate.\r\n",
    "created_at": "2018-10-05T07:37:23Z",
    "updated_at": "2018-10-06T01:14:33Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14387#discussion_r222916084",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14387",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222916084"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14387#discussion_r222916084"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14387"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/222916084/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 202,
    "side": "RIGHT",
    "in_reply_to_id": 222902655
  }
]