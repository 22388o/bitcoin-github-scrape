theuni,2014-10-28T02:17:26Z,"I appreciate the effort, but I'm having a hard time seeing how the pro's could outweigh the con's. Maybe you have some use-case in mind that I'm not considering? As it stands, users are either downloading a dmg, or building themselves. Adding a hybrid 3rd option will only complicate things further, and OSX is hard enough to maintain as it is.\n\nAdding to that, there are some things that a distrib",https://github.com/bitcoin/bitcoin/pull/5152#issuecomment-60700710,60700710,
DomT4,2014-10-28T02:28:11Z,"It isn't intended necessarily for Bitcoin themselves, but rather end users. It is the ""building themselves"" crowd that I had in mind here, especially on OS X, given your build documentation for users involves Homebrew already, and internalising everything into one script helps reduce variables that crop up as in #5147. This is a kind of extension of your build documentation, but reduces the amount",https://github.com/bitcoin/bitcoin/pull/5152#issuecomment-60701427,60701427,
theuni,2014-10-28T02:44:53Z,"Well, I'd argue that most people building themselves on OSX are doing so because they're hacking on something.\n\nFor those who wish to build while ruling out dependency problems, or build using the release-build process, we should encourage them to use our depends. Maybe the (lack of) documentation is the core issue here?\n",https://github.com/bitcoin/bitcoin/pull/5152#issuecomment-60702532,60702532,
DomT4,2014-10-28T02:57:49Z,"I wouldn't disagree with your assessment there at all. Indeed, half the confusion when I was looking into #5147 was _""Bitcoin have this incredible self-building dependency system, why are they using Homebrew?""_ and then _""If they're using Homebrew, why aren't they using the full power of Homebrew to fully automate the build process on OS X for those who prefer to build from source?""_.\n\nIMO, You ",https://github.com/bitcoin/bitcoin/pull/5152#issuecomment-60703409,60703409,
theuni,2014-10-28T03:15:06Z,"Yea, that's the right question to be asking IMO. I see no problem with building both ways, but some documentation stating the pros/cons of each method would probably go a long way.\n",https://github.com/bitcoin/bitcoin/pull/5152#issuecomment-60704513,60704513,
DomT4,2014-10-28T03:49:13Z,"Certainly. Some indication as to which is better for what circumstance and the issues around each would help. I understand OS X support is a pain to maintain, entirely. Happy for this to be closed if desired.\n",https://github.com/bitcoin/bitcoin/pull/5152#issuecomment-60706440,60706440,
ianks,2014-10-28T06:10:49Z,"> For those who wish to build while ruling out dependency problems or build using the release-build process, we should encourage them to use our depends.\n\nNot sure how using this formula is different? Just makes the job simpler and less time spent config'ing.\n",https://github.com/bitcoin/bitcoin/pull/5152#issuecomment-60713934,60713934,
laanwj,2014-10-29T14:35:44Z,We already have homebrew instructions in doc/build-osx.md. So I'm not opposed to merging this if this makes things easier for MacOSX developers. Please do add mention of this in the Homebrew instructions though.\n,https://github.com/bitcoin/bitcoin/pull/5152#issuecomment-60934142,60934142,
DomT4,2014-10-29T19:28:46Z,"Alright, I've pushed some instructions on the script into the build-osx documentation. Let me know how people feel about it, whether it needs honing further, etc.\n",https://github.com/bitcoin/bitcoin/pull/5152#issuecomment-60988967,60988967,
theuni,2014-10-29T19:52:31Z,"@laanwj Please no. This doesn't help OSX devs, it's more for quasi-end-users. It's the equivalent of ""apt-get install bitcoin"" for OSX. Even worse, it could end up ""bottled"", meaning that pre-built binaries would just be fetched and installed.\n\nDevs build from source, end-users download releases. This just adds another build-path for us to maintain without any real benefit.\n",https://github.com/bitcoin/bitcoin/pull/5152#issuecomment-60992631,60992631,
DomT4,2014-10-29T20:09:43Z,"Alright. Look, I have no say here, this is down to you guys. If you want it in, I'll make whatever changes you see fit. \n\nNote that Homebrew will almost certainly _never_ accept a bitcoind formula into the core, so there is zero chance of this ever being ""bottled"". Bottles are only generated by the core formulae and certain specific other taps. Bottles are not generated for every formulae in eve",https://github.com/bitcoin/bitcoin/pull/5152#issuecomment-60995587,60995587,
laanwj,2014-10-31T09:50:25Z,"@theuni OK\n\n@DomT4 Maybe it would be an idea to publish+maintain this elsewhere, outside the repository? Ie in a gist? We can't take up maintaining another MacOSX build path, but there's no one holding you back from doing that yourself.\n",https://github.com/bitcoin/bitcoin/pull/5152#issuecomment-61238676,61238676,
DomT4,2014-10-31T16:10:51Z,"Sure, I can set up a Homebrew-crypto tap of sorts. There was quite a popular one maintained by someone else previously, but the owner there seems to have ceased updating it. I don't mind setting one up, It'll be fairly low maintenance for me unless Bitcoin change build process dramatically.\n",https://github.com/bitcoin/bitcoin/pull/5152#issuecomment-61284463,61284463,
DomT4,2014-10-31T20:02:20Z,"Alright, It's [over here](https://github.com/DomT4/homebrew-crypto) if anyone wants it in future or someone comes looking for it through this thread.\n",https://github.com/bitcoin/bitcoin/pull/5152#issuecomment-61322227,61322227,
theuni,2014-10-31T20:32:04Z,"@DomT4 Instead of messing with PATH for bdb, you need to be setting cppflags/ldflags as args to configure. Something like:\n\n``` ruby\n args = [""--prefix=#{prefix}"",\n""--disable-dependency-tracking"",\n""CPPFLAGS=-I#{prefix}/berkeley-db4/4.8.30/include"",\n""LDFLAGS=-L#{prefix}/berkeley-db4/4.8.30/lib""\n]\n```\n\nThere may be a more homebrew-ish way to accomplish that, though.\nThen you won't need --",https://github.com/bitcoin/bitcoin/pull/5152#issuecomment-61326672,61326672,
DomT4,2014-10-31T20:40:35Z,"Yeah, I tried that, but it wasn't particularly interested and still flagged the incompatible to me, frustratingly. The PATH ENV setting does something similar, it just moves the internal BDB4 location to the front of the PATH so the build script finds it first and foremost. (For the duration of the build script).\n\nThere are various ways to try and stop it finding another elsewhere, which I'll tr",https://github.com/bitcoin/bitcoin/pull/5152#issuecomment-61327897,61327897,
theuni,2014-10-31T21:21:47Z,"@DomT4 Confirmed working here with the changes described above. It seems homebrew removes itself from $PATH so that our 'brew' stuff never runs anyway. But it sets it up the same way we would have.\n\nAs I mentioned before, there's no need to mess with the PATH for bdb, it's never used. Only the includes/libs matter. Here's a working version with no patching required: http://pastebin.com/raw.php?i",https://github.com/bitcoin/bitcoin/pull/5152#issuecomment-61333443,61333443,
DomT4,2014-10-31T21:27:57Z,"@theuni Huh, that's strange. It wasn't working when I set those flags inside the Homebrew environment, we set flags a little differently to how you have there, but heck, if it works I'll take it. Thanks!\n",https://github.com/bitcoin/bitcoin/pull/5152#issuecomment-61334123,61334123,
