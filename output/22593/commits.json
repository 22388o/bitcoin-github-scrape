[
  {
    "sha": "ca6c154ef116e8d2e0484cdb1af13b34a0c86c17",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYTZjMTU0ZWYxMTZlOGQyZTA0ODRjZGIxYWYxM2IzNGEwYzg2YzE3",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-07-31T19:23:16Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-08-01T17:26:51Z"
      },
      "message": "test: refactor: remove `hex_str_to_bytes` helper\n\nUse the built-in class method bytes.fromhex() instead,\nwhich is available since Python 3.0.",
      "tree": {
        "sha": "4b38a878a5b2fd0f49a2cc0b0e1948b8119b40e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4b38a878a5b2fd0f49a2cc0b0e1948b8119b40e9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca6c154ef116e8d2e0484cdb1af13b34a0c86c17",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca6c154ef116e8d2e0484cdb1af13b34a0c86c17",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ca6c154ef116e8d2e0484cdb1af13b34a0c86c17",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca6c154ef116e8d2e0484cdb1af13b34a0c86c17/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f2e41d11097dde1c841bcaa8615886c984f71632",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2e41d11097dde1c841bcaa8615886c984f71632",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f2e41d11097dde1c841bcaa8615886c984f71632"
      }
    ],
    "stats": {
      "total": 97,
      "additions": 40,
      "deletions": 57
    },
    "files": [
      {
        "sha": "6d8e5430f801cb0ccd6606b996dd5cf6e75c343a",
        "filename": "test/functional/feature_dbcrash.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca6c154ef116e8d2e0484cdb1af13b34a0c86c17/test/functional/feature_dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca6c154ef116e8d2e0484cdb1af13b34a0c86c17/test/functional/feature_dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dbcrash.py?ref=ca6c154ef116e8d2e0484cdb1af13b34a0c86c17",
        "patch": "@@ -41,7 +41,6 @@\n from test_framework.util import (\n     assert_equal,\n     create_confirmed_utxos,\n-    hex_str_to_bytes,\n )\n \n \n@@ -204,7 +203,7 @@ def generate_small_transactions(self, node, count, utxo_list):\n                 continue\n \n             for _ in range(3):\n-                tx.vout.append(CTxOut(output_amount, hex_str_to_bytes(utxo['scriptPubKey'])))\n+                tx.vout.append(CTxOut(output_amount, bytes.fromhex(utxo['scriptPubKey'])))\n \n             # Sign and send the transaction to get into the mempool\n             tx_signed_hex = node.signrawtransactionwithwallet(tx.serialize().hex())['hex']"
      },
      {
        "sha": "f36575627e7b09b2f017458dab31917d0a7b07b7",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 9,
        "deletions": 10,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca6c154ef116e8d2e0484cdb1af13b34a0c86c17/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca6c154ef116e8d2e0484cdb1af13b34a0c86c17/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=ca6c154ef116e8d2e0484cdb1af13b34a0c86c17",
        "patch": "@@ -46,7 +46,6 @@\n     assert_equal,\n     assert_is_hex_string,\n     assert_raises_rpc_error,\n-    hex_str_to_bytes,\n     try_rpc,\n )\n \n@@ -140,7 +139,7 @@ def run_test(self):\n         for i in range(3):\n             newaddress = self.nodes[i].getnewaddress()\n             self.pubkey.append(self.nodes[i].getaddressinfo(newaddress)[\"pubkey\"])\n-            multiscript = CScript([OP_1, hex_str_to_bytes(self.pubkey[-1]), OP_1, OP_CHECKMULTISIG])\n+            multiscript = CScript([OP_1, bytes.fromhex(self.pubkey[-1]), OP_1, OP_CHECKMULTISIG])\n             p2sh_ms_addr = self.nodes[i].addmultisigaddress(1, [self.pubkey[-1]], '', 'p2sh-segwit')['address']\n             bip173_ms_addr = self.nodes[i].addmultisigaddress(1, [self.pubkey[-1]], '', 'bech32')['address']\n             assert_equal(p2sh_ms_addr, script_to_p2sh_p2wsh(multiscript))\n@@ -352,7 +351,7 @@ def run_test(self):\n         # Money sent to P2SH of multisig of this should only be seen after importaddress with the BASE58 P2SH address.\n \n         multisig_without_privkey_address = self.nodes[0].addmultisigaddress(2, [pubkeys[3], pubkeys[4]])['address']\n-        script = CScript([OP_2, hex_str_to_bytes(pubkeys[3]), hex_str_to_bytes(pubkeys[4]), OP_2, OP_CHECKMULTISIG])\n+        script = CScript([OP_2, bytes.fromhex(pubkeys[3]), bytes.fromhex(pubkeys[4]), OP_2, OP_CHECKMULTISIG])\n         solvable_after_importaddress.append(script_to_p2sh_script(script))\n \n         for i in compressed_spendable_address:\n@@ -426,7 +425,7 @@ def run_test(self):\n         op1 = CScript([OP_1])\n         op0 = CScript([OP_0])\n         # 2N7MGY19ti4KDMSzRfPAssP6Pxyuxoi6jLe is the P2SH(P2PKH) version of mjoE3sSrb8ByYEvgnC3Aox86u1CHnfJA4V\n-        unsolvable_address_key = hex_str_to_bytes(\"02341AEC7587A51CDE5279E0630A531AEA2615A9F80B17E8D9376327BAEAA59E3D\")\n+        unsolvable_address_key = bytes.fromhex(\"02341AEC7587A51CDE5279E0630A531AEA2615A9F80B17E8D9376327BAEAA59E3D\")\n         unsolvablep2pkh = key_to_p2pkh_script(unsolvable_address_key)\n         unsolvablep2wshp2pkh = script_to_p2wsh_script(unsolvablep2pkh)\n         p2shop0 = script_to_p2sh_script(op0)\n@@ -448,11 +447,11 @@ def run_test(self):\n         for i in compressed_spendable_address + uncompressed_spendable_address + compressed_solvable_address + uncompressed_solvable_address:\n             v = self.nodes[0].getaddressinfo(i)\n             if (v['isscript']):\n-                bare = hex_str_to_bytes(v['hex'])\n+                bare = bytes.fromhex(v['hex'])\n                 importlist.append(bare.hex())\n                 importlist.append(script_to_p2wsh_script(bare).hex())\n             else:\n-                pubkey = hex_str_to_bytes(v['pubkey'])\n+                pubkey = bytes.fromhex(v['pubkey'])\n                 p2pk = CScript([pubkey, OP_CHECKSIG])\n                 p2pkh = key_to_p2pkh_script(pubkey)\n                 importlist.append(p2pk.hex())\n@@ -612,18 +611,18 @@ def mine_and_test_listunspent(self, script_list, ismine):\n         return txid\n \n     def p2sh_address_to_script(self, v):\n-        bare = CScript(hex_str_to_bytes(v['hex']))\n-        p2sh = CScript(hex_str_to_bytes(v['scriptPubKey']))\n+        bare = CScript(bytes.fromhex(v['hex']))\n+        p2sh = CScript(bytes.fromhex(v['scriptPubKey']))\n         p2wsh = script_to_p2wsh_script(bare)\n         p2sh_p2wsh = script_to_p2sh_script(p2wsh)\n         return([bare, p2sh, p2wsh, p2sh_p2wsh])\n \n     def p2pkh_address_to_script(self, v):\n-        pubkey = hex_str_to_bytes(v['pubkey'])\n+        pubkey = bytes.fromhex(v['pubkey'])\n         p2wpkh = key_to_p2wpkh_script(pubkey)\n         p2sh_p2wpkh = script_to_p2sh_script(p2wpkh)\n         p2pk = CScript([pubkey, OP_CHECKSIG])\n-        p2pkh = CScript(hex_str_to_bytes(v['scriptPubKey']))\n+        p2pkh = CScript(bytes.fromhex(v['scriptPubKey']))\n         p2sh_p2pk = script_to_p2sh_script(p2pk)\n         p2sh_p2pkh = script_to_p2sh_script(p2pkh)\n         p2wsh_p2pk = script_to_p2wsh_script(p2pk)"
      },
      {
        "sha": "0cd6a7b0c6d1652928fa9030b97a9d4fd78bab40",
        "filename": "test/functional/interface_rest.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca6c154ef116e8d2e0484cdb1af13b34a0c86c17/test/functional/interface_rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca6c154ef116e8d2e0484cdb1af13b34a0c86c17/test/functional/interface_rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rest.py?ref=ca6c154ef116e8d2e0484cdb1af13b34a0c86c17",
        "patch": "@@ -19,7 +19,6 @@\n     assert_equal,\n     assert_greater_than,\n     assert_greater_than_or_equal,\n-    hex_str_to_bytes,\n )\n \n from test_framework.messages import BLOCK_HEADER_SIZE\n@@ -147,7 +146,7 @@ def run_test(self):\n \n         bin_request = b'\\x01\\x02'\n         for txid, n in [spending, spent]:\n-            bin_request += hex_str_to_bytes(txid)\n+            bin_request += bytes.fromhex(txid)\n             bin_request += pack(\"i\", n)\n \n         bin_response = self.test_rest_request(\"/getutxos\", http_method='POST', req_type=ReqType.BIN, body=bin_request, ret_type=RetType.BYTES)"
      },
      {
        "sha": "f3b80abb59fd934ced4631cbe4e2d7eac890c40a",
        "filename": "test/functional/p2p_invalid_messages.py",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca6c154ef116e8d2e0484cdb1af13b34a0c86c17/test/functional/p2p_invalid_messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca6c154ef116e8d2e0484cdb1af13b34a0c86c17/test/functional/p2p_invalid_messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_messages.py?ref=ca6c154ef116e8d2e0484cdb1af13b34a0c86c17",
        "patch": "@@ -28,7 +28,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    hex_str_to_bytes,\n )\n \n VALID_DATA_LIMIT = MAX_PROTOCOL_MESSAGE_LENGTH - 5  # Account for the 5-byte length prefix\n@@ -187,7 +186,7 @@ def test_addrv2_no_addresses(self):\n             [\n                 'received: addrv2 (1 bytes)',\n             ],\n-            hex_str_to_bytes('00'))\n+            bytes.fromhex('00'))\n \n     def test_addrv2_too_long_address(self):\n         self.test_addrv2('too long address',\n@@ -196,7 +195,7 @@ def test_addrv2_too_long_address(self):\n                 'ProcessMessages(addrv2, 525 bytes): Exception',\n                 'Address too long: 513 > 512',\n             ],\n-            hex_str_to_bytes(\n+            bytes.fromhex(\n                 '01' +       # number of entries\n                 '61bc6649' + # time, Fri Jan  9 02:54:25 UTC 2009\n                 '00' +       # service flags, COMPACTSIZE(NODE_NONE)\n@@ -213,7 +212,7 @@ def test_addrv2_unrecognized_network(self):\n                 'IP 9.9.9.9 mapped',\n                 'Added 1 addresses',\n             ],\n-            hex_str_to_bytes(\n+            bytes.fromhex(\n                 '02' +     # number of entries\n                 # this should be ignored without impeding acceptance of subsequent ones\n                 now_hex +  # time"
      },
      {
        "sha": "c53feaf0c6da5af5f431e503d1725eb4fb377bf3",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca6c154ef116e8d2e0484cdb1af13b34a0c86c17/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca6c154ef116e8d2e0484cdb1af13b34a0c86c17/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=ca6c154ef116e8d2e0484cdb1af13b34a0c86c17",
        "patch": "@@ -81,7 +81,6 @@\n from test_framework.util import (\n     assert_equal,\n     softfork_active,\n-    hex_str_to_bytes,\n     assert_raises_rpc_error,\n )\n \n@@ -415,7 +414,7 @@ def test_block_relay(self):\n                 block = self.test_node.request_block(block_hash, 2)\n                 wit_block = self.test_node.request_block(block_hash, 2 | MSG_WITNESS_FLAG)\n                 assert_equal(block.serialize(), wit_block.serialize())\n-                assert_equal(block.serialize(), hex_str_to_bytes(rpc_block))\n+                assert_equal(block.serialize(), bytes.fromhex(rpc_block))\n         else:\n             # After activation, witness blocks and non-witness blocks should\n             # be different.  Verify rpc getblock() returns witness blocks, while\n@@ -430,7 +429,7 @@ def test_block_relay(self):\n             rpc_block = self.nodes[0].getblock(block.hash, False)\n             non_wit_block = self.test_node.request_block(block.sha256, 2)\n             wit_block = self.test_node.request_block(block.sha256, 2 | MSG_WITNESS_FLAG)\n-            assert_equal(wit_block.serialize(), hex_str_to_bytes(rpc_block))\n+            assert_equal(wit_block.serialize(), bytes.fromhex(rpc_block))\n             assert_equal(wit_block.serialize(False), non_wit_block.serialize())\n             assert_equal(wit_block.serialize(), block.serialize())\n "
      },
      {
        "sha": "251cc85ae9a7acf807e0d235096297cd4533a887",
        "filename": "test/functional/rpc_addresses_deprecation.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca6c154ef116e8d2e0484cdb1af13b34a0c86c17/test/functional/rpc_addresses_deprecation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca6c154ef116e8d2e0484cdb1af13b34a0c86c17/test/functional/rpc_addresses_deprecation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_addresses_deprecation.py?ref=ca6c154ef116e8d2e0484cdb1af13b34a0c86c17",
        "patch": "@@ -10,7 +10,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    hex_str_to_bytes\n )\n \n \n@@ -36,7 +35,7 @@ def test_addresses_deprecation(self):\n \n         # This transaction is derived from test/util/data/txcreatemultisig1.json\n         tx = tx_from_hex(signed)\n-        tx.vout[0].scriptPubKey = hex_str_to_bytes(\"522102a5613bd857b7048924264d1e70e08fb2a7e6527d32b7ab1bb993ac59964ff39721021ac43c7ff740014c3b33737ede99c967e4764553d1b2b83db77c83b8715fa72d2102df2089105c77f266fa11a9d33f05c735234075f2e8780824c6b709415f9fb48553ae\")\n+        tx.vout[0].scriptPubKey = bytes.fromhex(\"522102a5613bd857b7048924264d1e70e08fb2a7e6527d32b7ab1bb993ac59964ff39721021ac43c7ff740014c3b33737ede99c967e4764553d1b2b83db77c83b8715fa72d2102df2089105c77f266fa11a9d33f05c735234075f2e8780824c6b709415f9fb48553ae\")\n         tx_signed = node.signrawtransactionwithwallet(tx.serialize().hex())['hex']\n         txid = node.sendrawtransaction(hexstring=tx_signed, maxfeerate=0)\n "
      },
      {
        "sha": "5b1514af6f18c650eaffd786d782be82fa3ccef9",
        "filename": "test/functional/rpc_decodescript.py",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca6c154ef116e8d2e0484cdb1af13b34a0c86c17/test/functional/rpc_decodescript.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca6c154ef116e8d2e0484cdb1af13b34a0c86c17/test/functional/rpc_decodescript.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_decodescript.py?ref=ca6c154ef116e8d2e0484cdb1af13b34a0c86c17",
        "patch": "@@ -11,7 +11,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    hex_str_to_bytes,\n )\n \n \n@@ -86,7 +85,7 @@ def decodescript_script_pub_key(self):\n         rpc_result = self.nodes[0].decodescript(multisig_script)\n         assert_equal('2 ' + public_key + ' ' + public_key + ' ' + public_key +  ' 3 OP_CHECKMULTISIG', rpc_result['asm'])\n         # multisig in P2WSH\n-        multisig_script_hash = sha256(hex_str_to_bytes(multisig_script)).hex()\n+        multisig_script_hash = sha256(bytes.fromhex(multisig_script)).hex()\n         assert_equal('0 ' + multisig_script_hash, rpc_result['segwit']['asm'])\n \n         # 4) P2SH scriptPubKey\n@@ -124,7 +123,7 @@ def decodescript_script_pub_key(self):\n         rpc_result = self.nodes[0].decodescript(cltv_script)\n         assert_equal('OP_IF ' + public_key + ' OP_CHECKSIGVERIFY OP_ELSE 500000 OP_CHECKLOCKTIMEVERIFY OP_DROP OP_ENDIF ' + public_key + ' OP_CHECKSIG', rpc_result['asm'])\n         # CLTV script in P2WSH\n-        cltv_script_hash = sha256(hex_str_to_bytes(cltv_script)).hex()\n+        cltv_script_hash = sha256(bytes.fromhex(cltv_script)).hex()\n         assert_equal('0 ' + cltv_script_hash, rpc_result['segwit']['asm'])\n \n         # 7) P2PK scriptPubKey\n@@ -209,23 +208,23 @@ def decoderawtransaction_asm_sighashtype(self):\n         signature_2_sighash_decoded = der_signature + '[NONE|ANYONECANPAY]'\n \n         # 1) P2PK scriptSig\n-        txSave.vin[0].scriptSig = hex_str_to_bytes(push_signature)\n+        txSave.vin[0].scriptSig = bytes.fromhex(push_signature)\n         rpc_result = self.nodes[0].decoderawtransaction(txSave.serialize().hex())\n         assert_equal(signature_sighash_decoded, rpc_result['vin'][0]['scriptSig']['asm'])\n \n         # make sure that the sighash decodes come out correctly for a more complex / lesser used case.\n-        txSave.vin[0].scriptSig = hex_str_to_bytes(push_signature_2)\n+        txSave.vin[0].scriptSig = bytes.fromhex(push_signature_2)\n         rpc_result = self.nodes[0].decoderawtransaction(txSave.serialize().hex())\n         assert_equal(signature_2_sighash_decoded, rpc_result['vin'][0]['scriptSig']['asm'])\n \n         # 2) multisig scriptSig\n-        txSave.vin[0].scriptSig = hex_str_to_bytes('00' + push_signature + push_signature_2)\n+        txSave.vin[0].scriptSig = bytes.fromhex('00' + push_signature + push_signature_2)\n         rpc_result = self.nodes[0].decoderawtransaction(txSave.serialize().hex())\n         assert_equal('0 ' + signature_sighash_decoded + ' ' + signature_2_sighash_decoded, rpc_result['vin'][0]['scriptSig']['asm'])\n \n         # 3) test a scriptSig that contains more than push operations.\n         # in fact, it contains an OP_RETURN with data specially crafted to cause improper decode if the code does not catch it.\n-        txSave.vin[0].scriptSig = hex_str_to_bytes('6a143011020701010101010101020601010101010101')\n+        txSave.vin[0].scriptSig = bytes.fromhex('6a143011020701010101010101020601010101010101')\n         rpc_result = self.nodes[0].decoderawtransaction(txSave.serialize().hex())\n         assert_equal('OP_RETURN 3011020701010101010101020601010101010101', rpc_result['vin'][0]['scriptSig']['asm'])\n "
      },
      {
        "sha": "312a4abbc3a2ff892c616e5701cf3d63e91e81f6",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca6c154ef116e8d2e0484cdb1af13b34a0c86c17/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca6c154ef116e8d2e0484cdb1af13b34a0c86c17/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=ca6c154ef116e8d2e0484cdb1af13b34a0c86c17",
        "patch": "@@ -20,7 +20,6 @@\n     assert_raises_rpc_error,\n     find_vout_for_address,\n     generate_to_height,\n-    hex_str_to_bytes,\n )\n from test_framework.messages import (\n     CTxInWitness,\n@@ -233,7 +232,7 @@ def verify_txn_with_witness_script(self, tx_type):\n         embedded_pubkey = eckey.get_pubkey().get_bytes().hex()\n         witness_script = {\n             'P2PKH': key_to_p2pkh_script(embedded_pubkey).hex(),\n-            'P2PK': CScript([hex_str_to_bytes(embedded_pubkey), OP_CHECKSIG]).hex()\n+            'P2PK': CScript([bytes.fromhex(embedded_pubkey), OP_CHECKSIG]).hex()\n         }.get(tx_type, \"Invalid tx_type\")\n         redeem_script = script_to_p2wsh_script(witness_script).hex()\n         addr = script_to_p2sh(redeem_script)"
      },
      {
        "sha": "fe733e9368db42a7f35170087fb8a95e9a255698",
        "filename": "test/functional/test_framework/address.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca6c154ef116e8d2e0484cdb1af13b34a0c86c17/test/functional/test_framework/address.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca6c154ef116e8d2e0484cdb1af13b34a0c86c17/test/functional/test_framework/address.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/address.py?ref=ca6c154ef116e8d2e0484cdb1af13b34a0c86c17",
        "patch": "@@ -12,7 +12,7 @@\n \n from .script import hash256, hash160, sha256, CScript, OP_0\n from .segwit_addr import encode_segwit_address\n-from .util import assert_equal, hex_str_to_bytes\n+from .util import assert_equal\n \n ADDRESS_BCRT1_UNSPENDABLE = 'bcrt1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3xueyj'\n ADDRESS_BCRT1_UNSPENDABLE_DESCRIPTOR = 'addr(bcrt1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3xueyj)#juyq9d97'\n@@ -33,7 +33,7 @@ def byte_to_base58(b, version):\n     result = ''\n     str = b.hex()\n     str = chr(version).encode('latin-1').hex() + str\n-    checksum = hash256(hex_str_to_bytes(str)).hex()\n+    checksum = hash256(bytes.fromhex(str)).hex()\n     str += checksum[:8]\n     value = int('0x' + str, 0)\n     while value > 0:\n@@ -100,7 +100,7 @@ def key_to_p2sh_p2wpkh(key, main=False):\n \n def program_to_witness(version, program, main=False):\n     if (type(program) is str):\n-        program = hex_str_to_bytes(program)\n+        program = bytes.fromhex(program)\n     assert 0 <= version <= 16\n     assert 2 <= len(program) <= 40\n     assert version > 0 or len(program) in [20, 32]\n@@ -121,14 +121,14 @@ def script_to_p2sh_p2wsh(script, main=False):\n \n def check_key(key):\n     if (type(key) is str):\n-        key = hex_str_to_bytes(key)  # Assuming this is hex string\n+        key = bytes.fromhex(key)  # Assuming this is hex string\n     if (type(key) is bytes and (len(key) == 33 or len(key) == 65)):\n         return key\n     assert False\n \n def check_script(script):\n     if (type(script) is str):\n-        script = hex_str_to_bytes(script)  # Assuming this is hex string\n+        script = bytes.fromhex(script)  # Assuming this is hex string\n     if (type(script) is bytes or type(script) is CScript):\n         return script\n     assert False"
      },
      {
        "sha": "5e6c9f37e83e08ab98754b9ce0be7a78a62d11d2",
        "filename": "test/functional/test_framework/blocktools.py",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca6c154ef116e8d2e0484cdb1af13b34a0c86c17/test/functional/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca6c154ef116e8d2e0484cdb1af13b34a0c86c17/test/functional/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blocktools.py?ref=ca6c154ef116e8d2e0484cdb1af13b34a0c86c17",
        "patch": "@@ -24,7 +24,6 @@\n     CTxInWitness,\n     CTxOut,\n     hash256,\n-    hex_str_to_bytes,\n     ser_uint256,\n     tx_from_hex,\n     uint256_from_str,\n@@ -214,7 +213,7 @@ def witness_script(use_p2wsh, pubkey):\n         pkscript = key_to_p2wpkh_script(pubkey)\n     else:\n         # 1-of-1 multisig\n-        witness_script = CScript([OP_1, hex_str_to_bytes(pubkey), OP_1, OP_CHECKMULTISIG])\n+        witness_script = CScript([OP_1, bytes.fromhex(pubkey), OP_1, OP_CHECKMULTISIG])\n         pkscript = script_to_p2wsh_script(witness_script)\n     return pkscript.hex()\n \n@@ -223,7 +222,7 @@ def create_witness_tx(node, use_p2wsh, utxo, pubkey, encode_p2sh, amount):\n \n     Optionally wrap the segwit output using P2SH.\"\"\"\n     if use_p2wsh:\n-        program = CScript([OP_1, hex_str_to_bytes(pubkey), OP_1, OP_CHECKMULTISIG])\n+        program = CScript([OP_1, bytes.fromhex(pubkey), OP_1, OP_CHECKMULTISIG])\n         addr = script_to_p2sh_p2wsh(program) if encode_p2sh else script_to_p2wsh(program)\n     else:\n         addr = key_to_p2sh_p2wpkh(pubkey) if encode_p2sh else key_to_p2wpkh(pubkey)\n@@ -246,7 +245,7 @@ def send_to_witness(use_p2wsh, node, utxo, pubkey, encode_p2sh, amount, sign=Tru\n     else:\n         if (insert_redeem_script):\n             tx = tx_from_hex(tx_to_witness)\n-            tx.vin[0].scriptSig += CScript([hex_str_to_bytes(insert_redeem_script)])\n+            tx.vin[0].scriptSig += CScript([bytes.fromhex(insert_redeem_script)])\n             tx_to_witness = tx.serialize().hex()\n \n     return node.sendrawtransaction(tx_to_witness)"
      },
      {
        "sha": "0523627cef30f95be1c31acb33c688cddbc70928",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca6c154ef116e8d2e0484cdb1af13b34a0c86c17/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca6c154ef116e8d2e0484cdb1af13b34a0c86c17/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=ca6c154ef116e8d2e0484cdb1af13b34a0c86c17",
        "patch": "@@ -30,7 +30,7 @@\n import time\n \n from test_framework.siphash import siphash256\n-from test_framework.util import hex_str_to_bytes, assert_equal\n+from test_framework.util import assert_equal\n \n MAX_LOCATOR_SZ = 101\n MAX_BLOCK_BASE_SIZE = 1000000\n@@ -197,7 +197,7 @@ def from_hex(obj, hex_string):\n     Note that there is no complementary helper like e.g. `to_hex` for the\n     inverse operation. To serialize a message object to a hex string, simply\n     use obj.serialize().hex()\"\"\"\n-    obj.deserialize(BytesIO(hex_str_to_bytes(hex_string)))\n+    obj.deserialize(BytesIO(bytes.fromhex(hex_string)))\n     return obj\n \n "
      },
      {
        "sha": "5d1d7ea45ce5fbf52356f4544c23ec0cbdb20166",
        "filename": "test/functional/test_framework/script_util.py",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca6c154ef116e8d2e0484cdb1af13b34a0c86c17/test/functional/test_framework/script_util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca6c154ef116e8d2e0484cdb1af13b34a0c86c17/test/functional/test_framework/script_util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/script_util.py?ref=ca6c154ef116e8d2e0484cdb1af13b34a0c86c17",
        "patch": "@@ -4,7 +4,6 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Useful Script constants and utils.\"\"\"\n from test_framework.script import CScript, hash160, sha256, OP_0, OP_DUP, OP_HASH160, OP_CHECKSIG, OP_EQUAL, OP_EQUALVERIFY\n-from test_framework.util import hex_str_to_bytes\n \n # To prevent a \"tx-size-small\" policy rule error, a transaction has to have a\n # non-witness size of at least 82 bytes (MIN_STANDARD_TX_NONWITNESS_SIZE in\n@@ -49,7 +48,7 @@ def key_to_p2sh_p2wpkh_script(key, main = False):\n \n def program_to_witness_script(version, program, main = False):\n     if isinstance(program, str):\n-        program = hex_str_to_bytes(program)\n+        program = bytes.fromhex(program)\n     assert 0 <= version <= 16\n     assert 2 <= len(program) <= 40\n     assert version > 0 or len(program) in [20, 32]\n@@ -70,14 +69,14 @@ def script_to_p2sh_p2wsh_script(script, main = False):\n \n def check_key(key):\n     if isinstance(key, str):\n-        key = hex_str_to_bytes(key) # Assuming this is hex string\n+        key = bytes.fromhex(key) # Assuming this is hex string\n     if isinstance(key, bytes) and (len(key) == 33 or len(key) == 65):\n         return key\n     assert False\n \n def check_script(script):\n     if isinstance(script, str):\n-        script = hex_str_to_bytes(script) # Assuming this is hex string\n+        script = bytes.fromhex(script) # Assuming this is hex string\n     if isinstance(script, bytes) or isinstance(script, CScript):\n         return script\n     assert False"
      },
      {
        "sha": "54f2fdee219240d8a95478992411ece43b4fbe34",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca6c154ef116e8d2e0484cdb1af13b34a0c86c17/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca6c154ef116e8d2e0484cdb1af13b34a0c86c17/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=ca6c154ef116e8d2e0484cdb1af13b34a0c86c17",
        "patch": "@@ -5,7 +5,6 @@\n \"\"\"Helpful routines for regression testing.\"\"\"\n \n from base64 import b64encode\n-from binascii import unhexlify\n from decimal import Decimal, ROUND_DOWN\n from subprocess import CalledProcessError\n import hashlib\n@@ -214,10 +213,6 @@ def count_bytes(hex_string):\n     return len(bytearray.fromhex(hex_string))\n \n \n-def hex_str_to_bytes(hex_str):\n-    return unhexlify(hex_str.encode('ascii'))\n-\n-\n def str_to_b64str(string):\n     return b64encode(string.encode('utf-8')).decode('ascii')\n \n@@ -517,7 +512,7 @@ def gen_return_txouts():\n     from .messages import CTxOut\n     txout = CTxOut()\n     txout.nValue = 0\n-    txout.scriptPubKey = hex_str_to_bytes(script_pubkey)\n+    txout.scriptPubKey = bytes.fromhex(script_pubkey)\n     for _ in range(128):\n         txouts.append(txout)\n     return txouts"
      },
      {
        "sha": "609553c6d01b7bfa6de3f6348dc5c1733e409a3b",
        "filename": "test/functional/test_framework/wallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca6c154ef116e8d2e0484cdb1af13b34a0c86c17/test/functional/test_framework/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca6c154ef116e8d2e0484cdb1af13b34a0c86c17/test/functional/test_framework/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet.py?ref=ca6c154ef116e8d2e0484cdb1af13b34a0c86c17",
        "patch": "@@ -27,7 +27,6 @@\n )\n from test_framework.util import (\n     assert_equal,\n-    hex_str_to_bytes,\n     satoshi_round,\n )\n \n@@ -73,7 +72,7 @@ def __init__(self, test_node, *, mode=MiniWalletMode.ADDRESS_OP_TRUE):\n             self._scriptPubKey = bytes(CScript([pub_key.get_bytes(), OP_CHECKSIG]))\n         elif mode == MiniWalletMode.ADDRESS_OP_TRUE:\n             self._address = ADDRESS_BCRT1_P2WSH_OP_TRUE\n-            self._scriptPubKey = hex_str_to_bytes(self._test_node.validateaddress(self._address)['scriptPubKey'])\n+            self._scriptPubKey = bytes.fromhex(self._test_node.validateaddress(self._address)['scriptPubKey'])\n \n     def scan_blocks(self, *, start=1, num):\n         \"\"\"Scan the blocks for self._address outputs and add them to self._utxos\"\"\""
      },
      {
        "sha": "1ee55aa3b7529832a9f0b6ed0d69519fb5bf9611",
        "filename": "test/functional/test_framework/wallet_util.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca6c154ef116e8d2e0484cdb1af13b34a0c86c17/test/functional/test_framework/wallet_util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca6c154ef116e8d2e0484cdb1af13b34a0c86c17/test/functional/test_framework/wallet_util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet_util.py?ref=ca6c154ef116e8d2e0484cdb1af13b34a0c86c17",
        "patch": "@@ -27,7 +27,6 @@\n     script_to_p2sh_script,\n     script_to_p2wsh_script,\n )\n-from test_framework.util import hex_str_to_bytes\n \n Key = namedtuple('Key', ['privkey',\n                          'pubkey',\n@@ -93,7 +92,7 @@ def get_multisig(node):\n         addr = node.getaddressinfo(node.getnewaddress())\n         addrs.append(addr['address'])\n         pubkeys.append(addr['pubkey'])\n-    script_code = CScript([OP_2] + [hex_str_to_bytes(pubkey) for pubkey in pubkeys] + [OP_3, OP_CHECKMULTISIG])\n+    script_code = CScript([OP_2] + [bytes.fromhex(pubkey) for pubkey in pubkeys] + [OP_3, OP_CHECKMULTISIG])\n     witness_script = script_to_p2wsh_script(script_code)\n     return Multisig(privkeys=[node.dumpprivkey(addr) for addr in addrs],\n                     pubkeys=pubkeys,"
      }
    ]
  }
]