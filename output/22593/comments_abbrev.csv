practicalswift,2021-07-31 20:41:53,Concept ACK,https://github.com/bitcoin/bitcoin/pull/22593#issuecomment-890401907,890401907,
DrahtBot,2021-08-01 01:08:01,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/22593#issuecomment-890426345,890426345,
theStack,2021-08-01 17:35:19,"Rebased on master due to conflict after merge of #22429.\n\nFor the previous ACK (thanks Zero-1729!), it can be trivially re-reviewed via `git range-diff ee5462683...ca6c154ef`",https://github.com/bitcoin/bitcoin/pull/22593#issuecomment-890559356,890559356,
practicalswift,2021-08-01 20:16:57,cr ACK ca6c154ef116e8d2e0484cdb1af13b34a0c86c17,https://github.com/bitcoin/bitcoin/pull/22593#issuecomment-890579964,890579964,
tryphe,2021-08-02 08:32:58,"Concept ACK, cr ACK ca6c154ef116e8d2e0484cdb1af13b34a0c86c17\n\nSilly question, shouldn't we also test `bytes.fromhex()`? Or maybe not if there's enough constants checked in other places.",https://github.com/bitcoin/bitcoin/pull/22593#issuecomment-890837779,890837779,
laanwj,2021-08-02 10:15:56,FWIW `unhexlify` can take `str` as well. There was already no need for the `encode()`. Though I guess using a built-in is slightly better.,https://github.com/bitcoin/bitcoin/pull/22593#issuecomment-890906198,890906198,
MarcoFalke,2021-08-02 10:34:57,"I slightly prefer the clear `bytes.fromhex` name over the cryptic `a2b_hex` or the negation `unhexlify`. In any case it could make sense to remove the `a2b_hex` and `unhexlify` uses. It doesn't really make sense to use four different ways (three after this pull), sometimes even mixed within the same file,  to achieve the same outcome. ",https://github.com/bitcoin/bitcoin/pull/22593#issuecomment-890918620,890918620,
