clarkmoody,2017-07-07T15:03:31Z,"Some ideas for additions:\n- Non-fee total output amount\n- Coinbase reward\n- Money supply including this block\n- Transaction weight `txweight` (it can be derived from existing fields, however)\n\nI would prefer to see both `time` and `mediantime` returned, since they are available.\n\nShould we return non-independent fields, such as `avgfee` when also including `totalfee` and `txs`?\n",https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-313707397,313707397,
jnewbery,2017-07-07T15:28:30Z,"> but once written, why not keep it?\n\nBecause more code => more bugs and more maintenance effort. I prefer:\n\nIf it's not really needed, why add it?\n\nThis is perhaps a nice-to-have, but since #8704, `getblock` can return all transactions in a block (without requiring `txindex`). Those can then be parsed and analysed offline.\n\nIs there a compelling use-case I'm missing here? This see",https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-313714215,313714215,
clarkmoody,2017-07-07T15:50:38Z,"> This is perhaps a nice-to-have, but since #8704, getblock can return all transactions in a block (without requiring txindex). Those can then be parsed and analysed offline.\n\nThis code pulls each transaction input's previous outpoint in order to compute transaction fees. Replicating that in RPC would require thousands of calls for most blocks.",https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-313720092,313720092,
jnewbery,2017-07-07T15:53:50Z,"> This code pulls each transaction input's previous outpoint\n\nAh yes, of course. ~Concept ACK~ in that case. Doing this with `getblock` / `getrawtransaction` is infeasible.\n\nEDIT: I'm going to reverse myself again: I don't think +700 lines is worthwhile for something with limited usage for most users. I'm -0 on this.",https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-313720976,313720976,
jtimon,2017-07-07T16:29:24Z,"> Because more code => more bugs and more maintenance effort. I prefer:\n\nSure, but I mean, removing for example the avgfee or avgfeerate won't  safe much code or testing code, just a few lines. Forget I said this, if there's specific functions to remove because nobody will want them, let's remove those and focus on the ones people want. Adding specific things only a few people want can also ha",https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-313729916,313729916,
clarkmoody,2017-07-07T16:37:46Z,"> Mhmm, it would be simpler to calculate here from start to end here than from genesis. But it's pretty trivial to write a function in any language that returns the total supply for a given height without access to any historic data. Unless you are talking about discounting op_return outputs or something like that. I don't think this is very interesting here. Perhaps that can be done in getchaintx",https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-313731922,313731922,
jtimon,2017-07-08T07:27:36Z,"Thanks again for the great feedback!\n\n@promag I think I solved all your nits except for https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126261101\n\n@clarkmoody I think I added most of your suggestions, explicitly excluding anything that involved accumulations neither from height=1 nor from height=start.\nThe former potentially implies a world of complexity and the latter can be t",https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-313840344,313840344,
promag,2017-07-08T07:36:50Z,@jtimon no problem. There are some nits to fix but I'll review more in depth later.,https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-313840707,313840707,
jtimon,2017-07-11T21:47:09Z,"Here are some images generated using this branch in combination with (WIP): https://github.com/jtimon/rpc-explorer\n\nGUI detail:\n\n![screenshot_plotter](https://user-images.githubusercontent.com/1008458/28092233-ed1cb2ca-6692-11e7-9374-38a98cd6c258.png)\n\nGUI detail zoom:\n\n![screenshot_plotter_zoom](https://user-images.githubusercontent.com/1008458/28092271-048e594a-6693-11e7-9572-81f",https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-314581913,314581913,
jtimon,2017-07-12T05:54:14Z,"Without the documentation for the result it was impossible to distinguish a weird choice to spring discussion from an implementation mistake. Removed the other TODO comments.\nCoded more pending suggestions by @promag (hopefully all pending ones? if not, please insist) with some extra bikeshedding derived from s/plotvalues/stats/ and adapt tests to start and end being allowed to be negative.\n\",https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-314659201,314659201,
jtimon,2017-08-24T20:27:13Z,"Needed rebase.\nIf somebody made a web for it, it may be interesting to show number of segwit txs too http://segwit.5gbfree.com/countsegwit\n\n",https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-324747757,324747757,
forklol,2017-08-29T08:35:27Z,Just wanted to say that this would be massively helpful to track statistics. I hope this finds it's way into a release soon.,https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-325594164,325594164,
jtimon,2017-08-31T06:57:27Z,"Reversed the order of the values to the natural one, since as discussed the optimization of doing fetching the blocks in reverse order is not worth the loss in clarity of the code.\nAdded segwit tx counter stat, and also the total size and weight for those txs (txs that at least have one sw input, txs sending to sw outputs don't count).\n",https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-326207756,326207756,
trippysalmon,2017-09-01T15:29:09Z,"Perhaps a better name for \<stat\>_old is \<stat\>_virtual, _virt or _v. Or perhaps prepend it with ""v""  just like the tx size in the output of `getrawtransaction` (vsize).\n\nFor example:\n\n`avgfeerate_old` becomes `vavgfeerate`\n`maxfeerate_old` becomes `vmaxfeerate`\n`medianfeerate_old` becomes `vmedianfeerate`\n\netc.",https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-326610892,326610892,
trippysalmon,2017-09-03T17:34:35Z,"I just finished calling `getblockstats` on every block in the chain and saving it into a database. I didn't encounter any issues and the performance is quite good (100-1000ms per ""full"" block on an i7 6900k /w 32gb ram + nvme ssd).\n\nBtw, if anyone is interested in the dataset I can share it. Just convo me at freenode irc (nick: ""trippysalmon""). It includes some other stats as well, like rollin",https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-326819183,326819183,
jlopp,2017-09-03T22:09:21Z,Just noticed this PR; I'll definitely be incorporating it into Statoshi once it's merged! :+1: ,https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-326834401,326834401,
jtimon,2017-09-07T01:19:18Z,"@trippysalmon I think you mean replacing s/<stat>feerate/v<stat>feerate/ and s/<stat>feerate_old/<stat>feerate/.\nAs discussed with @sipa the *feerate_old are using old size and the *feerate ones are using vsize.\n\nHow much interest there is in maintaining the old ones?\nPre-segwit both are identical and post segwit the old ones mean the how high the feerate would have been for mempool and mi",https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-327655184,327655184,
jtimon,2017-09-07T06:22:49Z,Rebased,https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-327699176,327699176,
trippysalmon,2017-09-07T15:10:58Z,"@jtimon ah yes, I got it now. I misinterpreted the meaning of the `_old` statistics.\n\nIn that case the `_old` statistics are indeed not that interesting. I would however like to see a pre segwit `total_size` statistic. That one is currently missing and it's kind of a hassle to calculate it through RPC calls.\n\nI will update my pre segwit total_vsize [PR](https://github.com/jtimon/bitcoin/pu",https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-327829878,327829878,
jtimon,2017-09-08T13:53:43Z,"@trippysalmon not sure what you mean by ""pre segwit total size"". Total size is included, but size it's size post and pre segwit. You mean you want a stat for total vsize ? Not sure that's very interesting...",https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-328109201,328109201,
trippysalmon,2017-09-08T15:54:52Z,"@jtimon yes I'm talking about total_vsize. Perhaps it depends on my particular use-case (comparing and graphing total_size vs total_vsize). My reasoning is that it is easy to add and compute inside core but not so much through RPC calls.\n\nIf you think total_vsize is not useful/interesting to others I don't mind maintaining it in a custom patch. I'm actually already using it in a project atm.\",https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-328142732,328142732,
jtimon,2017-09-08T23:52:20Z,"Removed reward and *feerate_old as discussed, but didn't squashed just in case.\nDiscussing with @trippysalmon we thought could show vsize instead of weight, but the former is just the latter / 4 (ie WITNESS_SCALE_FACTOR) and presenting the weight we can completely forget about rounding concerns (plus that's what getblock presents too, perhaps that's a reason to exclude it here).\n",https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-328238904,328238904,
jtimon,2017-10-05T15:23:54Z,"Using this branch more, at first a range of heights was convenient but I was ready to wait even if I had to call this rpc block by block.\nRight now, that's what I'm doing since once you start caching, calling this function is never a success but a cache failure. It is completely understandable that one doesn't want to manage failure ranges when failures can be discovered individually and thus pr",https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-334499898,334499898,
trippysalmon,2017-10-13T20:00:48Z,"I use this RPC call extensively (and persist the results in a DB) and never used the block height range, only single blocks.\n\n> Anyway, that would be my preference: replace height ranges with single height or single block height (both options).\n\nI think you meant block hash as the second option? For my use-case it doesn't really matter if I have to use the block height or block hash. Eithe",https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-336553230,336553230,
jtimon,2017-10-17T12:15:05Z,"Rebased, squashed, added ""mintxsize"", ""maxtxsize"", ""mediantxsize"" and ""avgtxsize"" stats.\n\nRegarding the ranges, thanks for the feedback, I'll wait to hear from other people.\n\nEDIT: btw, some of the tests are commented because tx sizes don't seem to be deterministic, I suspect due to coin selection. Not sure what to do about that.\n",https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-337212106,337212106,
jtimon,2018-01-16T04:37:00Z,"Fixed all nits by @ryanofsky except for https://github.com/bitcoin/bitcoin/pull/10757#discussion_r148039141 . Instead of solving it, I added a few new commits for people to discuss on.\n\nThe tests still can't test size or feerates while passing/failing in a deterministic fashion, but just by rebasing now ""swtxs"" seems to be actually tested without me doing anything (probably by https://github.c",https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-357851666,357851666,
jtimon,2018-01-31T21:59:09Z,"This needs rebase, but some feedback on the latest things and potential squashes would be nice before doing so.\n",https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-362085037,362085037,
ajtowns,2018-02-01T05:13:23Z,"What do you think about using a static blockchain so that testing is deterministic? I added some code to save the generated chain, and to reuse it if it's present and it doesn't seem too bad -- just using getblock(__,0) to get hex encoded blocks, and dumping them gives a 56kB file (or 10kB gzipped). That seems within the ballpark of something that could easily just be added as a static data file t",https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-362160709,362160709,
jtimon,2018-02-04T18:29:59Z,"> What do you think about using a static blockchain so that testing is deterministic? I added some code to save the generated chain, and to reuse it if it's present and it doesn't seem too bad -- just using getblock(__,0) to get hex encoded blocks, and dumping them gives a 56kB file (or 10kB gzipped). That seems within the ballpark of something that could easily just be added as a static data file",https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-362928394,362928394,
jtimon,2018-03-22T09:35:28Z,"@MarcoFalke what is the status of this in terms of testing?\n\nI think @ajtowns is right that *size, and *feerate fields can only be deterministically tested, but I don't have the time to write that at this point. I would be happy to review and test if anybody wants to take over though.\n\nIn the meantime, I would be happy to include the new call even if it's without any stat that depends on s",https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-375233914,375233914,
jtimon,2018-03-30T04:07:52Z,"Needed rebase. And still needs squashing pending on requested feedback.\n\nAlso, since testing some of the stats deterministically is not trivial, I think the new rpc call should be introduced only with the stats that can be deterministacally tested (even though we will miss some of the most interesting ones like sizes, fees and feerates) and then make the tests deterministic and add the missing",https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-377440180,377440180,
ajtowns,2018-03-30T07:45:42Z,"Proposed patch that makes testing of the stats kind of deterministic at https://github.com/jtimon/bitcoin/pull/11/commits\n\nIdea is you do `./feature_rpc_getblockstats --gen-test-data` to  generate a test blockchain and the expected statistics for that blockchain, and will write it to data/rpc_getblockstats.json file (about 50kB uncompressed text). You then check the stats look reasonable, and ",https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-377468912,377468912,
jtimon,2018-04-07T00:41:13Z,"Thanks a lot, incorporated those changes. Fixed some older nits too.\nPlease re-review.",https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-379419446,379419446,
jtimon,2018-04-19T10:22:52Z,"Fixed @jimpo 's nits, thanks.\n",https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-382685844,382685844,
jtimon,2018-04-20T19:48:45Z,Fixed nits. The latest commit I did not squash because I'm not convinced it is an improvement even though is +32-48 (see https://github.com/bitcoin/bitcoin/pull/10757#discussion_r182942644 ),https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-383203196,383203196,
jtimon,2018-04-20T20:21:56Z,"> I'm a bit confused by the bit about the x-axis in the PR description -- isn't plotting stuff in a different PR?\n\nSorry about the confusing edits. At first, height, time and mediantime were treated separately as I was using them as potential x-axis with my caller. Now they're just treated as like any other stat.\n\n> Seems a bit strange to exclude the coinbase from total_out; there's no way",https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-383211697,383211697,
ajtowns,2018-04-21T08:03:37Z,"I don't really have a strong opinion on `total_out`, I guess I just found it a little weird it doesn't include the coinbase outputs.\n\nAs far as height vs blockhash is concerned, I think specifying by height is probably easiest for people using the api, but maybe it would be good to include the blockhash in the output (so if you get different results for a given height due to a reorg, it's easy",https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-383276415,383276415,
jtimon,2018-04-21T15:12:56Z,"Yeah, my concern is precisely that, asking for a given height and getting the results for a block it's not what you were expecting, and yeah, both solutions (optionally accepting hash instead of height or always returning the block hash work) solve that problem.\nI guess I like more the first option because it's less data sent, but I guess the ""hash_or_height"" param name is ugly. I will do that a",https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-383304176,383304176,
jtimon,2018-04-23T23:03:11Z,"Since all the stats are optional anyway, I ended up doing both adding an optional blockhash in the result and my preference, which was moving from height to hash_or_height.\nAlso did some squashing and did further simplifications on both the rpc and the tests, including inling the function, since it didn't sense anymore after moving away from height ranges and removing the hardcoded list of expec",https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-383749798,383749798,
jtimon,2018-04-24T00:07:14Z,"Fixed the remaining nits: test when there's no txindex and give a specific error when txindex is required but not set as suggested by @jimpo.\n",https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-383761037,383761037,
jtimon,2018-04-24T13:36:38Z,"Fixed the tests with the node 1 in travis (in my computer the sync_all wasn't needed, oops) and did some bikeshedding.\n",https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-383932982,383932982,
jtimon,2018-04-24T23:06:22Z,"Hopefully fixed all the newest nits, thanks again.",https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-384107667,384107667,
jimpo,2018-04-25T01:15:52Z,ACK ddfe091,https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-384129427,384129427,
ajtowns,2018-04-25T21:30:56Z,"Weird. I'm getting consistent failures with 2dffcdc2afd7ee98f170af933b94186c455425bc on the `sync_all()` after `load_test_data()` -- it just hangs, because node 1 is never actually seeing the blocks. If I add a `node.generate(1)` beforehand, things work. The problem seems to be that the node doing the `submitblock` calls is never leaving InitialBlockDownload, and while it's in IBD it's not relayin",https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-384440743,384440743,
jtimon,2018-04-27T01:36:59Z,"@ajtowns I think I solved it with mocktime as discussed, but since the time is in the file generated again, I advice not to merge it after we test it again after 24 of the data file being created (last time it only started failing after that),",https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-384837468,384837468,
jtimon,2018-05-01T19:20:05Z,"@ajtowns now it seems to work 24 hours after generating the data\n\n@TheBlueMatt yeah, it looks simpler now without using CFeeRate or CFeeRate::GetTruncatedFee. Thanks\n\nIndependently of that, if we want more precision for feerates (say, move from sat/vbyte to sat/vKB or whatever), now it's the right time to decide so.\nI guess we could also support arbitrary precision with an optional feera",https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-385763015,385763015,
jtimon,2018-05-07T10:53:46Z,"Fixed last 2 nits. Added a test for when blocks aren't found.\nAlso needed rebase.",https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-387029644,387029644,
promag,2018-05-15T13:21:53Z,Lightly tested ACK 563eee9.,https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-389164302,389164302,
jtimon,2018-05-22T21:29:58Z,"Fixed help nits (also made other improvements, some other things in the help were ugly).\n",https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-391147219,391147219,
promag,2017-07-07T22:37:58Z,Remove.,https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126259127,126259127,src/rpc/blockchain.cpp
promag,2017-07-07T22:52:25Z,"```cpp\nstd::set<std::string> allowed_plot_values = {""minfee"", ""maxfee"", ""...""};\n```",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126260721,126260721,src/rpc/blockchain.cpp
promag,2017-07-07T22:53:29Z,Remove.,https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126260851,126260851,src/rpc/blockchain.cpp
promag,2017-07-07T22:54:32Z,"```cpp\n""..."" + boost::join(allowed_plot_values, "","")\n```",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126261000,126261000,src/rpc/blockchain.cpp
promag,2017-07-07T22:55:17Z,Missing result example.,https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126261085,126261085,src/rpc/blockchain.cpp
promag,2017-07-07T22:55:25Z,Duplicate.,https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126261101,126261101,src/rpc/blockchain.cpp
promag,2017-07-07T23:00:26Z,"```cpp\nstd::set<std::string> plot_values;\nif (request.params.size() > 2) {\n  boost::split(plot_values, request.params[2].get_str(), boost::is_any_of("",""));\n\n  // only validate in this case\n  // ... \n} else {\n  plot_values = allowed_plot_values;\n}\n```",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126261710,126261710,src/rpc/blockchain.cpp
promag,2017-07-07T23:03:29Z,Remove.,https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126262049,126262049,src/rpc/blockchain.cpp
promag,2017-07-07T23:07:37Z,"```cpp\nif (allowed_plot_values.count(plot_value) == 0) {\n```",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126262450,126262450,src/rpc/blockchain.cpp
jtimon,2017-07-08T00:08:10Z,One is HelpExampleCli and the other is HelpExampleRpc,https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126267402,126267402,src/rpc/blockchain.cpp
promag,2017-07-08T00:16:40Z,"Ops sorry, overlooked it.",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126267869,126267869,src/rpc/blockchain.cpp
jtimon,2017-07-08T00:57:06Z,"duh, I was so much over-complicating things so much for no good reason...thank you!",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126269648,126269648,src/rpc/blockchain.cpp
promag,2017-07-09T00:11:49Z,Drop `_`? Same below.,https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126292902,126292902,src/policy/feerate.cpp
promag,2017-07-09T00:13:04Z,Keep argument order as `ReadBlockFromDisk`? Is there a convention for where the *output arguments* should be?,https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126292910,126292910,src/rpc/blockchain.cpp
promag,2017-07-09T00:19:36Z,"Nit, could sort only after `size == 1` case.",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126292958,126292958,src/rpc/blockchain.cpp
promag,2017-07-10T15:34:29Z,`static constexpr ...`,https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126457455,126457455,src/rpc/blockchain.cpp
promag,2017-07-10T15:34:43Z,Remove empty line.,https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126457503,126457503,src/rpc/blockchain.cpp
promag,2017-07-10T15:51:49Z,Remove.,https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126462550,126462550,src/rpc/blockchain.cpp
promag,2017-07-10T15:52:22Z,"```cpp\nUpdateBlockStats(chainActive[i], ...);\n```",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126462704,126462704,src/rpc/blockchain.cpp
promag,2017-07-10T15:54:58Z,"Replace `plotvalues` with `stats`? Also, 3rd argument could be object `options`?",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126463400,126463400,src/rpc/blockchain.cpp
promag,2017-07-10T15:56:31Z,"Nit, negative block could mean `end = height - end` to avoid early blocks (not new concept here I believe)?",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126463865,126463865,src/rpc/blockchain.cpp
jtimon,2017-07-10T17:56:12Z,"Not that I know of, but your proposed change sounds good to me.",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126492736,126492736,src/rpc/blockchain.cpp
jtimon,2017-07-10T17:58:25Z,what's the gain? https://stackoverflow.com/a/41132221/935325 says it's the same...,https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126493273,126493273,src/rpc/blockchain.cpp
jtimon,2017-07-10T18:00:48Z,"This will be slightly less efficient, no?",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126493852,126493852,src/rpc/blockchain.cpp
jtimon,2017-07-10T18:03:16Z,"Mhmm, interesting. To be clear you mean start=-10 end=200 would be equivalent to start=190 end=200, right?\n",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126494452,126494452,src/rpc/blockchain.cpp
jtimon,2017-07-10T18:03:56Z,Isn't the string simpler?,https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126494613,126494613,src/rpc/blockchain.cpp
jtimon,2017-07-11T00:28:26Z,"Well, yes, conserving the old name only saves 1 line of extra disruption. But I guess if we're touching the variable name we should use the new style. just bytes?",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126569538,126569538,src/policy/feerate.cpp
promag,2017-07-11T10:45:53Z,"No, I meant negative values are relative to the tip. To get the stats for the last 10 blocks you would pass start = -10 without querying the current block height.",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126654629,126654629,src/rpc/blockchain.cpp
promag,2017-07-11T10:46:43Z,Ignore `options` suggestion.,https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126654771,126654771,src/rpc/blockchain.cpp
promag,2017-07-11T10:48:01Z,I guess it takes few more cycles but non critical code should be cleaner?,https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126655004,126655004,src/rpc/blockchain.cpp
sipa,2017-09-03T21:19:17Z,"For feerate you should use the virtual size, not total size.",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r136726580,136726580,src/rpc/blockchain.cpp
jtimon,2017-09-07T01:06:08Z,"feerate is using vsize, feerate_old is using old size. Perhaps we just want to remove the whole *_old family.",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r137426640,137426640,src/rpc/blockchain.cpp
ajtowns,2017-10-19T07:51:39Z,"Shouldn't this be GetTransaction(..., false) ?",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r145622618,145622618,src/rpc/blockchain.cpp
ajtowns,2017-10-19T10:21:34Z,"I think the values, fees and fee rates should be wrapped with ValueFromAmount, so outputs are decimal bitcoins rather than integer satoshis, for consistency with other RPC calls.",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r145659377,145659377,src/rpc/blockchain.cpp
ajtowns,2017-10-19T10:24:02Z,"None of the transactions have witness data, so this isn't actually checking whether swtxs, swtotal_size, swtotal_weight ever output anything other than 0, or whether weight is ever anything other than size*4.",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r145659877,145659877,test/functional/getblockstats.py
jtimon,2017-10-21T14:33:58Z,"No, we want to allow the slow fetch too. If the data is calculable we want to provide it no matter if more slowly. This rpc call shouldn't be expected to be fast anyway.",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r146106768,146106768,src/rpc/blockchain.cpp
jtimon,2017-10-21T14:37:23Z,"This is true. When I wrote this segwit wasn't activated, but now it would be nice to add segwit txs to the test because otherwise this functionality isn't really being tested. Good call.",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r146106887,146106887,test/functional/getblockstats.py
ajtowns,2017-10-24T12:24:24Z,"I'm presuming this reply should be to the ""GetTransaction(..., false)"" comment. Getting fee info without txindex seems like a weird thing to do to me, but if it's supported then presumably the getblockstats RPC help text doesn't need to still say ""It won't work .. without -txindex."" ?",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r146541947,146541947,src/rpc/blockchain.cpp
jtimon,2017-10-24T13:04:35Z,"Yeah, sorry. Was meant for the other comment. Actually looking at the code again the slow search will only find txs in the utxo, so using false should be fine. I'll test it with false.\n\nRegarding using BTC instead of satoshis, I think we want to move everything to satoshis but we don't do it because it would be too disruptive, so we only do it with new calls.\nThe caller can trivially divide ",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r146551957,146551957,src/rpc/blockchain.cpp
ryanofsky,2017-10-31T14:56:59Z,"In commit ""Avoid special case for truncated zeros with new CFeeRate::GetTruncatedFee"":\n\nI found this commit message hard to understand. Would suggest something more like:\n\n> [refactoring] Add new CFeeRate::GetTruncatedFee method\n>\n> Add new truncated fee method that unlike the CFeeRate::GetFee will round fees between 1 and -1 satoshi to zero instead of 1 or -1. This does not change the",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r148021712,148021712,src/policy/feerate.cpp
ryanofsky,2017-10-31T15:05:59Z,"In commit ""RPC: Separate ReadBlockCheckPruned() from getblock()""\n\nSince this is throwing on error it seems like it would be friendlier to just return the CBlock instead of taking it as output parameter.\n\n```c++\nCBlock ReadBlockChecked(const BlockIndex*)\n```\n\nAlso it would be good if commit message mentioned this is a refactoring and not a change in behavior.\n\n",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r148024745,148024745,src/rpc/blockchain.cpp
ryanofsky,2017-10-31T15:12:17Z,"In commit ""RPC: Introduce getblockstats to plot things""\n\nMaybe call this ""GetTransactionChecked"" instead of ""RpcGetTx"" to be consistent with ""ReadBlockChecked"" in previous commit.\n\nAlso again since this is throwing on error this would be simpler to use if it just returned CTransactionRef instead of using an output parameter.",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r148026891,148026891,src/rpc/blockchain.cpp
ryanofsky,2017-10-31T15:13:12Z,"In commit ""RPC: Introduce getblockstats""\n\nIf statement should be on new line, or preceded by `else`, or just dropped since the code below will handle this case anyway.",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r148027175,148027175,src/rpc/blockchain.cpp
ryanofsky,2017-10-31T15:26:30Z,"> what's the gain? https://stackoverflow.com/a/41132221/935325 says it's the same...\n\nGain is just that constexpr is more descriptive, and that stackoverflow answer isn't really correct. `const` and `constexpr` aren't identical even for integers, for example `const` is valid here:\n\n```c++\nstatic const int X = rand();\n```\nwhere `constexpr` would not be:\n\n```c++\nstatic constexpr ",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r148031472,148031472,src/rpc/blockchain.cpp
ryanofsky,2017-10-31T15:36:34Z,"In commit ""RPC: Introduce getblockstats""\n\nMaybe s/selected/requested/ since ""selected"" sounds more like something the RPC is computing.",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r148034720,148034720,src/rpc/blockchain.cpp
ryanofsky,2017-10-31T15:38:13Z,"In commit ""RPC: Introduce getblockstats""\n\n`stats` reference should be const, and again I think `map_stats` should be a return value instead of an output parameter so calling this function is simpler and less error prone.\n\nAlso 'UpdateBlockStats' should probably be called 'GetBlockStats' because 'UpdateBlockStats' sounds like something that would be called repeatedly to update existing stat",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r148035291,148035291,src/rpc/blockchain.cpp
ryanofsky,2017-10-31T15:49:57Z,"In commit ""RPC: Introduce getblockstats""\n\nIt seems clumsy and unnecessary to have to list these entries three separate places (here, in UpdateBlockStats, and in the getblockstats help string). It seems like it would be better to drop this listing and simplify the code by just building a fixed map:\n\n```c++\nstd::map<std::string, UniValue> GetBlockStats(CBlockIndex* block)\n{\n    ...\n ",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r148039141,148039141,src/rpc/blockchain.cpp
ryanofsky,2017-10-31T15:55:38Z,"In commit ""RPC: Introduce getblockstats""\n\nIt seems weird for a JSON api to be taking a comma separated string instead of a list of strings. Do we have other RPCs that use comma separated strings?",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r148040858,148040858,src/rpc/blockchain.cpp
ryanofsky,2017-10-31T16:21:54Z,"In commit ""RPC: Introduce getblockstats"":\n\nBug: This should be `current_tip + height + 1` so height -1 will return tip.",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r148049297,148049297,src/rpc/blockchain.cpp
ryanofsky,2017-10-31T16:26:31Z,"In commit ""QA: Test new getblockstats RPC""\n\nUnneeded parentheses",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r148050658,148050658,test/functional/getblockstats.py
ryanofsky,2017-10-31T16:26:49Z,"In commit ""QA: Test new getblockstats RPC""\n\nUnneeded parentheses (assert is not a function)",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r148050746,148050746,test/functional/getblockstats.py
ryanofsky,2017-10-31T16:42:25Z,"In commit ""QA: Test new getblockstats RPC""\n\nSeems like it would be simpler to combine the two asserts\n\n```python\nassert_equal(set(all_values), set(stats[0]))\n```",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r148055540,148055540,test/functional/getblockstats.py
ryanofsky,2017-10-31T16:44:17Z,"In commit ""QA: Test new getblockstats RPC""\n\nCould simplify with list comprehension:\n\n```python\nstats = [node.getblockstats(height=start_height + i) for i in range(max_stat_pos+1)]\n```",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r148056136,148056136,test/functional/getblockstats.py
ryanofsky,2017-10-31T16:48:26Z,"In commit ""QA: Test new getblockstats RPC""\n\nAgain, seems like it would be simpler to just check for equality:\n\n```python\nstats = node.getblockstats(height=1, stats='minfee,maxfee')\nassert_equal(set(stats), {""minfee"", ""maxfee""})\n```",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r148057310,148057310,test/functional/getblockstats.py
jtimon,2018-01-15T21:39:39Z,I don't know. I don't mind moving to a list of strings if that's preferred. Makes sense.,https://github.com/bitcoin/bitcoin/pull/10757#discussion_r161619680,161619680,src/rpc/blockchain.cpp
jtimon,2018-01-15T21:42:16Z,"Some statistics are already more expensive to compute than others, it seems like a good feature to allow the user to optionally skip some from the beginning.",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r161620060,161620060,src/rpc/blockchain.cpp
jtimon,2018-01-15T21:47:01Z,"Yeah, it made sense to be update when the call did a loop from start height to end height, but not now that it calculates stats for a single block.\n",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r161620738,161620738,src/rpc/blockchain.cpp
jtimon,2018-01-16T00:40:27Z,"Oh, but it is currently calculating everything regardless of the stats requested...it wasn't like that before, I should re-introduce the optimzations for the option to really make sense.\nEven if not all of them are expensive, perhaps one caller is only interested in one or a few stats and if the caller is going to make many calls for many heights, the performance hit of any undesired stat adds u",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r161639518,161639518,src/rpc/blockchain.cpp
jimpo,2018-04-13T02:47:41Z,"commit: RPC: Introduce getblockstats to plot things\n\nnit: Copy initialization works here. `UniValue stats_univalue = request.params[1].get_array();`",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r181274008,181274008,src/rpc/blockchain.cpp
jimpo,2018-04-13T02:49:31Z,"Seems to be updated to an array, but comment is not updated.",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r181274172,181274172,src/rpc/blockchain.cpp
jimpo,2018-04-13T02:54:43Z,"commit: RPC: Introduce getblockstats to plot things\n\nThe `nStart` and `nEnd` seem wrong. Should just be height now, no?",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r181274673,181274673,src/rpc/blockchain.cpp
jimpo,2018-04-13T02:57:54Z,"commit: RPC: Introduce getblockstats\n\nI got confused by the `push_back(Pair(...))` syntax. Can you just use `pushKV(stat, map_stats[stat])` which seems to be more standard?",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r181274966,181274966,src/rpc/blockchain.cpp
jimpo,2018-04-13T03:07:54Z,"commit: RPC: Introduce getblockstats\n\nI had to check the RPC help doc to see if this was a mistake. Would be helpful to leave an explicit comment: `// Don't count coinbase reward`.",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r181276481,181276481,src/rpc/blockchain.cpp
jimpo,2018-04-16T03:45:05Z,"Surfacing this error seems like the the wrong error handling strategy. In the context this is used, the transaction should never be in the mempool and it should *always* be found if the txindex is present.\n\nI think it would be better for the RPC to raise an RPC error that the txindex is required if it is not present, and an RPC error for an unexpected internal error (txindex is corrupt) otherw",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r181616478,181616478,src/rpc/blockchain.cpp
jimpo,2018-04-16T03:53:01Z,"commit: Tests: Test new getblockstats RPC\n\ntypo: check_co**i**ntains",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r181617056,181617056,test/functional/rpc_getblockstats.py
jimpo,2018-04-16T03:53:49Z,"commit: Tests: Test new getblockstats RPC\n\nI think it's worth testing the case of no txindex.",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r181617123,181617123,test/functional/rpc_getblockstats.py
jimpo,2018-04-16T03:55:39Z,"commit: Tests: Test new getblockstats RPC\n\nThe `assert_contains` function appears unused.",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r181617257,181617257,test/functional/rpc_getblockstats.py
jimpo,2018-04-16T03:58:53Z,"commit: Tests: Save and load block and corresponding expected statistics\n\nIf all these test cases are getting removed anyway, I'd just drop them from the previous commit.",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r181617517,181617517,test/functional/rpc_getblockstats.py
jimpo,2018-04-16T04:03:55Z,"commit: Tests: Save and load block and corresponding expected statistics\n\nInstead of hand-crafting the JSON, I think it's better to just create a dict with `stats` and `blocks` keys and json.dump that. It seems you might be doing this for better control over the indentation, but the data file added in the next commit has each stat on its own line.",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r181617905,181617905,test/functional/rpc_getblockstats.py
ajtowns,2018-04-16T05:08:39Z,"It puts the stats on separate lines, but all the blocks on a single line. Seemed like a good idea at the time (multiline stats hand editable, block data as a minimal blob), but doesn't make much difference.",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r181623181,181623181,test/functional/rpc_getblockstats.py
ajtowns,2018-04-20T04:10:47Z,"Should be `medianfeerate`, not `_weight`.",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r182941877,182941877,src/rpc/blockchain.cpp
ajtowns,2018-04-20T04:12:58Z,"`loop_inputs` is also needed when `utxo_size_inc` is requested. Setting `loop_outputs = loop_inputs || stats.count(""total_out"")` might simplify things a little.",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r182942079,182942079,src/rpc/blockchain.cpp
ajtowns,2018-04-20T04:19:52Z,"Could move the ""Invalid requested statistic"" check to here, ie:\n\n```\n    for (auto stat : stats) {\n        if (map_stats.count(stat) == 0) {\n            throw JSONRPCError(...);\n        }\n        ret.pushKV(stat, map_stats[stat]);\n   }\n```\n\nThen you wouldn't need `valid_stats`. Downside is the error response would only come after the valid stats were corrected.",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r182942644,182942644,src/rpc/blockchain.cpp
ajtowns,2018-04-20T04:22:58Z,"These initialisations are a bit hard to follow. What do you think of:\n\n```\ntemplate<typename T> static inline bool SetHasKeys(const std::set<T>& set) {return false;}\ntemplate<typename T, typename Tk, typename... Args> static inline bool SetHasKeys(const std::set<T>& set, const Tk& key, const Args&... args)\n{\n    return (set.count(key) != 0) || SetHasKeys(set, args...);\n}\n\n    con",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r182942912,182942912,src/rpc/blockchain.cpp
ajtowns,2018-04-20T04:27:27Z,"Suggest adding:\n\n```\n       # Make sure each stat can be queried on its own\n       for stat in self.EXPECTED_STATS:\n           for i in range(self.max_stat_pos+1):\n               result = node.getblockstats(height=self.start_height + i, stats=[stat])\n               assert_equal(list(result.keys()), [stat])\n               if result[stat] != self.expected_stats[i][stat]:\n          ",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r182943314,182943314,test/functional/rpc_getblockstats.py
jtimon,2018-04-20T18:17:11Z,"Oops, github hid this reminder about the comment from me, fixing.",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r183131662,183131662,src/rpc/blockchain.cpp
jimpo,2018-04-20T19:13:31Z,"Do you know if fancy templating stuff like this will slow down compilation times noticeably? I'd kind of prefer a normal iterative runtime approach for simplicity, especially given that it would be far from the most expensive part of this API call.",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r183145068,183145068,src/rpc/blockchain.cpp
jtimon,2018-04-20T19:46:13Z,"I ended up taking the code suggestion, even though I'm not eliminating the ""stats"" argument.\nIt is still much closer to what you wanted now.",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r183152048,183152048,src/rpc/blockchain.cpp
ajtowns,2018-04-21T07:45:06Z,"Could do:\n\n```\n    const bool do_all = stats.size() > 0;\n    const bool do_mediantxsize = do_all || SetHasKeys(stats, ""mediantxsize);\n    const bool do_medianfee = do_all || ...;\n    ...\n```",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r183203177,183203177,src/rpc/blockchain.cpp
ajtowns,2018-04-21T07:55:35Z,"There's two tests for `(height < 0)` here, the first of which should be setting height to a positive value. Seems like a rebasing error?",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r183203448,183203448,src/rpc/blockchain.cpp
jtimon,2018-04-21T15:06:46Z,"I think it is a rest from when moving from a range to a single height, but yeah, thanks.",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r183211877,183211877,src/rpc/blockchain.cpp
promag,2018-04-24T17:48:06Z,`for (const std::string& stat : stats) {`,https://github.com/bitcoin/bitcoin/pull/10757#discussion_r183823240,183823240,src/rpc/blockchain.cpp
promag,2018-04-24T17:52:16Z,"Could avoid 2nd lookup:\n```cpp\nconst UniValue& value = ret_all[stat];\nif (value.isNull()) {\n    throw ...;\n}\nret.pushKV(stat, value);",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r183824637,183824637,src/rpc/blockchain.cpp
promag,2018-04-24T17:58:55Z,Ping.,https://github.com/bitcoin/bitcoin/pull/10757#discussion_r183826618,183826618,test/functional/rpc_getblockstats.py
jimpo,2018-04-24T19:59:19Z,Also need to add argument 1 for stats to be parsed as an array.,https://github.com/bitcoin/bitcoin/pull/10757#discussion_r183860805,183860805,src/rpc/client.cpp
jimpo,2018-04-24T20:03:52Z,"CLI help doc is incorrect. It should be `""1000 '[\""minfeerate\"",\""avgfeerate\""]'""` (once stats is added in client.cpp).",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r183862179,183862179,src/rpc/blockchain.cpp
jtimon,2018-04-24T22:18:11Z,"Mhmm, yeah. Why is this working without it?",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r183897081,183897081,src/rpc/client.cpp
promag,2018-04-24T22:21:48Z,Only relevant for bitcoin-cli client.,https://github.com/bitcoin/bitcoin/pull/10757#discussion_r183897785,183897785,src/rpc/client.cpp
TheBlueMatt,2018-04-28T01:49:17Z,I find this incredibly hard to read. Why not just use floating point and calculate it all manually? Then you wouldn't have to work around rounding issues (and wouldnt have the rounding issues you see here where things are rounded to the nearest 1).,https://github.com/bitcoin/bitcoin/pull/10757#discussion_r184835724,184835724,src/rpc/blockchain.cpp
ajtowns,2018-04-30T07:06:59Z,Think mocktime needs to be set prior to `submitblock`,https://github.com/bitcoin/bitcoin/pull/10757#discussion_r184920965,184920965,test/functional/rpc_getblockstats.py
TheBlueMatt,2018-05-01T20:04:17Z,You dont need the size() check.,https://github.com/bitcoin/bitcoin/pull/10757#discussion_r185319287,185319287,src/rpc/blockchain.cpp
TheBlueMatt,2018-05-01T20:05:01Z,I believe if the hash is invalid GetBlockChecked will crash trying to deref the blockindex nullptr.,https://github.com/bitcoin/bitcoin/pull/10757#discussion_r185319486,185319486,src/rpc/blockchain.cpp
promag,2018-05-07T13:04:12Z,"Linter error:\n```\nW293 blank line contains whitespace.\n```",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r186416166,186416166,test/functional/rpc_getblockstats.py
jtimon,2018-05-08T22:42:15Z,Fixed,https://github.com/bitcoin/bitcoin/pull/10757#discussion_r186888752,186888752,test/functional/rpc_getblockstats.py
promag,2018-05-15T13:22:28Z,This is fixed.,https://github.com/bitcoin/bitcoin/pull/10757#discussion_r188283911,188283911,src/rpc/blockchain.cpp
kallewoof,2018-05-17T07:59:42Z,"Due to two escapes in below lines, this needs to remove two spaces for alignment.",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r188868935,188868935,src/rpc/blockchain.cpp
kallewoof,2018-05-17T08:05:38Z,"Just a note here. In https://github.com/bitcoin/bitcoin/blob/4cfe17c3382ba750131cdc8703b2978132822070/src/rpc/blockchain.cpp#L809-L818 `RPC_MISC_ERROR` is used, while `RPC_INVALID_ADDRESS_OR_KEY` is used here. Not sure which is better, but I think they should both use the same error type. (This PR touches the other one so could easily tweak, I think.)",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r188870349,188870349,src/rpc/blockchain.cpp
kallewoof,2018-05-17T08:13:39Z,"May be ok, but I think `(txfee * WITNESS_SCALE_FACTOR) / (weight + WITNESS_SCALE_FACTOR - 1)` is precisely accurate while the above will have truncation errors sometimes.",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r188872411,188872411,src/rpc/blockchain.cpp
jimpo,2018-05-17T18:42:49Z,"I disagree. If the header is not found, that means the request was invalid, hence **RPC_INVALID** _ADDRESS_OR_ **KEY** (key loosely taken to mean request argument, I take it). Whereas if the header is known but the block is not known, I do consider that to be a different error.\n\nIn #13144, I introduce RPC_DATA_UNAVAILABLE, which may be more appropriate than RPC_MISC in the latter case.",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r189062027,189062027,src/rpc/blockchain.cpp
jimpo,2018-05-17T19:03:36Z,"That equation has truncated errors. Consider a tx with weight 3 and fee 100. The vsize is 1, so the fee rate should be 1, but your equation would give (100 * 4) / 6 = 66.\n\nYou point out correctly though that vsize is computed incorrectly here by rounding down rather than up. This should use `GetVirtualTransactionSize()`.",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r189068163,189068163,src/rpc/blockchain.cpp
jtimon,2018-05-17T19:15:57Z,"Sorry, I don't follow. This is using GetTransactionWeight() which does ```::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION)```\n\nGetVirtualTransactionSize does ```(std::max(nWeight, nSigOpCost * nBytesPerSigOp) + WITNESS_SCALE_FACTOR - 1) / WITNESS_SCALE_FACTOR```\n\nBut",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r189071376,189071376,src/rpc/blockchain.cpp
kallewoof,2018-05-18T05:19:24Z,"Sorry, I think I got things mixed up.",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r189165361,189165361,src/rpc/blockchain.cpp
ajtowns,2018-05-18T05:42:51Z,"The fee rate for a tx with weight 3 and fee 100 is the same as if there were 100 such tx's. That would have weight 300 or vsize 75, and fee 10,000, for a fee rate of 10,000/75 or 133.3, not 1, 100, or 66. :) Formula looks fine to me, though I guess estimatefee uses fee/vkbyte rather than fee/byte, which would be `(txfee * WITNESS_SCALE_FACTOR * 1000) / weight`.",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r189167702,189167702,src/rpc/blockchain.cpp
ajtowns,2018-05-18T06:55:11Z,"But, negative values don't count back from the current tip, they give an error?",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r189177604,189177604,src/rpc/blockchain.cpp
ajtowns,2018-05-18T06:55:32Z,Multiline if statement should have braces.,https://github.com/bitcoin/bitcoin/pull/10757#discussion_r189177668,189177668,src/rpc/blockchain.cpp
ajtowns,2018-05-18T06:58:13Z,"""(all values are in reverse order height-wise)"" is outdated now that this only does one block's stats, I think? If it's not, it doesn't make sense to me...",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r189178116,189178116,src/rpc/blockchain.cpp
jtimon,2018-05-22T20:37:40Z,"Well, we can move from sat/vbyte to sat/vkbyte, sure. I t should be a simple change if people prefer that.",https://github.com/bitcoin/bitcoin/pull/10757#discussion_r190044662,190044662,src/rpc/blockchain.cpp
