MarcoFalke,2020-05-19 22:59:23,This was presumably introduced in aab81720de237b258ed4e15f1b1831c11abf74f0,https://github.com/bitcoin/bitcoin/pull/19022#issuecomment-631131210,631131210,
MarcoFalke,2020-05-29 15:03:42,"> keep a static variable in generate() to ensure a new keypath is used for each call.\n\nYou mean a member variable? (Different nodes shouldn't influence each other)",https://github.com/bitcoin/bitcoin/pull/19022#issuecomment-636023437,636023437,
jnewbery,2020-05-29 15:12:58,"> You mean a member variable? (Different nodes shouldn't influence each other)\n\nYou're right. Should be a member variable.",https://github.com/bitcoin/bitcoin/pull/19022#issuecomment-636028177,636028177,
glowang,2020-05-30 15:37:14,"> utACK [fa2ca0c](https://github.com/bitcoin/bitcoin/commit/fa2ca0cbdde5c6c5e407ec037e52e3f6315a0b37)\n> \n> Perhaps a longer-term solution would be to change the `generate()` method in `TestNode`:\n> \n> * set an hd seed on the node instead of a private key in `import_deterministic_coinbase_privkeys()`\n> * use `generatetodescriptor` to generate to a key in the hd tree\n> * keep a static va",https://github.com/bitcoin/bitcoin/pull/19022#issuecomment-636347710,636347710,
MarcoFalke,2020-05-30 15:48:34,"Nice! I see that this method is lacking a comment to explain its motivation. The background the tests need deterministic keys is:\n\n* When the wallet is not compiled into Bitcoin Core, the tests should still be able to generate blocks. Blocks need to be generated to an address (or descriptor), so we need some information to derive those\n* When the wallet is compiled into Bitcoin Core (and moc",https://github.com/bitcoin/bitcoin/pull/19022#issuecomment-636349162,636349162,
glowang,2020-06-01 15:08:40,"Thank you so much @MarcoFalke and @jnewbery !\n\n1.You mentioned that `Blocks need to be generated to an address (or descriptor), so we need some information to derive those`. I understand that you want to generate blocks to an address/descriptor, but what woud happen if the keys are not deterministic anyways? What benefits do we get from having information to derive them? Sorry if this is super",https://github.com/bitcoin/bitcoin/pull/19022#issuecomment-636912947,636912947,
MarcoFalke,2020-06-01 15:26:58,"> Why does using a new address solve this problem?\n\nIf you call\n* generate\n* invalidateblock(best_block)\n* generate\n\nAnd all of this happens in the same second, then the two generated blocks will be completely identical in all fields of their struct. Thus, the second call to `generate` will fail because the generated block is already marked invalid.",https://github.com/bitcoin/bitcoin/pull/19022#issuecomment-636922831,636922831,
MarcoFalke,2020-06-01 16:11:56,"> Looks like this behavior has been enforced in test_framework.py, os.rmdir(cache_path('wallets')). Is this what you mean? Is this the exact behavior we want to maintain?\n\nYes, I'd say so. It allows to simply cache the blockchain once instead of MAX_NODES datadirs (including the wallet dirs)\n\nAnd about your other questions: In general, the more deterministic a test is, the easier it is to ",https://github.com/bitcoin/bitcoin/pull/19022#issuecomment-636955543,636955543,
glowang,2020-06-05 15:54:01,"thank you for your answers!! I have some follow up questions ðŸ˜‚ \n\nIn your answer, there seems to be an emphasis of using `mock time` when the wallet is enabled, but not so important if we are only generating to address...is there a reason for that?  It seems that we set `mocktime` when we expect there is some time consuming processes (such as tx rebroadcast) & that we use `mocktime` to time tra",https://github.com/bitcoin/bitcoin/pull/19022#issuecomment-639590922,639590922,
MarcoFalke,2020-06-05 16:32:06,"Don't worry too much about mocktime. This is just another dimension to achieve more determinism. It should be orthogonal to your changes. `rpc_getblockstats.json` was just an example. It shouldn't affect your changes.\n\nSometimes mocktime is used to ""speed up"" tests by telling them how much time has passed. In other cases, it is used to deterministically generate blocks. (The time ends up in th",https://github.com/bitcoin/bitcoin/pull/19022#issuecomment-639614373,639614373,
glowang,2020-06-16 15:38:00,"I feel like maybe I am spinning my wheel for a bit...\n\nIf you got sometime to take a look and let me know if I am heading in the right direction, I would really appreciate it! https://github.com/bitcoin/bitcoin/pull/19297\n\n",https://github.com/bitcoin/bitcoin/pull/19022#issuecomment-644843482,644843482,
jnewbery,2020-05-29 14:51:55,How about doing the generate call on its own line? newlines are free!,https://github.com/bitcoin/bitcoin/pull/19022#discussion_r432540289,432540289,test/functional/feature_dbcrash.py
MarcoFalke,2020-05-29 15:01:41,That would require poisoning the namespace with a symbol name. Named arguments and functional programming ftw. Bracket are free! :rocket: ,https://github.com/bitcoin/bitcoin/pull/19022#discussion_r432546695,432546695,test/functional/feature_dbcrash.py
jnewbery,2020-05-29 15:08:52,Really? You think 4-nested brackets are easier to read or are you just trolling?,https://github.com/bitcoin/bitcoin/pull/19022#discussion_r432551002,432551002,test/functional/feature_dbcrash.py
MarcoFalke,2020-05-29 15:15:14,"Not trolling. 4 brackets is how I write code. :grimacing: \n\nhttps://github.com/bitcoin/bitcoin/blame/fa2ca0cbdde5c6c5e407ec037e52e3f6315a0b37/test/functional/mempool_accept.py#L162-L168",https://github.com/bitcoin/bitcoin/pull/19022#discussion_r432555055,432555055,test/functional/feature_dbcrash.py
glowang,2020-06-01 00:57:11,"@MarcoFalke  lol I see a couple of places with style like this, no wonder ðŸ˜†  ",https://github.com/bitcoin/bitcoin/pull/19022#discussion_r433004019,433004019,test/functional/feature_dbcrash.py
jnewbery,2020-06-01 01:54:09,@glowang I'd definitely support any PRs to make them more readable :),https://github.com/bitcoin/bitcoin/pull/19022#discussion_r433012223,433012223,test/functional/feature_dbcrash.py
MarcoFalke,2020-06-01 12:17:42,"Huh, is this generally considered to be less readable? If yes, I might change my style, but comparing the two:\n\n```py\nin_1 = 'foo'\nin_2 = 'bar'\nres = run(in_1, in_2)\n```\n\nvs\n\n```py\nres = run(\n  in_1='foo',\n  in_2='bar',\n)\n```\n\nThe latter one has a lower mental load because there is two less symbols in the surrounding scope. I can't find references, but I am pretty",https://github.com/bitcoin/bitcoin/pull/19022#discussion_r433200385,433200385,test/functional/feature_dbcrash.py
jnewbery,2020-06-01 14:09:47,This isn't an honest comparison. Nesting functions 4 deep inside is very different from the example you've given. It's also completely unrelated to whether functions are called with named or positional arguments.,https://github.com/bitcoin/bitcoin/pull/19022#discussion_r433256940,433256940,test/functional/feature_dbcrash.py
glowang,2020-06-01 15:12:49,"The indentation @MarcoFalke  uses does help a lot, and I can see your point on reducing mental load now. ",https://github.com/bitcoin/bitcoin/pull/19022#discussion_r433294227,433294227,test/functional/feature_dbcrash.py
amitiuttarwar,2020-06-04 03:41:50,"I agree in the `in_1`, `in_2` example the second looks more clear, but I think thats mainly because we're using mocked out variable names. \n\nif it was something like\n```\nblockhash = getbestblockhash()\ncoinbase_txid = getblock(blockhash)['tx'][0]\nres = calculate_fee_amount(coinbase_txid, blockhash) \n```\nthat seems pretty clear to me. The variable naming is relevant for capturing int",https://github.com/bitcoin/bitcoin/pull/19022#discussion_r434974857,434974857,test/functional/feature_dbcrash.py
