luke-jr,2020-08-15 06:23:29,This seems strangely implementation-specific to me. I think we should at least keep a simple connection direction somewhere?,https://github.com/bitcoin/bitcoin/pull/19725#issuecomment-674356692,674356692,
jonatack,2020-08-15 08:24:52,Concept ACK on adding the connection type to `getpeerinfo` and the logging.,https://github.com/bitcoin/bitcoin/pull/19725#issuecomment-674367950,674367950,
amitiuttarwar,2020-08-17 19:51:37,"thanks for the reviews! I've removed the ""deprecate getpeerinfo inbound"" commit & addressed all other review comments. ",https://github.com/bitcoin/bitcoin/pull/19725#issuecomment-675078635,675078635,
amitiuttarwar,2020-08-19 18:56:57,thanks for the review @laanwj. addressed all review comments ,https://github.com/bitcoin/bitcoin/pull/19725#issuecomment-676602064,676602064,
DrahtBot,2020-08-20 20:22:55,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20002 (net, rpc, cli: expose GetNetClass()/ConnectedViaTor() in getpeerinfo, use in -netinfo by jonatack)\n* #19883 (net,",https://github.com/bitcoin/bitcoin/pull/19725#issuecomment-677884187,677884187,
laanwj,2020-08-24 13:17:18,"ACK f7f3ef4f099d1f44b25c255baa0d25de448f3bdf (code review, light manual testing on a busy node)",https://github.com/bitcoin/bitcoin/pull/19725#issuecomment-679120318,679120318,
jonatack,2020-08-24 13:34:23,"It may be prudent to not aggressively deprecate the addnode field in the same release as the conn_type field addition, as this provides no transition period; users will need to change code or config to avoid breakage.\n\n> Doing so also makes two of the existing fields (inbound & addnode booleans) redundant, so this PR begins deprecating those fields as well.\n\nInbound isn't being deprecated IIUC",https://github.com/bitcoin/bitcoin/pull/19725#issuecomment-679129374,679129374,
amitiuttarwar,2020-08-24 18:36:20,"@jonatack \n\n> Inbound isn't being deprecated IIUC. Mind updating the PR description?\n\ndone, thanks!\n\n> It may be prudent to not aggressively deprecate the addnode field in the same release as the conn_type field addition, as this provides no transition period; users will need to change code or config to avoid breakage.\n\nI don't quite follow your logic. In this patch, users can supp",https://github.com/bitcoin/bitcoin/pull/19725#issuecomment-679295920,679295920,
MarcoFalke,2020-08-24 19:29:12,"> What is the difference between doing it in this version versus a future version?\n\nThere is a slight difference in how urgent a user will need to update scripts. If there is one more version in-between the user can even upgrade without any `-deprecatedrpc` hassle.\n\n* release n: New feature added (user can upgrade Bitcoin core without using the new feature, see if there are any issues, if ",https://github.com/bitcoin/bitcoin/pull/19725#issuecomment-679321400,679321400,
amitiuttarwar,2020-08-24 20:17:08,"okay fair, I hear the point about having a longer window of time during which to upgrade. that said, the minimum effort required to upgrade would still be the same. \n\nhaving a longer transition time makes sense for more complex features, but this is an extremely simple case and there's not much that would benefit from being manually tested. we can hardly even call it a new feature: \n**existi",https://github.com/bitcoin/bitcoin/pull/19725#issuecomment-679343513,679343513,
jonatack,2020-08-25 12:45:53,"I think it's generally been considered that for users there is a difference. Historically, Bitcoin Core has been very non-aggressive about deprecations and time periods, and users are used to that, as far I've been able to understand and from what I've seen from deprecating a few fields and the pushback from proposing to deprecate a few others: a few releases, at minimum. Examples: RPC `getunconfi",https://github.com/bitcoin/bitcoin/pull/19725#issuecomment-680002655,680002655,
jnewbery,2020-08-25 13:10:19,This is a very minor change to the RPC interface. I don't think we need any special treatment for deprecating `addnode`. Lets just go through the normal deprecation process in this version and remove in the next.,https://github.com/bitcoin/bitcoin/pull/19725#issuecomment-680015154,680015154,
amitiuttarwar,2020-09-04 06:07:53,"Thank you for these reviews! 🙌🏽\n\nI had to rebase and I took the opportunity to change the variable name from `CNodeStats.m_connection_type` -> `CNodeStats.m_conn_type_string`\n\nCurrent status of this PR: \n* one open question [here](https://github.com/bitcoin/bitcoin/pull/19725#discussion_r483405371), all other comments addressed \n* Approach ACK from MarcoFalke, partial Concept ACK from ",https://github.com/bitcoin/bitcoin/pull/19725#issuecomment-686932440,686932440,
amitiuttarwar,2020-09-04 07:46:42,"oops, looks like I have some test failures. will investigate / fix tomorrow. ",https://github.com/bitcoin/bitcoin/pull/19725#issuecomment-686978684,686978684,
amitiuttarwar,2020-09-04 22:26:58,tests fixed! ready for review. ,https://github.com/bitcoin/bitcoin/pull/19725#issuecomment-687431925,687431925,
amitiuttarwar,2020-09-08 04:10:48,"thanks for the reviews @jonatack & @jnewbery ! \n\nI've pushed another round that addresses the outstanding comments.",https://github.com/bitcoin/bitcoin/pull/19725#issuecomment-688607092,688607092,
jnewbery,2020-09-08 11:26:53,"utACK 2499b120cca63a5c13ea6e782d8ff53caae5d3dd\n\n@jonatack - how do you feel about having a string _and_ a type number for connection type returned by `getpeerinfo()`. I personally wouldn't use it but I could see how it'd be useful for a client application. No reason not to return both I think.",https://github.com/bitcoin/bitcoin/pull/19725#issuecomment-688805911,688805911,
jonatack,2020-09-08 12:01:46,"> jonatack - how do you feel about having a string _and_ a type number for connection type returned by `getpeerinfo()`. I personally wouldn't use it but I could see how it'd be useful for a client application. No reason not to return both I think.\n\nIndeed, the first version of #19883 proposed both an integer id and the long-format string id, before removing the string after the first round of re",https://github.com/bitcoin/bitcoin/pull/19725#issuecomment-688821035,688821035,
amitiuttarwar,2020-09-09 22:55:42,"okay @jonatack, I think you have made your stance sufficiently clear :) \n\nfor other reviewers- \nI believe these proposed changes make sense. The logging & RPC exposure were proposed by @sdaftuar during review of 19316 & I agree with them. As a node operator, I would like to be able to easily see information about the connection types to peers, through the RPC interface and logs. As a code co",https://github.com/bitcoin/bitcoin/pull/19725#issuecomment-689865640,689865640,
guggero,2020-09-17 13:39:23,"tACK 2499b120.\n\nI personally also prefer this PR over https://github.com/bitcoin/bitcoin/pull/19883.\n\nNumeric types still requires your code to do a lookup of some sort to present a human-readable value. If the meaning of a numeric value changes, you cannot catch this easily. Assuming that a string based enum value would be renamed if its meaning changed, a user of the API would notice tha",https://github.com/bitcoin/bitcoin/pull/19725#issuecomment-694241735,694241735,
jonatack,2020-09-17 14:04:15,"When considering replacing integer ids with long-format string ids for API clients, remember that the long-format naming is:\n\n- (a) in flux (e.g., some people write ""block-relay"", others ""block-relay-only"", some now write ""b-r-o"", etc.)\n-  (b) will change as new and additional types are conceived\n- (c) the GUI, CLI -netinfo, and client software will all have to translate the naming anyway ",https://github.com/bitcoin/bitcoin/pull/19725#issuecomment-694258530,694258530,
jonatack,2020-09-17 14:11:37,"> your code to do a lookup of some sort to present a human-readable value\n\nYes, that is what client-side software does: presentation. I suggest that there's no need to burden the net code with client-side presentation concerns that can go in /rpc or be left to the API clients that consume the API.",https://github.com/bitcoin/bitcoin/pull/19725#issuecomment-694263448,694263448,
guggero,2020-09-17 15:04:08,"I don't disagree with your arguments. Naming is hard and choosing the same representation for the same thing everywhere is not always easy.\n\nThough as someone that's almost exclusively using the command line, I like getting a (rough) idea what a value means without needing a lookup table. But likely I'm not the target user group this API was designed for so maybe my opinion is a bit skewed and",https://github.com/bitcoin/bitcoin/pull/19725#issuecomment-694298212,694298212,
jonatack,2020-09-17 15:16:37,"Same, almost exclusively use the command line too. I hope we can have the uint8_t ids but if people want this then ACK from me.",https://github.com/bitcoin/bitcoin/pull/19725#issuecomment-694305720,694305720,
practicalswift,2020-09-17 16:02:34,"Concept ACK on returning a meaningful but terse string representation (`inbound, manual, feeler, etc.`) instead of leaking implementation details (`0, 1, 2, etc.`). (What happens when the enum values are re-arranged?)\n\nEmpirical study: I've used the `-netinfo` feature a lot recently but the magic numbers are driving me crazy. I've lost count on how many times I've asked myself: ""was it `bitcoi",https://github.com/bitcoin/bitcoin/pull/19725#issuecomment-694333203,694333203,
jonatack,2020-09-17 16:29:33,@practicalswift: https://github.com/bitcoin/bitcoin/pull/19883#issuecomment-688746631,https://github.com/bitcoin/bitcoin/pull/19725#issuecomment-694350665,694350665,
michaelfolkson,2020-09-17 16:58:49,"I'd personally feel more comfortable if more people weighed in on Jon's comment in the alternative [PR](https://github.com/bitcoin/bitcoin/pull/19883#issuecomment-688744746).\n\n> By any objective technical criteria, ersatz long-format string ids in the place of integer ones seem a substantially worse choice\n> \n> code\n> complexity\n> robustness\n> API stability\n> API flexibility for cl",https://github.com/bitcoin/bitcoin/pull/19725#issuecomment-694366505,694366505,
practicalswift,2020-09-18 05:31:11,"> > Concept ACK on returning a meaningful but terse string representation (`inbound, manual, feeler, etc.`) instead of leaking implementation details (`0, 1, 2, etc.`). (What happens when the enum values are re-arranged?)\n>\n> @practicalswift: [#19883 (comment)](https://github.com/bitcoin/bitcoin/pull/19883#issuecomment-688746631)\n\nThanks for clarifying regarding re-arrangement.\n\nDo you",https://github.com/bitcoin/bitcoin/pull/19725#issuecomment-694661232,694661232,
MarcoFalke,2020-09-19 07:55:46,"Concept ACK. Seems fine to return the type as a human readable string that can also be logged. If the strings ever need to change and a client needs a stable interface, e.g. to collect statistics on connection types, then a separate PR could add integral ids at that time (or earlier, when needed).",https://github.com/bitcoin/bitcoin/pull/19725#issuecomment-695180374,695180374,
amitiuttarwar,2020-09-22 03:25:11,"many many thanks for the code reviews @jnewbery & @guggero! I'm very sorry but could I ask for a 3rd round? I had to rebase because of a very trivial conflict in the release notes 😬   but hopefully that means its easy to re-review. \n\nand thank you for your recent Concept ACKs @MarcoFalke & @practicalswift! \n\nif these changes are supported, I'd love to get them in relatively soon. the propo",https://github.com/bitcoin/bitcoin/pull/19725#issuecomment-696489006,696489006,
michaelfolkson,2020-09-23 12:05:41,"Approach NACK. I prefer the approach in https://github.com/bitcoin/bitcoin/pull/19883#issuecomment-695776376. I certainly don't think we should rush through merges either whilst there is still discussion on an alternative approach happening (especially when the author of the alternative approach has ideas on where he'd like to take it downstream).\n\nI think the logging refactoring and deprecati",https://github.com/bitcoin/bitcoin/pull/19725#issuecomment-697319722,697319722,
jnewbery,2020-09-23 12:29:39,"Code review ACK a512925e19a70d7f6b80ac530a169f45ffaafa1c.\n\n> I certainly don't think we should rush through merges \n\nFor goodness' sake. This PR has been open for over a month and has ACKs from:\n\n- @promag (Concept ACK https://github.com/bitcoin/bitcoin/pull/19725#pullrequestreview-470984600)\n- @laanwj (Code review ACK https://github.com/bitcoin/bitcoin/pull/19725#issuecomment-679120",https://github.com/bitcoin/bitcoin/pull/19725#issuecomment-697331702,697331702,
michaelfolkson,2020-09-23 12:41:55,"This is a conflict though right? What do you recommend? ACK this PR and then open a new PR changing the connection type to an int? There is a difference between throwing toys out of the pram because you don't get everything you want versus wanting to ensure a decision now doesn't disrupt future work.\n\nAs far as I understand Concept ACKs don't cover this discussion whatsoever so including them ",https://github.com/bitcoin/bitcoin/pull/19725#issuecomment-697338387,697338387,
sdaftuar,2020-09-23 14:14:01,"Concept ACK putting in human readable connection types in this RPC.  I personally use `getpeerinfo()` quite a bit while debugging, and not having to (eg) infer whether a peer is a block-relay-only outbound by using the inbound and relaytxes variables, and being able to grep for a human readable string, would save me time.\n\nNot a major concern, but I do think it's worth thinking a bit about how",https://github.com/bitcoin/bitcoin/pull/19725#issuecomment-697421878,697421878,
amitiuttarwar,2020-09-25 21:26:05,"thank you for the reviews @jnewbery, @promag, @sdaftuar !\n\n@sdaftuar \n> So if users are expecting the RPC output to be a stable API, I'm not sure we're there yet. Perhaps that would be something for us to mention in the release notes the first time this appears?\n\ngood idea. In the interest of preserving ACKs I've added https://github.com/amitiuttarwar/bitcoin/commit/099e38724adb2c002f0b9",https://github.com/bitcoin/bitcoin/pull/19725#issuecomment-699163045,699163045,
sipa,2020-09-26 01:36:35,"I don't think this is a good argument for numbers:\n\n> When considering replacing integer ids with long-format string ids for API clients, remember that the long-format naming is:\n>\n>    (a) in flux (e.g., some people write ""block-relay"", others ""block-relay-only"", some now write ""b-r-o"", etc.)\n\nI don't think this is true. It is the actual semantics of different connection types that ch",https://github.com/bitcoin/bitcoin/pull/19725#issuecomment-699265953,699265953,
sipa,2020-09-26 01:41:43,utACK a512925e19a70d7f6b80ac530a169f45ffaafa1c,https://github.com/bitcoin/bitcoin/pull/19725#issuecomment-699267195,699267195,
guggero,2020-09-26 08:29:04,Tested and code review ACK a512925e.,https://github.com/bitcoin/bitcoin/pull/19725#issuecomment-699458956,699458956,
MarcoFalke,2020-09-26 15:24:12,"cr ACK a512925e19a70d7f6b80ac530a169f45ffaafa1c 🌇\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\ncr ACK a512925e19a70d7f6b80ac530a169f45ffaafa1c 🌇\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjoEQv/dMdhuBqd2oAqHggaa2Yb972bRNVWlue2JmORCDOpmItl",https://github.com/bitcoin/bitcoin/pull/19725#issuecomment-699509522,699509522,
MarcoFalke,2020-08-15 06:18:31,"nit: instead of adding extended documentation to the release notes, the documentation can be added to the rpc itself. Affected/interested users can call `help rpc_method` or `--help` if needed.",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r470944290,470944290,doc/release-notes.md
MarcoFalke,2020-08-15 06:20:49,For new code it would make sense to properly clang-format it. See e.g. https://github.com/bitcoin/bitcoin/tree/master/contrib/devtools#clang-format-diffpy ,https://github.com/bitcoin/bitcoin/pull/19725#discussion_r470944452,470944452,src/net.h
MarcoFalke,2020-08-15 06:24:07,"nit: Would it make sense to replace the spaces with `-` to preserve the previous format of the log message? Also, if this was used in an arbitrary sentence, it might not be clear that this is a single word/""operator""",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r470944663,470944663,src/net.h
MarcoFalke,2020-08-15 06:27:41,"```suggestion\n                            {RPCResult::Type::STR, ""connection_type"", ""Type of connection:\n "" + Join(foobar, "",\n"") + "".""},\n```\n\nWhat about moving the connection type documentation into a global like `NET_PERMISSIONS_DOC`?",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r470944955,470944955,src/rpc/net.cpp
MarcoFalke,2020-08-15 06:30:38,"```suggestion\n  field.\n```\n\nProbably can remove the extended documentation",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r470945177,470945177,doc/release-notes.md
jonatack,2020-08-15 07:28:55,"I think it's premature to be deprecating these fields. It would be preferable to let the new code mature for a release or so and to implement how it might be presented in the GUI, before considering removing access to these via the RPC.",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r470949512,470949512,doc/release-notes.md
MarcoFalke,2020-08-15 07:42:58,"Agree that we don't need to be overly aggressive with deprecation. If deprecation/removal is too controversial for now, it can be split up into another follow-up pull for later. I think adding the field should be uncontroversial and conceptually easier to get in.",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r470950595,470950595,doc/release-notes.md
sipa,2020-08-15 07:47:16,"I don't think there is a reason to remove ""inbound"", ever. It's very useful to filter RPC output by on its own.",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r470950954,470950954,doc/release-notes.md
amitiuttarwar,2020-08-17 19:38:21,"okay, removed the specifics. better?",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r471732507,471732507,doc/release-notes.md
amitiuttarwar,2020-08-17 19:39:46,"thanks, think I've updated all the commits with proper clang formatting. moving forward, will try to incorporate this into my workflow. ",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r471733172,471733172,src/net.h
amitiuttarwar,2020-08-17 19:39:52,done ,https://github.com/bitcoin/bitcoin/pull/19725#discussion_r471733212,471733212,src/net.h
amitiuttarwar,2020-08-17 19:40:57,done,https://github.com/bitcoin/bitcoin/pull/19725#discussion_r471733765,471733765,src/rpc/net.cpp
amitiuttarwar,2020-08-17 19:41:17,done,https://github.com/bitcoin/bitcoin/pull/19725#discussion_r471733938,471733938,doc/release-notes.md
amitiuttarwar,2020-08-17 19:49:52,"sounds good! I removed the ""deprecate inbound"" commit. I currently have left in the ""deprecate getpeerinfo addnode"" commit, but can also remove that one if reviewers would like. I do find the current way of calling it `addnode` (as is in master) misleading because it also returns `-connect` peers. But if having this information separately is desirable, I'm happy to remove that commit as well. I ju",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r471738105,471738105,doc/release-notes.md
laanwj,2020-08-19 13:13:43,"I'm not sure it's better to have `ConnectionTypeToString` as a method on CNode instead of a free function that simply takes a `ConnectionType`.\n\nBut if so, `ConnectionTypeAsString` might be a better name.\n\nEdit: Also, I'd prefer to move this function to the implementation file instead of the` .h`. Compact header files are better for readability, and there's imo no performance reason to hav",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r473018587,473018587,src/net.h
laanwj,2020-08-19 13:15:39,"Please add `// no default case, so the compiler can warn about missing cases` comment (https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#c-data-structures)",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r473020084,473020084,src/net.h
amitiuttarwar,2020-08-19 18:36:07,ah thanks. done in this PR. I've also introduced other switches without default in #19316 & #19724. I will also add this comment to the others in #19724.,https://github.com/bitcoin/bitcoin/pull/19725#discussion_r473241366,473241366,src/net.h
amitiuttarwar,2020-08-19 18:55:17,"hm, I got a lot of review on #19316 expressing concerns around publicly exposing `m_conn_type`, which led to the current design of wrapper classes. since I need the return value in `net_processing`, I've opted to keep the function on `CNode` & updated the name to better reflect behavior, as per your suggestion. happy to reconsider if you still feel it would be better as a free function. \n\nalso",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r473251357,473251357,src/net.h
promag,2020-08-19 21:40:23,"I'd put this first.\n\nSide note, here and above, could add PR number? It's a quick way to get context from the release notes.",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r473349526,473349526,doc/release-notes.md
promag,2020-08-19 21:49:42,Could say that connection_type=manual when addnode=true.,https://github.com/bitcoin/bitcoin/pull/19725#discussion_r473357337,473357337,doc/release-notes.md
promag,2020-08-19 21:54:23,Why string? What's the problem of `ConnectionType m_connection_type` and a `std::string ConnectionTypeToString(ConnectionType)` function? Couldn't find past discussion after a quick look.,https://github.com/bitcoin/bitcoin/pull/19725#discussion_r473361238,473361238,src/net.h
amitiuttarwar,2020-08-19 22:42:50,"do I understand your suggestion correctly: update `CNodeStats.m_connection_type` to the raw `ConnectionType`, then in `getpeerinfo` implementation, pass through a function `ConnectionTypeToString(m_connection_type)`? \n\nit's possible, what's the advantage? \n\nthe main downside I'm seeing is I'm trying to keep `m_connection_type` private, and need to access it from `net_processing` for the lo",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r473398457,473398457,src/net.h
amitiuttarwar,2020-08-19 22:45:30,"ah thanks, forgot to update after actually opening the PR ",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r473400568,473400568,doc/release-notes.md
amitiuttarwar,2020-08-19 22:51:45,done,https://github.com/bitcoin/bitcoin/pull/19725#discussion_r473405298,473405298,doc/release-notes.md
amitiuttarwar,2020-08-19 22:51:54,done ,https://github.com/bitcoin/bitcoin/pull/19725#discussion_r473405410,473405410,doc/release-notes.md
jnewbery,2020-08-20 09:50:39,"Is it possible to add an assert that the size of this vector is the same as the size of ConnectionType, so it's not possible to update one without the other?",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r473830352,473830352,src/net.h
amitiuttarwar,2020-08-21 02:00:15,"I like the idea, but it looks like there's no straightforward way to get the length of the enum? :( ",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r474365890,474365890,src/net.h
sipa,2020-08-21 03:13:22,"I believe you can't in general.\n\nBut you can add a ""MAX"" element to the enum, which is the length.\n\nIf you make the list an std::array instead of std::vector, you can make it a static_assert with that even.",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r474384712,474384712,src/net.h
amitiuttarwar,2020-08-21 03:43:47,added c99b26010eaf4d446eb5118e38dbcc03fabba11c in #19724 ,https://github.com/bitcoin/bitcoin/pull/19725#discussion_r474391634,474391634,src/net.h
jnewbery,2020-08-21 10:33:02,"@sipa what would you static assert on? When you declare the std_array type, you need to specify the length of the array, and the array is always going to be that size. eg this compiles:\n\n```\nenum class en {\n    thing1,\n    thing2,\n    thing3,  // added a new thing\n    MAX,\n};\n\nint main()\n{\n    std::array<std::string, (int)en::MAX> a {""thing1 description"", ""thing2 descriptio",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r474615942,474615942,src/net.h
amitiuttarwar,2020-08-22 03:12:24,or maybe hardcode the length of the array? ,https://github.com/bitcoin/bitcoin/pull/19725#discussion_r475038829,475038829,src/net.h
sipa,2020-08-22 03:45:05,"@jnewbery Right, of course! I wasn't considering that you could use MAX directly as array size. That's obviously better.",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r475041442,475041442,src/net.h
jonatack,2020-08-24 13:49:35,"> makes two of the existing fields (inbound & addnode booleans) redundant\n\n> sounds good! I removed the ""deprecate inbound"" commit. I currently have left in the ""deprecate getpeerinfo addnode"" commit, but can also remove that one if reviewers would like. I do find the current way of calling it `addnode` (as is in master) misleading because it also returns `-connect` peers. But if having this i",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r475620465,475620465,doc/release-notes.md
amitiuttarwar,2020-08-24 18:19:15,"it's not different behavior. its the same. \n\n`getpeerinfo` field `addnode` returns a bool that indicates if the connection was manually added, either via `addnode` RPC or `-connect` command line argument. \n\nwith this PR, `getpeerinfo` field `connection_type` will return `manual` for these connections.\n\nI'm saying that # 2 is more clear and accurate. I think your confusion around possib",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r475807892,475807892,doc/release-notes.md
amitiuttarwar,2020-08-24 18:27:56,"I'm unclear on what's being recommended here. \n\nShould I update to make `CONNECTION_TYPE_DOC` an array, allocate size based on `MAX` from enum, then hardcode the `MAX` value into the static assert to compare it to the size of array? ",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r475812568,475812568,src/net.h
amitiuttarwar,2020-08-24 18:38:54,"resolving this convo for now, feel free to reopen/comment if you'd like me consider an alternative approach :) ",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r475818284,475818284,src/net.h
MarcoFalke,2020-08-24 19:43:28,"Just in theory it would be possible to get the number of enum values via the preprocessor:\n\n\n```cpp\ncat src/util/enum_class.h \n// Copyright (c) 2020 The Bitcoin Core developers\n// Distributed under the MIT software license, see the accompanying\n// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n\n#ifndef BITCOIN_UTIL_ENUM_CLASS_H\n#define BITCOIN_UTIL_ENUM_CLA",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r475851670,475851670,src/net.h
jonatack,2020-08-25 12:24:45,"Ok, I checked the code and indeed, (a) I misread you and (b) getpeerinfo `addnode` and `conn_type manual` are the same.",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r476407242,476407242,doc/release-notes.md
jnewbery,2020-08-25 12:35:25,"bah. Adding a `MAX` value breaks all the (important) ""value not handled in switch statement"" warnings. I don't think this is worth it. Sorry for the noise!",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r476413260,476413260,src/net.h
kallewoof,2020-08-26 03:37:55,"While these are release notes, I still think it's worth it to at least list those 6 options to give a hint at what they are, even if describing each may be too verbose.",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r477013615,477013615,doc/release-notes.md
kallewoof,2020-08-26 03:39:51,"μNit, feel free to ignore: the `As` feels redundant. (I.e. `ConnectionTypeString()`)",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r477014065,477014065,src/net.cpp
kallewoof,2020-08-26 03:45:44,"I think string is fine, but I think the two variables are now a bit confusing. `m_conn_type` in `CNode` is a `ConnectionType`, and `m_connection_type` in `CNodeStats` is a `string`.\n\nMy suggestion is to either\n\n1. Switch this to a `ConnectionType`, and maybe even use the same name; this unifies the two and no one has to ever wonder what the difference is between the `m_conn_type` and the `",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r477015640,477015640,src/net.h
jnewbery,2020-08-26 07:17:13,"In general, I think we try to avoid duplicating documentation in this way. Release notes don't need to include all the details, and pointing where to go for the source of truth is appropriate here.",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r477085003,477085003,doc/release-notes.md
kallewoof,2020-08-26 07:25:35,"Only reading the release notes you are left wanting, I suspect; explicitly saying there's six of them makes you start to wonder ""so many? I can think of maybe 3 at most... curious!"".\n\nHalf-joke aside, simply ""one of six options: a, b, c, d, e, or f"" would be useful, but no strong opinion on the matter.",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r477089378,477089378,doc/release-notes.md
laanwj,2020-08-27 12:21:50,"Agree with @jnewbery. Release notes should describe the change, briefly but clearly, they do not need to provide documentation on how to use something. I think this description is okay.",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r478376764,478376764,doc/release-notes.md
laanwj,2020-08-27 12:22:36,"Nah, I propsed the current naming (it was already changed once). Lets not bikeshed it too much.",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r478377173,478377173,src/net.cpp
laanwj,2020-08-27 12:26:43,"I would agree that storing a string here is a bit strange. This is a persistent structure in memory, and every string causes an extra heap allocation. Which means an extra heap allocation per connected node. While it stores only one from a limited number of choices, so as I understand, it could just as well be an enum?",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r478379665,478379665,src/net.h
jnewbery,2020-08-29 18:27:35,"I'm not sure this is a problem:\n\n- in bitcoind, CNodeStats is just instantiated when needed, rather than kept persistently (it looks like the objects are cached in bitcoin-qt though)\n- most compilers will use the short string optimization, and most of these strings are < 15 chars long, so won't result in a heap allocation\n- there are already 3 other `std::string` members in this struct",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r479676756,479676756,src/net.h
amitiuttarwar,2020-09-04 06:04:37,"- definitely agree that `m_conn_string` is a better variable name for the current state, have incorporated into the latest push \n- RE memory management- I'm not fully understanding how this is a persistent data structure. I tried to trace the call sites and I'm not seeing where its got anything other than automatic storage duration. But also don't understand the gui caching. any pointers??\n- r",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r483405371,483405371,src/net.h
amitiuttarwar,2020-09-04 06:05:46,"ok, seems like the dominant reviewer preference is to leave as is? so, resolving this conversation ",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r483405742,483405742,doc/release-notes.md
jonatack,2020-09-05 08:32:41,"ISTM this is a presentation concern, and could either be moved out to the RPC code or removed completely if it wasn't needed for the RPC help, as API clients will in any case need to re-implement this logic.",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r483927441,483927441,src/net.cpp
jonatack,2020-09-05 08:33:41,"- `addnode` is also a configuration option\n\n- s/command line argument/configuration option/\n",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r483927531,483927531,src/net.h
jonatack,2020-09-05 08:35:25,s/short lived/short-lived/ in this line and the preceding one,https://github.com/bitcoin/bitcoin/pull/19725#discussion_r483927679,483927679,src/net.h
jonatack,2020-09-05 08:42:49,Would suggest placing it on the line immediately after `addnode`.,https://github.com/bitcoin/bitcoin/pull/19725#discussion_r483928313,483928313,src/rpc/net.cpp
jnewbery,2020-09-07 09:54:55,s/inbound/addnode/,https://github.com/bitcoin/bitcoin/pull/19725#discussion_r484325473,484325473,test/functional/rpc_getpeerinfo_deprecation.py
amitiuttarwar,2020-09-08 03:52:02,"done, thanks!",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r484635471,484635471,src/net.h
amitiuttarwar,2020-09-08 03:52:08,done,https://github.com/bitcoin/bitcoin/pull/19725#discussion_r484635505,484635505,src/net.h
amitiuttarwar,2020-09-08 03:54:32,"did you see the commit that introduced this function? (now https://github.com/bitcoin/bitcoin/pull/19725/commits/53059f9476b00f83a9f8161c5d03d857ce0cb164). It uses the string for logging in `net_processing.cpp`, so it wouldn't make sense to move to the RPC code. ",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r484635956,484635956,src/net.cpp
amitiuttarwar,2020-09-08 04:05:22,"agreed on placing after `addnode`, updated in latest push. thanks!\n\nhaving an integer value seems like a reasonable proposal, I'll leave it for review via 19883. ",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r484638271,484638271,src/rpc/net.cpp
amitiuttarwar,2020-09-08 04:06:30,"oops. fixed, thanks! ",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r484638509,484638509,test/functional/rpc_getpeerinfo_deprecation.py
jonatack,2020-09-08 09:25:08,I think it's an unneeded abstraction.,https://github.com/bitcoin/bitcoin/pull/19725#discussion_r484778032,484778032,src/net.cpp
promag,2020-09-23 13:37:43,"@jnewbery this works, but also meh\n```cpp\nenum class E {\n  X,\n  Y\n  LAST = Y\n};\n\nint f(E e) {\n  switch (e) {\n  case E::X: return 1;\n  case E::Y: return 2;\n  }\n}\n```\n",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r493597946,493597946,src/net.h
jnewbery,2020-09-23 13:56:04,"> also meh\n\nI agree!",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r493613240,493613240,src/net.h
MarcoFalke,2020-09-26 15:33:54,"I think for ""heavy objects"" (non integral), we use `extern const` in the header and put them in the c++ file. This might reduce the size of the binary minimally.\n\nSo if you need to touch this code in the future again, you could apply the following diff (or similar):\n\n```diff\ndiff --git a/src/net.cpp b/src/net.cpp\nindex 5b533d7d17..166fc8233d 100644\n--- a/src/net.cpp\n+++ b/src/net.c",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r495467895,495467895,src/net.h
MarcoFalke,2020-09-26 15:46:33,"Just tested locally, and the size does decrease by about 10kB:\n\n```diff\n--- a/tmp/old/d_size\n+++ b/tmp/new/d_size\n@@ -1 +1 @@\n-10044320\n+10027432\n",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r495468960,495468960,src/net.h
amitiuttarwar,2020-10-05 20:53:52,"cool! I made a follow up to clarify expectations around stability in release notes, so I included this improvement too. didn't realize about this extern trick, thanks! https://github.com/bitcoin/bitcoin/pull/20090",https://github.com/bitcoin/bitcoin/pull/19725#discussion_r499866233,499866233,src/net.h
