[
  {
    "sha": "24e8a4e3946a774e8226d4cf2004a1dd2f9d0e77",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNGU4YTRlMzk0NmE3NzRlODIyNmQ0Y2YyMDA0YTFkZDJmOWQwZTc3",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-04-10T23:25:33Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-09-23T13:04:55Z"
      },
      "message": "util/settings: Add place to put rwconf settings",
      "tree": {
        "sha": "1b2b222592c4735c05d2dc0399ebb346973d2fec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1b2b222592c4735c05d2dc0399ebb346973d2fec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/24e8a4e3946a774e8226d4cf2004a1dd2f9d0e77",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24e8a4e3946a774e8226d4cf2004a1dd2f9d0e77",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/24e8a4e3946a774e8226d4cf2004a1dd2f9d0e77",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24e8a4e3946a774e8226d4cf2004a1dd2f9d0e77/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9e217f5a6f08c50aff9975aa4c079e2aab2fe371",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e217f5a6f08c50aff9975aa4c079e2aab2fe371",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9e217f5a6f08c50aff9975aa4c079e2aab2fe371"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 11,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f97b09e78e0dbbfe32316766ceb5a0782d697c01",
        "filename": "src/util/settings.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24e8a4e3946a774e8226d4cf2004a1dd2f9d0e77/src/util/settings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24e8a4e3946a774e8226d4cf2004a1dd2f9d0e77/src/util/settings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/settings.cpp?ref=24e8a4e3946a774e8226d4cf2004a1dd2f9d0e77",
        "patch": "@@ -13,6 +13,7 @@ namespace {\n enum class Source {\n    FORCED,\n    COMMAND_LINE,\n+   CONFIG_FILE_RW,\n    RW_SETTINGS,\n    CONFIG_FILE_NETWORK_SECTION,\n    CONFIG_FILE_DEFAULT_SECTION\n@@ -34,6 +35,10 @@ static void MergeSettings(const Settings& settings, const std::string& section,\n     if (auto* values = FindKey(settings.command_line_options, name)) {\n         fn(SettingsSpan(*values), Source::COMMAND_LINE);\n     }\n+    // Merge in the rw config file\n+    if (auto* values = FindKey(settings.rw_config, name)) {\n+        fn(SettingsSpan(*values), Source::CONFIG_FILE_RW);\n+    }\n     // Merge in the read-write settings\n     if (const SettingsValue* value = FindKey(settings.rw_settings, name)) {\n         fn(SettingsSpan(*value), Source::RW_SETTINGS);\n@@ -132,7 +137,7 @@ SettingsValue GetSetting(const Settings& settings,\n         // the config file the precedence is reversed for all settings except\n         // chain name settings.\n         const bool reverse_precedence =\n-            (source == Source::CONFIG_FILE_NETWORK_SECTION || source == Source::CONFIG_FILE_DEFAULT_SECTION) &&\n+            (source == Source::CONFIG_FILE_RW || source == Source::CONFIG_FILE_NETWORK_SECTION || source == Source::CONFIG_FILE_DEFAULT_SECTION) &&\n             !get_chain_name;\n \n         // Weird behavior preserved for backwards compatibility: Negated\n@@ -181,7 +186,7 @@ std::vector<SettingsValue> GetSettingsList(const Settings& settings,\n         // settings will be brought back from the dead (but earlier command\n         // line settings will still be ignored).\n         const bool add_zombie_config_values =\n-            (source == Source::CONFIG_FILE_NETWORK_SECTION || source == Source::CONFIG_FILE_DEFAULT_SECTION) &&\n+            (source == Source::CONFIG_FILE_RW || source == Source::CONFIG_FILE_NETWORK_SECTION || source == Source::CONFIG_FILE_DEFAULT_SECTION) &&\n             !prev_negated_empty;\n \n         // Ignore settings in default config section if requested."
      },
      {
        "sha": "fec690d1324e3d2a0ec959c1153d50cbce557c85",
        "filename": "src/util/settings.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24e8a4e3946a774e8226d4cf2004a1dd2f9d0e77/src/util/settings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24e8a4e3946a774e8226d4cf2004a1dd2f9d0e77/src/util/settings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/settings.h?ref=24e8a4e3946a774e8226d4cf2004a1dd2f9d0e77",
        "patch": "@@ -33,6 +33,8 @@ struct Settings {\n     std::map<std::string, SettingsValue> forced_settings;\n     //! Map of setting name to list of command line values.\n     std::map<std::string, std::vector<SettingsValue>> command_line_options;\n+    //! Map of setting name to list of r/w config file values.\n+    std::map<std::string, std::vector<SettingsValue>> rw_config;\n     //! Map of setting name to read-write file setting value.\n     std::map<std::string, SettingsValue> rw_settings;\n     //! Map of config section name and setting name to list of config file values."
      },
      {
        "sha": "3282f4c575313398fc965a0929d05924d50eef07",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24e8a4e3946a774e8226d4cf2004a1dd2f9d0e77/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24e8a4e3946a774e8226d4cf2004a1dd2f9d0e77/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=24e8a4e3946a774e8226d4cf2004a1dd2f9d0e77",
        "patch": "@@ -824,6 +824,7 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n     {\n         LOCK(cs_args);\n         m_settings.ro_config.clear();\n+        m_settings.rw_config.clear();\n         m_config_sections.clear();\n     }\n \n@@ -979,6 +980,7 @@ void ArgsManager::LogArgs() const\n     for (const auto& setting : m_settings.rw_settings) {\n         LogPrintf(\"Setting file arg: %s = %s\\n\", setting.first, setting.second.write());\n     }\n+    logArgsPrefix(\"R/W config file arg:\", \"\", m_settings.rw_config);\n     logArgsPrefix(\"Command-line arg:\", \"\", m_settings.command_line_options);\n }\n "
      }
    ]
  },
  {
    "sha": "e020477473f34fb654c21281105c0c57f8ecafef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMDIwNDc3NDczZjM0ZmI2NTRjMjEyODExMDVjMGM1N2Y4ZWNhZmVm",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2018-11-07T07:38:01Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-09-23T13:08:53Z"
      },
      "message": "util: SelectBaseParams in ReadConfigFiles, before getting final datadir",
      "tree": {
        "sha": "98dc5fc66652cbb8fb4a3e6447b358aa3afac364",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/98dc5fc66652cbb8fb4a3e6447b358aa3afac364"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e020477473f34fb654c21281105c0c57f8ecafef",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e020477473f34fb654c21281105c0c57f8ecafef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e020477473f34fb654c21281105c0c57f8ecafef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e020477473f34fb654c21281105c0c57f8ecafef/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "24e8a4e3946a774e8226d4cf2004a1dd2f9d0e77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24e8a4e3946a774e8226d4cf2004a1dd2f9d0e77",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/24e8a4e3946a774e8226d4cf2004a1dd2f9d0e77"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 8,
      "deletions": 7
    },
    "files": [
      {
        "sha": "39b877c6c853983b4c408710605242f8de972d7a",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e020477473f34fb654c21281105c0c57f8ecafef/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e020477473f34fb654c21281105c0c57f8ecafef/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=e020477473f34fb654c21281105c0c57f8ecafef",
        "patch": "@@ -139,13 +139,6 @@ static int AppInitRPC(int argc, char* argv[])\n         tfm::format(std::cerr, \"Error reading configuration file: %s\\n\", error);\n         return EXIT_FAILURE;\n     }\n-    // Check for chain settings (BaseParams() calls are only valid after this clause)\n-    try {\n-        SelectBaseParams(gArgs.GetChainName());\n-    } catch (const std::exception& e) {\n-        tfm::format(std::cerr, \"Error: %s\\n\", e.what());\n-        return EXIT_FAILURE;\n-    }\n     return CONTINUE_EXECUTION;\n }\n "
      },
      {
        "sha": "071f8d5d5c31a5fafb46b0a6d2143491ec55adff",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e020477473f34fb654c21281105c0c57f8ecafef/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e020477473f34fb654c21281105c0c57f8ecafef/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=e020477473f34fb654c21281105c0c57f8ecafef",
        "patch": "@@ -898,6 +898,14 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n         }\n     }\n \n+    // Check for chain settings (BaseParams() calls are only valid after this clause)\n+    try {\n+        SelectBaseParams(gArgs.GetChainName());\n+    } catch (const std::exception& e) {\n+        error = e.what();\n+        return false;\n+    }\n+\n     // If datadir is changed in .conf file:\n     ClearDatadirCache();\n     if (!CheckDataDirOption()) {"
      }
    ]
  },
  {
    "sha": "38e2657032c0597408bd1f94e3a66ad498fd1442",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOGUyNjU3MDMyYzA1OTc0MDhiZDFmOTRlM2E2NmFkNDk4ZmQxNDQy",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-04-11T00:51:23Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-09-23T13:08:55Z"
      },
      "message": "util/settings: Support ArgsManager::ReadConfigStream into other targets",
      "tree": {
        "sha": "076ec5138d131d64e20a88d575bef6f122d8f59a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/076ec5138d131d64e20a88d575bef6f122d8f59a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/38e2657032c0597408bd1f94e3a66ad498fd1442",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38e2657032c0597408bd1f94e3a66ad498fd1442",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/38e2657032c0597408bd1f94e3a66ad498fd1442",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38e2657032c0597408bd1f94e3a66ad498fd1442/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e020477473f34fb654c21281105c0c57f8ecafef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e020477473f34fb654c21281105c0c57f8ecafef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e020477473f34fb654c21281105c0c57f8ecafef"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 5,
      "deletions": 2
    },
    "files": [
      {
        "sha": "32cece17806135363f1542c132ee408bf14ba5cf",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38e2657032c0597408bd1f94e3a66ad498fd1442/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38e2657032c0597408bd1f94e3a66ad498fd1442/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=38e2657032c0597408bd1f94e3a66ad498fd1442",
        "patch": "@@ -790,7 +790,7 @@ static bool GetConfigOptions(std::istream& stream, const std::string& filepath,\n     return true;\n }\n \n-bool ArgsManager::ReadConfigStream(std::istream& stream, const std::string& filepath, std::string& error, bool ignore_invalid_keys)\n+bool ArgsManager::ReadConfigStream(std::istream& stream, const std::string& filepath, std::string& error, bool ignore_invalid_keys, std::map<std::string, std::vector<util::SettingsValue>>* settings_target)\n {\n     LOCK(cs_args);\n     std::vector<std::pair<std::string, std::string>> options;\n@@ -806,6 +806,9 @@ bool ArgsManager::ReadConfigStream(std::istream& stream, const std::string& file\n             if (!CheckValid(key, value, *flags, error)) {\n                 return false;\n             }\n+            if (settings_target) {\n+                (*settings_target)[key].push_back(value);\n+            } else\n             m_settings.ro_config[section][key].push_back(value);\n         } else {\n             if (ignore_invalid_keys) {"
      },
      {
        "sha": "af119840382643e5e47a663f2c5ab5f99f1fa9ec",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38e2657032c0597408bd1f94e3a66ad498fd1442/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38e2657032c0597408bd1f94e3a66ad498fd1442/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=38e2657032c0597408bd1f94e3a66ad498fd1442",
        "patch": "@@ -188,7 +188,7 @@ class ArgsManager\n     std::map<OptionsCategory, std::map<std::string, Arg>> m_available_args GUARDED_BY(cs_args);\n     std::list<SectionInfo> m_config_sections GUARDED_BY(cs_args);\n \n-    NODISCARD bool ReadConfigStream(std::istream& stream, const std::string& filepath, std::string& error, bool ignore_invalid_keys = false);\n+    NODISCARD bool ReadConfigStream(std::istream& stream, const std::string& filepath, std::string& error, bool ignore_invalid_keys = false, std::map<std::string, std::vector<util::SettingsValue>>* settings_target = nullptr);\n \n     /**\n      * Returns true if settings values from the default section should be used,"
      }
    ]
  },
  {
    "sha": "e2a46e801c7436727a9b90d01576db71ebd9a71f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMmE0NmU4MDFjNzQzNjcyN2E5YjkwZDAxNTc2ZGI3MWViZDlhNzFm",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-02-11T04:28:59Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-09-23T13:08:55Z"
      },
      "message": "Add new bitcoin_rw.conf file that is used for settings modified by this software itself",
      "tree": {
        "sha": "43b91ac5c07519cb72b9f6594590a6b7ea59b5f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/43b91ac5c07519cb72b9f6594590a6b7ea59b5f4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e2a46e801c7436727a9b90d01576db71ebd9a71f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2a46e801c7436727a9b90d01576db71ebd9a71f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e2a46e801c7436727a9b90d01576db71ebd9a71f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2a46e801c7436727a9b90d01576db71ebd9a71f/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "38e2657032c0597408bd1f94e3a66ad498fd1442",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38e2657032c0597408bd1f94e3a66ad498fd1442",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/38e2657032c0597408bd1f94e3a66ad498fd1442"
      }
    ],
    "stats": {
      "total": 422,
      "additions": 422,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5636934bdfcad6cb5a4d3ae52103071f61948031",
        "filename": "doc/files.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2a46e801c7436727a9b90d01576db71ebd9a71f/doc/files.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2a46e801c7436727a9b90d01576db71ebd9a71f/doc/files.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/files.md?ref=e2a46e801c7436727a9b90d01576db71ebd9a71f",
        "patch": "@@ -51,6 +51,7 @@ Subdirectory       | File(s)               | Description\n `wallets/`         |                       | [Contains wallets](#multi-wallet-environment); can be specified by `-walletdir` option; if `wallets/` subdirectory does not exist, a wallet resides in the data directory\n `./`               | `banlist.dat`         | Stores the IPs/subnets of banned nodes\n `./`               | `bitcoin.conf`        | User-defined [configuration settings](bitcoin-conf.md) for `bitcoind` or `bitcoin-qt`. File is not written to by the software and must be created manually. Path can be specified by `-conf` option\n+`./`               | `bitcoin_rw.conf`     | Contains [configuration settings](bitcoin-conf.md) modified by `bitcoind` or `bitcoin-qt`; can be specified by `-confrw` option\n `./`               | `bitcoind.pid`        | Stores the process ID (PID) of `bitcoind` or `bitcoin-qt` while running; created at start and deleted on shutdown; can be specified by `-pid` option\n `./`               | `debug.log`           | Contains debug information and general logging generated by `bitcoind` or `bitcoin-qt`; can be specified by `-debuglogfile` option\n `./`               | `fee_estimates.dat`   | Stores statistics used to estimate minimum transaction fees and priorities required for confirmation"
      },
      {
        "sha": "63d328a2dcecafb8cb06631a79b9ab14c912acce",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2a46e801c7436727a9b90d01576db71ebd9a71f/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2a46e801c7436727a9b90d01576db71ebd9a71f/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=e2a46e801c7436727a9b90d01576db71ebd9a71f",
        "patch": "@@ -55,6 +55,7 @@ static void SetupCliArgs(ArgsManager& argsman)\n \n     argsman.AddArg(\"-version\", \"Print version and exit\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-conf=<file>\", strprintf(\"Specify configuration file. Relative paths will be prefixed by datadir location. (default: %s)\", BITCOIN_CONF_FILENAME), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-confrw=<file>\", strprintf(\"Specify read/write configuration file. Relative paths will be prefixed by the network-specific datadir location. (default: %s)\", BITCOIN_RW_CONF_FILENAME), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-generate\", strprintf(\"Generate blocks immediately, equivalent to RPC generatenewaddress followed by RPC generatetoaddress. Optional positional integer arguments are number of blocks to generate (default: %s) and maximum iterations to try (default: %s), equivalent to RPC generatetoaddress nblocks and maxtries arguments. Example: bitcoin-cli -generate 4 1000\", DEFAULT_NBLOCKS, DEFAULT_MAX_TRIES), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-getinfo\", \"Get general information from the remote server. Note that unlike server-side RPC calls, the results of -getinfo is the result of multiple non-atomic requests. Some entries in the result may represent results from different states (e.g. wallet balance may be as of a different block from the chain state reported)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);"
      },
      {
        "sha": "b5d80f2463f5a8199312b9dfe5609a6f518ab76b",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2a46e801c7436727a9b90d01576db71ebd9a71f/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2a46e801c7436727a9b90d01576db71ebd9a71f/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e2a46e801c7436727a9b90d01576db71ebd9a71f",
        "patch": "@@ -401,6 +401,7 @@ void SetupServerArgs(NodeContext& node)\n     argsman.AddArg(\"-blockreconstructionextratxn=<n>\", strprintf(\"Extra transactions to keep in memory for compact block reconstructions (default: %u)\", DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-blocksonly\", strprintf(\"Whether to reject transactions from network peers. Automatic broadcast and rebroadcast of any transactions from inbound peers is disabled, unless the peer has the 'forcerelay' permission. RPC transactions are not affected. (default: %u)\", DEFAULT_BLOCKSONLY), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-conf=<file>\", strprintf(\"Specify path to read-only configuration file. Relative paths will be prefixed by datadir location. (default: %s)\", BITCOIN_CONF_FILENAME), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-confrw=<file>\", strprintf(\"Specify read/write configuration file. Relative paths will be prefixed by the network-specific datadir location. (default: %s)\", BITCOIN_RW_CONF_FILENAME), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-dbbatchsize\", strprintf(\"Maximum database write batch size in bytes (default: %u)\", nDefaultDbBatchSize), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-dbcache=<n>\", strprintf(\"Maximum database cache size <n> MiB (%d to %d, default: %d). In addition, unused mempool memory is shared for this cache (see -maxmempool).\", nMinDbCache, nMaxDbCache, nDefaultDbCache), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n@@ -1274,6 +1275,15 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n         LogPrintf(\"Config file: %s (not found, skipping)\\n\", config_file_path.string());\n     }\n \n+    fs::path rwconfig_file_path = GetRWConfigFile(gArgs.GetArg(\"-confrw\", BITCOIN_RW_CONF_FILENAME));\n+    if (fs::exists(rwconfig_file_path)) {\n+        LogPrintf(\"R/W Config file: %s\\n\", rwconfig_file_path.string());\n+    } else if (gArgs.IsArgSet(\"-confrw\")) {\n+        InitWarning(strprintf(_(\"The specified R/W config file %s does not exist\\n\"), rwconfig_file_path.string()));\n+    } else {\n+        LogPrintf(\"R/W Config file: %s (not found, skipping)\\n\", rwconfig_file_path.string());\n+    }\n+\n     // Log the config arguments to debug.log\n     args.LogArgs();\n "
      },
      {
        "sha": "404bb0481c030264d4b93a4e1eb611d2d596dba0",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2a46e801c7436727a9b90d01576db71ebd9a71f/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2a46e801c7436727a9b90d01576db71ebd9a71f/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=e2a46e801c7436727a9b90d01576db71ebd9a71f",
        "patch": "@@ -186,6 +186,9 @@ void OptionsModel::Reset()\n     QString dataDir = GUIUtil::getDefaultDataDirectory();\n     dataDir = settings.value(\"strDataDir\", dataDir).toString();\n \n+    // Remove rw config file\n+    gArgs.EraseRWConfigFile();\n+\n     // Remove all entries from our QSettings object\n     settings.clear();\n "
      },
      {
        "sha": "7ed386371969a9ab5796cb11e868f5fe05b43004",
        "filename": "src/qt/test/apptests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2a46e801c7436727a9b90d01576db71ebd9a71f/src/qt/test/apptests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2a46e801c7436727a9b90d01576db71ebd9a71f/src/qt/test/apptests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/apptests.cpp?ref=e2a46e801c7436727a9b90d01576db71ebd9a71f",
        "patch": "@@ -5,6 +5,7 @@\n #include <qt/test/apptests.h>\n \n #include <chainparams.h>\n+#include <interfaces/node.h>\n #include <key.h>\n #include <qt/bitcoin.h>\n #include <qt/bitcoingui.h>\n@@ -67,6 +68,15 @@ void AppTests::appTests()\n         return GetDataDir() / \"blocks\";\n     }());\n \n+    {\n+        // Need to ensure datadir is setup so resetting settings can delete the non-existent bitcoin_rw.conf\n+        auto node = interfaces::MakeNode();\n+        std::string error;\n+        if (!node->readConfigFiles(error)) {\n+            QWARN(\"Error in readConfigFiles\");\n+        }\n+    }\n+\n     qRegisterMetaType<interfaces::BlockAndHeaderTipInfo>(\"interfaces::BlockAndHeaderTipInfo\");\n     m_app.parameterSetup();\n     m_app.createOptionsModel(true /* reset settings */);"
      },
      {
        "sha": "07472d12f79362b2962292b3af454f12ecc87ff4",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 153,
        "deletions": 0,
        "changes": 153,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2a46e801c7436727a9b90d01576db71ebd9a71f/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2a46e801c7436727a9b90d01576db71ebd9a71f/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=e2a46e801c7436727a9b90d01576db71ebd9a71f",
        "patch": "@@ -2164,4 +2164,157 @@ BOOST_AUTO_TEST_CASE(message_hash)\n     BOOST_CHECK_NE(message_hash1, signature_hash);\n }\n \n+static std::string CheckModifyRWConfigFile(std::map<std::string, std::string>& settings_to_change, const std::string& current_config_file)\n+{\n+    std::istringstream stream_in(current_config_file);\n+    std::ostringstream stream_out;\n+    try {\n+        ModifyRWConfigStream(stream_in, stream_out, settings_to_change);\n+    } catch (...) {\n+        settings_to_change.clear();\n+        throw;\n+    }\n+    settings_to_change.clear();\n+    return stream_out.str();\n+}\n+\n+BOOST_AUTO_TEST_CASE(test_ModifyRWConfigFile)\n+{\n+    std::map<std::string, std::string> cs;\n+\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\"), \"a=b\");\n+\n+    cs[\"a\"] = \"c\";\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\"), \"a=c\");\n+    BOOST_CHECK(cs.empty());\n+\n+    // Multi-char name/value\n+    cs[\"ab\"] = \"cd\";\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"ab=bc\"), \"ab=cd\");\n+\n+    // Preserved final newline\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\n\"), \"a=b\\n\");\n+    cs[\"a\"] = \"c\";\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\n\"), \"a=c\\n\");\n+\n+    // Preserved final tab\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\t\"), \"a=b\\t\");\n+    cs[\"a\"] = \"c\";\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\t\"), \"a=c\\t\");\n+\n+    // Preserved final space\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b \"), \"a=b \");\n+    cs[\"a\"] = \"c\";\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b \"), \"a=c \");\n+\n+    // Preserved final crnl\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\r\\n\"), \"a=b\\r\\n\");\n+    cs[\"a\"] = \"c\";\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\r\\n\"), \"a=c\\r\\n\");\n+\n+    // Empty file\n+    cs[\"a\"] = \"c\";\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"\"), \"a=c\\n\");\n+\n+    // Ignore k=v in comment\n+    cs[\"a\"] = \"c\";\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"#a=b\"), \"#a=b\\na=c\\n\");\n+\n+    // Preserved comment\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\t# c\"), \"a=b\\t# c\");\n+\n+    // Commented out commented value\n+    cs[\"a\"] = \"c\";\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\t# c\"), \"a=c\\n#a=b\\t# c\");\n+\n+    // Preserved whitespace before name\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \" \\t \\ta=b\"), \" \\t \\ta=b\");\n+    cs[\"a\"] = \"c\";\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \" \\t \\ta=b\"), \" \\t \\ta=c\");\n+\n+    // Preserved whitespace after name\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a \\t \\t=b\"), \"a \\t \\t=b\");\n+    cs[\"a\"] = \"c\";\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a \\t \\t=b\"), \"a \\t \\t=c\");\n+\n+    // Preserved whitespace before value\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a= \\t \\tb\"), \"a= \\t \\tb\");\n+    cs[\"a\"] = \"c\";\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a= \\t \\tb\"), \"a= \\t \\tc\");\n+\n+    // Modifying value between others\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\nab=bc\\nd=e\"), \"a=b\\nab=bc\\nd=e\");\n+    cs[\"ab\"] = \"x\";\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\nab=bc\\nd=e\"), \"a=b\\nab=x\\nd=e\");\n+\n+    // Blank key/value\n+    cs[\"ab\"] = \"\";\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\nab=bc\\nd=e\"), \"a=b\\nab=\\nd=e\");\n+    cs[\"\"] = \"x\";\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\nab=bc\\nd=e\"), \"a=b\\nab=bc\\nd=e\\n=x\\n\");\n+\n+    // Blank line in source\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\n\\nab=bc\\n\\nd=e\"), \"a=b\\n\\nab=bc\\n\\nd=e\");\n+    cs[\"ab\"] = \"x\";\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\n\\nab=bc\\n\\nd=e\"), \"a=b\\n\\nab=x\\n\\nd=e\");\n+\n+    // Duplicate keys in the source\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\nab=bc\\nf=x\\nab=zx\\nd=e\"), \"a=b\\nab=bc\\nf=x\\nab=zx\\nd=e\");\n+    cs[\"ab\"] = \"x\";\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\nab=bc\\nf=x\\nab=zx\\nd=e\"), \"a=b\\nab=x\\nf=x\\nab=zx\\nd=e\");\n+\n+    // Comment out entire file if invalid input line\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\nab=bc\\nGARBAGE\\nd=e\"), \"[INVALID]\\n# Error parsing line 3: GARBAGE\\n#a=b\\n#ab=bc\\n#GARBAGE\\n#d=e\");\n+    cs[\"ab\"] = \"x\";\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\nab=bc\\nGARBAGE\\nd=e\"), \"ab=x\\n[INVALID]\\n# Error parsing line 3: GARBAGE\\n#a=b\\n#ab=bc\\n#GARBAGE\\n#d=e\");\n+    cs[\"ab\"] = \"x\";\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\nab=bc\\nGARBAGE\\nd=e\\n\"), \"ab=x\\n[INVALID]\\n# Error parsing line 3: GARBAGE\\n#a=b\\n#ab=bc\\n#GARBAGE\\n#d=e\\n\");\n+\n+    // Whitespace inside values\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\nab=b\\t \\t c\\nd=e\"), \"a=b\\nab=b\\t \\t c\\nd=e\");\n+    cs[\"ab\"] = \"x \\t \\tx\";\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\nab=b\\t \\t c\\nd=e\"), \"a=b\\nab=x \\t \\tx\\nd=e\");\n+\n+    // Newline inside name/value\n+    cs[\"a\"] = \"x\\nx\";\n+    BOOST_REQUIRE_THROW(CheckModifyRWConfigFile(cs, \"\"), std::invalid_argument);\n+    cs[\"a\"] = \"x\\rx\";\n+    BOOST_REQUIRE_THROW(CheckModifyRWConfigFile(cs, \"\"), std::invalid_argument);\n+    cs[\"a\\nb\"] = \"x\";\n+    BOOST_REQUIRE_THROW(CheckModifyRWConfigFile(cs, \"\"), std::invalid_argument);\n+    cs[\"a\\rb\"] = \"x\";\n+    BOOST_REQUIRE_THROW(CheckModifyRWConfigFile(cs, \"\"), std::invalid_argument);\n+\n+    // Whitespace leading/trailing name/value\n+    cs[\"a\"] = \" x\";\n+    BOOST_REQUIRE_THROW(CheckModifyRWConfigFile(cs, \"\"), std::invalid_argument);\n+    cs[\"a\"] = \"\\tx\";\n+    BOOST_REQUIRE_THROW(CheckModifyRWConfigFile(cs, \"\"), std::invalid_argument);\n+    cs[\" a\"] = \"x\";\n+    BOOST_REQUIRE_THROW(CheckModifyRWConfigFile(cs, \"\"), std::invalid_argument);\n+    cs[\"\\ta\"] = \"x\";\n+    BOOST_REQUIRE_THROW(CheckModifyRWConfigFile(cs, \"\"), std::invalid_argument);\n+    cs[\"a\"] = \"x \";\n+    BOOST_REQUIRE_THROW(CheckModifyRWConfigFile(cs, \"\"), std::invalid_argument);\n+    cs[\"a\"] = \"x\\t\";\n+    BOOST_REQUIRE_THROW(CheckModifyRWConfigFile(cs, \"\"), std::invalid_argument);\n+    cs[\"a \"] = \"x\";\n+    BOOST_REQUIRE_THROW(CheckModifyRWConfigFile(cs, \"\"), std::invalid_argument);\n+    cs[\"a\\t\"] = \"x\";\n+    BOOST_REQUIRE_THROW(CheckModifyRWConfigFile(cs, \"\"), std::invalid_argument);\n+\n+    // Ignore groups\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\n[group]\\nab=bc\\nd=e\"), \"a=b\\n[group]\\nab=bc\\nd=e\");\n+    cs[\"ab\"] = \"x\";\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\n[group]\\nab=bc\\nd=e\"), \"a=b\\nab=x\\n[group]\\nab=bc\\nd=e\");\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\n\\t [group] \\t#c\\nab=bc\\nd=e\"), \"a=b\\n\\t [group] \\t#c\\nab=bc\\nd=e\");\n+    cs[\"ab\"] = \"x\";\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\n\\t [group] \\t#c\\nab=bc\\nd=e\"), \"a=b\\nab=x\\n\\t [group] \\t#c\\nab=bc\\nd=e\");\n+\n+    // Comment out entire file if invalid input line, even after a group\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\n[group]\\nab=bc\\nGARBAGE\\nd=e\"), \"[INVALID]\\n# Error parsing line 4: GARBAGE\\n#a=b\\n#[group]\\n#ab=bc\\n#GARBAGE\\n#d=e\");\n+    cs[\"ab\"] = \"x\";\n+    BOOST_CHECK_EQUAL(CheckModifyRWConfigFile(cs, \"a=b\\n[group]\\nab=bc\\nGARBAGE\\nd=e\"), \"ab=x\\n[INVALID]\\n# Error parsing line 4: GARBAGE\\n#a=b\\n#[group]\\n#ab=bc\\n#GARBAGE\\n#d=e\");\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "55ae2b340d93a69359fefac9ae64ec66d594bb90",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 233,
        "deletions": 0,
        "changes": 233,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2a46e801c7436727a9b90d01576db71ebd9a71f/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2a46e801c7436727a9b90d01576db71ebd9a71f/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=e2a46e801c7436727a9b90d01576db71ebd9a71f",
        "patch": "@@ -63,15 +63,18 @@\n #endif\n \n #include <boost/algorithm/string/replace.hpp>\n+#include <string>\n #include <thread>\n #include <typeinfo>\n #include <univalue.h>\n+#include <unordered_set>\n \n // Application startup time (used for uptime calculation)\n const int64_t nStartupTime = GetTime();\n \n const char * const BITCOIN_CONF_FILENAME = \"bitcoin.conf\";\n const char * const BITCOIN_SETTINGS_FILENAME = \"settings.json\";\n+const char * const BITCOIN_RW_CONF_FILENAME = \"bitcoin_rw.conf\";\n \n ArgsManager gArgs;\n \n@@ -745,6 +748,11 @@ fs::path GetConfigFile(const std::string& confPath)\n     return AbsPathForConfigVal(fs::path(confPath), false);\n }\n \n+fs::path GetRWConfigFile(const std::string& confPath)\n+{\n+    return AbsPathForConfigVal(fs::path(confPath));\n+}\n+\n static bool GetConfigOptions(std::istream& stream, const std::string& filepath, std::string& error, std::vector<std::pair<std::string, std::string>>& options, std::list<SectionInfo>& sections)\n {\n     std::string str, prefix;\n@@ -915,6 +923,18 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n         error = strprintf(\"specified data directory \\\"%s\\\" does not exist.\", gArgs.GetArg(\"-datadir\", \"\"));\n         return false;\n     }\n+\n+    const std::string rwconf_path_str = GetArg(\"-confrw\", BITCOIN_RW_CONF_FILENAME);\n+    LOCK(csPathCached);  // HACK for lock ordering\n+    LOCK(cs_args);\n+    rwconf_path = GetRWConfigFile(rwconf_path_str);\n+    fs::ifstream rwconf_stream(rwconf_path);\n+    if (rwconf_stream.good()) {\n+        if (!ReadConfigStream(rwconf_stream, rwconf_path_str, error, ignore_invalid_keys, &m_settings.rw_config)) {\n+            return false;\n+        }\n+    }\n+\n     return true;\n }\n \n@@ -995,6 +1015,219 @@ void ArgsManager::LogArgs() const\n     logArgsPrefix(\"Command-line arg:\", \"\", m_settings.command_line_options);\n }\n \n+namespace {\n+\n+    // Like std::getline, but includes the EOL character in the result\n+    bool getline_with_eol(std::istream& stream, std::string& result)\n+    {\n+        int current_char;\n+        current_char = stream.get();\n+        if (current_char == std::char_traits<char>::eof()) {\n+            return false;\n+        }\n+        result.clear();\n+        result.push_back(char(current_char));\n+        while (current_char != '\\n') {\n+            current_char = stream.get();\n+            if (current_char == std::char_traits<char>::eof()) {\n+                break;\n+            }\n+            result.push_back(char(current_char));\n+        }\n+        return true;\n+    }\n+\n+    const char * const ModifyRWConfigFile_ws_chars = \" \\t\\r\\n\";\n+\n+    void ModifyRWConfigFile_SanityCheck(const std::string& s)\n+    {\n+        if (s.empty()) {\n+            // Dereferencing .begin or .rbegin below is invalid unless the string has at least one character.\n+            return;\n+        }\n+\n+        static const char * const newline_chars = \"\\r\\n\";\n+        static std::string ws_chars(ModifyRWConfigFile_ws_chars);\n+        if (s.find_first_of(newline_chars) != std::string::npos) {\n+            throw std::invalid_argument(\"New-line in config name/value\");\n+        }\n+        if (ws_chars.find(*s.begin()) != std::string::npos || ws_chars.find(*s.rbegin()) != std::string::npos) {\n+            throw std::invalid_argument(\"Config name/value has leading/trailing whitespace\");\n+        }\n+    }\n+\n+    void ModifyRWConfigFile_WriteRemaining(std::ostream& stream_out, const std::map<std::string, std::string>& settings_to_change, std::set<std::string>& setFound)\n+    {\n+        for (const auto& setting_pair : settings_to_change) {\n+            const std::string& key = setting_pair.first;\n+            const std::string& val = setting_pair.second;\n+            if (setFound.find(key) != setFound.end()) {\n+                continue;\n+            }\n+            setFound.insert(key);\n+            ModifyRWConfigFile_SanityCheck(key);\n+            ModifyRWConfigFile_SanityCheck(val);\n+            stream_out << key << \"=\" << val << \"\\n\";\n+        }\n+    }\n+} // namespace\n+\n+void ModifyRWConfigStream(std::istream& stream_in, std::ostream& stream_out, const std::map<std::string, std::string>& settings_to_change)\n+{\n+    static const char * const ws_chars = ModifyRWConfigFile_ws_chars;\n+    std::set<std::string> setFound;\n+    std::string s, lineend, linebegin, key;\n+    std::string::size_type n, n2;\n+    bool inside_group = false, have_eof_nl = true;\n+    std::map<std::string, std::string>::const_iterator iterCS;\n+    size_t lineno = 0;\n+    while (getline_with_eol(stream_in, s)) {\n+        ++lineno;\n+\n+        have_eof_nl = (!s.empty()) && (*s.rbegin() == '\\n');\n+        n = s.find('#');\n+        const bool has_comment = (n != std::string::npos);\n+        if (!has_comment) {\n+            n = s.size();\n+        }\n+        if (n > 0) {\n+            n2 = s.find_last_not_of(ws_chars, n - 1);\n+            if (n2 != std::string::npos) {\n+                n = n2 + 1;\n+            }\n+        }\n+        n2 = s.find_first_not_of(ws_chars);\n+        if (n2 == std::string::npos || n2 >= n) {\n+            // Blank or comment-only line\n+            stream_out << s;\n+            continue;\n+        }\n+        lineend = s.substr(n);\n+        linebegin = s.substr(0, n2);\n+        s = s.substr(n2, n - n2);\n+\n+        // It is impossible for s to be empty here, due to the blank line check above\n+        if (*s.begin() == '[' && *s.rbegin() == ']') {\n+            // We don't use sections, so we could possibly just write out the rest of the file - but we need to check for unparsable lines, so we just set a flag to ignore settings from here on\n+            ModifyRWConfigFile_WriteRemaining(stream_out, settings_to_change, setFound);\n+            inside_group = true;\n+            key.clear();\n+\n+            stream_out << linebegin << s << lineend;\n+            continue;\n+        }\n+\n+        n = s.find('=');\n+        if (n == std::string::npos) {\n+            // Bad line; this causes boost to throw an exception when parsing, so we comment out the entire file\n+            stream_in.seekg(0, std::ios_base::beg);\n+            stream_out.seekp(0, std::ios_base::beg);\n+            if (!(stream_in.good() && stream_out.good())) {\n+                throw std::ios_base::failure(\"Failed to rewind (to comment out existing file)\");\n+            }\n+            // First, write out all the settings we intend to set\n+            setFound.clear();\n+            ModifyRWConfigFile_WriteRemaining(stream_out, settings_to_change, setFound);\n+            // We then define a category to ensure new settings get added before the invalid stuff\n+            stream_out << \"[INVALID]\\n\";\n+            // Then, describe the problem in a comment\n+            stream_out << \"# Error parsing line \" << lineno << \": \" << s << \"\\n\";\n+            // Finally, dump the rest of the file commented out\n+            while (getline_with_eol(stream_in, s)) {\n+                stream_out << \"#\" << s;\n+            }\n+            return;\n+        }\n+\n+        if (!inside_group) {\n+            // We don't support/use groups, so once we're inside key is always null to avoid setting anything\n+            n2 = s.find_last_not_of(ws_chars, n - 1);\n+            if (n2 == std::string::npos) {\n+                n2 = n - 1;\n+            } else {\n+                ++n2;\n+            }\n+            key = s.substr(0, n2);\n+        }\n+        if ((!key.empty()) && (iterCS = settings_to_change.find(key)) != settings_to_change.end() && setFound.find(key) == setFound.end()) {\n+            // This is the key we want to change\n+            const std::string& val = iterCS->second;\n+            setFound.insert(key);\n+            ModifyRWConfigFile_SanityCheck(val);\n+            if (has_comment) {\n+                // Rather than change a commented line, comment it out entirely (the existing comment may relate to the value) and replace it\n+                stream_out << key << \"=\" << val << \"\\n\";\n+                linebegin.insert(linebegin.begin(), '#');\n+            } else {\n+                // Just modify the value in-line otherwise\n+                n2 = s.find_first_not_of(ws_chars, n + 1);\n+                if (n2 == std::string::npos) {\n+                    n2 = n + 1;\n+                }\n+                s = s.substr(0, n2) + val;\n+            }\n+        }\n+        stream_out << linebegin << s << lineend;\n+    }\n+    if (setFound.size() < settings_to_change.size()) {\n+        if (!have_eof_nl) {\n+            stream_out << \"\\n\";\n+        }\n+        ModifyRWConfigFile_WriteRemaining(stream_out, settings_to_change, setFound);\n+    }\n+}\n+\n+void ArgsManager::ModifyRWConfigFile(const std::map<std::string, std::string>& settings_to_change)\n+{\n+    LOCK(cs_args);\n+    assert(!rwconf_path.empty());\n+    fs::path rwconf_new_path = rwconf_path;\n+    rwconf_new_path += \".new\";\n+    const std::string new_path_str = rwconf_new_path.string();\n+    try {\n+        std::remove(new_path_str.c_str());\n+        fs::ofstream streamRWConfigOut(rwconf_new_path, std::ios_base::out | std::ios_base::trunc);\n+        if (fs::exists(rwconf_path)) {\n+            fs::ifstream streamRWConfig(rwconf_path);\n+            ::ModifyRWConfigStream(streamRWConfig, streamRWConfigOut, settings_to_change);\n+        } else {\n+            std::istringstream streamIn;\n+            ::ModifyRWConfigStream(streamIn, streamRWConfigOut, settings_to_change);\n+        }\n+    } catch (...) {\n+        std::remove(new_path_str.c_str());\n+        throw;\n+    }\n+    if (!RenameOver(rwconf_new_path, rwconf_path)) {\n+        std::remove(new_path_str.c_str());\n+        throw std::ios_base::failure(strprintf(\"Failed to replace %s\", new_path_str));\n+    }\n+}\n+\n+void ArgsManager::ModifyRWConfigFile(const std::string& setting_to_change, const std::string& new_value)\n+{\n+    std::map<std::string, std::string> settings_to_change;\n+    settings_to_change[setting_to_change] = new_value;\n+    ModifyRWConfigFile(settings_to_change);\n+}\n+\n+void ArgsManager::EraseRWConfigFile()\n+{\n+    LOCK(cs_args);\n+    assert(!rwconf_path.empty());\n+    if (!fs::exists(rwconf_path)) {\n+        return;\n+    }\n+    fs::path rwconf_reset_path = rwconf_path;\n+    rwconf_reset_path += \".reset\";\n+    if (!RenameOver(rwconf_path, rwconf_reset_path)) {\n+        const std::string path_str = rwconf_path.string();\n+        if (std::remove(path_str.c_str())) {\n+            throw std::ios_base::failure(strprintf(\"Failed to remove %s\", path_str));\n+        }\n+    }\n+}\n+\n bool RenameOver(fs::path src, fs::path dest)\n {\n #ifdef WIN32"
      },
      {
        "sha": "3ad9aec81a4355d58725bd387e58956fb297e5ae",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2a46e801c7436727a9b90d01576db71ebd9a71f/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2a46e801c7436727a9b90d01576db71ebd9a71f/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=e2a46e801c7436727a9b90d01576db71ebd9a71f",
        "patch": "@@ -44,6 +44,7 @@ int64_t GetStartupTime();\n \n extern const char * const BITCOIN_CONF_FILENAME;\n extern const char * const BITCOIN_SETTINGS_FILENAME;\n+extern const char * const BITCOIN_RW_CONF_FILENAME;\n \n void SetupEnvironment();\n bool SetupNetworking();\n@@ -89,6 +90,7 @@ bool CheckDataDirOption();\n /** Tests only */\n void ClearDatadirCache();\n fs::path GetConfigFile(const std::string& confPath);\n+fs::path GetRWConfigFile(const std::string& confPath);\n #ifdef WIN32\n fs::path GetSpecialFolderPath(int nFolder, bool fCreate = true);\n #endif\n@@ -153,6 +155,8 @@ struct SectionInfo\n     int m_line;\n };\n \n+void ModifyRWConfigStream(std::istream& stream_in, std::ostream& stream_out, const std::map<std::string, std::string>& settings_to_change);\n+\n class ArgsManager\n {\n public:\n@@ -211,6 +215,9 @@ class ArgsManager\n      */\n     std::vector<util::SettingsValue> GetSettingsList(const std::string& arg) const;\n \n+private:\n+    fs::path rwconf_path GUARDED_BY(cs_args);\n+\n public:\n     ArgsManager();\n     ~ArgsManager();\n@@ -223,6 +230,10 @@ class ArgsManager\n     NODISCARD bool ParseParameters(int argc, const char* const argv[], std::string& error);\n     NODISCARD bool ReadConfigFiles(std::string& error, bool ignore_invalid_keys = false);\n \n+    void ModifyRWConfigFile(const std::map<std::string, std::string>& settings_to_change);\n+    void ModifyRWConfigFile(const std::string& setting_to_change, const std::string& new_value);\n+    void EraseRWConfigFile();\n+\n     /**\n      * Log warnings for options in m_section_only_args when\n      * they are specified in the default section but not overridden"
      }
    ]
  }
]