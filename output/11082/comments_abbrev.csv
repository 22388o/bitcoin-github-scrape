Sjors,2018-03-17T15:33:33Z,I'm not a big fan of multiple config files. I would prefer if QT just edited `bitcoin.conf` and tells the user to do so manually if things gets too complicated. See also #6461.,https://github.com/bitcoin/bitcoin/pull/11082#issuecomment-373928998,373928998,
Sjors,2018-03-30T15:09:10Z,"I tried just making `bitcoin.conf` writeable instead of having two files in #12833, but that seems to raise some objections. So in that case: Concept ACK. \n\nCan you rebase this? From my experience with the other PR that should be easy and it worked quite well.",https://github.com/bitcoin/bitcoin/pull/11082#issuecomment-377545481,377545481,
luke-jr,2018-03-31T21:24:17Z,Rebased,https://github.com/bitcoin/bitcoin/pull/11082#issuecomment-377724496,377724496,
Sjors,2018-04-03T10:56:49Z,tACK aac0501 (tested through #12833),https://github.com/bitcoin/bitcoin/pull/11082#issuecomment-378210193,378210193,
Sjors,2018-05-15T11:10:37Z,Needs another rebase due to #11862. Perhaps not worth the effort without more Concept ACKs.,https://github.com/bitcoin/bitcoin/pull/11082#issuecomment-389129606,389129606,
MarcoFalke,2018-06-13T17:27:58Z,"Let me know when I can add this back to project 8, i.e. when it is ready for review.",https://github.com/bitcoin/bitcoin/pull/11082#issuecomment-397020150,397020150,
luke-jr,2018-11-07T22:36:50Z,"Finally rebased (and ready for high-pri for review I think).\n\nEdit: Forgot #14532 was in high-pri still. This will have to wait I guess.",https://github.com/bitcoin/bitcoin/pull/11082#issuecomment-436803389,436803389,
DrahtBot,2018-11-09T03:48:23Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #16545 (refactor: Implement missing error checking for ArgsManager flags by ryanofsky)\n* #14866 ([wip] util: Improve eval",https://github.com/bitcoin/bitcoin/pull/11082#issuecomment-437240932,437240932,
luke-jr,2018-12-14T01:54:19Z,Rebased (and ready for high-prio review list),https://github.com/bitcoin/bitcoin/pull/11082#issuecomment-447185944,447185944,
jonasschnelli,2019-01-04T06:24:44Z,"> It seems like all we need is basic storage for settings that can be updated in the gui and maybe over rpc. I'd think the simplest way to do to this would be to add a UniValue m_rwsettings; member to the GlobalArgs class, tweak GetArg...() methods to return these settings, and serialize/deserialize the settings member as needed to <datadir>/settings.json by calling existing univalue read and writ",https://github.com/bitcoin/bitcoin/pull/11082#issuecomment-451362425,451362425,
luke-jr,2019-01-04T10:21:02Z,"Pretty sure UniValue is actually more code than this simple INI modification logic...\n\nINI *is also* a simple machine-readable format, and we're already using it. The minimal complexity in modifications exists to *preserve* user edits (which UniValue doesn't support at all).",https://github.com/bitcoin/bitcoin/pull/11082#issuecomment-451406061,451406061,
jonasschnelli,2019-01-11T06:21:33Z,"There has been a quick discussion about UniValue vs INI files during the todays IRC meeting:\nhttp://www.erisian.com.au/bitcoin-core-dev/log-2019-01-10.html#l-451",https://github.com/bitcoin/bitcoin/pull/11082#issuecomment-453391480,453391480,
Sjors,2019-01-15T19:36:08Z,"tl&dr of the IRC discussion seems to be ""whatever is less code"", so not much difference to the discussion here. I think there's something to be said for keeping the same format.\n\nIf we go for a different format, then I should repeat my point that I don't like how `bitcoin-cli`, and by extension other applications that use the RPC that rely on `bitcoin.conf` to figure out how to talk to it, can",https://github.com/bitcoin/bitcoin/pull/11082#issuecomment-454522250,454522250,
luke-jr,2019-02-12T15:17:06Z,Rebased,https://github.com/bitcoin/bitcoin/pull/11082#issuecomment-462799198,462799198,
Sjors,2019-02-12T18:29:56Z,"At least one of the Travis machines failed with `test_bitcoin-qt: util/system.cpp:1213: void ArgsManager::EraseRWConfigFile(): Assertion `!rwconf_path.empty()' failed.`\n\nI also rebased #12833; everything still works afaik.\n\nAlso worth noting that this PR could make dynamic wallet loading / unloading in the GUI more useful (because we can remember which wallets are open). (update: see #1545",https://github.com/bitcoin/bitcoin/pull/11082#issuecomment-462877925,462877925,
achow101,2019-02-21T19:57:09Z,This currently only allows each config option to be specified once. However the normal bitcoin.conf file allows specifying some argument multiple times (e.g. `wallet`). It would be nice if this did that too.,https://github.com/bitcoin/bitcoin/pull/11082#issuecomment-466143595,466143595,
luke-jr,2019-02-23T02:46:07Z,"@achow101 Yes, but that seems better left for a subsequent PR. This is good enough for most use cases right now.",https://github.com/bitcoin/bitcoin/pull/11082#issuecomment-466609082,466609082,
achow101,2019-09-24T21:56:42Z,@luke-jr Care to rebase?,https://github.com/bitcoin/bitcoin/pull/11082#issuecomment-534764951,534764951,
jtimon,2019-10-10T23:00:03Z,Concept ACK ,https://github.com/bitcoin/bitcoin/pull/11082#issuecomment-540832813,540832813,
luke-jr,2019-10-13T01:49:12Z,Rebased,https://github.com/bitcoin/bitcoin/pull/11082#issuecomment-541377456,541377456,
Sjors,2019-10-15T08:19:37Z,Rebased #12833 (move QSettings to bitcoin_rw.conf) on top.,https://github.com/bitcoin/bitcoin/pull/11082#issuecomment-542096797,542096797,
achow101,2019-10-16T21:07:48Z,"The `bitcoin_rw.conf` file is being written to the network specific directories and not the datadir itself, so when using regtest or testnet mode, it won't be read and handled.\n\nSo either the network specific conf needs to be read, or it needs to be written to the datadir, preferably with network specific settings so that things done on each network don't interfere with each other.",https://github.com/bitcoin/bitcoin/pull/11082#issuecomment-542892259,542892259,
luke-jr,2019-10-16T21:12:41Z,It's being read from the network-specific directory too...,https://github.com/bitcoin/bitcoin/pull/11082#issuecomment-542893934,542893934,
Sjors,2019-10-21T09:17:30Z,This is consistent with how QT stores network specific settings.,https://github.com/bitcoin/bitcoin/pull/11082#issuecomment-544426388,544426388,
achow101,2019-10-21T15:31:38Z,"> It's being read from the network-specific directory too...\n\nIt didn't seem to be working for me in #15454, maybe I was just doing something wrong there. Edit: Other changes to ArgsManager were causing my problems.",https://github.com/bitcoin/bitcoin/pull/11082#issuecomment-544570110,544570110,
luke-jr,2019-10-29T02:15:16Z,Trivial rebased,https://github.com/bitcoin/bitcoin/pull/11082#issuecomment-547225174,547225174,
jonasschnelli,2020-05-29T06:59:24Z,What is the status of this? Shall we close it? It had a few concept ACKs.,https://github.com/bitcoin/bitcoin/pull/11082#issuecomment-635798156,635798156,
Sjors,2020-05-29T08:57:14Z,"I would still like to see this, or something equivalent...",https://github.com/bitcoin/bitcoin/pull/11082#issuecomment-635858778,635858778,
luke-jr,2020-05-29T14:55:37Z,Forgot to push the last rebase... pushed.,https://github.com/bitcoin/bitcoin/pull/11082#issuecomment-636018931,636018931,
jonasschnelli,2020-06-05T06:56:56Z,"@luke-jr: pull is failing on CIs,... this PR could use some love and care.",https://github.com/bitcoin/bitcoin/pull/11082#issuecomment-639295859,639295859,
luke-jr,2020-06-18T16:17:27Z,Rebased yet again,https://github.com/bitcoin/bitcoin/pull/11082#issuecomment-646136382,646136382,
luke-jr,2020-08-20T15:46:06Z,Rebased,https://github.com/bitcoin/bitcoin/pull/11082#issuecomment-677745462,677745462,
jnewbery,2020-08-20T18:25:57Z,"I'm not sure this is needed now that we have the settings.json file. @luke-jr, can you explain why we should consider adding another settings file?",https://github.com/bitcoin/bitcoin/pull/11082#issuecomment-677825831,677825831,
luke-jr,2020-08-20T18:57:18Z,So we can revert settings.json before 0.21 is released and we're locked in to supporting such a bad idea?,https://github.com/bitcoin/bitcoin/pull/11082#issuecomment-677840600,677840600,
jnewbery,2020-08-20T19:22:49Z,NACK. Let's close this and move on.,https://github.com/bitcoin/bitcoin/pull/11082#issuecomment-677853669,677853669,
Sjors,2020-10-15T18:21:15Z,"I have no objection to swapping the new `settings.json` out for `bitcoin_rw.conf` before the release, if this gets enough review. But I probably won't review this, because I don't think the difference is worth it. I don't expect users to manually read or edit this, since they can already access `bitcoin.conf`. So the choice of file format seems irrelevant.\n\nThe (rather large amount of) code in",https://github.com/bitcoin/bitcoin/pull/11082#issuecomment-709506450,709506450,
fanquake,2020-11-18T13:22:02Z,"Now that we've branched off, and are unlikely to be reverting `settings.json`, I'm going to close this PR.",https://github.com/bitcoin/bitcoin/pull/11082#issuecomment-729673558,729673558,
ajtowns,2018-06-02T10:51:56Z,"Wouldn't it be better for `ReadRWConfigFile` not to throw exceptions in any normal case? If there's a weird setting, that's fine it will just get over-written later; if the file is read-only though that error should at least be reported to the user; and if there's some other unexpected sort of error that throws an exception, then that shouldn't be ignored?",https://github.com/bitcoin/bitcoin/pull/11082#discussion_r192556713,192556713,src/bitcoind.cpp
ajtowns,2018-06-02T10:53:27Z,"""rwconfig"" is an implementation detail; it might be better to describe it via it's purpose instead. ""confui -- Specify configuration file that stores settings set in the UI"" or something?",https://github.com/bitcoin/bitcoin/pull/11082#discussion_r192556745,192556745,src/init.cpp
ryanofsky,2018-06-04T18:43:26Z,"> ""rwconfig"" is an implementation detail; it might be better to describe it via it's purpose instead. ""confui -- Specify configuration file that stores settings set in the UI"" or something?\n\nIMO, rwconf is nice because it would let us an add an RPC interface for updating settings and persisting them. ",https://github.com/bitcoin/bitcoin/pull/11082#discussion_r192841999,192841999,src/init.cpp
practicalswift,2018-11-07T18:01:24Z,An integer wraparound will occur here in the case of `n == 0`.,https://github.com/bitcoin/bitcoin/pull/11082#discussion_r231615397,231615397,src/util/system.cpp
practicalswift,2018-11-07T18:05:32Z,Make sure parameters name match between declaration and definition :-),https://github.com/bitcoin/bitcoin/pull/11082#discussion_r231616863,231616863,src/util/system.h
practicalswift,2018-11-07T18:14:18Z,"Nit: Avoid extra allocations by doing:\n\n```\ns = s.substr(0, n2);\ns += val;\n```",https://github.com/bitcoin/bitcoin/pull/11082#discussion_r231619701,231619701,src/util/system.cpp
practicalswift,2018-11-07T18:23:52Z,The scope of `has_comment` can be reduced?,https://github.com/bitcoin/bitcoin/pull/11082#discussion_r231622905,231622905,src/util/system.cpp
practicalswift,2018-11-07T18:24:33Z,Use `(char)i` to get it consistent with the rest of the code base :-),https://github.com/bitcoin/bitcoin/pull/11082#discussion_r231623141,231623141,src/util/system.cpp
luke-jr,2018-11-07T20:19:55Z,I think the current style is more readable.,https://github.com/bitcoin/bitcoin/pull/11082#discussion_r231662854,231662854,src/util/system.cpp
luke-jr,2018-11-07T20:21:37Z,C-style casts aren't good practice in C++.,https://github.com/bitcoin/bitcoin/pull/11082#discussion_r231663311,231663311,src/util/system.cpp
practicalswift,2018-11-07T20:33:24Z,"Agreed. `static_cast<char>(i)` then?\n\nThe reasons I personally prefer `static_cast<char>(i)`:\n* https://isocpp.org/wiki/faq/style-and-techniques#static-cast\n* https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#es49-if-you-must-use-a-cast-use-a-named-cast\n* https://www.aristeia.com/EC3E/3E_item27.pdf\n",https://github.com/bitcoin/bitcoin/pull/11082#discussion_r231666685,231666685,src/util/system.cpp
practicalswift,2018-11-07T20:34:52Z,I see your point and readability is probably more important than allocation efficiency in this case :-),https://github.com/bitcoin/bitcoin/pull/11082#discussion_r231667115,231667115,src/util/system.cpp
luke-jr,2018-11-07T22:36:19Z,There is no need for a cast at all. C++ allows construction of char just like any other type.,https://github.com/bitcoin/bitcoin/pull/11082#discussion_r231704879,231704879,src/util/system.cpp
practicalswift,2018-11-07T23:15:06Z,"I'm not sure I follow the ""no need for cast"" statement. Do we agree on the following two statements? :-)\n\n1. The functional cast expression `char(i)` is equivalent to the C-style cast expression `(char)i`\n1. When a C-style cast expression is encountered, the compiler interprets it as the first named cast that satisfies the requirements of the respective cast operator in the order: a. `const_",https://github.com/bitcoin/bitcoin/pull/11082#discussion_r231714495,231714495,src/util/system.cpp
sipa,2018-11-07T23:31:17Z,"For primitive types we've generally used C-style casts over C++-style ones (they're equivalent in that case, and much less syntactic burden).",https://github.com/bitcoin/bitcoin/pull/11082#discussion_r231718036,231718036,src/util/system.cpp
Sjors,2018-11-10T09:38:35Z,Nit: 0.18.0,https://github.com/bitcoin/bitcoin/pull/11082#discussion_r232447449,232447449,doc/files.md
promag,2018-12-18T16:28:23Z,Done.,https://github.com/bitcoin/bitcoin/pull/11082#discussion_r242608382,242608382,src/util/system.h
ryanofsky,2018-12-18T18:00:36Z,"In commit ""util: Support prepending configs in ReadConfigStream"" (e95124005d4b0ad1d343eb60662d3e82a9e9194b)\n\n\nCould add description of offsets map:\n\n```c++\n// Map of option name -> number of option values prepended by this ReadConfigStream call.\n// Only used when prepend=true.\n```",https://github.com/bitcoin/bitcoin/pull/11082#discussion_r242642836,242642836,src/util/system.cpp
ryanofsky,2018-12-18T18:09:26Z,"In commit ""util: Support prepending configs in ReadConfigStream"" (e95124005d4b0ad1d343eb60662d3e82a9e9194b)\n\nCould definitely use a c++ unit test checking the prepend behavior. Especially for the negated args part, which I could easily imagine someone screwing up in the future.",https://github.com/bitcoin/bitcoin/pull/11082#discussion_r242645787,242645787,src/util/system.h
ryanofsky,2018-12-18T18:40:04Z,"In commit ""util: SelectBaseParams in ReadConfigFiles, before getting final datadir"" (cfd54102b60bc1a83c032f041e4199cf89e422f1)\n\nI don't understand what this commit is supposed to be doing. GetDataDir seems to be called with fNetSpecific=false below so it seems like baseparams wouldn't be accessed here. Also, it doesn't seem ideal that now SelectBaseParams will be called multiple times at start",https://github.com/bitcoin/bitcoin/pull/11082#discussion_r242656516,242656516,src/util/system.cpp
luke-jr,2019-05-08T20:55:10Z,`bitcoin_rw.conf` is located in the network-specific data dir.,https://github.com/bitcoin/bitcoin/pull/11082#discussion_r282245860,282245860,src/util/system.cpp
