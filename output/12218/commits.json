[
  {
    "sha": "d3a185a33b7bc09e4ca998f42f1f9aea8177ef8a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkM2ExODVhMzNiN2JjMDllNGNhOTk4ZjQyZjFmOWFlYTgxNzdlZjhh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-01-18T16:21:08Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-01-24T11:18:29Z"
      },
      "message": "net: Move misbehaving logging to net logging category\n\nThis moves the error messages for misbehavior (when available) into the\nline that reports the misbehavior, as well as moves the logging to the\n`net` category.\n\nThis is a continuation of #11583 and avoids serious-looking errors due\nto misbehaving peers.\n\nTo do this, Misbehaving() gains an optional `message` argument.\n\nE.g. change:\n\n    2018-01-18 16:02:27 Misbehaving: x.x.x.x:62174 peer=164603 (80 -> 100) BAN THRESHOLD EXCEEDED\n    2018-01-18 16:02:27 ERROR: non-continuous headers sequence\n\nto\n\n    2018-01-18 16:02:27 Misbehaving: x.x.x.x:62174 peer=164603 (80 -> 100) BAN THRESHOLD EXCEEDED: non-continuous headers sequence",
      "tree": {
        "sha": "03951b5ebc0b7302b4399d066e688eb7fbfc4372",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/03951b5ebc0b7302b4399d066e688eb7fbfc4372"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d3a185a33b7bc09e4ca998f42f1f9aea8177ef8a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3a185a33b7bc09e4ca998f42f1f9aea8177ef8a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d3a185a33b7bc09e4ca998f42f1f9aea8177ef8a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3a185a33b7bc09e4ca998f42f1f9aea8177ef8a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "898f560b55aba2070f188b0223ef2beefcdede8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/898f560b55aba2070f188b0223ef2beefcdede8b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/898f560b55aba2070f188b0223ef2beefcdede8b"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 23,
      "deletions": 24
    },
    "files": [
      {
        "sha": "edebccfb31f2c8b2177171f1b613573588c8d2ab",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 23,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3a185a33b7bc09e4ca998f42f1f9aea8177ef8a/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3a185a33b7bc09e4ca998f42f1f9aea8177ef8a/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=d3a185a33b7bc09e4ca998f42f1f9aea8177ef8a",
        "patch": "@@ -750,7 +750,7 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n }\n \n // Requires cs_main.\n-void Misbehaving(NodeId pnode, int howmuch)\n+void Misbehaving(NodeId pnode, int howmuch, const std::string& message)\n {\n     if (howmuch == 0)\n         return;\n@@ -761,12 +761,13 @@ void Misbehaving(NodeId pnode, int howmuch)\n \n     state->nMisbehavior += howmuch;\n     int banscore = gArgs.GetArg(\"-banscore\", DEFAULT_BANSCORE_THRESHOLD);\n+    std::string message_prefixed = message.empty() ? \"\" : (\": \" + message);\n     if (state->nMisbehavior >= banscore && state->nMisbehavior - howmuch < banscore)\n     {\n-        LogPrintf(\"%s: %s peer=%d (%d -> %d) BAN THRESHOLD EXCEEDED\\n\", __func__, state->name, pnode, state->nMisbehavior-howmuch, state->nMisbehavior);\n+        LogPrint(BCLog::NET, \"%s: %s peer=%d (%d -> %d) BAN THRESHOLD EXCEEDED%s\\n\", __func__, state->name, pnode, state->nMisbehavior-howmuch, state->nMisbehavior, message_prefixed);\n         state->fShouldBan = true;\n     } else\n-        LogPrintf(\"%s: %s peer=%d (%d -> %d)\\n\", __func__, state->name, pnode, state->nMisbehavior-howmuch, state->nMisbehavior);\n+        LogPrint(BCLog::NET, \"%s: %s peer=%d (%d -> %d)%s\\n\", __func__, state->name, pnode, state->nMisbehavior-howmuch, state->nMisbehavior, message_prefixed);\n }\n \n \n@@ -1260,8 +1261,7 @@ inline void static SendBlockTransactions(const CBlock& block, const BlockTransac\n     for (size_t i = 0; i < req.indexes.size(); i++) {\n         if (req.indexes[i] >= block.vtx.size()) {\n             LOCK(cs_main);\n-            Misbehaving(pfrom->GetId(), 100);\n-            LogPrintf(\"Peer %d sent us a getblocktxn with out-of-bounds tx indices\", pfrom->GetId());\n+            Misbehaving(pfrom->GetId(), 100, strprintf(\"Peer %d sent us a getblocktxn with out-of-bounds tx indices\", pfrom->GetId()));\n             return;\n         }\n         resp.txn[i] = block.vtx[req.indexes[i]];\n@@ -1318,8 +1318,8 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n         uint256 hashLastBlock;\n         for (const CBlockHeader& header : headers) {\n             if (!hashLastBlock.IsNull() && header.hashPrevBlock != hashLastBlock) {\n-                Misbehaving(pfrom->GetId(), 20);\n-                return error(\"non-continuous headers sequence\");\n+                Misbehaving(pfrom->GetId(), 20, \"non-continuous headers sequence\");\n+                return false;\n             }\n             hashLastBlock = header.GetHash();\n         }\n@@ -1338,7 +1338,9 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n         if (state.IsInvalid(nDoS)) {\n             LOCK(cs_main);\n             if (nDoS > 0) {\n-                Misbehaving(pfrom->GetId(), nDoS);\n+                Misbehaving(pfrom->GetId(), nDoS, \"invalid header received\");\n+            } else {\n+                LogPrint(BCLog::NET, \"peer=%d: invalid header received\\n\", pfrom->GetId());\n             }\n             if (punish_duplicate_invalid && mapBlockIndex.find(first_invalid_header.GetHash()) != mapBlockIndex.end()) {\n                 // Goal: don't allow outbound peers to use up our outbound\n@@ -1374,7 +1376,7 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n                 // etc), and not just the duplicate-invalid case.\n                 pfrom->fDisconnect = true;\n             }\n-            return error(\"invalid header received\");\n+            return false;\n         }\n     }\n \n@@ -1783,8 +1785,8 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         if (vAddr.size() > 1000)\n         {\n             LOCK(cs_main);\n-            Misbehaving(pfrom->GetId(), 20);\n-            return error(\"message addr size() = %u\", vAddr.size());\n+            Misbehaving(pfrom->GetId(), 20, strprintf(\"message addr size() = %u\", vAddr.size()));\n+            return false;\n         }\n \n         // Store the new addresses\n@@ -1859,8 +1861,8 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         if (vInv.size() > MAX_INV_SZ)\n         {\n             LOCK(cs_main);\n-            Misbehaving(pfrom->GetId(), 20);\n-            return error(\"message inv size() = %u\", vInv.size());\n+            Misbehaving(pfrom->GetId(), 20, strprintf(\"message inv size() = %u\", vInv.size()));\n+            return false;\n         }\n \n         bool fBlocksOnly = !fRelayTxes;\n@@ -1920,8 +1922,8 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         if (vInv.size() > MAX_INV_SZ)\n         {\n             LOCK(cs_main);\n-            Misbehaving(pfrom->GetId(), 20);\n-            return error(\"message getdata size() = %u\", vInv.size());\n+            Misbehaving(pfrom->GetId(), 20, strprintf(\"message getdata size() = %u\", vInv.size()));\n+            return false;\n         }\n \n         LogPrint(BCLog::NET, \"received getdata (%u invsz) peer=%d\\n\", vInv.size(), pfrom->GetId());\n@@ -2323,9 +2325,8 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             int nDoS;\n             if (state.IsInvalid(nDoS)) {\n                 if (nDoS > 0) {\n-                    LogPrintf(\"Peer %d sent us invalid header via cmpctblock\\n\", pfrom->GetId());\n                     LOCK(cs_main);\n-                    Misbehaving(pfrom->GetId(), nDoS);\n+                    Misbehaving(pfrom->GetId(), nDoS, strprintf(\"Peer %d sent us invalid header via cmpctblock\\n\", pfrom->GetId()));\n                 } else {\n                     LogPrint(BCLog::NET, \"Peer %d sent us invalid header via cmpctblock\\n\", pfrom->GetId());\n                 }\n@@ -2411,8 +2412,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 ReadStatus status = partialBlock.InitData(cmpctblock, vExtraTxnForCompact);\n                 if (status == READ_STATUS_INVALID) {\n                     MarkBlockAsReceived(pindex->GetBlockHash()); // Reset in-flight state in case of whitelist\n-                    Misbehaving(pfrom->GetId(), 100);\n-                    LogPrintf(\"Peer %d sent us invalid compact block\\n\", pfrom->GetId());\n+                    Misbehaving(pfrom->GetId(), 100, strprintf(\"Peer %d sent us invalid compact block\\n\", pfrom->GetId()));\n                     return true;\n                 } else if (status == READ_STATUS_FAILED) {\n                     // Duplicate txindexes, the block is now in-flight, so just request it\n@@ -2539,8 +2539,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             ReadStatus status = partialBlock.FillBlock(*pblock, resp.txn);\n             if (status == READ_STATUS_INVALID) {\n                 MarkBlockAsReceived(resp.blockhash); // Reset in-flight state in case of whitelist\n-                Misbehaving(pfrom->GetId(), 100);\n-                LogPrintf(\"Peer %d sent us invalid compact block/non-matching block transactions\\n\", pfrom->GetId());\n+                Misbehaving(pfrom->GetId(), 100, strprintf(\"Peer %d sent us invalid compact block/non-matching block transactions\\n\", pfrom->GetId()));\n                 return true;\n             } else if (status == READ_STATUS_FAILED) {\n                 // Might have collided, fall back to getdata now :(\n@@ -2602,8 +2601,8 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         unsigned int nCount = ReadCompactSize(vRecv);\n         if (nCount > MAX_HEADERS_RESULTS) {\n             LOCK(cs_main);\n-            Misbehaving(pfrom->GetId(), 20);\n-            return error(\"headers message size = %u\", nCount);\n+            Misbehaving(pfrom->GetId(), 20, strprintf(\"headers message size = %u\", nCount));\n+            return false;\n         }\n         headers.resize(nCount);\n         for (unsigned int n = 0; n < nCount; n++) {"
      },
      {
        "sha": "b534ef01c345269742343eafea477f9810c1810e",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3a185a33b7bc09e4ca998f42f1f9aea8177ef8a/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3a185a33b7bc09e4ca998f42f1f9aea8177ef8a/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=d3a185a33b7bc09e4ca998f42f1f9aea8177ef8a",
        "patch": "@@ -79,6 +79,6 @@ struct CNodeStateStats {\n /** Get statistics from node state */\n bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats);\n /** Increase a node's misbehavior score. */\n-void Misbehaving(NodeId nodeid, int howmuch);\n+void Misbehaving(NodeId nodeid, int howmuch, const std::string& message=\"\");\n \n #endif // BITCOIN_NET_PROCESSING_H"
      }
    ]
  }
]