[
  {
    "sha": "002951a7a33eb92aa4472f2f6ae0408c6ebbae82",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMDI5NTFhN2EzM2ViOTJhYTQ0NzJmMmY2YWUwNDA4YzZlYmJhZTgy",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2014-12-17T16:49:18Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-03-05T07:55:17Z"
      },
      "message": "[RPC] fundrawtransaction basics",
      "tree": {
        "sha": "e35d1b728ac8fde886ed914c3e2311515159252c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e35d1b728ac8fde886ed914c3e2311515159252c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/002951a7a33eb92aa4472f2f6ae0408c6ebbae82",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/002951a7a33eb92aa4472f2f6ae0408c6ebbae82",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/002951a7a33eb92aa4472f2f6ae0408c6ebbae82",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/002951a7a33eb92aa4472f2f6ae0408c6ebbae82/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3dfcdf46c2c1a322b6649f04e8c9ca7636c5baf3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3dfcdf46c2c1a322b6649f04e8c9ca7636c5baf3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3dfcdf46c2c1a322b6649f04e8c9ca7636c5baf3"
      }
    ],
    "stats": {
      "total": 155,
      "additions": 145,
      "deletions": 10
    },
    "files": [
      {
        "sha": "a0f25b58b3e90b08c82086d92a6de79d3629d3ee",
        "filename": "qa/pull-tester/rpc-tests.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/002951a7a33eb92aa4472f2f6ae0408c6ebbae82/qa/pull-tester/rpc-tests.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/002951a7a33eb92aa4472f2f6ae0408c6ebbae82/qa/pull-tester/rpc-tests.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.sh?ref=002951a7a33eb92aa4472f2f6ae0408c6ebbae82",
        "patch": "@@ -27,6 +27,7 @@ testScripts=(\n     'mempool_coinbase_spends.py'\n     'httpbasics.py'\n     'zapwallettxes.py'\n+    'rawtransactions.py'\n #    'forknotify.py'\n );\n if [ \"x${ENABLE_BITCOIND}${ENABLE_UTILS}${ENABLE_WALLET}\" = \"x111\" ]; then"
      },
      {
        "sha": "2e20a5d89ead4bed53ef0019a02583d3d7e21444",
        "filename": "qa/rpc-tests/rawtransactions.py",
        "status": "added",
        "additions": 52,
        "deletions": 0,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/002951a7a33eb92aa4472f2f6ae0408c6ebbae82/qa/rpc-tests/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/002951a7a33eb92aa4472f2f6ae0408c6ebbae82/qa/rpc-tests/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rawtransactions.py?ref=002951a7a33eb92aa4472f2f6ae0408c6ebbae82",
        "patch": "@@ -0,0 +1,52 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test re-org scenarios with a mempool that contains transactions\n+# that spend (directly or indirectly) coinbase transactions.\n+#\n+\n+from test_framework import BitcoinTestFramework\n+from util import *\n+\n+# Create one-input, one-output, no-fee transaction:\n+class RawTransactionsTest(BitcoinTestFramework):\n+    \n+    def run_test(self):\n+        \n+        newAddr = self.nodes[2].getnewaddress()\n+        \n+        inputs = []\n+        outputs = { newAddr : 10 }\n+        rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n+        rawtxfund = self.nodes[0].fundrawtransaction(rawtx)\n+        dec_rawtxfund = self.nodes[0].decoderawtransaction(rawtxfund['hex'])\n+        \n+        assert_equal(len(dec_rawtxfund['vin']), 1)\n+        assert_equal(len(dec_rawtxfund['vout']), 2)\n+        assert_equal(rawtxfund['fee'] > 0, True)\n+        assert_equal(dec_rawtxfund['vin'][0]['scriptSig']['hex'], '')\n+        \n+        rawtxfundsigned = self.nodes[0].signrawtransaction(rawtxfund['hex'])\n+        dec_rawtxfundsigned = self.nodes[0].decoderawtransaction(rawtxfundsigned['hex'])\n+        \n+        assert_equal(len(dec_rawtxfundsigned['vin'][0]['scriptSig']['hex']) > 20, True)\n+        \n+        \n+        listunspent = self.nodes[2].listunspent()\n+        inputs = [{'txid' : listunspent[0]['txid'], 'vout' : listunspent[0]['vout']}]\n+        outputs = { newAddr : 10 }\n+        rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n+        aException = False\n+        try:\n+            rawtxfund = self.nodes[0].fundrawtransaction(rawtx)\n+        except JSONRPCException,e:\n+            aException = True\n+\n+        assert_equal(aException, True)\n+        \n+\n+if __name__ == '__main__':\n+    RawTransactionsTest().main()"
      },
      {
        "sha": "87fd1c6dad6f0bc87d60776f41816955ae5bc686",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/002951a7a33eb92aa4472f2f6ae0408c6ebbae82/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/002951a7a33eb92aa4472f2f6ae0408c6ebbae82/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=002951a7a33eb92aa4472f2f6ae0408c6ebbae82",
        "patch": "@@ -264,8 +264,9 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n         std::string strFailReason;\n \n         CWalletTx *newTx = transaction.getTransaction();\n+        CMutableTransaction newMTx;\n         CReserveKey *keyChange = transaction.getPossibleKeyChange();\n-        bool fCreated = wallet->CreateTransaction(vecSend, *newTx, *keyChange, nFeeRequired, strFailReason, coinControl);\n+        bool fCreated = wallet->CreateTransaction(vecSend, *newTx, newMTx, *keyChange, nFeeRequired, strFailReason, coinControl);\n         transaction.setTransactionFee(nFeeRequired);\n \n         if(!fCreated)"
      },
      {
        "sha": "2003ab05fd05554147b487f73b64b7d17a6d1e88",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/002951a7a33eb92aa4472f2f6ae0408c6ebbae82/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/002951a7a33eb92aa4472f2f6ae0408c6ebbae82/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=002951a7a33eb92aa4472f2f6ae0408c6ebbae82",
        "patch": "@@ -74,6 +74,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"signrawtransaction\", 1 },\n     { \"signrawtransaction\", 2 },\n     { \"sendrawtransaction\", 1 },\n+    { \"fundrawtransaction\", 1 },\n     { \"gettxout\", 1 },\n     { \"gettxout\", 2 },\n     { \"lockunspent\", 0 },"
      },
      {
        "sha": "62da84fdda4882723a4f89ceb70f0b651fda6a91",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 0,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/002951a7a33eb92aa4472f2f6ae0408c6ebbae82/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/002951a7a33eb92aa4472f2f6ae0408c6ebbae82/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=002951a7a33eb92aa4472f2f6ae0408c6ebbae82",
        "patch": "@@ -766,3 +766,57 @@ Value sendrawtransaction(const Array& params, bool fHelp)\n \n     return hashTx.GetHex();\n }\n+\n+#ifdef ENABLE_WALLET\n+Value fundrawtransaction(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+                            \"fundrawtransaction \\\"hexstring\\\"\\n\"\n+                            \"\\nAdd vIns to a raw transaction.\\n\"\n+                            \"\\nAlso see createrawtransaction and signrawtransaction calls.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"hexstring\\\"    (string, required) The hex string of the raw transaction\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"hex\\\": \\\"value\\\",   (string) The raw transaction with vIns (hex-encoded string)\\n\"\n+                            \"  \\\"fee\\\": n       calculated fee\\n\"\n+                            \"}\\n\"\n+                            \"\\\"hex\\\"             \\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nCreate a transaction with empty vIns\\n\"\n+                            + HelpExampleCli(\"createrawtransaction\", \"\\\"[]\\\" \\\"{\\\\\\\"myaddress\\\\\\\":0.01}\\\"\") +\n+                            \"\\nFund the transaction, and get back the hex\\n\"\n+                            + HelpExampleCli(\"fundrawtransaction\", \"\\\"myhex\\\"\") +\n+                            \"\\nSign the transaction, and get back the hex\\n\"\n+                            + HelpExampleCli(\"signrawtransaction\", \"\\\"myhex\\\"\") +\n+                            \"\\nSend the transaction (signed hex)\\n\"\n+                            + HelpExampleCli(\"sendrawtransaction\", \"\\\"signedhex\\\"\") +\n+                            \"\\nAs a json rpc call\\n\"\n+                            + HelpExampleRpc(\"sendrawtransaction\", \"\\\"signedhex\\\"\")\n+                            );\n+    \n+    RPCTypeCheck(params, list_of(str_type)(bool_type));\n+    \n+    // parse hex string from parameter\n+    CTransaction tx;\n+    if (!DecodeHexTx(tx, params[0].get_str()))\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+    \n+    if (tx.vin.size() > 0)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"fundrawtransaction only supports transactions with zero exiting vins\");\n+    \n+    CMutableTransaction txNew;\n+    CAmount nFeeRet;\n+    string strFailReason;\n+    if(!pwalletMain->FundTransaction(tx, txNew, nFeeRet, strFailReason))\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, strFailReason);\n+    \n+    Object result;\n+    result.push_back(Pair(\"hex\", EncodeHexTx(txNew)));\n+    result.push_back(Pair(\"fee\", nFeeRet));\n+\n+    return result;\n+}\n+\n+#endif"
      },
      {
        "sha": "42e26b7b2af9e2ee03c99cf9d95dac0cad23cb68",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/002951a7a33eb92aa4472f2f6ae0408c6ebbae82/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/002951a7a33eb92aa4472f2f6ae0408c6ebbae82/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=002951a7a33eb92aa4472f2f6ae0408c6ebbae82",
        "patch": "@@ -321,7 +321,9 @@ static const CRPCCommand vRPCCommands[] =\n     { \"rawtransactions\",    \"getrawtransaction\",      &getrawtransaction,      true,      false },\n     { \"rawtransactions\",    \"sendrawtransaction\",     &sendrawtransaction,     false,     false },\n     { \"rawtransactions\",    \"signrawtransaction\",     &signrawtransaction,     false,     false }, /* uses wallet if enabled */\n-\n+#ifdef ENABLE_WALLET\n+    { \"rawtransactions\",    \"fundrawtransaction\",     &fundrawtransaction,     false,     false },\n+#endif\n     /* Utility functions */\n     { \"util\",               \"createmultisig\",         &createmultisig,         true,      false },\n     { \"util\",               \"validateaddress\",        &validateaddress,        true,      false }, /* uses wallet if enabled */"
      },
      {
        "sha": "3a31b37a817dd29130357bf544e1086a38ec3a29",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/002951a7a33eb92aa4472f2f6ae0408c6ebbae82/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/002951a7a33eb92aa4472f2f6ae0408c6ebbae82/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=002951a7a33eb92aa4472f2f6ae0408c6ebbae82",
        "patch": "@@ -215,6 +215,7 @@ extern json_spirit::Value listlockunspent(const json_spirit::Array& params, bool\n extern json_spirit::Value createrawtransaction(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value decoderawtransaction(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value decodescript(const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value fundrawtransaction(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value signrawtransaction(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value sendrawtransaction(const json_spirit::Array& params, bool fHelp);\n "
      },
      {
        "sha": "83003d9fb4a6ec94917fe3f316d7c63d890b07d8",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/002951a7a33eb92aa4472f2f6ae0408c6ebbae82/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/002951a7a33eb92aa4472f2f6ae0408c6ebbae82/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=002951a7a33eb92aa4472f2f6ae0408c6ebbae82",
        "patch": "@@ -919,7 +919,8 @@ Value sendmany(const Array& params, bool fHelp)\n     CReserveKey keyChange(pwalletMain);\n     CAmount nFeeRequired = 0;\n     string strFailReason;\n-    bool fCreated = pwalletMain->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired, strFailReason);\n+    CMutableTransaction newTx;\n+    bool fCreated = pwalletMain->CreateTransaction(vecSend, wtx, newTx, keyChange, nFeeRequired, strFailReason);\n     if (!fCreated)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, strFailReason);\n     if (!pwalletMain->CommitTransaction(wtx, keyChange))"
      },
      {
        "sha": "ece8463b39c559920e401dd24f9fff471b263278",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 5,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/002951a7a33eb92aa4472f2f6ae0408c6ebbae82/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/002951a7a33eb92aa4472f2f6ae0408c6ebbae82/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=002951a7a33eb92aa4472f2f6ae0408c6ebbae82",
        "patch": "@@ -1550,10 +1550,23 @@ bool CWallet::SelectCoins(const CAmount& nTargetValue, set<pair<const CWalletTx*\n }\n \n \n-\n+bool CWallet::FundTransaction(const CTransaction& txToFund, CMutableTransaction& txNew, CAmount &nFeeRet, std::string& strFailReason)\n+{\n+    \n+    vector<pair<CScript, CAmount> > vecSend;\n+    \n+    BOOST_FOREACH (const CTxOut& out, txToFund.vout)\n+    {\n+        vecSend.push_back(make_pair(out.scriptPubKey, out.nValue));\n+    }\n+    \n+    CReserveKey reservekey(this);\n+    CWalletTx wtx;\n+    return CreateTransaction(vecSend, wtx, txNew, reservekey, nFeeRet, strFailReason, NULL, false);\n+}\n \n bool CWallet::CreateTransaction(const vector<pair<CScript, CAmount> >& vecSend,\n-                                CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl* coinControl)\n+                                CWalletTx& wtxNew, CMutableTransaction& txNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl* coinControl, bool sign)\n {\n     CAmount nValue = 0;\n     BOOST_FOREACH (const PAIRTYPE(CScript, CAmount)& s, vecSend)\n@@ -1573,7 +1586,6 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, CAmount> >& vecSend,\n \n     wtxNew.fTimeReceivedIsTxTime = true;\n     wtxNew.BindWallet(this);\n-    CMutableTransaction txNew;\n \n     // Discourage fee sniping.\n     //\n@@ -1720,6 +1732,14 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, CAmount> >& vecSend,\n                     strFailReason = _(\"Transaction too large\");\n                     return false;\n                 }\n+                \n+                //remove signature if we used the signing only for the fee calculation\n+                if(!sign)\n+                {\n+                    BOOST_FOREACH (CTxIn& vin, txNew.vin)\n+                        vin.scriptSig = CScript();\n+                }\n+                \n                 dPriority = wtxNew.ComputePriority(dPriority, nBytes);\n \n                 // Can we complete this as a free transaction?\n@@ -1759,11 +1779,12 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, CAmount> >& vecSend,\n }\n \n bool CWallet::CreateTransaction(CScript scriptPubKey, const CAmount& nValue,\n-                                CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl* coinControl)\n+                                CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl* coinControl, bool sign)\n {\n     vector< pair<CScript, CAmount> > vecSend;\n     vecSend.push_back(make_pair(scriptPubKey, nValue));\n-    return CreateTransaction(vecSend, wtxNew, reservekey, nFeeRet, strFailReason, coinControl);\n+    CMutableTransaction txNew;\n+    return CreateTransaction(vecSend, wtxNew, txNew, reservekey, nFeeRet, strFailReason, coinControl, sign);\n }\n \n /**"
      },
      {
        "sha": "1aa590528ec900f43fd5199b6491a8d5a57827a8",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/002951a7a33eb92aa4472f2f6ae0408c6ebbae82/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/002951a7a33eb92aa4472f2f6ae0408c6ebbae82/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=002951a7a33eb92aa4472f2f6ae0408c6ebbae82",
        "patch": "@@ -611,10 +611,11 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     CAmount GetWatchOnlyBalance() const;\n     CAmount GetUnconfirmedWatchOnlyBalance() const;\n     CAmount GetImmatureWatchOnlyBalance() const;\n+    bool FundTransaction(const CTransaction& txToFund, CMutableTransaction& txNew, CAmount& nFeeRet, std::string& strFailReason);\n     bool CreateTransaction(const std::vector<std::pair<CScript, CAmount> >& vecSend,\n-                           CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl *coinControl = NULL);\n+                           CWalletTx& wtxNew, CMutableTransaction& txNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = false);\n     bool CreateTransaction(CScript scriptPubKey, const CAmount& nValue,\n-                           CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl *coinControl = NULL);\n+                           CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = false);\n     bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);\n \n     static CFeeRate minTxFee;"
      }
    ]
  },
  {
    "sha": "a98e7fe77140c9d40fc4b621690f8e106ab2a12f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOThlN2ZlNzcxNDBjOWQ0MGZjNGI2MjE2OTBmOGUxMDZhYjJhMTJm",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2014-12-20T20:49:31Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-03-05T07:55:17Z"
      },
      "message": "[RPC] add support for existing vins for `fundrawtransaction`",
      "tree": {
        "sha": "4972454c8df212495c190cb4932b010e7f200576",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4972454c8df212495c190cb4932b010e7f200576"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a98e7fe77140c9d40fc4b621690f8e106ab2a12f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a98e7fe77140c9d40fc4b621690f8e106ab2a12f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a98e7fe77140c9d40fc4b621690f8e106ab2a12f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a98e7fe77140c9d40fc4b621690f8e106ab2a12f/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "002951a7a33eb92aa4472f2f6ae0408c6ebbae82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/002951a7a33eb92aa4472f2f6ae0408c6ebbae82",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/002951a7a33eb92aa4472f2f6ae0408c6ebbae82"
      }
    ],
    "stats": {
      "total": 372,
      "additions": 333,
      "deletions": 39
    },
    "files": [
      {
        "sha": "d4ad2816510df0e758056f30a2699dd72f45b73b",
        "filename": "qa/rpc-tests/rawtransactions.py",
        "status": "modified",
        "additions": 256,
        "deletions": 21,
        "changes": 277,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a98e7fe77140c9d40fc4b621690f8e106ab2a12f/qa/rpc-tests/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a98e7fe77140c9d40fc4b621690f8e106ab2a12f/qa/rpc-tests/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rawtransactions.py?ref=a98e7fe77140c9d40fc4b621690f8e106ab2a12f",
        "patch": "@@ -10,42 +10,277 @@\n \n from test_framework import BitcoinTestFramework\n from util import *\n+from pprint import pprint\n+from time import sleep\n \n # Create one-input, one-output, no-fee transaction:\n class RawTransactionsTest(BitcoinTestFramework):\n     \n+    def setup_chain(self):\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n+        initialize_chain_clean(self.options.tmpdir, 3)\n+\n+    def setup_network(self, split=False):\n+        self.nodes = start_nodes(3, self.options.tmpdir)\n+\n+        # connect to a local machine for debugging\n+        # url = \"http://bitcoinrpc:DP6DvqZtqXarpeNWyN3LZTFchCCyCUuHwNF7E8pX99x1@%s:%d\" % ('127.0.0.1', 18332)\n+        # proxy = AuthServiceProxy(url)\n+        # proxy.url = url # store URL on proxy for info\n+        # self.nodes.append(proxy)\n+        \n+        connect_nodes_bi(self.nodes,0,1)\n+        connect_nodes_bi(self.nodes,1,2)\n+        connect_nodes_bi(self.nodes,0,2)\n+        \n+        self.is_network_split=False\n+        self.sync_all()\n+    \n     def run_test(self):\n         \n-        newAddr = self.nodes[2].getnewaddress()\n+        self.nodes[2].setgenerate(True, 1)\n+        self.nodes[0].setgenerate(True, 101)\n+        self.sync_all()\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5);\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0);\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0);\n+        self.sync_all()\n+        self.nodes[0].setgenerate(True, 1)\n+        self.sync_all()\n+\n+        ###############\n+        # simple test #\n+        ###############\n+        inputs  = [ ]\n+        outputs = { self.nodes[0].getnewaddress() : 1.0 }\n+        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n+\n+        rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n+        fee = rawtxfund['fee']\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n+        totalOut = 0\n+        for out in dec_tx['vout']:\n+            totalOut += out['value']        \n         \n-        inputs = []\n-        outputs = { newAddr : 10 }\n-        rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        rawtxfund = self.nodes[0].fundrawtransaction(rawtx)\n-        dec_rawtxfund = self.nodes[0].decoderawtransaction(rawtxfund['hex'])\n+        assert_equal(len(dec_tx['vin']), 1) #one vin coin\n+        assert_equal(fee*0.00000001+float(totalOut), 1.5) #the 1.5BTC coin must be taken\n         \n-        assert_equal(len(dec_rawtxfund['vin']), 1)\n-        assert_equal(len(dec_rawtxfund['vout']), 2)\n-        assert_equal(rawtxfund['fee'] > 0, True)\n-        assert_equal(dec_rawtxfund['vin'][0]['scriptSig']['hex'], '')\n+        ##############################\n+        # simple test with two coins #\n+        ##############################\n+        inputs  = [ ]\n+        outputs = { self.nodes[0].getnewaddress() : 2.2 }\n+        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n+\n+        rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n+        fee = rawtxfund['fee']\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n+        totalOut = 0\n+        for out in dec_tx['vout']:\n+            totalOut += out['value']        \n+        \n+        assert_equal(len(dec_tx['vin']), 2) #one vin coin\n+        assert_equal(fee*0.00000001+float(totalOut), 2.5) #the 1.5BTC+1.0BTC coins must have be taken\n+        \n+        ##############################\n+        # simple test with two coins #\n+        ##############################\n+        inputs  = [ ]\n+        outputs = { self.nodes[0].getnewaddress() : 2.6 }\n+        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n+\n+        rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n+        fee = rawtxfund['fee']\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n+        totalOut = 0\n+        for out in dec_tx['vout']:\n+            totalOut += out['value']        \n+        \n+        assert_equal(len(dec_tx['vin']), 1) #one vin coin\n+        assert_equal(fee*0.00000001+float(totalOut), 5.0) #the 5.0BTC coin must have be taken\n         \n-        rawtxfundsigned = self.nodes[0].signrawtransaction(rawtxfund['hex'])\n-        dec_rawtxfundsigned = self.nodes[0].decoderawtransaction(rawtxfundsigned['hex'])\n         \n-        assert_equal(len(dec_rawtxfundsigned['vin'][0]['scriptSig']['hex']) > 20, True)\n+        ################################\n+        # simple test with two outputs #\n+        ################################\n+        inputs  = [ ]\n+        outputs = { self.nodes[0].getnewaddress() : 2.6, self.nodes[1].getnewaddress() : 2.5 }\n+        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n+\n+        rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n+        fee = rawtxfund['fee']\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n+        totalOut = 0\n+        for out in dec_tx['vout']:\n+            totalOut += out['value']        \n         \n+        assert_equal(len(dec_tx['vin']), 2) #one vin coin\n+        assert_equal(fee*0.00000001+float(totalOut), 6.0) #the 5.0BTC + 1.0BTC coins must have be taken\n         \n+\n+        \n+        #########################################################################\n+        # test a fundrawtransaction with a VIN greater than the required amount #\n+        #########################################################################\n+        utx = False\n+        listunspent = self.nodes[2].listunspent()\n+        for aUtx in listunspent:\n+            if aUtx['amount'] == 5.0:\n+                utx = aUtx\n+                break;\n+\n+        assert_equal(utx!=False, True)\n+        \n+        inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']}]\n+        outputs = { self.nodes[0].getnewaddress() : 1.0 }\n+        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n+        assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n+\n+        rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n+        fee = rawtxfund['fee']\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n+        totalOut = 0\n+        for out in dec_tx['vout']:\n+            totalOut += out['value']        \n+            \n+        assert_equal(fee*0.00000001+float(totalOut), utx['amount']) #compare vin total and totalout+fee\n+        \n+        \n+        #########################################################################\n+        # test a fundrawtransaction with a VIN smaller than the required amount #\n+        #########################################################################\n+        utx = False\n         listunspent = self.nodes[2].listunspent()\n-        inputs = [{'txid' : listunspent[0]['txid'], 'vout' : listunspent[0]['vout']}]\n-        outputs = { newAddr : 10 }\n-        rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        aException = False\n+        for aUtx in listunspent:\n+            if aUtx['amount'] == 1.0:\n+                utx = aUtx\n+                break;\n+\n+        assert_equal(utx!=False, True)\n+        \n+        inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']}]\n+        outputs = { self.nodes[0].getnewaddress() : 1.0 }\n+        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n+        assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n+\n+        rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n+        fee = rawtxfund['fee']\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n+        totalOut = 0\n+        matchingOuts = 0\n+        for out in dec_tx['vout']:\n+            totalOut += out['value']\n+            if outputs.has_key(out['scriptPubKey']['addresses'][0]):\n+                matchingOuts+=1      \n+        \n+        assert_equal(matchingOuts, 1)\n+        assert_equal(len(dec_tx['vout']), 2)\n+            \n+        assert_equal(fee*0.00000001+float(totalOut), 2.5) #this tx must use the 1.0BTC and the 1.5BTC coin\n+        \n+        \n+        ###########################################\n+        # test a fundrawtransaction with two VINs #\n+        ###########################################\n+        utx  = False\n+        utx2 = False \n+        listunspent = self.nodes[2].listunspent()\n+        for aUtx in listunspent:\n+            if aUtx['amount'] == 1.0:\n+                utx = aUtx\n+            if aUtx['amount'] == 5.0:\n+                utx2 = aUtx\n+\n+\n+        assert_equal(utx!=False, True)\n+        \n+        inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']},{'txid' : utx2['txid'], 'vout' : utx2['vout']} ]\n+        outputs = { self.nodes[0].getnewaddress() : 6.0 }\n+        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n+        assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n+\n+        rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n+        fee = rawtxfund['fee']\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n+        totalOut = 0\n+        matchingOuts = 0\n+        for out in dec_tx['vout']:\n+            totalOut += out['value']\n+            if outputs.has_key(out['scriptPubKey']['addresses'][0]):\n+                matchingOuts+=1      \n+        \n+        assert_equal(matchingOuts, 1)\n+        assert_equal(len(dec_tx['vout']), 2)\n+        \n+        matchingIns = 0\n+        for vinOut in dec_tx['vin']:\n+            for vinIn in inputs:\n+                if vinIn['txid'] == vinOut['txid']:\n+                    matchingIns+=1\n+        \n+        assert_equal(matchingIns, 2) #we now must see two vins identical to vins given as params\n+        assert_equal(fee*0.00000001+float(totalOut), 7.5) #this tx must use the 1.0BTC and the 1.5BTC coin\n+        \n+        \n+        #########################################################\n+        # test a fundrawtransaction with two VINs and two vOUTs #\n+        #########################################################\n+        utx  = False\n+        utx2 = False \n+        listunspent = self.nodes[2].listunspent()\n+        for aUtx in listunspent:\n+            if aUtx['amount'] == 1.0:\n+                utx = aUtx\n+            if aUtx['amount'] == 5.0:\n+                utx2 = aUtx\n+\n+\n+        assert_equal(utx!=False, True)\n+        \n+        inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']},{'txid' : utx2['txid'], 'vout' : utx2['vout']} ]\n+        outputs = { self.nodes[0].getnewaddress() : 6.0, self.nodes[0].getnewaddress() : 1.0 }\n+        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n+        assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n+\n+        rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n+        fee = rawtxfund['fee']\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n+        totalOut = 0\n+        matchingOuts = 0\n+        for out in dec_tx['vout']:\n+            totalOut += out['value']\n+            if outputs.has_key(out['scriptPubKey']['addresses'][0]):\n+                matchingOuts+=1\n+        \n+        assert_equal(matchingOuts, 2)\n+        assert_equal(len(dec_tx['vout']), 3)\n+        assert_equal(fee*0.00000001+float(totalOut), 7.5) #this tx must use the 1.0BTC and the 1.5BTC coin\n+        \n+        \n+        ##############################################\n+        # test a fundrawtransaction with invalid vin #\n+        ##############################################\n+        listunspent = self.nodes[2].listunspent()\n+        inputs  = [ {'txid' : \"1c7f966dab21119bac53213a2bc7532bff1fa844c124fd750a7d0b1332440bd1\", 'vout' : 0} ] #invalid vin!\n+        outputs = { self.nodes[0].getnewaddress() : 1.0}\n+        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n+        \n+        errorString = \"\"\n         try:\n-            rawtxfund = self.nodes[0].fundrawtransaction(rawtx)\n+            rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n         except JSONRPCException,e:\n-            aException = True\n-\n-        assert_equal(aException, True)\n+            errorString = e.error['message']\n+        \n+        assert_equal(\"Insufficient\" in errorString, True);\n         \n \n if __name__ == '__main__':"
      },
      {
        "sha": "7c2dde1677a5ddb8b6f935233efccb17f46087f5",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a98e7fe77140c9d40fc4b621690f8e106ab2a12f/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a98e7fe77140c9d40fc4b621690f8e106ab2a12f/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=a98e7fe77140c9d40fc4b621690f8e106ab2a12f",
        "patch": "@@ -803,9 +803,6 @@ Value fundrawtransaction(const Array& params, bool fHelp)\n     if (!DecodeHexTx(tx, params[0].get_str()))\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n     \n-    if (tx.vin.size() > 0)\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"fundrawtransaction only supports transactions with zero exiting vins\");\n-    \n     CMutableTransaction txNew;\n     CAmount nFeeRet;\n     string strFailReason;"
      },
      {
        "sha": "5e3200bda4a04fa92e6240a017b82182c5de1fa2",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 72,
        "deletions": 12,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a98e7fe77140c9d40fc4b621690f8e106ab2a12f/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a98e7fe77140c9d40fc4b621690f8e106ab2a12f/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=a98e7fe77140c9d40fc4b621690f8e106ab2a12f",
        "patch": "@@ -1526,47 +1526,106 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int\n     return true;\n }\n \n-bool CWallet::SelectCoins(const CAmount& nTargetValue, set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet, const CCoinControl* coinControl) const\n+bool CWallet::SelectCoins(const CAmount& nTargetValue, set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet, vector<CTxIn> vPresetVINs, const CCoinControl* coinControl) const\n {\n     vector<COutput> vCoins;\n     AvailableCoins(vCoins, true, coinControl);\n-\n+    \n+    // create a empty set to store possible VINS\n+    set<pair<const CWalletTx*,unsigned int> > setTempCoins;\n+    CAmount nValueTroughVINs = 0;\n+    \n     // coin control -> return all selected outputs (we want all selected to go into the transaction for sure)\n     if (coinControl && coinControl->HasSelected())\n     {\n         BOOST_FOREACH(const COutput& out, vCoins)\n         {\n-            if(!out.fSpendable)\n-                continue;\n+            if (!out.fSpendable)\n+                 continue;\n             nValueRet += out.tx->vout[out.i].nValue;\n             setCoinsRet.insert(make_pair(out.tx, out.i));\n         }\n         return (nValueRet >= nTargetValue);\n     }\n+    \n+    // fill up the tx with possible predefined VINs\n+    BOOST_FOREACH(const CTxIn& txin, vPresetVINs)\n+    {\n+        bool vinOk = false;\n+        // search for VIN in available coins\n+        for (vector<COutput>::iterator it = vCoins.begin() ; it != vCoins.end();)\n+        {\n+            const COutput& out = *it;\n+            if (out.tx->GetHash() == txin.prevout.hash && txin.prevout.n == (uint32_t)out.i)\n+            {\n+                if (!out.fSpendable)\n+                    continue;\n+                \n+                nValueTroughVINs    += out.tx->vout[out.i].nValue;\n+                \n+                // temporary keep the coin to add them later after SelectCoinsMinConf has added some\n+                setTempCoins.insert(make_pair(out.tx, out.i));\n+                vinOk = true;\n+                \n+                // remove the coins from available coins vector to avoid double use because of a upcomming SelectCoinsMinConf\n+                it = vCoins.erase(it);\n+            }\n+            else\n+                ++it;\n+        }\n+        \n+        if (!vinOk)\n+            return false; // if vin was not an available coin, cancel (will return \"Insufficient funds\")\n+    }\n \n-    return (SelectCoinsMinConf(nTargetValue, 1, 6, vCoins, setCoinsRet, nValueRet) ||\n-            SelectCoinsMinConf(nTargetValue, 1, 1, vCoins, setCoinsRet, nValueRet) ||\n-            (bSpendZeroConfChange && SelectCoinsMinConf(nTargetValue, 0, 1, vCoins, setCoinsRet, nValueRet)));\n+    bool state = true;\n+    \n+    // only select further coins if we need to\n+    if (nTargetValue-nValueTroughVINs > 0)\n+        state = (SelectCoinsMinConf(nTargetValue-nValueTroughVINs, 1, 6, vCoins, setCoinsRet, nValueRet) ||\n+            SelectCoinsMinConf(nTargetValue-nValueTroughVINs, 1, 1, vCoins, setCoinsRet, nValueRet) ||\n+            (bSpendZeroConfChange && SelectCoinsMinConf(nTargetValue-nValueTroughVINs, 0, 1, vCoins, setCoinsRet, nValueRet)));\n+    \n+    // because SelectCoinsMinConf clears the setCoinsRet, we now add the possible VINs to the coinset\n+    setCoinsRet.insert(setTempCoins.begin(), setTempCoins.end());\n+    \n+    // increase return value due of possible vins\n+    nValueRet+=nValueTroughVINs;\n+    \n+    return state;\n }\n \n \n bool CWallet::FundTransaction(const CTransaction& txToFund, CMutableTransaction& txNew, CAmount &nFeeRet, std::string& strFailReason)\n {\n     \n     vector<pair<CScript, CAmount> > vecSend;\n+    vector<CTxIn> vin;\n     \n-    BOOST_FOREACH (const CTxOut& out, txToFund.vout)\n+    BOOST_FOREACH (const CTxOut& txOut, txToFund.vout)\n     {\n-        vecSend.push_back(make_pair(out.scriptPubKey, out.nValue));\n+        vecSend.push_back(make_pair(txOut.scriptPubKey, txOut.nValue));\n+    }\n+    \n+    BOOST_FOREACH (const CTxIn& txIn, txToFund.vin)\n+    {\n+        vin.push_back(txIn);\n     }\n     \n     CReserveKey reservekey(this);\n     CWalletTx wtx;\n-    return CreateTransaction(vecSend, wtx, txNew, reservekey, nFeeRet, strFailReason, NULL, false);\n+    return CreateTransaction(vecSend, vin, wtx, txNew, reservekey, nFeeRet, strFailReason, NULL, false);\n }\n \n bool CWallet::CreateTransaction(const vector<pair<CScript, CAmount> >& vecSend,\n                                 CWalletTx& wtxNew, CMutableTransaction& txNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl* coinControl, bool sign)\n+{\n+    vector<CTxIn> vINs;\n+    return CreateTransaction(vecSend, vINs, wtxNew, txNew, reservekey, nFeeRet, strFailReason, coinControl, sign);\n+}\n+\n+bool CWallet::CreateTransaction(const vector<pair<CScript, CAmount> >& vecSend, const vector<CTxIn> vINs,\n+                                CWalletTx& wtxNew, CMutableTransaction& txNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl* coinControl, bool sign)\n {\n     CAmount nValue = 0;\n     BOOST_FOREACH (const PAIRTYPE(CScript, CAmount)& s, vecSend)\n@@ -1636,7 +1695,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, CAmount> >& vecSend,\n                 // Choose coins to use\n                 set<pair<const CWalletTx*,unsigned int> > setCoins;\n                 CAmount nValueIn = 0;\n-                if (!SelectCoins(nTotalValue, setCoins, nValueIn, coinControl))\n+                if (!SelectCoins(nTotalValue, setCoins, nValueIn, vINs, coinControl))\n                 {\n                     strFailReason = _(\"Insufficient funds\");\n                     return false;\n@@ -1784,7 +1843,8 @@ bool CWallet::CreateTransaction(CScript scriptPubKey, const CAmount& nValue,\n     vector< pair<CScript, CAmount> > vecSend;\n     vecSend.push_back(make_pair(scriptPubKey, nValue));\n     CMutableTransaction txNew;\n-    return CreateTransaction(vecSend, wtxNew, txNew, reservekey, nFeeRet, strFailReason, coinControl, sign);\n+    vector<CTxIn> vINs;\n+    return CreateTransaction(vecSend, vINs, wtxNew, txNew, reservekey, nFeeRet, strFailReason, coinControl, sign);\n }\n \n /**"
      },
      {
        "sha": "24b19dbcd4870380933f2efcb40858622fbb2626",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a98e7fe77140c9d40fc4b621690f8e106ab2a12f/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a98e7fe77140c9d40fc4b621690f8e106ab2a12f/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=a98e7fe77140c9d40fc4b621690f8e106ab2a12f",
        "patch": "@@ -433,7 +433,7 @@ class CWalletKey\n class CWallet : public CCryptoKeyStore, public CValidationInterface\n {\n private:\n-    bool SelectCoins(const CAmount& nTargetValue, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet, const CCoinControl *coinControl = NULL) const;\n+    bool SelectCoins(const CAmount& nTargetValue, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet, const std::vector<CTxIn> vPresetVINs, const CCoinControl *coinControl = NULL) const;\n \n     CWalletDB *pwalletdbEncryption;\n \n@@ -612,10 +612,12 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     CAmount GetUnconfirmedWatchOnlyBalance() const;\n     CAmount GetImmatureWatchOnlyBalance() const;\n     bool FundTransaction(const CTransaction& txToFund, CMutableTransaction& txNew, CAmount& nFeeRet, std::string& strFailReason);\n+    bool CreateTransaction(const std::vector<std::pair<CScript, CAmount> >& vecSend, const std::vector<CTxIn> vins,\n+                           CWalletTx& wtxNew, CMutableTransaction& txNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = true);\n     bool CreateTransaction(const std::vector<std::pair<CScript, CAmount> >& vecSend,\n-                           CWalletTx& wtxNew, CMutableTransaction& txNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = false);\n+                           CWalletTx& wtxNew, CMutableTransaction& txNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = true);\n     bool CreateTransaction(CScript scriptPubKey, const CAmount& nValue,\n-                           CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = false);\n+                           CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = true);\n     bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);\n \n     static CFeeRate minTxFee;"
      }
    ]
  },
  {
    "sha": "0fd9051f116e82d8fe25315e5ef9de2e7f27a0f0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZmQ5MDUxZjExNmU4MmQ4ZmUyNTMxNWU1ZWY5ZGUyZTdmMjdhMGYw",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2014-12-22T08:57:07Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-03-05T07:55:17Z"
      },
      "message": "[RPC] add simple unittest for `fundrawtransaction` (increase test coverage)",
      "tree": {
        "sha": "05a9c5bd0e995586cf9b3bc0137e53e0e26177ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/05a9c5bd0e995586cf9b3bc0137e53e0e26177ac"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0fd9051f116e82d8fe25315e5ef9de2e7f27a0f0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fd9051f116e82d8fe25315e5ef9de2e7f27a0f0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0fd9051f116e82d8fe25315e5ef9de2e7f27a0f0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fd9051f116e82d8fe25315e5ef9de2e7f27a0f0/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a98e7fe77140c9d40fc4b621690f8e106ab2a12f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a98e7fe77140c9d40fc4b621690f8e106ab2a12f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a98e7fe77140c9d40fc4b621690f8e106ab2a12f"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e18119ea3788bba6774bd29cb367590bf4d5fb41",
        "filename": "src/test/rpc_wallet_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fd9051f116e82d8fe25315e5ef9de2e7f27a0f0/src/test/rpc_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fd9051f116e82d8fe25315e5ef9de2e7f27a0f0/src/test/rpc_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_wallet_tests.cpp?ref=0fd9051f116e82d8fe25315e5ef9de2e7f27a0f0",
        "patch": "@@ -213,6 +213,12 @@ BOOST_AUTO_TEST_CASE(rpc_wallet)\n     Array arr = retValue.get_array();\n     BOOST_CHECK(arr.size() > 0);\n     BOOST_CHECK(CBitcoinAddress(arr[0].get_str()).Get() == demoAddress.Get());\n+    \n+    /*********************************\n+     * \t     fundrawtransaction\n+     *********************************/\n+    BOOST_CHECK_THROW(CallRPC(\"fundrawtransaction 28z\"), runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"fundrawtransaction 01000000000180969800000000001976a91450ce0a4b0ee0ddeb633da85199728b940ac3fe9488ac00000000\"), runtime_error);\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "10fd56204177cb51af2ec4fd589d392558b822db",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMGZkNTYyMDQxNzdjYjUxYWYyZWM0ZmQ1ODlkMzkyNTU4YjgyMmRi",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2014-12-27T19:51:57Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-03-05T07:55:17Z"
      },
      "message": "[RPC] fundrawtransaction overhaul\n\n- fix typo\n- fix RPCTypeCheck for fundrawtransaction",
      "tree": {
        "sha": "f7e1f8430605b812025b8ffd6b1858d732fb8618",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f7e1f8430605b812025b8ffd6b1858d732fb8618"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10fd56204177cb51af2ec4fd589d392558b822db",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10fd56204177cb51af2ec4fd589d392558b822db",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/10fd56204177cb51af2ec4fd589d392558b822db",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10fd56204177cb51af2ec4fd589d392558b822db/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0fd9051f116e82d8fe25315e5ef9de2e7f27a0f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fd9051f116e82d8fe25315e5ef9de2e7f27a0f0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0fd9051f116e82d8fe25315e5ef9de2e7f27a0f0"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "4c35894aef740252a07f416b4e175b168b5eae76",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10fd56204177cb51af2ec4fd589d392558b822db/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10fd56204177cb51af2ec4fd589d392558b822db/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=10fd56204177cb51af2ec4fd589d392558b822db",
        "patch": "@@ -796,7 +796,7 @@ Value fundrawtransaction(const Array& params, bool fHelp)\n                             + HelpExampleRpc(\"sendrawtransaction\", \"\\\"signedhex\\\"\")\n                             );\n     \n-    RPCTypeCheck(params, list_of(str_type)(bool_type));\n+    RPCTypeCheck(params, boost::assign::list_of(int_type)(int_type)(array_type));\n     \n     // parse hex string from parameter\n     CTransaction tx;"
      },
      {
        "sha": "b6cfe751a07432ca4782bd8e23ae06f612ad0027",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10fd56204177cb51af2ec4fd589d392558b822db/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10fd56204177cb51af2ec4fd589d392558b822db/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=10fd56204177cb51af2ec4fd589d392558b822db",
        "patch": "@@ -1563,7 +1563,7 @@ bool CWallet::SelectCoins(const CAmount& nTargetValue, set<pair<const CWalletTx*\n                 \n                 nValueTroughVINs    += out.tx->vout[out.i].nValue;\n                 \n-                // temporary keep the coin to add them later after SelectCoinsMinConf has added some\n+                // temporarily keep the coin to add them later after SelectCoinsMinConf has added some\n                 setTempCoins.insert(make_pair(out.tx, out.i));\n                 vinOk = true;\n                 "
      }
    ]
  },
  {
    "sha": "a3af4c1c116f09f64d3507c4143b9ec182ed10ee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphM2FmNGMxYzExNmYwOWY2NGQzNTA3YzQxNDNiOWVjMTgyZWQxMGVl",
    "commit": {
      "author": {
        "name": "Bryan Bishop",
        "email": "bryan@ledgerx.com",
        "date": "2014-12-21T17:18:27Z"
      },
      "committer": {
        "name": "Bryan Bishop",
        "email": "kanzure@gmail.com",
        "date": "2015-03-15T17:35:39Z"
      },
      "message": "Implement watchonly support in fundrawtransaction\n\nSupport watchonly in fundrawtransaction, CreateTransaction, SelectCoins\nand coin selection in general.\n\nCoin selection is exposed over RPC through fundrawtransaction, and\nwatchonly can be enabled by passing includeWatching true (defaults to\nfalse).\n\nfundrawtransaction will first attempt to fund a transaction without\nusing watchonly, even when includeWatching is enabled. When this fails,\nan includeWatching attempt is made.\n\nWhen an includeWatching attempt at coin selection is performed (in\nCreateTransaction), and all watchonlys are consumed leaving no funds\navailable for a fee, then CreateTransaction will not include a fee in\nthe transaction.\n\nAlso, includeWatching tests (for fundrawtransaction).\n\nSee also: https://github.com/bitcoin/bitcoin/pull/5503",
      "tree": {
        "sha": "49445280066a14ca0be2cc16b53871b47c76b200",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/49445280066a14ca0be2cc16b53871b47c76b200"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a3af4c1c116f09f64d3507c4143b9ec182ed10ee",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3af4c1c116f09f64d3507c4143b9ec182ed10ee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a3af4c1c116f09f64d3507c4143b9ec182ed10ee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3af4c1c116f09f64d3507c4143b9ec182ed10ee/comments",
    "author": {
      "login": "kanzure",
      "id": 101238,
      "node_id": "MDQ6VXNlcjEwMTIzOA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/101238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kanzure",
      "html_url": "https://github.com/kanzure",
      "followers_url": "https://api.github.com/users/kanzure/followers",
      "following_url": "https://api.github.com/users/kanzure/following{/other_user}",
      "gists_url": "https://api.github.com/users/kanzure/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kanzure/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kanzure/subscriptions",
      "organizations_url": "https://api.github.com/users/kanzure/orgs",
      "repos_url": "https://api.github.com/users/kanzure/repos",
      "events_url": "https://api.github.com/users/kanzure/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kanzure/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kanzure",
      "id": 101238,
      "node_id": "MDQ6VXNlcjEwMTIzOA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/101238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kanzure",
      "html_url": "https://github.com/kanzure",
      "followers_url": "https://api.github.com/users/kanzure/followers",
      "following_url": "https://api.github.com/users/kanzure/following{/other_user}",
      "gists_url": "https://api.github.com/users/kanzure/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kanzure/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kanzure/subscriptions",
      "organizations_url": "https://api.github.com/users/kanzure/orgs",
      "repos_url": "https://api.github.com/users/kanzure/repos",
      "events_url": "https://api.github.com/users/kanzure/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kanzure/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "10fd56204177cb51af2ec4fd589d392558b822db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10fd56204177cb51af2ec4fd589d392558b822db",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/10fd56204177cb51af2ec4fd589d392558b822db"
      }
    ],
    "stats": {
      "total": 138,
      "additions": 104,
      "deletions": 34
    },
    "files": [
      {
        "sha": "f3707c76d19cb34f4c5decb124b57ad4f1cfbeb1",
        "filename": "qa/rpc-tests/rawtransactions.py",
        "status": "modified",
        "additions": 38,
        "deletions": 2,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3af4c1c116f09f64d3507c4143b9ec182ed10ee/qa/rpc-tests/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3af4c1c116f09f64d3507c4143b9ec182ed10ee/qa/rpc-tests/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rawtransactions.py?ref=a3af4c1c116f09f64d3507c4143b9ec182ed10ee",
        "patch": "@@ -35,17 +35,26 @@ def setup_network(self, split=False):\n         \n         self.is_network_split=False\n         self.sync_all()\n-    \n+\n     def run_test(self):\n         \n         self.nodes[2].setgenerate(True, 1)\n-        self.nodes[0].setgenerate(True, 101)\n+        self.nodes[0].setgenerate(True, 121)\n         self.sync_all()\n+\n+        watchonly_address = self.nodes[0].getnewaddress()\n+        watchonly_amount = 200\n+        self.nodes[1].importaddress(watchonly_address, \"\", True)\n+        self.nodes[0].sendtoaddress(watchonly_address, watchonly_amount)\n+\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5);\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0);\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0);\n+\n         self.sync_all()\n+\n         self.nodes[0].setgenerate(True, 1)\n+\n         self.sync_all()\n \n         ###############\n@@ -283,5 +292,32 @@ def run_test(self):\n         assert_equal(\"Insufficient\" in errorString, True);\n         \n \n+        ##################################################\n+        # test a fundrawtransaction using only watchonly #\n+        ##################################################\n+\n+        inputs = []\n+        outputs = {self.nodes[2].getnewaddress() : watchonly_amount / 2.0}\n+        rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n+\n+        result = self.nodes[1].fundrawtransaction(rawtx, True)\n+\n+        assert_equal(\"hex\" in result.keys(), True)\n+        assert_equal(\"fee\" in result.keys(), True)\n+\n+        ###############################################################\n+        # test fundrawtransaction using the entirety of watched funds #\n+        ###############################################################\n+\n+        inputs = []\n+        outputs = {self.nodes[2].getnewaddress() : watchonly_amount / 1.0}\n+        rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n+\n+        result = self.nodes[1].fundrawtransaction(rawtx, True)\n+\n+        assert_equal(\"hex\" in result.keys(), True)\n+        assert_equal(\"fee\" in result.keys(), True)\n+\n+\n if __name__ == '__main__':\n     RawTransactionsTest().main()"
      },
      {
        "sha": "7e5f2197366a105f834bdf0ce8799dcd4b7964e2",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3af4c1c116f09f64d3507c4143b9ec182ed10ee/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3af4c1c116f09f64d3507c4143b9ec182ed10ee/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=a3af4c1c116f09f64d3507c4143b9ec182ed10ee",
        "patch": "@@ -770,13 +770,14 @@ Value sendrawtransaction(const Array& params, bool fHelp)\n #ifdef ENABLE_WALLET\n Value fundrawtransaction(const Array& params, bool fHelp)\n {\n-    if (fHelp || params.size() != 1)\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n                             \"fundrawtransaction \\\"hexstring\\\"\\n\"\n                             \"\\nAdd vIns to a raw transaction.\\n\"\n                             \"\\nAlso see createrawtransaction and signrawtransaction calls.\\n\"\n                             \"\\nArguments:\\n\"\n                             \"1. \\\"hexstring\\\"    (string, required) The hex string of the raw transaction\\n\"\n+                            \"2. includeWatching    (boolean, optional, default=false) Use watchonly outputs\\n\"\n                             \"\\nResult:\\n\"\n                             \"{\\n\"\n                             \"  \\\"hex\\\": \\\"value\\\",   (string) The raw transaction with vIns (hex-encoded string)\\n\"\n@@ -802,11 +803,15 @@ Value fundrawtransaction(const Array& params, bool fHelp)\n     CTransaction tx;\n     if (!DecodeHexTx(tx, params[0].get_str()))\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n-    \n+\n+    bool includeWatching = false;\n+    if (params.size() > 1)\n+        includeWatching = params[1].get_bool();\n+\n     CMutableTransaction txNew;\n     CAmount nFeeRet;\n     string strFailReason;\n-    if(!pwalletMain->FundTransaction(tx, txNew, nFeeRet, strFailReason))\n+    if(!pwalletMain->FundTransaction(tx, txNew, nFeeRet, strFailReason, includeWatching))\n         throw JSONRPCError(RPC_INTERNAL_ERROR, strFailReason);\n     \n     Object result;"
      },
      {
        "sha": "599469fc99fdd2de36fb26d4143d498bfde89613",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 52,
        "deletions": 23,
        "changes": 75,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3af4c1c116f09f64d3507c4143b9ec182ed10ee/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3af4c1c116f09f64d3507c4143b9ec182ed10ee/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=a3af4c1c116f09f64d3507c4143b9ec182ed10ee",
        "patch": "@@ -1344,7 +1344,7 @@ CAmount CWallet::GetImmatureWatchOnlyBalance() const\n /**\n  * populate vCoins with vector of available COutputs.\n  */\n-void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const CCoinControl *coinControl) const\n+void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const CCoinControl *coinControl, bool includeWatching) const\n {\n     vCoins.clear();\n \n@@ -1373,7 +1373,7 @@ void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const\n                 if (!(IsSpent(wtxid, i)) && mine != ISMINE_NO &&\n                     !IsLockedCoin((*it).first, i) && pcoin->vout[i].nValue > 0 &&\n                     (!coinControl || !coinControl->HasSelected() || coinControl->IsSelected((*it).first, i)))\n-                        vCoins.push_back(COutput(pcoin, i, nDepth, (mine & ISMINE_SPENDABLE) != ISMINE_NO));\n+                        vCoins.push_back(COutput(pcoin, i, nDepth, ((mine & ISMINE_SPENDABLE) != ISMINE_NO) || (includeWatching && ((mine & ISMINE_WATCH_ONLY) != ISMINE_NO))));\n             }\n         }\n     }\n@@ -1526,10 +1526,10 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int\n     return true;\n }\n \n-bool CWallet::SelectCoins(const CAmount& nTargetValue, set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet, vector<CTxIn> vPresetVINs, const CCoinControl* coinControl) const\n+bool CWallet::SelectCoins(const CAmount& nTargetValue, set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet, vector<CTxIn> vPresetVINs, const CCoinControl* coinControl, bool includeWatching) const\n {\n     vector<COutput> vCoins;\n-    AvailableCoins(vCoins, true, coinControl);\n+    AvailableCoins(vCoins, true, coinControl, includeWatching);\n     \n     // create a empty set to store possible VINS\n     set<pair<const CWalletTx*,unsigned int> > setTempCoins;\n@@ -1596,37 +1596,48 @@ bool CWallet::SelectCoins(const CAmount& nTargetValue, set<pair<const CWalletTx*\n }\n \n \n-bool CWallet::FundTransaction(const CTransaction& txToFund, CMutableTransaction& txNew, CAmount &nFeeRet, std::string& strFailReason)\n+bool CWallet::FundTransaction(const CTransaction& txToFund, CMutableTransaction& txNew, CAmount &nFeeRet, std::string& strFailReason, bool includeWatching)\n {\n-    \n+\n     vector<pair<CScript, CAmount> > vecSend;\n     vector<CTxIn> vin;\n-    \n+\n     BOOST_FOREACH (const CTxOut& txOut, txToFund.vout)\n     {\n         vecSend.push_back(make_pair(txOut.scriptPubKey, txOut.nValue));\n     }\n-    \n+\n     BOOST_FOREACH (const CTxIn& txIn, txToFund.vin)\n     {\n         vin.push_back(txIn);\n     }\n-    \n+\n     CReserveKey reservekey(this);\n     CWalletTx wtx;\n-    return CreateTransaction(vecSend, vin, wtx, txNew, reservekey, nFeeRet, strFailReason, NULL, false);\n+\n+    // always try first without including watchonly\n+    bool result = CreateTransaction(vecSend, vin, wtx, txNew, reservekey, nFeeRet, strFailReason, NULL, false, false);\n+\n+    // There may be a solution including watchonly, which may also be a\n+    // solution that does not pay any fees.\n+    if (!result && includeWatching)\n+        result = CreateTransaction(vecSend, vin, wtx, txNew, reservekey, nFeeRet, strFailReason, NULL, false, includeWatching);\n+\n+    return result;\n }\n \n bool CWallet::CreateTransaction(const vector<pair<CScript, CAmount> >& vecSend,\n-                                CWalletTx& wtxNew, CMutableTransaction& txNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl* coinControl, bool sign)\n+                                CWalletTx& wtxNew, CMutableTransaction& txNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl* coinControl, bool sign, bool includeWatching)\n {\n     vector<CTxIn> vINs;\n-    return CreateTransaction(vecSend, vINs, wtxNew, txNew, reservekey, nFeeRet, strFailReason, coinControl, sign);\n+    return CreateTransaction(vecSend, vINs, wtxNew, txNew, reservekey, nFeeRet, strFailReason, coinControl, sign, includeWatching);\n }\n \n bool CWallet::CreateTransaction(const vector<pair<CScript, CAmount> >& vecSend, const vector<CTxIn> vINs,\n-                                CWalletTx& wtxNew, CMutableTransaction& txNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl* coinControl, bool sign)\n+                                CWalletTx& wtxNew, CMutableTransaction& txNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl* coinControl, bool sign, bool includeWatching)\n {\n+    bool cannotFundFee = false; // used with includeWatching\n+\n     CAmount nValue = 0;\n     BOOST_FOREACH (const PAIRTYPE(CScript, CAmount)& s, vecSend)\n     {\n@@ -1695,10 +1706,22 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, CAmount> >& vecSend,\n                 // Choose coins to use\n                 set<pair<const CWalletTx*,unsigned int> > setCoins;\n                 CAmount nValueIn = 0;\n-                if (!SelectCoins(nTotalValue, setCoins, nValueIn, vINs, coinControl))\n+                if (!SelectCoins(nTotalValue, setCoins, nValueIn, vINs, coinControl, includeWatching))\n                 {\n-                    strFailReason = _(\"Insufficient funds\");\n-                    return false;\n+                    // fee selection is not mandatory when using includeWatching\n+                    if (includeWatching && SelectCoins(nTotalValue - nFeeRet, setCoins, nValueIn, vINs, coinControl, includeWatching) && nTotalValue >= nValue)\n+                    {\n+                        nFeeRet = 0;\n+\n+                        // no more funds available for fee, but target met anyway\n+                        cannotFundFee = true;\n+                    }\n+\n+                    else\n+                    {\n+                        strFailReason = _(\"Insufficient funds\");\n+                        return false;\n+                    }\n                 }\n                 BOOST_FOREACH(PAIRTYPE(const CWalletTx*, unsigned int) pcoin, setCoins)\n                 {\n@@ -1772,10 +1795,11 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, CAmount> >& vecSend,\n                     txNew.vin.push_back(CTxIn(coin.first->GetHash(),coin.second,CScript(),\n                                               std::numeric_limits<unsigned int>::max()-1));\n \n-                // Sign\n+                // Sign (also calculate fee)\n                 int nIn = 0;\n                 BOOST_FOREACH(const PAIRTYPE(const CWalletTx*,unsigned int)& coin, setCoins)\n-                    if (!SignSignature(*this, *coin.first, txNew, nIn++))\n+                    // when unsignable and watchonly enabled, this may be a watchonly so don't error\n+                    if (!SignSignature(*this, *coin.first, txNew, nIn++) && !includeWatching)\n                     {\n                         strFailReason = _(\"Signing transaction failed\");\n                         return false;\n@@ -1791,14 +1815,19 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, CAmount> >& vecSend,\n                     strFailReason = _(\"Transaction too large\");\n                     return false;\n                 }\n-                \n-                //remove signature if we used the signing only for the fee calculation\n+\n+                // remove signature if we used the signing only for the fee calculation\n                 if(!sign)\n                 {\n                     BOOST_FOREACH (CTxIn& vin, txNew.vin)\n                         vin.scriptSig = CScript();\n                 }\n-                \n+\n+                // There are no more available funds for funding a transaction\n+                // fee, and includeWatching should de-prioritize fee funding.\n+                if (includeWatching && cannotFundFee)\n+                    return true;\n+\n                 dPriority = wtxNew.ComputePriority(dPriority, nBytes);\n \n                 // Can we complete this as a free transaction?\n@@ -1838,13 +1867,13 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, CAmount> >& vecSend,\n }\n \n bool CWallet::CreateTransaction(CScript scriptPubKey, const CAmount& nValue,\n-                                CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl* coinControl, bool sign)\n+                                CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl* coinControl, bool sign, bool includeWatching)\n {\n     vector< pair<CScript, CAmount> > vecSend;\n     vecSend.push_back(make_pair(scriptPubKey, nValue));\n     CMutableTransaction txNew;\n     vector<CTxIn> vINs;\n-    return CreateTransaction(vecSend, vINs, wtxNew, txNew, reservekey, nFeeRet, strFailReason, coinControl, sign);\n+    return CreateTransaction(vecSend, vINs, wtxNew, txNew, reservekey, nFeeRet, strFailReason, coinControl, sign, includeWatching);\n }\n \n /**"
      },
      {
        "sha": "6f134b92b4a55493f66c7d29f29fce183b67b340",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3af4c1c116f09f64d3507c4143b9ec182ed10ee/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3af4c1c116f09f64d3507c4143b9ec182ed10ee/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=a3af4c1c116f09f64d3507c4143b9ec182ed10ee",
        "patch": "@@ -433,7 +433,7 @@ class CWalletKey\n class CWallet : public CCryptoKeyStore, public CValidationInterface\n {\n private:\n-    bool SelectCoins(const CAmount& nTargetValue, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet, const std::vector<CTxIn> vPresetVINs, const CCoinControl *coinControl = NULL) const;\n+    bool SelectCoins(const CAmount& nTargetValue, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet, const std::vector<CTxIn> vPresetVINs, const CCoinControl *coinControl = NULL, bool includeWatching = false) const;\n \n     CWalletDB *pwalletdbEncryption;\n \n@@ -528,7 +528,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     //! check whether we are allowed to upgrade (or already support) to the named feature\n     bool CanSupportFeature(enum WalletFeature wf) { AssertLockHeld(cs_wallet); return nWalletMaxVersion >= wf; }\n \n-    void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlyConfirmed=true, const CCoinControl *coinControl = NULL) const;\n+    void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlyConfirmed=true, const CCoinControl *coinControl = NULL, bool includeWatching = false) const;\n     bool SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int nConfTheirs, std::vector<COutput> vCoins, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet) const;\n \n     bool IsSpent(const uint256& hash, unsigned int n) const;\n@@ -611,13 +611,13 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     CAmount GetWatchOnlyBalance() const;\n     CAmount GetUnconfirmedWatchOnlyBalance() const;\n     CAmount GetImmatureWatchOnlyBalance() const;\n-    bool FundTransaction(const CTransaction& txToFund, CMutableTransaction& txNew, CAmount& nFeeRet, std::string& strFailReason);\n+    bool FundTransaction(const CTransaction& txToFund, CMutableTransaction& txNew, CAmount& nFeeRet, std::string& strFailReason, bool includeWatching = false);\n     bool CreateTransaction(const std::vector<std::pair<CScript, CAmount> >& vecSend, const std::vector<CTxIn> vins,\n-                           CWalletTx& wtxNew, CMutableTransaction& txNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = true);\n+                           CWalletTx& wtxNew, CMutableTransaction& txNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = true, bool includeWatching = false);\n     bool CreateTransaction(const std::vector<std::pair<CScript, CAmount> >& vecSend,\n-                           CWalletTx& wtxNew, CMutableTransaction& txNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = true);\n+                           CWalletTx& wtxNew, CMutableTransaction& txNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = true, bool includeWatching = false);\n     bool CreateTransaction(CScript scriptPubKey, const CAmount& nValue,\n-                           CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = true);\n+                           CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = true, bool includeWatching = false);\n     bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);\n \n     static CFeeRate minTxFee;"
      }
    ]
  }
]