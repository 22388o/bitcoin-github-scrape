[
  {
    "sha": "131d4450b913fa4f00dc8b176dc996d39f786c19",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMzFkNDQ1MGI5MTNmYTRmMDBkYzhiMTc2ZGM5OTZkMzlmNzg2YzE5",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-04T15:43:45Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-05-19T15:16:00Z"
      },
      "message": "scripted-diff: Rename master key to seed\n\n-BEGIN VERIFY SCRIPT-\n\nren() { git grep -l \"\\<$1\\>\" 'src/*.cpp' 'src/*.h' test | xargs sed -i \"s:\\<$1\\>:$2:g\"; }\nren GenerateNewHDMasterKey  GenerateNewSeed\nren DeriveNewMasterHDKey    DeriveNewSeed\nren SetHDMasterKey          SetHDSeed\nren hdMasterKeyID           hd_seed_id\nren masterKeyID             seed_id\nren SetMaster               SetSeed\nren hdmasterkeyid           hdseedid\nren hdmaster                hdseed\n\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "5c34c2418b2b92e1804fb70dd78ff4c1fc624da3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c34c2418b2b92e1804fb70dd78ff4c1fc624da3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/131d4450b913fa4f00dc8b176dc996d39f786c19",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/131d4450b913fa4f00dc8b176dc996d39f786c19",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/131d4450b913fa4f00dc8b176dc996d39f786c19",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/131d4450b913fa4f00dc8b176dc996d39f786c19/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d792e47421fcb9ce3b381c1e6d8902777ae3f9f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d792e47421fcb9ce3b381c1e6d8902777ae3f9f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d792e47421fcb9ce3b381c1e6d8902777ae3f9f3"
      }
    ],
    "stats": {
      "total": 114,
      "additions": 57,
      "deletions": 57
    },
    "files": [
      {
        "sha": "94be179bfb476467ec4bffc8a1300a843977ce30",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/131d4450b913fa4f00dc8b176dc996d39f786c19/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/131d4450b913fa4f00dc8b176dc996d39f786c19/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=131d4450b913fa4f00dc8b176dc996d39f786c19",
        "patch": "@@ -273,7 +273,7 @@ bool CExtKey::Derive(CExtKey &out, unsigned int _nChild) const {\n     return key.Derive(out.key, out.chaincode, _nChild, chaincode);\n }\n \n-void CExtKey::SetMaster(const unsigned char *seed, unsigned int nSeedLen) {\n+void CExtKey::SetSeed(const unsigned char *seed, unsigned int nSeedLen) {\n     static const unsigned char hashkey[] = {'B','i','t','c','o','i','n',' ','s','e','e','d'};\n     std::vector<unsigned char, secure_allocator<unsigned char>> vout(64);\n     CHMAC_SHA512(hashkey, sizeof(hashkey)).Write(seed, nSeedLen).Finalize(vout.data());"
      },
      {
        "sha": "f573a18a4ef480f96cf09e5b6808dee90f83b955",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/131d4450b913fa4f00dc8b176dc996d39f786c19/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/131d4450b913fa4f00dc8b176dc996d39f786c19/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=131d4450b913fa4f00dc8b176dc996d39f786c19",
        "patch": "@@ -158,7 +158,7 @@ struct CExtKey {\n     void Decode(const unsigned char code[BIP32_EXTKEY_SIZE]);\n     bool Derive(CExtKey& out, unsigned int nChild) const;\n     CExtPubKey Neuter() const;\n-    void SetMaster(const unsigned char* seed, unsigned int nSeedLen);\n+    void SetSeed(const unsigned char* seed, unsigned int nSeedLen);\n     template <typename Stream>\n     void Serialize(Stream& s) const\n     {"
      },
      {
        "sha": "2c625c089c64172ee08f83eda42f3eb0fae00314",
        "filename": "src/test/bip32_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/131d4450b913fa4f00dc8b176dc996d39f786c19/src/test/bip32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/131d4450b913fa4f00dc8b176dc996d39f786c19/src/test/bip32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bip32_tests.cpp?ref=131d4450b913fa4f00dc8b176dc996d39f786c19",
        "patch": "@@ -91,7 +91,7 @@ static void RunTest(const TestVector &test) {\n     std::vector<unsigned char> seed = ParseHex(test.strHexMaster);\n     CExtKey key;\n     CExtPubKey pubkey;\n-    key.SetMaster(seed.data(), seed.size());\n+    key.SetSeed(seed.data(), seed.size());\n     pubkey = key.Neuter();\n     for (const TestDerivation &derive : test.vDerive) {\n         unsigned char data[74];"
      },
      {
        "sha": "256a5576f02e911752824836016d8eabd47a5e6c",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/131d4450b913fa4f00dc8b176dc996d39f786c19/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/131d4450b913fa4f00dc8b176dc996d39f786c19/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=131d4450b913fa4f00dc8b176dc996d39f786c19",
        "patch": "@@ -752,13 +752,13 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     file << \"\\n\";\n \n     // add the base58check encoded extended master if the wallet uses HD\n-    CKeyID masterKeyID = pwallet->GetHDChain().masterKeyID;\n-    if (!masterKeyID.IsNull())\n+    CKeyID seed_id = pwallet->GetHDChain().seed_id;\n+    if (!seed_id.IsNull())\n     {\n         CKey key;\n-        if (pwallet->GetKey(masterKeyID, key)) {\n+        if (pwallet->GetKey(seed_id, key)) {\n             CExtKey masterKey;\n-            masterKey.SetMaster(key.begin(), key.size());\n+            masterKey.SetSeed(key.begin(), key.size());\n \n             file << \"# extended private masterkey: \" << EncodeExtKey(masterKey) << \"\\n\\n\";\n         }\n@@ -773,8 +773,8 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n             file << strprintf(\"%s %s \", EncodeSecret(key), strTime);\n             if (GetWalletAddressesForKey(pwallet, keyid, strAddr, strLabel)) {\n                file << strprintf(\"label=%s\", strLabel);\n-            } else if (keyid == masterKeyID) {\n-                file << \"hdmaster=1\";\n+            } else if (keyid == seed_id) {\n+                file << \"hdseed=1\";\n             } else if (mapKeyPool.count(keyid)) {\n                 file << \"reserve=1\";\n             } else if (pwallet->mapKeyMetadata[keyid].hdKeypath == \"m\") {"
      },
      {
        "sha": "3b7537d7b6153d4350e71276c9595695675b5daa",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/131d4450b913fa4f00dc8b176dc996d39f786c19/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/131d4450b913fa4f00dc8b176dc996d39f786c19/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=131d4450b913fa4f00dc8b176dc996d39f786c19",
        "patch": "@@ -2925,7 +2925,7 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n             \"  \\\"keypoolsize_hd_internal\\\": xxxx, (numeric) how many new keys are pre-generated for internal use (used for change outputs, only appears if the wallet is using this feature, otherwise external keys are used)\\n\"\n             \"  \\\"unlocked_until\\\": ttt,           (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n             \"  \\\"paytxfee\\\": x.xxxx,              (numeric) the transaction fee configuration, set in \" + CURRENCY_UNIT + \"/kB\\n\"\n-            \"  \\\"hdmasterkeyid\\\": \\\"<hash160>\\\"     (string, optional) the Hash160 of the HD master pubkey (only present when HD is enabled)\\n\"\n+            \"  \\\"hdseedid\\\": \\\"<hash160>\\\"     (string, optional) the Hash160 of the HD master pubkey (only present when HD is enabled)\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getwalletinfo\", \"\")\n@@ -2949,16 +2949,16 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n     obj.pushKV(\"txcount\",       (int)pwallet->mapWallet.size());\n     obj.pushKV(\"keypoololdest\", pwallet->GetOldestKeyPoolTime());\n     obj.pushKV(\"keypoolsize\", (int64_t)kpExternalSize);\n-    CKeyID masterKeyID = pwallet->GetHDChain().masterKeyID;\n-    if (!masterKeyID.IsNull() && pwallet->CanSupportFeature(FEATURE_HD_SPLIT)) {\n+    CKeyID seed_id = pwallet->GetHDChain().seed_id;\n+    if (!seed_id.IsNull() && pwallet->CanSupportFeature(FEATURE_HD_SPLIT)) {\n         obj.pushKV(\"keypoolsize_hd_internal\",   (int64_t)(pwallet->GetKeyPoolSize() - kpExternalSize));\n     }\n     if (pwallet->IsCrypted()) {\n         obj.pushKV(\"unlocked_until\", pwallet->nRelockTime);\n     }\n     obj.pushKV(\"paytxfee\", ValueFromAmount(pwallet->m_pay_tx_fee.GetFeePerK()));\n-    if (!masterKeyID.IsNull())\n-        obj.pushKV(\"hdmasterkeyid\", masterKeyID.GetHex());\n+    if (!seed_id.IsNull())\n+        obj.pushKV(\"hdseedid\", seed_id.GetHex());\n     return obj;\n }\n \n@@ -3948,13 +3948,13 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             \"    ]\\n\"\n             \"  \\\"sigsrequired\\\" : xxxxx        (numeric, optional) Number of signatures required to spend multisig output (only if \\\"script\\\" is \\\"multisig\\\")\\n\"\n             \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string, optional) The hex value of the raw public key, for single-key addresses (possibly embedded in P2SH or P2WSH)\\n\"\n-            \"  \\\"embedded\\\" : {...},           (object, optional) Information about the address embedded in P2SH or P2WSH, if relevant and known. It includes all getaddressinfo output fields for the embedded address, excluding metadata (\\\"timestamp\\\", \\\"hdkeypath\\\", \\\"hdmasterkeyid\\\") and relation to the wallet (\\\"ismine\\\", \\\"iswatchonly\\\", \\\"account\\\").\\n\"\n+            \"  \\\"embedded\\\" : {...},           (object, optional) Information about the address embedded in P2SH or P2WSH, if relevant and known. It includes all getaddressinfo output fields for the embedded address, excluding metadata (\\\"timestamp\\\", \\\"hdkeypath\\\", \\\"hdseedid\\\") and relation to the wallet (\\\"ismine\\\", \\\"iswatchonly\\\", \\\"account\\\").\\n\"\n             \"  \\\"iscompressed\\\" : true|false,  (boolean) If the address is compressed\\n\"\n             \"  \\\"label\\\" :  \\\"label\\\"         (string) The label associated with the address, \\\"\\\" is the default account\\n\"\n             \"  \\\"account\\\" : \\\"account\\\"         (string) DEPRECATED. This field will be removed in V0.18. To see this deprecated field, start bitcoind with -deprecatedrpc=accounts. The account associated with the address, \\\"\\\" is the default account\\n\"\n             \"  \\\"timestamp\\\" : timestamp,      (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n             \"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n-            \"  \\\"hdmasterkeyid\\\" : \\\"<hash160>\\\" (string, optional) The Hash160 of the HD master pubkey\\n\"\n+            \"  \\\"hdseedid\\\" : \\\"<hash160>\\\" (string, optional) The Hash160 of the HD master pubkey\\n\"\n             \"  \\\"labels\\\"                      (object) Array of labels associated with the address.\\n\"\n             \"    [\\n\"\n             \"      { (json object of label data)\\n\"\n@@ -4014,7 +4014,7 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n         ret.pushKV(\"timestamp\", meta->nCreateTime);\n         if (!meta->hdKeypath.empty()) {\n             ret.pushKV(\"hdkeypath\", meta->hdKeypath);\n-            ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n+            ret.pushKV(\"hdseedid\", meta->hd_seed_id.GetHex());\n         }\n     }\n \n@@ -4147,7 +4147,7 @@ UniValue sethdseed(const JSONRPCRequest& request)\n             \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing\\n\"\n             \"                             keypool will be used until it has been depleted.\\n\"\n             \"2. \\\"seed\\\"               (string, optional) The WIF private key to use as the new HD seed; if not provided a random seed will be used.\\n\"\n-            \"                             The seed value can be retrieved using the dumpwallet command. It is the private key marked hdmaster=1\\n\"\n+            \"                             The seed value can be retrieved using the dumpwallet command. It is the private key marked hdseed=1\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"sethdseed\", \"\")\n             + HelpExampleCli(\"sethdseed\", \"false\")\n@@ -4176,7 +4176,7 @@ UniValue sethdseed(const JSONRPCRequest& request)\n \n     CPubKey master_pub_key;\n     if (request.params[1].isNull()) {\n-        master_pub_key = pwallet->GenerateNewHDMasterKey();\n+        master_pub_key = pwallet->GenerateNewSeed();\n     } else {\n         CKey key = DecodeSecret(request.params[1].get_str());\n         if (!key.IsValid()) {\n@@ -4187,10 +4187,10 @@ UniValue sethdseed(const JSONRPCRequest& request)\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Already have this key (either as an HD seed or as a loose private key)\");\n         }\n \n-        master_pub_key = pwallet->DeriveNewMasterHDKey(key);\n+        master_pub_key = pwallet->DeriveNewSeed(key);\n     }\n \n-    pwallet->SetHDMasterKey(master_pub_key);\n+    pwallet->SetHDSeed(master_pub_key);\n     if (flush_key_pool) pwallet->NewKeyPool();\n \n     return NullUniValue;"
      },
      {
        "sha": "27d1427e3c0b1f49fe7f847e32e6c874c0029c21",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/131d4450b913fa4f00dc8b176dc996d39f786c19/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/131d4450b913fa4f00dc8b176dc996d39f786c19/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=131d4450b913fa4f00dc8b176dc996d39f786c19",
        "patch": "@@ -198,10 +198,10 @@ void CWallet::DeriveNewChildKey(WalletBatch &batch, CKeyMetadata& metadata, CKey\n     CExtKey childKey;              //key at m/0'/0'/<n>'\n \n     // try to get the master key\n-    if (!GetKey(hdChain.masterKeyID, key))\n+    if (!GetKey(hdChain.seed_id, key))\n         throw std::runtime_error(std::string(__func__) + \": Master key not found\");\n \n-    masterKey.SetMaster(key.begin(), key.size());\n+    masterKey.SetSeed(key.begin(), key.size());\n \n     // derive m/0'\n     // use hardened derivation (child keys >= 0x80000000 are hardened after bip32)\n@@ -228,7 +228,7 @@ void CWallet::DeriveNewChildKey(WalletBatch &batch, CKeyMetadata& metadata, CKey\n         }\n     } while (HaveKey(childKey.key.GetPubKey().GetID()));\n     secret = childKey.key;\n-    metadata.hdMasterKeyID = hdChain.masterKeyID;\n+    metadata.hd_seed_id = hdChain.seed_id;\n     // update the chain model in the database\n     if (!batch.WriteHDChain(hdChain))\n         throw std::runtime_error(std::string(__func__) + \": Writing HD chain model failed\");\n@@ -691,7 +691,7 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n \n         // if we are using HD, replace the HD master key (seed) with a new one\n         if (IsHDEnabled()) {\n-            if (!SetHDMasterKey(GenerateNewHDMasterKey())) {\n+            if (!SetHDSeed(GenerateNewSeed())) {\n                 return false;\n             }\n         }\n@@ -1450,14 +1450,14 @@ CAmount CWallet::GetChange(const CTransaction& tx) const\n     return nChange;\n }\n \n-CPubKey CWallet::GenerateNewHDMasterKey()\n+CPubKey CWallet::GenerateNewSeed()\n {\n     CKey key;\n     key.MakeNewKey(true);\n-    return DeriveNewMasterHDKey(key);\n+    return DeriveNewSeed(key);\n }\n \n-CPubKey CWallet::DeriveNewMasterHDKey(const CKey& key)\n+CPubKey CWallet::DeriveNewSeed(const CKey& key)\n {\n     int64_t nCreationTime = GetTime();\n     CKeyMetadata metadata(nCreationTime);\n@@ -1468,7 +1468,7 @@ CPubKey CWallet::DeriveNewMasterHDKey(const CKey& key)\n \n     // set the hd keypath to \"m\" -> Master, refers the masterkeyid to itself\n     metadata.hdKeypath     = \"m\";\n-    metadata.hdMasterKeyID = pubkey.GetID();\n+    metadata.hd_seed_id = pubkey.GetID();\n \n     {\n         LOCK(cs_wallet);\n@@ -1484,15 +1484,15 @@ CPubKey CWallet::DeriveNewMasterHDKey(const CKey& key)\n     return pubkey;\n }\n \n-bool CWallet::SetHDMasterKey(const CPubKey& pubkey)\n+bool CWallet::SetHDSeed(const CPubKey& pubkey)\n {\n     LOCK(cs_wallet);\n     // store the keyid (hash160) together with\n     // the child index counter in the database\n     // as a hdchain object\n     CHDChain newHdChain;\n     newHdChain.nVersion = CanSupportFeature(FEATURE_HD_SPLIT) ? CHDChain::VERSION_HD_CHAIN_SPLIT : CHDChain::VERSION_HD_BASE;\n-    newHdChain.masterKeyID = pubkey.GetID();\n+    newHdChain.seed_id = pubkey.GetID();\n     SetHDChain(newHdChain, false);\n \n     return true;\n@@ -1510,7 +1510,7 @@ bool CWallet::SetHDChain(const CHDChain& chain, bool memonly)\n \n bool CWallet::IsHDEnabled() const\n {\n-    return !hdChain.masterKeyID.IsNull();\n+    return !hdChain.seed_id.IsNull();\n }\n \n int64_t CWalletTx::GetTxTime() const\n@@ -4130,8 +4130,8 @@ CWallet* CWallet::CreateWalletFromFile(const std::string& name, const fs::path&\n             walletInstance->SetMinVersion(FEATURE_HD);\n \n             // generate a new master key\n-            CPubKey masterPubKey = walletInstance->GenerateNewHDMasterKey();\n-            if (!walletInstance->SetHDMasterKey(masterPubKey)) {\n+            CPubKey masterPubKey = walletInstance->GenerateNewSeed();\n+            if (!walletInstance->SetHDSeed(masterPubKey)) {\n                 throw std::runtime_error(std::string(__func__) + \": Storing master key failed\");\n             }\n             hd_upgrade = true;\n@@ -4165,8 +4165,8 @@ CWallet* CWallet::CreateWalletFromFile(const std::string& name, const fs::path&\n         walletInstance->SetMinVersion(FEATURE_LATEST);\n \n         // generate a new master key\n-        CPubKey masterPubKey = walletInstance->GenerateNewHDMasterKey();\n-        if (!walletInstance->SetHDMasterKey(masterPubKey))\n+        CPubKey masterPubKey = walletInstance->GenerateNewSeed();\n+        if (!walletInstance->SetHDSeed(masterPubKey))\n             throw std::runtime_error(std::string(__func__) + \": Storing master key failed\");\n \n         // Top up the keypool"
      },
      {
        "sha": "938f954e2be42891e3076d126e9efddf06f65a62",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/131d4450b913fa4f00dc8b176dc996d39f786c19/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/131d4450b913fa4f00dc8b176dc996d39f786c19/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=131d4450b913fa4f00dc8b176dc996d39f786c19",
        "patch": "@@ -1140,16 +1140,16 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     bool IsHDEnabled() const;\n \n     /* Generates a new HD master key (will not be activated) */\n-    CPubKey GenerateNewHDMasterKey();\n+    CPubKey GenerateNewSeed();\n \n     /* Derives a new HD master key (will not be activated) */\n-    CPubKey DeriveNewMasterHDKey(const CKey& key);\n+    CPubKey DeriveNewSeed(const CKey& key);\n \n     /* Set the current HD master key (will reset the chain child index counters)\n        Sets the master key's version based on the current wallet version (so the\n        caller must ensure the current wallet version is correct before calling\n        this function). */\n-    bool SetHDMasterKey(const CPubKey& key);\n+    bool SetHDSeed(const CPubKey& key);\n \n     /**\n      * Blocks until the wallet state is up-to-date to /at least/ the current"
      },
      {
        "sha": "226e18cf1ae48bda0d6f2c180291771cee69be59",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/131d4450b913fa4f00dc8b176dc996d39f786c19/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/131d4450b913fa4f00dc8b176dc996d39f786c19/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=131d4450b913fa4f00dc8b176dc996d39f786c19",
        "patch": "@@ -62,7 +62,7 @@ class CHDChain\n public:\n     uint32_t nExternalChainCounter;\n     uint32_t nInternalChainCounter;\n-    CKeyID masterKeyID; //!< master key hash160\n+    CKeyID seed_id; //!< master key hash160\n \n     static const int VERSION_HD_BASE        = 1;\n     static const int VERSION_HD_CHAIN_SPLIT = 2;\n@@ -76,7 +76,7 @@ class CHDChain\n     {\n         READWRITE(this->nVersion);\n         READWRITE(nExternalChainCounter);\n-        READWRITE(masterKeyID);\n+        READWRITE(seed_id);\n         if (this->nVersion >= VERSION_HD_CHAIN_SPLIT)\n             READWRITE(nInternalChainCounter);\n     }\n@@ -86,7 +86,7 @@ class CHDChain\n         nVersion = CHDChain::CURRENT_VERSION;\n         nExternalChainCounter = 0;\n         nInternalChainCounter = 0;\n-        masterKeyID.SetNull();\n+        seed_id.SetNull();\n     }\n };\n \n@@ -99,7 +99,7 @@ class CKeyMetadata\n     int nVersion;\n     int64_t nCreateTime; // 0 means unknown\n     std::string hdKeypath; //optional HD/bip32 keypath\n-    CKeyID hdMasterKeyID; //id of the HD masterkey used to derive this key\n+    CKeyID hd_seed_id; //id of the HD masterkey used to derive this key\n \n     CKeyMetadata()\n     {\n@@ -120,7 +120,7 @@ class CKeyMetadata\n         if (this->nVersion >= VERSION_WITH_HDDATA)\n         {\n             READWRITE(hdKeypath);\n-            READWRITE(hdMasterKeyID);\n+            READWRITE(hd_seed_id);\n         }\n     }\n \n@@ -129,7 +129,7 @@ class CKeyMetadata\n         nVersion = CKeyMetadata::CURRENT_VERSION;\n         nCreateTime = 0;\n         hdKeypath.clear();\n-        hdMasterKeyID.SetNull();\n+        hd_seed_id.SetNull();\n     }\n };\n "
      },
      {
        "sha": "6c2590812bf2a16d71afbd28e5c121f69f27a0ea",
        "filename": "test/functional/wallet_dump.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/131d4450b913fa4f00dc8b176dc996d39f786c19/test/functional/wallet_dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/131d4450b913fa4f00dc8b176dc996d39f786c19/test/functional/wallet_dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_dump.py?ref=131d4450b913fa4f00dc8b176dc996d39f786c19",
        "patch": "@@ -39,7 +39,7 @@ def read_dump(file_name, addrs, script_addrs, hd_master_addr_old):\n                     if keytype == \"inactivehdmaster=1\":\n                         # ensure the old master is still available\n                         assert(hd_master_addr_old == addr)\n-                    elif keytype == \"hdmaster=1\":\n+                    elif keytype == \"hdseed=1\":\n                         # ensure we have generated a new hd master key\n                         assert(hd_master_addr_old != addr)\n                         hd_master_addr_ret = addr"
      },
      {
        "sha": "afc20c5a91467e898dac60f888b741c75733e1fc",
        "filename": "test/functional/wallet_hd.py",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/131d4450b913fa4f00dc8b176dc996d39f786c19/test/functional/wallet_hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/131d4450b913fa4f00dc8b176dc996d39f786c19/test/functional/wallet_hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_hd.py?ref=131d4450b913fa4f00dc8b176dc996d39f786c19",
        "patch": "@@ -29,7 +29,7 @@ def run_test(self):\n         connect_nodes_bi(self.nodes, 0, 1)\n \n         # Make sure we use hd, keep masterkeyid\n-        masterkeyid = self.nodes[1].getwalletinfo()['hdmasterkeyid']\n+        masterkeyid = self.nodes[1].getwalletinfo()['hdseedid']\n         assert_equal(len(masterkeyid), 40)\n \n         # create an internal key\n@@ -54,7 +54,7 @@ def run_test(self):\n             hd_add = self.nodes[1].getnewaddress()\n             hd_info = self.nodes[1].getaddressinfo(hd_add)\n             assert_equal(hd_info[\"hdkeypath\"], \"m/0'/0'/\"+str(i)+\"'\")\n-            assert_equal(hd_info[\"hdmasterkeyid\"], masterkeyid)\n+            assert_equal(hd_info[\"hdseedid\"], masterkeyid)\n             self.nodes[0].sendtoaddress(hd_add, 1)\n             self.nodes[0].generate(1)\n         self.nodes[0].sendtoaddress(non_hd_add, 1)\n@@ -83,7 +83,7 @@ def run_test(self):\n             hd_add_2 = self.nodes[1].getnewaddress()\n             hd_info_2 = self.nodes[1].getaddressinfo(hd_add_2)\n             assert_equal(hd_info_2[\"hdkeypath\"], \"m/0'/0'/\"+str(i)+\"'\")\n-            assert_equal(hd_info_2[\"hdmasterkeyid\"], masterkeyid)\n+            assert_equal(hd_info_2[\"hdseedid\"], masterkeyid)\n         assert_equal(hd_add, hd_add_2)\n         connect_nodes_bi(self.nodes, 0, 1)\n         self.sync_all()\n@@ -122,9 +122,9 @@ def run_test(self):\n         assert_equal(keypath[0:7], \"m/0'/1'\")\n \n         # Generate a new HD seed on node 1 and make sure it is set\n-        orig_masterkeyid = self.nodes[1].getwalletinfo()['hdmasterkeyid']\n+        orig_masterkeyid = self.nodes[1].getwalletinfo()['hdseedid']\n         self.nodes[1].sethdseed()\n-        new_masterkeyid = self.nodes[1].getwalletinfo()['hdmasterkeyid']\n+        new_masterkeyid = self.nodes[1].getwalletinfo()['hdseedid']\n         assert orig_masterkeyid != new_masterkeyid\n         addr = self.nodes[1].getnewaddress()\n         assert_equal(self.nodes[1].getaddressinfo(addr)['hdkeypath'], 'm/0\\'/0\\'/0\\'') # Make sure the new address is the first from the keypool\n@@ -134,16 +134,16 @@ def run_test(self):\n         new_seed = self.nodes[0].dumpprivkey(self.nodes[0].getnewaddress())\n         orig_masterkeyid = new_masterkeyid\n         self.nodes[1].sethdseed(False, new_seed)\n-        new_masterkeyid = self.nodes[1].getwalletinfo()['hdmasterkeyid']\n+        new_masterkeyid = self.nodes[1].getwalletinfo()['hdseedid']\n         assert orig_masterkeyid != new_masterkeyid\n         addr = self.nodes[1].getnewaddress()\n-        assert_equal(orig_masterkeyid, self.nodes[1].getaddressinfo(addr)['hdmasterkeyid'])\n+        assert_equal(orig_masterkeyid, self.nodes[1].getaddressinfo(addr)['hdseedid'])\n         assert_equal(self.nodes[1].getaddressinfo(addr)['hdkeypath'], 'm/0\\'/0\\'/1\\'') # Make sure the new address continues previous keypool\n \n         # Check that the next address is from the new seed\n         self.nodes[1].keypoolrefill(1)\n         next_addr = self.nodes[1].getnewaddress()\n-        assert_equal(new_masterkeyid, self.nodes[1].getaddressinfo(next_addr)['hdmasterkeyid'])\n+        assert_equal(new_masterkeyid, self.nodes[1].getaddressinfo(next_addr)['hdseedid'])\n         assert_equal(self.nodes[1].getaddressinfo(next_addr)['hdkeypath'], 'm/0\\'/0\\'/0\\'') # Make sure the new address is not from previous keypool\n         assert next_addr != addr\n "
      },
      {
        "sha": "66d382e4cd4d530bf444f5779243b72ec7a59555",
        "filename": "test/functional/wallet_keypool.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/131d4450b913fa4f00dc8b176dc996d39f786c19/test/functional/wallet_keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/131d4450b913fa4f00dc8b176dc996d39f786c19/test/functional/wallet_keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool.py?ref=131d4450b913fa4f00dc8b176dc996d39f786c19",
        "patch": "@@ -16,7 +16,7 @@ def run_test(self):\n         addr_before_encrypting = nodes[0].getnewaddress()\n         addr_before_encrypting_data = nodes[0].getaddressinfo(addr_before_encrypting)\n         wallet_info_old = nodes[0].getwalletinfo()\n-        assert(addr_before_encrypting_data['hdmasterkeyid'] == wallet_info_old['hdmasterkeyid'])\n+        assert(addr_before_encrypting_data['hdseedid'] == wallet_info_old['hdseedid'])\n \n         # Encrypt wallet and wait to terminate\n         nodes[0].node_encrypt_wallet('test')\n@@ -26,8 +26,8 @@ def run_test(self):\n         addr = nodes[0].getnewaddress()\n         addr_data = nodes[0].getaddressinfo(addr)\n         wallet_info = nodes[0].getwalletinfo()\n-        assert(addr_before_encrypting_data['hdmasterkeyid'] != wallet_info['hdmasterkeyid'])\n-        assert(addr_data['hdmasterkeyid'] == wallet_info['hdmasterkeyid'])\n+        assert(addr_before_encrypting_data['hdseedid'] != wallet_info['hdseedid'])\n+        assert(addr_data['hdseedid'] == wallet_info['hdseedid'])\n         assert_raises_rpc_error(-12, \"Error: Keypool ran out, please call keypoolrefill first\", nodes[0].getnewaddress)\n \n         # put six (plus 2) new keys in the keypool (100% external-, +100% internal-keys, 1 in min)"
      }
    ]
  },
  {
    "sha": "c75c351419dac3dfe9578604ea5b2f7599452b4a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNzVjMzUxNDE5ZGFjM2RmZTk1Nzg2MDRlYTViMmY3NTk5NDUyYjRh",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-04T16:47:55Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-05-19T15:21:15Z"
      },
      "message": "[refactor] manually change remaining instances of master key to seed.",
      "tree": {
        "sha": "0da18b15841a1a88164f9801f91d3cc5a94b9fd2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0da18b15841a1a88164f9801f91d3cc5a94b9fd2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c75c351419dac3dfe9578604ea5b2f7599452b4a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c75c351419dac3dfe9578604ea5b2f7599452b4a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c75c351419dac3dfe9578604ea5b2f7599452b4a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c75c351419dac3dfe9578604ea5b2f7599452b4a/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "131d4450b913fa4f00dc8b176dc996d39f786c19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/131d4450b913fa4f00dc8b176dc996d39f786c19",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/131d4450b913fa4f00dc8b176dc996d39f786c19"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 34,
      "deletions": 34
    },
    "files": [
      {
        "sha": "fc58af0da4847359db8a0a4c3a5cf20bc89aa61d",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c75c351419dac3dfe9578604ea5b2f7599452b4a/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c75c351419dac3dfe9578604ea5b2f7599452b4a/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=c75c351419dac3dfe9578604ea5b2f7599452b4a",
        "patch": "@@ -755,10 +755,10 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     CKeyID seed_id = pwallet->GetHDChain().seed_id;\n     if (!seed_id.IsNull())\n     {\n-        CKey key;\n-        if (pwallet->GetKey(seed_id, key)) {\n+        CKey seed;\n+        if (pwallet->GetKey(seed_id, seed)) {\n             CExtKey masterKey;\n-            masterKey.SetSeed(key.begin(), key.size());\n+            masterKey.SetSeed(seed.begin(), seed.size());\n \n             file << \"# extended private masterkey: \" << EncodeExtKey(masterKey) << \"\\n\\n\";\n         }\n@@ -777,8 +777,8 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n                 file << \"hdseed=1\";\n             } else if (mapKeyPool.count(keyid)) {\n                 file << \"reserve=1\";\n-            } else if (pwallet->mapKeyMetadata[keyid].hdKeypath == \"m\") {\n-                file << \"inactivehdmaster=1\";\n+            } else if (pwallet->mapKeyMetadata[keyid].hdKeypath == \"s\") {\n+                file << \"inactivehdseed=1\";\n             } else {\n                 file << \"change=1\";\n             }"
      },
      {
        "sha": "eab345b17e8b757146bf65f3b24713ce865ab801",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c75c351419dac3dfe9578604ea5b2f7599452b4a/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c75c351419dac3dfe9578604ea5b2f7599452b4a/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=c75c351419dac3dfe9578604ea5b2f7599452b4a",
        "patch": "@@ -2925,7 +2925,7 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n             \"  \\\"keypoolsize_hd_internal\\\": xxxx, (numeric) how many new keys are pre-generated for internal use (used for change outputs, only appears if the wallet is using this feature, otherwise external keys are used)\\n\"\n             \"  \\\"unlocked_until\\\": ttt,           (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n             \"  \\\"paytxfee\\\": x.xxxx,              (numeric) the transaction fee configuration, set in \" + CURRENCY_UNIT + \"/kB\\n\"\n-            \"  \\\"hdseedid\\\": \\\"<hash160>\\\"     (string, optional) the Hash160 of the HD master pubkey (only present when HD is enabled)\\n\"\n+            \"  \\\"hdseedid\\\": \\\"<hash160>\\\"          (string, optional) the Hash160 of the HD seed (only present when HD is enabled)\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getwalletinfo\", \"\")\n@@ -3954,7 +3954,7 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             \"  \\\"account\\\" : \\\"account\\\"         (string) DEPRECATED. This field will be removed in V0.18. To see this deprecated field, start bitcoind with -deprecatedrpc=accounts. The account associated with the address, \\\"\\\" is the default account\\n\"\n             \"  \\\"timestamp\\\" : timestamp,      (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n             \"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n-            \"  \\\"hdseedid\\\" : \\\"<hash160>\\\" (string, optional) The Hash160 of the HD master pubkey\\n\"\n+            \"  \\\"hdseedid\\\" : \\\"<hash160>\\\"      (string, optional) The Hash160 of the HD seed\\n\"\n             \"  \\\"labels\\\"                      (object) Array of labels associated with the address.\\n\"\n             \"    [\\n\"\n             \"      { (json object of label data)\\n\""
      },
      {
        "sha": "abb87b192ac71b952abc98d6f702695675863c5a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 21,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c75c351419dac3dfe9578604ea5b2f7599452b4a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c75c351419dac3dfe9578604ea5b2f7599452b4a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=c75c351419dac3dfe9578604ea5b2f7599452b4a",
        "patch": "@@ -191,17 +191,17 @@ CPubKey CWallet::GenerateNewKey(WalletBatch &batch, bool internal)\n void CWallet::DeriveNewChildKey(WalletBatch &batch, CKeyMetadata& metadata, CKey& secret, bool internal)\n {\n     // for now we use a fixed keypath scheme of m/0'/0'/k\n-    CKey key;                      //master key seed (256bit)\n+    CKey seed;                     //seed (256bit)\n     CExtKey masterKey;             //hd master key\n     CExtKey accountKey;            //key at m/0'\n     CExtKey chainChildKey;         //key at m/0'/0' (external) or m/0'/1' (internal)\n     CExtKey childKey;              //key at m/0'/0'/<n>'\n \n-    // try to get the master key\n-    if (!GetKey(hdChain.seed_id, key))\n-        throw std::runtime_error(std::string(__func__) + \": Master key not found\");\n+    // try to get the seed\n+    if (!GetKey(hdChain.seed_id, seed))\n+        throw std::runtime_error(std::string(__func__) + \": seed not found\");\n \n-    masterKey.SetSeed(key.begin(), key.size());\n+    masterKey.SetSeed(seed.begin(), seed.size());\n \n     // derive m/0'\n     // use hardened derivation (child keys >= 0x80000000 are hardened after bip32)\n@@ -689,7 +689,7 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n         Lock();\n         Unlock(strWalletPassphrase);\n \n-        // if we are using HD, replace the HD master key (seed) with a new one\n+        // if we are using HD, replace the HD seed with a new one\n         if (IsHDEnabled()) {\n             if (!SetHDSeed(GenerateNewSeed())) {\n                 return false;\n@@ -1462,37 +1462,37 @@ CPubKey CWallet::DeriveNewSeed(const CKey& key)\n     int64_t nCreationTime = GetTime();\n     CKeyMetadata metadata(nCreationTime);\n \n-    // calculate the pubkey\n-    CPubKey pubkey = key.GetPubKey();\n-    assert(key.VerifyPubKey(pubkey));\n+    // calculate the seed\n+    CPubKey seed = key.GetPubKey();\n+    assert(key.VerifyPubKey(seed));\n \n-    // set the hd keypath to \"m\" -> Master, refers the masterkeyid to itself\n-    metadata.hdKeypath     = \"m\";\n-    metadata.hd_seed_id = pubkey.GetID();\n+    // set the hd keypath to \"s\" -> Seed, refers the seed to itself\n+    metadata.hdKeypath     = \"s\";\n+    metadata.hd_seed_id = seed.GetID();\n \n     {\n         LOCK(cs_wallet);\n \n         // mem store the metadata\n-        mapKeyMetadata[pubkey.GetID()] = metadata;\n+        mapKeyMetadata[seed.GetID()] = metadata;\n \n         // write the key&metadata to the database\n-        if (!AddKeyPubKey(key, pubkey))\n+        if (!AddKeyPubKey(key, seed))\n             throw std::runtime_error(std::string(__func__) + \": AddKeyPubKey failed\");\n     }\n \n-    return pubkey;\n+    return seed;\n }\n \n-bool CWallet::SetHDSeed(const CPubKey& pubkey)\n+bool CWallet::SetHDSeed(const CPubKey& seed)\n {\n     LOCK(cs_wallet);\n     // store the keyid (hash160) together with\n     // the child index counter in the database\n     // as a hdchain object\n     CHDChain newHdChain;\n     newHdChain.nVersion = CanSupportFeature(FEATURE_HD_SPLIT) ? CHDChain::VERSION_HD_CHAIN_SPLIT : CHDChain::VERSION_HD_BASE;\n-    newHdChain.seed_id = pubkey.GetID();\n+    newHdChain.seed_id = seed.GetID();\n     SetHDChain(newHdChain, false);\n \n     return true;\n@@ -4164,10 +4164,10 @@ CWallet* CWallet::CreateWalletFromFile(const std::string& name, const fs::path&\n         }\n         walletInstance->SetMinVersion(FEATURE_LATEST);\n \n-        // generate a new master key\n-        CPubKey masterPubKey = walletInstance->GenerateNewSeed();\n-        if (!walletInstance->SetHDSeed(masterPubKey))\n-            throw std::runtime_error(std::string(__func__) + \": Storing master key failed\");\n+        // generate a new seed\n+        CPubKey seed = walletInstance->GenerateNewSeed();\n+        if (!walletInstance->SetHDSeed(seed))\n+            throw std::runtime_error(std::string(__func__) + \": Storing HD seed failed\");\n \n         // Top up the keypool\n         if (!walletInstance->TopUpKeyPool()) {"
      },
      {
        "sha": "142c54d7bdf0c6b42b732f80400db116b1c5dade",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c75c351419dac3dfe9578604ea5b2f7599452b4a/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c75c351419dac3dfe9578604ea5b2f7599452b4a/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=c75c351419dac3dfe9578604ea5b2f7599452b4a",
        "patch": "@@ -1139,14 +1139,14 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     /* Returns true if HD is enabled */\n     bool IsHDEnabled() const;\n \n-    /* Generates a new HD master key (will not be activated) */\n+    /* Generates a new HD seed (will not be activated) */\n     CPubKey GenerateNewSeed();\n \n     /* Derives a new HD master key (will not be activated) */\n     CPubKey DeriveNewSeed(const CKey& key);\n \n-    /* Set the current HD master key (will reset the chain child index counters)\n-       Sets the master key's version based on the current wallet version (so the\n+    /* Set the current HD seed (will reset the chain child index counters)\n+       Sets the seed's version based on the current wallet version (so the\n        caller must ensure the current wallet version is correct before calling\n        this function). */\n     bool SetHDSeed(const CPubKey& key);"
      },
      {
        "sha": "3237376f63529a96fe0c507b8bb6d1d1c18677da",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c75c351419dac3dfe9578604ea5b2f7599452b4a/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c75c351419dac3dfe9578604ea5b2f7599452b4a/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=c75c351419dac3dfe9578604ea5b2f7599452b4a",
        "patch": "@@ -62,7 +62,7 @@ class CHDChain\n public:\n     uint32_t nExternalChainCounter;\n     uint32_t nInternalChainCounter;\n-    CKeyID seed_id; //!< master key hash160\n+    CKeyID seed_id; //!< seed hash160\n \n     static const int VERSION_HD_BASE        = 1;\n     static const int VERSION_HD_CHAIN_SPLIT = 2;\n@@ -99,7 +99,7 @@ class CKeyMetadata\n     int nVersion;\n     int64_t nCreateTime; // 0 means unknown\n     std::string hdKeypath; //optional HD/bip32 keypath\n-    CKeyID hd_seed_id; //id of the HD masterkey used to derive this key\n+    CKeyID hd_seed_id; //id of the HD seed used to derive this key\n \n     CKeyMetadata()\n     {"
      },
      {
        "sha": "ba420ab2a6fc695048f87bac212e55bf4f0e298d",
        "filename": "test/functional/wallet_dump.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c75c351419dac3dfe9578604ea5b2f7599452b4a/test/functional/wallet_dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c75c351419dac3dfe9578604ea5b2f7599452b4a/test/functional/wallet_dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_dump.py?ref=c75c351419dac3dfe9578604ea5b2f7599452b4a",
        "patch": "@@ -36,7 +36,7 @@ def read_dump(file_name, addrs, script_addrs, hd_master_addr_old):\n                     addr_keypath = comment.split(\" addr=\")[1]\n                     addr = addr_keypath.split(\" \")[0]\n                     keypath = None\n-                    if keytype == \"inactivehdmaster=1\":\n+                    if keytype == \"inactivehdseed=1\":\n                         # ensure the old master is still available\n                         assert(hd_master_addr_old == addr)\n                     elif keytype == \"hdseed=1\":"
      }
    ]
  },
  {
    "sha": "79053a5f2b26ee3dfd9a0bb3fd01ac4733fc92b5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OTA1M2E1ZjJiMjZlZTNkZmQ5YTBiYjNmZDAxYWM0NzMzZmM5MmI1",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-17T21:42:31Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-05-19T15:21:20Z"
      },
      "message": "[rpc] [wallet] Add 'hdmasterkeyid' alias return values.\n\nRestores the  return value in getwalletinfo() and getaddressinfo()\nRPC methods for backwards compatibility",
      "tree": {
        "sha": "5b06058f3c0e14480b2ca0a010af0ed66231f8bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b06058f3c0e14480b2ca0a010af0ed66231f8bb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/79053a5f2b26ee3dfd9a0bb3fd01ac4733fc92b5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79053a5f2b26ee3dfd9a0bb3fd01ac4733fc92b5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/79053a5f2b26ee3dfd9a0bb3fd01ac4733fc92b5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79053a5f2b26ee3dfd9a0bb3fd01ac4733fc92b5/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c75c351419dac3dfe9578604ea5b2f7599452b4a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c75c351419dac3dfe9578604ea5b2f7599452b4a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c75c351419dac3dfe9578604ea5b2f7599452b4a"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 11,
      "deletions": 1
    },
    "files": [
      {
        "sha": "780c406299e6d30f9d7c66d620492c678dc83176",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79053a5f2b26ee3dfd9a0bb3fd01ac4733fc92b5/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79053a5f2b26ee3dfd9a0bb3fd01ac4733fc92b5/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=79053a5f2b26ee3dfd9a0bb3fd01ac4733fc92b5",
        "patch": "@@ -2926,6 +2926,7 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n             \"  \\\"unlocked_until\\\": ttt,           (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n             \"  \\\"paytxfee\\\": x.xxxx,              (numeric) the transaction fee configuration, set in \" + CURRENCY_UNIT + \"/kB\\n\"\n             \"  \\\"hdseedid\\\": \\\"<hash160>\\\"          (string, optional) the Hash160 of the HD seed (only present when HD is enabled)\\n\"\n+            \"  \\\"hdmasterkeyid\\\": \\\"<hash160>\\\"     (string, optional) alias for hdseedid retained for backwards-compatibility. Will be removed in V0.18.\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getwalletinfo\", \"\")\n@@ -2957,8 +2958,10 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n         obj.pushKV(\"unlocked_until\", pwallet->nRelockTime);\n     }\n     obj.pushKV(\"paytxfee\", ValueFromAmount(pwallet->m_pay_tx_fee.GetFeePerK()));\n-    if (!seed_id.IsNull())\n+    if (!seed_id.IsNull()) {\n         obj.pushKV(\"hdseedid\", seed_id.GetHex());\n+        obj.pushKV(\"hdmasterkeyid\", seed_id.GetHex());\n+    }\n     return obj;\n }\n \n@@ -3955,6 +3958,7 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             \"  \\\"timestamp\\\" : timestamp,      (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n             \"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n             \"  \\\"hdseedid\\\" : \\\"<hash160>\\\"      (string, optional) The Hash160 of the HD seed\\n\"\n+            \"  \\\"hdmasterkeyid\\\" : \\\"<hash160>\\\" (string, optional) alias for hdseedid maintained for backwards compatibility. Will be removed in V0.18.\\n\"\n             \"  \\\"labels\\\"                      (object) Array of labels associated with the address.\\n\"\n             \"    [\\n\"\n             \"      { (json object of label data)\\n\"\n@@ -4015,6 +4019,7 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n         if (!meta->hdKeypath.empty()) {\n             ret.pushKV(\"hdkeypath\", meta->hdKeypath);\n             ret.pushKV(\"hdseedid\", meta->hd_seed_id.GetHex());\n+            ret.pushKV(\"hdmasterkeyid\", meta->hd_seed_id.GetHex());\n         }\n     }\n "
      },
      {
        "sha": "86abe0ca9986eb40d8176e2c8d680f1cedfc931b",
        "filename": "test/functional/wallet_hd.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79053a5f2b26ee3dfd9a0bb3fd01ac4733fc92b5/test/functional/wallet_hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79053a5f2b26ee3dfd9a0bb3fd01ac4733fc92b5/test/functional/wallet_hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_hd.py?ref=79053a5f2b26ee3dfd9a0bb3fd01ac4733fc92b5",
        "patch": "@@ -30,6 +30,7 @@ def run_test(self):\n \n         # Make sure we use hd, keep masterkeyid\n         masterkeyid = self.nodes[1].getwalletinfo()['hdseedid']\n+        assert_equal(masterkeyid, self.nodes[1].getwalletinfo()['hdmasterkeyid'])\n         assert_equal(len(masterkeyid), 40)\n \n         # create an internal key\n@@ -55,6 +56,7 @@ def run_test(self):\n             hd_info = self.nodes[1].getaddressinfo(hd_add)\n             assert_equal(hd_info[\"hdkeypath\"], \"m/0'/0'/\"+str(i)+\"'\")\n             assert_equal(hd_info[\"hdseedid\"], masterkeyid)\n+            assert_equal(hd_info[\"hdmasterkeyid\"], masterkeyid)\n             self.nodes[0].sendtoaddress(hd_add, 1)\n             self.nodes[0].generate(1)\n         self.nodes[0].sendtoaddress(non_hd_add, 1)\n@@ -84,6 +86,7 @@ def run_test(self):\n             hd_info_2 = self.nodes[1].getaddressinfo(hd_add_2)\n             assert_equal(hd_info_2[\"hdkeypath\"], \"m/0'/0'/\"+str(i)+\"'\")\n             assert_equal(hd_info_2[\"hdseedid\"], masterkeyid)\n+            assert_equal(hd_info_2[\"hdmasterkeyid\"], masterkeyid)\n         assert_equal(hd_add, hd_add_2)\n         connect_nodes_bi(self.nodes, 0, 1)\n         self.sync_all()"
      },
      {
        "sha": "1285515dfc18d3dab196d0b3256077f2ad85159a",
        "filename": "test/functional/wallet_keypool.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79053a5f2b26ee3dfd9a0bb3fd01ac4733fc92b5/test/functional/wallet_keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79053a5f2b26ee3dfd9a0bb3fd01ac4733fc92b5/test/functional/wallet_keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool.py?ref=79053a5f2b26ee3dfd9a0bb3fd01ac4733fc92b5",
        "patch": "@@ -16,6 +16,7 @@ def run_test(self):\n         addr_before_encrypting = nodes[0].getnewaddress()\n         addr_before_encrypting_data = nodes[0].getaddressinfo(addr_before_encrypting)\n         wallet_info_old = nodes[0].getwalletinfo()\n+        assert_equal(wallet_info_old['hdseedid'], wallet_info_old['hdmasterkeyid'])\n         assert(addr_before_encrypting_data['hdseedid'] == wallet_info_old['hdseedid'])\n \n         # Encrypt wallet and wait to terminate\n@@ -26,6 +27,7 @@ def run_test(self):\n         addr = nodes[0].getnewaddress()\n         addr_data = nodes[0].getaddressinfo(addr)\n         wallet_info = nodes[0].getwalletinfo()\n+        assert_equal(wallet_info['hdseedid'], wallet_info['hdmasterkeyid'])\n         assert(addr_before_encrypting_data['hdseedid'] != wallet_info['hdseedid'])\n         assert(addr_data['hdseedid'] == wallet_info['hdseedid'])\n         assert_raises_rpc_error(-12, \"Error: Keypool ran out, please call keypoolrefill first\", nodes[0].getnewaddress)"
      }
    ]
  },
  {
    "sha": "6249021d152dec348eb4325c0dfccb3ba59f46d1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MjQ5MDIxZDE1MmRlYzM0OGViNDMyNWMwZGZjY2IzYmE1OWY0NmQx",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-17T16:12:00Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-05-19T15:21:20Z"
      },
      "message": "[docs] Add release notes for HD master key -> HD seed rename",
      "tree": {
        "sha": "c4943972497615f64d232bf83d4169214ea4489c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c4943972497615f64d232bf83d4169214ea4489c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6249021d152dec348eb4325c0dfccb3ba59f46d1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6249021d152dec348eb4325c0dfccb3ba59f46d1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6249021d152dec348eb4325c0dfccb3ba59f46d1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6249021d152dec348eb4325c0dfccb3ba59f46d1/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "79053a5f2b26ee3dfd9a0bb3fd01ac4733fc92b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79053a5f2b26ee3dfd9a0bb3fd01ac4733fc92b5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/79053a5f2b26ee3dfd9a0bb3fd01ac4733fc92b5"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 12,
      "deletions": 0
    },
    "files": [
      {
        "sha": "92e7e23217c0373f045318a3c9a64992912304eb",
        "filename": "doc/release-notes-pr12924.md",
        "status": "added",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6249021d152dec348eb4325c0dfccb3ba59f46d1/doc/release-notes-pr12924.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6249021d152dec348eb4325c0dfccb3ba59f46d1/doc/release-notes-pr12924.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-pr12924.md?ref=6249021d152dec348eb4325c0dfccb3ba59f46d1",
        "patch": "@@ -0,0 +1,12 @@\n+RPC changes\n+------------\n+\n+### Low-level changes\n+\n+- The `getwalletinfo` RPC method now returns an `hdseedid` value, which is always the same as the incorrectly-named `hdmasterkeyid` value. `hdmasterkeyid` will be removed in V0.18.\n+- The `getaddressinfo` RPC method now returns an `hdseedid` value, which is always the same as the incorrectly-named `hdmasterkeyid` value. `hdmasterkeyid` will be removed in V0.18.\n+\n+Other API changes\n+-----------------\n+\n+- The `inactivehdmaster` property in the `dumpwallet` output has been corrected to `inactivehdseed`"
      }
    ]
  }
]