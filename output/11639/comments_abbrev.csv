TheBlueMatt,2017-12-15T22:10:09Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/11639#issuecomment-352124547,352124547,
TheBlueMatt,2018-03-02T15:35:57Z,"Commented on the points I disagreed with, I obviously strongly disagree about making assumptions about the net_processing layer in validation, as that's been one of my overarching goals over the past few years. Will address the other points when I get a chance to rebase.",https://github.com/bitcoin/bitcoin/pull/11639#issuecomment-369954899,369954899,
sdaftuar,2018-03-04T14:38:52Z,"The more I think about this, the more I think we should drop the distinction between ""SOFT_FORK"" and ""CONSENSUS"" altogether.  At least when it comes to block processing, the only concept that matters is CONSENSUS.\n\nThe reason we care to distinguish SOFT_FORK from CONSENSUS is to highlight recent rule changes that our peers may not know about, so that the net_processing layer can optionally do ",https://github.com/bitcoin/bitcoin/pull/11639#issuecomment-370234133,370234133,
TheBlueMatt,2018-04-05T15:52:14Z,"Discussed this offline with @sdaftuar for a bit - I'm OK with redefining ""SOFT_FORK"" to mean ""any future SOFT_FORK after segwit, so is currently unused"", but I'd rather leave it there as we'd certainly need it for ""any future SOFT_FORK"". Happy to do so if others like. Still want more review here, though.",https://github.com/bitcoin/bitcoin/pull/11639#issuecomment-378984143,378984143,
sdaftuar,2018-04-05T17:01:41Z,"No objection to leaving ""SOFT_FORK"" in for future use (even if I'm not sure we'll ever use it, I am open to being convinced).  Nit: I would somewhat prefer to call it something other than ""SOFT_FORK"" -- perhaps ""RECENT_CONSENSUS_CHANGE"" or something else that indicates the relevant substance rather than the form? ",https://github.com/bitcoin/bitcoin/pull/11639#issuecomment-379005876,379005876,
sipa,2018-04-05T18:15:33Z,"Big concept ACK, I'm happy to see the DoS scores get out of the network processing logic.\n\nAs for SOFT_FORK vs CONSENSUS: I like calling it `RECENT_CONSENSUS_CHANGE` or something similar, and making it match whatever we're currently not banning for. The discussion about how to deal with softforks and banning and DoS protection in general is more complicated and can be continued later.",https://github.com/bitcoin/bitcoin/pull/11639#issuecomment-379029154,379029154,
TheBlueMatt,2018-04-05T18:47:03Z,"@sipa well, current master consider RECENT_CONSENSUS_CHANGE/not-banning as any soft fork, ever, kinda, but also some other stuff, but not SegWit things. Its kinda a grab-bag as @sdaftuar points out. This PR cleaned it up somewhat but aired on the side of ""all soft-forks"", @sdaftuar wants it to air more on the side of ""things after segwit"", which I think makes sense. Leaving it the way it is on mas",https://github.com/bitcoin/bitcoin/pull/11639#issuecomment-379038624,379038624,
sdaftuar,2018-04-05T20:15:14Z,"In the interests of advancing this refactor, I'm fine with doing whatever is least controversial (presumably, less change to existing behavior) in this PR, and saving the larger behavioral changes for a future PR.",https://github.com/bitcoin/bitcoin/pull/11639#issuecomment-379062592,379062592,
TheBlueMatt,2018-04-16T17:11:26Z,"Rebased and changed SOFT_FORK to RECENT_CONSENSUS_CHANGE, redefining it to mean ""change more recent than segwit"" (ie it is currently unused, as @sdaftuar requested).",https://github.com/bitcoin/bitcoin/pull/11639#issuecomment-381679879,381679879,
skeees,2018-04-16T17:12:32Z,"Concept ack to the motivation - while validation shouldn't be deciding how many points to assign peers, you could argue that it should be telling net processing ""this is rejected because I don't have enough information to assess that it is valid"" vs. ""this is invalid because it was maliciously constructed"" - it would be nice from a readability perspective if that were more immediately apparent (e.",https://github.com/bitcoin/bitcoin/pull/11639#issuecomment-381680248,381680248,
TheBlueMatt,2018-04-16T17:32:33Z,"I think the only cases where we can say ""I'm missing something this is based on"" is ValidationInvalidReason::MISSING_PREV and MISSING_INPUTS, which are pretty self-explanitory. Open to suggestions if you had something else in mind (or a comment to clarify).",https://github.com/bitcoin/bitcoin/pull/11639#issuecomment-381686281,381686281,
jnewbery,2018-04-16T21:19:09Z,"I've left a bunch of comments, mostly around making the commenting clearer.",https://github.com/bitcoin/bitcoin/pull/11639#issuecomment-381753221,381753221,
Empact,2018-04-17T04:40:29Z,Is it possible to also kill the `REJECT_*` codes here? They seem possibly duplicative with the new reason value.,https://github.com/bitcoin/bitcoin/pull/11639#issuecomment-381838239,381838239,
jnewbery,2018-04-17T19:49:18Z,"Much clearer to me now. Thanks for the updates!\n\nA few more comments inline.",https://github.com/bitcoin/bitcoin/pull/11639#issuecomment-382119120,382119120,
Empact,2018-04-18T22:29:22Z,"Renaming `ValidationInvalidReason` to `InvalidReason` would save 1,130 chars. Think of all those chars. ;)\nhttps://github.com/Empact/bitcoin/commit/beb63f3baadbe054f12ed8847fae4e38293cc46f",https://github.com/bitcoin/bitcoin/pull/11639#issuecomment-382549338,382549338,
MarcoFalke,2018-04-24T10:28:49Z,Needs rebase. (Presumably due to #13032),https://github.com/bitcoin/bitcoin/pull/11639#issuecomment-383883290,383883290,
TheBlueMatt,2018-04-27T17:54:53Z,"Rebased and addressed all outstanding feedback (I believe). I didnt opt for shortening the name of ""ValidationInvalidReason""...I dont think we should be shortening unless things are just as clear as the more verbose name.",https://github.com/bitcoin/bitcoin/pull/11639#issuecomment-385046530,385046530,
jnewbery,2018-04-30T14:20:42Z,utACK f29c11a45edb138711ae7004b3b550ba416fc215,https://github.com/bitcoin/bitcoin/pull/11639#issuecomment-385412468,385412468,
sipa,2018-05-01T00:04:07Z,utACK f29c11a45edb138711ae7004b3b550ba416fc215,https://github.com/bitcoin/bitcoin/pull/11639#issuecomment-385564203,385564203,
MarcoFalke,2018-05-08T22:30:48Z,weak utACK f29c11a45edb138711ae7004b3b550ba416fc215 (Did a single pass over all commits),https://github.com/bitcoin/bitcoin/pull/11639#issuecomment-387562958,387562958,
sipa,2018-05-13T18:42:28Z,Needs rebase due to #13185.,https://github.com/bitcoin/bitcoin/pull/11639#issuecomment-388647252,388647252,
TheBlueMatt,2018-05-13T19:26:00Z,(trivially) rebased. Would love another once-over from @sdaftuar.,https://github.com/bitcoin/bitcoin/pull/11639#issuecomment-388650002,388650002,
sipa,2018-05-14T17:16:36Z,re-utACK e73cf5195daa5b740775a1cd07ece992c6a89cae (verified that the only diff since my previous ACK after a rebase is dealing with #11423 and #13185).,https://github.com/bitcoin/bitcoin/pull/11639#issuecomment-388894349,388894349,
promag,2017-12-20T14:15:55Z,Also BOOST_CHECK_EQUAL?,https://github.com/bitcoin/bitcoin/pull/11639#discussion_r158033628,158033628,src/test/txvalidation_tests.cpp
promag,2017-12-20T14:25:50Z,"Make it `CONSENSUS` only if `NOT_STANDARD`? I know that atm only those 2 are set but, imo, it's more clear to do so inside that condition:\n```cpp\nif (state.GetReason() == ValidationInvalidReason::NOT_STANDARD) {\n    state.Invalid(ValidationInvalidReason::CONSENSUS, ...);\n}\n```\nThe same happens in line 1951.",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r158036096,158036096,src/validation.cpp
TheBlueMatt,2017-12-24T16:27:58Z,Doesn't compile as GetReason() can't be printed.,https://github.com/bitcoin/bitcoin/pull/11639#discussion_r158605611,158605611,src/test/txvalidation_tests.cpp
TheBlueMatt,2017-12-24T16:45:29Z,Done.,https://github.com/bitcoin/bitcoin/pull/11639#discussion_r158605955,158605955,src/validation.cpp
promag,2018-01-09T11:27:02Z,"ATM `CheckTxInputs` set `MISSING_INPUTS` and `CONSENSUS` reasons and only makes sense to override when reason is `MISSING_INPUTS`:\n```cpp\nif (state.GetReason() == ValidationInvalidReason::MISSING_INPUTS) {\n    state.Invalid(ValidationInvalidReason::CONSENSUS, ...);\n}\n```\n  ",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r160381451,160381451,src/validation.cpp
promag,2018-01-09T11:38:26Z,"`ValidationInvalidReason::NONE` instead?\n  ",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r160383713,160383713,src/consensus/validation.h
TheBlueMatt,2018-01-09T22:04:24Z,"Errrr....fixed, actually this time.",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r160538094,160538094,src/validation.cpp
TheBlueMatt,2018-01-09T22:04:30Z,"Sure, sounds good.",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r160538115,160538115,src/consensus/validation.h
sdaftuar,2018-02-27T18:30:07Z,"The arguments don't match here:\n```\nvalidation.cpp:1921:79: error: no viable conversion from 'std::string' (aka 'basic_string<char, char_traits<char>, allocator<char> >') to 'bool'\n                              state.GetRejectCode(), state.GetRejectReason(), state.GetDebugMessage());\n```\nbut more generally I think this would be a lot more readable if we could just add an explicit way to ",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r171021132,171021132,src/validation.cpp
sdaftuar,2018-02-27T18:34:21Z,I don't quite understand this comment?,https://github.com/bitcoin/bitcoin/pull/11639#discussion_r171022331,171022331,src/net_processing.cpp
sdaftuar,2018-02-27T18:36:09Z,nit: I personally find this fall-through for the non-compact block case harder to follow and more fragile than having each case end with a return or break.,https://github.com/bitcoin/bitcoin/pull/11639#discussion_r171022830,171022830,src/net_processing.cpp
sdaftuar,2018-02-27T19:09:23Z,I think this should probably be CONSENSUS rather than SOFT_FORK.,https://github.com/bitcoin/bitcoin/pull/11639#discussion_r171033168,171033168,src/validation.cpp
sdaftuar,2018-02-27T19:16:57Z,"Note that this could be ""SOFT_FORK"" (BIP 113).  But as I wrote elsewhere I think we should just use CONSENSUS everywhere in place of SOFT_FORK, for now.",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r171035667,171035667,src/validation.cpp
sdaftuar,2018-02-27T19:19:45Z,"If we're going to use this line of reasoning, then I think we may as well also not use SOFT_FORK anywhere else either (at least for invalid blocks, perhaps loose transactions should be different) -- presumably no nodes that support segwit validation should be unaware of any of the prior soft forks.",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r171036526,171036526,src/validation.cpp
sdaftuar,2018-02-27T19:39:27Z,"1) As all parallel-validation script failures are SOFT_FORK further down, I think we ought to make the non-parallel validation case be the same, rather than filter for NOT_STANDARD first.\n2) Since our blocks are only coming from segwit peers, I actually think we should just change all these to CONSENSUS anyway, and leave a comment explaining that when we deploy a new soft fork, we need to be car",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r171042519,171042519,src/validation.cpp
sdaftuar,2018-02-27T19:51:26Z,"Not really obvious here why we use MUTATED rather than WITNESS_MUTATED, here and in the next few lines (other than needing to match the code in InvalidBlockFound() and AcceptBlock(), which only check against MUTATED). Perhaps add a comment explaining the usage somewhere?",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r171045987,171045987,src/validation.cpp
TheBlueMatt,2018-03-02T15:29:26Z,"We should figure out where we want to draw a line between CONSENSUS (ban the peer) and SOFT_FORK (ignore the peer). Obviously this case *is* a SOFT_FORK, but at this point its so old that it may not be worth keeping that distinction. I aired on the side of ""let any node, no matter how old, not get banned"" in general.",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r171877060,171877060,src/validation.cpp
TheBlueMatt,2018-03-02T15:30:27Z,WITNESS_MUTATED is only for transactions. In the future we could separate out the InvalidReason into two different ones for transactions/blocks.,https://github.com/bitcoin/bitcoin/pull/11639#discussion_r171877364,171877364,src/validation.cpp
TheBlueMatt,2018-03-02T15:33:12Z,"Huh? Doing so would break the ability of a pre-segwit node to provide us a non-segwit-but-valid block. Further, this line of reasoning does *not* assume that we only download blocks from segwit-enabled peers (which may be the case in practice in our current net layer, but making that assumption strong in validation seems bad). The line of reasoning here is only applicable to nodes that *provided* ",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r171878154,171878154,src/validation.cpp
TheBlueMatt,2018-03-02T15:34:51Z,"I'm confused. The NOT_STANDARD return here is to keep behavior the same for transactions as well as blocks. NOT_STANDARD is not a valid response for block ValidationReasons, so we have to swap it here.",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r171878581,171878581,src/validation.cpp
sdaftuar,2018-03-04T14:23:05Z,"Re 1), I'm just saying that we should always rewrite the reason to be the same as we'd get if we did parallel validation (which is SOFT_FORK in this PR currently), versus only return SOFT_FORK if the reason was NOT_STANDARD.  It doesn't really make sense for ConnectBlock() to behave differently with regard to error codes if using single vs parallel script checking.",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r172050340,172050340,src/validation.cpp
MarcoFalke,2018-04-16T18:01:49Z,"from the linter: ""All calls to LogPrintf() should be terminated with \n""",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r181833367,181833367,src/validation.cpp
jnewbery,2018-04-16T19:21:14Z,"I'm not a big fan of these colorful comments - mainly because without context, it's difficult for new contributors to understand the spirit in which they were written.\n\nCan we keep them a bit more precise, eg `A reason why something was invalid. This is used to determine what action to take towards the provider of the object (eg disconnect, ban, etc).`",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r181856096,181856096,src/consensus/validation.h
jnewbery,2018-04-16T19:27:50Z,"I find this comment really difficult to parse. What are the witness's important clients? Also, please remove `bother to`.",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r181857895,181857895,src/validation.cpp
jnewbery,2018-04-16T19:32:18Z,This seems to contradict the comment above `we still consider this an invalid rather than merely non-standard transaction.` Perhaps update the comment?,https://github.com/bitcoin/bitcoin/pull/11639#discussion_r181859175,181859175,src/validation.cpp
jnewbery,2018-04-16T19:37:11Z,"Perhaps update comment above, which talks about DoS banning nodes.",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r181860495,181860495,src/validation.cpp
jnewbery,2018-04-16T19:49:33Z,"This comment would be clearer if it explained *why* the reason needs to be changed, rather than just asserting that ""its nonsense"". Perhaps something like:\n\n```\n`MISSING_INPUTS` is a legitimate `InvalidReason` for a transaction, but not for a block. If one of the block's transactions is missing inputs, then the block is consensus invalid. Update the `InvalidReason`.\n```\n\nSame for the o",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r181863702,181863702,src/validation.cpp
jnewbery,2018-04-16T19:50:56Z,"I don't understand this TODO. We are returning CONSENSUS here, not SOFT_FORK.",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r181864068,181864068,src/validation.cpp
jnewbery,2018-04-16T19:52:23Z,It may be clearer to prefix the block-only reasons with `BLOCK_` and the transaction-only reasons with `TX_`,https://github.com/bitcoin/bitcoin/pull/11639#discussion_r181864480,181864480,src/consensus/validation.h
jnewbery,2018-04-16T19:59:25Z,"It's not clear to me why you've removed the `Invalid()` call in the _Add useful-for-dos ""reason"" field to CValidationState_ commit.",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r181866293,181866293,src/validation.cpp
jnewbery,2018-04-16T20:01:51Z,I also don't understand this comment!,https://github.com/bitcoin/bitcoin/pull/11639#discussion_r181866943,181866943,src/net_processing.cpp
jnewbery,2018-04-16T20:02:33Z,"What does ""duplicate of invalid "" mean?",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r181867122,181867122,src/net_processing.cpp
jnewbery,2018-04-16T20:03:15Z,Agree. an `else return true` would be clearer here.,https://github.com/bitcoin/bitcoin/pull/11639#discussion_r181867308,181867308,src/net_processing.cpp
jnewbery,2018-04-16T20:04:04Z,What does this mean?!,https://github.com/bitcoin/bitcoin/pull/11639#discussion_r181867540,181867540,src/net_processing.cpp
jnewbery,2018-04-16T20:13:49Z,"Actually, I think this would be clearer if it wasn't a `switch` statement at all. There are only a handful of cases where we return true. Explicitly test them and return false otherwise.",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r181870187,181870187,src/net_processing.cpp
jnewbery,2018-04-16T20:15:45Z,"Again, not sure what this means. In this function `MISSING_PREV` seems to count as `Speed-of-light or out-of-sync`, but not in `MayResultInDisconnect()`",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r181870743,181870743,src/net_processing.cpp
jnewbery,2018-04-16T20:16:35Z,"Again, I think this is clearer if you remove the switch statement.",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r181870985,181870985,src/net_processing.cpp
jnewbery,2018-04-16T20:40:13Z,"Ah, I think I understand now. This comment should be clarified and moved to the enum definition. Perhaps even rename to `DUPLICATE_INVALID`?",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r181877907,181877907,src/net_processing.cpp
jnewbery,2018-04-16T20:46:36Z,"This `!it->second.second` is pretty obscure:\n\n- when adding an entry to `mapBlockSource`, we check whether it was received as a compact block, invert that to mean 'should punish peer'\n- when reading from `mapBlockSource`, we take the `.second`, and invert it to mean `via compact_block` before calling `MaybePunishNode()`.\n\nCan we change `mapBlockSource` to just store whether the block was",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r181879716,181879716,src/net_processing.cpp
jnewbery,2018-04-16T20:53:00Z,This seems unnecessary. Why not just log inside `MaybePunishNode()` (it knows whether it called `Misbehaving()`) and remove the return value from `MaybePunishNode()`. Then the callers don't need to worry about logging.,https://github.com/bitcoin/bitcoin/pull/11639#discussion_r181881401,181881401,src/net_processing.cpp
jnewbery,2018-04-16T20:58:54Z,Can you comment *why* you think this is ungraceful?,https://github.com/bitcoin/bitcoin/pull/11639#discussion_r181883001,181883001,src/net_processing.cpp
jnewbery,2018-04-16T21:18:23Z,"Alternatively, you could just change this function to return whether `reason` is set to `MUTATED` or `WITNESS_MUTATED`",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r181888861,181888861,src/consensus/validation.h
Empact,2018-04-17T03:06:56Z,"Renaming this `InvalidReason` would save a lot of chars overall. The only other prefix in this module is `REJECT_`, so `RejectReason` is an option.",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r181941331,181941331,src/consensus/validation.h
Empact,2018-04-17T03:07:27Z,Agreed,https://github.com/bitcoin/bitcoin/pull/11639#discussion_r181941390,181941390,src/consensus/validation.h
Empact,2018-04-17T03:51:43Z,"The `Invalid` call here just adds to the debug info - see that each arg is carried over from the existing state, and the debug `strprintf` prepends a message to the existing debug info. Logging is potentially an equivalently communicative alternative, though I would use `FormatStateMessage` here to include all the state info.",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r181945752,181945752,src/validation.cpp
TheBlueMatt,2018-04-17T15:08:12Z,Gotta ruin all my fun...fixed.,https://github.com/bitcoin/bitcoin/pull/11639#discussion_r182108089,182108089,src/consensus/validation.h
TheBlueMatt,2018-04-17T15:08:14Z,Removed the comment and replaced it with a more detailed comment on the WITNESS_MUTATED definition.,https://github.com/bitcoin/bitcoin/pull/11639#discussion_r182108096,182108096,src/validation.cpp
TheBlueMatt,2018-04-17T15:08:15Z,"Removed the comment, looks like it was just wrong.",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r182108104,182108104,src/validation.cpp
TheBlueMatt,2018-04-17T15:08:17Z,Removed the comment. It isnt adding anything that the RECENT_CONSENSUS_CHANGE documentation didnt already cover.,https://github.com/bitcoin/bitcoin/pull/11639#discussion_r182108113,182108113,src/validation.cpp
TheBlueMatt,2018-04-17T15:08:20Z,Ah missed removing that when I changed things for @sdaftuar's suggestion. Removed.,https://github.com/bitcoin/bitcoin/pull/11639#discussion_r182108122,182108122,src/validation.cpp
TheBlueMatt,2018-04-17T15:08:20Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/11639#discussion_r182108127,182108127,src/validation.cpp
TheBlueMatt,2018-04-17T15:08:23Z,"I'd rather just split it up into separate validation state objects in a later refactor, then its type-checked  instead.",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r182108139,182108139,src/consensus/validation.h
TheBlueMatt,2018-04-17T15:08:25Z,Clearer?,https://github.com/bitcoin/bitcoin/pull/11639#discussion_r182108148,182108148,src/net_processing.cpp
TheBlueMatt,2018-04-17T15:08:26Z,"The enum definition is pretty clear IMO ""this object was cached as being invalid, but we don't know why"". Any suggestions for a different comment?",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r182108153,182108153,src/net_processing.cpp
TheBlueMatt,2018-04-17T15:08:28Z,"Happy to do it in a followup, this is already enough code and I don't want to risk a bug if it sits for another 6 months and requires rebase.",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r182108170,182108170,src/net_processing.cpp
TheBlueMatt,2018-04-17T15:08:28Z,Done.,https://github.com/bitcoin/bitcoin/pull/11639#discussion_r182108178,182108178,src/net_processing.cpp
TheBlueMatt,2018-04-17T15:08:30Z,Then it'd be dead code and forcing the caller to be more clear about what *exactly* they're checking for is much more stable.,https://github.com/bitcoin/bitcoin/pull/11639#discussion_r182108196,182108196,src/consensus/validation.h
TheBlueMatt,2018-04-17T15:08:31Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/11639#discussion_r182108202,182108202,src/net_processing.cpp
jnewbery,2018-04-17T19:21:56Z,"I still think this comment belongs where the enum is defined. Something like:\n\n`/!< this object was previously cached as being invalid, and we've now received a duplicate notification. We don't store the reason that it was previously marked invalid.",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r182197193,182197193,src/net_processing.cpp
jnewbery,2018-04-17T19:22:42Z,"Not addressed.\n\nFall through `case` statements are confusing.",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r182197387,182197387,src/net_processing.cpp
TheBlueMatt,2018-04-17T19:24:58Z,"""where the enum is defined"" - I'm confused, at the enum definition it says ""this object was cached as being invalid, but we don't know why"", is that insufficient?",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r182197991,182197991,src/net_processing.cpp
jnewbery,2018-04-17T19:27:37Z,"Sounds good, but is there any downside to making it clearer until that future refactor?",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r182198646,182198646,src/consensus/validation.h
jnewbery,2018-04-17T19:36:39Z,"Apparently it is insufficient, since you've felt the need to leave a comment here explaining what you really mean (and repeated it in the function below) :slightly_smiling_face: ",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r182201058,182201058,src/net_processing.cpp
jnewbery,2018-04-17T19:38:57Z,"At this point, it's clearer to switch the ordering of the conditionals:\n\n```\n                if (state.IsInvalid() && MayResultInDisconnect(state, false)) {\n                    LogPrintf(""Not relaying invalid transaction %s from whitelisted peer=%d (%s)\n"", tx.GetHash().ToString(), pfrom->GetId(), FormatStateMessage(state));\n                } else {\n                    LogPrintf(""Force",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r182201679,182201679,src/net_processing.cpp
jnewbery,2018-04-17T19:46:44Z,Understood. This is fine as is.,https://github.com/bitcoin/bitcoin/pull/11639#discussion_r182203717,182203717,src/consensus/validation.h
jnewbery,2018-04-17T19:47:50Z,"Yes - can be done in a follow up, but in the meantime:\n\n` MaybePunishNode(it->second.first, state, !it->second.second);`\n\nis almost completely inscrutable!",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r182204007,182204007,src/net_processing.cpp
Empact,2018-04-18T22:25:27Z,"In fairness, it was this way when he found it. :P Def worthy of cleanup.",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r182587368,182587368,src/net_processing.cpp
Empact,2018-04-18T22:26:08Z,"Agreed the comment should be carried over, or the value renamed.",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r182587516,182587516,src/net_processing.cpp
sipa,2018-04-20T20:31:19Z,"CONSENSUS seems strange here, as it's not a script or amount violation.\n\nCONFLICT or MISSING_INPUTS seems more appropriate.",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r183161894,183161894,src/validation.cpp
sipa,2018-04-20T20:32:47Z,Nit: it's,https://github.com/bitcoin/bitcoin/pull/11639#discussion_r183162234,183162234,src/validation.cpp
sipa,2018-04-20T20:37:01Z,"The distinction between CONFLICT and MEMPOOL_LIMIT seems very vague (at least when it's about conflicts with the existing mempool), and perhaps hard to maintain if the mempool policy gets more complicated.\n\nWhat would you think about using CONFLICT only for conflicts with confirmed transactions, and have a MEMPOOL_POLICY for all the rest?",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r183163307,183163307,src/consensus/validation.h
sipa,2018-04-20T20:38:00Z,Nit: it's,https://github.com/bitcoin/bitcoin/pull/11639#discussion_r183163513,183163513,src/validation.cpp
sipa,2018-04-20T20:40:33Z,"How is this possible? CheckInputs for blocks should only run with consensus flags, in which case we shouldn't ever return NOT_STANDARD, I think?",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r183164079,183164079,src/validation.cpp
sipa,2018-04-20T21:04:31Z,"This seems fixed now, @sdaftuar?",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r183169268,183169268,src/validation.cpp
TheBlueMatt,2018-04-23T15:05:53Z,"MISSING_INPUTS and CONFLICT imply that its possible the transaction may be valid, but we're missing something or otherwise unable to add it to the mempool right now. That is not the case here - there is no way this transaction could have been included in the mempool of any well-behaved node, nor could it ever make it into a block, so CONSENSUS is correct here.",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r183429342,183429342,src/validation.cpp
TheBlueMatt,2018-04-23T15:17:35Z,"In an earlier version of the patch it may have returned NON_STANDARD for flags which were added in a soft fork, but at @sdaftuar's suggestion that is no longer the case. Will fix the comment, but we'll need this when we need RECENT_CONSENSUS_CHANGE at some point.",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r183433629,183433629,src/validation.cpp
TheBlueMatt,2018-04-23T15:17:39Z,Seems reasonable. Will do.,https://github.com/bitcoin/bitcoin/pull/11639#discussion_r183433656,183433656,src/consensus/validation.h
sipa,2018-04-23T18:09:32Z,"Ah, I see. The block ""missing inputs"" case is also reported as CONSENSUS; makes sense.",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r183488403,183488403,src/validation.cpp
TheBlueMatt,2018-04-27T17:54:07Z,Done.,https://github.com/bitcoin/bitcoin/pull/11639#discussion_r184761398,184761398,src/net_processing.cpp
TheBlueMatt,2018-04-27T17:54:09Z,Cleaned up.,https://github.com/bitcoin/bitcoin/pull/11639#discussion_r184761408,184761408,src/net_processing.cpp
TheBlueMatt,2018-04-27T17:54:13Z,Fixed,https://github.com/bitcoin/bitcoin/pull/11639#discussion_r184761427,184761427,src/validation.cpp
TheBlueMatt,2018-04-27T17:54:16Z,Fixed,https://github.com/bitcoin/bitcoin/pull/11639#discussion_r184761443,184761443,src/validation.cpp
MarcoFalke,2018-04-27T20:19:53Z,Should this be `orphan_state` instead of `state`?,https://github.com/bitcoin/bitcoin/pull/11639#discussion_r184796933,184796933,src/net_processing.cpp
Empact,2018-05-01T00:25:33Z,"Not worthy of revisiting here, but fyi I added a facility here to support `BOOST_CHECK_EQUAL` for enum: https://github.com/bitcoin/bitcoin/pull/13076/files#diff-4a0cb5ad5e93d187a1b065a99bbae143",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r185145409,185145409,src/test/txvalidation_tests.cpp
sdaftuar,2018-05-14T12:18:37Z,"nit:  TX_CONFLICT for conflicting with an in-mempool transaction makes sense to me, but it's not clear to me why we'd also include 'duplicate-transaction-in-chain' and 'conflicts-with-an-in-chain-transaction' as a reason, which would be covered by TX_MISSING_INPUTS?  ",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r187931800,187931800,src/consensus/validation.h
sdaftuar,2018-05-14T12:27:11Z,"nit: I commented elsewhere that I thought this may make more sense as MISSING_INPUTS, but either way, it would be nice to add a comment explaining why we're not using CONSENSUS here.  (I think it's because relay delays can cause transaction to propagate after a block is found, and CONSENSUS errors are for things that should never be propagated in the first place -- is there another reason?)",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r187934135,187934135,src/validation.cpp
sdaftuar,2018-05-14T12:30:24Z,"nit: This seems fine, but I did note that for premature coinbase spends, we return MISSING_INPUTS, whereas for premature bip68 spends, we're returning NOT_STANDARD.  Seems like those could be the same reason? ",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r187934987,187934987,src/validation.cpp
sdaftuar,2018-05-14T12:43:18Z,"nit: this seems brittle, as a future change to CheckTxInputs that returns a new reason code would break this logic.  Can we just always overwrite the reason to be CONSENSUS, or perhaps overwrite it to be CONSENSUS if the reason code is not a valid block-reason?",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r187938513,187938513,src/validation.cpp
sdaftuar,2018-05-15T14:47:07Z,"nit: Similar to my nit above for handling CheckTxInputs() response, it seems brittle to look for one kind of error code and only overwrite to CONSENSUS in that case.  If someone changes CheckInputs() in the future to return other TX invalid-reasons, then this logic won't be correct, and this would be an easy oversight.\n\nI would suggest that we always overwrite the reason here to be CONSENSUS (",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r188316014,188316014,src/validation.cpp
sdaftuar,2018-05-15T14:57:40Z,"nit: ""(or headers)""?",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r188320470,188320470,src/consensus/validation.h
sdaftuar,2018-05-15T15:00:11Z,"nit: ""is is""",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r188321473,188321473,src/net_processing.cpp
sdaftuar,2018-05-15T17:31:23Z,"I believe this can result in a behavior change, where we would DoS-ban peers that send duplicate headers that are invalid.",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r188372100,188372100,src/net_processing.cpp
sdaftuar,2018-05-15T17:39:52Z,"This also appears to be a behavior change; some headers failures currently result in a Misbehaving call, but as-is I believe compact block peers are never punished for errors here?",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r188374633,188374633,src/net_processing.cpp
Empact,2018-05-16T05:22:00Z,nit: `return !via_compact_block`,https://github.com/bitcoin/bitcoin/pull/11639#discussion_r188505707,188505707,src/net_processing.cpp
Empact,2018-05-16T05:23:34Z,"Maybe log a warning or throw on the default case, to make unhandled cases more visible?",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r188505852,188505852,src/net_processing.cpp
Empact,2018-05-16T05:46:01Z,"FYI, a more self-documenting alternative looks something like:\n```c++\nif (state.IsInvalid()) {      \n    // Don't send reject message with code 0 or an internal reject code.\n    NodeId node_id;\n    bool punish_if_block_invalid;\n    std::tie(node_id, punish_if_block_invalid) = it->second;\n    if (it != mapBlockSource.end() && State(node_id) && state.GetRejectCode() > 0 && state.GetRej",https://github.com/bitcoin/bitcoin/pull/11639#discussion_r188508491,188508491,src/net_processing.cpp
Empact,2018-05-16T05:52:08Z,nit: I still think the full `FormatStateMessage` is the better info to record here.,https://github.com/bitcoin/bitcoin/pull/11639#discussion_r188509273,188509273,src/validation.cpp
