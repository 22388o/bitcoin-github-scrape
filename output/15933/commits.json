[
  {
    "sha": "faa48ffa2e54df13ad8ca9959e119d78b074d790",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWE0OGZmYTJlNTRkZjEzYWQ4Y2E5OTU5ZTExOWQ3OGIwNzRkNzkw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-05-01T21:17:39Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-05-07T17:38:13Z"
      },
      "message": "Make chain state immutable outside of validation",
      "tree": {
        "sha": "3b228491bee9066b34435acbda4ec8dd3010444a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b228491bee9066b34435acbda4ec8dd3010444a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faa48ffa2e54df13ad8ca9959e119d78b074d790",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhJiwv/dbDoU+Smgurna/gwC78WpG84HW4oIMdVJj4lsOPwjV6PLXc87BR7WLLg\nqwdA8n/yTPuMqE3uK2co98Nc7mdTyAod6mkqNieHmo76mEL+mafKe+qSfMyppvP4\nFhopa3qRxo1CUIJ+kA876kqy6WrZrgaw6zUZEUAkKFrg4vpe16g0Pk6o7N0Etaic\nAQhc6LhhJ0Ju3BjpfYKDeCm0SngCQGtKMBumn5USK60yfVDGAJfXGtni9U+lEDMn\nb+tYLyAQHc3PCwdDvlYralzHQ4CmxX6lNKXWHA7IM4zplyoBFHm49gtetVYCtbq8\nKrFwHK2RV8mkmmmKecig9WiAJz8pKJ2gyDl6nC4RWmH9lRMQlbZhtChOxhZo7qTM\nyOl0BZhmBvyEYWKeN8HkFoLUcJ4dPZQ1lnIhUEsnFZNgiHHq0z91L2HVMPDd8fFw\ndSrNMGf/xUcv1Ay6FYaEu5Ecro0EKcKiEydcAumuSfYWKjS1j38/VUdq8JdM1OHG\n53lxhWPp\n=zFtg\n-----END PGP SIGNATURE-----",
        "payload": "tree 3b228491bee9066b34435acbda4ec8dd3010444a\nparent b2a6b0216192b6e8428f1a80b47f5178fccb961a\nauthor MarcoFalke <falke.marco@gmail.com> 1556745459 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1557250693 -0400\n\nMake chain state immutable outside of validation\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa48ffa2e54df13ad8ca9959e119d78b074d790",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faa48ffa2e54df13ad8ca9959e119d78b074d790",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa48ffa2e54df13ad8ca9959e119d78b074d790/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b2a6b0216192b6e8428f1a80b47f5178fccb961a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2a6b0216192b6e8428f1a80b47f5178fccb961a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b2a6b0216192b6e8428f1a80b47f5178fccb961a"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 32,
      "deletions": 21
    },
    "files": [
      {
        "sha": "87e0ccb57a71d94140d0f695ca82386a355248a4",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa48ffa2e54df13ad8ca9959e119d78b074d790/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa48ffa2e54df13ad8ca9959e119d78b074d790/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=faa48ffa2e54df13ad8ca9959e119d78b074d790",
        "patch": "@@ -1528,7 +1528,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n \n                 // If the loaded chain has a wrong genesis, bail out immediately\n                 // (we're likely using a testnet datadir, or the other way around).\n-                if (!mapBlockIndex.empty() && !LookupBlockIndex(chainparams.GetConsensus().hashGenesisBlock)) {\n+                if (!BlockIndex().empty() && !LookupBlockIndex(chainparams.GetConsensus().hashGenesisBlock)) {\n                     return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));\n                 }\n \n@@ -1758,7 +1758,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n     //// debug print\n     {\n         LOCK(cs_main);\n-        LogPrintf(\"mapBlockIndex.size() = %u\\n\", mapBlockIndex.size());\n+        LogPrintf(\"mapBlockIndex.size() = %u\\n\", BlockIndex().size());\n         chain_active_height = ::ChainActive().Height();\n     }\n     LogPrintf(\"nBestHeight = %d\\n\", chain_active_height);"
      },
      {
        "sha": "2a883dc4dcd2a22f29e86d64b01f0c7cf9278c9c",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa48ffa2e54df13ad8ca9959e119d78b074d790/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa48ffa2e54df13ad8ca9959e119d78b074d790/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=faa48ffa2e54df13ad8ca9959e119d78b074d790",
        "patch": "@@ -1443,8 +1443,7 @@ static UniValue getchaintips(const JSONRPCRequest& request)\n     std::set<const CBlockIndex*> setOrphans;\n     std::set<const CBlockIndex*> setPrevs;\n \n-    for (const std::pair<const uint256, CBlockIndex*>& item : mapBlockIndex)\n-    {\n+    for (const std::pair<const uint256, CBlockIndex*>& item : BlockIndex()) {\n         if (!::ChainActive().Contains(item.second)) {\n             setOrphans.insert(item.second);\n             setPrevs.insert(item.second->pprev);"
      },
      {
        "sha": "3001d9f012a9dd6d458d0782b4f87684b784d5b4",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa48ffa2e54df13ad8ca9959e119d78b074d790/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa48ffa2e54df13ad8ca9959e119d78b074d790/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=faa48ffa2e54df13ad8ca9959e119d78b074d790",
        "patch": "@@ -8,15 +8,15 @@\n #include <consensus/merkle.h>\n #include <consensus/tx_verify.h>\n #include <consensus/validation.h>\n-#include <validation.h>\n #include <miner.h>\n #include <policy/policy.h>\n #include <pubkey.h>\n #include <script/standard.h>\n #include <txmempool.h>\n #include <uint256.h>\n-#include <util/system.h>\n #include <util/strencodings.h>\n+#include <util/system.h>\n+#include <validation.h>\n \n #include <test/setup_common.h>\n \n@@ -377,7 +377,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         next->pprev = prev;\n         next->nHeight = prev->nHeight + 1;\n         next->BuildSkip();\n-        ::ChainActive().SetTip(next);\n+        MutableChainActive().SetTip(next);\n     }\n     BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n     // Extend to a 210000-long block chain.\n@@ -389,7 +389,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         next->pprev = prev;\n         next->nHeight = prev->nHeight + 1;\n         next->BuildSkip();\n-        ::ChainActive().SetTip(next);\n+        MutableChainActive().SetTip(next);\n     }\n     BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n \n@@ -414,7 +414,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     // Delete the dummy blocks again.\n     while (::ChainActive().Tip()->nHeight > nHeight) {\n         CBlockIndex* del = ::ChainActive().Tip();\n-        ::ChainActive().SetTip(del->pprev);\n+        ::MutableChainActive().SetTip(del->pprev);\n         pcoinsTip->SetBestBlock(del->pprev->GetBlockHash());\n         delete del->phashBlock;\n         delete del;"
      },
      {
        "sha": "e8949227b19e423d0b935260bfc750912736ba85",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa48ffa2e54df13ad8ca9959e119d78b074d790/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa48ffa2e54df13ad8ca9959e119d78b074d790/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=faa48ffa2e54df13ad8ca9959e119d78b074d790",
        "patch": "@@ -220,7 +220,11 @@ class CChainState {\n     void EraseBlockData(CBlockIndex* index) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n } g_chainstate;\n \n-CChain& ChainActive() { return g_chainstate.m_chain; }\n+const CChain& ChainActive() { return g_chainstate.m_chain; }\n+CChain& MutableChainActive() { return g_chainstate.m_chain; }\n+\n+const BlockMap& BlockIndex() { return g_chainstate.mapBlockIndex; }\n+BlockMap& MutableBlockIndex() { return g_chainstate.mapBlockIndex; }\n \n /**\n  * Mutex to guard access to validation specific variables, such as reading\n@@ -234,7 +238,6 @@ CChain& ChainActive() { return g_chainstate.m_chain; }\n  */\n RecursiveMutex cs_main;\n \n-BlockMap& mapBlockIndex = g_chainstate.mapBlockIndex;\n CBlockIndex *pindexBestHeader = nullptr;\n Mutex g_best_block_mutex;\n std::condition_variable g_best_block_cv;\n@@ -265,6 +268,7 @@ CScript COINBASE_FLAGS;\n \n // Internal stuff\n namespace {\n+    BlockMap& mapBlockIndex = g_chainstate.mapBlockIndex;\n     CBlockIndex *&pindexBestInvalid = g_chainstate.pindexBestInvalid;\n \n     /** All pairs A->B, where A (or one of its ancestors) misses transactions, but B has transactions.\n@@ -3262,7 +3266,7 @@ static bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationSta\n     if (fCheckpointsEnabled) {\n         // Don't accept any forks from the main chain prior to last checkpoint.\n         // GetLastCheckpoint finds the last checkpoint in MapCheckpoints that's in our\n-        // MapBlockIndex.\n+        // BlockIndex.\n         CBlockIndex* pcheckpoint = GetLastCheckpoint(params.Checkpoints());\n         if (pcheckpoint && nHeight < pcheckpoint->nHeight)\n             return state.Invalid(ValidationInvalidReason::BLOCK_CHECKPOINT, error(\"%s: forked chain older than last checkpoint (height %d)\", __func__, nHeight), REJECT_CHECKPOINT, \"bad-fork-prior-to-checkpoint\");\n@@ -3970,7 +3974,7 @@ bool LoadChainTip(const CChainParams& chainparams)\n     if (!pindex) {\n         return false;\n     }\n-    ::ChainActive().SetTip(pindex);\n+    ::MutableChainActive().SetTip(pindex);\n \n     g_chainstate.PruneBlockIndexCandidates();\n \n@@ -4342,7 +4346,7 @@ void CChainState::UnloadBlockIndex() {\n void UnloadBlockIndex()\n {\n     LOCK(cs_main);\n-    ::ChainActive().SetTip(nullptr);\n+    ::MutableChainActive().SetTip(nullptr);\n     pindexBestInvalid = nullptr;\n     pindexBestHeader = nullptr;\n     mempool.clear();"
      },
      {
        "sha": "e4bef3c81a6868b3371d1a73184f9374c72a806b",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 13,
        "deletions": 5,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa48ffa2e54df13ad8ca9959e119d78b074d790/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa48ffa2e54df13ad8ca9959e119d78b074d790/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=faa48ffa2e54df13ad8ca9959e119d78b074d790",
        "patch": "@@ -143,7 +143,6 @@ extern CCriticalSection cs_main;\n extern CBlockPolicyEstimator feeEstimator;\n extern CTxMemPool mempool;\n typedef std::unordered_map<uint256, CBlockIndex*, BlockHasher> BlockMap;\n-extern BlockMap& mapBlockIndex GUARDED_BY(cs_main);\n extern Mutex g_best_block_mutex;\n extern std::condition_variable g_best_block_cv;\n extern uint256 g_best_block;\n@@ -412,11 +411,17 @@ class CVerifyDB {\n /** Replay blocks that aren't fully applied to the database. */\n bool ReplayBlocks(const CChainParams& params, CCoinsView* view);\n \n+/** @returns the block index map (a map from hash to block index). */\n+const BlockMap& BlockIndex() EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+\n+/** Only used in tests. */\n+BlockMap& MutableBlockIndex() EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+\n inline CBlockIndex* LookupBlockIndex(const uint256& hash)\n {\n     AssertLockHeld(cs_main);\n-    BlockMap::const_iterator it = mapBlockIndex.find(hash);\n-    return it == mapBlockIndex.end() ? nullptr : it->second;\n+    BlockMap::const_iterator it = BlockIndex().find(hash);\n+    return it == BlockIndex().end() ? nullptr : it->second;\n }\n \n /** Find the last common block between the parameter chain and a locator. */\n@@ -435,8 +440,11 @@ bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, C\n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n-/** @returns the most-work chain. */\n-CChain& ChainActive();\n+/** @returns the most-work valid chain (protected by cs_main) */\n+const CChain& ChainActive();\n+\n+/** Only used in tests. */\n+CChain& MutableChainActive() EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /** Global variable that points to the coins database (protected by cs_main) */\n extern std::unique_ptr<CCoinsViewDB> pcoinsdbview;"
      },
      {
        "sha": "b5aaff5a3873117a2a0b5af07e5eaf2923ad933e",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa48ffa2e54df13ad8ca9959e119d78b074d790/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa48ffa2e54df13ad8ca9959e119d78b074d790/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=faa48ffa2e54df13ad8ca9959e119d78b074d790",
        "patch": "@@ -12,12 +12,12 @@\n \n #include <consensus/validation.h>\n #include <interfaces/chain.h>\n+#include <policy/policy.h>\n #include <rpc/server.h>\n #include <test/setup_common.h>\n #include <validation.h>\n #include <wallet/coincontrol.h>\n #include <wallet/test/wallet_test_fixture.h>\n-#include <policy/policy.h>\n \n #include <boost/test/unit_test.hpp>\n #include <univalue.h>\n@@ -272,7 +272,7 @@ static int64_t AddTx(CWallet& wallet, uint32_t lockTime, int64_t mockTime, int64\n     if (blockTime > 0) {\n         LockAnnotation lock(::cs_main);\n         auto locked_chain = wallet.chain().lock();\n-        auto inserted = mapBlockIndex.emplace(GetRandHash(), new CBlockIndex);\n+        auto inserted = MutableBlockIndex().emplace(GetRandHash(), new CBlockIndex);\n         assert(inserted.second);\n         const uint256& hash = inserted.first->first;\n         block = inserted.first->second;"
      }
    ]
  }
]