[
  {
    "sha": "2fcaec7bbb96d6fe72a7e3a5744b0c35c79733e8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZmNhZWM3YmJiOTZkNmZlNzJhN2UzYTU3NDRiMGMzNWM3OTczM2U4",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-03-22T22:48:17Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-07-30T00:40:17Z"
      },
      "message": "[net_processing] Introduce SetupAddressRelay\n\nIdempotent function that initializes m_addr_known for connections that support\naddress relay (anything other than block-relay-only). Unused until the next\ncommit.",
      "tree": {
        "sha": "a1e9a9b03bd4ba4db75cabc00853f6078c077e0f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a1e9a9b03bd4ba4db75cabc00853f6078c077e0f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2fcaec7bbb96d6fe72a7e3a5744b0c35c79733e8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fcaec7bbb96d6fe72a7e3a5744b0c35c79733e8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2fcaec7bbb96d6fe72a7e3a5744b0c35c79733e8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fcaec7bbb96d6fe72a7e3a5744b0c35c79733e8/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7925f3aba820f8965293148ef666c59f87dd3c7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7925f3aba820f8965293148ef666c59f87dd3c7f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7925f3aba820f8965293148ef666c59f87dd3c7f"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 25,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1d53d1a1b772a255b188312600fe8d80f2d52132",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 1,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fcaec7bbb96d6fe72a7e3a5744b0c35c79733e8/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fcaec7bbb96d6fe72a7e3a5744b0c35c79733e8/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=2fcaec7bbb96d6fe72a7e3a5744b0c35c79733e8",
        "patch": "@@ -226,7 +226,7 @@ struct Peer {\n     std::vector<CAddress> m_addrs_to_send;\n     /** Probabilistic filter of addresses that this peer already knows.\n      *  Used to avoid relaying addresses to this peer more than once. */\n-    const std::unique_ptr<CRollingBloomFilter> m_addr_known;\n+    std::unique_ptr<CRollingBloomFilter> m_addr_known;\n     /** Whether a getaddr request to this peer is outstanding. */\n     bool m_getaddr_sent{false};\n     /** Guards address sending timers. */\n@@ -612,6 +612,14 @@ class PeerManagerImpl final : public PeerManager\n      * @param[in]   vRecv           The raw message received\n      */\n     void ProcessGetCFCheckPt(CNode& peer, CDataStream& vRecv);\n+\n+    /** Checks if address relay is permitted with peer. Initializes\n+     * `m_addr_known` bloom filter if needed.\n+     *\n+     *  @return   True if address relay is enabled with peer\n+     *            False if address relay is disallowed\n+     */\n+    bool SetupAddressRelay(CNode& node, Peer& peer);\n };\n } // namespace\n \n@@ -4423,6 +4431,22 @@ class CompareInvMempoolOrder\n };\n }\n \n+bool PeerManagerImpl::SetupAddressRelay(CNode& node, Peer& peer)\n+{\n+    // We don't participate in addr relay with outbound block-relay-only\n+    // connections to prevent providing adversaries with the additional\n+    // information of addr traffic to infer the link.\n+    if (node.IsBlockOnlyConn()) return false;\n+\n+    if (!RelayAddrsWithPeer(peer)) {\n+        // First addr message we have received from the peer, initialize\n+        // m_addr_known\n+        peer.m_addr_known = std::make_unique<CRollingBloomFilter>(5000, 0.001);\n+    }\n+\n+    return true;\n+}\n+\n bool PeerManagerImpl::SendMessages(CNode* pto)\n {\n     PeerRef peer = GetPeerRef(pto->GetId());"
      }
    ]
  },
  {
    "sha": "6653fa3328b5608fcceda1c6ea8e68c5d58739ec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NjUzZmEzMzI4YjU2MDhmY2NlZGExYzZlYThlNjhjNWQ1ODczOWVj",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-06-22T02:15:07Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-07-30T00:40:21Z"
      },
      "message": "[test] Update p2p_addr_relay test to prepare\n\nUse an init param to make clear whether a getaddr message should be sent when\nthe P2PConnection receives a version message. These changes are in preparation\nfor upcoming commits that modify the behavior of a bitcoind node and the test\nframework.",
      "tree": {
        "sha": "81a239e52ac763fc1a671bec698f86f06e65ae8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/81a239e52ac763fc1a671bec698f86f06e65ae8f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6653fa3328b5608fcceda1c6ea8e68c5d58739ec",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6653fa3328b5608fcceda1c6ea8e68c5d58739ec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6653fa3328b5608fcceda1c6ea8e68c5d58739ec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6653fa3328b5608fcceda1c6ea8e68c5d58739ec/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2fcaec7bbb96d6fe72a7e3a5744b0c35c79733e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fcaec7bbb96d6fe72a7e3a5744b0c35c79733e8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2fcaec7bbb96d6fe72a7e3a5744b0c35c79733e8"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 18,
      "deletions": 4
    },
    "files": [
      {
        "sha": "7b7bcfc917a2f61b83dbb6a18d49d2abac55f11f",
        "filename": "test/functional/p2p_addr_relay.py",
        "status": "modified",
        "additions": 18,
        "deletions": 4,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6653fa3328b5608fcceda1c6ea8e68c5d58739ec/test/functional/p2p_addr_relay.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6653fa3328b5608fcceda1c6ea8e68c5d58739ec/test/functional/p2p_addr_relay.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_addr_relay.py?ref=6653fa3328b5608fcceda1c6ea8e68c5d58739ec",
        "patch": "@@ -11,7 +11,8 @@\n     NODE_NETWORK,\n     NODE_WITNESS,\n     msg_addr,\n-    msg_getaddr\n+    msg_getaddr,\n+    msg_verack\n )\n from test_framework.p2p import (\n     P2PInterface,\n@@ -27,10 +28,12 @@ class AddrReceiver(P2PInterface):\n     num_ipv4_received = 0\n     test_addr_contents = False\n     _tokens = 1\n+    send_getaddr = True\n \n-    def __init__(self, test_addr_contents=False):\n+    def __init__(self, test_addr_contents=False, send_getaddr=True):\n         super().__init__()\n         self.test_addr_contents = test_addr_contents\n+        self.send_getaddr = send_getaddr\n \n     def on_addr(self, message):\n         for addr in message.addrs:\n@@ -60,6 +63,11 @@ def increment_tokens(self, n):\n     def addr_received(self):\n         return self.num_ipv4_received != 0\n \n+    def on_version(self, message):\n+        self.send_message(msg_verack())\n+        if (self.send_getaddr):\n+            self.send_message(msg_getaddr())\n+\n     def getaddr_received(self):\n         return self.message_count['getaddr'] > 0\n \n@@ -156,7 +164,7 @@ def relay_tests(self):\n         self.nodes[0].disconnect_p2ps()\n \n         self.log.info('Check relay of addresses received from outbound peers')\n-        inbound_peer = self.nodes[0].add_p2p_connection(AddrReceiver(test_addr_contents=True))\n+        inbound_peer = self.nodes[0].add_p2p_connection(AddrReceiver(test_addr_contents=True, send_getaddr=False))\n         full_outbound_peer = self.nodes[0].add_outbound_p2p_connection(AddrReceiver(), p2p_idx=0, connection_type=\"outbound-full-relay\")\n         msg = self.setup_addr_msg(2)\n         self.send_addr_msg(full_outbound_peer, msg, [inbound_peer])\n@@ -185,6 +193,12 @@ def relay_tests(self):\n         self.nodes[0].disconnect_p2ps()\n \n     def getaddr_tests(self):\n+        # In the previous tests, the node answered GETADDR requests with an\n+        # empty addrman. Due to GETADDR response caching (see\n+        # CConnman::GetAddresses), the node would continue to provide 0 addrs\n+        # in response until enough time has passed or the node is restarted.\n+        self.restart_node(0)\n+\n         self.log.info('Test getaddr behavior')\n         self.log.info('Check that we send a getaddr message upon connecting to an outbound-full-relay peer')\n         full_outbound_peer = self.nodes[0].add_outbound_p2p_connection(AddrReceiver(), p2p_idx=0, connection_type=\"outbound-full-relay\")\n@@ -197,7 +211,7 @@ def getaddr_tests(self):\n         assert_equal(block_relay_peer.getaddr_received(), False)\n \n         self.log.info('Check that we answer getaddr messages only from inbound peers')\n-        inbound_peer = self.nodes[0].add_p2p_connection(AddrReceiver())\n+        inbound_peer = self.nodes[0].add_p2p_connection(AddrReceiver(send_getaddr=False))\n         inbound_peer.sync_with_ping()\n \n         # Add some addresses to addrman"
      }
    ]
  },
  {
    "sha": "1d1ef2db7ea0d93c7dab4a9800ec74afa7a019eb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZDFlZjJkYjdlYTBkOTNjN2RhYjRhOTgwMGVjNzRhZmE3YTAxOWVi",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-03-24T22:01:05Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-07-30T00:40:21Z"
      },
      "message": "[net_processing] Defer initializing m_addr_known\n\nUse SetupAddressRelay to only initialize `m_addr_known` as needed. For outbound\npeers, we initialize the filter before sending our self announcement (not\napplicable for block-relay-only connections). For inbound peers, we initialize\nthe filter when we get an addr related message (ADDR, ADDRV2, GETADDR).\n\nThese changes intend to mitigate address blackholes. Since an inbound peer has\nto send us an addr related message to become eligible as a candidate for addr\nrelay, this should reduce our likelihood of sending them self-announcements.",
      "tree": {
        "sha": "816fb1785c870224e64dd6eb09ba1daad221d28e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/816fb1785c870224e64dd6eb09ba1daad221d28e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d1ef2db7ea0d93c7dab4a9800ec74afa7a019eb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d1ef2db7ea0d93c7dab4a9800ec74afa7a019eb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1d1ef2db7ea0d93c7dab4a9800ec74afa7a019eb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d1ef2db7ea0d93c7dab4a9800ec74afa7a019eb/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6653fa3328b5608fcceda1c6ea8e68c5d58739ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6653fa3328b5608fcceda1c6ea8e68c5d58739ec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6653fa3328b5608fcceda1c6ea8e68c5d58739ec"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 22,
      "deletions": 11
    },
    "files": [
      {
        "sha": "fe20421a216640b8ecb740663f74333d8fade24c",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 11,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d1ef2db7ea0d93c7dab4a9800ec74afa7a019eb/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d1ef2db7ea0d93c7dab4a9800ec74afa7a019eb/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=1d1ef2db7ea0d93c7dab4a9800ec74afa7a019eb",
        "patch": "@@ -224,8 +224,13 @@ struct Peer {\n \n     /** A vector of addresses to send to the peer, limited to MAX_ADDR_TO_SEND. */\n     std::vector<CAddress> m_addrs_to_send;\n-    /** Probabilistic filter of addresses that this peer already knows.\n-     *  Used to avoid relaying addresses to this peer more than once. */\n+    /** Probabilistic filter to track recent addr messages relayed with this\n+     *  peer. Used to avoid relaying redundant addresses to this peer.\n+     *\n+     *  We initialize this filter for outbound peers (other than\n+     *  block-relay-only connections) or when an inbound peer sends us an\n+     *  address related message (ADDR, ADDRV2, GETADDR).\n+     **/\n     std::unique_ptr<CRollingBloomFilter> m_addr_known;\n     /** Whether a getaddr request to this peer is outstanding. */\n     bool m_getaddr_sent{false};\n@@ -258,9 +263,8 @@ struct Peer {\n     /** Work queue of items requested by this peer **/\n     std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n \n-    explicit Peer(NodeId id, bool addr_relay)\n+    explicit Peer(NodeId id)\n         : m_id(id)\n-        , m_addr_known{addr_relay ? std::make_unique<CRollingBloomFilter>(5000, 0.001) : nullptr}\n     {}\n };\n \n@@ -1125,9 +1129,7 @@ void PeerManagerImpl::InitializeNode(CNode *pnode)\n         assert(m_txrequest.Count(nodeid) == 0);\n     }\n     {\n-        // Addr relay is disabled for outbound block-relay-only peers to\n-        // prevent adversaries from inferring these links from addr traffic.\n-        PeerRef peer = std::make_shared<Peer>(nodeid, /* addr_relay = */ !pnode->IsBlockOnlyConn());\n+        PeerRef peer = std::make_shared<Peer>(nodeid);\n         LOCK(m_peer_mutex);\n         m_peer_map.emplace_hint(m_peer_map.end(), nodeid, std::move(peer));\n     }\n@@ -2580,7 +2582,8 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         UpdatePreferredDownload(pfrom, State(pfrom.GetId()));\n         }\n \n-        if (!pfrom.IsInboundConn() && !pfrom.IsBlockOnlyConn()) {\n+        // Self advertisement & GETADDR logic\n+        if (!pfrom.IsInboundConn() && SetupAddressRelay(pfrom, *peer)) {\n             // For outbound peers, we try to relay our address (so that other\n             // nodes can try to find us more quickly, as we have no guarantee\n             // that an outbound peer is even aware of how to reach us) and do a\n@@ -2589,8 +2592,9 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             // empty and no one will know who we are, so these mechanisms are\n             // important to help us connect to the network.\n             //\n-            // We skip this for block-relay-only peers to avoid potentially leaking\n-            // information about our block-relay-only connections via address relay.\n+            // We skip this for block-relay-only peers. We want to avoid\n+            // potentially leaking addr information and we do not want to\n+            // indicate to the peer that we will participate in addr relay.\n             if (fListen && !m_chainman.ActiveChainstate().IsInitialBlockDownload())\n             {\n                 CAddress addr = GetLocalAddress(&pfrom.addr, pfrom.GetLocalServices());\n@@ -2788,10 +2792,11 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n \n         s >> vAddr;\n \n-        if (!RelayAddrsWithPeer(*peer)) {\n+        if (!SetupAddressRelay(pfrom, *peer)) {\n             LogPrint(BCLog::NET, \"ignoring %s message from %s peer=%d\\n\", msg_type, pfrom.ConnectionTypeAsString(), pfrom.GetId());\n             return;\n         }\n+\n         if (vAddr.size() > MAX_ADDR_TO_SEND)\n         {\n             Misbehaving(pfrom.GetId(), 20, strprintf(\"%s message size = %u\", msg_type, vAddr.size()));\n@@ -3725,6 +3730,8 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             return;\n         }\n \n+        SetupAddressRelay(pfrom, *peer);\n+\n         // Only send one GetAddr response per connection to reduce resource waste\n         // and discourage addr stamping of INV announcements.\n         if (peer->m_getaddr_recvd) {"
      },
      {
        "sha": "c8c1120462ee19e32d435738c727e44fae2fda80",
        "filename": "test/functional/p2p_addr_relay.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d1ef2db7ea0d93c7dab4a9800ec74afa7a019eb/test/functional/p2p_addr_relay.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d1ef2db7ea0d93c7dab4a9800ec74afa7a019eb/test/functional/p2p_addr_relay.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_addr_relay.py?ref=1d1ef2db7ea0d93c7dab4a9800ec74afa7a019eb",
        "patch": "@@ -175,6 +175,9 @@ def relay_tests(self):\n         # of the outbound peer which is often sent before the GETADDR response.\n         assert_equal(inbound_peer.num_ipv4_received, 0)\n \n+        # Send an empty ADDR message to intialize address relay on this connection.\n+        inbound_peer.send_and_ping(msg_addr())\n+\n         self.log.info('Check that subsequent addr messages sent from an outbound peer are relayed')\n         msg2 = self.setup_addr_msg(2)\n         self.send_addr_msg(full_outbound_peer, msg2, [inbound_peer])"
      },
      {
        "sha": "b7d5bd8fab571a664361c16402acb2b206fdc800",
        "filename": "test/functional/test_framework/p2p.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d1ef2db7ea0d93c7dab4a9800ec74afa7a019eb/test/functional/test_framework/p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d1ef2db7ea0d93c7dab4a9800ec74afa7a019eb/test/functional/test_framework/p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/p2p.py?ref=1d1ef2db7ea0d93c7dab4a9800ec74afa7a019eb",
        "patch": "@@ -438,6 +438,7 @@ def on_version(self, message):\n             self.send_message(msg_sendaddrv2())\n         self.send_message(msg_verack())\n         self.nServices = message.nServices\n+        self.send_message(msg_getaddr())\n \n     # Connection helper methods\n "
      }
    ]
  },
  {
    "sha": "201e4964816f8896cfe7b4f6d8ddbfffe7102f87",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMDFlNDk2NDgxNmY4ODk2Y2ZlN2I0ZjZkOGRkYmZmZmU3MTAyZjg3",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-07-26T18:48:58Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-07-30T00:41:19Z"
      },
      "message": "[net_processing] Introduce new field to indicate if addr relay is enabled",
      "tree": {
        "sha": "428baf0ee19c92b69cc1894c455bcae859c88dc3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/428baf0ee19c92b69cc1894c455bcae859c88dc3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/201e4964816f8896cfe7b4f6d8ddbfffe7102f87",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/201e4964816f8896cfe7b4f6d8ddbfffe7102f87",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/201e4964816f8896cfe7b4f6d8ddbfffe7102f87",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/201e4964816f8896cfe7b4f6d8ddbfffe7102f87/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1d1ef2db7ea0d93c7dab4a9800ec74afa7a019eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d1ef2db7ea0d93c7dab4a9800ec74afa7a019eb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d1ef2db7ea0d93c7dab4a9800ec74afa7a019eb"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 21,
      "deletions": 3
    },
    "files": [
      {
        "sha": "e9bb4f22114427898ccc3fc08853ba900f7afd19",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 3,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/201e4964816f8896cfe7b4f6d8ddbfffe7102f87/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/201e4964816f8896cfe7b4f6d8ddbfffe7102f87/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=201e4964816f8896cfe7b4f6d8ddbfffe7102f87",
        "patch": "@@ -230,8 +230,25 @@ struct Peer {\n      *  We initialize this filter for outbound peers (other than\n      *  block-relay-only connections) or when an inbound peer sends us an\n      *  address related message (ADDR, ADDRV2, GETADDR).\n+     *\n+     *  Presence of this filter must correlate with m_addr_relay_enabled.\n      **/\n     std::unique_ptr<CRollingBloomFilter> m_addr_known;\n+    /** Whether we are participating in address relay with this connection.\n+     *\n+     *  We set this bool to true for outbound peers (other than\n+     *  block-relay-only connections), or when an inbound peer sends us an\n+     *  address related message (ADDR, ADDRV2, GETADDR).\n+     *\n+     *  We use this bool to decide whether a peer is eligible for gossiping\n+     *  addr messages. This avoids relaying to peers that are unlikely to\n+     *  forward them, effectively blackholing self announcements. Reasons\n+     *  peers might support addr relay on the link include that they connected\n+     *  to us as a block-relay-only peer or they are a light client.\n+     *\n+     *  This field must correlate with whether m_addr_known has been\n+     *  initialized.*/\n+    std::atomic_bool m_addr_relay_enabled{false};\n     /** Whether a getaddr request to this peer is outstanding. */\n     bool m_getaddr_sent{false};\n     /** Guards address sending timers. */\n@@ -617,8 +634,8 @@ class PeerManagerImpl final : public PeerManager\n      */\n     void ProcessGetCFCheckPt(CNode& peer, CDataStream& vRecv);\n \n-    /** Checks if address relay is permitted with peer. Initializes\n-     * `m_addr_known` bloom filter if needed.\n+    /** Checks if address relay is permitted with peer. If needed, initializes\n+     * the m_addr_known bloom filter and sets m_addr_relay_enabled to true.\n      *\n      *  @return   True if address relay is enabled with peer\n      *            False if address relay is disallowed\n@@ -746,7 +763,7 @@ static CNodeState *State(NodeId pnode) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n \n static bool RelayAddrsWithPeer(const Peer& peer)\n {\n-    return peer.m_addr_known != nullptr;\n+    return peer.m_addr_relay_enabled;\n }\n \n /**\n@@ -4449,6 +4466,7 @@ bool PeerManagerImpl::SetupAddressRelay(CNode& node, Peer& peer)\n         // First addr message we have received from the peer, initialize\n         // m_addr_known\n         peer.m_addr_known = std::make_unique<CRollingBloomFilter>(5000, 0.001);\n+        peer.m_addr_relay_enabled = true;\n     }\n \n     return true;"
      }
    ]
  },
  {
    "sha": "c061599e40dc3d379c10b914765061a7a8449dd7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMDYxNTk5ZTQwZGMzZDM3OWMxMGI5MTQ3NjUwNjFhN2E4NDQ5ZGQ3",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-07-26T18:54:07Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-07-30T00:43:00Z"
      },
      "message": "[net_processing] Remove RelayAddrsWithPeer function\n\nNow that we have a simple boolean stored on the field, the wrapper function is\nno longer necessary.",
      "tree": {
        "sha": "b83fa2278c41c8ac1fa90839a8fc3501acc59d2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b83fa2278c41c8ac1fa90839a8fc3501acc59d2a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c061599e40dc3d379c10b914765061a7a8449dd7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c061599e40dc3d379c10b914765061a7a8449dd7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c061599e40dc3d379c10b914765061a7a8449dd7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c061599e40dc3d379c10b914765061a7a8449dd7/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "201e4964816f8896cfe7b4f6d8ddbfffe7102f87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/201e4964816f8896cfe7b4f6d8ddbfffe7102f87",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/201e4964816f8896cfe7b4f6d8ddbfffe7102f87"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 3,
      "deletions": 9
    },
    "files": [
      {
        "sha": "5103824ee13b6920d2f898efebc8d78aaee12848",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 9,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c061599e40dc3d379c10b914765061a7a8449dd7/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c061599e40dc3d379c10b914765061a7a8449dd7/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=c061599e40dc3d379c10b914765061a7a8449dd7",
        "patch": "@@ -761,11 +761,6 @@ static CNodeState *State(NodeId pnode) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     return &it->second;\n }\n \n-static bool RelayAddrsWithPeer(const Peer& peer)\n-{\n-    return peer.m_addr_relay_enabled;\n-}\n-\n /**\n  * Whether the peer supports the address. For example, a peer that does not\n  * implement BIP155 cannot receive Tor v3 addresses because it requires\n@@ -1708,7 +1703,7 @@ void PeerManagerImpl::RelayAddress(NodeId originator,\n     LOCK(m_peer_mutex);\n \n     for (auto& [id, peer] : m_peer_map) {\n-        if (RelayAddrsWithPeer(*peer) && id != originator && IsAddrCompatible(*peer, addr)) {\n+        if (peer->m_addr_relay_enabled && id != originator && IsAddrCompatible(*peer, addr)) {\n             uint64_t hashKey = CSipHasher(hasher).Write(id).Finalize();\n             for (unsigned int i = 0; i < nRelayNodes; i++) {\n                  if (hashKey > best[i].first) {\n@@ -4327,7 +4322,7 @@ void PeerManagerImpl::MaybeSendPing(CNode& node_to, Peer& peer, std::chrono::mic\n void PeerManagerImpl::MaybeSendAddr(CNode& node, Peer& peer, std::chrono::microseconds current_time)\n {\n     // Nothing to do for non-address-relay peers\n-    if (!RelayAddrsWithPeer(peer)) return;\n+    if (!peer.m_addr_relay_enabled) return;\n \n     LOCK(peer.m_addr_send_times_mutex);\n     // Periodically advertise our local address to the peer.\n@@ -4462,11 +4457,10 @@ bool PeerManagerImpl::SetupAddressRelay(CNode& node, Peer& peer)\n     // information of addr traffic to infer the link.\n     if (node.IsBlockOnlyConn()) return false;\n \n-    if (!RelayAddrsWithPeer(peer)) {\n+    if (!peer.m_addr_relay_enabled.exchange(true)) {\n         // First addr message we have received from the peer, initialize\n         // m_addr_known\n         peer.m_addr_known = std::make_unique<CRollingBloomFilter>(5000, 0.001);\n-        peer.m_addr_relay_enabled = true;\n     }\n \n     return true;"
      }
    ]
  },
  {
    "sha": "0980ca78cd930a00c9985d7f00083a3b8e8be89e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOTgwY2E3OGNkOTMwYTAwYzk5ODVkN2YwMDA4M2EzYjhlOGJlODll",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-06-14T05:08:54Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-07-30T00:43:01Z"
      },
      "message": "[test] Test that we intentionally select addr relay peers.\n\nThis test checks that we only relay addresses with inbound peers who have sent\nus an addr related message. Uses a combination of GETADDR and ADDR to verify\nwhen peers are eligible.",
      "tree": {
        "sha": "d97275d3a14eb1aceb04fcd3cf1cc89729ae8f6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d97275d3a14eb1aceb04fcd3cf1cc89729ae8f6d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0980ca78cd930a00c9985d7f00083a3b8e8be89e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0980ca78cd930a00c9985d7f00083a3b8e8be89e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0980ca78cd930a00c9985d7f00083a3b8e8be89e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0980ca78cd930a00c9985d7f00083a3b8e8be89e/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c061599e40dc3d379c10b914765061a7a8449dd7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c061599e40dc3d379c10b914765061a7a8449dd7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c061599e40dc3d379c10b914765061a7a8449dd7"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 48,
      "deletions": 1
    },
    "files": [
      {
        "sha": "4233d8d010cbe387f130191911a81b03cf893f12",
        "filename": "test/functional/p2p_addr_relay.py",
        "status": "modified",
        "additions": 48,
        "deletions": 1,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0980ca78cd930a00c9985d7f00083a3b8e8be89e/test/functional/p2p_addr_relay.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0980ca78cd930a00c9985d7f00083a3b8e8be89e/test/functional/p2p_addr_relay.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_addr_relay.py?ref=0980ca78cd930a00c9985d7f00083a3b8e8be89e",
        "patch": "@@ -19,7 +19,7 @@\n     p2p_lock,\n )\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal\n+from test_framework.util import assert_equal, assert_greater_than\n import random\n import time\n \n@@ -83,6 +83,10 @@ def set_test_params(self):\n     def run_test(self):\n         self.oversized_addr_test()\n         self.relay_tests()\n+        self.inbound_blackhole_tests()\n+\n+        # This test populates the addrman, which can impact the node's behavior\n+        # in subsequent tests\n         self.getaddr_tests()\n         self.blocksonly_mode_tests()\n         self.rate_limit_tests()\n@@ -195,6 +199,49 @@ def relay_tests(self):\n \n         self.nodes[0].disconnect_p2ps()\n \n+    def sum_addr_messages(self, msgs_dict):\n+        return sum(bytes_received for (msg, bytes_received) in msgs_dict.items() if msg in ['addr', 'addrv2', 'getaddr'])\n+\n+    def inbound_blackhole_tests(self):\n+        self.log.info('Check that we only relay addresses to inbound peers who have previously sent us addr related messages')\n+\n+        addr_source = self.nodes[0].add_p2p_connection(P2PInterface())\n+        receiver_peer = self.nodes[0].add_p2p_connection(AddrReceiver())\n+        blackhole_peer = self.nodes[0].add_p2p_connection(AddrReceiver(send_getaddr=False))\n+        initial_addrs_received = receiver_peer.num_ipv4_received\n+\n+        # addr_source sends 2 addresses to node0\n+        msg = self.setup_addr_msg(2)\n+        addr_source.send_and_ping(msg)\n+        self.mocktime += 30 * 60\n+        self.nodes[0].setmocktime(self.mocktime)\n+        receiver_peer.sync_with_ping()\n+        blackhole_peer.sync_with_ping()\n+\n+        peerinfo = self.nodes[0].getpeerinfo()\n+\n+        # Confirm node received addr-related messages from receiver peer\n+        assert_greater_than(self.sum_addr_messages(peerinfo[1]['bytesrecv_per_msg']), 0)\n+        # And that peer received addresses\n+        assert_equal(receiver_peer.num_ipv4_received - initial_addrs_received, 2)\n+\n+        # Confirm node has not received addr-related messages from blackhole peer\n+        assert_equal(self.sum_addr_messages(peerinfo[2]['bytesrecv_per_msg']), 0)\n+        # And that peer did not receive addresses\n+        assert_equal(blackhole_peer.num_ipv4_received, 0)\n+\n+        self.log.info(\"After blackhole peer sends addr message, it becomes eligible for addr gossip\")\n+        blackhole_peer.send_and_ping(msg_addr())\n+        msg = self.setup_addr_msg(2)\n+        self.send_addr_msg(addr_source, msg, [receiver_peer, blackhole_peer])\n+\n+        # Confirm node has now received addr-related messages from blackhole peer\n+        assert_greater_than(self.sum_addr_messages(peerinfo[1]['bytesrecv_per_msg']), 0)\n+        # And that peer received addresses\n+        assert_equal(blackhole_peer.num_ipv4_received, 2)\n+\n+        self.nodes[0].disconnect_p2ps()\n+\n     def getaddr_tests(self):\n         # In the previous tests, the node answered GETADDR requests with an\n         # empty addrman. Due to GETADDR response caching (see"
      }
    ]
  },
  {
    "sha": "3893da06db1eb622f540605700f8663f8d87b2df",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozODkzZGEwNmRiMWViNjIyZjU0MDYwNTcwMGY4NjYzZjhkODdiMmRm",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-07-26T19:08:07Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-07-30T00:43:01Z"
      },
      "message": "[RPC] Add field to getpeerinfo to indicate if addr relay is enabled",
      "tree": {
        "sha": "1fcd444d77b18137da6aaa29da8f104c8a96fad5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1fcd444d77b18137da6aaa29da8f104c8a96fad5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3893da06db1eb622f540605700f8663f8d87b2df",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3893da06db1eb622f540605700f8663f8d87b2df",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3893da06db1eb622f540605700f8663f8d87b2df",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3893da06db1eb622f540605700f8663f8d87b2df/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0980ca78cd930a00c9985d7f00083a3b8e8be89e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0980ca78cd930a00c9985d7f00083a3b8e8be89e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0980ca78cd930a00c9985d7f00083a3b8e8be89e"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "24b55eb5cfea0b7da0a68b8613b0570c6dc64b20",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3893da06db1eb622f540605700f8663f8d87b2df/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3893da06db1eb622f540605700f8663f8d87b2df/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=3893da06db1eb622f540605700f8663f8d87b2df",
        "patch": "@@ -1279,6 +1279,7 @@ bool PeerManagerImpl::GetNodeStateStats(NodeId nodeid, CNodeStateStats& stats) c\n     stats.m_ping_wait = ping_wait;\n     stats.m_addr_processed = peer->m_addr_processed.load();\n     stats.m_addr_rate_limited = peer->m_addr_rate_limited.load();\n+    stats.m_addr_relay_enabled = peer->m_addr_relay_enabled.load();\n \n     return true;\n }"
      },
      {
        "sha": "4532a0505ed8c214e1ce1fc720e243625d390e66",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3893da06db1eb622f540605700f8663f8d87b2df/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3893da06db1eb622f540605700f8663f8d87b2df/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=3893da06db1eb622f540605700f8663f8d87b2df",
        "patch": "@@ -31,6 +31,7 @@ struct CNodeStateStats {\n     std::vector<int> vHeightInFlight;\n     uint64_t m_addr_processed = 0;\n     uint64_t m_addr_rate_limited = 0;\n+    bool m_addr_relay_enabled{false};\n };\n \n class PeerManager : public CValidationInterface, public NetEventsInterface"
      },
      {
        "sha": "3962a139240ca2ce0b5444b7d8739e0467577e9c",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3893da06db1eb622f540605700f8663f8d87b2df/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3893da06db1eb622f540605700f8663f8d87b2df/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=3893da06db1eb622f540605700f8663f8d87b2df",
        "patch": "@@ -118,6 +118,7 @@ static RPCHelpMan getpeerinfo()\n                             {RPCResult::Type::STR, \"addr\", \"(host:port) The IP address and port of the peer\"},\n                             {RPCResult::Type::STR, \"addrbind\", \"(ip:port) Bind address of the connection to the peer\"},\n                             {RPCResult::Type::STR, \"addrlocal\", \"(ip:port) Local address as reported by the peer\"},\n+                            {RPCResult::Type::BOOL, \"addr_relay_enabled\", \"Whether we participate in address relay with this peer\"},\n                             {RPCResult::Type::STR, \"network\", \"Network (\" + Join(GetNetworkNames(/* append_unroutable */ true), \", \") + \")\"},\n                             {RPCResult::Type::NUM, \"mapped_as\", \"The AS in the BGP route to the peer used for diversifying\\n\"\n                                                                 \"peer selection (only available if the asmap config flag is set)\"},\n@@ -201,6 +202,7 @@ static RPCHelpMan getpeerinfo()\n         if (!(stats.addrLocal.empty())) {\n             obj.pushKV(\"addrlocal\", stats.addrLocal);\n         }\n+        obj.pushKV(\"addr_relay_enabled\", statestats.m_addr_relay_enabled);\n         obj.pushKV(\"network\", GetNetworkName(stats.m_network));\n         if (stats.m_mapped_as != 0) {\n             obj.pushKV(\"mapped_as\", uint64_t(stats.m_mapped_as));"
      }
    ]
  },
  {
    "sha": "3f7250b328b8b2f5d63f323702445ac5c989b73d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZjcyNTBiMzI4YjhiMmY1ZDYzZjMyMzcwMjQ0NWFjNWM5ODliNzNk",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-07-24T01:19:32Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-07-30T00:43:01Z"
      },
      "message": "[test] Use the new endpoint to improve tests",
      "tree": {
        "sha": "d660890065d3cae0736d109a71012933ff304835",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d660890065d3cae0736d109a71012933ff304835"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f7250b328b8b2f5d63f323702445ac5c989b73d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f7250b328b8b2f5d63f323702445ac5c989b73d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3f7250b328b8b2f5d63f323702445ac5c989b73d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f7250b328b8b2f5d63f323702445ac5c989b73d/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3893da06db1eb622f540605700f8663f8d87b2df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3893da06db1eb622f540605700f8663f8d87b2df",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3893da06db1eb622f540605700f8663f8d87b2df"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 10,
      "deletions": 2
    },
    "files": [
      {
        "sha": "95743a1bf54df80c488b985298cb6edc2c7d334d",
        "filename": "test/functional/p2p_addr_relay.py",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f7250b328b8b2f5d63f323702445ac5c989b73d/test/functional/p2p_addr_relay.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f7250b328b8b2f5d63f323702445ac5c989b73d/test/functional/p2p_addr_relay.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_addr_relay.py?ref=3f7250b328b8b2f5d63f323702445ac5c989b73d",
        "patch": "@@ -210,6 +210,11 @@ def inbound_blackhole_tests(self):\n         blackhole_peer = self.nodes[0].add_p2p_connection(AddrReceiver(send_getaddr=False))\n         initial_addrs_received = receiver_peer.num_ipv4_received\n \n+        peerinfo = self.nodes[0].getpeerinfo()\n+        assert_equal(peerinfo[0]['addr_relay_enabled'], True)  # addr_source\n+        assert_equal(peerinfo[1]['addr_relay_enabled'], True)  # receiver_peer\n+        assert_equal(peerinfo[2]['addr_relay_enabled'], False)  # blackhole_peer\n+\n         # addr_source sends 2 addresses to node0\n         msg = self.setup_addr_msg(2)\n         addr_source.send_and_ping(msg)\n@@ -232,11 +237,14 @@ def inbound_blackhole_tests(self):\n \n         self.log.info(\"After blackhole peer sends addr message, it becomes eligible for addr gossip\")\n         blackhole_peer.send_and_ping(msg_addr())\n-        msg = self.setup_addr_msg(2)\n-        self.send_addr_msg(addr_source, msg, [receiver_peer, blackhole_peer])\n \n         # Confirm node has now received addr-related messages from blackhole peer\n         assert_greater_than(self.sum_addr_messages(peerinfo[1]['bytesrecv_per_msg']), 0)\n+        assert_equal(self.nodes[0].getpeerinfo()[2]['addr_relay_enabled'], True)\n+\n+        msg = self.setup_addr_msg(2)\n+        self.send_addr_msg(addr_source, msg, [receiver_peer, blackhole_peer])\n+\n         # And that peer received addresses\n         assert_equal(blackhole_peer.num_ipv4_received, 2)\n "
      }
    ]
  }
]