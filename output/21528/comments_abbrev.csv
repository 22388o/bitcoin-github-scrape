DrahtBot,2021-03-25 08:54:46,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21515 by naumenkogs\n* #15606 by jamesob\n\nIf you consider this pull request important, please also help to review the c",https://github.com/bitcoin/bitcoin/pull/21528#issuecomment-806477418,806477418,
jnewbery,2021-03-25 10:36:09,"I think that an approach like this was first suggested by AJ in https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-527012757:\n\n> I think since we AdvertiseLocal regularly to our non-block-relay peers, we could just set a flag on the peer if we've ever seen an ADDR message from them, and only choose nodes with that flag in RelayAddress?\n\nI think it's a good idea, since it stops us r",https://github.com/bitcoin/bitcoin/pull/21528#issuecomment-806541067,806541067,
amitiuttarwar,2021-03-30 04:53:07,"fixed tests & added a test. patch is ready, but leaving as a draft until I gain more confidence that this would not break any other software on the network. \n\ncompiling a list of other clients & compatibility with this patch: \n\n<table>\n<tr>\n	<td> breadwallet\n	<td> ✅\n	<td> \n\nSends `getaddr` & only accepts `addr` messages afterwards ([link](https://github.com/breadwallet/breadwal",https://github.com/bitcoin/bitcoin/pull/21528#issuecomment-809906430,809906430,
sipa,2021-03-31 05:01:50,"@glozow The concern would be other Bitcoin node implementations which don't send addr/getaddr, but do care about receiving them. I don't think that's particularly likely, but it's also hard to be sure there are none.",https://github.com/bitcoin/bitcoin/pull/21528#issuecomment-810762563,810762563,
ivanacostarubio,2021-03-31 16:06:07,Concept ACK ,https://github.com/bitcoin/bitcoin/pull/21528#issuecomment-811184984,811184984,
GeneFerneau,2021-03-31 16:49:07,"Concept ACK\n\nNeed to review surrounding code more, and run the tests. Looks good so far!",https://github.com/bitcoin/bitcoin/pull/21528#issuecomment-811245866,811245866,
jnewbery,2021-06-09 10:49:28,"Reiterating my concept ACK on this. Reducing the number of addr black holes seems like a good win for addr gossipping across the network.\n\nThis branch needs rebase now that the addr data has been moved up into net_processing. I'd be very happy to help with that if you need a hand.",https://github.com/bitcoin/bitcoin/pull/21528#issuecomment-857592679,857592679,
ajtowns,2021-06-09 11:39:24,"> Reiterating my concept ACK on this. Reducing the number of addr black holes seems like a good win for addr gossipping across the network.\n\nI think this was somewhat pending being sure it wouldn't break bitcore (see https://github.com/bitpay/bitcore/issues/3140) which now looks like it's now resolved.",https://github.com/bitcoin/bitcoin/pull/21528#issuecomment-857622218,857622218,
amitiuttarwar,2021-06-12 00:58:26,"> Reiterating my concept ACK on this\n\nThanks! \n\n> I think this was somewhat pending being sure it wouldn't break bitcore (see bitpay/bitcore#3140) which now looks like it's now resolved.\n\nIndeed. I'm now working to rebase & bring this PR out of draft. I've rebased locally but am working through some test failures, I hope to have this ready for review by early next week. \n\nPS: I als",https://github.com/bitcoin/bitcoin/pull/21528#issuecomment-859973340,859973340,
amitiuttarwar,2021-06-15 02:04:45,"My [research](https://github.com/bitcoin/bitcoin/pull/21528#issuecomment-809906430) indicates that these changes would not break any clients, I've opened issues trying to confirm my understand on all the repos, and I have not heard any opposition from the mailing list or on IRC. This seems like the extent of what I can do to make sure these changes are compatible with alternative clients 😛\n\nI'",https://github.com/bitcoin/bitcoin/pull/21528#issuecomment-861114349,861114349,
michaelfolkson,2021-06-16 11:35:30,Concept ACK. Impressively thorough investigation of impact on alternative clients :),https://github.com/bitcoin/bitcoin/pull/21528#issuecomment-862305024,862305024,
vasild,2021-06-16 11:48:58,"> For inbound peers, we initialize the filter if/when we get an addr related message (ADDR, ADDRV2, GETADDR, SENDADDRV2).\n\nSo it may happen that a light client who does not participate in address relay connects to us and sends us `getaddr` in order to learn some peers and we (mis)interpret that and start sending unrequested addresses to that peer in the hopes of further relay. Black hole again",https://github.com/bitcoin/bitcoin/pull/21528#issuecomment-862312851,862312851,
amitiuttarwar,2021-06-18 05:50:36,"@vasild\n\n> So it may happen that a light client who does not participate in address relay connects to us and sends us getaddr in order to learn some peers and we (mis)interpret that and start sending unrequested addresses to that peer in the hopes of further relay. Black hole again.\nOr a peer that does not participate in address relay replies to our getaddr with addr and we (mis)interpret th",https://github.com/bitcoin/bitcoin/pull/21528#issuecomment-863775060,863775060,
vasild,2021-06-18 10:40:28,"If the focus is on avoiding gossip to peers that connected to us in block-only mode, then isn't the absence of `getaddr` enough to recognize that? That is, a peer who connected to us and did not send us `getaddr` must be in blocks-only mode / is a black hole? No need to involve `addr` and `addrv2`? I.e. only for inbound connections, delay initializing `Peer::m_addr_known` for until after `getaddr`",https://github.com/bitcoin/bitcoin/pull/21528#issuecomment-863943765,863943765,
amitiuttarwar,2021-06-18 18:17:25,"@vasild \n\n> That is, a peer who connected to us and did not send us getaddr must be in blocks-only mode / is a black hole?\n\nThis is false. If you see the notes I've taken on alternative clients here: https://github.com/bitcoin/bitcoin/pull/21528#issuecomment-809906430, you can see that several of them will always self-advertise, but only occasionally send getaddr messages. \n\n> Still se",https://github.com/bitcoin/bitcoin/pull/21528#issuecomment-864202916,864202916,
mzumsande,2021-06-21 00:08:47,"Concept ACK.\n\n> As for relaying to more peers: currently we relay reachable addresses to 2 peers. So (assuming everybody relays) every node relays to two others (it spreads like a virus). And an average spread rate of <1 is required to stop an address from propagating. It means that if more than half of the peers are black holes then propagation will not work (will stop). I think we are far fr",https://github.com/bitcoin/bitcoin/pull/21528#issuecomment-864633869,864633869,
ajtowns,2021-06-21 05:30:50,"> The simulations ([code](https://github.com/mzumsande/addr_relay_sim)) suggest that the percentage of nodes reached by an initial self-announcement of a new non-listening node falls from 35% (0% black holes) to 21% (20% black holes) to 2% (35% black holes).\n\nI think that's simulating having 8 outbounds of which 20% (or 30%,35%,40%) are blackholes, rather than 8 full outbounds and an additiona",https://github.com/bitcoin/bitcoin/pull/21528#issuecomment-864740342,864740342,
vasild,2021-06-21 14:48:14,"@mzumsande, @ajtowns, wow! That gives some rough picture on the severity of the problem. I think it rules out ""not a problem at all"". Thanks!\n\n@amitiuttarwar, I guess the ""waiting for confirmation"" for btcd and bitcoinj [above](https://github.com/bitcoin/bitcoin/pull/21528#issuecomment-809906430) should be cleared before this PR is merged?",https://github.com/bitcoin/bitcoin/pull/21528#issuecomment-865093349,865093349,
amitiuttarwar,2021-06-22 03:47:24,"@mzumsande, thanks for putting together that awesome simulation! and thank you @ajtowns for reviewing :) very cool. \n\nbiggest changes in the recent push: \n- as per the conversation on #22245, I've removed the commit that uses `sendaddrv2` as a signal to set up addr relay on the connection \n- I was finding the `p2p_addr_relay.py` refactor commit hard to parse, so I pulled it out into #22306",https://github.com/bitcoin/bitcoin/pull/21528#issuecomment-865505493,865505493,
ajtowns,2021-06-22 07:09:05,"Had a bit more of a [poke](https://gist.github.com/ajtowns/ec27774113e5d1214b99281f6b7549c4) at this, I think the interesting results are (with 10k listening nodes, 50k private nodes with only outbounds):\n\n```\nConn: 8+2 Spread: 2 Limit: 10000/600 Avg/dev: 78.5%±9.7% 26.1%±3.5%\nConn: 8+0 Spread: 2 Limit: 10000/600 Avg/dev: 90.5%±1.7% 33.5%±1.0%\nConn: 8+5 Spread: 2 Limit: 10000/600 Avg/dev",https://github.com/bitcoin/bitcoin/pull/21528#issuecomment-865658016,865658016,
vasild,2021-06-22 12:06:18,"> Addr relay is pretty low bandwidth, so I think the extra 50% of data for going from 2 to 3 is probably pretty fine...\n\nI agree.\n\n> I'm not seeing what the privacy concerns should really be.\n\nMe neither.\n\nI reproduced the above results and ran one more simulation: just increase spread from 2 to 3:\n\n```\n# current (copy from above)\nConn: 8+2 Spread: 2 Limit: 10000/600 Avg/de",https://github.com/bitcoin/bitcoin/pull/21528#issuecomment-865926162,865926162,
ajtowns,2021-06-23 06:43:40,"> Also to consider relay of addresses from non-reachable networks, currently with spread 1.5.\n\nChanging the spread to `random.choice([1,2])` to simulate an address everyone considers unreachable gives about 5% coverage with 8 outbounds and 2 blackholes; but 27% with 8 outbounds and no blackholes (ie behaviour prior to block relay only nods or after this pr). If you wanted to model ipv4 vs ipv6",https://github.com/bitcoin/bitcoin/pull/21528#issuecomment-866573780,866573780,
amitiuttarwar,2021-07-26 20:41:53,"### Latest push: \n- rebased on master \n- introduced a new variable, `addr_relay_enabled`, to the Peer struct. this is used to expose this information to `getpeerinfo` without causing a thread safety issue. The bool made the `RelayAddrsWithPeer` function redundant, so I removed that.\n- these commits are generally small & isolated, so I'm hoping this PR is pretty straightforward to review :) ",https://github.com/bitcoin/bitcoin/pull/21528#issuecomment-887012346,887012346,
amitiuttarwar,2021-07-27 21:22:17,"thanks for the review @jnewbery! incorporated all your feedback with one or two questions. \n\n> I think the use of an atomic addr_relay_enabled is fine for now. Perhaps once #21527 has landed and we have proper locking in net_processing, m_addr_known can be guarded by the net processing lock and we can lose the additional atomic bool.\n\nsounds good, I would definitely prefer that approach.",https://github.com/bitcoin/bitcoin/pull/21528#issuecomment-887843936,887843936,
amitiuttarwar,2021-07-28 22:12:54,"@jnewbery \n- incorporated all your feedback\n- also took a look at your branch, it looks awesome! I think it makes a lot of sense to encapsulate the address related data into a small data structure & only initialize where needed. I'd be happy to see this sorta thing through as a follow-up, if these changes get accepted. thank you!",https://github.com/bitcoin/bitcoin/pull/21528#issuecomment-888655176,888655176,
jnewbery,2021-07-29 11:28:45,Code review ACK 00a54cbddbc6bc69c30a9597f6e669b1af331d65,https://github.com/bitcoin/bitcoin/pull/21528#issuecomment-889039481,889039481,
amitiuttarwar,2021-07-30 00:50:15,"thanks @MarcoFalke, addressed your comments ",https://github.com/bitcoin/bitcoin/pull/21528#issuecomment-889550648,889550648,
jnewbery,2021-07-30 09:17:56,"reACK 3f7250b328b8b2f5d63f323702445ac5c989b73d\n\nOnly changes are addressing review comments from Marco.",https://github.com/bitcoin/bitcoin/pull/21528#issuecomment-889760155,889760155,
glozow,2021-07-30 09:37:00,"ACK 3f7250b328b8b2f5d63f323702445ac5c989b73d\n\nCompared the `SetupAddressRelay()` call sites to where I thought they should be, threw in some asserts where I expected `m_addr_relay_enabled` to be true, did a code review looking for possibilities of `m_addr_known` being used before initialized. Test looks correct. Thanks for diligently checking for compatibility with other clients, seems to be a",https://github.com/bitcoin/bitcoin/pull/21528#issuecomment-889770457,889770457,
MarcoFalke,2021-08-03 08:44:58,"Maybe add a line to the release notes saying that inbound peers will never receive address messages unless they send ADDR, ADDRV2, or GETADDR themselves? ",https://github.com/bitcoin/bitcoin/pull/21528#issuecomment-891658146,891658146,
amitiuttarwar,2021-08-03 16:51:52,"@MarcoFalke \n> Maybe add a line to the release notes\n\nAdded in #22618, thanks :) ",https://github.com/bitcoin/bitcoin/pull/21528#issuecomment-892004202,892004202,
ajtowns,2021-03-25 05:32:50,"I don't think there's any need to `SetupAddressRelay` here, and doing so would cause you to continue choosing inbounds that are treating you as block-relay-only instead of ignoring them as a black hole.",https://github.com/bitcoin/bitcoin/pull/21528#discussion_r601057629,601057629,src/net_processing.cpp
jnewbery,2021-03-25 10:21:59,"This isn't thread safe. By accessing `m_addr_known` from outside the message handler thread (eg an rpc worker thread or qt), this opens race conditions where `m_addr_known` is being set by the message handler thread and read by an rpc thread concurrently. In such cases, the thread reading the value could see the old value, the new value or garbage.",https://github.com/bitcoin/bitcoin/pull/21528#discussion_r601317221,601317221,src/net.cpp
jnewbery,2021-03-25 10:30:26,"I don't think it matters much either way. The only peers this affects are inbound block-relay-only connections from v0.21 peers, which (incorrectly) send `sendaddrv2` to us. Inbound block-relay-only peers on v22 won't send `sendaddrv2` because of the change in commit _Stop sending SENDADDRV2 message to block relay only peers_.",https://github.com/bitcoin/bitcoin/pull/21528#discussion_r601327487,601327487,src/net_processing.cpp
jnewbery,2021-03-25 10:31:11,I suggest you drop these tidy-up changes in _Add some documentation and small style fixes_. They don't seem very related to the rest of the PR :see_no_evil: ,https://github.com/bitcoin/bitcoin/pull/21528#discussion_r601328295,601328295,src/net_processing.cpp
amitiuttarwar,2021-03-30 01:05:47,"ergh, its annoying that v0.21 peers will send us the `sendaddrv2` message, but I'm not sure if this warrants removing this conditional. some thoughts:\n- in terms of protocol & logical coherence, I'd expect `sendaddrv2` to indicate desire that the node wants to participate in addr relay\n- in this patch, calling `SetupAddressRelay` for the node mimics the behavior of current master. so I think o",https://github.com/bitcoin/bitcoin/pull/21528#discussion_r603710494,603710494,src/net_processing.cpp
amitiuttarwar,2021-03-30 01:09:14,"ayo, good catch. it feels like overkill to introduce a lock just to expose a boolean, so I've dropped this commit for now. will some of your addr-in-net-processing refactor will make it so we can do this safely? ",https://github.com/bitcoin/bitcoin/pull/21528#discussion_r603711802,603711802,src/net.cpp
amitiuttarwar,2021-03-30 01:13:48,"sorry I'm not sorry!! I abhor two line if statements, they are great footguns. these changes are pretty trivial, I don't think they would make sense as a stand-alone PR, or that they increase the complexity of review, so I'd rather leave them in.",https://github.com/bitcoin/bitcoin/pull/21528#discussion_r603713142,603713142,src/net_processing.cpp
jnewbery,2021-03-30 07:56:46,"> will some of your addr-in-net-processing refactor will make it so we can do this safely?\n\nHopefully, yes!",https://github.com/bitcoin/bitcoin/pull/21528#discussion_r603867126,603867126,src/net.cpp
jnewbery,2021-03-30 08:05:19,"I agree that two line if statements are undesirable. If you were already touching these lines, then I'd agree that you should improve them. However, these are the only changes you make to `SendMessages()` and are unrelated to the rest of the changes in this PR.\n\nI refactor this entire chunk of logic in #21236. Without this tidy-up commit, the two PRs don't conflict and can be merged in either ",https://github.com/bitcoin/bitcoin/pull/21528#discussion_r603872782,603872782,src/net_processing.cpp
ccdle12,2021-03-30 10:27:09,nit: is it worth replacing `if (... && !pfrom.IsBlockOnlyConn())` with `if (... && SetupAddrssRelay(pfrom))` since it already checks if the peer is block-relay-only?,https://github.com/bitcoin/bitcoin/pull/21528#discussion_r603974606,603974606,src/net_processing.cpp
ccdle12,2021-03-30 10:27:23,"nice tests, would it would be overkill to also test for the outbound case?",https://github.com/bitcoin/bitcoin/pull/21528#discussion_r603974781,603974781,test/functional/p2p_addr_relay.py
amitiuttarwar,2021-03-30 21:04:33,ok! reverted :) ,https://github.com/bitcoin/bitcoin/pull/21528#discussion_r604430768,604430768,src/net_processing.cpp
amitiuttarwar,2021-03-30 21:05:24,"nice idea, done!",https://github.com/bitcoin/bitcoin/pull/21528#discussion_r604431246,604431246,src/net_processing.cpp
amitiuttarwar,2021-03-30 21:08:17,"definitely not overkill, the inbound vs outbound behavior is different- inbounds we wait to hear an `addr` message before considering the peer eligible for relay, but with outbounds we setup relay, send `getaddr` & self-announce (unless its a block-relay-only connection). I added some tests to check these behaviors. ",https://github.com/bitcoin/bitcoin/pull/21528#discussion_r604432892,604432892,test/functional/p2p_addr_relay.py
glozow,2021-03-30 21:19:40,"```suggestion\n     *  announcements. Reasons peers might not support addr relay on the link\n     *  include that they connected to us as a block-relay-only peer or they are\n     *  a light client.\n```",https://github.com/bitcoin/bitcoin/pull/21528#discussion_r604439165,604439165,src/net.h
glozow,2021-03-30 21:41:49,"Since peers are chosen randomly, does it make sense to run `self.inbound_blackhole_tests()` a few extra times, just to assert it's not because the node didn't pick `blackhole_peer` by chance?",https://github.com/bitcoin/bitcoin/pull/21528#discussion_r604450797,604450797,test/functional/p2p_addr_relay.py
glozow,2021-03-30 21:53:40,"I think this test could also be improved by asserting that, after `blackhole_peer` does send an `addr`/`addrv2`/`getaddrs`/`sendaddrv2` message, it can get selected for addr propagation.",https://github.com/bitcoin/bitcoin/pull/21528#discussion_r604456653,604456653,test/functional/p2p_addr_relay.py
glozow,2021-03-30 21:57:04,"Another thought - for the blackhole peer, I think could be helpful to assert bytes received for addr-related messages = 0 using `getpeerinfo()`",https://github.com/bitcoin/bitcoin/pull/21528#discussion_r604458405,604458405,test/functional/p2p_addr_relay.py
glozow,2021-03-30 22:41:05,"Side question: why do we clear this list here instead of appending to it, given that `PushAddress` and `SendMessages` filter for duplicates?",https://github.com/bitcoin/bitcoin/pull/21528#discussion_r604477534,604477534,src/net_processing.cpp
amitiuttarwar,2021-03-30 23:35:10,"> Since peers are chosen randomly..\n\nyes, peers are chosen randomly, but this test is set up to not be random- ipv4 addresses will be relayed to 2 peers that are not the source of the addr message. so both `receiver_peer` and `blackhole_peer` would receive the addr if they were eligible. definitely wouldn't want a flaky test there :) \n\n> I think this test could also be improved.. \n\ntha",https://github.com/bitcoin/bitcoin/pull/21528#discussion_r604497976,604497976,test/functional/p2p_addr_relay.py
glozow,2021-03-31 00:39:13,"> yes, peers are chosen randomly, but this test is set up to not be random- ipv4 addresses will be relayed to 2 peers that are not the source of the addr message. so both receiver_peer and blackhole_peer would receive the addr if they were eligible. definitely wouldn't want a flaky test there :)\n\nOh right it's always going to be the same one. That makes sense then, that the node has 2 options ",https://github.com/bitcoin/bitcoin/pull/21528#discussion_r604518862,604518862,test/functional/p2p_addr_relay.py
amitiuttarwar,2021-03-31 01:06:30,"> But wait I'm confused why it would be flaky, I thought blackhole_peer would never get the addr because it hasn't sent any addr-related messages?\n\nyes yes, it would be flaky if it wasn't deterministic / `blackhole_peer` was being skipped by chance. I think we're on the same page, just confusion of my language now. \n\n> Er I mean, call getpeerinfo() on the node to see bytes received, kinda ",https://github.com/bitcoin/bitcoin/pull/21528#discussion_r604526797,604526797,test/functional/p2p_addr_relay.py
GeneFerneau,2021-03-31 16:46:07,"```suggestion\n    std::unique_ptr<CRollingBloomFilter> m_addr_known GUARDED_BY(cs_addrKnown){nullptr};\n```\nand add `cs_addrKnown` as a private member:\n\n```\nmutable RecursiveMutex cs_addrKnown;\n```\n\nto address the point about race conditions mentioned by @jnewbery ",https://github.com/bitcoin/bitcoin/pull/21528#discussion_r605058607,605058607,src/net.h
amitiuttarwar,2021-06-15 01:34:48,"Leaving this as is - I find it most logically consistent for `sendaddrv2` to indicate ""interested in addresses"". Opened #22245 to change the behavior for inbound block-relay-only v22.0 peers.",https://github.com/bitcoin/bitcoin/pull/21528#discussion_r651383772,651383772,src/net_processing.cpp
amitiuttarwar,2021-06-15 01:49:53,updated language ,https://github.com/bitcoin/bitcoin/pull/21528#discussion_r651388591,651388591,src/net.h
amitiuttarwar,2021-06-15 01:51:21,"based on this convo, I've updated the tests to assert that `blackhole_peer` starts receiving addr messages after sending one. I've also added `getpeerinfo` for the node to verify the test setup of which peers have sent addr related messages. \n\nthanks!   ",https://github.com/bitcoin/bitcoin/pull/21528#discussion_r651389080,651389080,test/functional/p2p_addr_relay.py
amitiuttarwar,2021-06-15 01:53:26,Holding off on this to try to figure out if there's a better way I can expose this value through the `getpeerinfo` RPC than having to introduce a mutex for this one hyper-specific use case. Ideas welcome! ,https://github.com/bitcoin/bitcoin/pull/21528#discussion_r651389788,651389788,src/net.h
amitiuttarwar,2021-07-26 20:42:25,added `addr_relay_enabled` as an atomic to address this issue. ,https://github.com/bitcoin/bitcoin/pull/21528#discussion_r676929839,676929839,src/net.h
jnewbery,2021-07-27 09:53:20,"```suggestion\n        if (peer->addr_relay_enabled && id != originator && IsAddrCompatible(*peer, addr)) {\n```",https://github.com/bitcoin/bitcoin/pull/21528#discussion_r677298006,677298006,src/net_processing.cpp
jnewbery,2021-07-27 09:53:59,Is this new `getaddr` message to trigger addr relay from the node? What do you think about just sending an empty `addr` message instead?,https://github.com/bitcoin/bitcoin/pull/21528#discussion_r677298478,677298478,test/functional/p2p_addr_relay.py
jnewbery,2021-07-27 10:01:19,"```suggestion\n        return sum(bytes_recvd for (msg, bytes_recvd) in msgs_dict.items() if msg in ['addr', 'addrv2', 'getaddr', 'sendaddrv2'])\n```\n",https://github.com/bitcoin/bitcoin/pull/21528#discussion_r677303641,677303641,test/functional/p2p_addr_relay.py
jnewbery,2021-07-27 10:03:01,Perhaps move this above the `m_getaddr_recvd` logic (to avoid reading the unused `m_getaddr_recvd` value for non-addr-relay peers).,https://github.com/bitcoin/bitcoin/pull/21528#discussion_r677304728,677304728,src/net_processing.cpp
jnewbery,2021-07-27 10:07:04,"This is a bit misleading. The logic block below contains self-advertisement logic, but it also sends a `getaddr` to request addresses, which is not self-advertisement.",https://github.com/bitcoin/bitcoin/pull/21528#discussion_r677307450,677307450,src/net_processing.cpp
jnewbery,2021-07-27 10:11:21,I'd very much prefer not to introduce the word 'trickle' here. I've only ever heard the word 'trickle' being used to refer to transaction propagation (eg #7125). Adding the word here would be overloading the term with a new meaning.,https://github.com/bitcoin/bitcoin/pull/21528#discussion_r677310663,677310663,src/net_processing.cpp
jnewbery,2021-07-27 10:11:41,"Same comment as above about the word ""trickle""",https://github.com/bitcoin/bitcoin/pull/21528#discussion_r677310877,677310877,test/functional/p2p_addr_relay.py
jnewbery,2021-07-27 10:12:50,"Also, remove `sendaddrv2` from the list?",https://github.com/bitcoin/bitcoin/pull/21528#discussion_r677311723,677311723,test/functional/p2p_addr_relay.py
jnewbery,2021-07-27 10:22:22,This is no longer true. We use `addr_relay_enabled` to decide whether a peer is eligible for addr relay.,https://github.com/bitcoin/bitcoin/pull/21528#discussion_r677318087,677318087,src/net_processing.cpp
jnewbery,2021-07-27 10:22:29,"```suggestion\n    std::atomic_bool m_addr_relay_enabled{false};\n```",https://github.com/bitcoin/bitcoin/pull/21528#discussion_r677318160,677318160,src/net_processing.cpp
jnewbery,2021-07-27 10:27:34,"```suggestion\n    bool m_addr_relay_enabled;\n```",https://github.com/bitcoin/bitcoin/pull/21528#discussion_r677321159,677321159,src/net_processing.h
jnewbery,2021-07-27 10:29:35,"You can atomically test and set the flag as follows:\n\n```suggestion\n    if (!peer->addr_relay_enabled.exchange(true)) {\n        // First addr message we have received from the peer, initialize\n        // m_addr_known\n        peer->m_addr_known = std::make_unique<CRollingBloomFilter>(5000, 0.001);\n```\n\n(`std::atomic<T>::exchange()` returns the value of the object before the call (",https://github.com/bitcoin/bitcoin/pull/21528#discussion_r677322503,677322503,src/net_processing.cpp
amitiuttarwar,2021-07-27 20:07:08,"I don't follow- there is an earlier clause that returns early if `!IsInboundConn`, so `SetupAddressRelay` should never return false. So I don't think the order matters here? ",https://github.com/bitcoin/bitcoin/pull/21528#discussion_r677762857,677762857,src/net_processing.cpp
amitiuttarwar,2021-07-27 21:13:44,fixed,https://github.com/bitcoin/bitcoin/pull/21528#discussion_r677804715,677804715,src/net_processing.cpp
amitiuttarwar,2021-07-27 21:15:51,good idea! done & added a comment,https://github.com/bitcoin/bitcoin/pull/21528#discussion_r677806027,677806027,test/functional/p2p_addr_relay.py
amitiuttarwar,2021-07-27 21:16:10,done and done,https://github.com/bitcoin/bitcoin/pull/21528#discussion_r677806229,677806229,test/functional/p2p_addr_relay.py
amitiuttarwar,2021-07-27 21:16:36,"good point, updated to include ",https://github.com/bitcoin/bitcoin/pull/21528#discussion_r677806468,677806468,src/net_processing.cpp
amitiuttarwar,2021-07-27 21:17:32,"ah gotcha. I updated the language to use ""gossiping addr messages"", does that feel more appropriate / consistent? \n\n(also mentioned in https://github.com/bitcoin/bitcoin/pull/21528#discussion_r677310877, linking as a reminder to myself for potential future updates)",https://github.com/bitcoin/bitcoin/pull/21528#discussion_r677807103,677807103,src/net_processing.cpp
amitiuttarwar,2021-07-27 21:18:00,"convo continued in https://github.com/bitcoin/bitcoin/pull/21528#discussion_r677807103, resolving this thread",https://github.com/bitcoin/bitcoin/pull/21528#discussion_r677807351,677807351,test/functional/p2p_addr_relay.py
amitiuttarwar,2021-07-27 21:19:39,ah good point. updated the comments on both `m_addr_known` and `m_addr_relay_enabled`,https://github.com/bitcoin/bitcoin/pull/21528#discussion_r677808295,677808295,src/net_processing.cpp
amitiuttarwar,2021-07-27 21:19:56,"done, thanks",https://github.com/bitcoin/bitcoin/pull/21528#discussion_r677808482,677808482,src/net_processing.cpp
amitiuttarwar,2021-07-27 21:20:03,done,https://github.com/bitcoin/bitcoin/pull/21528#discussion_r677808551,677808551,src/net_processing.h
amitiuttarwar,2021-07-27 21:20:15,nice trick! done,https://github.com/bitcoin/bitcoin/pull/21528#discussion_r677808677,677808677,src/net_processing.cpp
jnewbery,2021-07-27 21:45:17,"""gossiping addr messages"" SGTM!",https://github.com/bitcoin/bitcoin/pull/21528#discussion_r677822334,677822334,src/net_processing.cpp
jnewbery,2021-07-28 08:33:58,"I'm not sure it makes sense to declare this method `const`. It doesn't mutate the state of the `PeerManagerImpl` object itself, but it can mutate a `Peer` object, which is owned by `PeerManagerImpl`.",https://github.com/bitcoin/bitcoin/pull/21528#discussion_r678092470,678092470,src/net_processing.cpp
jnewbery,2021-07-28 08:41:20,"Logically, I think it makes sense to not access any addr data members until after `SetupAddressRelay()` is called. You're right that for now the ordering doesn't matter, but  I could imagine in the future we might want to collect the addr relay data members (`m_addrs_to_send`, `m_getaddr_sent`, `m_addr_send_times_mutex`, `m_next_addr_send`, etc)\ninto a struct which is initialized by `SetupAddres",https://github.com/bitcoin/bitcoin/pull/21528#discussion_r678098001,678098001,src/net_processing.cpp
jnewbery,2021-07-28 11:22:03,"Maybe explicitly default initialize this to `false`:\n\n```suggestion\n    bool m_addr_relay_enabled{false};\n```",https://github.com/bitcoin/bitcoin/pull/21528#discussion_r678209791,678209791,src/net_processing.h
amitiuttarwar,2021-07-28 22:09:32,removed,https://github.com/bitcoin/bitcoin/pull/21528#discussion_r678686278,678686278,src/net_processing.cpp
amitiuttarwar,2021-07-28 22:09:43,done,https://github.com/bitcoin/bitcoin/pull/21528#discussion_r678686351,678686351,src/net_processing.h
amitiuttarwar,2021-07-28 22:10:02,"ah gotcha, ok! moved",https://github.com/bitcoin/bitcoin/pull/21528#discussion_r678686487,678686487,src/net_processing.cpp
MarcoFalke,2021-07-29 11:43:48,Any reason to not pass in `PeerRef peer` from outside and remove this line?,https://github.com/bitcoin/bitcoin/pull/21528#discussion_r679074888,679074888,src/net_processing.cpp
MarcoFalke,2021-07-29 12:00:33,7e4662b8a0ea0428aa9eefe7b8116f85e5eda486: blackholing,https://github.com/bitcoin/bitcoin/pull/21528#discussion_r679085653,679085653,src/net_processing.cpp
amitiuttarwar,2021-07-29 17:11:15,"no particular reason _not_ to, I'm trying to understand the differences... \n\ncurrent implementation: uses `GetPeerRef` which constructs an additional `shared_ptr`, and would have to update the control block used to coordinate between the pointers. \n\nyour suggestion: passing in `PeerRef peer`, doesn't this increment the refcount at the beginning of the function & decrement at the end? so wh",https://github.com/bitcoin/bitcoin/pull/21528#discussion_r679338070,679338070,src/net_processing.cpp
MarcoFalke,2021-07-29 17:16:17,"Also, you wouldn't need to check for nullptr, as the caller already did that",https://github.com/bitcoin/bitcoin/pull/21528#discussion_r679341641,679341641,src/net_processing.cpp
jnewbery,2021-07-29 17:25:25,"> another alternative: passing in Peer& peer. does this mean the lifetime of the reference would just be managed in the normal program execution? so would that mean this is the most efficient?\n\nThis is the way to do it. The called function is not taking ownership of `Peer`, so just pass by reference. You only need to pass smart pointers when you're indicating ownership semantics: https://isocp",https://github.com/bitcoin/bitcoin/pull/21528#discussion_r679347992,679347992,src/net_processing.cpp
amitiuttarwar,2021-07-30 00:48:58,"*** blaaaaackholing \n\n:) fixed ",https://github.com/bitcoin/bitcoin/pull/21528#discussion_r679573334,679573334,src/net_processing.cpp
amitiuttarwar,2021-07-30 00:49:42,"👍 done, thanks! ",https://github.com/bitcoin/bitcoin/pull/21528#discussion_r679573586,679573586,src/net_processing.cpp
ajtowns,2021-08-02 13:18:29,"`if (!pfrom.IsInboundConn() || !SetupAddressRelay(pfrom, *peer)) { error; return; }` might have been better so you don't have to keep the knowledge that SetupAddressRelay always returns true for inbound conns in your head.",https://github.com/bitcoin/bitcoin/pull/21528#discussion_r680963101,680963101,src/net_processing.cpp
amitiuttarwar,2021-08-02 14:25:32,"makes sense, I'll change if I have to push again ",https://github.com/bitcoin/bitcoin/pull/21528#discussion_r681016819,681016819,src/net_processing.cpp
fanquake,2021-08-03 01:47:41,s/intialize/initialize,https://github.com/bitcoin/bitcoin/pull/21528#discussion_r681374594,681374594,test/functional/p2p_addr_relay.py
MarcoFalke,2021-08-03 08:39:58,`Assume(Setup())` would do that?,https://github.com/bitcoin/bitcoin/pull/21528#discussion_r681556819,681556819,src/net_processing.cpp
MarcoFalke,2021-08-03 08:58:08,nit: Would be nice to always add a trailing comma to avoid ugly diffs and keeping the `git blame` depth lower in the future.,https://github.com/bitcoin/bitcoin/pull/21528#discussion_r681570767,681570767,test/functional/p2p_addr_relay.py
amitiuttarwar,2021-08-03 15:19:30,noted,https://github.com/bitcoin/bitcoin/pull/21528#discussion_r681861829,681861829,test/functional/p2p_addr_relay.py
amitiuttarwar,2021-08-03 16:51:14,addressed in #22618 ,https://github.com/bitcoin/bitcoin/pull/21528#discussion_r681936270,681936270,src/net_processing.cpp
