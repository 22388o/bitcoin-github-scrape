[
  {
    "sha": "65c589e45e8b8914698a0fd25cd5aafdda30869c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NWM1ODllNDVlOGI4OTE0Njk4YTBmZDI1Y2Q1YWFmZGRhMzA4Njlj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-05-20T17:16:41Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-05-20T17:16:41Z"
      },
      "message": "Convert Qt to new serialization",
      "tree": {
        "sha": "5b99c6e0e4419a1f1d51ee4262028ab681ba9a55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b99c6e0e4419a1f1d51ee4262028ab681ba9a55"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65c589e45e8b8914698a0fd25cd5aafdda30869c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65c589e45e8b8914698a0fd25cd5aafdda30869c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/65c589e45e8b8914698a0fd25cd5aafdda30869c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65c589e45e8b8914698a0fd25cd5aafdda30869c/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "448bdff26307981b7e32ba5610dad6674c1fe46d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/448bdff26307981b7e32ba5610dad6674c1fe46d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/448bdff26307981b7e32ba5610dad6674c1fe46d"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 17,
      "deletions": 34
    },
    "files": [
      {
        "sha": "c0bd3461bb4108647a42e756f7a7e60d9c9ba616",
        "filename": "src/qt/recentrequeststablemodel.h",
        "status": "modified",
        "additions": 5,
        "deletions": 13,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65c589e45e8b8914698a0fd25cd5aafdda30869c/src/qt/recentrequeststablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65c589e45e8b8914698a0fd25cd5aafdda30869c/src/qt/recentrequeststablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.h?ref=65c589e45e8b8914698a0fd25cd5aafdda30869c",
        "patch": "@@ -24,19 +24,11 @@ class RecentRequestEntry\n     QDateTime date;\n     SendCoinsRecipient recipient;\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        unsigned int nDate = date.toTime_t();\n-\n-        READWRITE(this->nVersion);\n-        READWRITE(id);\n-        READWRITE(nDate);\n-        READWRITE(recipient);\n-\n-        if (ser_action.ForRead())\n-            date = QDateTime::fromTime_t(nDate);\n+    SERIALIZE_METHODS(RecentRequestEntry, obj) {\n+        unsigned int date_timet;\n+        SER_WRITE(obj, date_timet = obj.date.toTime_t());\n+        READWRITE(obj.nVersion, obj.id, date_timet, obj.recipient);\n+        SER_READ(obj, obj.date = QDateTime::fromTime_t(date_timet));\n     }\n };\n "
      },
      {
        "sha": "6619faf417f6cf688e3731d5e8f2330c3ecb9a0e",
        "filename": "src/qt/sendcoinsrecipient.h",
        "status": "modified",
        "additions": 12,
        "deletions": 21,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65c589e45e8b8914698a0fd25cd5aafdda30869c/src/qt/sendcoinsrecipient.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65c589e45e8b8914698a0fd25cd5aafdda30869c/src/qt/sendcoinsrecipient.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsrecipient.h?ref=65c589e45e8b8914698a0fd25cd5aafdda30869c",
        "patch": "@@ -44,30 +44,21 @@ class SendCoinsRecipient\n     static const int CURRENT_VERSION = 1;\n     int nVersion;\n \n-    ADD_SERIALIZE_METHODS;\n+    SERIALIZE_METHODS(SendCoinsRecipient, obj)\n+    {\n+        std::string address_str, label_str, message_str, auth_merchant_str;\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        std::string sAddress = address.toStdString();\n-        std::string sLabel = label.toStdString();\n-        std::string sMessage = message.toStdString();\n-        std::string sAuthenticatedMerchant = authenticatedMerchant.toStdString();\n+        SER_WRITE(obj, address_str = obj.address.toStdString());\n+        SER_WRITE(obj, label_str = obj.label.toStdString());\n+        SER_WRITE(obj, message_str = obj.message.toStdString());\n+        SER_WRITE(obj, auth_merchant_str = obj.authenticatedMerchant.toStdString());\n \n-        READWRITE(this->nVersion);\n-        READWRITE(sAddress);\n-        READWRITE(sLabel);\n-        READWRITE(amount);\n-        READWRITE(sMessage);\n-        READWRITE(sPaymentRequest);\n-        READWRITE(sAuthenticatedMerchant);\n+        READWRITE(obj.nVersion, address_str, label_str, obj.amount, message_str, obj.sPaymentRequest, auth_merchant_str);\n \n-        if (ser_action.ForRead())\n-        {\n-            address = QString::fromStdString(sAddress);\n-            label = QString::fromStdString(sLabel);\n-            message = QString::fromStdString(sMessage);\n-            authenticatedMerchant = QString::fromStdString(sAuthenticatedMerchant);\n-        }\n+        SER_READ(obj, obj.address = QString::fromStdString(address_str));\n+        SER_READ(obj, obj.label = QString::fromStdString(label_str));\n+        SER_READ(obj, obj.message = QString::fromStdString(message_str));\n+        SER_READ(obj, obj.authenticatedMerchant = QString::fromStdString(auth_merchant_str));\n     }\n };\n "
      }
    ]
  },
  {
    "sha": "ef17c03e074b6c3f185afa4eff572ba687c2a171",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZjE3YzAzZTA3NGI2YzNmMTg1YWZhNGVmZjU3MmJhNjg3YzJhMTcx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-05-24T17:34:52Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-05-24T17:34:52Z"
      },
      "message": "Convert wallet to new serialization",
      "tree": {
        "sha": "0cdd2ce4516205a4c80c5d4400ad75af68de3e6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0cdd2ce4516205a4c80c5d4400ad75af68de3e6c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef17c03e074b6c3f185afa4eff572ba687c2a171",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef17c03e074b6c3f185afa4eff572ba687c2a171",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ef17c03e074b6c3f185afa4eff572ba687c2a171",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef17c03e074b6c3f185afa4eff572ba687c2a171/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "65c589e45e8b8914698a0fd25cd5aafdda30869c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65c589e45e8b8914698a0fd25cd5aafdda30869c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/65c589e45e8b8914698a0fd25cd5aafdda30869c"
      }
    ],
    "stats": {
      "total": 136,
      "additions": 60,
      "deletions": 76
    },
    "files": [
      {
        "sha": "f2df786e2e7c05e0f444c7ea4d57d0c833171a6c",
        "filename": "src/wallet/crypter.h",
        "status": "modified",
        "additions": 3,
        "deletions": 9,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef17c03e074b6c3f185afa4eff572ba687c2a171/src/wallet/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef17c03e074b6c3f185afa4eff572ba687c2a171/src/wallet/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.h?ref=ef17c03e074b6c3f185afa4eff572ba687c2a171",
        "patch": "@@ -43,15 +43,9 @@ class CMasterKey\n     //! such as the various parameters to scrypt\n     std::vector<unsigned char> vchOtherDerivationParameters;\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(vchCryptedKey);\n-        READWRITE(vchSalt);\n-        READWRITE(nDerivationMethod);\n-        READWRITE(nDeriveIterations);\n-        READWRITE(vchOtherDerivationParameters);\n+    SERIALIZE_METHODS(CMasterKey, obj)\n+    {\n+        READWRITE(obj.vchCryptedKey, obj.vchSalt, obj.nDerivationMethod, obj.nDeriveIterations, obj.vchOtherDerivationParameters);\n     }\n \n     CMasterKey()"
      },
      {
        "sha": "be3116170fa3844d1e0c13d1cd1e72c7b6f7595c",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 28,
        "deletions": 27,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef17c03e074b6c3f185afa4eff572ba687c2a171/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef17c03e074b6c3f185afa4eff572ba687c2a171/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=ef17c03e074b6c3f185afa4eff572ba687c2a171",
        "patch": "@@ -110,36 +110,37 @@ class CKeyPool\n     CKeyPool();\n     CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn);\n \n-    ADD_SERIALIZE_METHODS;\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH)) {\n+            s << nVersion;\n+        }\n+        s << nTime << vchPubKey << fInternal << m_pre_split;\n+    }\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n         int nVersion = s.GetVersion();\n-        if (!(s.GetType() & SER_GETHASH))\n-            READWRITE(nVersion);\n-        READWRITE(nTime);\n-        READWRITE(vchPubKey);\n-        if (ser_action.ForRead()) {\n-            try {\n-                READWRITE(fInternal);\n-            }\n-            catch (std::ios_base::failure&) {\n-                /* flag as external address if we can't read the internal boolean\n-                   (this will be the case for any wallet before the HD chain split version) */\n-                fInternal = false;\n-            }\n-            try {\n-                READWRITE(m_pre_split);\n-            }\n-            catch (std::ios_base::failure&) {\n-                /* flag as postsplit address if we can't read the m_pre_split boolean\n-                   (this will be the case for any wallet that upgrades to HD chain split)*/\n-                m_pre_split = false;\n-            }\n+        if (!(s.GetType() & SER_GETHASH)) {\n+            s >> nVersion;\n+        }\n+        s >> nTime >> vchPubKey;\n+        try {\n+            s >> fInternal;\n+        } catch (std::ios_base::failure&) {\n+            /* flag as external address if we can't read the internal boolean\n+               (this will be the case for any wallet before the HD chain split version) */\n+            fInternal = false;\n         }\n-        else {\n-            READWRITE(fInternal);\n-            READWRITE(m_pre_split);\n+        try {\n+            s >> m_pre_split;\n+        } catch (std::ios_base::failure&) {\n+            /* flag as postsplit address if we can't read the m_pre_split boolean\n+               (this will be the case for any wallet that upgrades to HD chain split) */\n+            m_pre_split = false;\n         }\n     }\n };"
      },
      {
        "sha": "dfec3dba60d88e4a5062300ce080a0d2ec2a1d4f",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 14,
        "deletions": 21,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef17c03e074b6c3f185afa4eff572ba687c2a171/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef17c03e074b6c3f185afa4eff572ba687c2a171/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=ef17c03e074b6c3f185afa4eff572ba687c2a171",
        "patch": "@@ -98,15 +98,13 @@ class CHDChain\n     int nVersion;\n \n     CHDChain() { SetNull(); }\n-    ADD_SERIALIZE_METHODS;\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action)\n+\n+    SERIALIZE_METHODS(CHDChain, obj)\n     {\n-        READWRITE(this->nVersion);\n-        READWRITE(nExternalChainCounter);\n-        READWRITE(seed_id);\n-        if (this->nVersion >= VERSION_HD_CHAIN_SPLIT)\n-            READWRITE(nInternalChainCounter);\n+        READWRITE(obj.nVersion, obj.nExternalChainCounter, obj.seed_id);\n+        if (obj.nVersion >= VERSION_HD_CHAIN_SPLIT) {\n+            READWRITE(obj.nInternalChainCounter);\n+        }\n     }\n \n     void SetNull()\n@@ -142,21 +140,16 @@ class CKeyMetadata\n         nCreateTime = nCreateTime_;\n     }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(this->nVersion);\n-        READWRITE(nCreateTime);\n-        if (this->nVersion >= VERSION_WITH_HDDATA)\n-        {\n-            READWRITE(hdKeypath);\n-            READWRITE(hd_seed_id);\n+    SERIALIZE_METHODS(CKeyMetadata, obj)\n+    {\n+        READWRITE(obj.nVersion, obj.nCreateTime);\n+        if (obj.nVersion >= VERSION_WITH_HDDATA) {\n+            READWRITE(obj.hdKeypath, obj.hd_seed_id);\n         }\n-        if (this->nVersion >= VERSION_WITH_KEY_ORIGIN)\n+        if (obj.nVersion >= VERSION_WITH_KEY_ORIGIN)\n         {\n-            READWRITE(key_origin);\n-            READWRITE(has_key_origin);\n+            READWRITE(obj.key_origin);\n+            READWRITE(obj.has_key_origin);\n         }\n     }\n "
      },
      {
        "sha": "a4e4fda8a1f029336394ea29cef85a06afd88118",
        "filename": "src/wallet/walletutil.h",
        "status": "modified",
        "additions": 15,
        "deletions": 19,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef17c03e074b6c3f185afa4eff572ba687c2a171/src/wallet/walletutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef17c03e074b6c3f185afa4eff572ba687c2a171/src/wallet/walletutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.h?ref=ef17c03e074b6c3f185afa4eff572ba687c2a171",
        "patch": "@@ -98,26 +98,22 @@ class WalletDescriptor\n     int32_t next_index = 0; // Position of the next item to generate\n     DescriptorCache cache;\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        if (ser_action.ForRead()) {\n-            std::string desc;\n-            std::string error;\n-            READWRITE(desc);\n-            FlatSigningProvider keys;\n-            descriptor = Parse(desc, keys, error, true);\n-            if (!descriptor) {\n-                throw std::ios_base::failure(\"Invalid descriptor: \" + error);\n-            }\n-        } else {\n-            READWRITE(descriptor->ToString());\n+    void DeserializeDescriptor(const std::string& str)\n+    {\n+        std::string error;\n+        FlatSigningProvider keys;\n+        descriptor = Parse(str, keys, error, true);\n+        if (!descriptor) {\n+            throw std::ios_base::failure(\"Invalid descriptor: \" + error);\n         }\n-        READWRITE(creation_time);\n-        READWRITE(next_index);\n-        READWRITE(range_start);\n-        READWRITE(range_end);\n+    }\n+\n+    SERIALIZE_METHODS(WalletDescriptor, obj)\n+    {\n+        std::string descriptor_str;\n+        SER_WRITE(obj, descriptor_str = obj.descriptor->ToString());\n+        READWRITE(descriptor_str, obj.creation_time, obj.next_index, obj.range_start, obj.range_end);\n+        SER_READ(obj, obj.DeserializeDescriptor(descriptor_str));\n     }\n \n     WalletDescriptor() {}"
      }
    ]
  },
  {
    "sha": "92beff15d3ae2646c00bd78146d7592a7097ce9c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MmJlZmYxNWQzYWUyNjQ2YzAwYmQ3ODE0NmQ3NTkyYTcwOTdjZTlj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-05-20T18:13:06Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-05-24T17:35:00Z"
      },
      "message": "Convert LimitedString to formatter",
      "tree": {
        "sha": "bb88450e1500034b00d626e1e2babeb8bc977d5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb88450e1500034b00d626e1e2babeb8bc977d5a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92beff15d3ae2646c00bd78146d7592a7097ce9c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92beff15d3ae2646c00bd78146d7592a7097ce9c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/92beff15d3ae2646c00bd78146d7592a7097ce9c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92beff15d3ae2646c00bd78146d7592a7097ce9c/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ef17c03e074b6c3f185afa4eff572ba687c2a171",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef17c03e074b6c3f185afa4eff572ba687c2a171",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ef17c03e074b6c3f185afa4eff572ba687c2a171"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 9,
      "deletions": 17
    },
    "files": [
      {
        "sha": "c2e863d97a57f4a31ce890a4d4c2fb80dd0d1ba0",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 7,
        "deletions": 15,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92beff15d3ae2646c00bd78146d7592a7097ce9c/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92beff15d3ae2646c00bd78146d7592a7097ce9c/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=92beff15d3ae2646c00bd78146d7592a7097ce9c",
        "patch": "@@ -503,7 +503,7 @@ static inline Wrapper<Formatter, T&> Using(T&& t) { return Wrapper<Formatter, T&\n #define VARINT_MODE(obj, mode) Using<VarIntFormatter<mode>>(obj)\n #define VARINT(obj) Using<VarIntFormatter<VarIntMode::DEFAULT>>(obj)\n #define COMPACTSIZE(obj) Using<CompactSizeFormatter>(obj)\n-#define LIMITED_STRING(obj,n) LimitedString< n >(REF(obj))\n+#define LIMITED_STRING(obj,n) Using<LimitedStringFormatter<n>>(obj)\n \n /** Serialization wrapper class for integers in VarInt format. */\n template<VarIntMode Mode>\n@@ -588,31 +588,23 @@ struct CompactSizeFormatter\n };\n \n template<size_t Limit>\n-class LimitedString\n+struct LimitedStringFormatter\n {\n-protected:\n-    std::string& string;\n-public:\n-    explicit LimitedString(std::string& _string) : string(_string) {}\n-\n     template<typename Stream>\n-    void Unserialize(Stream& s)\n+    void Unser(Stream& s, std::string& v)\n     {\n         size_t size = ReadCompactSize(s);\n         if (size > Limit) {\n             throw std::ios_base::failure(\"String length limit exceeded\");\n         }\n-        string.resize(size);\n-        if (size != 0)\n-            s.read((char*)string.data(), size);\n+        v.resize(size);\n+        if (size != 0) s.read((char*)v.data(), size);\n     }\n \n     template<typename Stream>\n-    void Serialize(Stream& s) const\n+    void Ser(Stream& s, const std::string& v)\n     {\n-        WriteCompactSize(s, string.size());\n-        if (!string.empty())\n-            s.write((char*)string.data(), string.size());\n+        s << v;\n     }\n };\n "
      },
      {
        "sha": "50984b1aefb0bd95b83267c157defc7cfaaee9aa",
        "filename": "src/test/fuzz/string.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92beff15d3ae2646c00bd78146d7592a7097ce9c/src/test/fuzz/string.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92beff15d3ae2646c00bd78146d7592a7097ce9c/src/test/fuzz/string.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/string.cpp?ref=92beff15d3ae2646c00bd78146d7592a7097ce9c",
        "patch": "@@ -93,7 +93,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     {\n         CDataStream data_stream{SER_NETWORK, INIT_PROTO_VERSION};\n         std::string s;\n-        LimitedString<10> limited_string = LIMITED_STRING(s, 10);\n+        auto limited_string = LIMITED_STRING(s, 10);\n         data_stream << random_string_1;\n         try {\n             data_stream >> limited_string;\n@@ -108,7 +108,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     }\n     {\n         CDataStream data_stream{SER_NETWORK, INIT_PROTO_VERSION};\n-        const LimitedString<10> limited_string = LIMITED_STRING(random_string_1, 10);\n+        const auto limited_string = LIMITED_STRING(random_string_1, 10);\n         data_stream << limited_string;\n         std::string deserialized_string;\n         data_stream >> deserialized_string;"
      }
    ]
  },
  {
    "sha": "71f016c6eb42e1ac2c905e04ba4d20c2009e533f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MWYwMTZjNmViNDJlMWFjMmM5MDVlMDRiYTRkMjBjMjAwOWU1MzNm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-05-20T18:13:25Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-05-24T17:35:00Z"
      },
      "message": "Remove old serialization primitives",
      "tree": {
        "sha": "dc5d877d37f31c07f8988391f9efb4de3ea179a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dc5d877d37f31c07f8988391f9efb4de3ea179a3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/71f016c6eb42e1ac2c905e04ba4d20c2009e533f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71f016c6eb42e1ac2c905e04ba4d20c2009e533f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/71f016c6eb42e1ac2c905e04ba4d20c2009e533f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71f016c6eb42e1ac2c905e04ba4d20c2009e533f/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "92beff15d3ae2646c00bd78146d7592a7097ce9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92beff15d3ae2646c00bd78146d7592a7097ce9c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/92beff15d3ae2646c00bd78146d7592a7097ce9c"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 1,
      "deletions": 37
    },
    "files": [
      {
        "sha": "71c2cfa164f6af8c9f9e53b9a40b9240641135a4",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 1,
        "deletions": 37,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71f016c6eb42e1ac2c905e04ba4d20c2009e533f/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71f016c6eb42e1ac2c905e04ba4d20c2009e533f/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=71f016c6eb42e1ac2c905e04ba4d20c2009e533f",
        "patch": "@@ -43,26 +43,6 @@ static const unsigned int MAX_VECTOR_ALLOCATE = 5000000;\n struct deserialize_type {};\n constexpr deserialize_type deserialize {};\n \n-/**\n- * Used to bypass the rule against non-const reference to temporary\n- * where it makes sense with wrappers.\n- */\n-template<typename T>\n-inline T& REF(const T& val)\n-{\n-    return const_cast<T&>(val);\n-}\n-\n-/**\n- * Used to acquire a non-const pointer \"this\" to generate bodies\n- * of const serialization operations from a template\n- */\n-template<typename T>\n-inline T* NCONST_PTR(const T* val)\n-{\n-    return const_cast<T*>(val);\n-}\n-\n //! Safely convert odd char pointer types to standard ones.\n inline char* CharCast(char* c) { return c; }\n inline char* CharCast(unsigned char* c) { return (char*)c; }\n@@ -193,22 +173,6 @@ template<typename X> const X& ReadWriteAsHelper(const X& x) { return x; }\n #define SER_READ(obj, code) ::SerRead(s, ser_action, obj, [&](Stream& s, typename std::remove_const<Type>::type& obj) { code; })\n #define SER_WRITE(obj, code) ::SerWrite(s, ser_action, obj, [&](Stream& s, const Type& obj) { code; })\n \n-/**\n- * Implement three methods for serializable objects. These are actually wrappers over\n- * \"SerializationOp\" template, which implements the body of each class' serialization\n- * code. Adding \"ADD_SERIALIZE_METHODS\" in the body of the class causes these wrappers to be\n- * added as members.\n- */\n-#define ADD_SERIALIZE_METHODS                                         \\\n-    template<typename Stream>                                         \\\n-    void Serialize(Stream& s) const {                                 \\\n-        NCONST_PTR(this)->SerializationOp(s, CSerActionSerialize());  \\\n-    }                                                                 \\\n-    template<typename Stream>                                         \\\n-    void Unserialize(Stream& s) {                                     \\\n-        SerializationOp(s, CSerActionUnserialize());                  \\\n-    }\n-\n /**\n  * Implement the Ser and Unser methods needed for implementing a formatter (see Using below).\n  *\n@@ -1004,7 +968,7 @@ void Unserialize(Stream& is, std::shared_ptr<const T>& p)\n \n \n /**\n- * Support for ADD_SERIALIZE_METHODS and READWRITE macro\n+ * Support for SERIALIZE_METHODS and READWRITE macro.\n  */\n struct CSerActionSerialize\n {"
      }
    ]
  }
]