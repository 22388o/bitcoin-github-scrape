jamesob,2021-08-05 20:34:15,"I'm reopening this because I think it's worth some long-term consideration. We're not going to get many opportunities to improve block connection by ~12%, so I think this is worth continuing to look at. Now that bitcoin is on c++17, I wonder if there aren't some good ways to slim down @martinus's implementation, since it contains a number of provisions to deal with <c++17 platforms. At the very le",https://github.com/bitcoin/bitcoin/pull/22640#issuecomment-893777744,893777744,
0xB10C,2021-08-05 20:50:43,Cool. I plan on benchmarking this too (at least IBD speed) via the [`validation::connect_block`](https://github.com/bitcoin/bitcoin/blob/master/doc/tracing.md#tracepoint-validationblock_connected) USDT tracepoint.,https://github.com/bitcoin/bitcoin/pull/22640#issuecomment-893786145,893786145,
martinus,2021-08-06 07:15:48,It's unfortunately really hard to fix https://github.com/martinus/robin-hood-hashing/issues/117 without losing at least some of the performance benefit. Also I don't really have the time to do it properly... So I'm personally quite a bit weary about using my `robin_hood` map for such a critical place. I mean I've been using it in for a long time in many countless installations and personally have ,https://github.com/bitcoin/bitcoin/pull/22640#issuecomment-894056722,894056722,
martinus,2021-08-06 20:37:12,"I have now rebased my branch https://github.com/martinus/bitcoin/tree/2019-08-bulkpoolallocator and done some rudimentary benchmarks: create the `CCoinsMap`, and 5 times insert 1 million entries and then clear it. I measured average time per insertion in ns/op and maximum resident set size in kbyte.\n\nI tried `std::unordered_map` and `std::map` with and without the `bulk_pool`, and also tried a",https://github.com/bitcoin/bitcoin/pull/22640#issuecomment-894506145,894506145,
jamesob,2021-08-09 16:10:40,"Once again, @martinus has convinced me that the relative performance benefits of swapping out the entire map implementation aren't worth the risks inherent in `robin_hood`'s more uncertain failure modes. Luckily, bitcoinperf benchmarks (https://github.com/bitcoin/bitcoin/pull/16801#issuecomment-895348607) indicate that work on the allocator may (as Martin suspected) yield most of the benefits of t",https://github.com/bitcoin/bitcoin/pull/22640#issuecomment-895351590,895351590,
