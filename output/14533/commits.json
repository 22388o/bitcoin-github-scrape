[
  {
    "sha": "dc487656b9b06308eff78c9fe25bbec88f92d7de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYzQ4NzY1NmI5YjA2MzA4ZWZmNzhjOWZlMjViYmVjODhmOTJkN2Rl",
    "commit": {
      "author": {
        "name": "whythat",
        "email": "whythat@protonmail.com",
        "date": "2018-10-20T19:36:20Z"
      },
      "committer": {
        "name": "whythat",
        "email": "whythat@protonmail.com",
        "date": "2019-06-11T21:09:24Z"
      },
      "message": "wallet: ensure wallet files are not reused across chains",
      "tree": {
        "sha": "219d8d2d571fdacc2b9c7f1aa697c1b77eba9282",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/219d8d2d571fdacc2b9c7f1aa697c1b77eba9282"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc487656b9b06308eff78c9fe25bbec88f92d7de",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc487656b9b06308eff78c9fe25bbec88f92d7de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dc487656b9b06308eff78c9fe25bbec88f92d7de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc487656b9b06308eff78c9fe25bbec88f92d7de/comments",
    "author": {
      "login": "rodentrabies",
      "id": 7646953,
      "node_id": "MDQ6VXNlcjc2NDY5NTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7646953?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rodentrabies",
      "html_url": "https://github.com/rodentrabies",
      "followers_url": "https://api.github.com/users/rodentrabies/followers",
      "following_url": "https://api.github.com/users/rodentrabies/following{/other_user}",
      "gists_url": "https://api.github.com/users/rodentrabies/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rodentrabies/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rodentrabies/subscriptions",
      "organizations_url": "https://api.github.com/users/rodentrabies/orgs",
      "repos_url": "https://api.github.com/users/rodentrabies/repos",
      "events_url": "https://api.github.com/users/rodentrabies/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rodentrabies/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rodentrabies",
      "id": 7646953,
      "node_id": "MDQ6VXNlcjc2NDY5NTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7646953?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rodentrabies",
      "html_url": "https://github.com/rodentrabies",
      "followers_url": "https://api.github.com/users/rodentrabies/followers",
      "following_url": "https://api.github.com/users/rodentrabies/following{/other_user}",
      "gists_url": "https://api.github.com/users/rodentrabies/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rodentrabies/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rodentrabies/subscriptions",
      "organizations_url": "https://api.github.com/users/rodentrabies/orgs",
      "repos_url": "https://api.github.com/users/rodentrabies/repos",
      "events_url": "https://api.github.com/users/rodentrabies/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rodentrabies/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c7cfd20a77ce57d200b3b9e5e0dfb0d63818abdc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7cfd20a77ce57d200b3b9e5e0dfb0d63818abdc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c7cfd20a77ce57d200b3b9e5e0dfb0d63818abdc"
      }
    ],
    "stats": {
      "total": 117,
      "additions": 116,
      "deletions": 1
    },
    "files": [
      {
        "sha": "79ab1c27e40975963b5e873dce0f334ab975ff71",
        "filename": "src/dummywallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc487656b9b06308eff78c9fe25bbec88f92d7de/src/dummywallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc487656b9b06308eff78c9fe25bbec88f92d7de/src/dummywallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dummywallet.cpp?ref=dc487656b9b06308eff78c9fe25bbec88f92d7de",
        "patch": "@@ -49,6 +49,7 @@ void DummyWalletInit::AddWalletOptions() const\n         \"-flushwallet\",\n         \"-privdb\",\n         \"-walletrejectlongchains\",\n+        \"-walletcrosschain\",\n     });\n }\n "
      },
      {
        "sha": "b2d5344a022272449b07f9568665511009961c96",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc487656b9b06308eff78c9fe25bbec88f92d7de/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc487656b9b06308eff78c9fe25bbec88f92d7de/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=dc487656b9b06308eff78c9fe25bbec88f92d7de",
        "patch": "@@ -39,6 +39,7 @@ const WalletInitInterface& g_wallet_init_interface = WalletInit();\n void WalletInit::AddWalletOptions() const\n {\n     gArgs.AddArg(\"-addresstype\", strprintf(\"What type of addresses to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", or \\\"bech32\\\", default: \\\"%s\\\")\", FormatOutputType(DEFAULT_ADDRESS_TYPE)), false, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-walletcrosschain\", strprintf(\"Allow reusing wallet files across chains (default: %u)\", DEFAULT_WALLETCROSSCHAIN), false, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-avoidpartialspends\", strprintf(\"Group outputs by address, selecting all or none, instead of selecting on a per-output basis. Privacy is improved as an address is only used once (unless someone sends to it after spending from it), but may result in slightly higher fees as suboptimal coin selection may result due to the added limitation (default: %u)\", DEFAULT_AVOIDPARTIALSPENDS), false, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-changetype\", \"What type of change to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", or \\\"bech32\\\"). Default is same as -addresstype, except when -addresstype=p2sh-segwit a native segwit output is used when sending to a native segwit address)\", false, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-disablewallet\", \"Do not load the wallet and disable wallet RPC calls\", false, OptionsCategory::WALLET);"
      },
      {
        "sha": "d9be60b55a52e88c660daf8170c6cbae3560c7bc",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc487656b9b06308eff78c9fe25bbec88f92d7de/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc487656b9b06308eff78c9fe25bbec88f92d7de/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=dc487656b9b06308eff78c9fe25bbec88f92d7de",
        "patch": "@@ -4273,6 +4273,26 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     auto locked_chain = chain.lock();\n     LOCK(walletInstance->cs_wallet);\n \n+    // Unless allowed, ensure wallet files are not reused across chains:\n+    if (!gArgs.GetBoolArg(\"-walletcrosschain\", DEFAULT_WALLETCROSSCHAIN))\n+    {\n+        WalletBatch batch(*walletInstance->database);\n+        CBlockLocator locator;\n+        if (batch.ReadBestBlock(locator))\n+        {\n+            // Wallet is assumed to be from another chain, if none of\n+            // its last 6 best known blocks are in the active chain\n+            // (this heavily relies on the fact that locator stores\n+            // last 10 blocks consecutively):\n+            const Optional<int> fork_height = locked_chain->findLocatorFork(locator);\n+            if (fork_height && std::distance(locator.vHave.begin(), std::find(locator.vHave.begin(), locator.vHave.end(), locked_chain->getBlockHash(*fork_height))) > 6)\n+            {\n+                chain.initError(_(\"Wallet files should not be reused across chains\"));\n+                return nullptr;\n+            }\n+        }\n+    }\n+\n     int rescan_height = 0;\n     if (!gArgs.GetBoolArg(\"-rescan\", false))\n     {"
      },
      {
        "sha": "d6ec33f4c9e200acd4a1d7381a219d2b222cf5ee",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc487656b9b06308eff78c9fe25bbec88f92d7de/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc487656b9b06308eff78c9fe25bbec88f92d7de/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=dc487656b9b06308eff78c9fe25bbec88f92d7de",
        "patch": "@@ -73,6 +73,7 @@ static const unsigned int DEFAULT_TX_CONFIRM_TARGET = 6;\n static const bool DEFAULT_WALLET_RBF = false;\n static const bool DEFAULT_WALLETBROADCAST = true;\n static const bool DEFAULT_DISABLE_WALLET = false;\n+static const bool DEFAULT_WALLETCROSSCHAIN = false;\n //! -maxtxfee default\n constexpr CAmount DEFAULT_TRANSACTION_MAXFEE{COIN / 10};\n //! Discourage users to set fees higher than this amount (in satoshis) per kB"
      },
      {
        "sha": "b84d86e65914b48e75259a7920fa694100f1357e",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc487656b9b06308eff78c9fe25bbec88f92d7de/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc487656b9b06308eff78c9fe25bbec88f92d7de/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=dc487656b9b06308eff78c9fe25bbec88f92d7de",
        "patch": "@@ -200,6 +200,7 @@\n     'rpc_help.py',\n     'feature_help.py',\n     'feature_shutdown.py',\n+    'wallet_crosschain.py',\n     # Don't append tests at the end to avoid merge conflicts\n     # Put them in a random line within the section that fits their approximate run-time\n ]"
      },
      {
        "sha": "ab82ee4d9c993c03ad1fd3a3b72b9e02f1a577bc",
        "filename": "test/functional/wallet_crosschain.py",
        "status": "added",
        "additions": 91,
        "deletions": 0,
        "changes": 91,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc487656b9b06308eff78c9fe25bbec88f92d7de/test/functional/wallet_crosschain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc487656b9b06308eff78c9fe25bbec88f92d7de/test/functional/wallet_crosschain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_crosschain.py?ref=dc487656b9b06308eff78c9fe25bbec88f92d7de",
        "patch": "@@ -0,0 +1,91 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import os\n+import time\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, \\\n+    assert_raises_rpc_error, assert_raises_process_error, \\\n+    connect_nodes, sync_blocks, sync_mempools\n+\n+\n+class WalletCrossChain(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def setup_network(self, split=False):\n+        self.setup_nodes()\n+        connect_nodes(self.nodes[1], 2)\n+\n+    def run_test(self):\n+        self.log.info(\"Generating initial blockchains\")\n+        # Separate blockchain.\n+        self.nodes[0].generate(10)\n+\n+        # Create wallet below allowed height difference (5 blocks).\n+        self.nodes[1].generate(5)\n+        ok_path = os.path.join(self.nodes[1].datadir, 'ok-wallet')\n+        self.nodes[1].createwallet(ok_path)\n+        self.nodes[1].unloadwallet(ok_path)\n+\n+        # Create wallet at allowed height difference (6 blocks).\n+        self.nodes[1].generate(1)\n+        edge_path = os.path.join(self.nodes[1].datadir, 'edge-wallet')\n+        self.nodes[1].createwallet(edge_path)\n+        self.nodes[1].unloadwallet(edge_path)\n+\n+        # Create wallet outside allowed height difference (7 blocks).\n+        self.nodes[1].generate(1)\n+        not_ok_path = os.path.join(self.nodes[1].datadir, 'not-ok-wallet')\n+        self.nodes[1].createwallet(not_ok_path)\n+        self.nodes[1].unloadwallet(not_ok_path)\n+\n+        self.log.info(\"Loading reorg wallet within allowed height difference\")\n+        self.nodes[0].loadwallet(ok_path)\n+\n+        self.log.info(\"Loading reorg wallet exactly at allowed height difference\")\n+        self.nodes[0].loadwallet(edge_path)\n+\n+        self.log.info(\"Loading reorg wallet outside allowed height difference\")\n+        assert_raises_rpc_error(-4, 'Wallet loading failed.', self.nodes[0].loadwallet, not_ok_path)\n+        self.stop_node(0, expected_stderr='Error: Wallet files should not be reused across chains')\n+\n+        self.sync_blocks(self.nodes[1:3])\n+\n+        # Create wallet below allowed height difference (5 blocks).\n+        self.nodes[2].generate(5)\n+        ok_path = os.path.join(self.nodes[2].datadir, 'ok-wallet')\n+        self.nodes[2].createwallet(ok_path)\n+        self.nodes[2].unloadwallet(ok_path)\n+\n+        # Create wallet exactly at allowed height difference (6 blocks).\n+        self.nodes[2].generate(1)\n+        edge_path = os.path.join(self.nodes[2].datadir, 'edge-wallet')\n+        self.nodes[2].createwallet(edge_path)\n+        self.nodes[2].unloadwallet(edge_path)\n+\n+        # Create wallet outside allowed height difference (7 blocks).\n+        self.nodes[2].generate(1)\n+        not_ok_path = os.path.join(self.nodes[2].datadir, 'not-ok-wallet')\n+        self.nodes[2].createwallet(not_ok_path)\n+        self.nodes[2].unloadwallet(not_ok_path)\n+\n+        self.log.info(\"Loading no-reorg wallet within allowed height difference\")\n+        self.nodes[1].loadwallet(ok_path)\n+\n+        self.log.info(\"Loading no-reorg wallet exactly at allowed height difference\")\n+        self.nodes[1].loadwallet(edge_path)\n+\n+        self.log.info(\"Loading no-reorg wallet outside allowed height difference\")\n+        self.nodes[1].loadwallet(not_ok_path)\n+\n+\n+if __name__ == '__main__':\n+    WalletCrossChain().main()"
      },
      {
        "sha": "971833e80a0bb188acdbd098bde355c8ba7f99de",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc487656b9b06308eff78c9fe25bbec88f92d7de/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc487656b9b06308eff78c9fe25bbec88f92d7de/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=dc487656b9b06308eff78c9fe25bbec88f92d7de",
        "patch": "@@ -316,7 +316,7 @@ def wallet_file(name):\n             assert_equal(rpc.getaddressinfo(addr)['ismine'], True)\n \n         # Test .walletlock file is closed\n-        self.start_node(1)\n+        self.start_node(1, [\"-walletcrosschain=1\"])\n         wallet = os.path.join(self.options.tmpdir, 'my_wallet')\n         self.nodes[0].createwallet(wallet)\n         assert_raises_rpc_error(-4, \"Error initializing wallet database environment\", self.nodes[1].loadwallet, wallet)"
      }
    ]
  }
]