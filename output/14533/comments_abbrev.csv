DrahtBot,2018-10-21T03:46:08Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15443](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15443.html) (qa: Add getdescriptorinfo functional test b",https://github.com/bitcoin/bitcoin/pull/14533#issuecomment-431636452,431636452,
gmaxwell,2018-10-21T07:16:18Z,"Genesis block isn't sufficient, a lot of altcoins share genesis blocks. :(  Also there should be a way to override, since moving wallet files between forks is a common way of collecting fork coins-- obviously not something you'd want to happen accidentally but fine as an unsupported ""you get to keep both pieces"" option.",https://github.com/bitcoin/bitcoin/pull/14533#issuecomment-431645072,431645072,
rodentrabies,2018-10-21T11:08:48Z,"@gmaxwell, thanks for the suggestion. Just added an override option `-allowreusewallets` (maybe should be renamed to something clearer). Still working on sufficiency issue. First of all, since `CChain::GetLocator` builds a `vHave` sequence deterministically, maybe the whole vectors can be compared, but a lot of forked altcoins share those blocks as well, so I'm looking for an alternative.",https://github.com/bitcoin/bitcoin/pull/14533#issuecomment-431659757,431659757,
rodentrabies,2018-10-27T22:33:23Z,"Implemented the new check via `FindForkInGlobalIndex`. This solution looks at all blocks known to the wallet and not only at a genesis. It may misbehave in case of temporary forks (reorgs), but there seems to be no simple way around that.\n\nThis can be tested with the following function test (here two disconnected nodes in regtest mode generate two different chains with the same genesis, so can",https://github.com/bitcoin/bitcoin/pull/14533#issuecomment-433660454,433660454,
meshcollider,2018-11-10T04:47:39Z,"It doesn't seem like a good idea to prevent a wallet from opening in the case of even a 1 block reorg IMO. Maybe checking 6 blocks back in the chain or something would be better?\n\nConcept ACK though, I think this is still a nice check to have\n\nA new test file here would be fine too I think, but you also need to fix up the existing tests to work with this change too, travis is failing on so",https://github.com/bitcoin/bitcoin/pull/14533#issuecomment-437558156,437558156,
DrahtBot,2019-06-19T00:00:21Z,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/14533#issuecomment-503354780,503354780,
DrahtBot,2019-09-30T12:54:41Z,"<!--5fd3d806e98f4a0ca80977bb178665a0-->There hasn't been much activity lately and the patch still needs rebase, so I am closing this for now. Please let me know when you want to continue working on this, so the pull request can be re-opened.",https://github.com/bitcoin/bitcoin/pull/14533#issuecomment-536547711,536547711,
ryanofsky,2019-09-30T13:58:58Z,"Not sure, but it may be more important to add this check with the new ""Open Wallet -> Other..."" GUI feature in https://github.com/bitcoin/bitcoin/pull/15204 to prevent mistakenly loading incompatible wallets.",https://github.com/bitcoin/bitcoin/pull/14533#issuecomment-536573909,536573909,
rodentrabies,2020-04-07T11:11:04Z,"Looks like I completely forgot about this one. Updated and tested the old branch yesterday - https://github.com/mrwhythat/bitcoin/tree/wallet-file-reuse-prevention. Can it be reopened or should I just open another PR?\n",https://github.com/bitcoin/bitcoin/pull/14533#issuecomment-610325609,610325609,
fanquake,2020-04-07T11:13:55Z,"I'm unable to re-open this PR, so creating a new one should be ok.",https://github.com/bitcoin/bitcoin/pull/14533#issuecomment-610326758,610326758,
practicalswift,2018-10-22T07:16:38Z,Please use another variable name: `batch` is already used in this context :-),https://github.com/bitcoin/bitcoin/pull/14533#discussion_r226915366,226915366,src/wallet/wallet.cpp
rodentrabies,2018-10-24T17:56:17Z,"It's done on purpose in order to reuse the value, computed by it (`bestBlockRead`) both here and in `-rescan` check.",https://github.com/bitcoin/bitcoin/pull/14533#discussion_r227896512,227896512,src/wallet/wallet.cpp
meshcollider,2018-11-10T04:49:50Z,`DEFAULT_ALLOWREUSEWALLETS `,https://github.com/bitcoin/bitcoin/pull/14533#discussion_r232441516,232441516,src/wallet/wallet.cpp
meshcollider,2018-11-10T04:52:39Z,Maybe `walletInstance->WalletLogPrintf` the hashes or something too,https://github.com/bitcoin/bitcoin/pull/14533#discussion_r232441562,232441562,src/wallet/wallet.cpp
luke-jr,2018-12-20T04:47:52Z,I'm not sure this should really be an option?,https://github.com/bitcoin/bitcoin/pull/14533#discussion_r243155370,243155370,src/wallet/init.cpp
luke-jr,2018-12-20T04:48:07Z,"If there is an option, the name `-walletcrosschain` might be better.",https://github.com/bitcoin/bitcoin/pull/14533#discussion_r243155393,243155393,src/wallet/init.cpp
luke-jr,2018-12-20T04:48:49Z,This comment's described behaviour is definitely wrong: the best known block could be a stale block!,https://github.com/bitcoin/bitcoin/pull/14533#discussion_r243155454,243155454,src/wallet/wallet.cpp
rodentrabies,2018-12-20T11:04:02Z,"Indeed, but this is going away after the @MeshCollider's comments are addressed. I didn't have much time lately, will do it sometime the next two weeks.",https://github.com/bitcoin/bitcoin/pull/14533#discussion_r243233111,243233111,src/wallet/wallet.cpp
