[
  {
    "sha": "c74332c67806ed92e6e18de174671a7c30608780",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNzQzMzJjNjc4MDZlZDkyZTZlMThkZTE3NDY3MWE3YzMwNjA4Nzgw",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-08-28T17:23:24Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-09-10T18:09:40Z"
      },
      "message": "Stricter handling of orphan transactions\n\nPrevent denial-of-service attacks by banning\npeers that send us invalid orphan transactions\nand only storing orphan transactions given to\nus by a peer while the peer is connected.",
      "tree": {
        "sha": "635d923bc891518c366dfb651304326a59b704df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/635d923bc891518c366dfb651304326a59b704df"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c74332c67806ed92e6e18de174671a7c30608780",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niEYEABECAAYFAlQQk+QACgkQdYgkL74406iivACghtAddsbw5kKDiEpddU/AxTRe\nT9kAn1tZ8M1c/JDk/T/z8QFbAOnVNemT\n=mxie\n-----END PGP SIGNATURE-----",
        "payload": "tree 635d923bc891518c366dfb651304326a59b704df\nparent def2fdb4b9b52fa908c11fe2f5a42ea04f8e9f11\nauthor Gavin Andresen <gavinandresen@gmail.com> 1409246604 -0400\ncommitter Gavin Andresen <gavinandresen@gmail.com> 1410372580 -0400\n\nStricter handling of orphan transactions\n\nPrevent denial-of-service attacks by banning\npeers that send us invalid orphan transactions\nand only storing orphan transactions given to\nus by a peer while the peer is connected.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c74332c67806ed92e6e18de174671a7c30608780",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c74332c67806ed92e6e18de174671a7c30608780",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c74332c67806ed92e6e18de174671a7c30608780/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "def2fdb4b9b52fa908c11fe2f5a42ea04f8e9f11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/def2fdb4b9b52fa908c11fe2f5a42ea04f8e9f11",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/def2fdb4b9b52fa908c11fe2f5a42ea04f8e9f11"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 65,
      "deletions": 17
    },
    "files": [
      {
        "sha": "6a2e6ac659b83d1e309475ab77813d8537c9f333",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 52,
        "deletions": 13,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c74332c67806ed92e6e18de174671a7c30608780/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c74332c67806ed92e6e18de174671a7c30608780/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c74332c67806ed92e6e18de174671a7c30608780",
        "patch": "@@ -63,8 +63,13 @@ struct COrphanBlock {\n map<uint256, COrphanBlock*> mapOrphanBlocks;\n multimap<uint256, COrphanBlock*> mapOrphanBlocksByPrev;\n \n-map<uint256, CTransaction> mapOrphanTransactions;\n+struct COrphanTx {\n+    CTransaction tx;\n+    NodeId fromPeer;\n+};\n+map<uint256, COrphanTx> mapOrphanTransactions;\n map<uint256, set<uint256> > mapOrphanTransactionsByPrev;\n+void EraseOrphansFor(NodeId peer);\n \n // Constant stuff for coinbase transactions we create:\n CScript COINBASE_FLAGS;\n@@ -264,6 +269,7 @@ void FinalizeNode(NodeId nodeid) {\n         mapBlocksInFlight.erase(entry.hash);\n     BOOST_FOREACH(const uint256& hash, state->vBlocksToDownload)\n         mapBlocksToDownload.erase(hash);\n+    EraseOrphansFor(nodeid);\n \n     mapNodeState.erase(nodeid);\n }\n@@ -461,7 +467,7 @@ CBlockTreeDB *pblocktree = NULL;\n // mapOrphanTransactions\n //\n \n-bool AddOrphanTx(const CTransaction& tx)\n+bool AddOrphanTx(const CTransaction& tx, NodeId peer)\n {\n     uint256 hash = tx.GetHash();\n     if (mapOrphanTransactions.count(hash))\n@@ -481,21 +487,22 @@ bool AddOrphanTx(const CTransaction& tx)\n         return false;\n     }\n \n-    mapOrphanTransactions[hash] = tx;\n+    mapOrphanTransactions[hash].tx = tx;\n+    mapOrphanTransactions[hash].fromPeer = peer;\n     BOOST_FOREACH(const CTxIn& txin, tx.vin)\n         mapOrphanTransactionsByPrev[txin.prevout.hash].insert(hash);\n \n-    LogPrint(\"mempool\", \"stored orphan tx %s (mapsz %u)\\n\", hash.ToString(),\n-        mapOrphanTransactions.size());\n+    LogPrint(\"mempool\", \"stored orphan tx %s (mapsz %u prevsz %u)\\n\", hash.ToString(),\n+             mapOrphanTransactions.size(), mapOrphanTransactionsByPrev.size());\n     return true;\n }\n \n void static EraseOrphanTx(uint256 hash)\n {\n-    map<uint256, CTransaction>::iterator it = mapOrphanTransactions.find(hash);\n+    map<uint256, COrphanTx>::iterator it = mapOrphanTransactions.find(hash);\n     if (it == mapOrphanTransactions.end())\n         return;\n-    BOOST_FOREACH(const CTxIn& txin, it->second.vin)\n+    BOOST_FOREACH(const CTxIn& txin, it->second.tx.vin)\n     {\n         map<uint256, set<uint256> >::iterator itPrev = mapOrphanTransactionsByPrev.find(txin.prevout.hash);\n         if (itPrev == mapOrphanTransactionsByPrev.end())\n@@ -507,14 +514,31 @@ void static EraseOrphanTx(uint256 hash)\n     mapOrphanTransactions.erase(it);\n }\n \n+void EraseOrphansFor(NodeId peer)\n+{\n+    int nErased = 0;\n+    map<uint256, COrphanTx>::iterator iter = mapOrphanTransactions.begin();\n+    while (iter != mapOrphanTransactions.end())\n+    {\n+        map<uint256, COrphanTx>::iterator maybeErase = iter++; // increment to avoid iterator becoming invalid\n+        if (maybeErase->second.fromPeer == peer)\n+        {\n+            EraseOrphanTx(maybeErase->second.tx.GetHash());\n+            ++nErased;\n+        }\n+    }\n+    if (nErased > 0) LogPrint(\"mempool\", \"Erased %d orphan tx from peer %d\\n\", nErased, peer);\n+}\n+\n+\n unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n {\n     unsigned int nEvicted = 0;\n     while (mapOrphanTransactions.size() > nMaxOrphans)\n     {\n         // Evict a random orphan:\n         uint256 randomhash = GetRandHash();\n-        map<uint256, CTransaction>::iterator it = mapOrphanTransactions.lower_bound(randomhash);\n+        map<uint256, COrphanTx>::iterator it = mapOrphanTransactions.lower_bound(randomhash);\n         if (it == mapOrphanTransactions.end())\n             it = mapOrphanTransactions.begin();\n         EraseOrphanTx(it->first);\n@@ -3777,6 +3801,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 mempool.mapTx.size());\n \n             // Recursively process any orphan transactions that depended on this one\n+            set<NodeId> setMisbehaving;\n             for (unsigned int i = 0; i < vWorkQueue.size(); i++)\n             {\n                 map<uint256, set<uint256> >::iterator itByPrev = mapOrphanTransactionsByPrev.find(vWorkQueue[i]);\n@@ -3787,25 +3812,36 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                      ++mi)\n                 {\n                     const uint256& orphanHash = *mi;\n-                    const CTransaction& orphanTx = mapOrphanTransactions[orphanHash];\n+                    const CTransaction& orphanTx = mapOrphanTransactions[orphanHash].tx;\n+                    NodeId fromPeer = mapOrphanTransactions[orphanHash].fromPeer;\n                     bool fMissingInputs2 = false;\n                     // Use a dummy CValidationState so someone can't setup nodes to counter-DoS based on orphan\n                     // resolution (that is, feeding people an invalid transaction based on LegitTxX in order to get\n                     // anyone relaying LegitTxX banned)\n                     CValidationState stateDummy;\n \n+                    vEraseQueue.push_back(orphanHash);\n+\n+                    if (setMisbehaving.count(fromPeer))\n+                        continue;\n                     if (AcceptToMemoryPool(mempool, stateDummy, orphanTx, true, &fMissingInputs2))\n                     {\n                         LogPrint(\"mempool\", \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n                         RelayTransaction(orphanTx);\n                         mapAlreadyAskedFor.erase(CInv(MSG_TX, orphanHash));\n                         vWorkQueue.push_back(orphanHash);\n-                        vEraseQueue.push_back(orphanHash);\n                     }\n                     else if (!fMissingInputs2)\n                     {\n-                        // invalid or too-little-fee orphan\n-                        vEraseQueue.push_back(orphanHash);\n+                        int nDos = 0;\n+                        if (stateDummy.IsInvalid(nDos) && nDos > 0)\n+                        {\n+                            // Punish peer that gave us an invalid orphan tx\n+                            Misbehaving(fromPeer, nDos);\n+                            setMisbehaving.insert(fromPeer);\n+                            LogPrint(\"mempool\", \"   invalid orphan tx %s\\n\", orphanHash.ToString());\n+                        }\n+                        // too-little-fee orphan\n                         LogPrint(\"mempool\", \"   removed orphan tx %s\\n\", orphanHash.ToString());\n                     }\n                     mempool.check(pcoinsTip);\n@@ -3817,7 +3853,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         }\n         else if (fMissingInputs)\n         {\n-            AddOrphanTx(tx);\n+            AddOrphanTx(tx, pfrom->GetId());\n \n             // DoS prevention: do not allow mapOrphanTransactions to grow unbounded\n             unsigned int nEvicted = LimitOrphanTxSize(MAX_ORPHAN_TRANSACTIONS);\n@@ -4324,7 +4360,9 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n                 if (pto->addr.IsLocal())\n                     LogPrintf(\"Warning: not banning local peer %s!\\n\", pto->addr.ToString());\n                 else\n+                {\n                     CNode::Ban(pto->addr);\n+                }\n             }\n             state.fShouldBan = false;\n         }\n@@ -4538,5 +4576,6 @@ class CMainCleanup\n \n         // orphan transactions\n         mapOrphanTransactions.clear();\n+        mapOrphanTransactionsByPrev.clear();\n     }\n } instance_of_cmaincleanup;"
      },
      {
        "sha": "e0196748168687edae5c7707df5f8b48a596bf16",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 4,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c74332c67806ed92e6e18de174671a7c30608780/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c74332c67806ed92e6e18de174671a7c30608780/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=c74332c67806ed92e6e18de174671a7c30608780",
        "patch": "@@ -24,7 +24,8 @@\n #include <boost/test/unit_test.hpp>\n \n // Tests this internal-to-main.cpp method:\n-extern bool AddOrphanTx(const CTransaction& tx);\n+extern bool AddOrphanTx(const CTransaction& tx, NodeId peer);\n+extern void EraseOrphansFor(NodeId peer);\n extern unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans);\n extern std::map<uint256, CTransaction> mapOrphanTransactions;\n extern std::map<uint256, std::set<uint256> > mapOrphanTransactionsByPrev;\n@@ -174,7 +175,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n         tx.vout[0].nValue = 1*CENT;\n         tx.vout[0].scriptPubKey.SetDestination(key.GetPubKey().GetID());\n \n-        AddOrphanTx(tx);\n+        AddOrphanTx(tx, i);\n     }\n \n     // ... and 50 that depend on other orphans:\n@@ -191,7 +192,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n         tx.vout[0].scriptPubKey.SetDestination(key.GetPubKey().GetID());\n         SignSignature(keystore, txPrev, tx, 0);\n \n-        AddOrphanTx(tx);\n+        AddOrphanTx(tx, i);\n     }\n \n     // This really-big orphan should be ignored:\n@@ -215,7 +216,15 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n         for (unsigned int j = 1; j < tx.vin.size(); j++)\n             tx.vin[j].scriptSig = tx.vin[0].scriptSig;\n \n-        BOOST_CHECK(!AddOrphanTx(tx));\n+        BOOST_CHECK(!AddOrphanTx(tx, i));\n+    }\n+\n+    // Test EraseOrphansFor:\n+    for (NodeId i = 0; i < 3; i++)\n+    {\n+        size_t sizeBefore = mapOrphanTransactions.size();\n+        EraseOrphansFor(i);\n+        BOOST_CHECK(mapOrphanTransactions.size() < sizeBefore);\n     }\n \n     // Test LimitOrphanTxSize() function:"
      }
    ]
  },
  {
    "sha": "aa3c697e90c02d5797a59a7bfb1ecac6fbd918cf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYTNjNjk3ZTkwYzAyZDU3OTdhNTlhN2JmYjFlY2FjNmZiZDkxOGNm",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-09-10T18:08:03Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-09-10T18:09:40Z"
      },
      "message": "Store fewer orphan tx by default, add -maxorphantx option\n\nThere is no reason to store thousands of orphan transactions;\nnormally an orphan's parents will either be broadcast or\nmined reasonably quickly.\n\nThis pull drops the maximum number of orphans from 10,000 down\nto 100, and adds a command-line option (-maxorphantx) that is\njust like -maxorphanblocks to override the default.",
      "tree": {
        "sha": "c98a1175ece5c99f28f45642d3109d9877bd7b35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c98a1175ece5c99f28f45642d3109d9877bd7b35"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa3c697e90c02d5797a59a7bfb1ecac6fbd918cf",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niEYEABECAAYFAlQQk/QACgkQdYgkL74406hrJwCfQUOa5MIPLcy1iw0ydAzF6Fh7\nu44AnRab8UOotHjteTcytnAPRWvaX+7u\n=Hg1D\n-----END PGP SIGNATURE-----",
        "payload": "tree c98a1175ece5c99f28f45642d3109d9877bd7b35\nparent c74332c67806ed92e6e18de174671a7c30608780\nauthor Gavin Andresen <gavinandresen@gmail.com> 1410372483 -0400\ncommitter Gavin Andresen <gavinandresen@gmail.com> 1410372580 -0400\n\nStore fewer orphan tx by default, add -maxorphantx option\n\nThere is no reason to store thousands of orphan transactions;\nnormally an orphan's parents will either be broadcast or\nmined reasonably quickly.\n\nThis pull drops the maximum number of orphans from 10,000 down\nto 100, and adds a command-line option (-maxorphantx) that is\njust like -maxorphanblocks to override the default.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa3c697e90c02d5797a59a7bfb1ecac6fbd918cf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aa3c697e90c02d5797a59a7bfb1ecac6fbd918cf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa3c697e90c02d5797a59a7bfb1ecac6fbd918cf/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c74332c67806ed92e6e18de174671a7c30608780",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c74332c67806ed92e6e18de174671a7c30608780",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c74332c67806ed92e6e18de174671a7c30608780"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 5,
      "deletions": 3
    },
    "files": [
      {
        "sha": "8f336c31fb315e2cb545aa81cf07e0af271f3368",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa3c697e90c02d5797a59a7bfb1ecac6fbd918cf/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa3c697e90c02d5797a59a7bfb1ecac6fbd918cf/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=aa3c697e90c02d5797a59a7bfb1ecac6fbd918cf",
        "patch": "@@ -226,6 +226,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += \"  -dbcache=<n>           \" + strprintf(_(\"Set database cache size in megabytes (%d to %d, default: %d)\"), nMinDbCache, nMaxDbCache, nDefaultDbCache) + \"\\n\";\n     strUsage += \"  -loadblock=<file>      \" + _(\"Imports blocks from external blk000??.dat file\") + \" \" + _(\"on startup\") + \"\\n\";\n     strUsage += \"  -maxorphanblocks=<n>   \" + strprintf(_(\"Keep at most <n> unconnectable blocks in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_BLOCKS) + \"\\n\";\n+    strUsage += \"  -maxorphantx=<n>       \" + strprintf(_(\"Keep at most <n> unconnectable transactions in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_TRANSACTIONS) + \"\\n\";\n     strUsage += \"  -par=<n>               \" + strprintf(_(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\"), -(int)boost::thread::hardware_concurrency(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS) + \"\\n\";\n     strUsage += \"  -pid=<file>            \" + _(\"Specify pid file (default: bitcoind.pid)\") + \"\\n\";\n     strUsage += \"  -reindex               \" + _(\"Rebuild block chain index from current blk000??.dat files\") + \" \" + _(\"on startup\") + \"\\n\";"
      },
      {
        "sha": "f9782549613b176266cec0128df6421d329d8271",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa3c697e90c02d5797a59a7bfb1ecac6fbd918cf/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa3c697e90c02d5797a59a7bfb1ecac6fbd918cf/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=aa3c697e90c02d5797a59a7bfb1ecac6fbd918cf",
        "patch": "@@ -3856,7 +3856,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             AddOrphanTx(tx, pfrom->GetId());\n \n             // DoS prevention: do not allow mapOrphanTransactions to grow unbounded\n-            unsigned int nEvicted = LimitOrphanTxSize(MAX_ORPHAN_TRANSACTIONS);\n+            unsigned int nMaxOrphanTx = (unsigned int)std::max((int64_t)0, GetArg(\"-maxorphantx\", DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n+            unsigned int nEvicted = LimitOrphanTxSize(nMaxOrphanTx);\n             if (nEvicted > 0)\n                 LogPrint(\"mempool\", \"mapOrphan overflow, removed %u tx\\n\", nEvicted);\n         } else if (pfrom->fWhitelisted) {"
      },
      {
        "sha": "d340fd0b6a9b324d1e25e7fd502c15daf55000d5",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa3c697e90c02d5797a59a7bfb1ecac6fbd918cf/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa3c697e90c02d5797a59a7bfb1ecac6fbd918cf/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=aa3c697e90c02d5797a59a7bfb1ecac6fbd918cf",
        "patch": "@@ -51,8 +51,8 @@ static const unsigned int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE/50;\n static const unsigned int MAX_P2SH_SIGOPS = 15;\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n static const unsigned int MAX_TX_SIGOPS = MAX_BLOCK_SIGOPS/5;\n-/** The maximum number of orphan transactions kept in memory */\n-static const unsigned int MAX_ORPHAN_TRANSACTIONS = MAX_BLOCK_SIZE/100;\n+/** Default for -maxorphantx, maximum number of orphan transactions kept in memory */\n+static const unsigned int DEFAULT_MAX_ORPHAN_TRANSACTIONS = 100;\n /** Default for -maxorphanblocks, maximum number of orphan blocks kept in memory */\n static const unsigned int DEFAULT_MAX_ORPHAN_BLOCKS = 750;\n /** The maximum size of a blk?????.dat file (since 0.8) */"
      }
    ]
  }
]