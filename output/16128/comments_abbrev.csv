fanquake,2019-05-31 14:16:52,"There is some related IRC discussion [here (line 582)](http://www.erisian.com.au/bitcoin-core-dev/log-2019-05-30.html).\n```\n<instagibbs> CScript(byte_vector) vs CScript(byte_vector.begin(), byte_vector.end()) whyyyy\n<gwillen> I suspect because certain overloads didn't used to exist or something\n<instagibbs> I don't think anyone actually tries using the former?\n<instagibbs> intentionally*",https://github.com/bitcoin/bitcoin/pull/16128#issuecomment-497724723,497724723,
fanquake,2019-05-31 18:36:25,"Me and some of Travis are seeing:\n```bash\n  CXX      qt/libbitcoinqt_a-recentrequeststablemodel.o\n  CXX      qt/libbitcoinqt_a-sendcoinsdialog.o\nqt/coincontroldialog.cpp:425:34: error: static_cast from 'std::vector<unsigned char>' to 'CScript' uses deleted function\n            CTxOut txout(amount, static_cast<CScript>(std::vector<unsigned char>(24, 0)));\n                               ",https://github.com/bitcoin/bitcoin/pull/16128#issuecomment-497817215,497817215,
instagibbs,2019-05-31 18:41:23,@fanquake oof forgot to check QT. Will fix.,https://github.com/bitcoin/bitcoin/pull/16128#issuecomment-497818910,497818910,
instagibbs,2019-05-31 21:12:37,"Fixed, all completing-in-time builds are passing.",https://github.com/bitcoin/bitcoin/pull/16128#issuecomment-497861800,497861800,
Empact,2019-06-01 05:43:56,"~Could just drop the constructor declaration, right? “= delete” is only strictly necessary to remove a default / implicitly defined constructor.~",https://github.com/bitcoin/bitcoin/pull/16128#issuecomment-497915587,497915587,
JeremyRubin,2019-06-01 05:51:44,"I think that because it's inheriting from prevector, it's a good practice to delete it so that we don't accidentally re-gain it.",https://github.com/bitcoin/bitcoin/pull/16128#issuecomment-497915993,497915993,
instagibbs,2019-06-01 12:12:06,"Exactly.\n\nOn Sat, Jun 1, 2019, 1:54 AM Jeremy Rubin <notifications@github.com> wrote:\n\n> I think that because it's inheriting from prevector, it's a good practice\n> to delete it so that we don't accidentally re-gain it.\n>\n> —\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/bitcoin/bitcoin/pull/16128?email_s",https://github.com/bitcoin/bitcoin/pull/16128#issuecomment-497939787,497939787,
MarcoFalke,2019-06-09 08:50:44,utACK e6915d9b0bdc1d081a8cdcd8d313de42c6b58fb3,https://github.com/bitcoin/bitcoin/pull/16128#issuecomment-500196533,500196533,
promag,2019-06-09 09:49:39,"> The behavior of this constructor is not the expected behavior compared to the other constructors\n\nCould explain what isn't expected in the OP?\n\nACK e6915d9.",https://github.com/bitcoin/bitcoin/pull/16128#issuecomment-500199622,500199622,
instagibbs,2019-06-09 09:57:35,@promag attempted to do so,https://github.com/bitcoin/bitcoin/pull/16128#issuecomment-500200095,500200095,
Empact,2019-06-10 02:09:08,"How about a comment to explain that the explicitly deleted constructor does not exist, and the deletion is preventative? I confirmed as much by deleting the constructor line only, and seeing that the build failed for lack of it.",https://github.com/bitcoin/bitcoin/pull/16128#issuecomment-500268876,500268876,
instagibbs,2019-06-12 16:02:46,"@Empact something like:\n```\n+    // We explicitly delete this constructor to reduce the confusion\n+    // between prevector-inhereted version and the begin/end iterator\n+    // and pointer based versions of the constructor.\n```\n?",https://github.com/bitcoin/bitcoin/pull/16128#issuecomment-501341258,501341258,
Empact,2019-06-12 16:24:34,"ACK https://github.com/bitcoin/bitcoin/pull/16128/commits/e6915d9b0bdc1d081a8cdcd8d313de42c6b58fb3\n\nSure, here's an alternative below. Main interest is in disavowing the implication that the constructor exists prior to deletion. I think the rest could be sussed out via blame.\n\n```\n  // delete non-existent constructor to defend against future introduction e.g. via prevector\n```",https://github.com/bitcoin/bitcoin/pull/16128#issuecomment-501350202,501350202,
jtimon,2019-06-13 11:20:09,ACK e6915d9b0bdc1d081a8cdcd8d313de42c6b58fb3,https://github.com/bitcoin/bitcoin/pull/16128#issuecomment-501661194,501661194,
instagibbs,2019-06-13 13:28:11,"at the risk of c-combo breaking all these ACKs, I force pushed the comment as @Empact suggested. Less future guessing by contributors :) ",https://github.com/bitcoin/bitcoin/pull/16128#issuecomment-501702649,501702649,
Empact,2019-06-14 12:43:03,ACK https://github.com/bitcoin/bitcoin/pull/16128/commits/e1a55690e66ca962179bc8170695b92af8a3caa8,https://github.com/bitcoin/bitcoin/pull/16128#issuecomment-502094840,502094840,
laanwj,2019-06-18 14:46:34,"As this changes consensus code I'd like some more review here\n@gmaxwell @sipa @sdaftuar  @morcos maybe",https://github.com/bitcoin/bitcoin/pull/16128#issuecomment-503169068,503169068,
sipa,2019-06-19 07:16:15,"Concept and code review ACK e1a55690e66ca962179bc8170695b92af8a3caa8, but I'd like to make sure we have tests covering the FindAndDelete usage.",https://github.com/bitcoin/bitcoin/pull/16128#issuecomment-503438367,503438367,
instagibbs,2019-06-19 12:50:51,`src/test/data/tx_(in)valid.json` has script evaluation based testing of FindAndDelete,https://github.com/bitcoin/bitcoin/pull/16128#issuecomment-503546868,503546868,
laanwj,2019-07-08 18:50:13,code-review ACK e1a55690e66ca962179bc8170695b92af8a3caa8,https://github.com/bitcoin/bitcoin/pull/16128#issuecomment-509347150,509347150,
