jnewbery,2017-07-21T14:07:17Z,"#10604 has been merged. Suggest ~you rebase on master and~ add something like the following to multiwallet.py as a functional test:\n\n```\n@@ -15,7 +15,8 @@ class MultiWalletTest(BitcoinTestFramework):\n         super().__init__()\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n-        self.extra_args = [['-wallet=w1', '-wallet=w2', '-wallet=w3']]\n+        # bitcoi",https://github.com/bitcoin/bitcoin/pull/10885#issuecomment-317010599,317010599,
promag,2017-07-21T14:48:50Z,"@jnewbery thanks for the tip, it's in 7605a8d. @instagibbs added the missing comment in 8cf06d7.",https://github.com/bitcoin/bitcoin/pull/10885#issuecomment-317021474,317021474,
jnewbery,2017-07-21T15:14:45Z,Looks good @promag . I've added one nitty comment. utACK either way.,https://github.com/bitcoin/bitcoin/pull/10885#issuecomment-317028552,317028552,
promag,2017-07-21T21:57:03Z,@jnewbery added missing comment to `GetArgs` too.,https://github.com/bitcoin/bitcoin/pull/10885#issuecomment-317121885,317121885,
arvidn,2017-07-22T01:05:12Z,"please correct me if I'm wrong. As far as I can tell, since this only prevents specifying the same *filename* multiple times, it still doesn't prevent you from loading the same *file* twice. You just have to use different names/paths to refer to it:\n\n``--wallet=w1 --wallet=../wallets/w1`` (assuming we're in a directory called ``wallets``)\n\nOne could also use hard- or soft links to give a s",https://github.com/bitcoin/bitcoin/pull/10885#issuecomment-317143484,317143484,
promag,2017-07-22T07:30:27Z,@arvidn I'll test. Thanks!,https://github.com/bitcoin/bitcoin/pull/10885#issuecomment-317163450,317163450,
promag,2017-07-24T07:36:46Z,I'm updating to take into account @arvidn review.,https://github.com/bitcoin/bitcoin/pull/10885#issuecomment-317342746,317342746,
promag,2017-07-24T22:46:30Z,"After @arvidn observation, I took a different approach. In order to correctly detect duplicate wallets I'm using `boost:filesystem::equivalent` in `bool CWallet::Verify()`. This means that if a wallet is duplicate then an initialization error is raised.\n\n@jnewbery removed the functional test because the app now quits with an error, AFAIK we don't test these?",https://github.com/bitcoin/bitcoin/pull/10885#issuecomment-317576490,317576490,
promag,2017-07-24T22:49:40Z,@arvidn there is already a `-wallet` validation to prevent relative paths. However the initial approach failed with symlinks. Thanks for the feedback.,https://github.com/bitcoin/bitcoin/pull/10885#issuecomment-317577087,317577087,
sipa,2017-07-25T02:40:40Z,utACK b1b4e8ac1687fac1dd275b7bab2c45eb879be30d,https://github.com/bitcoin/bitcoin/pull/10885#issuecomment-317612149,317612149,
ryanofsky,2017-07-25T21:51:46Z,"This approach seems pretty fragile, but maybe it's the simplest safeguard we can implement right now. I'd think ideally bitcoin would try to acquire an exclusive write lock on a wallet database file while opening it, and just not open files that can't be locked.",https://github.com/bitcoin/bitcoin/pull/10885#issuecomment-317883603,317883603,
laanwj,2017-07-26T06:37:09Z,"> This approach seems pretty fragile, but maybe it's the simplest safeguard we can implement right now. I'd think ideally bitcoin would try to acquire an exclusive write lock on a wallet database file while opening it, and just not open files that can't be locked.\n\nRight, ideally it's something that would be handled at the database layer, in the same way it's avoided that multiple applications",https://github.com/bitcoin/bitcoin/pull/10885#issuecomment-317962248,317962248,
promag,2017-07-26T07:00:23Z,"At this point there's no file opening, it's a configuration error. Like you said it's a runtime error. Both make sense for me.",https://github.com/bitcoin/bitcoin/pull/10885#issuecomment-317966522,317966522,
jnewbery,2017-07-26T08:10:34Z,"> the app now quits with an error, AFAIK we don't test these?\n\nWe have a way of testing this: if you're expecting bitcoind to fail on startup, take a look at `assert_start_raises_init_error()`. If you're expecting bitcoind to startup successfully and then exit, look at the new test in #10882 : https://github.com/bitcoin/bitcoin/pull/10882/commits/ec59b2eaaccd4d42d98345e9719265f102494e46#diff-8",https://github.com/bitcoin/bitcoin/pull/10885#issuecomment-317981438,317981438,
promag,2017-07-26T12:27:00Z,"@jnewbery thanks, will add the missing tests.\n\nThe current approach is to raise an error when a wallet absolute path:\n - exists and it's not a regular file or a symlink, or (@sipa FYI)\n - does not exists and it's a duplicate (@TheBlueMatt FYI).",https://github.com/bitcoin/bitcoin/pull/10885#issuecomment-318038067,318038067,
promag,2017-07-27T00:27:12Z,"@jnewbery tests added, thank you.\n\nSplitted in two commits: the first tests for duplicate arguments while the second tests for invalid files (must be regular file and not a symlink).",https://github.com/bitcoin/bitcoin/pull/10885#issuecomment-318221540,318221540,
TheBlueMatt,2017-07-27T20:35:44Z,"utACK. Would be nice to print the wallet which generated the error as @jnewbery suggested, but ready for merge either way.",https://github.com/bitcoin/bitcoin/pull/10885#issuecomment-318478956,318478956,
jnewbery,2017-07-28T00:19:58Z,"Yep - as Matt says, ready for merge with or without the error message improvement. Can always be added later.",https://github.com/bitcoin/bitcoin/pull/10885#issuecomment-318522035,318522035,
jnewbery,2017-07-28T10:05:28Z,Suggested change to error messages here: https://github.com/jnewbery/bitcoin/tree/pr10885 . Feel free to cherry-pick or squash in. Or else I can open a PR after this is merged.,https://github.com/bitcoin/bitcoin/pull/10885#issuecomment-318614115,318614115,
promag,2017-07-28T10:18:14Z,"Thanks @jnewbery, if you don't mind I'll squash.\n\nEDIT: Actually since you fixed the other error messages I'll leave it as is.",https://github.com/bitcoin/bitcoin/pull/10885#issuecomment-318616640,318616640,
bittylicious,2017-09-15T08:21:59Z,"I know it's a bit late for this, but on upgrading to v0.15, this is a bit of a showstopper for me.\n\nI have the wallet.dat file as a symlink to another partition. The reasons for this are not entirely crazy:\n\n- The other partition is block encrypted and I have encryption at rest.\n- The other partition is on a SSD which has great I/O, but is limited in space.\n\nChecking for the wallet b",https://github.com/bitcoin/bitcoin/pull/10885#issuecomment-329715523,329715523,
sipa,2017-09-15T08:31:55Z,"@bittylicious I understand this sounds like an unnecessary measure, but perhaps it is a bit more complicated than you realize. Effectively, the wallet is not just a single file, but a whole directory. Bitcoin Core will clean up all other files before shutdown, but in case of a crash, other files in the directory are needed for recovery. Symlinks may break these assumptions - making it look like a ",https://github.com/bitcoin/bitcoin/pull/10885#issuecomment-329717802,329717802,
bittylicious,2017-09-15T08:42:06Z,"@sipa Thanks for the response. I appreciate what you're saying and there's a reliance between the wallet and other files in the datadir.\n\nI think what I'm saying is that if you're messing around with symlinks, you're probably technical enough to know what you're doing, so having artificial restrictions like the symlink check probably won't result in much real safety. Having to find a workaroun",https://github.com/bitcoin/bitcoin/pull/10885#issuecomment-329720057,329720057,
sipa,2017-09-15T08:46:15Z,"There are no dependencies between the wallet and the rest of the datadir, in either direction.",https://github.com/bitcoin/bitcoin/pull/10885#issuecomment-329720971,329720971,
bittylicious,2017-09-15T08:55:41Z,"Sorry, I meant wallet.dat dependencies (those that make up the full wallet during runtime).",https://github.com/bitcoin/bitcoin/pull/10885#issuecomment-329723208,329723208,
bittylicious,2017-09-15T09:07:53Z,"Having discussed this a bit more on #bitcoin-dev I see what you're saying - the wallet should really be in its own directory as a BDB database expects this, hence the suggestion for a -walletdir argument.",https://github.com/bitcoin/bitcoin/pull/10885#issuecomment-329725990,329725990,
promag,2017-07-20T00:06:50Z,"This is a helper, like the above. For the test below I had to drop `const`,",https://github.com/bitcoin/bitcoin/pull/10885#discussion_r128398223,128398223,src/test/util_tests.cpp
promag,2017-07-20T00:07:54Z,This is set because `IsArgSet` uses `mapArgs`.,https://github.com/bitcoin/bitcoin/pull/10885#discussion_r128398372,128398372,src/test/util_tests.cpp
instagibbs,2017-07-20T15:09:20Z,Can you briefly describe what it does in a comment above this line?,https://github.com/bitcoin/bitcoin/pull/10885#discussion_r128543286,128543286,src/util.h
laanwj,2017-07-20T15:28:56Z,"Is this use-case common enough to add a new argument getter to the API for?\nIf not, I'd prefer chaining more general functions, for example defining a function `std::vector<string> UniqueStrings(const std::vector<string>&)` then using it as\n```c++\nUniqueStrings(GetArgs(""-wallet""))\n```\n",https://github.com/bitcoin/bitcoin/pull/10885#discussion_r128549084,128549084,src/util.h
promag,2017-07-20T15:43:57Z,"There are other multiargs that may use this getter, but I'm checking it. There is also the option of `GetArgs(const std::string& strArg, fUnique = false)`.",https://github.com/bitcoin/bitcoin/pull/10885#discussion_r128553500,128553500,src/util.h
promag,2017-07-20T15:45:27Z,But I also like that option @laanwj.,https://github.com/bitcoin/bitcoin/pull/10885#discussion_r128554065,128554065,src/util.h
jnewbery,2017-07-20T21:28:48Z,"Why not let std::set do the heavy lifting for you:\n\n```\n    std::vector<std::string> args = GetArgs(strArg);\n    std::set<std::string> uniques(args.begin(), args.end());\n    args.assign(uniques.begin(), uniques.end());\n    return args;\n```",https://github.com/bitcoin/bitcoin/pull/10885#discussion_r128635592,128635592,src/util.cpp
jnewbery,2017-07-20T21:35:04Z,"+1 to comment.\n\nI can imagine this having wider use, so I don't think adding a ArgsManager member function is a problem.",https://github.com/bitcoin/bitcoin/pull/10885#discussion_r128636857,128636857,src/util.h
promag,2017-07-20T21:51:11Z,We want to keep order.,https://github.com/bitcoin/bitcoin/pull/10885#discussion_r128639698,128639698,src/util.cpp
jnewbery,2017-07-20T21:53:12Z,ah. Makes sense. Thanks.,https://github.com/bitcoin/bitcoin/pull/10885#discussion_r128640058,128640058,src/util.cpp
promag,2017-07-20T21:58:14Z,I was tempted to name it `GetStableUniqueArgs` but maybe it's too much for most of you.,https://github.com/bitcoin/bitcoin/pull/10885#discussion_r128641038,128641038,src/util.cpp
jnewbery,2017-07-21T11:05:56Z,I think just make sure there's a comment at the declaration saying that ordering is stable.,https://github.com/bitcoin/bitcoin/pull/10885#discussion_r128737676,128737676,src/util.cpp
jnewbery,2017-07-21T15:14:18Z,ultranit: match the doxygen style comments below.,https://github.com/bitcoin/bitcoin/pull/10885#discussion_r128787407,128787407,src/util.h
benma,2017-07-24T07:16:17Z,you should `#include <set>`,https://github.com/bitcoin/bitcoin/pull/10885#discussion_r128963203,128963203,src/util.cpp
sipa,2017-07-25T02:38:45Z,"Based on the documentation, I'm not sure that `boost::filesystem::absolute` resolves symlinks; only that it resolves relative path elements (lack of root, and `.` and `..` path elements). `boost::filesystem::canonical` resolves symlinks too.\n\nEDIT: nevermind, it seems that `fs::equivalent` further takes care of this.",https://github.com/bitcoin/bitcoin/pull/10885#discussion_r129200697,129200697,src/wallet/wallet.cpp
TheBlueMatt,2017-07-25T19:59:11Z,Doesn't this imply you can specify duplicate wallets if the wallet doesn't (yet) exist? It seems strange mostly because it would result in you being able to restart your node and then suddently it will fail but succeed the first time.,https://github.com/bitcoin/bitcoin/pull/10885#discussion_r129409240,129409240,src/wallet/wallet.cpp
promag,2017-07-25T22:03:53Z,7c4058d disallows having wallets as symlinks whereas addffb2 resolves symlink to the concrete absolute path.,https://github.com/bitcoin/bitcoin/pull/10885#discussion_r129437723,129437723,src/wallet/wallet.cpp
promag,2017-07-25T22:10:56Z,"@sipa `fs::equivalent` is not used in the latest version.\n",https://github.com/bitcoin/bitcoin/pull/10885#discussion_r129439010,129439010,src/wallet/wallet.cpp
sipa,2017-07-26T00:40:33Z,It seems this could be done using `fs::canonical` ?,https://github.com/bitcoin/bitcoin/pull/10885#discussion_r129460005,129460005,src/wallet/wallet.cpp
TheBlueMatt,2017-07-26T18:48:56Z,Boost documentation seems to indicate that is_regular_file implies !is_symlink.,https://github.com/bitcoin/bitcoin/pull/10885#discussion_r129663401,129663401,src/wallet/wallet.cpp
promag,2017-07-27T00:23:26Z,"No, one does not implies the other. A symlink to a file is a regular file. A symlink to a directory is not a regular file.",https://github.com/bitcoin/bitcoin/pull/10885#discussion_r129728616,129728616,src/wallet/wallet.cpp
promag,2017-07-27T00:30:14Z,"BTW, if I remove the `!is_symlink` condition then `multiwallet.py` test fails.",https://github.com/bitcoin/bitcoin/pull/10885#discussion_r129729391,129729391,src/wallet/wallet.cpp
jnewbery,2017-07-27T06:50:23Z,"Suggestion: can you include the invalid wallet name in this error message? If the user has specified multiple wallets, then this error won't indicate which one of them is invalid.\n\nSame goes for the other error conditions.",https://github.com/bitcoin/bitcoin/pull/10885#discussion_r129765057,129765057,src/wallet/wallet.cpp
jnewbery,2017-07-27T06:59:00Z,"Note for other reviewers: It seemed slightly weird to start-stop the node at the beginning of this test. The reason we need to do that is that the `w1` file doesn't exist until the node has been started, and we can't do the symlink test below without an existing wallet file.\n\nmicronit: I think it feels more natural to do these invalid tests at the end of this test script, and removes the confu",https://github.com/bitcoin/bitcoin/pull/10885#discussion_r129766229,129766229,test/functional/multiwallet.py
promag,2017-07-27T07:04:01Z,Other errors doesn't specify the invalid argument.,https://github.com/bitcoin/bitcoin/pull/10885#discussion_r129766999,129766999,src/wallet/wallet.cpp
promag,2017-07-27T07:05:57Z,I'm used to see the success tests at bottom. Can change if it's better as you suggest.,https://github.com/bitcoin/bitcoin/pull/10885#discussion_r129767268,129767268,test/functional/multiwallet.py
jnewbery,2017-07-27T07:28:59Z,"right, because until now there's only been a single wallet, so it's clear what the problem is. With multiwallet, it's helpful to know which wallet is the problem.",https://github.com/bitcoin/bitcoin/pull/10885#discussion_r129770952,129770952,src/wallet/wallet.cpp
jnewbery,2017-07-27T07:29:49Z,"sure, like I said just personal taste to remove the weird start-stop behaviour at the top. Doesn't make any difference.",https://github.com/bitcoin/bitcoin/pull/10885#discussion_r129771089,129771089,test/functional/multiwallet.py
laanwj,2017-07-28T05:59:20Z,"Yes, please add the name here. @jnewbery has a good point that it matters when loading multiple wallets.",https://github.com/bitcoin/bitcoin/pull/10885#discussion_r130017809,130017809,src/wallet/wallet.cpp
