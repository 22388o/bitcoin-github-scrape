[
  {
    "sha": "42cf5e43dc1658b12fc4a52b0fbcdb28f7dafd49",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MmNmNWU0M2RjMTY1OGIxMmZjNGE1MmIwZmJjZGIyOGY3ZGFmZDQ5",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-03-09T00:58:40Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-22T18:09:28Z"
      },
      "message": "chainparams: make versionbits threshold per-deployment",
      "tree": {
        "sha": "c5f6e7ef5c01c9c8718b2f58bd0e1d9c96c3d206",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c5f6e7ef5c01c9c8718b2f58bd0e1d9c96c3d206"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/42cf5e43dc1658b12fc4a52b0fbcdb28f7dafd49",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42cf5e43dc1658b12fc4a52b0fbcdb28f7dafd49",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/42cf5e43dc1658b12fc4a52b0fbcdb28f7dafd49",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42cf5e43dc1658b12fc4a52b0fbcdb28f7dafd49/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c46f1ce75196860c8b036d2965faac7db3aa4414",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c46f1ce75196860c8b036d2965faac7db3aa4414",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c46f1ce75196860c8b036d2965faac7db3aa4414"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 35,
      "deletions": 7
    },
    "files": [
      {
        "sha": "97cb27073d4c9f5c76038b5892a0b04b9c300931",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42cf5e43dc1658b12fc4a52b0fbcdb28f7dafd49/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42cf5e43dc1658b12fc4a52b0fbcdb28f7dafd49/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=42cf5e43dc1658b12fc4a52b0fbcdb28f7dafd49",
        "patch": "@@ -83,11 +83,13 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].threshold = 1916; // 95% of 2016\n \n         // Deployment of Taproot (BIPs 340-342)\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = 1230767999; // December 31, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].threshold = 1916; // 95% of 2016\n \n         consensus.nMinimumChainWork = uint256S(\"0x00000000000000000000000000000000000000001533efd8d716a517fe2c5008\");\n         consensus.defaultAssumeValid = uint256S(\"0x0000000000000000000b9d2ec5a352ecba0592946514a92f14319dc2b367fc72\"); // 654683\n@@ -200,11 +202,13 @@ class CTestNetParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].threshold = 1512; // 75% of 2016\n \n         // Deployment of Taproot (BIPs 340-342)\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = 1230767999; // December 31, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].threshold = 1512; // 75% of 2016\n \n         consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000000001db6ec4ac88cf2272c6\");\n         consensus.defaultAssumeValid = uint256S(\"0x000000000000006433d1efec504c53ca332b64963c425395515b01977bd7b3b0\"); // 1864000\n@@ -335,11 +339,13 @@ class SigNetParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].threshold = 1916; // 95% of 2016\n \n         // Activation of Taproot (BIPs 340-342)\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nStartTime = Consensus::BIP9Deployment::ALWAYS_ACTIVE;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].threshold = 1916; // 95% of 2016\n \n         // message start is defined as the first 4 bytes of the sha256d of the block script\n         CHashWriter h(SER_DISK, 0);\n@@ -400,9 +406,11 @@ class CRegTestParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 0;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].threshold = 108; // 75% of 144\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nStartTime = Consensus::BIP9Deployment::ALWAYS_ACTIVE;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].threshold = 108; // 75% of 144\n \n         consensus.nMinimumChainWork = uint256{};\n         consensus.defaultAssumeValid = uint256{};"
      },
      {
        "sha": "924b80c69fdd72b0763084f04abed7ea0e27c6a0",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42cf5e43dc1658b12fc4a52b0fbcdb28f7dafd49/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42cf5e43dc1658b12fc4a52b0fbcdb28f7dafd49/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=42cf5e43dc1658b12fc4a52b0fbcdb28f7dafd49",
        "patch": "@@ -29,6 +29,8 @@ struct BIP9Deployment {\n     int64_t nStartTime;\n     /** Timeout/expiry MedianTime for the deployment attempt. */\n     int64_t nTimeout;\n+    /** Threshold for activation */\n+    int threshold;\n \n     /** Constant for nTimeout very far in the future. */\n     static constexpr int64_t NO_TIMEOUT = std::numeric_limits<int64_t>::max();"
      },
      {
        "sha": "2a9567ebc28e21e1226be00bb1594efbeed58c10",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 6,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42cf5e43dc1658b12fc4a52b0fbcdb28f7dafd49/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42cf5e43dc1658b12fc4a52b0fbcdb28f7dafd49/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=42cf5e43dc1658b12fc4a52b0fbcdb28f7dafd49",
        "patch": "@@ -217,12 +217,21 @@ BOOST_AUTO_TEST_CASE(versionbits_test)\n                            .Mine(6000, TestTime(20000), 0).TestFailed().TestStateSinceHeight(6000)\n                            .Mine(7000, TestTime(20000), 0x100).TestFailed().TestStateSinceHeight(6000);\n     }\n+}\n \n+void sanity_check_params(const Consensus::Params& params)\n+{\n     // Sanity checks of version bit deployments\n-    const auto chainParams = CreateChainParams(*m_node.args, CBaseChainParams::MAIN);\n-    const Consensus::Params &mainnetParams = chainParams->GetConsensus();\n     for (int i=0; i<(int) Consensus::MAX_VERSION_BITS_DEPLOYMENTS; i++) {\n-        uint32_t bitmask = VersionBitsMask(mainnetParams, static_cast<Consensus::DeploymentPos>(i));\n+\n+        // Verify the threshold is sane and isn't lower than the threshold\n+        // used for warning for unknown activations\n+        int threshold = params.vDeployments[i].threshold;\n+        BOOST_CHECK(threshold > 0);\n+        BOOST_CHECK((uint32_t)threshold >= params.nRuleChangeActivationThreshold);\n+        BOOST_CHECK((uint32_t)threshold <= params.nMinerConfirmationWindow);\n+\n+        uint32_t bitmask = VersionBitsMask(params, static_cast<Consensus::DeploymentPos>(i));\n         // Make sure that no deployment tries to set an invalid bit.\n         BOOST_CHECK_EQUAL(bitmask & ~(uint32_t)VERSIONBITS_TOP_MASK, bitmask);\n \n@@ -234,14 +243,23 @@ BOOST_AUTO_TEST_CASE(versionbits_test)\n         // activated soft fork could be later changed to be earlier to avoid\n         // overlap.)\n         for (int j=i+1; j<(int) Consensus::MAX_VERSION_BITS_DEPLOYMENTS; j++) {\n-            if (VersionBitsMask(mainnetParams, static_cast<Consensus::DeploymentPos>(j)) == bitmask) {\n-                BOOST_CHECK(mainnetParams.vDeployments[j].nStartTime > mainnetParams.vDeployments[i].nTimeout ||\n-                        mainnetParams.vDeployments[i].nStartTime > mainnetParams.vDeployments[j].nTimeout);\n+            if (VersionBitsMask(params, static_cast<Consensus::DeploymentPos>(j)) == bitmask) {\n+                BOOST_CHECK(params.vDeployments[j].nStartTime > params.vDeployments[i].nTimeout ||\n+                        params.vDeployments[i].nStartTime > params.vDeployments[j].nTimeout);\n             }\n         }\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(versionbits_params)\n+{\n+    for (const auto& chain : {CBaseChainParams::MAIN, CBaseChainParams::TESTNET, CBaseChainParams::SIGNET, CBaseChainParams::REGTEST}) {\n+        const auto chainParams = CreateChainParams(*m_node.args, chain);\n+        const Consensus::Params &params = chainParams->GetConsensus();\n+        sanity_check_params(params);\n+    }\n+}\n+\n BOOST_AUTO_TEST_CASE(versionbits_computeblockversion)\n {\n     // Check that ComputeBlockVersion will set the appropriate bit correctly"
      },
      {
        "sha": "23337db747b5ee5b8189140cec9a03ef71aca4a1",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42cf5e43dc1658b12fc4a52b0fbcdb28f7dafd49/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42cf5e43dc1658b12fc4a52b0fbcdb28f7dafd49/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=42cf5e43dc1658b12fc4a52b0fbcdb28f7dafd49",
        "patch": "@@ -171,7 +171,7 @@ class VersionBitsConditionChecker : public AbstractThresholdConditionChecker {\n     int64_t BeginTime(const Consensus::Params& params) const override { return params.vDeployments[id].nStartTime; }\n     int64_t EndTime(const Consensus::Params& params) const override { return params.vDeployments[id].nTimeout; }\n     int Period(const Consensus::Params& params) const override { return params.nMinerConfirmationWindow; }\n-    int Threshold(const Consensus::Params& params) const override { return params.nRuleChangeActivationThreshold; }\n+    int Threshold(const Consensus::Params& params) const override { return params.vDeployments[id].threshold; }\n \n     bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const override\n     {"
      }
    ]
  },
  {
    "sha": "8d9609fe0dc3d4af175027e4ce95dccb761b41a3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZDk2MDlmZTBkYzNkNGFmMTc1MDI3ZTRjZTk1ZGNjYjc2MWI0MWEz",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-06-25T16:54:06Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-22T18:09:31Z"
      },
      "message": "Migrate versionbits to use height instead of MTP\n\nCo-authored-by: Anthony Towns <aj@erisian.com.au>",
      "tree": {
        "sha": "7a7f18936d89b376e7a0eddc5abde098b2e3bfd7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a7f18936d89b376e7a0eddc5abde098b2e3bfd7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d9609fe0dc3d4af175027e4ce95dccb761b41a3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d9609fe0dc3d4af175027e4ce95dccb761b41a3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8d9609fe0dc3d4af175027e4ce95dccb761b41a3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d9609fe0dc3d4af175027e4ce95dccb761b41a3/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "42cf5e43dc1658b12fc4a52b0fbcdb28f7dafd49",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42cf5e43dc1658b12fc4a52b0fbcdb28f7dafd49",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/42cf5e43dc1658b12fc4a52b0fbcdb28f7dafd49"
      }
    ],
    "stats": {
      "total": 492,
      "additions": 235,
      "deletions": 257
    },
    "files": [
      {
        "sha": "1fee45a66a9e035f67eb0bae006b7471de047893",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 65,
        "deletions": 27,
        "changes": 92,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d9609fe0dc3d4af175027e4ce95dccb761b41a3/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d9609fe0dc3d4af175027e4ce95dccb761b41a3/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=8d9609fe0dc3d4af175027e4ce95dccb761b41a3",
        "patch": "@@ -81,14 +81,14 @@ class CMainParams : public CChainParams {\n         consensus.nRuleChangeActivationThreshold = 1916; // 95% of 2016\n         consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].startheight = Consensus::BIP9Deployment::NEVER_ACTIVE;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].timeoutheight = Consensus::BIP9Deployment::NEVER_ACTIVE;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].threshold = 1916; // 95% of 2016\n \n         // Deployment of Taproot (BIPs 340-342)\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nStartTime = 1199145601; // January 1, 2008\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = 1230767999; // December 31, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].startheight = Consensus::BIP9Deployment::NEVER_ACTIVE;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].timeoutheight = Consensus::BIP9Deployment::NEVER_ACTIVE;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].threshold = 1916; // 95% of 2016\n \n         consensus.nMinimumChainWork = uint256S(\"0x00000000000000000000000000000000000000001533efd8d716a517fe2c5008\");\n@@ -200,14 +200,14 @@ class CTestNetParams : public CChainParams {\n         consensus.nRuleChangeActivationThreshold = 1512; // 75% for testchains\n         consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].startheight = Consensus::BIP9Deployment::NEVER_ACTIVE;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].timeoutheight = Consensus::BIP9Deployment::NEVER_ACTIVE;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].threshold = 1512; // 75% of 2016\n \n         // Deployment of Taproot (BIPs 340-342)\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nStartTime = 1199145601; // January 1, 2008\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = 1230767999; // December 31, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].startheight = Consensus::BIP9Deployment::NEVER_ACTIVE;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].timeoutheight = Consensus::BIP9Deployment::NEVER_ACTIVE;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].threshold = 1512; // 75% of 2016\n \n         consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000000001db6ec4ac88cf2272c6\");\n@@ -337,14 +337,14 @@ class SigNetParams : public CChainParams {\n         consensus.MinBIP9WarningHeight = 0;\n         consensus.powLimit = uint256S(\"00000377ae000000000000000000000000000000000000000000000000000000\");\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].startheight = Consensus::BIP9Deployment::NEVER_ACTIVE;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].timeoutheight = Consensus::BIP9Deployment::NEVER_ACTIVE;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].threshold = 1916; // 95% of 2016\n \n         // Activation of Taproot (BIPs 340-342)\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nStartTime = Consensus::BIP9Deployment::ALWAYS_ACTIVE;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].startheight = Consensus::BIP9Deployment::ALWAYS_ACTIVE;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].timeoutheight = Consensus::BIP9Deployment::NO_TIMEOUT;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].threshold = 1916; // 95% of 2016\n \n         // message start is defined as the first 4 bytes of the sha256d of the block script\n@@ -404,12 +404,12 @@ class CRegTestParams : public CChainParams {\n         consensus.nRuleChangeActivationThreshold = 108; // 75% for testchains\n         consensus.nMinerConfirmationWindow = 144; // Faster than normal for regtest (144 instead of 2016)\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 0;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].startheight = 144;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].timeoutheight = Consensus::BIP9Deployment::NO_TIMEOUT;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].threshold = 108; // 75% of 144\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nStartTime = Consensus::BIP9Deployment::ALWAYS_ACTIVE;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].startheight = Consensus::BIP9Deployment::ALWAYS_ACTIVE;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].timeoutheight = Consensus::BIP9Deployment::NO_TIMEOUT;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].threshold = 108; // 75% of 144\n \n         consensus.nMinimumChainWork = uint256{};\n@@ -474,14 +474,48 @@ class CRegTestParams : public CChainParams {\n     /**\n      * Allows modifying the Version Bits regtest parameters.\n      */\n-    void UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout)\n+    void UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t startheight, int64_t timeoutheight)\n     {\n-        consensus.vDeployments[d].nStartTime = nStartTime;\n-        consensus.vDeployments[d].nTimeout = nTimeout;\n+        consensus.vDeployments[d].startheight = startheight;\n+        consensus.vDeployments[d].timeoutheight = timeoutheight;\n     }\n+    bool CheckVBitsHeights(std::string& error, int64_t startheight, int64_t timeoutheight);\n     void UpdateActivationParametersFromArgs(const ArgsManager& args);\n };\n \n+bool CRegTestParams::CheckVBitsHeights(std::string& error, int64_t startheight, int64_t timeoutheight)\n+{\n+    // Special always or never active cases\n+    if ((startheight == Consensus::BIP9Deployment::NEVER_ACTIVE && timeoutheight == Consensus::BIP9Deployment::NEVER_ACTIVE)\n+        || (startheight == Consensus::BIP9Deployment::ALWAYS_ACTIVE && timeoutheight == Consensus::BIP9Deployment::NO_TIMEOUT)) {\n+        return true;\n+    }\n+    if ((startheight == Consensus::BIP9Deployment::NEVER_ACTIVE && timeoutheight != Consensus::BIP9Deployment::NEVER_ACTIVE)\n+        || (startheight != Consensus::BIP9Deployment::NEVER_ACTIVE && timeoutheight == Consensus::BIP9Deployment::NEVER_ACTIVE)) {\n+        error = strprintf(\"When one of startheight or timeoutheight is %d, both must be %d\", Consensus::BIP9Deployment::NEVER_ACTIVE, Consensus::BIP9Deployment::NEVER_ACTIVE);\n+        return false;\n+    }\n+    if (startheight == Consensus::BIP9Deployment::ALWAYS_ACTIVE && timeoutheight != Consensus::BIP9Deployment::NO_TIMEOUT) {\n+        error = strprintf(\"When startheight is %d, timeoutheight must be %d\", Consensus::BIP9Deployment::ALWAYS_ACTIVE, Consensus::BIP9Deployment::NO_TIMEOUT);\n+        return false;\n+    }\n+\n+    // Actual params must be on retarget block\n+    if (startheight % consensus.nMinerConfirmationWindow != 0) {\n+        error = strprintf(\"Invalid startheight (%d), must be a multiple of %d\", startheight, consensus.nMinerConfirmationWindow);\n+        return false;\n+    }\n+    if (timeoutheight % consensus.nMinerConfirmationWindow != 0) {\n+        error = strprintf(\"Invalid timeoutheight (%d), must be a multiple of %d\", timeoutheight, consensus.nMinerConfirmationWindow);\n+        return false;\n+    }\n+    if (timeoutheight <= startheight) {\n+        error = strprintf(\"Invalid timeoutheight (%d), must be greater than the startheight (%d)\", timeoutheight, timeoutheight);\n+        return false;\n+    }\n+    return true;\n+}\n+\n void CRegTestParams::UpdateActivationParametersFromArgs(const ArgsManager& args)\n {\n     if (args.IsArgSet(\"-segwitheight\")) {\n@@ -501,21 +535,25 @@ void CRegTestParams::UpdateActivationParametersFromArgs(const ArgsManager& args)\n         std::vector<std::string> vDeploymentParams;\n         boost::split(vDeploymentParams, strDeployment, boost::is_any_of(\":\"));\n         if (vDeploymentParams.size() != 3) {\n-            throw std::runtime_error(\"Version bits parameters malformed, expecting deployment:start:end\");\n+            throw std::runtime_error(\"Version bits parameters malformed, expecting deployment:@startheight:@timeoutheight\");\n+        }\n+        int64_t startheight = 0, timeoutheight = 0;\n+        if (vDeploymentParams[1].empty() || vDeploymentParams[1].front() != '@' || !ParseInt64(vDeploymentParams[1].substr(1), &startheight)) {\n+            throw std::runtime_error(strprintf(\"Invalid startheight (%s)\", vDeploymentParams[1]));\n         }\n-        int64_t nStartTime, nTimeout;\n-        if (!ParseInt64(vDeploymentParams[1], &nStartTime)) {\n-            throw std::runtime_error(strprintf(\"Invalid nStartTime (%s)\", vDeploymentParams[1]));\n+        if (vDeploymentParams[2].empty() || vDeploymentParams[2].front() != '@' || !ParseInt64(vDeploymentParams[2].substr(1), &timeoutheight)) {\n+            throw std::runtime_error(strprintf(\"Invalid timeoutheight (%s)\", vDeploymentParams[2]));\n         }\n-        if (!ParseInt64(vDeploymentParams[2], &nTimeout)) {\n-            throw std::runtime_error(strprintf(\"Invalid nTimeout (%s)\", vDeploymentParams[2]));\n+        std::string error;\n+        if (!CheckVBitsHeights(error, startheight, timeoutheight)) {\n+            throw std::runtime_error(error);\n         }\n         bool found = false;\n         for (int j=0; j < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++j) {\n             if (vDeploymentParams[0] == VersionBitsDeploymentInfo[j].name) {\n-                UpdateVersionBitsParameters(Consensus::DeploymentPos(j), nStartTime, nTimeout);\n+                UpdateVersionBitsParameters(Consensus::DeploymentPos(j), startheight, timeoutheight);\n                 found = true;\n-                LogPrintf(\"Setting version bits activation parameters for %s to start=%ld, timeout=%ld\\n\", vDeploymentParams[0], nStartTime, nTimeout);\n+                LogPrintf(\"Setting version bits activation parameters for %s to startheight=%ld, timeoutheight=%ld\\n\", vDeploymentParams[0], startheight, timeoutheight);\n                 break;\n             }\n         }"
      },
      {
        "sha": "06316a797c265d6fbf7c55a0db89234c60a0e654",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d9609fe0dc3d4af175027e4ce95dccb761b41a3/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d9609fe0dc3d4af175027e4ce95dccb761b41a3/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=8d9609fe0dc3d4af175027e4ce95dccb761b41a3",
        "patch": "@@ -22,7 +22,7 @@ void SetupChainParamsBaseOptions(ArgsManager& argsman)\n                  \"This is intended for regression testing tools and app development. Equivalent to -chain=regtest.\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-segwitheight=<n>\", \"Set the activation height of segwit. -1 to disable. (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-testnet\", \"Use the test chain. Equivalent to -chain=test.\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n-    argsman.AddArg(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    argsman.AddArg(\"-vbparams=deployment:@startheight:@timeoutheight\", \"Use given start/timeout heights for specified version bits deployment (regtest-only). For an always active deployment, use @-1:@2147483647. For a never active deployment, use @-2:@-2.\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-signet\", \"Use the signet chain. Equivalent to -chain=signet. Note that the network is defined by the -signetchallenge parameter\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-signetchallenge\", \"Blocks must satisfy the given script to be considered valid (only for signet networks; defaults to the global default signet test network challenge)\", ArgsManager::ALLOW_STRING, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-signetseednode\", \"Specify a seed node for the signet network, in the hostname[:port] format, e.g. sig.net:1234 (may be used multiple times to specify multiple seed nodes; defaults to the global default signet test network seed node(s))\", ArgsManager::ALLOW_STRING, OptionsCategory::CHAINPARAMS);"
      },
      {
        "sha": "2225317e7643264f1580bebc25080dab993a4510",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 11,
        "deletions": 8,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d9609fe0dc3d4af175027e4ce95dccb761b41a3/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d9609fe0dc3d4af175027e4ce95dccb761b41a3/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=8d9609fe0dc3d4af175027e4ce95dccb761b41a3",
        "patch": "@@ -25,21 +25,24 @@ enum DeploymentPos\n struct BIP9Deployment {\n     /** Bit position to select the particular bit in nVersion. */\n     int bit;\n-    /** Start MedianTime for version bits miner confirmation. Can be a date in the past */\n-    int64_t nStartTime;\n-    /** Timeout/expiry MedianTime for the deployment attempt. */\n-    int64_t nTimeout;\n+    /** Start block height for version bits miner confirmation. Must be a retarget block, can be in the past. */\n+    int startheight;\n+    /** Timeout/expiry block height for the deployment attempt. Must be a retarget block. */\n+    int timeoutheight;\n     /** Threshold for activation */\n     int threshold;\n \n-    /** Constant for nTimeout very far in the future. */\n-    static constexpr int64_t NO_TIMEOUT = std::numeric_limits<int64_t>::max();\n+    /** Constant for timeoutheight very far in the future. */\n+    static constexpr int NO_TIMEOUT = std::numeric_limits<int>::max();\n \n-    /** Special value for nStartTime indicating that the deployment is always active.\n+    /** Special value for startheight indicating that the deployment is always active.\n      *  This is useful for testing, as it means tests don't need to deal with the activation\n      *  process (which takes at least 3 BIP9 intervals). Only tests that specifically test the\n      *  behaviour during activation cannot use this. */\n-    static constexpr int64_t ALWAYS_ACTIVE = -1;\n+    static constexpr int ALWAYS_ACTIVE = -1;\n+    /** Special value for startheight and timeoutheight (both must be set) indicating that the\n+     *  deployment is entirely disabled. */\n+    static constexpr int NEVER_ACTIVE = -2;\n };\n \n /**"
      },
      {
        "sha": "3d3965a992fb4354fd9fd7276efbc9ad230ddef9",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d9609fe0dc3d4af175027e4ce95dccb761b41a3/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d9609fe0dc3d4af175027e4ce95dccb761b41a3/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=8d9609fe0dc3d4af175027e4ce95dccb761b41a3",
        "patch": "@@ -1225,10 +1225,9 @@ static void BuriedForkDescPushBack(UniValue& softforks, const std::string &name,\n static void BIP9SoftForkDescPushBack(UniValue& softforks, const std::string &name, const Consensus::Params& consensusParams, Consensus::DeploymentPos id) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     // For BIP9 deployments.\n-    // Deployments (e.g. testdummy) with timeout value before Jan 1, 2009 are hidden.\n-    // A timeout value of 0 guarantees a softfork will never be activated.\n+    // Deployments (e.g. testdummy) which are marked as \"never active\" are hidden.\n     // This is used when merging logic to implement a proposed softfork without a specified deployment schedule.\n-    if (consensusParams.vDeployments[id].nTimeout <= 1230768000) return;\n+    if (consensusParams.vDeployments[id].timeoutheight == Consensus::BIP9Deployment::NEVER_ACTIVE) return;\n \n     UniValue bip9(UniValue::VOBJ);\n     const ThresholdState thresholdState = VersionBitsState(::ChainActive().Tip(), consensusParams, id, versionbitscache);\n@@ -1243,8 +1242,8 @@ static void BIP9SoftForkDescPushBack(UniValue& softforks, const std::string &nam\n     {\n         bip9.pushKV(\"bit\", consensusParams.vDeployments[id].bit);\n     }\n-    bip9.pushKV(\"start_time\", consensusParams.vDeployments[id].nStartTime);\n-    bip9.pushKV(\"timeout\", consensusParams.vDeployments[id].nTimeout);\n+    bip9.pushKV(\"startheight\", consensusParams.vDeployments[id].startheight);\n+    bip9.pushKV(\"timeoutheight\", consensusParams.vDeployments[id].timeoutheight);\n     int64_t since_height = VersionBitsStateSinceHeight(::ChainActive().Tip(), consensusParams, id, versionbitscache);\n     bip9.pushKV(\"since\", since_height);\n     if (ThresholdState::STARTED == thresholdState)\n@@ -1301,8 +1300,8 @@ RPCHelpMan getblockchaininfo()\n                                 {\n                                     {RPCResult::Type::STR, \"status\", \"one of \\\"defined\\\", \\\"started\\\", \\\"locked_in\\\", \\\"active\\\", \\\"failed\\\"\"},\n                                     {RPCResult::Type::NUM, \"bit\", \"the bit (0-28) in the block version field used to signal this softfork (only for \\\"started\\\" status)\"},\n-                                    {RPCResult::Type::NUM_TIME, \"start_time\", \"the minimum median time past of a block at which the bit gains its meaning\"},\n-                                    {RPCResult::Type::NUM_TIME, \"timeout\", \"the median time past of a block at which the deployment is considered failed if not yet locked in\"},\n+                                    {RPCResult::Type::NUM, \"startheight\", \"the minimum height of a block at which the bit gains its meaning\"},\n+                                    {RPCResult::Type::NUM, \"timeoutheight\", \"the height of a block at which the deployment is considered failed if not yet locked in\"},\n                                     {RPCResult::Type::NUM, \"since\", \"height of the first block to which the status applies\"},\n                                     {RPCResult::Type::OBJ, \"statistics\", \"numeric statistics about BIP9 signalling for a softfork (only for \\\"started\\\" status)\",\n                                     {"
      },
      {
        "sha": "5da244336a712e4fdd1c3798cdf071e279d13df4",
        "filename": "src/test/fuzz/versionbits.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 58,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d9609fe0dc3d4af175027e4ce95dccb761b41a3/src/test/fuzz/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d9609fe0dc3d4af175027e4ce95dccb761b41a3/src/test/fuzz/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/versionbits.cpp?ref=8d9609fe0dc3d4af175027e4ce95dccb761b41a3",
        "patch": "@@ -25,13 +25,13 @@ class TestConditionChecker : public AbstractThresholdConditionChecker\n     const Consensus::Params dummy_params{};\n \n public:\n-    const int64_t m_begin = 0;\n-    const int64_t m_end = 0;\n+    const int m_begin = 0;\n+    const int m_end = 0;\n     const int m_period = 0;\n     const int m_threshold = 0;\n     const int m_bit = 0;\n \n-    TestConditionChecker(int64_t begin, int64_t end, int period, int threshold, int bit)\n+    TestConditionChecker(int begin, int end, int period, int threshold, int bit)\n         : m_begin{begin}, m_end{end}, m_period{period}, m_threshold{threshold}, m_bit{bit}\n     {\n         assert(m_period > 0);\n@@ -40,8 +40,8 @@ class TestConditionChecker : public AbstractThresholdConditionChecker\n     }\n \n     bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const override { return Condition(pindex->nVersion); }\n-    int64_t BeginTime(const Consensus::Params& params) const override { return m_begin; }\n-    int64_t EndTime(const Consensus::Params& params) const override { return m_end; }\n+    int StartHeight(const Consensus::Params& params) const override { return m_begin; }\n+    int TimeoutHeight(const Consensus::Params& params) const override { return m_end; }\n     int Period(const Consensus::Params& params) const override { return m_period; }\n     int Threshold(const Consensus::Params& params) const override { return m_threshold; }\n \n@@ -62,14 +62,12 @@ class Blocks\n {\n private:\n     std::vector<std::unique_ptr<CBlockIndex>> m_blocks;\n-    const uint32_t m_start_time;\n-    const uint32_t m_interval;\n     const int32_t m_signal;\n     const int32_t m_no_signal;\n \n public:\n-    Blocks(uint32_t start_time, uint32_t interval, int32_t signal, int32_t no_signal)\n-        : m_start_time{start_time}, m_interval{interval}, m_signal{signal}, m_no_signal{no_signal} {}\n+    Blocks(int32_t signal, int32_t no_signal)\n+        : m_signal{signal}, m_no_signal{no_signal} {}\n \n     size_t size() const { return m_blocks.size(); }\n \n@@ -82,7 +80,6 @@ class Blocks\n     {\n         CBlockHeader header;\n         header.nVersion = signal ? m_signal : m_no_signal;\n-        header.nTime = m_start_time + m_blocks.size() * m_interval;\n         header.nBits = 0x1d00ffff;\n \n         auto current_block = std::make_unique<CBlockIndex>(header);\n@@ -100,8 +97,6 @@ void initialize()\n }\n } // namespace\n \n-constexpr uint32_t MAX_TIME = 4102444800; // 2100-01-01\n-\n FUZZ_TARGET_INIT(versionbits, initialize)\n {\n     const CChainParams& params = Params();\n@@ -120,12 +115,6 @@ FUZZ_TARGET_INIT(versionbits, initialize)\n     const int threshold = fuzzed_data_provider.ConsumeIntegralInRange(1, period);\n     assert(0 < threshold && threshold <= period); // must be able to both pass and fail threshold!\n \n-    // too many blocks at 10min each might cause uint32_t time to overflow if\n-    // block_start_time is at the end of the range above\n-    assert(std::numeric_limits<uint32_t>::max() - MAX_TIME > interval * max_blocks);\n-\n-    const int64_t block_start_time = fuzzed_data_provider.ConsumeIntegralInRange<uint32_t>(params.GenesisBlock().nTime, MAX_TIME);\n-\n     // what values for version will we use to signal / not signal?\n     const int32_t ver_signal = fuzzed_data_provider.ConsumeIntegral<int32_t>();\n     const int32_t ver_nosignal = fuzzed_data_provider.ConsumeIntegral<int32_t>();\n@@ -135,38 +124,25 @@ FUZZ_TARGET_INIT(versionbits, initialize)\n \n     bool always_active_test = false;\n     bool never_active_test = false;\n-    int64_t start_time;\n-    int64_t timeout;\n+    int startheight;\n+    int timeoutheight;\n     if (fuzzed_data_provider.ConsumeBool()) {\n         // pick the timestamp to switch based on a block\n-        // note states will change *after* these blocks because mediantime lags\n-        int start_block = fuzzed_data_provider.ConsumeIntegralInRange<int>(0, period * (max_periods - 3));\n-        int end_block = fuzzed_data_provider.ConsumeIntegralInRange<int>(start_block, period * (max_periods - 3));\n-\n-        start_time = block_start_time + start_block * interval;\n-        timeout = block_start_time + end_block * interval;\n-\n-        assert(start_time <= timeout);\n-\n-        // allow for times to not exactly match a block\n-        if (fuzzed_data_provider.ConsumeBool()) start_time += interval / 2;\n-        if (fuzzed_data_provider.ConsumeBool()) timeout += interval / 2;\n-\n-        // this may make timeout too early; if so, don't run the test\n-        if (start_time > timeout) return;\n+        startheight = fuzzed_data_provider.ConsumeIntegralInRange<int>(0, period * (max_periods - 2));\n+        timeoutheight = fuzzed_data_provider.ConsumeIntegralInRange<int>(0, period * (max_periods - 2));\n     } else {\n         if (fuzzed_data_provider.ConsumeBool()) {\n-            start_time = Consensus::BIP9Deployment::ALWAYS_ACTIVE;\n-            timeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n+            startheight = Consensus::BIP9Deployment::ALWAYS_ACTIVE;\n+            timeoutheight = Consensus::BIP9Deployment::NO_TIMEOUT;\n             always_active_test = true;\n         } else {\n-            start_time = 1199145601; // January 1, 2008\n-            timeout = 1230767999;    // December 31, 2008\n+            startheight = Consensus::BIP9Deployment::NEVER_ACTIVE;\n+            timeoutheight = Consensus::BIP9Deployment::NEVER_ACTIVE;\n             never_active_test = true;\n         }\n     }\n \n-    TestConditionChecker checker(start_time, timeout, period, threshold, bit);\n+    TestConditionChecker checker(startheight, timeoutheight, period, threshold, bit);\n \n     // Early exit if the versions don't signal sensibly for the deployment\n     if (!checker.Condition(ver_signal)) return;\n@@ -177,7 +153,7 @@ FUZZ_TARGET_INIT(versionbits, initialize)\n     assert(ver_signal > 0);\n \n     // Now that we have chosen time and versions, setup to mine blocks\n-    Blocks blocks(block_start_time, interval, ver_signal, ver_nosignal);\n+    Blocks blocks(ver_signal, ver_nosignal);\n \n     /* Strategy:\n      *  * we will mine a final period worth of blocks, with\n@@ -261,6 +237,9 @@ FUZZ_TARGET_INIT(versionbits, initialize)\n     CBlockIndex* current_block = blocks.mine_block(signal);\n     assert(checker.Condition(current_block) == signal);\n \n+    // All states are for the next block\n+    int height = current_block->nHeight + 1;\n+\n     // GetStateStatistics is safe on a period boundary\n     // and has progressed to a new period\n     const BIP9Stats stats = checker.GetStateStatisticsFor(current_block);\n@@ -276,47 +255,46 @@ FUZZ_TARGET_INIT(versionbits, initialize)\n \n     // since is straightforward:\n     assert(since % period == 0);\n-    assert(0 <= since && since <= current_block->nHeight + 1);\n+    assert(0 <= since && since <= height);\n     if (state == exp_state) {\n         assert(since == exp_since);\n     } else {\n-        assert(since == current_block->nHeight + 1);\n+        assert(since == height);\n     }\n \n     // state is where everything interesting is\n     switch (state) {\n     case ThresholdState::DEFINED:\n         assert(since == 0);\n         assert(exp_state == ThresholdState::DEFINED);\n-        assert(current_block->GetMedianTimePast() < checker.m_begin);\n-        assert(current_block->GetMedianTimePast() < checker.m_end);\n+        assert(never_active_test || height < checker.m_begin);\n         break;\n     case ThresholdState::STARTED:\n-        assert(current_block->GetMedianTimePast() >= checker.m_begin);\n-        assert(current_block->GetMedianTimePast() < checker.m_end);\n+        assert(height >= checker.m_begin);\n         if (exp_state == ThresholdState::STARTED) {\n+            assert(height < checker.m_end);\n             assert(blocks_sig < threshold);\n         } else {\n             assert(exp_state == ThresholdState::DEFINED);\n         }\n         break;\n     case ThresholdState::LOCKED_IN:\n         assert(exp_state == ThresholdState::STARTED);\n-        assert(current_block->GetMedianTimePast() < checker.m_end);\n         assert(blocks_sig >= threshold);\n         break;\n     case ThresholdState::ACTIVE:\n         assert(exp_state == ThresholdState::ACTIVE || exp_state == ThresholdState::LOCKED_IN);\n         break;\n     case ThresholdState::FAILED:\n-        assert(current_block->GetMedianTimePast() >= checker.m_end);\n-        assert(exp_state != ThresholdState::LOCKED_IN && exp_state != ThresholdState::ACTIVE);\n+        assert(height >= checker.m_begin);\n+        assert(height >= checker.m_end);\n+        assert(exp_state == ThresholdState::FAILED || exp_state == ThresholdState::STARTED);\n         break;\n     default:\n         assert(false);\n     }\n \n-    if (blocks.size() >= max_periods * period) {\n+    if (!never_active_test && blocks.size() >= max_periods * period) {\n         // we chose the timeout (and block times) so that by the time we have this many blocks it's all over\n         assert(state == ThresholdState::ACTIVE || state == ThresholdState::FAILED);\n     }\n@@ -334,12 +312,7 @@ FUZZ_TARGET_INIT(versionbits, initialize)\n \n     // \"never active\" does too\n     if (never_active_test) {\n-        assert(state == ThresholdState::FAILED);\n-        assert(since == period);\n-        if (exp_since == 0) {\n-            assert(exp_state == ThresholdState::DEFINED);\n-        } else {\n-            assert(exp_state == ThresholdState::FAILED);\n-        }\n+        assert(state == ThresholdState::DEFINED);\n+        assert(since == 0);\n     }\n }"
      },
      {
        "sha": "efa62c878d8af26fdbc6986c66563f8158579f49",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 85,
        "deletions": 128,
        "changes": 213,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d9609fe0dc3d4af175027e4ce95dccb761b41a3/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d9609fe0dc3d4af175027e4ce95dccb761b41a3/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=8d9609fe0dc3d4af175027e4ce95dccb761b41a3",
        "patch": "@@ -34,10 +34,10 @@ class TestConditionChecker : public AbstractThresholdConditionChecker\n     mutable ThresholdConditionCache cache;\n \n public:\n-    int64_t BeginTime(const Consensus::Params& params) const override { return TestTime(10000); }\n-    int64_t EndTime(const Consensus::Params& params) const override { return TestTime(20000); }\n-    int Period(const Consensus::Params& params) const override { return 1000; }\n-    int Threshold(const Consensus::Params& params) const override { return 900; }\n+    int StartHeight(const Consensus::Params& params) const override { return 100; }\n+    int TimeoutHeight(const Consensus::Params& params) const override { return 200; }\n+    int Period(const Consensus::Params& params) const override { return 10; }\n+    int Threshold(const Consensus::Params& params) const override { return 9; }\n     bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const override { return (pindex->nVersion & 0x100); }\n \n     ThresholdState GetStateFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateFor(pindexPrev, paramsDummy, cache); }\n@@ -47,14 +47,14 @@ class TestConditionChecker : public AbstractThresholdConditionChecker\n class TestAlwaysActiveConditionChecker : public TestConditionChecker\n {\n public:\n-    int64_t BeginTime(const Consensus::Params& params) const override { return Consensus::BIP9Deployment::ALWAYS_ACTIVE; }\n+    int StartHeight(const Consensus::Params& params) const override { return Consensus::BIP9Deployment::ALWAYS_ACTIVE; }\n };\n \n class TestNeverActiveConditionChecker : public TestConditionChecker\n {\n public:\n-    int64_t BeginTime(const Consensus::Params& params) const override { return 0; }\n-    int64_t EndTime(const Consensus::Params& params) const override { return 1230768000; }\n+    int StartHeight(const Consensus::Params& params) const override { return Consensus::BIP9Deployment::NEVER_ACTIVE; }\n+    int TimeoutHeight(const Consensus::Params& params) const override { return Consensus::BIP9Deployment::NEVER_ACTIVE; }\n };\n \n #define CHECKERS 6\n@@ -157,65 +157,40 @@ BOOST_FIXTURE_TEST_SUITE(versionbits_tests, TestingSetup)\n BOOST_AUTO_TEST_CASE(versionbits_test)\n {\n     for (int i = 0; i < 64; i++) {\n-        // DEFINED -> FAILED\n-        VersionBitsTester().TestDefined().TestStateSinceHeight(0)\n-                           .Mine(1, TestTime(1), 0x100).TestDefined().TestStateSinceHeight(0)\n-                           .Mine(11, TestTime(11), 0x100).TestDefined().TestStateSinceHeight(0)\n-                           .Mine(989, TestTime(989), 0x100).TestDefined().TestStateSinceHeight(0)\n-                           .Mine(999, TestTime(20000), 0x100).TestDefined().TestStateSinceHeight(0)\n-                           .Mine(1000, TestTime(20000), 0x100).TestFailed().TestStateSinceHeight(1000)\n-                           .Mine(1999, TestTime(30001), 0x100).TestFailed().TestStateSinceHeight(1000)\n-                           .Mine(2000, TestTime(30002), 0x100).TestFailed().TestStateSinceHeight(1000)\n-                           .Mine(2001, TestTime(30003), 0x100).TestFailed().TestStateSinceHeight(1000)\n-                           .Mine(2999, TestTime(30004), 0x100).TestFailed().TestStateSinceHeight(1000)\n-                           .Mine(3000, TestTime(30005), 0x100).TestFailed().TestStateSinceHeight(1000)\n-\n         // DEFINED -> STARTED -> FAILED\n-                           .Reset().TestDefined().TestStateSinceHeight(0)\n-                           .Mine(1, TestTime(1), 0).TestDefined().TestStateSinceHeight(0)\n-                           .Mine(1000, TestTime(10000) - 1, 0x100).TestDefined().TestStateSinceHeight(0) // One second more and it would be defined\n-                           .Mine(2000, TestTime(10000), 0x100).TestStarted().TestStateSinceHeight(2000) // So that's what happens the next period\n-                           .Mine(2051, TestTime(10010), 0).TestStarted().TestStateSinceHeight(2000) // 51 old blocks\n-                           .Mine(2950, TestTime(10020), 0x100).TestStarted().TestStateSinceHeight(2000) // 899 new blocks\n-                           .Mine(3000, TestTime(20000), 0).TestFailed().TestStateSinceHeight(3000) // 50 old blocks (so 899 out of the past 1000)\n-                           .Mine(4000, TestTime(20010), 0x100).TestFailed().TestStateSinceHeight(3000)\n-\n-        // DEFINED -> STARTED -> FAILED while threshold reached\n-                           .Reset().TestDefined().TestStateSinceHeight(0)\n+        VersionBitsTester().TestDefined().TestStateSinceHeight(0)\n                            .Mine(1, TestTime(1), 0).TestDefined().TestStateSinceHeight(0)\n-                           .Mine(1000, TestTime(10000) - 1, 0x101).TestDefined().TestStateSinceHeight(0) // One second more and it would be defined\n-                           .Mine(2000, TestTime(10000), 0x101).TestStarted().TestStateSinceHeight(2000) // So that's what happens the next period\n-                           .Mine(2999, TestTime(30000), 0x100).TestStarted().TestStateSinceHeight(2000) // 999 new blocks\n-                           .Mine(3000, TestTime(30000), 0x100).TestFailed().TestStateSinceHeight(3000) // 1 new block (so 1000 out of the past 1000 are new)\n-                           .Mine(3999, TestTime(30001), 0).TestFailed().TestStateSinceHeight(3000)\n-                           .Mine(4000, TestTime(30002), 0).TestFailed().TestStateSinceHeight(3000)\n-                           .Mine(14333, TestTime(30003), 0).TestFailed().TestStateSinceHeight(3000)\n-                           .Mine(24000, TestTime(40000), 0).TestFailed().TestStateSinceHeight(3000)\n+                           .Mine(99, TestTime(10000) - 1, 0x100).TestDefined().TestStateSinceHeight(0) // One block more and it would be defined\n+                           .Mine(100, TestTime(10000), 0x100).TestStarted().TestStateSinceHeight(100) // So that's what happens the next period\n+                           .Mine(101, TestTime(10010), 0).TestStarted().TestStateSinceHeight(100) // 1 old block\n+                           .Mine(109, TestTime(10020), 0x100).TestStarted().TestStateSinceHeight(100) // 8 new blocks\n+                           .Mine(110, TestTime(10020), 0).TestStarted().TestStateSinceHeight(100) // 1 old block (so 8 out of the past 10 are new)\n+                           .Mine(151, TestTime(10020), 0).TestStarted().TestStateSinceHeight(100)\n+                           .Mine(200, TestTime(20000), 0).TestFailed().TestStateSinceHeight(200)\n+                           .Mine(300, TestTime(20010), 0x100).TestFailed().TestStateSinceHeight(200)\n \n         // DEFINED -> STARTED -> LOCKEDIN at the last minute -> ACTIVE\n                            .Reset().TestDefined()\n                            .Mine(1, TestTime(1), 0).TestDefined().TestStateSinceHeight(0)\n-                           .Mine(1000, TestTime(10000) - 1, 0x101).TestDefined().TestStateSinceHeight(0) // One second more and it would be defined\n-                           .Mine(2000, TestTime(10000), 0x101).TestStarted().TestStateSinceHeight(2000) // So that's what happens the next period\n-                           .Mine(2050, TestTime(10010), 0x200).TestStarted().TestStateSinceHeight(2000) // 50 old blocks\n-                           .Mine(2950, TestTime(10020), 0x100).TestStarted().TestStateSinceHeight(2000) // 900 new blocks\n-                           .Mine(2999, TestTime(19999), 0x200).TestStarted().TestStateSinceHeight(2000) // 49 old blocks\n-                           .Mine(3000, TestTime(29999), 0x200).TestLockedIn().TestStateSinceHeight(3000) // 1 old block (so 900 out of the past 1000)\n-                           .Mine(3999, TestTime(30001), 0).TestLockedIn().TestStateSinceHeight(3000)\n-                           .Mine(4000, TestTime(30002), 0).TestActive().TestStateSinceHeight(4000)\n-                           .Mine(14333, TestTime(30003), 0).TestActive().TestStateSinceHeight(4000)\n-                           .Mine(24000, TestTime(40000), 0).TestActive().TestStateSinceHeight(4000)\n+                           .Mine(99, TestTime(10000) - 1, 0x101).TestDefined().TestStateSinceHeight(0) // One block more and it would be started\n+                           .Mine(100, TestTime(10000), 0x101).TestStarted().TestStateSinceHeight(100) // So that's what happens the next period\n+                           .Mine(109, TestTime(10020), 0x100).TestStarted().TestStateSinceHeight(100) // 9 new blocks\n+                           .Mine(110, TestTime(29999), 0x200).TestLockedIn().TestStateSinceHeight(110) // 1 old block (so 9 out of the past 10)\n+                           .Mine(119, TestTime(30001), 0).TestLockedIn().TestStateSinceHeight(110)\n+                           .Mine(120, TestTime(30002), 0).TestActive().TestStateSinceHeight(120)\n+                           .Mine(200, TestTime(30003), 0).TestActive().TestStateSinceHeight(120)\n+                           .Mine(300, TestTime(40000), 0).TestActive().TestStateSinceHeight(120)\n \n         // DEFINED multiple periods -> STARTED multiple periods -> FAILED\n                            .Reset().TestDefined().TestStateSinceHeight(0)\n-                           .Mine(999, TestTime(999), 0).TestDefined().TestStateSinceHeight(0)\n-                           .Mine(1000, TestTime(1000), 0).TestDefined().TestStateSinceHeight(0)\n-                           .Mine(2000, TestTime(2000), 0).TestDefined().TestStateSinceHeight(0)\n-                           .Mine(3000, TestTime(10000), 0).TestStarted().TestStateSinceHeight(3000)\n-                           .Mine(4000, TestTime(10000), 0).TestStarted().TestStateSinceHeight(3000)\n-                           .Mine(5000, TestTime(10000), 0).TestStarted().TestStateSinceHeight(3000)\n-                           .Mine(6000, TestTime(20000), 0).TestFailed().TestStateSinceHeight(6000)\n-                           .Mine(7000, TestTime(20000), 0x100).TestFailed().TestStateSinceHeight(6000);\n+                           .Mine(9, TestTime(999), 0).TestDefined().TestStateSinceHeight(0)\n+                           .Mine(10, TestTime(1000), 0).TestDefined().TestStateSinceHeight(0)\n+                           .Mine(20, TestTime(2000), 0).TestDefined().TestStateSinceHeight(0)\n+                           .Mine(100, TestTime(10000), 0).TestStarted().TestStateSinceHeight(100)\n+                           .Mine(103, TestTime(10000), 0).TestStarted().TestStateSinceHeight(100)\n+                           .Mine(105, TestTime(10000), 0).TestStarted().TestStateSinceHeight(100)\n+                           .Mine(200, TestTime(20000), 0).TestFailed().TestStateSinceHeight(200)\n+                           .Mine(300, TestTime(20000), 0x100).TestFailed().TestStateSinceHeight(200);\n     }\n }\n \n@@ -235,6 +210,21 @@ void sanity_check_params(const Consensus::Params& params)\n         // Make sure that no deployment tries to set an invalid bit.\n         BOOST_CHECK_EQUAL(bitmask & ~(uint32_t)VERSIONBITS_TOP_MASK, bitmask);\n \n+        int startheight = params.vDeployments[i].startheight;\n+        int timeoutheight = params.vDeployments[i].timeoutheight;\n+        if (startheight == Consensus::BIP9Deployment::NEVER_ACTIVE) {\n+            BOOST_CHECK_EQUAL(timeoutheight, Consensus::BIP9Deployment::NEVER_ACTIVE);\n+        } else if (timeoutheight == Consensus::BIP9Deployment::NEVER_ACTIVE) {\n+            BOOST_CHECK_EQUAL(startheight, Consensus::BIP9Deployment::NEVER_ACTIVE);\n+        } else if (startheight == Consensus::BIP9Deployment::ALWAYS_ACTIVE) {\n+            BOOST_CHECK_EQUAL(timeoutheight, Consensus::BIP9Deployment::NO_TIMEOUT);\n+        } else {\n+            BOOST_CHECK(startheight > 0);\n+            BOOST_CHECK(timeoutheight > 0);\n+            // Verify that the startheight and timeoutheight are at least one period apart\n+            BOOST_CHECK(params.vDeployments[i].timeoutheight >= params.vDeployments[i].startheight + (int)params.nMinerConfirmationWindow);\n+        }\n+\n         // Verify that the deployment windows of different deployment using the\n         // same bit are disjoint.\n         // This test may need modification at such time as a new deployment\n@@ -244,8 +234,8 @@ void sanity_check_params(const Consensus::Params& params)\n         // overlap.)\n         for (int j=i+1; j<(int) Consensus::MAX_VERSION_BITS_DEPLOYMENTS; j++) {\n             if (VersionBitsMask(params, static_cast<Consensus::DeploymentPos>(j)) == bitmask) {\n-                BOOST_CHECK(params.vDeployments[j].nStartTime > params.vDeployments[i].nTimeout ||\n-                        params.vDeployments[i].nStartTime > params.vDeployments[j].nTimeout);\n+                BOOST_CHECK(params.vDeployments[j].startheight > params.vDeployments[i].timeoutheight ||\n+                        params.vDeployments[i].startheight > params.vDeployments[j].timeoutheight);\n             }\n         }\n     }\n@@ -263,105 +253,72 @@ BOOST_AUTO_TEST_CASE(versionbits_params)\n BOOST_AUTO_TEST_CASE(versionbits_computeblockversion)\n {\n     // Check that ComputeBlockVersion will set the appropriate bit correctly\n-    // on mainnet.\n-    const auto chainParams = CreateChainParams(*m_node.args, CBaseChainParams::MAIN);\n-    const Consensus::Params &mainnetParams = chainParams->GetConsensus();\n+    const auto period = CreateChainParams(*m_node.args, CBaseChainParams::REGTEST)->GetConsensus().nMinerConfirmationWindow;\n+    gArgs.ForceSetArg(\"-vbparams\", strprintf(\"testdummy:@%s:@%s\", period, period * 2));\n+    const auto chainParams = CreateChainParams(*m_node.args, CBaseChainParams::REGTEST);\n+    const Consensus::Params &params = chainParams->GetConsensus();\n \n     // Use the TESTDUMMY deployment for testing purposes.\n-    int64_t bit = mainnetParams.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit;\n-    int64_t nStartTime = mainnetParams.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime;\n-    int64_t nTimeout = mainnetParams.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout;\n+    int64_t bit = params.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit;\n+    int64_t startheight = params.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].startheight;\n+    int64_t timeoutheight = params.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].timeoutheight;\n+    const int64_t nTime = TestTime(startheight);\n \n-    assert(nStartTime < nTimeout);\n+    assert(startheight < timeoutheight);\n \n     // In the first chain, test that the bit is set by CBV until it has failed.\n     // In the second chain, test the bit is set by CBV while STARTED and\n     // LOCKED-IN, and then no longer set while ACTIVE.\n     VersionBitsTester firstChain, secondChain;\n \n-    // Start generating blocks before nStartTime\n-    int64_t nTime = nStartTime - 1;\n-\n-    // Before MedianTimePast of the chain has crossed nStartTime, the bit\n-    // should not be set.\n+    // Start generating blocks before startheight\n+    // Before the chain has reached startheight-1, the bit should not be set.\n     CBlockIndex *lastBlock = nullptr;\n-    lastBlock = firstChain.Mine(mainnetParams.nMinerConfirmationWindow, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-    BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n-\n-    // Mine more blocks (4 less than the adjustment period) at the old time, and check that CBV isn't setting the bit yet.\n-    for (uint32_t i = 1; i < mainnetParams.nMinerConfirmationWindow - 4; i++) {\n-        lastBlock = firstChain.Mine(mainnetParams.nMinerConfirmationWindow + i, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-        // This works because VERSIONBITS_LAST_OLD_BLOCK_VERSION happens\n-        // to be 4, and the bit we're testing happens to be bit 28.\n-        BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n-    }\n-    // Now mine 5 more blocks at the start time -- MTP should not have passed yet, so\n-    // CBV should still not yet set the bit.\n-    nTime = nStartTime;\n-    for (uint32_t i = mainnetParams.nMinerConfirmationWindow - 4; i <= mainnetParams.nMinerConfirmationWindow; i++) {\n-        lastBlock = firstChain.Mine(mainnetParams.nMinerConfirmationWindow + i, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-        BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n-    }\n+    lastBlock = firstChain.Mine(startheight - 1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, params) & (1<<bit), 0);\n \n-    // Advance to the next period and transition to STARTED,\n-    lastBlock = firstChain.Mine(mainnetParams.nMinerConfirmationWindow * 3, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    // Advance to the next block and transition to STARTED,\n+    lastBlock = firstChain.Mine(startheight, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n     // so ComputeBlockVersion should now set the bit,\n-    BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n+    BOOST_CHECK((ComputeBlockVersion(lastBlock, params) & (1<<bit)) != 0);\n     // and should also be using the VERSIONBITS_TOP_BITS.\n-    BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & VERSIONBITS_TOP_MASK, VERSIONBITS_TOP_BITS);\n-\n-    // Check that ComputeBlockVersion will set the bit until nTimeout\n-    nTime += 600;\n-    uint32_t blocksToMine = mainnetParams.nMinerConfirmationWindow * 2; // test blocks for up to 2 time periods\n-    uint32_t nHeight = mainnetParams.nMinerConfirmationWindow * 3;\n-    // These blocks are all before nTimeout is reached.\n-    while (nTime < nTimeout && blocksToMine > 0) {\n-        lastBlock = firstChain.Mine(nHeight+1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-        BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n-        BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & VERSIONBITS_TOP_MASK, VERSIONBITS_TOP_BITS);\n-        blocksToMine--;\n-        nTime += 600;\n-        nHeight += 1;\n-    }\n+    BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, params) & VERSIONBITS_TOP_MASK, VERSIONBITS_TOP_BITS);\n+\n+    // Check that ComputeBlockVersion will set the bit until timeoutheight\n+    // These blocks are all before timeoutheight is reached.\n+    lastBlock = firstChain.Mine(timeoutheight - 1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    BOOST_CHECK((ComputeBlockVersion(lastBlock, params) & (1<<bit)) != 0);\n+    BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, params) & VERSIONBITS_TOP_MASK, VERSIONBITS_TOP_BITS);\n \n-    nTime = nTimeout;\n-    // FAILED is only triggered at the end of a period, so CBV should be setting\n-    // the bit until the period transition.\n-    for (uint32_t i = 0; i < mainnetParams.nMinerConfirmationWindow - 1; i++) {\n-        lastBlock = firstChain.Mine(nHeight+1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-        BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n-        nHeight += 1;\n-    }\n     // The next block should trigger no longer setting the bit.\n-    lastBlock = firstChain.Mine(nHeight+1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-    BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n+    lastBlock = firstChain.Mine(timeoutheight, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, params) & (1<<bit), 0);\n \n     // On a new chain:\n     // verify that the bit will be set after lock-in, and then stop being set\n     // after activation.\n-    nTime = nStartTime;\n \n-    // Mine one period worth of blocks, and check that the bit will be on for the\n+    // Mine up until startheight-1, and check that the bit will be on for the\n     // next period.\n-    lastBlock = secondChain.Mine(mainnetParams.nMinerConfirmationWindow, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-    BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n+    lastBlock = secondChain.Mine(startheight, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    BOOST_CHECK((ComputeBlockVersion(lastBlock, params) & (1<<bit)) != 0);\n \n-    // Mine another period worth of blocks, signaling the new bit.\n-    lastBlock = secondChain.Mine(mainnetParams.nMinerConfirmationWindow * 2, nTime, VERSIONBITS_TOP_BITS | (1<<bit)).Tip();\n+    // Mine another block, signaling the new bit.\n+    lastBlock = secondChain.Mine(startheight + params.nMinerConfirmationWindow, nTime, VERSIONBITS_TOP_BITS | (1<<bit)).Tip();\n     // After one period of setting the bit on each block, it should have locked in.\n     // We keep setting the bit for one more period though, until activation.\n-    BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n+    BOOST_CHECK((ComputeBlockVersion(lastBlock, params) & (1<<bit)) != 0);\n \n     // Now check that we keep mining the block until the end of this period, and\n     // then stop at the beginning of the next period.\n-    lastBlock = secondChain.Mine((mainnetParams.nMinerConfirmationWindow * 3) - 1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-    BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1 << bit)) != 0);\n-    lastBlock = secondChain.Mine(mainnetParams.nMinerConfirmationWindow * 3, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-    BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n+    lastBlock = secondChain.Mine(startheight + (params.nMinerConfirmationWindow * 2) - 1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    BOOST_CHECK((ComputeBlockVersion(lastBlock, params) & (1 << bit)) != 0);\n+    lastBlock = secondChain.Mine(startheight + (params.nMinerConfirmationWindow * 2), nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, params) & (1<<bit), 0);\n \n     // Finally, verify that after a soft fork has activated, CBV no longer uses\n     // VERSIONBITS_LAST_OLD_BLOCK_VERSION.\n-    //BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & VERSIONBITS_TOP_MASK, VERSIONBITS_TOP_BITS);\n+    //BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, params) & VERSIONBITS_TOP_MASK, VERSIONBITS_TOP_BITS);\n }\n \n "
      },
      {
        "sha": "4861253fc3b275b361522a7303cbdbcee12d421f",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d9609fe0dc3d4af175027e4ce95dccb761b41a3/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d9609fe0dc3d4af175027e4ce95dccb761b41a3/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=8d9609fe0dc3d4af175027e4ce95dccb761b41a3",
        "patch": "@@ -1837,8 +1837,8 @@ class WarningBitsConditionChecker : public AbstractThresholdConditionChecker\n public:\n     explicit WarningBitsConditionChecker(int bitIn) : bit(bitIn) {}\n \n-    int64_t BeginTime(const Consensus::Params& params) const override { return 0; }\n-    int64_t EndTime(const Consensus::Params& params) const override { return std::numeric_limits<int64_t>::max(); }\n+    int StartHeight(const Consensus::Params& params) const override { return 0; }\n+    int TimeoutHeight(const Consensus::Params& params) const override { return std::numeric_limits<int>::max(); }\n     int Period(const Consensus::Params& params) const override { return params.nMinerConfirmationWindow; }\n     int Threshold(const Consensus::Params& params) const override { return params.nRuleChangeActivationThreshold; }\n "
      },
      {
        "sha": "d8512f53e04ffc449352f71688775e8371e23138",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 16,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d9609fe0dc3d4af175027e4ce95dccb761b41a3/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d9609fe0dc3d4af175027e4ce95dccb761b41a3/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=8d9609fe0dc3d4af175027e4ce95dccb761b41a3",
        "patch": "@@ -9,11 +9,16 @@ ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex*\n {\n     int nPeriod = Period(params);\n     int nThreshold = Threshold(params);\n-    int64_t nTimeStart = BeginTime(params);\n-    int64_t nTimeTimeout = EndTime(params);\n+    int height_start = StartHeight(params);\n+    int height_timeout = TimeoutHeight(params);\n+\n+    // Check if this deployment is never active.\n+    if (height_start == Consensus::BIP9Deployment::NEVER_ACTIVE && height_timeout == Consensus::BIP9Deployment::NEVER_ACTIVE) {\n+        return ThresholdState::DEFINED;\n+    }\n \n     // Check if this deployment is always active.\n-    if (nTimeStart == Consensus::BIP9Deployment::ALWAYS_ACTIVE) {\n+    if (height_start == Consensus::BIP9Deployment::ALWAYS_ACTIVE) {\n         return ThresholdState::ACTIVE;\n     }\n \n@@ -30,8 +35,10 @@ ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex*\n             cache[pindexPrev] = ThresholdState::DEFINED;\n             break;\n         }\n-        if (pindexPrev->GetMedianTimePast() < nTimeStart) {\n-            // Optimization: don't recompute down further, as we know every earlier block will be before the start time\n+\n+        // We track state by previous-block, so the height we should be comparing is +1\n+        if (pindexPrev->nHeight + 1 < height_start) {\n+            // Optimization: don't recompute down further, as we know every earlier block will be before the start height\n             cache[pindexPrev] = ThresholdState::DEFINED;\n             break;\n         }\n@@ -49,20 +56,17 @@ ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex*\n         pindexPrev = vToCompute.back();\n         vToCompute.pop_back();\n \n+        // We track state by previous-block, so the height we should be comparing is +1\n+        const int64_t height = pindexPrev->nHeight + 1;\n+\n         switch (state) {\n             case ThresholdState::DEFINED: {\n-                if (pindexPrev->GetMedianTimePast() >= nTimeTimeout) {\n-                    stateNext = ThresholdState::FAILED;\n-                } else if (pindexPrev->GetMedianTimePast() >= nTimeStart) {\n+                if (height >= height_start) {\n                     stateNext = ThresholdState::STARTED;\n                 }\n                 break;\n             }\n             case ThresholdState::STARTED: {\n-                if (pindexPrev->GetMedianTimePast() >= nTimeTimeout) {\n-                    stateNext = ThresholdState::FAILED;\n-                    break;\n-                }\n                 // We need to count\n                 const CBlockIndex* pindexCount = pindexPrev;\n                 int count = 0;\n@@ -74,6 +78,8 @@ ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex*\n                 }\n                 if (count >= nThreshold) {\n                     stateNext = ThresholdState::LOCKED_IN;\n+                } else if (height >= height_timeout) {\n+                    stateNext = ThresholdState::FAILED;\n                 }\n                 break;\n             }\n@@ -125,8 +131,8 @@ BIP9Stats AbstractThresholdConditionChecker::GetStateStatisticsFor(const CBlockI\n \n int AbstractThresholdConditionChecker::GetStateSinceHeightFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const\n {\n-    int64_t start_time = BeginTime(params);\n-    if (start_time == Consensus::BIP9Deployment::ALWAYS_ACTIVE) {\n+    int height_start = StartHeight(params);\n+    if (height_start == Consensus::BIP9Deployment::ALWAYS_ACTIVE) {\n         return 0;\n     }\n \n@@ -168,8 +174,8 @@ class VersionBitsConditionChecker : public AbstractThresholdConditionChecker {\n     const Consensus::DeploymentPos id;\n \n protected:\n-    int64_t BeginTime(const Consensus::Params& params) const override { return params.vDeployments[id].nStartTime; }\n-    int64_t EndTime(const Consensus::Params& params) const override { return params.vDeployments[id].nTimeout; }\n+    int StartHeight(const Consensus::Params& params) const override { return params.vDeployments[id].startheight; }\n+    int TimeoutHeight(const Consensus::Params& params) const override { return params.vDeployments[id].timeoutheight; }\n     int Period(const Consensus::Params& params) const override { return params.nMinerConfirmationWindow; }\n     int Threshold(const Consensus::Params& params) const override { return params.vDeployments[id].threshold; }\n "
      },
      {
        "sha": "f5c8018592747848f791acde332c8d316b00b18e",
        "filename": "src/versionbits.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d9609fe0dc3d4af175027e4ce95dccb761b41a3/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d9609fe0dc3d4af175027e4ce95dccb761b41a3/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=8d9609fe0dc3d4af175027e4ce95dccb761b41a3",
        "patch": "@@ -24,10 +24,10 @@ static const int32_t VERSIONBITS_NUM_BITS = 29;\n  */\n enum class ThresholdState {\n     DEFINED,   // First state that each softfork starts out as. The genesis block is by definition in this state for each deployment.\n-    STARTED,   // For blocks past the starttime.\n+    STARTED,   // For blocks past the startheight.\n     LOCKED_IN, // For one retarget period after the first retarget period with STARTED blocks of which at least threshold have the associated bit set in nVersion.\n     ACTIVE,    // For all blocks after the LOCKED_IN retarget period (final state)\n-    FAILED,    // For all blocks once the first retarget period after the timeout time is hit, if LOCKED_IN wasn't already reached (final state)\n+    FAILED,    // For all blocks once the first retarget period after the timeout height is hit, if LOCKED_IN wasn't already reached (final state)\n };\n \n // A map that gives the state for blocks whose height is a multiple of Period().\n@@ -55,8 +55,8 @@ struct BIP9Stats {\n class AbstractThresholdConditionChecker {\n protected:\n     virtual bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const =0;\n-    virtual int64_t BeginTime(const Consensus::Params& params) const =0;\n-    virtual int64_t EndTime(const Consensus::Params& params) const =0;\n+    virtual int StartHeight(const Consensus::Params& params) const =0;\n+    virtual int TimeoutHeight(const Consensus::Params& params) const =0;\n     virtual int Period(const Consensus::Params& params) const =0;\n     virtual int Threshold(const Consensus::Params& params) const =0;\n "
      },
      {
        "sha": "89d14a52f2793573630c6fa92dbc563cc096cb23",
        "filename": "test/functional/feature_taproot.py",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d9609fe0dc3d4af175027e4ce95dccb761b41a3/test/functional/feature_taproot.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d9609fe0dc3d4af175027e4ce95dccb761b41a3/test/functional/feature_taproot.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_taproot.py?ref=8d9609fe0dc3d4af175027e4ce95dccb761b41a3",
        "patch": "@@ -1200,8 +1200,10 @@ def skip_test_if_missing_module(self):\n     def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n-        # Node 0 has Taproot inactive, Node 1 active.\n-        self.extra_args = [[\"-par=1\", \"-vbparams=taproot:1:1\"], [\"-par=1\"]]\n+        self.extra_args = [\n+            [\"-par=1\", \"-vbparams=taproot:@-2:@-2\"], # Node 0 has Taproot never active\n+            [\"-par=1\"] # Node 1 has taproot always active\n+        ]\n \n     def block_submit(self, node, txs, msg, err_msg, cb_pubkey=None, fees=0, sigops_weight=0, witness=False, accept=False):\n "
      },
      {
        "sha": "770d7d53e9ed9e2d2bf8622dd23f1acc12372a63",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d9609fe0dc3d4af175027e4ce95dccb761b41a3/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d9609fe0dc3d4af175027e4ce95dccb761b41a3/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=8d9609fe0dc3d4af175027e4ce95dccb761b41a3",
        "patch": "@@ -139,8 +139,8 @@ def _test_getblockchaininfo(self):\n                 'bip9': {\n                     'status': 'started',\n                     'bit': 28,\n-                    'start_time': 0,\n-                    'timeout': 0x7fffffffffffffff,  # testdummy does not have a timeout so is set to the max int64 value\n+                    'startheight': 144,\n+                    'timeoutheight': 0x7fffffff,  # testdummy does not have a timeout so is set to the max int value\n                     'since': 144,\n                     'statistics': {\n                         'period': 144,\n@@ -156,8 +156,8 @@ def _test_getblockchaininfo(self):\n                 'type': 'bip9',\n                 'bip9': {\n                     'status': 'active',\n-                    'start_time': -1,\n-                    'timeout': 9223372036854775807,\n+                    'startheight': -1,\n+                    'timeoutheight': 0x7fffffff,\n                     'since': 0\n                 },\n                 'height': 0,"
      }
    ]
  },
  {
    "sha": "1133b00ec65b3677669d921ce1b1f3941d7b988c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMTMzYjAwZWM2NWIzNjc3NjY5ZDkyMWNlMWIxZjM5NDFkN2I5ODhj",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-06-26T20:51:07Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-22T18:09:34Z"
      },
      "message": "Rename user facing mentions of BIP 9 to versionbits and/or BIP 8\n\nCo-authored-by: Anthony Towns <aj@erisian.com.au>",
      "tree": {
        "sha": "084be2d998a07bec51ca21f1501c7c8335d878e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/084be2d998a07bec51ca21f1501c7c8335d878e9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1133b00ec65b3677669d921ce1b1f3941d7b988c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1133b00ec65b3677669d921ce1b1f3941d7b988c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1133b00ec65b3677669d921ce1b1f3941d7b988c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1133b00ec65b3677669d921ce1b1f3941d7b988c/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d9609fe0dc3d4af175027e4ce95dccb761b41a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d9609fe0dc3d4af175027e4ce95dccb761b41a3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d9609fe0dc3d4af175027e4ce95dccb761b41a3"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 24,
      "deletions": 16
    },
    "files": [
      {
        "sha": "bd0efb495ed98c12901d32c0d86948d20bc1d476",
        "filename": "doc/bips.md",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1133b00ec65b3677669d921ce1b1f3941d7b988c/doc/bips.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1133b00ec65b3677669d921ce1b1f3941d7b988c/doc/bips.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bips.md?ref=1133b00ec65b3677669d921ce1b1f3941d7b988c",
        "patch": "@@ -1,6 +1,7 @@\n BIPs that are implemented by Bitcoin Core (up-to-date up to **v22.0**):\n \n-* [`BIP 9`](https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki): The changes allowing multiple soft-forks to be deployed in parallel have been implemented since **v0.12.1**  ([PR #7575](https://github.com/bitcoin/bitcoin/pull/7575))\n+* [`BIP 8`](https://github.com/bitcoin/bips/blob/master/bip-0008.mediawiki): The changes for parallel, rapid deployment based on block height miner activation have been implemented since **v0.21.1** ([PR #21392](https://github.com/bitcoin/bitcoin/pull/21392)). The UASF fallback with forced signaling (`LOT=true`) has not yet been implemented. The current implementation is the equivalent of `LOT=false`.\n+* [`BIP 9`](https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki): The changes allowing multiple soft-forks to be deployed in parallel have been implemented since **v0.12.1**  ([PR #7575](https://github.com/bitcoin/bitcoin/pull/7575)) Support was removed in **v0.21.1** ([PR #21392](https://github.com/bitcoin/bitcoin/pull/21392)).\n * [`BIP 11`](https://github.com/bitcoin/bips/blob/master/bip-0011.mediawiki): Multisig outputs are standard since **v0.6.0** ([PR #669](https://github.com/bitcoin/bitcoin/pull/669)).\n * [`BIP 13`](https://github.com/bitcoin/bips/blob/master/bip-0013.mediawiki): The address format for P2SH addresses has been implemented since **v0.6.0** ([PR #669](https://github.com/bitcoin/bitcoin/pull/669)).\n * [`BIP 14`](https://github.com/bitcoin/bips/blob/master/bip-0014.mediawiki): The subversion string is being used as User Agent since **v0.6.0** ([PR #669](https://github.com/bitcoin/bitcoin/pull/669))."
      },
      {
        "sha": "76f83102916471042974cde355ddb5ffbe1f402a",
        "filename": "doc/release-notes-21392.md",
        "status": "added",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1133b00ec65b3677669d921ce1b1f3941d7b988c/doc/release-notes-21392.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1133b00ec65b3677669d921ce1b1f3941d7b988c/doc/release-notes-21392.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-21392.md?ref=1133b00ec65b3677669d921ce1b1f3941d7b988c",
        "patch": "@@ -0,0 +1,7 @@\n+Low-level changes\n+=================\n+\n+RPC\n+---\n+\n+* BIP 9 has been replaced with a partial implementation of BIP 8. This change is reflected in `getblockchaininfo` where references to BIP 9 have been replaced with references to BIP 8."
      },
      {
        "sha": "f5f6959a4526e06bd7ef83ffcc646a802a1308e6",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1133b00ec65b3677669d921ce1b1f3941d7b988c/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1133b00ec65b3677669d921ce1b1f3941d7b988c/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=1133b00ec65b3677669d921ce1b1f3941d7b988c",
        "patch": "@@ -1259,8 +1259,8 @@ static void BIP9SoftForkDescPushBack(UniValue& softforks, const std::string &nam\n     }\n \n     UniValue rv(UniValue::VOBJ);\n-    rv.pushKV(\"type\", \"bip9\");\n-    rv.pushKV(\"bip9\", bip9);\n+    rv.pushKV(\"type\", \"bip8\");\n+    rv.pushKV(\"bip8\", bip9);\n     if (ThresholdState::ACTIVE == thresholdState) {\n         rv.pushKV(\"height\", since_height);\n     }\n@@ -1295,24 +1295,24 @@ RPCHelpMan getblockchaininfo()\n                         {\n                             {RPCResult::Type::OBJ, \"xxxx\", \"name of the softfork\",\n                             {\n-                                {RPCResult::Type::STR, \"type\", \"one of \\\"buried\\\", \\\"bip9\\\"\"},\n-                                {RPCResult::Type::OBJ, \"bip9\", \"status of bip9 softforks (only for \\\"bip9\\\" type)\",\n+                                {RPCResult::Type::STR, \"type\", \"one of \\\"buried\\\", \\\"bip8\\\"\"},\n+                                {RPCResult::Type::OBJ, \"bip8\", \"status of BIP 8 softforks (only for \\\"bip8\\\" type)\",\n                                 {\n                                     {RPCResult::Type::STR, \"status\", \"one of \\\"defined\\\", \\\"started\\\", \\\"locked_in\\\", \\\"active\\\", \\\"failed\\\"\"},\n                                     {RPCResult::Type::NUM, \"bit\", \"the bit (0-28) in the block version field used to signal this softfork (only for \\\"started\\\" status)\"},\n                                     {RPCResult::Type::NUM, \"startheight\", \"the minimum height of a block at which the bit gains its meaning\"},\n                                     {RPCResult::Type::NUM, \"timeoutheight\", \"the height of a block at which the deployment is considered failed if not yet locked in\"},\n                                     {RPCResult::Type::NUM, \"since\", \"height of the first block to which the status applies\"},\n-                                    {RPCResult::Type::OBJ, \"statistics\", \"numeric statistics about BIP9 signalling for a softfork (only for \\\"started\\\" status)\",\n+                                    {RPCResult::Type::OBJ, \"statistics\", \"numeric statistics about BIP8 signalling for a softfork (only for \\\"started\\\" status)\",\n                                     {\n-                                        {RPCResult::Type::NUM, \"period\", \"the length in blocks of the BIP9 signalling period\"},\n+                                        {RPCResult::Type::NUM, \"period\", \"the length in blocks of the BIP8 signalling period\"},\n                                         {RPCResult::Type::NUM, \"threshold\", \"the number of blocks with the version bit set required to activate the feature\"},\n                                         {RPCResult::Type::NUM, \"elapsed\", \"the number of blocks elapsed since the beginning of the current period\"},\n                                         {RPCResult::Type::NUM, \"count\", \"the number of blocks with the version bit set in the current period\"},\n                                         {RPCResult::Type::BOOL, \"possible\", \"returns false if there are not enough blocks left in this period to pass activation threshold\"},\n                                     }},\n                                 }},\n-                                {RPCResult::Type::NUM, \"height\", \"height of the first block which the rules are or will be enforced (only for \\\"buried\\\" type, or \\\"bip9\\\" type with \\\"active\\\" status)\"},\n+                                {RPCResult::Type::NUM, \"height\", \"height of the first block which the rules are or will be enforced (only for \\\"buried\\\" type, or \\\"bip8\\\" type with \\\"active\\\" status)\"},\n                                 {RPCResult::Type::BOOL, \"active\", \"true if the rules are enforced for the mempool and the next block\"},\n                             }},\n                         }},"
      },
      {
        "sha": "78e44bb606cc60c50233e1c4d308144865eccfb4",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1133b00ec65b3677669d921ce1b1f3941d7b988c/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1133b00ec65b3677669d921ce1b1f3941d7b988c/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=1133b00ec65b3677669d921ce1b1f3941d7b988c",
        "patch": "@@ -507,10 +507,10 @@ static RPCHelpMan getblocktemplate()\n     return RPCHelpMan{\"getblocktemplate\",\n         \"\\nIf the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.\\n\"\n         \"It returns data needed to construct a block to work on.\\n\"\n-        \"For full specification, see BIPs 22, 23, 9, and 145:\\n\"\n+        \"For full specification, see BIPs 22, 23, 8, and 145:\\n\"\n         \"    https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki\\n\"\n         \"    https://github.com/bitcoin/bips/blob/master/bip-0023.mediawiki\\n\"\n-        \"    https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes\\n\"\n+        \"    https://github.com/bitcoin/bips/blob/master/bip-0008.mediawiki#getblocktemplate_changes\\n\"\n         \"    https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki\\n\",\n         {\n             {\"template_request\", RPCArg::Type::OBJ, \"{}\", \"Format of the template\",\n@@ -536,9 +536,9 @@ static RPCHelpMan getblocktemplate()\n                 {RPCResult::Type::NUM, \"version\", \"The preferred block version\"},\n                 {RPCResult::Type::ARR, \"rules\", \"specific block rules that are to be enforced\",\n                 {\n-                    {RPCResult::Type::STR, \"\", \"name of a rule the client must understand to some extent; see BIP 9 for format\"},\n+                    {RPCResult::Type::STR, \"\", \"name of a rule the client must understand to some extent; see BIP 8 for format\"},\n                 }},\n-                {RPCResult::Type::OBJ_DYN, \"vbavailable\", \"set of pending, supported versionbit (BIP 9) softfork deployments\",\n+                {RPCResult::Type::OBJ_DYN, \"vbavailable\", \"set of pending, supported versionbit softfork deployments\",\n                 {\n                     {RPCResult::Type::NUM, \"rulename\", \"identifies the bit number as indicating acceptance and readiness for the named softfork rule\"},\n                 }},"
      },
      {
        "sha": "2f27295d9fe9b59eae1717d3b6f04b4bbf027007",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1133b00ec65b3677669d921ce1b1f3941d7b988c/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1133b00ec65b3677669d921ce1b1f3941d7b988c/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=1133b00ec65b3677669d921ce1b1f3941d7b988c",
        "patch": "@@ -135,8 +135,8 @@ def _test_getblockchaininfo(self):\n             'csv': {'type': 'buried', 'active': False, 'height': 432},\n             'segwit': {'type': 'buried', 'active': True, 'height': 0},\n             'testdummy': {\n-                'type': 'bip9',\n-                'bip9': {\n+                'type': 'bip8',\n+                'bip8': {\n                     'status': 'started',\n                     'bit': 28,\n                     'startheight': 144,\n@@ -153,8 +153,8 @@ def _test_getblockchaininfo(self):\n                 'active': False\n             },\n             'taproot': {\n-                'type': 'bip9',\n-                'bip9': {\n+                'type': 'bip8',\n+                'bip8': {\n                     'status': 'active',\n                     'startheight': -1,\n                     'timeoutheight': 0x7fffffff,"
      }
    ]
  },
  {
    "sha": "4af99e5681593274f14f1c0fd53dd9e85645b0dd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YWY5OWU1NjgxNTkzMjc0ZjE0ZjFjMGZkNTNkZDllODU2NDViMGRk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-08T20:02:01Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-22T18:09:38Z"
      },
      "message": "Add minimum activation height to BIP9Deployments",
      "tree": {
        "sha": "87ecbee5443e32a882ad9481d184efbf70a8654e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/87ecbee5443e32a882ad9481d184efbf70a8654e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4af99e5681593274f14f1c0fd53dd9e85645b0dd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4af99e5681593274f14f1c0fd53dd9e85645b0dd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4af99e5681593274f14f1c0fd53dd9e85645b0dd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4af99e5681593274f14f1c0fd53dd9e85645b0dd/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1133b00ec65b3677669d921ce1b1f3941d7b988c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1133b00ec65b3677669d921ce1b1f3941d7b988c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1133b00ec65b3677669d921ce1b1f3941d7b988c"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 27,
      "deletions": 7
    },
    "files": [
      {
        "sha": "8db77022f9e4eed4752d8995b9e9129381f07d74",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4af99e5681593274f14f1c0fd53dd9e85645b0dd/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4af99e5681593274f14f1c0fd53dd9e85645b0dd/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=4af99e5681593274f14f1c0fd53dd9e85645b0dd",
        "patch": "@@ -31,6 +31,10 @@ struct BIP9Deployment {\n     int timeoutheight;\n     /** Threshold for activation */\n     int threshold;\n+    /**\n+     * If lock in occurs, delay activation until at least this block height. Activations only occur on retargets.\n+     */\n+    int64_t m_min_activation_height{0};\n \n     /** Constant for timeoutheight very far in the future. */\n     static constexpr int NO_TIMEOUT = std::numeric_limits<int>::max();"
      },
      {
        "sha": "42226f53606ebf96a691c2a3f839f1b8c554a668",
        "filename": "src/test/fuzz/versionbits.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 5,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4af99e5681593274f14f1c0fd53dd9e85645b0dd/src/test/fuzz/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4af99e5681593274f14f1c0fd53dd9e85645b0dd/src/test/fuzz/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/versionbits.cpp?ref=4af99e5681593274f14f1c0fd53dd9e85645b0dd",
        "patch": "@@ -27,12 +27,13 @@ class TestConditionChecker : public AbstractThresholdConditionChecker\n public:\n     const int m_begin = 0;\n     const int m_end = 0;\n+    const int m_min_activation = 0;\n     const int m_period = 0;\n     const int m_threshold = 0;\n     const int m_bit = 0;\n \n-    TestConditionChecker(int begin, int end, int period, int threshold, int bit)\n-        : m_begin{begin}, m_end{end}, m_period{period}, m_threshold{threshold}, m_bit{bit}\n+    TestConditionChecker(int begin, int end, int min_act, int period, int threshold, int bit)\n+        : m_begin{begin}, m_end{end}, m_min_activation(min_act), m_period{period}, m_threshold{threshold}, m_bit{bit}\n     {\n         assert(m_period > 0);\n         assert(0 <= m_threshold && m_threshold <= m_period);\n@@ -42,6 +43,7 @@ class TestConditionChecker : public AbstractThresholdConditionChecker\n     bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const override { return Condition(pindex->nVersion); }\n     int StartHeight(const Consensus::Params& params) const override { return m_begin; }\n     int TimeoutHeight(const Consensus::Params& params) const override { return m_end; }\n+    int MinActivationHeight(const Consensus::Params& params) const override { return m_min_activation; }\n     int Period(const Consensus::Params& params) const override { return m_period; }\n     int Threshold(const Consensus::Params& params) const override { return m_threshold; }\n \n@@ -126,10 +128,12 @@ FUZZ_TARGET_INIT(versionbits, initialize)\n     bool never_active_test = false;\n     int startheight;\n     int timeoutheight;\n+    int min_activation = 0;\n     if (fuzzed_data_provider.ConsumeBool()) {\n         // pick the timestamp to switch based on a block\n         startheight = fuzzed_data_provider.ConsumeIntegralInRange<int>(0, period * (max_periods - 2));\n         timeoutheight = fuzzed_data_provider.ConsumeIntegralInRange<int>(0, period * (max_periods - 2));\n+        min_activation = fuzzed_data_provider.ConsumeIntegralInRange<int>(0, period * (max_periods - 1));\n     } else {\n         if (fuzzed_data_provider.ConsumeBool()) {\n             startheight = Consensus::BIP9Deployment::ALWAYS_ACTIVE;\n@@ -142,7 +146,7 @@ FUZZ_TARGET_INIT(versionbits, initialize)\n         }\n     }\n \n-    TestConditionChecker checker(startheight, timeoutheight, period, threshold, bit);\n+    TestConditionChecker checker(startheight, timeoutheight, min_activation, period, threshold, bit);\n \n     // Early exit if the versions don't signal sensibly for the deployment\n     if (!checker.Condition(ver_signal)) return;\n@@ -279,10 +283,15 @@ FUZZ_TARGET_INIT(versionbits, initialize)\n         }\n         break;\n     case ThresholdState::LOCKED_IN:\n-        assert(exp_state == ThresholdState::STARTED);\n-        assert(blocks_sig >= threshold);\n+        if (exp_state == ThresholdState::LOCKED_IN) {\n+            assert(height < checker.m_min_activation);\n+        } else {\n+            assert(exp_state == ThresholdState::STARTED);\n+            assert(blocks_sig >= threshold);\n+        }\n         break;\n     case ThresholdState::ACTIVE:\n+        assert(always_active_test || height >= checker.m_min_activation);\n         assert(exp_state == ThresholdState::ACTIVE || exp_state == ThresholdState::LOCKED_IN);\n         break;\n     case ThresholdState::FAILED:"
      },
      {
        "sha": "98b87149c7fd0e824d56cf00faf813d5bbd59b62",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4af99e5681593274f14f1c0fd53dd9e85645b0dd/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4af99e5681593274f14f1c0fd53dd9e85645b0dd/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=4af99e5681593274f14f1c0fd53dd9e85645b0dd",
        "patch": "@@ -38,6 +38,7 @@ class TestConditionChecker : public AbstractThresholdConditionChecker\n     int TimeoutHeight(const Consensus::Params& params) const override { return 200; }\n     int Period(const Consensus::Params& params) const override { return 10; }\n     int Threshold(const Consensus::Params& params) const override { return 9; }\n+    int MinActivationHeight(const Consensus::Params& params) const override { return 0; }\n     bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const override { return (pindex->nVersion & 0x100); }\n \n     ThresholdState GetStateFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateFor(pindexPrev, paramsDummy, cache); }"
      },
      {
        "sha": "f34024cde3554f720ad3c93544a30cc9d1fa7120",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4af99e5681593274f14f1c0fd53dd9e85645b0dd/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4af99e5681593274f14f1c0fd53dd9e85645b0dd/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=4af99e5681593274f14f1c0fd53dd9e85645b0dd",
        "patch": "@@ -1841,6 +1841,7 @@ class WarningBitsConditionChecker : public AbstractThresholdConditionChecker\n     int TimeoutHeight(const Consensus::Params& params) const override { return std::numeric_limits<int>::max(); }\n     int Period(const Consensus::Params& params) const override { return params.nMinerConfirmationWindow; }\n     int Threshold(const Consensus::Params& params) const override { return params.nRuleChangeActivationThreshold; }\n+    int MinActivationHeight(const Consensus::Params& params) const override { return 0; }\n \n     bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const override\n     {"
      },
      {
        "sha": "fa2269ff5c15b098b3c3b6c8f9cdc9dd73ff0158",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4af99e5681593274f14f1c0fd53dd9e85645b0dd/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4af99e5681593274f14f1c0fd53dd9e85645b0dd/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=4af99e5681593274f14f1c0fd53dd9e85645b0dd",
        "patch": "@@ -11,6 +11,7 @@ ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex*\n     int nThreshold = Threshold(params);\n     int height_start = StartHeight(params);\n     int height_timeout = TimeoutHeight(params);\n+    int height_active_min = MinActivationHeight(params);\n \n     // Check if this deployment is never active.\n     if (height_start == Consensus::BIP9Deployment::NEVER_ACTIVE && height_timeout == Consensus::BIP9Deployment::NEVER_ACTIVE) {\n@@ -84,8 +85,10 @@ ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex*\n                 break;\n             }\n             case ThresholdState::LOCKED_IN: {\n-                // Always progresses into ACTIVE.\n-                stateNext = ThresholdState::ACTIVE;\n+                // Only progress into ACTIVE if minimum activation height has been reached\n+                if (height >= height_active_min) {\n+                    stateNext = ThresholdState::ACTIVE;\n+                }\n                 break;\n             }\n             case ThresholdState::FAILED:\n@@ -178,6 +181,7 @@ class VersionBitsConditionChecker : public AbstractThresholdConditionChecker {\n     int TimeoutHeight(const Consensus::Params& params) const override { return params.vDeployments[id].timeoutheight; }\n     int Period(const Consensus::Params& params) const override { return params.nMinerConfirmationWindow; }\n     int Threshold(const Consensus::Params& params) const override { return params.vDeployments[id].threshold; }\n+    int MinActivationHeight(const Consensus::Params& params) const override { return params.vDeployments[id].m_min_activation_height; }\n \n     bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const override\n     {"
      },
      {
        "sha": "b4f26b0a0ed3e4d67d6f0a19af84c4b3f16945d6",
        "filename": "src/versionbits.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4af99e5681593274f14f1c0fd53dd9e85645b0dd/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4af99e5681593274f14f1c0fd53dd9e85645b0dd/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=4af99e5681593274f14f1c0fd53dd9e85645b0dd",
        "patch": "@@ -59,6 +59,7 @@ class AbstractThresholdConditionChecker {\n     virtual int TimeoutHeight(const Consensus::Params& params) const =0;\n     virtual int Period(const Consensus::Params& params) const =0;\n     virtual int Threshold(const Consensus::Params& params) const =0;\n+    virtual int MinActivationHeight(const Consensus::Params& params) const =0;\n \n public:\n     /** Returns the numerical statistics of an in-progress BIP9 softfork in the current period */"
      }
    ]
  },
  {
    "sha": "ca39ed680c3682134c6fedf399cb42e00206771c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYTM5ZWQ2ODBjMzY4MjEzNGM2ZmVkZjM5OWNiNDJlMDAyMDY3NzFj",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-03-06T08:38:44Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-22T18:09:41Z"
      },
      "message": "tests: test versionbits delayed activation",
      "tree": {
        "sha": "e590cf6fb4fb73411642dafeacec27a038e765ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e590cf6fb4fb73411642dafeacec27a038e765ac"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca39ed680c3682134c6fedf399cb42e00206771c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca39ed680c3682134c6fedf399cb42e00206771c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ca39ed680c3682134c6fedf399cb42e00206771c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca39ed680c3682134c6fedf399cb42e00206771c/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4af99e5681593274f14f1c0fd53dd9e85645b0dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4af99e5681593274f14f1c0fd53dd9e85645b0dd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4af99e5681593274f14f1c0fd53dd9e85645b0dd"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 43,
      "deletions": 8
    },
    "files": [
      {
        "sha": "2630549c7903466929807aa19db04d3534a03da7",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 8,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca39ed680c3682134c6fedf399cb42e00206771c/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca39ed680c3682134c6fedf399cb42e00206771c/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=ca39ed680c3682134c6fedf399cb42e00206771c",
        "patch": "@@ -45,6 +45,12 @@ class TestConditionChecker : public AbstractThresholdConditionChecker\n     int GetStateSinceHeightFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateSinceHeightFor(pindexPrev, paramsDummy, cache); }\n };\n \n+class TestDelayedActivationConditionChecker : public TestConditionChecker\n+{\n+public:\n+    int MinActivationHeight(const Consensus::Params& params) const override { return 250; }\n+};\n+\n class TestAlwaysActiveConditionChecker : public TestConditionChecker\n {\n public:\n@@ -69,6 +75,8 @@ class VersionBitsTester\n     // The first one performs all checks, the second only 50%, the third only 25%, etc...\n     // This is to test whether lack of cached information leads to the same results.\n     TestConditionChecker checker[CHECKERS];\n+    // Another 6 that assume delayed activation\n+    TestDelayedActivationConditionChecker checker_delayed[CHECKERS];\n     // Another 6 that assume always active activation\n     TestAlwaysActiveConditionChecker checker_always[CHECKERS];\n     // Another 6 that assume never active activation\n@@ -78,14 +86,16 @@ class VersionBitsTester\n     int num;\n \n public:\n-    VersionBitsTester() : num(0) {}\n+    VersionBitsTester() : num(1000) {}\n \n     VersionBitsTester& Reset() {\n+        num = num - (num % 1000) + 1000;\n         for (unsigned int i = 0; i < vpblock.size(); i++) {\n             delete vpblock[i];\n         }\n         for (unsigned int  i = 0; i < CHECKERS; i++) {\n             checker[i] = TestConditionChecker();\n+            checker_delayed[i] = TestDelayedActivationConditionChecker();\n             checker_always[i] = TestAlwaysActiveConditionChecker();\n             checker_never[i] = TestNeverActiveConditionChecker();\n         }\n@@ -110,11 +120,19 @@ class VersionBitsTester\n         return *this;\n     }\n \n-    VersionBitsTester& TestStateSinceHeight(int height) {\n+    VersionBitsTester& TestStateSinceHeight(int height)\n+    {\n+        return TestStateSinceHeight(height, height);\n+    }\n+\n+    VersionBitsTester& TestStateSinceHeight(int height, int height_delayed)\n+    {\n+        const CBlockIndex* pindex = vpblock.empty() ? nullptr : vpblock.back();\n         for (int i = 0; i < CHECKERS; i++) {\n             if (InsecureRandBits(i) == 0) {\n-                BOOST_CHECK_MESSAGE(checker[i].GetStateSinceHeightFor(vpblock.empty() ? nullptr : vpblock.back()) == height, strprintf(\"Test %i for StateSinceHeight\", num));\n-                BOOST_CHECK_MESSAGE(checker_always[i].GetStateSinceHeightFor(vpblock.empty() ? nullptr : vpblock.back()) == 0, strprintf(\"Test %i for StateSinceHeight (always active)\", num));\n+                BOOST_CHECK_MESSAGE(checker[i].GetStateSinceHeightFor(pindex) == height, strprintf(\"Test %i for StateSinceHeight\", num));\n+                BOOST_CHECK_MESSAGE(checker_delayed[i].GetStateSinceHeightFor(pindex) == height_delayed, strprintf(\"Test %i for StateSinceHeight (delayed)\", num));\n+                BOOST_CHECK_MESSAGE(checker_always[i].GetStateSinceHeightFor(pindex) == 0, strprintf(\"Test %i for StateSinceHeight (always active)\", num));\n \n                 // never active may go from DEFINED -> FAILED at the first period\n                 const auto never_height = checker_never[i].GetStateSinceHeightFor(vpblock.empty() ? nullptr : vpblock.back());\n@@ -125,17 +143,30 @@ class VersionBitsTester\n         return *this;\n     }\n \n-    VersionBitsTester& TestState(ThresholdState exp) {\n+    VersionBitsTester& TestState(ThresholdState exp)\n+    {\n+        return TestState(exp, exp);\n+    }\n+\n+    VersionBitsTester& TestState(ThresholdState exp, ThresholdState exp_delayed)\n+    {\n+        if (exp != exp_delayed) {\n+            // only expected differences are that delayed stays in locked_in longer\n+            BOOST_CHECK_EQUAL(exp, ThresholdState::ACTIVE);\n+            BOOST_CHECK_EQUAL(exp_delayed, ThresholdState::LOCKED_IN);\n+        }\n         for (int i = 0; i < CHECKERS; i++) {\n             if (InsecureRandBits(i) == 0) {\n                 const CBlockIndex* pindex = vpblock.empty() ? nullptr : vpblock.back();\n                 ThresholdState got = checker[i].GetStateFor(pindex);\n+                ThresholdState got_delayed = checker_delayed[i].GetStateFor(pindex);\n                 ThresholdState got_always = checker_always[i].GetStateFor(pindex);\n                 ThresholdState got_never = checker_never[i].GetStateFor(pindex);\n                 // nHeight of the next block. If vpblock is empty, the next (ie first)\n                 // block should be the genesis block with nHeight == 0.\n                 int height = pindex == nullptr ? 0 : pindex->nHeight + 1;\n                 BOOST_CHECK_MESSAGE(got == exp, strprintf(\"Test %i for %s height %d (got %s)\", num, StateName(exp), height, StateName(got)));\n+                BOOST_CHECK_MESSAGE(got_delayed == exp_delayed, strprintf(\"Test %i for %s height %d (got %s; delayed case)\", num, StateName(exp_delayed), height, StateName(got_delayed)));\n                 BOOST_CHECK_MESSAGE(got_always == ThresholdState::ACTIVE, strprintf(\"Test %i for ACTIVE height %d (got %s; always active case)\", num, height, StateName(got_always)));\n                 BOOST_CHECK_MESSAGE(got_never == ThresholdState::DEFINED|| got_never == ThresholdState::FAILED, strprintf(\"Test %i for DEFINED/FAILED height %d (got %s; never active case)\", num, height, StateName(got_never)));\n             }\n@@ -150,6 +181,9 @@ class VersionBitsTester\n     VersionBitsTester& TestActive() { return TestState(ThresholdState::ACTIVE); }\n     VersionBitsTester& TestFailed() { return TestState(ThresholdState::FAILED); }\n \n+    // non-delayed should be active; delayed should still be locked in\n+    VersionBitsTester& TestActiveDelayed() { return TestState(ThresholdState::ACTIVE, ThresholdState::LOCKED_IN); }\n+\n     CBlockIndex * Tip() { return vpblock.size() ? vpblock.back() : nullptr; }\n };\n \n@@ -178,9 +212,10 @@ BOOST_AUTO_TEST_CASE(versionbits_test)\n                            .Mine(109, TestTime(10020), 0x100).TestStarted().TestStateSinceHeight(100) // 9 new blocks\n                            .Mine(110, TestTime(29999), 0x200).TestLockedIn().TestStateSinceHeight(110) // 1 old block (so 9 out of the past 10)\n                            .Mine(119, TestTime(30001), 0).TestLockedIn().TestStateSinceHeight(110)\n-                           .Mine(120, TestTime(30002), 0).TestActive().TestStateSinceHeight(120)\n-                           .Mine(200, TestTime(30003), 0).TestActive().TestStateSinceHeight(120)\n-                           .Mine(300, TestTime(40000), 0).TestActive().TestStateSinceHeight(120)\n+                           .Mine(120, TestTime(30002), 0).TestActiveDelayed().TestStateSinceHeight(120, 110) // Delayed will not become active until height 250\n+                           .Mine(200, TestTime(30003), 0).TestActiveDelayed().TestStateSinceHeight(120, 110)\n+                           .Mine(250, TestTime(30004), 0).TestActive().TestStateSinceHeight(120, 250)\n+                           .Mine(300, TestTime(40000), 0).TestActive().TestStateSinceHeight(120, 250)\n \n         // DEFINED multiple periods -> STARTED multiple periods -> FAILED\n                            .Reset().TestDefined().TestStateSinceHeight(0)"
      }
    ]
  },
  {
    "sha": "d065f3df6acb96f2e1037e339998e72a2b1c6f4f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMDY1ZjNkZjZhY2I5NmYyZTEwMzdlMzM5OTk4ZTcyYTJiMWM2ZjRm",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-09T05:48:26Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-22T18:09:45Z"
      },
      "message": "Clarify and reduce nRuleChangeActivationThreshold\n\nAs thresholds are now parameterized, nRuleChangeActivationThreshold is\nno longer the threshold used for activating new rule changes. Instead it\nis now only used to warn if there is an unkonwn versionbits deployment.\nTo make this clear, rename to m_vbits_min_threshold and update the\ncomment describing it.\n\nAdditionally, because this is just a minimum used for a warning, reduce\nthe threshold to 75% so that future soft forks which may have thresholds\nlower than 95% will still have warnings.",
      "tree": {
        "sha": "cfbec38491eaea61abfd18ccef7a6442563202bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cfbec38491eaea61abfd18ccef7a6442563202bb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d065f3df6acb96f2e1037e339998e72a2b1c6f4f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d065f3df6acb96f2e1037e339998e72a2b1c6f4f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d065f3df6acb96f2e1037e339998e72a2b1c6f4f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d065f3df6acb96f2e1037e339998e72a2b1c6f4f/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ca39ed680c3682134c6fedf399cb42e00206771c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca39ed680c3682134c6fedf399cb42e00206771c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ca39ed680c3682134c6fedf399cb42e00206771c"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 9,
      "deletions": 11
    },
    "files": [
      {
        "sha": "a4f3cde9365f1a669f08fa2ccf1bd61bec46126a",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d065f3df6acb96f2e1037e339998e72a2b1c6f4f/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d065f3df6acb96f2e1037e339998e72a2b1c6f4f/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=d065f3df6acb96f2e1037e339998e72a2b1c6f4f",
        "patch": "@@ -78,7 +78,7 @@ class CMainParams : public CChainParams {\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = false;\n         consensus.fPowNoRetargeting = false;\n-        consensus.nRuleChangeActivationThreshold = 1916; // 95% of 2016\n+        consensus.m_vbits_min_threshold = 1512; // 75%\n         consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].startheight = Consensus::BIP9Deployment::NEVER_ACTIVE;\n@@ -197,7 +197,7 @@ class CTestNetParams : public CChainParams {\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = true;\n         consensus.fPowNoRetargeting = false;\n-        consensus.nRuleChangeActivationThreshold = 1512; // 75% for testchains\n+        consensus.m_vbits_min_threshold = 1512; // 75%\n         consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].startheight = Consensus::BIP9Deployment::NEVER_ACTIVE;\n@@ -332,7 +332,7 @@ class SigNetParams : public CChainParams {\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = false;\n         consensus.fPowNoRetargeting = false;\n-        consensus.nRuleChangeActivationThreshold = 1916; // 95% of 2016\n+        consensus.m_vbits_min_threshold = 1512; // 75%\n         consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n         consensus.MinBIP9WarningHeight = 0;\n         consensus.powLimit = uint256S(\"00000377ae000000000000000000000000000000000000000000000000000000\");\n@@ -401,7 +401,7 @@ class CRegTestParams : public CChainParams {\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = true;\n         consensus.fPowNoRetargeting = true;\n-        consensus.nRuleChangeActivationThreshold = 108; // 75% for testchains\n+        consensus.m_vbits_min_threshold = 108; // 75%\n         consensus.nMinerConfirmationWindow = 144; // Faster than normal for regtest (144 instead of 2016)\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].startheight = 144;"
      },
      {
        "sha": "2bfa4d3d34f56c4acceafacf921d0dbb515b460a",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d065f3df6acb96f2e1037e339998e72a2b1c6f4f/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d065f3df6acb96f2e1037e339998e72a2b1c6f4f/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=d065f3df6acb96f2e1037e339998e72a2b1c6f4f",
        "patch": "@@ -73,12 +73,10 @@ struct Params {\n     /** Don't warn about unknown BIP 9 activations below this height.\n      * This prevents us from warning about the CSV and segwit activations. */\n     int MinBIP9WarningHeight;\n-    /**\n-     * Minimum blocks including miner confirmation of the total of 2016 blocks in a retargeting period,\n-     * (nPowTargetTimespan / nPowTargetSpacing) which is also used for BIP9 deployments.\n-     * Examples: 1916 for 95%, 1512 for testchains.\n+    /** Minimum blocks expected for a versionbits deployment threshold.\n+     * Used to determine whether an unknown versionbits deployment has occurred.\n      */\n-    uint32_t nRuleChangeActivationThreshold;\n+    uint32_t m_vbits_min_threshold;\n     uint32_t nMinerConfirmationWindow;\n     BIP9Deployment vDeployments[MAX_VERSION_BITS_DEPLOYMENTS];\n     /** Proof of work parameters */"
      },
      {
        "sha": "ea926322323192d9f5c982a793bb144be724636f",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d065f3df6acb96f2e1037e339998e72a2b1c6f4f/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d065f3df6acb96f2e1037e339998e72a2b1c6f4f/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=d065f3df6acb96f2e1037e339998e72a2b1c6f4f",
        "patch": "@@ -239,7 +239,7 @@ void sanity_check_params(const Consensus::Params& params)\n         // used for warning for unknown activations\n         int threshold = params.vDeployments[i].threshold;\n         BOOST_CHECK(threshold > 0);\n-        BOOST_CHECK((uint32_t)threshold >= params.nRuleChangeActivationThreshold);\n+        BOOST_CHECK((uint32_t)threshold >= params.m_vbits_min_threshold);\n         BOOST_CHECK((uint32_t)threshold <= params.nMinerConfirmationWindow);\n \n         uint32_t bitmask = VersionBitsMask(params, static_cast<Consensus::DeploymentPos>(i));"
      },
      {
        "sha": "ad666862bc57413cb820f63184056449d419298d",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d065f3df6acb96f2e1037e339998e72a2b1c6f4f/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d065f3df6acb96f2e1037e339998e72a2b1c6f4f/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=d065f3df6acb96f2e1037e339998e72a2b1c6f4f",
        "patch": "@@ -1840,7 +1840,7 @@ class WarningBitsConditionChecker : public AbstractThresholdConditionChecker\n     int StartHeight(const Consensus::Params& params) const override { return 0; }\n     int TimeoutHeight(const Consensus::Params& params) const override { return std::numeric_limits<int>::max(); }\n     int Period(const Consensus::Params& params) const override { return params.nMinerConfirmationWindow; }\n-    int Threshold(const Consensus::Params& params) const override { return params.nRuleChangeActivationThreshold; }\n+    int Threshold(const Consensus::Params& params) const override { return params.m_vbits_min_threshold; }\n     int MinActivationHeight(const Consensus::Params& params) const override { return 0; }\n \n     bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const override"
      }
    ]
  },
  {
    "sha": "55cc3cc9e5dcc1998fdf4c82fba1b8ab1119f41b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NWNjM2NjOWU1ZGNjMTk5OGZkZjRjODJmYmExYjhhYjExMTlmNDFi",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2021-03-09T14:28:26Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-22T18:09:48Z"
      },
      "message": "test: add min_activation_height to -vbparams",
      "tree": {
        "sha": "79959477d0165b8b4505715674a751b8d06e6955",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/79959477d0165b8b4505715674a751b8d06e6955"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/55cc3cc9e5dcc1998fdf4c82fba1b8ab1119f41b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55cc3cc9e5dcc1998fdf4c82fba1b8ab1119f41b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/55cc3cc9e5dcc1998fdf4c82fba1b8ab1119f41b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55cc3cc9e5dcc1998fdf4c82fba1b8ab1119f41b/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d065f3df6acb96f2e1037e339998e72a2b1c6f4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d065f3df6acb96f2e1037e339998e72a2b1c6f4f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d065f3df6acb96f2e1037e339998e72a2b1c6f4f"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 28,
      "deletions": 16
    },
    "files": [
      {
        "sha": "2b5678a8a87bee9fc48527fb614a9aeb39e4bc0f",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 15,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55cc3cc9e5dcc1998fdf4c82fba1b8ab1119f41b/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55cc3cc9e5dcc1998fdf4c82fba1b8ab1119f41b/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=55cc3cc9e5dcc1998fdf4c82fba1b8ab1119f41b",
        "patch": "@@ -474,16 +474,17 @@ class CRegTestParams : public CChainParams {\n     /**\n      * Allows modifying the Version Bits regtest parameters.\n      */\n-    void UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t startheight, int64_t timeoutheight)\n+    void UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t start_height, int64_t timeout_height, int64_t min_activation_height)\n     {\n-        consensus.vDeployments[d].startheight = startheight;\n-        consensus.vDeployments[d].timeoutheight = timeoutheight;\n+        consensus.vDeployments[d].startheight = start_height;\n+        consensus.vDeployments[d].timeoutheight = timeout_height;\n+        consensus.vDeployments[d].m_min_activation_height = min_activation_height;\n     }\n-    bool CheckVBitsHeights(std::string& error, int64_t startheight, int64_t timeoutheight);\n+    bool CheckVBitsHeights(std::string& error, int64_t startheight, int64_t timeoutheight, int64_t min_activation_height);\n     void UpdateActivationParametersFromArgs(const ArgsManager& args);\n };\n \n-bool CRegTestParams::CheckVBitsHeights(std::string& error, int64_t startheight, int64_t timeoutheight)\n+bool CRegTestParams::CheckVBitsHeights(std::string& error, int64_t startheight, int64_t timeoutheight, int64_t min_activation_height)\n {\n     // Special always or never active cases\n     if ((startheight == Consensus::BIP9Deployment::NEVER_ACTIVE && timeoutheight == Consensus::BIP9Deployment::NEVER_ACTIVE)\n@@ -509,6 +510,14 @@ bool CRegTestParams::CheckVBitsHeights(std::string& error, int64_t startheight,\n         error = strprintf(\"Invalid timeoutheight (%d), must be a multiple of %d\", timeoutheight, consensus.nMinerConfirmationWindow);\n         return false;\n     }\n+    if (min_activation_height < 0) {\n+        error = strprintf(\"Invalid minimum activation height (%d), cannot be negative\", min_activation_height);\n+        return false;\n+    }\n+    if (min_activation_height % consensus.nMinerConfirmationWindow != 0) {\n+        error = strprintf(\"Invalid minimum activation height (%d), must be a multiple of %d\", min_activation_height, consensus.nMinerConfirmationWindow);\n+        return false;\n+    }\n     if (timeoutheight <= startheight) {\n         error = strprintf(\"Invalid timeoutheight (%d), must be greater than the startheight (%d)\", timeoutheight, timeoutheight);\n         return false;\n@@ -534,26 +543,29 @@ void CRegTestParams::UpdateActivationParametersFromArgs(const ArgsManager& args)\n     for (const std::string& strDeployment : args.GetArgs(\"-vbparams\")) {\n         std::vector<std::string> vDeploymentParams;\n         boost::split(vDeploymentParams, strDeployment, boost::is_any_of(\":\"));\n-        if (vDeploymentParams.size() != 3) {\n-            throw std::runtime_error(\"Version bits parameters malformed, expecting deployment:@startheight:@timeoutheight\");\n+        if (vDeploymentParams.size() < 3 || vDeploymentParams.size() > 4) {\n+            throw std::runtime_error(\"Version bits parameters malformed, expecting deployment:@startheight:@timeoutheight[:@min_activation_height]\");\n+        }\n+        int64_t start_height = 0, timeout_height = 0, min_activation_height = 0;\n+        if (vDeploymentParams[1].empty() || vDeploymentParams[1].front() != '@' || !ParseInt64(vDeploymentParams[1].substr(1), &start_height)) {\n+            throw std::runtime_error(strprintf(\"Invalid start_height (%s)\", vDeploymentParams[1]));\n         }\n-        int64_t startheight = 0, timeoutheight = 0;\n-        if (vDeploymentParams[1].empty() || vDeploymentParams[1].front() != '@' || !ParseInt64(vDeploymentParams[1].substr(1), &startheight)) {\n-            throw std::runtime_error(strprintf(\"Invalid startheight (%s)\", vDeploymentParams[1]));\n+        if (vDeploymentParams[2].empty() || vDeploymentParams[2].front() != '@' || !ParseInt64(vDeploymentParams[2].substr(1), &timeout_height)) {\n+            throw std::runtime_error(strprintf(\"Invalid timeout_height (%s)\", vDeploymentParams[2]));\n         }\n-        if (vDeploymentParams[2].empty() || vDeploymentParams[2].front() != '@' || !ParseInt64(vDeploymentParams[2].substr(1), &timeoutheight)) {\n-            throw std::runtime_error(strprintf(\"Invalid timeoutheight (%s)\", vDeploymentParams[2]));\n+        if (vDeploymentParams.size() == 4 && (vDeploymentParams[3].front() != '@' || !ParseInt64(vDeploymentParams[3].substr(1), &min_activation_height))) {\n+            throw std::runtime_error(strprintf(\"Invalid min_activation_height (%s)\", vDeploymentParams[3]));\n         }\n         std::string error;\n-        if (!CheckVBitsHeights(error, startheight, timeoutheight)) {\n+        if (!CheckVBitsHeights(error, start_height, timeout_height, min_activation_height)) {\n             throw std::runtime_error(error);\n         }\n         bool found = false;\n         for (int j=0; j < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++j) {\n             if (vDeploymentParams[0] == VersionBitsDeploymentInfo[j].name) {\n-                UpdateVersionBitsParameters(Consensus::DeploymentPos(j), startheight, timeoutheight);\n+                UpdateVersionBitsParameters(Consensus::DeploymentPos(j), start_height, timeout_height, min_activation_height);\n                 found = true;\n-                LogPrintf(\"Setting version bits activation parameters for %s to startheight=%ld, timeoutheight=%ld\\n\", vDeploymentParams[0], startheight, timeoutheight);\n+                LogPrintf(\"Setting version bits activation parameters for %s to startheight=%ld, timeoutheight=%ld, min_activation_height=%ld\\n\", vDeploymentParams[0], start_height, timeout_height, min_activation_height);\n                 break;\n             }\n         }"
      },
      {
        "sha": "bf1d41d1ba994a5f673f860aa5c31b8fd6b29d1f",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55cc3cc9e5dcc1998fdf4c82fba1b8ab1119f41b/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55cc3cc9e5dcc1998fdf4c82fba1b8ab1119f41b/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=55cc3cc9e5dcc1998fdf4c82fba1b8ab1119f41b",
        "patch": "@@ -22,7 +22,7 @@ void SetupChainParamsBaseOptions(ArgsManager& argsman)\n                  \"This is intended for regression testing tools and app development. Equivalent to -chain=regtest.\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-segwitheight=<n>\", \"Set the activation height of segwit. -1 to disable. (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-testnet\", \"Use the test chain. Equivalent to -chain=test.\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n-    argsman.AddArg(\"-vbparams=deployment:@startheight:@timeoutheight\", \"Use given start/timeout heights for specified version bits deployment (regtest-only). For an always active deployment, use @-1:@2147483647. For a never active deployment, use @-2:@-2.\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    argsman.AddArg(\"-vbparams=deployment:@startheight:@timeoutheight[:@min_activation_height]\", \"Use given start, timeout, and minimum activation heights for specified version bits deployment (regtest-only). For an always active deployment, use @-1:@2147483647. For a never active deployment, use @-2:@-2.\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-signet\", \"Use the signet chain. Equivalent to -chain=signet. Note that the network is defined by the -signetchallenge parameter\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-signetchallenge\", \"Blocks must satisfy the given script to be considered valid (only for signet networks; defaults to the global default signet test network challenge)\", ArgsManager::ALLOW_STRING, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-signetseednode\", \"Specify a seed node for the signet network, in the hostname[:port] format, e.g. sig.net:1234 (may be used multiple times to specify multiple seed nodes; defaults to the global default signet test network seed node(s))\", ArgsManager::ALLOW_STRING, OptionsCategory::CHAINPARAMS);"
      }
    ]
  },
  {
    "sha": "60deed8053905cb98b5595c97629144e2c53b5bf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MGRlZWQ4MDUzOTA1Y2I5OGI1NTk1Yzk3NjI5MTQ0ZTJjNTNiNWJm",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2021-03-09T15:51:53Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-22T18:09:52Z"
      },
      "message": "test: BIP 8 delayed activation functional test",
      "tree": {
        "sha": "2843bb21f67da596b53acd28bd668c4f84b69072",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2843bb21f67da596b53acd28bd668c4f84b69072"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/60deed8053905cb98b5595c97629144e2c53b5bf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60deed8053905cb98b5595c97629144e2c53b5bf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/60deed8053905cb98b5595c97629144e2c53b5bf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60deed8053905cb98b5595c97629144e2c53b5bf/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "55cc3cc9e5dcc1998fdf4c82fba1b8ab1119f41b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55cc3cc9e5dcc1998fdf4c82fba1b8ab1119f41b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/55cc3cc9e5dcc1998fdf4c82fba1b8ab1119f41b"
      }
    ],
    "stats": {
      "total": 78,
      "additions": 78,
      "deletions": 0
    },
    "files": [
      {
        "sha": "75854e6bd8c3796664f7e866eb07631496609d42",
        "filename": "test/functional/feature_bip8.py",
        "status": "added",
        "additions": 77,
        "deletions": 0,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60deed8053905cb98b5595c97629144e2c53b5bf/test/functional/feature_bip8.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60deed8053905cb98b5595c97629144e2c53b5bf/test/functional/feature_bip8.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip8.py?ref=60deed8053905cb98b5595c97629144e2c53b5bf",
        "patch": "@@ -0,0 +1,77 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+# Test BIP 8 softforks\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+class Bip8Test(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # Node 0 has TestDummy inactive\n+        # Node 1 has a regular activation window\n+        # Node 2 uses speedy trial.\n+        self.extra_args = [\n+            ['-vbparams=testdummy:@-2:@-2'],\n+            ['-vbparams=testdummy:@144:@{}'.format(144 * 3)],\n+            ['-vbparams=testdummy:@144:@{}:@{}'.format(144 * 2, 144 * 4)],\n+        ]\n+\n+    def test_height(self, height, status, mine_from):\n+        if height > self.height:\n+            self.log.info(\"Test status at height {}...\".format(height))\n+            self.nodes[mine_from].generate(height - self.height)\n+            self.sync_blocks()\n+        elif height < self.height:\n+            assert mine_from is None\n+            self.log.info(\"Roll back to height {}...\".format(height))\n+            old_block = self.nodes[0].getblockhash(height + 1)\n+            for node in self.nodes:\n+                node.invalidateblock(old_block)\n+        else:\n+            assert mine_from is None\n+            assert height == 0 and self.height == 0\n+            self.log.info(\"Test status at genesis...\")\n+\n+        self.height = height\n+\n+        for (i, node), st in zip(enumerate(self.nodes), status):\n+            self.log.debug(\"Node #{}...\".format(i))\n+            info = node.getblockchaininfo()\n+            assert_equal(info[\"blocks\"], height)\n+            if st is None:\n+                assert \"testdummy\" not in info[\"softforks\"]\n+            else:\n+                assert_equal(info[\"softforks\"][\"testdummy\"][\"bip8\"][\"status\"], st)\n+\n+    def run_test(self):\n+        self.height = 0\n+        self.test_height(0, [None, \"defined\", \"defined\"], None)\n+\n+        # BIP 8 state transitions from \"defined\" to \"started\" or \"failed\" after\n+        # the last block of the retargeting period has been mined. This means\n+        # any new rules apply to transactions currently in the mempool, which\n+        # might be mined in the next block.\n+        #\n+        # The next retargeting period starts at block 144, so nothing should\n+        # happen at 142 and the state should change at 143.\n+        self.test_height(144-2, [None, \"defined\", \"defined\"], 0)\n+        self.test_height(144-1, [None, \"started\", \"started\"], 0)\n+\n+        self.log.info(\"Test status when not signaling...\")\n+        self.test_height(144*2-1, [None, \"started\", \"failed\"], 0)\n+        self.test_height(144*3-1, [None, \"failed\", \"failed\"], 0)\n+\n+        # The new branch has unique block hashes, because of the signalling and\n+        # because generate uses a deterministic address that depends on the node\n+        # index.\n+        self.log.info(\"Test status when signaling...\")\n+        self.test_height(144-1, [None, \"started\", \"started\"], None)\n+        self.test_height(144*2-1, [None, \"locked_in\", \"locked_in\"], 2)\n+        self.test_height(144*3-1, [None, \"active\", \"locked_in\"], 2)\n+        self.test_height(144*4-1, [None, \"active\", \"active\"], 2)\n+\n+if __name__ == '__main__':\n+    Bip8Test().main()"
      },
      {
        "sha": "0bc446e25ee92fd61adfbdf1fc8d6f69ee486cae",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60deed8053905cb98b5595c97629144e2c53b5bf/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60deed8053905cb98b5595c97629144e2c53b5bf/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=60deed8053905cb98b5595c97629144e2c53b5bf",
        "patch": "@@ -130,6 +130,7 @@\n     'p2p_feefilter.py',\n     'feature_reindex.py',\n     'feature_abortnode.py',\n+    'feature_bip8.py',\n     # vv Tests less than 30s vv\n     'wallet_keypool_topup.py --legacy-wallet',\n     'wallet_keypool_topup.py --descriptors',"
      }
    ]
  },
  {
    "sha": "4e4890ff57a527c6465e47c2743dcfd0a0037dc0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZTQ4OTBmZjU3YTUyN2M2NDY1ZTQ3YzI3NDNkY2ZkMGEwMDM3ZGMw",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2021-03-09T20:42:03Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-22T18:12:34Z"
      },
      "message": "docs: Minor tweaks to genericide versionbits",
      "tree": {
        "sha": "ef0a0ff14324912c4e9f2db8a4b3b87749de29f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef0a0ff14324912c4e9f2db8a4b3b87749de29f8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4e4890ff57a527c6465e47c2743dcfd0a0037dc0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e4890ff57a527c6465e47c2743dcfd0a0037dc0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4e4890ff57a527c6465e47c2743dcfd0a0037dc0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e4890ff57a527c6465e47c2743dcfd0a0037dc0/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "60deed8053905cb98b5595c97629144e2c53b5bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60deed8053905cb98b5595c97629144e2c53b5bf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/60deed8053905cb98b5595c97629144e2c53b5bf"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "63e0a4be366cef6b2fc15187399d56d494f03fd6",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e4890ff57a527c6465e47c2743dcfd0a0037dc0/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e4890ff57a527c6465e47c2743dcfd0a0037dc0/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=4e4890ff57a527c6465e47c2743dcfd0a0037dc0",
        "patch": "@@ -41,7 +41,7 @@ struct BIP9Deployment {\n \n     /** Special value for startheight indicating that the deployment is always active.\n      *  This is useful for testing, as it means tests don't need to deal with the activation\n-     *  process (which takes at least 3 BIP9 intervals). Only tests that specifically test the\n+     *  process (which takes at least 3 intervals). Only tests that specifically test the\n      *  behaviour during activation cannot use this. */\n     static constexpr int ALWAYS_ACTIVE = -1;\n     /** Special value for startheight and timeoutheight (both must be set) indicating that the\n@@ -70,7 +70,7 @@ struct Params {\n      * Note that segwit v0 script rules are enforced on all blocks except the\n      * BIP 16 exception blocks. */\n     int SegwitHeight;\n-    /** Don't warn about unknown BIP 9 activations below this height.\n+    /** Don't warn about unknown versionbits activations below this height.\n      * This prevents us from warning about the CSV and segwit activations. */\n     int MinBIP9WarningHeight;\n     /** Minimum blocks expected for a versionbits deployment threshold."
      },
      {
        "sha": "3c363e053433e045aec44bf3824ce52f061a25a9",
        "filename": "src/versionbits.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e4890ff57a527c6465e47c2743dcfd0a0037dc0/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e4890ff57a527c6465e47c2743dcfd0a0037dc0/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=4e4890ff57a527c6465e47c2743dcfd0a0037dc0",
        "patch": "@@ -17,7 +17,7 @@ static const int32_t VERSIONBITS_TOP_MASK = 0xE0000000UL;\n /** Total bits available for versionbits */\n static const int32_t VERSIONBITS_NUM_BITS = 29;\n \n-/** BIP 9 defines a finite-state-machine to deploy a softfork in multiple stages.\n+/** Versionbits defines a finite-state-machine to deploy a softfork in multiple stages.\n  *  State transitions happen during retarget period if conditions are met\n  *  In case of reorg, transitions can go backward. Without transition, state is\n  *  inherited between periods. All blocks of a period share the same state.\n@@ -71,7 +71,7 @@ class AbstractThresholdConditionChecker {\n     int GetStateSinceHeightFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const;\n };\n \n-/** BIP 9 allows multiple softforks to be deployed in parallel. We cache per-period state for every one of them\n+/** Versionbits allows multiple softforks to be deployed in parallel. We cache per-period state for every one of them\n  *  keyed by the bit position used to signal support. */\n struct VersionBitsCache\n {"
      }
    ]
  },
  {
    "sha": "76c0b62136ccb3f4848caf83a79aa5e78a42f656",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NmMwYjYyMTM2Y2NiM2Y0ODQ4Y2FmODNhNzlhYTVlNzhhNDJmNjU2",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2021-03-09T20:35:40Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-22T18:18:16Z"
      },
      "message": "scripted-diff: Genericide BIP9 in variable/type names and comments\n\n-BEGIN VERIFY SCRIPT-\nsed -i -e 's/\\bBIP9\\b/versionbits/g; s/BIP9/VBits/g; s/bip9\\([.()]\\)/deployment_details\\1/g' $(git grep -il BIP9 src)\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "43c21efbceaa4d93167e3ce2ad83a2a132b24cb7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/43c21efbceaa4d93167e3ce2ad83a2a132b24cb7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/76c0b62136ccb3f4848caf83a79aa5e78a42f656",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76c0b62136ccb3f4848caf83a79aa5e78a42f656",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/76c0b62136ccb3f4848caf83a79aa5e78a42f656",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76c0b62136ccb3f4848caf83a79aa5e78a42f656/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4e4890ff57a527c6465e47c2743dcfd0a0037dc0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e4890ff57a527c6465e47c2743dcfd0a0037dc0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4e4890ff57a527c6465e47c2743dcfd0a0037dc0"
      }
    ],
    "stats": {
      "total": 166,
      "additions": 83,
      "deletions": 83
    },
    "files": [
      {
        "sha": "9e162c98bd6c171d1af93cb7577822c249dbaba0",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 26,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76c0b62136ccb3f4848caf83a79aa5e78a42f656/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76c0b62136ccb3f4848caf83a79aa5e78a42f656/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=76c0b62136ccb3f4848caf83a79aa5e78a42f656",
        "patch": "@@ -72,7 +72,7 @@ class CMainParams : public CChainParams {\n         consensus.BIP66Height = 363725; // 00000000000000000379eaa19dce8c9b722d46ae6a57c2f1a988119488b50931\n         consensus.CSVHeight = 419328; // 000000000000000004a1b34462cb8aeebd5799177f7a29cf28f2d1961716b5b5\n         consensus.SegwitHeight = 481824; // 0000000000000000001c8018d9cb3b742ef25114f27563e3fc4a1902167f9893\n-        consensus.MinBIP9WarningHeight = 483840; // segwit activation height + miner confirmation window\n+        consensus.MinVBitsWarningHeight = 483840; // segwit activation height + miner confirmation window\n         consensus.powLimit = uint256S(\"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n@@ -81,14 +81,14 @@ class CMainParams : public CChainParams {\n         consensus.m_vbits_min_threshold = 1512; // 75%\n         consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].startheight = Consensus::BIP9Deployment::NEVER_ACTIVE;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].timeoutheight = Consensus::BIP9Deployment::NEVER_ACTIVE;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].startheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].timeoutheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].threshold = 1916; // 95% of 2016\n \n         // Deployment of Taproot (BIPs 340-342)\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].startheight = Consensus::BIP9Deployment::NEVER_ACTIVE;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].timeoutheight = Consensus::BIP9Deployment::NEVER_ACTIVE;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].startheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].timeoutheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].threshold = 1916; // 95% of 2016\n \n         consensus.nMinimumChainWork = uint256S(\"0x00000000000000000000000000000000000000001533efd8d716a517fe2c5008\");\n@@ -191,7 +191,7 @@ class CTestNetParams : public CChainParams {\n         consensus.BIP66Height = 330776; // 000000002104c8c45e99a8853285a3b592602a3ccde2b832481da85e9e4ba182\n         consensus.CSVHeight = 770112; // 00000000025e930139bac5c6c31a403776da130831ab85be56578f3fa75369bb\n         consensus.SegwitHeight = 834624; // 00000000002b980fcd729daaa248fd9316a5200e9b367f4ff2c42453e84201ca\n-        consensus.MinBIP9WarningHeight = 836640; // segwit activation height + miner confirmation window\n+        consensus.MinVBitsWarningHeight = 836640; // segwit activation height + miner confirmation window\n         consensus.powLimit = uint256S(\"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n@@ -200,14 +200,14 @@ class CTestNetParams : public CChainParams {\n         consensus.m_vbits_min_threshold = 1512; // 75%\n         consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].startheight = Consensus::BIP9Deployment::NEVER_ACTIVE;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].timeoutheight = Consensus::BIP9Deployment::NEVER_ACTIVE;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].startheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].timeoutheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].threshold = 1512; // 75% of 2016\n \n         // Deployment of Taproot (BIPs 340-342)\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].startheight = Consensus::BIP9Deployment::NEVER_ACTIVE;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].timeoutheight = Consensus::BIP9Deployment::NEVER_ACTIVE;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].startheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].timeoutheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].threshold = 1512; // 75% of 2016\n \n         consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000000001db6ec4ac88cf2272c6\");\n@@ -334,17 +334,17 @@ class SigNetParams : public CChainParams {\n         consensus.fPowNoRetargeting = false;\n         consensus.m_vbits_min_threshold = 1512; // 75%\n         consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n-        consensus.MinBIP9WarningHeight = 0;\n+        consensus.MinVBitsWarningHeight = 0;\n         consensus.powLimit = uint256S(\"00000377ae000000000000000000000000000000000000000000000000000000\");\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].startheight = Consensus::BIP9Deployment::NEVER_ACTIVE;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].timeoutheight = Consensus::BIP9Deployment::NEVER_ACTIVE;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].startheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].timeoutheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].threshold = 1916; // 95% of 2016\n \n         // Activation of Taproot (BIPs 340-342)\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].startheight = Consensus::BIP9Deployment::ALWAYS_ACTIVE;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].timeoutheight = Consensus::BIP9Deployment::NO_TIMEOUT;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].startheight = Consensus::VBitsDeployment::ALWAYS_ACTIVE;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].timeoutheight = Consensus::VBitsDeployment::NO_TIMEOUT;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].threshold = 1916; // 95% of 2016\n \n         // message start is defined as the first 4 bytes of the sha256d of the block script\n@@ -395,7 +395,7 @@ class CRegTestParams : public CChainParams {\n         consensus.BIP66Height = 1251; // BIP66 activated on regtest (Used in functional tests)\n         consensus.CSVHeight = 432; // CSV activated on regtest (Used in rpc activation tests)\n         consensus.SegwitHeight = 0; // SEGWIT is always activated on regtest unless overridden\n-        consensus.MinBIP9WarningHeight = 0;\n+        consensus.MinVBitsWarningHeight = 0;\n         consensus.powLimit = uint256S(\"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n@@ -405,11 +405,11 @@ class CRegTestParams : public CChainParams {\n         consensus.nMinerConfirmationWindow = 144; // Faster than normal for regtest (144 instead of 2016)\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].startheight = 144;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].timeoutheight = Consensus::BIP9Deployment::NO_TIMEOUT;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].timeoutheight = Consensus::VBitsDeployment::NO_TIMEOUT;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].threshold = 108; // 75% of 144\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].startheight = Consensus::BIP9Deployment::ALWAYS_ACTIVE;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].timeoutheight = Consensus::BIP9Deployment::NO_TIMEOUT;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].startheight = Consensus::VBitsDeployment::ALWAYS_ACTIVE;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].timeoutheight = Consensus::VBitsDeployment::NO_TIMEOUT;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].threshold = 108; // 75% of 144\n \n         consensus.nMinimumChainWork = uint256{};\n@@ -487,17 +487,17 @@ class CRegTestParams : public CChainParams {\n bool CRegTestParams::CheckVBitsHeights(std::string& error, int64_t startheight, int64_t timeoutheight, int64_t min_activation_height)\n {\n     // Special always or never active cases\n-    if ((startheight == Consensus::BIP9Deployment::NEVER_ACTIVE && timeoutheight == Consensus::BIP9Deployment::NEVER_ACTIVE)\n-        || (startheight == Consensus::BIP9Deployment::ALWAYS_ACTIVE && timeoutheight == Consensus::BIP9Deployment::NO_TIMEOUT)) {\n+    if ((startheight == Consensus::VBitsDeployment::NEVER_ACTIVE && timeoutheight == Consensus::VBitsDeployment::NEVER_ACTIVE)\n+        || (startheight == Consensus::VBitsDeployment::ALWAYS_ACTIVE && timeoutheight == Consensus::VBitsDeployment::NO_TIMEOUT)) {\n         return true;\n     }\n-    if ((startheight == Consensus::BIP9Deployment::NEVER_ACTIVE && timeoutheight != Consensus::BIP9Deployment::NEVER_ACTIVE)\n-        || (startheight != Consensus::BIP9Deployment::NEVER_ACTIVE && timeoutheight == Consensus::BIP9Deployment::NEVER_ACTIVE)) {\n-        error = strprintf(\"When one of startheight or timeoutheight is %d, both must be %d\", Consensus::BIP9Deployment::NEVER_ACTIVE, Consensus::BIP9Deployment::NEVER_ACTIVE);\n+    if ((startheight == Consensus::VBitsDeployment::NEVER_ACTIVE && timeoutheight != Consensus::VBitsDeployment::NEVER_ACTIVE)\n+        || (startheight != Consensus::VBitsDeployment::NEVER_ACTIVE && timeoutheight == Consensus::VBitsDeployment::NEVER_ACTIVE)) {\n+        error = strprintf(\"When one of startheight or timeoutheight is %d, both must be %d\", Consensus::VBitsDeployment::NEVER_ACTIVE, Consensus::VBitsDeployment::NEVER_ACTIVE);\n         return false;\n     }\n-    if (startheight == Consensus::BIP9Deployment::ALWAYS_ACTIVE && timeoutheight != Consensus::BIP9Deployment::NO_TIMEOUT) {\n-        error = strprintf(\"When startheight is %d, timeoutheight must be %d\", Consensus::BIP9Deployment::ALWAYS_ACTIVE, Consensus::BIP9Deployment::NO_TIMEOUT);\n+    if (startheight == Consensus::VBitsDeployment::ALWAYS_ACTIVE && timeoutheight != Consensus::VBitsDeployment::NO_TIMEOUT) {\n+        error = strprintf(\"When startheight is %d, timeoutheight must be %d\", Consensus::VBitsDeployment::ALWAYS_ACTIVE, Consensus::VBitsDeployment::NO_TIMEOUT);\n         return false;\n     }\n "
      },
      {
        "sha": "044815fe8e45952c1d4f72ec747943d0b64b5ffe",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76c0b62136ccb3f4848caf83a79aa5e78a42f656/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76c0b62136ccb3f4848caf83a79aa5e78a42f656/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=76c0b62136ccb3f4848caf83a79aa5e78a42f656",
        "patch": "@@ -20,9 +20,9 @@ enum DeploymentPos\n };\n \n /**\n- * Struct for each individual consensus rule change using BIP9.\n+ * Struct for each individual consensus rule change using versionbits.\n  */\n-struct BIP9Deployment {\n+struct VBitsDeployment {\n     /** Bit position to select the particular bit in nVersion. */\n     int bit;\n     /** Start block height for version bits miner confirmation. Must be a retarget block, can be in the past. */\n@@ -72,13 +72,13 @@ struct Params {\n     int SegwitHeight;\n     /** Don't warn about unknown versionbits activations below this height.\n      * This prevents us from warning about the CSV and segwit activations. */\n-    int MinBIP9WarningHeight;\n+    int MinVBitsWarningHeight;\n     /** Minimum blocks expected for a versionbits deployment threshold.\n      * Used to determine whether an unknown versionbits deployment has occurred.\n      */\n     uint32_t m_vbits_min_threshold;\n     uint32_t nMinerConfirmationWindow;\n-    BIP9Deployment vDeployments[MAX_VERSION_BITS_DEPLOYMENTS];\n+    VBitsDeployment vDeployments[MAX_VERSION_BITS_DEPLOYMENTS];\n     /** Proof of work parameters */\n     uint256 powLimit;\n     bool fPowAllowMinDifficultyBlocks;"
      },
      {
        "sha": "a14a31975d81952021757895ab0ea32c31d1dd48",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 18,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76c0b62136ccb3f4848caf83a79aa5e78a42f656/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76c0b62136ccb3f4848caf83a79aa5e78a42f656/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=76c0b62136ccb3f4848caf83a79aa5e78a42f656",
        "patch": "@@ -1222,45 +1222,45 @@ static void BuriedForkDescPushBack(UniValue& softforks, const std::string &name,\n     softforks.pushKV(name, rv);\n }\n \n-static void BIP9SoftForkDescPushBack(UniValue& softforks, const std::string &name, const Consensus::Params& consensusParams, Consensus::DeploymentPos id) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static void VBitsSoftForkDescPushBack(UniValue& softforks, const std::string &name, const Consensus::Params& consensusParams, Consensus::DeploymentPos id) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n-    // For BIP9 deployments.\n+    // For versionbits deployments.\n     // Deployments (e.g. testdummy) which are marked as \"never active\" are hidden.\n     // This is used when merging logic to implement a proposed softfork without a specified deployment schedule.\n-    if (consensusParams.vDeployments[id].timeoutheight == Consensus::BIP9Deployment::NEVER_ACTIVE) return;\n+    if (consensusParams.vDeployments[id].timeoutheight == Consensus::VBitsDeployment::NEVER_ACTIVE) return;\n \n-    UniValue bip9(UniValue::VOBJ);\n+    UniValue deployment_details(UniValue::VOBJ);\n     const ThresholdState thresholdState = VersionBitsState(::ChainActive().Tip(), consensusParams, id, versionbitscache);\n     switch (thresholdState) {\n-    case ThresholdState::DEFINED: bip9.pushKV(\"status\", \"defined\"); break;\n-    case ThresholdState::STARTED: bip9.pushKV(\"status\", \"started\"); break;\n-    case ThresholdState::LOCKED_IN: bip9.pushKV(\"status\", \"locked_in\"); break;\n-    case ThresholdState::ACTIVE: bip9.pushKV(\"status\", \"active\"); break;\n-    case ThresholdState::FAILED: bip9.pushKV(\"status\", \"failed\"); break;\n+    case ThresholdState::DEFINED: deployment_details.pushKV(\"status\", \"defined\"); break;\n+    case ThresholdState::STARTED: deployment_details.pushKV(\"status\", \"started\"); break;\n+    case ThresholdState::LOCKED_IN: deployment_details.pushKV(\"status\", \"locked_in\"); break;\n+    case ThresholdState::ACTIVE: deployment_details.pushKV(\"status\", \"active\"); break;\n+    case ThresholdState::FAILED: deployment_details.pushKV(\"status\", \"failed\"); break;\n     }\n     if (ThresholdState::STARTED == thresholdState)\n     {\n-        bip9.pushKV(\"bit\", consensusParams.vDeployments[id].bit);\n+        deployment_details.pushKV(\"bit\", consensusParams.vDeployments[id].bit);\n     }\n-    bip9.pushKV(\"startheight\", consensusParams.vDeployments[id].startheight);\n-    bip9.pushKV(\"timeoutheight\", consensusParams.vDeployments[id].timeoutheight);\n+    deployment_details.pushKV(\"startheight\", consensusParams.vDeployments[id].startheight);\n+    deployment_details.pushKV(\"timeoutheight\", consensusParams.vDeployments[id].timeoutheight);\n     int64_t since_height = VersionBitsStateSinceHeight(::ChainActive().Tip(), consensusParams, id, versionbitscache);\n-    bip9.pushKV(\"since\", since_height);\n+    deployment_details.pushKV(\"since\", since_height);\n     if (ThresholdState::STARTED == thresholdState)\n     {\n         UniValue statsUV(UniValue::VOBJ);\n-        BIP9Stats statsStruct = VersionBitsStatistics(::ChainActive().Tip(), consensusParams, id);\n+        VBitsStats statsStruct = VersionBitsStatistics(::ChainActive().Tip(), consensusParams, id);\n         statsUV.pushKV(\"period\", statsStruct.period);\n         statsUV.pushKV(\"threshold\", statsStruct.threshold);\n         statsUV.pushKV(\"elapsed\", statsStruct.elapsed);\n         statsUV.pushKV(\"count\", statsStruct.count);\n         statsUV.pushKV(\"possible\", statsStruct.possible);\n-        bip9.pushKV(\"statistics\", statsUV);\n+        deployment_details.pushKV(\"statistics\", statsUV);\n     }\n \n     UniValue rv(UniValue::VOBJ);\n     rv.pushKV(\"type\", \"bip8\");\n-    rv.pushKV(\"bip8\", bip9);\n+    rv.pushKV(\"bip8\", deployment_details);\n     if (ThresholdState::ACTIVE == thresholdState) {\n         rv.pushKV(\"height\", since_height);\n     }\n@@ -1363,8 +1363,8 @@ RPCHelpMan getblockchaininfo()\n     BuriedForkDescPushBack(softforks, \"bip65\", consensusParams.BIP65Height);\n     BuriedForkDescPushBack(softforks, \"csv\", consensusParams.CSVHeight);\n     BuriedForkDescPushBack(softforks, \"segwit\", consensusParams.SegwitHeight);\n-    BIP9SoftForkDescPushBack(softforks, \"testdummy\", consensusParams, Consensus::DEPLOYMENT_TESTDUMMY);\n-    BIP9SoftForkDescPushBack(softforks, \"taproot\", consensusParams, Consensus::DEPLOYMENT_TAPROOT);\n+    VBitsSoftForkDescPushBack(softforks, \"testdummy\", consensusParams, Consensus::DEPLOYMENT_TESTDUMMY);\n+    VBitsSoftForkDescPushBack(softforks, \"taproot\", consensusParams, Consensus::DEPLOYMENT_TAPROOT);\n     obj.pushKV(\"softforks\",             softforks);\n \n     obj.pushKV(\"warnings\", GetWarnings(false).original);"
      },
      {
        "sha": "f4aeac958a4fdd5c9a6865c52103c1fa60c0ddcf",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76c0b62136ccb3f4848caf83a79aa5e78a42f656/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76c0b62136ccb3f4848caf83a79aa5e78a42f656/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=76c0b62136ccb3f4848caf83a79aa5e78a42f656",
        "patch": "@@ -876,7 +876,7 @@ static RPCHelpMan getblocktemplate()\n         // If VB is supported by the client, nMaxVersionPreVB is -1, so we won't get here\n         // Because BIP 34 changed how the generation transaction is serialized, we can only use version/force back to v2 blocks\n         // This is safe to do [otherwise-]unconditionally only because we are throwing an exception above if a non-force deployment gets activated\n-        // Note that this can probably also be removed entirely after the first BIP9 non-force deployment (ie, probably segwit) gets activated\n+        // Note that this can probably also be removed entirely after the first versionbits non-force deployment (ie, probably segwit) gets activated\n         aMutable.push_back(\"version/force\");\n     }\n "
      },
      {
        "sha": "60b65007a244642d8ec6f09836db3a90417b0fb2",
        "filename": "src/test/fuzz/versionbits.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76c0b62136ccb3f4848caf83a79aa5e78a42f656/src/test/fuzz/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76c0b62136ccb3f4848caf83a79aa5e78a42f656/src/test/fuzz/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/versionbits.cpp?ref=76c0b62136ccb3f4848caf83a79aa5e78a42f656",
        "patch": "@@ -49,7 +49,7 @@ class TestConditionChecker : public AbstractThresholdConditionChecker\n \n     ThresholdState GetStateFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateFor(pindexPrev, dummy_params, m_cache); }\n     int GetStateSinceHeightFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateSinceHeightFor(pindexPrev, dummy_params, m_cache); }\n-    BIP9Stats GetStateStatisticsFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateStatisticsFor(pindexPrev, dummy_params); }\n+    VBitsStats GetStateStatisticsFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateStatisticsFor(pindexPrev, dummy_params); }\n \n     bool Condition(int64_t version) const\n     {\n@@ -136,12 +136,12 @@ FUZZ_TARGET_INIT(versionbits, initialize)\n         min_activation = fuzzed_data_provider.ConsumeIntegralInRange<int>(0, period * (max_periods - 1));\n     } else {\n         if (fuzzed_data_provider.ConsumeBool()) {\n-            startheight = Consensus::BIP9Deployment::ALWAYS_ACTIVE;\n-            timeoutheight = Consensus::BIP9Deployment::NO_TIMEOUT;\n+            startheight = Consensus::VBitsDeployment::ALWAYS_ACTIVE;\n+            timeoutheight = Consensus::VBitsDeployment::NO_TIMEOUT;\n             always_active_test = true;\n         } else {\n-            startheight = Consensus::BIP9Deployment::NEVER_ACTIVE;\n-            timeoutheight = Consensus::BIP9Deployment::NEVER_ACTIVE;\n+            startheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n+            timeoutheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n             never_active_test = true;\n         }\n     }\n@@ -196,7 +196,7 @@ FUZZ_TARGET_INIT(versionbits, initialize)\n     CBlockIndex* prev = blocks.tip();\n     const int exp_since = checker.GetStateSinceHeightFor(prev);\n     const ThresholdState exp_state = checker.GetStateFor(prev);\n-    BIP9Stats last_stats = checker.GetStateStatisticsFor(prev);\n+    VBitsStats last_stats = checker.GetStateStatisticsFor(prev);\n \n     int prev_next_height = (prev == nullptr ? 0 : prev->nHeight + 1);\n     assert(exp_since <= prev_next_height);\n@@ -221,7 +221,7 @@ FUZZ_TARGET_INIT(versionbits, initialize)\n         if (state != ThresholdState::STARTED) continue;\n \n         // check that after mining this block stats change as expected\n-        const BIP9Stats stats = checker.GetStateStatisticsFor(current_block);\n+        const VBitsStats stats = checker.GetStateStatisticsFor(current_block);\n         assert(stats.period == period);\n         assert(stats.threshold == threshold);\n         assert(stats.elapsed == b);\n@@ -246,7 +246,7 @@ FUZZ_TARGET_INIT(versionbits, initialize)\n \n     // GetStateStatistics is safe on a period boundary\n     // and has progressed to a new period\n-    const BIP9Stats stats = checker.GetStateStatisticsFor(current_block);\n+    const VBitsStats stats = checker.GetStateStatisticsFor(current_block);\n     assert(stats.period == period);\n     assert(stats.threshold == threshold);\n     assert(stats.elapsed == 0);"
      },
      {
        "sha": "78f4243dbf176a988e2309ef4c0815abfe92f4cb",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76c0b62136ccb3f4848caf83a79aa5e78a42f656/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76c0b62136ccb3f4848caf83a79aa5e78a42f656/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=76c0b62136ccb3f4848caf83a79aa5e78a42f656",
        "patch": "@@ -54,14 +54,14 @@ class TestDelayedActivationConditionChecker : public TestConditionChecker\n class TestAlwaysActiveConditionChecker : public TestConditionChecker\n {\n public:\n-    int StartHeight(const Consensus::Params& params) const override { return Consensus::BIP9Deployment::ALWAYS_ACTIVE; }\n+    int StartHeight(const Consensus::Params& params) const override { return Consensus::VBitsDeployment::ALWAYS_ACTIVE; }\n };\n \n class TestNeverActiveConditionChecker : public TestConditionChecker\n {\n public:\n-    int StartHeight(const Consensus::Params& params) const override { return Consensus::BIP9Deployment::NEVER_ACTIVE; }\n-    int TimeoutHeight(const Consensus::Params& params) const override { return Consensus::BIP9Deployment::NEVER_ACTIVE; }\n+    int StartHeight(const Consensus::Params& params) const override { return Consensus::VBitsDeployment::NEVER_ACTIVE; }\n+    int TimeoutHeight(const Consensus::Params& params) const override { return Consensus::VBitsDeployment::NEVER_ACTIVE; }\n };\n \n #define CHECKERS 6\n@@ -248,12 +248,12 @@ void sanity_check_params(const Consensus::Params& params)\n \n         int startheight = params.vDeployments[i].startheight;\n         int timeoutheight = params.vDeployments[i].timeoutheight;\n-        if (startheight == Consensus::BIP9Deployment::NEVER_ACTIVE) {\n-            BOOST_CHECK_EQUAL(timeoutheight, Consensus::BIP9Deployment::NEVER_ACTIVE);\n-        } else if (timeoutheight == Consensus::BIP9Deployment::NEVER_ACTIVE) {\n-            BOOST_CHECK_EQUAL(startheight, Consensus::BIP9Deployment::NEVER_ACTIVE);\n-        } else if (startheight == Consensus::BIP9Deployment::ALWAYS_ACTIVE) {\n-            BOOST_CHECK_EQUAL(timeoutheight, Consensus::BIP9Deployment::NO_TIMEOUT);\n+        if (startheight == Consensus::VBitsDeployment::NEVER_ACTIVE) {\n+            BOOST_CHECK_EQUAL(timeoutheight, Consensus::VBitsDeployment::NEVER_ACTIVE);\n+        } else if (timeoutheight == Consensus::VBitsDeployment::NEVER_ACTIVE) {\n+            BOOST_CHECK_EQUAL(startheight, Consensus::VBitsDeployment::NEVER_ACTIVE);\n+        } else if (startheight == Consensus::VBitsDeployment::ALWAYS_ACTIVE) {\n+            BOOST_CHECK_EQUAL(timeoutheight, Consensus::VBitsDeployment::NO_TIMEOUT);\n         } else {\n             BOOST_CHECK(startheight > 0);\n             BOOST_CHECK(timeoutheight > 0);"
      },
      {
        "sha": "271f2cc8a6335fd26ceee1cdb8cc013234220102",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76c0b62136ccb3f4848caf83a79aa5e78a42f656/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76c0b62136ccb3f4848caf83a79aa5e78a42f656/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=76c0b62136ccb3f4848caf83a79aa5e78a42f656",
        "patch": "@@ -1845,7 +1845,7 @@ class WarningBitsConditionChecker : public AbstractThresholdConditionChecker\n \n     bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const override\n     {\n-        return pindex->nHeight >= params.MinBIP9WarningHeight &&\n+        return pindex->nHeight >= params.MinVBitsWarningHeight &&\n                ((pindex->nVersion & VERSIONBITS_TOP_MASK) == VERSIONBITS_TOP_BITS) &&\n                ((pindex->nVersion >> bit) & 1) != 0 &&\n                ((ComputeBlockVersion(pindex->pprev, params) >> bit) & 1) == 0;"
      },
      {
        "sha": "3416f042fe796c910d3341b4bc3a5d4c02f782be",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76c0b62136ccb3f4848caf83a79aa5e78a42f656/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76c0b62136ccb3f4848caf83a79aa5e78a42f656/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=76c0b62136ccb3f4848caf83a79aa5e78a42f656",
        "patch": "@@ -14,12 +14,12 @@ ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex*\n     int height_active_min = MinActivationHeight(params);\n \n     // Check if this deployment is never active.\n-    if (height_start == Consensus::BIP9Deployment::NEVER_ACTIVE && height_timeout == Consensus::BIP9Deployment::NEVER_ACTIVE) {\n+    if (height_start == Consensus::VBitsDeployment::NEVER_ACTIVE && height_timeout == Consensus::VBitsDeployment::NEVER_ACTIVE) {\n         return ThresholdState::DEFINED;\n     }\n \n     // Check if this deployment is always active.\n-    if (height_start == Consensus::BIP9Deployment::ALWAYS_ACTIVE) {\n+    if (height_start == Consensus::VBitsDeployment::ALWAYS_ACTIVE) {\n         return ThresholdState::ACTIVE;\n     }\n \n@@ -103,9 +103,9 @@ ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex*\n     return state;\n }\n \n-BIP9Stats AbstractThresholdConditionChecker::GetStateStatisticsFor(const CBlockIndex* pindex, const Consensus::Params& params) const\n+VBitsStats AbstractThresholdConditionChecker::GetStateStatisticsFor(const CBlockIndex* pindex, const Consensus::Params& params) const\n {\n-    BIP9Stats stats = {};\n+    VBitsStats stats = {};\n \n     stats.period = Period(params);\n     stats.threshold = Threshold(params);\n@@ -135,7 +135,7 @@ BIP9Stats AbstractThresholdConditionChecker::GetStateStatisticsFor(const CBlockI\n int AbstractThresholdConditionChecker::GetStateSinceHeightFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const\n {\n     int height_start = StartHeight(params);\n-    if (height_start == Consensus::BIP9Deployment::ALWAYS_ACTIVE) {\n+    if (height_start == Consensus::VBitsDeployment::ALWAYS_ACTIVE) {\n         return 0;\n     }\n \n@@ -200,7 +200,7 @@ ThresholdState VersionBitsState(const CBlockIndex* pindexPrev, const Consensus::\n     return VersionBitsConditionChecker(pos).GetStateFor(pindexPrev, params, cache.caches[pos]);\n }\n \n-BIP9Stats VersionBitsStatistics(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos)\n+VBitsStats VersionBitsStatistics(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos)\n {\n     return VersionBitsConditionChecker(pos).GetStateStatisticsFor(pindexPrev, params);\n }"
      },
      {
        "sha": "a2496d8032c40aaf6f8decc38d5654ada6261290",
        "filename": "src/versionbits.h",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76c0b62136ccb3f4848caf83a79aa5e78a42f656/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76c0b62136ccb3f4848caf83a79aa5e78a42f656/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=76c0b62136ccb3f4848caf83a79aa5e78a42f656",
        "patch": "@@ -35,9 +35,9 @@ enum class ThresholdState {\n // will either be nullptr or a block with (height + 1) % Period() == 0.\n typedef std::map<const CBlockIndex*, ThresholdState> ThresholdConditionCache;\n \n-/** Display status of an in-progress BIP9 softfork */\n-struct BIP9Stats {\n-    /** Length of blocks of the BIP9 signalling period */\n+/** Display status of an in-progress versionbits softfork */\n+struct VBitsStats {\n+    /** Length of blocks of the versionbits signalling period */\n     int period;\n     /** Number of blocks with the version bit set required to activate the softfork */\n     int threshold;\n@@ -50,7 +50,7 @@ struct BIP9Stats {\n };\n \n /**\n- * Abstract class that implements BIP9-style threshold logic, and caches results.\n+ * Abstract class that implements versionbits-style threshold logic, and caches results.\n  */\n class AbstractThresholdConditionChecker {\n protected:\n@@ -62,8 +62,8 @@ class AbstractThresholdConditionChecker {\n     virtual int MinActivationHeight(const Consensus::Params& params) const =0;\n \n public:\n-    /** Returns the numerical statistics of an in-progress BIP9 softfork in the current period */\n-    BIP9Stats GetStateStatisticsFor(const CBlockIndex* pindex, const Consensus::Params& params) const;\n+    /** Returns the numerical statistics of an in-progress versionbits softfork in the current period */\n+    VBitsStats GetStateStatisticsFor(const CBlockIndex* pindex, const Consensus::Params& params) const;\n     /** Returns the state for pindex A based on parent pindexPrev B. Applies any state transition if conditions are present.\n      *  Caches state from first block of period. */\n     ThresholdState GetStateFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const;\n@@ -80,11 +80,11 @@ struct VersionBitsCache\n     void Clear();\n };\n \n-/** Get the BIP9 state for a given deployment at the current tip. */\n+/** Get the versionbits state for a given deployment at the current tip. */\n ThresholdState VersionBitsState(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache);\n-/** Get the numerical statistics for the BIP9 state for a given deployment at the current tip. */\n-BIP9Stats VersionBitsStatistics(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos);\n-/** Get the block height at which the BIP9 deployment switched into the state for the block building on the current tip. */\n+/** Get the numerical statistics for the versionbits state for a given deployment at the current tip. */\n+VBitsStats VersionBitsStatistics(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos);\n+/** Get the block height at which the versionbits deployment switched into the state for the block building on the current tip. */\n int VersionBitsStateSinceHeight(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache);\n uint32_t VersionBitsMask(const Consensus::Params& params, Consensus::DeploymentPos pos);\n "
      }
    ]
  },
  {
    "sha": "92b5a6f2a282a713854b659d08398b0c62180730",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MmI1YTZmMmEyODJhNzEzODU0YjY1OWQwODM5OGIwYzYyMTgwNzMw",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-10-15T17:27:20Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-22T19:41:09Z"
      },
      "message": "Add BIP 8 lockinontimeout flag and MUST_SIGNAL phase for versionbits",
      "tree": {
        "sha": "ec9c3e8f2134514fa08a32f887d50c8ac466bc56",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ec9c3e8f2134514fa08a32f887d50c8ac466bc56"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92b5a6f2a282a713854b659d08398b0c62180730",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92b5a6f2a282a713854b659d08398b0c62180730",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/92b5a6f2a282a713854b659d08398b0c62180730",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92b5a6f2a282a713854b659d08398b0c62180730/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "76c0b62136ccb3f4848caf83a79aa5e78a42f656",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76c0b62136ccb3f4848caf83a79aa5e78a42f656",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/76c0b62136ccb3f4848caf83a79aa5e78a42f656"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 54,
      "deletions": 6
    },
    "files": [
      {
        "sha": "1d3206b08e32c1b47cbaade0030ce01bcd7eea17",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92b5a6f2a282a713854b659d08398b0c62180730/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92b5a6f2a282a713854b659d08398b0c62180730/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=92b5a6f2a282a713854b659d08398b0c62180730",
        "patch": "@@ -35,6 +35,8 @@ struct VBitsDeployment {\n      * If lock in occurs, delay activation until at least this block height. Activations only occur on retargets.\n      */\n     int64_t m_min_activation_height{0};\n+    /** If true, final period before timeout will transition to MUST_SIGNAL. */\n+    bool lockinontimeout{false};\n \n     /** Constant for timeoutheight very far in the future. */\n     static constexpr int NO_TIMEOUT = std::numeric_limits<int>::max();"
      },
      {
        "sha": "016f8eb7728070a8660416dc0880c229c96ef24d",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92b5a6f2a282a713854b659d08398b0c62180730/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92b5a6f2a282a713854b659d08398b0c62180730/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=92b5a6f2a282a713854b659d08398b0c62180730",
        "patch": "@@ -1234,20 +1234,20 @@ static void VBitsSoftForkDescPushBack(UniValue& softforks, const std::string &na\n     switch (thresholdState) {\n     case ThresholdState::DEFINED: deployment_details.pushKV(\"status\", \"defined\"); break;\n     case ThresholdState::STARTED: deployment_details.pushKV(\"status\", \"started\"); break;\n+    case ThresholdState::MUST_SIGNAL: deployment_details.pushKV(\"status\", \"must_signal\"); break;\n     case ThresholdState::LOCKED_IN: deployment_details.pushKV(\"status\", \"locked_in\"); break;\n     case ThresholdState::ACTIVE: deployment_details.pushKV(\"status\", \"active\"); break;\n     case ThresholdState::FAILED: deployment_details.pushKV(\"status\", \"failed\"); break;\n     }\n-    if (ThresholdState::STARTED == thresholdState)\n-    {\n+    if (ThresholdState::STARTED == thresholdState || ThresholdState::MUST_SIGNAL == thresholdState) {\n         deployment_details.pushKV(\"bit\", consensusParams.vDeployments[id].bit);\n     }\n     deployment_details.pushKV(\"startheight\", consensusParams.vDeployments[id].startheight);\n     deployment_details.pushKV(\"timeoutheight\", consensusParams.vDeployments[id].timeoutheight);\n+    deployment_details.pushKV(\"lockinontimeout\", consensusParams.vDeployments[id].lockinontimeout);\n     int64_t since_height = VersionBitsStateSinceHeight(::ChainActive().Tip(), consensusParams, id, versionbitscache);\n     deployment_details.pushKV(\"since\", since_height);\n-    if (ThresholdState::STARTED == thresholdState)\n-    {\n+    if (ThresholdState::STARTED == thresholdState || ThresholdState::MUST_SIGNAL == thresholdState) {\n         UniValue statsUV(UniValue::VOBJ);\n         VBitsStats statsStruct = VersionBitsStatistics(::ChainActive().Tip(), consensusParams, id);\n         statsUV.pushKV(\"period\", statsStruct.period);\n@@ -1298,10 +1298,11 @@ RPCHelpMan getblockchaininfo()\n                                 {RPCResult::Type::STR, \"type\", \"one of \\\"buried\\\", \\\"bip8\\\"\"},\n                                 {RPCResult::Type::OBJ, \"bip8\", \"status of BIP 8 softforks (only for \\\"bip8\\\" type)\",\n                                 {\n-                                    {RPCResult::Type::STR, \"status\", \"one of \\\"defined\\\", \\\"started\\\", \\\"locked_in\\\", \\\"active\\\", \\\"failed\\\"\"},\n+                                    {RPCResult::Type::STR, \"status\", \"one of \\\"defined\\\", \\\"started\\\", \\\"must_signal\\\", \\\"locked_in\\\", \\\"active\\\", \\\"failed\\\"\"},\n                                     {RPCResult::Type::NUM, \"bit\", \"the bit (0-28) in the block version field used to signal this softfork (only for \\\"started\\\" status)\"},\n                                     {RPCResult::Type::NUM, \"startheight\", \"the minimum height of a block at which the bit gains its meaning\"},\n                                     {RPCResult::Type::NUM, \"timeoutheight\", \"the height of a block at which the deployment is considered failed if not yet locked in\"},\n+                                    {RPCResult::Type::BOOL, \"lockinontimeout\", \"true if the period before timeoutheight transitions to must_signal\"},\n                                     {RPCResult::Type::NUM, \"since\", \"height of the first block to which the status applies\"},\n                                     {RPCResult::Type::OBJ, \"statistics\", \"numeric statistics about BIP8 signalling for a softfork (only for \\\"started\\\" status)\",\n                                     {"
      },
      {
        "sha": "57adb1409e06f74d5c260bd38e1ebdfa40c92135",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92b5a6f2a282a713854b659d08398b0c62180730/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92b5a6f2a282a713854b659d08398b0c62180730/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=92b5a6f2a282a713854b659d08398b0c62180730",
        "patch": "@@ -835,6 +835,7 @@ static RPCHelpMan getblocktemplate()\n             case ThresholdState::FAILED:\n                 // Not exposed to GBT at all\n                 break;\n+            case ThresholdState::MUST_SIGNAL:\n             case ThresholdState::LOCKED_IN:\n                 // Ensure bit is set in block version\n                 pblock->nVersion |= VersionBitsMask(consensusParams, pos);"
      },
      {
        "sha": "30ac35b04faaf6384ae38500b06a4c0da206f382",
        "filename": "src/test/fuzz/versionbits.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92b5a6f2a282a713854b659d08398b0c62180730/src/test/fuzz/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92b5a6f2a282a713854b659d08398b0c62180730/src/test/fuzz/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/versionbits.cpp?ref=92b5a6f2a282a713854b659d08398b0c62180730",
        "patch": "@@ -43,6 +43,7 @@ class TestConditionChecker : public AbstractThresholdConditionChecker\n     bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const override { return Condition(pindex->nVersion); }\n     int StartHeight(const Consensus::Params& params) const override { return m_begin; }\n     int TimeoutHeight(const Consensus::Params& params) const override { return m_end; }\n+    bool LockinOnTimeout(const Consensus::Params& params) const override { return false; }\n     int MinActivationHeight(const Consensus::Params& params) const override { return m_min_activation; }\n     int Period(const Consensus::Params& params) const override { return m_period; }\n     int Threshold(const Consensus::Params& params) const override { return m_threshold; }"
      },
      {
        "sha": "b53e1f0e1e08c28f555c2f6fc6080364ca09b054",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92b5a6f2a282a713854b659d08398b0c62180730/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92b5a6f2a282a713854b659d08398b0c62180730/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=92b5a6f2a282a713854b659d08398b0c62180730",
        "patch": "@@ -19,6 +19,7 @@ static const std::string StateName(ThresholdState state)\n     switch (state) {\n     case ThresholdState::DEFINED:   return \"DEFINED\";\n     case ThresholdState::STARTED:   return \"STARTED\";\n+    case ThresholdState::MUST_SIGNAL: return \"MUST_SIGNAL\";\n     case ThresholdState::LOCKED_IN: return \"LOCKED_IN\";\n     case ThresholdState::ACTIVE:    return \"ACTIVE\";\n     case ThresholdState::FAILED:    return \"FAILED\";\n@@ -34,8 +35,11 @@ class TestConditionChecker : public AbstractThresholdConditionChecker\n     mutable ThresholdConditionCache cache;\n \n public:\n+    bool m_lockinontimeout{false};\n+\n     int StartHeight(const Consensus::Params& params) const override { return 100; }\n     int TimeoutHeight(const Consensus::Params& params) const override { return 200; }\n+    bool LockinOnTimeout(const Consensus::Params& params) const override { return m_lockinontimeout; }\n     int Period(const Consensus::Params& params) const override { return 10; }\n     int Threshold(const Consensus::Params& params) const override { return 9; }\n     int MinActivationHeight(const Consensus::Params& params) const override { return 0; }\n@@ -107,6 +111,14 @@ class VersionBitsTester\n          Reset();\n     }\n \n+    VersionBitsTester& SetLockinOnTimeout(const bool lockinontimeout) {\n+        for (unsigned int  i = 0; i < CHECKERS; i++) {\n+            checker[i].m_lockinontimeout = lockinontimeout;\n+            checker_delayed[i].m_lockinontimeout = lockinontimeout;\n+        }\n+        return *this;\n+    }\n+\n     VersionBitsTester& Mine(unsigned int height, int32_t nTime, int32_t nVersion) {\n         while (vpblock.size() < height) {\n             CBlockIndex* pindex = new CBlockIndex();\n@@ -177,6 +189,7 @@ class VersionBitsTester\n \n     VersionBitsTester& TestDefined() { return TestState(ThresholdState::DEFINED); }\n     VersionBitsTester& TestStarted() { return TestState(ThresholdState::STARTED); }\n+    VersionBitsTester& TestMustSignal() { return TestState(ThresholdState::MUST_SIGNAL); }\n     VersionBitsTester& TestLockedIn() { return TestState(ThresholdState::LOCKED_IN); }\n     VersionBitsTester& TestActive() { return TestState(ThresholdState::ACTIVE); }\n     VersionBitsTester& TestFailed() { return TestState(ThresholdState::FAILED); }\n@@ -217,6 +230,22 @@ BOOST_AUTO_TEST_CASE(versionbits_test)\n                            .Mine(250, TestTime(30004), 0).TestActive().TestStateSinceHeight(120, 250)\n                            .Mine(300, TestTime(40000), 0).TestActive().TestStateSinceHeight(120, 250)\n \n+        // DEFINED -> STARTED -> MUST_SIGNAL -> LOCKEDIN -> ACTIVE\n+                           .Reset().TestDefined()\n+                           .SetLockinOnTimeout(true)\n+                           .Mine(1, TestTime(1), 0).TestDefined().TestStateSinceHeight(0)\n+                           .Mine(99, TestTime(10000) - 1, 0x101).TestDefined().TestStateSinceHeight(0) // One block more and it would be started\n+                           .Mine(100, TestTime(10000), 0x101).TestStarted().TestStateSinceHeight(100) // So that's what happens the next period\n+                           .Mine(189, TestTime(10010), 0).TestStarted().TestStateSinceHeight(100)\n+                           .Mine(190, TestTime(10020), 0).TestMustSignal().TestStateSinceHeight(190)\n+                           .Mine(199, TestTime(10030), 0).TestMustSignal().TestStateSinceHeight(190) // 9 new blocks\n+                           .Mine(200, TestTime(29999), 0x200).TestLockedIn().TestStateSinceHeight(200) // 1 old block (so 9 out of the past 10)\n+                           .Mine(209, TestTime(30001), 0).TestLockedIn().TestStateSinceHeight(200)\n+                           .Mine(210, TestTime(30002), 0).TestActiveDelayed().TestStateSinceHeight(210, 200)\n+                           .Mine(290, TestTime(30003), 0).TestActive().TestStateSinceHeight(210, 250)\n+                           .Mine(390, TestTime(40000), 0).TestActive().TestStateSinceHeight(210, 250)\n+                           .SetLockinOnTimeout(false)\n+\n         // DEFINED multiple periods -> STARTED multiple periods -> FAILED\n                            .Reset().TestDefined().TestStateSinceHeight(0)\n                            .Mine(9, TestTime(999), 0).TestDefined().TestStateSinceHeight(0)"
      },
      {
        "sha": "f1851cb30c99ae77ca07e35e0ab38f35d6039603",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92b5a6f2a282a713854b659d08398b0c62180730/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92b5a6f2a282a713854b659d08398b0c62180730/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=92b5a6f2a282a713854b659d08398b0c62180730",
        "patch": "@@ -1818,7 +1818,7 @@ int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Para\n \n     for (int i = 0; i < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; i++) {\n         ThresholdState state = VersionBitsState(pindexPrev, params, static_cast<Consensus::DeploymentPos>(i), versionbitscache);\n-        if (state == ThresholdState::LOCKED_IN || state == ThresholdState::STARTED) {\n+        if (state == ThresholdState::LOCKED_IN || state == ThresholdState::MUST_SIGNAL || state == ThresholdState::STARTED) {\n             nVersion |= VersionBitsMask(params, static_cast<Consensus::DeploymentPos>(i));\n         }\n     }\n@@ -1839,6 +1839,7 @@ class WarningBitsConditionChecker : public AbstractThresholdConditionChecker\n \n     int StartHeight(const Consensus::Params& params) const override { return 0; }\n     int TimeoutHeight(const Consensus::Params& params) const override { return std::numeric_limits<int>::max(); }\n+    bool LockinOnTimeout(const Consensus::Params& params) const override { return false; }\n     int Period(const Consensus::Params& params) const override { return params.nMinerConfirmationWindow; }\n     int Threshold(const Consensus::Params& params) const override { return params.m_vbits_min_threshold; }\n     int MinActivationHeight(const Consensus::Params& params) const override { return 0; }"
      },
      {
        "sha": "1f2aaea00e9de54ff4db791de0f2f29200922e0e",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92b5a6f2a282a713854b659d08398b0c62180730/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92b5a6f2a282a713854b659d08398b0c62180730/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=92b5a6f2a282a713854b659d08398b0c62180730",
        "patch": "@@ -12,6 +12,7 @@ ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex*\n     int height_start = StartHeight(params);\n     int height_timeout = TimeoutHeight(params);\n     int height_active_min = MinActivationHeight(params);\n+    const bool lockinontimeout = LockinOnTimeout(params);\n \n     // Check if this deployment is never active.\n     if (height_start == Consensus::VBitsDeployment::NEVER_ACTIVE && height_timeout == Consensus::VBitsDeployment::NEVER_ACTIVE) {\n@@ -79,11 +80,18 @@ ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex*\n                 }\n                 if (count >= nThreshold) {\n                     stateNext = ThresholdState::LOCKED_IN;\n+                } else if (lockinontimeout && height + nPeriod >= height_timeout) {\n+                    stateNext = ThresholdState::MUST_SIGNAL;\n                 } else if (height >= height_timeout) {\n                     stateNext = ThresholdState::FAILED;\n                 }\n                 break;\n             }\n+            case ThresholdState::MUST_SIGNAL: {\n+                // Always progresses into LOCKED_IN.\n+                stateNext = ThresholdState::LOCKED_IN;\n+                break;\n+            }\n             case ThresholdState::LOCKED_IN: {\n                 // Only progress into ACTIVE if minimum activation height has been reached\n                 if (height >= height_active_min) {\n@@ -179,6 +187,7 @@ class VersionBitsConditionChecker : public AbstractThresholdConditionChecker {\n protected:\n     int StartHeight(const Consensus::Params& params) const override { return params.vDeployments[id].startheight; }\n     int TimeoutHeight(const Consensus::Params& params) const override { return params.vDeployments[id].timeoutheight; }\n+    bool LockinOnTimeout(const Consensus::Params& params) const override { return params.vDeployments[id].lockinontimeout; }\n     int Period(const Consensus::Params& params) const override { return params.nMinerConfirmationWindow; }\n     int Threshold(const Consensus::Params& params) const override { return params.vDeployments[id].threshold; }\n     int MinActivationHeight(const Consensus::Params& params) const override { return params.vDeployments[id].m_min_activation_height; }"
      },
      {
        "sha": "65fa63217aaa5040e1f8b8cf4eddc6919bcd840a",
        "filename": "src/versionbits.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92b5a6f2a282a713854b659d08398b0c62180730/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92b5a6f2a282a713854b659d08398b0c62180730/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=92b5a6f2a282a713854b659d08398b0c62180730",
        "patch": "@@ -25,6 +25,7 @@ static const int32_t VERSIONBITS_NUM_BITS = 29;\n enum class ThresholdState {\n     DEFINED,   // First state that each softfork starts out as. The genesis block is by definition in this state for each deployment.\n     STARTED,   // For blocks past the startheight.\n+    MUST_SIGNAL, // If lockinontimeout is true, the period immediately before timeoutheight unless LOCKED_IN is reached first\n     LOCKED_IN, // For one retarget period after the first retarget period with STARTED blocks of which at least threshold have the associated bit set in nVersion.\n     ACTIVE,    // For all blocks after the LOCKED_IN retarget period (final state)\n     FAILED,    // For all blocks once the first retarget period after the timeout height is hit, if LOCKED_IN wasn't already reached (final state)\n@@ -57,6 +58,7 @@ class AbstractThresholdConditionChecker {\n     virtual bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const =0;\n     virtual int StartHeight(const Consensus::Params& params) const =0;\n     virtual int TimeoutHeight(const Consensus::Params& params) const =0;\n+    virtual bool LockinOnTimeout(const Consensus::Params& params) const =0;\n     virtual int Period(const Consensus::Params& params) const =0;\n     virtual int Threshold(const Consensus::Params& params) const =0;\n     virtual int MinActivationHeight(const Consensus::Params& params) const =0;"
      },
      {
        "sha": "3adad0ab3058b5e2f801d2de958b8a0d79c9d9fb",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92b5a6f2a282a713854b659d08398b0c62180730/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92b5a6f2a282a713854b659d08398b0c62180730/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=92b5a6f2a282a713854b659d08398b0c62180730",
        "patch": "@@ -141,6 +141,7 @@ def _test_getblockchaininfo(self):\n                     'bit': 28,\n                     'startheight': 144,\n                     'timeoutheight': 0x7fffffff,  # testdummy does not have a timeout so is set to the max int value\n+                    'lockinontimeout': False,\n                     'since': 144,\n                     'statistics': {\n                         'period': 144,\n@@ -158,6 +159,7 @@ def _test_getblockchaininfo(self):\n                     'status': 'active',\n                     'startheight': -1,\n                     'timeoutheight': 0x7fffffff,\n+                    'lockinontimeout': False,\n                     'since': 0\n                 },\n                 'height': 0,"
      }
    ]
  },
  {
    "sha": "3cb5a8d397fca71a13ecdae7afb9902f1a6712eb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozY2I1YThkMzk3ZmNhNzFhMTNlY2RhZTdhZmI5OTAyZjFhNjcxMmVi",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-10-15T18:14:59Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-22T19:42:11Z"
      },
      "message": "Enforce mandatory signalling during BIP 8 MUST_SIGNAL phase\n\nCo-authored-by: Anthony Towns <aj@erisian.com.au>",
      "tree": {
        "sha": "291950feb4ad50759684ebbafe67673c79fa3136",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/291950feb4ad50759684ebbafe67673c79fa3136"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3cb5a8d397fca71a13ecdae7afb9902f1a6712eb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cb5a8d397fca71a13ecdae7afb9902f1a6712eb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3cb5a8d397fca71a13ecdae7afb9902f1a6712eb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cb5a8d397fca71a13ecdae7afb9902f1a6712eb/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "92b5a6f2a282a713854b659d08398b0c62180730",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92b5a6f2a282a713854b659d08398b0c62180730",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/92b5a6f2a282a713854b659d08398b0c62180730"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 44,
      "deletions": 1
    },
    "files": [
      {
        "sha": "96942f7278d28ae490219aed7e9683e68ac12fd8",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cb5a8d397fca71a13ecdae7afb9902f1a6712eb/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cb5a8d397fca71a13ecdae7afb9902f1a6712eb/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=3cb5a8d397fca71a13ecdae7afb9902f1a6712eb",
        "patch": "@@ -827,6 +827,7 @@ static RPCHelpMan getblocktemplate()\n     }\n \n     UniValue vbavailable(UniValue::VOBJ);\n+    int32_t vbrequired{0};\n     for (int j = 0; j < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++j) {\n         Consensus::DeploymentPos pos = Consensus::DeploymentPos(j);\n         ThresholdState state = VersionBitsState(pindexPrev, consensusParams, pos, versionbitscache);\n@@ -836,6 +837,9 @@ static RPCHelpMan getblocktemplate()\n                 // Not exposed to GBT at all\n                 break;\n             case ThresholdState::MUST_SIGNAL:\n+                // Bit must be set in block version\n+                vbrequired |= VersionBitsMask(consensusParams, pos);\n+                // FALL THROUGH to set nVersion and get vbavailable set...\n             case ThresholdState::LOCKED_IN:\n                 // Ensure bit is set in block version\n                 pblock->nVersion |= VersionBitsMask(consensusParams, pos);\n@@ -871,7 +875,7 @@ static RPCHelpMan getblocktemplate()\n     result.pushKV(\"version\", pblock->nVersion);\n     result.pushKV(\"rules\", aRules);\n     result.pushKV(\"vbavailable\", vbavailable);\n-    result.pushKV(\"vbrequired\", int(0));\n+    result.pushKV(\"vbrequired\", vbrequired);\n \n     if (nMaxVersionPreVB >= 2) {\n         // If VB is supported by the client, nMaxVersionPreVB is -1, so we won't get here"
      },
      {
        "sha": "449bbbc5b8599bf9ff67c540474ddf204bb778f2",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 0,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cb5a8d397fca71a13ecdae7afb9902f1a6712eb/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cb5a8d397fca71a13ecdae7afb9902f1a6712eb/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=3cb5a8d397fca71a13ecdae7afb9902f1a6712eb",
        "patch": "@@ -47,6 +47,7 @@\n #include <util/system.h>\n #include <util/translation.h>\n #include <validationinterface.h>\n+#include <versionbitsinfo.h>\n #include <warnings.h>\n \n #include <optional>\n@@ -1926,6 +1927,8 @@ static int64_t nTimeCallbacks = 0;\n static int64_t nTimeTotal = 0;\n static int64_t nBlocksTotal = 0;\n \n+static bool ContextualCheckBlockHeaderVolatile(const CBlockHeader&, BlockValidationState&, const CChainParams&, const CBlockIndex* pindexPrev) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+\n /** Apply the effects of this block (with given index) on the UTXO set represented by coins.\n  *  Validity checks that depend on the UTXO set are also done; ConnectBlock()\n  *  can fail if those validity checks fail (among other reasons). */\n@@ -1960,6 +1963,10 @@ bool CChainState::ConnectBlock(const CBlock& block, BlockValidationState& state,\n         return error(\"%s: Consensus::CheckBlock: %s\", __func__, state.ToString());\n     }\n \n+    if (!ContextualCheckBlockHeaderVolatile(block, state, chainparams, pindex->pprev)) {\n+        return error(\"%s: Consensus::ContextualCheckBlockHeaderVolatile: %s\", __func__, state.ToString());\n+    }\n+\n     // verify that the view's current state corresponds to the previous block\n     uint256 hashPrevBlock = pindex->pprev == nullptr ? uint256() : pindex->pprev->GetBlockHash();\n     assert(hashPrevBlock == view.GetBestBlock());\n@@ -3503,6 +3510,38 @@ static bool ContextualCheckBlockHeader(const CBlockHeader& block, BlockValidatio\n             return state.Invalid(BlockValidationResult::BLOCK_INVALID_HEADER, strprintf(\"bad-version(0x%08x)\", block.nVersion),\n                                  strprintf(\"rejected nVersion=0x%08x block\", block.nVersion));\n \n+    if (!ContextualCheckBlockHeaderVolatile(block, state, params, pindexPrev)) return false;\n+\n+    return true;\n+}\n+\n+/** Context-dependent validity checks, but rechecked in ConnectBlock().\n+ *  Note that -reindex-chainstate skips the validation that happens here!\n+ */\n+static bool ContextualCheckBlockHeaderVolatile(const CBlockHeader& block, BlockValidationState& state, const CChainParams& params, const CBlockIndex* pindexPrev) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+{\n+    const Consensus::Params& consensusParams = params.GetConsensus();\n+\n+    // Enforce MUST_SIGNAL status of deployments\n+    for (int j = 0; j < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++j) {\n+        Consensus::DeploymentPos deployment_pos = Consensus::DeploymentPos(j);\n+        ThresholdState deployment_state = VersionBitsState(pindexPrev, consensusParams, deployment_pos, versionbitscache);\n+        if (deployment_state == ThresholdState::MUST_SIGNAL) {\n+            if ((block.nVersion & VersionBitsMask(consensusParams, deployment_pos)) == 0 || (block.nVersion & VERSIONBITS_TOP_MASK) != VERSIONBITS_TOP_BITS) {\n+                VBitsStats stats = VersionBitsStatistics(pindexPrev, consensusParams, deployment_pos);\n+                if (stats.elapsed == stats.period) {\n+                    // first block in new period\n+                    stats.count = stats.elapsed = 0;\n+                }\n+                ++stats.elapsed;\n+                if (stats.count + (stats.period - stats.elapsed) < stats.threshold) {\n+                    const auto& deployment_name = VersionBitsDeploymentInfo[deployment_pos].name;\n+                    return state.Invalid(BlockValidationResult::BLOCK_RECENT_CONSENSUS_CHANGE, std::string{\"bad-vbit-unset-\"} + deployment_name, std::string{deployment_name} + \" must be signalled\");\n+                }\n+            }\n+        }\n+    }\n+\n     return true;\n }\n "
      }
    ]
  },
  {
    "sha": "d3f7d7cb96994e4891f0b7ea63a74d3be0635717",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkM2Y3ZDdjYjk2OTk0ZTQ4OTFmMGI3ZWE2M2E3NGQzYmUwNjM1NzE3",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-22T20:06:09Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-22T22:25:11Z"
      },
      "message": "Add -vblot to allow configuring lockinontimeout\n\nSince lockinontimeout for any deployment on any network should be\nconfigurable, this is added as a new command line option specifically\nfor configuring lockinontimeout.",
      "tree": {
        "sha": "91dbdcd028eadc9e9e517a819b592bfc5a3547f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/91dbdcd028eadc9e9e517a819b592bfc5a3547f0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d3f7d7cb96994e4891f0b7ea63a74d3be0635717",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3f7d7cb96994e4891f0b7ea63a74d3be0635717",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d3f7d7cb96994e4891f0b7ea63a74d3be0635717",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3f7d7cb96994e4891f0b7ea63a74d3be0635717/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3cb5a8d397fca71a13ecdae7afb9902f1a6712eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cb5a8d397fca71a13ecdae7afb9902f1a6712eb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3cb5a8d397fca71a13ecdae7afb9902f1a6712eb"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 55,
      "deletions": 1
    },
    "files": [
      {
        "sha": "fb25463dece59c192de032262654dc2dd362cae7",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 1,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3f7d7cb96994e4891f0b7ea63a74d3be0635717/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3f7d7cb96994e4891f0b7ea63a74d3be0635717/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=d3f7d7cb96994e4891f0b7ea63a74d3be0635717",
        "patch": "@@ -91,6 +91,8 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].timeoutheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].threshold = 1916; // 95% of 2016\n \n+        UpdateActivationParametersFromArgs(gArgs);\n+\n         consensus.nMinimumChainWork = uint256S(\"0x00000000000000000000000000000000000000001533efd8d716a517fe2c5008\");\n         consensus.defaultAssumeValid = uint256S(\"0x0000000000000000000b9d2ec5a352ecba0592946514a92f14319dc2b367fc72\"); // 654683\n \n@@ -210,6 +212,8 @@ class CTestNetParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].timeoutheight = Consensus::VBitsDeployment::NEVER_ACTIVE;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].threshold = 1512; // 75% of 2016\n \n+        UpdateActivationParametersFromArgs(gArgs);\n+\n         consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000000001db6ec4ac88cf2272c6\");\n         consensus.defaultAssumeValid = uint256S(\"0x000000000000006433d1efec504c53ca332b64963c425395515b01977bd7b3b0\"); // 1864000\n \n@@ -347,6 +351,8 @@ class SigNetParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].timeoutheight = Consensus::VBitsDeployment::NO_TIMEOUT;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].threshold = 1916; // 95% of 2016\n \n+        UpdateActivationParametersFromArgs(args);\n+\n         // message start is defined as the first 4 bytes of the sha256d of the block script\n         CHashWriter h(SER_DISK, 0);\n         h << consensus.signet_challenge;\n@@ -481,7 +487,7 @@ class CRegTestParams : public CChainParams {\n         consensus.vDeployments[d].m_min_activation_height = min_activation_height;\n     }\n     bool CheckVBitsHeights(std::string& error, int64_t startheight, int64_t timeoutheight, int64_t min_activation_height);\n-    void UpdateActivationParametersFromArgs(const ArgsManager& args);\n+    void UpdateActivationParametersFromArgs(const ArgsManager& args) override;\n };\n \n bool CRegTestParams::CheckVBitsHeights(std::string& error, int64_t startheight, int64_t timeoutheight, int64_t min_activation_height)\n@@ -527,6 +533,8 @@ bool CRegTestParams::CheckVBitsHeights(std::string& error, int64_t startheight,\n \n void CRegTestParams::UpdateActivationParametersFromArgs(const ArgsManager& args)\n {\n+    CChainParams::UpdateActivationParametersFromArgs(args);\n+\n     if (args.IsArgSet(\"-segwitheight\")) {\n         int64_t height = args.GetArg(\"-segwitheight\", consensus.SegwitHeight);\n         if (height < -1 || height >= std::numeric_limits<int>::max()) {\n@@ -607,3 +615,37 @@ std::ostream& operator<<(std::ostream& o, const AssumeutxoData& aud)\n     o << strprintf(\"AssumeutxoData(%s, %s)\", aud.hash_serialized.ToString(), aud.nChainTx);\n     return o;\n }\n+\n+void CChainParams::UpdateActivationParametersFromArgs(const ArgsManager& args)\n+{\n+    if (!args.IsArgSet(\"-vblot\")) return;\n+\n+    for (const std::string& deployment : args.GetArgs(\"-vblot\")) {\n+        std::vector<std::string> deployment_params;\n+        boost::split(deployment_params, deployment, boost::is_any_of(\":\"));\n+        if (deployment_params.size() != 2) {\n+            throw std::runtime_error(\"Version bits lockinontimeout parameter malformed, expecting \\\"deployment:(true|false)\\\"\");\n+        }\n+        bool lockinontimeout = false;\n+        if (deployment_params[1] == \"true\") {\n+            lockinontimeout = true;\n+        } else if (deployment_params[1] == \"false\") {\n+            lockinontimeout = false;\n+        } else {\n+            throw std::runtime_error(\"Version bits lockinontimeout parameter malformed, expecting either \\\"true\\\" or \\\"false\\\".\");\n+        }\n+\n+        bool found = false;\n+        for (int j=0; j < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++j) {\n+            if (deployment_params[0] == VersionBitsDeploymentInfo[j].name) {\n+                consensus.vDeployments[j].lockinontimeout = lockinontimeout;\n+                found = true;\n+                LogPrintf(\"Setting version bits lockinontimeout parameter for %s to %s\\n\", deployment_params[0], deployment_params[1]);\n+                break;\n+            }\n+        }\n+        if (!found) {\n+            throw std::runtime_error(strprintf(\"Invalid deployment (%s)\", deployment_params[0]));\n+        }\n+    }\n+}"
      },
      {
        "sha": "2c53cea65278e0cd28a53bff78ef7b22b4e81b7a",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3f7d7cb96994e4891f0b7ea63a74d3be0635717/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3f7d7cb96994e4891f0b7ea63a74d3be0635717/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=d3f7d7cb96994e4891f0b7ea63a74d3be0635717",
        "patch": "@@ -116,6 +116,8 @@ class CChainParams\n     const MapAssumeutxo& Assumeutxo() const { return m_assumeutxo_data; }\n \n     const ChainTxData& TxData() const { return chainTxData; }\n+    /** Update versionbits deployment parameters from arguments. */\n+    virtual void UpdateActivationParametersFromArgs(const ArgsManager& args);\n protected:\n     CChainParams() {}\n "
      },
      {
        "sha": "3779d89f1c09e645fab2243fccc0f0d7ef98c729",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3f7d7cb96994e4891f0b7ea63a74d3be0635717/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3f7d7cb96994e4891f0b7ea63a74d3be0635717/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=d3f7d7cb96994e4891f0b7ea63a74d3be0635717",
        "patch": "@@ -22,6 +22,7 @@ void SetupChainParamsBaseOptions(ArgsManager& argsman)\n                  \"This is intended for regression testing tools and app development. Equivalent to -chain=regtest.\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-segwitheight=<n>\", \"Set the activation height of segwit. -1 to disable. (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-testnet\", \"Use the test chain. Equivalent to -chain=test.\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n+    argsman.AddArg(\"-vblot=deployment:(true|false)\", \"Set the lockinontimeout parameter for the specified version bits deployment\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-vbparams=deployment:@startheight:@timeoutheight[:@min_activation_height]\", \"Use given start, timeout, and minimum activation heights for specified version bits deployment (regtest-only). For an always active deployment, use @-1:@2147483647. For a never active deployment, use @-2:@-2.\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-signet\", \"Use the signet chain. Equivalent to -chain=signet. Note that the network is defined by the -signetchallenge parameter\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-signetchallenge\", \"Blocks must satisfy the given script to be considered valid (only for signet networks; defaults to the global default signet test network challenge)\", ArgsManager::ALLOW_STRING, OptionsCategory::CHAINPARAMS);"
      },
      {
        "sha": "c9080fe09afc6c464f68441ed5ed02ef5573883d",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3f7d7cb96994e4891f0b7ea63a74d3be0635717/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3f7d7cb96994e4891f0b7ea63a74d3be0635717/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d3f7d7cb96994e4891f0b7ea63a74d3be0635717",
        "patch": "@@ -79,7 +79,9 @@\n #include <sys/stat.h>\n #endif\n \n+#include <boost/algorithm/string/classification.hpp>\n #include <boost/algorithm/string/replace.hpp>\n+#include <boost/algorithm/string/split.hpp>\n #include <boost/signals2/signal.hpp>\n \n #if ENABLE_ZMQ\n@@ -1432,6 +1434,13 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n             return InitError(strprintf(_(\"User Agent comment (%s) contains unsafe characters.\"), cmt));\n         uacomments.push_back(cmt);\n     }\n+    // Add a uacomment for each vblot setting\n+    for (const std::string& deployment : args.GetArgs(\"-vblot\")) {\n+        std::vector<std::string> deployment_params;\n+        boost::split(deployment_params, deployment, boost::is_any_of(\":\"));\n+        // Already validated by chainparams init, don't need to check again\n+        uacomments.push_back(strprintf(\"%s.lot@%s\", deployment_params[0], deployment_params[1]));\n+    }\n     strSubVersion = FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, uacomments);\n     if (strSubVersion.size() > MAX_SUBVERSION_LENGTH) {\n         return InitError(strprintf(_(\"Total length of network version string (%i) exceeds maximum length (%i). Reduce the number or size of uacomments.\"),"
      }
    ]
  },
  {
    "sha": "07104f202706118609dad7562bd6b0bc032e3eeb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNzEwNGYyMDI3MDYxMTg2MDlkYWQ3NTYyYmQ2YjBiYzAzMmUzZWVi",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-22T21:40:26Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-22T22:25:11Z"
      },
      "message": "Test BIP 8 lot=true",
      "tree": {
        "sha": "743748e36aa6b0708989448988933b1a8bcfde02",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/743748e36aa6b0708989448988933b1a8bcfde02"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/07104f202706118609dad7562bd6b0bc032e3eeb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07104f202706118609dad7562bd6b0bc032e3eeb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/07104f202706118609dad7562bd6b0bc032e3eeb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07104f202706118609dad7562bd6b0bc032e3eeb/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d3f7d7cb96994e4891f0b7ea63a74d3be0635717",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3f7d7cb96994e4891f0b7ea63a74d3be0635717",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d3f7d7cb96994e4891f0b7ea63a74d3be0635717"
      }
    ],
    "stats": {
      "total": 105,
      "additions": 89,
      "deletions": 16
    },
    "files": [
      {
        "sha": "4f3a07b9ec734d2d2e233a0dbf471f70652a0e8c",
        "filename": "test/functional/feature_bip8.py",
        "status": "modified",
        "additions": 89,
        "deletions": 16,
        "changes": 105,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07104f202706118609dad7562bd6b0bc032e3eeb/test/functional/feature_bip8.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07104f202706118609dad7562bd6b0bc032e3eeb/test/functional/feature_bip8.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip8.py?ref=07104f202706118609dad7562bd6b0bc032e3eeb",
        "patch": "@@ -8,27 +8,29 @@\n \n class Bip8Test(BitcoinTestFramework):\n     def set_test_params(self):\n-        self.num_nodes = 3\n+        self.num_nodes = 4\n         self.setup_clean_chain = True\n         # Node 0 has TestDummy inactive\n         # Node 1 has a regular activation window\n         # Node 2 uses speedy trial.\n+        # Node 3 ise like Node 1 but with lockinontimeout=true\n         self.extra_args = [\n             ['-vbparams=testdummy:@-2:@-2'],\n             ['-vbparams=testdummy:@144:@{}'.format(144 * 3)],\n-            ['-vbparams=testdummy:@144:@{}:@{}'.format(144 * 2, 144 * 4)],\n+            ['-vbparams=testdummy:@144:@{}:@{}'.format(144 * 3, 144 * 4)],\n+            ['-vbparams=testdummy:@144:@{}'.format(144 * 3), \"-vblot=testdummy:true\"],\n         ]\n \n-    def test_height(self, height, status, mine_from):\n+    def test_height(self, height, status, mine_from, nodes):\n         if height > self.height:\n             self.log.info(\"Test status at height {}...\".format(height))\n             self.nodes[mine_from].generate(height - self.height)\n-            self.sync_blocks()\n+            self.sync_blocks(nodes)\n         elif height < self.height:\n             assert mine_from is None\n             self.log.info(\"Roll back to height {}...\".format(height))\n             old_block = self.nodes[0].getblockhash(height + 1)\n-            for node in self.nodes:\n+            for node in nodes:\n                 node.invalidateblock(old_block)\n         else:\n             assert mine_from is None\n@@ -46,9 +48,12 @@ def test_height(self, height, status, mine_from):\n             else:\n                 assert_equal(info[\"softforks\"][\"testdummy\"][\"bip8\"][\"status\"], st)\n \n-    def run_test(self):\n-        self.height = 0\n-        self.test_height(0, [None, \"defined\", \"defined\"], None)\n+    def test_base_bip8(self):\n+        # Exclude node 3 because it does lockinontimeout which we don't want to test here\n+        self.stop_node(3)\n+        nodes = self.nodes[0:3]\n+\n+        self.test_height(0, [None, \"defined\", \"defined\"], None, nodes)\n \n         # BIP 8 state transitions from \"defined\" to \"started\" or \"failed\" after\n         # the last block of the retargeting period has been mined. This means\n@@ -57,21 +62,89 @@ def run_test(self):\n         #\n         # The next retargeting period starts at block 144, so nothing should\n         # happen at 142 and the state should change at 143.\n-        self.test_height(144-2, [None, \"defined\", \"defined\"], 0)\n-        self.test_height(144-1, [None, \"started\", \"started\"], 0)\n+        self.test_height(144-2, [None, \"defined\", \"defined\"], 0, nodes)\n+        self.test_height(144-1, [None, \"started\", \"started\"], 0, nodes)\n \n         self.log.info(\"Test status when not signaling...\")\n-        self.test_height(144*2-1, [None, \"started\", \"failed\"], 0)\n-        self.test_height(144*3-1, [None, \"failed\", \"failed\"], 0)\n+        self.test_height(144*2-1, [None, \"started\", \"started\"], 0, nodes)\n+        self.test_height(144*3-1, [None, \"failed\", \"failed\"], 0, nodes)\n \n         # The new branch has unique block hashes, because of the signalling and\n         # because generate uses a deterministic address that depends on the node\n         # index.\n         self.log.info(\"Test status when signaling...\")\n-        self.test_height(144-1, [None, \"started\", \"started\"], None)\n-        self.test_height(144*2-1, [None, \"locked_in\", \"locked_in\"], 2)\n-        self.test_height(144*3-1, [None, \"active\", \"locked_in\"], 2)\n-        self.test_height(144*4-1, [None, \"active\", \"active\"], 2)\n+        self.test_height(144-1, [None, \"started\", \"started\"], None, nodes)\n+        self.test_height(144*2-1, [None, \"locked_in\", \"locked_in\"], 2, nodes)\n+        self.test_height(144*3-1, [None, \"active\", \"locked_in\"], 2, nodes)\n+        self.test_height(144*4-1, [None, \"active\", \"active\"], 2, nodes)\n+\n+    def test_lot(self):\n+        # Reset all of the nodes, except node 3\n+        self.test_height(0, [None, \"defined\", \"defined\"], None, self.nodes[0:3])\n+\n+        # Now start node3, connect it, and make sure all of the nodes are in sync\n+        self.start_node(3, self.extra_args[3])\n+        self.connect_nodes(2, 3)\n+        self.connect_nodes(1, 3)\n+        self.connect_nodes(0, 3)\n+        self.test_height(1, [None, \"defined\", \"defined\", \"defined\"], 3, self.nodes)\n+\n+        self.log.info(\"Test must_signal transition\")\n+        self.test_height(144*2-1, [None, \"started\", \"started\", \"must_signal\"], 0, self.nodes)\n+\n+        self.log.info(\"Test must_signal threshold boundary\")\n+\n+        self.log.debug(\"Check period start, everything is 0\")\n+        self.sync_blocks()\n+        info = self.nodes[3].getblockchaininfo()\n+        assert_equal(info[\"softforks\"][\"testdummy\"][\"bip8\"][\"status\"], \"must_signal\")\n+        assert_equal(info[\"softforks\"][\"testdummy\"][\"bip8\"][\"statistics\"][\"count\"], 0)\n+        assert_equal(info[\"softforks\"][\"testdummy\"][\"bip8\"][\"statistics\"][\"elapsed\"], 0)\n+\n+        self.log.debug(\"Mine 107 (1 under threshold) signaling blocks\")\n+        self.nodes[3].generate(107)\n+        self.sync_blocks()\n+        info = self.nodes[3].getblockchaininfo()\n+        assert_equal(info[\"softforks\"][\"testdummy\"][\"bip8\"][\"status\"], \"must_signal\")\n+        assert_equal(info[\"softforks\"][\"testdummy\"][\"bip8\"][\"statistics\"][\"count\"], 107)\n+        assert_equal(info[\"softforks\"][\"testdummy\"][\"bip8\"][\"statistics\"][\"elapsed\"], 107)\n+\n+        self.log.debug(\"Mine 36 (up to 1 before end of period) non-signaling blocks\")\n+        self.nodes[0].generate(36)\n+        self.sync_blocks()\n+        info = self.nodes[3].getblockchaininfo()\n+        assert_equal(info[\"softforks\"][\"testdummy\"][\"bip8\"][\"status\"], \"must_signal\")\n+        assert_equal(info[\"softforks\"][\"testdummy\"][\"bip8\"][\"statistics\"][\"count\"], 107)\n+        assert_equal(info[\"softforks\"][\"testdummy\"][\"bip8\"][\"statistics\"][\"elapsed\"], 143)\n+\n+        self.log.debug(\"Mine 1 signaling block to become locked_in\")\n+        self.nodes[3].generate(1)\n+        self.sync_blocks()\n+        for node in self.nodes[1:]:\n+            info = node.getblockchaininfo()\n+            assert_equal(info[\"softforks\"][\"testdummy\"][\"bip8\"][\"status\"], \"locked_in\")\n+        last_block_in_period = info[\"bestblockhash\"]\n+\n+        self.log.debug(\"Invalidate to be able to re-mine the last block in the period\")\n+        for node in self.nodes:\n+            node.invalidateblock(last_block_in_period)\n+\n+        self.log.debug(\"Mine 1 non-signaling block. Node 3 should reject it\")\n+        self.disconnect_nodes(0, 3)\n+        self.disconnect_nodes(0, 2)\n+        self.disconnect_nodes(0, 1)\n+        blockhash = self.nodes[0].generate(1)[0]\n+        block = self.nodes[0].getblock(blockhash, 0)\n+        for node in self.nodes[1:3]:\n+            node.submitblock(block)\n+            info = node.getblockchaininfo()\n+            assert_equal(info[\"softforks\"][\"testdummy\"][\"bip8\"][\"status\"], \"failed\")\n+        assert_equal(self.nodes[3].submitblock(block), \"bad-vbit-unset-testdummy\")\n+\n+    def run_test(self):\n+        self.height = 0\n+        self.test_base_bip8()\n+        self.test_lot()\n \n if __name__ == '__main__':\n     Bip8Test().main()"
      }
    ]
  },
  {
    "sha": "0816a4e8f0ae8aebc7706876ef0d1ec86568efe1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowODE2YTRlOGYwYWU4YWViYzc3MDY4NzZlZjBkMWVjODY1NjhlZmUx",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-22T21:58:24Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-22T22:25:11Z"
      },
      "message": "tests: add functional test for bip8 activation\n\nCo-authored-by: Luke Dashjr <luke-jr+git@utopios.org>\nCo-authored-by: Anthony Towns <aj@erisian.com.au>",
      "tree": {
        "sha": "1b849f7479d827b16dd018e5e3bbf2fdb0ceac3d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1b849f7479d827b16dd018e5e3bbf2fdb0ceac3d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0816a4e8f0ae8aebc7706876ef0d1ec86568efe1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0816a4e8f0ae8aebc7706876ef0d1ec86568efe1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0816a4e8f0ae8aebc7706876ef0d1ec86568efe1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0816a4e8f0ae8aebc7706876ef0d1ec86568efe1/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "07104f202706118609dad7562bd6b0bc032e3eeb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07104f202706118609dad7562bd6b0bc032e3eeb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/07104f202706118609dad7562bd6b0bc032e3eeb"
      }
    ],
    "stats": {
      "total": 278,
      "additions": 278,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a1490696e2d4b60851fd7acf01f9111506b5496b",
        "filename": "test/functional/feature_bip8_signaling.py",
        "status": "added",
        "additions": 277,
        "deletions": 0,
        "changes": 277,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0816a4e8f0ae8aebc7706876ef0d1ec86568efe1/test/functional/feature_bip8_signaling.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0816a4e8f0ae8aebc7706876ef0d1ec86568efe1/test/functional/feature_bip8_signaling.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip8_signaling.py?ref=0816a4e8f0ae8aebc7706876ef0d1ec86568efe1",
        "patch": "@@ -0,0 +1,277 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test bip8 activation\n+\"\"\"\n+\n+import random\n+import time\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_greater_than_or_equal\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.p2p import P2PDataStore, p2p_lock\n+from test_framework.messages import CBlockHeader, msg_headers\n+\n+SEED = random.randrange(2**128)\n+\n+VB_SIGNAL = 0x20000000 | (0x01 << 28)\n+VB_NOSIGNAL = 0x20000000\n+\n+MAX_HEADERS = 2000\n+\n+BASE_TIME = int(time.time()) - 12*60*60\n+\n+class P2PBlockCheck(P2PDataStore):\n+    def __init__(self, node, blocks):\n+        super().__init__()\n+        self.node = node\n+        with p2p_lock:\n+            for block in blocks:\n+                self.block_store[block.sha256] = block\n+                self.last_block_hash = block.sha256\n+\n+    def refresh_headers(self):\n+        headers = []\n+        with p2p_lock:\n+            for _, block in self.block_store.items():\n+                headers.append(CBlockHeader(block))\n+        while headers:\n+            self.send_message(msg_headers(headers[:MAX_HEADERS]))\n+            headers = headers[MAX_HEADERS:]\n+\n+    def send_blocks(self, blocks, *, reject_reason=None, timeout=20):\n+        tiphash = blocks[-1].hash\n+\n+        with p2p_lock:\n+            for block in blocks:\n+                self.block_store[block.sha256] = block\n+                self.last_block_hash = block.sha256\n+\n+        reject_reason = [reject_reason] if reject_reason else []\n+        success = reject_reason == []\n+\n+        with self.node.assert_debug_log(expected_msgs=reject_reason, timeout=timeout):\n+            self.send_message(msg_headers([CBlockHeader(block) for block in blocks]))\n+            self.sync_with_ping(timeout)\n+            if success:\n+                self.wait_until(lambda: self.node.getbestblockhash() == tiphash, timeout=timeout)\n+\n+        if not success:\n+            assert self.node.getbestblockhash() != tiphash\n+\n+class BIP8Test(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+\n+    def setup_network(self):\n+        # don't want to connect the bitcoinds to each other\n+        self.setup_nodes()\n+\n+    def generate_blocks(self, versioniter, prevblock, tipheight):\n+        test_blocks = []\n+\n+        for version in versioniter:\n+            blocktime = BASE_TIME + (tipheight * 6)  # 6 seconds between blocks\n+            block = create_block(prevblock, create_coinbase(tipheight), blocktime)\n+            block.nVersion = version\n+            block.rehash()\n+            block.solve()\n+            test_blocks.append(block)\n+            prevblock = block.sha256\n+            tipheight = tipheight + 1\n+\n+        return test_blocks\n+\n+    def apply_blocks_and_check(self, versions, base_height, state, height=None):\n+        start = base_height + 288\n+        stop = base_height + 720\n+\n+        if height is None:\n+            bci = self.nodes[0].getblockchaininfo()\n+            prevblock = int(\"0x\" + bci[\"bestblockhash\"], 0)\n+            tipheight = bci[\"blocks\"] + 1\n+        else:\n+            prevblock = int(\"0x\" + self.nodes[0].getblockhash(height), 0)\n+            tipheight = height + 1\n+\n+        blocks = self.generate_blocks(versions, prevblock, tipheight)\n+\n+        self.helper[0].send_blocks(blocks)\n+        self.helper[1].send_blocks(blocks)\n+        self.helper[2].send_blocks(blocks)\n+        if state[0] == \"stopped\":\n+            ok_cnt = state[1]-tipheight\n+            if ok_cnt > 0:\n+                self.helper[3].send_blocks(blocks[:ok_cnt])\n+            if ok_cnt >= 0:\n+                self.helper[3].send_blocks(blocks[ok_cnt:], reject_reason=\"bad-vbit-unset-testdummy\")\n+        else:\n+            self.helper[3].send_blocks(blocks)\n+\n+        heights, status = self.get_softfork_status()\n+\n+        # compare results\n+        assert_equal(heights[0], heights[1], heights[2])\n+        assert_greater_than_or_equal(heights[0], heights[3])\n+        if state[0] != \"stopped\":\n+            assert_equal(heights[0], heights[3])\n+\n+        if state[0] != \"stopped\":\n+            assert_equal(status[2][\"bip8\"].get(\"statistics\", None), status[3][\"bip8\"].get(\"statistics\", None))\n+            assert_equal(status[2][\"active\"], status[3][\"active\"])\n+\n+        # never active\n+        assert_equal(status[0], None)\n+\n+        # always active\n+        assert_equal(status[1], {'type': 'bip8', 'bip8': {'status': 'active', 'startheight': -1, 'timeoutheight': 0x7fffffff, 'lockinontimeout': True, 'since': 0}, 'height': 0, 'active': True})\n+\n+        # lockinontimeout=false\n+        if \"statistics\" in status[2][\"bip8\"]:\n+            del status[2][\"bip8\"][\"statistics\"]\n+\n+        if state[0] == \"defined\":\n+            assert_equal(status[2], {'type': 'bip8', 'bip8': {'status': 'defined', 'startheight': start, 'timeoutheight': stop, 'lockinontimeout': False, 'since': state[1]}, 'active': False})\n+        elif state[0] == \"started\" or state[0] == \"must_signal\":\n+            since = state[1] if state[0] == \"started\" else (state[1] - 288)\n+            assert_equal(status[2], {'type': 'bip8', 'bip8': {'status': 'started', 'bit': 28, 'startheight': start, 'timeoutheight': stop, 'lockinontimeout': False, 'since': since}, 'active': False})\n+        elif state[0] == \"locked_in\":\n+            assert_equal(status[2], {'type': 'bip8', 'bip8': {'status': 'locked_in', 'startheight': start, 'timeoutheight': stop, 'lockinontimeout': False, 'since': state[1]}, 'active': False})\n+        elif state[0] == \"active\":\n+            assert_equal(status[2], {'type': 'bip8', 'bip8': {'status': 'active', 'startheight': start, 'timeoutheight': stop, 'lockinontimeout': False, 'since': state[1]}, 'height': state[1], 'active': True})\n+        elif state[0] == \"stopped\":\n+            failat = state[1] - (state[1] % 144) + 144\n+            assert_equal(status[2], {'type': 'bip8', 'bip8': {'status': 'failed', 'startheight': start, 'timeoutheight': stop, 'lockinontimeout': False, 'since': failat}, 'active': False})\n+        else:\n+            assert False, (\"bad state %r\" % (state))\n+\n+        # lockinontimeout=true\n+        if \"statistics\" in status[3][\"bip8\"]:\n+            assert_equal(status[3][\"bip8\"][\"statistics\"][\"possible\"], True)\n+            del status[3][\"bip8\"][\"statistics\"]\n+\n+        if state[0] == \"defined\":\n+            assert_equal(status[3], {'type': 'bip8', 'bip8': {'status': 'defined', 'startheight': start, 'timeoutheight': stop, 'lockinontimeout': True, 'since': state[1]}, 'active': False})\n+        elif state[0] == \"started\":\n+            assert_equal(status[3], {'type': 'bip8', 'bip8': {'status': 'started', 'bit': 28, 'startheight': start, 'timeoutheight': stop, 'lockinontimeout': True, 'since': state[1]}, 'active': False})\n+        elif state[0] == \"must_signal\" or state[0] == \"stopped\":\n+            since = state[1] - state[1] % 144\n+            assert_equal(status[3], {'type': 'bip8', 'bip8': {'status': 'must_signal', 'bit': 28, 'startheight': start, 'timeoutheight': stop, 'lockinontimeout': True, 'since': since}, 'active': False})\n+        elif state[0] == \"locked_in\":\n+            assert_equal(status[3], {'type': 'bip8', 'bip8': {'status': 'locked_in', 'startheight': start, 'timeoutheight': stop, 'lockinontimeout': True, 'since': state[1]}, 'active': False})\n+        elif state[0] == \"active\":\n+            assert_equal(status[3], {'type': 'bip8', 'bip8': {'status': 'active', 'startheight': start, 'timeoutheight': stop, 'lockinontimeout': True, 'since': state[1]}, 'height': state[1], 'active': True})\n+        else:\n+            assert False, (\"bad state %r\" % (state))\n+\n+        return blocks\n+\n+\n+    def get_softfork_status(self):\n+        info = [node.getblockchaininfo() for node in self.nodes]\n+        return zip( *[(i[\"blocks\"], i['softforks'].get('testdummy', None))\n+                    for i in info] )\n+\n+    def setup_vbparams(self):\n+        base_height = self.nodes[0].getblockcount()\n+        if base_height:\n+            base_height += 1\n+        assert base_height % 144 == 0\n+        start = base_height + 288\n+        stop = base_height + 720\n+\n+        for node in self.nodes:\n+            node.disconnect_p2ps()\n+        self.helper = []\n+        self.stop_nodes()\n+\n+        self.start_nodes(extra_args = [\n+            # never active\n+            [\"-vbparams=testdummy:@-2:@-2\", \"-vblot=testdummy:false\"],\n+            # always active\n+            [\"-vbparams=testdummy:@-1:@{}\".format(0x7fffffff), \"-vblot=testdummy:true\"],\n+            # abandon softfork if not locked in by timeout\n+            [\"-vbparams=testdummy:@{}:@{}\".format(start, stop), \"-vblot=testdummy:false\"],\n+            # reject blocks if not locked in by timeout\n+            [\"-vbparams=testdummy:@{}:@{}\".format(start, stop), \"-vblot=testdummy:true\"],\n+        ])\n+        for n in range(1, 4):\n+            self.connect_nodes(0, n)\n+        self.sync_all()\n+        for n in range(1, 4):\n+            self.disconnect_nodes(0, n)\n+        self.helper = [n.add_p2p_connection(P2PBlockCheck(n, self.all_blocks)) for n in self.nodes]\n+        return base_height\n+\n+    def do_test(self, signalling, expstate, expheight):\n+        base_height = self.setup_vbparams()\n+\n+        # track the expected state/height for rejecting-node\n+        state = \"defined\", 0\n+\n+        period = 0\n+        for cnt in signalling:\n+            nblocks = 144\n+            if base_height == 0 and period == 0:\n+                nblocks -= 1\n+            cnt = max(0, min(cnt, nblocks))\n+            bits = [VB_SIGNAL]*cnt + [VB_NOSIGNAL]*(nblocks - cnt)\n+\n+            random.shuffle(bits)\n+\n+            # what will the state be after these blocks are mined for a lockinontimeout=true node?\n+            period += 1\n+            if state[0] == \"defined\" and period == 2:\n+                state = \"started\", base_height + (period*144)\n+            elif state[0] == \"started\":\n+                if cnt >= 108:\n+                    state = \"locked_in\", base_height + (period*144)\n+                elif period == 4:\n+                    state = \"must_signal\", base_height + (period*144)\n+            elif state[0] == \"must_signal\":\n+                if cnt >= 108:\n+                    state = \"locked_in\", base_height + (period*144)\n+                else:\n+                    oknosig = 144-108\n+                    howmany = None\n+                    for i, x in enumerate(bits):\n+                        if x != VB_SIGNAL:\n+                            if oknosig == 0:\n+                                howmany = i\n+                                break\n+                            oknosig -= 1\n+                    state = \"stopped\", base_height + (period*144) - 144 + howmany\n+            elif state[0] == \"locked_in\":\n+                state = \"active\", base_height + (period*144)\n+\n+            self.all_blocks.extend(self.apply_blocks_and_check(bits, base_height, state))\n+\n+        assert_equal(state[0], expstate)\n+        assert_greater_than_or_equal(state[1] - base_height, expheight)\n+        if expstate != \"stopped\":\n+            assert_equal(state[1] - base_height, expheight)\n+        else:\n+            last_possible = expheight - expheight%144 + 143\n+            assert_greater_than_or_equal(last_possible, state[1] - base_height)\n+        self.log.info(\"Completed test %s %s\" % (base_height, state))\n+\n+    def run_test(self):\n+        self.all_blocks = []\n+\n+        random.seed(SEED)\n+        N = random.randrange(0,108)\n+        Y = random.randrange(108,145)\n+        self.log.info(\"seed %s, signal vals %s/%s\" % (SEED, Y, N))\n+\n+        self.do_test([N,N,N,N,107,144], \"stopped\", 612)\n+        self.do_test([144,144,Y,0,0,0], \"active\", 576)\n+        self.do_test([Y,Y,0,0,0,Y], \"stopped\", 612)\n+        self.do_test([N,N,N,N,N,144], \"stopped\", 612)\n+        self.do_test([0,0,0,Y,0,0], \"active\", 720)\n+        self.do_test([0,144,N,N,Y,0], \"active\", 864)\n+\n+if __name__ == '__main__':\n+    BIP8Test().main()"
      },
      {
        "sha": "ef3d9328440e20a6107dd93f1bcf789880ba25dd",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0816a4e8f0ae8aebc7706876ef0d1ec86568efe1/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0816a4e8f0ae8aebc7706876ef0d1ec86568efe1/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=0816a4e8f0ae8aebc7706876ef0d1ec86568efe1",
        "patch": "@@ -131,6 +131,7 @@\n     'feature_reindex.py',\n     'feature_abortnode.py',\n     'feature_bip8.py',\n+    'feature_bip8_signaling.py',\n     # vv Tests less than 30s vv\n     'wallet_keypool_topup.py --legacy-wallet',\n     'wallet_keypool_topup.py --descriptors',"
      }
    ]
  }
]