[
  {
    "sha": "c4027e735072c3de4b4ffb20eecd7187ff36bad7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNDAyN2U3MzUwNzJjM2RlNGI0ZmZiMjBlZWNkNzE4N2ZmMzZiYWQ3",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-04-24T11:52:31Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-04-24T11:55:20Z"
      },
      "message": "refactor: test: use wait_for_getdata() in p2p_compactblocks.py",
      "tree": {
        "sha": "2c97af5b92befd168fd111f3bb4cc31751ab794f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2c97af5b92befd168fd111f3bb4cc31751ab794f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c4027e735072c3de4b4ffb20eecd7187ff36bad7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4027e735072c3de4b4ffb20eecd7187ff36bad7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c4027e735072c3de4b4ffb20eecd7187ff36bad7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4027e735072c3de4b4ffb20eecd7187ff36bad7/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8ca51db5ddfb51c225c0c99f8aa1f5d68f0ad83",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8ca51db5ddfb51c225c0c99f8aa1f5d68f0ad83",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8ca51db5ddfb51c225c0c99f8aa1f5d68f0ad83"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 2,
      "deletions": 8
    },
    "files": [
      {
        "sha": "66e6f8c424a67a310c8d6d377fb1887b6c8a1ac1",
        "filename": "test/functional/p2p_compactblocks.py",
        "status": "modified",
        "additions": 2,
        "deletions": 8,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4027e735072c3de4b4ffb20eecd7187ff36bad7/test/functional/p2p_compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4027e735072c3de4b4ffb20eecd7187ff36bad7/test/functional/p2p_compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_compactblocks.py?ref=c4027e735072c3de4b4ffb20eecd7187ff36bad7",
        "patch": "@@ -378,19 +378,15 @@ def test_compactblock_requests(self, test_node, segwit=True):\n         # request\n         for announce in [\"inv\", \"header\"]:\n             block = self.build_block_on_tip(node, segwit=segwit)\n-            with mininode_lock:\n-                test_node.last_message.pop(\"getdata\", None)\n \n             if announce == \"inv\":\n                 test_node.send_message(msg_inv([CInv(2, block.sha256)]))\n                 wait_until(lambda: \"getheaders\" in test_node.last_message, timeout=30, lock=mininode_lock)\n                 test_node.send_header_for_blocks([block])\n             else:\n                 test_node.send_header_for_blocks([block])\n-            wait_until(lambda: \"getdata\" in test_node.last_message, timeout=30, lock=mininode_lock)\n-            assert_equal(len(test_node.last_message[\"getdata\"].inv), 1)\n+            test_node.wait_for_getdata([block.sha256], timeout=30)\n             assert_equal(test_node.last_message[\"getdata\"].inv[0].type, 4)\n-            assert_equal(test_node.last_message[\"getdata\"].inv[0].hash, block.sha256)\n \n             # Send back a compactblock message that omits the coinbase\n             comp_block = HeaderAndShortIDs()\n@@ -567,10 +563,8 @@ def test_incorrect_blocktxn_response(self, test_node):\n         assert_equal(int(node.getbestblockhash(), 16), block.hashPrevBlock)\n \n         # We should receive a getdata request\n-        wait_until(lambda: \"getdata\" in test_node.last_message, timeout=10, lock=mininode_lock)\n-        assert_equal(len(test_node.last_message[\"getdata\"].inv), 1)\n+        test_node.wait_for_getdata([block.sha256], timeout=10)\n         assert test_node.last_message[\"getdata\"].inv[0].type == 2 or test_node.last_message[\"getdata\"].inv[0].type == 2 | MSG_WITNESS_FLAG\n-        assert_equal(test_node.last_message[\"getdata\"].inv[0].hash, block.sha256)\n \n         # Deliver the block\n         if version == 2:"
      }
    ]
  }
]