MarcoFalke,2018-11-12T22:09:34Z,"Concept ACK. Though, I'd prefer if we first cleaned up the interface for ScanForWalletTransactions. I believe that right now it is relying on too much undefined behaviour that this refactoring could be meaningfully reviewed.",https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-438045762,438045762,
ryanofsky,2018-11-12T22:34:40Z,"> too much undefined behaviour that this refactoring could be meaningfully reviewed.\n\nAre you talking about a small part of this PR or the whole thing? Most of the changes here don't have anything to do with ScanForWalletTransactions. I could even drop the rescan changes and save them for a different PR if you are only worried about them.",https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-438052117,438052117,
practicalswift,2018-11-13T10:16:18Z,"Concept ACK\n\nNice readability and robustness improvement",https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-438211801,438211801,
Empact,2018-11-13T10:21:24Z,"Concept ACK\n\nWould be easier/safer to review if split up. Like Marco, I’d like to see ScanFor improved first.",https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-438213381,438213381,
DrahtBot,2018-11-13T15:20:05Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15129](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15129.html) (rpc: Added ability to remove watch only add",https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-438303753,438303753,
jonasschnelli,2018-12-12T06:02:03Z,"Strong Concept ACK\nPlans to review...",https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-446473002,446473002,
Empact,2019-01-08T08:34:58Z,"@ryanofsky I went ahead and split this up into a few commits, found it easier to review. Built and ran tests on each commit. https://github.com/Empact/bitcoin/tree/pr/wchain2\n\n",https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-452215750,452215750,
ryanofsky,2019-01-08T15:48:54Z,"Thanks @Empact! I reset the PR to your branch.\n\n---\n\nRebased d568bdb15173dd8dd7bf95cb0bd9c9b55dbb97f0 -> 5cad675a8e8beb0a97f95860a3017fd581bcc1e5 ([pr/wchain2.1](https://github.com/ryanofsky/bitcoin/commits/pr/wchain2.1) -> [pr/wchain2.2](https://github.com/ryanofsky/bitcoin/commits/pr/wchain2.2)) due to conflict with #14380\nRebased 5cad675a8e8beb0a97f95860a3017fd581bcc1e5 -> 591c2c85e92",https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-452346988,452346988,
laanwj,2019-01-16T12:21:51Z,"Some (I think) new compile warnings with this PR:\n```\n/.../bitcoin/src/wallet/rpcwallet.cpp: In function ‘UniValue rescanblockchain(const JSONRPCRequest&)’:\n/.../bitcoin/src/wallet/rpcwallet.cpp:3408:49: warning: ‘*((void*)& tip_height +4)’ may be used uninitialized in this function [-Wmaybe-uninitialized]\n             if (*stop_height < 0 || !tip_height || *stop_height > *tip_height) {\n",https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-454760017,454760017,
promag,2019-01-16T12:25:33Z,"utACK 5bc30a508, this really improves `interfaces::Chain`. I'm also curious why `LookupBlockIndex` is avoided.",https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-454761005,454761005,
jamesob,2019-01-18T20:02:39Z,re-utACK https://github.com/bitcoin/bitcoin/commit/1da8b4648e6b5f01a90acfe487bcda6f7a5a0424 per [the latest changes](https://github.com/bitcoin/bitcoin/compare/5bc30a5083507fbc10691c7c26683afe7e768c88..1da8b4648e6b5f01a90acfe487bcda6f7a5a0424),https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-455670483,455670483,
jamesob,2019-01-24T18:29:11Z,Looks like we're in good shape for merge.,https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-457305303,457305303,
MarcoFalke,2019-01-28T21:00:40Z,"* [x] re-utACK 2ffb07929e\n* [ ] <strike>utACK HEAD",https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-458299316,458299316,
MarcoFalke,2019-01-28T22:40:22Z,"Will review further after https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251169892 has been fixed. Also, I clarified the documentation of the rpc in that we follow the chain in case it ""runs ahead"" during the rpc (https://github.com/bitcoin/bitcoin/pull/15279)",https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-458331231,458331231,
ryanofsky,2019-01-28T23:21:54Z,"John's comment https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251166471 made me realize there seems to be a minor race condition and inconsistent behavior in the current implementation of ScanForWalletTransactions. If there is a reorg while `cs_main` is unlocked, there are two different checks to handle the case that pindex is no longer on the new chain. One of these checks will return ",https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-458342518,458342518,
MarcoFalke,2019-01-29T18:24:57Z,I'd prefer to keep this refactoring-only and would suggest to open a pr for that either before or after this one is merged.,https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-458651355,458651355,
meshcollider,2019-01-30T00:05:21Z,"Agreed, any comments/nits can be addressed in followup",https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-458757969,458757969,
ryanofsky,2019-01-30T12:13:49Z,"Thanks for reviews, all! I will follow up with the remaining unaddressed comments.\n\nThe next PR in the series is #15288 (which is much simpler than this PR)",https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-458922670,458922670,
meshcollider,2018-11-14T10:37:11Z,"Why not use `findPruned(rescan_height, *tip_height)`?",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r233393592,233393592,src/wallet/wallet.cpp
meshcollider,2018-11-14T10:50:04Z,"I think this is where the earlier confusion arose, it is `stop_block` which is optional not `start_block`, so the comment is wrong, the names need to be switched",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r233398045,233398045,src/wallet/wallet.cpp
ryanofsky,2018-11-14T22:13:46Z,"re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r233393592\n\n> Why not use findPruned\n\nI used `haveBlockOnDisk` here because I was doing a very literal translation and `findPruned` doesn't have the `block->pprev->nTx > 0` condition. If can drop that condition or add it to `findPruned`, though, if it would be an improvement.",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r233641224,233641224,src/wallet/wallet.cpp
ryanofsky,2018-11-14T22:24:42Z,"re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r233398045\n\n> the names need to be switched\n\nGood catch. I'll probably just rewrite this comment if this isn't fixed by another of the rescan PRs first. This comment never made sense to me even when it was first added in https://github.com/bitcoin/bitcoin/pull/11281#discussion_r156810727 / https://github.com/bitcoin/bitcoin/pull/",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r233644571,233644571,src/wallet/wallet.cpp
promag,2018-11-14T23:34:20Z,"This sounds wrong, as if it wants to discard genesis block (`height == 0`). Only got it after seeing the return type `Optional<int>`. IMO `.contains(hash)` would be preferable.",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r233662540,233662540,src/wallet/rpcdump.cpp
promag,2018-11-15T00:16:53Z,"Isn't this change conceptually different? Even though the chain is locked, this can be copied and used without the lock and therefore can ""point"" to other block if a reorg occurs. This wouldn't occur with `CBlockIndex`.\n\nLooks like you could either:\n - create `interfaces::BlockIndex`\n - replace `CBlockIndex*` with `uint256`.",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r233671425,233671425,src/wallet/rpcwallet.cpp
MarcoFalke,2018-11-15T17:36:34Z,"Haven't though about this too much, but maybe you could split out the changes in the wallet header that change the interface from taking a block index pointer to taking a block hash to a separate commit? Unless I am mistaken those type changes have the side effect of fixing the ""issue"" I tried to fix in #14712.",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r233941431,233941431,src/wallet/wallet.h
MarcoFalke,2018-12-12T03:54:07Z,doc-nit: height is not given (at least not directly),https://github.com/bitcoin/bitcoin/pull/14711#discussion_r240875084,240875084,src/interfaces/chain.h
Empact,2019-01-08T08:36:06Z,"nit: I believe this belongs in `validation.h`, as `unordered_map` isn't used directly here.",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r245911708,245911708,src/interfaces/chain.cpp
Empact,2019-01-08T08:43:36Z,"nit: none of the callers use more than one of the out args, so splitting this up would make the call sites simpler/clearer.",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r245913597,245913597,src/interfaces/chain.cpp
Empact,2019-01-08T08:45:46Z,`stop_block` and `stopBlock` are confusingly similar.,https://github.com/bitcoin/bitcoin/pull/14711#discussion_r245914117,245914117,src/wallet/rpcwallet.cpp
Empact,2019-01-09T11:38:06Z,Could be more clear with a comparison with `nullopt`,https://github.com/bitcoin/bitcoin/pull/14711#discussion_r246350751,246350751,src/wallet/rpcdump.cpp
ryanofsky,2019-01-10T17:46:05Z,"re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r240875084\n\n> doc-nit: height is not given (at least not directly)\n\nThanks, fixed comment\n ",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r246857325,246857325,src/interfaces/chain.h
ryanofsky,2019-01-10T17:46:19Z,"re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r233662540\n\n> Could be more clear with a comparison with nullopt\n\nTook suggestion",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r246857394,246857394,src/wallet/rpcdump.cpp
ryanofsky,2019-01-10T17:46:30Z,"re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r233671425\n\n> Isn't this change conceptually different? \n\nI think so, a height is conceptually different from a block pointer.\n\n> Looks like you could either:\n\nWhen the chain is locked, a height uniquely identifies a block, so many `locked_chain` methods take height arguments. I think it would good to eliminate these call",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r246857455,246857455,src/wallet/rpcwallet.cpp
ryanofsky,2019-01-10T18:19:12Z,"re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r245914117\n\n> stop_block and stopBlock are confusingly similar.\n\nAdded more renames",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r246868198,246868198,src/wallet/rpcwallet.cpp
ryanofsky,2019-01-10T18:19:18Z,"re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r245911708\n\n> nit: I believe this belongs in validation.h, as unordered_map isn't used directly here.\n\nThis was added by IWYU because unordered map methods are called here. In theory this allows `validation.h` to switch to forward declarations and drop its `unordered_map` include without this file having to change. I don't think ",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r246868236,246868236,src/interfaces/chain.cpp
ryanofsky,2019-01-10T18:19:23Z,"re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r245913597\n\n> nit: none of the callers use more than one of the out args, so splitting this up would make the call sites simpler/clearer.\n\nThere are many ways to design this API, and I just opted for one here that I thought would keep [`chain.h`](https://github.com/ryanofsky/bitcoin/blob/108a56aa073921250a4742524d7493e9233e0f5a/s",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r246868266,246868266,src/interfaces/chain.cpp
MarcoFalke,2019-01-15T19:19:48Z,"in commit 13bc578ca9 Add height, depth, and hash methods to the Chain interface\n\n\nIt seems confusing to check for nullptr if when the block hash was found in the map, since the value should never be a nullptr? Anyway, a neat way to avoid that is by avoiding `::mapBlockIndex` and calling `LookupBlockIndex`?",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248028705,248028705,src/interfaces/chain.cpp
MarcoFalke,2019-01-15T19:34:26Z,"nit in commit 13bc578ca9 Add height, depth, and hash methods to the Chain interface\n\n\n`height` is added and not used in this commit\n\n(Hunk should probably be moved to commit 22abf4a61a Add findFork and findBlock to the Chain interface)",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248033837,248033837,src/wallet/rpcwallet.cpp
MarcoFalke,2019-01-15T19:54:31Z,"in commit 22abf4a61a Add findFork and findBlock to the Chain interface\n\nDoesn't check for nullptr here? Seems inconsistent with `getBlockHeight`. Anyway, a neat way to avoid that is by avoiding ::mapBlockIndex and calling LookupBlockIndex?",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248040457,248040457,src/interfaces/chain.cpp
MarcoFalke,2019-01-15T20:06:09Z,"in commit 22abf4a61a Add findFork and findBlock to the Chain interface\n\n\nSame here (use `LookupBlockIndex`)",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248044123,248044123,src/interfaces/chain.cpp
MarcoFalke,2019-01-15T20:31:05Z,"in commit 22abf4a61a Add findFork and findBlock to the Chain interface\n\nAssuming that height can not be set makes no sense, since you moved the FindFork call to before the `!height` check. I'd prefer to write `*height` here.",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248051502,248051502,src/wallet/rpcwallet.cpp
MarcoFalke,2019-01-15T20:31:25Z,"in commit 22abf4a Add findFork and findBlock to the Chain interface\n\nSame (I'd prefer to not check for height again, since that has already been done above as you moved the FindFork to before the height check.)",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248051624,248051624,src/wallet/rpcwallet.cpp
MarcoFalke,2019-01-15T20:37:55Z,"in commit 65861dff7c Convert CWallet::ScanForWalletTransactions and SyncTransaction to the new Chain apis\n\n\n`LookupBlockIndex` instead of access to the global mapBlockIndex?",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248053404,248053404,src/interfaces/chain.cpp
ryanofsky,2019-01-17T16:03:13Z,"re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248028705\n\nSwitched to LookupBlockIndex",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248731481,248731481,src/interfaces/chain.cpp
ryanofsky,2019-01-17T16:03:20Z,"re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248040457\n\nSwitched to LookupBlockIndex",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248731550,248731550,src/interfaces/chain.cpp
ryanofsky,2019-01-17T16:03:26Z,"re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248044123\n\nSwitched to LookupBlockIndex",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248731602,248731602,src/interfaces/chain.cpp
ryanofsky,2019-01-17T16:03:32Z,"re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248053404\n\nSwitched to LookupBlockIndex",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248731656,248731656,src/interfaces/chain.cpp
ryanofsky,2019-01-17T16:03:38Z,"re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248033837\n\n> height is added and not used in this commit\n\nSeems to have been a harmless artifact from splitting this PR up. Moved to the right place now.",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248731705,248731705,src/wallet/rpcwallet.cpp
ryanofsky,2019-01-17T16:03:46Z,"re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248051624\n\n> I'd prefer to not check for height again\n\nHeight can be unset here since the blockhash parameter is optional.",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248731761,248731761,src/wallet/rpcwallet.cpp
ryanofsky,2019-01-17T16:03:52Z,"re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248051502\n\n> Assuming that height can not be set makes no sense\n\nGood catch, simplified this.",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248731814,248731814,src/wallet/rpcwallet.cpp
Empact,2019-01-18T22:09:25Z,"I think you want `stop_block` here. `stop_height` will carry the height that we sought to scan to, `stop_block` will carry the block that it actually reached.",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r249200553,249200553,src/wallet/rpcwallet.cpp
ryanofsky,2019-01-22T22:00:04Z,"re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r249200553\n\nIt would be nice to include `stop_block` in the future, since it's a hash not a height, but this is not changing the behavior at all. `stop_height` will always contain the height scanned to because if the scan fails or aborts there will have been an exception earlier.",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r249977332,249977332,src/wallet/rpcwallet.cpp
promag,2019-01-23T15:19:01Z,Below you call `findBlock` while the chain is locked. So should this be in the `Chain::Lock`? Or will there be a new mutex for `mapBlockIndex`?,https://github.com/bitcoin/bitcoin/pull/14711#discussion_r250238088,250238088,src/interfaces/chain.h
promag,2019-01-23T15:25:15Z,I see that the idea is to move away from locked chain so ignore my question above: https://github.com/bitcoin/bitcoin/blob/82cf6813a4ef1b4a5439eb6cddb1ab426f3c31a2/src/interfaces/chain.h#L23-L26,https://github.com/bitcoin/bitcoin/pull/14711#discussion_r250240824,250240824,src/interfaces/chain.h
jnewbery,2019-01-25T22:00:46Z,"Nit: returning the height of the specified block is a bit of an odd interface, but saves a second lookup in `ChainActive` that `getHeight()` would require. Perhaps add that reasoning to this comment?",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251150282,251150282,src/interfaces/chain.h
jnewbery,2019-01-25T22:01:41Z,Nit: add comment that this function will assert if provided a height that isn't in the active chain (same for `getBlockTime()` and `getMedianTimePast()`).,https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251150497,251150497,src/interfaces/chain.h
jnewbery,2019-01-25T22:04:04Z,"Nit: Perhaps add *or nullopt if no common ancestor is found* to ""Return height of the highest block on the chain that is an ancestor of the specified block""",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251151026,251151026,src/interfaces/chain.h
jnewbery,2019-01-25T22:04:54Z,Nit: Slight preference for s/nothing/nullopt/ for all of these comments to be more precise.,https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251151231,251151231,src/interfaces/chain.h
jnewbery,2019-01-25T22:28:16Z,"Nit: seems like `CChain::FindEarliestAtLeast()` could quite easily be updated to take a height parameter and use it in the `std::lower_bound()` call.\n\nPerhaps a future PR could combine `findFirstBlockWithTime()` and `findFirstBlockWithTimeAndHeight()` and remove some of the logic from the interface?",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251156423,251156423,src/interfaces/chain.h
jnewbery,2019-01-25T22:49:49Z,nit: comment here should be `/* last block */`,https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251160945,251160945,src/qt/test/wallettests.cpp
jnewbery,2019-01-25T22:52:07Z,Nit: could you save a second `chainActive` lookup here by returning both the height and hash from `findFirstBlockWithTime()`?,https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251161437,251161437,src/wallet/wallet.cpp
jnewbery,2019-01-25T22:54:36Z,Nit: comment should be `/* last block */`,https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251161918,251161918,src/wallet/wallet.cpp
jnewbery,2019-01-25T23:00:25Z,Behaviour change: This changes the log message from logging the height to logging the block hash. Is that intentional?,https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251163086,251163086,src/wallet/wallet.cpp
jnewbery,2019-01-25T23:19:50Z,Behaviour change: I think in this case the function will return `ScanResult::SUCCESS` where previously it returned `ScanResult::FAILURE`,https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251166471,251166471,src/wallet/wallet.cpp
jnewbery,2019-01-25T23:28:26Z,Nit: comment should be `/* fUpdate */`,https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251167898,251167898,src/wallet/rpcwallet.cpp
jnewbery,2019-01-25T23:41:30Z,"Behaviour change: previously, calling `rescanblockchain()` without a `stop_height` would cause `ScanForWalletTransactions()` to be called without a `pIndexStop`. Since `ScanForWalletTransactions()` releases `cs_main` after every block scanned, if the tip advances during rescan, then `ScanForWalletTransactions()` will scan to the new tip.\n\nThis change sets the `last_block` to the tip at the tim",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251169892,251169892,src/wallet/rpcwallet.cpp
jnewbery,2019-01-25T23:44:45Z,"Suggestion: invert the logic and add an explicit `break` here. It's a bit convoluted that `block_height` is reset above, and then if these conditions hold, it's updated, and then in the `while` condition if it's still null, then we break. I think this is clearer:\n\n```c++\nif (!locked_chain->getBlockHeight(prev_block_hash) || !prev_block_height < *tip_height) {\n    // rescan has reached the ",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251170382,251170382,src/wallet/wallet.cpp
jnewbery,2019-01-25T23:48:54Z,Nit: remove the word 'full' here,https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251171037,251171037,src/interfaces/chain.h
jnewbery,2019-01-25T23:57:08Z,"Nit: This comment isn't quite right. The function returns ""the latest block common to locator and chain"", which is guaranteed to be an ancestor of the block on the active chain.",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251172260,251172260,src/interfaces/chain.h
ryanofsky,2019-01-28T21:05:30Z,"re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251166471\n\n> Behaviour change: I think in this case the function will return ScanResult::SUCCESS where previously it returned ScanResult::FAILURE\n\nGreat catch, this should be fixed now. I added a todo to change this to SUCCESS in the future though, since I think that is right thing to do (see https://github.com/bitcoin/bitcoin/p",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251592385,251592385,src/wallet/wallet.cpp
ryanofsky,2019-01-28T21:05:39Z,"re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251169892\n\n> the rescan will not go all the way to the tip if the tip advances during rescan\n\nFixed, but after this change, it also wasn't right to return the original tip_height as stop_height, so I changed ScanForWalletTransactions to return a stop_height, and moved all its return values into a struct to avoid having too many ",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251592440,251592440,src/wallet/rpcwallet.cpp
ryanofsky,2019-01-28T21:06:09Z,"> Behaviour change: This changes the log message from logging the height to logging the block hash. Is that intentional?\n\nThis seemed like the easiest thing to print without acquiring `cs_main`. Added a note about the behavior change in the commit message, but could update the print instead if you think that's a better idea.\n",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251592599,251592599,src/wallet/wallet.cpp
MarcoFalke,2019-01-28T21:08:44Z,"Right, my bad.",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251593500,251593500,src/wallet/rpcwallet.cpp
ryanofsky,2019-01-28T21:46:12Z,"re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251170382\n\n> Suggestion: invert the logic and add an explicit break here\n\nDone, good suggestion\n",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251607493,251607493,src/wallet/wallet.cpp
ryanofsky,2019-01-28T21:46:18Z,"re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251151231\n\n> Slight preference for s/nothing/nullopt/\n\nreplaced",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251607532,251607532,src/interfaces/chain.h
ryanofsky,2019-01-28T21:46:24Z,"re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251150497\n\n> add comment that this function will assert\n\ndone",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251607576,251607576,src/interfaces/chain.h
ryanofsky,2019-01-28T21:46:30Z,"re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251171037\n\n> Nit: remove the word 'full' here\n\ndone",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251607615,251607615,src/interfaces/chain.h
ryanofsky,2019-01-28T21:46:35Z,"re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251156423\n\n> Perhaps a future PR could combine findFirstBlockWithTime() and findFirstBlockWithTimeAndHeight()\n\nThis is a good suggestion. I just added a TODO to avoid introducing CChain changes in this PR, but I'm also happy to make the change here if you prefer.",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251607647,251607647,src/interfaces/chain.h
ryanofsky,2019-01-28T21:46:40Z,"re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251151026\n\n> Perhaps add or nullopt if no common ancestor is found\n\nadded",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251607688,251607688,src/interfaces/chain.h
ryanofsky,2019-01-28T21:46:48Z,"re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251150282\n\n> Perhaps add that reasoning to this comment?\n\ndone",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251607727,251607727,src/interfaces/chain.h
ryanofsky,2019-01-28T21:46:54Z,"re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251172260\n\n> This comment isn't quite right\n\nAdded your correction",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251607757,251607757,src/interfaces/chain.h
ryanofsky,2019-01-28T21:47:04Z,"re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251160945\n\n> nit: comment here should be /* last block */\n\nfixed\n\n",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251607821,251607821,src/qt/test/wallettests.cpp
ryanofsky,2019-01-28T21:47:20Z,"re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251167898\n\n> Nit: comment should be /* fUpdate */\n\nfixed\n",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251607912,251607912,src/wallet/rpcwallet.cpp
ryanofsky,2019-01-28T21:47:32Z,"re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251161437\n\n> Nit: could you save a second chainActive lookup here by returning both the height and hash from findFirstBlockWithTime()?\n\ndone",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251607980,251607980,src/wallet/wallet.cpp
ryanofsky,2019-01-28T21:47:37Z,"re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251161918\n\n> Nit: comment should be /* last block */\n\nfixed",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251608017,251608017,src/wallet/wallet.cpp
MarcoFalke,2019-01-29T21:34:24Z,"In commit db21f02648 Convert CWallet::ScanForWalletTransactions and SyncTransaction to the new Chain apis\n\n\nnit: Not sure why you check for this. In current operation tip_height is never nullopt, and when that should change in the future, you might as well return with an early error instead of calling into `ScanForWalletTransactions`, whose documentation states that the start block is requir",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252026843,252026843,src/wallet/rpcwallet.cpp
MarcoFalke,2019-01-29T21:48:03Z,"db21f02648 Convert CWallet::ScanForWalletTransactions and SyncTransaction to the new Chain apis\n\n\nnit: In line with my previous comment, I'd prefer if we either assumed that stop_height is always set or we return an  error. An alternative would be to adjust the documentation of the rpc result to mention that in (whatever obscure circumstances) `stop_height` might be null, but I'd prefer to t",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252031485,252031485,src/wallet/rpcwallet.cpp
MarcoFalke,2019-01-29T21:59:24Z,"in commit db21f02648 Convert CWallet::ScanForWalletTransactions and SyncTransaction to the new Chain apis\n\n\nunrelated request: I'd prefer if we had some guideline on when to use `assert` vs `std::logic_error`. This seems like a condition that can never be hit unless there is a coding error, in which case an `assert` appears more appropriate.",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252035452,252035452,src/wallet/wallet.cpp
MarcoFalke,2019-01-29T22:02:18Z,"in commit db21f02648 Convert CWallet::ScanForWalletTransactions and SyncTransaction to the new Chain apis\n\n\nIs this correct? It seems that without a start_block, we'd just ""fall through"" and return instead of starting at the genesis block.",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252036436,252036436,src/wallet/wallet.cpp
jnewbery,2019-01-29T22:08:24Z,"With this rename of the second parameter (`last_block` -> `stop_block`) we now have a parameter named `stop_block` and a member in the return object called `stop_block` which refer to different things. I think this should change back to `last_block` to match the header file, and the several inline comments should be updated to say `last_block`.\n\nEDIT: I see the RPC params are called `start_blo",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252038449,252038449,src/wallet/wallet.cpp
jnewbery,2019-01-29T22:09:03Z,Needs updating now that `ScanResult` is an object.,https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252038666,252038666,src/wallet/wallet.cpp
MarcoFalke,2019-01-29T22:19:22Z,"in commit db21f02648 Convert CWallet::ScanForWalletTransactions and SyncTransaction to the new Chain apis\n\n\nnit: the condition checks for `block_height`, so the `value_or` is dead code and can be removed?",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252041954,252041954,src/wallet/wallet.cpp
MarcoFalke,2019-01-29T22:19:34Z,same,https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252042021,252042021,src/wallet/wallet.cpp
jnewbery,2019-01-29T22:25:41Z,"A comment here could prevent other people from falling into the same trap. Something like:\n\n```c++\n// If called with a stop_height, set the stop_height here to trigger a rescan to that height.\n// If called without a stop height, leave stop_height as null here so rescan continues to the tip (even if the tip advances during rescan).\n```",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252043990,252043990,src/wallet/rpcwallet.cpp
MarcoFalke,2019-01-29T22:26:58Z,"in commit 44de1561aa\n\nCould say `getTipLocator()`?",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252044389,252044389,src/interfaces/chain.cpp
ryanofsky,2019-01-30T20:39:03Z,"re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252044389\n\n>Could say getTipLocator()?\n\nfixed",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252428776,252428776,src/interfaces/chain.cpp
ryanofsky,2019-01-30T20:39:45Z,"re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252043990\n\n> A comment here could prevent other people from falling into the same trap. Something like:\n\nadded",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252429001,252429001,src/wallet/rpcwallet.cpp
ryanofsky,2019-01-30T20:39:51Z,"re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252031485\n\n> An alternative would be to adjust the documentation of the rpc result to mention that in (whatever obscure circumstances) stop_height might be null\n\nUpdated documentation, this could happen rarely during a reorg",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252429047,252429047,src/wallet/rpcwallet.cpp
ryanofsky,2019-01-30T20:40:37Z,"re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252035452\n\n> This seems like a condition that can never be hit unless there is a coding error, in which case an assert appears more appropriate.\n\nI don't think `logic_error` means anything different from `assert`. https://en.cppreference.com/w/cpp/error/logic_error at least says ""It reports errors that are a consequence of fault",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252429302,252429302,src/wallet/wallet.cpp
ryanofsky,2019-01-30T20:40:41Z,"re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252036436\n\n> Is this correct?\n\nGood catch, fixed comment",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252429333,252429333,src/wallet/wallet.cpp
ryanofsky,2019-01-30T20:40:47Z,"re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252038666\n\n> Needs updating now that ScanResult is an object.\n\ndone\n\n\n\n",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252429371,252429371,src/wallet/wallet.cpp
ryanofsky,2019-01-30T20:40:52Z,"re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252038449\n\n> Could you rename the members of the return object and update the parameter names in the header file?\n\ndone",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252429393,252429393,src/wallet/wallet.cpp
ryanofsky,2019-01-30T20:40:56Z,"re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252041954\n\n> the value_or is dead code and can be removed?\n\nGood catch, removed",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252429413,252429413,src/wallet/wallet.cpp
ryanofsky,2019-01-30T20:41:00Z,"re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252042021\n\n> same\n\nnow removed",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252429440,252429440,src/wallet/wallet.cpp
ryanofsky,2019-01-30T21:13:35Z,"re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252026843\n\n> nit: Not sure why you check for this\n\nIn this case even though ""documentation states"" and ""In current operation"" the chain will never be empty, I think handling a rescan of an empty chain by just returning success is more natural than making assumptions about when the chain is initialized or what other code expects ",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252439831,252439831,src/wallet/rpcwallet.cpp
MarcoFalke,2019-02-04T19:24:50Z,">I think handling a rescan of an empty chain by just returning success ...\n\nIt would also report that the rescan started at block 0, which does not exist, since the chain was not initialized.\n\nA user calling this function assumes that the chain was initialized and should be notified that it wasn't instead of returning `{start_height=0, stop_height=null}`, indicating success.\n\nAlso, we ",https://github.com/bitcoin/bitcoin/pull/14711#discussion_r253609473,253609473,src/wallet/rpcwallet.cpp
