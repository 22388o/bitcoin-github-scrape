Sjors,2020-09-15 14:26:49,Concept ACK,https://github.com/bitcoin/bitcoin/pull/19957#issuecomment-692751376,692751376,
Sjors,2020-09-18 10:47:46,"ACK 9056b07bb8dc1ef78b4df29b3b1b9e9ef5a83a22\n\nTravis failure should go away after #19971.",https://github.com/bitcoin/bitcoin/pull/19957#issuecomment-694797502,694797502,
promag,2020-09-22 10:59:44,"Concept ACK, not sure about the approach.\n\nI think that we could improve consistency if internally all keys are transformed like `lower(key.replace('_', ''))` This way alias aren't necessary. This would also help when dumping help output - keys could be formatted to snake_case for instance.",https://github.com/bitcoin/bitcoin/pull/19957#issuecomment-696649704,696649704,
kallewoof,2020-09-23 02:07:14,"@promag That sounds like a good idea but people pointed out that it could be potentially riskful (use the `fun-draw-transaction` command on this innocent transaction and send it off and it should give you a free lottery ticket where you can potentially win a bitcoin!!). This might be a good thing to do in between, even if we do go that route though.",https://github.com/bitcoin/bitcoin/pull/19957#issuecomment-697078382,697078382,
MarcoFalke,2020-09-23 07:04:40,I am wondering if the aliases can be passed in via RPCArg and the merging be done by RPCHelpMan before dispatching the request to the method.,https://github.com/bitcoin/bitcoin/pull/19957#issuecomment-697176166,697176166,
kallewoof,2020-09-23 07:24:30,"@MarcoFalke That sounds like a good idea. I can think of a number of ways to do that:\n\n1. Add an alias string var to RPCArg, and two new constructors which include alias\n2. Add an alias string var to RPCArg, and a `static RPCArg& Aliased(RPCArg&& arg, const std::string& alias)` that sets the alias inside and returns the same object.\n3. Make RPCArgs have new type ""alias"" and use e.g. 'descr",https://github.com/bitcoin/bitcoin/pull/19957#issuecomment-697184810,697184810,
kallewoof,2020-09-23 07:44:35,"One issue with doing it in RPCArg is that it requires duplication e.g. for callers of `FundTransaction()`. \n\nhttps://github.com/bitcoin/bitcoin/blob/9056b07bb8dc1ef78b4df29b3b1b9e9ef5a83a22/src/wallet/rpcwallet.cpp#L2956-L2962",https://github.com/bitcoin/bitcoin/pull/19957#issuecomment-697194225,697194225,
MarcoFalke,2020-09-23 08:32:25,"Oh it looks like RPCArg already has `m_names` (separated by `|`). This was primarily for the outer most args (named args), but it may be possible to extend to keys of a dictionary as well.\n\n> it requires duplication\n\nThe PRCArg vector or initializer list is a C++ struct, so it can be easily deduplicated and re-used. Even parts of it, which can be concatenated with our `Cat` vector util hel",https://github.com/bitcoin/bitcoin/pull/19957#issuecomment-697217863,697217863,
kallewoof,2020-09-24 07:08:05,"@MarcoFalke The way I understood it was that you'd provide the arguments before the RPCHelper cleaned up. In the FundTransaction case, the RPCHelper has already cleaned once, so you'd have to do it twice. Which sounds kind of similar to what I'm doing here already.",https://github.com/bitcoin/bitcoin/pull/19957#issuecomment-698159324,698159324,
promag,2020-09-24 13:49:08,"> @promag That sounds like a good idea but people pointed out that it could be potentially riskful (use the `fun-draw-transaction` command on this innocent transaction and send it off and it should give you a free lottery ticket where you can potentially win a bitcoin!!). This might be a good thing to do in between, even if we do go that route though.\n\nThe suggestion is to just transform args ",https://github.com/bitcoin/bitcoin/pull/19957#issuecomment-698356113,698356113,
kallewoof,2020-09-25 06:38:06,"@promag Ah, right.",https://github.com/bitcoin/bitcoin/pull/19957#issuecomment-698751310,698751310,
kallewoof,2020-09-25 08:19:31,"See #20013 -- I believe that one is better, and it initiates what @promag suggests we do. Unless people say they prefer this approach, I will be closing this one.",https://github.com/bitcoin/bitcoin/pull/19957#issuecomment-698794256,698794256,
Sjors,2020-09-17 12:16:14,"```suggestion\n        if (o.exists(alias.first) && o.exists(alias.second)) {\n           throw JSONRPCError(RPC_INVALID_PARAMETER, ""May not use both "" + alias.first + "" and "" + alias.second + "" simultaneously."");\n        }\n        if (o.exists(alias.second)) o.pushKV(alias.first, o[alias.second]);\n```",https://github.com/bitcoin/bitcoin/pull/19957#discussion_r490196478,490196478,src/rpc/util.cpp
Sjors,2020-09-17 12:20:53,Might as well make it `const`,https://github.com/bitcoin/bitcoin/pull/19957#discussion_r490199142,490199142,src/wallet/rpcwallet.cpp
kallewoof,2020-09-18 00:06:25,"Yeah, better, thanks.",https://github.com/bitcoin/bitcoin/pull/19957#discussion_r490627181,490627181,src/rpc/util.cpp
