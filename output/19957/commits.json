[
  {
    "sha": "965c760bee614db83f9d558e5d7406ca1a679de1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NjVjNzYwYmVlNjE0ZGI4M2Y5ZDU1OGU1ZDc0MDZjYTFhNjc5ZGUx",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-09-15T05:21:53Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-09-18T00:25:14Z"
      },
      "message": "rpc: introduce alias helper",
      "tree": {
        "sha": "714468cb6fb8a0300881d3b908c218304f532d87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/714468cb6fb8a0300881d3b908c218304f532d87"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/965c760bee614db83f9d558e5d7406ca1a679de1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl9j/moACgkQV692LbM1\nMyIxqBAAiK6mmtMKYZHbyZfgKzs4xmSQBHdDuC6hwMyqqXA21foVETcW41Gf4CMT\nFCcFaHkSyvpLAGU3oHuRtNGCD3nnndGzj5mKtpDFFtdN/D00RRUHcAR6Mm8OCsTJ\nJb5DPr+wkcEo76Kh7v6lRi/hu3/LMyLiufwtgNL3wzsU2ME3jGA+CnAdqUS9QgIT\nqdXmJcZNiQ2c8Zn8ejs+smBvcL8jbxzLAGOdehccMI0pcNAGeBroWm2rlhiqlSEX\nkpg/PL0LkTggqNj6DlY3f76mDRA4NA2khDlASzggXtpFkTdtWZ7QlCEztaVdxSKC\nTeRlnMwPuaxsoUGF4BcJLXA92ZtFOAiodi8sp69IUFpo6VcmSaaMr3sgCxT14z2w\n6aJFPKjjpRbwic4iOrIAVbZU1crucZfPlub96XahDOvx6vDtG+M9q0VjaAxgkv64\nmMrWaoJpIQFOXpru6DzvwO0XdLsgf42ORAtFmlLZoD4du+BtvvyZwPfMrIOOAbTs\nkeq9AfyI8/u/tqP7Ys3oUhNTMr7TJKS7Ycq1ZyUekHm4b1q9jcieniY64+yUD6n7\nGGGLUFX92LqH2RzV0eCmQpRsercd1Dtq9IEkperZ7Mh4wqFzmi/NVKOR9WgZvRgj\nnEFlU4ZmGM+gbBwVj+VMhPEFS+4xtAf56I+cpy1aIgV6uFWIVWE=\n=Z9DG\n-----END PGP SIGNATURE-----",
        "payload": "tree 714468cb6fb8a0300881d3b908c218304f532d87\nparent ffaac6e6142a1cf61e8e12d7fc406fcb02300144\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1600147313 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1600388714 +0900\n\nrpc: introduce alias helper\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/965c760bee614db83f9d558e5d7406ca1a679de1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/965c760bee614db83f9d558e5d7406ca1a679de1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/965c760bee614db83f9d558e5d7406ca1a679de1/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ffaac6e6142a1cf61e8e12d7fc406fcb02300144",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffaac6e6142a1cf61e8e12d7fc406fcb02300144",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ffaac6e6142a1cf61e8e12d7fc406fcb02300144"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 47,
      "deletions": 22
    },
    "files": [
      {
        "sha": "006f37e3668cc90439ae339f7c984c88f97cdb26",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/965c760bee614db83f9d558e5d7406ca1a679de1/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/965c760bee614db83f9d558e5d7406ca1a679de1/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=965c760bee614db83f9d558e5d7406ca1a679de1",
        "patch": "@@ -74,6 +74,19 @@ void RPCTypeCheckObj(const UniValue& o,\n     }\n }\n \n+void RPCTypeCheckAliases(UniValue& o,\n+    const std::map<std::string, std::string>& aliases)\n+{\n+    for (const auto& alias : aliases) {\n+        if (o.exists(alias.second)) {\n+            if (o.exists(alias.first)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"May not use both \" + alias.first + \" and \" + alias.second + \" simultaneously.\");\n+            }\n+            o.pushKV(alias.first, o[alias.second]);\n+        }\n+    }\n+}\n+\n CAmount AmountFromValue(const UniValue& value)\n {\n     if (!value.isNum() && !value.isStr())"
      },
      {
        "sha": "b587a493d30dd9a7daa20ba252f3dad8996c95be",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/965c760bee614db83f9d558e5d7406ca1a679de1/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/965c760bee614db83f9d558e5d7406ca1a679de1/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=965c760bee614db83f9d558e5d7406ca1a679de1",
        "patch": "@@ -69,6 +69,15 @@ void RPCTypeCheckObj(const UniValue& o,\n     bool fAllowNull = false,\n     bool fStrict = false);\n \n+/**\n+ * Check and merge aliased values in an Object.\n+ *\n+ * Moves all non-null values from the alias (value) to the primary (key).\n+ * @throws a JSONRPCError of type RPC_INVALID_PARAMETER if both are non-null for any of the aliases\n+ */\n+void RPCTypeCheckAliases(UniValue& o,\n+    const std::map<std::string, std::string>& aliases);\n+\n /**\n  * Utilities: convert hex-encoded Values\n  * (throws error if not hex)."
      },
      {
        "sha": "bc814177a699930c2ed752d06939fffe9a1ac5d5",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 21,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/965c760bee614db83f9d558e5d7406ca1a679de1/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/965c760bee614db83f9d558e5d7406ca1a679de1/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=965c760bee614db83f9d558e5d7406ca1a679de1",
        "patch": "@@ -2953,6 +2953,13 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n       }\n       else {\n         RPCTypeCheckArgument(options, UniValue::VOBJ);\n+        RPCTypeCheckAliases(options, {\n+            {\"change_address\", \"changeAddress\"},\n+            {\"change_position\", \"changePosition\"},\n+            {\"include_watching\", \"includeWatching\"},\n+            {\"lock_unspents\", \"lockUnspents\"},\n+            {\"subtract_fee_from_outputs\", \"subtractFeeFromOutputs\"},\n+        });\n         RPCTypeCheckObj(options,\n             {\n                 {\"add_inputs\", UniValueType(UniValue::VBOOL)},\n@@ -2982,9 +2989,8 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n             coinControl.m_add_inputs = options[\"add_inputs\"].get_bool();\n         }\n \n-        if (options.exists(\"changeAddress\") || options.exists(\"change_address\")) {\n-            const std::string change_address_str = (options.exists(\"change_address\") ? options[\"change_address\"] : options[\"changeAddress\"]).get_str();\n-            CTxDestination dest = DecodeDestination(change_address_str);\n+        if (options.exists(\"change_address\")) {\n+            const CTxDestination dest = DecodeDestination(options[\"change_address\"].get_str());\n \n             if (!IsValidDestination(dest)) {\n                 throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Change address must be a valid bitcoin address\");\n@@ -2993,12 +2999,12 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n             coinControl.destChange = dest;\n         }\n \n-        if (options.exists(\"changePosition\") || options.exists(\"change_position\")) {\n-            change_position = (options.exists(\"change_position\") ? options[\"change_position\"] : options[\"changePosition\"]).get_int();\n+        if (options.exists(\"change_position\")) {\n+            change_position = options[\"change_position\"].get_int();\n         }\n \n         if (options.exists(\"change_type\")) {\n-            if (options.exists(\"changeAddress\") || options.exists(\"change_address\")) {\n+            if (options.exists(\"change_address\")) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both change address and address type options\");\n             }\n             OutputType out_type;\n@@ -3008,11 +3014,10 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n             coinControl.m_change_type.emplace(out_type);\n         }\n \n-        const UniValue include_watching_option = options.exists(\"include_watching\") ? options[\"include_watching\"] : options[\"includeWatching\"];\n-        coinControl.fAllowWatchOnly = ParseIncludeWatchonly(include_watching_option, *pwallet);\n+        coinControl.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n \n-        if (options.exists(\"lockUnspents\") || options.exists(\"lock_unspents\")) {\n-            lockUnspents = (options.exists(\"lock_unspents\") ? options[\"lock_unspents\"] : options[\"lockUnspents\"]).get_bool();\n+        if (options.exists(\"lock_unspents\")) {\n+            lockUnspents = options[\"lock_unspents\"].get_bool();\n         }\n \n         if (options.exists(\"feeRate\"))\n@@ -3027,8 +3032,9 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n             coinControl.fOverrideFeeRate = true;\n         }\n \n-        if (options.exists(\"subtractFeeFromOutputs\") || options.exists(\"subtract_fee_from_outputs\") )\n-            subtractFeeFromOutputs = (options.exists(\"subtract_fee_from_outputs\") ? options[\"subtract_fee_from_outputs\"] : options[\"subtractFeeFromOutputs\"]).get_array();\n+        if (options.exists(\"subtract_fee_from_outputs\")) {\n+            subtractFeeFromOutputs = options[\"subtract_fee_from_outputs\"].get_array();\n+        }\n \n         if (options.exists(\"replaceable\")) {\n             coinControl.m_signal_bip125_rbf = options[\"replaceable\"].get_bool();\n@@ -3333,6 +3339,9 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n \n     if (!request.params[1].isNull()) {\n         UniValue options = request.params[1];\n+        RPCTypeCheckAliases(options, {\n+            {\"conf_target\", \"confTarget\"},\n+        });\n         RPCTypeCheckObj(options,\n             {\n                 {\"confTarget\", UniValueType(UniValue::VNUM)},\n@@ -3343,17 +3352,11 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n             },\n             true, true);\n \n-        if (options.exists(\"confTarget\") && options.exists(\"conf_target\")) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"confTarget and conf_target options should not both be set. Use conf_target (confTarget is deprecated).\");\n-        }\n-\n-        auto conf_target = options.exists(\"confTarget\") ? options[\"confTarget\"] : options[\"conf_target\"];\n-\n-        if (!conf_target.isNull()) {\n+        if (!options[\"conf_target\"].isNull()) {\n             if (options.exists(\"fee_rate\")) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"conf_target can't be set with fee_rate. Please provide either a confirmation target in blocks for automatic fee estimation, or an explicit fee rate.\");\n             }\n-            coin_control.m_confirm_target = ParseConfirmTarget(conf_target, pwallet->chain().estimateMaxBlocks());\n+            coin_control.m_confirm_target = ParseConfirmTarget(options[\"conf_target\"], pwallet->chain().estimateMaxBlocks());\n         } else if (options.exists(\"fee_rate\")) {\n             CFeeRate fee_rate(AmountFromValue(options[\"fee_rate\"]));\n             if (fee_rate <= CFeeRate(0)) {\n@@ -3365,7 +3368,7 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n         if (options.exists(\"replaceable\")) {\n             coin_control.m_signal_bip125_rbf = options[\"replaceable\"].get_bool();\n         }\n-        SetFeeEstimateMode(pwallet, coin_control, options[\"estimate_mode\"], conf_target);\n+        SetFeeEstimateMode(pwallet, coin_control, options[\"estimate_mode\"], options[\"conf_target\"]);\n     }\n \n     // Make sure the results are valid at least up to the most recent block"
      },
      {
        "sha": "a355c353e3f517346f7fab4e87dfa3a678b731a6",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/965c760bee614db83f9d558e5d7406ca1a679de1/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/965c760bee614db83f9d558e5d7406ca1a679de1/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=965c760bee614db83f9d558e5d7406ca1a679de1",
        "patch": "@@ -116,7 +116,7 @@ def test_invalid_parameters(self, node, dest_address):\n             \"estimate_mode\": Decimal(\"3.141592\"),\n         })\n         # confTarget and conf_target\n-        assert_raises_rpc_error(-8, \"confTarget and conf_target options should not both be set\", node.bumpfee, txid, {\n+        assert_raises_rpc_error(-8, \"May not use both conf_target and confTarget simultaneously\", node.bumpfee, txid, {\n             \"confTarget\": 123,\n             \"conf_target\": 456,\n         })"
      }
    ]
  },
  {
    "sha": "9056b07bb8dc1ef78b4df29b3b1b9e9ef5a83a22",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MDU2YjA3YmI4ZGMxZWY3OGI0ZGYyOWIzYjFiOWU5ZWY1YTgzYTIy",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-09-15T05:40:02Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-09-18T00:25:14Z"
      },
      "message": "rpc: rename UniValue keys via const-casting",
      "tree": {
        "sha": "34f27b24dccc48b793f0511432fd5a40e5f1030e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/34f27b24dccc48b793f0511432fd5a40e5f1030e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9056b07bb8dc1ef78b4df29b3b1b9e9ef5a83a22",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIyBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl9j/moACgkQV692LbM1\nMyJjPw/3fsbzVoR6eajAvGGZgB/REKAfAvTvalQsHxLUm6SHcnXaOxkY1q4j1G8T\nqtt1wndfHmdnTTrC+yBqy/IDhybCpvrjtyl+G7CGzwAS8SG/QNk5RooyfcLHfpG1\n2eIlYvjzMeAUve2NQ1xIvP/svNWmNSBDig/9MqkxD/FXql0tGE247IXrnbwCU+SH\n1jk5sWwF/f1mWu8OF0Ajcz9XYmYxsYxAGmlUjbCtl8cvRng0mbCvf3iyrwuWiyQh\nds+mc3F0DMGEE9MCKznnpuXYu34yFGzNTw4RCr5ncazi1S3fGCbQdyKzh6eQYqxz\nmismEk0RY8CM21hoDFSLCYw/6Dd9v9md4+MPPU/il1kUMg14NHUkYA3Tkazd94Gi\nRsZYeC+zUAMookkuUzKFF/a3CvHD4bLUdI/PViTDa6t/8PSSHQ1VscuE3z6zx42W\ntjvSIa+DC201PD3jriqFyXFHBr4zhuRTIS/nm9Yvnf0suI3TMa/rMQMfyn8yROed\nLR38oJ9CGm+hERIN3B3Zoewl4LRrQhdneg6P+LeoX/BGbOJaNTRHsEwe6Xo7K0f2\nUZ7cHqZlQWXbrqCn6soQiPuiFYPEBi0ZRs2y+LZcgN2FXq9OmoFDXTkhXu/3P5ls\nvVF6Xc6h8ANvl+ug/VFYhG7blGg56R9oeKDL3FfF4zZv79YHFQ==\n=8cE8\n-----END PGP SIGNATURE-----",
        "payload": "tree 34f27b24dccc48b793f0511432fd5a40e5f1030e\nparent 965c760bee614db83f9d558e5d7406ca1a679de1\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1600148402 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1600388714 +0900\n\nrpc: rename UniValue keys via const-casting\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9056b07bb8dc1ef78b4df29b3b1b9e9ef5a83a22",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9056b07bb8dc1ef78b4df29b3b1b9e9ef5a83a22",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9056b07bb8dc1ef78b4df29b3b1b9e9ef5a83a22/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "965c760bee614db83f9d558e5d7406ca1a679de1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/965c760bee614db83f9d558e5d7406ca1a679de1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/965c760bee614db83f9d558e5d7406ca1a679de1"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 9,
      "deletions": 7
    },
    "files": [
      {
        "sha": "6ebe0b2feaf3ae4be028ec2150ea7a36ca2416d8",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9056b07bb8dc1ef78b4df29b3b1b9e9ef5a83a22/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9056b07bb8dc1ef78b4df29b3b1b9e9ef5a83a22/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=9056b07bb8dc1ef78b4df29b3b1b9e9ef5a83a22",
        "patch": "@@ -82,7 +82,15 @@ void RPCTypeCheckAliases(UniValue& o,\n             if (o.exists(alias.first)) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"May not use both \" + alias.first + \" and \" + alias.second + \" simultaneously.\");\n             }\n-            o.pushKV(alias.first, o[alias.second]);\n+            // we (ab)use the fact UniValue::getKeys() returns a const direct reference to the keys vector\n+            // and handwave away the constness and modify the keys directly\n+            std::vector<std::string>& keys = const_cast<std::vector<std::string>&>(o.getKeys());\n+            for (size_t i = 0; i < keys.size(); ++i) {\n+                if (keys.at(i) == alias.second) {\n+                    keys[i] = alias.first;\n+                    break;\n+                }\n+            }\n         }\n     }\n }"
      },
      {
        "sha": "d2a518b3b864b165988fe60848d2e238ee5a5883",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9056b07bb8dc1ef78b4df29b3b1b9e9ef5a83a22/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9056b07bb8dc1ef78b4df29b3b1b9e9ef5a83a22/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=9056b07bb8dc1ef78b4df29b3b1b9e9ef5a83a22",
        "patch": "@@ -2964,20 +2964,15 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n             {\n                 {\"add_inputs\", UniValueType(UniValue::VBOOL)},\n                 {\"add_to_wallet\", UniValueType(UniValue::VBOOL)},\n-                {\"changeAddress\", UniValueType(UniValue::VSTR)},\n                 {\"change_address\", UniValueType(UniValue::VSTR)},\n-                {\"changePosition\", UniValueType(UniValue::VNUM)},\n                 {\"change_position\", UniValueType(UniValue::VNUM)},\n                 {\"change_type\", UniValueType(UniValue::VSTR)},\n-                {\"includeWatching\", UniValueType(UniValue::VBOOL)},\n                 {\"include_watching\", UniValueType(UniValue::VBOOL)},\n                 {\"inputs\", UniValueType(UniValue::VARR)},\n-                {\"lockUnspents\", UniValueType(UniValue::VBOOL)},\n                 {\"lock_unspents\", UniValueType(UniValue::VBOOL)},\n                 {\"locktime\", UniValueType(UniValue::VNUM)},\n                 {\"feeRate\", UniValueType()}, // will be checked below,\n                 {\"psbt\", UniValueType(UniValue::VBOOL)},\n-                {\"subtractFeeFromOutputs\", UniValueType(UniValue::VARR)},\n                 {\"subtract_fee_from_outputs\", UniValueType(UniValue::VARR)},\n                 {\"replaceable\", UniValueType(UniValue::VBOOL)},\n                 {\"conf_target\", UniValueType(UniValue::VNUM)},\n@@ -3344,7 +3339,6 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n         });\n         RPCTypeCheckObj(options,\n             {\n-                {\"confTarget\", UniValueType(UniValue::VNUM)},\n                 {\"conf_target\", UniValueType(UniValue::VNUM)},\n                 {\"fee_rate\", UniValueType(UniValue::VNUM)},\n                 {\"replaceable\", UniValueType(UniValue::VBOOL)},"
      }
    ]
  }
]