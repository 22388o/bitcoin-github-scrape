achow101,2017-10-25T04:11:23Z,I think this needs a 0.15.0.2 tag,https://github.com/bitcoin/bitcoin/pull/11531#issuecomment-339208800,339208800,
theuni,2017-10-27T07:33:41Z,"utACK up until ffedf48b218b50b8187cbabf2969e519315c98a6, which has nuances that I'm not comfortable ACKing before taking some rabbit-hole dives.\n\nSide-note: This is a really well-done patch set that is (other than the last commit which is the meat of it) very straightforward and easy to review. Though the changes are mostly one-liners, breaking them up functionally is a big help. Nice work :)",https://github.com/bitcoin/bitcoin/pull/11531#issuecomment-339896149,339896149,
TheBlueMatt,2017-10-27T18:00:54Z,Rebased on master with no changes.,https://github.com/bitcoin/bitcoin/pull/11531#issuecomment-340042552,340042552,
TheBlueMatt,2017-10-27T22:47:38Z,Addressed (or commented on) @ryanofsky's feedback.,https://github.com/bitcoin/bitcoin/pull/11531#issuecomment-340114902,340114902,
TheBlueMatt,2017-10-29T17:45:46Z,Addressed @MeshCollider's code comment issues.,https://github.com/bitcoin/bitcoin/pull/11531#issuecomment-340280205,340280205,
achow101,2017-10-29T21:50:06Z,utACK 35e7b4e2bb7f749a4c8426dc3ea71b77f3457f30,https://github.com/bitcoin/bitcoin/pull/11531#issuecomment-340303341,340303341,
meshcollider,2017-10-29T21:52:22Z,re-utACK https://github.com/bitcoin/bitcoin/commit/35e7b4e2bb7f749a4c8426dc3ea71b77f3457f30,https://github.com/bitcoin/bitcoin/pull/11531#issuecomment-340303664,340303664,
laanwj,2017-10-30T16:54:58Z,"utACK 35e7b4e\n(I guess the rationale behind `f ` commits is that they should be squashed before merge?)",https://github.com/bitcoin/bitcoin/pull/11531#issuecomment-340510027,340510027,
TheBlueMatt,2017-10-30T17:11:22Z,Squashed.,https://github.com/bitcoin/bitcoin/pull/11531#issuecomment-340515513,340515513,
sdaftuar,2017-10-31T01:06:22Z,"p2p-acceptblock.py is broken, it's apparently an extended test and not run by travis:\n\n```\n$ test/functional/test_runner.py p2p-acceptblock\nTemporary test directory at /var/folders/pw/k25spdv971g8xhccyx5t3yyr0000gn/T/bitcoin_test_runner_20171030_210539\n..\np2p-acceptblock.py failed, Duration: 1 s\n\nstdout:\n2017-10-31 01:05:39.236000 TestFramework (INFO): Initializing test directory",https://github.com/bitcoin/bitcoin/pull/11531#issuecomment-340629620,340629620,
TheBlueMatt,2017-10-31T01:31:23Z,"Gah, Russ scared me into adding too many checks. I moved p2p-acceptblock into regular tests so that travis runs it and fixed the test.",https://github.com/bitcoin/bitcoin/pull/11531#issuecomment-340633169,340633169,
sdaftuar,2017-10-31T12:20:36Z,"I think it's worth mentioning why I think his change, which adds a way to ban all peers giving us a block header that builds on an invalid previous block, is okay, when we have been discussing changing our ban-behavior to exclude inbound peers from these checks, and to generally favor disconnects over ban+disconnect even for outbound peers.\n\nWhile I'd like to see the ban-behavior vastly improv",https://github.com/bitcoin/bitcoin/pull/11531#issuecomment-340745537,340745537,
TheBlueMatt,2017-10-31T17:52:34Z,"Addressed @sdaftuar's suggestions and squashed. Indeed, I dont think the way things are with header disconnection here, and as mentioned already have a branch working towards redoing it rather significantly, but that certainly isn't gonna make 0.15.0.2.",https://github.com/bitcoin/bitcoin/pull/11531#issuecomment-340847426,340847426,
laanwj,2017-11-01T13:41:51Z,"utACK: only changes between  b291009 and f3d4adf:\n```patch\ndiff -dur bitcoin-b29100958b37fc7d499e9932e38ae88e3596fa1e/src/validation.cpp bitcoin-f3d4adfa6ff5db180ec09d93f78cdc8bfda26f96/src/validation.cpp\n--- bitcoin-b29100958b37fc7d499e9932e38ae88e3596fa1e/src/validation.cpp	2017-10-31 02:30:32.000000000 +0100\n+++ bitcoin-f3d4adfa6ff5db180ec09d93f78cdc8bfda26f96/src/validation.cpp	2017-10",https://github.com/bitcoin/bitcoin/pull/11531#issuecomment-341109157,341109157,
sipa,2017-11-01T19:14:38Z,posthumous utACK f3d4adfa6ff5db180ec09d93f78cdc8bfda26f96; didn't review the test changes,https://github.com/bitcoin/bitcoin/pull/11531#issuecomment-341209884,341209884,
sdaftuar,2017-10-20T01:52:32Z,"What do you think about bypassing this logic in the event that pindexPrev is VALID_SCRIPTS?  I'm slightly concerned about some kind of weird scenario where g_failed_blocks grows (hopefully slowly!) over time, slowing down block processing the longer a node has been up.",https://github.com/bitcoin/bitcoin/pull/11531#discussion_r145863477,145863477,src/validation.cpp
Sjors,2017-10-20T09:03:14Z,"It would be nice to specifically test for `bad-prevblk` being thrown, perhaps using the mechanism in #11220. I'm not sure how to do that in the python tests though.",https://github.com/bitcoin/bitcoin/pull/11531#discussion_r145911947,145911947,src/validation.cpp
Sjors,2017-10-20T09:36:15Z,"Another place to test this would be to add a test for [ProcessNewBlockHeaders](https://github.com/bitcoin/bitcoin/blob/v0.15.0.1/src/validation.cpp#L3067-L3084). I can take a stab at it, but I'm not sure which file that test should be added too, or which test would be a good example to base it on.",https://github.com/bitcoin/bitcoin/pull/11531#discussion_r145918843,145918843,src/validation.cpp
TheBlueMatt,2017-10-20T19:35:34Z,Done,https://github.com/bitcoin/bitcoin/pull/11531#discussion_r146049681,146049681,src/validation.cpp
ryanofsky,2017-10-27T17:39:36Z,"In commit ""Reject headers building on invalid chains by tracking invalidity""\n\nMaybe assert `chainActive.Contains(pindex)` here. Otherwise it isn't clear that the `while (invalid_walk_tip != pindex)` loop below will work.",https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147472429,147472429,src/validation.cpp
ryanofsky,2017-10-27T17:45:10Z,"In commit ""Reject headers building on invalid chains by tracking invalidity""\n\nMaybe add `// Mark descendants of the block invalid` comment for consistency and easier skimming",https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147473727,147473727,src/validation.cpp
ryanofsky,2017-10-27T17:53:45Z,"In commit ""Reject headers building on invalid chains by tracking invalidity""\n\nMaybe move this comment above the setBlockIndexCandidates.erase() call so it is clearer what this is referring to.",https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147475839,147475839,src/validation.cpp
ryanofsky,2017-10-27T17:59:13Z,"In commit ""Reject headers building on invalid chains by tracking invalidity""\n\nWhy isn't setBlockIndexCandidates.erase() needed here?",https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147477166,147477166,src/validation.cpp
ryanofsky,2017-10-27T18:04:10Z,"In commit ""Reject headers building on invalid chains by tracking invalidity""\n\nShould the first condition be `pindex->nStatus & BLOCK_FAILED_CHILD` instead of FAILED_MASK?\n\nOtherwise if it is intentional to avoid setting FAILED_CHILD here when FAILED_VALID is set, it might be good to have a comment, because the |= FAILED_CHILD code in AcceptBlockHeader and InvalidateBlock isn't checking thi",https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147478331,147478331,src/validation.cpp
ryanofsky,2017-10-27T18:13:50Z,"In commit ""Reject headers building on invalid chains by tracking invalidity""\n\nWould be good if the comment said what the relationship to the BLOCK_FAILED_VALID flag is. For example if all the FAILED_VALID blocks will be in this set, or only some of them.",https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147480738,147480738,src/validation.cpp
ryanofsky,2017-10-27T18:27:28Z,"In commit ""Rewrite p2p-acceptblock in preparation for slight behavior changes""\n\nThis sounds reversed and doesn't actually describe the connections. Maye write ""We have one NodeConn connection to node0 called test_node, and one to node1 called min_work_node.""",https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147484247,147484247,test/functional/p2p-acceptblock.py
ryanofsky,2017-10-27T18:29:48Z,"In commit ""Rewrite p2p-acceptblock in preparation for slight behavior changes""\n\nClearer before with ""on each node""",https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147484780,147484780,test/functional/p2p-acceptblock.py
ryanofsky,2017-10-27T19:01:41Z,"In commit ""Rewrite p2p-acceptblock in preparation for slight behavior changes""\n\nMaybe drop ""from non-whitelisted peer""",https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147492178,147492178,test/functional/p2p-acceptblock.py
ryanofsky,2017-10-27T19:17:57Z,"In commit ""Rewrite p2p-acceptblock in preparation for slight behavior changes""\n\nUnclear what 288 refers to. Maybe define MIN_BLOCKS_TO_KEEP constant in python and use that in the test.",https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147495467,147495467,test/functional/p2p-acceptblock.py
ryanofsky,2017-10-27T19:49:55Z,"In commit ""Rewrite p2p-acceptblock in preparation for slight behavior changes""\n\nMaybe check for ""Block not found on disk"" here to verify the block wasn't processed.",https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147501714,147501714,test/functional/p2p-acceptblock.py
ryanofsky,2017-10-27T20:13:32Z,"In commit ""Stop always storing blocks from whitelisted peers""\n\nIs this change related to the ""new headers are not a descendant of an invalid block"" check or is it only part of this PR because it simplifies the p2p-acceptblock test? Seems like good cleanup regardless, but would like to understand.",https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147506626,147506626,src/net_processing.cpp
ryanofsky,2017-10-27T20:18:49Z,"In commit ""Accept unrequested blocks with work equal to our tip""\n\nSame question again: Is this change related to the ""new headers are not a descendant of an invalid block"" check or is it only part of this PR because it simplifies the p2p-acceptblock test? Again it seems fine, just asking to understand.",https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147507620,147507620,src/validation.cpp
ryanofsky,2017-10-27T20:36:11Z,"In commit ""[qa] test that invalid blocks on an invalid chain get a disconnect""\n\nCould you add a comment to explain why the timeout is required? Is this assuming that if disconnect happens, it will happen within 1 second? Why not just do a normal sync_with_ping with the default timeout?",https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147511090,147511090,test/functional/p2p-acceptblock.py
ryanofsky,2017-10-27T20:43:20Z,"In commit ""[qa] test that invalid blocks on an invalid chain get a disconnect""\n\nCould you add a comment explaining AssertionError? Is this catching the disconnect or the timeout or both?",https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147512503,147512503,test/functional/p2p-acceptblock.py
ryanofsky,2017-10-27T20:47:31Z,"In commit ""[qa] test that invalid blocks on an invalid chain get a disconnect""\n\nThis seems to waiting 1 second for a ping response, and if that fails, then wait 60 seconds for disconnection before reconnecting? Does sync_with_ping not raise an error on disconnect?",https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147513402,147513402,test/functional/p2p-acceptblock.py
ryanofsky,2017-10-27T20:53:16Z,"In commit ""[qa] test that invalid blocks on an invalid chain get a disconnect""\n\nCan you expand comment to say why it's not desirable to make an assumption. Is there some kind of nondeterminism or complexity in knowing what the node is going to do? ",https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147514618,147514618,test/functional/p2p-acceptblock.py
TheBlueMatt,2017-10-27T22:25:17Z,"The second. Mostly because it started as a ""cleanup p2p-acceptblock test"" pr and then I didn't want to rewrite the p2p-acceptblock test again to not care about this.",https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147529066,147529066,src/net_processing.cpp
TheBlueMatt,2017-10-27T22:25:20Z,"The second. Mostly because it started as a ""cleanup p2p-acceptblock test"" pr and then I didn't want to rewrite the p2p-acceptblock test again to not care about this.",https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147529068,147529068,src/validation.cpp
TheBlueMatt,2017-10-27T22:30:16Z,"Nah, thats just a bug, fixing.",https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147529674,147529674,src/validation.cpp
TheBlueMatt,2017-10-27T22:31:54Z,"Its actually not related to setBlockIndexCandidates (which is not persistent) - its related to the nStatus flags, I'll clarify comment.",https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147529900,147529900,src/validation.cpp
TheBlueMatt,2017-10-27T22:35:19Z,"None of those objects can be in our setBlockIndexCandidates - if they were we sould have tried to connect towards them, found them to be invalid, and then marked them as such (at least enough to get them out of our setBlockIndexCandidates).",https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147530323,147530323,src/validation.cpp
TheBlueMatt,2017-10-27T22:37:13Z,"It shouldn't matter - really this is an indication of corruption - you can't be both FAILED_CHILD and FAILED_VALID, you also cannot be FAILED_VALID if you have a FAILED_MASK parent. At the risk of overcomplicating things for a (currently) harmless error, I'll skip adding a check, unless you object.",https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147530584,147530584,src/validation.cpp
TheBlueMatt,2017-10-27T22:40:25Z,"Standard testing practice - we've sent something for which a reasonable node may very well decide to DoS us, disconnect us or whathave you, dont test that the node not do a thing that its perfectly reasonable for it to do. I'd say thats implied here, but happy to clarify more (or put something in some dev-notes doc).",https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147530962,147530962,test/functional/p2p-acceptblock.py
TheBlueMatt,2017-10-27T22:46:50Z,"Honestly, I have no idea...someone who knows more about the test framework should come along and make the catch here much more specific.",https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147531626,147531626,test/functional/p2p-acceptblock.py
meshcollider,2017-10-29T02:14:09Z,Seems like the comment above needs modification/removing because of this?,https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147569060,147569060,src/net_processing.cpp
meshcollider,2017-10-29T02:14:50Z,Nit: typo `effeciently` -> `efficiently`,https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147569068,147569068,src/validation.cpp
ryanofsky,2017-10-30T17:46:52Z,"In commit ""test that invalid blocks on an invalid chain get a disconnect""\n\nTest seems like it will hang and fail in the case where a node takes more than one second to the respond to the ping, but does not disconnect because sync_with_ping and wait_for_disconnect will both timeout.",https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147781059,147781059,test/functional/p2p-acceptblock.py
ryanofsky,2017-10-30T17:52:19Z,"In commit ""[qa] test that invalid blocks on an invalid chain get a disconnect""\n\nThis chunk of code is repeated several times in the test. I think you could simplify it as:\n\n```python\nstatus = {block['hash']: block['status'] for block in self.nodes[0].getchaintips()}\nassert_equal(status[block_292.hash], ""headers-only"")\n```",https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147782660,147782660,test/functional/p2p-acceptblock.py
sipa,2017-10-30T18:02:35Z,"Moving this has the disadvantage that if Bitcoin Core is shut down while invalidating, even after part of it is was flushed already, the invalidating will be reverted at startup.",https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147785842,147785842,src/validation.cpp
TheBlueMatt,2017-10-30T18:34:11Z,"i'd say thats better than, at least in the common-pruning-case, failing to start at all and requiring re-sync by assert(false)ing each time you try to start up?",https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147794990,147794990,src/validation.cpp
sdaftuar,2017-10-30T19:17:00Z,"Yeah I think this comment is pretty cryptic for anyone not aware of the two approaches we've discussed about how to detect that a header builds on an invalid chain:\na) when you detect an invalid block, mark all descendants as BLOCK_FAILED_CHILD\nb) (what we implement in this pr)\n\nPerhaps:\n\n```\n/** In order to efficiently track invalidity of headers, we keep the set of \n  * blocks wh",https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147807019,147807019,src/validation.cpp
sdaftuar,2017-10-31T01:48:39Z,"If you're going to squash this in to `Rewrite p2p-acceptblock in preparation for slight behavior changes`, then you'll need to have this line commented out (and re-uncomment it in `Accept unrequested blocks with work equal to our tip`), in order to make the test succeed after that first commit, I think.",https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147878755,147878755,test/functional/p2p-acceptblock.py
sdaftuar,2017-10-31T01:58:19Z,4c?,https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147879678,147879678,test/functional/p2p-acceptblock.py
TheBlueMatt,2017-10-31T17:51:38Z,"Oh ffs, I'm just gonna remove that line.",https://github.com/bitcoin/bitcoin/pull/11531#discussion_r148076448,148076448,test/functional/p2p-acceptblock.py
TheBlueMatt,2017-10-31T17:51:40Z,"Yea, 4 was split into 4 a and b, I updated the comment to note that.",https://github.com/bitcoin/bitcoin/pull/11531#discussion_r148076455,148076455,test/functional/p2p-acceptblock.py
