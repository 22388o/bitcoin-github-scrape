[
  {
    "sha": "e7371008ea0add16a98c310b052bebbb7fd43110",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNzM3MTAwOGVhMGFkZDE2YTk4YzMxMGIwNTJiZWJiYjdmZDQzMTEw",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-22T20:44:14Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-22T20:59:00Z"
      },
      "message": "Add missing cs_wallet locks when accessing m_last_block_processed\n\nm_last_block_processed is guarded by cs_wallet.\n\nThese changes are required to get the Travis CI build (the build\njob with Clang's thread safety analysis enabled) to pass when the\nfollowing locking annotation is added:\n\n```\nconst CBlockIndex* m_last_block_processed GUARDED_BY(cs_wallet);\n```",
      "tree": {
        "sha": "ecb3eafb91aadfa5db1615db5e9de1f4cb3bcec2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ecb3eafb91aadfa5db1615db5e9de1f4cb3bcec2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e7371008ea0add16a98c310b052bebbb7fd43110",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7371008ea0add16a98c310b052bebbb7fd43110",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e7371008ea0add16a98c310b052bebbb7fd43110",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7371008ea0add16a98c310b052bebbb7fd43110/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5ea932a51083837cdd27715e10a3a0d5d553af24",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ea932a51083837cdd27715e10a3a0d5d553af24",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5ea932a51083837cdd27715e10a3a0d5d553af24"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 6,
      "deletions": 8
    },
    "files": [
      {
        "sha": "96b219af07d091c3908485dcb6f19287d016914d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7371008ea0add16a98c310b052bebbb7fd43110/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7371008ea0add16a98c310b052bebbb7fd43110/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e7371008ea0add16a98c310b052bebbb7fd43110",
        "patch": "@@ -1272,10 +1272,7 @@ void CWallet::BlockUntilSyncedToCurrentChain() {\n     {\n         // Skip the queue-draining stuff if we know we're caught up with\n         // chainActive.Tip()...\n-        // We could also take cs_wallet here, and call m_last_block_processed\n-        // protected by cs_wallet instead of cs_main, but as long as we need\n-        // cs_main here anyway, its easier to just call it cs_main-protected.\n-        LOCK(cs_main);\n+        LOCK2(cs_main, cs_wallet);\n         const CBlockIndex* initialChainTip = chainActive.Tip();\n \n         if (m_last_block_processed->GetAncestor(initialChainTip->nHeight) == initialChainTip) {\n@@ -3966,7 +3963,10 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n             pindexRescan = FindForkInGlobalIndex(chainActive, locator);\n     }\n \n-    walletInstance->m_last_block_processed = chainActive.Tip();\n+    {\n+        LOCK(walletInstance->cs_wallet);\n+        walletInstance->m_last_block_processed = chainActive.Tip();\n+    }\n     RegisterValidationInterface(walletInstance);\n \n     if (chainActive.Tip() && chainActive.Tip() != pindexRescan)"
      },
      {
        "sha": "f4a394e8150e1e68540b1d3c8f958098c9856bb9",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7371008ea0add16a98c310b052bebbb7fd43110/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7371008ea0add16a98c310b052bebbb7fd43110/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=e7371008ea0add16a98c310b052bebbb7fd43110",
        "patch": "@@ -728,10 +728,8 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n      * Note that this is *not* how far we've processed, we may need some rescan\n      * to have seen all transactions in the chain, but is only used to track\n      * live BlockConnected callbacks.\n-     *\n-     * Protected by cs_main (see BlockUntilSyncedToCurrentChain)\n      */\n-    const CBlockIndex* m_last_block_processed;\n+    const CBlockIndex* m_last_block_processed GUARDED_BY(cs_wallet);\n \n public:\n     /*"
      }
    ]
  }
]