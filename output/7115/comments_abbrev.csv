sipa,2015-11-27T14:28:05Z,"Reluctant ACK.\n\nCode ACK, agree about avoiding the circular dependency, and agree about avoiding GetArg calls to determine the mempool max size the whole time.\n\nI dislike moving more policy knowledge into the mempool itself (its size limit), though. It will complicate a more generic memory limiting approach, where there is not a single memory size limit, but one that depends on the UTXO size a",https://github.com/bitcoin/bitcoin/pull/7115#issuecomment-160150366,160150366,
jtimon,2015-11-27T14:48:30Z,"Complicate it by putting it into a single attribute in the class that makes more sense?\nAlthough I'm not sure how what you have in mind would interact with the current mempool limiting, can't we just create a simple setter when we need it?\nI mean, putting it as an attribute there is not the only solution. We can also make it a global in main that the mempool takes as parameter.\nAbout having pol",https://github.com/bitcoin/bitcoin/pull/7115#issuecomment-160153553,160153553,
sipa,2015-11-27T14:58:34Z,"@jtimon It's a philosophical point. The CTxMempool data structure IMHO should not make policy decisions at all. It shouldn't even know there is something like a size limit, it's just a data structure. It should provide methods to query its state and indexes and make mutations to it, but not be involved in what data should be in it. That's the caller's responsibility. That's just separation of conc",https://github.com/bitcoin/bitcoin/pull/7115#issuecomment-160155110,160155110,
jtimon,2015-11-27T15:05:59Z,"> @jtimon It's a philosophical point. The CTxMempool data structure IMHO should not make policy decisions at all.\n\nAnd I agree. But we're very far from that. Right now CTxMempool has a CBlockPolicyEstimator, which is a policy class.\nBut I would like to understand your point about ""a more generic memory limiting approach"" better.\n\n> Just because moving a variable somewhere makes the code easie",https://github.com/bitcoin/bitcoin/pull/7115#issuecomment-160156577,160156577,
sipa,2015-11-27T15:09:52Z,"Well, ideally (but that would require significant changes, which I'm not suggesting now) is that the mempool has generic hooks that inform listeners about changes, and that the policyestimator registrers itself there. The code that manages the mempool (currently main) would tell the policyestimator what the memory limit is, if any. The -maxmempool option would only be parsed there.\n",https://github.com/bitcoin/bitcoin/pull/7115#issuecomment-160157160,160157160,
jtimon,2015-11-27T15:49:35Z,"Here's another option without the new attribute in CTxMemPool: https://github.com/bitcoin/bitcoin/compare/master...jtimon:mempool-circular-dependency\n\nIf that is preferred, I'm happy with that too.\n\nI believe I disagree with your ideal solution with generic hooks.\nAs said I would prefer to just make CTxMempool  and CBlockPolicyEstimator completely independent, and only parse  -maxmempool in C",https://github.com/bitcoin/bitcoin/pull/7115#issuecomment-160164675,160164675,
morcos,2015-11-27T16:29:07Z,"NACK for now.\n\n@sipa Why does this circular dependency have to be solved right now?\n\nI'm all for cleaning up the code design, but I think the proper next step is to make the mempool unaware of the policy estimator not the other way around.   I think it would make sense for the mempool to be aware of it's current state, so when TrimToSize is called with an argument, the mempool should remember ",https://github.com/bitcoin/bitcoin/pull/7115#issuecomment-160170819,160170819,
sipa,2015-11-27T16:32:28Z,"@morcos Ok, I hadn't considered that the estimator likely will need more access to the mempool anyway.\n\nSeeing circular dependencies in the code still makes me cringe, though...\n",https://github.com/bitcoin/bitcoin/pull/7115#issuecomment-160171205,160171205,
jtimon,2015-11-27T17:13:06Z,"> @sipa Why does this circular dependency have to be solved right now?\n\nBecause you just introduced it without the need to do so?\nThe question could be rather, why this circular dependency needed to be introduced in  #6134?\n\n> I'm all for cleaning up the code design, but I think the proper next step is to make the mempool unaware of the policy estimator not the other way around. \n\nI agree w",https://github.com/bitcoin/bitcoin/pull/7115#issuecomment-160177787,160177787,
jtimon,2015-11-27T17:14:58Z,I should have been more explicit and just nacked #6134 instead of coding a nit to be ignored...\n\n@sipa did you looked at the option without moving anything to mempool.o ?\n,https://github.com/bitcoin/bitcoin/pull/7115#issuecomment-160178012,160178012,
morcos,2015-11-29T14:17:33Z,"> I highly dislike that ""solution"" (what is this solving exactly?), the default if not provided being ""the same that was used in the last call"" is a twisted interface.\n\n@jtimon but it's not a default, that's exactly what that attribute is meant to represent.  It's used only for GetMinFee which only cares about how much the mempool has shrunk since the last time you trimmed it.  If we ever change",https://github.com/bitcoin/bitcoin/pull/7115#issuecomment-160418637,160418637,
TheBlueMatt,2015-11-29T19:22:46Z,"@sipa I really disagree re: CTxMemPool having knowledge of its size limit, etc. Bitcoin Core has a number of places where we've made similar decisions and the result is a simple data structure that has almost no encapsulation with callers left to do all the work. The mempool limiting stuff as written already suffers from this and it adds a number of lines to main that could otherwise be hidden awa",https://github.com/bitcoin/bitcoin/pull/7115#issuecomment-160454826,160454826,
sipa,2015-11-29T19:28:04Z,"Heh, fully agree about all that. But I don't think we should have let a\ncircular dependency in, so absent a better plan to fix that, I'd be fine\nwith at least temporarily localizing that information to the mempool.\n\nIt seems @morcos does have a better plan though, so let's go for that.\n",https://github.com/bitcoin/bitcoin/pull/7115#issuecomment-160455097,160455097,
TheBlueMatt,2015-11-29T19:29:35Z,"Sure, I was commenting more generally, not really in response to this specific pull.\n\nOn November 29, 2015 2:28:12 PM EST, Pieter Wuille notifications@github.com wrote:\n\n> Heh, fully agree about all that. But I don't think we should have let a\n> circular dependency in, so absent a better plan to fix that, I'd be\n> fine\n> with at least temporarily localizing that information to the mempool.\",https://github.com/bitcoin/bitcoin/pull/7115#issuecomment-160455163,160455163,
jtimon,2015-11-29T19:49:49Z,"So which of the two branches is preferred? The attribute or the global?\nOn Nov 29, 2015 8:30 PM, ""Matt Corallo"" notifications@github.com wrote:\n\n> Sure, I was commenting more generally, not really in response to this\n> specific pull.\n> \n> On November 29, 2015 2:28:12 PM EST, Pieter Wuille <\n> notifications@github.com> wrote:\n> \n> > Heh, fully agree about all that. But I don't think we sho",https://github.com/bitcoin/bitcoin/pull/7115#issuecomment-160460521,160460521,
morcos,2015-11-29T22:11:52Z,"Unfortunately we're talking about two separate issues addressed in this pull.\n\n1) I have a different idea about how the size attribute should be stored in that I think the attribute should be called lastTrimmedSize and set from TrimToSize.  This preserves a bit more flexibility for how we do mempool trimming in the future, but both my approach and Jorge's approach just eliminate repeated calls t",https://github.com/bitcoin/bitcoin/pull/7115#issuecomment-160475677,160475677,
jtimon,2015-11-29T22:49:11Z,"@morcos Yes, it is two separate things, that's why I proposed https://github.com/bitcoin/bitcoin/compare/master...jtimon:mempool-circular-dependency because what we're discussing is where to put the maxsize command-line option (not dynamic).\nRight now it's in the global https://github.com/bitcoin/bitcoin/blob/master/src/util.h#L43\n\nI initially moved it to a CTxMemPool attribute but @sipa compla",https://github.com/bitcoin/bitcoin/pull/7115#issuecomment-160478983,160478983,
jtimon,2015-12-01T02:34:42Z,"In bitcoin JT-0.12 CTxMemPool and CBlockPolicyEstimator will be completely independent, and I believe this may come with a performance improvement that I'm not sure will ever be closer than 6 commits away from bitcoin/master.\nClosing, @morcos you won whatever we were fighting for.\nLong live circular dependencies!\n",https://github.com/bitcoin/bitcoin/pull/7115#issuecomment-160829208,160829208,
sipa,2015-12-01T12:25:03Z,"@morcos was suggesting to reverse the dependency that existed from mempool\non policy estimator, because it is more natural, and I agree. I don't like\nthat this (temporarily, apparently) resulted in a circular dependency.\n\nYou're arguing that because it's possible to remove both dependencies, that\nis what should be done. @morcos complained that it means moving the\nresponsibility of knowing th",https://github.com/bitcoin/bitcoin/pull/7115#issuecomment-160953143,160953143,
jtimon,2015-12-01T12:31:07Z,"> You're arguing that because it's possible to remove both dependencies, that\n> is what should be done.\n\nNo I'm arguing that because it can't be done and we disagree, I don't like that we're deciding a priori in going towards morcos preferred direction when it is clearly not necessary at this point.\n\nAnd yes I disagree on making the estimator dependent on the mempool being a good design decis",https://github.com/bitcoin/bitcoin/pull/7115#issuecomment-160954597,160954597,
jtimon,2015-12-01T16:07:26Z,"Sorry for the confusion, although @morcos disagrees with removing the circular dependency, he wasn't nacking the first commit in concept, he was just nacking it because I left some code on qt/coincontroldialog.cpp by mistake.\nUpdated the PR with the first commit properly separated from the others. I have left some more commits to comment on before definitely discarding them or squashing the uncon",https://github.com/bitcoin/bitcoin/pull/7115#issuecomment-161014775,161014775,
morcos,2015-12-01T17:47:58Z,e2a9957 - Alex was here\n30ac1d3 - NACK\n2e32923 - NACK\n0dc47a0 - NACK\n\nBut if you would please consider 2b455fb then you could accomplish what you're trying to do with 30ac1d3 and 2e32923.\n,https://github.com/bitcoin/bitcoin/pull/7115#issuecomment-161045375,161045375,
TheBlueMatt,2015-12-02T01:56:51Z,"https://github.com/bitcoin/bitcoin/commit/e2a99575dff063471d033a0c18e1f8c0af0b53f9 - ACK\nWow, spending a lot of code to avoid just letting the mempool have a ""always limit to X"" field. Unless someone wants to write code to make it actually clean, just add one. Making CTxMemPool a ""dumb datastructure"" with absolutely 0 knowledge of anything is a really poor goal IMO anyway.\n",https://github.com/bitcoin/bitcoin/pull/7115#issuecomment-161154975,161154975,
jtimon,2015-12-02T03:40:02Z,"> Making CTxMemPool a ""dumb datastructure"" with absolutely 0 knowledge of anything is a really poor goal IMO anyway.\n\nAt the same time, unlike the max size of the mempool, nothing seems to be wrong about minReasonableRelayFee, lastRollingFeeUpdate, blockSinceLastRollingFeeBump and rollingMinimumFeeRate being created as attributes of CTxMemPool for some reason I'm still not able to understand.\n\",https://github.com/bitcoin/bitcoin/pull/7115#issuecomment-161171472,161171472,
dcousens,2015-12-02T03:44:18Z,utACK on https://github.com/bitcoin/bitcoin/commit/e2a99575dff063471d033a0c18e1f8c0af0b53f9\n\nUndecided about the others.\n,https://github.com/bitcoin/bitcoin/pull/7115#issuecomment-161171865,161171865,
