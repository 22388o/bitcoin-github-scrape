[
  {
    "sha": "e2a99575dff063471d033a0c18e1f8c0af0b53f9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMmE5OTU3NWRmZjA2MzQ3MWQwMzNhMGMxOGUxZjhjMGFmMGI1M2Y5",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-12-01T15:05:39Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-12-01T16:07:56Z"
      },
      "message": "Mempool: Decouple CBlockPolicyEstimator from CTxMemPool",
      "tree": {
        "sha": "b19fb17f5f7e4b2e2dc0a71213c51798a35af368",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b19fb17f5f7e4b2e2dc0a71213c51798a35af368"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e2a99575dff063471d033a0c18e1f8c0af0b53f9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2a99575dff063471d033a0c18e1f8c0af0b53f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e2a99575dff063471d033a0c18e1f8c0af0b53f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2a99575dff063471d033a0c18e1f8c0af0b53f9/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "16f4a6e0fe267e38d14f887e124ee9ca8894267a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16f4a6e0fe267e38d14f887e124ee9ca8894267a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/16f4a6e0fe267e38d14f887e124ee9ca8894267a"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 9,
      "deletions": 10
    },
    "files": [
      {
        "sha": "c4969f7d8cb2284dc9027ae55d9b979b8bfe5001",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2a99575dff063471d033a0c18e1f8c0af0b53f9/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2a99575dff063471d033a0c18e1f8c0af0b53f9/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=e2a99575dff063471d033a0c18e1f8c0af0b53f9",
        "patch": "@@ -505,7 +505,7 @@ CFeeRate CBlockPolicyEstimator::estimateFee(int confTarget)\n     return CFeeRate(median);\n }\n \n-CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool)\n+CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int* answerFoundAtTarget, const CAmount& minPoolFee)\n {\n     if (answerFoundAtTarget)\n         *answerFoundAtTarget = confTarget;\n@@ -522,7 +522,6 @@ CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoun\n         *answerFoundAtTarget = confTarget - 1;\n \n     // If mempool is limiting txs , return at least the min fee from the mempool\n-    CAmount minPoolFee = pool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n     if (minPoolFee > 0 && minPoolFee > median)\n         return CFeeRate(minPoolFee);\n \n@@ -541,7 +540,7 @@ double CBlockPolicyEstimator::estimatePriority(int confTarget)\n     return priStats.EstimateMedianVal(confTarget, SUFFICIENT_PRITXS, MIN_SUCCESS_PCT, true, nBestSeenHeight);\n }\n \n-double CBlockPolicyEstimator::estimateSmartPriority(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool)\n+double CBlockPolicyEstimator::estimateSmartPriority(int confTarget, int* answerFoundAtTarget, const CAmount& minPoolFee)\n {\n     if (answerFoundAtTarget)\n         *answerFoundAtTarget = confTarget;\n@@ -550,7 +549,6 @@ double CBlockPolicyEstimator::estimateSmartPriority(int confTarget, int *answerF\n         return -1;\n \n     // If mempool is limiting txs, no priority txs are allowed\n-    CAmount minPoolFee = pool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n     if (minPoolFee > 0)\n         return INF_PRIORITY;\n "
      },
      {
        "sha": "892b5c15348475e1e8f50128b897f7388268f57b",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2a99575dff063471d033a0c18e1f8c0af0b53f9/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2a99575dff063471d033a0c18e1f8c0af0b53f9/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=e2a99575dff063471d033a0c18e1f8c0af0b53f9",
        "patch": "@@ -247,7 +247,7 @@ class CBlockPolicyEstimator\n      *  confTarget blocks. If no answer can be given at confTarget, return an\n      *  estimate at the lowest target where one can be given.\n      */\n-    CFeeRate estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool);\n+    CFeeRate estimateSmartFee(int confTarget, int* answerFoundAtTarget, const CAmount& minPoolFee);\n \n     /** Return a priority estimate */\n     double estimatePriority(int confTarget);\n@@ -256,7 +256,7 @@ class CBlockPolicyEstimator\n      *  confTarget blocks. If no answer can be given at confTarget, return an\n      *  estimate at the lowest target where one can be given.\n      */\n-    double estimateSmartPriority(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool);\n+    double estimateSmartPriority(int confTarget, int* answerFoundAtTarget, const CAmount& minPoolFee);\n \n     /** Write estimation data to a file */\n     void Write(CAutoFile& fileout);"
      },
      {
        "sha": "eac852945beda18f366c3b72b90dedeedf7af461",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2a99575dff063471d033a0c18e1f8c0af0b53f9/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2a99575dff063471d033a0c18e1f8c0af0b53f9/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=e2a99575dff063471d033a0c18e1f8c0af0b53f9",
        "patch": "@@ -25,8 +25,6 @@ static const unsigned int MAX_STANDARD_TX_SIZE = 100000;\n static const unsigned int MAX_P2SH_SIGOPS = 15;\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n static const unsigned int MAX_STANDARD_TX_SIGOPS = MAX_BLOCK_SIGOPS/5;\n-/** Default for -maxmempool, maximum megabytes of mempool memory usage */\n-static const unsigned int DEFAULT_MAX_MEMPOOL_SIZE = 300;\n /**\n  * Standard script verification flags that standard transactions will comply\n  * with. However scripts violating these flags may still be present in valid"
      },
      {
        "sha": "5184de8467142eb3080852f0f65b15d482a9b6d6",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2a99575dff063471d033a0c18e1f8c0af0b53f9/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2a99575dff063471d033a0c18e1f8c0af0b53f9/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=e2a99575dff063471d033a0c18e1f8c0af0b53f9",
        "patch": "@@ -714,7 +714,7 @@ CFeeRate CTxMemPool::estimateFee(int nBlocks) const\n CFeeRate CTxMemPool::estimateSmartFee(int nBlocks, int *answerFoundAtBlocks) const\n {\n     LOCK(cs);\n-    return minerPolicyEstimator->estimateSmartFee(nBlocks, answerFoundAtBlocks, *this);\n+    return minerPolicyEstimator->estimateSmartFee(nBlocks, answerFoundAtBlocks, GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK());\n }\n double CTxMemPool::estimatePriority(int nBlocks) const\n {\n@@ -724,7 +724,7 @@ double CTxMemPool::estimatePriority(int nBlocks) const\n double CTxMemPool::estimateSmartPriority(int nBlocks, int *answerFoundAtBlocks) const\n {\n     LOCK(cs);\n-    return minerPolicyEstimator->estimateSmartPriority(nBlocks, answerFoundAtBlocks, *this);\n+    return minerPolicyEstimator->estimateSmartPriority(nBlocks, answerFoundAtBlocks, GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK());\n }\n \n bool"
      },
      {
        "sha": "e7ca6bc8736c84913e1249a2d6f5157cf4cdb819",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2a99575dff063471d033a0c18e1f8c0af0b53f9/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2a99575dff063471d033a0c18e1f8c0af0b53f9/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=e2a99575dff063471d033a0c18e1f8c0af0b53f9",
        "patch": "@@ -20,6 +20,9 @@\n \n class CAutoFile;\n \n+/** Default for -maxmempool, maximum megabytes of mempool memory usage */\n+static const unsigned int DEFAULT_MAX_MEMPOOL_SIZE = 300;\n+\n inline double AllowFreeThreshold()\n {\n     return COIN * 144 / 250;"
      }
    ]
  },
  {
    "sha": "30ac1d378c71fcf84999d119f341e8e46b4022bf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMGFjMWQzNzhjNzFmY2Y4NDk5OWQxMTlmMzQxZThlNDZiNDAyMmJm",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-12-01T15:49:07Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-12-01T16:08:17Z"
      },
      "message": "squash-or-nack: can CTxMemPool::GetMinFee use the global directly?",
      "tree": {
        "sha": "b35b73bb260d856817246a1df22fdf45447c2703",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b35b73bb260d856817246a1df22fdf45447c2703"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/30ac1d378c71fcf84999d119f341e8e46b4022bf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30ac1d378c71fcf84999d119f341e8e46b4022bf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/30ac1d378c71fcf84999d119f341e8e46b4022bf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30ac1d378c71fcf84999d119f341e8e46b4022bf/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e2a99575dff063471d033a0c18e1f8c0af0b53f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2a99575dff063471d033a0c18e1f8c0af0b53f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e2a99575dff063471d033a0c18e1f8c0af0b53f9"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 11,
      "deletions": 4
    },
    "files": [
      {
        "sha": "1edcd1a03131110e136e35120783ff214f362021",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30ac1d378c71fcf84999d119f341e8e46b4022bf/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30ac1d378c71fcf84999d119f341e8e46b4022bf/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=30ac1d378c71fcf84999d119f341e8e46b4022bf",
        "patch": "@@ -973,7 +973,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient fee\", false,\n                 strprintf(\"%d < %d\", nFees, txMinFee));\n \n-        CAmount mempoolRejectFee = pool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nSize);\n+        CAmount mempoolRejectFee = pool.GetMinFee().GetFee(nSize);\n         if (mempoolRejectFee > 0 && nFees < mempoolRejectFee) {\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool min fee not met\", false, strprintf(\"%d < %d\", nFees, mempoolRejectFee));\n         } else if (GetBoolArg(\"-relaypriority\", DEFAULT_RELAYPRIORITY) && nFees < ::minRelayTxFee.GetFee(nSize) && !AllowFree(entry.GetPriority(chainActive.Height() + 1))) {"
      },
      {
        "sha": "8dc55a53ca248b8a186010ce4e216463d0f9d3dc",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30ac1d378c71fcf84999d119f341e8e46b4022bf/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30ac1d378c71fcf84999d119f341e8e46b4022bf/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=30ac1d378c71fcf84999d119f341e8e46b4022bf",
        "patch": "@@ -782,7 +782,7 @@ UniValue mempoolInfoToJSON()\n     ret.push_back(Pair(\"usage\", (int64_t) mempool.DynamicMemoryUsage()));\n     size_t maxmempool = GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     ret.push_back(Pair(\"maxmempool\", (int64_t) maxmempool));\n-    ret.push_back(Pair(\"mempoolminfee\", ValueFromAmount(mempool.GetMinFee(maxmempool).GetFeePerK())));\n+    ret.push_back(Pair(\"mempoolminfee\", ValueFromAmount(mempool.GetMinFee().GetFeePerK())));\n \n     return ret;\n }"
      },
      {
        "sha": "e90da42fe7e498864f1b482037564a18fa56c1de",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30ac1d378c71fcf84999d119f341e8e46b4022bf/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30ac1d378c71fcf84999d119f341e8e46b4022bf/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=30ac1d378c71fcf84999d119f341e8e46b4022bf",
        "patch": "@@ -714,7 +714,7 @@ CFeeRate CTxMemPool::estimateFee(int nBlocks) const\n CFeeRate CTxMemPool::estimateSmartFee(int nBlocks, int *answerFoundAtBlocks) const\n {\n     LOCK(cs);\n-    return minerPolicyEstimator->estimateSmartFee(nBlocks, answerFoundAtBlocks, GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK());\n+    return minerPolicyEstimator->estimateSmartFee(nBlocks, answerFoundAtBlocks, GetMinFee().GetFeePerK());\n }\n double CTxMemPool::estimatePriority(int nBlocks) const\n {\n@@ -724,7 +724,7 @@ double CTxMemPool::estimatePriority(int nBlocks) const\n double CTxMemPool::estimateSmartPriority(int nBlocks, int *answerFoundAtBlocks) const\n {\n     LOCK(cs);\n-    return minerPolicyEstimator->estimateSmartPriority(nBlocks, answerFoundAtBlocks, GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK());\n+    return minerPolicyEstimator->estimateSmartPriority(nBlocks, answerFoundAtBlocks, GetMinFee().GetFeePerK());\n }\n \n bool\n@@ -916,6 +916,11 @@ CFeeRate CTxMemPool::GetMinFee(size_t sizelimit) const {\n     return std::max(CFeeRate(rollingMinimumFeeRate), minReasonableRelayFee);\n }\n \n+CFeeRate CTxMemPool::GetMinFee() const\n+{\n+    return GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+}\n+\n void CTxMemPool::trackPackageRemoved(const CFeeRate& rate) {\n     AssertLockHeld(cs);\n     if (rate.GetFeePerK() > rollingMinimumFeeRate) {"
      },
      {
        "sha": "b381f2d6a2681315411ecfecbec51ecc62107e89",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30ac1d378c71fcf84999d119f341e8e46b4022bf/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30ac1d378c71fcf84999d119f341e8e46b4022bf/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=30ac1d378c71fcf84999d119f341e8e46b4022bf",
        "patch": "@@ -443,6 +443,8 @@ class CTxMemPool\n       *  takes the fee rate to go back down all the way to 0. When the feerate\n       *  would otherwise be half of this, it is set to 0 instead.\n       */\n+    CFeeRate GetMinFee() const;\n+    /** Additional version with sizelimit as parameter, useful for testing. */\n     CFeeRate GetMinFee(size_t sizelimit) const;\n \n     /** Remove transactions from the mempool until its dynamic size is <= sizelimit. */"
      }
    ]
  },
  {
    "sha": "2e32923844b376fec07efda1db0b0c357887a6c9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZTMyOTIzODQ0YjM3NmZlYzA3ZWZkYTFkYjBiMGMzNTc4ODdhNmM5",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-12-01T00:02:02Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-12-01T16:12:31Z"
      },
      "message": "Mempool: Create nGlobalMempoolSizeLimit to Avoid GetArg(\"-maxmempool\") verbosity",
      "tree": {
        "sha": "78daed5484cf6d347e1a6af074a78ec612361de1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/78daed5484cf6d347e1a6af074a78ec612361de1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2e32923844b376fec07efda1db0b0c357887a6c9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e32923844b376fec07efda1db0b0c357887a6c9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2e32923844b376fec07efda1db0b0c357887a6c9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e32923844b376fec07efda1db0b0c357887a6c9/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "30ac1d378c71fcf84999d119f341e8e46b4022bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30ac1d378c71fcf84999d119f341e8e46b4022bf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/30ac1d378c71fcf84999d119f341e8e46b4022bf"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 15,
      "deletions": 12
    },
    "files": [
      {
        "sha": "ecbb42523c8f8c5f7f5d492898d2a6ba91843734",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e32923844b376fec07efda1db0b0c357887a6c9/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e32923844b376fec07efda1db0b0c357887a6c9/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2e32923844b376fec07efda1db0b0c357887a6c9",
        "patch": "@@ -881,9 +881,9 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     fCheckpointsEnabled = GetBoolArg(\"-checkpoints\", DEFAULT_CHECKPOINTS_ENABLED);\n \n     // mempool limits\n-    int64_t nMempoolSizeMax = GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n-    int64_t nMempoolSizeMin = GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000 * 40;\n-    if (nMempoolSizeMax < 0 || nMempoolSizeMax < nMempoolSizeMin)\n+    nGlobalMempoolSizeLimit = GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n+    uint64_t nMempoolSizeMin = GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000 * 40;\n+    if (nGlobalMempoolSizeLimit < nMempoolSizeMin)\n         return InitError(strprintf(_(\"-maxmempool must be at least %d MB\"), std::ceil(nMempoolSizeMin / 1000000.0)));\n \n     // -par=0 means autodetect, but nScriptCheckThreads==0 means no concurrency"
      },
      {
        "sha": "cddf1cc1268dd843bb3ba5f0e385d50b78f2cb50",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e32923844b376fec07efda1db0b0c357887a6c9/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e32923844b376fec07efda1db0b0c357887a6c9/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=2e32923844b376fec07efda1db0b0c357887a6c9",
        "patch": "@@ -75,6 +75,7 @@ size_t nCoinCacheUsage = 5000 * 300;\n uint64_t nPruneTarget = 0;\n bool fAlerts = DEFAULT_ALERTS;\n \n+size_t nGlobalMempoolSizeLimit = DEFAULT_MAX_MEMPOOL_SIZE * 1000000;\n /** Fees smaller than this (in satoshi) are considered zero fee (for relaying, mining and transaction creation) */\n CFeeRate minRelayTxFee = CFeeRate(DEFAULT_MIN_RELAY_TX_FEE);\n \n@@ -1214,7 +1215,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             if (expired != 0)\n                 LogPrint(\"mempool\", \"Expired %i transactions from the memory pool\\n\", expired);\n \n-            pool.TrimToSize(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+            pool.TrimToSize(nGlobalMempoolSizeLimit);\n             if (!pool.exists(tx.GetHash()))\n                 return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool full\");\n         }\n@@ -2513,6 +2514,7 @@ static void PruneBlockIndexCandidates() {\n  */\n static bool ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const CBlock* pblock)\n {\n+    CTxMemPool& pool = mempool; // TODO Globals: make parameter\n     AssertLockHeld(cs_main);\n     bool fInvalidFound = false;\n     const CBlockIndex *pindexOldTip = chainActive.Tip();\n@@ -2570,10 +2572,10 @@ static bool ActivateBestChainStep(CValidationState& state, const CChainParams& c\n     }\n \n     if (fBlocksDisconnected) {\n-        mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1, STANDARD_LOCKTIME_VERIFY_FLAGS);\n-        mempool.TrimToSize(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+        pool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1, STANDARD_LOCKTIME_VERIFY_FLAGS);\n+        pool.TrimToSize(nGlobalMempoolSizeLimit);\n     }\n-    mempool.check(pcoinsTip);\n+    pool.check(pcoinsTip);\n \n     // Callbacks/notifications for a new best chain.\n     if (fInvalidFound)\n@@ -2666,6 +2668,7 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n \n bool InvalidateBlock(CValidationState& state, const Consensus::Params& consensusParams, CBlockIndex *pindex)\n {\n+    CTxMemPool& pool = mempool; // TODO Globals: make parameter\n     AssertLockHeld(cs_main);\n \n     // Mark the block itself as invalid.\n@@ -2686,7 +2689,7 @@ bool InvalidateBlock(CValidationState& state, const Consensus::Params& consensus\n         }\n     }\n \n-    mempool.TrimToSize(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    pool.TrimToSize(nGlobalMempoolSizeLimit);\n \n     // The resulting new best tip may not be in setBlockIndexCandidates anymore, so\n     // add it again.\n@@ -2699,7 +2702,7 @@ bool InvalidateBlock(CValidationState& state, const Consensus::Params& consensus\n     }\n \n     InvalidChainFound(pindex);\n-    mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1, STANDARD_LOCKTIME_VERIFY_FLAGS);\n+    pool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1, STANDARD_LOCKTIME_VERIFY_FLAGS);\n     return true;\n }\n "
      },
      {
        "sha": "608f2b2cc135b0a982f513ee1e9cd9b10ed275d6",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e32923844b376fec07efda1db0b0c357887a6c9/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e32923844b376fec07efda1db0b0c357887a6c9/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=2e32923844b376fec07efda1db0b0c357887a6c9",
        "patch": "@@ -125,6 +125,7 @@ extern bool fRequireStandard;\n extern bool fCheckBlockIndex;\n extern bool fCheckpointsEnabled;\n extern size_t nCoinCacheUsage;\n+extern size_t nGlobalMempoolSizeLimit;\n extern CFeeRate minRelayTxFee;\n extern bool fAlerts;\n "
      },
      {
        "sha": "c44dfbcb7d6d51d40230a7b78ea66469ee4819a9",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e32923844b376fec07efda1db0b0c357887a6c9/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e32923844b376fec07efda1db0b0c357887a6c9/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=2e32923844b376fec07efda1db0b0c357887a6c9",
        "patch": "@@ -780,8 +780,7 @@ UniValue mempoolInfoToJSON()\n     ret.push_back(Pair(\"size\", (int64_t) mempool.size()));\n     ret.push_back(Pair(\"bytes\", (int64_t) mempool.GetTotalTxSize()));\n     ret.push_back(Pair(\"usage\", (int64_t) mempool.DynamicMemoryUsage()));\n-    size_t maxmempool = GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n-    ret.push_back(Pair(\"maxmempool\", (int64_t) maxmempool));\n+    ret.push_back(Pair(\"maxmempool\", (int64_t) nGlobalMempoolSizeLimit));\n     ret.push_back(Pair(\"mempoolminfee\", ValueFromAmount(mempool.GetMinFee().GetFeePerK())));\n \n     return ret;"
      },
      {
        "sha": "410a893030de5797fc8cd0ea6ab0d158aa01783d",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e32923844b376fec07efda1db0b0c357887a6c9/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e32923844b376fec07efda1db0b0c357887a6c9/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=2e32923844b376fec07efda1db0b0c357887a6c9",
        "patch": "@@ -918,7 +918,7 @@ CFeeRate CTxMemPool::GetMinFee(size_t sizelimit) const {\n \n CFeeRate CTxMemPool::GetMinFee() const\n {\n-    return GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    return GetMinFee(nGlobalMempoolSizeLimit);\n }\n \n void CTxMemPool::trackPackageRemoved(const CFeeRate& rate) {"
      }
    ]
  },
  {
    "sha": "0dc47a0fcfed0372fe137fb2c010c62ea345a725",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZGM0N2EwZmNmZWQwMzcyZmUxMzdmYjJjMDEwYzYyZWEzNDVhNzI1",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-12-01T16:00:09Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-12-01T16:13:00Z"
      },
      "message": "squash-or-nack: can CTxMemPool::TrimToSize use the global directly?",
      "tree": {
        "sha": "65a8044f8ea7d9ec2abec4c5fb9524e3bdb7bf42",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/65a8044f8ea7d9ec2abec4c5fb9524e3bdb7bf42"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0dc47a0fcfed0372fe137fb2c010c62ea345a725",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0dc47a0fcfed0372fe137fb2c010c62ea345a725",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0dc47a0fcfed0372fe137fb2c010c62ea345a725",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0dc47a0fcfed0372fe137fb2c010c62ea345a725/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2e32923844b376fec07efda1db0b0c357887a6c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e32923844b376fec07efda1db0b0c357887a6c9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2e32923844b376fec07efda1db0b0c357887a6c9"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 11,
      "deletions": 4
    },
    "files": [
      {
        "sha": "b1152c14813c60702baf855c5d9382648195ea3e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0dc47a0fcfed0372fe137fb2c010c62ea345a725/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0dc47a0fcfed0372fe137fb2c010c62ea345a725/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=0dc47a0fcfed0372fe137fb2c010c62ea345a725",
        "patch": "@@ -1215,7 +1215,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             if (expired != 0)\n                 LogPrint(\"mempool\", \"Expired %i transactions from the memory pool\\n\", expired);\n \n-            pool.TrimToSize(nGlobalMempoolSizeLimit);\n+            pool.TrimToSize();\n             if (!pool.exists(tx.GetHash()))\n                 return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool full\");\n         }\n@@ -2573,7 +2573,7 @@ static bool ActivateBestChainStep(CValidationState& state, const CChainParams& c\n \n     if (fBlocksDisconnected) {\n         pool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1, STANDARD_LOCKTIME_VERIFY_FLAGS);\n-        pool.TrimToSize(nGlobalMempoolSizeLimit);\n+        pool.TrimToSize();\n     }\n     pool.check(pcoinsTip);\n \n@@ -2689,7 +2689,7 @@ bool InvalidateBlock(CValidationState& state, const Consensus::Params& consensus\n         }\n     }\n \n-    pool.TrimToSize(nGlobalMempoolSizeLimit);\n+    pool.TrimToSize();\n \n     // The resulting new best tip may not be in setBlockIndexCandidates anymore, so\n     // add it again."
      },
      {
        "sha": "776847f2f84c5e614d7ad3afa6179c5aba0c98d9",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0dc47a0fcfed0372fe137fb2c010c62ea345a725/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0dc47a0fcfed0372fe137fb2c010c62ea345a725/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=0dc47a0fcfed0372fe137fb2c010c62ea345a725",
        "patch": "@@ -955,3 +955,8 @@ void CTxMemPool::TrimToSize(size_t sizelimit) {\n     if (maxFeeRateRemoved > CFeeRate(0))\n         LogPrint(\"mempool\", \"Removed %u txn, rolling minimum fee bumped to %s\\n\", nTxnRemoved, maxFeeRateRemoved.ToString());\n }\n+\n+void CTxMemPool::TrimToSize()\n+{\n+    TrimToSize(nGlobalMempoolSizeLimit);\n+}"
      },
      {
        "sha": "92470623e799f956ce714524cfc7d8a80addd2a4",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0dc47a0fcfed0372fe137fb2c010c62ea345a725/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0dc47a0fcfed0372fe137fb2c010c62ea345a725/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=0dc47a0fcfed0372fe137fb2c010c62ea345a725",
        "patch": "@@ -447,7 +447,9 @@ class CTxMemPool\n     /** Additional version with sizelimit as parameter, useful for testing. */\n     CFeeRate GetMinFee(size_t sizelimit) const;\n \n-    /** Remove transactions from the mempool until its dynamic size is <= sizelimit. */\n+    /** Remove transactions from the mempool until its dynamic size is <= nGlobalMempoolSizeLimit. */\n+    void TrimToSize();\n+    /** Additional version with sizelimit as parameter, useful for testing. */\n     void TrimToSize(size_t sizelimit);\n \n     /** Expire all transaction (and their dependencies) in the mempool older than time. Return the number of removed transactions. */"
      }
    ]
  }
]