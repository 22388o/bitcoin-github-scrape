jonasschnelli,2016-12-16T17:06:49Z,"Alternative solutions would be:\n* Always reserve the change output key when calling `fundrawtransaction`\n* Add an option to the RPC call to reserve the change output key (probably true by default)\n* Add a new RPC call `reserveaddress` or `reservechangeaddressfromtransaction` (or similar).",https://github.com/bitcoin/bitcoin/pull/9370#issuecomment-267643066,267643066,
gmaxwell,2016-12-16T18:44:33Z,"So we should make a separate PR that removes any key from the keypool that shows up in a transaction. That is a generally good thing to do-- and its important for HD key rescan (in fact, It should remove all keys up to the key it found).\n\nBut I don't believe that it is a correct solution here. We should reserve the key on use, having an argument (default to true) to do so would be okay but I'm",https://github.com/bitcoin/bitcoin/pull/9370#issuecomment-267666335,267666335,
jonasschnelli,2016-12-18T12:17:14Z,"> But I don't believe that it is a correct solution here. We should reserve the key on use, having an argument (default to true) to do so would be okay but I'm not sure if it would be very useful. Otherwise this is going to cause continual reuse with in flight transactions.\n\nThe reason why I think the key-reserve could be optional are..\n* the original design was that one *can* call `fundrawt",https://github.com/bitcoin/bitcoin/pull/9370#issuecomment-267818020,267818020,
laanwj,2016-12-19T07:36:56Z,"I agree `fundrawtransaction` should reserve the key. However we don't have a method to give back reserved keys. Is that a problem? We don't have a way to ""commit"" a transaction except for ""sendrawtransaction"", which also sends it. \n\nAt least it should be documented very well. Otherwise people may be running `fundrawtransaction` in a loop with slightly different parameters, throwing away the tr",https://github.com/bitcoin/bitcoin/pull/9370#issuecomment-267900092,267900092,
jonasschnelli,2016-12-19T07:47:36Z,"> [...] It's also logic that is necessary for automatically rolling forward HD wallets created with an old seed.\n\nThe problem here is, that we should extend the keypool (top-up the pool) whenever the gap limit was not exceeded. Lets say, if the key no. 95 of a keypool with 100 keys was used, we should extend the keypool with another ~100 keys.\nBut doing this in the `SyncTransaction()` logic ",https://github.com/bitcoin/bitcoin/pull/9370#issuecomment-267901580,267901580,
gmaxwell,2016-12-20T04:58:04Z,"> But doing this in the SyncTransaction() logic would probably be really bad (also assume wallet is encrypted).\n\nWhy would it be bad?  generating 100 keys should take <13 milliseconds.",https://github.com/bitcoin/bitcoin/pull/9370#issuecomment-268155109,268155109,
jonasschnelli,2016-12-20T06:18:36Z,But how would this work with encrypted wallets?,https://github.com/bitcoin/bitcoin/pull/9370#issuecomment-268164716,268164716,
gmaxwell,2016-12-23T18:15:31Z,"@jonasschnelli If the wallet is not unlocked-- you can't. But just because something good can't be done all the time that doesn't mean we shouldn't do it when we can, unless there is some downsie.  Failing to do it doesn't make anything actually work better and it means that even unlock+rescan won't just work when otherwise it would.\n\nIf key number 95 is used we should mark it and all keys bef",https://github.com/bitcoin/bitcoin/pull/9370#issuecomment-269027076,269027076,
sipa,2016-12-23T22:02:59Z,"I really don't like the unreliable behaviour that would follow from this. People may test their software with unencrypted wallet, and then in production a recovery is attempted and keys are missed - forcing the operator to do a full rescan (or if they were pruning, a full resync).\n\nI think I prefer just increasing the keypool size. If that's enough to make this a non-issue, we don't need to in",https://github.com/bitcoin/bitcoin/pull/9370#issuecomment-269050343,269050343,
luke-jr,2016-12-24T04:12:22Z,"IMO the TXOs and reserve-key should be locked at the same time in the same manner; is there a use case for doing them inconsistently? Either `fundrawtransaction` should lock both, or neither (and `sendrawtransaction` required to commit to the result). A flag to choose which behaviour sounds reasonable to me.",https://github.com/bitcoin/bitcoin/pull/9370#issuecomment-269068109,269068109,
jtimon,2017-01-13T00:41:50Z,"I may be missing something, but after reviewing #9377, specially the comment in https://github.com/bitcoin/bitcoin/pull/9377/files#diff-ef76fd6674f07db88c3422fdbf0bcf9fR103 and also reading this whole thread, specially in the op ""The only possible solution for now is to call getrawchangeaddress and pass the change address to the fundrawtransaction options.""...it definitely feels like I'm missing s",https://github.com/bitcoin/bitcoin/pull/9370#issuecomment-272328980,272328980,
jonasschnelli,2017-01-26T19:27:04Z,Closing in favour of merged https://github.com/bitcoin/bitcoin/pull/9377,https://github.com/bitcoin/bitcoin/pull/9370#issuecomment-275486806,275486806,
