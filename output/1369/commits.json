[
  {
    "sha": "7d80d2e3d7ecceb5a99fef357b118949f6dd8a79",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZDgwZDJlM2Q3ZWNjZWI1YTk5ZmVmMzU3YjExODk0OWY2ZGQ4YTc5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-05-21T14:47:29Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-05-21T16:43:22Z"
      },
      "message": "Reorder AppInit2\n\nThis reorders AppInit2 into 10 sections:\n1)  basic setup (OS stuff, signal handlers)\n2)  parameter interactions (softset)\n3)  interpreting options without side effects (just setting internal variables)\n4)  application initialization (datadir lock, daemonize, pidfile, log file)\n5)  network initialization (network params, proxy, binding)\n6)  load blockchain\n7)  load wallet\n8)  import blocks (-loadblock=)\n9)  load peers\n10) start node/rpc threads\n11) finished\n\nThis means invalid configurations will be detected as soon as possible\n(in particular, before loading the block chain).",
      "tree": {
        "sha": "dba16365618a86b323e65597e51824b1b8dc8619",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dba16365618a86b323e65597e51824b1b8dc8619"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7d80d2e3d7ecceb5a99fef357b118949f6dd8a79",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d80d2e3d7ecceb5a99fef357b118949f6dd8a79",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7d80d2e3d7ecceb5a99fef357b118949f6dd8a79",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d80d2e3d7ecceb5a99fef357b118949f6dd8a79/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "46784d0826df00d218d25a1e3df419bef36d70ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46784d0826df00d218d25a1e3df419bef36d70ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46784d0826df00d218d25a1e3df419bef36d70ce"
      }
    ],
    "stats": {
      "total": 398,
      "additions": 204,
      "deletions": 194
    },
    "files": [
      {
        "sha": "69f780f4dc5fc9ba2ccd57102e9d75003cb9d2dd",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 204,
        "deletions": 194,
        "changes": 398,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d80d2e3d7ecceb5a99fef357b118949f6dd8a79/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d80d2e3d7ecceb5a99fef357b118949f6dd8a79/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=7d80d2e3d7ecceb5a99fef357b118949f6dd8a79",
        "patch": "@@ -271,6 +271,7 @@ std::string HelpMessage()\n  */\n bool AppInit2()\n {\n+    // ********************************************************* Step 1: setup\n #ifdef _MSC_VER\n     // Turn off microsoft heap dump noise\n     _CrtSetReportMode(_CRT_WARN, _CRTDBG_MODE_FILE);\n@@ -294,12 +295,35 @@ bool AppInit2()\n     sigaction(SIGHUP, &sa, NULL);\n #endif\n \n+    // ********************************************************* Step 2: parameter interactions\n+\n     fTestNet = GetBoolArg(\"-testnet\");\n     if (fTestNet)\n     {\n         SoftSetBoolArg(\"-irc\", true);\n     }\n \n+    if (mapArgs.count(\"-connect\"))\n+        SoftSetBoolArg(\"-dnsseed\", false);\n+\n+    // even in Tor mode, if -bind is specified, you really want -listen\n+    if (mapArgs.count(\"-bind\"))\n+        SoftSetBoolArg(\"-listen\", true);\n+\n+    bool fTor = (fUseProxy && addrProxy.GetPort() == 9050);\n+    if (fTor)\n+    {\n+        // Use SoftSetBoolArg here so user can override any of these if they wish.\n+        // Note: the GetBoolArg() calls for all of these must happen later.\n+        SoftSetBoolArg(\"-listen\", false);\n+        SoftSetBoolArg(\"-irc\", false);\n+        SoftSetBoolArg(\"-proxydns\", true);\n+        SoftSetBoolArg(\"-upnp\", false);\n+        SoftSetBoolArg(\"-discover\", false);\n+    }\n+\n+    // ********************************************************* Step 3: parameter-to-internal-flags\n+\n     fDebug = GetBoolArg(\"-debug\");\n     fDetachDB = GetBoolArg(\"-detachdb\", false);\n \n@@ -322,6 +346,38 @@ bool AppInit2()\n     fPrintToDebugger = GetBoolArg(\"-printtodebugger\");\n     fLogTimestamps = GetBoolArg(\"-logtimestamps\");\n \n+    if (mapArgs.count(\"-timeout\"))\n+    {\n+        int nNewTimeout = GetArg(\"-timeout\", 5000);\n+        if (nNewTimeout > 0 && nNewTimeout < 600000)\n+            nConnectTimeout = nNewTimeout;\n+    }\n+\n+    // Continue to put \"/P2SH/\" in the coinbase to monitor\n+    // BIP16 support.\n+    // This can be removed eventually...\n+    const char* pszP2SH = \"/P2SH/\";\n+    COINBASE_FLAGS << std::vector<unsigned char>(pszP2SH, pszP2SH+strlen(pszP2SH));\n+\n+\n+    if (mapArgs.count(\"-paytxfee\"))\n+    {\n+        if (!ParseMoney(mapArgs[\"-paytxfee\"], nTransactionFee))\n+            return InitError(strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s'\"), mapArgs[\"-paytxfee\"].c_str()));\n+        if (nTransactionFee > 0.25 * COIN)\n+            InitWarning(_(\"Warning: -paytxfee is set very high. This is the transaction fee you will pay if you send a transaction.\"));\n+    }\n+\n+    // ********************************************************* Step 4: application initialization: dir lock, daemonize, pidfile, debug log\n+\n+    // Make sure only a single Bitcoin process is using the data directory.\n+    boost::filesystem::path pathLockFile = GetDataDir() / \".lock\";\n+    FILE* file = fopen(pathLockFile.string().c_str(), \"a\"); // empty lock file; created if it doesn't exist.\n+    if (file) fclose(file);\n+    static boost::interprocess::file_lock lock(pathLockFile.string().c_str());\n+    if (!lock.try_lock())\n+        return InitError(strprintf(_(\"Cannot obtain a lock on data directory %s.  Bitcoin is probably already running.\"), GetDataDir().string().c_str()));\n+\n #if !defined(WIN32) && !defined(QT_GUI)\n     if (fDaemon)\n     {\n@@ -349,43 +405,104 @@ bool AppInit2()\n     printf(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\");\n     printf(\"Bitcoin version %s (%s)\\n\", FormatFullVersion().c_str(), CLIENT_DATE.c_str());\n     printf(\"Default data directory %s\\n\", GetDefaultDataDir().string().c_str());\n+    std::ostringstream strErrors;\n \n-    if (GetBoolArg(\"-loadblockindextest\"))\n+    if (fDaemon)\n+        fprintf(stdout, \"Bitcoin server starting\\n\");\n+\n+    int64 nStart;\n+\n+    // ********************************************************* Step 5: network initialization\n+\n+    if (mapArgs.count(\"-proxy\"))\n     {\n-        CTxDB txdb(\"r\");\n-        txdb.LoadBlockIndex();\n-        PrintBlockTree();\n-        return false;\n+        fUseProxy = true;\n+        addrProxy = CService(mapArgs[\"-proxy\"], 9050);\n+        if (!addrProxy.IsValid())\n+            return InitError(strprintf(_(\"Invalid -proxy address: '%s'\"), mapArgs[\"-proxy\"].c_str()));\n     }\n \n-    // Make sure only a single Bitcoin process is using the data directory.\n-    boost::filesystem::path pathLockFile = GetDataDir() / \".lock\";\n-    FILE* file = fopen(pathLockFile.string().c_str(), \"a\"); // empty lock file; created if it doesn't exist.\n-    if (file) fclose(file);\n-    static boost::interprocess::file_lock lock(pathLockFile.string().c_str());\n-    if (!lock.try_lock())\n-        return InitError(strprintf(_(\"Cannot obtain a lock on data directory %s.  Bitcoin is probably already running.\"), GetDataDir().string().c_str()));\n+    if (mapArgs.count(\"-noproxy\"))\n+    {\n+        BOOST_FOREACH(std::string snet, mapMultiArgs[\"-noproxy\"]) {\n+            enum Network net = ParseNetwork(snet);\n+            if (net == NET_UNROUTABLE)\n+                return InitError(strprintf(_(\"Unknown network specified in -noproxy: '%s'\"), snet.c_str()));\n+            SetNoProxy(net);\n+        }\n+    }\n \n-    std::ostringstream strErrors;\n-    //\n-    // Load data files\n-    //\n-    if (fDaemon)\n-        fprintf(stdout, \"Bitcoin server starting\\n\");\n-    int64 nStart;\n+    fNameLookup = GetBoolArg(\"-dns\");\n+    fProxyNameLookup = GetBoolArg(\"-proxydns\");\n+    if (fProxyNameLookup)\n+        fNameLookup = true;\n+    fNoListen = !GetBoolArg(\"-listen\", true);\n+    nSocksVersion = GetArg(\"-socks\", 5);\n+    if (nSocksVersion != 4 && nSocksVersion != 5)\n+        return InitError(strprintf(_(\"Unknown -socks proxy version requested: %i\"), nSocksVersion));\n \n-    uiInterface.InitMessage(_(\"Loading addresses...\"));\n-    printf(\"Loading addresses...\\n\");\n-    nStart = GetTimeMillis();\n+    if (mapArgs.count(\"-onlynet\")) {\n+        std::set<enum Network> nets;\n+        BOOST_FOREACH(std::string snet, mapMultiArgs[\"-onlynet\"]) {\n+            enum Network net = ParseNetwork(snet);\n+            if (net == NET_UNROUTABLE)\n+                return InitError(strprintf(_(\"Unknown network specified in -onlynet: '%s'\"), snet.c_str()));\n+            nets.insert(net);\n+        }\n+        for (int n = 0; n < NET_MAX; n++) {\n+            enum Network net = (enum Network)n;\n+            if (!nets.count(net))\n+                SetLimited(net);\n+        }\n+    }\n+\n+    BOOST_FOREACH(string strDest, mapMultiArgs[\"-seednode\"])\n+        AddOneShot(strDest);\n \n+    bool fBound = false;\n+    if (!fNoListen)\n     {\n-        CAddrDB adb;\n-        if (!adb.Read(addrman))\n-            printf(\"Invalid or missing peers.dat; recreating\\n\");\n+        std::string strError;\n+        if (mapArgs.count(\"-bind\")) {\n+            BOOST_FOREACH(std::string strBind, mapMultiArgs[\"-bind\"]) {\n+                CService addrBind;\n+                if (!Lookup(strBind.c_str(), addrBind, GetListenPort(), false))\n+                    return InitError(strprintf(_(\"Cannot resolve -bind address: '%s'\"), strBind.c_str()));\n+                fBound |= Bind(addrBind);\n+            }\n+        } else {\n+            struct in_addr inaddr_any;\n+            inaddr_any.s_addr = INADDR_ANY;\n+            if (!IsLimited(NET_IPV4))\n+                fBound |= Bind(CService(inaddr_any, GetListenPort()));\n+#ifdef USE_IPV6\n+            if (!IsLimited(NET_IPV6))\n+                fBound |= Bind(CService(in6addr_any, GetListenPort()));\n+#endif\n+        }\n+        if (!fBound)\n+            return InitError(_(\"Not listening on any port\"));\n     }\n \n-    printf(\"Loaded %i addresses from peers.dat  %\"PRI64d\"ms\\n\",\n-           addrman.size(), GetTimeMillis() - nStart);\n+    if (mapArgs.count(\"-externalip\"))\n+    {\n+        BOOST_FOREACH(string strAddr, mapMultiArgs[\"-externalip\"]) {\n+            CService addrLocal(strAddr, GetListenPort(), fNameLookup);\n+            if (!addrLocal.IsValid())\n+                return InitError(strprintf(_(\"Cannot resolve -externalip address: '%s'\"), strAddr.c_str()));\n+            AddLocal(CService(strAddr, GetListenPort(), fNameLookup), LOCAL_MANUAL);\n+        }\n+    }\n+\n+    // ********************************************************* Step 6: load blockchain\n+\n+    if (GetBoolArg(\"-loadblockindextest\"))\n+    {\n+        CTxDB txdb(\"r\");\n+        txdb.LoadBlockIndex();\n+        PrintBlockTree();\n+        return false;\n+    }\n \n     uiInterface.InitMessage(_(\"Loading block index...\"));\n     printf(\"Loading block index...\\n\");\n@@ -403,16 +520,37 @@ bool AppInit2()\n     }\n     printf(\" block index %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n \n-    if (mapArgs.count(\"-loadblock\"))\n+    if (GetBoolArg(\"-printblockindex\") || GetBoolArg(\"-printblocktree\"))\n     {\n-        BOOST_FOREACH(string strFile, mapMultiArgs[\"-loadblock\"])\n+        PrintBlockTree();\n+        return false;\n+    }\n+\n+    if (mapArgs.count(\"-printblock\"))\n+    {\n+        string strMatch = mapArgs[\"-printblock\"];\n+        int nFound = 0;\n+        for (map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.begin(); mi != mapBlockIndex.end(); ++mi)\n         {\n-            FILE *file = fopen(strFile.c_str(), \"rb\");\n-            if (file)\n-                LoadExternalBlockFile(file);\n+            uint256 hash = (*mi).first;\n+            if (strncmp(hash.ToString().c_str(), strMatch.c_str(), strMatch.size()) == 0)\n+            {\n+                CBlockIndex* pindex = (*mi).second;\n+                CBlock block;\n+                block.ReadFromDisk(pindex);\n+                block.BuildMerkleTree();\n+                block.print();\n+                printf(\"\\n\");\n+                nFound++;\n+            }\n         }\n+        if (nFound == 0)\n+            printf(\"No blocks matching %s were found\\n\", strMatch.c_str());\n+        return false;\n     }\n \n+    // ********************************************************* Step 7: load wallet\n+\n     uiInterface.InitMessage(_(\"Loading wallet...\"));\n     printf(\"Loading wallet...\\n\");\n     nStart = GetTimeMillis();\n@@ -488,192 +626,64 @@ bool AppInit2()\n         printf(\" rescan      %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n     }\n \n-    uiInterface.InitMessage(_(\"Done loading\"));\n-    printf(\"Done loading\\n\");\n-\n-    //// debug print\n-    printf(\"mapBlockIndex.size() = %d\\n\",   mapBlockIndex.size());\n-    printf(\"nBestHeight = %d\\n\",            nBestHeight);\n-    printf(\"setKeyPool.size() = %d\\n\",      pwalletMain->setKeyPool.size());\n-    printf(\"mapWallet.size() = %d\\n\",       pwalletMain->mapWallet.size());\n-    printf(\"mapAddressBook.size() = %d\\n\",  pwalletMain->mapAddressBook.size());\n-\n-    if (!strErrors.str().empty())\n-        return InitError(strErrors.str());\n-\n-    // Add wallet transactions that aren't already in a block to mapTransactions\n-    pwalletMain->ReacceptWalletTransactions();\n-\n-    // Note: Bitcoin-Qt stores several settings in the wallet, so we want\n-    // to load the wallet BEFORE parsing command-line arguments, so\n-    // the command-line/bitcoin.conf settings override GUI setting.\n+    // ********************************************************* Step 8: import blocks\n \n-    //\n-    // Parameters\n-    //\n-    if (GetBoolArg(\"-printblockindex\") || GetBoolArg(\"-printblocktree\"))\n-    {\n-        PrintBlockTree();\n-        return false;\n-    }\n-\n-    if (mapArgs.count(\"-timeout\"))\n-    {\n-        int nNewTimeout = GetArg(\"-timeout\", 5000);\n-        if (nNewTimeout > 0 && nNewTimeout < 600000)\n-            nConnectTimeout = nNewTimeout;\n-    }\n-\n-    if (mapArgs.count(\"-printblock\"))\n+    if (mapArgs.count(\"-loadblock\"))\n     {\n-        string strMatch = mapArgs[\"-printblock\"];\n-        int nFound = 0;\n-        for (map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.begin(); mi != mapBlockIndex.end(); ++mi)\n+        BOOST_FOREACH(string strFile, mapMultiArgs[\"-loadblock\"])\n         {\n-            uint256 hash = (*mi).first;\n-            if (strncmp(hash.ToString().c_str(), strMatch.c_str(), strMatch.size()) == 0)\n-            {\n-                CBlockIndex* pindex = (*mi).second;\n-                CBlock block;\n-                block.ReadFromDisk(pindex);\n-                block.BuildMerkleTree();\n-                block.print();\n-                printf(\"\\n\");\n-                nFound++;\n-            }\n-        }\n-        if (nFound == 0)\n-            printf(\"No blocks matching %s were found\\n\", strMatch.c_str());\n-        return false;\n-    }\n-\n-    if (mapArgs.count(\"-proxy\"))\n-    {\n-        fUseProxy = true;\n-        addrProxy = CService(mapArgs[\"-proxy\"], 9050);\n-        if (!addrProxy.IsValid())\n-            return InitError(strprintf(_(\"Invalid -proxy address: '%s'\"), mapArgs[\"-proxy\"].c_str()));\n-    }\n-\n-    if (mapArgs.count(\"-noproxy\"))\n-    {\n-        BOOST_FOREACH(std::string snet, mapMultiArgs[\"-noproxy\"]) {\n-            enum Network net = ParseNetwork(snet);\n-            if (net == NET_UNROUTABLE)\n-                return InitError(strprintf(_(\"Unknown network specified in -noproxy: '%s'\"), snet.c_str()));\n-            SetNoProxy(net);\n-        }\n-    }\n-\n-    if (mapArgs.count(\"-connect\"))\n-        SoftSetBoolArg(\"-dnsseed\", false);\n-\n-    // even in Tor mode, if -bind is specified, you really want -listen\n-    if (mapArgs.count(\"-bind\"))\n-        SoftSetBoolArg(\"-listen\", true);\n-\n-    bool fTor = (fUseProxy && addrProxy.GetPort() == 9050);\n-    if (fTor)\n-    {\n-        // Use SoftSetBoolArg here so user can override any of these if they wish.\n-        // Note: the GetBoolArg() calls for all of these must happen later.\n-        SoftSetBoolArg(\"-listen\", false);\n-        SoftSetBoolArg(\"-irc\", false);\n-        SoftSetBoolArg(\"-proxydns\", true);\n-        SoftSetBoolArg(\"-upnp\", false);\n-        SoftSetBoolArg(\"-discover\", false);\n-    }\n-\n-    if (mapArgs.count(\"-onlynet\")) {\n-        std::set<enum Network> nets;\n-        BOOST_FOREACH(std::string snet, mapMultiArgs[\"-onlynet\"]) {\n-            enum Network net = ParseNetwork(snet);\n-            if (net == NET_UNROUTABLE)\n-                return InitError(strprintf(_(\"Unknown network specified in -onlynet: '%s'\"), snet.c_str()));\n-            nets.insert(net);\n-        }\n-        for (int n = 0; n < NET_MAX; n++) {\n-            enum Network net = (enum Network)n;\n-            if (!nets.count(net))\n-                SetLimited(net);\n+            FILE *file = fopen(strFile.c_str(), \"rb\");\n+            if (file)\n+                LoadExternalBlockFile(file);\n         }\n     }\n \n-    fNameLookup = GetBoolArg(\"-dns\");\n-    fProxyNameLookup = GetBoolArg(\"-proxydns\");\n-    if (fProxyNameLookup)\n-        fNameLookup = true;\n-    fNoListen = !GetBoolArg(\"-listen\", true);\n-    nSocksVersion = GetArg(\"-socks\", 5);\n-    if (nSocksVersion != 4 && nSocksVersion != 5)\n-        return InitError(strprintf(_(\"Unknown -socks proxy version requested: %i\"), nSocksVersion));\n+    // ********************************************************* Step 9: load peers\n \n-    BOOST_FOREACH(string strDest, mapMultiArgs[\"-seednode\"])\n-        AddOneShot(strDest);\n-\n-    // Continue to put \"/P2SH/\" in the coinbase to monitor\n-    // BIP16 support.\n-    // This can be removed eventually...\n-    const char* pszP2SH = \"/P2SH/\";\n-    COINBASE_FLAGS << std::vector<unsigned char>(pszP2SH, pszP2SH+strlen(pszP2SH));\n+    uiInterface.InitMessage(_(\"Loading addresses...\"));\n+    printf(\"Loading addresses...\\n\");\n+    nStart = GetTimeMillis();\n \n-    bool fBound = false;\n-    if (!fNoListen)\n     {\n-        std::string strError;\n-        if (mapArgs.count(\"-bind\")) {\n-            BOOST_FOREACH(std::string strBind, mapMultiArgs[\"-bind\"]) {\n-                CService addrBind;\n-                if (!Lookup(strBind.c_str(), addrBind, GetListenPort(), false))\n-                    return InitError(strprintf(_(\"Cannot resolve -bind address: '%s'\"), strBind.c_str()));\n-                fBound |= Bind(addrBind);\n-            }\n-        } else {\n-            struct in_addr inaddr_any;\n-            inaddr_any.s_addr = INADDR_ANY;\n-            if (!IsLimited(NET_IPV4))\n-                fBound |= Bind(CService(inaddr_any, GetListenPort()));\n-#ifdef USE_IPV6\n-            if (!IsLimited(NET_IPV6))\n-                fBound |= Bind(CService(in6addr_any, GetListenPort()));\n-#endif\n-        }\n-        if (!fBound)\n-            return InitError(_(\"Not listening on any port\"));\n+        CAddrDB adb;\n+        if (!adb.Read(addrman))\n+            printf(\"Invalid or missing peers.dat; recreating\\n\");\n     }\n \n-    if (mapArgs.count(\"-externalip\"))\n-    {\n-        BOOST_FOREACH(string strAddr, mapMultiArgs[\"-externalip\"]) {\n-            CService addrLocal(strAddr, GetListenPort(), fNameLookup);\n-            if (!addrLocal.IsValid())\n-                return InitError(strprintf(_(\"Cannot resolve -externalip address: '%s'\"), strAddr.c_str()));\n-            AddLocal(CService(strAddr, GetListenPort(), fNameLookup), LOCAL_MANUAL);\n-        }\n-    }\n+    printf(\"Loaded %i addresses from peers.dat  %\"PRI64d\"ms\\n\",\n+           addrman.size(), GetTimeMillis() - nStart);\n \n-    if (mapArgs.count(\"-paytxfee\"))\n-    {\n-        if (!ParseMoney(mapArgs[\"-paytxfee\"], nTransactionFee))\n-            return InitError(strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s'\"), mapArgs[\"-paytxfee\"].c_str()));\n-        if (nTransactionFee > 0.25 * COIN)\n-            InitWarning(_(\"Warning: -paytxfee is set very high. This is the transaction fee you will pay if you send a transaction.\"));\n-    }\n+    // ********************************************************* Step 10: start node\n \n-    //\n-    // Start the node\n-    //\n     if (!CheckDiskSpace())\n         return false;\n \n     RandAddSeedPerfmon();\n \n+    //// debug print\n+    printf(\"mapBlockIndex.size() = %d\\n\",   mapBlockIndex.size());\n+    printf(\"nBestHeight = %d\\n\",            nBestHeight);\n+    printf(\"setKeyPool.size() = %d\\n\",      pwalletMain->setKeyPool.size());\n+    printf(\"mapWallet.size() = %d\\n\",       pwalletMain->mapWallet.size());\n+    printf(\"mapAddressBook.size() = %d\\n\",  pwalletMain->mapAddressBook.size());\n+\n     if (!CreateThread(StartNode, NULL))\n         InitError(_(\"Error: could not start node\"));\n \n     if (fServer)\n         CreateThread(ThreadRPCServer, NULL);\n \n+    // ********************************************************* Step 11: finished\n+\n+    uiInterface.InitMessage(_(\"Done loading\"));\n+    printf(\"Done loading\\n\");\n+\n+    if (!strErrors.str().empty())\n+        return InitError(strErrors.str());\n+\n+     // Add wallet transactions that aren't already in a block to mapTransactions\n+    pwalletMain->ReacceptWalletTransactions();\n+\n #if !defined(QT_GUI)\n     // Loop until process is exit()ed from shutdown() function,\n     // called from ThreadRPCServer thread when a \"stop\" command is received."
      }
    ]
  }
]