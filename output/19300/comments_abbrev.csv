MarcoFalke,2020-06-17 10:11:07,"Does the crash also happen in a python functional test? If yes, mind to add one?",https://github.com/bitcoin/bitcoin/pull/19300#issuecomment-645283826,645283826,
promag,2020-06-17 10:14:01,@MarcoFalke haven't tried but I'd say it should - but it will be one of those loop-until-it-happens test. I'll give it a try.,https://github.com/bitcoin/bitcoin/pull/19300#issuecomment-645285177,645285177,
MarcoFalke,2020-06-17 10:16:25,does this need backport to 0.19?,https://github.com/bitcoin/bitcoin/pull/19300#issuecomment-645286264,645286264,
promag,2020-06-17 10:18:18,"@MarcoFalke yes, and probably is a clean backport.",https://github.com/bitcoin/bitcoin/pull/19300#issuecomment-645287165,645287165,
fscemama,2020-06-17 11:56:49,"Hi, just tested the running of several background processes of the following script :\n\n```\n# Bitcoin Core RPC client version v0.20.0.0-ga62f0ed64f8bbbdfe6467ac5ce92ef5b5222d1bd\nwallet=xxxxxx\nfor i in {1..1000}\ndo\n  echo $i\n  bitcoin-cli loadwallet $wallet\n  bitcoin-cli unloadwallet $wallet\ndone\n\n```\nCrash is immediate. Here's valgrind output:\n\n```\nvalgrind /usr/loca",https://github.com/bitcoin/bitcoin/pull/19300#issuecomment-645329513,645329513,
promag,2020-06-17 13:01:42,"@MarcoFalke pushed 50b7e8216564d1e897f2f05b6d91abb5afd90f0c, I welcome any python ninja to make it more cool.",https://github.com/bitcoin/bitcoin/pull/19300#issuecomment-645359186,645359186,
promag,2020-06-17 13:51:08,@fscemama if you can please repeat the test but using this branch.,https://github.com/bitcoin/bitcoin/pull/19300#issuecomment-645386274,645386274,
fscemama,2020-06-17 14:00:03,Sure. Can you confirm I must compile [this](https://github.com/promag/bitcoin/tree/2020-06-loadwallet) and re-test ?,https://github.com/bitcoin/bitcoin/pull/19300#issuecomment-645391561,645391561,
fscemama,2020-06-17 14:32:18,"**Successfull.** Will send these kind of normal messages:\n\n```\nerror code: -4\nerror message:\nWallet already being loading.\nerror code: -18\nerror message:\nRequested wallet does not exist or is not loaded\n```\n\nNo crash. Hourra!",https://github.com/bitcoin/bitcoin/pull/19300#issuecomment-645411416,645411416,
DrahtBot,2020-06-17 23:28:37,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19101 (refactor: remove ::vpwallets and related global variables by ryanofsky)\n\nIf you consider this pull request impor",https://github.com/bitcoin/bitcoin/pull/19300#issuecomment-645678498,645678498,
promag,2020-06-18 14:50:01,"> btw, couldn't get an error with the testing bash script on master\n\n@hebasto see https://github.com/bitcoin/bitcoin/issues/19232#issuecomment-645316204",https://github.com/bitcoin/bitcoin/pull/19300#issuecomment-646069330,646069330,
hebasto,2020-06-18 14:59:11,"> > btw, couldn't get an error with the testing bash script on master\n> \n> @hebasto see [#19232 (comment)](https://github.com/bitcoin/bitcoin/issues/19232#issuecomment-645316204)\n\nIndeed :)\n\nOn master:\n```\n2020-06-18T14:57:15Z [httpworker.0] Using BerkeleyDB version Berkeley DB 5.3.28: (September  9, 2013)\n2020-06-18T14:57:15Z [httpworker.0] Using wallet /home/hebasto/.bitcoin/re",https://github.com/bitcoin/bitcoin/pull/19300#issuecomment-646076025,646076025,
hebasto,2020-06-18 15:09:34,"Testing this PR with two parallel testing scripts and got _different_ error messages:\n```\n$ ~/test.sh & ~/test.sh \n[1] 354\nerror code: -4\nerror message:\nWallet already being loading.\nerror code: -18\nerror message:\nRequested wallet does not exist or is not loaded\nerror code: -4\nerror message:\nWallet already being loading.\nerror code: -18\nerror message:\nRequested wallet",https://github.com/bitcoin/bitcoin/pull/19300#issuecomment-646083177,646083177,
promag,2020-06-18 15:12:44,@hebasto yes that's expected - one is from concurrent load and the other from concurrent unload.,https://github.com/bitcoin/bitcoin/pull/19300#issuecomment-646085338,646085338,
promag,2020-06-23 08:10:45,"> This could be implemented by making the second loadwallet call block and wait for the first loadwallet call to finish, and then return the existing ""duplicate wallet"" error\n\nIf the 2nd waits then why return an error?\n\nEdit: actually, I wonder if loading an already loaded wallet should be an error in the first place.\n\n> This change would also make simultaneous wallet load calls work m",https://github.com/bitcoin/bitcoin/pull/19300#issuecomment-647983829,647983829,
ryanofsky,2020-06-23 23:14:43,"> > This could be implemented by making the second loadwallet call block and wait for the first loadwallet call to finish, and then return the existing ""duplicate wallet"" error\n> \n> If the 2nd waits then why return an error?\n\nBecause I think the point of changing this is to fix a race condition, not add a new one. If you load the same wallet twice one load should succeed, and one load shou",https://github.com/bitcoin/bitcoin/pull/19300#issuecomment-648475843,648475843,
ryanofsky,2020-06-29 14:16:11,This PR might be close to being mergeable. It has acks from me and hebasto and some review comments from Marco. Suggestions I made to improve this aren't blocking and could be followed up later.,https://github.com/bitcoin/bitcoin/pull/19300#issuecomment-651151001,651151001,
promag,2020-06-29 14:24:20,"> I think the API I'm suggesting is pretty ideal for concurrent clients because it would let them unload & unload wallets reliably and never poll. \n\nI disagree, current API (with or without your suggestion) doesn't make it easy to concurrently use a wallet (load+use+unload) -  client A unloads and messes client B.  And in the case some coordination exists on the client side, those improvements",https://github.com/bitcoin/bitcoin/pull/19300#issuecomment-651155955,651155955,
ryanofsky,2020-06-29 15:06:31,"> I disagree, current API (with or without your suggestion) doesn't make it easy to concurrently use a wallet (load+use+unload) - client A unloads and messes client B.\n\nI don't think we disagree about anything here. This is irrelevant. Neither your fix, nor the one I'm suggesting tries to do this, because it would require storing client state in the server, which would be an awkward and unreli",https://github.com/bitcoin/bitcoin/pull/19300#issuecomment-651181150,651181150,
MarcoFalke,2020-06-29 15:13:22,Concept ACK 9b009fae6e2eb0ab2ee7ce7882c3556a9ac363a7 I have not reviewed the code,https://github.com/bitcoin/bitcoin/pull/19300#issuecomment-651185223,651185223,
promag,2020-06-29 15:22:00,@ryanofsky Agree in making those improvements for future releases? IMO this is enough as a fix for latest version and to backport.,https://github.com/bitcoin/bitcoin/pull/19300#issuecomment-651190283,651190283,
ryanofsky,2020-06-29 15:23:43,"> @ryanofsky Agree in making those improvements for future releases? IMO this is enough as a fix for latest version and to backport.\n\nYes I acked this PR twice and commented repeatedly it would be fine to improve this later.",https://github.com/bitcoin/bitcoin/pull/19300#issuecomment-651191237,651191237,
MarcoFalke,2020-06-17 13:16:51,I don't think we can assert that a race happened. Races are only intermittent.,https://github.com/bitcoin/bitcoin/pull/19300#discussion_r441536261,441536261,test/functional/wallet_multiwallet.py
promag,2020-06-17 13:50:10,"I think this one is pretty much guaranteed, loading takes a bit.",https://github.com/bitcoin/bitcoin/pull/19300#discussion_r441560325,441560325,test/functional/wallet_multiwallet.py
hebasto,2020-06-18 14:11:16,"```suggestion\n    auto result = WITH_LOCK(g_loading_wallet_mutex, return g_loading_wallet_set.insert(location.GetName()));\n    if (!result.second) {\n        error = Untranslated(""Wallet already being loading."");\n        return nullptr;\n    }\n```",https://github.com/bitcoin/bitcoin/pull/19300#discussion_r442256581,442256581,src/wallet/wallet.cpp
hebasto,2020-06-18 14:32:07,"nit: It seems using an unnamed namespace is preferable:\n- https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines.html#Rs-unnamed2\n- https://stackoverflow.com/questions/154469/unnamed-anonymous-namespaces-vs-static-functions\n- https://stackoverflow.com/questions/4422507/superiority-of-unnamed-namespace-over-static\n- https://stackoverflow.com/questions/4977252/why-an-unnamed-namespace-",https://github.com/bitcoin/bitcoin/pull/19300#discussion_r442272308,442272308,src/wallet/wallet.cpp
MarcoFalke,2020-06-18 14:51:45,Any reason to not test the cli? IIRC the reported bug was about the cli,https://github.com/bitcoin/bitcoin/pull/19300#discussion_r442287633,442287633,test/functional/wallet_multiwallet.py
promag,2020-06-18 14:53:45,I just need to get the cli equivalent to `get_rpc_proxy`.,https://github.com/bitcoin/bitcoin/pull/19300#discussion_r442289228,442289228,test/functional/wallet_multiwallet.py
promag,2020-06-18 15:14:36,I think this is better for a follow up - being a bugfix we should make it minimal so it's easily backported. Unless we allow an anonymous namespace between functions?,https://github.com/bitcoin/bitcoin/pull/19300#discussion_r442303560,442303560,src/wallet/wallet.cpp
promag,2020-06-18 15:15:20,"Thanks, will apply this.",https://github.com/bitcoin/bitcoin/pull/19300#discussion_r442304056,442304056,src/wallet/wallet.cpp
hebasto,2020-06-18 15:21:30,"> I think this is better for a follow up - being a bugfix we should make it minimal so it's easily backported.\n\nIt's up to you :)\n\n> Unless we allow an anonymous namespace between functions?\n\nWhy not?",https://github.com/bitcoin/bitcoin/pull/19300#discussion_r442308431,442308431,src/wallet/wallet.cpp
promag,2020-06-19 00:02:42,Fixed.,https://github.com/bitcoin/bitcoin/pull/19300#discussion_r442563135,442563135,test/functional/wallet_multiwallet.py
promag,2020-06-19 00:02:51,Done.,https://github.com/bitcoin/bitcoin/pull/19300#discussion_r442563191,442563191,src/wallet/wallet.cpp
promag,2020-06-19 00:03:10,Placed in anonymous namespace.,https://github.com/bitcoin/bitcoin/pull/19300#discussion_r442563286,442563286,src/wallet/wallet.cpp
ryanofsky,2020-06-23 00:36:40,"In commit ""qa: Test concurrent wallet loading"" (9b009fae6e2eb0ab2ee7ce7882c3556a9ac363a7)\n\n> I don't think we can assert that a race happened. Races are only intermittent.\n\nI would agree with Marco that in general tests like this are fragile and bad and slow and more trouble than they are worth, but also agree with promag that in practice this test is unlikely to fail.\n\nTo avoid potent",https://github.com/bitcoin/bitcoin/pull/19300#discussion_r443897594,443897594,test/functional/wallet_multiwallet.py
MarcoFalke,2020-08-22 10:16:20,The race does indeed happen: https://cirrus-ci.com/task/5075565516423168?command=ci#L5121,https://github.com/bitcoin/bitcoin/pull/19300#discussion_r475075615,475075615,test/functional/wallet_multiwallet.py
promag,2020-08-22 12:30:24,So it was slower to spawn those threads than to load the wallet. Not sure about c++ test because it would need to force block inside loading. Maybe we could improve this first by waiting for all threads to be ready to load?,https://github.com/bitcoin/bitcoin/pull/19300#discussion_r475085751,475085751,test/functional/wallet_multiwallet.py
