[
  {
    "sha": "02bbc053100ef99ca0f433b0a8c70961336ae79e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMmJiYzA1MzEwMGVmOTljYTBmNDMzYjBhOGM3MDk2MTMzNmFlNzll",
    "commit": {
      "author": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-06-08T18:54:02Z"
      },
      "committer": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-06-19T17:02:26Z"
      },
      "message": "Rescope g_enable_bip61 to net_processing",
      "tree": {
        "sha": "0b0c78b392d17d4afee72ade2633d71409b26545",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b0c78b392d17d4afee72ade2633d71409b26545"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/02bbc053100ef99ca0f433b0a8c70961336ae79e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02bbc053100ef99ca0f433b0a8c70961336ae79e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/02bbc053100ef99ca0f433b0a8c70961336ae79e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02bbc053100ef99ca0f433b0a8c70961336ae79e/comments",
    "author": {
      "login": "skeees",
      "id": 195769,
      "node_id": "MDQ6VXNlcjE5NTc2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skeees",
      "html_url": "https://github.com/skeees",
      "followers_url": "https://api.github.com/users/skeees/followers",
      "following_url": "https://api.github.com/users/skeees/following{/other_user}",
      "gists_url": "https://api.github.com/users/skeees/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skeees/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
      "organizations_url": "https://api.github.com/users/skeees/orgs",
      "repos_url": "https://api.github.com/users/skeees/repos",
      "events_url": "https://api.github.com/users/skeees/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skeees/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "skeees",
      "id": 195769,
      "node_id": "MDQ6VXNlcjE5NTc2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skeees",
      "html_url": "https://github.com/skeees",
      "followers_url": "https://api.github.com/users/skeees/followers",
      "following_url": "https://api.github.com/users/skeees/following{/other_user}",
      "gists_url": "https://api.github.com/users/skeees/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skeees/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
      "organizations_url": "https://api.github.com/users/skeees/orgs",
      "repos_url": "https://api.github.com/users/skeees/repos",
      "events_url": "https://api.github.com/users/skeees/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skeees/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3f398d7a17f136cd4a67998406ca41a124ae2966",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f398d7a17f136cd4a67998406ca41a124ae2966",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f398d7a17f136cd4a67998406ca41a124ae2966"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "1b1c40e083fa7ba5b687845870cb79148d364b0a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02bbc053100ef99ca0f433b0a8c70961336ae79e/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02bbc053100ef99ca0f433b0a8c70961336ae79e/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=02bbc053100ef99ca0f433b0a8c70961336ae79e",
        "patch": "@@ -1134,8 +1134,6 @@ bool AppInitParameterInteraction()\n     if (gArgs.GetBoolArg(\"-peerbloomfilters\", DEFAULT_PEERBLOOMFILTERS))\n         nLocalServices = ServiceFlags(nLocalServices | NODE_BLOOM);\n \n-    g_enable_bip61 = gArgs.GetBoolArg(\"-enablebip61\", DEFAULT_ENABLE_BIP61);\n-\n     if (gArgs.GetArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) < 0)\n         return InitError(\"rpcserialversion must be non-negative.\");\n "
      },
      {
        "sha": "65f3914d362b729b69a531df9b4bbd96d1420510",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02bbc053100ef99ca0f433b0a8c70961336ae79e/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02bbc053100ef99ca0f433b0a8c70961336ae79e/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=02bbc053100ef99ca0f433b0a8c70961336ae79e",
        "patch": "@@ -37,7 +37,6 @@\n #endif\n \n std::atomic<int64_t> nTimeBestReceived(0); // Used only to inform the wallet of when we last received a block\n-bool g_enable_bip61 = DEFAULT_ENABLE_BIP61;\n \n struct IteratorComparator\n {\n@@ -74,6 +73,9 @@ static const int HISTORICAL_BLOCK_AGE = 7 * 24 * 60 * 60;\n \n // Internal stuff\n namespace {\n+    /** Enable BIP61 (sending reject messages) */\n+    bool g_enable_bip61 = DEFAULT_ENABLE_BIP61;\n+\n     /** Number of nodes with fSyncStarted. */\n     int nSyncStarted = 0;\n \n@@ -811,6 +813,8 @@ static bool BlockRequestAllowed(const CBlockIndex* pindex, const Consensus::Para\n }\n \n PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn, CScheduler &scheduler) : connman(connmanIn), m_stale_tip_check_time(0) {\n+    g_enable_bip61 = gArgs.GetBoolArg(\"-enablebip61\", DEFAULT_ENABLE_BIP61);\n+\n     // Initialize global variables that cannot be constructed at startup.\n     recentRejects.reset(new CRollingBloomFilter(120000, 0.000001));\n \n@@ -867,7 +871,7 @@ static uint256 most_recent_block_hash;\n static bool fWitnessesPresentInMostRecentCompactBlock;\n \n /**\n- * Maintain state about the best-seen block and fast-announce a compact block \n+ * Maintain state about the best-seen block and fast-announce a compact block\n  * to compatible peers.\n  */\n void PeerLogicValidation::NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) {\n@@ -912,7 +916,7 @@ void PeerLogicValidation::NewPoWValidBlock(const CBlockIndex *pindex, const std:\n }\n \n /**\n- * Update our best height and announce any block hashes which weren't previously \n+ * Update our best height and announce any block hashes which weren't previously\n  * in chainActive to our peers.\n  */\n void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n@@ -948,7 +952,7 @@ void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CB\n }\n \n /**\n- * Handle invalid block rejection and consequent peer banning, maintain which \n+ * Handle invalid block rejection and consequent peer banning, maintain which\n  * peers announce compact blocks.\n  */\n void PeerLogicValidation::BlockChecked(const CBlock& block, const CValidationState& state) {"
      },
      {
        "sha": "19e33f411a71d444ca643bef87d274805b332ee7",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02bbc053100ef99ca0f433b0a8c70961336ae79e/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02bbc053100ef99ca0f433b0a8c70961336ae79e/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=02bbc053100ef99ca0f433b0a8c70961336ae79e",
        "patch": "@@ -37,8 +37,6 @@ static constexpr int64_t MINIMUM_CONNECT_TIME = 30;\n \n /** Default for BIP61 (sending reject messages) */\n static constexpr bool DEFAULT_ENABLE_BIP61 = true;\n-/** Enable BIP61 (sending reject messages) */\n-extern bool g_enable_bip61;\n \n class PeerLogicValidation final : public CValidationInterface, public NetEventsInterface {\n private:"
      }
    ]
  },
  {
    "sha": "1d4df02b7e47f4805336e0dcd577f89b7ed16afe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZDRkZjAyYjdlNDdmNDgwNTMzNmUwZGNkNTc3Zjg5YjdlZDE2YWZl",
    "commit": {
      "author": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-06-07T18:32:43Z"
      },
      "committer": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-06-19T17:02:27Z"
      },
      "message": "[move-only] Move things only referenced in net_processing out of header file",
      "tree": {
        "sha": "dd5c4cc83321c61f18fed945cb9c9335f3c2c10b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dd5c4cc83321c61f18fed945cb9c9335f3c2c10b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d4df02b7e47f4805336e0dcd577f89b7ed16afe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d4df02b7e47f4805336e0dcd577f89b7ed16afe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1d4df02b7e47f4805336e0dcd577f89b7ed16afe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d4df02b7e47f4805336e0dcd577f89b7ed16afe/comments",
    "author": {
      "login": "skeees",
      "id": 195769,
      "node_id": "MDQ6VXNlcjE5NTc2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skeees",
      "html_url": "https://github.com/skeees",
      "followers_url": "https://api.github.com/users/skeees/followers",
      "following_url": "https://api.github.com/users/skeees/following{/other_user}",
      "gists_url": "https://api.github.com/users/skeees/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skeees/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
      "organizations_url": "https://api.github.com/users/skeees/orgs",
      "repos_url": "https://api.github.com/users/skeees/repos",
      "events_url": "https://api.github.com/users/skeees/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skeees/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "skeees",
      "id": 195769,
      "node_id": "MDQ6VXNlcjE5NTc2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skeees",
      "html_url": "https://github.com/skeees",
      "followers_url": "https://api.github.com/users/skeees/followers",
      "following_url": "https://api.github.com/users/skeees/following{/other_user}",
      "gists_url": "https://api.github.com/users/skeees/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skeees/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
      "organizations_url": "https://api.github.com/users/skeees/orgs",
      "repos_url": "https://api.github.com/users/skeees/repos",
      "events_url": "https://api.github.com/users/skeees/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skeees/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02bbc053100ef99ca0f433b0a8c70961336ae79e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02bbc053100ef99ca0f433b0a8c70961336ae79e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02bbc053100ef99ca0f433b0a8c70961336ae79e"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 35,
      "deletions": 33
    },
    "files": [
      {
        "sha": "4d1ded60c72cc956dcdcb9b1bd2c4dbea660bbc4",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 10,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d4df02b7e47f4805336e0dcd577f89b7ed16afe/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d4df02b7e47f4805336e0dcd577f89b7ed16afe/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=1d4df02b7e47f4805336e0dcd577f89b7ed16afe",
        "patch": "@@ -36,6 +36,37 @@\n # error \"Bitcoin cannot be compiled without assertions.\"\n #endif\n \n+/** Expiration time for orphan transactions in seconds */\n+static const int64_t ORPHAN_TX_EXPIRE_TIME = 20 * 60;\n+/** Minimum time between orphan transactions expire time checks in seconds */\n+static const int64_t ORPHAN_TX_EXPIRE_INTERVAL = 5 * 60;\n+/** Headers download timeout expressed in microseconds\n+ *  Timeout = base + per_header * (expected number of headers) */\n+static constexpr int64_t HEADERS_DOWNLOAD_TIMEOUT_BASE = 15 * 60 * 1000000; // 15 minutes\n+static constexpr int64_t HEADERS_DOWNLOAD_TIMEOUT_PER_HEADER = 1000; // 1ms/header\n+/** Protect at least this many outbound peers from disconnection due to slow/\n+ * behind headers chain.\n+ */\n+static constexpr int32_t MAX_OUTBOUND_PEERS_TO_PROTECT_FROM_DISCONNECT = 4;\n+/** Timeout for (unprotected) outbound peers to sync to our chainwork, in seconds */\n+static constexpr int64_t CHAIN_SYNC_TIMEOUT = 20 * 60; // 20 minutes\n+/** How frequently to check for stale tips, in seconds */\n+static constexpr int64_t STALE_CHECK_INTERVAL = 10 * 60; // 10 minutes\n+/** How frequently to check for extra outbound peers and disconnect, in seconds */\n+static constexpr int64_t EXTRA_PEER_CHECK_INTERVAL = 45;\n+/** Minimum time an outbound-peer-eviction candidate must be connected for, in order to evict, in seconds */\n+static constexpr int64_t MINIMUM_CONNECT_TIME = 30;\n+\n+static const uint64_t RANDOMIZER_ID_ADDRESS_RELAY = 0x3cac0035b5866b90ULL; // SHA256(\"main address relay\")[0:8]\n+\n+/// Age after which a stale block will no longer be served if requested as\n+/// protection against fingerprinting. Set to one month, denominated in seconds.\n+static const int STALE_RELAY_AGE_LIMIT = 30 * 24 * 60 * 60;\n+\n+/// Age after which a block is considered historical for purposes of rate\n+/// limiting block relay. Set to one week, denominated in seconds.\n+static const int HISTORICAL_BLOCK_AGE = 7 * 24 * 60 * 60;\n+\n std::atomic<int64_t> nTimeBestReceived(0); // Used only to inform the wallet of when we last received a block\n \n struct IteratorComparator\n@@ -57,20 +88,12 @@ static CCriticalSection g_cs_orphans;\n std::map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(g_cs_orphans);\n std::map<COutPoint, std::set<std::map<uint256, COrphanTx>::iterator, IteratorComparator>> mapOrphanTransactionsByPrev GUARDED_BY(g_cs_orphans);\n void EraseOrphansFor(NodeId peer);\n+/** Increase a node's misbehavior score. */\n+void Misbehaving(NodeId nodeid, int howmuch, const std::string& message=\"\");\n \n static size_t vExtraTxnForCompactIt GUARDED_BY(g_cs_orphans) = 0;\n static std::vector<std::pair<uint256, CTransactionRef>> vExtraTxnForCompact GUARDED_BY(g_cs_orphans);\n \n-static const uint64_t RANDOMIZER_ID_ADDRESS_RELAY = 0x3cac0035b5866b90ULL; // SHA256(\"main address relay\")[0:8]\n-\n-/// Age after which a stale block will no longer be served if requested as\n-/// protection against fingerprinting. Set to one month, denominated in seconds.\n-static const int STALE_RELAY_AGE_LIMIT = 30 * 24 * 60 * 60;\n-\n-/// Age after which a block is considered historical for purposes of rate\n-/// limiting block relay. Set to one week, denominated in seconds.\n-static const int HISTORICAL_BLOCK_AGE = 7 * 24 * 60 * 60;\n-\n // Internal stuff\n namespace {\n     /** Enable BIP61 (sending reject messages) */"
      },
      {
        "sha": "9b867b25ec980f0dfb5535e0b0d7a516f4cce6fb",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 0,
        "deletions": 23,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d4df02b7e47f4805336e0dcd577f89b7ed16afe/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d4df02b7e47f4805336e0dcd577f89b7ed16afe/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=1d4df02b7e47f4805336e0dcd577f89b7ed16afe",
        "patch": "@@ -12,29 +12,8 @@\n \n /** Default for -maxorphantx, maximum number of orphan transactions kept in memory */\n static const unsigned int DEFAULT_MAX_ORPHAN_TRANSACTIONS = 100;\n-/** Expiration time for orphan transactions in seconds */\n-static const int64_t ORPHAN_TX_EXPIRE_TIME = 20 * 60;\n-/** Minimum time between orphan transactions expire time checks in seconds */\n-static const int64_t ORPHAN_TX_EXPIRE_INTERVAL = 5 * 60;\n /** Default number of orphan+recently-replaced txn to keep around for block reconstruction */\n static const unsigned int DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN = 100;\n-/** Headers download timeout expressed in microseconds\n- *  Timeout = base + per_header * (expected number of headers) */\n-static constexpr int64_t HEADERS_DOWNLOAD_TIMEOUT_BASE = 15 * 60 * 1000000; // 15 minutes\n-static constexpr int64_t HEADERS_DOWNLOAD_TIMEOUT_PER_HEADER = 1000; // 1ms/header\n-/** Protect at least this many outbound peers from disconnection due to slow/\n- * behind headers chain.\n- */\n-static constexpr int32_t MAX_OUTBOUND_PEERS_TO_PROTECT_FROM_DISCONNECT = 4;\n-/** Timeout for (unprotected) outbound peers to sync to our chainwork, in seconds */\n-static constexpr int64_t CHAIN_SYNC_TIMEOUT = 20 * 60; // 20 minutes\n-/** How frequently to check for stale tips, in seconds */\n-static constexpr int64_t STALE_CHECK_INTERVAL = 10 * 60; // 10 minutes\n-/** How frequently to check for extra outbound peers and disconnect, in seconds */\n-static constexpr int64_t EXTRA_PEER_CHECK_INTERVAL = 45;\n-/** Minimum time an outbound-peer-eviction candidate must be connected for, in order to evict, in seconds */\n-static constexpr int64_t MINIMUM_CONNECT_TIME = 30;\n-\n /** Default for BIP61 (sending reject messages) */\n static constexpr bool DEFAULT_ENABLE_BIP61 = true;\n \n@@ -97,7 +76,5 @@ struct CNodeStateStats {\n \n /** Get statistics from node state */\n bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats);\n-/** Increase a node's misbehavior score. */\n-void Misbehaving(NodeId nodeid, int howmuch, const std::string& message=\"\");\n \n #endif // BITCOIN_NET_PROCESSING_H"
      },
      {
        "sha": "df19e1b3e9d8d1694cfd8be18c822a1bb5e96c97",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d4df02b7e47f4805336e0dcd577f89b7ed16afe/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d4df02b7e47f4805336e0dcd577f89b7ed16afe/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=1d4df02b7e47f4805336e0dcd577f89b7ed16afe",
        "patch": "@@ -24,6 +24,8 @@\n extern bool AddOrphanTx(const CTransactionRef& tx, NodeId peer);\n extern void EraseOrphansFor(NodeId peer);\n extern unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans);\n+extern void Misbehaving(NodeId nodeid, int howmuch, const std::string& message=\"\");\n+\n struct COrphanTx {\n     CTransactionRef tx;\n     NodeId fromPeer;"
      }
    ]
  },
  {
    "sha": "6690a28606d6ada23355de7d9a9878f841b21e67",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NjkwYTI4NjA2ZDZhZGEyMzM1NWRlN2Q5YTk4NzhmODQxYjIxZTY3",
    "commit": {
      "author": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-06-08T19:09:20Z"
      },
      "committer": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-06-20T21:27:59Z"
      },
      "message": "Restrict as much as possible in net_processing to translation unit\n\nMark everything else static or in an anonymous namespace.",
      "tree": {
        "sha": "8f662b88c619537acdf8762669b3d9338cda1187",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8f662b88c619537acdf8762669b3d9338cda1187"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6690a28606d6ada23355de7d9a9878f841b21e67",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEIYWkmH/KGrdSf1LBg1TZSXECj8YFAlsqxt8ACgkQg1TZSXEC\nj8aAmA//c3La6EaFOev9YAWAiNbM2QlanGhYifsoqv0lp1pFtMTKaB9g5HLu68+q\neMEBkZBxI2KBiF4MSlKXpqMSL+4F8bX5DHnhwXzhrmkaOM1ZxXjCnSyMEt3HHxV6\ne6j/hZlgPyR9BLh818lzNCv0PTK88ntlx+4fouMO1hPpfbA+Meh4AUfXn2yhuLi2\nyIvBu0DUoU32SONELVB42mt7BrxghEHmLUWVHq9OJjPJO+36hG0yv/80BZsbf4wp\nO8bFf6A6KMsPck2Pp0e5ARcmTl0nj3zFARsM2k/cg33qYMIN1vG7xlnlhRnRZG1s\nK688WgV6EyQ2O6yn6wYCHi1oFEEtlGbzjGoWjVv4Hlm+MkX7okFXx6uDyTSGQz3z\nClB11SQmebQ7BQX65w6aCFceh8m3Wh2cPJoQ2nNs4xJKljsAeZ3Zl4t9pXqnZf0s\nEXT3LBaMzveikwkjyf/4b3R0DbRLBHVhZT1+CHFuwz3OBdwpp0gs2sUHcx++85FB\n5bteDy4rT9mnyeUEfXxEF5vhEtQCFNySUjrWj8yECfe3gGB5681A1ip5t3KjI99j\nNkHV0SwGjezcBgd4fOLuQp6LAD7kA1PrggeapNckhKOLvT2DLD4qWkfEMaz6fYTI\n/vuyqRvQg6LuDyEOX+gys+N7FIWxM36gxxhmt25p5P6iQWgznmI=\n=5jda\n-----END PGP SIGNATURE-----",
        "payload": "tree 8f662b88c619537acdf8762669b3d9338cda1187\nparent 1d4df02b7e47f4805336e0dcd577f89b7ed16afe\nauthor Jesse Cohen <jc@jc.lol> 1528484960 -0400\ncommitter Jesse Cohen <jc@jc.lol> 1529530079 -0400\n\nRestrict as much as possible in net_processing to translation unit\n\nMark everything else static or in an anonymous namespace.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6690a28606d6ada23355de7d9a9878f841b21e67",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6690a28606d6ada23355de7d9a9878f841b21e67",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6690a28606d6ada23355de7d9a9878f841b21e67/comments",
    "author": {
      "login": "skeees",
      "id": 195769,
      "node_id": "MDQ6VXNlcjE5NTc2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skeees",
      "html_url": "https://github.com/skeees",
      "followers_url": "https://api.github.com/users/skeees/followers",
      "following_url": "https://api.github.com/users/skeees/following{/other_user}",
      "gists_url": "https://api.github.com/users/skeees/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skeees/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
      "organizations_url": "https://api.github.com/users/skeees/orgs",
      "repos_url": "https://api.github.com/users/skeees/repos",
      "events_url": "https://api.github.com/users/skeees/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skeees/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "skeees",
      "id": 195769,
      "node_id": "MDQ6VXNlcjE5NTc2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skeees",
      "html_url": "https://github.com/skeees",
      "followers_url": "https://api.github.com/users/skeees/followers",
      "following_url": "https://api.github.com/users/skeees/following{/other_user}",
      "gists_url": "https://api.github.com/users/skeees/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skeees/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
      "organizations_url": "https://api.github.com/users/skeees/orgs",
      "repos_url": "https://api.github.com/users/skeees/repos",
      "events_url": "https://api.github.com/users/skeees/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skeees/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1d4df02b7e47f4805336e0dcd577f89b7ed16afe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d4df02b7e47f4805336e0dcd577f89b7ed16afe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d4df02b7e47f4805336e0dcd577f89b7ed16afe"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 27,
      "deletions": 26
    },
    "files": [
      {
        "sha": "77aa5939d92dc5fcf3a5b9b074fed7787c96f763",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 26,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6690a28606d6ada23355de7d9a9878f841b21e67/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6690a28606d6ada23355de7d9a9878f841b21e67/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=6690a28606d6ada23355de7d9a9878f841b21e67",
        "patch": "@@ -37,9 +37,9 @@\n #endif\n \n /** Expiration time for orphan transactions in seconds */\n-static const int64_t ORPHAN_TX_EXPIRE_TIME = 20 * 60;\n+static constexpr int64_t ORPHAN_TX_EXPIRE_TIME = 20 * 60;\n /** Minimum time between orphan transactions expire time checks in seconds */\n-static const int64_t ORPHAN_TX_EXPIRE_INTERVAL = 5 * 60;\n+static constexpr int64_t ORPHAN_TX_EXPIRE_INTERVAL = 5 * 60;\n /** Headers download timeout expressed in microseconds\n  *  Timeout = base + per_header * (expected number of headers) */\n static constexpr int64_t HEADERS_DOWNLOAD_TIMEOUT_BASE = 15 * 60 * 1000000; // 15 minutes\n@@ -56,27 +56,14 @@ static constexpr int64_t STALE_CHECK_INTERVAL = 10 * 60; // 10 minutes\n static constexpr int64_t EXTRA_PEER_CHECK_INTERVAL = 45;\n /** Minimum time an outbound-peer-eviction candidate must be connected for, in order to evict, in seconds */\n static constexpr int64_t MINIMUM_CONNECT_TIME = 30;\n-\n-static const uint64_t RANDOMIZER_ID_ADDRESS_RELAY = 0x3cac0035b5866b90ULL; // SHA256(\"main address relay\")[0:8]\n-\n+/** SHA256(\"main address relay\")[0:8] */\n+static constexpr uint64_t RANDOMIZER_ID_ADDRESS_RELAY = 0x3cac0035b5866b90ULL;\n /// Age after which a stale block will no longer be served if requested as\n /// protection against fingerprinting. Set to one month, denominated in seconds.\n-static const int STALE_RELAY_AGE_LIMIT = 30 * 24 * 60 * 60;\n-\n+static constexpr int STALE_RELAY_AGE_LIMIT = 30 * 24 * 60 * 60;\n /// Age after which a block is considered historical for purposes of rate\n /// limiting block relay. Set to one week, denominated in seconds.\n-static const int HISTORICAL_BLOCK_AGE = 7 * 24 * 60 * 60;\n-\n-std::atomic<int64_t> nTimeBestReceived(0); // Used only to inform the wallet of when we last received a block\n-\n-struct IteratorComparator\n-{\n-    template<typename I>\n-    bool operator()(const I& a, const I& b) const\n-    {\n-        return &(*a) < &(*b);\n-    }\n-};\n+static constexpr int HISTORICAL_BLOCK_AGE = 7 * 24 * 60 * 60;\n \n struct COrphanTx {\n     // When modifying, adapt the copy of this definition in tests/DoS_tests.\n@@ -86,14 +73,12 @@ struct COrphanTx {\n };\n static CCriticalSection g_cs_orphans;\n std::map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(g_cs_orphans);\n-std::map<COutPoint, std::set<std::map<uint256, COrphanTx>::iterator, IteratorComparator>> mapOrphanTransactionsByPrev GUARDED_BY(g_cs_orphans);\n+\n void EraseOrphansFor(NodeId peer);\n+\n /** Increase a node's misbehavior score. */\n void Misbehaving(NodeId nodeid, int howmuch, const std::string& message=\"\");\n \n-static size_t vExtraTxnForCompactIt GUARDED_BY(g_cs_orphans) = 0;\n-static std::vector<std::pair<uint256, CTransactionRef>> vExtraTxnForCompact GUARDED_BY(g_cs_orphans);\n-\n // Internal stuff\n namespace {\n     /** Enable BIP61 (sending reject messages) */\n@@ -163,10 +148,24 @@ namespace {\n     MapRelay mapRelay;\n     /** Expiration-time ordered list of (expire time, relay map entry) pairs, protected by cs_main). */\n     std::deque<std::pair<int64_t, MapRelay::iterator>> vRelayExpiration;\n+\n+    std::atomic<int64_t> nTimeBestReceived(0); // Used only to inform the wallet of when we last received a block\n+\n+    struct IteratorComparator\n+    {\n+        template<typename I>\n+        bool operator()(const I& a, const I& b) const\n+        {\n+            return &(*a) < &(*b);\n+        }\n+    };\n+    std::map<COutPoint, std::set<std::map<uint256, COrphanTx>::iterator, IteratorComparator>> mapOrphanTransactionsByPrev GUARDED_BY(g_cs_orphans);\n+\n+    static size_t vExtraTxnForCompactIt GUARDED_BY(g_cs_orphans) = 0;\n+    static std::vector<std::pair<uint256, CTransactionRef>> vExtraTxnForCompact GUARDED_BY(g_cs_orphans);\n } // namespace\n \n namespace {\n-\n struct CBlockReject {\n     unsigned char chRejectCode;\n     std::string strRejectReason;\n@@ -293,10 +292,10 @@ struct CNodeState {\n };\n \n /** Map maintaining per-node state. Requires cs_main. */\n-std::map<NodeId, CNodeState> mapNodeState;\n+static std::map<NodeId, CNodeState> mapNodeState;\n \n // Requires cs_main.\n-CNodeState *State(NodeId pnode) {\n+static CNodeState *State(NodeId pnode) {\n     std::map<NodeId, CNodeState>::iterator it = mapNodeState.find(pnode);\n     if (it == mapNodeState.end())\n         return nullptr;\n@@ -3229,6 +3228,7 @@ void PeerLogicValidation::CheckForStaleTipAndEvictPeers(const Consensus::Params\n     }\n }\n \n+namespace {\n class CompareInvMempoolOrder\n {\n     CTxMemPool *mp;\n@@ -3245,6 +3245,7 @@ class CompareInvMempoolOrder\n         return mp->CompareDepthAndScore(*b, *a);\n     }\n };\n+}\n \n bool PeerLogicValidation::SendMessages(CNode* pto, std::atomic<bool>& interruptMsgProc)\n {"
      }
    ]
  },
  {
    "sha": "3339ba28e95aaaa355b7d33a69cffca7ab29b3fd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMzM5YmEyOGU5NWFhYWEzNTViN2QzM2E2OWNmZmNhN2FiMjliM2Zk",
    "commit": {
      "author": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-07-09T19:02:32Z"
      },
      "committer": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-07-10T01:09:58Z"
      },
      "message": "Make g_enable_bip61 a member variable of PeerLogicValidation",
      "tree": {
        "sha": "b6a935e4bfb14659f952c42da2bb00b5ce4d6998",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b6a935e4bfb14659f952c42da2bb00b5ce4d6998"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3339ba28e95aaaa355b7d33a69cffca7ab29b3fd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3339ba28e95aaaa355b7d33a69cffca7ab29b3fd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3339ba28e95aaaa355b7d33a69cffca7ab29b3fd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3339ba28e95aaaa355b7d33a69cffca7ab29b3fd/comments",
    "author": {
      "login": "skeees",
      "id": 195769,
      "node_id": "MDQ6VXNlcjE5NTc2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skeees",
      "html_url": "https://github.com/skeees",
      "followers_url": "https://api.github.com/users/skeees/followers",
      "following_url": "https://api.github.com/users/skeees/following{/other_user}",
      "gists_url": "https://api.github.com/users/skeees/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skeees/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
      "organizations_url": "https://api.github.com/users/skeees/orgs",
      "repos_url": "https://api.github.com/users/skeees/repos",
      "events_url": "https://api.github.com/users/skeees/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skeees/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "skeees",
      "id": 195769,
      "node_id": "MDQ6VXNlcjE5NTc2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skeees",
      "html_url": "https://github.com/skeees",
      "followers_url": "https://api.github.com/users/skeees/followers",
      "following_url": "https://api.github.com/users/skeees/following{/other_user}",
      "gists_url": "https://api.github.com/users/skeees/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skeees/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
      "organizations_url": "https://api.github.com/users/skeees/orgs",
      "repos_url": "https://api.github.com/users/skeees/repos",
      "events_url": "https://api.github.com/users/skeees/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skeees/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6690a28606d6ada23355de7d9a9878f841b21e67",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6690a28606d6ada23355de7d9a9878f841b21e67",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6690a28606d6ada23355de7d9a9878f841b21e67"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 20,
      "deletions": 20
    },
    "files": [
      {
        "sha": "6660b6661a56f6f305ad3a1baa0320ccf5c0caf7",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3339ba28e95aaaa355b7d33a69cffca7ab29b3fd/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3339ba28e95aaaa355b7d33a69cffca7ab29b3fd/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=3339ba28e95aaaa355b7d33a69cffca7ab29b3fd",
        "patch": "@@ -1317,7 +1317,7 @@ bool AppInitMain()\n     g_connman = std::unique_ptr<CConnman>(new CConnman(GetRand(std::numeric_limits<uint64_t>::max()), GetRand(std::numeric_limits<uint64_t>::max())));\n     CConnman& connman = *g_connman;\n \n-    peerLogic.reset(new PeerLogicValidation(&connman, scheduler));\n+    peerLogic.reset(new PeerLogicValidation(&connman, scheduler, gArgs.GetBoolArg(\"-enablebip61\", DEFAULT_ENABLE_BIP61)));\n     RegisterValidationInterface(peerLogic.get());\n \n     // sanitize comments per BIP-0014, format user agent and check total size"
      },
      {
        "sha": "1be29bdc9b4532c7e9899665eb95b772f85dc788",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 17,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3339ba28e95aaaa355b7d33a69cffca7ab29b3fd/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3339ba28e95aaaa355b7d33a69cffca7ab29b3fd/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=3339ba28e95aaaa355b7d33a69cffca7ab29b3fd",
        "patch": "@@ -81,9 +81,6 @@ void Misbehaving(NodeId nodeid, int howmuch, const std::string& message=\"\");\n \n // Internal stuff\n namespace {\n-    /** Enable BIP61 (sending reject messages) */\n-    bool g_enable_bip61 = DEFAULT_ENABLE_BIP61;\n-\n     /** Number of nodes with fSyncStarted. */\n     int nSyncStarted = 0;\n \n@@ -834,8 +831,8 @@ static bool BlockRequestAllowed(const CBlockIndex* pindex, const Consensus::Para\n         (GetBlockProofEquivalentTime(*pindexBestHeader, *pindex, *pindexBestHeader, consensusParams) < STALE_RELAY_AGE_LIMIT);\n }\n \n-PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn, CScheduler &scheduler) : connman(connmanIn), m_stale_tip_check_time(0) {\n-    g_enable_bip61 = gArgs.GetBoolArg(\"-enablebip61\", DEFAULT_ENABLE_BIP61);\n+PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn, CScheduler &scheduler, bool enable_bip61)\n+    : connman(connmanIn), m_stale_tip_check_time(0), m_enable_bip61(enable_bip61) {\n \n     // Initialize global variables that cannot be constructed at startup.\n     recentRejects.reset(new CRollingBloomFilter(120000, 0.000001));\n@@ -1564,7 +1561,7 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n     return true;\n }\n \n-bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, const std::atomic<bool>& interruptMsgProc)\n+bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, const std::atomic<bool>& interruptMsgProc, bool enable_bip61)\n {\n     LogPrint(BCLog::NET, \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->GetId());\n     if (gArgs.IsArgSet(\"-dropmessagestest\") && GetRand(gArgs.GetArg(\"-dropmessagestest\", 0)) == 0)\n@@ -1618,7 +1615,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         // Each connection can only send one version message\n         if (pfrom->nVersion != 0)\n         {\n-            if (g_enable_bip61) {\n+            if (enable_bip61) {\n                 connman->PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_DUPLICATE, std::string(\"Duplicate version message\")));\n             }\n             LOCK(cs_main);\n@@ -1649,7 +1646,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         if (!pfrom->fInbound && !pfrom->fFeeler && !pfrom->m_manual_connection && !HasAllDesirableServiceFlags(nServices))\n         {\n             LogPrint(BCLog::NET, \"peer=%d does not offer the expected services (%08x offered, %08x expected); disconnecting\\n\", pfrom->GetId(), nServices, GetDesirableServiceFlags(nServices));\n-            if (g_enable_bip61) {\n+            if (enable_bip61) {\n                 connman->PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_NONSTANDARD,\n                                    strprintf(\"Expected to offer services %08x\", GetDesirableServiceFlags(nServices))));\n             }\n@@ -1672,7 +1669,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         {\n             // disconnect from peers older than this proto version\n             LogPrint(BCLog::NET, \"peer=%d using obsolete version %i; disconnecting\\n\", pfrom->GetId(), nVersion);\n-            if (g_enable_bip61) {\n+            if (enable_bip61) {\n                 connman->PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_OBSOLETE,\n                                    strprintf(\"Version must be %d or greater\", MIN_PEER_PROTO_VERSION)));\n             }\n@@ -2373,7 +2370,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             LogPrint(BCLog::MEMPOOLREJ, \"%s from peer=%d was not accepted: %s\\n\", tx.GetHash().ToString(),\n                 pfrom->GetId(),\n                 FormatStateMessage(state));\n-            if (g_enable_bip61 && state.GetRejectCode() > 0 && state.GetRejectCode() < REJECT_INTERNAL) { // Never send AcceptToMemoryPool's internal codes over P2P\n+            if (enable_bip61 && state.GetRejectCode() > 0 && state.GetRejectCode() < REJECT_INTERNAL) { // Never send AcceptToMemoryPool's internal codes over P2P\n                 connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::REJECT, strCommand, (unsigned char)state.GetRejectCode(),\n                                    state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), inv.hash));\n             }\n@@ -2558,7 +2555,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         } // cs_main\n \n         if (fProcessBLOCKTXN)\n-            return ProcessMessage(pfrom, NetMsgType::BLOCKTXN, blockTxnMsg, nTimeReceived, chainparams, connman, interruptMsgProc);\n+            return ProcessMessage(pfrom, NetMsgType::BLOCKTXN, blockTxnMsg, nTimeReceived, chainparams, connman, interruptMsgProc, enable_bip61);\n \n         if (fRevertToHeaderProcessing) {\n             // Headers received from HB compact block peers are permitted to be\n@@ -2944,12 +2941,12 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n     return true;\n }\n \n-static bool SendRejectsAndCheckIfBanned(CNode* pnode, CConnman* connman)\n+static bool SendRejectsAndCheckIfBanned(CNode* pnode, CConnman* connman, bool enable_bip61)\n {\n     AssertLockHeld(cs_main);\n     CNodeState &state = *State(pnode->GetId());\n \n-    if (g_enable_bip61) {\n+    if (enable_bip61) {\n         for (const CBlockReject& reject : state.rejects) {\n             connman->PushMessage(pnode, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, std::string(NetMsgType::BLOCK), reject.chRejectCode, reject.strRejectReason, reject.hashBlock));\n         }\n@@ -3051,15 +3048,15 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     bool fRet = false;\n     try\n     {\n-        fRet = ProcessMessage(pfrom, strCommand, vRecv, msg.nTime, chainparams, connman, interruptMsgProc);\n+        fRet = ProcessMessage(pfrom, strCommand, vRecv, msg.nTime, chainparams, connman, interruptMsgProc, m_enable_bip61);\n         if (interruptMsgProc)\n             return false;\n         if (!pfrom->vRecvGetData.empty())\n             fMoreWork = true;\n     }\n     catch (const std::ios_base::failure& e)\n     {\n-        if (g_enable_bip61) {\n+        if (m_enable_bip61) {\n             connman->PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_MALFORMED, std::string(\"error parsing message\")));\n         }\n         if (strstr(e.what(), \"end of data\"))\n@@ -3093,7 +3090,7 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     }\n \n     LOCK(cs_main);\n-    SendRejectsAndCheckIfBanned(pfrom, connman);\n+    SendRejectsAndCheckIfBanned(pfrom, connman, m_enable_bip61);\n \n     return fMoreWork;\n }\n@@ -3291,7 +3288,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto, std::atomic<bool>& interruptM\n         if (!lockMain)\n             return true;\n \n-        if (SendRejectsAndCheckIfBanned(pto, connman))\n+        if (SendRejectsAndCheckIfBanned(pto, connman, m_enable_bip61))\n             return true;\n         CNodeState &state = *State(pto->GetId());\n "
      },
      {
        "sha": "a5f32c784221f440e41228bf7d991add9d1d7486",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3339ba28e95aaaa355b7d33a69cffca7ab29b3fd/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3339ba28e95aaaa355b7d33a69cffca7ab29b3fd/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=3339ba28e95aaaa355b7d33a69cffca7ab29b3fd",
        "patch": "@@ -22,7 +22,7 @@ class PeerLogicValidation final : public CValidationInterface, public NetEventsI\n     CConnman* const connman;\n \n public:\n-    explicit PeerLogicValidation(CConnman* connman, CScheduler &scheduler);\n+    explicit PeerLogicValidation(CConnman* connman, CScheduler &scheduler, bool enable_bip61);\n \n     /**\n      * Overridden from CValidationInterface.\n@@ -65,6 +65,9 @@ class PeerLogicValidation final : public CValidationInterface, public NetEventsI\n \n private:\n     int64_t m_stale_tip_check_time; //! Next time to check for stale tip\n+\n+    /** Enable BIP61 (sending reject messages) */\n+    const bool m_enable_bip61;\n };\n \n struct CNodeStateStats {"
      },
      {
        "sha": "c4878ce462f75956561bb79eb6c68eb14f9ac3bc",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3339ba28e95aaaa355b7d33a69cffca7ab29b3fd/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3339ba28e95aaaa355b7d33a69cffca7ab29b3fd/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=3339ba28e95aaaa355b7d33a69cffca7ab29b3fd",
        "patch": "@@ -99,7 +99,7 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n             threadGroup.create_thread(&ThreadScriptCheck);\n         g_connman = std::unique_ptr<CConnman>(new CConnman(0x1337, 0x1337)); // Deterministic randomness for tests.\n         connman = g_connman.get();\n-        peerLogic.reset(new PeerLogicValidation(connman, scheduler));\n+        peerLogic.reset(new PeerLogicValidation(connman, scheduler, /*enable_bip61=*/true));\n }\n \n TestingSetup::~TestingSetup()"
      }
    ]
  }
]