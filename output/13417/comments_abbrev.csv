Empact,2018-06-07T21:00:43Z,4950ae2 could be a scripted-diff,https://github.com/bitcoin/bitcoin/pull/13417#issuecomment-395563408,395563408,
practicalswift,2018-06-07T21:59:01Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/13417#issuecomment-395578938,395578938,
DrahtBot,2018-06-08T17:20:38Z,"<!--e57a25ab6845829454e8d69fc972939a-->Note to reviewers: This pull request conflicts with the following ones:\n\n* #13423 ([net] Thread safety annotations in net_processing by skeees)\n* #13407 ([refactor, move-only-ish] Refactor mempool accept/reject logic by skeees)\n* #13298 (Net: Bucketing INV delays (1 bucket) for incoming connections to hide tx time by naumenkogs)\n* #13083 (Add compile tim",https://github.com/bitcoin/bitcoin/pull/13417#issuecomment-395828905,395828905,
skeees,2018-06-08T18:04:15Z,per reviewer feedback I'll reshape these commits to use more scripted-diffs,https://github.com/bitcoin/bitcoin/pull/13417#issuecomment-395841648,395841648,
Empact,2018-06-08T20:12:25Z,utACK c4d7d6c ,https://github.com/bitcoin/bitcoin/pull/13417#issuecomment-395876946,395876946,
sipa,2018-06-10T01:28:14Z,"I realize that C++ doesn't really have a concept of 'global' for variables; it has storage duration (static, automatic, dynamic) and linkage (internal and external). So the guidelines are confusing here.\n\nI would prefer to keep the `g_` prefix for all objects with static storage duration, regardless of linkage. It just means ""there is just one of these for the entire program"", whether or not i",https://github.com/bitcoin/bitcoin/pull/13417#issuecomment-396012310,396012310,
promag,2018-06-10T09:34:56Z,"What @sipa suggests is in line with @MarcoFalke suggestion (don't remember PR) and\n\n> I would prefer to keep the g_ prefix for all objects with static storage duration, regardless of linkage. It just means ""there is just one of these for the entire program"", whether or not it can accessed everywhere.\n\n:+1:",https://github.com/bitcoin/bitcoin/pull/13417#issuecomment-396034811,396034811,
skeees,2018-06-10T12:48:11Z,Per reviewer feedback I've dropped the commits that did the s/g_// rename,https://github.com/bitcoin/bitcoin/pull/13417#issuecomment-396046549,396046549,
DrahtBot,2018-06-12T16:51:14Z,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/13417#issuecomment-396659137,396659137,
jnewbery,2018-06-14T16:53:57Z,"This needs a trivial rebase.\n\nI've tested a rebased branch. Seems good.",https://github.com/bitcoin/bitcoin/pull/13417#issuecomment-397364726,397364726,
skeees,2018-06-14T17:00:13Z,Thanks. @jnewbery what commit did you rebase onto? I'll use the same to preserve the validity of your testing,https://github.com/bitcoin/bitcoin/pull/13417#issuecomment-397366570,397366570,
skeees,2018-06-19T17:30:14Z,@DrahtBot - rebased,https://github.com/bitcoin/bitcoin/pull/13417#issuecomment-398481000,398481000,
MarcoFalke,2018-06-19T23:10:55Z,"Concept ACK 6f7239437b5a61c33178d3e53641b8d2e1487f79 beside previous review comments.\n\nTagged with refactoring since this shouldn't change behavior.",https://github.com/bitcoin/bitcoin/pull/13417#issuecomment-398574115,398574115,
skeees,2018-06-20T19:20:42Z,"I personally disagree, but by popular demand the forward declarations are removed",https://github.com/bitcoin/bitcoin/pull/13417#issuecomment-398866221,398866221,
jnewbery,2018-06-20T20:23:31Z,Tested ACK a7fb7259dd53c37b1922a44de23abbb3b23129c6,https://github.com/bitcoin/bitcoin/pull/13417#issuecomment-398884386,398884386,
jnewbery,2018-06-20T21:39:03Z,"ACK 6690a28606d6ada23355de7d9a9878f841b21e67\n\nConfirm that the difference from a7fb725 is simply a code move.",https://github.com/bitcoin/bitcoin/pull/13417#issuecomment-398906150,398906150,
MarcoFalke,2018-06-21T18:59:06Z,utACK 6690a28606d6ada23355de7d9a9878f841b21e67 (Used `--ignore-all-space --color-moved=dimmed_zebra` options to `git diff`),https://github.com/bitcoin/bitcoin/pull/13417#issuecomment-399208792,399208792,
Empact,2018-07-10T04:36:14Z,"nit: some unrelated whitespace changes in 02bbc05\n\nutACK 3339ba2",https://github.com/bitcoin/bitcoin/pull/13417#issuecomment-403697605,403697605,
sipa,2018-07-13T22:36:04Z,utACK 3339ba28e95aaaa355b7d33a69cffca7ab29b3fd,https://github.com/bitcoin/bitcoin/pull/13417#issuecomment-404970641,404970641,
Empact,2018-06-07T20:59:15Z,`/**` is a doxygen trigger. Seems not needed for this and the below.,https://github.com/bitcoin/bitcoin/pull/13417#discussion_r193887444,193887444,src/net_processing.cpp
MarcoFalke,2018-06-07T21:22:20Z,"I know the developer notes don't clarify what ""global"" is, but unless you have a reason to remove the prefix, I'd suggest keeping it for now to make the diff smaller?",https://github.com/bitcoin/bitcoin/pull/13417#discussion_r193892987,193892987,src/net_processing.cpp
Empact,2018-06-07T21:33:20Z,This commit could also be broken into 1 minor move commit and one rename scripted-diff.,https://github.com/bitcoin/bitcoin/pull/13417#discussion_r193895546,193895546,src/net_processing.cpp
Empact,2018-06-08T20:10:47Z,It's a bit strange to forward-declare these methods when the references aren't to be used prior to the actual definition. Maybe comment each method instead?,https://github.com/bitcoin/bitcoin/pull/13417#discussion_r194168781,194168781,src/net_processing.cpp
promag,2018-06-10T09:36:49Z,"Commit ""[net] Tighten scope in net_processing""\n\nCould not include these changes.",https://github.com/bitcoin/bitcoin/pull/13417#discussion_r194251283,194251283,src/net_processing.cpp
jnewbery,2018-06-14T16:52:32Z,I agree that it seems a bit strange to forward-declare these functions here.,https://github.com/bitcoin/bitcoin/pull/13417#discussion_r195496500,195496500,src/net_processing.cpp
MarcoFalke,2018-06-19T23:09:37Z,Agree here as well. Could either just not mention it at all or add a comment in-line to each function?,https://github.com/bitcoin/bitcoin/pull/13417#discussion_r196606371,196606371,src/net_processing.cpp
skeees,2018-06-20T19:21:31Z,Now removed - only remaining forward declarations are the ones strictly necessary for compilation,https://github.com/bitcoin/bitcoin/pull/13417#discussion_r196912886,196912886,src/net_processing.cpp
MarcoFalke,2018-06-20T20:38:42Z,"Any reason to move this line (and the void functions below)? I'd prefer to preserve what git blame tells and keep the diff minimal.\n",https://github.com/bitcoin/bitcoin/pull/13417#discussion_r196934496,196934496,src/net_processing.cpp
skeees,2018-06-20T21:28:54Z,artefact of the previous forward declarations - moved back to original locations now,https://github.com/bitcoin/bitcoin/pull/13417#discussion_r196948763,196948763,src/net_processing.cpp
sipa,2018-06-22T02:36:31Z,"It seems strange to initialize a global inside an object's constructor. There could be multiple `PeerLogicValidation` objects, and each will re-initialize the global.",https://github.com/bitcoin/bitcoin/pull/13417#discussion_r197327190,197327190,src/net_processing.cpp
skeees,2018-06-22T03:17:28Z,"This is true, but:\n- this global is only ever read from either methods in `PeerLogic` or static functions called by peer logic methods\n- its value doesn't change post startup so if its  read more than once it will always have the same value, reinitializing it a couple times isn't really a performance issue either\n\nsome other options could be:\n- make it a member variable instead of a glob",https://github.com/bitcoin/bitcoin/pull/13417#discussion_r197331193,197331193,src/net_processing.cpp
laanwj,2018-07-09T17:51:46Z,"I agree this is strange, would also prefer initializing it somewhere outside the constructor OR making it an instance variable if possible.",https://github.com/bitcoin/bitcoin/pull/13417#discussion_r201091745,201091745,src/net_processing.cpp
skeees,2018-07-09T18:24:24Z,"There's no good place that's local to the file but also out of the `PeerLogicValidation` constructor (i don't think i call `GetBoolArg` safely in a static initializer)\n\nI think that making it an instance variable is the right way to go - but its going to substantially increase the size of this diff because there are a bunch of functions invoked from PeerLogicValidation that are static to net_p",https://github.com/bitcoin/bitcoin/pull/13417#discussion_r201101641,201101641,src/net_processing.cpp
skeees,2018-07-09T19:03:18Z,(here's roughly what that diff would look like: https://github.com/skeees/bitcoin/tree/net_processing-disentangle-yugediff),https://github.com/bitcoin/bitcoin/pull/13417#discussion_r201113237,201113237,src/net_processing.cpp
promag,2018-07-09T20:52:05Z,"@skeees not that big, LGTM. +1 to make it an instance variable.",https://github.com/bitcoin/bitcoin/pull/13417#discussion_r201143100,201143100,src/net_processing.cpp
Empact,2018-07-09T22:55:47Z,I'm also into this. +1,https://github.com/bitcoin/bitcoin/pull/13417#discussion_r201172667,201172667,src/net_processing.cpp
skeees,2018-07-10T01:29:29Z,"if you don't mind the larger review then ok! three +1s, PR updated",https://github.com/bitcoin/bitcoin/pull/13417#discussion_r201194524,201194524,src/net_processing.cpp
