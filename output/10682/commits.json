[
  {
    "sha": "ca67ddf0b737b65fb2909b65ab15ecc000aca06a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYTY3ZGRmMGI3MzdiNjVmYjI5MDliNjVhYjE1ZWNjMDAwYWNhMDZh",
    "commit": {
      "author": {
        "name": "esneider",
        "email": "dariosn@gmail.com",
        "date": "2017-06-27T14:41:34Z"
      },
      "committer": {
        "name": "esneider",
        "email": "dariosn@gmail.com",
        "date": "2017-06-27T14:41:34Z"
      },
      "message": "Move the AreInputsStandard documentation next to its implementation",
      "tree": {
        "sha": "5a7c8a610cd2687f137664d5427f7b4c6e12071e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5a7c8a610cd2687f137664d5427f7b4c6e12071e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca67ddf0b737b65fb2909b65ab15ecc000aca06a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca67ddf0b737b65fb2909b65ab15ecc000aca06a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ca67ddf0b737b65fb2909b65ab15ecc000aca06a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca67ddf0b737b65fb2909b65ab15ecc000aca06a/comments",
    "author": {
      "login": "esneider",
      "id": 667132,
      "node_id": "MDQ6VXNlcjY2NzEzMg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/667132?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/esneider",
      "html_url": "https://github.com/esneider",
      "followers_url": "https://api.github.com/users/esneider/followers",
      "following_url": "https://api.github.com/users/esneider/following{/other_user}",
      "gists_url": "https://api.github.com/users/esneider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/esneider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/esneider/subscriptions",
      "organizations_url": "https://api.github.com/users/esneider/orgs",
      "repos_url": "https://api.github.com/users/esneider/repos",
      "events_url": "https://api.github.com/users/esneider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/esneider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "esneider",
      "id": 667132,
      "node_id": "MDQ6VXNlcjY2NzEzMg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/667132?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/esneider",
      "html_url": "https://github.com/esneider",
      "followers_url": "https://api.github.com/users/esneider/followers",
      "following_url": "https://api.github.com/users/esneider/following{/other_user}",
      "gists_url": "https://api.github.com/users/esneider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/esneider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/esneider/subscriptions",
      "organizations_url": "https://api.github.com/users/esneider/orgs",
      "repos_url": "https://api.github.com/users/esneider/repos",
      "events_url": "https://api.github.com/users/esneider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/esneider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7c87a9c748be7121a240d81f9a5c6c988be6ffcf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c87a9c748be7121a240d81f9a5c6c988be6ffcf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7c87a9c748be7121a240d81f9a5c6c988be6ffcf"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 16,
      "deletions": 17
    },
    "files": [
      {
        "sha": "68b5d48fbf03be5788a2e0bcfae9e40d0d67d028",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 17,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca67ddf0b737b65fb2909b65ab15ecc000aca06a/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca67ddf0b737b65fb2909b65ab15ecc000aca06a/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=ca67ddf0b737b65fb2909b65ab15ecc000aca06a",
        "patch": "@@ -52,23 +52,6 @@ bool IsDust(const CTxOut& txout, const CFeeRate& dustRelayFeeIn)\n     return (txout.nValue < GetDustThreshold(txout, dustRelayFeeIn));\n }\n \n-    /**\n-     * Check transaction inputs to mitigate two\n-     * potential denial-of-service attacks:\n-     * \n-     * 1. scriptSigs with extra data stuffed into them,\n-     *    not consumed by scriptPubKey (or P2SH script)\n-     * 2. P2SH scripts with a crazy number of expensive\n-     *    CHECKSIG/CHECKMULTISIG operations\n-     *\n-     * Why bother? To avoid denial-of-service attacks; an attacker\n-     * can submit a standard HASH... OP_EQUAL transaction,\n-     * which will get accepted into blocks. The redemption\n-     * script can be anything; an attacker could use a very\n-     * expensive-to-check-upon-redemption script like:\n-     *   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n-     */\n-\n bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType, const bool witnessEnabled)\n {\n     std::vector<std::vector<unsigned char> > vSolutions;\n@@ -158,6 +141,22 @@ bool IsStandardTx(const CTransaction& tx, std::string& reason, const bool witnes\n     return true;\n }\n \n+/**\n+ * Check transaction inputs to mitigate two\n+ * potential denial-of-service attacks:\n+ *\n+ * 1. scriptSigs with extra data stuffed into them,\n+ *    not consumed by scriptPubKey (or P2SH script)\n+ * 2. P2SH scripts with a crazy number of expensive\n+ *    CHECKSIG/CHECKMULTISIG operations\n+ *\n+ * Why bother? To avoid denial-of-service attacks; an attacker\n+ * can submit a standard HASH... OP_EQUAL transaction,\n+ * which will get accepted into blocks. The redemption\n+ * script can be anything; an attacker could use a very\n+ * expensive-to-check-upon-redemption script like:\n+ *   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n+ */\n bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n {\n     if (tx.IsCoinBase())"
      }
    ]
  }
]