[
  {
    "sha": "53c9fa9e6253ea89ba1057b35e018ad1a25fb97e",
    "node_id": "C_kwDOABII59oAKDUzYzlmYTllNjI1M2VhODliYTEwNTdiMzVlMDE4YWQxYTI1ZmI5N2U",
    "commit": {
      "author": {
        "name": "0xb10c",
        "email": "0xb10c@gmail.com",
        "date": "2021-10-18T11:19:13Z"
      },
      "committer": {
        "name": "0xb10c",
        "email": "0xb10c@gmail.com",
        "date": "2021-10-18T12:35:25Z"
      },
      "message": "tracing: drop block_connected hash.toString() arg\n\nThe tracepoint `validation:block_connected` was introduced in #22006.\nThe first argument was the hash of the connected block as a pointer\nto a C-like String. The last argument passed the hash of the\nconnected block as a pointer to 32 bytes. The hash was only passed as\nstring to allow `bpftrace` scripts to print the hash. It was\n(incorrectly) assumed that `bpftrace` cannot hex-format and print the\nblock hash given only the hash as bytes.\n\nThe block hash can be printed in `bpftrace` by calling\n`printf(\"%02x\")` for each byte of the hash in an `unroll () {...}`.\nBy starting from the last byte of the hash, it can be printed in\nbig-endian (the block-explorer format).\n\n```C\n  $p = $hash + 31;\n  unroll(32) {\n      $b = *(uint8*)$p;\n      printf(\"%02x\", $b);\n      $p -= 1;\n  }\n```\n\nSee also: https://github.com/bitcoin/bitcoin/pull/22902#discussion_r705176691\n\nThis is a breaking change to the block_connected tracepoint API, however\nthis tracepoint has not yet been included in a release.",
      "tree": {
        "sha": "1f2173e522663fe2d75eef91561ef63afebca55c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1f2173e522663fe2d75eef91561ef63afebca55c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/53c9fa9e6253ea89ba1057b35e018ad1a25fb97e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEDMuq/Xai7OLM0xQd4v/VsdiMqX0FAmFtag8ACgkQ4v/VsdiM\nqX3tFQ/8DBHLYu4fS4e6mKNF9HaAKky4MudoNb75ut53BAY49qsf0B6NylWcs30M\nKp5ugxQZkjN5RVzNn51tACUvNM29TGik/6jpFMQxfqrjHCGbbW3pTx1v2L0Bmx4i\nviCmS5m1ySSWvh3pVwwRGBieroe0Z8eUFLpipPcr1FJzElfK2K+qY+N0uQatkLtA\n4azHgzbU8H1kaY9yiNU9aBSofvJZ8OEeKkMSLI9BTT3PXxfl++2mpF8ujtZ6495C\njh1dLb6PJuFyyG/CGhfQGfM3jq/oiVgEIrRDPN3hxw+qNBk9tYu6oyM4+16GCgKY\nNoSNWNsW5nIjiweAdm7OgSUyS0lrBbS61/Q4VIle57KOYcK6WkFBYnzPNdG7IwhJ\nO0luPg6r9K+nGSYCnhC7WZ+jToOTkrhQZhvvRnLbrhkFLm4e5QNh3dTBgxwObv99\nZ41nDeBgprqxMl2ACn+KJotd2hLacsPmBMnq+fb6HOwLScXrvigJI4pdwb/tiVf6\n841cT7KFg29LUJ1tv+DXwRoWa6+ecXMf7ghTXPrLGtY+zt8Wf47UrMKaZd5ihn1d\nYFlrrOLFduc3Sq6ko5Xy2feuPYraFRW2KsvTasuVg8H2aqn9ck3+gqskz7g2Cusd\nTDCohZAZkTIWIrzqumXOJB4zVDXQzT0Fkotua0Cyhe8FymTrn6E=\n=gsw4\n-----END PGP SIGNATURE-----",
        "payload": "tree 1f2173e522663fe2d75eef91561ef63afebca55c\nparent 3bf40d06a22ee1c547d2924d109b8e185ddbf5ef\nauthor 0xb10c <0xb10c@gmail.com> 1634555953 +0200\ncommitter 0xb10c <0xb10c@gmail.com> 1634560525 +0200\n\ntracing: drop block_connected hash.toString() arg\n\nThe tracepoint `validation:block_connected` was introduced in #22006.\nThe first argument was the hash of the connected block as a pointer\nto a C-like String. The last argument passed the hash of the\nconnected block as a pointer to 32 bytes. The hash was only passed as\nstring to allow `bpftrace` scripts to print the hash. It was\n(incorrectly) assumed that `bpftrace` cannot hex-format and print the\nblock hash given only the hash as bytes.\n\nThe block hash can be printed in `bpftrace` by calling\n`printf(\"%02x\")` for each byte of the hash in an `unroll () {...}`.\nBy starting from the last byte of the hash, it can be printed in\nbig-endian (the block-explorer format).\n\n```C\n  $p = $hash + 31;\n  unroll(32) {\n      $b = *(uint8*)$p;\n      printf(\"%02x\", $b);\n      $p -= 1;\n  }\n```\n\nSee also: https://github.com/bitcoin/bitcoin/pull/22902#discussion_r705176691\n\nThis is a breaking change to the block_connected tracepoint API, however\nthis tracepoint has not yet been included in a release.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53c9fa9e6253ea89ba1057b35e018ad1a25fb97e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/53c9fa9e6253ea89ba1057b35e018ad1a25fb97e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53c9fa9e6253ea89ba1057b35e018ad1a25fb97e/comments",
    "author": {
      "login": "0xB10C",
      "id": 19157360,
      "node_id": "MDQ6VXNlcjE5MTU3MzYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xB10C",
      "html_url": "https://github.com/0xB10C",
      "followers_url": "https://api.github.com/users/0xB10C/followers",
      "following_url": "https://api.github.com/users/0xB10C/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xB10C/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
      "organizations_url": "https://api.github.com/users/0xB10C/orgs",
      "repos_url": "https://api.github.com/users/0xB10C/repos",
      "events_url": "https://api.github.com/users/0xB10C/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xB10C/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "0xB10C",
      "id": 19157360,
      "node_id": "MDQ6VXNlcjE5MTU3MzYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xB10C",
      "html_url": "https://github.com/0xB10C",
      "followers_url": "https://api.github.com/users/0xB10C/followers",
      "following_url": "https://api.github.com/users/0xB10C/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xB10C/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
      "organizations_url": "https://api.github.com/users/0xB10C/orgs",
      "repos_url": "https://api.github.com/users/0xB10C/repos",
      "events_url": "https://api.github.com/users/0xB10C/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xB10C/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3bf40d06a22ee1c547d2924d109b8e185ddbf5ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bf40d06a22ee1c547d2924d109b8e185ddbf5ef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3bf40d06a22ee1c547d2924d109b8e185ddbf5ef"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 19,
      "deletions": 26
    },
    "files": [
      {
        "sha": "1f93474fa040879ffe9dd5c7ffbe6e2b710c6585",
        "filename": "contrib/tracing/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53c9fa9e6253ea89ba1057b35e018ad1a25fb97e/contrib/tracing/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53c9fa9e6253ea89ba1057b35e018ad1a25fb97e/contrib/tracing/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/tracing/README.md?ref=53c9fa9e6253ea89ba1057b35e018ad1a25fb97e",
        "patch": "@@ -176,17 +176,12 @@ third acts as a duration threshold in milliseconds. When the `ConnectBlock()`\n function takes longer than the threshold, information about the block, is\n printed. For more details, see the header comment in the script.\n \n-By default, `bpftrace` limits strings to 64 bytes due to the limited stack size\n-in the kernel VM. Block hashes as zero-terminated hex strings are 65 bytes which\n-exceed the string limit. The string size limit can be set to 65 bytes with the\n-environment variable `BPFTRACE_STRLEN`.\n-\n The following command can be used to benchmark, for example, `ConnectBlock()`\n between height 20000 and 38000 on SigNet while logging all blocks that take\n longer than 25ms to connect.\n \n ```\n-$ BPFTRACE_STRLEN=65 bpftrace contrib/tracing/connectblock_benchmark.bt 20000 38000 25\n+$ bpftrace contrib/tracing/connectblock_benchmark.bt 20000 38000 25\n ```\n \n In a different terminal, starting Bitcoin Core in SigNet mode and with"
      },
      {
        "sha": "6e7a98ef076643ebdd8921facedb28d0d1149ebe",
        "filename": "contrib/tracing/connectblock_benchmark.bt",
        "status": "modified",
        "additions": 14,
        "deletions": 8,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53c9fa9e6253ea89ba1057b35e018ad1a25fb97e/contrib/tracing/connectblock_benchmark.bt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53c9fa9e6253ea89ba1057b35e018ad1a25fb97e/contrib/tracing/connectblock_benchmark.bt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/tracing/connectblock_benchmark.bt?ref=53c9fa9e6253ea89ba1057b35e018ad1a25fb97e",
        "patch": "@@ -4,11 +4,8 @@\n \n   USAGE:\n \n-  BPFTRACE_STRLEN=65 bpftrace contrib/tracing/connectblock_benchmark.bt <start height> <end height> <logging threshold in ms>\n+  bpftrace contrib/tracing/connectblock_benchmark.bt <start height> <end height> <logging threshold in ms>\n \n-  - The environment variable BPFTRACE_STRLEN needs to be set to 65 chars as\n-    strings are limited to 64 chars by default. Hex strings with Bitcoin block\n-    hashes are 64 hex chars + 1 null-termination char.\n   - <start height> sets the height at which the benchmark should start. Setting\n     the start height to 0 starts the benchmark immediately, even before the\n     first block is connected.\n@@ -23,15 +20,15 @@\n \n   EXAMPLES:\n \n-  BPFTRACE_STRLEN=65 bpftrace contrib/tracing/connectblock_benchmark.bt 300000 680000 1000\n+  bpftrace contrib/tracing/connectblock_benchmark.bt 300000 680000 1000\n \n   When run together 'bitcoind -reindex', this benchmarks the time it takes to\n   connect the blocks between height 300.000 and 680.000 (inclusive) and prints\n   details about all blocks that take longer than 1000ms to connect. Prints a\n   histogram with block connection times when the benchmark is finished.\n \n \n-  BPFTRACE_STRLEN=65 bpftrace contrib/tracing/connectblock_benchmark.bt 0 0 500\n+  bpftrace contrib/tracing/connectblock_benchmark.bt 0 0 500\n \n   When running together 'bitcoind', all newly connected blocks that\n   take longer than 500ms to connect are logged. A histogram with block\n@@ -107,14 +104,23 @@ usdt:./src/bitcoind:validation:block_connected /arg1 >= $1 && (arg1 <= $2 || $2\n */\n usdt:./src/bitcoind:validation:block_connected / (uint64) arg5 / 1000> $3 /\n {\n-  $hash_str = str(arg0);\n+  $hash = arg0;\n   $height = (int32) arg1;\n   $transactions = (uint64) arg2;\n   $inputs = (int32) arg3;\n   $sigops = (int64) arg4;\n   $duration = (int64) arg5;\n \n-  printf(\"Block %d (%s)  %4d tx  %5d ins  %5d sigops  took %4d ms\\n\", $height, $hash_str, $transactions, $inputs, $sigops, (uint64) $duration / 1000);\n+\n+  printf(\"Block %d (\", $height);\n+  /* Prints each byte of the block hash as hex in big-endian (the block-explorer format) */\n+  $p = $hash + 31;\n+  unroll(32) {\n+      $b = *(uint8*)$p;\n+      printf(\"%02x\", $b);\n+      $p -= 1;\n+  }\n+  printf(\")  %4d tx  %5d ins  %5d sigops  took %4d ms\\n\", $transactions, $inputs, $sigops, (uint64) $duration / 1000);\n }\n \n "
      },
      {
        "sha": "57104c43a0cdeea37a4dc4f02054fb09f66be2b1",
        "filename": "doc/tracing.md",
        "status": "modified",
        "additions": 1,
        "deletions": 8,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53c9fa9e6253ea89ba1057b35e018ad1a25fb97e/doc/tracing.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53c9fa9e6253ea89ba1057b35e018ad1a25fb97e/doc/tracing.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/tracing.md?ref=53c9fa9e6253ea89ba1057b35e018ad1a25fb97e",
        "patch": "@@ -101,19 +101,12 @@ Is called *after* a block is connected to the chain. Can, for example, be used\n to benchmark block connections together with `-reindex`.\n \n Arguments passed:\n-1. Block Header Hash as `pointer to C-style String` (64 characters)\n+1. Block Header Hash as `pointer to unsigned chars` (i.e. 32 bytes in little-endian)\n 2. Block Height as `int32`\n 3. Transactions in the Block as `uint64`\n 4. Inputs spend in the Block as `int32`\n 5. SigOps in the Block (excluding coinbase SigOps) `uint64`\n 6. Time it took to connect the Block in microseconds (\u00b5s) as `uint64`\n-7. Block Header Hash as `pointer to unsigned chars` (i.e. 32 bytes in little-endian)\n-\n-Note: The 7th argument can't be accessed by bpftrace and is purposefully chosen\n-to be the block header hash as bytes. See [bpftrace argument limit] for more\n-details.\n-\n-[bpftrace argument limit]: #bpftrace-argument-limit\n \n ## Adding tracepoints to Bitcoin Core\n "
      },
      {
        "sha": "78559a8ee62662985e6248408d1ba2e885ce7a97",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53c9fa9e6253ea89ba1057b35e018ad1a25fb97e/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53c9fa9e6253ea89ba1057b35e018ad1a25fb97e/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=53c9fa9e6253ea89ba1057b35e018ad1a25fb97e",
        "patch": "@@ -1877,14 +1877,13 @@ bool CChainState::ConnectBlock(const CBlock& block, BlockValidationState& state,\n     int64_t nTime5 = GetTimeMicros(); nTimeIndex += nTime5 - nTime4;\n     LogPrint(BCLog::BENCH, \"    - Index writing: %.2fms [%.2fs (%.2fms/blk)]\\n\", MILLI * (nTime5 - nTime4), nTimeIndex * MICRO, nTimeIndex * MILLI / nBlocksTotal);\n \n-    TRACE7(validation, block_connected,\n-        block.GetHash().ToString().c_str(),\n+    TRACE6(validation, block_connected,\n+        block.GetHash().data(),\n         pindex->nHeight,\n         block.vtx.size(),\n         nInputs,\n         nSigOpsCost,\n-        GetTimeMicros() - nTimeStart, // in microseconds (\u00b5s)\n-        block.GetHash().data()\n+        GetTimeMicros() - nTimeStart // in microseconds (\u00b5s)\n     );\n \n     return true;"
      }
    ]
  }
]