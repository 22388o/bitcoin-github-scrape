[
  {
    "sha": "5e155e69e2fe4eae832874868e9e82577d07e495",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZTE1NWU2OWUyZmU0ZWFlODMyODc0ODY4ZTllODI1NzdkMDdlNDk1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-08-09T21:40:17Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-08-12T18:52:32Z"
      },
      "message": "Drop support for getrawtransaction for confirmed tx without txindex",
      "tree": {
        "sha": "d4cbbf525f53da29dd4332bf5b32ef250ad7cb3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d4cbbf525f53da29dd4332bf5b32ef250ad7cb3f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5e155e69e2fe4eae832874868e9e82577d07e495",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e155e69e2fe4eae832874868e9e82577d07e495",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5e155e69e2fe4eae832874868e9e82577d07e495",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e155e69e2fe4eae832874868e9e82577d07e495/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "48bf8ff5b161e77079bf00a7a452b3f2fe511f84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48bf8ff5b161e77079bf00a7a452b3f2fe511f84",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/48bf8ff5b161e77079bf00a7a452b3f2fe511f84"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 20,
      "deletions": 31
    },
    "files": [
      {
        "sha": "8e307869a1bf54d2519ce8cfde6cb970815723d4",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e155e69e2fe4eae832874868e9e82577d07e495/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e155e69e2fe4eae832874868e9e82577d07e495/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=5e155e69e2fe4eae832874868e9e82577d07e495",
        "patch": "@@ -357,7 +357,7 @@ static bool rest_tx(HTTPRequest* req, const std::string& strURIPart)\n \n     CTransactionRef tx;\n     uint256 hashBlock = uint256();\n-    if (!GetTransaction(hash, tx, Params().GetConsensus(), hashBlock, true))\n+    if (!GetTransaction(hash, tx, Params().GetConsensus(), hashBlock))\n         return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n \n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION | RPCSerializationFlags());"
      },
      {
        "sha": "cd2b6aa2bd6c96a024cb2d32f4011d250fd6440c",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e155e69e2fe4eae832874868e9e82577d07e495/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e155e69e2fe4eae832874868e9e82577d07e495/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=5e155e69e2fe4eae832874868e9e82577d07e495",
        "patch": "@@ -1827,7 +1827,7 @@ static UniValue getblockstats(const JSONRPCRequest& request)\n             for (const CTxIn& in : tx->vin) {\n                 CTransactionRef tx_in;\n                 uint256 hashBlock;\n-                if (!GetTransaction(in.prevout.hash, tx_in, Params().GetConsensus(), hashBlock, false)) {\n+                if (!GetTransaction(in.prevout.hash, tx_in, Params().GetConsensus(), hashBlock)) {\n                     throw JSONRPCError(RPC_INTERNAL_ERROR, std::string(\"Unexpected internal error (tx index seems corrupt)\"));\n                 }\n "
      },
      {
        "sha": "591943594ae4cb967b8a006f9422d45f336f9454",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e155e69e2fe4eae832874868e9e82577d07e495/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e155e69e2fe4eae832874868e9e82577d07e495/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=5e155e69e2fe4eae832874868e9e82577d07e495",
        "patch": "@@ -74,7 +74,6 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n             \"is known, its hash can be provided even for nodes without -txindex. Note that if a blockhash is\\n\"\n             \"provided, only that block will be searched and if the transaction is in the mempool or other\\n\"\n             \"blocks, or if this node does not have the given block available, the transaction will not be found.\\n\"\n-            \"DEPRECATED: for now, it also works for transactions with unspent outputs.\\n\"\n \n             \"\\nReturn the raw transaction data.\\n\"\n             \"\\nIf verbose is 'true', returns an Object with information about 'txid'.\\n\"\n@@ -176,7 +175,7 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n \n     CTransactionRef tx;\n     uint256 hash_block;\n-    if (!GetTransaction(hash, tx, Params().GetConsensus(), hash_block, true, blockindex)) {\n+    if (!GetTransaction(hash, tx, Params().GetConsensus(), hash_block, blockindex)) {\n         std::string errmsg;\n         if (blockindex) {\n             if (!(blockindex->nStatus & BLOCK_HAVE_DATA)) {\n@@ -209,10 +208,8 @@ static UniValue gettxoutproof(const JSONRPCRequest& request)\n         throw std::runtime_error(\n             \"gettxoutproof [\\\"txid\\\",...] ( blockhash )\\n\"\n             \"\\nReturns a hex-encoded proof that \\\"txid\\\" was included in a block.\\n\"\n-            \"\\nNOTE: By default this function only works sometimes. This is when there is an\\n\"\n-            \"unspent output in the utxo for this transaction. To make it always work,\\n\"\n-            \"you need to maintain a transaction index, using the -txindex command line option or\\n\"\n-            \"specify the block in which the transaction is included manually (by blockhash).\\n\"\n+            \"\\nIf the transaction index is not enabled using the -txindex command, a blockhash\\n\"\n+            \"must be specified.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"txids\\\"       (string) A json array of txids to filter\\n\"\n             \"    [\\n\"\n@@ -271,7 +268,7 @@ static UniValue gettxoutproof(const JSONRPCRequest& request)\n     if (pblockindex == nullptr)\n     {\n         CTransactionRef tx;\n-        if (!GetTransaction(oneTxid, tx, Params().GetConsensus(), hashBlock, false) || hashBlock.IsNull())\n+        if (!GetTransaction(oneTxid, tx, Params().GetConsensus(), hashBlock) || hashBlock.IsNull())\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction not yet in block\");\n         pblockindex = LookupBlockIndex(hashBlock);\n         if (!pblockindex) {"
      },
      {
        "sha": "f6d188af6fedebb793781945c6f644214b4985f0",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 14,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e155e69e2fe4eae832874868e9e82577d07e495/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e155e69e2fe4eae832874868e9e82577d07e495/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=5e155e69e2fe4eae832874868e9e82577d07e495",
        "patch": "@@ -1003,13 +1003,11 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n  * Return transaction in txOut, and if it was found inside a block, its hash is placed in hashBlock.\n  * If blockIndex is provided, the transaction is fetched from the corresponding block.\n  */\n-bool GetTransaction(const uint256& hash, CTransactionRef& txOut, const Consensus::Params& consensusParams, uint256& hashBlock, bool fAllowSlow, CBlockIndex* blockIndex)\n+bool GetTransaction(const uint256& hash, CTransactionRef& txOut, const Consensus::Params& consensusParams, uint256& hashBlock, CBlockIndex* block_index)\n {\n-    CBlockIndex* pindexSlow = blockIndex;\n-\n     LOCK(cs_main);\n \n-    if (!blockIndex) {\n+    if (!block_index) {\n         CTransactionRef ptx = mempool.get(hash);\n         if (ptx) {\n             txOut = ptx;\n@@ -1019,20 +1017,13 @@ bool GetTransaction(const uint256& hash, CTransactionRef& txOut, const Consensus\n         if (g_txindex) {\n             return g_txindex->FindTx(hash, hashBlock, txOut);\n         }\n-\n-        if (fAllowSlow) { // use coin database to locate block that contains transaction, and scan it\n-            const Coin& coin = AccessByTxid(*pcoinsTip, hash);\n-            if (!coin.IsSpent()) pindexSlow = chainActive[coin.nHeight];\n-        }\n-    }\n-\n-    if (pindexSlow) {\n+    } else {\n         CBlock block;\n-        if (ReadBlockFromDisk(block, pindexSlow, consensusParams)) {\n+        if (ReadBlockFromDisk(block, block_index, consensusParams)) {\n             for (const auto& tx : block.vtx) {\n                 if (tx->GetHash() == hash) {\n                     txOut = tx;\n-                    hashBlock = pindexSlow->GetBlockHash();\n+                    hashBlock = block_index->GetBlockHash();\n                     return true;\n                 }\n             }"
      },
      {
        "sha": "c15d42fa7ede2a70a55470abe4248e4362cb94e1",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e155e69e2fe4eae832874868e9e82577d07e495/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e155e69e2fe4eae832874868e9e82577d07e495/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=5e155e69e2fe4eae832874868e9e82577d07e495",
        "patch": "@@ -265,7 +265,7 @@ void ThreadScriptCheck();\n /** Check whether we are doing an initial block download (synchronizing from disk or network) */\n bool IsInitialBlockDownload();\n /** Retrieve a transaction (from memory pool, or from disk, if possible) */\n-bool GetTransaction(const uint256& hash, CTransactionRef& tx, const Consensus::Params& params, uint256& hashBlock, bool fAllowSlow = false, CBlockIndex* blockIndex = nullptr);\n+bool GetTransaction(const uint256& hash, CTransactionRef& tx, const Consensus::Params& params, uint256& hashBlock, CBlockIndex* blockIndex = nullptr);\n /**\n  * Find the best known block, and make it the tip of the block chain\n  *"
      },
      {
        "sha": "5dd5f53cc699b64a9420fe2bd001d1cc134eba15",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e155e69e2fe4eae832874868e9e82577d07e495/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e155e69e2fe4eae832874868e9e82577d07e495/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=5e155e69e2fe4eae832874868e9e82577d07e495",
        "patch": "@@ -42,9 +42,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n         # This test tests SegWit both pre and post-activation, so use the normal BIP9 activation.\n-        self.extra_args = [[\"-rpcserialversion=0\", \"-vbparams=segwit:0:999999999999\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\"],\n-                           [\"-blockversion=4\", \"-rpcserialversion=1\", \"-vbparams=segwit:0:999999999999\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\"],\n-                           [\"-blockversion=536870915\", \"-vbparams=segwit:0:999999999999\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\"]]\n+        self.extra_args = [[\"-rpcserialversion=0\", \"-vbparams=segwit:0:999999999999\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\", \"-txindex\"],\n+                           [\"-blockversion=4\", \"-rpcserialversion=1\", \"-vbparams=segwit:0:999999999999\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\", \"-txindex\"],\n+                           [\"-blockversion=536870915\", \"-vbparams=segwit:0:999999999999\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\", \"-txindex\"]]\n \n     def setup_network(self):\n         super().setup_network()"
      },
      {
        "sha": "8e5ea75bb445e2b447d95f4af4e22b4d830e0762",
        "filename": "test/functional/interface_rest.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e155e69e2fe4eae832874868e9e82577d07e495/test/functional/interface_rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e155e69e2fe4eae832874868e9e82577d07e495/test/functional/interface_rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rest.py?ref=5e155e69e2fe4eae832874868e9e82577d07e495",
        "patch": "@@ -41,7 +41,7 @@ class RESTTest (BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n-        self.extra_args = [[\"-rest\"], []]\n+        self.extra_args = [[\"-rest\", \"-txindex\"], []]\n \n     def test_rest_request(self, uri, http_method='GET', req_type=ReqType.JSON, body='', status=200, ret_type=RetType.JSON):\n         rest_uri = '/rest' + uri"
      },
      {
        "sha": "1b600733a4e190b5c7ccc17821fb44bb70ca9fe1",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e155e69e2fe4eae832874868e9e82577d07e495/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e155e69e2fe4eae832874868e9e82577d07e495/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=5e155e69e2fe4eae832874868e9e82577d07e495",
        "patch": "@@ -14,6 +14,7 @@ class PSBTTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = False\n         self.num_nodes = 3\n+        self.extra_args = [[], [\"-txindex\"], [\"-txindex\"]]\n \n     def run_test(self):\n         # Create and fund a raw tx for sending 10 BTC"
      },
      {
        "sha": "fb11036d1c3701c761e14a3136656fab32a7d130",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e155e69e2fe4eae832874868e9e82577d07e495/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e155e69e2fe4eae832874868e9e82577d07e495/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=5e155e69e2fe4eae832874868e9e82577d07e495",
        "patch": "@@ -41,7 +41,7 @@ class RawTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n-        self.extra_args = [[\"-addresstype=legacy\"], [\"-addresstype=legacy\"], [\"-addresstype=legacy\"]]\n+        self.extra_args = [[\"-addresstype=legacy\", \"-txindex\"], [\"-addresstype=legacy\", \"-txindex\"], [\"-addresstype=legacy\", \"-txindex\"]]\n \n     def setup_network(self, split=False):\n         super().setup_network()"
      },
      {
        "sha": "f718a1206a84caa3433ced2678e95b9b4b6c8015",
        "filename": "test/functional/wallet_abandonconflict.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e155e69e2fe4eae832874868e9e82577d07e495/test/functional/wallet_abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e155e69e2fe4eae832874868e9e82577d07e495/test/functional/wallet_abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_abandonconflict.py?ref=5e155e69e2fe4eae832874868e9e82577d07e495",
        "patch": "@@ -17,7 +17,7 @@\n class AbandonConflictTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n-        self.extra_args = [[\"-minrelaytxfee=0.00001\"], []]\n+        self.extra_args = [[\"-minrelaytxfee=0.00001\", \"-txindex\"], []]\n \n     def run_test(self):\n         self.nodes[1].generate(100)"
      },
      {
        "sha": "356dccac50d9d5fc373997ebe69c3122437f7a62",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e155e69e2fe4eae832874868e9e82577d07e495/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e155e69e2fe4eae832874868e9e82577d07e495/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=5e155e69e2fe4eae832874868e9e82577d07e495",
        "patch": "@@ -27,7 +27,7 @@ def setup_network(self):\n         self.add_nodes(4)\n         self.start_node(0)\n         self.start_node(1)\n-        self.start_node(2)\n+        self.start_node(2, [\"-txindex\"])\n         connect_nodes_bi(self.nodes, 0, 1)\n         connect_nodes_bi(self.nodes, 1, 2)\n         connect_nodes_bi(self.nodes, 0, 2)"
      }
    ]
  }
]