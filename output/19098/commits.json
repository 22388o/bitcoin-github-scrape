[
  {
    "sha": "edc316020e8270dafc5e31465d532baebdafd3dd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZGMzMTYwMjBlODI3MGRhZmM1ZTMxNDY1ZDUzMmJhZWJkYWZkM2Rk",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-05-28T20:35:15Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-07-13T08:34:27Z"
      },
      "message": "test: Remove duplicate NodeContext hacks\n\nQt tests currently are currently using two NodeContext structs at the same\ntime, one in interfaces::NodeImpl::m_context, and the other in\nBasicTestingSetup::m_node, and the tests have hacks transferring state between\nthem.\n\nFix this by getting rid of the NodeImpl::m_context struct and making it a\npointer. This way a common BitcoinApplication object can be used for all qt\ntests, but they can still have their own testing setups.\n\nNon-test code is changing but non-test behavior is still the same as before.\n\nMotivation for this PR is to be able to remove the\n\"std::move(test.m_node.connman)\" and mempool hacks for swapping individual\nNodeContext members in Qt tests, because followup PR #19099 adds yet another\nmember (wallet_client) that needs to be swapped. After this change, the whole\nNodeContext struct can be swapped instead of individual members, so the\nworkarounds are less fragile and invasive.",
      "tree": {
        "sha": "184b66559d810a0e84ee81146e921d5450cad298",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/184b66559d810a0e84ee81146e921d5450cad298"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/edc316020e8270dafc5e31465d532baebdafd3dd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/edc316020e8270dafc5e31465d532baebdafd3dd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/edc316020e8270dafc5e31465d532baebdafd3dd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/edc316020e8270dafc5e31465d532baebdafd3dd/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d52bfc49161721fd55b9312549b3da674da387fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d52bfc49161721fd55b9312549b3da674da387fe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d52bfc49161721fd55b9312549b3da674da387fe"
      }
    ],
    "stats": {
      "total": 96,
      "additions": 58,
      "deletions": 38
    },
    "files": [
      {
        "sha": "8468a41f2ad49ce9879f0aa1620aa16a666f0461",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 32,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/edc316020e8270dafc5e31465d532baebdafd3dd/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/edc316020e8270dafc5e31465d532baebdafd3dd/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=edc316020e8270dafc5e31465d532baebdafd3dd",
        "patch": "@@ -56,6 +56,7 @@ namespace {\n class NodeImpl : public Node\n {\n public:\n+    NodeImpl(NodeContext* context) { setContext(context); }\n     void initError(const bilingual_str& message) override { InitError(message); }\n     bool parseParameters(int argc, const char* const argv[], std::string& error) override\n     {\n@@ -80,13 +81,13 @@ class NodeImpl : public Node\n     }\n     bool appInitMain() override\n     {\n-        m_context.chain = MakeChain(m_context);\n-        return AppInitMain(m_context_ref, m_context);\n+        m_context->chain = MakeChain(*m_context);\n+        return AppInitMain(m_context_ref, *m_context);\n     }\n     void appShutdown() override\n     {\n-        Interrupt(m_context);\n-        Shutdown(m_context);\n+        Interrupt(*m_context);\n+        Shutdown(*m_context);\n     }\n     void startShutdown() override\n     {\n@@ -107,19 +108,19 @@ class NodeImpl : public Node\n             StopMapPort();\n         }\n     }\n-    void setupServerArgs() override { return SetupServerArgs(m_context); }\n+    void setupServerArgs() override { return SetupServerArgs(*m_context); }\n     bool getProxy(Network net, proxyType& proxy_info) override { return GetProxy(net, proxy_info); }\n     size_t getNodeCount(CConnman::NumConnections flags) override\n     {\n-        return m_context.connman ? m_context.connman->GetNodeCount(flags) : 0;\n+        return m_context->connman ? m_context->connman->GetNodeCount(flags) : 0;\n     }\n     bool getNodesStats(NodesStats& stats) override\n     {\n         stats.clear();\n \n-        if (m_context.connman) {\n+        if (m_context->connman) {\n             std::vector<CNodeStats> stats_temp;\n-            m_context.connman->GetNodeStats(stats_temp);\n+            m_context->connman->GetNodeStats(stats_temp);\n \n             stats.reserve(stats_temp.size());\n             for (auto& node_stats_temp : stats_temp) {\n@@ -140,46 +141,46 @@ class NodeImpl : public Node\n     }\n     bool getBanned(banmap_t& banmap) override\n     {\n-        if (m_context.banman) {\n-            m_context.banman->GetBanned(banmap);\n+        if (m_context->banman) {\n+            m_context->banman->GetBanned(banmap);\n             return true;\n         }\n         return false;\n     }\n     bool ban(const CNetAddr& net_addr, int64_t ban_time_offset) override\n     {\n-        if (m_context.banman) {\n-            m_context.banman->Ban(net_addr, ban_time_offset);\n+        if (m_context->banman) {\n+            m_context->banman->Ban(net_addr, ban_time_offset);\n             return true;\n         }\n         return false;\n     }\n     bool unban(const CSubNet& ip) override\n     {\n-        if (m_context.banman) {\n-            m_context.banman->Unban(ip);\n+        if (m_context->banman) {\n+            m_context->banman->Unban(ip);\n             return true;\n         }\n         return false;\n     }\n     bool disconnectByAddress(const CNetAddr& net_addr) override\n     {\n-        if (m_context.connman) {\n-            return m_context.connman->DisconnectNode(net_addr);\n+        if (m_context->connman) {\n+            return m_context->connman->DisconnectNode(net_addr);\n         }\n         return false;\n     }\n     bool disconnectById(NodeId id) override\n     {\n-        if (m_context.connman) {\n-            return m_context.connman->DisconnectNode(id);\n+        if (m_context->connman) {\n+            return m_context->connman->DisconnectNode(id);\n         }\n         return false;\n     }\n-    int64_t getTotalBytesRecv() override { return m_context.connman ? m_context.connman->GetTotalBytesRecv() : 0; }\n-    int64_t getTotalBytesSent() override { return m_context.connman ? m_context.connman->GetTotalBytesSent() : 0; }\n-    size_t getMempoolSize() override { return m_context.mempool ? m_context.mempool->size() : 0; }\n-    size_t getMempoolDynamicUsage() override { return m_context.mempool ? m_context.mempool->DynamicMemoryUsage() : 0; }\n+    int64_t getTotalBytesRecv() override { return m_context->connman ? m_context->connman->GetTotalBytesRecv() : 0; }\n+    int64_t getTotalBytesSent() override { return m_context->connman ? m_context->connman->GetTotalBytesSent() : 0; }\n+    size_t getMempoolSize() override { return m_context->mempool ? m_context->mempool->size() : 0; }\n+    size_t getMempoolDynamicUsage() override { return m_context->mempool ? m_context->mempool->DynamicMemoryUsage() : 0; }\n     bool getHeaderTip(int& height, int64_t& block_time) override\n     {\n         LOCK(::cs_main);\n@@ -222,11 +223,11 @@ class NodeImpl : public Node\n     bool getImporting() override { return ::fImporting; }\n     void setNetworkActive(bool active) override\n     {\n-        if (m_context.connman) {\n-            m_context.connman->SetNetworkActive(active);\n+        if (m_context->connman) {\n+            m_context->connman->SetNetworkActive(active);\n         }\n     }\n-    bool getNetworkActive() override { return m_context.connman && m_context.connman->GetNetworkActive(); }\n+    bool getNetworkActive() override { return m_context->connman && m_context->connman->GetNetworkActive(); }\n     CFeeRate estimateSmartFee(int num_blocks, bool conservative, int* returned_target = nullptr) override\n     {\n         FeeCalculation fee_calc;\n@@ -268,20 +269,20 @@ class NodeImpl : public Node\n     std::vector<std::unique_ptr<Wallet>> getWallets() override\n     {\n         std::vector<std::unique_ptr<Wallet>> wallets;\n-        for (auto& client : m_context.chain_clients) {\n+        for (auto& client : m_context->chain_clients) {\n             auto client_wallets = client->getWallets();\n             std::move(client_wallets.begin(), client_wallets.end(), std::back_inserter(wallets));\n         }\n         return wallets;\n     }\n     std::unique_ptr<Wallet> loadWallet(const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings) override\n     {\n-        return MakeWallet(LoadWallet(*m_context.chain, name, error, warnings));\n+        return MakeWallet(LoadWallet(*m_context->chain, name, error, warnings));\n     }\n     std::unique_ptr<Wallet> createWallet(const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings, WalletCreationStatus& status) override\n     {\n         std::shared_ptr<CWallet> wallet;\n-        status = CreateWallet(*m_context.chain, passphrase, wallet_creation_flags, name, error, warnings, wallet);\n+        status = CreateWallet(*m_context->chain, passphrase, wallet_creation_flags, name, error, warnings, wallet);\n         return MakeWallet(wallet);\n     }\n     std::unique_ptr<Handler> handleInitMessage(InitMessageFn fn) override\n@@ -335,13 +336,22 @@ class NodeImpl : public Node\n                     /* verification progress is unused when a header was received */ 0);\n             }));\n     }\n-    NodeContext* context() override { return &m_context; }\n-    NodeContext m_context;\n-    util::Ref m_context_ref{m_context};\n+    NodeContext* context() override { return m_context; }\n+    void setContext(NodeContext* context) override\n+    {\n+        m_context = context;\n+        if (context) {\n+            m_context_ref.Set(*context);\n+        } else {\n+            m_context_ref.Clear();\n+        }\n+    }\n+    NodeContext* m_context{nullptr};\n+    util::Ref m_context_ref;\n };\n \n } // namespace\n \n-std::unique_ptr<Node> MakeNode() { return MakeUnique<NodeImpl>(); }\n+std::unique_ptr<Node> MakeNode(NodeContext* context) { return MakeUnique<NodeImpl>(context); }\n \n } // namespace interfaces"
      },
      {
        "sha": "491795b072dff58af04d81ff0b6a04fcaed3d78f",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/edc316020e8270dafc5e31465d532baebdafd3dd/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/edc316020e8270dafc5e31465d532baebdafd3dd/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=edc316020e8270dafc5e31465d532baebdafd3dd",
        "patch": "@@ -263,12 +263,14 @@ class Node\n         std::function<void(SynchronizationState, interfaces::BlockTip tip, double verification_progress)>;\n     virtual std::unique_ptr<Handler> handleNotifyHeaderTip(NotifyHeaderTipFn fn) = 0;\n \n-    //! Return pointer to internal chain interface, useful for testing.\n+    //! Get and set internal node context. Useful for testing, but not\n+    //! accessible across processes.\n     virtual NodeContext* context() { return nullptr; }\n+    virtual void setContext(NodeContext* context) { }\n };\n \n //! Return implementation of Node interface.\n-std::unique_ptr<Node> MakeNode();\n+std::unique_ptr<Node> MakeNode(NodeContext* context = nullptr);\n \n //! Block tip (could be a header or not, depends on the subscribed signal).\n struct BlockTip {"
      },
      {
        "sha": "25d88c5f81f13432f2f3a75d49f6d1acd1891553",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/edc316020e8270dafc5e31465d532baebdafd3dd/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/edc316020e8270dafc5e31465d532baebdafd3dd/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=edc316020e8270dafc5e31465d532baebdafd3dd",
        "patch": "@@ -29,6 +29,7 @@\n \n #include <interfaces/handler.h>\n #include <interfaces/node.h>\n+#include <node/context.h>\n #include <noui.h>\n #include <uint256.h>\n #include <util/system.h>\n@@ -430,7 +431,8 @@ int GuiMain(int argc, char* argv[])\n     SetupEnvironment();\n     util::ThreadSetInternalName(\"main\");\n \n-    std::unique_ptr<interfaces::Node> node = interfaces::MakeNode();\n+    NodeContext node_context;\n+    std::unique_ptr<interfaces::Node> node = interfaces::MakeNode(&node_context);\n \n     // Subscribe to global signals from core\n     std::unique_ptr<interfaces::Handler> handler_message_box = node->handleMessageBox(noui_ThreadSafeMessageBox);"
      },
      {
        "sha": "035c8196bc3536e0a8344480c21358e89de475ad",
        "filename": "src/qt/test/addressbooktests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/edc316020e8270dafc5e31465d532baebdafd3dd/src/qt/test/addressbooktests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/edc316020e8270dafc5e31465d532baebdafd3dd/src/qt/test/addressbooktests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/addressbooktests.cpp?ref=edc316020e8270dafc5e31465d532baebdafd3dd",
        "patch": "@@ -18,6 +18,7 @@\n #include <key.h>\n #include <key_io.h>\n #include <wallet/wallet.h>\n+#include <walletinitinterface.h>\n \n #include <QApplication>\n #include <QTimer>\n@@ -59,6 +60,7 @@ void EditAddressAndSubmit(\n void TestAddAddressesToSendBook(interfaces::Node& node)\n {\n     TestChain100Setup test;\n+    node.setContext(&test.m_node);\n     std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(node.context()->chain.get(), WalletLocation(), CreateMockWalletDatabase());\n     wallet->SetupLegacyScriptPubKeyMan();\n     bool firstRun;"
      },
      {
        "sha": "031913bd0262614d7a14afa037a97ed2b8b6c150",
        "filename": "src/qt/test/test_main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/edc316020e8270dafc5e31465d532baebdafd3dd/src/qt/test/test_main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/edc316020e8270dafc5e31465d532baebdafd3dd/src/qt/test/test_main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/test_main.cpp?ref=edc316020e8270dafc5e31465d532baebdafd3dd",
        "patch": "@@ -52,7 +52,8 @@ int main(int argc, char* argv[])\n         BasicTestingSetup dummy{CBaseChainParams::REGTEST};\n     }\n \n-    std::unique_ptr<interfaces::Node> node = interfaces::MakeNode();\n+    NodeContext node_context;\n+    std::unique_ptr<interfaces::Node> node = interfaces::MakeNode(&node_context);\n \n     bool fInvalid = false;\n "
      },
      {
        "sha": "475fd589af1a614ec179f2fcc33355c67b3e93ba",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/edc316020e8270dafc5e31465d532baebdafd3dd/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/edc316020e8270dafc5e31465d532baebdafd3dd/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=edc316020e8270dafc5e31465d532baebdafd3dd",
        "patch": "@@ -138,8 +138,7 @@ void TestGUI(interfaces::Node& node)\n     for (int i = 0; i < 5; ++i) {\n         test.CreateAndProcessBlock({}, GetScriptForRawPubKey(test.coinbaseKey.GetPubKey()));\n     }\n-    node.context()->connman = std::move(test.m_node.connman);\n-    node.context()->mempool = std::move(test.m_node.mempool);\n+    node.setContext(&test.m_node);\n     std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(node.context()->chain.get(), WalletLocation(), CreateMockWalletDatabase());\n     bool firstRun;\n     wallet->LoadWallet(firstRun);"
      },
      {
        "sha": "0fc20d36bd9d66fa9115ff414ee72158bacc1ac4",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/edc316020e8270dafc5e31465d532baebdafd3dd/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/edc316020e8270dafc5e31465d532baebdafd3dd/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=edc316020e8270dafc5e31465d532baebdafd3dd",
        "patch": "@@ -11,6 +11,7 @@\n #include <consensus/validation.h>\n #include <crypto/sha256.h>\n #include <init.h>\n+#include <interfaces/chain.h>\n #include <miner.h>\n #include <net.h>\n #include <net_processing.h>\n@@ -32,6 +33,7 @@\n #include <util/vector.h>\n #include <validation.h>\n #include <validationinterface.h>\n+#include <walletinitinterface.h>\n \n #include <functional>\n \n@@ -104,6 +106,8 @@ BasicTestingSetup::BasicTestingSetup(const std::string& chainName, const std::ve\n     SetupNetworking();\n     InitSignatureCache();\n     InitScriptExecutionCache();\n+    m_node.chain = interfaces::MakeChain(m_node);\n+    g_wallet_init_interface.Construct(m_node);\n     fCheckBlockIndex = true;\n     static bool noui_connected = false;\n     if (!noui_connected) {"
      }
    ]
  }
]