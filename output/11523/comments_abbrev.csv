JeremyRubin,2017-10-19T02:00:02Z,"@promag Thanks for the review!\n\nI like your suggestion returning the class and calling modifiers on it -- not a fan of the use of default arguments -- but I think that it adds a bit more complexity to this patch that I'd like to avoid because I think that it makes it more difficult for future PRs working to separate this interface further.\n\nThe reason why I didn't do an `operator bool` is ",https://github.com/bitcoin/bitcoin/pull/11523#issuecomment-337777657,337777657,
Sjors,2017-10-20T11:00:01Z,"Thanks, `state.BadTx` instead of `state.DoS` and `DoS_SEVERITY::MEDIUM` instead of `10` made things more readable to me.",https://github.com/bitcoin/bitcoin/pull/11523#issuecomment-338175361,338175361,
Empact,2018-02-07T07:43:17Z,"My 2 cents, just ideas and opinions:\n* Returning false everywhere is duplicative. Imo returning from DoS as before is better as those extra lines have cost.\n* The CorruptionPossible enum/bool seems like a smell to me - if an enum is playing the role of a bool, why not a bool? If a bool isn’t clear, why not another construct?\n* I like the severity level enum\n* I don’t like that the severity",https://github.com/bitcoin/bitcoin/pull/11523#issuecomment-363683546,363683546,
dcousens,2018-02-07T20:50:48Z,concept ACK,https://github.com/bitcoin/bitcoin/pull/11523#issuecomment-363906093,363906093,
JeremyRubin,2018-02-08T01:47:36Z,"@Empact, thanks for the review. \n\nThe motivation for the code changes I made is that the DoS code should eventually be *completely* relegated to a net_processing construct, whereas the _validity_ code should be handled in the validation. So the goal is to make the code in validation.h as abstract as possible and descriptive of what went wrong, providing a reason, rather than ascribing a Denial",https://github.com/bitcoin/bitcoin/pull/11523#issuecomment-363975268,363975268,
Empact,2018-02-08T21:32:16Z,"Fair enough. For severity levels, if you're indifferent I'd default to maintaining consistency with the prior behavior, which is using them as the leading param.",https://github.com/bitcoin/bitcoin/pull/11523#issuecomment-364255054,364255054,
JeremyRubin,2018-02-09T01:38:06Z,"Hmm... now that I've thought about it a bit again, I think there is value to having it be last... because with the current API we're focusing on describing what happened, not how we should treat it for DoS. Eventually, the severity param could be completely dropped, because in validity there is only a notion of valid or invalid, and not 'how invalid' something was.",https://github.com/bitcoin/bitcoin/pull/11523#issuecomment-364308104,364308104,
fanquake,2018-04-26T12:56:07Z,"Given that this conflicts quite heavily with #11639 (which is currently getting lots of review) and needs rebasing, I'm going to close for now. It can be re-opened/reviewed once (presumably) #11639 has been merged.",https://github.com/bitcoin/bitcoin/pull/11523#issuecomment-384631121,384631121,
JeremyRubin,2018-04-27T01:51:48Z,":+1: \n\nI chatted with Matt out of band a bit ago and agree with waiting on #11639.",https://github.com/bitcoin/bitcoin/pull/11523#issuecomment-384839750,384839750,
promag,2017-10-19T01:15:58Z,`enum class DoSSeverity`,https://github.com/bitcoin/bitcoin/pull/11523#discussion_r145581071,145581071,src/consensus/validation.h
promag,2017-10-19T01:26:32Z,"You could overload `BadTx` (and others too) to avoid the empty string:\n```cpp\nvoid BadTx(const std::string& reject_reason, const std::string& debug_message="""", DoSSeverity level=DoSSeverity::CRITICAL, unsigned int reject_code=REJECT_INVALID);\nvoid BadTx(const std::string& reject_reason, DoSSeverity level=DoSSeverity::CRITICAL, unsigned int reject_code=REJECT_INVALID);\n```\nNit: also note ",https://github.com/bitcoin/bitcoin/pull/11523#discussion_r145582166,145582166,src/consensus/tx_verify.cpp
ajtowns,2017-10-19T04:19:23Z,"Each of CorruptBlockHeader, BadBlock, CorruptBlock, CorruptTx and NonStandardTx have all their callers leave level as the default, so it could be dropped as a parameter and hardcoded.",https://github.com/bitcoin/bitcoin/pull/11523#discussion_r145597451,145597451,src/consensus/validation.h
ajtowns,2017-10-19T04:20:13Z,"None of the calls to DuplicateData make use of strDebugMessage, so it could also be dropped as a param and hardcoded.",https://github.com/bitcoin/bitcoin/pull/11523#discussion_r145597523,145597523,src/consensus/validation.h
ajtowns,2017-10-19T05:00:33Z,Nit: old indentation of strprintf() args was easiers to follow...,https://github.com/bitcoin/bitcoin/pull/11523#discussion_r145600489,145600489,src/validation.cpp
ajtowns,2017-10-19T05:10:46Z,Would have expected this to be CorruptBlock?,https://github.com/bitcoin/bitcoin/pull/11523#discussion_r145601215,145601215,src/validation.cpp
ajtowns,2017-10-19T05:15:03Z,"Could use a comment noting ""state filled in by CheckTransaction"" as per AcceptToMemoryPoolWorker",https://github.com/bitcoin/bitcoin/pull/11523#discussion_r145601521,145601521,src/validation.cpp
ajtowns,2017-10-19T05:24:36Z,Shouldn't this be BadBlock? I don't see how'd you reach it without hitting a BadTx first though...,https://github.com/bitcoin/bitcoin/pull/11523#discussion_r145602247,145602247,src/validation.cpp
ajtowns,2017-10-19T05:32:22Z,Nit: space after paren,https://github.com/bitcoin/bitcoin/pull/11523#discussion_r145602925,145602925,src/validation.cpp
