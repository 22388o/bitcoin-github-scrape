[
  {
    "sha": "ced81907f702134d9334fcfb6373eb63211c5db9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZWQ4MTkwN2Y3MDIxMzRkOTMzNGZjZmI2MzczZWI2MzIxMWM1ZGI5",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-18T22:45:51Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-20T01:50:02Z"
      },
      "message": "net: split socket creation out of connection",
      "tree": {
        "sha": "696dc5eb89e591b9a4524d0166caa5a2dae6e0c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/696dc5eb89e591b9a4524d0166caa5a2dae6e0c5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ced81907f702134d9334fcfb6373eb63211c5db9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ced81907f702134d9334fcfb6373eb63211c5db9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ced81907f702134d9334fcfb6373eb63211c5db9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ced81907f702134d9334fcfb6373eb63211c5db9/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b887676e1b86ce03181b5876cf6203d617750d0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b887676e1b86ce03181b5876cf6203d617750d0a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b887676e1b86ce03181b5876cf6203d617750d0a"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 38,
      "deletions": 11
    },
    "files": [
      {
        "sha": "2ecafe5219691f2548be7e226e615bb213c651ce",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ced81907f702134d9334fcfb6373eb63211c5db9/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ced81907f702134d9334fcfb6373eb63211c5db9/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=ced81907f702134d9334fcfb6373eb63211c5db9",
        "patch": "@@ -412,16 +412,27 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n     if (addrConnect.IsValid()) {\n         bool proxyConnectionFailed = false;\n \n-        if (GetProxy(addrConnect.GetNetwork(), proxy))\n+        if (GetProxy(addrConnect.GetNetwork(), proxy)) {\n+            if (!CreateSocket(proxy.proxy, hSocket)) {\n+                return nullptr;\n+            }\n             connected = ConnectThroughProxy(proxy, addrConnect.ToStringIP(), addrConnect.GetPort(), hSocket, nConnectTimeout, &proxyConnectionFailed);\n-        else // no proxy needed (none set for target network)\n+        } else {\n+            // no proxy needed (none set for target network)\n+            if (!CreateSocket(addrConnect, hSocket)) {\n+                return nullptr;\n+            }\n             connected = ConnectSocketDirectly(addrConnect, hSocket, nConnectTimeout);\n+        }\n         if (!proxyConnectionFailed) {\n             // If a connection to the node was attempted, and failure (if any) is not caused by a problem connecting to\n             // the proxy, mark this as an attempt.\n             addrman.Attempt(addrConnect, fCountFailure);\n         }\n     } else if (pszDest && GetNameProxy(proxy)) {\n+        if (!CreateSocket(proxy.proxy, hSocket)) {\n+            return nullptr;\n+        }\n         std::string host;\n         int port = default_port;\n         SplitHostPort(std::string(pszDest), port, host);"
      },
      {
        "sha": "4b728267466946c6997d6ce9c3189024fac199a6",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 9,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ced81907f702134d9334fcfb6373eb63211c5db9/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ced81907f702134d9334fcfb6373eb63211c5db9/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=ced81907f702134d9334fcfb6373eb63211c5db9",
        "patch": "@@ -399,7 +399,7 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n     return true;\n }\n \n-bool ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRet, int nTimeout)\n+bool CreateSocket(const CService &addrConnect, SOCKET& hSocketRet)\n {\n     hSocketRet = INVALID_SOCKET;\n \n@@ -428,7 +428,23 @@ bool ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRet, int\n         CloseSocket(hSocket);\n         return error(\"ConnectSocketDirectly: Setting socket to non-blocking failed, error %s\\n\", NetworkErrorString(WSAGetLastError()));\n     }\n+    hSocketRet = hSocket;\n+    return true;\n+}\n \n+bool ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocket, int nTimeout)\n+{\n+    struct sockaddr_storage sockaddr;\n+    socklen_t len = sizeof(sockaddr);\n+    if (hSocket == INVALID_SOCKET) {\n+        LogPrintf(\"Cannot connect to %s: invalid socket\\n\", addrConnect.ToString());\n+        return false;\n+    }\n+    if (!addrConnect.GetSockAddr((struct sockaddr*)&sockaddr, &len)) {\n+        LogPrintf(\"Cannot connect to %s: unsupported network\\n\", addrConnect.ToString());\n+        CloseSocket(hSocket);\n+        return false;\n+    }\n     if (connect(hSocket, (struct sockaddr*)&sockaddr, len) == SOCKET_ERROR)\n     {\n         int nErr = WSAGetLastError();\n@@ -481,8 +497,6 @@ bool ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRet, int\n             return false;\n         }\n     }\n-\n-    hSocketRet = hSocket;\n     return true;\n }\n \n@@ -534,9 +548,8 @@ bool IsProxy(const CNetAddr &addr) {\n     return false;\n }\n \n-bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int port, SOCKET& hSocketRet, int nTimeout, bool *outProxyConnectionFailed)\n+bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int port, SOCKET& hSocket, int nTimeout, bool *outProxyConnectionFailed)\n {\n-    SOCKET hSocket = INVALID_SOCKET;\n     // first connect to proxy server\n     if (!ConnectSocketDirectly(proxy.proxy, hSocket, nTimeout)) {\n         if (outProxyConnectionFailed)\n@@ -548,14 +561,16 @@ bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int\n         ProxyCredentials random_auth;\n         static std::atomic_int counter(0);\n         random_auth.username = random_auth.password = strprintf(\"%i\", counter++);\n-        if (!Socks5(strDest, (unsigned short)port, &random_auth, hSocket))\n+        if (!Socks5(strDest, (unsigned short)port, &random_auth, hSocket)) {\n+            CloseSocket(hSocket);\n             return false;\n+        }\n     } else {\n-        if (!Socks5(strDest, (unsigned short)port, 0, hSocket))\n+        if (!Socks5(strDest, (unsigned short)port, 0, hSocket)) {\n+            CloseSocket(hSocket);\n             return false;\n+        }\n     }\n-\n-    hSocketRet = hSocket;\n     return true;\n }\n bool LookupSubNet(const char* pszName, CSubNet& ret)"
      },
      {
        "sha": "3932e1d04c83ef60e51a134d54220b25be855f18",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ced81907f702134d9334fcfb6373eb63211c5db9/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ced81907f702134d9334fcfb6373eb63211c5db9/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=ced81907f702134d9334fcfb6373eb63211c5db9",
        "patch": "@@ -51,6 +51,7 @@ bool Lookup(const char *pszName, CService& addr, int portDefault, bool fAllowLoo\n bool Lookup(const char *pszName, std::vector<CService>& vAddr, int portDefault, bool fAllowLookup, unsigned int nMaxSolutions);\n CService LookupNumeric(const char *pszName, int portDefault = 0);\n bool LookupSubNet(const char *pszName, CSubNet& subnet);\n+bool CreateSocket(const CService &addrConnect, SOCKET& hSocketRet);\n bool ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRet, int nTimeout);\n bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int port, SOCKET& hSocketRet, int nTimeout, bool *outProxyConnectionFailed);\n /** Return readable error string for a network error code */"
      }
    ]
  },
  {
    "sha": "38a58fd61799c87c9fee0a417162f57a02c6aead",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOGE1OGZkNjE3OTljODdjOWZlZTBhNDE3MTYyZjU3YTAyYzZhZWFk",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-13T19:40:36Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-20T17:19:23Z"
      },
      "message": "net: move connection parameters into a struct and pass them all at once",
      "tree": {
        "sha": "9d8d555a172555eb3d9d6b017d3931d95a874051",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9d8d555a172555eb3d9d6b017d3931d95a874051"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/38a58fd61799c87c9fee0a417162f57a02c6aead",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38a58fd61799c87c9fee0a417162f57a02c6aead",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/38a58fd61799c87c9fee0a417162f57a02c6aead",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38a58fd61799c87c9fee0a417162f57a02c6aead/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ced81907f702134d9334fcfb6373eb63211c5db9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ced81907f702134d9334fcfb6373eb63211c5db9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ced81907f702134d9334fcfb6373eb63211c5db9"
      }
    ],
    "stats": {
      "total": 107,
      "additions": 66,
      "deletions": 41
    },
    "files": [
      {
        "sha": "a8eb2798f346908f8b2f602bdb7d9a8d55a0dbe3",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 40,
        "changes": 91,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38a58fd61799c87c9fee0a417162f57a02c6aead/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38a58fd61799c87c9fee0a417162f57a02c6aead/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=38a58fd61799c87c9fee0a417162f57a02c6aead",
        "patch": "@@ -360,14 +360,14 @@ static CAddress GetBindAddress(SOCKET sock)\n     return addr_bind;\n }\n \n-CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure)\n+CNode* CConnman::ConnectNode(NewConnection conn)\n {\n-    if (pszDest == nullptr) {\n-        if (IsLocal(addrConnect))\n+    if (conn.remote_str.empty()) {\n+        if (IsLocal(conn.remote_addr))\n             return nullptr;\n \n         // Look for an existing connection\n-        CNode* pnode = FindNode((CService)addrConnect);\n+        CNode* pnode = FindNode((CService)conn.remote_addr);\n         if (pnode)\n         {\n             LogPrintf(\"Failed to open new connection, already connected\\n\");\n@@ -377,28 +377,28 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n \n     /// debug print\n     LogPrint(BCLog::NET, \"trying connection %s lastseen=%.1fhrs\\n\",\n-        pszDest ? pszDest : addrConnect.ToString(),\n-        pszDest ? 0.0 : (double)(GetAdjustedTime() - addrConnect.nTime)/3600.0);\n+        !conn.remote_str.empty() ? conn.remote_str : conn.remote_addr.ToString(),\n+        !conn.remote_str.empty() ? 0.0 : (double)(GetAdjustedTime() - conn.remote_addr.nTime)/3600.0);\n \n     // Resolve\n     const int default_port = Params().GetDefaultPort();\n-    if (pszDest) {\n+    if (!conn.remote_str.empty()) {\n         std::vector<CService> resolved;\n-        if (Lookup(pszDest, resolved,  default_port, fNameLookup && !HaveNameProxy(), 256) && !resolved.empty()) {\n-            addrConnect = CAddress(resolved[GetRand(resolved.size())], NODE_NONE);\n-            if (!addrConnect.IsValid()) {\n-                LogPrint(BCLog::NET, \"Resolver returned invalid address %s for %s\", addrConnect.ToString(), pszDest);\n+        if (Lookup(conn.remote_str.c_str(), resolved,  default_port, fNameLookup && !HaveNameProxy(), 256) && !resolved.empty()) {\n+            conn.remote_addr = CAddress(resolved[GetRand(resolved.size())], NODE_NONE);\n+            if (!conn.remote_addr.IsValid()) {\n+                LogPrint(BCLog::NET, \"Resolver returned invalid address %s for %s\", conn.remote_addr.ToString(), conn.remote_str);\n                 return nullptr;\n             }\n             // It is possible that we already have a connection to the IP/port pszDest resolved to.\n             // In that case, drop the connection that was just created, and return the existing CNode instead.\n             // Also store the name we used to connect in that CNode, so that future FindNode() calls to that\n             // name catch this early.\n             LOCK(cs_vNodes);\n-            CNode* pnode = FindNode((CService)addrConnect);\n+            CNode* pnode = FindNode((CService)conn.remote_addr);\n             if (pnode)\n             {\n-                pnode->MaybeSetAddrName(std::string(pszDest));\n+                pnode->MaybeSetAddrName(conn.remote_str);\n                 LogPrintf(\"Failed to open new connection, already connected\\n\");\n                 return nullptr;\n             }\n@@ -407,52 +407,60 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n \n     // Connect\n     bool connected = false;\n-    SOCKET hSocket;\n     proxyType proxy;\n-    if (addrConnect.IsValid()) {\n+    if (conn.remote_addr.IsValid()) {\n         bool proxyConnectionFailed = false;\n \n-        if (GetProxy(addrConnect.GetNetwork(), proxy)) {\n-            if (!CreateSocket(proxy.proxy, hSocket)) {\n+        if (GetProxy(conn.remote_addr.GetNetwork(), proxy)) {\n+            if (!CreateSocket(proxy.proxy, conn.sock)) {\n                 return nullptr;\n             }\n-            connected = ConnectThroughProxy(proxy, addrConnect.ToStringIP(), addrConnect.GetPort(), hSocket, nConnectTimeout, &proxyConnectionFailed);\n+            connected = ConnectThroughProxy(proxy, conn.remote_addr.ToStringIP(), conn.remote_addr.GetPort(), conn.sock, nConnectTimeout, &proxyConnectionFailed);\n         } else {\n             // no proxy needed (none set for target network)\n-            if (!CreateSocket(addrConnect, hSocket)) {\n+            if (!CreateSocket(conn.remote_addr, conn.sock)) {\n                 return nullptr;\n             }\n-            connected = ConnectSocketDirectly(addrConnect, hSocket, nConnectTimeout);\n+            connected = ConnectSocketDirectly(conn.remote_addr, conn.sock, nConnectTimeout);\n         }\n         if (!proxyConnectionFailed) {\n             // If a connection to the node was attempted, and failure (if any) is not caused by a problem connecting to\n             // the proxy, mark this as an attempt.\n-            addrman.Attempt(addrConnect, fCountFailure);\n+            addrman.Attempt(conn.remote_addr, conn.count_failure);\n         }\n-    } else if (pszDest && GetNameProxy(proxy)) {\n-        if (!CreateSocket(proxy.proxy, hSocket)) {\n+    } else if (!conn.remote_str.empty() && GetNameProxy(proxy)) {\n+        if (!CreateSocket(proxy.proxy, conn.sock)) {\n             return nullptr;\n         }\n         std::string host;\n         int port = default_port;\n-        SplitHostPort(std::string(pszDest), port, host);\n-        connected = ConnectThroughProxy(proxy, host, port, hSocket, nConnectTimeout, nullptr);\n+        SplitHostPort(conn.remote_str, port, host);\n+        connected = ConnectThroughProxy(proxy, host, port, conn.sock, nConnectTimeout, nullptr);\n     }\n     if (connected) {\n-        if (!IsSelectableSocket(hSocket)) {\n+        if (!IsSelectableSocket(conn.sock)) {\n             LogPrintf(\"Cannot create connection: non-selectable socket created (fd >= FD_SETSIZE ?)\\n\");\n-            CloseSocket(hSocket);\n+            CloseSocket(conn.sock);\n             return nullptr;\n         }\n \n         // Add node\n         NodeId id = GetNewNodeId();\n         uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n-        CAddress addr_bind = GetBindAddress(hSocket);\n-        CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, addr_bind, pszDest ? pszDest : \"\", false);\n-        pnode->nServicesExpected = ServiceFlags(addrConnect.nServices & nRelevantServices);\n+        CAddress addr_bind = GetBindAddress(conn.sock);\n+        CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), conn.sock, conn.remote_addr, CalculateKeyedNetGroup(conn.remote_addr), nonce, addr_bind, conn.remote_str, false);\n+        pnode->nServicesExpected = ServiceFlags(conn.remote_addr.nServices & nRelevantServices);\n         pnode->AddRef();\n \n+        if (conn.outbound_grant)\n+            conn.outbound_grant->MoveTo(pnode->grantOutbound);\n+        if (conn.oneshot)\n+            pnode->fOneShot = true;\n+        if (conn.feeler)\n+            pnode->fFeeler = true;\n+        if (conn.addnode)\n+            pnode->fAddnode = true;\n+\n         return pnode;\n     }\n \n@@ -1978,18 +1986,21 @@ bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n     } else if (FindNode(std::string(pszDest)))\n         return false;\n \n-    CNode* pnode = ConnectNode(addrConnect, pszDest, fCountFailure);\n-\n+    NewConnection conn;\n+    conn.sock = INVALID_SOCKET;\n+    conn.remote_addr = addrConnect;\n+    conn.remote_str = pszDest ? pszDest : \"\";\n+    conn.count_failure = fCountFailure;\n+    conn.outbound_grant = grantOutbound;\n+    conn.oneshot = fOneShot;\n+    conn.feeler = fFeeler;\n+    conn.addnode = fAddnode;\n+    conn.incoming = false;\n+    conn.whitelisted = false;\n+\n+    CNode* pnode = ConnectNode(std::move(conn));\n     if (!pnode)\n         return false;\n-    if (grantOutbound)\n-        grantOutbound->MoveTo(pnode->grantOutbound);\n-    if (fOneShot)\n-        pnode->fOneShot = true;\n-    if (fFeeler)\n-        pnode->fFeeler = true;\n-    if (fAddnode)\n-        pnode->fAddnode = true;\n \n     m_msgproc->InitializeNode(pnode);\n     {"
      },
      {
        "sha": "eb2f7347f90226be9acf52de77ec1802f3623481",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 15,
        "deletions": 1,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38a58fd61799c87c9fee0a417162f57a02c6aead/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38a58fd61799c87c9fee0a417162f57a02c6aead/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=38a58fd61799c87c9fee0a417162f57a02c6aead",
        "patch": "@@ -305,6 +305,20 @@ class CConnman\n         ListenSocket(SOCKET socket_, bool whitelisted_) : socket(socket_), whitelisted(whitelisted_) {}\n     };\n \n+    struct NewConnection\n+    {\n+        SOCKET sock;\n+        CAddress remote_addr;\n+        std::string remote_str;\n+        CSemaphoreGrant* outbound_grant;\n+        bool incoming;\n+        bool count_failure;\n+        bool oneshot;\n+        bool feeler;\n+        bool addnode;\n+        bool whitelisted;\n+    };\n+\n     bool BindListenPort(const CService &bindAddr, std::string& strError, bool fWhitelisted = false);\n     bool Bind(const CService &addr, unsigned int flags);\n     bool InitBinds(const std::vector<CService>& binds, const std::vector<CService>& whiteBinds);\n@@ -325,7 +339,7 @@ class CConnman\n     CNode* FindNode(const CService& addr);\n \n     bool AttemptToEvictConnection();\n-    CNode* ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure);\n+    CNode* ConnectNode(NewConnection conn);\n     bool IsWhitelistedRange(const CNetAddr &addr);\n \n     void DeleteNode(CNode* pnode);"
      }
    ]
  },
  {
    "sha": "4aeb68506221b4ff973d8b9dc3223982db6b1240",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YWViNjg1MDYyMjFiNGZmOTczZDhiOWRjMzIyMzk4MmRiNmIxMjQw",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-13T20:06:00Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-20T17:19:23Z"
      },
      "message": "net: merge duplicate checks",
      "tree": {
        "sha": "d0103e8a30ece946505554256c74b4925a7ce728",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0103e8a30ece946505554256c74b4925a7ce728"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4aeb68506221b4ff973d8b9dc3223982db6b1240",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4aeb68506221b4ff973d8b9dc3223982db6b1240",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4aeb68506221b4ff973d8b9dc3223982db6b1240",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4aeb68506221b4ff973d8b9dc3223982db6b1240/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "38a58fd61799c87c9fee0a417162f57a02c6aead",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38a58fd61799c87c9fee0a417162f57a02c6aead",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/38a58fd61799c87c9fee0a417162f57a02c6aead"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 7,
      "deletions": 10
    },
    "files": [
      {
        "sha": "6170037a8f1f77a54538ad4777dfc2a3f98e44bf",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 10,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4aeb68506221b4ff973d8b9dc3223982db6b1240/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4aeb68506221b4ff973d8b9dc3223982db6b1240/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=4aeb68506221b4ff973d8b9dc3223982db6b1240",
        "patch": "@@ -363,16 +363,20 @@ static CAddress GetBindAddress(SOCKET sock)\n CNode* CConnman::ConnectNode(NewConnection conn)\n {\n     if (conn.remote_str.empty()) {\n-        if (IsLocal(conn.remote_addr))\n-            return nullptr;\n+        if (IsLocal(conn.remote_addr) || IsBanned(conn.remote_addr) ||\n+            FindNode(conn.remote_addr.ToStringIPPort())) {\n+                return nullptr;\n+        }\n \n         // Look for an existing connection\n-        CNode* pnode = FindNode((CService)conn.remote_addr);\n+        CNode* pnode = FindNode((CNetAddr)conn.remote_addr);\n         if (pnode)\n         {\n             LogPrintf(\"Failed to open new connection, already connected\\n\");\n             return nullptr;\n         }\n+    } else if (FindNode(conn.remote_str)) {\n+        return nullptr;\n     }\n \n     /// debug print\n@@ -1978,13 +1982,6 @@ bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n     if (!fNetworkActive) {\n         return false;\n     }\n-    if (!pszDest) {\n-        if (IsLocal(addrConnect) ||\n-            FindNode((CNetAddr)addrConnect) || IsBanned(addrConnect) ||\n-            FindNode(addrConnect.ToStringIPPort()))\n-            return false;\n-    } else if (FindNode(std::string(pszDest)))\n-        return false;\n \n     NewConnection conn;\n     conn.sock = INVALID_SOCKET;"
      }
    ]
  },
  {
    "sha": "03e73a734ceac8a2fc7ed1a21a752e3580b47569",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowM2U3M2E3MzRjZWFjOGEyZmM3ZWQxYTIxYTc1MmUzNTgwYjQ3NTY5",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-13T20:48:41Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-20T17:19:23Z"
      },
      "message": "net: create callbacks for new connections and outgoing failures",
      "tree": {
        "sha": "96785de2dec9c1b007ec0f8450a30ae4de3620f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/96785de2dec9c1b007ec0f8450a30ae4de3620f5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/03e73a734ceac8a2fc7ed1a21a752e3580b47569",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03e73a734ceac8a2fc7ed1a21a752e3580b47569",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/03e73a734ceac8a2fc7ed1a21a752e3580b47569",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03e73a734ceac8a2fc7ed1a21a752e3580b47569/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4aeb68506221b4ff973d8b9dc3223982db6b1240",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4aeb68506221b4ff973d8b9dc3223982db6b1240",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4aeb68506221b4ff973d8b9dc3223982db6b1240"
      }
    ],
    "stats": {
      "total": 113,
      "additions": 63,
      "deletions": 50
    },
    "files": [
      {
        "sha": "28510152c7657161428d0bf87dc0c8be1cddf4fb",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 58,
        "deletions": 48,
        "changes": 106,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03e73a734ceac8a2fc7ed1a21a752e3580b47569/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03e73a734ceac8a2fc7ed1a21a752e3580b47569/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=03e73a734ceac8a2fc7ed1a21a752e3580b47569",
        "patch": "@@ -360,23 +360,26 @@ static CAddress GetBindAddress(SOCKET sock)\n     return addr_bind;\n }\n \n-CNode* CConnman::ConnectNode(NewConnection conn)\n+void CConnman::ConnectNode(NewConnection conn)\n {\n     if (conn.remote_str.empty()) {\n         if (IsLocal(conn.remote_addr) || IsBanned(conn.remote_addr) ||\n             FindNode(conn.remote_addr.ToStringIPPort())) {\n-                return nullptr;\n+                OnFailedOutgoingConnection(std::move(conn));\n+                return;\n         }\n \n         // Look for an existing connection\n         CNode* pnode = FindNode((CNetAddr)conn.remote_addr);\n         if (pnode)\n         {\n             LogPrintf(\"Failed to open new connection, already connected\\n\");\n-            return nullptr;\n+            OnFailedOutgoingConnection(std::move(conn));\n+            return;\n         }\n     } else if (FindNode(conn.remote_str)) {\n-        return nullptr;\n+        OnFailedOutgoingConnection(std::move(conn));\n+        return;\n     }\n \n     /// debug print\n@@ -392,7 +395,8 @@ CNode* CConnman::ConnectNode(NewConnection conn)\n             conn.remote_addr = CAddress(resolved[GetRand(resolved.size())], NODE_NONE);\n             if (!conn.remote_addr.IsValid()) {\n                 LogPrint(BCLog::NET, \"Resolver returned invalid address %s for %s\", conn.remote_addr.ToString(), conn.remote_str);\n-                return nullptr;\n+                OnFailedOutgoingConnection(std::move(conn));\n+                return;\n             }\n             // It is possible that we already have a connection to the IP/port pszDest resolved to.\n             // In that case, drop the connection that was just created, and return the existing CNode instead.\n@@ -404,7 +408,8 @@ CNode* CConnman::ConnectNode(NewConnection conn)\n             {\n                 pnode->MaybeSetAddrName(conn.remote_str);\n                 LogPrintf(\"Failed to open new connection, already connected\\n\");\n-                return nullptr;\n+                OnFailedOutgoingConnection(std::move(conn));\n+                return;\n             }\n         }\n     }\n@@ -417,13 +422,15 @@ CNode* CConnman::ConnectNode(NewConnection conn)\n \n         if (GetProxy(conn.remote_addr.GetNetwork(), proxy)) {\n             if (!CreateSocket(proxy.proxy, conn.sock)) {\n-                return nullptr;\n+                OnFailedOutgoingConnection(std::move(conn));\n+                return;\n             }\n             connected = ConnectThroughProxy(proxy, conn.remote_addr.ToStringIP(), conn.remote_addr.GetPort(), conn.sock, nConnectTimeout, &proxyConnectionFailed);\n         } else {\n             // no proxy needed (none set for target network)\n             if (!CreateSocket(conn.remote_addr, conn.sock)) {\n-                return nullptr;\n+                OnFailedOutgoingConnection(std::move(conn));\n+                return;\n             }\n             connected = ConnectSocketDirectly(conn.remote_addr, conn.sock, nConnectTimeout);\n         }\n@@ -434,41 +441,23 @@ CNode* CConnman::ConnectNode(NewConnection conn)\n         }\n     } else if (!conn.remote_str.empty() && GetNameProxy(proxy)) {\n         if (!CreateSocket(proxy.proxy, conn.sock)) {\n-            return nullptr;\n+            OnFailedOutgoingConnection(std::move(conn));\n+            return;\n         }\n         std::string host;\n         int port = default_port;\n         SplitHostPort(conn.remote_str, port, host);\n         connected = ConnectThroughProxy(proxy, host, port, conn.sock, nConnectTimeout, nullptr);\n     }\n     if (connected) {\n-        if (!IsSelectableSocket(conn.sock)) {\n-            LogPrintf(\"Cannot create connection: non-selectable socket created (fd >= FD_SETSIZE ?)\\n\");\n-            CloseSocket(conn.sock);\n-            return nullptr;\n+        if (IsSelectableSocket(conn.sock)) {\n+            AddConnection(std::move(conn));\n+            return;\n         }\n-\n-        // Add node\n-        NodeId id = GetNewNodeId();\n-        uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n-        CAddress addr_bind = GetBindAddress(conn.sock);\n-        CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), conn.sock, conn.remote_addr, CalculateKeyedNetGroup(conn.remote_addr), nonce, addr_bind, conn.remote_str, false);\n-        pnode->nServicesExpected = ServiceFlags(conn.remote_addr.nServices & nRelevantServices);\n-        pnode->AddRef();\n-\n-        if (conn.outbound_grant)\n-            conn.outbound_grant->MoveTo(pnode->grantOutbound);\n-        if (conn.oneshot)\n-            pnode->fOneShot = true;\n-        if (conn.feeler)\n-            pnode->fFeeler = true;\n-        if (conn.addnode)\n-            pnode->fAddnode = true;\n-\n-        return pnode;\n+        LogPrintf(\"Cannot create connection: non-selectable socket created (fd >= FD_SETSIZE ?)\\n\");\n+        CloseSocket(conn.sock);\n     }\n-\n-    return nullptr;\n+    OnFailedOutgoingConnection(std::move(conn));\n }\n \n void CConnman::DumpBanlist()\n@@ -1708,8 +1697,7 @@ void CConnman::ProcessOneShot()\n     CAddress addr;\n     CSemaphoreGrant grant(*semOutbound, true);\n     if (grant) {\n-        if (!OpenNetworkConnection(addr, false, &grant, strDest.c_str(), true))\n-            AddOneShot(strDest);\n+        OpenNetworkConnection(addr, false, &grant, strDest.c_str(), true);\n     }\n }\n \n@@ -1971,18 +1959,11 @@ void CConnman::ThreadOpenAddedConnections()\n }\n \n // if successful, this moves the passed grant to the constructed node\n-bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound, const char *pszDest, bool fOneShot, bool fFeeler, bool fAddnode)\n+void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound, const char *pszDest, bool fOneShot, bool fFeeler, bool fAddnode)\n {\n     //\n     // Initiate outbound network connection\n     //\n-    if (interruptNet) {\n-        return false;\n-    }\n-    if (!fNetworkActive) {\n-        return false;\n-    }\n-\n     NewConnection conn;\n     conn.sock = INVALID_SOCKET;\n     conn.remote_addr = addrConnect;\n@@ -1995,17 +1976,46 @@ bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n     conn.incoming = false;\n     conn.whitelisted = false;\n \n-    CNode* pnode = ConnectNode(std::move(conn));\n-    if (!pnode)\n-        return false;\n+    if (interruptNet || !fNetworkActive) {\n+        OnFailedOutgoingConnection(std::move(conn));\n+        return;\n+    }\n+\n+    ConnectNode(std::move(conn));\n+}\n+\n+void CConnman::AddConnection(NewConnection conn)\n+{\n+    // Add node\n+    NodeId id = GetNewNodeId();\n+    uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n+    CAddress addr_bind = GetBindAddress(conn.sock);\n+    CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), conn.sock, conn.remote_addr, CalculateKeyedNetGroup(conn.remote_addr), nonce, addr_bind, conn.remote_str, conn.incoming);\n+    pnode->nServicesExpected = ServiceFlags(conn.remote_addr.nServices & nRelevantServices);\n+    pnode->AddRef();\n+\n+    if (conn.outbound_grant)\n+        conn.outbound_grant->MoveTo(pnode->grantOutbound);\n+    if (conn.oneshot)\n+        pnode->fOneShot = true;\n+    if (conn.feeler)\n+        pnode->fFeeler = true;\n+    if (conn.addnode)\n+        pnode->fAddnode = true;\n \n     m_msgproc->InitializeNode(pnode);\n     {\n         LOCK(cs_vNodes);\n         vNodes.push_back(pnode);\n     }\n+}\n \n-    return true;\n+void CConnman::OnFailedOutgoingConnection(NewConnection conn)\n+{\n+    CloseSocket(conn.sock);\n+    if (conn.oneshot && !conn.remote_str.empty()) {\n+        AddOneShot(conn.remote_str);\n+    }\n }\n \n void CConnman::ThreadMessageHandler()"
      },
      {
        "sha": "203049ec0db1713396b83c40f679206aba063d5c",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03e73a734ceac8a2fc7ed1a21a752e3580b47569/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03e73a734ceac8a2fc7ed1a21a752e3580b47569/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=03e73a734ceac8a2fc7ed1a21a752e3580b47569",
        "patch": "@@ -173,7 +173,7 @@ class CConnman\n     void Interrupt();\n     bool GetNetworkActive() const { return fNetworkActive; };\n     void SetNetworkActive(bool active);\n-    bool OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = nullptr, const char *strDest = nullptr, bool fOneShot = false, bool fFeeler = false, bool fAddnode = false);\n+    void OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = nullptr, const char *strDest = nullptr, bool fOneShot = false, bool fFeeler = false, bool fAddnode = false);\n     bool CheckIncomingNonce(uint64_t nonce);\n \n     bool ForNode(NodeId id, std::function<bool(CNode* pnode)> func);\n@@ -339,9 +339,12 @@ class CConnman\n     CNode* FindNode(const CService& addr);\n \n     bool AttemptToEvictConnection();\n-    CNode* ConnectNode(NewConnection conn);\n+    void ConnectNode(NewConnection conn);\n     bool IsWhitelistedRange(const CNetAddr &addr);\n \n+    void OnFailedOutgoingConnection(NewConnection conn);\n+    void AddConnection(NewConnection conn);\n+\n     void DeleteNode(CNode* pnode);\n \n     NodeId GetNewNodeId();"
      }
    ]
  },
  {
    "sha": "813de90e8768f0bf4d37bc6e1fbd2a753600693b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MTNkZTkwZTg3NjhmMGJmNGQzN2JjNmUxZmJkMmE3NTM2MDA2OTNi",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-13T20:51:16Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-20T17:19:23Z"
      },
      "message": "net: combine OpenNetworkConnection and ConnectNode",
      "tree": {
        "sha": "48b184ba5d85808a94411616da92e3ea3e78ffc0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/48b184ba5d85808a94411616da92e3ea3e78ffc0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/813de90e8768f0bf4d37bc6e1fbd2a753600693b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/813de90e8768f0bf4d37bc6e1fbd2a753600693b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/813de90e8768f0bf4d37bc6e1fbd2a753600693b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/813de90e8768f0bf4d37bc6e1fbd2a753600693b/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "03e73a734ceac8a2fc7ed1a21a752e3580b47569",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03e73a734ceac8a2fc7ed1a21a752e3580b47569",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/03e73a734ceac8a2fc7ed1a21a752e3580b47569"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 22,
      "deletions": 28
    },
    "files": [
      {
        "sha": "244050be64c603aea87ec751047be0b0f1368bb1",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 27,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/813de90e8768f0bf4d37bc6e1fbd2a753600693b/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/813de90e8768f0bf4d37bc6e1fbd2a753600693b/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=813de90e8768f0bf4d37bc6e1fbd2a753600693b",
        "patch": "@@ -360,8 +360,29 @@ static CAddress GetBindAddress(SOCKET sock)\n     return addr_bind;\n }\n \n-void CConnman::ConnectNode(NewConnection conn)\n+// if successful, this moves the passed grant to the constructed node\n+void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound, const char *pszDest, bool fOneShot, bool fFeeler, bool fAddnode)\n {\n+    //\n+    // Initiate outbound network connection\n+    //\n+    NewConnection conn;\n+    conn.sock = INVALID_SOCKET;\n+    conn.remote_addr = addrConnect;\n+    conn.remote_str = pszDest ? pszDest : \"\";\n+    conn.count_failure = fCountFailure;\n+    conn.outbound_grant = grantOutbound;\n+    conn.oneshot = fOneShot;\n+    conn.feeler = fFeeler;\n+    conn.addnode = fAddnode;\n+    conn.incoming = false;\n+    conn.whitelisted = false;\n+\n+    if (interruptNet || !fNetworkActive) {\n+        OnFailedOutgoingConnection(std::move(conn));\n+        return;\n+    }\n+\n     if (conn.remote_str.empty()) {\n         if (IsLocal(conn.remote_addr) || IsBanned(conn.remote_addr) ||\n             FindNode(conn.remote_addr.ToStringIPPort())) {\n@@ -1958,32 +1979,6 @@ void CConnman::ThreadOpenAddedConnections()\n     }\n }\n \n-// if successful, this moves the passed grant to the constructed node\n-void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound, const char *pszDest, bool fOneShot, bool fFeeler, bool fAddnode)\n-{\n-    //\n-    // Initiate outbound network connection\n-    //\n-    NewConnection conn;\n-    conn.sock = INVALID_SOCKET;\n-    conn.remote_addr = addrConnect;\n-    conn.remote_str = pszDest ? pszDest : \"\";\n-    conn.count_failure = fCountFailure;\n-    conn.outbound_grant = grantOutbound;\n-    conn.oneshot = fOneShot;\n-    conn.feeler = fFeeler;\n-    conn.addnode = fAddnode;\n-    conn.incoming = false;\n-    conn.whitelisted = false;\n-\n-    if (interruptNet || !fNetworkActive) {\n-        OnFailedOutgoingConnection(std::move(conn));\n-        return;\n-    }\n-\n-    ConnectNode(std::move(conn));\n-}\n-\n void CConnman::AddConnection(NewConnection conn)\n {\n     // Add node"
      },
      {
        "sha": "bded4abd127a887e1c520f2812be678a60115515",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/813de90e8768f0bf4d37bc6e1fbd2a753600693b/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/813de90e8768f0bf4d37bc6e1fbd2a753600693b/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=813de90e8768f0bf4d37bc6e1fbd2a753600693b",
        "patch": "@@ -339,7 +339,6 @@ class CConnman\n     CNode* FindNode(const CService& addr);\n \n     bool AttemptToEvictConnection();\n-    void ConnectNode(NewConnection conn);\n     bool IsWhitelistedRange(const CNetAddr &addr);\n \n     void OnFailedOutgoingConnection(NewConnection conn);"
      }
    ]
  },
  {
    "sha": "d44e02bfef6506dbeb8876ff348a09ef1872f440",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNDRlMDJiZmVmNjUwNmRiZWI4ODc2ZmYzNDhhMDllZjE4NzJmNDQw",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-13T22:07:39Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-20T17:19:23Z"
      },
      "message": "net: add RAII helper for outgoing connection failure callback",
      "tree": {
        "sha": "808029f9d852b4c8d6ff09c0b116d7e14dbd06a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/808029f9d852b4c8d6ff09c0b116d7e14dbd06a0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d44e02bfef6506dbeb8876ff348a09ef1872f440",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d44e02bfef6506dbeb8876ff348a09ef1872f440",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d44e02bfef6506dbeb8876ff348a09ef1872f440",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d44e02bfef6506dbeb8876ff348a09ef1872f440/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "813de90e8768f0bf4d37bc6e1fbd2a753600693b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/813de90e8768f0bf4d37bc6e1fbd2a753600693b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/813de90e8768f0bf4d37bc6e1fbd2a753600693b"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 19,
      "deletions": 11
    },
    "files": [
      {
        "sha": "b9167fe0ebdcc603fd084727e8ab9c6cc696ca09",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 11,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d44e02bfef6506dbeb8876ff348a09ef1872f440/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d44e02bfef6506dbeb8876ff348a09ef1872f440/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=d44e02bfef6506dbeb8876ff348a09ef1872f440",
        "patch": "@@ -363,6 +363,22 @@ static CAddress GetBindAddress(SOCKET sock)\n // if successful, this moves the passed grant to the constructed node\n void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound, const char *pszDest, bool fOneShot, bool fFeeler, bool fAddnode)\n {\n+    struct ConnectionAttempt\n+    {\n+        ConnectionAttempt(CConnman& connman, NewConnection& conn) : m_connman(connman), m_conn(conn) {}\n+        ~ConnectionAttempt() {\n+            if (!m_successful) {\n+                m_connman.OnFailedOutgoingConnection(std::move(m_conn));\n+            }\n+        }\n+        void success() {\n+            assert(!m_successful);\n+            m_successful = true;\n+        }\n+        bool m_successful = false;\n+        CConnman& m_connman;\n+        NewConnection& m_conn;\n+    };\n     //\n     // Initiate outbound network connection\n     //\n@@ -378,15 +394,15 @@ void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n     conn.incoming = false;\n     conn.whitelisted = false;\n \n+    ConnectionAttempt attempt(*this, conn);\n+\n     if (interruptNet || !fNetworkActive) {\n-        OnFailedOutgoingConnection(std::move(conn));\n         return;\n     }\n \n     if (conn.remote_str.empty()) {\n         if (IsLocal(conn.remote_addr) || IsBanned(conn.remote_addr) ||\n             FindNode(conn.remote_addr.ToStringIPPort())) {\n-                OnFailedOutgoingConnection(std::move(conn));\n                 return;\n         }\n \n@@ -395,11 +411,9 @@ void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n         if (pnode)\n         {\n             LogPrintf(\"Failed to open new connection, already connected\\n\");\n-            OnFailedOutgoingConnection(std::move(conn));\n             return;\n         }\n     } else if (FindNode(conn.remote_str)) {\n-        OnFailedOutgoingConnection(std::move(conn));\n         return;\n     }\n \n@@ -416,7 +430,6 @@ void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n             conn.remote_addr = CAddress(resolved[GetRand(resolved.size())], NODE_NONE);\n             if (!conn.remote_addr.IsValid()) {\n                 LogPrint(BCLog::NET, \"Resolver returned invalid address %s for %s\", conn.remote_addr.ToString(), conn.remote_str);\n-                OnFailedOutgoingConnection(std::move(conn));\n                 return;\n             }\n             // It is possible that we already have a connection to the IP/port pszDest resolved to.\n@@ -429,7 +442,6 @@ void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n             {\n                 pnode->MaybeSetAddrName(conn.remote_str);\n                 LogPrintf(\"Failed to open new connection, already connected\\n\");\n-                OnFailedOutgoingConnection(std::move(conn));\n                 return;\n             }\n         }\n@@ -443,14 +455,12 @@ void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n \n         if (GetProxy(conn.remote_addr.GetNetwork(), proxy)) {\n             if (!CreateSocket(proxy.proxy, conn.sock)) {\n-                OnFailedOutgoingConnection(std::move(conn));\n                 return;\n             }\n             connected = ConnectThroughProxy(proxy, conn.remote_addr.ToStringIP(), conn.remote_addr.GetPort(), conn.sock, nConnectTimeout, &proxyConnectionFailed);\n         } else {\n             // no proxy needed (none set for target network)\n             if (!CreateSocket(conn.remote_addr, conn.sock)) {\n-                OnFailedOutgoingConnection(std::move(conn));\n                 return;\n             }\n             connected = ConnectSocketDirectly(conn.remote_addr, conn.sock, nConnectTimeout);\n@@ -462,7 +472,6 @@ void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n         }\n     } else if (!conn.remote_str.empty() && GetNameProxy(proxy)) {\n         if (!CreateSocket(proxy.proxy, conn.sock)) {\n-            OnFailedOutgoingConnection(std::move(conn));\n             return;\n         }\n         std::string host;\n@@ -472,13 +481,12 @@ void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n     }\n     if (connected) {\n         if (IsSelectableSocket(conn.sock)) {\n+            attempt.success();\n             AddConnection(std::move(conn));\n             return;\n         }\n         LogPrintf(\"Cannot create connection: non-selectable socket created (fd >= FD_SETSIZE ?)\\n\");\n-        CloseSocket(conn.sock);\n     }\n-    OnFailedOutgoingConnection(std::move(conn));\n }\n \n void CConnman::DumpBanlist()"
      }
    ]
  },
  {
    "sha": "c8efe8caffebeb5d8c2dda37c07277341323b06f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOGVmZThjYWZmZWJlYjVkOGMyZGRhMzdjMDcyNzczNDEzMjNiMDZm",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-13T21:16:35Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-20T17:19:23Z"
      },
      "message": "net: use OnNewConnection for incoming connections as well",
      "tree": {
        "sha": "5e5ef6403a5e6cc0e1bfb5929b1abd8c17859e3a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5e5ef6403a5e6cc0e1bfb5929b1abd8c17859e3a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c8efe8caffebeb5d8c2dda37c07277341323b06f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8efe8caffebeb5d8c2dda37c07277341323b06f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c8efe8caffebeb5d8c2dda37c07277341323b06f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8efe8caffebeb5d8c2dda37c07277341323b06f/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d44e02bfef6506dbeb8876ff348a09ef1872f440",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d44e02bfef6506dbeb8876ff348a09ef1872f440",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d44e02bfef6506dbeb8876ff348a09ef1872f440"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 32,
      "deletions": 31
    },
    "files": [
      {
        "sha": "fdf79278ebba18607a61bbb00c180affd0f422fd",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 31,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8efe8caffebeb5d8c2dda37c07277341323b06f/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8efe8caffebeb5d8c2dda37c07277341323b06f/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=c8efe8caffebeb5d8c2dda37c07277341323b06f",
        "patch": "@@ -1101,28 +1101,41 @@ bool CConnman::AttemptToEvictConnection()\n }\n \n void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n+\n     struct sockaddr_storage sockaddr;\n     socklen_t len = sizeof(sockaddr);\n-    SOCKET hSocket = accept(hListenSocket.socket, (struct sockaddr*)&sockaddr, &len);\n-    CAddress addr;\n+\n+    NewConnection conn;\n+    conn.sock = accept(hListenSocket.socket, (struct sockaddr*)&sockaddr, &len);\n+    conn.remote_addr = CAddress();\n+    conn.remote_str = \"\";\n+    conn.count_failure = false;\n+    conn.outbound_grant = nullptr;\n+    conn.oneshot = false;\n+    conn.feeler = false;\n+    conn.addnode = false;\n+    conn.incoming = true;\n+    conn.whitelisted = hListenSocket.whitelisted;\n+\n     int nInbound = 0;\n     int nMaxInbound = nMaxConnections - (nMaxOutbound + nMaxFeeler);\n \n-    if (hSocket != INVALID_SOCKET) {\n-        if (!addr.SetSockAddr((const struct sockaddr*)&sockaddr)) {\n+    if (conn.sock != INVALID_SOCKET) {\n+        if (!conn.remote_addr.SetSockAddr((const struct sockaddr*)&sockaddr)) {\n             LogPrintf(\"Warning: Unknown socket family\\n\");\n         }\n     }\n \n-    bool whitelisted = hListenSocket.whitelisted || IsWhitelistedRange(addr);\n+    conn.whitelisted = conn.whitelisted || IsWhitelistedRange(conn.remote_addr);\n+\n     {\n         LOCK(cs_vNodes);\n         for (CNode* pnode : vNodes)\n             if (pnode->fInbound)\n                 nInbound++;\n     }\n \n-    if (hSocket == INVALID_SOCKET)\n+    if (conn.sock == INVALID_SOCKET)\n     {\n         int nErr = WSAGetLastError();\n         if (nErr != WSAEWOULDBLOCK)\n@@ -1131,26 +1144,26 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     }\n \n     if (!fNetworkActive) {\n-        LogPrintf(\"connection from %s dropped: not accepting new connections\\n\", addr.ToString());\n-        CloseSocket(hSocket);\n+        LogPrintf(\"connection from %s dropped: not accepting new connections\\n\", conn.remote_addr.ToString());\n+        CloseSocket(conn.sock);\n         return;\n     }\n \n-    if (!IsSelectableSocket(hSocket))\n+    if (!IsSelectableSocket(conn.sock))\n     {\n-        LogPrintf(\"connection from %s dropped: non-selectable socket\\n\", addr.ToString());\n-        CloseSocket(hSocket);\n+        LogPrintf(\"connection from %s dropped: non-selectable socket\\n\", conn.remote_addr.ToString());\n+        CloseSocket(conn.sock);\n         return;\n     }\n \n     // According to the internet TCP_NODELAY is not carried into accepted sockets\n     // on all platforms.  Set it again here just to be sure.\n-    SetSocketNoDelay(hSocket);\n+    SetSocketNoDelay(conn.sock);\n \n-    if (IsBanned(addr) && !whitelisted)\n+    if (IsBanned(conn.remote_addr) && !conn.whitelisted)\n     {\n-        LogPrintf(\"connection from %s dropped (banned)\\n\", addr.ToString());\n-        CloseSocket(hSocket);\n+        LogPrintf(\"connection from %s dropped (banned)\\n\", conn.remote_addr.ToString());\n+        CloseSocket(conn.sock);\n         return;\n     }\n \n@@ -1159,26 +1172,12 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n         if (!AttemptToEvictConnection()) {\n             // No connection to evict, disconnect the new connection\n             LogPrint(BCLog::NET, \"failed to find an eviction candidate - connection dropped (full)\\n\");\n-            CloseSocket(hSocket);\n+            CloseSocket(conn.sock);\n             return;\n         }\n     }\n \n-    NodeId id = GetNewNodeId();\n-    uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n-    CAddress addr_bind = GetBindAddress(hSocket);\n-\n-    CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addr, CalculateKeyedNetGroup(addr), nonce, addr_bind, \"\", true);\n-    pnode->AddRef();\n-    pnode->fWhitelisted = whitelisted;\n-    m_msgproc->InitializeNode(pnode);\n-\n-    LogPrint(BCLog::NET, \"connection from %s accepted\\n\", addr.ToString());\n-\n-    {\n-        LOCK(cs_vNodes);\n-        vNodes.push_back(pnode);\n-    }\n+    AddConnection(std::move(conn));\n }\n \n void CConnman::ThreadSocketHandler()\n@@ -2005,6 +2004,8 @@ void CConnman::AddConnection(NewConnection conn)\n         pnode->fFeeler = true;\n     if (conn.addnode)\n         pnode->fAddnode = true;\n+    if (conn.whitelisted)\n+        pnode->fWhitelisted = true;\n \n     m_msgproc->InitializeNode(pnode);\n     {"
      }
    ]
  },
  {
    "sha": "375a9162751f82931bb9e344f53ff74921bf4d2f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNzVhOTE2Mjc1MWY4MjkzMWJiOWUzNDRmNTNmZjc0OTIxYmY0ZDJm",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-08-31T17:04:20Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-20T17:19:23Z"
      },
      "message": "net: when de-activating p2p, set nodes to be disconnected rather than closing the socket immediately\n\nMessing with the socket from a non-network thread adds unnecessary complexity.",
      "tree": {
        "sha": "10a098f11411fcd11831c3899643d808624f4a9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/10a098f11411fcd11831c3899643d808624f4a9e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/375a9162751f82931bb9e344f53ff74921bf4d2f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/375a9162751f82931bb9e344f53ff74921bf4d2f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/375a9162751f82931bb9e344f53ff74921bf4d2f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/375a9162751f82931bb9e344f53ff74921bf4d2f/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c8efe8caffebeb5d8c2dda37c07277341323b06f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8efe8caffebeb5d8c2dda37c07277341323b06f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c8efe8caffebeb5d8c2dda37c07277341323b06f"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "631c0e78836ec36cba16710f8957fb2e1507b0f1",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/375a9162751f82931bb9e344f53ff74921bf4d2f/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/375a9162751f82931bb9e344f53ff74921bf4d2f/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=375a9162751f82931bb9e344f53ff74921bf4d2f",
        "patch": "@@ -2238,9 +2238,9 @@ void CConnman::SetNetworkActive(bool active)\n \n     if (!fNetworkActive) {\n         LOCK(cs_vNodes);\n-        // Close sockets to all nodes\n+        // Disconnect all nodes\n         for (CNode* pnode : vNodes) {\n-            pnode->CloseSocketDisconnect();\n+            pnode->fDisconnect = true;\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "72259b1e0ce21e54d2018dc2d09049e4f1e3386b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MjI1OWIxZTBjZTIxZTU0ZDIwMThkYzJkMDkwNDllNGYxZTMzODZi",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-08-31T17:12:40Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-20T17:19:23Z"
      },
      "message": "net: Add a Disconnect function for nodes\n\nFor now, this just sets fDisconnect like before. But a function will be\nnecessary later.",
      "tree": {
        "sha": "a5e42cd26f7d77b3fbfacc088aa4a3ff575e16ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a5e42cd26f7d77b3fbfacc088aa4a3ff575e16ed"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/72259b1e0ce21e54d2018dc2d09049e4f1e3386b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72259b1e0ce21e54d2018dc2d09049e4f1e3386b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/72259b1e0ce21e54d2018dc2d09049e4f1e3386b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72259b1e0ce21e54d2018dc2d09049e4f1e3386b/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "375a9162751f82931bb9e344f53ff74921bf4d2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/375a9162751f82931bb9e344f53ff74921bf4d2f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/375a9162751f82931bb9e344f53ff74921bf4d2f"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "276c60a19692dedb296473bc625813816f4ba3bb",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/72259b1e0ce21e54d2018dc2d09049e4f1e3386b/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/72259b1e0ce21e54d2018dc2d09049e4f1e3386b/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=72259b1e0ce21e54d2018dc2d09049e4f1e3386b",
        "patch": "@@ -740,6 +740,10 @@ class CNode\n     mutable CCriticalSection cs_addrLocal;\n public:\n \n+    void Disconnect() {\n+        fDisconnect = true;\n+    }\n+\n     NodeId GetId() const {\n         return id;\n     }"
      }
    ]
  },
  {
    "sha": "df02ec6141e8eb65982e16ae5b76359f3df93359",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZjAyZWM2MTQxZThlYjY1OTgyZTE2YWU1Yjc2MzU5ZjNkZjkzMzU5",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-12T17:57:57Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-20T17:19:23Z"
      },
      "message": "scripted-diff: Call Disconnect rather than setting fDisconnect directly\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/fDisconnect = true/Disconnect()/' src/net.cpp src/net_processing.cpp\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "eeef087d3c2a03d3bb8e6ba3547b98d06cae8531",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eeef087d3c2a03d3bb8e6ba3547b98d06cae8531"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df02ec6141e8eb65982e16ae5b76359f3df93359",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df02ec6141e8eb65982e16ae5b76359f3df93359",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/df02ec6141e8eb65982e16ae5b76359f3df93359",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df02ec6141e8eb65982e16ae5b76359f3df93359/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "72259b1e0ce21e54d2018dc2d09049e4f1e3386b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72259b1e0ce21e54d2018dc2d09049e4f1e3386b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/72259b1e0ce21e54d2018dc2d09049e4f1e3386b"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 26,
      "deletions": 26
    },
    "files": [
      {
        "sha": "9624de740b01bb8be2c490cc8c6c2c5aaf0f0809",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df02ec6141e8eb65982e16ae5b76359f3df93359/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df02ec6141e8eb65982e16ae5b76359f3df93359/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=df02ec6141e8eb65982e16ae5b76359f3df93359",
        "patch": "@@ -511,7 +511,7 @@ void CConnman::DumpBanlist()\n \n void CNode::CloseSocketDisconnect()\n {\n-    fDisconnect = true;\n+    Disconnect();\n     LOCK(cs_hSocket);\n     if (hSocket != INVALID_SOCKET)\n     {\n@@ -591,7 +591,7 @@ void CConnman::Ban(const CSubNet& subNet, const BanReason &banReason, int64_t ba\n         LOCK(cs_vNodes);\n         for (CNode* pnode : vNodes) {\n             if (subNet.Match((CNetAddr)pnode->addr))\n-                pnode->fDisconnect = true;\n+                pnode->Disconnect();\n         }\n     }\n     if(banReason == BanReasonManuallyAdded)\n@@ -1093,7 +1093,7 @@ bool CConnman::AttemptToEvictConnection()\n     LOCK(cs_vNodes);\n     for(std::vector<CNode*>::const_iterator it(vNodes.begin()); it != vNodes.end(); ++it) {\n         if ((*it)->GetId() == evicted) {\n-            (*it)->fDisconnect = true;\n+            (*it)->Disconnect();\n             return true;\n         }\n     }\n@@ -1444,27 +1444,27 @@ void CConnman::ThreadSocketHandler()\n                 if (pnode->nLastRecv == 0 || pnode->nLastSend == 0)\n                 {\n                     LogPrint(BCLog::NET, \"socket no message in first 60 seconds, %d %d from %d\\n\", pnode->nLastRecv != 0, pnode->nLastSend != 0, pnode->GetId());\n-                    pnode->fDisconnect = true;\n+                    pnode->Disconnect();\n                 }\n                 else if (nTime - pnode->nLastSend > TIMEOUT_INTERVAL)\n                 {\n                     LogPrintf(\"socket sending timeout: %is\\n\", nTime - pnode->nLastSend);\n-                    pnode->fDisconnect = true;\n+                    pnode->Disconnect();\n                 }\n                 else if (nTime - pnode->nLastRecv > (pnode->nVersion > BIP0031_VERSION ? TIMEOUT_INTERVAL : 90*60))\n                 {\n                     LogPrintf(\"socket receive timeout: %is\\n\", nTime - pnode->nLastRecv);\n-                    pnode->fDisconnect = true;\n+                    pnode->Disconnect();\n                 }\n                 else if (pnode->nPingNonceSent && pnode->nPingUsecStart + TIMEOUT_INTERVAL * 1000000 < GetTimeMicros())\n                 {\n                     LogPrintf(\"ping timeout: %fs\\n\", 0.000001 * (GetTimeMicros() - pnode->nPingUsecStart));\n-                    pnode->fDisconnect = true;\n+                    pnode->Disconnect();\n                 }\n                 else if (!pnode->fSuccessfullyConnected)\n                 {\n                     LogPrintf(\"version handshake timeout from %d\\n\", pnode->GetId());\n-                    pnode->fDisconnect = true;\n+                    pnode->Disconnect();\n                 }\n             }\n         }\n@@ -2240,7 +2240,7 @@ void CConnman::SetNetworkActive(bool active)\n         LOCK(cs_vNodes);\n         // Disconnect all nodes\n         for (CNode* pnode : vNodes) {\n-            pnode->fDisconnect = true;\n+            pnode->Disconnect();\n         }\n     }\n \n@@ -2590,7 +2590,7 @@ bool CConnman::DisconnectNode(const std::string& strNode)\n {\n     LOCK(cs_vNodes);\n     if (CNode* pnode = FindNode(strNode)) {\n-        pnode->fDisconnect = true;\n+        pnode->Disconnect();\n         return true;\n     }\n     return false;\n@@ -2600,7 +2600,7 @@ bool CConnman::DisconnectNode(NodeId id)\n     LOCK(cs_vNodes);\n     for(CNode* pnode : vNodes) {\n         if (id == pnode->GetId()) {\n-            pnode->fDisconnect = true;\n+            pnode->Disconnect();\n             return true;\n         }\n     }"
      },
      {
        "sha": "fb06ea54caa3559f27305199f670ef544482455c",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df02ec6141e8eb65982e16ae5b76359f3df93359/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df02ec6141e8eb65982e16ae5b76359f3df93359/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=df02ec6141e8eb65982e16ae5b76359f3df93359",
        "patch": "@@ -1003,7 +1003,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                     LogPrint(BCLog::NET, \"historical block serving limit reached, disconnect peer=%d\\n\", pfrom->GetId());\n \n                     //disconnect node\n-                    pfrom->fDisconnect = true;\n+                    pfrom->Disconnect();\n                     send = false;\n                 }\n                 // Pruned nodes may have deleted the block, so check whether\n@@ -1172,7 +1172,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             Misbehaving(pfrom->GetId(), 100);\n             return false;\n         } else {\n-            pfrom->fDisconnect = true;\n+            pfrom->Disconnect();\n             return false;\n         }\n     }\n@@ -1237,7 +1237,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             LogPrint(BCLog::NET, \"peer=%d does not offer the expected services (%08x offered, %08x expected); disconnecting\\n\", pfrom->GetId(), nServices, pfrom->nServicesExpected);\n             connman->PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_NONSTANDARD,\n                                strprintf(\"Expected to offer services %08x\", pfrom->nServicesExpected)));\n-            pfrom->fDisconnect = true;\n+            pfrom->Disconnect();\n             return false;\n         }\n \n@@ -1247,7 +1247,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 // These bits have been used as a flag to indicate that a node is running incompatible\n                 // consensus rules instead of changing the network magic, so we're stuck disconnecting\n                 // based on these service bits, at least for a while.\n-                pfrom->fDisconnect = true;\n+                pfrom->Disconnect();\n                 return false;\n             }\n         }\n@@ -1258,7 +1258,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             LogPrintf(\"peer=%d using obsolete version %i; disconnecting\\n\", pfrom->GetId(), nVersion);\n             connman->PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_OBSOLETE,\n                                strprintf(\"Version must be %d or greater\", MIN_PEER_PROTO_VERSION)));\n-            pfrom->fDisconnect = true;\n+            pfrom->Disconnect();\n             return false;\n         }\n \n@@ -1279,7 +1279,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         if (pfrom->fInbound && !connman->CheckIncomingNonce(nNonce))\n         {\n             LogPrintf(\"connected to self at %s, disconnecting\\n\", pfrom->addr.ToString());\n-            pfrom->fDisconnect = true;\n+            pfrom->Disconnect();\n             return true;\n         }\n \n@@ -1373,7 +1373,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         // Feeler connections exist only to verify if address is online.\n         if (pfrom->fFeeler) {\n             assert(pfrom->fInbound == false);\n-            pfrom->fDisconnect = true;\n+            pfrom->Disconnect();\n         }\n         return true;\n     }\n@@ -1475,7 +1475,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         if (vAddr.size() < 1000)\n             pfrom->fGetAddr = false;\n         if (pfrom->fOneShot)\n-            pfrom->fDisconnect = true;\n+            pfrom->Disconnect();\n     }\n \n     else if (strCommand == NetMsgType::SENDHEADERS)\n@@ -2431,14 +2431,14 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         if (!(pfrom->GetLocalServices() & NODE_BLOOM) && !pfrom->fWhitelisted)\n         {\n             LogPrint(BCLog::NET, \"mempool request with bloom filters disabled, disconnect peer=%d\\n\", pfrom->GetId());\n-            pfrom->fDisconnect = true;\n+            pfrom->Disconnect();\n             return true;\n         }\n \n         if (connman->OutboundTargetReached(false) && !pfrom->fWhitelisted)\n         {\n             LogPrint(BCLog::NET, \"mempool request with bandwidth limit reached, disconnect peer=%d\\n\", pfrom->GetId());\n-            pfrom->fDisconnect = true;\n+            pfrom->Disconnect();\n             return true;\n         }\n \n@@ -2627,7 +2627,7 @@ static bool SendRejectsAndCheckIfBanned(CNode* pnode, CConnman* connman)\n         else if (pnode->fAddnode)\n             LogPrintf(\"Warning: not punishing addnoded peer %s!\\n\", pnode->addr.ToString());\n         else {\n-            pnode->fDisconnect = true;\n+            pnode->Disconnect();\n             if (pnode->addr.IsLocal())\n                 LogPrintf(\"Warning: not banning local peer %s!\\n\", pnode->addr.ToString());\n             else\n@@ -2683,7 +2683,7 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     // Scan for message start\n     if (memcmp(msg.hdr.pchMessageStart, chainparams.MessageStart(), CMessageHeader::MESSAGE_START_SIZE) != 0) {\n         LogPrintf(\"PROCESSMESSAGE: INVALID MESSAGESTART %s peer=%d\\n\", SanitizeString(msg.hdr.GetCommand()), pfrom->GetId());\n-        pfrom->fDisconnect = true;\n+        pfrom->Disconnect();\n         return false;\n     }\n \n@@ -3176,7 +3176,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto, std::atomic<bool>& interruptM\n             // the download window should be much larger than the to-be-downloaded set of blocks, so disconnection\n             // should only happen during initial block download.\n             LogPrintf(\"Peer=%d is stalling block download, disconnecting\\n\", pto->GetId());\n-            pto->fDisconnect = true;\n+            pto->Disconnect();\n             return true;\n         }\n         // In case there is a block that has been in flight from this peer for 2 + 0.5 * N times the block interval\n@@ -3189,7 +3189,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto, std::atomic<bool>& interruptM\n             int nOtherPeersWithValidatedDownloads = nPeersWithValidatedDownloads - (state.nBlocksInFlightValidHeaders > 0);\n             if (nNow > state.nDownloadingSince + consensusParams.nPowTargetSpacing * (BLOCK_DOWNLOAD_TIMEOUT_BASE + BLOCK_DOWNLOAD_TIMEOUT_PER_PEER * nOtherPeersWithValidatedDownloads)) {\n                 LogPrintf(\"Timeout downloading block %s from peer=%d, disconnecting\\n\", queuedBlock.hash.ToString(), pto->GetId());\n-                pto->fDisconnect = true;\n+                pto->Disconnect();\n                 return true;\n             }\n         }\n@@ -3205,7 +3205,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto, std::atomic<bool>& interruptM\n                     // problems if we can't get any outbound peers.\n                     if (!pto->fWhitelisted) {\n                         LogPrintf(\"Timeout downloading headers from peer=%d, disconnecting\\n\", pto->GetId());\n-                        pto->fDisconnect = true;\n+                        pto->Disconnect();\n                         return true;\n                     } else {\n                         LogPrintf(\"Timeout downloading headers from whitelisted peer=%d, not disconnecting\\n\", pto->GetId());"
      }
    ]
  },
  {
    "sha": "7bf4b56e581b3f5eb0d03b0795e29806a19cfd76",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YmY0YjU2ZTU4MWIzZjVlYjBkMDNiMDc5NWUyOTgwNmExOWNmZDc2",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-08-31T17:24:14Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-20T17:19:23Z"
      },
      "message": "net: add an EnableReceive function so that the message handler can trigger it\n\nfor now this just disables fPauseRecv, but it will need to be a function later.",
      "tree": {
        "sha": "3c557f25e425838d8b486cd88903be55b192f703",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3c557f25e425838d8b486cd88903be55b192f703"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7bf4b56e581b3f5eb0d03b0795e29806a19cfd76",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bf4b56e581b3f5eb0d03b0795e29806a19cfd76",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7bf4b56e581b3f5eb0d03b0795e29806a19cfd76",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bf4b56e581b3f5eb0d03b0795e29806a19cfd76/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "df02ec6141e8eb65982e16ae5b76359f3df93359",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df02ec6141e8eb65982e16ae5b76359f3df93359",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df02ec6141e8eb65982e16ae5b76359f3df93359"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 12,
      "deletions": 2
    },
    "files": [
      {
        "sha": "63b6eaa46167e0ddc0ed42467232dc432109edb1",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bf4b56e581b3f5eb0d03b0795e29806a19cfd76/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bf4b56e581b3f5eb0d03b0795e29806a19cfd76/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=7bf4b56e581b3f5eb0d03b0795e29806a19cfd76",
        "patch": "@@ -836,6 +836,10 @@ int CNode::GetSendVersion() const\n     return nSendVersion;\n }\n \n+void CNode::EnableReceive()\n+{\n+    fPauseRecv = false;\n+}\n \n int CNetMessage::readHeader(const char *pch, unsigned int nBytes)\n {\n@@ -1397,7 +1401,9 @@ void CConnman::ThreadSocketHandler()\n                             LOCK(pnode->cs_vProcessMsg);\n                             pnode->vProcessMsg.splice(pnode->vProcessMsg.end(), pnode->vRecvMsg, pnode->vRecvMsg.begin(), it);\n                             pnode->nProcessQueueSize += nSizeAdded;\n-                            pnode->fPauseRecv = pnode->nProcessQueueSize > nReceiveFloodSize;\n+                            if (pnode->nProcessQueueSize > nReceiveFloodSize) {\n+                                pnode->fPauseRecv = true;\n+                            }\n                         }\n                         WakeMessageHandler();\n                     }"
      },
      {
        "sha": "0aac04ff02bf564dc33fcbe992137fa25fd593cd",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bf4b56e581b3f5eb0d03b0795e29806a19cfd76/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bf4b56e581b3f5eb0d03b0795e29806a19cfd76/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=7bf4b56e581b3f5eb0d03b0795e29806a19cfd76",
        "patch": "@@ -743,6 +743,7 @@ class CNode\n     void Disconnect() {\n         fDisconnect = true;\n     }\n+    void EnableReceive();\n \n     NodeId GetId() const {\n         return id;"
      },
      {
        "sha": "b11861f039137f27efc9a7fc4f742daa09c4cc1d",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bf4b56e581b3f5eb0d03b0795e29806a19cfd76/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bf4b56e581b3f5eb0d03b0795e29806a19cfd76/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=7bf4b56e581b3f5eb0d03b0795e29806a19cfd76",
        "patch": "@@ -2673,8 +2673,11 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n             return false;\n         // Just take one message\n         msgs.splice(msgs.begin(), pfrom->vProcessMsg, pfrom->vProcessMsg.begin());\n+\n         pfrom->nProcessQueueSize -= msgs.front().vRecv.size() + CMessageHeader::HEADER_SIZE;\n-        pfrom->fPauseRecv = pfrom->nProcessQueueSize > connman->GetReceiveFloodSize();\n+        if (pfrom->fPauseRecv && pfrom->nProcessQueueSize <= connman->GetReceiveFloodSize()) {\n+            pfrom->EnableReceive();\n+        }\n         fMoreWork = !pfrom->vProcessMsg.empty();\n     }\n     CNetMessage& msg(msgs.front());"
      }
    ]
  },
  {
    "sha": "9b5b0a0a1e773ca4bccf9bf8441c4cf62c661a60",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YjViMGEwYTFlNzczY2E0YmNjZjliZjg0NDFjNGNmNjJjNjYxYTYw",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-08-31T17:33:35Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-20T17:19:23Z"
      },
      "message": "net: get rid of optimistic send and the socket lock\n\nThe socket lock only existed because it was possible to trigger an immediate\ndisconnect via threads other than the socket handler.\n\nThe optimistic send was the last offender.",
      "tree": {
        "sha": "1cd9789211f4f628082aa63e59037dc50106d679",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1cd9789211f4f628082aa63e59037dc50106d679"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b5b0a0a1e773ca4bccf9bf8441c4cf62c661a60",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b5b0a0a1e773ca4bccf9bf8441c4cf62c661a60",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9b5b0a0a1e773ca4bccf9bf8441c4cf62c661a60",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b5b0a0a1e773ca4bccf9bf8441c4cf62c661a60/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7bf4b56e581b3f5eb0d03b0795e29806a19cfd76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bf4b56e581b3f5eb0d03b0795e29806a19cfd76",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7bf4b56e581b3f5eb0d03b0795e29806a19cfd76"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 2,
      "deletions": 22
    },
    "files": [
      {
        "sha": "28a1913de752709319f57b716d8da74a13c247cb",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 21,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b5b0a0a1e773ca4bccf9bf8441c4cf62c661a60/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b5b0a0a1e773ca4bccf9bf8441c4cf62c661a60/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=9b5b0a0a1e773ca4bccf9bf8441c4cf62c661a60",
        "patch": "@@ -512,7 +512,6 @@ void CConnman::DumpBanlist()\n void CNode::CloseSocketDisconnect()\n {\n     Disconnect();\n-    LOCK(cs_hSocket);\n     if (hSocket != INVALID_SOCKET)\n     {\n         LogPrint(BCLog::NET, \"disconnecting peer=%d\\n\", id);\n@@ -905,9 +904,9 @@ const uint256& CNetMessage::GetMessageHash() const\n \n \n \n-// requires LOCK(cs_vSend)\n size_t CConnman::SocketSendData(CNode *pnode) const\n {\n+    LOCK(pnode->cs_vSend);\n     auto it = pnode->vSendMsg.begin();\n     size_t nSentSize = 0;\n \n@@ -916,7 +915,6 @@ size_t CConnman::SocketSendData(CNode *pnode) const\n         assert(data.size() > pnode->nSendOffset);\n         int nBytes = 0;\n         {\n-            LOCK(pnode->cs_hSocket);\n             if (pnode->hSocket == INVALID_SOCKET)\n                 break;\n             nBytes = send(pnode->hSocket, reinterpret_cast<const char*>(data.data()) + pnode->nSendOffset, data.size() - pnode->nSendOffset, MSG_NOSIGNAL | MSG_DONTWAIT);\n@@ -1294,7 +1292,6 @@ void CConnman::ThreadSocketHandler()\n                     select_send = !pnode->vSendMsg.empty();\n                 }\n \n-                LOCK(pnode->cs_hSocket);\n                 if (pnode->hSocket == INVALID_SOCKET)\n                     continue;\n \n@@ -1365,7 +1362,6 @@ void CConnman::ThreadSocketHandler()\n             bool sendSet = false;\n             bool errorSet = false;\n             {\n-                LOCK(pnode->cs_hSocket);\n                 if (pnode->hSocket == INVALID_SOCKET)\n                     continue;\n                 recvSet = FD_ISSET(pnode->hSocket, &fdsetRecv);\n@@ -1376,13 +1372,7 @@ void CConnman::ThreadSocketHandler()\n             {\n                 // typical socket buffer is 8K-64K\n                 char pchBuf[0x10000];\n-                int nBytes = 0;\n-                {\n-                    LOCK(pnode->cs_hSocket);\n-                    if (pnode->hSocket == INVALID_SOCKET)\n-                        continue;\n-                    nBytes = recv(pnode->hSocket, pchBuf, sizeof(pchBuf), MSG_DONTWAIT);\n-                }\n+                int nBytes = recv(pnode->hSocket, pchBuf, sizeof(pchBuf), MSG_DONTWAIT);\n                 if (nBytes > 0)\n                 {\n                     bool notify = false;\n@@ -1434,7 +1424,6 @@ void CConnman::ThreadSocketHandler()\n             //\n             if (sendSet)\n             {\n-                LOCK(pnode->cs_vSend);\n                 size_t nBytes = SocketSendData(pnode);\n                 if (nBytes) {\n                     RecordBytesSent(nBytes);\n@@ -2872,10 +2861,8 @@ void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n \n     CVectorWriter{SER_NETWORK, INIT_PROTO_VERSION, serializedHeader, 0, hdr};\n \n-    size_t nBytesSent = 0;\n     {\n         LOCK(pnode->cs_vSend);\n-        bool optimisticSend(pnode->vSendMsg.empty());\n \n         //log total amount of bytes per command\n         pnode->mapSendBytesPerMsgCmd[msg.command] += nTotalSize;\n@@ -2886,13 +2873,7 @@ void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n         pnode->vSendMsg.push_back(std::move(serializedHeader));\n         if (nMessageSize)\n             pnode->vSendMsg.push_back(std::move(msg.data));\n-\n-        // If write queue empty, attempt \"optimistic write\"\n-        if (optimisticSend == true)\n-            nBytesSent = SocketSendData(pnode);\n     }\n-    if (nBytesSent)\n-        RecordBytesSent(nBytesSent);\n }\n \n bool CConnman::ForNode(NodeId id, std::function<bool(CNode* pnode)> func)"
      },
      {
        "sha": "c4c0a92e825f203ef8e9cf0195bf651b455b4bf1",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b5b0a0a1e773ca4bccf9bf8441c4cf62c661a60/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b5b0a0a1e773ca4bccf9bf8441c4cf62c661a60/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=9b5b0a0a1e773ca4bccf9bf8441c4cf62c661a60",
        "patch": "@@ -606,7 +606,6 @@ class CNode\n     uint64_t nSendBytes;\n     std::deque<std::vector<unsigned char>> vSendMsg;\n     CCriticalSection cs_vSend;\n-    CCriticalSection cs_hSocket;\n     CCriticalSection cs_vRecv;\n \n     CCriticalSection cs_vProcessMsg;"
      }
    ]
  },
  {
    "sha": "6eaae10aa26ac14d59436240ceaadf0af687d53c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZWFhZTEwYWEyNmFjMTRkNTk0MzYyNDBjZWFhZGYwYWY2ODdkNTNj",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-08-31T18:08:58Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-20T17:19:23Z"
      },
      "message": "net: move socket receiving to its own function",
      "tree": {
        "sha": "b0035044b79a6eb213c5b47c3cf247d86a3f5149",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b0035044b79a6eb213c5b47c3cf247d86a3f5149"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6eaae10aa26ac14d59436240ceaadf0af687d53c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6eaae10aa26ac14d59436240ceaadf0af687d53c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6eaae10aa26ac14d59436240ceaadf0af687d53c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6eaae10aa26ac14d59436240ceaadf0af687d53c/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9b5b0a0a1e773ca4bccf9bf8441c4cf62c661a60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b5b0a0a1e773ca4bccf9bf8441c4cf62c661a60",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9b5b0a0a1e773ca4bccf9bf8441c4cf62c661a60"
      }
    ],
    "stats": {
      "total": 103,
      "additions": 56,
      "deletions": 47
    },
    "files": [
      {
        "sha": "c65e53086cd7a98cdf40935e3b7b3874035a1cf0",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 55,
        "deletions": 47,
        "changes": 102,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eaae10aa26ac14d59436240ceaadf0af687d53c/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eaae10aa26ac14d59436240ceaadf0af687d53c/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=6eaae10aa26ac14d59436240ceaadf0af687d53c",
        "patch": "@@ -901,8 +901,59 @@ const uint256& CNetMessage::GetMessageHash() const\n \n \n \n-\n-\n+size_t CConnman::SocketReceiveData(CNode* pnode)\n+{\n+    // typical socket buffer is 8K-64K\n+    char pchBuf[0x10000];\n+    int nBytes = recv(pnode->hSocket, pchBuf, sizeof(pchBuf), MSG_DONTWAIT);\n+    if (nBytes > 0)\n+    {\n+        bool notify = false;\n+        if (!pnode->ReceiveMsgBytes(pchBuf, nBytes, notify))\n+            pnode->CloseSocketDisconnect();\n+        if (notify) {\n+            size_t nSizeAdded = 0;\n+            auto it(pnode->vRecvMsg.begin());\n+            for (; it != pnode->vRecvMsg.end(); ++it) {\n+                if (!it->complete())\n+                    break;\n+                nSizeAdded += it->vRecv.size() + CMessageHeader::HEADER_SIZE;\n+            }\n+            {\n+                LOCK(pnode->cs_vProcessMsg);\n+                pnode->vProcessMsg.splice(pnode->vProcessMsg.end(), pnode->vRecvMsg, pnode->vRecvMsg.begin(), it);\n+                pnode->nProcessQueueSize += nSizeAdded;\n+                if (pnode->nProcessQueueSize > nReceiveFloodSize) {\n+                    pnode->fPauseRecv = true;\n+                }\n+            }\n+            WakeMessageHandler();\n+        }\n+    }\n+    else if (nBytes == 0)\n+    {\n+        // socket closed gracefully\n+        if (!pnode->fDisconnect) {\n+            LogPrint(BCLog::NET, \"socket closed\\n\");\n+        }\n+        pnode->CloseSocketDisconnect();\n+    }\n+    else if (nBytes < 0)\n+    {\n+        // error\n+        int nErr = WSAGetLastError();\n+        if (nErr != WSAEWOULDBLOCK && nErr != WSAEMSGSIZE && nErr != WSAEINTR && nErr != WSAEINPROGRESS)\n+        {\n+            if (!pnode->fDisconnect)\n+                LogPrintf(\"socket recv error %s\\n\", NetworkErrorString(nErr));\n+            pnode->CloseSocketDisconnect();\n+        }\n+    }\n+    if (nBytes < 0) {\n+        return 0;\n+    }\n+    return nBytes;\n+}\n \n size_t CConnman::SocketSendData(CNode *pnode) const\n {\n@@ -1370,52 +1421,9 @@ void CConnman::ThreadSocketHandler()\n             }\n             if (recvSet || errorSet)\n             {\n-                // typical socket buffer is 8K-64K\n-                char pchBuf[0x10000];\n-                int nBytes = recv(pnode->hSocket, pchBuf, sizeof(pchBuf), MSG_DONTWAIT);\n-                if (nBytes > 0)\n-                {\n-                    bool notify = false;\n-                    if (!pnode->ReceiveMsgBytes(pchBuf, nBytes, notify))\n-                        pnode->CloseSocketDisconnect();\n+                size_t nBytes = SocketReceiveData(pnode);\n+                if (nBytes) {\n                     RecordBytesRecv(nBytes);\n-                    if (notify) {\n-                        size_t nSizeAdded = 0;\n-                        auto it(pnode->vRecvMsg.begin());\n-                        for (; it != pnode->vRecvMsg.end(); ++it) {\n-                            if (!it->complete())\n-                                break;\n-                            nSizeAdded += it->vRecv.size() + CMessageHeader::HEADER_SIZE;\n-                        }\n-                        {\n-                            LOCK(pnode->cs_vProcessMsg);\n-                            pnode->vProcessMsg.splice(pnode->vProcessMsg.end(), pnode->vRecvMsg, pnode->vRecvMsg.begin(), it);\n-                            pnode->nProcessQueueSize += nSizeAdded;\n-                            if (pnode->nProcessQueueSize > nReceiveFloodSize) {\n-                                pnode->fPauseRecv = true;\n-                            }\n-                        }\n-                        WakeMessageHandler();\n-                    }\n-                }\n-                else if (nBytes == 0)\n-                {\n-                    // socket closed gracefully\n-                    if (!pnode->fDisconnect) {\n-                        LogPrint(BCLog::NET, \"socket closed\\n\");\n-                    }\n-                    pnode->CloseSocketDisconnect();\n-                }\n-                else if (nBytes < 0)\n-                {\n-                    // error\n-                    int nErr = WSAGetLastError();\n-                    if (nErr != WSAEWOULDBLOCK && nErr != WSAEMSGSIZE && nErr != WSAEINTR && nErr != WSAEINPROGRESS)\n-                    {\n-                        if (!pnode->fDisconnect)\n-                            LogPrintf(\"socket recv error %s\\n\", NetworkErrorString(nErr));\n-                        pnode->CloseSocketDisconnect();\n-                    }\n                 }\n             }\n "
      },
      {
        "sha": "cd66e8f9373e7d432aeb9934c7d3610b408b0b59",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eaae10aa26ac14d59436240ceaadf0af687d53c/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eaae10aa26ac14d59436240ceaadf0af687d53c/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=6eaae10aa26ac14d59436240ceaadf0af687d53c",
        "patch": "@@ -348,6 +348,7 @@ class CConnman\n \n     NodeId GetNewNodeId();\n \n+    size_t SocketReceiveData(CNode *pnode);\n     size_t SocketSendData(CNode *pnode) const;\n     //!check is the banlist has unwritten changes\n     bool BannedSetIsDirty();"
      }
    ]
  },
  {
    "sha": "a9f4dbdf3f874d2714678c76c0311cc9012517fa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOWY0ZGJkZjNmODc0ZDI3MTQ2NzhjNzZjMDMxMWNjOTAxMjUxN2Zh",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-08-31T18:51:28Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-20T17:19:23Z"
      },
      "message": "net: narrow the scope for cs_vRecv to shared variables only",
      "tree": {
        "sha": "0349022d6eb3c6ca89b6805d49aca0bec2e28ad6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0349022d6eb3c6ca89b6805d49aca0bec2e28ad6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a9f4dbdf3f874d2714678c76c0311cc9012517fa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9f4dbdf3f874d2714678c76c0311cc9012517fa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a9f4dbdf3f874d2714678c76c0311cc9012517fa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9f4dbdf3f874d2714678c76c0311cc9012517fa/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6eaae10aa26ac14d59436240ceaadf0af687d53c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6eaae10aa26ac14d59436240ceaadf0af687d53c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6eaae10aa26ac14d59436240ceaadf0af687d53c"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 22,
      "deletions": 19
    },
    "files": [
      {
        "sha": "7c91bc3ace99ae9d66274e7e71bbb062136f1f5c",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 19,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9f4dbdf3f874d2714678c76c0311cc9012517fa/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9f4dbdf3f874d2714678c76c0311cc9012517fa/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=a9f4dbdf3f874d2714678c76c0311cc9012517fa",
        "patch": "@@ -761,9 +761,6 @@ bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete\n {\n     complete = false;\n     int64_t nTimeMicros = GetTimeMicros();\n-    LOCK(cs_vRecv);\n-    nLastRecv = nTimeMicros / 1000000;\n-    nRecvBytes += nBytes;\n     while (nBytes > 0) {\n \n         // get current incomplete message, or create a new one\n@@ -792,15 +789,6 @@ bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete\n         nBytes -= handled;\n \n         if (msg.complete()) {\n-\n-            //store received bytes per message command\n-            //to prevent a memory DOS, only allow valid commands\n-            mapMsgCmdSize::iterator i = mapRecvBytesPerMsgCmd.find(msg.hdr.pchCommand);\n-            if (i == mapRecvBytesPerMsgCmd.end())\n-                i = mapRecvBytesPerMsgCmd.find(NET_MESSAGE_COMMAND_OTHER);\n-            assert(i != mapRecvBytesPerMsgCmd.end());\n-            i->second += msg.hdr.nMessageSize + CMessageHeader::HEADER_SIZE;\n-\n             msg.nTime = nTimeMicros;\n             complete = true;\n         }\n@@ -911,14 +899,29 @@ size_t CConnman::SocketReceiveData(CNode* pnode)\n         bool notify = false;\n         if (!pnode->ReceiveMsgBytes(pchBuf, nBytes, notify))\n             pnode->CloseSocketDisconnect();\n-        if (notify) {\n-            size_t nSizeAdded = 0;\n-            auto it(pnode->vRecvMsg.begin());\n-            for (; it != pnode->vRecvMsg.end(); ++it) {\n-                if (!it->complete())\n-                    break;\n-                nSizeAdded += it->vRecv.size() + CMessageHeader::HEADER_SIZE;\n+\n+        auto it(pnode->vRecvMsg.begin());\n+        size_t nSizeAdded = 0;\n+        {\n+            LOCK(pnode->cs_vRecv);\n+            int64_t nTimeMicros = GetTimeMicros();\n+            pnode->nLastRecv = nTimeMicros / 1000000;\n+            pnode->nRecvBytes += nBytes;\n+            if (notify) {\n+                for (; it != pnode->vRecvMsg.end(); ++it) {\n+                    const auto& msg = *it;\n+                    if (!msg.complete())\n+                        break;\n+                    nSizeAdded += msg.vRecv.size() + CMessageHeader::HEADER_SIZE;\n+                    mapMsgCmdSize::iterator mapit = pnode->mapRecvBytesPerMsgCmd.find(msg.hdr.pchCommand);\n+                    if (mapit == pnode->mapRecvBytesPerMsgCmd.end())\n+                        mapit = pnode->mapRecvBytesPerMsgCmd.find(NET_MESSAGE_COMMAND_OTHER);\n+                    assert(mapit != pnode->mapRecvBytesPerMsgCmd.end());\n+                    mapit->second += msg.vRecv.size() + CMessageHeader::HEADER_SIZE;\n+                }\n             }\n+        }\n+        if (it != pnode->vRecvMsg.begin()) {\n             {\n                 LOCK(pnode->cs_vProcessMsg);\n                 pnode->vProcessMsg.splice(pnode->vProcessMsg.end(), pnode->vRecvMsg, pnode->vRecvMsg.begin(), it);"
      }
    ]
  },
  {
    "sha": "87aaa48274909e5db67cb3c218950c6058486f6f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4N2FhYTQ4Mjc0OTA5ZTVkYjY3Y2IzYzIxODk1MGM2MDU4NDg2ZjZm",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-08-31T18:53:50Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-20T17:19:23Z"
      },
      "message": "net: fix possibly skipped decrefs at shutdown",
      "tree": {
        "sha": "216dd1ef482750383f7a4276479c6b00886306b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/216dd1ef482750383f7a4276479c6b00886306b1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/87aaa48274909e5db67cb3c218950c6058486f6f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87aaa48274909e5db67cb3c218950c6058486f6f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/87aaa48274909e5db67cb3c218950c6058486f6f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87aaa48274909e5db67cb3c218950c6058486f6f/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a9f4dbdf3f874d2714678c76c0311cc9012517fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9f4dbdf3f874d2714678c76c0311cc9012517fa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a9f4dbdf3f874d2714678c76c0311cc9012517fa"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "60ccc1e97e3cd6183871d857098d753d9854637b",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87aaa48274909e5db67cb3c218950c6058486f6f/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87aaa48274909e5db67cb3c218950c6058486f6f/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=87aaa48274909e5db67cb3c218950c6058486f6f",
        "patch": "@@ -1366,7 +1366,7 @@ void CConnman::ThreadSocketHandler()\n         int nSelect = select(have_fds ? hSocketMax + 1 : 0,\n                              &fdsetRecv, &fdsetSend, &fdsetError, &timeout);\n         if (interruptNet)\n-            return;\n+            break;\n \n         if (nSelect == SOCKET_ERROR)\n         {\n@@ -1380,7 +1380,7 @@ void CConnman::ThreadSocketHandler()\n             FD_ZERO(&fdsetSend);\n             FD_ZERO(&fdsetError);\n             if (!interruptNet.sleep_for(std::chrono::milliseconds(timeout.tv_usec/1000)))\n-                return;\n+                break;\n         }\n \n         //\n@@ -1407,7 +1407,7 @@ void CConnman::ThreadSocketHandler()\n         for (CNode* pnode : vNodesCopy)\n         {\n             if (interruptNet)\n-                return;\n+                break;\n \n             //\n             // Receive\n@@ -2052,15 +2052,15 @@ void CConnman::ThreadMessageHandler()\n             bool fMoreNodeWork = m_msgproc->ProcessMessages(pnode, flagInterruptMsgProc);\n             fMoreWork |= (fMoreNodeWork && !pnode->fPauseSend);\n             if (flagInterruptMsgProc)\n-                return;\n+                break;\n             // Send messages\n             {\n                 LOCK(pnode->cs_sendProcessing);\n                 m_msgproc->SendMessages(pnode, flagInterruptMsgProc);\n             }\n \n             if (flagInterruptMsgProc)\n-                return;\n+                break;\n         }\n \n         {"
      }
    ]
  },
  {
    "sha": "17405ed1ad52180cb139e5ad4fcd8aac7b296056",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNzQwNWVkMWFkNTIxODBjYjEzOWU1YWQ0ZmNkOGFhYzdiMjk2MDU2",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-08-31T20:41:19Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-20T17:19:23Z"
      },
      "message": "net: move inactivity checking to its own function",
      "tree": {
        "sha": "654f84cf1f16495ed03b8540a85f4d86e5662cdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/654f84cf1f16495ed03b8540a85f4d86e5662cdd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/17405ed1ad52180cb139e5ad4fcd8aac7b296056",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17405ed1ad52180cb139e5ad4fcd8aac7b296056",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/17405ed1ad52180cb139e5ad4fcd8aac7b296056",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17405ed1ad52180cb139e5ad4fcd8aac7b296056/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "87aaa48274909e5db67cb3c218950c6058486f6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87aaa48274909e5db67cb3c218950c6058486f6f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/87aaa48274909e5db67cb3c218950c6058486f6f"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 35,
      "deletions": 29
    },
    "files": [
      {
        "sha": "c4ee8c33ba127f04be85af520b02a025ddc444bc",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 29,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17405ed1ad52180cb139e5ad4fcd8aac7b296056/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17405ed1ad52180cb139e5ad4fcd8aac7b296056/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=17405ed1ad52180cb139e5ad4fcd8aac7b296056",
        "patch": "@@ -1010,6 +1010,39 @@ size_t CConnman::SocketSendData(CNode *pnode) const\n     return nSentSize;\n }\n \n+void CConnman::CheckForTimeout(CNode* pnode)\n+{\n+    int64_t nTime = GetSystemTimeInSeconds();\n+    if (nTime - pnode->nTimeConnected > 60)\n+    {\n+        if (pnode->nLastRecv == 0 || pnode->nLastSend == 0)\n+        {\n+            LogPrint(BCLog::NET, \"socket no message in first 60 seconds, %d %d from %d\\n\", pnode->nLastRecv != 0, pnode->nLastSend != 0, pnode->GetId());\n+            pnode->Disconnect();\n+        }\n+        else if (nTime - pnode->nLastSend > TIMEOUT_INTERVAL)\n+        {\n+            LogPrintf(\"socket sending timeout: %is\\n\", nTime - pnode->nLastSend);\n+            pnode->Disconnect();\n+        }\n+        else if (nTime - pnode->nLastRecv > (pnode->nVersion > BIP0031_VERSION ? TIMEOUT_INTERVAL : 90*60))\n+        {\n+            LogPrintf(\"socket receive timeout: %is\\n\", nTime - pnode->nLastRecv);\n+            pnode->Disconnect();\n+        }\n+        else if (pnode->nPingNonceSent && pnode->nPingUsecStart + TIMEOUT_INTERVAL * 1000000 < GetTimeMicros())\n+        {\n+            LogPrintf(\"ping timeout: %fs\\n\", 0.000001 * (GetTimeMicros() - pnode->nPingUsecStart));\n+            pnode->Disconnect();\n+        }\n+        else if (!pnode->fSuccessfullyConnected)\n+        {\n+            LogPrintf(\"version handshake timeout from %d\\n\", pnode->GetId());\n+            pnode->Disconnect();\n+        }\n+    }\n+}\n+\n struct NodeEvictionCandidate\n {\n     NodeId id;\n@@ -1444,35 +1477,7 @@ void CConnman::ThreadSocketHandler()\n             //\n             // Inactivity checking\n             //\n-            int64_t nTime = GetSystemTimeInSeconds();\n-            if (nTime - pnode->nTimeConnected > 60)\n-            {\n-                if (pnode->nLastRecv == 0 || pnode->nLastSend == 0)\n-                {\n-                    LogPrint(BCLog::NET, \"socket no message in first 60 seconds, %d %d from %d\\n\", pnode->nLastRecv != 0, pnode->nLastSend != 0, pnode->GetId());\n-                    pnode->Disconnect();\n-                }\n-                else if (nTime - pnode->nLastSend > TIMEOUT_INTERVAL)\n-                {\n-                    LogPrintf(\"socket sending timeout: %is\\n\", nTime - pnode->nLastSend);\n-                    pnode->Disconnect();\n-                }\n-                else if (nTime - pnode->nLastRecv > (pnode->nVersion > BIP0031_VERSION ? TIMEOUT_INTERVAL : 90*60))\n-                {\n-                    LogPrintf(\"socket receive timeout: %is\\n\", nTime - pnode->nLastRecv);\n-                    pnode->Disconnect();\n-                }\n-                else if (pnode->nPingNonceSent && pnode->nPingUsecStart + TIMEOUT_INTERVAL * 1000000 < GetTimeMicros())\n-                {\n-                    LogPrintf(\"ping timeout: %fs\\n\", 0.000001 * (GetTimeMicros() - pnode->nPingUsecStart));\n-                    pnode->Disconnect();\n-                }\n-                else if (!pnode->fSuccessfullyConnected)\n-                {\n-                    LogPrintf(\"version handshake timeout from %d\\n\", pnode->GetId());\n-                    pnode->Disconnect();\n-                }\n-            }\n+            CheckForTimeout(pnode);\n         }\n         {\n             LOCK(cs_vNodes);"
      },
      {
        "sha": "438a0e6e62d3e84529b248d81d03f2e210d90c22",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17405ed1ad52180cb139e5ad4fcd8aac7b296056/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17405ed1ad52180cb139e5ad4fcd8aac7b296056/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=17405ed1ad52180cb139e5ad4fcd8aac7b296056",
        "patch": "@@ -350,6 +350,7 @@ class CConnman\n \n     size_t SocketReceiveData(CNode *pnode);\n     size_t SocketSendData(CNode *pnode) const;\n+    void CheckForTimeout(CNode* pnode);\n     //!check is the banlist has unwritten changes\n     bool BannedSetIsDirty();\n     //!set the \"dirty\" flag for the banlist"
      }
    ]
  },
  {
    "sha": "f5ffe414f04bf5f36536d71bc7260b827b703b9b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNWZmZTQxNGYwNGJmNWYzNjUzNmQ3MWJjNzI2MGI4MjdiNzAzYjli",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-08-31T20:54:09Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-20T17:19:23Z"
      },
      "message": "net: pass the socket/whitelist args directly to AcceptConnection\n\nSubsequent changes will turn AcceptConnection into a callback where the socket\nis one of the supplied params.",
      "tree": {
        "sha": "865233aeb7d63c93edf4b15bff20b2d3abfd6221",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/865233aeb7d63c93edf4b15bff20b2d3abfd6221"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f5ffe414f04bf5f36536d71bc7260b827b703b9b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5ffe414f04bf5f36536d71bc7260b827b703b9b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f5ffe414f04bf5f36536d71bc7260b827b703b9b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5ffe414f04bf5f36536d71bc7260b827b703b9b/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "17405ed1ad52180cb139e5ad4fcd8aac7b296056",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17405ed1ad52180cb139e5ad4fcd8aac7b296056",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/17405ed1ad52180cb139e5ad4fcd8aac7b296056"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 5,
      "deletions": 6
    },
    "files": [
      {
        "sha": "50a5047fbf37cba57a3b1ce367a7eaf6e2480bcb",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5ffe414f04bf5f36536d71bc7260b827b703b9b/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5ffe414f04bf5f36536d71bc7260b827b703b9b/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=f5ffe414f04bf5f36536d71bc7260b827b703b9b",
        "patch": "@@ -1189,13 +1189,12 @@ bool CConnman::AttemptToEvictConnection()\n     return false;\n }\n \n-void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n-\n+void CConnman::AcceptConnection(const SOCKET& listen_socket, bool whitelisted) {\n     struct sockaddr_storage sockaddr;\n     socklen_t len = sizeof(sockaddr);\n \n     NewConnection conn;\n-    conn.sock = accept(hListenSocket.socket, (struct sockaddr*)&sockaddr, &len);\n+    conn.sock = accept(listen_socket, (struct sockaddr*)&sockaddr, &len);\n     conn.remote_addr = CAddress();\n     conn.remote_str = \"\";\n     conn.count_failure = false;\n@@ -1204,7 +1203,7 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     conn.feeler = false;\n     conn.addnode = false;\n     conn.incoming = true;\n-    conn.whitelisted = hListenSocket.whitelisted;\n+    conn.whitelisted = whitelisted;\n \n     int nInbound = 0;\n     int nMaxInbound = nMaxConnections - (nMaxOutbound + nMaxFeeler);\n@@ -1423,7 +1422,7 @@ void CConnman::ThreadSocketHandler()\n         {\n             if (hListenSocket.socket != INVALID_SOCKET && FD_ISSET(hListenSocket.socket, &fdsetRecv))\n             {\n-                AcceptConnection(hListenSocket);\n+                AcceptConnection(hListenSocket.socket, hListenSocket.whitelisted);\n             }\n         }\n "
      },
      {
        "sha": "08b5b51b5bfabb8b73a73d27d849e92dae18045b",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5ffe414f04bf5f36536d71bc7260b827b703b9b/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5ffe414f04bf5f36536d71bc7260b827b703b9b/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=f5ffe414f04bf5f36536d71bc7260b827b703b9b",
        "patch": "@@ -327,7 +327,7 @@ class CConnman\n     void ProcessOneShot();\n     void ThreadOpenConnections(std::vector<std::string> connect);\n     void ThreadMessageHandler();\n-    void AcceptConnection(const ListenSocket& hListenSocket);\n+    void AcceptConnection(const SOCKET& socket, bool whitelisted);\n     void ThreadSocketHandler();\n     void ThreadDNSAddressSeed();\n "
      }
    ]
  },
  {
    "sha": "53d6bdfe82f7a1c35a0cc7325de212358c169c66",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1M2Q2YmRmZTgyZjdhMWMzNWEwY2M3MzI1ZGUyMTIzNThjMTY5YzY2",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-08-31T21:11:47Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-20T17:19:23Z"
      },
      "message": "net: add an event handler for future read/write callbacks\n\nFor now this just handles read/write/error/timeout conditions for each node\nserially, but OnEvents will soon be invoked as a callback when socket status\nchanges.",
      "tree": {
        "sha": "a749bbb10b7bd071c3df3274fdf787f9acdfe6b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a749bbb10b7bd071c3df3274fdf787f9acdfe6b1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/53d6bdfe82f7a1c35a0cc7325de212358c169c66",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53d6bdfe82f7a1c35a0cc7325de212358c169c66",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/53d6bdfe82f7a1c35a0cc7325de212358c169c66",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53d6bdfe82f7a1c35a0cc7325de212358c169c66/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f5ffe414f04bf5f36536d71bc7260b827b703b9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5ffe414f04bf5f36536d71bc7260b827b703b9b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f5ffe414f04bf5f36536d71bc7260b827b703b9b"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 24,
      "deletions": 29
    },
    "files": [
      {
        "sha": "262ffb8369e046c05c5b4b64d112182a71c55a8d",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 29,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53d6bdfe82f7a1c35a0cc7325de212358c169c66/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53d6bdfe82f7a1c35a0cc7325de212358c169c66/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=53d6bdfe82f7a1c35a0cc7325de212358c169c66",
        "patch": "@@ -967,12 +967,7 @@ size_t CConnman::SocketSendData(CNode *pnode) const\n     while (it != pnode->vSendMsg.end()) {\n         const auto &data = *it;\n         assert(data.size() > pnode->nSendOffset);\n-        int nBytes = 0;\n-        {\n-            if (pnode->hSocket == INVALID_SOCKET)\n-                break;\n-            nBytes = send(pnode->hSocket, reinterpret_cast<const char*>(data.data()) + pnode->nSendOffset, data.size() - pnode->nSendOffset, MSG_NOSIGNAL | MSG_DONTWAIT);\n-        }\n+        int nBytes = send(pnode->hSocket, reinterpret_cast<const char*>(data.data()) + pnode->nSendOffset, data.size() - pnode->nSendOffset, MSG_NOSIGNAL | MSG_DONTWAIT);\n         if (nBytes > 0) {\n             pnode->nLastSend = GetSystemTimeInSeconds();\n             pnode->nSendBytes += nBytes;\n@@ -1043,6 +1038,27 @@ void CConnman::CheckForTimeout(CNode* pnode)\n     }\n }\n \n+void CConnman::OnEvents(CNode* pnode, bool receive, bool send)\n+{\n+    if (!pnode->fDisconnect && receive)\n+    {\n+        size_t nBytes = SocketReceiveData(pnode);\n+        if (nBytes) {\n+            RecordBytesRecv(nBytes);\n+        }\n+    }\n+    if (!pnode->fDisconnect && send)\n+    {\n+        size_t nBytes = SocketSendData(pnode);\n+        if (nBytes) {\n+            RecordBytesSent(nBytes);\n+        }\n+    }\n+    if (!pnode->fDisconnect) {\n+        CheckForTimeout(pnode);\n+    }\n+}\n+\n struct NodeEvictionCandidate\n {\n     NodeId id;\n@@ -1454,29 +1470,7 @@ void CConnman::ThreadSocketHandler()\n                 sendSet = FD_ISSET(pnode->hSocket, &fdsetSend);\n                 errorSet = FD_ISSET(pnode->hSocket, &fdsetError);\n             }\n-            if (recvSet || errorSet)\n-            {\n-                size_t nBytes = SocketReceiveData(pnode);\n-                if (nBytes) {\n-                    RecordBytesRecv(nBytes);\n-                }\n-            }\n-\n-            //\n-            // Send\n-            //\n-            if (sendSet)\n-            {\n-                size_t nBytes = SocketSendData(pnode);\n-                if (nBytes) {\n-                    RecordBytesSent(nBytes);\n-                }\n-            }\n-\n-            //\n-            // Inactivity checking\n-            //\n-            CheckForTimeout(pnode);\n+            OnEvents(pnode, recvSet || errorSet, sendSet);\n         }\n         {\n             LOCK(cs_vNodes);"
      },
      {
        "sha": "6ea28aed40f03cae99d6e7836377c7319d835aa4",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53d6bdfe82f7a1c35a0cc7325de212358c169c66/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53d6bdfe82f7a1c35a0cc7325de212358c169c66/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=53d6bdfe82f7a1c35a0cc7325de212358c169c66",
        "patch": "@@ -351,6 +351,7 @@ class CConnman\n     size_t SocketReceiveData(CNode *pnode);\n     size_t SocketSendData(CNode *pnode) const;\n     void CheckForTimeout(CNode* pnode);\n+    void OnEvents(CNode* pnode, bool receive, bool send);\n     //!check is the banlist has unwritten changes\n     bool BannedSetIsDirty();\n     //!set the \"dirty\" flag for the banlist"
      }
    ]
  },
  {
    "sha": "de8b2342224030ae08850d4092876a0f3d89845a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZThiMjM0MjIyNDAzMGFlMDg4NTBkNDA5Mjg3NmEwZjNkODk4NDVh",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-08-31T23:17:02Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-20T17:19:23Z"
      },
      "message": "net: hook up minimal libevent usage for connection acceptance",
      "tree": {
        "sha": "4387332d168b4e40ba6d2645b41afff90a988917",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4387332d168b4e40ba6d2645b41afff90a988917"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/de8b2342224030ae08850d4092876a0f3d89845a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de8b2342224030ae08850d4092876a0f3d89845a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/de8b2342224030ae08850d4092876a0f3d89845a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de8b2342224030ae08850d4092876a0f3d89845a/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "53d6bdfe82f7a1c35a0cc7325de212358c169c66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53d6bdfe82f7a1c35a0cc7325de212358c169c66",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/53d6bdfe82f7a1c35a0cc7325de212358c169c66"
      }
    ],
    "stats": {
      "total": 122,
      "additions": 106,
      "deletions": 16
    },
    "files": [
      {
        "sha": "a51511c55a9f2a36c2de0b3b4ed955cdba2b3115",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 97,
        "deletions": 16,
        "changes": 113,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de8b2342224030ae08850d4092876a0f3d89845a/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de8b2342224030ae08850d4092876a0f3d89845a/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=de8b2342224030ae08850d4092876a0f3d89845a",
        "patch": "@@ -35,6 +35,8 @@\n #include <miniupnpc/upnperrors.h>\n #endif\n \n+#include <event2/event.h>\n+#include <event2/thread.h>\n \n #include <math.h>\n \n@@ -1059,6 +1061,23 @@ void CConnman::OnEvents(CNode* pnode, bool receive, bool send)\n     }\n }\n \n+void CConnman::InterruptEvents()\n+{\n+    // Only do this once\n+    {\n+        LOCK(m_cs_interrupt_event);\n+        if (!m_interrupt_event) {\n+            return;\n+        }\n+        event_free(m_interrupt_event);\n+        m_interrupt_event = nullptr;\n+    }\n+\n+    for (auto& event : m_listen_events) {\n+        event_del(event);\n+    }\n+}\n+\n struct NodeEvictionCandidate\n {\n     NodeId id;\n@@ -1287,6 +1306,26 @@ void CConnman::AcceptConnection(const SOCKET& listen_socket, bool whitelisted) {\n void CConnman::ThreadSocketHandler()\n {\n     unsigned int nPrevNodeCount = 0;\n+\n+    static const auto accept_whitelist_callback = [](evutil_socket_t sock, short events, void* data) {\n+        auto* connman = static_cast<CConnman*>(data);\n+        connman->AcceptConnection(sock, true);\n+    };\n+    static const auto accept_callback = [](evutil_socket_t sock, short events, void* data) {\n+        auto* connman = static_cast<CConnman*>(data);\n+        connman->AcceptConnection(sock, false);\n+    };\n+\n+    for (const auto& hListenSocket : vhListenSocket) {\n+        if (hListenSocket.whitelisted) {\n+            m_listen_events.push_back(event_new(m_event_base, hListenSocket.socket, EV_READ | EV_PERSIST, accept_whitelist_callback, this));\n+        } else {\n+            m_listen_events.push_back(event_new(m_event_base, hListenSocket.socket, EV_READ | EV_PERSIST, accept_callback, this));\n+        }\n+    }\n+    for (const auto& event : m_listen_events) {\n+        event_add(event, nullptr);\n+    }\n     while (!interruptNet)\n     {\n         //\n@@ -1366,11 +1405,8 @@ void CConnman::ThreadSocketHandler()\n         SOCKET hSocketMax = 0;\n         bool have_fds = false;\n \n-        for (const ListenSocket& hListenSocket : vhListenSocket) {\n-            FD_SET(hListenSocket.socket, &fdsetRecv);\n-            hSocketMax = std::max(hSocketMax, hListenSocket.socket);\n-            have_fds = true;\n-        }\n+        // Accept new connections\n+        event_base_loop(m_event_base, EVLOOP_NONBLOCK);\n \n         {\n             LOCK(cs_vNodes);\n@@ -1431,17 +1467,6 @@ void CConnman::ThreadSocketHandler()\n                 break;\n         }\n \n-        //\n-        // Accept new connections\n-        //\n-        for (const ListenSocket& hListenSocket : vhListenSocket)\n-        {\n-            if (hListenSocket.socket != INVALID_SOCKET && FD_ISSET(hListenSocket.socket, &fdsetRecv))\n-            {\n-                AcceptConnection(hListenSocket.socket, hListenSocket.whitelisted);\n-            }\n-        }\n-\n         //\n         // Service each socket\n         //\n@@ -1478,6 +1503,10 @@ void CConnman::ThreadSocketHandler()\n                 pnode->Release();\n         }\n     }\n+    for (auto& event : m_listen_events) {\n+        event_free(event);\n+    }\n+    m_listen_events.clear();\n }\n \n void CConnman::WakeMessageHandler()\n@@ -2385,6 +2414,36 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n         fMsgProcWake = false;\n     }\n \n+    bool working_event_threads;\n+#ifdef WIN32\n+    working_event_threads = evthread_use_windows_threads() == 0;\n+#else\n+    working_event_threads = evthread_use_pthreads() == 0;\n+#endif\n+\n+    if (!working_event_threads) {\n+        return false;\n+    }\n+\n+    event_config* cfg = event_config_new();\n+    event_config_set_flag(cfg, EVENT_BASE_FLAG_EPOLL_USE_CHANGELIST);\n+    m_event_base = event_base_new_with_config(cfg);\n+    if (!m_event_base) {\n+        return false;\n+    }\n+    event_config_free(cfg);\n+    if (evthread_make_base_notifiable(m_event_base) == -1) {\n+        return false;\n+    }\n+    const char* method = event_base_get_method(m_event_base);\n+    assert(method);\n+    LogPrintf(\"%s: Using %s for event loop\\n\", __func__, method);\n+\n+    {\n+        LOCK(m_cs_interrupt_event);\n+        m_interrupt_event = event_new(m_event_base, -1, 0, [](evutil_socket_t, short, void* data) {static_cast<CConnman*>(data)->InterruptEvents();}, (this));\n+    }\n+\n     // Send and receive from sockets, accept connections\n     threadSocketHandler = std::thread(&TraceThread<std::function<void()> >, \"net\", std::function<void()>(std::bind(&CConnman::ThreadSocketHandler, this)));\n \n@@ -2437,6 +2496,14 @@ void CConnman::Interrupt()\n         std::lock_guard<std::mutex> lock(mutexMsgProc);\n         flagInterruptMsgProc = true;\n     }\n+\n+    {\n+        LOCK(m_cs_interrupt_event);\n+        if (m_interrupt_event) {\n+            event_active(m_interrupt_event, 0, 0);\n+        }\n+    }\n+\n     condMsgProc.notify_all();\n \n     interruptNet();\n@@ -2474,6 +2541,8 @@ void CConnman::Stop()\n         fAddressesInitialized = false;\n     }\n \n+    assert(!m_event_base);\n+\n     // Close sockets\n     for (CNode* pnode : vNodes)\n         pnode->CloseSocketDisconnect();\n@@ -2496,6 +2565,18 @@ void CConnman::Stop()\n     semOutbound = nullptr;\n     delete semAddnode;\n     semAddnode = nullptr;\n+    {\n+        LOCK(m_cs_interrupt_event);\n+        if (m_interrupt_event) {\n+            event_free(m_interrupt_event);\n+            m_interrupt_event = nullptr;\n+        }\n+    }\n+\n+    if (m_event_base) {\n+        event_base_free(m_event_base);\n+        m_event_base = nullptr;\n+    }\n }\n \n void CConnman::DeleteNode(CNode* pnode)"
      },
      {
        "sha": "fcf6fd6fc038c79898b53effe36cb9e5841de70f",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de8b2342224030ae08850d4092876a0f3d89845a/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de8b2342224030ae08850d4092876a0f3d89845a/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=de8b2342224030ae08850d4092876a0f3d89845a",
        "patch": "@@ -37,6 +37,8 @@\n class CScheduler;\n class CNode;\n \n+struct event_base;\n+struct event;\n namespace boost {\n     class thread_group;\n } // namespace boost\n@@ -352,6 +354,7 @@ class CConnman\n     size_t SocketSendData(CNode *pnode) const;\n     void CheckForTimeout(CNode* pnode);\n     void OnEvents(CNode* pnode, bool receive, bool send);\n+    void InterruptEvents();\n     //!check is the banlist has unwritten changes\n     bool BannedSetIsDirty();\n     //!set the \"dirty\" flag for the banlist\n@@ -437,6 +440,12 @@ class CConnman\n     std::thread threadOpenAddedConnections;\n     std::thread threadOpenConnections;\n     std::thread threadMessageHandler;\n+\n+    event_base* m_event_base = nullptr;\n+    std::vector<event*> m_listen_events;\n+\n+    event* m_interrupt_event = nullptr;\n+    CCriticalSection m_cs_interrupt_event;\n };\n extern std::unique_ptr<CConnman> g_connman;\n void Discover(boost::thread_group& threadGroup);"
      }
    ]
  },
  {
    "sha": "c7f9e608e864114b09f9a703e9b3be280c5ae80d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjN2Y5ZTYwOGU4NjQxMTRiMDlmOWE3MDNlOWIzYmUyODBjNWFlODBk",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-03T18:00:08Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-20T17:19:23Z"
      },
      "message": "net: Only close the socket in once place\n\nBy only allowing the socket to be closed and the handle to be invalidated in\none place, it becomes much easier to reason about the status at any given time.",
      "tree": {
        "sha": "9459c6af9bb5cf8bd973ede86a594480b81e012f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9459c6af9bb5cf8bd973ede86a594480b81e012f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7f9e608e864114b09f9a703e9b3be280c5ae80d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7f9e608e864114b09f9a703e9b3be280c5ae80d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c7f9e608e864114b09f9a703e9b3be280c5ae80d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7f9e608e864114b09f9a703e9b3be280c5ae80d/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "de8b2342224030ae08850d4092876a0f3d89845a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de8b2342224030ae08850d4092876a0f3d89845a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/de8b2342224030ae08850d4092876a0f3d89845a"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 5,
      "deletions": 6
    },
    "files": [
      {
        "sha": "a8058dcc69d99679e0ded4aed4a331e4884b11e3",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7f9e608e864114b09f9a703e9b3be280c5ae80d/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7f9e608e864114b09f9a703e9b3be280c5ae80d/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=c7f9e608e864114b09f9a703e9b3be280c5ae80d",
        "patch": "@@ -900,7 +900,7 @@ size_t CConnman::SocketReceiveData(CNode* pnode)\n     {\n         bool notify = false;\n         if (!pnode->ReceiveMsgBytes(pchBuf, nBytes, notify))\n-            pnode->CloseSocketDisconnect();\n+            pnode->Disconnect();\n \n         auto it(pnode->vRecvMsg.begin());\n         size_t nSizeAdded = 0;\n@@ -941,17 +941,16 @@ size_t CConnman::SocketReceiveData(CNode* pnode)\n         if (!pnode->fDisconnect) {\n             LogPrint(BCLog::NET, \"socket closed\\n\");\n         }\n-        pnode->CloseSocketDisconnect();\n+        pnode->Disconnect();\n     }\n     else if (nBytes < 0)\n     {\n         // error\n         int nErr = WSAGetLastError();\n         if (nErr != WSAEWOULDBLOCK && nErr != WSAEMSGSIZE && nErr != WSAEINTR && nErr != WSAEINPROGRESS)\n         {\n-            if (!pnode->fDisconnect)\n-                LogPrintf(\"socket recv error %s\\n\", NetworkErrorString(nErr));\n-            pnode->CloseSocketDisconnect();\n+            LogPrintf(\"socket recv error %s\\n\", NetworkErrorString(nErr));\n+            pnode->Disconnect();\n         }\n     }\n     if (nBytes < 0) {\n@@ -991,7 +990,7 @@ size_t CConnman::SocketSendData(CNode *pnode) const\n                 if (nErr != WSAEWOULDBLOCK && nErr != WSAEMSGSIZE && nErr != WSAEINTR && nErr != WSAEINPROGRESS)\n                 {\n                     LogPrintf(\"socket send error %s\\n\", NetworkErrorString(nErr));\n-                    pnode->CloseSocketDisconnect();\n+                    pnode->Disconnect();\n                 }\n             }\n             // couldn't send anything at all"
      }
    ]
  },
  {
    "sha": "863d4998ba977beea6c41271bdc7f14175e76fb8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NjNkNDk5OGJhOTc3YmVlYTZjNDEyNzFiZGM3ZjE0MTc1ZTc2ZmI4",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-03T17:55:46Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-20T20:10:52Z"
      },
      "message": "net: switch to libevent for node socket handling",
      "tree": {
        "sha": "79fc25579e8481aaa971d5694358f21172edc745",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/79fc25579e8481aaa971d5694358f21172edc745"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/863d4998ba977beea6c41271bdc7f14175e76fb8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/863d4998ba977beea6c41271bdc7f14175e76fb8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/863d4998ba977beea6c41271bdc7f14175e76fb8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/863d4998ba977beea6c41271bdc7f14175e76fb8/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c7f9e608e864114b09f9a703e9b3be280c5ae80d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7f9e608e864114b09f9a703e9b3be280c5ae80d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c7f9e608e864114b09f9a703e9b3be280c5ae80d"
      }
    ],
    "stats": {
      "total": 412,
      "additions": 191,
      "deletions": 221
    },
    "files": [
      {
        "sha": "6ec33b57d613582c9086927efebab06262dfcbe5",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 181,
        "deletions": 217,
        "changes": 398,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/863d4998ba977beea6c41271bdc7f14175e76fb8/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/863d4998ba977beea6c41271bdc7f14175e76fb8/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=863d4998ba977beea6c41271bdc7f14175e76fb8",
        "patch": "@@ -362,6 +362,12 @@ static CAddress GetBindAddress(SOCKET sock)\n     return addr_bind;\n }\n \n+static void event_callback(evutil_socket_t, short events, void* data)\n+{\n+    auto* cb = static_cast<std::function<void(short)>*>(data);\n+    (*cb)(events);\n+}\n+\n // if successful, this moves the passed grant to the constructed node\n void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound, const char *pszDest, bool fOneShot, bool fFeeler, bool fAddnode)\n {\n@@ -513,7 +519,14 @@ void CConnman::DumpBanlist()\n \n void CNode::CloseSocketDisconnect()\n {\n-    Disconnect();\n+    if (m_write_event) {\n+        event_free(m_write_event);\n+        m_write_event = nullptr;\n+    }\n+    if (m_read_event) {\n+        event_free(m_read_event);\n+        m_read_event = nullptr;\n+    }\n     if (hSocket != INVALID_SOCKET)\n     {\n         LogPrint(BCLog::NET, \"disconnecting peer=%d\\n\", id);\n@@ -827,7 +840,23 @@ int CNode::GetSendVersion() const\n \n void CNode::EnableReceive()\n {\n-    fPauseRecv = false;\n+    if (fPauseRecv.exchange(false) && m_wake_event) {\n+        // Simply adding m_read_event here would cause us to begin reading even\n+        // if the send buffer was full. Instead, wake with a write event, and\n+        // receiving will be re-enabled when the send buffer is drained.\n+\n+        LogPrint(BCLog::NET, \"re-enabling receive for peer=%i\\n\", GetId());\n+        event_active(m_wake_event, EV_WRITE, 0);\n+    }\n+}\n+\n+void CNode::Disconnect()\n+{\n+    // Set the flag, and tell the event handler to do the disconnect on its next\n+    // pass through the loop\n+    if (!fDisconnect.exchange(true) && m_wake_event) {\n+        event_active(m_wake_event, 0, 0);\n+    }\n }\n \n int CNetMessage::readHeader(const char *pch, unsigned int nBytes)\n@@ -929,7 +958,9 @@ size_t CConnman::SocketReceiveData(CNode* pnode)\n                 pnode->vProcessMsg.splice(pnode->vProcessMsg.end(), pnode->vRecvMsg, pnode->vRecvMsg.begin(), it);\n                 pnode->nProcessQueueSize += nSizeAdded;\n                 if (pnode->nProcessQueueSize > nReceiveFloodSize) {\n+                    LogPrint(BCLog::NET, \"Disabling receive due to oversized process queue of size: %lu. peer=%i\\n\", pnode->nProcessQueueSize, pnode->GetId());\n                     pnode->fPauseRecv = true;\n+                    event_del(pnode->m_read_event);\n                 }\n             }\n             WakeMessageHandler();\n@@ -938,9 +969,7 @@ size_t CConnman::SocketReceiveData(CNode* pnode)\n     else if (nBytes == 0)\n     {\n         // socket closed gracefully\n-        if (!pnode->fDisconnect) {\n-            LogPrint(BCLog::NET, \"socket closed\\n\");\n-        }\n+        LogPrint(BCLog::NET, \"closing socket\\n\");\n         pnode->Disconnect();\n     }\n     else if (nBytes < 0)\n@@ -1003,6 +1032,24 @@ size_t CConnman::SocketSendData(CNode *pnode) const\n         assert(pnode->nSendSize == 0);\n     }\n     pnode->vSendMsg.erase(pnode->vSendMsg.begin(), it);\n+\n+    if (!pnode->fDisconnect) {\n+    // * If there is still data to send, add the write event here so that we'll wake\n+    //   when writing is again possible. As this only happens when the socket's send\n+    //   buffer is full, we choose to first drain the write buffer in this case before\n+    //   receiving more. This avoids needlessly queueing received data, if the remote peer\n+    //   is not themselves receiving data. This means properly utilizing TCP flow control signalling.\n+    // * Otherwise, if there is space left in the receive buffer, add the read event to\n+    //   resume receiving data\n+        if (pnode->vSendMsg.empty()) {\n+            if (!pnode->fPauseRecv) {\n+                event_add(pnode->m_read_event, nullptr);\n+            }\n+        } else {\n+            event_del(pnode->m_read_event);\n+            event_add(pnode->m_write_event, nullptr);\n+        }\n+    }\n     return nSentSize;\n }\n \n@@ -1039,24 +1086,59 @@ void CConnman::CheckForTimeout(CNode* pnode)\n     }\n }\n \n-void CConnman::OnEvents(CNode* pnode, bool receive, bool send)\n+void CConnman::OnEvents(CNode* pnode, short events)\n {\n-    if (!pnode->fDisconnect && receive)\n-    {\n-        size_t nBytes = SocketReceiveData(pnode);\n-        if (nBytes) {\n-            RecordBytesRecv(nBytes);\n+    if ((events & EV_TIMEOUT) && !pnode->fDisconnect) {\n+            CheckForTimeout(pnode);\n+    }\n+    if ((events & EV_READ) && !pnode->fDisconnect) {\n+        size_t received = SocketReceiveData(pnode);\n+        if (received) {\n+            RecordBytesRecv(received);\n+            if (!pnode->fDisconnect) {\n+                event_add(pnode->m_read_timeout_event, &m_event_timeout);\n+            }\n         }\n     }\n-    if (!pnode->fDisconnect && send)\n-    {\n+    if ((events & EV_WRITE) && !pnode->fDisconnect) {\n         size_t nBytes = SocketSendData(pnode);\n         if (nBytes) {\n             RecordBytesSent(nBytes);\n+            if (!pnode->fDisconnect) {\n+                event_add(pnode->m_write_timeout_event, &m_event_timeout);\n+            }\n         }\n     }\n-    if (!pnode->fDisconnect) {\n-        CheckForTimeout(pnode);\n+    if (pnode->fDisconnect)\n+    {\n+        size_t prev_node_count = 0;\n+        size_t node_count = 0;\n+        {\n+            LOCK(cs_vNodes);\n+            // remove from vNodes\n+            prev_node_count = vNodes.size();\n+            vNodes.erase(remove(vNodes.begin(), vNodes.end(), pnode), vNodes.end());\n+            node_count = vNodes.size();\n+            if (prev_node_count != node_count) {\n+                pnode->Release();\n+            }\n+\n+        }\n+        // If the node was just removed from vNodes, it needs to be disconnected\n+        // and cleaned up. Hold it in vNodesDisconnected until the refcount reaches\n+        // zero.\n+        if (prev_node_count != node_count) {\n+            vNodesDisconnected.push_back(pnode);\n+            pnode->CloseSocketDisconnect();\n+            pnode->grantOutbound.Release();\n+            if(clientInterface) {\n+                clientInterface->NotifyNumConnectionsChanged(node_count);\n+            }\n+        }\n+        if (pnode->GetRefCount() == 0) {\n+            vNodesDisconnected.remove(pnode);\n+            DeleteNode(pnode);\n+        }\n     }\n }\n \n@@ -1071,10 +1153,7 @@ void CConnman::InterruptEvents()\n         event_free(m_interrupt_event);\n         m_interrupt_event = nullptr;\n     }\n-\n-    for (auto& event : m_listen_events) {\n-        event_del(event);\n-    }\n+    event_base_loopbreak(m_event_base);\n }\n \n struct NodeEvictionCandidate\n@@ -1271,11 +1350,14 @@ void CConnman::AcceptConnection(const SOCKET& listen_socket, bool whitelisted) {\n         return;\n     }\n \n-    if (!IsSelectableSocket(conn.sock))\n-    {\n-        LogPrintf(\"connection from %s dropped: non-selectable socket\\n\", conn.remote_addr.ToString());\n-        CloseSocket(conn.sock);\n-        return;\n+    const char* method = event_base_get_method(m_event_base);\n+    if (!method || (strncmp(method, \"select\", 6) == 0)) {\n+        if (!IsSelectableSocket(conn.sock))\n+        {\n+            LogPrintf(\"connection from %s dropped: non-selectable socket\\n\", conn.remote_addr.ToString());\n+            CloseSocket(conn.sock);\n+            return;\n+        }\n     }\n \n     // According to the internet TCP_NODELAY is not carried into accepted sockets\n@@ -1304,8 +1386,6 @@ void CConnman::AcceptConnection(const SOCKET& listen_socket, bool whitelisted) {\n \n void CConnman::ThreadSocketHandler()\n {\n-    unsigned int nPrevNodeCount = 0;\n-\n     static const auto accept_whitelist_callback = [](evutil_socket_t sock, short events, void* data) {\n         auto* connman = static_cast<CConnman*>(data);\n         connman->AcceptConnection(sock, true);\n@@ -1325,187 +1405,50 @@ void CConnman::ThreadSocketHandler()\n     for (const auto& event : m_listen_events) {\n         event_add(event, nullptr);\n     }\n-    while (!interruptNet)\n+\n+    // This is the main event loop. A single call to event_base_dispatch will listen for events\n+    // and run their callbacks until all events have been cancelled, at which point the loop\n+    // exits.\n+    bool interrupted = false;\n+    while (true)\n     {\n-        //\n-        // Disconnect nodes\n-        //\n-        {\n-            LOCK(cs_vNodes);\n-            // Disconnect unused nodes\n-            std::vector<CNode*> vNodesCopy = vNodes;\n-            for (CNode* pnode : vNodesCopy)\n+        int ret = event_base_dispatch(m_event_base);\n+        if (ret == 0) {\n+            assert(event_base_got_break(m_event_base));\n+            interrupted = true;\n             {\n-                if (pnode->fDisconnect)\n-                {\n-                    // remove from vNodes\n-                    vNodes.erase(remove(vNodes.begin(), vNodes.end(), pnode), vNodes.end());\n-\n-                    // release outbound grant (if any)\n-                    pnode->grantOutbound.Release();\n-\n-                    // close socket and cleanup\n-                    pnode->CloseSocketDisconnect();\n-\n-                    // hold in disconnected pool until all refs are released\n-                    pnode->Release();\n-                    vNodesDisconnected.push_back(pnode);\n+                LOCK(cs_vNodes);\n+                for (CNode* pnode : vNodes) {\n+                    pnode->Disconnect();\n                 }\n             }\n-        }\n-        {\n-            // Delete disconnected nodes\n-            std::list<CNode*> vNodesDisconnectedCopy = vNodesDisconnected;\n-            for (CNode* pnode : vNodesDisconnectedCopy)\n-            {\n-                // wait until threads are done using it\n-                if (pnode->GetRefCount() <= 0) {\n-                    bool fDelete = false;\n-                    {\n-                        TRY_LOCK(pnode->cs_inventory, lockInv);\n-                        if (lockInv) {\n-                            TRY_LOCK(pnode->cs_vSend, lockSend);\n-                            if (lockSend) {\n-                                fDelete = true;\n-                            }\n-                        }\n-                    }\n-                    if (fDelete) {\n-                        vNodesDisconnected.remove(pnode);\n-                        DeleteNode(pnode);\n-                    }\n-                }\n+            for (auto& event : m_listen_events) {\n+                event_free(event);\n             }\n-        }\n-        size_t vNodesSize;\n-        {\n-            LOCK(cs_vNodes);\n-            vNodesSize = vNodes.size();\n-        }\n-        if(vNodesSize != nPrevNodeCount) {\n-            nPrevNodeCount = vNodesSize;\n-            if(clientInterface)\n-                clientInterface->NotifyNumConnectionsChanged(nPrevNodeCount);\n-        }\n-\n-        //\n-        // Find which sockets have data to receive\n-        //\n-        struct timeval timeout;\n-        timeout.tv_sec  = 0;\n-        timeout.tv_usec = 50000; // frequency to poll pnode->vSend\n-\n-        fd_set fdsetRecv;\n-        fd_set fdsetSend;\n-        fd_set fdsetError;\n-        FD_ZERO(&fdsetRecv);\n-        FD_ZERO(&fdsetSend);\n-        FD_ZERO(&fdsetError);\n-        SOCKET hSocketMax = 0;\n-        bool have_fds = false;\n-\n-        // Accept new connections\n-        event_base_loop(m_event_base, EVLOOP_NONBLOCK);\n-\n-        {\n-            LOCK(cs_vNodes);\n-            for (CNode* pnode : vNodes)\n-            {\n-                // Implement the following logic:\n-                // * If there is data to send, select() for sending data. As this only\n-                //   happens when optimistic write failed, we choose to first drain the\n-                //   write buffer in this case before receiving more. This avoids\n-                //   needlessly queueing received data, if the remote peer is not themselves\n-                //   receiving data. This means properly utilizing TCP flow control signalling.\n-                // * Otherwise, if there is space left in the receive buffer, select() for\n-                //   receiving data.\n-                // * Hand off all complete messages to the processor, to be handled without\n-                //   blocking here.\n-\n-                bool select_recv = !pnode->fPauseRecv;\n-                bool select_send;\n-                {\n-                    LOCK(pnode->cs_vSend);\n-                    select_send = !pnode->vSendMsg.empty();\n-                }\n-\n-                if (pnode->hSocket == INVALID_SOCKET)\n-                    continue;\n-\n-                FD_SET(pnode->hSocket, &fdsetError);\n-                hSocketMax = std::max(hSocketMax, pnode->hSocket);\n-                have_fds = true;\n-\n-                if (select_send) {\n-                    FD_SET(pnode->hSocket, &fdsetSend);\n-                    continue;\n-                }\n-                if (select_recv) {\n-                    FD_SET(pnode->hSocket, &fdsetRecv);\n-                }\n+            m_listen_events.clear();\n+        } else if (ret == 1) {\n+            // A return value of 1 means that no events are active or pending, which should only be\n+            // possible when the thread is first started. If there are no events yet, do a quick sleep\n+            // before retrying to avoid pegging the cpu.\n+            if (interrupted) {\n+                break;\n             }\n-        }\n-\n-        int nSelect = select(have_fds ? hSocketMax + 1 : 0,\n-                             &fdsetRecv, &fdsetSend, &fdsetError, &timeout);\n-        if (interruptNet)\n+            interruptNet.sleep_for(std::chrono::milliseconds(1));\n+        } else if (ret < 0) {\n+            LogPrintf(\"Unknown error running socket events. Please report this.\\n\");\n             break;\n-\n-        if (nSelect == SOCKET_ERROR)\n-        {\n-            if (have_fds)\n-            {\n-                int nErr = WSAGetLastError();\n-                LogPrintf(\"socket select error %s\\n\", NetworkErrorString(nErr));\n-                for (unsigned int i = 0; i <= hSocketMax; i++)\n-                    FD_SET(i, &fdsetRecv);\n-            }\n-            FD_ZERO(&fdsetSend);\n-            FD_ZERO(&fdsetError);\n-            if (!interruptNet.sleep_for(std::chrono::milliseconds(timeout.tv_usec/1000)))\n-                break;\n         }\n+    }\n+    // At this point, the loop has successfully terminated, so it is safe to assume that\n+    // all nodes have been destroyed.\n \n-        //\n-        // Service each socket\n-        //\n-        std::vector<CNode*> vNodesCopy;\n-        {\n-            LOCK(cs_vNodes);\n-            vNodesCopy = vNodes;\n-            for (CNode* pnode : vNodesCopy)\n-                pnode->AddRef();\n-        }\n-        for (CNode* pnode : vNodesCopy)\n-        {\n-            if (interruptNet)\n-                break;\n+    vhListenSocket.clear();\n \n-            //\n-            // Receive\n-            //\n-            bool recvSet = false;\n-            bool sendSet = false;\n-            bool errorSet = false;\n-            {\n-                if (pnode->hSocket == INVALID_SOCKET)\n-                    continue;\n-                recvSet = FD_ISSET(pnode->hSocket, &fdsetRecv);\n-                sendSet = FD_ISSET(pnode->hSocket, &fdsetSend);\n-                errorSet = FD_ISSET(pnode->hSocket, &fdsetError);\n-            }\n-            OnEvents(pnode, recvSet || errorSet, sendSet);\n-        }\n-        {\n-            LOCK(cs_vNodes);\n-            for (CNode* pnode : vNodesCopy)\n-                pnode->Release();\n-        }\n-    }\n-    for (auto& event : m_listen_events) {\n-        event_free(event);\n+    {\n+        LOCK(cs_vNodes);\n+        assert(vNodes.empty());\n     }\n-    m_listen_events.clear();\n+    assert(vNodesDisconnected.empty());\n }\n \n void CConnman::WakeMessageHandler()\n@@ -2025,6 +1968,15 @@ void CConnman::AddConnection(NewConnection conn)\n     uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n     CAddress addr_bind = GetBindAddress(conn.sock);\n     CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), conn.sock, conn.remote_addr, CalculateKeyedNetGroup(conn.remote_addr), nonce, addr_bind, conn.remote_str, conn.incoming);\n+    pnode->m_callback = [this, pnode](short events) {\n+        OnEvents(pnode, events);\n+    };\n+\n+    pnode->m_read_event = event_new(m_event_base, conn.sock, EV_READ | EV_PERSIST, event_callback, &pnode->m_callback);\n+    pnode->m_write_event = event_new(m_event_base, conn.sock, EV_WRITE, event_callback, &pnode->m_callback);\n+    pnode->m_read_timeout_event = event_new(m_event_base, -1, EV_PERSIST, event_callback, &pnode->m_callback);\n+    pnode->m_write_timeout_event = event_new(m_event_base, -1, EV_PERSIST, event_callback, &pnode->m_callback);\n+    pnode->m_wake_event = event_new(m_event_base, -1, 0, event_callback, &pnode->m_callback);\n     pnode->nServicesExpected = ServiceFlags(conn.remote_addr.nServices & nRelevantServices);\n     pnode->AddRef();\n \n@@ -2044,6 +1996,10 @@ void CConnman::AddConnection(NewConnection conn)\n         LOCK(cs_vNodes);\n         vNodes.push_back(pnode);\n     }\n+\n+    event_add(pnode->m_read_event, nullptr);\n+    event_add(pnode->m_read_timeout_event, &m_event_timeout);\n+    event_add(pnode->m_write_timeout_event, &m_event_timeout);\n }\n \n void CConnman::OnFailedOutgoingConnection(NewConnection conn)\n@@ -2091,8 +2047,16 @@ void CConnman::ThreadMessageHandler()\n \n         {\n             LOCK(cs_vNodes);\n-            for (CNode* pnode : vNodesCopy)\n+            for (CNode* pnode : vNodesCopy) {\n                 pnode->Release();\n+                // If the refcount is zero after releasing here, the node has\n+                // already been disconnected and the event loop has been waiting\n+                // For outstanding references to be dropped. In that case, wake the\n+                // loop so that it can be destroyed.\n+                if (pnode->GetRefCount() == 0) {\n+                    event_active(pnode->m_wake_event, 0, 0);\n+                }\n+            }\n         }\n \n         std::unique_lock<std::mutex> lock(mutexMsgProc);\n@@ -2442,6 +2406,9 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n         LOCK(m_cs_interrupt_event);\n         m_interrupt_event = event_new(m_event_base, -1, 0, [](evutil_socket_t, short, void* data) {static_cast<CConnman*>(data)->InterruptEvents();}, (this));\n     }\n+    m_event_timeout = timeval{60, 0};\n+    const timeval* common_timeout = event_base_init_common_timeout(m_event_base, &m_event_timeout);\n+    memcpy(&m_event_timeout, common_timeout, sizeof(m_event_timeout));\n \n     // Send and receive from sockets, accept connections\n     threadSocketHandler = std::thread(&TraceThread<std::function<void()> >, \"net\", std::function<void()>(std::bind(&CConnman::ThreadSocketHandler, this)));\n@@ -2540,26 +2507,6 @@ void CConnman::Stop()\n         fAddressesInitialized = false;\n     }\n \n-    assert(!m_event_base);\n-\n-    // Close sockets\n-    for (CNode* pnode : vNodes)\n-        pnode->CloseSocketDisconnect();\n-    for (ListenSocket& hListenSocket : vhListenSocket)\n-        if (hListenSocket.socket != INVALID_SOCKET)\n-            if (!CloseSocket(hListenSocket.socket))\n-                LogPrintf(\"CloseSocket(hListenSocket) failed with error %s\\n\", NetworkErrorString(WSAGetLastError()));\n-\n-    // clean up some globals (to help leak detection)\n-    for (CNode *pnode : vNodes) {\n-        DeleteNode(pnode);\n-    }\n-    for (CNode *pnode : vNodesDisconnected) {\n-        DeleteNode(pnode);\n-    }\n-    vNodes.clear();\n-    vNodesDisconnected.clear();\n-    vhListenSocket.clear();\n     delete semOutbound;\n     semOutbound = nullptr;\n     delete semAddnode;\n@@ -2586,6 +2533,13 @@ void CConnman::DeleteNode(CNode* pnode)\n     if(fUpdateConnectionTime) {\n         addrman.Connected(pnode->addr);\n     }\n+\n+    event_free(pnode->m_read_timeout_event);\n+    pnode->m_read_timeout_event = nullptr;\n+    event_free(pnode->m_write_timeout_event);\n+    pnode->m_write_timeout_event = nullptr;\n+    event_free(pnode->m_wake_event);\n+    pnode->m_wake_event = nullptr;\n     delete pnode;\n }\n \n@@ -2953,6 +2907,11 @@ void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n     {\n         LOCK(pnode->cs_vSend);\n \n+        if (!pnode->m_write_event) {\n+            return;\n+        }\n+        bool wake_send(pnode->vSendMsg.empty());\n+\n         //log total amount of bytes per command\n         pnode->mapSendBytesPerMsgCmd[msg.command] += nTotalSize;\n         pnode->nSendSize += nTotalSize;\n@@ -2962,6 +2921,11 @@ void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n         pnode->vSendMsg.push_back(std::move(serializedHeader));\n         if (nMessageSize)\n             pnode->vSendMsg.push_back(std::move(msg.data));\n+\n+        // If write queue was empty, notify the socket handler to start sending\n+        if (wake_send) {\n+            event_active(pnode->m_wake_event, EV_WRITE, 0);\n+        }\n     }\n }\n "
      },
      {
        "sha": "12e72422468256f16c5a19ee41ad5edb2bfae96a",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/863d4998ba977beea6c41271bdc7f14175e76fb8/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/863d4998ba977beea6c41271bdc7f14175e76fb8/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=863d4998ba977beea6c41271bdc7f14175e76fb8",
        "patch": "@@ -353,7 +353,7 @@ class CConnman\n     size_t SocketReceiveData(CNode *pnode);\n     size_t SocketSendData(CNode *pnode) const;\n     void CheckForTimeout(CNode* pnode);\n-    void OnEvents(CNode* pnode, bool receive, bool send);\n+    void OnEvents(CNode* pnode, short events);\n     void InterruptEvents();\n     //!check is the banlist has unwritten changes\n     bool BannedSetIsDirty();\n@@ -443,6 +443,7 @@ class CConnman\n \n     event_base* m_event_base = nullptr;\n     std::vector<event*> m_listen_events;\n+    timeval m_event_timeout;\n \n     event* m_interrupt_event = nullptr;\n     CCriticalSection m_cs_interrupt_event;\n@@ -746,14 +747,19 @@ class CNode\n     mutable CCriticalSection cs_addrName;\n     std::string addrName;\n \n+    event* m_read_event = nullptr;\n+    event* m_write_event = nullptr;\n+    event* m_read_timeout_event = nullptr;\n+    event* m_write_timeout_event = nullptr;\n+    event* m_wake_event = nullptr;\n+    std::function<void(short)> m_callback;\n+\n     // Our address, as reported by the peer\n     CService addrLocal;\n     mutable CCriticalSection cs_addrLocal;\n public:\n \n-    void Disconnect() {\n-        fDisconnect = true;\n-    }\n+    void Disconnect();\n     void EnableReceive();\n \n     NodeId GetId() const {"
      }
    ]
  },
  {
    "sha": "f3fc360b8eb92e74371f95424b9410471af6e624",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmM2ZjMzYwYjhlYjkyZTc0MzcxZjk1NDI0Yjk0MTA0NzFhZjZlNjI0",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-18T21:06:55Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-20T20:10:52Z"
      },
      "message": "Net: handle all new connections on the socket handler thread\n\nThis ensures that outgoing connections don't race with event teardown at\nshutdown.",
      "tree": {
        "sha": "a33440dee14b3fa5a9bbb2338aed121e99eadf57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a33440dee14b3fa5a9bbb2338aed121e99eadf57"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f3fc360b8eb92e74371f95424b9410471af6e624",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3fc360b8eb92e74371f95424b9410471af6e624",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f3fc360b8eb92e74371f95424b9410471af6e624",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3fc360b8eb92e74371f95424b9410471af6e624/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "863d4998ba977beea6c41271bdc7f14175e76fb8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/863d4998ba977beea6c41271bdc7f14175e76fb8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/863d4998ba977beea6c41271bdc7f14175e76fb8"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 45,
      "deletions": 2
    },
    "files": [
      {
        "sha": "7e0dd75ff7fb23df69b7caf85babc0feed0711b1",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 2,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3fc360b8eb92e74371f95424b9410471af6e624/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3fc360b8eb92e74371f95424b9410471af6e624/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=f3fc360b8eb92e74371f95424b9410471af6e624",
        "patch": "@@ -489,8 +489,12 @@ void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n     }\n     if (connected) {\n         if (IsSelectableSocket(conn.sock)) {\n-            attempt.success();\n-            AddConnection(std::move(conn));\n+            LOCK(m_cs_new_connections);\n+            if (m_connection_event) {\n+                attempt.success();\n+                m_new_connections.push_back(std::move(conn));\n+                event_active(m_connection_event, 0, 0);\n+            }\n             return;\n         }\n         LogPrintf(\"Cannot create connection: non-selectable socket created (fd >= FD_SETSIZE ?)\\n\");\n@@ -1426,6 +1430,19 @@ void CConnman::ThreadSocketHandler()\n                 event_free(event);\n             }\n             m_listen_events.clear();\n+            std::vector<NewConnection> interrupted_conns;\n+            {\n+                LOCK(m_cs_new_connections);\n+                if (m_connection_event) {\n+                    event_free(m_connection_event);\n+                    m_connection_event = nullptr;\n+                }\n+                interrupted_conns = std::move(m_new_connections);\n+                m_new_connections.clear();\n+            }\n+            for (auto& conn : interrupted_conns) {\n+                OnFailedOutgoingConnection(std::move(conn));\n+            }\n         } else if (ret == 1) {\n             // A return value of 1 means that no events are active or pending, which should only be\n             // possible when the thread is first started. If there are no events yet, do a quick sleep\n@@ -1448,6 +1465,10 @@ void CConnman::ThreadSocketHandler()\n         LOCK(cs_vNodes);\n         assert(vNodes.empty());\n     }\n+    {\n+        LOCK(m_cs_new_connections);\n+        assert(m_new_connections.empty());\n+    }\n     assert(vNodesDisconnected.empty());\n }\n \n@@ -2002,6 +2023,19 @@ void CConnman::AddConnection(NewConnection conn)\n     event_add(pnode->m_write_timeout_event, &m_event_timeout);\n }\n \n+void CConnman::OnNewConnections()\n+{\n+    std::vector<NewConnection> conns;\n+    {\n+        LOCK(m_cs_new_connections);\n+        conns = std::move(m_new_connections);\n+        m_new_connections.clear();\n+    }\n+    for (auto& conn : conns) {\n+        AddConnection(std::move(conn));\n+    }\n+}\n+\n void CConnman::OnFailedOutgoingConnection(NewConnection conn)\n {\n     CloseSocket(conn.sock);\n@@ -2406,6 +2440,10 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n         LOCK(m_cs_interrupt_event);\n         m_interrupt_event = event_new(m_event_base, -1, 0, [](evutil_socket_t, short, void* data) {static_cast<CConnman*>(data)->InterruptEvents();}, (this));\n     }\n+    {\n+        LOCK(m_cs_new_connections);\n+        m_connection_event = event_new(m_event_base, -1, 0, [](evutil_socket_t, short, void* data) {static_cast<CConnman*>(data)->OnNewConnections();}, (this));\n+    }\n     m_event_timeout = timeval{60, 0};\n     const timeval* common_timeout = event_base_init_common_timeout(m_event_base, &m_event_timeout);\n     memcpy(&m_event_timeout, common_timeout, sizeof(m_event_timeout));"
      },
      {
        "sha": "f69dfd54fae7f90e92ff87a5edf3fc6cf41ece28",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3fc360b8eb92e74371f95424b9410471af6e624/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3fc360b8eb92e74371f95424b9410471af6e624/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=f3fc360b8eb92e74371f95424b9410471af6e624",
        "patch": "@@ -343,6 +343,7 @@ class CConnman\n     bool AttemptToEvictConnection();\n     bool IsWhitelistedRange(const CNetAddr &addr);\n \n+    void OnNewConnections();\n     void OnFailedOutgoingConnection(NewConnection conn);\n     void AddConnection(NewConnection conn);\n \n@@ -447,6 +448,10 @@ class CConnman\n \n     event* m_interrupt_event = nullptr;\n     CCriticalSection m_cs_interrupt_event;\n+\n+    CCriticalSection m_cs_new_connections;\n+    std::vector<NewConnection> m_new_connections;\n+    event* m_connection_event = nullptr;\n };\n extern std::unique_ptr<CConnman> g_connman;\n void Discover(boost::thread_group& threadGroup);"
      }
    ]
  },
  {
    "sha": "77cee166e17e355306d2ca1a1d360e71c12d8350",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3N2NlZTE2NmUxN2UzNTUzMDZkMmNhMWExZDM2MGU3MWMxMmQ4MzUw",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-03T21:00:30Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-20T20:10:53Z"
      },
      "message": "net: optimization: use scatter/gather to send up to 16 messages at once",
      "tree": {
        "sha": "7a2028dd321f3ee3d78c8153e0fe1ac850705da4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a2028dd321f3ee3d78c8153e0fe1ac850705da4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/77cee166e17e355306d2ca1a1d360e71c12d8350",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77cee166e17e355306d2ca1a1d360e71c12d8350",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/77cee166e17e355306d2ca1a1d360e71c12d8350",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77cee166e17e355306d2ca1a1d360e71c12d8350/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f3fc360b8eb92e74371f95424b9410471af6e624",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3fc360b8eb92e74371f95424b9410471af6e624",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f3fc360b8eb92e74371f95424b9410471af6e624"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 54,
      "deletions": 12
    },
    "files": [
      {
        "sha": "363a025512a099bab38b1f946c3f66652e3b339a",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 12,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77cee166e17e355306d2ca1a1d360e71c12d8350/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77cee166e17e355306d2ca1a1d360e71c12d8350/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=77cee166e17e355306d2ca1a1d360e71c12d8350",
        "patch": "@@ -997,22 +997,54 @@ size_t CConnman::SocketSendData(CNode *pnode) const\n     LOCK(pnode->cs_vSend);\n     auto it = pnode->vSendMsg.begin();\n     size_t nSentSize = 0;\n+    size_t send_offset = pnode->nSendOffset;\n \n     while (it != pnode->vSendMsg.end()) {\n-        const auto &data = *it;\n-        assert(data.size() > pnode->nSendOffset);\n-        int nBytes = send(pnode->hSocket, reinterpret_cast<const char*>(data.data()) + pnode->nSendOffset, data.size() - pnode->nSendOffset, MSG_NOSIGNAL | MSG_DONTWAIT);\n+        assert(it->size() > send_offset);\n+        size_t prev_offset = send_offset;\n+// TODO: Make this an autoconf check\n+#ifndef WIN32\n+        static constexpr size_t max_combined_messages = 16;\n+        iovec iov[max_combined_messages] = {};\n+        msghdr hdr;\n+        hdr.msg_name = nullptr;\n+        hdr.msg_iov = iov;\n+        hdr.msg_iovlen = 0;\n+        hdr.msg_control = nullptr;\n+        hdr.msg_controllen = 0;\n+        hdr.msg_flags = 0;\n+        for (auto indexit = it; indexit != pnode->vSendMsg.end(); ++indexit) {\n+            iovec& elem = iov[hdr.msg_iovlen];\n+            elem.iov_base = indexit->data() + prev_offset;\n+            elem.iov_len = indexit->size() - prev_offset;\n+            prev_offset = 0;\n+            if (++hdr.msg_iovlen == max_combined_messages) {\n+                break;\n+            }\n+        }\n+\n+        int nBytes = sendmsg(pnode->hSocket, &hdr, MSG_NOSIGNAL | MSG_DONTWAIT);\n+#else\n+        int nBytes = send(pnode->hSocket, reinterpret_cast<const char*>(it->data()) + send_offset, it->size() - send_offset, MSG_NOSIGNAL | MSG_DONTWAIT);\n+#endif\n         if (nBytes > 0) {\n-            pnode->nLastSend = GetSystemTimeInSeconds();\n-            pnode->nSendBytes += nBytes;\n-            pnode->nSendOffset += nBytes;\n             nSentSize += nBytes;\n-            if (pnode->nSendOffset == data.size()) {\n-                pnode->nSendOffset = 0;\n-                pnode->nSendSize -= data.size();\n-                pnode->fPauseSend = pnode->nSendSize > nSendBufferMaxSize;\n-                it++;\n-            } else {\n+            size_t bytes_to_process = nBytes;\n+            bool done = false;\n+            while (it != pnode->vSendMsg.end() && bytes_to_process > 0) {\n+                size_t msg_bytes_needed = it->size() - send_offset;\n+                if (msg_bytes_needed > bytes_to_process) {\n+                    send_offset += bytes_to_process;\n+                    bytes_to_process = 0;\n+                    done = true;\n+                    break;\n+                }\n+                bytes_to_process -= msg_bytes_needed;\n+                send_offset = 0;\n+                ++it;\n+            }\n+            assert(bytes_to_process == 0);\n+            if (done) {\n                 // could not send full message; stop sending more\n                 break;\n             }\n@@ -1031,6 +1063,16 @@ size_t CConnman::SocketSendData(CNode *pnode) const\n         }\n     }\n \n+    if (nSentSize) {\n+        pnode->nLastSend = GetSystemTimeInSeconds();\n+        pnode->nSendBytes += nSentSize;\n+        pnode->nSendOffset = send_offset;\n+        pnode->nSendSize -= nSentSize;\n+        if (it != pnode->vSendMsg.begin()) {\n+            pnode->fPauseSend = pnode->nSendSize > nSendBufferMaxSize;\n+        }\n+    }\n+\n     if (it == pnode->vSendMsg.end()) {\n         assert(pnode->nSendOffset == 0);\n         assert(pnode->nSendSize == 0);"
      }
    ]
  }
]