[
  {
    "sha": "815c7a679316e34b2072a45949ad4ecb1ae1c7fb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MTVjN2E2NzkzMTZlMzRiMjA3MmE0NTk0OWFkNGVjYjFhZTFjN2Zi",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-01-31T22:37:07Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-03-09T15:16:36Z"
      },
      "message": "tests: Add basic fuzzing harness for CNetAddr/CService/CSubNet related functions (netaddress.h)",
      "tree": {
        "sha": "51dd712578cfd8d3204edcc5287807dad029a00b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/51dd712578cfd8d3204edcc5287807dad029a00b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/815c7a679316e34b2072a45949ad4ecb1ae1c7fb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/815c7a679316e34b2072a45949ad4ecb1ae1c7fb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/815c7a679316e34b2072a45949ad4ecb1ae1c7fb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/815c7a679316e34b2072a45949ad4ecb1ae1c7fb/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "31b2ce70fb279e886da636716e45ec75bca0a711",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31b2ce70fb279e886da636716e45ec75bca0a711",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/31b2ce70fb279e886da636716e45ec75bca0a711"
      }
    ],
    "stats": {
      "total": 131,
      "additions": 131,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c9beb91a420c19e4e6ee5adb9a38f69766cefa7d",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/815c7a679316e34b2072a45949ad4ecb1ae1c7fb/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/815c7a679316e34b2072a45949ad4ecb1ae1c7fb/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=815c7a679316e34b2072a45949ad4ecb1ae1c7fb",
        "patch": "@@ -42,6 +42,7 @@ FUZZ_TARGETS = \\\n   test/fuzz/merkle_block_deserialize \\\n   test/fuzz/messageheader_deserialize \\\n   test/fuzz/netaddr_deserialize \\\n+  test/fuzz/netaddress \\\n   test/fuzz/out_point_deserialize \\\n   test/fuzz/p2p_transport_deserializer \\\n   test/fuzz/parse_hd_keypath \\\n@@ -475,6 +476,12 @@ test_fuzz_netaddr_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_netaddr_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_netaddr_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n \n+test_fuzz_netaddress_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_netaddress_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_netaddress_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_netaddress_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_netaddress_SOURCES = $(FUZZ_SUITE) test/fuzz/netaddress.cpp\n+\n test_fuzz_out_point_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DOUT_POINT_DESERIALIZE=1\n test_fuzz_out_point_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_out_point_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)"
      },
      {
        "sha": "7d87ebc21474eff07f08b5ad14b7221726298235",
        "filename": "src/test/fuzz/netaddress.cpp",
        "status": "added",
        "additions": 123,
        "deletions": 0,
        "changes": 123,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/815c7a679316e34b2072a45949ad4ecb1ae1c7fb/src/test/fuzz/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/815c7a679316e34b2072a45949ad4ecb1ae1c7fb/src/test/fuzz/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/netaddress.cpp?ref=815c7a679316e34b2072a45949ad4ecb1ae1c7fb",
        "patch": "@@ -0,0 +1,123 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <netaddress.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+\n+#include <cassert>\n+#include <cstdint>\n+#include <netinet/in.h>\n+#include <vector>\n+\n+namespace {\n+CNetAddr ConsumeNetAddr(FuzzedDataProvider& fuzzed_data_provider) noexcept\n+{\n+    const Network network = fuzzed_data_provider.PickValueInArray({Network::NET_IPV4, Network::NET_IPV6, Network::NET_INTERNAL, Network::NET_ONION});\n+    if (network == Network::NET_IPV4) {\n+        const in_addr v4_addr = {\n+            .s_addr = fuzzed_data_provider.ConsumeIntegral<uint32_t>()};\n+        return CNetAddr{v4_addr};\n+    } else if (network == Network::NET_IPV6) {\n+        if (fuzzed_data_provider.remaining_bytes() < 16) {\n+            return CNetAddr{};\n+        }\n+        in6_addr v6_addr = {};\n+        memcpy(v6_addr.s6_addr, fuzzed_data_provider.ConsumeBytes<uint8_t>(16).data(), 16);\n+        return CNetAddr{v6_addr, fuzzed_data_provider.ConsumeIntegral<uint32_t>()};\n+    } else if (network == Network::NET_INTERNAL) {\n+        CNetAddr net_addr;\n+        net_addr.SetInternal(fuzzed_data_provider.ConsumeBytesAsString(32));\n+        return net_addr;\n+    } else if (network == Network::NET_ONION) {\n+        CNetAddr net_addr;\n+        net_addr.SetSpecial(fuzzed_data_provider.ConsumeBytesAsString(32));\n+        return net_addr;\n+    } else {\n+        assert(false);\n+    }\n+}\n+}; // namespace\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const CNetAddr net_addr = ConsumeNetAddr(fuzzed_data_provider);\n+    for (int i = 0; i < 15; ++i) {\n+        (void)net_addr.GetByte(i);\n+    }\n+    (void)net_addr.GetHash();\n+    (void)net_addr.GetNetClass();\n+    if (net_addr.GetNetwork() == Network::NET_IPV4) {\n+        assert(net_addr.IsIPv4());\n+    }\n+    if (net_addr.GetNetwork() == Network::NET_IPV6) {\n+        assert(net_addr.IsIPv6());\n+    }\n+    if (net_addr.GetNetwork() == Network::NET_ONION) {\n+        assert(net_addr.IsTor());\n+    }\n+    if (net_addr.GetNetwork() == Network::NET_INTERNAL) {\n+        assert(net_addr.IsInternal());\n+    }\n+    if (net_addr.GetNetwork() == Network::NET_UNROUTABLE) {\n+        assert(!net_addr.IsRoutable());\n+    }\n+    (void)net_addr.IsBindAny();\n+    if (net_addr.IsInternal()) {\n+        assert(net_addr.GetNetwork() == Network::NET_INTERNAL);\n+    }\n+    if (net_addr.IsIPv4()) {\n+        assert(net_addr.GetNetwork() == Network::NET_IPV4 || net_addr.GetNetwork() == Network::NET_UNROUTABLE);\n+    }\n+    if (net_addr.IsIPv6()) {\n+        assert(net_addr.GetNetwork() == Network::NET_IPV6 || net_addr.GetNetwork() == Network::NET_UNROUTABLE);\n+    }\n+    (void)net_addr.IsLocal();\n+    if (net_addr.IsRFC1918() || net_addr.IsRFC2544() || net_addr.IsRFC6598() || net_addr.IsRFC5737() || net_addr.IsRFC3927()) {\n+        assert(net_addr.IsIPv4());\n+    }\n+    (void)net_addr.IsRFC2544();\n+    if (net_addr.IsRFC3849() || net_addr.IsRFC3964() || net_addr.IsRFC4380() || net_addr.IsRFC4843() || net_addr.IsRFC7343() || net_addr.IsRFC4862() || net_addr.IsRFC6052() || net_addr.IsRFC6145()) {\n+        assert(net_addr.IsIPv6());\n+    }\n+    (void)net_addr.IsRFC3927();\n+    (void)net_addr.IsRFC3964();\n+    if (net_addr.IsRFC4193()) {\n+        assert(net_addr.GetNetwork() == Network::NET_ONION || net_addr.GetNetwork() == Network::NET_INTERNAL || net_addr.GetNetwork() == Network::NET_UNROUTABLE);\n+    }\n+    (void)net_addr.IsRFC4380();\n+    (void)net_addr.IsRFC4843();\n+    (void)net_addr.IsRFC4862();\n+    (void)net_addr.IsRFC5737();\n+    (void)net_addr.IsRFC6052();\n+    (void)net_addr.IsRFC6145();\n+    (void)net_addr.IsRFC6598();\n+    (void)net_addr.IsRFC7343();\n+    if (!net_addr.IsRoutable()) {\n+        assert(net_addr.GetNetwork() == Network::NET_UNROUTABLE || net_addr.GetNetwork() == Network::NET_INTERNAL);\n+    }\n+    if (net_addr.IsTor()) {\n+        assert(net_addr.GetNetwork() == Network::NET_ONION);\n+    }\n+    (void)net_addr.IsValid();\n+    (void)net_addr.ToString();\n+    (void)net_addr.ToStringIP();\n+\n+    const CSubNet sub_net{net_addr, fuzzed_data_provider.ConsumeIntegral<int32_t>()};\n+    (void)sub_net.IsValid();\n+    (void)sub_net.ToString();\n+\n+    const CService service{net_addr, fuzzed_data_provider.ConsumeIntegral<uint16_t>()};\n+    (void)service.GetKey();\n+    (void)service.GetPort();\n+    (void)service.ToString();\n+    (void)service.ToStringIPPort();\n+    (void)service.ToStringPort();\n+\n+    const CNetAddr other_net_addr = ConsumeNetAddr(fuzzed_data_provider);\n+    (void)net_addr.GetReachabilityFrom(&other_net_addr);\n+    (void)sub_net.Match(other_net_addr);\n+}"
      },
      {
        "sha": "b4ea30b49cb4506cf71f6f341ac9f230e2983f1c",
        "filename": "test/fuzz/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/815c7a679316e34b2072a45949ad4ecb1ae1c7fb/test/fuzz/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/815c7a679316e34b2072a45949ad4ecb1ae1c7fb/test/fuzz/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fuzz/test_runner.py?ref=815c7a679316e34b2072a45949ad4ecb1ae1c7fb",
        "patch": "@@ -14,6 +14,7 @@\n \n # Fuzzers known to lack a seed corpus in https://github.com/bitcoin-core/qa-assets/tree/master/fuzz_seed_corpus\n FUZZERS_MISSING_CORPORA = [\n+    \"netaddress\",\n ]\n \n "
      }
    ]
  },
  {
    "sha": "6590395f6047cbfbe29f491d816c25c9a28d23a2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NTkwMzk1ZjYwNDdjYmZiZTI5ZjQ5MWQ4MTZjMjVjOWEyOGQyM2Ey",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-03-09T17:20:52Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-03-09T17:20:52Z"
      },
      "message": "tests: Remove FUZZERS_MISSING_CORPORA",
      "tree": {
        "sha": "a2ae9b5ce41164112dbe4289eb9a65a9d6ce2f37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a2ae9b5ce41164112dbe4289eb9a65a9d6ce2f37"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6590395f6047cbfbe29f491d816c25c9a28d23a2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6590395f6047cbfbe29f491d816c25c9a28d23a2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6590395f6047cbfbe29f491d816c25c9a28d23a2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6590395f6047cbfbe29f491d816c25c9a28d23a2/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "815c7a679316e34b2072a45949ad4ecb1ae1c7fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/815c7a679316e34b2072a45949ad4ecb1ae1c7fb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/815c7a679316e34b2072a45949ad4ecb1ae1c7fb"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 15,
      "deletions": 7
    },
    "files": [
      {
        "sha": "520a2b5a959e5ff944cfabb50b69f8342b618edf",
        "filename": "test/fuzz/test_runner.py",
        "status": "modified",
        "additions": 15,
        "deletions": 7,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6590395f6047cbfbe29f491d816c25c9a28d23a2/test/fuzz/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6590395f6047cbfbe29f491d816c25c9a28d23a2/test/fuzz/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fuzz/test_runner.py?ref=6590395f6047cbfbe29f491d816c25c9a28d23a2",
        "patch": "@@ -12,11 +12,6 @@\n import subprocess\n import logging\n \n-# Fuzzers known to lack a seed corpus in https://github.com/bitcoin-core/qa-assets/tree/master/fuzz_seed_corpus\n-FUZZERS_MISSING_CORPORA = [\n-    \"netaddress\",\n-]\n-\n \n def main():\n     parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n@@ -95,6 +90,20 @@ def main():\n \n     logging.info(\"{} of {} detected fuzz target(s) selected: {}\".format(len(test_list_selection), len(test_list_all), \" \".join(test_list_selection)))\n \n+    test_list_seedless = []\n+    for t in test_list_selection:\n+        corpus_path = os.path.join(args.seed_dir, t)\n+        if not os.path.exists(corpus_path) or len(os.listdir(corpus_path)) == 0:\n+            test_list_seedless.append(t)\n+    test_list_seedless.sort()\n+    if test_list_seedless:\n+        logging.info(\n+            \"Fuzzing harnesses lacking a seed corpus: {}\".format(\n+                \" \".join(test_list_seedless)\n+            )\n+        )\n+        logging.info(\"Please consider adding a fuzz seed corpus at https://github.com/bitcoin-core/qa-assets\")\n+\n     try:\n         help_output = subprocess.run(\n             args=[\n@@ -125,8 +134,7 @@ def main():\n def run_once(*, corpus, test_list, build_dir, export_coverage, use_valgrind):\n     for t in test_list:\n         corpus_path = os.path.join(corpus, t)\n-        if t in FUZZERS_MISSING_CORPORA:\n-            os.makedirs(corpus_path, exist_ok=True)\n+        os.makedirs(corpus_path, exist_ok=True)\n         args = [\n             os.path.join(build_dir, 'src', 'test', 'fuzz', t),\n             '-runs=1',"
      }
    ]
  }
]