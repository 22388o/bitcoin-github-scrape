[
  {
    "sha": "149f580c82922a3b79e4e7fd6ed85adcc0522d91",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNDlmNTgwYzgyOTIyYTNiNzllNGU3ZmQ2ZWQ4NWFkY2MwNTIyZDkx",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2012-01-18T18:36:44Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2012-01-23T17:54:32Z"
      },
      "message": "Only store transactions with missing inputs in the orphan pool.\n\nAll previous versions of bitcoin could store some types of\ninvalid transactions in the orphan-transaction list.",
      "tree": {
        "sha": "5eb9af2cc8d0ab2a5d537f6b1052129cda188e74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5eb9af2cc8d0ab2a5d537f6b1052129cda188e74"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/149f580c82922a3b79e4e7fd6ed85adcc0522d91",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/149f580c82922a3b79e4e7fd6ed85adcc0522d91",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/149f580c82922a3b79e4e7fd6ed85adcc0522d91",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/149f580c82922a3b79e4e7fd6ed85adcc0522d91/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dc77dce07cd1f528b7bd2b4c9594cd4647866b08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc77dce07cd1f528b7bd2b4c9594cd4647866b08",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dc77dce07cd1f528b7bd2b4c9594cd4647866b08"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 22,
      "deletions": 7
    },
    "files": [
      {
        "sha": "e3b98b2e6ef253f319a8ac0e9ac74813fe793adf",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 6,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/149f580c82922a3b79e4e7fd6ed85adcc0522d91/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/149f580c82922a3b79e4e7fd6ed85adcc0522d91/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=149f580c82922a3b79e4e7fd6ed85adcc0522d91",
        "patch": "@@ -492,8 +492,11 @@ bool CTransaction::AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs, bool* pfMi\n     {\n         MapPrevTx mapInputs;\n         map<uint256, CTxIndex> mapUnused;\n-        if (!FetchInputs(txdb, mapUnused, false, false, mapInputs))\n+        bool fInvalid = false;\n+        if (!FetchInputs(txdb, mapUnused, false, false, mapInputs, fInvalid))\n         {\n+            if (fInvalid)\n+                return error(\"AcceptToMemoryPool() : FetchInputs found invalid tx %s\", hash.ToString().substr(0,10).c_str());\n             if (pfMissingInputs)\n                 *pfMissingInputs = true;\n             return error(\"AcceptToMemoryPool() : FetchInputs failed %s\", hash.ToString().substr(0,10).c_str());\n@@ -546,8 +549,6 @@ bool CTransaction::AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs, bool* pfMi\n         // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n         if (!ConnectInputs(mapInputs, mapUnused, CDiskTxPos(1,1,1), pindexBest, false, false))\n         {\n-            if (pfMissingInputs)\n-                *pfMissingInputs = true;\n             return error(\"AcceptToMemoryPool() : ConnectInputs failed %s\", hash.ToString().substr(0,10).c_str());\n         }\n     }\n@@ -923,8 +924,14 @@ bool CTransaction::DisconnectInputs(CTxDB& txdb)\n \n \n bool CTransaction::FetchInputs(CTxDB& txdb, const map<uint256, CTxIndex>& mapTestPool,\n-                               bool fBlock, bool fMiner, MapPrevTx& inputsRet)\n+                               bool fBlock, bool fMiner, MapPrevTx& inputsRet, bool& fInvalid)\n {\n+    // FetchInputs can return false either because we just haven't seen some inputs\n+    // (in which case the transaction should be stored as an orphan)\n+    // or because the transaction is malformed (in which case the transaction should\n+    // be dropped).  If tx is definitely invalid, fInvalid will be set to true.\n+    fInvalid = false;\n+\n     if (IsCoinBase())\n         return true; // Coinbase transactions have no inputs to fetch.\n \n@@ -980,7 +987,12 @@ bool CTransaction::FetchInputs(CTxDB& txdb, const map<uint256, CTxIndex>& mapTes\n         const CTxIndex& txindex = inputsRet[prevout.hash].first;\n         const CTransaction& txPrev = inputsRet[prevout.hash].second;\n         if (prevout.n >= txPrev.vout.size() || prevout.n >= txindex.vSpent.size())\n+        {\n+            // Revisit this if/when transaction replacement is implemented and allows\n+            // adding inputs:\n+            fInvalid = true;\n             return DoS(100, error(\"FetchInputs() : %s prevout.n out of range %d %d %d prev tx %s\\n%s\", GetHash().ToString().substr(0,10).c_str(), prevout.n, txPrev.vout.size(), txindex.vSpent.size(), prevout.hash.ToString().substr(0,10).c_str(), txPrev.ToString().c_str()));\n+        }\n     }\n \n     return true;\n@@ -1203,7 +1215,8 @@ bool CBlock::ConnectBlock(CTxDB& txdb, CBlockIndex* pindex)\n         MapPrevTx mapInputs;\n         if (!tx.IsCoinBase())\n         {\n-            if (!tx.FetchInputs(txdb, mapQueuedChanges, true, false, mapInputs))\n+            bool fInvalid;\n+            if (!tx.FetchInputs(txdb, mapQueuedChanges, true, false, mapInputs, fInvalid))\n                 return false;\n \n             int nTxOps = tx.GetSigOpCount(mapInputs);\n@@ -3063,7 +3076,8 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n             // because we're already processing them in order of dependency\n             map<uint256, CTxIndex> mapTestPoolTmp(mapTestPool);\n             MapPrevTx mapInputs;\n-            if (!tx.FetchInputs(txdb, mapTestPoolTmp, false, true, mapInputs))\n+            bool fInvalid;\n+            if (!tx.FetchInputs(txdb, mapTestPoolTmp, false, true, mapInputs, fInvalid))\n                 continue;\n \n             int64 nFees = tx.GetValueIn(mapInputs)-tx.GetValueOut();"
      },
      {
        "sha": "ec5623d17de3f0ac731a9638c46845d8cbd5c37c",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/149f580c82922a3b79e4e7fd6ed85adcc0522d91/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/149f580c82922a3b79e4e7fd6ed85adcc0522d91/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=149f580c82922a3b79e4e7fd6ed85adcc0522d91",
        "patch": "@@ -684,10 +684,11 @@ class CTransaction\n      @param[in] fBlock\tTrue if being called to add a new best-block to the chain\n      @param[in] fMiner\tTrue if being called by CreateNewBlock\n      @param[out] inputsRet\tPointers to this transaction's inputs\n+     @param[out] fInvalid\treturns true if transaction is invalid\n      @return\tReturns true if all inputs are in txdb or mapTestPool\n      */\n     bool FetchInputs(CTxDB& txdb, const std::map<uint256, CTxIndex>& mapTestPool,\n-                     bool fBlock, bool fMiner, MapPrevTx& inputsRet);\n+                     bool fBlock, bool fMiner, MapPrevTx& inputsRet, bool& fInvalid);\n \n     /** Sanity check previous transactions, then, if all checks succeed,\n         mark them as spent by this transaction."
      }
    ]
  }
]