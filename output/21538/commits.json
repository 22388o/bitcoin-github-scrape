[
  {
    "sha": "0ea0870e2ef406057890af974bf1979990b8d3b0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZWEwODcwZTJlZjQwNjA1Nzg5MGFmOTc0YmYxOTc5OTkwYjhkM2Iw",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2021-05-22T08:29:26Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2021-05-23T21:34:37Z"
      },
      "message": "Add syscall sandboxing (seccomp-bpf)",
      "tree": {
        "sha": "caf829e668d4c883cbe108dab0e75c9ffe71a3aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/caf829e668d4c883cbe108dab0e75c9ffe71a3aa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0ea0870e2ef406057890af974bf1979990b8d3b0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ea0870e2ef406057890af974bf1979990b8d3b0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0ea0870e2ef406057890af974bf1979990b8d3b0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ea0870e2ef406057890af974bf1979990b8d3b0/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "be4171679b8eab8205e04ff86140329bd67878a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be4171679b8eab8205e04ff86140329bd67878a0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/be4171679b8eab8205e04ff86140329bd67878a0"
      }
    ],
    "stats": {
      "total": 734,
      "additions": 731,
      "deletions": 3
    },
    "files": [
      {
        "sha": "60ccd23f6f6b086a14b7a09f5978a8bf95813e6b",
        "filename": "ci/test/00_setup_env_native_nowallet.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ea0870e2ef406057890af974bf1979990b8d3b0/ci/test/00_setup_env_native_nowallet.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ea0870e2ef406057890af974bf1979990b8d3b0/ci/test/00_setup_env_native_nowallet.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_nowallet.sh?ref=0ea0870e2ef406057890af974bf1979990b8d3b0",
        "patch": "@@ -11,4 +11,4 @@ export DOCKER_NAME_TAG=ubuntu:18.04  # Use bionic to have one config run the tes\n export PACKAGES=\"python3-zmq clang-5.0 llvm-5.0\"  # Use clang-5 to test C++17 compatibility, see doc/dependencies.md\n export DEP_OPTS=\"NO_WALLET=1\"\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports CC=clang-5.0 CXX=clang++-5.0 --enable-external-signer\"\n+export BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports CC=clang-5.0 CXX=clang++-5.0 --with-syscall-sandbox\""
      },
      {
        "sha": "63cdd11ef9b0e170598d74363c325b72e880be1b",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 41,
        "deletions": 1,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ea0870e2ef406057890af974bf1979990b8d3b0/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ea0870e2ef406057890af974bf1979990b8d3b0/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=0ea0870e2ef406057890af974bf1979990b8d3b0",
        "patch": "@@ -71,6 +71,24 @@ case $host in\n   ;;\n esac\n \n+AC_ARG_WITH([syscall-sandbox],\n+  [AS_HELP_STRING([--with-syscall-sandbox=yes|no|kill-without-debug],\n+  [enable filtering of system calls using seccomp-bpf: allow only allowlisted (expected) syscalls to be called from bitcoind. The default behaviour of the syscall sandbox in case of syscall policy violation is for the kernel to disallow the syscall and force a SIGSYS to trigger the application's syscall debug reporter. The application's syscall debug reporter will print an error message and terminate the process. The mode \"kill-without-debug\" (--with-syscall-sandbox=kill-without-debug) can be used to make the kernel kill the process immediately in case of a syscall policy violation. This mode of operation is more secure in the sense that the kernel guarantees that the offending process is killed. This mode is harder to debug since no debug information is printed in case of a syscall violation.])],\n+  [use_syscall_sandbox=$withval],\n+  [use_syscall_sandbox=no])\n+if test \"x$use_syscall_sandbox\" != \"xno\"; then\n+  AC_DEFINE(USE_SYSCALL_SANDBOX, 1, [Define this symbol to build with syscall sandbox support.])\n+  if test \"x$use_syscall_sandbox\" = \"xyes\"; then\n+    true\n+  elif test \"x$use_syscall_sandbox\" = \"xkill-without-debug\"; then\n+    AC_DEFINE(USE_SYSCALL_SANDBOX_MODE_KILL_WITHOUT_DEBUG, 1, [Define this symbol to have the kernel kill the process immediately without any debug information in case of a syscall sandbox violation.])\n+  else\n+    AC_MSG_ERROR([Unknown --with-syscall-sandbox option. Valid options are \"yes\", \"no\" and \"kill-without-debug\".])\n+  fi\n+fi\n+AM_CONDITIONAL([ENABLE_SYSCALL_SANDBOX], [test \"x$use_syscall_sandbox\" != \"xno\"])\n+AM_CONDITIONAL([ENABLE_SYSCALL_SANDBOX_MODE_KILL_WITHOUT_DEBUG], [test \"x$use_syscall_sandbox\" = \"xkill-without-debug\"])\n+\n dnl Require C++17 compiler (no GNU extensions)\n AX_CXX_COMPILE_STDCXX([17], [noext], [mandatory])\n \n@@ -1241,7 +1259,7 @@ AC_LINK_IFELSE(\n     [ AC_MSG_RESULT(no) ]\n )\n \n-AC_DEFINE([HAVE_SYSTEM], [HAVE_STD__SYSTEM || HAVE_WSYSTEM], [std::system or ::wsystem])\n+AC_DEFINE([HAVE_SYSTEM], [(HAVE_STD__SYSTEM || HAVE_WSYSTEM) && !USE_SYSCALL_SANDBOX], [std::system or ::wsystem, and no syscall sandbox])\n \n LEVELDB_CPPFLAGS=\n LIBLEVELDB=\n@@ -1444,6 +1462,27 @@ fi\n \n AM_CONDITIONAL([ENABLE_EXTERNAL_SIGNER], [test \"x$use_external_signer\" = \"xyes\"])\n \n+if test \"x$use_syscall_sandbox\" != \"xno\"; then\n+  AC_MSG_CHECKING([for working syscall sandbox])\n+  AC_PREPROC_IFELSE([AC_LANG_PROGRAM([[\n+      @%:@include <linux/seccomp.h>\n+    ]], [[\n+      #if !defined(__x86_64__)\n+      #  error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+      #endif\n+    ]])],[\n+      AC_MSG_RESULT(yes)\n+    ],[\n+    AC_MSG_ERROR([Syscall sandbox is an experimental feature currently available only under Linux x86-64. Use --without-syscall-sandbox.])\n+  ])\n+  if test \"x$use_external_signer\" = \"xyes\"; then\n+    AC_MSG_ERROR(The options --with-syscall-sandbox (which does not allow execve) and --enable-external-signer (which uses execve) are currently incompatible.)\n+  fi\n+  if test \"x$build_multiprocess\" = \"xyes\"; then\n+    AC_MSG_ERROR(The options --with-syscall-sandbox (which does not allow execve) and --enable-multiprocess (which uses execve) are currently incompatible.)\n+  fi\n+fi\n+\n dnl Check for reduced exports\n if test x$use_reduce_exports = xyes; then\n   AX_CHECK_COMPILE_FLAG([-fvisibility=hidden],[CXXFLAGS=\"$CXXFLAGS -fvisibility=hidden\"],\n@@ -1954,6 +1993,7 @@ echo \"  with upnp       = $use_upnp\"\n echo \"  with natpmp     = $use_natpmp\"\n echo \"  use asm         = $use_asm\"\n echo \"  ebpf tracing    = $have_sdt\"\n+echo \"  use syscall sandbox = $use_syscall_sandbox\"\n echo \"  sanitizers      = $use_sanitizers\"\n echo \"  debug enabled   = $enable_debug\"\n echo \"  gprof enabled   = $enable_gprof\""
      },
      {
        "sha": "cdf7b4f97fddd73a2609b2ed0c862ac0961bccc3",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ea0870e2ef406057890af974bf1979990b8d3b0/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ea0870e2ef406057890af974bf1979990b8d3b0/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=0ea0870e2ef406057890af974bf1979990b8d3b0",
        "patch": "@@ -257,6 +257,7 @@ BITCOIN_CORE_H = \\\n   util/sock.h \\\n   util/spanparsing.h \\\n   util/string.h \\\n+  util/syscall_sandbox.h \\\n   util/system.h \\\n   util/thread.h \\\n   util/threadnames.h \\\n@@ -597,6 +598,7 @@ libbitcoin_util_a_SOURCES = \\\n   util/spanparsing.cpp \\\n   util/strencodings.cpp \\\n   util/string.cpp \\\n+  util/syscall_sandbox.cpp \\\n   util/time.cpp \\\n   util/tokenpipe.cpp \\\n   $(BITCOIN_CORE_H)"
      },
      {
        "sha": "100346547ac283eac098af5eda77219a76fe1e30",
        "filename": "src/bench/bench_bitcoin.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ea0870e2ef406057890af974bf1979990b8d3b0/src/bench/bench_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ea0870e2ef406057890af974bf1979990b8d3b0/src/bench/bench_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench_bitcoin.cpp?ref=0ea0870e2ef406057890af974bf1979990b8d3b0",
        "patch": "@@ -6,6 +6,7 @@\n \n #include <crypto/sha256.h>\n #include <util/strencodings.h>\n+#include <util/syscall_sandbox.h>\n #include <util/system.h>\n \n #include <memory>\n@@ -38,6 +39,9 @@ static std::vector<double> parseAsymptote(const std::string& str) {\n \n int main(int argc, char** argv)\n {\n+    // bench_bitcoin uses performance measurement related syscalls such as perf_event_open which\n+    // are not allowed by the bitcoind syscall sandbox policy. Disable syscall sandbox.\n+    DisableFurtherSyscallSandboxRestrictions();\n     ArgsManager argsman;\n     SetupBenchArgs(argsman);\n     SHA256AutoDetect();"
      },
      {
        "sha": "daa5f7aef4a2448fad4e13841e1e644bc52cb92b",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ea0870e2ef406057890af974bf1979990b8d3b0/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ea0870e2ef406057890af974bf1979990b8d3b0/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=0ea0870e2ef406057890af974bf1979990b8d3b0",
        "patch": "@@ -15,6 +15,7 @@\n #include <rpc/request.h>\n #include <tinyformat.h>\n #include <util/strencodings.h>\n+#include <util/syscall_sandbox.h>\n #include <util/system.h>\n #include <util/translation.h>\n #include <util/url.h>\n@@ -1024,6 +1025,8 @@ __declspec(dllexport) int main(int argc, char* argv[])\n int main(int argc, char* argv[])\n {\n #endif\n+    EnableSyscallSandbox(SyscallSandboxPolicy::INITIALIZATION);\n+    DisableFurtherSyscallSandboxRestrictions();\n     SetupEnvironment();\n     if (!SetupNetworking()) {\n         tfm::format(std::cerr, \"Error: Initializing networking failed\\n\");"
      },
      {
        "sha": "9b908b99c60f67e88de55cf6293a98331ff6009a",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ea0870e2ef406057890af974bf1979990b8d3b0/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ea0870e2ef406057890af974bf1979990b8d3b0/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=0ea0870e2ef406057890af974bf1979990b8d3b0",
        "patch": "@@ -22,6 +22,7 @@\n #include <util/rbf.h>\n #include <util/strencodings.h>\n #include <util/string.h>\n+#include <util/syscall_sandbox.h>\n #include <util/system.h>\n #include <util/translation.h>\n \n@@ -840,6 +841,8 @@ static int CommandLineRawTx(int argc, char* argv[])\n \n int main(int argc, char* argv[])\n {\n+    EnableSyscallSandbox(SyscallSandboxPolicy::INITIALIZATION);\n+    DisableFurtherSyscallSandboxRestrictions();\n     SetupEnvironment();\n \n     try {"
      },
      {
        "sha": "e39ebf43b9382555bf6a908efd53cf24b608df05",
        "filename": "src/bitcoin-util.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ea0870e2ef406057890af974bf1979990b8d3b0/src/bitcoin-util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ea0870e2ef406057890af974bf1979990b8d3b0/src/bitcoin-util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-util.cpp?ref=0ea0870e2ef406057890af974bf1979990b8d3b0",
        "patch": "@@ -22,6 +22,7 @@\n #include <util/rbf.h>\n #include <util/strencodings.h>\n #include <util/string.h>\n+#include <util/syscall_sandbox.h>\n #include <util/system.h>\n #include <util/translation.h>\n \n@@ -193,6 +194,8 @@ __declspec(dllexport) int main(int argc, char* argv[])\n int main(int argc, char* argv[])\n #endif\n {\n+    EnableSyscallSandbox(SyscallSandboxPolicy::INITIALIZATION);\n+    DisableFurtherSyscallSandboxRestrictions();\n     SetupEnvironment();\n \n     try {"
      },
      {
        "sha": "f4c928ce58242aa922db21cdac3a61058a8fafef",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ea0870e2ef406057890af974bf1979990b8d3b0/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ea0870e2ef406057890af974bf1979990b8d3b0/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=0ea0870e2ef406057890af974bf1979990b8d3b0",
        "patch": "@@ -9,6 +9,7 @@\n #include <chainparams.h>\n #include <chainparamsbase.h>\n #include <logging.h>\n+#include <util/syscall_sandbox.h>\n #include <util/system.h>\n #include <util/translation.h>\n #include <util/url.h>\n@@ -78,6 +79,8 @@ static bool WalletAppInit(ArgsManager& args, int argc, char* argv[])\n \n int main(int argc, char* argv[])\n {\n+    EnableSyscallSandbox(SyscallSandboxPolicy::INITIALIZATION);\n+    DisableFurtherSyscallSandboxRestrictions();\n     ArgsManager& args = gArgs;\n #ifdef WIN32\n     util::WinCmdLineArgs winArgs;"
      },
      {
        "sha": "e46b6c078f4c80fd6b11546d97b1455492be0467",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ea0870e2ef406057890af974bf1979990b8d3b0/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ea0870e2ef406057890af974bf1979990b8d3b0/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=0ea0870e2ef406057890af974bf1979990b8d3b0",
        "patch": "@@ -19,6 +19,7 @@\n #include <shutdown.h>\n #include <util/check.h>\n #include <util/strencodings.h>\n+#include <util/syscall_sandbox.h>\n #include <util/system.h>\n #include <util/threadnames.h>\n #include <util/tokenpipe.h>\n@@ -238,6 +239,7 @@ static bool AppInit(NodeContext& node, int argc, char* argv[])\n         daemon_ep.Close();\n     }\n #endif\n+    EnableSyscallSandbox(SyscallSandboxPolicy::SHUTOFF);\n     if (fRet) {\n         WaitForShutdown();\n     }\n@@ -249,6 +251,7 @@ static bool AppInit(NodeContext& node, int argc, char* argv[])\n \n int main(int argc, char* argv[])\n {\n+    EnableSyscallSandbox(SyscallSandboxPolicy::INITIALIZATION);\n #ifdef WIN32\n     util::WinCmdLineArgs winArgs;\n     std::tie(argc, argv) = winArgs.get();"
      },
      {
        "sha": "8a31c848c3012711827816ce4d1c4d8657429952",
        "filename": "src/checkqueue.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ea0870e2ef406057890af974bf1979990b8d3b0/src/checkqueue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ea0870e2ef406057890af974bf1979990b8d3b0/src/checkqueue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkqueue.h?ref=0ea0870e2ef406057890af974bf1979990b8d3b0",
        "patch": "@@ -7,6 +7,7 @@\n \n #include <sync.h>\n #include <tinyformat.h>\n+#include <util/syscall_sandbox.h>\n #include <util/threadnames.h>\n \n #include <algorithm>\n@@ -151,6 +152,7 @@ class CCheckQueue\n         for (int n = 0; n < threads_num; ++n) {\n             m_worker_threads.emplace_back([this, n]() {\n                 util::ThreadRename(strprintf(\"scriptch.%i\", n));\n+                EnableSyscallSandbox(SyscallSandboxPolicy::VALIDATION_SCRIPT_CHECK);\n                 Loop(false /* worker thread */);\n             });\n         }"
      },
      {
        "sha": "2c8d4fad8e4521b8bf57fc2f0394bcaa4e8016a4",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ea0870e2ef406057890af974bf1979990b8d3b0/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ea0870e2ef406057890af974bf1979990b8d3b0/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=0ea0870e2ef406057890af974bf1979990b8d3b0",
        "patch": "@@ -12,6 +12,7 @@\n #include <shutdown.h>\n #include <sync.h>\n #include <util/strencodings.h>\n+#include <util/syscall_sandbox.h>\n #include <util/system.h>\n #include <util/threadnames.h>\n #include <util/translation.h>\n@@ -279,6 +280,7 @@ static void http_reject_request_cb(struct evhttp_request* req, void*)\n static bool ThreadHTTP(struct event_base* base)\n {\n     util::ThreadRename(\"http\");\n+    EnableSyscallSandbox(SyscallSandboxPolicy::NET_HTTP_SERVER);\n     LogPrint(BCLog::HTTP, \"Entering http event loop\\n\");\n     event_base_dispatch(base);\n     // Event loop will be interrupted by InterruptHTTPServer()\n@@ -332,6 +334,7 @@ static bool HTTPBindAddresses(struct evhttp* http)\n static void HTTPWorkQueueRun(WorkQueue<HTTPClosure>* queue, int worker_num)\n {\n     util::ThreadRename(strprintf(\"httpworker.%i\", worker_num));\n+    EnableSyscallSandbox(SyscallSandboxPolicy::NET_HTTP_SERVER_WORKER);\n     queue->Run();\n }\n "
      },
      {
        "sha": "9646cac44c70b2517ec5234da75821ec8f6d22b4",
        "filename": "src/index/base.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ea0870e2ef406057890af974bf1979990b8d3b0/src/index/base.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ea0870e2ef406057890af974bf1979990b8d3b0/src/index/base.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.cpp?ref=0ea0870e2ef406057890af974bf1979990b8d3b0",
        "patch": "@@ -8,6 +8,8 @@\n #include <node/ui_interface.h>\n #include <shutdown.h>\n #include <tinyformat.h>\n+#include <util/syscall_sandbox.h>\n+#include <util/system.h>\n #include <util/thread.h>\n #include <util/translation.h>\n #include <validation.h> // For g_chainman\n@@ -122,6 +124,7 @@ static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev) EXCLUSIV\n \n void BaseIndex::ThreadSync()\n {\n+    EnableSyscallSandbox(SyscallSandboxPolicy::TX_INDEX);\n     const CBlockIndex* pindex = m_best_block_index.load();\n     if (!m_synced) {\n         auto& consensus_params = Params().GetConsensus();"
      },
      {
        "sha": "a65d286000270a5251efbf4b21078011c2347cbb",
        "filename": "src/logging.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ea0870e2ef406057890af974bf1979990b8d3b0/src/logging.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ea0870e2ef406057890af974bf1979990b8d3b0/src/logging.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.cpp?ref=0ea0870e2ef406057890af974bf1979990b8d3b0",
        "patch": "@@ -158,6 +158,7 @@ const CLogCategoryDesc LogCategories[] =\n     {BCLog::VALIDATION, \"validation\"},\n     {BCLog::I2P, \"i2p\"},\n     {BCLog::IPC, \"ipc\"},\n+    {BCLog::UTIL, \"util\"},\n     {BCLog::ALL, \"1\"},\n     {BCLog::ALL, \"all\"},\n };"
      },
      {
        "sha": "e912adbbf8e3e6878101af84f63171c6313ec1e8",
        "filename": "src/logging.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ea0870e2ef406057890af974bf1979990b8d3b0/src/logging.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ea0870e2ef406057890af974bf1979990b8d3b0/src/logging.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.h?ref=0ea0870e2ef406057890af974bf1979990b8d3b0",
        "patch": "@@ -59,6 +59,7 @@ namespace BCLog {\n         VALIDATION  = (1 << 21),\n         I2P         = (1 << 22),\n         IPC         = (1 << 23),\n+        UTIL        = (1 << 24),\n         ALL         = ~(uint32_t)0,\n     };\n "
      },
      {
        "sha": "2beb3a029aaf2c9a409bb0391a89ee66ce1931e7",
        "filename": "src/mapport.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ea0870e2ef406057890af974bf1979990b8d3b0/src/mapport.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ea0870e2ef406057890af974bf1979990b8d3b0/src/mapport.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/mapport.cpp?ref=0ea0870e2ef406057890af974bf1979990b8d3b0",
        "patch": "@@ -14,6 +14,7 @@\n #include <netaddress.h>\n #include <netbase.h>\n #include <threadinterrupt.h>\n+#include <util/syscall_sandbox.h>\n #include <util/system.h>\n #include <util/thread.h>\n \n@@ -222,6 +223,7 @@ static bool ProcessUpnp()\n \n static void ThreadMapPort()\n {\n+    EnableSyscallSandbox(SyscallSandboxPolicy::INITIALIZATION_MAP_PORT);\n     bool ok;\n     do {\n         ok = false;"
      },
      {
        "sha": "4a6ca0df34c9371b89281f19f75b4c176392d868",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ea0870e2ef406057890af974bf1979990b8d3b0/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ea0870e2ef406057890af974bf1979990b8d3b0/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=0ea0870e2ef406057890af974bf1979990b8d3b0",
        "patch": "@@ -24,6 +24,7 @@\n #include <scheduler.h>\n #include <util/sock.h>\n #include <util/strencodings.h>\n+#include <util/syscall_sandbox.h>\n #include <util/thread.h>\n #include <util/translation.h>\n \n@@ -1570,6 +1571,7 @@ void CConnman::SocketHandler()\n \n void CConnman::ThreadSocketHandler()\n {\n+    EnableSyscallSandbox(SyscallSandboxPolicy::NET);\n     while (!interruptNet)\n     {\n         DisconnectNodes();\n@@ -1589,6 +1591,7 @@ void CConnman::WakeMessageHandler()\n \n void CConnman::ThreadDNSAddressSeed()\n {\n+    EnableSyscallSandbox(SyscallSandboxPolicy::INITIALIZATION_DNS_SEED);\n     FastRandomContext rng;\n     std::vector<std::string> seeds = Params().DNSSeeds();\n     Shuffle(seeds.begin(), seeds.end(), rng);\n@@ -1772,6 +1775,7 @@ int CConnman::GetExtraBlockRelayCount() const\n \n void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n {\n+    EnableSyscallSandbox(SyscallSandboxPolicy::NET_OPEN_CONNECTION);\n     // Connect to specific addresses\n     if (!connect.empty())\n     {\n@@ -2110,6 +2114,7 @@ std::vector<AddedNodeInfo> CConnman::GetAddedNodeInfo() const\n \n void CConnman::ThreadOpenAddedConnections()\n {\n+    EnableSyscallSandbox(SyscallSandboxPolicy::NET_ADD_CONNECTION);\n     while (true)\n     {\n         CSemaphoreGrant grant(*semAddnode);\n@@ -2173,6 +2178,7 @@ void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n \n void CConnman::ThreadMessageHandler()\n {\n+    EnableSyscallSandbox(SyscallSandboxPolicy::MESSAGE_HANDLER);\n     while (!flagInterruptMsgProc)\n     {\n         std::vector<CNode*> vNodesCopy;"
      },
      {
        "sha": "fca234fa78522678f44b732c7eef9644905c686a",
        "filename": "src/node/blockstorage.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ea0870e2ef406057890af974bf1979990b8d3b0/src/node/blockstorage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ea0870e2ef406057890af974bf1979990b8d3b0/src/node/blockstorage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/blockstorage.cpp?ref=0ea0870e2ef406057890af974bf1979990b8d3b0",
        "patch": "@@ -16,6 +16,7 @@\n #include <signet.h>\n #include <streams.h>\n #include <undo.h>\n+#include <util/syscall_sandbox.h>\n #include <util/system.h>\n #include <validation.h>\n \n@@ -494,6 +495,7 @@ struct CImportingNow {\n \n void ThreadImport(ChainstateManager& chainman, std::vector<fs::path> vImportFiles, const ArgsManager& args)\n {\n+    EnableSyscallSandbox(SyscallSandboxPolicy::INITIALIZATION_LOAD_BLOCKS);\n     const CChainParams& chainparams = Params();\n     ScheduleBatchPriority();\n "
      },
      {
        "sha": "7e4c7eb850e85a17c6f495a4363beeb87450c1ca",
        "filename": "src/qt/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ea0870e2ef406057890af974bf1979990b8d3b0/src/qt/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ea0870e2ef406057890af974bf1979990b8d3b0/src/qt/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/main.cpp?ref=0ea0870e2ef406057890af974bf1979990b8d3b0",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <qt/bitcoin.h>\n \n+#include <util/syscall_sandbox.h>\n #include <util/translation.h>\n #include <util/url.h>\n \n@@ -18,4 +19,8 @@ extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = [](cons\n };\n UrlDecodeFn* const URL_DECODE = urlDecode;\n \n-int main(int argc, char* argv[]) { return GuiMain(argc, argv); }\n+int main(int argc, char* argv[])\n+{\n+    DisableFurtherSyscallSandboxRestrictions();\n+    return GuiMain(argc, argv);\n+}"
      },
      {
        "sha": "63b5fc1ed19fb677109067c3f9477e5b603ad238",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ea0870e2ef406057890af974bf1979990b8d3b0/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ea0870e2ef406057890af974bf1979990b8d3b0/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=0ea0870e2ef406057890af974bf1979990b8d3b0",
        "patch": "@@ -30,6 +30,12 @@\n #include <malloc.h>\n #endif\n \n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <array>\n+#include <sys/types.h>\n+#include <unistd.h>\n+#endif\n+\n #include <univalue.h>\n \n static RPCHelpMan validateaddress()\n@@ -406,6 +412,30 @@ static RPCHelpMan setmocktime()\n     };\n }\n \n+#if defined(USE_SYSCALL_SANDBOX)\n+static RPCHelpMan invokedisallowedsyscall()\n+{\n+    return RPCHelpMan{\n+        \"invokedisallowedsyscall\",\n+        \"\\nInvoke a disallowed syscall to trigger a syscall sandbox violation. Used for testing purposes.\\n\",\n+        {},\n+        RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n+        RPCExamples{\n+            HelpExampleCli(\"invokedisallowedsyscall\", \"\") + HelpExampleRpc(\"invokedisallowedsyscall\", \"\")},\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue {\n+            if (!Params().IsTestChain()) {\n+                throw std::runtime_error(\"invokedisallowedsyscall is used for testing only.\");\n+            }\n+\n+            // The getgroups syscall is assumed NOT to be allowed by the syscall sandbox policy.\n+            std::array<gid_t, 1> groups;\n+            [[maybe_unused]] int ignored = getgroups(groups.size(), groups.data());\n+            return NullUniValue;\n+        },\n+    };\n+}\n+#endif\n+\n static RPCHelpMan mockscheduler()\n {\n     return RPCHelpMan{\"mockscheduler\",\n@@ -765,6 +795,9 @@ static const CRPCCommand commands[] =\n     { \"hidden\",             &echo,                    },\n     { \"hidden\",             &echojson,                },\n     { \"hidden\",             &echoipc,                 },\n+#if defined(USE_SYSCALL_SANDBOX)\n+    { \"hidden\",             &invokedisallowedsyscall, },\n+#endif\n };\n // clang-format on\n     for (const auto& c : commands) {"
      },
      {
        "sha": "e57bcfd3c19c57810c8af9dbfd6bcadda2bc1fc3",
        "filename": "src/scheduler.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ea0870e2ef406057890af974bf1979990b8d3b0/src/scheduler.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ea0870e2ef406057890af974bf1979990b8d3b0/src/scheduler.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.cpp?ref=0ea0870e2ef406057890af974bf1979990b8d3b0",
        "patch": "@@ -5,6 +5,7 @@\n #include <scheduler.h>\n \n #include <random.h>\n+#include <util/syscall_sandbox.h>\n #include <util/time.h>\n \n #include <assert.h>\n@@ -24,6 +25,7 @@ CScheduler::~CScheduler()\n \n void CScheduler::serviceQueue()\n {\n+    EnableSyscallSandbox(SyscallSandboxPolicy::SCHEDULER);\n     WAIT_LOCK(newTaskMutex, lock);\n     ++nThreadsServicingQueue;\n "
      },
      {
        "sha": "52e8cd3573b340c555e8305b750868f82d5ebca6",
        "filename": "src/test/fuzz/fuzz.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ea0870e2ef406057890af974bf1979990b8d3b0/src/test/fuzz/fuzz.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ea0870e2ef406057890af974bf1979990b8d3b0/src/test/fuzz/fuzz.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/fuzz.cpp?ref=0ea0870e2ef406057890af974bf1979990b8d3b0",
        "patch": "@@ -9,6 +9,7 @@\n #include <test/util/setup_common.h>\n #include <util/check.h>\n #include <util/sock.h>\n+#include <util/syscall_sandbox.h>\n \n #include <cstdint>\n #include <exception>\n@@ -86,6 +87,7 @@ extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)\n // This function is used by libFuzzer\n extern \"C\" int LLVMFuzzerInitialize(int* argc, char*** argv)\n {\n+    DisableFurtherSyscallSandboxRestrictions();\n     initialize();\n     return 0;\n }"
      },
      {
        "sha": "37879fdc1929d6603a8bacbe0e87a99255e08892",
        "filename": "src/test/fuzz/rpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ea0870e2ef406057890af974bf1979990b8d3b0/src/test/fuzz/rpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ea0870e2ef406057890af974bf1979990b8d3b0/src/test/fuzz/rpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/rpc.cpp?ref=0ea0870e2ef406057890af974bf1979990b8d3b0",
        "patch": "@@ -74,6 +74,7 @@ const std::vector<std::string> RPC_COMMANDS_NOT_SAFE_FOR_FUZZING{\n     \"generatetodescriptor\", // avoid prohibitively slow execution (when `nblocks` is large)\n     \"gettxoutproof\",        // avoid prohibitively slow execution\n     \"importwallet\", // avoid reading from disk\n+    \"invokedisallowedsyscall\", // avoid syscall sandbox violaion\n     \"loadwallet\",   // avoid reading from disk\n     \"prioritisetransaction\", // avoid signed integer overflow in CTxMemPool::PrioritiseTransaction(uint256 const&, long const&) (https://github.com/bitcoin/bitcoin/issues/20626)\n     \"savemempool\",           // disabled as a precautionary measure: may take a file path argument in the future"
      },
      {
        "sha": "7e9203db2f5f7f2e1c4c4d26d34a8d02f3f0fad6",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ea0870e2ef406057890af974bf1979990b8d3b0/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ea0870e2ef406057890af974bf1979990b8d3b0/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=0ea0870e2ef406057890af974bf1979990b8d3b0",
        "patch": "@@ -28,6 +28,7 @@\n #include <txdb.h>\n #include <util/strencodings.h>\n #include <util/string.h>\n+#include <util/syscall_sandbox.h>\n #include <util/thread.h>\n #include <util/threadnames.h>\n #include <util/time.h>\n@@ -88,6 +89,8 @@ BasicTestingSetup::BasicTestingSetup(const std::string& chainName, const std::ve\n             \"-debugexclude=leveldb\",\n         },\n         extra_args);\n+    EnableSyscallSandbox(SyscallSandboxPolicy::INITIALIZATION);\n+    DisableFurtherSyscallSandboxRestrictions();\n     util::ThreadRename(\"test\");\n     fs::create_directories(m_path_root);\n     m_args.ForceSetArg(\"-datadir\", m_path_root.string());"
      },
      {
        "sha": "ac67824b87df4eadee738330febb7a20f47a3c85",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ea0870e2ef406057890af974bf1979990b8d3b0/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ea0870e2ef406057890af974bf1979990b8d3b0/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=0ea0870e2ef406057890af974bf1979990b8d3b0",
        "patch": "@@ -14,6 +14,7 @@\n #include <netbase.h>\n #include <util/readwritefile.h>\n #include <util/strencodings.h>\n+#include <util/syscall_sandbox.h>\n #include <util/system.h>\n #include <util/thread.h>\n #include <util/time.h>\n@@ -578,6 +579,7 @@ static std::thread torControlThread;\n \n static void TorControlThread(CService onion_service_target)\n {\n+    EnableSyscallSandbox(SyscallSandboxPolicy::INITIALIZATION_TOR_CONTROL);\n     TorController ctrl(gBase, gArgs.GetArg(\"-torcontrol\", DEFAULT_TOR_CONTROL), onion_service_target);\n \n     event_base_dispatch(gBase);"
      },
      {
        "sha": "212e017ae47664259589a620061916c200f7784d",
        "filename": "src/util/syscall_sandbox.cpp",
        "status": "added",
        "additions": 488,
        "deletions": 0,
        "changes": 488,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ea0870e2ef406057890af974bf1979990b8d3b0/src/util/syscall_sandbox.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ea0870e2ef406057890af974bf1979990b8d3b0/src/util/syscall_sandbox.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/syscall_sandbox.cpp?ref=0ea0870e2ef406057890af974bf1979990b8d3b0",
        "patch": "@@ -0,0 +1,488 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <util/syscall_sandbox.h>\n+\n+#if defined(USE_SYSCALL_SANDBOX)\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/threadnames.h>\n+\n+#include <linux/audit.h>\n+#include <linux/filter.h>\n+#include <linux/seccomp.h>\n+#include <linux/unistd.h>\n+#include <signal.h>\n+#include <sys/prctl.h>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <cstdint>\n+#include <exception>\n+#include <new>\n+#include <set>\n+#include <string>\n+#include <vector>\n+\n+#ifndef SYS_SECCOMP\n+#define SYS_SECCOMP 1\n+#endif\n+#define syscall_nr (offsetof(struct seccomp_data, nr))\n+#define arch_nr (offsetof(struct seccomp_data, arch))\n+#if defined(__x86_64__)\n+#define REG_SYSCALL REG_RAX\n+#define ARCH_NR AUDIT_ARCH_X86_64\n+#else\n+#error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+#endif\n+\n+#if !defined(USE_SYSCALL_SANDBOX_MODE_KILL_WITHOUT_DEBUG)\n+namespace {\n+// The syscall sandbox feature is currently a Linux x86_64-only feature.\n+std::string GetLinuxSyscallName(const uint32_t syscall_number)\n+{\n+    // Linux x86_64 syscalls listed in syscall number order without gaps.\n+    static const std::vector<std::string> SYSCALL_NAMES{\"read\", \"write\", \"open\", \"close\", \"stat\", \"fstat\", \"lstat\", \"poll\", \"lseek\", \"mmap\", \"mprotect\", \"munmap\", \"brk\", \"rt_sigaction\", \"rt_sigprocmask\", \"rt_sigreturn\", \"ioctl\", \"pread64\", \"pwrite64\", \"readv\", \"writev\", \"access\", \"pipe\", \"select\", \"sched_yield\", \"mremap\", \"msync\", \"mincore\", \"madvise\", \"shmget\", \"shmat\", \"shmctl\", \"dup\", \"dup2\", \"pause\", \"nanosleep\", \"getitimer\", \"alarm\", \"setitimer\", \"getpid\", \"sendfile\", \"socket\", \"connect\", \"accept\", \"sendto\", \"recvfrom\", \"sendmsg\", \"recvmsg\", \"shutdown\", \"bind\", \"listen\", \"getsockname\", \"getpeername\", \"socketpair\", \"setsockopt\", \"getsockopt\", \"clone\", \"fork\", \"vfork\", \"execve\", \"exit\", \"wait4\", \"kill\", \"uname\", \"semget\", \"semop\", \"semctl\", \"shmdt\", \"msgget\", \"msgsnd\", \"msgrcv\", \"msgctl\", \"fcntl\", \"flock\", \"fsync\", \"fdatasync\", \"truncate\", \"ftruncate\", \"getdents\", \"getcwd\", \"chdir\", \"fchdir\", \"rename\", \"mkdir\", \"rmdir\", \"creat\", \"link\", \"unlink\", \"symlink\", \"readlink\", \"chmod\", \"fchmod\", \"chown\", \"fchown\", \"lchown\", \"umask\", \"gettimeofday\", \"getrlimit\", \"getrusage\", \"sysinfo\", \"times\", \"ptrace\", \"getuid\", \"syslog\", \"getgid\", \"setuid\", \"setgid\", \"geteuid\", \"getegid\", \"setpgid\", \"getppid\", \"getpgrp\", \"setsid\", \"setreuid\", \"setregid\", \"getgroups\", \"setgroups\", \"setresuid\", \"getresuid\", \"setresgid\", \"getresgid\", \"getpgid\", \"setfsuid\", \"setfsgid\", \"getsid\", \"capget\", \"capset\", \"rt_sigpending\", \"rt_sigtimedwait\", \"rt_sigqueueinfo\", \"rt_sigsuspend\", \"sigaltstack\", \"utime\", \"mknod\", \"uselib\", \"personality\", \"ustat\", \"statfs\", \"fstatfs\", \"sysfs\", \"getpriority\", \"setpriority\", \"sched_setparam\", \"sched_getparam\", \"sched_setscheduler\", \"sched_getscheduler\", \"sched_get_priority_max\", \"sched_get_priority_min\", \"sched_rr_get_interval\", \"mlock\", \"munlock\", \"mlockall\", \"munlockall\", \"vhangup\", \"modify_ldt\", \"pivot_root\", \"_sysctl\", \"prctl\", \"arch_prctl\", \"adjtimex\", \"setrlimit\", \"chroot\", \"sync\", \"acct\", \"settimeofday\", \"mount\", \"umount2\", \"swapon\", \"swapoff\", \"reboot\", \"sethostname\", \"setdomainname\", \"iopl\", \"ioperm\", \"create_module\", \"init_module\", \"delete_module\", \"get_kernel_syms\", \"query_module\", \"quotactl\", \"nfsservctl\", \"getpmsg\", \"putpmsg\", \"afs_syscall\", \"tuxcall\", \"security\", \"gettid\", \"readahead\", \"setxattr\", \"lsetxattr\", \"fsetxattr\", \"getxattr\", \"lgetxattr\", \"fgetxattr\", \"listxattr\", \"llistxattr\", \"flistxattr\", \"removexattr\", \"lremovexattr\", \"fremovexattr\", \"tkill\", \"time\", \"futex\", \"sched_setaffinity\", \"sched_getaffinity\", \"set_thread_area\", \"io_setup\", \"io_destroy\", \"io_getevents\", \"io_submit\", \"io_cancel\", \"get_thread_area\", \"lookup_dcookie\", \"epoll_create\", \"epoll_ctl_old\", \"epoll_wait_old\", \"remap_file_pages\", \"getdents64\", \"set_tid_address\", \"restart_syscall\", \"semtimedop\", \"fadvise64\", \"timer_create\", \"timer_settime\", \"timer_gettime\", \"timer_getoverrun\", \"timer_delete\", \"clock_settime\", \"clock_gettime\", \"clock_getres\", \"clock_nanosleep\", \"exit_group\", \"epoll_wait\", \"epoll_ctl\", \"tgkill\", \"utimes\", \"vserver\", \"mbind\", \"set_mempolicy\", \"get_mempolicy\", \"mq_open\", \"mq_unlink\", \"mq_timedsend\", \"mq_timedreceive\", \"mq_notify\", \"mq_getsetattr\", \"kexec_load\", \"waitid\", \"add_key\", \"request_key\", \"keyctl\", \"ioprio_set\", \"ioprio_get\", \"inotify_init\", \"inotify_add_watch\", \"inotify_rm_watch\", \"migrate_pages\", \"openat\", \"mkdirat\", \"mknodat\", \"fchownat\", \"futimesat\", \"newfstatat\", \"unlinkat\", \"renameat\", \"linkat\", \"symlinkat\", \"readlinkat\", \"fchmodat\", \"faccessat\", \"pselect6\", \"ppoll\", \"unshare\", \"set_robust_list\", \"get_robust_list\", \"splice\", \"tee\", \"sync_file_range\", \"vmsplice\", \"move_pages\", \"utimensat\", \"epoll_pwait\", \"signalfd\", \"timerfd_create\", \"eventfd\", \"fallocate\", \"timerfd_settime\", \"timerfd_gettime\", \"accept4\", \"signalfd4\", \"eventfd2\", \"epoll_create1\", \"dup3\", \"pipe2\", \"inotify_init1\", \"preadv\", \"pwritev\", \"rt_tgsigqueueinfo\", \"perf_event_open\", \"recvmmsg\", \"fanotify_init\", \"fanotify_mark\", \"prlimit64\", \"name_to_handle_at\", \"open_by_handle_at\", \"clock_adjtime\", \"syncfs\", \"sendmmsg\", \"setns\", \"getcpu\", \"process_vm_readv\", \"process_vm_writev\", \"kcmp\", \"finit_module\", \"sched_setattr\", \"sched_getattr\", \"renameat2\", \"seccomp\", \"getrandom\", \"memfd_create\", \"kexec_file_load\", \"bpf\", \"execveat\", \"userfaultfd\", \"membarrier\", \"mlock2\", \"copy_file_range\", \"preadv2\", \"pwritev2\", \"pkey_mprotect\", \"pkey_alloc\", \"pkey_free\", \"statx\"};\n+    assert(SYSCALL_NAMES.size() == 333 && SYSCALL_NAMES[0] == \"read\" && SYSCALL_NAMES[332] == \"statx\" && \"Syscalls must be listed in syscall number order without gaps.\");\n+    return syscall_number < SYSCALL_NAMES.size() ? SYSCALL_NAMES[syscall_number] : \"*unknown*\";\n+}\n+\n+void SyscallSandboxDebugSignalHandler(int, siginfo_t* info, void* void_context)\n+{\n+    if (info->si_code != SYS_SECCOMP) {\n+        return;\n+    }\n+    const ucontext_t* ctx = static_cast<ucontext_t*>(void_context);\n+    if (ctx == nullptr) {\n+        return;\n+    }\n+    std::set_new_handler(std::terminate);\n+    const unsigned int syscall_number = ctx->uc_mcontext.gregs[REG_SYSCALL];\n+    const std::string syscall_name = GetLinuxSyscallName(syscall_number);\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    const std::string error_message = strprintf(\"ERROR: The syscall \\\"%s\\\" (syscall number %d) is not allowed by the syscall sandbox in thread \\\"%s\\\". Please report. Exiting.\", syscall_name, syscall_number, thread_name);\n+    tfm::format(std::cerr, \"%s\\n\", error_message);\n+    LogPrintf(\"%s\\n\", error_message);\n+    std::terminate();\n+}\n+\n+void InstallSyscallSandboxDebugHandler()\n+{\n+    static std::atomic<bool> syscall_reporter_installed{false};\n+    if (syscall_reporter_installed.exchange(true)) {\n+        return;\n+    }\n+    LogPrint(BCLog::UTIL, \"Installing syscall sandbox debug handler\\n\");\n+    struct sigaction action = {};\n+    sigset_t mask;\n+    sigemptyset(&mask);\n+    sigaddset(&mask, SIGSYS);\n+    action.sa_sigaction = &SyscallSandboxDebugSignalHandler;\n+    action.sa_flags = SA_SIGINFO;\n+    if (sigaction(SIGSYS, &action, nullptr) < 0) {\n+        perror(\"sigaction\");\n+        std::terminate();\n+    }\n+    if (sigprocmask(SIG_UNBLOCK, &mask, nullptr)) {\n+        perror(\"sigprocmask\");\n+        std::terminate();\n+    }\n+}\n+} // namespace\n+#endif\n+\n+namespace {\n+enum class SyscallSandboxDefaultAction {\n+    DEBUG_SIGNAL_HANDLER,\n+    KILL_PROCESS,\n+};\n+\n+class SeccompPolicyBuilder\n+{\n+    std::set<uint32_t> allowed_syscalls;\n+\n+public:\n+    SeccompPolicyBuilder()\n+    {\n+        // Allowed by default.\n+        AllowAddressSpaceAccess();\n+        AllowEpoll();\n+        AllowEventFd();\n+        AllowFutex();\n+        AllowGeneralIo();\n+        AllowGetRandom();\n+        AllowGetSimpleId();\n+        AllowGetTime();\n+        AllowGlobalProcessEnvironment();\n+        AllowGlobalSystemStatus();\n+        AllowKernelInternalApi();\n+        AllowNetworkSocketInformation();\n+        AllowOperationOnExistingFileDescriptor();\n+        AllowPipe();\n+        AllowPrctl();\n+        AllowProcessStartOrDeath();\n+        AllowScheduling();\n+        AllowSignalHandling();\n+        AllowSleep();\n+        AllowUmask();\n+    }\n+\n+    void AllowAddressSpaceAccess()\n+    {\n+        allowed_syscalls.insert(__NR_brk);     // change data segment size\n+        allowed_syscalls.insert(__NR_madvise); // give advice about use of memory\n+#if defined(__NR_membarrier)\n+        allowed_syscalls.insert(__NR_membarrier); // issue memory barriers on a set of threads\n+#endif\n+        allowed_syscalls.insert(__NR_mlock);    // lock memory\n+        allowed_syscalls.insert(__NR_mmap);     // map files or devices into memory\n+        allowed_syscalls.insert(__NR_mprotect); // set protection on a region of memory\n+        allowed_syscalls.insert(__NR_munlock);  // unlock memory\n+        allowed_syscalls.insert(__NR_munmap);   // unmap files or devices into memory\n+    }\n+\n+    void AllowEpoll()\n+    {\n+        allowed_syscalls.insert(__NR_epoll_create1); // open an epoll file descriptor\n+        allowed_syscalls.insert(__NR_epoll_ctl);     // control interface for an epoll file descriptor\n+        allowed_syscalls.insert(__NR_epoll_pwait);   // wait for an I/O event on an epoll file descriptor\n+        allowed_syscalls.insert(__NR_epoll_wait);    // wait for an I/O event on an epoll file descriptor\n+    }\n+\n+    void AllowEventFd()\n+    {\n+        allowed_syscalls.insert(__NR_eventfd2); // create a file descriptor for event notification\n+    }\n+\n+    void AllowFileSystem()\n+    {\n+        allowed_syscalls.insert(__NR_access);     // check user's permissions for a file\n+        allowed_syscalls.insert(__NR_chdir);      // change working directory\n+        allowed_syscalls.insert(__NR_chmod);      // change permissions of a file\n+        allowed_syscalls.insert(__NR_fallocate);  // manipulate file space\n+        allowed_syscalls.insert(__NR_fchmod);     // change permissions of a file\n+        allowed_syscalls.insert(__NR_fchown);     // change ownership of a file\n+        allowed_syscalls.insert(__NR_fdatasync);  // synchronize a file's in-core state with storage device\n+        allowed_syscalls.insert(__NR_flock);      // apply or remove an advisory lock on an open file\n+        allowed_syscalls.insert(__NR_fstat);      // get file status\n+        allowed_syscalls.insert(__NR_fsync);      // synchronize a file's in-core state with storage device\n+        allowed_syscalls.insert(__NR_ftruncate);  // truncate a file to a specified length\n+        allowed_syscalls.insert(__NR_getcwd);     // get current working directory\n+        allowed_syscalls.insert(__NR_getdents);   // get directory entries\n+        allowed_syscalls.insert(__NR_getdents64); // get directory entries\n+        allowed_syscalls.insert(__NR_lstat);      // get file status\n+        allowed_syscalls.insert(__NR_mkdir);      // create a directory\n+        allowed_syscalls.insert(__NR_open);       // open and possibly create a file\n+        allowed_syscalls.insert(__NR_openat);     // open and possibly create a file\n+        allowed_syscalls.insert(__NR_readlink);   // read value of a symbolic link\n+        allowed_syscalls.insert(__NR_rename);     // change the name or location of a file\n+        allowed_syscalls.insert(__NR_rmdir);      // delete a directory\n+        allowed_syscalls.insert(__NR_stat);       // get file status\n+        allowed_syscalls.insert(__NR_statfs);     // get filesystem statistics\n+        allowed_syscalls.insert(__NR_statx);      // get file status (extended)\n+        allowed_syscalls.insert(__NR_unlink);     // delete a name and possibly the file it refers to\n+    }\n+\n+    void AllowFutex()\n+    {\n+        allowed_syscalls.insert(__NR_futex);           // fast user-space locking\n+        allowed_syscalls.insert(__NR_set_robust_list); // set list of robust futexes\n+    }\n+\n+    void AllowGeneralIo()\n+    {\n+        allowed_syscalls.insert(__NR_ioctl);    // control device\n+        allowed_syscalls.insert(__NR_lseek);    // reposition read/write file offset\n+        allowed_syscalls.insert(__NR_poll);     // wait for some event on a file descriptor\n+        allowed_syscalls.insert(__NR_ppoll);    // wait for some event on a file descriptor\n+        allowed_syscalls.insert(__NR_pread64);  // read from a file descriptor at a given offset\n+        allowed_syscalls.insert(__NR_pwrite64); // write to a file descriptor at a given offset\n+        allowed_syscalls.insert(__NR_read);     // read from a file descriptor\n+        allowed_syscalls.insert(__NR_readv);    // read data into multiple buffers\n+        allowed_syscalls.insert(__NR_recvfrom); // receive a message from a socket\n+        allowed_syscalls.insert(__NR_recvmsg);  // receive a message from a socket\n+        allowed_syscalls.insert(__NR_select);   // synchronous I/O multiplexing\n+        allowed_syscalls.insert(__NR_sendmmsg); // send multiple messages on a socket\n+        allowed_syscalls.insert(__NR_sendmsg);  // send a message on a socket\n+        allowed_syscalls.insert(__NR_sendto);   // send a message on a socket\n+        allowed_syscalls.insert(__NR_write);    // write to a file descriptor\n+        allowed_syscalls.insert(__NR_writev);   // write data into multiple buffers\n+    }\n+\n+    void AllowGetRandom()\n+    {\n+#if defined(__NR_getrandom)\n+        allowed_syscalls.insert(__NR_getrandom); // obtain a series of random bytes\n+#endif\n+    }\n+\n+    void AllowGetSimpleId()\n+    {\n+        allowed_syscalls.insert(__NR_getegid);   // get group identity\n+        allowed_syscalls.insert(__NR_geteuid);   // get user identity\n+        allowed_syscalls.insert(__NR_getgid);    // get group identity\n+        allowed_syscalls.insert(__NR_getpgid);   // get process group\n+        allowed_syscalls.insert(__NR_getpid);    // get process identification\n+        allowed_syscalls.insert(__NR_getppid);   // get process identification\n+        allowed_syscalls.insert(__NR_getresgid); // get real, effective and saved group IDs\n+        allowed_syscalls.insert(__NR_getresuid); // get real, effective and saved user IDs\n+        allowed_syscalls.insert(__NR_getsid);    // get session ID\n+        allowed_syscalls.insert(__NR_gettid);    // get thread identification\n+        allowed_syscalls.insert(__NR_getuid);    // get user identity\n+    }\n+\n+    void AllowGetTime()\n+    {\n+        allowed_syscalls.insert(__NR_clock_getres);  // find the resolution (precision) of the specified clock\n+        allowed_syscalls.insert(__NR_clock_gettime); // retrieve the time of the specified clock\n+    }\n+\n+    void AllowGlobalProcessEnvironment()\n+    {\n+        allowed_syscalls.insert(__NR_getrlimit); // get resource limits\n+        allowed_syscalls.insert(__NR_getrusage); // get resource usage\n+        allowed_syscalls.insert(__NR_prlimit64); // get/set resource limits\n+    }\n+\n+    void AllowGlobalSystemStatus()\n+    {\n+        allowed_syscalls.insert(__NR_sysinfo); // return system information\n+        allowed_syscalls.insert(__NR_uname);   // get name and information about current kernel\n+    }\n+\n+    void AllowKernelInternalApi()\n+    {\n+        allowed_syscalls.insert(__NR_restart_syscall); // restart a system call after interruption by a stop signal\n+    }\n+\n+    void AllowNetwork()\n+    {\n+        allowed_syscalls.insert(__NR_accept);     // accept a connection on a socket\n+        allowed_syscalls.insert(__NR_accept4);    // accept a connection on a socket\n+        allowed_syscalls.insert(__NR_bind);       // bind a name to a socket\n+        allowed_syscalls.insert(__NR_connect);    // initiate a connection on a socket\n+        allowed_syscalls.insert(__NR_listen);     // listen for connections on a socket\n+        allowed_syscalls.insert(__NR_setsockopt); // set options on sockets\n+        allowed_syscalls.insert(__NR_socket);     // create an endpoint for communication\n+        allowed_syscalls.insert(__NR_socketpair); // create a pair of connected sockets\n+    }\n+\n+    void AllowNetworkSocketInformation()\n+    {\n+        allowed_syscalls.insert(__NR_getpeername); // get name of connected peer socket\n+        allowed_syscalls.insert(__NR_getsockname); // get socket name\n+        allowed_syscalls.insert(__NR_getsockopt);  // get options on sockets\n+    }\n+\n+    void AllowOperationOnExistingFileDescriptor()\n+    {\n+        allowed_syscalls.insert(__NR_close);    // close a file descriptor\n+        allowed_syscalls.insert(__NR_dup);      // duplicate a file descriptor\n+        allowed_syscalls.insert(__NR_dup2);     // duplicate a file descriptor\n+        allowed_syscalls.insert(__NR_fcntl);    // manipulate file descriptor\n+        allowed_syscalls.insert(__NR_shutdown); // shut down part of a full-duplex connection\n+    }\n+\n+    void AllowPipe()\n+    {\n+        allowed_syscalls.insert(__NR_pipe);  // create pipe\n+        allowed_syscalls.insert(__NR_pipe2); // create pipe\n+    }\n+\n+    void AllowPrctl()\n+    {\n+        allowed_syscalls.insert(__NR_arch_prctl); // set architecture-specific thread state\n+        allowed_syscalls.insert(__NR_prctl);      // operations on a process\n+    }\n+\n+    void AllowProcessStartOrDeath()\n+    {\n+        allowed_syscalls.insert(__NR_clone);      // create a child process\n+        allowed_syscalls.insert(__NR_exit);       // terminate the calling process\n+        allowed_syscalls.insert(__NR_exit_group); // exit all threads in a process\n+        allowed_syscalls.insert(__NR_fork);       // create a child process\n+        allowed_syscalls.insert(__NR_tgkill);     // send a signal to a thread\n+        allowed_syscalls.insert(__NR_wait4);      // wait for process to change state, BSD style\n+    }\n+\n+    void AllowScheduling()\n+    {\n+        allowed_syscalls.insert(__NR_sched_getaffinity);  // set a thread's CPU affinity mask\n+        allowed_syscalls.insert(__NR_sched_getparam);     // get scheduling parameters\n+        allowed_syscalls.insert(__NR_sched_getscheduler); // get scheduling policy/parameters\n+        allowed_syscalls.insert(__NR_sched_setscheduler); // set scheduling policy/parameters\n+        allowed_syscalls.insert(__NR_sched_yield);        // yield the processor\n+    }\n+\n+    void AllowSignalHandling()\n+    {\n+        allowed_syscalls.insert(__NR_rt_sigaction);   // examine and change a signal action\n+        allowed_syscalls.insert(__NR_rt_sigprocmask); // examine and change blocked signals\n+        allowed_syscalls.insert(__NR_rt_sigreturn);   // return from signal handler and cleanup stack frame\n+        allowed_syscalls.insert(__NR_sigaltstack);    // set and/or get signal stack context\n+    }\n+\n+    void AllowSleep()\n+    {\n+        allowed_syscalls.insert(__NR_clock_nanosleep); // high-resolution sleep with specifiable clock\n+        allowed_syscalls.insert(__NR_nanosleep);       // high-resolution sleep\n+    }\n+\n+    void AllowUmask()\n+    {\n+        allowed_syscalls.insert(__NR_umask); // set file mode creation mask\n+    }\n+\n+    std::vector<sock_filter> BuildFilter(const SyscallSandboxDefaultAction default_action)\n+    {\n+        std::vector<sock_filter> bpf_policy;\n+        // See https://outflux.net/teach-seccomp/step-2/seccomp-bpf.h for background on\n+        // the following seccomp-bpf instructions.\n+        //\n+        // See VALIDATE_ARCHITECTURE in seccomp-bpf.h referenced above.\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, arch_nr));\n+        bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, ARCH_NR, 1, 0));\n+        bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL_PROCESS));\n+        // See EXAMINE_SYSCALL in seccomp-bpf.h referenced above.\n+        bpf_policy.push_back(BPF_STMT(BPF_LD + BPF_W + BPF_ABS, syscall_nr));\n+        for (const uint32_t allowed_syscall : allowed_syscalls) {\n+            // See ALLOW_SYSCALL in seccomp-bpf.h referenced above.\n+            bpf_policy.push_back(BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, allowed_syscall, 0, 1));\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW));\n+        }\n+        switch (default_action) {\n+        case SyscallSandboxDefaultAction::KILL_PROCESS:\n+            // See KILL_PROCESS in seccomp-bpf.h referenced above.\n+            //\n+            // Note that we're using SECCOMP_RET_KILL_PROCESS (kill the process) instead\n+            // of SECCOMP_RET_KILL_THREAD (kill the thread). The SECCOMP_RET_KILL_PROCESS\n+            // action was introduced in Linux 4.14.\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL_PROCESS));\n+            break;\n+        case SyscallSandboxDefaultAction::DEBUG_SIGNAL_HANDLER:\n+            // Disallow syscall and force a SIGSYS to trigger syscall debug reporter.\n+            bpf_policy.push_back(BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_TRAP));\n+            break;\n+        }\n+        return bpf_policy;\n+    }\n+};\n+\n+std::atomic<bool> syscall_filter_installation_disabled{false};\n+} // namespace\n+#endif\n+\n+void EnableSyscallSandbox(const SyscallSandboxPolicy syscall_policy)\n+{\n+#if defined(USE_SYSCALL_SANDBOX)\n+    if (syscall_filter_installation_disabled) {\n+        return;\n+    }\n+\n+#if !defined(USE_SYSCALL_SANDBOX_MODE_KILL_WITHOUT_DEBUG)\n+    InstallSyscallSandboxDebugHandler();\n+#endif\n+\n+    SeccompPolicyBuilder seccomp_policy_builder;\n+    switch (syscall_policy) {\n+    case SyscallSandboxPolicy::INITIALIZATION: // Thread: main thread (state: init)\n+        // SyscallSandboxPolicy::INITIALIZATION is the first policy loaded.\n+        //\n+        // Subsequently loaded policies can reduce the abilities further, but\n+        // abilities can never be regained.\n+        //\n+        // SyscallSandboxPolicy::INITIALIZATION must thus be a superset of all\n+        // other policies.\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_DNS_SEED: // Thread: dnsseed\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_LOAD_BLOCKS: // Thread: loadblk\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_TOR_CONTROL: // Thread: torcontrol\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::INITIALIZATION_MAP_PORT: // Thread: mapport\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::MESSAGE_HANDLER: // Thread: msghand\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::NET: // Thread: net\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_ADD_CONNECTION: // Thread: addcon\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER: // Thread: http\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_HTTP_SERVER_WORKER: // Thread: httpworker.<N>\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::NET_OPEN_CONNECTION: // Thread: opencon\n+        seccomp_policy_builder.AllowNetwork();\n+        break;\n+    case SyscallSandboxPolicy::SCHEDULER: // Thread: scheduler\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::TX_INDEX: // Thread: txindex\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    case SyscallSandboxPolicy::VALIDATION_SCRIPT_CHECK: // Thread: scriptch.<N>\n+        break;\n+    case SyscallSandboxPolicy::SHUTOFF: // Thread: main thread (state: shutoff)\n+        seccomp_policy_builder.AllowFileSystem();\n+        break;\n+    }\n+\n+#if defined(USE_SYSCALL_SANDBOX_MODE_KILL_WITHOUT_DEBUG)\n+    const SyscallSandboxDefaultAction default_action = SyscallSandboxDefaultAction::KILL_PROCESS;\n+#else\n+    const SyscallSandboxDefaultAction default_action = SyscallSandboxDefaultAction::DEBUG_SIGNAL_HANDLER;\n+#endif\n+\n+    std::vector<sock_filter> filter = seccomp_policy_builder.BuildFilter(default_action);\n+    const sock_fprog prog = {\n+        .len = static_cast<uint16_t>(filter.size()),\n+        .filter = filter.data(),\n+    };\n+    // Do not allow abilities to be regained after being dropped.\n+    if (prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0) != 0) {\n+        perror(\"prctl(PR_SET_NO_NEW_PRIVS)\");\n+        std::terminate();\n+    }\n+    // Install seccomp-bpf syscall filter.\n+    if (prctl(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, &prog) != 0) {\n+        perror(\"prctl(PR_SET_SECCOMP)\");\n+        std::terminate();\n+    }\n+\n+    const std::string thread_name = !util::ThreadGetInternalName().empty() ? util::ThreadGetInternalName() : \"*unnamed*\";\n+    LogPrint(BCLog::UTIL, \"Syscall filter installed for thread \\\"%s\\\"\\n\", thread_name);\n+#endif\n+}\n+\n+void DisableFurtherSyscallSandboxRestrictions()\n+{\n+#if defined(USE_SYSCALL_SANDBOX)\n+    if (!syscall_filter_installation_disabled.exchange(true)) {\n+        LogPrint(BCLog::UTIL, \"Disabling further syscall sandbox restrictions\\n\");\n+    }\n+#endif\n+}"
      },
      {
        "sha": "70223e15f773c6946c521a7d6a7d3d1bcc30bbc1",
        "filename": "src/util/syscall_sandbox.h",
        "status": "added",
        "additions": 56,
        "deletions": 0,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ea0870e2ef406057890af974bf1979990b8d3b0/src/util/syscall_sandbox.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ea0870e2ef406057890af974bf1979990b8d3b0/src/util/syscall_sandbox.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/syscall_sandbox.h?ref=0ea0870e2ef406057890af974bf1979990b8d3b0",
        "patch": "@@ -0,0 +1,56 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SYSCALL_SANDBOX_H\n+#define BITCOIN_UTIL_SYSCALL_SANDBOX_H\n+\n+enum class SyscallSandboxPolicy {\n+    // 1. Initialization\n+    INITIALIZATION,\n+    INITIALIZATION_DNS_SEED,\n+    INITIALIZATION_LOAD_BLOCKS,\n+    INITIALIZATION_MAP_PORT,\n+    INITIALIZATION_TOR_CONTROL,\n+\n+    // 2. Steady state (non-initialization, non-shutdown)\n+    MESSAGE_HANDLER,\n+    NET,\n+    NET_ADD_CONNECTION,\n+    NET_HTTP_SERVER,\n+    NET_HTTP_SERVER_WORKER,\n+    NET_OPEN_CONNECTION,\n+    SCHEDULER,\n+    TX_INDEX,\n+    VALIDATION_SCRIPT_CHECK,\n+\n+    // 3. Shutdown\n+    SHUTOFF,\n+};\n+\n+//! Force the current thread (and threads created from the current thread) into\n+//! a restricted-service operating mode where only a subset of all syscalls are\n+//! available.\n+//!\n+//! Subsequent calls to this function can reduce the abilities further, but\n+//! abilities can never be regained.\n+//!\n+//! This function is a no-op unless Bitcoin Core is compiled with the configure\n+//! option --with-syscall-sandbox. This option is available under Linux x86_64\n+//! only.\n+void EnableSyscallSandbox(const SyscallSandboxPolicy syscall_policy);\n+\n+//! Disable all further syscall sandbox restrictions that would have be made by\n+//! calling EnableSyscallSandbox.\n+//!\n+//! Does not revert any syscall restrictions currently in effect.\n+//!\n+//! Typically called early in main(...) to disable the syscall sandbox mechanism\n+//! on a per binary basis.\n+//!\n+//! This function is a no-op unless Bitcoin Core is compiled with the configure\n+//! option --with-syscall-sandbox. This option is available under Linux x86_64\n+//! only.\n+void DisableFurtherSyscallSandboxRestrictions();\n+\n+#endif // BITCOIN_UTIL_SYSCALL_SANDBOX_H"
      },
      {
        "sha": "d64d1c52c18b19ebed0056ee177466d77cf5c0b0",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ea0870e2ef406057890af974bf1979990b8d3b0/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ea0870e2ef406057890af974bf1979990b8d3b0/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=0ea0870e2ef406057890af974bf1979990b8d3b0",
        "patch": "@@ -45,6 +45,7 @@\n #include <util/moneystr.h>\n #include <util/rbf.h>\n #include <util/strencodings.h>\n+#include <util/syscall_sandbox.h>\n #include <util/system.h>\n #include <util/translation.h>\n #include <validationinterface.h>"
      },
      {
        "sha": "3596f7fd6fb47501d158ada3b5fc7db6cc134e19",
        "filename": "test/config.ini.in",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ea0870e2ef406057890af974bf1979990b8d3b0/test/config.ini.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ea0870e2ef406057890af974bf1979990b8d3b0/test/config.ini.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/config.ini.in?ref=0ea0870e2ef406057890af974bf1979990b8d3b0",
        "patch": "@@ -24,3 +24,5 @@ RPCAUTH=@abs_top_srcdir@/share/rpcauth/rpcauth.py\n @ENABLE_FUZZ_TRUE@ENABLE_FUZZ=true\n @ENABLE_ZMQ_TRUE@ENABLE_ZMQ=true\n @ENABLE_EXTERNAL_SIGNER_TRUE@ENABLE_EXTERNAL_SIGNER=true\n+@ENABLE_SYSCALL_SANDBOX_TRUE@ENABLE_SYSCALL_SANDBOX=true\n+@ENABLE_SYSCALL_SANDBOX_MODE_KILL_WITHOUT_DEBUG_TRUE@ENABLE_SYSCALL_SANDBOX_MODE_KILL_WITHOUT_DEBUG=true"
      },
      {
        "sha": "09530d21d50259cf78df24b49c7d25facefcb1a5",
        "filename": "test/functional/feature_notifications.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ea0870e2ef406057890af974bf1979990b8d3b0/test/functional/feature_notifications.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ea0870e2ef406057890af974bf1979990b8d3b0/test/functional/feature_notifications.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_notifications.py?ref=0ea0870e2ef406057890af974bf1979990b8d3b0",
        "patch": "@@ -28,6 +28,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_bitcoind_syscall_sandbox()\n+\n     def setup_network(self):\n         self.wallet = ''.join(chr(i) for i in range(FILE_CHAR_START, FILE_CHAR_END) if chr(i) not in FILE_CHARS_DISALLOWED)\n         self.alertnotify_dir = os.path.join(self.options.tmpdir, \"alertnotify\")"
      },
      {
        "sha": "55aaf4ca02f912e359405d373ffe66aa1fe9d84e",
        "filename": "test/functional/feature_syscall_sandbox.py",
        "status": "added",
        "additions": 36,
        "deletions": 0,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ea0870e2ef406057890af974bf1979990b8d3b0/test/functional/feature_syscall_sandbox.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ea0870e2ef406057890af974bf1979990b8d3b0/test/functional/feature_syscall_sandbox.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_syscall_sandbox.py?ref=0ea0870e2ef406057890af974bf1979990b8d3b0",
        "patch": "@@ -0,0 +1,36 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test bitcoind aborts if a disallowed syscall is used when compiled with the syscall sandbox.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework, SkipTest\n+\n+\n+class SyscallSandboxTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        if not self.is_syscall_sandbox_compiled():\n+            raise SkipTest(\"bitcoind has not been built with syscall sandbox enabled.\")\n+\n+    def run_test(self):\n+        disallowed_syscall_terminated_bitcoind = False\n+        expected_log_entry = 'ERROR: The syscall \"getgroups\" (syscall number 115) is not allowed by the syscall sandbox'\n+        if self.config[\"components\"].getboolean(\n+            \"ENABLE_SYSCALL_SANDBOX_MODE_KILL_WITHOUT_DEBUG\"\n+        ):\n+            expected_log_entry = \"\"\n+        with self.nodes[0].assert_debug_log([expected_log_entry]):\n+            self.log.info(\"Invoking disallowed syscall\")\n+            try:\n+                self.nodes[0].invokedisallowedsyscall()\n+            except ConnectionRefusedError:\n+                disallowed_syscall_terminated_bitcoind = True\n+        assert disallowed_syscall_terminated_bitcoind\n+        self.nodes = []\n+\n+\n+if __name__ == \"__main__\":\n+    SyscallSandboxTest().main()"
      },
      {
        "sha": "1c3c17af62f6414c92cca2332dbf72e7bd85f66d",
        "filename": "test/functional/feature_versionbits_warning.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ea0870e2ef406057890af974bf1979990b8d3b0/test/functional/feature_versionbits_warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ea0870e2ef406057890af974bf1979990b8d3b0/test/functional/feature_versionbits_warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_versionbits_warning.py?ref=0ea0870e2ef406057890af974bf1979990b8d3b0",
        "patch": "@@ -29,6 +29,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_bitcoind_syscall_sandbox()\n+\n     def setup_network(self):\n         self.alert_filename = os.path.join(self.options.tmpdir, \"alert.txt\")\n         # Open and close to create zero-length file"
      },
      {
        "sha": "87f36d24fe3605bd2720d7f17ed8a8e1908369d8",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ea0870e2ef406057890af974bf1979990b8d3b0/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ea0870e2ef406057890af974bf1979990b8d3b0/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=0ea0870e2ef406057890af974bf1979990b8d3b0",
        "patch": "@@ -787,6 +787,11 @@ def skip_if_no_bitcoind_zmq(self):\n         if not self.is_zmq_compiled():\n             raise SkipTest(\"bitcoind has not been built with zmq enabled.\")\n \n+    def skip_if_bitcoind_syscall_sandbox(self):\n+        \"\"\"Skip the running test if bitcoind has been compiled with syscall sandbox support.\"\"\"\n+        if self.is_syscall_sandbox_compiled():\n+            raise SkipTest(\"bitcoind has been built with syscall sandbox enabled.\")\n+\n     def skip_if_no_wallet(self):\n         \"\"\"Skip the running test if wallet has not been compiled.\"\"\"\n         self.requires_wallet = True\n@@ -862,3 +867,7 @@ def is_sqlite_compiled(self):\n     def is_bdb_compiled(self):\n         \"\"\"Checks whether the wallet module was compiled with BDB support.\"\"\"\n         return self.config[\"components\"].getboolean(\"USE_BDB\")\n+\n+    def is_syscall_sandbox_compiled(self):\n+        \"\"\"Checks whether the syscall sandbox was compiled.\"\"\"\n+        return self.config[\"components\"].getboolean(\"ENABLE_SYSCALL_SANDBOX\")"
      },
      {
        "sha": "06272387025354e6353153f7669b0305ecccfb49",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ea0870e2ef406057890af974bf1979990b8d3b0/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ea0870e2ef406057890af974bf1979990b8d3b0/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=0ea0870e2ef406057890af974bf1979990b8d3b0",
        "patch": "@@ -168,6 +168,7 @@\n     'rpc_users.py',\n     'rpc_whitelist.py',\n     'feature_proxy.py',\n+    'feature_syscall_sandbox.py',\n     'rpc_signrawtransaction.py --legacy-wallet',\n     'rpc_signrawtransaction.py --descriptors',\n     'wallet_groups.py --legacy-wallet',"
      }
    ]
  },
  {
    "sha": "333374a754ff71288c914bd4a3e285d8eeff1987",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMzMzNzRhNzU0ZmY3MTI4OGM5MTRiZDRhM2UyODVkOGVlZmYxOTg3",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2021-05-23T21:31:15Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2021-05-23T21:34:44Z"
      },
      "message": "Add fuzzing syscall sandbox: detect use of unexpected syscalls when fuzzing",
      "tree": {
        "sha": "cde76c72a4248fb625f53b34cff9c3d2f9650431",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cde76c72a4248fb625f53b34cff9c3d2f9650431"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/333374a754ff71288c914bd4a3e285d8eeff1987",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/333374a754ff71288c914bd4a3e285d8eeff1987",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/333374a754ff71288c914bd4a3e285d8eeff1987",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/333374a754ff71288c914bd4a3e285d8eeff1987/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0ea0870e2ef406057890af974bf1979990b8d3b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ea0870e2ef406057890af974bf1979990b8d3b0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0ea0870e2ef406057890af974bf1979990b8d3b0"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 32,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9db9bb94fc6c3cab4319b521ca428e30b44da2a0",
        "filename": "src/test/fuzz/fuzz.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/333374a754ff71288c914bd4a3e285d8eeff1987/src/test/fuzz/fuzz.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/333374a754ff71288c914bd4a3e285d8eeff1987/src/test/fuzz/fuzz.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/fuzz.cpp?ref=333374a754ff71288c914bd4a3e285d8eeff1987",
        "patch": "@@ -11,9 +11,11 @@\n #include <util/sock.h>\n #include <util/syscall_sandbox.h>\n \n+#include <algorithm>\n #include <cstdint>\n #include <exception>\n #include <memory>\n+#include <string>\n #include <unistd.h>\n #include <vector>\n \n@@ -87,6 +89,9 @@ extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)\n // This function is used by libFuzzer\n extern \"C\" int LLVMFuzzerInitialize(int* argc, char*** argv)\n {\n+    const std::vector<std::string> arguments{*argv, *argv + *argc};\n+    const bool merge_mode = std::find(arguments.begin(), arguments.end(), \"-merge=1\") != arguments.end();\n+    EnableSyscallSandbox(merge_mode ? SyscallSandboxPolicy::LIBFUZZER_MERGE_MODE : SyscallSandboxPolicy::LIBFUZZER);\n     DisableFurtherSyscallSandboxRestrictions();\n     initialize();\n     return 0;"
      },
      {
        "sha": "8417cf8c419f0382f96a23551132942312616996",
        "filename": "src/util/syscall_sandbox.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/333374a754ff71288c914bd4a3e285d8eeff1987/src/util/syscall_sandbox.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/333374a754ff71288c914bd4a3e285d8eeff1987/src/util/syscall_sandbox.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/syscall_sandbox.cpp?ref=333374a754ff71288c914bd4a3e285d8eeff1987",
        "patch": "@@ -260,6 +260,20 @@ class SeccompPolicyBuilder\n         allowed_syscalls.insert(__NR_restart_syscall); // restart a system call after interruption by a stop signal\n     }\n \n+    void AllowLibFuzzer()\n+    {\n+        allowed_syscalls.insert(__NR_execve);          // execute program\n+        allowed_syscalls.insert(__NR_ptrace);          // process trace\n+        allowed_syscalls.insert(__NR_set_tid_address); // set pointer to thread ID\n+        allowed_syscalls.insert(__NR_setitimer);       // set value of an interval timer\n+    }\n+\n+    void AllowLibFuzzerMergeMode()\n+    {\n+        allowed_syscalls.insert(__NR_bind);   // bind a name to a socket\n+        allowed_syscalls.insert(__NR_socket); // create an endpoint for communication\n+    }\n+\n     void AllowNetwork()\n     {\n         allowed_syscalls.insert(__NR_accept);     // accept a connection on a socket\n@@ -449,6 +463,15 @@ void EnableSyscallSandbox(const SyscallSandboxPolicy syscall_policy)\n     case SyscallSandboxPolicy::SHUTOFF: // Thread: main thread (state: shutoff)\n         seccomp_policy_builder.AllowFileSystem();\n         break;\n+    case SyscallSandboxPolicy::LIBFUZZER: // Fuzzing mode: Allow syscalls needed by libFuzzer and don't allow networking.\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowLibFuzzer();\n+        break;\n+    case SyscallSandboxPolicy::LIBFUZZER_MERGE_MODE: // Fuzzing mode: As SyscallSandboxPolicy::LIBFUZZER, but allow also for syscalls needed by libFuzzer's merge mode (-merge=1).\n+        seccomp_policy_builder.AllowFileSystem();\n+        seccomp_policy_builder.AllowLibFuzzer();\n+        seccomp_policy_builder.AllowLibFuzzerMergeMode();\n+        break;\n     }\n \n #if defined(USE_SYSCALL_SANDBOX_MODE_KILL_WITHOUT_DEBUG)"
      },
      {
        "sha": "d0367dc262f8f90645b271dfd8ad932cbca79823",
        "filename": "src/util/syscall_sandbox.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/333374a754ff71288c914bd4a3e285d8eeff1987/src/util/syscall_sandbox.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/333374a754ff71288c914bd4a3e285d8eeff1987/src/util/syscall_sandbox.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/syscall_sandbox.h?ref=333374a754ff71288c914bd4a3e285d8eeff1987",
        "patch": "@@ -26,6 +26,10 @@ enum class SyscallSandboxPolicy {\n \n     // 3. Shutdown\n     SHUTOFF,\n+\n+    // Others (non-bitcoind)\n+    LIBFUZZER,\n+    LIBFUZZER_MERGE_MODE,\n };\n \n //! Force the current thread (and threads created from the current thread) into"
      }
    ]
  }
]