[
  {
    "sha": "15860448d38ba7a436cf7c08fa5c0132fe10f8d3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNTg2MDQ0OGQzOGJhN2E0MzZjZjdjMDhmYTVjMDEzMmZlMTBmOGQz",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-08-20T09:19:35Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-08-23T13:32:39Z"
      },
      "message": "[Qt] RPC-Console: support nested commands and simple value queries\n\nCommands can be executed with bracket syntax, example: `getwalletinfo()`.\nCommands can be nested, example: `sendtoaddress(getnewaddress(), 10)`.\nSimple queries are possible: `listunspent()[0][txid]`\nObject values are accessed with a non-quoted string, example: [txid].\n\nFully backward compatible.\n`generate 101` is identical to `generate(101)`\nResult value queries indicated with `[]` require the new brackets syntax.\nComma as argument separator is now also possible: `sendtoaddress,<address>,<amount>`\nSpace as argument separator works also with the bracket syntax, example: `sendtoaddress(getnewaddress() 10)\n\nNo dept limitation, complex commands are possible:\n`decoderawtransaction(getrawtransaction(getblock(getbestblockhash())[tx][0]))[vout][0][value]`",
      "tree": {
        "sha": "b83a993e822d79cb21dd067e4c460de4a52949b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b83a993e822d79cb21dd067e4c460de4a52949b1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/15860448d38ba7a436cf7c08fa5c0132fe10f8d3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXvFB4AAoJECnUvLZBb1PsGdwP/1TB/Ve9oGMbI8F1/SnLZbqs\naBNf0V4udKi2j3CZtUaMzQRVVPZKKRVs6oJ+emnO3l7O6Bt60H/cjyJeJPb+oLH5\noMsUTpn78KB1nOVQ2mznEHrHdLJc1GWZ2M7aSujSMpCX6fCfol9Nau8JObJkwklD\n5416Ibzy9qrm5YldpS2Cj23IGqTSpvV57UHglMkf/+cXZGs514fs1ZBIwLFeiE9I\nVvp6HpNTK6wIJflgth8cICVivJPiRX9LJXoUZy91I6EhUPxrS0M2uzwswero1Hw6\n7AMNvIXb4UfMQGWly1GMf2u/3nTXSKl1Jc4Q2MHDbu4SrL27ibu6Frnix5S2W/Z5\nyUtKwTK0QiRN5CEHDIk6Pd5pHS/00XTDa4s9nnxMBuj06KWJ6f2KVraN+SPvRfaT\nQYumC/NJhBftfY1pUEF+y5S1cKyWzmx/1+T8SvoGYi0tJdorxPlj+/fNkvBZxcjk\nz+QmXebzhsdu9Q452lECiAg0PLou59X+95T+TVccU5dlXQuswel+nzJYYqpYPtmG\nmU1ZHnFpuddO9moPmqzCqC/xCXrwCK0ZKU7MXPl0pNsQ09ak+1AVcKbYn7aW5xOx\nHw9rApxaM6FHOo9Dy4jSEAGWDD4u2Otky1eWUz3aZa0+w40wZbI0YWFmka0aM7AH\n4FaaU9+L6nEUsKX4dvCv\n=lVv2\n-----END PGP SIGNATURE-----",
        "payload": "tree b83a993e822d79cb21dd067e4c460de4a52949b1\nparent 41d8e78f94c5ad54684f1f15efb0264036418e71\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1471684775 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1471959159 +0200\n\n[Qt] RPC-Console: support nested commands and simple value queries\n\nCommands can be executed with bracket syntax, example: `getwalletinfo()`.\nCommands can be nested, example: `sendtoaddress(getnewaddress(), 10)`.\nSimple queries are possible: `listunspent()[0][txid]`\nObject values are accessed with a non-quoted string, example: [txid].\n\nFully backward compatible.\n`generate 101` is identical to `generate(101)`\nResult value queries indicated with `[]` require the new brackets syntax.\nComma as argument separator is now also possible: `sendtoaddress,<address>,<amount>`\nSpace as argument separator works also with the bracket syntax, example: `sendtoaddress(getnewaddress() 10)\n\nNo dept limitation, complex commands are possible:\n`decoderawtransaction(getrawtransaction(getblock(getbestblockhash())[tx][0]))[vout][0][value]`\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15860448d38ba7a436cf7c08fa5c0132fe10f8d3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/15860448d38ba7a436cf7c08fa5c0132fe10f8d3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15860448d38ba7a436cf7c08fa5c0132fe10f8d3/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "41d8e78f94c5ad54684f1f15efb0264036418e71",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41d8e78f94c5ad54684f1f15efb0264036418e71",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/41d8e78f94c5ad54684f1f15efb0264036418e71"
      }
    ],
    "stats": {
      "total": 371,
      "additions": 300,
      "deletions": 71
    },
    "files": [
      {
        "sha": "0a7efb5d5b2e54f77a8acabf9bc3c4a777181a40",
        "filename": "src/Makefile.qttest.include",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15860448d38ba7a436cf7c08fa5c0132fe10f8d3/src/Makefile.qttest.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15860448d38ba7a436cf7c08fa5c0132fe10f8d3/src/Makefile.qttest.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qttest.include?ref=15860448d38ba7a436cf7c08fa5c0132fe10f8d3",
        "patch": "@@ -1,13 +1,16 @@\n bin_PROGRAMS += qt/test/test_bitcoin-qt\n TESTS += qt/test/test_bitcoin-qt\n \n-TEST_QT_MOC_CPP = qt/test/moc_uritests.cpp\n+TEST_QT_MOC_CPP = \\\n+  qt/test/moc_rpcnestedtests.cpp \\\n+  qt/test/moc_uritests.cpp\n \n if ENABLE_WALLET\n TEST_QT_MOC_CPP += qt/test/moc_paymentservertests.cpp\n endif\n \n TEST_QT_H = \\\n+  qt/test/rpcnestedtests.h \\\n   qt/test/uritests.h \\\n   qt/test/paymentrequestdata.h \\\n   qt/test/paymentservertests.h\n@@ -16,6 +19,7 @@ qt_test_test_bitcoin_qt_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(BITCOIN_\n   $(QT_INCLUDES) $(QT_TEST_INCLUDES) $(PROTOBUF_CFLAGS)\n \n qt_test_test_bitcoin_qt_SOURCES = \\\n+  qt/test/rpcnestedtests.cpp \\\n   qt/test/test_main.cpp \\\n   qt/test/uritests.cpp \\\n   $(TEST_QT_H)"
      },
      {
        "sha": "0456b89da2a1643ba5a84938909f2f1e736d5354",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 160,
        "deletions": 69,
        "changes": 229,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15860448d38ba7a436cf7c08fa5c0132fe10f8d3/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15860448d38ba7a436cf7c08fa5c0132fe10f8d3/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=15860448d38ba7a436cf7c08fa5c0132fe10f8d3",
        "patch": "@@ -113,117 +113,208 @@ class QtRPCTimerInterface: public RPCTimerInterface\n #include \"rpcconsole.moc\"\n \n /**\n- * Split shell command line into a list of arguments. Aims to emulate \\c bash and friends.\n+ * Split shell command line into a list of arguments and execute the command(s).\n+ * Aims to emulate \\c bash and friends.\n  *\n- * - Arguments are delimited with whitespace\n+ * - Command nesting is possible with brackets [example: validateaddress(getnewaddress())]\n+ * - Arguments are delimited with whitespace or comma\n  * - Extra whitespace at the beginning and end and between arguments will be ignored\n  * - Text can be \"double\" or 'single' quoted\n  * - The backslash \\c \\ is used as escape character\n  *   - Outside quotes, any character can be escaped\n  *   - Within double quotes, only escape \\c \" and backslashes before a \\c \" or another backslash\n  *   - Within single quotes, no escaping is possible and no special interpretation takes place\n  *\n- * @param[out]   args        Parsed arguments will be appended to this list\n+ * @param[out]   result      stringified Result from the executed command(chain)\n  * @param[in]    strCommand  Command line to split\n  */\n-bool parseCommandLine(std::vector<std::string> &args, const std::string &strCommand)\n+\n+bool RPCConsole::RPCExecuteCommandLine(std::string &strResult, const std::string &strCommand)\n {\n+    std::vector< std::vector<std::string> > stack;\n+    stack.push_back(std::vector<std::string>());\n+\n     enum CmdParseState\n     {\n         STATE_EATING_SPACES,\n         STATE_ARGUMENT,\n         STATE_SINGLEQUOTED,\n         STATE_DOUBLEQUOTED,\n         STATE_ESCAPE_OUTER,\n-        STATE_ESCAPE_DOUBLEQUOTED\n+        STATE_ESCAPE_DOUBLEQUOTED,\n+        STATE_COMMAND_EXECUTED,\n+        STATE_COMMAND_EXECUTED_INNER\n     } state = STATE_EATING_SPACES;\n     std::string curarg;\n-    Q_FOREACH(char ch, strCommand)\n+    UniValue lastResult;\n+\n+    std::string strCommandTerminated = strCommand;\n+    if (strCommandTerminated.back() != '\\n')\n+        strCommandTerminated += \"\\n\";\n+    for(char ch: strCommandTerminated)\n     {\n         switch(state)\n         {\n-        case STATE_ARGUMENT: // In or after argument\n-        case STATE_EATING_SPACES: // Handle runs of whitespace\n-            switch(ch)\n+            case STATE_COMMAND_EXECUTED_INNER:\n+            case STATE_COMMAND_EXECUTED:\n             {\n-            case '\"': state = STATE_DOUBLEQUOTED; break;\n-            case '\\'': state = STATE_SINGLEQUOTED; break;\n-            case '\\\\': state = STATE_ESCAPE_OUTER; break;\n-            case ' ': case '\\n': case '\\t':\n-                if(state == STATE_ARGUMENT) // Space ends argument\n+                bool breakParsing = true;\n+                switch(ch)\n                 {\n-                    args.push_back(curarg);\n-                    curarg.clear();\n+                    case '[': curarg.clear(); state = STATE_COMMAND_EXECUTED_INNER; break;\n+                    default:\n+                        if (state == STATE_COMMAND_EXECUTED_INNER)\n+                        {\n+                            if (ch != ']')\n+                            {\n+                                // append char to the current argument (which is also used for the query command)\n+                                curarg += ch;\n+                                break;\n+                            }\n+                            if (curarg.size())\n+                            {\n+                                // if we have a value query, query arrays with index and objects with a string key\n+                                UniValue subelement;\n+                                if (lastResult.isArray())\n+                                {\n+                                    for(char argch: curarg)\n+                                        if (!std::isdigit(argch))\n+                                            throw std::runtime_error(\"Invalid result query\");\n+                                    subelement = lastResult[atoi(curarg.c_str())];\n+                                }\n+                                else if (lastResult.isObject())\n+                                    subelement = find_value(lastResult, curarg);\n+                                else\n+                                    throw std::runtime_error(\"Invalid result query\"); //no array or object: abort\n+                                lastResult = subelement;\n+                            }\n+\n+                            state = STATE_COMMAND_EXECUTED;\n+                            break;\n+                        }\n+                        // don't break parsing when the char is required for the next argument\n+                        breakParsing = false;\n+\n+                        // pop the stack and return the result to the current command arguments\n+                        stack.pop_back();\n+\n+                        // don't stringify the json in case of a string to avoid doublequotes\n+                        if (lastResult.isStr())\n+                            curarg = lastResult.get_str();\n+                        else\n+                            curarg = lastResult.write(2);\n+\n+                        // if we have a non empty result, use it as stack argument otherwise as general result\n+                        if (curarg.size())\n+                        {\n+                            if (stack.size())\n+                                stack.back().push_back(curarg);\n+                            else\n+                                strResult = curarg;\n+                        }\n+                        curarg.clear();\n+                        // assume eating space state\n+                        state = STATE_EATING_SPACES;\n                 }\n-                state = STATE_EATING_SPACES;\n-                break;\n-            default: curarg += ch; state = STATE_ARGUMENT;\n+                if (breakParsing)\n+                    break;\n             }\n-            break;\n-        case STATE_SINGLEQUOTED: // Single-quoted string\n-            switch(ch)\n+            case STATE_ARGUMENT: // In or after argument\n+            case STATE_EATING_SPACES: // Handle runs of whitespace\n+                switch(ch)\n             {\n-            case '\\'': state = STATE_ARGUMENT; break;\n-            default: curarg += ch;\n+                case '\"': state = STATE_DOUBLEQUOTED; break;\n+                case '\\'': state = STATE_SINGLEQUOTED; break;\n+                case '\\\\': state = STATE_ESCAPE_OUTER; break;\n+                case '(': case ')': case '\\n':\n+                    if (state == STATE_ARGUMENT)\n+                    {\n+                        if (ch == '(' && stack.size() && stack.back().size() > 0)\n+                            stack.push_back(std::vector<std::string>());\n+                        if (curarg.size())\n+                        {\n+                            // don't allow commands after executed commands on baselevel\n+                            if (!stack.size())\n+                                throw std::runtime_error(\"Invalid Syntax\");\n+                            stack.back().push_back(curarg);\n+                        }\n+                        curarg.clear();\n+                        state = STATE_EATING_SPACES;\n+                    }\n+                    if ((ch == ')' || ch == '\\n') && stack.size() > 0)\n+                    {\n+                        std::string strPrint;\n+                        // Convert argument list to JSON objects in method-dependent way,\n+                        // and pass it along with the method name to the dispatcher.\n+                        lastResult = tableRPC.execute(stack.back()[0], RPCConvertValues(stack.back()[0], std::vector<std::string>(stack.back().begin() + 1, stack.back().end())));\n+\n+                        state = STATE_COMMAND_EXECUTED;\n+                        curarg.clear();\n+                    }\n+                    break;\n+                case ' ': case ',': case '\\t':\n+                    if(state == STATE_ARGUMENT) // Space ends argument\n+                    {\n+                        if (curarg.size())\n+                            stack.back().push_back(curarg);\n+                        curarg.clear();\n+                    }\n+                    state = STATE_EATING_SPACES;\n+                    break;\n+                default: curarg += ch; state = STATE_ARGUMENT;\n             }\n-            break;\n-        case STATE_DOUBLEQUOTED: // Double-quoted string\n-            switch(ch)\n+                break;\n+            case STATE_SINGLEQUOTED: // Single-quoted string\n+                switch(ch)\n             {\n-            case '\"': state = STATE_ARGUMENT; break;\n-            case '\\\\': state = STATE_ESCAPE_DOUBLEQUOTED; break;\n-            default: curarg += ch;\n+                case '\\'': state = STATE_ARGUMENT; break;\n+                default: curarg += ch;\n             }\n-            break;\n-        case STATE_ESCAPE_OUTER: // '\\' outside quotes\n-            curarg += ch; state = STATE_ARGUMENT;\n-            break;\n-        case STATE_ESCAPE_DOUBLEQUOTED: // '\\' in double-quoted text\n-            if(ch != '\"' && ch != '\\\\') curarg += '\\\\'; // keep '\\' for everything but the quote and '\\' itself\n-            curarg += ch; state = STATE_DOUBLEQUOTED;\n-            break;\n+                break;\n+            case STATE_DOUBLEQUOTED: // Double-quoted string\n+                switch(ch)\n+            {\n+                case '\"': state = STATE_ARGUMENT; break;\n+                case '\\\\': state = STATE_ESCAPE_DOUBLEQUOTED; break;\n+                default: curarg += ch;\n+            }\n+                break;\n+            case STATE_ESCAPE_OUTER: // '\\' outside quotes\n+                curarg += ch; state = STATE_ARGUMENT;\n+                break;\n+            case STATE_ESCAPE_DOUBLEQUOTED: // '\\' in double-quoted text\n+                if(ch != '\"' && ch != '\\\\') curarg += '\\\\'; // keep '\\' for everything but the quote and '\\' itself\n+                curarg += ch; state = STATE_DOUBLEQUOTED;\n+                break;\n         }\n     }\n     switch(state) // final state\n     {\n-    case STATE_EATING_SPACES:\n-        return true;\n-    case STATE_ARGUMENT:\n-        args.push_back(curarg);\n-        return true;\n-    default: // ERROR to end in one of the other states\n-        return false;\n+        case STATE_COMMAND_EXECUTED:\n+            if (lastResult.isStr())\n+                strResult = lastResult.get_str();\n+            else\n+                strResult = lastResult.write(2);\n+        case STATE_ARGUMENT:\n+        case STATE_EATING_SPACES:\n+            return true;\n+        default: // ERROR to end in one of the other states\n+            return false;\n     }\n }\n \n void RPCExecutor::request(const QString &command)\n {\n-    std::vector<std::string> args;\n-    if(!parseCommandLine(args, command.toStdString()))\n-    {\n-        Q_EMIT reply(RPCConsole::CMD_ERROR, QString(\"Parse error: unbalanced ' or \\\"\"));\n-        return;\n-    }\n-    if(args.empty())\n-        return; // Nothing to do\n     try\n     {\n-        std::string strPrint;\n-        // Convert argument list to JSON objects in method-dependent way,\n-        // and pass it along with the method name to the dispatcher.\n-        UniValue result = tableRPC.execute(\n-            args[0],\n-            RPCConvertValues(args[0], std::vector<std::string>(args.begin() + 1, args.end())));\n-\n-        // Format result reply\n-        if (result.isNull())\n-            strPrint = \"\";\n-        else if (result.isStr())\n-            strPrint = result.get_str();\n-        else\n-            strPrint = result.write(2);\n-\n-        Q_EMIT reply(RPCConsole::CMD_REPLY, QString::fromStdString(strPrint));\n+        std::string result;\n+        std::string executableCommand = command.toStdString() + \"\\n\";\n+        if(!RPCConsole::RPCExecuteCommandLine(result, executableCommand))\n+        {\n+            Q_EMIT reply(RPCConsole::CMD_ERROR, QString(\"Parse error: unbalanced ' or \\\"\"));\n+            return;\n+        }\n+        Q_EMIT reply(RPCConsole::CMD_REPLY, QString::fromStdString(result));\n     }\n     catch (UniValue& objError)\n     {"
      },
      {
        "sha": "50224a1cc0bf16056b5c321b5f384e7d744f162e",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15860448d38ba7a436cf7c08fa5c0132fe10f8d3/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15860448d38ba7a436cf7c08fa5c0132fe10f8d3/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=15860448d38ba7a436cf7c08fa5c0132fe10f8d3",
        "patch": "@@ -35,6 +35,8 @@ class RPCConsole: public QWidget\n     explicit RPCConsole(const PlatformStyle *platformStyle, QWidget *parent);\n     ~RPCConsole();\n \n+    static bool RPCExecuteCommandLine(std::string &strResult, const std::string &strCommand);\n+\n     void setClientModel(ClientModel *model);\n \n     enum MessageClass {"
      },
      {
        "sha": "3dae33bafbbbf8d3086ee75e4636f455be255a6b",
        "filename": "src/qt/test/rpcnestedtests.cpp",
        "status": "added",
        "additions": 93,
        "deletions": 0,
        "changes": 93,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15860448d38ba7a436cf7c08fa5c0132fe10f8d3/src/qt/test/rpcnestedtests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15860448d38ba7a436cf7c08fa5c0132fe10f8d3/src/qt/test/rpcnestedtests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.cpp?ref=15860448d38ba7a436cf7c08fa5c0132fe10f8d3",
        "patch": "@@ -0,0 +1,93 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"rpcnestedtests.h\"\n+\n+#include \"chainparams.h\"\n+#include \"consensus/validation.h\"\n+#include \"main.h\"\n+#include \"rpc/register.h\"\n+#include \"rpc/server.h\"\n+#include \"rpcconsole.h\"\n+#include \"test/testutil.h\"\n+#include \"univalue.h\"\n+#include \"util.h\"\n+\n+#include <QDir>\n+\n+#include <boost/filesystem.hpp>\n+\n+void RPCNestedTests::rpcNestedTests()\n+{\n+    UniValue jsonRPCError;\n+\n+    // do some test setup\n+    // could be moved to a more generic place when we add more tests on QT level\n+    const CChainParams& chainparams = Params();\n+    RegisterAllCoreRPCCommands(tableRPC);\n+    ClearDatadirCache();\n+    std::string path = QDir::tempPath().toStdString() + \"/\" + strprintf(\"test_bitcoin_qt_%lu_%i\", (unsigned long)GetTime(), (int)(GetRand(100000)));\n+    QDir dir(QString::fromStdString(path));\n+    dir.mkpath(\".\");\n+    mapArgs[\"-datadir\"] = path;\n+    //mempool.setSanityCheck(1.0);\n+    pblocktree = new CBlockTreeDB(1 << 20, true);\n+    pcoinsdbview = new CCoinsViewDB(1 << 23, true);\n+    pcoinsTip = new CCoinsViewCache(pcoinsdbview);\n+    InitBlockIndex(chainparams);\n+    {\n+        CValidationState state;\n+        bool ok = ActivateBestChain(state, chainparams);\n+        QVERIFY(ok);\n+    }\n+\n+    SetRPCWarmupFinished();\n+\n+    std::string result;\n+    std::string result2;\n+    RPCConsole::RPCExecuteCommandLine(result, \"getblockchaininfo()[chain]\"); //simple result filtering with path\n+    QVERIFY(result==\"main\");\n+\n+    RPCConsole::RPCExecuteCommandLine(result, \"getblock(getbestblockhash())\"); //simple 2 level nesting\n+    RPCConsole::RPCExecuteCommandLine(result, \"getblock(getblock(getbestblockhash())[hash], true)\");\n+\n+    RPCConsole::RPCExecuteCommandLine(result, \"getblock( getblock( getblock(getbestblockhash())[hash] )[hash], true)\"); //4 level nesting with whitespace, filtering path and boolean parameter\n+\n+    RPCConsole::RPCExecuteCommandLine(result, \"getblockchaininfo\");\n+    QVERIFY(result.substr(0,1) == \"{\");\n+\n+    RPCConsole::RPCExecuteCommandLine(result, \"getblockchaininfo()\");\n+    QVERIFY(result.substr(0,1) == \"{\");\n+\n+    RPCConsole::RPCExecuteCommandLine(result, \"getblockchaininfo \"); //whitespace at the end will be tolerated\n+    QVERIFY(result.substr(0,1) == \"{\");\n+\n+#if QT_VERSION >= 0x050300\n+    // do the QVERIFY_EXCEPTION_THROWN checks only with Qt5.3 and higher (QVERIFY_EXCEPTION_THROWN was introduced in Qt5.3)\n+    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(result, \"getblockchaininfo() .\\n\"), std::runtime_error); //invalid syntax\n+    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(result, \"getblockchaininfo() getblockchaininfo()\"), std::runtime_error); //invalid syntax\n+    (RPCConsole::RPCExecuteCommandLine(result, \"getblockchaininfo(\")); //tolerate non closing brackets if we have no arguments\n+    (RPCConsole::RPCExecuteCommandLine(result, \"getblockchaininfo()()()\")); //tolerate non command brackts\n+    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(result, \"getblockchaininfo(True)\"), UniValue); //invalid argument\n+    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(result, \"a(getblockchaininfo(True))\"), UniValue); //method not found\n+#endif\n+\n+    (RPCConsole::RPCExecuteCommandLine(result, \"getblockchaininfo()[\\\"chain\\\"]\")); //Quote path identifier are allowed, but look after a child contaning the quotes in the key\n+    QVERIFY(result == \"null\");\n+\n+    (RPCConsole::RPCExecuteCommandLine(result, \"createrawtransaction [] {} 0\")); //parameter not in brackets are allowed\n+    (RPCConsole::RPCExecuteCommandLine(result2, \"createrawtransaction([],{},0)\")); //parameter in brackets are allowed\n+    QVERIFY(result == result2);\n+    (RPCConsole::RPCExecuteCommandLine(result2, \"createrawtransaction( [],  {} , 0   )\")); //whitespace between parametres is allowed\n+    QVERIFY(result == result2);\n+\n+    RPCConsole::RPCExecuteCommandLine(result, \"getblock(getbestblockhash())[tx][0]\");\n+    QVERIFY(result == \"4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\");\n+\n+    delete pcoinsTip;\n+    delete pcoinsdbview;\n+    delete pblocktree;\n+\n+    boost::filesystem::remove_all(boost::filesystem::path(path));\n+}"
      },
      {
        "sha": "9ad409019f28147dd7a5db85c1b76b7e4006ff9a",
        "filename": "src/qt/test/rpcnestedtests.h",
        "status": "added",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15860448d38ba7a436cf7c08fa5c0132fe10f8d3/src/qt/test/rpcnestedtests.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15860448d38ba7a436cf7c08fa5c0132fe10f8d3/src/qt/test/rpcnestedtests.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.h?ref=15860448d38ba7a436cf7c08fa5c0132fe10f8d3",
        "patch": "@@ -0,0 +1,25 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_QT_TEST_RPC_NESTED_TESTS_H\n+#define BITCOIN_QT_TEST_RPC_NESTED_TESTS_H\n+\n+#include <QObject>\n+#include <QTest>\n+\n+#include \"txdb.h\"\n+#include \"txmempool.h\"\n+\n+class RPCNestedTests : public QObject\n+{\n+    Q_OBJECT\n+\n+    private Q_SLOTS:\n+    void rpcNestedTests();\n+\n+private:\n+    CCoinsViewDB *pcoinsdbview;\n+};\n+\n+#endif // BITCOIN_QT_TEST_RPC_NESTED_TESTS_H"
      },
      {
        "sha": "dbaab54fb65b4db4b0644be07a1ef40dc9e842d2",
        "filename": "src/qt/test/test_main.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 1,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15860448d38ba7a436cf7c08fa5c0132fe10f8d3/src/qt/test/test_main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15860448d38ba7a436cf7c08fa5c0132fe10f8d3/src/qt/test/test_main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/test_main.cpp?ref=15860448d38ba7a436cf7c08fa5c0132fe10f8d3",
        "patch": "@@ -1,11 +1,14 @@\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n+// Copyright (c) 2009-2016 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #if defined(HAVE_CONFIG_H)\n #include \"config/bitcoin-config.h\"\n #endif\n \n+#include \"chainparams.h\"\n+#include \"key.h\"\n+#include \"rpcnestedtests.h\"\n #include \"util.h\"\n #include \"uritests.h\"\n \n@@ -27,10 +30,17 @@ Q_IMPORT_PLUGIN(qtwcodecs)\n Q_IMPORT_PLUGIN(qkrcodecs)\n #endif\n \n+extern void noui_connect();\n+\n // This is all you need to run all the tests\n int main(int argc, char *argv[])\n {\n+    ECC_Start();\n     SetupEnvironment();\n+    SetupNetworking();\n+    SelectParams(CBaseChainParams::MAIN);\n+    noui_connect();\n+\n     bool fInvalid = false;\n \n     // Don't remove this, it's needed to access\n@@ -48,6 +58,10 @@ int main(int argc, char *argv[])\n     if (QTest::qExec(&test2) != 0)\n         fInvalid = true;\n #endif\n+    RPCNestedTests test3;\n+    if (QTest::qExec(&test3) != 0)\n+        fInvalid = true;\n \n+    ECC_Stop();\n     return fInvalid;\n }"
      }
    ]
  }
]