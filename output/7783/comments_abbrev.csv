luke-jr,2016-04-01T18:34:10Z,"Isn't this going a bit overboard for debugging tools? (OTOH, it's only about 150 LOC...)\n",https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-204506292,204506292,
MarcoFalke,2016-04-01T18:44:55Z,"I think this is useful. An alternative proposed was to use variables `a = getnewaddress` `sendtoaddress a 10`, but this pull is fine as well.\n",https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-204513734,204513734,
jonasschnelli,2016-04-01T18:53:33Z,"> Isn't this going a bit overboard for debugging tools? (OTOH, it's only about 150 LOC...)\n\nIt is a ""luxury extension"", right. But given the time some of us have spent in the console repeating and copy-pasting commands out- and input, I think it worth taking this in.\nAlso, I don't see critical risks for this.\n\nIMO we should also extend bitcoin-cli to support nested commands. It simply increas",https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-204521501,204521501,
laanwj,2016-04-02T05:41:05Z,"I like this concept. I initially had @luke-jr 's concern as well. But only a bit of code added, and it's well-contained.\n\nIt's not just luxury: it's useful for cases like #7599 where someone wants to insert the output of a previous command into a new one, but it's too long for copy pasting.\n\n> IMO we should also extend bitcoin-cli to support nested commands. It simply increases productivity wi",https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-204650396,204650396,
paveljanik,2016-04-02T10:52:22Z,"On the other hand, many advices read 'Run getsomething' and so. This will bring another ""fork"" - you have to also add that you have to run this in Debug console or via `bitcoin-cli`, because the syntax will ""fork"".\n\nConcept ACK (I'd also like to see this in `bitcoin-cli`)\n",https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-204693463,204693463,
luke-jr,2016-04-02T10:57:52Z,"Almost tempting to make it server-side, if we're using long output-inputs... but this seems fine (Concept ACK) as-is; further improvement can wait for another PR.\n",https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-204694359,204694359,
sipa,2016-06-02T14:10:51Z,"Would it be possible to abstract out this functionality in a separate commit (including the existing RPC parsing logic from the Qt console) and move it to rpc/server.cpp, as an actual RPC call that just takes a string argument with a command to parse?\n\nThat would make it both more usable (by exposing it as RPC, bitcoin-cli and other tools can use it too), and more testable (we can have RPC tests",https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-223303447,223303447,
jonasschnelli,2016-06-02T14:14:26Z,"I have though about that but I wasn't sure if we should delegate the parsing/executing of nested command to the server. This PR would do the parsing ""client side"". We could also factor out the parsing and use it client-side (Qt / bitcoin-cli).\n\nBut I agree, it could be useful server-side.\n",https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-223304571,223304571,
sipa,2016-06-02T14:21:23Z,"Yes, I agree having it client side is useful. My main reason for suggesting abstracting it out it because I don't think it's very hard, and would make the parsing logic much easier to test.\n",https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-223306700,223306700,
UniQredit,2016-07-19T05:08:31Z,This would save a hell lot of time and copy/pasting \n,https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-233533678,233533678,
jonasschnelli,2016-07-19T15:22:34Z,"- Finally rebased this great PR and refactored the parsing logic into `rpc/server.cpp`\n- Added some unit tests\n\nThis could now be simply extended to the RPC server, although, nested commands could be resource and time hungry.\n",https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-233667907,233667907,
jonasschnelli,2016-07-20T13:27:26Z,Fixed nits. Had to add `client.cpp` to `libbitcoin_server_a`. Should that be a problem @theuni?\n,https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-233948349,233948349,
laanwj,2016-08-12T13:00:29Z,"> Would it be possible to abstract out this functionality in a separate commit (including the existing RPC parsing logic from the Qt console) and move it to rpc/server.cpp,\n\nSorry to be contrary, but IMO, functionality related to parsing and not dispatching should be in `rpc/client.cpp` instead of `rpc/server.cpp`. Note that bitcoin-cli links the client library, not the server one.\n\n(another r",https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-239439614,239439614,
jonasschnelli,2016-08-12T13:08:38Z,"Having it in `rpc/client.cpp` instead of `server.cpp` would be good I guess. The only restriction would then be, that we cannot allow (later) server side nested commands (which would probably perform slightly faster). But I'm not sure if we really want server side nested commands with the current locking behavior.\n",https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-239441380,239441380,
laanwj,2016-08-12T13:12:41Z,"Server-side nested commands are not part of the JSON-RPC standard. It is an interesting thought but that would be a completely different proposal, and I don't think it would share any code with this. I'd imagine it would work something akin to batching (but w/ nested structures), not by parsing/formatting expression strings. Seeing how little even simple batching is used, I'm also not sure there i",https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-239442267,239442267,
theuni,2016-08-12T18:07:30Z,Agreed with keeping parsing client-side. Let's not tangle up the dependencies.\n\nI really like this idea btw.\n,https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-239518801,239518801,
jonasschnelli,2016-08-20T09:21:55Z,Removed all changes from the core classes.\nIt's now a GUI only change.\nAdded Qt unit tests for the nested commands.\n,https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-241189243,241189243,
MarcoFalke,2016-08-21T12:02:10Z,"qt-test fail on travis, apparently.\n",https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-241253645,241253645,
jonasschnelli,2016-08-23T09:43:39Z,Fixed the travis Qt-Test issue.\nThis PR is looking for reviewers.\n,https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-241680531,241680531,
jonasschnelli,2016-08-23T13:32:59Z,"Fixed nits, added cleanup of Qt test data.\n",https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-241731569,241731569,
dcousens,2016-09-14T06:54:16Z,concept ACK\n,https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-246922574,246922574,
laanwj,2016-09-20T11:27:59Z,"utACK.\n\nI do think this needs documentation. Not necessarily in this pull, but currently the debug console help consists of two lines ""Use up and down arrows to navigate history, and Ctrl-L to clear screen. Type help for an overview of available commands."". \n\nMaybe add a debug-console-only command like `help` that shows how to use nested commands and potentially other advanced tricks, and add ",https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-248274853,248274853,
jonasschnelli,2016-09-20T11:30:15Z,> I do think this needs documentation.  [...]\n\nGood point. I try something. Maybe not in this PR.\nCould – maybe – be combined with this https://github.com/bitcoin/bitcoin/issues/8544#issuecomment-240970925\n,https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-248275264,248275264,
laanwj,2016-09-20T11:32:15Z,"`getwalletinfo()[""walletversion""]` doesn't work - can't it index into objects?\n",https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-248275655,248275655,
jonasschnelli,2016-09-20T11:33:27Z,@laanwj: I guess you need to use `getwalletinfo()[walletversion]` (without double-quotes).\n,https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-248275908,248275908,
laanwj,2016-09-20T11:34:17Z,"@jonasschnelli awesome, that works. So that's why we need documentation :)\n",https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-248276046,248276046,
jonasschnelli,2016-09-20T11:36:33Z,"@laanwj: Agree on the documentation. The dropped `""`(double quotes) for an index access is quite uncommon, but can make sense because all our JSON properties are pure ASCII without whitespace.\n\nAllowing the double-quotes (ignore them while parsing) could be a useful addition.\n",https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-248276477,248276477,
laanwj,2016-09-20T11:52:46Z,"For testing this it's useful to add an `echo` command that simply returns what is passed to it, and `echon` which does the same but is marked to receive numbers/booleans/objects in `vRPCConvertParams`:\n\n``` patch\ndiff --git a/src/rpc/client.cpp b/src/rpc/client.cpp\nindex c14d9d6..4e09249 100644\n--- a/src/rpc/client.cpp\n+++ b/src/rpc/client.cpp\n@@ -109,6 +109,7 @@ static const CRPCConvertPar",https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-248279533,248279533,
laanwj,2016-09-20T12:15:49Z,ACK 2ca6b9d\n,https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-248284007,248284007,
MarcoFalke,2016-07-19T15:29:35Z,There is no whitespace at the end?\n,https://github.com/bitcoin/bitcoin/pull/7783#discussion_r71362237,71362237,src/test/rpc_tests.cpp
MarcoFalke,2016-07-19T15:30:53Z,`:%s/toller/toler/g`\n,https://github.com/bitcoin/bitcoin/pull/7783#discussion_r71362470,71362470,src/test/rpc_tests.cpp
laanwj,2016-08-12T13:06:34Z,"client.cpp is part of `libbitcoin_cli`, which is ""cli: shared between bitcoin-cli and bitcoin-qt"" if you need access to that then link that library. Don't include the compilation unit in two libraries.\n",https://github.com/bitcoin/bitcoin/pull/7783#discussion_r74586915,74586915,src/Makefile.am
UdjinM6,2016-08-23T10:19:07Z,`curarg.size()` should already be ok since it's checked in line 170\n,https://github.com/bitcoin/bitcoin/pull/7783#discussion_r75838482,75838482,src/qt/rpcconsole.cpp
UdjinM6,2016-08-23T10:19:21Z,same here for `curarg.size()`\n,https://github.com/bitcoin/bitcoin/pull/7783#discussion_r75838520,75838520,src/qt/rpcconsole.cpp
UdjinM6,2016-08-23T10:24:32Z,"nit: since both branches for that `if` end with `break`, nesting level here can be reduced by smth like:\n\n```\n                            if (ch != ']')\n                            {\n                                // append char to the current argument (which is also used for the query command)\n                                curarg += ch;\n                                break;\n          ",https://github.com/bitcoin/bitcoin/pull/7783#discussion_r75839276,75839276,src/qt/rpcconsole.cpp
MarcoFalke,2016-08-23T10:25:52Z,nit: typo\n,https://github.com/bitcoin/bitcoin/pull/7783#discussion_r75839479,75839479,src/qt/rpcconsole.cpp
UdjinM6,2016-08-23T10:27:25Z,nit: maybe change names to `strResult` and `strExecutableCommand`? Same for strings in rpcnestedtests.cpp\n,https://github.com/bitcoin/bitcoin/pull/7783#discussion_r75839676,75839676,src/qt/rpcconsole.cpp
MarcoFalke,2016-08-23T10:31:41Z,Any reason for this name?\n,https://github.com/bitcoin/bitcoin/pull/7783#discussion_r75840282,75840282,src/qt/test/rpcnestedtests.cpp
MarcoFalke,2016-08-23T10:31:56Z,Also I feel like this folder should be cleaned up on exit?\n,https://github.com/bitcoin/bitcoin/pull/7783#discussion_r75840310,75840310,src/qt/test/rpcnestedtests.cpp
MarcoFalke,2016-09-20T22:06:19Z,Nit: `strResult`\n,https://github.com/bitcoin/bitcoin/pull/7783#discussion_r79723451,79723451,src/qt/rpcconsole.cpp
MarcoFalke,2016-09-20T22:10:17Z,Nit: `[` can also be unbalanced\n,https://github.com/bitcoin/bitcoin/pull/7783#discussion_r79724061,79724061,src/qt/rpcconsole.cpp
MarcoFalke,2016-09-20T22:14:20Z,"Nits: Can be moved out of the guard, typo brackts, no wrapping brackets needed.\n",https://github.com/bitcoin/bitcoin/pull/7783#discussion_r79724719,79724719,src/qt/test/rpcnestedtests.cpp
