[
  {
    "sha": "509cb006d514cece5ab7680094f033c8dc8a2318",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MDljYjAwNmQ1MTRjZWNlNWFiNzY4MDA5NGYwMzNjOGRjOGEyMzE4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-03-28T16:18:30Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-04-15T14:33:05Z"
      },
      "message": "txdb: Add Cursor() method to CCoinsView to iterate over UTXO set\n\nAdd a method Cursor() to CCoinsView that returns a cursor which can be\nused to iterate over the whole UTXO set.\n\n- rpc: Change gettxoutsetinfo to use new Cursor method\n\n- txdb: Remove GetStats method - Now that GetStats is implemented in\n  terms of Cursor, remove it.",
      "tree": {
        "sha": "f14b1a13f7613a592d2489616c48f71c734ee2d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f14b1a13f7613a592d2489616c48f71c734ee2d3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/509cb006d514cece5ab7680094f033c8dc8a2318",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/509cb006d514cece5ab7680094f033c8dc8a2318",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/509cb006d514cece5ab7680094f033c8dc8a2318",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/509cb006d514cece5ab7680094f033c8dc8a2318/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1b2460bd5824170ab85757e35f81197199cce9d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b2460bd5824170ab85757e35f81197199cce9d6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1b2460bd5824170ab85757e35f81197199cce9d6"
      }
    ],
    "stats": {
      "total": 205,
      "additions": 148,
      "deletions": 57
    },
    "files": [
      {
        "sha": "1c329740b45f6e3538af43d94dc6d32e6c28b41a",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/509cb006d514cece5ab7680094f033c8dc8a2318/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/509cb006d514cece5ab7680094f033c8dc8a2318/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=509cb006d514cece5ab7680094f033c8dc8a2318",
        "patch": "@@ -45,7 +45,7 @@ bool CCoinsView::GetCoins(const uint256 &txid, CCoins &coins) const { return fal\n bool CCoinsView::HaveCoins(const uint256 &txid) const { return false; }\n uint256 CCoinsView::GetBestBlock() const { return uint256(); }\n bool CCoinsView::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return false; }\n-bool CCoinsView::GetStats(CCoinsStats &stats) const { return false; }\n+CCoinsViewCursor *CCoinsView::Cursor() const { return 0; }\n \n \n CCoinsViewBacked::CCoinsViewBacked(CCoinsView *viewIn) : base(viewIn) { }\n@@ -54,7 +54,7 @@ bool CCoinsViewBacked::HaveCoins(const uint256 &txid) const { return base->HaveC\n uint256 CCoinsViewBacked::GetBestBlock() const { return base->GetBestBlock(); }\n void CCoinsViewBacked::SetBackend(CCoinsView &viewIn) { base = &viewIn; }\n bool CCoinsViewBacked::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return base->BatchWrite(mapCoins, hashBlock); }\n-bool CCoinsViewBacked::GetStats(CCoinsStats &stats) const { return base->GetStats(stats); }\n+CCoinsViewCursor *CCoinsViewBacked::Cursor() const { return base->Cursor(); }\n \n CCoinsKeyHasher::CCoinsKeyHasher() : salt(GetRandHash()) {}\n \n@@ -300,3 +300,7 @@ CCoinsModifier::~CCoinsModifier()\n         cache.cachedCoinsUsage += it->second.coins.DynamicMemoryUsage();\n     }\n }\n+\n+CCoinsViewCursor::~CCoinsViewCursor()\n+{\n+}"
      },
      {
        "sha": "d72f8854731eb7cafee2faf2b853f340f6c5bb8c",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 20,
        "deletions": 13,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/509cb006d514cece5ab7680094f033c8dc8a2318/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/509cb006d514cece5ab7680094f033c8dc8a2318/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=509cb006d514cece5ab7680094f033c8dc8a2318",
        "patch": "@@ -297,19 +297,26 @@ struct CCoinsCacheEntry\n \n typedef boost::unordered_map<uint256, CCoinsCacheEntry, CCoinsKeyHasher> CCoinsMap;\n \n-struct CCoinsStats\n+/** Cursor for iterating over CoinsView state */\n+class CCoinsViewCursor\n {\n-    int nHeight;\n-    uint256 hashBlock;\n-    uint64_t nTransactions;\n-    uint64_t nTransactionOutputs;\n-    uint64_t nSerializedSize;\n-    uint256 hashSerialized;\n-    CAmount nTotalAmount;\n+public:\n+    CCoinsViewCursor(const uint256 &hashBlockIn): hashBlock(hashBlockIn) {}\n+    virtual ~CCoinsViewCursor();\n \n-    CCoinsStats() : nHeight(0), nTransactions(0), nTransactionOutputs(0), nSerializedSize(0), nTotalAmount(0) {}\n-};\n+    virtual bool GetKey(uint256 &key) const = 0;\n+    virtual bool GetValue(CCoins &coins) const = 0;\n+    /* Don't care about GetKeySize here */\n+    virtual unsigned int GetValueSize() const = 0;\n \n+    virtual bool Valid() const = 0;\n+    virtual void Next() = 0;\n+\n+    //! Get best block at the time this cursor was created\n+    const uint256 &GetBestBlock() const { return hashBlock; }\n+private:\n+    uint256 hashBlock;\n+};\n \n /** Abstract view on the open txout dataset. */\n class CCoinsView\n@@ -329,8 +336,8 @@ class CCoinsView\n     //! The passed mapCoins can be modified.\n     virtual bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n \n-    //! Calculate statistics about the unspent transaction output set\n-    virtual bool GetStats(CCoinsStats &stats) const;\n+    //! Get a cursor to iterate over the whole state\n+    virtual CCoinsViewCursor *Cursor() const;\n \n     //! As we use CCoinsViews polymorphically, have a virtual destructor\n     virtual ~CCoinsView() {}\n@@ -350,7 +357,7 @@ class CCoinsViewBacked : public CCoinsView\n     uint256 GetBestBlock() const;\n     void SetBackend(CCoinsView &viewIn);\n     bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n-    bool GetStats(CCoinsStats &stats) const;\n+    CCoinsViewCursor *Cursor() const;\n };\n \n "
      },
      {
        "sha": "8dbfbd5ff8d8b924ab59952a6aa3fc65d7f14961",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 57,
        "deletions": 1,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/509cb006d514cece5ab7680094f033c8dc8a2318/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/509cb006d514cece5ab7680094f033c8dc8a2318/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=509cb006d514cece5ab7680094f033c8dc8a2318",
        "patch": "@@ -18,11 +18,14 @@\n #include \"txmempool.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n+#include \"hash.h\"\n \n #include <stdint.h>\n \n #include <univalue.h>\n \n+#include <boost/thread/thread.hpp> // boost::thread::interrupt\n+\n using namespace std;\n \n extern void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry);\n@@ -432,6 +435,59 @@ UniValue getblock(const UniValue& params, bool fHelp)\n     return blockToJSON(block, pblockindex);\n }\n \n+struct CCoinsStats\n+{\n+    int nHeight;\n+    uint256 hashBlock;\n+    uint64_t nTransactions;\n+    uint64_t nTransactionOutputs;\n+    uint64_t nSerializedSize;\n+    uint256 hashSerialized;\n+    CAmount nTotalAmount;\n+\n+    CCoinsStats() : nHeight(0), nTransactions(0), nTransactionOutputs(0), nSerializedSize(0), nTotalAmount(0) {}\n+};\n+\n+//! Calculate statistics about the unspent transaction output set\n+static bool GetUTXOStats(CCoinsView *view, CCoinsStats &stats)\n+{\n+    boost::scoped_ptr<CCoinsViewCursor> pcursor(view->Cursor());\n+\n+    CHashWriter ss(SER_GETHASH, PROTOCOL_VERSION);\n+    stats.hashBlock = pcursor->GetBestBlock();\n+    {\n+        LOCK(cs_main);\n+        stats.nHeight = mapBlockIndex.find(stats.hashBlock)->second->nHeight;\n+    }\n+    ss << stats.hashBlock;\n+    CAmount nTotalAmount = 0;\n+    while (pcursor->Valid()) {\n+        boost::this_thread::interruption_point();\n+        uint256 key;\n+        CCoins coins;\n+        if (pcursor->GetKey(key) && pcursor->GetValue(coins)) {\n+            stats.nTransactions++;\n+            for (unsigned int i=0; i<coins.vout.size(); i++) {\n+                const CTxOut &out = coins.vout[i];\n+                if (!out.IsNull()) {\n+                    stats.nTransactionOutputs++;\n+                    ss << VARINT(i+1);\n+                    ss << out;\n+                    nTotalAmount += out.nValue;\n+                }\n+            }\n+            stats.nSerializedSize += 32 + pcursor->GetValueSize();\n+            ss << VARINT(0);\n+        } else {\n+            return error(\"%s: unable to read value\", __func__);\n+        }\n+        pcursor->Next();\n+    }\n+    stats.hashSerialized = ss.GetHash();\n+    stats.nTotalAmount = nTotalAmount;\n+    return true;\n+}\n+\n UniValue gettxoutsetinfo(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n@@ -458,7 +514,7 @@ UniValue gettxoutsetinfo(const UniValue& params, bool fHelp)\n \n     CCoinsStats stats;\n     FlushStateToDisk();\n-    if (pcoinsTip->GetStats(stats)) {\n+    if (GetUTXOStats(pcoinsTip, stats)) {\n         ret.push_back(Pair(\"height\", (int64_t)stats.nHeight));\n         ret.push_back(Pair(\"bestblock\", stats.hashBlock.GetHex()));\n         ret.push_back(Pair(\"transactions\", (int64_t)stats.nTransactions));"
      },
      {
        "sha": "48e3c8ed8e07f40b84ebd085730159e787a3989e",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/509cb006d514cece5ab7680094f033c8dc8a2318/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/509cb006d514cece5ab7680094f033c8dc8a2318/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=509cb006d514cece5ab7680094f033c8dc8a2318",
        "patch": "@@ -61,8 +61,6 @@ class CCoinsViewTest : public CCoinsView\n             hashBestBlock_ = hashBlock;\n         return true;\n     }\n-\n-    bool GetStats(CCoinsStats& stats) const { return false; }\n };\n \n class CCoinsViewCacheTest : public CCoinsViewCache"
      },
      {
        "sha": "be86cceeb36a76924687a19ffedf392ce254d858",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 38,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/509cb006d514cece5ab7680094f033c8dc8a2318/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/509cb006d514cece5ab7680094f033c8dc8a2318/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=509cb006d514cece5ab7680094f033c8dc8a2318",
        "patch": "@@ -94,50 +94,52 @@ bool CBlockTreeDB::ReadLastBlockFile(int &nFile) {\n     return Read(DB_LAST_BLOCK, nFile);\n }\n \n-bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n+CCoinsViewCursor *CCoinsViewDB::Cursor() const\n+{\n+    CCoinsViewDBCursor *i = new CCoinsViewDBCursor(const_cast<CDBWrapper*>(&db)->NewIterator(), GetBestBlock());\n     /* It seems that there are no \"const iterators\" for LevelDB.  Since we\n        only need read operations on it, use a const-cast to get around\n        that restriction.  */\n-    boost::scoped_ptr<CDBIterator> pcursor(const_cast<CDBWrapper*>(&db)->NewIterator());\n-    pcursor->Seek(DB_COINS);\n+    i->pcursor->Seek(DB_COINS);\n+    // Cache key of first record\n+    i->pcursor->GetKey(i->keyTmp);\n+    return i;\n+}\n \n-    CHashWriter ss(SER_GETHASH, PROTOCOL_VERSION);\n-    stats.hashBlock = GetBestBlock();\n-    ss << stats.hashBlock;\n-    CAmount nTotalAmount = 0;\n-    while (pcursor->Valid()) {\n-        boost::this_thread::interruption_point();\n-        std::pair<char, uint256> key;\n-        CCoins coins;\n-        if (pcursor->GetKey(key) && key.first == DB_COINS) {\n-            if (pcursor->GetValue(coins)) {\n-                stats.nTransactions++;\n-                for (unsigned int i=0; i<coins.vout.size(); i++) {\n-                    const CTxOut &out = coins.vout[i];\n-                    if (!out.IsNull()) {\n-                        stats.nTransactionOutputs++;\n-                        ss << VARINT(i+1);\n-                        ss << out;\n-                        nTotalAmount += out.nValue;\n-                    }\n-                }\n-                stats.nSerializedSize += 32 + pcursor->GetValueSize();\n-                ss << VARINT(0);\n-            } else {\n-                return error(\"CCoinsViewDB::GetStats() : unable to read value\");\n-            }\n-        } else {\n-            break;\n-        }\n-        pcursor->Next();\n+bool CCoinsViewDBCursor::GetKey(uint256 &key) const\n+{\n+    // Return cached key\n+    if (keyTmp.first == DB_COINS) {\n+        key = keyTmp.second;\n+        return true;\n     }\n-    {\n-        LOCK(cs_main);\n-        stats.nHeight = mapBlockIndex.find(stats.hashBlock)->second->nHeight;\n+    return false;\n+}\n+\n+bool CCoinsViewDBCursor::GetValue(CCoins &coins) const\n+{\n+    return pcursor->GetValue(coins);\n+}\n+\n+unsigned int CCoinsViewDBCursor::GetValueSize() const\n+{\n+    return pcursor->GetValueSize();\n+}\n+\n+bool CCoinsViewDBCursor::Valid() const\n+{\n+    return keyTmp.first == DB_COINS;\n+}\n+\n+void CCoinsViewDBCursor::Next()\n+{\n+    pcursor->Next();\n+    if (pcursor->Valid()) {\n+        bool ok = pcursor->GetKey(keyTmp);\n+        assert(ok); // If GetKey fails here something must be wrong with underlying database, we cannot handle that here\n+    } else {\n+        keyTmp.first = 0; // Invalidate cached key after last record so that Valid() and GetKey() return false\n     }\n-    stats.hashSerialized = ss.GetHash();\n-    stats.nTotalAmount = nTotalAmount;\n-    return true;\n }\n \n bool CBlockTreeDB::WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*> >& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo) {"
      },
      {
        "sha": "749802f0e5fd0fd4075f609d3f4ed22b1977b046",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 25,
        "deletions": 1,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/509cb006d514cece5ab7680094f033c8dc8a2318/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/509cb006d514cece5ab7680094f033c8dc8a2318/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=509cb006d514cece5ab7680094f033c8dc8a2318",
        "patch": "@@ -26,6 +26,8 @@ static const int64_t nMaxDbCache = sizeof(void*) > 4 ? 16384 : 1024;\n //! min. -dbcache in (MiB)\n static const int64_t nMinDbCache = 4;\n \n+class CCoinsViewDBCursor;\n+\n /** CCoinsView backed by the coin database (chainstate/) */\n class CCoinsViewDB : public CCoinsView\n {\n@@ -38,7 +40,29 @@ class CCoinsViewDB : public CCoinsView\n     bool HaveCoins(const uint256 &txid) const;\n     uint256 GetBestBlock() const;\n     bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n-    bool GetStats(CCoinsStats &stats) const;\n+    CCoinsViewCursor *Cursor() const;\n+};\n+\n+/** Specialization of CCoinsViewCursor to iterate over a CCoinsViewDB */\n+class CCoinsViewDBCursor: public CCoinsViewCursor\n+{\n+public:\n+    ~CCoinsViewDBCursor() {}\n+\n+    bool GetKey(uint256 &key) const;\n+    bool GetValue(CCoins &coins) const;\n+    unsigned int GetValueSize() const;\n+\n+    bool Valid() const;\n+    void Next();\n+\n+private:\n+    CCoinsViewDBCursor(CDBIterator* pcursorIn, const uint256 &hashBlockIn):\n+        CCoinsViewCursor(hashBlockIn), pcursor(pcursorIn) {}\n+    boost::scoped_ptr<CDBIterator> pcursor;\n+    std::pair<char, uint256> keyTmp;\n+\n+    friend class CCoinsViewDB;\n };\n \n /** Access to the block database (blocks/index/) */"
      }
    ]
  }
]