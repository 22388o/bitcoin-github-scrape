[
  {
    "sha": "9df32e820d83aa74e2f175d8d63b5666b8b4ef0e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZGYzMmU4MjBkODNhYTc0ZTJmMTc1ZDhkNjNiNTY2NmI4YjRlZjBl",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-04-10T20:56:07Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-04-15T13:41:49Z"
      },
      "message": "scripted-diff: test: replace command with msgtype\n\nThis is the functional test framework pendant for\n7777e3624fabe4718675b2be8b088697b7ad4d0d, which renamed \"strCommand\" with\n\"msg_type\" in the network processing code.\n\n-BEGIN VERIFY SCRIPT-\n # Rename in test framework\n sed -i 's/command/msgtype/g' ./test/functional/test_framework/messages.py ./test/functional/test_framework/mininode.py\n # Rename in individual tests\n sed -i 's/command/msgtype/g' ./test/functional/p2p_invalid_messages.py ./test/functional/p2p_leak.py\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "08a017233d3cb8d862a7563075f1cdf9e9b30c24",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/08a017233d3cb8d862a7563075f1cdf9e9b30c24"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9df32e820d83aa74e2f175d8d63b5666b8b4ef0e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9df32e820d83aa74e2f175d8d63b5666b8b4ef0e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9df32e820d83aa74e2f175d8d63b5666b8b4ef0e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9df32e820d83aa74e2f175d8d63b5666b8b4ef0e/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "20c0e2e0f04f699d29419d52696601b76eca3124",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20c0e2e0f04f699d29419d52696601b76eca3124",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/20c0e2e0f04f699d29419d52696601b76eca3124"
      }
    ],
    "stats": {
      "total": 98,
      "additions": 49,
      "deletions": 49
    },
    "files": [
      {
        "sha": "fed73cf114dbbeb89c27d9cc94670d8ce5423697",
        "filename": "test/functional/p2p_invalid_messages.py",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9df32e820d83aa74e2f175d8d63b5666b8b4ef0e/test/functional/p2p_invalid_messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9df32e820d83aa74e2f175d8d63b5666b8b4ef0e/test/functional/p2p_invalid_messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_messages.py?ref=9df32e820d83aa74e2f175d8d63b5666b8b4ef0e",
        "patch": "@@ -19,7 +19,7 @@\n class msg_unrecognized:\n     \"\"\"Nonsensical message. Modeled after similar types in test_framework.messages.\"\"\"\n \n-    command = b'badmsg'\n+    msgtype = b'badmsg'\n \n     def __init__(self, *, str_data):\n         self.str_data = str_data.encode() if not isinstance(str_data, bytes) else str_data\n@@ -28,7 +28,7 @@ def serialize(self):\n         return messages.ser_string(self.str_data)\n \n     def __repr__(self):\n-        return \"{}(data={})\".format(self.command, self.str_data)\n+        return \"{}(data={})\".format(self.msgtype, self.str_data)\n \n \n class InvalidMessagesTest(BitcoinTestFramework):\n@@ -50,7 +50,7 @@ def run_test(self):\n         self.test_magic_bytes()\n         self.test_checksum()\n         self.test_size()\n-        self.test_command()\n+        self.test_msgtype()\n         self.test_large_inv()\n \n         node = self.nodes[0]\n@@ -168,7 +168,7 @@ def test_checksum(self):\n             msg = conn.build_message(msg_unrecognized(str_data=\"d\"))\n             cut_len = (\n                 4 +  # magic\n-                12 +  # command\n+                12 +  # msgtype\n                 4  #len\n             )\n             # modify checksum\n@@ -183,21 +183,21 @@ def test_size(self):\n             msg = conn.build_message(msg_unrecognized(str_data=\"d\"))\n             cut_len = (\n                 4 +  # magic\n-                12  # command\n+                12  # msgtype\n             )\n             # modify len to MAX_SIZE + 1\n             msg = msg[:cut_len] + struct.pack(\"<I\", 0x02000000 + 1) + msg[cut_len + 4:]\n             self.nodes[0].p2p.send_raw_message(msg)\n             conn.wait_for_disconnect(timeout=1)\n             self.nodes[0].disconnect_p2ps()\n \n-    def test_command(self):\n+    def test_msgtype(self):\n         conn = self.nodes[0].add_p2p_connection(P2PDataStore())\n         with self.nodes[0].assert_debug_log(['PROCESSMESSAGE: ERRORS IN HEADER']):\n             msg = msg_unrecognized(str_data=\"d\")\n-            msg.command = b'\\xff' * 12\n+            msg.msgtype = b'\\xff' * 12\n             msg = conn.build_message(msg)\n-            # Modify command\n+            # Modify msgtype\n             msg = msg[:7] + b'\\x00' + msg[7 + 1:]\n             self.nodes[0].p2p.send_raw_message(msg)\n             conn.sync_with_ping(timeout=1)"
      },
      {
        "sha": "c6ef7e441cf23a7a40620479bf12fbd25e31f430",
        "filename": "test/functional/p2p_leak.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9df32e820d83aa74e2f175d8d63b5666b8b4ef0e/test/functional/p2p_leak.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9df32e820d83aa74e2f175d8d63b5666b8b4ef0e/test/functional/p2p_leak.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_leak.py?ref=9df32e820d83aa74e2f175d8d63b5666b8b4ef0e",
        "patch": "@@ -37,7 +37,7 @@ def __init__(self):\n \n     def bad_message(self, message):\n         self.unexpected_msg = True\n-        self.log.info(\"should not have received message: %s\" % message.command)\n+        self.log.info(\"should not have received message: %s\" % message.msgtype)\n \n     def on_open(self):\n         self.ever_connected = True"
      },
      {
        "sha": "c53b6ef1e4d3667094cb69210018b2688c11b930",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 29,
        "deletions": 29,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9df32e820d83aa74e2f175d8d63b5666b8b4ef0e/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9df32e820d83aa74e2f175d8d63b5666b8b4ef0e/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=9df32e820d83aa74e2f175d8d63b5666b8b4ef0e",
        "patch": "@@ -946,7 +946,7 @@ def __repr__(self):\n class msg_version:\n     __slots__ = (\"addrFrom\", \"addrTo\", \"nNonce\", \"nRelay\", \"nServices\",\n                  \"nStartingHeight\", \"nTime\", \"nVersion\", \"strSubVer\")\n-    command = b\"version\"\n+    msgtype = b\"version\"\n \n     def __init__(self):\n         self.nVersion = MY_VERSION\n@@ -1004,7 +1004,7 @@ def __repr__(self):\n \n class msg_verack:\n     __slots__ = ()\n-    command = b\"verack\"\n+    msgtype = b\"verack\"\n \n     def __init__(self):\n         pass\n@@ -1021,7 +1021,7 @@ def __repr__(self):\n \n class msg_addr:\n     __slots__ = (\"addrs\",)\n-    command = b\"addr\"\n+    msgtype = b\"addr\"\n \n     def __init__(self):\n         self.addrs = []\n@@ -1038,7 +1038,7 @@ def __repr__(self):\n \n class msg_inv:\n     __slots__ = (\"inv\",)\n-    command = b\"inv\"\n+    msgtype = b\"inv\"\n \n     def __init__(self, inv=None):\n         if inv is None:\n@@ -1058,7 +1058,7 @@ def __repr__(self):\n \n class msg_getdata:\n     __slots__ = (\"inv\",)\n-    command = b\"getdata\"\n+    msgtype = b\"getdata\"\n \n     def __init__(self, inv=None):\n         self.inv = inv if inv is not None else []\n@@ -1075,7 +1075,7 @@ def __repr__(self):\n \n class msg_getblocks:\n     __slots__ = (\"locator\", \"hashstop\")\n-    command = b\"getblocks\"\n+    msgtype = b\"getblocks\"\n \n     def __init__(self):\n         self.locator = CBlockLocator()\n@@ -1099,7 +1099,7 @@ def __repr__(self):\n \n class msg_tx:\n     __slots__ = (\"tx\",)\n-    command = b\"tx\"\n+    msgtype = b\"tx\"\n \n     def __init__(self, tx=CTransaction()):\n         self.tx = tx\n@@ -1123,7 +1123,7 @@ def serialize(self):\n \n class msg_block:\n     __slots__ = (\"block\",)\n-    command = b\"block\"\n+    msgtype = b\"block\"\n \n     def __init__(self, block=None):\n         if block is None:\n@@ -1142,12 +1142,12 @@ def __repr__(self):\n \n \n # for cases where a user needs tighter control over what is sent over the wire\n-# note that the user must supply the name of the command, and the data\n+# note that the user must supply the name of the msgtype, and the data\n class msg_generic:\n-    __slots__ = (\"command\", \"data\")\n+    __slots__ = (\"msgtype\", \"data\")\n \n-    def __init__(self, command, data=None):\n-        self.command = command\n+    def __init__(self, msgtype, data=None):\n+        self.msgtype = msgtype\n         self.data = data\n \n     def serialize(self):\n@@ -1165,7 +1165,7 @@ def serialize(self):\n \n class msg_getaddr:\n     __slots__ = ()\n-    command = b\"getaddr\"\n+    msgtype = b\"getaddr\"\n \n     def __init__(self):\n         pass\n@@ -1182,7 +1182,7 @@ def __repr__(self):\n \n class msg_ping:\n     __slots__ = (\"nonce\",)\n-    command = b\"ping\"\n+    msgtype = b\"ping\"\n \n     def __init__(self, nonce=0):\n         self.nonce = nonce\n@@ -1201,7 +1201,7 @@ def __repr__(self):\n \n class msg_pong:\n     __slots__ = (\"nonce\",)\n-    command = b\"pong\"\n+    msgtype = b\"pong\"\n \n     def __init__(self, nonce=0):\n         self.nonce = nonce\n@@ -1220,7 +1220,7 @@ def __repr__(self):\n \n class msg_mempool:\n     __slots__ = ()\n-    command = b\"mempool\"\n+    msgtype = b\"mempool\"\n \n     def __init__(self):\n         pass\n@@ -1237,7 +1237,7 @@ def __repr__(self):\n \n class msg_notfound:\n     __slots__ = (\"vec\", )\n-    command = b\"notfound\"\n+    msgtype = b\"notfound\"\n \n     def __init__(self, vec=None):\n         self.vec = vec or []\n@@ -1254,7 +1254,7 @@ def __repr__(self):\n \n class msg_sendheaders:\n     __slots__ = ()\n-    command = b\"sendheaders\"\n+    msgtype = b\"sendheaders\"\n \n     def __init__(self):\n         pass\n@@ -1275,7 +1275,7 @@ def __repr__(self):\n # hash_stop (hash of last desired block header, 0 to get as many as possible)\n class msg_getheaders:\n     __slots__ = (\"hashstop\", \"locator\",)\n-    command = b\"getheaders\"\n+    msgtype = b\"getheaders\"\n \n     def __init__(self):\n         self.locator = CBlockLocator()\n@@ -1301,7 +1301,7 @@ def __repr__(self):\n # <count> <vector of block headers>\n class msg_headers:\n     __slots__ = (\"headers\",)\n-    command = b\"headers\"\n+    msgtype = b\"headers\"\n \n     def __init__(self, headers=None):\n         self.headers = headers if headers is not None else []\n@@ -1322,7 +1322,7 @@ def __repr__(self):\n \n class msg_merkleblock:\n     __slots__ = (\"merkleblock\",)\n-    command = b\"merkleblock\"\n+    msgtype = b\"merkleblock\"\n \n     def __init__(self, merkleblock=None):\n         if merkleblock is None:\n@@ -1342,7 +1342,7 @@ def __repr__(self):\n \n class msg_filterload:\n     __slots__ = (\"data\", \"nHashFuncs\", \"nTweak\", \"nFlags\")\n-    command = b\"filterload\"\n+    msgtype = b\"filterload\"\n \n     def __init__(self, data=b'00', nHashFuncs=0, nTweak=0, nFlags=0):\n         self.data = data\n@@ -1371,7 +1371,7 @@ def __repr__(self):\n \n class msg_filteradd:\n     __slots__ = (\"data\")\n-    command = b\"filteradd\"\n+    msgtype = b\"filteradd\"\n \n     def __init__(self, data):\n         self.data = data\n@@ -1390,7 +1390,7 @@ def __repr__(self):\n \n class msg_filterclear:\n     __slots__ = ()\n-    command = b\"filterclear\"\n+    msgtype = b\"filterclear\"\n \n     def __init__(self):\n         pass\n@@ -1407,7 +1407,7 @@ def __repr__(self):\n \n class msg_feefilter:\n     __slots__ = (\"feerate\",)\n-    command = b\"feefilter\"\n+    msgtype = b\"feefilter\"\n \n     def __init__(self, feerate=0):\n         self.feerate = feerate\n@@ -1426,7 +1426,7 @@ def __repr__(self):\n \n class msg_sendcmpct:\n     __slots__ = (\"announce\", \"version\")\n-    command = b\"sendcmpct\"\n+    msgtype = b\"sendcmpct\"\n \n     def __init__(self):\n         self.announce = False\n@@ -1448,7 +1448,7 @@ def __repr__(self):\n \n class msg_cmpctblock:\n     __slots__ = (\"header_and_shortids\",)\n-    command = b\"cmpctblock\"\n+    msgtype = b\"cmpctblock\"\n \n     def __init__(self, header_and_shortids = None):\n         self.header_and_shortids = header_and_shortids\n@@ -1468,7 +1468,7 @@ def __repr__(self):\n \n class msg_getblocktxn:\n     __slots__ = (\"block_txn_request\",)\n-    command = b\"getblocktxn\"\n+    msgtype = b\"getblocktxn\"\n \n     def __init__(self):\n         self.block_txn_request = None\n@@ -1488,7 +1488,7 @@ def __repr__(self):\n \n class msg_blocktxn:\n     __slots__ = (\"block_transactions\",)\n-    command = b\"blocktxn\"\n+    msgtype = b\"blocktxn\"\n \n     def __init__(self):\n         self.block_transactions = BlockTransactions()"
      },
      {
        "sha": "fc26af0dcbbf2e3f6d90d587a93ab1177da394c7",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9df32e820d83aa74e2f175d8d63b5666b8b4ef0e/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9df32e820d83aa74e2f175d8d63b5666b8b4ef0e/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=9df32e820d83aa74e2f175d8d63b5666b8b4ef0e",
        "patch": "@@ -180,7 +180,7 @@ def _on_data(self):\n                     raise ValueError(\"magic bytes mismatch: {} != {}\".format(repr(self.magic_bytes), repr(self.recvbuf)))\n                 if len(self.recvbuf) < 4 + 12 + 4 + 4:\n                     return\n-                command = self.recvbuf[4:4+12].split(b\"\\x00\", 1)[0]\n+                msgtype = self.recvbuf[4:4+12].split(b\"\\x00\", 1)[0]\n                 msglen = struct.unpack(\"<i\", self.recvbuf[4+12:4+12+4])[0]\n                 checksum = self.recvbuf[4+12+4:4+12+4+4]\n                 if len(self.recvbuf) < 4 + 12 + 4 + 4 + msglen:\n@@ -191,10 +191,10 @@ def _on_data(self):\n                 if checksum != h[:4]:\n                     raise ValueError(\"got bad checksum \" + repr(self.recvbuf))\n                 self.recvbuf = self.recvbuf[4+12+4+4+msglen:]\n-                if command not in MESSAGEMAP:\n-                    raise ValueError(\"Received unknown command from %s:%d: '%s' %s\" % (self.dstaddr, self.dstport, command, repr(msg)))\n+                if msgtype not in MESSAGEMAP:\n+                    raise ValueError(\"Received unknown msgtype from %s:%d: '%s' %s\" % (self.dstaddr, self.dstport, msgtype, repr(msg)))\n                 f = BytesIO(msg)\n-                t = MESSAGEMAP[command]()\n+                t = MESSAGEMAP[msgtype]()\n                 t.deserialize(f)\n                 self._log_message(\"receive\", t)\n                 self.on_message(t)\n@@ -233,11 +233,11 @@ def maybe_write():\n \n     def build_message(self, message):\n         \"\"\"Build a serialized P2P message\"\"\"\n-        command = message.command\n+        msgtype = message.msgtype\n         data = message.serialize()\n         tmsg = self.magic_bytes\n-        tmsg += command\n-        tmsg += b\"\\x00\" * (12 - len(command))\n+        tmsg += msgtype\n+        tmsg += b\"\\x00\" * (12 - len(msgtype))\n         tmsg += struct.pack(\"<I\", len(data))\n         th = sha256(data)\n         h = sha256(th)\n@@ -304,10 +304,10 @@ def on_message(self, message):\n         and the most recent message of each type.\"\"\"\n         with mininode_lock:\n             try:\n-                command = message.command.decode('ascii')\n-                self.message_count[command] += 1\n-                self.last_message[command] = message\n-                getattr(self, 'on_' + command)(message)\n+                msgtype = message.msgtype.decode('ascii')\n+                self.message_count[msgtype] += 1\n+                self.last_message[msgtype] = message\n+                getattr(self, 'on_' + msgtype)(message)\n             except:\n                 print(\"ERROR delivering %s (%s)\" % (repr(message), sys.exc_info()[0]))\n                 raise"
      }
    ]
  }
]