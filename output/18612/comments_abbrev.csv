sipa,2020-04-13 01:35:11,"utACK 4444902f5c4df8784cb2b781d82a55a07336e827\n\nIt seems like a no-brainer to remove the `+`/`+=` if this is all they're used for. As far as the `operator<<` is concerned, I believe that replacing any member function with a deleted version never changes semantics, if the result still compiles.",https://github.com/bitcoin/bitcoin/pull/18612#issuecomment-612710105,612710105,
DrahtBot,2020-04-13 16:42:21,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/18612#issuecomment-612980802,612980802,
practicalswift,2020-04-13 17:13:51,"Concept ACK\n\nNon-existing is better than unused/undocumented :)",https://github.com/bitcoin/bitcoin/pull/18612#issuecomment-612994957,612994957,
MarcoFalke,2020-04-16 23:23:51,Rebased,https://github.com/bitcoin/bitcoin/pull/18612#issuecomment-614946568,614946568,
laanwj,2020-04-22 12:04:44,ACK ccccd5190898ece3ac17aa3178f320d091f221df,https://github.com/bitcoin/bitcoin/pull/18612#issuecomment-617737175,617737175,
sipa,2020-04-13 00:08:36,"Deleting this is dangerous, as attempts to call it will still work, except they'll use the function above instead (`CScript::operator<<(const std::vector<unsigned char>&)`).\n\n~~I think it could be made into a static check too:~~\n\nBetter solution:\n```c++\nCScript& operator<<(const CScript& b) = delete;\n```\n",https://github.com/bitcoin/bitcoin/pull/18612#discussion_r407269834,407269834,src/script/script.h
MarcoFalke,2020-04-13 01:13:12,"They shouldn't use the above. I tested and this is the error:\n\n\n```\nerror: invalid operands to binary expression ('CScript' and 'CScript')\n\n./script/script.h:431:14: note: candidate function not viable: no known conversion from 'CScript' to 'int64_t' (aka 'long') for 1st argument\n    CScript& operator<<(int64_t b) { return push_int64(b); }\n             ^\n./script/script.h:433:14:",https://github.com/bitcoin/bitcoin/pull/18612#discussion_r407277292,407277292,src/script/script.h
sipa,2020-04-13 01:19:39,"@MarcoFalke Oh, I forgot that CScript isn't a vector anymore (but a prevector), so indeed the function above isn't viable. If we'd have an operator that pushes a prevector however (which would be implicitly added by #13062 for example), then having an explicitly deleted version for CScript still prevents it from being called.",https://github.com/bitcoin/bitcoin/pull/18612#discussion_r407278271,407278271,src/script/script.h
sipa,2020-04-13 01:31:22,"I think if you'd merge these two into one call for both case 0 & case 1, the fuzzer might work slightly more efficiently by not making 0 and 1 take a different code path.",https://github.com/bitcoin/bitcoin/pull/18612#discussion_r407279958,407279958,src/test/fuzz/script_ops.cpp
MarcoFalke,2020-04-13 02:01:30,"Checked that with Span, the output looks like this:\n\n\n```\noverload resolution selected deleted operator '<<'\n            script << s;\n            ~~~~~~ ^  ~\n./script/script.h:435:14: note: candidate function has been explicitly deleted\n    CScript& operator<<(const CScript& b) = delete;\n             ^\n./script/script.h:452:14: note: candidate function\n    CScript& operator<<",https://github.com/bitcoin/bitcoin/pull/18612#discussion_r407284763,407284763,src/script/script.h
sipa,2020-04-13 05:35:13,"Not sure if you're arguing in favor or against what I'm saying, but to be clear: marking it explicitly deleted is the right approach IMO (not just because it prevents reintroducing the problem, but also to make it easy to see this PR doesn't change behavior).",https://github.com/bitcoin/bitcoin/pull/18612#discussion_r407326352,407326352,src/script/script.h
MarcoFalke,2020-04-13 10:15:35,I posted this for myself to remind me that your comment (https://github.com/bitcoin/bitcoin/pull/18612#issuecomment-612710105) is right,https://github.com/bitcoin/bitcoin/pull/18612#discussion_r407414005,407414005,src/script/script.h
ryanofsky,2020-04-13 17:31:05,"> I think if you'd merge these two into one call for both case 0 & case 1, the fuzzer might work slightly more efficiently by not making 0 and 1 take a different code path.\n\nTend to agree. If not going to collapse now could at least add a comment to avoid confusion here",https://github.com/bitcoin/bitcoin/pull/18612#discussion_r407605212,407605212,src/test/fuzz/script_ops.cpp
ryanofsky,2020-04-13 17:35:22,Maybe this method should be called Opcode() instead of Add() to be consistent with the Num() method below and since it's no longer doing + operation,https://github.com/bitcoin/bitcoin/pull/18612#discussion_r407607506,407607506,src/test/script_tests.cpp
practicalswift,2020-04-13 18:44:07,Isn't the point here not to invalidate the existing seed corpus?,https://github.com/bitcoin/bitcoin/pull/18612#discussion_r407645825,407645825,src/test/fuzz/script_ops.cpp
sipa,2020-04-13 18:46:03,"I mean *keep* case 0 and case 1, but merge them into a single branch.\n\n```c++\ncase 0:\ncase 1:\n    (void)ConsumeScript(fuzzed_data_provider);\n```",https://github.com/bitcoin/bitcoin/pull/18612#discussion_r407646878,407646878,src/test/fuzz/script_ops.cpp
MarcoFalke,2020-04-13 19:24:48,I am planning to replace them by `operator=(const&` and `operator=(&&` respectively,https://github.com/bitcoin/bitcoin/pull/18612#discussion_r407667973,407667973,src/test/fuzz/script_ops.cpp
MarcoFalke,2020-04-13 19:25:25,Will do when I rebase,https://github.com/bitcoin/bitcoin/pull/18612#discussion_r407668291,407668291,src/test/script_tests.cpp
MarcoFalke,2020-04-16 23:23:18,Replaced  by `operator=(const&` and `operator=(&&` respectively,https://github.com/bitcoin/bitcoin/pull/18612#discussion_r409904631,409904631,src/test/fuzz/script_ops.cpp
MarcoFalke,2020-04-16 23:23:42,Renamed to `Opcode`,https://github.com/bitcoin/bitcoin/pull/18612#discussion_r409904778,409904778,src/test/script_tests.cpp
