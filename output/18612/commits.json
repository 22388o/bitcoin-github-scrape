[
  {
    "sha": "ccccd5190898ece3ac17aa3178f320d091f221df",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjY2NjZDUxOTA4OThlY2UzYWMxN2FhMzE3OGYzMjBkMDkxZjIyMWRm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-04-13T03:03:10Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-04-15T14:01:55Z"
      },
      "message": "script: Remove undocumented and unused operator+",
      "tree": {
        "sha": "5788ed502c1de1eff00562a61edaa41f8aa8fafa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5788ed502c1de1eff00562a61edaa41f8aa8fafa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ccccd5190898ece3ac17aa3178f320d091f221df",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiunQwArrcNz5a6tumJcXT0jTbBqA3oDN8gViAEi65Lp2NgOBeLKF2+2jp83WZl\nk0iv169/H1txFmYlPb0aZrjac4ufBqD2ODJ5pFdu7nqoPQjKa+gU+4iqQq0+l7di\n5bjWycoWUKFay8TV97nN6PfQiTc1BKGVt1uYX4aH9rY/QpAxQ5db50MYE2xSBYTH\nvESBKzzSjptxtMGe2NLYpF1evC48AuYsKJqwd7AjtT/Vc3n0k9Nx9fcxogdeFVXo\nlLkOTovyOYOWzVLggs1RJKqe8mefMjtPLO0XszscMQ0gyn6yDuRswgfjZKZPvkL0\n6doK64ECjL37C8/+QP0lqrN5O637+eSrE8n20Ogh2X/oOH7HvFyDBgEWa2hAcioB\nYdkO3Gf2YQmr16khM58ICc//bJQ1TRfDnZlszLI7wpeCnsfickN6+1WfP92BIFnU\nF2NBbuW7dhOku5oqY4jyy962LWv/Y7podFX4T7xq9Kp1dZvsZ8fNPpczuVBr5Us4\nMCVR1Ovd\n=hNE/\n-----END PGP SIGNATURE-----",
        "payload": "tree 5788ed502c1de1eff00562a61edaa41f8aa8fafa\nparent 18f11fb24b47c6762e659b4bd3413f03e2c9ec99\nauthor MarcoFalke <falke.marco@gmail.com> 1586746990 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1586959315 -0400\n\nscript: Remove undocumented and unused operator+\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccccd5190898ece3ac17aa3178f320d091f221df",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ccccd5190898ece3ac17aa3178f320d091f221df",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccccd5190898ece3ac17aa3178f320d091f221df/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "18f11fb24b47c6762e659b4bd3413f03e2c9ec99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18f11fb24b47c6762e659b4bd3413f03e2c9ec99",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/18f11fb24b47c6762e659b4bd3413f03e2c9ec99"
      }
    ],
    "stats": {
      "total": 85,
      "additions": 24,
      "deletions": 61
    },
    "files": [
      {
        "sha": "4902d66c1d263f53bcf9629ca36dcf4f9274d969",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 2,
        "deletions": 25,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccccd5190898ece3ac17aa3178f320d091f221df/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccccd5190898ece3ac17aa3178f320d091f221df/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=ccccd5190898ece3ac17aa3178f320d091f221df",
        "patch": "@@ -419,28 +419,15 @@ class CScript : public CScriptBase\n         READWRITEAS(CScriptBase, *this);\n     }\n \n-    CScript& operator+=(const CScript& b)\n-    {\n-        reserve(size() + b.size());\n-        insert(end(), b.begin(), b.end());\n-        return *this;\n-    }\n-\n-    friend CScript operator+(const CScript& a, const CScript& b)\n-    {\n-        CScript ret = a;\n-        ret += b;\n-        return ret;\n-    }\n-\n     explicit CScript(int64_t b) { operator<<(b); }\n-\n     explicit CScript(opcodetype b)     { operator<<(b); }\n     explicit CScript(const CScriptNum& b) { operator<<(b); }\n     // delete non-existent constructor to defend against future introduction\n     // e.g. via prevector\n     explicit CScript(const std::vector<unsigned char>& b) = delete;\n \n+    /** Delete non-existent operator to defend against future introduction */\n+    CScript& operator<<(const CScript& b) = delete;\n \n     CScript& operator<<(int64_t b) { return push_int64(b); }\n \n@@ -487,15 +474,6 @@ class CScript : public CScriptBase\n         return *this;\n     }\n \n-    CScript& operator<<(const CScript& b)\n-    {\n-        // I'm not sure if this should push the script or concatenate scripts.\n-        // If there's ever a use for pushing a script onto a script, delete this member fn\n-        assert(!\"Warning: Pushing a CScript onto a CScript with << is probably not intended, use + to concatenate!\");\n-        return *this;\n-    }\n-\n-\n     bool GetOp(const_iterator& pc, opcodetype& opcodeRet, std::vector<unsigned char>& vchRet) const\n     {\n         return GetScriptOp(pc, end(), opcodeRet, &vchRet);\n@@ -506,7 +484,6 @@ class CScript : public CScriptBase\n         return GetScriptOp(pc, end(), opcodeRet, nullptr);\n     }\n \n-\n     /** Encode/decode small integers: */\n     static int DecodeOP_N(opcodetype opcode)\n     {"
      },
      {
        "sha": "7d24af20acd8a24c6cd10c30d88058c82688638b",
        "filename": "src/test/fuzz/script_ops.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccccd5190898ece3ac17aa3178f320d091f221df/src/test/fuzz/script_ops.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccccd5190898ece3ac17aa3178f320d091f221df/src/test/fuzz/script_ops.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script_ops.cpp?ref=ccccd5190898ece3ac17aa3178f320d091f221df",
        "patch": "@@ -17,12 +17,16 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     CScript script = ConsumeScript(fuzzed_data_provider);\n     while (fuzzed_data_provider.remaining_bytes() > 0) {\n         switch (fuzzed_data_provider.ConsumeIntegralInRange(0, 7)) {\n-        case 0:\n-            script += ConsumeScript(fuzzed_data_provider);\n+        case 0: {\n+            CScript s = ConsumeScript(fuzzed_data_provider);\n+            script = std::move(s);\n             break;\n-        case 1:\n-            script = script + ConsumeScript(fuzzed_data_provider);\n+        }\n+        case 1: {\n+            const CScript& s = ConsumeScript(fuzzed_data_provider);\n+            script = s;\n             break;\n+        }\n         case 2:\n             script << fuzzed_data_provider.ConsumeIntegral<int64_t>();\n             break;"
      },
      {
        "sha": "1973348ce2425b8e9b4e129b27ba696fc8832903",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 32,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccccd5190898ece3ac17aa3178f320d091f221df/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccccd5190898ece3ac17aa3178f320d091f221df/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=ccccd5190898ece3ac17aa3178f320d091f221df",
        "patch": "@@ -217,7 +217,6 @@ struct KeyData\n \n     KeyData()\n     {\n-\n         key0.Set(vchKey0, vchKey0 + 32, false);\n         key0C.Set(vchKey0, vchKey0 + 32, true);\n         pubkey0 = key0.GetPubKey();\n@@ -272,9 +271,9 @@ class TestBuilder\n \n     void DoPush(const std::vector<unsigned char>& data)\n     {\n-         DoPush();\n-         push = data;\n-         havePush = true;\n+        DoPush();\n+        push = data;\n+        havePush = true;\n     }\n \n public:\n@@ -306,10 +305,10 @@ class TestBuilder\n         return *this;\n     }\n \n-    TestBuilder& Add(const CScript& _script)\n+    TestBuilder& Opcode(const opcodetype& _op)\n     {\n         DoPush();\n-        spendTx.vin[0].scriptSig += _script;\n+        spendTx.vin[0].scriptSig << _op;\n         return *this;\n     }\n \n@@ -326,8 +325,9 @@ class TestBuilder\n         return *this;\n     }\n \n-    TestBuilder& Push(const CScript& _script) {\n-         DoPush(std::vector<unsigned char>(_script.begin(), _script.end()));\n+    TestBuilder& Push(const CScript& _script)\n+    {\n+        DoPush(std::vector<unsigned char>(_script.begin(), _script.end()));\n         return *this;\n     }\n \n@@ -681,22 +681,22 @@ BOOST_AUTO_TEST_CASE(script_build)\n \n     tests.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey1C) << OP_2 << OP_CHECKMULTISIG,\n                                 \"2-of-2 with two identical keys and sigs pushed using OP_DUP but no SIGPUSHONLY\", 0\n-                               ).Num(0).PushSig(keys.key1).Add(CScript() << OP_DUP));\n+                               ).Num(0).PushSig(keys.key1).Opcode(OP_DUP));\n     tests.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey1C) << OP_2 << OP_CHECKMULTISIG,\n                                 \"2-of-2 with two identical keys and sigs pushed using OP_DUP\", SCRIPT_VERIFY_SIGPUSHONLY\n-                               ).Num(0).PushSig(keys.key1).Add(CScript() << OP_DUP).ScriptError(SCRIPT_ERR_SIG_PUSHONLY));\n+                               ).Num(0).PushSig(keys.key1).Opcode(OP_DUP).ScriptError(SCRIPT_ERR_SIG_PUSHONLY));\n     tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n                                 \"P2SH(P2PK) with non-push scriptSig but no P2SH or SIGPUSHONLY\", 0, true\n-                               ).PushSig(keys.key2).Add(CScript() << OP_NOP8).PushRedeem());\n+                               ).PushSig(keys.key2).Opcode(OP_NOP8).PushRedeem());\n     tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n                                 \"P2PK with non-push scriptSig but with P2SH validation\", 0\n-                               ).PushSig(keys.key2).Add(CScript() << OP_NOP8));\n+                               ).PushSig(keys.key2).Opcode(OP_NOP8));\n     tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n                                 \"P2SH(P2PK) with non-push scriptSig but no SIGPUSHONLY\", SCRIPT_VERIFY_P2SH, true\n-                               ).PushSig(keys.key2).Add(CScript() << OP_NOP8).PushRedeem().ScriptError(SCRIPT_ERR_SIG_PUSHONLY));\n+                               ).PushSig(keys.key2).Opcode(OP_NOP8).PushRedeem().ScriptError(SCRIPT_ERR_SIG_PUSHONLY));\n     tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n                                 \"P2SH(P2PK) with non-push scriptSig but not P2SH\", SCRIPT_VERIFY_SIGPUSHONLY, true\n-                               ).PushSig(keys.key2).Add(CScript() << OP_NOP8).PushRedeem().ScriptError(SCRIPT_ERR_SIG_PUSHONLY));\n+                               ).PushSig(keys.key2).Opcode(OP_NOP8).PushRedeem().ScriptError(SCRIPT_ERR_SIG_PUSHONLY));\n     tests.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey1C) << OP_2 << OP_CHECKMULTISIG,\n                                 \"2-of-2 with two identical keys and sigs pushed\", SCRIPT_VERIFY_SIGPUSHONLY\n                                ).Num(0).PushSig(keys.key1).PushSig(keys.key1));\n@@ -1470,24 +1470,6 @@ BOOST_AUTO_TEST_CASE(script_HasValidOps)\n     BOOST_CHECK(!script.HasValidOps());\n }\n \n-BOOST_AUTO_TEST_CASE(script_can_append_self)\n-{\n-    CScript s, d;\n-\n-    s = ScriptFromHex(\"00\");\n-    s += s;\n-    d = ScriptFromHex(\"0000\");\n-    BOOST_CHECK(s == d);\n-\n-    // check doubling a script that's large enough to require reallocation\n-    static const char hex[] = \"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\";\n-    s = CScript() << ParseHex(hex) << OP_CHECKSIG;\n-    d = CScript() << ParseHex(hex) << OP_CHECKSIG << ParseHex(hex) << OP_CHECKSIG;\n-    s += s;\n-    BOOST_CHECK(s == d);\n-}\n-\n-\n #if defined(HAVE_CONSENSUS_LIB)\n \n /* Test simple (successful) usage of bitcoinconsensus_verify_script */"
      }
    ]
  }
]