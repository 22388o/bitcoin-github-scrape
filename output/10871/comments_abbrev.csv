jonasschnelli,2017-07-19T08:15:07Z,"Concept ACK.\nCan you add a tool test for that?",https://github.com/bitcoin/bitcoin/pull/10871#issuecomment-316307749,316307749,
laanwj,2017-07-20T08:31:04Z,"> Can you add a tool test for that?\n\nA simple tool-test like -tx's wont work here as it requires a running bitcoind.\nBetter to wait for bitcoin-cli testing infrastructure to be in place I guess (#10798)?",https://github.com/bitcoin/bitcoin/pull/10871#issuecomment-316634879,316634879,
achow101,2017-08-15T21:39:03Z,rebased,https://github.com/bitcoin/bitcoin/pull/10871#issuecomment-322597386,322597386,
jnewbery,2017-08-15T22:05:43Z,"bad rebase:\n\n```\nbitcoin-cli.cpp: In function ‘int CommandLineRPC(int, char**)’:\nbitcoin-cli.cpp:393:41: error: ‘GetBoolArg’ was not declared in this scope\n         if (GetBoolArg(""-getinfo"", false)) {\n                                         ^\n```\n\n#10798 is now rebased and ready for merge. It should be fairly straightforward to rebase this on top of that to add a functional tes",https://github.com/bitcoin/bitcoin/pull/10871#issuecomment-322602965,322602965,
jnewbery,2017-08-23T18:32:43Z,"Test here if you want it:  https://github.com/jnewbery/bitcoin/tree/pr10871_test\n\nBuilds on top of #10798. Test currently fails because the output for `bitcoin-cli getinfo` and `bitcoin-cli -getinfo` is different in `keypoolsize` and `unlocked_until`. See https://github.com/bitcoin/bitcoin/pull/8843#discussion_r127599074 for information about `keypoolsize` discrepancy.",https://github.com/bitcoin/bitcoin/pull/10871#issuecomment-324423353,324423353,
TheBlueMatt,2017-08-23T18:59:34Z,"I think the docs should at least mention something about atomicity. Every other API to Bitcoin Core is atomic, so it feels very strange to add a new one which is not.",https://github.com/bitcoin/bitcoin/pull/10871#issuecomment-324431201,324431201,
laanwj,2017-08-23T19:26:23Z,"> I think the docs should at least mention something about atomicity. Every other API to Bitcoin Core is atomic, so it feels very strange to add a new one which is not.\n\nI know you don't like this particular changej, but this is reaching FUD levels here, what *exactly* are you concerned about happening here? `-getinfo` pulls the following information:\n```\ngetnetworkinfo:\n""version""\n""pro",https://github.com/bitcoin/bitcoin/pull/10871#issuecomment-324437840,324437840,
TheBlueMatt,2017-08-24T16:38:16Z,"My only real atomicity concern is between blocks and balance - ie that you may call getinfo, see a balance and assume that it is current as of a given block height. It may be of lesser concern in just bitcoin-cli, as its not intended to be used in scripts, hence my note that I'd be ok with just documenting this behavior, though I could still see someone fucking it up in some way.",https://github.com/bitcoin/bitcoin/pull/10871#issuecomment-324689680,324689680,
laanwj,2017-08-24T16:47:32Z,"> My only real atomicity concern is between blocks and balance - ie that you may call getinfo, see a balance and assume that it is current as of a given block height.\n\nYes, that's a valid concern. Also outside this PR - there is currently no way to query up to which height the wallet has processed. Especially when the wallet and node are decoupled further w/ threads or even processes. We shoul",https://github.com/bitcoin/bitcoin/pull/10871#issuecomment-324692066,324692066,
jnewbery,2017-08-24T17:17:03Z,"> there is currently no way to query up to which height the wallet has processed\n\nI believe that `getinfo` itself could be misleading here. `balance` could be for a different height than `blocks`.\n\nThere's been discussion of adding the wallet's best block to `getwalletinfo` on IRC: https://botbot.me/freenode/bitcoin-core-dev/2017-08-11/?msg=89723092&page=2 and I have a branch to do that, w",https://github.com/bitcoin/bitcoin/pull/10871#issuecomment-324699582,324699582,
jnewbery,2017-09-01T16:57:24Z,"Is this still being actively worked on? Next steps would be:\n\n- take the functional test in https://github.com/jnewbery/bitcoin/tree/pr10871_test\n- fix the discrepencies between `getinfo` and `-getinfo`\n- rebase",https://github.com/bitcoin/bitcoin/pull/10871#issuecomment-326632014,326632014,
achow101,2017-09-01T17:03:52Z,"I am still working on this, just got sidetracked with other stuff.",https://github.com/bitcoin/bitcoin/pull/10871#issuecomment-326633549,326633549,
achow101,2017-09-05T17:10:12Z,"Took the test and rebased.\n\n> fix the discrepencies between `getinfo` and `-getinfo`\n\nWhat discrepancies?",https://github.com/bitcoin/bitcoin/pull/10871#issuecomment-327242551,327242551,
jnewbery,2017-09-05T17:21:58Z,"> What discrepancies?\n\nSee above:\n\n> Test currently fails because the output for bitcoin-cli getinfo and bitcoin-cli -getinfo is different in keypoolsize and unlocked_until. See #8843 (comment) for information about keypoolsize discrepancy.\n\nOnce #10838 is merged, then that's no longer an issue.\n\nAfter #10838, I think the way to test this would be to collect the responses from `get",https://github.com/bitcoin/bitcoin/pull/10871#issuecomment-327245675,327245675,
achow101,2017-09-05T17:29:17Z,"> After #10838, I think the way to test this would be to collect the responses from `getwalletinfo`, `getblockchaininfo` and `getnetworkinfo`, merge those dictionaries (hint: https://stackoverflow.com/a/26853961) and then compare that to the response from `bitcoin-cli -getinfo`.\n\nI think that we should be doing that instead of comparing against `getinfo`. This is explicitly a new thing which i",https://github.com/bitcoin/bitcoin/pull/10871#issuecomment-327247674,327247674,
achow101,2017-09-05T21:33:20Z,I modified the test to compare against the `get*info` RPCs instead of `getinfo`,https://github.com/bitcoin/bitcoin/pull/10871#issuecomment-327309930,327309930,
achow101,2017-09-06T00:08:54Z,Tidied up commits,https://github.com/bitcoin/bitcoin/pull/10871#issuecomment-327337212,327337212,
achow101,2017-09-18T15:36:09Z,Fixed the test failure.,https://github.com/bitcoin/bitcoin/pull/10871#issuecomment-330262415,330262415,
achow101,2017-09-26T15:52:19Z,Addressed nits (sorry for the delay).,https://github.com/bitcoin/bitcoin/pull/10871#issuecomment-332244064,332244064,
jnewbery,2017-09-26T16:25:22Z,"Tested ACK 5ca97e5f03d7352558991e8eb26bb58dc4eec453.\n\nThanks for sticking with this!",https://github.com/bitcoin/bitcoin/pull/10871#issuecomment-332255436,332255436,
TheBlueMatt,2017-09-28T01:39:28Z,"Something like ""Note that unlike server-side RPC calls, the results of getinfo is the result of multiple non-atomic requests. Some entries in the result may represent results from different states (eg wallet balance may be as of a different block from the chain state reported)""\n\nOn September 27, 2017 8:06:29 PM EDT, Andrew Chow <notifications@github.com> wrote:\n>achow101 commented on this pull ",https://github.com/bitcoin/bitcoin/pull/10871#issuecomment-332702400,332702400,
achow101,2017-09-28T01:53:30Z,Added the atomicity note to the help text.,https://github.com/bitcoin/bitcoin/pull/10871#issuecomment-332704361,332704361,
laanwj,2017-09-28T06:33:33Z,utACK 5e69a43,https://github.com/bitcoin/bitcoin/pull/10871#issuecomment-332741171,332741171,
QingjingJing,2017-09-28T22:10:19Z,"Thanks, helped.\n\nOn Thu, Sep 28, 2017 at 2:54 AM, Andrew Chow <notifications@github.com>\nwrote:\n\n> Added the atomicity note to the help text.\n>\n> —\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/bitcoin/bitcoin/pull/10871#issuecomment-332704361>,\n> or mute the thread\n> <https://github.com/notif",https://github.com/bitcoin/bitcoin/pull/10871#issuecomment-332978017,332978017,
crombiecrunch,2018-02-09T18:52:50Z,can someone please tell me how to apply this so that getinfo can work with the yiimp opensource pool files?,https://github.com/bitcoin/bitcoin/pull/10871#issuecomment-364524286,364524286,
MarcoFalke,2018-02-09T19:55:30Z,"@crombiecrunch Please submit a pull request upstream, replacing getinfo['balance'] with getwalletinfo['balance'] in the open source code.",https://github.com/bitcoin/bitcoin/pull/10871#issuecomment-364545739,364545739,
jnewbery,2017-09-05T23:26:27Z,please also add braces to these if blocks,https://github.com/bitcoin/bitcoin/pull/10871#discussion_r137139681,137139681,src/rpc/protocol.cpp
achow101,2017-09-06T00:10:12Z,Done,https://github.com/bitcoin/bitcoin/pull/10871#discussion_r137144838,137144838,src/rpc/protocol.cpp
jnewbery,2017-09-06T00:47:59Z,You've lost the static keyword for this function in your rebase.,https://github.com/bitcoin/bitcoin/pull/10871#discussion_r137149343,137149343,src/bitcoin-cli.cpp
jnewbery,2017-09-06T16:44:29Z,"I think it would be clearer to not reset `args` here. The only reason you're doing this is to pass the `if (args.size() < 1)` check below and then extract `strMethod`.\n\nInstead, just move the `if (args.size() < 1)` check into the else branch. `GetinfoRequestHandler.PrepareRequest()` doesn't require `strMethod` or `args`.\n\nTaking this further, you could add a method to `DefaultRequestHandle",https://github.com/bitcoin/bitcoin/pull/10871#discussion_r137324189,137324189,src/bitcoin-cli.cpp
jnewbery,2017-09-06T16:44:38Z,nit: braces,https://github.com/bitcoin/bitcoin/pull/10871#discussion_r137324234,137324234,src/bitcoin-cli.cpp
jnewbery,2017-09-06T16:45:21Z,nit: function arguments should not be hungarian/camel case `strMethod` -> `method`,https://github.com/bitcoin/bitcoin/pull/10871#discussion_r137324405,137324405,src/bitcoin-cli.cpp
jnewbery,2017-09-22T21:12:34Z,nit `strMethod` -> `method`,https://github.com/bitcoin/bitcoin/pull/10871#discussion_r140597924,140597924,src/bitcoin-cli.cpp
jnewbery,2017-09-22T21:12:51Z,"> nit: function arguments should not be hungarian/camel case strMethod -> method\n\nnot currently addressed",https://github.com/bitcoin/bitcoin/pull/10871#discussion_r140597987,140597987,src/bitcoin-cli.cpp
jnewbery,2017-09-22T21:21:29Z,"We know that the wallet isn't locked, so this won't be tested. I don't think there's any benefit in adding a test code that won't be executed (in fact it's slightly deleterious since a casual reader might think that we're actually testing this).\n\nEither:\n- lock the wallet and actually test this\n- add a comment saying we're not testing the field because the wallet isn't locked.\n\nI think",https://github.com/bitcoin/bitcoin/pull/10871#discussion_r140599396,140599396,test/functional/bitcoin_cli.py
achow101,2017-09-26T15:51:46Z,Done,https://github.com/bitcoin/bitcoin/pull/10871#discussion_r141100283,141100283,src/bitcoin-cli.cpp
achow101,2017-09-26T15:51:50Z,Done,https://github.com/bitcoin/bitcoin/pull/10871#discussion_r141100310,141100310,src/bitcoin-cli.cpp
achow101,2017-09-26T15:51:55Z,Done,https://github.com/bitcoin/bitcoin/pull/10871#discussion_r141100342,141100342,test/functional/bitcoin_cli.py
TheBlueMatt,2017-09-27T20:28:33Z,"Are you going to update the help text to note something about balance/height atomicity? The old getinfo takes cs_main and cs_wallet and returns atomic information, this no longer does. getwalletinfo will likely eventually return something so that you can report if a result was atomic here (probably a follow-up to #10286).",https://github.com/bitcoin/bitcoin/pull/10871#discussion_r141458729,141458729,src/bitcoin-cli.cpp
achow101,2017-09-28T00:06:21Z,What do you suggest that the text for such a note be?,https://github.com/bitcoin/bitcoin/pull/10871#discussion_r141498012,141498012,src/bitcoin-cli.cpp
laanwj,2017-09-28T06:32:30Z,"as getinfo is misleading here too, see https://github.com/bitcoin/bitcoin/pull/10871#issuecomment-324699582, I still don't see this as a strong point, but as it seems to bother @TheBlueMatt very much let's just add it...",https://github.com/bitcoin/bitcoin/pull/10871#discussion_r141535399,141535399,src/bitcoin-cli.cpp
TheBlueMatt,2017-09-28T22:02:09Z,"@laanwj I do not believe that to be the case in any release nor on master during normal operation (there are special cases for locked wallets). It will be the case after #10286, however there is no getinfo on master either....",https://github.com/bitcoin/bitcoin/pull/10871#discussion_r141747499,141747499,src/bitcoin-cli.cpp
