[
  {
    "sha": "382625318d8734fd71a6c9620d3e88b5617da0c5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozODI2MjUzMThkODczNGZkNzFhNmM5NjIwZDNlODhiNTYxN2RhMGM1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-09-29T14:45:19Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2017-09-28T01:53:07Z"
      },
      "message": "rpc: Handle `getinfo` locally in bitcoin-cli w/ `-getinfo`\n\nThis adds the infrastructure `BaseRequestHandler` class that takes care\nof converting bitcoin-cli arguments into a JSON-RPC request object, and\nconverting the reply into a JSON object that can be shown as result.\n\nThis is subsequently used to handle the `-getinfo` option, which sends\na JSON-RPC batch request to the RPC server with\n`[\"getnetworkinfo\", \"getblockchaininfo\", \"getwalletinfo\"]`,\nand after reply combines the result into what looks like a `getinfo`\nresult.\n\nThere have been some requests for a client-side `getinfo` and this\nis my PoC of how to do it. If this is considered a good idea\nsome of the logic could be moved up to rpcclient.cpp and\nused in the GUI console as well.\n\nExtra-Author: Andrew Chow <achow101@gmail.com>",
      "tree": {
        "sha": "69bc966e75c296275fcdd62062712a1fd82c13f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/69bc966e75c296275fcdd62062712a1fd82c13f1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/382625318d8734fd71a6c9620d3e88b5617da0c5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/382625318d8734fd71a6c9620d3e88b5617da0c5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/382625318d8734fd71a6c9620d3e88b5617da0c5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/382625318d8734fd71a6c9620d3e88b5617da0c5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ea729d55b4dbd17a53ced474a8457d4759cfb5a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea729d55b4dbd17a53ced474a8457d4759cfb5a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea729d55b4dbd17a53ced474a8457d4759cfb5a5"
      }
    ],
    "stats": {
      "total": 142,
      "additions": 127,
      "deletions": 15
    },
    "files": [
      {
        "sha": "e21a2692212a4a7660581f9c6413d4cd1f233664",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 105,
        "deletions": 14,
        "changes": 119,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/382625318d8734fd71a6c9620d3e88b5617da0c5/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/382625318d8734fd71a6c9620d3e88b5617da0c5/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=382625318d8734fd71a6c9620d3e88b5617da0c5",
        "patch": "@@ -37,6 +37,7 @@ std::string HelpMessageCli()\n     strUsage += HelpMessageOpt(\"-?\", _(\"This help message\"));\n     strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), BITCOIN_CONF_FILENAME));\n     strUsage += HelpMessageOpt(\"-datadir=<dir>\", _(\"Specify data directory\"));\n+    strUsage += HelpMessageOpt(\"-getinfo\", _(\"Get general information from the remote server. Note that unlike server-side RPC calls, the results of -getinfo is the result of multiple non-atomic requests. Some entries in the result may represent results from different states (e.g. wallet balance may be as of a different block from the chain state reported)\"));\n     AppendParamsHelpMessages(strUsage);\n     strUsage += HelpMessageOpt(\"-named\", strprintf(_(\"Pass named instead of positional arguments (default: %s)\"), DEFAULT_NAMED));\n     strUsage += HelpMessageOpt(\"-rpcconnect=<ip>\", strprintf(_(\"Send commands to node running on <ip> (default: %s)\"), DEFAULT_RPCCONNECT));\n@@ -191,7 +192,96 @@ static void http_error_cb(enum evhttp_request_error err, void *ctx)\n }\n #endif\n \n-static UniValue CallRPC(const std::string& strMethod, const UniValue& params)\n+/** Class that handles the conversion from a command-line to a JSON-RPC request,\n+ * as well as converting back to a JSON object that can be shown as result.\n+ */\n+class BaseRequestHandler\n+{\n+public:\n+    virtual UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) = 0;\n+    virtual UniValue ProcessReply(const UniValue &batch_in) = 0;\n+};\n+\n+/** Process getinfo requests */\n+class GetinfoRequestHandler: public BaseRequestHandler\n+{\n+public:\n+    const int ID_NETWORKINFO = 0;\n+    const int ID_BLOCKCHAININFO = 1;\n+    const int ID_WALLETINFO = 2;\n+\n+    /** Create a simulated `getinfo` request. */\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        result.push_back(JSONRPCRequestObj(\"getblockchaininfo\", NullUniValue, ID_BLOCKCHAININFO));\n+        result.push_back(JSONRPCRequestObj(\"getwalletinfo\", NullUniValue, ID_WALLETINFO));\n+        return result;\n+    }\n+\n+    /** Collect values from the batch and form a simulated `getinfo` reply. */\n+    UniValue ProcessReply(const UniValue &batch_in) override\n+    {\n+        UniValue result(UniValue::VOBJ);\n+        std::vector<UniValue> batch = JSONRPCProcessBatchReply(batch_in, 3);\n+        // Errors in getnetworkinfo() and getblockchaininfo() are fatal, pass them on\n+        // getwalletinfo() is allowed to fail in case there is no wallet.\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) {\n+            return batch[ID_NETWORKINFO];\n+        }\n+        if (!batch[ID_BLOCKCHAININFO][\"error\"].isNull()) {\n+            return batch[ID_BLOCKCHAININFO];\n+        }\n+        result.pushKV(\"version\", batch[ID_NETWORKINFO][\"result\"][\"version\"]);\n+        result.pushKV(\"protocolversion\", batch[ID_NETWORKINFO][\"result\"][\"protocolversion\"]);\n+        if (!batch[ID_WALLETINFO].isNull()) {\n+            result.pushKV(\"walletversion\", batch[ID_WALLETINFO][\"result\"][\"walletversion\"]);\n+            result.pushKV(\"balance\", batch[ID_WALLETINFO][\"result\"][\"balance\"]);\n+        }\n+        result.pushKV(\"blocks\", batch[ID_BLOCKCHAININFO][\"result\"][\"blocks\"]);\n+        result.pushKV(\"timeoffset\", batch[ID_NETWORKINFO][\"result\"][\"timeoffset\"]);\n+        result.pushKV(\"connections\", batch[ID_NETWORKINFO][\"result\"][\"connections\"]);\n+        result.pushKV(\"proxy\", batch[ID_NETWORKINFO][\"result\"][\"networks\"][0][\"proxy\"]);\n+        result.pushKV(\"difficulty\", batch[ID_BLOCKCHAININFO][\"result\"][\"difficulty\"]);\n+        result.pushKV(\"testnet\", UniValue(batch[ID_BLOCKCHAININFO][\"result\"][\"chain\"].get_str() == \"test\"));\n+        if (!batch[ID_WALLETINFO].isNull()) {\n+            result.pushKV(\"walletversion\", batch[ID_WALLETINFO][\"result\"][\"walletversion\"]);\n+            result.pushKV(\"balance\", batch[ID_WALLETINFO][\"result\"][\"balance\"]);\n+            result.pushKV(\"keypoololdest\", batch[ID_WALLETINFO][\"result\"][\"keypoololdest\"]);\n+            result.pushKV(\"keypoolsize\", batch[ID_WALLETINFO][\"result\"][\"keypoolsize\"]);\n+            if (!batch[ID_WALLETINFO][\"result\"][\"unlocked_until\"].isNull()) {\n+                result.pushKV(\"unlocked_until\", batch[ID_WALLETINFO][\"result\"][\"unlocked_until\"]);\n+            }\n+            result.pushKV(\"paytxfee\", batch[ID_WALLETINFO][\"result\"][\"paytxfee\"]);\n+        }\n+        result.pushKV(\"relayfee\", batch[ID_NETWORKINFO][\"result\"][\"relayfee\"]);\n+        result.pushKV(\"warnings\", batch[ID_NETWORKINFO][\"result\"][\"warnings\"]);\n+        return JSONRPCReplyObj(result, NullUniValue, 1);\n+    }\n+};\n+\n+/** Process default single requests */\n+class DefaultRequestHandler: public BaseRequestHandler {\n+public:\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        UniValue params;\n+        if(gArgs.GetBoolArg(\"-named\", DEFAULT_NAMED)) {\n+            params = RPCConvertNamedValues(method, args);\n+        } else {\n+            params = RPCConvertValues(method, args);\n+        }\n+        return JSONRPCRequestObj(method, params, 1);\n+    }\n+\n+    UniValue ProcessReply(const UniValue &reply) override\n+    {\n+        return reply.get_obj();\n+    }\n+};\n+\n+static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, const std::vector<std::string>& args)\n {\n     std::string host;\n     // In preference order, we choose the following for the port:\n@@ -238,7 +328,7 @@ static UniValue CallRPC(const std::string& strMethod, const UniValue& params)\n     evhttp_add_header(output_headers, \"Authorization\", (std::string(\"Basic \") + EncodeBase64(strRPCUserColonPass)).c_str());\n \n     // Attach request data\n-    std::string strRequest = JSONRPCRequestObj(strMethod, params, 1).write() + \"\\n\";\n+    std::string strRequest = rh->PrepareRequest(strMethod, args).write() + \"\\n\";\n     struct evbuffer* output_buffer = evhttp_request_get_output_buffer(req.get());\n     assert(output_buffer);\n     evbuffer_add(output_buffer, strRequest.data(), strRequest.size());\n@@ -277,7 +367,7 @@ static UniValue CallRPC(const std::string& strMethod, const UniValue& params)\n     UniValue valReply(UniValue::VSTR);\n     if (!valReply.read(response.body))\n         throw std::runtime_error(\"couldn't parse reply from server\");\n-    const UniValue& reply = valReply.get_obj();\n+    const UniValue reply = rh->ProcessReply(valReply);\n     if (reply.empty())\n         throw std::runtime_error(\"expected reply to have result, error and id properties\");\n \n@@ -309,24 +399,25 @@ int CommandLineRPC(int argc, char *argv[])\n                 args.push_back(line);\n             }\n         }\n-        if (args.size() < 1) {\n-            throw std::runtime_error(\"too few parameters (need at least command)\");\n-        }\n-        std::string strMethod = args[0];\n-        args.erase(args.begin()); // Remove trailing method name from arguments vector\n-\n-        UniValue params;\n-        if(gArgs.GetBoolArg(\"-named\", DEFAULT_NAMED)) {\n-            params = RPCConvertNamedValues(strMethod, args);\n+        std::unique_ptr<BaseRequestHandler> rh;\n+        std::string method;\n+        if (gArgs.GetBoolArg(\"-getinfo\", false)) {\n+            rh.reset(new GetinfoRequestHandler());\n+            method = \"\";\n         } else {\n-            params = RPCConvertValues(strMethod, args);\n+            rh.reset(new DefaultRequestHandler());\n+            if (args.size() < 1) {\n+                throw std::runtime_error(\"too few parameters (need at least command)\");\n+            }\n+            method = args[0];\n+            args.erase(args.begin()); // Remove trailing method name from arguments vector\n         }\n \n         // Execute and handle connection failures with -rpcwait\n         const bool fWait = gArgs.GetBoolArg(\"-rpcwait\", false);\n         do {\n             try {\n-                const UniValue reply = CallRPC(strMethod, params);\n+                const UniValue reply = CallRPC(rh.get(), method, args);\n \n                 // Parse reply\n                 const UniValue& result = find_value(reply, \"result\");"
      },
      {
        "sha": "1f4ae75b18e25dfb00c7109a9cff6a3809a55090",
        "filename": "src/rpc/protocol.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 1,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/382625318d8734fd71a6c9620d3e88b5617da0c5/src/rpc/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/382625318d8734fd71a6c9620d3e88b5617da0c5/src/rpc/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.cpp?ref=382625318d8734fd71a6c9620d3e88b5617da0c5",
        "patch": "@@ -19,7 +19,7 @@\n  * JSON-RPC protocol.  Bitcoin speaks version 1.0 for maximum compatibility,\n  * but uses JSON-RPC 1.1/2.0 standards for parts of the 1.0 standard that were\n  * unspecified (HTTP errors and contents of 'error').\n- * \n+ *\n  * 1.0 spec: http://json-rpc.org/wiki/specification\n  * 1.2 spec: http://jsonrpc.org/historical/json-rpc-over-http.html\n  */\n@@ -135,3 +135,22 @@ void DeleteAuthCookie()\n     }\n }\n \n+std::vector<UniValue> JSONRPCProcessBatchReply(const UniValue &in, size_t num)\n+{\n+    if (!in.isArray()) {\n+        throw std::runtime_error(\"Batch must be an array\");\n+    }\n+    std::vector<UniValue> batch(num);\n+    for (size_t i=0; i<in.size(); ++i) {\n+        const UniValue &rec = in[i];\n+        if (!rec.isObject()) {\n+            throw std::runtime_error(\"Batch member must be object\");\n+        }\n+        size_t id = rec[\"id\"].get_int();\n+        if (id >= num) {\n+            throw std::runtime_error(\"Batch member id larger than size\");\n+        }\n+        batch[id] = rec;\n+    }\n+    return batch;\n+}"
      },
      {
        "sha": "bba7438c953fe195e9ed690bc5bc8fc9942e1ef0",
        "filename": "src/rpc/protocol.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/382625318d8734fd71a6c9620d3e88b5617da0c5/src/rpc/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/382625318d8734fd71a6c9620d3e88b5617da0c5/src/rpc/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.h?ref=382625318d8734fd71a6c9620d3e88b5617da0c5",
        "patch": "@@ -97,5 +97,7 @@ bool GenerateAuthCookie(std::string *cookie_out);\n bool GetAuthCookie(std::string *cookie_out);\n /** Delete RPC authentication cookie from disk */\n void DeleteAuthCookie();\n+/** Parse JSON-RPC batch reply into a vector */\n+std::vector<UniValue> JSONRPCProcessBatchReply(const UniValue &in, size_t num);\n \n #endif // BITCOIN_RPCPROTOCOL_H"
      }
    ]
  },
  {
    "sha": "5e69a430ee260950b69e0c36394671381add2b94",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZTY5YTQzMGVlMjYwOTUwYjY5ZTBjMzYzOTQ2NzEzODFhZGQyYjk0",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-08-23T18:30:03Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2017-09-28T01:53:14Z"
      },
      "message": "Add test for bitcoin-cli -getinfo\n\nExtra-Author: Andrew Chow <achow101@gmail.com>",
      "tree": {
        "sha": "02820dcf6cdaa98f89994987519112e78dfbcf01",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/02820dcf6cdaa98f89994987519112e78dfbcf01"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5e69a430ee260950b69e0c36394671381add2b94",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e69a430ee260950b69e0c36394671381add2b94",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5e69a430ee260950b69e0c36394671381add2b94",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e69a430ee260950b69e0c36394671381add2b94/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "382625318d8734fd71a6c9620d3e88b5617da0c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/382625318d8734fd71a6c9620d3e88b5617da0c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/382625318d8734fd71a6c9620d3e88b5617da0c5"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 23,
      "deletions": 0
    },
    "files": [
      {
        "sha": "996cbb8a12d095d9613994193b5f29b971cd804c",
        "filename": "test/functional/bitcoin_cli.py",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e69a430ee260950b69e0c36394671381add2b94/test/functional/bitcoin_cli.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e69a430ee260950b69e0c36394671381add2b94/test/functional/bitcoin_cli.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bitcoin_cli.py?ref=5e69a430ee260950b69e0c36394671381add2b94",
        "patch": "@@ -35,5 +35,28 @@ def run_test(self):\n         assert_equal([\"foo\", \"bar\"], self.nodes[0].cli('-rpcuser=%s' % user, '-stdin', '-stdinrpcpass', input=password + \"\\nfoo\\nbar\").echo())\n         assert_raises_process_error(1, \"incorrect rpcuser or rpcpassword\", self.nodes[0].cli('-rpcuser=%s' % user, '-stdin', '-stdinrpcpass', input=\"foo\").echo)\n \n+        self.log.info(\"Compare responses from `bitcoin-cli -getinfo` and the RPCs data is retrieved from.\")\n+        cli_get_info = self.nodes[0].cli('-getinfo').help()\n+        wallet_info = self.nodes[0].getwalletinfo()\n+        network_info = self.nodes[0].getnetworkinfo()\n+        blockchain_info = self.nodes[0].getblockchaininfo()\n+\n+        assert_equal(cli_get_info['version'], network_info['version'])\n+        assert_equal(cli_get_info['protocolversion'], network_info['protocolversion'])\n+        assert_equal(cli_get_info['walletversion'], wallet_info['walletversion'])\n+        assert_equal(cli_get_info['balance'], wallet_info['balance'])\n+        assert_equal(cli_get_info['blocks'], blockchain_info['blocks'])\n+        assert_equal(cli_get_info['timeoffset'], network_info['timeoffset'])\n+        assert_equal(cli_get_info['connections'], network_info['connections'])\n+        assert_equal(cli_get_info['proxy'], network_info['networks'][0]['proxy'])\n+        assert_equal(cli_get_info['difficulty'], blockchain_info['difficulty'])\n+        assert_equal(cli_get_info['testnet'], blockchain_info['chain'] == \"test\")\n+        assert_equal(cli_get_info['balance'], wallet_info['balance'])\n+        assert_equal(cli_get_info['keypoololdest'], wallet_info['keypoololdest'])\n+        assert_equal(cli_get_info['keypoolsize'], wallet_info['keypoolsize'])\n+        assert_equal(cli_get_info['paytxfee'], wallet_info['paytxfee'])\n+        assert_equal(cli_get_info['relayfee'], network_info['relayfee'])\n+        # unlocked_until is not tested because the wallet is not encrypted\n+\n if __name__ == '__main__':\n     TestBitcoinCli().main()"
      }
    ]
  }
]