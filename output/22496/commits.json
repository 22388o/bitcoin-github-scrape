[
  {
    "sha": "65332b1178c75e1f83415bad24918996a1524866",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NTMzMmIxMTc4Yzc1ZTFmODM0MTViYWQyNDkxODk5NmExNTI0ODY2",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-07-19T11:57:16Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-07-20T10:45:52Z"
      },
      "message": "[addrman] Remove RemoveInvalid()\n\nInstead of deserializing addresses, placing them in the buckets, and\nthen removing them if they're invalid, check first and don't place in\nthe buckets if they're invalid.",
      "tree": {
        "sha": "44128681db330ad8f011763c11f702c8c0c7ea36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/44128681db330ad8f011763c11f702c8c0c7ea36"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65332b1178c75e1f83415bad24918996a1524866",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65332b1178c75e1f83415bad24918996a1524866",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/65332b1178c75e1f83415bad24918996a1524866",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65332b1178c75e1f83415bad24918996a1524866/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "201c5e4aec5210b258644ff96379cda0ca7273ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/201c5e4aec5210b258644ff96379cda0ca7273ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/201c5e4aec5210b258644ff96379cda0ca7273ab"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 7,
      "deletions": 40
    },
    "files": [
      {
        "sha": "8f702b5a8c06e464ec86eef5c9257ea63e780606",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 32,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65332b1178c75e1f83415bad24918996a1524866/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65332b1178c75e1f83415bad24918996a1524866/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=65332b1178c75e1f83415bad24918996a1524866",
        "patch": "@@ -77,38 +77,6 @@ double CAddrInfo::GetChance(int64_t nNow) const\n     return fChance;\n }\n \n-void CAddrMan::RemoveInvalid()\n-{\n-    for (size_t bucket = 0; bucket < ADDRMAN_NEW_BUCKET_COUNT; ++bucket) {\n-        for (size_t i = 0; i < ADDRMAN_BUCKET_SIZE; ++i) {\n-            const auto id = vvNew[bucket][i];\n-            if (id != -1 && !mapInfo[id].IsValid()) {\n-                ClearNew(bucket, i);\n-            }\n-        }\n-    }\n-\n-    for (size_t bucket = 0; bucket < ADDRMAN_TRIED_BUCKET_COUNT; ++bucket) {\n-        for (size_t i = 0; i < ADDRMAN_BUCKET_SIZE; ++i) {\n-            const auto id = vvTried[bucket][i];\n-            if (id == -1) {\n-                continue;\n-            }\n-            const auto& addr_info = mapInfo[id];\n-            if (addr_info.IsValid()) {\n-                continue;\n-            }\n-            vvTried[bucket][i] = -1;\n-            --nTried;\n-            SwapRandom(addr_info.nRandomPos, vRandom.size() - 1);\n-            vRandom.pop_back();\n-            mapAddr.erase(addr_info);\n-            mapInfo.erase(id);\n-            m_tried_collisions.erase(id);\n-        }\n-    }\n-}\n-\n CAddrInfo* CAddrMan::Find(const CNetAddr& addr, int* pnId)\n {\n     AssertLockHeld(cs);"
      },
      {
        "sha": "e2c6d1d0d3283690346b37584d41a07c6ace83dd",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65332b1178c75e1f83415bad24918996a1524866/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65332b1178c75e1f83415bad24918996a1524866/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=65332b1178c75e1f83415bad24918996a1524866",
        "patch": "@@ -365,7 +365,8 @@ class CAddrMan\n             s >> info;\n             int nKBucket = info.GetTriedBucket(nKey, m_asmap);\n             int nKBucketPos = info.GetBucketPosition(nKey, false, nKBucket);\n-            if (vvTried[nKBucket][nKBucketPos] == -1) {\n+            if (info.IsValid()\n+                && vvTried[nKBucket][nKBucketPos] == -1) {\n                 info.nRandomPos = vRandom.size();\n                 info.fInTried = true;\n                 vRandom.push_back(nIdCount);\n@@ -419,6 +420,9 @@ class CAddrMan\n             const int entry_index{bucket_entry.second};\n             CAddrInfo& info = mapInfo[entry_index];\n \n+            // Don't store the entry in the new bucket if it's not a valid address for our addrman\n+            if (!info.IsValid()) continue;\n+\n             // The entry shouldn't appear in more than\n             // ADDRMAN_NEW_BUCKETS_PER_ADDRESS. If it has already, just skip\n             // this bucket_entry.\n@@ -441,7 +445,7 @@ class CAddrMan\n             }\n         }\n \n-        // Prune new entries with refcount 0 (as a result of collisions).\n+        // Prune new entries with refcount 0 (as a result of collisions or invalid address).\n         int nLostUnk = 0;\n         for (auto it = mapInfo.cbegin(); it != mapInfo.cend(); ) {\n             if (it->second.fInTried == false && it->second.nRefCount == 0) {\n@@ -453,11 +457,9 @@ class CAddrMan\n             }\n         }\n         if (nLost + nLostUnk > 0) {\n-            LogPrint(BCLog::ADDRMAN, \"addrman lost %i new and %i tried addresses due to collisions\\n\", nLostUnk, nLost);\n+            LogPrint(BCLog::ADDRMAN, \"addrman lost %i new and %i tried addresses due to collisions or invalid addresses\\n\", nLostUnk, nLost);\n         }\n \n-        RemoveInvalid();\n-\n         Check();\n     }\n \n@@ -770,9 +772,6 @@ class CAddrMan\n     //! Update an entry's service bits.\n     void SetServices_(const CService &addr, ServiceFlags nServices) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n-    //! Remove invalid addresses.\n-    void RemoveInvalid() EXCLUSIVE_LOCKS_REQUIRED(cs);\n-\n     friend class CAddrManTest;\n };\n "
      }
    ]
  }
]