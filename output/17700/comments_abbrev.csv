laanwj,2019-12-09 09:35:49,"Concept ACK, seems useful for testing\n(vaguely related to #17314 as for improving -cli user experience)",https://github.com/bitcoin/bitcoin/pull/17700#issuecomment-563145794,563145794,
promag,2019-12-09 11:25:56,Mind adding some test to test/functional/interface_bitcoin_cli.py?,https://github.com/bitcoin/bitcoin/pull/17700#issuecomment-563192839,563192839,
brakmic,2019-12-09 11:28:36,"> Mind adding some test to test/functional/interface_bitcoin_cli.py?\n\nYes, I spoke about it in the [original posting](https://github.com/bitcoin/bitcoin/issues/16000#issuecomment-557810257), but I am not sure how to do it the correct way. \n\nBut I'll look into it.",https://github.com/bitcoin/bitcoin/pull/17700#issuecomment-563193852,563193852,
promag,2019-12-09 11:31:37,@brakmic something like call `bitcoin-cli -generate ...` and check the response format and maybe also check the new tip against `getblockchaininfo`.,https://github.com/bitcoin/bitcoin/pull/17700#issuecomment-563194903,563194903,
brakmic,2019-12-09 13:57:49,"> @brakmic something like call `bitcoin-cli -generate ...` and check the response format and maybe also check the new tip against `getblockchaininfo`.\n\nI've added tests in test/functional/rpc_generate.py\nHowever, I am not sure if it should be prefixed with ""rpc"", because under the hood it uses CLI to mimic the old generate API. So maybe it should rather be called ""cli_generate"" or something ",https://github.com/bitcoin/bitcoin/pull/17700#issuecomment-563249928,563249928,
jonasschnelli,2019-12-16 06:02:28,"Nice.\nAlthough I would prefer something that is also possible through the GUI console (maybe server side) instead of in both clients?",https://github.com/bitcoin/bitcoin/pull/17700#issuecomment-565918105,565918105,
laanwj,2019-12-16 10:20:01,"> Although I would prefer something that is also possible through the GUI console (maybe server side) instead of in both clients?\n\nI'm definitely opposed to adding more mining functionality back server-side.\n\nBut I guess in the longer term we could have a new library that's shared between the GUI console and cli, for these kind of features.\n\nI think GUI is out of scope here though.\n",https://github.com/bitcoin/bitcoin/pull/17700#issuecomment-565997146,565997146,
adamjonas,2019-12-16 17:24:47,"Concept ACK. I did a little playing around with this and had two main pieces of feedback:\n\n1. One of the reasons I'm such a big supporter for bringing back `generate` is because many of the historical tutorials were broken when it was removed (for example https://btcinformation.org/en/developer-examples#regtest-mode). Unfortunately, this isn't corrected here. I'm aware that adding the dash is ",https://github.com/bitcoin/bitcoin/pull/17700#issuecomment-566159096,566159096,
brakmic,2019-12-17 00:24:21,"> 2. The JSON that's returned could be improved.\n> \n\nI've changed the structure of JSON result and it now looks like this:\n\n```shell\n./src/bitcoin-cli -regtest -generate 3\n{\n  ""address"": ""bcrt1qxwysj6war3v4jf6kcderstxsecq534umcalefc"",\n  ""blocks"": [\n    ""6f78253c94c0e5b180ae7002c366811a9f70a32b70fc17a81e42fd69d351ecf9"",\n    ""46f1b2790fe2e973fe67531c1acb7f29298005a5107b80cd56d5",https://github.com/bitcoin/bitcoin/pull/17700#issuecomment-566314156,566314156,
emilengler,2020-01-29 18:31:54,"Concept NACK\nIf this option is for testing, why not make a simple shell script locally to do that?\nWhat's the advantage of having this?",https://github.com/bitcoin/bitcoin/pull/17700#issuecomment-579896457,579896457,
brakmic,2020-01-29 18:33:42,"> Concept NACK\n> If this option is for testing, why not make a simple shell script locally to do that?\n> What's the advantage of having this?\n\nPlease, check the original discussion which this PR is based on: https://github.com/bitcoin/bitcoin/issues/16000",https://github.com/bitcoin/bitcoin/pull/17700#issuecomment-579897168,579897168,
emilengler,2020-01-29 18:36:51,"@brakmic I flew over the old discussion but I saw that the old point wasn't pointed out somewhere.\nMaybe I oversaw could you point me to thing you think I may missed?",https://github.com/bitcoin/bitcoin/pull/17700#issuecomment-579898454,579898454,
brakmic,2020-01-29 18:42:47,"> @brakmic I flew over the old discussion but I saw that the old point wasn't pointed out somewhere.\n> Maybe I oversaw could you point me to thing you think I may missed?\n\nOld point? Not sure what you mean with it. \n\nAll in all, the reason for ""resurrecting"" this retired API call is to create something that behaves similarly to **-getinfo**. As we all know, In the past **getinfo** was on",https://github.com/bitcoin/bitcoin/pull/17700#issuecomment-579900804,579900804,
DrahtBot,2020-04-13 01:54:29,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18594 (cli: display multiwallet balances in -getinfo by jonatack)\n\nIf you consider this pull request important, please ",https://github.com/bitcoin/bitcoin/pull/17700#issuecomment-612713891,612713891,
jonatack,2020-05-28 20:20:08,"Hi @brakmic, would you have any objection if I relaunch and update this, building on some of your commits?",https://github.com/bitcoin/bitcoin/pull/17700#issuecomment-635585489,635585489,
brakmic,2020-05-28 20:22:57,"> Hi @brakmic, would you have any objection if I relaunch and update this, building on some of your commits?\n\nNo problem. Take anything that could be of use to you.",https://github.com/bitcoin/bitcoin/pull/17700#issuecomment-635586839,635586839,
jonatack,2020-06-01 12:39:06,Thanks @brakmic! Continued the work in #19133.,https://github.com/bitcoin/bitcoin/pull/17700#issuecomment-636837261,636837261,
MarcoFalke,2019-12-09 13:42:32,Why is is needed to extend them with the defaults?,https://github.com/bitcoin/bitcoin/pull/17700#discussion_r355454614,355454614,src/bitcoin-cli.cpp
brakmic,2019-12-09 13:47:55,"In generatetoaddress the first and third param are **nblocks** and **maxtries**.  This is to make sure that all three args are there. But if there is a better way to handle it, please, give me a hint.",https://github.com/bitcoin/bitcoin/pull/17700#discussion_r355457357,355457357,src/bitcoin-cli.cpp
MarcoFalke,2019-12-09 13:52:06,"If the user does not give a value, you can just pass nothing along as well (or null). The server then checks this and fills in the current default: https://github.com/bitcoin/bitcoin/blob/a739d207a39fc34c2e5adf4e14bfbb3a6288ede1/src/rpc/mining.cpp#L209",https://github.com/bitcoin/bitcoin/pull/17700#discussion_r355459349,355459349,src/bitcoin-cli.cpp
brakmic,2019-12-09 13:53:43,"But I need it to construct the ""fake"" RPC call, because I also have to generate an address first. Then I go to create blocks. So I have to ""save"" all those params and their positions, so I can find them again.",https://github.com/bitcoin/bitcoin/pull/17700#discussion_r355460219,355460219,src/bitcoin-cli.cpp
brakmic,2019-12-09 14:04:43,"But of course, I could simply put a NULL there, no problem. Let me check it how it'll behave. :)",https://github.com/bitcoin/bitcoin/pull/17700#discussion_r355466308,355466308,src/bitcoin-cli.cpp
brakmic,2019-12-09 14:07:45,"Hm, I'm now getting errors. No matter if I enter any args or none at all. Not sure if I should redo the logic? Is it really important that it **doesn't use** any default args?",https://github.com/bitcoin/bitcoin/pull/17700#discussion_r355467767,355467767,src/bitcoin-cli.cpp
MarcoFalke,2019-12-09 14:26:29,"So I tried this diff:\n\n```diff\ndiff --git a/src/bitcoin-cli.cpp b/src/bitcoin-cli.cpp\nindex ef05c910d4..2fff98c05c 100644\n--- a/src/bitcoin-cli.cpp\n+++ b/src/bitcoin-cli.cpp\n@@ -535,11 +535,11 @@ static int CommandLineRPC(int argc, char *argv[])\n                 if (args.size() == 0) {\n                     args.push_back(std::to_string(DEFAULT_GENERATED_NBLOCKS));\n             ",https://github.com/bitcoin/bitcoin/pull/17700#discussion_r355477600,355477600,src/bitcoin-cli.cpp
brakmic,2019-12-09 14:29:51,"This is surely because of the ""ephemeral"" calls in between. First, the address gets generated, then its JSON result flows into the second call, generatetoaddress. I am manipulating the args vector, which is being (re)used by the two APIs.",https://github.com/bitcoin/bitcoin/pull/17700#discussion_r355479456,355479456,src/bitcoin-cli.cpp
MarcoFalke,2019-12-09 18:43:48,"Oh, I forgot to replace the `if` with `else if`. This works:\n\n```diff\ndiff --git a/src/bitcoin-cli.cpp b/src/bitcoin-cli.cpp\nindex ef05c910d4..4179520cc1 100644\n--- a/src/bitcoin-cli.cpp\n+++ b/src/bitcoin-cli.cpp\n@@ -229,7 +229,7 @@ class GetNewAddressRequestHandler: public BaseRequestHandler\n public:\n    const int ID_GETNEWADDRESS = 0;\n \n-   UniValue PrepareRequest(const std",https://github.com/bitcoin/bitcoin/pull/17700#discussion_r355617781,355617781,src/bitcoin-cli.cpp
brakmic,2019-12-09 18:45:49,Great! Many thanks!,https://github.com/bitcoin/bitcoin/pull/17700#discussion_r355618820,355618820,src/bitcoin-cli.cpp
MarcoFalke,2019-12-09 18:57:03,"* Is the equal sign wanted in `-generate=...`?\n* I think it is fine to just mention that the default for maxtries is given by the default of the generatetoaddress::maxtries ",https://github.com/bitcoin/bitcoin/pull/17700#discussion_r355624307,355624307,src/bitcoin-cli.cpp
MarcoFalke,2019-12-09 18:57:41,should be removed?,https://github.com/bitcoin/bitcoin/pull/17700#discussion_r355624646,355624646,src/bitcoin-cli.cpp
MarcoFalke,2019-12-09 18:58:47,"```suggestion\n            // 1) ""getnewaddress"" without any parameters\n```\n\nThis is the default, but can be modified in the config settings",https://github.com/bitcoin/bitcoin/pull/17700#discussion_r355625232,355625232,src/bitcoin-cli.cpp
MarcoFalke,2019-12-09 19:00:54,style-nit: I prefer `.at(0)` and `.at(1)`. Feel free to ignore.,https://github.com/bitcoin/bitcoin/pull/17700#discussion_r355626272,355626272,src/bitcoin-cli.cpp
brakmic,2019-12-09 19:02:54,I wasn't sure how to properly inform the user about the optional nature of these two flags. There is no requirement to keep the equal sign.  I'll adapt this part to look like other commands.,https://github.com/bitcoin/bitcoin/pull/17700#discussion_r355627248,355627248,src/bitcoin-cli.cpp
brakmic,2019-12-09 19:03:37,"Yes, it should go now. Will adapt the code. Thanks!",https://github.com/bitcoin/bitcoin/pull/17700#discussion_r355627567,355627567,src/bitcoin-cli.cpp
brakmic,2019-12-09 19:04:04,"Yes, of course :)",https://github.com/bitcoin/bitcoin/pull/17700#discussion_r355627815,355627815,src/bitcoin-cli.cpp
brakmic,2019-12-09 19:04:42,"**at** makes more sense, in every way. Will adapt.",https://github.com/bitcoin/bitcoin/pull/17700#discussion_r355628097,355628097,src/bitcoin-cli.cpp
brakmic,2019-12-09 19:09:34,"Hm, I was wrong, the equal sign is needed. My tests are failing if I have no equal sign there. ",https://github.com/bitcoin/bitcoin/pull/17700#discussion_r355630200,355630200,src/bitcoin-cli.cpp
brakmic,2019-12-09 19:20:56,"But I will remove the [] around the params. Also, the call works with =, so ""generate=1"" returns a block. ",https://github.com/bitcoin/bitcoin/pull/17700#discussion_r355635760,355635760,src/bitcoin-cli.cpp
brakmic,2019-12-09 19:40:48,"But it doesn't process the arguments properly. So, if I put **generate=10** it still generates only one block. And if I call it with **generate=1 1000** it tries to generate 1000 blocks. This definitely is not good, so I need a way to get rid of **=** sign in the command description.",https://github.com/bitcoin/bitcoin/pull/17700#discussion_r355645545,355645545,src/bitcoin-cli.cpp
brakmic,2019-12-09 19:52:34,"The next option, imo, is to extend the rpc/client.cpp with param names so they can be picked up by RPCConvertNamedValues in the handler functions. Will try it out.",https://github.com/bitcoin/bitcoin/pull/17700#discussion_r355651229,355651229,src/bitcoin-cli.cpp
brakmic,2019-12-09 20:11:18,"Ok, the simplest solution is the best one. :) \n\nI have removed the whole stuff **=nblocks maxtries** and only left **-generate** in command help info. ",https://github.com/bitcoin/bitcoin/pull/17700#discussion_r355659805,355659805,src/bitcoin-cli.cpp
MarcoFalke,2019-12-09 20:29:28,"```suggestion\n    gArgs.AddArg(""-generate"", strprintf(""[nblocks] [maxtries] Generate blocks immediately (default nblocks: %s, maxtries: Same default as the generatetoaddress RPC)"", DEFAULT_GENERATED_NBLOCKS), ArgsManager::ALLOW_ANY, OptionsCategory::BLOCK_CREATION);\n```",https://github.com/bitcoin/bitcoin/pull/17700#discussion_r355667654,355667654,src/bitcoin-cli.cpp
brakmic,2019-12-09 20:30:27,Many thanks!,https://github.com/bitcoin/bitcoin/pull/17700#discussion_r355668064,355668064,src/bitcoin-cli.cpp
MarcoFalke,2019-12-09 20:32:11,"This is now unused, right?",https://github.com/bitcoin/bitcoin/pull/17700#discussion_r355668864,355668864,src/bitcoin-cli.cpp
brakmic,2019-12-09 20:33:47,DEFAULT_GENERATED_MAXTRIES is unused. The other is still needed for args in CommandLineRPC,https://github.com/bitcoin/bitcoin/pull/17700#discussion_r355669550,355669550,src/bitcoin-cli.cpp
brakmic,2019-12-09 20:34:37,Maybe I messed it up and forgot to remove it in CommandLineRPC too?,https://github.com/bitcoin/bitcoin/pull/17700#discussion_r355669919,355669919,src/bitcoin-cli.cpp
brakmic,2019-12-09 20:35:41,And DEFAULT_GENERATED_NBLOCKS is still used in help info.,https://github.com/bitcoin/bitcoin/pull/17700#discussion_r355670372,355670372,src/bitcoin-cli.cpp
brakmic,2019-12-09 20:37:29,Have tested it without DEFAULT_GENERATED_NBLOCKS in CommandLIneRPC and it failed when used **generate** without any params. ,https://github.com/bitcoin/bitcoin/pull/17700#discussion_r355671175,355671175,src/bitcoin-cli.cpp
jonatack,2020-01-18 19:23:07,"sort, should be above -getinfo?",https://github.com/bitcoin/bitcoin/pull/17700#discussion_r368243881,368243881,src/bitcoin-cli.cpp
jonatack,2020-01-18 19:28:42,Do you need a clean chain for the test or can it use the cached data?,https://github.com/bitcoin/bitcoin/pull/17700#discussion_r368244167,368244167,test/functional/rpc_generate.py
jonatack,2020-01-18 19:33:30,Could place the tests in run_test() directly since they are all together anyway.,https://github.com/bitcoin/bitcoin/pull/17700#discussion_r368244409,368244409,test/functional/rpc_generate.py
jonatack,2020-01-18 19:33:53,Could add a docstring and/or logging.,https://github.com/bitcoin/bitcoin/pull/17700#discussion_r368244426,368244426,test/functional/rpc_generate.py
brakmic,2020-01-18 19:44:45,"Ok, I can change it. However, as there are already a few other commits that I didn't squash because of some reasons I will keep this change and a few others you mentioned below in a separate commit. I can then squash them all together later.",https://github.com/bitcoin/bitcoin/pull/17700#discussion_r368244819,368244819,src/bitcoin-cli.cpp
jonatack,2020-04-13 18:45:29,I think you don't need to do any of these 40 lines of setup as you're not batching. You can use the existing `DefaultRequestHandler` and put the 2 `pushKV` lines in your -generate code section below.  See 06a1bf6c1e1de3e219d2f8eebe187c1ca2962e9d for a semi-related example.,https://github.com/bitcoin/bitcoin/pull/17700#discussion_r407646558,407646558,src/bitcoin-cli.cpp
brakmic,2020-04-13 22:09:51,"Many thanks. A good idea. However, my code is based on a pretty ""old"" version that differs greatly from https://github.com/bitcoin/bitcoin/commit/06a1bf6c1e1de3e219d2f8eebe187c1ca2962e9d \n\nMaybe before changing all that, I should rebase this code and try to re-implement it again.  ",https://github.com/bitcoin/bitcoin/pull/17700#discussion_r407749902,407749902,src/bitcoin-cli.cpp
jonatack,2020-04-13 22:18:38,"ISTM the only (or main) change between the example in 06a1bf6c1e1de3e219d2f8eebe187c1ca2962e9d and your code is that you would use CallRPC instead of ConnectAndCallRPC (with the same arguments, just renaming).",https://github.com/bitcoin/bitcoin/pull/17700#discussion_r407753165,407753165,src/bitcoin-cli.cpp
brakmic,2020-04-13 22:20:42,"Ok, then let's see how far this goes.",https://github.com/bitcoin/bitcoin/pull/17700#discussion_r407753934,407753934,src/bitcoin-cli.cpp
jonatack,2020-04-13 22:21:16,"E.g.\n```cpp\nCallRPC(rh.get(), ""getnewaddress"", args);\nCallRPC(rh.get(), ""generatetoaddress"", args);\n```\netc.",https://github.com/bitcoin/bitcoin/pull/17700#discussion_r407754156,407754156,src/bitcoin-cli.cpp
brakmic,2020-04-13 23:40:34,"Sadly, it wouldn't make much sense to change it, because *CallRPC* isn't exactly the same as **ConnectAndCallRPC**. In my code there is a ""default"" [CallRPC](https://github.com/brakmic/bitcoin/blob/resurrect-generate-method/src/bitcoin-cli.cpp#L568), which collides with my special ""-generate"" command that needs two of such calls. So, either I modify this implicit RPCCall thus making it even more c",https://github.com/bitcoin/bitcoin/pull/17700#discussion_r407780918,407780918,src/bitcoin-cli.cpp
