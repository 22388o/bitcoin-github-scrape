[
  {
    "sha": "a004eb1dae7e0aa91e65f73cfc81f87c048b5b5c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMDA0ZWIxZGFlN2UwYWE5MWU2NWY3M2NmYzgxZjg3YzA0OGI1YjVj",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-03-21T09:38:11Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-03-21T09:38:11Z"
      },
      "message": "tests: Remove unused argument max_invalid from check_estimates(...)",
      "tree": {
        "sha": "2434d9360c83573acc7b27e84c86678174888295",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2434d9360c83573acc7b27e84c86678174888295"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a004eb1dae7e0aa91e65f73cfc81f87c048b5b5c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a004eb1dae7e0aa91e65f73cfc81f87c048b5b5c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a004eb1dae7e0aa91e65f73cfc81f87c048b5b5c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a004eb1dae7e0aa91e65f73cfc81f87c048b5b5c/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9b8b1079ddab64ac955766536c38d23dc57bc499",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b8b1079ddab64ac955766536c38d23dc57bc499",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9b8b1079ddab64ac955766536c38d23dc57bc499"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "f434b6682b930d6d3d0379b7f9f1deb4bd3ec7b9",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a004eb1dae7e0aa91e65f73cfc81f87c048b5b5c/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a004eb1dae7e0aa91e65f73cfc81f87c048b5b5c/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=a004eb1dae7e0aa91e65f73cfc81f87c048b5b5c",
        "patch": "@@ -99,7 +99,7 @@ def split_inputs(from_node, txins, txouts, initial_split=False):\n     txouts.append({\"txid\": txid, \"vout\": 0, \"amount\": half_change})\n     txouts.append({\"txid\": txid, \"vout\": 1, \"amount\": rem_change})\n \n-def check_estimates(node, fees_seen, max_invalid):\n+def check_estimates(node, fees_seen):\n     \"\"\"Call estimatesmartfee and verify that the estimates meet certain invariants.\"\"\"\n \n     delta = 1.0e-6  # account for rounding error\n@@ -219,21 +219,21 @@ def run_test(self):\n             self.log.info(\"Creating transactions and mining them with a block size that can't keep up\")\n             # Create transactions and mine 10 small blocks with node 2, but create txs faster than we can mine\n             self.transact_and_mine(10, self.nodes[2])\n-            check_estimates(self.nodes[1], self.fees_per_kb, 14)\n+            check_estimates(self.nodes[1], self.fees_per_kb)\n \n             self.log.info(\"Creating transactions and mining them at a block size that is just big enough\")\n             # Generate transactions while mining 10 more blocks, this time with node1\n             # which mines blocks with capacity just above the rate that transactions are being created\n             self.transact_and_mine(10, self.nodes[1])\n-            check_estimates(self.nodes[1], self.fees_per_kb, 2)\n+            check_estimates(self.nodes[1], self.fees_per_kb)\n \n         # Finish by mining a normal-sized block:\n         while len(self.nodes[1].getrawmempool()) > 0:\n             self.nodes[1].generate(1)\n \n         sync_blocks(self.nodes[0:3], wait=.1)\n         self.log.info(\"Final estimates after emptying mempools\")\n-        check_estimates(self.nodes[1], self.fees_per_kb, 2)\n+        check_estimates(self.nodes[1], self.fees_per_kb)\n \n if __name__ == '__main__':\n     EstimateFeeTest().main()"
      }
    ]
  }
]