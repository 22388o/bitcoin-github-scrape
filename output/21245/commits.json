[
  {
    "sha": "b788bbd837059927fa11cd6a688d6a1f864c20de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNzg4YmJkODM3MDU5OTI3ZmExMWNkNmE2ODhkNmExZjg2NGMyMGRl",
    "commit": {
      "author": {
        "name": "fyquah",
        "email": "fyquah@protonmail.com",
        "date": "2021-03-01T20:03:35Z"
      },
      "committer": {
        "name": "fyquah",
        "email": "fyquah@protonmail.com",
        "date": "2021-08-03T19:07:06Z"
      },
      "message": "rpc: Replace boolean argument for tx details with enum class.\n\nCo-authored-by: Luke Dashjr <luke_github1@dashjr.org>\nCo-authored-by: 0xB10C <19157360+0xB10C@users.noreply.github.com>",
      "tree": {
        "sha": "c45ed1bcfbf47adbc9099209d142022cf41ef04c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c45ed1bcfbf47adbc9099209d142022cf41ef04c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b788bbd837059927fa11cd6a688d6a1f864c20de",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b788bbd837059927fa11cd6a688d6a1f864c20de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b788bbd837059927fa11cd6a688d6a1f864c20de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b788bbd837059927fa11cd6a688d6a1f864c20de/comments",
    "author": {
      "login": "fyquah",
      "id": 6006469,
      "node_id": "MDQ6VXNlcjYwMDY0Njk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6006469?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fyquah",
      "html_url": "https://github.com/fyquah",
      "followers_url": "https://api.github.com/users/fyquah/followers",
      "following_url": "https://api.github.com/users/fyquah/following{/other_user}",
      "gists_url": "https://api.github.com/users/fyquah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fyquah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fyquah/subscriptions",
      "organizations_url": "https://api.github.com/users/fyquah/orgs",
      "repos_url": "https://api.github.com/users/fyquah/repos",
      "events_url": "https://api.github.com/users/fyquah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fyquah/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fyquah",
      "id": 6006469,
      "node_id": "MDQ6VXNlcjYwMDY0Njk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6006469?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fyquah",
      "html_url": "https://github.com/fyquah",
      "followers_url": "https://api.github.com/users/fyquah/followers",
      "following_url": "https://api.github.com/users/fyquah/following{/other_user}",
      "gists_url": "https://api.github.com/users/fyquah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fyquah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fyquah/subscriptions",
      "organizations_url": "https://api.github.com/users/fyquah/orgs",
      "repos_url": "https://api.github.com/users/fyquah/repos",
      "events_url": "https://api.github.com/users/fyquah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fyquah/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eaf09bda4ab21f79f89822d2c6fa3d7a3ce57b0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eaf09bda4ab21f79f89822d2c6fa3d7a3ce57b0d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eaf09bda4ab21f79f89822d2c6fa3d7a3ce57b0d"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 43,
      "deletions": 25
    },
    "files": [
      {
        "sha": "a2946761335fe80f5189312f79e7c079b3d4f577",
        "filename": "src/bench/rpc_blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b788bbd837059927fa11cd6a688d6a1f864c20de/src/bench/rpc_blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b788bbd837059927fa11cd6a688d6a1f864c20de/src/bench/rpc_blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/rpc_blockchain.cpp?ref=b788bbd837059927fa11cd6a688d6a1f864c20de",
        "patch": "@@ -40,7 +40,7 @@ static void BlockToJsonVerbose(benchmark::Bench& bench)\n {\n     TestBlockAndIndex data;\n     bench.run([&] {\n-        auto univalue = blockToJSON(data.block, &data.blockindex, &data.blockindex, /*verbose*/ true);\n+        auto univalue = blockToJSON(data.block, &data.blockindex, &data.blockindex, TxVerbosity::SHOW_DETAILS);\n         ankerl::nanobench::doNotOptimizeAway(univalue);\n     });\n }\n@@ -50,7 +50,7 @@ BENCHMARK(BlockToJsonVerbose);\n static void BlockToJsonVerboseWrite(benchmark::Bench& bench)\n {\n     TestBlockAndIndex data;\n-    auto univalue = blockToJSON(data.block, &data.blockindex, &data.blockindex, /*verbose*/ true);\n+    auto univalue = blockToJSON(data.block, &data.blockindex, &data.blockindex, TxVerbosity::SHOW_DETAILS);\n     bench.run([&] {\n         auto str = univalue.write();\n         ankerl::nanobench::doNotOptimizeAway(str);"
      },
      {
        "sha": "653fd1dc771a9c87ae4d5b8eb508b140d0baf75d",
        "filename": "src/core_io.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b788bbd837059927fa11cd6a688d6a1f864c20de/src/core_io.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b788bbd837059927fa11cd6a688d6a1f864c20de/src/core_io.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_io.h?ref=b788bbd837059927fa11cd6a688d6a1f864c20de",
        "patch": "@@ -20,6 +20,11 @@ class uint256;\n class UniValue;\n class CTxUndo;\n \n+enum class TxVerbosity {\n+    SHOW_TXID,\n+    SHOW_DETAILS\n+};\n+\n // core_read.cpp\n CScript ParseScript(const std::string& s);\n std::string ScriptToAsmStr(const CScript& script, const bool fAttemptSighashDecode = false);"
      },
      {
        "sha": "d442a5e9fbdb76f1338e4d2c6b7b3f66f54744c9",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b788bbd837059927fa11cd6a688d6a1f864c20de/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b788bbd837059927fa11cd6a688d6a1f864c20de/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=b788bbd837059927fa11cd6a688d6a1f864c20de",
        "patch": "@@ -260,7 +260,7 @@ static bool rest_headers(const std::any& context,\n static bool rest_block(const std::any& context,\n                        HTTPRequest* req,\n                        const std::string& strURIPart,\n-                       bool showTxDetails)\n+                       TxVerbosity tx_verbosity)\n {\n     if (!CheckWarmup(req))\n         return false;\n@@ -312,7 +312,7 @@ static bool rest_block(const std::any& context,\n     }\n \n     case RetFormat::JSON: {\n-        UniValue objBlock = blockToJSON(block, tip, pblockindex, showTxDetails);\n+        UniValue objBlock = blockToJSON(block, tip, pblockindex, tx_verbosity);\n         std::string strJSON = objBlock.write() + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"application/json\");\n         req->WriteReply(HTTP_OK, strJSON);\n@@ -327,12 +327,12 @@ static bool rest_block(const std::any& context,\n \n static bool rest_block_extended(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n {\n-    return rest_block(context, req, strURIPart, true);\n+    return rest_block(context, req, strURIPart, TxVerbosity::SHOW_DETAILS);\n }\n \n static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n {\n-    return rest_block(context, req, strURIPart, false);\n+    return rest_block(context, req, strURIPart, TxVerbosity::SHOW_TXID);\n }\n \n // A bit of a hack - dependency on a function defined in rpc/blockchain.cpp"
      },
      {
        "sha": "c1bffcc80c2c48e947e93405be1cb81e524d4d65",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 18,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b788bbd837059927fa11cd6a688d6a1f864c20de/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b788bbd837059927fa11cd6a688d6a1f864c20de/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=b788bbd837059927fa11cd6a688d6a1f864c20de",
        "patch": "@@ -199,30 +199,36 @@ UniValue blockheaderToJSON(const CBlockIndex* tip, const CBlockIndex* blockindex\n     return result;\n }\n \n-UniValue blockToJSON(const CBlock& block, const CBlockIndex* tip, const CBlockIndex* blockindex, bool txDetails)\n+UniValue blockToJSON(const CBlock& block, const CBlockIndex* tip, const CBlockIndex* blockindex, TxVerbosity verbosity)\n {\n     UniValue result = blockheaderToJSON(tip, blockindex);\n \n     result.pushKV(\"strippedsize\", (int)::GetSerializeSize(block, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS));\n     result.pushKV(\"size\", (int)::GetSerializeSize(block, PROTOCOL_VERSION));\n     result.pushKV(\"weight\", (int)::GetBlockWeight(block));\n     UniValue txs(UniValue::VARR);\n-    if (txDetails) {\n-        CBlockUndo blockUndo;\n-        const bool have_undo = !IsBlockPruned(blockindex) && UndoReadFromDisk(blockUndo, blockindex);\n-        for (size_t i = 0; i < block.vtx.size(); ++i) {\n-            const CTransactionRef& tx = block.vtx.at(i);\n-            // coinbase transaction (i == 0) doesn't have undo data\n-            const CTxUndo* txundo = (have_undo && i) ? &blockUndo.vtxundo.at(i - 1) : nullptr;\n-            UniValue objTx(UniValue::VOBJ);\n-            TxToUniv(*tx, uint256(), objTx, true, RPCSerializationFlags(), txundo);\n-            txs.push_back(objTx);\n-        }\n-    } else {\n-        for (const CTransactionRef& tx : block.vtx) {\n-            txs.push_back(tx->GetHash().GetHex());\n-        }\n+\n+    switch (verbosity) {\n+        case TxVerbosity::SHOW_TXID:\n+            for (const CTransactionRef& tx : block.vtx) {\n+                txs.push_back(tx->GetHash().GetHex());\n+            }\n+            break;\n+\n+        case TxVerbosity::SHOW_DETAILS:\n+            CBlockUndo blockUndo;\n+            const bool have_undo = !IsBlockPruned(blockindex) && UndoReadFromDisk(blockUndo, blockindex);\n+\n+            for (size_t i = 0; i < block.vtx.size(); ++i) {\n+                const CTransactionRef& tx = block.vtx.at(i);\n+                // coinbase transaction (i == 0) doesn't have undo data\n+                const CTxUndo* txundo = (have_undo && i) ? &blockUndo.vtxundo.at(i - 1) : nullptr;\n+                UniValue objTx(UniValue::VOBJ);\n+                TxToUniv(*tx, uint256(), objTx, true, RPCSerializationFlags(), txundo);\n+                txs.push_back(objTx);\n+            }\n     }\n+\n     result.pushKV(\"tx\", txs);\n \n     return result;\n@@ -930,7 +936,7 @@ static RPCHelpMan getblock()\n     return RPCHelpMan{\"getblock\",\n                 \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'hash'.\\n\"\n                 \"If verbosity is 1, returns an Object with information about block <hash>.\\n\"\n-                \"If verbosity is 2, returns an Object with information about block <hash> and information about each transaction. \\n\",\n+                \"If verbosity is 2, returns an Object with information about block <hash> and information about each transaction.\\n\",\n                 {\n                     {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The block hash\"},\n                     {\"verbosity|verbose\", RPCArg::Type::NUM, RPCArg::Default{1}, \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n@@ -1017,7 +1023,14 @@ static RPCHelpMan getblock()\n         return strHex;\n     }\n \n-    return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n+    TxVerbosity block_to_json_verbosity;\n+    if (verbosity == 1) {\n+        block_to_json_verbosity = TxVerbosity::SHOW_TXID;\n+    } else {\n+        block_to_json_verbosity = TxVerbosity::SHOW_DETAILS;\n+    }\n+\n+    return blockToJSON(block, tip, pblockindex, block_to_json_verbosity);\n },\n     };\n }"
      },
      {
        "sha": "4d0362f62fe63224396b30a2cf5ec492fcb8f11e",
        "filename": "src/rpc/blockchain.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b788bbd837059927fa11cd6a688d6a1f864c20de/src/rpc/blockchain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b788bbd837059927fa11cd6a688d6a1f864c20de/src/rpc/blockchain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.h?ref=b788bbd837059927fa11cd6a688d6a1f864c20de",
        "patch": "@@ -39,7 +39,7 @@ double GetDifficulty(const CBlockIndex* blockindex);\n void RPCNotifyBlockChange(const CBlockIndex*);\n \n /** Block description to JSON */\n-UniValue blockToJSON(const CBlock& block, const CBlockIndex* tip, const CBlockIndex* blockindex, bool txDetails = false) LOCKS_EXCLUDED(cs_main);\n+UniValue blockToJSON(const CBlock& block, const CBlockIndex* tip, const CBlockIndex* blockindex, TxVerbosity verbosity = TxVerbosity::SHOW_TXID) LOCKS_EXCLUDED(cs_main);\n \n /** Mempool information to JSON */\n UniValue MempoolInfoToJSON(const CTxMemPool& pool);"
      }
    ]
  },
  {
    "sha": "b702a1fb2e3873d9413afa00008c33c22022796e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNzAyYTFmYjJlMzg3M2Q5NDEzYWZhMDAwMDhjMzNjMjIwMjI3OTZl",
    "commit": {
      "author": {
        "name": "fyquah",
        "email": "fyquah@protonmail.com",
        "date": "2021-02-27T17:39:09Z"
      },
      "committer": {
        "name": "fyquah",
        "email": "fyquah@protonmail.com",
        "date": "2021-08-03T22:09:12Z"
      },
      "message": "rpc: Add level 3 verbosity to getblock RPC call.\n\nDisplay the prevout in transaction inputs when calling getblock level 3\nverbosity.\n\nCo-authored-by: Luke Dashjr <luke_github1@dashjr.org>\nCo-authored-by: 0xB10C <19157360+0xB10C@users.noreply.github.com>",
      "tree": {
        "sha": "a8174b5e85d3584edccbb29afd3eb5547f0129d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a8174b5e85d3584edccbb29afd3eb5547f0129d1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b702a1fb2e3873d9413afa00008c33c22022796e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b702a1fb2e3873d9413afa00008c33c22022796e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b702a1fb2e3873d9413afa00008c33c22022796e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b702a1fb2e3873d9413afa00008c33c22022796e/comments",
    "author": {
      "login": "fyquah",
      "id": 6006469,
      "node_id": "MDQ6VXNlcjYwMDY0Njk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6006469?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fyquah",
      "html_url": "https://github.com/fyquah",
      "followers_url": "https://api.github.com/users/fyquah/followers",
      "following_url": "https://api.github.com/users/fyquah/following{/other_user}",
      "gists_url": "https://api.github.com/users/fyquah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fyquah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fyquah/subscriptions",
      "organizations_url": "https://api.github.com/users/fyquah/orgs",
      "repos_url": "https://api.github.com/users/fyquah/repos",
      "events_url": "https://api.github.com/users/fyquah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fyquah/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fyquah",
      "id": 6006469,
      "node_id": "MDQ6VXNlcjYwMDY0Njk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6006469?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fyquah",
      "html_url": "https://github.com/fyquah",
      "followers_url": "https://api.github.com/users/fyquah/followers",
      "following_url": "https://api.github.com/users/fyquah/following{/other_user}",
      "gists_url": "https://api.github.com/users/fyquah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fyquah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fyquah/subscriptions",
      "organizations_url": "https://api.github.com/users/fyquah/orgs",
      "repos_url": "https://api.github.com/users/fyquah/repos",
      "events_url": "https://api.github.com/users/fyquah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fyquah/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b788bbd837059927fa11cd6a688d6a1f864c20de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b788bbd837059927fa11cd6a688d6a1f864c20de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b788bbd837059927fa11cd6a688d6a1f864c20de"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 39,
      "deletions": 15
    },
    "files": [
      {
        "sha": "3bef64f720066e157ce5dffa4e3a34eb0ba764b6",
        "filename": "src/bench/rpc_blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b702a1fb2e3873d9413afa00008c33c22022796e/src/bench/rpc_blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b702a1fb2e3873d9413afa00008c33c22022796e/src/bench/rpc_blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/rpc_blockchain.cpp?ref=b702a1fb2e3873d9413afa00008c33c22022796e",
        "patch": "@@ -40,7 +40,7 @@ static void BlockToJsonVerbose(benchmark::Bench& bench)\n {\n     TestBlockAndIndex data;\n     bench.run([&] {\n-        auto univalue = blockToJSON(data.block, &data.blockindex, &data.blockindex, TxVerbosity::SHOW_DETAILS);\n+        auto univalue = blockToJSON(data.block, &data.blockindex, &data.blockindex, TxVerbosity::SHOW_DETAILS_AND_PREVOUT);\n         ankerl::nanobench::doNotOptimizeAway(univalue);\n     });\n }\n@@ -50,7 +50,7 @@ BENCHMARK(BlockToJsonVerbose);\n static void BlockToJsonVerboseWrite(benchmark::Bench& bench)\n {\n     TestBlockAndIndex data;\n-    auto univalue = blockToJSON(data.block, &data.blockindex, &data.blockindex, TxVerbosity::SHOW_DETAILS);\n+    auto univalue = blockToJSON(data.block, &data.blockindex, &data.blockindex, TxVerbosity::SHOW_DETAILS_AND_PREVOUT);\n     bench.run([&] {\n         auto str = univalue.write();\n         ankerl::nanobench::doNotOptimizeAway(str);"
      },
      {
        "sha": "f8e81146ff8edb552034bb8c90042b358b68d37f",
        "filename": "src/core_io.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b702a1fb2e3873d9413afa00008c33c22022796e/src/core_io.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b702a1fb2e3873d9413afa00008c33c22022796e/src/core_io.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_io.h?ref=b702a1fb2e3873d9413afa00008c33c22022796e",
        "patch": "@@ -22,7 +22,8 @@ class CTxUndo;\n \n enum class TxVerbosity {\n     SHOW_TXID,\n-    SHOW_DETAILS\n+    SHOW_DETAILS,\n+    SHOW_DETAILS_AND_PREVOUT\n };\n \n // core_read.cpp\n@@ -51,6 +52,6 @@ std::string EncodeHexTx(const CTransaction& tx, const int serializeFlags = 0);\n std::string SighashToStr(unsigned char sighash_type);\n void ScriptPubKeyToUniv(const CScript& scriptPubKey, UniValue& out, bool fIncludeHex, bool include_addresses);\n void ScriptToUniv(const CScript& script, UniValue& out, bool include_address);\n-void TxToUniv(const CTransaction& tx, const uint256& hashBlock, bool include_addresses, UniValue& entry, bool include_hex = true, int serialize_flags = 0, const CTxUndo* txundo = nullptr);\n+void TxToUniv(const CTransaction& tx, const uint256& hashBlock, bool include_addresses, UniValue& entry, bool include_hex = true, int serialize_flags = 0, const CTxUndo* txundo = nullptr, TxVerbosity verbosity = TxVerbosity::SHOW_DETAILS);\n \n #endif // BITCOIN_CORE_IO_H"
      },
      {
        "sha": "586f58b1d4efe2e4b057b49b73fcaf1863ffdb46",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 2,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b702a1fb2e3873d9413afa00008c33c22022796e/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b702a1fb2e3873d9413afa00008c33c22022796e/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=b702a1fb2e3873d9413afa00008c33c22022796e",
        "patch": "@@ -190,7 +190,7 @@ void ScriptPubKeyToUniv(const CScript& scriptPubKey,\n     }\n }\n \n-void TxToUniv(const CTransaction& tx, const uint256& hashBlock, bool include_addresses, UniValue& entry, bool include_hex, int serialize_flags, const CTxUndo* txundo)\n+void TxToUniv(const CTransaction& tx, const uint256& hashBlock, bool include_addresses, UniValue& entry, bool include_hex, int serialize_flags, const CTxUndo* txundo, TxVerbosity verbosity)\n {\n     entry.pushKV(\"txid\", tx.GetHash().GetHex());\n     entry.pushKV(\"hash\", tx.GetWitnessHash().GetHex());\n@@ -231,8 +231,27 @@ void TxToUniv(const CTransaction& tx, const uint256& hashBlock, bool include_add\n             in.pushKV(\"txinwitness\", txinwitness);\n         }\n         if (calculate_fee) {\n-            const CTxOut& prev_txout = txundo->vprevout[i].out;\n+            const Coin& prev_coin = txundo->vprevout[i];\n+            const CTxOut& prev_txout = prev_coin.out;\n+\n             amt_total_in += prev_txout.nValue;\n+            switch (verbosity) {\n+                case TxVerbosity::SHOW_TXID:\n+                case TxVerbosity::SHOW_DETAILS:\n+                    break;\n+\n+                case TxVerbosity::SHOW_DETAILS_AND_PREVOUT:\n+                    UniValue o_script_pub_key(UniValue::VOBJ);\n+                    ScriptPubKeyToUniv(prev_txout.scriptPubKey, o_script_pub_key, /* includeHex */ true, /* include_addresses */ true);\n+\n+                    UniValue p(UniValue::VOBJ);\n+                    p.pushKV(\"generated\", bool(prev_coin.fCoinBase));\n+                    p.pushKV(\"height\", uint64_t(prev_coin.nHeight));\n+                    p.pushKV(\"value\", ValueFromAmount(prev_txout.nValue));\n+                    p.pushKV(\"scriptPubKey\", o_script_pub_key);\n+                    in.pushKV(\"prevout\", p);\n+                    break;\n+            }\n         }\n         in.pushKV(\"sequence\", (int64_t)txin.nSequence);\n         vin.push_back(in);"
      },
      {
        "sha": "e21fd8dad5b0f8859846a55dcf35c1cd1baeebe8",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b702a1fb2e3873d9413afa00008c33c22022796e/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b702a1fb2e3873d9413afa00008c33c22022796e/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=b702a1fb2e3873d9413afa00008c33c22022796e",
        "patch": "@@ -327,7 +327,7 @@ static bool rest_block(const std::any& context,\n \n static bool rest_block_extended(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n {\n-    return rest_block(context, req, strURIPart, TxVerbosity::SHOW_DETAILS);\n+    return rest_block(context, req, strURIPart, TxVerbosity::SHOW_DETAILS_AND_PREVOUT);\n }\n \n static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, const std::string& strURIPart)"
      },
      {
        "sha": "7788131a288c75d529beb6cd573b393c0673dc1d",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 6,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b702a1fb2e3873d9413afa00008c33c22022796e/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b702a1fb2e3873d9413afa00008c33c22022796e/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=b702a1fb2e3873d9413afa00008c33c22022796e",
        "patch": "@@ -216,15 +216,16 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* tip, const CBlockIn\n             break;\n \n         case TxVerbosity::SHOW_DETAILS:\n+        case TxVerbosity::SHOW_DETAILS_AND_PREVOUT:\n             CBlockUndo blockUndo;\n             const bool have_undo = !IsBlockPruned(blockindex) && UndoReadFromDisk(blockUndo, blockindex);\n \n             for (size_t i = 0; i < block.vtx.size(); ++i) {\n                 const CTransactionRef& tx = block.vtx.at(i);\n                 // coinbase transaction (i == 0) doesn't have undo data\n-                const CTxUndo* txundo = (have_undo && i) ? &blockUndo.vtxundo.at(i - 1) : nullptr;\n+                const CTxUndo* txundo = (have_undo && i > 0) ? &blockUndo.vtxundo.at(i - 1) : nullptr;\n                 UniValue objTx(UniValue::VOBJ);\n-                TxToUniv(*tx, uint256(), objTx, true, RPCSerializationFlags(), txundo);\n+                TxToUniv(*tx, uint256(), objTx, true, RPCSerializationFlags(), txundo, verbosity);\n                 txs.push_back(objTx);\n             }\n     }\n@@ -936,7 +937,8 @@ static RPCHelpMan getblock()\n     return RPCHelpMan{\"getblock\",\n                 \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'hash'.\\n\"\n                 \"If verbosity is 1, returns an Object with information about block <hash>.\\n\"\n-                \"If verbosity is 2, returns an Object with information about block <hash> and information about each transaction.\\n\",\n+                \"If verbosity is 2, returns an Object with information about block <hash> and information about each transaction.\\n\"\n+                \"If verbosity is 3, returns an Object with information about block <hash> and information about each transaction, including prevout information for inputs (only for unpruned blocks in the current best chain).\\n\",\n                 {\n                     {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The block hash\"},\n                     {\"verbosity|verbose\", RPCArg::Type::NUM, RPCArg::Default{1}, \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n@@ -1026,8 +1028,10 @@ static RPCHelpMan getblock()\n     TxVerbosity block_to_json_verbosity;\n     if (verbosity == 1) {\n         block_to_json_verbosity = TxVerbosity::SHOW_TXID;\n-    } else {\n+    } else if (verbosity == 2) {\n         block_to_json_verbosity = TxVerbosity::SHOW_DETAILS;\n+    } else {\n+        block_to_json_verbosity = TxVerbosity::SHOW_DETAILS_AND_PREVOUT;\n     }\n \n     return blockToJSON(block, tip, pblockindex, block_to_json_verbosity);\n@@ -1950,9 +1954,9 @@ void ScriptPubKeyToUniv(const CScript& scriptPubKey, UniValue& out, bool fInclud\n     ScriptPubKeyToUniv(scriptPubKey, out, fIncludeHex, IsDeprecatedRPCEnabled(\"addresses\"));\n }\n \n-void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry, bool include_hex, int serialize_flags, const CTxUndo* txundo)\n+void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry, bool include_hex, int serialize_flags, const CTxUndo* txundo, TxVerbosity verbosity)\n {\n-    TxToUniv(tx, hashBlock, IsDeprecatedRPCEnabled(\"addresses\"), entry, include_hex, serialize_flags, txundo);\n+    TxToUniv(tx, hashBlock, IsDeprecatedRPCEnabled(\"addresses\"), entry, include_hex, serialize_flags, txundo, verbosity);\n }\n \n template<typename T>"
      },
      {
        "sha": "a4f00f2d17dbfcf0ec8997a12e9d810411bb1a0c",
        "filename": "src/rpc/blockchain.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b702a1fb2e3873d9413afa00008c33c22022796e/src/rpc/blockchain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b702a1fb2e3873d9413afa00008c33c22022796e/src/rpc/blockchain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.h?ref=b702a1fb2e3873d9413afa00008c33c22022796e",
        "patch": "@@ -39,7 +39,7 @@ double GetDifficulty(const CBlockIndex* blockindex);\n void RPCNotifyBlockChange(const CBlockIndex*);\n \n /** Block description to JSON */\n-UniValue blockToJSON(const CBlock& block, const CBlockIndex* tip, const CBlockIndex* blockindex, TxVerbosity verbosity = TxVerbosity::SHOW_TXID) LOCKS_EXCLUDED(cs_main);\n+UniValue blockToJSON(const CBlock& block, const CBlockIndex* tip, const CBlockIndex* blockindex, TxVerbosity verbosity) LOCKS_EXCLUDED(cs_main);\n \n /** Mempool information to JSON */\n UniValue MempoolInfoToJSON(const CTxMemPool& pool);\n@@ -54,7 +54,7 @@ UniValue blockheaderToJSON(const CBlockIndex* tip, const CBlockIndex* blockindex\n void CalculatePercentilesByWeight(CAmount result[NUM_GETBLOCKSTATS_PERCENTILES], std::vector<std::pair<CAmount, int64_t>>& scores, int64_t total_weight);\n \n void ScriptPubKeyToUniv(const CScript& scriptPubKey, UniValue& out, bool fIncludeHex);\n-void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry, bool include_hex = true, int serialize_flags = 0, const CTxUndo* txundo = nullptr);\n+void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry, bool include_hex = true, int serialize_flags = 0, const CTxUndo* txundo = nullptr, TxVerbosity verbosity = TxVerbosity::SHOW_DETAILS);\n \n NodeContext& EnsureAnyNodeContext(const std::any& context);\n CTxMemPool& EnsureMemPool(const NodeContext& node);"
      }
    ]
  },
  {
    "sha": "65571bda12e01fa37f82cd5781cdd1fbe04b24b7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NTU3MWJkYTEyZTAxZmEzN2Y4MmNkNTc4MWNkZDFmYmUwNGIyNGI3",
    "commit": {
      "author": {
        "name": "fyquah",
        "email": "fyquah@protonmail.com",
        "date": "2021-02-27T14:19:32Z"
      },
      "committer": {
        "name": "fyquah",
        "email": "fyquah@protonmail.com",
        "date": "2021-08-03T22:09:13Z"
      },
      "message": "rpc: Add test for level 3 verbosity getblock rpc call.",
      "tree": {
        "sha": "049c975a82d8898decf8dd8268a49afcc6abb41d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/049c975a82d8898decf8dd8268a49afcc6abb41d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65571bda12e01fa37f82cd5781cdd1fbe04b24b7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65571bda12e01fa37f82cd5781cdd1fbe04b24b7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/65571bda12e01fa37f82cd5781cdd1fbe04b24b7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65571bda12e01fa37f82cd5781cdd1fbe04b24b7/comments",
    "author": {
      "login": "fyquah",
      "id": 6006469,
      "node_id": "MDQ6VXNlcjYwMDY0Njk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6006469?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fyquah",
      "html_url": "https://github.com/fyquah",
      "followers_url": "https://api.github.com/users/fyquah/followers",
      "following_url": "https://api.github.com/users/fyquah/following{/other_user}",
      "gists_url": "https://api.github.com/users/fyquah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fyquah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fyquah/subscriptions",
      "organizations_url": "https://api.github.com/users/fyquah/orgs",
      "repos_url": "https://api.github.com/users/fyquah/repos",
      "events_url": "https://api.github.com/users/fyquah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fyquah/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fyquah",
      "id": 6006469,
      "node_id": "MDQ6VXNlcjYwMDY0Njk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6006469?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fyquah",
      "html_url": "https://github.com/fyquah",
      "followers_url": "https://api.github.com/users/fyquah/followers",
      "following_url": "https://api.github.com/users/fyquah/following{/other_user}",
      "gists_url": "https://api.github.com/users/fyquah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fyquah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fyquah/subscriptions",
      "organizations_url": "https://api.github.com/users/fyquah/orgs",
      "repos_url": "https://api.github.com/users/fyquah/repos",
      "events_url": "https://api.github.com/users/fyquah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fyquah/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b702a1fb2e3873d9413afa00008c33c22022796e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b702a1fb2e3873d9413afa00008c33c22022796e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b702a1fb2e3873d9413afa00008c33c22022796e"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 53,
      "deletions": 13
    },
    "files": [
      {
        "sha": "8e6dc950c8ca712803b92a6040d542f3c35aeed5",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 53,
        "deletions": 13,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65571bda12e01fa37f82cd5781cdd1fbe04b24b7/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65571bda12e01fa37f82cd5781cdd1fbe04b24b7/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=65571bda12e01fa37f82cd5781cdd1fbe04b24b7",
        "patch": "@@ -412,17 +412,55 @@ def _test_getblock(self):\n         miniwallet.send_self_transfer(fee_rate=fee_per_kb, from_node=node)\n         blockhash = node.generate(1)[0]\n \n-        self.log.info(\"Test getblock with verbosity 1 doesn't include fee\")\n-        block = node.getblock(blockhash, 1)\n-        assert 'fee' not in block['tx'][1]\n-\n-        self.log.info('Test getblock with verbosity 2 includes expected fee')\n-        block = node.getblock(blockhash, 2)\n-        tx = block['tx'][1]\n-        assert 'fee' in tx\n-        assert_equal(tx['fee'], tx['vsize'] * fee_per_byte)\n-\n-        self.log.info(\"Test getblock with verbosity 2 still works with pruned Undo data\")\n+        def assert_fee_not_in_block(verbosity):\n+            block = node.getblock(blockhash, verbosity)\n+            assert 'fee' not in block['tx'][1]\n+\n+        def assert_fee_in_block(verbosity):\n+            block = node.getblock(blockhash, verbosity)\n+            tx = block['tx'][1]\n+            assert 'fee' in tx\n+            assert_equal(tx['fee'], tx['vsize'] * fee_per_byte)\n+\n+        def assert_vin_contains_prevout(verbosity):\n+            block = node.getblock(blockhash, verbosity)\n+            tx = block[\"tx\"][1]\n+            total_vin = 0\n+            total_vout = 0\n+            for vin in tx[\"vin\"]:\n+                assert \"prevout\" in vin\n+                assert_equal(set(vin[\"prevout\"].keys()), set((\"value\", \"height\", \"generated\", \"scriptPubKey\")))\n+                assert_equal(vin[\"prevout\"][\"generated\"], True)\n+                total_vin += vin[\"prevout\"][\"value\"]\n+            for vout in tx[\"vout\"]:\n+                total_vout += vout[\"value\"]\n+            assert_equal(total_vin, total_vout + tx[\"fee\"])\n+\n+        def assert_vin_does_not_contain_prevout(verbosity):\n+            block = node.getblock(blockhash, verbosity)\n+            tx = block[\"tx\"][1]\n+            if isinstance(tx, str):\n+                # In verbosity level 1, only the transaction hashes are written\n+                pass\n+            else:\n+                for vin in tx[\"vin\"]:\n+                    assert \"prevout\" not in vin\n+\n+        self.log.info(\"Test that getblock with verbosity 1 doesn't include fee\")\n+        assert_fee_not_in_block(1)\n+\n+        self.log.info('Test that getblock with verbosity 2 and 3 includes expected fee')\n+        assert_fee_in_block(2)\n+        assert_fee_in_block(3)\n+\n+        self.log.info(\"Test that getblock with verbosity 1 and 2 does not include prevout\")\n+        assert_vin_does_not_contain_prevout(1)\n+        assert_vin_does_not_contain_prevout(2)\n+\n+        self.log.info(\"Test that getblock with verbosity 3 includes prevout\")\n+        assert_vin_contains_prevout(3)\n+\n+        self.log.info(\"Test that getblock with verbosity 2 and 3 still works with pruned Undo data\")\n         datadir = get_datadir_path(self.options.tmpdir, 0)\n \n         self.log.info(\"Test getblock with invalid verbosity type returns proper error message\")\n@@ -436,8 +474,10 @@ def move_block_file(old, new):\n         # Move instead of deleting so we can restore chain state afterwards\n         move_block_file('rev00000.dat', 'rev_wrong')\n \n-        block = node.getblock(blockhash, 2)\n-        assert 'fee' not in block['tx'][1]\n+        assert_fee_not_in_block(2)\n+        assert_fee_not_in_block(3)\n+        assert_vin_does_not_contain_prevout(2)\n+        assert_vin_does_not_contain_prevout(3)\n \n         # Restore chain state\n         move_block_file('rev_wrong', 'rev00000.dat')"
      }
    ]
  },
  {
    "sha": "8b215ebf4a2db93dc932ccdc41dc9a2893ac8063",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YjIxNWViZjRhMmRiOTNkYzkzMmNjZGM0MWRjOWEyODkzYWM4MDYz",
    "commit": {
      "author": {
        "name": "fyquah",
        "email": "fyquah@protonmail.com",
        "date": "2021-02-27T18:18:41Z"
      },
      "committer": {
        "name": "fyquah",
        "email": "fyquah@protonmail.com",
        "date": "2021-08-03T22:09:13Z"
      },
      "message": "rest: Add test for prevout fields in getblock",
      "tree": {
        "sha": "ff11078b87cbacfc12f60f5a79c73b82ba75e839",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff11078b87cbacfc12f60f5a79c73b82ba75e839"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8b215ebf4a2db93dc932ccdc41dc9a2893ac8063",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b215ebf4a2db93dc932ccdc41dc9a2893ac8063",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8b215ebf4a2db93dc932ccdc41dc9a2893ac8063",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b215ebf4a2db93dc932ccdc41dc9a2893ac8063/comments",
    "author": {
      "login": "fyquah",
      "id": 6006469,
      "node_id": "MDQ6VXNlcjYwMDY0Njk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6006469?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fyquah",
      "html_url": "https://github.com/fyquah",
      "followers_url": "https://api.github.com/users/fyquah/followers",
      "following_url": "https://api.github.com/users/fyquah/following{/other_user}",
      "gists_url": "https://api.github.com/users/fyquah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fyquah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fyquah/subscriptions",
      "organizations_url": "https://api.github.com/users/fyquah/orgs",
      "repos_url": "https://api.github.com/users/fyquah/repos",
      "events_url": "https://api.github.com/users/fyquah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fyquah/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fyquah",
      "id": 6006469,
      "node_id": "MDQ6VXNlcjYwMDY0Njk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6006469?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fyquah",
      "html_url": "https://github.com/fyquah",
      "followers_url": "https://api.github.com/users/fyquah/followers",
      "following_url": "https://api.github.com/users/fyquah/following{/other_user}",
      "gists_url": "https://api.github.com/users/fyquah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fyquah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fyquah/subscriptions",
      "organizations_url": "https://api.github.com/users/fyquah/orgs",
      "repos_url": "https://api.github.com/users/fyquah/repos",
      "events_url": "https://api.github.com/users/fyquah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fyquah/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "65571bda12e01fa37f82cd5781cdd1fbe04b24b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65571bda12e01fa37f82cd5781cdd1fbe04b24b7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/65571bda12e01fa37f82cd5781cdd1fbe04b24b7"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ebcced6aaa73449812874b7572ae5d6e6dd93234",
        "filename": "test/functional/interface_rest.py",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b215ebf4a2db93dc932ccdc41dc9a2893ac8063/test/functional/interface_rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b215ebf4a2db93dc932ccdc41dc9a2893ac8063/test/functional/interface_rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rest.py?ref=8b215ebf4a2db93dc932ccdc41dc9a2893ac8063",
        "patch": "@@ -312,6 +312,16 @@ def run_test(self):\n                             if 'coinbase' not in tx['vin'][0]}\n         assert_equal(non_coinbase_txs, set(txs))\n \n+        # Verify that the non-coinbase tx has \"prevout\" field set\n+        for tx_obj in json_obj[\"tx\"]:\n+            for vin in tx_obj[\"vin\"]:\n+                if \"coinbase\" not in vin:\n+                    assert \"prevout\" in vin\n+                    prevout = vin[\"prevout\"]\n+                    assert_equal(prevout[\"generated\"], False)\n+                else:\n+                    assert \"prevout\" not in vin\n+\n         # Check the same but without tx details\n         json_obj = self.test_rest_request(\"/block/notxdetails/{}\".format(newblockhash[0]))\n         for tx in txs:"
      }
    ]
  },
  {
    "sha": "c1be00d2958b631e6b36b102874ffc08a3491a3a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMWJlMDBkMjk1OGI2MzFlNmIzNmIxMDI4NzRmZmMwOGEzNDkxYTNh",
    "commit": {
      "author": {
        "name": "fyquah",
        "email": "fyquah@protonmail.com",
        "date": "2021-07-16T15:57:24Z"
      },
      "committer": {
        "name": "fyquah",
        "email": "fyquah@protonmail.com",
        "date": "2021-08-03T22:09:13Z"
      },
      "message": "release-notes: Add release note about getblock verbosity level 3.",
      "tree": {
        "sha": "4f02bb89eff7bb2d09b3bf1942a8ba17a4cc136f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f02bb89eff7bb2d09b3bf1942a8ba17a4cc136f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c1be00d2958b631e6b36b102874ffc08a3491a3a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1be00d2958b631e6b36b102874ffc08a3491a3a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c1be00d2958b631e6b36b102874ffc08a3491a3a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1be00d2958b631e6b36b102874ffc08a3491a3a/comments",
    "author": {
      "login": "fyquah",
      "id": 6006469,
      "node_id": "MDQ6VXNlcjYwMDY0Njk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6006469?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fyquah",
      "html_url": "https://github.com/fyquah",
      "followers_url": "https://api.github.com/users/fyquah/followers",
      "following_url": "https://api.github.com/users/fyquah/following{/other_user}",
      "gists_url": "https://api.github.com/users/fyquah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fyquah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fyquah/subscriptions",
      "organizations_url": "https://api.github.com/users/fyquah/orgs",
      "repos_url": "https://api.github.com/users/fyquah/repos",
      "events_url": "https://api.github.com/users/fyquah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fyquah/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fyquah",
      "id": 6006469,
      "node_id": "MDQ6VXNlcjYwMDY0Njk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6006469?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fyquah",
      "html_url": "https://github.com/fyquah",
      "followers_url": "https://api.github.com/users/fyquah/followers",
      "following_url": "https://api.github.com/users/fyquah/following{/other_user}",
      "gists_url": "https://api.github.com/users/fyquah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fyquah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fyquah/subscriptions",
      "organizations_url": "https://api.github.com/users/fyquah/orgs",
      "repos_url": "https://api.github.com/users/fyquah/repos",
      "events_url": "https://api.github.com/users/fyquah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fyquah/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8b215ebf4a2db93dc932ccdc41dc9a2893ac8063",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b215ebf4a2db93dc932ccdc41dc9a2893ac8063",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8b215ebf4a2db93dc932ccdc41dc9a2893ac8063"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9c2e4cc8a1db3db04f8f2616805145e4e127750e",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1be00d2958b631e6b36b102874ffc08a3491a3a/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1be00d2958b631e6b36b102874ffc08a3491a3a/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=c1be00d2958b631e6b36b102874ffc08a3491a3a",
        "patch": "@@ -60,6 +60,15 @@ P2P and network changes\n Updated RPCs\n ------------\n \n+- The `getblock` RPC command now supports verbose level 3 containing transaction inputs\n+  `prevout` information.  The existing `/rest/block/` REST endpoint is modified to contain\n+  this information too. Every `vin` field will contain an additional `prevout` subfield\n+  describing the spent output. `prevout` contains the following keys:\n+  - `generated` - true if the spent coins was a coinbase.\n+  - `height`\n+  - `value`\n+  - `scriptPubKey`\n+\n New RPCs\n --------\n "
      }
    ]
  },
  {
    "sha": "72dbe9816482d46c63168109c8745d3ec615b031",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MmRiZTk4MTY0ODJkNDZjNjMxNjgxMDljODc0NWQzZWM2MTViMDMx",
    "commit": {
      "author": {
        "name": "fyquah",
        "email": "fyquah@protonmail.com",
        "date": "2021-08-03T22:00:31Z"
      },
      "committer": {
        "name": "fyquah",
        "email": "fyquah@protonmail.com",
        "date": "2021-08-03T22:09:13Z"
      },
      "message": "core_write: Rename calculate_fee to have_undo for clarity",
      "tree": {
        "sha": "decdc73e524448d434093f37e7fa7a6bdd1cf291",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/decdc73e524448d434093f37e7fa7a6bdd1cf291"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/72dbe9816482d46c63168109c8745d3ec615b031",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72dbe9816482d46c63168109c8745d3ec615b031",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/72dbe9816482d46c63168109c8745d3ec615b031",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72dbe9816482d46c63168109c8745d3ec615b031/comments",
    "author": {
      "login": "fyquah",
      "id": 6006469,
      "node_id": "MDQ6VXNlcjYwMDY0Njk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6006469?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fyquah",
      "html_url": "https://github.com/fyquah",
      "followers_url": "https://api.github.com/users/fyquah/followers",
      "following_url": "https://api.github.com/users/fyquah/following{/other_user}",
      "gists_url": "https://api.github.com/users/fyquah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fyquah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fyquah/subscriptions",
      "organizations_url": "https://api.github.com/users/fyquah/orgs",
      "repos_url": "https://api.github.com/users/fyquah/repos",
      "events_url": "https://api.github.com/users/fyquah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fyquah/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fyquah",
      "id": 6006469,
      "node_id": "MDQ6VXNlcjYwMDY0Njk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6006469?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fyquah",
      "html_url": "https://github.com/fyquah",
      "followers_url": "https://api.github.com/users/fyquah/followers",
      "following_url": "https://api.github.com/users/fyquah/following{/other_user}",
      "gists_url": "https://api.github.com/users/fyquah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fyquah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fyquah/subscriptions",
      "organizations_url": "https://api.github.com/users/fyquah/orgs",
      "repos_url": "https://api.github.com/users/fyquah/repos",
      "events_url": "https://api.github.com/users/fyquah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fyquah/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c1be00d2958b631e6b36b102874ffc08a3491a3a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1be00d2958b631e6b36b102874ffc08a3491a3a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c1be00d2958b631e6b36b102874ffc08a3491a3a"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "4ed66a65a6ffd8bdbba4acd56b368429aa3484fb",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/72dbe9816482d46c63168109c8745d3ec615b031/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/72dbe9816482d46c63168109c8745d3ec615b031/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=72dbe9816482d46c63168109c8745d3ec615b031",
        "patch": "@@ -206,7 +206,7 @@ void TxToUniv(const CTransaction& tx, const uint256& hashBlock, bool include_add\n \n     // If available, use Undo data to calculate the fee. Note that txundo == nullptr\n     // for coinbase transactions and for transactions where undo data is unavailable.\n-    const bool calculate_fee = txundo != nullptr;\n+    const bool have_undo = txundo != nullptr;\n     CAmount amt_total_in = 0;\n     CAmount amt_total_out = 0;\n \n@@ -230,7 +230,7 @@ void TxToUniv(const CTransaction& tx, const uint256& hashBlock, bool include_add\n             }\n             in.pushKV(\"txinwitness\", txinwitness);\n         }\n-        if (calculate_fee) {\n+        if (have_undo) {\n             const Coin& prev_coin = txundo->vprevout[i];\n             const CTxOut& prev_txout = prev_coin.out;\n \n@@ -272,13 +272,13 @@ void TxToUniv(const CTransaction& tx, const uint256& hashBlock, bool include_add\n         out.pushKV(\"scriptPubKey\", o);\n         vout.push_back(out);\n \n-        if (calculate_fee) {\n+        if (have_undo) {\n             amt_total_out += txout.nValue;\n         }\n     }\n     entry.pushKV(\"vout\", vout);\n \n-    if (calculate_fee) {\n+    if (have_undo) {\n         const CAmount fee = amt_total_in - amt_total_out;\n         CHECK_NONFATAL(MoneyRange(fee));\n         entry.pushKV(\"fee\", ValueFromAmount(fee));"
      }
    ]
  }
]