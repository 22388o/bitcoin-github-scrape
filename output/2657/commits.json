[
  {
    "sha": "a824121eb8458350a2c4f7c64601a9d1b41425c9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphODI0MTIxZWI4NDU4MzUwYTJjNGY3YzY0NjAxYTlkMWI0MTQyNWM5",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2013-05-16T20:27:21Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2013-05-16T20:34:01Z"
      },
      "message": "It's after 2013-05-15 forever now, so remove the code for the May 15 fork.",
      "tree": {
        "sha": "663dacbe9d193f278bd940557a0b7ba1e53b2d85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/663dacbe9d193f278bd940557a0b7ba1e53b2d85"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a824121eb8458350a2c4f7c64601a9d1b41425c9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a824121eb8458350a2c4f7c64601a9d1b41425c9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a824121eb8458350a2c4f7c64601a9d1b41425c9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a824121eb8458350a2c4f7c64601a9d1b41425c9/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5b5d399593adbdf8b9b4fb49ef39d51d4eac03cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b5d399593adbdf8b9b4fb49ef39d51d4eac03cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5b5d399593adbdf8b9b4fb49ef39d51d4eac03cd"
      }
    ],
    "stats": {
      "total": 190,
      "additions": 0,
      "deletions": 190
    },
    "files": [
      {
        "sha": "a5aec641ce3cd8d66a3bfc3d0d9794306457a75f",
        "filename": "contrib/test-patches/temp-revert-1.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 21,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b5d399593adbdf8b9b4fb49ef39d51d4eac03cd/contrib/test-patches/temp-revert-1.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b5d399593adbdf8b9b4fb49ef39d51d4eac03cd/contrib/test-patches/temp-revert-1.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/test-patches/temp-revert-1.patch?ref=5b5d399593adbdf8b9b4fb49ef39d51d4eac03cd",
        "patch": "@@ -1,21 +0,0 @@\n-commit 4dcc8701ac0eb09d8992d19fb411cee3c9aaf394\n-Author: Matt Corallo <git@bluematt.me>\n-Date:   Sun Mar 24 20:45:44 2013 -0400\n-\n-    Revert \"Update unit test to match rule enforcement starts 21 March\"\n-    \n-    This reverts commit d3e8c6a9d3fad68b0eee4434401ec7b3066399a2.\n-\n-diff --git a/src/test/checkblock_tests.cpp b/src/test/checkblock_tests.cpp\n-index 3cfb6db..e167def 100644\n---- a/src/test/checkblock_tests.cpp\n-+++ b/src/test/checkblock_tests.cpp\n-@@ -52,7 +52,7 @@ BOOST_AUTO_TEST_CASE(May15)\n-     if (read_block(\"Mar12Fork.dat\", forkingBlock))\n-     {\n-         CValidationState state;\n--        forkingBlock.nTime = tMay15-1; // Invalidates PoW\n-+        BOOST_CHECK(!forkingBlock.CheckBlock(state, true, true));\n-         BOOST_CHECK(!forkingBlock.CheckBlock(state, false, false));\n- \n-         // After May 15'th, big blocks are OK:"
      },
      {
        "sha": "5c0775dfa58a6af51a1813577b4f92c1808dd666",
        "filename": "contrib/test-patches/temp-revert-3.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 34,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b5d399593adbdf8b9b4fb49ef39d51d4eac03cd/contrib/test-patches/temp-revert-3.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b5d399593adbdf8b9b4fb49ef39d51d4eac03cd/contrib/test-patches/temp-revert-3.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/test-patches/temp-revert-3.patch?ref=5b5d399593adbdf8b9b4fb49ef39d51d4eac03cd",
        "patch": "@@ -1,34 +0,0 @@\n-commit ba84709c65b911798ddae1285d807f4cd036990d\n-Author: Matt Corallo <git@bluematt.me>\n-Date:   Sun Mar 24 20:45:56 2013 -0400\n-\n-    Revert \"Before 15 May, limit created block size to 500K\"\n-    \n-    This reverts commit 402f19b64530775a7e4ded025c80d8c16a55e454.\n-\n-diff --git a/src/main.cpp b/src/main.cpp\n-index 22baf0f..51ada0a 100644\n---- a/src/main.cpp\n-+++ b/src/main.cpp\n-@@ -2057,8 +2057,8 @@ bool CBlock::CheckBlock(CValidationState &state, bool fCheckPOW, bool fCheckMerk\n-         return state.DoS(100, error(\"CheckBlock() : size limits failed\"));\n- \n-     // Special short-term limits to avoid 10,000 BDB lock limit:\n--    if (GetBlockTime() >= 1363867200 && // start enforcing 21 March 2013, noon GMT\n--        GetBlockTime() < 1368576000)  // stop enforcing 15 May 2013 00:00:00\n-+    if (GetBlockTime() > 1363039171 && // 11 March 2013, timestamp of block before the big fork\n-+        GetBlockTime() < 1368576000)  // 15 May 2013 00:00:00\n-     {\n-         // Rule is: #unique txids referenced <= 4,500\n-         // ... to prevent 10,000 BDB lock exhaustion on old clients\n-@@ -4155,10 +4155,6 @@ CBlockTemplate* CreateNewBlock(CReserveKey& reservekey)\n-     // Limit to betweeen 1K and MAX_BLOCK_SIZE-1K for sanity:\n-     nBlockMaxSize = std::max((unsigned int)1000, std::min((unsigned int)(MAX_BLOCK_SIZE-1000), nBlockMaxSize));\n- \n--    // Special compatibility rule before 15 May: limit size to 500,000 bytes:\n--    if (GetAdjustedTime() < 1368576000)\n--        nBlockMaxSize = std::min(nBlockMaxSize, (unsigned int)(MAX_BLOCK_SIZE_GEN));\n--\n-     // How much of the block should be dedicated to high-priority transactions,\n-     // included regardless of the fees they pay\n-     unsigned int nBlockPrioritySize = GetArg(\"-blockprioritysize\", 27000);"
      },
      {
        "sha": "f93d7549c0a13a5cceb069765b289f4b0b50b9e2",
        "filename": "contrib/test-patches/temp-revert-4.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 110,
        "changes": 110,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b5d399593adbdf8b9b4fb49ef39d51d4eac03cd/contrib/test-patches/temp-revert-4.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b5d399593adbdf8b9b4fb49ef39d51d4eac03cd/contrib/test-patches/temp-revert-4.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/test-patches/temp-revert-4.patch?ref=5b5d399593adbdf8b9b4fb49ef39d51d4eac03cd",
        "patch": "@@ -1,110 +0,0 @@\n-commit ca96b88b61f647d4f56d5d06321dda08a43bf92f\n-Author: Matt Corallo <git@bluematt.me>\n-Date:   Sun Mar 24 20:46:01 2013 -0400\n-\n-    Revert \"CheckBlock rule until 15-May for 10,000 BDB lock compatibility\"\n-    \n-    This reverts commit 8c222dca4f961ad13ec64d690134a40d09b20813.\n-\n-diff --git a/src/main.cpp b/src/main.cpp\n-index 51ada0a..9a06dbf 100644\n---- a/src/main.cpp\n-+++ b/src/main.cpp\n-@@ -2056,25 +2056,6 @@ bool CBlock::CheckBlock(CValidationState &state, bool fCheckPOW, bool fCheckMerk\n-     if (vtx.empty() || vtx.size() > MAX_BLOCK_SIZE || ::GetSerializeSize(*this, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n-         return state.DoS(100, error(\"CheckBlock() : size limits failed\"));\n- \n--    // Special short-term limits to avoid 10,000 BDB lock limit:\n--    if (GetBlockTime() > 1363039171 && // 11 March 2013, timestamp of block before the big fork\n--        GetBlockTime() < 1368576000)  // 15 May 2013 00:00:00\n--    {\n--        // Rule is: #unique txids referenced <= 4,500\n--        // ... to prevent 10,000 BDB lock exhaustion on old clients\n--        set<uint256> setTxIn;\n--        for (size_t i = 0; i < vtx.size(); i++)\n--        {\n--            setTxIn.insert(vtx[i].GetHash());\n--            if (i == 0) continue; // skip coinbase txin\n--            BOOST_FOREACH(const CTxIn& txin, vtx[i].vin)\n--                setTxIn.insert(txin.prevout.hash);\n--        }\n--        size_t nTxids = setTxIn.size();\n--        if (nTxids > 4500)\n--            return error(\"CheckBlock() : 15 May maxlocks violation\");\n--    }\n--\n-     // Check proof of work matches claimed amount\n-     if (fCheckPOW && !CheckProofOfWork(GetHash(), nBits))\n-         return state.DoS(50, error(\"CheckBlock() : proof of work failed\"));\n-diff --git a/src/test/checkblock_tests.cpp b/src/test/checkblock_tests.cpp\n-deleted file mode 100644\n-index e167def..0000000\n---- a/src/test/checkblock_tests.cpp\n-+++ /dev/null\n-@@ -1,66 +0,0 @@\n--//\n--// Unit tests for block.CheckBlock()\n--//\n--#include <algorithm>\n--\n--#include <boost/assign/list_of.hpp> // for 'map_list_of()'\n--#include <boost/date_time/posix_time/posix_time_types.hpp>\n--#include <boost/test/unit_test.hpp>\n--#include <boost/foreach.hpp>\n--\n--#include \"main.h\"\n--#include \"wallet.h\"\n--#include \"net.h\"\n--#include \"util.h\"\n--\n--BOOST_AUTO_TEST_SUITE(CheckBlock_tests)\n--\n--bool\n--read_block(const std::string& filename, CBlock& block)\n--{\n--    namespace fs = boost::filesystem;\n--    fs::path testFile = fs::current_path() / \"test\" / \"data\" / filename;\n--#ifdef TEST_DATA_DIR\n--    if (!fs::exists(testFile))\n--    {\n--        testFile = fs::path(BOOST_PP_STRINGIZE(TEST_DATA_DIR)) / filename;\n--    }\n--#endif\n--    FILE* fp = fopen(testFile.string().c_str(), \"rb\");\n--    if (!fp) return false;\n--\n--    fseek(fp, 8, SEEK_SET); // skip msgheader/size\n--\n--    CAutoFile filein = CAutoFile(fp, SER_DISK, CLIENT_VERSION);\n--    if (!filein) return false;\n--\n--    filein >> block;\n--\n--    return true;\n--}\n--\n--BOOST_AUTO_TEST_CASE(May15)\n--{\n--    // Putting a 1MB binary file in the git repository is not a great\n--    // idea, so this test is only run if you manually download\n--    // test/data/Mar12Fork.dat from\n--    // http://sourceforge.net/projects/bitcoin/files/Bitcoin/blockchain/Mar12Fork.dat/download\n--    unsigned int tMay15 = 1368576000;\n--    SetMockTime(tMay15); // Test as if it was right at May 15\n--\n--    CBlock forkingBlock;\n--    if (read_block(\"Mar12Fork.dat\", forkingBlock))\n--    {\n--        CValidationState state;\n--        BOOST_CHECK(!forkingBlock.CheckBlock(state, true, true));\n--        BOOST_CHECK(!forkingBlock.CheckBlock(state, false, false));\n--\n--        // After May 15'th, big blocks are OK:\n--        forkingBlock.nTime = tMay15; // Invalidates PoW\n--        BOOST_CHECK(forkingBlock.CheckBlock(state, false, false));\n--    }\n--\n--    SetMockTime(0);\n--}\n--\n--BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "0560208956122cd58799340b6359b096d5ce1223",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 23,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a824121eb8458350a2c4f7c64601a9d1b41425c9/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a824121eb8458350a2c4f7c64601a9d1b41425c9/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a824121eb8458350a2c4f7c64601a9d1b41425c9",
        "patch": "@@ -2076,25 +2076,6 @@ bool CBlock::CheckBlock(CValidationState &state, bool fCheckPOW, bool fCheckMerk\n     if (vtx.empty() || vtx.size() > MAX_BLOCK_SIZE || ::GetSerializeSize(*this, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n         return state.DoS(100, error(\"CheckBlock() : size limits failed\"));\n \n-    // Special short-term limits to avoid 10,000 BDB lock limit:\n-    if (GetBlockTime() >= 1363867200 && // start enforcing 21 March 2013, noon GMT\n-        GetBlockTime() < 1368576000)  // stop enforcing 15 May 2013 00:00:00\n-    {\n-        // Rule is: #unique txids referenced <= 4,500\n-        // ... to prevent 10,000 BDB lock exhaustion on old clients\n-        set<uint256> setTxIn;\n-        for (size_t i = 0; i < vtx.size(); i++)\n-        {\n-            setTxIn.insert(vtx[i].GetHash());\n-            if (i == 0) continue; // skip coinbase txin\n-            BOOST_FOREACH(const CTxIn& txin, vtx[i].vin)\n-                setTxIn.insert(txin.prevout.hash);\n-        }\n-        size_t nTxids = setTxIn.size();\n-        if (nTxids > 4500)\n-            return error(\"CheckBlock() : 15 May maxlocks violation\");\n-    }\n-\n     // Check proof of work matches claimed amount\n     if (fCheckPOW && !CheckProofOfWork(GetHash(), nBits))\n         return state.DoS(50, error(\"CheckBlock() : proof of work failed\"));\n@@ -4191,10 +4172,6 @@ CBlockTemplate* CreateNewBlock(CReserveKey& reservekey)\n     // Limit to betweeen 1K and MAX_BLOCK_SIZE-1K for sanity:\n     nBlockMaxSize = std::max((unsigned int)1000, std::min((unsigned int)(MAX_BLOCK_SIZE-1000), nBlockMaxSize));\n \n-    // Special compatibility rule before 15 May: limit size to 500,000 bytes:\n-    if (GetAdjustedTime() < 1368576000)\n-        nBlockMaxSize = std::min(nBlockMaxSize, (unsigned int)(MAX_BLOCK_SIZE_GEN));\n-\n     // How much of the block should be dedicated to high-priority transactions,\n     // included regardless of the fees they pay\n     unsigned int nBlockPrioritySize = GetArg(\"-blockprioritysize\", 27000);"
      },
      {
        "sha": "d626f9a6f43e3e9b8a8a0b266d10ac35e5a3ba94",
        "filename": "src/test/checkblock_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a824121eb8458350a2c4f7c64601a9d1b41425c9/src/test/checkblock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a824121eb8458350a2c4f7c64601a9d1b41425c9/src/test/checkblock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkblock_tests.cpp?ref=a824121eb8458350a2c4f7c64601a9d1b41425c9",
        "patch": "@@ -52,8 +52,6 @@ BOOST_AUTO_TEST_CASE(May15)\n     if (read_block(\"Mar12Fork.dat\", forkingBlock))\n     {\n         CValidationState state;\n-        forkingBlock.nTime = tMay15-1; // Invalidates PoW\n-        BOOST_CHECK(!forkingBlock.CheckBlock(state, false, false));\n \n         // After May 15'th, big blocks are OK:\n         forkingBlock.nTime = tMay15; // Invalidates PoW"
      }
    ]
  }
]