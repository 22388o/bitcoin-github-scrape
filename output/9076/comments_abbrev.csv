ryanofsky,2016-11-03T22:41:37Z,"Possibly dumb question but to be sure I am understanding the change correctly: In pure SPV mode, this will still download and store full blocks for everything after the oldest key-birthday?\n",https://github.com/bitcoin/bitcoin/pull/9076#issuecomment-258295814,258295814,
jonasschnelli,2016-11-04T07:21:28Z,"> Possibly dumb question but to be sure I am understanding the change correctly: In pure SPV mode, this will still download and store full blocks for everything after the oldest key-birthday?\n\nYes.\nA next step could be to support BIP37 bloom filter against authenticated nodes (once we have BIP150).\nBIP37 has huge privacy implication while this PRs full block SPV mode does not.\n\nRight now the",https://github.com/bitcoin/bitcoin/pull/9076#issuecomment-258360541,258360541,
jonasschnelli,2016-11-04T09:39:01Z,"`getwalletinfo` reports the SPV sync state:\n\n```\n{\n  ""walletversion"": 130000,\n  ""balance"": 10.00000000,\n  ""unconfirmed_balance"": 0.00000000,\n  ""immature_balance"": 0.00000000,\n  ""txcount"": 1,\n  ""keypoololdest"": 1478202465,\n  ""keypoolsize"": 10,\n  ""paytxfee"": 0.00000010,\n  ""hdmasterkeyid"": ""fc2f268240531df6890b66f53141606b7f1f091b"",\n  ""spv"": {\n    ""enabled"": true,\n    ""hybrid_mode"": fa",https://github.com/bitcoin/bitcoin/pull/9076#issuecomment-258383543,258383543,
ryanofsky,2016-11-04T14:37:56Z,"What are major things that need to be done to finalize this change? Are making hybrid SPV mode compatible with pruning, and improving reorg handling critical parts of this change, or would they be future improvements? Looking through the code, there are lots of minor things I could comment on, but I'm assuming I should hold off if you're mainly looking for ""conceptual review"" right now from core d",https://github.com/bitcoin/bitcoin/pull/9076#issuecomment-258448467,258448467,
jonasschnelli,2016-11-04T14:46:41Z,"> What are major things that need to be done to finalize this change? Are making hybrid SPV mode compatible with pruning, and improving reorg handling critical parts of this change, or would they be future improvements? Looking through the code, there are lots of minor things I could comment on, but I'm assuming I should hold off if you're mainly looking for ""conceptual review"" right now from core",https://github.com/bitcoin/bitcoin/pull/9076#issuecomment-258450775,258450775,
dooglus,2016-11-04T17:00:54Z,"@ryanofsky \n\n> but at the cost of revealing some information about the age of addresses in the wallet to peers on the network\n\nThe bigger cost is that the wallet could end up downloading a completely fake chain, since it isn't anchored to the genesis block. Presumably the client has no idea what block height or difficulty to expect and so evil peers could feed the SPV client minimum difficulty",https://github.com/bitcoin/bitcoin/pull/9076#issuecomment-258488676,258488676,
ghost,2016-11-04T22:02:35Z,We've done this 6 months ago in Vcash and will be deploying it soon (ZeroLedger). With the extensions we call it SPV+. Let us know if we can help. 👍\n,https://github.com/bitcoin/bitcoin/pull/9076#issuecomment-258558710,258558710,
jonasschnelli,2016-11-05T21:34:58Z,@ryanofsky \nThanks for the feedback! Will work myself through it next week.\n\n> but at the cost of revealing some information about the age of addresses in the wallet to peers on the network\n\nWhy would your peer reveal information about the age of his keys? We are downloading blocks from different peers and I don't see a possibility to meaningful track ages of the wallets keys because they way,https://github.com/bitcoin/bitcoin/pull/9076#issuecomment-258642234,258642234,
rebroad,2016-11-06T13:35:48Z,@john-connor can you post a link to any code you think would be useful please?\n,https://github.com/bitcoin/bitcoin/pull/9076#issuecomment-258681226,258681226,
jonasschnelli,2016-11-09T07:31:59Z,Binaries are available here: https://bitcoin.jonasschnelli.ch/pulls/9076/\n,https://github.com/bitcoin/bitcoin/pull/9076#issuecomment-259350360,259350360,
mruddy,2016-11-28T11:29:45Z,"@jonasschnelli Conceptually, I'm not for putting the ability to change the node's security model into Core's code base right now. To me, this client should target being a fully validating node. Otherwise, the code will become more complex and difficult to reason about. I hope this does not come across as throwing stones because that's not how I mean it. Coincidentally, I thought a lot about this r",https://github.com/bitcoin/bitcoin/pull/9076#issuecomment-263248392,263248392,
sipa,2016-11-28T19:18:14Z,"@mruddy That's a fair view, and probably one that is shared by some contributors. Let me offer some other perspective, though.\n\nI believe that conceptually, in the long term, the Bitcoin Core wallet should be more isolated and separated from the node/consensus logic. I'm unsure what this will mean for organization of code base, but at least it should run as a separate process for security reas",https://github.com/bitcoin/bitcoin/pull/9076#issuecomment-263366183,263366183,
mruddy,2016-11-29T02:03:32Z,"@sipa Thanks for the additional insight. I can see that. The node security model is distinct from the wallet security model. The longer term goal of wallet-node separation seems appealing.\n\nI'm still concerned about keeping complexity down while maintaining these logical separations in a single repo.\n\nFor example, do you think it would be valid feedback for the current patch that changes t",https://github.com/bitcoin/bitcoin/pull/9076#issuecomment-263454808,263454808,
rebroad,2016-12-11T13:03:03Z,So is this a step towards being able to run bitcoind as a NETWORK_NODE and run bitcoin-qt as an SPV client connecting to it (and trusting it)?,https://github.com/bitcoin/bitcoin/pull/9076#issuecomment-266280862,266280862,
jtimon,2016-12-15T04:03:57Z,needs rebase,https://github.com/bitcoin/bitcoin/pull/9076#issuecomment-267233346,267233346,
rebroad,2016-12-30T07:00:29Z,What would be involved in getting with working with pruned-node ability also? And why not make it download all the headers so that it is at least connect to the genesis block as suggested by @dooglus ?,https://github.com/bitcoin/bitcoin/pull/9076#issuecomment-269739281,269739281,
jonasschnelli,2017-01-24T13:10:52Z,Closing in favour of #9483,https://github.com/bitcoin/bitcoin/pull/9076#issuecomment-274798707,274798707,
ryanofsky,2016-11-04T14:56:24Z,Remove unused split argument?\n,https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86562135,86562135,qa/rpc-tests/walletspv.py
ryanofsky,2016-11-04T14:56:38Z,Seems unused\n,https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86562184,86562184,qa/rpc-tests/walletspv.py
ryanofsky,2016-11-04T14:59:20Z,Can this be dropped? Number of nodes seems to change during the test.\n,https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86562817,86562817,qa/rpc-tests/walletspv.py
ryanofsky,2016-11-04T15:00:13Z,Unused?\n,https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86562993,86562993,qa/rpc-tests/walletspv.py
ryanofsky,2016-11-04T15:13:59Z,Sleep probably deserves comment if sync_spv and sync_blocks (in util.py) aren't enough to be able to remove it.\n,https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86566087,86566087,qa/rpc-tests/walletspv.py
ryanofsky,2016-11-04T15:21:53Z,"Curious, why stop 1st node here, instead of just starting a 4th node? Is it to make sure the wallet file is synced to disk? Probably good to have a little comment here describing this part of the test.\n",https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86567884,86567884,qa/rpc-tests/walletspv.py
ryanofsky,2016-11-04T15:23:57Z,Check len(lt) is 1?\n,https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86568366,86568366,qa/rpc-tests/walletspv.py
ryanofsky,2016-11-04T15:24:09Z,Check len(lt)?\n,https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86568416,86568416,qa/rpc-tests/walletspv.py
ryanofsky,2016-11-04T15:32:41Z,"Not sure, but maybe it's possible to test this by starting up a new hybrid SPV node with a wallet and no chain data and seeing which blocks it first requests using a stub peer. The `test_getblocktxn_requests` and `test_compactblock_requests` tests in `p2p-compactblocks.py` do something like this using a custom `TestNode` peer.\n",https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86570301,86570301,qa/rpc-tests/walletspv.py
ryanofsky,2016-11-04T15:32:59Z,Check len(lt)?\n,https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86570358,86570358,qa/rpc-tests/walletspv.py
ryanofsky,2016-11-04T15:33:42Z,Spelling of cancelled.\n,https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86570531,86570531,src/blockrequest.cpp
ryanofsky,2016-11-04T15:34:19Z,s/multithread save/thread-safe\n,https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86570686,86570686,src/blockrequest.cpp
ryanofsky,2016-11-04T15:52:04Z,Since bitcoin is using c++11 can you just initialize these in the header?\n,https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86574526,86574526,src/blockrequest.cpp
ryanofsky,2016-11-04T16:05:46Z,Should be size_t\n,https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86577850,86577850,src/blockrequest.cpp
rebroad,2016-11-04T16:20:18Z,"this is not quite right English and I don't understand what it is saying. Do you mean ""we haven't already downloaded this block nor do we have its data""?\n\n""we don't"" tends to mean ""we should not"".\n",https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86580666,86580666,src/blockrequest.cpp
ryanofsky,2016-11-04T16:48:20Z,Maybe instead of a break just add vBlocks.size() < count as a condition in the for loop. I think that would make it clearer what count is supposed to represent (maximum number of blocks ever allowed in vBlocks as opposed to some limit associated with block state).\n,https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86586389,86586389,src/blockrequest.cpp
ryanofsky,2016-11-04T16:52:59Z,Can omit nulls since this defines default arguments.\n,https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86587229,86587229,src/blockrequest.cpp
ryanofsky,2016-11-04T16:59:59Z,"Maybe call this something like SyncDownloadedTransactions. Since the purpose of this function is to invoke the SyncTransaction signal, seems like it should be named similarly to the signal.\n",https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86588729,86588729,src/blockrequest.h
ryanofsky,2016-11-04T17:04:21Z,Should be const (the member function).\n,https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86589553,86589553,src/blockrequest.cpp
ryanofsky,2016-11-04T17:08:49Z,"Should be const, I think.\n\nAlso might rename fillInNextBlocks to getNextBlocks to be clearer that this is returning information about the next blocks in the request, not changing the next blocks in the request.\n",https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86590493,86590493,src/blockrequest.cpp
ryanofsky,2016-11-04T17:10:08Z,"Should be const, and probably use size_t. Also maybe change ""loaded"" in the name to ""downloaded"" or ""have data"" to be consistent with other names here (""loaded"" by itself is kind of vague).\n",https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86590719,86590719,src/blockrequest.cpp
ryanofsky,2016-11-04T17:10:32Z,Should be size_t\n,https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86590787,86590787,src/blockrequest.cpp
ryanofsky,2016-11-04T17:33:33Z,Could do vBlocksToDownload(std::move(vBlocksToDownloadIn)) to avoid copying vector.\n,https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86595525,86595525,src/blockrequest.cpp
ryanofsky,2016-11-04T17:38:51Z,"Would be nice to name the variable after the command line argument it comes from (currently ""-spvonly"", possibly something else like ""partial sync"" in the future).\n",https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86596587,86596587,src/main.cpp
ryanofsky,2016-11-04T17:40:41Z,Extra whitespace.\n,https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86596969,86596969,src/main.cpp
ryanofsky,2016-11-04T17:52:39Z,Maybe s/check mapBlocksInFlight/exclude blocks in flight/ to be more specific. (I had thought it was doing the opposite the first time reading this).\n,https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86599461,86599461,src/main.cpp
ryanofsky,2016-11-04T18:31:24Z,"Relying on this fHeadersChain argument here is bugging me (the argument is optional and defaults to false), since it seems easy for callers to screw up. I think it would be best to either make it a mandatory argument and/or provide some overload like the following, that would pass in the right value automatically for callers:\n\n```\nbool CheckFinal(const CMerkleTx& mtx, int flags=-1)\n{\n  return",https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86607005,86607005,src/main.cpp
ryanofsky,2016-11-07T14:55:50Z,Maybe this could be called NotifyHeaderTip instead of UpdatedBlockHeaderTip? It doesn't seem good to have two different but confusingly similar names for this.\n,https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86790811,86790811,src/main.cpp
ryanofsky,2016-11-07T18:36:22Z,New variable seems to be unused. Could you continue to pass null to MarkBlockAsInFlight instead of this? Probably deserves comment if this variable is actually being used in some unseen way.\n,https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86838373,86838373,src/main.cpp
ryanofsky,2016-11-07T18:47:57Z,"Having validated default true seems less safe than having validated default false, or not having a default at all.\n\nAlso it seems like validated == !fSpv. Seems like this argument could be changed to an fSpv, or the other fSpv's could be changed to validated variables for more consistency.\n",https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86840752,86840752,src/validationinterface.h
ryanofsky,2016-11-07T18:49:16Z,Variable is unused.\n,https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86841043,86841043,src/wallet/wallet.cpp
ryanofsky,2016-11-07T18:52:20Z,Should be DEFAULT_ENABLE_PURE_SPV\n,https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86841670,86841670,src/wallet/wallet.cpp
ryanofsky,2016-11-07T18:52:49Z,Should be DEFAULT_ENABLE_PURE_SPV (for -spvonly)\n,https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86841759,86841759,src/wallet/wallet.cpp
ryanofsky,2016-11-07T20:00:11Z,"Can pindexNew ever be null? If if it is null, should fReOrg always be true in this case, or should fReorg only be true if bestSpvBlockHash is null? Comment might be useful to clarify.\n\nIf pIndexNew should never be null, would suggest either asserting this or changing the while to a do-while, and removing the ""pindexNew && ..."" check below.\n",https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86856212,86856212,src/wallet/wallet.cpp
ryanofsky,2016-11-07T20:02:37Z,"This while loop duplicates the loop above (even masking the pCurrent variable), maybe both loops could be replaced with a new FindPrevBlockWithHash(uint256) function call.\n",https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86856702,86856702,src/wallet/wallet.cpp
ryanofsky,2016-11-07T20:09:13Z,Why is it significant that the txn is SPV? Isn't any transaction that's been reorged away be no longer confirmed? Might be good to have a comment on this here.\n,https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86857881,86857881,src/wallet/wallet.cpp
ryanofsky,2016-11-07T20:11:55Z,;\n,https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86858376,86858376,src/wallet/wallet.cpp
ryanofsky,2016-11-07T20:14:01Z,It'd be good to say what best means in a comment. \n,https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86858734,86858734,src/wallet/wallet.h
ryanofsky,2016-11-07T20:22:06Z,Above you are acquiring a lock when you read the nBestSpvHeight variable. Is it not necessary to have a lock when writing the same variable?\n,https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86860221,86860221,src/wallet/wallet.cpp
ryanofsky,2016-11-07T20:24:03Z,Is this actually supposed to be bestSPVBlockHeight not nBestSpvHeight? Why compare against previous height instead of current? If this is intended would suggest adding a comment to explain and also renaming bestSPVBlockHeight to previousBestSPVBlockHeight to make clear this is supposed to be the previous height.\n,https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86860556,86860556,src/wallet/wallet.cpp
ryanofsky,2016-11-07T20:45:30Z,"I don't understand in general what the resend wallet transaction code is for, and probably this isn't the place to explain it, but it might be nice to have a comment here saying how the SPV condition relates.\n",https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86864580,86864580,src/wallet/wallet.cpp
jonasschnelli,2016-11-08T14:29:34Z,"Thanks, will change.\n",https://github.com/bitcoin/bitcoin/pull/9076#discussion_r86998508,86998508,src/blockrequest.cpp
