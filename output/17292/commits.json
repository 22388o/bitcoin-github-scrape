[
  {
    "sha": "b0c774b48a3198584e61429ef053844bdde2f9ae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMGM3NzRiNDhhMzE5ODU4NGU2MTQyOWVmMDUzODQ0YmRkZTJmOWFl",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2019-10-28T22:56:27Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2019-10-28T22:58:48Z"
      },
      "message": "Add new mempool benchmarks for a complex pool",
      "tree": {
        "sha": "f6e64117de7adb22ab76817722ee0a480bc583ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f6e64117de7adb22ab76817722ee0a480bc583ae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b0c774b48a3198584e61429ef053844bdde2f9ae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0c774b48a3198584e61429ef053844bdde2f9ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b0c774b48a3198584e61429ef053844bdde2f9ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0c774b48a3198584e61429ef053844bdde2f9ae/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "36604b4ef568aaf131f11c2b10e8c39e7a04b464",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36604b4ef568aaf131f11c2b10e8c39e7a04b464",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/36604b4ef568aaf131f11c2b10e8c39e7a04b464"
      }
    ],
    "stats": {
      "total": 94,
      "additions": 94,
      "deletions": 0
    },
    "files": [
      {
        "sha": "12e09fb464a6d59e07bf284beb6aa115ab301b6c",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0c774b48a3198584e61429ef053844bdde2f9ae/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0c774b48a3198584e61429ef053844bdde2f9ae/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=b0c774b48a3198584e61429ef053844bdde2f9ae",
        "patch": "@@ -30,6 +30,7 @@ bench_bench_bitcoin_SOURCES = \\\n   bench/gcs_filter.cpp \\\n   bench/merkle_root.cpp \\\n   bench/mempool_eviction.cpp \\\n+  bench/mempool_stress.cpp \\\n   bench/rpc_blockchain.cpp \\\n   bench/rpc_mempool.cpp \\\n   bench/util_time.cpp \\"
      },
      {
        "sha": "a42ffaae62e3698176c814a64184bdd19972e082",
        "filename": "src/bench/mempool_stress.cpp",
        "status": "added",
        "additions": 93,
        "deletions": 0,
        "changes": 93,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0c774b48a3198584e61429ef053844bdde2f9ae/src/bench/mempool_stress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0c774b48a3198584e61429ef053844bdde2f9ae/src/bench/mempool_stress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/mempool_stress.cpp?ref=b0c774b48a3198584e61429ef053844bdde2f9ae",
        "patch": "@@ -0,0 +1,93 @@\n+// Copyright (c) 2011-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+#include <policy/policy.h>\n+#include <txmempool.h>\n+\n+#include <vector>\n+\n+static void AddTx(const CTransactionRef& tx, CTxMemPool& pool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, pool.cs)\n+{\n+    int64_t nTime = 0;\n+    unsigned int nHeight = 1;\n+    bool spendsCoinbase = false;\n+    unsigned int sigOpCost = 4;\n+    LockPoints lp;\n+    pool.addUnchecked(CTxMemPoolEntry(tx, 1000, nTime, nHeight, spendsCoinbase, sigOpCost, lp));\n+}\n+\n+struct Available {\n+    CTransactionRef ref;\n+    size_t vin_left{0};\n+    size_t tx_count;\n+    Available(CTransactionRef& ref, size_t tx_count) : ref(ref), tx_count(tx_count){}\n+    Available& operator=(Available other) {\n+        ref = other.ref;\n+        vin_left = other.vin_left;\n+        tx_count = other.tx_count;\n+        return *this;\n+    }\n+};\n+\n+static void ComplexMemPool(benchmark::State& state)\n+{\n+    FastRandomContext det_rand{true};\n+    std::vector<Available> available_coins;\n+    std::vector<CTransactionRef> ordered_coins;\n+    // Create some base transactions\n+    size_t tx_counter = 1;\n+    for (auto x = 0; x < 100; ++x) {\n+        CMutableTransaction tx = CMutableTransaction();\n+        tx.vin.resize(1);\n+        tx.vin[0].scriptSig = CScript() << CScriptNum(tx_counter);\n+        tx.vin[0].scriptWitness.stack.push_back(CScriptNum(x).getvch());\n+        tx.vout.resize(det_rand.randrange(10)+2);\n+        for (auto& out : tx.vout) {\n+            out.scriptPubKey = CScript() << CScriptNum(tx_counter) << OP_EQUAL;\n+            out.nValue = 10 * COIN;\n+        }\n+        ordered_coins.emplace_back(MakeTransactionRef(tx));\n+        available_coins.emplace_back(ordered_coins.back(), tx_counter++);\n+    }\n+    for (auto x = 0; x < 800 && !available_coins.empty(); ++x) {\n+        CMutableTransaction tx = CMutableTransaction();\n+        size_t n_ancestors = det_rand.randrange(10)+1;\n+        for (size_t ancestor = 0; ancestor < n_ancestors && !available_coins.empty(); ++ancestor){\n+            size_t idx = det_rand.randrange(available_coins.size());\n+            Available coin = available_coins[idx];\n+            uint256 hash = coin.ref->GetHash();\n+            // biased towards taking just one ancestor, but maybe more\n+            size_t n_to_take = det_rand.randrange(2) == 0 ? 1 : 1+det_rand.randrange(coin.ref->vout.size() - coin.vin_left);\n+            for (size_t i = 0; i < n_to_take; ++i) {\n+                tx.vin.emplace_back();\n+                tx.vin.back().prevout = COutPoint(hash, coin.vin_left++);\n+                tx.vin.back().scriptSig = CScript() << coin.tx_count;\n+                tx.vin.back().scriptWitness.stack.push_back(CScriptNum(coin.tx_count).getvch());\n+            }\n+            if  (coin.vin_left == coin.ref->vin.size()) {\n+                coin = available_coins.back();\n+                available_coins.pop_back();\n+            }\n+            tx.vout.resize(det_rand.randrange(10)+2);\n+            for (auto& out : tx.vout) {\n+                out.scriptPubKey = CScript() << CScriptNum(tx_counter) << OP_EQUAL;\n+                out.nValue = 10 * COIN;\n+            }\n+        }\n+        ordered_coins.emplace_back(MakeTransactionRef(tx));\n+        available_coins.emplace_back(ordered_coins.back(), tx_counter++);\n+    }\n+    CTxMemPool pool;\n+    LOCK2(cs_main, pool.cs);\n+    while (state.KeepRunning()) {\n+        for (auto& tx : ordered_coins) {\n+            AddTx(tx, pool);\n+        }\n+        pool.TrimToSize(pool.DynamicMemoryUsage() * 3 / 4);\n+        pool.TrimToSize(GetVirtualTransactionSize(*ordered_coins.front()));\n+    }\n+}\n+\n+BENCHMARK(ComplexMemPool, 1);"
      }
    ]
  }
]