[
  {
    "sha": "6b25f29a91867e1cd081777bc9fb6338f0c0e739",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YjI1ZjI5YTkxODY3ZTFjZDA4MTc3N2JjOWZiNjMzOGYwYzBlNzM5",
    "commit": {
      "author": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2018-11-18T14:32:18Z"
      },
      "committer": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2019-01-04T07:11:44Z"
      },
      "message": "Use std::vector API for construction of test data.\n\nFor constructing test scripts, use std::vector and, in particular,\nstd::vector::insert to insert 20 zero bytes rather than listing the full\narray of bytes explicitly.  This makes the code easier to read and makes\nit immediately obvious what the structure of the data is, without having\nto count the zeros to understand it.",
      "tree": {
        "sha": "d6ac4d3222624b8b0abb4feab20ce7ad3069904d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d6ac4d3222624b8b0abb4feab20ce7ad3069904d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b25f29a91867e1cd081777bc9fb6338f0c0e739",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b25f29a91867e1cd081777bc9fb6338f0c0e739",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6b25f29a91867e1cd081777bc9fb6338f0c0e739",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b25f29a91867e1cd081777bc9fb6338f0c0e739/comments",
    "author": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d71d0d7b7f3f1452ec59c68f9e57f62f60d6dbb3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d71d0d7b7f3f1452ec59c68f9e57f62f60d6dbb3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d71d0d7b7f3f1452ec59c68f9e57f62f60d6dbb3"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 16,
      "deletions": 8
    },
    "files": [
      {
        "sha": "3a2a11ef987c1ee81d720ee1ec2971897535c9f0",
        "filename": "src/test/script_p2sh_tests.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 8,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b25f29a91867e1cd081777bc9fb6338f0c0e739/src/test/script_p2sh_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b25f29a91867e1cd081777bc9fb6338f0c0e739/src/test/script_p2sh_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_p2sh_tests.cpp?ref=6b25f29a91867e1cd081777bc9fb6338f0c0e739",
        "patch": "@@ -213,14 +213,22 @@ BOOST_AUTO_TEST_CASE(is)\n     BOOST_CHECK(p2sh.IsPayToScriptHash());\n \n     // Not considered pay-to-script-hash if using one of the OP_PUSHDATA opcodes:\n-    static const unsigned char direct[] =    { OP_HASH160, 20, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, OP_EQUAL };\n-    BOOST_CHECK(CScript(direct, direct+sizeof(direct)).IsPayToScriptHash());\n-    static const unsigned char pushdata1[] = { OP_HASH160, OP_PUSHDATA1, 20, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, OP_EQUAL };\n-    BOOST_CHECK(!CScript(pushdata1, pushdata1+sizeof(pushdata1)).IsPayToScriptHash());\n-    static const unsigned char pushdata2[] = { OP_HASH160, OP_PUSHDATA2, 20,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, OP_EQUAL };\n-    BOOST_CHECK(!CScript(pushdata2, pushdata2+sizeof(pushdata2)).IsPayToScriptHash());\n-    static const unsigned char pushdata4[] = { OP_HASH160, OP_PUSHDATA4, 20,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, OP_EQUAL };\n-    BOOST_CHECK(!CScript(pushdata4, pushdata4+sizeof(pushdata4)).IsPayToScriptHash());\n+    std::vector<unsigned char> direct = {OP_HASH160, 20};\n+    direct.insert(direct.end(), 20, 0);\n+    direct.push_back(OP_EQUAL);\n+    BOOST_CHECK(CScript(direct.begin(), direct.end()).IsPayToScriptHash());\n+    std::vector<unsigned char> pushdata1 = {OP_HASH160, OP_PUSHDATA1, 20};\n+    pushdata1.insert(pushdata1.end(), 20, 0);\n+    pushdata1.push_back(OP_EQUAL);\n+    BOOST_CHECK(!CScript(pushdata1.begin(), pushdata1.end()).IsPayToScriptHash());\n+    std::vector<unsigned char> pushdata2 = {OP_HASH160, 20, 0};\n+    pushdata2.insert(pushdata2.end(), 20, 0);\n+    pushdata2.push_back(OP_EQUAL);\n+    BOOST_CHECK(!CScript(pushdata2.begin(), pushdata2.end()).IsPayToScriptHash());\n+    std::vector<unsigned char> pushdata4 = {OP_HASH160, 20, 0, 0, 0};\n+    pushdata4.insert(pushdata4.end(), 20, 0);\n+    pushdata4.push_back(OP_EQUAL);\n+    BOOST_CHECK(!CScript(pushdata4.begin(), pushdata4.end()).IsPayToScriptHash());\n \n     CScript not_p2sh;\n     BOOST_CHECK(!not_p2sh.IsPayToScriptHash());"
      }
    ]
  }
]