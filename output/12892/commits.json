[
  {
    "sha": "189e0ef33ec66f03abf85cfd4d0ede1a0c5c02d3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxODllMGVmMzNlYzY2ZjAzYWJmODVjZmQ0ZDBlZGUxYTBjNWMwMmQz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-03-21T15:55:02Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-10T23:27:22Z"
      },
      "message": "[wallet] [rpc] introduce 'label' API for wallet\n\nAdd label API to wallet RPC.\n\nThis is one step towards #3816 (\"Remove bolt-on account system\") although it doesn't\nactually remove anything yet.\n\nThese initially mirror the account functions, with the following differences:\n\n- These functions aren't DEPRECATED in the help\n- Help mentions 'label' instead of accounts. In the language used, labels are\n  associated with addresses, instead of addresses associated with labels. (unlike\n  with accounts.)\n- Labels have no balance\n  - No balances in `listlabels`\n  - `listlabels` has no minconf or watchonly argument\n- Like in the GUI, labels can be set on any address, not just receiving addreses\n- Unlike accounts, labels can be deleted.\n  Being unable to delete them is a common annoyance (see #1231).\n  Currently only by reassigning all addresses using `setlabel`, but an explicit\n  call `deletelabel` which assigns all address to the default label may make\n  sense.\n\nThanks to Pierre Rochard for test fixes.",
      "tree": {
        "sha": "e434830989841afafe360910022acf5aa27465c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e434830989841afafe360910022acf5aa27465c3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/189e0ef33ec66f03abf85cfd4d0ede1a0c5c02d3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/189e0ef33ec66f03abf85cfd4d0ede1a0c5c02d3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/189e0ef33ec66f03abf85cfd4d0ede1a0c5c02d3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/189e0ef33ec66f03abf85cfd4d0ede1a0c5c02d3/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cf8073f8d1d18ab2798534bfd442445f0a1cdb6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf8073f8d1d18ab2798534bfd442445f0a1cdb6b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cf8073f8d1d18ab2798534bfd442445f0a1cdb6b"
      }
    ],
    "stats": {
      "total": 245,
      "additions": 209,
      "deletions": 36
    },
    "files": [
      {
        "sha": "34c41b3b6be001d74a38dd97662657dd376628ab",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/189e0ef33ec66f03abf85cfd4d0ede1a0c5c02d3/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/189e0ef33ec66f03abf85cfd4d0ede1a0c5c02d3/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=189e0ef33ec66f03abf85cfd4d0ede1a0c5c02d3",
        "patch": "@@ -51,6 +51,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"listreceivedbylabel\", 0, \"minconf\" },\n     { \"listreceivedbylabel\", 1, \"include_empty\" },\n     { \"listreceivedbylabel\", 2, \"include_watchonly\" },\n+    { \"getlabeladdress\", 1, \"force\" },\n     { \"getbalance\", 1, \"minconf\" },\n     { \"getbalance\", 2, \"include_watchonly\" },\n     { \"getblockhash\", 0, \"height\" },"
      },
      {
        "sha": "6212ea7512755ca60506cfcbbd8b5c5164a99de8",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 174,
        "deletions": 27,
        "changes": 201,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/189e0ef33ec66f03abf85cfd4d0ede1a0c5c02d3/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/189e0ef33ec66f03abf85cfd4d0ede1a0c5c02d3/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=189e0ef33ec66f03abf85cfd4d0ede1a0c5c02d3",
        "patch": "@@ -189,7 +189,6 @@ UniValue getnewaddress(const JSONRPCRequest& request)\n     return EncodeDestination(dest);\n }\n \n-\n CTxDestination GetLabelDestination(CWallet* const pwallet, const std::string& label, bool bForceNew=false)\n {\n     CTxDestination dest;\n@@ -207,14 +206,16 @@ UniValue getlabeladdress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 1)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"getlabeladdress \\\"label\\\"\\n\"\n-            \"\\nReturns the current Bitcoin address for receiving payments to this label.\\n\"\n+            \"getlabeladdress \\\"label\\\" ( force ) \\n\"\n+            \"\\nReturns the default receiving address for this label. This will reset to a fresh address once there's a transaction that spends to it.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"label\\\"         (string, required) The label name for the address. It can also be set to the empty string \\\"\\\" to represent the default label. The label does not need to exist, it will be created and a new address created  if there is no label by the given name.\\n\"\n+            \"1. \\\"label\\\"         (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"2. \\\"force\\\"         (bool, optional) Whether the label should be created if it does not yet exist. If False, the RPC will return an error if called with a label that doesn't exist.\\n\"\n+            \"                                    Defaults to false (unless the getaccountaddress method alias is being called, in which case defaults to true for backwards compatibility).\\n\"\n             \"\\nResult:\\n\"\n-            \"\\\"address\\\"          (string) The label bitcoin address\\n\"\n+            \"\\\"address\\\"          (string) The current receiving address for the label.\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getlabeladdress\", \"\")\n             + HelpExampleCli(\"getlabeladdress\", \"\\\"\\\"\")\n@@ -226,6 +227,21 @@ UniValue getlabeladdress(const JSONRPCRequest& request)\n \n     // Parse the label first so we don't generate a key if there's an error\n     std::string label = LabelFromValue(request.params[0]);\n+    bool force = request.strMethod == \"getaccountaddress\" ? true : false;\n+    if (!request.params[1].isNull()) {\n+        force = request.params[1].get_bool();\n+    }\n+\n+    bool label_found = false;\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == label) {\n+            label_found = true;\n+            break;\n+        }\n+    }\n+    if (!force && !label_found) {\n+        throw JSONRPCError(RPC_WALLET_INVALID_LABEL_NAME, std::string(\"No addresses with label \" + label));\n+    }\n \n     UniValue ret(UniValue::VSTR);\n \n@@ -290,13 +306,13 @@ UniValue setlabel(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+    if (request.fHelp || request.params.size() != 2)\n         throw std::runtime_error(\n             \"setlabel \\\"address\\\" \\\"label\\\"\\n\"\n             \"\\nSets the label associated with the given address.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"         (string, required) The bitcoin address to be associated with a label.\\n\"\n-            \"2. \\\"label\\\"           (string, required) The label to assign the address to.\\n\"\n+            \"2. \\\"label\\\"           (string, required) The label to assign to the address.\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\" \\\"tabby\\\"\")\n             + HelpExampleRpc(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\", \\\"tabby\\\"\")\n@@ -309,23 +325,22 @@ UniValue setlabel(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n     }\n \n-    std::string label;\n-    if (!request.params[1].isNull())\n-        label = LabelFromValue(request.params[1]);\n+    std::string label = LabelFromValue(request.params[1]);\n \n-    // Only add the label if the address is yours.\n     if (IsMine(*pwallet, dest)) {\n-        // Detect when changing the label of an address that is the 'unused current key' of another label:\n+        // Detect when changing the label of an address that is the receiving address of another label:\n+        // If so, delete the account record for it. Labels, unlike addresses, can be deleted,\n+        // and if we wouldn't do this, the record would stick around forever.\n         if (pwallet->mapAddressBook.count(dest)) {\n             std::string old_label = pwallet->mapAddressBook[dest].name;\n-            if (dest == GetLabelDestination(pwallet, old_label)) {\n-                GetLabelDestination(pwallet, old_label, true);\n+            if (old_label != label && dest == GetLabelDestination(pwallet, old_label)) {\n+                pwallet->DeleteLabel(old_label);\n             }\n         }\n         pwallet->SetAddressBook(dest, label, \"receive\");\n+    } else {\n+        pwallet->SetAddressBook(dest, label, \"send\");\n     }\n-    else\n-        throw JSONRPCError(RPC_MISC_ERROR, \"setlabel can only be used with own address\");\n \n     return NullUniValue;\n }\n@@ -3720,6 +3735,17 @@ UniValue DescribeWalletAddress(CWallet* pwallet, const CTxDestination& dest)\n     return ret;\n }\n \n+/** Convert CAddressBookData to JSON record.  */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, const bool verbose)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (verbose) {\n+        ret.pushKV(\"name\", data.name);\n+    }\n+    ret.pushKV(\"purpose\", data.purpose);\n+    return ret;\n+}\n+\n UniValue getaddressinfo(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n@@ -3759,6 +3785,13 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             \"  \\\"timestamp\\\" : timestamp,      (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n             \"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n             \"  \\\"hdmasterkeyid\\\" : \\\"<hash160>\\\" (string, optional) The Hash160 of the HD master pubkey\\n\"\n+            \"  \\\"labels\\\"                      (object) Array of labels associated with the address.\\n\"\n+            \"    [\\n\"\n+            \"      { (json object of label data)\\n\"\n+            \"        \\\"name\\\": \\\"labelname\\\" (string) The label\\n\"\n+            \"        \\\"purpose\\\": \\\"string\\\" (string) Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"      },...\\n\"\n+            \"    ]\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getaddressinfo\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n@@ -3811,6 +3844,112 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    std::string label = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    UniValue ret(UniValue::VOBJ);\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == label) {\n+            ret.pushKV(EncodeDestination(item.first), AddressBookDataToJSON(item.second, false));\n+        }\n+    }\n+\n+    if (ret.empty()) {\n+        throw JSONRPCError(RPC_WALLET_INVALID_LABEL_NAME, std::string(\"No addresses with label \" + label));\n+    }\n+\n+    return ret;\n+}\n+\n+UniValue listlabels(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1)\n+        throw std::runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"    (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[               (json array of string)\\n\"\n+            \"  \\\"label\\\",      (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    std::string purpose;\n+    if (!request.params[0].isNull()) {\n+        purpose = request.params[0].get_str();\n+    }\n+\n+    // Add to a set to sort by label name, then insert into Univalue array\n+    std::set<std::string> label_set;\n+    for (const std::pair<CTxDestination, CAddressBookData>& entry : pwallet->mapAddressBook) {\n+        if (purpose.empty() || entry.second.purpose == purpose) {\n+            label_set.insert(entry.second.name);\n+        }\n+    }\n+\n+    UniValue ret(UniValue::VARR);\n+    for (const std::string& name : label_set) {\n+        ret.push_back(name);\n+    }\n+\n     return ret;\n }\n \n@@ -3840,16 +3979,10 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"dumpprivkey\",                      &dumpprivkey,                   {\"address\"}  },\n     { \"wallet\",             \"dumpwallet\",                       &dumpwallet,                    {\"filename\"} },\n     { \"wallet\",             \"encryptwallet\",                    &encryptwallet,                 {\"passphrase\"} },\n-    { \"wallet\",             \"getlabeladdress\",                  &getlabeladdress,               {\"label\"} },\n-    { \"wallet\",             \"getaccountaddress\",                &getlabeladdress,               {\"account\"} },\n-    { \"wallet\",             \"getaccount\",                       &getaccount,                    {\"address\"} },\n-    { \"wallet\",             \"getaddressesbyaccount\",            &getaddressesbyaccount,         {\"account\"} },\n     { \"wallet\",             \"getaddressinfo\",                   &getaddressinfo,                {\"address\"} },\n     { \"wallet\",             \"getbalance\",                       &getbalance,                    {\"account\",\"minconf\",\"include_watchonly\"} },\n     { \"wallet\",             \"getnewaddress\",                    &getnewaddress,                 {\"label|account\",\"address_type\"} },\n     { \"wallet\",             \"getrawchangeaddress\",              &getrawchangeaddress,           {\"address_type\"} },\n-    { \"wallet\",             \"getreceivedbylabel\",               &getreceivedbylabel,            {\"label\",\"minconf\"} },\n-    { \"wallet\",             \"getreceivedbyaccount\",             &getreceivedbylabel,            {\"account\",\"minconf\"} },\n     { \"wallet\",             \"getreceivedbyaddress\",             &getreceivedbyaddress,          {\"address\",\"minconf\"} },\n     { \"wallet\",             \"gettransaction\",                   &gettransaction,                {\"txid\",\"include_watchonly\"} },\n     { \"wallet\",             \"getunconfirmedbalance\",            &getunconfirmedbalance,         {} },\n@@ -3861,7 +3994,6 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"importprunedfunds\",                &importprunedfunds,             {\"rawtransaction\",\"txoutproof\"} },\n     { \"wallet\",             \"importpubkey\",                     &importpubkey,                  {\"pubkey\",\"label\",\"rescan\"} },\n     { \"wallet\",             \"keypoolrefill\",                    &keypoolrefill,                 {\"newsize\"} },\n-    { \"wallet\",             \"listaccounts\",                     &listaccounts,                  {\"minconf\",\"include_watchonly\"} },\n     { \"wallet\",             \"listaddressgroupings\",             &listaddressgroupings,          {} },\n     { \"wallet\",             \"listlockunspent\",                  &listlockunspent,               {} },\n     { \"wallet\",             \"listreceivedbylabel\",              &listreceivedbylabel,           {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n@@ -3872,12 +4004,9 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"listunspent\",                      &listunspent,                   {\"minconf\",\"maxconf\",\"addresses\",\"include_unsafe\",\"query_options\"} },\n     { \"wallet\",             \"listwallets\",                      &listwallets,                   {} },\n     { \"wallet\",             \"lockunspent\",                      &lockunspent,                   {\"unlock\",\"transactions\"} },\n-    { \"wallet\",             \"move\",                             &movecmd,                       {\"fromaccount\",\"toaccount\",\"amount\",\"minconf\",\"comment\"} },\n     { \"wallet\",             \"sendfrom\",                         &sendfrom,                      {\"fromaccount\",\"toaddress\",\"amount\",\"minconf\",\"comment\",\"comment_to\"} },\n     { \"wallet\",             \"sendmany\",                         &sendmany,                      {\"fromaccount\",\"amounts\",\"minconf\",\"comment\",\"subtractfeefrom\",\"replaceable\",\"conf_target\",\"estimate_mode\"} },\n     { \"wallet\",             \"sendtoaddress\",                    &sendtoaddress,                 {\"address\",\"amount\",\"comment\",\"comment_to\",\"subtractfeefromamount\",\"replaceable\",\"conf_target\",\"estimate_mode\"} },\n-    { \"wallet\",             \"setlabel\",                         &setlabel,                      {\"address\",\"label\"} },\n-    { \"wallet\",             \"setaccount\",                       &setlabel,                      {\"address\",\"account\"} },\n     { \"wallet\",             \"settxfee\",                         &settxfee,                      {\"amount\"} },\n     { \"wallet\",             \"signmessage\",                      &signmessage,                   {\"address\",\"message\"} },\n     { \"wallet\",             \"signrawtransactionwithwallet\",     &signrawtransactionwithwallet,  {\"hexstring\",\"prevtxs\",\"sighashtype\"} },\n@@ -3887,6 +4016,24 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"removeprunedfunds\",                &removeprunedfunds,             {\"txid\"} },\n     { \"wallet\",             \"rescanblockchain\",                 &rescanblockchain,              {\"start_height\", \"stop_height\"} },\n \n+    /** Account functions (deprecated) */\n+    { \"wallet\",             \"getaccountaddress\",                &getlabeladdress,               {\"account\"} },\n+    { \"wallet\",             \"getaccount\",                       &getaccount,                    {\"address\"} },\n+    { \"wallet\",             \"getaddressesbyaccount\",            &getaddressesbyaccount,         {\"account\"} },\n+    { \"wallet\",             \"getreceivedbyaccount\",             &getreceivedbylabel,            {\"account\",\"minconf\"} },\n+    { \"wallet\",             \"listaccounts\",                     &listaccounts,                  {\"minconf\",\"include_watchonly\"} },\n+    { \"wallet\",             \"listreceivedbyaccount\",            &listreceivedbylabel,           {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n+    { \"wallet\",             \"setaccount\",                       &setlabel,                      {\"address\",\"account\"} },\n+    { \"wallet\",             \"move\",                             &movecmd,                       {\"fromaccount\",\"toaccount\",\"amount\",\"minconf\",\"comment\"} },\n+\n+    /** Label functions (to replace non-balance account functions) */\n+    { \"wallet\",             \"getlabeladdress\",                  &getlabeladdress,               {\"label\",\"force\"} },\n+    { \"wallet\",             \"getaddressesbylabel\",              &getaddressesbylabel,           {\"label\"} },\n+    { \"wallet\",             \"getreceivedbylabel\",               &getreceivedbylabel,            {\"label\",\"minconf\"} },\n+    { \"wallet\",             \"listlabels\",                       &listlabels,                    {\"purpose\"} },\n+    { \"wallet\",             \"listreceivedbylabel\",              &listreceivedbylabel,           {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n+    { \"wallet\",             \"setlabel\",                         &setlabel,                      {\"address\",\"label\"} },\n+\n     { \"generating\",         \"generate\",                         &generate,                      {\"nblocks\",\"maxtries\"} },\n };\n "
      },
      {
        "sha": "673d91c61350a138907c1a65ffd190f92cf35e0c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/189e0ef33ec66f03abf85cfd4d0ede1a0c5c02d3/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/189e0ef33ec66f03abf85cfd4d0ede1a0c5c02d3/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=189e0ef33ec66f03abf85cfd4d0ede1a0c5c02d3",
        "patch": "@@ -3640,6 +3640,12 @@ std::set<CTxDestination> CWallet::GetLabelAddresses(const std::string& label) co\n     return result;\n }\n \n+void CWallet::DeleteLabel(const std::string& label)\n+{\n+    WalletBatch batch(*database);\n+    batch.EraseAccount(label);\n+}\n+\n bool CReserveKey::GetReservedKey(CPubKey& pubkey, bool internal)\n {\n     if (nIndex == -1)"
      },
      {
        "sha": "99b09ec40723ba4d349282c51e19096a631d9569",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/189e0ef33ec66f03abf85cfd4d0ede1a0c5c02d3/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/189e0ef33ec66f03abf85cfd4d0ede1a0c5c02d3/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=189e0ef33ec66f03abf85cfd4d0ede1a0c5c02d3",
        "patch": "@@ -549,7 +549,7 @@ class CWalletKey\n };\n \n /**\n- * Internal transfers.\n+ * DEPRECATED Internal transfers.\n  * Database key is acentry<account><counter>.\n  */\n class CAccountingEntry\n@@ -989,6 +989,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     std::map<CTxDestination, CAmount> GetAddressBalances();\n \n     std::set<CTxDestination> GetLabelAddresses(const std::string& label) const;\n+    void DeleteLabel(const std::string& label);\n \n     isminetype IsMine(const CTxIn& txin) const;\n     /**\n@@ -1184,7 +1185,7 @@ class CReserveKey final : public CReserveScript\n \n \n /** \n- * Account information.\n+ * DEPRECATED Account information.\n  * Stored in wallet with key \"acc\"+string account name.\n  */\n class CAccount"
      },
      {
        "sha": "803cc5f0a0061d6e607b06e7172895b0a5a228e2",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/189e0ef33ec66f03abf85cfd4d0ede1a0c5c02d3/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/189e0ef33ec66f03abf85cfd4d0ede1a0c5c02d3/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=189e0ef33ec66f03abf85cfd4d0ede1a0c5c02d3",
        "patch": "@@ -161,6 +161,11 @@ bool WalletBatch::WriteAccount(const std::string& strAccount, const CAccount& ac\n     return WriteIC(std::make_pair(std::string(\"acc\"), strAccount), account);\n }\n \n+bool WalletBatch::EraseAccount(const std::string& strAccount)\n+{\n+    return EraseIC(std::make_pair(std::string(\"acc\"), strAccount));\n+}\n+\n bool WalletBatch::WriteAccountingEntry(const uint64_t nAccEntryNum, const CAccountingEntry& acentry)\n {\n     return WriteIC(std::make_pair(std::string(\"acentry\"), std::make_pair(acentry.strAccount, nAccEntryNum)), acentry);"
      },
      {
        "sha": "a73d727c0c678343b59c94312a3c616f52c63abf",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/189e0ef33ec66f03abf85cfd4d0ede1a0c5c02d3/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/189e0ef33ec66f03abf85cfd4d0ede1a0c5c02d3/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=189e0ef33ec66f03abf85cfd4d0ede1a0c5c02d3",
        "patch": "@@ -204,6 +204,7 @@ class WalletBatch\n     bool WriteAccountingEntry(const uint64_t nAccEntryNum, const CAccountingEntry& acentry);\n     bool ReadAccount(const std::string& strAccount, CAccount& account);\n     bool WriteAccount(const std::string& strAccount, const CAccount& account);\n+    bool EraseAccount(const std::string& strAccount);\n \n     /// Write destination data key,value tuple to database\n     bool WriteDestData(const std::string &address, const std::string &key, const std::string &value);"
      },
      {
        "sha": "90eefc043809f27e016e7e710159e20cdd884494",
        "filename": "test/functional/wallet_labels.py",
        "status": "modified",
        "additions": 18,
        "deletions": 6,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/189e0ef33ec66f03abf85cfd4d0ede1a0c5c02d3/test/functional/wallet_labels.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/189e0ef33ec66f03abf85cfd4d0ede1a0c5c02d3/test/functional/wallet_labels.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_labels.py?ref=189e0ef33ec66f03abf85cfd4d0ede1a0c5c02d3",
        "patch": "@@ -12,6 +12,7 @@\n     - sendfrom (with account arguments)\n     - move (with account arguments)\n \"\"\"\n+from collections import defaultdict\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n@@ -78,9 +79,12 @@ def run_test(self):\n         # recognize the label/address associations.\n         labels = [Label(name) for name in (\"a\", \"b\", \"c\", \"d\", \"e\")]\n         for label in labels:\n-            label.add_receive_address(node.getlabeladdress(label.name))\n+            label.add_receive_address(node.getlabeladdress(label=label.name, force=True))\n             label.verify(node)\n \n+        # Check all labels are returned by listlabels.\n+        assert_equal(node.listlabels(), [label.name for label in labels])\n+\n         # Send a transaction to each label, and make sure this forces\n         # getlabeladdress to generate a new receiving address.\n         for label in labels:\n@@ -115,7 +119,7 @@ def run_test(self):\n \n         # Check that setlabel can assign a label to a new unused address.\n         for label in labels:\n-            address = node.getlabeladdress(\"\")\n+            address = node.getlabeladdress(label=\"\", force=True)\n             node.setlabel(address, label.name)\n             label.add_address(address)\n             label.verify(node)\n@@ -128,6 +132,7 @@ def run_test(self):\n                 addresses.append(node.getnewaddress())\n             multisig_address = node.addmultisigaddress(5, addresses, label.name)['address']\n             label.add_address(multisig_address)\n+            label.purpose[multisig_address] = \"send\"\n             label.verify(node)\n             node.sendfrom(\"\", multisig_address, 50)\n         node.generate(101)\n@@ -147,9 +152,7 @@ def run_test(self):\n         change_label(node, labels[2].addresses[0], labels[2], labels[2])\n \n         # Check that setlabel can set the label of an address which is\n-        # already the receiving address of the label. It would probably make\n-        # sense for this to be a no-op, but right now it resets the receiving\n-        # address, causing getlabeladdress to return a brand new address.\n+        # already the receiving address of the label. This is a no-op.\n         change_label(node, labels[2].receive_address, labels[2], labels[2])\n \n class Label:\n@@ -160,6 +163,8 @@ def __init__(self, name):\n         self.receive_address = None\n         # List of all addresses assigned with this label\n         self.addresses = []\n+        # Map of address to address purpose\n+        self.purpose = defaultdict(lambda: \"receive\")\n \n     def add_address(self, address):\n         assert_equal(address not in self.addresses, True)\n@@ -175,8 +180,15 @@ def verify(self, node):\n             assert_equal(node.getlabeladdress(self.name), self.receive_address)\n \n         for address in self.addresses:\n+            assert_equal(\n+                node.getaddressinfo(address)['labels'][0],\n+                {\"name\": self.name,\n+                 \"purpose\": self.purpose[address]})\n             assert_equal(node.getaccount(address), self.name)\n \n+        assert_equal(\n+            node.getaddressesbylabel(self.name),\n+            {address: {\"purpose\": self.purpose[address]} for address in self.addresses})\n         assert_equal(\n             set(node.getaddressesbyaccount(self.name)), set(self.addresses))\n \n@@ -192,7 +204,7 @@ def change_label(node, address, old_label, new_label):\n     # address of a different label should reset the receiving address of\n     # the old label, causing getlabeladdress to return a brand new\n     # address.\n-    if address == old_label.receive_address:\n+    if old_label.name != new_label.name and address == old_label.receive_address:\n         new_address = node.getlabeladdress(old_label.name)\n         assert_equal(new_address not in old_label.addresses, True)\n         assert_equal(new_address not in new_label.addresses, True)"
      },
      {
        "sha": "7b34febddcbe76fd807ae06c65ff5d27d4a81aa4",
        "filename": "test/functional/wallet_listreceivedby.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/189e0ef33ec66f03abf85cfd4d0ede1a0c5c02d3/test/functional/wallet_listreceivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/189e0ef33ec66f03abf85cfd4d0ede1a0c5c02d3/test/functional/wallet_listreceivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listreceivedby.py?ref=189e0ef33ec66f03abf85cfd4d0ede1a0c5c02d3",
        "patch": "@@ -140,7 +140,7 @@ def run_test(self):\n         assert_equal(balance, balance_by_label + Decimal(\"0.1\"))\n \n         # Create a new label named \"mynewlabel\" that has a 0 balance\n-        self.nodes[1].getlabeladdress(\"mynewlabel\")\n+        self.nodes[1].getlabeladdress(label=\"mynewlabel\", force=True)\n         received_by_label_json = [r for r in self.nodes[1].listreceivedbylabel(0, True) if r[\"label\"] == \"mynewlabel\"][0]\n \n         # Test includeempty of listreceivedbylabel"
      }
    ]
  },
  {
    "sha": "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MWJhMDYxODA0OGI3YjJkN2UyNTdiYjUyY2Y4ZjEzOGQyOWRhYmQz",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-09T21:22:50Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-10T23:27:28Z"
      },
      "message": "[docs] Add release notes for wallet 'label' API.",
      "tree": {
        "sha": "ffcf64de0392defbd2aecb90827bef94ef9a2871",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ffcf64de0392defbd2aecb90827bef94ef9a2871"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41ba0618048b7b2d7e257bb52cf8f138d29dabd3/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "189e0ef33ec66f03abf85cfd4d0ede1a0c5c02d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/189e0ef33ec66f03abf85cfd4d0ede1a0c5c02d3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/189e0ef33ec66f03abf85cfd4d0ede1a0c5c02d3"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 32,
      "deletions": 10
    },
    "files": [
      {
        "sha": "894bf19deeb8b72bbf0a257bc28350b76daf59b9",
        "filename": "doc/release-notes-pr12892.md",
        "status": "added",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41ba0618048b7b2d7e257bb52cf8f138d29dabd3/doc/release-notes-pr12892.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41ba0618048b7b2d7e257bb52cf8f138d29dabd3/doc/release-notes-pr12892.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-pr12892.md?ref=41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
        "patch": "@@ -0,0 +1,32 @@\n+'label' API for wallet\n+----------------------\n+\n+A new 'label' API has been introduced for the wallet. This is intended as a\n+replacement for the deprecated 'account' API.\n+\n+The label RPC methods mirror the account functionality, with the following functional differences:\n+\n+- Labels can be set on any address, not just receiving addresses. This functionality was previously only available through the GUI.\n+- Labels can be deleted by reassigning all addresses using the `setlabel` RPC method.\n+- There isn't support for sending transactions _from_ a label, or for determining which label a transaction was sent from.\n+- Labels do not have a balance.\n+\n+Here are the changes to RPC methods:\n+\n+| Deprecated Method       | New Method            | Notes       |\n+| :---------------------- | :-------------------- | :-----------|\n+| `getaccount`            | `getaddressinfo`      | `getaddressinfo` returns a json object with address information instead of just the name of the account as a string. |\n+| `getaccountaddress`     | `getlabeladdress`     | `getlabeladdress` throws an error by default if the label does not already exist, but provides a `force` option for compatibility with existing applications. |\n+| `getaddressesbyaccount` | `getaddressesbylabel` | `getaddressesbylabel` returns a json object with the addresses as keys, instead of a list of strings. |\n+| `getreceivedbyaccount`  | `getreceivedbylabel`  | _no change in behavior_ |\n+| `listaccounts`          | `listlabels`          | `listlabels` does not return a balance or accept `minconf` and `watchonly` arguments. |\n+| `listreceivedbyaccount` | `listreceivedbylabel` | Both methods return new `label` fields, along with `account` fields for backward compatibility. |\n+| `move`                  | n/a                   | _no replacement_ |\n+| `sendfrom`              | n/a                   | _no replacement_ |\n+| `setaccount`            | `setlabel`            | Both methods now: <ul><li>allow assigning labels to any address, instead of raising an error if the address is not receiving address.<li>delete the previous label associated with an address when the final address using that label is reassigned to a different label, instead of making an implicit `getaccountaddress` call to ensure the previous label still has a receiving address. |\n+\n+| Changed Method         | Notes   |\n+| :--------------------- | :------ |\n+| `addmultisigaddress`   | Renamed `account` named parameter to `label`. Still accepts `account` for backward compatibility. |\n+| `getnewaddress`        | Renamed `account` named parameter to `label`. Still accepts `account` for backward compatibility. |\n+| `listunspent`          | Returns new `label` fields, along with `account` fields for backward compatibility. |"
      },
      {
        "sha": "9e9c891de91238983f4ba8f4e4efa2a18ad7b29d",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41ba0618048b7b2d7e257bb52cf8f138d29dabd3/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41ba0618048b7b2d7e257bb52cf8f138d29dabd3/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
        "patch": "@@ -63,16 +63,6 @@ RPC changes\n \n - The `createrawtransaction` RPC will now accept an array or dictionary (kept for compatibility) for the `outputs` parameter. This means the order of transaction outputs can be specified by the client.\n - The `fundrawtransaction` RPC will reject the previously deprecated `reserveChangeKey` option.\n-- Wallet `getnewaddress` and `addmultisigaddress` RPC `account` named\n-  parameters have been renamed to `label` with no change in behavior.\n-- Wallet `getlabeladdress`, `getreceivedbylabel`, `listreceivedbylabel`, and\n-  `setlabel` RPCs have been added to replace `getaccountaddress`,\n-  `getreceivedbyaccount`, `listreceivedbyaccount`, and `setaccount` RPCs,\n-  which are now deprecated. There is no change in behavior between the\n-  new RPCs and deprecated RPCs.\n-- Wallet `listreceivedbylabel`, `listreceivedbyaccount` and `listunspent` RPCs\n-  add `label` fields to returned JSON objects that previously only had\n-  `account` fields.\n - `sendmany` now shuffles outputs to improve privacy, so any previously expected behavior with regards to output ordering can no longer be relied upon.\n - The new RPC `testmempoolaccept` can be used to test acceptance of a transaction to the mempool without adding it.\n "
      }
    ]
  }
]