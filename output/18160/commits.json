[
  {
    "sha": "0933a37078e1ce3a3d70983c3e7f4b3ac6c3fa37",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOTMzYTM3MDc4ZTFjZTNhM2Q3MDk4M2MzZTdmNGIzYWM2YzNmYTM3",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2020-02-16T11:38:49Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2020-02-16T11:38:49Z"
      },
      "message": "gui: Avoid Wallet::GetBalance in WalletModel::pollBalanceChanged",
      "tree": {
        "sha": "fad17411a6dac54f3146787aac39b07eb32c45de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fad17411a6dac54f3146787aac39b07eb32c45de"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0933a37078e1ce3a3d70983c3e7f4b3ac6c3fa37",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0933a37078e1ce3a3d70983c3e7f4b3ac6c3fa37",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0933a37078e1ce3a3d70983c3e7f4b3ac6c3fa37",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0933a37078e1ce3a3d70983c3e7f4b3ac6c3fa37/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2a2631fb0dc781504df0f3fe8b42f21cbdb6f20d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a2631fb0dc781504df0f3fe8b42f21cbdb6f20d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2a2631fb0dc781504df0f3fe8b42f21cbdb6f20d"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 15,
      "deletions": 14
    },
    "files": [
      {
        "sha": "eeaf3d075da4624c424520535e0fca627dafba7b",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0933a37078e1ce3a3d70983c3e7f4b3ac6c3fa37/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0933a37078e1ce3a3d70983c3e7f4b3ac6c3fa37/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=0933a37078e1ce3a3d70983c3e7f4b3ac6c3fa37",
        "patch": "@@ -380,16 +380,17 @@ class WalletImpl : public Wallet\n         }\n         return result;\n     }\n-    bool tryGetBalances(WalletBalances& balances, int& num_blocks) override\n+    bool tryGetBalances(WalletBalances& balances, int& num_blocks, bool force, int cached_num_blocks) override\n     {\n         auto locked_chain = m_wallet->chain().lock(true /* try_lock */);\n         if (!locked_chain) return false;\n+        num_blocks = locked_chain->getHeight().get_value_or(-1);\n+        if (!force && num_blocks == cached_num_blocks) return false;\n         TRY_LOCK(m_wallet->cs_wallet, locked_wallet);\n         if (!locked_wallet) {\n             return false;\n         }\n         balances = getBalances();\n-        num_blocks = locked_chain->getHeight().get_value_or(-1);\n         return true;\n     }\n     CAmount getBalance() override { return m_wallet->GetBalance().m_mine_trusted; }"
      },
      {
        "sha": "caca2683d0ea93b2d3804c92792f80105231a2c4",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0933a37078e1ce3a3d70983c3e7f4b3ac6c3fa37/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0933a37078e1ce3a3d70983c3e7f4b3ac6c3fa37/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=0933a37078e1ce3a3d70983c3e7f4b3ac6c3fa37",
        "patch": "@@ -201,8 +201,11 @@ class Wallet\n     //! Get balances.\n     virtual WalletBalances getBalances() = 0;\n \n-    //! Get balances if possible without blocking.\n-    virtual bool tryGetBalances(WalletBalances& balances, int& num_blocks) = 0;\n+    //! Get balances if possible without waiting for chain and wallet locks.\n+    virtual bool tryGetBalances(WalletBalances& balances,\n+        int& num_blocks,\n+        bool force,\n+        int cached_num_blocks) = 0;\n \n     //! Get balance.\n     virtual CAmount getBalance() = 0;"
      },
      {
        "sha": "dd71acd0e4909880c370f54c359063e754c721cc",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 10,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0933a37078e1ce3a3d70983c3e7f4b3ac6c3fa37/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0933a37078e1ce3a3d70983c3e7f4b3ac6c3fa37/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=0933a37078e1ce3a3d70983c3e7f4b3ac6c3fa37",
        "patch": "@@ -78,21 +78,18 @@ void WalletModel::pollBalanceChanged()\n     // rescan.\n     interfaces::WalletBalances new_balances;\n     int numBlocks = -1;\n-    if (!m_wallet->tryGetBalances(new_balances, numBlocks)) {\n+    if (!m_wallet->tryGetBalances(new_balances, numBlocks, fForceCheckBalanceChanged, cachedNumBlocks)) {\n         return;\n     }\n \n-    if(fForceCheckBalanceChanged || numBlocks != cachedNumBlocks)\n-    {\n-        fForceCheckBalanceChanged = false;\n+    fForceCheckBalanceChanged = false;\n \n-        // Balance and number of transactions might have changed\n-        cachedNumBlocks = numBlocks;\n+    // Balance and number of transactions might have changed\n+    cachedNumBlocks = numBlocks;\n \n-        checkBalanceChanged(new_balances);\n-        if(transactionTableModel)\n-            transactionTableModel->updateConfirmations();\n-    }\n+    checkBalanceChanged(new_balances);\n+    if(transactionTableModel)\n+        transactionTableModel->updateConfirmations();\n }\n \n void WalletModel::checkBalanceChanged(const interfaces::WalletBalances& new_balances)"
      }
    ]
  }
]