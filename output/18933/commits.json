[
  {
    "sha": "faa426093708a2616f27860960e4f20a1c86ded1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWE0MjYwOTM3MDhhMjYxNmYyNzg2MDk2MGU0ZjIwYTFjODZkZWQx",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-10T13:59:43Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-10T13:59:50Z"
      },
      "message": "refactor: Replace block_hash with block_out",
      "tree": {
        "sha": "aa02a3cb2b6c60034a6f168fa58109bc311c3828",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aa02a3cb2b6c60034a6f168fa58109bc311c3828"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faa426093708a2616f27860960e4f20a1c86ded1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhAOgwAjiIcHY18+51B3lZK2BR8BI3VBpIJAEUb+qSmUuGhKdRqKr82XJLP1Yzh\n0t+xWu9cT1KNIHQBd3RMes2WC3t0lVoED5qwKCpiv87rPoS1Dt9tpGtxSuZehpAb\n+KrL5qS2l3nNOEtQ/e6GrrdD+IgFKFIgU9rSE/kS5z3FVna0SPgR3UFoUbU2nCcA\nOMpuJyaePzobT0ObzGh5cRhTkvCKQU298A2nssRaYYhBlCO92VEXZHmbhDa7tXFD\nu5DAF9cyK8kl832sZxqEtVBHq+IVrSH5jQRWdGYjiZhOUu9NQsJpNi/MMRqTq3S9\nGV1SJnEtEdGpSyDRMO9l9DEiWP78l2Mz7wQT/tZYAJQIPTHjkSHEMW6xF+tqyjGr\nFQL7+cLepG+q2EVoytcxMHDJ07c35yHGNcsWj9ZyHjpvf/vFdBZB0Ip+7z5Srldt\n9HuLCh8FmDtQCh2WF8EXw7hG2JcwhIlaSHCeKFaSQtT/jjAQQPs2jy1x3kq65zCr\nlZEM+nUd\n=TgDG\n-----END PGP SIGNATURE-----",
        "payload": "tree aa02a3cb2b6c60034a6f168fa58109bc311c3828\nparent 88d8b4e182bfc75e8496f7046af7aab93307b9d0\nauthor MarcoFalke <falke.marco@gmail.com> 1589119183 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1589119190 -0400\n\nrefactor: Replace block_hash with block_out\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa426093708a2616f27860960e4f20a1c86ded1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faa426093708a2616f27860960e4f20a1c86ded1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa426093708a2616f27860960e4f20a1c86ded1/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "88d8b4e182bfc75e8496f7046af7aab93307b9d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88d8b4e182bfc75e8496f7046af7aab93307b9d0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/88d8b4e182bfc75e8496f7046af7aab93307b9d0"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 12,
      "deletions": 13
    },
    "files": [
      {
        "sha": "f1f1f8d1ecaf5fa83462085ea710932f837eb50d",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 13,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa426093708a2616f27860960e4f20a1c86ded1/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa426093708a2616f27860960e4f20a1c86ded1/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=faa426093708a2616f27860960e4f20a1c86ded1",
        "patch": "@@ -101,9 +101,9 @@ static UniValue getnetworkhashps(const JSONRPCRequest& request)\n     return GetNetworkHashPS(!request.params[0].isNull() ? request.params[0].get_int() : 120, !request.params[1].isNull() ? request.params[1].get_int() : -1);\n }\n \n-static bool GenerateBlock(CBlock& block, uint64_t& max_tries, unsigned int& extra_nonce, uint256& block_hash)\n+static bool GenerateBlock(CBlock& block, uint64_t& max_tries, unsigned int& extra_nonce, std::shared_ptr<const CBlock>& block_out)\n {\n-    block_hash.SetNull();\n+    block_out.reset();\n \n     {\n         LOCK(cs_main);\n@@ -123,11 +123,11 @@ static bool GenerateBlock(CBlock& block, uint64_t& max_tries, unsigned int& extr\n         return true;\n     }\n \n-    std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(block);\n-    if (!ProcessNewBlock(chainparams, shared_pblock, true, nullptr))\n+    block_out = std::make_shared<const CBlock>(block);\n+    if (!ProcessNewBlock(chainparams, block_out, true, nullptr)) {\n         throw JSONRPCError(RPC_INTERNAL_ERROR, \"ProcessNewBlock, block not accepted\");\n+    }\n \n-    block_hash = block.GetHash();\n     return true;\n }\n \n@@ -148,16 +148,15 @@ static UniValue generateBlocks(const CTxMemPool& mempool, const CScript& coinbas\n         std::unique_ptr<CBlockTemplate> pblocktemplate(BlockAssembler(mempool, Params()).CreateNewBlock(coinbase_script));\n         if (!pblocktemplate.get())\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Couldn't create new block\");\n-        CBlock *pblock = &pblocktemplate->block;\n \n-        uint256 block_hash;\n-        if (!GenerateBlock(*pblock, nMaxTries, nExtraNonce, block_hash)) {\n+        std::shared_ptr<const CBlock> block_out;\n+        if (!GenerateBlock(pblocktemplate->block, nMaxTries, nExtraNonce, block_out)) {\n             break;\n         }\n \n-        if (!block_hash.IsNull()) {\n+        if (block_out) {\n             ++nHeight;\n-            blockHashes.push_back(block_hash.GetHex());\n+            blockHashes.push_back(block_out->GetHash().GetHex());\n         }\n     }\n     return blockHashes;\n@@ -366,16 +365,16 @@ static UniValue generateblock(const JSONRPCRequest& request)\n         }\n     }\n \n-    uint256 block_hash;\n+    std::shared_ptr<const CBlock> block_out;\n     uint64_t max_tries{1000000};\n     unsigned int extra_nonce{0};\n \n-    if (!GenerateBlock(block, max_tries, extra_nonce, block_hash) || block_hash.IsNull()) {\n+    if (!GenerateBlock(block, max_tries, extra_nonce, block_out) || !block_out) {\n         throw JSONRPCError(RPC_MISC_ERROR, \"Failed to make block.\");\n     }\n \n     UniValue obj(UniValue::VOBJ);\n-    obj.pushKV(\"hash\", block_hash.GetHex());\n+    obj.pushKV(\"hash\", block_out->GetHash().GetHex());\n     return obj;\n }\n "
      }
    ]
  },
  {
    "sha": "fa58b4cd1801053a7e3b19a34115ed6fb68ff3c3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTU4YjRjZDE4MDEwNTNhN2UzYjE5YTM0MTE1ZWQ2ZmI2OGZmM2Mz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-10T14:06:23Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-10T14:11:57Z"
      },
      "message": "rpc: Add submit option to generateblock",
      "tree": {
        "sha": "1412f6511ce92bf3e849a37ef809a367705eb3de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1412f6511ce92bf3e849a37ef809a367705eb3de"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa58b4cd1801053a7e3b19a34115ed6fb68ff3c3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjVzgv/eEmSg0yWV9S3nI20+Gb9/wCnl1R8VoEwnjvxotKFbCYJP1oovKdTe1C2\nCCMM5aifko5YXtT80qvYGlJsC6HVK7e+O1Tr2lnT30xjNBZLqmMNDTFSTek522Ed\nQBP7cXhXkfvwPJl4TtamsLfigfbCdhiztG1gTTd74ZrVVmorFKtsQAcpsSclgRb6\nzQLLd7twloqfKi87n5cJCVFixc+Kv/6nSp6pxiFeOAsRM54nYWVoofm7/+jZTWpm\nx6gEFeLBydhMAuqrjbEMW6eXiukpKfD4iCveFyXKSx2PR/GoCkwjb415Am788AVQ\nqos3WVvJr1tohh+nlfnCcQxguytQwlQWOiFtQN+riMPbP89Ap+rEg9RxZ52rSxSZ\n4/0uTNjN118yqVHwGnkhbL0QR37tNQbBTI3ux3uQjWO8DwH2JBkkkwMQ+4eXwW+l\nf7yGWQ5dPFcOsYDf0YMtgAzrCnoKDdVOdpERd3qY3oLqJ3Fa2x3/o+Ff+OtWnpuN\nMOL4xVKR\n=LujF\n-----END PGP SIGNATURE-----",
        "payload": "tree 1412f6511ce92bf3e849a37ef809a367705eb3de\nparent faa426093708a2616f27860960e4f20a1c86ded1\nauthor MarcoFalke <falke.marco@gmail.com> 1589119583 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1589119917 -0400\n\nrpc: Add submit option to generateblock\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa58b4cd1801053a7e3b19a34115ed6fb68ff3c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa58b4cd1801053a7e3b19a34115ed6fb68ff3c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa58b4cd1801053a7e3b19a34115ed6fb68ff3c3/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "faa426093708a2616f27860960e4f20a1c86ded1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa426093708a2616f27860960e4f20a1c86ded1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faa426093708a2616f27860960e4f20a1c86ded1"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 24,
      "deletions": 6
    },
    "files": [
      {
        "sha": "5e3227206eca4a99f249fdf2e78c0e22ed3adf09",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 5,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa58b4cd1801053a7e3b19a34115ed6fb68ff3c3/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa58b4cd1801053a7e3b19a34115ed6fb68ff3c3/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=fa58b4cd1801053a7e3b19a34115ed6fb68ff3c3",
        "patch": "@@ -101,7 +101,7 @@ static UniValue getnetworkhashps(const JSONRPCRequest& request)\n     return GetNetworkHashPS(!request.params[0].isNull() ? request.params[0].get_int() : 120, !request.params[1].isNull() ? request.params[1].get_int() : -1);\n }\n \n-static bool GenerateBlock(CBlock& block, uint64_t& max_tries, unsigned int& extra_nonce, std::shared_ptr<const CBlock>& block_out)\n+static bool GenerateBlock(CBlock& block, uint64_t& max_tries, unsigned int& extra_nonce, std::shared_ptr<const CBlock>& block_out, bool process_new_block)\n {\n     block_out.reset();\n \n@@ -124,6 +124,9 @@ static bool GenerateBlock(CBlock& block, uint64_t& max_tries, unsigned int& extr\n     }\n \n     block_out = std::make_shared<const CBlock>(block);\n+\n+    if (!process_new_block) return true;\n+\n     if (!ProcessNewBlock(chainparams, block_out, true, nullptr)) {\n         throw JSONRPCError(RPC_INTERNAL_ERROR, \"ProcessNewBlock, block not accepted\");\n     }\n@@ -150,7 +153,7 @@ static UniValue generateBlocks(const CTxMemPool& mempool, const CScript& coinbas\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Couldn't create new block\");\n \n         std::shared_ptr<const CBlock> block_out;\n-        if (!GenerateBlock(pblocktemplate->block, nMaxTries, nExtraNonce, block_out)) {\n+        if (!GenerateBlock(pblocktemplate->block, nMaxTries, nExtraNonce, block_out, /* process_new_block */ true)) {\n             break;\n         }\n \n@@ -274,7 +277,8 @@ static UniValue generatetoaddress(const JSONRPCRequest& request)\n static UniValue generateblock(const JSONRPCRequest& request)\n {\n     RPCHelpMan{\"generateblock\",\n-        \"\\nMine a block with a set of ordered transactions immediately to a specified address or descriptor (before the RPC call returns)\\n\",\n+        \"Mine a block with a set of ordered transactions to a specified address or descriptor.\\n\"\n+        \"Warning! This RPC is used for testing, and the interface might change arbitrarily or might be removed entirely without an -rpcdeprecated cycle.\",\n         {\n             {\"output\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The address or descriptor to send the newly generated bitcoin to.\"},\n             {\"transactions\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"An array of hex strings which are either txids or raw transactions.\\n\"\n@@ -284,11 +288,13 @@ static UniValue generateblock(const JSONRPCRequest& request)\n                     {\"rawtx/txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"\"},\n                 },\n             },\n+            {\"submit\", RPCArg::Type::BOOL, /* default */ \"true\", \"Whether to submit the block before the RPC call returns or to return it as hex.\"},\n         },\n         RPCResult{\n             RPCResult::Type::OBJ, \"\", \"\",\n             {\n                 {RPCResult::Type::STR_HEX, \"hash\", \"hash of generated block\"},\n+                {RPCResult::Type::STR_HEX, \"hex\", \"hex of generated block, only present when submit=false\"},\n             }\n         },\n         RPCExamples{\n@@ -336,6 +342,8 @@ static UniValue generateblock(const JSONRPCRequest& request)\n         }\n     }\n \n+    const bool process_new_block{request.params[2].isNull() ? true : request.params[2].get_bool()};\n+\n     CChainParams chainparams(Params());\n     CBlock block;\n \n@@ -369,12 +377,17 @@ static UniValue generateblock(const JSONRPCRequest& request)\n     uint64_t max_tries{1000000};\n     unsigned int extra_nonce{0};\n \n-    if (!GenerateBlock(block, max_tries, extra_nonce, block_out) || !block_out) {\n+    if (!GenerateBlock(block, max_tries, extra_nonce, block_out, process_new_block) || !block_out) {\n         throw JSONRPCError(RPC_MISC_ERROR, \"Failed to make block.\");\n     }\n \n     UniValue obj(UniValue::VOBJ);\n     obj.pushKV(\"hash\", block_out->GetHash().GetHex());\n+    if (!process_new_block) {\n+        CDataStream ssBlock(SER_NETWORK, PROTOCOL_VERSION | RPCSerializationFlags());\n+        ssBlock << *block_out;\n+        obj.pushKV(\"hex\", HexStr(ssBlock.begin(), ssBlock.end()));\n+    }\n     return obj;\n }\n \n@@ -1187,7 +1200,7 @@ static const CRPCCommand commands[] =\n \n     { \"generating\",         \"generatetoaddress\",      &generatetoaddress,      {\"nblocks\",\"address\",\"maxtries\"} },\n     { \"generating\",         \"generatetodescriptor\",   &generatetodescriptor,   {\"num_blocks\",\"descriptor\",\"maxtries\"} },\n-    { \"generating\",         \"generateblock\",          &generateblock,          {\"output\",\"transactions\"} },\n+    { \"generating\",         \"generateblock\",          &generateblock,          {\"output\",\"transactions\",\"submit\"} },\n \n     { \"util\",               \"estimatesmartfee\",       &estimatesmartfee,       {\"conf_target\", \"estimate_mode\"} },\n "
      },
      {
        "sha": "a3f708858cbacf62f634a278c168edcdfee09977",
        "filename": "test/functional/rpc_generateblock.py",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa58b4cd1801053a7e3b19a34115ed6fb68ff3c3/test/functional/rpc_generateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa58b4cd1801053a7e3b19a34115ed6fb68ff3c3/test/functional/rpc_generateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_generateblock.py?ref=fa58b4cd1801053a7e3b19a34115ed6fb68ff3c3",
        "patch": "@@ -22,8 +22,13 @@ def skip_test_if_missing_module(self):\n     def run_test(self):\n         node = self.nodes[0]\n \n-        self.log.info('Generate an empty block to address')\n+        self.log.info('Mine an empty block to address and return the hex')\n         address = node.getnewaddress()\n+        generated_block = node.generateblock(output=address, transactions=[], submit=False)\n+        node.submitblock(hexdata=generated_block['hex'])\n+        assert_equal(generated_block['hash'], node.getbestblockhash())\n+\n+        self.log.info('Generate an empty block to address')\n         hash = node.generateblock(output=address, transactions=[])['hash']\n         block = node.getblock(blockhash=hash, verbose=2)\n         assert_equal(len(block['tx']), 1)"
      }
    ]
  }
]