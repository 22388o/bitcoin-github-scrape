[
  {
    "sha": "5412f165dd560962f73a043c8d3bbfc7768df144",
    "node_id": "C_kwDOABII59oAKDU0MTJmMTY1ZGQ1NjA5NjJmNzNhMDQzYzhkM2JiZmM3NzY4ZGYxNDQ",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-07-21T01:24:56Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-22T17:08:51Z"
      },
      "message": "psbt: sign without finalizing\n\nWe don't always want to finalize after signing, so make it possible to\ndo that.",
      "tree": {
        "sha": "624f562fd8ac1fd86e06c22a9e677cf48b7b300d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/624f562fd8ac1fd86e06c22a9e677cf48b7b300d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5412f165dd560962f73a043c8d3bbfc7768df144",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5412f165dd560962f73a043c8d3bbfc7768df144",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5412f165dd560962f73a043c8d3bbfc7768df144",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5412f165dd560962f73a043c8d3bbfc7768df144/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "95d19f8c1a40a7531d2bb00febd245d127293a64",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95d19f8c1a40a7531d2bb00febd245d127293a64",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/95d19f8c1a40a7531d2bb00febd245d127293a64"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 32,
      "deletions": 20
    },
    "files": [
      {
        "sha": "6585766807a70b6463116babd398eb478001fd4a",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5412f165dd560962f73a043c8d3bbfc7768df144/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5412f165dd560962f73a043c8d3bbfc7768df144/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=5412f165dd560962f73a043c8d3bbfc7768df144",
        "patch": "@@ -247,7 +247,7 @@ PrecomputedTransactionData PrecomputePSBTData(const PartiallySignedTransaction&\n     return txdata;\n }\n \n-bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, const PrecomputedTransactionData* txdata, int sighash, SignatureData* out_sigdata)\n+bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, const PrecomputedTransactionData* txdata, int sighash,  SignatureData* out_sigdata, bool finalize)\n {\n     PSBTInput& input = psbt.inputs.at(index);\n     const CMutableTransaction& tx = *psbt.tx;\n@@ -295,6 +295,10 @@ bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction&\n     }\n     // Verify that a witness signature was produced in case one was required.\n     if (require_witness_sig && !sigdata.witness) return false;\n+\n+    // If we are not finalizing, set sigdata.complete to false to not set the scriptWitness\n+    if (!finalize && sigdata.complete) sigdata.complete = false;\n+\n     input.FromSignatureData(sigdata);\n \n     // If we have a witness signature, put a witness UTXO.\n@@ -324,7 +328,7 @@ bool FinalizePSBT(PartiallySignedTransaction& psbtx)\n     bool complete = true;\n     const PrecomputedTransactionData txdata = PrecomputePSBTData(psbtx);\n     for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n-        complete &= SignPSBTInput(DUMMY_SIGNING_PROVIDER, psbtx, i, &txdata, SIGHASH_ALL);\n+        complete &= SignPSBTInput(DUMMY_SIGNING_PROVIDER, psbtx, i, &txdata, SIGHASH_ALL, nullptr, true);\n     }\n \n     return complete;"
      },
      {
        "sha": "7808a247c0551063c504ee4ea15126b4f6a090c5",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5412f165dd560962f73a043c8d3bbfc7768df144/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5412f165dd560962f73a043c8d3bbfc7768df144/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=5412f165dd560962f73a043c8d3bbfc7768df144",
        "patch": "@@ -578,7 +578,7 @@ bool PSBTInputSigned(const PSBTInput& input);\n  * txdata should be the output of PrecomputePSBTData (which can be shared across\n  * multiple SignPSBTInput calls). If it is nullptr, a dummy signature will be created.\n  **/\n-bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, const PrecomputedTransactionData* txdata, int sighash = SIGHASH_ALL, SignatureData* out_sigdata = nullptr);\n+bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, const PrecomputedTransactionData* txdata, int sighash = SIGHASH_ALL, SignatureData* out_sigdata = nullptr, bool finalize = true);\n \n /** Counts the unsigned inputs of a PSBT. */\n size_t CountPSBTUnsignedInputs(const PartiallySignedTransaction& psbt);"
      },
      {
        "sha": "90fbd823a42c0196caa13106199d71b92a7fb9af",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5412f165dd560962f73a043c8d3bbfc7768df144/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5412f165dd560962f73a043c8d3bbfc7768df144/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=5412f165dd560962f73a043c8d3bbfc7768df144",
        "patch": "@@ -115,6 +115,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"walletcreatefundedpsbt\", 4, \"bip32derivs\" },\n     { \"walletprocesspsbt\", 1, \"sign\" },\n     { \"walletprocesspsbt\", 3, \"bip32derivs\" },\n+    { \"walletprocesspsbt\", 4, \"finalize\" },\n     { \"createpsbt\", 0, \"inputs\" },\n     { \"createpsbt\", 1, \"outputs\" },\n     { \"createpsbt\", 2, \"locktime\" },"
      },
      {
        "sha": "6a73efb47273f2d61b279e96e0638b04994732f4",
        "filename": "src/wallet/external_signer_scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5412f165dd560962f73a043c8d3bbfc7768df144/src/wallet/external_signer_scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5412f165dd560962f73a043c8d3bbfc7768df144/src/wallet/external_signer_scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/external_signer_scriptpubkeyman.cpp?ref=5412f165dd560962f73a043c8d3bbfc7768df144",
        "patch": "@@ -60,10 +60,10 @@ bool ExternalSignerScriptPubKeyMan::DisplayAddress(const CScript scriptPubKey, c\n }\n \n // If sign is true, transaction must previously have been filled\n-TransactionError ExternalSignerScriptPubKeyMan::FillPSBT(PartiallySignedTransaction& psbt, const PrecomputedTransactionData& txdata, int sighash_type, bool sign, bool bip32derivs, int* n_signed) const\n+TransactionError ExternalSignerScriptPubKeyMan::FillPSBT(PartiallySignedTransaction& psbt, const PrecomputedTransactionData& txdata, int sighash_type, bool sign, bool bip32derivs, int* n_signed, bool finalize) const\n {\n     if (!sign) {\n-        return DescriptorScriptPubKeyMan::FillPSBT(psbt, txdata, sighash_type, false, bip32derivs, n_signed);\n+        return DescriptorScriptPubKeyMan::FillPSBT(psbt, txdata, sighash_type, false, bip32derivs, n_signed, finalize);\n     }\n \n     // Already complete if every input is now signed\n@@ -79,6 +79,6 @@ TransactionError ExternalSignerScriptPubKeyMan::FillPSBT(PartiallySignedTransact\n         tfm::format(std::cerr, \"Failed to sign: %s\\n\", strFailReason);\n         return TransactionError::EXTERNAL_SIGNER_FAILED;\n     }\n-    FinalizePSBT(psbt); // This won't work in a multisig setup\n+    if (finalize) FinalizePSBT(psbt); // This won't work in a multisig setup\n     return TransactionError::OK;\n }"
      },
      {
        "sha": "53d65d9e460638d5b66f488af2f2faa80fdd977a",
        "filename": "src/wallet/external_signer_scriptpubkeyman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5412f165dd560962f73a043c8d3bbfc7768df144/src/wallet/external_signer_scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5412f165dd560962f73a043c8d3bbfc7768df144/src/wallet/external_signer_scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/external_signer_scriptpubkeyman.h?ref=5412f165dd560962f73a043c8d3bbfc7768df144",
        "patch": "@@ -28,6 +28,6 @@ class ExternalSignerScriptPubKeyMan : public DescriptorScriptPubKeyMan\n \n   bool DisplayAddress(const CScript scriptPubKey, const ExternalSigner &signer) const;\n \n-  TransactionError FillPSBT(PartiallySignedTransaction& psbt, const PrecomputedTransactionData& txdata, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false, int* n_signed = nullptr) const override;\n+  TransactionError FillPSBT(PartiallySignedTransaction& psbt, const PrecomputedTransactionData& txdata, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false, int* n_signed = nullptr, bool finalize = true) const override;\n };\n #endif // BITCOIN_WALLET_EXTERNAL_SIGNER_SCRIPTPUBKEYMAN_H"
      },
      {
        "sha": "a7fddb2c201c4cd63f6de6769753e7c970966894",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5412f165dd560962f73a043c8d3bbfc7768df144/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5412f165dd560962f73a043c8d3bbfc7768df144/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=5412f165dd560962f73a043c8d3bbfc7768df144",
        "patch": "@@ -4551,6 +4551,7 @@ static RPCHelpMan walletprocesspsbt()\n             \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n             \"       \\\"SINGLE|ANYONECANPAY\\\"\"},\n                     {\"bip32derivs\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Include BIP 32 derivation paths for public keys if we know them\"},\n+                    {\"finalize\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Also finalize inputs if possible\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n@@ -4572,7 +4573,7 @@ static RPCHelpMan walletprocesspsbt()\n     // the user could have gotten from another RPC command prior to now\n     wallet.BlockUntilSyncedToCurrentChain();\n \n-    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VBOOL, UniValue::VSTR});\n+    RPCTypeCheck(request.params, {UniValue::VSTR});\n \n     // Unserialize the transaction\n     PartiallySignedTransaction psbtx;\n@@ -4587,11 +4588,12 @@ static RPCHelpMan walletprocesspsbt()\n     // Fill transaction with our data and also sign\n     bool sign = request.params[1].isNull() ? true : request.params[1].get_bool();\n     bool bip32derivs = request.params[3].isNull() ? true : request.params[3].get_bool();\n+    bool finalize = request.params[4].isNull() ? true : request.params[4].get_bool();\n     bool complete = true;\n \n     if (sign) EnsureWalletIsUnlocked(*pwallet);\n \n-    const TransactionError err{wallet.FillPSBT(psbtx, complete, nHashType, sign, bip32derivs)};\n+    const TransactionError err{wallet.FillPSBT(psbtx, complete, nHashType, sign, bip32derivs, nullptr, finalize)};\n     if (err != TransactionError::OK) {\n         throw JSONRPCTransactionError(err);\n     }"
      },
      {
        "sha": "a82eaa487947146e3fd3ff545e151cf9792afac0",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5412f165dd560962f73a043c8d3bbfc7768df144/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5412f165dd560962f73a043c8d3bbfc7768df144/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=5412f165dd560962f73a043c8d3bbfc7768df144",
        "patch": "@@ -610,7 +610,7 @@ SigningResult LegacyScriptPubKeyMan::SignMessage(const std::string& message, con\n     return SigningResult::SIGNING_FAILED;\n }\n \n-TransactionError LegacyScriptPubKeyMan::FillPSBT(PartiallySignedTransaction& psbtx, const PrecomputedTransactionData& txdata, int sighash_type, bool sign, bool bip32derivs, int* n_signed) const\n+TransactionError LegacyScriptPubKeyMan::FillPSBT(PartiallySignedTransaction& psbtx, const PrecomputedTransactionData& txdata, int sighash_type, bool sign, bool bip32derivs, int* n_signed, bool finalize) const\n {\n     if (n_signed) {\n         *n_signed = 0;\n@@ -639,7 +639,7 @@ TransactionError LegacyScriptPubKeyMan::FillPSBT(PartiallySignedTransaction& psb\n         }\n         SignatureData sigdata;\n         input.FillSignatureData(sigdata);\n-        SignPSBTInput(HidingSigningProvider(this, !sign, !bip32derivs), psbtx, i, &txdata, sighash_type);\n+        SignPSBTInput(HidingSigningProvider(this, !sign, !bip32derivs), psbtx, i, &txdata, sighash_type, nullptr, finalize);\n \n         bool signed_one = PSBTInputSigned(input);\n         if (n_signed && (signed_one || !sign)) {\n@@ -2074,7 +2074,7 @@ SigningResult DescriptorScriptPubKeyMan::SignMessage(const std::string& message,\n     return SigningResult::OK;\n }\n \n-TransactionError DescriptorScriptPubKeyMan::FillPSBT(PartiallySignedTransaction& psbtx, const PrecomputedTransactionData& txdata, int sighash_type, bool sign, bool bip32derivs, int* n_signed) const\n+TransactionError DescriptorScriptPubKeyMan::FillPSBT(PartiallySignedTransaction& psbtx, const PrecomputedTransactionData& txdata, int sighash_type, bool sign, bool bip32derivs, int* n_signed, bool finalize) const\n {\n     if (n_signed) {\n         *n_signed = 0;\n@@ -2124,7 +2124,7 @@ TransactionError DescriptorScriptPubKeyMan::FillPSBT(PartiallySignedTransaction&\n             }\n         }\n \n-        SignPSBTInput(HidingSigningProvider(keys.get(), !sign, !bip32derivs), psbtx, i, &txdata, sighash_type);\n+        SignPSBTInput(HidingSigningProvider(keys.get(), !sign, !bip32derivs), psbtx, i, &txdata, sighash_type, nullptr, finalize);\n \n         bool signed_one = PSBTInputSigned(input);\n         if (n_signed && (signed_one || !sign)) {"
      },
      {
        "sha": "9d2304a5429ee44d9634ebc94d5653b484e2eaa7",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5412f165dd560962f73a043c8d3bbfc7768df144/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5412f165dd560962f73a043c8d3bbfc7768df144/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=5412f165dd560962f73a043c8d3bbfc7768df144",
        "patch": "@@ -224,7 +224,7 @@ class ScriptPubKeyMan\n     /** Sign a message with the given script */\n     virtual SigningResult SignMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) const { return SigningResult::SIGNING_FAILED; };\n     /** Adds script and derivation path information to a PSBT, and optionally signs it. */\n-    virtual TransactionError FillPSBT(PartiallySignedTransaction& psbt, const PrecomputedTransactionData& txdata, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false, int* n_signed = nullptr) const { return TransactionError::INVALID_PSBT; }\n+    virtual TransactionError FillPSBT(PartiallySignedTransaction& psbt, const PrecomputedTransactionData& txdata, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false, int* n_signed = nullptr, bool finalize = true) const { return TransactionError::INVALID_PSBT; }\n \n     virtual uint256 GetID() const { return uint256(); }\n \n@@ -388,7 +388,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n \n     bool SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, bilingual_str>& input_errors) const override;\n     SigningResult SignMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) const override;\n-    TransactionError FillPSBT(PartiallySignedTransaction& psbt, const PrecomputedTransactionData& txdata, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false, int* n_signed = nullptr) const override;\n+    TransactionError FillPSBT(PartiallySignedTransaction& psbt, const PrecomputedTransactionData& txdata, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false, int* n_signed = nullptr, bool finalize = true) const override;\n \n     uint256 GetID() const override;\n \n@@ -593,7 +593,7 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n \n     bool SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, bilingual_str>& input_errors) const override;\n     SigningResult SignMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) const override;\n-    TransactionError FillPSBT(PartiallySignedTransaction& psbt, const PrecomputedTransactionData& txdata, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false, int* n_signed = nullptr) const override;\n+    TransactionError FillPSBT(PartiallySignedTransaction& psbt, const PrecomputedTransactionData& txdata, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false, int* n_signed = nullptr, bool finalize = true) const override;\n \n     uint256 GetID() const override;\n "
      },
      {
        "sha": "7601cad061f86a0a10e0e09acb271467ada0d276",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5412f165dd560962f73a043c8d3bbfc7768df144/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5412f165dd560962f73a043c8d3bbfc7768df144/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=5412f165dd560962f73a043c8d3bbfc7768df144",
        "patch": "@@ -1852,7 +1852,7 @@ bool CWallet::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint,\n     return false;\n }\n \n-TransactionError CWallet::FillPSBT(PartiallySignedTransaction& psbtx, bool& complete, int sighash_type, bool sign, bool bip32derivs, size_t * n_signed) const\n+TransactionError CWallet::FillPSBT(PartiallySignedTransaction& psbtx, bool& complete, int sighash_type, bool sign, bool bip32derivs, size_t * n_signed, bool finalize) const\n {\n     if (n_signed) {\n         *n_signed = 0;\n@@ -1884,7 +1884,7 @@ TransactionError CWallet::FillPSBT(PartiallySignedTransaction& psbtx, bool& comp\n     // Fill in information from ScriptPubKeyMans\n     for (ScriptPubKeyMan* spk_man : GetAllScriptPubKeyMans()) {\n         int n_signed_this_spkm = 0;\n-        TransactionError res = spk_man->FillPSBT(psbtx, txdata, sighash_type, sign, bip32derivs, &n_signed_this_spkm);\n+        TransactionError res = spk_man->FillPSBT(psbtx, txdata, sighash_type, sign, bip32derivs, &n_signed_this_spkm, finalize);\n         if (res != TransactionError::OK) {\n             return res;\n         }"
      },
      {
        "sha": "5f47a58dcac6f0f61f9c6b86fed40fdf16838c04",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5412f165dd560962f73a043c8d3bbfc7768df144/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5412f165dd560962f73a043c8d3bbfc7768df144/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=5412f165dd560962f73a043c8d3bbfc7768df144",
        "patch": "@@ -555,14 +555,17 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n      * @param[in]  sighash_type the sighash type to use when signing (if PSBT does not specify)\n      * @param[in]  sign whether to sign or not\n      * @param[in]  bip32derivs whether to fill in bip32 derivation information if available\n+     * @param[out] n_signed the number of inputs signed by this wallet\n+     * @param[in] finalize whether to create the final scriptSig or scriptWitness if possible\n      * return error\n      */\n     TransactionError FillPSBT(PartiallySignedTransaction& psbtx,\n                   bool& complete,\n                   int sighash_type = 1 /* SIGHASH_ALL */,\n                   bool sign = true,\n                   bool bip32derivs = true,\n-                  size_t* n_signed = nullptr) const;\n+                  size_t* n_signed = nullptr,\n+                  bool finalize = true) const;\n \n     /**\n      * Submit the transaction to the node's mempool and then relay to peers."
      },
      {
        "sha": "a8034849cc14af0c406c9c6038b45fd4b55ea22f",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5412f165dd560962f73a043c8d3bbfc7768df144/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5412f165dd560962f73a043c8d3bbfc7768df144/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=5412f165dd560962f73a043c8d3bbfc7768df144",
        "patch": "@@ -120,7 +120,9 @@ def run_test(self):\n         self.nodes[0].walletpassphrase(passphrase=\"password\", timeout=1000000)\n \n         # Sign the transaction and send\n-        signed_tx = self.nodes[0].walletprocesspsbt(psbtx)['psbt']\n+        signed_tx = self.nodes[0].walletprocesspsbt(psbt=psbtx, finalize=False)['psbt']\n+        finalized_tx = self.nodes[0].walletprocesspsbt(psbt=psbtx, finalize=True)['psbt']\n+        assert signed_tx != finalized_tx\n         final_tx = self.nodes[0].finalizepsbt(signed_tx)['hex']\n         self.nodes[0].sendrawtransaction(final_tx)\n "
      }
    ]
  },
  {
    "sha": "89c426f70cb2283ce4ed6db1680400fd623a31e3",
    "node_id": "C_kwDOABII59oAKDg5YzQyNmY3MGNiMjI4M2NlNGVkNmRiMTY4MDQwMGZkNjIzYTMxZTM",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-07-21T02:05:28Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-22T17:08:51Z"
      },
      "message": "psbt: Actually use SIGHASH_DEFAULT\n\nMake the behavior align with the help text by actually using\nSIGHASH_DEFAULT as the default sighash for signing PSBTs.",
      "tree": {
        "sha": "0b5b0123b68c1a8d302434a3ea2042f3da92660c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b5b0123b68c1a8d302434a3ea2042f3da92660c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/89c426f70cb2283ce4ed6db1680400fd623a31e3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89c426f70cb2283ce4ed6db1680400fd623a31e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/89c426f70cb2283ce4ed6db1680400fd623a31e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89c426f70cb2283ce4ed6db1680400fd623a31e3/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5412f165dd560962f73a043c8d3bbfc7768df144",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5412f165dd560962f73a043c8d3bbfc7768df144",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5412f165dd560962f73a043c8d3bbfc7768df144"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "484f41f262c44771ab716373c4732d3eff767326",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89c426f70cb2283ce4ed6db1680400fd623a31e3/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89c426f70cb2283ce4ed6db1680400fd623a31e3/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=89c426f70cb2283ce4ed6db1680400fd623a31e3",
        "patch": "@@ -248,7 +248,7 @@ std::vector<unsigned char> ParseHexUV(const UniValue& v, const std::string& strN\n \n int ParseSighashString(const UniValue& sighash)\n {\n-    int hash_type = SIGHASH_ALL;\n+    int hash_type = SIGHASH_DEFAULT;\n     if (!sighash.isNull()) {\n         static std::map<std::string, int> map_sighash_values = {\n             {std::string(\"DEFAULT\"), int(SIGHASH_DEFAULT)},"
      },
      {
        "sha": "bc8d573873edaf0d4fc0067252ab176afa0c7d8f",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89c426f70cb2283ce4ed6db1680400fd623a31e3/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89c426f70cb2283ce4ed6db1680400fd623a31e3/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=89c426f70cb2283ce4ed6db1680400fd623a31e3",
        "patch": "@@ -624,7 +624,7 @@ TransactionError LegacyScriptPubKeyMan::FillPSBT(PartiallySignedTransaction& psb\n         }\n \n         // Get the Sighash type\n-        if (sign && input.sighash_type > 0 && input.sighash_type != sighash_type) {\n+        if (sign && input.sighash_type > 0 && sighash_type > 0 && input.sighash_type != sighash_type) {\n             return TransactionError::SIGHASH_MISMATCH;\n         }\n \n@@ -2088,7 +2088,7 @@ TransactionError DescriptorScriptPubKeyMan::FillPSBT(PartiallySignedTransaction&\n         }\n \n         // Get the Sighash type\n-        if (sign && input.sighash_type > 0 && input.sighash_type != sighash_type) {\n+        if (sign && input.sighash_type > 0 && sighash_type > 0 && input.sighash_type != sighash_type) {\n             return TransactionError::SIGHASH_MISMATCH;\n         }\n "
      },
      {
        "sha": "0ffd798edac34c28b80bc6c0baa5a3d02134851f",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89c426f70cb2283ce4ed6db1680400fd623a31e3/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89c426f70cb2283ce4ed6db1680400fd623a31e3/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=89c426f70cb2283ce4ed6db1680400fd623a31e3",
        "patch": "@@ -224,7 +224,7 @@ class ScriptPubKeyMan\n     /** Sign a message with the given script */\n     virtual SigningResult SignMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) const { return SigningResult::SIGNING_FAILED; };\n     /** Adds script and derivation path information to a PSBT, and optionally signs it. */\n-    virtual TransactionError FillPSBT(PartiallySignedTransaction& psbt, const PrecomputedTransactionData& txdata, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false, int* n_signed = nullptr, bool finalize = true) const { return TransactionError::INVALID_PSBT; }\n+    virtual TransactionError FillPSBT(PartiallySignedTransaction& psbt, const PrecomputedTransactionData& txdata, int sighash_type = 0 /* SIGHASH_DEFAULT */, bool sign = true, bool bip32derivs = false, int* n_signed = nullptr, bool finalize = true) const { return TransactionError::INVALID_PSBT; }\n \n     virtual uint256 GetID() const { return uint256(); }\n \n@@ -388,7 +388,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n \n     bool SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, bilingual_str>& input_errors) const override;\n     SigningResult SignMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) const override;\n-    TransactionError FillPSBT(PartiallySignedTransaction& psbt, const PrecomputedTransactionData& txdata, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false, int* n_signed = nullptr, bool finalize = true) const override;\n+    TransactionError FillPSBT(PartiallySignedTransaction& psbt, const PrecomputedTransactionData& txdata, int sighash_type = 0 /* SIGHASH_DEFAULT */, bool sign = true, bool bip32derivs = false, int* n_signed = nullptr, bool finalize = true) const override;\n \n     uint256 GetID() const override;\n \n@@ -593,7 +593,7 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n \n     bool SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, bilingual_str>& input_errors) const override;\n     SigningResult SignMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) const override;\n-    TransactionError FillPSBT(PartiallySignedTransaction& psbt, const PrecomputedTransactionData& txdata, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false, int* n_signed = nullptr, bool finalize = true) const override;\n+    TransactionError FillPSBT(PartiallySignedTransaction& psbt, const PrecomputedTransactionData& txdata, int sighash_type = 0 /* SIGHASH_DEFAULT */, bool sign = true, bool bip32derivs = false, int* n_signed = nullptr, bool finalize = true) const override;\n \n     uint256 GetID() const override;\n "
      },
      {
        "sha": "c293c133488c8564eb84986fcd197adcade07b48",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89c426f70cb2283ce4ed6db1680400fd623a31e3/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89c426f70cb2283ce4ed6db1680400fd623a31e3/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=89c426f70cb2283ce4ed6db1680400fd623a31e3",
        "patch": "@@ -561,7 +561,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n      */\n     TransactionError FillPSBT(PartiallySignedTransaction& psbtx,\n                   bool& complete,\n-                  int sighash_type = 1 /* SIGHASH_ALL */,\n+                  int sighash_type = 0 /* SIGHASH_DEFAULT */,\n                   bool sign = true,\n                   bool bip32derivs = true,\n                   size_t* n_signed = nullptr,"
      }
    ]
  },
  {
    "sha": "31fc55527b7213dcee98444d2f1dedce40614e48",
    "node_id": "C_kwDOABII59oAKDMxZmM1NTUyN2I3MjEzZGNlZTk4NDQ0ZDJmMWRlZGNlNDA2MTRlNDg",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-07-12T19:31:12Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-22T17:08:51Z"
      },
      "message": "Move individual KeyOriginInfo de/ser to separate function\n\nTo make it easier to de/serialize individual KeyOriginInfo for PSBTs,\nseparate the actual de/serialization of KeyOriginInfo to its own\nfunction.",
      "tree": {
        "sha": "58761adcb188037a90328a7ba563e1d3e63d4513",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/58761adcb188037a90328a7ba563e1d3e63d4513"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/31fc55527b7213dcee98444d2f1dedce40614e48",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31fc55527b7213dcee98444d2f1dedce40614e48",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/31fc55527b7213dcee98444d2f1dedce40614e48",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31fc55527b7213dcee98444d2f1dedce40614e48/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "89c426f70cb2283ce4ed6db1680400fd623a31e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89c426f70cb2283ce4ed6db1680400fd623a31e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/89c426f70cb2283ce4ed6db1680400fd623a31e3"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 27,
      "deletions": 17
    },
    "files": [
      {
        "sha": "db7b86bde0bca72e2e93bf382c68000df40af5af",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 27,
        "deletions": 17,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31fc55527b7213dcee98444d2f1dedce40614e48/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31fc55527b7213dcee98444d2f1dedce40614e48/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=31fc55527b7213dcee98444d2f1dedce40614e48",
        "patch": "@@ -106,6 +106,23 @@ void UnserializeFromVector(Stream& s, X&... args)\n     }\n }\n \n+template<typename Stream>\n+KeyOriginInfo DeserializeKeyOrigin(Stream& s, uint64_t length)\n+{\n+    if (length % 4 || length == 0) {\n+        throw std::ios_base::failure(\"Invalid length for HD key path\");\n+    }\n+\n+    KeyOriginInfo keypath;\n+    s >> keypath.fingerprint;\n+    for (unsigned int i = 4; i < length; i += sizeof(uint32_t)) {\n+        uint32_t index;\n+        s >> index;\n+        keypath.path.push_back(index);\n+    }\n+    return keypath;\n+}\n+\n // Deserialize HD keypaths into a map\n template<typename Stream>\n void DeserializeHDKeypaths(Stream& s, const std::vector<unsigned char>& key, std::map<CPubKey, KeyOriginInfo>& hd_keypaths)\n@@ -123,22 +140,18 @@ void DeserializeHDKeypaths(Stream& s, const std::vector<unsigned char>& key, std\n         throw std::ios_base::failure(\"Duplicate Key, pubkey derivation path already provided\");\n     }\n \n-    // Read in key path\n+    // Read in key path and add to map\n     uint64_t value_len = ReadCompactSize(s);\n-    if (value_len % 4 || value_len == 0) {\n-        throw std::ios_base::failure(\"Invalid length for HD key path\");\n-    }\n+    hd_keypaths.emplace(pubkey, DeserializeKeyOrigin(s, value_len));\n+}\n \n-    KeyOriginInfo keypath;\n-    s >> keypath.fingerprint;\n-    for (unsigned int i = 4; i < value_len; i += sizeof(uint32_t)) {\n-        uint32_t index;\n-        s >> index;\n-        keypath.path.push_back(index);\n+template<typename Stream>\n+void SerializeKeyOrigin(Stream& s, KeyOriginInfo origin)\n+{\n+    s << origin.fingerprint;\n+    for (const auto& path : origin.path) {\n+        s << path;\n     }\n-\n-    // Add to map\n-    hd_keypaths.emplace(pubkey, std::move(keypath));\n }\n \n // Serialize HD keypaths to a stream from a map\n@@ -151,10 +164,7 @@ void SerializeHDKeypaths(Stream& s, const std::map<CPubKey, KeyOriginInfo>& hd_k\n         }\n         SerializeToVector(s, type, MakeSpan(keypath_pair.first));\n         WriteCompactSize(s, (keypath_pair.second.path.size() + 1) * sizeof(uint32_t));\n-        s << keypath_pair.second.fingerprint;\n-        for (const auto& path : keypath_pair.second.path) {\n-            s << path;\n-        }\n+        SerializeKeyOrigin(s, keypath_pair.second);\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "1f009ee6553b60f7a5da4e8e7af02f26c68fcda8",
    "node_id": "C_kwDOABII59oAKDFmMDA5ZWU2NTUzYjYwZjdhNWRhNGU4ZTdhZjAyZjI2YzY4ZmNkYTg",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-07-12T21:04:46Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-22T17:08:51Z"
      },
      "message": "Add TaprootBuilder::GetTreeTuples\n\nGetTreeTuples returns the leaves in DFS order as tuples of depth, leaf\nversion, and script. This is a representation of the tree that can be\nserialized.",
      "tree": {
        "sha": "eb149fbda8fa62ce39c18d85eeaf7769851fd7fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eb149fbda8fa62ce39c18d85eeaf7769851fd7fa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1f009ee6553b60f7a5da4e8e7af02f26c68fcda8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f009ee6553b60f7a5da4e8e7af02f26c68fcda8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1f009ee6553b60f7a5da4e8e7af02f26c68fcda8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f009ee6553b60f7a5da4e8e7af02f26c68fcda8/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "31fc55527b7213dcee98444d2f1dedce40614e48",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31fc55527b7213dcee98444d2f1dedce40614e48",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/31fc55527b7213dcee98444d2f1dedce40614e48"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 17,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ca27c175ee02546024cc6894173b62ddd0add883",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f009ee6553b60f7a5da4e8e7af02f26c68fcda8/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f009ee6553b60f7a5da4e8e7af02f26c68fcda8/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=1f009ee6553b60f7a5da4e8e7af02f26c68fcda8",
        "patch": "@@ -621,3 +621,18 @@ std::optional<std::vector<std::tuple<int, CScript, int>>> InferTaprootTree(const\n \n     return ret;\n }\n+\n+std::vector<std::tuple<uint8_t, uint8_t, CScript>> TaprootBuilder::GetTreeTuples() const\n+{\n+    assert(IsComplete());\n+    std::vector<std::tuple<uint8_t, uint8_t, CScript>> tuples;\n+    if (m_branch.size()) {\n+        const auto& leaves = m_branch[0]->leaves;\n+        for (const auto& leaf : leaves) {\n+            uint8_t depth = (uint8_t)leaf.merkle_branch.size();\n+            uint8_t leaf_ver = (uint8_t)leaf.leaf_version;\n+            tuples.push_back(std::make_tuple(depth, leaf_ver, leaf.script));\n+        }\n+    }\n+    return tuples;\n+}"
      },
      {
        "sha": "5740acf8097ffb74219642979fc588328f99bfd7",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f009ee6553b60f7a5da4e8e7af02f26c68fcda8/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f009ee6553b60f7a5da4e8e7af02f26c68fcda8/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=1f009ee6553b60f7a5da4e8e7af02f26c68fcda8",
        "patch": "@@ -312,6 +312,8 @@ class TaprootBuilder\n     static bool ValidDepths(const std::vector<int>& depths);\n     /** Compute spending data (after Finalize()). */\n     TaprootSpendData GetSpendData() const;\n+    /** Returns a vector of tuples representing the depth, leaf version, and script */\n+    std::vector<std::tuple<uint8_t, uint8_t, CScript>> GetTreeTuples() const;\n };\n \n /** Given a TaprootSpendData and the output key, reconstruct its script tree."
      }
    ]
  },
  {
    "sha": "a3b35324754040d397f50529ef959e27ee968c6b",
    "node_id": "C_kwDOABII59oAKGEzYjM1MzI0NzU0MDQwZDM5N2Y1MDUyOWVmOTU5ZTI3ZWU5NjhjNmI",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-07-12T21:05:42Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-22T17:08:51Z"
      },
      "message": "Add TaprootBuilder::IsEmpty\n\nHelper function to know whether the tree has any data in it.",
      "tree": {
        "sha": "d6208f660a7c6bbfb31388508aa11a4a5421df11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d6208f660a7c6bbfb31388508aa11a4a5421df11"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a3b35324754040d397f50529ef959e27ee968c6b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3b35324754040d397f50529ef959e27ee968c6b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a3b35324754040d397f50529ef959e27ee968c6b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3b35324754040d397f50529ef959e27ee968c6b/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1f009ee6553b60f7a5da4e8e7af02f26c68fcda8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f009ee6553b60f7a5da4e8e7af02f26c68fcda8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1f009ee6553b60f7a5da4e8e7af02f26c68fcda8"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b6a2fae620790a82d4e416723262757d83bf86de",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3b35324754040d397f50529ef959e27ee968c6b/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3b35324754040d397f50529ef959e27ee968c6b/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=a3b35324754040d397f50529ef959e27ee968c6b",
        "patch": "@@ -304,6 +304,8 @@ class TaprootBuilder\n \n     /** Return true if so far all input was valid. */\n     bool IsValid() const { return m_valid; }\n+    /** Return true if there are no leaves */\n+    bool IsEmpty() const { return m_branch.size() == 0; }\n     /** Return whether there were either no leaves, or the leaves form a Huffman tree. */\n     bool IsComplete() const { return m_valid && (m_branch.size() == 0 || (m_branch.size() == 1 && m_branch[0].has_value())); }\n     /** Compute scriptPubKey (after Finalize()). */"
      }
    ]
  },
  {
    "sha": "cec654efc1b8ed7659f5f40314d9db470f273c7a",
    "node_id": "C_kwDOABII59oAKGNlYzY1NGVmYzFiOGVkNzY1OWY1ZjQwMzE0ZDlkYjQ3MGYyNzNjN2E",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-07-12T21:06:20Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-22T17:08:51Z"
      },
      "message": "Add serialization methods to XOnlyPubKey\n\nIt is useful to have serialzation methods for XOnlyPubKey. These will\nserialize the internal uint256, so it is not prefixed with the length as\nCPubKey does.",
      "tree": {
        "sha": "f876ed31f0a2b01d7d319c4ba2c5e5fa38876ca2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f876ed31f0a2b01d7d319c4ba2c5e5fa38876ca2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cec654efc1b8ed7659f5f40314d9db470f273c7a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cec654efc1b8ed7659f5f40314d9db470f273c7a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cec654efc1b8ed7659f5f40314d9db470f273c7a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cec654efc1b8ed7659f5f40314d9db470f273c7a/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a3b35324754040d397f50529ef959e27ee968c6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3b35324754040d397f50529ef959e27ee968c6b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a3b35324754040d397f50529ef959e27ee968c6b"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3cca2b3b9a0210b0db41df39c2e89579164f26e4",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cec654efc1b8ed7659f5f40314d9db470f273c7a/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cec654efc1b8ed7659f5f40314d9db470f273c7a/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=cec654efc1b8ed7659f5f40314d9db470f273c7a",
        "patch": "@@ -282,6 +282,9 @@ class XOnlyPubKey\n     bool operator==(const XOnlyPubKey& other) const { return m_keydata == other.m_keydata; }\n     bool operator!=(const XOnlyPubKey& other) const { return m_keydata != other.m_keydata; }\n     bool operator<(const XOnlyPubKey& other) const { return m_keydata < other.m_keydata; }\n+\n+    //! Implement serialization without length prefixes since it is a fixed length\n+    SERIALIZE_METHODS(XOnlyPubKey, obj) { READWRITE(obj.m_keydata); }\n };\n \n struct CExtPubKey {"
      }
    ]
  },
  {
    "sha": "64dc0962d3644df0d6abf39ec4c8987eaef714e8",
    "node_id": "C_kwDOABII59oAKDY0ZGMwOTYyZDM2NDRkZjBkNmFiZjM5ZWM0Yzg5ODdlYWVmNzE0ZTg",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-07-12T21:07:08Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-22T17:08:51Z"
      },
      "message": "Implement de/ser of PSBT's Taproot fields",
      "tree": {
        "sha": "1795bf5dcc1ac99d436584489cd7ab337867bd43",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1795bf5dcc1ac99d436584489cd7ab337867bd43"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/64dc0962d3644df0d6abf39ec4c8987eaef714e8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64dc0962d3644df0d6abf39ec4c8987eaef714e8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/64dc0962d3644df0d6abf39ec4c8987eaef714e8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64dc0962d3644df0d6abf39ec4c8987eaef714e8/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cec654efc1b8ed7659f5f40314d9db470f273c7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cec654efc1b8ed7659f5f40314d9db470f273c7a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cec654efc1b8ed7659f5f40314d9db470f273c7a"
      }
    ],
    "stats": {
      "total": 243,
      "additions": 243,
      "deletions": 0
    },
    "files": [
      {
        "sha": "dbc1446ccc0c65fb325157ae7bd20b3de82babb2",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 243,
        "deletions": 0,
        "changes": 243,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64dc0962d3644df0d6abf39ec4c8987eaef714e8/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64dc0962d3644df0d6abf39ec4c8987eaef714e8/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=64dc0962d3644df0d6abf39ec4c8987eaef714e8",
        "patch": "@@ -31,11 +31,20 @@ static constexpr uint8_t PSBT_IN_WITNESSSCRIPT = 0x05;\n static constexpr uint8_t PSBT_IN_BIP32_DERIVATION = 0x06;\n static constexpr uint8_t PSBT_IN_SCRIPTSIG = 0x07;\n static constexpr uint8_t PSBT_IN_SCRIPTWITNESS = 0x08;\n+static constexpr uint8_t PSBT_IN_TAP_KEY_SIG = 0x13;\n+static constexpr uint8_t PSBT_IN_TAP_SCRIPT_SIG = 0x14;\n+static constexpr uint8_t PSBT_IN_TAP_LEAF_SCRIPT = 0x15;\n+static constexpr uint8_t PSBT_IN_TAP_BIP32_DERIVATION = 0x16;\n+static constexpr uint8_t PSBT_IN_TAP_INTERNAL_KEY = 0x17;\n+static constexpr uint8_t PSBT_IN_TAP_MERKLE_ROOT = 0x18;\n \n // Output types\n static constexpr uint8_t PSBT_OUT_REDEEMSCRIPT = 0x00;\n static constexpr uint8_t PSBT_OUT_WITNESSSCRIPT = 0x01;\n static constexpr uint8_t PSBT_OUT_BIP32_DERIVATION = 0x02;\n+static constexpr uint8_t PSBT_OUT_TAP_INTERNAL_KEY = 0x05;\n+static constexpr uint8_t PSBT_OUT_TAP_TREE = 0x06;\n+static constexpr uint8_t PSBT_OUT_TAP_BIP32_DERIVATION = 0x07;\n \n // The separator is 0x00. Reading this in means that the unserializer can interpret it\n // as a 0 length key which indicates that this is the separator. The separator has no value.\n@@ -56,6 +65,12 @@ struct PSBTInput\n     CScriptWitness final_script_witness;\n     std::map<CPubKey, KeyOriginInfo> hd_keypaths;\n     std::map<CKeyID, SigPair> partial_sigs;\n+    std::vector<unsigned char> m_tap_key_sig;\n+    std::map<std::pair<XOnlyPubKey, uint256>, std::vector<unsigned char>> m_tap_script_sigs;\n+    std::map<std::pair<CScript, int>, std::set<std::vector<unsigned char>, ShortestVectorFirstComparator>> m_tap_scripts;\n+    std::map<XOnlyPubKey, std::pair<std::set<uint256>, KeyOriginInfo>> m_tap_keypaths;\n+    XOnlyPubKey m_tap_internal_key;\n+    uint256 m_tap_merkle_root;\n     std::map<std::vector<unsigned char>, std::vector<unsigned char>> unknown;\n     int sighash_type = 0;\n \n@@ -105,6 +120,53 @@ struct PSBTInput\n \n             // Write any hd keypaths\n             SerializeHDKeypaths(s, hd_keypaths, PSBT_IN_BIP32_DERIVATION);\n+\n+            // Write taproot key sig\n+            if (!m_tap_key_sig.empty()) {\n+                SerializeToVector(s, PSBT_IN_TAP_KEY_SIG);\n+                s << m_tap_key_sig;\n+            }\n+\n+            // Write taproot script sigs\n+            for (const auto& [pubkey_leaf, sig] : m_tap_script_sigs) {\n+                const auto& [xonly, leaf_hash] = pubkey_leaf;\n+                SerializeToVector(s, PSBT_IN_TAP_SCRIPT_SIG, xonly, leaf_hash);\n+                s << sig;\n+            }\n+\n+            // Write taproot leaf scripts\n+            for (const auto& [leaf, control_blocks] : m_tap_scripts) {\n+                const auto& [script, leaf_ver] = leaf;\n+                for (const auto& control_block : control_blocks) {\n+                    SerializeToVector(s, PSBT_IN_TAP_LEAF_SCRIPT, MakeSpan(control_block));\n+                    std::vector<unsigned char> value_v(script.begin(), script.end());\n+                    value_v.push_back((uint8_t)leaf_ver);\n+                    s << value_v;\n+                }\n+            }\n+\n+            // Write taproot bip32 keypaths\n+            for (const auto& [xonly, leaf_origin] : m_tap_keypaths) {\n+                const auto& [leaf_hashes, origin] = leaf_origin;\n+                SerializeToVector(s, PSBT_IN_TAP_BIP32_DERIVATION, xonly);\n+                std::vector<unsigned char> value;\n+                CVectorWriter s_value(s.GetType(), s.GetVersion(), value, 0);\n+                s_value << leaf_hashes;\n+                SerializeKeyOrigin(s_value, origin);\n+                s << value;\n+            }\n+\n+            // Write taproot internal key\n+            if (!m_tap_internal_key.IsNull()) {\n+                SerializeToVector(s, PSBT_IN_TAP_INTERNAL_KEY);\n+                s << ToByteVector(m_tap_internal_key);\n+            }\n+\n+            // Write taproot merkle root\n+            if (!m_tap_merkle_root.IsNull()) {\n+                SerializeToVector(s, PSBT_IN_TAP_MERKLE_ROOT);\n+                SerializeToVector(s, m_tap_merkle_root);\n+            }\n         }\n \n         // Write script sig\n@@ -248,6 +310,101 @@ struct PSBTInput\n                     UnserializeFromVector(s, final_script_witness.stack);\n                     break;\n                 }\n+                case PSBT_IN_TAP_KEY_SIG:\n+                {\n+                    if (!key_lookup.emplace(key).second) {\n+                        throw std::ios_base::failure(\"Duplicate Key, input Taproot key signature already provided\");\n+                    } else if (key.size() != 1) {\n+                        throw std::ios_base::failure(\"Input Taproot key signature key is more than one byte type\");\n+                    }\n+                    s >> m_tap_key_sig;\n+                    if (m_tap_key_sig.size() < 64) {\n+                        throw std::ios_base::failure(\"Input Taproot key path signature is shorter than 64 bytes\");\n+                    } else if (m_tap_key_sig.size() > 65) {\n+                        throw std::ios_base::failure(\"Input Taproot key path signature is longer than 65 bytes\");\n+                    }\n+                    break;\n+                }\n+                case PSBT_IN_TAP_SCRIPT_SIG:\n+                {\n+                    if (!key_lookup.emplace(key).second) {\n+                        throw std::ios_base::failure(\"Duplicate Key, input Taproot script signature already provided\");\n+                    } else if (key.size() != 65) {\n+                        throw std::ios_base::failure(\"Input Taproot script signature key is not 65 bytes\");\n+                    }\n+                    VectorReader s_key(s.GetType(), s.GetVersion(), key, 1);\n+                    XOnlyPubKey xonly;\n+                    uint256 hash;\n+                    s_key >> xonly;\n+                    s_key >> hash;\n+                    std::vector<unsigned char> sig;\n+                    s >> sig;\n+                    if (sig.size() < 64) {\n+                        throw std::ios_base::failure(\"Input Taproot script path signature is shorter than 64 bytes\");\n+                    } else if (sig.size() > 65) {\n+                        throw std::ios_base::failure(\"Input Taproot script path signature is longer than 65 bytes\");\n+                    }\n+                    m_tap_script_sigs.emplace(std::make_pair(xonly, hash), sig);\n+                    break;\n+                }\n+                case PSBT_IN_TAP_LEAF_SCRIPT:\n+                {\n+                    if (!key_lookup.emplace(key).second) {\n+                        throw std::ios_base::failure(\"Duplicate Key, input Taproot leaf script already provided\");\n+                    } else if (key.size() < 34) {\n+                        throw std::ios_base::failure(\"Taproot leaf script key is not at least 34 bytes\");\n+                    } else if ((key.size() - 2) % 32 != 0) {\n+                        throw std::ios_base::failure(\"Input Taproot leaf script key's control block size is not valid\");\n+                    }\n+                    std::vector<unsigned char> script_v;\n+                    s >> script_v;\n+                    assert(!script_v.empty());\n+                    uint8_t leaf_ver = script_v.back();\n+                    script_v.pop_back();\n+                    const auto leaf_script = std::make_pair(CScript(script_v.begin(), script_v.end()), (int)leaf_ver);\n+                    m_tap_scripts[leaf_script].insert(std::vector<unsigned char>(key.begin() + 1, key.end()));\n+                    break;\n+                }\n+                case PSBT_IN_TAP_BIP32_DERIVATION:\n+                {\n+                    if (!key_lookup.emplace(key).second) {\n+                        throw std::ios_base::failure(\"Duplicate Key, input Taproot BIP32 keypath already provided\");\n+                    } else if (key.size() != 33) {\n+                        throw std::ios_base::failure(\"Input Taproot BIP32 keypath key is not at 33 bytes\");\n+                    }\n+                    VectorReader s_key(s.GetType(), s.GetVersion(), key, 1);\n+                    XOnlyPubKey xonly;\n+                    s_key >> xonly;\n+                    std::set<uint256> leaf_hashes;\n+                    uint64_t value_len = ReadCompactSize(s);\n+                    size_t before_hashes = s.size();\n+                    s >> leaf_hashes;\n+                    size_t after_hashes = s.size();\n+                    size_t hashes_len = before_hashes - after_hashes;\n+                    size_t origin_len = value_len - hashes_len;\n+                    m_tap_keypaths.emplace(xonly, std::make_pair(leaf_hashes, DeserializeKeyOrigin(s, origin_len)));\n+                    break;\n+                }\n+                case PSBT_IN_TAP_INTERNAL_KEY:\n+                {\n+                    if (!key_lookup.emplace(key).second) {\n+                        throw std::ios_base::failure(\"Duplicate Key, input Taproot internal key already provided\");\n+                    } else if (key.size() != 1) {\n+                        throw std::ios_base::failure(\"Input Taproot internal key key is more than one byte type\");\n+                    }\n+                    UnserializeFromVector(s, m_tap_internal_key);\n+                    break;\n+                }\n+                case PSBT_IN_TAP_MERKLE_ROOT:\n+                {\n+                    if (!key_lookup.emplace(key).second) {\n+                        throw std::ios_base::failure(\"Duplicate Key, input Taproot merkle root already provided\");\n+                    } else if (key.size() != 1) {\n+                        throw std::ios_base::failure(\"Input Taproot merkle root key is more than one byte type\");\n+                    }\n+                    UnserializeFromVector(s, m_tap_merkle_root);\n+                    break;\n+                }\n                 // Unknown stuff\n                 default:\n                     if (unknown.count(key) > 0) {\n@@ -278,6 +435,9 @@ struct PSBTOutput\n     CScript redeem_script;\n     CScript witness_script;\n     std::map<CPubKey, KeyOriginInfo> hd_keypaths;\n+    XOnlyPubKey m_tap_internal_key;\n+    TaprootBuilder m_tap_tree;\n+    std::map<XOnlyPubKey, std::pair<std::set<uint256>, KeyOriginInfo>> m_tap_keypaths;\n     std::map<std::vector<unsigned char>, std::vector<unsigned char>> unknown;\n \n     bool IsNull() const;\n@@ -303,6 +463,40 @@ struct PSBTOutput\n         // Write any hd keypaths\n         SerializeHDKeypaths(s, hd_keypaths, PSBT_OUT_BIP32_DERIVATION);\n \n+        // Write taproot internal key\n+        if (!m_tap_internal_key.IsNull()) {\n+            SerializeToVector(s, PSBT_OUT_TAP_INTERNAL_KEY);\n+            s << ToByteVector(m_tap_internal_key);\n+        }\n+\n+        // Write taproot tree\n+        if (!m_tap_tree.IsEmpty()) {\n+            SerializeToVector(s, PSBT_OUT_TAP_TREE);\n+            std::vector<unsigned char> value;\n+            CVectorWriter s_value(s.GetType(), s.GetVersion(), value, 0);\n+            const auto& tuples = m_tap_tree.GetTreeTuples();\n+            for (const auto& tuple : tuples) {\n+                uint8_t depth = std::get<0>(tuple);\n+                uint8_t leaf_ver = std::get<1>(tuple);\n+                CScript script = std::get<2>(tuple);\n+                s_value << depth;\n+                s_value << leaf_ver;\n+                s_value << script;\n+            }\n+            s << value;\n+        }\n+\n+        // Write taproot bip32 keypaths\n+        for (const auto& [xonly, leaf] : m_tap_keypaths) {\n+            const auto& [leaf_hashes, origin] = leaf;\n+            SerializeToVector(s, PSBT_OUT_TAP_BIP32_DERIVATION, xonly);\n+            std::vector<unsigned char> value;\n+            CVectorWriter s_value(s.GetType(), s.GetVersion(), value, 0);\n+            s_value << leaf_hashes;\n+            SerializeKeyOrigin(s_value, origin);\n+            s << value;\n+        }\n+\n         // Write unknown things\n         for (auto& entry : unknown) {\n             s << entry.first;\n@@ -362,6 +556,55 @@ struct PSBTOutput\n                     DeserializeHDKeypaths(s, key, hd_keypaths);\n                     break;\n                 }\n+                case PSBT_OUT_TAP_INTERNAL_KEY:\n+                {\n+                    if (!key_lookup.emplace(key).second) {\n+                        throw std::ios_base::failure(\"Duplicate Key, output Taproot internal key already provided\");\n+                    } else if (key.size() != 1) {\n+                        throw std::ios_base::failure(\"Output Taproot internal key key is more than one byte type\");\n+                    }\n+                    UnserializeFromVector(s, m_tap_internal_key);\n+                    break;\n+                }\n+                case PSBT_OUT_TAP_TREE:\n+                {\n+                    if (!key_lookup.emplace(key).second) {\n+                        throw std::ios_base::failure(\"Duplicate Key, output Taproot tree already provided\");\n+                    } else if (key.size() != 1) {\n+                        throw std::ios_base::failure(\"Output Taproot tree key is more than one byte type\");\n+                    }\n+                    std::vector<unsigned char> tree_v;\n+                    s >> tree_v;\n+                    VectorReader s_tree(s.GetType(), s.GetVersion(), tree_v, 0);\n+                    while (!s_tree.empty()) {\n+                        uint8_t depth;\n+                        uint8_t leaf_ver;\n+                        CScript script;\n+                        s_tree >> depth;\n+                        s_tree >> leaf_ver;\n+                        s_tree >> script;\n+                        m_tap_tree.Add((int)depth, script, (int)leaf_ver, true /* track */);\n+                    }\n+                    break;\n+                }\n+                case PSBT_OUT_TAP_BIP32_DERIVATION:\n+                {\n+                    if (!key_lookup.emplace(key).second) {\n+                        throw std::ios_base::failure(\"Duplicate Key, output Taproot BIP32 keypath already provided\");\n+                    } else if (key.size() != 33) {\n+                        throw std::ios_base::failure(\"Output Taproot BIP32 keypath key is not at 33 bytes\");\n+                    }\n+                    XOnlyPubKey xonly(uint256({key.begin() + 1, key.begin() + 33}));\n+                    std::set<uint256> leaf_hashes;\n+                    uint64_t value_len = ReadCompactSize(s);\n+                    size_t before_hashes = s.size();\n+                    s >> leaf_hashes;\n+                    size_t after_hashes = s.size();\n+                    size_t hashes_len = before_hashes - after_hashes;\n+                    size_t origin_len = value_len - hashes_len;\n+                    m_tap_keypaths.emplace(xonly, std::make_pair(leaf_hashes, DeserializeKeyOrigin(s, origin_len)));\n+                    break;\n+                }\n                 // Unknown stuff\n                 default: {\n                     if (unknown.count(key) > 0) {"
      }
    ]
  },
  {
    "sha": "57622204c81628f790a5355d2f7197d8ed23ebc1",
    "node_id": "C_kwDOABII59oAKDU3NjIyMjA0YzgxNjI4Zjc5MGE1MzU1ZDJmNzE5N2Q4ZWQyM2ViYzE",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-07-19T19:29:29Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-22T17:08:51Z"
      },
      "message": "Fill PSBT Taproot input data to/from SignatureData",
      "tree": {
        "sha": "90fa5dbf770822fd103c2942c85a1064f2f7aa4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/90fa5dbf770822fd103c2942c85a1064f2f7aa4c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/57622204c81628f790a5355d2f7197d8ed23ebc1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57622204c81628f790a5355d2f7197d8ed23ebc1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/57622204c81628f790a5355d2f7197d8ed23ebc1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57622204c81628f790a5355d2f7197d8ed23ebc1/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "64dc0962d3644df0d6abf39ec4c8987eaef714e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64dc0962d3644df0d6abf39ec4c8987eaef714e8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/64dc0962d3644df0d6abf39ec4c8987eaef714e8"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 37,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e39a1bf883c8a184845392b56bf0275cae7deb50",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 0,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57622204c81628f790a5355d2f7197d8ed23ebc1/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57622204c81628f790a5355d2f7197d8ed23ebc1/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=57622204c81628f790a5355d2f7197d8ed23ebc1",
        "patch": "@@ -106,6 +106,24 @@ void PSBTInput::FillSignatureData(SignatureData& sigdata) const\n     for (const auto& key_pair : hd_keypaths) {\n         sigdata.misc_pubkeys.emplace(key_pair.first.GetID(), key_pair);\n     }\n+    if (!m_tap_key_sig.empty()) {\n+        sigdata.taproot_key_path_sig = m_tap_key_sig;\n+    }\n+    for (const auto& [pubkey_leaf, sig] : m_tap_script_sigs) {\n+        sigdata.taproot_script_sigs.emplace(pubkey_leaf, sig);\n+    }\n+    if (!m_tap_internal_key.IsNull()) {\n+        sigdata.tr_spenddata.internal_key = m_tap_internal_key;\n+    }\n+    if (!m_tap_merkle_root.IsNull()) {\n+        sigdata.tr_spenddata.merkle_root = m_tap_merkle_root;\n+    }\n+    for (const auto& [leaf_script, control_block] : m_tap_scripts) {\n+        sigdata.tr_spenddata.scripts.emplace(leaf_script, control_block);\n+    }\n+    for (const auto& [pubkey, leaf_origin] : m_tap_keypaths) {\n+        sigdata.taproot_misc_pubkeys.emplace(pubkey, leaf_origin);\n+    }\n }\n \n void PSBTInput::FromSignatureData(const SignatureData& sigdata)\n@@ -135,6 +153,24 @@ void PSBTInput::FromSignatureData(const SignatureData& sigdata)\n     for (const auto& entry : sigdata.misc_pubkeys) {\n         hd_keypaths.emplace(entry.second);\n     }\n+    if (!sigdata.taproot_key_path_sig.empty()) {\n+        m_tap_key_sig = sigdata.taproot_key_path_sig;\n+    }\n+    for (const auto& [pubkey_leaf, sig] : sigdata.taproot_script_sigs) {\n+        m_tap_script_sigs.emplace(pubkey_leaf, sig);\n+    }\n+    if (!sigdata.tr_spenddata.internal_key.IsNull()) {\n+        m_tap_internal_key = sigdata.tr_spenddata.internal_key;\n+    }\n+    if (!sigdata.tr_spenddata.merkle_root.IsNull()) {\n+        m_tap_merkle_root = sigdata.tr_spenddata.merkle_root;\n+    }\n+    for (const auto& [leaf_script, control_block] : sigdata.tr_spenddata.scripts) {\n+        m_tap_scripts.emplace(leaf_script, control_block);\n+    }\n+    for (const auto& [pubkey, leaf_origin] : sigdata.taproot_misc_pubkeys) {\n+        m_tap_keypaths.emplace(pubkey, leaf_origin);\n+    }\n }\n \n void PSBTInput::Merge(const PSBTInput& input)"
      },
      {
        "sha": "a6f0134c8dabab33f38cbc2fdb05942d300b2147",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57622204c81628f790a5355d2f7197d8ed23ebc1/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57622204c81628f790a5355d2f7197d8ed23ebc1/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=57622204c81628f790a5355d2f7197d8ed23ebc1",
        "patch": "@@ -74,6 +74,7 @@ struct SignatureData {\n     std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>> misc_pubkeys;\n     std::vector<unsigned char> taproot_key_path_sig; /// Schnorr signature for key path spending\n     std::map<std::pair<XOnlyPubKey, uint256>, std::vector<unsigned char>> taproot_script_sigs; ///< (Partial) schnorr signatures, indexed by XOnlyPubKey and leaf_hash.\n+    std::map<XOnlyPubKey, std::pair<std::set<uint256>, KeyOriginInfo>> taproot_misc_pubkeys;\n     std::vector<CKeyID> missing_pubkeys; ///< KeyIDs of pubkeys which could not be found\n     std::vector<CKeyID> missing_sigs; ///< KeyIDs of pubkeys for signatures which could not be found\n     uint160 missing_redeem_script; ///< ScriptID of the missing redeemScript (if any)"
      }
    ]
  },
  {
    "sha": "31f90b4e6649ad586c8787e7ac732cb8286d6da5",
    "node_id": "C_kwDOABII59oAKDMxZjkwYjRlNjY0OWFkNTg2Yzg3ODdlN2FjNzMyY2I4Mjg2ZDZkYTU",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-07-19T19:29:55Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-22T17:08:51Z"
      },
      "message": "Fetch key origins for Taproot keys",
      "tree": {
        "sha": "3ee750edc00ab57293b390e5eb083aad33f18f59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3ee750edc00ab57293b390e5eb083aad33f18f59"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/31f90b4e6649ad586c8787e7ac732cb8286d6da5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31f90b4e6649ad586c8787e7ac732cb8286d6da5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/31f90b4e6649ad586c8787e7ac732cb8286d6da5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31f90b4e6649ad586c8787e7ac732cb8286d6da5/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "57622204c81628f790a5355d2f7197d8ed23ebc1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57622204c81628f790a5355d2f7197d8ed23ebc1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/57622204c81628f790a5355d2f7197d8ed23ebc1"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 19,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e2e53419beba2d7ed276f0dbf09d223c0e4d8171",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31f90b4e6649ad586c8787e7ac732cb8286d6da5/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31f90b4e6649ad586c8787e7ac732cb8286d6da5/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=31f90b4e6649ad586c8787e7ac732cb8286d6da5",
        "patch": "@@ -168,6 +168,17 @@ static bool SignTaprootScript(const SigningProvider& provider, const BaseSignatu\n     // <xonly pubkey> OP_CHECKSIG\n     if (script.size() == 34 && script[33] == OP_CHECKSIG && script[0] == 0x20) {\n         XOnlyPubKey pubkey(MakeSpan(script).subspan(1, 32));\n+\n+        KeyOriginInfo info;\n+        if (provider.GetKeyOriginByXOnly(pubkey, info)) {\n+            auto it = sigdata.taproot_misc_pubkeys.find(pubkey);\n+            if (it == sigdata.taproot_misc_pubkeys.end()) {\n+                sigdata.taproot_misc_pubkeys.emplace(pubkey, std::make_pair(std::set<uint256>({leaf_hash}), info));\n+            } else {\n+                it->second.first.insert(leaf_hash);\n+            }\n+        }\n+\n         std::vector<unsigned char> sig;\n         if (CreateTaprootScriptSig(creator, sigdata, provider, sig, pubkey, leaf_hash, sigversion)) {\n             result = Vector(std::move(sig));\n@@ -189,6 +200,14 @@ static bool SignTaproot(const SigningProvider& provider, const BaseSignatureCrea\n \n     // Try key path spending.\n     {\n+        KeyOriginInfo info;\n+        if (provider.GetKeyOriginByXOnly(spenddata.internal_key, info)) {\n+            auto it = sigdata.taproot_misc_pubkeys.find(spenddata.internal_key);\n+            if (it == sigdata.taproot_misc_pubkeys.end()) {\n+                sigdata.taproot_misc_pubkeys.emplace(spenddata.internal_key, std::make_pair(std::set<uint256>(), info));\n+            }\n+        }\n+\n         std::vector<unsigned char> sig;\n         if (sigdata.taproot_key_path_sig.size() == 0) {\n             if (creator.CreateSchnorrSig(provider, sig, spenddata.internal_key, nullptr, &spenddata.merkle_root, SigVersion::TAPROOT)) {"
      }
    ]
  },
  {
    "sha": "fe2c42d43e162b222674fadef1f8933427fc3da8",
    "node_id": "C_kwDOABII59oAKGZlMmM0MmQ0M2UxNjJiMjIyNjc0ZmFkZWYxZjg5MzM0MjdmYzNkYTg",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-07-19T20:01:12Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-22T17:09:19Z"
      },
      "message": "Store TaprootBuilder in SigningProviders instead of TaprootSpendData\n\nTaprootSpendData can be gotten from TaprootBuilder, however for PSBT, we\nalso need TaprootBuilders directly (for the outputs). So we store the\nTaprootBuilder in the FlatSigningProvider and when the TaprootSpendData\nis needed, we generate it on the fly using the stored builder.",
      "tree": {
        "sha": "5453b4530e1a0f23a87747a7a2fd32230f7ae2f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5453b4530e1a0f23a87747a7a2fd32230f7ae2f8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fe2c42d43e162b222674fadef1f8933427fc3da8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe2c42d43e162b222674fadef1f8933427fc3da8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fe2c42d43e162b222674fadef1f8933427fc3da8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe2c42d43e162b222674fadef1f8933427fc3da8/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "31f90b4e6649ad586c8787e7ac732cb8286d6da5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31f90b4e6649ad586c8787e7ac732cb8286d6da5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/31f90b4e6649ad586c8787e7ac732cb8286d6da5"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 21,
      "deletions": 7
    },
    "files": [
      {
        "sha": "b984b430a4c416cdee478ea2f65b3617bf839ac9",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe2c42d43e162b222674fadef1f8933427fc3da8/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe2c42d43e162b222674fadef1f8933427fc3da8/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=fe2c42d43e162b222674fadef1f8933427fc3da8",
        "patch": "@@ -850,7 +850,7 @@ class TRDescriptor final : public DescriptorImpl\n         if (!xpk.IsFullyValid()) return {};\n         builder.Finalize(xpk);\n         WitnessV1Taproot output = builder.GetOutput();\n-        out.tr_spenddata[output].Merge(builder.GetSpendData());\n+        out.tr_trees[output] = builder;\n         out.pubkeys.emplace(keys[0].GetID(), keys[0]);\n         return Vector(GetScriptForDestination(output));\n     }"
      },
      {
        "sha": "fb14b3a5f51c11276746a20e20951e2f4d2fb032",
        "filename": "src/script/signingprovider.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 5,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe2c42d43e162b222674fadef1f8933427fc3da8/src/script/signingprovider.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe2c42d43e162b222674fadef1f8933427fc3da8/src/script/signingprovider.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/signingprovider.cpp?ref=fe2c42d43e162b222674fadef1f8933427fc3da8",
        "patch": "@@ -48,6 +48,10 @@ bool HidingSigningProvider::GetTaprootSpendData(const XOnlyPubKey& output_key, T\n {\n     return m_provider->GetTaprootSpendData(output_key, spenddata);\n }\n+bool HidingSigningProvider::GetTaprootBuilder(const XOnlyPubKey& output_key, TaprootBuilder& builder) const\n+{\n+    return m_provider->GetTaprootBuilder(output_key, builder);\n+}\n \n bool FlatSigningProvider::GetCScript(const CScriptID& scriptid, CScript& script) const { return LookupHelper(scripts, scriptid, script); }\n bool FlatSigningProvider::GetPubKey(const CKeyID& keyid, CPubKey& pubkey) const { return LookupHelper(pubkeys, keyid, pubkey); }\n@@ -61,7 +65,16 @@ bool FlatSigningProvider::GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info)\n bool FlatSigningProvider::GetKey(const CKeyID& keyid, CKey& key) const { return LookupHelper(keys, keyid, key); }\n bool FlatSigningProvider::GetTaprootSpendData(const XOnlyPubKey& output_key, TaprootSpendData& spenddata) const\n {\n-    return LookupHelper(tr_spenddata, output_key, spenddata);\n+    TaprootBuilder builder;\n+    if (LookupHelper(tr_trees, output_key, builder)) {\n+        spenddata = builder.GetSpendData();\n+        return true;\n+    }\n+    return false;\n+}\n+bool FlatSigningProvider::GetTaprootBuilder(const XOnlyPubKey& output_key, TaprootBuilder& builder) const\n+{\n+    return LookupHelper(tr_trees, output_key, builder);\n }\n \n FlatSigningProvider Merge(const FlatSigningProvider& a, const FlatSigningProvider& b)\n@@ -75,10 +88,8 @@ FlatSigningProvider Merge(const FlatSigningProvider& a, const FlatSigningProvide\n     ret.keys.insert(b.keys.begin(), b.keys.end());\n     ret.origins = a.origins;\n     ret.origins.insert(b.origins.begin(), b.origins.end());\n-    ret.tr_spenddata = a.tr_spenddata;\n-    for (const auto& [output_key, spenddata] : b.tr_spenddata) {\n-        ret.tr_spenddata[output_key].Merge(spenddata);\n-    }\n+    ret.tr_trees = a.tr_trees;\n+    ret.tr_trees.insert(b.tr_trees.begin(), b.tr_trees.end());\n     return ret;\n }\n "
      },
      {
        "sha": "7ab68b75c47f3a244281854a4539daaf16de8286",
        "filename": "src/script/signingprovider.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe2c42d43e162b222674fadef1f8933427fc3da8/src/script/signingprovider.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe2c42d43e162b222674fadef1f8933427fc3da8/src/script/signingprovider.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/signingprovider.h?ref=fe2c42d43e162b222674fadef1f8933427fc3da8",
        "patch": "@@ -26,6 +26,7 @@ class SigningProvider\n     virtual bool HaveKey(const CKeyID &address) const { return false; }\n     virtual bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const { return false; }\n     virtual bool GetTaprootSpendData(const XOnlyPubKey& output_key, TaprootSpendData& spenddata) const { return false; }\n+    virtual bool GetTaprootBuilder(const XOnlyPubKey& output_key, TaprootBuilder& builder) const { return false; }\n \n     bool GetKeyByXOnly(const XOnlyPubKey& pubkey, CKey& key) const\n     {\n@@ -68,6 +69,7 @@ class HidingSigningProvider : public SigningProvider\n     bool GetKey(const CKeyID& keyid, CKey& key) const override;\n     bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override;\n     bool GetTaprootSpendData(const XOnlyPubKey& output_key, TaprootSpendData& spenddata) const override;\n+    bool GetTaprootBuilder(const XOnlyPubKey& output_key, TaprootBuilder& builder) const override;\n };\n \n struct FlatSigningProvider final : public SigningProvider\n@@ -76,13 +78,14 @@ struct FlatSigningProvider final : public SigningProvider\n     std::map<CKeyID, CPubKey> pubkeys;\n     std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>> origins;\n     std::map<CKeyID, CKey> keys;\n-    std::map<XOnlyPubKey, TaprootSpendData> tr_spenddata; /** Map from output key to spend data. */\n+    std::map<XOnlyPubKey, TaprootBuilder> tr_trees; /** Map from output key to Taproot tree (which can then make the TaprootSpendData */\n \n     bool GetCScript(const CScriptID& scriptid, CScript& script) const override;\n     bool GetPubKey(const CKeyID& keyid, CPubKey& pubkey) const override;\n     bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override;\n     bool GetKey(const CKeyID& keyid, CKey& key) const override;\n     bool GetTaprootSpendData(const XOnlyPubKey& output_key, TaprootSpendData& spenddata) const override;\n+    bool GetTaprootBuilder(const XOnlyPubKey& output_key, TaprootBuilder& builder) const override;\n };\n \n FlatSigningProvider Merge(const FlatSigningProvider& a, const FlatSigningProvider& b);"
      }
    ]
  },
  {
    "sha": "0e04961da39c8446b858ddb2c1fc8c1f03a8cb0a",
    "node_id": "C_kwDOABII59oAKDBlMDQ5NjFkYTM5Yzg0NDZiODU4ZGRiMmMxZmM4YzFmMDNhOGNiMGE",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-07-19T20:02:36Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-22T17:09:20Z"
      },
      "message": "Fill PSBT Taproot output data to/from SignatureData",
      "tree": {
        "sha": "751b09b4286b28a9a2aebfb716b4dc5d23ed3c76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/751b09b4286b28a9a2aebfb716b4dc5d23ed3c76"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0e04961da39c8446b858ddb2c1fc8c1f03a8cb0a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e04961da39c8446b858ddb2c1fc8c1f03a8cb0a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0e04961da39c8446b858ddb2c1fc8c1f03a8cb0a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e04961da39c8446b858ddb2c1fc8c1f03a8cb0a/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fe2c42d43e162b222674fadef1f8933427fc3da8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe2c42d43e162b222674fadef1f8933427fc3da8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fe2c42d43e162b222674fadef1f8933427fc3da8"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 24,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4958e43a792bac8fdec208c0d205835393fa94ef",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e04961da39c8446b858ddb2c1fc8c1f03a8cb0a/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e04961da39c8446b858ddb2c1fc8c1f03a8cb0a/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=0e04961da39c8446b858ddb2c1fc8c1f03a8cb0a",
        "patch": "@@ -202,6 +202,16 @@ void PSBTOutput::FillSignatureData(SignatureData& sigdata) const\n     for (const auto& key_pair : hd_keypaths) {\n         sigdata.misc_pubkeys.emplace(key_pair.first.GetID(), key_pair);\n     }\n+    if (!m_tap_internal_key.IsNull()) {\n+        sigdata.tr_spenddata.internal_key = m_tap_internal_key;\n+    }\n+    if (!m_tap_tree.IsEmpty()) {\n+        TaprootSpendData spenddata = m_tap_tree.GetSpendData();\n+        sigdata.tr_spenddata.Merge(spenddata);\n+    }\n+    for (const auto& [pubkey, leaf_origin] : m_tap_keypaths) {\n+        sigdata.taproot_misc_pubkeys.emplace(pubkey, leaf_origin);\n+    }\n }\n \n void PSBTOutput::FromSignatureData(const SignatureData& sigdata)\n@@ -215,6 +225,15 @@ void PSBTOutput::FromSignatureData(const SignatureData& sigdata)\n     for (const auto& entry : sigdata.misc_pubkeys) {\n         hd_keypaths.emplace(entry.second);\n     }\n+    if (!sigdata.tr_spenddata.internal_key.IsNull()) {\n+        m_tap_internal_key = sigdata.tr_spenddata.internal_key;\n+    }\n+    if (!sigdata.tr_builder.IsEmpty()) {\n+        m_tap_tree = sigdata.tr_builder;\n+    }\n+    for (const auto& [pubkey, leaf_origin] : sigdata.taproot_misc_pubkeys) {\n+        m_tap_keypaths.emplace(pubkey, leaf_origin);\n+    }\n }\n \n bool PSBTOutput::IsNull() const"
      },
      {
        "sha": "a5a7aec3b94969c5e302069d76ee8f411c5af8be",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e04961da39c8446b858ddb2c1fc8c1f03a8cb0a/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e04961da39c8446b858ddb2c1fc8c1f03a8cb0a/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=0e04961da39c8446b858ddb2c1fc8c1f03a8cb0a",
        "patch": "@@ -192,11 +192,15 @@ static bool SignTaprootScript(const SigningProvider& provider, const BaseSignatu\n static bool SignTaproot(const SigningProvider& provider, const BaseSignatureCreator& creator, const WitnessV1Taproot& output, SignatureData& sigdata, std::vector<valtype>& result)\n {\n     TaprootSpendData spenddata;\n+    TaprootBuilder builder;\n \n     // Gather information about this output.\n     if (provider.GetTaprootSpendData(output, spenddata)) {\n         sigdata.tr_spenddata.Merge(spenddata);\n     }\n+    if (provider.GetTaprootBuilder(output, builder)) {\n+        sigdata.tr_builder = builder;\n+    }\n \n     // Try key path spending.\n     {"
      },
      {
        "sha": "794ecab6fc4d699f20b65857cb376a95cb54f547",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e04961da39c8446b858ddb2c1fc8c1f03a8cb0a/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e04961da39c8446b858ddb2c1fc8c1f03a8cb0a/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=0e04961da39c8446b858ddb2c1fc8c1f03a8cb0a",
        "patch": "@@ -70,6 +70,7 @@ struct SignatureData {\n     CScript witness_script; ///< The witnessScript (if any) for the input. witnessScripts are used in P2WSH outputs.\n     CScriptWitness scriptWitness; ///< The scriptWitness of an input. Contains complete signatures or the traditional partial signatures format. scriptWitness is part of a transaction input per BIP 144.\n     TaprootSpendData tr_spenddata; ///< Taproot spending data.\n+    TaprootBuilder tr_builder; ///< Taproot tree used to build tr_spenddata.\n     std::map<CKeyID, SigPair> signatures; ///< BIP 174 style partial signatures for the input. May contain all signatures necessary for producing a final scriptSig or scriptWitness.\n     std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>> misc_pubkeys;\n     std::vector<unsigned char> taproot_key_path_sig; /// Schnorr signature for key path spending"
      }
    ]
  },
  {
    "sha": "48d5949aa94410b12263df9b7a3cbc4d7cd50b6f",
    "node_id": "C_kwDOABII59oAKDQ4ZDU5NDlhYTk0NDEwYjEyMjYzZGY5YjdhM2NiYzRkN2NkNTBiNmY",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-07-19T20:54:16Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-22T17:09:20Z"
      },
      "message": "Implement decodepsbt for Taproot fields",
      "tree": {
        "sha": "efb93ca543422a250220921f2b4ea2efe39ba1af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/efb93ca543422a250220921f2b4ea2efe39ba1af"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/48d5949aa94410b12263df9b7a3cbc4d7cd50b6f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48d5949aa94410b12263df9b7a3cbc4d7cd50b6f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/48d5949aa94410b12263df9b7a3cbc4d7cd50b6f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48d5949aa94410b12263df9b7a3cbc4d7cd50b6f/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0e04961da39c8446b858ddb2c1fc8c1f03a8cb0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e04961da39c8446b858ddb2c1fc8c1f03a8cb0a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0e04961da39c8446b858ddb2c1fc8c1f03a8cb0a"
      }
    ],
    "stats": {
      "total": 167,
      "additions": 167,
      "deletions": 0
    },
    "files": [
      {
        "sha": "98647bfc513d681a082de8f666dafa76a4aa1dd8",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 167,
        "deletions": 0,
        "changes": 167,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48d5949aa94410b12263df9b7a3cbc4d7cd50b6f/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48d5949aa94410b12263df9b7a3cbc4d7cd50b6f/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=48d5949aa94410b12263df9b7a3cbc4d7cd50b6f",
        "patch": "@@ -1081,6 +1081,43 @@ static RPCHelpMan decodepsbt()\n                                 {\n                                     {RPCResult::Type::STR_HEX, \"\", \"hex-encoded witness data (if any)\"},\n                                 }},\n+                                {RPCResult::Type::STR_HEX, \"taproot_key_path_sig\", /* optional */ true, \"hex-encoded signature for the Taproot key path spend\"},\n+                                {RPCResult::Type::ARR, \"taproot_script_path_sigs\", /* optional */ true, \"\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"signature\", /* optional */ true, \"The signature for the pubkey and leaf hash combination\",\n+                                    {\n+                                        {RPCResult::Type::STR, \"pubkey\", \"The x-only pubkey for this signature\"},\n+                                        {RPCResult::Type::STR, \"leaf_hash\", \"The leaf hash for this signature\"},\n+                                        {RPCResult::Type::STR, \"sig\", \"The signature itself\"},\n+                                    }},\n+                                }},\n+                                {RPCResult::Type::ARR, \"taproot_scripts\", /* optional */ true, \"\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"\", \"\",\n+                                    {\n+                                        {RPCResult::Type::STR_HEX, \"script\", \"A leaf script\"},\n+                                        {RPCResult::Type::NUM, \"leaf_ver\", \"The version number for the leaf script\"},\n+                                        {RPCResult::Type::ARR, \"control_blocks\", \"The control blocks for this script\",\n+                                        {\n+                                            {RPCResult::Type::STR_HEX, \"control_block\", \"A hex-encoded control block for this script\"},\n+                                        }},\n+                                    }},\n+                                }},\n+                                {RPCResult::Type::ARR, \"taproot_bip32_derivs\", /* optional */ true, \"\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"\", \"\",\n+                                    {\n+                                        {RPCResult::Type::STR, \"pubkey\", \"The x-only public key this path corresponds to\"},\n+                                        {RPCResult::Type::STR, \"master_fingerprint\", \"The fingerprint of the master key\"},\n+                                        {RPCResult::Type::STR, \"path\", \"The path\"},\n+                                        {RPCResult::Type::ARR, \"leaf_hashes\", \"The hashes of the leaves this pubkey appears in\",\n+                                        {\n+                                            {RPCResult::Type::STR_HEX, \"hash\", \"The hash of a leaf this pubkey appears in\"},\n+                                        }},\n+                                    }},\n+                                }},\n+                                {RPCResult::Type::STR_HEX, \"taproot_internal_key\", /* optional */ true, \"The hex-encoded Taproot x-only internal key\"},\n+                                {RPCResult::Type::STR_HEX, \"taproot_merkle_root\", /* optional */ true, \"The hex-encoded Taproot merkle root\"},\n                                 {RPCResult::Type::OBJ_DYN, \"unknown\", /* optional */ true, \"The unknown global fields\",\n                                 {\n                                     {RPCResult::Type::STR_HEX, \"key\", \"(key-value pair) An unknown key-value pair\"},\n@@ -1112,6 +1149,29 @@ static RPCHelpMan decodepsbt()\n                                         {RPCResult::Type::STR, \"path\", \"The path\"},\n                                     }},\n                                 }},\n+                                {RPCResult::Type::STR_HEX, \"taproot_internal_key\", /* optional */ true, \"The hex-encoded Taproot x-only internal key\"},\n+                                {RPCResult::Type::ARR, \"taproot_tree\", /* optional */ true, \"The tuples that make up the Taproot tree, in depth first search order\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"tuple\", /* optional */ true, \"A single leaf script in the taproot tree\",\n+                                    {\n+                                        {RPCResult::Type::NUM, \"depth\", \"The depth of this element in the tree\"},\n+                                        {RPCResult::Type::NUM, \"leaf_ver\", \"The version of this leaf\"},\n+                                        {RPCResult::Type::STR, \"script\", \"The hex-encoded script itself\"},\n+                                    }},\n+                                }},\n+                                {RPCResult::Type::ARR, \"taproot_bip32_derivs\", /* optional */ true, \"\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"\", \"\",\n+                                    {\n+                                        {RPCResult::Type::STR, \"pubkey\", \"The x-only public key this path corresponds to\"},\n+                                        {RPCResult::Type::STR, \"master_fingerprint\", \"The fingerprint of the master key\"},\n+                                        {RPCResult::Type::STR, \"path\", \"The path\"},\n+                                        {RPCResult::Type::ARR, \"leaf_hashes\", \"The hashes of the leaves this pubkey appears in\",\n+                                        {\n+                                            {RPCResult::Type::STR_HEX, \"hash\", \"The hash of a leaf this pubkey appears in\"},\n+                                        }},\n+                                    }},\n+                                }},\n                                 {RPCResult::Type::OBJ_DYN, \"unknown\", /* optional */ true, \"The unknown global fields\",\n                                 {\n                                     {RPCResult::Type::STR_HEX, \"key\", \"(key-value pair) An unknown key-value pair\"},\n@@ -1248,6 +1308,72 @@ static RPCHelpMan decodepsbt()\n             in.pushKV(\"final_scriptwitness\", txinwitness);\n         }\n \n+        // Taproot key path signature\n+        if (!input.m_tap_key_sig.empty()) {\n+            in.pushKV(\"taproot_key_path_sig\", HexStr(input.m_tap_key_sig));\n+        }\n+\n+        // Taproot script path signatures\n+        if (!input.m_tap_script_sigs.empty()) {\n+            UniValue script_sigs(UniValue::VARR);\n+            for (const auto& [pubkey_leaf, sig] : input.m_tap_script_sigs) {\n+                const auto& [xonly, leaf_hash] = pubkey_leaf;\n+                UniValue sigobj(UniValue::VOBJ);\n+                sigobj.pushKV(\"pubkey\", HexStr(xonly));\n+                sigobj.pushKV(\"leaf_hash\", HexStr(leaf_hash));\n+                sigobj.pushKV(\"sig\", HexStr(sig));\n+                script_sigs.push_back(sigobj);\n+            }\n+            in.pushKV(\"taproot_script_path_sigs\", script_sigs);\n+        }\n+\n+        // Taproot leaf scripts\n+        if (!input.m_tap_scripts.empty()) {\n+            UniValue tap_scripts(UniValue::VARR);\n+            for (const auto& [leaf, control_blocks] : input.m_tap_scripts) {\n+                const auto& [script, leaf_ver] = leaf;\n+                UniValue script_info(UniValue::VOBJ);\n+                script_info.pushKV(\"script\", HexStr(script));\n+                script_info.pushKV(\"leaf_ver\", leaf_ver);\n+                UniValue control_blocks_univ(UniValue::VARR);\n+                for (const auto& control_block : control_blocks) {\n+                    control_blocks_univ.push_back(HexStr(control_block));\n+                }\n+                script_info.pushKV(\"control_blocks\", control_blocks_univ);\n+                tap_scripts.push_back(script_info);\n+            }\n+            in.pushKV(\"taproot_scripts\", tap_scripts);\n+        }\n+\n+        // Taproot bip32 keypaths\n+        if (!input.m_tap_keypaths.empty()) {\n+            UniValue keypaths(UniValue::VARR);\n+            for (const auto& [xonly, leaf_origin] : input.m_tap_keypaths) {\n+                const auto& [leaf_hashes, origin] = leaf_origin;\n+                UniValue path_obj(UniValue::VOBJ);\n+                path_obj.pushKV(\"pubkey\", HexStr(xonly));\n+                path_obj.pushKV(\"master_fingerprint\", strprintf(\"%08x\", ReadBE32(origin.fingerprint)));\n+                path_obj.pushKV(\"path\", WriteHDKeypath(origin.path));\n+                UniValue leaf_hashes_arr(UniValue::VARR);\n+                for (const auto& leaf_hash : leaf_hashes) {\n+                    leaf_hashes_arr.push_back(HexStr(leaf_hash));\n+                }\n+                path_obj.pushKV(\"leaf_hashes\", leaf_hashes_arr);\n+                keypaths.push_back(path_obj);\n+            }\n+            in.pushKV(\"taproot_bip32_derivs\", keypaths);\n+        }\n+\n+        // Taproot internal key\n+        if (!input.m_tap_internal_key.IsNull()) {\n+            in.pushKV(\"taproot_internal_key\", HexStr(input.m_tap_internal_key));\n+        }\n+\n+        // Write taproot merkle root\n+        if (!input.m_tap_merkle_root.IsNull()) {\n+            in.pushKV(\"taproot_merkle_root\", HexStr(input.m_tap_merkle_root));\n+        }\n+\n         // Unknown data\n         if (input.unknown.size() > 0) {\n             UniValue unknowns(UniValue::VOBJ);\n@@ -1292,6 +1418,47 @@ static RPCHelpMan decodepsbt()\n             out.pushKV(\"bip32_derivs\", keypaths);\n         }\n \n+        // Taproot internal key\n+        if (!output.m_tap_internal_key.IsNull()) {\n+            out.pushKV(\"taproot_internal_key\", HexStr(output.m_tap_internal_key));\n+        }\n+\n+        // Taproot tree\n+        if (!output.m_tap_tree.IsEmpty()) {\n+            UniValue tree(UniValue::VARR);\n+            const auto& tuples = output.m_tap_tree.GetTreeTuples();\n+            for (const auto& tuple : tuples) {\n+                uint8_t depth = std::get<0>(tuple);\n+                uint8_t leaf_ver = std::get<1>(tuple);\n+                CScript script = std::get<2>(tuple);\n+                UniValue elem(UniValue::VOBJ);\n+                elem.pushKV(\"depth\", (int)depth);\n+                elem.pushKV(\"leaf_ver\", (int)leaf_ver);\n+                elem.pushKV(\"script\", HexStr(script));\n+                tree.push_back(elem);\n+            }\n+            out.pushKV(\"taproot_tree\", tree);\n+        }\n+\n+        // Taproot bip32 keypaths\n+        if (!output.m_tap_keypaths.empty()) {\n+            UniValue keypaths(UniValue::VARR);\n+            for (const auto& [xonly, leaf_origin] : output.m_tap_keypaths) {\n+                const auto& [leaf_hashes, origin] = leaf_origin;\n+                UniValue path_obj(UniValue::VOBJ);\n+                path_obj.pushKV(\"pubkey\", HexStr(xonly));\n+                path_obj.pushKV(\"master_fingerprint\", strprintf(\"%08x\", ReadBE32(origin.fingerprint)));\n+                path_obj.pushKV(\"path\", WriteHDKeypath(origin.path));\n+                UniValue leaf_hashes_arr(UniValue::VARR);\n+                for (const auto& leaf_hash : leaf_hashes) {\n+                    leaf_hashes_arr.push_back(HexStr(leaf_hash));\n+                }\n+                path_obj.pushKV(\"leaf_hashes\", leaf_hashes_arr);\n+                keypaths.push_back(path_obj);\n+            }\n+            out.pushKV(\"taproot_bip32_derivs\", keypaths);\n+        }\n+\n         // Unknown data\n         if (output.unknown.size() > 0) {\n             UniValue unknowns(UniValue::VOBJ);"
      }
    ]
  },
  {
    "sha": "833ecb8dec1a10e3bc1b8d5bcaf0b6839277f582",
    "node_id": "C_kwDOABII59oAKDgzM2VjYjhkZWMxYTEwZTNiYzFiOGQ1YmNhZjBiNjgzOTI3N2Y1ODI",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-07-21T00:04:33Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-25T03:23:08Z"
      },
      "message": "psbt: Remove non_witness_utxo for segwit v1+\n\nIf all inputs are segwit v1+, the non_witness_utxos can be removed.",
      "tree": {
        "sha": "18e0a5aff3822c9c35606940d92e7e47cdb1c79a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/18e0a5aff3822c9c35606940d92e7e47cdb1c79a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/833ecb8dec1a10e3bc1b8d5bcaf0b6839277f582",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/833ecb8dec1a10e3bc1b8d5bcaf0b6839277f582",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/833ecb8dec1a10e3bc1b8d5bcaf0b6839277f582",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/833ecb8dec1a10e3bc1b8d5bcaf0b6839277f582/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "48d5949aa94410b12263df9b7a3cbc4d7cd50b6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48d5949aa94410b12263df9b7a3cbc4d7cd50b6f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/48d5949aa94410b12263df9b7a3cbc4d7cd50b6f"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 29,
      "deletions": 2
    },
    "files": [
      {
        "sha": "d24a2f75d54bd1a92d45c40dba2c759efcbf7709",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/833ecb8dec1a10e3bc1b8d5bcaf0b6839277f582/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/833ecb8dec1a10e3bc1b8d5bcaf0b6839277f582/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=833ecb8dec1a10e3bc1b8d5bcaf0b6839277f582",
        "patch": "@@ -357,10 +357,10 @@ bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction&\n     input.FromSignatureData(sigdata);\n \n     // If we have a witness signature, put a witness UTXO.\n-    // TODO: For segwit v1, we should remove the non_witness_utxo\n     if (sigdata.witness) {\n         input.witness_utxo = utxo;\n-        // input.non_witness_utxo = nullptr;\n+        // We can remove the non_witness_utxo if and only if there are no non-segwit or segwit v0\n+        // inputs in this transaction, so we can deal with this later.\n     }\n \n     // Fill in the missing info"
      },
      {
        "sha": "2677a289f5204b1d16468a2098ee502ca6d3e7c0",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/833ecb8dec1a10e3bc1b8d5bcaf0b6839277f582/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/833ecb8dec1a10e3bc1b8d5bcaf0b6839277f582/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=833ecb8dec1a10e3bc1b8d5bcaf0b6839277f582",
        "patch": "@@ -362,6 +362,8 @@ bool ProduceSignature(const SigningProvider& provider, const BaseSignatureCreato\n     bool P2SH = false;\n     CScript subscript;\n \n+    if (solved) sigdata.spk_type = whichType;\n+\n     if (solved && whichType == TxoutType::SCRIPTHASH)\n     {\n         // Solver returns the subscript that needs to be evaluated;"
      },
      {
        "sha": "db6b5442c403e7d46f4a145b288f456556e9d38c",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/833ecb8dec1a10e3bc1b8d5bcaf0b6839277f582/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/833ecb8dec1a10e3bc1b8d5bcaf0b6839277f582/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=833ecb8dec1a10e3bc1b8d5bcaf0b6839277f582",
        "patch": "@@ -65,6 +65,7 @@ typedef std::pair<CPubKey, std::vector<unsigned char>> SigPair;\n struct SignatureData {\n     bool complete = false; ///< Stores whether the scriptSig and scriptWitness are complete\n     bool witness = false; ///< Stores whether the input this SigData corresponds to is a witness input\n+    TxoutType spk_type = TxoutType::NONSTANDARD; ///< Stores the type of scriptPubKey the input spends\n     CScript scriptSig; ///< The scriptSig of an input. Contains complete signatures or the traditional partial signatures format\n     CScript redeem_script; ///< The redeemScript (if any) for the input\n     CScript witness_script; ///< The witnessScript (if any) for the input. witnessScripts are used in P2WSH outputs."
      },
      {
        "sha": "418906b2e32e83fff0d993d38d901ef40920559d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/833ecb8dec1a10e3bc1b8d5bcaf0b6839277f582/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/833ecb8dec1a10e3bc1b8d5bcaf0b6839277f582/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=833ecb8dec1a10e3bc1b8d5bcaf0b6839277f582",
        "patch": "@@ -1894,6 +1894,30 @@ TransactionError CWallet::FillPSBT(PartiallySignedTransaction& psbtx, bool& comp\n         }\n     }\n \n+    // Figure out if any witness_utxos should be dropped\n+    std::vector<unsigned int> to_drop;\n+    for (unsigned int i = 0; i < psbtx.inputs.size(); ++i) {\n+        const auto& input = psbtx.inputs.at(i);\n+        int wit_ver;\n+        std::vector<unsigned char> wit_prog;\n+        if (input.witness_utxo.IsNull() || !input.witness_utxo.scriptPubKey.IsWitnessProgram(wit_ver, wit_prog)) {\n+            // There's a non-segwit input or Segwit v0, so we cannot drop any witness_utxos\n+            to_drop.clear();\n+            break;\n+        }\n+        if (wit_ver == 0) {\n+            // Segwit v0, so we cannot drop any witness_utxos\n+            to_drop.clear();\n+            break;\n+        }\n+        to_drop.push_back(i);\n+    }\n+\n+    // Drop the non_witness_utxos that we can drop\n+    for (unsigned int i : to_drop) {\n+        psbtx.inputs.at(i).non_witness_utxo = nullptr;\n+    }\n+\n     // Complete if every input is now signed\n     complete = true;\n     for (const auto& input : psbtx.inputs) {"
      }
    ]
  },
  {
    "sha": "17967cdbf4b0bc3734565089bd045093ed751d83",
    "node_id": "C_kwDOABII59oAKDE3OTY3Y2RiZjRiMGJjMzczNDU2NTA4OWJkMDQ1MDkzZWQ3NTFkODM",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-07-23T22:50:54Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-25T03:23:08Z"
      },
      "message": "tests: Test taproot fields for PSBT",
      "tree": {
        "sha": "b68a944074d7de10c3530feccf9eaf8a60b30b8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b68a944074d7de10c3530feccf9eaf8a60b30b8b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/17967cdbf4b0bc3734565089bd045093ed751d83",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17967cdbf4b0bc3734565089bd045093ed751d83",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/17967cdbf4b0bc3734565089bd045093ed751d83",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17967cdbf4b0bc3734565089bd045093ed751d83/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "833ecb8dec1a10e3bc1b8d5bcaf0b6839277f582",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/833ecb8dec1a10e3bc1b8d5bcaf0b6839277f582",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/833ecb8dec1a10e3bc1b8d5bcaf0b6839277f582"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 20,
      "deletions": 3
    },
    "files": [
      {
        "sha": "a78061b39ab23d7a172afa686a307467b6fd8747",
        "filename": "test/functional/data/rpc_psbt.json",
        "status": "modified",
        "additions": 20,
        "deletions": 3,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17967cdbf4b0bc3734565089bd045093ed751d83/test/functional/data/rpc_psbt.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17967cdbf4b0bc3734565089bd045093ed751d83/test/functional/data/rpc_psbt.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/rpc_psbt.json?ref=17967cdbf4b0bc3734565089bd045093ed751d83",
        "patch": "@@ -26,15 +26,32 @@\n         \"cHNidP8BADMBAAAAAREREREREREREREREREREREREfrK3hERERERERERERERfwAAAAD/////AAAAAAAAAQQAAQQBagA=\",\n         \"cHNidP8BADMBAAAAAREREREREREREREREREREREREfrK3hERERERERERERERfwAAAAD/////AAAAAAAAAQEJAOH1BQAAAAAAAQUAAQUBUQA=\",\n         \"cHNidP8BADMBAAAAAREREREREREREREREREREREREfrK3hERERERERERERERfwAAAAD/////AAAAAAAAAQcAAQcBUQA=\",\n-        \"cHNidP8BADMBAAAAAREREREREREREREREREREREREfrK3hERERERERERERERfwAAAAD/////AAAAAAAAAQEJAOH1BQAAAAAAAQgBAAEIAwEBUQA=\"\n+        \"cHNidP8BADMBAAAAAREREREREREREREREREREREREfrK3hERERERERERERERfwAAAAD/////AAAAAAAAAQEJAOH1BQAAAAAAAQgBAAEIAwEBUQA=\",\n+        \"cHNidP8BAHECAAAAASd0Srq/MCf+DWzyOpbu4u+xiO9SMBlUWFiD5ptmJLJCAAAAAAD/////Anh8AQAAAAAAFgAUg6fjS9mf8DpJYu+KGhAbspVGHs5gawQqAQAAABYAFHrDad8bIOAz1hFmI5V7CsSfPFLoAAAAAAABASsA8gUqAQAAACJRIFosLPW1LPMfg60ujaY/8DGD7Nj2CcdRCuikjgORCgdXARchAv40kGTJjW4qhT+jybEr2LMEoZwZXGDvp+4jkwRtP6IyAAAA\",\n+        \"cHNidP8BAHECAAAAASd0Srq/MCf+DWzyOpbu4u+xiO9SMBlUWFiD5ptmJLJCAAAAAAD/////Anh8AQAAAAAAFgAUg6fjS9mf8DpJYu+KGhAbspVGHs5gawQqAQAAABYAFHrDad8bIOAz1hFmI5V7CsSfPFLoAAAAAAABASsA8gUqAQAAACJRIFosLPW1LPMfg60ujaY/8DGD7Nj2CcdRCuikjgORCgdXARM/Fzuz02wHSvtxb+xjB6BpouRQuZXzyCeFlFq43w4kJg3NcDsMvzTeOZGEqUgawrNYbbZgHwJqd/fkk4SBvDR1AAAA\",\n+        \"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\"\n     ],\n     \"valid\" : [\n         \"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\"\n     ],\n     \"creator\" : [\n         {\n@@ -136,4 +153,4 @@\n             \"result\" : \"0200000000010258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd7500000000da00473044022074018ad4180097b873323c0015720b3684cc8123891048e7dbcd9b55ad679c99022073d369b740e3eb53dcefa33823c8070514ca55a7dd9544f157c167913261118c01483045022100f61038b308dc1da865a34852746f015772934208c6d24454393cd99bdf2217770220056e675a675a6d0a02b85b14e5e29074d8a25a9b5760bea2816f661910a006ea01475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752aeffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d01000000232200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b2028903ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f000400473044022062eb7a556107a7c73f45ac4ab5a1dddf6f7075fb1275969a7f383efff784bcb202200c05dbb7470dbf2f08557dd356c7325c1ed30913e996cd3840945db12228da5f01473044022065f45ba5998b59a27ffe1a7bed016af1f1f90d54b3aa8f7450aa5f56a25103bd02207f724703ad1edb96680b284b56d4ffcb88f7fb759eabbe08aa30f29b851383d20147522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae00000000\"\n         }\n     ]\n-}\n\\ No newline at end of file\n+}"
      }
    ]
  },
  {
    "sha": "9b86c58d95539056981c2a04a7345b992b1ce70c",
    "node_id": "C_kwDOABII59oAKDliODZjNThkOTU1MzkwNTY5ODFjMmEwNGE3MzQ1Yjk5MmIxY2U3MGM",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-07-26T20:23:50Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-25T03:23:08Z"
      },
      "message": "taproot: Use pre-existing signatures if available\n\nActually use pre-existing signatures in CreateTaprootScriptSig if a\nsignature is found for the given key and leaf hash.",
      "tree": {
        "sha": "815c0710d00bdea161f98819a7991104f9f2ffee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/815c0710d00bdea161f98819a7991104f9f2ffee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b86c58d95539056981c2a04a7345b992b1ce70c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b86c58d95539056981c2a04a7345b992b1ce70c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9b86c58d95539056981c2a04a7345b992b1ce70c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b86c58d95539056981c2a04a7345b992b1ce70c/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "17967cdbf4b0bc3734565089bd045093ed751d83",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17967cdbf4b0bc3734565089bd045093ed751d83",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/17967cdbf4b0bc3734565089bd045093ed751d83"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "49bf19d5101a349d4abfdf8a984db34048e92abb",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b86c58d95539056981c2a04a7345b992b1ce70c/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b86c58d95539056981c2a04a7345b992b1ce70c/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=9b86c58d95539056981c2a04a7345b992b1ce70c",
        "patch": "@@ -149,6 +149,7 @@ static bool CreateTaprootScriptSig(const BaseSignatureCreator& creator, Signatur\n     auto it = sigdata.taproot_script_sigs.find(lookup_key);\n     if (it != sigdata.taproot_script_sigs.end()) {\n         sig_out = it->second;\n+        return true;\n     }\n     if (creator.CreateSchnorrSig(provider, sig_out, pubkey, &leaf_hash, nullptr, sigversion)) {\n         sigdata.taproot_script_sigs[lookup_key] = sig_out;"
      }
    ]
  },
  {
    "sha": "597db6693345547915376bdf0faf8ceda0da6326",
    "node_id": "C_kwDOABII59oAKDU5N2RiNjY5MzM0NTU0NzkxNTM3NmJkZjBmYWY4Y2VkYTBkYTYzMjY",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-07-26T20:25:42Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-25T03:23:08Z"
      },
      "message": "psbt, test: Check for taproot fields in taproot psbt test",
      "tree": {
        "sha": "61d7dbccedc8cb83d8c2ce8030776ca26423b53a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/61d7dbccedc8cb83d8c2ce8030776ca26423b53a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/597db6693345547915376bdf0faf8ceda0da6326",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/597db6693345547915376bdf0faf8ceda0da6326",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/597db6693345547915376bdf0faf8ceda0da6326",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/597db6693345547915376bdf0faf8ceda0da6326/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9b86c58d95539056981c2a04a7345b992b1ce70c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b86c58d95539056981c2a04a7345b992b1ce70c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9b86c58d95539056981c2a04a7345b992b1ce70c"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 14,
      "deletions": 2
    },
    "files": [
      {
        "sha": "c86d5fa284306588e83212fc3b51330e04ef6817",
        "filename": "test/functional/wallet_taproot.py",
        "status": "modified",
        "additions": 14,
        "deletions": 2,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/597db6693345547915376bdf0faf8ceda0da6326/test/functional/wallet_taproot.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/597db6693345547915376bdf0faf8ceda0da6326/test/functional/wallet_taproot.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_taproot.py?ref=597db6693345547915376bdf0faf8ceda0da6326",
        "patch": "@@ -312,8 +312,20 @@ def do_test_psbt(self, comment, pattern, privmap, treefn, keys_pay, keys_change)\n             test_balance = int(self.psbt_online.getbalance() * 100000000)\n             ret_amnt = random.randrange(100000, test_balance)\n             psbt = self.psbt_online.walletcreatefundedpsbt([], [{self.boring.getnewaddress(): Decimal(ret_amnt) / 100000000}], None, {\"subtractFeeFromOutputs\":[0]})['psbt']\n-            res = self.psbt_offline.walletprocesspsbt(psbt)\n-            assert(res['complete'])\n+            res = self.psbt_offline.walletprocesspsbt(psbt=psbt, finalize=False)\n+\n+            decoded = self.psbt_offline.decodepsbt(res[\"psbt\"])\n+            if pattern.startswith(\"tr(\"):\n+                for psbtin in decoded[\"inputs\"]:\n+                    assert \"non_witness_utxo\" not in psbtin\n+                    assert \"witness_utxo\" in psbtin\n+                    assert \"taproot_internal_key\" in psbtin\n+                    assert \"taproot_bip32_derivs\" in psbtin\n+                    assert \"taproot_key_path_sig\" in psbtin or \"taproot_script_path_sigs\" in psbtin\n+                    if \"taproot_script_path_sigs\" in psbtin:\n+                        assert \"taproot_merkle_root\" in psbtin\n+                        assert \"taproot_scripts\" in psbtin\n+\n             rawtx = self.nodes[0].finalizepsbt(res['psbt'])['hex']\n             txid = self.nodes[0].sendrawtransaction(rawtx)\n             self.generatetoaddress(self.nodes[0], 1, self.boring.getnewaddress(), sync_fun=self.no_op)"
      }
    ]
  },
  {
    "sha": "1ec3025c4634ccd751f130a34d93e91f75223974",
    "node_id": "C_kwDOABII59oAKDFlYzMwMjVjNDYzNGNjZDc1MWYxMzBhMzRkOTNlOTFmNzUyMjM5NzQ",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-25T03:41:06Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-25T03:41:06Z"
      },
      "message": "fixup! psbt: Remove non_witness_utxo for segwit v1+",
      "tree": {
        "sha": "5b5444e36306d84b03bc2cbb48b73d6e83de859f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b5444e36306d84b03bc2cbb48b73d6e83de859f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ec3025c4634ccd751f130a34d93e91f75223974",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ec3025c4634ccd751f130a34d93e91f75223974",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1ec3025c4634ccd751f130a34d93e91f75223974",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ec3025c4634ccd751f130a34d93e91f75223974/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "597db6693345547915376bdf0faf8ceda0da6326",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/597db6693345547915376bdf0faf8ceda0da6326",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/597db6693345547915376bdf0faf8ceda0da6326"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "fdbcb2cc0b472d30a956980bca68a9a94f859bc5",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ec3025c4634ccd751f130a34d93e91f75223974/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ec3025c4634ccd751f130a34d93e91f75223974/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=1ec3025c4634ccd751f130a34d93e91f75223974",
        "patch": "@@ -177,7 +177,6 @@ void PSBTInput::Merge(const PSBTInput& input)\n {\n     if (!non_witness_utxo && input.non_witness_utxo) non_witness_utxo = input.non_witness_utxo;\n     if (witness_utxo.IsNull() && !input.witness_utxo.IsNull()) {\n-        // TODO: For segwit v1, we will want to clear out the non-witness utxo when setting a witness one. For v0 and non-segwit, this is not safe\n         witness_utxo = input.witness_utxo;\n     }\n "
      }
    ]
  },
  {
    "sha": "58af8917bd80b0a918df1a5d38c4b63beae5306f",
    "node_id": "C_kwDOABII59oAKDU4YWY4OTE3YmQ4MGIwYTkxOGRmMWE1ZDM4YzRiNjNiZWFlNTMwNmY",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-25T03:50:10Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-25T04:06:51Z"
      },
      "message": "psbt: Implement merge for Taproot fields",
      "tree": {
        "sha": "48265eb1c196912f97abdd7f344961fa5dd12b18",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/48265eb1c196912f97abdd7f344961fa5dd12b18"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/58af8917bd80b0a918df1a5d38c4b63beae5306f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58af8917bd80b0a918df1a5d38c4b63beae5306f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/58af8917bd80b0a918df1a5d38c4b63beae5306f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58af8917bd80b0a918df1a5d38c4b63beae5306f/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1ec3025c4634ccd751f130a34d93e91f75223974",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ec3025c4634ccd751f130a34d93e91f75223974",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1ec3025c4634ccd751f130a34d93e91f75223974"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "209dd1e3579c2e665cf4cef770a5f8c74fa15676",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58af8917bd80b0a918df1a5d38c4b63beae5306f/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58af8917bd80b0a918df1a5d38c4b63beae5306f/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=58af8917bd80b0a918df1a5d38c4b63beae5306f",
        "patch": "@@ -183,11 +183,17 @@ void PSBTInput::Merge(const PSBTInput& input)\n     partial_sigs.insert(input.partial_sigs.begin(), input.partial_sigs.end());\n     hd_keypaths.insert(input.hd_keypaths.begin(), input.hd_keypaths.end());\n     unknown.insert(input.unknown.begin(), input.unknown.end());\n+    m_tap_script_sigs.insert(input.m_tap_script_sigs.begin(), input.m_tap_script_sigs.end());\n+    m_tap_scripts.insert(input.m_tap_scripts.begin(), input.m_tap_scripts.end());\n+    m_tap_keypaths.insert(input.m_tap_keypaths.begin(), input.m_tap_keypaths.end());\n \n     if (redeem_script.empty() && !input.redeem_script.empty()) redeem_script = input.redeem_script;\n     if (witness_script.empty() && !input.witness_script.empty()) witness_script = input.witness_script;\n     if (final_script_sig.empty() && !input.final_script_sig.empty()) final_script_sig = input.final_script_sig;\n     if (final_script_witness.IsNull() && !input.final_script_witness.IsNull()) final_script_witness = input.final_script_witness;\n+    if (m_tap_key_sig.empty() && !input.m_tap_key_sig.empty()) m_tap_key_sig = input.m_tap_key_sig;\n+    if (m_tap_internal_key.IsNull() && !input.m_tap_internal_key.IsNull()) m_tap_internal_key = input.m_tap_internal_key;\n+    if (m_tap_merkle_root.IsNull() && !input.m_tap_merkle_root.IsNull()) m_tap_merkle_root = input.m_tap_merkle_root;\n }\n \n void PSBTOutput::FillSignatureData(SignatureData& sigdata) const\n@@ -244,9 +250,12 @@ void PSBTOutput::Merge(const PSBTOutput& output)\n {\n     hd_keypaths.insert(output.hd_keypaths.begin(), output.hd_keypaths.end());\n     unknown.insert(output.unknown.begin(), output.unknown.end());\n+    m_tap_keypaths.insert(output.m_tap_keypaths.begin(), output.m_tap_keypaths.end());\n \n     if (redeem_script.empty() && !output.redeem_script.empty()) redeem_script = output.redeem_script;\n     if (witness_script.empty() && !output.witness_script.empty()) witness_script = output.witness_script;\n+    if (m_tap_internal_key.IsNull() && !output.m_tap_internal_key.IsNull()) m_tap_internal_key = output.m_tap_internal_key;\n+    if (m_tap_tree.IsEmpty() && !output.m_tap_tree.IsEmpty()) m_tap_tree = output.m_tap_tree;\n }\n bool PSBTInputSigned(const PSBTInput& input)\n {"
      }
    ]
  }
]