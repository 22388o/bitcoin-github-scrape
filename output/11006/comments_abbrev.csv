promag,2017-08-08T03:14:34Z,With this change the time should be significantly lower than 5 seconds. This was motivated by [@jnewbery comment](https://github.com/bitcoin/bitcoin/pull/11000#pullrequestreview-54752223).,https://github.com/bitcoin/bitcoin/pull/11006#issuecomment-320838481,320838481,
promag,2017-08-08T03:39:40Z,"For the record, running with version libevent@2.1.8.\n\nIf there is a minimum version required, can it be defined, like boost?",https://github.com/bitcoin/bitcoin/pull/11006#issuecomment-320841416,320841416,
jnewbery,2017-08-08T09:48:30Z,"This PR should just have 2195bb0e579336f2b9adfb9a2e23957e794f5621. You can remove the other commits.\n\nYou could potentially protect this change with a preprocessor:\n\n```\n#if LIBEVENT_VERSION_NUMBER >= 0x02xxxxxx\n```\n\nI don't know what version of libevent the `event_base_loopexit` behaviour was fixed. Perhaps @laanwj can offer some clues (he's the author of #6990).\n\nDefinitely s",https://github.com/bitcoin/bitcoin/pull/11006#issuecomment-320907764,320907764,
laanwj,2017-08-08T09:53:18Z,"> I don't know what version of libevent the event_base_loopexit behaviour was fixed. Perhaps @laanwj can offer some clues (he's the author of #6990).\n\nNo, I don't know, and we certainly can't assume that everyone is building against a version where this is fixed. Not least because libevent's release schedule is very slow.",https://github.com/bitcoin/bitcoin/pull/11006#issuecomment-320908901,320908901,
promag,2017-08-08T09:58:42Z,@jnewbery yes extra commits were mistakenly pushed when testing with other branch. Will fix.,https://github.com/bitcoin/bitcoin/pull/11006#issuecomment-320910185,320910185,
promag,2017-08-08T09:59:45Z,@laanwj what about keeping the older code for older libevents?,https://github.com/bitcoin/bitcoin/pull/11006#issuecomment-320910436,320910436,
laanwj,2017-08-08T10:00:19Z,"> @laanwj what about keeping the older code for older libevents?\n\nYes, I'd say that is a requirement.\n",https://github.com/bitcoin/bitcoin/pull/11006#issuecomment-320910573,320910573,
promag,2017-08-08T12:36:08Z,"@laanwj @jnewbery will try to dissect which version has bad behaviour.\n\nWill add a comment before `event_base_loopexit`.",https://github.com/bitcoin/bitcoin/pull/11006#issuecomment-320942743,320942743,
promag,2017-08-09T06:36:43Z,With `libevent@2.0.21` (the version that supposedly has issues with `event_base_loopexit` everything seems to work (at least on my system). Maybe the problem was in other place? I'll dig a bit more.,https://github.com/bitcoin/bitcoin/pull/11006#issuecomment-321166680,321166680,
laanwj,2017-08-09T09:46:59Z,">  everything seems to work (at least on my system)\n\nAs I remember the intermittent errors on issuing `stop`, might well not happen locally in good-weather conditions. As we all know, travis VMs run on overbooked, extremely busy servers, so it's more likely to happen there. Maybe it can be simulated by adding an artificial delay somewhere, my hunch would be to have the client side read the RPC",https://github.com/bitcoin/bitcoin/pull/11006#issuecomment-321208102,321208102,
jnewbery,2017-08-09T20:35:37Z,"@laanwj - forgive me, I'm trying to piece together the history of changes to the shutdown procedure:\n\n- In #6719, you changed from using `event_base_loopbreak()` to `event_base_loopexit()` with a timeout. That was to make sure that the server shut down gracefully and didn't just drop responses to pending requests.\n- In #6990, you say that '`event_base_loopexit` was not doing what I expected ",https://github.com/bitcoin/bitcoin/pull/11006#issuecomment-321373993,321373993,
jnewbery,2017-08-09T20:36:31Z,"Oh, and Concept ACK:\n\nlocally with this PR:\n```\nTEST                           | STATUS    | DURATION\n\nabandonconflict.py             | ✓ Passed  | 4 s \n...\nzmq_test.py                    | ✓ Passed  | 2 s \n\nALL                            | ✓ Passed  | 630 s (accumulated)\nRuntime: 162 s\n```\nlocally without this PR:\n```\nTEST                           | STATUS    | DURA",https://github.com/bitcoin/bitcoin/pull/11006#issuecomment-321374204,321374204,
promag,2017-08-09T20:42:50Z,"Nice @jnewbery. Furthermore, the the docs say\n```\ntv	the amount of time after which the loop should terminate, or NULL to exit after running all currently active events.\n```\nAnd while the RPC response is being handled, there is an active event.",https://github.com/bitcoin/bitcoin/pull/11006#issuecomment-321375653,321375653,
promag,2017-08-09T20:44:36Z,"IMO we should just add the loop exit, and keep the break after the timeout.",https://github.com/bitcoin/bitcoin/pull/11006#issuecomment-321376111,321376111,
jnewbery,2017-08-09T20:55:14Z,"> IMO we should just add the loop exit, and keep the break after the timeout.\n\nSounds reasonable if you're able to test this against old versions of libevent (and pending any further background info from @laanwj)",https://github.com/bitcoin/bitcoin/pull/11006#issuecomment-321378695,321378695,
promag,2017-08-12T03:33:31Z,"@laanwj you mean:\n```diff\ndiff --git a/test/functional/test_framework/authproxy.py b/test/functional/test_framework/authproxy.py\nindex b3671cbdc..5a2f9c514 100644\n--- a/test/functional/test_framework/authproxy.py\n+++ b/test/functional/test_framework/authproxy.py\n@@ -166,6 +166,8 @@ class AuthServiceProxy(object):\n     def _get_response(self):\n         req_start_time = time.time()\",https://github.com/bitcoin/bitcoin/pull/11006#issuecomment-321954764,321954764,
laanwj,2017-10-18T14:06:17Z,"utACK 793667a, my concerns have been addressed.",https://github.com/bitcoin/bitcoin/pull/11006#issuecomment-337602720,337602720,
laanwj,2017-08-08T09:51:58Z,I don't get it - you don't give any rationale for reverting this and removing the comment.,https://github.com/bitcoin/bitcoin/pull/11006#discussion_r131868878,131868878,src/httpserver.cpp
laanwj,2017-08-08T09:55:09Z,"As I understand it, removing the timeout here (resulting in instant shutdown) means that responses from RPC `stop` might not come back, as the http event handler is killed before that could finish. This resulted in intermittent travis errors.",https://github.com/bitcoin/bitcoin/pull/11006#discussion_r131869569,131869569,src/httpserver.cpp
promag,2017-08-08T09:57:04Z,"No, that happens when evhttp_free is called.",https://github.com/bitcoin/bitcoin/pull/11006#discussion_r131869966,131869966,src/httpserver.cpp
laanwj,2017-08-08T09:59:36Z,"I'm sure that at least used to be the case, we had problems here in the past, this is why this particular shutdown sequence was changed so many times.",https://github.com/bitcoin/bitcoin/pull/11006#discussion_r131870509,131870509,src/httpserver.cpp
