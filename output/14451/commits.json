[
  {
    "sha": "9dcf6c0dfec51f2a49edef537f377422d6dbdceb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZGNmNmMwZGZlYzUxZjJhNDllZGVmNTM3ZjM3NzQyMmQ2ZGJkY2Vi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-06T18:12:47Z"
      },
      "committer": {
        "name": "James Hilliard",
        "email": "james.hilliard1@gmail.com",
        "date": "2018-10-09T09:36:14Z"
      },
      "message": "build: Add --disable-bip70 configure option\n\nThis patch adds a --disable-bip70 configure option that disables BIP70\npayment request support. When disabled, this removes the dependency of\nthe GUI on OpenSSL and Protobuf.",
      "tree": {
        "sha": "68628f5648acc166e1bdbd5f3cfbe0cec5caa8d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/68628f5648acc166e1bdbd5f3cfbe0cec5caa8d1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9dcf6c0dfec51f2a49edef537f377422d6dbdceb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9dcf6c0dfec51f2a49edef537f377422d6dbdceb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9dcf6c0dfec51f2a49edef537f377422d6dbdceb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9dcf6c0dfec51f2a49edef537f377422d6dbdceb/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jameshilliard",
      "id": 3298484,
      "node_id": "MDQ6VXNlcjMyOTg0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3298484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jameshilliard",
      "html_url": "https://github.com/jameshilliard",
      "followers_url": "https://api.github.com/users/jameshilliard/followers",
      "following_url": "https://api.github.com/users/jameshilliard/following{/other_user}",
      "gists_url": "https://api.github.com/users/jameshilliard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jameshilliard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jameshilliard/subscriptions",
      "organizations_url": "https://api.github.com/users/jameshilliard/orgs",
      "repos_url": "https://api.github.com/users/jameshilliard/repos",
      "events_url": "https://api.github.com/users/jameshilliard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jameshilliard/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1d1417430c829a0c21bf5a2fe4a5b2f592a9423f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d1417430c829a0c21bf5a2fe4a5b2f592a9423f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d1417430c829a0c21bf5a2fe4a5b2f592a9423f"
      }
    ],
    "stats": {
      "total": 198,
      "additions": 185,
      "deletions": 13
    },
    "files": [
      {
        "sha": "7141a9a03af35f5f3edaa624c490941422bed008",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 24,
        "deletions": 2,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dcf6c0dfec51f2a49edef537f377422d6dbdceb/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dcf6c0dfec51f2a49edef537f377422d6dbdceb/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=9dcf6c0dfec51f2a49edef537f377422d6dbdceb",
        "patch": "@@ -209,6 +209,11 @@ AC_ARG_ENABLE([zmq],\n   [disable ZMQ notifications])],\n   [use_zmq=$enableval],\n   [use_zmq=yes])\n+AC_ARG_ENABLE([bip70],\n+  [AS_HELP_STRING([--disable-bip70],\n+  [disable BIP70 (payment protocol) support in GUI (enabled by default)])],\n+  [enable_bip70=$enableval],\n+  [enable_bip70=yes])\n \n AC_ARG_WITH([protoc-bindir],[AS_HELP_STRING([--with-protoc-bindir=BIN_DIR],[specify protoc bin path])], [protoc_bin_path=$withval], [])\n \n@@ -1082,7 +1087,9 @@ if test x$use_pkgconfig = xyes; then\n     [\n       PKG_CHECK_MODULES([SSL], [libssl],, [AC_MSG_ERROR(openssl not found.)])\n       PKG_CHECK_MODULES([CRYPTO], [libcrypto],,[AC_MSG_ERROR(libcrypto not found.)])\n-      BITCOIN_QT_CHECK([PKG_CHECK_MODULES([PROTOBUF], [protobuf], [have_protobuf=yes], [BITCOIN_QT_FAIL(libprotobuf not found)])])\n+      if test x$enable_bip70 != xno; then\n+        BITCOIN_QT_CHECK([PKG_CHECK_MODULES([PROTOBUF], [protobuf], [have_protobuf=yes], [BITCOIN_QT_FAIL(libprotobuf not found)])])\n+      fi\n       if test x$use_qr != xno; then\n         BITCOIN_QT_CHECK([PKG_CHECK_MODULES([QR], [libqrencode], [have_qrencode=yes], [have_qrencode=no])])\n       fi\n@@ -1142,7 +1149,9 @@ else\n     esac\n   fi\n \n-  BITCOIN_QT_CHECK(AC_CHECK_LIB([protobuf] ,[main],[PROTOBUF_LIBS=-lprotobuf], BITCOIN_QT_FAIL(libprotobuf not found)))\n+  if test x$enable_bip70 != xno; then\n+    BITCOIN_QT_CHECK(AC_CHECK_LIB([protobuf] ,[main],[PROTOBUF_LIBS=-lprotobuf], BITCOIN_QT_FAIL(libprotobuf not found)))\n+  fi\n   if test x$use_qr != xno; then\n     BITCOIN_QT_CHECK([AC_CHECK_LIB([qrencode], [main],[QR_LIBS=-lqrencode], [have_qrencode=no])])\n     BITCOIN_QT_CHECK([AC_CHECK_HEADER([qrencode.h],, have_qrencode=no)])\n@@ -1220,7 +1229,9 @@ AM_CONDITIONAL([EMBEDDED_UNIVALUE],[test x$need_bundled_univalue = xyes])\n AC_SUBST(UNIVALUE_CFLAGS)\n AC_SUBST(UNIVALUE_LIBS)\n \n+if test x$enable_bip70 != xno; then\n BITCOIN_QT_PATH_PROGS([PROTOC], [protoc],$protoc_bin_path)\n+fi\n \n AC_MSG_CHECKING([whether to build bitcoind])\n AM_CONDITIONAL([BUILD_BITCOIND], [test x$build_bitcoind = xyes])\n@@ -1338,6 +1349,15 @@ if test x$bitcoin_enable_qt != xno; then\n   else\n     AC_MSG_RESULT([no])\n   fi\n+\n+  AC_MSG_CHECKING([whether to build BIP70 support])\n+  if test x$enable_bip70 != xno; then\n+    AC_DEFINE([ENABLE_BIP70],[1],[Define if BIP70 support should be compiled in])\n+    enable_bip70=yes\n+    AC_MSG_RESULT([yes])\n+  else\n+    AC_MSG_RESULT([no])\n+  fi\n fi\n \n AM_CONDITIONAL([ENABLE_ZMQ], [test \"x$use_zmq\" = \"xyes\"])\n@@ -1369,6 +1389,7 @@ AM_CONDITIONAL([ENABLE_WALLET],[test x$enable_wallet = xyes])\n AM_CONDITIONAL([ENABLE_TESTS],[test x$BUILD_TEST = xyes])\n AM_CONDITIONAL([ENABLE_QT],[test x$bitcoin_enable_qt = xyes])\n AM_CONDITIONAL([ENABLE_QT_TESTS],[test x$BUILD_TEST_QT = xyes])\n+AM_CONDITIONAL([ENABLE_BIP70],[test x$enable_bip70 = xyes])\n AM_CONDITIONAL([ENABLE_BENCH],[test x$use_bench = xyes])\n AM_CONDITIONAL([USE_QRCODE], [test x$use_qr = xyes])\n AM_CONDITIONAL([USE_LCOV],[test x$use_lcov = xyes])\n@@ -1503,6 +1524,7 @@ echo \"Options used to compile and link:\"\n echo \"  with wallet   = $enable_wallet\"\n echo \"  with gui / qt = $bitcoin_enable_qt\"\n if test x$bitcoin_enable_qt != xno; then\n+    echo \"    with bip70  = $enable_bip70\"\n     echo \"    with qr     = $use_qr\"\n fi\n echo \"  with zmq      = $use_zmq\""
      },
      {
        "sha": "6141919007d5fbda1d5dbf29d136b1b2e71fa0d2",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dcf6c0dfec51f2a49edef537f377422d6dbdceb/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dcf6c0dfec51f2a49edef537f377422d6dbdceb/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=9dcf6c0dfec51f2a49edef537f377422d6dbdceb",
        "patch": "@@ -587,9 +587,11 @@ if HARDEN\n \t$(AM_V_at) READELF=$(READELF) OBJDUMP=$(OBJDUMP) $(top_srcdir)/contrib/devtools/security-check.py < $(bin_PROGRAMS)\n endif\n \n+if ENABLE_BIP70\n %.pb.cc %.pb.h: %.proto\n \t@test -f $(PROTOC)\n \t$(AM_V_GEN) $(PROTOC) --cpp_out=$(@D) --proto_path=$(<D) $<\n+endif\n \n if EMBEDDED_LEVELDB\n include Makefile.leveldb.include"
      },
      {
        "sha": "dfc4903cf93813165bfbd95c8a463aa0d5986ca5",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dcf6c0dfec51f2a49edef537f377422d6dbdceb/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dcf6c0dfec51f2a49edef537f377422d6dbdceb/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=9dcf6c0dfec51f2a49edef537f377422d6dbdceb",
        "patch": "@@ -178,9 +178,15 @@ QT_QRC = qt/bitcoin.qrc\n QT_QRC_LOCALE_CPP = qt/qrc_bitcoin_locale.cpp\n QT_QRC_LOCALE = qt/bitcoin_locale.qrc\n \n+if ENABLE_BIP70\n PROTOBUF_CC = qt/paymentrequest.pb.cc\n PROTOBUF_H = qt/paymentrequest.pb.h\n PROTOBUF_PROTO = qt/paymentrequest.proto\n+else\n+PROTOBUF_CC =\n+PROTOBUF_H =\n+PROTOBUF_PROTO =\n+endif\n \n BITCOIN_QT_H = \\\n   qt/addressbookpage.h \\\n@@ -330,7 +336,6 @@ BITCOIN_QT_WALLET_CPP = \\\n   qt/editaddressdialog.cpp \\\n   qt/openuridialog.cpp \\\n   qt/overviewpage.cpp \\\n-  qt/paymentrequestplus.cpp \\\n   qt/paymentserver.cpp \\\n   qt/receivecoinsdialog.cpp \\\n   qt/receiverequestdialog.cpp \\\n@@ -349,13 +354,19 @@ BITCOIN_QT_WALLET_CPP = \\\n   qt/walletmodeltransaction.cpp \\\n   qt/walletview.cpp\n \n+BITCOIN_QT_WALLET_BIP70_CPP = \\\n+  qt/paymentrequestplus.cpp\n+\n BITCOIN_QT_CPP = $(BITCOIN_QT_BASE_CPP)\n if TARGET_WINDOWS\n BITCOIN_QT_CPP += $(BITCOIN_QT_WINDOWS_CPP)\n endif\n if ENABLE_WALLET\n BITCOIN_QT_CPP += $(BITCOIN_QT_WALLET_CPP)\n-endif\n+if ENABLE_BIP70\n+BITCOIN_QT_CPP += $(BITCOIN_QT_WALLET_BIP70_CPP)\n+endif # ENABLE_BIP70\n+endif # ENABLE_WALLET\n \n RES_IMAGES =\n "
      },
      {
        "sha": "db7873e8b75952efdf11cda81ca66c7f75e08824",
        "filename": "src/Makefile.qttest.include",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dcf6c0dfec51f2a49edef537f377422d6dbdceb/src/Makefile.qttest.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dcf6c0dfec51f2a49edef537f377422d6dbdceb/src/Makefile.qttest.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qttest.include?ref=9dcf6c0dfec51f2a49edef537f377422d6dbdceb",
        "patch": "@@ -13,9 +13,12 @@ TEST_QT_MOC_CPP = \\\n if ENABLE_WALLET\n TEST_QT_MOC_CPP += \\\n   qt/test/moc_addressbooktests.cpp \\\n-  qt/test/moc_paymentservertests.cpp \\\n   qt/test/moc_wallettests.cpp\n-endif\n+if ENABLE_BIP70\n+TEST_QT_MOC_CPP += \\\n+  qt/test/moc_paymentservertests.cpp\n+endif # ENABLE_BIP70\n+endif # ENABLE_WALLET\n \n TEST_QT_H = \\\n   qt/test/addressbooktests.h \\\n@@ -48,10 +51,13 @@ qt_test_test_bitcoin_qt_SOURCES = \\\n if ENABLE_WALLET\n qt_test_test_bitcoin_qt_SOURCES += \\\n   qt/test/addressbooktests.cpp \\\n-  qt/test/paymentservertests.cpp \\\n   qt/test/wallettests.cpp \\\n   wallet/test/wallet_test_fixture.cpp\n-endif\n+if ENABLE_BIP70\n+qt_test_test_bitcoin_qt_SOURCES += \\\n+  qt/test/paymentservertests.cpp\n+endif # ENABLE_BIP70\n+endif # ENABLE_WALLET\n \n nodist_qt_test_test_bitcoin_qt_SOURCES = $(TEST_QT_MOC_CPP)\n "
      },
      {
        "sha": "eb43e68539ae7ca62701752a654afc8699c22c50",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dcf6c0dfec51f2a49edef537f377422d6dbdceb/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dcf6c0dfec51f2a49edef537f377422d6dbdceb/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=9dcf6c0dfec51f2a49edef537f377422d6dbdceb",
        "patch": "@@ -440,8 +440,10 @@ void BitcoinApplication::addWallet(WalletModel* walletModel)\n         window->setCurrentWallet(walletModel->getWalletName());\n     }\n \n+#ifdef ENABLE_BIP70\n     connect(walletModel, &WalletModel::coinsSent,\n         paymentServer, &PaymentServer::fetchPaymentACK);\n+#endif\n     connect(walletModel, &WalletModel::unload, this, &BitcoinApplication::removeWallet);\n \n     m_wallet_models.push_back(walletModel);\n@@ -468,7 +470,9 @@ void BitcoinApplication::initializeResult(bool success)\n         // Log this only after AppInitMain finishes, as then logging setup is guaranteed complete\n         qWarning() << \"Platform customization:\" << platformStyle->getName();\n #ifdef ENABLE_WALLET\n+#ifdef ENABLE_BIP70\n         PaymentServer::LoadRootCAs();\n+#endif\n         paymentServer->setOptionsModel(optionsModel);\n #endif\n \n@@ -537,7 +541,7 @@ WId BitcoinApplication::getMainWinId() const\n \n static void SetupUIArgs()\n {\n-#ifdef ENABLE_WALLET\n+#if defined(ENABLE_WALLET) && defined(ENABLE_BIP70)\n     gArgs.AddArg(\"-allowselfsignedrootcertificates\", strprintf(\"Allow self signed root certificates (default: %u)\", DEFAULT_SELFSIGNED_ROOTCERTS), true, OptionsCategory::GUI);\n #endif\n     gArgs.AddArg(\"-choosedatadir\", strprintf(\"Choose data directory on startup (default: %u)\", DEFAULT_CHOOSE_DATADIR), false, OptionsCategory::GUI);"
      },
      {
        "sha": "ea970c0bc9a40b3975a4e50d50d616fd66829d7f",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dcf6c0dfec51f2a49edef537f377422d6dbdceb/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dcf6c0dfec51f2a49edef537f377422d6dbdceb/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=9dcf6c0dfec51f2a49edef537f377422d6dbdceb",
        "patch": "@@ -2,10 +2,15 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n #include <qt/coincontroldialog.h>\n #include <qt/forms/ui_coincontroldialog.h>\n \n #include <qt/addresstablemodel.h>\n+#include <base58.h>\n #include <qt/bitcoinunits.h>\n #include <qt/guiutil.h>\n #include <qt/optionsmodel.h>"
      },
      {
        "sha": "760728f85b33f0c49abb3e77717492fc4e9881ef",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 1,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dcf6c0dfec51f2a49edef537f377422d6dbdceb/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dcf6c0dfec51f2a49edef537f377422d6dbdceb/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=9dcf6c0dfec51f2a49edef537f377422d6dbdceb",
        "patch": "@@ -2,6 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n #include <qt/paymentserver.h>\n \n #include <qt/bitcoinunits.h>\n@@ -45,6 +49,7 @@\n \n const int BITCOIN_IPC_CONNECT_TIMEOUT = 1000; // milliseconds\n const QString BITCOIN_IPC_PREFIX(\"bitcoin:\");\n+#ifdef ENABLE_BIP70\n // BIP70 payment protocol messages\n const char* BIP70_MESSAGE_PAYMENTACK = \"PaymentACK\";\n const char* BIP70_MESSAGE_PAYMENTREQUEST = \"PaymentRequest\";\n@@ -67,6 +72,7 @@ namespace // Anon namespace\n {\n     std::unique_ptr<X509_STORE, X509StoreDeleter> certStore;\n }\n+#endif\n \n //\n // Create a name that is unique for:\n@@ -93,6 +99,7 @@ static QString ipcServerName()\n \n static QList<QString> savedPaymentRequests;\n \n+#ifdef ENABLE_BIP70\n static void ReportInvalidCertificate(const QSslCertificate& cert)\n {\n     qDebug() << QString(\"%1: Payment server found an invalid certificate: \").arg(__func__) << cert.serialNumber() << cert.subjectInfo(QSslCertificate::CommonName) << cert.subjectInfo(QSslCertificate::DistinguishedNameQualifier) << cert.subjectInfo(QSslCertificate::OrganizationalUnitName);\n@@ -180,6 +187,7 @@ void PaymentServer::LoadRootCAs(X509_STORE* _store)\n     //    or use Qt's blacklist?\n     //   \"certificate stapling\" with server-side caching is more efficient\n }\n+#endif\n \n //\n // Sending to the server is done synchronously, at startup.\n@@ -221,6 +229,7 @@ void PaymentServer::ipcParseCommandLine(interfaces::Node& node, int argc, char*\n                 }\n             }\n         }\n+#ifdef ENABLE_BIP70\n         else if (QFile::exists(arg)) // Filename\n         {\n             savedPaymentRequests.append(arg);\n@@ -244,6 +253,7 @@ void PaymentServer::ipcParseCommandLine(interfaces::Node& node, int argc, char*\n             // GUI hasn't started yet so we can't pop up a message box.\n             qWarning() << \"PaymentServer::ipcSendCommandLine: Payment request file does not exist: \" << arg;\n         }\n+#endif\n     }\n }\n \n@@ -290,12 +300,16 @@ PaymentServer::PaymentServer(QObject* parent, bool startLocalServer) :\n     QObject(parent),\n     saveURIs(true),\n     uriServer(0),\n+#ifdef ENABLE_BIP70\n     netManager(0),\n+#endif\n     optionsModel(0)\n {\n+#ifdef ENABLE_BIP70\n     // Verify that the version of the library that we linked against is\n     // compatible with the version of the headers we compiled against.\n     GOOGLE_PROTOBUF_VERIFY_VERSION;\n+#endif\n \n     // Install global event filter to catch QFileOpenEvents\n     // on Mac: sent when you click bitcoin: links\n@@ -319,14 +333,18 @@ PaymentServer::PaymentServer(QObject* parent, bool startLocalServer) :\n         }\n         else {\n             connect(uriServer, &QLocalServer::newConnection, this, &PaymentServer::handleURIConnection);\n+#ifdef ENABLE_BIP70\n             connect(this, &PaymentServer::receivedPaymentACK, this, &PaymentServer::handlePaymentACK);\n+#endif\n         }\n     }\n }\n \n PaymentServer::~PaymentServer()\n {\n+#ifdef ENABLE_BIP70\n     google::protobuf::ShutdownProtobufLibrary();\n+#endif\n }\n \n //\n@@ -349,6 +367,7 @@ bool PaymentServer::eventFilter(QObject *object, QEvent *event)\n     return QObject::eventFilter(object, event);\n }\n \n+#ifdef ENABLE_BIP70\n void PaymentServer::initNetManager()\n {\n     if (!optionsModel)\n@@ -372,10 +391,13 @@ void PaymentServer::initNetManager()\n     connect(netManager, &QNetworkAccessManager::finished, this, &PaymentServer::netRequestFinished);\n     connect(netManager, &QNetworkAccessManager::sslErrors, this, &PaymentServer::reportSslErrors);\n }\n+#endif\n \n void PaymentServer::uiReady()\n {\n+#ifdef ENABLE_BIP70\n     initNetManager();\n+#endif\n \n     saveURIs = false;\n     for (const QString& s : savedPaymentRequests)\n@@ -403,6 +425,7 @@ void PaymentServer::handleURIOrFile(const QString& s)\n         QUrlQuery uri((QUrl(s)));\n         if (uri.hasQueryItem(\"r\")) // payment request URI\n         {\n+#ifdef ENABLE_BIP70\n             QByteArray temp;\n             temp.append(uri.queryItemValue(\"r\"));\n             QString decoded = QUrl::fromPercentEncoding(temp);\n@@ -420,7 +443,11 @@ void PaymentServer::handleURIOrFile(const QString& s)\n                     tr(\"Payment request fetch URL is invalid: %1\").arg(fetchUrl.toString()),\n                     CClientUIInterface::ICON_WARNING);\n             }\n-\n+#else\n+            Q_EMIT message(tr(\"URI handling\"),\n+                tr(\"Cannot process payment request because BIP70 support was not compiled in.\"),\n+                CClientUIInterface::ICON_WARNING);\n+#endif\n             return;\n         }\n         else // normal URI\n@@ -444,6 +471,7 @@ void PaymentServer::handleURIOrFile(const QString& s)\n         }\n     }\n \n+#ifdef ENABLE_BIP70\n     if (QFile::exists(s)) // payment request file\n     {\n         PaymentRequestPlus request;\n@@ -459,6 +487,7 @@ void PaymentServer::handleURIOrFile(const QString& s)\n \n         return;\n     }\n+#endif\n }\n \n void PaymentServer::handleURIConnection()\n@@ -481,6 +510,7 @@ void PaymentServer::handleURIConnection()\n     handleURIOrFile(msg);\n }\n \n+#ifdef ENABLE_BIP70\n //\n // Warning: readPaymentRequestFromFile() is used in ipcSendCommandLine()\n // so don't use \"Q_EMIT message()\", but \"QMessageBox::\"!\n@@ -730,12 +760,14 @@ void PaymentServer::reportSslErrors(QNetworkReply* reply, const QList<QSslError>\n     }\n     Q_EMIT message(tr(\"Network request error\"), errString, CClientUIInterface::MSG_ERROR);\n }\n+#endif\n \n void PaymentServer::setOptionsModel(OptionsModel *_optionsModel)\n {\n     this->optionsModel = _optionsModel;\n }\n \n+#ifdef ENABLE_BIP70\n void PaymentServer::handlePaymentACK(const QString& paymentACKMsg)\n {\n     // currently we don't further process or store the paymentACK message\n@@ -794,3 +826,4 @@ X509_STORE* PaymentServer::getCertStore()\n {\n     return certStore.get();\n }\n+#endif"
      },
      {
        "sha": "eba195e3bd4fb2850725c30ffb5e655a4a481125",
        "filename": "src/qt/paymentserver.h",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dcf6c0dfec51f2a49edef537f377422d6dbdceb/src/qt/paymentserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dcf6c0dfec51f2a49edef537f377422d6dbdceb/src/qt/paymentserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.h?ref=9dcf6c0dfec51f2a49edef537f377422d6dbdceb",
        "patch": "@@ -32,7 +32,13 @@\n // sends them to the server.\n //\n \n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#ifdef ENABLE_BIP70\n #include <qt/paymentrequestplus.h>\n+#endif\n #include <qt/walletmodel.h>\n \n #include <QObject>\n@@ -73,6 +79,7 @@ class PaymentServer : public QObject\n     explicit PaymentServer(QObject* parent, bool startLocalServer = true);\n     ~PaymentServer();\n \n+#ifdef ENABLE_BIP70\n     // Load root certificate authorities. Pass nullptr (default)\n     // to read from the file specified in the -rootcertificates setting,\n     // or, if that's not set, to use the system default root certificates.\n@@ -82,10 +89,12 @@ class PaymentServer : public QObject\n \n     // Return certificate store\n     static X509_STORE* getCertStore();\n+#endif\n \n     // OptionsModel is used for getting proxy settings and display unit\n     void setOptionsModel(OptionsModel *optionsModel);\n \n+#ifdef ENABLE_BIP70\n     // Verify that the payment request network matches the client network\n     static bool verifyNetwork(interfaces::Node& node, const payments::PaymentDetails& requestDetails);\n     // Verify if the payment request is expired\n@@ -94,13 +103,16 @@ class PaymentServer : public QObject\n     static bool verifySize(qint64 requestSize);\n     // Verify the payment request amount is valid\n     static bool verifyAmount(const CAmount& requestAmount);\n+#endif\n \n Q_SIGNALS:\n     // Fired when a valid payment request is received\n     void receivedPaymentRequest(SendCoinsRecipient);\n \n+#ifdef ENABLE_BIP70\n     // Fired when a valid PaymentACK is received\n     void receivedPaymentACK(const QString &paymentACKMsg);\n+#endif\n \n     // Fired when a message should be reported to the user\n     void message(const QString &title, const QString &message, unsigned int style);\n@@ -110,35 +122,43 @@ public Q_SLOTS:\n     // to display payment requests to the user\n     void uiReady();\n \n+#ifdef ENABLE_BIP70\n     // Submit Payment message to a merchant, get back PaymentACK:\n     void fetchPaymentACK(WalletModel* walletModel, const SendCoinsRecipient& recipient, QByteArray transaction);\n+#endif\n \n     // Handle an incoming URI, URI with local file scheme or file\n     void handleURIOrFile(const QString& s);\n \n private Q_SLOTS:\n     void handleURIConnection();\n+#ifdef ENABLE_BIP70\n     void netRequestFinished(QNetworkReply*);\n     void reportSslErrors(QNetworkReply*, const QList<QSslError> &);\n     void handlePaymentACK(const QString& paymentACKMsg);\n+#endif\n \n protected:\n     // Constructor registers this on the parent QApplication to\n     // receive QEvent::FileOpen and QEvent:Drop events\n     bool eventFilter(QObject *object, QEvent *event);\n \n private:\n+#ifdef ENABLE_BIP70\n     static bool readPaymentRequestFromFile(const QString& filename, PaymentRequestPlus& request);\n     bool processPaymentRequest(const PaymentRequestPlus& request, SendCoinsRecipient& recipient);\n     void fetchRequest(const QUrl& url);\n \n     // Setup networking\n     void initNetManager();\n+#endif\n \n     bool saveURIs;                      // true during startup\n     QLocalServer* uriServer;\n \n+#ifdef ENABLE_BIP70\n     QNetworkAccessManager* netManager;  // Used to fetch payment requests\n+#endif\n \n     OptionsModel *optionsModel;\n };"
      },
      {
        "sha": "858128f9f97a62b4747d5667a1970abe4beb566c",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dcf6c0dfec51f2a49edef537f377422d6dbdceb/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dcf6c0dfec51f2a49edef537f377422d6dbdceb/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=9dcf6c0dfec51f2a49edef537f377422d6dbdceb",
        "patch": "@@ -2,6 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n #include <qt/sendcoinsdialog.h>\n #include <qt/forms/ui_sendcoinsdialog.h>\n \n@@ -290,7 +294,9 @@ void SendCoinsDialog::on_sendButton_clicked()\n         QString recipientElement;\n         recipientElement = \"<br />\";\n \n+#ifdef ENABLE_BIP70\n         if (!rcp.paymentRequest.IsInitialized()) // normal payment\n+#endif\n         {\n             if(rcp.label.length() > 0) // label with address\n             {\n@@ -302,6 +308,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n                 recipientElement.append(tr(\"%1 to %2\").arg(amount, address));\n             }\n         }\n+#ifdef ENABLE_BIP70\n         else if(!rcp.authenticatedMerchant.isEmpty()) // authenticated payment request\n         {\n             recipientElement.append(tr(\"%1 to %2\").arg(amount, GUIUtil::HtmlEscape(rcp.authenticatedMerchant)));\n@@ -310,6 +317,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n         {\n             recipientElement.append(tr(\"%1 to %2\").arg(amount, address));\n         }\n+#endif\n \n         formatted.append(recipientElement);\n     }"
      },
      {
        "sha": "76c942c8b9c0b9fc44c08eccef12f28da333024c",
        "filename": "src/qt/sendcoinsentry.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dcf6c0dfec51f2a49edef537f377422d6dbdceb/src/qt/sendcoinsentry.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dcf6c0dfec51f2a49edef537f377422d6dbdceb/src/qt/sendcoinsentry.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.cpp?ref=9dcf6c0dfec51f2a49edef537f377422d6dbdceb",
        "patch": "@@ -2,6 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n #include <qt/sendcoinsentry.h>\n #include <qt/forms/ui_sendcoinsentry.h>\n \n@@ -133,9 +137,11 @@ bool SendCoinsEntry::validate(interfaces::Node& node)\n     // Check input validity\n     bool retval = true;\n \n+#ifdef ENABLE_BIP70\n     // Skip checks for payment request\n     if (recipient.paymentRequest.IsInitialized())\n         return retval;\n+#endif\n \n     if (!model->validateAddress(ui->payTo->text()))\n     {\n@@ -166,9 +172,11 @@ bool SendCoinsEntry::validate(interfaces::Node& node)\n \n SendCoinsRecipient SendCoinsEntry::getValue()\n {\n+#ifdef ENABLE_BIP70\n     // Payment request\n     if (recipient.paymentRequest.IsInitialized())\n         return recipient;\n+#endif\n \n     // Normal payment\n     recipient.address = ui->payTo->text();\n@@ -196,6 +204,7 @@ void SendCoinsEntry::setValue(const SendCoinsRecipient &value)\n {\n     recipient = value;\n \n+#ifdef ENABLE_BIP70\n     if (recipient.paymentRequest.IsInitialized()) // payment request\n     {\n         if (recipient.authenticatedMerchant.isEmpty()) // unauthenticated\n@@ -216,6 +225,7 @@ void SendCoinsEntry::setValue(const SendCoinsRecipient &value)\n         }\n     }\n     else // normal payment\n+#endif\n     {\n         // message\n         ui->messageTextLabel->setText(recipient.message);"
      },
      {
        "sha": "6750c543da2f1291f9a229a58b5546e7116219d2",
        "filename": "src/qt/test/compattests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dcf6c0dfec51f2a49edef537f377422d6dbdceb/src/qt/test/compattests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dcf6c0dfec51f2a49edef537f377422d6dbdceb/src/qt/test/compattests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/compattests.cpp?ref=9dcf6c0dfec51f2a49edef537f377422d6dbdceb",
        "patch": "@@ -2,7 +2,13 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#if defined(ENABLE_WALLET) && defined(ENABLE_BIP70)\n #include <qt/paymentrequestplus.h> // this includes protobuf's port.h which defines its own bswap macos\n+#endif\n \n #include <qt/test/compattests.h>\n "
      },
      {
        "sha": "28df4ebf26e9af3bc5048a244a1b46d17dfade82",
        "filename": "src/qt/test/test_main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dcf6c0dfec51f2a49edef537f377422d6dbdceb/src/qt/test/test_main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dcf6c0dfec51f2a49edef537f377422d6dbdceb/src/qt/test/test_main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/test_main.cpp?ref=9dcf6c0dfec51f2a49edef537f377422d6dbdceb",
        "patch": "@@ -14,9 +14,11 @@\n \n #ifdef ENABLE_WALLET\n #include <qt/test/addressbooktests.h>\n+#ifdef ENABLE_BIP70\n #include <qt/test/paymentservertests.h>\n+#endif // ENABLE_BIP70\n #include <qt/test/wallettests.h>\n-#endif\n+#endif // ENABLE_WALLET\n \n #include <QApplication>\n #include <QObject>\n@@ -74,7 +76,7 @@ int main(int argc, char *argv[])\n     if (QTest::qExec(&test1) != 0) {\n         fInvalid = true;\n     }\n-#ifdef ENABLE_WALLET\n+#if defined(ENABLE_WALLET) && defined(ENABLE_BIP70)\n     PaymentServerTests test2;\n     if (QTest::qExec(&test2) != 0) {\n         fInvalid = true;"
      },
      {
        "sha": "2284be4121e2b3e6ad1027a1c104ceaa1f0e6cf1",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dcf6c0dfec51f2a49edef537f377422d6dbdceb/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dcf6c0dfec51f2a49edef537f377422d6dbdceb/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=9dcf6c0dfec51f2a49edef537f377422d6dbdceb",
        "patch": "@@ -2,6 +2,7 @@\n #include <qt/test/util.h>\n \n #include <interfaces/node.h>\n+#include <base58.h>\n #include <qt/bitcoinamountfield.h>\n #include <qt/callback.h>\n #include <qt/optionsmodel.h>"
      },
      {
        "sha": "3c5617bfa8bd565b7d194e16b74085e171d9a9b6",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dcf6c0dfec51f2a49edef537f377422d6dbdceb/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dcf6c0dfec51f2a49edef537f377422d6dbdceb/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=9dcf6c0dfec51f2a49edef537f377422d6dbdceb",
        "patch": "@@ -2,6 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#ifdef HAVE_CONFIG_H\n+#include <config/bitcoin-config.h>\n+#endif\n+\n #include <qt/transactiondesc.h>\n \n #include <qt/bitcoinunits.h>\n@@ -257,6 +261,7 @@ QString TransactionDesc::toHTML(interfaces::Node& node, interfaces::Wallet& wall\n         if (r.first == \"Message\")\n             strHTML += \"<br><b>\" + tr(\"Message\") + \":</b><br>\" + GUIUtil::HtmlEscape(r.second, true) + \"<br>\";\n \n+#ifdef ENABLE_BIP70\n     //\n     // PaymentRequest info:\n     //\n@@ -271,6 +276,7 @@ QString TransactionDesc::toHTML(interfaces::Node& node, interfaces::Wallet& wall\n                 strHTML += \"<b>\" + tr(\"Merchant\") + \":</b> \" + GUIUtil::HtmlEscape(merchant) + \"<br>\";\n         }\n     }\n+#endif\n \n     if (wtx.is_coinbase)\n     {"
      },
      {
        "sha": "faeed87ec47db61a3a818ee3445f0417519420ec",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dcf6c0dfec51f2a49edef537f377422d6dbdceb/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dcf6c0dfec51f2a49edef537f377422d6dbdceb/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=9dcf6c0dfec51f2a49edef537f377422d6dbdceb",
        "patch": "@@ -14,7 +14,9 @@\n #include <qt/clientmodel.h>\n #include <qt/guiconstants.h>\n #include <qt/intro.h>\n+#ifdef ENABLE_BIP70\n #include <qt/paymentrequestplus.h>\n+#endif\n #include <qt/guiutil.h>\n \n #include <clientversion.h>"
      },
      {
        "sha": "71b2d321e23f787a7c7bb2254164627dafd51033",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dcf6c0dfec51f2a49edef537f377422d6dbdceb/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dcf6c0dfec51f2a49edef537f377422d6dbdceb/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=9dcf6c0dfec51f2a49edef537f377422d6dbdceb",
        "patch": "@@ -2,6 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n #include <qt/walletmodel.h>\n \n #include <qt/addresstablemodel.h>\n@@ -142,6 +146,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n         if (rcp.fSubtractFeeFromAmount)\n             fSubtractFeeFromAmount = true;\n \n+#ifdef ENABLE_BIP70\n         if (rcp.paymentRequest.IsInitialized())\n         {   // PaymentRequest...\n             CAmount subtotal = 0;\n@@ -164,6 +169,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n             total += subtotal;\n         }\n         else\n+#endif\n         {   // User-entered bitcoin address / amount:\n             if(!validateAddress(rcp.address))\n             {\n@@ -235,6 +241,7 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n         std::vector<std::pair<std::string, std::string>> vOrderForm;\n         for (const SendCoinsRecipient &rcp : transaction.getRecipients())\n         {\n+#ifdef ENABLE_BIP70\n             if (rcp.paymentRequest.IsInitialized())\n             {\n                 // Make sure any payment requests involved are still valid.\n@@ -247,7 +254,9 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n                 rcp.paymentRequest.SerializeToString(&value);\n                 vOrderForm.emplace_back(\"PaymentRequest\", std::move(value));\n             }\n-            else if (!rcp.message.isEmpty()) // Message from normal bitcoin:URI (bitcoin:123...?message=example)\n+            else\n+#endif\n+            if (!rcp.message.isEmpty()) // Message from normal bitcoin:URI (bitcoin:123...?message=example)\n                 vOrderForm.emplace_back(\"Message\", rcp.message.toStdString());\n         }\n \n@@ -266,7 +275,9 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n     for (const SendCoinsRecipient &rcp : transaction.getRecipients())\n     {\n         // Don't touch the address book when we have a payment request\n+#ifdef ENABLE_BIP70\n         if (!rcp.paymentRequest.IsInitialized())\n+#endif\n         {\n             std::string strAddress = rcp.address.toStdString();\n             CTxDestination dest = DecodeDestination(strAddress);"
      },
      {
        "sha": "ec4c5a2a6c4d3d338f8b702ca15e7874abc869b1",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dcf6c0dfec51f2a49edef537f377422d6dbdceb/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dcf6c0dfec51f2a49edef537f377422d6dbdceb/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=9dcf6c0dfec51f2a49edef537f377422d6dbdceb",
        "patch": "@@ -10,7 +10,13 @@\n #include <serialize.h>\n #include <script/standard.h>\n \n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#ifdef ENABLE_BIP70\n #include <qt/paymentrequestplus.h>\n+#endif\n #include <qt/walletmodeltransaction.h>\n \n #include <interfaces/wallet.h>\n@@ -63,8 +69,14 @@ class SendCoinsRecipient\n     // If from a payment request, this is used for storing the memo\n     QString message;\n \n+#ifdef ENABLE_BIP70\n     // If from a payment request, paymentRequest.IsInitialized() will be true\n     PaymentRequestPlus paymentRequest;\n+#else\n+    // If building with BIP70 is disabled, keep the payment request around as\n+    // serialized string to ensure load/store is lossless\n+    std::string sPaymentRequest;\n+#endif\n     // Empty if no authentication or invalid signature/cert/etc.\n     QString authenticatedMerchant;\n \n@@ -80,9 +92,11 @@ class SendCoinsRecipient\n         std::string sAddress = address.toStdString();\n         std::string sLabel = label.toStdString();\n         std::string sMessage = message.toStdString();\n+#ifdef ENABLE_BIP70\n         std::string sPaymentRequest;\n         if (!ser_action.ForRead() && paymentRequest.IsInitialized())\n             paymentRequest.SerializeToString(&sPaymentRequest);\n+#endif\n         std::string sAuthenticatedMerchant = authenticatedMerchant.toStdString();\n \n         READWRITE(this->nVersion);\n@@ -98,8 +112,10 @@ class SendCoinsRecipient\n             address = QString::fromStdString(sAddress);\n             label = QString::fromStdString(sLabel);\n             message = QString::fromStdString(sMessage);\n+#ifdef ENABLE_BIP70\n             if (!sPaymentRequest.empty())\n                 paymentRequest.parse(QByteArray::fromRawData(sPaymentRequest.data(), sPaymentRequest.size()));\n+#endif\n             authenticatedMerchant = QString::fromStdString(sAuthenticatedMerchant);\n         }\n     }"
      },
      {
        "sha": "eb3b0baf088c530a8a624b7afb9f7ff76159ea2e",
        "filename": "src/qt/walletmodeltransaction.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dcf6c0dfec51f2a49edef537f377422d6dbdceb/src/qt/walletmodeltransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dcf6c0dfec51f2a49edef537f377422d6dbdceb/src/qt/walletmodeltransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.cpp?ref=9dcf6c0dfec51f2a49edef537f377422d6dbdceb",
        "patch": "@@ -2,6 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#ifdef HAVE_CONFIG_H\n+#include <config/bitcoin-config.h>\n+#endif\n+\n #include <qt/walletmodeltransaction.h>\n \n #include <interfaces/node.h>\n@@ -46,6 +50,7 @@ void WalletModelTransaction::reassignAmounts(int nChangePosRet)\n     {\n         SendCoinsRecipient& rcp = (*it);\n \n+#ifdef ENABLE_BIP70\n         if (rcp.paymentRequest.IsInitialized())\n         {\n             CAmount subtotal = 0;\n@@ -62,6 +67,7 @@ void WalletModelTransaction::reassignAmounts(int nChangePosRet)\n             rcp.amount = subtotal;\n         }\n         else // normal recipient (no payment request)\n+#endif\n         {\n             if (i == nChangePosRet)\n                 i++;"
      },
      {
        "sha": "289aee847b0754f0b083f3e50f61dd50f99499d3",
        "filename": "src/qt/walletmodeltransaction.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dcf6c0dfec51f2a49edef537f377422d6dbdceb/src/qt/walletmodeltransaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dcf6c0dfec51f2a49edef537f377422d6dbdceb/src/qt/walletmodeltransaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.h?ref=9dcf6c0dfec51f2a49edef537f377422d6dbdceb",
        "patch": "@@ -8,6 +8,7 @@\n #include <qt/walletmodel.h>\n \n #include <memory>\n+#include <amount.h>\n \n #include <QObject>\n "
      }
    ]
  },
  {
    "sha": "38b98507cdda02ff02a524d41bcc3427ca9e4fd9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOGI5ODUwN2NkZGEwMmZmMDJhNTI0ZDQxYmNjMzQyN2NhOWU0ZmQ5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-09T15:41:15Z"
      },
      "committer": {
        "name": "James Hilliard",
        "email": "james.hilliard1@gmail.com",
        "date": "2018-10-22T10:03:17Z"
      },
      "message": "qt: cleanup: Move BIP70 functions together in paymentserver\n\nReduces the number of separate `#ifdefs` spans.",
      "tree": {
        "sha": "e6f9a2fb8b7e16015e5eeaae6afd41f4504896f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e6f9a2fb8b7e16015e5eeaae6afd41f4504896f0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/38b98507cdda02ff02a524d41bcc3427ca9e4fd9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38b98507cdda02ff02a524d41bcc3427ca9e4fd9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/38b98507cdda02ff02a524d41bcc3427ca9e4fd9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38b98507cdda02ff02a524d41bcc3427ca9e4fd9/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jameshilliard",
      "id": 3298484,
      "node_id": "MDQ6VXNlcjMyOTg0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3298484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jameshilliard",
      "html_url": "https://github.com/jameshilliard",
      "followers_url": "https://api.github.com/users/jameshilliard/followers",
      "following_url": "https://api.github.com/users/jameshilliard/following{/other_user}",
      "gists_url": "https://api.github.com/users/jameshilliard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jameshilliard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jameshilliard/subscriptions",
      "organizations_url": "https://api.github.com/users/jameshilliard/orgs",
      "repos_url": "https://api.github.com/users/jameshilliard/repos",
      "events_url": "https://api.github.com/users/jameshilliard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jameshilliard/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9dcf6c0dfec51f2a49edef537f377422d6dbdceb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9dcf6c0dfec51f2a49edef537f377422d6dbdceb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9dcf6c0dfec51f2a49edef537f377422d6dbdceb"
      }
    ],
    "stats": {
      "total": 307,
      "additions": 148,
      "deletions": 159
    },
    "files": [
      {
        "sha": "28016fc860ed2e346299b417806f02287ac5fb2a",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 135,
        "deletions": 140,
        "changes": 275,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38b98507cdda02ff02a524d41bcc3427ca9e4fd9/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38b98507cdda02ff02a524d41bcc3427ca9e4fd9/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=38b98507cdda02ff02a524d41bcc3427ca9e4fd9",
        "patch": "@@ -57,21 +57,6 @@ const char* BIP70_MESSAGE_PAYMENTREQUEST = \"PaymentRequest\";\n const char* BIP71_MIMETYPE_PAYMENT = \"application/bitcoin-payment\";\n const char* BIP71_MIMETYPE_PAYMENTACK = \"application/bitcoin-paymentack\";\n const char* BIP71_MIMETYPE_PAYMENTREQUEST = \"application/bitcoin-paymentrequest\";\n-\n-struct X509StoreDeleter {\n-      void operator()(X509_STORE* b) {\n-          X509_STORE_free(b);\n-      }\n-};\n-\n-struct X509Deleter {\n-      void operator()(X509* b) { X509_free(b); }\n-};\n-\n-namespace // Anon namespace\n-{\n-    std::unique_ptr<X509_STORE, X509StoreDeleter> certStore;\n-}\n #endif\n \n //\n@@ -99,96 +84,6 @@ static QString ipcServerName()\n \n static QList<QString> savedPaymentRequests;\n \n-#ifdef ENABLE_BIP70\n-static void ReportInvalidCertificate(const QSslCertificate& cert)\n-{\n-    qDebug() << QString(\"%1: Payment server found an invalid certificate: \").arg(__func__) << cert.serialNumber() << cert.subjectInfo(QSslCertificate::CommonName) << cert.subjectInfo(QSslCertificate::DistinguishedNameQualifier) << cert.subjectInfo(QSslCertificate::OrganizationalUnitName);\n-}\n-\n-//\n-// Load OpenSSL's list of root certificate authorities\n-//\n-void PaymentServer::LoadRootCAs(X509_STORE* _store)\n-{\n-    // Unit tests mostly use this, to pass in fake root CAs:\n-    if (_store)\n-    {\n-        certStore.reset(_store);\n-        return;\n-    }\n-\n-    // Normal execution, use either -rootcertificates or system certs:\n-    certStore.reset(X509_STORE_new());\n-\n-    // Note: use \"-system-\" default here so that users can pass -rootcertificates=\"\"\n-    // and get 'I don't like X.509 certificates, don't trust anybody' behavior:\n-    QString certFile = QString::fromStdString(gArgs.GetArg(\"-rootcertificates\", \"-system-\"));\n-\n-    // Empty store\n-    if (certFile.isEmpty()) {\n-        qDebug() << QString(\"PaymentServer::%1: Payment request authentication via X.509 certificates disabled.\").arg(__func__);\n-        return;\n-    }\n-\n-    QList<QSslCertificate> certList;\n-\n-    if (certFile != \"-system-\") {\n-            qDebug() << QString(\"PaymentServer::%1: Using \\\"%2\\\" as trusted root certificate.\").arg(__func__).arg(certFile);\n-\n-        certList = QSslCertificate::fromPath(certFile);\n-        // Use those certificates when fetching payment requests, too:\n-        QSslSocket::setDefaultCaCertificates(certList);\n-    } else\n-        certList = QSslSocket::systemCaCertificates();\n-\n-    int nRootCerts = 0;\n-    const QDateTime currentTime = QDateTime::currentDateTime();\n-\n-    for (const QSslCertificate& cert : certList) {\n-        // Don't log NULL certificates\n-        if (cert.isNull())\n-            continue;\n-\n-        // Not yet active/valid, or expired certificate\n-        if (currentTime < cert.effectiveDate() || currentTime > cert.expiryDate()) {\n-            ReportInvalidCertificate(cert);\n-            continue;\n-        }\n-\n-        // Blacklisted certificate\n-        if (cert.isBlacklisted()) {\n-            ReportInvalidCertificate(cert);\n-            continue;\n-        }\n-        QByteArray certData = cert.toDer();\n-        const unsigned char *data = (const unsigned char *)certData.data();\n-\n-        std::unique_ptr<X509, X509Deleter> x509(d2i_X509(0, &data, certData.size()));\n-        if (x509 && X509_STORE_add_cert(certStore.get(), x509.get()))\n-        {\n-            // Note: X509_STORE increases the reference count to the X509 object,\n-            // we still have to release our reference to it.\n-            ++nRootCerts;\n-        }\n-        else\n-        {\n-            ReportInvalidCertificate(cert);\n-            continue;\n-        }\n-    }\n-    qWarning() << \"PaymentServer::LoadRootCAs: Loaded \" << nRootCerts << \" root certificates\";\n-\n-    // Project for another day:\n-    // Fetch certificate revocation lists, and add them to certStore.\n-    // Issues to consider:\n-    //   performance (start a thread to fetch in background?)\n-    //   privacy (fetch through tor/proxy so IP address isn't revealed)\n-    //   would it be easier to just use a compiled-in blacklist?\n-    //    or use Qt's blacklist?\n-    //   \"certificate stapling\" with server-side caching is more efficient\n-}\n-#endif\n-\n //\n // Sending to the server is done synchronously, at startup.\n // If the server isn't already running, startup continues,\n@@ -300,10 +195,10 @@ PaymentServer::PaymentServer(QObject* parent, bool startLocalServer) :\n     QObject(parent),\n     saveURIs(true),\n     uriServer(0),\n+    optionsModel(0)\n #ifdef ENABLE_BIP70\n-    netManager(0),\n+    ,netManager(0)\n #endif\n-    optionsModel(0)\n {\n #ifdef ENABLE_BIP70\n     // Verify that the version of the library that we linked against is\n@@ -367,32 +262,6 @@ bool PaymentServer::eventFilter(QObject *object, QEvent *event)\n     return QObject::eventFilter(object, event);\n }\n \n-#ifdef ENABLE_BIP70\n-void PaymentServer::initNetManager()\n-{\n-    if (!optionsModel)\n-        return;\n-    delete netManager;\n-\n-    // netManager is used to fetch paymentrequests given in bitcoin: URIs\n-    netManager = new QNetworkAccessManager(this);\n-\n-    QNetworkProxy proxy;\n-\n-    // Query active SOCKS5 proxy\n-    if (optionsModel->getProxySettings(proxy)) {\n-        netManager->setProxy(proxy);\n-\n-        qDebug() << \"PaymentServer::initNetManager: Using SOCKS5 proxy\" << proxy.hostName() << \":\" << proxy.port();\n-    }\n-    else\n-        qDebug() << \"PaymentServer::initNetManager: No active proxy server found.\";\n-\n-    connect(netManager, &QNetworkAccessManager::finished, this, &PaymentServer::netRequestFinished);\n-    connect(netManager, &QNetworkAccessManager::sslErrors, this, &PaymentServer::reportSslErrors);\n-}\n-#endif\n-\n void PaymentServer::uiReady()\n {\n #ifdef ENABLE_BIP70\n@@ -510,7 +379,140 @@ void PaymentServer::handleURIConnection()\n     handleURIOrFile(msg);\n }\n \n+void PaymentServer::setOptionsModel(OptionsModel *_optionsModel)\n+{\n+    this->optionsModel = _optionsModel;\n+}\n+\n #ifdef ENABLE_BIP70\n+struct X509StoreDeleter {\n+      void operator()(X509_STORE* b) {\n+          X509_STORE_free(b);\n+      }\n+};\n+\n+struct X509Deleter {\n+      void operator()(X509* b) { X509_free(b); }\n+};\n+\n+namespace // Anon namespace\n+{\n+    std::unique_ptr<X509_STORE, X509StoreDeleter> certStore;\n+}\n+\n+static void ReportInvalidCertificate(const QSslCertificate& cert)\n+{\n+    qDebug() << QString(\"%1: Payment server found an invalid certificate: \").arg(__func__) << cert.serialNumber() << cert.subjectInfo(QSslCertificate::CommonName) << cert.subjectInfo(QSslCertificate::DistinguishedNameQualifier) << cert.subjectInfo(QSslCertificate::OrganizationalUnitName);\n+}\n+\n+//\n+// Load OpenSSL's list of root certificate authorities\n+//\n+void PaymentServer::LoadRootCAs(X509_STORE* _store)\n+{\n+    // Unit tests mostly use this, to pass in fake root CAs:\n+    if (_store)\n+    {\n+        certStore.reset(_store);\n+        return;\n+    }\n+\n+    // Normal execution, use either -rootcertificates or system certs:\n+    certStore.reset(X509_STORE_new());\n+\n+    // Note: use \"-system-\" default here so that users can pass -rootcertificates=\"\"\n+    // and get 'I don't like X.509 certificates, don't trust anybody' behavior:\n+    QString certFile = QString::fromStdString(gArgs.GetArg(\"-rootcertificates\", \"-system-\"));\n+\n+    // Empty store\n+    if (certFile.isEmpty()) {\n+        qDebug() << QString(\"PaymentServer::%1: Payment request authentication via X.509 certificates disabled.\").arg(__func__);\n+        return;\n+    }\n+\n+    QList<QSslCertificate> certList;\n+\n+    if (certFile != \"-system-\") {\n+            qDebug() << QString(\"PaymentServer::%1: Using \\\"%2\\\" as trusted root certificate.\").arg(__func__).arg(certFile);\n+\n+        certList = QSslCertificate::fromPath(certFile);\n+        // Use those certificates when fetching payment requests, too:\n+        QSslSocket::setDefaultCaCertificates(certList);\n+    } else\n+        certList = QSslSocket::systemCaCertificates();\n+\n+    int nRootCerts = 0;\n+    const QDateTime currentTime = QDateTime::currentDateTime();\n+\n+    for (const QSslCertificate& cert : certList) {\n+        // Don't log NULL certificates\n+        if (cert.isNull())\n+            continue;\n+\n+        // Not yet active/valid, or expired certificate\n+        if (currentTime < cert.effectiveDate() || currentTime > cert.expiryDate()) {\n+            ReportInvalidCertificate(cert);\n+            continue;\n+        }\n+\n+        // Blacklisted certificate\n+        if (cert.isBlacklisted()) {\n+            ReportInvalidCertificate(cert);\n+            continue;\n+        }\n+\n+        QByteArray certData = cert.toDer();\n+        const unsigned char *data = (const unsigned char *)certData.data();\n+\n+        std::unique_ptr<X509, X509Deleter> x509(d2i_X509(0, &data, certData.size()));\n+        if (x509 && X509_STORE_add_cert(certStore.get(), x509.get()))\n+        {\n+            // Note: X509_STORE increases the reference count to the X509 object,\n+            // we still have to release our reference to it.\n+            ++nRootCerts;\n+        }\n+        else\n+        {\n+            ReportInvalidCertificate(cert);\n+            continue;\n+        }\n+    }\n+    qWarning() << \"PaymentServer::LoadRootCAs: Loaded \" << nRootCerts << \" root certificates\";\n+\n+    // Project for another day:\n+    // Fetch certificate revocation lists, and add them to certStore.\n+    // Issues to consider:\n+    //   performance (start a thread to fetch in background?)\n+    //   privacy (fetch through tor/proxy so IP address isn't revealed)\n+    //   would it be easier to just use a compiled-in blacklist?\n+    //    or use Qt's blacklist?\n+    //   \"certificate stapling\" with server-side caching is more efficient\n+}\n+\n+void PaymentServer::initNetManager()\n+{\n+    if (!optionsModel)\n+        return;\n+    delete netManager;\n+\n+    // netManager is used to fetch paymentrequests given in bitcoin: URIs\n+    netManager = new QNetworkAccessManager(this);\n+\n+    QNetworkProxy proxy;\n+\n+    // Query active SOCKS5 proxy\n+    if (optionsModel->getProxySettings(proxy)) {\n+        netManager->setProxy(proxy);\n+\n+        qDebug() << \"PaymentServer::initNetManager: Using SOCKS5 proxy\" << proxy.hostName() << \":\" << proxy.port();\n+    }\n+    else\n+        qDebug() << \"PaymentServer::initNetManager: No active proxy server found.\";\n+\n+    connect(netManager, &QNetworkAccessManager::finished, this, &PaymentServer::netRequestFinished);\n+    connect(netManager, &QNetworkAccessManager::sslErrors, this, &PaymentServer::reportSslErrors);\n+}\n+\n //\n // Warning: readPaymentRequestFromFile() is used in ipcSendCommandLine()\n // so don't use \"Q_EMIT message()\", but \"QMessageBox::\"!\n@@ -760,14 +762,7 @@ void PaymentServer::reportSslErrors(QNetworkReply* reply, const QList<QSslError>\n     }\n     Q_EMIT message(tr(\"Network request error\"), errString, CClientUIInterface::MSG_ERROR);\n }\n-#endif\n-\n-void PaymentServer::setOptionsModel(OptionsModel *_optionsModel)\n-{\n-    this->optionsModel = _optionsModel;\n-}\n \n-#ifdef ENABLE_BIP70\n void PaymentServer::handlePaymentACK(const QString& paymentACKMsg)\n {\n     // currently we don't further process or store the paymentACK message"
      },
      {
        "sha": "30b5bc3b6d6d74fc9fd9486d58abf8172e8bcd66",
        "filename": "src/qt/paymentserver.h",
        "status": "modified",
        "additions": 13,
        "deletions": 19,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38b98507cdda02ff02a524d41bcc3427ca9e4fd9/src/qt/paymentserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38b98507cdda02ff02a524d41bcc3427ca9e4fd9/src/qt/paymentserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.h?ref=38b98507cdda02ff02a524d41bcc3427ca9e4fd9",
        "patch": "@@ -79,6 +79,9 @@ class PaymentServer : public QObject\n     explicit PaymentServer(QObject* parent, bool startLocalServer = true);\n     ~PaymentServer();\n \n+    // OptionsModel is used for getting proxy settings and display unit\n+    void setOptionsModel(OptionsModel *optionsModel);\n+\n #ifdef ENABLE_BIP70\n     // Load root certificate authorities. Pass nullptr (default)\n     // to read from the file specified in the -rootcertificates setting,\n@@ -89,12 +92,7 @@ class PaymentServer : public QObject\n \n     // Return certificate store\n     static X509_STORE* getCertStore();\n-#endif\n \n-    // OptionsModel is used for getting proxy settings and display unit\n-    void setOptionsModel(OptionsModel *optionsModel);\n-\n-#ifdef ENABLE_BIP70\n     // Verify that the payment request network matches the client network\n     static bool verifyNetwork(interfaces::Node& node, const payments::PaymentDetails& requestDetails);\n     // Verify if the payment request is expired\n@@ -109,27 +107,27 @@ class PaymentServer : public QObject\n     // Fired when a valid payment request is received\n     void receivedPaymentRequest(SendCoinsRecipient);\n \n+    // Fired when a message should be reported to the user\n+    void message(const QString &title, const QString &message, unsigned int style);\n+\n #ifdef ENABLE_BIP70\n     // Fired when a valid PaymentACK is received\n     void receivedPaymentACK(const QString &paymentACKMsg);\n #endif\n \n-    // Fired when a message should be reported to the user\n-    void message(const QString &title, const QString &message, unsigned int style);\n-\n public Q_SLOTS:\n     // Signal this when the main window's UI is ready\n     // to display payment requests to the user\n     void uiReady();\n \n+    // Handle an incoming URI, URI with local file scheme or file\n+    void handleURIOrFile(const QString& s);\n+\n #ifdef ENABLE_BIP70\n     // Submit Payment message to a merchant, get back PaymentACK:\n     void fetchPaymentACK(WalletModel* walletModel, const SendCoinsRecipient& recipient, QByteArray transaction);\n #endif\n \n-    // Handle an incoming URI, URI with local file scheme or file\n-    void handleURIOrFile(const QString& s);\n-\n private Q_SLOTS:\n     void handleURIConnection();\n #ifdef ENABLE_BIP70\n@@ -144,23 +142,19 @@ private Q_SLOTS:\n     bool eventFilter(QObject *object, QEvent *event);\n \n private:\n+    bool saveURIs;                      // true during startup\n+    QLocalServer* uriServer;\n+    OptionsModel *optionsModel;\n+\n #ifdef ENABLE_BIP70\n     static bool readPaymentRequestFromFile(const QString& filename, PaymentRequestPlus& request);\n     bool processPaymentRequest(const PaymentRequestPlus& request, SendCoinsRecipient& recipient);\n     void fetchRequest(const QUrl& url);\n \n     // Setup networking\n     void initNetManager();\n-#endif\n-\n-    bool saveURIs;                      // true during startup\n-    QLocalServer* uriServer;\n-\n-#ifdef ENABLE_BIP70\n     QNetworkAccessManager* netManager;  // Used to fetch payment requests\n #endif\n-\n-    OptionsModel *optionsModel;\n };\n \n #endif // BITCOIN_QT_PAYMENTSERVER_H"
      }
    ]
  },
  {
    "sha": "fbb643d2a55ade3c06593a7490601acd2e36dce8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYmI2NDNkMmE1NWFkZTNjMDY1OTNhNzQ5MDYwMWFjZDJlMzZkY2U4",
    "commit": {
      "author": {
        "name": "James Hilliard",
        "email": "james.hilliard1@gmail.com",
        "date": "2018-10-09T21:16:32Z"
      },
      "committer": {
        "name": "James Hilliard",
        "email": "james.hilliard1@gmail.com",
        "date": "2018-10-22T10:10:40Z"
      },
      "message": "Add BIP70 deprecation warning",
      "tree": {
        "sha": "f79d44ff02075067913a9c5d112b2c0f120dc214",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f79d44ff02075067913a9c5d112b2c0f120dc214"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fbb643d2a55ade3c06593a7490601acd2e36dce8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbb643d2a55ade3c06593a7490601acd2e36dce8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fbb643d2a55ade3c06593a7490601acd2e36dce8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbb643d2a55ade3c06593a7490601acd2e36dce8/comments",
    "author": {
      "login": "jameshilliard",
      "id": 3298484,
      "node_id": "MDQ6VXNlcjMyOTg0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3298484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jameshilliard",
      "html_url": "https://github.com/jameshilliard",
      "followers_url": "https://api.github.com/users/jameshilliard/followers",
      "following_url": "https://api.github.com/users/jameshilliard/following{/other_user}",
      "gists_url": "https://api.github.com/users/jameshilliard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jameshilliard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jameshilliard/subscriptions",
      "organizations_url": "https://api.github.com/users/jameshilliard/orgs",
      "repos_url": "https://api.github.com/users/jameshilliard/repos",
      "events_url": "https://api.github.com/users/jameshilliard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jameshilliard/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jameshilliard",
      "id": 3298484,
      "node_id": "MDQ6VXNlcjMyOTg0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3298484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jameshilliard",
      "html_url": "https://github.com/jameshilliard",
      "followers_url": "https://api.github.com/users/jameshilliard/followers",
      "following_url": "https://api.github.com/users/jameshilliard/following{/other_user}",
      "gists_url": "https://api.github.com/users/jameshilliard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jameshilliard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jameshilliard/subscriptions",
      "organizations_url": "https://api.github.com/users/jameshilliard/orgs",
      "repos_url": "https://api.github.com/users/jameshilliard/repos",
      "events_url": "https://api.github.com/users/jameshilliard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jameshilliard/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "38b98507cdda02ff02a524d41bcc3427ca9e4fd9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38b98507cdda02ff02a524d41bcc3427ca9e4fd9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/38b98507cdda02ff02a524d41bcc3427ca9e4fd9"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3f118e37f1f8165a97d937e4e9bb95a0aa3e1fde",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbb643d2a55ade3c06593a7490601acd2e36dce8/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbb643d2a55ade3c06593a7490601acd2e36dce8/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=fbb643d2a55ade3c06593a7490601acd2e36dce8",
        "patch": "@@ -295,6 +295,9 @@ void PaymentServer::handleURIOrFile(const QString& s)\n         if (uri.hasQueryItem(\"r\")) // payment request URI\n         {\n #ifdef ENABLE_BIP70\n+            Q_EMIT message(tr(\"URI handling\"),\n+                tr(\"You are using a BIP70 URL which will be unsupported in the future.\"),\n+                CClientUIInterface::ICON_WARNING);\n             QByteArray temp;\n             temp.append(uri.queryItemValue(\"r\"));\n             QString decoded = QUrl::fromPercentEncoding(temp);"
      }
    ]
  },
  {
    "sha": "48439b3c10391e5f5555c7d98e1a99706b77eaf7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ODQzOWIzYzEwMzkxZTVmNTU1NWM3ZDk4ZTFhOTk3MDZiNzdlYWY3",
    "commit": {
      "author": {
        "name": "James Hilliard",
        "email": "james.hilliard1@gmail.com",
        "date": "2018-10-10T06:47:52Z"
      },
      "committer": {
        "name": "James Hilliard",
        "email": "james.hilliard1@gmail.com",
        "date": "2018-10-22T10:10:40Z"
      },
      "message": "Don't link SSL_LIBS with GUI unless BIP70 is enabled",
      "tree": {
        "sha": "63c75eb2103a25e4ffe1f2447dce38ab6a550e0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/63c75eb2103a25e4ffe1f2447dce38ab6a550e0a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/48439b3c10391e5f5555c7d98e1a99706b77eaf7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48439b3c10391e5f5555c7d98e1a99706b77eaf7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/48439b3c10391e5f5555c7d98e1a99706b77eaf7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48439b3c10391e5f5555c7d98e1a99706b77eaf7/comments",
    "author": {
      "login": "jameshilliard",
      "id": 3298484,
      "node_id": "MDQ6VXNlcjMyOTg0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3298484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jameshilliard",
      "html_url": "https://github.com/jameshilliard",
      "followers_url": "https://api.github.com/users/jameshilliard/followers",
      "following_url": "https://api.github.com/users/jameshilliard/following{/other_user}",
      "gists_url": "https://api.github.com/users/jameshilliard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jameshilliard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jameshilliard/subscriptions",
      "organizations_url": "https://api.github.com/users/jameshilliard/orgs",
      "repos_url": "https://api.github.com/users/jameshilliard/repos",
      "events_url": "https://api.github.com/users/jameshilliard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jameshilliard/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jameshilliard",
      "id": 3298484,
      "node_id": "MDQ6VXNlcjMyOTg0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3298484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jameshilliard",
      "html_url": "https://github.com/jameshilliard",
      "followers_url": "https://api.github.com/users/jameshilliard/followers",
      "following_url": "https://api.github.com/users/jameshilliard/following{/other_user}",
      "gists_url": "https://api.github.com/users/jameshilliard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jameshilliard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jameshilliard/subscriptions",
      "organizations_url": "https://api.github.com/users/jameshilliard/orgs",
      "repos_url": "https://api.github.com/users/jameshilliard/repos",
      "events_url": "https://api.github.com/users/jameshilliard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jameshilliard/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fbb643d2a55ade3c06593a7490601acd2e36dce8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbb643d2a55ade3c06593a7490601acd2e36dce8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fbb643d2a55ade3c06593a7490601acd2e36dce8"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "41b25cae924b62501eab5846525bbc107409aa59",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48439b3c10391e5f5555c7d98e1a99706b77eaf7/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48439b3c10391e5f5555c7d98e1a99706b77eaf7/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=48439b3c10391e5f5555c7d98e1a99706b77eaf7",
        "patch": "@@ -419,8 +419,11 @@ endif\n if ENABLE_ZMQ\n qt_bitcoin_qt_LDADD += $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)\n endif\n+if ENABLE_BIP70\n+qt_bitcoin_qt_LDADD += $(SSL_LIBS)\n+endif\n qt_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CONSENSUS) $(LIBBITCOIN_CRYPTO) $(LIBUNIVALUE) $(LIBLEVELDB) $(LIBLEVELDB_SSE42) $(LIBMEMENV) \\\n-  $(BOOST_LIBS) $(QT_LIBS) $(QT_DBUS_LIBS) $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(LIBSECP256K1) \\\n+  $(BOOST_LIBS) $(QT_LIBS) $(QT_DBUS_LIBS) $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(LIBSECP256K1) \\\n   $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)\n qt_bitcoin_qt_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(QT_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n qt_bitcoin_qt_LIBTOOLFLAGS = $(AM_LIBTOOLFLAGS) --tag CXX"
      }
    ]
  }
]