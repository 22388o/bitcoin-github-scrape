practicalswift,2018-03-12T19:11:26Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/12678#issuecomment-372429252,372429252,
fanquake,2018-03-13T02:25:29Z,@vasild Have you submitted any of these boost m4 changes upstream?,https://github.com/bitcoin/bitcoin/pull/12678#issuecomment-372525259,372525259,
theuni,2018-03-13T04:39:50Z,"I'd really rather not go down this path. We can't expect to find only warning-free headers, especially with system libs that we can't control.\n\nHave you tried using ```--enable-werror``` rather than adding directly to *FLAGS? That option is there to solve exactly this issue, as well as to whitelist no-false-positive warnings. We could probably stand to be more aggressive with those.",https://github.com/bitcoin/bitcoin/pull/12678#issuecomment-372544817,372544817,
practicalswift,2018-03-13T06:59:21Z,@theuni But the `net_processing.h` change is OK?,https://github.com/bitcoin/bitcoin/pull/12678#issuecomment-372565796,372565796,
vasild,2018-03-13T08:20:01Z,"@fanquake \n> Have you submitted any of these boost m4 changes upstream?\n\nNo. I noticed these files are imported from another project (boost), but saw that there are already some local mods, so decided that it may be ok to change them.\n\nAnyway, I should submit these to boost.",https://github.com/bitcoin/bitcoin/pull/12678#issuecomment-372582722,372582722,
vasild,2018-03-13T09:05:42Z,"@theuni \n> We can't expect to find only warning-free headers, especially with system libs that we can't control.\n\nYes, that is true. But notice that in this case the warnings do not come from system headers or from headers that are outside of our control. They come from files within the bitcoin codebase: `configure.ac`, `build-aux/m4/ax_boost_chrono.m4` and `build-aux/m4/ax_boost_unit_test_f",https://github.com/bitcoin/bitcoin/pull/12678#issuecomment-372594372,372594372,
vasild,2018-03-13T11:17:57Z,"@fanquake \n> Have you submitted any of these boost m4 changes upstream?\n\nThere you go: https://github.com/peti/autoconf-archive/pull/148",https://github.com/bitcoin/bitcoin/pull/12678#issuecomment-372631341,372631341,
practicalswift,2018-03-13T16:15:36Z,What about submitting the uncontroversial `PeerLogicValidation` fix as a separate PR? I've seen that warning myself and it would be nice to get rid of it :-) The m4 changes seem to require more discussion.,https://github.com/bitcoin/bitcoin/pull/12678#issuecomment-372723949,372723949,
vasild,2018-03-13T20:07:16Z,"@practicalswift\n\n> What about submitting the uncontroversial PeerLogicValidation fix as a separate PR? I've seen that warning myself and it would be nice to get rid of it :-)\n\nthere you go: https://github.com/bitcoin/bitcoin/pull/12680\n\n> The m4 changes seem to require more discussion.\n\nYes. The m4 boost changes have been taken upstream, so I have changed this pull request to apply",https://github.com/bitcoin/bitcoin/pull/12678#issuecomment-372800893,372800893,
eklitzke,2018-03-19T07:26:50Z,utACK 8ae413235d4b3f68f0858a3ce2cd65291f9cbe64,https://github.com/bitcoin/bitcoin/pull/12678#issuecomment-374122383,374122383,
laanwj,2018-03-13T10:04:34Z,"ACK, also seen this warning.",https://github.com/bitcoin/bitcoin/pull/12678#discussion_r174072853,174072853,src/net_processing.h
eklitzke,2018-03-15T06:38:45Z,"I don't see how this is related to Clang 7, this is checking for the visibility of a symbol. This might be needed on your version of upnp but if so that should be another PR in my opinion.",https://github.com/bitcoin/bitcoin/pull/12678#discussion_r174688295,174688295,configure.ac
eklitzke,2018-03-15T06:40:57Z,"This seems broken to me in the first place, isn't `MSG_NOSIGNAL` a preprocessor define? If so there's no need to check for it in configure.ac, we can just use `#if defined()` in `net.cpp` and `netbase.cpp`.",https://github.com/bitcoin/bitcoin/pull/12678#discussion_r174688576,174688576,configure.ac
vasild,2018-03-15T08:40:54Z,"The commit message of that change reads:\n\n```\n    Do not check for main() in libminiupnpc\n    \n    main() { main(); } causes ""infinite recursion"" compilation warning\n    which with -Werror fails the check.\n```\n\nMaybe that is not clear enough, let me elaborate: `AC_CHECK_LIB([lib], [func], ...)` generates a test program like `main() { func(); ... }`  and tries to link it with `-ll",https://github.com/bitcoin/bitcoin/pull/12678#discussion_r174708596,174708596,configure.ac
vasild,2018-03-15T08:54:58Z,"`MSG_NOSIGNAL` is a macro in my environment and maybe in lots of other environments too. So this check can be wiped away from `configure.ac` and `#ifdef MSG_NOSIGNAL` be used instead of `#ifdef HAVE_MSG_NOSIGNAL` in the source code. On my environment that will work.\n\nI guess the reason for this check in `configure.ac` is that we are not guaranteed that it will be a macro. Maybe somewhere it co",https://github.com/bitcoin/bitcoin/pull/12678#discussion_r174711965,174711965,configure.ac
eklitzke,2018-03-15T13:15:05Z,"I believe all of these options are required to be macros by the standard (precisely for reasons like this). Also note that `const int FOO = 1` and `#define FOO 1` are not the same, using a const value is strictly worse as it requires declaring an extern value that gets storage space allocated in the program. So there's no reason an implementation would ever do things that way.\n\nThe problem wit",https://github.com/bitcoin/bitcoin/pull/12678#discussion_r174776534,174776534,configure.ac
eklitzke,2018-03-15T13:16:01Z,"That makes sense, thanks for clarifying.",https://github.com/bitcoin/bitcoin/pull/12678#discussion_r174776775,174776775,configure.ac
vasild,2018-03-15T19:08:02Z,You are right - `const int` requires storage somewhere. I have removed the checks from `configure.ac` and updated the pull request.,https://github.com/bitcoin/bitcoin/pull/12678#discussion_r174898826,174898826,configure.ac
