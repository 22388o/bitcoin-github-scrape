gavinandresen,2015-05-06T20:23:57Z,"Untested ACK-- I trust Travis exercised these new tests.\nShould be merged quickly in my opinion, testing edge cases is a very good thing.\n",https://github.com/bitcoin/bitcoin/pull/6112#issuecomment-99595578,99595578,
sipa,2015-05-06T20:41:56Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/6112#issuecomment-99603025,99603025,
petertodd,2015-05-06T22:16:13Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/6112#issuecomment-99627097,99627097,
petertodd,2015-05-06T22:02:25Z,"Nice!\n\nDamn that's subtle, and also a malleability source come to think of it.\n",https://github.com/bitcoin/bitcoin/pull/6112#discussion_r29807106,29807106,src/test/data/tx_invalid.json
petertodd,2015-05-06T22:12:19Z,"To be exact, any bits not covered by the 0x1f == SIGHASH_SINGLE mask can be changed at will w/o invalidating the signature. Not a major issue as the signer has to allow it to happen, but it's an interesting edge case that could come up in certain protocols if you can fool someone into somehow signing the hash 0x1 - conceivable in a multisig payment channel for instance.\n",https://github.com/bitcoin/bitcoin/pull/6112#discussion_r29807938,29807938,src/test/data/tx_invalid.json
petertodd,2015-05-06T22:36:59Z,"Oh, actually I see what you're doing - this isn't related to the SIGHASH_SINGLE bug like I thought. You do successfully test what you think you're testing, but not in a realistic way. More realistic would be to create a test with a CHECKSIG in the scriptSig triggering this condition - that could be an actual tx with otherwise valid hashes.\n\nWhat I thought you'd noticed was that the SIGHASH_SINGL",https://github.com/bitcoin/bitcoin/pull/6112#discussion_r29809800,29809800,src/test/data/tx_invalid.json
