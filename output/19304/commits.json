[
  {
    "sha": "80d4423f997e15780bfa3f91bf4b4bf656b8ea45",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MGQ0NDIzZjk5N2UxNTc4MGJmYTNmOTFiZjRiNGJmNjU2YjhlYTQ1",
    "commit": {
      "author": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2020-06-17T14:41:48Z"
      },
      "committer": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2020-06-17T19:23:06Z"
      },
      "message": "Test buffered valid message\n\nA message can be broken across two buffers, with the split inside its\nheader.  Usually this will occur when sending many messages, such that\nthe first buffer fills.\n\nThis test uses the RPC to verify that the message is actually being\nreceived in two pieces.\n\nThere is a very rare chance of a race condition where the test framework\nsends a message in between the two halves of the message under test.  In\nthis case the peer will almost certainly disconnect and the test will\nfail.  An assert has been added to help debugging that rare case.",
      "tree": {
        "sha": "9f564977992158a7be98873a76a031e71cda0544",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9f564977992158a7be98873a76a031e71cda0544"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/80d4423f997e15780bfa3f91bf4b4bf656b8ea45",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80d4423f997e15780bfa3f91bf4b4bf656b8ea45",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/80d4423f997e15780bfa3f91bf4b4bf656b8ea45",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80d4423f997e15780bfa3f91bf4b4bf656b8ea45/comments",
    "author": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "39bd9ddb8783807b9cde6288233e86ad7c85d61f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39bd9ddb8783807b9cde6288233e86ad7c85d61f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/39bd9ddb8783807b9cde6288233e86ad7c85d61f"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 29,
      "deletions": 3
    },
    "files": [
      {
        "sha": "d99bc621de7719b047d6248f2c2c0e8b7abf5edb",
        "filename": "test/functional/p2p_invalid_messages.py",
        "status": "modified",
        "additions": 29,
        "deletions": 3,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80d4423f997e15780bfa3f91bf4b4bf656b8ea45/test/functional/p2p_invalid_messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80d4423f997e15780bfa3f91bf4b4bf656b8ea45/test/functional/p2p_invalid_messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_messages.py?ref=80d4423f997e15780bfa3f91bf4b4bf656b8ea45",
        "patch": "@@ -3,12 +3,14 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test node responses to invalid network messages.\"\"\"\n+\n from test_framework.messages import (\n     CBlockHeader,\n     CInv,\n     msg_getdata,\n     msg_headers,\n     msg_inv,\n+    msg_ping,\n     MSG_TX,\n     ser_string,\n )\n@@ -17,6 +19,10 @@\n     P2PInterface,\n )\n from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    wait_until,\n+)\n \n MSG_LIMIT = 4 * 1000 * 1000  # 4MB, per MAX_PROTOCOL_MESSAGE_LENGTH\n VALID_DATA_LIMIT = MSG_LIMIT - 5  # Account for the 5-byte length prefix\n@@ -42,13 +48,33 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n \n     def run_test(self):\n+        self.test_buffer()\n         self.test_magic_bytes()\n         self.test_checksum()\n         self.test_size()\n         self.test_msgtype()\n         self.test_large_inv()\n         self.test_resource_exhaustion()\n \n+    def test_buffer(self):\n+        self.log.info(\"Test message with header split across two buffers, should be received\")\n+        conn = self.nodes[0].add_p2p_connection(P2PDataStore())\n+        # Create valid message\n+        msg = conn.build_message(msg_ping(nonce=12345))\n+        cut_pos = 12    # Chosen at an arbitrary position within the header\n+        # Send message in two pieces\n+        before = int(self.nodes[0].getnettotals()['totalbytesrecv'])\n+        conn.send_raw_message(msg[:cut_pos])\n+        # Wait until node has processed the first half of the message\n+        wait_until(lambda: int(self.nodes[0].getnettotals()['totalbytesrecv']) != before)\n+        middle = int(self.nodes[0].getnettotals()['totalbytesrecv'])\n+        # If this assert fails, we've hit an unlikely race\n+        # where the test framework sent a message in between the two halves\n+        assert_equal(middle, before + cut_pos)\n+        conn.send_raw_message(msg[cut_pos:])\n+        conn.sync_with_ping(timeout=1)\n+        self.nodes[0].disconnect_p2ps()\n+\n     def test_magic_bytes(self):\n         conn = self.nodes[0].add_p2p_connection(P2PDataStore())\n         with self.nodes[0].assert_debug_log(['PROCESSMESSAGE: INVALID MESSAGESTART badmsg']):\n@@ -95,13 +121,13 @@ def test_msgtype(self):\n \n     def test_large_inv(self):\n         conn = self.nodes[0].add_p2p_connection(P2PInterface())\n-        with self.nodes[0].assert_debug_log(['Misbehaving', 'peer=4 (0 -> 20): message inv size() = 50001']):\n+        with self.nodes[0].assert_debug_log(['Misbehaving', '(0 -> 20): message inv size() = 50001']):\n             msg = msg_inv([CInv(MSG_TX, 1)] * 50001)\n             conn.send_and_ping(msg)\n-        with self.nodes[0].assert_debug_log(['Misbehaving', 'peer=4 (20 -> 40): message getdata size() = 50001']):\n+        with self.nodes[0].assert_debug_log(['Misbehaving', '(20 -> 40): message getdata size() = 50001']):\n             msg = msg_getdata([CInv(MSG_TX, 1)] * 50001)\n             conn.send_and_ping(msg)\n-        with self.nodes[0].assert_debug_log(['Misbehaving', 'peer=4 (40 -> 60): headers message size = 2001']):\n+        with self.nodes[0].assert_debug_log(['Misbehaving', '(40 -> 60): headers message size = 2001']):\n             msg = msg_headers([CBlockHeader()] * 2001)\n             conn.send_and_ping(msg)\n         self.nodes[0].disconnect_p2ps()"
      }
    ]
  }
]