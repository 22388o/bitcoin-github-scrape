MarcoFalke,2020-06-17 15:41:37,"ACK. Thanks for adding the test, will test after assert_equal nit is addressed",https://github.com/bitcoin/bitcoin/pull/19304#issuecomment-645453492,645453492,
troygiorshev,2020-06-17 16:13:07,"Compare c5904c82e05cb4f5856cc55877f9fa268a9cd031 to 3cd538a1a6c64c8ab4b6f02be72f45d2c865b9f1.  Changed to assert_equal and made log more descriptive.  Disconnects peer at the end of the test, I'll keep that discussion in #19272 and I'll follow the status quo here.\n\nHad to add a short sleep, as I was finding my RPC call occationally went before the first half of the message was received by the ",https://github.com/bitcoin/bitcoin/pull/19304#issuecomment-645470937,645470937,
troygiorshev,2020-06-17 19:21:30,Implemented `wait_until` as discussed.,https://github.com/bitcoin/bitcoin/pull/19304#issuecomment-645572880,645572880,
troygiorshev,2020-06-17 19:23:42,And removed unused import.,https://github.com/bitcoin/bitcoin/pull/19304#issuecomment-645573945,645573945,
MarcoFalke,2020-06-17 19:29:35,"tested ACK 80d4423f997e15780bfa3f91bf4b4bf656b8ea45 (added an assert(false) to observe deterministic coverage) 🌦\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\ntested ACK 80d4423f997e15780bfa3f91bf4b4bf656b8ea45 (added an assert(false) to observe deterministic coverage) 🌦\n-----BEGIN PGP SIGNATURE----",https://github.com/bitcoin/bitcoin/pull/19304#issuecomment-645576792,645576792,
DrahtBot,2020-06-17 20:17:17,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19272 (test: p2p_invalid_messages and test framework improvements by jonatack)\n\nIf you consider this pull request impor",https://github.com/bitcoin/bitcoin/pull/19304#issuecomment-645601508,645601508,
practicalswift,2020-06-17 21:45:06,Concept ACK: good to have this code path tested deterministically!,https://github.com/bitcoin/bitcoin/pull/19304#issuecomment-645641849,645641849,
MarcoFalke,2020-06-18 11:37:22,"Going to merge this. I think it is more important to have this test than it is to find the exact right location for this test. I picked an invalid message in #19302 to accomodate the file name, but if it really turns out to be problematic, one could add a comment like `# This test can equivalently be done with an invalid or valid message, for simplicity it is done here with a valid message`",https://github.com/bitcoin/bitcoin/pull/19304#issuecomment-645960502,645960502,
jonatack,2020-06-17 15:10:27,use `assert_equal`,https://github.com/bitcoin/bitcoin/pull/19304#discussion_r441621704,441621704,test/functional/p2p_invalid_messages.py
jonatack,2020-06-17 15:12:29,suggestion: perhaps describe the expected result,https://github.com/bitcoin/bitcoin/pull/19304#discussion_r441623383,441623383,test/functional/p2p_invalid_messages.py
jonatack,2020-06-17 15:13:12,"Why not test the debug log output as well, e.g. `Incomplete headerReceived`. I think this works; maybe it can be improved on:\n\n```diff\n-        msg = conn.build_message(msg_ping(nonce=12345))\n-        cut_pos = 12    # Chosen at an arbitrary position within the header\n-        # Send message in two pieces\n-        before = self.nodes[0].getnettotals()['totalbytesrecv']\n-        conn.",https://github.com/bitcoin/bitcoin/pull/19304#discussion_r441624037,441624037,test/functional/p2p_invalid_messages.py
jnewbery,2020-06-17 15:34:41,"> Why not test the debug log output as well\n\nI'd prefer not to do this. My view is that functional tests should be as black box as possible, and test the functionality rather than the implementation. Using the debug log to test that an event has happened should be used only when there's no other way to test, since doing so binds the test to the exact implementation, and any changes to control ",https://github.com/bitcoin/bitcoin/pull/19304#discussion_r441639243,441639243,test/functional/p2p_invalid_messages.py
jonatack,2020-06-17 15:36:04,"If #19272 if merged first, these changes in `test_large_inv()` won't be needed.",https://github.com/bitcoin/bitcoin/pull/19304#discussion_r441640185,441640185,test/functional/p2p_invalid_messages.py
troygiorshev,2020-06-17 15:36:15,"We don't currently log that an incomplete header was received.  IMO we shouldn't, it's just an implementation detail of sockets, it doesn't really mean anything on any Bitcoin level.  At the very least maybe changing bitcoind logging is out of scope for this PR?",https://github.com/bitcoin/bitcoin/pull/19304#discussion_r441640309,441640309,test/functional/p2p_invalid_messages.py
troygiorshev,2020-06-17 15:36:21,See below,https://github.com/bitcoin/bitcoin/pull/19304#discussion_r441640372,441640372,test/functional/p2p_invalid_messages.py
jnewbery,2020-06-17 15:38:03,Please join this with the import from `test_framework.messages` above.,https://github.com/bitcoin/bitcoin/pull/19304#discussion_r441641495,441641495,test/functional/p2p_invalid_messages.py
troygiorshev,2020-06-17 15:38:10,"+1, I'm more than happy to rebase this one if #19272 goes in first",https://github.com/bitcoin/bitcoin/pull/19304#discussion_r441641575,441641575,test/functional/p2p_invalid_messages.py
jnewbery,2020-06-17 15:40:58,"I suggest you disconnect the connection at the end of this subtest, so that the node and test fixture are the same state at the end of each subtest as at the start.\n\nIdeally, it should be possible to permute subtests in any order and have the test pass. That prevents brittleness like the asserts on peer numbers that you've had to change in an unrelated subtest here.",https://github.com/bitcoin/bitcoin/pull/19304#discussion_r441643412,441643412,test/functional/p2p_invalid_messages.py
troygiorshev,2020-06-17 15:43:59,"In https://github.com/bitcoin/bitcoin/pull/19302#discussion_r441521857 you added `LogPrintf(""Incomplete header"");`\n\n",https://github.com/bitcoin/bitcoin/pull/19304#discussion_r441645507,441645507,test/functional/p2p_invalid_messages.py
jnewbery,2020-06-17 15:44:06,"@jonatack are you sure? I don't see anywhere in the product code that logs ""Incomplete headerReceived"" (and would be surprised to, since this is purely an implementation detail)",https://github.com/bitcoin/bitcoin/pull/19304#discussion_r441645591,441645591,test/functional/p2p_invalid_messages.py
troygiorshev,2020-06-17 15:44:40,"> \n> \n> The idea is to mention the expected result. The rest was an example, success, failure, disconnects peer, etc.\n\nAh I agree, I'll make this a bit more descriptive",https://github.com/bitcoin/bitcoin/pull/19304#discussion_r441645947,441645947,test/functional/p2p_invalid_messages.py
jonatack,2020-06-17 16:01:37,"Oh right, if it's just sockets then agreed.",https://github.com/bitcoin/bitcoin/pull/19304#discussion_r441657274,441657274,test/functional/p2p_invalid_messages.py
jonatack,2020-06-17 16:09:17,"> @jonatack are you sure? I don't see anywhere in the product code that logs ""Incomplete headerReceived"" (and would be surprised to, since this is purely an implementation detail)\n\nWeird. I think it was a non-consistent result. Sorry about that.",https://github.com/bitcoin/bitcoin/pull/19304#discussion_r441661988,441661988,test/functional/p2p_invalid_messages.py
jonatack,2020-06-17 16:23:21,"> In [#19302 (comment)](https://github.com/bitcoin/bitcoin/pull/19302#discussion_r441521857) you added `LogPrintf(""Incomplete header"");`\n\nHm, it's possible I didn't rebuild properly. It's late here :) will finish review of your net headers refactoring tomorrow fresh and early",https://github.com/bitcoin/bitcoin/pull/19304#discussion_r441670483,441670483,test/functional/p2p_invalid_messages.py
MarcoFalke,2020-06-17 16:55:55,I don't think a sleep will consistently avoid races. Any reason why a `sync_with_ping` (on a different connection) or a `wait_until` is not working?,https://github.com/bitcoin/bitcoin/pull/19304#discussion_r441690648,441690648,test/functional/p2p_invalid_messages.py
glozow,2020-06-17 17:47:08,"I think `getnettotals` returns information about all peers, so `sync_with_ping` would affect `totalbytesrecv` right? You could take that into account too, something like:\n\n```py\npinger = node.add_p2p_connection()\n...\nconn.send_raw_message(msg[:cut_pos])\npinger.sync_with_ping()\n...\nassert_equal(middle, before + cut_pos + PING_SIZE)\n```\nI don't think this guarantees that `conn`'s",https://github.com/bitcoin/bitcoin/pull/19304#discussion_r441720939,441720939,test/functional/p2p_invalid_messages.py
glozow,2020-06-17 17:51:44,"Do you want to make an assertion about `totalbytesrecv` here too? Or is it unnecessary?\nAlso, I know this just tests that the 2 halves are received so this might be out of scope, but do you expect a `pong` in return? Could be tested using `conn.message_count`?",https://github.com/bitcoin/bitcoin/pull/19304#discussion_r441723603,441723603,test/functional/p2p_invalid_messages.py
glozow,2020-06-17 18:01:18,"Actually, I think `wait_until` might be better:\n```suggestion\n       wait_until(lambda: self.nodes[0].getnettotals()['totalbytesrecv'] == before + cut_pos)\n```\nWishful thinking, it'd be nice if `cut_pos` is a size that couldn't possibly be = another message (does this exist?). It will still fail if the node receives another message in between the halves, but can't pass if it isn't received",https://github.com/bitcoin/bitcoin/pull/19304#discussion_r441729612,441729612,test/functional/p2p_invalid_messages.py
troygiorshev,2020-06-17 18:31:36,"Ok, I like `wait_until` better.  More expressive at the very least.  How do you like this?\n```suggestion\n        # Prevent the RPC call from going too early\n        conn.wait_util(int(self.nodes[0].getnettotals()['totalbytesrecv']) != before)\n```",https://github.com/bitcoin/bitcoin/pull/19304#discussion_r441746483,441746483,test/functional/p2p_invalid_messages.py
MarcoFalke,2020-06-17 18:33:36,"Should be fine. In case it fails the `assert_equal(middle, before + cut_pos)` should trigger",https://github.com/bitcoin/bitcoin/pull/19304#discussion_r441747548,441747548,test/functional/p2p_invalid_messages.py
troygiorshev,2020-06-17 18:47:45,"Ah we came up with almost the same thing!  I thought of this https://github.com/bitcoin/bitcoin/pull/19304#discussion_r441746483.  Regarding `cut_pos`, we actually have what you're looking for.  `cut_pos = 12` and the size of the smallest message (any of the messages with no payload) is 24 😄 \n\nI'll think about `getpeerinfo` vs `getnettotals`",https://github.com/bitcoin/bitcoin/pull/19304#discussion_r441755606,441755606,test/functional/p2p_invalid_messages.py
troygiorshev,2020-06-17 18:50:43,"We do expect a `pong` in return, but it doesn't really matter in this test.  I've just chosen `ping` because it's really simple, any valid message would have worked.",https://github.com/bitcoin/bitcoin/pull/19304#discussion_r441758738,441758738,test/functional/p2p_invalid_messages.py
troygiorshev,2020-06-17 18:53:35,">I don't think this guarantees that conn's message has been processed just because pinger's ping has been though...?\n\nI'm pretty sure you're right.  However, we're looking at a race in a test for a race inside a test at this point, so I'm going to prefer the simpler fix.",https://github.com/bitcoin/bitcoin/pull/19304#discussion_r441761870,441761870,test/functional/p2p_invalid_messages.py
glozow,2020-06-17 18:55:58,"TWINSIES 👯 \n(If I may, I think `== before + cut_pos` is stronger than  `>= before` or `!= before`)\n> we actually have what you're looking for\n\nOoh!! Genius, should be in the comment.",https://github.com/bitcoin/bitcoin/pull/19304#discussion_r441764282,441764282,test/functional/p2p_invalid_messages.py
troygiorshev,2020-06-17 19:06:50,"`== before + cut_pos` is stronger, but I see three possible situations that I would rather be caught by different asserts.  This is possible with `!=` and the later `assert_equal`\n\n1. Something terrible happens and the first half of the message is never processed.  `wait_until` times out and throws an exception.\n2. The node takes a while but eventually processes the first half of the message",https://github.com/bitcoin/bitcoin/pull/19304#discussion_r441771871,441771871,test/functional/p2p_invalid_messages.py
MarcoFalke,2020-06-17 19:21:06,"```suggestion\n```",https://github.com/bitcoin/bitcoin/pull/19304#discussion_r441779231,441779231,test/functional/p2p_invalid_messages.py
glozow,2020-06-17 19:22:22,MarcoFalke = faster than linter,https://github.com/bitcoin/bitcoin/pull/19304#discussion_r441779924,441779924,test/functional/p2p_invalid_messages.py
troygiorshev,2020-06-17 19:22:54,"_glares at pylint_\n\nthx",https://github.com/bitcoin/bitcoin/pull/19304#discussion_r441780225,441780225,test/functional/p2p_invalid_messages.py
glozow,2020-06-17 19:26:36,"nit: extra newline here?\n```suggestion\n```",https://github.com/bitcoin/bitcoin/pull/19304#discussion_r441782105,441782105,test/functional/p2p_invalid_messages.py
glozow,2020-06-17 19:30:29,"nit: I think the fact that `cut_pos` < smallest message size is pretty smart and non-arbitrary :)\n```suggestion\n        cut_pos = 12    # Smaller than any other P2P message and thus easily distinguishable\n```",https://github.com/bitcoin/bitcoin/pull/19304#discussion_r441784071,441784071,test/functional/p2p_invalid_messages.py
glozow,2020-06-17 19:50:05,"> This sends a valid message.\n\nEr... I'm very sorry if I'm being a pain in the ass, but why is this in p2p_invalid_messages?",https://github.com/bitcoin/bitcoin/pull/19304#discussion_r441794356,441794356,test/functional/p2p_invalid_messages.py
jnewbery,2020-06-17 20:45:31,"> I'm very sorry if I'm being a pain in the ass, but why is this in p2p_invalid_messages?\n\nYou're not. Because we couldn't think of anywhere better to put it 🤷‍♂️ ",https://github.com/bitcoin/bitcoin/pull/19304#discussion_r441823785,441823785,test/functional/p2p_invalid_messages.py
troygiorshev,2020-06-17 21:30:22,"Using [PEP 257](https://www.python.org/dev/peps/pep-0257/#id17) as a basis, this could be argued either way.  I like this better, and it's consistent with the 7 or so other test files that I just checked.",https://github.com/bitcoin/bitcoin/pull/19304#discussion_r441845573,441845573,test/functional/p2p_invalid_messages.py
jonatack,2020-06-18 05:32:42,"This would allow not changing `test_large_inv()`:\n```diff\n     def run_test(self):\n-        self.test_buffer()\n         self.test_magic_bytes()\n         self.test_checksum()\n         self.test_size()\n         self.test_msgtype()\n         self.test_large_inv()\n+        self.test_buffer()\n         self.test_resource_exhaustion()\n```",https://github.com/bitcoin/bitcoin/pull/19304#discussion_r441977469,441977469,test/functional/p2p_invalid_messages.py
jonatack,2020-06-18 05:33:59,:+1: ,https://github.com/bitcoin/bitcoin/pull/19304#discussion_r441977803,441977803,test/functional/p2p_invalid_messages.py
