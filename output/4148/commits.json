[
  {
    "sha": "77339e5aec4da99f727b80829f9697357b4cec45",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NzMzOWU1YWVjNGRhOTlmNzI3YjgwODI5Zjk2OTczNTdiNGNlYzQ1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-05-05T22:54:10Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-06-09T00:21:15Z"
      },
      "message": "Get rid of the static chainMostWork (optimization)",
      "tree": {
        "sha": "13009d65f4d6f14aee63667ae23aaaf3e267b9f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/13009d65f4d6f14aee63667ae23aaaf3e267b9f5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/77339e5aec4da99f727b80829f9697357b4cec45",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77339e5aec4da99f727b80829f9697357b4cec45",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/77339e5aec4da99f727b80829f9697357b4cec45",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77339e5aec4da99f727b80829f9697357b4cec45/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6ff35a0565a6903464d1dfaaf02360d5c5e70c0f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ff35a0565a6903464d1dfaaf02360d5c5e70c0f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6ff35a0565a6903464d1dfaaf02360d5c5e70c0f"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 30,
      "deletions": 32
    },
    "files": [
      {
        "sha": "806f1c20db2c9f5aad50f5d5af59af4f25065e14",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 29,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77339e5aec4da99f727b80829f9697357b4cec45/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77339e5aec4da99f727b80829f9697357b4cec45/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=77339e5aec4da99f727b80829f9697357b4cec45",
        "patch": "@@ -40,7 +40,6 @@ CTxMemPool mempool;\n \n map<uint256, CBlockIndex*> mapBlockIndex;\n CChain chainActive;\n-CChain chainMostWork;\n int64_t nTimeBestReceived = 0;\n int nScriptCheckThreads = 0;\n bool fImporting = false;\n@@ -398,6 +397,12 @@ CBlockIndex *CChain::FindFork(const CBlockLocator &locator) const {\n     return Genesis();\n }\n \n+CBlockIndex *CChain::FindFork(CBlockIndex *pindex) const {\n+    while (pindex && !Contains(pindex))\n+        pindex = pindex->pprev;\n+    return pindex;\n+}\n+\n CCoinsViewCache *pcoinsTip = NULL;\n CBlockTreeDB *pblocktree = NULL;\n \n@@ -2035,23 +2040,17 @@ bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew) {\n     return true;\n }\n \n-// Make chainMostWork correspond to the chain with the most work in it, that isn't\n+// Return the tip of the chain with the most work in it, that isn't\n // known to be invalid (it's however far from certain to be valid).\n-void static FindMostWorkChain() {\n-    CBlockIndex *pindexNew = NULL;\n-\n-    // In case the current best is invalid, do not consider it.\n-    while (chainMostWork.Tip() && (chainMostWork.Tip()->nStatus & BLOCK_FAILED_MASK)) {\n-        setBlockIndexValid.erase(chainMostWork.Tip());\n-        chainMostWork.SetTip(chainMostWork.Tip()->pprev);\n-    }\n-\n+static CBlockIndex* FindMostWorkChain() {\n     do {\n+        CBlockIndex *pindexNew = NULL;\n+\n         // Find the best candidate header.\n         {\n             std::set<CBlockIndex*, CBlockIndexWorkComparator>::reverse_iterator it = setBlockIndexValid.rbegin();\n             if (it == setBlockIndexValid.rend())\n-                return;\n+                return NULL;\n             pindexNew = *it;\n         }\n \n@@ -2075,18 +2074,9 @@ void static FindMostWorkChain() {\n             }\n             pindexTest = pindexTest->pprev;\n         }\n-        if (fInvalidAncestor)\n-            continue;\n-\n-        break;\n+        if (!fInvalidAncestor)\n+            return pindexNew;\n     } while(true);\n-\n-    // Check whether it's actually an improvement.\n-    if (chainMostWork.Tip() && !CBlockIndexWorkComparator()(chainMostWork.Tip(), pindexNew))\n-        return;\n-\n-    // We have a new best.\n-    chainMostWork.SetTip(pindexNew);\n }\n \n // Try to activate to the most-work chain (thereby connecting it).\n@@ -2095,26 +2085,34 @@ bool ActivateBestChain(CValidationState &state) {\n     CBlockIndex *pindexOldTip = chainActive.Tip();\n     bool fComplete = false;\n     while (!fComplete) {\n-        FindMostWorkChain();\n+        CBlockIndex *pindexMostWork = FindMostWorkChain();\n+        CBlockIndex *pindexFork = chainActive.FindFork(pindexMostWork);\n         fComplete = true;\n \n         // Check whether we have something to do.\n-        if (chainMostWork.Tip() == NULL) break;\n+        if (pindexMostWork == NULL) break;\n \n         // Disconnect active blocks which are no longer in the best chain.\n-        while (chainActive.Tip() && !chainMostWork.Contains(chainActive.Tip())) {\n+        while (chainActive.Tip() && chainActive.Tip() != pindexFork) {\n             if (!DisconnectTip(state))\n                 return false;\n         }\n \n+        // Build list of new blocks to connect.\n+        std::vector<CBlockIndex*> vpindexToConnect;\n+        vpindexToConnect.reserve(pindexMostWork->nHeight - (pindexFork ? pindexFork->nHeight : -1));\n+        while (pindexMostWork && pindexMostWork != pindexFork) {\n+            vpindexToConnect.push_back(pindexMostWork);\n+            pindexMostWork = pindexMostWork->pprev;\n+        }\n+\n         // Connect new blocks.\n-        while (!chainActive.Contains(chainMostWork.Tip())) {\n-            CBlockIndex *pindexConnect = chainMostWork[chainActive.Height() + 1];\n+        BOOST_REVERSE_FOREACH(CBlockIndex *pindexConnect, vpindexToConnect) {\n             if (!ConnectTip(state, pindexConnect)) {\n                 if (state.IsInvalid()) {\n                     // The block violates a consensus rule.\n                     if (!state.CorruptionPossible())\n-                        InvalidChainFound(chainMostWork.Tip());\n+                        InvalidChainFound(vpindexToConnect.back());\n                     fComplete = false;\n                     state = CValidationState();\n                     break;"
      },
      {
        "sha": "98155989a36ee89628c2ed020ac1de1be3eb2a2a",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77339e5aec4da99f727b80829f9697357b4cec45/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77339e5aec4da99f727b80829f9697357b4cec45/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=77339e5aec4da99f727b80829f9697357b4cec45",
        "patch": "@@ -1079,14 +1079,14 @@ class CChain {\n \n     /** Find the last common block between this chain and a locator. */\n     CBlockIndex *FindFork(const CBlockLocator &locator) const;\n+\n+    /** Find the last common block between this chain and a block index entry. */\n+    CBlockIndex *FindFork(CBlockIndex *pindex) const;\n };\n \n /** The currently-connected chain of blocks. */\n extern CChain chainActive;\n \n-/** The currently best known chain of headers (some of which may be invalid). */\n-extern CChain chainMostWork;\n-\n /** Global variable that points to the active CCoinsView (protected by cs_main) */\n extern CCoinsViewCache *pcoinsTip;\n "
      }
    ]
  },
  {
    "sha": "4e0eed88acdd41826868c151373068bfad18b84d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZTBlZWQ4OGFjZGQ0MTgyNjg2OGMxNTEzNzMwNjhiZmFkMThiODRk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-05-05T23:23:13Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-06-09T00:21:15Z"
      },
      "message": "Allow ActivateBestChain to release its lock on cs_main",
      "tree": {
        "sha": "f43eafcd165d6c4e3c8b0450c4b79275b18bf271",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f43eafcd165d6c4e3c8b0450c4b79275b18bf271"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4e0eed88acdd41826868c151373068bfad18b84d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e0eed88acdd41826868c151373068bfad18b84d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4e0eed88acdd41826868c151373068bfad18b84d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e0eed88acdd41826868c151373068bfad18b84d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "77339e5aec4da99f727b80829f9697357b4cec45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77339e5aec4da99f727b80829f9697357b4cec45",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/77339e5aec4da99f727b80829f9697357b4cec45"
      }
    ],
    "stats": {
      "total": 92,
      "additions": 55,
      "deletions": 37
    },
    "files": [
      {
        "sha": "860487dece859fe96307c6d80d0b2770890fa974",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 55,
        "deletions": 37,
        "changes": 92,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e0eed88acdd41826868c151373068bfad18b84d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e0eed88acdd41826868c151373068bfad18b84d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=4e0eed88acdd41826868c151373068bfad18b84d",
        "patch": "@@ -2079,47 +2079,43 @@ static CBlockIndex* FindMostWorkChain() {\n     } while(true);\n }\n \n-// Try to activate to the most-work chain (thereby connecting it).\n-bool ActivateBestChain(CValidationState &state) {\n-    LOCK(cs_main);\n+// Try to make some progress towards making pindexMostWork the active block.\n+static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMostWork) {\n+    AssertLockHeld(cs_main);\n     CBlockIndex *pindexOldTip = chainActive.Tip();\n-    bool fComplete = false;\n-    while (!fComplete) {\n-        CBlockIndex *pindexMostWork = FindMostWorkChain();\n-        CBlockIndex *pindexFork = chainActive.FindFork(pindexMostWork);\n-        fComplete = true;\n-\n-        // Check whether we have something to do.\n-        if (pindexMostWork == NULL) break;\n+    CBlockIndex *pindexFork = chainActive.FindFork(pindexMostWork);\n \n-        // Disconnect active blocks which are no longer in the best chain.\n-        while (chainActive.Tip() && chainActive.Tip() != pindexFork) {\n-            if (!DisconnectTip(state))\n-                return false;\n-        }\n+    // Disconnect active blocks which are no longer in the best chain.\n+    while (chainActive.Tip() && chainActive.Tip() != pindexFork) {\n+        if (!DisconnectTip(state))\n+            return false;\n+    }\n \n-        // Build list of new blocks to connect.\n-        std::vector<CBlockIndex*> vpindexToConnect;\n-        vpindexToConnect.reserve(pindexMostWork->nHeight - (pindexFork ? pindexFork->nHeight : -1));\n-        while (pindexMostWork && pindexMostWork != pindexFork) {\n-            vpindexToConnect.push_back(pindexMostWork);\n-            pindexMostWork = pindexMostWork->pprev;\n-        }\n+    // Build list of new blocks to connect.\n+    std::vector<CBlockIndex*> vpindexToConnect;\n+    vpindexToConnect.reserve(pindexMostWork->nHeight - (pindexFork ? pindexFork->nHeight : -1));\n+    while (pindexMostWork && pindexMostWork != pindexFork) {\n+        vpindexToConnect.push_back(pindexMostWork);\n+        pindexMostWork = pindexMostWork->pprev;\n+    }\n \n-        // Connect new blocks.\n-        BOOST_REVERSE_FOREACH(CBlockIndex *pindexConnect, vpindexToConnect) {\n-            if (!ConnectTip(state, pindexConnect)) {\n-                if (state.IsInvalid()) {\n-                    // The block violates a consensus rule.\n-                    if (!state.CorruptionPossible())\n-                        InvalidChainFound(vpindexToConnect.back());\n-                    fComplete = false;\n-                    state = CValidationState();\n-                    break;\n-                } else {\n-                    // A system error occurred (disk space, database error, ...).\n-                    return false;\n-                }\n+    // Connect new blocks.\n+    BOOST_REVERSE_FOREACH(CBlockIndex *pindexConnect, vpindexToConnect) {\n+        if (!ConnectTip(state, pindexConnect)) {\n+            if (state.IsInvalid()) {\n+                // The block violates a consensus rule.\n+                if (!state.CorruptionPossible())\n+                    InvalidChainFound(vpindexToConnect.back());\n+                state = CValidationState();\n+                break;\n+            } else {\n+                // A system error occurred (disk space, database error, ...).\n+                return false;\n+            }\n+        } else {\n+            if (!pindexOldTip || chainActive.Tip()->nChainWork > pindexOldTip->nChainWork) {\n+                // We're in a better position than we were. Return temporarily to release the lock.\n+                break;\n             }\n         }\n     }\n@@ -2136,6 +2132,28 @@ bool ActivateBestChain(CValidationState &state) {\n     return true;\n }\n \n+bool ActivateBestChain(CValidationState &state) {\n+    do {\n+        boost::this_thread::interruption_point();\n+\n+        LOCK(cs_main);\n+\n+        // Check whether we're done (this could be avoided after the first run,\n+        // but that's not worth optimizing.\n+        CBlockIndex *pindexMostWork = FindMostWorkChain();\n+        if (pindexMostWork == NULL || pindexMostWork == chainActive.Tip())\n+            return true;\n+\n+        if (!ActivateBestChainStep(state, pindexMostWork))\n+            return false;\n+\n+        // Check whether we're done now.\n+        if (pindexMostWork == chainActive.Tip())\n+            return true;\n+    } while(true);\n+\n+    return true;\n+}\n \n CBlockIndex* AddToBlockIndex(CBlockHeader& block)\n {"
      }
    ]
  },
  {
    "sha": "202e01941c087e0b06a7c18ce344a53ce94e1350",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMDJlMDE5NDFjMDg3ZTBiMDZhN2MxOGNlMzQ0YTUzY2U5NGUxMzUw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-05-07T14:45:33Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-06-09T00:21:15Z"
      },
      "message": "Move all post-chaintip-change notifications to ActivateBestChain",
      "tree": {
        "sha": "fba42ab74214f9ea8566918fec4e161af09d95eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fba42ab74214f9ea8566918fec4e161af09d95eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/202e01941c087e0b06a7c18ce344a53ce94e1350",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/202e01941c087e0b06a7c18ce344a53ce94e1350",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/202e01941c087e0b06a7c18ce344a53ce94e1350",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/202e01941c087e0b06a7c18ce344a53ce94e1350/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4e0eed88acdd41826868c151373068bfad18b84d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e0eed88acdd41826868c151373068bfad18b84d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4e0eed88acdd41826868c151373068bfad18b84d"
      }
    ],
    "stats": {
      "total": 100,
      "additions": 50,
      "deletions": 50
    },
    "files": [
      {
        "sha": "0d79246a11da639b079e974d846b6a0fc3e4420b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 50,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/202e01941c087e0b06a7c18ce344a53ce94e1350/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/202e01941c087e0b06a7c18ce344a53ce94e1350/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=202e01941c087e0b06a7c18ce344a53ce94e1350",
        "patch": "@@ -1895,6 +1895,11 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n     for (unsigned int i = 0; i < block.vtx.size(); i++)\n         g_signals.SyncTransaction(block.GetTxHash(i), block.vtx[i], &block);\n \n+    // Watch for changes to the previous coinbase transaction.\n+    static uint256 hashPrevBestCoinBase;\n+    g_signals.UpdatedTransaction(hashPrevBestCoinBase);\n+    hashPrevBestCoinBase = block.GetTxHash(0);\n+\n     return true;\n }\n \n@@ -2082,6 +2087,7 @@ static CBlockIndex* FindMostWorkChain() {\n // Try to make some progress towards making pindexMostWork the active block.\n static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMostWork) {\n     AssertLockHeld(cs_main);\n+    bool fInvalidFound = false;\n     CBlockIndex *pindexOldTip = chainActive.Tip();\n     CBlockIndex *pindexFork = chainActive.FindFork(pindexMostWork);\n \n@@ -2107,6 +2113,7 @@ static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMo\n                 if (!state.CorruptionPossible())\n                     InvalidChainFound(vpindexToConnect.back());\n                 state = CValidationState();\n+                fInvalidFound = true;\n                 break;\n             } else {\n                 // A system error occurred (disk space, database error, ...).\n@@ -2120,37 +2127,59 @@ static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMo\n         }\n     }\n \n-    if (chainActive.Tip() != pindexOldTip) {\n-        std::string strCmd = GetArg(\"-blocknotify\", \"\");\n-        if (!IsInitialBlockDownload() && !strCmd.empty())\n-        {\n-            boost::replace_all(strCmd, \"%s\", chainActive.Tip()->GetBlockHash().GetHex());\n-            boost::thread t(runCommand, strCmd); // thread runs free\n-        }\n-    }\n+    // Callbacks/notifications for a new best chain.\n+    if (fInvalidFound)\n+        CheckForkWarningConditionsOnNewFork(vpindexToConnect.back());\n+    else\n+        CheckForkWarningConditions();\n+\n+    if (!pblocktree->Flush())\n+        return state.Abort(_(\"Failed to sync block index\"));\n \n     return true;\n }\n \n bool ActivateBestChain(CValidationState &state) {\n+    CBlockIndex *pindexNewTip = NULL;\n+    CBlockIndex *pindexMostWork = NULL;\n     do {\n         boost::this_thread::interruption_point();\n \n-        LOCK(cs_main);\n+        bool fInitialDownload;\n+        {\n+            LOCK(cs_main);\n+            pindexMostWork = FindMostWorkChain();\n \n-        // Check whether we're done (this could be avoided after the first run,\n-        // but that's not worth optimizing.\n-        CBlockIndex *pindexMostWork = FindMostWorkChain();\n-        if (pindexMostWork == NULL || pindexMostWork == chainActive.Tip())\n-            return true;\n+            // Whether we have anything to do at all.\n+            if (pindexMostWork == NULL || pindexMostWork == chainActive.Tip())\n+                return true;\n \n-        if (!ActivateBestChainStep(state, pindexMostWork))\n-            return false;\n+            if (!ActivateBestChainStep(state, pindexMostWork))\n+                return false;\n \n-        // Check whether we're done now.\n-        if (pindexMostWork == chainActive.Tip())\n-            return true;\n-    } while(true);\n+            pindexNewTip = chainActive.Tip();\n+            fInitialDownload = IsInitialBlockDownload();\n+        }\n+        // When we reach this point, we switched to a new tip (stored in pindexNewTip).\n+\n+        // Notifications/callbacks that can run without cs_main\n+        if (!fInitialDownload) {\n+            uint256 hashNewTip = pindexNewTip->GetBlockHash();\n+            // Relay inventory, but don't relay old inventory during initial block download.\n+            int nBlockEstimate = Checkpoints::GetTotalBlocksEstimate();\n+            LOCK(cs_vNodes);\n+            BOOST_FOREACH(CNode* pnode, vNodes)\n+                if (chainActive.Height() > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : nBlockEstimate))\n+                    pnode->PushInventory(CInv(MSG_BLOCK, hashNewTip));\n+\n+            std::string strCmd = GetArg(\"-blocknotify\", \"\");\n+            if (!strCmd.empty()) {\n+                boost::replace_all(strCmd, \"%s\", hashNewTip.GetHex());\n+                boost::thread t(runCommand, strCmd); // thread runs free\n+            }\n+        }\n+        uiInterface.NotifyBlocksChanged();\n+    } while(pindexMostWork != chainActive.Tip());\n \n     return true;\n }\n@@ -2215,26 +2244,7 @@ bool ReceivedBlockTransactions(const CBlock &block, CValidationState& state, CBl\n         return state.Abort(_(\"Failed to write block index\"));\n \n     // New best?\n-    if (!ActivateBestChain(state))\n-        return false;\n-\n-    LOCK(cs_main);\n-    if (pindexNew == chainActive.Tip())\n-    {\n-        // Clear fork warning if its no longer applicable\n-        CheckForkWarningConditions();\n-        // Notify UI to display prev block's coinbase if it was ours\n-        static uint256 hashPrevBestCoinBase;\n-        g_signals.UpdatedTransaction(hashPrevBestCoinBase);\n-        hashPrevBestCoinBase = block.GetTxHash(0);\n-    } else\n-        CheckForkWarningConditionsOnNewFork(pindexNew);\n-\n-    if (!pblocktree->Flush())\n-        return state.Abort(_(\"Failed to sync block index\"));\n-\n-    uiInterface.NotifyBlocksChanged();\n-    return true;\n+    return ActivateBestChain(state);\n }\n \n \n@@ -2554,16 +2564,6 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex,\n         return state.Abort(_(\"System error: \") + e.what());\n     }\n \n-    // Relay inventory, but don't relay old inventory during initial block download\n-    int nBlockEstimate = Checkpoints::GetTotalBlocksEstimate();\n-    if (chainActive.Tip()->GetBlockHash() == hash)\n-    {\n-        LOCK(cs_vNodes);\n-        BOOST_FOREACH(CNode* pnode, vNodes)\n-            if (chainActive.Height() > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : nBlockEstimate))\n-                pnode->PushInventory(CInv(MSG_BLOCK, hash));\n-    }\n-\n     return true;\n }\n "
      }
    ]
  },
  {
    "sha": "18e72167ddfeaea95253b62994c6d64b55b35005",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOGU3MjE2N2RkZmVhZWE5NTI1M2I2Mjk5NGM2ZDY0YjU1YjM1MDA1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-05-07T15:10:35Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-06-09T00:21:15Z"
      },
      "message": "Push cs_mains down in ProcessBlock",
      "tree": {
        "sha": "9ddc6e0b6866df01124b48355bb65deb1fa55411",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9ddc6e0b6866df01124b48355bb65deb1fa55411"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/18e72167ddfeaea95253b62994c6d64b55b35005",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18e72167ddfeaea95253b62994c6d64b55b35005",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/18e72167ddfeaea95253b62994c6d64b55b35005",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18e72167ddfeaea95253b62994c6d64b55b35005/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "202e01941c087e0b06a7c18ce344a53ce94e1350",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/202e01941c087e0b06a7c18ce344a53ce94e1350",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/202e01941c087e0b06a7c18ce344a53ce94e1350"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 30,
      "deletions": 24
    },
    "files": [
      {
        "sha": "16d1cba6efc4ac8a8c4023458d0bda3e04616e47",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 11,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18e72167ddfeaea95253b62994c6d64b55b35005/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18e72167ddfeaea95253b62994c6d64b55b35005/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=18e72167ddfeaea95253b62994c6d64b55b35005",
        "patch": "@@ -2243,8 +2243,7 @@ bool ReceivedBlockTransactions(const CBlock &block, CValidationState& state, CBl\n     if (!pblocktree->WriteBlockIndex(CDiskBlockIndex(pindexNew)))\n         return state.Abort(_(\"Failed to write block index\"));\n \n-    // New best?\n-    return ActivateBestChain(state);\n+    return true;\n }\n \n \n@@ -2520,7 +2519,6 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex,\n     }\n \n     int nHeight = pindex->nHeight;\n-    uint256 hash = pindex->GetBlockHash();\n \n     // Check that all transactions are finalized\n     BOOST_FOREACH(const CTransaction& tx, block.vtx)\n@@ -2593,10 +2591,11 @@ void PushGetBlocks(CNode* pnode, CBlockIndex* pindexBegin, uint256 hashEnd)\n \n bool ProcessBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDiskBlockPos *dbp)\n {\n-    AssertLockHeld(cs_main);\n-\n     // Check for duplicate\n     uint256 hash = pblock->GetHash();\n+\n+    {\n+    LOCK(cs_main);\n     if (mapBlockIndex.count(hash))\n         return state.Invalid(error(\"ProcessBlock() : already have block %d %s\", mapBlockIndex[hash]->nHeight, hash.ToString()), 0, \"duplicate\");\n     if (mapOrphanBlocks.count(hash))\n@@ -2665,7 +2664,11 @@ bool ProcessBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDiskBl\n         mapOrphanBlocksByPrev.erase(hashPrev);\n     }\n \n-    LogPrintf(\"ProcessBlock: ACCEPTED\\n\");\n+    }\n+\n+    if (!ActivateBestChain(state))\n+        return error(\"ProcessBlock() : ActivateBestChain failed\");\n+\n     return true;\n }\n \n@@ -3101,6 +3104,8 @@ bool InitBlockIndex() {\n             CBlockIndex *pindex = AddToBlockIndex(block);\n             if (!ReceivedBlockTransactions(block, state, pindex, blockPos))\n                 return error(\"LoadBlockIndex() : genesis block not accepted\");\n+            if (!ActivateBestChain(state))\n+                return error(\"LoadBlockIndex() : genesis block cannot be activated\");\n         } catch(std::runtime_error &e) {\n             return error(\"LoadBlockIndex() : failed to initialize block database: %s\", e.what());\n         }\n@@ -3230,7 +3235,6 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n \n                 // process block\n                 if (nBlockPos >= nStartByte) {\n-                    LOCK(cs_main);\n                     if (dbp)\n                         dbp->nPos = nBlockPos;\n                     CValidationState state;\n@@ -3919,10 +3923,12 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         CInv inv(MSG_BLOCK, block.GetHash());\n         pfrom->AddInventoryKnown(inv);\n \n-        LOCK(cs_main);\n-        // Remember who we got this block from.\n-        mapBlockSource[inv.hash] = pfrom->GetId();\n-        MarkBlockAsReceived(inv.hash, pfrom->GetId());\n+        {\n+            LOCK(cs_main);\n+            // Remember who we got this block from.\n+            mapBlockSource[inv.hash] = pfrom->GetId();\n+            MarkBlockAsReceived(inv.hash, pfrom->GetId());\n+        }\n \n         CValidationState state;\n         ProcessBlock(state, pfrom, &block);"
      },
      {
        "sha": "baaa22c8f3c6c247dc4ca13b802c8976310bff87",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18e72167ddfeaea95253b62994c6d64b55b35005/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18e72167ddfeaea95253b62994c6d64b55b35005/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=18e72167ddfeaea95253b62994c6d64b55b35005",
        "patch": "@@ -484,22 +484,22 @@ bool CheckWork(CBlock* pblock, CWallet& wallet, CReserveKey& reservekey)\n         LOCK(cs_main);\n         if (pblock->hashPrevBlock != chainActive.Tip()->GetBlockHash())\n             return error(\"BitcoinMiner : generated block is stale\");\n+    }\n \n-        // Remove key from key pool\n-        reservekey.KeepKey();\n-\n-        // Track how many getdata requests this block gets\n-        {\n-            LOCK(wallet.cs_wallet);\n-            wallet.mapRequestCount[pblock->GetHash()] = 0;\n-        }\n+    // Remove key from key pool\n+    reservekey.KeepKey();\n \n-        // Process this block the same as if we had received it from another node\n-        CValidationState state;\n-        if (!ProcessBlock(state, NULL, pblock))\n-            return error(\"BitcoinMiner : ProcessBlock, block not accepted\");\n+    // Track how many getdata requests this block gets\n+    {\n+        LOCK(wallet.cs_wallet);\n+        wallet.mapRequestCount[pblock->GetHash()] = 0;\n     }\n \n+    // Process this block the same as if we had received it from another node\n+    CValidationState state;\n+    if (!ProcessBlock(state, NULL, pblock))\n+        return error(\"BitcoinMiner : ProcessBlock, block not accepted\");\n+\n     return true;\n }\n "
      },
      {
        "sha": "d4ceb7f995f73b389d55271007ff721a1daced9a",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18e72167ddfeaea95253b62994c6d64b55b35005/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18e72167ddfeaea95253b62994c6d64b55b35005/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=18e72167ddfeaea95253b62994c6d64b55b35005",
        "patch": "@@ -254,7 +254,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"getblocktemplate\",       &getblocktemplate,       true,      false,      false },\n     { \"getmininginfo\",          &getmininginfo,          true,      false,      false },\n     { \"getnetworkhashps\",       &getnetworkhashps,       true,      false,      false },\n-    { \"submitblock\",            &submitblock,            false,     false,      false },\n+    { \"submitblock\",            &submitblock,            false,     true,       false },\n \n     /* Raw transactions */\n     { \"createrawtransaction\",   &createrawtransaction,   false,     false,      false },"
      }
    ]
  }
]