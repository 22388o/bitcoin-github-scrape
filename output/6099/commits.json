[
  {
    "sha": "5168a2a08e8790bb5bbd944d914908b77870c780",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MTY4YTJhMDhlODc5MGJiNWJiZDk0NGQ5MTQ5MDhiNzc4NzBjNzgw",
    "commit": {
      "author": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2015-05-03T10:18:27Z"
      },
      "committer": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2015-05-03T10:18:27Z"
      },
      "message": "Introduce BitcoinTestFramework.get_node_args.\n\nUse a new function in BitcoinTestFramework (get_node_args) to specify\nwhich options each node should have.",
      "tree": {
        "sha": "fa200adf2a1f61b8fd89a28103f05967366a2360",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fa200adf2a1f61b8fd89a28103f05967366a2360"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5168a2a08e8790bb5bbd944d914908b77870c780",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5168a2a08e8790bb5bbd944d914908b77870c780",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5168a2a08e8790bb5bbd944d914908b77870c780",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5168a2a08e8790bb5bbd944d914908b77870c780/comments",
    "author": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "90c37bc16c3416f133fb15b726873960e00f2262",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90c37bc16c3416f133fb15b726873960e00f2262",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/90c37bc16c3416f133fb15b726873960e00f2262"
      }
    ],
    "stats": {
      "total": 251,
      "additions": 192,
      "deletions": 59
    },
    "files": [
      {
        "sha": "4d9d9790436181d28b66d7cda71be033ea9d897b",
        "filename": "qa/rpc-tests/bipdersig-p2p.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5168a2a08e8790bb5bbd944d914908b77870c780/qa/rpc-tests/bipdersig-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5168a2a08e8790bb5bbd944d914908b77870c780/qa/rpc-tests/bipdersig-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bipdersig-p2p.py?ref=5168a2a08e8790bb5bbd944d914908b77870c780",
        "patch": "@@ -49,11 +49,11 @@ class BIP66Test(ComparisonTestFramework):\n     def __init__(self):\n         self.num_nodes = 1\n \n-    def setup_network(self):\n+    def get_node_args(self, n):\n+        args = ComparisonTestFramework.get_node_args(self, n)\n         # Must set the blockversion for this test\n-        self.nodes = start_nodes(1, self.options.tmpdir, \n-                                 extra_args=[['-debug', '-whitelist=127.0.0.1', '-blockversion=2']],\n-                                 binary=[self.options.testbinary])\n+        args.append('-blockversion=2')\n+        return args\n \n     def run_test(self):\n         test = TestManager(self, self.options.tmpdir)"
      },
      {
        "sha": "636406d4ac2060ded25ef2cb3c4939f763159b8b",
        "filename": "qa/rpc-tests/bipdersig.py",
        "status": "modified",
        "additions": 16,
        "deletions": 3,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5168a2a08e8790bb5bbd944d914908b77870c780/qa/rpc-tests/bipdersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5168a2a08e8790bb5bbd944d914908b77870c780/qa/rpc-tests/bipdersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bipdersig.py?ref=5168a2a08e8790bb5bbd944d914908b77870c780",
        "patch": "@@ -15,11 +15,24 @@\n \n class BIP66Test(BitcoinTestFramework):\n \n+    def get_node_args(self, n):\n+        args = BitcoinTestFramework.get_node_args(self, n)\n+\n+        if n == 1:\n+          args.append(\"-blockversion=2\")\n+        elif n == 2:\n+          args.append(\"-blockversion=3\")\n+\n+        return args\n+\n     def setup_network(self):\n         self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir, []))\n-        self.nodes.append(start_node(1, self.options.tmpdir, [\"-blockversion=2\"]))\n-        self.nodes.append(start_node(2, self.options.tmpdir, [\"-blockversion=3\"]))\n+        self.nodes.append(start_node(0, self.options.tmpdir,\n+                                     self.get_node_args(0)))\n+        self.nodes.append(start_node(1, self.options.tmpdir,\n+                                     self.get_node_args(1)))\n+        self.nodes.append(start_node(2, self.options.tmpdir,\n+                                     self.get_node_args(2)))\n         connect_nodes(self.nodes[1], 0)\n         connect_nodes(self.nodes[2], 0)\n         self.is_network_split = False"
      },
      {
        "sha": "d5949f4fd4ed6284260defae86d7070c9d18f588",
        "filename": "qa/rpc-tests/forknotify.py",
        "status": "modified",
        "additions": 14,
        "deletions": 2,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5168a2a08e8790bb5bbd944d914908b77870c780/qa/rpc-tests/forknotify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5168a2a08e8790bb5bbd944d914908b77870c780/qa/rpc-tests/forknotify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/forknotify.py?ref=5168a2a08e8790bb5bbd944d914908b77870c780",
        "patch": "@@ -17,16 +17,28 @@ class ForkNotifyTest(BitcoinTestFramework):\n \n     alert_filename = None  # Set by setup_network\n \n+    def get_node_args(self, n):\n+        args = BitcoinTestFramework.get_node_args(self, n)\n+\n+        if n == 0:\n+            args.append(\"-blockversion=2\")\n+            if self.alert_filename is not None:\n+                args.append(\"-alertnotify=echo %s >> \\\"\" + self.alert_filename + \"\\\"\")\n+        elif n == 1:\n+            args.append(\"-blockversion=211\")\n+\n+        return args\n+\n     def setup_network(self):\n         self.nodes = []\n         self.alert_filename = os.path.join(self.options.tmpdir, \"alert.txt\")\n         with open(self.alert_filename, 'w') as f:\n             pass  # Just open then close to create zero-length file\n         self.nodes.append(start_node(0, self.options.tmpdir,\n-                            [\"-blockversion=2\", \"-alertnotify=echo %s >> \\\"\" + self.alert_filename + \"\\\"\"]))\n+                                     self.get_node_args(0)))\n         # Node1 mines block.version=211 blocks\n         self.nodes.append(start_node(1, self.options.tmpdir,\n-                                [\"-blockversion=211\"]))\n+                                     self.get_node_args(1)))\n         connect_nodes(self.nodes[1], 0)\n \n         self.is_network_split = False"
      },
      {
        "sha": "040f1c43cc4846144e5fcd05f410e685244d67f0",
        "filename": "qa/rpc-tests/httpbasics.py",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5168a2a08e8790bb5bbd944d914908b77870c780/qa/rpc-tests/httpbasics.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5168a2a08e8790bb5bbd944d914908b77870c780/qa/rpc-tests/httpbasics.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/httpbasics.py?ref=5168a2a08e8790bb5bbd944d914908b77870c780",
        "patch": "@@ -21,8 +21,16 @@\n     import urlparse\n \n class HTTPBasicsTest (BitcoinTestFramework):        \n-    def setup_nodes(self):\n-        return start_nodes(4, self.options.tmpdir, extra_args=[['-rpckeepalive=1'], ['-rpckeepalive=0'], [], []])\n+\n+    def get_node_args(self, n):\n+        args = BitcoinTestFramework.get_node_args(self, n)\n+\n+        if n == 0:\n+            args.append('-rpckeepalive=1')\n+        elif n == 1:\n+            args.append('-rpckeepalive=0')\n+\n+        return args\n \n     def run_test(self):        \n         "
      },
      {
        "sha": "fd2fa54dcefb469d1a6181a59aaa58a13342bc59",
        "filename": "qa/rpc-tests/invalidateblock.py",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5168a2a08e8790bb5bbd944d914908b77870c780/qa/rpc-tests/invalidateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5168a2a08e8790bb5bbd944d914908b77870c780/qa/rpc-tests/invalidateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/invalidateblock.py?ref=5168a2a08e8790bb5bbd944d914908b77870c780",
        "patch": "@@ -13,17 +13,21 @@\n \n class InvalidateTest(BitcoinTestFramework):\n     \n-        \n     def setup_chain(self):\n         print(\"Initializing test directory \"+self.options.tmpdir)\n         initialize_chain_clean(self.options.tmpdir, 3)\n+\n+    def get_node_args(self, n):\n+        args = BitcoinTestFramework.get_node_args(self, n)\n+        args.append(\"-debug\")\n+        return args\n                  \n     def setup_network(self):\n         self.nodes = []\n         self.is_network_split = False \n-        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\"]))\n-        self.nodes.append(start_node(1, self.options.tmpdir, [\"-debug\"]))\n-        self.nodes.append(start_node(2, self.options.tmpdir, [\"-debug\"]))\n+        for i in range(3):\n+            self.nodes.append(start_node(i, self.options.tmpdir,\n+                                         self.get_node_args(i)))\n         \n     def run_test(self):\n         print \"Make sure we repopulate setBlockIndexCandidates after InvalidateBlock:\""
      },
      {
        "sha": "39694d5230c6ff20fd023823e83eade464413e0a",
        "filename": "qa/rpc-tests/maxblocksinflight.py",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5168a2a08e8790bb5bbd944d914908b77870c780/qa/rpc-tests/maxblocksinflight.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5168a2a08e8790bb5bbd944d914908b77870c780/qa/rpc-tests/maxblocksinflight.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/maxblocksinflight.py?ref=5168a2a08e8790bb5bbd944d914908b77870c780",
        "patch": "@@ -85,9 +85,14 @@ def setup_chain(self):\n         print \"Initializing test directory \"+self.options.tmpdir\n         initialize_chain_clean(self.options.tmpdir, 1)\n \n+    def get_node_args(self, n):\n+        args = BitcoinTestFramework.get_node_args(self, n)\n+        args.extend(['-debug', '-whitelist=127.0.0.1'])\n+        return args\n+\n     def setup_network(self):\n         self.nodes = start_nodes(1, self.options.tmpdir, \n-                                 extra_args=[['-debug', '-whitelist=127.0.0.1']],\n+                                 extra_args=self.get_extra_args(),\n                                  binary=[self.options.testbinary])\n \n     def run_test(self):"
      },
      {
        "sha": "2f561a69ad770a8996a47e9e24600e8e3a324bf7",
        "filename": "qa/rpc-tests/mempool_coinbase_spends.py",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5168a2a08e8790bb5bbd944d914908b77870c780/qa/rpc-tests/mempool_coinbase_spends.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5168a2a08e8790bb5bbd944d914908b77870c780/qa/rpc-tests/mempool_coinbase_spends.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_coinbase_spends.py?ref=5168a2a08e8790bb5bbd944d914908b77870c780",
        "patch": "@@ -19,11 +19,16 @@ class MempoolCoinbaseTest(BitcoinTestFramework):\n \n     alert_filename = None  # Set by setup_network\n \n+    def get_node_args(self, n):\n+        args = BitcoinTestFramework.get_node_args(self, n)\n+        args.extend(['-checkmempool', '-debug=mempool'])\n+        return args\n+\n     def setup_network(self):\n-        args = [\"-checkmempool\", \"-debug=mempool\"]\n         self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir, args))\n-        self.nodes.append(start_node(1, self.options.tmpdir, args))\n+        for i in range(2):\n+            self.nodes.append(start_node(i, self.options.tmpdir,\n+                                         self.get_node_args(i)))\n         connect_nodes(self.nodes[1], 0)\n         self.is_network_split = False\n         self.sync_all"
      },
      {
        "sha": "a6feb7db1cf04ffe1a1838cb7fcbb42c9f17b846",
        "filename": "qa/rpc-tests/mempool_resurrect_test.py",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5168a2a08e8790bb5bbd944d914908b77870c780/qa/rpc-tests/mempool_resurrect_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5168a2a08e8790bb5bbd944d914908b77870c780/qa/rpc-tests/mempool_resurrect_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_resurrect_test.py?ref=5168a2a08e8790bb5bbd944d914908b77870c780",
        "patch": "@@ -17,11 +17,16 @@\n # Create one-input, one-output, no-fee transaction:\n class MempoolCoinbaseTest(BitcoinTestFramework):\n \n+    def get_node_args(self, n):\n+        args = BitcoinTestFramework.get_node_args(self, n)\n+        args.extend(['-checkmempool', '-debug=mempool'])\n+        return args\n+\n     def setup_network(self):\n         # Just need one node for this test\n-        args = [\"-checkmempool\", \"-debug=mempool\"]\n         self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir, args))\n+        self.nodes.append(start_node(0, self.options.tmpdir,\n+                                     self.get_node_args(0)))\n         self.is_network_split = False\n \n     def create_tx(self, from_txid, to_address, amount):"
      },
      {
        "sha": "2d95c5494eddd7a50dccece11470db1ad264010a",
        "filename": "qa/rpc-tests/mempool_spendcoinbase.py",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5168a2a08e8790bb5bbd944d914908b77870c780/qa/rpc-tests/mempool_spendcoinbase.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5168a2a08e8790bb5bbd944d914908b77870c780/qa/rpc-tests/mempool_spendcoinbase.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_spendcoinbase.py?ref=5168a2a08e8790bb5bbd944d914908b77870c780",
        "patch": "@@ -22,11 +22,16 @@\n # Create one-input, one-output, no-fee transaction:\n class MempoolSpendCoinbaseTest(BitcoinTestFramework):\n \n+    def get_node_args(self, n):\n+        args = BitcoinTestFramework.get_node_args(self, n)\n+        args.extend(['-checkmempool', '-debug=mempool'])\n+        return args\n+\n     def setup_network(self):\n         # Just need one node for this test\n-        args = [\"-checkmempool\", \"-debug=mempool\"]\n         self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir, args))\n+        self.nodes.append(start_node(0, self.options.tmpdir,\n+                                     self.get_node_args(0)))\n         self.is_network_split = False\n \n     def create_tx(self, from_txid, to_address, amount):"
      },
      {
        "sha": "2137f8a05890ee87f9f3caafb84cbebad19539eb",
        "filename": "qa/rpc-tests/merkle_blocks.py",
        "status": "modified",
        "additions": 12,
        "deletions": 4,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5168a2a08e8790bb5bbd944d914908b77870c780/qa/rpc-tests/merkle_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5168a2a08e8790bb5bbd944d914908b77870c780/qa/rpc-tests/merkle_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/merkle_blocks.py?ref=5168a2a08e8790bb5bbd944d914908b77870c780",
        "patch": "@@ -19,14 +19,22 @@ def setup_chain(self):\n         print(\"Initializing test directory \"+self.options.tmpdir)\n         initialize_chain_clean(self.options.tmpdir, 4)\n \n+    def get_node_args(self, n):\n+        args = BitcoinTestFramework.get_node_args(self, n)\n+        args.append('-debug')\n+\n+        if n == 3:\n+            args.append('-txindex')\n+\n+        return args\n+\n     def setup_network(self):\n         self.nodes = []\n         # Nodes 0/1 are \"wallet\" nodes\n-        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\"]))\n-        self.nodes.append(start_node(1, self.options.tmpdir, [\"-debug\"]))\n         # Nodes 2/3 are used for testing\n-        self.nodes.append(start_node(2, self.options.tmpdir, [\"-debug\"]))\n-        self.nodes.append(start_node(3, self.options.tmpdir, [\"-debug\", \"-txindex\"]))\n+        for i in range(4):\n+            self.nodes.append(start_node(i, self.options.tmpdir,\n+                                         self.get_node_args(i)))\n         connect_nodes(self.nodes[0], 1)\n         connect_nodes(self.nodes[0], 2)\n         connect_nodes(self.nodes[0], 3)"
      },
      {
        "sha": "8dcc946b4a63f50690bcdcb95992d22e6346514e",
        "filename": "qa/rpc-tests/proxy_test.py",
        "status": "modified",
        "additions": 19,
        "deletions": 7,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5168a2a08e8790bb5bbd944d914908b77870c780/qa/rpc-tests/proxy_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5168a2a08e8790bb5bbd944d914908b77870c780/qa/rpc-tests/proxy_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/proxy_test.py?ref=5168a2a08e8790bb5bbd944d914908b77870c780",
        "patch": "@@ -61,15 +61,27 @@ def __init__(self):\n         self.serv3 = Socks5Server(self.conf3)\n         self.serv3.start()\n \n-    def setup_nodes(self):\n+    def get_node_args(self, n):\n+        args = BitcoinTestFramework.get_node_args(self, n)\n+        args.extend([\"-listen\", \"-debug=net\", \"-debug=proxy\"])\n+\n         # Note: proxies are not used to connect to local nodes\n         # this is because the proxy to use is based on CService.GetNetwork(), which return NET_UNROUTABLE for localhost\n-        return start_nodes(4, self.options.tmpdir, extra_args=[\n-            ['-listen', '-debug=net', '-debug=proxy', '-proxy=%s:%i' % (self.conf1.addr),'-proxyrandomize=1'], \n-            ['-listen', '-debug=net', '-debug=proxy', '-proxy=%s:%i' % (self.conf1.addr),'-onion=%s:%i' % (self.conf2.addr),'-proxyrandomize=0'], \n-            ['-listen', '-debug=net', '-debug=proxy', '-proxy=%s:%i' % (self.conf2.addr),'-proxyrandomize=1'], \n-            ['-listen', '-debug=net', '-debug=proxy', '-proxy=[%s]:%i' % (self.conf3.addr),'-proxyrandomize=0']\n-            ])\n+        if n == 0:\n+            args.append(\"-proxy=%s:%i\" % self.conf1.addr)\n+            args.append(\"-proxyrandomize=1\")\n+        elif n == 1:\n+            args.append(\"-proxy=%s:%i\" % self.conf1.addr)\n+            args.append(\"-onion=%s:%i\" % self.conf2.addr)\n+            args.append(\"-proxyrandomize=0\")\n+        elif n == 2:\n+            args.append(\"-proxy=%s:%i\" % self.conf2.addr)\n+            args.append(\"-proxyrandomize=1\")\n+        elif n == 3:\n+            args.append(\"-proxy=[%s]:%i\" % self.conf3.addr)\n+            args.append(\"-proxyrandomize=0\")\n+\n+        return args\n \n     def node_test(self, node, proxies, auth):\n         rv = []"
      },
      {
        "sha": "b168ca8a8dd6e34be0707df32f2b921e8e25c081",
        "filename": "qa/rpc-tests/pruning.py",
        "status": "modified",
        "additions": 15,
        "deletions": 4,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5168a2a08e8790bb5bbd944d914908b77870c780/qa/rpc-tests/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5168a2a08e8790bb5bbd944d914908b77870c780/qa/rpc-tests/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/pruning.py?ref=5168a2a08e8790bb5bbd944d914908b77870c780",
        "patch": "@@ -46,16 +46,27 @@ def setup_chain(self):\n         print(\"Initializing test directory \"+self.options.tmpdir)\n         initialize_chain_clean(self.options.tmpdir, 3)\n \n+    def get_node_args(self, n):\n+        args = BitcoinTestFramework.get_node_args(self, n)\n+        args.extend(['-debug', '-maxreceivebuffer=20000'])\n+\n+        if n == 0 or n == 1:\n+            args.extend(['-blockmaxsize=999000', '-checkblocks=5'])\n+        elif n == 2:\n+            args.append('-prune=550')\n+\n+        return args\n+\n     def setup_network(self):\n         self.nodes = []\n         self.is_network_split = False\n \n         # Create nodes 0 and 1 to mine\n-        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\",\"-maxreceivebuffer=20000\",\"-blockmaxsize=999000\", \"-checkblocks=5\"], timewait=300))\n-        self.nodes.append(start_node(1, self.options.tmpdir, [\"-debug\",\"-maxreceivebuffer=20000\",\"-blockmaxsize=999000\", \"-checkblocks=5\"], timewait=300))\n-\n         # Create node 2 to test pruning\n-        self.nodes.append(start_node(2, self.options.tmpdir, [\"-debug\",\"-maxreceivebuffer=20000\",\"-prune=550\"], timewait=300))\n+        for i in range(3):\n+            self.nodes.append(start_node(i, self.options.tmpdir,\n+                                         self.get_node_args(i),\n+                                         timewait=300))\n         self.prunedir = self.options.tmpdir+\"/node2/regtest/blocks/\"\n \n         self.address[0] = self.nodes[0].getnewaddress()"
      },
      {
        "sha": "b743c891195c3a289f7268621e5bbb9b5b7b749a",
        "filename": "qa/rpc-tests/smartfees.py",
        "status": "modified",
        "additions": 16,
        "deletions": 6,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5168a2a08e8790bb5bbd944d914908b77870c780/qa/rpc-tests/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5168a2a08e8790bb5bbd944d914908b77870c780/qa/rpc-tests/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/smartfees.py?ref=5168a2a08e8790bb5bbd944d914908b77870c780",
        "patch": "@@ -13,24 +13,34 @@\n \n class EstimateFeeTest(BitcoinTestFramework):\n \n+    def get_node_args(self, n):\n+        args = BitcoinTestFramework.get_node_args(self, n)\n+        args.extend([\"-debug=mempool\", \"-debug=estimatefee\",\n+                     \"-relaypriority=0\"])\n+\n+        if n == 1:\n+            args.extend([\"-blockprioritysize=1500\", \"-blockmaxsize=2000\"])\n+        elif n == 2:\n+            args.extend([\"-blockprioritysize=0\", \"-blockmaxsize=1500\"])\n+\n+        return args\n+\n     def setup_network(self):\n         self.nodes = []\n         self.nodes.append(start_node(0, self.options.tmpdir,\n-                            [\"-debug=mempool\", \"-debug=estimatefee\", \"-relaypriority=0\"]))\n+                                     self.get_node_args(0)))\n         # Node1 mines small-but-not-tiny blocks, and allows free transactions.\n         # NOTE: the CreateNewBlock code starts counting block size at 1,000 bytes,\n         # so blockmaxsize of 2,000 is really just 1,000 bytes (room enough for\n         # 6 or 7 transactions)\n         self.nodes.append(start_node(1, self.options.tmpdir,\n-                                [\"-blockprioritysize=1500\", \"-blockmaxsize=2000\",\n-                                 \"-debug=mempool\", \"-debug=estimatefee\", \"-relaypriority=0\"]))\n+                                     self.get_node_args(1)))\n         connect_nodes(self.nodes[1], 0)\n \n         # Node2 is a stingy miner, that\n         # produces very small blocks (room for only 3 or so transactions)\n-        node2args = [ \"-blockprioritysize=0\", \"-blockmaxsize=1500\",\n-                      \"-debug=mempool\", \"-debug=estimatefee\", \"-relaypriority=0\"]\n-        self.nodes.append(start_node(2, self.options.tmpdir, node2args))\n+        self.nodes.append(start_node(2, self.options.tmpdir,\n+                                     self.get_node_args(2)))\n         connect_nodes(self.nodes[2], 0)\n \n         self.is_network_split = False"
      },
      {
        "sha": "268aba0bef2311227bf445ecf13d8e987963a650",
        "filename": "qa/rpc-tests/test_framework.py",
        "status": "modified",
        "additions": 24,
        "deletions": 3,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5168a2a08e8790bb5bbd944d914908b77870c780/qa/rpc-tests/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5168a2a08e8790bb5bbd944d914908b77870c780/qa/rpc-tests/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework.py?ref=5168a2a08e8790bb5bbd944d914908b77870c780",
        "patch": "@@ -29,12 +29,28 @@ def run_test(self):\n     def add_options(self, parser):\n         pass\n \n+    def get_node_args(self, n):\n+        \"\"\"\n+        Provide extra args to pass to node n when starting it.  This can be\n+        overridden by subclasses to provide custom node configurations.\n+        \"\"\"\n+\n+        return []\n+\n+    def get_extra_args(self):\n+        extra_args = []\n+        for i in range(num_nodes):\n+            extra_args.append(self.get_node_args(i))\n+        return extra_args\n+\n     def setup_chain(self):\n         print(\"Initializing test directory \"+self.options.tmpdir)\n-        initialize_chain(self.options.tmpdir)\n+        extra_args = self.get_extra_args()\n+        initialize_chain(self.options.tmpdir, extra_args)\n \n     def setup_nodes(self):\n-        return start_nodes(4, self.options.tmpdir)\n+        extra_args = self.get_extra_args()\n+        return start_nodes(num_nodes, self.options.tmpdir, extra_args)\n \n     def setup_network(self, split = False):\n         self.nodes = self.setup_nodes()\n@@ -169,12 +185,17 @@ def add_options(self, parser):\n                           default=os.getenv(\"BITCOIND\", \"bitcoind\"),\n                           help=\"bitcoind binary to use for reference nodes (if any)\")\n \n+    def get_node_args(self, n):\n+        args = BitcoinTestFramework.get_node_args(self, n)\n+        args.extend(['-debug', '-whitelist=127.0.0.1'])\n+        return args\n+\n     def setup_chain(self):\n         print \"Initializing test directory \"+self.options.tmpdir\n         initialize_chain_clean(self.options.tmpdir, self.num_nodes)\n \n     def setup_network(self):\n         self.nodes = start_nodes(self.num_nodes, self.options.tmpdir,\n-                                    extra_args=[['-debug', '-whitelist=127.0.0.1']] * self.num_nodes,\n+                                    self.get_extra_args(),\n                                     binary=[self.options.testbinary] +\n                                            [self.options.refbinary]*(self.num_nodes-1))"
      },
      {
        "sha": "8d0335cc244277e55dbe2634f8bb0b621300db7d",
        "filename": "qa/rpc-tests/util.py",
        "status": "modified",
        "additions": 16,
        "deletions": 9,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5168a2a08e8790bb5bbd944d914908b77870c780/qa/rpc-tests/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5168a2a08e8790bb5bbd944d914908b77870c780/qa/rpc-tests/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/util.py?ref=5168a2a08e8790bb5bbd944d914908b77870c780",
        "patch": "@@ -21,6 +21,8 @@\n from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException\n from util import *\n \n+num_nodes = 4\n+\n def p2p_port(n):\n     return 11000 + n + os.getpid()%999\n def rpc_port(n):\n@@ -72,19 +74,24 @@ def initialize_datadir(dirname, n):\n         f.write(\"rpcport=\"+str(rpc_port(n))+\"\\n\");\n     return datadir\n \n-def initialize_chain(test_dir):\n+def initialize_chain(test_dir, extra_args=None):\n     \"\"\"\n     Create (or copy from cache) a 200-block-long chain and\n     4 wallets.\n     bitcoind and bitcoin-cli must be in search path.\n     \"\"\"\n \n+    if extra_args is not None:\n+        assert len(extra_args) == num_nodes\n+\n     if not os.path.isdir(os.path.join(\"cache\", \"node0\")):\n         devnull = open(\"/dev/null\", \"w+\")\n         # Create cache directories, run bitcoinds:\n-        for i in range(4):\n+        for i in range(num_nodes):\n             datadir=initialize_datadir(\"cache\", i)\n             args = [ os.getenv(\"BITCOIND\", \"bitcoind\"), \"-keypool=1\", \"-datadir=\"+datadir, \"-discover=0\" ]\n+            if extra_args is not None:\n+                args.extend(extra_args[i])\n             if i > 0:\n                 args.append(\"-connect=127.0.0.1:\"+str(p2p_port(0)))\n             bitcoind_processes[i] = subprocess.Popen(args)\n@@ -96,7 +103,7 @@ def initialize_chain(test_dir):\n                 print \"initialize_chain: bitcoin-cli -rpcwait getblockcount completed\"\n         devnull.close()\n         rpcs = []\n-        for i in range(4):\n+        for i in range(num_nodes):\n             try:\n                 url = \"http://rt:rt@127.0.0.1:%d\"%(rpc_port(i),)\n                 rpcs.append(AuthServiceProxy(url))\n@@ -110,7 +117,7 @@ def initialize_chain(test_dir):\n         # at 1 Jan 2014\n         block_time = 1388534400\n         for i in range(2):\n-            for peer in range(4):\n+            for peer in range(num_nodes):\n                 for j in range(25):\n                     set_node_times(rpcs, block_time)\n                     rpcs[peer].generate(1)\n@@ -121,13 +128,13 @@ def initialize_chain(test_dir):\n         # Shut them down, and clean up cache directories:\n         stop_nodes(rpcs)\n         wait_bitcoinds()\n-        for i in range(4):\n+        for i in range(num_nodes):\n             os.remove(log_filename(\"cache\", i, \"debug.log\"))\n             os.remove(log_filename(\"cache\", i, \"db.log\"))\n             os.remove(log_filename(\"cache\", i, \"peers.dat\"))\n             os.remove(log_filename(\"cache\", i, \"fee_estimates.dat\"))\n \n-    for i in range(4):\n+    for i in range(num_nodes):\n         from_dir = os.path.join(\"cache\", \"node\"+str(i))\n         to_dir = os.path.join(test_dir,  \"node\"+str(i))\n         shutil.copytree(from_dir, to_dir)\n@@ -162,15 +169,15 @@ def _rpchost_to_args(rpchost):\n         rv += ['-rpcport=' + rpcport]\n     return rv\n \n-def start_node(i, dirname, extra_args=None, rpchost=None, timewait=None, binary=None):\n+def start_node(i, dirname, extra_args=[], rpchost=None, timewait=None, binary=None):\n     \"\"\"\n     Start a bitcoind and return RPC connection to it\n     \"\"\"\n     datadir = os.path.join(dirname, \"node\"+str(i))\n     if binary is None:\n         binary = os.getenv(\"BITCOIND\", \"bitcoind\")\n     args = [ binary, \"-datadir=\"+datadir, \"-keypool=1\", \"-discover=0\", \"-rest\" ]\n-    if extra_args is not None: args.extend(extra_args)\n+    args.extend(extra_args)\n     bitcoind_processes[i] = subprocess.Popen(args)\n     devnull = open(\"/dev/null\", \"w+\")\n     if os.getenv(\"PYTHON_DEBUG\", \"\"):\n@@ -193,7 +200,7 @@ def start_nodes(num_nodes, dirname, extra_args=None, rpchost=None, binary=None):\n     \"\"\"\n     Start multiple bitcoinds, return RPC connections to them\n     \"\"\"\n-    if extra_args is None: extra_args = [ None for i in range(num_nodes) ]\n+    if extra_args is None: extra_args = [ [] for i in range(num_nodes) ]\n     if binary is None: binary = [ None for i in range(num_nodes) ]\n     return [ start_node(i, dirname, extra_args[i], rpchost, binary=binary[i]) for i in range(num_nodes) ]\n "
      },
      {
        "sha": "2a169cab6979d155d6c8e87b800904cde0d2ec52",
        "filename": "qa/rpc-tests/walletbackup.py",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5168a2a08e8790bb5bbd944d914908b77870c780/qa/rpc-tests/walletbackup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5168a2a08e8790bb5bbd944d914908b77870c780/qa/rpc-tests/walletbackup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/walletbackup.py?ref=5168a2a08e8790bb5bbd944d914908b77870c780",
        "patch": "@@ -45,11 +45,18 @@ def setup_chain(self):\n         logging.info(\"Initializing test directory \"+self.options.tmpdir)\n         initialize_chain_clean(self.options.tmpdir, 4)\n \n+    def get_node_args(self, n):\n+        args = BitcoinTestFramework.get_node_args(self, n)\n+\n+        # nodes 1, 2,3 are spenders, let's give them a keypool=100\n+        if n != 3:\n+            args.append('-keypool=100')\n+\n+        return args\n+\n     # This mirrors how the network was setup in the bash test\n     def setup_network(self, split=False):\n-        # nodes 1, 2,3 are spenders, let's give them a keypool=100\n-        extra_args = [[\"-keypool=100\"], [\"-keypool=100\"], [\"-keypool=100\"], []]\n-        self.nodes = start_nodes(4, self.options.tmpdir, extra_args)\n+        self.nodes = start_nodes(4, self.options.tmpdir, self.get_extra_args())\n         connect_nodes(self.nodes[0], 3)\n         connect_nodes(self.nodes[1], 3)\n         connect_nodes(self.nodes[2], 3)"
      }
    ]
  }
]