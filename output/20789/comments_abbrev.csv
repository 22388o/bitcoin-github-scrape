practicalswift,2020-12-28 21:11:44,"Concept ACK\n\nNice improvements!",https://github.com/bitcoin/bitcoin/pull/20789#issuecomment-751865486,751865486,
DrahtBot,2020-12-29 00:24:41,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20828 (fuzz: Introduce CallOneOf helper to replace switch-case by MarcoFalke)\n* #20729 (p2p: standardize on outbound-{fu",https://github.com/bitcoin/bitcoin/pull/20789#issuecomment-751904213,751904213,
MarcoFalke,2020-12-31 13:11:51,Force pushed to fix a bug. Should be trivial to re-ACK,https://github.com/bitcoin/bitcoin/pull/20789#issuecomment-752955379,752955379,
MarcoFalke,2020-12-31 13:43:57,"\n## Benchmarks\n\nThe goal is to benchmark the complexity of finding a strong and weak match of an enum type.\nStrong match means the fuzz engine finds an exact value match. (built-in `operator==` for integers)\nWeak match means the fuzz engine finds a matching flag. (built-in `operator&` for integers)\n\nTo reproduce:\n\n* For all benchmarks `clang version 11.0.0` without sanitizers is ",https://github.com/bitcoin/bitcoin/pull/20789#issuecomment-752961937,752961937,
practicalswift,2020-12-31 16:12:58,"cr ACK fadbf6a83040b7a8b9f91e27b61adfaf4c5df3fb\n\nThanks for providing benchmarks!",https://github.com/bitcoin/bitcoin/pull/20789#issuecomment-752996682,752996682,
MarcoFalke,2020-12-31 17:44:59,"@vasild btw for the merge script to pick up your ack, you'll have to provide at least the first 6 chars of the git hash ;)",https://github.com/bitcoin/bitcoin/pull/20789#issuecomment-753014492,753014492,
vasild,2021-01-01 12:54:16,"ACK fac2b6c58ee0bd1efa7a1531af3b882b451c920b\n\nBoth fadbf6a83 and fac2b6c58 compile fine with clang 12.0.0.\n\n@MarcoFalke so you were lucky enough to get 15 straight commit ids all starting with `fa`. I guess you have to have 16777216 times more ~CPU~luck in order to make a commit with arbitrary contents that starts with `fac2b6c5` :-D\n\nHappy New Year! :tada: ",https://github.com/bitcoin/bitcoin/pull/20789#issuecomment-753313056,753313056,
mzumsande,2021-01-02 00:31:24,"ACK fac2b6c58ee0bd1efa7a1531af3b882b451c920b\n\nCode looks good to me, built locally and did some testing, as in the benchmarks.\n\nAs for the worse performance of kMaxValue, I think calling this a ""bug"" that should be reported is too hard: `FuzzedDataProvider::ConsumeEnum()` does have a disclaimer ""The enum must start at 0 and be contiguous"" so it's just not designed for bitmasks such as `enu",https://github.com/bitcoin/bitcoin/pull/20789#issuecomment-753409562,753409562,
MarcoFalke,2021-01-02 08:41:03,"Oh, this is missing from the documentation in the declaration: https://github.com/bitcoin/bitcoin/blob/e75f91eae3936269b40b4bfdfe540d5526270936/src/test/fuzz/FuzzedDataProvider.h#L70-L71\n\nIt is only mentioned in the implementation: \n\nhttps://github.com/bitcoin/bitcoin/blob/e75f91eae3936269b40b4bfdfe540d5526270936/src/test/fuzz/FuzzedDataProvider.h#L291-L298",https://github.com/bitcoin/bitcoin/pull/20789#issuecomment-753448236,753448236,
MarcoFalke,2021-01-02 09:12:49,Rebased due to trivial conflict in adjacent line,https://github.com/bitcoin/bitcoin/pull/20789#issuecomment-753450647,753450647,
jonatack,2021-01-02 09:20:17,"Concept ACK, first read-through looks very good.",https://github.com/bitcoin/bitcoin/pull/20789#issuecomment-753451261,753451261,
MarcoFalke,2021-01-02 14:12:41,Rebased after removal of my_starting_height,https://github.com/bitcoin/bitcoin/pull/20789#issuecomment-753478362,753478362,
MarcoFalke,2021-01-07 08:11:03,"Btw, should be (relatively) easy to re-ACK :pray: ",https://github.com/bitcoin/bitcoin/pull/20789#issuecomment-755957920,755957920,
mzumsande,2021-01-07 15:51:34,ACK eeee43bc48ea7fbacd3c5e3f076f01f04744adb8 after rebase.,https://github.com/bitcoin/bitcoin/pull/20789#issuecomment-756200898,756200898,
vasild,2020-12-30 14:25:53,"I wonder if it is possible to get a warning if a new enum value is added, but this array is forgotten to be updated? I think not :/",https://github.com/bitcoin/bitcoin/pull/20789#discussion_r550212069,550212069,src/test/util/net.h
vasild,2020-12-31 08:58:35,"It is ok as it is, and I am just wondering if this can be improved wrt minimizing the chance of the actual enum and the ""all"" arrays going out of sync over time. Maybe one of the below would help:\n\no Add a comment next to the enum definition ""don't forget to update `ALL_...` in `src/test/util/net.h` if you change this enum"".\n\no Define the array immediately below the enum itself.\n\n<deta",https://github.com/bitcoin/bitcoin/pull/20789#discussion_r550433436,550433436,src/test/util/net.h
practicalswift,2020-12-31 09:23:44,"Perhaps we could start using [`kMaxValue` as in the Chromium project](https://www.chromium.org/developers/coding-style/chromium-style-checker-errors). That way we could ​assert that the last element of the `ALL_*` array is equal to the `enum`'s `kMaxValue`.\n\nAnother benefit from using `kMaxValue` is that we could start using `FuzzedDataProvider::ConsumeEnum` when fuzzing.",https://github.com/bitcoin/bitcoin/pull/20789#discussion_r550438456,550438456,src/test/util/net.h
vasild,2020-12-31 12:39:51,"Yeah, that is another way. `enum Network` uses this. It only works as long as enum values are left at their defaults:\n\nhttps://github.com/bitcoin/bitcoin/blob/f1f26b8d5baec4a45a3a9ba0440cd4eff7af8407/src/netaddress.h#L38\n\nand also the dummy ""max"" value has to be explicitly handled in `switch` without `default:`\n\nhttps://github.com/bitcoin/bitcoin/blob/f1f26b8d5baec4a45a3a9ba0440cd4eff7",https://github.com/bitcoin/bitcoin/pull/20789#discussion_r550475166,550475166,src/test/util/net.h
vasild,2020-12-31 13:32:38,What happens if we attempt to consume more bytes after `ConsumeRemainingBytes()`? Apparently CI was green. Should we `abort()` if that happens?,https://github.com/bitcoin/bitcoin/pull/20789#discussion_r550484056,550484056,src/test/fuzz/process_message.cpp
MarcoFalke,2020-12-31 13:36:35,"This happens in normal operation when the fuzz engine starts with an empty byte vector or when existing inputs are trimmed, so it can't be detected by CI.",https://github.com/bitcoin/bitcoin/pull/20789#discussion_r550484742,550484742,src/test/fuzz/process_message.cpp
MarcoFalke,2020-12-31 17:43:38,"For strong enums, I was thinking about a macro `ENUM_CLASS_ALL` that writes the `enum class` and `std::array` that holds all enum types of that class. Thus, we could keep using `PickValueInArray` for strong enums. `FuzzedDataProvider::ConsumeEnum` is an alternative for strong enums that does exactly the same from the perspective of the fuzz engine.\n\nFor weak enums, `ConsumeWeakEnum` is probabl",https://github.com/bitcoin/bitcoin/pull/20789#discussion_r550592732,550592732,src/test/util/net.h
mzumsande,2020-12-31 19:57:37,"Trying to build this with clang I get linker errors (`multiple definition of ConsumeNodeAsUniquePtr(FuzzedDataProvider&, std::optional<long> const&)`). \nI think that adding an `inline` to  `ConsumeNodeAsUniquePtr()` would fix this.",https://github.com/bitcoin/bitcoin/pull/20789#discussion_r550682304,550682304,src/test/fuzz/util.h
MarcoFalke,2021-01-01 11:40:57,"Thanks, fixed. Not sure why I can't reproduce locally. Are you using the macOS clang?",https://github.com/bitcoin/bitcoin/pull/20789#discussion_r550760251,550760251,src/test/fuzz/util.h
mzumsande,2021-01-01 13:14:01,I am using clang version 6.0.0-1ubuntu2,https://github.com/bitcoin/bitcoin/pull/20789#discussion_r550767540,550767540,src/test/fuzz/util.h
