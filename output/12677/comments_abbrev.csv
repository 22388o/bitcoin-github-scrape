adrianh87,2018-03-13T14:00:11Z,Thank you Luke for taking it into consideration and adding it !,https://github.com/bitcoin/bitcoin/pull/12677#issuecomment-372674775,372674775,
meshcollider,2018-03-13T20:53:26Z,"Concept ACK, perhaps it'd be cleaner to sub-object them like you put in the title of the PR ",https://github.com/bitcoin/bitcoin/pull/12677#issuecomment-372814639,372814639,
sipa,2018-03-17T00:39:35Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/12677#issuecomment-373879921,373879921,
promag,2018-05-03T08:15:36Z,@luke-jr is this still relevant? There are a couple of suggestions above and it's missing test(s) update.,https://github.com/bitcoin/bitcoin/pull/12677#issuecomment-386221685,386221685,
achow101,2018-07-09T22:21:12Z,utACK daeb431011eefb35b9c76c0b1072d44ac40fe2a6,https://github.com/bitcoin/bitcoin/pull/12677#issuecomment-403638841,403638841,
MarcoFalke,2018-07-10T17:30:15Z,"@promag Indeed, needs a trivial test where they are all different from 0",https://github.com/bitcoin/bitcoin/pull/12677#issuecomment-403903860,403903860,
DrahtBot,2018-10-20T11:07:45Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22798](https://github.com/bitcoin/bitcoin/pull/22798) (doc: Fix RPC result documentation by MarcoFalke)\n* [#22689](http",https://github.com/bitcoin/bitcoin/pull/12677#issuecomment-431570890,431570890,
luke-jr,2019-02-12T13:48:20Z,Rebased and added tests,https://github.com/bitcoin/bitcoin/pull/12677#issuecomment-462765537,462765537,
luke-jr,2019-04-06T16:29:23Z,Rebased again,https://github.com/bitcoin/bitcoin/pull/12677#issuecomment-480517579,480517579,
DrahtBot,2019-09-30T13:02:40Z,"<!--5fd3d806e98f4a0ca80977bb178665a0-->There hasn't been much activity lately and the patch still needs rebase, so I am closing this for now. Please let me know when you want to continue working on this, so the pull request can be re-opened.",https://github.com/bitcoin/bitcoin/pull/12677#issuecomment-536550602,536550602,
sipa,2019-10-18T03:32:44Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/12677#issuecomment-543476320,543476320,
MarcoFalke,2020-05-07T17:07:50Z,ACK 911d940f14b3e05decf8bb8001fb133a0647b782,https://github.com/bitcoin/bitcoin/pull/12677#issuecomment-625381838,625381838,
instagibbs,2020-05-22T00:50:35Z,Promise to review this if it gets rebased ,https://github.com/bitcoin/bitcoin/pull/12677#issuecomment-632418794,632418794,
MarcoFalke,2020-05-22T01:08:06Z,"> Promise to review this if it gets rebased\n\nSame",https://github.com/bitcoin/bitcoin/pull/12677#issuecomment-632423042,632423042,
MarcoFalke,2020-06-08T14:33:21Z,@luke-jr You still working on this or is this up for grabs?,https://github.com/bitcoin/bitcoin/pull/12677#issuecomment-640665376,640665376,
luke-jr,2020-06-18T21:17:53Z,Rebased,https://github.com/bitcoin/bitcoin/pull/12677#issuecomment-646310600,646310600,
MarcoFalke,2020-06-19T13:11:38Z,re-ACK 2299b1fb78 only change was solved conflict in test due to diff in an adjacent line,https://github.com/bitcoin/bitcoin/pull/12677#issuecomment-646627962,646627962,
jonatack,2020-06-19T13:29:16Z,Would also need a release note here or as a follow-up.,https://github.com/bitcoin/bitcoin/pull/12677#issuecomment-646636183,646636183,
MarcoFalke,2020-07-20T06:19:57Z,@luke-jr Are you still working on this?,https://github.com/bitcoin/bitcoin/pull/12677#issuecomment-660827951,660827951,
luke-jr,2020-08-09T19:45:28Z,"> Naming request: in the code and the RPC output, could ancestorsize, ancestorfees, and ancestorcount be snakecased?\n\n@jonatack No, we already have these names in the RPC interface as-is (see `MempoolEntryDescription`).",https://github.com/bitcoin/bitcoin/pull/12677#issuecomment-671093215,671093215,
MarcoFalke,2020-08-11T05:00:42Z,Should be good to go in after another rebase,https://github.com/bitcoin/bitcoin/pull/12677#issuecomment-671725737,671725737,
JeremyRubin,2020-08-11T05:17:57Z,"To be annoying -- slight concept nack without more info.\n\n1) The field should be named mempool_ancestors, as there is a distinct concept of the ancestry of a coin (e.g., max distance to a coinbase txn).\n2) If the desired thing to know is if a transaction can support more descendants, we should return the field as n_descendants_placeable_in_mempool or something. The ancestor stats themselves ",https://github.com/bitcoin/bitcoin/pull/12677#issuecomment-671730834,671730834,
luke-jr,2020-08-20T02:45:44Z,Rebased,https://github.com/bitcoin/bitcoin/pull/12677#issuecomment-676878187,676878187,
luke-jr,2021-08-02T16:51:55Z,rebased,https://github.com/bitcoin/bitcoin/pull/12677#issuecomment-891176793,891176793,
naumenkogs,2021-09-03T12:50:07Z,utACK 7c0b6d6919e88d6f9e49cde70dc0713a1e4bdc74,https://github.com/bitcoin/bitcoin/pull/12677#issuecomment-912513738,912513738,
luke-jr,2021-09-16T20:36:30Z,"Addressed various nits, needs re-ACKs",https://github.com/bitcoin/bitcoin/pull/12677#issuecomment-921227054,921227054,
laanwj,2021-09-16T21:12:47Z,Diff LGTM https://github.com/bitcoin/bitcoin/compare/7c0b6d6..6cb60f3,https://github.com/bitcoin/bitcoin/pull/12677#issuecomment-921248357,921248357,
prayank23,2021-09-17T13:37:07Z,reACK https://github.com/bitcoin/bitcoin/commit/6cb60f3e6d652ffa4cf570426a7cf1f690d15c45,https://github.com/bitcoin/bitcoin/pull/12677#issuecomment-921803612,921803612,
fjahr,2021-09-18T09:54:52Z,Code review re-ACK 6cb60f3e6d652ffa4cf570426a7cf1f690d15c45,https://github.com/bitcoin/bitcoin/pull/12677#issuecomment-922251312,922251312,
kiminuo,2021-09-19T09:45:20Z,"ACK [6cb60f3](https://github.com/bitcoin/bitcoin/commit/6cb60f3e6d652ffa4cf570426a7cf1f690d15c45)\n\n",https://github.com/bitcoin/bitcoin/pull/12677#issuecomment-922445225,922445225,
sipa,2021-09-20T19:56:13Z,"Shouldn't `""ancestorfees""` use `ValueFromAmount` here?",https://github.com/bitcoin/bitcoin/pull/12677#issuecomment-923248524,923248524,
promag,2018-03-12T23:47:11Z,"Not sure if this is correct, if `out.nDepth > 0` then `out.tx` should not be in the mempool right? Or should the condition be `out.nDepth == 0`?",https://github.com/bitcoin/bitcoin/pull/12677#discussion_r173980849,173980849,src/wallet/rpcwallet.cpp
conscott,2018-03-13T05:13:09Z,"Should this also add the no ancestor case?\n```\n{\n    ...\n    ""ancestorcount"": 0,\n    ""ancestorsize"": 0,\n    ""ancestorfees"": 0,\n    ....\n}\n```\nIf the aim is to avoid adding unnecessary size to responses, then the help message above might mention these fields will only print if ancestors exist. ",https://github.com/bitcoin/bitcoin/pull/12677#discussion_r174018340,174018340,src/wallet/rpcwallet.cpp
MarcoFalke,2019-10-18T12:35:37Z,"They are only present (optional) when unconfirmed? Should mention that, or make then unconditional.",https://github.com/bitcoin/bitcoin/pull/12677#discussion_r336467900,336467900,src/wallet/rpcwallet.cpp
MarcoFalke,2019-10-18T12:37:54Z,I don't think you can replace an assignment with `assert_equal`,https://github.com/bitcoin/bitcoin/pull/12677#discussion_r336468745,336468745,test/functional/mempool_packages.py
MarcoFalke,2019-10-18T12:38:08Z,This will result in a run time error,https://github.com/bitcoin/bitcoin/pull/12677#discussion_r336468852,336468852,test/functional/mempool_packages.py
luke-jr,2019-10-18T14:54:07Z,ancestor* fields always include the transaction itself,https://github.com/bitcoin/bitcoin/pull/12677#discussion_r336532551,336532551,src/wallet/rpcwallet.cpp
luke-jr,2019-10-18T14:54:53Z,"It's calculated above: https://github.com/bitcoin/bitcoin/pull/12677/files#diff-a01d25e7f69f4199a300a53bb4ff9957R56\n\n(but yes, I need to update the size one to vsize...)",https://github.com/bitcoin/bitcoin/pull/12677#discussion_r336532925,336532925,test/functional/mempool_packages.py
luke-jr,2019-10-18T21:05:55Z,Fixed,https://github.com/bitcoin/bitcoin/pull/12677#discussion_r336675751,336675751,test/functional/mempool_packages.py
luke-jr,2019-10-18T21:12:12Z,Fixed,https://github.com/bitcoin/bitcoin/pull/12677#discussion_r336677829,336677829,src/wallet/rpcwallet.cpp
jonatack,2020-06-19T12:44:44Z,"2299b1f\n```suggestion\n            assert_equal(this_unspent['ancestorfees'], ancestor_fees * COIN)\n```",https://github.com/bitcoin/bitcoin/pull/12677#discussion_r442818699,442818699,test/functional/mempool_packages.py
jonatack,2020-06-19T12:49:16Z,"f65a341 nit: `s/total fees/the total fees/`\n\nwhile touching this help, maybe `s/the/The/` for the listunspent txid, vout, address, and scriptPubKey fields",https://github.com/bitcoin/bitcoin/pull/12677#discussion_r442820818,442820818,src/wallet/rpcwallet.cpp
jonatack,2020-06-19T12:58:07Z,Is using `Optional` preferred nowadays for params that can be `{}`?,https://github.com/bitcoin/bitcoin/pull/12677#discussion_r442825225,442825225,src/interfaces/chain.h
instagibbs,2020-06-19T13:01:51Z,might be a good meeting topic?,https://github.com/bitcoin/bitcoin/pull/12677#discussion_r442827069,442827069,src/interfaces/chain.h
instagibbs,2020-06-19T13:06:34Z,`AvailableCoins` filters negative values but that takes a little code snooping to assure the reader. Can we make it easier on the reader and make this `out.nDepth == 0`?,https://github.com/bitcoin/bitcoin/pull/12677#discussion_r442829410,442829410,src/wallet/rpcwallet.cpp
MarcoFalke,2020-06-19T13:07:39Z,"I think for optional return values it is preferable to pass by pointer. Otherwise the caller code will read clumsy like\n\n```cpp\nOptional<int> foo;\nGetInt(foo);\nstd::cout << * foo << std::endl;\n```\n\nAs opposed to a simple\n\n```cpp\nint foo;\nGetInt(&foo);\nstd::cout << foo << std::endl;",https://github.com/bitcoin/bitcoin/pull/12677#discussion_r442829947,442829947,src/interfaces/chain.h
instagibbs,2020-06-19T13:12:16Z,add a quick test making sure these fields don't exist when transaction confirmed/not in mempool?,https://github.com/bitcoin/bitcoin/pull/12677#discussion_r442832153,442832153,test/functional/mempool_packages.py
jonatack,2020-06-19T13:27:07Z,"> add a quick test making sure these fields don't exist when transaction confirmed/not in mempool?\n\nGood idea",https://github.com/bitcoin/bitcoin/pull/12677#discussion_r442839658,442839658,test/functional/mempool_packages.py
sipa,2020-07-02T01:15:12Z,Is this include still needed?,https://github.com/bitcoin/bitcoin/pull/12677#discussion_r448695141,448695141,src/wallet/rpcwallet.cpp
promag,2020-07-05T23:35:40Z,Indeed not needed.,https://github.com/bitcoin/bitcoin/pull/12677#discussion_r449931245,449931245,src/wallet/rpcwallet.cpp
luke-jr,2020-08-09T19:00:21Z,That doesn't change it at all... Negative values would be handled the same.,https://github.com/bitcoin/bitcoin/pull/12677#discussion_r467617028,467617028,src/wallet/rpcwallet.cpp
fjahr,2021-08-24T22:54:47Z,nit: `static_cast<uint64_t>(ancestor_count)` would be preferred,https://github.com/bitcoin/bitcoin/pull/12677#discussion_r695270651,695270651,src/wallet/rpcwallet.cpp
fjahr,2021-08-24T23:02:26Z,"nit: I think there is a slight convention in the existing rpc help to append the conditional at the end, like: ""This thing shows XYZ (if available)"" (I grepped for available). So I would slightly prefer this and the following to be rewritten something like this:\n\n```\n""The number of in-mempool ancestor transactions, including this one (if the transaction is in the mempool)""\n```",https://github.com/bitcoin/bitcoin/pull/12677#discussion_r695273673,695273673,src/wallet/rpcwallet.cpp
fjahr,2021-08-24T23:29:33Z,"This `i` shadows the `i` from the loop above.\n\nI think also this could be a bit more efficient by using the address filter of `listunspent` but it's also not super readable so feel free to ignore:\n```\n            filter_addr = witnesstx['vout'][0]['scriptPubKey']['address']\n            this_unspent = self.nodes[0].listunspent(minconf=0, addresses=[filter_addr])[0]\n```\n\nMaybe also a",https://github.com/bitcoin/bitcoin/pull/12677#discussion_r695283574,695283574,test/functional/mempool_packages.py
fjahr,2021-08-24T23:32:33Z,suggestion: s/in some cases/for each transaction output that is still in the mempool/,https://github.com/bitcoin/bitcoin/pull/12677#discussion_r695284647,695284647,doc/release-notes-12677.md
MarcoFalke,2021-08-26T08:39:37Z,"> nit: I think there is a slight convention in the existing rpc help\n\nThis part of the help is now auto-generated:\n\n```suggestion\n                            {RPCResult::Type::NUM, ""ancestorcount"", /* optional */ true, ""If transaction is in the mempool, the number of in-mempool ancestor transactions (including this one)""},\n```",https://github.com/bitcoin/bitcoin/pull/12677#discussion_r696418778,696418778,src/wallet/rpcwallet.cpp
naumenkogs,2021-09-03T12:36:13Z,"Perhaps a more general question: I was always confused that ""ancestors"" includes +1 for the transaction itself.\nHere we're continuing this pattern by including the parent.  Perhaps at least we could name new variables something like `txAndAncestorsSize`?",https://github.com/bitcoin/bitcoin/pull/12677#discussion_r701855886,701855886,src/txmempool.cpp
achow101,2021-09-13T19:12:11Z,"In 47fdd185f1dca3f0a92b1b67c4523053ed2fc1a3 "" RPC: Add ancestor{count,size,fees} to listunspent output""\n\nThis will output the fees in satoshis which is highly unintuitive, especially since the documentation does not say so. Everywhere else we have amounts in the RPCs, they are formatted for output with `ValueFromAmount` which converts them to the correct decimal form for output.",https://github.com/bitcoin/bitcoin/pull/12677#discussion_r707609663,707609663,src/wallet/rpcwallet.cpp
luke-jr,2021-09-13T20:03:39Z,"Not everywhere, no, and the only other location of ancestorfees specifically also uses satoshis.",https://github.com/bitcoin/bitcoin/pull/12677#discussion_r707642555,707642555,src/wallet/rpcwallet.cpp
achow101,2021-09-16T19:10:23Z,"The docs should at least indicate the units then. In most places the term ""fee"" is used, the expected unit is BTC, not satoshis. Additionally, the one place that `ancestorfees` is used is deprecated, and it's replacement uses BTC rather than satoshis. Also just because we do that somewhere else doesn't make it good or not unintuitive.",https://github.com/bitcoin/bitcoin/pull/12677#discussion_r710404427,710404427,src/wallet/rpcwallet.cpp
kiminuo,2021-09-19T08:55:12Z,I wonder whether we should update documentation on L176 too to reflect the change here.,https://github.com/bitcoin/bitcoin/pull/12677#discussion_r711710032,711710032,src/interfaces/chain.h
kiminuo,2021-09-19T09:14:13Z,"When testing this, I can see `""ancestorfees"": 164` in my output. Is it correct to mark the result type as `RPCResult::Type::STR_AMOUNT` here? I would probably expect `RPCResult::Type::NUM` given that the amount is in satoshis.\n\nMore complete output on my machine:\n\n```\n[\n  {\n    ""txid"": ""<txid>"",\n    ""vout"": 1,\n    ""address"": ""<address>"",\n    ""label"": """",\n    ""scriptPubKey"": """,https://github.com/bitcoin/bitcoin/pull/12677#discussion_r711712521,711712521,src/wallet/rpcwallet.cpp
kiminuo,2021-09-19T09:23:55Z,"https://github.com/bitcoin/bitcoin/pull/22903 makes me wonder whether one should change: \n\n`/* optional */ true` -> `/* optional= */ true`",https://github.com/bitcoin/bitcoin/pull/12677#discussion_r711713810,711713810,src/wallet/rpcwallet.cpp
kiminuo,2021-09-19T09:25:08Z,(Good point),https://github.com/bitcoin/bitcoin/pull/12677#discussion_r711713896,711713896,src/txmempool.cpp
jonatack,2021-09-20T20:00:54Z,Missing PR number at the end: `s/mempool./mempool. (#12677)`,https://github.com/bitcoin/bitcoin/pull/12677#discussion_r712473525,712473525,doc/release-notes-12677.md
jonatack,2021-09-20T20:02:08Z,"function params naming: `s/ancestorsize/ancestor_size/`, idem for ancestorfees",https://github.com/bitcoin/bitcoin/pull/12677#discussion_r712474267,712474267,src/node/interfaces.cpp
jonatack,2021-09-20T20:03:53Z,"These three new fields should be snakecase, e.g. `s/ancestorcount/ancestor_count/`.\n\nShould they use `UniValue ValueFromAmount()` for the amount to print? in which case the units would need to be listed in the help as BTC instead of sat.",https://github.com/bitcoin/bitcoin/pull/12677#discussion_r712475358,712475358,src/wallet/rpcwallet.cpp
