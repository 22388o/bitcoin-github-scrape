[
  {
    "sha": "36ae37a9f910922954d48ed1f3f2177d8b227205",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNmFlMzdhOWY5MTA5MjI5NTRkNDhlZDFmM2YyMTc3ZDhiMjI3MjA1",
    "commit": {
      "author": {
        "name": "Bob McElrath",
        "email": "bob_git@mcelrath.org",
        "date": "2016-07-06T23:46:46Z"
      },
      "committer": {
        "name": "Bob McElrath",
        "email": "bob_git@mcelrath.org",
        "date": "2016-07-06T23:46:46Z"
      },
      "message": "Rename CTxinWitness -> CTxInWitness",
      "tree": {
        "sha": "ce5670209db9f7c01e242640a6cd429dcad54d21",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ce5670209db9f7c01e242640a6cd429dcad54d21"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/36ae37a9f910922954d48ed1f3f2177d8b227205",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36ae37a9f910922954d48ed1f3f2177d8b227205",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/36ae37a9f910922954d48ed1f3f2177d8b227205",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36ae37a9f910922954d48ed1f3f2177d8b227205/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "91abb77970f47b1f6166e564bc695ed30c75bb63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91abb77970f47b1f6166e564bc695ed30c75bb63",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91abb77970f47b1f6166e564bc695ed30c75bb63"
      }
    ],
    "stats": {
      "total": 80,
      "additions": 40,
      "deletions": 40
    },
    "files": [
      {
        "sha": "8e4bc989b8eb733163d278dda4cc05a37a757ee8",
        "filename": "qa/rpc-tests/p2p-segwit.py",
        "status": "modified",
        "additions": 24,
        "deletions": 24,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36ae37a9f910922954d48ed1f3f2177d8b227205/qa/rpc-tests/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36ae37a9f910922954d48ed1f3f2177d8b227205/qa/rpc-tests/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-segwit.py?ref=36ae37a9f910922954d48ed1f3f2177d8b227205",
        "patch": "@@ -252,7 +252,7 @@ def test_unnecessary_witness_before_segwit_activation(self):\n         tx = CTransaction()\n         tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n         tx.vout.append(CTxOut(self.utxo[0].nValue-1000, CScript([OP_TRUE])))\n-        tx.wit.vtxinwit.append(CTxinWitness())\n+        tx.wit.vtxinwit.append(CTxInWitness())\n         tx.wit.vtxinwit[0].scriptWitness.stack = [CScript([CScriptNum(1)])]\n \n         # Verify the hash with witness differs from the txid\n@@ -362,7 +362,7 @@ def test_witness_commitments(self):\n         tx2 = CTransaction()\n         tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\n         tx2.vout.append(CTxOut(tx.vout[0].nValue-1000, witness_program))\n-        tx2.wit.vtxinwit.append(CTxinWitness())\n+        tx2.wit.vtxinwit.append(CTxInWitness())\n         tx2.wit.vtxinwit[0].scriptWitness.stack = [witness_program]\n         tx2.rehash()\n \n@@ -489,7 +489,7 @@ def test_witness_block_size(self):\n             child_tx.vin.append(CTxIn(COutPoint(parent_tx.sha256, i), b\"\"))\n         child_tx.vout = [CTxOut(value - 100000, CScript([OP_TRUE]))]\n         for i in range(NUM_OUTPUTS):\n-            child_tx.wit.vtxinwit.append(CTxinWitness())\n+            child_tx.wit.vtxinwit.append(CTxInWitness())\n             child_tx.wit.vtxinwit[-1].scriptWitness.stack = [b'a'*195]*(2*NUM_DROPS) + [witness_program]\n         child_tx.rehash()\n         self.update_witness_block_with_transactions(block, [parent_tx, child_tx])\n@@ -584,7 +584,7 @@ def test_extra_witness_data(self):\n         tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n         tx.vout.append(CTxOut(self.utxo[0].nValue-2000, scriptPubKey))\n         tx.vout.append(CTxOut(1000, CScript([OP_TRUE]))) # non-witness output\n-        tx.wit.vtxinwit.append(CTxinWitness())\n+        tx.wit.vtxinwit.append(CTxInWitness())\n         tx.wit.vtxinwit[0].scriptWitness.stack = [CScript([])]\n         tx.rehash()\n         self.update_witness_block_with_transactions(block, [tx])\n@@ -607,7 +607,7 @@ def test_extra_witness_data(self):\n         tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\")) # witness output\n         tx2.vin.append(CTxIn(COutPoint(tx.sha256, 1), b\"\")) # non-witness\n         tx2.vout.append(CTxOut(tx.vout[0].nValue, CScript([OP_TRUE])))\n-        tx2.wit.vtxinwit.extend([CTxinWitness(), CTxinWitness()])\n+        tx2.wit.vtxinwit.extend([CTxInWitness(), CTxInWitness()])\n         tx2.wit.vtxinwit[0].scriptWitness.stack = [ CScript([CScriptNum(1)]), CScript([CScriptNum(1)]), witness_program ]\n         tx2.wit.vtxinwit[1].scriptWitness.stack = [ CScript([OP_TRUE]) ]\n \n@@ -663,7 +663,7 @@ def test_max_witness_push_length(self):\n         tx2 = CTransaction()\n         tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\n         tx2.vout.append(CTxOut(tx.vout[0].nValue-1000, CScript([OP_TRUE])))\n-        tx2.wit.vtxinwit.append(CTxinWitness())\n+        tx2.wit.vtxinwit.append(CTxInWitness())\n         # First try a 521-byte stack element\n         tx2.wit.vtxinwit[0].scriptWitness.stack = [ b'a'*(MAX_SCRIPT_ELEMENT_SIZE+1), witness_program ]\n         tx2.rehash()\n@@ -705,7 +705,7 @@ def test_max_witness_program_length(self):\n         tx2 = CTransaction()\n         tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\n         tx2.vout.append(CTxOut(tx.vout[0].nValue-1000, CScript([OP_TRUE])))\n-        tx2.wit.vtxinwit.append(CTxinWitness())\n+        tx2.wit.vtxinwit.append(CTxInWitness())\n         tx2.wit.vtxinwit[0].scriptWitness.stack = [b'a']*44 + [long_witness_program]\n         tx2.rehash()\n \n@@ -782,7 +782,7 @@ def serialize_with_witness(self):\n \n         # First try using a too long vtxinwit\n         for i in range(11):\n-            tx2.wit.vtxinwit.append(CTxinWitness())\n+            tx2.wit.vtxinwit.append(CTxInWitness())\n             tx2.wit.vtxinwit[i].scriptWitness.stack = [b'a', witness_program]\n \n         block = self.build_next_block()\n@@ -798,7 +798,7 @@ def serialize_with_witness(self):\n         self.test_node.test_witness_block(block, accepted=False)\n \n         # Now make one of the intermediate witnesses be incorrect\n-        tx2.wit.vtxinwit.append(CTxinWitness())\n+        tx2.wit.vtxinwit.append(CTxInWitness())\n         tx2.wit.vtxinwit[-1].scriptWitness.stack = [b'a', witness_program]\n         tx2.wit.vtxinwit[5].scriptWitness.stack = [ witness_program ]\n \n@@ -825,7 +825,7 @@ def test_witness_tx_relay_before_segwit_activation(self):\n         tx = CTransaction()\n         tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n         tx.vout.append(CTxOut(self.utxo[0].nValue-1000, CScript([OP_TRUE])))\n-        tx.wit.vtxinwit.append(CTxinWitness())\n+        tx.wit.vtxinwit.append(CTxInWitness())\n         tx.wit.vtxinwit[0].scriptWitness.stack = [ b'a' ]\n         tx.rehash()\n \n@@ -885,7 +885,7 @@ def test_tx_relay_after_segwit_activation(self):\n         tx = CTransaction()\n         tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n         tx.vout.append(CTxOut(self.utxo[0].nValue-1000, CScript([OP_TRUE])))\n-        tx.wit.vtxinwit.append(CTxinWitness())\n+        tx.wit.vtxinwit.append(CTxInWitness())\n         tx.wit.vtxinwit[0].scriptWitness.stack = [ b'a' ]\n         tx.rehash()\n \n@@ -914,7 +914,7 @@ def test_tx_relay_after_segwit_activation(self):\n         tx3 = CTransaction()\n         tx3.vin.append(CTxIn(COutPoint(tx2.sha256, 0), b\"\"))\n         tx3.vout.append(CTxOut(tx2.vout[0].nValue-1000, CScript([OP_TRUE])))\n-        tx3.wit.vtxinwit.append(CTxinWitness())\n+        tx3.wit.vtxinwit.append(CTxInWitness())\n         tx3.wit.vtxinwit[0].scriptWitness.stack = [CScript([CScriptNum(1)]), witness_program ]\n         tx3.rehash()\n \n@@ -1087,7 +1087,7 @@ def test_segwit_versions(self):\n         tx2 = CTransaction()\n         tx2.vin = [CTxIn(COutPoint(tx.sha256, 0), b\"\")]\n         tx2.vout = [CTxOut(tx.vout[0].nValue-1000, scriptPubKey)]\n-        tx2.wit.vtxinwit.append(CTxinWitness())\n+        tx2.wit.vtxinwit.append(CTxInWitness())\n         tx2.wit.vtxinwit[0].scriptWitness.stack = [ witness_program ]\n         tx2.rehash()\n         # Gets accepted to test_node, because standardness of outputs isn't\n@@ -1102,7 +1102,7 @@ def test_segwit_versions(self):\n         total_value = 0\n         for i in temp_utxo:\n             tx3.vin.append(CTxIn(COutPoint(i.sha256, i.n), b\"\"))\n-            tx3.wit.vtxinwit.append(CTxinWitness())\n+            tx3.wit.vtxinwit.append(CTxInWitness())\n             total_value += i.nValue\n         tx3.wit.vtxinwit[-1].scriptWitness.stack = [witness_program]\n         tx3.vout.append(CTxOut(total_value - 1000, CScript([OP_TRUE])))\n@@ -1140,7 +1140,7 @@ def test_premature_coinbase_witness_spend(self):\n         spend_tx = CTransaction()\n         spend_tx.vin = [CTxIn(COutPoint(block.vtx[0].sha256, 0), b\"\")]\n         spend_tx.vout = [CTxOut(block.vtx[0].vout[0].nValue, witness_program)]\n-        spend_tx.wit.vtxinwit.append(CTxinWitness())\n+        spend_tx.wit.vtxinwit.append(CTxInWitness())\n         spend_tx.wit.vtxinwit[0].scriptWitness.stack = [ witness_program ]\n         spend_tx.rehash()\n \n@@ -1200,7 +1200,7 @@ def sign_P2PK_witness_input(script, txTo, inIdx, hashtype, value, key):\n                 tx = CTransaction()\n                 tx.vin.append(CTxIn(COutPoint(prev_utxo.sha256, prev_utxo.n), b\"\"))\n                 tx.vout.append(CTxOut(prev_utxo.nValue - 1000, scriptPubKey))\n-                tx.wit.vtxinwit.append(CTxinWitness())\n+                tx.wit.vtxinwit.append(CTxInWitness())\n                 # Too-large input value\n                 sign_P2PK_witness_input(witness_program, tx, 0, hashtype, prev_utxo.nValue+1, key)\n                 self.update_witness_block_with_transactions(block, [tx])\n@@ -1233,7 +1233,7 @@ def sign_P2PK_witness_input(script, txTo, inIdx, hashtype, value, key):\n         split_value = prev_utxo.nValue // NUM_TESTS\n         for i in range(NUM_TESTS):\n             tx.vout.append(CTxOut(split_value, scriptPubKey))\n-        tx.wit.vtxinwit.append(CTxinWitness())\n+        tx.wit.vtxinwit.append(CTxInWitness())\n         sign_P2PK_witness_input(witness_program, tx, 0, SIGHASH_ALL, prev_utxo.nValue, key)\n         for i in range(NUM_TESTS):\n             temp_utxos.append(UTXO(tx.sha256, i, split_value))\n@@ -1255,7 +1255,7 @@ def sign_P2PK_witness_input(script, txTo, inIdx, hashtype, value, key):\n             total_value = 0\n             for i in range(num_inputs):\n                 tx.vin.append(CTxIn(COutPoint(temp_utxos[i].sha256, temp_utxos[i].n), b\"\"))\n-                tx.wit.vtxinwit.append(CTxinWitness())\n+                tx.wit.vtxinwit.append(CTxInWitness())\n                 total_value += temp_utxos[i].nValue\n             split_value = total_value // num_outputs\n             for i in range(num_outputs):\n@@ -1295,7 +1295,7 @@ def sign_P2PK_witness_input(script, txTo, inIdx, hashtype, value, key):\n         tx = CTransaction()\n         tx.vin.append(CTxIn(COutPoint(temp_utxos[0].sha256, temp_utxos[0].n), b\"\"))\n         tx.vout.append(CTxOut(temp_utxos[0].nValue, scriptPKH))\n-        tx.wit.vtxinwit.append(CTxinWitness())\n+        tx.wit.vtxinwit.append(CTxInWitness())\n         sign_P2PK_witness_input(witness_program, tx, 0, SIGHASH_ALL, temp_utxos[0].nValue, key)\n         tx2 = CTransaction()\n         tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\n@@ -1313,7 +1313,7 @@ def sign_P2PK_witness_input(script, txTo, inIdx, hashtype, value, key):\n \n         # Move the signature to the witness.\n         block.vtx.pop()\n-        tx2.wit.vtxinwit.append(CTxinWitness())\n+        tx2.wit.vtxinwit.append(CTxInWitness())\n         tx2.wit.vtxinwit[0].scriptWitness.stack = [signature, pubkey]\n         tx2.vin[0].scriptSig = b\"\"\n         tx2.rehash()\n@@ -1333,7 +1333,7 @@ def sign_P2PK_witness_input(script, txTo, inIdx, hashtype, value, key):\n             # the signatures as we go.\n             tx.vin.append(CTxIn(COutPoint(i.sha256, i.n), b\"\"))\n             tx.vout.append(CTxOut(i.nValue, CScript([OP_TRUE])))\n-            tx.wit.vtxinwit.append(CTxinWitness())\n+            tx.wit.vtxinwit.append(CTxInWitness())\n             sign_P2PK_witness_input(witness_program, tx, index, SIGHASH_SINGLE|SIGHASH_ANYONECANPAY, i.nValue, key)\n             index += 1\n         block = self.build_next_block()\n@@ -1393,7 +1393,7 @@ def test_p2sh_witness(self, segwit_activated):\n         # segwit activates.\n         spend_tx.vin[0].scriptSig = scriptSig\n         spend_tx.rehash()\n-        spend_tx.wit.vtxinwit.append(CTxinWitness())\n+        spend_tx.wit.vtxinwit.append(CTxInWitness())\n         spend_tx.wit.vtxinwit[0].scriptWitness.stack = [ b'a', witness_program ]\n \n         # Verify mempool acceptance\n@@ -1499,7 +1499,7 @@ def test_witness_sigops(self):\n         total_value = 0\n         for i in range(outputs-1):\n             tx2.vin.append(CTxIn(COutPoint(tx.sha256, i), b\"\"))\n-            tx2.wit.vtxinwit.append(CTxinWitness())\n+            tx2.wit.vtxinwit.append(CTxInWitness())\n             tx2.wit.vtxinwit[-1].scriptWitness.stack = [ witness_program ]\n             total_value += tx.vout[i].nValue\n         tx2.wit.vtxinwit[-1].scriptWitness.stack = [ witness_program_toomany ] \n@@ -1540,7 +1540,7 @@ def test_witness_sigops(self):\n         block_5 = self.build_next_block()\n         tx2.vout.pop()\n         tx2.vin.append(CTxIn(COutPoint(tx.sha256, outputs-1), b\"\"))\n-        tx2.wit.vtxinwit.append(CTxinWitness())\n+        tx2.wit.vtxinwit.append(CTxInWitness())\n         tx2.wit.vtxinwit[-1].scriptWitness.stack = [ witness_program_justright ]\n         tx2.rehash()\n         self.update_witness_block_with_transactions(block_5, [tx2])"
      },
      {
        "sha": "f69958823c9d9d8ecc5134a772d408647ccb26d3",
        "filename": "qa/rpc-tests/test_framework/blocktools.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36ae37a9f910922954d48ed1f3f2177d8b227205/qa/rpc-tests/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36ae37a9f910922954d48ed1f3f2177d8b227205/qa/rpc-tests/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/blocktools.py?ref=36ae37a9f910922954d48ed1f3f2177d8b227205",
        "patch": "@@ -34,7 +34,7 @@ def add_witness_commitment(block, nonce=0):\n     witness_root = block.calc_witness_merkle_root()\n     witness_commitment = uint256_from_str(hash256(ser_uint256(witness_root)+ser_uint256(witness_nonce)))\n     # witness_nonce should go to coinbase witness.\n-    block.vtx[0].wit.vtxinwit = [CTxinWitness()]\n+    block.vtx[0].wit.vtxinwit = [CTxInWitness()]\n     block.vtx[0].wit.vtxinwit[0].scriptWitness.stack = [ser_uint256(witness_nonce)]\n \n     # witness commitment is the last OP_RETURN output in coinbase"
      },
      {
        "sha": "cdd5292cd67b82703d8d206df355a080dbf6fb78",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36ae37a9f910922954d48ed1f3f2177d8b227205/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36ae37a9f910922954d48ed1f3f2177d8b227205/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=36ae37a9f910922954d48ed1f3f2177d8b227205",
        "patch": "@@ -419,7 +419,7 @@ def is_null(self):\n         return True\n \n \n-class CTxinWitness(object):\n+class CTxInWitness(object):\n     def __init__(self):\n         self.scriptWitness = CScriptWitness()\n \n@@ -497,7 +497,7 @@ def deserialize(self, f):\n         else:\n             self.vout = deser_vector(f, CTxOut)\n         if flags != 0:\n-            self.wit.vtxinwit = [CTxinWitness()]*len(self.vin)\n+            self.wit.vtxinwit = [CTxInWitness()]*len(self.vin)\n             self.wit.deserialize(f)\n         self.nLockTime = struct.unpack(\"<I\", f.read(4))[0]\n         self.sha256 = None\n@@ -529,7 +529,7 @@ def serialize_with_witness(self):\n                 # vtxinwit must have the same length as vin\n                 self.wit.vtxinwit = self.wit.vtxinwit[:len(self.vin)]\n                 for i in range(len(self.wit.vtxinwit), len(self.vin)):\n-                    self.wit.vtxinwit.append(CTxinWitness())\n+                    self.wit.vtxinwit.append(CTxInWitness())\n             r += self.wit.serialize()\n         r += struct.pack(\"<I\", self.nLockTime)\n         return r"
      },
      {
        "sha": "b8e0f08bbf7beca574bc21ce8e853b64049945a5",
        "filename": "src/core_memusage.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36ae37a9f910922954d48ed1f3f2177d8b227205/src/core_memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36ae37a9f910922954d48ed1f3f2177d8b227205/src/core_memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_memusage.h?ref=36ae37a9f910922954d48ed1f3f2177d8b227205",
        "patch": "@@ -33,13 +33,13 @@ static inline size_t RecursiveDynamicUsage(const CScriptWitness& scriptWit) {\n     return mem;\n }\n \n-static inline size_t RecursiveDynamicUsage(const CTxinWitness& txinwit) {\n+static inline size_t RecursiveDynamicUsage(const CTxInWitness& txinwit) {\n     return RecursiveDynamicUsage(txinwit.scriptWitness);\n }\n \n static inline size_t RecursiveDynamicUsage(const CTxWitness& txwit) {\n     size_t mem = memusage::DynamicUsage(txwit.vtxinwit);\n-    for (std::vector<CTxinWitness>::const_iterator it = txwit.vtxinwit.begin(); it != txwit.vtxinwit.end(); it++) {\n+    for (std::vector<CTxInWitness>::const_iterator it = txwit.vtxinwit.begin(); it != txwit.vtxinwit.end(); it++) {\n         mem += RecursiveDynamicUsage(*it);\n     }\n     return mem;"
      },
      {
        "sha": "8a2d5dd22c8dea1762edfbdde8529509f4f48a33",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36ae37a9f910922954d48ed1f3f2177d8b227205/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36ae37a9f910922954d48ed1f3f2177d8b227205/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=36ae37a9f910922954d48ed1f3f2177d8b227205",
        "patch": "@@ -213,7 +213,7 @@ class CTxOut\n     std::string ToString() const;\n };\n \n-class CTxinWitness\n+class CTxInWitness\n {\n public:\n     CScriptWitness scriptWitness;\n@@ -228,14 +228,14 @@ class CTxinWitness\n \n     bool IsNull() const { return scriptWitness.IsNull(); }\n \n-    CTxinWitness() { }\n+    CTxInWitness() { }\n };\n \n class CTxWitness\n {\n public:\n     /** In case vtxinwit is missing, all entries are treated as if they were empty CTxInWitnesses */\n-    std::vector<CTxinWitness> vtxinwit;\n+    std::vector<CTxInWitness> vtxinwit;\n \n     ADD_SERIALIZE_METHODS;\n "
      },
      {
        "sha": "e8a63ae60ca81b1237ace8b548a9d778bad25d38",
        "filename": "src/test/sigopcount_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36ae37a9f910922954d48ed1f3f2177d8b227205/src/test/sigopcount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36ae37a9f910922954d48ed1f3f2177d8b227205/src/test/sigopcount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sigopcount_tests.cpp?ref=36ae37a9f910922954d48ed1f3f2177d8b227205",
        "patch": "@@ -84,7 +84,7 @@ ScriptError VerifyWithFlag(const CTransaction& output, const CMutableTransaction\n  * and witness such that spendingTx spends output zero of creationTx.\n  * Also inserts creationTx's output into the coins view.\n  */\n-void BuildTxs(CMutableTransaction& spendingTx, CCoinsViewCache& coins, CMutableTransaction& creationTx, const CScript& scriptPubKey, const CScript& scriptSig, const CTxinWitness& witness)\n+void BuildTxs(CMutableTransaction& spendingTx, CCoinsViewCache& coins, CMutableTransaction& creationTx, const CScript& scriptPubKey, const CScript& scriptSig, const CTxInWitness& witness)\n {\n     creationTx.nVersion = 1;\n     creationTx.vin.resize(1);\n@@ -133,7 +133,7 @@ BOOST_AUTO_TEST_CASE(GetTxSigOpCost)\n         // Do not use a valid signature to avoid using wallet operations.\n         CScript scriptSig = CScript() << OP_0 << OP_0;\n \n-        BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, CTxinWitness());\n+        BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, CTxInWitness());\n         // Legacy counting only includes signature operations in scriptSigs and scriptPubKeys\n         // of a transaction and does not take the actual executed sig operations into account.\n         // spendingTx in itself does not contain a signature operation.\n@@ -151,7 +151,7 @@ BOOST_AUTO_TEST_CASE(GetTxSigOpCost)\n         CScript scriptPubKey = GetScriptForDestination(CScriptID(redeemScript));\n         CScript scriptSig = CScript() << OP_0 << OP_0 << ToByteVector(redeemScript);\n \n-        BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, CTxinWitness());\n+        BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, CTxInWitness());\n         assert(GetTransactionSigOpCost(CTransaction(spendingTx), coins, flags) == 2 * WITNESS_SCALE_FACTOR);\n         assert(VerifyWithFlag(creationTx, spendingTx, flags) == SCRIPT_ERR_CHECKMULTISIGVERIFY);\n     }\n@@ -161,7 +161,7 @@ BOOST_AUTO_TEST_CASE(GetTxSigOpCost)\n         CScript p2pk = CScript() << ToByteVector(pubkey) << OP_CHECKSIG;\n         CScript scriptPubKey = GetScriptForWitness(p2pk);\n         CScript scriptSig = CScript();\n-        CTxinWitness witness;\n+        CTxInWitness witness;\n         CScriptWitness scriptWitness;\n         scriptWitness.stack.push_back(vector<unsigned char>(0));\n         scriptWitness.stack.push_back(vector<unsigned char>(0));\n@@ -193,7 +193,7 @@ BOOST_AUTO_TEST_CASE(GetTxSigOpCost)\n         CScript scriptSig = GetScriptForWitness(p2pk);\n         CScript scriptPubKey = GetScriptForDestination(CScriptID(scriptSig));\n         scriptSig = CScript() << ToByteVector(scriptSig);\n-        CTxinWitness witness;\n+        CTxInWitness witness;\n         CScriptWitness scriptWitness;\n         scriptWitness.stack.push_back(vector<unsigned char>(0));\n         scriptWitness.stack.push_back(vector<unsigned char>(0));\n@@ -209,7 +209,7 @@ BOOST_AUTO_TEST_CASE(GetTxSigOpCost)\n         CScript witnessScript = CScript() << 1 << ToByteVector(pubkey) << ToByteVector(pubkey) << 2 << OP_CHECKMULTISIGVERIFY;\n         CScript scriptPubKey = GetScriptForWitness(witnessScript);\n         CScript scriptSig = CScript();\n-        CTxinWitness witness;\n+        CTxInWitness witness;\n         CScriptWitness scriptWitness;\n         scriptWitness.stack.push_back(vector<unsigned char>(0));\n         scriptWitness.stack.push_back(vector<unsigned char>(0));\n@@ -228,7 +228,7 @@ BOOST_AUTO_TEST_CASE(GetTxSigOpCost)\n         CScript redeemScript = GetScriptForWitness(witnessScript);\n         CScript scriptPubKey = GetScriptForDestination(CScriptID(redeemScript));\n         CScript scriptSig = CScript() << ToByteVector(redeemScript);\n-        CTxinWitness witness;\n+        CTxInWitness witness;\n         CScriptWitness scriptWitness;\n         scriptWitness.stack.push_back(vector<unsigned char>(0));\n         scriptWitness.stack.push_back(vector<unsigned char>(0));"
      }
    ]
  }
]