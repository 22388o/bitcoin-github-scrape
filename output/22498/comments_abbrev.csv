MarcoFalke,2021-07-19 13:45:51,Converted to draft to avoid merge conflicts for now,https://github.com/bitcoin/bitcoin/pull/22498#issuecomment-882561168,882561168,
vasild,2021-07-19 14:05:25,"`nKey` is a random integer. Why treat 0 specially? It is a possible valid value and no less or more likely to be set in `nKey = FastRandomContext::rand256();` than any other value, e.g. `0xFFFF...` or `0x5555...`.",https://github.com/bitcoin/bitcoin/pull/22498#issuecomment-882576117,882576117,
MarcoFalke,2021-07-19 14:09:50,"Zero is a special value because it is used to clear the memory before destructing addrman. Though, I see your point, which is why I mentioned the alternative in OP:\n\n> An alternative would be to remove the check from CAddrMan::_Check().\n\nAre you saying I should remove the check from `_Check`?",https://github.com/bitcoin/bitcoin/pull/22498#issuecomment-882580041,882580041,
sipa,2021-07-19 14:44:28,"There is no need for that. It's a 256-bit value. If we're worried about the chance that it can randomly be 0, we should first be worried about hash collisions in blocks, and randomly guessing private keys.",https://github.com/bitcoin/bitcoin/pull/22498#issuecomment-882607246,882607246,
vasild,2021-07-19 14:58:51,"> to make it explicit\n\n... to the reader that 0 is treated specially, it would be more of a documentation than avoiding a `1/2^256` chance.",https://github.com/bitcoin/bitcoin/pull/22498#issuecomment-882618248,882618248,
MarcoFalke,2021-07-19 15:15:53,"> Needs rebase.\n\nNot if it is merged after the pull that it conflicts with ;)\n\n\n> I don't have strong opinion and this is so minor that it will work either way. Personally I would remove it from Check() and remove the SetNull() from addrman destructor. Nowadays there are better ways to detect use-after-free than setting select members to magic values in the destructor.\n\nMakes sense. ",https://github.com/bitcoin/bitcoin/pull/22498#issuecomment-882632825,882632825,
sipa,2021-07-19 15:17:32,"The reason for wiping the key is to avoid keeping secret key material longer in memory than needed, by the way. The fact that it allows use-after-free detection is a side effect.",https://github.com/bitcoin/bitcoin/pull/22498#issuecomment-882634069,882634069,
MarcoFalke,2021-07-19 15:28:14,"The secret is written to disk in plain text and thus kept in the cache in memory. With that in mind, is it important to still set it to zero on shutdown?",https://github.com/bitcoin/bitcoin/pull/22498#issuecomment-882642278,882642278,
sipa,2021-07-19 15:32:16,"I'd still say so, yes. This is no different from wallet private keys in an unencrypted wallet.\n\nLeaving it in memory means it risks ending up in uninitialized memory that's allocated, where it may leak in case of other bugs. The addrman key is of course not nearly as sensitive as wallet keys, and the fact that it remains in use almost the entire lifetime of the process makes it less of an issue ",https://github.com/bitcoin/bitcoin/pull/22498#issuecomment-882645361,882645361,
DrahtBot,2021-07-19 18:56:25,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/22498#issuecomment-882781347,882781347,
MarcoFalke,2021-07-20 06:01:15,"Ok, I am not removing the `m_key.SetNull()` in this pull. It seems unrelated anyway. Also, I took this out of draft and force pushed to fixup the tests in the first commit, which I forgot initially.",https://github.com/bitcoin/bitcoin/pull/22498#issuecomment-883093795,883093795,
vasild,2021-07-20 09:39:44,"`addrman_tests/remove_invalid` and `addrman_tests/addrman_serialization` are failing due to the new check: ""Corrupt CAddrMan serialization, m_key is all zeros""",https://github.com/bitcoin/bitcoin/pull/22498#issuecomment-883252090,883252090,
practicalswift,2021-07-24 19:41:17,Concept ACK,https://github.com/bitcoin/bitcoin/pull/22498#issuecomment-886102656,886102656,
jnewbery,2021-08-17 12:32:41,Concept ACK,https://github.com/bitcoin/bitcoin/pull/22498#issuecomment-900257273,900257273,
MarcoFalke,2021-08-18 07:23:53,See #22734,https://github.com/bitcoin/bitcoin/pull/22498#issuecomment-900883475,900883475,
