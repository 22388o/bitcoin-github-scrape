DrahtBot,2020-04-14 21:10:15,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19604 (Pass mempool pointer to UnloadBlockIndex/GetCoinsCacheSizeState by MarcoFalke)\n* #19556 (Remove mempool global by",https://github.com/bitcoin/bitcoin/pull/18637#issuecomment-613683149,613683149,
jamesob,2020-04-22 15:28:09,"Thanks for the review and good suggestions, @ryanofsky. I've incorporated your feedback in the latest revision.",https://github.com/bitcoin/bitcoin/pull/18637#issuecomment-617849721,617849721,
ryanofsky,2020-05-22 17:32:30,"Should this be added to in progress column https://github.com/bitcoin/bitcoin/projects/11? \n\nAlso maybe if there's a main assumeutxo pr you'd prioritize for review now it could go on high priority reviews https://github.com/bitcoin/bitcoin/projects/8",https://github.com/bitcoin/bitcoin/pull/18637#issuecomment-632821018,632821018,
MarcoFalke,2020-05-31 12:59:37,"This doesn't compile\n\n```\nvalidation.cpp: In member function ‘bool CChainState::ResizeCoinsCaches(size_t, size_t)’:\n\nvalidation.cpp:4990:23: error: comparison of integer expressions of different signedness: ‘size_t’ {aka ‘unsigned int’} and ‘int’ [-Werror=sign-compare]\n\n     if (coinstip_size > old_coinstip_size) {\n\n         ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~\n\ncc1plus: some wa",https://github.com/bitcoin/bitcoin/pull/18637#issuecomment-636468316,636468316,
MarcoFalke,2020-05-31 13:00:07,"It does compile locally, so I am not sure how to reproduce this failure :(",https://github.com/bitcoin/bitcoin/pull/18637#issuecomment-636468355,636468355,
ryanofsky,2020-06-30 17:20:44,"[""if anyone wants to see forward motion on assumeutxo, #18637 is the one to review""](http://www.erisian.com.au/bitcoin-core-dev/log-2020-06-11.html#l-442)",https://github.com/bitcoin/bitcoin/pull/18637#issuecomment-651932209,651932209,
ryanofsky,2020-07-24 10:15:42,This looks ready to merge,https://github.com/bitcoin/bitcoin/pull/18637#issuecomment-663469178,663469178,
jamesob,2020-04-15 15:57:58,This will need to be modified with the change that @MarcoFalke has made in https://github.com/bitcoin/bitcoin/pull/18615.,https://github.com/bitcoin/bitcoin/pull/18637#discussion_r408954497,408954497,src/test/validation_chainstate_tests.cpp
ryanofsky,2020-04-16 16:36:13,"In commit ""coins: add Sync() method to allow flush without cacheCoins drop"" (b2abb396c64e96585a0c38a269372b35cced08bd)\n\nAssertLockHeld would be one option",https://github.com/bitcoin/bitcoin/pull/18637#discussion_r409694987,409694987,src/txdb.cpp
ryanofsky,2020-04-16 16:39:29,"In commit ""coins: add Sync() method to allow flush without cacheCoins drop"" (b2abb396c64e96585a0c38a269372b35cced08bd)\n\nWould be nice to stick to member initialization and keep empty constructor body `db(MakeUnique<CDBWrapper>(...)))`",https://github.com/bitcoin/bitcoin/pull/18637#discussion_r409697186,409697186,src/txdb.cpp
ryanofsky,2020-04-16 16:42:36,"In commit ""coins: add Sync() method to allow flush without cacheCoins drop"" (b2abb396c64e96585a0c38a269372b35cced08bd)\n\nDoesn't really matter but general better to avoid `new` with `MakeUnique`\nhttps://isocpp.org/blog/2019/06/quick-q-differences-between-stdmake-unique-and-stdunique-ptr-with-new",https://github.com/bitcoin/bitcoin/pull/18637#discussion_r409699250,409699250,src/txdb.cpp
ryanofsky,2020-04-16 16:45:45,"In commit ""coins: add Sync() method to allow flush without cacheCoins drop"" (b2abb396c64e96585a0c38a269372b35cced08bd)\n\nSince this commit is already changing the type of `db` and updating every single line where it's referenced, it'd be nice to rename it to `m_db` at the same time",https://github.com/bitcoin/bitcoin/pull/18637#discussion_r409701315,409701315,src/txdb.h
ryanofsky,2020-04-16 16:51:46,"In commit ""test: add test for CChainState::ResizeCoinsCaches()"" (03e5fe6ee3cc44f8a2b27de31e3fcd9612f907b5)\n\nNice test!",https://github.com/bitcoin/bitcoin/pull/18637#discussion_r409705135,409705135,src/test/validation_chainstate_tests.cpp
ryanofsky,2020-04-16 16:59:10,"In commit ""Add CChainState::ResizeCoinsCaches"" (df0f720cfdcc1ad70d5ef2656039f008b3bc4bba)\n\nWould be good to pass along false return value to caller in case this fails",https://github.com/bitcoin/bitcoin/pull/18637#discussion_r409709750,409709750,src/validation.cpp
ryanofsky,2020-04-16 17:07:19,"In commit ""Add CChainState::ResizeCoinsCaches"" (df0f720cfdcc1ad70d5ef2656039f008b3bc4bba)\n\nJust confirming but looks like this 1.5MB default cache size was only used by test cases previously, which are now using 8MB or 1KB caches depending on the case.",https://github.com/bitcoin/bitcoin/pull/18637#discussion_r409714771,409714771,src/validation.cpp
ryanofsky,2020-04-16 17:15:24,"In commit ""Add CChainState::ResizeCoinsCaches"" (df0f720cfdcc1ad70d5ef2656039f008b3bc4bba)\n\nJust curious, but would it make sense to call FlushStateToDisk before resetting CoinsDB instead of after? Thought would be that maybe live CDBWrapper object has cached state that would make the flush faster, or maybe it could be good to start with a new CDBWrapper after the flush",https://github.com/bitcoin/bitcoin/pull/18637#discussion_r409719460,409719460,src/validation.cpp
ryanofsky,2020-04-16 17:22:01,"In commit ""add ChainstateManager::MaybeRebalanceCaches()"" (69514bd9fce0f867256bd08ec9f1b616a3ece573)\n\nCould probably write a short unit test exercising this (checking m_coins{tip,db}_cache_size_bytes)",https://github.com/bitcoin/bitcoin/pull/18637#discussion_r409723518,409723518,src/validation.cpp
jamesob,2020-04-22 15:28:29,"Good idea, done.",https://github.com/bitcoin/bitcoin/pull/18637#discussion_r413083482,413083482,src/validation.cpp
jamesob,2020-04-22 15:28:56,"Ah thanks, didn't know that.",https://github.com/bitcoin/bitcoin/pull/18637#discussion_r413083886,413083886,src/txdb.cpp
jamesob,2020-04-22 15:29:29,I just ended up using an `extern` declaration for the lock and adding an annotation. Not sure why I didn't do that in the first place.,https://github.com/bitcoin/bitcoin/pull/18637#discussion_r413084378,413084378,src/txdb.cpp
ryanofsky,2020-05-19 19:31:36,"In commit ""add ChainstateManager::MaybeRebalanceCaches()"" (db5e36a033e642599db808f59d16d03a40860f17)\n\nThis is interesting. Once we update to c++14 or 17 we should be able to use WITH_LOCK like\n\n```c++\nCChainState& c1 = WITH_LOCK(cs_main, return manager.InitializeChainstate());\n```\n\nI think it changing it wouldn't work now without decltype(auto)",https://github.com/bitcoin/bitcoin/pull/18637#discussion_r427549224,427549224,src/test/validation_chainstatemanager_tests.cpp
sipa,2020-05-22 17:37:12,"What is different between this potential WITH_LOCK use, and the existing ones that return a value?",https://github.com/bitcoin/bitcoin/pull/18637#discussion_r429373795,429373795,src/test/validation_chainstatemanager_tests.cpp
MarcoFalke,2020-05-22 18:00:00,"I don't know, but maybe C++11 lambda can not return references? If yes, this can be solved with\n\n\n```cpp\nCChainState& c1 = *WITH_LOCK(cs_main, return &manager.InitializeChainstate());",https://github.com/bitcoin/bitcoin/pull/18637#discussion_r429383887,429383887,src/test/validation_chainstatemanager_tests.cpp
ryanofsky,2020-05-22 18:44:01,"Yes, just what marco said, auto return type won't deduce a reference, and I think the pointer trick would work here, so it might nice to incorporate if the PR is gets updated again",https://github.com/bitcoin/bitcoin/pull/18637#discussion_r429401621,429401621,src/test/validation_chainstatemanager_tests.cpp
MarcoFalke,2020-05-23 12:26:35,"```suggestion\n                chainman.m_total_coinsdb_cache = nCoinDBCache;\n```\n\nNeeds rebase to remove the `g_` prefix in this line",https://github.com/bitcoin/bitcoin/pull/18637#discussion_r429541761,429541761,src/init.cpp
MarcoFalke,2020-05-23 12:28:17,I don't think this needs a `SyncWithValidationInterfaceQueue` before the unload because in this test not blocks are mined and no txs are added to the mempool.,https://github.com/bitcoin/bitcoin/pull/18637#discussion_r429541868,429541868,src/test/validation_chainstate_tests.cpp
jamesob,2020-05-28 17:37:49,"Pushed, thanks!",https://github.com/bitcoin/bitcoin/pull/18637#discussion_r432009502,432009502,src/init.cpp
MarcoFalke,2020-05-31 13:02:50,"style-nit in commit 1e6e0b9af6c5470dbf1e61:\n\nNow that you have to force push anyway, might as well remove the clumsy `ENTER_CRITICAL_SECTION`?\n\n```suggestion\n    CChainState& c1 = *WITH_LOCK(cs_main, return &manager.InitializeChainstate());\n```",https://github.com/bitcoin/bitcoin/pull/18637#discussion_r432944978,432944978,src/test/validation_chainstatemanager_tests.cpp
MarcoFalke,2020-05-31 13:03:51,"```suggestion\n    CChainState& c2 = *WITH_LOCK(cs_main, return &manager.InitializeChainstate(GetRandHash()));\n```\n\nSame",https://github.com/bitcoin/bitcoin/pull/18637#discussion_r432945053,432945053,src/test/validation_chainstatemanager_tests.cpp
fjahr,2020-06-15 20:01:25,"0fd9039ab3de00a0ac03b8fe0463f0c62a92dd43\n\nThis currently introduces a new compiler warning. The initializer list should be in the same order as they members are declared.\n\n```\ntxdb.cpp:47:5: warning: field 'm_is_memory' will be initialized after field 'm_db' [-Wreorder]\n    m_is_memory(fMemory),\n```",https://github.com/bitcoin/bitcoin/pull/18637#discussion_r440414525,440414525,src/txdb.cpp
fjahr,2020-06-15 20:02:47,"1bf9a836713b44d873dd6f2b99ce8ab343808ffe\n\nThis looks like it could be a constant?",https://github.com/bitcoin/bitcoin/pull/18637#discussion_r440415231,440415231,src/test/util/setup_common.cpp
fjahr,2020-06-15 20:05:53,"6df742f093de1c1360e3f37d011fbdf0a3888017\n\nIn the test I think `1 << 23` could also be a variable to help a little bit with readability.",https://github.com/bitcoin/bitcoin/pull/18637#discussion_r440416684,440416684,src/test/validation_chainstatemanager_tests.cpp
jamesob,2020-06-30 18:20:51,"FWIW I can't reproduce this locally with either clang or gcc:\n\n```\nCC            = /usr/bin/ccache /usr/bin/clang\nCFLAGS        = -g -O2\nCPPFLAGS      =  -DDEBUG -DDEBUG_LOCKORDER  -I/home/james/src/bitcoin/db4/include/ -DHAVE_BUILD_INFO -D__STDC_FORMAT_MACROS\nCXX           = /usr/bin/ccache /usr/bin/clang++ -std=c++11\nCXXFLAGS      =  -O0 -g3 -ftrapv  -Wstack-protector -fstack-prote",https://github.com/bitcoin/bitcoin/pull/18637#discussion_r447889705,447889705,src/txdb.cpp
ajtowns,2020-07-01 15:52:42,"You just need to move `m_db` to be the first thing initialized, just as it's the first thing declared in txdb.h. Warning appears for me with clang 9.0 fwiw. cf https://en.cppreference.com/w/cpp/language/constructor#Initialization_order",https://github.com/bitcoin/bitcoin/pull/18637#discussion_r448459247,448459247,src/txdb.cpp
ajtowns,2020-07-01 16:26:23,"This seems a bit of an anti-pattern -- it's not ResizeCache() that needs cs_main, it's the fact that when it's called it ends up operating on `m_coins_views->m_dbview` which does need cs_main, but that's not enforced because the constraint is thrown away by CoinsDB() returning a reference to the guarded object.\n\nI think it might be better to replace `CoinsDB()` by a `GetCoinsViews()` that retu",https://github.com/bitcoin/bitcoin/pull/18637#discussion_r448479334,448479334,src/txdb.h
jamesob,2020-07-01 18:47:04,"Fixed, thanks",https://github.com/bitcoin/bitcoin/pull/18637#discussion_r448552717,448552717,src/txdb.cpp
fjahr,2020-07-03 21:59:03,"super-nit: A bit more info on the rationale behind 0.05/0.95 would be nice. Also, the values could be constants. But that can be considered for a follow-up.",https://github.com/bitcoin/bitcoin/pull/18637#discussion_r449710524,449710524,src/validation.cpp
darosior,2020-07-29 12:45:58,Doesn't this lock `cs_main` twice ?,https://github.com/bitcoin/bitcoin/pull/18637#discussion_r462269791,462269791,src/test/validation_chainstatemanager_tests.cpp
MarcoFalke,2020-07-29 12:48:35,The test nits are fixed in the first commit of #19604 ,https://github.com/bitcoin/bitcoin/pull/18637#discussion_r462271342,462271342,src/test/validation_chainstatemanager_tests.cpp
darosior,2020-07-29 12:55:18,Yep. Brainfart. Just noticed while rebasing https://github.com/bitcoin/bitcoin/pull/19556 and commented without thinking.,https://github.com/bitcoin/bitcoin/pull/18637#discussion_r462275500,462275500,src/test/validation_chainstatemanager_tests.cpp
