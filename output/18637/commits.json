[
  {
    "sha": "b223111da2e0e9ceccef75df8a20252b0094b7bc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMjIzMTExZGEyZTBlOWNlY2NlZjc1ZGY4YTIwMjUyYjAwOTRiN2Jj",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2019-04-17T14:07:15Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2020-07-01T18:44:24Z"
      },
      "message": "txdb: add CCoinsViewDB::ChangeCacheSize\n\nWe'll need this to dynamically update the cache size of the existing\nCCoinsViewDB instance when we create a new one during snapshot activation.\n\nThis requires us to keep the CDBWrapper instance as a pointer instead of\na reference so that we're able to destruct it and create a new instance\nwhen the cache size changes.\n\nAlso renames `db` to `m_db` since we're already modifying each usage.\n\nIncludes feedback from Russ Yanofsky.",
      "tree": {
        "sha": "db40a92d85a7bd7a3dd8ff413abad13f21062220",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/db40a92d85a7bd7a3dd8ff413abad13f21062220"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b223111da2e0e9ceccef75df8a20252b0094b7bc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b223111da2e0e9ceccef75df8a20252b0094b7bc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b223111da2e0e9ceccef75df8a20252b0094b7bc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b223111da2e0e9ceccef75df8a20252b0094b7bc/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ea3e9e0b84c57df4110ca9e5ccced65c5bbe4611",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea3e9e0b84c57df4110ca9e5ccced65c5bbe4611",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea3e9e0b84c57df4110ca9e5ccced65c5bbe4611"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 36,
      "deletions": 17
    },
    "files": [
      {
        "sha": "898cd1996b288fe7f5e42a2d77b43bb5b63724fe",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 16,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b223111da2e0e9ceccef75df8a20252b0094b7bc/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b223111da2e0e9ceccef75df8a20252b0094b7bc/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=b223111da2e0e9ceccef75df8a20252b0094b7bc",
        "patch": "@@ -10,6 +10,7 @@\n #include <shutdown.h>\n #include <ui_interface.h>\n #include <uint256.h>\n+#include <util/memory.h>\n #include <util/system.h>\n #include <util/translation.h>\n #include <util/vector.h>\n@@ -41,35 +42,45 @@ struct CoinEntry {\n \n }\n \n-CCoinsViewDB::CCoinsViewDB(fs::path ldb_path, size_t nCacheSize, bool fMemory, bool fWipe) : db(ldb_path, nCacheSize, fMemory, fWipe, true)\n+CCoinsViewDB::CCoinsViewDB(fs::path ldb_path, size_t nCacheSize, bool fMemory, bool fWipe) :\n+    m_db(MakeUnique<CDBWrapper>(ldb_path, nCacheSize, fMemory, fWipe, true)),\n+    m_ldb_path(ldb_path),\n+    m_is_memory(fMemory) { }\n+\n+void CCoinsViewDB::ResizeCache(size_t new_cache_size)\n {\n+    // Have to do a reset first to get the original `m_db` state to release its\n+    // filesystem lock.\n+    m_db.reset();\n+    m_db = MakeUnique<CDBWrapper>(\n+        m_ldb_path, new_cache_size, m_is_memory, /*fWipe*/ false, /*obfuscate*/ true);\n }\n \n bool CCoinsViewDB::GetCoin(const COutPoint &outpoint, Coin &coin) const {\n-    return db.Read(CoinEntry(&outpoint), coin);\n+    return m_db->Read(CoinEntry(&outpoint), coin);\n }\n \n bool CCoinsViewDB::HaveCoin(const COutPoint &outpoint) const {\n-    return db.Exists(CoinEntry(&outpoint));\n+    return m_db->Exists(CoinEntry(&outpoint));\n }\n \n uint256 CCoinsViewDB::GetBestBlock() const {\n     uint256 hashBestChain;\n-    if (!db.Read(DB_BEST_BLOCK, hashBestChain))\n+    if (!m_db->Read(DB_BEST_BLOCK, hashBestChain))\n         return uint256();\n     return hashBestChain;\n }\n \n std::vector<uint256> CCoinsViewDB::GetHeadBlocks() const {\n     std::vector<uint256> vhashHeadBlocks;\n-    if (!db.Read(DB_HEAD_BLOCKS, vhashHeadBlocks)) {\n+    if (!m_db->Read(DB_HEAD_BLOCKS, vhashHeadBlocks)) {\n         return std::vector<uint256>();\n     }\n     return vhashHeadBlocks;\n }\n \n bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n-    CDBBatch batch(db);\n+    CDBBatch batch(*m_db);\n     size_t count = 0;\n     size_t changed = 0;\n     size_t batch_size = (size_t)gArgs.GetArg(\"-dbbatchsize\", nDefaultDbBatchSize);\n@@ -107,7 +118,7 @@ bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n         mapCoins.erase(itOld);\n         if (batch.SizeEstimate() > batch_size) {\n             LogPrint(BCLog::COINDB, \"Writing partial batch of %.2f MiB\\n\", batch.SizeEstimate() * (1.0 / 1048576.0));\n-            db.WriteBatch(batch);\n+            m_db->WriteBatch(batch);\n             batch.Clear();\n             if (crash_simulate) {\n                 static FastRandomContext rng;\n@@ -124,14 +135,14 @@ bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n     batch.Write(DB_BEST_BLOCK, hashBlock);\n \n     LogPrint(BCLog::COINDB, \"Writing final batch of %.2f MiB\\n\", batch.SizeEstimate() * (1.0 / 1048576.0));\n-    bool ret = db.WriteBatch(batch);\n+    bool ret = m_db->WriteBatch(batch);\n     LogPrint(BCLog::COINDB, \"Committed %u changed transaction outputs (out of %u) to coin database...\\n\", (unsigned int)changed, (unsigned int)count);\n     return ret;\n }\n \n size_t CCoinsViewDB::EstimateSize() const\n {\n-    return db.EstimateSize(DB_COIN, (char)(DB_COIN+1));\n+    return m_db->EstimateSize(DB_COIN, (char)(DB_COIN+1));\n }\n \n CBlockTreeDB::CBlockTreeDB(size_t nCacheSize, bool fMemory, bool fWipe) : CDBWrapper(GetDataDir() / \"blocks\" / \"index\", nCacheSize, fMemory, fWipe) {\n@@ -158,7 +169,7 @@ bool CBlockTreeDB::ReadLastBlockFile(int &nFile) {\n \n CCoinsViewCursor *CCoinsViewDB::Cursor() const\n {\n-    CCoinsViewDBCursor *i = new CCoinsViewDBCursor(const_cast<CDBWrapper&>(db).NewIterator(), GetBestBlock());\n+    CCoinsViewDBCursor *i = new CCoinsViewDBCursor(const_cast<CDBWrapper&>(*m_db).NewIterator(), GetBestBlock());\n     /* It seems that there are no \"const iterators\" for LevelDB.  Since we\n        only need read operations on it, use a const-cast to get around\n        that restriction.  */\n@@ -338,7 +349,7 @@ class CCoins\n  * Currently implemented: from the per-tx utxo model (0.8..0.14.x) to per-txout.\n  */\n bool CCoinsViewDB::Upgrade() {\n-    std::unique_ptr<CDBIterator> pcursor(db.NewIterator());\n+    std::unique_ptr<CDBIterator> pcursor(m_db->NewIterator());\n     pcursor->Seek(std::make_pair(DB_COINS, uint256()));\n     if (!pcursor->Valid()) {\n         return true;\n@@ -349,7 +360,7 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[0%%]...\"); /* Continued */\n     uiInterface.ShowProgress(_(\"Upgrading UTXO database\").translated, 0, true);\n     size_t batch_size = 1 << 24;\n-    CDBBatch batch(db);\n+    CDBBatch batch(*m_db);\n     int reportDone = 0;\n     std::pair<unsigned char, uint256> key;\n     std::pair<unsigned char, uint256> prev_key = {DB_COINS, uint256()};\n@@ -384,18 +395,18 @@ bool CCoinsViewDB::Upgrade() {\n             }\n             batch.Erase(key);\n             if (batch.SizeEstimate() > batch_size) {\n-                db.WriteBatch(batch);\n+                m_db->WriteBatch(batch);\n                 batch.Clear();\n-                db.CompactRange(prev_key, key);\n+                m_db->CompactRange(prev_key, key);\n                 prev_key = key;\n             }\n             pcursor->Next();\n         } else {\n             break;\n         }\n     }\n-    db.WriteBatch(batch);\n-    db.CompactRange({DB_COINS, uint256()}, key);\n+    m_db->WriteBatch(batch);\n+    m_db->CompactRange({DB_COINS, uint256()}, key);\n     uiInterface.ShowProgress(\"\", 100, false);\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();"
      },
      {
        "sha": "0cf7e2f1b8b33d3ce01dde9640aad2e1212c1ec9",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b223111da2e0e9ceccef75df8a20252b0094b7bc/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b223111da2e0e9ceccef75df8a20252b0094b7bc/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=b223111da2e0e9ceccef75df8a20252b0094b7bc",
        "patch": "@@ -39,11 +39,16 @@ static const int64_t max_filter_index_cache = 1024;\n //! Max memory allocated to coin DB specific cache (MiB)\n static const int64_t nMaxCoinsDBCache = 8;\n \n+// Actually declared in validation.cpp; can't include because of circular dependency.\n+extern RecursiveMutex cs_main;\n+\n /** CCoinsView backed by the coin database (chainstate/) */\n class CCoinsViewDB final : public CCoinsView\n {\n protected:\n-    CDBWrapper db;\n+    std::unique_ptr<CDBWrapper> m_db;\n+    fs::path m_ldb_path;\n+    bool m_is_memory;\n public:\n     /**\n      * @param[in] ldb_path    Location in the filesystem where leveldb data will be stored.\n@@ -60,6 +65,9 @@ class CCoinsViewDB final : public CCoinsView\n     //! Attempt to update from an older database format. Returns whether an error occurred.\n     bool Upgrade();\n     size_t EstimateSize() const override;\n+\n+    //! Dynamically alter the underlying leveldb cache size.\n+    void ResizeCache(size_t new_cache_size) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n };\n \n /** Specialization of CCoinsViewCursor to iterate over a CCoinsViewDB */"
      }
    ]
  },
  {
    "sha": "f36aaa6392fdbdac6891d92202d3efeff98754f4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMzZhYWE2MzkyZmRiZGFjNjg5MWQ5MjIwMmQzZWZlZmY5ODc1NGY0",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2019-09-16T19:01:12Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2020-07-01T18:44:28Z"
      },
      "message": "Add CChainState::ResizeCoinsCaches\n\nAlso adds CCoinsViewCache::ReallocateCache() to attempt to free\nmemory that the cacheCoins's allocator may be hanging onto when\ndownsizing the cache.\n\nAdds `CChainState::m_coins{tip,db}_cache_size_bytes` data members\nso that we can reference cache size on a per-chainstate basis for\nflushing.",
      "tree": {
        "sha": "4cebab3fa566f6f9dc53228b92264f1cda6095b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4cebab3fa566f6f9dc53228b92264f1cda6095b1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f36aaa6392fdbdac6891d92202d3efeff98754f4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f36aaa6392fdbdac6891d92202d3efeff98754f4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f36aaa6392fdbdac6891d92202d3efeff98754f4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f36aaa6392fdbdac6891d92202d3efeff98754f4/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b223111da2e0e9ceccef75df8a20252b0094b7bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b223111da2e0e9ceccef75df8a20252b0094b7bc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b223111da2e0e9ceccef75df8a20252b0094b7bc"
      }
    ],
    "stats": {
      "total": 89,
      "additions": 73,
      "deletions": 16
    },
    "files": [
      {
        "sha": "5de2ed78106a95b23d4c4cdc6849a0fe67c63ecf",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f36aaa6392fdbdac6891d92202d3efeff98754f4/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f36aaa6392fdbdac6891d92202d3efeff98754f4/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=f36aaa6392fdbdac6891d92202d3efeff98754f4",
        "patch": "@@ -245,6 +245,14 @@ bool CCoinsViewCache::HaveInputs(const CTransaction& tx) const\n     return true;\n }\n \n+void CCoinsViewCache::ReallocateCache()\n+{\n+    // Cache should be empty when we're calling this.\n+    assert(cacheCoins.size() == 0);\n+    cacheCoins.~CCoinsMap();\n+    ::new (&cacheCoins) CCoinsMap();\n+}\n+\n static const size_t MIN_TRANSACTION_OUTPUT_WEIGHT = WITNESS_SCALE_FACTOR * ::GetSerializeSize(CTxOut(), PROTOCOL_VERSION);\n static const size_t MAX_OUTPUTS_PER_BLOCK = MAX_BLOCK_WEIGHT / MIN_TRANSACTION_OUTPUT_WEIGHT;\n "
      },
      {
        "sha": "a3e241ac904a3eb54b3968e54f32ba6440cad291",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f36aaa6392fdbdac6891d92202d3efeff98754f4/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f36aaa6392fdbdac6891d92202d3efeff98754f4/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=f36aaa6392fdbdac6891d92202d3efeff98754f4",
        "patch": "@@ -318,6 +318,13 @@ class CCoinsViewCache : public CCoinsViewBacked\n     //! Check whether all prevouts of the transaction are present in the UTXO set represented by this view\n     bool HaveInputs(const CTransaction& tx) const;\n \n+    //! Force a reallocation of the cache map. This is required when downsizing\n+    //! the cache because the map's allocator may be hanging onto a lot of\n+    //! memory despite having called .clear().\n+    //!\n+    //! See: https://stackoverflow.com/questions/42114044/how-to-release-unordered-map-memory\n+    void ReallocateCache();\n+\n private:\n     /**\n      * @note this is marked const, but may actually append to `cacheCoins`, increasing"
      },
      {
        "sha": "4561a10870261e45eca112d40e4a0e5edbe19a86",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f36aaa6392fdbdac6891d92202d3efeff98754f4/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f36aaa6392fdbdac6891d92202d3efeff98754f4/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=f36aaa6392fdbdac6891d92202d3efeff98754f4",
        "patch": "@@ -1533,7 +1533,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node)\n     int64_t nCoinDBCache = std::min(nTotalCache / 2, (nTotalCache / 4) + (1 << 23)); // use 25%-50% of the remainder for disk cache\n     nCoinDBCache = std::min(nCoinDBCache, nMaxCoinsDBCache << 20); // cap total coins db cache\n     nTotalCache -= nCoinDBCache;\n-    nCoinCacheUsage = nTotalCache; // the rest goes to in-memory cache\n+    int64_t nCoinCacheUsage = nTotalCache; // the rest goes to in-memory cache\n     int64_t nMempoolSizeMax = gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     LogPrintf(\"Cache configuration:\\n\");\n     LogPrintf(\"* Using %.1f MiB for block index database\\n\", nBlockTreeDBCache * (1.0 / 1024 / 1024));\n@@ -1645,7 +1645,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node)\n                     }\n \n                     // The on-disk coinsdb is now in a good state, create the cache\n-                    chainstate->InitCoinsCache();\n+                    chainstate->InitCoinsCache(nCoinCacheUsage);\n                     assert(chainstate->CanFlushToDisk());\n \n                     if (!is_coinsview_empty(chainstate)) {"
      },
      {
        "sha": "83916fd0802d7218b83f56327babb8c1dd1a1a56",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f36aaa6392fdbdac6891d92202d3efeff98754f4/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f36aaa6392fdbdac6891d92202d3efeff98754f4/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=f36aaa6392fdbdac6891d92202d3efeff98754f4",
        "patch": "@@ -139,7 +139,7 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n     ::ChainstateActive().InitCoinsDB(\n         /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n     assert(!::ChainstateActive().CanFlushToDisk());\n-    ::ChainstateActive().InitCoinsCache();\n+    ::ChainstateActive().InitCoinsCache(1 << 23);\n     assert(::ChainstateActive().CanFlushToDisk());\n     if (!LoadGenesisBlock(chainparams)) {\n         throw std::runtime_error(\"LoadGenesisBlock failed.\");"
      },
      {
        "sha": "d16633c1494f125906a7061304fb455f866e0339",
        "filename": "src/test/validation_chainstatemanager_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f36aaa6392fdbdac6891d92202d3efeff98754f4/src/test/validation_chainstatemanager_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f36aaa6392fdbdac6891d92202d3efeff98754f4/src/test/validation_chainstatemanager_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_chainstatemanager_tests.cpp?ref=f36aaa6392fdbdac6891d92202d3efeff98754f4",
        "patch": "@@ -28,13 +28,11 @@ BOOST_AUTO_TEST_CASE(chainstatemanager)\n \n     // Create a legacy (IBD) chainstate.\n     //\n-    ENTER_CRITICAL_SECTION(cs_main);\n-    CChainState& c1 = manager.InitializeChainstate();\n-    LEAVE_CRITICAL_SECTION(cs_main);\n+    CChainState& c1 = *WITH_LOCK(::cs_main, return &manager.InitializeChainstate());\n     chainstates.push_back(&c1);\n     c1.InitCoinsDB(\n         /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n-    WITH_LOCK(::cs_main, c1.InitCoinsCache());\n+    WITH_LOCK(::cs_main, c1.InitCoinsCache(1 << 23));\n \n     BOOST_CHECK(!manager.IsSnapshotActive());\n     BOOST_CHECK(!manager.IsSnapshotValidated());\n@@ -57,12 +55,13 @@ BOOST_AUTO_TEST_CASE(chainstatemanager)\n     // Create a snapshot-based chainstate.\n     //\n     ENTER_CRITICAL_SECTION(cs_main);\n-    CChainState& c2 = manager.InitializeChainstate(GetRandHash());\n+    CChainState& c2 = *WITH_LOCK(::cs_main,\n+        return &manager.InitializeChainstate(GetRandHash()));\n     LEAVE_CRITICAL_SECTION(cs_main);\n     chainstates.push_back(&c2);\n     c2.InitCoinsDB(\n         /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n-    WITH_LOCK(::cs_main, c2.InitCoinsCache());\n+    WITH_LOCK(::cs_main, c2.InitCoinsCache(1 << 23));\n     // Unlike c1, which doesn't have any blocks. Gets us different tip, height.\n     c2.LoadGenesisBlock(chainparams);\n     BlockValidationState _;"
      },
      {
        "sha": "7111fc338033750946a995121e8620e4ac1e89b1",
        "filename": "src/test/validation_flush_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f36aaa6392fdbdac6891d92202d3efeff98754f4/src/test/validation_flush_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f36aaa6392fdbdac6891d92202d3efeff98754f4/src/test/validation_flush_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_flush_tests.cpp?ref=f36aaa6392fdbdac6891d92202d3efeff98754f4",
        "patch": "@@ -21,7 +21,7 @@ BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n     BlockManager blockman{};\n     CChainState chainstate{blockman};\n     chainstate.InitCoinsDB(/*cache_size_bytes*/ 1 << 10, /*in_memory*/ true, /*should_wipe*/ false);\n-    WITH_LOCK(::cs_main, chainstate.InitCoinsCache());\n+    WITH_LOCK(::cs_main, chainstate.InitCoinsCache(1 << 10));\n     CTxMemPool tx_pool{};\n \n     constexpr bool is_64_bit = sizeof(void*) == 8;"
      },
      {
        "sha": "1d7d85b751b56dbf1d0a6c5a38f391a98a21b916",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 4,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f36aaa6392fdbdac6891d92202d3efeff98754f4/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f36aaa6392fdbdac6891d92202d3efeff98754f4/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=f36aaa6392fdbdac6891d92202d3efeff98754f4",
        "patch": "@@ -135,7 +135,6 @@ bool fPruneMode = false;\n bool fRequireStandard = true;\n bool fCheckBlockIndex = false;\n bool fCheckpointsEnabled = DEFAULT_CHECKPOINTS_ENABLED;\n-size_t nCoinCacheUsage = 5000 * 300;\n uint64_t nPruneTarget = 0;\n int64_t nMaxTipAge = DEFAULT_MAX_TIP_AGE;\n \n@@ -1279,9 +1278,10 @@ void CChainState::InitCoinsDB(\n         leveldb_name, cache_size_bytes, in_memory, should_wipe);\n }\n \n-void CChainState::InitCoinsCache()\n+void CChainState::InitCoinsCache(size_t cache_size_bytes)\n {\n     assert(m_coins_views != nullptr);\n+    m_coinstip_cache_size_bytes = cache_size_bytes;\n     m_coins_views->InitCache();\n }\n \n@@ -2228,7 +2228,7 @@ CoinsCacheSizeState CChainState::GetCoinsCacheSizeState(const CTxMemPool& tx_poo\n {\n     return this->GetCoinsCacheSizeState(\n         tx_pool,\n-        nCoinCacheUsage,\n+        m_coinstip_cache_size_bytes,\n         gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n }\n \n@@ -4300,7 +4300,7 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n             }\n         }\n         // check level 3: check for inconsistencies during memory-only disconnect of tip blocks\n-        if (nCheckLevel >= 3 && (coins.DynamicMemoryUsage() + ::ChainstateActive().CoinsTip().DynamicMemoryUsage()) <= nCoinCacheUsage) {\n+        if (nCheckLevel >= 3 && (coins.DynamicMemoryUsage() + ::ChainstateActive().CoinsTip().DynamicMemoryUsage()) <= ::ChainstateActive().m_coinstip_cache_size_bytes) {\n             assert(coins.GetBestBlock() == pindex->GetBlockHash());\n             DisconnectResult res = ::ChainstateActive().DisconnectBlock(block, pindex, coins);\n             if (res == DISCONNECT_FAILED) {\n@@ -4965,6 +4965,39 @@ std::string CChainState::ToString()\n         tip ? tip->nHeight : -1, tip ? tip->GetBlockHash().ToString() : \"null\");\n }\n \n+bool CChainState::ResizeCoinsCaches(size_t coinstip_size, size_t coinsdb_size)\n+{\n+    if (coinstip_size == m_coinstip_cache_size_bytes &&\n+            coinsdb_size == m_coinsdb_cache_size_bytes) {\n+        // Cache sizes are unchanged, no need to continue.\n+        return true;\n+    }\n+    size_t old_coinstip_size = m_coinstip_cache_size_bytes;\n+    m_coinstip_cache_size_bytes = coinstip_size;\n+    m_coinsdb_cache_size_bytes = coinsdb_size;\n+    CoinsDB().ResizeCache(coinsdb_size);\n+\n+    LogPrintf(\"[%s] resized coinsdb cache to %.1f MiB\\n\",\n+        this->ToString(), coinsdb_size * (1.0 / 1024 / 1024));\n+    LogPrintf(\"[%s] resized coinstip cache to %.1f MiB\\n\",\n+        this->ToString(), coinstip_size * (1.0 / 1024 / 1024));\n+\n+    BlockValidationState state;\n+    const CChainParams& chainparams = Params();\n+\n+    bool ret;\n+\n+    if (coinstip_size > old_coinstip_size) {\n+        // Likely no need to flush if cache sizes have grown.\n+        ret = FlushStateToDisk(chainparams, state, FlushStateMode::IF_NEEDED);\n+    } else {\n+        // Otherwise, flush state to disk and deallocate the in-memory coins map.\n+        ret = FlushStateToDisk(chainparams, state, FlushStateMode::ALWAYS);\n+        CoinsTip().ReallocateCache();\n+    }\n+    return ret;\n+}\n+\n std::string CBlockFileInfo::ToString() const\n {\n     return strprintf(\"CBlockFileInfo(blocks=%u, size=%u, heights=%u...%u, time=%s...%s)\", nBlocks, nSize, nHeightFirst, nHeightLast, FormatISO8601Date(nTimeFirst), FormatISO8601Date(nTimeLast));"
      },
      {
        "sha": "b201403585d0a8254932dbdbbad14649f4727ded",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 12,
        "deletions": 2,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f36aaa6392fdbdac6891d92202d3efeff98754f4/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f36aaa6392fdbdac6891d92202d3efeff98754f4/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=f36aaa6392fdbdac6891d92202d3efeff98754f4",
        "patch": "@@ -127,7 +127,6 @@ extern bool g_parallel_script_checks;\n extern bool fRequireStandard;\n extern bool fCheckBlockIndex;\n extern bool fCheckpointsEnabled;\n-extern size_t nCoinCacheUsage;\n /** A fee rate smaller than this is considered zero fee (for relaying, mining and transaction creation) */\n extern CFeeRate minRelayTxFee;\n /** If the tip is older than this (in seconds), the node is considered to be in initial block download. */\n@@ -519,7 +518,7 @@ class CChainState {\n \n     //! Initialize the in-memory coins cache (to be done after the health of the on-disk database\n     //! is verified).\n-    void InitCoinsCache() EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n+    void InitCoinsCache(size_t cache_size_bytes) EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n     //! @returns whether or not the CoinsViews object has been fully initialized and we can\n     //!          safely flush this object to disk.\n@@ -568,6 +567,17 @@ class CChainState {\n     //! Destructs all objects related to accessing the UTXO set.\n     void ResetCoinsViews() { m_coins_views.reset(); }\n \n+    //! The cache size of the on-disk coins view.\n+    size_t m_coinsdb_cache_size_bytes{0};\n+\n+    //! The cache size of the in-memory coins view.\n+    size_t m_coinstip_cache_size_bytes{0};\n+\n+    //! Resize the CoinsViews caches dynamically and flush state to disk.\n+    //! @returns true unless an error occurred during the flush.\n+    bool ResizeCoinsCaches(size_t coinstip_size, size_t coinsdb_size)\n+        EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n+\n     /**\n      * Update the on-disk chain state.\n      * The caches and indexes are flushed depending on the mode we're called with"
      }
    ]
  },
  {
    "sha": "8ac3ef46999ed676ca3775f7b2f461d92f09a542",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YWMzZWY0Njk5OWVkNjc2Y2EzNzc1ZjdiMmY0NjFkOTJmMDlhNTQy",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2019-09-16T17:37:29Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2020-07-01T18:44:28Z"
      },
      "message": "add ChainstateManager::MaybeRebalanceCaches()\n\nAside from in unittests, this method is unused at the moment. It will be used\nin upcoming commits that enable utxo snapshot activation.",
      "tree": {
        "sha": "3bace2a0a4de841a555e04052de69e7cae6ba1de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3bace2a0a4de841a555e04052de69e7cae6ba1de"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8ac3ef46999ed676ca3775f7b2f461d92f09a542",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ac3ef46999ed676ca3775f7b2f461d92f09a542",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8ac3ef46999ed676ca3775f7b2f461d92f09a542",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ac3ef46999ed676ca3775f7b2f461d92f09a542/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f36aaa6392fdbdac6891d92202d3efeff98754f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f36aaa6392fdbdac6891d92202d3efeff98754f4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f36aaa6392fdbdac6891d92202d3efeff98754f4"
      }
    ],
    "stats": {
      "total": 99,
      "additions": 99,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9deb6cd656aa7eb0f5414db42669f828007b161e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ac3ef46999ed676ca3775f7b2f461d92f09a542/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ac3ef46999ed676ca3775f7b2f461d92f09a542/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=8ac3ef46999ed676ca3775f7b2f461d92f09a542",
        "patch": "@@ -1562,6 +1562,9 @@ bool AppInitMain(const util::Ref& context, NodeContext& node)\n             try {\n                 LOCK(cs_main);\n                 chainman.InitializeChainstate();\n+                chainman.m_total_coinstip_cache = nCoinCacheUsage;\n+                chainman.m_total_coinsdb_cache = nCoinDBCache;\n+\n                 UnloadBlockIndex();\n \n                 // new CBlockTreeDB tries to delete the existing file, which"
      },
      {
        "sha": "f99191b08f5068c83239ef9aeeadf5361761f298",
        "filename": "src/test/validation_chainstatemanager_tests.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 0,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ac3ef46999ed676ca3775f7b2f461d92f09a542/src/test/validation_chainstatemanager_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ac3ef46999ed676ca3775f7b2f461d92f09a542/src/test/validation_chainstatemanager_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_chainstatemanager_tests.cpp?ref=8ac3ef46999ed676ca3775f7b2f461d92f09a542",
        "patch": "@@ -103,4 +103,58 @@ BOOST_AUTO_TEST_CASE(chainstatemanager)\n     WITH_LOCK(::cs_main, manager.Unload());\n }\n \n+//! Test rebalancing the caches associated with each chainstate.\n+BOOST_AUTO_TEST_CASE(chainstatemanager_rebalance_caches)\n+{\n+    ChainstateManager manager;\n+    size_t max_cache = 10000;\n+    manager.m_total_coinsdb_cache = max_cache;\n+    manager.m_total_coinstip_cache = max_cache;\n+\n+    std::vector<CChainState*> chainstates;\n+\n+    // Create a legacy (IBD) chainstate.\n+    //\n+    ENTER_CRITICAL_SECTION(cs_main);\n+    CChainState& c1 = manager.InitializeChainstate();\n+    LEAVE_CRITICAL_SECTION(cs_main);\n+    chainstates.push_back(&c1);\n+    c1.InitCoinsDB(\n+        /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n+\n+    {\n+        LOCK(::cs_main);\n+        c1.InitCoinsCache(1 << 23);\n+        c1.CoinsTip().SetBestBlock(InsecureRand256());\n+        manager.MaybeRebalanceCaches();\n+    }\n+\n+    BOOST_CHECK_EQUAL(c1.m_coinstip_cache_size_bytes, max_cache);\n+    BOOST_CHECK_EQUAL(c1.m_coinsdb_cache_size_bytes, max_cache);\n+\n+    // Create a snapshot-based chainstate.\n+    //\n+    ENTER_CRITICAL_SECTION(cs_main);\n+    CChainState& c2 = manager.InitializeChainstate(GetRandHash());\n+    LEAVE_CRITICAL_SECTION(cs_main);\n+    chainstates.push_back(&c2);\n+    c2.InitCoinsDB(\n+        /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n+\n+    {\n+        LOCK(::cs_main);\n+        c2.InitCoinsCache(1 << 23);\n+        c2.CoinsTip().SetBestBlock(InsecureRand256());\n+        manager.MaybeRebalanceCaches();\n+    }\n+\n+    // Since both chainstates are considered to be in initial block download,\n+    // the snapshot chainstate should take priority.\n+    BOOST_CHECK_CLOSE(c1.m_coinstip_cache_size_bytes, max_cache * 0.05, 1);\n+    BOOST_CHECK_CLOSE(c1.m_coinsdb_cache_size_bytes, max_cache * 0.05, 1);\n+    BOOST_CHECK_CLOSE(c2.m_coinstip_cache_size_bytes, max_cache * 0.95, 1);\n+    BOOST_CHECK_CLOSE(c2.m_coinsdb_cache_size_bytes, max_cache * 0.95, 1);\n+\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "906ed943b2784cc6eec69c7c45af1044223b565c",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ac3ef46999ed676ca3775f7b2f461d92f09a542/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ac3ef46999ed676ca3775f7b2f461d92f09a542/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=8ac3ef46999ed676ca3775f7b2f461d92f09a542",
        "patch": "@@ -5297,3 +5297,33 @@ void ChainstateManager::Reset()\n     m_active_chainstate = nullptr;\n     m_snapshot_validated = false;\n }\n+\n+void ChainstateManager::MaybeRebalanceCaches()\n+{\n+    if (m_ibd_chainstate && !m_snapshot_chainstate) {\n+        LogPrintf(\"[snapshot] allocating all cache to the IBD chainstate\\n\");\n+        // Allocate everything to the IBD chainstate.\n+        m_ibd_chainstate->ResizeCoinsCaches(m_total_coinstip_cache, m_total_coinsdb_cache);\n+    }\n+    else if (m_snapshot_chainstate && !m_ibd_chainstate) {\n+        LogPrintf(\"[snapshot] allocating all cache to the snapshot chainstate\\n\");\n+        // Allocate everything to the snapshot chainstate.\n+        m_snapshot_chainstate->ResizeCoinsCaches(m_total_coinstip_cache, m_total_coinsdb_cache);\n+    }\n+    else if (m_ibd_chainstate && m_snapshot_chainstate) {\n+        // If both chainstates exist, determine who needs more cache based on IBD status.\n+        //\n+        // Note: shrink caches first so that we don't inadvertently overwhelm available memory.\n+        if (m_snapshot_chainstate->IsInitialBlockDownload()) {\n+            m_ibd_chainstate->ResizeCoinsCaches(\n+                m_total_coinstip_cache * 0.05, m_total_coinsdb_cache * 0.05);\n+            m_snapshot_chainstate->ResizeCoinsCaches(\n+                m_total_coinstip_cache * 0.95, m_total_coinsdb_cache * 0.95);\n+        } else {\n+            m_snapshot_chainstate->ResizeCoinsCaches(\n+                m_total_coinstip_cache * 0.05, m_total_coinsdb_cache * 0.05);\n+            m_ibd_chainstate->ResizeCoinsCaches(\n+                m_total_coinstip_cache * 0.95, m_total_coinsdb_cache * 0.95);\n+        }\n+    }\n+}"
      },
      {
        "sha": "a4948c01877d36c7a3930145fbdf441454ab50a6",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ac3ef46999ed676ca3775f7b2f461d92f09a542/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ac3ef46999ed676ca3775f7b2f461d92f09a542/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=8ac3ef46999ed676ca3775f7b2f461d92f09a542",
        "patch": "@@ -794,6 +794,14 @@ class ChainstateManager\n     //! chainstate to avoid duplicating block metadata.\n     BlockManager m_blockman GUARDED_BY(::cs_main);\n \n+    //! The total number of bytes available for us to use across all in-memory\n+    //! coins caches. This will be split somehow across chainstates.\n+    int64_t m_total_coinstip_cache{0};\n+    //\n+    //! The total number of bytes available for us to use across all leveldb\n+    //! coins databases. This will be split somehow across chainstates.\n+    int64_t m_total_coinsdb_cache{0};\n+\n     //! Instantiate a new chainstate and assign it based upon whether it is\n     //! from a snapshot.\n     //!\n@@ -881,6 +889,10 @@ class ChainstateManager\n \n     //! Clear (deconstruct) chainstate data.\n     void Reset();\n+\n+    //! Check to see if caches are out of balance and if so, call\n+    //! ResizeCoinsCaches() as needed.\n+    void MaybeRebalanceCaches() EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n };\n \n /** DEPRECATED! Please use node.chainman instead. May only be used in validation.cpp internally */"
      }
    ]
  },
  {
    "sha": "f19fdd47a6371dcbe0760ef6f3c3c5adb31b1bb4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMTlmZGQ0N2E2MzcxZGNiZTA3NjBlZjZmM2MzYzVhZGIzMWIxYmI0",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2020-04-14T18:00:37Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2020-07-01T18:44:28Z"
      },
      "message": "test: add test for CChainState::ResizeCoinsCaches()",
      "tree": {
        "sha": "432370dfe2f8d0df7e1b6f7e4f40da57b1479de0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/432370dfe2f8d0df7e1b6f7e4f40da57b1479de0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f19fdd47a6371dcbe0760ef6f3c3c5adb31b1bb4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f19fdd47a6371dcbe0760ef6f3c3c5adb31b1bb4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f19fdd47a6371dcbe0760ef6f3c3c5adb31b1bb4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f19fdd47a6371dcbe0760ef6f3c3c5adb31b1bb4/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ac3ef46999ed676ca3775f7b2f461d92f09a542",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ac3ef46999ed676ca3775f7b2f461d92f09a542",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ac3ef46999ed676ca3775f7b2f461d92f09a542"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 77,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a7a2d74c27c028b5a39bca95c3b6a03da402d964",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f19fdd47a6371dcbe0760ef6f3c3c5adb31b1bb4/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f19fdd47a6371dcbe0760ef6f3c3c5adb31b1bb4/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=f19fdd47a6371dcbe0760ef6f3c3c5adb31b1bb4",
        "patch": "@@ -256,6 +256,7 @@ BITCOIN_TESTS =\\\n   test/uint256_tests.cpp \\\n   test/util_tests.cpp \\\n   test/validation_block_tests.cpp \\\n+  test/validation_chainstate_tests.cpp \\\n   test/validation_chainstatemanager_tests.cpp \\\n   test/validation_flush_tests.cpp \\\n   test/validationinterface_tests.cpp \\"
      },
      {
        "sha": "f531b393b87772afe4d54a74cdd7f7c42b9c9827",
        "filename": "src/test/validation_chainstate_tests.cpp",
        "status": "added",
        "additions": 76,
        "deletions": 0,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f19fdd47a6371dcbe0760ef6f3c3c5adb31b1bb4/src/test/validation_chainstate_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f19fdd47a6371dcbe0760ef6f3c3c5adb31b1bb4/src/test/validation_chainstate_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_chainstate_tests.cpp?ref=f19fdd47a6371dcbe0760ef6f3c3c5adb31b1bb4",
        "patch": "@@ -0,0 +1,76 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+//\n+#include <random.h>\n+#include <uint256.h>\n+#include <consensus/validation.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <vector>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_chainstate_tests, TestingSetup)\n+\n+//! Test resizing coins-related CChainState caches during runtime.\n+//!\n+BOOST_AUTO_TEST_CASE(validation_chainstate_resize_caches)\n+{\n+    ChainstateManager manager;\n+\n+    //! Create and add a Coin with DynamicMemoryUsage of 80 bytes to the given view.\n+    auto add_coin = [](CCoinsViewCache& coins_view) -> COutPoint {\n+        Coin newcoin;\n+        uint256 txid = InsecureRand256();\n+        COutPoint outp{txid, 0};\n+        newcoin.nHeight = 1;\n+        newcoin.out.nValue = InsecureRand32();\n+        newcoin.out.scriptPubKey.assign((uint32_t)56, 1);\n+        coins_view.AddCoin(outp, std::move(newcoin), false);\n+\n+        return outp;\n+    };\n+\n+    ENTER_CRITICAL_SECTION(cs_main);\n+    CChainState& c1 = manager.InitializeChainstate();\n+    LEAVE_CRITICAL_SECTION(cs_main);\n+    c1.InitCoinsDB(\n+        /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n+    WITH_LOCK(::cs_main, c1.InitCoinsCache(1 << 23));\n+\n+    // Add a coin to the in-memory cache, upsize once, then downsize.\n+    {\n+        LOCK(::cs_main);\n+        auto outpoint = add_coin(c1.CoinsTip());\n+\n+        // Set a meaningless bestblock value in the coinsview cache - otherwise we won't\n+        // flush during ResizecoinsCaches() and will subsequently hit an assertion.\n+        c1.CoinsTip().SetBestBlock(InsecureRand256());\n+\n+        BOOST_CHECK(c1.CoinsTip().HaveCoinInCache(outpoint));\n+\n+        c1.ResizeCoinsCaches(\n+            1 << 24,  // upsizing the coinsview cache\n+            1 << 22  // downsizing the coinsdb cache\n+        );\n+\n+        // View should still have the coin cached, since we haven't destructed the cache on upsize.\n+        BOOST_CHECK(c1.CoinsTip().HaveCoinInCache(outpoint));\n+\n+        c1.ResizeCoinsCaches(\n+            1 << 22,  // downsizing the coinsview cache\n+            1 << 23  // upsizing the coinsdb cache\n+        );\n+\n+        // The view cache should be empty since we had to destruct to downsize.\n+        BOOST_CHECK(!c1.CoinsTip().HaveCoinInCache(outpoint));\n+    }\n+\n+    // Avoid triggering the address sanitizer.\n+    WITH_LOCK(::cs_main, manager.Unload());\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]