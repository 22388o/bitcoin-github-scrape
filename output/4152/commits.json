[
  {
    "sha": "a60838d09aed4d976e9343e8329d61afff204435",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNjA4MzhkMDlhZWQ0ZDk3NmU5MzQzZTgzMjlkNjFhZmZmMjA0NDM1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-05-08T12:15:19Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-05-23T07:45:04Z"
      },
      "message": "Replace non-threadsafe strerror\n\nLog the name of the error as well as the error code if a network problem\nhappens. This makes network troubleshooting more convenient.\n\nUse thread-safe strerror_r and the WIN32 equivalent FormatMessage.",
      "tree": {
        "sha": "bb7d9b040b6d8b77c3d57fd8abd903ae02d19231",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb7d9b040b6d8b77c3d57fd8abd903ae02d19231"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a60838d09aed4d976e9343e8329d61afff204435",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a60838d09aed4d976e9343e8329d61afff204435",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a60838d09aed4d976e9343e8329d61afff204435",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a60838d09aed4d976e9343e8329d61afff204435/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8cd900711c0396ac3a96ffd40f43f0e9ec76fadb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8cd900711c0396ac3a96ffd40f43f0e9ec76fadb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8cd900711c0396ac3a96ffd40f43f0e9ec76fadb"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 53,
      "deletions": 16
    },
    "files": [
      {
        "sha": "3a8d33a5a0102b80908c42842cbfdd21eb8e34da",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a60838d09aed4d976e9343e8329d61afff204435/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a60838d09aed4d976e9343e8329d61afff204435/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=a60838d09aed4d976e9343e8329d61afff204435",
        "patch": "@@ -303,6 +303,8 @@ INCLUDES=\"$INCLUDES $PTHREAD_CFLAGS\"\n # they also need to be passed down to any subprojects. Pull the results out of\n # the cache and add them to CPPFLAGS.\n AC_SYS_LARGEFILE\n+# detect POSIX or GNU variant of strerror_r\n+AC_FUNC_STRERROR_R\n \n if test x$ac_cv_sys_file_offset_bits != x &&\n    test x$ac_cv_sys_file_offset_bits != xno &&"
      },
      {
        "sha": "4cbd26a56372d611939030f9d7d48b65ec130e9c",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a60838d09aed4d976e9343e8329d61afff204435/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a60838d09aed4d976e9343e8329d61afff204435/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=a60838d09aed4d976e9343e8329d61afff204435",
        "patch": "@@ -178,7 +178,7 @@ bool RecvLine(SOCKET hSocket, string& strLine)\n             {\n                 // socket error\n                 int nErr = WSAGetLastError();\n-                LogPrint(\"net\", \"recv failed: %d\\n\", nErr);\n+                LogPrint(\"net\", \"recv failed: %s\\n\", NetworkErrorString(nErr));\n                 return false;\n             }\n         }\n@@ -489,10 +489,10 @@ CNode* ConnectNode(CAddress addrConnect, const char *pszDest)\n #ifdef WIN32\n         u_long nOne = 1;\n         if (ioctlsocket(hSocket, FIONBIO, &nOne) == SOCKET_ERROR)\n-            LogPrintf(\"ConnectSocket() : ioctlsocket non-blocking setting failed, error %d\\n\", WSAGetLastError());\n+            LogPrintf(\"ConnectSocket() : ioctlsocket non-blocking setting failed, error %s\\n\", NetworkErrorString(WSAGetLastError()));\n #else\n         if (fcntl(hSocket, F_SETFL, O_NONBLOCK) == SOCKET_ERROR)\n-            LogPrintf(\"ConnectSocket() : fcntl non-blocking setting failed, error %d\\n\", errno);\n+            LogPrintf(\"ConnectSocket() : fcntl non-blocking setting failed, error %s\\n\", NetworkErrorString(errno));\n #endif\n \n         // Add node\n@@ -736,7 +736,7 @@ void SocketSendData(CNode *pnode)\n                 int nErr = WSAGetLastError();\n                 if (nErr != WSAEWOULDBLOCK && nErr != WSAEMSGSIZE && nErr != WSAEINTR && nErr != WSAEINPROGRESS)\n                 {\n-                    LogPrintf(\"socket send error %d\\n\", nErr);\n+                    LogPrintf(\"socket send error %s\\n\", NetworkErrorString(nErr));\n                     pnode->CloseSocketDisconnect();\n                 }\n             }\n@@ -896,7 +896,7 @@ void ThreadSocketHandler()\n             if (have_fds)\n             {\n                 int nErr = WSAGetLastError();\n-                LogPrintf(\"socket select error %d\\n\", nErr);\n+                LogPrintf(\"socket select error %s\\n\", NetworkErrorString(nErr));\n                 for (unsigned int i = 0; i <= hSocketMax; i++)\n                     FD_SET(i, &fdsetRecv);\n             }\n@@ -933,7 +933,7 @@ void ThreadSocketHandler()\n             {\n                 int nErr = WSAGetLastError();\n                 if (nErr != WSAEWOULDBLOCK)\n-                    LogPrintf(\"socket error accept failed: %d\\n\", nErr);\n+                    LogPrintf(\"socket error accept failed: %s\\n\", NetworkErrorString(nErr));\n             }\n             else if (nInbound >= nMaxConnections - MAX_OUTBOUND_CONNECTIONS)\n             {\n@@ -1007,7 +1007,7 @@ void ThreadSocketHandler()\n                             if (nErr != WSAEWOULDBLOCK && nErr != WSAEMSGSIZE && nErr != WSAEINTR && nErr != WSAEINPROGRESS)\n                             {\n                                 if (!pnode->fDisconnect)\n-                                    LogPrintf(\"socket recv error %d\\n\", nErr);\n+                                    LogPrintf(\"socket recv error %s\\n\", NetworkErrorString(nErr));\n                                 pnode->CloseSocketDisconnect();\n                             }\n                         }\n@@ -1585,7 +1585,7 @@ bool BindListenPort(const CService &addrBind, string& strError)\n     SOCKET hListenSocket = socket(((struct sockaddr*)&sockaddr)->sa_family, SOCK_STREAM, IPPROTO_TCP);\n     if (hListenSocket == INVALID_SOCKET)\n     {\n-        strError = strprintf(\"Error: Couldn't open socket for incoming connections (socket returned error %d)\", WSAGetLastError());\n+        strError = strprintf(\"Error: Couldn't open socket for incoming connections (socket returned error %s)\", NetworkErrorString(WSAGetLastError()));\n         LogPrintf(\"%s\\n\", strError);\n         return false;\n     }\n@@ -1609,7 +1609,7 @@ bool BindListenPort(const CService &addrBind, string& strError)\n     if (fcntl(hListenSocket, F_SETFL, O_NONBLOCK) == SOCKET_ERROR)\n #endif\n     {\n-        strError = strprintf(\"Error: Couldn't set properties on socket for incoming connections (error %d)\", WSAGetLastError());\n+        strError = strprintf(\"Error: Couldn't set properties on socket for incoming connections (error %s)\", NetworkErrorString(WSAGetLastError()));\n         LogPrintf(\"%s\\n\", strError);\n         return false;\n     }\n@@ -1638,7 +1638,7 @@ bool BindListenPort(const CService &addrBind, string& strError)\n         if (nErr == WSAEADDRINUSE)\n             strError = strprintf(_(\"Unable to bind to %s on this computer. Bitcoin Core is probably already running.\"), addrBind.ToString());\n         else\n-            strError = strprintf(_(\"Unable to bind to %s on this computer (bind returned error %d, %s)\"), addrBind.ToString(), nErr, strerror(nErr));\n+            strError = strprintf(_(\"Unable to bind to %s on this computer (bind returned error %s)\"), addrBind.ToString(), NetworkErrorString(nErr));\n         LogPrintf(\"%s\\n\", strError);\n         return false;\n     }\n@@ -1647,7 +1647,7 @@ bool BindListenPort(const CService &addrBind, string& strError)\n     // Listen for incoming connections\n     if (listen(hListenSocket, SOMAXCONN) == SOCKET_ERROR)\n     {\n-        strError = strprintf(_(\"Error: Listening for incoming connections failed (listen returned error %d)\"), WSAGetLastError());\n+        strError = strprintf(_(\"Error: Listening for incoming connections failed (listen returned error %s)\"), NetworkErrorString(WSAGetLastError()));\n         LogPrintf(\"%s\\n\", strError);\n         return false;\n     }\n@@ -1785,7 +1785,7 @@ class CNetCleanup\n         BOOST_FOREACH(SOCKET hListenSocket, vhListenSocket)\n             if (hListenSocket != INVALID_SOCKET)\n                 if (closesocket(hListenSocket) == SOCKET_ERROR)\n-                    LogPrintf(\"closesocket(hListenSocket) failed with error %d\\n\", WSAGetLastError());\n+                    LogPrintf(\"closesocket(hListenSocket) failed with error %s\\n\", NetworkErrorString(WSAGetLastError()));\n \n         // clean up some globals (to help leak detection)\n         BOOST_FOREACH(CNode *pnode, vNodes)"
      },
      {
        "sha": "e24a0a195c1962eb38d6d36f38183877a484e5d1",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 4,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a60838d09aed4d976e9343e8329d61afff204435/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a60838d09aed4d976e9343e8329d61afff204435/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=a60838d09aed4d976e9343e8329d61afff204435",
        "patch": "@@ -361,7 +361,7 @@ bool static ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRe\n             }\n             if (nRet == SOCKET_ERROR)\n             {\n-                LogPrintf(\"select() for %s failed: %i\\n\", addrConnect.ToString(), WSAGetLastError());\n+                LogPrintf(\"select() for %s failed: %s\\n\", addrConnect.ToString(), NetworkErrorString(WSAGetLastError()));\n                 closesocket(hSocket);\n                 return false;\n             }\n@@ -372,13 +372,13 @@ bool static ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRe\n             if (getsockopt(hSocket, SOL_SOCKET, SO_ERROR, &nRet, &nRetSize) == SOCKET_ERROR)\n #endif\n             {\n-                LogPrintf(\"getsockopt() for %s failed: %i\\n\", addrConnect.ToString(), WSAGetLastError());\n+                LogPrintf(\"getsockopt() for %s failed: %s\\n\", addrConnect.ToString(), NetworkErrorString(WSAGetLastError()));\n                 closesocket(hSocket);\n                 return false;\n             }\n             if (nRet != 0)\n             {\n-                LogPrintf(\"connect() to %s failed after select(): %s\\n\", addrConnect.ToString(), strerror(nRet));\n+                LogPrintf(\"connect() to %s failed after select(): %s\\n\", addrConnect.ToString(), NetworkErrorString(nRet));\n                 closesocket(hSocket);\n                 return false;\n             }\n@@ -389,7 +389,7 @@ bool static ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRe\n         else\n #endif\n         {\n-            LogPrintf(\"connect() to %s failed: %i\\n\", addrConnect.ToString(), WSAGetLastError());\n+            LogPrintf(\"connect() to %s failed: %s\\n\", addrConnect.ToString(), NetworkErrorString(WSAGetLastError()));\n             closesocket(hSocket);\n             return false;\n         }\n@@ -1237,3 +1237,36 @@ bool operator!=(const CSubNet& a, const CSubNet& b)\n {\n     return !(a==b);\n }\n+\n+#ifdef WIN32\n+std::string NetworkErrorString(int err)\n+{\n+    char buf[256];\n+    buf[0] = 0;\n+    if(FormatMessageA(FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS | FORMAT_MESSAGE_MAX_WIDTH_MASK,\n+            NULL, err, MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),\n+            buf, sizeof(buf), NULL))\n+    {\n+        return strprintf(\"%s (%d)\", buf, err);\n+    }\n+    else\n+    {\n+        return strprintf(\"Unknown error (%d)\", err);\n+    }\n+}\n+#else\n+std::string NetworkErrorString(int err)\n+{\n+    char buf[256];\n+    const char *s = buf;\n+    buf[0] = 0;\n+    /* Too bad there are two incompatible implementations of the\n+     * thread-safe strerror. */\n+#ifdef STRERROR_R_CHAR_P /* GNU variant can return a pointer outside the passed buffer */\n+    s = strerror_r(err, buf, sizeof(buf));\n+#else /* POSIX variant always returns message in buffer */\n+    (void) strerror_r(err, buf, sizeof(buf));\n+#endif\n+    return strprintf(\"%s (%d)\", s, err);\n+}\n+#endif"
      },
      {
        "sha": "5fd8be4aca1a4c884629aec664313fb6aababa4f",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a60838d09aed4d976e9343e8329d61afff204435/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a60838d09aed4d976e9343e8329d61afff204435/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=a60838d09aed4d976e9343e8329d61afff204435",
        "patch": "@@ -179,5 +179,7 @@ bool Lookup(const char *pszName, std::vector<CService>& vAddr, int portDefault =\n bool LookupNumeric(const char *pszName, CService& addr, int portDefault = 0);\n bool ConnectSocket(const CService &addr, SOCKET& hSocketRet, int nTimeout = nConnectTimeout);\n bool ConnectSocketByName(CService &addr, SOCKET& hSocketRet, const char *pszDest, int portDefault = 0, int nTimeout = nConnectTimeout);\n+/** Return readable error string for a network error code */\n+std::string NetworkErrorString(int err);\n \n #endif"
      }
    ]
  },
  {
    "sha": "3e8ac6af9a993e262d1160fb2e6e1e1f1d5d19f2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZThhYzZhZjlhOTkzZTI2MmQxMTYwZmIyZTZlMWUxZjFkNWQxOWYy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-05-08T16:01:10Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-05-23T13:23:11Z"
      },
      "message": "Replace non-threadsafe gmtime and setlocale\n\nMake DateTimeStrFormat use boost::posix_time.\n\nAlso re-enable the util_DateTimeStrFormat tests, as they are no\nlonger platform specific.",
      "tree": {
        "sha": "d6b1b2b531923e73bc5142693009d38b4a628d1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d6b1b2b531923e73bc5142693009d38b4a628d1a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3e8ac6af9a993e262d1160fb2e6e1e1f1d5d19f2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJTf0vBAAoJEHSBCwEjRsmmzgIH/Apb9l1IVjzhZd9SV7B21ycK\nkWj/qmrkJm/y8o0Yy9AZPxCZIdkmhuItzyV+rpc8y0y1/8DbkPKVn7k3oDbvq9z7\nd79Bgc1bnnbEmAhPwMWWGkYPCWWdbYFMYVaS1yxya8HKUR34dMbAY2KZezLS5IIt\nrCDAfcu2rZcIVGNmNBuSvySj8aID5CPt6BtGmx6uGWRXMbYagpuZYdk/X3J2Vy5I\naswk38IDu7B6WQmNWOaCehIVMk4Ycv9ZVgQxB9eqDXzrM6iDzps9qc8R+y59kLNb\nAVH8v7GTiLGhmBFOi/dNIGYUPFfuvwXAH+cGtEtFZky/3qkWC7TYybSL8XJwVYQ=\n=Uzj2\n-----END PGP SIGNATURE-----",
        "payload": "tree d6b1b2b531923e73bc5142693009d38b4a628d1a\nparent a60838d09aed4d976e9343e8329d61afff204435\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1399564870 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1400851391 +0200\n\nReplace non-threadsafe gmtime and setlocale\n\nMake DateTimeStrFormat use boost::posix_time.\n\nAlso re-enable the util_DateTimeStrFormat tests, as they are no\nlonger platform specific.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e8ac6af9a993e262d1160fb2e6e1e1f1d5d19f2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3e8ac6af9a993e262d1160fb2e6e1e1f1d5d19f2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e8ac6af9a993e262d1160fb2e6e1e1f1d5d19f2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a60838d09aed4d976e9343e8329d61afff204435",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a60838d09aed4d976e9343e8329d61afff204435",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a60838d09aed4d976e9343e8329d61afff204435"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 15,
      "deletions": 20
    },
    "files": [
      {
        "sha": "2718f81783c3e3fbb516c85f2277cf1a54aaf55a",
        "filename": "src/rpcprotocol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 9,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e8ac6af9a993e262d1160fb2e6e1e1f1d5d19f2/src/rpcprotocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e8ac6af9a993e262d1160fb2e6e1e1f1d5d19f2/src/rpcprotocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.cpp?ref=3e8ac6af9a993e262d1160fb2e6e1e1f1d5d19f2",
        "patch": "@@ -51,15 +51,7 @@ string HTTPPost(const string& strMsg, const map<string,string>& mapRequestHeader\n \n static string rfc1123Time()\n {\n-    char buffer[64];\n-    time_t now;\n-    time(&now);\n-    struct tm* now_gmt = gmtime(&now);\n-    string locale(setlocale(LC_TIME, NULL));\n-    setlocale(LC_TIME, \"C\"); // we want POSIX (aka \"C\") weekday/month strings\n-    strftime(buffer, sizeof(buffer), \"%a, %d %b %Y %H:%M:%S +0000\", now_gmt);\n-    setlocale(LC_TIME, locale.c_str());\n-    return string(buffer);\n+    return DateTimeStrFormat(\"%a, %d %b %Y %H:%M:%S +0000\", GetTime());\n }\n \n string HTTPReply(int nStatus, const string& strMsg, bool keepalive)"
      },
      {
        "sha": "0e53a57593e2b00f5034b4840ed7b10d439bbd30",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e8ac6af9a993e262d1160fb2e6e1e1f1d5d19f2/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e8ac6af9a993e262d1160fb2e6e1e1f1d5d19f2/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=3e8ac6af9a993e262d1160fb2e6e1e1f1d5d19f2",
        "patch": "@@ -108,13 +108,11 @@ BOOST_AUTO_TEST_CASE(util_HexStr)\n \n BOOST_AUTO_TEST_CASE(util_DateTimeStrFormat)\n {\n-/*These are platform-dependant and thus removed to avoid useless test failures\n     BOOST_CHECK_EQUAL(DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", 0), \"1970-01-01 00:00:00\");\n     BOOST_CHECK_EQUAL(DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", 0x7FFFFFFF), \"2038-01-19 03:14:07\");\n-    // Formats used within Bitcoin\n     BOOST_CHECK_EQUAL(DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", 1317425777), \"2011-09-30 23:36:17\");\n     BOOST_CHECK_EQUAL(DateTimeStrFormat(\"%Y-%m-%d %H:%M\", 1317425777), \"2011-09-30 23:36\");\n-*/\n+    BOOST_CHECK_EQUAL(DateTimeStrFormat(\"%a, %d %b %Y %H:%M:%S +0000\", 1317425777), \"Fri, 30 Sep 2011 23:36:17 +0000\");\n }\n \n BOOST_AUTO_TEST_CASE(util_ParseParameters)"
      },
      {
        "sha": "f7ceb3e95ce60526253c88b88171f85ecb273781",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e8ac6af9a993e262d1160fb2e6e1e1f1d5d19f2/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e8ac6af9a993e262d1160fb2e6e1e1f1d5d19f2/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=3e8ac6af9a993e262d1160fb2e6e1e1f1d5d19f2",
        "patch": "@@ -14,6 +14,8 @@\n \n #include <stdarg.h>\n \n+#include <boost/date_time/posix_time/posix_time.hpp>\n+\n #ifndef WIN32\n // for posix_fallocate\n #ifdef __linux_\n@@ -1400,3 +1402,13 @@ void SetupEnvironment()\n     }\n     #endif\n }\n+\n+std::string DateTimeStrFormat(const char* pszFormat, int64_t nTime)\n+{\n+    // std::locale takes ownership of the pointer\n+    std::locale loc(std::locale::classic(), new boost::posix_time::time_facet(pszFormat));\n+    std::stringstream ss;\n+    ss.imbue(loc);\n+    ss << boost::posix_time::from_time_t(nTime);\n+    return ss.str();\n+}"
      },
      {
        "sha": "9e899b508463d676f7f43c2752708ebabb17f971",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 8,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e8ac6af9a993e262d1160fb2e6e1e1f1d5d19f2/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e8ac6af9a993e262d1160fb2e6e1e1f1d5d19f2/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=3e8ac6af9a993e262d1160fb2e6e1e1f1d5d19f2",
        "patch": "@@ -325,14 +325,7 @@ inline int64_t GetTimeMicros()\n             boost::posix_time::ptime(boost::gregorian::date(1970,1,1))).total_microseconds();\n }\n \n-inline std::string DateTimeStrFormat(const char* pszFormat, int64_t nTime)\n-{\n-    time_t n = nTime;\n-    struct tm* ptmTime = gmtime(&n);\n-    char pszTime[200];\n-    strftime(pszTime, sizeof(pszTime), pszFormat, ptmTime);\n-    return pszTime;\n-}\n+std::string DateTimeStrFormat(const char* pszFormat, int64_t nTime);\n \n inline bool IsSwitchChar(char c)\n {"
      }
    ]
  }
]