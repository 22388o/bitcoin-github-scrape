[
  {
    "sha": "dce8360e44d5330cc9f9d09c9b09ac9237237204",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkY2U4MzYwZTQ0ZDUzMzBjYzlmOWQwOWM5YjA5YWM5MjM3MjM3MjA0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-03-19T12:34:06Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-05-13T19:52:57Z"
      },
      "message": "Reduce checkpoints' effect on consensus.\n\nInstead of only checking height to decide whether to disable script checks,\nactually check whether a block is an ancestor of a checkpoint, up to which\nheaders have been validated. This means that we don't have to prevent\naccepting a side branch anymore - it will be safe, just less fast to\ndo.\n\nWe still need to prevent being fed a multitude of low-difficulty headers\nfilling up our memory. The mechanism for that is unchanged for now: once\na checkpoint is reached with headers, no headers chain branching off before\nthat point are allowed anymore.",
      "tree": {
        "sha": "adeb8c21937470d6bd326f6a8cf2d9ae5f8904b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/adeb8c21937470d6bd326f6a8cf2d9ae5f8904b9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dce8360e44d5330cc9f9d09c9b09ac9237237204",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dce8360e44d5330cc9f9d09c9b09ac9237237204",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dce8360e44d5330cc9f9d09c9b09ac9237237204",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dce8360e44d5330cc9f9d09c9b09ac9237237204/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "23254131a3fdaeae9c50dafca6d0addbbf235820",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23254131a3fdaeae9c50dafca6d0addbbf235820",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/23254131a3fdaeae9c50dafca6d0addbbf235820"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 15,
      "deletions": 38
    },
    "files": [
      {
        "sha": "5b8ce076c479329f63e436fdf1f5a26d3fc75296",
        "filename": "src/chain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dce8360e44d5330cc9f9d09c9b09ac9237237204/src/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dce8360e44d5330cc9f9d09c9b09ac9237237204/src/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.cpp?ref=dce8360e44d5330cc9f9d09c9b09ac9237237204",
        "patch": "@@ -82,9 +82,10 @@ CBlockIndex* CBlockIndex::GetAncestor(int height)\n     while (heightWalk > height) {\n         int heightSkip = GetSkipHeight(heightWalk);\n         int heightSkipPrev = GetSkipHeight(heightWalk - 1);\n-        if (heightSkip == height ||\n-            (heightSkip > height && !(heightSkipPrev < heightSkip - 2 &&\n-                                      heightSkipPrev >= height))) {\n+        if (pindexWalk->pskip != NULL &&\n+            (heightSkip == height ||\n+             (heightSkip > height && !(heightSkipPrev < heightSkip - 2 &&\n+                                       heightSkipPrev >= height)))) {\n             // Only follow pskip if pprev->pskip isn't better than pskip->pprev.\n             pindexWalk = pindexWalk->pskip;\n             heightWalk = heightSkip;"
      },
      {
        "sha": "87f4ad7f2ec6a079a432d5cc168d0fd04816799e",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dce8360e44d5330cc9f9d09c9b09ac9237237204/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dce8360e44d5330cc9f9d09c9b09ac9237237204/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=dce8360e44d5330cc9f9d09c9b09ac9237237204",
        "patch": "@@ -24,15 +24,6 @@ namespace Checkpoints {\n      */\n     static const double SIGCHECK_VERIFICATION_FACTOR = 5.0;\n \n-    bool CheckBlock(const CCheckpointData& data, int nHeight, const uint256& hash)\n-    {\n-        const MapCheckpoints& checkpoints = data.mapCheckpoints;\n-\n-        MapCheckpoints::const_iterator i = checkpoints.find(nHeight);\n-        if (i == checkpoints.end()) return true;\n-        return hash == i->second;\n-    }\n-\n     //! Guess how far we are in the verification process at the given block index\n     double GuessVerificationProgress(const CCheckpointData& data, CBlockIndex *pindex, bool fSigchecks) {\n         if (pindex==NULL)"
      },
      {
        "sha": "001e3cc8015abdb9e582661c61ff855b0ec0645a",
        "filename": "src/checkpoints.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dce8360e44d5330cc9f9d09c9b09ac9237237204/src/checkpoints.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dce8360e44d5330cc9f9d09c9b09ac9237237204/src/checkpoints.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.h?ref=dce8360e44d5330cc9f9d09c9b09ac9237237204",
        "patch": "@@ -26,9 +26,6 @@ struct CCheckpointData {\n     double fTransactionsPerDay;\n };\n \n-//! Returns true if block passes checkpoint checks\n-bool CheckBlock(const CCheckpointData& data, int nHeight, const uint256& hash);\n-\n //! Return conservative estimate of total number of blocks, 0 if unknown\n int GetTotalBlocksEstimate(const CCheckpointData& data);\n "
      },
      {
        "sha": "1905bbf8b869ffa92da80cb6c4e4bb881815a83f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dce8360e44d5330cc9f9d09c9b09ac9237237204/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dce8360e44d5330cc9f9d09c9b09ac9237237204/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=dce8360e44d5330cc9f9d09c9b09ac9237237204",
        "patch": "@@ -347,7 +347,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageGroup(_(\"Debugging/Testing options:\"));\n     if (GetBoolArg(\"-help-debug\", false))\n     {\n-        strUsage += HelpMessageOpt(\"-checkpoints\", strprintf(_(\"Only accept block chain matching built-in checkpoints (default: %u)\"), 1));\n+        strUsage += HelpMessageOpt(\"-checkpoints\", strprintf(_(\"Disable expensive verification for known chain history (default: %u)\"), 1));\n         strUsage += HelpMessageOpt(\"-dblogsize=<n>\", strprintf(_(\"Flush database activity from memory pool to disk log every <n> megabytes (default: %u)\"), 100));\n         strUsage += HelpMessageOpt(\"-disablesafemode\", strprintf(_(\"Disable safemode, override a real safe mode event (default: %u)\"), 0));\n         strUsage += HelpMessageOpt(\"-testsafemode\", strprintf(_(\"Force safe mode (default: %u)\"), 0));"
      },
      {
        "sha": "39da3406a8f2ad27de16dc2d271d462cc79dd6f1",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dce8360e44d5330cc9f9d09c9b09ac9237237204/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dce8360e44d5330cc9f9d09c9b09ac9237237204/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=dce8360e44d5330cc9f9d09c9b09ac9237237204",
        "patch": "@@ -1714,7 +1714,14 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         return true;\n     }\n \n-    bool fScriptChecks = (!fCheckpointsEnabled || pindex->nHeight >= Checkpoints::GetTotalBlocksEstimate(chainparams.Checkpoints()));\n+    bool fScriptChecks = true;\n+    if (fCheckpointsEnabled) {\n+        CBlockIndex *pindexLastCheckpoint = Checkpoints::GetLastCheckpoint(chainparams.Checkpoints());\n+        if (pindexLastCheckpoint && pindexLastCheckpoint->GetAncestor(pindex->nHeight) == pindex) {\n+            // This block is an ancestor of a checkpoint: disable script checks\n+            fScriptChecks = false;\n+        }\n+    }\n \n     // Do not allow blocks that contain transactions which 'overwrite' older transactions,\n     // unless those are already completely spent.\n@@ -2630,13 +2637,8 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n         return state.Invalid(error(\"%s: block's timestamp is too early\", __func__),\n                              REJECT_INVALID, \"time-too-old\");\n \n-    if(fCheckpointsEnabled)\n+    if (fCheckpointsEnabled)\n     {\n-        // Check that the block chain matches the known block chain up to a checkpoint\n-        if (!Checkpoints::CheckBlock(chainParams.Checkpoints(), nHeight, hash))\n-            return state.DoS(100, error(\"%s: rejected by checkpoint lock-in at %d\", __func__, nHeight),\n-                             REJECT_CHECKPOINT, \"checkpoint mismatch\");\n-\n         // Don't accept any forks from the main chain prior to last checkpoint\n         CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint(chainParams.Checkpoints());\n         if (pcheckpoint && nHeight < pcheckpoint->nHeight)"
      },
      {
        "sha": "703cf307d12a34933a14e15733982057083baea9",
        "filename": "src/test/Checkpoints_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 15,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dce8360e44d5330cc9f9d09c9b09ac9237237204/src/test/Checkpoints_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dce8360e44d5330cc9f9d09c9b09ac9237237204/src/test/Checkpoints_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/Checkpoints_tests.cpp?ref=dce8360e44d5330cc9f9d09c9b09ac9237237204",
        "patch": "@@ -21,21 +21,7 @@ BOOST_FIXTURE_TEST_SUITE(Checkpoints_tests, BasicTestingSetup)\n BOOST_AUTO_TEST_CASE(sanity)\n {\n     const Checkpoints::CCheckpointData& checkpoints = Params(CBaseChainParams::MAIN).Checkpoints();\n-    uint256 p11111 = uint256S(\"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d\");\n-    uint256 p134444 = uint256S(\"0x00000000000005b12ffd4cd315cd34ffd4a594f430ac814c91184a0d42d2b0fe\");\n-    BOOST_CHECK(Checkpoints::CheckBlock(checkpoints, 11111, p11111));\n-    BOOST_CHECK(Checkpoints::CheckBlock(checkpoints, 134444, p134444));\n-\n-    \n-    // Wrong hashes at checkpoints should fail:\n-    BOOST_CHECK(!Checkpoints::CheckBlock(checkpoints, 11111, p134444));\n-    BOOST_CHECK(!Checkpoints::CheckBlock(checkpoints, 134444, p11111));\n-\n-    // ... but any hash not at a checkpoint should succeed:\n-    BOOST_CHECK(Checkpoints::CheckBlock(checkpoints, 11111+1, p134444));\n-    BOOST_CHECK(Checkpoints::CheckBlock(checkpoints, 134444+1, p11111));\n-\n     BOOST_CHECK(Checkpoints::GetTotalBlocksEstimate(checkpoints) >= 134444);\n-}    \n+}\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]