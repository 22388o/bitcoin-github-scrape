[
  {
    "sha": "ddddab87fea3cb25a3eba6ee865778fbc92b9abb",
    "node_id": "C_kwDOABII59oAKGRkZGRhYjg3ZmVhM2NiMjVhM2ViYTZlZTg2NTc3OGZiYzkyYjlhYmI",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-12-03T13:48:19Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-12-03T13:46:31Z"
      },
      "message": "Remove unused update_lock_points\n\nCan be reviewed with --color-moved=dimmed-zebra",
      "tree": {
        "sha": "b3325f01a0cbd76a8e0dbbe8df9d409f10bf0b31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b3325f01a0cbd76a8e0dbbe8df9d409f10bf0b31"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ddddab87fea3cb25a3eba6ee865778fbc92b9abb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgIgQv/ZYpgyUHlvheck0aSh5dySXNCNwCrDWU/PLtx6EubkyoLWw3JksfkN9q6\nNWL1yDC++JVPAtYS4kwTCJiocMzIPWEci4yBKoA8z+t7vmI25twyvKqPYyqI6DrB\nFXf/AnAfob07JHWgXw5/eR4rIXtbVvO+BG6//T4TZCevGaRuWiskm+W1Y3tdbybC\n13HIr9rxF+Df2DPq+kR7aYOABxgwisNX7MW/hxQWh3Q5l/Rt8P+a8vQkrmo+ZGgE\nKoBZ+yzSrcF9FI0z8vz4DxVU7vWWOHe1mUOxHDMT16rHgWnTDwGyeuY6mWlxGrKu\nvJXyUK4a2USZCS46XsAiBtebjMjmplPKxnB3LqLXFSrRvsB+ZDSVZv27KftC6PPZ\nIdg0v91XFFljLACwi10fNgxWI5mCISl/fX488uAN4OvfMpyU11IO0cP0mh7mSZRn\nkrTtVN24t9QCUnDXIvhBtFzk7hKITOPx3cE0KC+gULZK504DagvrQSdGM0R8yBxV\nqyTKkbtP\n=OmyC\n-----END PGP SIGNATURE-----",
        "payload": "tree b3325f01a0cbd76a8e0dbbe8df9d409f10bf0b31\nparent 57982f419e36d0023c83af2dd0d683ca3160dc2a\nauthor MarcoFalke <falke.marco@gmail.com> 1638539299 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1638539191 +0100\n\nRemove unused update_lock_points\n\nCan be reviewed with --color-moved=dimmed-zebra\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddddab87fea3cb25a3eba6ee865778fbc92b9abb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ddddab87fea3cb25a3eba6ee865778fbc92b9abb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddddab87fea3cb25a3eba6ee865778fbc92b9abb/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "57982f419e36d0023c83af2dd0d683ca3160dc2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57982f419e36d0023c83af2dd0d683ca3160dc2a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/57982f419e36d0023c83af2dd0d683ca3160dc2a"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 23,
      "deletions": 50
    },
    "files": [
      {
        "sha": "f3383baa2afe23413f8b46c2f44fd06c8a324352",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 40,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddddab87fea3cb25a3eba6ee865778fbc92b9abb/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddddab87fea3cb25a3eba6ee865778fbc92b9abb/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=ddddab87fea3cb25a3eba6ee865778fbc92b9abb",
        "patch": "@@ -5,7 +5,6 @@\n \n #include <txmempool.h>\n \n-#include <chain.h>\n #include <coins.h>\n #include <consensus/consensus.h>\n #include <consensus/tx_verify.h>\n@@ -64,33 +63,6 @@ struct update_fee_delta\n     int64_t feeDelta;\n };\n \n-struct update_lock_points\n-{\n-    explicit update_lock_points(const LockPoints& _lp) : lp(_lp) { }\n-\n-    void operator() (CTxMemPoolEntry &e) { e.UpdateLockPoints(lp); }\n-\n-private:\n-    const LockPoints& lp;\n-};\n-\n-bool TestLockPointValidity(CChain& active_chain, const LockPoints& lp)\n-{\n-    AssertLockHeld(cs_main);\n-    // If there are relative lock times then the maxInputBlock will be set\n-    // If there are no relative lock times, the LockPoints don't depend on the chain\n-    if (lp.maxInputBlock) {\n-        // Check whether active_chain is an extension of the block at which the LockPoints\n-        // calculation was valid.  If not LockPoints are no longer valid\n-        if (!active_chain.Contains(lp.maxInputBlock)) {\n-            return false;\n-        }\n-    }\n-\n-    // LockPoints still valid\n-    return true;\n-}\n-\n CTxMemPoolEntry::CTxMemPoolEntry(const CTransactionRef& tx, CAmount fee,\n                                  int64_t time, unsigned int entry_height,\n                                  bool spends_coinbase, int64_t sigops_cost, LockPoints lp)\n@@ -116,11 +88,6 @@ void CTxMemPoolEntry::UpdateFeeDelta(int64_t newFeeDelta)\n     feeDelta = newFeeDelta;\n }\n \n-void CTxMemPoolEntry::UpdateLockPoints(const LockPoints& lp)\n-{\n-    lockPoints = lp;\n-}\n-\n size_t CTxMemPoolEntry::GetTxSize() const\n {\n     return GetVirtualTransactionSize(nTxWeight, sigOpCost);\n@@ -633,7 +600,7 @@ void CTxMemPool::removeRecursive(const CTransaction &origTx, MemPoolRemovalReaso\n         RemoveStaged(setAllRemoves, false, reason);\n }\n \n-void CTxMemPool::removeForReorg(CChain& chain, std::function<bool(txiter)> check_final_and_mature)\n+void CTxMemPool::removeForReorg(std::function<bool(txiter)> check_final_and_mature)\n {\n     // Remove transactions spending a coinbase which are now immature and no-longer-final transactions\n     AssertLockHeld(cs);\n@@ -648,12 +615,6 @@ void CTxMemPool::removeForReorg(CChain& chain, std::function<bool(txiter)> check\n         CalculateDescendants(it, setAllRemoves);\n     }\n     RemoveStaged(setAllRemoves, false, MemPoolRemovalReason::REORG);\n-    for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n-        const LockPoints lp{it->GetLockPoints()};\n-        if (!TestLockPointValidity(chain, lp)) {\n-            mapTx.modify(it, update_lock_points(lp));\n-        }\n-    }\n }\n \n void CTxMemPool::removeConflicts(const CTransaction &tx)"
      },
      {
        "sha": "ee8f655f429b1c586f7834bfc2a4200de8249fa1",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 9,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddddab87fea3cb25a3eba6ee865778fbc92b9abb/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddddab87fea3cb25a3eba6ee865778fbc92b9abb/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=ddddab87fea3cb25a3eba6ee865778fbc92b9abb",
        "patch": "@@ -31,7 +31,6 @@\n #include <boost/multi_index_container.hpp>\n \n class CBlockIndex;\n-class CChain;\n class CChainState;\n extern RecursiveMutex cs_main;\n \n@@ -50,11 +49,6 @@ struct LockPoints {\n     CBlockIndex* maxInputBlock{nullptr};\n };\n \n-/**\n- * Test whether the LockPoints height and time are still valid on the current chain\n- */\n-bool TestLockPointValidity(CChain& active_chain, const LockPoints& lp) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n-\n struct CompareIteratorByHash {\n     // SFINAE for T where T is either a pointer type (e.g., a txiter) or a reference_wrapper<T>\n     // (e.g. a wrapped CTxMemPoolEntry&)\n@@ -142,8 +136,6 @@ class CTxMemPoolEntry\n     // Updates the fee delta used for mining priority score, and the\n     // modified fees with descendants.\n     void UpdateFeeDelta(int64_t feeDelta);\n-    // Update the LockPoints after a reorg\n-    void UpdateLockPoints(const LockPoints& lp);\n \n     uint64_t GetCountWithDescendants() const { return nCountWithDescendants; }\n     uint64_t GetSizeWithDescendants() const { return nSizeWithDescendants; }\n@@ -592,7 +584,7 @@ class CTxMemPool\n     /** After reorg, check if mempool entries are now non-final, premature coinbase spends, or have\n      * invalid lockpoints. Update lockpoints and remove entries (and descendants of entries) that\n      * are no longer valid. */\n-    void removeForReorg(CChain& chain, std::function<bool(txiter)> check_final_and_mature) EXCLUSIVE_LOCKS_REQUIRED(cs, cs_main);\n+    void removeForReorg(std::function<bool(txiter)> check_final_and_mature) EXCLUSIVE_LOCKS_REQUIRED(cs, ::cs_main);\n     void removeConflicts(const CTransaction& tx) EXCLUSIVE_LOCKS_REQUIRED(cs);\n     void removeForBlock(const std::vector<CTransactionRef>& vtx, unsigned int nBlockHeight) EXCLUSIVE_LOCKS_REQUIRED(cs);\n "
      },
      {
        "sha": "afab714ef4030b03c053442c63999987f40a456c",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 1,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddddab87fea3cb25a3eba6ee865778fbc92b9abb/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddddab87fea3cb25a3eba6ee865778fbc92b9abb/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=ddddab87fea3cb25a3eba6ee865778fbc92b9abb",
        "patch": "@@ -312,6 +312,26 @@ static bool IsCurrentForFeeEstimation(CChainState& active_chainstate) EXCLUSIVE_\n     return true;\n }\n \n+/**\n+ * Test whether the LockPoints height and time are still valid on the current chain\n+ */\n+static bool TestLockPointValidity(CChain& active_chain, const LockPoints& lp) EXCLUSIVE_LOCKS_REQUIRED(::cs_main)\n+{\n+    AssertLockHeld(cs_main);\n+    // If there are relative lock times then the maxInputBlock will be set\n+    // If there are no relative lock times, the LockPoints don't depend on the chain\n+    if (lp.maxInputBlock) {\n+        // Check whether active_chain is an extension of the block at which the LockPoints\n+        // calculation was valid.  If not LockPoints are no longer valid\n+        if (!active_chain.Contains(lp.maxInputBlock)) {\n+            return false;\n+        }\n+    }\n+\n+    // LockPoints still valid\n+    return true;\n+}\n+\n void CChainState::MaybeUpdateMempoolForReorg(\n     DisconnectedBlockTransactions& disconnectpool,\n     bool fAddToMempool)\n@@ -382,7 +402,7 @@ void CChainState::MaybeUpdateMempoolForReorg(\n     };\n \n     // We also need to remove any now-immature transactions\n-    m_mempool->removeForReorg(m_chain, check_final_and_mature);\n+    m_mempool->removeForReorg(check_final_and_mature);\n     // Re-limit mempool size, in case we added any transactions\n     LimitMempoolSize(\n         *m_mempool,"
      }
    ]
  }
]