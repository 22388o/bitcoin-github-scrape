[
  {
    "sha": "c063994a14fd0cf242a034d4212ab8e9c7701add",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMDYzOTk0YTE0ZmQwY2YyNDJhMDM0ZDQyMTJhYjhlOWM3NzAxYWRk",
    "commit": {
      "author": {
        "name": "Evan Klitzke",
        "email": "evan@eklitzke.org",
        "date": "2018-02-20T16:46:52Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-05-12T15:46:29Z"
      },
      "message": "Try to use posix_fadvise with CBufferedFile\n\nThis primarily affects blocks when bitcoin is launched with -reindex, as\nthat causes the block files to be loaded as CBufferedFile objects one at\na time as the reindex progresses.\n\nCo-Authored-By: Luke Dashjr <luke-jr+git@utopios.org>",
      "tree": {
        "sha": "68a551fce777860429418e4c1d7244db98a65d47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/68a551fce777860429418e4c1d7244db98a65d47"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c063994a14fd0cf242a034d4212ab8e9c7701add",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c063994a14fd0cf242a034d4212ab8e9c7701add",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c063994a14fd0cf242a034d4212ab8e9c7701add",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c063994a14fd0cf242a034d4212ab8e9c7701add/comments",
    "author": {
      "login": "eklitzke",
      "id": 2734,
      "node_id": "MDQ6VXNlcjI3MzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eklitzke",
      "html_url": "https://github.com/eklitzke",
      "followers_url": "https://api.github.com/users/eklitzke/followers",
      "following_url": "https://api.github.com/users/eklitzke/following{/other_user}",
      "gists_url": "https://api.github.com/users/eklitzke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
      "organizations_url": "https://api.github.com/users/eklitzke/orgs",
      "repos_url": "https://api.github.com/users/eklitzke/repos",
      "events_url": "https://api.github.com/users/eklitzke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eklitzke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7bcc42b4035b878719d13201286e322989b415c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bcc42b4035b878719d13201286e322989b415c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7bcc42b4035b878719d13201286e322989b415c5"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 54,
      "deletions": 4
    },
    "files": [
      {
        "sha": "3c10fcb9ac0949e20fcac118e01a50c700cf0ca1",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c063994a14fd0cf242a034d4212ab8e9c7701add/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c063994a14fd0cf242a034d4212ab8e9c7701add/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=c063994a14fd0cf242a034d4212ab8e9c7701add",
        "patch": "@@ -8,6 +8,7 @@\n \n #include <support/allocators/zeroafterfree.h>\n #include <serialize.h>\n+#include <util/system.h>\n \n #include <algorithm>\n #include <assert.h>\n@@ -740,11 +741,10 @@ class CBufferedFile\n \n public:\n     CBufferedFile(FILE *fileIn, uint64_t nBufSize, uint64_t nRewindIn, int nTypeIn, int nVersionIn) :\n-        nType(nTypeIn), nVersion(nVersionIn), nSrcPos(0), nReadPos(0), nReadLimit(std::numeric_limits<uint64_t>::max()), nRewind(nRewindIn), vchBuf(nBufSize, 0)\n+        nType(nTypeIn), nVersion(nVersionIn), src(AdviseSequential(fileIn)), nSrcPos(0), nReadPos(0), nReadLimit(std::numeric_limits<uint64_t>::max()), nRewind(nRewindIn), vchBuf(nBufSize, 0)\n     {\n         if (nRewindIn >= nBufSize)\n             throw std::ios_base::failure(\"Rewind limit must be less than buffer size\");\n-        src = fileIn;\n     }\n \n     ~CBufferedFile()\n@@ -762,7 +762,7 @@ class CBufferedFile\n     void fclose()\n     {\n         if (src) {\n-            ::fclose(src);\n+            CloseAndUncache(src);\n             src = nullptr;\n         }\n     }"
      },
      {
        "sha": "a1a96d501d58742cbd6874cfa19d81efb985fbd5",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 1,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c063994a14fd0cf242a034d4212ab8e9c7701add/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c063994a14fd0cf242a034d4212ab8e9c7701add/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=c063994a14fd0cf242a034d4212ab8e9c7701add",
        "patch": "@@ -1020,7 +1020,8 @@ void AllocateFileRange(FILE *file, unsigned int offset, unsigned int length) {\n     ftruncate(fileno(file), static_cast<off_t>(offset) + length);\n #else\n     #if defined(HAVE_POSIX_FALLOCATE)\n-    // Version using posix_fallocate\n+    // Use posix_fallocate to advise the kernel how much data we have to write,\n+    // if this system supports it.\n     off_t nEndPos = (off_t)offset + length;\n     if (0 == posix_fallocate(fileno(file), 0, nEndPos)) return;\n     #endif\n@@ -1040,6 +1041,46 @@ void AllocateFileRange(FILE *file, unsigned int offset, unsigned int length) {\n #endif\n }\n \n+FILE* AdviseSequential(FILE *file) {\n+#if _POSIX_C_SOURCE >= 200112L\n+    // Since this whole thing is advisory anyway, we can ignore any errors\n+    // encountered up to and including the posix_fadvise call. However, we must\n+    // rewind the file to the appropriate position if we've changed the seek\n+    // offset.\n+    if (file == nullptr) {\n+        return nullptr;\n+    }\n+    const int fd = fileno(file);\n+    if (fd == -1) {\n+        return file;\n+    }\n+    const off_t start = lseek(fd, 0, SEEK_CUR);\n+    if (start == -1) {\n+        return file;\n+    }\n+    posix_fadvise(fd, start, 0, POSIX_FADV_WILLNEED);\n+    posix_fadvise(fd, start, 0, POSIX_FADV_SEQUENTIAL);\n+#endif\n+    return file;\n+}\n+\n+int CloseAndUncache(FILE *file) {\n+#if _POSIX_C_SOURCE >= 200112L\n+    // Ignore any errors up to and including the posix_fadvise call since it's\n+    // advisory.\n+    if (file != nullptr) {\n+        const int fd = fileno(file);\n+        if (fd != -1) {\n+            const off_t end = lseek(fd, 0, SEEK_END);\n+            if (end != (off_t)-1) {\n+                posix_fadvise(fd, 0, end, POSIX_FADV_DONTNEED);\n+            }\n+        }\n+    }\n+#endif\n+    return fclose(file);\n+}\n+\n #ifdef WIN32\n fs::path GetSpecialFolderPath(int nFolder, bool fCreate)\n {"
      },
      {
        "sha": "0e163cd8300602a6272a396bac9fd0564043d3a6",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c063994a14fd0cf242a034d4212ab8e9c7701add/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c063994a14fd0cf242a034d4212ab8e9c7701add/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=c063994a14fd0cf242a034d4212ab8e9c7701add",
        "patch": "@@ -71,6 +71,15 @@ bool CheckDiskSpace(const fs::path& dir, uint64_t additional_bytes = 0);\n  */\n std::streampos GetFileSize(const char* path, std::streamsize max = std::numeric_limits<std::streamsize>::max());\n \n+//! Return the original FILE* unchanged. On systems that support it,\n+//! also advise the OS that the file will be accessed sequentially.\n+FILE* AdviseSequential(FILE*);\n+\n+//! Close a file and return the result of fclose(). On systems that\n+//! support it, advise the OS to remove the file contents from the page\n+//! cache (which can help on memory-constrained systems).\n+int CloseAndUncache(FILE*);\n+\n /** Release all directory locks. This is used for unit testing only, at runtime\n  * the global destructor will take care of the locks.\n  */"
      }
    ]
  }
]