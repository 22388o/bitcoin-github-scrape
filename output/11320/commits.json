[
  {
    "sha": "f197a4c515757262eda0accbe762e311335be11b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMTk3YTRjNTE1NzU3MjYyZWRhMGFjY2JlNzYyZTMxMTMzNWJlMTFi",
    "commit": {
      "author": {
        "name": "Chris Moore",
        "email": "dooglus@gmail.com",
        "date": "2017-09-15T19:43:43Z"
      },
      "committer": {
        "name": "Chris Moore",
        "email": "dooglus@gmail.com",
        "date": "2017-09-15T19:46:06Z"
      },
      "message": "Include the wallet name in log messages relating to wallets",
      "tree": {
        "sha": "de2b214aa1ec019d927cc2c3ea07177772237e5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/de2b214aa1ec019d927cc2c3ea07177772237e5d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f197a4c515757262eda0accbe762e311335be11b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f197a4c515757262eda0accbe762e311335be11b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f197a4c515757262eda0accbe762e311335be11b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f197a4c515757262eda0accbe762e311335be11b/comments",
    "author": {
      "login": "dooglus",
      "id": 573356,
      "node_id": "MDQ6VXNlcjU3MzM1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/573356?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dooglus",
      "html_url": "https://github.com/dooglus",
      "followers_url": "https://api.github.com/users/dooglus/followers",
      "following_url": "https://api.github.com/users/dooglus/following{/other_user}",
      "gists_url": "https://api.github.com/users/dooglus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dooglus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dooglus/subscriptions",
      "organizations_url": "https://api.github.com/users/dooglus/orgs",
      "repos_url": "https://api.github.com/users/dooglus/repos",
      "events_url": "https://api.github.com/users/dooglus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dooglus/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dooglus",
      "id": 573356,
      "node_id": "MDQ6VXNlcjU3MzM1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/573356?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dooglus",
      "html_url": "https://github.com/dooglus",
      "followers_url": "https://api.github.com/users/dooglus/followers",
      "following_url": "https://api.github.com/users/dooglus/following{/other_user}",
      "gists_url": "https://api.github.com/users/dooglus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dooglus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dooglus/subscriptions",
      "organizations_url": "https://api.github.com/users/dooglus/orgs",
      "repos_url": "https://api.github.com/users/dooglus/repos",
      "events_url": "https://api.github.com/users/dooglus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dooglus/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "09627b1dd41d1151a709d5ead82a924bf59e3d38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09627b1dd41d1151a709d5ead82a924bf59e3d38",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/09627b1dd41d1151a709d5ead82a924bf59e3d38"
      }
    ],
    "stats": {
      "total": 99,
      "additions": 50,
      "deletions": 49
    },
    "files": [
      {
        "sha": "96d92276e2c7520566d7923fb06a7fa1c55cfa39",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f197a4c515757262eda0accbe762e311335be11b/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f197a4c515757262eda0accbe762e311335be11b/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=f197a4c515757262eda0accbe762e311335be11b",
        "patch": "@@ -229,7 +229,7 @@ bool CDB::Recover(const std::string& filename, void *callbackDataIn, bool (*reco\n bool CDB::VerifyEnvironment(const std::string& walletFile, const fs::path& dataDir, std::string& errorStr)\n {\n     LogPrintf(\"Using BerkeleyDB version %s\\n\", DbEnv::version(0, 0, 0));\n-    LogPrintf(\"Using wallet %s\\n\", walletFile);\n+    LogPrintf(\"Using wallet [%s]\\n\", walletFile);\n \n     // Wallet file must be a plain filename without a directory\n     if (walletFile != fs::basename(walletFile) + fs::extension(walletFile))"
      },
      {
        "sha": "fc81dbfaeb1cfc55d3aaec586a0d5cdc1f96138f",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f197a4c515757262eda0accbe762e311335be11b/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f197a4c515757262eda0accbe762e311335be11b/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=f197a4c515757262eda0accbe762e311335be11b",
        "patch": "@@ -216,7 +216,7 @@ CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, const CCoin\n     // If the output would become dust, discard it (converting the dust to fee)\n     poutput->nValue -= nDelta;\n     if (poutput->nValue <= GetDustThreshold(*poutput, ::dustRelayFee)) {\n-        LogPrint(BCLog::RPC, \"Bumping fee and discarding dust output\\n\");\n+        LogPrint(BCLog::RPC, \"[%s] Bumping fee and discarding dust output\\n\", pWallet->GetName());\n         nNewFee += poutput->nValue;\n         mtx.vout.erase(mtx.vout.begin() + nOutput);\n     }"
      },
      {
        "sha": "b2d88ed93f867b8321d1a03249f509e263143635",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f197a4c515757262eda0accbe762e311335be11b/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f197a4c515757262eda0accbe762e311335be11b/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=f197a4c515757262eda0accbe762e311335be11b",
        "patch": "@@ -507,7 +507,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n         assert(key.VerifyPubKey(pubkey));\n         CKeyID keyid = pubkey.GetID();\n         if (pwallet->HaveKey(keyid)) {\n-            LogPrintf(\"Skipping import of %s (key already present)\\n\", EncodeDestination(keyid));\n+            LogPrintf(\"[%s] Skipping import of %s (key already present)\\n\", pwallet->GetName(), EncodeDestination(keyid));\n             continue;\n         }\n         int64_t nTime = DecodeDumpTime(vstr[1]);\n@@ -525,7 +525,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n                 fLabel = true;\n             }\n         }\n-        LogPrintf(\"Importing %s...\\n\", EncodeDestination(keyid));\n+        LogPrintf(\"[%s] Importing %s...\\n\", pwallet->GetName(), EncodeDestination(keyid));\n         if (!pwallet->AddKeyPubKey(key, pubkey)) {\n             fGood = false;\n             continue;"
      },
      {
        "sha": "2e8d28766171bf2eb9abf8df8d3222cbe798d8a4",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 39,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f197a4c515757262eda0accbe762e311335be11b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f197a4c515757262eda0accbe762e311335be11b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f197a4c515757262eda0accbe762e311335be11b",
        "patch": "@@ -308,8 +308,8 @@ bool CWallet::LoadCScript(const CScript& redeemScript)\n     if (redeemScript.size() > MAX_SCRIPT_ELEMENT_SIZE)\n     {\n         std::string strAddr = EncodeDestination(CScriptID(redeemScript));\n-        LogPrintf(\"%s: Warning: This wallet contains a redeemScript of size %i which exceeds maximum size %i thus can never be redeemed. Do not use address %s.\\n\",\n-            __func__, redeemScript.size(), MAX_SCRIPT_ELEMENT_SIZE, strAddr);\n+        LogPrintf(\"[%s] %s: Warning: This wallet contains a redeemScript of size %i which exceeds maximum size %i thus can never be redeemed. Do not use address %s.\\n\",\n+                  GetName(), __func__, redeemScript.size(), MAX_SCRIPT_ELEMENT_SIZE, strAddr);\n         return true;\n     }\n \n@@ -399,7 +399,7 @@ bool CWallet::ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase,\n                 if (pMasterKey.second.nDeriveIterations < 25000)\n                     pMasterKey.second.nDeriveIterations = 25000;\n \n-                LogPrintf(\"Wallet passphrase changed to an nDeriveIterations of %i\\n\", pMasterKey.second.nDeriveIterations);\n+                LogPrintf(\"[%s] Wallet passphrase changed to an nDeriveIterations of %i\\n\", GetName(), pMasterKey.second.nDeriveIterations);\n \n                 if (!crypter.SetKeyFromPassphrase(strNewWalletPassphrase, pMasterKey.second.vchSalt, pMasterKey.second.nDeriveIterations, pMasterKey.second.nDerivationMethod))\n                     return false;\n@@ -604,7 +604,7 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n     if (kMasterKey.nDeriveIterations < 25000)\n         kMasterKey.nDeriveIterations = 25000;\n \n-    LogPrintf(\"Encrypting Wallet with an nDeriveIterations of %i\\n\", kMasterKey.nDeriveIterations);\n+    LogPrintf(\"[%s] Encrypting Wallet with an nDeriveIterations of %i\\n\", GetName(), kMasterKey.nDeriveIterations);\n \n     if (!crypter.SetKeyFromPassphrase(strWalletPassphrase, kMasterKey.vchSalt, kMasterKey.nDeriveIterations, kMasterKey.nDerivationMethod))\n         return false;\n@@ -858,7 +858,7 @@ bool CWallet::MarkReplaced(const uint256& originalHash, const uint256& newHash)\n \n     bool success = true;\n     if (!walletdb.WriteTx(wtx)) {\n-        LogPrintf(\"%s: Updating walletdb tx %s failed\", __func__, wtx.GetHash().ToString());\n+        LogPrintf(\"[%s] %s: Updating walletdb tx %s failed\", GetName(), __func__, wtx.GetHash().ToString());\n         success = false;\n     }\n \n@@ -917,7 +917,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n     }\n \n     //// debug print\n-    LogPrintf(\"AddToWallet %s  %s%s\\n\", wtxIn.GetHash().ToString(), (fInsertedNew ? \"new\" : \"\"), (fUpdated ? \"update\" : \"\"));\n+    LogPrintf(\"[%s] AddToWallet %s  %s%s\\n\", GetName(), wtxIn.GetHash().ToString(), (fInsertedNew ? \"new\" : \"\"), (fUpdated ? \"update\" : \"\"));\n \n     // Write to disk\n     if (fInsertedNew || fUpdated)\n@@ -988,7 +988,7 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const CBlockI\n                 std::pair<TxSpends::const_iterator, TxSpends::const_iterator> range = mapTxSpends.equal_range(txin.prevout);\n                 while (range.first != range.second) {\n                     if (range.first->second != tx.GetHash()) {\n-                        LogPrintf(\"Transaction %s (in block %s) conflicts with wallet transaction %s (both spend %s:%i)\\n\", tx.GetHash().ToString(), pIndex->GetBlockHash().ToString(), range.first->second.ToString(), range.first->first.hash.ToString(), range.first->first.n);\n+                        LogPrintf(\"[%s] Transaction %s (in block %s) conflicts with wallet transaction %s (both spend %s:%i)\\n\", GetName(), tx.GetHash().ToString(), pIndex->GetBlockHash().ToString(), range.first->second.ToString(), range.first->first.hash.ToString(), range.first->first.n);\n                         MarkConflicted(pIndex->GetBlockHash(), range.first->second);\n                     }\n                     range.first++;\n@@ -1014,11 +1014,11 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const CBlockI\n                 for (const CKeyID &keyid : vAffected) {\n                     std::map<CKeyID, int64_t>::const_iterator mi = m_pool_key_to_index.find(keyid);\n                     if (mi != m_pool_key_to_index.end()) {\n-                        LogPrintf(\"%s: Detected a used keypool key, mark all keypool key up to this key as used\\n\", __func__);\n+                        LogPrintf(\"[%s] %s: Detected a used keypool key, mark all keypool key up to this key as used\\n\", GetName(), __func__);\n                         MarkReserveKeysAsUsed(mi->second);\n \n                         if (!TopUpKeyPool()) {\n-                            LogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n+                            LogPrintf(\"[%s] %s: Topping up keypool failed (locked wallet)\\n\", GetName(), __func__);\n                         }\n                     }\n                 }\n@@ -1501,8 +1501,8 @@ void CWalletTx::GetAmounts(std::list<COutputEntry>& listReceived,\n \n         if (!ExtractDestination(txout.scriptPubKey, address) && !txout.scriptPubKey.IsUnspendable())\n         {\n-            LogPrintf(\"CWalletTx::GetAmounts: Unknown transaction type found, txid %s\\n\",\n-                     this->GetHash().ToString());\n+            LogPrintf(\"[%s] CWalletTx::GetAmounts: Unknown transaction type found, txid %s\\n\",\n+                      pwallet->GetName(), this->GetHash().ToString());\n             address = CNoDestination();\n         }\n \n@@ -1536,7 +1536,7 @@ int64_t CWallet::RescanFromTime(int64_t startTime, bool update)\n     // highest blockchain timestamp, in which case there is nothing that needs\n     // to be scanned.\n     CBlockIndex* const startBlock = chainActive.FindEarliestAtLeast(startTime - TIMESTAMP_WINDOW);\n-    LogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, startBlock ? chainActive.Height() - startBlock->nHeight + 1 : 0);\n+    LogPrintf(\"[%s] %s: Rescanning last %i blocks\\n\", GetName(), __func__, startBlock ? chainActive.Height() - startBlock->nHeight + 1 : 0);\n \n     if (startBlock) {\n         const CBlockIndex* const failedBlock = ScanForWalletTransactions(startBlock, update);\n@@ -1568,16 +1568,16 @@ CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool f\n         fAbortRescan = false;\n         fScanningWallet = true;\n \n-        ShowProgress(_(\"Rescanning...\"), 0); // show rescan progress in GUI as dialog or on splashscreen, if -rescan on startup\n+        ShowProgress(strprintf(_(\"[%s] Rescanning...\"), GetName()), 0); // show rescan progress in GUI as dialog or on splashscreen, if -rescan on startup\n         double dProgressStart = GuessVerificationProgress(chainParams.TxData(), pindex);\n         double dProgressTip = GuessVerificationProgress(chainParams.TxData(), chainActive.Tip());\n         while (pindex && !fAbortRescan)\n         {\n             if (pindex->nHeight % 100 == 0 && dProgressTip - dProgressStart > 0.0)\n-                ShowProgress(_(\"Rescanning...\"), std::max(1, std::min(99, (int)((GuessVerificationProgress(chainParams.TxData(), pindex) - dProgressStart) / (dProgressTip - dProgressStart) * 100))));\n+                ShowProgress(strprintf(_(\"[%s] Rescanning...\"), GetName()), std::max(1, std::min(99, (int)((GuessVerificationProgress(chainParams.TxData(), pindex) - dProgressStart) / (dProgressTip - dProgressStart) * 100))));\n             if (GetTime() >= nNow + 60) {\n                 nNow = GetTime();\n-                LogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", pindex->nHeight, GuessVerificationProgress(chainParams.TxData(), pindex));\n+                LogPrintf(\"[%s] Still rescanning. At block %d. Progress=%f\\n\", GetName(), pindex->nHeight, GuessVerificationProgress(chainParams.TxData(), pindex));\n             }\n \n             CBlock block;\n@@ -1591,9 +1591,9 @@ CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool f\n             pindex = chainActive.Next(pindex);\n         }\n         if (pindex && fAbortRescan) {\n-            LogPrintf(\"Rescan aborted at block %d. Progress=%f\\n\", pindex->nHeight, GuessVerificationProgress(chainParams.TxData(), pindex));\n+            LogPrintf(\"[%s] Rescan aborted at block %d. Progress=%f\\n\", GetName(), pindex->nHeight, GuessVerificationProgress(chainParams.TxData(), pindex));\n         }\n-        ShowProgress(_(\"Rescanning...\"), 100); // hide progress dialog in GUI\n+        ShowProgress(strprintf(_(\"[%s] Rescanning...\"), GetName()), 100); // hide progress dialog in GUI\n \n         fScanningWallet = false;\n     }\n@@ -1641,7 +1641,7 @@ bool CWalletTx::RelayWalletTransaction(CConnman* connman)\n         CValidationState state;\n         /* GetDepthInMainChain already catches known conflicts. */\n         if (InMempool() || AcceptToMemoryPool(maxTxFee, state)) {\n-            LogPrintf(\"Relaying wtx %s\\n\", GetHash().ToString());\n+            LogPrintf(\"[%s] Relaying wtx %s\\n\", pwallet->GetName(), GetHash().ToString());\n             if (connman) {\n                 CInv inv(MSG_TX, GetHash());\n                 connman->ForEachNode([&inv](CNode* pnode)\n@@ -1918,7 +1918,7 @@ void CWallet::ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman\n     // block was found:\n     std::vector<uint256> relayed = ResendWalletTransactionsBefore(nBestBlockTime-5*60, connman);\n     if (!relayed.empty())\n-        LogPrintf(\"%s: rebroadcast %u unconfirmed transactions\\n\", __func__, relayed.size());\n+        LogPrintf(\"[%s] %s: rebroadcast %u unconfirmed transactions\\n\", GetName(), __func__, relayed.size());\n }\n \n /** @} */ // end of mapWallet\n@@ -2393,7 +2393,7 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n             }\n \n         if (LogAcceptCategory(BCLog::SELECTCOINS)) {\n-            LogPrint(BCLog::SELECTCOINS, \"SelectCoins() best subset: \");\n+            LogPrint(BCLog::SELECTCOINS, \"[%s] SelectCoins() best subset: \", GetName());\n             for (unsigned int i = 0; i < vValue.size(); i++) {\n                 if (vfBest[i]) {\n                     LogPrint(BCLog::SELECTCOINS, \"%s \", FormatMoney(vValue[i].txout.nValue));\n@@ -2898,7 +2898,8 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n         }\n     }\n \n-    LogPrintf(\"Fee Calculation: Fee:%d Bytes:%u Needed:%d Tgt:%d (requested %d) Reason:\\\"%s\\\" Decay %.5f: Estimation: (%g - %g) %.2f%% %.1f/(%.1f %d mem %.1f out) Fail: (%g - %g) %.2f%% %.1f/(%.1f %d mem %.1f out)\\n\",\n+    LogPrintf(\"[%s] Fee Calculation: Fee:%d Bytes:%u Needed:%d Tgt:%d (requested %d) Reason:\\\"%s\\\" Decay %.5f: Estimation: (%g - %g) %.2f%% %.1f/(%.1f %d mem %.1f out) Fail: (%g - %g) %.2f%% %.1f/(%.1f %d mem %.1f out)\\n\",\n+              GetName(),\n               nFeeRet, nBytes, nFeeNeeded, feeCalc.returnedTarget, feeCalc.desiredTarget, StringForFeeReason(feeCalc.reason), feeCalc.est.decay,\n               feeCalc.est.pass.start, feeCalc.est.pass.end,\n               100 * feeCalc.est.pass.withinTarget / (feeCalc.est.pass.totalConfirmed + feeCalc.est.pass.inMempool + feeCalc.est.pass.leftMempool),\n@@ -2916,7 +2917,7 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey, CCon\n {\n     {\n         LOCK2(cs_main, cs_wallet);\n-        LogPrintf(\"CommitTransaction:\\n%s\", wtxNew.tx->ToString());\n+        LogPrintf(\"[%s] CommitTransaction:\\n%s\", GetName(), wtxNew.tx->ToString());\n         {\n             // Take key pair from key pool so it won't be used again\n             reservekey.KeepKey();\n@@ -2941,7 +2942,7 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey, CCon\n         {\n             // Broadcast\n             if (!wtxNew.AcceptToMemoryPool(maxTxFee, state)) {\n-                LogPrintf(\"CommitTransaction(): Transaction cannot be broadcast immediately, %s\\n\", state.GetRejectReason());\n+                LogPrintf(\"[%s] CommitTransaction(): Transaction cannot be broadcast immediately, %s\\n\", GetName(), state.GetRejectReason());\n                 // TODO: if we expect the failure to be long term or permanent, instead delete wtx from the wallet and return failure.\n             } else {\n                 wtxNew.RelayWalletTransaction(connman);\n@@ -3137,7 +3138,7 @@ bool CWallet::NewKeyPool()\n         if (!TopUpKeyPool()) {\n             return false;\n         }\n-        LogPrintf(\"CWallet::NewKeyPool rewrote keypool\\n\");\n+        LogPrintf(\"[%s] CWallet::NewKeyPool rewrote keypool\\n\", GetName());\n     }\n     return true;\n }\n@@ -3216,7 +3217,7 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n             m_pool_key_to_index[pubkey.GetID()] = index;\n         }\n         if (missingInternal + missingExternal > 0) {\n-            LogPrintf(\"keypool added %d keys (%d internal), size=%u (%u internal)\\n\", missingInternal + missingExternal, missingInternal, setInternalKeyPool.size() + setExternalKeyPool.size(), setInternalKeyPool.size());\n+            LogPrintf(\"[%s] keypool added %d keys (%d internal), size=%u (%u internal)\\n\", GetName(), missingInternal + missingExternal, missingInternal, setInternalKeyPool.size() + setExternalKeyPool.size(), setInternalKeyPool.size());\n         }\n     }\n     return true;\n@@ -3256,7 +3257,7 @@ void CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRe\n \n         assert(keypool.vchPubKey.IsValid());\n         m_pool_key_to_index.erase(keypool.vchPubKey.GetID());\n-        LogPrintf(\"keypool reserve %d\\n\", nIndex);\n+        LogPrintf(\"[%s] keypool reserve %d\\n\", GetName(), nIndex);\n     }\n }\n \n@@ -3265,7 +3266,7 @@ void CWallet::KeepKey(int64_t nIndex)\n     // Remove from key pool\n     CWalletDB walletdb(*dbw);\n     walletdb.ErasePool(nIndex);\n-    LogPrintf(\"keypool keep %d\\n\", nIndex);\n+    LogPrintf(\"[%s] keypool keep %d\\n\", GetName(), nIndex);\n }\n \n void CWallet::ReturnKey(int64_t nIndex, bool fInternal, const CPubKey& pubkey)\n@@ -3280,7 +3281,7 @@ void CWallet::ReturnKey(int64_t nIndex, bool fInternal, const CPubKey& pubkey)\n         }\n         m_pool_key_to_index[pubkey.GetID()] = nIndex;\n     }\n-    LogPrintf(\"keypool return %d\\n\", nIndex);\n+    LogPrintf(\"[%s] keypool return %d\\n\", GetName(), nIndex);\n }\n \n bool CWallet::GetKeyFromPool(CPubKey& result, bool internal)\n@@ -3532,7 +3533,7 @@ void CWallet::MarkReserveKeysAsUsed(int64_t keypool_id)\n             m_pool_key_to_index.erase(keypool.vchPubKey.GetID());\n         }\n         walletdb.ErasePool(index);\n-        LogPrintf(\"keypool index %d removed\\n\", index);\n+        LogPrintf(\"[%s] keypool index %d removed\\n\", GetName(), index);\n         it = setKeyPool->erase(it);\n     }\n }\n@@ -3696,7 +3697,7 @@ unsigned int CWallet::ComputeTimeSmart(const CWalletTx& wtx) const\n             int64_t blocktime = mapBlockIndex[wtx.hashBlock]->GetBlockTime();\n             nTimeSmart = std::max(latestEntry, std::min(blocktime, latestNow));\n         } else {\n-            LogPrintf(\"%s: found %s in block %s not in index\\n\", __func__, wtx.GetHash().ToString(), wtx.hashBlock.ToString());\n+            LogPrintf(\"[%s] %s: found %s in block %s not in index\\n\", GetName(), __func__, wtx.GetHash().ToString(), wtx.hashBlock.ToString());\n         }\n     }\n     return nTimeSmart;\n@@ -3771,7 +3772,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n         }\n     }\n \n-    uiInterface.InitMessage(_(\"Loading wallet...\"));\n+    uiInterface.InitMessage(strprintf(_(\"[%s] Loading wallet...\"), walletFile));\n \n     int64_t nStart = GetTimeMillis();\n     bool fFirstRun = true;\n@@ -3810,12 +3811,12 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n         int nMaxVersion = gArgs.GetArg(\"-upgradewallet\", 0);\n         if (nMaxVersion == 0) // the -upgradewallet without argument case\n         {\n-            LogPrintf(\"Performing wallet upgrade to %i\\n\", FEATURE_LATEST);\n+            LogPrintf(\"[%s] Performing wallet upgrade to %i\\n\", walletInstance->GetName(), FEATURE_LATEST);\n             nMaxVersion = CLIENT_VERSION;\n             walletInstance->SetMinVersion(FEATURE_LATEST); // permanently upgrade the wallet immediately\n         }\n         else\n-            LogPrintf(\"Allowing wallet upgrade up to %i\\n\", nMaxVersion);\n+            LogPrintf(\"[%s] Allowing wallet upgrade up to %i\\n\", walletInstance->GetName(), nMaxVersion);\n         if (nMaxVersion < walletInstance->GetVersion())\n         {\n             InitError(_(\"Cannot downgrade wallet\"));\n@@ -3854,7 +3855,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n         }\n     }\n \n-    LogPrintf(\" wallet      %15dms\\n\", GetTimeMillis() - nStart);\n+    LogPrintf(\"[%s]  wallet      %15dms\\n\", walletInstance->GetName(), GetTimeMillis() - nStart);\n \n     RegisterValidationInterface(walletInstance);\n \n@@ -3887,7 +3888,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n         }\n \n         uiInterface.InitMessage(_(\"Rescanning...\"));\n-        LogPrintf(\"Rescanning last %i blocks (from block %i)...\\n\", chainActive.Height() - pindexRescan->nHeight, pindexRescan->nHeight);\n+        LogPrintf(\"[%s] Rescanning last %i blocks (from block %i)...\\n\", walletInstance->GetName(), chainActive.Height() - pindexRescan->nHeight, pindexRescan->nHeight);\n \n         // No need to read and scan block if block was created before\n         // our wallet birthday (as adjusted for block time variability)\n@@ -3897,7 +3898,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n \n         nStart = GetTimeMillis();\n         walletInstance->ScanForWalletTransactions(pindexRescan, true);\n-        LogPrintf(\" rescan      %15dms\\n\", GetTimeMillis() - nStart);\n+        LogPrintf(\"[%s]  rescan      %15dms\\n\", walletInstance->GetName(), GetTimeMillis() - nStart);\n         walletInstance->SetBestChain(chainActive.GetLocator());\n         walletInstance->dbw->IncrementUpdateCounter();\n \n@@ -3930,9 +3931,9 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n \n     {\n         LOCK(walletInstance->cs_wallet);\n-        LogPrintf(\"setKeyPool.size() = %u\\n\",      walletInstance->GetKeyPoolSize());\n-        LogPrintf(\"mapWallet.size() = %u\\n\",       walletInstance->mapWallet.size());\n-        LogPrintf(\"mapAddressBook.size() = %u\\n\",  walletInstance->mapAddressBook.size());\n+        LogPrintf(\"[%s] setKeyPool.size() = %u\\n\",      walletInstance->GetName(), walletInstance->GetKeyPoolSize());\n+        LogPrintf(\"[%s] mapWallet.size() = %u\\n\",       walletInstance->GetName(), walletInstance->mapWallet.size());\n+        LogPrintf(\"[%s] mapAddressBook.size() = %u\\n\",  walletInstance->GetName(), walletInstance->mapAddressBook.size());\n     }\n \n     return walletInstance;"
      },
      {
        "sha": "4fb94a55491bb24d9937aa5ca9ba2bcf7b3980d6",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f197a4c515757262eda0accbe762e311335be11b/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f197a4c515757262eda0accbe762e311335be11b/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=f197a4c515757262eda0accbe762e311335be11b",
        "patch": "@@ -542,7 +542,7 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n         Dbc* pcursor = batch.GetCursor();\n         if (!pcursor)\n         {\n-            LogPrintf(\"Error getting wallet database cursor\\n\");\n+            LogPrintf(\"[%s] Error getting wallet database cursor\\n\", pwallet->GetName());\n             return DB_CORRUPT;\n         }\n \n@@ -556,7 +556,7 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n                 break;\n             else if (ret != 0)\n             {\n-                LogPrintf(\"Error reading next record from wallet database\\n\");\n+                LogPrintf(\"[%s] Error reading next record from wallet database\\n\", pwallet->GetName());\n                 return DB_CORRUPT;\n             }\n \n@@ -578,7 +578,7 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n                 }\n             }\n             if (!strErr.empty())\n-                LogPrintf(\"%s\\n\", strErr);\n+                LogPrintf(\"[%s] %s\\n\", pwallet->GetName(), strErr);\n         }\n         pcursor->close();\n     }\n@@ -597,10 +597,10 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n     if (result != DB_LOAD_OK)\n         return result;\n \n-    LogPrintf(\"nFileVersion = %d\\n\", wss.nFileVersion);\n+    LogPrintf(\"[%s] nFileVersion = %d\\n\", pwallet->GetName(), wss.nFileVersion);\n \n-    LogPrintf(\"Keys: %u plaintext, %u encrypted, %u w/ metadata, %u total\\n\",\n-           wss.nKeys, wss.nCKeys, wss.nKeyMeta, wss.nKeys + wss.nCKeys);\n+    LogPrintf(\"[%s] Keys: %u plaintext, %u encrypted, %u w/ metadata, %u total\\n\",\n+           pwallet->GetName(), wss.nKeys, wss.nCKeys, wss.nKeyMeta, wss.nKeys + wss.nCKeys);\n \n     // nTimeFirstKey is only reliable if all keys have metadata\n     if ((wss.nKeys + wss.nCKeys + wss.nWatchKeys) != wss.nKeyMeta)"
      }
    ]
  }
]