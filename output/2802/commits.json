[
  {
    "sha": "fd867c7dbc1b5ad971dd308069257e7db5e11ac1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZDg2N2M3ZGJjMWI1YWQ5NzFkZDMwODA2OTI1N2U3ZGI1ZTExYWMx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-01-11T23:48:29Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-07-20T13:00:24Z"
      },
      "message": "Encapsulate CLevelDB iterators cleanly",
      "tree": {
        "sha": "e43f1682f30ffd65098f669fc6fa762f187a79cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e43f1682f30ffd65098f669fc6fa762f187a79cd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fd867c7dbc1b5ad971dd308069257e7db5e11ac1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd867c7dbc1b5ad971dd308069257e7db5e11ac1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fd867c7dbc1b5ad971dd308069257e7db5e11ac1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd867c7dbc1b5ad971dd308069257e7db5e11ac1/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4eab2dcc8158860d2575bb26ee46c29bd0672968",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4eab2dcc8158860d2575bb26ee46c29bd0672968",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4eab2dcc8158860d2575bb26ee46c29bd0672968"
      }
    ],
    "stats": {
      "total": 130,
      "additions": 87,
      "deletions": 43
    },
    "files": [
      {
        "sha": "ae8d00d14d882ad8f2d09e9e3faef570f2591b3d",
        "filename": "src/leveldb.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd867c7dbc1b5ad971dd308069257e7db5e11ac1/src/leveldb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd867c7dbc1b5ad971dd308069257e7db5e11ac1/src/leveldb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb.cpp?ref=fd867c7dbc1b5ad971dd308069257e7db5e11ac1",
        "patch": "@@ -34,6 +34,13 @@ static leveldb::Options GetOptions(size_t nCacheSize) {\n     return options;\n }\n \n+CLevelDBIterator::~CLevelDBIterator() { delete piter; }\n+bool CLevelDBIterator::Valid() { return piter->Valid(); }\n+void CLevelDBIterator::SeekToFirst() { piter->SeekToFirst(); }\n+void CLevelDBIterator::SeekToLast() { piter->SeekToLast(); }\n+void CLevelDBIterator::Next() { piter->Next(); }\n+void CLevelDBIterator::Prev() { piter->Prev(); }\n+\n CLevelDB::CLevelDB(const boost::filesystem::path &path, size_t nCacheSize, bool fMemory, bool fWipe) {\n     penv = NULL;\n     readoptions.verify_checksums = true;"
      },
      {
        "sha": "338850417fb8dac3f16fb4752ae95c13eda99cc2",
        "filename": "src/leveldb.h",
        "status": "modified",
        "additions": 59,
        "deletions": 3,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd867c7dbc1b5ad971dd308069257e7db5e11ac1/src/leveldb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd867c7dbc1b5ad971dd308069257e7db5e11ac1/src/leveldb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb.h?ref=fd867c7dbc1b5ad971dd308069257e7db5e11ac1",
        "patch": "@@ -52,6 +52,63 @@ class CLevelDBBatch\n     }\n };\n \n+class CLevelDBIterator\n+{\n+private:\n+    leveldb::Iterator *piter;\n+\n+public:\n+    CLevelDBIterator(leveldb::Iterator *piterIn) : piter(piterIn) {}\n+    ~CLevelDBIterator();\n+\n+    bool Valid();\n+\n+    void SeekToFirst();\n+    void SeekToLast();\n+\n+    template<typename K> void Seek(const K& key) {\n+        CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+        ssKey.reserve(ssKey.GetSerializeSize(key));\n+        ssKey << key;\n+        leveldb::Slice slKey(&ssKey[0], ssKey.size());\n+        piter->Seek(slKey);\n+    }\n+\n+    void Next();\n+    void Prev();\n+\n+    template<typename K> bool GetKey(K& key) {\n+        leveldb::Slice slKey = piter->key();\n+        try {\n+            CDataStream ssKey(slKey.data(), slKey.data() + slKey.size(), SER_DISK, CLIENT_VERSION);\n+            ssKey >> key;\n+        } catch(std::exception &e) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    unsigned int GetKeySize() {\n+        return piter->key().size();\n+    }\n+\n+    template<typename V> bool GetValue(V& value) {\n+        leveldb::Slice slValue = piter->value();\n+        try {\n+            CDataStream ssValue(slValue.data(), slValue.data() + slValue.size(), SER_DISK, CLIENT_VERSION);\n+            ssValue >> value;\n+        } catch(std::exception &e) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    unsigned int GetValueSize() {\n+        return piter->value().size();\n+    }\n+\n+};\n+\n class CLevelDB\n {\n private:\n@@ -144,9 +201,8 @@ class CLevelDB\n         return WriteBatch(batch, true);\n     }\n \n-    // not exactly clean encapsulation, but it's easiest for now\n-    leveldb::Iterator *NewIterator() {\n-        return pdb->NewIterator(iteroptions);\n+    CLevelDBIterator *NewIterator() {\n+        return new CLevelDBIterator(pdb->NewIterator(iteroptions));\n     }\n };\n "
      },
      {
        "sha": "cf9612974ce4d78847133af67f4a038b65e3230d",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 40,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd867c7dbc1b5ad971dd308069257e7db5e11ac1/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd867c7dbc1b5ad971dd308069257e7db5e11ac1/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=fd867c7dbc1b5ad971dd308069257e7db5e11ac1",
        "patch": "@@ -113,31 +113,19 @@ bool CBlockTreeDB::ReadLastBlockFile(int &nFile) {\n }\n \n bool CCoinsViewDB::GetStats(CCoinsStats &stats) {\n-    leveldb::Iterator *pcursor = db.NewIterator();\n-    pcursor->SeekToFirst();\n+    CLevelDBIterator *pcursor = db.NewIterator();\n+    pcursor->Seek('c');\n \n     CHashWriter ss(SER_GETHASH, PROTOCOL_VERSION);\n     stats.hashBlock = GetBestBlock()->GetBlockHash();\n     ss << stats.hashBlock;\n     int64 nTotalAmount = 0;\n     while (pcursor->Valid()) {\n         boost::this_thread::interruption_point();\n-        try {\n-            leveldb::Slice slKey = pcursor->key();\n-            CDataStream ssKey(slKey.data(), slKey.data()+slKey.size(), SER_DISK, CLIENT_VERSION);\n-            char chType;\n-            ssKey >> chType;\n-            if (chType == 'c') {\n-                leveldb::Slice slValue = pcursor->value();\n-                CDataStream ssValue(slValue.data(), slValue.data()+slValue.size(), SER_DISK, CLIENT_VERSION);\n-                CCoins coins;\n-                ssValue >> coins;\n-                uint256 txhash;\n-                ssKey >> txhash;\n-                ss << txhash;\n-                ss << VARINT(coins.nVersion);\n-                ss << (coins.fCoinBase ? 'c' : 'n'); \n-                ss << VARINT(coins.nHeight);\n+        std::pair<char, uint256> key;\n+        CCoins coins;\n+        if (pcursor->GetKey(key) && key.first == 'c') {\n+            if (pcursor->GetValue(coins)) {\n                 stats.nTransactions++;\n                 for (unsigned int i=0; i<coins.vout.size(); i++) {\n                     const CTxOut &out = coins.vout[i];\n@@ -148,13 +136,15 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) {\n                         nTotalAmount += out.nValue;\n                     }\n                 }\n-                stats.nSerializedSize += 32 + slValue.size();\n+                stats.nSerializedSize += 32 + pcursor->GetKeySize();\n                 ss << VARINT(0);\n+            } else {\n+                return error(\"CCoinsViewDB::GetStats() : unable to read value\");\n             }\n-            pcursor->Next();\n-        } catch (std::exception &e) {\n-            return error(\"%s() : deserialize error\", __PRETTY_FUNCTION__);\n+        } else {\n+            break;\n         }\n+        pcursor->Next();\n     }\n     delete pcursor;\n     stats.nHeight = GetBestBlock()->nHeight;\n@@ -188,26 +178,17 @@ bool CBlockTreeDB::ReadFlag(const std::string &name, bool &fValue) {\n \n bool CBlockTreeDB::LoadBlockIndexGuts()\n {\n-    leveldb::Iterator *pcursor = NewIterator();\n+    CLevelDBIterator *pcursor = NewIterator();\n \n-    CDataStream ssKeySet(SER_DISK, CLIENT_VERSION);\n-    ssKeySet << make_pair('b', uint256(0));\n-    pcursor->Seek(ssKeySet.str());\n+    pcursor->Seek(make_pair('b', uint256(0)));\n \n     // Load mapBlockIndex\n     while (pcursor->Valid()) {\n         boost::this_thread::interruption_point();\n-        try {\n-            leveldb::Slice slKey = pcursor->key();\n-            CDataStream ssKey(slKey.data(), slKey.data()+slKey.size(), SER_DISK, CLIENT_VERSION);\n-            char chType;\n-            ssKey >> chType;\n-            if (chType == 'b') {\n-                leveldb::Slice slValue = pcursor->value();\n-                CDataStream ssValue(slValue.data(), slValue.data()+slValue.size(), SER_DISK, CLIENT_VERSION);\n-                CDiskBlockIndex diskindex;\n-                ssValue >> diskindex;\n-\n+        std::pair<char, uint256> key;\n+        if (pcursor->GetKey(key) && key.first == 'b') {\n+            CDiskBlockIndex diskindex;\n+            if (pcursor->GetValue(diskindex)) {\n                 // Construct block index object\n                 CBlockIndex* pindexNew = InsertBlockIndex(diskindex.GetBlockHash());\n                 pindexNew->pprev          = InsertBlockIndex(diskindex.hashPrev);\n@@ -232,10 +213,10 @@ bool CBlockTreeDB::LoadBlockIndexGuts()\n \n                 pcursor->Next();\n             } else {\n-                break; // if shutdown requested or finished loading block index\n+                return error(\"LoadBlockIndex() : failed to read value\");\n             }\n-        } catch (std::exception &e) {\n-            return error(\"%s() : deserialize error\", __PRETTY_FUNCTION__);\n+        } else {\n+            break;\n         }\n     }\n     delete pcursor;"
      }
    ]
  },
  {
    "sha": "4790f3c823a33fae44b82ef7962372e38b1b0131",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NzkwZjNjODIzYTMzZmFlNDRiODJlZjc5NjIzNzJlMzhiMWIwMTMx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-01-11T22:34:08Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-07-20T13:03:51Z"
      },
      "message": "Add address-based index\n\n1) Maintain a salt to perturbate the address index (protection against\n   collisions).\n2) Add support for address index entries in the block index, and\n   maintain those if -addrindex is specified. It indexes the use of\n   every >8-byte data push in output script or consumed script - or in\n   case of no such push, the entire script.\n3) Add a searchrawtransactions RPC call, which can look up raw\n   transactions by address.",
      "tree": {
        "sha": "230cf55f866fd2769106654f484fade60287d448",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/230cf55f866fd2769106654f484fade60287d448"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4790f3c823a33fae44b82ef7962372e38b1b0131",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4790f3c823a33fae44b82ef7962372e38b1b0131",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4790f3c823a33fae44b82ef7962372e38b1b0131",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4790f3c823a33fae44b82ef7962372e38b1b0131/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fd867c7dbc1b5ad971dd308069257e7db5e11ac1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd867c7dbc1b5ad971dd308069257e7db5e11ac1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd867c7dbc1b5ad971dd308069257e7db5e11ac1"
      }
    ],
    "stats": {
      "total": 276,
      "additions": 259,
      "deletions": 17
    },
    "files": [
      {
        "sha": "a5424700e3bf600d68fda40dca9f95000363ad6f",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4790f3c823a33fae44b82ef7962372e38b1b0131/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4790f3c823a33fae44b82ef7962372e38b1b0131/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=4790f3c823a33fae44b82ef7962372e38b1b0131",
        "patch": "@@ -249,6 +249,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"importwallet\",           &importwallet,           false,     false },\n     { \"listunspent\",            &listunspent,            false,     false },\n     { \"getrawtransaction\",      &getrawtransaction,      false,     false },\n+    { \"searchrawtransactions\",  &searchrawtransactions,  false,     false },\n     { \"createrawtransaction\",   &createrawtransaction,   false,     false },\n     { \"decoderawtransaction\",   &decoderawtransaction,   false,     false },\n     { \"signrawtransaction\",     &signrawtransaction,     false,     false },\n@@ -1189,6 +1190,9 @@ Array RPCConvertValues(const std::string &strMethod, const std::vector<std::stri\n     if (strMethod == \"listunspent\"            && n > 2) ConvertTo<Array>(params[2]);\n     if (strMethod == \"getblock\"               && n > 1) ConvertTo<bool>(params[1]);\n     if (strMethod == \"getrawtransaction\"      && n > 1) ConvertTo<boost::int64_t>(params[1]);\n+    if (strMethod == \"searchrawtransactions\"  && n > 1) ConvertTo<boost::int64_t>(params[1]);\n+    if (strMethod == \"searchrawtransactions\"  && n > 2) ConvertTo<boost::int64_t>(params[2]);\n+    if (strMethod == \"searchrawtransactions\"  && n > 3) ConvertTo<boost::int64_t>(params[3]);\n     if (strMethod == \"createrawtransaction\"   && n > 0) ConvertTo<Array>(params[0]);\n     if (strMethod == \"createrawtransaction\"   && n > 1) ConvertTo<Object>(params[1]);\n     if (strMethod == \"signrawtransaction\"     && n > 1) ConvertTo<Array>(params[1], true);"
      },
      {
        "sha": "443bf98deb858bc46e6dfa72c67ac378415daa54",
        "filename": "src/bitcoinrpc.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4790f3c823a33fae44b82ef7962372e38b1b0131/src/bitcoinrpc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4790f3c823a33fae44b82ef7962372e38b1b0131/src/bitcoinrpc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.h?ref=4790f3c823a33fae44b82ef7962372e38b1b0131",
        "patch": "@@ -192,6 +192,7 @@ extern json_spirit::Value validateaddress(const json_spirit::Array& params, bool\n extern json_spirit::Value getinfo(const json_spirit::Array& params, bool fHelp);\n \n extern json_spirit::Value getrawtransaction(const json_spirit::Array& params, bool fHelp); // in rcprawtransaction.cpp\n+extern json_spirit::Value searchrawtransactions(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value listunspent(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value lockunspent(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value listlockunspent(const json_spirit::Array& params, bool fHelp);"
      },
      {
        "sha": "a8a23793163677bbd9d642ed0933db4361e4c2cc",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4790f3c823a33fae44b82ef7962372e38b1b0131/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4790f3c823a33fae44b82ef7962372e38b1b0131/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=4790f3c823a33fae44b82ef7962372e38b1b0131",
        "patch": "@@ -710,7 +710,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n     if (nTotalCache < (1 << 22))\n         nTotalCache = (1 << 22); // total cache cannot be less than 4 MiB\n     size_t nBlockTreeDBCache = nTotalCache / 8;\n-    if (nBlockTreeDBCache > (1 << 21) && !GetBoolArg(\"-txindex\", false))\n+    if (nBlockTreeDBCache > (1 << 21) && !GetBoolArg(\"-txindex\", false) && !GetBoolArg(\"-addrindex\", false))\n         nBlockTreeDBCache = (1 << 21); // block tree db cache shouldn't be larger than 2 MiB\n     nTotalCache -= nBlockTreeDBCache;\n     size_t nCoinDBCache = nTotalCache / 2; // use half of the remaining cache for coindb cache\n@@ -761,6 +761,12 @@ bool AppInit2(boost::thread_group& threadGroup)\n                     break;\n                 }\n \n+                // Check for changed -addrindex state\n+                if (fAddrIndex != GetBoolArg(\"-addrindex\", false)) {\n+                    strLoadError = _(\"You need to rebuild the database using -reindex to change -addrindex\");\n+                    break;\n+                }\n+\n                 uiInterface.InitMessage(_(\"Verifying blocks...\"));\n                 if (!VerifyDB(GetArg(\"-checklevel\", 3),\n                               GetArg( \"-checkblocks\", 288))) {"
      },
      {
        "sha": "79c6c27c4d48b92e5ca4fcf313fddc1adbbc4ee0",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 95,
        "deletions": 16,
        "changes": 111,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4790f3c823a33fae44b82ef7962372e38b1b0131/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4790f3c823a33fae44b82ef7962372e38b1b0131/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=4790f3c823a33fae44b82ef7962372e38b1b0131",
        "patch": "@@ -46,6 +46,7 @@ bool fImporting = false;\n bool fReindex = false;\n bool fBenchmark = false;\n bool fTxIndex = false;\n+bool fAddrIndex = false;\n unsigned int nCoinCacheSize = 5000;\n bool fHaveGUI = false;\n \n@@ -1095,6 +1096,42 @@ bool CWalletTx::AcceptWalletTransaction()\n     return false;\n }\n \n+bool ReadTransaction(CTransaction& tx, const CDiskTxPos &pos, uint256 &hashBlock) {\n+    CAutoFile file(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION);\n+    CBlockHeader header;\n+    try {\n+        file >> header;\n+        fseek(file, pos.nTxOffset, SEEK_CUR);\n+        file >> tx;\n+    } catch (std::exception &e) {\n+        return error(\"%s() : deserialize or I/O error\", __PRETTY_FUNCTION__);\n+    }\n+    hashBlock = header.GetHash();\n+    return true;\n+}\n+\n+bool FindTransactionsByDestination(const CTxDestination &dest, std::set<CExtDiskTxPos> &setpos) {\n+    uint160 addrid = 0;\n+    const CKeyID *pkeyid = boost::get<CKeyID>(&dest);\n+    if (pkeyid)\n+        addrid = static_cast<uint160>(*pkeyid);\n+    if (!addrid) {\n+        const CScriptID *pscriptid = boost::get<CScriptID>(&dest);\n+        if (pscriptid)\n+            addrid = static_cast<uint160>(*pscriptid);\n+    }\n+    if (!addrid)\n+        return false;\n+\n+    LOCK(cs_main);\n+    if (!fAddrIndex)\n+        return false;\n+    std::vector<CExtDiskTxPos> vPos;\n+    if (!pblocktree->ReadAddrIndex(addrid, vPos))\n+        return false;\n+    setpos.insert(vPos.begin(), vPos.end());\n+    return true;\n+}\n \n // Return transaction in tx, and if it was found inside a block, its hash is placed in hashBlock\n bool GetTransaction(const uint256 &hash, CTransaction &txOut, uint256 &hashBlock, bool fAllowSlow)\n@@ -1114,16 +1151,8 @@ bool GetTransaction(const uint256 &hash, CTransaction &txOut, uint256 &hashBlock\n         if (fTxIndex) {\n             CDiskTxPos postx;\n             if (pblocktree->ReadTxIndex(hash, postx)) {\n-                CAutoFile file(OpenBlockFile(postx, true), SER_DISK, CLIENT_VERSION);\n-                CBlockHeader header;\n-                try {\n-                    file >> header;\n-                    fseek(file, postx.nTxOffset, SEEK_CUR);\n-                    file >> txOut;\n-                } catch (std::exception &e) {\n-                    return error(\"%s() : deserialize or I/O error\", __PRETTY_FUNCTION__);\n-                }\n-                hashBlock = header.GetHash();\n+                if (!ReadTransaction(txOut, postx, hashBlock))\n+                    return false;\n                 if (txOut.GetHash() != hash)\n                     return error(\"%s() : txid mismatch\", __PRETTY_FUNCTION__);\n                 return true;\n@@ -1748,6 +1777,32 @@ void ThreadScriptCheck() {\n     scriptcheckqueue.Thread();\n }\n \n+// Index either: a) every data push >=8 bytes,  b) if no such pushes, the entire script\n+void static BuildAddrIndex(const CScript &script, const CExtDiskTxPos &pos, std::vector<std::pair<uint160, CExtDiskTxPos> > &out) {\n+    CScript::const_iterator pc = script.begin();\n+    CScript::const_iterator pend = script.end();\n+    std::vector<unsigned char> data;\n+    opcodetype opcode;\n+    bool fHaveData = false;\n+    while (pc < pend) {\n+        script.GetOp(pc, opcode, data);\n+        if (0 <= opcode && opcode <= OP_PUSHDATA4 && data.size() >= 8) { // data element\n+            uint160 addrid = 0;\n+            if (data.size() <= 20) {\n+                memcpy(&addrid, &data[0], data.size());\n+            } else {\n+                addrid = Hash160(data);\n+            }\n+            out.push_back(std::make_pair(addrid, pos));\n+            fHaveData = true;\n+        }\n+    }\n+    if (!fHaveData) {\n+        uint160 addrid = Hash160(script);\n+        out.push_back(std::make_pair(addrid, pos));\n+    }\n+}\n+\n bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& view, bool fJustCheck)\n {\n     // Check it again in case a previous version let a bad block in\n@@ -1805,10 +1860,14 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n     int64 nFees = 0;\n     int nInputs = 0;\n     unsigned int nSigOps = 0;\n-    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n-    std::vector<std::pair<uint256, CDiskTxPos> > vPos;\n-    vPos.reserve(block.vtx.size());\n-    for (unsigned int i = 0; i < block.vtx.size(); i++)\n+    CExtDiskTxPos pos(CDiskTxPos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size())), pindex->nHeight);\n+    std::vector<std::pair<uint256, CDiskTxPos> > vPosTxid;\n+    std::vector<std::pair<uint160, CExtDiskTxPos> > vPosAddrid;\n+    if (fTxIndex)\n+        vPosTxid.reserve(block.vtx.size());\n+    if (fAddrIndex)\n+        vPosAddrid.reserve(4*block.vtx.size());\n+    for (unsigned int i=0; i<block.vtx.size(); i++)\n     {\n         const CTransaction &tx = block.vtx[i];\n \n@@ -1840,12 +1899,24 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n             control.Add(vChecks);\n         }\n \n+        if (fTxIndex)\n+            vPosTxid.push_back(std::make_pair(block.GetTxHash(i), pos));\n+        if (fAddrIndex) {\n+            if (!tx.IsCoinBase()) {\n+                BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n+                    const CCoins &coins = view.GetCoins(txin.prevout.hash);\n+                    BuildAddrIndex(coins.vout[txin.prevout.n].scriptPubKey, pos, vPosAddrid);\n+                }\n+            }\n+            BOOST_FOREACH(const CTxOut &txout, tx.vout)\n+                BuildAddrIndex(txout.scriptPubKey, pos, vPosAddrid);\n+        }\n+\n         CTxUndo txundo;\n         UpdateCoins(tx, state, view, txundo, pindex->nHeight, block.GetTxHash(i));\n         if (!tx.IsCoinBase())\n             blockundo.vtxundo.push_back(txundo);\n \n-        vPos.push_back(std::make_pair(block.GetTxHash(i), pos));\n         pos.nTxOffset += ::GetSerializeSize(tx, SER_DISK, CLIENT_VERSION);\n     }\n     int64 nTime = GetTimeMicros() - nStart;\n@@ -1887,8 +1958,11 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n     }\n \n     if (fTxIndex)\n-        if (!pblocktree->WriteTxIndex(vPos))\n+        if (!pblocktree->WriteTxIndex(vPosTxid))\n             return state.Abort(_(\"Failed to write transaction index\"));\n+    if (fAddrIndex)\n+        if (!pblocktree->AddAddrIndex(vPosAddrid))\n+            return state.Abort(_(\"Failed to write address index\"));\n \n     // add this block to the view's block chain\n     assert(view.SetBestBlock(pindex));\n@@ -2745,6 +2819,9 @@ bool static LoadBlockIndexDB()\n     pblocktree->ReadFlag(\"txindex\", fTxIndex);\n     printf(\"LoadBlockIndexDB(): transaction index %s\\n\", fTxIndex ? \"enabled\" : \"disabled\");\n \n+    pblocktree->ReadFlag(\"addrindex\", fAddrIndex);\n+    printf(\"LoadBlockIndexDB(): address index %s\\n\", fAddrIndex ? \"enabled\" : \"disabled\");\n+\n     // Load hashBestChain pointer to end of best chain\n     pindexBest = pcoinsTip->GetBestBlock();\n     if (pindexBest == NULL)\n@@ -2869,6 +2946,8 @@ bool InitBlockIndex() {\n     // Use the provided setting for -txindex in the new database\n     fTxIndex = GetBoolArg(\"-txindex\", false);\n     pblocktree->WriteFlag(\"txindex\", fTxIndex);\n+    fAddrIndex = GetBoolArg(\"-addrindex\", false);\n+    pblocktree->WriteFlag(\"addrindex\", fAddrIndex);\n     printf(\"Initializing databases...\\n\");\n \n     // Only add the genesis block if not reindexing (in which case we reuse the one already on disk)"
      },
      {
        "sha": "64fa64c9f31bcce212a23ab9c671040c43f3ff60",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 51,
        "deletions": 0,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4790f3c823a33fae44b82ef7962372e38b1b0131/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4790f3c823a33fae44b82ef7962372e38b1b0131/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=4790f3c823a33fae44b82ef7962372e38b1b0131",
        "patch": "@@ -92,6 +92,7 @@ extern bool fReindex;\n extern bool fBenchmark;\n extern int nScriptCheckThreads;\n extern bool fTxIndex;\n+extern bool fAddrIndex;\n extern unsigned int nCoinCacheSize;\n extern bool fHaveGUI;\n \n@@ -258,9 +259,57 @@ struct CDiskTxPos : public CDiskBlockPos\n         CDiskBlockPos::SetNull();\n         nTxOffset = 0;\n     }\n+\n+    friend bool operator==(const CDiskTxPos &a, const CDiskTxPos &b) {\n+        return (a.nFile == b.nFile && a.nPos == b.nPos && a.nTxOffset == b.nTxOffset);\n+    }\n+\n+    friend bool operator!=(const CDiskTxPos &a, const CDiskTxPos &b) {\n+        return !(a == b);\n+    }\n+\n+    friend bool operator<(const CDiskTxPos &a, const CDiskTxPos &b) {\n+        return  (a.nFile < b.nFile || (\n+                (a.nFile == b.nFile) && (a.nPos < b.nPos || (\n+                                        (a.nPos == b.nPos) && (a.nTxOffset < b.nTxOffset)))));\n+    }\n };\n \n+struct CExtDiskTxPos : public CDiskTxPos\n+{\n+    unsigned int nHeight;\n+\n+    IMPLEMENT_SERIALIZE(\n+        READWRITE(*(CDiskTxPos*)this);\n+        READWRITE(VARINT(nHeight));\n+    )\n+\n+    CExtDiskTxPos(const CDiskTxPos &pos, int nHeightIn) : CDiskTxPos(pos), nHeight(nHeightIn) {\n+    }\n+\n+    CExtDiskTxPos() {\n+        SetNull();\n+    }\n+\n+    void SetNull() {\n+        CDiskTxPos::SetNull();\n+        nHeight = 0;\n+    }\n+\n+    friend bool operator==(const CExtDiskTxPos &a, const CExtDiskTxPos &b) {\n+        return (a.nHeight == b.nHeight && a.nFile == b.nFile && a.nPos == b.nPos && a.nTxOffset == b.nTxOffset);\n+    }\n \n+    friend bool operator!=(const CExtDiskTxPos &a, const CExtDiskTxPos &b) {\n+        return !(a == b);\n+    }\n+\n+    friend bool operator<(const CExtDiskTxPos &a, const CExtDiskTxPos &b) {\n+        if (a.nHeight < b.nHeight) return true;\n+        if (a.nHeight > b.nHeight) return false;\n+        return ((const CDiskTxPos)a < (const CDiskTxPos)b);\n+    }\n+};\n \n enum GetMinFee_mode\n {\n@@ -586,8 +635,10 @@ class CPartialMerkleTree\n \n /** Functions for disk access for blocks */\n bool WriteBlockToDisk(CBlock& block, CDiskBlockPos& pos);\n+bool ReadTransaction(CTransaction& tx, const CDiskTxPos &pos, uint256 &hashBlock);\n bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos);\n bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex);\n+bool FindTransactionsByDestination(const CTxDestination &dest, std::set<CExtDiskTxPos> &setpos);\n \n \n /** Functions for validating blocks and updating the block tree */"
      },
      {
        "sha": "f7b88a14e7359b59e243739881605b1b5e0b1e34",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 60,
        "deletions": 0,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4790f3c823a33fae44b82ef7962372e38b1b0131/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4790f3c823a33fae44b82ef7962372e38b1b0131/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=4790f3c823a33fae44b82ef7962372e38b1b0131",
        "patch": "@@ -131,6 +131,66 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, Object& entry)\n     }\n }\n \n+Value searchrawtransactions(const Array &params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 4)\n+        throw runtime_error(\n+            \"searchrawtransactions <address> [verbose=1] [skip=0] [count=100]\\n\");\n+\n+    if (!fAddrIndex)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Address index not enabled\");\n+\n+    CBitcoinAddress address(params[0].get_str());\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+    CTxDestination dest = address.Get();\n+\n+    std::set<CExtDiskTxPos> setpos;\n+    if (!FindTransactionsByDestination(dest, setpos))\n+        throw JSONRPCError(RPC_DATABASE_ERROR, \"Cannot search for address\");\n+\n+    int nSkip = 0;\n+    int nCount = 100;\n+    bool fVerbose = true;\n+    if (params.size() > 1)\n+        fVerbose = (params[1].get_int() != 0);\n+    if (params.size() > 2)\n+        nSkip = params[2].get_int();\n+    if (params.size() > 3)\n+        nCount = params[3].get_int();\n+\n+    if (nSkip < 0)\n+        nSkip += setpos.size();\n+    if (nSkip < 0)\n+        nSkip = 0;\n+    if (nCount < 0)\n+        nCount = 0;\n+\n+    std::set<CExtDiskTxPos>::const_iterator it = setpos.begin();\n+    while (it != setpos.end() && nSkip--) it++;\n+\n+    Array result;\n+    while (it != setpos.end() && nCount--) {\n+        CTransaction tx;\n+        uint256 hashBlock;\n+        if (!ReadTransaction(tx, *it, hashBlock))\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"Cannot read transaction from disk\");\n+        CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+        ssTx << tx;\n+        string strHex = HexStr(ssTx.begin(), ssTx.end());\n+        if (fVerbose) {\n+            Object object;\n+            TxToJSON(tx, hashBlock, object);\n+            object.push_back(Pair(\"hex\", strHex));\n+            result.push_back(object);\n+        } else {\n+            result.push_back(strHex);\n+        }\n+        it++;\n+    }\n+    return result;\n+}\n+\n Value getrawtransaction(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)"
      },
      {
        "sha": "7b8b3a5d40628009f9a2185206333dd67e377837",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 0,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4790f3c823a33fae44b82ef7962372e38b1b0131/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4790f3c823a33fae44b82ef7962372e38b1b0131/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=4790f3c823a33fae44b82ef7962372e38b1b0131",
        "patch": "@@ -67,6 +67,10 @@ bool CCoinsViewDB::BatchWrite(const std::map<uint256, CCoins> &mapCoins, CBlockI\n }\n \n CBlockTreeDB::CBlockTreeDB(size_t nCacheSize, bool fMemory, bool fWipe) : CLevelDB(GetDataDir() / \"blocks\" / \"index\", nCacheSize, fMemory, fWipe) {\n+    if (!Read('S', salt)) {\n+        salt = GetRandHash();\n+        Write('S', salt);\n+    }\n }\n \n bool CBlockTreeDB::WriteBlockIndex(const CDiskBlockIndex& blockindex)\n@@ -164,6 +168,40 @@ bool CBlockTreeDB::WriteTxIndex(const std::vector<std::pair<uint256, CDiskTxPos>\n     return WriteBatch(batch);\n }\n \n+bool CBlockTreeDB::ReadAddrIndex(uint160 addrid, std::vector<CExtDiskTxPos> &list) {\n+    CLevelDBIterator *iter = NewIterator();\n+    uint64 lookupid;\n+    {\n+        CHashWriter ss(SER_GETHASH, 0);\n+        ss << salt;\n+        ss << addrid;\n+        lookupid = ss.GetHash().Get64(0);\n+    }\n+    iter->Seek(make_pair('a', lookupid));\n+    while (iter->Valid()) {\n+        std::pair<std::pair<char, uint64>, CExtDiskTxPos> key;\n+        if (iter->GetKey(key) && key.first.first == 'a' && key.first.second == lookupid) {\n+            list.push_back(key.second);\n+        } else {\n+            break;\n+        }\n+        iter->Next();\n+    }\n+    return true;\n+}\n+\n+bool CBlockTreeDB::AddAddrIndex(const std::vector<std::pair<uint160, CExtDiskTxPos> > &list) {\n+    unsigned char foo[0];\n+    CLevelDBBatch batch;\n+    for (std::vector<std::pair<uint160, CExtDiskTxPos> >::const_iterator it=list.begin(); it!=list.end(); it++) {\n+        CHashWriter ss(SER_GETHASH, 0);\n+        ss << salt;\n+        ss << it->first;\n+        batch.Write(make_pair(make_pair('a', ss.GetHash().Get64(0)), it->second), FLATDATA(foo));\n+    }\n+    return WriteBatch(batch);\n+}\n+\n bool CBlockTreeDB::WriteFlag(const std::string &name, bool fValue) {\n     return Write(std::make_pair('F', name), fValue ? '1' : '0');\n }"
      },
      {
        "sha": "7f5c17160654962e6b3a3fcb86ebff5177b6397f",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4790f3c823a33fae44b82ef7962372e38b1b0131/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4790f3c823a33fae44b82ef7962372e38b1b0131/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=4790f3c823a33fae44b82ef7962372e38b1b0131",
        "patch": "@@ -31,6 +31,7 @@ class CBlockTreeDB : public CLevelDB\n public:\n     CBlockTreeDB(size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n private:\n+    uint256 salt;\n     CBlockTreeDB(const CBlockTreeDB&);\n     void operator=(const CBlockTreeDB&);\n public:\n@@ -45,6 +46,8 @@ class CBlockTreeDB : public CLevelDB\n     bool ReadReindexing(bool &fReindex);\n     bool ReadTxIndex(const uint256 &txid, CDiskTxPos &pos);\n     bool WriteTxIndex(const std::vector<std::pair<uint256, CDiskTxPos> > &list);\n+    bool ReadAddrIndex(uint160 addrid, std::vector<CExtDiskTxPos> &list);\n+    bool AddAddrIndex(const std::vector<std::pair<uint160, CExtDiskTxPos> > &list);\n     bool WriteFlag(const std::string &name, bool fValue);\n     bool ReadFlag(const std::string &name, bool &fValue);\n     bool LoadBlockIndexGuts();"
      }
    ]
  }
]