[
  {
    "sha": "c2715d3ab8d83be5bc256380b84d5467e85a4330",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMjcxNWQzYWI4ZDgzYmU1YmMyNTYzODBiODRkNTQ2N2U4NWE0MzMw",
    "commit": {
      "author": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2016-06-07T19:22:48Z"
      },
      "committer": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2016-06-07T19:22:48Z"
      },
      "message": "Do not shadow local variables",
      "tree": {
        "sha": "6dc67b195b2a6beb2d7169d48de7f14e9b2f2e84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6dc67b195b2a6beb2d7169d48de7f14e9b2f2e84"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c2715d3ab8d83be5bc256380b84d5467e85a4330",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2715d3ab8d83be5bc256380b84d5467e85a4330",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c2715d3ab8d83be5bc256380b84d5467e85a4330",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2715d3ab8d83be5bc256380b84d5467e85a4330/comments",
    "author": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "79004d4ae67164d980fdaab4de9d9d467cdb9b88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79004d4ae67164d980fdaab4de9d9d467cdb9b88",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/79004d4ae67164d980fdaab4de9d9d467cdb9b88"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "01eb2aee9ed02e6c39dd27666b812ed77b8d11bb",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2715d3ab8d83be5bc256380b84d5467e85a4330/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2715d3ab8d83be5bc256380b84d5467e85a4330/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=c2715d3ab8d83be5bc256380b84d5467e85a4330",
        "patch": "@@ -79,7 +79,7 @@ class TestAddrTypeVisitor : public boost::static_visitor<bool>\n private:\n     std::string exp_addrType;\n public:\n-    TestAddrTypeVisitor(const std::string &exp_addrType) : exp_addrType(exp_addrType) { }\n+    TestAddrTypeVisitor(const std::string &_exp_addrType) : exp_addrType(_exp_addrType) { }\n     bool operator()(const CKeyID &id) const\n     {\n         return (exp_addrType == \"pubkey\");\n@@ -100,7 +100,7 @@ class TestPayloadVisitor : public boost::static_visitor<bool>\n private:\n     std::vector<unsigned char> exp_payload;\n public:\n-    TestPayloadVisitor(std::vector<unsigned char> &exp_payload) : exp_payload(exp_payload) { }\n+    TestPayloadVisitor(std::vector<unsigned char> &_exp_payload) : exp_payload(_exp_payload) { }\n     bool operator()(const CKeyID &id) const\n     {\n         uint160 exp_key(exp_payload);"
      },
      {
        "sha": "3f5f0ee98bbd697a29b936e0b71305257a5a42d8",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2715d3ab8d83be5bc256380b84d5467e85a4330/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2715d3ab8d83be5bc256380b84d5467e85a4330/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=c2715d3ab8d83be5bc256380b84d5467e85a4330",
        "patch": "@@ -385,8 +385,8 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     SetMockTime(0);\n     mempool.clear();\n \n-    BOOST_FOREACH(CTransaction *tx, txFirst)\n-        delete tx;\n+    BOOST_FOREACH(CTransaction *_tx, txFirst)\n+        delete _tx;\n \n     fCheckpointsEnabled = true;\n }"
      },
      {
        "sha": "74ffe0cc74045f0152819fe2cb323f7b6917ebda",
        "filename": "src/test/pmt_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2715d3ab8d83be5bc256380b84d5467e85a4330/src/test/pmt_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2715d3ab8d83be5bc256380b84d5467e85a4330/src/test/pmt_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pmt_tests.cpp?ref=c2715d3ab8d83be5bc256380b84d5467e85a4330",
        "patch": "@@ -37,8 +37,8 @@ BOOST_AUTO_TEST_CASE(pmt_test1)\n     seed_insecure_rand(false);\n     static const unsigned int nTxCounts[] = {1, 4, 7, 17, 56, 100, 127, 256, 312, 513, 1000, 4095};\n \n-    for (int n = 0; n < 12; n++) {\n-        unsigned int nTx = nTxCounts[n];\n+    for (int i = 0; i < 12; i++) {\n+        unsigned int nTx = nTxCounts[i];\n \n         // build a block with some dummy transactions\n         CBlock block;"
      },
      {
        "sha": "d1407c1da9339e138e8eeff10875515a2144609e",
        "filename": "src/test/prevector_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2715d3ab8d83be5bc256380b84d5467e85a4330/src/test/prevector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2715d3ab8d83be5bc256380b84d5467e85a4330/src/test/prevector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/prevector_tests.cpp?ref=c2715d3ab8d83be5bc256380b84d5467e85a4330",
        "patch": "@@ -192,8 +192,8 @@ BOOST_AUTO_TEST_CASE(PrevectorTestInt)\n             if (((r >> 21) % 32) == 7) {\n                 int values[4];\n                 int num = 1 + (insecure_rand() % 4);\n-                for (int i = 0; i < num; i++) {\n-                    values[i] = insecure_rand();\n+                for (int k = 0; k < num; k++) {\n+                    values[k] = insecure_rand();\n                 }\n                 test.insert_range(insecure_rand() % (test.size() + 1), values, values + num);\n             }"
      }
    ]
  }
]