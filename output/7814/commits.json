[
  {
    "sha": "fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTM4OWQ0ZWRjMzY3MDczZTJjY2M2ZDFmMDc5MGM0YjcyYmExN2Yy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-03-19T19:58:06Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-05-05T13:43:37Z"
      },
      "message": "[qa] Switch to py3",
      "tree": {
        "sha": "3bc22860769bb62b3679dbd185940cf3df9f890e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3bc22860769bb62b3679dbd185940cf3df9f890e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3b9a0bf41f2336b09e854522ab1ce6dcfc7a3050",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b9a0bf41f2336b09e854522ab1ce6dcfc7a3050",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3b9a0bf41f2336b09e854522ab1ce6dcfc7a3050"
      }
    ],
    "stats": {
      "total": 1051,
      "additions": 504,
      "deletions": 547
    },
    "files": [
      {
        "sha": "fd70d3ab52d7cd2b984249c88eaae6e5085f6807",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -37,15 +37,15 @@ matrix:\n     - compiler: \": ARM\"\n       env: HOST=arm-linux-gnueabihf PACKAGES=\"g++-arm-linux-gnueabihf\" DEP_OPTS=\"NO_QT=1\" CHECK_DOC=1 GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n     - compiler: \": Win32\"\n-      env: HOST=i686-w64-mingw32 DPKG_ADD_ARCH=\"i386\" DEP_OPTS=\"NO_QT=1\" PACKAGES=\"nsis g++-mingw-w64-i686 wine1.6 bc\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-reduce-exports\"\n+      env: HOST=i686-w64-mingw32 DPKG_ADD_ARCH=\"i386\" DEP_OPTS=\"NO_QT=1\" PACKAGES=\"python3 nsis g++-mingw-w64-i686 wine1.6 bc\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-reduce-exports\"\n     - compiler: \": 32-bit + dash\"\n-      env: HOST=i686-pc-linux-gnu PACKAGES=\"g++-multilib bc python-zmq\" DEP_OPTS=\"NO_QT=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-zmq --enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\" USE_SHELL=\"/bin/dash\"\n+      env: HOST=i686-pc-linux-gnu PACKAGES=\"g++-multilib bc python3-zmq\" DEP_OPTS=\"NO_QT=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-zmq --enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\" USE_SHELL=\"/bin/dash\"\n     - compiler: \": Win64\"\n-      env: HOST=x86_64-w64-mingw32 DPKG_ADD_ARCH=\"i386\" DEP_OPTS=\"NO_QT=1\" PACKAGES=\"nsis g++-mingw-w64-x86-64 wine1.6 bc\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-reduce-exports\"\n+      env: HOST=x86_64-w64-mingw32 DPKG_ADD_ARCH=\"i386\" DEP_OPTS=\"NO_QT=1\" PACKAGES=\"python3 nsis g++-mingw-w64-x86-64 wine1.6 bc\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-reduce-exports\"\n     - compiler: \": bitcoind\"\n-      env: HOST=x86_64-unknown-linux-gnu PACKAGES=\"bc python-zmq\" DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-zmq --enable-glibc-back-compat --enable-reduce-exports CPPFLAGS=-DDEBUG_LOCKORDER\"\n+      env: HOST=x86_64-unknown-linux-gnu PACKAGES=\"bc python3-zmq\" DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-zmq --enable-glibc-back-compat --enable-reduce-exports CPPFLAGS=-DDEBUG_LOCKORDER\"\n     - compiler: \": No wallet\"\n-      env: HOST=x86_64-unknown-linux-gnu DEP_OPTS=\"NO_WALLET=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n+      env: HOST=x86_64-unknown-linux-gnu PACKAGES=\"python3\" DEP_OPTS=\"NO_WALLET=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n     - compiler: \": Cross-Mac\"\n       env: HOST=x86_64-apple-darwin11 PACKAGES=\"cmake imagemagick libcap-dev librsvg2-bin libz-dev libbz2-dev libtiff-tools python-dev\" BITCOIN_CONFIG=\"--enable-reduce-exports\" OSX_SDK=10.9 GOAL=\"deploy\"\n   exclude:"
      },
      {
        "sha": "6079e3254f783e4b9df6e3994869a454d10aaf7c",
        "filename": "doc/zmq.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/doc/zmq.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/doc/zmq.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/zmq.md?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -38,7 +38,7 @@ newer. Typically, it is packaged by distributions as something like\n *libzmq3-dev*. The C++ wrapper for ZeroMQ is *not* needed.\n \n In order to run the example Python client scripts in contrib/ one must\n-also install *python-zmq*, though this is not necessary for daemon\n+also install *python3-zmq*, though this is not necessary for daemon\n operation.\n \n ## Enabling"
      },
      {
        "sha": "3e0a526d1306f582679e87f3b1c7e2c17e9ed797",
        "filename": "qa/README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/README.md?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -11,9 +11,9 @@ Before running the tests, the following must be installed.\n \n Unix\n ----\n-The python-zmq library is required. On Ubuntu or Debian it can be installed via: \n+The python3-zmq library is required. On Ubuntu or Debian it can be installed via:\n ```\n-sudo apt-get install python-zmq\n+sudo apt-get install python3-zmq\n ```\n \n Running tests"
      },
      {
        "sha": "15153b7f586fcaf7324ce89fd4ee5d1e026be221",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -70,14 +70,14 @@\n if EXEEXT == \".exe\" and \"-win\" not in opts:\n     # https://github.com/bitcoin/bitcoin/commit/d52802551752140cf41f0d9a225a43e84404d3e9\n     # https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-136646964\n-    print \"Win tests currently disabled by default.  Use -win option to enable\"\n+    print(\"Win tests currently disabled by default.  Use -win option to enable\")\n     sys.exit(0)\n \n if not (ENABLE_WALLET == 1 and ENABLE_UTILS == 1 and ENABLE_BITCOIND == 1):\n-    print \"No rpc tests to run. Wallet, utils, and bitcoind must all be enabled\"\n+    print(\"No rpc tests to run. Wallet, utils, and bitcoind must all be enabled\")\n     sys.exit(0)\n \n-# python-zmq may not be installed. Handle this gracefully and with some helpful info\n+# python3-zmq may not be installed. Handle this gracefully and with some helpful info\n if ENABLE_ZMQ:\n     try:\n         import zmq"
      },
      {
        "sha": "2356b5200ebfec946d52522d1cca083b28384daa",
        "filename": "qa/pull-tester/tests_config.py.in",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/pull-tester/tests_config.py.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/pull-tester/tests_config.py.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/tests_config.py.in?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2013-2014 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2013-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -11,5 +11,3 @@ EXEEXT=\"@EXEEXT@\"\n @BUILD_BITCOIN_UTILS_TRUE@ENABLE_UTILS=1\n @BUILD_BITCOIND_TRUE@ENABLE_BITCOIND=1\n @ENABLE_ZMQ_TRUE@ENABLE_ZMQ=1\n-\n-"
      },
      {
        "sha": "b6c4b9db48fbff06f3fd4e0ac6b589b95bcb5e83",
        "filename": "qa/rpc-tests/abandonconflict.py",
        "status": "modified",
        "additions": 7,
        "deletions": 10,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/abandonconflict.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,15 +1,12 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-try:\n-    import urllib.parse as urlparse\n-except ImportError:\n-    import urlparse\n+import urllib.parse\n \n class AbandonConflictTest(BitcoinTestFramework):\n \n@@ -34,7 +31,7 @@ def run_test(self):\n         assert(balance - newbalance < Decimal(\"0.001\")) #no more than fees lost\n         balance = newbalance\n \n-        url = urlparse.urlparse(self.nodes[1].url)\n+        url = urllib.parse.urlparse(self.nodes[1].url)\n         self.nodes[0].disconnectnode(url.hostname+\":\"+str(p2p_port(1)))\n \n         # Identify the 10btc outputs\n@@ -151,9 +148,9 @@ def run_test(self):\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n         newbalance = self.nodes[0].getbalance()\n         #assert(newbalance == balance - Decimal(\"10\"))\n-        print \"If balance has not declined after invalidateblock then out of mempool wallet tx which is no longer\"\n-        print \"conflicted has not resumed causing its inputs to be seen as spent.  See Issue #7315\"\n-        print balance , \" -> \" , newbalance , \" ?\"\n+        print(\"If balance has not declined after invalidateblock then out of mempool wallet tx which is no longer\")\n+        print(\"conflicted has not resumed causing its inputs to be seen as spent.  See Issue #7315\")\n+        print(str(balance) + \" -> \" + str(newbalance) + \" ?\")\n \n if __name__ == '__main__':\n     AbandonConflictTest().main()"
      },
      {
        "sha": "60923b9dda90ae1e53bfa6b4aedd3cc90d706a79",
        "filename": "qa/rpc-tests/bip65-cltv-p2p.py",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/bip65-cltv-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/bip65-cltv-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip65-cltv-p2p.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,8 +1,7 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n-# Distributed under the MIT/X11 software license, see the accompanying\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.util import *\n@@ -67,13 +66,13 @@ def get_tests(self):\n \n         self.coinbase_blocks = self.nodes[0].generate(2)\n         height = 3  # height of the next block to build\n-        self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n+        self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n         self.nodeaddress = self.nodes[0].getnewaddress()\n         self.last_block_time = int(time.time())\n \n         ''' 98 more version 3 blocks '''\n         test_blocks = []\n-        for i in xrange(98):\n+        for i in range(98):\n             block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n             block.nVersion = 3\n             block.rehash()\n@@ -86,7 +85,7 @@ def get_tests(self):\n \n         ''' Mine 749 version 4 blocks '''\n         test_blocks = []\n-        for i in xrange(749):\n+        for i in range(749):\n             block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n             block.nVersion = 4\n             block.rehash()\n@@ -138,7 +137,7 @@ def get_tests(self):\n \n         ''' Mine 199 new version blocks on last valid tip '''\n         test_blocks = []\n-        for i in xrange(199):\n+        for i in range(199):\n             block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n             block.nVersion = 4\n             block.rehash()"
      },
      {
        "sha": "9d83fc947b1665a738f19eae1300609e8117b139",
        "filename": "qa/rpc-tests/bip65-cltv.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/bip65-cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/bip65-cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip65-cltv.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -32,7 +32,7 @@ def run_test(self):\n             raise AssertionError(\"Failed to mine 100 version=3 blocks\")\n \n         # Mine 750 new-version blocks\n-        for i in xrange(15):\n+        for i in range(15):\n             self.nodes[2].generate(50)\n         self.sync_all()\n         if (self.nodes[0].getblockcount() != cnt + 850):\n@@ -49,7 +49,7 @@ def run_test(self):\n         # TODO: check that new CHECKLOCKTIMEVERIFY rules are enforced\n \n         # Mine 198 new-version blocks\n-        for i in xrange(2):\n+        for i in range(2):\n             self.nodes[2].generate(99)\n         self.sync_all()\n         if (self.nodes[0].getblockcount() != cnt + 1049):"
      },
      {
        "sha": "eedb60e3a0958c13f8d0b32c2c4a162697d09237",
        "filename": "qa/rpc-tests/bip68-112-113-p2p.py",
        "status": "modified",
        "additions": 54,
        "deletions": 55,
        "changes": 109,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/bip68-112-113-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/bip68-112-113-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip68-112-113-p2p.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,8 +1,7 @@\n-#!/usr/bin/env python2\n+#!/usr/bin/env python3\n # Copyright (c) 2015 The Bitcoin Core developers\n-# Distributed under the MIT/X11 software license, see the accompanying\n+# Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.util import *\n@@ -63,13 +62,13 @@\n # b31,b25,b22,b18 represent the 31st, 25th, 22nd and 18th bits respectively in the nSequence field\n # relative_locktimes[b31][b25][b22][b18] is a base_relative_locktime with the indicated bits set if their indices are 1\n relative_locktimes = []\n-for b31 in xrange(2):\n+for b31 in range(2):\n     b25times = []\n-    for b25 in xrange(2):\n+    for b25 in range(2):\n         b22times = []\n-        for b22 in xrange(2):\n+        for b22 in range(2):\n             b18times = []\n-            for b18 in xrange(2):\n+            for b18 in range(2):\n                 rlt = base_relative_locktime\n                 if (b31):\n                     rlt = rlt | seq_disable_flag\n@@ -86,10 +85,10 @@\n \n def all_rlt_txs(txarray):\n     txs = []\n-    for b31 in xrange(2):\n-        for b25 in xrange(2):\n-            for b22 in xrange(2):\n-                for b18 in xrange(2):\n+    for b31 in range(2):\n+        for b25 in range(2):\n+            for b22 in range(2):\n+                for b18 in range(2):\n                     txs.append(txarray[b31][b25][b22][b18])\n     return txs\n \n@@ -131,7 +130,7 @@ def sign_transaction(self, node, unsignedtx):\n         return tx\n \n     def generate_blocks(self, number, version, test_blocks = []):\n-        for i in xrange(number):\n+        for i in range(number):\n             block = self.create_test_block([], version)\n             test_blocks.append([block, True])\n             self.last_block_time += 600\n@@ -152,13 +151,13 @@ def create_bip68txs(self, bip68inputs, txversion, locktime_delta = 0):\n         txs = []\n         assert(len(bip68inputs) >= 16)\n         i = 0\n-        for b31 in xrange(2):\n+        for b31 in range(2):\n             b25txs = []\n-            for b25 in xrange(2):\n+            for b25 in range(2):\n                 b22txs = []\n-                for b22 in xrange(2):\n+                for b22 in range(2):\n                     b18txs = []\n-                    for b18 in xrange(2):\n+                    for b18 in range(2):\n                         tx =  self.create_transaction(self.nodes[0], bip68inputs[i], self.nodeaddress, Decimal(\"49.98\"))\n                         i += 1\n                         tx.nVersion = txversion\n@@ -180,13 +179,13 @@ def create_bip112txs(self, bip112inputs, varyOP_CSV, txversion, locktime_delta =\n         txs = []\n         assert(len(bip112inputs) >= 16)\n         i = 0\n-        for b31 in xrange(2):\n+        for b31 in range(2):\n             b25txs = []\n-            for b25 in xrange(2):\n+            for b25 in range(2):\n                 b22txs = []\n-                for b22 in xrange(2):\n+                for b22 in range(2):\n                     b18txs = []\n-                    for b18 in xrange(2):\n+                    for b18 in range(2):\n                         tx =  self.create_transaction(self.nodes[0], bip112inputs[i], self.nodeaddress, Decimal(\"49.98\"))\n                         i += 1\n                         if (varyOP_CSV): # if varying OP_CSV, nSequence is fixed\n@@ -212,7 +211,7 @@ def get_tests(self):\n         self.nodes[0].setmocktime(0) # set time back to present so yielded blocks aren't in the future as we advance last_block_time\n         self.tipheight = 82 # height of the next block to build\n         self.last_block_time = long_past_time\n-        self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n+        self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n         self.nodeaddress = self.nodes[0].getnewaddress()\n \n         assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'defined')\n@@ -250,20 +249,20 @@ def get_tests(self):\n         # Note we reuse inputs for v1 and v2 txs so must test these separately\n         # 16 normal inputs\n         bip68inputs = []\n-        for i in xrange(16):\n+        for i in range(16):\n             bip68inputs.append(self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks))\n         # 2 sets of 16 inputs with 10 OP_CSV OP_DROP (actually will be prepended to spending scriptSig)\n         bip112basicinputs = []\n-        for j in xrange(2):\n+        for j in range(2):\n             inputs = []\n-            for i in xrange(16):\n+            for i in range(16):\n                 inputs.append(self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks))\n             bip112basicinputs.append(inputs)\n         # 2 sets of 16 varied inputs with (relative_lock_time) OP_CSV OP_DROP (actually will be prepended to spending scriptSig)\n         bip112diverseinputs = []\n-        for j in xrange(2):\n+        for j in range(2):\n             inputs = []\n-            for i in xrange(16):\n+            for i in range(16):\n                 inputs.append(self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks))\n             bip112diverseinputs.append(inputs)\n         # 1 special input with -1 OP_CSV OP_DROP (actually will be prepended to spending scriptSig)\n@@ -274,7 +273,7 @@ def get_tests(self):\n         self.nodes[0].setmocktime(self.last_block_time + 600)\n         inputblockhash = self.nodes[0].generate(1)[0] # 1 block generated for inputs to be in chain at height 572\n         self.nodes[0].setmocktime(0)\n-        self.tip = int(\"0x\" + inputblockhash + \"L\", 0)\n+        self.tip = int(\"0x\" + inputblockhash, 0)\n         self.tipheight += 1\n         self.last_block_time += 600\n         assert_equal(len(self.nodes[0].getblock(inputblockhash,True)[\"tx\"]), 82+1)\n@@ -398,22 +397,22 @@ def get_tests(self):\n         ### Version 2 txs ###\n         bip68success_txs = []\n         # All txs with SEQUENCE_LOCKTIME_DISABLE_FLAG set pass\n-        for b25 in xrange(2):\n-            for b22 in xrange(2):\n-                for b18 in xrange(2):\n+        for b25 in range(2):\n+            for b22 in range(2):\n+                for b18 in range(2):\n                     bip68success_txs.append(bip68txs_v2[1][b25][b22][b18])\n         yield TestInstance([[self.create_test_block(bip68success_txs), True]]) # 15\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n         # All txs without flag fail as we are at delta height = 8 < 10 and delta time = 8 * 600 < 10 * 512\n         bip68timetxs = []\n-        for b25 in xrange(2):\n-            for b18 in xrange(2):\n+        for b25 in range(2):\n+            for b18 in range(2):\n                 bip68timetxs.append(bip68txs_v2[0][b25][1][b18])\n         for tx in bip68timetxs:\n             yield TestInstance([[self.create_test_block([tx]), False]]) # 16 - 19\n         bip68heighttxs = []\n-        for b25 in xrange(2):\n-            for b18 in xrange(2):\n+        for b25 in range(2):\n+            for b18 in range(2):\n                 bip68heighttxs.append(bip68txs_v2[0][b25][0][b18])\n         for tx in bip68heighttxs:\n             yield TestInstance([[self.create_test_block([tx]), False]]) # 20 - 23\n@@ -445,9 +444,9 @@ def get_tests(self):\n         yield TestInstance([[self.create_test_block([bip112tx_special_v1]), False]]) #32\n         # If SEQUENCE_LOCKTIME_DISABLE_FLAG is set in argument to OP_CSV, version 1 txs should still pass\n         success_txs = []\n-        for b25 in xrange(2):\n-            for b22 in xrange(2):\n-                for b18 in xrange(2):\n+        for b25 in range(2):\n+            for b22 in range(2):\n+                for b18 in range(2):\n                     success_txs.append(bip112txs_vary_OP_CSV_v1[1][b25][b22][b18])\n                     success_txs.append(bip112txs_vary_OP_CSV_9_v1[1][b25][b22][b18])\n         yield TestInstance([[self.create_test_block(success_txs), True]]) # 33\n@@ -457,9 +456,9 @@ def get_tests(self):\n         fail_txs = []\n         fail_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_v1))\n         fail_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_9_v1))\n-        for b25 in xrange(2):\n-            for b22 in xrange(2):\n-                for b18 in xrange(2):\n+        for b25 in range(2):\n+            for b22 in range(2):\n+                for b18 in range(2):\n                     fail_txs.append(bip112txs_vary_OP_CSV_v1[0][b25][b22][b18])\n                     fail_txs.append(bip112txs_vary_OP_CSV_9_v1[0][b25][b22][b18])\n \n@@ -472,9 +471,9 @@ def get_tests(self):\n \n         # If SEQUENCE_LOCKTIME_DISABLE_FLAG is set in argument to OP_CSV, version 2 txs should pass (all sequence locks are met)\n         success_txs = []\n-        for b25 in xrange(2):\n-            for b22 in xrange(2):\n-                for b18 in xrange(2):\n+        for b25 in range(2):\n+            for b22 in range(2):\n+                for b18 in range(2):\n                     success_txs.append(bip112txs_vary_OP_CSV_v2[1][b25][b22][b18]) # 8/16 of vary_OP_CSV\n                     success_txs.append(bip112txs_vary_OP_CSV_9_v2[1][b25][b22][b18]) # 8/16 of vary_OP_CSV_9\n \n@@ -485,45 +484,45 @@ def get_tests(self):\n         # All txs with nSequence 9 should fail either due to earlier mismatch or failing the CSV check\n         fail_txs = []\n         fail_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_9_v2)) # 16/16 of vary_nSequence_9\n-        for b25 in xrange(2):\n-            for b22 in xrange(2):\n-                for b18 in xrange(2):\n+        for b25 in range(2):\n+            for b22 in range(2):\n+                for b18 in range(2):\n                     fail_txs.append(bip112txs_vary_OP_CSV_9_v2[0][b25][b22][b18]) # 16/16 of vary_OP_CSV_9\n \n         for tx in fail_txs:\n             yield TestInstance([[self.create_test_block([tx]), False]]) # 84 - 107\n \n         # If SEQUENCE_LOCKTIME_DISABLE_FLAG is set in nSequence, tx should fail\n         fail_txs = []\n-        for b25 in xrange(2):\n-            for b22 in xrange(2):\n-                for b18 in xrange(2):\n+        for b25 in range(2):\n+            for b22 in range(2):\n+                for b18 in range(2):\n                     fail_txs.append(bip112txs_vary_nSequence_v2[1][b25][b22][b18]) # 8/16 of vary_nSequence\n         for tx in fail_txs:\n             yield TestInstance([[self.create_test_block([tx]), False]]) # 108-115\n \n         # If sequencelock types mismatch, tx should fail\n         fail_txs = []\n-        for b25 in xrange(2):\n-            for b18 in xrange(2):\n+        for b25 in range(2):\n+            for b18 in range(2):\n                 fail_txs.append(bip112txs_vary_nSequence_v2[0][b25][1][b18]) # 12/16 of vary_nSequence\n                 fail_txs.append(bip112txs_vary_OP_CSV_v2[0][b25][1][b18]) # 12/16 of vary_OP_CSV\n         for tx in fail_txs:\n             yield TestInstance([[self.create_test_block([tx]), False]]) # 116-123\n \n         # Remaining txs should pass, just test masking works properly\n         success_txs = []\n-        for b25 in xrange(2):\n-            for b18 in xrange(2):\n+        for b25 in range(2):\n+            for b18 in range(2):\n                 success_txs.append(bip112txs_vary_nSequence_v2[0][b25][0][b18]) # 16/16 of vary_nSequence\n                 success_txs.append(bip112txs_vary_OP_CSV_v2[0][b25][0][b18]) # 16/16 of vary_OP_CSV\n         yield TestInstance([[self.create_test_block(success_txs), True]]) # 124\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n \n         # Additional test, of checking that comparison of two time types works properly\n         time_txs = []\n-        for b25 in xrange(2):\n-            for b18 in xrange(2):\n+        for b25 in range(2):\n+            for b18 in range(2):\n                 tx = bip112txs_vary_OP_CSV_v2[0][b25][1][b18]\n                 tx.vin[0].nSequence = base_relative_locktime | seq_type_flag\n                 signtx = self.sign_transaction(self.nodes[0], tx)"
      },
      {
        "sha": "717f7562cdee2b35295a79b3a6d1457a5c10879b",
        "filename": "qa/rpc-tests/bip68-sequence.py",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/bip68-sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/bip68-sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip68-sequence.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -35,28 +35,28 @@ def run_test(self):\n         # Generate some coins\n         self.nodes[0].generate(110)\n \n-        print \"Running test disable flag\"\n+        print(\"Running test disable flag\")\n         self.test_disable_flag()\n \n-        print \"Running test sequence-lock-confirmed-inputs\"\n+        print(\"Running test sequence-lock-confirmed-inputs\")\n         self.test_sequence_lock_confirmed_inputs()\n \n-        print \"Running test sequence-lock-unconfirmed-inputs\"\n+        print(\"Running test sequence-lock-unconfirmed-inputs\")\n         self.test_sequence_lock_unconfirmed_inputs()\n \n-        print \"Running test BIP68 not consensus before versionbits activation\"\n+        print(\"Running test BIP68 not consensus before versionbits activation\")\n         self.test_bip68_not_consensus()\n \n-        print \"Verifying nVersion=2 transactions aren't standard\"\n+        print(\"Verifying nVersion=2 transactions aren't standard\")\n         self.test_version2_relay(before_activation=True)\n \n-        print \"Activating BIP68 (and 112/113)\"\n+        print(\"Activating BIP68 (and 112/113)\")\n         self.activateCSV()\n \n-        print \"Verifying nVersion=2 transactions are now standard\"\n+        print(\"Verifying nVersion=2 transactions are now standard\")\n         self.test_version2_relay(before_activation=False)\n \n-        print \"Passed\\n\"\n+        print(\"Passed\\n\")\n \n     # Test that BIP68 is not in effect if tx version is 1, or if\n     # the first sequence bit is set.\n@@ -125,7 +125,7 @@ def test_sequence_lock_confirmed_inputs(self):\n             random.shuffle(addresses)\n             num_outputs = random.randint(1, max_outputs)\n             outputs = {}\n-            for i in xrange(num_outputs):\n+            for i in range(num_outputs):\n                 outputs[addresses[i]] = random.randint(1, 20)*0.01\n             self.nodes[0].sendmany(\"\", outputs)\n             self.nodes[0].generate(1)\n@@ -137,7 +137,7 @@ def test_sequence_lock_confirmed_inputs(self):\n         # some of those inputs to be sequence locked (and randomly choose\n         # between height/time locking). Small random chance of making the locks\n         # all pass.\n-        for i in xrange(400):\n+        for i in range(400):\n             # Randomly choose up to 10 inputs\n             num_inputs = random.randint(1, 10)\n             random.shuffle(utxos)\n@@ -151,7 +151,7 @@ def test_sequence_lock_confirmed_inputs(self):\n             tx = CTransaction()\n             tx.nVersion = 2\n             value = 0\n-            for j in xrange(num_inputs):\n+            for j in range(num_inputs):\n                 sequence_value = 0xfffffffe # this disables sequence locks\n \n                 # 50% chance we enable sequence locks\n@@ -259,7 +259,7 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n         # Use prioritisetransaction to lower the effective feerate to 0\n         self.nodes[0].prioritisetransaction(tx2.hash, -1e15, int(-self.relayfee*COIN))\n         cur_time = int(time.time())\n-        for i in xrange(10):\n+        for i in range(10):\n             self.nodes[0].setmocktime(cur_time + 600)\n             self.nodes[0].generate(1)\n             cur_time += 600\n@@ -324,7 +324,7 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n         # tx3 to be removed.\n         tip = int(self.nodes[0].getblockhash(self.nodes[0].getblockcount()-1), 16)\n         height = self.nodes[0].getblockcount()\n-        for i in xrange(2):\n+        for i in range(2):\n             block = create_block(tip, create_coinbase(height), cur_time)\n             block.nVersion = 3\n             block.rehash()"
      },
      {
        "sha": "e9b659d5082d28be3e69f92104590635f8dd5e72",
        "filename": "qa/rpc-tests/bip9-softforks.py",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/bip9-softforks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/bip9-softforks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip9-softforks.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,8 +1,7 @@\n-#!/usr/bin/env python2\n+#!/usr/bin/env python3\n # Copyright (c) 2015 The Bitcoin Core developers\n-# Distributed under the MIT/X11 software license, see the accompanying\n+# Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.util import *\n@@ -64,7 +63,7 @@ def sign_transaction(self, node, tx):\n         return tx\n \n     def generate_blocks(self, number, version, test_blocks = []):\n-        for i in xrange(number):\n+        for i in range(number):\n             block = create_block(self.tip, create_coinbase(self.height), self.last_block_time + 1)\n             block.nVersion = version\n             block.rehash()\n@@ -83,7 +82,7 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n         # generate some coins for later\n         self.coinbase_blocks = self.nodes[0].generate(2)\n         self.height = 3  # height of the next block to build\n-        self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n+        self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n         self.nodeaddress = self.nodes[0].getnewaddress()\n         self.last_block_time = int(time.time())\n "
      },
      {
        "sha": "c4627308400b8a89ee8270dbdc6b6aaf51c02c16",
        "filename": "qa/rpc-tests/bipdersig-p2p.py",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/bipdersig-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/bipdersig-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bipdersig-p2p.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,8 +1,7 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n-# Distributed under the MIT/X11 software license, see the accompanying\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.util import *\n@@ -75,13 +74,13 @@ def get_tests(self):\n \n         self.coinbase_blocks = self.nodes[0].generate(2)\n         height = 3  # height of the next block to build\n-        self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n+        self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n         self.nodeaddress = self.nodes[0].getnewaddress()\n         self.last_block_time = int(time.time())\n \n         ''' 98 more version 2 blocks '''\n         test_blocks = []\n-        for i in xrange(98):\n+        for i in range(98):\n             block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n             block.nVersion = 2\n             block.rehash()\n@@ -94,7 +93,7 @@ def get_tests(self):\n \n         ''' Mine 749 version 3 blocks '''\n         test_blocks = []\n-        for i in xrange(749):\n+        for i in range(749):\n             block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n             block.nVersion = 3\n             block.rehash()\n@@ -146,7 +145,7 @@ def get_tests(self):\n \n         ''' Mine 199 new version blocks on last valid tip '''\n         test_blocks = []\n-        for i in xrange(199):\n+        for i in range(199):\n             block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n             block.nVersion = 3\n             block.rehash()"
      },
      {
        "sha": "f2d2c14a72c24d3f34f1e23eee719d24084d1a59",
        "filename": "qa/rpc-tests/bipdersig.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/bipdersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/bipdersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bipdersig.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -32,7 +32,7 @@ def run_test(self):\n             raise AssertionError(\"Failed to mine 100 version=2 blocks\")\n \n         # Mine 750 new-version blocks\n-        for i in xrange(15):\n+        for i in range(15):\n             self.nodes[2].generate(50)\n         self.sync_all()\n         if (self.nodes[0].getblockcount() != cnt + 850):\n@@ -49,7 +49,7 @@ def run_test(self):\n         # TODO: check that new DERSIG rules are enforced\n \n         # Mine 198 new-version blocks\n-        for i in xrange(2):\n+        for i in range(2):\n             self.nodes[2].generate(99)\n         self.sync_all()\n         if (self.nodes[0].getblockcount() != cnt + 1049):"
      },
      {
        "sha": "c84047b5dd18c2131eaea3f3518c26b3fd284186",
        "filename": "qa/rpc-tests/blockchain.py",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/blockchain.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -51,13 +51,13 @@ def _test_gettxoutsetinfo(self):\n         node = self.nodes[0]\n         res = node.gettxoutsetinfo()\n \n-        assert_equal(res[u'total_amount'], Decimal('8725.00000000'))\n-        assert_equal(res[u'transactions'], 200)\n-        assert_equal(res[u'height'], 200)\n-        assert_equal(res[u'txouts'], 200)\n-        assert_equal(res[u'bytes_serialized'], 13924),\n-        assert_equal(len(res[u'bestblock']), 64)\n-        assert_equal(len(res[u'hash_serialized']), 64)\n+        assert_equal(res['total_amount'], Decimal('8725.00000000'))\n+        assert_equal(res['transactions'], 200)\n+        assert_equal(res['height'], 200)\n+        assert_equal(res['txouts'], 200)\n+        assert_equal(res['bytes_serialized'], 13924),\n+        assert_equal(len(res['bestblock']), 64)\n+        assert_equal(len(res['hash_serialized']), 64)\n \n     def _test_getblockheader(self):\n         node = self.nodes[0]"
      },
      {
        "sha": "0037542e62e022a4561cc87aef15c8d39daca574",
        "filename": "qa/rpc-tests/decodescript.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/decodescript.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/decodescript.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/decodescript.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "b25d2ba3352cf40257030ce9ce849a9482191492",
        "filename": "qa/rpc-tests/disablewallet.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/disablewallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/disablewallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/disablewallet.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "421f3dd8729732d1910d551e1c6c4a78cdbcf52b",
        "filename": "qa/rpc-tests/forknotify.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/forknotify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/forknotify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/forknotify.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "74849603f719d3a5cfe69b9dc96897fe4729bb13",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -10,7 +10,7 @@\n class RawTransactionsTest(BitcoinTestFramework):\n \n     def setup_chain(self):\n-        print(\"Initializing test directory \"+self.options.tmpdir)\n+        print((\"Initializing test directory \"+self.options.tmpdir))\n         initialize_chain_clean(self.options.tmpdir, 4)\n \n     def setup_network(self, split=False):\n@@ -25,7 +25,7 @@ def setup_network(self, split=False):\n         self.sync_all()\n \n     def run_test(self):\n-        print \"Mining blocks...\"\n+        print(\"Mining blocks...\")\n \n         min_relay_tx_fee = self.nodes[0].getnetworkinfo()['relayfee']\n         # This test is not meant to test fee estimation and we'd like\n@@ -198,7 +198,7 @@ def run_test(self):\n         try:\n             self.nodes[2].fundrawtransaction(rawtx, {'foo': 'bar'})\n             raise AssertionError(\"Accepted invalid option foo\")\n-        except JSONRPCException,e:\n+        except JSONRPCException as e:\n             assert(\"Unexpected key foo\" in e.error['message'])\n \n \n@@ -223,7 +223,7 @@ def run_test(self):\n         try:\n             self.nodes[2].fundrawtransaction(rawtx, {'changeAddress': 'foobar'})\n             raise AssertionError(\"Accepted invalid bitcoin address\")\n-        except JSONRPCException,e:\n+        except JSONRPCException as e:\n             assert(\"changeAddress must be a valid bitcoin address\" in e.error['message'])\n \n "
      },
      {
        "sha": "e44334707774192da4c4090c5bfc0cd9b2931dae",
        "filename": "qa/rpc-tests/getblocktemplate_longpoll.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/getblocktemplate_longpoll.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/getblocktemplate_longpoll.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/getblocktemplate_longpoll.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -27,7 +27,7 @@ class GetBlockTemplateLPTest(BitcoinTestFramework):\n     '''\n \n     def run_test(self):\n-        print \"Warning: this test will take about 70 seconds in the best case. Be patient.\"\n+        print(\"Warning: this test will take about 70 seconds in the best case. Be patient.\")\n         self.nodes[0].generate(10)\n         templat = self.nodes[0].getblocktemplate()\n         longpollid = templat['longpollid']"
      },
      {
        "sha": "1ad2af4c2e3ac5c8e8ff8f9a7929520d7c57d3a6",
        "filename": "qa/rpc-tests/getblocktemplate_proposals.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/getblocktemplate_proposals.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/getblocktemplate_proposals.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/getblocktemplate_proposals.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -46,7 +46,7 @@ def genmrklroot(leaflist):\n         cur = n\n     return cur[0]\n \n-def template_to_bytes(tmpl, txlist):\n+def template_to_bytearray(tmpl, txlist):\n     blkver = pack('<L', tmpl['version'])\n     mrklroot = genmrklroot(list(dblsha(a) for a in txlist))\n     timestamp = pack('<L', tmpl['curtime'])\n@@ -55,10 +55,10 @@ def template_to_bytes(tmpl, txlist):\n     blk += varlenEncode(len(txlist))\n     for tx in txlist:\n         blk += tx\n-    return blk\n+    return bytearray(blk)\n \n def template_to_hex(tmpl, txlist):\n-    return b2x(template_to_bytes(tmpl, txlist))\n+    return b2x(template_to_bytearray(tmpl, txlist))\n \n def assert_template(node, tmpl, txlist, expect):\n     rsp = node.getblocktemplate({'data':template_to_hex(tmpl, txlist),'mode':'proposal'})\n@@ -129,7 +129,7 @@ def run_test(self):\n         tmpl['bits'] = realbits\n \n         # Test 9: Bad merkle root\n-        rawtmpl = template_to_bytes(tmpl, txlist)\n+        rawtmpl = template_to_bytearray(tmpl, txlist)\n         rawtmpl[4+32] = (rawtmpl[4+32] + 1) % 0x100\n         rsp = node.getblocktemplate({'data':b2x(rawtmpl),'mode':'proposal'})\n         if rsp != 'bad-txnmrklroot':"
      },
      {
        "sha": "da354b0c97a0164c89386228ce40cb632de44515",
        "filename": "qa/rpc-tests/getchaintips.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/getchaintips.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/getchaintips.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/getchaintips.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "c62edc8e130cc63a3e06e00ddb72890eef18566a",
        "filename": "qa/rpc-tests/httpbasics.py",
        "status": "modified",
        "additions": 16,
        "deletions": 22,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/httpbasics.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/httpbasics.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/httpbasics.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -10,14 +10,8 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n-try:\n-    import http.client as httplib\n-except ImportError:\n-    import httplib\n-try:\n-    import urllib.parse as urlparse\n-except ImportError:\n-    import urlparse\n+import http.client\n+import urllib.parse\n \n class HTTPBasicsTest (BitcoinTestFramework):\n     def setup_nodes(self):\n@@ -28,11 +22,11 @@ def run_test(self):\n         #################################################\n         # lowlevel check for http persistent connection #\n         #################################################\n-        url = urlparse.urlparse(self.nodes[0].url)\n+        url = urllib.parse.urlparse(self.nodes[0].url)\n         authpair = url.username + ':' + url.password\n         headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n \n-        conn = httplib.HTTPConnection(url.hostname, url.port)\n+        conn = http.client.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read()\n@@ -49,7 +43,7 @@ def run_test(self):\n         #same should be if we add keep-alive because this should be the std. behaviour\n         headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair), \"Connection\": \"keep-alive\"}\n \n-        conn = httplib.HTTPConnection(url.hostname, url.port)\n+        conn = http.client.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read()\n@@ -66,48 +60,48 @@ def run_test(self):\n         #now do the same with \"Connection: close\"\n         headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair), \"Connection\":\"close\"}\n \n-        conn = httplib.HTTPConnection(url.hostname, url.port)\n+        conn = http.client.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read()\n         assert(b'\"error\":null' in out1)\n         assert(conn.sock==None) #now the connection must be closed after the response\n \n         #node1 (2nd node) is running with disabled keep-alive option\n-        urlNode1 = urlparse.urlparse(self.nodes[1].url)\n+        urlNode1 = urllib.parse.urlparse(self.nodes[1].url)\n         authpair = urlNode1.username + ':' + urlNode1.password\n         headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n \n-        conn = httplib.HTTPConnection(urlNode1.hostname, urlNode1.port)\n+        conn = http.client.HTTPConnection(urlNode1.hostname, urlNode1.port)\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read()\n         assert(b'\"error\":null' in out1)\n \n         #node2 (third node) is running with standard keep-alive parameters which means keep-alive is on\n-        urlNode2 = urlparse.urlparse(self.nodes[2].url)\n+        urlNode2 = urllib.parse.urlparse(self.nodes[2].url)\n         authpair = urlNode2.username + ':' + urlNode2.password\n         headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n \n-        conn = httplib.HTTPConnection(urlNode2.hostname, urlNode2.port)\n+        conn = http.client.HTTPConnection(urlNode2.hostname, urlNode2.port)\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read()\n         assert(b'\"error\":null' in out1)\n         assert(conn.sock!=None) #connection must be closed because bitcoind should use keep-alive by default\n \n         # Check excessive request size\n-        conn = httplib.HTTPConnection(urlNode2.hostname, urlNode2.port)\n+        conn = http.client.HTTPConnection(urlNode2.hostname, urlNode2.port)\n         conn.connect()\n         conn.request('GET', '/' + ('x'*1000), '', headers)\n         out1 = conn.getresponse()\n-        assert_equal(out1.status, httplib.NOT_FOUND)\n+        assert_equal(out1.status, http.client.NOT_FOUND)\n \n-        conn = httplib.HTTPConnection(urlNode2.hostname, urlNode2.port)\n+        conn = http.client.HTTPConnection(urlNode2.hostname, urlNode2.port)\n         conn.connect()\n         conn.request('GET', '/' + ('x'*10000), '', headers)\n         out1 = conn.getresponse()\n-        assert_equal(out1.status, httplib.BAD_REQUEST)\n+        assert_equal(out1.status, http.client.BAD_REQUEST)\n \n \n if __name__ == '__main__':"
      },
      {
        "sha": "def1d891c361450cf71c1b51a575b3162fa09d1b",
        "filename": "qa/rpc-tests/importprunedfunds.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/importprunedfunds.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,4 +1,4 @@\n-#!/usr/bin/env python2\n+#!/usr/bin/env python3\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n@@ -23,7 +23,7 @@ def run_test (self):\n         import time\n         begintime = int(time.time())\n \n-        print \"Mining blocks...\"\n+        print(\"Mining blocks...\")\n         self.nodes[0].generate(101)\n \n         # sync"
      },
      {
        "sha": "2e3a449f5e781ad4ee58f81c88c9e7296f8d5cd8",
        "filename": "qa/rpc-tests/invalidateblock.py",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/invalidateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/invalidateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/invalidateblock.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -25,46 +25,46 @@ def setup_network(self):\n         self.nodes.append(start_node(2, self.options.tmpdir, [\"-debug\"]))\n         \n     def run_test(self):\n-        print \"Make sure we repopulate setBlockIndexCandidates after InvalidateBlock:\"\n-        print \"Mine 4 blocks on Node 0\"\n+        print(\"Make sure we repopulate setBlockIndexCandidates after InvalidateBlock:\")\n+        print(\"Mine 4 blocks on Node 0\")\n         self.nodes[0].generate(4)\n         assert(self.nodes[0].getblockcount() == 4)\n         besthash = self.nodes[0].getbestblockhash()\n \n-        print \"Mine competing 6 blocks on Node 1\"\n+        print(\"Mine competing 6 blocks on Node 1\")\n         self.nodes[1].generate(6)\n         assert(self.nodes[1].getblockcount() == 6)\n \n-        print \"Connect nodes to force a reorg\"\n+        print(\"Connect nodes to force a reorg\")\n         connect_nodes_bi(self.nodes,0,1)\n         sync_blocks(self.nodes[0:2])\n         assert(self.nodes[0].getblockcount() == 6)\n         badhash = self.nodes[1].getblockhash(2)\n \n-        print \"Invalidate block 2 on node 0 and verify we reorg to node 0's original chain\"\n+        print(\"Invalidate block 2 on node 0 and verify we reorg to node 0's original chain\")\n         self.nodes[0].invalidateblock(badhash)\n         newheight = self.nodes[0].getblockcount()\n         newhash = self.nodes[0].getbestblockhash()\n         if (newheight != 4 or newhash != besthash):\n             raise AssertionError(\"Wrong tip for node0, hash %s, height %d\"%(newhash,newheight))\n \n-        print \"\\nMake sure we won't reorg to a lower work chain:\"\n+        print(\"\\nMake sure we won't reorg to a lower work chain:\")\n         connect_nodes_bi(self.nodes,1,2)\n-        print \"Sync node 2 to node 1 so both have 6 blocks\"\n+        print(\"Sync node 2 to node 1 so both have 6 blocks\")\n         sync_blocks(self.nodes[1:3])\n         assert(self.nodes[2].getblockcount() == 6)\n-        print \"Invalidate block 5 on node 1 so its tip is now at 4\"\n+        print(\"Invalidate block 5 on node 1 so its tip is now at 4\")\n         self.nodes[1].invalidateblock(self.nodes[1].getblockhash(5))\n         assert(self.nodes[1].getblockcount() == 4)\n-        print \"Invalidate block 3 on node 2, so its tip is now 2\"\n+        print(\"Invalidate block 3 on node 2, so its tip is now 2\")\n         self.nodes[2].invalidateblock(self.nodes[2].getblockhash(3))\n         assert(self.nodes[2].getblockcount() == 2)\n-        print \"..and then mine a block\"\n+        print(\"..and then mine a block\")\n         self.nodes[2].generate(1)\n-        print \"Verify all nodes are at the right height\"\n+        print(\"Verify all nodes are at the right height\")\n         time.sleep(5)\n-        for i in xrange(3):\n-            print i,self.nodes[i].getblockcount()\n+        for i in range(3):\n+            print(i,self.nodes[i].getblockcount())\n         assert(self.nodes[2].getblockcount() == 3)\n         assert(self.nodes[0].getblockcount() == 4)\n         node1height = self.nodes[1].getblockcount()"
      },
      {
        "sha": "78dc7199da316f72cd0de42f1a5a1c382d154c75",
        "filename": "qa/rpc-tests/invalidblockrequest.py",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/invalidblockrequest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/invalidblockrequest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/invalidblockrequest.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,8 +1,7 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n-# Distributed under the MIT/X11 software license, see the accompanying\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.util import *\n@@ -38,7 +37,7 @@ def run_test(self):\n \n     def get_tests(self):\n         if self.tip is None:\n-            self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n+            self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n         self.block_time = int(time.time())+1\n \n         '''\n@@ -58,7 +57,7 @@ def get_tests(self):\n         Now we need that block to mature so we can spend the coinbase.\n         '''\n         test = TestInstance(sync_every_block=False)\n-        for i in xrange(100):\n+        for i in range(100):\n             block = create_block(self.tip, create_coinbase(height), self.block_time)\n             block.solve()\n             self.tip = block.sha256"
      },
      {
        "sha": "d4200b0e885f9c76464fac6216436ee593e967ed",
        "filename": "qa/rpc-tests/invalidtxrequest.py",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/invalidtxrequest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/invalidtxrequest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/invalidtxrequest.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,8 +1,7 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n-# Distributed under the MIT/X11 software license, see the accompanying\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.comptool import TestManager, TestInstance, RejectResult\n@@ -32,7 +31,7 @@ def run_test(self):\n \n     def get_tests(self):\n         if self.tip is None:\n-            self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n+            self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n         self.block_time = int(time.time())+1\n \n         '''\n@@ -52,7 +51,7 @@ def get_tests(self):\n         Now we need that block to mature so we can spend the coinbase.\n         '''\n         test = TestInstance(sync_every_block=False)\n-        for i in xrange(100):\n+        for i in range(100):\n             block = create_block(self.tip, create_coinbase(height), self.block_time)\n             block.solve()\n             self.tip = block.sha256"
      },
      {
        "sha": "bdc144bfbc2fb615cb37d0fbc55c22882f508439",
        "filename": "qa/rpc-tests/keypool.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/keypool.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "8dad687eddaa90c53c0dc37cbd31a27c706940b6",
        "filename": "qa/rpc-tests/listtransactions.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/listtransactions.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "6f105a77e3af9dca5f809400b88626ad467ea207",
        "filename": "qa/rpc-tests/maxblocksinflight.py",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/maxblocksinflight.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/maxblocksinflight.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/maxblocksinflight.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,8 +1,7 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n-# Distributed under the MIT/X11 software license, see the accompanying\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n \n from test_framework.mininode import *\n from test_framework.test_framework import BitcoinTestFramework\n@@ -65,7 +64,7 @@ def run(self):\n                         raise AssertionError(\"Error, test failed: block %064x requested more than once\" % key)\n             if total_requests > MAX_REQUESTS:\n                 raise AssertionError(\"Error, too many blocks (%d) requested\" % total_requests)\n-            print \"Round %d: success (total requests: %d)\" % (count, total_requests)\n+            print(\"Round %d: success (total requests: %d)\" % (count, total_requests))\n \n         self.disconnectOkay = True\n         self.connection.disconnect_node()\n@@ -78,7 +77,7 @@ def add_options(self, parser):\n                           help=\"Binary to test max block requests behavior\")\n \n     def setup_chain(self):\n-        print \"Initializing test directory \"+self.options.tmpdir\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n         initialize_chain_clean(self.options.tmpdir, 1)\n \n     def setup_network(self):"
      },
      {
        "sha": "ec802d8155bd53092dfa5849bb71a27646933c65",
        "filename": "qa/rpc-tests/maxuploadtarget.py",
        "status": "modified",
        "additions": 17,
        "deletions": 18,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/maxuploadtarget.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,8 +1,7 @@\n-#!/usr/bin/env python2\n-#\n-# Distributed under the MIT/X11 software license, see the accompanying\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n \n from test_framework.mininode import *\n from test_framework.test_framework import BitcoinTestFramework\n@@ -101,7 +100,7 @@ def setup_network(self):\n     def mine_full_block(self, node, address):\n         # Want to create a full block\n         # We'll generate a 66k transaction below, and 14 of them is close to the 1MB block limit\n-        for j in xrange(14):\n+        for j in range(14):\n             if len(self.utxo) < 14:\n                 self.utxo = node.listunspent()\n             inputs=[]\n@@ -139,7 +138,7 @@ def run_test(self):\n         test_nodes = []\n         connections = []\n \n-        for i in xrange(3):\n+        for i in range(3):\n             test_nodes.append(TestNode())\n             connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], test_nodes[i]))\n             test_nodes[i].add_connection(connections[i])\n@@ -181,40 +180,40 @@ def run_test(self):\n \n         # 144MB will be reserved for relaying new blocks, so expect this to\n         # succeed for ~70 tries.\n-        for i in xrange(success_count):\n+        for i in range(success_count):\n             test_nodes[0].send_message(getdata_request)\n             test_nodes[0].sync_with_ping()\n             assert_equal(test_nodes[0].block_receive_map[big_old_block], i+1)\n \n         assert_equal(len(self.nodes[0].getpeerinfo()), 3)\n         # At most a couple more tries should succeed (depending on how long \n         # the test has been running so far).\n-        for i in xrange(3):\n+        for i in range(3):\n             test_nodes[0].send_message(getdata_request)\n         test_nodes[0].wait_for_disconnect()\n         assert_equal(len(self.nodes[0].getpeerinfo()), 2)\n-        print \"Peer 0 disconnected after downloading old block too many times\"\n+        print(\"Peer 0 disconnected after downloading old block too many times\")\n \n         # Requesting the current block on test_nodes[1] should succeed indefinitely,\n         # even when over the max upload target.\n         # We'll try 200 times\n         getdata_request.inv = [CInv(2, big_new_block)]\n-        for i in xrange(200):\n+        for i in range(200):\n             test_nodes[1].send_message(getdata_request)\n             test_nodes[1].sync_with_ping()\n             assert_equal(test_nodes[1].block_receive_map[big_new_block], i+1)\n \n-        print \"Peer 1 able to repeatedly download new block\"\n+        print(\"Peer 1 able to repeatedly download new block\")\n \n         # But if test_nodes[1] tries for an old block, it gets disconnected too.\n         getdata_request.inv = [CInv(2, big_old_block)]\n         test_nodes[1].send_message(getdata_request)\n         test_nodes[1].wait_for_disconnect()\n         assert_equal(len(self.nodes[0].getpeerinfo()), 1)\n \n-        print \"Peer 1 disconnected after trying to download old block\"\n+        print(\"Peer 1 disconnected after trying to download old block\")\n \n-        print \"Advancing system time on node to clear counters...\"\n+        print(\"Advancing system time on node to clear counters...\")\n \n         # If we advance the time by 24 hours, then the counters should reset,\n         # and test_nodes[2] should be able to retrieve the old block.\n@@ -224,20 +223,20 @@ def run_test(self):\n         test_nodes[2].sync_with_ping()\n         assert_equal(test_nodes[2].block_receive_map[big_old_block], 1)\n \n-        print \"Peer 2 able to download old block\"\n+        print(\"Peer 2 able to download old block\")\n \n         [c.disconnect_node() for c in connections]\n \n         #stop and start node 0 with 1MB maxuploadtarget, whitelist 127.0.0.1\n-        print \"Restarting nodes with -whitelist=127.0.0.1\"\n+        print(\"Restarting nodes with -whitelist=127.0.0.1\")\n         stop_node(self.nodes[0], 0)\n         self.nodes[0] = start_node(0, self.options.tmpdir, [\"-debug\", \"-whitelist=127.0.0.1\", \"-maxuploadtarget=1\", \"-blockmaxsize=999000\"])\n \n         #recreate/reconnect 3 test nodes\n         test_nodes = []\n         connections = []\n \n-        for i in xrange(3):\n+        for i in range(3):\n             test_nodes.append(TestNode())\n             connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], test_nodes[i]))\n             test_nodes[i].add_connection(connections[i])\n@@ -247,7 +246,7 @@ def run_test(self):\n \n         #retrieve 20 blocks which should be enough to break the 1MB limit\n         getdata_request.inv = [CInv(2, big_new_block)]\n-        for i in xrange(20):\n+        for i in range(20):\n             test_nodes[1].send_message(getdata_request)\n             test_nodes[1].sync_with_ping()\n             assert_equal(test_nodes[1].block_receive_map[big_new_block], i+1)\n@@ -257,7 +256,7 @@ def run_test(self):\n         test_nodes[1].wait_for_disconnect()\n         assert_equal(len(self.nodes[0].getpeerinfo()), 3) #node is still connected because of the whitelist\n \n-        print \"Peer 1 still connected after trying to download old block (whitelisted)\"\n+        print(\"Peer 1 still connected after trying to download old block (whitelisted)\")\n \n         [c.disconnect_node() for c in connections]\n "
      },
      {
        "sha": "bc208709e9125cecfcb77de51dc7aa13094e82ca",
        "filename": "qa/rpc-tests/mempool_limit.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_limit.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -41,7 +41,7 @@ def run_test(self):\n \n         relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n         base_fee = relayfee*100\n-        for i in xrange (4):\n+        for i in range (4):\n             txids.append([])\n             txids[i] = create_lots_of_big_transactions(self.nodes[0], self.txouts, utxos[30*i:30*i+30], (i+1)*base_fee)\n "
      },
      {
        "sha": "7ac85c1b6d3e9342bebe1457a10cea2ec8862256",
        "filename": "qa/rpc-tests/mempool_packages.py",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_packages.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -28,7 +28,7 @@ def chain_transaction(self, node, parent_txid, vout, value, fee, num_outputs):\n         send_value = satoshi_round((value - fee)/num_outputs)\n         inputs = [ {'txid' : parent_txid, 'vout' : vout} ]\n         outputs = {}\n-        for i in xrange(num_outputs):\n+        for i in range(num_outputs):\n             outputs[node.getnewaddress()] = send_value\n         rawtx = node.createrawtransaction(inputs, outputs)\n         signedtx = node.signrawtransaction(rawtx)\n@@ -48,7 +48,7 @@ def run_test(self):\n         fee = Decimal(\"0.0001\")\n         # MAX_ANCESTORS transactions off a confirmed tx should be fine\n         chain = []\n-        for i in xrange(MAX_ANCESTORS):\n+        for i in range(MAX_ANCESTORS):\n             (txid, sent_value) = self.chain_transaction(self.nodes[0], txid, 0, value, fee, 1)\n             value = sent_value\n             chain.append(txid)\n@@ -84,7 +84,7 @@ def run_test(self):\n         try:\n             self.chain_transaction(self.nodes[0], txid, vout, value, fee, 1)\n         except JSONRPCException as e:\n-            print \"too-long-ancestor-chain successfully rejected\"\n+            print(\"too-long-ancestor-chain successfully rejected\")\n \n         # Check that prioritising a tx before it's added to the mempool works\n         # First clear the mempool by mining a block.\n@@ -121,22 +121,22 @@ def run_test(self):\n         # First create one parent tx with 10 children\n         (txid, sent_value) = self.chain_transaction(self.nodes[0], txid, vout, value, fee, 10)\n         parent_transaction = txid\n-        for i in xrange(10):\n+        for i in range(10):\n             transaction_package.append({'txid': txid, 'vout': i, 'amount': sent_value})\n \n-        for i in xrange(MAX_DESCENDANTS):\n+        for i in range(MAX_DESCENDANTS):\n             utxo = transaction_package.pop(0)\n             try:\n                 (txid, sent_value) = self.chain_transaction(self.nodes[0], utxo['txid'], utxo['vout'], utxo['amount'], fee, 10)\n-                for j in xrange(10):\n+                for j in range(10):\n                     transaction_package.append({'txid': txid, 'vout': j, 'amount': sent_value})\n                 if i == MAX_DESCENDANTS - 2:\n                     mempool = self.nodes[0].getrawmempool(True)\n                     assert_equal(mempool[parent_transaction]['descendantcount'], MAX_DESCENDANTS)\n             except JSONRPCException as e:\n-                print e.error['message']\n+                print(e.error['message'])\n                 assert_equal(i, MAX_DESCENDANTS - 1)\n-                print \"tx that would create too large descendant package successfully rejected\"\n+                print(\"tx that would create too large descendant package successfully rejected\")\n \n         # TODO: check that node1's mempool is as expected\n \n@@ -171,7 +171,7 @@ def run_test(self):\n         send_value = satoshi_round((value - fee)/2)\n         inputs = [ {'txid' : txid, 'vout' : vout} ]\n         outputs = {}\n-        for i in xrange(2):\n+        for i in range(2):\n             outputs[self.nodes[0].getnewaddress()] = send_value\n         rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n         signedtx = self.nodes[0].signrawtransaction(rawtx)\n@@ -185,7 +185,7 @@ def run_test(self):\n         # Create tx2-7\n         vout = 1\n         txid = tx0_id\n-        for i in xrange(6):\n+        for i in range(6):\n             (txid, sent_value) = self.chain_transaction(self.nodes[0], txid, vout, value, fee, 1)\n             vout = 0\n             value = sent_value"
      },
      {
        "sha": "608e9d0a06c8d576ef7ca92248cb8b646e0f7ca0",
        "filename": "qa/rpc-tests/mempool_reorg.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/mempool_reorg.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/mempool_reorg.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_reorg.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "b4d9f0a1a23ffc4a8b9e74c699d81f383b985c52",
        "filename": "qa/rpc-tests/mempool_resurrect_test.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/mempool_resurrect_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/mempool_resurrect_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_resurrect_test.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "c23f5ef10ae12deb2ac7d2cbfea85411d0928aff",
        "filename": "qa/rpc-tests/mempool_spendcoinbase.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/mempool_spendcoinbase.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/mempool_spendcoinbase.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_spendcoinbase.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "9419d9a714cedbd69018f7c68f56c7b41c243b69",
        "filename": "qa/rpc-tests/merkle_blocks.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/merkle_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/merkle_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/merkle_blocks.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -32,7 +32,7 @@ def setup_network(self):\n         self.sync_all()\n \n     def run_test(self):\n-        print \"Mining blocks...\"\n+        print(\"Mining blocks...\")\n         self.nodes[0].generate(105)\n         self.sync_all()\n "
      },
      {
        "sha": "577d80949d4ce8fdcf079c56a18ed6211aac8c17",
        "filename": "qa/rpc-tests/multi_rpc.py",
        "status": "modified",
        "additions": 11,
        "deletions": 18,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/multi_rpc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/multi_rpc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/multi_rpc.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -9,16 +9,9 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-import base64\n \n-try:\n-    import http.client as httplib\n-except ImportError:\n-    import httplib\n-try:\n-    import urllib.parse as urlparse\n-except ImportError:\n-    import urlparse\n+import http.client\n+import urllib.parse\n \n class HTTPBasicsTest (BitcoinTestFramework):\n     def setup_nodes(self):\n@@ -39,7 +32,7 @@ def run_test(self):\n         ##################################################\n         # Check correctness of the rpcauth config option #\n         ##################################################\n-        url = urlparse.urlparse(self.nodes[0].url)\n+        url = urllib.parse.urlparse(self.nodes[0].url)\n \n         #Old authpair\n         authpair = url.username + ':' + url.password\n@@ -55,7 +48,7 @@ def run_test(self):\n \n         headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n \n-        conn = httplib.HTTPConnection(url.hostname, url.port)\n+        conn = http.client.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         resp = conn.getresponse()\n@@ -65,7 +58,7 @@ def run_test(self):\n         #Use new authpair to confirm both work\n         headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n \n-        conn = httplib.HTTPConnection(url.hostname, url.port)\n+        conn = http.client.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         resp = conn.getresponse()\n@@ -76,7 +69,7 @@ def run_test(self):\n         authpairnew = \"rtwrong:\"+password\n         headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n \n-        conn = httplib.HTTPConnection(url.hostname, url.port)\n+        conn = http.client.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         resp = conn.getresponse()\n@@ -87,7 +80,7 @@ def run_test(self):\n         authpairnew = \"rt:\"+password+\"wrong\"\n         headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n \n-        conn = httplib.HTTPConnection(url.hostname, url.port)\n+        conn = http.client.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         resp = conn.getresponse()\n@@ -98,7 +91,7 @@ def run_test(self):\n         authpairnew = \"rt2:\"+password2\n         headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n \n-        conn = httplib.HTTPConnection(url.hostname, url.port)\n+        conn = http.client.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         resp = conn.getresponse()\n@@ -109,7 +102,7 @@ def run_test(self):\n         authpairnew = \"rt2:\"+password2+\"wrong\"\n         headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n \n-        conn = httplib.HTTPConnection(url.hostname, url.port)\n+        conn = http.client.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         resp = conn.getresponse()"
      },
      {
        "sha": "1b6ba021a0cea00f1475aed78c2a322a2c380a6f",
        "filename": "qa/rpc-tests/nodehandling.py",
        "status": "modified",
        "additions": 5,
        "deletions": 11,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/nodehandling.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/nodehandling.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/nodehandling.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -10,14 +10,8 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n-try:\n-    import http.client as httplib\n-except ImportError:\n-    import httplib\n-try:\n-    import urllib.parse as urlparse\n-except ImportError:\n-    import urlparse\n+import http.client\n+import urllib.parse\n \n class NodeHandlingTest (BitcoinTestFramework):\n     def run_test(self):\n@@ -69,7 +63,7 @@ def run_test(self):\n         ###########################\n         # RPC disconnectnode test #\n         ###########################\n-        url = urlparse.urlparse(self.nodes[1].url)\n+        url = urllib.parse.urlparse(self.nodes[1].url)\n         self.nodes[0].disconnectnode(url.hostname+\":\"+str(p2p_port(1)))\n         time.sleep(2) #disconnecting a node needs a little bit of time\n         for node in self.nodes[0].getpeerinfo():"
      },
      {
        "sha": "21e4c2f46852182a8fdb0b90f32abf927a733ee7",
        "filename": "qa/rpc-tests/p2p-acceptblock.py",
        "status": "modified",
        "additions": 18,
        "deletions": 19,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-acceptblock.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,8 +1,7 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n-# Distributed under the MIT/X11 software license, see the accompanying\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n \n from test_framework.mininode import *\n from test_framework.test_framework import BitcoinTestFramework\n@@ -145,13 +144,13 @@ def run_test(self):\n \n         # 1. Have both nodes mine a block (leave IBD)\n         [ n.generate(1) for n in self.nodes ]\n-        tips = [ int (\"0x\" + n.getbestblockhash() + \"L\", 0) for n in self.nodes ]\n+        tips = [ int(\"0x\" + n.getbestblockhash(), 0) for n in self.nodes ]\n \n         # 2. Send one block that builds on each tip.\n         # This should be accepted.\n         blocks_h2 = []  # the height 2 blocks on each node's chain\n         block_time = int(time.time()) + 1\n-        for i in xrange(2):\n+        for i in range(2):\n             blocks_h2.append(create_block(tips[i], create_coinbase(2), block_time))\n             blocks_h2[i].solve()\n             block_time += 1\n@@ -161,11 +160,11 @@ def run_test(self):\n         [ x.sync_with_ping() for x in [test_node, white_node] ]\n         assert_equal(self.nodes[0].getblockcount(), 2)\n         assert_equal(self.nodes[1].getblockcount(), 2)\n-        print \"First height 2 block accepted by both nodes\"\n+        print(\"First height 2 block accepted by both nodes\")\n \n         # 3. Send another block that builds on the original tip.\n         blocks_h2f = []  # Blocks at height 2 that fork off the main chain\n-        for i in xrange(2):\n+        for i in range(2):\n             blocks_h2f.append(create_block(tips[i], create_coinbase(2), blocks_h2[i].nTime+1))\n             blocks_h2f[i].solve()\n         test_node.send_message(msg_block(blocks_h2f[0]))\n@@ -180,11 +179,11 @@ def run_test(self):\n             if x['hash'] == blocks_h2f[1].hash:\n                 assert_equal(x['status'], \"valid-headers\")\n \n-        print \"Second height 2 block accepted only from whitelisted peer\"\n+        print(\"Second height 2 block accepted only from whitelisted peer\")\n \n         # 4. Now send another block that builds on the forking chain.\n         blocks_h3 = []\n-        for i in xrange(2):\n+        for i in range(2):\n             blocks_h3.append(create_block(blocks_h2f[i].sha256, create_coinbase(3), blocks_h2f[i].nTime+1))\n             blocks_h3[i].solve()\n         test_node.send_message(msg_block(blocks_h3[0]))\n@@ -200,22 +199,22 @@ def run_test(self):\n         # But this block should be accepted by node0 since it has more work.\n         try:\n             self.nodes[0].getblock(blocks_h3[0].hash)\n-            print \"Unrequested more-work block accepted from non-whitelisted peer\"\n+            print(\"Unrequested more-work block accepted from non-whitelisted peer\")\n         except:\n             raise AssertionError(\"Unrequested more work block was not processed\")\n \n         # Node1 should have accepted and reorged.\n         assert_equal(self.nodes[1].getblockcount(), 3)\n-        print \"Successfully reorged to length 3 chain from whitelisted peer\"\n+        print(\"Successfully reorged to length 3 chain from whitelisted peer\")\n \n         # 4b. Now mine 288 more blocks and deliver; all should be processed but\n         # the last (height-too-high) on node0.  Node1 should process the tip if\n         # we give it the headers chain leading to the tip.\n         tips = blocks_h3\n         headers_message = msg_headers()\n         all_blocks = []   # node0's blocks\n-        for j in xrange(2):\n-            for i in xrange(288):\n+        for j in range(2):\n+            for i in range(288):\n                 next_block = create_block(tips[j].sha256, create_coinbase(i + 4), tips[j].nTime+1)\n                 next_block.solve()\n                 if j==0:\n@@ -233,7 +232,7 @@ def run_test(self):\n                     raise AssertionError(\"Unrequested block too far-ahead should have been ignored\")\n             except:\n                 if x == all_blocks[287]:\n-                    print \"Unrequested block too far-ahead not processed\"\n+                    print(\"Unrequested block too far-ahead not processed\")\n                 else:\n                     raise AssertionError(\"Unrequested block with more work should have been accepted\")\n \n@@ -243,7 +242,7 @@ def run_test(self):\n         try:\n             white_node.sync_with_ping()\n             self.nodes[1].getblock(tips[1].hash)\n-            print \"Unrequested block far ahead of tip accepted from whitelisted peer\"\n+            print(\"Unrequested block far ahead of tip accepted from whitelisted peer\")\n         except:\n             raise AssertionError(\"Unrequested block from whitelisted peer not accepted\")\n \n@@ -259,7 +258,7 @@ def run_test(self):\n         # a getdata request for this block.\n         test_node.sync_with_ping()\n         assert_equal(self.nodes[0].getblockcount(), 2)\n-        print \"Unrequested block that would complete more-work chain was ignored\"\n+        print(\"Unrequested block that would complete more-work chain was ignored\")\n \n         # 6. Try to get node to request the missing block.\n         # Poke the node with an inv for block at height 3 and see if that\n@@ -275,14 +274,14 @@ def run_test(self):\n \n         # Check that the getdata includes the right block\n         assert_equal(getdata.inv[0].hash, blocks_h2f[0].sha256)\n-        print \"Inv at tip triggered getdata for unprocessed block\"\n+        print(\"Inv at tip triggered getdata for unprocessed block\")\n \n         # 7. Send the missing block for the third time (now it is requested)\n         test_node.send_message(msg_block(blocks_h2f[0]))\n \n         test_node.sync_with_ping()\n         assert_equal(self.nodes[0].getblockcount(), 290)\n-        print \"Successfully reorged to longer chain from non-whitelisted peer\"\n+        print(\"Successfully reorged to longer chain from non-whitelisted peer\")\n \n         [ c.disconnect_node() for c in connections ]\n "
      },
      {
        "sha": "5fb51ed0fe7927368e72803fb5ad75599d6dbcf4",
        "filename": "qa/rpc-tests/p2p-feefilter.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/p2p-feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/p2p-feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-feefilter.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,6 +1,6 @@\n-#!/usr/bin/env python2\n+#!/usr/bin/env python3\n # Copyright (c) 2016 The Bitcoin Core developers\n-# Distributed under the MIT/X11 software license, see the accompanying\n+# Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #\n \n@@ -18,7 +18,7 @@ def hashToHex(hash):\n \n # Wait up to 60 secs to see if the testnode has received all the expected invs\n def allInvsMatch(invsExpected, testnode):\n-    for x in xrange(60):\n+    for x in range(60):\n         with mininode_lock:\n             if (sorted(invsExpected) == sorted(testnode.txinvs)):\n                 return True;\n@@ -69,29 +69,29 @@ def run_test(self):\n \n         # Test that invs are received for all txs at feerate of 20 sat/byte\n         node1.settxfee(Decimal(\"0.00020000\"))\n-        txids = [node1.sendtoaddress(node1.getnewaddress(), 1) for x in xrange(3)]\n+        txids = [node1.sendtoaddress(node1.getnewaddress(), 1) for x in range(3)]\n         assert(allInvsMatch(txids, test_node))\n         test_node.clear_invs()\n \n         # Set a filter of 15 sat/byte\n         test_node.send_filter(15000)\n \n         # Test that txs are still being received (paying 20 sat/byte)\n-        txids = [node1.sendtoaddress(node1.getnewaddress(), 1) for x in xrange(3)]\n+        txids = [node1.sendtoaddress(node1.getnewaddress(), 1) for x in range(3)]\n         assert(allInvsMatch(txids, test_node))\n         test_node.clear_invs()\n \n         # Change tx fee rate to 10 sat/byte and test they are no longer received\n         node1.settxfee(Decimal(\"0.00010000\"))\n-        [node1.sendtoaddress(node1.getnewaddress(), 1) for x in xrange(3)]\n+        [node1.sendtoaddress(node1.getnewaddress(), 1) for x in range(3)]\n         sync_mempools(self.nodes) # must be sure node 0 has received all txs \n         time.sleep(10) # wait 10 secs to be sure its doesn't relay any\n         assert(allInvsMatch([], test_node))\n         test_node.clear_invs()\n \n         # Remove fee filter and check that txs are received again\n         test_node.send_filter(0)\n-        txids = [node1.sendtoaddress(node1.getnewaddress(), 1) for x in xrange(3)]\n+        txids = [node1.sendtoaddress(node1.getnewaddress(), 1) for x in range(3)]\n         assert(allInvsMatch(txids, test_node))\n         test_node.clear_invs()\n "
      },
      {
        "sha": "56df8ffd01181bee099d67c06305292ab3034fe6",
        "filename": "qa/rpc-tests/p2p-fullblocktest.py",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/p2p-fullblocktest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/p2p-fullblocktest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-fullblocktest.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,8 +1,7 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n-# Distributed under the MIT/X11 software license, see the accompanying\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "8c8c2358f74e6d70979d4206025b411c0e7e4df2",
        "filename": "qa/rpc-tests/p2p-versionbits-warning.py",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/p2p-versionbits-warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/p2p-versionbits-warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-versionbits-warning.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,8 +1,7 @@\n-#!/usr/bin/env python2\n+#!/usr/bin/env python3\n # Copyright (c) 2016 The Bitcoin Core developers\n-# Distributed under the MIT/X11 software license, see the accompanying\n+# Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n \n from test_framework.mininode import *\n from test_framework.test_framework import BitcoinTestFramework\n@@ -82,7 +81,7 @@ def send_blocks_with_version(self, peer, numblocks, nVersionToUse):\n         block_time = self.nodes[0].getblockheader(tip)[\"time\"]+1\n         tip = int(tip, 16)\n \n-        for i in xrange(numblocks):\n+        for i in range(numblocks):\n             block = create_block(tip, create_coinbase(height+1), block_time)\n             block.nVersion = nVersionToUse\n             block.solve()"
      },
      {
        "sha": "6ab88602b57acba1f96ce1ef2e1c56310198c2ce",
        "filename": "qa/rpc-tests/prioritise_transaction.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/prioritise_transaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/prioritise_transaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/prioritise_transaction.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -35,7 +35,7 @@ def run_test(self):\n \n         # Create 3 batches of transactions at 3 different fee rate levels\n         range_size = utxo_count // 3\n-        for i in xrange(3):\n+        for i in range(3):\n             txids.append([])\n             start_range = i * range_size\n             end_range = start_range + range_size\n@@ -46,7 +46,7 @@ def run_test(self):\n         # more transactions.\n         mempool = self.nodes[0].getrawmempool(True)\n         sizes = [0, 0, 0]\n-        for i in xrange(3):\n+        for i in range(3):\n             for j in txids[i]:\n                 assert(j in mempool)\n                 sizes[i] += mempool[j]['size']\n@@ -61,7 +61,7 @@ def run_test(self):\n         self.nodes[0].generate(1)\n \n         mempool = self.nodes[0].getrawmempool()\n-        print \"Assert that prioritised transaction was mined\"\n+        print(\"Assert that prioritised transaction was mined\")\n         assert(txids[0][0] not in mempool)\n         assert(txids[0][1] in mempool)\n \n@@ -93,7 +93,7 @@ def run_test(self):\n         # High fee transaction should not have been mined, but other high fee rate\n         # transactions should have been.\n         mempool = self.nodes[0].getrawmempool()\n-        print \"Assert that de-prioritised transaction is still in mempool\"\n+        print(\"Assert that de-prioritised transaction is still in mempool\")\n         assert(high_fee_tx in mempool)\n         for x in txids[2]:\n             if (x != high_fee_tx):\n@@ -135,7 +135,7 @@ def run_test(self):\n         # accepted.\n         self.nodes[0].prioritisetransaction(tx2_id, 0, int(self.relayfee*COIN))\n \n-        print \"Assert that prioritised free transaction is accepted to mempool\"\n+        print(\"Assert that prioritised free transaction is accepted to mempool\")\n         assert_equal(self.nodes[0].sendrawtransaction(tx2_hex), tx2_id)\n         assert(tx2_id in self.nodes[0].getrawmempool())\n "
      },
      {
        "sha": "6c7b201d562d0084e6a6fa62a4a90a2939193fb0",
        "filename": "qa/rpc-tests/proxy_test.py",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/proxy_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/proxy_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/proxy_test.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,7 +1,8 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n import socket\n \n from test_framework.socks5 import Socks5Configuration, Socks5Command, Socks5Server, AddressType\n@@ -55,7 +56,7 @@ def __init__(self):\n             self.conf3.unauth = True\n             self.conf3.auth = True\n         else:\n-            print \"Warning: testing without local IPv6 support\"\n+            print(\"Warning: testing without local IPv6 support\")\n \n         self.serv1 = Socks5Server(self.conf1)\n         self.serv1.start()"
      },
      {
        "sha": "92d33bd20ec3eb8224be49a6ed9ef6539122c88e",
        "filename": "qa/rpc-tests/pruning.py",
        "status": "modified",
        "additions": 34,
        "deletions": 34,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/pruning.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -57,19 +57,19 @@ def create_big_chain(self):\n         sync_blocks(self.nodes[0:2])\n         self.nodes[0].generate(150)\n         # Then mine enough full blocks to create more than 550MiB of data\n-        for i in xrange(645):\n+        for i in range(645):\n             self.mine_full_block(self.nodes[0], self.address[0])\n \n         sync_blocks(self.nodes[0:3])\n \n     def test_height_min(self):\n         if not os.path.isfile(self.prunedir+\"blk00000.dat\"):\n             raise AssertionError(\"blk00000.dat is missing, pruning too early\")\n-        print \"Success\"\n-        print \"Though we're already using more than 550MiB, current usage:\", calc_usage(self.prunedir)\n-        print \"Mining 25 more blocks should cause the first block file to be pruned\"\n+        print(\"Success\")\n+        print(\"Though we're already using more than 550MiB, current usage:\", calc_usage(self.prunedir))\n+        print(\"Mining 25 more blocks should cause the first block file to be pruned\")\n         # Pruning doesn't run until we're allocating another chunk, 20 full blocks past the height cutoff will ensure this\n-        for i in xrange(25):\n+        for i in range(25):\n             self.mine_full_block(self.nodes[0],self.address[0])\n \n         waitstart = time.time()\n@@ -78,41 +78,41 @@ def test_height_min(self):\n             if time.time() - waitstart > 10:\n                 raise AssertionError(\"blk00000.dat not pruned when it should be\")\n \n-        print \"Success\"\n+        print(\"Success\")\n         usage = calc_usage(self.prunedir)\n-        print \"Usage should be below target:\", usage\n+        print(\"Usage should be below target:\", usage)\n         if (usage > 550):\n             raise AssertionError(\"Pruning target not being met\")\n \n     def create_chain_with_staleblocks(self):\n         # Create stale blocks in manageable sized chunks\n-        print \"Mine 24 (stale) blocks on Node 1, followed by 25 (main chain) block reorg from Node 0, for 12 rounds\"\n+        print(\"Mine 24 (stale) blocks on Node 1, followed by 25 (main chain) block reorg from Node 0, for 12 rounds\")\n \n-        for j in xrange(12):\n+        for j in range(12):\n             # Disconnect node 0 so it can mine a longer reorg chain without knowing about node 1's soon-to-be-stale chain\n             # Node 2 stays connected, so it hears about the stale blocks and then reorg's when node0 reconnects\n             # Stopping node 0 also clears its mempool, so it doesn't have node1's transactions to accidentally mine\n             stop_node(self.nodes[0],0)\n             self.nodes[0]=start_node(0, self.options.tmpdir, [\"-debug\",\"-maxreceivebuffer=20000\",\"-blockmaxsize=999000\", \"-checkblocks=5\"], timewait=900)\n             # Mine 24 blocks in node 1\n             self.utxo = self.nodes[1].listunspent()\n-            for i in xrange(24):\n+            for i in range(24):\n                 if j == 0:\n                     self.mine_full_block(self.nodes[1],self.address[1])\n                 else:\n                     self.nodes[1].generate(1) #tx's already in mempool from previous disconnects\n \n             # Reorg back with 25 block chain from node 0\n             self.utxo = self.nodes[0].listunspent()\n-            for i in xrange(25): \n+            for i in range(25):\n                 self.mine_full_block(self.nodes[0],self.address[0])\n \n             # Create connections in the order so both nodes can see the reorg at the same time\n             connect_nodes(self.nodes[1], 0)\n             connect_nodes(self.nodes[2], 0)\n             sync_blocks(self.nodes[0:3])\n \n-        print \"Usage can be over target because of high stale rate:\", calc_usage(self.prunedir)\n+        print(\"Usage can be over target because of high stale rate:\", calc_usage(self.prunedir))\n \n     def reorg_test(self):\n         # Node 1 will mine a 300 block chain starting 287 blocks back from Node 0 and Node 2's tip\n@@ -123,11 +123,11 @@ def reorg_test(self):\n         self.nodes[1]=start_node(1, self.options.tmpdir, [\"-debug\",\"-maxreceivebuffer=20000\",\"-blockmaxsize=5000\", \"-checkblocks=5\", \"-disablesafemode\"], timewait=900)\n \n         height = self.nodes[1].getblockcount()\n-        print \"Current block height:\", height\n+        print(\"Current block height:\", height)\n \n         invalidheight = height-287\n         badhash = self.nodes[1].getblockhash(invalidheight)\n-        print \"Invalidating block at height:\",invalidheight,badhash\n+        print(\"Invalidating block at height:\",invalidheight,badhash)\n         self.nodes[1].invalidateblock(badhash)\n \n         # We've now switched to our previously mined-24 block fork on node 1, but thats not what we want\n@@ -139,29 +139,29 @@ def reorg_test(self):\n             curhash = self.nodes[1].getblockhash(invalidheight - 1)\n \n         assert(self.nodes[1].getblockcount() == invalidheight - 1)\n-        print \"New best height\", self.nodes[1].getblockcount()\n+        print(\"New best height\", self.nodes[1].getblockcount())\n \n         # Reboot node1 to clear those giant tx's from mempool\n         stop_node(self.nodes[1],1)\n         self.nodes[1]=start_node(1, self.options.tmpdir, [\"-debug\",\"-maxreceivebuffer=20000\",\"-blockmaxsize=5000\", \"-checkblocks=5\", \"-disablesafemode\"], timewait=900)\n \n-        print \"Generating new longer chain of 300 more blocks\"\n+        print(\"Generating new longer chain of 300 more blocks\")\n         self.nodes[1].generate(300)\n \n-        print \"Reconnect nodes\"\n+        print(\"Reconnect nodes\")\n         connect_nodes(self.nodes[0], 1)\n         connect_nodes(self.nodes[2], 1)\n         sync_blocks(self.nodes[0:3])\n \n-        print \"Verify height on node 2:\",self.nodes[2].getblockcount()\n-        print \"Usage possibly still high bc of stale blocks in block files:\", calc_usage(self.prunedir)\n+        print(\"Verify height on node 2:\",self.nodes[2].getblockcount())\n+        print(\"Usage possibly still high bc of stale blocks in block files:\", calc_usage(self.prunedir))\n \n-        print \"Mine 220 more blocks so we have requisite history (some blocks will be big and cause pruning of previous chain)\"\n+        print(\"Mine 220 more blocks so we have requisite history (some blocks will be big and cause pruning of previous chain)\")\n         self.nodes[0].generate(220) #node 0 has many large tx's in its mempool from the disconnects\n         sync_blocks(self.nodes[0:3])\n \n         usage = calc_usage(self.prunedir)\n-        print \"Usage should be below target:\", usage\n+        print(\"Usage should be below target:\", usage)\n         if (usage > 550):\n             raise AssertionError(\"Pruning target not being met\")\n \n@@ -173,7 +173,7 @@ def reorg_back(self):\n             self.nodes[2].getblock(self.forkhash)\n             raise AssertionError(\"Old block wasn't pruned so can't test redownload\")\n         except JSONRPCException as e:\n-            print \"Will need to redownload block\",self.forkheight\n+            print(\"Will need to redownload block\",self.forkheight)\n \n         # Verify that we have enough history to reorg back to the fork point\n         # Although this is more than 288 blocks, because this chain was written more recently\n@@ -197,14 +197,14 @@ def reorg_back(self):\n         # At this point node 2 is within 288 blocks of the fork point so it will preserve its ability to reorg\n         if self.nodes[2].getblockcount() < self.mainchainheight:\n             blocks_to_mine = first_reorg_height + 1 - self.mainchainheight\n-            print \"Rewind node 0 to prev main chain to mine longer chain to trigger redownload. Blocks needed:\", blocks_to_mine\n+            print(\"Rewind node 0 to prev main chain to mine longer chain to trigger redownload. Blocks needed:\", blocks_to_mine)\n             self.nodes[0].invalidateblock(curchainhash)\n             assert(self.nodes[0].getblockcount() == self.mainchainheight)\n             assert(self.nodes[0].getbestblockhash() == self.mainchainhash2)\n             goalbesthash = self.nodes[0].generate(blocks_to_mine)[-1]\n             goalbestheight = first_reorg_height + 1\n \n-        print \"Verify node 2 reorged back to the main chain, some blocks of which it had to redownload\"\n+        print(\"Verify node 2 reorged back to the main chain, some blocks of which it had to redownload\")\n         waitstart = time.time()\n         while self.nodes[2].getblockcount() < goalbestheight:\n             time.sleep(0.1)\n@@ -217,7 +217,7 @@ def reorg_back(self):\n     def mine_full_block(self, node, address):\n         # Want to create a full block\n         # We'll generate a 66k transaction below, and 14 of them is close to the 1MB block limit\n-        for j in xrange(14):\n+        for j in range(14):\n             if len(self.utxo) < 14:\n                 self.utxo = node.listunspent()\n             inputs=[]\n@@ -241,8 +241,8 @@ def mine_full_block(self, node, address):\n \n \n     def run_test(self):\n-        print \"Warning! This test requires 4GB of disk space and takes over 30 mins (up to 2 hours)\"\n-        print \"Mining a big blockchain of 995 blocks\"\n+        print(\"Warning! This test requires 4GB of disk space and takes over 30 mins (up to 2 hours)\")\n+        print(\"Mining a big blockchain of 995 blocks\")\n         self.create_big_chain()\n         # Chain diagram key:\n         # *   blocks on main chain\n@@ -253,12 +253,12 @@ def run_test(self):\n         # Start by mining a simple chain that all nodes have\n         # N0=N1=N2 **...*(995)\n \n-        print \"Check that we haven't started pruning yet because we're below PruneAfterHeight\"\n+        print(\"Check that we haven't started pruning yet because we're below PruneAfterHeight\")\n         self.test_height_min()\n         # Extend this chain past the PruneAfterHeight\n         # N0=N1=N2 **...*(1020)\n \n-        print \"Check that we'll exceed disk space target if we have a very high stale block rate\"\n+        print(\"Check that we'll exceed disk space target if we have a very high stale block rate\")\n         self.create_chain_with_staleblocks()\n         # Disconnect N0\n         # And mine a 24 block chain on N1 and a separate 25 block chain on N0\n@@ -282,7 +282,7 @@ def run_test(self):\n         self.mainchainheight = self.nodes[2].getblockcount()   #1320\n         self.mainchainhash2 = self.nodes[2].getblockhash(self.mainchainheight)\n \n-        print \"Check that we can survive a 288 block reorg still\"\n+        print(\"Check that we can survive a 288 block reorg still\")\n         (self.forkheight,self.forkhash) = self.reorg_test() #(1033, )\n         # Now create a 288 block reorg by mining a longer chain on N1\n         # First disconnect N1\n@@ -315,7 +315,7 @@ def run_test(self):\n         #                                 \\\n         #                                  *...**(1320)\n \n-        print \"Test that we can rerequest a block we previously pruned if needed for a reorg\"\n+        print(\"Test that we can rerequest a block we previously pruned if needed for a reorg\")\n         self.reorg_back()\n         # Verify that N2 still has block 1033 on current chain (@), but not on main chain (*)\n         # Invalidate 1033 on current chain (@) on N2 and we should be able to reorg to\n@@ -335,7 +335,7 @@ def run_test(self):\n         #\n         # N1 doesn't change because 1033 on main chain (*) is invalid\n \n-        print \"Done\"\n+        print(\"Done\")\n \n if __name__ == '__main__':\n     PruneTest().main()"
      },
      {
        "sha": "7f7b6887a834fb1c6c0be5b6a2cb382a70555320",
        "filename": "qa/rpc-tests/rawtransactions.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rawtransactions.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "a3f97669ea27a15ba1b6bd7afe18ab19eb0e900f",
        "filename": "qa/rpc-tests/receivedby.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/receivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/receivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/receivedby.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "39564b32bad9007e85d2dce1fb1c422c54ab527e",
        "filename": "qa/rpc-tests/reindex.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/reindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/reindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/reindex.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -26,7 +26,7 @@ def run_test(self):\n         wait_bitcoinds()\n         self.nodes[0]=start_node(0, self.options.tmpdir, [\"-debug\", \"-reindex\", \"-checkblockindex=1\"])\n         assert_equal(self.nodes[0].getblockcount(), 3)\n-        print \"Success\"\n+        print(\"Success\")\n \n if __name__ == '__main__':\n     ReindexTest().main()"
      },
      {
        "sha": "4afc3981da1125b6ef36a14a4310b9ed9afae4ad",
        "filename": "qa/rpc-tests/replace-by-fee.py",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/replace-by-fee.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -82,34 +82,34 @@ def setup_network(self):\n     def run_test(self):\n         make_utxo(self.nodes[0], 1*COIN)\n \n-        print \"Running test simple doublespend...\"\n+        print(\"Running test simple doublespend...\")\n         self.test_simple_doublespend()\n \n-        print \"Running test doublespend chain...\"\n+        print(\"Running test doublespend chain...\")\n         self.test_doublespend_chain()\n \n-        print \"Running test doublespend tree...\"\n+        print(\"Running test doublespend tree...\")\n         self.test_doublespend_tree()\n \n-        print \"Running test replacement feeperkb...\"\n+        print(\"Running test replacement feeperkb...\")\n         self.test_replacement_feeperkb()\n \n-        print \"Running test spends of conflicting outputs...\"\n+        print(\"Running test spends of conflicting outputs...\")\n         self.test_spends_of_conflicting_outputs()\n \n-        print \"Running test new unconfirmed inputs...\"\n+        print(\"Running test new unconfirmed inputs...\")\n         self.test_new_unconfirmed_inputs()\n \n-        print \"Running test too many replacements...\"\n+        print(\"Running test too many replacements...\")\n         self.test_too_many_replacements()\n \n-        print \"Running test opt-in...\"\n+        print(\"Running test opt-in...\")\n         self.test_opt_in()\n \n-        print \"Running test prioritised transactions...\"\n+        print(\"Running test prioritised transactions...\")\n         self.test_prioritised_transactions()\n \n-        print \"Passed\\n\"\n+        print(\"Passed\\n\")\n \n     def test_simple_doublespend(self):\n         \"\"\"Simple doublespend\"\"\"\n@@ -459,7 +459,7 @@ def test_opt_in(self):\n         except JSONRPCException as exp:\n             assert_equal(exp.error['code'], -26)\n         else:\n-            print tx1b_txid\n+            print(tx1b_txid)\n             assert(False)\n \n         tx1_outpoint = make_utxo(self.nodes[0], int(1.1*COIN))"
      },
      {
        "sha": "ec9515528ecb723ba1640b9869b10ccb2e44993d",
        "filename": "qa/rpc-tests/rest.py",
        "status": "modified",
        "additions": 9,
        "deletions": 16,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rest.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -13,16 +13,9 @@\n from struct import *\n from io import BytesIO\n from codecs import encode\n-import binascii\n \n-try:\n-    import http.client as httplib\n-except ImportError:\n-    import httplib\n-try:\n-    import urllib.parse as urlparse\n-except ImportError:\n-    import urlparse\n+import http.client\n+import urllib.parse\n \n def deser_uint256(f):\n     r = 0\n@@ -33,7 +26,7 @@ def deser_uint256(f):\n \n #allows simple http get calls\n def http_get_call(host, port, path, response_object = 0):\n-    conn = httplib.HTTPConnection(host, port)\n+    conn = http.client.HTTPConnection(host, port)\n     conn.request('GET', path)\n \n     if response_object:\n@@ -43,7 +36,7 @@ def http_get_call(host, port, path, response_object = 0):\n \n #allows simple http post calls with a request body\n def http_post_call(host, port, path, requestdata = '', response_object = 0):\n-    conn = httplib.HTTPConnection(host, port)\n+    conn = http.client.HTTPConnection(host, port)\n     conn.request('POST', path, requestdata)\n \n     if response_object:\n@@ -67,8 +60,8 @@ def setup_network(self, split=False):\n         self.sync_all()\n \n     def run_test(self):\n-        url = urlparse.urlparse(self.nodes[0].url)\n-        print \"Mining blocks...\"\n+        url = urllib.parse.urlparse(self.nodes[0].url)\n+        print(\"Mining blocks...\")\n \n         self.nodes[0].generate(1)\n         self.sync_all()\n@@ -151,7 +144,7 @@ def run_test(self):\n         output.write(bin_response)\n         output.seek(0)\n         chainHeight = unpack(\"i\", output.read(4))[0]\n-        hashFromBinResponse = hex(deser_uint256(output))[2:].zfill(65).rstrip(\"L\")\n+        hashFromBinResponse = hex(deser_uint256(output))[2:].zfill(64)\n \n         assert_equal(bb_hash, hashFromBinResponse) #check if getutxo's chaintip during calculation was fine\n         assert_equal(chainHeight, 102) #chain height must be 102"
      },
      {
        "sha": "7b7c01f993cf4cf1fcf3b105c5bef90955cb263b",
        "filename": "qa/rpc-tests/rpcbind_test.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/rpcbind_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/rpcbind_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rpcbind_test.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -51,7 +51,7 @@ def run_allowip_test(tmpdir, allow_ips, rpchost, rpcport):\n \n \n def run_test(tmpdir):\n-    assert(sys.platform == 'linux2') # due to OS-specific network stats queries, this test works only on Linux\n+    assert(sys.platform.startswith('linux')) # due to OS-specific network stats queries, this test works only on Linux\n     # find the first non-loopback interface for testing\n     non_loopback_ip = None\n     for name,ip in all_interfaces():"
      },
      {
        "sha": "96d1da729b90940207d0269495823f864f8b4170",
        "filename": "qa/rpc-tests/sendheaders.py",
        "status": "modified",
        "additions": 22,
        "deletions": 23,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/sendheaders.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,8 +1,7 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n-# Distributed under the MIT/X11 software license, see the accompanying\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n \n from test_framework.mininode import *\n from test_framework.test_framework import BitcoinTestFramework\n@@ -266,8 +265,8 @@ def run_test(self):\n \n         # PART 1\n         # 1. Mine a block; expect inv announcements each time\n-        print \"Part 1: headers don't start before sendheaders message...\"\n-        for i in xrange(4):\n+        print(\"Part 1: headers don't start before sendheaders message...\")\n+        for i in range(4):\n             old_tip = tip\n             tip = self.mine_blocks(1)\n             assert_equal(inv_node.check_last_announcement(inv=[tip]), True)\n@@ -297,14 +296,14 @@ def run_test(self):\n                 inv_node.clear_last_announcement()\n                 test_node.clear_last_announcement()\n \n-        print \"Part 1: success!\"\n-        print \"Part 2: announce blocks with headers after sendheaders message...\"\n+        print(\"Part 1: success!\")\n+        print(\"Part 2: announce blocks with headers after sendheaders message...\")\n         # PART 2\n         # 2. Send a sendheaders message and test that headers announcements\n         # commence and keep working.\n         test_node.send_message(msg_sendheaders())\n         prev_tip = int(self.nodes[0].getbestblockhash(), 16)\n-        test_node.get_headers(locator=[prev_tip], hashstop=0L)\n+        test_node.get_headers(locator=[prev_tip], hashstop=0)\n         test_node.sync_with_ping()\n \n         # Now that we've synced headers, headers announcements should work\n@@ -314,14 +313,14 @@ def run_test(self):\n \n         height = self.nodes[0].getblockcount()+1\n         block_time += 10  # Advance far enough ahead\n-        for i in xrange(10):\n+        for i in range(10):\n             # Mine i blocks, and alternate announcing either via\n             # inv (of tip) or via headers. After each, new blocks\n             # mined by the node should successfully be announced\n             # with block header, even though the blocks are never requested\n-            for j in xrange(2):\n+            for j in range(2):\n                 blocks = []\n-                for b in xrange(i+1):\n+                for b in range(i+1):\n                     blocks.append(create_block(tip, create_coinbase(height), block_time))\n                     blocks[-1].solve()\n                     tip = blocks[-1].sha256\n@@ -360,13 +359,13 @@ def run_test(self):\n                 height += 1\n                 block_time += 1\n \n-        print \"Part 2: success!\"\n+        print(\"Part 2: success!\")\n \n-        print \"Part 3: headers announcements can stop after large reorg, and resume after headers/inv from peer...\"\n+        print(\"Part 3: headers announcements can stop after large reorg, and resume after headers/inv from peer...\")\n \n         # PART 3.  Headers announcements can stop after large reorg, and resume after\n         # getheaders or inv from peer.\n-        for j in xrange(2):\n+        for j in range(2):\n             # First try mining a reorg that can propagate with header announcement\n             new_block_hashes = self.mine_reorg(length=7)\n             tip = new_block_hashes[-1]\n@@ -392,7 +391,7 @@ def run_test(self):\n             test_node.get_data(new_block_hashes)\n             test_node.wait_for_block(new_block_hashes[-1])\n \n-            for i in xrange(3):\n+            for i in range(3):\n                 # Mine another block, still should get only an inv\n                 tip = self.mine_blocks(1)\n                 assert_equal(inv_node.check_last_announcement(inv=[tip]), True)\n@@ -414,7 +413,7 @@ def run_test(self):\n                     # of headers announcements, or mine a new block and inv it, also \n                     # triggering resumption of headers announcements.\n                     if j == 0:\n-                        test_node.get_headers(locator=[tip], hashstop=0L)\n+                        test_node.get_headers(locator=[tip], hashstop=0)\n                         test_node.sync_with_ping()\n                     else:\n                         test_node.send_block_inv(tip)\n@@ -424,17 +423,17 @@ def run_test(self):\n             assert_equal(inv_node.check_last_announcement(inv=[tip]), True)\n             assert_equal(test_node.check_last_announcement(headers=[tip]), True)\n \n-        print \"Part 3: success!\"\n+        print(\"Part 3: success!\")\n \n-        print \"Part 4: Testing direct fetch behavior...\"\n+        print(\"Part 4: Testing direct fetch behavior...\")\n         tip = self.mine_blocks(1)\n         height = self.nodes[0].getblockcount() + 1\n         last_time = self.nodes[0].getblock(self.nodes[0].getbestblockhash())['time']\n         block_time = last_time + 1\n \n         # Create 2 blocks.  Send the blocks, then send the headers.\n         blocks = []\n-        for b in xrange(2):\n+        for b in range(2):\n             blocks.append(create_block(tip, create_coinbase(height), block_time))\n             blocks[-1].solve()\n             tip = blocks[-1].sha256\n@@ -452,7 +451,7 @@ def run_test(self):\n \n         # This time, direct fetch should work\n         blocks = []\n-        for b in xrange(3):\n+        for b in range(3):\n             blocks.append(create_block(tip, create_coinbase(height), block_time))\n             blocks[-1].solve()\n             tip = blocks[-1].sha256\n@@ -473,7 +472,7 @@ def run_test(self):\n         blocks = []\n \n         # Create extra blocks for later\n-        for b in xrange(20):\n+        for b in range(20):\n             blocks.append(create_block(tip, create_coinbase(height), block_time))\n             blocks[-1].solve()\n             tip = blocks[-1].sha256\n@@ -507,7 +506,7 @@ def run_test(self):\n         with mininode_lock:\n             assert_equal(test_node.last_getdata, None)\n \n-        print \"Part 4: success!\"\n+        print(\"Part 4: success!\")\n \n         # Finally, check that the inv node never received a getdata request,\n         # throughout the test"
      },
      {
        "sha": "4a47c0ca1e1987572df39c3bae98c49e9132719f",
        "filename": "qa/rpc-tests/signmessages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/signmessages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/signmessages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/signmessages.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,4 +1,4 @@\n-#!/usr/bin/env python2\n+#!/usr/bin/env python3\n # Copyright (c) 2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php."
      },
      {
        "sha": "a06ac5319184683b8936a6942e63074897f8ee75",
        "filename": "qa/rpc-tests/signrawtransactions.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/signrawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/signrawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/signrawtransactions.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "8fcb99c1b7f4e52e38e5a3c181a2728a9cb14e56",
        "filename": "qa/rpc-tests/smartfees.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/smartfees.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -238,7 +238,7 @@ def run_test(self):\n         self.confutxo = self.txouts # Start with the set of confirmed txouts after splitting\n         print(\"Will output estimates for 1/2/3/6/15/25 blocks\")\n \n-        for i in xrange(2):\n+        for i in range(2):\n             print(\"Creating transactions and mining them with a block size that can't keep up\")\n             # Create transactions and mine 10 small blocks with node 2, but create txs faster than we can mine\n             self.transact_and_mine(10, self.nodes[2])"
      },
      {
        "sha": "ef800e4d5736956b68f8d963347eeb6b03745fd7",
        "filename": "qa/rpc-tests/test_framework/bignum.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/test_framework/bignum.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/test_framework/bignum.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/bignum.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,16 +1,15 @@\n-#\n+#!/usr/bin/env python3\n #\n # bignum.py\n #\n # This file is copied from python-bitcoinlib.\n #\n-# Distributed under the MIT/X11 software license, see the accompanying\n+# Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #\n \n \"\"\"Bignum routines\"\"\"\n \n-from __future__ import absolute_import, division, print_function, unicode_literals\n \n import struct\n "
      },
      {
        "sha": "4bc279032bf089c4745188d6750c8a7bbbf82ed9",
        "filename": "qa/rpc-tests/test_framework/blockstore.py",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/test_framework/blockstore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/test_framework/blockstore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/blockstore.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,16 +1,17 @@\n+#!/usr/bin/env python3\n # BlockStore: a helper class that keeps a map of blocks and implements\n #             helper functions for responding to getheaders and getdata,\n #             and for constructing a getheaders message\n #\n \n from .mininode import *\n-import dbm\n from io import BytesIO\n+import dbm.ndbm\n \n class BlockStore(object):\n     def __init__(self, datadir):\n-        self.blockDB = dbm.open(datadir + \"/blocks\", 'c')\n-        self.currentBlock = 0L\n+        self.blockDB = dbm.ndbm.open(datadir + \"/blocks\", 'c')\n+        self.currentBlock = 0\n         self.headers_map = dict()\n     \n     def close(self):\n@@ -67,7 +68,7 @@ def add_block(self, block):\n         try:\n             self.blockDB[repr(block.sha256)] = bytes(block.serialize())\n         except TypeError as e:\n-            print \"Unexpected error: \", sys.exc_info()[0], e.args\n+            print(\"Unexpected error: \", sys.exc_info()[0], e.args)\n         self.currentBlock = block.sha256\n         self.headers_map[block.sha256] = CBlockHeader(block)\n \n@@ -105,7 +106,7 @@ def get_locator(self, current_tip=None):\n \n class TxStore(object):\n     def __init__(self, datadir):\n-        self.txDB = dbm.open(datadir + \"/transactions\", 'c')\n+        self.txDB = dbm.ndbm.open(datadir + \"/transactions\", 'c')\n \n     def close(self):\n         self.txDB.close()\n@@ -127,7 +128,7 @@ def add_transaction(self, tx):\n         try:\n             self.txDB[repr(tx.sha256)] = bytes(tx.serialize())\n         except TypeError as e:\n-            print \"Unexpected error: \", sys.exc_info()[0], e.args\n+            print(\"Unexpected error: \", sys.exc_info()[0], e.args)\n \n     def get_transactions(self, inv):\n         responses = []"
      },
      {
        "sha": "44232153ac7023ceb59b524451ad2e580e9fc6ca",
        "filename": "qa/rpc-tests/test_framework/blocktools.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/blocktools.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,8 +1,8 @@\n+#!/usr/bin/env python3\n # blocktools.py - utilities for manipulating blocks and transactions\n-# Copyright (c) 2015 The Bitcoin Core developers\n-# Distributed under the MIT/X11 software license, see the accompanying\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n \n from .mininode import *\n from .script import CScript, OP_TRUE, OP_CHECKSIG"
      },
      {
        "sha": "7c92d3f8289171701f282efe5fe221cd125876bb",
        "filename": "qa/rpc-tests/test_framework/comptool.py",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/comptool.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,8 +1,7 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n-# Distributed under the MIT/X11 software license, see the accompanying\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n \n from .mininode import *\n from .blockstore import BlockStore, TxStore\n@@ -259,10 +258,10 @@ def check_results(self, blockhash, outcome):\n                     if c.cb.bestblockhash == blockhash:\n                         return False\n                     if blockhash not in c.cb.block_reject_map:\n-                        print 'Block not in reject map: %064x' % (blockhash)\n+                        print('Block not in reject map: %064x' % (blockhash))\n                         return False\n                     if not outcome.match(c.cb.block_reject_map[blockhash]):\n-                        print 'Block rejected with %s instead of expected %s: %064x' % (c.cb.block_reject_map[blockhash], outcome, blockhash)\n+                        print('Block rejected with %s instead of expected %s: %064x' % (c.cb.block_reject_map[blockhash], outcome, blockhash))\n                         return False\n                 elif ((c.cb.bestblockhash == blockhash) != outcome):\n                     # print c.cb.bestblockhash, blockhash, outcome\n@@ -287,10 +286,10 @@ def check_mempool(self, txhash, outcome):\n                     if txhash in c.cb.lastInv:\n                         return False\n                     if txhash not in c.cb.tx_reject_map:\n-                        print 'Tx not in reject map: %064x' % (txhash)\n+                        print('Tx not in reject map: %064x' % (txhash))\n                         return False\n                     if not outcome.match(c.cb.tx_reject_map[txhash]):\n-                        print 'Tx rejected with %s instead of expected %s: %064x' % (c.cb.tx_reject_map[txhash], outcome, txhash)\n+                        print('Tx rejected with %s instead of expected %s: %064x' % (c.cb.tx_reject_map[txhash], outcome, txhash))\n                         return False\n                 elif ((txhash in c.cb.lastInv) != outcome):\n                     # print c.rpc.getrawmempool(), c.cb.lastInv\n@@ -393,7 +392,7 @@ def run(self):\n                 if (not self.check_mempool(tx.sha256, tx_outcome)):\n                     raise AssertionError(\"Mempool test failed at test %d\" % test_number)\n \n-            print \"Test %d: PASS\" % test_number, [ c.rpc.getblockcount() for c in self.connections ]\n+            print(\"Test %d: PASS\" % test_number, [ c.rpc.getblockcount() for c in self.connections ])\n             test_number += 1\n \n         [ c.disconnect_node() for c in self.connections ]"
      },
      {
        "sha": "23fce61014040e871446156f465fa5037066e61f",
        "filename": "qa/rpc-tests/test_framework/coverage.py",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/test_framework/coverage.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/test_framework/coverage.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/coverage.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,8 +1,7 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n-# Distributed under the MIT/X11 software license, see the accompanying\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n \n \"\"\"\n This module contains utilities for doing coverage analysis on the RPC"
      },
      {
        "sha": "1617daa20008d4483b3d8f370435148ae7f8d870",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 41,
        "deletions": 36,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,7 +1,12 @@\n-# mininode.py - Bitcoin P2P network half-a-node\n-#\n-# Distributed under the MIT/X11 software license, see the accompanying\n+#!/usr/bin/env python3\n+# Copyright (c) 2010 ArtForz -- public domain half-a-node\n+# Copyright (c) 2012 Jeff Garzik\n+# Copyright (c) 2010-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# mininode.py - Bitcoin P2P network half-a-node\n #\n # This python code was modified from ArtForz' public domain  half-a-node, as\n # found in the mini-node branch of http://github.com/jgarzik/pynode.\n@@ -34,12 +39,12 @@\n \n BIP0031_VERSION = 60000\n MY_VERSION = 60001  # past bip-31 for ping/pong\n-MY_SUBVERSION = b\"/python-mininode-tester:0.0.2/\"\n+MY_SUBVERSION = b\"/python-mininode-tester:0.0.3/\"\n \n MAX_INV_SZ = 50000\n MAX_BLOCK_SIZE = 1000000\n \n-COIN = 100000000L # 1 btc in satoshis\n+COIN = 100000000 # 1 btc in satoshis\n \n # Keep our own socket map for asyncore, so that we can track disconnects\n # ourselves (to workaround an issue with closing an asyncore socket when \n@@ -73,44 +78,42 @@ def deser_string(f):\n         nit = struct.unpack(\"<Q\", f.read(8))[0]\n     return f.read(nit)\n \n-\n def ser_string(s):\n     if len(s) < 253:\n         return struct.pack(\"B\", len(s)) + s\n     elif len(s) < 0x10000:\n         return struct.pack(\"<BH\", 253, len(s)) + s\n-    elif len(s) < 0x100000000L:\n+    elif len(s) < 0x100000000:\n         return struct.pack(\"<BI\", 254, len(s)) + s\n     return struct.pack(\"<BQ\", 255, len(s)) + s\n \n-\n def deser_uint256(f):\n-    r = 0L\n-    for i in xrange(8):\n+    r = 0\n+    for i in range(8):\n         t = struct.unpack(\"<I\", f.read(4))[0]\n         r += t << (i * 32)\n     return r\n \n \n def ser_uint256(u):\n     rs = b\"\"\n-    for i in xrange(8):\n-        rs += struct.pack(\"<I\", u & 0xFFFFFFFFL)\n+    for i in range(8):\n+        rs += struct.pack(\"<I\", u & 0xFFFFFFFF)\n         u >>= 32\n     return rs\n \n \n def uint256_from_str(s):\n-    r = 0L\n+    r = 0\n     t = struct.unpack(\"<IIIIIIII\", s[:32])\n-    for i in xrange(8):\n+    for i in range(8):\n         r += t[i] << (i * 32)\n     return r\n \n \n def uint256_from_compact(c):\n     nbytes = (c >> 24) & 0xFF\n-    v = (c & 0xFFFFFFL) << (8 * (nbytes - 3))\n+    v = (c & 0xFFFFFF) << (8 * (nbytes - 3))\n     return v\n \n \n@@ -123,7 +126,7 @@ def deser_vector(f, c):\n     elif nit == 255:\n         nit = struct.unpack(\"<Q\", f.read(8))[0]\n     r = []\n-    for i in xrange(nit):\n+    for i in range(nit):\n         t = c()\n         t.deserialize(f)\n         r.append(t)\n@@ -136,7 +139,7 @@ def ser_vector(l):\n         r = struct.pack(\"B\", len(l))\n     elif len(l) < 0x10000:\n         r = struct.pack(\"<BH\", 253, len(l))\n-    elif len(l) < 0x100000000L:\n+    elif len(l) < 0x100000000:\n         r = struct.pack(\"<BI\", 254, len(l))\n     else:\n         r = struct.pack(\"<BQ\", 255, len(l))\n@@ -154,7 +157,7 @@ def deser_uint256_vector(f):\n     elif nit == 255:\n         nit = struct.unpack(\"<Q\", f.read(8))[0]\n     r = []\n-    for i in xrange(nit):\n+    for i in range(nit):\n         t = deser_uint256(f)\n         r.append(t)\n     return r\n@@ -166,7 +169,7 @@ def ser_uint256_vector(l):\n         r = struct.pack(\"B\", len(l))\n     elif len(l) < 0x10000:\n         r = struct.pack(\"<BH\", 253, len(l))\n-    elif len(l) < 0x100000000L:\n+    elif len(l) < 0x100000000:\n         r = struct.pack(\"<BI\", 254, len(l))\n     else:\n         r = struct.pack(\"<BQ\", 255, len(l))\n@@ -184,7 +187,7 @@ def deser_string_vector(f):\n     elif nit == 255:\n         nit = struct.unpack(\"<Q\", f.read(8))[0]\n     r = []\n-    for i in xrange(nit):\n+    for i in range(nit):\n         t = deser_string(f)\n         r.append(t)\n     return r\n@@ -196,7 +199,7 @@ def ser_string_vector(l):\n         r = struct.pack(\"B\", len(l))\n     elif len(l) < 0x10000:\n         r = struct.pack(\"<BH\", 253, len(l))\n-    elif len(l) < 0x100000000L:\n+    elif len(l) < 0x100000000:\n         r = struct.pack(\"<BI\", 254, len(l))\n     else:\n         r = struct.pack(\"<BQ\", 255, len(l))\n@@ -214,7 +217,7 @@ def deser_int_vector(f):\n     elif nit == 255:\n         nit = struct.unpack(\"<Q\", f.read(8))[0]\n     r = []\n-    for i in xrange(nit):\n+    for i in range(nit):\n         t = struct.unpack(\"<i\", f.read(4))[0]\n         r.append(t)\n     return r\n@@ -226,7 +229,7 @@ def ser_int_vector(l):\n         r = struct.pack(\"B\", len(l))\n     elif len(l) < 0x10000:\n         r = struct.pack(\"<BH\", 253, len(l))\n-    elif len(l) < 0x100000000L:\n+    elif len(l) < 0x100000000:\n         r = struct.pack(\"<BI\", 254, len(l))\n     else:\n         r = struct.pack(\"<BQ\", 255, len(l))\n@@ -277,7 +280,7 @@ class CInv(object):\n         1: \"TX\",\n         2: \"Block\"}\n \n-    def __init__(self, t=0, h=0L):\n+    def __init__(self, t=0, h=0):\n         self.type = t\n         self.hash = h\n \n@@ -528,7 +531,7 @@ def calc_merkle_root(self):\n             hashes.append(ser_uint256(tx.sha256))\n         while len(hashes) > 1:\n             newhashes = []\n-            for i in xrange(0, len(hashes), 2):\n+            for i in range(0, len(hashes), 2):\n                 i2 = min(i+1, len(hashes)-1)\n                 newhashes.append(hash256(hashes[i] + hashes[i2]))\n             hashes = newhashes\n@@ -781,7 +784,7 @@ class msg_getblocks(object):\n \n     def __init__(self):\n         self.locator = CBlockLocator()\n-        self.hashstop = 0L\n+        self.hashstop = 0\n \n     def deserialize(self, f):\n         self.locator = CBlockLocator()\n@@ -869,7 +872,7 @@ def __repr__(self):\n class msg_ping(object):\n     command = b\"ping\"\n \n-    def __init__(self, nonce=0L):\n+    def __init__(self, nonce=0):\n         self.nonce = nonce\n \n     def deserialize(self, f):\n@@ -941,7 +944,7 @@ class msg_getheaders(object):\n \n     def __init__(self):\n         self.locator = CBlockLocator()\n-        self.hashstop = 0L\n+        self.hashstop = 0\n \n     def deserialize(self, f):\n         self.locator = CBlockLocator()\n@@ -989,7 +992,7 @@ def __init__(self):\n         self.message = b\"\"\n         self.code = 0\n         self.reason = b\"\"\n-        self.data = 0L\n+        self.data = 0\n \n     def deserialize(self, f):\n         self.message = deser_string(f)\n@@ -1030,7 +1033,7 @@ def wait_until(predicate, attempts=float('inf'), timeout=float('inf')):\n class msg_feefilter(object):\n     command = b\"feefilter\"\n \n-    def __init__(self, feerate=0L):\n+    def __init__(self, feerate=0):\n         self.feerate = feerate\n \n     def deserialize(self, f):\n@@ -1079,10 +1082,10 @@ def deliver(self, conn, message):\n             time.sleep(deliver_sleep)\n         with mininode_lock:\n             try:\n-                getattr(self, 'on_' + message.command)(conn, message)\n+                getattr(self, 'on_' + message.command.decode('ascii'))(conn, message)\n             except:\n-                print \"ERROR delivering %s (%s)\" % (repr(message),\n-                                                    sys.exc_info()[0])\n+                print(\"ERROR delivering %s (%s)\" % (repr(message),\n+                                                    sys.exc_info()[0]))\n \n     def on_version(self, conn, message):\n         if message.nVersion >= 209:\n@@ -1200,8 +1203,8 @@ def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=1):\n         vt.addrFrom.ip = \"0.0.0.0\"\n         vt.addrFrom.port = 0\n         self.send_message(vt, True)\n-        print 'MiniNode: Connecting to Bitcoin Node IP # ' + dstaddr + ':' \\\n-            + str(dstport)\n+        print('MiniNode: Connecting to Bitcoin Node IP # ' + dstaddr + ':' \\\n+            + str(dstport))\n \n         try:\n             self.connect((dstaddr, dstport))\n@@ -1294,7 +1297,9 @@ def got_data(self):\n                     self.show_debug_msg(\"Unknown command: '\" + command + \"' \" +\n                                         repr(msg))\n         except Exception as e:\n-            print 'got_data:', repr(e)\n+            print('got_data:', repr(e))\n+            # import  traceback\n+            # traceback.print_tb(sys.exc_info()[2])\n \n     def send_message(self, message, pushbuf=False):\n         if self.state != \"connected\" and not pushbuf:"
      },
      {
        "sha": "573b06772d7b33a3cad9df6ccf122f8370bd950c",
        "filename": "qa/rpc-tests/test_framework/netutil.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/test_framework/netutil.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/test_framework/netutil.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/netutil.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "44a894fc8f4880a79b14f033685cd06919a4e6fe",
        "filename": "qa/rpc-tests/test_framework/script.py",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/test_framework/script.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/test_framework/script.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/script.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,18 +1,19 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #\n # script.py\n #\n # This file is modified from python-bitcoinlib.\n #\n-# Distributed under the MIT/X11 software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n \n \"\"\"Scripts\n \n Functionality to build scripts, as well as SignatureHash().\n \"\"\"\n \n-from __future__ import absolute_import, division, print_function, unicode_literals\n \n from .mininode import CTransaction, CTxOut, hash256\n from binascii import hexlify\n@@ -658,7 +659,7 @@ def __coerce_instance(cls, other):\n                 other = bchr(CScriptOp(OP_0))\n             else:\n                 other = CScriptNum.encode(other)\n-        elif isinstance(other, (int, long)):\n+        elif isinstance(other, int):\n             if 0 <= other <= 16:\n                 other = bytes(bchr(CScriptOp.encode_op_n(other)))\n             elif other == -1:"
      },
      {
        "sha": "372f5ed605e4ab87f8eff1e3e8ac522bef56d5cf",
        "filename": "qa/rpc-tests/test_framework/socks5.py",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/test_framework/socks5.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/test_framework/socks5.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/socks5.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,11 +1,12 @@\n-# Copyright (c) 2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n '''\n Dummy Socks5 server for testing.\n '''\n-from __future__ import print_function, division, unicode_literals\n-import socket, threading, Queue\n+\n+import socket, threading, queue\n import traceback, sys\n \n ### Protocol constants\n@@ -132,7 +133,7 @@ def __init__(self, conf):\n         self.s.listen(5)\n         self.running = False\n         self.thread = None\n-        self.queue = Queue.Queue() # report connections and exceptions to client\n+        self.queue = queue.Queue() # report connections and exceptions to client\n \n     def run(self):\n         while self.running:"
      },
      {
        "sha": "ed12e1efb6d1a7426eb228bf10986b1e92a892fd",
        "filename": "qa/rpc-tests/test_framework/test_framework.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/test_framework.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -140,7 +140,7 @@ def main(self):\n             print(\"JSONRPC error: \"+e.error['message'])\n             traceback.print_tb(sys.exc_info()[2])\n         except AssertionError as e:\n-            print(\"Assertion failed: \"+ str(e))\n+            print(\"Assertion failed: \" + str(e))\n             traceback.print_tb(sys.exc_info()[2])\n         except KeyError as e:\n             print(\"key not found: \"+ str(e))\n@@ -189,7 +189,7 @@ def add_options(self, parser):\n                           help=\"bitcoind binary to use for reference nodes (if any)\")\n \n     def setup_chain(self):\n-        print \"Initializing test directory \"+self.options.tmpdir\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n         initialize_chain_clean(self.options.tmpdir, self.num_nodes)\n \n     def setup_network(self):"
      },
      {
        "sha": "ea3931cef361401c61e5958dae6a93a8c5980fc2",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 11,
        "deletions": 10,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,4 +1,5 @@\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -191,10 +192,10 @@ def initialize_chain(test_dir):\n                 args.append(\"-connect=127.0.0.1:\"+str(p2p_port(0)))\n             bitcoind_processes[i] = subprocess.Popen(args)\n             if os.getenv(\"PYTHON_DEBUG\", \"\"):\n-                print \"initialize_chain: bitcoind started, waiting for RPC to come up\"\n+                print(\"initialize_chain: bitcoind started, waiting for RPC to come up\")\n             wait_for_bitcoind_start(bitcoind_processes[i], rpc_url(i), i)\n             if os.getenv(\"PYTHON_DEBUG\", \"\"):\n-                print \"initialize_chain: RPC succesfully started\"\n+                print(\"initialize_chain: RPC succesfully started\")\n \n         rpcs = []\n         for i in range(4):\n@@ -275,11 +276,11 @@ def start_node(i, dirname, extra_args=None, rpchost=None, timewait=None, binary=\n     if extra_args is not None: args.extend(extra_args)\n     bitcoind_processes[i] = subprocess.Popen(args)\n     if os.getenv(\"PYTHON_DEBUG\", \"\"):\n-        print \"start_node: bitcoind started, waiting for RPC to come up\"\n+        print(\"start_node: bitcoind started, waiting for RPC to come up\")\n     url = rpc_url(i, rpchost)\n     wait_for_bitcoind_start(bitcoind_processes[i], url, i)\n     if os.getenv(\"PYTHON_DEBUG\", \"\"):\n-        print \"start_node: RPC succesfully started\"\n+        print(\"start_node: RPC succesfully started\")\n     proxy = get_rpc_proxy(url, i, timeout=timewait)\n \n     if COVERAGE_DIR:\n@@ -469,7 +470,7 @@ def assert_is_hex_string(string):\n             \"Couldn't interpret %r as hexadecimal; raised: %s\" % (string, e))\n \n def assert_is_hash_string(string, length=64):\n-    if not isinstance(string, basestring):\n+    if not isinstance(string, str):\n         raise AssertionError(\"Expected a string, got type %r\" % type(string))\n     elif length and len(string) != length:\n         raise AssertionError(\n@@ -520,7 +521,7 @@ def create_confirmed_utxos(fee, node, count):\n     addr2 = node.getnewaddress()\n     if iterations <= 0:\n         return utxos\n-    for i in xrange(iterations):\n+    for i in range(iterations):\n         t = utxos.pop()\n         inputs = []\n         inputs.append({ \"txid\" : t[\"txid\"], \"vout\" : t[\"vout\"]})\n@@ -546,11 +547,11 @@ def gen_return_txouts():\n     # So we have big transactions (and therefore can't fit very many into each block)\n     # create one script_pubkey\n     script_pubkey = \"6a4d0200\" #OP_RETURN OP_PUSH2 512 bytes\n-    for i in xrange (512):\n+    for i in range (512):\n         script_pubkey = script_pubkey + \"01\"\n     # concatenate 128 txouts of above script_pubkey which we'll insert before the txout for change\n     txouts = \"81\"\n-    for k in xrange(128):\n+    for k in range(128):\n         # add txout value\n         txouts = txouts + \"0000000000000000\"\n         # add length of script_pubkey\n@@ -572,7 +573,7 @@ def create_tx(node, coinbase, to_address, amount):\n def create_lots_of_big_transactions(node, txouts, utxos, fee):\n     addr = node.getnewaddress()\n     txids = []\n-    for i in xrange(len(utxos)):\n+    for i in range(len(utxos)):\n         t = utxos.pop()\n         inputs = []\n         inputs.append({ \"txid\" : t[\"txid\"], \"vout\" : t[\"vout\"]})"
      },
      {
        "sha": "5710c29aa60cdf51d87658df23218896bb54b8f2",
        "filename": "qa/rpc-tests/txn_clone.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txn_clone.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "1fbb207e22db818bc9cd03e58a2dc7ca1fc331c5",
        "filename": "qa/rpc-tests/txn_doublespend.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txn_doublespend.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "42ce0a7260fa373e71aba2f75fc7e00ed16b08c9",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -38,7 +38,7 @@ def run_test (self):\n         assert_equal(len(self.nodes[1].listunspent()), 0)\n         assert_equal(len(self.nodes[2].listunspent()), 0)\n \n-        print \"Mining blocks...\"\n+        print(\"Mining blocks...\")\n \n         self.nodes[0].generate(1)\n \n@@ -321,7 +321,7 @@ def run_test (self):\n             '-salvagewallet',\n         ]\n         for m in maintenance:\n-            print \"check \" + m\n+            print(\"check \" + m)\n             stop_nodes(self.nodes)\n             wait_bitcoinds()\n             self.nodes = start_nodes(3, self.options.tmpdir, [[m]] * 3)"
      },
      {
        "sha": "418f3103e3ad77a960859f23fb47d85024de5cc4",
        "filename": "qa/rpc-tests/walletbackup.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/walletbackup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/walletbackup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/walletbackup.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "2f8214f87c26c3e04f7c82d607676bbfb84afcf4",
        "filename": "qa/rpc-tests/zapwallettxes.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/zapwallettxes.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -22,7 +22,7 @@ def setup_network(self, split=False):\n         self.sync_all()\n \n     def run_test (self):\n-        print \"Mining blocks...\"\n+        print(\"Mining blocks...\")\n         self.nodes[0].generate(1)\n         self.sync_all()\n         self.nodes[1].generate(101)"
      },
      {
        "sha": "f5617a084db7dcf7157e5fd472478097b6b79ea9",
        "filename": "qa/rpc-tests/zmq_test.py",
        "status": "modified",
        "additions": 5,
        "deletions": 12,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/zmq_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa389d4edc367073e2ccc6d1f0790c4b72ba17f2/qa/rpc-tests/zmq_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/zmq_test.py?ref=fa389d4edc367073e2ccc6d1f0790c4b72ba17f2",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -10,17 +10,10 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n import zmq\n-import binascii\n import struct\n \n-try:\n-    import http.client as httplib\n-except ImportError:\n-    import httplib\n-try:\n-    import urllib.parse as urlparse\n-except ImportError:\n-    import urlparse\n+import http.client\n+import urllib.parse\n \n class ZMQTest (BitcoinTestFramework):\n \n@@ -45,7 +38,7 @@ def run_test(self):\n         genhashes = self.nodes[0].generate(1)\n         self.sync_all()\n \n-        print \"listen...\"\n+        print(\"listen...\")\n         msg = self.zmqSubSocket.recv_multipart()\n         topic = msg[0]\n         assert_equal(topic, b\"hashtx\")"
      }
    ]
  }
]