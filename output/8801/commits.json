[
  {
    "sha": "be0f534d14c14290013a2f7466cd1458d3b6589e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZTBmNTM0ZDE0YzE0MjkwMDEzYTJmNzQ2NmNkMTQ1OGQzYjY1ODll",
    "commit": {
      "author": {
        "name": "Thomas Snider",
        "email": "tjps636@gmail.com",
        "date": "2016-09-23T02:14:19Z"
      },
      "committer": {
        "name": "Thomas Snider",
        "email": "tjps636@gmail.com",
        "date": "2016-09-23T21:36:28Z"
      },
      "message": "[trivial] Switching from Boost for-each macros to C++11 for-each",
      "tree": {
        "sha": "462b6d628ab7c38636660f456f1199c6e4a37189",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/462b6d628ab7c38636660f456f1199c6e4a37189"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/be0f534d14c14290013a2f7466cd1458d3b6589e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be0f534d14c14290013a2f7466cd1458d3b6589e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/be0f534d14c14290013a2f7466cd1458d3b6589e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be0f534d14c14290013a2f7466cd1458d3b6589e/comments",
    "author": {
      "login": "tjps",
      "id": 7519582,
      "node_id": "MDQ6VXNlcjc1MTk1ODI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7519582?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tjps",
      "html_url": "https://github.com/tjps",
      "followers_url": "https://api.github.com/users/tjps/followers",
      "following_url": "https://api.github.com/users/tjps/following{/other_user}",
      "gists_url": "https://api.github.com/users/tjps/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tjps/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tjps/subscriptions",
      "organizations_url": "https://api.github.com/users/tjps/orgs",
      "repos_url": "https://api.github.com/users/tjps/repos",
      "events_url": "https://api.github.com/users/tjps/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tjps/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "tjps",
      "id": 7519582,
      "node_id": "MDQ6VXNlcjc1MTk1ODI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7519582?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tjps",
      "html_url": "https://github.com/tjps",
      "followers_url": "https://api.github.com/users/tjps/followers",
      "following_url": "https://api.github.com/users/tjps/following{/other_user}",
      "gists_url": "https://api.github.com/users/tjps/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tjps/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tjps/subscriptions",
      "organizations_url": "https://api.github.com/users/tjps/orgs",
      "repos_url": "https://api.github.com/users/tjps/repos",
      "events_url": "https://api.github.com/users/tjps/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tjps/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cf5ebaa921a939cc3a81948a559c1f1ab53d68b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf5ebaa921a939cc3a81948a559c1f1ab53d68b6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cf5ebaa921a939cc3a81948a559c1f1ab53d68b6"
      }
    ],
    "stats": {
      "total": 761,
      "additions": 361,
      "deletions": 400
    },
    "files": [
      {
        "sha": "e3d500a6d1d909e5512fa52129689ea718e8c7ce",
        "filename": "src/.clang-format",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/.clang-format",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/.clang-format",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/.clang-format?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -23,7 +23,6 @@ ContinuationIndentWidth: 4\n Cpp11BracedListStyle: true\n DerivePointerAlignment: false\n DisableFormat:   false\n-ForEachMacros:   [ foreach, Q_FOREACH, BOOST_FOREACH, BOOST_REVERSE_FOREACH ]\n IndentCaseLabels: false\n IndentFunctionDeclarationAfterType: false\n IndentWidth:     4"
      },
      {
        "sha": "3cf86b469b141b7318eb2046d41e9f275e9b8837",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -483,7 +483,7 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n             ProduceSignature(MutableTransactionSignatureCreator(&keystore, &mergedTx, i, amount, nHashType), prevPubKey, sigdata);\n \n         // ... and merge in other signatures:\n-        BOOST_FOREACH(const CTransaction& txv, txVariants)\n+        for (const CTransaction& txv : txVariants)\n             sigdata = CombineSignatures(prevPubKey, MutableTransactionSignatureChecker(&mergedTx, i, amount), sigdata, DataFromTransaction(txv, i));\n         UpdateTransaction(mergedTx, i, sigdata);\n "
      },
      {
        "sha": "9f3efe088486713563f15b7f9abc2a6b0ee25b0b",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -14,7 +14,6 @@\n #include <math.h>\n #include <stdlib.h>\n \n-#include <boost/foreach.hpp>\n \n #define LN2SQUARED 0.4804530139182014246671025263266649717305529515945455\n #define LN2 0.6931471805599453094172321214581765680755001343602552\n@@ -181,7 +180,7 @@ bool CBloomFilter::IsRelevantAndUpdate(const CTransaction& tx)\n     if (fFound)\n         return true;\n \n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    for (const CTxIn& txin : tx.vin)\n     {\n         // Match if the filter contains an outpoint tx spends\n         if (contains(txin.prevout))"
      },
      {
        "sha": "351435ecb03f8bbcb8ca610b6898fe4665620b48",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -11,8 +11,6 @@\n \n #include <stdint.h>\n \n-#include <boost/foreach.hpp>\n-\n namespace Checkpoints {\n \n     /**\n@@ -69,7 +67,7 @@ namespace Checkpoints {\n     {\n         const MapCheckpoints& checkpoints = data.mapCheckpoints;\n \n-        BOOST_REVERSE_FOREACH(const MapCheckpoints::value_type& i, checkpoints)\n+        for (const MapCheckpoints::value_type& i : boost::adaptors::reverse(checkpoints))\n         {\n             const uint256& hash = i.second;\n             BlockMap::const_iterator t = mapBlockIndex.find(hash);"
      },
      {
        "sha": "5dd1c6782ed727554cc1511df24ec8002cfba183",
        "filename": "src/checkqueue.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/checkqueue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/checkqueue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkqueue.h?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -8,7 +8,6 @@\n #include <algorithm>\n #include <vector>\n \n-#include <boost/foreach.hpp>\n #include <boost/thread/condition_variable.hpp>\n #include <boost/thread/locks.hpp>\n #include <boost/thread/mutex.hpp>\n@@ -119,7 +118,7 @@ class CCheckQueue\n                 fOk = fAllOk;\n             }\n             // execute work\n-            BOOST_FOREACH (T& check, vChecks)\n+            for (T& check : vChecks)\n                 if (fOk)\n                     fOk = check();\n             vChecks.clear();\n@@ -146,7 +145,7 @@ class CCheckQueue\n     void Add(std::vector<T>& vChecks)\n     {\n         boost::unique_lock<boost::mutex> lock(mutex);\n-        BOOST_FOREACH (T& check, vChecks) {\n+        for (T& check : vChecks) {\n             queue.push_back(T());\n             check.swap(queue.back());\n         }"
      },
      {
        "sha": "f3a5d5779f6beb77a4230dda46d3449d761d0c17",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -269,7 +269,7 @@ double CCoinsViewCache::GetPriority(const CTransaction &tx, int nHeight, CAmount\n     if (tx.IsCoinBase())\n         return 0.0;\n     double dResult = 0.0;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    for (const CTxIn& txin : tx.vin)\n     {\n         const CCoins* coins = AccessCoins(txin.prevout.hash);\n         assert(coins);"
      },
      {
        "sha": "747c129b82040d9eef5d0b9c7523deabec08b307",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -16,7 +16,6 @@\n #include <assert.h>\n #include <stdint.h>\n \n-#include <boost/foreach.hpp>\n #include <boost/unordered_map.hpp>\n \n /** \n@@ -119,7 +118,7 @@ class CCoins\n     }\n \n     void ClearUnspendable() {\n-        BOOST_FOREACH(CTxOut &txout, vout) {\n+        for (CTxOut &txout : vout) {\n             if (txout.scriptPubKey.IsUnspendable())\n                 txout.SetNull();\n         }\n@@ -250,15 +249,15 @@ class CCoins\n     //! check whether the entire CCoins is spent\n     //! note that only !IsPruned() CCoins can be serialized\n     bool IsPruned() const {\n-        BOOST_FOREACH(const CTxOut &out, vout)\n+        for (const CTxOut &out : vout)\n             if (!out.IsNull())\n                 return false;\n         return true;\n     }\n \n     size_t DynamicMemoryUsage() const {\n         size_t ret = memusage::DynamicUsage(vout);\n-        BOOST_FOREACH(const CTxOut &out, vout) {\n+        for (const CTxOut &out : vout) {\n             ret += RecursiveDynamicUsage(out.scriptPubKey);\n         }\n         return ret;"
      },
      {
        "sha": "2347585b20c310a569b08bd12c20d984ffa432ba",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -16,7 +16,6 @@\n #include \"utilstrencodings.h\"\n \n #include <boost/assign/list_of.hpp>\n-#include <boost/foreach.hpp>\n \n using namespace std;\n \n@@ -143,7 +142,7 @@ void ScriptPubKeyToUniv(const CScript& scriptPubKey,\n     out.pushKV(\"type\", GetTxnOutputType(type));\n \n     UniValue a(UniValue::VARR);\n-    BOOST_FOREACH(const CTxDestination& addr, addresses)\n+    for (const CTxDestination& addr : addresses)\n         a.push_back(CBitcoinAddress(addr).ToString());\n     out.pushKV(\"addresses\", a);\n }\n@@ -155,7 +154,7 @@ void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry)\n     entry.pushKV(\"locktime\", (int64_t)tx.nLockTime);\n \n     UniValue vin(UniValue::VARR);\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+    for (const CTxIn& txin : tx.vin) {\n         UniValue in(UniValue::VOBJ);\n         if (tx.IsCoinBase())\n             in.pushKV(\"coinbase\", HexStr(txin.scriptSig.begin(), txin.scriptSig.end()));"
      },
      {
        "sha": "e2cfb4e0b5eb1e714df06ca57fcf71df034b3590",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -19,7 +19,6 @@\n #include \"utilstrencodings.h\"\n \n #include <boost/algorithm/string.hpp> // boost::trim\n-#include <boost/foreach.hpp> //BOOST_FOREACH\n \n /** WWW-Authenticate to present with 401 Unauthorized response */\n static const char* WWW_AUTH_HEADER_DATA = \"Basic realm=\\\"jsonrpc\\\"\";\n@@ -86,7 +85,7 @@ static void JSONErrorReply(HTTPRequest* req, const UniValue& objError, const Uni\n //This function checks username and password against -rpcauth\n //entries from config file.\n static bool multiUserAuthorized(std::string strUserPass)\n-{    \n+{\n     if (strUserPass.find(\":\") == std::string::npos) {\n         return false;\n     }\n@@ -95,7 +94,7 @@ static bool multiUserAuthorized(std::string strUserPass)\n \n     if (mapMultiArgs.count(\"-rpcauth\") > 0) {\n         //Search for multi-user login/pass \"rpcauth\" from config\n-        BOOST_FOREACH(std::string strRPCAuth, mapMultiArgs[\"-rpcauth\"])\n+        for (std::string strRPCAuth : mapMultiArgs[\"-rpcauth\"])\n         {\n             std::vector<std::string> vFields;\n             boost::split(vFields, strRPCAuth, boost::is_any_of(\":$\"));\n@@ -113,8 +112,8 @@ static bool multiUserAuthorized(std::string strUserPass)\n             std::string strHash = vFields[2];\n \n             unsigned int KEY_SIZE = 32;\n-            unsigned char *out = new unsigned char[KEY_SIZE]; \n-            \n+            unsigned char *out = new unsigned char[KEY_SIZE];\n+\n             CHMAC_SHA256(reinterpret_cast<const unsigned char*>(strSalt.c_str()), strSalt.size()).Write(reinterpret_cast<const unsigned char*>(strPass.c_str()), strPass.size()).Finalize(out);\n             std::vector<unsigned char> hexvec(out, out+KEY_SIZE);\n             std::string strHashFromPass = HexStr(hexvec);\n@@ -136,7 +135,7 @@ static bool RPCAuthorized(const std::string& strAuth)\n     std::string strUserPass64 = strAuth.substr(6);\n     boost::trim(strUserPass64);\n     std::string strUserPass = DecodeBase64(strUserPass64);\n-    \n+\n     //Check if authorized under single-user field\n     if (TimingResistantEqual(strUserPass, strRPCUserColonPass)) {\n         return true;"
      },
      {
        "sha": "262fcfd2fc26dffba33b0313dd6f34dd7371f38c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -584,7 +584,7 @@ void CleanupBlockRevFiles()\n     // keeping a separate counter.  Once we hit a gap (or if 0 doesn't exist)\n     // start removing block files.\n     int nContigCounter = 0;\n-    BOOST_FOREACH(const PAIRTYPE(string, path)& item, mapBlockFiles) {\n+    for (const std::pair<string, path>& item : mapBlockFiles) {\n         if (atoi(item.first) == nContigCounter) {\n             nContigCounter++;\n             continue;\n@@ -635,7 +635,7 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n     }\n \n     // -loadblock=\n-    BOOST_FOREACH(const boost::filesystem::path& path, vImportFiles) {\n+    for (const boost::filesystem::path& path : vImportFiles) {\n         FILE *file = fopen(path.string().c_str(), \"rb\");\n         if (file) {\n             LogPrintf(\"Importing blocks file %s...\\n\", path.string());\n@@ -1106,7 +1106,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     // sanitize comments per BIP-0014, format user agent and check total size\n     std::vector<string> uacomments;\n-    BOOST_FOREACH(string cmt, mapMultiArgs[\"-uacomment\"])\n+    for (string cmt : mapMultiArgs[\"-uacomment\"])\n     {\n         if (cmt != SanitizeString(cmt, SAFE_CHARS_UA_COMMENT))\n             return InitError(strprintf(_(\"User Agent comment (%s) contains unsafe characters.\"), cmt));\n@@ -1120,7 +1120,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     if (mapArgs.count(\"-onlynet\")) {\n         std::set<enum Network> nets;\n-        BOOST_FOREACH(const std::string& snet, mapMultiArgs[\"-onlynet\"]) {\n+        for (const std::string& snet : mapMultiArgs[\"-onlynet\"]) {\n             enum Network net = ParseNetwork(snet);\n             if (net == NET_UNROUTABLE)\n                 return InitError(strprintf(_(\"Unknown network specified in -onlynet: '%s'\"), snet));\n@@ -1134,7 +1134,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     }\n \n     if (mapArgs.count(\"-whitelist\")) {\n-        BOOST_FOREACH(const std::string& net, mapMultiArgs[\"-whitelist\"]) {\n+        for (const std::string& net : mapMultiArgs[\"-whitelist\"]) {\n             CSubNet subnet;\n             LookupSubNet(net.c_str(), subnet);\n             if (!subnet.IsValid())\n@@ -1187,13 +1187,13 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     if (fListen) {\n         bool fBound = false;\n         if (mapArgs.count(\"-bind\") || mapArgs.count(\"-whitebind\")) {\n-            BOOST_FOREACH(const std::string& strBind, mapMultiArgs[\"-bind\"]) {\n+            for (const std::string& strBind : mapMultiArgs[\"-bind\"]) {\n                 CService addrBind;\n                 if (!Lookup(strBind.c_str(), addrBind, GetListenPort(), false))\n                     return InitError(ResolveErrMsg(\"bind\", strBind));\n                 fBound |= Bind(connman, addrBind, (BF_EXPLICIT | BF_REPORT_ERROR));\n             }\n-            BOOST_FOREACH(const std::string& strBind, mapMultiArgs[\"-whitebind\"]) {\n+            for (const std::string& strBind : mapMultiArgs[\"-whitebind\"]) {\n                 CService addrBind;\n                 if (!Lookup(strBind.c_str(), addrBind, 0, false))\n                     return InitError(ResolveErrMsg(\"whitebind\", strBind));\n@@ -1213,7 +1213,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     }\n \n     if (mapArgs.count(\"-externalip\")) {\n-        BOOST_FOREACH(const std::string& strAddr, mapMultiArgs[\"-externalip\"]) {\n+        for (const std::string& strAddr : mapMultiArgs[\"-externalip\"]) {\n             CService addrLocal;\n             if (Lookup(strAddr.c_str(), addrLocal, GetListenPort(), fNameLookup) && addrLocal.IsValid())\n                 AddLocal(addrLocal, LOCAL_MANUAL);\n@@ -1222,7 +1222,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         }\n     }\n \n-    BOOST_FOREACH(const std::string& strDest, mapMultiArgs[\"-seednode\"])\n+    for (const std::string& strDest : mapMultiArgs[\"-seednode\"])\n         connman.AddOneShot(strDest);\n \n #if ENABLE_ZMQ\n@@ -1473,7 +1473,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     std::vector<boost::filesystem::path> vImportFiles;\n     if (mapArgs.count(\"-loadblock\"))\n     {\n-        BOOST_FOREACH(const std::string& strFile, mapMultiArgs[\"-loadblock\"])\n+        for (const std::string& strFile : mapMultiArgs[\"-loadblock\"])\n             vImportFiles.push_back(strFile);\n     }\n "
      },
      {
        "sha": "58f06ab03894be19c08609d4678a52eaa5d3053c",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -9,7 +9,6 @@\n #include \"pubkey.h\"\n #include \"util.h\"\n \n-#include <boost/foreach.hpp>\n \n bool CKeyStore::AddKey(const CKey &key) {\n     return AddKeyPubKey(key, key.GetPubKey());"
      },
      {
        "sha": "67e96127660dcee559a515c78770f572abbd2f7d",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 47,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -356,7 +356,7 @@ void FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTime) {\n         fUpdateConnectionTime = true;\n     }\n \n-    BOOST_FOREACH(const QueuedBlock& entry, state->vBlocksInFlight) {\n+    for (const QueuedBlock& entry : state->vBlocksInFlight) {\n         mapBlocksInFlight.erase(entry.hash);\n     }\n     EraseOrphansFor(nodeid);\n@@ -472,7 +472,7 @@ void MaybeSetPeerAsAnnouncingHeaderAndIDs(const CNodeState* nodestate, CNode* pf\n         return;\n     }\n     if (nodestate->fProvidesHeaderAndIDs) {\n-        BOOST_FOREACH(const NodeId nodeid, lNodesAnnouncingHeaderAndIDs)\n+        for (const NodeId nodeid : lNodesAnnouncingHeaderAndIDs)\n             if (nodeid == pfrom->GetId())\n                 return;\n         bool fAnnounceUsingCMPCTBLOCK = false;\n@@ -582,7 +582,7 @@ void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<CBl\n         // are not yet downloaded and not in flight to vBlocks. In the mean time, update\n         // pindexLastCommonBlock as long as all ancestors are already downloaded, or if it's\n         // already part of our chain (and therefore don't need it even if pruned).\n-        BOOST_FOREACH(CBlockIndex* pindex, vToFetch) {\n+        for (CBlockIndex* pindex : vToFetch) {\n             if (!pindex->IsValid(BLOCK_VALID_TREE)) {\n                 // We consider the chain that this peer is on invalid.\n                 return;\n@@ -626,7 +626,7 @@ bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats) {\n     stats.nMisbehavior = state->nMisbehavior;\n     stats.nSyncHeight = state->pindexBestKnownBlock ? state->pindexBestKnownBlock->nHeight : -1;\n     stats.nCommonHeight = state->pindexLastCommonBlock ? state->pindexLastCommonBlock->nHeight : -1;\n-    BOOST_FOREACH(const QueuedBlock& queue, state->vBlocksInFlight) {\n+    for (const QueuedBlock& queue : state->vBlocksInFlight) {\n         if (queue.pindex)\n             stats.vHeightInFlight.push_back(queue.pindex->nHeight);\n     }\n@@ -652,7 +652,7 @@ void UnregisterNodeSignals(CNodeSignals& nodeSignals)\n CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator)\n {\n     // Find the first block the caller has in the main chain\n-    BOOST_FOREACH(const uint256& hash, locator.vHave) {\n+    for (const uint256& hash : locator.vHave) {\n         BlockMap::iterator mi = mapBlockIndex.find(hash);\n         if (mi != mapBlockIndex.end())\n         {\n@@ -697,7 +697,7 @@ bool AddOrphanTx(const CTransaction& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(c\n \n     auto ret = mapOrphanTransactions.emplace(hash, COrphanTx{tx, peer, GetTime() + ORPHAN_TX_EXPIRE_TIME});\n     assert(ret.second);\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+    for (const CTxIn& txin : tx.vin) {\n         mapOrphanTransactionsByPrev[txin.prevout].insert(ret.first);\n     }\n \n@@ -711,7 +711,7 @@ int static EraseOrphanTx(uint256 hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n     map<uint256, COrphanTx>::iterator it = mapOrphanTransactions.find(hash);\n     if (it == mapOrphanTransactions.end())\n         return 0;\n-    BOOST_FOREACH(const CTxIn& txin, it->second.tx.vin)\n+    for (const CTxIn& txin : it->second.tx.vin)\n     {\n         auto itPrev = mapOrphanTransactionsByPrev.find(txin.prevout);\n         if (itPrev == mapOrphanTransactionsByPrev.end())\n@@ -980,7 +980,7 @@ bool CheckSequenceLocks(const CTransaction &tx, int flags, LockPoints* lp, bool\n             // lock on a mempool input, so we can use the return value of\n             // CheckSequenceLocks to indicate the LockPoints validity\n             int maxInputHeight = 0;\n-            BOOST_FOREACH(int height, prevheights) {\n+            for (int height : prevheights) {\n                 // Can ignore mempool inputs since we'll fail if they had non-zero locks\n                 if (height != tip->nHeight+1) {\n                     maxInputHeight = std::max(maxInputHeight, height);\n@@ -1100,7 +1100,7 @@ void LimitMempoolSize(CTxMemPool& pool, size_t limit, unsigned long age) {\n \n     std::vector<uint256> vNoSpendsRemaining;\n     pool.TrimToSize(limit, &vNoSpendsRemaining);\n-    BOOST_FOREACH(const uint256& removed, vNoSpendsRemaining)\n+    for (const uint256& removed : vNoSpendsRemaining)\n         pcoinsTip->Uncache(removed);\n }\n \n@@ -1162,7 +1162,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n     set<uint256> setConflicts;\n     {\n     LOCK(pool.cs); // protect pool.mapNextTx\n-    BOOST_FOREACH(const CTxIn &txin, tx.vin)\n+    for (const CTxIn &txin : tx.vin)\n     {\n         auto itConflicting = pool.mapNextTx.find(txin.prevout);\n         if (itConflicting != pool.mapNextTx.end())\n@@ -1185,7 +1185,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n                 bool fReplacementOptOut = true;\n                 if (fEnableReplacement)\n                 {\n-                    BOOST_FOREACH(const CTxIn &txin, ptxConflicting->vin)\n+                    for (const CTxIn &txin : ptxConflicting->vin)\n                     {\n                         if (txin.nSequence < std::numeric_limits<unsigned int>::max()-1)\n                         {\n@@ -1225,7 +1225,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         // do all inputs exist?\n         // Note that this does not check for the presence of actual outputs (see the next check for that),\n         // and only helps with filling in pfMissingInputs (to determine missing vs spent).\n-        BOOST_FOREACH(const CTxIn txin, tx.vin) {\n+        for (const CTxIn txin : tx.vin) {\n             if (!pcoinsTip->HaveCoinsInCache(txin.prevout.hash))\n                 vHashTxnToUncache.push_back(txin.prevout.hash);\n             if (!view.HaveCoins(txin.prevout.hash)) {\n@@ -1275,7 +1275,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         // Keep track of transactions that spend a coinbase, which we re-scan\n         // during reorgs to ensure COINBASE_MATURITY is still met.\n         bool fSpendsCoinbase = false;\n-        BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n+        for (const CTxIn &txin : tx.vin) {\n             const CCoins *coins = view.AccessCoins(txin.prevout.hash);\n             if (coins->IsCoinBase()) {\n                 fSpendsCoinbase = true;\n@@ -1346,7 +1346,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         // that we have the set of all ancestors we can detect this\n         // pathological case by making sure setConflicts and setAncestors don't\n         // intersect.\n-        BOOST_FOREACH(CTxMemPool::txiter ancestorIt, setAncestors)\n+        for (CTxMemPool::txiter ancestorIt : setAncestors)\n         {\n             const uint256 &hashAncestor = ancestorIt->GetTx().GetHash();\n             if (setConflicts.count(hashAncestor))\n@@ -1376,7 +1376,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n             set<uint256> setConflictsParents;\n             const int maxDescendantsToVisit = 100;\n             CTxMemPool::setEntries setIterConflicting;\n-            BOOST_FOREACH(const uint256 &hashConflicting, setConflicts)\n+            for (const uint256 &hashConflicting : setConflicts)\n             {\n                 CTxMemPool::txiter mi = pool.mapTx.find(hashConflicting);\n                 if (mi == pool.mapTx.end())\n@@ -1412,7 +1412,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n                                   oldFeeRate.ToString()));\n                 }\n \n-                BOOST_FOREACH(const CTxIn &txin, mi->GetTx().vin)\n+                for (const CTxIn &txin : mi->GetTx().vin)\n                 {\n                     setConflictsParents.insert(txin.prevout.hash);\n                 }\n@@ -1425,10 +1425,10 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n             if (nConflictingCount <= maxDescendantsToVisit) {\n                 // If not too many to replace, then calculate the set of\n                 // transactions that would have to be evicted\n-                BOOST_FOREACH(CTxMemPool::txiter it, setIterConflicting) {\n+                for (CTxMemPool::txiter it : setIterConflicting) {\n                     pool.CalculateDescendants(it, allConflicting);\n                 }\n-                BOOST_FOREACH(CTxMemPool::txiter it, allConflicting) {\n+                for (CTxMemPool::txiter it : allConflicting) {\n                     nConflictingFees += it->GetModifiedFee();\n                     nConflictingSize += it->GetTxSize();\n                 }\n@@ -1521,7 +1521,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         }\n \n         // Remove conflicting transactions from the mempool\n-        BOOST_FOREACH(const CTxMemPool::txiter it, allConflicting)\n+        for (const CTxMemPool::txiter it : allConflicting)\n         {\n             LogPrint(\"mempool\", \"replacing tx %s with %s for %s BTC additional fees, %d delta bytes\\n\",\n                     it->GetTx().GetHash().ToString(),\n@@ -1553,7 +1553,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     std::vector<uint256> vHashTxToUncache;\n     bool res = AcceptToMemoryPoolWorker(pool, state, tx, fLimitFree, pfMissingInputs, fOverrideMempoolLimit, nAbsurdFee, vHashTxToUncache);\n     if (!res) {\n-        BOOST_FOREACH(const uint256& hashTx, vHashTxToUncache)\n+        for (const uint256& hashTx : vHashTxToUncache)\n             pcoinsTip->Uncache(hashTx);\n     }\n     return res;\n@@ -1609,7 +1609,7 @@ bool GetTransaction(const uint256 &hash, CTransaction &txOut, const Consensus::P\n     if (pindexSlow) {\n         CBlock block;\n         if (ReadBlockFromDisk(block, pindexSlow, consensusParams)) {\n-            BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n+            for (const CTransaction &tx : block.vtx) {\n                 if (tx.GetHash() == hash) {\n                     txOut = tx;\n                     hashBlock = pindexSlow->GetBlockHash();\n@@ -1881,7 +1881,7 @@ void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, CTxUndo &txund\n     // mark inputs spent\n     if (!tx.IsCoinBase()) {\n         txundo.vprevout.reserve(tx.vin.size());\n-        BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n+        for (const CTxIn &txin : tx.vin) {\n             CCoinsModifier coins = inputs.ModifyCoins(txin.prevout.hash);\n             unsigned nPos = txin.prevout.n;\n \n@@ -2354,7 +2354,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     fEnforceBIP30 = fEnforceBIP30 && (!pindexBIP34height || !(pindexBIP34height->GetBlockHash() == chainparams.GetConsensus().BIP34Hash));\n \n     if (fEnforceBIP30) {\n-        BOOST_FOREACH(const CTransaction& tx, block.vtx) {\n+        for (const CTransaction& tx : block.vtx) {\n             const CCoins* coins = view.AccessCoins(tx.GetHash());\n             if (coins && !coins->IsPruned())\n                 return state.DoS(100, error(\"ConnectBlock(): tried to overwrite transaction\"),\n@@ -2531,7 +2531,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     // Erase orphan transactions include or precluded by this block\n     if (vOrphanErase.size()) {\n         int nErased = 0;\n-        BOOST_FOREACH(uint256 &orphanHash, vOrphanErase) {\n+        for (uint256 &orphanHash : vOrphanErase) {\n             nErased += EraseOrphanTx(orphanHash);\n         }\n         LogPrint(\"mempool\", \"Erased %d orphan tx included or conflicted by block\\n\", nErased);\n@@ -2751,7 +2751,7 @@ bool static DisconnectTip(CValidationState& state, const CChainParams& chainpara\n     if (!fBare) {\n         // Resurrect mempool transactions from the disconnected block.\n         std::vector<uint256> vHashUpdate;\n-        BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n+        for (const CTransaction &tx : block.vtx) {\n             // ignore validation errors in resurrected transactions\n             list<CTransaction> removed;\n             CValidationState stateDummy;\n@@ -2773,7 +2773,7 @@ bool static DisconnectTip(CValidationState& state, const CChainParams& chainpara\n     UpdateTip(pindexDelete->pprev, chainparams);\n     // Let wallets know transactions went from 1-confirmed to\n     // 0-confirmed or conflicted:\n-    BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n+    for (const CTransaction &tx : block.vtx) {\n         SyncWithWallets(tx, pindexDelete->pprev);\n     }\n     return true;\n@@ -2945,7 +2945,7 @@ static bool ActivateBestChainStep(CValidationState& state, const CChainParams& c\n         nHeight = nTargetHeight;\n \n         // Connect new blocks.\n-        BOOST_REVERSE_FOREACH(CBlockIndex *pindexConnect, vpindexToConnect) {\n+        for (CBlockIndex *pindexConnect : boost::adaptors::reverse(vpindexToConnect)) {\n             if (!ConnectTip(state, chainparams, pindexConnect, pindexConnect == pindexMostWork ? pblock : NULL, txConflicted, txChanged)) {\n                 if (state.IsInvalid()) {\n                     // The block violates a consensus rule.\n@@ -3060,7 +3060,7 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n \n         // throw all transactions though the signal-interface\n         // while _not_ holding the cs_main lock\n-        BOOST_FOREACH(const CTransaction &tx, txConflicted)\n+        for (const CTransaction &tx : txConflicted)\n         {\n             SyncWithWallets(tx, pindexNewTip);\n         }\n@@ -3092,7 +3092,7 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n                 if(connman) {\n                     connman->ForEachNode([nNewHeight, nBlockEstimate, &vHashes](CNode* pnode) {\n                         if (nNewHeight > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : nBlockEstimate)) {\n-                            BOOST_REVERSE_FOREACH(const uint256& hash, vHashes) {\n+                            for (const uint256& hash : boost::adaptors::reverse(vHashes)) {\n                                 pnode->PushBlockHash(hash);\n                             }\n                         }\n@@ -3793,7 +3793,7 @@ bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams,\n uint64_t CalculateCurrentUsage()\n {\n     uint64_t retval = 0;\n-    BOOST_FOREACH(const CBlockFileInfo &file, vinfoBlockFile) {\n+    for (const CBlockFileInfo &file : vinfoBlockFile) {\n         retval += file.nSize + file.nUndoSize;\n     }\n     return retval;\n@@ -3968,13 +3968,13 @@ bool static LoadBlockIndexDB()\n     // Calculate nChainWork\n     vector<pair<int, CBlockIndex*> > vSortedByHeight;\n     vSortedByHeight.reserve(mapBlockIndex.size());\n-    BOOST_FOREACH(const PAIRTYPE(uint256, CBlockIndex*)& item, mapBlockIndex)\n+    for (const std::pair<uint256, CBlockIndex*>& item : mapBlockIndex)\n     {\n         CBlockIndex* pindex = item.second;\n         vSortedByHeight.push_back(make_pair(pindex->nHeight, pindex));\n     }\n     sort(vSortedByHeight.begin(), vSortedByHeight.end());\n-    BOOST_FOREACH(const PAIRTYPE(int, CBlockIndex*)& item, vSortedByHeight)\n+    for (const std::pair<int, CBlockIndex*>& item : vSortedByHeight)\n     {\n         CBlockIndex* pindex = item.second;\n         pindex->nChainWork = (pindex->pprev ? pindex->pprev->nChainWork : 0) + GetBlockProof(*pindex);\n@@ -4022,7 +4022,7 @@ bool static LoadBlockIndexDB()\n     // Check presence of blk files\n     LogPrintf(\"Checking all blk files are present...\\n\");\n     set<int> setBlkDataFiles;\n-    BOOST_FOREACH(const PAIRTYPE(uint256, CBlockIndex*)& item, mapBlockIndex)\n+    for (const std::pair<uint256, CBlockIndex*>& item : mapBlockIndex)\n     {\n         CBlockIndex* pindex = item.second;\n         if (pindex->nStatus & BLOCK_HAVE_DATA) {\n@@ -4281,7 +4281,7 @@ void UnloadBlockIndex()\n         warningcache[b].clear();\n     }\n \n-    BOOST_FOREACH(BlockMap::value_type& entry, mapBlockIndex) {\n+    for (BlockMap::value_type& entry : mapBlockIndex) {\n         delete entry.second;\n     }\n     mapBlockIndex.clear();\n@@ -4843,7 +4843,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                             // Thus, the protocol spec specified allows for us to provide duplicate txn here,\n                             // however we MUST always provide at least what the remote peer needs\n                             typedef std::pair<unsigned int, uint256> PairType;\n-                            BOOST_FOREACH(PairType& pair, merkleBlock.vMatchedTxn)\n+                            for (PairType& pair : merkleBlock.vMatchedTxn)\n                                 pfrom->PushMessageWithFlag(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::TX, block.vtx[pair.first]);\n                         }\n                         // else\n@@ -5158,7 +5158,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         vector<CAddress> vAddrOk;\n         int64_t nNow = GetAdjustedTime();\n         int64_t nSince = nNow - 10 * 60;\n-        BOOST_FOREACH(CAddress& addr, vAddr)\n+        for (CAddress& addr : vAddr)\n         {\n             boost::this_thread::interruption_point();\n \n@@ -5535,20 +5535,20 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 }\n             }\n \n-            BOOST_FOREACH(uint256 hash, vEraseQueue)\n+            for (uint256 hash : vEraseQueue)\n                 EraseOrphanTx(hash);\n         }\n         else if (fMissingInputs)\n         {\n             bool fRejectedParents = false; // It may be the case that the orphans parents have all been rejected\n-            BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+            for (const CTxIn& txin : tx.vin) {\n                 if (recentRejects->contains(txin.prevout.hash)) {\n                     fRejectedParents = true;\n                     break;\n                 }\n             }\n             if (!fRejectedParents) {\n-                BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+                for (const CTxIn& txin : tx.vin) {\n                     CInv inv(MSG_TX, txin.prevout.hash);\n                     pfrom->AddInventoryKnown(inv);\n                     if (!AlreadyHave(inv)) pfrom->AskFor(inv);\n@@ -5830,7 +5830,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         }\n \n         CBlockIndex *pindexLast = NULL;\n-        BOOST_FOREACH(const CBlockHeader& header, headers) {\n+        for (const CBlockHeader& header : headers) {\n             CValidationState state;\n             if (pindexLast != NULL && header.hashPrevBlock != pindexLast->GetBlockHash()) {\n                 Misbehaving(pfrom->GetId(), 20);\n@@ -5889,7 +5889,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             } else {\n                 vector<CInv> vGetData;\n                 // Download as much as possible, from earliest to latest.\n-                BOOST_REVERSE_FOREACH(CBlockIndex *pindex, vToFetch) {\n+                for (CBlockIndex *pindex : boost::adaptors::reverse(vToFetch)) {\n                     if (nodestate->nBlocksInFlight >= MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n                         // Can't download any more from this peer\n                         break;\n@@ -5973,7 +5973,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         pfrom->vAddrToSend.clear();\n         vector<CAddress> vAddr = connman.GetAddresses();\n-        BOOST_FOREACH(const CAddress &addr, vAddr)\n+        for (const CAddress &addr : vAddr)\n             pfrom->PushAddress(addr);\n     }\n \n@@ -6384,7 +6384,7 @@ bool SendMessages(CNode* pto, CConnman& connman)\n             pto->nNextAddrSend = PoissonNextSend(nNow, AVG_ADDRESS_BROADCAST_INTERVAL);\n             vector<CAddress> vAddr;\n             vAddr.reserve(pto->vAddrToSend.size());\n-            BOOST_FOREACH(const CAddress& addr, pto->vAddrToSend)\n+            for (const CAddress& addr : pto->vAddrToSend)\n             {\n                 if (!pto->addrKnown.contains(addr.GetKey()))\n                 {\n@@ -6422,7 +6422,7 @@ bool SendMessages(CNode* pto, CConnman& connman)\n             state.fShouldBan = false;\n         }\n \n-        BOOST_FOREACH(const CBlockReject& reject, state.rejects)\n+        for (const CBlockReject& reject : state.rejects)\n             pto->PushMessage(NetMsgType::REJECT, (string)NetMsgType::BLOCK, reject.chRejectCode, reject.strRejectReason, reject.hashBlock);\n         state.rejects.clear();\n \n@@ -6482,7 +6482,7 @@ bool SendMessages(CNode* pto, CConnman& connman)\n                 // Try to find first header that our peer doesn't have, and\n                 // then send all headers past that one.  If we come across any\n                 // headers that aren't on chainActive, give up.\n-                BOOST_FOREACH(const uint256 &hash, pto->vBlockHashesToAnnounce) {\n+                for (const uint256 &hash : pto->vBlockHashesToAnnounce) {\n                     BlockMap::iterator mi = mapBlockIndex.find(hash);\n                     assert(mi != mapBlockIndex.end());\n                     CBlockIndex *pindex = mi->second;\n@@ -6590,7 +6590,7 @@ bool SendMessages(CNode* pto, CConnman& connman)\n             vInv.reserve(std::max<size_t>(pto->vInventoryBlockToSend.size(), INVENTORY_BROADCAST_MAX));\n \n             // Add blocks\n-            BOOST_FOREACH(const uint256& hash, pto->vInventoryBlockToSend) {\n+            for (const uint256& hash : pto->vInventoryBlockToSend) {\n                 vInv.push_back(CInv(MSG_BLOCK, hash));\n                 if (vInv.size() == MAX_INV_SZ) {\n                     pto->PushMessage(NetMsgType::INV, vInv);\n@@ -6746,7 +6746,7 @@ bool SendMessages(CNode* pto, CConnman& connman)\n             vector<CBlockIndex*> vToDownload;\n             NodeId staller = -1;\n             FindNextBlocksToDownload(pto->GetId(), MAX_BLOCKS_IN_TRANSIT_PER_PEER - state.nBlocksInFlight, vToDownload, staller, consensusParams);\n-            BOOST_FOREACH(CBlockIndex *pindex, vToDownload) {\n+            for (CBlockIndex *pindex : vToDownload) {\n                 uint32_t nFetchFlags = GetFetchFlags(pto, pindex->pprev, consensusParams);\n                 vGetData.push_back(CInv(MSG_BLOCK | nFetchFlags, pindex->GetBlockHash()));\n                 MarkBlockAsInFlight(pto->GetId(), pindex->GetBlockHash(), consensusParams, pindex);"
      },
      {
        "sha": "86bb91b2f60abf7e365f0503d335b7d1c53891f5",
        "filename": "src/memusage.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/memusage.h?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -13,7 +13,6 @@\n #include <set>\n #include <vector>\n \n-#include <boost/foreach.hpp>\n #include <boost/unordered_set.hpp>\n #include <boost/unordered_map.hpp>\n "
      },
      {
        "sha": "67e146c70f3fd584d42b703470eb9111704aa2c5",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -199,7 +199,7 @@ CBlockTemplate* BlockAssembler::CreateNewBlock(const CScript& scriptPubKeyIn)\n \n bool BlockAssembler::isStillDependent(CTxMemPool::txiter iter)\n {\n-    BOOST_FOREACH(CTxMemPool::txiter parent, mempool.GetMemPoolParents(iter))\n+    for (CTxMemPool::txiter parent : mempool.GetMemPoolParents(iter))\n     {\n         if (!inBlock.count(parent)) {\n             return true;\n@@ -239,7 +239,7 @@ bool BlockAssembler::TestPackage(uint64_t packageSize, int64_t packageSigOpsCost\n bool BlockAssembler::TestPackageTransactions(const CTxMemPool::setEntries& package)\n {\n     uint64_t nPotentialBlockSize = nBlockSize; // only used with fNeedSizeAccounting\n-    BOOST_FOREACH (const CTxMemPool::txiter it, package) {\n+    for (const CTxMemPool::txiter it : package) {\n         if (!IsFinalTx(it->GetTx(), nHeight, nLockTimeCutoff))\n             return false;\n         if (!fIncludeWitness && !it->GetTx().wit.IsNull())\n@@ -336,11 +336,11 @@ void BlockAssembler::AddToBlock(CTxMemPool::txiter iter)\n void BlockAssembler::UpdatePackagesForAdded(const CTxMemPool::setEntries& alreadyAdded,\n         indexed_modified_transaction_set &mapModifiedTx)\n {\n-    BOOST_FOREACH(const CTxMemPool::txiter it, alreadyAdded) {\n+    for (const CTxMemPool::txiter it : alreadyAdded) {\n         CTxMemPool::setEntries descendants;\n         mempool.CalculateDescendants(it, descendants);\n         // Insert all descendants (not yet in block) into the modified set\n-        BOOST_FOREACH(CTxMemPool::txiter desc, descendants) {\n+        for (CTxMemPool::txiter desc : descendants) {\n             if (alreadyAdded.count(desc))\n                 continue;\n             modtxiter mit = mapModifiedTx.find(desc);\n@@ -573,7 +573,7 @@ void BlockAssembler::addPriorityTxs()\n \n             // This tx was successfully added, so\n             // add transactions that depend on this one to the priority queue to try again\n-            BOOST_FOREACH(CTxMemPool::txiter child, mempool.GetMemPoolChildren(iter))\n+            for (CTxMemPool::txiter child : mempool.GetMemPoolChildren(iter))\n             {\n                 waitPriIter wpiter = waitPriMap.find(child);\n                 if (wpiter != waitPriMap.end()) {"
      },
      {
        "sha": "a88cd811707bb912cde0a3f2fe365edecda05e7d",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 34,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -290,7 +290,7 @@ bool IsReachable(const CNetAddr& addr)\n CNode* CConnman::FindNode(const CNetAddr& ip)\n {\n     LOCK(cs_vNodes);\n-    BOOST_FOREACH(CNode* pnode, vNodes)\n+    for (CNode* pnode : vNodes)\n         if ((CNetAddr)pnode->addr == ip)\n             return (pnode);\n     return NULL;\n@@ -299,7 +299,7 @@ CNode* CConnman::FindNode(const CNetAddr& ip)\n CNode* CConnman::FindNode(const CSubNet& subNet)\n {\n     LOCK(cs_vNodes);\n-    BOOST_FOREACH(CNode* pnode, vNodes)\n+    for (CNode* pnode : vNodes)\n     if (subNet.Match((CNetAddr)pnode->addr))\n         return (pnode);\n     return NULL;\n@@ -308,7 +308,7 @@ CNode* CConnman::FindNode(const CSubNet& subNet)\n CNode* CConnman::FindNode(const std::string& addrName)\n {\n     LOCK(cs_vNodes);\n-    BOOST_FOREACH(CNode* pnode, vNodes)\n+    for (CNode* pnode : vNodes)\n         if (pnode->addrName == addrName)\n             return (pnode);\n     return NULL;\n@@ -317,7 +317,7 @@ CNode* CConnman::FindNode(const std::string& addrName)\n CNode* CConnman::FindNode(const CService& addr)\n {\n     LOCK(cs_vNodes);\n-    BOOST_FOREACH(CNode* pnode, vNodes)\n+    for (CNode* pnode : vNodes)\n         if ((CService)pnode->addr == addr)\n             return (pnode);\n     return NULL;\n@@ -326,7 +326,7 @@ CNode* CConnman::FindNode(const CService& addr)\n bool CConnman::CheckIncomingNonce(uint64_t nonce)\n {\n     LOCK(cs_vNodes);\n-    BOOST_FOREACH(CNode* pnode, vNodes) {\n+    for (CNode* pnode : vNodes) {\n         if (!pnode->fSuccessfullyConnected && !pnode->fInbound && pnode->GetLocalNonce() == nonce)\n             return false;\n     }\n@@ -535,7 +535,7 @@ void CConnman::Ban(const CSubNet& subNet, const BanReason &banReason, int64_t ba\n         clientInterface->BannedListChanged();\n     {\n         LOCK(cs_vNodes);\n-        BOOST_FOREACH(CNode* pnode, vNodes) {\n+        for (CNode* pnode : vNodes) {\n             if (subNet.Match((CNetAddr)pnode->addr))\n                 pnode->fDisconnect = true;\n         }\n@@ -611,7 +611,7 @@ void CConnman::SetBannedSetDirty(bool dirty)\n \n bool CConnman::IsWhitelistedRange(const CNetAddr &addr) {\n     LOCK(cs_vWhitelistedRange);\n-    BOOST_FOREACH(const CSubNet& subnet, vWhitelistedRange) {\n+    for (const CSubNet& subnet : vWhitelistedRange) {\n         if (subnet.Match(addr))\n             return true;\n     }\n@@ -875,7 +875,7 @@ bool CConnman::AttemptToEvictConnection()\n     {\n         LOCK(cs_vNodes);\n \n-        BOOST_FOREACH(CNode *node, vNodes) {\n+        for (CNode *node : vNodes) {\n             if (node->fWhitelisted)\n                 continue;\n             if (!node->fInbound)\n@@ -934,7 +934,7 @@ bool CConnman::AttemptToEvictConnection()\n     unsigned int nMostConnections = 0;\n     int64_t nMostConnectionsTime = 0;\n     std::map<uint64_t, std::vector<NodeEvictionCandidate> > mapNetGroupNodes;\n-    BOOST_FOREACH(const NodeEvictionCandidate &node, vEvictionCandidates) {\n+    for (const NodeEvictionCandidate &node : vEvictionCandidates) {\n         mapNetGroupNodes[node.nKeyedNetGroup].push_back(node);\n         int64_t grouptime = mapNetGroupNodes[node.nKeyedNetGroup][0].nTimeConnected;\n         size_t groupsize = mapNetGroupNodes[node.nKeyedNetGroup].size();\n@@ -977,7 +977,7 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     bool whitelisted = hListenSocket.whitelisted || IsWhitelistedRange(addr);\n     {\n         LOCK(cs_vNodes);\n-        BOOST_FOREACH(CNode* pnode, vNodes)\n+        for (CNode* pnode : vNodes)\n             if (pnode->fInbound)\n                 nInbound++;\n     }\n@@ -1048,7 +1048,7 @@ void CConnman::ThreadSocketHandler()\n             LOCK(cs_vNodes);\n             // Disconnect unused nodes\n             std::vector<CNode*> vNodesCopy = vNodes;\n-            BOOST_FOREACH(CNode* pnode, vNodesCopy)\n+            for (CNode* pnode : vNodesCopy)\n             {\n                 if (pnode->fDisconnect ||\n                     (pnode->GetRefCount() <= 0 && pnode->vRecvMsg.empty() && pnode->nSendSize == 0 && pnode->ssSend.empty()))\n@@ -1072,7 +1072,7 @@ void CConnman::ThreadSocketHandler()\n         {\n             // Delete disconnected nodes\n             std::list<CNode*> vNodesDisconnectedCopy = vNodesDisconnected;\n-            BOOST_FOREACH(CNode* pnode, vNodesDisconnectedCopy)\n+            for (CNode* pnode : vNodesDisconnectedCopy)\n             {\n                 // wait until threads are done using it\n                 if (pnode->GetRefCount() <= 0)\n@@ -1121,15 +1121,15 @@ void CConnman::ThreadSocketHandler()\n         SOCKET hSocketMax = 0;\n         bool have_fds = false;\n \n-        BOOST_FOREACH(const ListenSocket& hListenSocket, vhListenSocket) {\n+        for (const ListenSocket& hListenSocket : vhListenSocket) {\n             FD_SET(hListenSocket.socket, &fdsetRecv);\n             hSocketMax = std::max(hSocketMax, hListenSocket.socket);\n             have_fds = true;\n         }\n \n         {\n             LOCK(cs_vNodes);\n-            BOOST_FOREACH(CNode* pnode, vNodes)\n+            for (CNode* pnode : vNodes)\n             {\n                 if (pnode->hSocket == INVALID_SOCKET)\n                     continue;\n@@ -1196,7 +1196,7 @@ void CConnman::ThreadSocketHandler()\n         //\n         // Accept new connections\n         //\n-        BOOST_FOREACH(const ListenSocket& hListenSocket, vhListenSocket)\n+        for (const ListenSocket& hListenSocket : vhListenSocket)\n         {\n             if (hListenSocket.socket != INVALID_SOCKET && FD_ISSET(hListenSocket.socket, &fdsetRecv))\n             {\n@@ -1211,10 +1211,10 @@ void CConnman::ThreadSocketHandler()\n         {\n             LOCK(cs_vNodes);\n             vNodesCopy = vNodes;\n-            BOOST_FOREACH(CNode* pnode, vNodesCopy)\n+            for (CNode* pnode : vNodesCopy)\n                 pnode->AddRef();\n         }\n-        BOOST_FOREACH(CNode* pnode, vNodesCopy)\n+        for (CNode* pnode : vNodesCopy)\n         {\n             boost::this_thread::interruption_point();\n \n@@ -1310,7 +1310,7 @@ void CConnman::ThreadSocketHandler()\n         }\n         {\n             LOCK(cs_vNodes);\n-            BOOST_FOREACH(CNode* pnode, vNodesCopy)\n+            for (CNode* pnode : vNodesCopy)\n                 pnode->Release();\n         }\n     }\n@@ -1476,7 +1476,7 @@ void CConnman::ThreadDNSAddressSeed()\n \n     LogPrintf(\"Loading addresses from DNS seeds (could take a while)\\n\");\n \n-    BOOST_FOREACH(const CDNSSeedData &seed, vSeeds) {\n+    for (const CDNSSeedData &seed : vSeeds) {\n         if (HaveNameProxy()) {\n             AddOneShot(seed.host);\n         } else {\n@@ -1485,7 +1485,7 @@ void CConnman::ThreadDNSAddressSeed()\n             ServiceFlags requiredServiceBits = nRelevantServices;\n             if (LookupHost(GetDNSHost(seed, &requiredServiceBits).c_str(), vIPs, 0, true))\n             {\n-                BOOST_FOREACH(const CNetAddr& ip, vIPs)\n+                for (const CNetAddr& ip : vIPs)\n                 {\n                     int nOneDay = 24*3600;\n                     CAddress addr = CAddress(CService(ip, Params().GetDefaultPort()), requiredServiceBits);\n@@ -1563,7 +1563,7 @@ void CConnman::ThreadOpenConnections()\n         for (int64_t nLoop = 0;; nLoop++)\n         {\n             ProcessOneShot();\n-            BOOST_FOREACH(const std::string& strAddr, mapMultiArgs[\"-connect\"])\n+            for (const std::string& strAddr : mapMultiArgs[\"-connect\"])\n             {\n                 CAddress addr(CService(), NODE_NONE);\n                 OpenNetworkConnection(addr, false, NULL, strAddr.c_str());\n@@ -1613,7 +1613,7 @@ void CConnman::ThreadOpenConnections()\n         std::set<std::vector<unsigned char> > setConnected;\n         {\n             LOCK(cs_vNodes);\n-            BOOST_FOREACH(CNode* pnode, vNodes) {\n+            for (CNode* pnode : vNodes) {\n                 if (!pnode->fInbound) {\n                     setConnected.insert(pnode->addr.GetGroup());\n                     nOutbound++;\n@@ -1707,7 +1707,7 @@ std::vector<AddedNodeInfo> CConnman::GetAddedNodeInfo()\n     {\n         LOCK(cs_vAddedNodes);\n         ret.reserve(vAddedNodes.size());\n-        BOOST_FOREACH(const std::string& strAddNode, vAddedNodes)\n+        for (const std::string& strAddNode : vAddedNodes)\n             lAddresses.push_back(strAddNode);\n     }\n \n@@ -1727,7 +1727,7 @@ std::vector<AddedNodeInfo> CConnman::GetAddedNodeInfo()\n         }\n     }\n \n-    BOOST_FOREACH(const std::string& strAddNode, lAddresses) {\n+    for (const std::string& strAddNode : lAddresses) {\n         CService service(LookupNumeric(strAddNode.c_str(), Params().GetDefaultPort()));\n         if (service.IsValid()) {\n             // strAddNode is an IP:port\n@@ -1819,14 +1819,14 @@ void CConnman::ThreadMessageHandler()\n         {\n             LOCK(cs_vNodes);\n             vNodesCopy = vNodes;\n-            BOOST_FOREACH(CNode* pnode, vNodesCopy) {\n+            for (CNode* pnode : vNodesCopy) {\n                 pnode->AddRef();\n             }\n         }\n \n         bool fSleep = true;\n \n-        BOOST_FOREACH(CNode* pnode, vNodesCopy)\n+        for (CNode* pnode : vNodesCopy)\n         {\n             if (pnode->fDisconnect)\n                 continue;\n@@ -1861,7 +1861,7 @@ void CConnman::ThreadMessageHandler()\n \n         {\n             LOCK(cs_vNodes);\n-            BOOST_FOREACH(CNode* pnode, vNodesCopy)\n+            for (CNode* pnode : vNodesCopy)\n                 pnode->Release();\n         }\n \n@@ -1986,7 +1986,7 @@ void Discover(boost::thread_group& threadGroup)\n         std::vector<CNetAddr> vaddr;\n         if (LookupHost(pszHostName, vaddr, 0, true))\n         {\n-            BOOST_FOREACH (const CNetAddr &addr, vaddr)\n+            for (const CNetAddr &addr : vaddr)\n             {\n                 if (AddLocal(addr, LOCAL_IF))\n                     LogPrintf(\"%s: %s - %s\\n\", __func__, pszHostName, addr.ToString());\n@@ -2170,19 +2170,19 @@ void CConnman::Stop()\n     }\n \n     // Close sockets\n-    BOOST_FOREACH(CNode* pnode, vNodes)\n+    for (CNode* pnode : vNodes)\n         if (pnode->hSocket != INVALID_SOCKET)\n             CloseSocket(pnode->hSocket);\n-    BOOST_FOREACH(ListenSocket& hListenSocket, vhListenSocket)\n+    for (ListenSocket& hListenSocket : vhListenSocket)\n         if (hListenSocket.socket != INVALID_SOCKET)\n             if (!CloseSocket(hListenSocket.socket))\n                 LogPrintf(\"CloseSocket(hListenSocket) failed with error %s\\n\", NetworkErrorString(WSAGetLastError()));\n \n     // clean up some globals (to help leak detection)\n-    BOOST_FOREACH(CNode *pnode, vNodes) {\n+    for (CNode *pnode : vNodes) {\n         DeleteNode(pnode);\n     }\n-    BOOST_FOREACH(CNode *pnode, vNodesDisconnected) {\n+    for (CNode *pnode : vNodesDisconnected) {\n         DeleteNode(pnode);\n     }\n     vNodes.clear();\n@@ -2333,7 +2333,7 @@ void CConnman::RelayTransaction(const CTransaction& tx)\n {\n     CInv inv(MSG_TX, tx.GetHash());\n     LOCK(cs_vNodes);\n-    BOOST_FOREACH(CNode* pnode, vNodes)\n+    for (CNode* pnode : vNodes)\n     {\n         pnode->PushInventory(inv);\n     }\n@@ -2560,7 +2560,7 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     GetRandBytes((unsigned char*)&nLocalHostNonce, sizeof(nLocalHostNonce));\n     nMyStartingHeight = nMyStartingHeightIn;\n \n-    BOOST_FOREACH(const std::string &msg, getAllNetMessageTypes())\n+    for (const std::string &msg : getAllNetMessageTypes())\n         mapRecvBytesPerMsgCmd[msg] = 0;\n     mapRecvBytesPerMsgCmd[NET_MESSAGE_COMMAND_OTHER] = 0;\n "
      },
      {
        "sha": "068d599070b762f5b0ad10c6226500718366ffea",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -30,7 +30,6 @@\n #endif\n \n #include <boost/filesystem/path.hpp>\n-#include <boost/foreach.hpp>\n #include <boost/signals2/signal.hpp>\n \n class CAddrMan;\n@@ -699,7 +698,7 @@ class CNode\n     unsigned int GetTotalRecvSize()\n     {\n         unsigned int total = 0;\n-        BOOST_FOREACH(const CNetMessage &msg, vRecvMsg)\n+        for (const CNetMessage &msg : vRecvMsg)\n             total += msg.vRecv.size() + 24;\n         return total;\n     }\n@@ -711,7 +710,7 @@ class CNode\n     void SetRecvVersion(int nVersionIn)\n     {\n         nRecvVersion = nVersionIn;\n-        BOOST_FOREACH(CNetMessage &msg, vRecvMsg)\n+        for (CNetMessage &msg : vRecvMsg)\n             msg.SetVersion(nVersionIn);\n     }\n "
      },
      {
        "sha": "d2ddc15f698371c3af639b9378e016a0bd49d71d",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -12,7 +12,6 @@\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n \n-#include <boost/foreach.hpp>\n \n     /**\n      * Check transaction inputs to mitigate two\n@@ -73,7 +72,7 @@ bool IsStandardTx(const CTransaction& tx, std::string& reason, const bool witnes\n         return false;\n     }\n \n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    for (const CTxIn& txin : tx.vin)\n     {\n         // Biggest 'standard' txin is a 15-of-15 P2SH multisig with compressed\n         // keys (remember the 520 byte limit on redeemScript size). That works\n@@ -94,7 +93,7 @@ bool IsStandardTx(const CTransaction& tx, std::string& reason, const bool witnes\n \n     unsigned int nDataOut = 0;\n     txnouttype whichType;\n-    BOOST_FOREACH(const CTxOut& txout, tx.vout) {\n+    for (const CTxOut& txout : tx.vout) {\n         if (!::IsStandard(txout.scriptPubKey, whichType, witnessEnabled)) {\n             reason = \"scriptpubkey\";\n             return false;"
      },
      {
        "sha": "177b0d959b04897397d9cb87ead93dc94569d667",
        "filename": "src/policy/rbf.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/policy/rbf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/policy/rbf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -6,7 +6,7 @@\n \n bool SignalsOptInRBF(const CTransaction &tx)\n {\n-    BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n+    for (const CTxIn &txin : tx.vin) {\n         if (txin.nSequence < std::numeric_limits<unsigned int>::max()-1) {\n             return true;\n         }\n@@ -38,7 +38,7 @@ RBFTransactionState IsRBFOptIn(const CTransaction &tx, CTxMemPool &pool)\n     CTxMemPoolEntry entry = *pool.mapTx.find(tx.GetHash());\n     pool.CalculateMemPoolAncestors(entry, setAncestors, noLimit, noLimit, noLimit, noLimit, dummy, false);\n \n-    BOOST_FOREACH(CTxMemPool::txiter it, setAncestors) {\n+    for (CTxMemPool::txiter it : setAncestors) {\n         if (SignalsOptInRBF(it->GetTx())) {\n             return RBF_TRANSACTIONSTATE_REPLACEABLE_BIP125;\n         }"
      },
      {
        "sha": "98631d91789cfa4b8335f7edb94c149d17d174dc",
        "filename": "src/prevector.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/prevector.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/prevector.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/prevector.h?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -49,6 +49,7 @@ class prevector {\n         typedef T* pointer;\n         typedef T& reference;\n         typedef std::random_access_iterator_tag iterator_category;\n+        iterator() : ptr(nullptr) {}\n         iterator(T* ptr_) : ptr(ptr_) {}\n         T& operator*() const { return *ptr; }\n         T* operator->() const { return ptr; }\n@@ -79,6 +80,7 @@ class prevector {\n         typedef T* pointer;\n         typedef T& reference;\n         typedef std::bidirectional_iterator_tag iterator_category;\n+        reverse_iterator() : ptr(nullptr) {}\n         reverse_iterator(T* ptr_) : ptr(ptr_) {}\n         T& operator*() { return *ptr; }\n         const T& operator*() const { return *ptr; }\n@@ -100,6 +102,7 @@ class prevector {\n         typedef const T* pointer;\n         typedef const T& reference;\n         typedef std::random_access_iterator_tag iterator_category;\n+        const_iterator() : ptr(nullptr) {}\n         const_iterator(const T* ptr_) : ptr(ptr_) {}\n         const_iterator(iterator x) : ptr(&(*x)) {}\n         const T& operator*() const { return *ptr; }\n@@ -130,6 +133,7 @@ class prevector {\n         typedef const T* pointer;\n         typedef const T& reference;\n         typedef std::bidirectional_iterator_tag iterator_category;\n+        const_reverse_iterator() : ptr(nullptr) {}\n         const_reverse_iterator(T* ptr_) : ptr(ptr_) {}\n         const_reverse_iterator(reverse_iterator x) : ptr(&(*x)) {}\n         const T& operator*() const { return *ptr; }"
      },
      {
        "sha": "13821dc6b43a4b10153407bbe2b7c23972a93706",
        "filename": "src/qt/addressbookpage.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/qt/addressbookpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/qt/addressbookpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -254,7 +254,7 @@ void AddressBookPage::done(int retval)\n     // Figure out which address was selected, and return it\n     QModelIndexList indexes = table->selectionModel()->selectedRows(AddressTableModel::Address);\n \n-    Q_FOREACH (const QModelIndex& index, indexes) {\n+    for (const QModelIndex& index : indexes) {\n         QVariant address = table->model()->data(index);\n         returnValue = address.toString();\n     }"
      },
      {
        "sha": "484c4e380d14eeba94dcf961f50aec0e9c7996f7",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -10,7 +10,6 @@\n #include \"base58.h\"\n #include \"wallet/wallet.h\"\n \n-#include <boost/foreach.hpp>\n \n #include <QFont>\n #include <QDebug>\n@@ -81,7 +80,7 @@ class AddressTablePriv\n         cachedAddressTable.clear();\n         {\n             LOCK(wallet->cs_wallet);\n-            BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& item, wallet->mapAddressBook)\n+            for (const std::pair<CTxDestination, CAddressBookData>& item : wallet->mapAddressBook)\n             {\n                 const CBitcoinAddress& address = item.first;\n                 bool fMine = IsMine(*wallet, address.Get());"
      },
      {
        "sha": "7d1c0f189e8a11cf81a8ad90e8183928efa5ff3d",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -956,7 +956,7 @@ void BitcoinGUI::dropEvent(QDropEvent *event)\n {\n     if(event->mimeData()->hasUrls())\n     {\n-        Q_FOREACH(const QUrl &uri, event->mimeData()->urls())\n+        for (const QUrl &uri : event->mimeData()->urls())\n         {\n             Q_EMIT receivedURI(uri.toString());\n         }\n@@ -1139,7 +1139,7 @@ UnitDisplayStatusBarControl::UnitDisplayStatusBarControl(const PlatformStyle *pl\n     QList<BitcoinUnits::Unit> units = BitcoinUnits::availableUnits();\n     int max_width = 0;\n     const QFontMetrics fm(font());\n-    Q_FOREACH (const BitcoinUnits::Unit unit, units)\n+    for (const BitcoinUnits::Unit unit : units)\n     {\n         max_width = qMax(max_width, fm.width(BitcoinUnits::name(unit)));\n     }\n@@ -1158,7 +1158,7 @@ void UnitDisplayStatusBarControl::mousePressEvent(QMouseEvent *event)\n void UnitDisplayStatusBarControl::createContextMenu()\n {\n     menu = new QMenu();\n-    Q_FOREACH(BitcoinUnits::Unit u, BitcoinUnits::availableUnits())\n+    for (BitcoinUnits::Unit u : BitcoinUnits::availableUnits())\n     {\n         QAction *menuAction = new QAction(QString(BitcoinUnits::name(u)), this);\n         menuAction->setData(QVariant(u));"
      },
      {
        "sha": "508c20907b6c947eb0902fd91eab2ea570ebe075",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -430,7 +430,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     CAmount nPayAmount = 0;\n     bool fDust = false;\n     CMutableTransaction txDummy;\n-    Q_FOREACH(const CAmount &amount, CoinControlDialog::payAmounts)\n+    for (const CAmount &amount : CoinControlDialog::payAmounts)\n     {\n         nPayAmount += amount;\n \n@@ -461,7 +461,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     coinControl->ListSelected(vCoinControl);\n     model->getOutputs(vCoinControl, vOutputs);\n \n-    BOOST_FOREACH(const COutput& out, vOutputs) {\n+    for (const COutput& out : vOutputs) {\n         // unselect already spent, very unlikely scenario, this could happen\n         // when selected are spent elsewhere, like rpc or another computer\n         uint256 txhash = out.tx->GetHash();\n@@ -657,7 +657,7 @@ void CoinControlDialog::updateView()\n     std::map<QString, std::vector<COutput> > mapCoins;\n     model->listCoins(mapCoins);\n \n-    BOOST_FOREACH(const PAIRTYPE(QString, std::vector<COutput>)& coins, mapCoins) {\n+    for (const std::pair<QString, std::vector<COutput>>& coins : mapCoins) {\n         QTreeWidgetItem *itemWalletAddress = new QTreeWidgetItem();\n         itemWalletAddress->setCheckState(COLUMN_CHECKBOX, Qt::Unchecked);\n         QString sWalletAddress = coins.first;\n@@ -682,7 +682,7 @@ void CoinControlDialog::updateView()\n \n         CAmount nSum = 0;\n         int nChildren = 0;\n-        BOOST_FOREACH(const COutput& out, coins.second) {\n+        for (const COutput& out : coins.second) {\n             nSum += out.tx->vout[out.i].nValue;\n             nChildren++;\n "
      },
      {
        "sha": "a012ed2443bc2411d3e7604452923237f27e8864",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -84,7 +84,7 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n \n     ui->lang->setToolTip(ui->lang->toolTip().arg(tr(PACKAGE_NAME)));\n     ui->lang->addItem(QString(\"(\") + tr(\"default\") + QString(\")\"), QVariant(\"\"));\n-    Q_FOREACH(const QString &langStr, translations.entryList())\n+    for (const QString &langStr : translations.entryList())\n     {\n         QLocale locale(langStr);\n "
      },
      {
        "sha": "15697ee56113e12c02be1c23f668a2bfbaf198a1",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -146,7 +146,7 @@ void PaymentServer::LoadRootCAs(X509_STORE* _store)\n     int nRootCerts = 0;\n     const QDateTime currentTime = QDateTime::currentDateTime();\n \n-    Q_FOREACH (const QSslCertificate& cert, certList) {\n+    for (const QSslCertificate& cert : certList) {\n         // Don't log NULL certificates\n         if (cert.isNull())\n             continue;\n@@ -267,7 +267,7 @@ void PaymentServer::ipcParseCommandLine(int argc, char* argv[])\n bool PaymentServer::ipcSendCommandLine()\n {\n     bool fResult = false;\n-    Q_FOREACH (const QString& r, savedPaymentRequests)\n+    for (const QString& r : savedPaymentRequests)\n     {\n         QLocalSocket* socket = new QLocalSocket();\n         socket->connectToServer(ipcServerName(), QIODevice::WriteOnly);\n@@ -392,7 +392,7 @@ void PaymentServer::uiReady()\n     initNetManager();\n \n     saveURIs = false;\n-    Q_FOREACH (const QString& s, savedPaymentRequests)\n+    for (const QString& s : savedPaymentRequests)\n     {\n         handleURIOrFile(s);\n     }\n@@ -555,7 +555,7 @@ bool PaymentServer::processPaymentRequest(const PaymentRequestPlus& request, Sen\n     QList<std::pair<CScript, CAmount> > sendingTos = request.getPayTo();\n     QStringList addresses;\n \n-    Q_FOREACH(const PAIRTYPE(CScript, CAmount)& sendingTo, sendingTos) {\n+    for (const std::pair<CScript, CAmount>& sendingTo : sendingTos) {\n         // Extract and check destination addresses\n         CTxDestination dest;\n         if (ExtractDestination(sendingTo.first, dest)) {\n@@ -742,7 +742,7 @@ void PaymentServer::reportSslErrors(QNetworkReply* reply, const QList<QSslError>\n     Q_UNUSED(reply);\n \n     QString errString;\n-    Q_FOREACH (const QSslError& err, errs) {\n+    for (const QSslError& err : errs) {\n         qWarning() << \"PaymentServer::reportSslErrors: \" << err;\n         errString += err.errorString() + \"\\n\";\n     }"
      },
      {
        "sha": "39964a868b246bd54c9e10ed952a6ded75b36eec",
        "filename": "src/qt/peertablemodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/qt/peertablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/qt/peertablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -61,7 +61,7 @@ class PeerTablePriv\n #if QT_VERSION >= 0x040700\n             cachedNodeStats.reserve(vstats.size());\n #endif\n-            Q_FOREACH (const CNodeStats& nodestats, vstats)\n+            for (const CNodeStats& nodestats : vstats)\n             {\n                 CNodeCombinedStats stats;\n                 stats.nodeStateStats.nMisbehavior = 0;\n@@ -78,7 +78,7 @@ class PeerTablePriv\n             TRY_LOCK(cs_main, lockMain);\n             if (lockMain)\n             {\n-                BOOST_FOREACH(CNodeCombinedStats &stats, cachedNodeStats)\n+                for (CNodeCombinedStats &stats : cachedNodeStats)\n                     stats.fNodeStateStatsAvailable = GetNodeStateStats(stats.nodeStats.nodeid, stats.nodeStateStats);\n             }\n         }\n@@ -90,7 +90,7 @@ class PeerTablePriv\n         // build index map\n         mapNodeRows.clear();\n         int row = 0;\n-        Q_FOREACH (const CNodeCombinedStats& stats, cachedNodeStats)\n+        for (const CNodeCombinedStats& stats : cachedNodeStats)\n             mapNodeRows.insert(std::pair<NodeId, int>(stats.nodeStats.nodeid, row++));\n     }\n "
      },
      {
        "sha": "72dfb02c0b6b2d422ef6144b56ff178f9dd94ba8",
        "filename": "src/qt/platformstyle.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/qt/platformstyle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/qt/platformstyle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/platformstyle.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -48,8 +48,7 @@ void MakeSingleColorImage(QImage& img, const QColor& colorbase)\n QIcon ColorizeIcon(const QIcon& ico, const QColor& colorbase)\n {\n     QIcon new_ico;\n-    QSize sz;\n-    Q_FOREACH(sz, ico.availableSizes())\n+    for (QSize sz : ico.availableSizes())\n     {\n         QImage img(ico.pixmap(sz).toImage());\n         MakeSingleColorImage(img, colorbase);\n@@ -144,4 +143,3 @@ const PlatformStyle *PlatformStyle::instantiate(const QString &platformId)\n     }\n     return 0;\n }\n-"
      },
      {
        "sha": "049e2008cfec85088577300b2a14fb0dd63c2e37",
        "filename": "src/qt/receivecoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/qt/receivecoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/qt/receivecoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -187,7 +187,7 @@ void ReceiveCoinsDialog::on_showRequestButton_clicked()\n         return;\n     QModelIndexList selection = ui->recentRequestsView->selectionModel()->selectedRows();\n \n-    Q_FOREACH (const QModelIndex& index, selection) {\n+    for (const QModelIndex& index : selection) {\n         on_recentRequestsView_doubleClicked(index);\n     }\n }"
      },
      {
        "sha": "b0c7552e3bfbb71c418de3d0f236b95e8d9b0217",
        "filename": "src/qt/recentrequeststablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/qt/recentrequeststablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/qt/recentrequeststablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -11,7 +11,6 @@\n #include \"clientversion.h\"\n #include \"streams.h\"\n \n-#include <boost/foreach.hpp>\n \n RecentRequestsTableModel::RecentRequestsTableModel(CWallet *wallet, WalletModel *parent) :\n     walletModel(parent)\n@@ -22,7 +21,7 @@ RecentRequestsTableModel::RecentRequestsTableModel(CWallet *wallet, WalletModel\n     // Load entries from wallet\n     std::vector<std::string> vReceiveRequests;\n     parent->loadReceiveRequests(vReceiveRequests);\n-    BOOST_FOREACH(const std::string& request, vReceiveRequests)\n+    for (const std::string& request : vReceiveRequests)\n         addNewRequest(request);\n \n     /* These columns must match the indices in the ColumnIndex enumeration */"
      },
      {
        "sha": "38c85a4297fccc4dadcbd1b349dd272c047162ac",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -247,7 +247,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n \n     // Format confirmation message\n     QStringList formatted;\n-    Q_FOREACH(const SendCoinsRecipient &rcp, currentTransaction.getRecipients())\n+    for (const SendCoinsRecipient &rcp : currentTransaction.getRecipients())\n     {\n         // generate bold amount string\n         QString amount = \"<b>\" + BitcoinUnits::formatHtmlWithUnit(model->getOptionsModel()->getDisplayUnit(), rcp.amount);\n@@ -301,7 +301,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n     questionString.append(\"<hr />\");\n     CAmount totalAmount = currentTransaction.getTotalTransactionAmount() + txFee;\n     QStringList alternativeUnits;\n-    Q_FOREACH(BitcoinUnits::Unit u, BitcoinUnits::availableUnits())\n+    for (BitcoinUnits::Unit u : BitcoinUnits::availableUnits())\n     {\n         if(u != model->getOptionsModel()->getDisplayUnit())\n             alternativeUnits.append(BitcoinUnits::formatHtmlWithUnit(u, totalAmount));"
      },
      {
        "sha": "c0b93e8231be8b86df6428ff2f2444af77e169ee",
        "filename": "src/qt/test/paymentservertests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/qt/test/paymentservertests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/qt/test/paymentservertests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -196,7 +196,7 @@ void PaymentServerTests::paymentServerTests()\n     QVERIFY(r.paymentRequest.IsInitialized());\n     // Extract address and amount from the request\n     QList<std::pair<CScript, CAmount> > sendingTos = r.paymentRequest.getPayTo();\n-    Q_FOREACH (const PAIRTYPE(CScript, CAmount)& sendingTo, sendingTos) {\n+    for (const std::pair<CScript, CAmount>& sendingTo : sendingTos) {\n         CTxDestination dest;\n         if (ExtractDestination(sendingTo.first, dest))\n             QCOMPARE(PaymentServer::verifyAmount(sendingTo.second), false);"
      },
      {
        "sha": "afd295c13b52130b41fc04f591ffd2912d359bf5",
        "filename": "src/qt/trafficgraphwidget.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/qt/trafficgraphwidget.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/qt/trafficgraphwidget.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/trafficgraphwidget.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -139,10 +139,10 @@ void TrafficGraphWidget::updateRates()\n     }\n \n     float tmax = 0.0f;\n-    Q_FOREACH(float f, vSamplesIn) {\n+    for (float f : vSamplesIn) {\n         if(f > tmax) tmax = f;\n     }\n-    Q_FOREACH(float f, vSamplesOut) {\n+    for (float f : vSamplesOut) {\n         if(f > tmax) tmax = f;\n     }\n     fMax = tmax;"
      },
      {
        "sha": "08ae4e07a788ff80b9647ead536bf70e3eff54f2",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -133,7 +133,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n         // Coinbase\n         //\n         CAmount nUnmatured = 0;\n-        BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n+        for (const CTxOut& txout : wtx.vout)\n             nUnmatured += wallet->GetCredit(txout, ISMINE_ALL);\n         strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \";\n         if (wtx.IsInMainChain())\n@@ -152,14 +152,14 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n     else\n     {\n         isminetype fAllFromMe = ISMINE_SPENDABLE;\n-        BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n+        for (const CTxIn& txin : wtx.vin)\n         {\n             isminetype mine = wallet->IsMine(txin);\n             if(fAllFromMe > mine) fAllFromMe = mine;\n         }\n \n         isminetype fAllToMe = ISMINE_SPENDABLE;\n-        BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n+        for (const CTxOut& txout : wtx.vout)\n         {\n             isminetype mine = wallet->IsMine(txout);\n             if(fAllToMe > mine) fAllToMe = mine;\n@@ -173,7 +173,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n             //\n             // Debit\n             //\n-            BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n+            for (const CTxOut& txout : wtx.vout)\n             {\n                 // Ignore change\n                 isminetype toSelf = wallet->IsMine(txout);\n@@ -221,10 +221,10 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n             //\n             // Mixed debit transaction\n             //\n-            BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n+            for (const CTxIn& txin : wtx.vin)\n                 if (wallet->IsMine(txin))\n                     strHTML += \"<b>\" + tr(\"Debit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, -wallet->GetDebit(txin, ISMINE_ALL)) + \"<br>\";\n-            BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n+            for (const CTxOut& txout : wtx.vout)\n                 if (wallet->IsMine(txout))\n                     strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, wallet->GetCredit(txout, ISMINE_ALL)) + \"<br>\";\n         }\n@@ -245,14 +245,14 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n     strHTML += \"<b>\" + tr(\"Output index\") + \":</b> \" + QString::number(rec->getOutputIndex()) + \"<br>\";\n \n     // Message from normal bitcoin:URI (bitcoin:123...?message=example)\n-    Q_FOREACH (const PAIRTYPE(std::string, std::string)& r, wtx.vOrderForm)\n+    for (const std::pair<std::string, std::string>& r : wtx.vOrderForm)\n         if (r.first == \"Message\")\n             strHTML += \"<br><b>\" + tr(\"Message\") + \":</b><br>\" + GUIUtil::HtmlEscape(r.second, true) + \"<br>\";\n \n     //\n     // PaymentRequest info:\n     //\n-    Q_FOREACH (const PAIRTYPE(std::string, std::string)& r, wtx.vOrderForm)\n+    for (const std::pair<std::string, std::string>& r : wtx.vOrderForm)\n     {\n         if (r.first == \"PaymentRequest\")\n         {\n@@ -276,10 +276,10 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n     if (fDebug)\n     {\n         strHTML += \"<hr><br>\" + tr(\"Debug information\") + \"<br><br>\";\n-        BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n+        for (const CTxIn& txin : wtx.vin)\n             if(wallet->IsMine(txin))\n                 strHTML += \"<b>\" + tr(\"Debit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, -wallet->GetDebit(txin, ISMINE_ALL)) + \"<br>\";\n-        BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n+        for (const CTxOut& txout : wtx.vout)\n             if(wallet->IsMine(txout))\n                 strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, wallet->GetCredit(txout, ISMINE_ALL)) + \"<br>\";\n \n@@ -289,7 +289,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n         strHTML += \"<br><b>\" + tr(\"Inputs\") + \":</b>\";\n         strHTML += \"<ul>\";\n \n-        BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n+        for (const CTxIn& txin : wtx.vin)\n         {\n             COutPoint prevout = txin.prevout;\n "
      },
      {
        "sha": "7f94fc0d077dd2c9d27b184a6d5ad66668555651",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -12,7 +12,6 @@\n \n #include <stdint.h>\n \n-#include <boost/foreach.hpp>\n \n /* Return positive answer if transaction should be shown in list.\n  */\n@@ -47,7 +46,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n         //\n         // Credit\n         //\n-        BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n+        for (const CTxOut& txout : wtx.vout)\n         {\n             isminetype mine = wallet->IsMine(txout);\n             if(mine)\n@@ -83,15 +82,15 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n     {\n         bool involvesWatchAddress = false;\n         isminetype fAllFromMe = ISMINE_SPENDABLE;\n-        BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n+        for (const CTxIn& txin : wtx.vin)\n         {\n             isminetype mine = wallet->IsMine(txin);\n             if(mine & ISMINE_WATCH_ONLY) involvesWatchAddress = true;\n             if(fAllFromMe > mine) fAllFromMe = mine;\n         }\n \n         isminetype fAllToMe = ISMINE_SPENDABLE;\n-        BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n+        for (const CTxOut& txout : wtx.vout)\n         {\n             isminetype mine = wallet->IsMine(txout);\n             if(mine & ISMINE_WATCH_ONLY) involvesWatchAddress = true;"
      },
      {
        "sha": "f0d1d4878ffb58ba1dfd5cb645f0622266c82089",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -26,7 +26,6 @@\n #include <QIcon>\n #include <QList>\n \n-#include <boost/foreach.hpp>\n \n // Amount column is right-aligned it contains numbers\n static int column_alignments[] = {\n@@ -145,7 +144,7 @@ class TransactionTablePriv\n                 {\n                     parent->beginInsertRows(QModelIndex(), lowerIndex, lowerIndex+toInsert.size()-1);\n                     int insert_idx = lowerIndex;\n-                    Q_FOREACH(const TransactionRecord &rec, toInsert)\n+                    for (const TransactionRecord &rec : toInsert)\n                     {\n                         cachedWallet.insert(insert_idx, rec);\n                         insert_idx += 1;"
      },
      {
        "sha": "62cd7ecd5bf66f39273b445972199017219f39a2",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -106,7 +106,7 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n         QTextCharFormat bold;\n         bold.setFontWeight(QFont::Bold);\n \n-        Q_FOREACH (const QString &line, coreOptions.split(\"\\n\")) {\n+        for (const QString &line : coreOptions.split(\"\\n\")) {\n             if (line.startsWith(\"  -\"))\n             {\n                 cursor.currentTable()->appendRows(1);"
      },
      {
        "sha": "6ae88be84be48575fb06ab5b97a6622a6bf2a3c4",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 10,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -25,7 +25,6 @@\n #include <QSet>\n #include <QTimer>\n \n-#include <boost/foreach.hpp>\n \n WalletModel::WalletModel(const PlatformStyle *platformStyle, CWallet *wallet, OptionsModel *optionsModel, QObject *parent) :\n     QObject(parent), wallet(wallet), optionsModel(optionsModel), addressTableModel(0),\n@@ -62,7 +61,7 @@ CAmount WalletModel::getBalance(const CCoinControl *coinControl) const\n         CAmount nBalance = 0;\n         std::vector<COutput> vCoins;\n         wallet->AvailableCoins(vCoins, true, coinControl);\n-        BOOST_FOREACH(const COutput& out, vCoins)\n+        for (const COutput& out : vCoins)\n             if(out.fSpendable)\n                 nBalance += out.tx->vout[out.i].nValue;\n \n@@ -205,7 +204,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n     int nAddresses = 0;\n \n     // Pre-check input data for validity\n-    Q_FOREACH(const SendCoinsRecipient &rcp, recipients)\n+    for (const SendCoinsRecipient &rcp : recipients)\n     {\n         if (rcp.fSubtractFeeFromAmount)\n             fSubtractFeeFromAmount = true;\n@@ -308,7 +307,7 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n         LOCK2(cs_main, wallet->cs_wallet);\n         CWalletTx *newTx = transaction.getTransaction();\n \n-        Q_FOREACH(const SendCoinsRecipient &rcp, transaction.getRecipients())\n+        for (const SendCoinsRecipient &rcp : transaction.getRecipients())\n         {\n             if (rcp.paymentRequest.IsInitialized())\n             {\n@@ -339,7 +338,7 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n \n     // Add addresses / update labels that we've sent to to the address book,\n     // and emit coinsSent signal for each recipient\n-    Q_FOREACH(const SendCoinsRecipient &rcp, transaction.getRecipients())\n+    for (const SendCoinsRecipient &rcp : transaction.getRecipients())\n     {\n         // Don't touch the address book when we have a payment request\n         if (!rcp.paymentRequest.IsInitialized())\n@@ -567,7 +566,7 @@ bool WalletModel::havePrivKey(const CKeyID &address) const\n void WalletModel::getOutputs(const std::vector<COutPoint>& vOutpoints, std::vector<COutput>& vOutputs)\n {\n     LOCK2(cs_main, wallet->cs_wallet);\n-    BOOST_FOREACH(const COutPoint& outpoint, vOutpoints)\n+    for (const COutPoint& outpoint : vOutpoints)\n     {\n         if (!wallet->mapWallet.count(outpoint.hash)) continue;\n         int nDepth = wallet->mapWallet[outpoint.hash].GetDepthInMainChain();\n@@ -594,7 +593,7 @@ void WalletModel::listCoins(std::map<QString, std::vector<COutput> >& mapCoins)\n     wallet->ListLockedCoins(vLockedCoins);\n \n     // add locked coins\n-    BOOST_FOREACH(const COutPoint& outpoint, vLockedCoins)\n+    for (const COutPoint& outpoint : vLockedCoins)\n     {\n         if (!wallet->mapWallet.count(outpoint.hash)) continue;\n         int nDepth = wallet->mapWallet[outpoint.hash].GetDepthInMainChain();\n@@ -604,7 +603,7 @@ void WalletModel::listCoins(std::map<QString, std::vector<COutput> >& mapCoins)\n             vCoins.push_back(out);\n     }\n \n-    BOOST_FOREACH(const COutput& out, vCoins)\n+    for (const COutput& out : vCoins)\n     {\n         COutput cout = out;\n \n@@ -648,8 +647,8 @@ void WalletModel::listLockedCoins(std::vector<COutPoint>& vOutpts)\n void WalletModel::loadReceiveRequests(std::vector<std::string>& vReceiveRequests)\n {\n     LOCK(wallet->cs_wallet);\n-    BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& item, wallet->mapAddressBook)\n-        BOOST_FOREACH(const PAIRTYPE(std::string, std::string)& item2, item.second.destdata)\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : wallet->mapAddressBook)\n+        for (const std::pair<std::string, std::string>& item2 : item.second.destdata)\n             if (item2.first.size() > 2 && item2.first.substr(0,2) == \"rr\") // receive request\n                 vReceiveRequests.push_back(item2.second);\n }"
      },
      {
        "sha": "7da2611650f8eb398efc3fb190fa6d84ef10d1c0",
        "filename": "src/qt/walletmodeltransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/qt/walletmodeltransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/qt/walletmodeltransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -82,7 +82,7 @@ void WalletModelTransaction::reassignAmounts(int nChangePosRet)\n CAmount WalletModelTransaction::getTotalTransactionAmount()\n {\n     CAmount totalTransactionAmount = 0;\n-    Q_FOREACH(const SendCoinsRecipient &rcp, recipients)\n+    for (const SendCoinsRecipient &rcp : recipients)\n     {\n         totalTransactionAmount += rcp.amount;\n     }"
      },
      {
        "sha": "ca34d69bf24a31b976332b1ae854526e27a0baf2",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -163,7 +163,7 @@ static bool rest_headers(HTTPRequest* req,\n     }\n \n     CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n-    BOOST_FOREACH(const CBlockIndex *pindex, headers) {\n+    for (const CBlockIndex *pindex : headers) {\n         ssHeader << pindex->GetBlockHeader();\n     }\n \n@@ -183,7 +183,7 @@ static bool rest_headers(HTTPRequest* req,\n     }\n     case RF_JSON: {\n         UniValue jsonHeaders(UniValue::VARR);\n-        BOOST_FOREACH(const CBlockIndex *pindex, headers) {\n+        for (const CBlockIndex *pindex : headers) {\n             jsonHeaders.push_back(blockheaderToJSON(pindex));\n         }\n         string strJSON = jsonHeaders.write() + \"\\n\";\n@@ -570,7 +570,7 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n         objGetUTXOResponse.push_back(Pair(\"bitmap\", bitmapStringRepresentation));\n \n         UniValue utxos(UniValue::VARR);\n-        BOOST_FOREACH (const CCoin& coin, outs) {\n+        for (const CCoin& coin : outs) {\n             UniValue utxo(UniValue::VOBJ);\n             utxo.push_back(Pair(\"txvers\", (int32_t)coin.nTxVer));\n             utxo.push_back(Pair(\"height\", (int32_t)coin.nHeight));"
      },
      {
        "sha": "f8d576ca4e246f5228a3992058874eb37183328b",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -119,7 +119,7 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool tx\n     result.push_back(Pair(\"versionHex\", strprintf(\"%08x\", block.nVersion)));\n     result.push_back(Pair(\"merkleroot\", block.hashMerkleRoot.GetHex()));\n     UniValue txs(UniValue::VARR);\n-    BOOST_FOREACH(const CTransaction&tx, block.vtx)\n+    for (const CTransaction&tx : block.vtx)\n     {\n         if(txDetails)\n         {\n@@ -368,14 +368,14 @@ void entryToJSON(UniValue &info, const CTxMemPoolEntry &e)\n     info.push_back(Pair(\"ancestorfees\", e.GetModFeesWithAncestors()));\n     const CTransaction& tx = e.GetTx();\n     set<string> setDepends;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    for (const CTxIn& txin : tx.vin)\n     {\n         if (mempool.exists(txin.prevout.hash))\n             setDepends.insert(txin.prevout.hash.ToString());\n     }\n \n     UniValue depends(UniValue::VARR);\n-    BOOST_FOREACH(const string& dep, setDepends)\n+    for (const string& dep : setDepends)\n     {\n         depends.push_back(dep);\n     }\n@@ -389,7 +389,7 @@ UniValue mempoolToJSON(bool fVerbose = false)\n     {\n         LOCK(mempool.cs);\n         UniValue o(UniValue::VOBJ);\n-        BOOST_FOREACH(const CTxMemPoolEntry& e, mempool.mapTx)\n+        for (const CTxMemPoolEntry& e : mempool.mapTx)\n         {\n             const uint256& hash = e.GetTx().GetHash();\n             UniValue info(UniValue::VOBJ);\n@@ -404,7 +404,7 @@ UniValue mempoolToJSON(bool fVerbose = false)\n         mempool.queryHashes(vtxid);\n \n         UniValue a(UniValue::VARR);\n-        BOOST_FOREACH(const uint256& hash, vtxid)\n+        for (const uint256& hash : vtxid)\n             a.push_back(hash.ToString());\n \n         return a;\n@@ -488,14 +488,14 @@ UniValue getmempoolancestors(const UniValue& params, bool fHelp)\n \n     if (!fVerbose) {\n         UniValue o(UniValue::VARR);\n-        BOOST_FOREACH(CTxMemPool::txiter ancestorIt, setAncestors) {\n+        for (CTxMemPool::txiter ancestorIt : setAncestors) {\n             o.push_back(ancestorIt->GetTx().GetHash().ToString());\n         }\n \n         return o;\n     } else {\n         UniValue o(UniValue::VOBJ);\n-        BOOST_FOREACH(CTxMemPool::txiter ancestorIt, setAncestors) {\n+        for (CTxMemPool::txiter ancestorIt : setAncestors) {\n             const CTxMemPoolEntry &e = *ancestorIt;\n             const uint256& hash = e.GetTx().GetHash();\n             UniValue info(UniValue::VOBJ);\n@@ -552,14 +552,14 @@ UniValue getmempooldescendants(const UniValue& params, bool fHelp)\n \n     if (!fVerbose) {\n         UniValue o(UniValue::VARR);\n-        BOOST_FOREACH(CTxMemPool::txiter descendantIt, setDescendants) {\n+        for (CTxMemPool::txiter descendantIt : setDescendants) {\n             o.push_back(descendantIt->GetTx().GetHash().ToString());\n         }\n \n         return o;\n     } else {\n         UniValue o(UniValue::VOBJ);\n-        BOOST_FOREACH(CTxMemPool::txiter descendantIt, setDescendants) {\n+        for (CTxMemPool::txiter descendantIt : setDescendants) {\n             const CTxMemPoolEntry &e = *descendantIt;\n             const uint256& hash = e.GetTx().GetHash();\n             UniValue info(UniValue::VOBJ);\n@@ -1157,7 +1157,7 @@ UniValue getchaintips(const UniValue& params, bool fHelp)\n     std::set<const CBlockIndex*> setOrphans;\n     std::set<const CBlockIndex*> setPrevs;\n \n-    BOOST_FOREACH(const PAIRTYPE(const uint256, CBlockIndex*)& item, mapBlockIndex)\n+    for (const std::pair<const uint256, CBlockIndex*>& item : mapBlockIndex)\n     {\n         if (!chainActive.Contains(item.second)) {\n             setOrphans.insert(item.second);\n@@ -1177,7 +1177,7 @@ UniValue getchaintips(const UniValue& params, bool fHelp)\n \n     /* Construct the output array.  */\n     UniValue res(UniValue::VARR);\n-    BOOST_FOREACH(const CBlockIndex* block, setTips)\n+    for (const CBlockIndex* block : setTips)\n     {\n         UniValue obj(UniValue::VOBJ);\n         obj.push_back(Pair(\"height\", block->nHeight));"
      },
      {
        "sha": "f8e210e22be008f6fe1c91ca108fde008b128589",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -558,7 +558,7 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n     UniValue transactions(UniValue::VARR);\n     map<uint256, int64_t> setTxIndex;\n     int i = 0;\n-    BOOST_FOREACH (CTransaction& tx, pblock->vtx) {\n+    for (CTransaction& tx : pblock->vtx) {\n         uint256 txHash = tx.GetHash();\n         setTxIndex[txHash] = i++;\n \n@@ -572,7 +572,7 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n         entry.push_back(Pair(\"hash\", tx.GetWitnessHash().GetHex()));\n \n         UniValue deps(UniValue::VARR);\n-        BOOST_FOREACH (const CTxIn &in, tx.vin)\n+        for (const CTxIn &in : tx.vin)\n         {\n             if (setTxIndex.count(in.prevout.hash))\n                 deps.push_back(setTxIndex[in.prevout.hash]);"
      },
      {
        "sha": "1fafa54dacdd8a5da0639095748edde1f952fdfd",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -137,7 +137,7 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n             obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n             obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n             UniValue a(UniValue::VARR);\n-            BOOST_FOREACH(const CTxDestination& addr, addresses)\n+            for (const CTxDestination& addr : addresses)\n                 a.push_back(CBitcoinAddress(addr).ToString());\n             obj.push_back(Pair(\"addresses\", a));\n             if (whichType == TX_MULTISIG)"
      },
      {
        "sha": "45ffa3b979c243048f34a8aab919757e536f51f6",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -17,7 +17,6 @@\n #include \"utilstrencodings.h\"\n #include \"version.h\"\n \n-#include <boost/foreach.hpp>\n \n #include <univalue.h>\n \n@@ -123,7 +122,7 @@ UniValue getpeerinfo(const UniValue& params, bool fHelp)\n \n     UniValue ret(UniValue::VARR);\n \n-    BOOST_FOREACH(const CNodeStats& stats, vstats) {\n+    for (const CNodeStats& stats : vstats) {\n         UniValue obj(UniValue::VOBJ);\n         CNodeStateStats statestats;\n         bool fStateStats = GetNodeStateStats(stats.nodeid, statestats);\n@@ -157,22 +156,22 @@ UniValue getpeerinfo(const UniValue& params, bool fHelp)\n             obj.push_back(Pair(\"synced_headers\", statestats.nSyncHeight));\n             obj.push_back(Pair(\"synced_blocks\", statestats.nCommonHeight));\n             UniValue heights(UniValue::VARR);\n-            BOOST_FOREACH(int height, statestats.vHeightInFlight) {\n+            for (int height : statestats.vHeightInFlight) {\n                 heights.push_back(height);\n             }\n             obj.push_back(Pair(\"inflight\", heights));\n         }\n         obj.push_back(Pair(\"whitelisted\", stats.fWhitelisted));\n \n         UniValue sendPerMsgCmd(UniValue::VOBJ);\n-        BOOST_FOREACH(const mapMsgCmdSize::value_type &i, stats.mapSendBytesPerMsgCmd) {\n+        for (const mapMsgCmdSize::value_type &i : stats.mapSendBytesPerMsgCmd) {\n             if (i.second > 0)\n                 sendPerMsgCmd.push_back(Pair(i.first, i.second));\n         }\n         obj.push_back(Pair(\"bytessent_per_msg\", sendPerMsgCmd));\n \n         UniValue recvPerMsgCmd(UniValue::VOBJ);\n-        BOOST_FOREACH(const mapMsgCmdSize::value_type &i, stats.mapRecvBytesPerMsgCmd) {\n+        for (const mapMsgCmdSize::value_type &i : stats.mapRecvBytesPerMsgCmd) {\n             if (i.second > 0)\n                 recvPerMsgCmd.push_back(Pair(i.first, i.second));\n         }\n@@ -442,7 +441,7 @@ UniValue getnetworkinfo(const UniValue& params, bool fHelp)\n     UniValue localAddresses(UniValue::VARR);\n     {\n         LOCK(cs_mapLocalHost);\n-        BOOST_FOREACH(const PAIRTYPE(CNetAddr, LocalServiceInfo) &item, mapLocalHost)\n+        for (const std::pair<CNetAddr, LocalServiceInfo> &item : mapLocalHost)\n         {\n             UniValue rec(UniValue::VOBJ);\n             rec.push_back(Pair(\"address\", item.first.ToString()));"
      },
      {
        "sha": "09c619dc0b863c32ea8030382158f7d438dc8ae2",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -54,7 +54,7 @@ void ScriptPubKeyToJSON(const CScript& scriptPubKey, UniValue& out, bool fInclud\n     out.push_back(Pair(\"type\", GetTxnOutputType(type)));\n \n     UniValue a(UniValue::VARR);\n-    BOOST_FOREACH(const CTxDestination& addr, addresses)\n+    for (const CTxDestination& addr : addresses)\n         a.push_back(CBitcoinAddress(addr).ToString());\n     out.push_back(Pair(\"addresses\", a));\n }\n@@ -288,7 +288,7 @@ UniValue gettxoutproof(const UniValue& params, bool fHelp)\n         throw JSONRPCError(RPC_INTERNAL_ERROR, \"Can't read block from disk\");\n \n     unsigned int ntxFound = 0;\n-    BOOST_FOREACH(const CTransaction&tx, block.vtx)\n+    for (const CTransaction&tx : block.vtx)\n         if (setTxids.count(tx.GetHash()))\n             ntxFound++;\n     if (ntxFound != setTxids.size())\n@@ -330,7 +330,7 @@ UniValue verifytxoutproof(const UniValue& params, bool fHelp)\n     if (!mapBlockIndex.count(merkleBlock.header.GetHash()) || !chainActive.Contains(mapBlockIndex[merkleBlock.header.GetHash()]))\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found in chain\");\n \n-    BOOST_FOREACH(const uint256& hash, vMatch)\n+    for (const uint256& hash : vMatch)\n         res.push_back(hash.GetHex());\n     return res;\n }\n@@ -421,7 +421,7 @@ UniValue createrawtransaction(const UniValue& params, bool fHelp)\n \n     set<CBitcoinAddress> setAddress;\n     vector<string> addrList = sendTo.getKeys();\n-    BOOST_FOREACH(const string& name_, addrList) {\n+    for (const string& name_ : addrList) {\n \n         if (name_ == \"data\") {\n             std::vector<unsigned char> data = ParseHexV(sendTo[name_].getValStr(),\"Data\");\n@@ -668,7 +668,7 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n         CCoinsViewMemPool viewMempool(&viewChain, mempool);\n         view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n \n-        BOOST_FOREACH(const CTxIn& txin, mergedTx.vin) {\n+        for (const CTxIn& txin : mergedTx.vin) {\n             const uint256& prevHash = txin.prevout.hash;\n             CCoins coins;\n             view.AccessCoins(prevHash); // this is certainly allowed to fail\n@@ -811,7 +811,7 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n             ProduceSignature(MutableTransactionSignatureCreator(&keystore, &mergedTx, i, amount, nHashType), prevPubKey, sigdata);\n \n         // ... and merge in other signatures:\n-        BOOST_FOREACH(const CMutableTransaction& txv, txVariants) {\n+        for (const CMutableTransaction& txv : txVariants) {\n             sigdata = CombineSignatures(prevPubKey, TransactionSignatureChecker(&txConst, i, amount), sigdata, DataFromTransaction(txv, i));\n         }\n "
      },
      {
        "sha": "faa364f5a6bcbaea4dfedba1a12afd58e8086175",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -17,7 +17,6 @@\n \n #include <boost/bind.hpp>\n #include <boost/filesystem.hpp>\n-#include <boost/foreach.hpp>\n #include <boost/iostreams/concepts.hpp>\n #include <boost/iostreams/stream.hpp>\n #include <boost/shared_ptr.hpp>\n@@ -72,7 +71,7 @@ void RPCTypeCheck(const UniValue& params,\n                   bool fAllowNull)\n {\n     unsigned int i = 0;\n-    BOOST_FOREACH(UniValue::VType t, typesExpected)\n+    for (UniValue::VType t : typesExpected)\n     {\n         if (params.size() <= i)\n             break;\n@@ -107,7 +106,7 @@ void RPCTypeCheckObj(const UniValue& o,\n \n     if (fStrict)\n     {\n-        BOOST_FOREACH(const string& k, o.getKeys())\n+        for (const string& k : o.getKeys())\n         {\n             if (typesExpected.count(k) == 0)\n             {\n@@ -184,7 +183,7 @@ std::string CRPCTable::help(const std::string& strCommand) const\n         vCommands.push_back(make_pair(mi->second->category + mi->first, mi->second));\n     sort(vCommands.begin(), vCommands.end());\n \n-    BOOST_FOREACH(const PAIRTYPE(string, const CRPCCommand*)& command, vCommands)\n+    for (const std::pair<string, const CRPCCommand*>& command : vCommands)\n     {\n         const CRPCCommand *pcmd = command.second;\n         string strMethod = pcmd->name;"
      },
      {
        "sha": "2cff3b42892417b163556f2a2c61275d22c91dab",
        "filename": "src/script/ismine.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/script/ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/script/ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -11,7 +11,6 @@\n #include \"script/standard.h\"\n #include \"script/sign.h\"\n \n-#include <boost/foreach.hpp>\n \n using namespace std;\n \n@@ -20,7 +19,7 @@ typedef vector<unsigned char> valtype;\n unsigned int HaveKeys(const vector<valtype>& pubkeys, const CKeyStore& keystore)\n {\n     unsigned int nResult = 0;\n-    BOOST_FOREACH(const valtype& pubkey, pubkeys)\n+    for (const valtype& pubkey : pubkeys)\n     {\n         CKeyID keyID = CPubKey(pubkey).GetID();\n         if (keystore.HaveKey(keyID))"
      },
      {
        "sha": "8ef662d297a037614621c7a4c4d84a15cab83709",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -12,7 +12,6 @@\n #include \"script/standard.h\"\n #include \"uint256.h\"\n \n-#include <boost/foreach.hpp>\n \n using namespace std;\n \n@@ -124,7 +123,7 @@ static bool SignStep(const BaseSignatureCreator& creator, const CScript& scriptP\n static CScript PushAll(const vector<valtype>& values)\n {\n     CScript result;\n-    BOOST_FOREACH(const valtype& v, values) {\n+    for (const valtype& v : values) {\n         if (v.size() == 0) {\n             result << OP_0;\n         } else if (v.size() == 1 && v[0] >= 1 && v[0] <= 16) {\n@@ -235,12 +234,12 @@ static vector<valtype> CombineMultisig(const CScript& scriptPubKey, const BaseSi\n {\n     // Combine all the signatures we've got:\n     set<valtype> allsigs;\n-    BOOST_FOREACH(const valtype& v, sigs1)\n+    for (const valtype& v : sigs1)\n     {\n         if (!v.empty())\n             allsigs.insert(v);\n     }\n-    BOOST_FOREACH(const valtype& v, sigs2)\n+    for (const valtype& v : sigs2)\n     {\n         if (!v.empty())\n             allsigs.insert(v);\n@@ -251,7 +250,7 @@ static vector<valtype> CombineMultisig(const CScript& scriptPubKey, const BaseSi\n     unsigned int nSigsRequired = vSolutions.front()[0];\n     unsigned int nPubKeys = vSolutions.size()-2;\n     map<valtype, valtype> sigs;\n-    BOOST_FOREACH(const valtype& sig, allsigs)\n+    for (const valtype& sig : allsigs)\n     {\n         for (unsigned int i = 0; i < nPubKeys; i++)\n         {"
      },
      {
        "sha": "7c7365d98f193f2fa7c6d0305235b992e04677f1",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -10,7 +10,6 @@\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n \n-#include <boost/foreach.hpp>\n \n using namespace std;\n \n@@ -96,7 +95,7 @@ bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, vector<vector<unsi\n \n     // Scan templates\n     const CScript& script1 = scriptPubKey;\n-    BOOST_FOREACH(const PAIRTYPE(txnouttype, CScript)& tplate, mTemplates)\n+    for (const std::pair<txnouttype, CScript>& tplate : mTemplates)\n     {\n         const CScript& script2 = tplate.second;\n         vSolutionsRet.clear();\n@@ -295,7 +294,7 @@ CScript GetScriptForMultisig(int nRequired, const std::vector<CPubKey>& keys)\n     CScript script;\n \n     script << CScript::EncodeOP_N(nRequired);\n-    BOOST_FOREACH(const CPubKey& key, keys)\n+    for (const CPubKey& key : keys)\n         script << ToByteVector(key);\n     script << CScript::EncodeOP_N(keys.size()) << OP_CHECKMULTISIG;\n     return script;"
      },
      {
        "sha": "815dc69c05c8926a2635f70520c21f7ce633ad05",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -9,7 +9,6 @@\n \n #include <stdio.h>\n \n-#include <boost/foreach.hpp>\n #include <boost/thread.hpp>\n \n #ifdef DEBUG_LOCKCONTENTION\n@@ -89,7 +88,7 @@ static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch,\n \n     LogPrintf(\"POTENTIAL DEADLOCK DETECTED\\n\");\n     LogPrintf(\"Previous lock order was:\\n\");\n-    BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, s2) {\n+    for (const std::pair<void*, CLockLocation> & i : s2) {\n         if (i.first == mismatch.first) {\n             LogPrintf(\" (1)\");\n             if (!firstLocked && secondLocked && i.second.fTry)\n@@ -107,7 +106,7 @@ static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch,\n     firstLocked = false;\n     secondLocked = false;\n     LogPrintf(\"Current lock order is:\\n\");\n-    BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, s1) {\n+    for (const std::pair<void*, CLockLocation> & i : s1) {\n         if (i.first == mismatch.first) {\n             LogPrintf(\" (1)\");\n             if (!firstLocked && secondLocked && i.second.fTry)\n@@ -135,7 +134,7 @@ static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)\n     (*lockstack).push_back(std::make_pair(c, locklocation));\n \n     if (!fTry) {\n-        BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, (*lockstack)) {\n+        for (const std::pair<void*, CLockLocation> & i : (*lockstack)) {\n             if (i.first == c)\n                 break;\n \n@@ -170,14 +169,14 @@ void LeaveCritical()\n std::string LocksHeld()\n {\n     std::string result;\n-    BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, *lockstack)\n+    for (const std::pair<void*, CLockLocation> & i : *lockstack)\n         result += i.second.ToString() + std::string(\"\\n\");\n     return result;\n }\n \n void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs)\n {\n-    BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, *lockstack)\n+    for (const std::pair<void*, CLockLocation> & i : *lockstack)\n         if (i.first == cs)\n             return;\n     fprintf(stderr, \"Assertion failed: lock %s not held in %s:%i; locks held:\\n%s\", pszName, pszFile, nLine, LocksHeld().c_str());"
      },
      {
        "sha": "f86078ee8095eff9f9e4a346d271f0a5bcf3d4ae",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -19,7 +19,6 @@\n \n #include <boost/assign/list_of.hpp> // for 'map_list_of()'\n #include <boost/date_time/posix_time/posix_time_types.hpp>\n-#include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n // Tests this internal-to-main.cpp method:"
      },
      {
        "sha": "d63202bbb2c6db1f19c84b806a8c1a5bb70b9ab8",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -15,7 +15,6 @@\n #include \"utilstrencodings.h\"\n #include \"test/test_bitcoin.h\"\n \n-#include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n #include <univalue.h>"
      },
      {
        "sha": "8128b281e9d6545a60af34982ccdb1632d387345",
        "filename": "src/test/bip32_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/test/bip32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/test/bip32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bip32_tests.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -84,7 +84,7 @@ void RunTest(const TestVector &test) {\n     CExtPubKey pubkey;\n     key.SetMaster(&seed[0], seed.size());\n     pubkey = key.Neuter();\n-    BOOST_FOREACH(const TestDerivation &derive, test.vDerive) {\n+    for (const TestDerivation &derive : test.vDerive) {\n         unsigned char data[74];\n         key.Encode(data);\n         pubkey.Encode(data);"
      },
      {
        "sha": "b099254cb74d16c4edd7102b8968ea0655601d58",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -159,7 +159,7 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n                     missed_an_entry = true;\n                 }\n             }\n-            BOOST_FOREACH(const CCoinsViewCacheTest *test, stack) {\n+            for (const CCoinsViewCacheTest *test : stack) {\n                 test->SelfTest();\n             }\n         }"
      },
      {
        "sha": "c79675f5a6dd1a3b848187fcd1744f4980b45218",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -9,7 +9,6 @@\n #include <vector>\n \n #include <boost/algorithm/string.hpp>\n-#include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n BOOST_FIXTURE_TEST_SUITE(getarg_tests, BasicTestingSetup)\n@@ -25,7 +24,7 @@ static void ResetArgs(const std::string& strArg)\n \n     // Convert to char*:\n     std::vector<const char*> vecChar;\n-    BOOST_FOREACH(std::string& s, vecArg)\n+    for (std::string& s : vecArg)\n         vecChar.push_back(s.c_str());\n \n     ParseParameters(vecChar.size(), &vecChar[0]);"
      },
      {
        "sha": "b94ead3b1acfd20692c3660c2203c9ea24efba5f",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -495,7 +495,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n \n     TestPackageSelection(chainparams, scriptPubKey, txFirst);\n \n-    BOOST_FOREACH(CTransaction *_tx, txFirst)\n+    for (CTransaction *_tx : txFirst)\n         delete _tx;\n \n     fCheckpointsEnabled = true;"
      },
      {
        "sha": "ce47e8c471cba16a495b1ea45f49b7aebbdaecc2",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -14,7 +14,6 @@\n #include \"test/test_bitcoin.h\"\n \n \n-#include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n using namespace std;\n@@ -30,7 +29,7 @@ sign_multisig(CScript scriptPubKey, vector<CKey> keys, CTransaction transaction,\n \n     CScript result;\n     result << OP_0; // CHECKMULTISIG bug workaround\n-    BOOST_FOREACH(const CKey &key, keys)\n+    for (const CKey &key : keys)\n     {\n         vector<unsigned char> vchSig;\n         BOOST_CHECK(key.Sign(hash, vchSig));"
      },
      {
        "sha": "b37b0b402680259f7573afb2fc664d77dc7f2333",
        "filename": "src/test/prevector_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/test/prevector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/test/prevector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/prevector_tests.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -36,7 +36,7 @@ class prevector_tester {\n         {\n             local_check(a == b);\n         }\n-    void local_check(bool b) \n+    void local_check(bool b)\n     {\n         passed &= b;\n     }\n@@ -54,16 +54,16 @@ class prevector_tester {\n         local_check(pretype(real_vector.begin(), real_vector.end()) == pre_vector);\n         local_check(pretype(pre_vector.begin(), pre_vector.end()) == pre_vector);\n         size_t pos = 0;\n-        BOOST_FOREACH(const T& v, pre_vector) {\n+        for (const T& v : pre_vector) {\n              local_check(v == real_vector[pos++]);\n         }\n-        BOOST_REVERSE_FOREACH(const T& v, pre_vector) {\n+        for (const T& v : boost::adaptors::reverse(pre_vector)) {\n              local_check(v == real_vector[--pos]);\n         }\n-        BOOST_FOREACH(const T& v, const_pre_vector) {\n+        for (const T& v : const_pre_vector) {\n              local_check(v == real_vector[pos++]);\n         }\n-        BOOST_REVERSE_FOREACH(const T& v, const_pre_vector) {\n+        for (const T& v : boost::adaptors::reverse(const_pre_vector)) {\n              local_check(v == real_vector[--pos]);\n         }\n         CDataStream ss1(SER_DISK, 0);\n@@ -171,8 +171,8 @@ class prevector_tester {\n         test();\n     }\n     ~prevector_tester() {\n-        BOOST_CHECK_MESSAGE(passed, \"insecure_rand_Rz: \" \n-                << insecure_rand_Rz_cache \n+        BOOST_CHECK_MESSAGE(passed, \"insecure_rand_Rz: \"\n+                << insecure_rand_Rz_cache\n                 << \", insecure_rand_Rw: \"\n                 << insecure_rand_Rw_cache);\n     }"
      },
      {
        "sha": "4aeaa1ea4852b09e1b4ea50f3146508a98e8d84c",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -24,7 +24,6 @@\n #include <string>\n #include <vector>\n \n-#include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n #include <univalue.h>\n@@ -836,7 +835,7 @@ BOOST_AUTO_TEST_CASE(script_build)\n \n     std::string strGen;\n \n-    BOOST_FOREACH(TestBuilder& test, tests) {\n+    for (TestBuilder& test : tests) {\n         test.Test();\n         std::string str = JSONPrettyPrint(test.GetJSON());\n #ifndef UPDATE_JSON_TESTS\n@@ -942,7 +941,7 @@ sign_multisig(CScript scriptPubKey, std::vector<CKey> keys, CTransaction transac\n     // and vice-versa)\n     //\n     result << OP_0;\n-    BOOST_FOREACH(const CKey &key, keys)\n+    for (const CKey &key : keys)\n     {\n         vector<unsigned char> vchSig;\n         BOOST_CHECK(key.Sign(hash, vchSig));"
      },
      {
        "sha": "40d438cefacd2043af92961976b0cf7d42a07a55",
        "filename": "src/test/sigopcount_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/test/sigopcount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/test/sigopcount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sigopcount_tests.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -12,7 +12,6 @@\n \n #include <vector>\n \n-#include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n using namespace std;"
      },
      {
        "sha": "66d11248c933dc2083972fa2a0c1b69d3befd7e1",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -115,7 +115,7 @@ TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>&\n \n     // Replace mempool-selected txns with just coinbase plus passed-in txns:\n     block.vtx.resize(1);\n-    BOOST_FOREACH(const CMutableTransaction& tx, txns)\n+    for (const CMutableTransaction& tx : txns)\n         block.vtx.push_back(tx);\n     // IncrementExtraNonce creates a valid coinbase and merkleRoot\n     unsigned int extraNonce = 0;"
      },
      {
        "sha": "a2fae818016b19b5201f3c28605da658c70f00be",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -28,7 +28,6 @@\n #include <boost/assign/list_of.hpp>\n #include <boost/test/unit_test.hpp>\n #include <boost/assign/list_of.hpp>\n-#include <boost/foreach.hpp>\n \n #include <univalue.h>\n \n@@ -64,7 +63,7 @@ unsigned int ParseScriptFlags(string strFlags)\n     vector<string> words;\n     boost::algorithm::split(words, strFlags, boost::algorithm::is_any_of(\",\"));\n \n-    BOOST_FOREACH(string word, words)\n+    for (string word : words)\n     {\n         if (!mapFlagNames.count(word))\n             BOOST_ERROR(\"Bad test: unknown verification flag '\" << word << \"'\");\n@@ -401,7 +400,7 @@ void CheckWithFlag(const CTransaction& output, const CMutableTransaction& input,\n static CScript PushAll(const vector<valtype>& values)\n {\n     CScript result;\n-    BOOST_FOREACH(const valtype& v, values) {\n+    for (const valtype& v : values) {\n         if (v.size() == 0) {\n             result << OP_0;\n         } else if (v.size() == 1 && v[0] >= 1 && v[0] <= 16) {"
      },
      {
        "sha": "ca137731e451257aac7954d8324e97e682762d3a",
        "filename": "src/timedata.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/timedata.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/timedata.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/timedata.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -14,7 +14,6 @@\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n \n-#include <boost/foreach.hpp>\n \n using namespace std;\n \n@@ -96,7 +95,7 @@ void AddTimeData(const CNetAddr& ip, int64_t nOffsetSample)\n             {\n                 // If nobody has a time different than ours but within 5 minutes of ours, give a warning\n                 bool fMatch = false;\n-                BOOST_FOREACH(int64_t nOffset, vSorted)\n+                for (int64_t nOffset : vSorted)\n                     if (nOffset != 0 && abs64(nOffset) < 5 * 60)\n                         fMatch = true;\n \n@@ -110,7 +109,7 @@ void AddTimeData(const CNetAddr& ip, int64_t nOffsetSample)\n             }\n         }\n         \n-        BOOST_FOREACH(int64_t n, vSorted)\n+        for (int64_t n : vSorted)\n             LogPrint(\"net\", \"%+d  \", n);\n         LogPrint(\"net\", \"|  \");\n         "
      },
      {
        "sha": "4a4eaaa2b8a0efc9973c6c3e97fc4c8ed35fc23a",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -17,7 +17,6 @@\n #include <boost/function.hpp>\n #include <boost/bind.hpp>\n #include <boost/signals2/signal.hpp>\n-#include <boost/foreach.hpp>\n #include <boost/algorithm/string/predicate.hpp>\n #include <boost/algorithm/string/split.hpp>\n #include <boost/algorithm/string/classification.hpp>\n@@ -430,7 +429,7 @@ void TorController::add_onion_cb(TorControlConnection& conn, const TorControlRep\n {\n     if (reply.code == 250) {\n         LogPrint(\"tor\", \"tor: ADD_ONION successful\\n\");\n-        BOOST_FOREACH(const std::string &s, reply.lines) {\n+        for (const std::string &s : reply.lines) {\n             std::map<std::string,std::string> m = ParseTorReplyMapping(s);\n             std::map<std::string,std::string>::iterator i;\n             if ((i = m.find(\"ServiceID\")) != m.end())\n@@ -549,7 +548,7 @@ void TorController::protocolinfo_cb(TorControlConnection& conn, const TorControl\n          * 250-AUTH METHODS=NULL\n          * 250-AUTH METHODS=HASHEDPASSWORD\n          */\n-        BOOST_FOREACH(const std::string &s, reply.lines) {\n+        for (const std::string &s : reply.lines) {\n             std::pair<std::string,std::string> l = SplitTorReplyLine(s);\n             if (l.first == \"AUTH\") {\n                 std::map<std::string,std::string> m = ParseTorReplyMapping(l.second);\n@@ -566,7 +565,7 @@ void TorController::protocolinfo_cb(TorControlConnection& conn, const TorControl\n                 }\n             }\n         }\n-        BOOST_FOREACH(const std::string &s, methods) {\n+        for (const std::string &s : methods) {\n             LogPrint(\"tor\", \"tor: Supported authentication method: %s\\n\", s);\n         }\n         // Prefer NULL, otherwise SAFECOOKIE. If a password is provided, use HASHEDPASSWORD"
      },
      {
        "sha": "a47840728e03c9837aacf51bd6cb0c6bd3903084",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 31,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -91,12 +91,12 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n         setAllDescendants.insert(cit);\n         stageEntries.erase(cit);\n         const setEntries &setChildren = GetMemPoolChildren(cit);\n-        BOOST_FOREACH(const txiter childEntry, setChildren) {\n+        for (const txiter childEntry : setChildren) {\n             cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n             if (cacheIt != cachedDescendants.end()) {\n                 // We've already calculated this one, just add the entries for this set\n                 // but don't traverse again.\n-                BOOST_FOREACH(const txiter cacheEntry, cacheIt->second) {\n+                for (const txiter cacheEntry : cacheIt->second) {\n                     setAllDescendants.insert(cacheEntry);\n                 }\n             } else if (!setAllDescendants.count(childEntry)) {\n@@ -110,7 +110,7 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n     int64_t modifySize = 0;\n     CAmount modifyFee = 0;\n     int64_t modifyCount = 0;\n-    BOOST_FOREACH(txiter cit, setAllDescendants) {\n+    for (txiter cit : setAllDescendants) {\n         if (!setExclude.count(cit->GetTx().GetHash())) {\n             modifySize += cit->GetTxSize();\n             modifyFee += cit->GetModifiedFee();\n@@ -145,7 +145,7 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     // This maximizes the benefit of the descendant cache and guarantees that\n     // setMemPoolChildren will be updated, an assumption made in\n     // UpdateForDescendants.\n-    BOOST_REVERSE_FOREACH(const uint256 &hash, vHashesToUpdate) {\n+    for (const uint256 &hash : boost::adaptors::reverse(vHashesToUpdate)) {\n         // we cache the in-mempool children to avoid duplicate updates\n         setEntries setChildren;\n         // calculate children from mapNextTx\n@@ -218,7 +218,7 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n         }\n \n         const setEntries & setMemPoolParents = GetMemPoolParents(stageit);\n-        BOOST_FOREACH(const txiter &phash, setMemPoolParents) {\n+        for (const txiter &phash : setMemPoolParents) {\n             // If this is a new ancestor, add it.\n             if (setAncestors.count(phash) == 0) {\n                 parentHashes.insert(phash);\n@@ -237,13 +237,13 @@ void CTxMemPool::UpdateAncestorsOf(bool add, txiter it, setEntries &setAncestors\n {\n     setEntries parentIters = GetMemPoolParents(it);\n     // add or remove this tx as a child of each parent\n-    BOOST_FOREACH(txiter piter, parentIters) {\n+    for (txiter piter : parentIters) {\n         UpdateChild(piter, it, add);\n     }\n     const int64_t updateCount = (add ? 1 : -1);\n     const int64_t updateSize = updateCount * it->GetTxSize();\n     const CAmount updateFee = updateCount * it->GetModifiedFee();\n-    BOOST_FOREACH(txiter ancestorIt, setAncestors) {\n+    for (txiter ancestorIt : setAncestors) {\n         mapTx.modify(ancestorIt, update_descendant_state(updateSize, updateFee, updateCount));\n     }\n }\n@@ -254,7 +254,7 @@ void CTxMemPool::UpdateEntryForAncestors(txiter it, const setEntries &setAncesto\n     int64_t updateSize = 0;\n     CAmount updateFee = 0;\n     int64_t updateSigOpsCost = 0;\n-    BOOST_FOREACH(txiter ancestorIt, setAncestors) {\n+    for (txiter ancestorIt : setAncestors) {\n         updateSize += ancestorIt->GetTxSize();\n         updateFee += ancestorIt->GetModifiedFee();\n         updateSigOpsCost += ancestorIt->GetSigOpCost();\n@@ -265,7 +265,7 @@ void CTxMemPool::UpdateEntryForAncestors(txiter it, const setEntries &setAncesto\n void CTxMemPool::UpdateChildrenForRemoval(txiter it)\n {\n     const setEntries &setMemPoolChildren = GetMemPoolChildren(it);\n-    BOOST_FOREACH(txiter updateIt, setMemPoolChildren) {\n+    for (txiter updateIt : setMemPoolChildren) {\n         UpdateParent(updateIt, it, false);\n     }\n }\n@@ -282,19 +282,19 @@ void CTxMemPool::UpdateForRemoveFromMempool(const setEntries &entriesToRemove, b\n         // Here we only update statistics and not data in mapLinks (which\n         // we need to preserve until we're finished with all operations that\n         // need to traverse the mempool).\n-        BOOST_FOREACH(txiter removeIt, entriesToRemove) {\n+        for (txiter removeIt : entriesToRemove) {\n             setEntries setDescendants;\n             CalculateDescendants(removeIt, setDescendants);\n             setDescendants.erase(removeIt); // don't update state for self\n             int64_t modifySize = -((int64_t)removeIt->GetTxSize());\n             CAmount modifyFee = -removeIt->GetModifiedFee();\n             int modifySigOps = -removeIt->GetSigOpCost();\n-            BOOST_FOREACH(txiter dit, setDescendants) {\n+            for (txiter dit : setDescendants) {\n                 mapTx.modify(dit, update_ancestor_state(modifySize, modifyFee, -1, modifySigOps));\n             }\n         }\n     }\n-    BOOST_FOREACH(txiter removeIt, entriesToRemove) {\n+    for (txiter removeIt : entriesToRemove) {\n         setEntries setAncestors;\n         const CTxMemPoolEntry &entry = *removeIt;\n         std::string dummy;\n@@ -323,7 +323,7 @@ void CTxMemPool::UpdateForRemoveFromMempool(const setEntries &entriesToRemove, b\n     // After updating all the ancestor sizes, we can now sever the link between each\n     // transaction being removed and any mempool children (ie, update setMemPoolParents\n     // for each direct child of a transaction being removed).\n-    BOOST_FOREACH(txiter removeIt, entriesToRemove) {\n+    for (txiter removeIt : entriesToRemove) {\n         UpdateChildrenForRemoval(removeIt);\n     }\n }\n@@ -431,7 +431,7 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n     // to clean up the mess we're leaving here.\n \n     // Update ancestors with information about this tx\n-    BOOST_FOREACH (const uint256 &phash, setParentTransactions) {\n+    for (const uint256 &phash : setParentTransactions) {\n         txiter pit = mapTx.find(phash);\n         if (pit != mapTx.end()) {\n             UpdateParent(newit, pit, true);\n@@ -453,7 +453,7 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n void CTxMemPool::removeUnchecked(txiter it)\n {\n     const uint256 hash = it->GetTx().GetHash();\n-    BOOST_FOREACH(const CTxIn& txin, it->GetTx().vin)\n+    for (const CTxIn& txin : it->GetTx().vin)\n         mapNextTx.erase(txin.prevout);\n \n     if (vTxHashes.size() > 1) {\n@@ -495,7 +495,7 @@ void CTxMemPool::CalculateDescendants(txiter entryit, setEntries &setDescendants\n         stage.erase(it);\n \n         const setEntries &setChildren = GetMemPoolChildren(it);\n-        BOOST_FOREACH(const txiter &childiter, setChildren) {\n+        for (const txiter &childiter : setChildren) {\n             if (!setDescendants.count(childiter)) {\n                 stage.insert(childiter);\n             }\n@@ -527,10 +527,10 @@ void CTxMemPool::removeRecursive(const CTransaction &origTx, std::list<CTransact\n             }\n         }\n         setEntries setAllRemoves;\n-        BOOST_FOREACH(txiter it, txToRemove) {\n+        for (txiter it : txToRemove) {\n             CalculateDescendants(it, setAllRemoves);\n         }\n-        BOOST_FOREACH(txiter it, setAllRemoves) {\n+        for (txiter it : setAllRemoves) {\n             removed.push_back(it->GetTx());\n         }\n         RemoveStaged(setAllRemoves, false);\n@@ -551,7 +551,7 @@ void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMem\n             // So it's critical that we remove the tx and not depend on the LockPoints.\n             transactionsToRemove.push_back(tx);\n         } else if (it->GetSpendsCoinbase()) {\n-            BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+            for (const CTxIn& txin : tx.vin) {\n                 indexed_transaction_set::const_iterator it2 = mapTx.find(txin.prevout.hash);\n                 if (it2 != mapTx.end())\n                     continue;\n@@ -567,7 +567,7 @@ void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMem\n             mapTx.modify(it, update_lock_points(lp));\n         }\n     }\n-    BOOST_FOREACH(const CTransaction& tx, transactionsToRemove) {\n+    for (const CTransaction& tx : transactionsToRemove) {\n         list<CTransaction> removed;\n         removeRecursive(tx, removed);\n     }\n@@ -577,7 +577,7 @@ void CTxMemPool::removeConflicts(const CTransaction &tx, std::list<CTransaction>\n {\n     // Remove transactions which depend on inputs of tx, recursively\n     LOCK(cs);\n-    BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n+    for (const CTxIn &txin : tx.vin) {\n         auto it = mapNextTx.find(txin.prevout);\n         if (it != mapNextTx.end()) {\n             const CTransaction &txConflict = *it->second;\n@@ -598,15 +598,15 @@ void CTxMemPool::removeForBlock(const std::vector<CTransaction>& vtx, unsigned i\n {\n     LOCK(cs);\n     std::vector<CTxMemPoolEntry> entries;\n-    BOOST_FOREACH(const CTransaction& tx, vtx)\n+    for (const CTransaction& tx : vtx)\n     {\n         uint256 hash = tx.GetHash();\n \n         indexed_transaction_set::iterator i = mapTx.find(hash);\n         if (i != mapTx.end())\n             entries.push_back(*i);\n     }\n-    BOOST_FOREACH(const CTransaction& tx, vtx)\n+    for (const CTransaction& tx : vtx)\n     {\n         txiter it = mapTx.find(tx.GetHash());\n         if (it != mapTx.end()) {\n@@ -673,7 +673,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n         setEntries setParentCheck;\n         int64_t parentSizes = 0;\n         int64_t parentSigOpCost = 0;\n-        BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n+        for (const CTxIn &txin : tx.vin) {\n             // Check that every mempool transaction's inputs refer to available coins, or other mempool tx's.\n             indexed_transaction_set::const_iterator it2 = mapTx.find(txin.prevout.hash);\n             if (it2 != mapTx.end()) {\n@@ -706,7 +706,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n         CAmount nFeesCheck = it->GetModifiedFee();\n         int64_t nSigOpCheck = it->GetSigOpCost();\n \n-        BOOST_FOREACH(txiter ancestorIt, setAncestors) {\n+        for (txiter ancestorIt : setAncestors) {\n             nSizeCheck += ancestorIt->GetTxSize();\n             nFeesCheck += ancestorIt->GetModifiedFee();\n             nSigOpCheck += ancestorIt->GetSigOpCost();\n@@ -933,7 +933,7 @@ void CTxMemPool::PrioritiseTransaction(const uint256 hash, const string strHash,\n             uint64_t nNoLimit = std::numeric_limits<uint64_t>::max();\n             std::string dummy;\n             CalculateMemPoolAncestors(*it, setAncestors, nNoLimit, nNoLimit, nNoLimit, nNoLimit, dummy, false);\n-            BOOST_FOREACH(txiter ancestorIt, setAncestors) {\n+            for (txiter ancestorIt : setAncestors) {\n                 mapTx.modify(ancestorIt, update_descendant_state(0, nFeeDelta, 0));\n             }\n         }\n@@ -993,7 +993,7 @@ size_t CTxMemPool::DynamicMemoryUsage() const {\n void CTxMemPool::RemoveStaged(setEntries &stage, bool updateDescendants) {\n     AssertLockHeld(cs);\n     UpdateForRemoveFromMempool(stage, updateDescendants);\n-    BOOST_FOREACH(const txiter& it, stage) {\n+    for (const txiter& it : stage) {\n         removeUnchecked(it);\n     }\n }\n@@ -1007,7 +1007,7 @@ int CTxMemPool::Expire(int64_t time) {\n         it++;\n     }\n     setEntries stage;\n-    BOOST_FOREACH(txiter removeit, toremove) {\n+    for (txiter removeit : toremove) {\n         CalculateDescendants(removeit, stage);\n     }\n     RemoveStaged(stage, false);\n@@ -1116,13 +1116,13 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<uint256>* pvNoSpendsRe\n         std::vector<CTransaction> txn;\n         if (pvNoSpendsRemaining) {\n             txn.reserve(stage.size());\n-            BOOST_FOREACH(txiter it, stage)\n+            for (txiter it : stage)\n                 txn.push_back(it->GetTx());\n         }\n         RemoveStaged(stage, false);\n         if (pvNoSpendsRemaining) {\n-            BOOST_FOREACH(const CTransaction& tx, txn) {\n-                BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+            for (const CTransaction& tx : txn) {\n+                for (const CTxIn& txin : tx.vin) {\n                     if (exists(txin.prevout.hash))\n                         continue;\n                     auto it = mapNextTx.lower_bound(COutPoint(txin.prevout.hash, 0));"
      },
      {
        "sha": "51ec0470750aab23df787c59ee124518a0fa1aa6",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -16,7 +16,6 @@\n #include \"primitives/transaction.h\"\n #include \"sync.h\"\n \n-#undef foreach\n #include \"boost/multi_index_container.hpp\"\n #include \"boost/multi_index/ordered_index.hpp\"\n #include \"boost/multi_index/hashed_index.hpp\"\n@@ -634,7 +633,7 @@ class CTxMemPool\n \n     /** Estimate priority needed to get into the next nBlocks */\n     double estimatePriority(int nBlocks) const;\n-    \n+\n     /** Write/Read estimates to disk */\n     bool WriteFeeEstimates(CAutoFile& fileout) const;\n     bool ReadFeeEstimates(CAutoFile& filein);\n@@ -680,7 +679,7 @@ class CTxMemPool\n     void removeUnchecked(txiter entry);\n };\n \n-/** \n+/**\n  * CCoinsView that brings transactions from a memorypool into view.\n  * It does not check for spendings by memory pool transactions.\n  */"
      },
      {
        "sha": "8f107448c5769f0d8ff24806a44d689a9fca7b69",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -77,7 +77,6 @@\n #include <boost/algorithm/string/predicate.hpp> // for startswith() and endswith()\n #include <boost/filesystem.hpp>\n #include <boost/filesystem/fstream.hpp>\n-#include <boost/foreach.hpp>\n #include <boost/program_options/detail/config_file.hpp>\n #include <boost/program_options/parsers.hpp>\n #include <boost/thread.hpp>"
      },
      {
        "sha": "afd69a1944d5a7f4423e85a62bfb1ed82219a619",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -26,6 +26,7 @@\n #include <vector>\n \n #include <boost/filesystem/path.hpp>\n+#include <boost/range/adaptor/reversed.hpp>\n #include <boost/signals2/signal.hpp>\n #include <boost/thread/exceptions.hpp>\n "
      },
      {
        "sha": "4acd6a466fc832ca3b998ad1357cfb246b463e7e",
        "filename": "src/utilstrencodings.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/utilstrencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/utilstrencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.h?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -19,9 +19,6 @@\n #define UEND(a)             ((unsigned char*)&((&(a))[1]))\n #define ARRAYLEN(array)     (sizeof(array)/sizeof((array)[0]))\n \n-/** This is needed because the foreach macro can't get over the comma in pair<t1, t2> */\n-#define PAIRTYPE(t1, t2)    std::pair<t1, t2>\n-\n /** Used by SanitizeString() */\n enum SafeChars\n {"
      },
      {
        "sha": "c4beeb47918076e4987155fd0fb202f99f10eac3",
        "filename": "src/wallet/crypter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/wallet/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/wallet/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -12,7 +12,6 @@\n \n #include <string>\n #include <vector>\n-#include <boost/foreach.hpp>\n \n int CCrypter::BytesToKeySHA512AES(const std::vector<unsigned char>& chSalt, const SecureString& strKeyData, int count, unsigned char *key,unsigned char *iv) const\n {\n@@ -285,7 +284,7 @@ bool CCryptoKeyStore::EncryptKeys(CKeyingMaterial& vMasterKeyIn)\n             return false;\n \n         fUseCrypto = true;\n-        BOOST_FOREACH(KeyMap::value_type& mKey, mapKeys)\n+        for (KeyMap::value_type& mKey : mapKeys)\n         {\n             const CKey &key = mKey.second;\n             CPubKey vchPubKey = key.GetPubKey();"
      },
      {
        "sha": "c1dc67846c000826dd9851ecb1a2945b3f7cd13f",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -24,7 +24,6 @@\n \n #include <univalue.h>\n \n-#include <boost/foreach.hpp>\n \n using namespace std;\n \n@@ -50,7 +49,7 @@ int64_t static DecodeDumpTime(const std::string &str) {\n \n std::string static EncodeDumpString(const std::string &str) {\n     std::stringstream ret;\n-    BOOST_FOREACH(unsigned char c, str) {\n+    for (unsigned char c : str) {\n         if (c <= 32 || c >= 128 || c == '%') {\n             ret << '%' << HexStr(&c, &c + 1);\n         } else {"
      },
      {
        "sha": "fd968759eb3b91129d0b30063218ba77d5156cde",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 23,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -71,7 +71,7 @@ void WalletTxToJSON(const CWalletTx& wtx, UniValue& entry)\n     uint256 hash = wtx.GetHash();\n     entry.push_back(Pair(\"txid\", hash.GetHex()));\n     UniValue conflicts(UniValue::VARR);\n-    BOOST_FOREACH(const uint256& conflict, wtx.GetConflicts())\n+    for (const uint256& conflict : wtx.GetConflicts())\n         conflicts.push_back(conflict.GetHex());\n     entry.push_back(Pair(\"walletconflicts\", conflicts));\n     entry.push_back(Pair(\"time\", wtx.GetTxTime()));\n@@ -89,7 +89,7 @@ void WalletTxToJSON(const CWalletTx& wtx, UniValue& entry)\n     }\n     entry.push_back(Pair(\"bip125-replaceable\", rbfStatus));\n \n-    BOOST_FOREACH(const PAIRTYPE(string,string)& item, wtx.mapValue)\n+    for (const std::pair<string,string>& item : wtx.mapValue)\n         entry.push_back(Pair(item.first, item.second));\n }\n \n@@ -325,7 +325,7 @@ UniValue getaddressesbyaccount(const UniValue& params, bool fHelp)\n \n     // Find all addresses that have the given account\n     UniValue ret(UniValue::VARR);\n-    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item, pwalletMain->mapAddressBook)\n+    for (const std::pair<CBitcoinAddress, CAddressBookData>& item : pwalletMain->mapAddressBook)\n     {\n         const CBitcoinAddress& address = item.first;\n         const string& strName = item.second.name;\n@@ -459,10 +459,10 @@ UniValue listaddressgroupings(const UniValue& params, bool fHelp)\n \n     UniValue jsonGroupings(UniValue::VARR);\n     map<CTxDestination, CAmount> balances = pwalletMain->GetAddressBalances();\n-    BOOST_FOREACH(set<CTxDestination> grouping, pwalletMain->GetAddressGroupings())\n+    for (set<CTxDestination> grouping : pwalletMain->GetAddressGroupings())\n     {\n         UniValue jsonGrouping(UniValue::VARR);\n-        BOOST_FOREACH(CTxDestination address, grouping)\n+        for (CTxDestination address : grouping)\n         {\n             UniValue addressInfo(UniValue::VARR);\n             addressInfo.push_back(CBitcoinAddress(address).ToString());\n@@ -582,7 +582,7 @@ UniValue getreceivedbyaddress(const UniValue& params, bool fHelp)\n         if (wtx.IsCoinBase() || !CheckFinalTx(wtx))\n             continue;\n \n-        BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n+        for (const CTxOut& txout : wtx.vout)\n             if (txout.scriptPubKey == scriptPubKey)\n                 if (wtx.GetDepthInMainChain() >= nMinDepth)\n                     nAmount += txout.nValue;\n@@ -636,7 +636,7 @@ UniValue getreceivedbyaccount(const UniValue& params, bool fHelp)\n         if (wtx.IsCoinBase() || !CheckFinalTx(wtx))\n             continue;\n \n-        BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n+        for (const CTxOut& txout : wtx.vout)\n         {\n             CTxDestination address;\n             if (ExtractDestination(txout.scriptPubKey, address) && IsMine(*pwalletMain, address) && setAddress.count(address))\n@@ -707,10 +707,10 @@ UniValue getbalance(const UniValue& params, bool fHelp)\n             wtx.GetAmounts(listReceived, listSent, allFee, strSentAccount, filter);\n             if (wtx.GetDepthInMainChain() >= nMinDepth)\n             {\n-                BOOST_FOREACH(const COutputEntry& r, listReceived)\n+                for (const COutputEntry& r : listReceived)\n                     nBalance += r.amount;\n             }\n-            BOOST_FOREACH(const COutputEntry& s, listSent)\n+            for (const COutputEntry& s : listSent)\n                 nBalance -= s.amount;\n             nBalance -= allFee;\n         }\n@@ -917,7 +917,7 @@ UniValue sendmany(const UniValue& params, bool fHelp)\n \n     CAmount totalAmount = 0;\n     vector<string> keys = sendTo.getKeys();\n-    BOOST_FOREACH(const string& name_, keys)\n+    for (const string& name_ : keys)\n     {\n         CBitcoinAddress address(name_);\n         if (!address.IsValid())\n@@ -1142,7 +1142,7 @@ UniValue ListReceived(const UniValue& params, bool fByAccounts)\n         if (nDepth < nMinDepth)\n             continue;\n \n-        BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n+        for (const CTxOut& txout : wtx.vout)\n         {\n             CTxDestination address;\n             if (!ExtractDestination(txout.scriptPubKey, address))\n@@ -1164,7 +1164,7 @@ UniValue ListReceived(const UniValue& params, bool fByAccounts)\n     // Reply\n     UniValue ret(UniValue::VARR);\n     map<string, tallyitem> mapAccountTally;\n-    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item, pwalletMain->mapAddressBook)\n+    for (const std::pair<CBitcoinAddress, CAddressBookData>& item : pwalletMain->mapAddressBook)\n     {\n         const CBitcoinAddress& address = item.first;\n         const string& strAccount = item.second.name;\n@@ -1203,7 +1203,7 @@ UniValue ListReceived(const UniValue& params, bool fByAccounts)\n             UniValue transactions(UniValue::VARR);\n             if (it != mapTally.end())\n             {\n-                BOOST_FOREACH(const uint256& _item, (*it).second.txids)\n+                for (const uint256& _item : (*it).second.txids)\n                 {\n                     transactions.push_back(_item.GetHex());\n                 }\n@@ -1329,7 +1329,7 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n     // Sent\n     if ((!listSent.empty() || nFee != 0) && (fAllAccounts || strAccount == strSentAccount))\n     {\n-        BOOST_FOREACH(const COutputEntry& s, listSent)\n+        for (const COutputEntry& s : listSent)\n         {\n             UniValue entry(UniValue::VOBJ);\n             if(involvesWatchonly || (::IsMine(*pwalletMain, s.destination) & ISMINE_WATCH_ONLY))\n@@ -1352,7 +1352,7 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n     // Received\n     if (listReceived.size() > 0 && wtx.GetDepthInMainChain() >= nMinDepth)\n     {\n-        BOOST_FOREACH(const COutputEntry& r, listReceived)\n+        for (const COutputEntry& r : listReceived)\n         {\n             string account;\n             if (pwalletMain->mapAddressBook.count(r.destination))\n@@ -1572,7 +1572,7 @@ UniValue listaccounts(const UniValue& params, bool fHelp)\n             includeWatchonly = includeWatchonly | ISMINE_WATCH_ONLY;\n \n     map<string, CAmount> mapAccountBalances;\n-    BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& entry, pwalletMain->mapAddressBook) {\n+    for (const std::pair<CTxDestination, CAddressBookData>& entry : pwalletMain->mapAddressBook) {\n         if (IsMine(*pwalletMain, entry.first) & includeWatchonly) // This address belongs to me\n             mapAccountBalances[entry.second.name] = 0;\n     }\n@@ -1589,11 +1589,11 @@ UniValue listaccounts(const UniValue& params, bool fHelp)\n             continue;\n         wtx.GetAmounts(listReceived, listSent, nFee, strSentAccount, includeWatchonly);\n         mapAccountBalances[strSentAccount] -= nFee;\n-        BOOST_FOREACH(const COutputEntry& s, listSent)\n+        for (const COutputEntry& s : listSent)\n             mapAccountBalances[strSentAccount] -= s.amount;\n         if (nDepth >= nMinDepth)\n         {\n-            BOOST_FOREACH(const COutputEntry& r, listReceived)\n+            for (const COutputEntry& r : listReceived)\n                 if (pwalletMain->mapAddressBook.count(r.destination))\n                     mapAccountBalances[pwalletMain->mapAddressBook[r.destination].name] += r.amount;\n                 else\n@@ -1602,11 +1602,11 @@ UniValue listaccounts(const UniValue& params, bool fHelp)\n     }\n \n     const list<CAccountingEntry> & acentries = pwalletMain->laccentries;\n-    BOOST_FOREACH(const CAccountingEntry& entry, acentries)\n+    for (const CAccountingEntry& entry : acentries)\n         mapAccountBalances[entry.strAccount] += entry.nCreditDebit;\n \n     UniValue ret(UniValue::VOBJ);\n-    BOOST_FOREACH(const PAIRTYPE(string, CAmount)& accountBalance, mapAccountBalances) {\n+    for (const std::pair<string, CAmount>& accountBalance : mapAccountBalances) {\n         ret.push_back(Pair(accountBalance.first, ValueFromAmount(accountBalance.second)));\n     }\n     return ret;\n@@ -2218,7 +2218,7 @@ UniValue listlockunspent(const UniValue& params, bool fHelp)\n \n     UniValue ret(UniValue::VARR);\n \n-    BOOST_FOREACH(COutPoint &outpt, vOutpts) {\n+    for (COutPoint &outpt : vOutpts) {\n         UniValue o(UniValue::VOBJ);\n \n         o.push_back(Pair(\"txid\", outpt.hash.GetHex()));\n@@ -2323,7 +2323,7 @@ UniValue resendwallettransactions(const UniValue& params, bool fHelp)\n \n     std::vector<uint256> txids = pwalletMain->ResendWalletTransactionsBefore(GetTime(), g_connman.get());\n     UniValue result(UniValue::VARR);\n-    BOOST_FOREACH(const uint256& txid, txids)\n+    for (const uint256& txid : txids)\n     {\n         result.push_back(txid.ToString());\n     }\n@@ -2401,7 +2401,7 @@ UniValue listunspent(const UniValue& params, bool fHelp)\n     assert(pwalletMain != NULL);\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n     pwalletMain->AvailableCoins(vecOutputs, false, NULL, true);\n-    BOOST_FOREACH(const COutput& out, vecOutputs) {\n+    for (const COutput& out : vecOutputs) {\n         if (out.nDepth < nMinDepth || out.nDepth > nMaxDepth)\n             continue;\n "
      },
      {
        "sha": "ceff29f6b3a6c3dacf714babef1fab1d0684aabb",
        "filename": "src/wallet/test/accounting_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/wallet/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/wallet/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/accounting_tests.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -8,7 +8,6 @@\n \n #include <stdint.h>\n \n-#include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n extern CWallet* pwalletMain;\n@@ -23,7 +22,7 @@ GetResults(std::map<CAmount, CAccountingEntry>& results)\n     results.clear();\n     BOOST_CHECK(pwalletMain->ReorderTransactions() == DB_LOAD_OK);\n     pwalletMain->ListAccountCreditDebit(\"\", aes);\n-    BOOST_FOREACH(CAccountingEntry& ae, aes)\n+    for (CAccountingEntry& ae : aes)\n     {\n         results[ae.nOrderPos] = ae;\n     }"
      },
      {
        "sha": "4e3f844e5210fe0735854b24ce9d20c80f70fe5d",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -11,7 +11,6 @@\n \n #include \"wallet/test/wallet_test_fixture.h\"\n \n-#include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n // how many times to run all the tests to have a chance to catch errors that only show up with particular random shuffles\n@@ -54,7 +53,7 @@ static void add_coin(const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = fa\n \n static void empty_wallet(void)\n {\n-    BOOST_FOREACH(COutput output, vCoins)\n+    for (COutput output : vCoins)\n         delete output.tx;\n     vCoins.clear();\n }"
      },
      {
        "sha": "cdbeed803493c506629b1deef2fce33fc356586c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 53,
        "deletions": 53,
        "changes": 106,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -280,7 +280,7 @@ bool CWallet::Unlock(const SecureString& strWalletPassphrase)\n \n     {\n         LOCK(cs_wallet);\n-        BOOST_FOREACH(const MasterKeyMap::value_type& pMasterKey, mapMasterKeys)\n+        for (const MasterKeyMap::value_type& pMasterKey : mapMasterKeys)\n         {\n             if(!crypter.SetKeyFromPassphrase(strWalletPassphrase, pMasterKey.second.vchSalt, pMasterKey.second.nDeriveIterations, pMasterKey.second.nDerivationMethod))\n                 return false;\n@@ -303,7 +303,7 @@ bool CWallet::ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase,\n \n         CCrypter crypter;\n         CKeyingMaterial vMasterKey;\n-        BOOST_FOREACH(MasterKeyMap::value_type& pMasterKey, mapMasterKeys)\n+        for (MasterKeyMap::value_type& pMasterKey : mapMasterKeys)\n         {\n             if(!crypter.SetKeyFromPassphrase(strOldWalletPassphrase, pMasterKey.second.vchSalt, pMasterKey.second.nDeriveIterations, pMasterKey.second.nDerivationMethod))\n                 return false;\n@@ -396,7 +396,7 @@ set<uint256> CWallet::GetConflicts(const uint256& txid) const\n \n     std::pair<TxSpends::const_iterator, TxSpends::const_iterator> range;\n \n-    BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n+    for (const CTxIn& txin : wtx.vin)\n     {\n         if (mapTxSpends.count(txin.prevout) <= 1)\n             continue;  // No conflict if zero or one spends\n@@ -548,7 +548,7 @@ void CWallet::AddToSpends(const uint256& wtxid)\n     if (thisTx.IsCoinBase()) // Coinbases don't spend anything!\n         return;\n \n-    BOOST_FOREACH(const CTxIn& txin, thisTx.vin)\n+    for (const CTxIn& txin : thisTx.vin)\n         AddToSpends(txin.prevout, wtxid);\n }\n \n@@ -720,7 +720,7 @@ bool CWallet::GetAccountPubkey(CPubKey &pubKey, std::string strAccount, bool bFo\n             for (map<uint256, CWalletTx>::iterator it = mapWallet.begin();\n                  it != mapWallet.end() && account.vchPubKey.IsValid();\n                  ++it)\n-                BOOST_FOREACH(const CTxOut& txout, (*it).second.vout)\n+                for (const CTxOut& txout : (*it).second.vout)\n                     if (txout.scriptPubKey == scriptPubKey) {\n                         bForceNew = true;\n                         break;\n@@ -746,7 +746,7 @@ void CWallet::MarkDirty()\n {\n     {\n         LOCK(cs_wallet);\n-        BOOST_FOREACH(PAIRTYPE(const uint256, CWalletTx)& item, mapWallet)\n+        for (std::pair<const uint256, CWalletTx>& item : mapWallet)\n             item.second.MarkDirty();\n     }\n }\n@@ -879,7 +879,7 @@ bool CWallet::LoadToWallet(const CWalletTx& wtxIn)\n     wtx.BindWallet(this);\n     wtxOrdered.insert(make_pair(wtx.nOrderPos, TxPair(&wtx, (CAccountingEntry*)0)));\n     AddToSpends(hash);\n-    BOOST_FOREACH(const CTxIn& txin, wtx.vin) {\n+    for (const CTxIn& txin : wtx.vin) {\n         if (mapWallet.count(txin.prevout.hash)) {\n             CWalletTx& prevtx = mapWallet[txin.prevout.hash];\n             if (prevtx.nIndex == -1 && !prevtx.hashUnset()) {\n@@ -902,7 +902,7 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlockIndex\n         AssertLockHeld(cs_wallet);\n \n         if (posInBlock != -1) {\n-            BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+            for (const CTxIn& txin : tx.vin) {\n                 std::pair<TxSpends::const_iterator, TxSpends::const_iterator> range = mapTxSpends.equal_range(txin.prevout);\n                 while (range.first != range.second) {\n                     if (range.first->second != tx.GetHash()) {\n@@ -977,7 +977,7 @@ bool CWallet::AbandonTransaction(const uint256& hashTx)\n             }\n             // If a transaction changes 'conflicted' state, that changes the balance\n             // available of the outputs it spends. So force those to be recomputed\n-            BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n+            for (const CTxIn& txin : wtx.vin)\n             {\n                 if (mapWallet.count(txin.prevout.hash))\n                     mapWallet[txin.prevout.hash].MarkDirty();\n@@ -1038,7 +1038,7 @@ void CWallet::MarkConflicted(const uint256& hashBlock, const uint256& hashTx)\n             }\n             // If a transaction changes 'conflicted' state, that changes the balance\n             // available of the outputs it spends. So force those to be recomputed\n-            BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n+            for (const CTxIn& txin : wtx.vin)\n             {\n                 if (mapWallet.count(txin.prevout.hash))\n                     mapWallet[txin.prevout.hash].MarkDirty();\n@@ -1057,7 +1057,7 @@ void CWallet::SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex,\n     // If a transaction changes 'conflicted' state, that changes the balance\n     // available of the outputs it spends. So force those to be\n     // recomputed, also:\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    for (const CTxIn& txin : tx.vin)\n     {\n         if (mapWallet.count(txin.prevout.hash))\n             mapWallet[txin.prevout.hash].MarkDirty();\n@@ -1139,7 +1139,7 @@ CAmount CWallet::GetChange(const CTxOut& txout) const\n \n bool CWallet::IsMine(const CTransaction& tx) const\n {\n-    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+    for (const CTxOut& txout : tx.vout)\n         if (IsMine(txout))\n             return true;\n     return false;\n@@ -1153,7 +1153,7 @@ bool CWallet::IsFromMe(const CTransaction& tx) const\n CAmount CWallet::GetDebit(const CTransaction& tx, const isminefilter& filter) const\n {\n     CAmount nDebit = 0;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    for (const CTxIn& txin : tx.vin)\n     {\n         nDebit += GetDebit(txin, filter);\n         if (!MoneyRange(nDebit))\n@@ -1165,7 +1165,7 @@ CAmount CWallet::GetDebit(const CTransaction& tx, const isminefilter& filter) co\n CAmount CWallet::GetCredit(const CTransaction& tx, const isminefilter& filter) const\n {\n     CAmount nCredit = 0;\n-    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+    for (const CTxOut& txout : tx.vout)\n     {\n         nCredit += GetCredit(txout, filter);\n         if (!MoneyRange(nCredit))\n@@ -1177,7 +1177,7 @@ CAmount CWallet::GetCredit(const CTransaction& tx, const isminefilter& filter) c\n CAmount CWallet::GetChange(const CTransaction& tx) const\n {\n     CAmount nChange = 0;\n-    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+    for (const CTxOut& txout : tx.vout)\n     {\n         nChange += GetChange(txout);\n         if (!MoneyRange(nChange))\n@@ -1362,13 +1362,13 @@ void CWalletTx::GetAccountAmounts(const string& strAccount, CAmount& nReceived,\n \n     if (strAccount == strSentAccount)\n     {\n-        BOOST_FOREACH(const COutputEntry& s, listSent)\n+        for (const COutputEntry& s : listSent)\n             nSent += s.amount;\n         nFee = allFee;\n     }\n     {\n         LOCK(pwallet->cs_wallet);\n-        BOOST_FOREACH(const COutputEntry& r, listReceived)\n+        for (const COutputEntry& r : listReceived)\n         {\n             if (pwallet->mapAddressBook.count(r.destination))\n             {\n@@ -1440,7 +1440,7 @@ void CWallet::ReacceptWalletTransactions()\n     std::map<int64_t, CWalletTx*> mapSorted;\n \n     // Sort pending wallet transactions based on their initial wallet insertion order\n-    BOOST_FOREACH(PAIRTYPE(const uint256, CWalletTx)& item, mapWallet)\n+    for (std::pair<const uint256, CWalletTx>& item : mapWallet)\n     {\n         const uint256& wtxid = item.first;\n         CWalletTx& wtx = item.second;\n@@ -1454,7 +1454,7 @@ void CWallet::ReacceptWalletTransactions()\n     }\n \n     // Try to add wallet transactions to memory pool\n-    BOOST_FOREACH(PAIRTYPE(const int64_t, CWalletTx*)& item, mapSorted)\n+    for (std::pair<const int64_t, CWalletTx*>& item : mapSorted)\n     {\n         CWalletTx& wtx = *(item.second);\n \n@@ -1682,7 +1682,7 @@ bool CWalletTx::IsTrusted() const\n         return false;\n \n     // Trusted if all inputs are from us and are in the mempool:\n-    BOOST_FOREACH(const CTxIn& txin, vin)\n+    for (const CTxIn& txin : vin)\n     {\n         // Transactions not sent by us: not trusted\n         const CWalletTx* parent = pwallet->GetWalletTx(txin.prevout.hash);\n@@ -1711,15 +1711,15 @@ std::vector<uint256> CWallet::ResendWalletTransactionsBefore(int64_t nTime, CCon\n     LOCK(cs_wallet);\n     // Sort them in chronological order\n     multimap<unsigned int, CWalletTx*> mapSorted;\n-    BOOST_FOREACH(PAIRTYPE(const uint256, CWalletTx)& item, mapWallet)\n+    for (std::pair<const uint256, CWalletTx>& item : mapWallet)\n     {\n         CWalletTx& wtx = item.second;\n         // Don't rebroadcast if newer than nTime:\n         if (wtx.nTimeReceived > nTime)\n             continue;\n         mapSorted.insert(make_pair(wtx.nTimeReceived, &wtx));\n     }\n-    BOOST_FOREACH(PAIRTYPE(const unsigned int, CWalletTx*)& item, mapSorted)\n+    for (std::pair<const unsigned int, CWalletTx*>& item : mapSorted)\n     {\n         CWalletTx& wtx = *item.second;\n         if (wtx.RelayWalletTransaction(connman))\n@@ -1956,7 +1956,7 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int\n \n     random_shuffle(vCoins.begin(), vCoins.end(), GetRandInt);\n \n-    BOOST_FOREACH(const COutput &output, vCoins)\n+    for (const COutput &output : vCoins)\n     {\n         if (!output.fSpendable)\n             continue;\n@@ -2050,7 +2050,7 @@ bool CWallet::SelectCoins(const vector<COutput>& vAvailableCoins, const CAmount&\n     // coin control -> return all selected outputs (we want all selected to go into the transaction for sure)\n     if (coinControl && coinControl->HasSelected() && !coinControl->fAllowOtherInputs)\n     {\n-        BOOST_FOREACH(const COutput& out, vCoins)\n+        for (const COutput& out : vCoins)\n         {\n             if (!out.fSpendable)\n                  continue;\n@@ -2067,7 +2067,7 @@ bool CWallet::SelectCoins(const vector<COutput>& vAvailableCoins, const CAmount&\n     std::vector<COutPoint> vPresetInputs;\n     if (coinControl)\n         coinControl->ListSelected(vPresetInputs);\n-    BOOST_FOREACH(const COutPoint& outpoint, vPresetInputs)\n+    for (const COutPoint& outpoint : vPresetInputs)\n     {\n         map<uint256, CWalletTx>::const_iterator it = mapWallet.find(outpoint.hash);\n         if (it != mapWallet.end())\n@@ -2110,7 +2110,7 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, bool ov\n     vector<CRecipient> vecSend;\n \n     // Turn the txout set into a CRecipient vector\n-    BOOST_FOREACH(const CTxOut& txOut, tx.vout)\n+    for (const CTxOut& txOut : tx.vout)\n     {\n         CRecipient recipient = {txOut.scriptPubKey, txOut.nValue, false};\n         vecSend.push_back(recipient);\n@@ -2123,7 +2123,7 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, bool ov\n     coinControl.fOverrideFeeRate = overrideEstimatedFeeRate;\n     coinControl.nFeeRate = specificFeeRate;\n \n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    for (const CTxIn& txin : tx.vin)\n         coinControl.Select(txin.prevout);\n \n     CReserveKey reservekey(this);\n@@ -2135,7 +2135,7 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, bool ov\n         tx.vout.insert(tx.vout.begin() + nChangePosInOut, wtx.vout[nChangePosInOut]);\n \n     // Add new txins (keeping original txin scriptSig/order)\n-    BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n+    for (const CTxIn& txin : wtx.vin)\n     {\n         if (!coinControl.IsSelected(txin.prevout))\n         {\n@@ -2158,7 +2158,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n     CAmount nValue = 0;\n     int nChangePosRequest = nChangePosInOut;\n     unsigned int nSubtractFeeFromAmount = 0;\n-    BOOST_FOREACH (const CRecipient& recipient, vecSend)\n+    for (const CRecipient& recipient : vecSend)\n     {\n         if (nValue < 0 || recipient.nAmount < 0)\n         {\n@@ -2234,7 +2234,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                     nValueToSelect += nFeeRet;\n                 double dPriority = 0;\n                 // vouts to the payees\n-                BOOST_FOREACH (const CRecipient& recipient, vecSend)\n+                for (const CRecipient& recipient : vecSend)\n                 {\n                     CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n \n@@ -2273,7 +2273,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                     strFailReason = _(\"Insufficient funds\");\n                     return false;\n                 }\n-                BOOST_FOREACH(PAIRTYPE(const CWalletTx*, unsigned int) pcoin, setCoins)\n+                for (std::pair<const CWalletTx*, unsigned int> pcoin : setCoins)\n                 {\n                     CAmount nCredit = pcoin.first->vout[pcoin.second].nValue;\n                     //The coin age after the next block (depth+1) is used instead of the current,\n@@ -2380,14 +2380,14 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                 // to avoid conflicting with other possible uses of nSequence,\n                 // and in the spirit of \"smallest posible change from prior\n                 // behavior.\"\n-                BOOST_FOREACH(const PAIRTYPE(const CWalletTx*,unsigned int)& coin, setCoins)\n+                for (const std::pair<const CWalletTx*,unsigned int>& coin : setCoins)\n                     txNew.vin.push_back(CTxIn(coin.first->GetHash(),coin.second,CScript(),\n                                               std::numeric_limits<unsigned int>::max() - (fWalletRbf ? 2 : 1)));\n \n                 // Sign\n                 int nIn = 0;\n                 CTransaction txNewConst(txNew);\n-                BOOST_FOREACH(const PAIRTYPE(const CWalletTx*,unsigned int)& coin, setCoins)\n+                for (const std::pair<const CWalletTx*,unsigned int>& coin : setCoins)\n                 {\n                     bool signSuccess;\n                     const CScript& scriptPubKey = coin.first->vout[coin.second].scriptPubKey;\n@@ -2412,7 +2412,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n \n                 // Remove scriptSigs if we used dummy signatures for fee calculation\n                 if (!sign) {\n-                    BOOST_FOREACH (CTxIn& vin, txNew.vin)\n+                    for (CTxIn& vin : txNew.vin)\n                         vin.scriptSig = CScript();\n                     txNew.wit.SetNull();\n                 }\n@@ -2484,7 +2484,7 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey, CCon\n             AddToWallet(wtxNew);\n \n             // Notify that old coins are spent\n-            BOOST_FOREACH(const CTxIn& txin, wtxNew.vin)\n+            for (const CTxIn& txin : wtxNew.vin)\n             {\n                 CWalletTx &coin = mapWallet[txin.prevout.hash];\n                 coin.BindWallet(this);\n@@ -2668,7 +2668,7 @@ bool CWallet::DelAddressBook(const CTxDestination& address)\n         {\n             // Delete destdata tuples associated with address\n             std::string strAddress = CBitcoinAddress(address).ToString();\n-            BOOST_FOREACH(const PAIRTYPE(string, string) &item, mapAddressBook[address].destdata)\n+            for (const std::pair<string, string> &item : mapAddressBook[address].destdata)\n             {\n                 CWalletDB(strWalletFile).EraseDestData(strAddress, item.first);\n             }\n@@ -2704,7 +2704,7 @@ bool CWallet::NewKeyPool()\n     {\n         LOCK(cs_wallet);\n         CWalletDB walletdb(strWalletFile);\n-        BOOST_FOREACH(int64_t nIndex, setKeyPool)\n+        for (int64_t nIndex : setKeyPool)\n             walletdb.ErasePool(nIndex);\n         setKeyPool.clear();\n \n@@ -2845,7 +2845,7 @@ std::map<CTxDestination, CAmount> CWallet::GetAddressBalances()\n \n     {\n         LOCK(cs_wallet);\n-        BOOST_FOREACH(PAIRTYPE(uint256, CWalletTx) walletEntry, mapWallet)\n+        for (std::pair<uint256, CWalletTx> walletEntry : mapWallet)\n         {\n             CWalletTx *pcoin = &walletEntry.second;\n \n@@ -2885,15 +2885,15 @@ set< set<CTxDestination> > CWallet::GetAddressGroupings()\n     set< set<CTxDestination> > groupings;\n     set<CTxDestination> grouping;\n \n-    BOOST_FOREACH(PAIRTYPE(uint256, CWalletTx) walletEntry, mapWallet)\n+    for (std::pair<uint256, CWalletTx> walletEntry : mapWallet)\n     {\n         CWalletTx *pcoin = &walletEntry.second;\n \n         if (pcoin->vin.size() > 0)\n         {\n             bool any_mine = false;\n             // group all input addresses with each other\n-            BOOST_FOREACH(CTxIn txin, pcoin->vin)\n+            for (CTxIn txin : pcoin->vin)\n             {\n                 CTxDestination address;\n                 if(!IsMine(txin)) /* If this input isn't mine, ignore it */\n@@ -2907,7 +2907,7 @@ set< set<CTxDestination> > CWallet::GetAddressGroupings()\n             // group change with input addresses\n             if (any_mine)\n             {\n-               BOOST_FOREACH(CTxOut txout, pcoin->vout)\n+               for (CTxOut txout : pcoin->vout)\n                    if (IsChange(txout))\n                    {\n                        CTxDestination txoutAddr;\n@@ -2938,18 +2938,18 @@ set< set<CTxDestination> > CWallet::GetAddressGroupings()\n \n     set< set<CTxDestination>* > uniqueGroupings; // a set of pointers to groups of addresses\n     map< CTxDestination, set<CTxDestination>* > setmap;  // map addresses to the unique group containing it\n-    BOOST_FOREACH(set<CTxDestination> grouping, groupings)\n+    for (set<CTxDestination> grouping : groupings)\n     {\n         // make a set of all the groups hit by this new group\n         set< set<CTxDestination>* > hits;\n         map< CTxDestination, set<CTxDestination>* >::iterator it;\n-        BOOST_FOREACH(CTxDestination address, grouping)\n+        for (CTxDestination address : grouping)\n             if ((it = setmap.find(address)) != setmap.end())\n                 hits.insert((*it).second);\n \n         // merge all hit groups into a new single group and delete old groups\n         set<CTxDestination>* merged = new set<CTxDestination>(grouping);\n-        BOOST_FOREACH(set<CTxDestination>* hit, hits)\n+        for (set<CTxDestination>* hit : hits)\n         {\n             merged->insert(hit->begin(), hit->end());\n             uniqueGroupings.erase(hit);\n@@ -2958,12 +2958,12 @@ set< set<CTxDestination> > CWallet::GetAddressGroupings()\n         uniqueGroupings.insert(merged);\n \n         // update setmap\n-        BOOST_FOREACH(CTxDestination element, *merged)\n+        for (CTxDestination element : *merged)\n             setmap[element] = merged;\n     }\n \n     set< set<CTxDestination> > ret;\n-    BOOST_FOREACH(set<CTxDestination>* uniqueGrouping, uniqueGroupings)\n+    for (set<CTxDestination>* uniqueGrouping : uniqueGroupings)\n     {\n         ret.insert(*uniqueGrouping);\n         delete uniqueGrouping;\n@@ -3007,7 +3007,7 @@ std::set<CTxDestination> CWallet::GetAccountAddresses(const std::string& strAcco\n {\n     LOCK(cs_wallet);\n     set<CTxDestination> result;\n-    BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& item, mapAddressBook)\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : mapAddressBook)\n     {\n         const CTxDestination& address = item.first;\n         const string& strName = item.second.name;\n@@ -3057,7 +3057,7 @@ void CWallet::GetAllReserveKeys(set<CKeyID>& setAddress) const\n     CWalletDB walletdb(strWalletFile);\n \n     LOCK2(cs_main, cs_wallet);\n-    BOOST_FOREACH(const int64_t& id, setKeyPool)\n+    for (const int64_t& id : setKeyPool)\n     {\n         CKeyPool keypool;\n         if (!walletdb.ReadPool(id, keypool))\n@@ -3143,7 +3143,7 @@ class CAffectedKeysVisitor : public boost::static_visitor<void> {\n         std::vector<CTxDestination> vDest;\n         int nRequired;\n         if (ExtractDestinations(script, type, vDest, nRequired)) {\n-            BOOST_FOREACH(const CTxDestination &dest, vDest)\n+            for (const CTxDestination &dest : vDest)\n                 boost::apply_visitor(*this, dest);\n         }\n     }\n@@ -3176,7 +3176,7 @@ void CWallet::GetKeyBirthTimes(std::map<CKeyID, int64_t> &mapKeyBirth) const {\n     std::map<CKeyID, CBlockIndex*> mapKeyFirstBlock;\n     std::set<CKeyID> setKeys;\n     GetKeys(setKeys);\n-    BOOST_FOREACH(const CKeyID &keyid, setKeys) {\n+    for (const CKeyID &keyid : setKeys) {\n         if (mapKeyBirth.count(keyid) == 0)\n             mapKeyFirstBlock[keyid] = pindexMax;\n     }\n@@ -3195,10 +3195,10 @@ void CWallet::GetKeyBirthTimes(std::map<CKeyID, int64_t> &mapKeyBirth) const {\n         if (blit != mapBlockIndex.end() && chainActive.Contains(blit->second)) {\n             // ... which are already in a block\n             int nHeight = blit->second->nHeight;\n-            BOOST_FOREACH(const CTxOut &txout, wtx.vout) {\n+            for (const CTxOut &txout : wtx.vout) {\n                 // iterate over all their outputs\n                 CAffectedKeysVisitor(*this, vAffected).Process(txout.scriptPubKey);\n-                BOOST_FOREACH(const CKeyID &keyid, vAffected) {\n+                for (const CKeyID &keyid : vAffected) {\n                     // ... and all their affected keys\n                     std::map<CKeyID, CBlockIndex*>::iterator rit = mapKeyFirstBlock.find(keyid);\n                     if (rit != mapKeyFirstBlock.end() && nHeight < rit->second->nHeight)\n@@ -3435,7 +3435,7 @@ bool CWallet::InitLoadWallet()\n         {\n             CWalletDB walletdb(walletFile);\n \n-            BOOST_FOREACH(const CWalletTx& wtxOld, vWtx)\n+            for (const CWalletTx& wtxOld : vWtx)\n             {\n                 uint256 hash = wtxOld.GetHash();\n                 std::map<uint256, CWalletTx>::iterator mi = walletInstance->mapWallet.find(hash);"
      },
      {
        "sha": "848fd25c9444bff13592ca1ec06f5dca2823222c",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be0f534d14c14290013a2f7466cd1458d3b6589e/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be0f534d14c14290013a2f7466cd1458d3b6589e/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=be0f534d14c14290013a2f7466cd1458d3b6589e",
        "patch": "@@ -17,7 +17,6 @@\n \n #include <boost/version.hpp>\n #include <boost/filesystem.hpp>\n-#include <boost/foreach.hpp>\n #include <boost/thread.hpp>\n \n using namespace std;\n@@ -202,7 +201,7 @@ CAmount CWalletDB::GetAccountCreditDebit(const string& strAccount)\n     ListAccountCreditDebit(strAccount, entries);\n \n     CAmount nCreditDebit = 0;\n-    BOOST_FOREACH (const CAccountingEntry& entry, entries)\n+    for (const CAccountingEntry& entry : entries)\n         nCreditDebit += entry.nCreditDebit;\n \n     return nCreditDebit;\n@@ -269,7 +268,7 @@ DBErrors CWalletDB::ReorderTransactions(CWallet* pwallet)\n     }\n     list<CAccountingEntry> acentries;\n     ListAccountCreditDebit(\"\", acentries);\n-    BOOST_FOREACH(CAccountingEntry& entry, acentries)\n+    for (CAccountingEntry& entry : acentries)\n     {\n         txByTime.insert(make_pair(entry.nTime, TxPair((CWalletTx*)0, &entry)));\n     }\n@@ -300,7 +299,7 @@ DBErrors CWalletDB::ReorderTransactions(CWallet* pwallet)\n         else\n         {\n             int64_t nOrderPosOff = 0;\n-            BOOST_FOREACH(const int64_t& nOffsetStart, nOrderPosOffsets)\n+            for (const int64_t& nOffsetStart : nOrderPosOffsets)\n             {\n                 if (nOrderPos >= nOffsetStart)\n                     ++nOrderPosOff;\n@@ -700,7 +699,7 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n     if ((wss.nKeys + wss.nCKeys) != wss.nKeyMeta)\n         pwallet->nTimeFirstKey = 1; // 0 would be considered 'no value'\n \n-    BOOST_FOREACH(uint256 hash, wss.vWalletUpgrade)\n+    for (uint256 hash : wss.vWalletUpgrade)\n         WriteTx(pwallet->mapWallet[hash]);\n \n     // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n@@ -715,7 +714,7 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n \n     pwallet->laccentries.clear();\n     ListAccountCreditDebit(\"*\", pwallet->laccentries);\n-    BOOST_FOREACH(CAccountingEntry& entry, pwallet->laccentries) {\n+    for (CAccountingEntry& entry : pwallet->laccentries) {\n         pwallet->wtxOrdered.insert(make_pair(entry.nOrderPos, CWallet::TxPair((CWalletTx*)0, &entry)));\n     }\n \n@@ -804,7 +803,7 @@ DBErrors CWalletDB::ZapSelectTx(CWallet* pwallet, vector<uint256>& vTxHashIn, ve\n     // erase each matching wallet TX\n     bool delerror = false;\n     vector<uint256>::iterator it = vTxHashIn.begin();\n-    BOOST_FOREACH (uint256 hash, vTxHash) {\n+    for (uint256 hash : vTxHash) {\n         while (it < vTxHashIn.end() && (*it) < hash) {\n             it++;\n         }\n@@ -836,7 +835,7 @@ DBErrors CWalletDB::ZapWalletTx(CWallet* pwallet, vector<CWalletTx>& vWtx)\n         return err;\n \n     // erase each wallet TX\n-    BOOST_FOREACH (uint256& hash, vTxHash) {\n+    for (uint256& hash : vTxHash) {\n         if (!EraseTx(hash))\n             return DB_CORRUPT;\n     }\n@@ -956,7 +955,7 @@ bool CWalletDB::Recover(CDBEnv& dbenv, const std::string& filename, bool fOnlyKe\n     CWalletScanState wss;\n \n     DbTxn* ptxn = dbenv.TxnBegin();\n-    BOOST_FOREACH(CDBEnv::KeyValPair& row, salvagedData)\n+    for (CDBEnv::KeyValPair& row : salvagedData)\n     {\n         if (fOnlyKeys)\n         {"
      }
    ]
  }
]