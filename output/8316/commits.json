[
  {
    "sha": "fabfbb12d64a1908d3090370ede54787cf9a4b4b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWJmYmIxMmQ2NGExOTA4ZDMwOTAzNzBlZGU1NDc4N2NmOWE0YjRi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-07-08T09:31:43Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-07-08T09:31:46Z"
      },
      "message": "[qa] Promote usage of args_nodes",
      "tree": {
        "sha": "32f5fd965a57fe1e4cde47222b4a4a3be8083b99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/32f5fd965a57fe1e4cde47222b4a4a3be8083b99"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fabfbb12d64a1908d3090370ede54787cf9a4b4b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fabfbb12d64a1908d3090370ede54787cf9a4b4b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fabfbb12d64a1908d3090370ede54787cf9a4b4b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fabfbb12d64a1908d3090370ede54787cf9a4b4b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5077d2c2b6b8b4b05a05b3bba4df96e2a3e770f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5077d2c2b6b8b4b05a05b3bba4df96e2a3e770f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5077d2c2b6b8b4b05a05b3bba4df96e2a3e770f3"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 6,
      "deletions": 7
    },
    "files": [
      {
        "sha": "38acf80fbb8975371a7bc8310dcbfeee05eac5dc",
        "filename": "qa/rpc-tests/p2p-feefilter.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fabfbb12d64a1908d3090370ede54787cf9a4b4b/qa/rpc-tests/p2p-feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fabfbb12d64a1908d3090370ede54787cf9a4b4b/qa/rpc-tests/p2p-feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-feefilter.py?ref=fabfbb12d64a1908d3090370ede54787cf9a4b4b",
        "patch": "@@ -51,13 +51,12 @@ def __init__(self):\n         super().__init__()\n         self.num_nodes = 2\n         self.setup_clean_chain = False\n+        self.args_nodes = [[\"-debug\", \"-logtimemicros\"]] * self.num_nodes\n \n     def setup_network(self):\n         # Node1 will be used to generate txs which should be relayed from Node0\n         # to our test node\n-        self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\", \"-logtimemicros\"]))\n-        self.nodes.append(start_node(1, self.options.tmpdir, [\"-debug\", \"-logtimemicros\"]))\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, self.args_nodes)\n         connect_nodes(self.nodes[0], 1)\n \n     def run_test(self):"
      },
      {
        "sha": "1533fb1393b831fbb1c64db17d15219ea707a266",
        "filename": "qa/rpc-tests/wallet-hd.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fabfbb12d64a1908d3090370ede54787cf9a4b4b/qa/rpc-tests/wallet-hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fabfbb12d64a1908d3090370ede54787cf9a4b4b/qa/rpc-tests/wallet-hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet-hd.py?ref=fabfbb12d64a1908d3090370ede54787cf9a4b4b",
        "patch": "@@ -20,10 +20,10 @@ def __init__(self):\n         super().__init__()\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n-        self.node_args = [['-usehd=0'], ['-usehd=1', '-keypool=0']]\n+        self.args_nodes = [['-usehd=0'], ['-usehd=1', '-keypool=0']]\n \n     def setup_network(self):\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, self.node_args)\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, self.args_nodes)\n         self.is_network_split = False\n         connect_nodes_bi(self.nodes, 0, 1)\n \n@@ -57,7 +57,7 @@ def run_test (self):\n         self.stop_node(1)\n         os.remove(self.options.tmpdir + \"/node1/regtest/wallet.dat\")\n         shutil.copyfile(tmpdir + \"hd.bak\", tmpdir + \"/node1/regtest/wallet.dat\")\n-        self.nodes[1] = start_node(1, self.options.tmpdir, self.node_args[1])\n+        self.nodes[1] = start_node(1, self.options.tmpdir, self.args_nodes[1])\n         #connect_nodes_bi(self.nodes, 0, 1)\n \n         # Assert that derivation is deterministic\n@@ -68,7 +68,7 @@ def run_test (self):\n \n         # Needs rescan\n         self.stop_node(1)\n-        self.nodes[1] = start_node(1, self.options.tmpdir, self.node_args[1] + ['-rescan'])\n+        self.nodes[1] = start_node(1, self.options.tmpdir, self.args_nodes[1] + ['-rescan'])\n         #connect_nodes_bi(self.nodes, 0, 1)\n         assert_equal(self.nodes[1].getbalance(), num_hd_adds + 1)\n "
      }
    ]
  },
  {
    "sha": "fa4a8cd840599af83c4481db638b2bcfcf93cbc9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTRhOGNkODQwNTk5YWY4M2M0NDgxZGI2MzhiMmJjZmNmOTNjYmM5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-07-08T09:36:05Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-07-11T11:41:58Z"
      },
      "message": "[qa] feefilter: Clear mempool after each check",
      "tree": {
        "sha": "5ff2b3caabc681d8b328569aa9f5d7f35e70a365",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5ff2b3caabc681d8b328569aa9f5d7f35e70a365"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa4a8cd840599af83c4481db638b2bcfcf93cbc9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4a8cd840599af83c4481db638b2bcfcf93cbc9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa4a8cd840599af83c4481db638b2bcfcf93cbc9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4a8cd840599af83c4481db638b2bcfcf93cbc9/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fabfbb12d64a1908d3090370ede54787cf9a4b4b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fabfbb12d64a1908d3090370ede54787cf9a4b4b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fabfbb12d64a1908d3090370ede54787cf9a4b4b"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 9,
      "deletions": 5
    },
    "files": [
      {
        "sha": "5b112f77352765f29790cdb2371dfff4b88c3bb0",
        "filename": "qa/rpc-tests/p2p-feefilter.py",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4a8cd840599af83c4481db638b2bcfcf93cbc9/qa/rpc-tests/p2p-feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4a8cd840599af83c4481db638b2bcfcf93cbc9/qa/rpc-tests/p2p-feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-feefilter.py?ref=fa4a8cd840599af83c4481db638b2bcfcf93cbc9",
        "patch": "@@ -23,7 +23,7 @@ def allInvsMatch(invsExpected, testnode):\n             if (sorted(invsExpected) == sorted(testnode.txinvs)):\n                 return True;\n         time.sleep(1)\n-    return False;\n+    raise AssertionError(\"Did not match. Timed out\");\n \n # TestNode: bare-bones \"peer\".  Used to track which invs are received from a node\n # and to send the node feefilter messages.\n@@ -74,30 +74,34 @@ def run_test(self):\n \n         # Test that invs are received for all txs at feerate of 20 sat/byte\n         node1.settxfee(Decimal(\"0.00020000\"))\n-        txids = [node1.sendtoaddress(node1.getnewaddress(), 1) for x in range(3)]\n+        txids = [node1.sendtoaddress(node1.getnewaddress(), 1) for _ in range(3)]\n         assert(allInvsMatch(txids, test_node))\n+        node1.generate(1) # Clear mempool\n         test_node.clear_invs()\n \n         # Set a filter of 15 sat/byte\n         test_node.send_filter(15000)\n \n         # Test that txs are still being received (paying 20 sat/byte)\n-        txids = [node1.sendtoaddress(node1.getnewaddress(), 1) for x in range(3)]\n+        txids = [node1.sendtoaddress(node1.getnewaddress(), 1) for _ in range(3)]\n         assert(allInvsMatch(txids, test_node))\n+        node1.generate(1) # Clear mempool\n         test_node.clear_invs()\n \n         # Change tx fee rate to 10 sat/byte and test they are no longer received\n         node1.settxfee(Decimal(\"0.00010000\"))\n-        [node1.sendtoaddress(node1.getnewaddress(), 1) for x in range(3)]\n+        [node1.sendtoaddress(node1.getnewaddress(), 1) for _ in range(3)]\n         sync_mempools(self.nodes) # must be sure node 0 has received all txs \n         time.sleep(10) # wait 10 secs to be sure its doesn't relay any\n         assert(allInvsMatch([], test_node))\n+        node1.generate(1) # Clear mempool\n         test_node.clear_invs()\n \n         # Remove fee filter and check that txs are received again\n         test_node.send_filter(0)\n-        txids = [node1.sendtoaddress(node1.getnewaddress(), 1) for x in range(3)]\n+        txids = [node1.sendtoaddress(node1.getnewaddress(), 1) for _ in range(3)]\n         assert(allInvsMatch(txids, test_node))\n+        node1.generate(1) # Clear mempool\n         test_node.clear_invs()\n \n if __name__ == '__main__':"
      }
    ]
  }
]