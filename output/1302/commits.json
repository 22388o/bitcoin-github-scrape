[
  {
    "sha": "29b79e4c0ea6b83281ba782d109a77bac47933d8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOWI3OWU0YzBlYTZiODMyODFiYTc4MmQxMDlhNzdiYWM0NzkzM2Q4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-05-14T17:53:02Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-05-14T18:01:26Z"
      },
      "message": "Get rid of snprintf (except one) with fixed buffers, shorten code\n\n- Use strprintf or vstrprintf instead of snprintf",
      "tree": {
        "sha": "bad3aee8e8bbce5b6e150eb5a29db33943dd5dc6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bad3aee8e8bbce5b6e150eb5a29db33943dd5dc6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/29b79e4c0ea6b83281ba782d109a77bac47933d8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29b79e4c0ea6b83281ba782d109a77bac47933d8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/29b79e4c0ea6b83281ba782d109a77bac47933d8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29b79e4c0ea6b83281ba782d109a77bac47933d8/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a6f18e4686d764a62905b8d8cd316dcbd40bb17d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6f18e4686d764a62905b8d8cd316dcbd40bb17d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a6f18e4686d764a62905b8d8cd316dcbd40bb17d"
      }
    ],
    "stats": {
      "total": 118,
      "additions": 37,
      "deletions": 81
    },
    "files": [
      {
        "sha": "15e1adb8b817c6ff9d3f092e9f361b2ea82173b3",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 76,
        "changes": 112,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29b79e4c0ea6b83281ba782d109a77bac47933d8/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29b79e4c0ea6b83281ba782d109a77bac47933d8/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=29b79e4c0ea6b83281ba782d109a77bac47933d8",
        "patch": "@@ -180,8 +180,6 @@ int GetRandInt(int nMax)\n \n \n \n-\n-\n inline int OutputDebugStringF(const char* pszFormat, ...)\n {\n     int ret = 0;\n@@ -228,68 +226,30 @@ inline int OutputDebugStringF(const char* pszFormat, ...)\n     {\n         static CCriticalSection cs_OutputDebugStringF;\n \n-        // accumulate a line at a time\n+        // accumulate and output a line at a time\n         {\n             LOCK(cs_OutputDebugStringF);\n-            static char pszBuffer[50000];\n-            static char* pend;\n-            if (pend == NULL)\n-                pend = pszBuffer;\n+            static std::string buffer;\n+\n             va_list arg_ptr;\n             va_start(arg_ptr, pszFormat);\n-            int limit = END(pszBuffer) - pend - 2;\n-            int ret = _vsnprintf(pend, limit, pszFormat, arg_ptr);\n+            buffer += vstrprintf(pszFormat, arg_ptr);\n             va_end(arg_ptr);\n-            if (ret < 0 || ret >= limit)\n-            {\n-                pend = END(pszBuffer) - 2;\n-                *pend++ = '\\n';\n-            }\n-            else\n-                pend += ret;\n-            *pend = '\\0';\n-            char* p1 = pszBuffer;\n-            char* p2;\n-            while ((p2 = strchr(p1, '\\n')))\n+\n+            int line_start = 0, line_end;\n+            while((line_end = buffer.find('\\n', line_start)) != -1)\n             {\n-                p2++;\n-                char c = *p2;\n-                *p2 = '\\0';\n-                OutputDebugStringA(p1);\n-                *p2 = c;\n-                p1 = p2;\n+                OutputDebugStringA(buffer.substr(line_start, line_end - line_start).c_str());\n+                line_start = line_end + 1;\n             }\n-            if (p1 != pszBuffer)\n-                memmove(pszBuffer, p1, pend - p1 + 1);\n-            pend -= (p1 - pszBuffer);\n+            buffer.erase(0, line_start);\n         }\n     }\n #endif\n     return ret;\n }\n \n-\n-// Safer snprintf\n-//  - prints up to limit-1 characters\n-//  - output string is always null terminated even if limit reached\n-//  - return value is the number of characters actually printed\n-int my_snprintf(char* buffer, size_t limit, const char* format, ...)\n-{\n-    if (limit == 0)\n-        return 0;\n-    va_list arg_ptr;\n-    va_start(arg_ptr, format);\n-    int ret = _vsnprintf(buffer, limit, format, arg_ptr);\n-    va_end(arg_ptr);\n-    if (ret < 0 || ret >= (int)limit)\n-    {\n-        ret = limit - 1;\n-        buffer[limit-1] = 0;\n-    }\n-    return ret;\n-}\n-\n-string real_strprintf(const std::string &format, int dummy, ...)\n+string vstrprintf(const std::string &format, va_list ap)\n {\n     char buffer[50000];\n     char* p = buffer;\n@@ -298,7 +258,7 @@ string real_strprintf(const std::string &format, int dummy, ...)\n     loop\n     {\n         va_list arg_ptr;\n-        va_start(arg_ptr, dummy);\n+        va_copy(arg_ptr, ap);\n         ret = _vsnprintf(p, limit, format.c_str(), arg_ptr);\n         va_end(arg_ptr);\n         if (ret >= 0 && ret < limit)\n@@ -316,19 +276,22 @@ string real_strprintf(const std::string &format, int dummy, ...)\n     return str;\n }\n \n+string real_strprintf(const std::string &format, int dummy, ...)\n+{\n+    va_list arg_ptr;\n+    va_start(arg_ptr, dummy);\n+    string str = vstrprintf(format, arg_ptr);\n+    va_end(arg_ptr);\n+    return str;\n+}\n+\n bool error(const char *format, ...)\n {\n-    char buffer[50000];\n-    int limit = sizeof(buffer);\n     va_list arg_ptr;\n     va_start(arg_ptr, format);\n-    int ret = _vsnprintf(buffer, limit, format, arg_ptr);\n+    std::string str = vstrprintf(format, arg_ptr);\n     va_end(arg_ptr);\n-    if (ret < 0 || ret >= limit)\n-    {\n-        buffer[limit - 1] = 0;\n-    }\n-    printf(\"ERROR: %s\\n\", buffer);\n+    printf(\"ERROR: %s\\n\", str.c_str());\n     return false;\n }\n \n@@ -756,7 +719,7 @@ bool WildcardMatch(const string& str, const string& mask)\n \n \n \n-void FormatException(char* pszMessage, std::exception* pex, const char* pszThread)\n+static std::string FormatException(std::exception* pex, const char* pszThread)\n {\n #ifdef WIN32\n     char pszModule[MAX_PATH] = \"\";\n@@ -765,37 +728,34 @@ void FormatException(char* pszMessage, std::exception* pex, const char* pszThrea\n     const char* pszModule = \"bitcoin\";\n #endif\n     if (pex)\n-        snprintf(pszMessage, 1000,\n+        return strprintf(\n             \"EXCEPTION: %s       \\n%s       \\n%s in %s       \\n\", typeid(*pex).name(), pex->what(), pszModule, pszThread);\n     else\n-        snprintf(pszMessage, 1000,\n+        return strprintf(\n             \"UNKNOWN EXCEPTION       \\n%s in %s       \\n\", pszModule, pszThread);\n }\n \n void LogException(std::exception* pex, const char* pszThread)\n {\n-    char pszMessage[10000];\n-    FormatException(pszMessage, pex, pszThread);\n-    printf(\"\\n%s\", pszMessage);\n+    std::string message = FormatException(pex, pszThread);\n+    printf(\"\\n%s\", message.c_str());\n }\n \n void PrintException(std::exception* pex, const char* pszThread)\n {\n-    char pszMessage[10000];\n-    FormatException(pszMessage, pex, pszThread);\n-    printf(\"\\n\\n************************\\n%s\\n\", pszMessage);\n-    fprintf(stderr, \"\\n\\n************************\\n%s\\n\", pszMessage);\n-    strMiscWarning = pszMessage;\n+    std::string message = FormatException(pex, pszThread);\n+    printf(\"\\n\\n************************\\n%s\\n\", message.c_str());\n+    fprintf(stderr, \"\\n\\n************************\\n%s\\n\", message.c_str());\n+    strMiscWarning = message;\n     throw;\n }\n \n void PrintExceptionContinue(std::exception* pex, const char* pszThread)\n {\n-    char pszMessage[10000];\n-    FormatException(pszMessage, pex, pszThread);\n-    printf(\"\\n\\n************************\\n%s\\n\", pszMessage);\n-    fprintf(stderr, \"\\n\\n************************\\n%s\\n\", pszMessage);\n-    strMiscWarning = pszMessage;\n+    std::string message = FormatException(pex, pszThread);\n+    printf(\"\\n\\n************************\\n%s\\n\", message.c_str());\n+    fprintf(stderr, \"\\n\\n************************\\n%s\\n\", message.c_str());\n+    strMiscWarning = message;\n }\n \n boost::filesystem::path GetDefaultDataDir()"
      },
      {
        "sha": "79f8a7a5b04fe4c4edb43fef19518234d94e33ad",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29b79e4c0ea6b83281ba782d109a77bac47933d8/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29b79e4c0ea6b83281ba782d109a77bac47933d8/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=29b79e4c0ea6b83281ba782d109a77bac47933d8",
        "patch": "@@ -43,11 +43,6 @@ static const int64 CENT = 1000000;\n #define ARRAYLEN(array)     (sizeof(array)/sizeof((array)[0]))\n #define printf              OutputDebugStringF\n \n-#ifdef snprintf\n-#undef snprintf\n-#endif\n-#define snprintf my_snprintf\n-\n #ifndef PRI64d\n #if defined(_MSC_VER) || defined(__MSVCRT__)\n #define PRI64d  \"I64d\"\n@@ -133,6 +128,7 @@ int my_snprintf(char* buffer, size_t limit, const char* format, ...);\n */\n std::string real_strprintf(const std::string &format, int dummy, ...);\n #define strprintf(format, ...) real_strprintf(format, 0, __VA_ARGS__)\n+std::string vstrprintf(const std::string &format, va_list ap);\n \n bool error(const char *format, ...);\n void LogException(std::exception* pex, const char* pszThread);"
      }
    ]
  }
]