dcousens,2015-11-30T05:33:23Z,Wasn't this already closed?\nhttps://github.com/bitcoin/bitcoin/pull/7119\n,https://github.com/bitcoin/bitcoin/pull/7132#issuecomment-160519636,160519636,
petertodd,2015-11-30T05:35:44Z,@dcousens The closed version defaulted to opt-in=true.\n,https://github.com/bitcoin/bitcoin/pull/7132#issuecomment-160519987,160519987,
rnicoll,2015-11-30T12:59:32Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/7132#issuecomment-160621384,160621384,
ghost,2015-11-30T18:50:13Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/7132#issuecomment-160722177,160722177,
dcousens,2015-12-01T00:27:14Z,"utACK, but does the wallet actually support the re-creation of a transaction in any sane way? Or is this a political thing?\n\nconcept ACK only if the wallet actually allows you to re-broadcast a replacement.\n",https://github.com/bitcoin/bitcoin/pull/7132#issuecomment-160807710,160807710,
gmaxwell,2015-12-01T01:03:48Z,"@dcousens I suppose it's useful for testing software-- e.g. if you want something that identifies these transactions you need to generate some, if nothing else. Actual replacement will be a non-trivial amount of work.  Concept ACK at least...\n",https://github.com/bitcoin/bitcoin/pull/7132#issuecomment-160813412,160813412,
dcousens,2015-12-01T01:07:00Z,"> if you want something that identifies these transactions you need to generate some, if nothing else\n\nThen use `sendrawtransaction`?\n\n> Actual replacement will be a non-trivial amount of work.\n\nIMHO, then that is what should prefix this flag.  Otherwise its just misleading.\n",https://github.com/bitcoin/bitcoin/pull/7132#issuecomment-160813916,160813916,
luke-jr,2015-12-01T01:09:52Z,"Real world use case: Core's wallet is used in day-to-day operation, but occasionally stuck transactions need replacing to get confirmed, which the user then uses an external script for. It's not pretty, but it's a real use case.\n\nIf it was only needed for testing stuff, I'd say +1 to just telling people to use sendrawtransaction also - or modify the code.\n",https://github.com/bitcoin/bitcoin/pull/7132#issuecomment-160814317,160814317,
petertodd,2015-12-01T01:10:58Z,"@dcousens I have scripts that do the rebroadcast, and using those scripts is a pain if Bitcoin Core isn't already sending txs with opt-in enabled, allowing those scripts to be used with existing txs. I'm sure we'll have even better support in the future, but this is a trivial first-step.\n\nParticularly with the opt-in defaulting to false, I can't see how this is political - we're just making it a",https://github.com/bitcoin/bitcoin/pull/7132#issuecomment-160814479,160814479,
dcousens,2015-12-01T01:17:43Z,"> Real world use case: Core's wallet is used in day-to-day operation, but occasionally stuck transactions need replacing to get confirmed, which the user then uses an external script for. It's not pretty, but it's a real use case.\n\nSure,  concept ACK then.\n\n>  I can't see how this is political - we're just making it a little easier to use a feature that we've already merged.\n\nIf you don't ac",https://github.com/bitcoin/bitcoin/pull/7132#issuecomment-160815935,160815935,
petertodd,2015-12-02T00:57:03Z,Rebased\n,https://github.com/bitcoin/bitcoin/pull/7132#issuecomment-161145124,161145124,
petertodd,2015-12-02T04:25:09Z,"Just changed this to set nSequence to maxint-2 instead, so that more of the nSequence bits are identical to non-opt-in behavior.\n\nThis might come in handy if we, for instance, ever implement proof-of-stake blocksize voting and need a default option that matches what most wallets already do.\n",https://github.com/bitcoin/bitcoin/pull/7132#issuecomment-161177325,161177325,
dcousens,2015-12-02T04:31:33Z,"re-ACK ~~, but, if the idea is future proofing it.  Why not just allow say 64 `nSequence` bits?~~\n",https://github.com/bitcoin/bitcoin/pull/7132#issuecomment-161177848,161177848,
petertodd,2015-12-02T04:35:14Z,"What do you mean by ""100 nSequence bits""?\n\nOn 2 December 2015 12:32:11 GMT+08:00, Daniel Cousens notifications@github.com wrote:\n\n> re-ACK, but, if the idea is future proofing it.  Why not just allow say\n> 100 `nSequence` bits?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/bitcoin/bitcoin/pull/7132#issuecomment-161177848\n",https://github.com/bitcoin/bitcoin/pull/7132#issuecomment-161178137,161178137,
dcousens,2015-12-02T04:37:24Z,`maxint-64`\n,https://github.com/bitcoin/bitcoin/pull/7132#issuecomment-161178338,161178338,
petertodd,2015-12-02T04:40:48Z,"Sorry, I don't see what's the advantage of that; maxint-2 seems simpler.\n\nOn 2 December 2015 12:38:06 GMT+08:00, Daniel Cousens notifications@github.com wrote:\n\n> `maxint-64`\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/bitcoin/bitcoin/pull/7132#issuecomment-161178338\n",https://github.com/bitcoin/bitcoin/pull/7132#issuecomment-161178597,161178597,
dcousens,2015-12-02T04:45:36Z,"@petertodd my understanding is you're expanding the non-opt-in space by 1 to allow for possible future usage.\nWhy only increase that space by 1 bit, and not say 5 bits?\n",https://github.com/bitcoin/bitcoin/pull/7132#issuecomment-161179068,161179068,
petertodd,2015-12-02T04:46:38Z,"Oh! That's not at all what I'm doing! This is just the wallet code; I'm changing what txs the wallet produces, not changing the rules for what is considered RBF opt-in.\n\nOn 2 December 2015 12:43:47 GMT+08:00, Daniel Cousens notifications@github.com wrote:\n\n> @petertodd my understanding is you're expanding the non-opt-in space by\n> 1 to allow for possible future usage.\n> Why only increase tha",https://github.com/bitcoin/bitcoin/pull/7132#issuecomment-161179327,161179327,
dcousens,2015-12-02T04:49:55Z,"@petertodd my bad.   Lost context.\n\nOn that note then, why not `0` as discussed in https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-159778915?\n",https://github.com/bitcoin/bitcoin/pull/7132#issuecomment-161180081,161180081,
petertodd,2015-12-02T08:58:34Z,"@dcousens Because of https://github.com/bitcoin/bitcoin/pull/7132#issuecomment-161177325\n\nRemember that all we need is for all users' to be using the same nSequence number for a given type of tx; for privacy the common standard is what matters, not exactly what number we pick.\n",https://github.com/bitcoin/bitcoin/pull/7132#issuecomment-161225542,161225542,
dcousens,2015-12-03T02:58:21Z,Sure.\n,https://github.com/bitcoin/bitcoin/pull/7132#issuecomment-161501654,161501654,
jtimon,2016-01-03T19:50:53Z,Concept ACK\n,https://github.com/bitcoin/bitcoin/pull/7132#issuecomment-168534831,168534831,
jonasschnelli,2016-01-20T13:00:38Z,"Tend to NACK.\nI think there should be an option to selective opt-in a wtx. I guess some users like to use RBF by default, but still want to capability to create a non-RBF transaction if they spend to a ""0-conf-merchant"" (BitPay, Coinbase, etc.).\n\nI think base work for this (starting with rawtx command) could be #7159.\n",https://github.com/bitcoin/bitcoin/pull/7132#issuecomment-173196753,173196753,
laanwj,2016-04-25T09:42:44Z,"Agree with @jonasschnelli here, a global option is too coarse, need a way to have control over this per transaction.\n",https://github.com/bitcoin/bitcoin/pull/7132#issuecomment-214237204,214237204,
petertodd,2016-04-25T11:28:39Z,"Why not both?\n\nOn 25 April 2016 05:43:48 GMT-04:00, ""Wladimir J. van der Laan"" notifications@github.com wrote:\n\n> Agree with @jonasschnelli here, a global option is too coarse, need a\n> way to have control over this per transaction.\n> \n> ---\n> \n> You are receiving this because you were mentioned.\n> Reply to this email directly or view it on GitHub:\n> https://github.com/bitcoin/bitcoin/p",https://github.com/bitcoin/bitcoin/pull/7132#issuecomment-214273403,214273403,
laanwj,2016-04-25T11:56:33Z,"Especially as it's aimed at third-party scripts it is better if those scripts can specify the option, without requiring the user to change yet another option before they can be used.\n",https://github.com/bitcoin/bitcoin/pull/7132#issuecomment-214281661,214281661,
petertodd,2016-05-20T14:49:25Z,Rebased\n,https://github.com/bitcoin/bitcoin/pull/7132#issuecomment-220626862,220626862,
btcdrak,2016-06-14T10:36:21Z,needs rebase\n,https://github.com/bitcoin/bitcoin/pull/7132#issuecomment-225843521,225843521,
laanwj,2016-06-14T11:24:49Z,"@arowser can you stop posting ""Can one of the admins verify this patch?"" in every pull, this is annoying and completely redundant. You can help by reviewing or testing the code.\n",https://github.com/bitcoin/bitcoin/pull/7132#issuecomment-225852919,225852919,
petertodd,2016-06-15T16:53:35Z,Rebased\n,https://github.com/bitcoin/bitcoin/pull/7132#issuecomment-226249523,226249523,
instagibbs,2016-06-17T13:44:46Z,"Would this work with `-mempoolreplacement=0` ? Seems like the node will reject these. Perhaps check for that flag too.\n\nfurther nit: anything ""optin"" will become ""optout"" if the default changes, so perhaps: ""sendfullrbf""? Makes it clearer it's about sending, not mempool replacement.  \n\nconcept ACK, I'd really like something for 0.13.\n",https://github.com/bitcoin/bitcoin/pull/7132#issuecomment-226772313,226772313,
laanwj,2016-08-19T10:10:32Z,"Is there anything blocking this? (besides needing rebase again, sorry)\n",https://github.com/bitcoin/bitcoin/pull/7132#issuecomment-240980762,240980762,
MarcoFalke,2016-08-20T08:25:12Z,Concept ACK. Needs rebase.\n,https://github.com/bitcoin/bitcoin/pull/7132#issuecomment-241187044,241187044,
laanwj,2016-08-26T10:17:34Z,Closing in favor of #8601\n,https://github.com/bitcoin/bitcoin/pull/7132#issuecomment-242691443,242691443,
luke-jr,2015-11-30T05:21:32Z,"Parameter names shouldn't imply a default value (as ""opt-in"" does).\n",https://github.com/bitcoin/bitcoin/pull/7132#discussion_r46109520,46109520,src/init.cpp
dcousens,2015-11-30T05:34:24Z,Perhaps `-walletusefullrbf`\n,https://github.com/bitcoin/bitcoin/pull/7132#discussion_r46109906,46109906,src/init.cpp
petertodd,2015-11-30T05:35:09Z,@luke-jr What's your suggested name?\n,https://github.com/bitcoin/bitcoin/pull/7132#discussion_r46109929,46109929,src/init.cpp
luke-jr,2015-11-30T07:20:58Z,-walletrbf maybe?\n,https://github.com/bitcoin/bitcoin/pull/7132#discussion_r46114124,46114124,src/init.cpp
luke-jr,2015-11-30T07:21:27Z,"Also, don't forget the  #ifdef ENABLE_WALLET guard...\n",https://github.com/bitcoin/bitcoin/pull/7132#discussion_r46114152,46114152,src/init.cpp
petertodd,2015-12-01T01:05:58Z,I think everything is under an ENABLE_WALLET guard; did I miss something?\n,https://github.com/bitcoin/bitcoin/pull/7132#discussion_r46228411,46228411,src/init.cpp
petertodd,2015-12-01T01:07:33Z,"Re: name, other names like -spendzeroconfchange and -sendfreetransactions have similar grammar as -optintofullrbf, so I'm inclined to continue that pattern.\n",https://github.com/bitcoin/bitcoin/pull/7132#discussion_r46228506,46228506,src/init.cpp
luke-jr,2015-12-01T01:07:59Z,"No, I just failed to expand more of the code visible here.\n",https://github.com/bitcoin/bitcoin/pull/7132#discussion_r46228535,46228535,src/init.cpp
petertodd,2015-12-01T01:12:04Z,"Cool, thanks for reminding me though - that it was under ENABLE_WALLET was just luck.\n",https://github.com/bitcoin/bitcoin/pull/7132#discussion_r46228846,46228846,src/init.cpp
jtimon,2016-01-03T19:49:54Z,"This is  confusing, is it full RBF or opt-in RBF ?\nWe've been using fullRBF to refer to the relay policy that ignores the opt-in flag and always does RBF regardless of the sender's intentions.\nCan you just call it optinRBF instead of optinfullRBF ?  \n",https://github.com/bitcoin/bitcoin/pull/7132#discussion_r48696299,48696299,src/init.cpp
MarcoFalke,2016-01-08T20:40:13Z,Agree with @luke-jr 's suggestion: `-walletrbf`.\n,https://github.com/bitcoin/bitcoin/pull/7132#discussion_r49235459,49235459,src/init.cpp
jtimon,2016-06-17T14:15:39Z,Maybe constants for 1 and 2?\n,https://github.com/bitcoin/bitcoin/pull/7132#discussion_r67516631,67516631,src/wallet/wallet.cpp
instagibbs,2016-06-17T14:28:18Z,"those numbers aren't special, the 1st number just has to be bigger than 1. Not sure if that's a candidate for constant. \n",https://github.com/bitcoin/bitcoin/pull/7132#discussion_r67518772,67518772,src/wallet/wallet.cpp
jtimon,2016-06-17T14:33:16Z,Mqybe more documentation solves it. I just cannot look at that line without wondering what the heck 1 and 2 mean...\n,https://github.com/bitcoin/bitcoin/pull/7132#discussion_r67519624,67519624,src/wallet/wallet.cpp
instagibbs,2016-06-17T14:33:56Z,Fair enough. The comment should be revised further.\n,https://github.com/bitcoin/bitcoin/pull/7132#discussion_r67519745,67519745,src/wallet/wallet.cpp
petertodd,2016-06-18T21:13:12Z,"How about this comment:\n\n""BIP125 defines opt-in RBF as any nSequence < maxint-1, so we use the highest possible value in that range (maxint-2) to avoid conflicting with other possible uses of nSequence, and in the spirit of ""smallest posible change from prior behavior""""\n",https://github.com/bitcoin/bitcoin/pull/7132#discussion_r67606725,67606725,src/wallet/wallet.cpp
MarcoFalke,2016-08-20T08:24:28Z,"Nit: Maybe we could introduce `std::numeric_limits<unsigned int>::max()-1` as some constant somewhere. `SEQUENCE_OPT_OUT = std::numeric_limits<unsigned int>::max()-1` is used in other places (mempool) as well.\n\nAnd then comment here ""Use any value less than SEQUENCE_OPT_OUT according to BIP125."" or use the comment you wrote above.\n",https://github.com/bitcoin/bitcoin/pull/7132#discussion_r75575101,75575101,src/wallet/wallet.cpp
jtimon,2016-08-20T09:37:23Z,"```\nfOptIntoFullRbf ? SEQUENCE_OPT_OUT -1 : SEQUENCE_OPT_OUT\n```\n\nIt's clrearer to me than:\n\n```\n std::numeric_limits<unsigned int>::max() - (fOptIntoFullRbf ? 2 : 1)\n```\n\nSpecially with the """"Use any value less than SEQUENCE_OPT_OUT..."" comment.\n",https://github.com/bitcoin/bitcoin/pull/7132#discussion_r75575901,75575901,src/wallet/wallet.cpp
