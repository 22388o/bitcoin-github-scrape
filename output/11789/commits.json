[
  {
    "sha": "bba1c54edd73406e66ddae5ae2ac90183c3582bf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYmExYzU0ZWRkNzM0MDZlNjZkZGFlNWFlMmFjOTAxODNjMzU4MmJm",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-29T18:21:51Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-29T18:29:15Z"
      },
      "message": "[tests] Improve logging shutdown and add hint for combine_logs",
      "tree": {
        "sha": "732f73474a8e9cca26dd4bef1112442e6d4988ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/732f73474a8e9cca26dd4bef1112442e6d4988ce"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bba1c54edd73406e66ddae5ae2ac90183c3582bf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bba1c54edd73406e66ddae5ae2ac90183c3582bf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bba1c54edd73406e66ddae5ae2ac90183c3582bf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bba1c54edd73406e66ddae5ae2ac90183c3582bf/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "32c9b570fceaad76536a2c881b4dc1d961d9b306",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32c9b570fceaad76536a2c881b4dc1d961d9b306",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/32c9b570fceaad76536a2c881b4dc1d961d9b306"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 6,
      "deletions": 4
    },
    "files": [
      {
        "sha": "102babb9f41f45b35a0f6025655a6a2d589e2d61",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bba1c54edd73406e66ddae5ae2ac90183c3582bf/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bba1c54edd73406e66ddae5ae2ac90183c3582bf/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=bba1c54edd73406e66ddae5ae2ac90183c3582bf",
        "patch": "@@ -167,14 +167,16 @@ def main(self):\n \n         if success == TestStatus.PASSED:\n             self.log.info(\"Tests successful\")\n-            sys.exit(TEST_EXIT_PASSED)\n+            exit_code = TEST_EXIT_PASSED\n         elif success == TestStatus.SKIPPED:\n             self.log.info(\"Test skipped\")\n-            sys.exit(TEST_EXIT_SKIPPED)\n+            exit_code = TEST_EXIT_SKIPPED\n         else:\n             self.log.error(\"Test failed. Test logging available at %s/test_framework.log\", self.options.tmpdir)\n-            logging.shutdown()\n-            sys.exit(TEST_EXIT_FAILED)\n+            self.log.error(\"Hint: Call {} '{}' to consolidate all logs\".format(os.path.normpath(os.path.dirname(os.path.realpath(__file__)) + \"/../combine_logs.py\"), self.options.tmpdir))\n+            exit_code = TEST_EXIT_FAILED\n+        logging.shutdown()\n+        sys.exit(exit_code)\n \n     # Methods to override in subclass test scripts.\n     def set_test_params(self):"
      }
    ]
  },
  {
    "sha": "dba94ead0cb4ca90aeb894aca0a87a34e4dc9886",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYmE5NGVhZDBjYjRjYTkwYWViODk0YWNhMGE4N2EzNGU0ZGM5ODg2",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-29T18:25:23Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-29T20:10:05Z"
      },
      "message": "[tests] [travis-ci] Move Travis functional test log post processing to test_runner",
      "tree": {
        "sha": "a360ee705ac212eb7c37091d4f8e60eb977ee2b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a360ee705ac212eb7c37091d4f8e60eb977ee2b4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dba94ead0cb4ca90aeb894aca0a87a34e4dc9886",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dba94ead0cb4ca90aeb894aca0a87a34e4dc9886",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dba94ead0cb4ca90aeb894aca0a87a34e4dc9886",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dba94ead0cb4ca90aeb894aca0a87a34e4dc9886/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bba1c54edd73406e66ddae5ae2ac90183c3582bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bba1c54edd73406e66ddae5ae2ac90183c3582bf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bba1c54edd73406e66ddae5ae2ac90183c3582bf"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 16,
      "deletions": 21
    },
    "files": [
      {
        "sha": "54fe6896860011eda26591f9309250523b34bdf5",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 0,
        "deletions": 16,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dba94ead0cb4ca90aeb894aca0a87a34e4dc9886/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dba94ead0cb4ca90aeb894aca0a87a34e4dc9886/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=dba94ead0cb4ca90aeb894aca0a87a34e4dc9886",
        "patch": "@@ -4,7 +4,6 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Base class for RPC testing.\"\"\"\n \n-from collections import deque\n from enum import Enum\n import logging\n import optparse\n@@ -149,21 +148,6 @@ def main(self):\n             shutil.rmtree(self.options.tmpdir)\n         else:\n             self.log.warning(\"Not cleaning up dir %s\" % self.options.tmpdir)\n-            if os.getenv(\"PYTHON_DEBUG\", \"\"):\n-                # Dump the end of the debug logs, to aid in debugging rare\n-                # travis failures.\n-                import glob\n-                filenames = [self.options.tmpdir + \"/test_framework.log\"]\n-                filenames += glob.glob(self.options.tmpdir + \"/node*/regtest/debug.log\")\n-                MAX_LINES_TO_PRINT = 1000\n-                for fn in filenames:\n-                    try:\n-                        with open(fn, 'r') as f:\n-                            print(\"From\", fn, \":\")\n-                            print(\"\".join(deque(f, MAX_LINES_TO_PRINT)))\n-                    except OSError:\n-                        print(\"Opening file %s failed.\" % fn)\n-                        traceback.print_exc()\n \n         if success == TestStatus.PASSED:\n             self.log.info(\"Tests successful\")"
      },
      {
        "sha": "4407d3bf69552f1d42e61683fb7964d56862ade5",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 16,
        "deletions": 5,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dba94ead0cb4ca90aeb894aca0a87a34e4dc9886/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dba94ead0cb4ca90aeb894aca0a87a34e4dc9886/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=dba94ead0cb4ca90aeb894aca0a87a34e4dc9886",
        "patch": "@@ -15,6 +15,7 @@\n \"\"\"\n \n import argparse\n+from collections import deque\n import configparser\n import datetime\n import os\n@@ -314,7 +315,7 @@ def run_tests(test_list, src_dir, build_dir, exeext, tmpdir, jobs=1, enable_cove\n     max_len_name = len(max(test_list, key=len))\n \n     for _ in range(len(test_list)):\n-        test_result, stdout, stderr = job_queue.get_next()\n+        test_result, testdir, stdout, stderr = job_queue.get_next()\n         test_results.append(test_result)\n \n         if test_result.status == \"Passed\":\n@@ -325,6 +326,14 @@ def run_tests(test_list, src_dir, build_dir, exeext, tmpdir, jobs=1, enable_cove\n             print(\"\\n%s%s%s failed, Duration: %s s\\n\" % (BOLD[1], test_result.name, BOLD[0], test_result.time))\n             print(BOLD[1] + 'stdout:\\n' + BOLD[0] + stdout + '\\n')\n             print(BOLD[1] + 'stderr:\\n' + BOLD[0] + stderr + '\\n')\n+            if os.getenv(\"PYTHON_DEBUG\", \"\") and os.path.isdir(testdir):\n+                # Print the logs on travis, so they are preserved when the vm is disposed\n+                print('{}Combine the logs and print the last {} lines ...{}'.format(BOLD[1], 4000, BOLD[0]))\n+                print('\\n============')\n+                print('{}Combined log for {}:{}'.format(BOLD[1], testdir, BOLD[0]))\n+                print('============\\n')\n+                combined_logs, _ = subprocess.Popen([os.path.join(tests_dir, 'combine_logs.py'), '-c', testdir], universal_newlines=True, stdout=subprocess.PIPE).communicate()\n+                print(\"\\n\".join(deque(combined_logs.splitlines(), 4000)))\n \n     print_results(test_results, max_len_name, (int(time.time() - time0)))\n \n@@ -389,13 +398,15 @@ def get_next(self):\n             log_stdout = tempfile.SpooledTemporaryFile(max_size=2**16)\n             log_stderr = tempfile.SpooledTemporaryFile(max_size=2**16)\n             test_argv = t.split()\n-            tmpdir = [\"--tmpdir=%s/%s_%s\" % (self.tmpdir, re.sub(\".py$\", \"\", test_argv[0]), portseed)]\n+            testdir = \"{}/{}_{}\".format(self.tmpdir, re.sub(\".py$\", \"\", test_argv[0]), portseed)\n+            tmpdir_arg = [\"--tmpdir={}\".format(testdir)]\n             self.jobs.append((t,\n                               time.time(),\n-                              subprocess.Popen([self.tests_dir + test_argv[0]] + test_argv[1:] + self.flags + portseed_arg + tmpdir,\n+                              subprocess.Popen([self.tests_dir + test_argv[0]] + test_argv[1:] + self.flags + portseed_arg + tmpdir_arg,\n                                                universal_newlines=True,\n                                                stdout=log_stdout,\n                                                stderr=log_stderr),\n+                              testdir,\n                               log_stdout,\n                               log_stderr))\n         if not self.jobs:\n@@ -404,7 +415,7 @@ def get_next(self):\n             # Return first proc that finishes\n             time.sleep(.5)\n             for j in self.jobs:\n-                (name, time0, proc, log_out, log_err) = j\n+                (name, time0, proc, testdir, log_out, log_err) = j\n                 if os.getenv('TRAVIS') == 'true' and int(time.time() - time0) > 20 * 60:\n                     # In travis, timeout individual tests after 20 minutes (to stop tests hanging and not\n                     # providing useful output.\n@@ -422,7 +433,7 @@ def get_next(self):\n                     self.num_running -= 1\n                     self.jobs.remove(j)\n \n-                    return TestResult(name, status, int(time.time() - time0)), stdout, stderr\n+                    return TestResult(name, status, int(time.time() - time0)), testdir, stdout, stderr\n             print('.', end='', flush=True)\n \n class TestResult():"
      }
    ]
  },
  {
    "sha": "ff8a9b068ae15c569ce66abb58bf6f909b879a7d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZjhhOWIwNjhhZTE1YzU2OWNlNjZhYmI1OGJmNmY5MDliODc5YTdk",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-29T18:28:45Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-29T20:10:51Z"
      },
      "message": "[tests] Add combinedlogslen argument to test_runner.py\n\nInstead of calling combine_logs from test_runner when the environment variable\nPYTHON_DEBUG is set, add a combinedlogslen argument. This makes it easier\nto call when running locally, and allows a different length of combined logs\nto be printed.",
      "tree": {
        "sha": "d0bcebe682e9f256373fb42a96be99eefe4edd0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0bcebe682e9f256373fb42a96be99eefe4edd0d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff8a9b068ae15c569ce66abb58bf6f909b879a7d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff8a9b068ae15c569ce66abb58bf6f909b879a7d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ff8a9b068ae15c569ce66abb58bf6f909b879a7d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff8a9b068ae15c569ce66abb58bf6f909b879a7d/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dba94ead0cb4ca90aeb894aca0a87a34e4dc9886",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dba94ead0cb4ca90aeb894aca0a87a34e4dc9886",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dba94ead0cb4ca90aeb894aca0a87a34e4dc9886"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "d3dd37e76c543ca04fa0dc5a3c9c8d2abf6a3043",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff8a9b068ae15c569ce66abb58bf6f909b879a7d/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff8a9b068ae15c569ce66abb58bf6f909b879a7d/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=ff8a9b068ae15c569ce66abb58bf6f909b879a7d",
        "patch": "@@ -18,7 +18,6 @@ env:\n     - CCACHE_COMPRESS=1\n     - BASE_OUTDIR=$TRAVIS_BUILD_DIR/out\n     - SDK_URL=https://bitcoincore.org/depends-sources/sdks\n-    - PYTHON_DEBUG=1\n     - WINEDEBUG=fixme-all\n   matrix:\n # ARM\n@@ -79,7 +78,7 @@ script:\n     - export LD_LIBRARY_PATH=$TRAVIS_BUILD_DIR/depends/$HOST/lib\n     - if [ \"$RUN_TESTS\" = \"true\" ]; then travis_wait 30 make $MAKEJOBS check VERBOSE=1; fi\n     - if [ \"$TRAVIS_EVENT_TYPE\" = \"cron\" ]; then extended=\"--extended --exclude pruning,dbcrash\"; fi\n-    - if [ \"$RUN_TESTS\" = \"true\" ]; then test/functional/test_runner.py --coverage --quiet ${extended}; fi\n+    - if [ \"$RUN_TESTS\" = \"true\" ]; then test/functional/test_runner.py --combinedlogslen=4000 --coverage --quiet ${extended}; fi\n after_script:\n     - echo $TRAVIS_COMMIT_RANGE\n     - echo $TRAVIS_COMMIT_LOG"
      },
      {
        "sha": "8c5654a85d261b14a6e9e87cab014fda324aef66",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff8a9b068ae15c569ce66abb58bf6f909b879a7d/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff8a9b068ae15c569ce66abb58bf6f909b879a7d/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=ff8a9b068ae15c569ce66abb58bf6f909b879a7d",
        "patch": "@@ -175,6 +175,7 @@ def main():\n                                      epilog='''\n     Help text and arguments for individual test script:''',\n                                      formatter_class=argparse.RawTextHelpFormatter)\n+    parser.add_argument('--combinedlogslen', '-c', type=int, default=0, help='print a combined log (of length n lines) from all test nodes and test framework to the console on failure.')\n     parser.add_argument('--coverage', action='store_true', help='generate a basic coverage report for the RPC interface')\n     parser.add_argument('--exclude', '-x', help='specify a comma-separated-list of scripts to exclude.')\n     parser.add_argument('--extended', action='store_true', help='run the extended test suite in addition to the basic tests')\n@@ -267,9 +268,9 @@ def main():\n     if not args.keepcache:\n         shutil.rmtree(\"%s/test/cache\" % config[\"environment\"][\"BUILDDIR\"], ignore_errors=True)\n \n-    run_tests(test_list, config[\"environment\"][\"SRCDIR\"], config[\"environment\"][\"BUILDDIR\"], config[\"environment\"][\"EXEEXT\"], tmpdir, args.jobs, args.coverage, passon_args)\n+    run_tests(test_list, config[\"environment\"][\"SRCDIR\"], config[\"environment\"][\"BUILDDIR\"], config[\"environment\"][\"EXEEXT\"], tmpdir, args.jobs, args.coverage, passon_args, args.combinedlogslen)\n \n-def run_tests(test_list, src_dir, build_dir, exeext, tmpdir, jobs=1, enable_coverage=False, args=[]):\n+def run_tests(test_list, src_dir, build_dir, exeext, tmpdir, jobs=1, enable_coverage=False, args=[], combined_logs_len=0):\n     # Warn if bitcoind is already running (unix only)\n     try:\n         if subprocess.check_output([\"pidof\", \"bitcoind\"]) is not None:\n@@ -326,14 +327,14 @@ def run_tests(test_list, src_dir, build_dir, exeext, tmpdir, jobs=1, enable_cove\n             print(\"\\n%s%s%s failed, Duration: %s s\\n\" % (BOLD[1], test_result.name, BOLD[0], test_result.time))\n             print(BOLD[1] + 'stdout:\\n' + BOLD[0] + stdout + '\\n')\n             print(BOLD[1] + 'stderr:\\n' + BOLD[0] + stderr + '\\n')\n-            if os.getenv(\"PYTHON_DEBUG\", \"\") and os.path.isdir(testdir):\n-                # Print the logs on travis, so they are preserved when the vm is disposed\n-                print('{}Combine the logs and print the last {} lines ...{}'.format(BOLD[1], 4000, BOLD[0]))\n+            if combined_logs_len and os.path.isdir(testdir):\n+                # Print the final `combinedlogslen` lines of the combined logs\n+                print('{}Combine the logs and print the last {} lines ...{}'.format(BOLD[1], combined_logs_len, BOLD[0]))\n                 print('\\n============')\n                 print('{}Combined log for {}:{}'.format(BOLD[1], testdir, BOLD[0]))\n                 print('============\\n')\n                 combined_logs, _ = subprocess.Popen([os.path.join(tests_dir, 'combine_logs.py'), '-c', testdir], universal_newlines=True, stdout=subprocess.PIPE).communicate()\n-                print(\"\\n\".join(deque(combined_logs.splitlines(), 4000)))\n+                print(\"\\n\".join(deque(combined_logs.splitlines(), combined_logs_len)))\n \n     print_results(test_results, max_len_name, (int(time.time() - time0)))\n "
      }
    ]
  }
]