[
  {
    "sha": "facdeea2b25ef36e37b6ada58ea390a72d11a4b2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWNkZWVhMmIyNWVmMzZlMzdiNmFkYTU4ZWEzOTBhNzJkMTFhNGIy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-17T14:21:27Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-17T14:24:16Z"
      },
      "message": "net: Remove un-actionable TODO",
      "tree": {
        "sha": "26dbd2c26ffedc99c18086da46d79d388222435c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/26dbd2c26ffedc99c18086da46d79d388222435c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/facdeea2b25ef36e37b6ada58ea390a72d11a4b2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjGqQv+MS3Si9bRSDswnAOiMmtg0uD6ZNQBgtZdKKSxiCpQDk/4u1py+V9cIpHN\nXEO+tEbqG/QISU4ukTek5TBOvtVTOQUN2CPLdYKpAEsYDYYgiusaSCofONwZOE5Q\nmy5OjQ110sKIAPNcoHxAb9QdrlZdNTn/R0SRlu+6ZJz+BrHs6cX/C3M0IXjZQWEo\nSBt4+7i5SyYXs3YraWEsj8g7bJUm2iTIg9uj2f/WXrHI65LgqVcV5+MWNykWGQlc\nI4vxXFiClwrp/Megt7xyl8Fuh0FKfMhHVRwSCsDjho40Kh0dt4pLAIwsdh/s07pe\nIuOUZbfza60IfCxjZSrnt0US2lb3nPYrPdbpCJR5BghhmUOIUh8Gk8hrF2Qy99z7\nmfEYKJQSLp1KfXs6GqJInFQpXG68aJxX2jvEyvKfQeiOZdbSejqEH6eFsh4Po7g+\nvOXWae3seA7YuYUZhnh+O2sHoF1oxq/BWDRXxy1DXX4qIi05MvBW3KsULYiemNJo\nf6R+1Ife\n=MtBC\n-----END PGP SIGNATURE-----",
        "payload": "tree 26dbd2c26ffedc99c18086da46d79d388222435c\nparent dc5333d31f280e09bb1e8cdacfbe842f4ab9e69b\nauthor MarcoFalke <falke.marco@gmail.com> 1589725287 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1589725456 -0400\n\nnet: Remove un-actionable TODO\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/facdeea2b25ef36e37b6ada58ea390a72d11a4b2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/facdeea2b25ef36e37b6ada58ea390a72d11a4b2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/facdeea2b25ef36e37b6ada58ea390a72d11a4b2/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dc5333d31f280e09bb1e8cdacfbe842f4ab9e69b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc5333d31f280e09bb1e8cdacfbe842f4ab9e69b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dc5333d31f280e09bb1e8cdacfbe842f4ab9e69b"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 0,
      "deletions": 3
    },
    "files": [
      {
        "sha": "4ab73973b8606e9fa11462e530227cb26cda9c1a",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/facdeea2b25ef36e37b6ada58ea390a72d11a4b2/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/facdeea2b25ef36e37b6ada58ea390a72d11a4b2/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=facdeea2b25ef36e37b6ada58ea390a72d11a4b2",
        "patch": "@@ -360,8 +360,6 @@ class CAddress : public CService\n         READWRITEAS(CService, *this);\n     }\n \n-    // TODO: make private (improves encapsulation)\n-public:\n     ServiceFlags nServices;\n \n     // disk and network only\n@@ -410,7 +408,6 @@ class CInv\n     std::string GetCommand() const;\n     std::string ToString() const;\n \n-public:\n     int type;\n     uint256 hash;\n };"
      }
    ]
  },
  {
    "sha": "fabea6d404571d046365f4f083da3569d2cbf4f7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWJlYTZkNDA0NTcxZDA0NjM2NWY0ZjA4M2RhMzU2OWQyY2JmNGY3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-17T14:30:06Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-17T14:26:19Z"
      },
      "message": "net: Run clang-format on protocol.h\n\nCan be reviewed with the git diff flags\n-U0 --ignore-all-space --word-diff-regex=.",
      "tree": {
        "sha": "43abee42855d9e92062606d27520004d11859585",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/43abee42855d9e92062606d27520004d11859585"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fabea6d404571d046365f4f083da3569d2cbf4f7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjWzQv+KNiAVKJx04VkrKBpX8cq2cWMGtK20g8KR9H8IvlQgBTZ6opRR/OuZ5GO\n6MLYIA+OwxA8AJzs4JoILtZhuKlb3GKmsjtE8l0+CJaXCPxa49JaE/6onNsqSHRb\nJTdRaUegKWmq8eplYhUMrmdIYM9DslWWW7Ur9CzlYv1hUFb8rxFNv5UZXrWpbrik\nnMgYZyBzitkDt2LEhw5QuyhbpmW0/f7vhdtilLof+9blPn4rjfO1XRNM9ZdmC/ak\nAy2QjqrZBog3ta/IaBuAJxqc/fx6j9nQfBAETdDB6zP7/fr2xaS6VhI9YMBPsdjJ\nvmtdHXtnffxkoDknW2vxgWRKPU2zQTbulQ+Izc4fh4Q/myaBUBNKV9lPAdYCuHRF\n6KouKXgVosTecOE4DbkqOe49bJdT5koGqRTbqHqMX5nrb/ezLqM9ksc2ZKdGuHti\n6kZa0X+gM7sApYpr1qx2gfyZDLjbutfkXhFWMFbqVSl6HGPDplm2Suci60vZJA5Q\ng3bdoL1k\n=4zKR\n-----END PGP SIGNATURE-----",
        "payload": "tree 43abee42855d9e92062606d27520004d11859585\nparent facdeea2b25ef36e37b6ada58ea390a72d11a4b2\nauthor MarcoFalke <falke.marco@gmail.com> 1589725806 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1589725579 -0400\n\nnet: Run clang-format on protocol.h\n\nCan be reviewed with the git diff flags\n-U0 --ignore-all-space --word-diff-regex=.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fabea6d404571d046365f4f083da3569d2cbf4f7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fabea6d404571d046365f4f083da3569d2cbf4f7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fabea6d404571d046365f4f083da3569d2cbf4f7/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "facdeea2b25ef36e37b6ada58ea390a72d11a4b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/facdeea2b25ef36e37b6ada58ea390a72d11a4b2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/facdeea2b25ef36e37b6ada58ea390a72d11a4b2"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 37,
      "deletions": 36
    },
    "files": [
      {
        "sha": "8e1b8c588e260bd4d803746e90398f3759fc2339",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 37,
        "deletions": 36,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fabea6d404571d046365f4f083da3569d2cbf4f7/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fabea6d404571d046365f4f083da3569d2cbf4f7/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=fabea6d404571d046365f4f083da3569d2cbf4f7",
        "patch": "@@ -74,100 +74,100 @@ namespace NetMsgType {\n  * receiving node at the beginning of a connection.\n  * @see https://bitcoin.org/en/developer-reference#version\n  */\n-extern const char *VERSION;\n+extern const char* VERSION;\n /**\n  * The verack message acknowledges a previously-received version message,\n  * informing the connecting node that it can begin to send other messages.\n  * @see https://bitcoin.org/en/developer-reference#verack\n  */\n-extern const char *VERACK;\n+extern const char* VERACK;\n /**\n  * The addr (IP address) message relays connection information for peers on the\n  * network.\n  * @see https://bitcoin.org/en/developer-reference#addr\n  */\n-extern const char *ADDR;\n+extern const char* ADDR;\n /**\n  * The inv message (inventory message) transmits one or more inventories of\n  * objects known to the transmitting peer.\n  * @see https://bitcoin.org/en/developer-reference#inv\n  */\n-extern const char *INV;\n+extern const char* INV;\n /**\n  * The getdata message requests one or more data objects from another node.\n  * @see https://bitcoin.org/en/developer-reference#getdata\n  */\n-extern const char *GETDATA;\n+extern const char* GETDATA;\n /**\n  * The merkleblock message is a reply to a getdata message which requested a\n  * block using the inventory type MSG_MERKLEBLOCK.\n  * @since protocol version 70001 as described by BIP37.\n  * @see https://bitcoin.org/en/developer-reference#merkleblock\n  */\n-extern const char *MERKLEBLOCK;\n+extern const char* MERKLEBLOCK;\n /**\n  * The getblocks message requests an inv message that provides block header\n  * hashes starting from a particular point in the block chain.\n  * @see https://bitcoin.org/en/developer-reference#getblocks\n  */\n-extern const char *GETBLOCKS;\n+extern const char* GETBLOCKS;\n /**\n  * The getheaders message requests a headers message that provides block\n  * headers starting from a particular point in the block chain.\n  * @since protocol version 31800.\n  * @see https://bitcoin.org/en/developer-reference#getheaders\n  */\n-extern const char *GETHEADERS;\n+extern const char* GETHEADERS;\n /**\n  * The tx message transmits a single transaction.\n  * @see https://bitcoin.org/en/developer-reference#tx\n  */\n-extern const char *TX;\n+extern const char* TX;\n /**\n  * The headers message sends one or more block headers to a node which\n  * previously requested certain headers with a getheaders message.\n  * @since protocol version 31800.\n  * @see https://bitcoin.org/en/developer-reference#headers\n  */\n-extern const char *HEADERS;\n+extern const char* HEADERS;\n /**\n  * The block message transmits a single serialized block.\n  * @see https://bitcoin.org/en/developer-reference#block\n  */\n-extern const char *BLOCK;\n+extern const char* BLOCK;\n /**\n  * The getaddr message requests an addr message from the receiving node,\n  * preferably one with lots of IP addresses of other receiving nodes.\n  * @see https://bitcoin.org/en/developer-reference#getaddr\n  */\n-extern const char *GETADDR;\n+extern const char* GETADDR;\n /**\n  * The mempool message requests the TXIDs of transactions that the receiving\n  * node has verified as valid but which have not yet appeared in a block.\n  * @since protocol version 60002.\n  * @see https://bitcoin.org/en/developer-reference#mempool\n  */\n-extern const char *MEMPOOL;\n+extern const char* MEMPOOL;\n /**\n  * The ping message is sent periodically to help confirm that the receiving\n  * peer is still connected.\n  * @see https://bitcoin.org/en/developer-reference#ping\n  */\n-extern const char *PING;\n+extern const char* PING;\n /**\n  * The pong message replies to a ping message, proving to the pinging node that\n  * the ponging node is still alive.\n  * @since protocol version 60001 as described by BIP31.\n  * @see https://bitcoin.org/en/developer-reference#pong\n  */\n-extern const char *PONG;\n+extern const char* PONG;\n /**\n  * The notfound message is a reply to a getdata message which requested an\n  * object the receiving node does not have available for relay.\n  * @since protocol version 70001.\n  * @see https://bitcoin.org/en/developer-reference#notfound\n  */\n-extern const char *NOTFOUND;\n+extern const char* NOTFOUND;\n /**\n  * The filterload message tells the receiving peer to filter all relayed\n  * transactions and requested merkle blocks through the provided filter.\n@@ -176,7 +176,7 @@ extern const char *NOTFOUND;\n  *   70011 as described by BIP111.\n  * @see https://bitcoin.org/en/developer-reference#filterload\n  */\n-extern const char *FILTERLOAD;\n+extern const char* FILTERLOAD;\n /**\n  * The filteradd message tells the receiving peer to add a single element to a\n  * previously-set bloom filter, such as a new public key.\n@@ -185,7 +185,7 @@ extern const char *FILTERLOAD;\n  *   70011 as described by BIP111.\n  * @see https://bitcoin.org/en/developer-reference#filteradd\n  */\n-extern const char *FILTERADD;\n+extern const char* FILTERADD;\n /**\n  * The filterclear message tells the receiving peer to remove a previously-set\n  * bloom filter.\n@@ -194,64 +194,64 @@ extern const char *FILTERADD;\n  *   70011 as described by BIP111.\n  * @see https://bitcoin.org/en/developer-reference#filterclear\n  */\n-extern const char *FILTERCLEAR;\n+extern const char* FILTERCLEAR;\n /**\n  * Indicates that a node prefers to receive new block announcements via a\n  * \"headers\" message rather than an \"inv\".\n  * @since protocol version 70012 as described by BIP130.\n  * @see https://bitcoin.org/en/developer-reference#sendheaders\n  */\n-extern const char *SENDHEADERS;\n+extern const char* SENDHEADERS;\n /**\n  * The feefilter message tells the receiving peer not to inv us any txs\n  * which do not meet the specified min fee rate.\n  * @since protocol version 70013 as described by BIP133\n  */\n-extern const char *FEEFILTER;\n+extern const char* FEEFILTER;\n /**\n  * Contains a 1-byte bool and 8-byte LE version number.\n  * Indicates that a node is willing to provide blocks via \"cmpctblock\" messages.\n  * May indicate that a node prefers to receive new block announcements via a\n  * \"cmpctblock\" message rather than an \"inv\", depending on message contents.\n  * @since protocol version 70014 as described by BIP 152\n  */\n-extern const char *SENDCMPCT;\n+extern const char* SENDCMPCT;\n /**\n  * Contains a CBlockHeaderAndShortTxIDs object - providing a header and\n  * list of \"short txids\".\n  * @since protocol version 70014 as described by BIP 152\n  */\n-extern const char *CMPCTBLOCK;\n+extern const char* CMPCTBLOCK;\n /**\n  * Contains a BlockTransactionsRequest\n  * Peer should respond with \"blocktxn\" message.\n  * @since protocol version 70014 as described by BIP 152\n  */\n-extern const char *GETBLOCKTXN;\n+extern const char* GETBLOCKTXN;\n /**\n  * Contains a BlockTransactions.\n  * Sent in response to a \"getblocktxn\" message.\n  * @since protocol version 70014 as described by BIP 152\n  */\n-extern const char *BLOCKTXN;\n+extern const char* BLOCKTXN;\n /**\n  * getcfcheckpt requests evenly spaced compact filter headers, enabling\n  * parallelized download and validation of the headers between them.\n  * Only available with service bit NODE_COMPACT_FILTERS as described by\n  * BIP 157 & 158.\n  */\n-extern const char *GETCFCHECKPT;\n+extern const char* GETCFCHECKPT;\n /**\n  * cfcheckpt is a response to a getcfcheckpt request containing a vector of\n  * evenly spaced filter headers for blocks on the requested chain.\n  * Only available with service bit NODE_COMPACT_FILTERS as described by\n  * BIP 157 & 158.\n  */\n-extern const char *CFCHECKPT;\n-};\n+extern const char* CFCHECKPT;\n+}; // namespace NetMsgType\n \n /* Get a vector of all valid message types (see above) */\n-const std::vector<std::string> &getAllNetMessageTypes();\n+const std::vector<std::string>& getAllNetMessageTypes();\n \n /** nServices flags */\n enum ServiceFlags : uint64_t {\n@@ -320,15 +320,17 @@ void SetServiceFlagsIBDCache(bool status);\n  * == GetDesirableServiceFlags(services), ie determines whether the given\n  * set of service flags are sufficient for a peer to be \"relevant\".\n  */\n-static inline bool HasAllDesirableServiceFlags(ServiceFlags services) {\n+static inline bool HasAllDesirableServiceFlags(ServiceFlags services)\n+{\n     return !(GetDesirableServiceFlags(services) & (~services));\n }\n \n /**\n  * Checks if a peer with the given service flags may be capable of having a\n  * robust address-storage DB.\n  */\n-static inline bool MayHaveUsefulAddressDB(ServiceFlags services) {\n+static inline bool MayHaveUsefulAddressDB(ServiceFlags services)\n+{\n     return (services & NODE_NETWORK) || (services & NODE_NETWORK_LIMITED);\n }\n \n@@ -368,20 +370,19 @@ class CAddress : public CService\n \n /** getdata message type flags */\n const uint32_t MSG_WITNESS_FLAG = 1 << 30;\n-const uint32_t MSG_TYPE_MASK    = 0xffffffff >> 2;\n+const uint32_t MSG_TYPE_MASK = 0xffffffff >> 2;\n \n /** getdata / inv message types.\n  * These numbers are defined by the protocol. When adding a new value, be sure\n  * to mention it in the respective BIP.\n  */\n-enum GetDataMsg\n-{\n+enum GetDataMsg {\n     UNDEFINED = 0,\n     MSG_TX = 1,\n     MSG_BLOCK = 2,\n     // The following can only occur in getdata. Invs always use TX or BLOCK.\n-    MSG_FILTERED_BLOCK = 3,  //!< Defined in BIP37\n-    MSG_CMPCT_BLOCK = 4,     //!< Defined in BIP152\n+    MSG_FILTERED_BLOCK = 3,                           //!< Defined in BIP37\n+    MSG_CMPCT_BLOCK = 4,                              //!< Defined in BIP152\n     MSG_WITNESS_BLOCK = MSG_BLOCK | MSG_WITNESS_FLAG, //!< Defined in BIP144\n     MSG_WITNESS_TX = MSG_TX | MSG_WITNESS_FLAG,       //!< Defined in BIP144\n     MSG_FILTERED_WITNESS_BLOCK = MSG_FILTERED_BLOCK | MSG_WITNESS_FLAG,"
      }
    ]
  }
]