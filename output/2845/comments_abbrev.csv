gmaxwell,2013-07-23T00:51:47Z,"Can you also make the short password delay into an unconditional delay on failure?\n\nYour current code timing-leaks the length, but I don't know if I care. You could avoid this by only comparing the input number of characters every single time, with a min() on the offset (take care to avoid a fence post error) on the actual password.  Then compare the lengths.\n",https://github.com/bitcoin/bitcoin/pull/2845#issuecomment-21386657,21386657,
grayleonard,2013-07-23T01:04:35Z,"Woops, didn't mean to close it.  And I was thinking along the same lines, but with something a little simpler.  If the lengths don't match, you can just compare the actual password with itself (to get the timing right), but add 1 to nReturn also so it returns false.\n",https://github.com/bitcoin/bitcoin/pull/2845#issuecomment-21387068,21387068,
gmaxwell,2013-07-23T01:06:48Z,"The only reservation I have with that is that, depending on how you write it, it is code that the optimizer is very likely to optimize out.  E.g. if it were  if(len1==len2){} else {selfcompare}  that will quite probably get optimized.\n",https://github.com/bitcoin/bitcoin/pull/2845#issuecomment-21387134,21387134,
grayleonard,2013-07-23T01:18:05Z,"I updated it to fix the length-leaking, seems like the simplest way to do it.\n",https://github.com/bitcoin/bitcoin/pull/2845#issuecomment-21387464,21387464,
gmaxwell,2013-07-23T02:12:46Z,"@grayleonard   The extra loop with the ""return ++nResult == 0;"" is ... a little perplexing.  The % that sipa proposed (or the min)  should actually result in simpler looking code. Just move the length check to the end, and use the % to make sure that both only access valid indexes. Care to give it a shot?\n",https://github.com/bitcoin/bitcoin/pull/2845#issuecomment-21389160,21389160,
theuni,2013-07-23T02:19:26Z,"There's no telling what compilers will do to this. If you're that concerned about timing attacks, why not just do something like this pseudocode?\n\n```\nconst minwait = 50; //msec\ntimeBefore = GetCurrentTime();\nresult = val1 == val2;\nsleep(minwait - (GetCurrentTime() - timeBefore));\nreturn result;\n```\n",https://github.com/bitcoin/bitcoin/pull/2845#issuecomment-21389330,21389330,
BitcoinPullTester,2013-07-23T02:19:57Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/bd8420dda743c36940d3986fb7e81a2f195495f8 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/cu",https://github.com/bitcoin/bitcoin/pull/2845#issuecomment-21389344,21389344,
gmaxwell,2013-07-23T02:22:48Z,"Jeff argues that we should probably just drop basic auth entirely and require digest auth, which would solve this as a side effect.\n",https://github.com/bitcoin/bitcoin/pull/2845#issuecomment-21389421,21389421,
gmaxwell,2013-07-23T02:35:33Z,"@theuni we're deep in pedantry land, but expecting very high accuracy sleeps results in sadness. It's perfectly possible to leak data through a sleep like that.\n",https://github.com/bitcoin/bitcoin/pull/2845#issuecomment-21389784,21389784,
theuni,2013-07-23T02:40:46Z,"@gmaxwell fair point on pedantry, but if you're on a system with <50msec sleep precision, i'd guess you'd have bigger concerns. In this case, it'd likely even spoil the very attack the evildoer is attempting.\n",https://github.com/bitcoin/bitcoin/pull/2845#issuecomment-21389930,21389930,
jgarzik,2013-07-23T02:43:31Z,"Also -1 on convoluted schemes that the compiler might try to micro-optimize, or might impact the authentication result.\n\nHeck, even unconditionally sleeping for a random interval would be better.  Remove the 'if' check on password size.\n\nBut yes, approaching 1.0 it is reasonable just to require Digest auth.\n",https://github.com/bitcoin/bitcoin/pull/2845#issuecomment-21390005,21390005,
grayleonard,2013-07-23T05:47:38Z,"@theuni From what I've read it seems like there are two ways to mitigate timing attacks - one can hold all responses with a constant delay, say 50ms.  The other returns faster, I've seen ~10ms in this instance from tests I've run, with a constant-time comparison algorithm.  Either one works.\n\nI'm not sure how soon 1.0 is going to be available, but if we are treating this as a vulnerability inste",https://github.com/bitcoin/bitcoin/pull/2845#issuecomment-21394416,21394416,
BitcoinPullTester,2013-07-23T15:19:37Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/351229cfc0d0f6c54af8e4d7ac7426c16e776fb1 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/cu",https://github.com/bitcoin/bitcoin/pull/2845#issuecomment-21421606,21421606,
sipa,2013-08-15T22:02:07Z,Superceded by #2886 \n,https://github.com/bitcoin/bitcoin/pull/2845#issuecomment-22734102,22734102,
sipa,2013-07-23T01:13:51Z,"This means (theoretically) exposing the password length. If you go as far as making the comparison constant-time, maybe go all the way? Something like comparing x.at(i % x.size) ^ y.at(i % y.size). (not a perfect solution, as it will match in case one is a repetition of the other).\n",https://github.com/bitcoin/bitcoin/pull/2845#discussion_r5335327,5335327,src/bitcoinrpc.cpp
gmaxwell,2013-07-23T01:17:56Z,The % test (I would have just min()) is fine if you just add a |= len==len at the end. \n,https://github.com/bitcoin/bitcoin/pull/2845#discussion_r5335369,5335369,src/bitcoinrpc.cpp
gavinandresen,2013-08-05T09:07:07Z,"comment incorrect now?  Adds 1 if they do not match, does not add 0 if they do.\nMaybe:\n  nResult += (length == length ? 1 : 2)\n... and\n  return nResult == 1;\n... to get really-and-truly-ought-to-be-constant-time...\n\nAlso, commits need to be squashed into one.\n\nAlso style nitpick, space after for/if:  for (size_t ...)  and if (strUser...)\n",https://github.com/bitcoin/bitcoin/pull/2845#discussion_r5574831,5574831,src/bitcoinrpc.cpp
