achow101,2021-10-05 23:22:16,"Note that bumpfee does not take this into account yet, but it's next on my list.",https://github.com/bitcoin/bitcoin/pull/23201#issuecomment-935049936,935049936,
meshcollider,2021-10-05 23:23:46,Concept ACK,https://github.com/bitcoin/bitcoin/pull/23201#issuecomment-935053378,935053378,
fanquake,2021-10-06 00:26:25,cc @t-bast maybe @apoelstra ,https://github.com/bitcoin/bitcoin/pull/23201#issuecomment-935140775,935140775,
t-bast,2021-10-06 06:46:25,"Concept ACK, I'll test this today with lightning transactions.\nShould this PR update the release notes?",https://github.com/bitcoin/bitcoin/pull/23201#issuecomment-935590919,935590919,
t-bast,2021-10-06 09:14:01,"I tested https://github.com/bitcoin/bitcoin/pull/23201/commits/5c2ff2578512fca8134d68a8a86ae144c9335cca with lightning transactions, and I'm correctly able to specify input weights for non-standard inputs. Thanks @achow101!",https://github.com/bitcoin/bitcoin/pull/23201#issuecomment-935811299,935811299,
DrahtBot,2021-10-06 11:23:34,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23367](https://github.com/bitcoin/bitcoin/pull/23367) (Optimize coin selection by dropping BnB upper limit by S3RK)\n* [",https://github.com/bitcoin/bitcoin/pull/23201#issuecomment-936035567,936035567,
yanmaani,2021-10-11 10:46:25,LGTM,https://github.com/bitcoin/bitcoin/pull/23201#issuecomment-939911058,939911058,
t-bast,2021-11-10 13:54:59,"Looks like this PR has multiple concept ACKs (and an E2E test with lightning!), is it possible to move forward with it?",https://github.com/bitcoin/bitcoin/pull/23201#issuecomment-965198257,965198257,
t-bast,2021-11-29 15:46:20,"It would be really great to have this PR integrated for pre-signed transaction protocols (and ideally a follow-up to add these arguments to the bump fee RPCs), it would really make using the `bitcoind` RPC much smoother!",https://github.com/bitcoin/bitcoin/pull/23201#issuecomment-981760029,981760029,
MarcoFalke,2021-10-06 08:41:12,Isn't this already done in `SetOptionsInputWeights`?,https://github.com/bitcoin/bitcoin/pull/23201#discussion_r723015304,723015304,src/wallet/rpcwallet.cpp
achow101,2021-10-06 15:31:28,"Indeed, removed.",https://github.com/bitcoin/bitcoin/pull/23201#discussion_r723399460,723399460,src/wallet/rpcwallet.cpp
instagibbs,2021-10-06 23:00:17,nit: use WITNESS_SCALE_FACTOR,https://github.com/bitcoin/bitcoin/pull/23201#discussion_r723737247,723737247,src/wallet/rpcwallet.cpp
instagibbs,2021-10-06 23:05:34,higher lower fee?,https://github.com/bitcoin/bitcoin/pull/23201#discussion_r723739242,723739242,test/functional/rpc_fundrawtransaction.py
achow101,2021-10-06 23:33:34,Done,https://github.com/bitcoin/bitcoin/pull/23201#discussion_r723749363,723749363,src/wallet/rpcwallet.cpp
achow101,2021-10-06 23:33:38,Done,https://github.com/bitcoin/bitcoin/pull/23201#discussion_r723749384,723749384,test/functional/rpc_fundrawtransaction.py
yanmaani,2021-10-08 15:08:33,"Isn't ""no weight"" -1? If so, shouldn't this be ` >= 0`?",https://github.com/bitcoin/bitcoin/pull/23201#discussion_r725094128,725094128,src/wallet/coincontrol.h
yanmaani,2021-10-08 15:10:47,"Would be cleaner to concatenate this across multiple lines so you don't have to scroll out, no?",https://github.com/bitcoin/bitcoin/pull/23201#discussion_r725095840,725095840,src/wallet/rpcwallet.cpp
yanmaani,2021-10-08 15:12:22,"Any reason here not to use a C++-style loop? Granted, it's not a big difference.",https://github.com/bitcoin/bitcoin/pull/23201#discussion_r725097038,725097038,src/wallet/rpcwallet.cpp
yanmaani,2021-10-08 15:14:21,Comment here explaining the name of the parameter?,https://github.com/bitcoin/bitcoin/pull/23201#discussion_r725098362,725098362,src/wallet/rpcwallet.cpp
yanmaani,2021-10-08 15:16:02,What's going on here? Are there two mutually exclusive ways to give the input weights?,https://github.com/bitcoin/bitcoin/pull/23201#discussion_r725099707,725099707,src/wallet/rpcwallet.cpp
yanmaani,2021-10-08 15:18:43,"Pardon my ignorance here, but why do we need it in `mapWallet` if we have its size?",https://github.com/bitcoin/bitcoin/pull/23201#discussion_r725101698,725101698,src/wallet/spend.cpp
yanmaani,2021-10-08 15:22:59,Are you missing the `Specify weight in inputs instead` error case?,https://github.com/bitcoin/bitcoin/pull/23201#discussion_r725104913,725104913,test/functional/rpc_fundrawtransaction.py
achow101,2021-10-08 15:50:42,"This is checking whether the outpoint exists in the map. The result of `count` is always 0 or 1, it does not actually fetch the value stored.",https://github.com/bitcoin/bitcoin/pull/23201#discussion_r725125227,725125227,src/wallet/coincontrol.h
achow101,2021-10-08 15:58:20,"Yes.\n\nFor `send` and `walletcreatefundedpsbt`, the weights can and should be specified in the inputs array. To avoid conflicts, these are mutually exclusive. `input_weights` exists for `fundrawtransaction` because it does not have an `inputs` array. However it is also useful to be able to pass it as part of the `options` object, which is what this function does.",https://github.com/bitcoin/bitcoin/pull/23201#discussion_r725130904,725130904,src/wallet/rpcwallet.cpp
MarcoFalke,2021-10-08 15:58:42,"Sorry for causing the conflict, but it might be cleaner to just inline the doc here if only one RPC method is using it and none of the others.\n\n```suggestion\n                            },\n                            {""input_weights"", RPCArg::.......\n```",https://github.com/bitcoin/bitcoin/pull/23201#discussion_r725131187,725131187,src/wallet/rpcwallet.cpp
achow101,2021-10-08 15:59:24,We are not guaranteed to have the size.,https://github.com/bitcoin/bitcoin/pull/23201#discussion_r725131633,725131633,src/wallet/spend.cpp
achow101,2021-10-08 16:09:18,Done,https://github.com/bitcoin/bitcoin/pull/23201#discussion_r725138412,725138412,src/wallet/rpcwallet.cpp
achow101,2021-10-08 16:09:23,Done,https://github.com/bitcoin/bitcoin/pull/23201#discussion_r725138464,725138464,src/wallet/rpcwallet.cpp
achow101,2021-10-08 16:09:43,"Removed the comment, the help can actually be inline.",https://github.com/bitcoin/bitcoin/pull/23201#discussion_r725138729,725138729,src/wallet/rpcwallet.cpp
achow101,2021-10-08 16:10:07,"Done. For some reason I thought it needed to be in that function, but actually it doesn't.",https://github.com/bitcoin/bitcoin/pull/23201#discussion_r725139015,725139015,src/wallet/rpcwallet.cpp
achow101,2021-10-08 16:22:25,Added to `rpc_psbt` and `wallet_send` where it actually can be an error.,https://github.com/bitcoin/bitcoin/pull/23201#discussion_r725147359,725147359,test/functional/rpc_fundrawtransaction.py
promag,2021-10-18 22:35:43,"It seems that all callers already check for this. Instead of returning -1, how about\n```cpp\nint64_t GetInputWeight(const COutPoint& outpoint) const\n{\n    auto it = m_input_weights.find(output);\n    assert(it != m_input_weights.end();\n    return it->second;\n}\n```",https://github.com/bitcoin/bitcoin/pull/23201#discussion_r731363383,731363383,src/wallet/coincontrol.h
promag,2021-10-18 22:46:22,"Instead of this check, check below:\n```cpp\nif (!weights.empty()) {\n    options.pushKV(""input_weights"", weights);\n}\n```",https://github.com/bitcoin/bitcoin/pull/23201#discussion_r731367942,731367942,src/wallet/rpcwallet.cpp
achow101,2021-10-18 23:57:05,Done,https://github.com/bitcoin/bitcoin/pull/23201#discussion_r731394750,731394750,src/wallet/coincontrol.h
achow101,2021-10-18 23:57:25,This doesn't work because `inputs.getValues()` expects `inputs` to be non-null.,https://github.com/bitcoin/bitcoin/pull/23201#discussion_r731394871,731394871,src/wallet/rpcwallet.cpp
promag,2021-10-19 07:40:10,"nit, right ðŸ˜ž  you can keep the check below to avoid `""input_weights"": []`.",https://github.com/bitcoin/bitcoin/pull/23201#discussion_r731579384,731579384,src/wallet/rpcwallet.cpp
