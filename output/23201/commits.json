[
  {
    "sha": "d8b3e065711cce40dbfb0dd907b0c551c676a3d3",
    "node_id": "C_kwDOABII59oAKGQ4YjNlMDY1NzExY2NlNDBkYmZiMGRkOTA3YjBjNTUxYzY3NmEzZDM",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-05T19:49:06Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-18T23:00:57Z"
      },
      "message": "wallet: add input weights to CCoinControl\n\nIn order to allow coin selection to take weights from the user,\nCCoinControl needs to be able to set and get them.",
      "tree": {
        "sha": "3129f5ad5cbc8279c6824f8aff6bfb000b9c83cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3129f5ad5cbc8279c6824f8aff6bfb000b9c83cc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8b3e065711cce40dbfb0dd907b0c551c676a3d3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8b3e065711cce40dbfb0dd907b0c551c676a3d3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d8b3e065711cce40dbfb0dd907b0c551c676a3d3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8b3e065711cce40dbfb0dd907b0c551c676a3d3/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "991753e4d50ea5c973f4d3330e5afba797b1b1e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/991753e4d50ea5c973f4d3330e5afba797b1b1e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/991753e4d50ea5c973f4d3330e5afba797b1b1e7"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 19,
      "deletions": 0
    },
    "files": [
      {
        "sha": "de89209face2f34c05439f70ed0bdd0fb4b784c1",
        "filename": "src/wallet/coincontrol.h",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8b3e065711cce40dbfb0dd907b0c551c676a3d3/src/wallet/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8b3e065711cce40dbfb0dd907b0c551c676a3d3/src/wallet/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.h?ref=d8b3e065711cce40dbfb0dd907b0c551c676a3d3",
        "patch": "@@ -114,9 +114,28 @@ class CCoinControl\n         vOutpoints.assign(setSelected.begin(), setSelected.end());\n     }\n \n+    void SetInputWeight(const COutPoint& outpoint, int64_t weight)\n+    {\n+        m_input_weights[outpoint] = weight;\n+    }\n+\n+    bool HasInputWeight(const COutPoint& outpoint) const\n+    {\n+        return m_input_weights.count(outpoint) > 0;\n+    }\n+\n+    int64_t GetInputWeight(const COutPoint& outpoint) const\n+    {\n+        auto it = m_input_weights.find(outpoint);\n+        assert(it != m_input_weights.end());\n+        return it->second;\n+    }\n+\n private:\n     std::set<COutPoint> setSelected;\n     std::map<COutPoint, CTxOut> m_external_txouts;\n+    //! Map of COutPoints to the maximum weight for that input\n+    std::map<COutPoint, int64_t> m_input_weights;\n };\n \n #endif // BITCOIN_WALLET_COINCONTROL_H"
      }
    ]
  },
  {
    "sha": "e91b4616a6f08dd3d8e9b29457ad7cb42f337f5b",
    "node_id": "C_kwDOABII59oAKGU5MWI0NjE2YTZmMDhkZDNkOGU5YjI5NDU3YWQ3Y2I0MmYzMzdmNWI",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-05T19:54:11Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-18T23:01:00Z"
      },
      "message": "wallet: Allow user specified input size to override\n\nIf the user specifies an input size, allow it to override any input size\ncalculations during coin selection.",
      "tree": {
        "sha": "edaa04e96849e8b5ec6a58e1f1efeba5b7ccf3a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/edaa04e96849e8b5ec6a58e1f1efeba5b7ccf3a8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e91b4616a6f08dd3d8e9b29457ad7cb42f337f5b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e91b4616a6f08dd3d8e9b29457ad7cb42f337f5b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e91b4616a6f08dd3d8e9b29457ad7cb42f337f5b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e91b4616a6f08dd3d8e9b29457ad7cb42f337f5b/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8b3e065711cce40dbfb0dd907b0c551c676a3d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8b3e065711cce40dbfb0dd907b0c551c676a3d3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8b3e065711cce40dbfb0dd907b0c551c676a3d3"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 40,
      "deletions": 4
    },
    "files": [
      {
        "sha": "119ac175237eb7b249dcdf89ca5a65a5bb478fed",
        "filename": "src/wallet/spend.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e91b4616a6f08dd3d8e9b29457ad7cb42f337f5b/src/wallet/spend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e91b4616a6f08dd3d8e9b29457ad7cb42f337f5b/src/wallet/spend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/spend.cpp?ref=e91b4616a6f08dd3d8e9b29457ad7cb42f337f5b",
        "patch": "@@ -463,15 +463,17 @@ bool SelectCoins(const CWallet& wallet, const std::vector<COutput>& vAvailableCo\n             }\n             input_bytes = GetTxSpendSize(wallet, wtx, outpoint.n, false);\n             txout = wtx.tx->vout.at(outpoint.n);\n-        }\n-        if (input_bytes == -1) {\n-            // The input is external. We either did not find the tx in mapWallet, or we did but couldn't compute the input size with wallet data\n+        } else {\n+            // The input is external. We did not find the tx in mapWallet.\n             if (!coin_control.GetExternalOutput(outpoint, txout)) {\n-                // Not ours, and we don't have solving data.\n                 return false;\n             }\n             input_bytes = CalculateMaximumSignedInputSize(txout, &coin_control.m_external_provider, /* use_max_sig */ true);\n         }\n+        // If available, override calculated size with coin control specified size\n+        if (coin_control.HasInputWeight(outpoint)) {\n+            input_bytes = GetVirtualTransactionSize(coin_control.GetInputWeight(outpoint), 0, 0);\n+        }\n \n         CInputCoin coin(outpoint, txout, input_bytes);\n         nValueFromPresetInputs += coin.txout.nValue;"
      },
      {
        "sha": "6d8af363224265e5bcdf2ae107bce3ba80da1348",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e91b4616a6f08dd3d8e9b29457ad7cb42f337f5b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e91b4616a6f08dd3d8e9b29457ad7cb42f337f5b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e91b4616a6f08dd3d8e9b29457ad7cb42f337f5b",
        "patch": "@@ -1462,6 +1462,34 @@ bool DummySignInput(const SigningProvider& provider, CTxIn &tx_in, const CTxOut\n     return true;\n }\n \n+static void FillInputToWeight(CTxIn& txin, int64_t target_weight)\n+{\n+    int64_t txin_weight = GetTransactionInputWeight(txin);\n+    // Subtract current txin weight, which should include empty witness stack\n+    int64_t add_weight = target_weight - txin_weight;\n+\n+    // We will want to subtract the size of the Compact Size UInt that will also be serialized.\n+    // However doing so when the size is near a boundary can result in a problem where it is not\n+    // possible to have a stack element size and combination to exactly equal a target.\n+    // To avoid this possibility, if the weight to add is less than 10 bytes greater than\n+    // a boundary, the size will be split so that 2/3rds will be in one stack element, and\n+    // the remaining 1/3rd in another. Using 3rds allows us to avoid additional boundaries.\n+    // 10 bytes is used because that accounts for the maximum size. This does not need to be super precise.\n+    if ((add_weight >= 253 && add_weight < 263)\n+        || (add_weight > std::numeric_limits<uint16_t>::max() && add_weight <= std::numeric_limits<uint16_t>::max() + 10)\n+        || (add_weight > std::numeric_limits<uint32_t>::max() && add_weight <= std::numeric_limits<uint32_t>::max() + 10)) {\n+        int64_t first_weight = add_weight / 3;\n+        add_weight -= first_weight;\n+\n+        first_weight -= GetSizeOfCompactSize(first_weight);\n+        txin.scriptWitness.stack.emplace(txin.scriptWitness.stack.end(), first_weight, 0);\n+    }\n+\n+    add_weight -= GetSizeOfCompactSize(add_weight);\n+    txin.scriptWitness.stack.emplace(txin.scriptWitness.stack.end(), add_weight, 0);\n+    assert(GetTransactionInputWeight(txin) == target_weight);\n+}\n+\n // Helper for producing a bunch of max-sized low-S low-R signatures (eg 71 bytes)\n bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut> &txouts, const CCoinControl* coin_control) const\n {\n@@ -1470,6 +1498,12 @@ bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut>\n     for (const auto& txout : txouts)\n     {\n         CTxIn& txin = txNew.vin[nIn];\n+        // If weight was provided, fill the input to that weight\n+        if (coin_control && coin_control->HasInputWeight(txin.prevout)) {\n+            FillInputToWeight(txin, coin_control->GetInputWeight(txin.prevout));\n+            nIn++;\n+            continue;\n+        }\n         // Use max sig if watch only inputs were used or if this particular input is an external input\n         // to ensure a sufficient fee is attained for the requested feerate.\n         const bool use_max_sig = coin_control && (coin_control->fAllowWatchOnly || coin_control->IsExternalSelected(txin.prevout));"
      }
    ]
  },
  {
    "sha": "1edb3a18511988007fb2def7c96087b91d865c5e",
    "node_id": "C_kwDOABII59oAKDFlZGIzYTE4NTExOTg4MDA3ZmIyZGVmN2M5NjA4N2I5MWQ4NjVjNWU",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-05T20:03:16Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-18T23:56:56Z"
      },
      "message": "rpc, wallet: Allow users to specify input weights\n\nCoin selection requires knowing the weight of a transaction so that fees\ncan be estimated. However for external inputs, the weight may not be\navialble, and solving data may not be enough as the input could be one\nthat we do not support. By allowing users to specify input weights,\nthose external inputs can be included in the transaction.\n\nAdditionally, if the weight for an input is specified, that value will\nalways be used, regardless of whether the input is in the wallet or\nsolving data is available. This allows us to account for scenarios where\nthe wallet may be more conservative and estimate a larger input than may\nactually be created.\n\nFor example, we assume the maximum DER signature size, but an external\ninput may be signed by a wallet which does nonce grinding in order to get\na smaller signature. In that case, the user can specify the smaller\ninput weight to avoid overpaying transaction fees.",
      "tree": {
        "sha": "208d8189eed0380bf9a7249bb5984a7064a3fae4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/208d8189eed0380bf9a7249bb5984a7064a3fae4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1edb3a18511988007fb2def7c96087b91d865c5e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1edb3a18511988007fb2def7c96087b91d865c5e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1edb3a18511988007fb2def7c96087b91d865c5e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1edb3a18511988007fb2def7c96087b91d865c5e/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e91b4616a6f08dd3d8e9b29457ad7cb42f337f5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e91b4616a6f08dd3d8e9b29457ad7cb42f337f5b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e91b4616a6f08dd3d8e9b29457ad7cb42f337f5b"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 68,
      "deletions": 2
    },
    "files": [
      {
        "sha": "4f1793c4578de38a4adc1c939423908a5b2dd498",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 68,
        "deletions": 2,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1edb3a18511988007fb2def7c96087b91d865c5e/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1edb3a18511988007fb2def7c96087b91d865c5e/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=1edb3a18511988007fb2def7c96087b91d865c5e",
        "patch": "@@ -3248,6 +3248,7 @@ void FundTransaction(CWallet& wallet, CMutableTransaction& tx, CAmount& fee_out,\n                 {\"replaceable\", UniValueType(UniValue::VBOOL)},\n                 {\"conf_target\", UniValueType(UniValue::VNUM)},\n                 {\"estimate_mode\", UniValueType(UniValue::VSTR)},\n+                {\"input_weights\", UniValueType(UniValue::VARR)},\n             },\n             true, true);\n \n@@ -3367,6 +3368,32 @@ void FundTransaction(CWallet& wallet, CMutableTransaction& tx, CAmount& fee_out,\n         }\n     }\n \n+    if (options.exists(\"input_weights\")) {\n+        for (const UniValue& input : options[\"input_weights\"].get_array().getValues()) {\n+            uint256 txid = ParseHashO(input, \"txid\");\n+\n+            const UniValue& vout_v = find_value(input, \"vout\");\n+            if (!vout_v.isNum()) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, missing vout key\");\n+            }\n+            int vout = vout_v.get_int();\n+            if (vout < 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, vout cannot be negative\");\n+            }\n+\n+            const UniValue& weight_v = find_value(input, \"weight\");\n+            if (!weight_v.isNum()) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, missing weight key\");\n+            }\n+            int64_t weight = weight_v.get_int64();\n+            if (weight < 40 * WITNESS_SCALE_FACTOR) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, weight cannot be less than 160 (40 bytes (size of outpoint + sequence) * 4 (witness scaling factor))\");\n+            }\n+\n+            coinControl.SetInputWeight(COutPoint(txid, vout), weight);\n+        }\n+    }\n+\n     if (tx.vout.size() == 0)\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"TX must have at least one output\");\n \n@@ -3404,6 +3431,23 @@ void FundTransaction(CWallet& wallet, CMutableTransaction& tx, CAmount& fee_out,\n     }\n }\n \n+static void SetOptionsInputWeights(const UniValue& inputs, UniValue& options)\n+{\n+    if (options.exists(\"input_weights\")) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify weight in inputs instead\");\n+    }\n+    if (inputs.size() == 0) {\n+        return;\n+    }\n+    UniValue weights(UniValue::VARR);\n+    for (const UniValue& input : inputs.getValues()) {\n+        if (input.exists(\"weight\")) {\n+            weights.push_back(input);\n+        }\n+    }\n+    options.pushKV(\"input_weights\", weights);\n+}\n+\n static RPCHelpMan fundrawtransaction()\n {\n     return RPCHelpMan{\"fundrawtransaction\",\n@@ -3445,6 +3489,16 @@ static RPCHelpMan fundrawtransaction()\n                                     {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n                                 },\n                             },\n+                            {\"input_weights\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Inputs and their corresponding weights\",\n+                                {\n+                                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                    {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                    {\"weight\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The maximum weight for this input, \"\n+                                        \"including the weight of the outpoint and sequence number. \"\n+                                        \"Note that signature sizes are not guaranteed to be consistent, \"\n+                                        \"so the maximum DER signatures size of 73 bytes should be used when considering ECDSA signatures\"},\n+                                },\n+                             },\n                         },\n                         FundTxDoc()),\n                         \"options\"},\n@@ -4274,6 +4328,10 @@ static RPCHelpMan send()\n                             {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n                             {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n                             {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            {\"weight\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"Calculated from wallet and solving data\"}, \"The maximum weight for this input, \"\n+                                        \"including the weight of the outpoint and sequence number. \"\n+                                        \"Note that signature sizes are not guaranteed to be consistent, \"\n+                                        \"so the maximum DER signatures size of 73 bytes should be used when considering ECDSA signatures\"},\n                         },\n                     },\n                     {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n@@ -4377,6 +4435,7 @@ static RPCHelpMan send()\n             // Automatically select coins, unless at least one is manually selected. Can\n             // be overridden by options.add_inputs.\n             coin_control.m_add_inputs = rawTx.vin.size() == 0;\n+            SetOptionsInputWeights(options[\"inputs\"], options);\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n             bool add_to_wallet = true;\n@@ -4586,6 +4645,10 @@ static RPCHelpMan walletcreatefundedpsbt()\n                                     {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n                                     {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n                                     {\"sequence\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"depends on the value of the 'locktime' and 'options.replaceable' arguments\"}, \"The sequence number\"},\n+                                    {\"weight\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"Calculated from wallet and solving data\"}, \"The maximum weight for this input, \"\n+                                        \"including the weight of the outpoint and sequence number. \"\n+                                        \"Note that signature sizes are not guaranteed to be consistent, \"\n+                                        \"so the maximum DER signatures size of 73 bytes should be used when considering ECDSA signatures\"},\n                                 },\n                             },\n                         },\n@@ -4666,10 +4729,12 @@ static RPCHelpMan walletcreatefundedpsbt()\n         }, true\n     );\n \n+    UniValue options = request.params[3];\n+\n     CAmount fee;\n     int change_position;\n     bool rbf{wallet.m_signal_rbf};\n-    const UniValue &replaceable_arg = request.params[3][\"replaceable\"];\n+    const UniValue &replaceable_arg = options[\"replaceable\"];\n     if (!replaceable_arg.isNull()) {\n         RPCTypeCheckArgument(replaceable_arg, UniValue::VBOOL);\n         rbf = replaceable_arg.isTrue();\n@@ -4679,7 +4744,8 @@ static RPCHelpMan walletcreatefundedpsbt()\n     // Automatically select coins, unless at least one is manually selected. Can\n     // be overridden by options.add_inputs.\n     coin_control.m_add_inputs = rawTx.vin.size() == 0;\n-    FundTransaction(wallet, rawTx, fee, change_position, request.params[3], coin_control, /* override_min_fee */ true);\n+    SetOptionsInputWeights(request.params[0], options);\n+    FundTransaction(wallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ true);\n \n     // Make a blank psbt\n     PartiallySignedTransaction psbtx(rawTx);"
      }
    ]
  },
  {
    "sha": "cea4f3489b675c9271c91da6f9bd9d9f4eff5af0",
    "node_id": "C_kwDOABII59oAKGNlYTRmMzQ4OWI2NzVjOTI3MWM5MWRhNmY5YmQ5ZDlmNGVmZjVhZjA",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-05T20:45:10Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-18T23:56:56Z"
      },
      "message": "tests: Test specifying input weights\n\nAdded tests to rpc_fundrawtransaction, wallet_send, and rpc_psbt that\ntest that external inputs can be spent when input weight is provided.\nAlso tested that the input weight overrides any calculated weight.\n\nAdditionally, rpc_psbt's external inputs test is cleaned up a bit to be\nmore similar to rpc_fundrawtransaction's and avoid potential pitfalls\ndue to non-deterministic coin selection behavior.",
      "tree": {
        "sha": "6347796199c17b7969a2e0396c7acabcc06b2bfc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6347796199c17b7969a2e0396c7acabcc06b2bfc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cea4f3489b675c9271c91da6f9bd9d9f4eff5af0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cea4f3489b675c9271c91da6f9bd9d9f4eff5af0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cea4f3489b675c9271c91da6f9bd9d9f4eff5af0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cea4f3489b675c9271c91da6f9bd9d9f4eff5af0/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1edb3a18511988007fb2def7c96087b91d865c5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1edb3a18511988007fb2def7c96087b91d865c5e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1edb3a18511988007fb2def7c96087b91d865c5e"
      }
    ],
    "stats": {
      "total": 167,
      "additions": 156,
      "deletions": 11
    },
    "files": [
      {
        "sha": "66103aca252c160a43e984f5aee13479ab12d81e",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 37,
        "deletions": 4,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cea4f3489b675c9271c91da6f9bd9d9f4eff5af0/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cea4f3489b675c9271c91da6f9bd9d9f4eff5af0/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=cea4f3489b675c9271c91da6f9bd9d9f4eff5af0",
        "patch": "@@ -1023,6 +1023,11 @@ def test_external_inputs(self):\n         assert_raises_rpc_error(-5, \"'01234567890a0b0c0d0e0f' is not a valid public key\", wallet.fundrawtransaction, raw_tx, {\"solving_data\": {\"pubkeys\":[\"01234567890a0b0c0d0e0f\"]}})\n         assert_raises_rpc_error(-5, \"'not a script' is not hex\", wallet.fundrawtransaction, raw_tx, {\"solving_data\": {\"scripts\":[\"not a script\"]}})\n         assert_raises_rpc_error(-8, \"Unable to parse descriptor 'not a descriptor'\", wallet.fundrawtransaction, raw_tx, {\"solving_data\": {\"descriptors\":[\"not a descriptor\"]}})\n+        assert_raises_rpc_error(-8, \"Invalid parameter, missing vout key\", wallet.fundrawtransaction, raw_tx, {\"input_weights\": [{\"txid\": ext_utxo[\"txid\"]}]})\n+        assert_raises_rpc_error(-8, \"Invalid parameter, vout cannot be negative\", wallet.fundrawtransaction, raw_tx, {\"input_weights\": [{\"txid\": ext_utxo[\"txid\"], \"vout\": -1}]})\n+        assert_raises_rpc_error(-8, \"Invalid parameter, missing weight key\", wallet.fundrawtransaction, raw_tx, {\"input_weights\": [{\"txid\": ext_utxo[\"txid\"], \"vout\": ext_utxo[\"vout\"]}]})\n+        assert_raises_rpc_error(-8, \"Invalid parameter, weight cannot be less than 160\", wallet.fundrawtransaction, raw_tx, {\"input_weights\": [{\"txid\": ext_utxo[\"txid\"], \"vout\": ext_utxo[\"vout\"], \"weight\": 159}]})\n+        assert_raises_rpc_error(-8, \"Invalid parameter, weight cannot be less than 160\", wallet.fundrawtransaction, raw_tx, {\"input_weights\": [{\"txid\": ext_utxo[\"txid\"], \"vout\": ext_utxo[\"vout\"], \"weight\": -1}]})\n \n         # But funding should work when the solving data is provided\n         funded_tx = wallet.fundrawtransaction(raw_tx, {\"solving_data\": {\"pubkeys\": [addr_info['pubkey']], \"scripts\": [addr_info[\"embedded\"][\"scriptPubKey\"]]}})\n@@ -1032,10 +1037,38 @@ def test_external_inputs(self):\n         assert signed_tx['complete']\n \n         funded_tx = wallet.fundrawtransaction(raw_tx, {\"solving_data\": {\"descriptors\": [desc]}})\n-        signed_tx = wallet.signrawtransactionwithwallet(funded_tx['hex'])\n-        assert not signed_tx['complete']\n-        signed_tx = self.nodes[0].signrawtransactionwithwallet(signed_tx['hex'])\n-        assert signed_tx['complete']\n+        signed_tx1 = wallet.signrawtransactionwithwallet(funded_tx['hex'])\n+        assert not signed_tx1['complete']\n+        signed_tx2 = self.nodes[0].signrawtransactionwithwallet(signed_tx1['hex'])\n+        assert signed_tx2['complete']\n+\n+        unsigned_weight = self.nodes[0].decoderawtransaction(signed_tx1[\"hex\"])[\"weight\"]\n+        signed_weight = self.nodes[0].decoderawtransaction(signed_tx2[\"hex\"])[\"weight\"]\n+        # Input's weight is difference between weight of signed and unsigned,\n+        # and the weight of stuff that didn't change (prevout, sequence, 1 byte of scriptSig)\n+        input_weight = signed_weight - unsigned_weight + (45 * 4)\n+        low_input_weight = input_weight // 2\n+        high_input_weight = input_weight * 2\n+\n+        # Funding should also work if the input weight is provided\n+        funded_tx = wallet.fundrawtransaction(raw_tx, {\"input_weights\": [{\"txid\": ext_utxo[\"txid\"], \"vout\": ext_utxo[\"vout\"], \"weight\": input_weight}]})\n+        signed_tx = wallet.signrawtransactionwithwallet(funded_tx[\"hex\"])\n+        signed_tx = self.nodes[0].signrawtransactionwithwallet(signed_tx[\"hex\"])\n+        assert self.nodes[0].testmempoolaccept([signed_tx[\"hex\"]])[0][\"allowed\"]\n+        # Reducing the weight should have a lower fee\n+        funded_tx2 = wallet.fundrawtransaction(raw_tx, {\"input_weights\": [{\"txid\": ext_utxo[\"txid\"], \"vout\": ext_utxo[\"vout\"], \"weight\": low_input_weight}]})\n+        assert_greater_than(funded_tx[\"fee\"], funded_tx2[\"fee\"])\n+        # Increasing the weight should have a higher fee\n+        funded_tx2 = wallet.fundrawtransaction(raw_tx, {\"input_weights\": [{\"txid\": ext_utxo[\"txid\"], \"vout\": ext_utxo[\"vout\"], \"weight\": high_input_weight}]})\n+        assert_greater_than(funded_tx2[\"fee\"], funded_tx[\"fee\"])\n+        # The provided weight should override the calculated weight when solving data is provided\n+        funded_tx3 = wallet.fundrawtransaction(raw_tx, {\"solving_data\": {\"descriptors\": [desc]}, \"input_weights\": [{\"txid\": ext_utxo[\"txid\"], \"vout\": ext_utxo[\"vout\"], \"weight\": high_input_weight}]})\n+        assert_equal(funded_tx2[\"fee\"], funded_tx3[\"fee\"])\n+\n+        # Funding with weight at csuint boundaries should not cause problems\n+        funded_tx = wallet.fundrawtransaction(raw_tx, {\"input_weights\": [{\"txid\": ext_utxo[\"txid\"], \"vout\": ext_utxo[\"vout\"], \"weight\": 255}]})\n+        funded_tx = wallet.fundrawtransaction(raw_tx, {\"input_weights\": [{\"txid\": ext_utxo[\"txid\"], \"vout\": ext_utxo[\"vout\"], \"weight\": 65539}]})\n+\n         self.nodes[2].unloadwallet(\"extfund\")\n \n     def test_include_unsafe(self):"
      },
      {
        "sha": "b9a59c6dd87177c4ca453d9eb17683c179ebf6ca",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 82,
        "deletions": 7,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cea4f3489b675c9271c91da6f9bd9d9f4eff5af0/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cea4f3489b675c9271c91da6f9bd9d9f4eff5af0/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=cea4f3489b675c9271c91da6f9bd9d9f4eff5af0",
        "patch": "@@ -611,11 +611,15 @@ def test_psbt_input_keys(psbt_input, keys):\n \n         assert_raises_rpc_error(-25, 'Inputs missing or spent', self.nodes[0].walletprocesspsbt, 'cHNidP8BAJoCAAAAAkvEW8NnDtdNtDpsmze+Ht2LH35IJcKv00jKAlUs21RrAwAAAAD/////S8Rbw2cO1020OmybN74e3Ysffkglwq/TSMoCVSzbVGsBAAAAAP7///8CwLYClQAAAAAWABSNJKzjaUb3uOxixsvh1GGE3fW7zQD5ApUAAAAAFgAUKNw0x8HRctAgmvoevm4u1SbN7XIAAAAAAAEAnQIAAAACczMa321tVHuN4GKWKRncycI22aX3uXgwSFUKM2orjRsBAAAAAP7///9zMxrfbW1Ue43gYpYpGdzJwjbZpfe5eDBIVQozaiuNGwAAAAAA/v///wIA+QKVAAAAABl2qRT9zXUVA8Ls5iVqynLHe5/vSe1XyYisQM0ClQAAAAAWABRmWQUcjSjghQ8/uH4Bn/zkakwLtAAAAAAAAQEfQM0ClQAAAAAWABRmWQUcjSjghQ8/uH4Bn/zkakwLtAAAAA==')\n \n-        # Test that we can fund psbts with external inputs specified\n+        self.log.info(\"Test that we can fund psbts with external inputs specified\")\n+\n         eckey = ECKey()\n         eckey.generate()\n         privkey = bytes_to_wif(eckey.get_bytes())\n \n+        self.nodes[1].createwallet(\"extfund\")\n+        wallet = self.nodes[1].get_wallet_rpc(\"extfund\")\n+\n         # Make a weird but signable script. sh(pkh()) descriptor accomplishes this\n         desc = descsum_create(\"sh(pkh({}))\".format(privkey))\n         if self.options.descriptors:\n@@ -627,27 +631,98 @@ def test_psbt_input_keys(psbt_input, keys):\n         addr_info = self.nodes[0].getaddressinfo(addr)\n \n         self.nodes[0].sendtoaddress(addr, 10)\n+        self.nodes[0].sendtoaddress(wallet.getnewaddress(), 10)\n         self.generate(self.nodes[0], 6)\n         self.sync_all()\n         ext_utxo = self.nodes[0].listunspent(addresses=[addr])[0]\n \n         # An external input without solving data should result in an error\n-        assert_raises_rpc_error(-4, \"Insufficient funds\", self.nodes[1].walletcreatefundedpsbt, [ext_utxo], {self.nodes[0].getnewaddress(): 10 + ext_utxo['amount']}, 0, {'add_inputs': True})\n+        assert_raises_rpc_error(-4, \"Insufficient funds\", wallet.walletcreatefundedpsbt, [ext_utxo], {self.nodes[0].getnewaddress(): 15})\n \n         # But funding should work when the solving data is provided\n-        psbt = self.nodes[1].walletcreatefundedpsbt([ext_utxo], {self.nodes[0].getnewaddress(): 15}, 0, {'add_inputs': True, \"solving_data\": {\"pubkeys\": [addr_info['pubkey']], \"scripts\": [addr_info[\"embedded\"][\"scriptPubKey\"]]}})\n-        signed = self.nodes[1].walletprocesspsbt(psbt['psbt'])\n+        psbt = wallet.walletcreatefundedpsbt([ext_utxo], {self.nodes[0].getnewaddress(): 15}, 0, {\"add_inputs\": True, \"solving_data\": {\"pubkeys\": [addr_info['pubkey']], \"scripts\": [addr_info[\"embedded\"][\"scriptPubKey\"]]}})\n+        signed = wallet.walletprocesspsbt(psbt['psbt'])\n         assert not signed['complete']\n         signed = self.nodes[0].walletprocesspsbt(signed['psbt'])\n         assert signed['complete']\n         self.nodes[0].finalizepsbt(signed['psbt'])\n \n-        psbt = self.nodes[1].walletcreatefundedpsbt([ext_utxo], {self.nodes[0].getnewaddress(): 15}, 0, {'add_inputs': True, \"solving_data\":{\"descriptors\": [desc]}})\n-        signed = self.nodes[1].walletprocesspsbt(psbt['psbt'])\n+        psbt = wallet.walletcreatefundedpsbt([ext_utxo], {self.nodes[0].getnewaddress(): 15}, 0, {\"add_inputs\": True, \"solving_data\":{\"descriptors\": [desc]}})\n+        signed = wallet.walletprocesspsbt(psbt['psbt'])\n         assert not signed['complete']\n         signed = self.nodes[0].walletprocesspsbt(signed['psbt'])\n         assert signed['complete']\n-        self.nodes[0].finalizepsbt(signed['psbt'])\n+        final = self.nodes[0].finalizepsbt(signed['psbt'], False)\n+\n+        dec = self.nodes[0].decodepsbt(signed[\"psbt\"])\n+        for i, txin in enumerate(dec[\"tx\"][\"vin\"]):\n+            if txin[\"txid\"] == ext_utxo[\"txid\"] and txin[\"vout\"] == ext_utxo[\"vout\"]:\n+                input_idx = i\n+                break\n+        psbt_in = dec[\"inputs\"][input_idx]\n+        # Calculate the input weight\n+        # (prevout + sequence + length of scriptSig + 2 bytes buffer) * 4 + len of scriptwitness\n+        len_scriptsig = len(psbt_in[\"final_scriptSig\"][\"hex\"]) // 2 if \"final_scriptSig\" in psbt_in else 0\n+        len_scriptwitness = len(psbt_in[\"final_scriptwitness\"][\"hex\"]) // 2 if \"final_scriptwitness\" in psbt_in else 0\n+        input_weight = ((44 + len_scriptsig + 2) * 4) + len_scriptwitness\n+        low_input_weight = input_weight // 2\n+        high_input_weight = input_weight * 2\n+\n+        # Input weight error conditions\n+        assert_raises_rpc_error(\n+            -8,\n+            \"Specify weight in inputs instead\",\n+            wallet.walletcreatefundedpsbt,\n+            inputs=[ext_utxo],\n+            outputs={self.nodes[0].getnewaddress(): 15},\n+            options={\"input_weights\": [{\"txid\": ext_utxo[\"txid\"], \"vout\": ext_utxo[\"vout\"], \"weight\": 1000}]}\n+        )\n+\n+        # Funding should also work if the input weight is provided\n+        psbt = wallet.walletcreatefundedpsbt(\n+            inputs=[{\"txid\": ext_utxo[\"txid\"], \"vout\": ext_utxo[\"vout\"], \"weight\": input_weight}],\n+            outputs={self.nodes[0].getnewaddress(): 15},\n+            options={\"add_inputs\": True}\n+        )\n+        signed = wallet.walletprocesspsbt(psbt[\"psbt\"])\n+        signed = self.nodes[0].walletprocesspsbt(signed[\"psbt\"])\n+        final = self.nodes[0].finalizepsbt(signed[\"psbt\"])\n+        assert self.nodes[0].testmempoolaccept([final[\"hex\"]])[0][\"allowed\"]\n+        # Reducing the weight should have a lower fee\n+        psbt2 = wallet.walletcreatefundedpsbt(\n+            inputs=[{\"txid\": ext_utxo[\"txid\"], \"vout\": ext_utxo[\"vout\"], \"weight\": low_input_weight}],\n+            outputs={self.nodes[0].getnewaddress(): 15},\n+            options={\"add_inputs\": True}\n+        )\n+        assert_greater_than(psbt[\"fee\"], psbt2[\"fee\"])\n+        # Increasing the weight should have a higher fee\n+        psbt2 = wallet.walletcreatefundedpsbt(\n+            inputs=[{\"txid\": ext_utxo[\"txid\"], \"vout\": ext_utxo[\"vout\"], \"weight\": high_input_weight}],\n+            outputs={self.nodes[0].getnewaddress(): 15},\n+            options={\"add_inputs\": True}\n+        )\n+        assert_greater_than(psbt2[\"fee\"], psbt[\"fee\"])\n+        # The provided weight should override the calculated weight when solving data is provided\n+        psbt3 = wallet.walletcreatefundedpsbt(\n+            inputs=[{\"txid\": ext_utxo[\"txid\"], \"vout\": ext_utxo[\"vout\"], \"weight\": high_input_weight}],\n+            outputs={self.nodes[0].getnewaddress(): 15},\n+            options={'add_inputs': True, \"solving_data\":{\"descriptors\": [desc]}}\n+        )\n+        assert_equal(psbt2[\"fee\"], psbt3[\"fee\"])\n+\n+        # Import the external utxo descriptor so that we can sign for it from the test wallet\n+        if self.options.descriptors:\n+            res = wallet.importdescriptors([{\"desc\": desc, \"timestamp\": \"now\"}])\n+        else:\n+            res = wallet.importmulti([{\"desc\": desc, \"timestamp\": \"now\"}])\n+        assert res[0][\"success\"]\n+        # The provided weight should override the calculated weight for a wallet input\n+        psbt3 = wallet.walletcreatefundedpsbt(\n+            inputs=[{\"txid\": ext_utxo[\"txid\"], \"vout\": ext_utxo[\"vout\"], \"weight\": high_input_weight}],\n+            outputs={self.nodes[0].getnewaddress(): 15},\n+            options={\"add_inputs\": True}\n+        )\n+        assert_equal(psbt2[\"fee\"], psbt3[\"fee\"])\n \n if __name__ == '__main__':\n     PSBTTest().main()"
      },
      {
        "sha": "fa3e3674f372539bb0f859eedbbd897dcc3fd123",
        "filename": "test/functional/wallet_send.py",
        "status": "modified",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cea4f3489b675c9271c91da6f9bd9d9f4eff5af0/test/functional/wallet_send.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cea4f3489b675c9271c91da6f9bd9d9f4eff5af0/test/functional/wallet_send.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_send.py?ref=cea4f3489b675c9271c91da6f9bd9d9f4eff5af0",
        "patch": "@@ -522,5 +522,42 @@ def run_test(self):\n         assert signed[\"complete\"]\n         self.nodes[0].finalizepsbt(signed[\"psbt\"])\n \n+        dec = self.nodes[0].decodepsbt(signed[\"psbt\"])\n+        for i, txin in enumerate(dec[\"tx\"][\"vin\"]):\n+            if txin[\"txid\"] == ext_utxo[\"txid\"] and txin[\"vout\"] == ext_utxo[\"vout\"]:\n+                input_idx = i\n+                break\n+        psbt_in = dec[\"inputs\"][input_idx]\n+        # Calculate the input weight\n+        # (prevout + sequence + length of scriptSig + 2 bytes buffer) * 4 + len of scriptwitness\n+        len_scriptsig = len(psbt_in[\"final_scriptSig\"][\"hex\"]) // 2 if \"final_scriptSig\" in psbt_in else 0\n+        len_scriptwitness = len(psbt_in[\"final_scriptwitness\"][\"hex\"]) // 2 if \"final_scriptwitness\" in psbt_in else 0\n+        input_weight = ((44 + len_scriptsig + 2) * 4) + len_scriptwitness\n+\n+        # Input weight error conditions\n+        assert_raises_rpc_error(\n+            -8,\n+            \"Specify weight in inputs instead\",\n+            ext_wallet.send,\n+            outputs={self.nodes[0].getnewaddress(): 15},\n+            options={\"inputs\": [ext_utxo], \"input_weights\": [{\"txid\": ext_utxo[\"txid\"], \"vout\": ext_utxo[\"vout\"], \"weight\": 1000}]}\n+        )\n+\n+        # Funding should also work when input weights are provided\n+        res = self.test_send(\n+            from_wallet=ext_wallet,\n+            to_wallet=self.nodes[0],\n+            amount=15,\n+            inputs=[{\"txid\": ext_utxo[\"txid\"], \"vout\": ext_utxo[\"vout\"], \"weight\": input_weight}],\n+            add_inputs=True,\n+            psbt=True,\n+            include_watching=True\n+        )\n+        signed = ext_wallet.walletprocesspsbt(res[\"psbt\"])\n+        signed = ext_fund.walletprocesspsbt(res[\"psbt\"])\n+        assert signed[\"complete\"]\n+        tx = self.nodes[0].finalizepsbt(signed[\"psbt\"])\n+        assert self.nodes[0].testmempoolaccept([tx[\"hex\"]])[0][\"allowed\"]\n+\n if __name__ == '__main__':\n     WalletSendTest().main()"
      }
    ]
  }
]