[
  {
    "sha": "eb5fff9e16b2c3e94835cd3a8897318472df2374",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYjVmZmY5ZTE2YjJjM2U5NDgzNWNkM2E4ODk3MzE4NDcyZGYyMzc0",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2011-09-08T20:50:58Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2011-12-01T17:18:50Z"
      },
      "message": "Moved checkpoints out of main, to prep for using them to help prevent DoS attacks",
      "tree": {
        "sha": "783a1d81774279474627e74209f792bbe9af382a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/783a1d81774279474627e74209f792bbe9af382a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb5fff9e16b2c3e94835cd3a8897318472df2374",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb5fff9e16b2c3e94835cd3a8897318472df2374",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eb5fff9e16b2c3e94835cd3a8897318472df2374",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb5fff9e16b2c3e94835cd3a8897318472df2374/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a7120a3647b17878914da0b40655edcc5a9da59f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7120a3647b17878914da0b40655edcc5a9da59f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a7120a3647b17878914da0b40655edcc5a9da59f"
      }
    ],
    "stats": {
      "total": 150,
      "additions": 121,
      "deletions": 29
    },
    "files": [
      {
        "sha": "8fc177f7f48d52068184ad3eed6a2400b05bf519",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb5fff9e16b2c3e94835cd3a8897318472df2374/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb5fff9e16b2c3e94835cd3a8897318472df2374/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=eb5fff9e16b2c3e94835cd3a8897318472df2374",
        "patch": "@@ -88,6 +88,7 @@ HEADERS += src/qt/bitcoingui.h \\\n     src/qt/bitcoinaddressvalidator.h \\\n     src/base58.h \\\n     src/bignum.h \\\n+    src/checkpoints.h \\\n     src/util.h \\\n     src/uint256.h \\\n     src/serialize.h \\\n@@ -152,6 +153,7 @@ SOURCES += src/qt/bitcoin.cpp src/qt/bitcoingui.cpp \\\n     src/init.cpp \\\n     src/net.cpp \\\n     src/irc.cpp \\\n+    src/checkpoints.cpp \\\n     src/db.cpp \\\n     src/json/json_spirit_writer.cpp \\\n     src/json/json_spirit_value.cpp \\"
      },
      {
        "sha": "4419a06c83099c52f237f0833c1e5c463d68b858",
        "filename": "src/checkpoints.cpp",
        "status": "added",
        "additions": 43,
        "deletions": 0,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb5fff9e16b2c3e94835cd3a8897318472df2374/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb5fff9e16b2c3e94835cd3a8897318472df2374/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=eb5fff9e16b2c3e94835cd3a8897318472df2374",
        "patch": "@@ -0,0 +1,43 @@\n+// Copyright (c) 2011 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file license.txt or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"checkpoints.h\"\n+#include \"uint256.h\"\n+#include \"util.h\"\n+\n+#include <boost/assign/list_of.hpp> // for 'map_list_of()'\n+\n+namespace Checkpoints\n+{\n+    typedef std::map<int, uint256> MapCheckpoints;\n+\n+    static MapCheckpoints mapCheckpoints =\n+        boost::assign::map_list_of\n+        ( 11111, uint256(\"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d\"))\n+        ( 33333, uint256(\"0x000000002dd5588a74784eaa7ab0507a18ad16a236e7b1ce69f00d7ddfb5d0a6\"))\n+        ( 68555, uint256(\"0x00000000001e1b4903550a0b96e9a9405c8a95f387162e4944e8d9fbe501cd6a\"))\n+        ( 70567, uint256(\"0x00000000006a49b14bcf27462068f1264c961f11fa2e0eddd2be0791e1d4124a\"))\n+        ( 74000, uint256(\"0x0000000000573993a3c9e41ce34471c079dcf5f52a0e824a81e7f953b8661a20\"))\n+        (105000, uint256(\"0x00000000000291ce28027faea320c8d2b054b2e0fe44a773f3eefb151d6bdc97\"))\n+        (118000, uint256(\"0x000000000000774a7f8a7a12dc906ddb9e17e75d684f15e00f8767f9e8f36553\"))\n+        (134444, uint256(\"0x00000000000005b12ffd4cd315cd34ffd4a594f430ac814c91184a0d42d2b0fe\"))\n+        (140700, uint256(\"0x000000000000033b512028abb90e1626d8b346fd0ed598ac0a3c371138dce2bd\"))\n+        ;\n+\n+    bool CheckBlock(int nHeight, const uint256& hash)\n+    {\n+        if (fTestNet) return true; // Testnet has no checkpoints\n+\n+        MapCheckpoints::const_iterator i = mapCheckpoints.find(nHeight);\n+        if (i == mapCheckpoints.end()) return true;\n+        return hash == i->second;\n+    }\n+\n+    int GetTotalBlocksEstimate()\n+    {\n+        if (fTestNet) return 0; // Testnet has no checkpoints\n+\n+        return mapCheckpoints.rbegin()->first;\n+    }\n+}"
      },
      {
        "sha": "32094fdde620149a1c9f810b2eba861dc6f8c280",
        "filename": "src/checkpoints.h",
        "status": "added",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb5fff9e16b2c3e94835cd3a8897318472df2374/src/checkpoints.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb5fff9e16b2c3e94835cd3a8897318472df2374/src/checkpoints.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.h?ref=eb5fff9e16b2c3e94835cd3a8897318472df2374",
        "patch": "@@ -0,0 +1,22 @@\n+// Copyright (c) 2011 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file license.txt or http://www.opensource.org/licenses/mit-license.php.\n+#ifndef BITCOIN_CHECKPOINT_H\n+#define  BITCOIN_CHECKPOINT_H\n+\n+class uint256;\n+\n+//\n+// Block-chain checkpoints are compiled-in sanity checks.\n+// They are updated every release or three.\n+//\n+namespace Checkpoints\n+{\n+    // Returns true if block passes checkpoint checks\n+    bool CheckBlock(int nHeight, const uint256& hash);\n+\n+    // Return conservative estimate of total number of blocks, 0 if unknown\n+    int GetTotalBlocksEstimate();\n+}\n+\n+#endif"
      },
      {
        "sha": "832a0f9240265052de3543a9e95d5bf062f22ab0",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 27,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb5fff9e16b2c3e94835cd3a8897318472df2374/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb5fff9e16b2c3e94835cd3a8897318472df2374/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=eb5fff9e16b2c3e94835cd3a8897318472df2374",
        "patch": "@@ -3,6 +3,7 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n #include \"headers.h\"\n+#include \"checkpoints.h\"\n #include \"db.h\"\n #include \"net.h\"\n #include \"init.h\"\n@@ -29,7 +30,6 @@ map<COutPoint, CInPoint> mapNextTx;\n map<uint256, CBlockIndex*> mapBlockIndex;\n uint256 hashGenesisBlock(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\");\n static CBigNum bnProofOfWorkLimit(~uint256(0) >> 32);\n-const int nTotalBlocksEstimate = 140700; // Conservative estimate of total nr of blocks on main chain\n const int nInitialBlockThreshold = 120; // Regard blocks up until N-threshold as \"initial download\"\n CBlockIndex* pindexGenesisBlock = NULL;\n int nBestHeight = -1;\n@@ -721,28 +721,15 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits)\n     return true;\n }\n \n-// Return conservative estimate of total number of blocks, 0 if unknown\n-int GetTotalBlocksEstimate()\n-{\n-    if(fTestNet)\n-    {\n-        return 0;\n-    }\n-    else\n-    {\n-        return nTotalBlocksEstimate;\n-    }\n-}\n-\n // Return maximum amount of blocks that other nodes claim to have\n int GetNumBlocksOfPeers()\n {\n-    return std::max(cPeerBlockCounts.median(), GetTotalBlocksEstimate());\n+    return std::max(cPeerBlockCounts.median(), Checkpoints::GetTotalBlocksEstimate());\n }\n \n bool IsInitialBlockDownload()\n {\n-    if (pindexBest == NULL || nBestHeight < (GetTotalBlocksEstimate()-nInitialBlockThreshold))\n+    if (pindexBest == NULL || nBestHeight < (Checkpoints::GetTotalBlocksEstimate()-nInitialBlockThreshold))\n         return true;\n     static int64 nLastUpdate;\n     static CBlockIndex* pindexLastBest;\n@@ -1317,17 +1304,8 @@ bool CBlock::AcceptBlock()\n             return DoS(10, error(\"AcceptBlock() : contains a non-final transaction\"));\n \n     // Check that the block chain matches the known block chain up to a checkpoint\n-    if (!fTestNet)\n-        if ((nHeight ==  11111 && hash != uint256(\"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d\")) ||\n-            (nHeight ==  33333 && hash != uint256(\"0x000000002dd5588a74784eaa7ab0507a18ad16a236e7b1ce69f00d7ddfb5d0a6\")) ||\n-            (nHeight ==  68555 && hash != uint256(\"0x00000000001e1b4903550a0b96e9a9405c8a95f387162e4944e8d9fbe501cd6a\")) ||\n-            (nHeight ==  70567 && hash != uint256(\"0x00000000006a49b14bcf27462068f1264c961f11fa2e0eddd2be0791e1d4124a\")) ||\n-            (nHeight ==  74000 && hash != uint256(\"0x0000000000573993a3c9e41ce34471c079dcf5f52a0e824a81e7f953b8661a20\")) ||\n-            (nHeight == 105000 && hash != uint256(\"0x00000000000291ce28027faea320c8d2b054b2e0fe44a773f3eefb151d6bdc97\")) ||\n-            (nHeight == 118000 && hash != uint256(\"0x000000000000774a7f8a7a12dc906ddb9e17e75d684f15e00f8767f9e8f36553\")) ||\n-            (nHeight == 134444 && hash != uint256(\"0x00000000000005b12ffd4cd315cd34ffd4a594f430ac814c91184a0d42d2b0fe\")) ||\n-            (nHeight == 140700 && hash != uint256(\"0x000000000000033b512028abb90e1626d8b346fd0ed598ac0a3c371138dce2bd\")))\n-            return DoS(100, error(\"AcceptBlock() : rejected by checkpoint lockin at %d\", nHeight));\n+    if (!Checkpoints::CheckBlock(nHeight, hash))\n+        return DoS(100, error(\"AcceptBlock() : rejected by checkpoint lockin at %d\", nHeight));\n \n     // Write block to history file\n     if (!CheckDiskSpace(::GetSerializeSize(*this, SER_DISK)))"
      },
      {
        "sha": "f459d050ce94e8bfa5211e30ab92d155db212db0",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb5fff9e16b2c3e94835cd3a8897318472df2374/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb5fff9e16b2c3e94835cd3a8897318472df2374/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=eb5fff9e16b2c3e94835cd3a8897318472df2374",
        "patch": "@@ -99,7 +99,6 @@ void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int&\n void FormatHashBuffers(CBlock* pblock, char* pmidstate, char* pdata, char* phash1);\n bool CheckWork(CBlock* pblock, CWallet& wallet, CReserveKey& reservekey);\n bool CheckProofOfWork(uint256 hash, unsigned int nBits);\n-int GetTotalBlocksEstimate();\n int GetNumBlocksOfPeers();\n bool IsInitialBlockDownload();\n std::string GetWarnings(std::string strFor);"
      },
      {
        "sha": "61f8d4881f0e636be8eed5b595c164e6dcc86066",
        "filename": "src/makefile.linux-mingw",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb5fff9e16b2c3e94835cd3a8897318472df2374/src/makefile.linux-mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb5fff9e16b2c3e94835cd3a8897318472df2374/src/makefile.linux-mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.linux-mingw?ref=eb5fff9e16b2c3e94835cd3a8897318472df2374",
        "patch": "@@ -32,6 +32,7 @@ CFLAGS=-O2 -w -Wno-invalid-offsetof -Wformat $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATH\n HEADERS = \\\n     base58.h \\\n     bignum.h \\\n+    checkpoints.h \\\n     crypter.h \\\n     db.h \\\n     headers.h \\\n@@ -61,6 +62,7 @@ endif\n LIBS += -l mingwthrd -l kernel32 -l user32 -l gdi32 -l comdlg32 -l winspool -l winmm -l shell32 -l comctl32 -l ole32 -l oleaut32 -l uuid -l rpcrt4 -l advapi32 -l ws2_32 -l shlwapi\n \n OBJS= \\\n+    obj/checkpoints.o \\\n     obj/crypter.o \\\n     obj/db.o \\\n     obj/init.o \\"
      },
      {
        "sha": "2cb78d97e6a90ee8d7cbb5dbd5d86ae24cb3a70a",
        "filename": "src/makefile.mingw",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb5fff9e16b2c3e94835cd3a8897318472df2374/src/makefile.mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb5fff9e16b2c3e94835cd3a8897318472df2374/src/makefile.mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.mingw?ref=eb5fff9e16b2c3e94835cd3a8897318472df2374",
        "patch": "@@ -29,6 +29,7 @@ CFLAGS=-mthreads -O2 -w -Wno-invalid-offsetof -Wformat $(DEBUGFLAGS) $(DEFS) $(I\n HEADERS = \\\n     base58.h \\\n     bignum.h \\\n+    checkpoints.h \\\n     crypter.h \\\n     db.h \\\n     headers.h \\\n@@ -58,6 +59,7 @@ endif\n LIBS += -l kernel32 -l user32 -l gdi32 -l comdlg32 -l winspool -l winmm -l shell32 -l comctl32 -l ole32 -l oleaut32 -l uuid -l rpcrt4 -l advapi32 -l ws2_32 -l shlwapi\n \n OBJS= \\\n+    obj/checkpoints.o \\\n     obj/crypter.o \\\n     obj/db.o \\\n     obj/init.o \\"
      },
      {
        "sha": "de7188793565013accca78f55d7359bbc667687a",
        "filename": "src/makefile.osx",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb5fff9e16b2c3e94835cd3a8897318472df2374/src/makefile.osx",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb5fff9e16b2c3e94835cd3a8897318472df2374/src/makefile.osx",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.osx?ref=eb5fff9e16b2c3e94835cd3a8897318472df2374",
        "patch": "@@ -49,6 +49,7 @@ CFLAGS=-mmacosx-version-min=10.5 -arch i386 -O3 -Wno-invalid-offsetof -Wformat $\n HEADERS = \\\n     base58.h \\\n     bignum.h \\\n+    checkpoints.h \\\n     crypter.h \\\n     db.h \\\n     headers.h \\\n@@ -69,6 +70,7 @@ HEADERS = \\\n     wallet.h\n \n OBJS= \\\n+    obj/checkpoints.o \\\n     obj/crypter.o \\\n     obj/db.o \\\n     obj/init.o \\"
      },
      {
        "sha": "6c48199546d4d84fcebfea084b273694bdaa2cd5",
        "filename": "src/makefile.unix",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb5fff9e16b2c3e94835cd3a8897318472df2374/src/makefile.unix",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb5fff9e16b2c3e94835cd3a8897318472df2374/src/makefile.unix",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.unix?ref=eb5fff9e16b2c3e94835cd3a8897318472df2374",
        "patch": "@@ -87,6 +87,7 @@ xCXXFLAGS=-pthread -Wno-invalid-offsetof -Wformat $(DEBUGFLAGS) $(DEFS) $(HARDEN\n HEADERS = \\\n     base58.h \\\n     bignum.h \\\n+    checkpoints.h \\\n     crypter.h \\\n     db.h \\\n     headers.h \\\n@@ -107,6 +108,7 @@ HEADERS = \\\n     wallet.h\n \n OBJS= \\\n+    obj/checkpoints.o \\\n     obj/crypter.o \\\n     obj/db.o \\\n     obj/init.o \\"
      },
      {
        "sha": "60f1e096338becc5415c10d438ab13c1f1adf8a1",
        "filename": "src/makefile.vc",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb5fff9e16b2c3e94835cd3a8897318472df2374/src/makefile.vc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb5fff9e16b2c3e94835cd3a8897318472df2374/src/makefile.vc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.vc?ref=eb5fff9e16b2c3e94835cd3a8897318472df2374",
        "patch": "@@ -43,6 +43,7 @@ CFLAGS=/MD /c /nologo /EHsc /GR /Zm300 $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)\n HEADERS = \\\n     base58.h \\\n     bignum.h \\\n+    checkpoints.h \\\n     crypter.h \\\n     db.h \\\n     headers.h \\\n@@ -65,6 +66,7 @@ HEADERS = \\\n     wallet.h\n \n OBJS= \\\n+    obj\\checkpoints.o \\\n     obj\\crypter.o \\\n     obj\\db.o \\\n     obj\\init.o \\\n@@ -87,6 +89,8 @@ all: bitcoind.exe\n .cpp{obj}.obj:\n     cl $(CFLAGS) /DGUI /Fo$@ %s\n \n+obj\\checkpoints.obj: $(HEADERS)\n+\n obj\\util.obj: $(HEADERS)\n \n obj\\script.obj: $(HEADERS)\n@@ -116,6 +120,8 @@ obj\\uibase.obj: $(HEADERS)\n .cpp{obj\\nogui}.obj:\n     cl $(CFLAGS) /Fo$@ %s\n \n+obj\\nogui\\checkpoints.obj: $(HEADERS)\n+\n obj\\nogui\\util.obj: $(HEADERS)\n \n obj\\nogui\\script.obj: $(HEADERS)"
      },
      {
        "sha": "0d8a366d7ac0c607a12dba6e4f54cc27c54184f1",
        "filename": "src/test/Checkpoints_tests.cpp",
        "status": "added",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb5fff9e16b2c3e94835cd3a8897318472df2374/src/test/Checkpoints_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb5fff9e16b2c3e94835cd3a8897318472df2374/src/test/Checkpoints_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/Checkpoints_tests.cpp?ref=eb5fff9e16b2c3e94835cd3a8897318472df2374",
        "patch": "@@ -0,0 +1,34 @@\n+//\n+// Unit tests for block-chain checkpoints\n+//\n+#include <boost/assign/list_of.hpp> // for 'map_list_of()'\n+#include <boost/test/unit_test.hpp>\n+#include <boost/foreach.hpp>\n+\n+#include \"../checkpoints.h\"\n+#include \"../util.h\"\n+\n+using namespace std;\n+\n+BOOST_AUTO_TEST_SUITE(Checkpoints_tests)\n+\n+BOOST_AUTO_TEST_CASE(sanity)\n+{\n+    uint256 p11111 = uint256(\"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d\");\n+    uint256 p140700 = uint256(\"0x000000000000033b512028abb90e1626d8b346fd0ed598ac0a3c371138dce2bd\");\n+    BOOST_CHECK(Checkpoints::CheckBlock(11111, p11111));\n+    BOOST_CHECK(Checkpoints::CheckBlock(140700, p140700));\n+\n+    \n+    // Wrong hashes at checkpoints should fail:\n+    BOOST_CHECK(!Checkpoints::CheckBlock(11111, p140700));\n+    BOOST_CHECK(!Checkpoints::CheckBlock(140700, p11111));\n+\n+    // ... but any hash not at a checkpoint should succeed:\n+    BOOST_CHECK(Checkpoints::CheckBlock(11111+1, p140700));\n+    BOOST_CHECK(Checkpoints::CheckBlock(140700+1, p11111));\n+\n+    BOOST_CHECK(Checkpoints::GetTotalBlocksEstimate() >= 140700);\n+}    \n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "1093b73d80eb09ad0e632f793cd2c05ef7174f17",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb5fff9e16b2c3e94835cd3a8897318472df2374/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb5fff9e16b2c3e94835cd3a8897318472df2374/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=eb5fff9e16b2c3e94835cd3a8897318472df2374",
        "patch": "@@ -64,5 +64,4 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     BOOST_CHECK(!CNode::IsBanned(addr.ip));\n }    \n \n-\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "39a7c88e135202affac55d5eaed9a67fe28bd73a",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb5fff9e16b2c3e94835cd3a8897318472df2374/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb5fff9e16b2c3e94835cd3a8897318472df2374/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=eb5fff9e16b2c3e94835cd3a8897318472df2374",
        "patch": "@@ -13,6 +13,7 @@\n #include \"util_tests.cpp\"\n #include \"base58_tests.cpp\"\n #include \"miner_tests.cpp\"\n+#include \"Checkpoints_tests.cpp\"\n \n CWallet* pwalletMain;\n "
      }
    ]
  },
  {
    "sha": "10fd7f66893fd62ab65f9302115834c441eb571b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMGZkN2Y2Njg5M2ZkNjJhYjY1ZjkzMDIxMTU4MzRjNDQxZWI1NzFi",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2011-09-08T16:51:43Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2011-12-01T18:53:38Z"
      },
      "message": "Orphan block fill-up-memory attack prevention",
      "tree": {
        "sha": "f427051302b0f120c99976effdc6761b7ff509aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f427051302b0f120c99976effdc6761b7ff509aa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10fd7f66893fd62ab65f9302115834c441eb571b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10fd7f66893fd62ab65f9302115834c441eb571b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/10fd7f66893fd62ab65f9302115834c441eb571b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10fd7f66893fd62ab65f9302115834c441eb571b/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eb5fff9e16b2c3e94835cd3a8897318472df2374",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb5fff9e16b2c3e94835cd3a8897318472df2374",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb5fff9e16b2c3e94835cd3a8897318472df2374"
      }
    ],
    "stats": {
      "total": 140,
      "additions": 132,
      "deletions": 8
    },
    "files": [
      {
        "sha": "c7e054df378157e0ba753c501cbdfc936e300e7e",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 5,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10fd7f66893fd62ab65f9302115834c441eb571b/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10fd7f66893fd62ab65f9302115834c441eb571b/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=10fd7f66893fd62ab65f9302115834c441eb571b",
        "patch": "@@ -2,16 +2,23 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"checkpoints.h\"\n-#include \"uint256.h\"\n-#include \"util.h\"\n-\n #include <boost/assign/list_of.hpp> // for 'map_list_of()'\n+#include <boost/foreach.hpp>\n+\n+#include \"headers.h\"\n+#include \"checkpoints.h\"\n \n namespace Checkpoints\n {\n     typedef std::map<int, uint256> MapCheckpoints;\n \n+    //\n+    // What makes a good checkpoint block?\n+    // + Is surrounded by blocks with reasonable timestamps\n+    //   (no blocks before with a timestamp after, none after with\n+    //    timestamp before)\n+    // + Contains no strange transactions\n+    //\n     static MapCheckpoints mapCheckpoints =\n         boost::assign::map_list_of\n         ( 11111, uint256(\"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d\"))\n@@ -36,8 +43,23 @@ namespace Checkpoints\n \n     int GetTotalBlocksEstimate()\n     {\n-        if (fTestNet) return 0; // Testnet has no checkpoints\n+        if (fTestNet) return 0;\n \n         return mapCheckpoints.rbegin()->first;\n     }\n+\n+    CBlockIndex* GetLastCheckpoint(const std::map<uint256, CBlockIndex*>& mapBlockIndex)\n+    {\n+        if (fTestNet) return NULL;\n+\n+        int64 nResult;\n+        BOOST_REVERSE_FOREACH(const MapCheckpoints::value_type& i, mapCheckpoints)\n+        {\n+            const uint256& hash = i.second;\n+            std::map<uint256, CBlockIndex*>::const_iterator t = mapBlockIndex.find(hash);\n+            if (t != mapBlockIndex.end())\n+                return t->second;\n+        }\n+        return NULL;\n+    }\n }"
      },
      {
        "sha": "9d52da404fbc78fbae92400d4212ca1d15bc02c6",
        "filename": "src/checkpoints.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10fd7f66893fd62ab65f9302115834c441eb571b/src/checkpoints.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10fd7f66893fd62ab65f9302115834c441eb571b/src/checkpoints.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.h?ref=10fd7f66893fd62ab65f9302115834c441eb571b",
        "patch": "@@ -4,7 +4,11 @@\n #ifndef BITCOIN_CHECKPOINT_H\n #define  BITCOIN_CHECKPOINT_H\n \n+#include <map>\n+#include \"util.h\"\n+\n class uint256;\n+class CBlockIndex;\n \n //\n // Block-chain checkpoints are compiled-in sanity checks.\n@@ -17,6 +21,9 @@ namespace Checkpoints\n \n     // Return conservative estimate of total number of blocks, 0 if unknown\n     int GetTotalBlocksEstimate();\n+\n+    // Returns last CBlockIndex* in mapBlockIndex that is a checkpoint\n+    CBlockIndex* GetLastCheckpoint(const std::map<uint256, CBlockIndex*>& mapBlockIndex);\n }\n \n #endif"
      },
      {
        "sha": "a7871fcc168747b4b8378dfaf69adba8649a2c0f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 46,
        "deletions": 3,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10fd7f66893fd62ab65f9302115834c441eb571b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10fd7f66893fd62ab65f9302115834c441eb571b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=10fd7f66893fd62ab65f9302115834c441eb571b",
        "patch": "@@ -659,11 +659,32 @@ int64 static GetBlockValue(int nHeight, int64 nFees)\n     return nSubsidy + nFees;\n }\n \n+static const int64 nTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n+static const int64 nTargetSpacing = 10 * 60;\n+static const int64 nInterval = nTargetTimespan / nTargetSpacing;\n+\n+//\n+// minimum amount of work that could possibly be required nTime after\n+// minimum work required was nBase\n+//\n+unsigned int ComputeMinWork(unsigned int nBase, int64 nTime)\n+{\n+    CBigNum bnResult;\n+    bnResult.SetCompact(nBase);\n+    while (nTime > 0 && bnResult < bnProofOfWorkLimit)\n+    {\n+        // Maximum 400% adjustment...\n+        bnResult *= 4;\n+        // ... in best-case exactly 4-times-normal target time\n+        nTime -= nTargetTimespan*4;\n+    }\n+    if (bnResult > bnProofOfWorkLimit)\n+        bnResult = bnProofOfWorkLimit;\n+    return bnResult.GetCompact();\n+}\n+\n unsigned int static GetNextWorkRequired(const CBlockIndex* pindexLast)\n {\n-    const int64 nTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n-    const int64 nTargetSpacing = 10 * 60;\n-    const int64 nInterval = nTargetTimespan / nTargetSpacing;\n \n     // Genesis block\n     if (pindexLast == NULL)\n@@ -1340,6 +1361,28 @@ bool ProcessBlock(CNode* pfrom, CBlock* pblock)\n     if (!pblock->CheckBlock())\n         return error(\"ProcessBlock() : CheckBlock FAILED\");\n \n+    CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint(mapBlockIndex);\n+    if (pcheckpoint && pblock->hashPrevBlock != hashBestChain)\n+    {\n+        // Extra checks to prevent \"fill up memory by spamming with bogus blocks\"\n+        int64 deltaTime = pblock->GetBlockTime() - pcheckpoint->nTime;\n+        if (deltaTime < 0)\n+        {\n+            pfrom->Misbehaving(100);\n+            return error(\"ProcessBlock() : block with timestamp before last checkpoint\");\n+        }\n+        CBigNum bnNewBlock;\n+        bnNewBlock.SetCompact(pblock->nBits);\n+        CBigNum bnRequired;\n+        bnRequired.SetCompact(ComputeMinWork(pcheckpoint->nBits, deltaTime));\n+        if (bnNewBlock > bnRequired)\n+        {\n+            pfrom->Misbehaving(100);\n+            return error(\"ProcessBlock() : block with too little proof-of-work\");\n+        }\n+    }\n+\n+\n     // If don't already have its previous block, shunt it off to holding area until we get it\n     if (!mapBlockIndex.count(pblock->hashPrevBlock))\n     {"
      },
      {
        "sha": "3870cee864bdf9b01075fc956d6fc810b7c7e15a",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10fd7f66893fd62ab65f9302115834c441eb571b/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10fd7f66893fd62ab65f9302115834c441eb571b/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=10fd7f66893fd62ab65f9302115834c441eb571b",
        "patch": "@@ -99,6 +99,7 @@ void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int&\n void FormatHashBuffers(CBlock* pblock, char* pmidstate, char* pdata, char* phash1);\n bool CheckWork(CBlock* pblock, CWallet& wallet, CReserveKey& reservekey);\n bool CheckProofOfWork(uint256 hash, unsigned int nBits);\n+unsigned int ComputeMinWork(unsigned int nBase, int64 nTime);\n int GetNumBlocksOfPeers();\n bool IsInitialBlockDownload();\n std::string GetWarnings(std::string strFor);"
      },
      {
        "sha": "01e6691254a53678c76ba89e60e36f980971d0ae",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 0,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10fd7f66893fd62ab65f9302115834c441eb571b/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10fd7f66893fd62ab65f9302115834c441eb571b/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=10fd7f66893fd62ab65f9302115834c441eb571b",
        "patch": "@@ -1,6 +1,7 @@\n //\n // Unit tests for denial-of-service detection/prevention code\n //\n+#include <boost/assign/list_of.hpp> // for 'map_list_of()'\n #include <boost/test/unit_test.hpp>\n #include <boost/foreach.hpp>\n \n@@ -64,4 +65,54 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     BOOST_CHECK(!CNode::IsBanned(addr.ip));\n }    \n \n+static bool CheckNBits(unsigned int nbits1, int64 time1, unsigned int nbits2, int64 time2)\n+{\n+    if (time1 > time2)\n+        return CheckNBits(nbits2, time2, nbits1, time1);\n+    int64 deltaTime = time2-time1;\n+\n+    CBigNum required;\n+    required.SetCompact(ComputeMinWork(nbits1, deltaTime));\n+    CBigNum have;\n+    have.SetCompact(nbits2);\n+    return (have <= required);\n+}\n+\n+BOOST_AUTO_TEST_CASE(DoS_checknbits)\n+{\n+    using namespace boost::assign; // for 'map_list_of()'\n+\n+    // Timestamps,nBits from the bitcoin blockchain.\n+    // These are the block-chain checkpoint blocks\n+    typedef std::map<int64, unsigned int> BlockData;\n+    BlockData chainData =\n+        map_list_of(1239852051,486604799)(1262749024,486594666)\n+        (1279305360,469854461)(1280200847,469830746)(1281678674,469809688)\n+        (1296207707,453179945)(1302624061,453036989)(1309640330,437004818)\n+        (1313172719,436789733);\n+\n+    // Make sure CheckNBits considers every combination of block-chain-lock-in-points\n+    // \"sane\":\n+    BOOST_FOREACH(const BlockData::value_type& i, chainData)\n+    {\n+        BOOST_FOREACH(const BlockData::value_type& j, chainData)\n+        {\n+            BOOST_CHECK(CheckNBits(i.second, i.first, j.second, j.first));\n+        }\n+    }\n+\n+    // Test a couple of insane combinations:\n+    BlockData::value_type firstcheck = *(chainData.begin());\n+    BlockData::value_type lastcheck = *(chainData.rbegin());\n+\n+    // First checkpoint difficulty at or a while after the last checkpoint time should fail when\n+    // compared to last checkpoint\n+    BOOST_CHECK(!CheckNBits(firstcheck.second, lastcheck.first+60*10, lastcheck.second, lastcheck.first));\n+    BOOST_CHECK(!CheckNBits(firstcheck.second, lastcheck.first+60*60*24*14, lastcheck.second, lastcheck.first));\n+\n+    // ... but OK if enough time passed for difficulty to adjust downward:\n+    BOOST_CHECK(CheckNBits(firstcheck.second, lastcheck.first+60*60*24*365*4, lastcheck.second, lastcheck.first));\n+    \n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]