achow101,2018-02-21T03:54:36Z,"@ryanofsky I've implemented something which is basically what you described. It seems to work, although I'm not sure how to test the thread safe-ness of it. Let me know what you think.",https://github.com/bitcoin/bitcoin/pull/12493#issuecomment-367205750,367205750,
achow101,2018-03-28T17:56:12Z,Rebased,https://github.com/bitcoin/bitcoin/pull/12493#issuecomment-376978070,376978070,
achow101,2018-03-31T16:16:30Z,Fixed travis and rebased again.,https://github.com/bitcoin/bitcoin/pull/12493#issuecomment-377704231,377704231,
achow101,2018-04-12T21:38:07Z,Rebased,https://github.com/bitcoin/bitcoin/pull/12493#issuecomment-380952269,380952269,
achow101,2018-05-05T04:36:00Z,Review beg,https://github.com/bitcoin/bitcoin/pull/12493#issuecomment-386778518,386778518,
achow101,2018-06-12T18:17:02Z,Review Beg?,https://github.com/bitcoin/bitcoin/pull/12493#issuecomment-396685450,396685450,
sipa,2018-07-14T00:26:57Z,utACK 06f17267ddafa089f093cfffc181d8c834d346e7,https://github.com/bitcoin/bitcoin/pull/12493#issuecomment-404984674,404984674,
achow101,2018-07-14T02:17:02Z,Rebased and added a commit to fix the silent merge conflict (test failure).,https://github.com/bitcoin/bitcoin/pull/12493#issuecomment-404991778,404991778,
sipa,2018-07-14T21:57:17Z,utACK bdad9c40595c1e4959ebce1b55894060b2d7c146,https://github.com/bitcoin/bitcoin/pull/12493#issuecomment-405052421,405052421,
achow101,2018-08-09T18:39:30Z,Rebased,https://github.com/bitcoin/bitcoin/pull/12493#issuecomment-411856214,411856214,
PierreRochard,2018-08-30T00:08:26Z,"Tested ACK c1dde3a949b36ce9c2155777b3fa1372e7ed97d8, this is a good UX improvement, thanks @achow101 \n\nI manually tested that there were indeed private keys in the logs after encrypting with the environment reload commented out, tested that reloading the environment does remove the logs with a lightly modified version of @achow101's script https://github.com/PierreRochard/bitcoin/commit/e9cd31",https://github.com/bitcoin/bitcoin/pull/12493#issuecomment-417147646,417147646,
promag,2018-08-30T00:36:55Z,@PierreRochard I'll try to reproduce it.,https://github.com/bitcoin/bitcoin/pull/12493#issuecomment-417152036,417152036,
jonasschnelli,2018-08-30T19:30:04Z,utACK c1dde3a949b36ce9c2155777b3fa1372e7ed97d8,https://github.com/bitcoin/bitcoin/pull/12493#issuecomment-417439664,417439664,
ken2812221,2018-09-04T03:42:31Z,Tested ACK c1dde3a,https://github.com/bitcoin/bitcoin/pull/12493#issuecomment-418232427,418232427,
fanquake,2019-03-21T00:29:08Z,Release note added in https://github.com/bitcoin-core/bitcoin-devwiki/wiki/0.18.0-Release-Notes-Draft/_compare/f36c2a4%5E...f36c2a4.,https://github.com/bitcoin/bitcoin/pull/12493#issuecomment-475078282,475078282,
ryanofsky,2018-02-21T01:16:48Z,"This is a great start! I don't think think it is thread safe yet, though, because in parallel with this thread, a block connected notification could be coming in, or another another RPC could be being made that is using one of the `Db*` or `DbEnv*` pointers that this closes.\n\nI think all you need to do to make this thread safe is wait for the `mapFileUseCount` entries to go to zero. You could ",https://github.com/bitcoin/bitcoin/pull/12493#discussion_r169511450,169511450,src/wallet/db.cpp
ryanofsky,2018-02-21T14:35:40Z,"In commit ""Replace cs_db with a recursive mutex use with a conditional_variable_any""\n\ncs_db is actually already a recursive mutex (it inherits from std::recursive_mutex). I think you could just leave it unchanged, and continue using the LOCK macro instead of std::lock_guard everywhere. This would make the commit smaller & simpler.\n\n",https://github.com/bitcoin/bitcoin/pull/12493#discussion_r169655317,169655317,src/wallet/db.h
ryanofsky,2018-02-21T14:39:03Z,"In commit ""Replace cs_db with a recursive mutex use with a conditional_variable_any""\n\nWould be good to add an AssertLockNotHeld(cs_db); above this, since it would be a bug if the mutex were held recursively when this was called (wait could hang if the lock wasn't released). ",https://github.com/bitcoin/bitcoin/pull/12493#discussion_r169656355,169656355,src/wallet/db.cpp
achow101,2018-02-21T15:32:14Z,"I tried that, but it kept giving me a compiler error.",https://github.com/bitcoin/bitcoin/pull/12493#discussion_r169675054,169675054,src/wallet/db.h
achow101,2018-02-21T15:51:17Z,Done,https://github.com/bitcoin/bitcoin/pull/12493#discussion_r169682192,169682192,src/wallet/db.cpp
ryanofsky,2018-02-21T17:45:49Z,"https://github.com/bitcoin/bitcoin/pull/12493#discussion_r169655317\n\n> I tried that, but it kept giving me a compiler error.\n\nWhat is the compiler error? The following compiles for me: c271de2d62881c0880bf64b830d72f686967bbfb (fetchable with `git fetch https://github.com/ryanofsky/bitcoin pr/lreload`).\n\nI didn't do any real testing with it but it passes python & unit tests.",https://github.com/bitcoin/bitcoin/pull/12493#discussion_r169721029,169721029,src/wallet/db.h
achow101,2018-02-21T18:19:54Z,"Ah, I was doing something with the macros and CCriticalSection. It was an error about not having an `unlock` method.\n\nI'll test this out, but from testing I just did with the current code, it looks like it does work, so this should work too.",https://github.com/bitcoin/bitcoin/pull/12493#discussion_r169730801,169730801,src/wallet/db.h
achow101,2018-02-21T21:06:22Z,@ryanofsky I've used your commit.,https://github.com/bitcoin/bitcoin/pull/12493#discussion_r169777432,169777432,src/wallet/db.h
ryanofsky,2018-02-22T02:05:04Z,"In commit ""After encrypting the wallet, reload the database environment""\n\nDelayed flushing seems more like a legitimate design tradeoff than a bad habit. Maybe just say something like ""flush and reload the database environment here to clear out any data in memory that might be left behind after the rewrite above.""",https://github.com/bitcoin/bitcoin/pull/12493#discussion_r169836879,169836879,src/wallet/wallet.cpp
ryanofsky,2018-02-22T02:14:04Z,"In commit ""After encrypting the wallet, reload the database environment""\n\nLooking at the CDB::Rewrite implementation I noticed that it already has a while loop that sleeps until mapFileUseCount (for just one wallet) is 0. You could take advantage of this if you wanted by tweaking the while loop there to wait for all use counts in the environment to be 0 and then calling ReloadDbEnv inside CDB:",https://github.com/bitcoin/bitcoin/pull/12493#discussion_r169838060,169838060,src/wallet/wallet.cpp
achow101,2018-02-22T02:48:38Z,The comment was just copied over from `rpcwallet.cpp`. ,https://github.com/bitcoin/bitcoin/pull/12493#discussion_r169842341,169842341,src/wallet/wallet.cpp
achow101,2018-02-22T02:49:05Z,I don't want to do anything to `CDB::Rewrite` since it is used in places other than `encryptwallet`.,https://github.com/bitcoin/bitcoin/pull/12493#discussion_r169842400,169842400,src/wallet/wallet.cpp
ryanofsky,2018-02-22T14:09:28Z,"https://github.com/bitcoin/bitcoin/pull/12493#discussion_r169838060\n\n> I don't want to do anything to CDB::Rewrite since it is used in places other than encryptwallet\n\nI didn't realize Rewrite was called other places, and the current approach does seem fine. But if you did want to unify the UseCount waiting logic, I think you could do it in a pretty clean way by adding a `bool reload_env` ",https://github.com/bitcoin/bitcoin/pull/12493#discussion_r169964768,169964768,src/wallet/wallet.cpp
achow101,2018-02-22T21:40:17Z,I think I'll leave it as it is now.,https://github.com/bitcoin/bitcoin/pull/12493#discussion_r170101734,170101734,src/wallet/wallet.cpp
promag,2018-02-26T14:48:46Z,Remove `.arg()` since `%1` was removed.,https://github.com/bitcoin/bitcoin/pull/12493#discussion_r170614391,170614391,src/qt/askpassphrasedialog.cpp
promag,2018-02-26T14:49:35Z,`QMessageBox::information`?,https://github.com/bitcoin/bitcoin/pull/12493#discussion_r170614682,170614682,src/qt/askpassphrasedialog.cpp
promag,2018-02-26T14:55:36Z,"Remove `filenames` and just iterate once, something like:\n```cpp\nwhile (!mapDb.empty()) {\n  std::string filename = mapDb.begin().first;\n  ...\n}\n```",https://github.com/bitcoin/bitcoin/pull/12493#discussion_r170616888,170616888,src/wallet/db.cpp
promag,2018-02-26T14:55:57Z,"Nit, space after `if`.",https://github.com/bitcoin/bitcoin/pull/12493#discussion_r170616987,170616987,src/wallet/db.cpp
achow101,2018-02-26T18:49:13Z,Done,https://github.com/bitcoin/bitcoin/pull/12493#discussion_r170695136,170695136,src/qt/askpassphrasedialog.cpp
achow101,2018-02-26T18:49:21Z,I don't think it needs to change.,https://github.com/bitcoin/bitcoin/pull/12493#discussion_r170695186,170695186,src/qt/askpassphrasedialog.cpp
achow101,2018-02-26T18:49:43Z,Done,https://github.com/bitcoin/bitcoin/pull/12493#discussion_r170695325,170695325,src/wallet/db.cpp
achow101,2018-02-26T18:50:44Z,This doesn't work (causes test failures with encryptwallet). I think it's becauese mapDb is modified by CloseDb too.,https://github.com/bitcoin/bitcoin/pull/12493#discussion_r170695659,170695659,src/wallet/db.cpp
sipa,2018-07-14T00:02:24Z,"It would be slightly cleaner to use `std::unique_lock<CCriticalSection>` here.\n\nAlso, please squash this into the first commit - currently your PR introduces a bug and then fixes it later.\n\nWe should probably also work on making the sync.h primitives more C++11 compatible, but let's leave that for later.",https://github.com/bitcoin/bitcoin/pull/12493#discussion_r202497267,202497267,src/wallet/db.cpp
achow101,2018-07-14T00:04:47Z,Done,https://github.com/bitcoin/bitcoin/pull/12493#discussion_r202497467,202497467,src/wallet/db.cpp
sipa,2018-07-14T00:09:52Z,"Performance nit: notifying while not holding the lock is slightly faster (currently you'll wake the waiting thread, which then immediately needs to sleep again because the lock is still held).",https://github.com/bitcoin/bitcoin/pull/12493#discussion_r202497854,202497854,src/wallet/db.cpp
sipa,2018-07-14T00:10:31Z,Nit: `const std::string& filename`.,https://github.com/bitcoin/bitcoin/pull/12493#discussion_r202497895,202497895,src/wallet/db.cpp
achow101,2018-07-14T00:22:29Z,Done,https://github.com/bitcoin/bitcoin/pull/12493#discussion_r202498649,202498649,src/wallet/db.cpp
achow101,2018-07-14T00:22:34Z,Done,https://github.com/bitcoin/bitcoin/pull/12493#discussion_r202498656,202498656,src/wallet/db.cpp
promag,2018-08-19T09:15:15Z,Don't use iterator references?,https://github.com/bitcoin/bitcoin/pull/12493#discussion_r211096962,211096962,src/wallet/db.cpp
ryanofsky,2018-09-14T17:56:48Z,"In commit ""Move BerkeleyEnvironment deletion from internal method to callsite"" (a769461d5e37ddcb771ae836254fdc69177a28c4)\n\n@achow101 do remember if this change was this done for specific reason? It seems like an odd thing to include here.",https://github.com/bitcoin/bitcoin/pull/12493#discussion_r217794290,217794290,src/wallet/db.cpp
achow101,2018-09-14T18:38:57Z,IIRC there are two reasons for this. The first was that we needed this in the next commit to avoid having a destroyed db environment because we want to reopen it. The second reason that I don't think it is good for an object to destroy its own references as that's what it does here.,https://github.com/bitcoin/bitcoin/pull/12493#discussion_r217806330,217806330,src/wallet/db.cpp
