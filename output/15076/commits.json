[
  {
    "sha": "b52fd8fa3ffd8b35e42ba8c807821d74f5a42d23",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNTJmZDhmYTNmZmQ4YjM1ZTQyYmE4YzgwNzgyMWQ3NGY1YTQyZDIz",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-12-31T19:37:14Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2019-01-01T21:38:12Z"
      },
      "message": "test: Propagate stderr through test_runner failure reporting\n\nThis makes failures more clear when failure occurs due to stderr not\nbeing empty, which can sometimes occur mysteriously or due to system\noutput.",
      "tree": {
        "sha": "85f12bc1961c2e1a8b4c67389b063d28fb5583af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/85f12bc1961c2e1a8b4c67389b063d28fb5583af"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b52fd8fa3ffd8b35e42ba8c807821d74f5a42d23",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQEcBAABCgAGBQJcK95KAAoJEG7l83hfeLNFl9AIAIb6USI6fw87QbDRw54Gb0+B\npILQ9pIll3sYVLoUhyAKwiKHgmAfy6ZdVL8HbUsVPjwcxXdAqd7NJBtrAf0O+KBa\nPOJUsNZFJhY9DYC6KGju8EXd5nsJ1EbpmgaZrdINROaRX8gQipmNMF9c9Idpn2ZZ\nP+X/7EzhEYFeqBCFcwUl38zVMscsvgnQWlc/yfu9C6A3JWDoDyXVeFghpALbElJ+\ni47nTHuJhUZu1Xqeo2JZqEM6ykxvzd72f6CuuF3zjl+64F1ydsOnv0ohhN776eEh\nZ/o7h6kXMqch/AJhlFKePMZ4POdkzFdwnxX3q02d4XeQ9IJAXgFqwb+eo0hGFD8=\n=BD96\n-----END PGP SIGNATURE-----",
        "payload": "tree 85f12bc1961c2e1a8b4c67389b063d28fb5583af\nparent f5a70d1462592a23bbad4aa150e6b2beaeec7c42\nauthor Ben Woosley <ben.woosley@gmail.com> 1546285034 -0800\ncommitter Ben Woosley <ben.woosley@gmail.com> 1546378692 -0800\n\ntest: Propagate stderr through test_runner failure reporting\n\nThis makes failures more clear when failure occurs due to stderr not\nbeing empty, which can sometimes occur mysteriously or due to system\noutput.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b52fd8fa3ffd8b35e42ba8c807821d74f5a42d23",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b52fd8fa3ffd8b35e42ba8c807821d74f5a42d23",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b52fd8fa3ffd8b35e42ba8c807821d74f5a42d23/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f5a70d1462592a23bbad4aa150e6b2beaeec7c42",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5a70d1462592a23bbad4aa150e6b2beaeec7c42",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f5a70d1462592a23bbad4aa150e6b2beaeec7c42"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 9,
      "deletions": 7
    },
    "files": [
      {
        "sha": "52c5e5d58edc73e152aa6d3cdc5d3b6c2684e9e2",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b52fd8fa3ffd8b35e42ba8c807821d74f5a42d23/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b52fd8fa3ffd8b35e42ba8c807821d74f5a42d23/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=b52fd8fa3ffd8b35e42ba8c807821d74f5a42d23",
        "patch": "@@ -380,13 +380,13 @@ def run_tests(*, test_list, src_dir, build_dir, tmpdir, jobs=1, enable_coverage=\n     for i in range(test_count):\n         test_result, testdir, stdout, stderr = job_queue.get_next()\n         test_results.append(test_result)\n-        done_str = \"{}/{} - {}{}{}\".format(i + 1, test_count, BOLD[1], test_result.name, BOLD[0])\n+        done_str = \"{}/{} - {}{}{} {}\".format(i + 1, test_count, BOLD[1], test_result.name, BOLD[0], test_result.status)\n         if test_result.status == \"Passed\":\n-            logging.debug(\"%s passed, Duration: %s s\" % (done_str, test_result.time))\n+            logging.debug(\"%s, Duration: %s s\" % (done_str, test_result.time))\n         elif test_result.status == \"Skipped\":\n-            logging.debug(\"%s skipped\" % (done_str))\n+            logging.debug(done_str)\n         else:\n-            print(\"%s failed, Duration: %s s\\n\" % (done_str, test_result.time))\n+            print(\"%s, Duration: %s s\\n\" % (done_str, test_result.time))\n             print(BOLD[1] + 'stdout:\\n' + BOLD[0] + stdout + '\\n')\n             print(BOLD[1] + 'stderr:\\n' + BOLD[0] + stderr + '\\n')\n             if combined_logs_len and os.path.isdir(testdir):\n@@ -499,10 +499,12 @@ def get_next(self):\n                     log_out.seek(0), log_err.seek(0)\n                     [stdout, stderr] = [log_file.read().decode('utf-8') for log_file in (log_out, log_err)]\n                     log_out.close(), log_err.close()\n-                    if proc.returncode == TEST_EXIT_PASSED and stderr == \"\":\n-                        status = \"Passed\"\n-                    elif proc.returncode == TEST_EXIT_SKIPPED:\n+                    if proc.returncode == TEST_EXIT_SKIPPED:\n                         status = \"Skipped\"\n+                    elif stderr != \"\":\n+                        status = \"Failed with: \\\"{}\\\"\".format(stderr)\n+                    elif proc.returncode == TEST_EXIT_PASSED:\n+                        status = \"Passed\"\n                     else:\n                         status = \"Failed\"\n                     self.num_running -= 1"
      }
    ]
  }
]