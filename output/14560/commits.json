[
  {
    "sha": "aa367b6364ea028152af9b77ed482fa223532b78",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYTM2N2I2MzY0ZWEwMjgxNTJhZjliNzdlZDQ4MmZhMjIzNTMyYjc4",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-10-24T10:10:47Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-10-24T10:10:47Z"
      },
      "message": "wallet: Avoid calling uiInterface.LoadWallet(...) with cs_wallet held",
      "tree": {
        "sha": "36eac0c1b84959db98885224d58313110b90ce17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/36eac0c1b84959db98885224d58313110b90ce17"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa367b6364ea028152af9b77ed482fa223532b78",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa367b6364ea028152af9b77ed482fa223532b78",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aa367b6364ea028152af9b77ed482fa223532b78",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa367b6364ea028152af9b77ed482fa223532b78/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e895fdc9fc83a35fc279b770b46c89e137e11128",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e895fdc9fc83a35fc279b770b46c89e137e11128",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e895fdc9fc83a35fc279b770b46c89e137e11128"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "2deeb9c42c997142303db7672d846a2adc069004",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa367b6364ea028152af9b77ed482fa223532b78/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa367b6364ea028152af9b77ed482fa223532b78/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=aa367b6364ea028152af9b77ed482fa223532b78",
        "patch": "@@ -4093,7 +4093,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(const std::string& name,\n     // Try to top up keypool. No-op if the wallet is locked.\n     walletInstance->TopUpKeyPool();\n \n-    LOCK2(cs_main, walletInstance->cs_wallet);\n+    LOCK(cs_main);\n \n     CBlockIndex *pindexRescan = chainActive.Genesis();\n     if (!gArgs.GetBoolArg(\"-rescan\", false))\n@@ -4128,6 +4128,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(const std::string& name,\n \n         // No need to read and scan block if block was created before\n         // our wallet birthday (as adjusted for block time variability)\n+        LOCK(walletInstance->cs_wallet);\n         while (pindexRescan && walletInstance->nTimeFirstKey && (pindexRescan->GetBlockTime() < (walletInstance->nTimeFirstKey - TIMESTAMP_WINDOW))) {\n             pindexRescan = chainActive.Next(pindexRescan);\n         }\n@@ -4178,6 +4179,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(const std::string& name,\n     walletInstance->SetBroadcastTransactions(gArgs.GetBoolArg(\"-walletbroadcast\", DEFAULT_WALLETBROADCAST));\n \n     {\n+        LOCK(walletInstance->cs_wallet);\n         walletInstance->WalletLogPrintf(\"setKeyPool.size() = %u\\n\",      walletInstance->GetKeyPoolSize());\n         walletInstance->WalletLogPrintf(\"mapWallet.size() = %u\\n\",       walletInstance->mapWallet.size());\n         walletInstance->WalletLogPrintf(\"mapAddressBook.size() = %u\\n\",  walletInstance->mapAddressBook.size());"
      }
    ]
  }
]