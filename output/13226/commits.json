[
  {
    "sha": "7714444c08ce103297508bd1fb4b08bc67f6f637",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NzE0NDQ0YzA4Y2UxMDMyOTc1MDhiZDFmYjRiMDhiYzY3ZjZmNjM3",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-05-08T00:42:49Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2021-06-06T20:48:05Z"
      },
      "message": "refactor: Track BnB selection by index\n\nThis is a performance optimization - rather than track all visited values\nin a bool vector, track the selected index in a vector. This results in a\ncomplexity reduction of O(utxo_size) to O(selection_size).",
      "tree": {
        "sha": "b15764d5beabae90e5aae9c944b0c342abc59308",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b15764d5beabae90e5aae9c944b0c342abc59308"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7714444c08ce103297508bd1fb4b08bc67f6f637",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQEcBAABCgAGBQJgvTSFAAoJEG7l83hfeLNFwoEH/0/o3xCiiQdZKz9/8i6EarFC\nYdD/cXZOuEisbW5xCr0a46HyiLmnV+pkDuakQ3RW+VVfjWIFK1DVK1kBt0+77jAt\n1iqz9l8gTRmaXPJMTK2J3Z2sLWXKJGupuyNGv8944FQK/oeOWr0EKMh7+LdxRHYg\n6lZRyIYHvc+C7MNdefh+fE7IFM5/2nxjaKHuYDAdiCpeZlNBAXQOq3+VCa6faof0\ndaDfzSltzvBCVFSxFcl407ZtC8LFsApLI3bXtBdEjNphAZON5dCSRv03duT0OWdy\nB6eGvdyv2BXzJ2AxrmWFgKUgTAqlSOhxBTPH0mpY83lAw8Ty8A/t0Q4UtjeIih8=\n=wrYa\n-----END PGP SIGNATURE-----",
        "payload": "tree b15764d5beabae90e5aae9c944b0c342abc59308\nparent e033ca13794699cf4744e71647db75c583a9a600\nauthor Ben Woosley <ben.woosley@gmail.com> 1525740169 -0400\ncommitter Ben Woosley <ben.woosley@gmail.com> 1623012485 -0400\n\nrefactor: Track BnB selection by index\n\nThis is a performance optimization - rather than track all visited values\nin a bool vector, track the selected index in a vector. This results in a\ncomplexity reduction of O(utxo_size) to O(selection_size).\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7714444c08ce103297508bd1fb4b08bc67f6f637",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7714444c08ce103297508bd1fb4b08bc67f6f637",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7714444c08ce103297508bd1fb4b08bc67f6f637/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e033ca13794699cf4744e71647db75c583a9a600",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e033ca13794699cf4744e71647db75c583a9a600",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e033ca13794699cf4744e71647db75c583a9a600"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 20,
      "deletions": 24
    },
    "files": [
      {
        "sha": "93301c67d38c4b48eb1da52cd11e67a439743f95",
        "filename": "src/wallet/coinselection.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 24,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7714444c08ce103297508bd1fb4b08bc67f6f637/src/wallet/coinselection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7714444c08ce103297508bd1fb4b08bc67f6f637/src/wallet/coinselection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.cpp?ref=7714444c08ce103297508bd1fb4b08bc67f6f637",
        "patch": "@@ -66,7 +66,7 @@ bool SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool, const CAmount& selectio\n     out_set.clear();\n     CAmount curr_value = 0;\n \n-    std::vector<bool> curr_selection; // select the utxo at this index\n+    std::vector<size_t> curr_selection; // selected utxo indexes\n     curr_selection.reserve(utxo_pool.size());\n \n     // Calculate curr_available_value\n@@ -84,11 +84,11 @@ bool SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool, const CAmount& selectio\n     std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n \n     CAmount curr_waste = 0;\n-    std::vector<bool> best_selection;\n+    std::vector<size_t> best_selection;\n     CAmount best_waste = MAX_MONEY;\n \n     // Depth First search loop for choosing the UTXOs\n-    for (size_t i = 0; i < TOTAL_TRIES; ++i) {\n+    for (size_t i = 0, curr_index = 0; i < TOTAL_TRIES; ++i, ++curr_index) {\n         // Conditions for starting a backtrack\n         bool backtrack = false;\n         if (curr_value + curr_available_value < selection_target ||                // Cannot possibly reach target with the amount remaining in the curr_available_value.\n@@ -103,7 +103,6 @@ bool SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool, const CAmount& selectio\n             // explore any more UTXOs to avoid burning money like that.\n             if (curr_waste <= best_waste) {\n                 best_selection = curr_selection;\n-                best_selection.resize(utxo_pool.size());\n                 best_waste = curr_waste;\n                 if (best_waste == 0) {\n                     break;\n@@ -115,36 +114,35 @@ bool SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool, const CAmount& selectio\n \n         // Backtracking, moving backwards\n         if (backtrack) {\n-            // Walk backwards to find the last included UTXO that still needs to have its omission branch traversed.\n-            while (!curr_selection.empty() && !curr_selection.back()) {\n-                curr_selection.pop_back();\n-                curr_available_value += utxo_pool.at(curr_selection.size()).GetSelectionAmount();\n+            if (curr_selection.empty()) { // No branch is untraversed. All solutions searched\n+                break;\n             }\n \n-            if (curr_selection.empty()) { // We have walked back to the first utxo and no branch is untraversed. All solutions searched\n-                break;\n+            // Walk backwards to find the last included UTXO that still needs to have its omission branch traversed.\n+            for (--curr_index; curr_index > curr_selection.back(); --curr_index) {\n+                curr_available_value += utxo_pool.at(curr_index).GetSelectionAmount();\n             }\n \n             // Output was included on previous iterations, try excluding now.\n-            curr_selection.back() = false;\n-            OutputGroup& utxo = utxo_pool.at(curr_selection.size() - 1);\n+            OutputGroup& utxo = utxo_pool.at(curr_index);\n             curr_value -= utxo.GetSelectionAmount();\n             curr_waste -= utxo.fee - utxo.long_term_fee;\n+            curr_selection.pop_back();\n         } else { // Moving forwards, continuing down this branch\n-            OutputGroup& utxo = utxo_pool.at(curr_selection.size());\n+            OutputGroup& utxo = utxo_pool.at(curr_index);\n \n             // Remove this utxo from the curr_available_value utxo amount\n             curr_available_value -= utxo.GetSelectionAmount();\n \n             // Avoid searching a branch if the previous UTXO has the same value and same waste and was excluded. Since the ratio of fee to\n             // long term fee is the same, we only need to check if one of those values match in order to know that the waste is the same.\n-            if (!curr_selection.empty() && !curr_selection.back() &&\n-                utxo.GetSelectionAmount() == utxo_pool.at(curr_selection.size() - 1).GetSelectionAmount() &&\n-                utxo.fee == utxo_pool.at(curr_selection.size() - 1).fee) {\n-                curr_selection.push_back(false);\n-            } else {\n+            if (curr_selection.empty() ||\n+                // The previous index is included and therefore not relevant for exclusion shortcut\n+                (curr_index - 1) == curr_selection.back() ||\n+                utxo.GetSelectionAmount() != utxo_pool.at(curr_index - 1).GetSelectionAmount() ||\n+                utxo.fee != utxo_pool.at(curr_index - 1).fee) {\n                 // Inclusion branch first (Largest First Exploration)\n-                curr_selection.push_back(true);\n+                curr_selection.push_back(curr_index);\n                 curr_value += utxo.GetSelectionAmount();\n                 curr_waste += utxo.fee - utxo.long_term_fee;\n             }\n@@ -158,11 +156,9 @@ bool SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool, const CAmount& selectio\n \n     // Set output set\n     value_ret = 0;\n-    for (size_t i = 0; i < best_selection.size(); ++i) {\n-        if (best_selection.at(i)) {\n-            util::insert(out_set, utxo_pool.at(i).m_outputs);\n-            value_ret += utxo_pool.at(i).m_value;\n-        }\n+    for (const size_t& index : best_selection) {\n+        util::insert(out_set, utxo_pool.at(index).m_outputs);\n+        value_ret += utxo_pool.at(index).m_value;\n     }\n \n     return true;"
      }
    ]
  }
]