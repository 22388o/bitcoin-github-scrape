[
  {
    "sha": "19ab9bc2c52584058558af7ad59d1e4bcd301172",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOWFiOWJjMmM1MjU4NDA1ODU1OGFmN2FkNTlkMWU0YmNkMzAxMTcy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-12-11T09:22:05Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-12-11T11:32:38Z"
      },
      "message": "qt: add \"Show all\" option in \"receiving addresses\"\n\nExtra information for nosy people.",
      "tree": {
        "sha": "bc8e64d6392201b6ac9f7aa0d4da74156c8f2b84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bc8e64d6392201b6ac9f7aa0d4da74156c8f2b84"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/19ab9bc2c52584058558af7ad59d1e4bcd301172",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19ab9bc2c52584058558af7ad59d1e4bcd301172",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/19ab9bc2c52584058558af7ad59d1e4bcd301172",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19ab9bc2c52584058558af7ad59d1e4bcd301172/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6939a0d50e2bb6156e88786cb025e8223302d8cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6939a0d50e2bb6156e88786cb025e8223302d8cf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6939a0d50e2bb6156e88786cb025e8223302d8cf"
      }
    ],
    "stats": {
      "total": 239,
      "additions": 175,
      "deletions": 64
    },
    "files": [
      {
        "sha": "09734e003977987f22bcc13479ef474471189158",
        "filename": "src/qt/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19ab9bc2c52584058558af7ad59d1e4bcd301172/src/qt/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19ab9bc2c52584058558af7ad59d1e4bcd301172/src/qt/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/Makefile.am?ref=19ab9bc2c52584058558af7ad59d1e4bcd301172",
        "patch": "@@ -105,7 +105,7 @@ QT_MOC_CPP = moc_aboutdialog.cpp moc_addressbookpage.cpp \\\n \n BITCOIN_MM = macdockiconhandler.mm macnotificationhandler.mm\n \n-QT_MOC = intro.moc overviewpage.moc rpcconsole.moc\n+QT_MOC = intro.moc overviewpage.moc rpcconsole.moc addressbookpage.moc\n \n QT_QRC_CPP = qrc_bitcoin.cpp\n QT_QRC = bitcoin.qrc"
      },
      {
        "sha": "9e6b47df0b9dbce6493d901bfa20f5f426e56a04",
        "filename": "src/qt/addressbookpage.cpp",
        "status": "modified",
        "additions": 64,
        "deletions": 12,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19ab9bc2c52584058558af7ad59d1e4bcd301172/src/qt/addressbookpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19ab9bc2c52584058558af7ad59d1e4bcd301172/src/qt/addressbookpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.cpp?ref=19ab9bc2c52584058558af7ad59d1e4bcd301172",
        "patch": "@@ -20,6 +20,50 @@\n #include <QMessageBox>\n #include <QSortFilterProxyModel>\n \n+class AddressFilterProxyModel : public QSortFilterProxyModel\n+{\n+    Q_OBJECT\n+\n+public:\n+    AddressFilterProxyModel(QObject *parent):\n+        QSortFilterProxyModel(parent),\n+        filterPurposeEnable(false)\n+    {\n+    }\n+\n+    /* Filter by type (receiving or sending) */\n+    void setType(const QString &type)\n+    {\n+        filterType = type;\n+        invalidateFilter();\n+    }\n+    /* Filter by address purpose */\n+    void setPurposes(bool enable, const QSet<QString> &purposes)\n+    {\n+        filterPurposeEnable = enable;\n+        filterPurposes = purposes;\n+        invalidateFilter();\n+    }\n+protected:\n+    bool filterAcceptsRow(int sourceRow, const QModelIndex &sourceParent) const\n+    {\n+        QModelIndex index = sourceModel()->index(sourceRow, 0, sourceParent);\n+        QString type = index.data(AddressTableModel::TypeRole).toString();\n+        QString purpose = index.data(AddressTableModel::PurposeRole).toString();\n+        if(type != filterType)\n+            return false;\n+        if(filterPurposeEnable && !filterPurposes.contains(purpose))\n+            return false;\n+        return QSortFilterProxyModel::filterAcceptsRow(sourceRow, sourceParent);\n+    }\n+\n+private:\n+    QString filterType;\n+    bool filterPurposeEnable;\n+    QSet<QString> filterPurposes;\n+};\n+#include \"addressbookpage.moc\"\n+\n AddressBookPage::AddressBookPage(Mode mode, Tabs tab, QWidget *parent) :\n     QDialog(parent),\n     ui(new Ui::AddressBookPage),\n@@ -49,6 +93,7 @@ AddressBookPage::AddressBookPage(Mode mode, Tabs tab, QWidget *parent) :\n         ui->tableView->setFocus();\n         ui->closeButton->setText(tr(\"C&hoose\"));\n         ui->exportButton->hide();\n+        ui->showAll->hide();\n         break;\n     case ForEditing:\n         switch(tab)\n@@ -63,6 +108,7 @@ AddressBookPage::AddressBookPage(Mode mode, Tabs tab, QWidget *parent) :\n     case SendingTab:\n         ui->labelExplanation->setText(tr(\"These are your Bitcoin addresses for sending payments. Always check the amount and the receiving address before sending coins.\"));\n         ui->deleteAddress->setVisible(true);\n+        ui->showAll->hide();\n         break;\n     case ReceivingTab:\n         ui->labelExplanation->setText(tr(\"These are your Bitcoin addresses for receiving payments. It is recommended to use a new receiving address for each transaction.\"));\n@@ -73,7 +119,7 @@ AddressBookPage::AddressBookPage(Mode mode, Tabs tab, QWidget *parent) :\n     // Context menu actions\n     QAction *copyAddressAction = new QAction(tr(\"&Copy Address\"), this);\n     QAction *copyLabelAction = new QAction(tr(\"Copy &Label\"), this);\n-    QAction *editAction = new QAction(tr(\"&Edit\"), this);\n+    editAction = new QAction(tr(\"&Edit\"), this);\n     deleteAction = new QAction(ui->deleteAddress->text(), this);\n \n     // Build context menu\n@@ -94,6 +140,7 @@ AddressBookPage::AddressBookPage(Mode mode, Tabs tab, QWidget *parent) :\n     connect(ui->tableView, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(contextualMenu(QPoint)));\n \n     connect(ui->closeButton, SIGNAL(clicked()), this, SLOT(accept()));\n+    connect(ui->showAll, SIGNAL(toggled(bool)), this, SLOT(setShowAll(bool)));\n }\n \n AddressBookPage::~AddressBookPage()\n@@ -107,24 +154,17 @@ void AddressBookPage::setModel(AddressTableModel *model)\n     if(!model)\n         return;\n \n-    proxyModel = new QSortFilterProxyModel(this);\n+    proxyModel = new AddressFilterProxyModel(this);\n     proxyModel->setSourceModel(model);\n     proxyModel->setDynamicSortFilter(true);\n     proxyModel->setSortCaseSensitivity(Qt::CaseInsensitive);\n     proxyModel->setFilterCaseSensitivity(Qt::CaseInsensitive);\n     switch(tab)\n     {\n-    case ReceivingTab:\n-        // Receive filter\n-        proxyModel->setFilterRole(AddressTableModel::TypeRole);\n-        proxyModel->setFilterFixedString(AddressTableModel::Receive);\n-        break;\n-    case SendingTab:\n-        // Send filter\n-        proxyModel->setFilterRole(AddressTableModel::TypeRole);\n-        proxyModel->setFilterFixedString(AddressTableModel::Send);\n-        break;\n+    case ReceivingTab: proxyModel->setType(AddressTableModel::Receive); break;\n+    case SendingTab: proxyModel->setType(AddressTableModel::Send); break;\n     }\n+    setShowAll(false);\n     ui->tableView->setModel(proxyModel);\n     ui->tableView->sortByColumn(0, Qt::AscendingOrder);\n \n@@ -291,6 +331,8 @@ void AddressBookPage::contextualMenu(const QPoint &point)\n     QModelIndex index = ui->tableView->indexAt(point);\n     if(index.isValid())\n     {\n+        /* Base availability of edit option on editability of label */\n+        editAction->setEnabled(index.sibling(index.row(), AddressTableModel::Label).flags() & Qt::ItemIsEditable);\n         contextMenu->exec(QCursor::pos());\n     }\n }\n@@ -306,3 +348,13 @@ void AddressBookPage::selectNewAddress(const QModelIndex &parent, int begin, int\n         newAddressToSelect.clear();\n     }\n }\n+\n+void AddressBookPage::setShowAll(bool enabled)\n+{\n+    QSet<QString> purposes;\n+    /* Only show send and receive by default, not others such as refund, change, keypool, ... */\n+    purposes.insert(\"receive\");\n+    purposes.insert(\"send\");\n+    proxyModel->setPurposes(!enabled, purposes);\n+}\n+"
      },
      {
        "sha": "530c5b4f95685fec0f5e497d347c9dc2bc741bc2",
        "filename": "src/qt/addressbookpage.h",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19ab9bc2c52584058558af7ad59d1e4bcd301172/src/qt/addressbookpage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19ab9bc2c52584058558af7ad59d1e4bcd301172/src/qt/addressbookpage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.h?ref=19ab9bc2c52584058558af7ad59d1e4bcd301172",
        "patch": "@@ -9,6 +9,7 @@\n \n class AddressTableModel;\n class OptionsModel;\n+class AddressFilterProxyModel;\n \n namespace Ui {\n     class AddressBookPage;\n@@ -18,7 +19,6 @@ QT_BEGIN_NAMESPACE\n class QItemSelection;\n class QMenu;\n class QModelIndex;\n-class QSortFilterProxyModel;\n class QTableView;\n QT_END_NAMESPACE\n \n@@ -54,10 +54,11 @@ public slots:\n     Mode mode;\n     Tabs tab;\n     QString returnValue;\n-    QSortFilterProxyModel *proxyModel;\n+    AddressFilterProxyModel *proxyModel;\n     QMenu *contextMenu;\n     QAction *deleteAction; // to be able to explicitly disable it\n     QString newAddressToSelect;\n+    QAction *editAction;\n \n private slots:\n     /** Delete currently selected address entry */\n@@ -79,6 +80,8 @@ private slots:\n     void contextualMenu(const QPoint &point);\n     /** New entry/entries were added to address table */\n     void selectNewAddress(const QModelIndex &parent, int begin, int /*end*/);\n+    /** Set whether to show all addresses */\n+    void setShowAll(bool enabled);\n \n signals:\n     void sendCoins(QString addr);"
      },
      {
        "sha": "04dba57389421a06a16146617ae30e8923000784",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 96,
        "deletions": 48,
        "changes": 144,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19ab9bc2c52584058558af7ad59d1e4bcd301172/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19ab9bc2c52584058558af7ad59d1e4bcd301172/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=19ab9bc2c52584058558af7ad59d1e4bcd301172",
        "patch": "@@ -6,6 +6,7 @@\n \n #include \"guiutil.h\"\n #include \"walletmodel.h\"\n+#include \"guiconstants.h\"\n \n #include \"base58.h\"\n #include \"wallet.h\"\n@@ -20,17 +21,19 @@ struct AddressTableEntry\n {\n     enum Type {\n         Sending,\n-        Receiving,\n-        Hidden /* QSortFilterProxyModel will filter these out */\n+        Receiving\n     };\n \n     Type type;\n     QString label;\n     QString address;\n+    QString purpose;\n+    bool inAddressBook;\n \n     AddressTableEntry() {}\n-    AddressTableEntry(Type type, const QString &label, const QString &address):\n-        type(type), label(label), address(address) {}\n+    AddressTableEntry(Type type, const QString &label, const QString &address, const QString &purpose,\n+            bool inAddressBook):\n+        type(type), label(label), address(address), purpose(purpose), inAddressBook(inAddressBook) {}\n };\n \n struct AddressTableEntryLessThan\n@@ -49,18 +52,10 @@ struct AddressTableEntryLessThan\n     }\n };\n \n-/* Determine address type from address purpose */\n-static AddressTableEntry::Type translateTransactionType(const QString &strPurpose, bool isMine)\n+/* Determine address type from isMine */\n+static AddressTableEntry::Type translateAddressType(bool isMine)\n {\n-    AddressTableEntry::Type addressType = AddressTableEntry::Hidden;\n-    // \"refund\" addresses aren't shown, and change addresses aren't in mapAddressBook at all.\n-    if (strPurpose == \"send\")\n-        addressType = AddressTableEntry::Sending;\n-    else if (strPurpose == \"receive\")\n-        addressType = AddressTableEntry::Receiving;\n-    else if (strPurpose == \"unknown\" || strPurpose == \"\") // if purpose not set, guess\n-        addressType = (isMine ? AddressTableEntry::Receiving : AddressTableEntry::Sending);\n-    return addressType;\n+    return (isMine ? AddressTableEntry::Receiving : AddressTableEntry::Sending);\n }\n \n // Private implementation\n@@ -77,18 +72,46 @@ class AddressTablePriv\n     void refreshAddressTable()\n     {\n         cachedAddressTable.clear();\n+        /* Load address book */\n         {\n             LOCK(wallet->cs_wallet);\n             BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& item, wallet->mapAddressBook)\n             {\n                 const CBitcoinAddress& address = item.first;\n                 bool fMine = IsMine(*wallet, address.Get());\n-                AddressTableEntry::Type addressType = translateTransactionType(\n-                        QString::fromStdString(item.second.purpose), fMine);\n+                AddressTableEntry::Type addressType = translateAddressType(fMine);\n                 const std::string& strName = item.second.name;\n                 cachedAddressTable.append(AddressTableEntry(addressType,\n                                   QString::fromStdString(strName),\n-                                  QString::fromStdString(address.ToString())));\n+                                  QString::fromStdString(address.ToString()),\n+                                  QString::fromStdString(item.second.purpose),\n+                                  true));\n+            }\n+        }\n+        /* Load miscellenous keys (change and keypool) */\n+        {\n+            /* Call these without lock held, as they aquire the necessary locks themselves */\n+            set<CKeyID> setReserveKeys, setAddress;\n+            wallet->GetAllReserveKeys(setReserveKeys); /* keypool keys */\n+            wallet->GetKeys(setAddress);\n+\n+            LOCK(wallet->cs_wallet);\n+            BOOST_FOREACH(const CKeyID &keyid, setAddress)\n+            {\n+                if(wallet->mapAddressBook.count(keyid) == 0) /* not a normal receiving address */\n+                {\n+                    CBitcoinAddress address(keyid);\n+                    QString purpose;\n+                    if(setReserveKeys.count(keyid))\n+                        purpose = \"keypool\";\n+                    else\n+                        purpose = \"change\";\n+                    cachedAddressTable.append(AddressTableEntry(AddressTableEntry::Receiving,\n+                                      \"\",\n+                                      QString::fromStdString(address.ToString()),\n+                                      purpose,\n+                                      false));\n+                }\n             }\n         }\n         // qLowerBound() and qUpperBound() require our cachedAddressTable list to be sorted in asc order\n@@ -107,7 +130,7 @@ class AddressTablePriv\n         int lowerIndex = (lower - cachedAddressTable.begin());\n         int upperIndex = (upper - cachedAddressTable.begin());\n         bool inModel = (lower != upper);\n-        AddressTableEntry::Type newEntryType = translateTransactionType(purpose, isMine);\n+        AddressTableEntry::Type newEntryType = translateAddressType(isMine);\n \n         switch(status)\n         {\n@@ -118,7 +141,7 @@ class AddressTablePriv\n                 break;\n             }\n             parent->beginInsertRows(QModelIndex(), lowerIndex, lowerIndex);\n-            cachedAddressTable.insert(lowerIndex, AddressTableEntry(newEntryType, label, address));\n+            cachedAddressTable.insert(lowerIndex, AddressTableEntry(newEntryType, label, address, purpose, true));\n             parent->endInsertRows();\n             break;\n         case CT_UPDATED:\n@@ -129,6 +152,8 @@ class AddressTablePriv\n             }\n             lower->type = newEntryType;\n             lower->label = label;\n+            lower->purpose = purpose;\n+            lower->inAddressBook = true;\n             parent->emitDataChanged(lowerIndex);\n             break;\n         case CT_DELETED:\n@@ -201,7 +226,10 @@ QVariant AddressTableModel::data(const QModelIndex &index, int role) const\n         case Label:\n             if(rec->label.isEmpty() && role == Qt::DisplayRole)\n             {\n-                return tr(\"(no label)\");\n+                if(rec->purpose != \"\" && rec->purpose != \"receive\" && rec->purpose != \"send\")\n+                    return \"(\" + rec->purpose + \")\"; /* special purpose */\n+                else\n+                    return tr(\"(no label)\");\n             }\n             else\n             {\n@@ -211,6 +239,13 @@ QVariant AddressTableModel::data(const QModelIndex &index, int role) const\n             return rec->address;\n         }\n     }\n+    else if (role == Qt::ForegroundRole)\n+    {\n+        if(index.column() == Label && rec->label.isEmpty())\n+        {\n+            return COLOR_UNCONFIRMED;\n+        }\n+    }\n     else if (role == Qt::FontRole)\n     {\n         QFont font;\n@@ -231,6 +266,10 @@ QVariant AddressTableModel::data(const QModelIndex &index, int role) const\n         default: break;\n         }\n     }\n+    else if (role == PurposeRole)\n+    {\n+        return rec->purpose;\n+    }\n     return QVariant();\n }\n \n@@ -239,11 +278,19 @@ bool AddressTableModel::setData(const QModelIndex &index, const QVariant &value,\n     if(!index.isValid())\n         return false;\n     AddressTableEntry *rec = static_cast<AddressTableEntry*>(index.internalPointer());\n-    std::string strPurpose = (rec->type == AddressTableEntry::Sending ? \"send\" : \"receive\");\n     editStatus = OK;\n \n     if(role == Qt::EditRole)\n     {\n+        LOCK(wallet->cs_wallet);\n+        CTxDestination curAddress = CBitcoinAddress(rec->address.toStdString()).Get();\n+\n+        if(rec->type == AddressTableEntry::Sending &&\n+            wallet->mapAddressBook.count(curAddress) == 0) /* Cannot edit sending entries not in address book */\n+        {\n+            editStatus = INVALID_ADDRESS;\n+            return false;\n+        }\n         switch(index.column())\n         {\n         case Label:\n@@ -253,40 +300,37 @@ bool AddressTableModel::setData(const QModelIndex &index, const QVariant &value,\n                 editStatus = NO_CHANGES;\n                 return false;\n             }\n-            wallet->SetAddressBook(CBitcoinAddress(rec->address.toStdString()).Get(), value.toString().toStdString(), strPurpose);\n+            wallet->SetAddressBook(curAddress, value.toString().toStdString(), rec->purpose.toStdString());\n             break;\n-        case Address:\n+        case Address: {\n+            CTxDestination newAddress = CBitcoinAddress(value.toString().toStdString()).Get();\n+            // Only allow editing address of Sending entries\n+            // and check for duplicate addresses to prevent accidental deletion of addresses, if you try\n+            // to paste an existing address over another address (with a different label)\n+            if(IsMine(*wallet, curAddress) || IsMine(*wallet, newAddress) || wallet->mapAddressBook.count(newAddress))\n+            {\n+                editStatus = DUPLICATE_ADDRESS;\n+                return false;\n             // Do nothing, if old address == new address\n-            if(CBitcoinAddress(rec->address.toStdString()) == CBitcoinAddress(value.toString().toStdString()))\n+            } else if(newAddress == curAddress)\n             {\n                 editStatus = NO_CHANGES;\n                 return false;\n             }\n             // Refuse to set invalid address, set error status and return false\n-            else if(!walletModel->validateAddress(value.toString()))\n+            else if(boost::get<CNoDestination>(&newAddress))\n             {\n                 editStatus = INVALID_ADDRESS;\n                 return false;\n             }\n-            // Check for duplicate addresses to prevent accidental deletion of addresses, if you try\n-            // to paste an existing address over another address (with a different label)\n-            else if(wallet->mapAddressBook.count(CBitcoinAddress(value.toString().toStdString()).Get()))\n-            {\n-                editStatus = DUPLICATE_ADDRESS;\n-                return false;\n-            }\n-            // Double-check that we're not overwriting a receiving address\n-            else if(rec->type == AddressTableEntry::Sending)\n+            else\n             {\n-                {\n-                    LOCK(wallet->cs_wallet);\n-                    // Remove old entry\n-                    wallet->DelAddressBook(CBitcoinAddress(rec->address.toStdString()).Get());\n-                    // Add new entry with new address\n-                    wallet->SetAddressBook(CBitcoinAddress(value.toString().toStdString()).Get(), rec->label.toStdString(), strPurpose);\n-                }\n+                // Remove old entry\n+                wallet->DelAddressBook(curAddress);\n+                // Add new entry with new address\n+                wallet->SetAddressBook(newAddress, rec->label.toStdString(), rec->purpose.toStdString());\n             }\n-            break;\n+            } break;\n         }\n         return true;\n     }\n@@ -312,12 +356,16 @@ Qt::ItemFlags AddressTableModel::flags(const QModelIndex &index) const\n     AddressTableEntry *rec = static_cast<AddressTableEntry*>(index.internalPointer());\n \n     Qt::ItemFlags retval = Qt::ItemIsSelectable | Qt::ItemIsEnabled;\n-    // Can edit address and label for sending addresses,\n-    // and only label for receiving addresses.\n-    if(rec->type == AddressTableEntry::Sending ||\n-      (rec->type == AddressTableEntry::Receiving && index.column()==Label))\n+    // Can edit only addresses that have an entry in the address book\n+    if(rec->inAddressBook)\n     {\n-        retval |= Qt::ItemIsEditable;\n+        // Can edit address and label for sending addresses,\n+        // and only label for receiving addresses.\n+        if(rec->type == AddressTableEntry::Sending ||\n+          (rec->type == AddressTableEntry::Receiving && index.column()==Label))\n+        {\n+            retval |= Qt::ItemIsEditable;\n+        }\n     }\n     return retval;\n }"
      },
      {
        "sha": "34beb3b89e06b0da298cca176db1734416db6a14",
        "filename": "src/qt/addresstablemodel.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19ab9bc2c52584058558af7ad59d1e4bcd301172/src/qt/addresstablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19ab9bc2c52584058558af7ad59d1e4bcd301172/src/qt/addresstablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.h?ref=19ab9bc2c52584058558af7ad59d1e4bcd301172",
        "patch": "@@ -30,7 +30,8 @@ class AddressTableModel : public QAbstractTableModel\n     };\n \n     enum RoleIndex {\n-        TypeRole = Qt::UserRole /**< Type of address (#Send or #Receive) */\n+        TypeRole = Qt::UserRole, /**< Type of address (#Send or #Receive) */\n+        PurposeRole = Qt::UserRole+1 /**< Purpose of address (\"change\", \"receive\", \"refund\", ...) */\n     };\n \n     /** Return status of edit/insert operation */"
      },
      {
        "sha": "cd0a8446dddb964e89c7950c1c88497a3e884ebb",
        "filename": "src/qt/forms/addressbookpage.ui",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19ab9bc2c52584058558af7ad59d1e4bcd301172/src/qt/forms/addressbookpage.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19ab9bc2c52584058558af7ad59d1e4bcd301172/src/qt/forms/addressbookpage.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/addressbookpage.ui?ref=19ab9bc2c52584058558af7ad59d1e4bcd301172",
        "patch": "@@ -49,6 +49,13 @@\n      </attribute>\n     </widget>\n    </item>\n+   <item>\n+    <widget class=\"QCheckBox\" name=\"showAll\">\n+     <property name=\"text\">\n+      <string>Show all</string>\n+     </property>\n+    </widget>\n+   </item>\n    <item>\n     <layout class=\"QHBoxLayout\" name=\"horizontalLayout\">\n      <item>"
      }
    ]
  }
]