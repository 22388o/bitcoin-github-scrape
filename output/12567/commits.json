[
  {
    "sha": "a7324bd799591546c2ae069f29cb82a66d427769",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNzMyNGJkNzk5NTkxNTQ2YzJhZTA2OWYyOWNiODJhNjZkNDI3NzY5",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-02-28T15:46:31Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-03-09T14:02:01Z"
      },
      "message": "Format timestamps using ISO 8601 formatting (e.g. \"2018-02-28T12:34:56Z\")\n\n* Z is the zone designator for the zero UTC offset.\n* T is the delimiter used to separate date and time.\n\nThis makes it clear for the end-user that the date/time logged is\nspecified in UTC and not in the local time zone.",
      "tree": {
        "sha": "b99b314c2166933c3a4e3843173e5cba9789555e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b99b314c2166933c3a4e3843173e5cba9789555e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a7324bd799591546c2ae069f29cb82a66d427769",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7324bd799591546c2ae069f29cb82a66d427769",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a7324bd799591546c2ae069f29cb82a66d427769",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7324bd799591546c2ae069f29cb82a66d427769/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29fad97c320c892ab6a480c81e2078ec22ab354b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29fad97c320c892ab6a480c81e2078ec22ab354b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29fad97c320c892ab6a480c81e2078ec22ab354b"
      }
    ],
    "stats": {
      "total": 84,
      "additions": 61,
      "deletions": 23
    },
    "files": [
      {
        "sha": "d08e2518c78aead8c62f06e5c67d493bc8ced0b5",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7324bd799591546c2ae069f29cb82a66d427769/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7324bd799591546c2ae069f29cb82a66d427769/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=a7324bd799591546c2ae069f29cb82a66d427769",
        "patch": "@@ -93,6 +93,10 @@ Low-level RPC changes\n   with any `-wallet=<path>` options, there is no change in behavior, and the\n   name of any wallet is just its `<path>` string.\n \n+### Logging\n+\n+- The log timestamp format is now ISO 8601 (e.g. \"2018-02-28T12:34:56Z\").\n+\n Credits\n =======\n "
      },
      {
        "sha": "bc23d0ff8366f5c81e56cf95f3c72adc7c8a70a9",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7324bd799591546c2ae069f29cb82a66d427769/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7324bd799591546c2ae069f29cb82a66d427769/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a7324bd799591546c2ae069f29cb82a66d427769",
        "patch": "@@ -1224,7 +1224,7 @@ bool AppInitMain()\n     }\n \n     if (!fLogTimestamps)\n-        LogPrintf(\"Startup time: %s\\n\", DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", GetTime()));\n+        LogPrintf(\"Startup time: %s\\n\", FormatISO8601DateTime(GetTime()));\n     LogPrintf(\"Default data directory %s\\n\", GetDefaultDataDir().string());\n     LogPrintf(\"Using data directory %s\\n\", GetDataDir().string());\n     LogPrintf(\"Using config file %s\\n\", GetConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME)).string());"
      },
      {
        "sha": "53a0a9b1802e57eb7a344455cc067d14ed812f3a",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7324bd799591546c2ae069f29cb82a66d427769/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7324bd799591546c2ae069f29cb82a66d427769/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=a7324bd799591546c2ae069f29cb82a66d427769",
        "patch": "@@ -2795,7 +2795,7 @@ void CNode::AskFor(const CInv& inv)\n         nRequestTime = it->second;\n     else\n         nRequestTime = 0;\n-    LogPrint(BCLog::NET, \"askfor %s  %d (%s) peer=%d\\n\", inv.ToString(), nRequestTime, DateTimeStrFormat(\"%H:%M:%S\", nRequestTime/1000000), id);\n+    LogPrint(BCLog::NET, \"askfor %s  %d (%s) peer=%d\\n\", inv.ToString(), nRequestTime, FormatISO8601Time(nRequestTime/1000000), id);\n \n     // Make sure not to reuse time indexes to keep things in the same order\n     int64_t nNow = GetTimeMicros() - 1000000;"
      },
      {
        "sha": "4b6fdc8d5756ff0190db1565b8db79d5c2639aa0",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7324bd799591546c2ae069f29cb82a66d427769/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7324bd799591546c2ae069f29cb82a66d427769/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=a7324bd799591546c2ae069f29cb82a66d427769",
        "patch": "@@ -770,7 +770,7 @@ bool PaymentServer::verifyExpired(const payments::PaymentDetails& requestDetails\n {\n     bool fVerified = (requestDetails.has_expires() && (int64_t)requestDetails.expires() < GetTime());\n     if (fVerified) {\n-        const QString requestExpires = QString::fromStdString(DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", (int64_t)requestDetails.expires()));\n+        const QString requestExpires = QString::fromStdString(FormatISO8601DateTime((int64_t)requestDetails.expires()));\n         qWarning() << QString(\"PaymentServer::%1: Payment request expired \\\"%2\\\".\")\n             .arg(__func__)\n             .arg(requestExpires);"
      },
      {
        "sha": "84b61bea86a661f9178e6122809f6ccda7adb010",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7324bd799591546c2ae069f29cb82a66d427769/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7324bd799591546c2ae069f29cb82a66d427769/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=a7324bd799591546c2ae069f29cb82a66d427769",
        "patch": "@@ -164,10 +164,27 @@ BOOST_AUTO_TEST_CASE(util_DateTimeStrFormat)\n     BOOST_CHECK_EQUAL(DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", 0), \"1970-01-01 00:00:00\");\n     BOOST_CHECK_EQUAL(DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", 0x7FFFFFFF), \"2038-01-19 03:14:07\");\n     BOOST_CHECK_EQUAL(DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", 1317425777), \"2011-09-30 23:36:17\");\n+    BOOST_CHECK_EQUAL(DateTimeStrFormat(\"%Y-%m-%dT%H:%M:%SZ\", 1317425777), \"2011-09-30T23:36:17Z\");\n+    BOOST_CHECK_EQUAL(DateTimeStrFormat(\"%H:%M:%SZ\", 1317425777), \"23:36:17Z\");\n     BOOST_CHECK_EQUAL(DateTimeStrFormat(\"%Y-%m-%d %H:%M\", 1317425777), \"2011-09-30 23:36\");\n     BOOST_CHECK_EQUAL(DateTimeStrFormat(\"%a, %d %b %Y %H:%M:%S +0000\", 1317425777), \"Fri, 30 Sep 2011 23:36:17 +0000\");\n }\n \n+BOOST_AUTO_TEST_CASE(util_FormatISO8601DateTime)\n+{\n+    BOOST_CHECK_EQUAL(FormatISO8601DateTime(1317425777), \"2011-09-30T23:36:17Z\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_FormatISO8601Date)\n+{\n+    BOOST_CHECK_EQUAL(FormatISO8601Date(1317425777), \"2011-09-30\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_FormatISO8601Time)\n+{\n+    BOOST_CHECK_EQUAL(FormatISO8601Time(1317425777), \"23:36:17Z\");\n+}\n+\n class TestArgsManager : public ArgsManager\n {\n public:"
      },
      {
        "sha": "62cdce30125ddff8c1f37f367afa316c867d91df",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7324bd799591546c2ae069f29cb82a66d427769/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7324bd799591546c2ae069f29cb82a66d427769/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=a7324bd799591546c2ae069f29cb82a66d427769",
        "patch": "@@ -315,12 +315,14 @@ static std::string LogTimestampStr(const std::string &str, std::atomic_bool *fSt\n \n     if (*fStartedNewLine) {\n         int64_t nTimeMicros = GetTimeMicros();\n-        strStamped = DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", nTimeMicros/1000000);\n-        if (fLogTimeMicros)\n-            strStamped += strprintf(\".%06d\", nTimeMicros%1000000);\n+        strStamped = FormatISO8601DateTime(nTimeMicros/1000000);\n+        if (fLogTimeMicros) {\n+            strStamped.pop_back();\n+            strStamped += strprintf(\".%06dZ\", nTimeMicros%1000000);\n+        }\n         int64_t mocktime = GetMockTime();\n         if (mocktime) {\n-            strStamped += \" (mocktime: \" + DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", mocktime) + \")\";\n+            strStamped += \" (mocktime: \" + FormatISO8601DateTime(mocktime) + \")\";\n         }\n         strStamped += ' ' + str;\n     } else"
      },
      {
        "sha": "8a861039b3ade9f34ec0d4cf77d415531fb8c7b0",
        "filename": "src/utiltime.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7324bd799591546c2ae069f29cb82a66d427769/src/utiltime.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7324bd799591546c2ae069f29cb82a66d427769/src/utiltime.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utiltime.cpp?ref=a7324bd799591546c2ae069f29cb82a66d427769",
        "patch": "@@ -85,3 +85,15 @@ std::string DateTimeStrFormat(const char* pszFormat, int64_t nTime)\n     ss << boost::posix_time::from_time_t(nTime);\n     return ss.str();\n }\n+\n+std::string FormatISO8601DateTime(int64_t nTime) {\n+    return DateTimeStrFormat(\"%Y-%m-%dT%H:%M:%SZ\", nTime);\n+}\n+\n+std::string FormatISO8601Date(int64_t nTime) {\n+    return DateTimeStrFormat(\"%Y-%m-%d\", nTime);\n+}\n+\n+std::string FormatISO8601Time(int64_t nTime) {\n+    return DateTimeStrFormat(\"%H:%M:%SZ\", nTime);\n+}"
      },
      {
        "sha": "807c52ffafd1a56fc2c9d9db0dcc0e947344fffd",
        "filename": "src/utiltime.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7324bd799591546c2ae069f29cb82a66d427769/src/utiltime.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7324bd799591546c2ae069f29cb82a66d427769/src/utiltime.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utiltime.h?ref=a7324bd799591546c2ae069f29cb82a66d427769",
        "patch": "@@ -27,6 +27,14 @@ void SetMockTime(int64_t nMockTimeIn);\n int64_t GetMockTime();\n void MilliSleep(int64_t n);\n \n+/**\n+ * ISO 8601 formatting is preferred. Use the FormatISO8601{DateTime,Date,Time}\n+ * helper functions if possible.\n+ */\n std::string DateTimeStrFormat(const char* pszFormat, int64_t nTime);\n \n+std::string FormatISO8601DateTime(int64_t nTime);\n+std::string FormatISO8601Date(int64_t nTime);\n+std::string FormatISO8601Time(int64_t nTime);\n+\n #endif // BITCOIN_UTILTIME_H"
      },
      {
        "sha": "c677f44b3e3aed8dd68192b6cc1fc36ff45888b5",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7324bd799591546c2ae069f29cb82a66d427769/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7324bd799591546c2ae069f29cb82a66d427769/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=a7324bd799591546c2ae069f29cb82a66d427769",
        "patch": "@@ -1267,13 +1267,12 @@ void static InvalidChainFound(CBlockIndex* pindexNew)\n \n     LogPrintf(\"%s: invalid block=%s  height=%d  log2_work=%.8g  date=%s\\n\", __func__,\n       pindexNew->GetBlockHash().ToString(), pindexNew->nHeight,\n-      log(pindexNew->nChainWork.getdouble())/log(2.0), DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\",\n-      pindexNew->GetBlockTime()));\n+      log(pindexNew->nChainWork.getdouble())/log(2.0), FormatISO8601DateTime(pindexNew->GetBlockTime()));\n     CBlockIndex *tip = chainActive.Tip();\n     assert (tip);\n     LogPrintf(\"%s:  current best=%s  height=%d  log2_work=%.8g  date=%s\\n\", __func__,\n       tip->GetBlockHash().ToString(), chainActive.Height(), log(tip->nChainWork.getdouble())/log(2.0),\n-      DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", tip->GetBlockTime()));\n+      FormatISO8601DateTime(tip->GetBlockTime()));\n     CheckForkWarningConditions();\n }\n \n@@ -2229,7 +2228,7 @@ void static UpdateTip(const CBlockIndex *pindexNew, const CChainParams& chainPar\n     LogPrintf(\"%s: new best=%s height=%d version=0x%08x log2_work=%.8g tx=%lu date='%s' progress=%f cache=%.1fMiB(%utxo)\", __func__,\n       pindexNew->GetBlockHash().ToString(), pindexNew->nHeight, pindexNew->nVersion,\n       log(pindexNew->nChainWork.getdouble())/log(2.0), (unsigned long)pindexNew->nChainTx,\n-      DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", pindexNew->GetBlockTime()),\n+      FormatISO8601DateTime(pindexNew->GetBlockTime()),\n       GuessVerificationProgress(chainParams.TxData(), pindexNew), pcoinsTip->DynamicMemoryUsage() * (1.0 / (1<<20)), pcoinsTip->GetCacheSize());\n     if (!warningMessages.empty())\n         LogPrintf(\" warning='%s'\", boost::algorithm::join(warningMessages, \", \"));\n@@ -3856,7 +3855,7 @@ bool LoadChainTip(const CChainParams& chainparams)\n \n     LogPrintf(\"Loaded best chain: hashBestChain=%s height=%d date=%s progress=%f\\n\",\n         chainActive.Tip()->GetBlockHash().ToString(), chainActive.Height(),\n-        DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", chainActive.Tip()->GetBlockTime()),\n+        FormatISO8601DateTime(chainActive.Tip()->GetBlockTime()),\n         GuessVerificationProgress(chainparams.TxData(), chainActive.Tip()));\n     return true;\n }\n@@ -4554,7 +4553,7 @@ void CChainState::CheckBlockIndex(const Consensus::Params& consensusParams)\n \n std::string CBlockFileInfo::ToString() const\n {\n-    return strprintf(\"CBlockFileInfo(blocks=%u, size=%u, heights=%u...%u, time=%s...%s)\", nBlocks, nSize, nHeightFirst, nHeightLast, DateTimeStrFormat(\"%Y-%m-%d\", nTimeFirst), DateTimeStrFormat(\"%Y-%m-%d\", nTimeLast));\n+    return strprintf(\"CBlockFileInfo(blocks=%u, size=%u, heights=%u...%u, time=%s...%s)\", nBlocks, nSize, nHeightFirst, nHeightLast, FormatISO8601Date(nTimeFirst), FormatISO8601Date(nTimeLast));\n }\n \n CBlockFileInfo* GetBlockFileInfo(size_t n)"
      },
      {
        "sha": "c7c54ecb9bcd9acad5747792d3fb02a89baef9ba",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 8,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7324bd799591546c2ae069f29cb82a66d427769/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7324bd799591546c2ae069f29cb82a66d427769/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=a7324bd799591546c2ae069f29cb82a66d427769",
        "patch": "@@ -28,10 +28,6 @@\n #include <univalue.h>\n \n \n-std::string static EncodeDumpTime(int64_t nTime) {\n-    return DateTimeStrFormat(\"%Y-%m-%dT%H:%M:%SZ\", nTime);\n-}\n-\n int64_t static DecodeDumpTime(const std::string &str) {\n     static const boost::posix_time::ptime epoch = boost::posix_time::from_time_t(0);\n     static const std::locale loc(std::locale::classic(),\n@@ -722,9 +718,9 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n \n     // produce output\n     file << strprintf(\"# Wallet dump created by Bitcoin %s\\n\", CLIENT_BUILD);\n-    file << strprintf(\"# * Created on %s\\n\", EncodeDumpTime(GetTime()));\n+    file << strprintf(\"# * Created on %s\\n\", FormatISO8601DateTime(GetTime()));\n     file << strprintf(\"# * Best block at time of backup was %i (%s),\\n\", chainActive.Height(), chainActive.Tip()->GetBlockHash().ToString());\n-    file << strprintf(\"#   mined on %s\\n\", EncodeDumpTime(chainActive.Tip()->GetBlockTime()));\n+    file << strprintf(\"#   mined on %s\\n\", FormatISO8601DateTime(chainActive.Tip()->GetBlockTime()));\n     file << \"\\n\";\n \n     // add the base58check encoded extended master if the wallet uses HD\n@@ -741,7 +737,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     }\n     for (std::vector<std::pair<int64_t, CKeyID> >::const_iterator it = vKeyBirth.begin(); it != vKeyBirth.end(); it++) {\n         const CKeyID &keyid = it->second;\n-        std::string strTime = EncodeDumpTime(it->first);\n+        std::string strTime = FormatISO8601DateTime(it->first);\n         std::string strAddr;\n         std::string strLabel;\n         CKey key;\n@@ -769,7 +765,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n         // get birth times for scripts with metadata\n         auto it = pwallet->m_script_metadata.find(scriptid);\n         if (it != pwallet->m_script_metadata.end()) {\n-            create_time = EncodeDumpTime(it->second.nCreateTime);\n+            create_time = FormatISO8601DateTime(it->second.nCreateTime);\n         }\n         if(pwallet->GetCScript(scriptid, script)) {\n             file << strprintf(\"%s %s script=1\", HexStr(script.begin(), script.end()), create_time);"
      },
      {
        "sha": "d1bf9206b257fad875b6a1bf5a82705a7a7b0b58",
        "filename": "test/functional/combine_logs.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7324bd799591546c2ae069f29cb82a66d427769/test/functional/combine_logs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7324bd799591546c2ae069f29cb82a66d427769/test/functional/combine_logs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/combine_logs.py?ref=a7324bd799591546c2ae069f29cb82a66d427769",
        "patch": "@@ -13,7 +13,7 @@\n import sys\n \n # Matches on the date format at the start of the log event\n-TIMESTAMP_PATTERN = re.compile(r\"^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\.\\d{6}\")\n+TIMESTAMP_PATTERN = re.compile(r\"^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{6}Z\")\n \n LogEvent = namedtuple('LogEvent', ['timestamp', 'source', 'event'])\n "
      },
      {
        "sha": "f4e77d32dc6512b71bdb49f5a4819e890d159af2",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7324bd799591546c2ae069f29cb82a66d427769/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7324bd799591546c2ae069f29cb82a66d427769/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=a7324bd799591546c2ae069f29cb82a66d427769",
        "patch": "@@ -358,7 +358,7 @@ def _start_logging(self):\n         ll = int(self.options.loglevel) if self.options.loglevel.isdigit() else self.options.loglevel.upper()\n         ch.setLevel(ll)\n         # Format logs the same as bitcoind's debug.log with microprecision (so log files can be concatenated and sorted)\n-        formatter = logging.Formatter(fmt='%(asctime)s.%(msecs)03d000 %(name)s (%(levelname)s): %(message)s', datefmt='%Y-%m-%d %H:%M:%S')\n+        formatter = logging.Formatter(fmt='%(asctime)s.%(msecs)03d000Z %(name)s (%(levelname)s): %(message)s', datefmt='%Y-%m-%dT%H:%M:%S')\n         formatter.converter = time.gmtime\n         fh.setFormatter(formatter)\n         ch.setFormatter(formatter)"
      }
    ]
  }
]