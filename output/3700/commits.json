[
  {
    "sha": "41dcf61504b6cde377a4c5c313539d098947388b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MWRjZjYxNTA0YjZjZGUzNzdhNGM1YzMxMzUzOWQwOTg5NDczODhi",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-02-18T14:42:37Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-02-24T17:58:40Z"
      },
      "message": "Test for walletbackup/walletdump RPC calls",
      "tree": {
        "sha": "c1ab348fdaee0b5252254c4d9e013e0b9e475258",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c1ab348fdaee0b5252254c4d9e013e0b9e475258"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41dcf61504b6cde377a4c5c313539d098947388b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41dcf61504b6cde377a4c5c313539d098947388b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/41dcf61504b6cde377a4c5c313539d098947388b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41dcf61504b6cde377a4c5c313539d098947388b/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4fd082ded7af28929e909843eba5c801fe755257",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fd082ded7af28929e909843eba5c801fe755257",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4fd082ded7af28929e909843eba5c801fe755257"
      }
    ],
    "stats": {
      "total": 316,
      "additions": 314,
      "deletions": 2
    },
    "files": [
      {
        "sha": "ee9e8b35ca713914fc6f93e4516099ef9fa45686",
        "filename": "qa/rpc-tests/README.md",
        "status": "modified",
        "additions": 21,
        "deletions": 2,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41dcf61504b6cde377a4c5c313539d098947388b/qa/rpc-tests/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41dcf61504b6cde377a4c5c313539d098947388b/qa/rpc-tests/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/README.md?ref=41dcf61504b6cde377a4c5c313539d098947388b",
        "patch": "@@ -1,6 +1,25 @@\n Regression tests of RPC interface\n =================================\n \n-wallet.sh : Test wallet send/receive code (see comments for details)\n+wallet.sh : Exercise wallet send/receive code.\n \n-util.sh : useful re-usable functions \n+walletbackup.sh : Exercise wallet backup / dump / import\n+\n+txnmall.sh : Test proper accounting of malleable transactions\n+\n+conflictedbalance.sh : More testing of malleable transaction handling\n+\n+util.sh : useful re-usable bash functions\n+\n+\n+Tips for creating new tests\n+===========================\n+\n+To cleanup after a failed or interrupted test:\n+  killall bitcoind\n+  rm -rf test.*\n+\n+The most difficult part of writing reproducible tests is\n+keeping multiple nodes in sync. See WaitBlocks,\n+WaitPeers, and WaitMemPools for how other tests\n+deal with this."
      },
      {
        "sha": "9207243b62454160be2cb562f1d463d5d22ece3f",
        "filename": "qa/rpc-tests/walletbackup.sh",
        "status": "added",
        "additions": 293,
        "deletions": 0,
        "changes": 293,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41dcf61504b6cde377a4c5c313539d098947388b/qa/rpc-tests/walletbackup.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41dcf61504b6cde377a4c5c313539d098947388b/qa/rpc-tests/walletbackup.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/walletbackup.sh?ref=41dcf61504b6cde377a4c5c313539d098947388b",
        "patch": "@@ -0,0 +1,293 @@\n+#!/usr/bin/env bash\n+\n+# Test wallet backup / dump / restore functionality\n+\n+# Test case is:\n+# 4 nodes. 1 2 3 and send transactions between each other,\n+# fourth node is a miner.\n+# 1 2 3 and each mine a block to start, then\n+# miner creates 100 blocks so 1 2 3 each have 50 mature\n+# coins to spend.\n+# Then 5 iterations of 1/2/3 sending coins amongst\n+# themselves to get transactions in the wallets,\n+# and the miner mining one block.\n+#\n+# Wallets are backed up using dumpwallet/backupwallet.\n+# Then 5 more iterations of transactions, then block.\n+#\n+# Miner then generates 101 more blocks, so any\n+# transaction fees paid mature.\n+#\n+# Sanity checks done:\n+#   Miner balance >= 150*50\n+#   Sum(1,2,3,4 balances) == 153*150\n+#\n+# 1/2/3 are shutdown, and their wallets erased.\n+# Then restore using wallet.dat backup. And\n+# confirm 1/2/3/4 balances are same as before.\n+#\n+# Shutdown again, restore using importwallet,\n+# and confirm again balances are correct.\n+#\n+\n+if [ $# -lt 1 ]; then\n+        echo \"Usage: $0 path_to_binaries\"\n+        echo \"e.g. $0 ../../src\"\n+        exit 1\n+fi\n+\n+BITCOIND=${1}/bitcoind\n+CLI=${1}/bitcoin-cli\n+\n+DIR=\"${BASH_SOURCE%/*}\"\n+SENDANDWAIT=\"${DIR}/send.sh\"\n+if [[ ! -d \"$DIR\" ]]; then DIR=\"$PWD\"; fi\n+. \"$DIR/util.sh\"\n+\n+D=$(mktemp -d test.XXXXX)\n+\n+echo \"Starting nodes...\"\n+\n+# \"Miner\":\n+D4=${D}/node4\n+CreateDataDir $D4 port=11030 rpcport=11031\n+B4ARGS=\"-datadir=$D4\"\n+$BITCOIND $BITCOINDARGS $B4ARGS &\n+B4PID=$!\n+\n+# Want default keypool for 1/2/3, and\n+# don't need send-and-wait functionality,\n+# so don't use CreateDataDir:\n+function CreateConfDir {\n+  DIR=$1\n+  mkdir -p $DIR\n+  CONF=$DIR/bitcoin.conf\n+  echo \"regtest=1\" >> $CONF\n+  echo \"rpcuser=rt\" >> $CONF\n+  echo \"rpcpassword=rt\" >> $CONF\n+  echo \"rpcwait=1\" >> $CONF\n+  shift\n+  while (( \"$#\" )); do\n+      echo $1 >> $CONF\n+      shift\n+  done\n+}\n+\n+# \"Spenders\" 1/2/3\n+D1=${D}/node1\n+CreateConfDir $D1 port=11000 rpcport=11001 addnode=127.0.0.1:11030\n+B1ARGS=\"-datadir=$D1\"\n+$BITCOIND $B1ARGS &\n+B1PID=$!\n+D2=${D}/node2\n+CreateConfDir $D2 port=11010 rpcport=11011 addnode=127.0.0.1:11030\n+B2ARGS=\"-datadir=$D2\"\n+$BITCOIND $B2ARGS &\n+B2PID=$!\n+D3=${D}/node3\n+CreateConfDir $D3 port=11020 rpcport=11021 addnode=127.0.0.1:11030 addnode=127.0.0.1:11000\n+B3ARGS=\"-datadir=$D3\"\n+$BITCOIND $BITCOINDARGS $B3ARGS &\n+B3PID=$!\n+\n+# Wait until all nodes are at the same block number\n+function WaitBlocks {\n+    while :\n+    do\n+        sleep 1\n+        BLOCKS1=$( GetBlocks \"$B1ARGS\" )\n+        BLOCKS2=$( GetBlocks \"$B2ARGS\" )\n+        BLOCKS3=$( GetBlocks \"$B3ARGS\" )\n+        BLOCKS4=$( GetBlocks \"$B4ARGS\" )\n+        if (( BLOCKS1 == BLOCKS4 && BLOCKS2 == BLOCKS4 && BLOCKS3 == BLOCKS4 ))\n+        then\n+            break\n+        fi\n+    done\n+}\n+\n+# Wait until all nodes have the same txns in\n+# their memory pools\n+function WaitMemPools {\n+    while :\n+    do\n+        sleep 1\n+        MEMPOOL1=$( $CLI \"$B1ARGS\" getrawmempool | sort | shasum )\n+        MEMPOOL2=$( $CLI \"$B2ARGS\" getrawmempool | sort | shasum )\n+        MEMPOOL3=$( $CLI \"$B3ARGS\" getrawmempool | sort | shasum )\n+        MEMPOOL4=$( $CLI \"$B4ARGS\" getrawmempool | sort | shasum )\n+        if [[ $MEMPOOL1 = $MEMPOOL4 && $MEMPOOL2 = $MEMPOOL4 && $MEMPOOL3 = $MEMPOOL4 ]]\n+        then\n+            break\n+        fi\n+    done\n+}\n+\n+echo \"Generating initial blockchain...\"\n+\n+# 1 block, 50 XBT each == 50 BTC\n+$CLI $B1ARGS setgenerate true 1\n+WaitBlocks\n+$CLI $B2ARGS setgenerate true 1\n+WaitBlocks\n+$CLI $B3ARGS setgenerate true 1\n+WaitBlocks\n+\n+# 100 blocks, 0 mature\n+$CLI $B4ARGS setgenerate true 100\n+WaitBlocks\n+\n+CheckBalance \"$B1ARGS\" 50\n+CheckBalance \"$B2ARGS\" 50\n+CheckBalance \"$B3ARGS\" 50\n+CheckBalance \"$B4ARGS\" 0\n+\n+echo \"Creating transactions...\"\n+\n+function S {\n+  TXID=$( $CLI -datadir=${D}/node${1} sendtoaddress ${2} \"${3}\" 0 )\n+  if [[ $TXID == \"\" ]] ; then\n+      echoerr \"node${1}: error sending ${3} btc\"\n+      echo -n \"node${1} balance: \"\n+      $CLI -datadir=${D}/node${1} getbalance \"*\" 0\n+      exit 1\n+  fi\n+}\n+\n+function OneRound {\n+  A1=$( $CLI $B1ARGS getnewaddress )\n+  A2=$( $CLI $B2ARGS getnewaddress )\n+  A3=$( $CLI $B3ARGS getnewaddress )\n+  if [[ $(( $RANDOM%2 )) < 1 ]] ; then\n+      N=$(( $RANDOM % 9 + 1 ))\n+      S 1 $A2 \"0.$N\"\n+  fi\n+  if [[ $(( $RANDOM%2 )) < 1 ]] ; then\n+      N=$(( $RANDOM % 9 + 1 ))\n+      S 1 $A3 \"0.0$N\"\n+  fi\n+  if [[ $(( $RANDOM%2 )) < 1 ]] ; then\n+      N=$(( $RANDOM % 9 + 1 ))\n+      S 2 $A1 \"0.$N\"\n+  fi\n+  if [[ $(( $RANDOM%2 )) < 1 ]] ; then\n+      N=$(( $RANDOM % 9 + 1 ))\n+      S 2 $A3 \"0.$N\"\n+  fi\n+  if [[ $(( $RANDOM%2 )) < 1 ]] ; then\n+      N=$(( $RANDOM % 9 + 1 ))\n+      S 3 $A1 \"0.$N\"\n+  fi\n+  if [[ $(( $RANDOM%2 )) < 1 ]] ; then\n+      N=$(( $RANDOM % 9 + 1 ))\n+      S 3 $A2 \"0.0$N\"\n+  fi\n+  $CLI \"$B4ARGS\" setgenerate true 1\n+}\n+\n+for i in {1..5}; do OneRound ; done\n+\n+echo \"Backing up...\"\n+\n+$CLI \"$B1ARGS\" backupwallet \"$D1/wallet.bak\"\n+$CLI \"$B1ARGS\" dumpwallet \"$D1/wallet.dump\"\n+$CLI \"$B2ARGS\" backupwallet \"$D2/wallet.bak\"\n+$CLI \"$B2ARGS\" dumpwallet \"$D2/wallet.dump\"\n+$CLI \"$B3ARGS\" backupwallet \"$D3/wallet.bak\"\n+$CLI \"$B3ARGS\" dumpwallet \"$D3/wallet.dump\"\n+\n+echo \"More transactions...\"\n+for i in {1..5}; do OneRound ; done\n+\n+WaitMemPools\n+\n+# Generate 101 more blocks, so any fees paid\n+# mature\n+$CLI \"$B4ARGS\" setgenerate true 101\n+\n+BALANCE1=$( $CLI \"$B1ARGS\" getbalance )\n+BALANCE2=$( $CLI \"$B2ARGS\" getbalance )\n+BALANCE3=$( $CLI \"$B3ARGS\" getbalance )\n+BALANCE4=$( $CLI \"$B4ARGS\" getbalance )\n+\n+TOTAL=$( dc -e \"$BALANCE1 $BALANCE2 $BALANCE3 $BALANCE4 + + + p\" )\n+\n+AssertEqual $TOTAL 5700.00000000\n+\n+function StopThree {\n+  $CLI $B1ARGS stop > /dev/null 2>&1\n+  $CLI $B2ARGS stop > /dev/null 2>&1\n+  $CLI $B3ARGS stop > /dev/null 2>&1\n+  wait $B1PID\n+  wait $B2PID\n+  wait $B3PID\n+}\n+function EraseThree {\n+  rm $D1/regtest/wallet.dat\n+  rm $D2/regtest/wallet.dat\n+  rm $D3/regtest/wallet.dat\n+}\n+function StartThree {\n+  $BITCOIND $BITCOINDARGS $B1ARGS &\n+  B1PID=$!\n+  $BITCOIND $BITCOINDARGS $B2ARGS &\n+  B2PID=$!\n+  $BITCOIND $BITCOINDARGS $B3ARGS &\n+  B3PID=$!\n+}\n+\n+echo \"Restoring using wallet.dat\"\n+\n+StopThree\n+EraseThree\n+\n+# Start node3 with no chain\n+rm -rf $D3/regtest/blocks\n+rm -rf $D3/regtest/chainstate\n+rm -rf $D3/regtest/database\n+\n+cp $D1/wallet.bak $D1/regtest/wallet.dat\n+cp $D2/wallet.bak $D2/regtest/wallet.dat\n+cp $D3/wallet.bak $D3/regtest/wallet.dat\n+\n+StartThree\n+WaitBlocks\n+\n+AssertEqual $BALANCE1 $( $CLI \"$B1ARGS\" getbalance )\n+AssertEqual $BALANCE2 $( $CLI \"$B2ARGS\" getbalance )\n+AssertEqual $BALANCE3 $( $CLI \"$B3ARGS\" getbalance )\n+\n+echo \"Restoring using dumped wallet\"\n+\n+StopThree\n+EraseThree\n+\n+# Start node3 with no chain\n+rm -rf $D3/regtest/blocks\n+rm -rf $D3/regtest/chainstate\n+rm -rf $D3/regtest/database\n+\n+StartThree\n+\n+AssertEqual 0 $( $CLI \"$B1ARGS\" getbalance )\n+AssertEqual 0 $( $CLI \"$B2ARGS\" getbalance )\n+AssertEqual 0 $( $CLI \"$B3ARGS\" getbalance )\n+\n+$CLI \"$B1ARGS\" importwallet $D1/wallet.dump\n+$CLI \"$B2ARGS\" importwallet $D2/wallet.dump\n+$CLI \"$B3ARGS\" importwallet $D3/wallet.dump\n+\n+WaitBlocks\n+\n+AssertEqual $BALANCE1 $( $CLI \"$B1ARGS\" getbalance )\n+AssertEqual $BALANCE2 $( $CLI \"$B2ARGS\" getbalance )\n+AssertEqual $BALANCE3 $( $CLI \"$B3ARGS\" getbalance )\n+\n+StopThree\n+$CLI $B4ARGS stop > /dev/null 2>&1\n+wait $B4PID\n+\n+echo \"Tests successful, cleaning up\"\n+trap \"\" EXIT\n+rm -rf $D\n+exit 0"
      }
    ]
  }
]