[
  {
    "sha": "ff44cae279bef7997f76db18deb1e41b39f05cb6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZjQ0Y2FlMjc5YmVmNzk5N2Y3NmRiMThkZWIxZTQxYjM5ZjA1Y2I2",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-11-15T21:26:23Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-09-02T13:14:34Z"
      },
      "message": "test: Change feature_config_args.py not to rely on strange regtest=0 behavior\n\nUpdate test to simply generate a normal mainnet configuration file instead of\nusing a crazy setup where a regtest=1 config file using an includeconf in the\n[regtest] section includes another config file that specifies regtest=0,\nretroactively switching the network to mainnet.\n\nThis setup was fragile and only worked because the triggered InitError happened\nearly enough that none of the ignored [regtest] options mattered (only\naffecting log output).",
      "tree": {
        "sha": "8e4ff40db52a473ba4e5fe94139e0a2a8c743b63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e4ff40db52a473ba4e5fe94139e0a2a8c743b63"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff44cae279bef7997f76db18deb1e41b39f05cb6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff44cae279bef7997f76db18deb1e41b39f05cb6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ff44cae279bef7997f76db18deb1e41b39f05cb6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff44cae279bef7997f76db18deb1e41b39f05cb6/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c157a50694545090cb1c7e69123fe4709bd5a279",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c157a50694545090cb1c7e69123fe4709bd5a279",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c157a50694545090cb1c7e69123fe4709bd5a279"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 18,
      "deletions": 9
    },
    "files": [
      {
        "sha": "72a424e88eda466a43b28420b586439e4af8202b",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff44cae279bef7997f76db18deb1e41b39f05cb6/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff44cae279bef7997f76db18deb1e41b39f05cb6/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=ff44cae279bef7997f76db18deb1e41b39f05cb6",
        "patch": "@@ -7,6 +7,7 @@\n import os\n \n from test_framework.test_framework import BitcoinTestFramework\n+from test_framework import util\n \n \n class ConfArgsTest(BitcoinTestFramework):\n@@ -41,10 +42,11 @@ def test_config_file_parser(self):\n                 conf.write(\"wallet=foo\\n\")\n             self.nodes[0].assert_start_raises_init_error(expected_msg='Error: Config setting for -wallet only applied on %s network when in [%s] section.' % (self.chain, self.chain))\n \n+        main_conf_file_path = os.path.join(self.options.tmpdir, 'node0', 'bitcoin_main.conf')\n+        util.write_config(main_conf_file_path, n=0, chain='', extra_config='includeconf={}\\n'.format(inc_conf_file_path))\n         with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n-            conf.write('regtest=0\\n') # mainnet\n             conf.write('acceptnonstdtxn=1\\n')\n-        self.nodes[0].assert_start_raises_init_error(expected_msg='Error: acceptnonstdtxn is not currently supported for main chain')\n+        self.nodes[0].assert_start_raises_init_error(extra_args=[\"-conf={}\".format(main_conf_file_path)], expected_msg='Error: acceptnonstdtxn is not currently supported for main chain')\n \n         with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n             conf.write('nono\\n')"
      },
      {
        "sha": "d0aaeea7bc3114d61268d2be29053b107c3ab51a",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 14,
        "deletions": 7,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff44cae279bef7997f76db18deb1e41b39f05cb6/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff44cae279bef7997f76db18deb1e41b39f05cb6/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=ff44cae279bef7997f76db18deb1e41b39f05cb6",
        "patch": "@@ -334,16 +334,25 @@ def initialize_datadir(dirname, n, chain):\n     datadir = get_datadir_path(dirname, n)\n     if not os.path.isdir(datadir):\n         os.makedirs(datadir)\n-    # Translate chain name to config name\n+    write_config(os.path.join(datadir, \"bitcoin.conf\"), n=n, chain=chain)\n+    os.makedirs(os.path.join(datadir, 'stderr'), exist_ok=True)\n+    os.makedirs(os.path.join(datadir, 'stdout'), exist_ok=True)\n+    return datadir\n+\n+\n+def write_config(config_path, *, n, chain, extra_config=\"\"):\n+    # Translate chain subdirectory name to config name\n     if chain == 'testnet3':\n         chain_name_conf_arg = 'testnet'\n         chain_name_conf_section = 'test'\n     else:\n         chain_name_conf_arg = chain\n         chain_name_conf_section = chain\n-    with open(os.path.join(datadir, \"bitcoin.conf\"), 'w', encoding='utf8') as f:\n-        f.write(\"{}=1\\n\".format(chain_name_conf_arg))\n-        f.write(\"[{}]\\n\".format(chain_name_conf_section))\n+    with open(config_path, 'w', encoding='utf8') as f:\n+        if chain_name_conf_arg:\n+            f.write(\"{}=1\\n\".format(chain_name_conf_arg))\n+        if chain_name_conf_section:\n+            f.write(\"[{}]\\n\".format(chain_name_conf_section))\n         f.write(\"port=\" + str(p2p_port(n)) + \"\\n\")\n         f.write(\"rpcport=\" + str(rpc_port(n)) + \"\\n\")\n         f.write(\"fallbackfee=0.0002\\n\")\n@@ -355,9 +364,7 @@ def initialize_datadir(dirname, n, chain):\n         f.write(\"printtoconsole=0\\n\")\n         f.write(\"upnp=0\\n\")\n         f.write(\"shrinkdebugfile=0\\n\")\n-        os.makedirs(os.path.join(datadir, 'stderr'), exist_ok=True)\n-        os.makedirs(os.path.join(datadir, 'stdout'), exist_ok=True)\n-    return datadir\n+        f.write(extra_config)\n \n \n def get_datadir_path(dirname, n):"
      }
    ]
  }
]