esotericnonsense,2017-09-19T08:54:50Z,"If #11359 gets in it might be nice to have the prune hwm in there too, but I didn't want to add the dependency.",https://github.com/bitcoin/bitcoin/pull/11367#issuecomment-330474562,330474562,
promag,2017-09-20T06:48:37Z,Test for `getblockchaininfo` added in #11370.,https://github.com/bitcoin/bitcoin/pull/11367#issuecomment-330760846,330760846,
esotericnonsense,2017-09-20T15:05:05Z,"A few mishaps with the commit message there, sorry.\n\nI have merged this with #11366 and closed #11366.",https://github.com/bitcoin/bitcoin/pull/11367#issuecomment-330881165,330881165,
jonasschnelli,2017-09-22T05:26:05Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/11367#issuecomment-331353386,331353386,
esotericnonsense,2017-09-22T18:25:32Z,"Rebased on master, moved the lock into CalculateCurrentUsage, `CBlockIndex *block` => `CBlockIndex* block`.\n\nTravis failed on one platform (iirc linux64) on a timeout in p2p-segwit last time. Not sure why. We'll see how it goes. edit: looks good.",https://github.com/bitcoin/bitcoin/pull/11367#issuecomment-331524788,331524788,
sipa,2017-09-22T18:53:06Z,utACK 071879a6263aa286e166f9cf07f409e6df35bc02,https://github.com/bitcoin/bitcoin/pull/11367#issuecomment-331531586,331531586,
jnewbery,2017-09-22T20:27:27Z,"I've just tested this with `-prune=1` and I get the bizarre result:\n\n```\n‚Üí bitcoin-cli getblockchaininfo\n{\n...\n  ""prune_target_size"": 18446744073709551615,\n```\n\nThat's because of this section in `init.cpp`:\n\n```\n    nPruneTarget = (uint64_t) nPruneArg * 1024 * 1024;\n    if (nPruneArg == 1) {  // manual pruning: -prune=1\n        LogPrintf(""Block pruning enabled.  Use RPC",https://github.com/bitcoin/bitcoin/pull/11367#issuecomment-331552341,331552341,
esotericnonsense,2017-09-22T22:04:20Z,"Hmmm. Yes, that isn't desirable behaviour.\n\nOptions I can see:\na) nPruneArg is exposed from init.cpp, or an fPruneManualMode (in which case it could be explicitly checked for in FindFilesToPrune)\nor\nb) the RPC checks for int_max to determine whether automatic pruning is disabled\n\nb) fixes the RPC without having to touch pruning code but otherwise seems a bit messy to me.",https://github.com/bitcoin/bitcoin/pull/11367#issuecomment-331571173,331571173,
meshcollider,2017-09-23T03:06:06Z,"Or instead of b) just see if gArgs.GetArg(""-prune"", 0) is 1?\nBut yeah maybe adding a manual prune bool to validation.cpp would be more sensible",https://github.com/bitcoin/bitcoin/pull/11367#issuecomment-331606508,331606508,
jnewbery,2017-09-23T11:36:09Z,"I think just testing the value of `gArgs.GetArg(""-prune"", 0)` is appropriate for this pr. No need to touch the init or validation code.",https://github.com/bitcoin/bitcoin/pull/11367#issuecomment-331628311,331628311,
esotericnonsense,2017-09-24T17:07:45Z,"```\n$ grep ""prune"" ~/.bitcoin/bitcoin.conf\nprune=550\n$ ./bitcoin-cli getblockchaininfo | grep ""prune""\n  ""pruned"": true,\n  ""pruneheight"": 0,\n  ""pruneauto"": true,\n  ""prune_target_size"": 576716800,\n\n$ grep ""prune"" ~/.bitcoin/bitcoin.conf\nprune=1\n$ ./bitcoin-cli getblockchaininfo | grep ""prune""\n  ""pruned"": true,\n  ""pruneheight"": 0,\n  ""pruneauto"": false,\n\n$ grep ""prune"" ",https://github.com/bitcoin/bitcoin/pull/11367#issuecomment-331724085,331724085,
promag,2017-09-24T20:35:06Z,Please rebase with #11370.,https://github.com/bitcoin/bitcoin/pull/11367#issuecomment-331738418,331738418,
esotericnonsense,2017-09-25T22:08:50Z,"Rebased on master and added tests for the relevant fields in test/functional/blockchain.py.\n\nMy box:\n```\n...\nblockchain.py                  | ‚úì Passed  | 13 s\n...\nALL                            | ‚úì Passed  | 695 s (accumulated) \nRuntime: 180 s\n```",https://github.com/bitcoin/bitcoin/pull/11367#issuecomment-332028248,332028248,
esotericnonsense,2017-09-26T14:49:25Z,"Changes made and rebased on master (second push, first was a mistake).",https://github.com/bitcoin/bitcoin/pull/11367#issuecomment-332223575,332223575,
jnewbery,2017-09-26T15:35:17Z,Tested ACK 2b73ece6e34961a6745114b6932945692ed987e7,https://github.com/bitcoin/bitcoin/pull/11367#issuecomment-332238465,332238465,
MarcoFalke,2017-09-29T13:19:10Z,Needs rebase‚Ñ¢,https://github.com/bitcoin/bitcoin/pull/11367#issuecomment-333123961,333123961,
esotericnonsense,2017-09-29T18:51:41Z,¬Æebased,https://github.com/bitcoin/bitcoin/pull/11367#issuecomment-333208643,333208643,
MarcoFalke,2017-09-30T09:08:48Z,utA¬©K b7dfc6c4b89b62f9bb79ea009ee103a6299ac005,https://github.com/bitcoin/bitcoin/pull/11367#issuecomment-333295513,333295513,
TheBlueMatt,2017-10-02T20:35:52Z,"re-utACK b7dfc6c4b89b62f9bb79ea009ee103a6299ac005. In the future, can you avoid rebasing when squashing unless you need to? Avoiding rebasing onto latest master makes it easier for reviewers to identify what changed between reviews.",https://github.com/bitcoin/bitcoin/pull/11367#issuecomment-333657132,333657132,
esotericnonsense,2017-10-02T22:13:59Z,"Yes, I can do that in the future. I hadn't considered that.\nDo you prefer for each change to be made in an individual commit (with a squash before the PR is implemented)?",https://github.com/bitcoin/bitcoin/pull/11367#issuecomment-333680420,333680420,
MarcoFalke,2017-10-03T05:58:42Z,"It is fine to just amend the existing commits with fix-ups, as reviewers\nhave the original commits fetched locally. So it is easy to compare the two\nversions.\n\nHowever, with a rebase on master in between, the reviewer needs to\npainfully repeat the same rebase in some way.\n",https://github.com/bitcoin/bitcoin/pull/11367#issuecomment-333747421,333747421,
jnewbery,2017-09-19T18:08:23Z,"nit: perhaps `disk_usage` or `size_on_disk`?\n\nAlso consider placing this above `pruned` so all of the pruning-related fields are grouped.",https://github.com/bitcoin/bitcoin/pull/11367#discussion_r139772263,139772263,src/rpc/blockchain.cpp
promag,2017-09-19T22:35:32Z,Also align description.,https://github.com/bitcoin/bitcoin/pull/11367#discussion_r139835587,139835587,src/rpc/blockchain.cpp
promag,2017-09-19T22:37:30Z,"IMO we should test the response result. In this case, at least, check that the key exists and value is a number. cc @jnewbery ",https://github.com/bitcoin/bitcoin/pull/11367#discussion_r139835927,139835927,src/rpc/blockchain.cpp
promag,2017-09-19T22:44:48Z,"Ah, @jnewbery already recommended a test! üëç ",https://github.com/bitcoin/bitcoin/pull/11367#discussion_r139837089,139837089,src/rpc/blockchain.cpp
promag,2017-09-19T22:45:13Z,Missing lock of `cs_LastBlockFile`.,https://github.com/bitcoin/bitcoin/pull/11367#discussion_r139837161,139837161,src/rpc/blockchain.cpp
jnewbery,2017-09-20T19:48:16Z,"The help text for `pruneheight` should also include ""(only present if pruning is enabled)""",https://github.com/bitcoin/bitcoin/pull/11367#discussion_r140073685,140073685,src/rpc/blockchain.cpp
esotericnonsense,2017-09-20T23:53:24Z,4a61af9,https://github.com/bitcoin/bitcoin/pull/11367#discussion_r140121000,140121000,src/rpc/blockchain.cpp
sipa,2017-09-21T00:05:33Z,"I'd rather not expose more variables that are private to validation to the outside world.\n\nPerhaps you can instead create a wrapper around `CalculateCurrentUsage`, which just grabs `cs_LastBlockFile` and calls the internal one, and expose that? That way the RPC code wouldn't need to know about the existence of that lock eve.",https://github.com/bitcoin/bitcoin/pull/11367#discussion_r140122508,140122508,src/validation.h
promag,2017-09-21T09:03:42Z,Why not just lock `cs_LastBlockFile` in `CalculateCurrentUsage`? It's a recursive mutex and IMO should be locked where it's needed (BTW the same for remaining locks...).,https://github.com/bitcoin/bitcoin/pull/11367#discussion_r140186259,140186259,src/validation.h
promag,2017-09-21T09:04:16Z,`CBlockIndex* block = ...`;,https://github.com/bitcoin/bitcoin/pull/11367#discussion_r140186375,140186375,src/rpc/blockchain.cpp
jonasschnelli,2017-09-22T05:24:59Z,"As @sipa already commented, `CalculateCurrentUsage()` should be responsible for concurrency locking (not the calling code part).",https://github.com/bitcoin/bitcoin/pull/11367#discussion_r140414272,140414272,src/rpc/blockchain.cpp
jonasschnelli,2017-09-22T05:25:51Z,Indentation seems wrong (others need to space-up).,https://github.com/bitcoin/bitcoin/pull/11367#discussion_r140414350,140414350,src/rpc/blockchain.cpp
esotericnonsense,2017-09-22T18:24:18Z,I followed the example of 'verificationprogress'; can indent the others further if you think that makes sense.,https://github.com/bitcoin/bitcoin/pull/11367#discussion_r140564032,140564032,src/rpc/blockchain.cpp
jnewbery,2017-09-26T13:48:12Z,current code style is snake_case for variables (https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#developer-notes). `prune_auto` or `auto_prune` should be fine.,https://github.com/bitcoin/bitcoin/pull/11367#discussion_r141060923,141060923,src/rpc/blockchain.cpp
jnewbery,2017-09-26T13:48:42Z,Please also use snake_case for RPC fields. I think `automatic_pruning` is appropriate here.,https://github.com/bitcoin/bitcoin/pull/11367#discussion_r141061064,141061064,src/rpc/blockchain.cpp
jnewbery,2017-09-26T13:50:07Z,"No need for `assert_equal` when comparing a value to `True` or `False`. The following is fine:\n\n```python\nassert res['pruned']\nassert not res['pruneauto']\n```",https://github.com/bitcoin/bitcoin/pull/11367#discussion_r141061511,141061511,test/functional/blockchain.py
jnewbery,2017-09-26T13:51:45Z,suggest that you change this to assert that `size_on_disk` is greater than zero. This test would fail unnecessarily if a change in the implementation changed the size on disk.,https://github.com/bitcoin/bitcoin/pull/11367#discussion_r141062035,141062035,test/functional/blockchain.py
jnewbery,2017-09-26T13:52:57Z,`assert_greater_than_or_equal()` is better here (since it will print out the value of `res['size_on_disk']` if the assert fails),https://github.com/bitcoin/bitcoin/pull/11367#discussion_r141062427,141062427,test/functional/blockchain.py
jnewbery,2017-09-26T14:03:12Z,"nit: Since `1` is a magic number meaning manual pruning, I think it's clearer to use equality like in init.cpp, rather than greater-than:\n\n```\n        bool fPruneAuto = (gArgs.GetArg(""-prune"", 0) != 1);\n```\n\n\n",https://github.com/bitcoin/bitcoin/pull/11367#discussion_r141065718,141065718,src/rpc/blockchain.cpp
esotericnonsense,2017-09-26T14:36:54Z,"I was torn there, because that actually gives True in the case prune=0, but that case can never happen because execution would skip over the `if (fPruneMode)` block. I'll change it.",https://github.com/bitcoin/bitcoin/pull/11367#discussion_r141076365,141076365,src/rpc/blockchain.cpp
esotericnonsense,2017-09-26T14:46:09Z,As below I've dropped the 'equal to' because I don't see why it should ever be 0 unless there's some caching going on.,https://github.com/bitcoin/bitcoin/pull/11367#discussion_r141079289,141079289,test/functional/blockchain.py
TheBlueMatt,2017-09-27T19:35:33Z,"While you're at it can you add this lock to PruneOneBlockFile and GetBlockFileInfo (both of which are only called without lock during testing, so its not an actual issue, just annoying).",https://github.com/bitcoin/bitcoin/pull/11367#discussion_r141445930,141445930,src/validation.cpp
esotericnonsense,2017-09-29T18:51:26Z,Done in b7dfc6c4b89b62f9bb79ea009ee103a6299ac005.,https://github.com/bitcoin/bitcoin/pull/11367#discussion_r141941161,141941161,src/validation.cpp
