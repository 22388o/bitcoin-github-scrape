[
  {
    "sha": "b7dfc6c4b89b62f9bb79ea009ee103a6299ac005",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiN2RmYzZjNGI4OWI2MmY5YmI3OWVhMDA5ZWUxMDNhNjI5OWFjMDA1",
    "commit": {
      "author": {
        "name": "Daniel Edgecumbe",
        "email": "esotericnonsense@danedgecumbe.com",
        "date": "2017-09-20T23:52:20Z"
      },
      "committer": {
        "name": "Daniel Edgecumbe",
        "email": "esotericnonsense@danedgecumbe.com",
        "date": "2017-09-29T18:40:50Z"
      },
      "message": "[rpc] getblockchaininfo: add size_on_disk, prune_target_size, automatic_pruning\n\nFix pruneheight help text.\nMove fPruneMode block to match output ordering with help text.\nAdd functional tests for new fields in getblockchaininfo.",
      "tree": {
        "sha": "46c129303778821e49b1bd11de55ab07c62a07cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/46c129303778821e49b1bd11de55ab07c62a07cc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b7dfc6c4b89b62f9bb79ea009ee103a6299ac005",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7dfc6c4b89b62f9bb79ea009ee103a6299ac005",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b7dfc6c4b89b62f9bb79ea009ee103a6299ac005",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7dfc6c4b89b62f9bb79ea009ee103a6299ac005/comments",
    "author": {
      "login": "esotericnonsense",
      "id": 7999704,
      "node_id": "MDQ6VXNlcjc5OTk3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7999704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/esotericnonsense",
      "html_url": "https://github.com/esotericnonsense",
      "followers_url": "https://api.github.com/users/esotericnonsense/followers",
      "following_url": "https://api.github.com/users/esotericnonsense/following{/other_user}",
      "gists_url": "https://api.github.com/users/esotericnonsense/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/esotericnonsense/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/esotericnonsense/subscriptions",
      "organizations_url": "https://api.github.com/users/esotericnonsense/orgs",
      "repos_url": "https://api.github.com/users/esotericnonsense/repos",
      "events_url": "https://api.github.com/users/esotericnonsense/events{/privacy}",
      "received_events_url": "https://api.github.com/users/esotericnonsense/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "esotericnonsense",
      "id": 7999704,
      "node_id": "MDQ6VXNlcjc5OTk3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7999704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/esotericnonsense",
      "html_url": "https://github.com/esotericnonsense",
      "followers_url": "https://api.github.com/users/esotericnonsense/followers",
      "following_url": "https://api.github.com/users/esotericnonsense/following{/other_user}",
      "gists_url": "https://api.github.com/users/esotericnonsense/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/esotericnonsense/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/esotericnonsense/subscriptions",
      "organizations_url": "https://api.github.com/users/esotericnonsense/orgs",
      "repos_url": "https://api.github.com/users/esotericnonsense/repos",
      "events_url": "https://api.github.com/users/esotericnonsense/events{/privacy}",
      "received_events_url": "https://api.github.com/users/esotericnonsense/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff4cd6075b12fb32b9a906deea3ed033e3f9560a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff4cd6075b12fb32b9a906deea3ed033e3f9560a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff4cd6075b12fb32b9a906deea3ed033e3f9560a"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 58,
      "deletions": 13
    },
    "files": [
      {
        "sha": "c9d46444ea69b83d5779f28ea1ecf2af8d4c6e45",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 9,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7dfc6c4b89b62f9bb79ea009ee103a6299ac005/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7dfc6c4b89b62f9bb79ea009ee103a6299ac005/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=b7dfc6c4b89b62f9bb79ea009ee103a6299ac005",
        "patch": "@@ -1136,8 +1136,11 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n             \"  \\\"mediantime\\\": xxxxxx,     (numeric) median time for the current best block\\n\"\n             \"  \\\"verificationprogress\\\": xxxx, (numeric) estimate of verification progress [0..1]\\n\"\n             \"  \\\"chainwork\\\": \\\"xxxx\\\"     (string) total amount of work in active chain, in hexadecimal\\n\"\n+            \"  \\\"size_on_disk\\\": xxxxxx,   (numeric) the estimated size of the block and undo files on disk\\n\"\n             \"  \\\"pruned\\\": xx,             (boolean) if the blocks are subject to pruning\\n\"\n-            \"  \\\"pruneheight\\\": xxxxxx,    (numeric) lowest-height complete block stored\\n\"\n+            \"  \\\"pruneheight\\\": xxxxxx,    (numeric) lowest-height complete block stored (only present if pruning is enabled)\\n\"\n+            \"  \\\"automatic_pruning\\\": xx,  (boolean) whether automatic pruning is enabled (only present if pruning is enabled)\\n\"\n+            \"  \\\"prune_target_size\\\": xxxxxx,  (numeric) the target size used by pruning (only present if automatic pruning is enabled)\\n\"\n             \"  \\\"softforks\\\": [            (array) status of softforks in progress\\n\"\n             \"     {\\n\"\n             \"        \\\"id\\\": \\\"xxxx\\\",        (string) name of softfork\\n\"\n@@ -1181,7 +1184,24 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n     obj.push_back(Pair(\"mediantime\",            (int64_t)chainActive.Tip()->GetMedianTimePast()));\n     obj.push_back(Pair(\"verificationprogress\",  GuessVerificationProgress(Params().TxData(), chainActive.Tip())));\n     obj.push_back(Pair(\"chainwork\",             chainActive.Tip()->nChainWork.GetHex()));\n+    obj.push_back(Pair(\"size_on_disk\",          CalculateCurrentUsage()));\n     obj.push_back(Pair(\"pruned\",                fPruneMode));\n+    if (fPruneMode) {\n+        CBlockIndex* block = chainActive.Tip();\n+        assert(block);\n+        while (block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA)) {\n+            block = block->pprev;\n+        }\n+\n+        obj.push_back(Pair(\"pruneheight\",        block->nHeight));\n+\n+        // if 0, execution bypasses the whole if block.\n+        bool automatic_pruning = (gArgs.GetArg(\"-prune\", 0) != 1);\n+        obj.push_back(Pair(\"automatic_pruning\",  automatic_pruning));\n+        if (automatic_pruning) {\n+            obj.push_back(Pair(\"prune_target_size\",  nPruneTarget));\n+        }\n+    }\n \n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     CBlockIndex* tip = chainActive.Tip();\n@@ -1195,14 +1215,6 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n     obj.push_back(Pair(\"softforks\",             softforks));\n     obj.push_back(Pair(\"bip9_softforks\", bip9_softforks));\n \n-    if (fPruneMode)\n-    {\n-        CBlockIndex *block = chainActive.Tip();\n-        while (block && block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA))\n-            block = block->pprev;\n-\n-        obj.push_back(Pair(\"pruneheight\",        block->nHeight));\n-    }\n     obj.push_back(Pair(\"warnings\", GetWarnings(\"statusbar\")));\n     return obj;\n }"
      },
      {
        "sha": "48c323698f20954a7fcc19fef89298501e90ea68",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7dfc6c4b89b62f9bb79ea009ee103a6299ac005/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7dfc6c4b89b62f9bb79ea009ee103a6299ac005/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=b7dfc6c4b89b62f9bb79ea009ee103a6299ac005",
        "patch": "@@ -3233,8 +3233,10 @@ bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams,\n  */\n \n /* Calculate the amount of disk space the block & undo files currently use */\n-static uint64_t CalculateCurrentUsage()\n+uint64_t CalculateCurrentUsage()\n {\n+    LOCK(cs_LastBlockFile);\n+\n     uint64_t retval = 0;\n     for (const CBlockFileInfo &file : vinfoBlockFile) {\n         retval += file.nSize + file.nUndoSize;\n@@ -3245,6 +3247,8 @@ static uint64_t CalculateCurrentUsage()\n /* Prune a block file (modify associated database entries)*/\n void PruneOneBlockFile(const int fileNumber)\n {\n+    LOCK(cs_LastBlockFile);\n+\n     for (BlockMap::iterator it = mapBlockIndex.begin(); it != mapBlockIndex.end(); ++it) {\n         CBlockIndex* pindex = it->second;\n         if (pindex->nFile == fileNumber) {\n@@ -4247,6 +4251,8 @@ std::string CBlockFileInfo::ToString() const\n \n CBlockFileInfo* GetBlockFileInfo(size_t n)\n {\n+    LOCK(cs_LastBlockFile);\n+\n     return &vinfoBlockFile.at(n);\n }\n "
      },
      {
        "sha": "75b897f3de639fcbaad0ee899d51ce4f4ab13d94",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7dfc6c4b89b62f9bb79ea009ee103a6299ac005/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7dfc6c4b89b62f9bb79ea009ee103a6299ac005/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=b7dfc6c4b89b62f9bb79ea009ee103a6299ac005",
        "patch": "@@ -280,6 +280,9 @@ CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams);\n /** Guess verification progress (as a fraction between 0.0=genesis and 1.0=current tip). */\n double GuessVerificationProgress(const ChainTxData& data, CBlockIndex* pindex);\n \n+/** Calculate the amount of disk space the block & undo files currently use */\n+uint64_t CalculateCurrentUsage();\n+\n /**\n  *  Mark one block file as pruned.\n  */"
      },
      {
        "sha": "1918caf004b04d637f9ec95693da3fa72bba643d",
        "filename": "test/functional/blockchain.py",
        "status": "modified",
        "additions": 27,
        "deletions": 3,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7dfc6c4b89b62f9bb79ea009ee103a6299ac005/test/functional/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7dfc6c4b89b62f9bb79ea009ee103a6299ac005/test/functional/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/blockchain.py?ref=b7dfc6c4b89b62f9bb79ea009ee103a6299ac005",
        "patch": "@@ -24,6 +24,8 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n     assert_raises,\n     assert_raises_jsonrpc,\n     assert_is_hex_string,\n@@ -58,21 +60,43 @@ def _test_getblockchaininfo(self):\n             'headers',\n             'mediantime',\n             'pruned',\n+            'size_on_disk',\n             'softforks',\n             'verificationprogress',\n             'warnings',\n         ]\n         res = self.nodes[0].getblockchaininfo()\n-        # result should have pruneheight and default keys if pruning is enabled\n-        assert_equal(sorted(res.keys()), sorted(['pruneheight'] + keys))\n+\n+        # result should have these additional pruning keys if manual pruning is enabled\n+        assert_equal(sorted(res.keys()), sorted(['pruneheight', 'automatic_pruning'] + keys))\n+\n+        # size_on_disk should be > 0\n+        assert_greater_than(res['size_on_disk'], 0)\n+\n         # pruneheight should be greater or equal to 0\n-        assert res['pruneheight'] >= 0\n+        assert_greater_than_or_equal(res['pruneheight'], 0)\n+\n+        # check other pruning fields given that prune=1\n+        assert res['pruned']\n+        assert not res['automatic_pruning']\n \n         self.restart_node(0, ['-stopatheight=207'])\n         res = self.nodes[0].getblockchaininfo()\n         # should have exact keys\n         assert_equal(sorted(res.keys()), keys)\n \n+        self.restart_node(0, ['-stopatheight=207', '-prune=550'])\n+        res = self.nodes[0].getblockchaininfo()\n+        # result should have these additional pruning keys if prune=550\n+        assert_equal(sorted(res.keys()), sorted(['pruneheight', 'automatic_pruning', 'prune_target_size'] + keys))\n+\n+        # check related fields\n+        assert res['pruned']\n+        assert_equal(res['pruneheight'], 0)\n+        assert res['automatic_pruning']\n+        assert_equal(res['prune_target_size'], 576716800)\n+        assert_greater_than(res['size_on_disk'], 0)\n+\n     def _test_getchaintxstats(self):\n         chaintxstats = self.nodes[0].getchaintxstats(1)\n         # 200 txs plus genesis tx"
      }
    ]
  }
]