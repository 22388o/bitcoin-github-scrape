[
  {
    "sha": "b7506b302df2e3d66a40547e931daf2a6f2fba12",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNzUwNmIzMDJkZjJlM2Q2NmE0MDU0N2U5MzFkYWYyYTZmMmZiYTEy",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2012-07-03T12:37:51Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2012-07-03T12:38:03Z"
      },
      "message": "enhance translation possibilities in TransactionDesc / misc other changes\n\n- remove \"#include <QString>\" as this is included in the header\n- add some missing plural forms that can be translated\n- change \"yours\" into \"own address\", which is easier to understand and translate in that context\n- cleanup translatable strings to not include HTML or unneeded chars (e.g. \":\")\n- resize TransactionDescDialog a little (remove unwanted line-breaks with non english translations)",
      "tree": {
        "sha": "e8d8e4085ae0084ee673ac714114ba65bba3f9b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e8d8e4085ae0084ee673ac714114ba65bba3f9b9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b7506b302df2e3d66a40547e931daf2a6f2fba12",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7506b302df2e3d66a40547e931daf2a6f2fba12",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b7506b302df2e3d66a40547e931daf2a6f2fba12",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7506b302df2e3d66a40547e931daf2a6f2fba12/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "da1103f4f8288cffc9ea475254fdeb258f04de77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da1103f4f8288cffc9ea475254fdeb258f04de77",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/da1103f4f8288cffc9ea475254fdeb258f04de77"
      }
    ],
    "stats": {
      "total": 86,
      "additions": 39,
      "deletions": 47
    },
    "files": [
      {
        "sha": "b38dffcc1251fde6a666e4d852ec2696ef562671",
        "filename": "src/qt/forms/transactiondescdialog.ui",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7506b302df2e3d66a40547e931daf2a6f2fba12/src/qt/forms/transactiondescdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7506b302df2e3d66a40547e931daf2a6f2fba12/src/qt/forms/transactiondescdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/transactiondescdialog.ui?ref=b7506b302df2e3d66a40547e931daf2a6f2fba12",
        "patch": "@@ -6,7 +6,7 @@\n    <rect>\n     <x>0</x>\n     <y>0</y>\n-    <width>600</width>\n+    <width>620</width>\n     <height>250</height>\n    </rect>\n   </property>"
      },
      {
        "sha": "3e7eca59ca2b41f2126e2853e7db72126a57f7b8",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 46,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7506b302df2e3d66a40547e931daf2a6f2fba12/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7506b302df2e3d66a40547e931daf2a6f2fba12/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=b7506b302df2e3d66a40547e931daf2a6f2fba12",
        "patch": "@@ -9,24 +9,20 @@\n #include \"ui_interface.h\"\n #include \"base58.h\"\n \n-#include <QString>\n-\n-using namespace std;\n-\n QString TransactionDesc::FormatTxStatus(const CWalletTx& wtx)\n {\n     if (!wtx.IsFinal())\n     {\n         if (wtx.nLockTime < LOCKTIME_THRESHOLD)\n-            return tr(\"Open for %1 blocks\").arg(nBestHeight - wtx.nLockTime);\n+            return tr(\"Open for %n block(s)\", \"\", nBestHeight - wtx.nLockTime);\n         else\n             return tr(\"Open until %1\").arg(GUIUtil::dateTimeStr(wtx.nLockTime));\n     }\n     else\n     {\n         int nDepth = wtx.GetDepthInMainChain();\n         if (GetAdjustedTime() - wtx.nTimeReceived > 2 * 60 && wtx.GetRequestCount() == 0)\n-            return tr(\"%1/offline?\").arg(nDepth);\n+            return tr(\"%1/offline\").arg(nDepth);\n         else if (nDepth < 6)\n             return tr(\"%1/unconfirmed\").arg(nDepth);\n         else\n@@ -48,33 +44,31 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx)\n         int64 nDebit = wtx.GetDebit();\n         int64 nNet = nCredit - nDebit;\n \n-        strHTML += tr(\"<b>Status:</b> \") + FormatTxStatus(wtx);\n+        strHTML += \"<b>\" + tr(\"Status\") + \":</b> \" + FormatTxStatus(wtx);\n         int nRequests = wtx.GetRequestCount();\n         if (nRequests != -1)\n         {\n             if (nRequests == 0)\n                 strHTML += tr(\", has not been successfully broadcast yet\");\n-            else if (nRequests == 1)\n-                strHTML += tr(\", broadcast through %1 node\").arg(nRequests);\n-            else\n-                strHTML += tr(\", broadcast through %1 nodes\").arg(nRequests);\n+            else if (nRequests > 0)\n+                strHTML += tr(\", broadcast through %n node(s)\", \"\", nRequests);\n         }\n         strHTML += \"<br>\";\n \n-        strHTML += tr(\"<b>Date:</b> \") + (nTime ? GUIUtil::dateTimeStr(nTime) : QString(\"\")) + \"<br>\";\n+        strHTML += \"<b>\" + tr(\"Date\") + \":</b> \" + (nTime ? GUIUtil::dateTimeStr(nTime) : \"\") + \"<br>\";\n \n         //\n         // From\n         //\n         if (wtx.IsCoinBase())\n         {\n-            strHTML += tr(\"<b>Source:</b> Generated<br>\");\n+            strHTML += \"<b>\" + tr(\"Source\") + \":</b> \" + tr(\"Generated\") + \"<br>\";\n         }\n         else if (!wtx.mapValue[\"from\"].empty())\n         {\n             // Online transaction\n             if (!wtx.mapValue[\"from\"].empty())\n-                strHTML += tr(\"<b>From:</b> \") + GUIUtil::HtmlEscape(wtx.mapValue[\"from\"]) + \"<br>\";\n+                strHTML += \"<b>\" + tr(\"From\") + \":</b> \" + GUIUtil::HtmlEscape(wtx.mapValue[\"from\"]) + \"<br>\";\n         }\n         else\n         {\n@@ -91,13 +85,13 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx)\n                         {\n                             if (wallet->mapAddressBook.count(address))\n                             {\n-                                strHTML += tr(\"<b>From:</b> \") + tr(\"unknown\") + \"<br>\";\n-                                strHTML += tr(\"<b>To:</b> \");\n+                                strHTML += \"<b>\" + tr(\"From\") + \":</b> \" + tr(\"unknown\") + \"<br>\";\n+                                strHTML += \"<b>\" + tr(\"To\") + \":</b> \";\n                                 strHTML += GUIUtil::HtmlEscape(CBitcoinAddress(address).ToString());\n                                 if (!wallet->mapAddressBook[address].empty())\n-                                    strHTML += tr(\" (yours, label: \") + GUIUtil::HtmlEscape(wallet->mapAddressBook[address]) + \")\";\n+                                    strHTML += \" (\" + tr(\"own address\") + \", \" + tr(\"label\") + \": \" + GUIUtil::HtmlEscape(wallet->mapAddressBook[address]) + \")\";\n                                 else\n-                                    strHTML += tr(\" (yours)\");\n+                                    strHTML += \" (\" + tr(\"own address\") + \")\";\n                                 strHTML += \"<br>\";\n                             }\n                         }\n@@ -110,12 +104,11 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx)\n         //\n         // To\n         //\n-        string strAddress;\n         if (!wtx.mapValue[\"to\"].empty())\n         {\n             // Online transaction\n-            strAddress = wtx.mapValue[\"to\"];\n-            strHTML += tr(\"<b>To:</b> \");\n+            std::string strAddress = wtx.mapValue[\"to\"];\n+            strHTML += \"<b>\" + tr(\"To\") + \":</b> \";\n             CTxDestination dest = CBitcoinAddress(strAddress).Get();\n             if (wallet->mapAddressBook.count(dest) && !wallet->mapAddressBook[dest].empty())\n                 strHTML += GUIUtil::HtmlEscape(wallet->mapAddressBook[dest]) + \" \";\n@@ -133,21 +126,19 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx)\n             int64 nUnmatured = 0;\n             BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n                 nUnmatured += wallet->GetCredit(txout);\n-            strHTML += tr(\"<b>Credit:</b> \");\n+            strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \";\n             if (wtx.IsInMainChain())\n-                strHTML += tr(\"(%1 matures in %2 more blocks)\")\n-                        .arg(BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, nUnmatured))\n-                        .arg(wtx.GetBlocksToMaturity());\n+                strHTML += BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, nUnmatured)+ \" (\" + tr(\"matures in %n more block(s)\", \"\", wtx.GetBlocksToMaturity()) + \")\";\n             else\n-                strHTML += tr(\"(not accepted)\");\n+                strHTML += \"(\" + tr(\"not accepted\") + \")\";\n             strHTML += \"<br>\";\n         }\n         else if (nNet > 0)\n         {\n             //\n             // Credit\n             //\n-            strHTML += tr(\"<b>Credit:</b> \") + BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, nNet) + \"<br>\";\n+            strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, nNet) + \"<br>\";\n         }\n         else\n         {\n@@ -175,29 +166,29 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx)\n                         CTxDestination address;\n                         if (ExtractDestination(txout.scriptPubKey, address))\n                         {\n-                            strHTML += tr(\"<b>To:</b> \");\n+                            strHTML += \"<b>\" + tr(\"To\") + \":</b> \";\n                             if (wallet->mapAddressBook.count(address) && !wallet->mapAddressBook[address].empty())\n                                 strHTML += GUIUtil::HtmlEscape(wallet->mapAddressBook[address]) + \" \";\n                             strHTML += GUIUtil::HtmlEscape(CBitcoinAddress(address).ToString());\n                             strHTML += \"<br>\";\n                         }\n                     }\n \n-                    strHTML += tr(\"<b>Debit:</b> \") + BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, -txout.nValue) + \"<br>\";\n+                    strHTML += \"<b>\" + tr(\"Debit\") + \":</b> \" + BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, -txout.nValue) + \"<br>\";\n                 }\n \n                 if (fAllToMe)\n                 {\n                     // Payment to self\n                     int64 nChange = wtx.GetChange();\n                     int64 nValue = nCredit - nChange;\n-                    strHTML += tr(\"<b>Debit:</b> \") + BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, -nValue) + \"<br>\";\n-                    strHTML += tr(\"<b>Credit:</b> \") + BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, nValue) + \"<br>\";\n+                    strHTML += \"<b>\" + tr(\"Debit\") + \":</b> \" + BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, -nValue) + \"<br>\";\n+                    strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, nValue) + \"<br>\";\n                 }\n \n                 int64 nTxFee = nDebit - wtx.GetValueOut();\n                 if (nTxFee > 0)\n-                    strHTML += tr(\"<b>Transaction fee:</b> \") + BitcoinUnits::formatWithUnit(BitcoinUnits::BTC,-nTxFee) + \"<br>\";\n+                    strHTML += \"<b>\" + tr(\"Transaction fee\") + \":</b> \" + BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, -nTxFee) + \"<br>\";\n             }\n             else\n             {\n@@ -206,47 +197,47 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx)\n                 //\n                 BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n                     if (wallet->IsMine(txin))\n-                        strHTML += tr(\"<b>Debit:</b> \") + BitcoinUnits::formatWithUnit(BitcoinUnits::BTC,-wallet->GetDebit(txin)) + \"<br>\";\n+                        strHTML += \"<b>\" + tr(\"Debit\") + \":</b> \" + BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, -wallet->GetDebit(txin)) + \"<br>\";\n                 BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n                     if (wallet->IsMine(txout))\n-                        strHTML += tr(\"<b>Credit:</b> \") + BitcoinUnits::formatWithUnit(BitcoinUnits::BTC,wallet->GetCredit(txout)) + \"<br>\";\n+                        strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, wallet->GetCredit(txout)) + \"<br>\";\n             }\n         }\n \n-        strHTML += tr(\"<b>Net amount:</b> \") + BitcoinUnits::formatWithUnit(BitcoinUnits::BTC,nNet, true) + \"<br>\";\n+        strHTML += \"<b>\" + tr(\"Net amount\") + \":</b> \" + BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, nNet, true) + \"<br>\";\n \n         //\n         // Message\n         //\n         if (!wtx.mapValue[\"message\"].empty())\n-            strHTML += QString(\"<br><b>\") + tr(\"Message:\") + \"</b><br>\" + GUIUtil::HtmlEscape(wtx.mapValue[\"message\"], true) + \"<br>\";\n+            strHTML += \"<br><b>\" + tr(\"Message\") + \":</b><br>\" + GUIUtil::HtmlEscape(wtx.mapValue[\"message\"], true) + \"<br>\";\n         if (!wtx.mapValue[\"comment\"].empty())\n-            strHTML += QString(\"<br><b>\") + tr(\"Comment:\") + \"</b><br>\" + GUIUtil::HtmlEscape(wtx.mapValue[\"comment\"], true) + \"<br>\";\n+            strHTML += \"<br><b>\" + tr(\"Comment\") + \":</b><br>\" + GUIUtil::HtmlEscape(wtx.mapValue[\"comment\"], true) + \"<br>\";\n \n-        strHTML += QString(\"<b>\") + tr(\"Transaction ID:\") + \"</b> \" + wtx.GetHash().ToString().c_str() + \"<br>\";\n+        strHTML += \"<b>\" + tr(\"Transaction ID\") + \":</b> \" + wtx.GetHash().ToString().c_str() + \"<br>\";\n \n         if (wtx.IsCoinBase())\n-            strHTML += QString(\"<br>\") + tr(\"Generated coins must mature 120 blocks before they can be spent. When you generated this block, it was broadcast to the network to be added to the block chain. If it fails to get into the chain, its state will change to \\\"not accepted\\\" and it won't be spendable. This may occasionally happen if another node generates a block within a few seconds of yours.\") + \"<br>\";\n+            strHTML += \"<br>\" + tr(\"Generated coins must mature 120 blocks before they can be spent. When you generated this block, it was broadcast to the network to be added to the block chain. If it fails to get into the chain, its state will change to \\\"not accepted\\\" and it won't be spendable. This may occasionally happen if another node generates a block within a few seconds of yours.\") + \"<br>\";\n \n         //\n         // Debug view\n         //\n         if (fDebug)\n         {\n-            strHTML += \"<hr><br>Debug information<br><br>\";\n+            strHTML += \"<hr><br>\" + tr(\"Debug information\") + \"<br><br>\";\n             BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n                 if(wallet->IsMine(txin))\n-                    strHTML += \"<b>Debit:</b> \" + BitcoinUnits::formatWithUnit(BitcoinUnits::BTC,-wallet->GetDebit(txin)) + \"<br>\";\n+                    strHTML += \"<b>\" + tr(\"Debit\") + \":</b> \" + BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, -wallet->GetDebit(txin)) + \"<br>\";\n             BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n                 if(wallet->IsMine(txout))\n-                    strHTML += \"<b>Credit:</b> \" + BitcoinUnits::formatWithUnit(BitcoinUnits::BTC,wallet->GetCredit(txout)) + \"<br>\";\n+                    strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, wallet->GetCredit(txout)) + \"<br>\";\n \n-            strHTML += \"<br><b>Transaction:</b><br>\";\n+            strHTML += \"<br><b>\" + tr(\"Transaction\") + \":</b><br>\";\n             strHTML += GUIUtil::HtmlEscape(wtx.ToString(), true);\n \n             CTxDB txdb(\"r\"); // To fetch source txouts\n \n-            strHTML += \"<br><b>Inputs:</b>\";\n+            strHTML += \"<br><b>\" + tr(\"Inputs\") + \":</b>\";\n             strHTML += \"<ul>\";\n \n             {\n@@ -269,12 +260,13 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx)\n                                     strHTML += GUIUtil::HtmlEscape(wallet->mapAddressBook[address]) + \" \";\n                                 strHTML += QString::fromStdString(CBitcoinAddress(address).ToString());\n                             }\n-                            strHTML = strHTML + \" Amount=\" + BitcoinUnits::formatWithUnit(BitcoinUnits::BTC,vout.nValue);\n-                            strHTML = strHTML + \" IsMine=\" + (wallet->IsMine(vout) ? \"true\" : \"false\") + \"</li>\";\n+                            strHTML = strHTML + \" \" + tr(\"Amount\") + \"=\" + BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, vout.nValue);\n+                            strHTML = strHTML + \" IsMine=\" + (wallet->IsMine(vout) ? tr(\"true\") : tr(\"false\")) + \"</li>\";\n                         }\n                     }\n                 }\n             }\n+\n             strHTML += \"</ul>\";\n         }\n "
      }
    ]
  }
]