[
  {
    "sha": "62e7c04fb82c1b99ee27b61af17cda343c9f9912",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MmU3YzA0ZmI4MmMxYjk5ZWUyN2I2MWFmMTdjZGEzNDNjOWY5OTEy",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-12-19T16:19:28Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-12-19T16:19:28Z"
      },
      "message": "Remove dead feeest-file read code for old versions\n\n0.15.0 introduced a new feeest file format, and support for parsing\nold versions was never fully added. We now simply fail to read the\nold format, so remove the dead partial-implementation.",
      "tree": {
        "sha": "ecb30ca9e0008c92aa3978753f4bc294923c9ab0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ecb30ca9e0008c92aa3978753f4bc294923c9ab0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/62e7c04fb82c1b99ee27b61af17cda343c9f9912",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62e7c04fb82c1b99ee27b61af17cda343c9f9912",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/62e7c04fb82c1b99ee27b61af17cda343c9f9912",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62e7c04fb82c1b99ee27b61af17cda343c9f9912/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cdd6bbf10a818d243f973f628e465cc1df98691a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cdd6bbf10a818d243f973f628e465cc1df98691a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cdd6bbf10a818d243f973f628e465cc1df98691a"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 15,
      "deletions": 24
    },
    "files": [
      {
        "sha": "490986fc11f6735a43c70924186426962f340e67",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 24,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/62e7c04fb82c1b99ee27b61af17cda343c9f9912/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/62e7c04fb82c1b99ee27b61af17cda343c9f9912/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=62e7c04fb82c1b99ee27b61af17cda343c9f9912",
        "patch": "@@ -411,15 +411,13 @@ void TxConfirmStats::Read(CAutoFile& filein, int nFileVersion, size_t numBuckets\n     size_t maxConfirms, maxPeriods;\n \n     // The current version will store the decay with each individual TxConfirmStats and also keep a scale factor\n-    if (nFileVersion >= 149900) {\n-        filein >> decay;\n-        if (decay <= 0 || decay >= 1) {\n-            throw std::runtime_error(\"Corrupt estimates file. Decay must be between 0 and 1 (non-inclusive)\");\n-        }\n-        filein >> scale;\n-        if (scale == 0) {\n-            throw std::runtime_error(\"Corrupt estimates file. Scale must be non-zero\");\n-        }\n+    filein >> decay;\n+    if (decay <= 0 || decay >= 1) {\n+        throw std::runtime_error(\"Corrupt estimates file. Decay must be between 0 and 1 (non-inclusive)\");\n+    }\n+    filein >> scale;\n+    if (scale == 0) {\n+        throw std::runtime_error(\"Corrupt estimates file. Scale must be non-zero\");\n     }\n \n     filein >> avg;\n@@ -443,20 +441,13 @@ void TxConfirmStats::Read(CAutoFile& filein, int nFileVersion, size_t numBuckets\n         }\n     }\n \n-    if (nFileVersion >= 149900) {\n-        filein >> failAvg;\n-        if (maxPeriods != failAvg.size()) {\n-            throw std::runtime_error(\"Corrupt estimates file. Mismatch in confirms tracked for failures\");\n-        }\n-        for (unsigned int i = 0; i < maxPeriods; i++) {\n-            if (failAvg[i].size() != numBuckets) {\n-                throw std::runtime_error(\"Corrupt estimates file. Mismatch in one of failure average bucket counts\");\n-            }\n-        }\n-    } else {\n-        failAvg.resize(confAvg.size());\n-        for (unsigned int i = 0; i < failAvg.size(); i++) {\n-            failAvg[i].resize(numBuckets);\n+    filein >> failAvg;\n+    if (maxPeriods != failAvg.size()) {\n+        throw std::runtime_error(\"Corrupt estimates file. Mismatch in confirms tracked for failures\");\n+    }\n+    for (unsigned int i = 0; i < maxPeriods; i++) {\n+        if (failAvg[i].size() != numBuckets) {\n+            throw std::runtime_error(\"Corrupt estimates file. Mismatch in one of failure average bucket counts\");\n         }\n     }\n \n@@ -563,7 +554,7 @@ void CBlockPolicyEstimator::processTransaction(const CTxMemPoolEntry& entry, boo\n     if (mapMemPoolTxs.count(hash)) {\n         LogPrint(BCLog::ESTIMATEFEE, \"Blockpolicy error mempool tx %s already being tracked\\n\",\n                  hash.ToString().c_str());\n-\treturn;\n+        return;\n     }\n \n     if (txHeight != nBestSeenHeight) {"
      }
    ]
  }
]