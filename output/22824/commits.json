[
  {
    "sha": "0bd882b7405414b5355e69a9fdcd7a533e504b6b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYmQ4ODJiNzQwNTQxNGI1MzU1ZTY5YTlmZGNkN2E1MzNlNTA0YjZi",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-08-28T09:51:36Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-08-29T11:31:00Z"
      },
      "message": "refactor: remove RecursiveMutex cs_nBlockSequenceId\n\nThe RecursiveMutex cs_nBlockSequenceId is only used at one place in\nCChainState::ReceivedBlockTransactions() to atomically read-and-increment the\nnBlockSequenceId member. At this point, the cs_main lock is set, hence we can\nuse a plain int for the member and mark it as guarded by cs_main.",
      "tree": {
        "sha": "6d92233604ced925614e70eebc05160a16e8f1ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6d92233604ced925614e70eebc05160a16e8f1ec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0bd882b7405414b5355e69a9fdcd7a533e504b6b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bd882b7405414b5355e69a9fdcd7a533e504b6b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0bd882b7405414b5355e69a9fdcd7a533e504b6b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bd882b7405414b5355e69a9fdcd7a533e504b6b/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "33707a2a8828c68e3c0586bdadea52c84873d386",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33707a2a8828c68e3c0586bdadea52c84873d386",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/33707a2a8828c68e3c0586bdadea52c84873d386"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 3,
      "deletions": 7
    },
    "files": [
      {
        "sha": "9944e31557619993c3e092c6cd265caaa40242a2",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0bd882b7405414b5355e69a9fdcd7a533e504b6b/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0bd882b7405414b5355e69a9fdcd7a533e504b6b/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=0bd882b7405414b5355e69a9fdcd7a533e504b6b",
        "patch": "@@ -2970,10 +2970,7 @@ void CChainState::ReceivedBlockTransactions(const CBlock& block, CBlockIndex* pi\n             CBlockIndex *pindex = queue.front();\n             queue.pop_front();\n             pindex->nChainTx = (pindex->pprev ? pindex->pprev->nChainTx : 0) + pindex->nTx;\n-            {\n-                LOCK(cs_nBlockSequenceId);\n-                pindex->nSequenceId = nBlockSequenceId++;\n-            }\n+            pindex->nSequenceId = nBlockSequenceId++;\n             if (m_chain.Tip() == nullptr || !setBlockIndexCandidates.value_comp()(pindex, m_chain.Tip())) {\n                 setBlockIndexCandidates.insert(pindex);\n             }"
      },
      {
        "sha": "ef48156309d5e4832890e33d4180f6bbb1f23f90",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0bd882b7405414b5355e69a9fdcd7a533e504b6b/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0bd882b7405414b5355e69a9fdcd7a533e504b6b/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=0bd882b7405414b5355e69a9fdcd7a533e504b6b",
        "patch": "@@ -558,9 +558,8 @@ class CChainState\n      * Every received block is assigned a unique and increasing identifier, so we\n      * know which one to give priority in case of a fork.\n      */\n-    RecursiveMutex cs_nBlockSequenceId;\n     /** Blocks loaded from disk are assigned id 0, so start the counter at 1. */\n-    int32_t nBlockSequenceId = 1;\n+    int32_t nBlockSequenceId GUARDED_BY(::cs_main) = 1;\n     /** Decreasing counter (used by subsequent preciousblock calls). */\n     int32_t nBlockReverseSequenceId = -1;\n     /** chainwork for the last block that preciousblock has been applied to. */\n@@ -749,7 +748,7 @@ class CChainState\n \n     void PruneBlockIndexCandidates();\n \n-    void UnloadBlockIndex();\n+    void UnloadBlockIndex() EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n     /** Check whether we are doing an initial block download (synchronizing from disk or network) */\n     bool IsInitialBlockDownload() const;"
      }
    ]
  }
]