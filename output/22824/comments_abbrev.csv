hebasto,2021-08-28 10:20:26,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/22824#issuecomment-907605906,907605906,
Zero-1729,2021-08-28 11:47:41,Concept ACK,https://github.com/bitcoin/bitcoin/pull/22824#issuecomment-907615228,907615228,
MarcoFalke,2021-08-28 14:11:41,"As this is only accessed in one place (that already has cs_main), it would also be possible to make it a plain int",https://github.com/bitcoin/bitcoin/pull/22824#issuecomment-907631944,907631944,
hebasto,2021-08-28 14:16:04,"> As this is only accessed in one place (that already has cs_main), it would also be possible to make it a plain int\n\nDoesn't it make code fragile for future changes?",https://github.com/bitcoin/bitcoin/pull/22824#issuecomment-907632468,907632468,
DrahtBot,2021-08-29 04:01:18,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22564](https://github.com/bitcoin/bitcoin/pull/22564) ([WIP] refactor: Move mutable globals cleared in `::UnloadBlockInd",https://github.com/bitcoin/bitcoin/pull/22824#issuecomment-907725204,907725204,
MarcoFalke,2021-08-29 07:33:59,"> Doesn't it make code fragile for future changes?\n\nHow?",https://github.com/bitcoin/bitcoin/pull/22824#issuecomment-907745161,907745161,
hebasto,2021-08-29 07:37:26,"> > Doesn't it make code fragile for future changes?\n> \n> How?\n\nAnother access to the variable will be added in a new place, but the variable remains plain `int32_t`.",https://github.com/bitcoin/bitcoin/pull/22824#issuecomment-907745503,907745503,
MarcoFalke,2021-08-29 08:08:54,"We are using lock annotations to protect against this, no?",https://github.com/bitcoin/bitcoin/pull/22824#issuecomment-907749215,907749215,
hebasto,2021-08-29 08:13:17,"> We are using lock annotations to protect against this, no?\n\nThread safety annotations go with a mutex. Without a mutex (this PR) nothing will guard the access to a plain `int32_t`, no?",https://github.com/bitcoin/bitcoin/pull/22824#issuecomment-907749740,907749740,
MarcoFalke,2021-08-29 09:10:56,"Yes, I mentioned the validation mutex `cs_main`, which seems fine because the block's sequence is only used by validation.",https://github.com/bitcoin/bitcoin/pull/22824#issuecomment-907757320,907757320,
hebasto,2021-08-29 11:00:57,"@MarcoFalke \n> Yes, I mentioned the validation mutex `cs_main`, which seems fine because the block's sequence is only used by validation.\n\nYou are right. The following change:\n```diff\ndiff --git a/src/validation.cpp b/src/validation.cpp\nindex ec457da5c..9944e3155 100644\n--- a/src/validation.cpp\n+++ b/src/validation.cpp\n@@ -2970,10 +2970,7 @@ void CChainState::ReceivedBlockTransac",https://github.com/bitcoin/bitcoin/pull/22824#issuecomment-907772202,907772202,
theStack,2021-08-29 11:38:21,"@MarcoFalke @hebasto: Thanks, that makes sense. I agree, considering that `CChainState::ReceivedBlockTransactions()` holds cs_main (which I wasn't aware of before), just using a plain int and marking it as guarded by cs_main is preferred.\n\nUpdated PR title and description, force-pushed with the suggested change.",https://github.com/bitcoin/bitcoin/pull/22824#issuecomment-907777231,907777231,
jonatack,2021-08-30 09:28:00,"Markdown `<strike></strike>` markup doesn't translate well to text formatting in the merge commit description. Seems good not to rely on markdown in the PR description for it to make sense, especially strike-through formatting. ",https://github.com/bitcoin/bitcoin/pull/22824#issuecomment-908190497,908190497,
