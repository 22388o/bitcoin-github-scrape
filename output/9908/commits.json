[
  {
    "sha": "e57a1fd8999800b3fc744d45bb96354cae294032",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNTdhMWZkODk5OTgwMGIzZmM3NDRkNDViYjk2MzU0Y2FlMjk0MDMy",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-03-02T17:20:34Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-03-03T18:51:41Z"
      },
      "message": "Define 7200 second timestamp window constant",
      "tree": {
        "sha": "e3c79a873e1f83eefe2f86506b87125a9c02679a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e3c79a873e1f83eefe2f86506b87125a9c02679a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e57a1fd8999800b3fc744d45bb96354cae294032",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e57a1fd8999800b3fc744d45bb96354cae294032",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e57a1fd8999800b3fc744d45bb96354cae294032",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e57a1fd8999800b3fc744d45bb96354cae294032/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3fabae742567ecc060618c23d5fc01518fe96e60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fabae742567ecc060618c23d5fc01518fe96e60",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3fabae742567ecc060618c23d5fc01518fe96e60"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 27,
      "deletions": 13
    },
    "files": [
      {
        "sha": "64e0eec61e2031a7ce7298f8e85529907653fea7",
        "filename": "qa/rpc-tests/import-rescan.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e57a1fd8999800b3fc744d45bb96354cae294032/qa/rpc-tests/import-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e57a1fd8999800b3fc744d45bb96354cae294032/qa/rpc-tests/import-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/import-rescan.py?ref=e57a1fd8999800b3fc744d45bb96354cae294032",
        "patch": "@@ -56,7 +56,7 @@ def do_import(self, timestamp):\n                 \"scriptPubKey\": {\n                     \"address\": self.address[\"address\"]\n                 },\n-                \"timestamp\": timestamp + RESCAN_WINDOW + (1 if self.rescan == Rescan.late_timestamp else 0),\n+                \"timestamp\": timestamp + TIMESTAMP_WINDOW + (1 if self.rescan == Rescan.late_timestamp else 0),\n                 \"pubkeys\": [self.address[\"pubkey\"]] if self.data == Data.pub else [],\n                 \"keys\": [self.key] if self.data == Data.priv else [],\n                 \"label\": self.label,\n@@ -108,7 +108,7 @@ def check(self, txid=None, amount=None, confirmations=None):\n IMPORT_NODES = [ImportNode(*fields) for fields in itertools.product((False, True), repeat=2)]\n \n # Rescans start at the earliest block up to 2 hours before the key timestamp.\n-RESCAN_WINDOW = 2 * 60 * 60\n+TIMESTAMP_WINDOW = 2 * 60 * 60\n \n \n class ImportRescanTest(BitcoinTestFramework):\n@@ -141,7 +141,7 @@ def run_test(self):\n         self.nodes[0].generate(1)\n         assert_equal(self.nodes[0].getrawmempool(), [])\n         timestamp = self.nodes[0].getblockheader(self.nodes[0].getbestblockhash())[\"time\"]\n-        set_node_times(self.nodes, timestamp + RESCAN_WINDOW + 1)\n+        set_node_times(self.nodes, timestamp + TIMESTAMP_WINDOW + 1)\n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n "
      },
      {
        "sha": "d4924d058c1214dcc6b750ede1e0efa2acd842e7",
        "filename": "qa/rpc-tests/pruning.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e57a1fd8999800b3fc744d45bb96354cae294032/qa/rpc-tests/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e57a1fd8999800b3fc744d45bb96354cae294032/qa/rpc-tests/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/pruning.py?ref=e57a1fd8999800b3fc744d45bb96354cae294032",
        "patch": "@@ -19,7 +19,7 @@\n # Rescans start at the earliest block up to 2 hours before a key timestamp, so\n # the manual prune RPC avoids pruning blocks in the same window to be\n # compatible with pruning based on key creation time.\n-RESCAN_WINDOW = 2 * 60 * 60\n+TIMESTAMP_WINDOW = 2 * 60 * 60\n \n \n def calc_usage(blockdir):\n@@ -242,7 +242,7 @@ def manual_test(self, node_number, use_timestamp):\n \n         def height(index):\n             if use_timestamp:\n-                return node.getblockheader(node.getblockhash(index))[\"time\"] + RESCAN_WINDOW\n+                return node.getblockheader(node.getblockhash(index))[\"time\"] + TIMESTAMP_WINDOW\n             else:\n                 return index\n "
      },
      {
        "sha": "eab4d5c58a2c651c792b6a61c559edcd30cd14f6",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e57a1fd8999800b3fc744d45bb96354cae294032/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e57a1fd8999800b3fc744d45bb96354cae294032/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=e57a1fd8999800b3fc744d45bb96354cae294032",
        "patch": "@@ -14,6 +14,20 @@\n \n #include <vector>\n \n+/**\n+ * Maximum amount of time that a block timestamp is allowed to exceed the\n+ * current network-adjusted time before the block will be accepted.\n+ */\n+static const int64_t MAX_FUTURE_BLOCK_TIME = 2 * 60 * 60;\n+\n+/**\n+ * Timestamp window used as a grace period by code that compares external\n+ * timestamps (such as timestamps passed to RPCs, or wallet key creation times)\n+ * to block timestamps. This should be set at least as high as\n+ * MAX_FUTURE_BLOCK_TIME.\n+ */\n+static const int64_t TIMESTAMP_WINDOW = MAX_FUTURE_BLOCK_TIME;\n+\n class CBlockFileInfo\n {\n public:"
      },
      {
        "sha": "dd46a3c3ba3a61f06d771afbe24c42d9d78be8f7",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e57a1fd8999800b3fc744d45bb96354cae294032/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e57a1fd8999800b3fc744d45bb96354cae294032/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=e57a1fd8999800b3fc744d45bb96354cae294032",
        "patch": "@@ -846,7 +846,7 @@ UniValue pruneblockchain(const JSONRPCRequest& request)\n     // too low to be a block time (corresponds to timestamp from Sep 2001).\n     if (heightParam > 1000000000) {\n         // Add a 2 hour buffer to include blocks which might have had old timestamps\n-        CBlockIndex* pindex = chainActive.FindEarliestAtLeast(heightParam - 7200);\n+        CBlockIndex* pindex = chainActive.FindEarliestAtLeast(heightParam - TIMESTAMP_WINDOW);\n         if (!pindex) {\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Could not find block with at least the specified timestamp.\");\n         }"
      },
      {
        "sha": "e09eba1aca400d51662596ffc83b8ef644536447",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e57a1fd8999800b3fc744d45bb96354cae294032/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e57a1fd8999800b3fc744d45bb96354cae294032/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=e57a1fd8999800b3fc744d45bb96354cae294032",
        "patch": "@@ -2983,7 +2983,7 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n         return state.Invalid(false, REJECT_INVALID, \"time-too-old\", \"block's timestamp is too early\");\n \n     // Check timestamp\n-    if (block.GetBlockTime() > nAdjustedTime + 2 * 60 * 60)\n+    if (block.GetBlockTime() > nAdjustedTime + MAX_FUTURE_BLOCK_TIME)\n         return state.Invalid(false, REJECT_INVALID, \"time-too-new\", \"block timestamp too far in the future\");\n \n     // Reject outdated version blocks when 95% (75% on testnet) of the network has upgraded:"
      },
      {
        "sha": "550eff0c7d72fe7099596fb29981c450d03e5694",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e57a1fd8999800b3fc744d45bb96354cae294032/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e57a1fd8999800b3fc744d45bb96354cae294032/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=e57a1fd8999800b3fc744d45bb96354cae294032",
        "patch": "@@ -497,7 +497,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n     pwalletMain->ShowProgress(\"\", 100); // hide progress dialog in GUI\n \n     CBlockIndex *pindex = chainActive.Tip();\n-    while (pindex && pindex->pprev && pindex->GetBlockTime() > nTimeBegin - 7200)\n+    while (pindex && pindex->pprev && pindex->GetBlockTime() > nTimeBegin - TIMESTAMP_WINDOW)\n         pindex = pindex->pprev;\n \n     pwalletMain->UpdateTimeFirstKey(nTimeBegin);\n@@ -1073,7 +1073,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n     }\n \n     if (fRescan && fRunScan && requests.size()) {\n-        CBlockIndex* pindex = nLowestTimestamp > minimumTimestamp ? chainActive.FindEarliestAtLeast(std::max<int64_t>(nLowestTimestamp - 7200, 0)) : chainActive.Genesis();\n+        CBlockIndex* pindex = nLowestTimestamp > minimumTimestamp ? chainActive.FindEarliestAtLeast(std::max<int64_t>(nLowestTimestamp - TIMESTAMP_WINDOW, 0)) : chainActive.Genesis();\n         CBlockIndex* scannedRange = nullptr;\n         if (pindex) {\n             scannedRange = pwalletMain->ScanForWalletTransactions(pindex, true);\n@@ -1090,7 +1090,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n                 // range, or if the import result already has an error set, let\n                 // the result stand unmodified. Otherwise replace the result\n                 // with an error message.\n-                if (GetImportTimestamp(request, now) - 7200 >= scannedRange->GetBlockTimeMax() || results.at(i).exists(\"error\")) {\n+                if (GetImportTimestamp(request, now) - TIMESTAMP_WINDOW >= scannedRange->GetBlockTimeMax() || results.at(i).exists(\"error\")) {\n                     response.push_back(results.at(i));\n                 } else {\n                     UniValue result = UniValue(UniValue::VOBJ);"
      },
      {
        "sha": "34a06085479555d78c6b0aef4e6063e224581106",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e57a1fd8999800b3fc744d45bb96354cae294032/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e57a1fd8999800b3fc744d45bb96354cae294032/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=e57a1fd8999800b3fc744d45bb96354cae294032",
        "patch": "@@ -415,7 +415,7 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n         CKey futureKey;\n         futureKey.MakeNewKey(true);\n         key.pushKV(\"scriptPubKey\", HexStr(GetScriptForRawPubKey(futureKey.GetPubKey())));\n-        key.pushKV(\"timestamp\", newTip->GetBlockTimeMax() + 7200);\n+        key.pushKV(\"timestamp\", newTip->GetBlockTimeMax() + TIMESTAMP_WINDOW);\n         key.pushKV(\"internal\", UniValue(true));\n         keys.push_back(key);\n         JSONRPCRequest request;"
      },
      {
        "sha": "2a9142d5e263c35c8eed0c0c0900ef072460140a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e57a1fd8999800b3fc744d45bb96354cae294032/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e57a1fd8999800b3fc744d45bb96354cae294032/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e57a1fd8999800b3fc744d45bb96354cae294032",
        "patch": "@@ -1562,7 +1562,7 @@ CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool f\n \n         // no need to read and scan block, if block was created before\n         // our wallet birthday (as adjusted for block time variability)\n-        while (pindex && nTimeFirstKey && (pindex->GetBlockTime() < (nTimeFirstKey - 7200)))\n+        while (pindex && nTimeFirstKey && (pindex->GetBlockTime() < (nTimeFirstKey - TIMESTAMP_WINDOW)))\n             pindex = chainActive.Next(pindex);\n \n         ShowProgress(_(\"Rescanning...\"), 0); // show rescan progress in GUI as dialog or on splashscreen, if -rescan on startup\n@@ -3490,7 +3490,7 @@ void CWallet::GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) c\n \n     // Extract block timestamps for those keys\n     for (std::map<CKeyID, CBlockIndex*>::const_iterator it = mapKeyFirstBlock.begin(); it != mapKeyFirstBlock.end(); it++)\n-        mapKeyBirth[it->first] = it->second->GetBlockTime() - 7200; // block times can be 2h off\n+        mapKeyBirth[it->first] = it->second->GetBlockTime() - TIMESTAMP_WINDOW; // block times can be 2h off\n }\n \n bool CWallet::AddDestData(const CTxDestination &dest, const std::string &key, const std::string &value)"
      }
    ]
  }
]