practicalswift,2020-08-14 15:43:28,"@Crypt-iQ While you're at it touching `crypto_chacha20_poly1305_aead.cpp`, would you mind fixing this one too? :)\n\n```\ntest/fuzz/crypto_chacha20_poly1305_aead.cpp:50:27: runtime error: unsigned integer overflow: 18446744073709551615 + 1 cannot be represented in type 'unsigned long'\n```\n\n(Line 50 is after applying this patch.)\n\nBase64 encoded test case:\n\n```\nAOcDAAAKI0q6uhoA/w",https://github.com/bitcoin/bitcoin/pull/19713#issuecomment-674136519,674136519,
Crypt-iQ,2020-08-15 22:18:16,"There is one other complaint in the fuzz directory:\nhttps://github.com/bitcoin/bitcoin/blob/3ab2582c7fe76d2839ab493512758d5601903c86/src/test/fuzz/pow.cpp#L45-L47\n```\ntest/fuzz/pow.cpp:46:39: runtime error: implicit conversion from type 'long' of value 4294967712 (64-bit, signed) to type 'uint32_t' (aka 'unsigned int')      changed the value to 416 (32-bit, unsigned)\n```\nNot entirely sur",https://github.com/bitcoin/bitcoin/pull/19713#issuecomment-674452610,674452610,
practicalswift,2020-08-17 07:48:34,"> Not entirely sure what value to set `current_block.nTime` to in that scenario. Also it can overflow via multiplication _or_ addition.\n\nPerhaps you can use `MultiplicationOverflow` and `AdditionOverflow` (both in `test/fuzz/util.h`) to guard against the overflows? :)\n",https://github.com/bitcoin/bitcoin/pull/19713#issuecomment-674721010,674721010,
Crypt-iQ,2020-08-18 11:46:11,"Get this complaint on macOS Catalina v10.15.4 with `clang version 10.0.1` (installed via `brew install llvm`):\n```\n/usr/local/Cellar/llvm/10.0.1/bin/../include/c++/v1/memory:1876:35: runtime error: implicit conversion from type 'char' of value -41 (8-bit, signed) to type 'unsigned char' changed the value to 215 (8-bit, unsigned)\n    #0 0x1075d43ff in std::__1::vector<unsigned char, std::__1:",https://github.com/bitcoin/bitcoin/pull/19713#issuecomment-675430197,675430197,
adaminsky,2020-08-19 17:25:56,I can reproduce this on macOS 10.15.5 with clang installed from `brew install llvm`.,https://github.com/bitcoin/bitcoin/pull/19713#issuecomment-676558801,676558801,
Crypt-iQ,2020-08-20 00:50:38,@adaminsky what are the options you pass to `configure`?,https://github.com/bitcoin/bitcoin/pull/19713#issuecomment-676833426,676833426,
adaminsky,2020-08-20 01:35:27,"@Crypt-iQ I used `./configure --enable-fuzz --with-sanitizers=fuzzer,integer CC=/usr/local/opt/llvm/bin/clang CXX=/usr/local/opt/llvm/bin/clang++ --disable-asm`.",https://github.com/bitcoin/bitcoin/pull/19713#issuecomment-676844953,676844953,
DrahtBot,2020-08-20 20:34:36,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20828 (fuzz: Introduce CallOneOf helper to replace switch-case by MarcoFalke)\n* #17791 (Remove UBSan suppressions for CT",https://github.com/bitcoin/bitcoin/pull/19713#issuecomment-677889726,677889726,
Crypt-iQ,2020-08-22 05:59:22,"@adaminsky If you also run with:\n```\nUBSAN_OPTIONS=""suppressions=test/sanitizer_suppressions/ubsan:print_stacktrace=1:report_error_type=1"" src/test/fuzz/pow ~/qa-assets/fuzz_seed_corpus/pow\n```\n\nDo you also get the following complaint?\n```\n/usr/local/opt/llvm/bin/../include/c++/v1/memory:1876:35: runtime error: implicit conversion from type 'unsigned char' of value 215 (8-bit, unsign",https://github.com/bitcoin/bitcoin/pull/19713#issuecomment-678600169,678600169,
Crypt-iQ,2020-08-22 12:12:03,These two complaints happen because `char` is signed by default with our Mac setups. Ubuntu box reports no errors.,https://github.com/bitcoin/bitcoin/pull/19713#issuecomment-678633030,678633030,
Crypt-iQ,2020-08-23 14:20:02,"The [first complaint](https://github.com/bitcoin/bitcoin/pull/19713#issuecomment-675430197) happens because of the conversion from `std::string` (which is `std::basic_string<char>`) to `std::vector<uint8_t>` here:\nhttps://github.com/bitcoin/bitcoin/blob/197450f80868fe752c6107955e5da80704212b34/src/test/fuzz/util.h#L35-L39\n\nThe [second complaint](https://github.com/bitcoin/bitcoin/pull/19713#",https://github.com/bitcoin/bitcoin/pull/19713#issuecomment-678780185,678780185,
adaminsky,2020-08-24 07:21:55,@Crypt-iQ Confirming that I can reproduce both complaints and that `char` is signed for me. ,https://github.com/bitcoin/bitcoin/pull/19713#issuecomment-678955537,678955537,
DrahtBot,2021-01-14 10:17:11,"<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/19713#issuecomment-760099802,760099802,
Crypt-iQ,2021-02-14 15:46:53,Closed by #21000 ,https://github.com/bitcoin/bitcoin/pull/19713#issuecomment-778796064,778796064,
practicalswift,2020-08-29 05:40:08,In the case of wrap-around I think we want to set `seqnr_payload = 0` emulating how it used to work prior to this change (but without the UBSan complaint since we're explicitly opting in to the wrap-around).,https://github.com/bitcoin/bitcoin/pull/19713#discussion_r479611353,479611353,src/test/fuzz/crypto_chacha20_poly1305_aead.cpp
practicalswift,2020-08-29 05:40:19,Same here.,https://github.com/bitcoin/bitcoin/pull/19713#discussion_r479611376,479611376,src/test/fuzz/crypto_chacha20_poly1305_aead.cpp
practicalswift,2020-08-29 05:46:26,"Doing this will make the coverage achieved by running the seed corpus depend on if `char` is signed or not.\n\nI don't think that is cost worth paying to suppress wrap-around warnings. I suggest adding a `test/sanitizer_suppressions/ubsan` suppression instead :)",https://github.com/bitcoin/bitcoin/pull/19713#discussion_r479611840,479611840,src/test/fuzz/util.h
practicalswift,2020-08-29 05:48:33,"I'm afraid changing `ConsumeRandomLengthByteVector` this way will invalidate quite a few seeds in our seed corpus.\n\nI don't think that is cost worth paying to suppress wrap-around warnings. I suggest adding a test/sanitizer_suppressions/ubsan suppression instead and leave `ConsumeRandomLengthByteVector` unchanged :)",https://github.com/bitcoin/bitcoin/pull/19713#discussion_r479611977,479611977,src/test/fuzz/util.h
Crypt-iQ,2020-09-01 05:27:28,"But if a suppression is added for `*/include/c++/*/memory.h` then other legitimate complaints will also be suppressed. As a temporary measure it works, but I think eventually it would be ideal to have the least amount of suppressions possible?",https://github.com/bitcoin/bitcoin/pull/19713#discussion_r480831247,480831247,src/test/fuzz/util.h
Crypt-iQ,2020-09-01 19:46:36,Suppression added.,https://github.com/bitcoin/bitcoin/pull/19713#discussion_r481390222,481390222,src/test/fuzz/util.h
