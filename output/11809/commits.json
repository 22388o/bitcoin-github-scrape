[
  {
    "sha": "f05d34988719b22ef5c64888f90b4c8f3a2c7931",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMDVkMzQ5ODg3MTliMjJlZjVjNjQ4ODhmOTBiNGM4ZjNhMmM3OTMx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-01T11:08:31Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-12-07T16:34:16Z"
      },
      "message": "gui: Fix proxy setting options dialog crash\n\nThis fixes a crash bug when opening the options dialog.\n\n- Check the return value of split() to avoid segmentation faults due to\n  out of bounds when the user manages to enter invalid proxy settings.\n  This is reported resonably often.\n\n- Move the default proxy/port to a constant instead of hardcoding magic\n  values.\n\n- Factor out some common code.\n\n- Revert #11448 because this proves a more robust replacement, it is no\n  longer necessary and didn't generally solve the issue.\n\nNo attempt is made to do full sanity checking on the proxy, so it can\nstill be rejected by the core with an InitError message.",
      "tree": {
        "sha": "caf39100cf1aa4cf7c1447908c5d6fd429c8ea70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/caf39100cf1aa4cf7c1447908c5d6fd429c8ea70"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f05d34988719b22ef5c64888f90b4c8f3a2c7931",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f05d34988719b22ef5c64888f90b4c8f3a2c7931",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f05d34988719b22ef5c64888f90b4c8f3a2c7931",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f05d34988719b22ef5c64888f90b4c8f3a2c7931/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "16fff802574159286e424802442551dc9eba9098",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16fff802574159286e424802442551dc9eba9098",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/16fff802574159286e424802442551dc9eba9098"
      }
    ],
    "stats": {
      "total": 114,
      "additions": 61,
      "deletions": 53
    },
    "files": [
      {
        "sha": "a0f78d5ead3aa41d2477acf96897ead77c92ac37",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f05d34988719b22ef5c64888f90b4c8f3a2c7931/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f05d34988719b22ef5c64888f90b4c8f3a2c7931/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=f05d34988719b22ef5c64888f90b4c8f3a2c7931",
        "patch": "@@ -338,7 +338,7 @@ QValidator::State ProxyAddressValidator::validate(QString &input, int &pos) cons\n {\n     Q_UNUSED(pos);\n     // Validate the proxy\n-    CService serv(LookupNumeric(input.toStdString().c_str(), 9050));\n+    CService serv(LookupNumeric(input.toStdString().c_str(), DEFAULT_GUI_PROXY_PORT));\n     proxyType addrProxy = proxyType(serv, true);\n     if (addrProxy.IsValid())\n         return QValidator::Acceptable;"
      },
      {
        "sha": "52b4d4e42e531604bd3f8cbbbcc08d4129423a93",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 57,
        "deletions": 52,
        "changes": 109,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f05d34988719b22ef5c64888f90b4c8f3a2c7931/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f05d34988719b22ef5c64888f90b4c8f3a2c7931/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=f05d34988719b22ef5c64888f90b4c8f3a2c7931",
        "patch": "@@ -28,6 +28,8 @@\n #include <QSettings>\n #include <QStringList>\n \n+const char *DEFAULT_GUI_PROXY_HOST = \"127.0.0.1\";\n+\n OptionsModel::OptionsModel(QObject *parent, bool resetSettings) :\n     QAbstractListModel(parent)\n {\n@@ -124,8 +126,8 @@ void OptionsModel::Init(bool resetSettings)\n \n     if (!settings.contains(\"fUseProxy\"))\n         settings.setValue(\"fUseProxy\", false);\n-    if (!settings.contains(\"addrProxy\") || !settings.value(\"addrProxy\").toString().contains(':'))\n-        settings.setValue(\"addrProxy\", \"127.0.0.1:9050\");\n+    if (!settings.contains(\"addrProxy\"))\n+        settings.setValue(\"addrProxy\", QString(\"%1:%2\").arg(DEFAULT_GUI_PROXY_HOST, DEFAULT_GUI_PROXY_PORT));\n     // Only try to set -proxy, if user has enabled fUseProxy\n     if (settings.value(\"fUseProxy\").toBool() && !gArgs.SoftSetArg(\"-proxy\", settings.value(\"addrProxy\").toString().toStdString()))\n         addOverriddenOption(\"-proxy\");\n@@ -134,8 +136,8 @@ void OptionsModel::Init(bool resetSettings)\n \n     if (!settings.contains(\"fUseSeparateProxyTor\"))\n         settings.setValue(\"fUseSeparateProxyTor\", false);\n-    if (!settings.contains(\"addrSeparateProxyTor\") || !settings.value(\"addrSeparateProxyTor\").toString().contains(':'))\n-        settings.setValue(\"addrSeparateProxyTor\", \"127.0.0.1:9050\");\n+    if (!settings.contains(\"addrSeparateProxyTor\"))\n+        settings.setValue(\"addrSeparateProxyTor\", QString(\"%1:%2\").arg(DEFAULT_GUI_PROXY_HOST, DEFAULT_GUI_PROXY_PORT));\n     // Only try to set -onion, if user has enabled fUseSeparateProxyTor\n     if (settings.value(\"fUseSeparateProxyTor\").toBool() && !gArgs.SoftSetArg(\"-onion\", settings.value(\"addrSeparateProxyTor\").toString().toStdString()))\n         addOverriddenOption(\"-onion\");\n@@ -200,6 +202,33 @@ int OptionsModel::rowCount(const QModelIndex & parent) const\n     return OptionIDRowCount;\n }\n \n+struct ProxySetting {\n+    bool is_set;\n+    QString ip;\n+    QString port;\n+};\n+\n+static ProxySetting GetProxySetting(QSettings &settings, const QString &name)\n+{\n+    static const ProxySetting default_val = {false, DEFAULT_GUI_PROXY_HOST, QString(\"%1\").arg(DEFAULT_GUI_PROXY_PORT)};\n+    // Handle the case that the setting is not set at all\n+    if (!settings.contains(name)) {\n+        return default_val;\n+    }\n+    // contains IP at index 0 and port at index 1\n+    QStringList ip_port = settings.value(name).toString().split(\":\", QString::SkipEmptyParts);\n+    if (ip_port.size() == 2) {\n+        return {true, ip_port.at(0), ip_port.at(1)};\n+    } else { // Invalid: return default\n+        return default_val;\n+    }\n+}\n+\n+static void SetProxySetting(QSettings &settings, const QString &name, const ProxySetting &ip_port)\n+{\n+    settings.setValue(name, ip_port.ip + \":\" + ip_port.port);\n+}\n+\n // read QSettings values and return them\n QVariant OptionsModel::data(const QModelIndex & index, int role) const\n {\n@@ -226,30 +255,18 @@ QVariant OptionsModel::data(const QModelIndex & index, int role) const\n         // default proxy\n         case ProxyUse:\n             return settings.value(\"fUseProxy\", false);\n-        case ProxyIP: {\n-            // contains IP at index 0 and port at index 1\n-            QStringList strlIpPort = settings.value(\"addrProxy\").toString().split(\":\", QString::SkipEmptyParts);\n-            return strlIpPort.at(0);\n-        }\n-        case ProxyPort: {\n-            // contains IP at index 0 and port at index 1\n-            QStringList strlIpPort = settings.value(\"addrProxy\").toString().split(\":\", QString::SkipEmptyParts);\n-            return strlIpPort.at(1);\n-        }\n+        case ProxyIP:\n+            return GetProxySetting(settings, \"addrProxy\").ip;\n+        case ProxyPort:\n+            return GetProxySetting(settings, \"addrProxy\").port;\n \n         // separate Tor proxy\n         case ProxyUseTor:\n             return settings.value(\"fUseSeparateProxyTor\", false);\n-        case ProxyIPTor: {\n-            // contains IP at index 0 and port at index 1\n-            QStringList strlIpPort = settings.value(\"addrSeparateProxyTor\").toString().split(\":\", QString::SkipEmptyParts);\n-            return strlIpPort.at(0);\n-        }\n-        case ProxyPortTor: {\n-            // contains IP at index 0 and port at index 1\n-            QStringList strlIpPort = settings.value(\"addrSeparateProxyTor\").toString().split(\":\", QString::SkipEmptyParts);\n-            return strlIpPort.at(1);\n-        }\n+        case ProxyIPTor:\n+            return GetProxySetting(settings, \"addrSeparateProxyTor\").ip;\n+        case ProxyPortTor:\n+            return GetProxySetting(settings, \"addrSeparateProxyTor\").port;\n \n #ifdef ENABLE_WALLET\n         case SpendZeroConfChange:\n@@ -314,25 +331,19 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n             }\n             break;\n         case ProxyIP: {\n-            // contains current IP at index 0 and current port at index 1\n-            QStringList strlIpPort = settings.value(\"addrProxy\").toString().split(\":\", QString::SkipEmptyParts);\n-            // if that key doesn't exist or has a changed IP\n-            if (!settings.contains(\"addrProxy\") || strlIpPort.at(0) != value.toString()) {\n-                // construct new value from new IP and current port\n-                QString strNewValue = value.toString() + \":\" + strlIpPort.at(1);\n-                settings.setValue(\"addrProxy\", strNewValue);\n+            auto ip_port = GetProxySetting(settings, \"addrProxy\");\n+            if (!ip_port.is_set || ip_port.ip != value.toString()) {\n+                ip_port.ip = value.toString();\n+                SetProxySetting(settings, \"addrProxy\", ip_port);\n                 setRestartRequired(true);\n             }\n         }\n         break;\n         case ProxyPort: {\n-            // contains current IP at index 0 and current port at index 1\n-            QStringList strlIpPort = settings.value(\"addrProxy\").toString().split(\":\", QString::SkipEmptyParts);\n-            // if that key doesn't exist or has a changed port\n-            if (!settings.contains(\"addrProxy\") || strlIpPort.at(1) != value.toString()) {\n-                // construct new value from current IP and new port\n-                QString strNewValue = strlIpPort.at(0) + \":\" + value.toString();\n-                settings.setValue(\"addrProxy\", strNewValue);\n+            auto ip_port = GetProxySetting(settings, \"addrProxy\");\n+            if (!ip_port.is_set || ip_port.port != value.toString()) {\n+                ip_port.port = value.toString();\n+                SetProxySetting(settings, \"addrProxy\", ip_port);\n                 setRestartRequired(true);\n             }\n         }\n@@ -346,25 +357,19 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n             }\n             break;\n         case ProxyIPTor: {\n-            // contains current IP at index 0 and current port at index 1\n-            QStringList strlIpPort = settings.value(\"addrSeparateProxyTor\").toString().split(\":\", QString::SkipEmptyParts);\n-            // if that key doesn't exist or has a changed IP\n-            if (!settings.contains(\"addrSeparateProxyTor\") || strlIpPort.at(0) != value.toString()) {\n-                // construct new value from new IP and current port\n-                QString strNewValue = value.toString() + \":\" + strlIpPort.at(1);\n-                settings.setValue(\"addrSeparateProxyTor\", strNewValue);\n+            auto ip_port = GetProxySetting(settings, \"addrSeparateProxyTor\");\n+            if (!ip_port.is_set || ip_port.ip != value.toString()) {\n+                ip_port.ip = value.toString();\n+                SetProxySetting(settings, \"addrSeparateProxyTor\", ip_port);\n                 setRestartRequired(true);\n             }\n         }\n         break;\n         case ProxyPortTor: {\n-            // contains current IP at index 0 and current port at index 1\n-            QStringList strlIpPort = settings.value(\"addrSeparateProxyTor\").toString().split(\":\", QString::SkipEmptyParts);\n-            // if that key doesn't exist or has a changed port\n-            if (!settings.contains(\"addrSeparateProxyTor\") || strlIpPort.at(1) != value.toString()) {\n-                // construct new value from current IP and new port\n-                QString strNewValue = strlIpPort.at(0) + \":\" + value.toString();\n-                settings.setValue(\"addrSeparateProxyTor\", strNewValue);\n+            auto ip_port = GetProxySetting(settings, \"addrSeparateProxyTor\");\n+            if (!ip_port.is_set || ip_port.port != value.toString()) {\n+                ip_port.port = value.toString();\n+                SetProxySetting(settings, \"addrSeparateProxyTor\", ip_port);\n                 setRestartRequired(true);\n             }\n         }"
      },
      {
        "sha": "f8782dd204e5d8f054fd16cf4b2bb1add02c4389",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f05d34988719b22ef5c64888f90b4c8f3a2c7931/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f05d34988719b22ef5c64888f90b4c8f3a2c7931/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=f05d34988719b22ef5c64888f90b4c8f3a2c7931",
        "patch": "@@ -13,6 +13,9 @@ QT_BEGIN_NAMESPACE\n class QNetworkProxy;\n QT_END_NAMESPACE\n \n+extern const char *DEFAULT_GUI_PROXY_HOST;\n+static constexpr unsigned short DEFAULT_GUI_PROXY_PORT = 9050;\n+\n /** Interface from Qt to configuration data structure for Bitcoin client.\n    To Qt, the options are presented as a list with the different options\n    laid out vertically."
      }
    ]
  }
]