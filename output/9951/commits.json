[
  {
    "sha": "71afe3c0995592ff17968816a833a8ed3ce05bf2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MWFmZTNjMDk5NTU5MmZmMTc5Njg4MTZhODMzYThlZDNjZTA1YmYy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-03-08T10:48:58Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-04-20T15:15:30Z"
      },
      "message": "wallet: Introduce database handle wrapper\n\nAbstract database handle from explicit strFilename into\nCWalletDBWrapper.\n\nAlso move CWallet::Backup to db.cpp - as it deals with representation\ndetails this is a database specific operation.",
      "tree": {
        "sha": "84df1ac80d58db77464e500bf152a41bace9a4ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/84df1ac80d58db77464e500bf152a41bace9a4ac"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/71afe3c0995592ff17968816a833a8ed3ce05bf2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71afe3c0995592ff17968816a833a8ed3ce05bf2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/71afe3c0995592ff17968816a833a8ed3ce05bf2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71afe3c0995592ff17968816a833a8ed3ce05bf2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "987a6c09562e1e1e9d6623b999ae9de268490e4b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/987a6c09562e1e1e9d6623b999ae9de268490e4b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/987a6c09562e1e1e9d6623b999ae9de268490e4b"
      }
    ],
    "stats": {
      "total": 268,
      "additions": 171,
      "deletions": 97
    },
    "files": [
      {
        "sha": "a0dce3d997e357d0db6f78a38dfd0a33542d4601",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71afe3c0995592ff17968816a833a8ed3ce05bf2/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71afe3c0995592ff17968816a833a8ed3ce05bf2/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=71afe3c0995592ff17968816a833a8ed3ce05bf2",
        "patch": "@@ -86,7 +86,8 @@ void WalletTests::walletTests()\n     TestChain100Setup test;\n     test.CreateAndProcessBlock({}, GetScriptForRawPubKey(test.coinbaseKey.GetPubKey()));\n     bitdb.MakeMock();\n-    CWallet wallet(\"wallet_test.dat\");\n+    std::unique_ptr<CWalletDBWrapper> dbw(new CWalletDBWrapper(&bitdb, \"wallet_test.dat\"));\n+    CWallet wallet(std::move(dbw));\n     bool firstRun;\n     wallet.LoadWallet(firstRun);\n     {"
      },
      {
        "sha": "cdf785a957ba9237f434320a41bd59b20989ac30",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 52,
        "deletions": 6,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71afe3c0995592ff17968816a833a8ed3ce05bf2/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71afe3c0995592ff17968816a833a8ed3ce05bf2/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=71afe3c0995592ff17968816a833a8ed3ce05bf2",
        "patch": "@@ -359,13 +359,12 @@ void CDBEnv::CheckpointLSN(const std::string& strFile)\n }\n \n \n-CDB::CDB(const std::string& strFilename, const char* pszMode, bool fFlushOnCloseIn) : pdb(NULL), activeTxn(NULL)\n+CDB::CDB(CWalletDBWrapper& dbw, const char* pszMode, bool fFlushOnCloseIn) : pdb(NULL), activeTxn(NULL)\n {\n     int ret;\n     fReadOnly = (!strchr(pszMode, '+') && !strchr(pszMode, 'w'));\n     fFlushOnClose = fFlushOnCloseIn;\n-    if (strFilename.empty())\n-        return;\n+    const std::string& strFilename = dbw.strFile;\n \n     bool fCreate = strchr(pszMode, 'c') != NULL;\n     unsigned int nFlags = DB_THREAD;\n@@ -472,8 +471,12 @@ bool CDBEnv::RemoveDb(const std::string& strFile)\n     return (rc == 0);\n }\n \n-bool CDB::Rewrite(const std::string& strFile, const char* pszSkip)\n+bool CDB::Rewrite(CWalletDBWrapper& dbw, const char* pszSkip)\n {\n+    if (!dbw.env) {\n+        return true;\n+    }\n+    const std::string& strFile = dbw.strFile;\n     while (true) {\n         {\n             LOCK(bitdb.cs_db);\n@@ -487,7 +490,7 @@ bool CDB::Rewrite(const std::string& strFile, const char* pszSkip)\n                 LogPrintf(\"CDB::Rewrite: Rewriting %s...\\n\", strFile);\n                 std::string strFileRes = strFile + \".rewrite\";\n                 { // surround usage of db with extra {}\n-                    CDB db(strFile.c_str(), \"r\");\n+                    CDB db(dbw, \"r\");\n                     Db* pdbCopy = new Db(bitdb.dbenv, 0);\n \n                     int ret = pdbCopy->open(NULL,               // Txn pointer\n@@ -596,9 +599,10 @@ void CDBEnv::Flush(bool fShutdown)\n     }\n }\n \n-bool CDB::PeriodicFlush(std::string strFile)\n+bool CDB::PeriodicFlush(CWalletDBWrapper& dbw)\n {\n     bool ret = false;\n+    const std::string& strFile = dbw.strFile;\n     TRY_LOCK(bitdb.cs_db,lockDb);\n     if (lockDb)\n     {\n@@ -633,3 +637,45 @@ bool CDB::PeriodicFlush(std::string strFile)\n \n     return ret;\n }\n+\n+bool CWalletDBWrapper::Rewrite(const char* pszSkip)\n+{\n+    return CDB::Rewrite(*this, pszSkip);\n+}\n+\n+bool CWalletDBWrapper::Backup(const std::string& strDest)\n+{\n+    if (!env) {\n+        return false;\n+    }\n+    while (true)\n+    {\n+        {\n+            LOCK(bitdb.cs_db);\n+            if (!bitdb.mapFileUseCount.count(strFile) || bitdb.mapFileUseCount[strFile] == 0)\n+            {\n+                // Flush log data to the dat file\n+                bitdb.CloseDb(strFile);\n+                bitdb.CheckpointLSN(strFile);\n+                bitdb.mapFileUseCount.erase(strFile);\n+\n+                // Copy wallet file\n+                fs::path pathSrc = GetDataDir() / strFile;\n+                fs::path pathDest(strDest);\n+                if (fs::is_directory(pathDest))\n+                    pathDest /= strFile;\n+\n+                try {\n+                    fs::copy_file(pathSrc, pathDest, fs::copy_option::overwrite_if_exists);\n+                    LogPrintf(\"copied %s to %s\\n\", strFile, pathDest.string());\n+                    return true;\n+                } catch (const fs::filesystem_error& e) {\n+                    LogPrintf(\"error copying %s to %s - %s\\n\", strFile, pathDest.string(), e.what());\n+                    return false;\n+                }\n+            }\n+        }\n+        MilliSleep(100);\n+    }\n+    return false;\n+}"
      },
      {
        "sha": "f6d0d54114fb45edc8532de324f140975ebaf52d",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 33,
        "deletions": 3,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71afe3c0995592ff17968816a833a8ed3ce05bf2/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71afe3c0995592ff17968816a833a8ed3ce05bf2/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=71afe3c0995592ff17968816a833a8ed3ce05bf2",
        "patch": "@@ -86,6 +86,36 @@ class CDBEnv\n \n extern CDBEnv bitdb;\n \n+/** An instance of this class represents one database.\n+ * For BerkeleyDB this is just a (env, strFile) tuple.\n+ **/\n+class CWalletDBWrapper\n+{\n+    friend class CDB;\n+public:\n+    CWalletDBWrapper(CDBEnv *env_in, const std::string &strFile_in):\n+        env(env_in), strFile(strFile_in)\n+    {\n+    }\n+\n+    /** Rewrite the entire database on disk, with the exception of key pszSkip if non-zero\n+     */\n+    bool Rewrite(const char* pszSkip=nullptr);\n+\n+    /** Back up the entire database to a file.\n+     */\n+    bool Backup(const std::string& strDest);\n+\n+    /** Get a name for this database, for debugging etc.\n+     */\n+    std::string GetName() const { return strFile; }\n+\n+private:\n+    /** BerkeleyDB specific */\n+    CDBEnv *env;\n+    std::string strFile;\n+};\n+\n \n /** RAII class that provides access to a Berkeley database */\n class CDB\n@@ -97,7 +127,7 @@ class CDB\n     bool fReadOnly;\n     bool fFlushOnClose;\n \n-    explicit CDB(const std::string& strFilename, const char* pszMode = \"r+\", bool fFlushOnCloseIn=true);\n+    explicit CDB(CWalletDBWrapper& dbw, const char* pszMode = \"r+\", bool fFlushOnCloseIn=true);\n     ~CDB() { Close(); }\n \n public:\n@@ -107,7 +137,7 @@ class CDB\n \n     /* flush the wallet passively (TRY_LOCK)\n        ideal to be called periodically */\n-    static bool PeriodicFlush(std::string strFile);\n+    static bool PeriodicFlush(CWalletDBWrapper& dbw);\n     /* verifies the database environment */\n     static bool VerifyEnvironment(const std::string& walletFile, const fs::path& dataDir, std::string& errorStr);\n     /* verifies the database file */\n@@ -310,7 +340,7 @@ class CDB\n         return Write(std::string(\"version\"), nVersion);\n     }\n \n-    bool static Rewrite(const std::string& strFile, const char* pszSkip = NULL);\n+    bool static Rewrite(CWalletDBWrapper& dbw, const char* pszSkip = NULL);\n };\n \n #endif // BITCOIN_WALLET_DB_H"
      },
      {
        "sha": "7408806b7df7b3322e4b94b4cd979c49e92c9ab1",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71afe3c0995592ff17968816a833a8ed3ce05bf2/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71afe3c0995592ff17968816a833a8ed3ce05bf2/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=71afe3c0995592ff17968816a833a8ed3ce05bf2",
        "patch": "@@ -2076,7 +2076,7 @@ UniValue walletpassphrase(const JSONRPCRequest& request)\n \n     int64_t nSleepTime = request.params[1].get_int64();\n     pwallet->nRelockTime = GetTime() + nSleepTime;\n-    RPCRunLater(strprintf(\"lockwallet(%s)\", pwallet->strWalletFile), boost::bind(LockWallet, pwallet), nSleepTime);\n+    RPCRunLater(strprintf(\"lockwallet(%s)\", pwallet->GetName()), boost::bind(LockWallet, pwallet), nSleepTime);\n \n     return NullUniValue;\n }"
      },
      {
        "sha": "1989bf8d9b96e85e17d3d3759f4da0ab6556f0b0",
        "filename": "src/wallet/test/wallet_test_fixture.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71afe3c0995592ff17968816a833a8ed3ce05bf2/src/wallet/test/wallet_test_fixture.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71afe3c0995592ff17968816a833a8ed3ce05bf2/src/wallet/test/wallet_test_fixture.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.cpp?ref=71afe3c0995592ff17968816a833a8ed3ce05bf2",
        "patch": "@@ -14,7 +14,8 @@ WalletTestingSetup::WalletTestingSetup(const std::string& chainName):\n     bitdb.MakeMock();\n \n     bool fFirstRun;\n-    pwalletMain = new CWallet(\"wallet_test.dat\");\n+    std::unique_ptr<CWalletDBWrapper> dbw(new CWalletDBWrapper(&bitdb, \"wallet_test.dat\"));\n+    pwalletMain = new CWallet(std::move(dbw));\n     pwalletMain->LoadWallet(fFirstRun);\n     RegisterValidationInterface(pwalletMain);\n "
      },
      {
        "sha": "5b03b00179a445f6f57bab53f105de5659e4787d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 78,
        "changes": 129,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71afe3c0995592ff17968816a833a8ed3ce05bf2/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71afe3c0995592ff17968816a833a8ed3ce05bf2/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=71afe3c0995592ff17968816a833a8ed3ce05bf2",
        "patch": "@@ -161,7 +161,7 @@ void CWallet::DeriveNewChildKey(CKeyMetadata& metadata, CKey& secret, bool inter\n     secret = childKey.key;\n     metadata.hdMasterKeyID = hdChain.masterKeyID;\n     // update the chain model in the database\n-    if (!CWalletDB(strWalletFile).WriteHDChain(hdChain))\n+    if (!CWalletDB(*dbw).WriteHDChain(hdChain))\n         throw std::runtime_error(std::string(__func__) + \": Writing HD chain model failed\");\n }\n \n@@ -183,7 +183,7 @@ bool CWallet::AddKeyPubKey(const CKey& secret, const CPubKey &pubkey)\n     if (!fFileBacked)\n         return true;\n     if (!IsCrypted()) {\n-        return CWalletDB(strWalletFile).WriteKey(pubkey,\n+        return CWalletDB(*dbw).WriteKey(pubkey,\n                                                  secret.GetPrivKey(),\n                                                  mapKeyMetadata[pubkey.GetID()]);\n     }\n@@ -204,7 +204,7 @@ bool CWallet::AddCryptedKey(const CPubKey &vchPubKey,\n                                                         vchCryptedSecret,\n                                                         mapKeyMetadata[vchPubKey.GetID()]);\n         else\n-            return CWalletDB(strWalletFile).WriteCryptedKey(vchPubKey,\n+            return CWalletDB(*dbw).WriteCryptedKey(vchPubKey,\n                                                             vchCryptedSecret,\n                                                             mapKeyMetadata[vchPubKey.GetID()]);\n     }\n@@ -242,7 +242,7 @@ bool CWallet::AddCScript(const CScript& redeemScript)\n         return false;\n     if (!fFileBacked)\n         return true;\n-    return CWalletDB(strWalletFile).WriteCScript(Hash160(redeemScript), redeemScript);\n+    return CWalletDB(*dbw).WriteCScript(Hash160(redeemScript), redeemScript);\n }\n \n bool CWallet::LoadCScript(const CScript& redeemScript)\n@@ -270,7 +270,7 @@ bool CWallet::AddWatchOnly(const CScript& dest)\n     NotifyWatchonlyChanged(true);\n     if (!fFileBacked)\n         return true;\n-    return CWalletDB(strWalletFile).WriteWatchOnly(dest, meta);\n+    return CWalletDB(*dbw).WriteWatchOnly(dest, meta);\n }\n \n bool CWallet::AddWatchOnly(const CScript& dest, int64_t nCreateTime)\n@@ -287,7 +287,7 @@ bool CWallet::RemoveWatchOnly(const CScript &dest)\n     if (!HaveWatchOnly())\n         NotifyWatchonlyChanged(false);\n     if (fFileBacked)\n-        if (!CWalletDB(strWalletFile).EraseWatchOnly(dest))\n+        if (!CWalletDB(*dbw).EraseWatchOnly(dest))\n             return false;\n \n     return true;\n@@ -353,7 +353,7 @@ bool CWallet::ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase,\n                     return false;\n                 if (!crypter.Encrypt(_vMasterKey, pMasterKey.second.vchCryptedKey))\n                     return false;\n-                CWalletDB(strWalletFile).WriteMasterKey(pMasterKey.first, pMasterKey.second);\n+                CWalletDB(*dbw).WriteMasterKey(pMasterKey.first, pMasterKey.second);\n                 if (fWasLocked)\n                     Lock();\n                 return true;\n@@ -366,7 +366,7 @@ bool CWallet::ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase,\n \n void CWallet::SetBestChain(const CBlockLocator& loc)\n {\n-    CWalletDB walletdb(strWalletFile);\n+    CWalletDB walletdb(*dbw);\n     walletdb.WriteBestBlock(loc);\n }\n \n@@ -387,7 +387,7 @@ bool CWallet::SetMinVersion(enum WalletFeature nVersion, CWalletDB* pwalletdbIn,\n \n     if (fFileBacked)\n     {\n-        CWalletDB* pwalletdb = pwalletdbIn ? pwalletdbIn : new CWalletDB(strWalletFile);\n+        CWalletDB* pwalletdb = pwalletdbIn ? pwalletdbIn : new CWalletDB(*dbw);\n         if (nWalletVersion > 40000)\n             pwalletdb->WriteMinVersion(nWalletVersion);\n         if (!pwalletdbIn)\n@@ -597,7 +597,7 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n         if (fFileBacked)\n         {\n             assert(!pwalletdbEncryption);\n-            pwalletdbEncryption = new CWalletDB(strWalletFile);\n+            pwalletdbEncryption = new CWalletDB(*dbw);\n             if (!pwalletdbEncryption->TxnBegin()) {\n                 delete pwalletdbEncryption;\n                 pwalletdbEncryption = NULL;\n@@ -651,7 +651,7 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n \n         // Need to completely rewrite the wallet file; if we don't, bdb might keep\n         // bits of the unencrypted private key in slack space in the database file.\n-        CDB::Rewrite(strWalletFile);\n+        dbw->Rewrite();\n \n     }\n     NotifyStatusChanged(this);\n@@ -662,7 +662,7 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n DBErrors CWallet::ReorderTransactions()\n {\n     LOCK(cs_wallet);\n-    CWalletDB walletdb(strWalletFile);\n+    CWalletDB walletdb(*dbw);\n \n     // Old wallets didn't have any defined order for transactions\n     // Probably a bad idea to change the output of this\n@@ -743,14 +743,14 @@ int64_t CWallet::IncOrderPosNext(CWalletDB *pwalletdb)\n     if (pwalletdb) {\n         pwalletdb->WriteOrderPosNext(nOrderPosNext);\n     } else {\n-        CWalletDB(strWalletFile).WriteOrderPosNext(nOrderPosNext);\n+        CWalletDB(*dbw).WriteOrderPosNext(nOrderPosNext);\n     }\n     return nRet;\n }\n \n bool CWallet::AccountMove(std::string strFrom, std::string strTo, CAmount nAmount, std::string strComment)\n {\n-    CWalletDB walletdb(strWalletFile);\n+    CWalletDB walletdb(*dbw);\n     if (!walletdb.TxnBegin())\n         return false;\n \n@@ -784,7 +784,7 @@ bool CWallet::AccountMove(std::string strFrom, std::string strTo, CAmount nAmoun\n \n bool CWallet::GetAccountPubkey(CPubKey &pubKey, std::string strAccount, bool bForceNew)\n {\n-    CWalletDB walletdb(strWalletFile);\n+    CWalletDB walletdb(*dbw);\n \n     CAccount account;\n     walletdb.ReadAccount(strAccount, account);\n@@ -845,7 +845,7 @@ bool CWallet::MarkReplaced(const uint256& originalHash, const uint256& newHash)\n \n     wtx.mapValue[\"replaced_by_txid\"] = newHash.ToString();\n \n-    CWalletDB walletdb(strWalletFile, \"r+\");\n+    CWalletDB walletdb(*dbw, \"r+\");\n \n     bool success = true;\n     if (!walletdb.WriteTx(wtx)) {\n@@ -862,7 +862,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n {\n     LOCK(cs_wallet);\n \n-    CWalletDB walletdb(strWalletFile, \"r+\", fFlushOnClose);\n+    CWalletDB walletdb(*dbw, \"r+\", fFlushOnClose);\n \n     uint256 hash = wtxIn.GetHash();\n \n@@ -1006,7 +1006,7 @@ bool CWallet::AbandonTransaction(const uint256& hashTx)\n {\n     LOCK2(cs_main, cs_wallet);\n \n-    CWalletDB walletdb(strWalletFile, \"r+\");\n+    CWalletDB walletdb(*dbw, \"r+\");\n \n     std::set<uint256> todo;\n     std::set<uint256> done;\n@@ -1078,7 +1078,7 @@ void CWallet::MarkConflicted(const uint256& hashBlock, const uint256& hashTx)\n         return;\n \n     // Do not flush the wallet here for performance reasons\n-    CWalletDB walletdb(strWalletFile, \"r+\", false);\n+    CWalletDB walletdb(*dbw, \"r+\", false);\n \n     std::set<uint256> todo;\n     std::set<uint256> done;\n@@ -1361,7 +1361,7 @@ bool CWallet::SetHDMasterKey(const CPubKey& pubkey, CHDChain *possibleOldChain)\n bool CWallet::SetHDChain(const CHDChain& chain, bool memonly)\n {\n     LOCK(cs_wallet);\n-    if (!memonly && !CWalletDB(strWalletFile).WriteHDChain(chain))\n+    if (!memonly && !CWalletDB(*dbw).WriteHDChain(chain))\n         throw std::runtime_error(std::string(__func__) + \": writing chain failed\");\n \n     hdChain = chain;\n@@ -2758,13 +2758,13 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey, CCon\n }\n \n void CWallet::ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& entries) {\n-    CWalletDB walletdb(strWalletFile);\n+    CWalletDB walletdb(*dbw);\n     return walletdb.ListAccountCreditDebit(strAccount, entries);\n }\n \n bool CWallet::AddAccountingEntry(const CAccountingEntry& acentry)\n {\n-    CWalletDB walletdb(strWalletFile);\n+    CWalletDB walletdb(*dbw);\n \n     return AddAccountingEntry(acentry, &walletdb);\n }\n@@ -2819,10 +2819,10 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n     if (!fFileBacked)\n         return DB_LOAD_OK;\n     fFirstRunRet = false;\n-    DBErrors nLoadWalletRet = CWalletDB(strWalletFile,\"cr+\").LoadWallet(this);\n+    DBErrors nLoadWalletRet = CWalletDB(*dbw,\"cr+\").LoadWallet(this);\n     if (nLoadWalletRet == DB_NEED_REWRITE)\n     {\n-        if (CDB::Rewrite(strWalletFile, \"\\x04pool\"))\n+        if (dbw->Rewrite(\"\\x04pool\"))\n         {\n             LOCK(cs_wallet);\n             setKeyPool.clear();\n@@ -2847,13 +2847,13 @@ DBErrors CWallet::ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256\n         return DB_LOAD_OK;\n     AssertLockHeld(cs_wallet); // mapWallet\n     vchDefaultKey = CPubKey();\n-    DBErrors nZapSelectTxRet = CWalletDB(strWalletFile,\"cr+\").ZapSelectTx(vHashIn, vHashOut);\n+    DBErrors nZapSelectTxRet = CWalletDB(*dbw,\"cr+\").ZapSelectTx(vHashIn, vHashOut);\n     for (uint256 hash : vHashOut)\n         mapWallet.erase(hash);\n \n     if (nZapSelectTxRet == DB_NEED_REWRITE)\n     {\n-        if (CDB::Rewrite(strWalletFile, \"\\x04pool\"))\n+        if (dbw->Rewrite(\"\\x04pool\"))\n         {\n             setKeyPool.clear();\n             // Note: can't top-up keypool here, because wallet is locked.\n@@ -2876,10 +2876,10 @@ DBErrors CWallet::ZapWalletTx(std::vector<CWalletTx>& vWtx)\n     if (!fFileBacked)\n         return DB_LOAD_OK;\n     vchDefaultKey = CPubKey();\n-    DBErrors nZapWalletTxRet = CWalletDB(strWalletFile,\"cr+\").ZapWalletTx(vWtx);\n+    DBErrors nZapWalletTxRet = CWalletDB(*dbw,\"cr+\").ZapWalletTx(vWtx);\n     if (nZapWalletTxRet == DB_NEED_REWRITE)\n     {\n-        if (CDB::Rewrite(strWalletFile, \"\\x04pool\"))\n+        if (dbw->Rewrite(\"\\x04pool\"))\n         {\n             LOCK(cs_wallet);\n             setKeyPool.clear();\n@@ -2911,9 +2911,9 @@ bool CWallet::SetAddressBook(const CTxDestination& address, const std::string& s\n                              strPurpose, (fUpdated ? CT_UPDATED : CT_NEW) );\n     if (!fFileBacked)\n         return false;\n-    if (!strPurpose.empty() && !CWalletDB(strWalletFile).WritePurpose(CBitcoinAddress(address).ToString(), strPurpose))\n+    if (!strPurpose.empty() && !CWalletDB(*dbw).WritePurpose(CBitcoinAddress(address).ToString(), strPurpose))\n         return false;\n-    return CWalletDB(strWalletFile).WriteName(CBitcoinAddress(address).ToString(), strName);\n+    return CWalletDB(*dbw).WriteName(CBitcoinAddress(address).ToString(), strName);\n }\n \n bool CWallet::DelAddressBook(const CTxDestination& address)\n@@ -2927,7 +2927,7 @@ bool CWallet::DelAddressBook(const CTxDestination& address)\n             std::string strAddress = CBitcoinAddress(address).ToString();\n             BOOST_FOREACH(const PAIRTYPE(std::string, std::string) &item, mapAddressBook[address].destdata)\n             {\n-                CWalletDB(strWalletFile).EraseDestData(strAddress, item.first);\n+                CWalletDB(*dbw).EraseDestData(strAddress, item.first);\n             }\n         }\n         mapAddressBook.erase(address);\n@@ -2937,15 +2937,15 @@ bool CWallet::DelAddressBook(const CTxDestination& address)\n \n     if (!fFileBacked)\n         return false;\n-    CWalletDB(strWalletFile).ErasePurpose(CBitcoinAddress(address).ToString());\n-    return CWalletDB(strWalletFile).EraseName(CBitcoinAddress(address).ToString());\n+    CWalletDB(*dbw).ErasePurpose(CBitcoinAddress(address).ToString());\n+    return CWalletDB(*dbw).EraseName(CBitcoinAddress(address).ToString());\n }\n \n bool CWallet::SetDefaultKey(const CPubKey &vchPubKey)\n {\n     if (fFileBacked)\n     {\n-        if (!CWalletDB(strWalletFile).WriteDefaultKey(vchPubKey))\n+        if (!CWalletDB(*dbw).WriteDefaultKey(vchPubKey))\n             return false;\n     }\n     vchDefaultKey = vchPubKey;\n@@ -2960,7 +2960,7 @@ bool CWallet::NewKeyPool()\n {\n     {\n         LOCK(cs_wallet);\n-        CWalletDB walletdb(strWalletFile);\n+        CWalletDB walletdb(*dbw);\n         BOOST_FOREACH(int64_t nIndex, setKeyPool)\n             walletdb.ErasePool(nIndex);\n         setKeyPool.clear();\n@@ -2981,7 +2981,7 @@ size_t CWallet::KeypoolCountExternalKeys()\n     if (!IsHDEnabled() || !CanSupportFeature(FEATURE_HD_SPLIT))\n         return setKeyPool.size();\n \n-    CWalletDB walletdb(strWalletFile);\n+    CWalletDB walletdb(*dbw);\n \n     // count amount of external keys\n     size_t amountE = 0;\n@@ -3024,7 +3024,7 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n             missingInternal = 0;\n         }\n         bool internal = false;\n-        CWalletDB walletdb(strWalletFile);\n+        CWalletDB walletdb(*dbw);\n         for (int64_t i = missingInternal + missingExternal; i--;)\n         {\n             int64_t nEnd = 1;\n@@ -3055,7 +3055,7 @@ void CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool int\n         if(setKeyPool.empty())\n             return;\n \n-        CWalletDB walletdb(strWalletFile);\n+        CWalletDB walletdb(*dbw);\n \n         // try to find a key that matches the internal/external filter\n         for(const int64_t& id : setKeyPool)\n@@ -3083,7 +3083,7 @@ void CWallet::KeepKey(int64_t nIndex)\n     // Remove from key pool\n     if (fFileBacked)\n     {\n-        CWalletDB walletdb(strWalletFile);\n+        CWalletDB walletdb(*dbw);\n         walletdb.ErasePool(nIndex);\n     }\n     LogPrintf(\"keypool keep %d\\n\", nIndex);\n@@ -3127,7 +3127,7 @@ int64_t CWallet::GetOldestKeyPoolTime()\n         return GetTime();\n \n     CKeyPool keypool;\n-    CWalletDB walletdb(strWalletFile);\n+    CWalletDB walletdb(*dbw);\n \n     if (IsHDEnabled() && CanSupportFeature(FEATURE_HD_SPLIT))\n     {\n@@ -3295,7 +3295,7 @@ std::set< std::set<CTxDestination> > CWallet::GetAddressGroupings()\n \n CAmount CWallet::GetAccountBalance(const std::string& strAccount, int nMinDepth, const isminefilter& filter)\n {\n-    CWalletDB walletdb(strWalletFile);\n+    CWalletDB walletdb(*dbw);\n     return GetAccountBalance(walletdb, strAccount, nMinDepth, filter);\n }\n \n@@ -3375,7 +3375,7 @@ void CWallet::GetAllReserveKeys(std::set<CKeyID>& setAddress) const\n {\n     setAddress.clear();\n \n-    CWalletDB walletdb(strWalletFile);\n+    CWalletDB walletdb(*dbw);\n \n     LOCK2(cs_main, cs_wallet);\n     BOOST_FOREACH(const int64_t& id, setKeyPool)\n@@ -3599,7 +3599,7 @@ bool CWallet::AddDestData(const CTxDestination &dest, const std::string &key, co\n     mapAddressBook[dest].destdata.insert(std::make_pair(key, value));\n     if (!fFileBacked)\n         return true;\n-    return CWalletDB(strWalletFile).WriteDestData(CBitcoinAddress(dest).ToString(), key, value);\n+    return CWalletDB(*dbw).WriteDestData(CBitcoinAddress(dest).ToString(), key, value);\n }\n \n bool CWallet::EraseDestData(const CTxDestination &dest, const std::string &key)\n@@ -3608,7 +3608,7 @@ bool CWallet::EraseDestData(const CTxDestination &dest, const std::string &key)\n         return false;\n     if (!fFileBacked)\n         return true;\n-    return CWalletDB(strWalletFile).EraseDestData(CBitcoinAddress(dest).ToString(), key);\n+    return CWalletDB(*dbw).EraseDestData(CBitcoinAddress(dest).ToString(), key);\n }\n \n bool CWallet::LoadDestData(const CTxDestination &dest, const std::string &key, const std::string &value)\n@@ -3678,7 +3678,8 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n     if (GetBoolArg(\"-zapwallettxes\", false)) {\n         uiInterface.InitMessage(_(\"Zapping all transactions from wallet...\"));\n \n-        CWallet *tempWallet = new CWallet(walletFile);\n+        std::unique_ptr<CWalletDBWrapper> dbw(new CWalletDBWrapper(&bitdb, walletFile));\n+        CWallet *tempWallet = new CWallet(std::move(dbw));\n         DBErrors nZapWalletRet = tempWallet->ZapWalletTx(vWtx);\n         if (nZapWalletRet != DB_LOAD_OK) {\n             InitError(strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile));\n@@ -3693,7 +3694,8 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n \n     int64_t nStart = GetTimeMillis();\n     bool fFirstRun = true;\n-    CWallet *walletInstance = new CWallet(walletFile);\n+    std::unique_ptr<CWalletDBWrapper> dbw(new CWalletDBWrapper(&bitdb, walletFile));\n+    CWallet *walletInstance = new CWallet(std::move(dbw));\n     DBErrors nLoadWalletRet = walletInstance->LoadWallet(fFirstRun);\n     if (nLoadWalletRet != DB_LOAD_OK)\n     {\n@@ -3784,7 +3786,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n     CBlockIndex *pindexRescan = chainActive.Genesis();\n     if (!GetBoolArg(\"-rescan\", false))\n     {\n-        CWalletDB walletdb(walletFile);\n+        CWalletDB walletdb(*walletInstance->dbw);\n         CBlockLocator locator;\n         if (walletdb.ReadBestBlock(locator))\n             pindexRescan = FindForkInGlobalIndex(chainActive, locator);\n@@ -3817,7 +3819,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n         // Restore wallet transaction metadata after -zapwallettxes=1\n         if (GetBoolArg(\"-zapwallettxes\", false) && GetArg(\"-zapwallettxes\", \"1\") != \"2\")\n         {\n-            CWalletDB walletdb(walletFile);\n+            CWalletDB walletdb(*walletInstance->dbw);\n \n             BOOST_FOREACH(const CWalletTx& wtxOld, vWtx)\n             {\n@@ -3979,36 +3981,7 @@ bool CWallet::BackupWallet(const std::string& strDest)\n {\n     if (!fFileBacked)\n         return false;\n-    while (true)\n-    {\n-        {\n-            LOCK(bitdb.cs_db);\n-            if (!bitdb.mapFileUseCount.count(strWalletFile) || bitdb.mapFileUseCount[strWalletFile] == 0)\n-            {\n-                // Flush log data to the dat file\n-                bitdb.CloseDb(strWalletFile);\n-                bitdb.CheckpointLSN(strWalletFile);\n-                bitdb.mapFileUseCount.erase(strWalletFile);\n-\n-                // Copy wallet file\n-                fs::path pathSrc = GetDataDir() / strWalletFile;\n-                fs::path pathDest(strDest);\n-                if (fs::is_directory(pathDest))\n-                    pathDest /= strWalletFile;\n-\n-                try {\n-                    fs::copy_file(pathSrc, pathDest, fs::copy_option::overwrite_if_exists);\n-                    LogPrintf(\"copied %s to %s\\n\", strWalletFile, pathDest.string());\n-                    return true;\n-                } catch (const fs::filesystem_error& e) {\n-                    LogPrintf(\"error copying %s to %s - %s\\n\", strWalletFile, pathDest.string(), e.what());\n-                    return false;\n-                }\n-            }\n-        }\n-        MilliSleep(100);\n-    }\n-    return false;\n+    return dbw->Backup(strDest);\n }\n \n CKeyPool::CKeyPool()"
      },
      {
        "sha": "318aa2bf976846abc3517cf862d04340f047c4fa",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 21,
        "deletions": 3,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71afe3c0995592ff17968816a833a8ed3ce05bf2/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71afe3c0995592ff17968816a833a8ed3ce05bf2/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=71afe3c0995592ff17968816a833a8ed3ce05bf2",
        "patch": "@@ -715,17 +715,35 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      */\n     bool AddWatchOnly(const CScript& dest) override;\n \n+    std::unique_ptr<CWalletDBWrapper> dbw;\n+\n public:\n     /*\n      * Main wallet lock.\n      * This lock protects all the fields added by CWallet\n      *   except for:\n      *      fFileBacked (immutable after instantiation)\n-     *      strWalletFile (immutable after instantiation)\n      */\n     mutable CCriticalSection cs_wallet;\n \n-    const std::string strWalletFile;\n+    /** Get database handle used by this wallet. Ideally this function would\n+     * not be necessary.\n+     */\n+    CWalletDBWrapper& GetDBHandle()\n+    {\n+        return *dbw;\n+    }\n+\n+    /** Get a name for this wallet for logging/debugging purposes.\n+     */\n+    std::string GetName() const\n+    {\n+        if (dbw) {\n+            return dbw->GetName();\n+        } else {\n+            return \"dummy\";\n+        }\n+    }\n \n     void LoadKeyPool(int nIndex, const CKeyPool &keypool)\n     {\n@@ -752,7 +770,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         SetNull();\n     }\n \n-    CWallet(const std::string& strWalletFileIn) : strWalletFile(strWalletFileIn)\n+    CWallet(std::unique_ptr<CWalletDBWrapper> dbw_in) : dbw(std::move(dbw_in))\n     {\n         SetNull();\n         fFileBacked = true;"
      },
      {
        "sha": "6921c9900bd7c42a210825ee1b6cfa69929bf0a6",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71afe3c0995592ff17968816a833a8ed3ce05bf2/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71afe3c0995592ff17968816a833a8ed3ce05bf2/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=71afe3c0995592ff17968816a833a8ed3ce05bf2",
        "patch": "@@ -797,9 +797,9 @@ void MaybeCompactWalletDB()\n \n     if (nLastFlushed != CWalletDB::GetUpdateCounter() && GetTime() - nLastWalletUpdate >= 2)\n     {\n-        const std::string& strFile = pwalletMain->strWalletFile;\n-        if (CDB::PeriodicFlush(strFile))\n+        if (CDB::PeriodicFlush(pwalletMain->GetDBHandle())) {\n             nLastFlushed = CWalletDB::GetUpdateCounter();\n+        }\n     }\n     fOneThread = false;\n }\n@@ -880,3 +880,4 @@ unsigned int CWalletDB::GetUpdateCounter()\n {\n     return nWalletDBUpdateCounter;\n }\n+"
      },
      {
        "sha": "c0135a62929cb27ec9d412ba726663ad9fcbbd3e",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71afe3c0995592ff17968816a833a8ed3ce05bf2/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71afe3c0995592ff17968816a833a8ed3ce05bf2/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=71afe3c0995592ff17968816a833a8ed3ce05bf2",
        "patch": "@@ -118,11 +118,15 @@ class CKeyMetadata\n     }\n };\n \n-/** Access to the wallet database */\n+/** Access to the wallet database.\n+ * This should really be named CWalletDBBatch, as it represents a single transaction at the\n+ * database. It will be committed when the object goes out of scope.\n+ * Optionally (on by default) it will flush to disk as well.\n+ */\n class CWalletDB : public CDB\n {\n public:\n-    CWalletDB(const std::string& strFilename, const char* pszMode = \"r+\", bool _fFlushOnClose = true) : CDB(strFilename, pszMode, _fFlushOnClose)\n+    CWalletDB(CWalletDBWrapper& dbw, const char* pszMode = \"r+\", bool _fFlushOnClose = true) : CDB(dbw, pszMode, _fFlushOnClose)\n     {\n     }\n "
      }
    ]
  },
  {
    "sha": "071c95570b8e2ee5c2a4aed8b86b9b14f8e75578",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNzFjOTU1NzBiOGUyZWU1YzJhNGFlZDhiODZiOWIxNGY4ZTc1NTc4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-03-08T12:08:26Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-04-20T15:15:31Z"
      },
      "message": "wallet: Get rid of fFileBacked\n\nInstead, CWalletDB() with a dummy handle will just give you a no-op\ndatabase in which writes always succeeds and reads always fail. CDB\nalready had functionality for this, so just use that.",
      "tree": {
        "sha": "221b1970c08d70f77b433ca0fc1b3a6457c79f49",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/221b1970c08d70f77b433ca0fc1b3a6457c79f49"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/071c95570b8e2ee5c2a4aed8b86b9b14f8e75578",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/071c95570b8e2ee5c2a4aed8b86b9b14f8e75578",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/071c95570b8e2ee5c2a4aed8b86b9b14f8e75578",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/071c95570b8e2ee5c2a4aed8b86b9b14f8e75578/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "71afe3c0995592ff17968816a833a8ed3ce05bf2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71afe3c0995592ff17968816a833a8ed3ce05bf2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/71afe3c0995592ff17968816a833a8ed3ce05bf2"
      }
    ],
    "stats": {
      "total": 133,
      "additions": 52,
      "deletions": 81
    },
    "files": [
      {
        "sha": "0ea4ea367383a69ed0466e52ec59199558482943",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/071c95570b8e2ee5c2a4aed8b86b9b14f8e75578/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/071c95570b8e2ee5c2a4aed8b86b9b14f8e75578/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=071c95570b8e2ee5c2a4aed8b86b9b14f8e75578",
        "patch": "@@ -364,7 +364,10 @@ CDB::CDB(CWalletDBWrapper& dbw, const char* pszMode, bool fFlushOnCloseIn) : pdb\n     int ret;\n     fReadOnly = (!strchr(pszMode, '+') && !strchr(pszMode, 'w'));\n     fFlushOnClose = fFlushOnCloseIn;\n-    const std::string& strFilename = dbw.strFile;\n+    if (dbw.IsDummy()) {\n+        return;\n+    }\n+    const std::string &strFilename = dbw.strFile;\n \n     bool fCreate = strchr(pszMode, 'c') != NULL;\n     unsigned int nFlags = DB_THREAD;\n@@ -473,7 +476,7 @@ bool CDBEnv::RemoveDb(const std::string& strFile)\n \n bool CDB::Rewrite(CWalletDBWrapper& dbw, const char* pszSkip)\n {\n-    if (!dbw.env) {\n+    if (dbw.IsDummy()) {\n         return true;\n     }\n     const std::string& strFile = dbw.strFile;\n@@ -601,6 +604,9 @@ void CDBEnv::Flush(bool fShutdown)\n \n bool CDB::PeriodicFlush(CWalletDBWrapper& dbw)\n {\n+    if (dbw.IsDummy()) {\n+        return true;\n+    }\n     bool ret = false;\n     const std::string& strFile = dbw.strFile;\n     TRY_LOCK(bitdb.cs_db,lockDb);\n@@ -645,7 +651,7 @@ bool CWalletDBWrapper::Rewrite(const char* pszSkip)\n \n bool CWalletDBWrapper::Backup(const std::string& strDest)\n {\n-    if (!env) {\n+    if (IsDummy()) {\n         return false;\n     }\n     while (true)"
      },
      {
        "sha": "892c8d33c3153a3b82bc7ec2598ed05fb4629695",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/071c95570b8e2ee5c2a4aed8b86b9b14f8e75578/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/071c95570b8e2ee5c2a4aed8b86b9b14f8e75578/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=071c95570b8e2ee5c2a4aed8b86b9b14f8e75578",
        "patch": "@@ -93,6 +93,12 @@ class CWalletDBWrapper\n {\n     friend class CDB;\n public:\n+    /** Create dummy DB handle */\n+    CWalletDBWrapper(): env(nullptr)\n+    {\n+    }\n+\n+    /** Create DB handle to real database */\n     CWalletDBWrapper(CDBEnv *env_in, const std::string &strFile_in):\n         env(env_in), strFile(strFile_in)\n     {\n@@ -110,6 +116,12 @@ class CWalletDBWrapper\n      */\n     std::string GetName() const { return strFile; }\n \n+    /** Return whether this database handle is a dummy for testing.\n+     * Only to be used at a low level, application should ideally not care\n+     * about this.\n+     */\n+    bool IsDummy() { return env == nullptr; }\n+\n private:\n     /** BerkeleyDB specific */\n     CDBEnv *env;\n@@ -186,7 +198,7 @@ class CDB\n     bool Write(const K& key, const T& value, bool fOverwrite = true)\n     {\n         if (!pdb)\n-            return false;\n+            return true;\n         if (fReadOnly)\n             assert(!\"Write called on database in read-only mode\");\n "
      },
      {
        "sha": "a9d5d02c078c55a5fc9570e933320b23941f7dd3",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 69,
        "changes": 95,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/071c95570b8e2ee5c2a4aed8b86b9b14f8e75578/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/071c95570b8e2ee5c2a4aed8b86b9b14f8e75578/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=071c95570b8e2ee5c2a4aed8b86b9b14f8e75578",
        "patch": "@@ -180,8 +180,6 @@ bool CWallet::AddKeyPubKey(const CKey& secret, const CPubKey &pubkey)\n     if (HaveWatchOnly(script))\n         RemoveWatchOnly(script);\n \n-    if (!fFileBacked)\n-        return true;\n     if (!IsCrypted()) {\n         return CWalletDB(*dbw).WriteKey(pubkey,\n                                                  secret.GetPrivKey(),\n@@ -195,8 +193,6 @@ bool CWallet::AddCryptedKey(const CPubKey &vchPubKey,\n {\n     if (!CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret))\n         return false;\n-    if (!fFileBacked)\n-        return true;\n     {\n         LOCK(cs_wallet);\n         if (pwalletdbEncryption)\n@@ -240,8 +236,6 @@ bool CWallet::AddCScript(const CScript& redeemScript)\n {\n     if (!CCryptoKeyStore::AddCScript(redeemScript))\n         return false;\n-    if (!fFileBacked)\n-        return true;\n     return CWalletDB(*dbw).WriteCScript(Hash160(redeemScript), redeemScript);\n }\n \n@@ -268,8 +262,6 @@ bool CWallet::AddWatchOnly(const CScript& dest)\n     const CKeyMetadata& meta = mapKeyMetadata[CScriptID(dest)];\n     UpdateTimeFirstKey(meta.nCreateTime);\n     NotifyWatchonlyChanged(true);\n-    if (!fFileBacked)\n-        return true;\n     return CWalletDB(*dbw).WriteWatchOnly(dest, meta);\n }\n \n@@ -286,9 +278,8 @@ bool CWallet::RemoveWatchOnly(const CScript &dest)\n         return false;\n     if (!HaveWatchOnly())\n         NotifyWatchonlyChanged(false);\n-    if (fFileBacked)\n-        if (!CWalletDB(*dbw).EraseWatchOnly(dest))\n-            return false;\n+    if (!CWalletDB(*dbw).EraseWatchOnly(dest))\n+        return false;\n \n     return true;\n }\n@@ -385,7 +376,6 @@ bool CWallet::SetMinVersion(enum WalletFeature nVersion, CWalletDB* pwalletdbIn,\n     if (nVersion > nWalletMaxVersion)\n         nWalletMaxVersion = nVersion;\n \n-    if (fFileBacked)\n     {\n         CWalletDB* pwalletdb = pwalletdbIn ? pwalletdbIn : new CWalletDB(*dbw);\n         if (nWalletVersion > 40000)\n@@ -594,24 +584,19 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n     {\n         LOCK(cs_wallet);\n         mapMasterKeys[++nMasterKeyMaxID] = kMasterKey;\n-        if (fFileBacked)\n-        {\n-            assert(!pwalletdbEncryption);\n-            pwalletdbEncryption = new CWalletDB(*dbw);\n-            if (!pwalletdbEncryption->TxnBegin()) {\n-                delete pwalletdbEncryption;\n-                pwalletdbEncryption = NULL;\n-                return false;\n-            }\n-            pwalletdbEncryption->WriteMasterKey(nMasterKeyMaxID, kMasterKey);\n+        assert(!pwalletdbEncryption);\n+        pwalletdbEncryption = new CWalletDB(*dbw);\n+        if (!pwalletdbEncryption->TxnBegin()) {\n+            delete pwalletdbEncryption;\n+            pwalletdbEncryption = NULL;\n+            return false;\n         }\n+        pwalletdbEncryption->WriteMasterKey(nMasterKeyMaxID, kMasterKey);\n \n         if (!EncryptKeys(_vMasterKey))\n         {\n-            if (fFileBacked) {\n-                pwalletdbEncryption->TxnAbort();\n-                delete pwalletdbEncryption;\n-            }\n+            pwalletdbEncryption->TxnAbort();\n+            delete pwalletdbEncryption;\n             // We now probably have half of our keys encrypted in memory, and half not...\n             // die and let the user reload the unencrypted wallet.\n             assert(false);\n@@ -620,19 +605,16 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n         // Encryption was introduced in version 0.4.0\n         SetMinVersion(FEATURE_WALLETCRYPT, pwalletdbEncryption, true);\n \n-        if (fFileBacked)\n-        {\n-            if (!pwalletdbEncryption->TxnCommit()) {\n-                delete pwalletdbEncryption;\n-                // We now have keys encrypted in memory, but not on disk...\n-                // die to avoid confusion and let the user reload the unencrypted wallet.\n-                assert(false);\n-            }\n-\n+        if (!pwalletdbEncryption->TxnCommit()) {\n             delete pwalletdbEncryption;\n-            pwalletdbEncryption = NULL;\n+            // We now have keys encrypted in memory, but not on disk...\n+            // die to avoid confusion and let the user reload the unencrypted wallet.\n+            assert(false);\n         }\n \n+        delete pwalletdbEncryption;\n+        pwalletdbEncryption = NULL;\n+\n         Lock();\n         Unlock(strWalletPassphrase);\n \n@@ -2816,8 +2798,6 @@ CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarge\n \n DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n {\n-    if (!fFileBacked)\n-        return DB_LOAD_OK;\n     fFirstRunRet = false;\n     DBErrors nLoadWalletRet = CWalletDB(*dbw,\"cr+\").LoadWallet(this);\n     if (nLoadWalletRet == DB_NEED_REWRITE)\n@@ -2843,8 +2823,6 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n \n DBErrors CWallet::ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut)\n {\n-    if (!fFileBacked)\n-        return DB_LOAD_OK;\n     AssertLockHeld(cs_wallet); // mapWallet\n     vchDefaultKey = CPubKey();\n     DBErrors nZapSelectTxRet = CWalletDB(*dbw,\"cr+\").ZapSelectTx(vHashIn, vHashOut);\n@@ -2873,8 +2851,6 @@ DBErrors CWallet::ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256\n \n DBErrors CWallet::ZapWalletTx(std::vector<CWalletTx>& vWtx)\n {\n-    if (!fFileBacked)\n-        return DB_LOAD_OK;\n     vchDefaultKey = CPubKey();\n     DBErrors nZapWalletTxRet = CWalletDB(*dbw,\"cr+\").ZapWalletTx(vWtx);\n     if (nZapWalletTxRet == DB_NEED_REWRITE)\n@@ -2909,8 +2885,6 @@ bool CWallet::SetAddressBook(const CTxDestination& address, const std::string& s\n     }\n     NotifyAddressBookChanged(this, address, strName, ::IsMine(*this, address) != ISMINE_NO,\n                              strPurpose, (fUpdated ? CT_UPDATED : CT_NEW) );\n-    if (!fFileBacked)\n-        return false;\n     if (!strPurpose.empty() && !CWalletDB(*dbw).WritePurpose(CBitcoinAddress(address).ToString(), strPurpose))\n         return false;\n     return CWalletDB(*dbw).WriteName(CBitcoinAddress(address).ToString(), strName);\n@@ -2921,33 +2895,25 @@ bool CWallet::DelAddressBook(const CTxDestination& address)\n     {\n         LOCK(cs_wallet); // mapAddressBook\n \n-        if(fFileBacked)\n+        // Delete destdata tuples associated with address\n+        std::string strAddress = CBitcoinAddress(address).ToString();\n+        BOOST_FOREACH(const PAIRTYPE(std::string, std::string) &item, mapAddressBook[address].destdata)\n         {\n-            // Delete destdata tuples associated with address\n-            std::string strAddress = CBitcoinAddress(address).ToString();\n-            BOOST_FOREACH(const PAIRTYPE(std::string, std::string) &item, mapAddressBook[address].destdata)\n-            {\n-                CWalletDB(*dbw).EraseDestData(strAddress, item.first);\n-            }\n+            CWalletDB(*dbw).EraseDestData(strAddress, item.first);\n         }\n         mapAddressBook.erase(address);\n     }\n \n     NotifyAddressBookChanged(this, address, \"\", ::IsMine(*this, address) != ISMINE_NO, \"\", CT_DELETED);\n \n-    if (!fFileBacked)\n-        return false;\n     CWalletDB(*dbw).ErasePurpose(CBitcoinAddress(address).ToString());\n     return CWalletDB(*dbw).EraseName(CBitcoinAddress(address).ToString());\n }\n \n bool CWallet::SetDefaultKey(const CPubKey &vchPubKey)\n {\n-    if (fFileBacked)\n-    {\n-        if (!CWalletDB(*dbw).WriteDefaultKey(vchPubKey))\n-            return false;\n-    }\n+    if (!CWalletDB(*dbw).WriteDefaultKey(vchPubKey))\n+        return false;\n     vchDefaultKey = vchPubKey;\n     return true;\n }\n@@ -3081,11 +3047,8 @@ void CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool int\n void CWallet::KeepKey(int64_t nIndex)\n {\n     // Remove from key pool\n-    if (fFileBacked)\n-    {\n-        CWalletDB walletdb(*dbw);\n-        walletdb.ErasePool(nIndex);\n-    }\n+    CWalletDB walletdb(*dbw);\n+    walletdb.ErasePool(nIndex);\n     LogPrintf(\"keypool keep %d\\n\", nIndex);\n }\n \n@@ -3597,17 +3560,13 @@ bool CWallet::AddDestData(const CTxDestination &dest, const std::string &key, co\n         return false;\n \n     mapAddressBook[dest].destdata.insert(std::make_pair(key, value));\n-    if (!fFileBacked)\n-        return true;\n     return CWalletDB(*dbw).WriteDestData(CBitcoinAddress(dest).ToString(), key, value);\n }\n \n bool CWallet::EraseDestData(const CTxDestination &dest, const std::string &key)\n {\n     if (!mapAddressBook[dest].destdata.erase(key))\n         return false;\n-    if (!fFileBacked)\n-        return true;\n     return CWalletDB(*dbw).EraseDestData(CBitcoinAddress(dest).ToString(), key);\n }\n \n@@ -3979,8 +3938,6 @@ bool CWallet::ParameterInteraction()\n \n bool CWallet::BackupWallet(const std::string& strDest)\n {\n-    if (!fFileBacked)\n-        return false;\n     return dbw->Backup(strDest);\n }\n "
      },
      {
        "sha": "8cec04e2e7f2f4e6b2e8e7a47cff310fff1a22dc",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 8,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/071c95570b8e2ee5c2a4aed8b86b9b14f8e75578/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/071c95570b8e2ee5c2a4aed8b86b9b14f8e75578/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=071c95570b8e2ee5c2a4aed8b86b9b14f8e75578",
        "patch": "@@ -698,8 +698,6 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     /* HD derive new child key (on internal or external chain) */\n     void DeriveNewChildKey(CKeyMetadata& metadata, CKey& secret, bool internal = false);\n \n-    bool fFileBacked;\n-\n     std::set<int64_t> setKeyPool;\n \n     int64_t nTimeFirstKey;\n@@ -720,9 +718,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n public:\n     /*\n      * Main wallet lock.\n-     * This lock protects all the fields added by CWallet\n-     *   except for:\n-     *      fFileBacked (immutable after instantiation)\n+     * This lock protects all the fields added by CWallet.\n      */\n     mutable CCriticalSection cs_wallet;\n \n@@ -765,15 +761,16 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     MasterKeyMap mapMasterKeys;\n     unsigned int nMasterKeyMaxID;\n \n-    CWallet()\n+    // Create wallet with dummy database handle\n+    CWallet(): dbw(new CWalletDBWrapper())\n     {\n         SetNull();\n     }\n \n+    // Create wallet with passed-in database handle\n     CWallet(std::unique_ptr<CWalletDBWrapper> dbw_in) : dbw(std::move(dbw_in))\n     {\n         SetNull();\n-        fFileBacked = true;\n     }\n \n     ~CWallet()\n@@ -786,7 +783,6 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     {\n         nWalletVersion = FEATURE_BASE;\n         nWalletMaxVersion = FEATURE_BASE;\n-        fFileBacked = false;\n         nMasterKeyMaxID = 0;\n         pwalletdbEncryption = NULL;\n         nOrderPosNext = 0;"
      }
    ]
  },
  {
    "sha": "be9e1a968debbb7ede8ed50e9288a62ff15d1e1e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZTllMWE5NjhkZWJiYjdlZGU4ZWQ1MGU5Mjg4YTYyZmYxNWQxZTFl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-03-08T13:34:47Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-04-20T15:15:31Z"
      },
      "message": "wallet: Reduce references to global bitdb environment",
      "tree": {
        "sha": "48f4136d2e6cedfba9b2a00b114e96ef6e034ebe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/48f4136d2e6cedfba9b2a00b114e96ef6e034ebe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/be9e1a968debbb7ede8ed50e9288a62ff15d1e1e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be9e1a968debbb7ede8ed50e9288a62ff15d1e1e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/be9e1a968debbb7ede8ed50e9288a62ff15d1e1e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be9e1a968debbb7ede8ed50e9288a62ff15d1e1e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "071c95570b8e2ee5c2a4aed8b86b9b14f8e75578",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/071c95570b8e2ee5c2a4aed8b86b9b14f8e75578",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/071c95570b8e2ee5c2a4aed8b86b9b14f8e75578"
      }
    ],
    "stats": {
      "total": 81,
      "additions": 48,
      "deletions": 33
    },
    "files": [
      {
        "sha": "c810476f968497841ee7c294d198f53e05835f3f",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 32,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be9e1a968debbb7ede8ed50e9288a62ff15d1e1e/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be9e1a968debbb7ede8ed50e9288a62ff15d1e1e/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=be9e1a968debbb7ede8ed50e9288a62ff15d1e1e",
        "patch": "@@ -364,6 +364,7 @@ CDB::CDB(CWalletDBWrapper& dbw, const char* pszMode, bool fFlushOnCloseIn) : pdb\n     int ret;\n     fReadOnly = (!strchr(pszMode, '+') && !strchr(pszMode, 'w'));\n     fFlushOnClose = fFlushOnCloseIn;\n+    env = dbw.env;\n     if (dbw.IsDummy()) {\n         return;\n     }\n@@ -375,17 +376,17 @@ CDB::CDB(CWalletDBWrapper& dbw, const char* pszMode, bool fFlushOnCloseIn) : pdb\n         nFlags |= DB_CREATE;\n \n     {\n-        LOCK(bitdb.cs_db);\n-        if (!bitdb.Open(GetDataDir()))\n+        LOCK(env->cs_db);\n+        if (!env->Open(GetDataDir()))\n             throw std::runtime_error(\"CDB: Failed to open database environment.\");\n \n         strFile = strFilename;\n-        ++bitdb.mapFileUseCount[strFile];\n-        pdb = bitdb.mapDb[strFile];\n+        ++env->mapFileUseCount[strFile];\n+        pdb = env->mapDb[strFile];\n         if (pdb == NULL) {\n-            pdb = new Db(bitdb.dbenv, 0);\n+            pdb = new Db(env->dbenv, 0);\n \n-            bool fMockDb = bitdb.IsMock();\n+            bool fMockDb = env->IsMock();\n             if (fMockDb) {\n                 DbMpoolFile* mpf = pdb->get_mpf();\n                 ret = mpf->set_flags(DB_MPOOL_NOFILE, 1);\n@@ -403,7 +404,7 @@ CDB::CDB(CWalletDBWrapper& dbw, const char* pszMode, bool fFlushOnCloseIn) : pdb\n             if (ret != 0) {\n                 delete pdb;\n                 pdb = NULL;\n-                --bitdb.mapFileUseCount[strFile];\n+                --env->mapFileUseCount[strFile];\n                 strFile = \"\";\n                 throw std::runtime_error(strprintf(\"CDB: Error %d, can't open database %s\", ret, strFilename));\n             }\n@@ -415,7 +416,7 @@ CDB::CDB(CWalletDBWrapper& dbw, const char* pszMode, bool fFlushOnCloseIn) : pdb\n                 fReadOnly = fTmp;\n             }\n \n-            bitdb.mapDb[strFile] = pdb;\n+            env->mapDb[strFile] = pdb;\n         }\n     }\n }\n@@ -430,7 +431,7 @@ void CDB::Flush()\n     if (fReadOnly)\n         nMinutes = 1;\n \n-    bitdb.dbenv->txn_checkpoint(nMinutes ? GetArg(\"-dblogsize\", DEFAULT_WALLET_DBLOGSIZE) * 1024 : 0, nMinutes, 0);\n+    env->dbenv->txn_checkpoint(nMinutes ? GetArg(\"-dblogsize\", DEFAULT_WALLET_DBLOGSIZE) * 1024 : 0, nMinutes, 0);\n }\n \n void CDB::Close()\n@@ -446,8 +447,8 @@ void CDB::Close()\n         Flush();\n \n     {\n-        LOCK(bitdb.cs_db);\n-        --bitdb.mapFileUseCount[strFile];\n+        LOCK(env->cs_db);\n+        --env->mapFileUseCount[strFile];\n     }\n }\n \n@@ -479,22 +480,23 @@ bool CDB::Rewrite(CWalletDBWrapper& dbw, const char* pszSkip)\n     if (dbw.IsDummy()) {\n         return true;\n     }\n+    CDBEnv *env = dbw.env;\n     const std::string& strFile = dbw.strFile;\n     while (true) {\n         {\n-            LOCK(bitdb.cs_db);\n-            if (!bitdb.mapFileUseCount.count(strFile) || bitdb.mapFileUseCount[strFile] == 0) {\n+            LOCK(env->cs_db);\n+            if (!env->mapFileUseCount.count(strFile) || env->mapFileUseCount[strFile] == 0) {\n                 // Flush log data to the dat file\n-                bitdb.CloseDb(strFile);\n-                bitdb.CheckpointLSN(strFile);\n-                bitdb.mapFileUseCount.erase(strFile);\n+                env->CloseDb(strFile);\n+                env->CheckpointLSN(strFile);\n+                env->mapFileUseCount.erase(strFile);\n \n                 bool fSuccess = true;\n                 LogPrintf(\"CDB::Rewrite: Rewriting %s...\\n\", strFile);\n                 std::string strFileRes = strFile + \".rewrite\";\n                 { // surround usage of db with extra {}\n                     CDB db(dbw, \"r\");\n-                    Db* pdbCopy = new Db(bitdb.dbenv, 0);\n+                    Db* pdbCopy = new Db(env->dbenv, 0);\n \n                     int ret = pdbCopy->open(NULL,               // Txn pointer\n                                             strFileRes.c_str(), // Filename\n@@ -537,17 +539,17 @@ bool CDB::Rewrite(CWalletDBWrapper& dbw, const char* pszSkip)\n                         }\n                     if (fSuccess) {\n                         db.Close();\n-                        bitdb.CloseDb(strFile);\n+                        env->CloseDb(strFile);\n                         if (pdbCopy->close(0))\n                             fSuccess = false;\n                         delete pdbCopy;\n                     }\n                 }\n                 if (fSuccess) {\n-                    Db dbA(bitdb.dbenv, 0);\n+                    Db dbA(env->dbenv, 0);\n                     if (dbA.remove(strFile.c_str(), NULL, 0))\n                         fSuccess = false;\n-                    Db dbB(bitdb.dbenv, 0);\n+                    Db dbB(env->dbenv, 0);\n                     if (dbB.rename(strFileRes.c_str(), NULL, strFile.c_str(), 0))\n                         fSuccess = false;\n                 }\n@@ -608,14 +610,15 @@ bool CDB::PeriodicFlush(CWalletDBWrapper& dbw)\n         return true;\n     }\n     bool ret = false;\n+    CDBEnv *env = dbw.env;\n     const std::string& strFile = dbw.strFile;\n     TRY_LOCK(bitdb.cs_db,lockDb);\n     if (lockDb)\n     {\n         // Don't do this if any databases are in use\n         int nRefCount = 0;\n-        std::map<std::string, int>::iterator mit = bitdb.mapFileUseCount.begin();\n-        while (mit != bitdb.mapFileUseCount.end())\n+        std::map<std::string, int>::iterator mit = env->mapFileUseCount.begin();\n+        while (mit != env->mapFileUseCount.end())\n         {\n             nRefCount += (*mit).second;\n             mit++;\n@@ -624,17 +627,17 @@ bool CDB::PeriodicFlush(CWalletDBWrapper& dbw)\n         if (nRefCount == 0)\n         {\n             boost::this_thread::interruption_point();\n-            std::map<std::string, int>::iterator mi = bitdb.mapFileUseCount.find(strFile);\n-            if (mi != bitdb.mapFileUseCount.end())\n+            std::map<std::string, int>::iterator mi = env->mapFileUseCount.find(strFile);\n+            if (mi != env->mapFileUseCount.end())\n             {\n                 LogPrint(BCLog::DB, \"Flushing %s\\n\", strFile);\n                 int64_t nStart = GetTimeMillis();\n \n                 // Flush wallet file so it's self contained\n-                bitdb.CloseDb(strFile);\n-                bitdb.CheckpointLSN(strFile);\n+                env->CloseDb(strFile);\n+                env->CheckpointLSN(strFile);\n \n-                bitdb.mapFileUseCount.erase(mi++);\n+                env->mapFileUseCount.erase(mi++);\n                 LogPrint(BCLog::DB, \"Flushed %s %dms\\n\", strFile, GetTimeMillis() - nStart);\n                 ret = true;\n             }\n@@ -657,13 +660,13 @@ bool CWalletDBWrapper::Backup(const std::string& strDest)\n     while (true)\n     {\n         {\n-            LOCK(bitdb.cs_db);\n-            if (!bitdb.mapFileUseCount.count(strFile) || bitdb.mapFileUseCount[strFile] == 0)\n+            LOCK(env->cs_db);\n+            if (!env->mapFileUseCount.count(strFile) || env->mapFileUseCount[strFile] == 0)\n             {\n                 // Flush log data to the dat file\n-                bitdb.CloseDb(strFile);\n-                bitdb.CheckpointLSN(strFile);\n-                bitdb.mapFileUseCount.erase(strFile);\n+                env->CloseDb(strFile);\n+                env->CheckpointLSN(strFile);\n+                env->mapFileUseCount.erase(strFile);\n \n                 // Copy wallet file\n                 fs::path pathSrc = GetDataDir() / strFile;\n@@ -685,3 +688,10 @@ bool CWalletDBWrapper::Backup(const std::string& strDest)\n     }\n     return false;\n }\n+\n+void CWalletDBWrapper::Flush(bool shutdown)\n+{\n+    if (!IsDummy()) {\n+        env->Flush(shutdown);\n+    }\n+}"
      },
      {
        "sha": "dfce3d76cd5b3581993595da341c1bdc46f94f7a",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be9e1a968debbb7ede8ed50e9288a62ff15d1e1e/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be9e1a968debbb7ede8ed50e9288a62ff15d1e1e/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=be9e1a968debbb7ede8ed50e9288a62ff15d1e1e",
        "patch": "@@ -116,6 +116,10 @@ class CWalletDBWrapper\n      */\n     std::string GetName() const { return strFile; }\n \n+    /** Make sure all changes are flushed to disk.\n+     */\n+    void Flush(bool shutdown);\n+\n     /** Return whether this database handle is a dummy for testing.\n      * Only to be used at a low level, application should ideally not care\n      * about this.\n@@ -138,6 +142,7 @@ class CDB\n     DbTxn* activeTxn;\n     bool fReadOnly;\n     bool fFlushOnClose;\n+    CDBEnv *env;\n \n     explicit CDB(CWalletDBWrapper& dbw, const char* pszMode = \"r+\", bool fFlushOnCloseIn=true);\n     ~CDB() { Close(); }"
      },
      {
        "sha": "cafb6dda1192c56b1ab312716f518f77454e8598",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be9e1a968debbb7ede8ed50e9288a62ff15d1e1e/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be9e1a968debbb7ede8ed50e9288a62ff15d1e1e/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=be9e1a968debbb7ede8ed50e9288a62ff15d1e1e",
        "patch": "@@ -431,7 +431,7 @@ bool CWallet::HasWalletSpend(const uint256& txid) const\n \n void CWallet::Flush(bool shutdown)\n {\n-    bitdb.Flush(shutdown);\n+    dbw->Flush(shutdown);\n }\n \n bool CWallet::Verify()"
      }
    ]
  },
  {
    "sha": "33232810dca802a1328e349865d7da86c8c809e1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMzIzMjgxMGRjYTgwMmExMzI4ZTM0OTg2NWQ3ZGE4NmM4YzgwOWUx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-03-08T16:20:08Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-04-20T15:55:01Z"
      },
      "message": "wallet: CWalletDB CDB composition not inheritance\n\nCWalletDB now contains a CDB instead of inheriting from it.\n\nThis makes it easier to replace the internal transaction with a different\ndatabase, without leaking through internals.",
      "tree": {
        "sha": "49ff69835af92b9f18f898d1bedc5012ac3f5601",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/49ff69835af92b9f18f898d1bedc5012ac3f5601"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/33232810dca802a1328e349865d7da86c8c809e1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33232810dca802a1328e349865d7da86c8c809e1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/33232810dca802a1328e349865d7da86c8c809e1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33232810dca802a1328e349865d7da86c8c809e1/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "be9e1a968debbb7ede8ed50e9288a62ff15d1e1e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be9e1a968debbb7ede8ed50e9288a62ff15d1e1e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/be9e1a968debbb7ede8ed50e9288a62ff15d1e1e"
      }
    ],
    "stats": {
      "total": 130,
      "additions": 84,
      "deletions": 46
    },
    "files": [
      {
        "sha": "014c6db6c53de8d06760114e3c837d9539f2ed00",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33232810dca802a1328e349865d7da86c8c809e1/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33232810dca802a1328e349865d7da86c8c809e1/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=33232810dca802a1328e349865d7da86c8c809e1",
        "patch": "@@ -144,10 +144,10 @@ class CDB\n     bool fFlushOnClose;\n     CDBEnv *env;\n \n+public:\n     explicit CDB(CWalletDBWrapper& dbw, const char* pszMode = \"r+\", bool fFlushOnCloseIn=true);\n     ~CDB() { Close(); }\n \n-public:\n     void Flush();\n     void Close();\n     static bool Recover(const std::string& filename, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue));\n@@ -164,7 +164,7 @@ class CDB\n     CDB(const CDB&);\n     void operator=(const CDB&);\n \n-protected:\n+public:\n     template <typename K, typename T>\n     bool Read(const K& key, T& value)\n     {"
      },
      {
        "sha": "a90fa6dbbda04d9de8b7300c4fc38a411ab911b6",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 66,
        "deletions": 42,
        "changes": 108,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33232810dca802a1328e349865d7da86c8c809e1/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33232810dca802a1328e349865d7da86c8c809e1/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=33232810dca802a1328e349865d7da86c8c809e1",
        "patch": "@@ -33,46 +33,46 @@ static std::atomic<unsigned int> nWalletDBUpdateCounter;\n bool CWalletDB::WriteName(const std::string& strAddress, const std::string& strName)\n {\n     nWalletDBUpdateCounter++;\n-    return Write(make_pair(std::string(\"name\"), strAddress), strName);\n+    return batch.Write(std::make_pair(std::string(\"name\"), strAddress), strName);\n }\n \n bool CWalletDB::EraseName(const std::string& strAddress)\n {\n     // This should only be used for sending addresses, never for receiving addresses,\n     // receiving addresses must always have an address book entry if they're not change return.\n     nWalletDBUpdateCounter++;\n-    return Erase(make_pair(std::string(\"name\"), strAddress));\n+    return batch.Erase(std::make_pair(std::string(\"name\"), strAddress));\n }\n \n bool CWalletDB::WritePurpose(const std::string& strAddress, const std::string& strPurpose)\n {\n     nWalletDBUpdateCounter++;\n-    return Write(make_pair(std::string(\"purpose\"), strAddress), strPurpose);\n+    return batch.Write(std::make_pair(std::string(\"purpose\"), strAddress), strPurpose);\n }\n \n bool CWalletDB::ErasePurpose(const std::string& strPurpose)\n {\n     nWalletDBUpdateCounter++;\n-    return Erase(make_pair(std::string(\"purpose\"), strPurpose));\n+    return batch.Erase(std::make_pair(std::string(\"purpose\"), strPurpose));\n }\n \n bool CWalletDB::WriteTx(const CWalletTx& wtx)\n {\n     nWalletDBUpdateCounter++;\n-    return Write(std::make_pair(std::string(\"tx\"), wtx.GetHash()), wtx);\n+    return batch.Write(std::make_pair(std::string(\"tx\"), wtx.GetHash()), wtx);\n }\n \n bool CWalletDB::EraseTx(uint256 hash)\n {\n     nWalletDBUpdateCounter++;\n-    return Erase(std::make_pair(std::string(\"tx\"), hash));\n+    return batch.Erase(std::make_pair(std::string(\"tx\"), hash));\n }\n \n bool CWalletDB::WriteKey(const CPubKey& vchPubKey, const CPrivKey& vchPrivKey, const CKeyMetadata& keyMeta)\n {\n     nWalletDBUpdateCounter++;\n \n-    if (!Write(std::make_pair(std::string(\"keymeta\"), vchPubKey),\n+    if (!batch.Write(std::make_pair(std::string(\"keymeta\"), vchPubKey),\n                keyMeta, false))\n         return false;\n \n@@ -82,7 +82,7 @@ bool CWalletDB::WriteKey(const CPubKey& vchPubKey, const CPrivKey& vchPrivKey, c\n     vchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n     vchKey.insert(vchKey.end(), vchPrivKey.begin(), vchPrivKey.end());\n \n-    return Write(std::make_pair(std::string(\"key\"), vchPubKey), std::make_pair(vchPrivKey, Hash(vchKey.begin(), vchKey.end())), false);\n+    return batch.Write(std::make_pair(std::string(\"key\"), vchPubKey), std::make_pair(vchPrivKey, Hash(vchKey.begin(), vchKey.end())), false);\n }\n \n bool CWalletDB::WriteCryptedKey(const CPubKey& vchPubKey,\n@@ -92,109 +92,109 @@ bool CWalletDB::WriteCryptedKey(const CPubKey& vchPubKey,\n     const bool fEraseUnencryptedKey = true;\n     nWalletDBUpdateCounter++;\n \n-    if (!Write(std::make_pair(std::string(\"keymeta\"), vchPubKey),\n+    if (!batch.Write(std::make_pair(std::string(\"keymeta\"), vchPubKey),\n             keyMeta))\n         return false;\n \n-    if (!Write(std::make_pair(std::string(\"ckey\"), vchPubKey), vchCryptedSecret, false))\n+    if (!batch.Write(std::make_pair(std::string(\"ckey\"), vchPubKey), vchCryptedSecret, false))\n         return false;\n     if (fEraseUnencryptedKey)\n     {\n-        Erase(std::make_pair(std::string(\"key\"), vchPubKey));\n-        Erase(std::make_pair(std::string(\"wkey\"), vchPubKey));\n+        batch.Erase(std::make_pair(std::string(\"key\"), vchPubKey));\n+        batch.Erase(std::make_pair(std::string(\"wkey\"), vchPubKey));\n     }\n     return true;\n }\n \n bool CWalletDB::WriteMasterKey(unsigned int nID, const CMasterKey& kMasterKey)\n {\n     nWalletDBUpdateCounter++;\n-    return Write(std::make_pair(std::string(\"mkey\"), nID), kMasterKey, true);\n+    return batch.Write(std::make_pair(std::string(\"mkey\"), nID), kMasterKey, true);\n }\n \n bool CWalletDB::WriteCScript(const uint160& hash, const CScript& redeemScript)\n {\n     nWalletDBUpdateCounter++;\n-    return Write(std::make_pair(std::string(\"cscript\"), hash), *(const CScriptBase*)(&redeemScript), false);\n+    return batch.Write(std::make_pair(std::string(\"cscript\"), hash), *(const CScriptBase*)(&redeemScript), false);\n }\n \n bool CWalletDB::WriteWatchOnly(const CScript &dest, const CKeyMetadata& keyMeta)\n {\n     nWalletDBUpdateCounter++;\n-    if (!Write(std::make_pair(std::string(\"watchmeta\"), *(const CScriptBase*)(&dest)), keyMeta))\n+    if (!batch.Write(std::make_pair(std::string(\"watchmeta\"), *(const CScriptBase*)(&dest)), keyMeta))\n         return false;\n-    return Write(std::make_pair(std::string(\"watchs\"), *(const CScriptBase*)(&dest)), '1');\n+    return batch.Write(std::make_pair(std::string(\"watchs\"), *(const CScriptBase*)(&dest)), '1');\n }\n \n bool CWalletDB::EraseWatchOnly(const CScript &dest)\n {\n     nWalletDBUpdateCounter++;\n-    if (!Erase(std::make_pair(std::string(\"watchmeta\"), *(const CScriptBase*)(&dest))))\n+    if (!batch.Erase(std::make_pair(std::string(\"watchmeta\"), *(const CScriptBase*)(&dest))))\n         return false;\n-    return Erase(std::make_pair(std::string(\"watchs\"), *(const CScriptBase*)(&dest)));\n+    return batch.Erase(std::make_pair(std::string(\"watchs\"), *(const CScriptBase*)(&dest)));\n }\n \n bool CWalletDB::WriteBestBlock(const CBlockLocator& locator)\n {\n     nWalletDBUpdateCounter++;\n-    Write(std::string(\"bestblock\"), CBlockLocator()); // Write empty block locator so versions that require a merkle branch automatically rescan\n-    return Write(std::string(\"bestblock_nomerkle\"), locator);\n+    batch.Write(std::string(\"bestblock\"), CBlockLocator()); // Write empty block locator so versions that require a merkle branch automatically rescan\n+    return batch.Write(std::string(\"bestblock_nomerkle\"), locator);\n }\n \n bool CWalletDB::ReadBestBlock(CBlockLocator& locator)\n {\n-    if (Read(std::string(\"bestblock\"), locator) && !locator.vHave.empty()) return true;\n-    return Read(std::string(\"bestblock_nomerkle\"), locator);\n+    if (batch.Read(std::string(\"bestblock\"), locator) && !locator.vHave.empty()) return true;\n+    return batch.Read(std::string(\"bestblock_nomerkle\"), locator);\n }\n \n bool CWalletDB::WriteOrderPosNext(int64_t nOrderPosNext)\n {\n     nWalletDBUpdateCounter++;\n-    return Write(std::string(\"orderposnext\"), nOrderPosNext);\n+    return batch.Write(std::string(\"orderposnext\"), nOrderPosNext);\n }\n \n bool CWalletDB::WriteDefaultKey(const CPubKey& vchPubKey)\n {\n     nWalletDBUpdateCounter++;\n-    return Write(std::string(\"defaultkey\"), vchPubKey);\n+    return batch.Write(std::string(\"defaultkey\"), vchPubKey);\n }\n \n bool CWalletDB::ReadPool(int64_t nPool, CKeyPool& keypool)\n {\n-    return Read(std::make_pair(std::string(\"pool\"), nPool), keypool);\n+    return batch.Read(std::make_pair(std::string(\"pool\"), nPool), keypool);\n }\n \n bool CWalletDB::WritePool(int64_t nPool, const CKeyPool& keypool)\n {\n     nWalletDBUpdateCounter++;\n-    return Write(std::make_pair(std::string(\"pool\"), nPool), keypool);\n+    return batch.Write(std::make_pair(std::string(\"pool\"), nPool), keypool);\n }\n \n bool CWalletDB::ErasePool(int64_t nPool)\n {\n     nWalletDBUpdateCounter++;\n-    return Erase(std::make_pair(std::string(\"pool\"), nPool));\n+    return batch.Erase(std::make_pair(std::string(\"pool\"), nPool));\n }\n \n bool CWalletDB::WriteMinVersion(int nVersion)\n {\n-    return Write(std::string(\"minversion\"), nVersion);\n+    return batch.Write(std::string(\"minversion\"), nVersion);\n }\n \n bool CWalletDB::ReadAccount(const std::string& strAccount, CAccount& account)\n {\n     account.SetNull();\n-    return Read(make_pair(std::string(\"acc\"), strAccount), account);\n+    return batch.Read(std::make_pair(std::string(\"acc\"), strAccount), account);\n }\n \n bool CWalletDB::WriteAccount(const std::string& strAccount, const CAccount& account)\n {\n-    return Write(make_pair(std::string(\"acc\"), strAccount), account);\n+    return batch.Write(std::make_pair(std::string(\"acc\"), strAccount), account);\n }\n \n bool CWalletDB::WriteAccountingEntry(const uint64_t nAccEntryNum, const CAccountingEntry& acentry)\n {\n-    return Write(std::make_pair(std::string(\"acentry\"), std::make_pair(acentry.strAccount, nAccEntryNum)), acentry);\n+    return batch.Write(std::make_pair(std::string(\"acentry\"), std::make_pair(acentry.strAccount, nAccEntryNum)), acentry);\n }\n \n bool CWalletDB::WriteAccountingEntry_Backend(const CAccountingEntry& acentry)\n@@ -218,7 +218,7 @@ void CWalletDB::ListAccountCreditDebit(const std::string& strAccount, std::list<\n {\n     bool fAllAccounts = (strAccount == \"*\");\n \n-    Dbc* pcursor = GetCursor();\n+    Dbc* pcursor = batch.GetCursor();\n     if (!pcursor)\n         throw std::runtime_error(std::string(__func__) + \": cannot create DB cursor\");\n     bool setRange = true;\n@@ -229,7 +229,7 @@ void CWalletDB::ListAccountCreditDebit(const std::string& strAccount, std::list<\n         if (setRange)\n             ssKey << std::make_pair(std::string(\"acentry\"), std::make_pair((fAllAccounts ? std::string(\"\") : strAccount), uint64_t(0)));\n         CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n-        int ret = ReadAtCursor(pcursor, ssKey, ssValue, setRange);\n+        int ret = batch.ReadAtCursor(pcursor, ssKey, ssValue, setRange);\n         setRange = false;\n         if (ret == DB_NOTFOUND)\n             break;\n@@ -560,15 +560,15 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n     LOCK(pwallet->cs_wallet);\n     try {\n         int nMinVersion = 0;\n-        if (Read((std::string)\"minversion\", nMinVersion))\n+        if (batch.Read((std::string)\"minversion\", nMinVersion))\n         {\n             if (nMinVersion > CLIENT_VERSION)\n                 return DB_TOO_NEW;\n             pwallet->LoadMinVersion(nMinVersion);\n         }\n \n         // Get cursor\n-        Dbc* pcursor = GetCursor();\n+        Dbc* pcursor = batch.GetCursor();\n         if (!pcursor)\n         {\n             LogPrintf(\"Error getting wallet database cursor\\n\");\n@@ -580,7 +580,7 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n             // Read next record\n             CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n             CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n-            int ret = ReadAtCursor(pcursor, ssKey, ssValue);\n+            int ret = batch.ReadAtCursor(pcursor, ssKey, ssValue);\n             if (ret == DB_NOTFOUND)\n                 break;\n             else if (ret != 0)\n@@ -664,14 +664,14 @@ DBErrors CWalletDB::FindWalletTx(std::vector<uint256>& vTxHash, std::vector<CWal\n \n     try {\n         int nMinVersion = 0;\n-        if (Read((std::string)\"minversion\", nMinVersion))\n+        if (batch.Read((std::string)\"minversion\", nMinVersion))\n         {\n             if (nMinVersion > CLIENT_VERSION)\n                 return DB_TOO_NEW;\n         }\n \n         // Get cursor\n-        Dbc* pcursor = GetCursor();\n+        Dbc* pcursor = batch.GetCursor();\n         if (!pcursor)\n         {\n             LogPrintf(\"Error getting wallet database cursor\\n\");\n@@ -683,7 +683,7 @@ DBErrors CWalletDB::FindWalletTx(std::vector<uint256>& vTxHash, std::vector<CWal\n             // Read next record\n             CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n             CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n-            int ret = ReadAtCursor(pcursor, ssKey, ssValue);\n+            int ret = batch.ReadAtCursor(pcursor, ssKey, ssValue);\n             if (ret == DB_NOTFOUND)\n                 break;\n             else if (ret != 0)\n@@ -855,20 +855,20 @@ bool CWalletDB::VerifyDatabaseFile(const std::string& walletFile, const fs::path\n bool CWalletDB::WriteDestData(const std::string &address, const std::string &key, const std::string &value)\n {\n     nWalletDBUpdateCounter++;\n-    return Write(std::make_pair(std::string(\"destdata\"), std::make_pair(address, key)), value);\n+    return batch.Write(std::make_pair(std::string(\"destdata\"), std::make_pair(address, key)), value);\n }\n \n bool CWalletDB::EraseDestData(const std::string &address, const std::string &key)\n {\n     nWalletDBUpdateCounter++;\n-    return Erase(std::make_pair(std::string(\"destdata\"), std::make_pair(address, key)));\n+    return batch.Erase(std::make_pair(std::string(\"destdata\"), std::make_pair(address, key)));\n }\n \n \n bool CWalletDB::WriteHDChain(const CHDChain& chain)\n {\n     nWalletDBUpdateCounter++;\n-    return Write(std::string(\"hdchain\"), chain);\n+    return batch.Write(std::string(\"hdchain\"), chain);\n }\n \n void CWalletDB::IncrementUpdateCounter()\n@@ -881,3 +881,27 @@ unsigned int CWalletDB::GetUpdateCounter()\n     return nWalletDBUpdateCounter;\n }\n \n+bool CWalletDB::TxnBegin()\n+{\n+    return batch.TxnBegin();\n+}\n+\n+bool CWalletDB::TxnCommit()\n+{\n+    return batch.TxnCommit();\n+}\n+\n+bool CWalletDB::TxnAbort()\n+{\n+    return batch.TxnAbort();\n+}\n+\n+bool CWalletDB::ReadVersion(int& nVersion)\n+{\n+    return batch.ReadVersion(nVersion);\n+}\n+\n+bool CWalletDB::WriteVersion(int nVersion)\n+{\n+    return batch.WriteVersion(nVersion);\n+}"
      },
      {
        "sha": "98a65a130c781750d959f64366b54a7f18a6b54f",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 16,
        "deletions": 2,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33232810dca802a1328e349865d7da86c8c809e1/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33232810dca802a1328e349865d7da86c8c809e1/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=33232810dca802a1328e349865d7da86c8c809e1",
        "patch": "@@ -123,10 +123,11 @@ class CKeyMetadata\n  * database. It will be committed when the object goes out of scope.\n  * Optionally (on by default) it will flush to disk as well.\n  */\n-class CWalletDB : public CDB\n+class CWalletDB\n {\n public:\n-    CWalletDB(CWalletDBWrapper& dbw, const char* pszMode = \"r+\", bool _fFlushOnClose = true) : CDB(dbw, pszMode, _fFlushOnClose)\n+    CWalletDB(CWalletDBWrapper& dbw, const char* pszMode = \"r+\", bool _fFlushOnClose = true) :\n+        batch(dbw, pszMode, _fFlushOnClose)\n     {\n     }\n \n@@ -198,7 +199,20 @@ class CWalletDB : public CDB\n \n     static void IncrementUpdateCounter();\n     static unsigned int GetUpdateCounter();\n+\n+    //! Begin a new transaction\n+    bool TxnBegin();\n+    //! Commit current transaction\n+    bool TxnCommit();\n+    //! Abort current transaction\n+    bool TxnAbort();\n+    //! Read wallet version\n+    bool ReadVersion(int& nVersion);\n+    //! Write wallet version\n+    bool WriteVersion(int nVersion);\n private:\n+    CDB batch;\n+\n     CWalletDB(const CWalletDB&);\n     void operator=(const CWalletDB&);\n };"
      }
    ]
  },
  {
    "sha": "69d2e9ba678ea90db0bc3f3436d6417f0e1fc2e9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OWQyZTliYTY3OGVhOTBkYjBiYzNmMzQzNmQ2NDE3ZjBlMWZjMmU5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-04-20T15:52:47Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-04-20T15:55:01Z"
      },
      "message": "wallet: Make IsDummy private in CWalletDBWrapper\n\nThis is only for use in the low-level functions, and CDB is already\na friend class.",
      "tree": {
        "sha": "a3e3a2957dc1629a94c6693f7472a20ab804987c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a3e3a2957dc1629a94c6693f7472a20ab804987c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/69d2e9ba678ea90db0bc3f3436d6417f0e1fc2e9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69d2e9ba678ea90db0bc3f3436d6417f0e1fc2e9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/69d2e9ba678ea90db0bc3f3436d6417f0e1fc2e9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69d2e9ba678ea90db0bc3f3436d6417f0e1fc2e9/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "33232810dca802a1328e349865d7da86c8c809e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33232810dca802a1328e349865d7da86c8c809e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/33232810dca802a1328e349865d7da86c8c809e1"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "a0719820ac0594d97ebf86fa47578b114027b193",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69d2e9ba678ea90db0bc3f3436d6417f0e1fc2e9/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69d2e9ba678ea90db0bc3f3436d6417f0e1fc2e9/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=69d2e9ba678ea90db0bc3f3436d6417f0e1fc2e9",
        "patch": "@@ -120,16 +120,16 @@ class CWalletDBWrapper\n      */\n     void Flush(bool shutdown);\n \n+private:\n+    /** BerkeleyDB specific */\n+    CDBEnv *env;\n+    std::string strFile;\n+\n     /** Return whether this database handle is a dummy for testing.\n      * Only to be used at a low level, application should ideally not care\n      * about this.\n      */\n     bool IsDummy() { return env == nullptr; }\n-\n-private:\n-    /** BerkeleyDB specific */\n-    CDBEnv *env;\n-    std::string strFile;\n };\n \n "
      }
    ]
  },
  {
    "sha": "911a4808fb8d9c73463f9686ca4c26b8556ce53b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MTFhNDgwOGZiOGQ5YzczNDYzZjk2ODZjYTRjMjZiODU1NmNlNTNi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-04-21T14:04:26Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-04-21T14:04:26Z"
      },
      "message": "wallet: Add comment describing the various classes in walletdb.h",
      "tree": {
        "sha": "288dadd1a6d22d869701ae0c90aa140d3f6fb10d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/288dadd1a6d22d869701ae0c90aa140d3f6fb10d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/911a4808fb8d9c73463f9686ca4c26b8556ce53b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/911a4808fb8d9c73463f9686ca4c26b8556ce53b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/911a4808fb8d9c73463f9686ca4c26b8556ce53b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/911a4808fb8d9c73463f9686ca4c26b8556ce53b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "69d2e9ba678ea90db0bc3f3436d6417f0e1fc2e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69d2e9ba678ea90db0bc3f3436d6417f0e1fc2e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/69d2e9ba678ea90db0bc3f3436d6417f0e1fc2e9"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 15,
      "deletions": 0
    },
    "files": [
      {
        "sha": "cd9fe279c537ec0037156915f3b41706b9174d7a",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/911a4808fb8d9c73463f9686ca4c26b8556ce53b/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/911a4808fb8d9c73463f9686ca4c26b8556ce53b/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=911a4808fb8d9c73463f9686ca4c26b8556ce53b",
        "patch": "@@ -17,6 +17,21 @@\n #include <utility>\n #include <vector>\n \n+/**\n+ * Overview of wallet database classes:\n+ *\n+ * - CDBEnv is an environment in which the database exists (has no analog in dbwrapper.h)\n+ * - CWalletDBWrapper represents a wallet database (similar to CDBWrapper in dbwrapper.h)\n+ * - CDB is a low-level database transaction (similar to CDBBatch in dbwrapper.h)\n+ * - CWalletDB is a modifier object for the wallet, and encapsulates a database\n+ *   transaction as well as methods to act on the database (no analog in\n+ *   dbwrapper.h)\n+ *\n+ * The latter two are named confusingly, in contrast to what the names CDB\n+ * and CWalletDB suggest they are transient transaction objects and don't\n+ * represent the database itself.\n+ */\n+\n static const bool DEFAULT_FLUSHWALLET = true;\n \n class CAccount;"
      }
    ]
  }
]