[
  {
    "sha": "476675d27991d268947e12781c30e57a98217ed0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NzY2NzVkMjc5OTFkMjY4OTQ3ZTEyNzgxYzMwZTU3YTk4MjE3ZWQw",
    "commit": {
      "author": {
        "name": "kanon",
        "email": "60179867+decryp2kanon@users.noreply.github.com",
        "date": "2020-09-30T02:28:32Z"
      },
      "committer": {
        "name": "kanon",
        "email": "60179867+decryp2kanon@users.noreply.github.com",
        "date": "2020-09-30T07:06:11Z"
      },
      "message": "test: consistently use BTC/kB in wallet_basic test",
      "tree": {
        "sha": "a11c84cd1cd0c3afa338197c37d82ccfd7f724eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a11c84cd1cd0c3afa338197c37d82ccfd7f724eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/476675d27991d268947e12781c30e57a98217ed0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/476675d27991d268947e12781c30e57a98217ed0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/476675d27991d268947e12781c30e57a98217ed0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/476675d27991d268947e12781c30e57a98217ed0/comments",
    "author": {
      "login": "decryp2kanon",
      "id": 60179867,
      "node_id": "MDQ6VXNlcjYwMTc5ODY3",
      "avatar_url": "https://avatars.githubusercontent.com/u/60179867?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/decryp2kanon",
      "html_url": "https://github.com/decryp2kanon",
      "followers_url": "https://api.github.com/users/decryp2kanon/followers",
      "following_url": "https://api.github.com/users/decryp2kanon/following{/other_user}",
      "gists_url": "https://api.github.com/users/decryp2kanon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/decryp2kanon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/decryp2kanon/subscriptions",
      "organizations_url": "https://api.github.com/users/decryp2kanon/orgs",
      "repos_url": "https://api.github.com/users/decryp2kanon/repos",
      "events_url": "https://api.github.com/users/decryp2kanon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/decryp2kanon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "decryp2kanon",
      "id": 60179867,
      "node_id": "MDQ6VXNlcjYwMTc5ODY3",
      "avatar_url": "https://avatars.githubusercontent.com/u/60179867?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/decryp2kanon",
      "html_url": "https://github.com/decryp2kanon",
      "followers_url": "https://api.github.com/users/decryp2kanon/followers",
      "following_url": "https://api.github.com/users/decryp2kanon/following{/other_user}",
      "gists_url": "https://api.github.com/users/decryp2kanon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/decryp2kanon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/decryp2kanon/subscriptions",
      "organizations_url": "https://api.github.com/users/decryp2kanon/orgs",
      "repos_url": "https://api.github.com/users/decryp2kanon/repos",
      "events_url": "https://api.github.com/users/decryp2kanon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/decryp2kanon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "de4b7f25acef14f98ed09b7cbaa065067313d24b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de4b7f25acef14f98ed09b7cbaa065067313d24b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/de4b7f25acef14f98ed09b7cbaa065067313d24b"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "22c7d9f6b22903eb117dda2a9b9e2cf000267372",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/476675d27991d268947e12781c30e57a98217ed0/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/476675d27991d268947e12781c30e57a98217ed0/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=476675d27991d268947e12781c30e57a98217ed0",
        "patch": "@@ -231,19 +231,19 @@ def run_test(self):\n         assert_raises_rpc_error(-8, \"Selected estimate_mode requires a fee rate\",\n             self.nodes[2].sendmany,\n             amounts={ address: 10 },\n-            estimate_mode='bTc/kB')\n+            estimate_mode='BTC/kB')\n         # Throw if negative feerate\n         assert_raises_rpc_error(-3, \"Amount out of range\",\n             self.nodes[2].sendmany,\n             amounts={ address: 10 },\n             conf_target=-1,\n-            estimate_mode='bTc/kB')\n+            estimate_mode='BTC/kB')\n         fee_per_kb = 0.0002500\n         explicit_fee_per_byte = Decimal(fee_per_kb) / 1000\n         txid = self.nodes[2].sendmany(\n             amounts={ address: 10 },\n             conf_target=fee_per_kb,\n-            estimate_mode='bTc/kB',\n+            estimate_mode='BTC/kB',\n         )\n         self.nodes[2].generate(1)\n         self.sync_all(self.nodes[0:3])\n@@ -413,8 +413,8 @@ def run_test(self):\n             self.nodes[0].generate(1)\n             self.sync_all(self.nodes[0:3])\n \n-            # send with explicit btc/kb fee\n-            self.log.info(\"test explicit fee (sendtoaddress as btc/kb)\")\n+            # send with explicit BTC/kB fee\n+            self.log.info(\"test explicit fee (sendtoaddress as BTC/kB)\")\n             self.nodes[0].generate(1)\n             self.sync_all(self.nodes[0:3])\n             prebalance = self.nodes[2].getbalance()\n@@ -425,19 +425,19 @@ def run_test(self):\n                 self.nodes[2].sendtoaddress,\n                 address=address,\n                 amount=1.0,\n-                estimate_mode='BTc/Kb')\n+                estimate_mode='BTC/kB')\n             # Throw if negative feerate\n             assert_raises_rpc_error(-3, \"Amount out of range\",\n                 self.nodes[2].sendtoaddress,\n                 address=address,\n                 amount=1.0,\n                 conf_target=-1,\n-                estimate_mode='btc/kb')\n+                estimate_mode='BTC/kB')\n             txid = self.nodes[2].sendtoaddress(\n                 address=address,\n                 amount=1.0,\n                 conf_target=0.00002500,\n-                estimate_mode='btc/kb',\n+                estimate_mode='BTC/kB',\n             )\n             tx_size = self.get_vsize(self.nodes[2].gettransaction(txid)['hex'])\n             self.sync_all(self.nodes[0:3])"
      }
    ]
  },
  {
    "sha": "18934af65e4d03db3a7b1eb08d154f1d5bac6c81",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxODkzNGFmNjVlNGQwM2RiM2E3YjFlYjA4ZDE1NGYxZDViYWM2Yzgx",
    "commit": {
      "author": {
        "name": "kanon",
        "email": "60179867+decryp2kanon@users.noreply.github.com",
        "date": "2020-09-30T07:29:00Z"
      },
      "committer": {
        "name": "kanon",
        "email": "60179867+decryp2kanon@users.noreply.github.com",
        "date": "2020-09-30T07:29:00Z"
      },
      "message": "test: consistently use sat/B in wallet_basic test",
      "tree": {
        "sha": "f0b6d6284f340ca1374906157819eef665ae9212",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f0b6d6284f340ca1374906157819eef665ae9212"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/18934af65e4d03db3a7b1eb08d154f1d5bac6c81",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18934af65e4d03db3a7b1eb08d154f1d5bac6c81",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/18934af65e4d03db3a7b1eb08d154f1d5bac6c81",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18934af65e4d03db3a7b1eb08d154f1d5bac6c81/comments",
    "author": {
      "login": "decryp2kanon",
      "id": 60179867,
      "node_id": "MDQ6VXNlcjYwMTc5ODY3",
      "avatar_url": "https://avatars.githubusercontent.com/u/60179867?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/decryp2kanon",
      "html_url": "https://github.com/decryp2kanon",
      "followers_url": "https://api.github.com/users/decryp2kanon/followers",
      "following_url": "https://api.github.com/users/decryp2kanon/following{/other_user}",
      "gists_url": "https://api.github.com/users/decryp2kanon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/decryp2kanon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/decryp2kanon/subscriptions",
      "organizations_url": "https://api.github.com/users/decryp2kanon/orgs",
      "repos_url": "https://api.github.com/users/decryp2kanon/repos",
      "events_url": "https://api.github.com/users/decryp2kanon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/decryp2kanon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "decryp2kanon",
      "id": 60179867,
      "node_id": "MDQ6VXNlcjYwMTc5ODY3",
      "avatar_url": "https://avatars.githubusercontent.com/u/60179867?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/decryp2kanon",
      "html_url": "https://github.com/decryp2kanon",
      "followers_url": "https://api.github.com/users/decryp2kanon/followers",
      "following_url": "https://api.github.com/users/decryp2kanon/following{/other_user}",
      "gists_url": "https://api.github.com/users/decryp2kanon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/decryp2kanon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/decryp2kanon/subscriptions",
      "organizations_url": "https://api.github.com/users/decryp2kanon/orgs",
      "repos_url": "https://api.github.com/users/decryp2kanon/repos",
      "events_url": "https://api.github.com/users/decryp2kanon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/decryp2kanon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "476675d27991d268947e12781c30e57a98217ed0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/476675d27991d268947e12781c30e57a98217ed0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/476675d27991d268947e12781c30e57a98217ed0"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "dea8c9d888c98032576ebed6e86bfe0ba2658e2b",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18934af65e4d03db3a7b1eb08d154f1d5bac6c81/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18934af65e4d03db3a7b1eb08d154f1d5bac6c81/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=18934af65e4d03db3a7b1eb08d154f1d5bac6c81",
        "patch": "@@ -252,25 +252,25 @@ def run_test(self):\n         node_0_bal += Decimal('10')\n         assert_equal(self.nodes[0].getbalance(), node_0_bal)\n \n-        # Sendmany with explicit fee (SAT/B)\n+        # Sendmany with explicit fee (sat/B)\n         # Throw if no conf_target provided\n         assert_raises_rpc_error(-8, \"Selected estimate_mode requires a fee rate\",\n             self.nodes[2].sendmany,\n             amounts={ address: 10 },\n-            estimate_mode='sat/b')\n+            estimate_mode='sat/B')\n         # Throw if negative feerate\n         assert_raises_rpc_error(-3, \"Amount out of range\",\n             self.nodes[2].sendmany,\n             amounts={ address: 10 },\n             conf_target=-1,\n-            estimate_mode='sat/b')\n+            estimate_mode='sat/B')\n         fee_sat_per_b = 2\n         fee_per_kb = fee_sat_per_b / 100000.0\n         explicit_fee_per_byte = Decimal(fee_per_kb) / 1000\n         txid = self.nodes[2].sendmany(\n             amounts={ address: 10 },\n             conf_target=fee_sat_per_b,\n-            estimate_mode='sAT/b',\n+            estimate_mode='sat/B',\n         )\n         self.nodes[2].generate(1)\n         self.sync_all(self.nodes[0:3])\n@@ -447,9 +447,9 @@ def run_test(self):\n             fee = prebalance - postbalance - Decimal('1')\n             assert_fee_amount(fee, tx_size, Decimal('0.00002500'))\n \n-            # send with explicit sat/b fee\n+            # send with explicit sat/B fee\n             self.sync_all(self.nodes[0:3])\n-            self.log.info(\"test explicit fee (sendtoaddress as sat/b)\")\n+            self.log.info(\"test explicit fee (sendtoaddress as sat/B)\")\n             self.nodes[0].generate(1)\n             prebalance = self.nodes[2].getbalance()\n             assert prebalance > 2\n@@ -459,19 +459,19 @@ def run_test(self):\n                 self.nodes[2].sendtoaddress,\n                 address=address,\n                 amount=1.0,\n-                estimate_mode='SAT/b')\n+                estimate_mode='sat/B')\n             # Throw if negative feerate\n             assert_raises_rpc_error(-3, \"Amount out of range\",\n                 self.nodes[2].sendtoaddress,\n                 address=address,\n                 amount=1.0,\n                 conf_target=-1,\n-                estimate_mode='SAT/b')\n+                estimate_mode='sat/B')\n             txid = self.nodes[2].sendtoaddress(\n                 address=address,\n                 amount=1.0,\n                 conf_target=2,\n-                estimate_mode='SAT/B',\n+                estimate_mode='sat/B',\n             )\n             tx_size = self.get_vsize(self.nodes[2].gettransaction(txid)['hex'])\n             self.sync_all(self.nodes[0:3])"
      }
    ]
  }
]