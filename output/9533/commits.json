[
  {
    "sha": "7482781347c34977b95e99589cac94888979dafa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NDgyNzgxMzQ3YzM0OTc3Yjk1ZTk5NTg5Y2FjOTQ4ODg5NzlkYWZh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-01-12T18:16:31Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-01-12T18:16:39Z"
      },
      "message": "Allow non-power-of-2 signature cache sizes",
      "tree": {
        "sha": "6128afdbfd3c7b3ac24ce08ec47a7256bdd1ddca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6128afdbfd3c7b3ac24ce08ec47a7256bdd1ddca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7482781347c34977b95e99589cac94888979dafa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7482781347c34977b95e99589cac94888979dafa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7482781347c34977b95e99589cac94888979dafa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7482781347c34977b95e99589cac94888979dafa/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02e5308c1b9f3771bbe49bc5036215fa2bd66aa9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02e5308c1b9f3771bbe49bc5036215fa2bd66aa9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02e5308c1b9f3771bbe49bc5036215fa2bd66aa9"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 11,
      "deletions": 18
    },
    "files": [
      {
        "sha": "83355dc5e1e37137b4c5451bf86f5d2f21ab5577",
        "filename": "src/cuckoocache.h",
        "status": "modified",
        "additions": 11,
        "deletions": 18,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7482781347c34977b95e99589cac94888979dafa/src/cuckoocache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7482781347c34977b95e99589cac94888979dafa/src/cuckoocache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/cuckoocache.h?ref=7482781347c34977b95e99589cac94888979dafa",
        "patch": "@@ -154,7 +154,7 @@ class bit_packed_atomic_flags\n  * @tparam Element should be a movable and copyable type\n  * @tparam Hash should be a function/callable which takes a template parameter\n  * hash_select and an Element and extracts a hash from it. Should return\n- * high-entropy hashes for `Hash h; h<0>(e) ... h<7>(e)`.\n+ * high-entropy uint32_t hashes for `Hash h; h<0>(e) ... h<7>(e)`.\n  */\n template <typename Element, typename Hash>\n class cache\n@@ -193,12 +193,6 @@ class cache\n      */\n     uint32_t epoch_size;\n \n-    /** hash_mask should be set to appropriately mask out a hash such that every\n-     * masked hash is [0,size), eg, if floor(log2(size)) == 20, then hash_mask\n-     * should be (1<<20)-1\n-     */\n-    uint32_t hash_mask;\n-\n     /** depth_limit determines how many elements insert should try to replace.\n      * Should be set to log2(n)*/\n     uint8_t depth_limit;\n@@ -217,14 +211,14 @@ class cache\n      */\n     inline std::array<uint32_t, 8> compute_hashes(const Element& e) const\n     {\n-        return {{hash_function.template operator()<0>(e) & hash_mask,\n-                 hash_function.template operator()<1>(e) & hash_mask,\n-                 hash_function.template operator()<2>(e) & hash_mask,\n-                 hash_function.template operator()<3>(e) & hash_mask,\n-                 hash_function.template operator()<4>(e) & hash_mask,\n-                 hash_function.template operator()<5>(e) & hash_mask,\n-                 hash_function.template operator()<6>(e) & hash_mask,\n-                 hash_function.template operator()<7>(e) & hash_mask}};\n+        return {{(uint32_t)((hash_function.template operator()<0>(e) * (uint64_t)size) >> 32),\n+                 (uint32_t)((hash_function.template operator()<1>(e) * (uint64_t)size) >> 32),\n+                 (uint32_t)((hash_function.template operator()<2>(e) * (uint64_t)size) >> 32),\n+                 (uint32_t)((hash_function.template operator()<3>(e) * (uint64_t)size) >> 32),\n+                 (uint32_t)((hash_function.template operator()<4>(e) * (uint64_t)size) >> 32),\n+                 (uint32_t)((hash_function.template operator()<5>(e) * (uint64_t)size) >> 32),\n+                 (uint32_t)((hash_function.template operator()<6>(e) * (uint64_t)size) >> 32),\n+                 (uint32_t)((hash_function.template operator()<7>(e) * (uint64_t)size) >> 32)}};\n     }\n \n     /* end\n@@ -305,7 +299,7 @@ class cache\n     }\n \n     /** setup initializes the container to store no more than new_size\n-     * elements. setup rounds down to a power of two size.\n+     * elements.\n      *\n      * setup should only be called once.\n      *\n@@ -316,8 +310,7 @@ class cache\n     {\n         // depth_limit must be at least one otherwise errors can occur.\n         depth_limit = static_cast<uint8_t>(std::log2(static_cast<float>(std::max((uint32_t)2, new_size))));\n-        size = 1 << depth_limit;\n-        hash_mask = size-1;\n+        size = std::max<uint32_t>(2, new_size);\n         table.resize(size);\n         collection_flags.setup(size);\n         epoch_flags.resize(size);"
      }
    ]
  }
]