martinus,2021-09-08 19:09:33,"re-ACK f530202353a4f8bb444966559aa15681ab3cebc6. I ran a fully synced node for about a day. My node was mostly idle though so not much was going on. I [wrote a little script](https://github.com/martinus/bitcoin-stuff/blob/main/scripts/parse-debuglog-contention-single.rb) to parse the `debug.log` and summarize the output to see if anything interesting was going on, here is the result:\n\ntotal[ms",https://github.com/bitcoin/bitcoin/pull/22904#issuecomment-915498197,915498197,
MarcoFalke,2021-09-09 13:53:51,I expect lock contention to be more pronounced in the GUI (or when there is an active RPC poll),https://github.com/bitcoin/bitcoin/pull/22904#issuecomment-916119384,916119384,
ajtowns,2021-09-29 19:11:56,"This seems to introduce a busy loop when running the checkqueue tests for me:\n\n```\n$ make -j5 check &\n$ tail -f test/*.log\n2021-09-29T18:35:19.275154Z [test] [logging/timer.h:51] [Log] Enter: lock contention m_mutex, ./checkqueue.h:168 started\n2021-09-29T18:35:19.275213Z [scriptch.2] [logging/timer.h:51] [Log] Enter: lock contention m_mutex, ./checkqueue.h:77 completed (306Î¼s)\n2021-0",https://github.com/bitcoin/bitcoin/pull/22904#issuecomment-930466935,930466935,
theuni,2021-09-29 19:37:28,"I suspect you have a bunch of spurious failures. Regardless of whether that's the case or not, relying on unspecified behavior (spurious mutex failures) from libc/stdlib is a bad idea, _especially_ if it leads to possible remote triggers (3 of the 4 most contended locks are in net_processing).\n\nIMO this is far too dangerous to have turned on by default.",https://github.com/bitcoin/bitcoin/pull/22904#issuecomment-930484001,930484001,
theuni,2021-09-29 19:41:25,"Following up: if this were to be reverted, here is an alternative solution to the header macro problem for [lock contention](https://github.com/theuni/bitcoin/commit/92b973ce56e585f3789ed7cd0477b225b6583038) and [lock ordering](https://github.com/theuni/bitcoin/commit/d36d0865f826620607cde4b42dc7d46d28d66ca2). As a caveat, I haven't benchmarked to see the impact of the lost inlining.",https://github.com/bitcoin/bitcoin/pull/22904#issuecomment-930486533,930486533,
martinus,2021-09-30 06:38:51,"> I suspect you have a bunch of spurious failures.\n\nI think the contentions are real and not spurious. For me the file `checkqueue_tests.cpp.log` is by far the largest, and it looks like most the contentions come from the test `test_CheckQueue_Correct_Random`.  When I run\n```sh\n./src/test/test_bitcoin --run_test=checkqueue_tests/test_CheckQueue_Correct_Random -- DEBUG_LOG_OUT >out.txt\n``",https://github.com/bitcoin/bitcoin/pull/22904#issuecomment-930855423,930855423,
fanquake,2021-10-04 03:12:49,"Clearly this needs following up on. I've opened an issue, https://github.com/bitcoin/bitcoin/issues/23167, for further discussion / so this doesn't get lost.",https://github.com/bitcoin/bitcoin/pull/22904#issuecomment-933108098,933108098,
jonatack,2021-10-08 11:57:14,"> I think the contentions are real and not spurious.\n\nGood call @martinus. Testing this further, it was not only the case on every run but also pre-existing with `DEBUG_LOCKCONTENTION` defined, as some of these tests are heavily contested by design.  Logging contentions by default in the tests served to bring the issue to light, which was the goal.\n\n![Screenshot from 2021-10-08 13-07-06](h",https://github.com/bitcoin/bitcoin/pull/22904#issuecomment-938583466,938583466,
martinus,2021-09-07 06:55:29,"Maybe overkill, but it would be possible here to use `if constexpr` so the error case becomes a compile time error, like so:\n\n```cpp\n    std::string LogMsg(const std::string& msg)\n    {\n        const auto end_time = GetTime<std::chrono::microseconds>() - m_start_t;\n        if (m_start_t.count() <= 0) {\n            return strprintf(""%s: %s"", m_prefix, msg);\n        }\n\n        if",https://github.com/bitcoin/bitcoin/pull/22904#discussion_r703230803,703230803,src/logging/timer.h
martinus,2021-09-07 06:57:27,"I think it would be nice to also have `util::ThreadGetInternalName()` in the log message, then it's more obvious which thread is blocking which",https://github.com/bitcoin/bitcoin/pull/22904#discussion_r703232022,703232022,src/sync.h
MarcoFalke,2021-09-07 07:13:51,You can use commit fac588b57bece4d3572a8ecdcd58140b5343cdf6,https://github.com/bitcoin/bitcoin/pull/22904#discussion_r703241931,703241931,src/logging/timer.h
martinus,2021-09-07 14:47:41,"disregard that, I just saw that this is already nicely possible with `-logthreadnames`.",https://github.com/bitcoin/bitcoin/pull/22904#discussion_r703580562,703580562,src/sync.h
jonatack,2021-09-07 16:44:25,Good ideas! Done.,https://github.com/bitcoin/bitcoin/pull/22904#discussion_r703672697,703672697,src/logging/timer.h
jonatack,2021-09-07 17:15:18,"I guess this can be dropped, though I see how it might be used in this file for `SERIALIZE_METHODS`.",https://github.com/bitcoin/bitcoin/pull/22904#discussion_r703693001,703693001,src/serialize.h
MarcoFalke,2021-09-08 11:56:34,"seems a bit odd to add a new feature in one commit and then remove it in the next commit.\n\nIf you squash the two commits and keep the ordering, the diff will be a lot smaller, if not empty.",https://github.com/bitcoin/bitcoin/pull/22904#discussion_r704347335,704347335,src/test/logging_tests.cpp
jonatack,2021-09-09 13:45:10,Kept the last three commits separate as they do three different things and were contributed by three different people.,https://github.com/bitcoin/bitcoin/pull/22904#discussion_r705347890,705347890,src/test/logging_tests.cpp
MarcoFalke,2021-09-09 13:55:56,Fair enough,https://github.com/bitcoin/bitcoin/pull/22904#discussion_r705358789,705358789,src/test/logging_tests.cpp
fanquake,2021-09-09 13:59:36,"3 different commits by 3 different people is irrelevant if we're just adding code to immediately delete it. As long as bddae7e7ff7bb5931ed807acaef7336f2ee98476 came first it didn't matter. So I don't understand why the remaining two commits, 498b323425d960274c40472a6a847afc1982201d and f530202353a4f8bb444966559aa15681ab3cebc6, couldn't have been squashed together and just have the two authors. ",https://github.com/bitcoin/bitcoin/pull/22904#discussion_r705362396,705362396,src/test/logging_tests.cpp
