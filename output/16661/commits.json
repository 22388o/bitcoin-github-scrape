[
  {
    "sha": "fa6e1900d5f56a428d42b92cb33c18f2da1bbc85",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTZlMTkwMGQ1ZjU2YTQyOGQ0MmI5MmNiMzNjMThmMmRhMWJiYzg1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-08-19T21:07:30Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-09-03T14:30:56Z"
      },
      "message": "wallet: Fix segmentation fault in CreateWalletFromFile",
      "tree": {
        "sha": "47352612421d082069284a1cc1d9738784b7fc54",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/47352612421d082069284a1cc1d9738784b7fc54"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa6e1900d5f56a428d42b92cb33c18f2da1bbc85",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhRpwv/UmjNTRp5MZOaMnffnHGyBAGe2iGJx8cN6Xi9tcrJjqcWlwOdayf/6+r9\nKCMZ/ek92IZ8QSxeWPu7RQt41scM0U0xv0CxkhOd7Mlhz0+nYhaQffq3/8mJeuhu\nAgbdTZ4buVFUcFce6X9w8mFXmbt4v/XSm5vAfJpFgcKcEmq3Bt49oD0hu+b676fY\nNdPgiODkxjc63Jt1ZhtpMJh95tqxlQdlx+bp0G47RwcWNZnQ1bDNPeakXn3CCD/l\ngUSHesFzedOFal9kf8sJxNktzzh2XsKWoovt5JGIKNC9+rrZazbzT2p11aQwb2si\nsXYPzV8lFEC08AeeXRySJruVGcCPHI9b7o3rgBxXyljh+eRX/qoq+aiHOtteUFdj\nz5wp8N4oAYZBV3ceFW/hJSR8A/xJIe7q1b0kIXRzHBXT6JNBg5xuQuMytz2NNkH4\nVsLiGjunpcnaUSu9pMKbYAdGBlakDkB9tV/yikpJdaKCpDDvPshnCkFYPXG7dqCt\ndOht1mdU\n=Iz4j\n-----END PGP SIGNATURE-----",
        "payload": "tree 47352612421d082069284a1cc1d9738784b7fc54\nparent 6e431296daceee604f48e9e3e87fa84cfd44bef2\nauthor MarcoFalke <falke.marco@gmail.com> 1566248850 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1567521056 -0400\n\nwallet: Fix segmentation fault in CreateWalletFromFile\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa6e1900d5f56a428d42b92cb33c18f2da1bbc85",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa6e1900d5f56a428d42b92cb33c18f2da1bbc85",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa6e1900d5f56a428d42b92cb33c18f2da1bbc85/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6e431296daceee604f48e9e3e87fa84cfd44bef2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e431296daceee604f48e9e3e87fa84cfd44bef2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6e431296daceee604f48e9e3e87fa84cfd44bef2"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e5ec8d84b191197e99f8e006f7a4e086ebedc17a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6e1900d5f56a428d42b92cb33c18f2da1bbc85/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6e1900d5f56a428d42b92cb33c18f2da1bbc85/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fa6e1900d5f56a428d42b92cb33c18f2da1bbc85",
        "patch": "@@ -4243,7 +4243,7 @@ bool CWallet::Verify(interfaces::Chain& chain, const WalletLocation& location, b\n \n std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain, const WalletLocation& location, uint64_t wallet_creation_flags)\n {\n-    const std::string& walletFile = WalletDataFilePath(location.GetPath()).string();\n+    const std::string walletFile = WalletDataFilePath(location.GetPath()).string();\n \n     // needed to restore wallet transaction meta data after -zapwallettxes\n     std::vector<CWalletTx> vWtx;"
      }
    ]
  },
  {
    "sha": "fa420d2a70bfbcbd70960459475a0b9d3c66e68b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTQyMGQyYTcwYmZiY2JkNzA5NjA0NTk0NzVhMGI5ZDNjNjZlNjhi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-08-19T21:17:09Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-09-03T14:31:30Z"
      },
      "message": "wallet: Fix documentation around WalletParameterInteraction",
      "tree": {
        "sha": "4d7b951f06606a6cd9cf5bcb8031a11eeb881095",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d7b951f06606a6cd9cf5bcb8031a11eeb881095"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa420d2a70bfbcbd70960459475a0b9d3c66e68b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhWjwwAlkQcoAQ9JkhCZprW6u6n5EqL3BvXojzuVWyO3LOrZ7Hy19gAxfhOsoNC\nGhPHLRV8aYzxbf/8C5i2AD+jstjxb96Dr2kcgVgWCmp2tzjpy0/g4r7HZdHq7pD3\nFqGpSgy4fIrYiI7hAjjA1GRMVKHmh6K5U97u7pBZ7hhyeBzqn/tsSlkH7nDUGUgr\nd4jQUgOMGCobAORykz0I7nmdF5nJDPCaOCsPfSdrCnGQWZ7xoAkSeqsOie3Iboel\nUO/DRozdUruWLtOl7ray8yMMnELiF+ZlHaboxnlWLdayd1EZD88wplfaJ8lsQV8/\nMebmFy5wwZ99PiHnbSDBdVbzj5Zw7jKhf2HlLTpd/RXs4Un/cNvZFCd7lNbR0oY0\nLNdcDtebgL+vJPPqSwNdXeJWs2WBax96XXAFhaDS23Tjj3FV28EpCu2gtt3zPghy\nnkN09xQo3CXTy3LrH5cK+3PFeCmvcV7cfnU9EofLRNMDN40qhQ3QtYfnudRoFzcW\n9UbU0qz8\n=dJ3S\n-----END PGP SIGNATURE-----",
        "payload": "tree 4d7b951f06606a6cd9cf5bcb8031a11eeb881095\nparent fa6e1900d5f56a428d42b92cb33c18f2da1bbc85\nauthor MarcoFalke <falke.marco@gmail.com> 1566249429 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1567521090 -0400\n\nwallet: Fix documentation around WalletParameterInteraction\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa420d2a70bfbcbd70960459475a0b9d3c66e68b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa420d2a70bfbcbd70960459475a0b9d3c66e68b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa420d2a70bfbcbd70960459475a0b9d3c66e68b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa6e1900d5f56a428d42b92cb33c18f2da1bbc85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa6e1900d5f56a428d42b92cb33c18f2da1bbc85",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa6e1900d5f56a428d42b92cb33c18f2da1bbc85"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "0594ec95af5d61bf47bc095184e82547c6cc510d",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa420d2a70bfbcbd70960459475a0b9d3c66e68b/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa420d2a70bfbcbd70960459475a0b9d3c66e68b/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fa420d2a70bfbcbd70960459475a0b9d3c66e68b",
        "patch": "@@ -1106,7 +1106,7 @@ bool AppInitParameterInteraction()\n         if (!ParseMoney(gArgs.GetArg(\"-minrelaytxfee\", \"\"), n)) {\n             return InitError(AmountErrMsg(\"minrelaytxfee\", gArgs.GetArg(\"-minrelaytxfee\", \"\")).translated);\n         }\n-        // High fee check is done afterward in WalletParameterInteraction()\n+        // High fee check is done afterward in CWallet::CreateWalletFromFile()\n         ::minRelayTxFee = CFeeRate(n);\n     } else if (incrementalRelayFee > ::minRelayTxFee) {\n         // Allow only setting incrementalRelayFee to control both"
      },
      {
        "sha": "5a62e2930359a02dbf4b39d9680016e6090547c7",
        "filename": "src/wallet/load.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa420d2a70bfbcbd70960459475a0b9d3c66e68b/src/wallet/load.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa420d2a70bfbcbd70960459475a0b9d3c66e68b/src/wallet/load.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/load.h?ref=fa420d2a70bfbcbd70960459475a0b9d3c66e68b",
        "patch": "@@ -17,7 +17,7 @@ class Chain;\n \n //! Responsible for reading and validating the -wallet arguments and verifying the wallet database.\n //! This function will perform salvage on the wallet if requested, as long as only one wallet is\n-//! being loaded (WalletParameterInteraction forbids -salvagewallet, -zapwallettxes or -upgradewallet with multiwallet).\n+//! being loaded (WalletInit::ParameterInteraction() forbids -salvagewallet, -zapwallettxes or -upgradewallet with multiwallet).\n bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wallet_files);\n \n //! Load wallet databases."
      }
    ]
  },
  {
    "sha": "fad650db3fd51b7fcd3af5a5b8b81125b205d90d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWQ2NTBkYjNmZDUxYjdmY2QzYWY1YTViOGI4MTEyNWIyMDVkOTBk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-08-19T21:35:05Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-09-03T14:32:05Z"
      },
      "message": "wallet: Pass error from CreateWalletFromFile to RPC\n\nCommon errors and warnings should be translated when displayed in the\nGUI, but not translated when displayed elsewhere. The wallet method\nCreateWalletFromFile does not know its caller, so this commit changes it\nto return a bilingual_str to the caller.",
      "tree": {
        "sha": "cd1c03ac65db963d791773800f8501f6f60afc6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cd1c03ac65db963d791773800f8501f6f60afc6f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fad650db3fd51b7fcd3af5a5b8b81125b205d90d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUg9egwAq5Jq+UHS1Gp8HDefW+vuYeZaNso5pxPFBkgpRdjKY9oov8Gk+/sAI0xG\nxBq3OZrWxoP35ozU7PCglD1JCgxpJ18YgA7Fcc+NVgh5wrsg7hMnZYVuSMhv1rVQ\ng2mSwvqKaz7NBgqte3TN0OoyhO8rFl7bIorsrvVLRUqruMXvM2DmESrWXntVvzpB\n9aaPkINUI8YwNXcR3p+8CqDB656cObM3hbkHLl4Hw0xDdBp5kslq5zx2nWN2LJ0j\nqgsV3Gsnz2H46MR4g3W2zYhXX4ayNE7vR4SPhWENJ/hTTJlrMqwm4sUOIU1mATgQ\noiylg2n3njTE4yC1OfvYfCrLwktqBH6Bjd3V1/3+vJS75d4M0xy5CnqTIP4V/U1S\nzq3sw/QtiQZUc8GrobFNQOq4y+TArpa0uqdNTiMTFOoYAltXJroknouf9bbPkU3s\n+/w598CtvNJJX6qPgbxORmNNopk916T30sH9v+Zzk/cdGckWfREkiQR7QWRr7ut7\nj3LNWWNw\n=I0va\n-----END PGP SIGNATURE-----",
        "payload": "tree cd1c03ac65db963d791773800f8501f6f60afc6f\nparent fa420d2a70bfbcbd70960459475a0b9d3c66e68b\nauthor MarcoFalke <falke.marco@gmail.com> 1566250505 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1567521125 -0400\n\nwallet: Pass error from CreateWalletFromFile to RPC\n\nCommon errors and warnings should be translated when displayed in the\nGUI, but not translated when displayed elsewhere. The wallet method\nCreateWalletFromFile does not know its caller, so this commit changes it\nto return a bilingual_str to the caller.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad650db3fd51b7fcd3af5a5b8b81125b205d90d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fad650db3fd51b7fcd3af5a5b8b81125b205d90d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad650db3fd51b7fcd3af5a5b8b81125b205d90d/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa420d2a70bfbcbd70960459475a0b9d3c66e68b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa420d2a70bfbcbd70960459475a0b9d3c66e68b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa420d2a70bfbcbd70960459475a0b9d3c66e68b"
      }
    ],
    "stats": {
      "total": 183,
      "additions": 121,
      "deletions": 62
    },
    "files": [
      {
        "sha": "4422d915e667557f703a973a506a0b35ac8bbcff",
        "filename": "src/dummywallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad650db3fd51b7fcd3af5a5b8b81125b205d90d/src/dummywallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad650db3fd51b7fcd3af5a5b8b81125b205d90d/src/dummywallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dummywallet.cpp?ref=fad650db3fd51b7fcd3af5a5b8b81125b205d90d",
        "patch": "@@ -7,6 +7,7 @@\n #include <walletinitinterface.h>\n \n class CWallet;\n+struct bilingual_str;\n \n namespace interfaces {\n class Chain;\n@@ -69,7 +70,7 @@ std::vector<std::shared_ptr<CWallet>> GetWallets()\n     throw std::logic_error(\"Wallet function called in non-wallet build.\");\n }\n \n-std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, std::string& error, std::string& warning)\n+std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings)\n {\n     throw std::logic_error(\"Wallet function called in non-wallet build.\");\n }"
      },
      {
        "sha": "4cd869d54db21b547c19543f5b5fd0e974991494",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad650db3fd51b7fcd3af5a5b8b81125b205d90d/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad650db3fd51b7fcd3af5a5b8b81125b205d90d/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=fad650db3fd51b7fcd3af5a5b8b81125b205d90d",
        "patch": "@@ -42,7 +42,7 @@ class CWallet;\n fs::path GetWalletDir();\n std::vector<fs::path> ListWalletDir();\n std::vector<std::shared_ptr<CWallet>> GetWallets();\n-std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, std::string& error, std::string& warning);\n+std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings);\n \n namespace interfaces {\n \n@@ -254,9 +254,9 @@ class NodeImpl : public Node\n         }\n         return wallets;\n     }\n-    std::unique_ptr<Wallet> loadWallet(const std::string& name, std::string& error, std::string& warning) override\n+    std::unique_ptr<Wallet> loadWallet(const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings) override\n     {\n-        return MakeWallet(LoadWallet(*m_interfaces.chain, name, error, warning));\n+        return MakeWallet(LoadWallet(*m_interfaces.chain, name, error, warnings));\n     }\n     std::unique_ptr<Handler> handleInitMessage(InitMessageFn fn) override\n     {"
      },
      {
        "sha": "f81a110b1998a2f731c77aa88697d5ed9a91cbc5",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad650db3fd51b7fcd3af5a5b8b81125b205d90d/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad650db3fd51b7fcd3af5a5b8b81125b205d90d/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=fad650db3fd51b7fcd3af5a5b8b81125b205d90d",
        "patch": "@@ -27,6 +27,7 @@ class RPCTimerInterface;\n class UniValue;\n class proxyType;\n struct CNodeStateStats;\n+struct bilingual_str;\n \n namespace interfaces {\n class Handler;\n@@ -198,7 +199,7 @@ class Node\n     //! Attempts to load a wallet from file or directory.\n     //! The loaded wallet is also notified to handlers previously registered\n     //! with handleLoadWallet.\n-    virtual std::unique_ptr<Wallet> loadWallet(const std::string& name, std::string& error, std::string& warning) = 0;\n+    virtual std::unique_ptr<Wallet> loadWallet(const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings) = 0;\n \n     //! Register handler for init messages.\n     using InitMessageFn = std::function<void(const std::string& message)>;"
      },
      {
        "sha": "0cb528773161816e259af72e7a47e2baa44ec1e4",
        "filename": "src/qt/walletcontroller.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad650db3fd51b7fcd3af5a5b8b81125b205d90d/src/qt/walletcontroller.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad650db3fd51b7fcd3af5a5b8b81125b205d90d/src/qt/walletcontroller.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.cpp?ref=fad650db3fd51b7fcd3af5a5b8b81125b205d90d",
        "patch": "@@ -6,6 +6,8 @@\n \n #include <interfaces/handler.h>\n #include <interfaces/node.h>\n+#include <util/string.h>\n+#include <util/translation.h>\n \n #include <algorithm>\n \n@@ -148,15 +150,16 @@ OpenWalletActivity::OpenWalletActivity(WalletController* wallet_controller, cons\n \n void OpenWalletActivity::open()\n {\n-    std::string error, warning;\n+    bilingual_str error;\n+    std::vector<bilingual_str> warning;\n     std::unique_ptr<interfaces::Wallet> wallet = m_wallet_controller->m_node.loadWallet(m_name, error, warning);\n     if (!warning.empty()) {\n-        Q_EMIT message(QMessageBox::Warning, QString::fromStdString(warning));\n+        Q_EMIT message(QMessageBox::Warning, QString::fromStdString(Join(Translated(warning), \"\\n\")));\n     }\n     if (wallet) {\n         Q_EMIT opened(m_wallet_controller->getOrCreateWallet(std::move(wallet)));\n     } else {\n-        Q_EMIT message(QMessageBox::Critical, QString::fromStdString(error));\n+        Q_EMIT message(QMessageBox::Critical, QString::fromStdString(error.translated));\n     }\n     Q_EMIT finished();\n }"
      },
      {
        "sha": "5cb6aa9290bf2f195d322e0a814054907805493f",
        "filename": "src/util/translation.h",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad650db3fd51b7fcd3af5a5b8b81125b205d90d/src/util/translation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad650db3fd51b7fcd3af5a5b8b81125b205d90d/src/util/translation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/translation.h?ref=fad650db3fd51b7fcd3af5a5b8b81125b205d90d",
        "patch": "@@ -19,6 +19,20 @@ struct bilingual_str {\n     std::string translated;\n };\n \n+inline std::vector<std::string> Original(const std::vector<bilingual_str>& list)\n+{\n+    std::vector<std::string> ret;\n+    for (const auto& s : list) ret.push_back(s.original);\n+    return ret;\n+}\n+\n+inline std::vector<std::string> Translated(const std::vector<bilingual_str>& list)\n+{\n+    std::vector<std::string> ret;\n+    for (const auto& s : list) ret.push_back(s.translated);\n+    return ret;\n+}\n+\n namespace tinyformat {\n template <typename... Args>\n bilingual_str format(const bilingual_str& fmt, const Args&... args)"
      },
      {
        "sha": "f54d17b64b909b5f9f750e789a26d3f4ad45ef0e",
        "filename": "src/wallet/load.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad650db3fd51b7fcd3af5a5b8b81125b205d90d/src/wallet/load.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad650db3fd51b7fcd3af5a5b8b81125b205d90d/src/wallet/load.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/load.cpp?ref=fad650db3fd51b7fcd3af5a5b8b81125b205d90d",
        "patch": "@@ -66,8 +66,14 @@ bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wal\n bool LoadWallets(interfaces::Chain& chain, const std::vector<std::string>& wallet_files)\n {\n     for (const std::string& walletFile : wallet_files) {\n-        std::shared_ptr<CWallet> pwallet = CWallet::CreateWalletFromFile(chain, WalletLocation(walletFile));\n+        bilingual_str error;\n+        std::vector<bilingual_str> warnings;\n+        std::shared_ptr<CWallet> pwallet = CWallet::CreateWalletFromFile(chain, WalletLocation(walletFile), error, warnings);\n+        for (const auto& w : warnings) {\n+            chain.initWarning(w.translated);\n+        }\n         if (!pwallet) {\n+            chain.initError(error.translated);\n             return false;\n         }\n         AddWallet(pwallet);"
      },
      {
        "sha": "9afb3f4d7bda7378b98b030a794d6385ec5785aa",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad650db3fd51b7fcd3af5a5b8b81125b205d90d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad650db3fd51b7fcd3af5a5b8b81125b205d90d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fad650db3fd51b7fcd3af5a5b8b81125b205d90d",
        "patch": "@@ -22,7 +22,9 @@\n #include <util/bip32.h>\n #include <util/fees.h>\n #include <util/moneystr.h>\n+#include <util/string.h>\n #include <util/system.h>\n+#include <util/translation.h>\n #include <util/url.h>\n #include <util/validation.h>\n #include <wallet/coincontrol.h>\n@@ -2584,13 +2586,14 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n         }\n     }\n \n-    std::string error, warning;\n-    std::shared_ptr<CWallet> const wallet = LoadWallet(*g_rpc_interfaces->chain, location, error, warning);\n-    if (!wallet) throw JSONRPCError(RPC_WALLET_ERROR, error);\n+    bilingual_str error;\n+    std::vector<bilingual_str> warnings;\n+    std::shared_ptr<CWallet> const wallet = LoadWallet(*g_rpc_interfaces->chain, location, error, warnings);\n+    if (!wallet) throw JSONRPCError(RPC_WALLET_ERROR, error.original);\n \n     UniValue obj(UniValue::VOBJ);\n     obj.pushKV(\"name\", wallet->GetName());\n-    obj.pushKV(\"warning\", warning);\n+    obj.pushKV(\"warning\", Join(Original(warnings), \"\\n\"));\n \n     return obj;\n }"
      },
      {
        "sha": "93e88f455a7128aef0c49cd1aa267bcb6c648d6f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 56,
        "deletions": 47,
        "changes": 103,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad650db3fd51b7fcd3af5a5b8b81125b205d90d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad650db3fd51b7fcd3af5a5b8b81125b205d90d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fad650db3fd51b7fcd3af5a5b8b81125b205d90d",
        "patch": "@@ -25,6 +25,7 @@\n #include <util/fees.h>\n #include <util/moneystr.h>\n #include <util/rbf.h>\n+#include <util/string.h>\n #include <util/translation.h>\n #include <util/validation.h>\n #include <validation.h>\n@@ -140,26 +141,31 @@ void UnloadWallet(std::shared_ptr<CWallet>&& wallet)\n     }\n }\n \n-std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const WalletLocation& location, std::string& error, std::string& warning)\n+std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const WalletLocation& location, bilingual_str& error_out, std::vector<bilingual_str>& warnings_out)\n {\n+    std::string error;\n+    std::string warning;\n     if (!CWallet::Verify(chain, location, false, error, warning)) {\n         error = \"Wallet file verification failed: \" + error;\n+        error_out = {error, error};\n         return nullptr;\n     }\n+    if (!warning.empty()) {\n+        warnings_out.push_back(bilingual_str{warning, warning});\n+    }\n \n-    std::shared_ptr<CWallet> wallet = CWallet::CreateWalletFromFile(chain, location);\n+    std::shared_ptr<CWallet> wallet = CWallet::CreateWalletFromFile(chain, location, error_out, warnings_out);\n     if (!wallet) {\n-        error = \"Wallet loading failed.\";\n         return nullptr;\n     }\n     AddWallet(wallet);\n     wallet->postInitProcess();\n     return wallet;\n }\n \n-std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, std::string& error, std::string& warning)\n+std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings)\n {\n-    return LoadWallet(chain, WalletLocation(name), error, warning);\n+    return LoadWallet(chain, WalletLocation(name), error, warnings);\n }\n \n WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::string& warning, std::shared_ptr<CWallet>& result)\n@@ -193,11 +199,16 @@ WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString&\n     }\n \n     // Make the wallet\n-    std::shared_ptr<CWallet> wallet = CWallet::CreateWalletFromFile(chain, location, wallet_creation_flags);\n+    bilingual_str error_create;\n+    std::vector<bilingual_str> warnings_create;\n+    std::shared_ptr<CWallet> wallet = CWallet::CreateWalletFromFile(chain, location, error_create, warnings_create, wallet_creation_flags);\n     if (!wallet) {\n-        error = \"Wallet creation failed\";\n+        error = \"Wallet creation failed. \" + error_create.original;\n         return WalletCreationStatus::CREATION_FAILED;\n     }\n+    if (!warnings_create.empty()) {\n+        warning += (warning.empty() ? \"\" : \"\\n\") + Join(Original(warnings_create), \"\\n\");\n+    }\n \n     // Encrypt the wallet\n     if (!passphrase.empty() && !(wallet_creation_flags & WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n@@ -4241,7 +4252,7 @@ bool CWallet::Verify(interfaces::Chain& chain, const WalletLocation& location, b\n     return WalletBatch::VerifyDatabaseFile(wallet_path, warning_string, error_string);\n }\n \n-std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain, const WalletLocation& location, uint64_t wallet_creation_flags)\n+std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain, const WalletLocation& location, bilingual_str& error, std::vector<bilingual_str>& warnings, uint64_t wallet_creation_flags)\n {\n     const std::string walletFile = WalletDataFilePath(location.GetPath()).string();\n \n@@ -4254,7 +4265,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         std::unique_ptr<CWallet> tempWallet = MakeUnique<CWallet>(&chain, location, WalletDatabase::Create(location.GetPath()));\n         DBErrors nZapWalletRet = tempWallet->ZapWalletTx(vWtx);\n         if (nZapWalletRet != DBErrors::LOAD_OK) {\n-            chain.initError(strprintf(_(\"Error loading %s: Wallet corrupted\").translated, walletFile));\n+            error = strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile);\n             return nullptr;\n         }\n     }\n@@ -4267,29 +4278,28 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     // should be possible to use std::allocate_shared.\n     std::shared_ptr<CWallet> walletInstance(new CWallet(&chain, location, WalletDatabase::Create(location.GetPath())), ReleaseWallet);\n     DBErrors nLoadWalletRet = walletInstance->LoadWallet(fFirstRun);\n-    if (nLoadWalletRet != DBErrors::LOAD_OK)\n-    {\n+    if (nLoadWalletRet != DBErrors::LOAD_OK) {\n         if (nLoadWalletRet == DBErrors::CORRUPT) {\n-            chain.initError(strprintf(_(\"Error loading %s: Wallet corrupted\").translated, walletFile));\n+            error = strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile);\n             return nullptr;\n         }\n         else if (nLoadWalletRet == DBErrors::NONCRITICAL_ERROR)\n         {\n-            chain.initWarning(strprintf(_(\"Error reading %s! All keys read correctly, but transaction data\"\n-                                          \" or address book entries might be missing or incorrect.\").translated,\n+            warnings.push_back(strprintf(_(\"Error reading %s! All keys read correctly, but transaction data\"\n+                                           \" or address book entries might be missing or incorrect.\"),\n                 walletFile));\n         }\n         else if (nLoadWalletRet == DBErrors::TOO_NEW) {\n-            chain.initError(strprintf(_(\"Error loading %s: Wallet requires newer version of %s\").translated, walletFile, PACKAGE_NAME));\n+            error = strprintf(_(\"Error loading %s: Wallet requires newer version of %s\"), walletFile, PACKAGE_NAME);\n             return nullptr;\n         }\n         else if (nLoadWalletRet == DBErrors::NEED_REWRITE)\n         {\n-            chain.initError(strprintf(_(\"Wallet needed to be rewritten: restart %s to complete\").translated, PACKAGE_NAME));\n+            error = strprintf(_(\"Wallet needed to be rewritten: restart %s to complete\"), PACKAGE_NAME);\n             return nullptr;\n         }\n         else {\n-            chain.initError(strprintf(_(\"Error loading %s\").translated, walletFile));\n+            error = strprintf(_(\"Error loading %s\"), walletFile);\n             return nullptr;\n         }\n     }\n@@ -4308,7 +4318,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n             walletInstance->WalletLogPrintf(\"Allowing wallet upgrade up to %i\\n\", nMaxVersion);\n         if (nMaxVersion < walletInstance->GetVersion())\n         {\n-            chain.initError(_(\"Cannot downgrade wallet\").translated);\n+            error = _(\"Cannot downgrade wallet\");\n             return nullptr;\n         }\n         walletInstance->SetMaxVersion(nMaxVersion);\n@@ -4321,7 +4331,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         // Do not upgrade versions to any version between HD_SPLIT and FEATURE_PRE_SPLIT_KEYPOOL unless already supporting HD_SPLIT\n         int max_version = walletInstance->GetVersion();\n         if (!walletInstance->CanSupportFeature(FEATURE_HD_SPLIT) && max_version >= FEATURE_HD_SPLIT && max_version < FEATURE_PRE_SPLIT_KEYPOOL) {\n-            chain.initError(_(\"Cannot upgrade a non HD split wallet without upgrading to support pre split keypool. Please use -upgradewallet=169900 or -upgradewallet with no version specified.\").translated);\n+            error = _(\"Cannot upgrade a non HD split wallet without upgrading to support pre split keypool. Please use -upgradewallet=169900 or -upgradewallet with no version specified.\");\n             return nullptr;\n         }\n \n@@ -4349,7 +4359,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         // Regenerate the keypool if upgraded to HD\n         if (hd_upgrade) {\n             if (!walletInstance->TopUpKeyPool()) {\n-                chain.initError(_(\"Unable to generate keys\").translated);\n+                error = _(\"Unable to generate keys\");\n                 return nullptr;\n             }\n         }\n@@ -4369,42 +4379,42 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n \n         // Top up the keypool\n         if (walletInstance->CanGenerateKeys() && !walletInstance->TopUpKeyPool()) {\n-            chain.initError(_(\"Unable to generate initial keys\").translated);\n+            error = _(\"Unable to generate initial keys\");\n             return nullptr;\n         }\n \n         auto locked_chain = chain.lock();\n         walletInstance->ChainStateFlushed(locked_chain->getTipLocator());\n     } else if (wallet_creation_flags & WALLET_FLAG_DISABLE_PRIVATE_KEYS) {\n         // Make it impossible to disable private keys after creation\n-        chain.initError(strprintf(_(\"Error loading %s: Private keys can only be disabled during creation\").translated, walletFile));\n+        error = strprintf(_(\"Error loading %s: Private keys can only be disabled during creation\"), walletFile);\n         return NULL;\n     } else if (walletInstance->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n         LOCK(walletInstance->cs_KeyStore);\n         if (!walletInstance->mapKeys.empty() || !walletInstance->mapCryptedKeys.empty()) {\n-            chain.initWarning(strprintf(_(\"Warning: Private keys detected in wallet {%s} with disabled private keys\").translated, walletFile));\n+            warnings.push_back(strprintf(_(\"Warning: Private keys detected in wallet {%s} with disabled private keys\"), walletFile));\n         }\n     }\n \n     if (!gArgs.GetArg(\"-addresstype\", \"\").empty() && !ParseOutputType(gArgs.GetArg(\"-addresstype\", \"\"), walletInstance->m_default_address_type)) {\n-        chain.initError(strprintf(_(\"Unknown address type '%s'\").translated, gArgs.GetArg(\"-addresstype\", \"\")));\n+        error = strprintf(_(\"Unknown address type '%s'\"), gArgs.GetArg(\"-addresstype\", \"\"));\n         return nullptr;\n     }\n \n     if (!gArgs.GetArg(\"-changetype\", \"\").empty() && !ParseOutputType(gArgs.GetArg(\"-changetype\", \"\"), walletInstance->m_default_change_type)) {\n-        chain.initError(strprintf(_(\"Unknown change type '%s'\").translated, gArgs.GetArg(\"-changetype\", \"\")));\n+        error = strprintf(_(\"Unknown change type '%s'\"), gArgs.GetArg(\"-changetype\", \"\"));\n         return nullptr;\n     }\n \n     if (gArgs.IsArgSet(\"-mintxfee\")) {\n         CAmount n = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-mintxfee\", \"\"), n) || 0 == n) {\n-            chain.initError(AmountErrMsg(\"mintxfee\", gArgs.GetArg(\"-mintxfee\", \"\")).translated);\n+            error = AmountErrMsg(\"mintxfee\", gArgs.GetArg(\"-mintxfee\", \"\"));\n             return nullptr;\n         }\n         if (n > HIGH_TX_FEE_PER_KB) {\n-            chain.initWarning(AmountHighWarn(\"-mintxfee\").translated + \" \" +\n-                              _(\"This is the minimum transaction fee you pay on every transaction.\").translated);\n+            warnings.push_back(AmountHighWarn(\"-mintxfee\"));\n+            warnings.push_back(_(\"This is the minimum transaction fee you pay on every transaction.\"));\n         }\n         walletInstance->m_min_fee = CFeeRate(n);\n     }\n@@ -4413,67 +4423,66 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     if (gArgs.IsArgSet(\"-fallbackfee\")) {\n         CAmount nFeePerK = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-fallbackfee\", \"\"), nFeePerK)) {\n-            chain.initError(strprintf(_(\"Invalid amount for -fallbackfee=<amount>: '%s'\").translated, gArgs.GetArg(\"-fallbackfee\", \"\")));\n+            error = strprintf(_(\"Invalid amount for -fallbackfee=<amount>: '%s'\"), gArgs.GetArg(\"-fallbackfee\", \"\"));\n             return nullptr;\n         }\n         if (nFeePerK > HIGH_TX_FEE_PER_KB) {\n-            chain.initWarning(AmountHighWarn(\"-fallbackfee\").translated + \" \" +\n-                              _(\"This is the transaction fee you may pay when fee estimates are not available.\").translated);\n+            warnings.push_back(AmountHighWarn(\"-fallbackfee\"));\n+            warnings.push_back(_(\"This is the transaction fee you may pay when fee estimates are not available.\"));\n         }\n         walletInstance->m_fallback_fee = CFeeRate(nFeePerK);\n         walletInstance->m_allow_fallback_fee = nFeePerK != 0; //disable fallback fee in case value was set to 0, enable if non-null value\n     }\n     if (gArgs.IsArgSet(\"-discardfee\")) {\n         CAmount nFeePerK = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-discardfee\", \"\"), nFeePerK)) {\n-            chain.initError(strprintf(_(\"Invalid amount for -discardfee=<amount>: '%s'\").translated, gArgs.GetArg(\"-discardfee\", \"\")));\n+            error = strprintf(_(\"Invalid amount for -discardfee=<amount>: '%s'\"), gArgs.GetArg(\"-discardfee\", \"\"));\n             return nullptr;\n         }\n         if (nFeePerK > HIGH_TX_FEE_PER_KB) {\n-            chain.initWarning(AmountHighWarn(\"-discardfee\").translated + \" \" +\n-                              _(\"This is the transaction fee you may discard if change is smaller than dust at this level\").translated);\n+            warnings.push_back(AmountHighWarn(\"-discardfee\"));\n+            warnings.push_back(_(\"This is the transaction fee you may discard if change is smaller than dust at this level\"));\n         }\n         walletInstance->m_discard_rate = CFeeRate(nFeePerK);\n     }\n     if (gArgs.IsArgSet(\"-paytxfee\")) {\n         CAmount nFeePerK = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-paytxfee\", \"\"), nFeePerK)) {\n-            chain.initError(AmountErrMsg(\"paytxfee\", gArgs.GetArg(\"-paytxfee\", \"\")).translated);\n+            error = AmountErrMsg(\"paytxfee\", gArgs.GetArg(\"-paytxfee\", \"\"));\n             return nullptr;\n         }\n         if (nFeePerK > HIGH_TX_FEE_PER_KB) {\n-            chain.initWarning(AmountHighWarn(\"-paytxfee\").translated + \" \" +\n-                              _(\"This is the transaction fee you will pay if you send a transaction.\").translated);\n+            warnings.push_back(AmountHighWarn(\"-paytxfee\"));\n+            warnings.push_back(_(\"This is the transaction fee you will pay if you send a transaction.\"));\n         }\n         walletInstance->m_pay_tx_fee = CFeeRate(nFeePerK, 1000);\n         if (walletInstance->m_pay_tx_fee < chain.relayMinFee()) {\n-            chain.initError(strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\").translated,\n-                gArgs.GetArg(\"-paytxfee\", \"\"), chain.relayMinFee().ToString()));\n+            error = strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\"),\n+                gArgs.GetArg(\"-paytxfee\", \"\"), chain.relayMinFee().ToString());\n             return nullptr;\n         }\n     }\n \n-    if (gArgs.IsArgSet(\"-maxtxfee\"))\n-    {\n+    if (gArgs.IsArgSet(\"-maxtxfee\")) {\n         CAmount nMaxFee = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-maxtxfee\", \"\"), nMaxFee)) {\n-            chain.initError(AmountErrMsg(\"maxtxfee\", gArgs.GetArg(\"-maxtxfee\", \"\")).translated);\n+            error = AmountErrMsg(\"maxtxfee\", gArgs.GetArg(\"-maxtxfee\", \"\"));\n             return nullptr;\n         }\n         if (nMaxFee > HIGH_MAX_TX_FEE) {\n-            chain.initWarning(_(\"-maxtxfee is set very high! Fees this large could be paid on a single transaction.\").translated);\n+            warnings.push_back(_(\"-maxtxfee is set very high! Fees this large could be paid on a single transaction.\"));\n         }\n         if (CFeeRate(nMaxFee, 1000) < chain.relayMinFee()) {\n-            chain.initError(strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s' (must be at least the minrelay fee of %s to prevent stuck transactions)\").translated,\n-                                       gArgs.GetArg(\"-maxtxfee\", \"\"), chain.relayMinFee().ToString()));\n+            error = strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s' (must be at least the minrelay fee of %s to prevent stuck transactions)\"),\n+                gArgs.GetArg(\"-maxtxfee\", \"\"), chain.relayMinFee().ToString());\n             return nullptr;\n         }\n         walletInstance->m_default_max_tx_fee = nMaxFee;\n     }\n \n     if (chain.relayMinFee().GetFeePerK() > HIGH_TX_FEE_PER_KB) {\n-        chain.initWarning(AmountHighWarn(\"-minrelaytxfee\").translated + \" \" +\n-                    _(\"The wallet will avoid paying less than the minimum relay fee.\").translated);\n+        warnings.push_back(AmountHighWarn(\"-minrelaytxfee\"));\n+        warnings.push_back(_(\"The wallet will avoid paying less than the minimum relay fee.\"));\n     }\n \n     walletInstance->m_confirm_target = gArgs.GetArg(\"-txconfirmtarget\", DEFAULT_TX_CONFIRM_TARGET);"
      },
      {
        "sha": "6f73cb9c58530eff39bf4abc2aaae928969f6fec",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad650db3fd51b7fcd3af5a5b8b81125b205d90d/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad650db3fd51b7fcd3af5a5b8b81125b205d90d/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=fad650db3fd51b7fcd3af5a5b8b81125b205d90d",
        "patch": "@@ -36,6 +36,8 @@\n \n #include <boost/signals2/signal.hpp>\n \n+struct bilingual_str;\n+\n //! Explicitly unload and delete the wallet.\n //! Blocks the current thread after signaling the unload intent so that all\n //! wallet clients release the wallet.\n@@ -48,7 +50,7 @@ bool RemoveWallet(const std::shared_ptr<CWallet>& wallet);\n bool HasWallets();\n std::vector<std::shared_ptr<CWallet>> GetWallets();\n std::shared_ptr<CWallet> GetWallet(const std::string& name);\n-std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const WalletLocation& location, std::string& error, std::string& warning);\n+std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const WalletLocation& location, bilingual_str& error, std::vector<bilingual_str>& warnings);\n \n enum class WalletCreationStatus {\n     SUCCESS,\n@@ -1272,7 +1274,7 @@ class CWallet final : public FillableSigningProvider, private interfaces::Chain:\n     static bool Verify(interfaces::Chain& chain, const WalletLocation& location, bool salvage_wallet, std::string& error_string, std::string& warning_string);\n \n     /* Initializes the wallet, returns a new CWallet instance or a null pointer in case of an error */\n-    static std::shared_ptr<CWallet> CreateWalletFromFile(interfaces::Chain& chain, const WalletLocation& location, uint64_t wallet_creation_flags = 0);\n+    static std::shared_ptr<CWallet> CreateWalletFromFile(interfaces::Chain& chain, const WalletLocation& location, bilingual_str& error, std::vector<bilingual_str>& warnings, uint64_t wallet_creation_flags = 0);\n \n     /**\n      * Wallet post-init setup"
      },
      {
        "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
        "filename": "test/functional/data/wallets/high_minversion/.walletlock",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad650db3fd51b7fcd3af5a5b8b81125b205d90d/test/functional/data/wallets/high_minversion/.walletlock",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad650db3fd51b7fcd3af5a5b8b81125b205d90d/test/functional/data/wallets/high_minversion/.walletlock",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/wallets/high_minversion/.walletlock?ref=fad650db3fd51b7fcd3af5a5b8b81125b205d90d"
      },
      {
        "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
        "filename": "test/functional/data/wallets/high_minversion/db.log",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad650db3fd51b7fcd3af5a5b8b81125b205d90d/test/functional/data/wallets/high_minversion/db.log",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad650db3fd51b7fcd3af5a5b8b81125b205d90d/test/functional/data/wallets/high_minversion/db.log",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/wallets/high_minversion/db.log?ref=fad650db3fd51b7fcd3af5a5b8b81125b205d90d"
      },
      {
        "sha": "99ab8092631c4a7da2236f46e7250e6c265d3b49",
        "filename": "test/functional/data/wallets/high_minversion/wallet.dat",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad650db3fd51b7fcd3af5a5b8b81125b205d90d/test/functional/data/wallets/high_minversion/wallet.dat",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad650db3fd51b7fcd3af5a5b8b81125b205d90d/test/functional/data/wallets/high_minversion/wallet.dat",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/wallets/high_minversion/wallet.dat?ref=fad650db3fd51b7fcd3af5a5b8b81125b205d90d"
      },
      {
        "sha": "4ef4be3406003dda2f8a9c7665a78ca4844a65b4",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad650db3fd51b7fcd3af5a5b8b81125b205d90d/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad650db3fd51b7fcd3af5a5b8b81125b205d90d/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=fad650db3fd51b7fcd3af5a5b8b81125b205d90d",
        "patch": "@@ -17,6 +17,8 @@\n     assert_raises_rpc_error,\n )\n \n+FEATURE_LATEST = 169900\n+\n \n class MultiWalletTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -27,6 +29,13 @@ def set_test_params(self):\n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n+    def add_options(self, parser):\n+        parser.add_argument(\n+            '--data_wallets_dir',\n+            default=os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data/wallets/'),\n+            help='Test data with wallet directories (default: %(default)s)',\n+        )\n+\n     def run_test(self):\n         node = self.nodes[0]\n \n@@ -323,6 +332,17 @@ def wallet_file(name):\n         self.nodes[0].unloadwallet(wallet)\n         self.nodes[1].loadwallet(wallet)\n \n+        # Fail to load if wallet is downgraded\n+        shutil.copytree(os.path.join(self.options.data_wallets_dir, 'high_minversion'), wallet_dir('high_minversion'))\n+        self.restart_node(0, extra_args=['-upgradewallet={}'.format(FEATURE_LATEST)])\n+        assert {'name': 'high_minversion'} in self.nodes[0].listwalletdir()['wallets']\n+        self.log.info(\"Fail -upgradewallet that results in downgrade\")\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Error loading {}: Wallet requires newer version of\".format(wallet_dir('high_minversion', 'wallet.dat')),\n+            lambda: self.nodes[0].loadwallet(filename='high_minversion'),\n+        )\n+\n \n if __name__ == '__main__':\n     MultiWalletTest().main()"
      }
    ]
  },
  {
    "sha": "fa504deefaf303bf3f236760336c465122a78937",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTUwNGRlZWZhZjMwM2JmM2YyMzY3NjAzMzZjNDY1MTIyYTc4OTM3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-08-20T15:55:08Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-09-03T14:33:01Z"
      },
      "message": "test: Print both messages on failure in assert_raises_message",
      "tree": {
        "sha": "9fc5a0c16b169bfe371ad3201765b45a327dce5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9fc5a0c16b169bfe371ad3201765b45a327dce5e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa504deefaf303bf3f236760336c465122a78937",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiOAgwAmZrpVh+d3V3r5tvx2kVlknHU9t9VqAbHhPa+oEU4FIVXSs5mU/oC13nS\nqV4mvOjiJwLrCsHsQubDh8RETXd/y2lKMHyBqhwRAequyI/zvH1+NL3aq0uRzmKt\ndq+l1/L7LA7USYkdl1exwZhpZramTsynptgeSnyLWc2z22KMmc6TA2bC/wifNNj9\n1C9vrCH6pexjhntbAFLiyETrMMKFP+OXxPOgx2CjdLfxRwilumMsu7jRXgC8+neI\nRr1IHS4i8Q8qTj7rX8sM87SoTzi70OII/3eeka4XVEgxdA3JOvgG0/RBujolfH6z\n4spuoehDiklX082t+YFtsKZEPtPh8Bj8pw0Wowqrdjs5TWY2nHFAm/ropakx/Cyv\nm2mFX42WXRrVoIrKm/6J2d4eEZdKR8etfj5C/fKByUPj+tmNrgKtuLEUAdVubVZ0\nQDY/Oa2lSGVOCaTgWi8+oFRyMofAHOgT9u68DfluJzeci7UJxRIbXVPu35kzHiQo\nBeA0y7dR\n=/SDC\n-----END PGP SIGNATURE-----",
        "payload": "tree 9fc5a0c16b169bfe371ad3201765b45a327dce5e\nparent fad650db3fd51b7fcd3af5a5b8b81125b205d90d\nauthor MarcoFalke <falke.marco@gmail.com> 1566316508 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1567521181 -0400\n\ntest: Print both messages on failure in assert_raises_message\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa504deefaf303bf3f236760336c465122a78937",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa504deefaf303bf3f236760336c465122a78937",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa504deefaf303bf3f236760336c465122a78937/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fad650db3fd51b7fcd3af5a5b8b81125b205d90d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad650db3fd51b7fcd3af5a5b8b81125b205d90d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fad650db3fd51b7fcd3af5a5b8b81125b205d90d"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 6,
      "deletions": 2
    },
    "files": [
      {
        "sha": "6d74447ada3699148931c4e156ac38b07a537cfc",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa504deefaf303bf3f236760336c465122a78937/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa504deefaf303bf3f236760336c465122a78937/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=fa504deefaf303bf3f236760336c465122a78937",
        "patch": "@@ -56,7 +56,9 @@ def assert_raises_message(exc, message, fun, *args, **kwds):\n         raise AssertionError(\"Use assert_raises_rpc_error() to test RPC failures\")\n     except exc as e:\n         if message is not None and message not in e.error['message']:\n-            raise AssertionError(\"Expected substring not found:\" + e.error['message'])\n+            raise AssertionError(\n+                \"Expected substring not found in error message:\\nsubstring: '{}'\\nerror message: '{}'.\".format(\n+                    message, e.error['message']))\n     except Exception as e:\n         raise AssertionError(\"Unexpected exception raised: \" + type(e).__name__)\n     else:\n@@ -116,7 +118,9 @@ def try_rpc(code, message, fun, *args, **kwds):\n         if (code is not None) and (code != e.error[\"code\"]):\n             raise AssertionError(\"Unexpected JSONRPC error code %i\" % e.error[\"code\"])\n         if (message is not None) and (message not in e.error['message']):\n-            raise AssertionError(\"Expected substring not found:\" + e.error['message'])\n+            raise AssertionError(\n+                \"Expected substring not found in error message:\\nsubstring: '{}'\\nerror message: '{}'.\".format(\n+                    message, e.error['message']))\n         return True\n     except Exception as e:\n         raise AssertionError(\"Unexpected exception raised: \" + type(e).__name__)"
      }
    ]
  }
]