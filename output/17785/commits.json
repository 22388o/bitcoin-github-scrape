[
  {
    "sha": "e9a6d8b13b0558b17cdafbd32fd2663b4138ff11",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOWE2ZDhiMTNiMDU1OGIxN2NkYWZiZDMyZmQyNjYzYjQxMzhmZjEx",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-05T07:22:53Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-09-07T18:03:44Z"
      },
      "message": "p2p: Unify Send and Receive protocol versions\n\nThere is no change in behavior on the P2P network.",
      "tree": {
        "sha": "2b62861d483b0ed72ff207e24742b6176e860df4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2b62861d483b0ed72ff207e24742b6176e860df4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e9a6d8b13b0558b17cdafbd32fd2663b4138ff11",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl9WdgAACgkQQQEIES5+\nqB8tqg//QGczkPbKj8NlaNMOq1SyxH36A8Sc9CylWZACc/tfl/1IT04BTQ7QoUlW\n6mJMQZD5qkdeYRWz+8TCY/f6vxRDJ0SuNSY/tFtx9CQtBJvSH9+fQ2Gr5eXj+Lqj\nEX19gx4qof7H004Zmkzr740J4D19K6TUumOAOeEup1BbAVxSlGz4GQge/pTaHam/\nlrdL/HruzF40ZypFcM3yrOJ0MXkkrF/LI3B8JJ7EAgEA7JV9oVB9AVzkWeTJrDZd\nhVEZJe9sWL0PRIrcrLvRxKd4JC6RsUBwMywVy9GD2M1xHRrEnxedZwvbM2Po03uG\nHFcidvCjsSc1XqON3/P2h0in99U/eCAvGeMSVO94WQ92KjqSGr5BtYoDJ0LNKbz7\njW5kTQuSPDZ7NeP44bwiGaJoREyWSED52raZe37qIJGfWBeSjlmzY1jJlLDmdH0T\nCRWAEtj/SCAahOE1ZlHUNx7WQ5OkkCHhA8t7ev0lMSQ8AsgsT20DSvcpuui6p/lJ\neQ16ARn3tJycqPeAkoQMqbUR7f9dJnUb8IzjkABcav8Am2J98m1PHpCAq33JkLLX\n2oEeL3guiRBJpit8GAa15Us0iKSXzHCub4auPd0yf7EmzDb+eYaOYVM0cU36UCZI\nS+EepwXtKYSoQAORD6/qcaEO5aQepWMeSp1n+zLVpaXIxEgLmSc=\n=qaIe\n-----END PGP SIGNATURE-----",
        "payload": "tree 2b62861d483b0ed72ff207e24742b6176e860df4\nparent 147d50d63e07f600b414273a9f6b84f9f4ad9696\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1591341773 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1599501824 +0300\n\np2p: Unify Send and Receive protocol versions\n\nThere is no change in behavior on the P2P network.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9a6d8b13b0558b17cdafbd32fd2663b4138ff11",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e9a6d8b13b0558b17cdafbd32fd2663b4138ff11",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9a6d8b13b0558b17cdafbd32fd2663b4138ff11/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "147d50d63e07f600b414273a9f6b84f9f4ad9696",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/147d50d63e07f600b414273a9f6b84f9f4ad9696",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/147d50d63e07f600b414273a9f6b84f9f4ad9696"
      }
    ],
    "stats": {
      "total": 112,
      "additions": 39,
      "deletions": 73
    },
    "files": [
      {
        "sha": "84f1f9f06809d1e57b968255a53caed3420a08e5",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 26,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9a6d8b13b0558b17cdafbd32fd2663b4138ff11/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9a6d8b13b0558b17cdafbd32fd2663b4138ff11/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=e9a6d8b13b0558b17cdafbd32fd2663b4138ff11",
        "patch": "@@ -621,32 +621,6 @@ bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete\n     return true;\n }\n \n-void CNode::SetSendVersion(int nVersionIn)\n-{\n-    // Send version may only be changed in the version message, and\n-    // only one version message is allowed per session. We can therefore\n-    // treat this value as const and even atomic as long as it's only used\n-    // once a version message has been successfully processed. Any attempt to\n-    // set this twice is an error.\n-    if (nSendVersion != 0) {\n-        error(\"Send version already set for node: %i. Refusing to change from %i to %i\", id, nSendVersion, nVersionIn);\n-    } else {\n-        nSendVersion = nVersionIn;\n-    }\n-}\n-\n-int CNode::GetSendVersion() const\n-{\n-    // The send version should always be explicitly set to\n-    // INIT_PROTO_VERSION rather than using this value until SetSendVersion\n-    // has been called.\n-    if (nSendVersion == 0) {\n-        error(\"Requesting unset send version for node: %i. Using %i\", id, INIT_PROTO_VERSION);\n-        return INIT_PROTO_VERSION;\n-    }\n-    return nSendVersion;\n-}\n-\n int V1TransportDeserializer::readHeader(const char *pch, unsigned int nBytes)\n {\n     // copy data to temporary parsing buffer"
      },
      {
        "sha": "021abb5982431c6a32225fdb6ba5f149e73dfb1f",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 5,
        "deletions": 8,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9a6d8b13b0558b17cdafbd32fd2663b4138ff11/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9a6d8b13b0558b17cdafbd32fd2663b4138ff11/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=e9a6d8b13b0558b17cdafbd32fd2663b4138ff11",
        "patch": "@@ -827,7 +827,6 @@ class CNode\n \n     std::deque<CInv> vRecvGetData;\n     uint64_t nRecvBytes GUARDED_BY(cs_vRecv){0};\n-    std::atomic<int> nRecvVersion{INIT_PROTO_VERSION};\n \n     std::atomic<int64_t> nLastSend{0};\n     std::atomic<int64_t> nLastRecv{0};\n@@ -1014,6 +1013,7 @@ class CNode\n     const NodeId id;\n     const uint64_t nLocalHostNonce;\n     const ConnectionType m_conn_type;\n+    std::atomic<int> m_greatest_common_version{INIT_PROTO_VERSION};\n \n     //! Services offered to this peer.\n     //!\n@@ -1033,7 +1033,6 @@ class CNode\n     const ServiceFlags nLocalServices;\n \n     const int nMyStartingHeight;\n-    int nSendVersion{0};\n     NetPermissionFlags m_permissionFlags{ PF_NONE };\n     std::list<CNetMessage> vRecvMsg;  // Used only by SocketHandler thread\n \n@@ -1065,16 +1064,14 @@ class CNode\n \n     bool ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete);\n \n-    void SetRecvVersion(int nVersionIn)\n+    void SetCommonVersion(int greatest_common_version)\n     {\n-        nRecvVersion = nVersionIn;\n+        m_greatest_common_version = greatest_common_version;\n     }\n-    int GetRecvVersion() const\n+    int GetCommonVersion() const\n     {\n-        return nRecvVersion;\n+        return m_greatest_common_version;\n     }\n-    void SetSendVersion(int nVersionIn);\n-    int GetSendVersion() const;\n \n     CService GetAddrLocal() const;\n     //! May not be called more than once"
      },
      {
        "sha": "e75fe59f08124806790e5d531dfd790f9da12876",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9a6d8b13b0558b17cdafbd32fd2663b4138ff11/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9a6d8b13b0558b17cdafbd32fd2663b4138ff11/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=e9a6d8b13b0558b17cdafbd32fd2663b4138ff11",
        "patch": "@@ -669,12 +669,12 @@ static void MaybeSetPeerAsAnnouncingHeaderAndIDs(NodeId nodeid, CConnman& connma\n                 // As per BIP152, we only get 3 of our peers to announce\n                 // blocks using compact encodings.\n                 connman.ForNode(lNodesAnnouncingHeaderAndIDs.front(), [&connman, nCMPCTBLOCKVersion](CNode* pnodeStop){\n-                    connman.PushMessage(pnodeStop, CNetMsgMaker(pnodeStop->GetSendVersion()).Make(NetMsgType::SENDCMPCT, /*fAnnounceUsingCMPCTBLOCK=*/false, nCMPCTBLOCKVersion));\n+                    connman.PushMessage(pnodeStop, CNetMsgMaker(pnodeStop->GetCommonVersion()).Make(NetMsgType::SENDCMPCT, /*fAnnounceUsingCMPCTBLOCK=*/false, nCMPCTBLOCKVersion));\n                     return true;\n                 });\n                 lNodesAnnouncingHeaderAndIDs.pop_front();\n             }\n-            connman.PushMessage(pfrom, CNetMsgMaker(pfrom->GetSendVersion()).Make(NetMsgType::SENDCMPCT, /*fAnnounceUsingCMPCTBLOCK=*/true, nCMPCTBLOCKVersion));\n+            connman.PushMessage(pfrom, CNetMsgMaker(pfrom->GetCommonVersion()).Make(NetMsgType::SENDCMPCT, /*fAnnounceUsingCMPCTBLOCK=*/true, nCMPCTBLOCKVersion));\n             lNodesAnnouncingHeaderAndIDs.push_back(pfrom->GetId());\n             return true;\n         });\n@@ -1585,7 +1585,7 @@ void static ProcessGetBlockData(CNode& pfrom, const CChainParams& chainparams, c\n             LogPrint(BCLog::NET, \"%s: ignoring request from peer=%i for old block that isn't in the main chain\\n\", __func__, pfrom.GetId());\n         }\n     }\n-    const CNetMsgMaker msgMaker(pfrom.GetSendVersion());\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n     // disconnect node in case we have reached the outbound limit for serving historical blocks\n     if (send &&\n         connman.OutboundTargetReached(true) &&\n@@ -1728,7 +1728,7 @@ void static ProcessGetData(CNode& pfrom, const CChainParams& chainparams, CConnm\n \n     std::deque<CInv>::iterator it = pfrom.vRecvGetData.begin();\n     std::vector<CInv> vNotFound;\n-    const CNetMsgMaker msgMaker(pfrom.GetSendVersion());\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n \n     const std::chrono::seconds now = GetTime<std::chrono::seconds>();\n     // Get last mempool request time\n@@ -1834,14 +1834,14 @@ void PeerManager::SendBlockTransactions(CNode& pfrom, const CBlock& block, const\n         resp.txn[i] = block.vtx[req.indexes[i]];\n     }\n     LOCK(cs_main);\n-    const CNetMsgMaker msgMaker(pfrom.GetSendVersion());\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n     int nSendFlags = State(pfrom.GetId())->fWantsCmpctWitness ? 0 : SERIALIZE_TRANSACTION_NO_WITNESS;\n     m_connman.PushMessage(&pfrom, msgMaker.Make(nSendFlags, NetMsgType::BLOCKTXN, resp));\n }\n \n void PeerManager::ProcessHeadersMessage(CNode& pfrom, const std::vector<CBlockHeader>& headers, bool via_compact_block)\n {\n-    const CNetMsgMaker msgMaker(pfrom.GetSendVersion());\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n     size_t nCount = headers.size();\n \n     if (nCount == 0) {\n@@ -2211,7 +2211,7 @@ static void ProcessGetCFilters(CNode& peer, CDataStream& vRecv, const CChainPara\n     }\n \n     for (const auto& filter : filters) {\n-        CSerializedNetMsg msg = CNetMsgMaker(peer.GetSendVersion())\n+        CSerializedNetMsg msg = CNetMsgMaker(peer.GetCommonVersion())\n             .Make(NetMsgType::CFILTER, filter);\n         connman.PushMessage(&peer, std::move(msg));\n     }\n@@ -2263,7 +2263,7 @@ static void ProcessGetCFHeaders(CNode& peer, CDataStream& vRecv, const CChainPar\n         return;\n     }\n \n-    CSerializedNetMsg msg = CNetMsgMaker(peer.GetSendVersion())\n+    CSerializedNetMsg msg = CNetMsgMaker(peer.GetCommonVersion())\n         .Make(NetMsgType::CFHEADERS,\n               filter_type_ser,\n               stop_index->GetBlockHash(),\n@@ -2315,7 +2315,7 @@ static void ProcessGetCFCheckPt(CNode& peer, CDataStream& vRecv, const CChainPar\n         }\n     }\n \n-    CSerializedNetMsg msg = CNetMsgMaker(peer.GetSendVersion())\n+    CSerializedNetMsg msg = CNetMsgMaker(peer.GetCommonVersion())\n         .Make(NetMsgType::CFCHECKPT,\n               filter_type_ser,\n               stop_index->GetBlockHash(),\n@@ -2406,10 +2406,10 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n             PushNodeVersion(pfrom, m_connman, GetAdjustedTime());\n \n         if (nVersion >= WTXID_RELAY_VERSION) {\n-            m_connman.PushMessage(&pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::WTXIDRELAY));\n+            m_connman.PushMessage(&pfrom, CNetMsgMaker(nSendVersion).Make(NetMsgType::WTXIDRELAY));\n         }\n \n-        m_connman.PushMessage(&pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERACK));\n+        m_connman.PushMessage(&pfrom, CNetMsgMaker(nSendVersion).Make(NetMsgType::VERACK));\n \n         pfrom.nServices = nServices;\n         pfrom.SetAddrLocal(addrMe);\n@@ -2431,7 +2431,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n         }\n \n         // Change version\n-        pfrom.SetSendVersion(nSendVersion);\n+        pfrom.SetCommonVersion(nSendVersion);\n         pfrom.nVersion = nVersion;\n \n         if((nServices & NODE_WITNESS))\n@@ -2520,11 +2520,11 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n     }\n \n     // At this point, the outgoing message serialization version can't change.\n-    const CNetMsgMaker msgMaker(pfrom.GetSendVersion());\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n \n     if (msg_type == NetMsgType::VERACK)\n     {\n-        pfrom.SetRecvVersion(std::min(pfrom.nVersion.load(), PROTOCOL_VERSION));\n+        pfrom.SetCommonVersion(std::min(pfrom.nVersion.load(), PROTOCOL_VERSION));\n \n         if (!pfrom.IsInboundConn()) {\n             // Mark this node as currently connected, so we update its timestamp later.\n@@ -3872,7 +3872,7 @@ bool PeerManager::ProcessMessages(CNode* pfrom, std::atomic<bool>& interruptMsgP\n     }\n     CNetMessage& msg(msgs.front());\n \n-    msg.SetVersion(pfrom->GetRecvVersion());\n+    msg.SetVersion(pfrom->GetCommonVersion());\n     // Check network magic\n     if (!msg.m_valid_netmagic) {\n         LogPrint(BCLog::NET, \"PROCESSMESSAGE: INVALID MESSAGESTART %s peer=%d\\n\", SanitizeString(msg.m_command), pfrom->GetId());\n@@ -3920,7 +3920,7 @@ void PeerManager::ConsiderEviction(CNode& pto, int64_t time_in_seconds)\n     AssertLockHeld(cs_main);\n \n     CNodeState &state = *State(pto.GetId());\n-    const CNetMsgMaker msgMaker(pto.GetSendVersion());\n+    const CNetMsgMaker msgMaker(pto.GetCommonVersion());\n \n     if (!state.m_chain_sync.m_protect && pto.IsOutboundOrBlockRelayConn() && state.fSyncStarted) {\n         // This is an outbound peer subject to disconnection if they don't\n@@ -4082,7 +4082,7 @@ bool PeerManager::SendMessages(CNode* pto)\n         return true;\n \n     // If we get here, the outgoing message serialization version is set and can't change.\n-    const CNetMsgMaker msgMaker(pto->GetSendVersion());\n+    const CNetMsgMaker msgMaker(pto->GetCommonVersion());\n \n     //\n     // Message: ping"
      },
      {
        "sha": "b7cd12053ac5a7d0def6cf57bd028c147f5cee1a",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9a6d8b13b0558b17cdafbd32fd2663b4138ff11/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9a6d8b13b0558b17cdafbd32fd2663b4138ff11/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=e9a6d8b13b0558b17cdafbd32fd2663b4138ff11",
        "patch": "@@ -85,7 +85,7 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n     // Mock an outbound peer\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n     CNode dummyNode1(id++, ServiceFlags(NODE_NETWORK | NODE_WITNESS), 0, INVALID_SOCKET, addr1, 0, 0, CAddress(), \"\", ConnectionType::OUTBOUND_FULL_RELAY);\n-    dummyNode1.SetSendVersion(PROTOCOL_VERSION);\n+    dummyNode1.SetCommonVersion(PROTOCOL_VERSION);\n \n     peerLogic->InitializeNode(&dummyNode1);\n     dummyNode1.nVersion = 1;\n@@ -138,7 +138,7 @@ static void AddRandomOutboundPeer(std::vector<CNode *> &vNodes, PeerManager &pee\n     CAddress addr(ip(g_insecure_rand_ctx.randbits(32)), NODE_NONE);\n     vNodes.emplace_back(new CNode(id++, ServiceFlags(NODE_NETWORK | NODE_WITNESS), 0, INVALID_SOCKET, addr, 0, 0, CAddress(), \"\", ConnectionType::OUTBOUND_FULL_RELAY));\n     CNode &node = *vNodes.back();\n-    node.SetSendVersion(PROTOCOL_VERSION);\n+    node.SetCommonVersion(PROTOCOL_VERSION);\n \n     peerLogic.InitializeNode(&node);\n     node.nVersion = 1;\n@@ -230,7 +230,7 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n     banman->ClearBanned();\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n     CNode dummyNode1(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr1, 0, 0, CAddress(), \"\", ConnectionType::INBOUND);\n-    dummyNode1.SetSendVersion(PROTOCOL_VERSION);\n+    dummyNode1.SetCommonVersion(PROTOCOL_VERSION);\n     peerLogic->InitializeNode(&dummyNode1);\n     dummyNode1.nVersion = 1;\n     dummyNode1.fSuccessfullyConnected = true;\n@@ -244,7 +244,7 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n \n     CAddress addr2(ip(0xa0b0c002), NODE_NONE);\n     CNode dummyNode2(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr2, 1, 1, CAddress(), \"\", ConnectionType::INBOUND);\n-    dummyNode2.SetSendVersion(PROTOCOL_VERSION);\n+    dummyNode2.SetCommonVersion(PROTOCOL_VERSION);\n     peerLogic->InitializeNode(&dummyNode2);\n     dummyNode2.nVersion = 1;\n     dummyNode2.fSuccessfullyConnected = true;\n@@ -281,7 +281,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n \n     CAddress addr(ip(0xa0b0c001), NODE_NONE);\n     CNode dummyNode(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr, 4, 4, CAddress(), \"\", ConnectionType::INBOUND);\n-    dummyNode.SetSendVersion(PROTOCOL_VERSION);\n+    dummyNode.SetCommonVersion(PROTOCOL_VERSION);\n     peerLogic->InitializeNode(&dummyNode);\n     dummyNode.nVersion = 1;\n     dummyNode.fSuccessfullyConnected = true;"
      },
      {
        "sha": "a85c35324391505f39c0f04c945261ddf8583264",
        "filename": "src/test/fuzz/net.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 15,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9a6d8b13b0558b17cdafbd32fd2663b4138ff11/src/test/fuzz/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9a6d8b13b0558b17cdafbd32fd2663b4138ff11/src/test/fuzz/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/net.cpp?ref=e9a6d8b13b0558b17cdafbd32fd2663b4138ff11",
        "patch": "@@ -48,7 +48,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n                fuzzed_data_provider.ConsumeRandomLengthString(32),\n                fuzzed_data_provider.PickValueInArray({ConnectionType::INBOUND, ConnectionType::OUTBOUND_FULL_RELAY, ConnectionType::MANUAL, ConnectionType::FEELER, ConnectionType::BLOCK_RELAY, ConnectionType::ADDR_FETCH})};\n     while (fuzzed_data_provider.ConsumeBool()) {\n-        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 12)) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 11)) {\n         case 0: {\n             node.CloseSocketDisconnect();\n             break;\n@@ -58,7 +58,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             break;\n         }\n         case 2: {\n-            node.SetSendVersion(fuzzed_data_provider.ConsumeIntegral<int>());\n+            node.SetCommonVersion(fuzzed_data_provider.ConsumeIntegral<int>());\n             break;\n         }\n         case 3: {\n@@ -71,21 +71,17 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             break;\n         }\n         case 4: {\n-            node.SetRecvVersion(fuzzed_data_provider.ConsumeIntegral<int>());\n-            break;\n-        }\n-        case 5: {\n             const CNode* add_ref_node = node.AddRef();\n             assert(add_ref_node == &node);\n             break;\n         }\n-        case 6: {\n+        case 5: {\n             if (node.GetRefCount() > 0) {\n                 node.Release();\n             }\n             break;\n         }\n-        case 7: {\n+        case 6: {\n             if (node.m_addr_known == nullptr) {\n                 break;\n             }\n@@ -96,7 +92,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             node.AddAddressKnown(*addr_opt);\n             break;\n         }\n-        case 8: {\n+        case 7: {\n             if (node.m_addr_known == nullptr) {\n                 break;\n             }\n@@ -108,27 +104,27 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             node.PushAddress(*addr_opt, fast_random_context);\n             break;\n         }\n-        case 9: {\n+        case 8: {\n             const std::optional<CInv> inv_opt = ConsumeDeserializable<CInv>(fuzzed_data_provider);\n             if (!inv_opt) {\n                 break;\n             }\n             node.AddKnownTx(inv_opt->hash);\n             break;\n         }\n-        case 10: {\n+        case 9: {\n             node.PushTxInventory(ConsumeUInt256(fuzzed_data_provider));\n             break;\n         }\n-        case 11: {\n+        case 10: {\n             const std::optional<CService> service_opt = ConsumeDeserializable<CService>(fuzzed_data_provider);\n             if (!service_opt) {\n                 break;\n             }\n             node.SetAddrLocal(*service_opt);\n             break;\n         }\n-        case 12: {\n+        case 11: {\n             const std::vector<uint8_t> b = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n             bool complete;\n             node.ReceiveMsgBytes((const char*)b.data(), b.size(), complete);\n@@ -143,10 +139,9 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     (void)node.GetLocalNonce();\n     (void)node.GetLocalServices();\n     (void)node.GetMyStartingHeight();\n-    (void)node.GetRecvVersion();\n     const int ref_count = node.GetRefCount();\n     assert(ref_count >= 0);\n-    (void)node.GetSendVersion();\n+    (void)node.GetCommonVersion();\n     (void)node.RelayAddrsWithConn();\n \n     const NetPermissionFlags net_permission_flags = fuzzed_data_provider.ConsumeBool() ?"
      },
      {
        "sha": "3ef03137ecfdd20357c21b66d297bd479ced0f30",
        "filename": "src/test/fuzz/process_message.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9a6d8b13b0558b17cdafbd32fd2663b4138ff11/src/test/fuzz/process_message.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9a6d8b13b0558b17cdafbd32fd2663b4138ff11/src/test/fuzz/process_message.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/process_message.cpp?ref=e9a6d8b13b0558b17cdafbd32fd2663b4138ff11",
        "patch": "@@ -71,7 +71,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     CNode& p2p_node = *MakeUnique<CNode>(0, ServiceFlags(NODE_NETWORK | NODE_WITNESS | NODE_BLOOM), 0, INVALID_SOCKET, CAddress{CService{in_addr{0x0100007f}, 7777}, NODE_NETWORK}, 0, 0, CAddress{}, std::string{}, ConnectionType::OUTBOUND_FULL_RELAY).release();\n     p2p_node.fSuccessfullyConnected = true;\n     p2p_node.nVersion = PROTOCOL_VERSION;\n-    p2p_node.SetSendVersion(PROTOCOL_VERSION);\n+    p2p_node.SetCommonVersion(PROTOCOL_VERSION);\n     connman.AddTestNode(p2p_node);\n     g_setup->m_node.peerman->InitializeNode(&p2p_node);\n     try {"
      },
      {
        "sha": "f722eeac3a68e425c95f12c4490ecfc0f7634f7f",
        "filename": "src/test/fuzz/process_messages.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9a6d8b13b0558b17cdafbd32fd2663b4138ff11/src/test/fuzz/process_messages.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9a6d8b13b0558b17cdafbd32fd2663b4138ff11/src/test/fuzz/process_messages.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/process_messages.cpp?ref=e9a6d8b13b0558b17cdafbd32fd2663b4138ff11",
        "patch": "@@ -51,7 +51,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         p2p_node.fSuccessfullyConnected = true;\n         p2p_node.fPauseSend = false;\n         p2p_node.nVersion = PROTOCOL_VERSION;\n-        p2p_node.SetSendVersion(PROTOCOL_VERSION);\n+        p2p_node.SetCommonVersion(PROTOCOL_VERSION);\n         g_setup->m_node.peerman->InitializeNode(&p2p_node);\n \n         connman.AddTestNode(p2p_node);"
      }
    ]
  },
  {
    "sha": "8d2026796a6f7add0c2cda9806e759817d1eae6f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZDIwMjY3OTZhNmY3YWRkMGMyY2RhOTgwNmU3NTk4MTdkMWVhZTZm",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-05T07:23:11Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-09-07T18:03:54Z"
      },
      "message": "refactor: Rename local variable nSendVersion",
      "tree": {
        "sha": "fb5ab2bc2c3cc1c9a37ce4e6d11310aa9589d83e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fb5ab2bc2c3cc1c9a37ce4e6d11310aa9589d83e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d2026796a6f7add0c2cda9806e759817d1eae6f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl9WdgoACgkQQQEIES5+\nqB91rw//epNaklBSu5l28t4gEmb4zg6OAPdIQWZK9mBnhQeKfvh+A3f21C76G/6j\n0BqJ8lYPkP+bnWqxPf7Wnmk7lWNDk63a24DOOShVtUNXsirgxeaDIeMxXVOn+DYC\nKVQgrRC45BubJQ6D2OwkRvgZiXWbFW68e1TdkTifTwxRdUrDll2AJBL15ALAC6jz\neXJ6gqamLUC1XpwYCdsqII+CiUKMMMHOHj9c1S645w6Gpl6XvADMDtQceJA1j23N\ndoYpDG7bIdupqvNYNq39SiYCZsd4b5j+k3xscD5KVpjP9WQ3WRYWaw/wqGWG6NZI\nP+OxNsoqRlQG7cJxCe0JHvQ1mv8+UmXMVJ34KKAvaw92fyjLRQyKzGUbhKNGUODF\nUP25ahY3uLNqNiR+5PIGPCjx1kQ3rQPZGMVel3AIDHPPdCJZQOYsTIc2ifZkFxAR\n7i8t1mHYXlUEuSXwexatFagVGfs2K0/dxO5A60KTZipKYHJ2Fx3MndReCvPEeUX0\n1MRgfBlSTKmIFn/piK96RIGTngUWHFntCL1bSYY1G0ypaNJHVXCYbab5Ks5y/1lw\n6O8MFjIxl5SX2L26eV0C07kXlYC16fhvX+9wUF7DQgTq/4zj2PZW/fyF8pUwZgM/\nHRLd9f7VXkbCj884yS4tw8x11Aou7buxXGuiwJwlgnJTBkA5ywU=\n=UTlT\n-----END PGP SIGNATURE-----",
        "payload": "tree fb5ab2bc2c3cc1c9a37ce4e6d11310aa9589d83e\nparent e9a6d8b13b0558b17cdafbd32fd2663b4138ff11\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1591341791 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1599501834 +0300\n\nrefactor: Rename local variable nSendVersion\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d2026796a6f7add0c2cda9806e759817d1eae6f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8d2026796a6f7add0c2cda9806e759817d1eae6f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d2026796a6f7add0c2cda9806e759817d1eae6f/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e9a6d8b13b0558b17cdafbd32fd2663b4138ff11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9a6d8b13b0558b17cdafbd32fd2663b4138ff11",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e9a6d8b13b0558b17cdafbd32fd2663b4138ff11"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 9,
      "deletions": 10
    },
    "files": [
      {
        "sha": "c23d1f6764feb71737969506a56a15e5896515a7",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 10,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d2026796a6f7add0c2cda9806e759817d1eae6f/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d2026796a6f7add0c2cda9806e759817d1eae6f/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=8d2026796a6f7add0c2cda9806e759817d1eae6f",
        "patch": "@@ -2350,13 +2350,11 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n         uint64_t nServiceInt;\n         ServiceFlags nServices;\n         int nVersion;\n-        int nSendVersion;\n         std::string cleanSubVer;\n         int nStartingHeight = -1;\n         bool fRelay = true;\n \n         vRecv >> nVersion >> nServiceInt >> nTime >> addrMe;\n-        nSendVersion = std::min(nVersion, PROTOCOL_VERSION);\n         nServices = ServiceFlags(nServiceInt);\n         if (!pfrom.IsInboundConn())\n         {\n@@ -2405,11 +2403,16 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n         if (pfrom.IsInboundConn())\n             PushNodeVersion(pfrom, m_connman, GetAdjustedTime());\n \n+        // Change version\n+        const int greatest_common_version = std::min(nVersion, PROTOCOL_VERSION);\n+        pfrom.SetCommonVersion(greatest_common_version);\n+        pfrom.nVersion = nVersion;\n+\n         if (nVersion >= WTXID_RELAY_VERSION) {\n-            m_connman.PushMessage(&pfrom, CNetMsgMaker(nSendVersion).Make(NetMsgType::WTXIDRELAY));\n+            m_connman.PushMessage(&pfrom, CNetMsgMaker(greatest_common_version).Make(NetMsgType::WTXIDRELAY));\n         }\n \n-        m_connman.PushMessage(&pfrom, CNetMsgMaker(nSendVersion).Make(NetMsgType::VERACK));\n+        m_connman.PushMessage(&pfrom, CNetMsgMaker(greatest_common_version).Make(NetMsgType::VERACK));\n \n         pfrom.nServices = nServices;\n         pfrom.SetAddrLocal(addrMe);\n@@ -2430,10 +2433,6 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n             pfrom.m_tx_relay->fRelayTxes = fRelay; // set to true after we get the first filter* message\n         }\n \n-        // Change version\n-        pfrom.SetCommonVersion(nSendVersion);\n-        pfrom.nVersion = nVersion;\n-\n         if((nServices & NODE_WITNESS))\n         {\n             LOCK(cs_main);\n@@ -2479,7 +2478,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n             }\n \n             // Get recent addresses\n-            m_connman.PushMessage(&pfrom, CNetMsgMaker(nSendVersion).Make(NetMsgType::GETADDR));\n+            m_connman.PushMessage(&pfrom, CNetMsgMaker(greatest_common_version).Make(NetMsgType::GETADDR));\n             pfrom.fGetAddr = true;\n \n             // Moves address from New to Tried table in Addrman, resolves\n@@ -2503,7 +2502,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n         // If the peer is old enough to have the old alert system, send it the final alert.\n         if (pfrom.nVersion <= 70012) {\n             CDataStream finalAlert(ParseHex(\"60010000000000000000000000ffffff7f00000000ffffff7ffeffff7f01ffffff7f00000000ffffff7f00ffffff7f002f555247454e543a20416c657274206b657920636f6d70726f6d697365642c2075706772616465207265717569726564004630440220653febd6410f470f6bae11cad19c48413becb1ac2c17f908fd0fd53bdc3abd5202206d0e9c96fe88d4a0f01ed9dedae2b6f9e00da94cad0fecaae66ecf689bf71b50\"), SER_NETWORK, PROTOCOL_VERSION);\n-            m_connman.PushMessage(&pfrom, CNetMsgMaker(nSendVersion).Make(\"alert\", finalAlert));\n+            m_connman.PushMessage(&pfrom, CNetMsgMaker(greatest_common_version).Make(\"alert\", finalAlert));\n         }\n \n         // Feeler connections exist only to verify if address is online."
      }
    ]
  },
  {
    "sha": "e084d45562b94827b3a7873895882fcaae9f4d48",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMDg0ZDQ1NTYyYjk0ODI3YjNhNzg3Mzg5NTg4MmZjYWFlOWY0ZDQ4",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-05T07:25:24Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-09-07T18:03:54Z"
      },
      "message": "p2p: Remove SetCommonVersion() from VERACK handler\n\nSetCommonVersion() is already called from the VERSION message handler.\nThere is no change in behavior on the P2P network.",
      "tree": {
        "sha": "3f34e388cd56e73f54e9c2646470e38762ce375f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3f34e388cd56e73f54e9c2646470e38762ce375f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e084d45562b94827b3a7873895882fcaae9f4d48",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl9WdgoACgkQQQEIES5+\nqB9QBBAAmVylErtZbZuDXbWpI/xrEUTJ74mI+uQ8JAbRusFRA0dONcTMHhh9QE5W\n4QNsKgb3i+ryVifz1FvkxRkyGQYY+ohwXU62FsJZXJbpolPHrVVNAuCJgf8DXaV0\n0YZy7TKkA4Q/+w1Wn2OvQHSWOU2miF9TqVCk7RqmuWYTTTmwFmT4/zqOJRvlPpru\nYBZBxwdjrZ2zkmMi6SOIEQBYyz/78WKGRC4MUERLle0dOnoCzHCuc5HTY4xgxHiJ\nXUZk+E2dGHqc1sBp9Zhb2STtB7R63C+3onDiTiTu7pratk/S+jtJGpCx9O3HXKOx\nDjUYUXf6xJ9kdf30Vo88YXVCV1ezFW3REAtxmTj1vzfMUcuHWA3Tm/nSSuVVmKMG\nXf6Sk7aOxc+RAqrkYaulvMzofr2XjGi4VxI89PteHtld4/kvbUmmx5CriImDeVU4\ncnkVNfEQzvHsNjjiCNVpr9QHd3a9qSmdCX580ID3wR8EnyB5O+mfVICCUn0fMdEi\n9vmZkp4DZkU+pvWR5kCQ8AHXi5mQUFClCjcw5KuS297LGuC1x1XrD0KTbvz9G/1O\nIlvVvJmXWJJwYregTVrWmgMA0e9OjlBSR+gXfLWjRsjouP1YreqGTyKjBWzSseFc\nCKYiiojpmxydqb7w1GmxZF9CCV9vJaY8FBMhZQsN4cBA+wWif48=\n=rMVi\n-----END PGP SIGNATURE-----",
        "payload": "tree 3f34e388cd56e73f54e9c2646470e38762ce375f\nparent 8d2026796a6f7add0c2cda9806e759817d1eae6f\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1591341924 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1599501834 +0300\n\np2p: Remove SetCommonVersion() from VERACK handler\n\nSetCommonVersion() is already called from the VERSION message handler.\nThere is no change in behavior on the P2P network.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e084d45562b94827b3a7873895882fcaae9f4d48",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e084d45562b94827b3a7873895882fcaae9f4d48",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e084d45562b94827b3a7873895882fcaae9f4d48/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d2026796a6f7add0c2cda9806e759817d1eae6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d2026796a6f7add0c2cda9806e759817d1eae6f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d2026796a6f7add0c2cda9806e759817d1eae6f"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 0,
      "deletions": 2
    },
    "files": [
      {
        "sha": "301b32aca712795dfa7c3e86f20c8ec591028c63",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e084d45562b94827b3a7873895882fcaae9f4d48/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e084d45562b94827b3a7873895882fcaae9f4d48/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=e084d45562b94827b3a7873895882fcaae9f4d48",
        "patch": "@@ -2523,8 +2523,6 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n \n     if (msg_type == NetMsgType::VERACK)\n     {\n-        pfrom.SetCommonVersion(std::min(pfrom.nVersion.load(), PROTOCOL_VERSION));\n-\n         if (!pfrom.IsInboundConn()) {\n             // Mark this node as currently connected, so we update its timestamp later.\n             LOCK(cs_main);"
      }
    ]
  },
  {
    "sha": "ddefb5c0b759950942ac03f28c43b548af7b4033",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZGVmYjVjMGI3NTk5NTA5NDJhYzAzZjI4YzQzYjU0OGFmN2I0MDMz",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-08-24T22:58:15Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-09-07T18:03:55Z"
      },
      "message": "p2p: Use the greatest common version in peer logic",
      "tree": {
        "sha": "d1b98e57c96e22669969ec20c1d450a5da93f96b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d1b98e57c96e22669969ec20c1d450a5da93f96b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ddefb5c0b759950942ac03f28c43b548af7b4033",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl9WdgsACgkQQQEIES5+\nqB/Nbg//SdBCwetmGcIpBn+Ed1afhpw21P7htkYO0/04ppc0EM1oIXlnwTAd8SuP\nK7vVBxclSuwzTxh4qmXeksVj1YECzznPHjIYi6uBegeQJrgIHhsDAWW2WIxePYRx\n3owA8nAe1YBpZdOFYoeYlBkq7vv8mLDKUCw2m0U41pjfaD0a1kCsf3F59hGd69aO\nfVYn0U+QaoJVY8L7Mbhv960ddgaA973VZsj3zV9nWqCUsweLgFxtLisfr9LBWQ7K\nm8CrMlMqzLc1YdsFaiWJcZamjQBC9wVhxNk6XTtheLiyjWsBNti3w9swAiAiZkJ4\n2IDK6C2KtiJgBqhQhU6+wrLCErB9lAoP0buRShEjY8UwW5nTPqLdIuKvcFBTt+Vj\nejJPurrm4rE/K0nCWwwj/d3Op5ISgP95xMne88nmSCmJSKeDZpz0UFqI976PjhRm\nbsFvApGrtTkAAicI6oBP7E/4nbn7uWnOj+0vxOjVaACSLaaK2B/AB63Ssuc4kMfT\n1nfqbHSrabt7x0wru9GGxIrIbqMrXP1jiIrnl13veX0t2dLuftu13Zuiu1llnggF\nsvwzce4LVO7qGpwF2e/907AeOHcwBlhaJlFFjpZfH+8aQ72dQYvSNjl7FLOMQqsN\nhMqL3p56t0C/cxfAyvBQyzrTaaIN/MyaF/fxuX1KKQoBAxZbHLI=\n=VeZg\n-----END PGP SIGNATURE-----",
        "payload": "tree d1b98e57c96e22669969ec20c1d450a5da93f96b\nparent e084d45562b94827b3a7873895882fcaae9f4d48\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1598309895 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1599501835 +0300\n\np2p: Use the greatest common version in peer logic\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddefb5c0b759950942ac03f28c43b548af7b4033",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ddefb5c0b759950942ac03f28c43b548af7b4033",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddefb5c0b759950942ac03f28c43b548af7b4033/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e084d45562b94827b3a7873895882fcaae9f4d48",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e084d45562b94827b3a7873895882fcaae9f4d48",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e084d45562b94827b3a7873895882fcaae9f4d48"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 10,
      "deletions": 11
    },
    "files": [
      {
        "sha": "db44e8cbb0b0826363a7dbda2508c99c10b218e0",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddefb5c0b759950942ac03f28c43b548af7b4033/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddefb5c0b759950942ac03f28c43b548af7b4033/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=ddefb5c0b759950942ac03f28c43b548af7b4033",
        "patch": "@@ -1167,7 +1167,7 @@ void CConnman::InactivityCheck(CNode *pnode)\n             LogPrintf(\"socket sending timeout: %is\\n\", nTime - pnode->nLastSend);\n             pnode->fDisconnect = true;\n         }\n-        else if (nTime - pnode->nLastRecv > (pnode->nVersion > BIP0031_VERSION ? TIMEOUT_INTERVAL : 90*60))\n+        else if (nTime - pnode->nLastRecv > (pnode->GetCommonVersion() > BIP0031_VERSION ? TIMEOUT_INTERVAL : 90*60))\n         {\n             LogPrintf(\"socket receive timeout: %is\\n\", nTime - pnode->nLastRecv);\n             pnode->fDisconnect = true;"
      },
      {
        "sha": "72b3b173977719bcb2bfb6135db62f5998c706f6",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 10,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddefb5c0b759950942ac03f28c43b548af7b4033/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddefb5c0b759950942ac03f28c43b548af7b4033/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=ddefb5c0b759950942ac03f28c43b548af7b4033",
        "patch": "@@ -1359,7 +1359,7 @@ void PeerManager::NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_\n         LockAssertion lock(::cs_main);\n \n         // TODO: Avoid the repeated-serialization here\n-        if (pnode->nVersion < INVALID_CB_NO_BAN_VERSION || pnode->fDisconnect)\n+        if (pnode->GetCommonVersion() < INVALID_CB_NO_BAN_VERSION || pnode->fDisconnect)\n             return;\n         ProcessBlockAvailability(pnode->GetId());\n         CNodeState &state = *State(pnode->GetId());\n@@ -2408,7 +2408,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n         pfrom.SetCommonVersion(greatest_common_version);\n         pfrom.nVersion = nVersion;\n \n-        if (nVersion >= WTXID_RELAY_VERSION) {\n+        if (greatest_common_version >= WTXID_RELAY_VERSION) {\n             m_connman.PushMessage(&pfrom, CNetMsgMaker(greatest_common_version).Make(NetMsgType::WTXIDRELAY));\n         }\n \n@@ -2500,7 +2500,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n         AddTimeData(pfrom.addr, nTimeOffset);\n \n         // If the peer is old enough to have the old alert system, send it the final alert.\n-        if (pfrom.nVersion <= 70012) {\n+        if (greatest_common_version <= 70012) {\n             CDataStream finalAlert(ParseHex(\"60010000000000000000000000ffffff7f00000000ffffff7ffeffff7f01ffffff7f00000000ffffff7f00ffffff7f002f555247454e543a20416c657274206b657920636f6d70726f6d697365642c2075706772616465207265717569726564004630440220653febd6410f470f6bae11cad19c48413becb1ac2c17f908fd0fd53bdc3abd5202206d0e9c96fe88d4a0f01ed9dedae2b6f9e00da94cad0fecaae66ecf689bf71b50\"), SER_NETWORK, PROTOCOL_VERSION);\n             m_connman.PushMessage(&pfrom, CNetMsgMaker(greatest_common_version).Make(\"alert\", finalAlert));\n         }\n@@ -2533,14 +2533,14 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n                       pfrom.m_tx_relay == nullptr ? \"block-relay\" : \"full-relay\");\n         }\n \n-        if (pfrom.nVersion >= SENDHEADERS_VERSION) {\n+        if (pfrom.GetCommonVersion() >= SENDHEADERS_VERSION) {\n             // Tell our peer we prefer to receive headers rather than inv's\n             // We send this to non-NODE NETWORK peers as well, because even\n             // non-NODE NETWORK peers can announce blocks (such as pruning\n             // nodes)\n             m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::SENDHEADERS));\n         }\n-        if (pfrom.nVersion >= SHORT_IDS_BLOCKS_VERSION) {\n+        if (pfrom.GetCommonVersion() >= SHORT_IDS_BLOCKS_VERSION) {\n             // Tell our peer we are willing to provide version 1 or 2 cmpctblocks\n             // However, we do not request new block announcements using\n             // cmpctblock messages.\n@@ -2566,7 +2566,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n             pfrom.fDisconnect = true;\n             return;\n         }\n-        if (pfrom.nVersion >= WTXID_RELAY_VERSION) {\n+        if (pfrom.GetCommonVersion() >= WTXID_RELAY_VERSION) {\n             LOCK(cs_main);\n             if (!State(pfrom.GetId())->m_wtxid_relay) {\n                 State(pfrom.GetId())->m_wtxid_relay = true;\n@@ -3581,8 +3581,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n     }\n \n     if (msg_type == NetMsgType::PING) {\n-        if (pfrom.nVersion > BIP0031_VERSION)\n-        {\n+        if (pfrom.GetCommonVersion() > BIP0031_VERSION) {\n             uint64_t nonce = 0;\n             vRecv >> nonce;\n             // Echo the message back with the nonce. This allows for two useful features:\n@@ -4100,7 +4099,7 @@ bool PeerManager::SendMessages(CNode* pto)\n         }\n         pto->fPingQueued = false;\n         pto->m_ping_start = GetTime<std::chrono::microseconds>();\n-        if (pto->nVersion > BIP0031_VERSION) {\n+        if (pto->GetCommonVersion() > BIP0031_VERSION) {\n             pto->nPingNonceSent = nonce;\n             m_connman.PushMessage(pto, msgMaker.Make(NetMsgType::PING, nonce));\n         } else {\n@@ -4639,7 +4638,7 @@ bool PeerManager::SendMessages(CNode* pto)\n         //\n         // Message: feefilter\n         //\n-        if (pto->m_tx_relay != nullptr && pto->nVersion >= FEEFILTER_VERSION && gArgs.GetBoolArg(\"-feefilter\", DEFAULT_FEEFILTER) &&\n+        if (pto->m_tx_relay != nullptr && pto->GetCommonVersion() >= FEEFILTER_VERSION && gArgs.GetBoolArg(\"-feefilter\", DEFAULT_FEEFILTER) &&\n             !pto->HasPermission(PF_FORCERELAY) // peers with the forcerelay permission should not filter txs to us\n         ) {\n             CAmount currentFilter = m_mempool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();"
      }
    ]
  }
]