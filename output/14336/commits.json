[
  {
    "sha": "1e6afd0dbc1c581435588e1e9bb419a035b81028",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZTZhZmQwZGJjMWM1ODE0MzU1ODhlMWU5YmI0MTlhMDM1YjgxMDI4",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2018-10-29T20:30:30Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2018-11-30T23:02:51Z"
      },
      "message": "Introduce and use constant SELECT_TIMEOUT_MILLISECONDS.",
      "tree": {
        "sha": "f6ef21aa0377eb4d9112060056675a18e8e7e8c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f6ef21aa0377eb4d9112060056675a18e8e7e8c1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e6afd0dbc1c581435588e1e9bb419a035b81028",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e6afd0dbc1c581435588e1e9bb419a035b81028",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1e6afd0dbc1c581435588e1e9bb419a035b81028",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e6afd0dbc1c581435588e1e9bb419a035b81028/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "011c42c5bd175e14b03741398f5d4f8a4cf3dee5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/011c42c5bd175e14b03741398f5d4f8a4cf3dee5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/011c42c5bd175e14b03741398f5d4f8a4cf3dee5"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 6,
      "deletions": 2
    },
    "files": [
      {
        "sha": "0613e05998102fc1b2dc43a243bc8cddc32221a1",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e6afd0dbc1c581435588e1e9bb419a035b81028/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e6afd0dbc1c581435588e1e9bb419a035b81028/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=1e6afd0dbc1c581435588e1e9bb419a035b81028",
        "patch": "@@ -71,6 +71,10 @@ enum BindFlags {\n     BF_WHITELIST    = (1U << 2),\n };\n \n+// The set of sockets cannot be modified while waiting\n+// The sleep time needs to be small to avoid new sockets stalling\n+static const uint64_t SELECT_TIMEOUT_MILLISECONDS = 50;\n+\n const static std::string NET_MESSAGE_COMMAND_OTHER = \"*other*\";\n \n static const uint64_t RANDOMIZER_ID_NETGROUP = 0x6c0edd8036ef4036ULL; // SHA256(\"netgroup\")[0:8]\n@@ -1264,7 +1268,7 @@ void CConnman::SocketHandler()\n     //\n     struct timeval timeout;\n     timeout.tv_sec  = 0;\n-    timeout.tv_usec = 50000; // frequency to poll pnode->vSend\n+    timeout.tv_usec = SELECT_TIMEOUT_MILLISECONDS * 1000; // frequency to poll pnode->vSend\n \n     fd_set fdsetRecv;\n     fd_set fdsetSend;\n@@ -1337,7 +1341,7 @@ void CConnman::SocketHandler()\n         }\n         FD_ZERO(&fdsetSend);\n         FD_ZERO(&fdsetError);\n-        if (!interruptNet.sleep_for(std::chrono::milliseconds(timeout.tv_usec/1000)))\n+        if (!interruptNet.sleep_for(std::chrono::milliseconds(SELECT_TIMEOUT_MILLISECONDS)))\n             return;\n     }\n "
      }
    ]
  },
  {
    "sha": "7e403c0ae705455aa66f7df9a9a99f462fd4e9a8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZTQwM2MwYWU3MDU0NTVhYTY2ZjdkZjlhOWE5OWY0NjJmZDRlOWE4",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2018-09-25T19:32:07Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2018-11-30T23:02:51Z"
      },
      "message": "Move GenerateSelectSet logic to private method.\n\nThis separates the socket event collection logic from the logic\ndeciding which events we're interested in at all.",
      "tree": {
        "sha": "192f2071cf1808a59c64f347800c788b61c9aa7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/192f2071cf1808a59c64f347800c788b61c9aa7a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7e403c0ae705455aa66f7df9a9a99f462fd4e9a8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e403c0ae705455aa66f7df9a9a99f462fd4e9a8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7e403c0ae705455aa66f7df9a9a99f462fd4e9a8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e403c0ae705455aa66f7df9a9a99f462fd4e9a8/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1e6afd0dbc1c581435588e1e9bb419a035b81028",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e6afd0dbc1c581435588e1e9bb419a035b81028",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1e6afd0dbc1c581435588e1e9bb419a035b81028"
      }
    ],
    "stats": {
      "total": 88,
      "additions": 53,
      "deletions": 35
    },
    "files": [
      {
        "sha": "9d837192afae31a192b9cfd9f2d6c956ce7bc9bb",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 52,
        "deletions": 35,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e403c0ae705455aa66f7df9a9a99f462fd4e9a8/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e403c0ae705455aa66f7df9a9a99f462fd4e9a8/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=7e403c0ae705455aa66f7df9a9a99f462fd4e9a8",
        "patch": "@@ -1261,28 +1261,10 @@ void CConnman::InactivityCheck(CNode *pnode)\n     }\n }\n \n-void CConnman::SocketHandler()\n+bool CConnman::GenerateSelectSet(std::set<SOCKET> &recv_set, std::set<SOCKET> &send_set, std::set<SOCKET> &error_set)\n {\n-    //\n-    // Find which sockets have data to receive\n-    //\n-    struct timeval timeout;\n-    timeout.tv_sec  = 0;\n-    timeout.tv_usec = SELECT_TIMEOUT_MILLISECONDS * 1000; // frequency to poll pnode->vSend\n-\n-    fd_set fdsetRecv;\n-    fd_set fdsetSend;\n-    fd_set fdsetError;\n-    FD_ZERO(&fdsetRecv);\n-    FD_ZERO(&fdsetSend);\n-    FD_ZERO(&fdsetError);\n-    SOCKET hSocketMax = 0;\n-    bool have_fds = false;\n-\n     for (const ListenSocket& hListenSocket : vhListenSocket) {\n-        FD_SET(hListenSocket.socket, &fdsetRecv);\n-        hSocketMax = std::max(hSocketMax, hListenSocket.socket);\n-        have_fds = true;\n+        recv_set.insert(hListenSocket.socket);\n     }\n \n     {\n@@ -1311,34 +1293,69 @@ void CConnman::SocketHandler()\n             if (pnode->hSocket == INVALID_SOCKET)\n                 continue;\n \n-            FD_SET(pnode->hSocket, &fdsetError);\n-            hSocketMax = std::max(hSocketMax, pnode->hSocket);\n-            have_fds = true;\n-\n+            error_set.insert(pnode->hSocket);\n             if (select_send) {\n-                FD_SET(pnode->hSocket, &fdsetSend);\n+                send_set.insert(pnode->hSocket);\n                 continue;\n             }\n             if (select_recv) {\n-                FD_SET(pnode->hSocket, &fdsetRecv);\n+                recv_set.insert(pnode->hSocket);\n             }\n         }\n     }\n \n-    int nSelect = select(have_fds ? hSocketMax + 1 : 0,\n-                         &fdsetRecv, &fdsetSend, &fdsetError, &timeout);\n+    return !recv_set.empty() || !send_set.empty() || !error_set.empty();\n+}\n+\n+void CConnman::SocketHandler()\n+{\n+    std::set<SOCKET> recv_select_set, send_select_set, error_select_set;\n+    if (!GenerateSelectSet(recv_select_set, send_select_set, error_select_set)) {\n+        interruptNet.sleep_for(std::chrono::milliseconds(SELECT_TIMEOUT_MILLISECONDS));\n+        return;\n+    }\n+\n+    //\n+    // Find which sockets have data to receive\n+    //\n+    struct timeval timeout;\n+    timeout.tv_sec  = 0;\n+    timeout.tv_usec = SELECT_TIMEOUT_MILLISECONDS * 1000; // frequency to poll pnode->vSend\n+\n+    fd_set fdsetRecv;\n+    fd_set fdsetSend;\n+    fd_set fdsetError;\n+    FD_ZERO(&fdsetRecv);\n+    FD_ZERO(&fdsetSend);\n+    FD_ZERO(&fdsetError);\n+    SOCKET hSocketMax = 0;\n+\n+    for (SOCKET hSocket : recv_select_set) {\n+        FD_SET(hSocket, &fdsetRecv);\n+        hSocketMax = std::max(hSocketMax, hSocket);\n+    }\n+\n+    for (SOCKET hSocket : send_select_set) {\n+        FD_SET(hSocket, &fdsetSend);\n+        hSocketMax = std::max(hSocketMax, hSocket);\n+    }\n+\n+    for (SOCKET hSocket : error_select_set) {\n+        FD_SET(hSocket, &fdsetError);\n+        hSocketMax = std::max(hSocketMax, hSocket);\n+    }\n+\n+    int nSelect = select(hSocketMax + 1, &fdsetRecv, &fdsetSend, &fdsetError, &timeout);\n+\n     if (interruptNet)\n         return;\n \n     if (nSelect == SOCKET_ERROR)\n     {\n-        if (have_fds)\n-        {\n-            int nErr = WSAGetLastError();\n-            LogPrintf(\"socket select error %s\\n\", NetworkErrorString(nErr));\n-            for (unsigned int i = 0; i <= hSocketMax; i++)\n-                FD_SET(i, &fdsetRecv);\n-        }\n+        int nErr = WSAGetLastError();\n+        LogPrintf(\"socket select error %s\\n\", NetworkErrorString(nErr));\n+        for (unsigned int i = 0; i <= hSocketMax; i++)\n+            FD_SET(i, &fdsetRecv);\n         FD_ZERO(&fdsetSend);\n         FD_ZERO(&fdsetError);\n         if (!interruptNet.sleep_for(std::chrono::milliseconds(SELECT_TIMEOUT_MILLISECONDS)))"
      },
      {
        "sha": "27121ab21348b34883bcfa84ac5404023d80af61",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e403c0ae705455aa66f7df9a9a99f462fd4e9a8/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e403c0ae705455aa66f7df9a9a99f462fd4e9a8/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=7e403c0ae705455aa66f7df9a9a99f462fd4e9a8",
        "patch": "@@ -342,6 +342,7 @@ class CConnman\n     void DisconnectNodes();\n     void NotifyNumConnectionsChanged();\n     void InactivityCheck(CNode *pnode);\n+    bool GenerateSelectSet(std::set<SOCKET> &recv_set, std::set<SOCKET> &send_set, std::set<SOCKET> &error_set);\n     void SocketHandler();\n     void ThreadSocketHandler();\n     void ThreadDNSAddressSeed();"
      }
    ]
  },
  {
    "sha": "28211a4bc9c65859b641b81a0541726a0e01988f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyODIxMWE0YmM5YzY1ODU5YjY0MWI4MWEwNTQxNzI2YTBlMDE5ODhm",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2018-09-27T01:51:46Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2018-11-30T23:02:51Z"
      },
      "message": "Move SocketEvents logic to private method.\n\nThis separates the select() logic from the socket handling logic, setting up\nfor a switch to poll().",
      "tree": {
        "sha": "18d635f6bf4b467c253520bf14952ae2a2bf029b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/18d635f6bf4b467c253520bf14952ae2a2bf029b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/28211a4bc9c65859b641b81a0541726a0e01988f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28211a4bc9c65859b641b81a0541726a0e01988f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/28211a4bc9c65859b641b81a0541726a0e01988f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28211a4bc9c65859b641b81a0541726a0e01988f/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7e403c0ae705455aa66f7df9a9a99f462fd4e9a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e403c0ae705455aa66f7df9a9a99f462fd4e9a8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7e403c0ae705455aa66f7df9a9a99f462fd4e9a8"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 32,
      "deletions": 5
    },
    "files": [
      {
        "sha": "2664828034bbf89ef4ae11a43887938c0f89412f",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 5,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28211a4bc9c65859b641b81a0541726a0e01988f/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28211a4bc9c65859b641b81a0541726a0e01988f/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=28211a4bc9c65859b641b81a0541726a0e01988f",
        "patch": "@@ -1307,7 +1307,7 @@ bool CConnman::GenerateSelectSet(std::set<SOCKET> &recv_set, std::set<SOCKET> &s\n     return !recv_set.empty() || !send_set.empty() || !error_set.empty();\n }\n \n-void CConnman::SocketHandler()\n+void CConnman::SocketEvents(std::set<SOCKET> &recv_set, std::set<SOCKET> &send_set, std::set<SOCKET> &error_set)\n {\n     std::set<SOCKET> recv_select_set, send_select_set, error_select_set;\n     if (!GenerateSelectSet(recv_select_set, send_select_set, error_select_set)) {\n@@ -1362,12 +1362,38 @@ void CConnman::SocketHandler()\n             return;\n     }\n \n+    for (SOCKET hSocket : recv_select_set) {\n+        if (FD_ISSET(hSocket, &fdsetRecv)) {\n+            recv_set.insert(hSocket);\n+        }\n+    }\n+\n+    for (SOCKET hSocket : send_select_set) {\n+        if (FD_ISSET(hSocket, &fdsetSend)) {\n+            send_set.insert(hSocket);\n+        }\n+    }\n+\n+    for (SOCKET hSocket : error_select_set) {\n+        if (FD_ISSET(hSocket, &fdsetError)) {\n+            error_set.insert(hSocket);\n+        }\n+    }\n+}\n+\n+void CConnman::SocketHandler()\n+{\n+    std::set<SOCKET> recv_set, send_set, error_set;\n+    SocketEvents(recv_set, send_set, error_set);\n+\n+    if (interruptNet) return;\n+\n     //\n     // Accept new connections\n     //\n     for (const ListenSocket& hListenSocket : vhListenSocket)\n     {\n-        if (hListenSocket.socket != INVALID_SOCKET && FD_ISSET(hListenSocket.socket, &fdsetRecv))\n+        if (hListenSocket.socket != INVALID_SOCKET && recv_set.count(hListenSocket.socket) > 0)\n         {\n             AcceptConnection(hListenSocket);\n         }\n@@ -1398,9 +1424,9 @@ void CConnman::SocketHandler()\n             LOCK(pnode->cs_hSocket);\n             if (pnode->hSocket == INVALID_SOCKET)\n                 continue;\n-            recvSet = FD_ISSET(pnode->hSocket, &fdsetRecv);\n-            sendSet = FD_ISSET(pnode->hSocket, &fdsetSend);\n-            errorSet = FD_ISSET(pnode->hSocket, &fdsetError);\n+            recvSet = recv_set.count(pnode->hSocket) > 0;\n+            sendSet = send_set.count(pnode->hSocket) > 0;\n+            errorSet = error_set.count(pnode->hSocket) > 0;\n         }\n         if (recvSet || errorSet)\n         {"
      },
      {
        "sha": "eff719811144b6464fb52f7e71fb807b4304154d",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28211a4bc9c65859b641b81a0541726a0e01988f/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28211a4bc9c65859b641b81a0541726a0e01988f/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=28211a4bc9c65859b641b81a0541726a0e01988f",
        "patch": "@@ -343,6 +343,7 @@ class CConnman\n     void NotifyNumConnectionsChanged();\n     void InactivityCheck(CNode *pnode);\n     bool GenerateSelectSet(std::set<SOCKET> &recv_set, std::set<SOCKET> &send_set, std::set<SOCKET> &error_set);\n+    void SocketEvents(std::set<SOCKET> &recv_set, std::set<SOCKET> &send_set, std::set<SOCKET> &error_set);\n     void SocketHandler();\n     void ThreadSocketHandler();\n     void ThreadDNSAddressSeed();"
      }
    ]
  },
  {
    "sha": "11cc491a288a73e911be24a285e12abd57df7d04",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMWNjNDkxYTI4OGE3M2U5MTFiZTI0YTI4NWUxMmFiZDU3ZGY3ZDA0",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2018-09-27T01:54:52Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2018-12-03T19:25:51Z"
      },
      "message": "Implement poll() on systems which support it properly.\n\nThis eliminates the restriction on maximum socket descriptor number.",
      "tree": {
        "sha": "b10300e0223359f4c3b0b10b5aa8ed91ffd1d1e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b10300e0223359f4c3b0b10b5aa8ed91ffd1d1e6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/11cc491a288a73e911be24a285e12abd57df7d04",
      "comment_count": 1,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11cc491a288a73e911be24a285e12abd57df7d04",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/11cc491a288a73e911be24a285e12abd57df7d04",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11cc491a288a73e911be24a285e12abd57df7d04/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "28211a4bc9c65859b641b81a0541726a0e01988f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28211a4bc9c65859b641b81a0541726a0e01988f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/28211a4bc9c65859b641b81a0541726a0e01988f"
      }
    ],
    "stats": {
      "total": 79,
      "additions": 77,
      "deletions": 2
    },
    "files": [
      {
        "sha": "7b164d56306b9103b7051d8c38725caf6c9b67b6",
        "filename": "src/compat.h",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11cc491a288a73e911be24a285e12abd57df7d04/src/compat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11cc491a288a73e911be24a285e12abd57df7d04/src/compat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat.h?ref=11cc491a288a73e911be24a285e12abd57df7d04",
        "patch": "@@ -92,8 +92,15 @@ typedef void* sockopt_arg_type;\n typedef char* sockopt_arg_type;\n #endif\n \n+// Note these both should work with the current usage of poll, but best to be safe\n+// WIN32 poll is broken https://daniel.haxx.se/blog/2012/10/10/wsapoll-is-broken/\n+// __APPLE__ poll is broke https://github.com/bitcoin/bitcoin/pull/14336#issuecomment-437384408\n+#if defined(__linux__)\n+#define USE_POLL\n+#endif\n+\n bool static inline IsSelectableSocket(const SOCKET& s) {\n-#ifdef WIN32\n+#if defined(USE_POLL) || defined(WIN32)\n     return true;\n #else\n     return (s < FD_SETSIZE);"
      },
      {
        "sha": "7b8b6e5ea2a0f153ea0d14166b71e9273187a417",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 49,
        "deletions": 0,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11cc491a288a73e911be24a285e12abd57df7d04/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11cc491a288a73e911be24a285e12abd57df7d04/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=11cc491a288a73e911be24a285e12abd57df7d04",
        "patch": "@@ -26,13 +26,18 @@\n #include <fcntl.h>\n #endif\n \n+#ifdef USE_POLL\n+#include <poll.h>\n+#endif\n+\n #ifdef USE_UPNP\n #include <miniupnpc/miniupnpc.h>\n #include <miniupnpc/miniwget.h>\n #include <miniupnpc/upnpcommands.h>\n #include <miniupnpc/upnperrors.h>\n #endif\n \n+#include <unordered_map>\n \n #include <math.h>\n \n@@ -1307,6 +1312,49 @@ bool CConnman::GenerateSelectSet(std::set<SOCKET> &recv_set, std::set<SOCKET> &s\n     return !recv_set.empty() || !send_set.empty() || !error_set.empty();\n }\n \n+#ifdef USE_POLL\n+void CConnman::SocketEvents(std::set<SOCKET> &recv_set, std::set<SOCKET> &send_set, std::set<SOCKET> &error_set)\n+{\n+    std::set<SOCKET> recv_select_set, send_select_set, error_select_set;\n+    if (!GenerateSelectSet(recv_select_set, send_select_set, error_select_set)) {\n+        interruptNet.sleep_for(std::chrono::milliseconds(SELECT_TIMEOUT_MILLISECONDS));\n+        return;\n+    }\n+\n+    std::unordered_map<SOCKET, struct pollfd> pollfds;\n+    for (SOCKET socket_id : recv_select_set) {\n+        pollfds[socket_id].fd = socket_id;\n+        pollfds[socket_id].events |= POLLIN;\n+    }\n+\n+    for (SOCKET socket_id : send_select_set) {\n+        pollfds[socket_id].fd = socket_id;\n+        pollfds[socket_id].events |= POLLOUT;\n+    }\n+\n+    for (SOCKET socket_id : error_select_set) {\n+        pollfds[socket_id].fd = socket_id;\n+        // These flags are ignored, but we set them for clarity\n+        pollfds[socket_id].events |= POLLERR|POLLHUP;\n+    }\n+\n+    std::vector<struct pollfd> vpollfds;\n+    vpollfds.reserve(pollfds.size());\n+    for (auto it : pollfds) {\n+        vpollfds.push_back(std::move(it.second));\n+    }\n+\n+    if (poll(vpollfds.data(), vpollfds.size(), SELECT_TIMEOUT_MILLISECONDS) < 0) return;\n+\n+    if (interruptNet) return;\n+\n+    for (struct pollfd pollfd_entry : vpollfds) {\n+        if (pollfd_entry.revents & POLLIN)            recv_set.insert(pollfd_entry.fd);\n+        if (pollfd_entry.revents & POLLOUT)           send_set.insert(pollfd_entry.fd);\n+        if (pollfd_entry.revents & (POLLERR|POLLHUP)) error_set.insert(pollfd_entry.fd);\n+    }\n+}\n+#else\n void CConnman::SocketEvents(std::set<SOCKET> &recv_set, std::set<SOCKET> &send_set, std::set<SOCKET> &error_set)\n {\n     std::set<SOCKET> recv_select_set, send_select_set, error_select_set;\n@@ -1380,6 +1428,7 @@ void CConnman::SocketEvents(std::set<SOCKET> &recv_set, std::set<SOCKET> &send_s\n         }\n     }\n }\n+#endif\n \n void CConnman::SocketHandler()\n {"
      },
      {
        "sha": "355e21d4e66c6831cf2813dbee7e723b274161e8",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 1,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11cc491a288a73e911be24a285e12abd57df7d04/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11cc491a288a73e911be24a285e12abd57df7d04/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=11cc491a288a73e911be24a285e12abd57df7d04",
        "patch": "@@ -21,6 +21,10 @@\n #include <codecvt>\n #endif\n \n+#ifdef USE_POLL\n+#include <poll.h>\n+#endif\n+\n #if !defined(MSG_NOSIGNAL)\n #define MSG_NOSIGNAL 0\n #endif\n@@ -264,11 +268,19 @@ static IntrRecvError InterruptibleRecv(uint8_t* data, size_t len, int timeout, c\n                 if (!IsSelectableSocket(hSocket)) {\n                     return IntrRecvError::NetworkError;\n                 }\n-                struct timeval tval = MillisToTimeval(std::min(endTime - curTime, maxWait));\n+                int timeout_ms = std::min(endTime - curTime, maxWait);\n+#ifdef USE_POLL\n+                struct pollfd pollfd = {};\n+                pollfd.fd = hSocket;\n+                pollfd.events = POLLIN | POLLOUT;\n+                int nRet = poll(&pollfd, 1, timeout_ms);\n+#else\n+                struct timeval tval = MillisToTimeval(timeout_ms);\n                 fd_set fdset;\n                 FD_ZERO(&fdset);\n                 FD_SET(hSocket, &fdset);\n                 int nRet = select(hSocket + 1, &fdset, nullptr, nullptr, &tval);\n+#endif\n                 if (nRet == SOCKET_ERROR) {\n                     return IntrRecvError::NetworkError;\n                 }\n@@ -499,11 +511,18 @@ bool ConnectSocketDirectly(const CService &addrConnect, const SOCKET& hSocket, i\n         // WSAEINVAL is here because some legacy version of winsock uses it\n         if (nErr == WSAEINPROGRESS || nErr == WSAEWOULDBLOCK || nErr == WSAEINVAL)\n         {\n+#ifdef USE_POLL\n+            struct pollfd pollfd = {};\n+            pollfd.fd = hSocket;\n+            pollfd.events = POLLIN | POLLOUT;\n+            int nRet = poll(&pollfd, 1, nTimeout);\n+#else\n             struct timeval timeout = MillisToTimeval(nTimeout);\n             fd_set fdset;\n             FD_ZERO(&fdset);\n             FD_SET(hSocket, &fdset);\n             int nRet = select(hSocket + 1, nullptr, &fdset, nullptr, &timeout);\n+#endif\n             if (nRet == 0)\n             {\n                 LogPrint(BCLog::NET, \"connection to %s timeout\\n\", addrConnect.ToString());"
      }
    ]
  },
  {
    "sha": "4927bf2f257ac53569978980eaf1f61c2c6b04cc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OTI3YmYyZjI1N2FjNTM1Njk5Nzg5ODBlYWYxZjYxYzJjNmIwNGNj",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2018-11-13T19:09:05Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2018-12-03T19:25:55Z"
      },
      "message": "Increase maxconnections limit when using poll.",
      "tree": {
        "sha": "7b99b83bc09d4d4c7f5d97a39ee5a2d7b953031c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7b99b83bc09d4d4c7f5d97a39ee5a2d7b953031c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4927bf2f257ac53569978980eaf1f61c2c6b04cc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4927bf2f257ac53569978980eaf1f61c2c6b04cc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4927bf2f257ac53569978980eaf1f61c2c6b04cc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4927bf2f257ac53569978980eaf1f61c2c6b04cc/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "11cc491a288a73e911be24a285e12abd57df7d04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11cc491a288a73e911be24a285e12abd57df7d04",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/11cc491a288a73e911be24a285e12abd57df7d04"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6a49fdbc620633f2b0ac7e391b4a191c1954df96",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4927bf2f257ac53569978980eaf1f61c2c6b04cc/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4927bf2f257ac53569978980eaf1f61c2c6b04cc/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=4927bf2f257ac53569978980eaf1f61c2c6b04cc",
        "patch": "@@ -952,8 +952,13 @@ bool AppInitParameterInteraction()\n \n     // Trim requested connection counts, to fit into system limitations\n     // <int> in std::min<int>(...) to work around FreeBSD compilation issue described in #2695\n-    nMaxConnections = std::max(std::min<int>(nMaxConnections, FD_SETSIZE - nBind - MIN_CORE_FILEDESCRIPTORS - MAX_ADDNODE_CONNECTIONS), 0);\n     nFD = RaiseFileDescriptorLimit(nMaxConnections + MIN_CORE_FILEDESCRIPTORS + MAX_ADDNODE_CONNECTIONS);\n+#ifdef USE_POLL\n+    int fd_max = nFD;\n+#else\n+    int fd_max = FD_SETSIZE;\n+#endif\n+    nMaxConnections = std::max(std::min<int>(nMaxConnections, fd_max - nBind - MIN_CORE_FILEDESCRIPTORS - MAX_ADDNODE_CONNECTIONS), 0);\n     if (nFD < MIN_CORE_FILEDESCRIPTORS)\n         return InitError(_(\"Not enough file descriptors available.\"));\n     nMaxConnections = std::min(nFD - MIN_CORE_FILEDESCRIPTORS - MAX_ADDNODE_CONNECTIONS, nMaxConnections);"
      }
    ]
  }
]