[
  {
    "sha": "5aef9c76aa130c9d405b56714c29db2cd2ad2727",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YWVmOWM3NmFhMTMwYzlkNDA1YjU2NzE0YzI5ZGIyY2QyYWQyNzI3",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-11-30T08:27:55Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2021-09-12T15:04:24Z"
      },
      "message": "Drop IO priority to idle while reading blocks for peer requests and startup verification",
      "tree": {
        "sha": "a8da8edb9d29ce8a44093b52b53b4f2eec76103d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a8da8edb9d29ce8a44093b52b53b4f2eec76103d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5aef9c76aa130c9d405b56714c29db2cd2ad2727",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5aef9c76aa130c9d405b56714c29db2cd2ad2727",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5aef9c76aa130c9d405b56714c29db2cd2ad2727",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5aef9c76aa130c9d405b56714c29db2cd2ad2727/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "42af9596ce85a541988abee54eed8a9b271a46a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42af9596ce85a541988abee54eed8a9b271a46a1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/42af9596ce85a541988abee54eed8a9b271a46a1"
      }
    ],
    "stats": {
      "total": 165,
      "additions": 146,
      "deletions": 19
    },
    "files": [
      {
        "sha": "4d0897192a56824bfc43ca4908cc215369bd92c7",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5aef9c76aa130c9d405b56714c29db2cd2ad2727/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5aef9c76aa130c9d405b56714c29db2cd2ad2727/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=5aef9c76aa130c9d405b56714c29db2cd2ad2727",
        "patch": "@@ -1029,6 +1029,24 @@ AC_COMPILE_IFELSE([AC_LANG_SOURCE([\n   [AC_MSG_RESULT(no)]\n )\n \n+AC_MSG_CHECKING(for ioprio syscalls)\n+AC_COMPILE_IFELSE([\n+  AC_LANG_PROGRAM([[\n+    #define _GNU_SOURCE\n+    #include <unistd.h>\n+    #include <sys/syscall.h>\n+  ]],[[\n+    int x = syscall(SYS_ioprio_get, 1, 0);\n+    syscall(SYS_ioprio_set, 1, 0, x);\n+  ]])\n+],[\n+  have_ioprio_syscall=yes\n+  AC_DEFINE(HAVE_IOPRIO_SYSCALL,1,[Define this symbol if you have ioprio syscalls])\n+],[\n+  have_ioprio_syscall=no\n+])\n+AC_MSG_RESULT($have_ioprio_syscall)\n+\n dnl thread_local is currently disabled when building with glibc back compat.\n dnl Our minimum supported glibc is 2.17, however support for thread_local\n dnl did not arrive in glibc until 2.18.\n@@ -1770,6 +1788,7 @@ AM_CONDITIONAL([USE_QRCODE], [test x$use_qr = xyes])\n AM_CONDITIONAL([USE_LCOV],[test x$use_lcov = xyes])\n AM_CONDITIONAL([USE_LIBEVENT],[test x$use_libevent = xyes])\n AM_CONDITIONAL([GLIBC_BACK_COMPAT],[test x$use_glibc_compat = xyes])\n+AM_CONDITIONAL([HAVE_IOPRIO_SYSCALL],[test x$have_ioprio_syscall = xyes])\n AM_CONDITIONAL([HARDEN],[test x$use_hardening = xyes])\n AM_CONDITIONAL([ENABLE_SSE42],[test x$enable_sse42 = xyes])\n AM_CONDITIONAL([ENABLE_SSE41],[test x$enable_sse41 = xyes])"
      },
      {
        "sha": "3c11120ad77443c129e684d884db981df0c9b5fe",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5aef9c76aa130c9d405b56714c29db2cd2ad2727/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5aef9c76aa130c9d405b56714c29db2cd2ad2727/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=5aef9c76aa130c9d405b56714c29db2cd2ad2727",
        "patch": "@@ -251,6 +251,7 @@ BITCOIN_CORE_H = \\\n   util/golombrice.h \\\n   util/hash_type.h \\\n   util/hasher.h \\\n+  util/ioprio.h \\\n   util/macros.h \\\n   util/message.h \\\n   util/moneystr.h \\\n@@ -622,6 +623,10 @@ libbitcoin_util_a_SOURCES += compat/glibc_compat.cpp\n AM_LDFLAGS += $(COMPAT_LDFLAGS)\n endif\n \n+if HAVE_IOPRIO_SYSCALL\n+libbitcoin_util_a_SOURCES += util/ioprio.cpp\n+endif\n+\n # cli: shared between bitcoin-cli and bitcoin-qt\n libbitcoin_cli_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n libbitcoin_cli_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)"
      },
      {
        "sha": "52efaa662af0a7cc1b30be7be1b1c9bbd9d7b831",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5aef9c76aa130c9d405b56714c29db2cd2ad2727/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5aef9c76aa130c9d405b56714c29db2cd2ad2727/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=5aef9c76aa130c9d405b56714c29db2cd2ad2727",
        "patch": "@@ -1773,15 +1773,15 @@ void PeerManagerImpl::ProcessGetBlockData(CNode& pfrom, Peer& peer, const CInv&\n         // Fast-path: in this case it is possible to serve the block directly from disk,\n         // as the network format matches the format on disk\n         std::vector<uint8_t> block_data;\n-        if (!ReadRawBlockFromDisk(block_data, pindex, m_chainparams.MessageStart())) {\n+        if (!ReadRawBlockFromDisk(block_data, pindex, m_chainparams.MessageStart(), /* lowprio */ true)) {\n             assert(!\"cannot load block from disk\");\n         }\n         m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::BLOCK, MakeSpan(block_data)));\n         // Don't set pblock as we've sent the block\n     } else {\n         // Send block from disk\n         std::shared_ptr<CBlock> pblockRead = std::make_shared<CBlock>();\n-        if (!ReadBlockFromDisk(*pblockRead, pindex, m_chainparams.GetConsensus())) {\n+        if (!ReadBlockFromDisk(*pblockRead, pindex, m_chainparams.GetConsensus(), /* lowprio */ true)) {\n             assert(!\"cannot load block from disk\");\n         }\n         pblock = pblockRead;\n@@ -3061,7 +3061,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n \n             if (pindex->nHeight >= m_chainman.ActiveChain().Height() - MAX_BLOCKTXN_DEPTH) {\n                 CBlock block;\n-                bool ret = ReadBlockFromDisk(block, pindex, m_chainparams.GetConsensus());\n+                bool ret = ReadBlockFromDisk(block, pindex, m_chainparams.GetConsensus(), /* lowprio */ true);\n                 assert(ret);\n \n                 SendBlockTransactions(pfrom, block, req);\n@@ -3704,7 +3704,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             // mapBlockSource is only used for punishing peers and setting\n             // which peers send us compact blocks, so the race between here and\n             // cs_main in ProcessNewBlock is fine.\n-            mapBlockSource.emplace(hash, std::make_pair(pfrom.GetId(), true));\n+            mapBlockSource.emplace(hash, std::make_pair(pfrom.GetId(), /* lowprio */ true));\n         }\n         ProcessBlock(pfrom, pblock, forceProcessing);\n         return;\n@@ -4585,7 +4585,7 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                     }\n                     if (!fGotBlockFromCache) {\n                         CBlock block;\n-                        bool ret = ReadBlockFromDisk(block, pBestIndex, consensusParams);\n+                        bool ret = ReadBlockFromDisk(block, pBestIndex, consensusParams, /* lowprio */ true);\n                         assert(ret);\n                         CBlockHeaderAndShortTxIDs cmpctblock(block, state.fWantsCmpctWitness);\n                         m_connman.PushMessage(pto, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, cmpctblock));"
      },
      {
        "sha": "93704b8b8de4028f6d7314c978baf7a4b06b8e11",
        "filename": "src/node/blockstorage.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 6,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5aef9c76aa130c9d405b56714c29db2cd2ad2727/src/node/blockstorage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5aef9c76aa130c9d405b56714c29db2cd2ad2727/src/node/blockstorage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/blockstorage.cpp?ref=5aef9c76aa130c9d405b56714c29db2cd2ad2727",
        "patch": "@@ -16,6 +16,7 @@\n #include <signet.h>\n #include <streams.h>\n #include <undo.h>\n+#include <util/ioprio.h>\n #include <util/system.h>\n #include <validation.h>\n \n@@ -362,10 +363,13 @@ bool WriteUndoDataForBlock(const CBlockUndo& blockundo, BlockValidationState& st\n     return true;\n }\n \n-bool ReadBlockFromDisk(CBlock& block, const FlatFilePos& pos, const Consensus::Params& consensusParams)\n+bool ReadBlockFromDisk(CBlock& block, const FlatFilePos& pos, const Consensus::Params& consensusParams, const bool lowprio)\n {\n     block.SetNull();\n \n+    {\n+    IOPRIO_IDLER(lowprio);\n+\n     // Open history file to read\n     CAutoFile filein(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION);\n     if (filein.IsNull()) {\n@@ -379,6 +383,8 @@ bool ReadBlockFromDisk(CBlock& block, const FlatFilePos& pos, const Consensus::P\n         return error(\"%s: Deserialize or I/O error - %s at %s\", __func__, e.what(), pos.ToString());\n     }\n \n+    }  // end IOPRIO_IDLER scope\n+\n     // Check the header\n     if (!CheckProofOfWork(block.GetHash(), block.nBits, consensusParams)) {\n         return error(\"ReadBlockFromDisk: Errors in block header at %s\", pos.ToString());\n@@ -392,15 +398,15 @@ bool ReadBlockFromDisk(CBlock& block, const FlatFilePos& pos, const Consensus::P\n     return true;\n }\n \n-bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus::Params& consensusParams)\n+bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus::Params& consensusParams, const bool lowprio)\n {\n     FlatFilePos blockPos;\n     {\n         LOCK(cs_main);\n         blockPos = pindex->GetBlockPos();\n     }\n \n-    if (!ReadBlockFromDisk(block, blockPos, consensusParams)) {\n+    if (!ReadBlockFromDisk(block, blockPos, consensusParams, lowprio)) {\n         return false;\n     }\n     if (block.GetHash() != pindex->GetBlockHash()) {\n@@ -410,10 +416,13 @@ bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus\n     return true;\n }\n \n-bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const FlatFilePos& pos, const CMessageHeader::MessageStartChars& message_start)\n+bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const FlatFilePos& pos, const CMessageHeader::MessageStartChars& message_start, const bool lowprio)\n {\n     FlatFilePos hpos = pos;\n     hpos.nPos -= 8; // Seek back 8 bytes for meta header\n+\n+    IOPRIO_IDLER(lowprio);\n+\n     CAutoFile filein(OpenBlockFile(hpos, true), SER_DISK, CLIENT_VERSION);\n     if (filein.IsNull()) {\n         return error(\"%s: OpenBlockFile failed for %s\", __func__, pos.ToString());\n@@ -445,15 +454,15 @@ bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const FlatFilePos& pos, c\n     return true;\n }\n \n-bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CBlockIndex* pindex, const CMessageHeader::MessageStartChars& message_start)\n+bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CBlockIndex* pindex, const CMessageHeader::MessageStartChars& message_start, const bool lowprio)\n {\n     FlatFilePos block_pos;\n     {\n         LOCK(cs_main);\n         block_pos = pindex->GetBlockPos();\n     }\n \n-    return ReadRawBlockFromDisk(block, block_pos, message_start);\n+    return ReadRawBlockFromDisk(block, block_pos, message_start, lowprio);\n }\n \n /** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */"
      },
      {
        "sha": "acc65e6c6a5bd743ce6bfab7347d4d9cdd32e61b",
        "filename": "src/node/blockstorage.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5aef9c76aa130c9d405b56714c29db2cd2ad2727/src/node/blockstorage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5aef9c76aa130c9d405b56714c29db2cd2ad2727/src/node/blockstorage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/blockstorage.h?ref=5aef9c76aa130c9d405b56714c29db2cd2ad2727",
        "patch": "@@ -67,10 +67,10 @@ uint64_t CalculateCurrentUsage();\n void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n \n /** Functions for disk access for blocks */\n-bool ReadBlockFromDisk(CBlock& block, const FlatFilePos& pos, const Consensus::Params& consensusParams);\n-bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus::Params& consensusParams);\n-bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const FlatFilePos& pos, const CMessageHeader::MessageStartChars& message_start);\n-bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CBlockIndex* pindex, const CMessageHeader::MessageStartChars& message_start);\n+bool ReadBlockFromDisk(CBlock& block, const FlatFilePos& pos, const Consensus::Params& consensusParams, bool lowprio = false);\n+bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus::Params& consensusParams, bool lowprio = false);\n+bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const FlatFilePos& pos, const CMessageHeader::MessageStartChars& message_start, bool lowprio = false);\n+bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CBlockIndex* pindex, const CMessageHeader::MessageStartChars& message_start, bool lowprio = false);\n \n bool UndoReadFromDisk(CBlockUndo& blockundo, const CBlockIndex* pindex);\n bool WriteUndoDataForBlock(const CBlockUndo& blockundo, BlockValidationState& state, CBlockIndex* pindex, const CChainParams& chainparams);"
      },
      {
        "sha": "4e86f24d0214e7947bb6e93e3cc7bdcdbb0eb4c2",
        "filename": "src/util/ioprio.cpp",
        "status": "added",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5aef9c76aa130c9d405b56714c29db2cd2ad2727/src/util/ioprio.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5aef9c76aa130c9d405b56714c29db2cd2ad2727/src/util/ioprio.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/ioprio.cpp?ref=5aef9c76aa130c9d405b56714c29db2cd2ad2727",
        "patch": "@@ -0,0 +1,37 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <util/ioprio.h>\n+\n+#ifndef _GNU_SOURCE\n+#define _GNU_SOURCE\n+#endif\n+#include <unistd.h>\n+#include <sys/syscall.h>\n+\n+#ifndef IOPRIO_WHO_PROCESS\n+#define IOPRIO_WHO_PROCESS   1\n+#endif\n+#ifndef IOPRIO_CLASS_IDLE\n+#define IOPRIO_CLASS_IDLE    3\n+#endif\n+#ifndef IOPRIO_CLASS_SHIFT\n+#define IOPRIO_CLASS_SHIFT  13\n+#endif\n+\n+int ioprio_get() {\n+    return syscall(SYS_ioprio_get, IOPRIO_WHO_PROCESS, 0);\n+}\n+\n+int ioprio_set(const int ioprio) {\n+    return syscall(SYS_ioprio_set, IOPRIO_WHO_PROCESS, 0, ioprio);\n+}\n+\n+int ioprio_set_idle() {\n+    return ioprio_set(7 | (IOPRIO_CLASS_IDLE << IOPRIO_CLASS_SHIFT));\n+}"
      },
      {
        "sha": "78b56a5c384929296299546a1c930cb1b25c154a",
        "filename": "src/util/ioprio.h",
        "status": "added",
        "additions": 57,
        "deletions": 0,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5aef9c76aa130c9d405b56714c29db2cd2ad2727/src/util/ioprio.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5aef9c76aa130c9d405b56714c29db2cd2ad2727/src/util/ioprio.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/ioprio.h?ref=5aef9c76aa130c9d405b56714c29db2cd2ad2727",
        "patch": "@@ -0,0 +1,57 @@\n+// Copyright (c) 2016 Satoshi Nakamoto\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_IOPRIO_H\n+#define BITCOIN_UTIL_IOPRIO_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <util/system.h>\n+\n+#ifdef HAVE_IOPRIO_SYSCALL\n+int ioprio_get();\n+int ioprio_set(int ioprio);\n+int ioprio_set_idle();\n+\n+class ioprio_idler {\n+private:\n+    int orig;\n+\n+public:\n+    ioprio_idler(const bool actually_idle) {\n+        if (!actually_idle) {\n+            orig = -1;\n+            return;\n+        }\n+\n+        orig = ioprio_get();\n+        if (orig == -1) {\n+            return;\n+        }\n+        if (ioprio_set_idle() == -1) {\n+            orig = -1;\n+        }\n+    }\n+\n+    ~ioprio_idler() {\n+        if (orig == -1) {\n+            return;\n+        }\n+        if (ioprio_set(orig) == -1) {\n+            LogPrintf(\"failed to restore ioprio\\n\");\n+        }\n+    }\n+};\n+#define IOPRIO_IDLER(actually_idle)  ioprio_idler ioprio_idler_(actually_idle)\n+\n+#else\n+#define ioprio_get() ((void)-1)\n+#define ioprio_set(ioprio) ((void)-1)\n+#define ioprio_set_idle() ((void)-1)\n+#define IOPRIO_IDLER(actually_idle)  (void)actually_idle;\n+#endif\n+\n+#endif // BITCOIN_UTIL_IOPRIO_H"
      },
      {
        "sha": "fd4961db0d756300924a22806f1b87f97bdaa943",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5aef9c76aa130c9d405b56714c29db2cd2ad2727/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5aef9c76aa130c9d405b56714c29db2cd2ad2727/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=5aef9c76aa130c9d405b56714c29db2cd2ad2727",
        "patch": "@@ -3910,7 +3910,7 @@ bool CVerifyDB::VerifyDB(\n         }\n         CBlock block;\n         // check level 0: read from disk\n-        if (!ReadBlockFromDisk(block, pindex, chainparams.GetConsensus()))\n+        if (!ReadBlockFromDisk(block, pindex, chainparams.GetConsensus(), /* lowprio */ true))\n             return error(\"VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n         // check level 1: verify block validity\n         if (nCheckLevel >= 1 && !CheckBlock(block, state, chainparams.GetConsensus()))\n@@ -3961,7 +3961,7 @@ bool CVerifyDB::VerifyDB(\n             uiInterface.ShowProgress(_(\"Verifying blocks\u2026\").translated, percentageDone, false);\n             pindex = chainstate.m_chain.Next(pindex);\n             CBlock block;\n-            if (!ReadBlockFromDisk(block, pindex, chainparams.GetConsensus()))\n+            if (!ReadBlockFromDisk(block, pindex, chainparams.GetConsensus(), /* lowprio */ true))\n                 return error(\"VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n             if (!chainstate.ConnectBlock(block, state, pindex, coins)) {\n                 return error(\"VerifyDB(): *** found unconnectable block at %d, hash=%s (%s)\", pindex->nHeight, pindex->GetBlockHash().ToString(), state.ToString());\n@@ -3981,7 +3981,7 @@ bool CChainState::RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& i\n {\n     // TODO: merge with ConnectBlock\n     CBlock block;\n-    if (!ReadBlockFromDisk(block, pindex, m_params.GetConsensus())) {\n+    if (!ReadBlockFromDisk(block, pindex, m_params.GetConsensus(), /* lowprio */ true)) {\n         return error(\"ReplayBlock(): ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n     }\n \n@@ -4033,7 +4033,7 @@ bool CChainState::ReplayBlocks()\n     while (pindexOld != pindexFork) {\n         if (pindexOld->nHeight > 0) { // Never disconnect the genesis block.\n             CBlock block;\n-            if (!ReadBlockFromDisk(block, pindexOld, m_params.GetConsensus())) {\n+            if (!ReadBlockFromDisk(block, pindexOld, m_params.GetConsensus(), /* lowprio */ true)) {\n                 return error(\"RollbackBlock(): ReadBlockFromDisk() failed at %d, hash=%s\", pindexOld->nHeight, pindexOld->GetBlockHash().ToString());\n             }\n             LogPrintf(\"Rolling back %s (%i)\\n\", pindexOld->GetBlockHash().ToString(), pindexOld->nHeight);"
      }
    ]
  },
  {
    "sha": "c41b5d67875399c9fa48676916a0f8cad0b9df46",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNDFiNWQ2Nzg3NTM5OWM5ZmE0ODY3NjkxNmEwZjhjYWQwYjlkZjQ2",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-11-30T09:30:05Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2021-09-12T15:04:24Z"
      },
      "message": "util/ioprio: Add Mac support using iopolicy functions",
      "tree": {
        "sha": "4735a423d76a1533cf9ebbf0931a2a997dd32814",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4735a423d76a1533cf9ebbf0931a2a997dd32814"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c41b5d67875399c9fa48676916a0f8cad0b9df46",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c41b5d67875399c9fa48676916a0f8cad0b9df46",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c41b5d67875399c9fa48676916a0f8cad0b9df46",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c41b5d67875399c9fa48676916a0f8cad0b9df46/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5aef9c76aa130c9d405b56714c29db2cd2ad2727",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5aef9c76aa130c9d405b56714c29db2cd2ad2727",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5aef9c76aa130c9d405b56714c29db2cd2ad2727"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 53,
      "deletions": 15
    },
    "files": [
      {
        "sha": "cafa403275717d222a3dad4cb6ba8ca97815b695",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 31,
        "deletions": 10,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c41b5d67875399c9fa48676916a0f8cad0b9df46/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c41b5d67875399c9fa48676916a0f8cad0b9df46/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=c41b5d67875399c9fa48676916a0f8cad0b9df46",
        "patch": "@@ -1029,23 +1029,43 @@ AC_COMPILE_IFELSE([AC_LANG_SOURCE([\n   [AC_MSG_RESULT(no)]\n )\n \n-AC_MSG_CHECKING(for ioprio syscalls)\n+AC_MSG_CHECKING(for iopolicy functions)\n AC_COMPILE_IFELSE([\n   AC_LANG_PROGRAM([[\n-    #define _GNU_SOURCE\n-    #include <unistd.h>\n-    #include <sys/syscall.h>\n+    #include <sys/resource.h>\n   ]],[[\n-    int x = syscall(SYS_ioprio_get, 1, 0);\n-    syscall(SYS_ioprio_set, 1, 0, x);\n+    int x = getiopolicy_np(IOPOL_TYPE_DISK, IOPOL_SCOPE_THREAD);\n+    setiopolicy_np(IOPOL_TYPE_DISK, IOPOL_SCOPE_THREAD, x);\n   ]])\n ],[\n-  have_ioprio_syscall=yes\n-  AC_DEFINE(HAVE_IOPRIO_SYSCALL,1,[Define this symbol if you have ioprio syscalls])\n+  have_iopolicy=yes\n+  AC_DEFINE(HAVE_IOPOLICY,1,[Define this symbol if you have iopolicy functions])\n ],[\n-  have_ioprio_syscall=no\n+  have_iopolicy=no\n ])\n-AC_MSG_RESULT($have_ioprio_syscall)\n+AC_MSG_RESULT($have_iopolicy)\n+\n+if test x$have_iopolicy = xno; then\n+  AC_MSG_CHECKING(for ioprio syscalls)\n+  AC_COMPILE_IFELSE([\n+    AC_LANG_PROGRAM([[\n+      #define _GNU_SOURCE\n+      #include <unistd.h>\n+      #include <sys/syscall.h>\n+    ]],[[\n+      int x = syscall(SYS_ioprio_get, 1, 0);\n+      syscall(SYS_ioprio_set, 1, 0, x);\n+    ]])\n+  ],[\n+    have_ioprio_syscall=yes\n+    AC_DEFINE(HAVE_IOPRIO_SYSCALL,1,[Define this symbol if you have ioprio syscalls])\n+  ],[\n+    have_ioprio_syscall=no\n+  ])\n+  AC_MSG_RESULT($have_ioprio_syscall)\n+else\n+  have_ioprio_syscall=no\n+fi\n \n dnl thread_local is currently disabled when building with glibc back compat.\n dnl Our minimum supported glibc is 2.17, however support for thread_local\n@@ -1788,6 +1808,7 @@ AM_CONDITIONAL([USE_QRCODE], [test x$use_qr = xyes])\n AM_CONDITIONAL([USE_LCOV],[test x$use_lcov = xyes])\n AM_CONDITIONAL([USE_LIBEVENT],[test x$use_libevent = xyes])\n AM_CONDITIONAL([GLIBC_BACK_COMPAT],[test x$use_glibc_compat = xyes])\n+AM_CONDITIONAL([HAVE_IOPOLICY],[test x$have_iopolicy = xyes])\n AM_CONDITIONAL([HAVE_IOPRIO_SYSCALL],[test x$have_ioprio_syscall = xyes])\n AM_CONDITIONAL([HARDEN],[test x$use_hardening = xyes])\n AM_CONDITIONAL([ENABLE_SSE42],[test x$enable_sse42 = xyes])"
      },
      {
        "sha": "f607212f22e1ec7376a49b55acd422226b6f1f34",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c41b5d67875399c9fa48676916a0f8cad0b9df46/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c41b5d67875399c9fa48676916a0f8cad0b9df46/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=c41b5d67875399c9fa48676916a0f8cad0b9df46",
        "patch": "@@ -597,6 +597,7 @@ libbitcoin_util_a_SOURCES = \\\n   util/fees.cpp \\\n   util/getuniquepath.cpp \\\n   util/hasher.cpp \\\n+  util/ioprio.cpp \\\n   util/sock.cpp \\\n   util/system.cpp \\\n   util/message.cpp \\\n@@ -623,10 +624,6 @@ libbitcoin_util_a_SOURCES += compat/glibc_compat.cpp\n AM_LDFLAGS += $(COMPAT_LDFLAGS)\n endif\n \n-if HAVE_IOPRIO_SYSCALL\n-libbitcoin_util_a_SOURCES += util/ioprio.cpp\n-endif\n-\n # cli: shared between bitcoin-cli and bitcoin-qt\n libbitcoin_cli_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n libbitcoin_cli_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)"
      },
      {
        "sha": "db280b4e8705f28d859b1601ee6a5f1a80b3c544",
        "filename": "src/util/ioprio.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c41b5d67875399c9fa48676916a0f8cad0b9df46/src/util/ioprio.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c41b5d67875399c9fa48676916a0f8cad0b9df46/src/util/ioprio.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/ioprio.cpp?ref=c41b5d67875399c9fa48676916a0f8cad0b9df46",
        "patch": "@@ -8,6 +8,8 @@\n \n #include <util/ioprio.h>\n \n+#ifdef HAVE_IOPRIO_SYSCALL\n+\n #ifndef _GNU_SOURCE\n #define _GNU_SOURCE\n #endif\n@@ -35,3 +37,21 @@ int ioprio_set(const int ioprio) {\n int ioprio_set_idle() {\n     return ioprio_set(7 | (IOPRIO_CLASS_IDLE << IOPRIO_CLASS_SHIFT));\n }\n+\n+#elif HAVE_IOPOLICY\n+\n+#include <sys/resource.h>\n+\n+int ioprio_get() {\n+    return getiopolicy_np(IOPOL_TYPE_DISK, IOPOL_SCOPE_THREAD);\n+}\n+\n+int ioprio_set(const int ioprio) {\n+    return setiopolicy_np(IOPOL_TYPE_DISK, IOPOL_SCOPE_THREAD, ioprio);\n+}\n+\n+int ioprio_set_idle() {\n+    return ioprio_set(IOPOL_UTILITY);\n+}\n+\n+#endif"
      },
      {
        "sha": "e91ad59d53e3c2196bcee55f18d439ea26c3bc63",
        "filename": "src/util/ioprio.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c41b5d67875399c9fa48676916a0f8cad0b9df46/src/util/ioprio.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c41b5d67875399c9fa48676916a0f8cad0b9df46/src/util/ioprio.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/ioprio.h?ref=c41b5d67875399c9fa48676916a0f8cad0b9df46",
        "patch": "@@ -11,7 +11,7 @@\n \n #include <util/system.h>\n \n-#ifdef HAVE_IOPRIO_SYSCALL\n+#if defined(HAVE_IOPRIO_SYSCALL) || defined(HAVE_IOPOLICY)\n int ioprio_get();\n int ioprio_set(int ioprio);\n int ioprio_set_idle();"
      }
    ]
  },
  {
    "sha": "6de915d6dc0020175c0cfa37d2f7c7501c657025",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZGU5MTVkNmRjMDAyMDE3NWMwY2ZhMzdkMmY3Yzc1MDFjNjU3MDI1",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2021-09-12T15:03:58Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2021-09-12T15:40:30Z"
      },
      "message": "LoadExternalBlockFile: Set low I/O priority",
      "tree": {
        "sha": "2a573709f22cb44a8951301dabf831a0956e77fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2a573709f22cb44a8951301dabf831a0956e77fd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6de915d6dc0020175c0cfa37d2f7c7501c657025",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6de915d6dc0020175c0cfa37d2f7c7501c657025",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6de915d6dc0020175c0cfa37d2f7c7501c657025",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6de915d6dc0020175c0cfa37d2f7c7501c657025/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c41b5d67875399c9fa48676916a0f8cad0b9df46",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c41b5d67875399c9fa48676916a0f8cad0b9df46",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c41b5d67875399c9fa48676916a0f8cad0b9df46"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "aab0d548227460749b9ce71ae3a2d75e354b0e0d",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6de915d6dc0020175c0cfa37d2f7c7501c657025/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6de915d6dc0020175c0cfa37d2f7c7501c657025/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=6de915d6dc0020175c0cfa37d2f7c7501c657025",
        "patch": "@@ -44,6 +44,7 @@\n #include <undo.h>\n #include <util/check.h> // For NDEBUG compile time check\n #include <util/hasher.h>\n+#include <util/ioprio.h>\n #include <util/moneystr.h>\n #include <util/rbf.h>\n #include <util/strencodings.h>\n@@ -4164,6 +4165,8 @@ void CChainState::LoadExternalBlockFile(FILE* fileIn, FlatFilePos* dbp)\n \n     int nLoaded = 0;\n     try {\n+        IOPRIO_IDLER(/* lowprio */ true);\n+\n         // This takes over fileIn and calls fclose() on it in the CBufferedFile destructor\n         CBufferedFile blkdat(fileIn, 2*MAX_BLOCK_SERIALIZED_SIZE, MAX_BLOCK_SERIALIZED_SIZE+8, SER_DISK, CLIENT_VERSION);\n         uint64_t nRewind = blkdat.GetPos();"
      }
    ]
  }
]