[
  {
    "sha": "fa90a89eeefcc362970216d95973ad01a21366ed",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTkwYTg5ZWVlZmNjMzYyOTcwMjE2ZDk1OTczYWQwMWEyMTM2NmVk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-04-17T21:03:14Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-04-17T21:11:55Z"
      },
      "message": "[test] combine_logs: append node stderr and stdout if it exists",
      "tree": {
        "sha": "85c9e4ee4cc2a2c3b04d0f02ccc94a63c1567b80",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/85c9e4ee4cc2a2c3b04d0f02ccc94a63c1567b80"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa90a89eeefcc362970216d95973ad01a21366ed",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjLZAv9FmzKaZaq+LhF+d5r8LMkI2/WHA+kJrC+6Hvseqx6n9QhpZya0ijR/jVQ\niPWDg5wTR9Md1LSm1AVdJYQ5/vKoeMwunabmZ3Kz3l0ulsDloUGcGOwMACOuUvoH\nWB6wpvTejd3sIhhYmgObltJ241sN1lkAbjQfU8mkHFhnINCrbfTWo1RtfrtxX6l8\n1AjNshiTzCtmPKCOnpwar6EPKdpg4fU14hTy2YVj9HaqSdGJyQNOCFOFmdhqW3e0\ngv8IrvkXkq1K1byJtioO4X/ZrRfx76/6j/pycRgwGc4f0J0/bdUPBUEiHKoOnSMf\nBu4YjlQdVbNuO1CAiZz6baUWU8hyecymR0scdnHMiNKs1srPmiuuAQwrtLAih2O1\ns1ZJZ9BHqE5VzWz3lZyLTNtm8980RXpiU6c8uK8s1ruR/Xo2lEiTX+5Ja5P4N5Fa\nHQzUwtE+M6xq8W286TX8aAqkTyi/IKMHDIoeQCdpMYID2SzM8gQ1HCd8cMpalSxx\n1PjHTZrn\n=mHWQ\n-----END PGP SIGNATURE-----",
        "payload": "tree 85c9e4ee4cc2a2c3b04d0f02ccc94a63c1567b80\nparent dae72998e8576439254ee497e82e2b9ce4917977\nauthor MarcoFalke <falke.marco@gmail.com> 1555534994 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1555535515 -0400\n\n[test] combine_logs: append node stderr and stdout if it exists\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa90a89eeefcc362970216d95973ad01a21366ed",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa90a89eeefcc362970216d95973ad01a21366ed",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa90a89eeefcc362970216d95973ad01a21366ed/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dae72998e8576439254ee497e82e2b9ce4917977",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dae72998e8576439254ee497e82e2b9ce4917977",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dae72998e8576439254ee497e82e2b9ce4917977"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 41,
      "deletions": 13
    },
    "files": [
      {
        "sha": "45ecaabe14e3d76015739c7c2f048b720eea067f",
        "filename": "test/functional/combine_logs.py",
        "status": "modified",
        "additions": 41,
        "deletions": 13,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa90a89eeefcc362970216d95973ad01a21366ed/test/functional/combine_logs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa90a89eeefcc362970216d95973ad01a21366ed/test/functional/combine_logs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/combine_logs.py?ref=fa90a89eeefcc362970216d95973ad01a21366ed",
        "patch": "@@ -11,6 +11,7 @@\n import heapq\n import itertools\n import os\n+import pathlib\n import re\n import sys\n import tempfile\n@@ -51,9 +52,23 @@ def main():\n     if not args.testdir:\n         print(\"Opening latest test directory: {}\".format(testdir), file=sys.stderr)\n \n+    colors = defaultdict(lambda: '')\n+    if args.color:\n+        colors[\"test\"] = \"\\033[0;36m\"  # CYAN\n+        colors[\"node0\"] = \"\\033[0;34m\"  # BLUE\n+        colors[\"node1\"] = \"\\033[0;32m\"  # GREEN\n+        colors[\"node2\"] = \"\\033[0;31m\"  # RED\n+        colors[\"node3\"] = \"\\033[0;33m\"  # YELLOW\n+        colors[\"reset\"] = \"\\033[0m\"  # Reset font color\n+\n     log_events = read_logs(testdir)\n \n-    print_logs(log_events, color=args.color, html=args.html)\n+    if args.html:\n+        print_logs_html(log_events)\n+    else:\n+        print_logs_plain(log_events, colors)\n+        print_node_warnings(testdir, colors)\n+\n \n def read_logs(tmp_dir):\n     \"\"\"Reads log files.\n@@ -71,6 +86,26 @@ def read_logs(tmp_dir):\n     return heapq.merge(*[get_log_events(source, f) for source, f in files])\n \n \n+def print_node_warnings(tmp_dir, colors):\n+    \"\"\"Print nodes' errors and warnings\"\"\"\n+\n+    warnings = []\n+    for stream in ['stdout', 'stderr']:\n+        for i in itertools.count():\n+            folder = \"{}/node{}/{}\".format(tmp_dir, i, stream)\n+            if not os.path.isdir(folder):\n+                break\n+            for (_, _, fns) in os.walk(folder):\n+                for fn in fns:\n+                    warning = pathlib.Path('{}/{}'.format(folder, fn)).read_text().strip()\n+                    if warning:\n+                        warnings.append((\"node{} {}\".format(i, stream), warning))\n+\n+    print()\n+    for w in warnings:\n+        print(\"{} {} {} {}\".format(colors[w[0].split()[0]], w[0], w[1], colors[\"reset\"]))\n+\n+\n def find_latest_test_dir():\n     \"\"\"Returns the latest tmpfile test directory prefix.\"\"\"\n     tmpdir = tempfile.gettempdir()\n@@ -127,26 +162,19 @@ def get_log_events(source, logfile):\n     except FileNotFoundError:\n         print(\"File %s could not be opened. Continuing without it.\" % logfile, file=sys.stderr)\n \n-def print_logs(log_events, color=False, html=False):\n-    \"\"\"Renders the iterator of log events into text or html.\"\"\"\n-    if not html:\n-        colors = defaultdict(lambda: '')\n-        if color:\n-            colors[\"test\"] = \"\\033[0;36m\"   # CYAN\n-            colors[\"node0\"] = \"\\033[0;34m\"  # BLUE\n-            colors[\"node1\"] = \"\\033[0;32m\"  # GREEN\n-            colors[\"node2\"] = \"\\033[0;31m\"  # RED\n-            colors[\"node3\"] = \"\\033[0;33m\"  # YELLOW\n-            colors[\"reset\"] = \"\\033[0m\"     # Reset font color\n \n+def print_logs_plain(log_events, colors):\n+        \"\"\"Renders the iterator of log events into text.\"\"\"\n         for event in log_events:\n             lines = event.event.splitlines()\n             print(\"{0} {1: <5} {2} {3}\".format(colors[event.source.rstrip()], event.source, lines[0], colors[\"reset\"]))\n             if len(lines) > 1:\n                 for line in lines[1:]:\n                     print(\"{0}{1}{2}\".format(colors[event.source.rstrip()], line, colors[\"reset\"]))\n \n-    else:\n+\n+def print_logs_html(log_events):\n+        \"\"\"Renders the iterator of log events into html.\"\"\"\n         try:\n             import jinja2\n         except ImportError:"
      }
    ]
  }
]