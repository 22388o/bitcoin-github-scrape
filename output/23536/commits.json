[
  {
    "sha": "fa5fb6f2f2eca7d4c011ae33d42b4f01c559644f",
    "node_id": "C_kwDOABII59oAKGZhNWZiNmYyZjJlY2E3ZDRjMDExYWUzM2Q0MmI0ZjAxYzU1OTY0NGY",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-25T09:58:32Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-25T10:17:52Z"
      },
      "message": "refactor: Pass const reference instead of pointer to GetBlockScriptFlags\n\nThe function dereferences the pointer and can not accept nullptr. Change\nthe arg to a const reference to clarify this for the caller.",
      "tree": {
        "sha": "85aaf4d7fbc17b0a96b0e416d7d686915bced0df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/85aaf4d7fbc17b0a96b0e416d7d686915bced0df"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa5fb6f2f2eca7d4c011ae33d42b4f01c559644f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYEACgkQzit1aX5p\npUhhUQv+KPvb5iDDMoZmyVJxWrePeGpBUWUkbnPVqukFkk288RtWjPdH0Hbkm8RS\nhcu2jr5pQC+bopIianAE4sw8lingBnV+yeS8RDZCR6xQKCz+AXvXKqcjqqtAGeXS\ninHj9sT8CyzZsFHyRkpUhWWHFqzv1QmNkaetnpVIHsD2cHOArTneLPbgZb5sMfG7\n3XzzKRXpmfRsPv1mZRjJq9cceAmIZj8s6cLEJPt8BLGDedOQWsvTo1UqfbOvzUzc\nxRQIVLw7+apRkhFaXPrslCqvmLCjHi3vRYBvO0u2wnO3uvffTMoi8VJyOA9YtLcu\na3+nzoS3IhlFAQo2PEJZ7K5IkCDEIwLYUwvJU9LprxMCHXyKAwZgRegka5zQD0zA\n6dtOF3gzac8tBiehiCnhBYGZ8hQn+LTXaQJwC7u7cgUU8TYNZu8XBhPA7YGOZRdW\n9z4orfcFarYnb0B2FuC72+kp/kbhMtOVfoFgdz41tPqKNIF2t9WkxAuqqdSM1DCM\nLyoYN0pf\n=2mAJ\n-----END PGP SIGNATURE-----",
        "payload": "tree 85aaf4d7fbc17b0a96b0e416d7d686915bced0df\nparent 064c729a964ab8d9df5edda18c8b4a9e075789e6\nauthor MarcoFalke <falke.marco@gmail.com> 1637834312 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1637835472 +0100\n\nrefactor: Pass const reference instead of pointer to GetBlockScriptFlags\n\nThe function dereferences the pointer and can not accept nullptr. Change\nthe arg to a const reference to clarify this for the caller.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5fb6f2f2eca7d4c011ae33d42b4f01c559644f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa5fb6f2f2eca7d4c011ae33d42b4f01c559644f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5fb6f2f2eca7d4c011ae33d42b4f01c559644f/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "064c729a964ab8d9df5edda18c8b4a9e075789e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/064c729a964ab8d9df5edda18c8b4a9e075789e6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/064c729a964ab8d9df5edda18c8b4a9e075789e6"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 11,
      "deletions": 12
    },
    "files": [
      {
        "sha": "40209d90605056d21a72f1a267c67745f751e6c2",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 12,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5fb6f2f2eca7d4c011ae33d42b4f01c559644f/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5fb6f2f2eca7d4c011ae33d42b4f01c559644f/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=fa5fb6f2f2eca7d4c011ae33d42b4f01c559644f",
        "patch": "@@ -302,7 +302,7 @@ bool CheckSequenceLocks(CBlockIndex* tip,\n }\n \n // Returns the script flags which should be checked for a given block\n-static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consensus::Params& chainparams);\n+static unsigned int GetBlockScriptFlags(const CBlockIndex& block_index, const Consensus::Params& chainparams);\n \n static void LimitMempoolSize(CTxMemPool& pool, CCoinsViewCache& coins_cache, size_t limit, std::chrono::seconds age)\n     EXCLUSIVE_LOCKS_REQUIRED(pool.cs, ::cs_main)\n@@ -939,7 +939,7 @@ bool MemPoolAccept::ConsensusScriptChecks(const ATMPArgs& args, Workspace& ws)\n     // There is a similar check in CreateNewBlock() to prevent creating\n     // invalid blocks (using TestBlockValidity), however allowing such\n     // transactions into the mempool can be exploited as a DoS attack.\n-    unsigned int currentBlockScriptVerifyFlags = GetBlockScriptFlags(m_active_chainstate.m_chain.Tip(), chainparams.GetConsensus());\n+    unsigned int currentBlockScriptVerifyFlags{GetBlockScriptFlags(*m_active_chainstate.m_chain.Tip(), chainparams.GetConsensus())};\n     if (!CheckInputsFromMempoolAndCache(tx, state, m_view, m_pool, currentBlockScriptVerifyFlags,\n                                         ws.m_precomputed_txdata, m_active_chainstate.CoinsTip())) {\n         return error(\"%s: BUG! PLEASE REPORT THIS! CheckInputScripts failed against latest-block but not STANDARD flags %s, %s\",\n@@ -1579,7 +1579,7 @@ class WarningBitsConditionChecker : public AbstractThresholdConditionChecker\n \n static ThresholdConditionCache warningcache[VERSIONBITS_NUM_BITS] GUARDED_BY(cs_main);\n \n-static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consensus::Params& consensusparams)\n+static unsigned int GetBlockScriptFlags(const CBlockIndex& block_index, const Consensus::Params& consensusparams)\n {\n     unsigned int flags = SCRIPT_VERIFY_NONE;\n \n@@ -1589,43 +1589,42 @@ static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consens\n     // mainnet and testnet), so for simplicity, always leave P2SH\n     // on except for the one violating block.\n     if (consensusparams.BIP16Exception.IsNull() || // no bip16 exception on this chain\n-        pindex->phashBlock == nullptr || // this is a new candidate block, eg from TestBlockValidity()\n-        *pindex->phashBlock != consensusparams.BIP16Exception) // this block isn't the historical exception\n+        block_index.phashBlock == nullptr || // this is a new candidate block, eg from TestBlockValidity()\n+        *block_index.phashBlock != consensusparams.BIP16Exception) // this block isn't the historical exception\n     {\n         // Enforce WITNESS rules whenever P2SH is in effect\n         flags |= SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS;\n     }\n \n     // Enforce the DERSIG (BIP66) rule\n-    if (DeploymentActiveAt(*pindex, consensusparams, Consensus::DEPLOYMENT_DERSIG)) {\n+    if (DeploymentActiveAt(block_index, consensusparams, Consensus::DEPLOYMENT_DERSIG)) {\n         flags |= SCRIPT_VERIFY_DERSIG;\n     }\n \n     // Enforce CHECKLOCKTIMEVERIFY (BIP65)\n-    if (DeploymentActiveAt(*pindex, consensusparams, Consensus::DEPLOYMENT_CLTV)) {\n+    if (DeploymentActiveAt(block_index, consensusparams, Consensus::DEPLOYMENT_CLTV)) {\n         flags |= SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;\n     }\n \n     // Enforce CHECKSEQUENCEVERIFY (BIP112)\n-    if (DeploymentActiveAt(*pindex, consensusparams, Consensus::DEPLOYMENT_CSV)) {\n+    if (DeploymentActiveAt(block_index, consensusparams, Consensus::DEPLOYMENT_CSV)) {\n         flags |= SCRIPT_VERIFY_CHECKSEQUENCEVERIFY;\n     }\n \n     // Enforce Taproot (BIP340-BIP342)\n-    if (DeploymentActiveAt(*pindex, consensusparams, Consensus::DEPLOYMENT_TAPROOT)) {\n+    if (DeploymentActiveAt(block_index, consensusparams, Consensus::DEPLOYMENT_TAPROOT)) {\n         flags |= SCRIPT_VERIFY_TAPROOT;\n     }\n \n     // Enforce BIP147 NULLDUMMY (activated simultaneously with segwit)\n-    if (DeploymentActiveAt(*pindex, consensusparams, Consensus::DEPLOYMENT_SEGWIT)) {\n+    if (DeploymentActiveAt(block_index, consensusparams, Consensus::DEPLOYMENT_SEGWIT)) {\n         flags |= SCRIPT_VERIFY_NULLDUMMY;\n     }\n \n     return flags;\n }\n \n \n-\n static int64_t nTimeCheck = 0;\n static int64_t nTimeForks = 0;\n static int64_t nTimeVerify = 0;\n@@ -1811,7 +1810,7 @@ bool CChainState::ConnectBlock(const CBlock& block, BlockValidationState& state,\n     }\n \n     // Get the script flags for this block\n-    unsigned int flags = GetBlockScriptFlags(pindex, m_params.GetConsensus());\n+    unsigned int flags{GetBlockScriptFlags(*pindex, m_params.GetConsensus())};\n \n     int64_t nTime2 = GetTimeMicros(); nTimeForks += nTime2 - nTime1;\n     LogPrint(BCLog::BENCH, \"    - Fork checks: %.2fms [%.2fs (%.2fms/blk)]\\n\", MILLI * (nTime2 - nTime1), nTimeForks * MICRO, nTimeForks * MILLI / nBlocksTotal);"
      }
    ]
  },
  {
    "sha": "fa65b65821add01e28118899d4f2eef98aa4c37a",
    "node_id": "C_kwDOABII59oAKGZhNjViNjU4MjFhZGQwMWUyODExODg5OWQ0ZjJlZWY5OGFhNGMzN2E",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-25T10:16:21Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-25T10:18:50Z"
      },
      "message": "Remove nullptr check in GetBlockScriptFlags\n\nCommit d59b8d6aa1102ffac980c89e96105ddec9cfb579 removed the need for\nthis check and it was never needed.",
      "tree": {
        "sha": "d6ad9bbe7f9d98fb91f70e314414f65c4988dcf8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d6ad9bbe7f9d98fb91f70e314414f65c4988dcf8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa65b65821add01e28118899d4f2eef98aa4c37a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhwagwAwxFMfcV1UAbj2JNIk/BygSzIoxfdtya8eyXCC2mMHvpfjXmpu3WqxNF2\nqBdTvbExFKfMnPPUPjGA3hJE/7Bz4q0qz9e/HwrtssQ97RCxvmISn+t7z2vGduWN\n1roX6n6vcJnMFnhobvKeOJ1dgjEs/LtpVKVdvsFgkj03V7+6BNFgaGLUUpKITSq3\nK5IzpxqBBbuBK0O/2PWcpXsZ6ad8XX4ST9+YyfxjM/i+Stmcosd6tGxC95b+R4Va\n5L8YHUwPEnpkn4OT3V0hpU/AvYkp12cWgyXHJOlw0PrdaKCUNP2F6zq6trR7TZFR\nuKEf3kq2M/7KLTyEIfhMCLvBuOzODbQrwfcwljM+A3+L1lgPYclYzql9uLEan1Cs\ntEyGqyUAJtpVwRTduQjyTrABRq6VsPpMcYq6taqxXpk8x8dsihizYEyitgAXfSOZ\nWbloIVQx2I62gFP/ivIZ+TnOmZqpDZMXV743O4i0VmY4Ykd0nRssjJdiWFPpipld\nlFIfhtkI\n=0aeH\n-----END PGP SIGNATURE-----",
        "payload": "tree d6ad9bbe7f9d98fb91f70e314414f65c4988dcf8\nparent fa5fb6f2f2eca7d4c011ae33d42b4f01c559644f\nauthor MarcoFalke <falke.marco@gmail.com> 1637835381 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1637835530 +0100\n\nRemove nullptr check in GetBlockScriptFlags\n\nCommit d59b8d6aa1102ffac980c89e96105ddec9cfb579 removed the need for\nthis check and it was never needed.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa65b65821add01e28118899d4f2eef98aa4c37a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa65b65821add01e28118899d4f2eef98aa4c37a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa65b65821add01e28118899d4f2eef98aa4c37a/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa5fb6f2f2eca7d4c011ae33d42b4f01c559644f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5fb6f2f2eca7d4c011ae33d42b4f01c559644f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa5fb6f2f2eca7d4c011ae33d42b4f01c559644f"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "540cc9328b73d4d75639ceafac2e60593e0509b4",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa65b65821add01e28118899d4f2eef98aa4c37a/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa65b65821add01e28118899d4f2eef98aa4c37a/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=fa65b65821add01e28118899d4f2eef98aa4c37a",
        "patch": "@@ -1589,8 +1589,7 @@ static unsigned int GetBlockScriptFlags(const CBlockIndex& block_index, const Co\n     // mainnet and testnet), so for simplicity, always leave P2SH\n     // on except for the one violating block.\n     if (consensusparams.BIP16Exception.IsNull() || // no bip16 exception on this chain\n-        block_index.phashBlock == nullptr || // this is a new candidate block, eg from TestBlockValidity()\n-        *block_index.phashBlock != consensusparams.BIP16Exception) // this block isn't the historical exception\n+        *Assert(block_index.phashBlock) != consensusparams.BIP16Exception) // this block isn't the historical exception\n     {\n         // Enforce WITNESS rules whenever P2SH is in effect\n         flags |= SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS;"
      }
    ]
  },
  {
    "sha": "fa3335bcc143beb7585ebf8c01c028b1762fd77a",
    "node_id": "C_kwDOABII59oAKGZhMzMzNWJjYzE0M2JlYjc1ODVlYmY4YzAxYzAyOGIxNzYyZmQ3N2E",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-16T13:01:49Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-30T15:53:54Z"
      },
      "message": "Enforce Taproot script flags whenever WITNESS is set",
      "tree": {
        "sha": "4e728bce87756aac0c8386751eb2a40b00561bae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4e728bce87756aac0c8386751eb2a40b00561bae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa3335bcc143beb7585ebf8c01c028b1762fd77a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUg4hwv+JKthIasclQhfJOyiWxIDHwjp4qf4oqe5i3Bw6kcEBP5kQuQy1cHwIUhf\nMTaA8C/m/4u1G4bQEtbqVxdtcjjg6dhMMuwHwppzfl5rZUtgjH5ytt3ACdQdxf0I\nR4GxCfuQVr29plinKVnYR/T81L+hQDXAIZG9o9TqHu/7Cvl30K9mYqYOgf10lH4/\nAGHgEG3QKaMhMgifFYwbJOjnkoMNch3ZMNMwIwRNkrxMNRD3R0x77yYMUZp9ASg1\n1w5mCwduVYN//9rNOwjgh/c7Sva84FnXrTF//99ks2qsLF0i2TO3EQwJuLydjbGL\nrvtVlx/aOjd+P1gPigTECaNaE08bNLS9H1BZMiQWIyuGOaa0rbm4aEo01kRjDpjP\ncgDyVviqXQUJ37tDoaYXwdn4/dKJ72qO7zGldSSDxO8Cqu3tT7ITb0rcnPx8grpN\nfMwo8luxGxaQM0YAAy3sCyrJu8OIHkKClPhRprpQVkdCH3AEYiUzfEOMJpL+St4S\nQGvrPvBT\n=vc7I\n-----END PGP SIGNATURE-----",
        "payload": "tree 4e728bce87756aac0c8386751eb2a40b00561bae\nparent fa65b65821add01e28118899d4f2eef98aa4c37a\nauthor MarcoFalke <falke.marco@gmail.com> 1637067709 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1638287634 +0100\n\nEnforce Taproot script flags whenever WITNESS is set\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa3335bcc143beb7585ebf8c01c028b1762fd77a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa3335bcc143beb7585ebf8c01c028b1762fd77a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa3335bcc143beb7585ebf8c01c028b1762fd77a/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa65b65821add01e28118899d4f2eef98aa4c37a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa65b65821add01e28118899d4f2eef98aa4c37a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa65b65821add01e28118899d4f2eef98aa4c37a"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 17,
      "deletions": 13
    },
    "files": [
      {
        "sha": "b0bded43554370f4b8746472df0666ec1260992c",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3335bcc143beb7585ebf8c01c028b1762fd77a/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3335bcc143beb7585ebf8c01c028b1762fd77a/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=fa3335bcc143beb7585ebf8c01c028b1762fd77a",
        "patch": "@@ -66,6 +66,7 @@ class CMainParams : public CChainParams {\n         consensus.signet_challenge.clear();\n         consensus.nSubsidyHalvingInterval = 210000;\n         consensus.BIP16Exception = uint256S(\"0x00000000000002dc756eebf4f49723ed8d30cc28a5f108eb94b1ba88ac4f9c22\");\n+        consensus.TaprootException = uint256S(\"0x0000000000000000000f14c35b2d841e986ab5441de8c585d5ffe55ea1e395ad\");\n         consensus.BIP34Height = 227931;\n         consensus.BIP34Hash = uint256S(\"0x000000000000024b89b42a942fe0d9fea3bb44ab7bd1b19115dd6a759c0808b8\");\n         consensus.BIP65Height = 388381; // 000000000000000004c2b624ed5d7756c508d90fd0da2c7c679febfa6c4735f0\n@@ -185,6 +186,7 @@ class CTestNetParams : public CChainParams {\n         consensus.signet_challenge.clear();\n         consensus.nSubsidyHalvingInterval = 210000;\n         consensus.BIP16Exception = uint256S(\"0x00000000dd30457c001f4095d208cc1296b0eed002427aa599874af7a432b105\");\n+        consensus.TaprootException = uint256::ZERO;\n         consensus.BIP34Height = 21111;\n         consensus.BIP34Hash = uint256S(\"0x0000000023b3a96d3484e5abb3755c413e7d41500f8e2a5c3f0dd01299cd8ef8\");\n         consensus.BIP65Height = 581885; // 00000000007f6655f22f98e72ed80d8b06dc761d5da09df0fa1dc4be4f861eb6\n@@ -324,6 +326,7 @@ class SigNetParams : public CChainParams {\n         consensus.signet_challenge.assign(bin.begin(), bin.end());\n         consensus.nSubsidyHalvingInterval = 210000;\n         consensus.BIP16Exception = uint256{};\n+        consensus.TaprootException = uint256::ZERO;\n         consensus.BIP34Height = 1;\n         consensus.BIP34Hash = uint256{};\n         consensus.BIP65Height = 1;\n@@ -392,6 +395,7 @@ class CRegTestParams : public CChainParams {\n         consensus.signet_challenge.clear();\n         consensus.nSubsidyHalvingInterval = 150;\n         consensus.BIP16Exception = uint256();\n+        consensus.TaprootException = uint256::ZERO;\n         consensus.BIP34Height = 1; // Always active unless overridden\n         consensus.BIP34Hash = uint256();\n         consensus.BIP65Height = 1;  // Always active unless overridden"
      },
      {
        "sha": "97e755a80b8be5e2a39d9e4eeeff67b8a936125e",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3335bcc143beb7585ebf8c01c028b1762fd77a/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3335bcc143beb7585ebf8c01c028b1762fd77a/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=fa3335bcc143beb7585ebf8c01c028b1762fd77a",
        "patch": "@@ -70,8 +70,10 @@ struct BIP9Deployment {\n struct Params {\n     uint256 hashGenesisBlock;\n     int nSubsidyHalvingInterval;\n-    /* Block hash that is excepted from BIP16 enforcement */\n+    /* Block hash that is excepted from BIP16 enforcement, or Null if none exists */\n     uint256 BIP16Exception;\n+    /* Block hash that is excepted from SCRIPT_VERIFY_TAPROOT enforcement, or Null if none exists */\n+    uint256 TaprootException;\n     /** Block height and hash at which BIP34 becomes active */\n     int BIP34Height;\n     uint256 BIP34Hash;"
      },
      {
        "sha": "4487ef5defb4bdb0f3bde0d9eac0d67968086558",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3335bcc143beb7585ebf8c01c028b1762fd77a/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3335bcc143beb7585ebf8c01c028b1762fd77a/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=fa3335bcc143beb7585ebf8c01c028b1762fd77a",
        "patch": "@@ -1593,6 +1593,13 @@ static unsigned int GetBlockScriptFlags(const CBlockIndex& block_index, const Co\n     {\n         // Enforce WITNESS rules whenever P2SH is in effect\n         flags |= SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS;\n+        // Enforce Taproot (BIP340-BIP342) whenever WITNESS is in effect,\n+        // unless except\n+        if (!consensusparams.TaprootException.IsNull() ||                        // no Taproot exception on this chain\n+            *Assert(block_index.phashBlock) != consensusparams.TaprootException) // this block is not the historical exception\n+        {\n+            flags |= SCRIPT_VERIFY_TAPROOT;\n+        }\n     }\n \n     // Enforce the DERSIG (BIP66) rule\n@@ -1610,11 +1617,6 @@ static unsigned int GetBlockScriptFlags(const CBlockIndex& block_index, const Co\n         flags |= SCRIPT_VERIFY_CHECKSEQUENCEVERIFY;\n     }\n \n-    // Enforce Taproot (BIP340-BIP342)\n-    if (DeploymentActiveAt(block_index, consensusparams, Consensus::DEPLOYMENT_TAPROOT)) {\n-        flags |= SCRIPT_VERIFY_TAPROOT;\n-    }\n-\n     // Enforce BIP147 NULLDUMMY (activated simultaneously with segwit)\n     if (DeploymentActiveAt(block_index, consensusparams, Consensus::DEPLOYMENT_SEGWIT)) {\n         flags |= SCRIPT_VERIFY_NULLDUMMY;"
      },
      {
        "sha": "1da48b77a60cb63c3920ec13cbd802a643b80d50",
        "filename": "test/functional/feature_taproot.py",
        "status": "modified",
        "additions": 3,
        "deletions": 7,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3335bcc143beb7585ebf8c01c028b1762fd77a/test/functional/feature_taproot.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3335bcc143beb7585ebf8c01c028b1762fd77a/test/functional/feature_taproot.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_taproot.py?ref=fa3335bcc143beb7585ebf8c01c028b1762fd77a",
        "patch": "@@ -1181,15 +1181,11 @@ def spenders_taproot_inactive():\n     ]\n     tap = taproot_construct(pub, scripts)\n \n-    # Test that keypath spending is valid & non-standard, regardless of validity.\n+    # Test that valid spending is standard.\n     add_spender(spenders, \"inactive/keypath_valid\", key=sec, tap=tap, standard=Standard.V23)\n-    add_spender(spenders, \"inactive/keypath_invalidsig\", key=sec, tap=tap, standard=False, sighash=bitflipper(default_sighash))\n-    add_spender(spenders, \"inactive/keypath_empty\", key=sec, tap=tap, standard=False, witness=[])\n-\n-    # Same for scriptpath spending (and features like annex, leaf versions, or OP_SUCCESS don't change this)\n     add_spender(spenders, \"inactive/scriptpath_valid\", key=sec, tap=tap, leaf=\"pk\", standard=Standard.V23, inputs=[getter(\"sign\")])\n-    add_spender(spenders, \"inactive/scriptpath_invalidsig\", key=sec, tap=tap, leaf=\"pk\", standard=False, inputs=[getter(\"sign\")], sighash=bitflipper(default_sighash))\n-    add_spender(spenders, \"inactive/scriptpath_invalidcb\", key=sec, tap=tap, leaf=\"pk\", standard=False, inputs=[getter(\"sign\")], controlblock=bitflipper(default_controlblock))\n+\n+    # Test that features like annex, leaf versions, or OP_SUCCESS are valid but non-standard\n     add_spender(spenders, \"inactive/scriptpath_valid_unkleaf\", key=sec, tap=tap, leaf=\"future_leaf\", standard=False, inputs=[getter(\"sign\")])\n     add_spender(spenders, \"inactive/scriptpath_invalid_unkleaf\", key=sec, tap=tap, leaf=\"future_leaf\", standard=False, inputs=[getter(\"sign\")], sighash=bitflipper(default_sighash))\n     add_spender(spenders, \"inactive/scriptpath_valid_opsuccess\", key=sec, tap=tap, leaf=\"op_success\", standard=False, inputs=[getter(\"sign\")])"
      }
    ]
  }
]