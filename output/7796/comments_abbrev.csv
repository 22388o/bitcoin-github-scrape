laanwj,2016-04-03T11:28:42Z,"Negative fee rates imply that you pay a smaller, more negative fee the larger the transaction? What do negative fees even mean, steal from the miner? Or is this so that anti-transactions of negative size pay a positive fee?\n\nI'd say this is an edge case better to get rid of (e.g. assert or throw an error).\n",https://github.com/bitcoin/bitcoin/pull/7796#issuecomment-204947683,204947683,
sipa,2016-04-03T11:30:08Z,Uninformed guess: maybe they are relevant for priotizetransaction?\n,https://github.com/bitcoin/bitcoin/pull/7796#issuecomment-204947736,204947736,
laanwj,2016-04-03T11:31:10Z,"According to @MarcoFalke they already don't work on 64-bit architectures, which is probably 90%+ of all nodes. Better to remove it for 32 bit as well.\n",https://github.com/bitcoin/bitcoin/pull/7796#issuecomment-204947781,204947781,
MarcoFalke,2016-04-03T11:35:33Z,"@sipa is correct\n\n@laanwj I have pushed the fix as a second commit, so the travis result can be compared. The fix is probably a lot smaller than the fix which  removes support.\n",https://github.com/bitcoin/bitcoin/pull/7796#issuecomment-204948093,204948093,
laanwj,2016-04-03T11:48:10Z,"Ok, at least document this then, for example in the doc comment of the constructor. It's extremely unintuitive to me and probably to others reading this code as well.\n",https://github.com/bitcoin/bitcoin/pull/7796#issuecomment-204949199,204949199,
MarcoFalke,2016-04-03T12:00:53Z,"Ok, will add the doc later...\n",https://github.com/bitcoin/bitcoin/pull/7796#issuecomment-204951227,204951227,
morcos,2016-04-03T13:54:59Z,ping @sdaftuar \n,https://github.com/bitcoin/bitcoin/pull/7796#issuecomment-204981991,204981991,
sdaftuar,2016-04-05T14:08:35Z,"I think it's probably better to fix support for negative fee rates on 64-bit platforms, because (a) fixing the `prioritisetransaction` RPC to disallow negative feerates would be difficult/annoying because fee deltas can be stored prior to transaction acceptance, (b) it would be counterintuitive if you called `prioritisetransaction` with -X and then later with X but didn't get back to where you sta",https://github.com/bitcoin/bitcoin/pull/7796#issuecomment-205825692,205825692,
MarcoFalke,2016-04-08T17:01:50Z,"> I think it probably makes most sense to enforce the property that CFeeRate(X).GetFee(size) == -1 \* CFeeRate(-X).GetFee(size);\n\nMakes sense, done.\n\n> add a unit test that exercises the constructor CFeeRate(const CAmount& nFeePaid, size_t nSize_)\n\nDone.\n",https://github.com/bitcoin/bitcoin/pull/7796#issuecomment-207516697,207516697,
MarcoFalke,2016-04-09T11:54:46Z,Before on 64-bit:\n\n```\ntest/amount_tests.cpp(33): error: feeRate.GetFee(1) == -1 has failed [18446744073709550 != -1]\ntest/amount_tests.cpp(34): error: feeRate.GetFee(121) == -121 has failed [18446744073709430 != -121]\ntest/amount_tests.cpp(35): error: feeRate.GetFee(999) == -999 has failed [18446744073708552 != -999]\ntest/amount_tests.cpp(36): error: feeRate.GetFee(1e3) == -1e3 has failed [,https://github.com/bitcoin/bitcoin/pull/7796#issuecomment-207777672,207777672,
laanwj,2016-04-14T09:54:36Z,utACK facf5a4\n,https://github.com/bitcoin/bitcoin/pull/7796#issuecomment-209857572,209857572,
jtimon,2016-04-14T14:42:36Z,"After this, the following change will fail the new tests in amount_tests.cpp: https://github.com/bitcoin/bitcoin/pull/7728/commits/5ca24733d08ac57e01c521ded864fd516448f351\n\nThis is a mystery to me, can anybody help me understand?\nI get the same errors that MarcoFalke gets ""Before on 64-bit:"", do I have to do something locally on 64 bits linux?\n",https://github.com/bitcoin/bitcoin/pull/7796#issuecomment-209977856,209977856,
laanwj,2016-04-03T11:46:47Z,"Instead of the temporary variable, why not just:\n\n```\nnSatoshisPerK = nFeePaid * 1000 / static_cast<int64_t>(nSize);\n```\n\nAlso at least theoretically you should handle the case where nSize is outside the range of `int64_t`, though I doubt someone will ever care about transactions that large.\n",https://github.com/bitcoin/bitcoin/pull/7796#discussion_r58308944,58308944,src/amount.cpp
MarcoFalke,2016-04-03T12:00:42Z,"If it is used more than once, you'd rather want to do the cast only once. I guess an alternative would be to change it in the constructor arguments, but that is less verbose, imo.\n",https://github.com/bitcoin/bitcoin/pull/7796#discussion_r58309089,58309089,src/amount.cpp
laanwj,2016-04-03T12:12:37Z,"> I guess an alternative would be to change it in the constructor arguments\n\nI thought of that, but didn't mention it at second thought. Before you know it people will want full support for negative sizes as well. The appropriate type is size_t.\n",https://github.com/bitcoin/bitcoin/pull/7796#discussion_r58309225,58309225,src/amount.cpp
MarcoFalke,2016-04-08T17:01:45Z,"This would require a cast in 4 places instead of two (see diff below) but I am happy to apply the diff an squash. Please let me know how to proceed so we can finalize this.\n\n``` diff\ndiff --git a/src/amount.cpp b/src/amount.cpp\nindex 7b8618d..3966c5f 100644\n--- a/src/amount.cpp\n+++ b/src/amount.cpp\n@@ -13,8 +13,7 @@ CFeeRate::CFeeRate(const CAmount& nFeePaid, size_t nBytes_)\n {\n     asser",https://github.com/bitcoin/bitcoin/pull/7796#discussion_r59056658,59056658,src/amount.cpp
jtimon,2016-04-14T13:58:48Z,"Couldn't have we just removed this special case from here (ie move this check to the callers that need it)?\nI know that would be more disruptive, but it will also make increasing the internal precision easier later.\n",https://github.com/bitcoin/bitcoin/pull/7796#discussion_r59721346,59721346,src/amount.cpp
MarcoFalke,2016-04-14T14:55:57Z,Sure!\n\nI am only aware of the wallet using it: https://github.com/bitcoin/bitcoin/blob/430fffefaab6832b8f6605f14a992e7e55b9547e/src/wallet/wallet.cpp#L2335\n,https://github.com/bitcoin/bitcoin/pull/7796#discussion_r59732039,59732039,src/amount.cpp
jtimon,2016-04-14T17:03:44Z,"Oh, that's great. Moving from nSatoshisPerK to 1 was already and step forward. But I've strong reason to believe that this special case was the most important impediment for not being able to ""easily"" do more than *2 on internal precision in #7731(in fact, I don't think it would pass all the tests if I rebased this now due to this change).\n\nIf you create a PR to move the special case to the wall",https://github.com/bitcoin/bitcoin/pull/7796#discussion_r59753604,59753604,src/amount.cpp
