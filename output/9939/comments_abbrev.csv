NicolasDorier,2017-03-08T03:11:04Z,"Please check https://github.com/bitcoin/bitcoin/pull/9167, morcos is working on it",https://github.com/bitcoin/bitcoin/pull/9939#issuecomment-284933779,284933779,
joaopaulofonseca,2017-03-08T11:26:00Z,"@pedrobranco yes, that `if` is a little mess. I'll also take a look at it.\n\n@NicolasDorier If I understood the @morcos PR correctly, it's related to the `isminetype` of the transaction inputs and not the outputs, which we need here to find our `utxos`.",https://github.com/bitcoin/bitcoin/pull/9939#issuecomment-285016733,285016733,
NicolasDorier,2017-03-08T11:51:18Z,my bad I read too fast.,https://github.com/bitcoin/bitcoin/pull/9939#issuecomment-285021353,285021353,
NicolasDorier,2017-03-08T12:00:02Z,"Why not having the cache scoped to the WalletTransaction type ?\nInstead of \n```\nIsMine(pcoin->tx->vout[i])\n````\nwe would have\n```\npcoin->IsMine(i)\n````\nwhere WalletTransaction::IsMine would cache the result at the WalletTransaction level.\n\n1. this would make it more readable, \n2. this cache could be populated everywhere in the code when IsMine is called,\n3. the cache woul",https://github.com/bitcoin/bitcoin/pull/9939#issuecomment-285022930,285022930,
joaopaulofonseca,2017-03-10T12:13:19Z,"@NicolasDorier that's a good suggestion. Actually a while ago I was trying to create a cache to store these values, but at the wallet level. But couldn't manage to successfully achieve a solution with both reliability and speed. But I will look into your approach.\n\n@ryanofsky Ok, I like it. I'll simplify that piece of code.",https://github.com/bitcoin/bitcoin/pull/9939#issuecomment-285654324,285654324,
RHavar,2017-06-01T19:05:37Z,"I've tested 46cbc0afa0060f0065dd48f8e7e20fe413f5b10c\n\nBefore median time of listunspent after a few runs on my wallet was 14.4 seconds, now it's 12.8s.\n\nSo it seems faster, but not earth shatteringly so. For reference my wallet has about ~520k transactions in it, where of them ~168k are mine (outgoing transactions).\n\n--\n\nTo me it seems like @NicolasDorier's suggestion is the way to",https://github.com/bitcoin/bitcoin/pull/9939#issuecomment-305589833,305589833,
laanwj,2017-06-05T15:28:43Z,@RHavar thanks for testing!,https://github.com/bitcoin/bitcoin/pull/9939#issuecomment-306218420,306218420,
joaopaulofonseca,2017-06-05T15:48:05Z,"@RHavar thanks a lot for your feedback! The current implementation of `listunspent` is a little tricky to optimize without a larger refactor. \n\nI've tried to optimize each of the two heavier calls within `listunspent`: `IsMine()` and `IsSpent()`. But without optimizing both, they will only fix different use cases separately, which will behave very differently for **large wallet** vs **large am",https://github.com/bitcoin/bitcoin/pull/9939#issuecomment-306223953,306223953,
NicolasDorier,2017-07-26T02:37:00Z,"utACK  46cbc0a, it is simple enough. Can keep wallet level caching for later PR.",https://github.com/bitcoin/bitcoin/pull/9939#issuecomment-317930083,317930083,
ryanofsky,2017-10-12T17:21:47Z,"Change is simple and has multiple acks, but needs to be rebased.",https://github.com/bitcoin/bitcoin/pull/9939#issuecomment-336206772,336206772,
MarcoFalke,2017-11-10T18:30:16Z,"Not rebased in 30 days.\n\nThis is now up for grabs.",https://github.com/bitcoin/bitcoin/pull/9939#issuecomment-343550562,343550562,
joaopaulofonseca,2017-11-12T14:33:25Z,"Sorry guys, haven't had much time to work on this lately.. Although this improves the speed, the last tests I did showed there are still some edge cases where the unspent count differs which means that the cache is not accurate.. I'll try to pick this up in the future, and reopen if needed. ",https://github.com/bitcoin/bitcoin/pull/9939#issuecomment-343741342,343741342,
ryanofsky,2018-01-08T22:34:11Z,Could add [up for grabs](https://github.com/bitcoin/bitcoin/issues?q=label%3A%22Up+for+grabs%22) label,https://github.com/bitcoin/bitcoin/pull/9939#issuecomment-356118353,356118353,
pedrobranco,2017-03-07T18:00:30Z,"I there's an ACK from the community, I would love to see this giant `if` break down with several early continues (to facilitate the reading), as applied [here](https://github.com/bitcoin/bitcoin/pull/8952/files#diff-b2bb174788c7409b671c46ccc86034bdR2018).",https://github.com/bitcoin/bitcoin/pull/9939#discussion_r104735147,104735147,src/wallet/wallet.cpp
ryanofsky,2017-03-08T19:13:28Z,"Can simplify this as:\n\n```\n+                auto inserted = mapOutputIsMine.emplace(pcoin->tx->vout[i].scriptPubKey, ISMINE_NO);\n+                if (inserted.second) {\n+                   inserted.first->second = IsMine(pcoin->tx->vout[i]);\n+                }\n+                isminetype mine = inserted.first->second;\n```",https://github.com/bitcoin/bitcoin/pull/9939#discussion_r104997820,104997820,src/wallet/wallet.cpp
ryanofsky,2017-03-08T19:15:14Z,"This would seem like a good idea, especially if the continues were documented with new comments. Not really on-topic for this PR, however.",https://github.com/bitcoin/bitcoin/pull/9939#discussion_r104998244,104998244,src/wallet/wallet.cpp
