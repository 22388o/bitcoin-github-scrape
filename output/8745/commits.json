[
  {
    "sha": "f76ed9ca1e3fdc290698496e0c910f522e822e53",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNzZlZDljYTFlM2ZkYzI5MDY5ODQ5NmUwYzkxMGY1MjJlODIyZTUz",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-09-16T14:45:36Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-05-26T09:37:54Z"
      },
      "message": "[PoC] Add wallet inspection and modification tool \"bitcoin-wallet-tool\"",
      "tree": {
        "sha": "81299604fff3b113a29172def4875d7bf165e5d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/81299604fff3b113a29172def4875d7bf165e5d2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f76ed9ca1e3fdc290698496e0c910f522e822e53",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlkn93MACgkQHrd2uwPH\nki2zSQ/8CGE7ZxGOkVsj4nyKNSG6ZlnC0HjcOIIvM3Mw6rLcDL29AOsH7qQDGrmI\nayO3Mmaji+oC3ctevScdbUZ01yCrNsbWMSCamI49zmfY6/6qKSuZ7WCNwygSH17Z\nKsT+P5HaosKhb97nQjf5mxLDX0OkA4vCYinVGyZ5vh99riPUsUPWivDwRIV0zb2D\nbAaAfU5Ej1WZkSdLkGecwMmTxb5NLnyFKLhQmpQ+vwM0gGBYAX5Wnr8gO7YNNs85\nOFtbBBf4yrwoEwZ3oLz0RhuChtMjQte5ViknfLYoIBkKX4uXMe4S/32UDBZIAryK\nueXz9CdyDECQFEJ51sbqzNbWX8nfave8gibJoOLfmgRCMvT4+b/DYjeBIUxuBbrD\nSMom6C9m6M6oqqS67e5CDYSb2ECY5KJC01pWcH77hOGMcRP9Eqn3XkYRQtdcYRUz\nmJ/wvd3vC6HM4V2js7gl7/MFwScfXlBeVXI65hVJGAhoZGpMz2oLyoNtCr3qErLD\n60ACTXPJcuthKrxptI9E3XNKHfJUfu4fmEwGMz24bN4LrqSwmU7TUFwwC+8hsang\nt8SXr3T8Sy0HXjOaswJLxh0Xbt1Zm3yYWRe2ow7sKWnhAIZl6NsB//jW8m5kxxly\nN2/xbRu3MdaID1Op9OcSD2Zzllpy0cEJNrBaz7Vu93BACkeDeEI=\n=r4DN\n-----END PGP SIGNATURE-----",
        "payload": "tree 81299604fff3b113a29172def4875d7bf165e5d2\nparent 4314544d46e8e46c3c9da60f1d18297f52f58418\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1474037136 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1495791474 +0200\n\n[PoC] Add wallet inspection and modification tool \"bitcoin-wallet-tool\"\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f76ed9ca1e3fdc290698496e0c910f522e822e53",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f76ed9ca1e3fdc290698496e0c910f522e822e53",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f76ed9ca1e3fdc290698496e0c910f522e822e53/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4314544d46e8e46c3c9da60f1d18297f52f58418",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4314544d46e8e46c3c9da60f1d18297f52f58418",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4314544d46e8e46c3c9da60f1d18297f52f58418"
      }
    ],
    "stats": {
      "total": 358,
      "additions": 350,
      "deletions": 8
    },
    "files": [
      {
        "sha": "1e822ffeafc8b81ca550296010c472089366ce0e",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f76ed9ca1e3fdc290698496e0c910f522e822e53/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f76ed9ca1e3fdc290698496e0c910f522e822e53/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=f76ed9ca1e3fdc290698496e0c910f522e822e53",
        "patch": "@@ -18,6 +18,7 @@ BITCOIN_DAEMON_NAME=bitcoind\n BITCOIN_GUI_NAME=bitcoin-qt\n BITCOIN_CLI_NAME=bitcoin-cli\n BITCOIN_TX_NAME=bitcoin-tx\n+BITCOIN_WALLET_TOOL_NAME=bitcoin-wallet-tool\n \n AC_CANONICAL_HOST\n \n@@ -240,7 +241,7 @@ CPPFLAGS=\"$CPPFLAGS -DHAVE_BUILD_INFO -D__STDC_FORMAT_MACROS\"\n \n AC_ARG_WITH([utils],\n   [AS_HELP_STRING([--with-utils],\n-  [build bitcoin-cli bitcoin-tx (default=yes)])],\n+  [build bitcoin-cli bitcoin-tx bitcoin-wallet-tool (default=yes)])],\n   [build_bitcoin_utils=$withval],\n   [build_bitcoin_utils=yes])\n \n@@ -969,7 +970,7 @@ AC_MSG_CHECKING([whether to build bitcoind])\n AM_CONDITIONAL([BUILD_BITCOIND], [test x$build_bitcoind = xyes])\n AC_MSG_RESULT($build_bitcoind)\n \n-AC_MSG_CHECKING([whether to build utils (bitcoin-cli bitcoin-tx)])\n+AC_MSG_CHECKING([whether to build utils (bitcoin-cli bitcoin-tx bitcoin-wallet-tool)])\n AM_CONDITIONAL([BUILD_BITCOIN_UTILS], [test x$build_bitcoin_utils = xyes])\n AC_MSG_RESULT($build_bitcoin_utils)\n \n@@ -1137,6 +1138,7 @@ AC_SUBST(BITCOIN_DAEMON_NAME)\n AC_SUBST(BITCOIN_GUI_NAME)\n AC_SUBST(BITCOIN_CLI_NAME)\n AC_SUBST(BITCOIN_TX_NAME)\n+AC_SUBST(BITCOIN_WALLET_TOOL_NAME)\n \n AC_SUBST(RELDFLAGS)\n AC_SUBST(ERROR_CXXFLAGS)"
      },
      {
        "sha": "24424693adff2f29db05011a03e4b11fb5da71f4",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 39,
        "deletions": 0,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f76ed9ca1e3fdc290698496e0c910f522e822e53/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f76ed9ca1e3fdc290698496e0c910f522e822e53/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=f76ed9ca1e3fdc290698496e0c910f522e822e53",
        "patch": "@@ -41,6 +41,7 @@ LIBBITCOINCONSENSUS=libbitcoinconsensus.la\n endif\n if ENABLE_WALLET\n LIBBITCOIN_WALLET=libbitcoin_wallet.a\n+LIBBITCOIN_WALLET_TOOLS=libbitcoin_wallet_tools.a\n endif\n \n $(LIBSECP256K1): $(wildcard secp256k1/src/*) $(wildcard secp256k1/include/*)\n@@ -56,6 +57,7 @@ EXTRA_LIBRARIES += \\\n   $(LIBBITCOIN_SERVER) \\\n   $(LIBBITCOIN_CLI) \\\n   $(LIBBITCOIN_WALLET) \\\n+  $(LIBBITCOIN_WALLET_TOOLS) \\\n   $(LIBBITCOIN_ZMQ)\n \n lib_LTLIBRARIES = $(LIBBITCOINCONSENSUS)\n@@ -71,6 +73,9 @@ endif\n \n if BUILD_BITCOIN_UTILS\n   bin_PROGRAMS += bitcoin-cli bitcoin-tx\n+if ENABLE_WALLET\n+  bin_PROGRAMS += bitcoin-wallet-tool\n+endif\n endif\n \n .PHONY: FORCE check-symbols check-security\n@@ -163,6 +168,7 @@ BITCOIN_CORE_H = \\\n   wallet/rpcwallet.h \\\n   wallet/wallet.h \\\n   wallet/walletdb.h \\\n+  wallet/wallettools.h \\\n   warnings.h \\\n   zmq/zmqabstractnotifier.h \\\n   zmq/zmqconfig.h\\\n@@ -243,6 +249,12 @@ libbitcoin_wallet_a_SOURCES = \\\n   policy/rbf.cpp \\\n   $(BITCOIN_CORE_H)\n \n+libbitcoin_wallet_tools_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+libbitcoin_wallet_tools_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+libbitcoin_wallet_tools_a_SOURCES = \\\n+  wallet/wallettools.cpp \\\n+  $(BITCOIN_CORE_H)\n+\n # crypto primitives library\n crypto_libbitcoin_crypto_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_CONFIG_INCLUDES)\n crypto_libbitcoin_crypto_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n@@ -425,6 +437,33 @@ bitcoin_tx_LDADD = \\\n bitcoin_tx_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n #\n \n+# bitcoin-wallet-tool binary #\n+bitcoin_wallet_tool_SOURCES = bitcoin-wallet-tool.cpp\n+bitcoin_wallet_tool_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+bitcoin_wallet_tool_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+bitcoin_wallet_tool_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+\n+if TARGET_WINDOWS\n+bitcoin_wallet_tool_SOURCES += bitcoin-wallet-tool-res.rc\n+endif\n+\n+bitcoin_wallet_tool_LDADD = \\\n+  $(LIBBITCOIN_SERVER) \\\n+  $(LIBBITCOIN_COMMON) \\\n+  $(LIBUNIVALUE) \\\n+  $(LIBBITCOIN_UTIL) \\\n+  $(LIBBITCOIN_WALLET) \\\n+  $(LIBBITCOIN_WALLET_TOOLS) \\\n+  $(LIBBITCOIN_ZMQ) \\\n+  $(LIBBITCOIN_CONSENSUS) \\\n+  $(LIBBITCOIN_CRYPTO) \\\n+  $(LIBLEVELDB) \\\n+  $(LIBMEMENV) \\\n+  $(LIBSECP256K1)\n+\n+bitcoin_wallet_tool_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(ZMQ_LIBS)\n+#\n+\n # bitcoinconsensus library #\n if BUILD_BITCOIN_LIBS\n include_HEADERS = script/bitcoinconsensus.h"
      },
      {
        "sha": "bc7d49025c57ff6000fa629bcdac412e0d166151",
        "filename": "src/bitcoin-wallet-tool-res.rc",
        "status": "added",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f76ed9ca1e3fdc290698496e0c910f522e822e53/src/bitcoin-wallet-tool-res.rc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f76ed9ca1e3fdc290698496e0c910f522e822e53/src/bitcoin-wallet-tool-res.rc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet-tool-res.rc?ref=f76ed9ca1e3fdc290698496e0c910f522e822e53",
        "patch": "@@ -0,0 +1,35 @@\n+#include <windows.h>             // needed for VERSIONINFO\n+#include \"clientversion.h\"       // holds the needed client version information\n+\n+#define VER_PRODUCTVERSION     CLIENT_VERSION_MAJOR,CLIENT_VERSION_MINOR,CLIENT_VERSION_REVISION,CLIENT_VERSION_BUILD\n+#define VER_PRODUCTVERSION_STR STRINGIZE(CLIENT_VERSION_MAJOR) \".\" STRINGIZE(CLIENT_VERSION_MINOR) \".\" STRINGIZE(CLIENT_VERSION_REVISION) \".\" STRINGIZE(CLIENT_VERSION_BUILD)\n+#define VER_FILEVERSION        VER_PRODUCTVERSION\n+#define VER_FILEVERSION_STR    VER_PRODUCTVERSION_STR\n+\n+VS_VERSION_INFO VERSIONINFO\n+FILEVERSION     VER_FILEVERSION\n+PRODUCTVERSION  VER_PRODUCTVERSION\n+FILEOS          VOS_NT_WINDOWS32\n+FILETYPE        VFT_APP\n+BEGIN\n+    BLOCK \"StringFileInfo\"\n+    BEGIN\n+        BLOCK \"040904E4\" // U.S. English - multilingual (hex)\n+        BEGIN\n+            VALUE \"CompanyName\",        \"Bitcoin\"\n+            VALUE \"FileDescription\",    \"bitcoin-wallet-tool (CLI Bitcoin wallet editor utility)\"\n+            VALUE \"FileVersion\",        VER_FILEVERSION_STR\n+            VALUE \"InternalName\",       \"bitcoin-wallet-tool\"\n+            VALUE \"LegalCopyright\",     COPYRIGHT_STR\n+            VALUE \"LegalTrademarks1\",   \"Distributed under the MIT software license, see the accompanying file COPYING or http://www.opensource.org/licenses/mit-license.php.\"\n+            VALUE \"OriginalFilename\",   \"bitcoin-wallet-tool.exe\"\n+            VALUE \"ProductName\",        \"bitcoin-wallet-tool\"\n+            VALUE \"ProductVersion\",     VER_PRODUCTVERSION_STR\n+        END\n+    END\n+\n+    BLOCK \"VarFileInfo\"\n+    BEGIN\n+        VALUE \"Translation\", 0x0, 1252 // language neutral - multilingual (decimal)\n+    END\n+END"
      },
      {
        "sha": "cd204cdf108aaf683595110d2f6afb32b959b1c1",
        "filename": "src/bitcoin-wallet-tool.cpp",
        "status": "added",
        "additions": 90,
        "deletions": 0,
        "changes": 90,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f76ed9ca1e3fdc290698496e0c910f522e822e53/src/bitcoin-wallet-tool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f76ed9ca1e3fdc290698496e0c910f522e822e53/src/bitcoin-wallet-tool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet-tool.cpp?ref=f76ed9ca1e3fdc290698496e0c910f522e822e53",
        "patch": "@@ -0,0 +1,90 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include \"config/bitcoin-config.h\"\n+#endif\n+\n+#include \"chainparams.h\"\n+#include \"chainparamsbase.h\"\n+#include \"consensus/consensus.h\"\n+#include \"util.h\"\n+#include \"utilstrencodings.h\"\n+\n+#include \"wallet/wallettools.h\"\n+\n+#include <stdio.h>\n+\n+\n+std::string HelpMessageCli()\n+{\n+    std::string strUsage;\n+    strUsage += HelpMessageGroup(_(\"Options:\"));\n+    strUsage += HelpMessageOpt(\"-?\", _(\"This help message\"));\n+    strUsage += HelpMessageOpt(\"-file=<wallet-file>\", strprintf(_(\"Specify wallet.dat file (default: %s)\"), \"./\"+std::string(DEFAULT_WALLET_DAT)));\n+\n+    strUsage += HelpMessageGroup(_(\"Commands:\"));\n+    strUsage += HelpMessageOpt(\"info\", _(\"Get wallet infos\"));\n+    strUsage += HelpMessageOpt(\"create\", _(\"Create new wallet file\"));\n+    strUsage += HelpMessageOpt(\"salvage\", _(\"Recover readable keypairs\"));\n+    strUsage += HelpMessageOpt(\"zaptxes\", _(\"Remove all transactions including metadata (will keep keys)\"));\n+\n+    return strUsage;\n+}\n+\n+static bool WalletAppInit(int argc, char* argv[])\n+{\n+    ParseParameters(argc, argv);\n+    if (argc<2 || IsArgSet(\"-?\") || IsArgSet(\"-h\") || IsArgSet(\"-help\") || IsArgSet(\"-version\")) {\n+        std::string strUsage = strprintf(_(\"%s wallet-tool version\"), PACKAGE_NAME) + \" \" + FormatFullVersion() + \"\\n\";\n+        if (!IsArgSet(\"-version\")) {\n+            strUsage += \"\\n\" + _(\"Usage:\") + \"\\n\" +\n+            \"  bitcoin-wallet-tool [options] <command>\\n\";\n+            strUsage += \"\\n\" + HelpMessageCli();\n+        }\n+\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+        return false;\n+    }\n+\n+    // check for printtoconsole, allow -debug\n+    fPrintToConsole = GetBoolArg(\"-printtoconsole\", GetBoolArg(\"-debug\", false));\n+\n+    // select params\n+    SelectParams(ChainNameFromCommandLine());\n+\n+    return true;\n+}\n+\n+int main(int argc, char* argv[])\n+{\n+    SetupEnvironment();\n+    try {\n+        if(!WalletAppInit(argc, argv))\n+        return EXIT_FAILURE;\n+    }\n+    catch (const std::exception& e) {\n+        PrintExceptionContinue(&e, \"WalletAppInit()\");\n+        return EXIT_FAILURE;\n+    } catch (...) {\n+        PrintExceptionContinue(NULL, \"WalletAppInit()\");\n+        return EXIT_FAILURE;\n+    }\n+\n+    while (argc > 1 && IsSwitchChar(argv[1][0])) {\n+        argc--;\n+        argv++;\n+    }\n+    std::vector<std::string> args = std::vector<std::string>(&argv[1], &argv[argc]);\n+    std::string strMethod = args[0];\n+\n+    std::string walletFile = GetArg(\"-file\", DEFAULT_WALLET_DAT);\n+\n+    ECCVerifyHandle globalVerifyHandle;\n+    ECC_Start();\n+    if (!WalletTool::executeWalletToolFunc(strMethod, walletFile))\n+        return EXIT_FAILURE;\n+    ECC_Stop();\n+    return true;\n+}"
      },
      {
        "sha": "f2ed1d5df5caf808cf8523f78a62fededf8b55c3",
        "filename": "src/wallet/crypter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f76ed9ca1e3fdc290698496e0c910f522e822e53/src/wallet/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f76ed9ca1e3fdc290698496e0c910f522e822e53/src/wallet/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.cpp?ref=f76ed9ca1e3fdc290698496e0c910f522e822e53",
        "patch": "@@ -168,7 +168,7 @@ bool CCryptoKeyStore::Lock()\n     return true;\n }\n \n-bool CCryptoKeyStore::Unlock(const CKeyingMaterial& vMasterKeyIn)\n+bool CCryptoKeyStore::Unlock(const CKeyingMaterial& vMasterKeyIn, bool acceptNoKeys)\n {\n     {\n         LOCK(cs_KeyStore);\n@@ -197,7 +197,7 @@ bool CCryptoKeyStore::Unlock(const CKeyingMaterial& vMasterKeyIn)\n             LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n             assert(false);\n         }\n-        if (keyFail || !keyPass)\n+        if (keyFail || (!keyPass && !acceptNoKeys))\n             return false;\n         vMasterKey = vMasterKeyIn;\n         fDecryptionThoroughlyChecked = true;"
      },
      {
        "sha": "6f8c54c63299cd5d153a58fac3818a85a11d8184",
        "filename": "src/wallet/crypter.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f76ed9ca1e3fdc290698496e0c910f522e822e53/src/wallet/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f76ed9ca1e3fdc290698496e0c910f522e822e53/src/wallet/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.h?ref=f76ed9ca1e3fdc290698496e0c910f522e822e53",
        "patch": "@@ -132,7 +132,7 @@ class CCryptoKeyStore : public CBasicKeyStore\n     //! will encrypt previously unencrypted keys\n     bool EncryptKeys(CKeyingMaterial& vMasterKeyIn);\n \n-    bool Unlock(const CKeyingMaterial& vMasterKeyIn);\n+    bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool acceptNoKeys = false);\n \n public:\n     CCryptoKeyStore() : fUseCrypto(false), fDecryptionThoroughlyChecked(false)"
      },
      {
        "sha": "09d73931ec523ac04227cd979b3622a63cfdc0c5",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f76ed9ca1e3fdc290698496e0c910f522e822e53/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f76ed9ca1e3fdc290698496e0c910f522e822e53/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f76ed9ca1e3fdc290698496e0c910f522e822e53",
        "patch": "@@ -290,7 +290,7 @@ bool CWallet::LoadWatchOnly(const CScript &dest)\n     return CCryptoKeyStore::AddWatchOnly(dest);\n }\n \n-bool CWallet::Unlock(const SecureString& strWalletPassphrase)\n+bool CWallet::Unlock(const SecureString& strWalletPassphrase, bool acceptNoKeys)\n {\n     CCrypter crypter;\n     CKeyingMaterial _vMasterKey;\n@@ -303,7 +303,7 @@ bool CWallet::Unlock(const SecureString& strWalletPassphrase)\n                 return false;\n             if (!crypter.Decrypt(pMasterKey.second.vchCryptedKey, _vMasterKey))\n                 continue; // try another master key\n-            if (CCryptoKeyStore::Unlock(_vMasterKey))\n+            if (CCryptoKeyStore::Unlock(_vMasterKey, acceptNoKeys))\n                 return true;\n         }\n     }"
      },
      {
        "sha": "51b4c9debf7ffa35159cc76b8a6078152bea1100",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f76ed9ca1e3fdc290698496e0c910f522e822e53/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f76ed9ca1e3fdc290698496e0c910f522e822e53/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=f76ed9ca1e3fdc290698496e0c910f522e822e53",
        "patch": "@@ -895,7 +895,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     //! Holds a timestamp at which point the wallet is scheduled (externally) to be relocked. Caller must arrange for actual relocking to occur via Lock().\n     int64_t nRelockTime;\n \n-    bool Unlock(const SecureString& strWalletPassphrase);\n+    bool Unlock(const SecureString& strWalletPassphrase, bool acceptNoKeys = false);\n     bool ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase, const SecureString& strNewWalletPassphrase);\n     bool EncryptWallet(const SecureString& strWalletPassphrase);\n "
      },
      {
        "sha": "17fe4438fe07f0a16d0ef6a541e47302f0daf7f5",
        "filename": "src/wallet/wallettools.cpp",
        "status": "added",
        "additions": 157,
        "deletions": 0,
        "changes": 157,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f76ed9ca1e3fdc290698496e0c910f522e822e53/src/wallet/wallettools.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f76ed9ca1e3fdc290698496e0c910f522e822e53/src/wallet/wallettools.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettools.cpp?ref=f76ed9ca1e3fdc290698496e0c910f522e822e53",
        "patch": "@@ -0,0 +1,157 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"base58.h\"\n+#include \"util.h\"\n+#include \"wallet/wallet.h\"\n+\n+#include <boost/filesystem.hpp>\n+\n+namespace WalletTool {\n+\n+static CWallet* CreateWallet(const std::string walletFile)\n+{\n+    boost::filesystem::path filePath(walletFile);\n+    if (boost::filesystem::exists(filePath))\n+    {\n+        fprintf(stderr, \"Error: File exists already\\n\");\n+        return NULL;\n+    }\n+    std::unique_ptr<CWalletDBWrapper> dbw(new CWalletDBWrapper(&bitdb, walletFile));\n+    CWallet *walletInstance = new CWallet(std::move(dbw));\n+    bool fFirstRun = true;\n+    DBErrors nLoadWalletRet = walletInstance->LoadWallet(fFirstRun);\n+    if (nLoadWalletRet != DB_LOAD_OK)\n+    {\n+        fprintf(stderr, \"Error creating %s\", walletFile.c_str());\n+        return NULL;\n+    }\n+\n+    if (GetBoolArg(\"-usehd\", DEFAULT_USE_HD_WALLET) && !walletInstance->IsHDEnabled()) {\n+        walletInstance->SetMinVersion(FEATURE_HD_SPLIT);\n+\n+        // generate a new master key\n+        CPubKey masterPubKey = walletInstance->GenerateNewHDMasterKey();\n+        if (!walletInstance->SetHDMasterKey(masterPubKey))\n+            throw std::runtime_error(std::string(__func__) + \": Storing master key failed\");\n+    }\n+\n+    fprintf(stdout, \"Topping up keypool...\\n\");\n+    walletInstance->TopUpKeyPool();\n+    return walletInstance;\n+}\n+\n+static CWallet* LoadWallet(const std::string walletFile, bool *fFirstRun)\n+{\n+    boost::filesystem::path filePath(walletFile);\n+    if (!boost::filesystem::exists(filePath))\n+    {\n+        fprintf(stderr, \"Error: Wallet files does not exist\\n\");\n+        return NULL;\n+    }\n+\n+    std::unique_ptr<CWalletDBWrapper> dbw(new CWalletDBWrapper(&bitdb, walletFile));\n+    CWallet *walletInstance = new CWallet(std::move(dbw));\n+    DBErrors nLoadWalletRet = walletInstance->LoadWallet(*fFirstRun);\n+    if (nLoadWalletRet != DB_LOAD_OK)\n+    {\n+        walletInstance = NULL;\n+        if (nLoadWalletRet == DB_CORRUPT)\n+        {\n+            fprintf(stderr, \"Error loading %s: Wallet corrupted\", walletFile.c_str());\n+            return NULL;\n+        }\n+        else if (nLoadWalletRet == DB_NONCRITICAL_ERROR)\n+        {\n+            fprintf(stderr, \"Error reading %s! All keys read correctly, but transaction data\"\n+                    \" or address book entries might be missing or incorrect.\",\n+                    walletFile.c_str());\n+        }\n+        else if (nLoadWalletRet == DB_TOO_NEW)\n+        {\n+            fprintf(stderr, \"Error loading %s: Wallet requires newer version of %s\",\n+                    walletFile.c_str(), PACKAGE_NAME);\n+            return NULL;\n+        }\n+        else if (nLoadWalletRet == DB_NEED_REWRITE)\n+        {\n+            fprintf(stderr, \"Wallet needed to be rewritten: restart %s to complete\", PACKAGE_NAME);\n+            return NULL;\n+        }\n+        else\n+        {\n+            fprintf(stderr, \"Error loading %s\", walletFile.c_str());\n+            return NULL;\n+        }\n+    }\n+\n+    return walletInstance;\n+}\n+\n+static void WalletShowInfo(CWallet *walletInstance)\n+{\n+    // lock required because of some AssertLockHeld()\n+    LOCK(walletInstance->cs_wallet);\n+\n+    fprintf(stdout, \"Wallet info\\n===========\\n\");\n+    fprintf(stdout, \"Encrypted: %s\\n\",      walletInstance->IsCrypted() ? \"yes\" : \"no\");\n+    fprintf(stdout, \"HD (hd seed available): %s\\n\",             walletInstance->GetHDChain().masterKeyID.IsNull() ? \"no\" : \"yes\");\n+    fprintf(stdout, \"Keypool Size: %lu\\n\",  (unsigned long)walletInstance->GetKeyPoolSize());\n+    fprintf(stdout, \"Transactions: %lu\\n\",  (unsigned long)walletInstance->mapWallet.size());\n+    fprintf(stdout, \"Address Book: %lu\\n\",  (unsigned long)walletInstance->mapAddressBook.size());\n+}\n+\n+bool executeWalletToolFunc(const std::string& strMethod, const std::string& walletFile)\n+{\n+\n+    if (strMethod == \"create\")\n+    {\n+        CWallet *walletInstance = CreateWallet(walletFile);\n+        if (walletInstance)\n+            WalletShowInfo(walletInstance);\n+    }\n+    else if (strMethod == \"info\")\n+    {\n+        bool fFirstRun;\n+        CWallet *walletInstance = LoadWallet(walletFile, &fFirstRun);\n+        if (!walletInstance)\n+            return false;\n+        WalletShowInfo(walletInstance);\n+    }\n+    else if (strMethod == \"salvage\")\n+    {\n+        // Recover readable keypairs:\n+        std::string strError;\n+        fs::path walletFilePath(walletFile);\n+        if (!CWalletDB::VerifyEnvironment(walletFilePath.filename().string(), walletFilePath.parent_path().string()+\"/\", strError)) {\n+            fprintf(stderr, \"CWalletDB::VerifyEnvironment Error: %s\\n\", strError.c_str());\n+        }\n+\n+        CWallet dummyWallet;\n+        if (!CWalletDB::Recover(walletFilePath.filename().string(), (void *)&dummyWallet, CWalletDB::RecoverKeysOnlyFilter)) {\n+            fprintf(stderr, \"Salvage failed\\n\");\n+            return false;\n+        }\n+        //TODO, set wallets best block to genesis to enforce a rescan\n+        fprintf(stdout, \"Salvage successful. Please rescan your wallet.\");\n+    }\n+    else if (strMethod == \"zaptxes\")\n+    {\n+        std::vector<CWalletTx> vWtx;\n+        std::unique_ptr<CWalletDBWrapper> dbw(new CWalletDBWrapper(&bitdb, walletFile));\n+        CWallet *tempWallet = new CWallet(std::move(dbw));\n+        DBErrors nZapWalletRet = tempWallet->ZapWalletTx(vWtx);\n+        if (nZapWalletRet != DB_LOAD_OK) {\n+            fprintf(stderr, \"Error loading %s: Wallet corrupted\", walletFile.c_str());\n+            return false;\n+        }\n+        fprintf(stdout, \"Zaptxes successful executed. Please rescan your wallet.\");\n+    }\n+    else {\n+        fprintf(stderr, \"Unknown command\\n\");\n+    }\n+\n+    return true;\n+}\n+}"
      },
      {
        "sha": "892ccb91115c1dbc9267e59269a8a168c992ec03",
        "filename": "src/wallet/wallettools.h",
        "status": "added",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f76ed9ca1e3fdc290698496e0c910f522e822e53/src/wallet/wallettools.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f76ed9ca1e3fdc290698496e0c910f522e822e53/src/wallet/wallettools.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettools.h?ref=f76ed9ca1e3fdc290698496e0c910f522e822e53",
        "patch": "@@ -0,0 +1,19 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_WALLETTOOL_H\n+#define BITCOIN_WALLET_WALLETTOOL_H\n+\n+#include \"script/ismine.h\"\n+#include \"wallet/wallet.h\"\n+\n+namespace WalletTool {\n+CWallet* CreateWallet(const std::string walletFile);\n+CWallet* LoadWallet(const std::string walletFile, bool *fFirstRun);\n+void WalletShowInfo(CWallet *walletInstance);\n+bool executeWalletToolFunc(const std::string& strMethod, const std::string& walletFile);\n+}\n+\n+\n+#endif // BITCOIN_WALLET_WALLETTOOL_H"
      }
    ]
  }
]