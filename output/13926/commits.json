[
  {
    "sha": "49d2374acf5845c5f760b5fd241482f292164147",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OWQyMzc0YWNmNTg0NWM1Zjc2MGI1ZmQyNDE0ODJmMjkyMTY0MTQ3",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-09-16T14:45:36Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-01-30T21:26:52Z"
      },
      "message": "[tools] Add wallet inspection and modification tool\n\nThis commit adds wallet-tool, a tool for creating and interacting with\nwallet files. Original implementation was by Jonas Schnelli\n<dev@jonasschnelli.ch> with modifications by John Newbery\n<john@johnnewbery.com>\n\nMSVC files were provided by Chun Kuan Lee <ken2812221@gmail.com>:\n\nbuild: Add MSVC project files for bitcoin-wallet-tool",
      "tree": {
        "sha": "e063f45b28b8dfef299d92b11ed25fdc3ff43b73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e063f45b28b8dfef299d92b11ed25fdc3ff43b73"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/49d2374acf5845c5f760b5fd241482f292164147",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49d2374acf5845c5f760b5fd241482f292164147",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/49d2374acf5845c5f760b5fd241482f292164147",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49d2374acf5845c5f760b5fd241482f292164147/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a5daf70ffb80c14ddf9f35c638d9e8087d8732e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5daf70ffb80c14ddf9f35c638d9e8087d8732e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a5daf70ffb80c14ddf9f35c638d9e8087d8732e9"
      }
    ],
    "stats": {
      "total": 770,
      "additions": 760,
      "deletions": 10
    },
    "files": [
      {
        "sha": "994d67402f083064033fded51078cb317960aea5",
        "filename": ".gitignore",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49d2374acf5845c5f760b5fd241482f292164147/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49d2374acf5845c5f760b5fd241482f292164147/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.gitignore?ref=49d2374acf5845c5f760b5fd241482f292164147",
        "patch": "@@ -5,6 +5,7 @@ src/bitcoin\n src/bitcoind\n src/bitcoin-cli\n src/bitcoin-tx\n+src/bitcoin-wallet\n src/test/test_bitcoin\n src/test/test_bitcoin_fuzzy\n src/qt/test/test_bitcoin-qt"
      },
      {
        "sha": "b618aca817aebce9474398e81e0dcfbc69ec4e6e",
        "filename": "build_msvc/bitcoin-wallet/bitcoin-wallet.vcxproj",
        "status": "added",
        "additions": 195,
        "deletions": 0,
        "changes": 195,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49d2374acf5845c5f760b5fd241482f292164147/build_msvc/bitcoin-wallet/bitcoin-wallet.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49d2374acf5845c5f760b5fd241482f292164147/build_msvc/bitcoin-wallet/bitcoin-wallet.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin-wallet/bitcoin-wallet.vcxproj?ref=49d2374acf5845c5f760b5fd241482f292164147",
        "patch": "@@ -0,0 +1,195 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<Project DefaultTargets=\"Build\" ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n+  <Import Label=\"configInitTarget\" Project=\"..\\common.init.vcxproj\" />\n+  <ItemGroup Label=\"ProjectConfigurations\">\n+    <ProjectConfiguration Include=\"Debug|Win32\">\n+      <Configuration>Debug</Configuration>\n+      <Platform>Win32</Platform>\n+    </ProjectConfiguration>\n+    <ProjectConfiguration Include=\"Release|Win32\">\n+      <Configuration>Release</Configuration>\n+      <Platform>Win32</Platform>\n+    </ProjectConfiguration>\n+    <ProjectConfiguration Include=\"Debug|x64\">\n+      <Configuration>Debug</Configuration>\n+      <Platform>x64</Platform>\n+    </ProjectConfiguration>\n+    <ProjectConfiguration Include=\"Release|x64\">\n+      <Configuration>Release</Configuration>\n+      <Platform>x64</Platform>\n+    </ProjectConfiguration>\n+  </ItemGroup>\n+  <ItemGroup>\n+    <ClCompile Include=\"..\\..\\src\\bitcoin-wallet.cpp\" />\n+  </ItemGroup>\n+  <ItemGroup>\n+    <ProjectReference Include=\"..\\libbitcoinconsensus\\libbitcoinconsensus.vcxproj\">\n+      <Project>{2b384fa8-9ee1-4544-93cb-0d733c25e8ce}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libbitcoin_cli\\libbitcoin_cli.vcxproj\">\n+      <Project>{0667528c-d734-4009-adf9-c0d6c4a5a5a6}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libbitcoin_common\\libbitcoin_common.vcxproj\">\n+      <Project>{7c87e378-df58-482e-aa2f-1bc129bc19ce}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libbitcoin_crypto\\libbitcoin_crypto.vcxproj\">\n+      <Project>{6190199c-6cf4-4dad-bfbd-93fa72a760c1}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libbitcoin_server\\libbitcoin_server.vcxproj\">\n+      <Project>{460fee33-1fe1-483f-b3bf-931ff8e969a5}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libbitcoin_util\\libbitcoin_util.vcxproj\">\n+      <Project>{b53a5535-ee9d-4c6f-9a26-f79ee3bc3754}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libbitcoin_wallet\\libbitcoin_wallet.vcxproj\">\n+      <Project>{93b86837-b543-48a5-a89b-7c87abb77df2}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libbitcoin_zmq\\libbitcoin_zmq.vcxproj\">\n+      <Project>{792d487f-f14c-49fc-a9de-3fc150f31c3f}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libunivalue\\libunivalue.vcxproj\">\n+      <Project>{5724ba7d-a09a-4ba8-800b-c4c1561b3d69}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libbitcoin_wallet_tool\\libbitcoin_wallet_tool.vcxproj\">\n+      <Project>{f91ac55e-6f5e-4c58-9ac5-b40db7deef93}</Project>\n+    </ProjectReference>\n+  </ItemGroup>\n+  <PropertyGroup Label=\"Globals\">\n+    <VCProjectVersion>15.0</VCProjectVersion>\n+    <ProjectGuid>{84DE8790-EDE3-4483-81AC-C32F15E861F4}</ProjectGuid>\n+    <Keyword>Win32Proj</Keyword>\n+    <RootNamespace>bitcointx</RootNamespace>\n+    <VcpkgTriplet Condition=\"'$(Platform)'=='Win32'\">x86-windows-static</VcpkgTriplet>\n+    <VcpkgTriplet Condition=\"'$(Platform)'=='x64'\">x64-windows-static</VcpkgTriplet>\n+  </PropertyGroup>\n+  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.Default.props\" />\n+  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\" Label=\"Configuration\">\n+    <ConfigurationType>Application</ConfigurationType>\n+    <UseDebugLibraries>true</UseDebugLibraries>\n+    <PlatformToolset>v141</PlatformToolset>\n+    <CharacterSet>Unicode</CharacterSet>\n+  </PropertyGroup>\n+  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\" Label=\"Configuration\">\n+    <ConfigurationType>Application</ConfigurationType>\n+    <UseDebugLibraries>false</UseDebugLibraries>\n+    <PlatformToolset>v141</PlatformToolset>\n+    <WholeProgramOptimization>true</WholeProgramOptimization>\n+    <CharacterSet>Unicode</CharacterSet>\n+  </PropertyGroup>\n+  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\" Label=\"Configuration\">\n+    <ConfigurationType>Application</ConfigurationType>\n+    <UseDebugLibraries>true</UseDebugLibraries>\n+    <PlatformToolset>v141</PlatformToolset>\n+    <CharacterSet>Unicode</CharacterSet>\n+  </PropertyGroup>\n+  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\" Label=\"Configuration\">\n+    <ConfigurationType>Application</ConfigurationType>\n+    <UseDebugLibraries>false</UseDebugLibraries>\n+    <PlatformToolset>v141</PlatformToolset>\n+    <WholeProgramOptimization>true</WholeProgramOptimization>\n+    <CharacterSet>Unicode</CharacterSet>\n+  </PropertyGroup>\n+  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n+  <ImportGroup Label=\"ExtensionSettings\">\n+  </ImportGroup>\n+  <ImportGroup Label=\"Shared\">\n+  </ImportGroup>\n+  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n+    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n+  </ImportGroup>\n+  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n+    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n+  </ImportGroup>\n+  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n+    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n+  </ImportGroup>\n+  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n+    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n+  </ImportGroup>\n+  <PropertyGroup Label=\"UserMacros\" />\n+  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n+    <LinkIncremental>false</LinkIncremental>\n+  </PropertyGroup>\n+  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n+    <LinkIncremental>true</LinkIncremental>\n+  </PropertyGroup>\n+  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n+    <LinkIncremental>true</LinkIncremental>\n+  </PropertyGroup>\n+  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n+    <LinkIncremental>false</LinkIncremental>\n+  </PropertyGroup>\n+  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n+    <ClCompile>\n+      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n+      <WarningLevel>Level3</WarningLevel>\n+      <Optimization>MaxSpeed</Optimization>\n+      <FunctionLevelLinking>true</FunctionLevelLinking>\n+      <IntrinsicFunctions>true</IntrinsicFunctions>\n+      <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <SDLCheck>true</SDLCheck>\n+      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n+      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n+    </ClCompile>\n+    <Link>\n+      <SubSystem>Console</SubSystem>\n+      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n+      <OptimizeReferences>true</OptimizeReferences>\n+      <GenerateDebugInformation>true</GenerateDebugInformation>\n+      <AdditionalDependencies>crypt32.lib;Iphlpapi.lib;ws2_32.lib;Shlwapi.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;%(AdditionalDependencies)</AdditionalDependencies>\n+    </Link>\n+  </ItemDefinitionGroup>\n+  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n+    <ClCompile>\n+      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n+      <WarningLevel>Level3</WarningLevel>\n+      <Optimization>Disabled</Optimization>\n+      <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <SDLCheck>true</SDLCheck>\n+      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n+      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n+    </ClCompile>\n+    <Link>\n+      <SubSystem>Console</SubSystem>\n+      <GenerateDebugInformation>true</GenerateDebugInformation>\n+      <AdditionalDependencies>crypt32.lib;Iphlpapi.lib;ws2_32.lib;Shlwapi.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;%(AdditionalDependencies)</AdditionalDependencies>\n+    </Link>\n+  </ItemDefinitionGroup>\n+  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n+    <ClCompile>\n+      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n+      <WarningLevel>Level3</WarningLevel>\n+      <Optimization>Disabled</Optimization>\n+      <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <SDLCheck>true</SDLCheck>\n+      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n+      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n+    </ClCompile>\n+    <Link>\n+      <SubSystem>Console</SubSystem>\n+      <GenerateDebugInformation>true</GenerateDebugInformation>\n+      <AdditionalDependencies>crypt32.lib;Iphlpapi.lib;ws2_32.lib;Shlwapi.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;%(AdditionalDependencies)</AdditionalDependencies>\n+    </Link>\n+  </ItemDefinitionGroup>\n+  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n+    <ClCompile>\n+      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n+      <WarningLevel>Level3</WarningLevel>\n+      <Optimization>MaxSpeed</Optimization>\n+      <FunctionLevelLinking>true</FunctionLevelLinking>\n+      <IntrinsicFunctions>true</IntrinsicFunctions>\n+      <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <SDLCheck>true</SDLCheck>\n+      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n+      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n+    </ClCompile>\n+    <Link>\n+      <SubSystem>Console</SubSystem>\n+      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n+      <OptimizeReferences>true</OptimizeReferences>\n+      <GenerateDebugInformation>true</GenerateDebugInformation>\n+      <AdditionalDependencies>crypt32.lib;Iphlpapi.lib;ws2_32.lib;Shlwapi.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;%(AdditionalDependencies)</AdditionalDependencies>\n+    </Link>\n+  </ItemDefinitionGroup>\n+  <Import Label=\"configTarget\" Project=\"..\\common.vcxproj\" />\n+</Project>"
      },
      {
        "sha": "b84a525afa77b00459adbd87a81d20bdfbb1464b",
        "filename": "build_msvc/bitcoin.sln",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49d2374acf5845c5f760b5fd241482f292164147/build_msvc/bitcoin.sln",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49d2374acf5845c5f760b5fd241482f292164147/build_msvc/bitcoin.sln",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin.sln?ref=49d2374acf5845c5f760b5fd241482f292164147",
        "patch": "@@ -32,6 +32,10 @@ Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"bench_bitcoin\", \"bench_bitc\n EndProject\n Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"bitcoin-tx\", \"bitcoin-tx\\bitcoin-tx.vcxproj\", \"{D3022AF6-AD33-4CE3-B358-87CB6A1B29CF}\"\n EndProject\n+Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"bitcoin-wallet\", \"bitcoin-wallet\\bitcoin-wallet.vcxproj\", \"{84DE8790-EDE3-4483-81AC-C32F15E861F4}\"\n+EndProject\n+Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"libbitcoin_wallet_tool\", \"libbitcoin_wallet_tool\\libbitcoin_wallet_tool.vcxproj\", \"{F91AC55E-6F5E-4C58-9AC5-B40DB7DEEF93}\"\n+EndProject\n Global\n     GlobalSection(SolutionConfigurationPlatforms) = preSolution\n         Debug|x64 = Debug|x64\n@@ -160,6 +164,22 @@ Global\n         {D3022AF6-AD33-4CE3-B358-87CB6A1B29CF}.Release|x64.Build.0 = Release|x64\n         {D3022AF6-AD33-4CE3-B358-87CB6A1B29CF}.Release|x86.ActiveCfg = Release|Win32\n         {D3022AF6-AD33-4CE3-B358-87CB6A1B29CF}.Release|x86.Build.0 = Release|Win32\n+        {84DE8790-EDE3-4483-81AC-C32F15E861F4}.Debug|x64.ActiveCfg = Debug|x64\n+        {84DE8790-EDE3-4483-81AC-C32F15E861F4}.Debug|x64.Build.0 = Debug|x64\n+        {84DE8790-EDE3-4483-81AC-C32F15E861F4}.Debug|x86.ActiveCfg = Debug|Win32\n+        {84DE8790-EDE3-4483-81AC-C32F15E861F4}.Debug|x86.Build.0 = Debug|Win32\n+        {84DE8790-EDE3-4483-81AC-C32F15E861F4}.Release|x64.ActiveCfg = Release|x64\n+        {84DE8790-EDE3-4483-81AC-C32F15E861F4}.Release|x64.Build.0 = Release|x64\n+        {84DE8790-EDE3-4483-81AC-C32F15E861F4}.Release|x86.ActiveCfg = Release|Win32\n+        {84DE8790-EDE3-4483-81AC-C32F15E861F4}.Release|x86.Build.0 = Release|Win32\n+        {F91AC55E-6F5E-4C58-9AC5-B40DB7DEEF93}.Debug|x64.ActiveCfg = Debug|x64\n+        {F91AC55E-6F5E-4C58-9AC5-B40DB7DEEF93}.Debug|x64.Build.0 = Debug|x64\n+        {F91AC55E-6F5E-4C58-9AC5-B40DB7DEEF93}.Debug|x86.ActiveCfg = Debug|Win32\n+        {F91AC55E-6F5E-4C58-9AC5-B40DB7DEEF93}.Debug|x86.Build.0 = Debug|Win32\n+        {F91AC55E-6F5E-4C58-9AC5-B40DB7DEEF93}.Release|x64.ActiveCfg = Release|x64\n+        {F91AC55E-6F5E-4C58-9AC5-B40DB7DEEF93}.Release|x64.Build.0 = Release|x64\n+        {F91AC55E-6F5E-4C58-9AC5-B40DB7DEEF93}.Release|x86.ActiveCfg = Release|Win32\n+        {F91AC55E-6F5E-4C58-9AC5-B40DB7DEEF93}.Release|x86.Build.0 = Release|Win32\n     EndGlobalSection\n     GlobalSection(SolutionProperties) = preSolution\n         HideSolutionNode = FALSE"
      },
      {
        "sha": "b9cf68aee08d23a5ac8d58b9f660523ff948db18",
        "filename": "build_msvc/libbitcoin_wallet_tool/libbitcoin_wallet_tool.vcxproj.in",
        "status": "added",
        "additions": 166,
        "deletions": 0,
        "changes": 166,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49d2374acf5845c5f760b5fd241482f292164147/build_msvc/libbitcoin_wallet_tool/libbitcoin_wallet_tool.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49d2374acf5845c5f760b5fd241482f292164147/build_msvc/libbitcoin_wallet_tool/libbitcoin_wallet_tool.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_wallet_tool/libbitcoin_wallet_tool.vcxproj.in?ref=49d2374acf5845c5f760b5fd241482f292164147",
        "patch": "@@ -0,0 +1,166 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<Project DefaultTargets=\"Build\" ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n+  <Import Label=\"configInitTarget\" Project=\"..\\common.init.vcxproj\" />\n+  <ItemGroup Label=\"ProjectConfigurations\">\n+    <ProjectConfiguration Include=\"Debug|Win32\">\n+      <Configuration>Debug</Configuration>\n+      <Platform>Win32</Platform>\n+    </ProjectConfiguration>\n+    <ProjectConfiguration Include=\"Release|Win32\">\n+      <Configuration>Release</Configuration>\n+      <Platform>Win32</Platform>\n+    </ProjectConfiguration>\n+    <ProjectConfiguration Include=\"Debug|x64\">\n+      <Configuration>Debug</Configuration>\n+      <Platform>x64</Platform>\n+    </ProjectConfiguration>\n+    <ProjectConfiguration Include=\"Release|x64\">\n+      <Configuration>Release</Configuration>\n+      <Platform>x64</Platform>\n+    </ProjectConfiguration>\n+  </ItemGroup>\n+  <ItemGroup>\n+@SOURCE_FILES@\n+  </ItemGroup>\n+  <ItemGroup>\n+    <None Include=\"packages.config\" />\n+  </ItemGroup>\n+  <PropertyGroup Label=\"Globals\">\n+    <VCProjectVersion>15.0</VCProjectVersion>\n+    <ProjectGuid>{F91AC55E-6F5E-4C58-9AC5-B40DB7DEEF93}</ProjectGuid>\n+    <Keyword>Win32Proj</Keyword>\n+    <RootNamespace>libbitcoin_zmq</RootNamespace>\n+    <VcpkgTriplet Condition=\"'$(Platform)'=='Win32'\">x86-windows-static</VcpkgTriplet>\n+    <VcpkgTriplet Condition=\"'$(Platform)'=='x64'\">x64-windows-static</VcpkgTriplet>\n+  </PropertyGroup>\n+  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.Default.props\" />\n+  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\" Label=\"Configuration\">\n+    <ConfigurationType>StaticLibrary</ConfigurationType>\n+    <UseDebugLibraries>true</UseDebugLibraries>\n+    <PlatformToolset>v141</PlatformToolset>\n+    <CharacterSet>Unicode</CharacterSet>\n+  </PropertyGroup>\n+  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\" Label=\"Configuration\">\n+    <ConfigurationType>StaticLibrary</ConfigurationType>\n+    <UseDebugLibraries>false</UseDebugLibraries>\n+    <PlatformToolset>v141</PlatformToolset>\n+    <WholeProgramOptimization>true</WholeProgramOptimization>\n+    <CharacterSet>Unicode</CharacterSet>\n+  </PropertyGroup>\n+  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\" Label=\"Configuration\">\n+    <ConfigurationType>StaticLibrary</ConfigurationType>\n+    <UseDebugLibraries>true</UseDebugLibraries>\n+    <PlatformToolset>v141</PlatformToolset>\n+    <CharacterSet>Unicode</CharacterSet>\n+  </PropertyGroup>\n+  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\" Label=\"Configuration\">\n+    <ConfigurationType>StaticLibrary</ConfigurationType>\n+    <UseDebugLibraries>false</UseDebugLibraries>\n+    <PlatformToolset>v141</PlatformToolset>\n+    <WholeProgramOptimization>true</WholeProgramOptimization>\n+    <CharacterSet>Unicode</CharacterSet>\n+  </PropertyGroup>\n+  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n+  <ImportGroup Label=\"ExtensionSettings\">\n+  </ImportGroup>\n+  <ImportGroup Label=\"Shared\">\n+  </ImportGroup>\n+  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n+    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n+  </ImportGroup>\n+  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n+    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n+  </ImportGroup>\n+  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n+    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n+  </ImportGroup>\n+  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n+    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n+  </ImportGroup>\n+  <PropertyGroup Label=\"UserMacros\" />\n+  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n+    <LinkIncremental>true</LinkIncremental>\n+  </PropertyGroup>\n+  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n+    <LinkIncremental>true</LinkIncremental>\n+  </PropertyGroup>\n+  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n+    <LinkIncremental>false</LinkIncremental>\n+  </PropertyGroup>\n+  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n+    <LinkIncremental>false</LinkIncremental>\n+  </PropertyGroup>\n+  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n+    <ClCompile>\n+      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n+      <WarningLevel>Level3</WarningLevel>\n+      <Optimization>Disabled</Optimization>\n+      <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <SDLCheck>true</SDLCheck>\n+      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n+      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n+      <SuppressStartupBanner>false</SuppressStartupBanner>\n+    </ClCompile>\n+    <Link>\n+      <SubSystem>Console</SubSystem>\n+      <GenerateDebugInformation>true</GenerateDebugInformation>\n+    </Link>\n+  </ItemDefinitionGroup>\n+  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n+    <ClCompile>\n+      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n+      <WarningLevel>Level3</WarningLevel>\n+      <Optimization>Disabled</Optimization>\n+      <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <SDLCheck>true</SDLCheck>\n+      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n+      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n+      <SuppressStartupBanner>false</SuppressStartupBanner>\n+    </ClCompile>\n+    <Link>\n+      <SubSystem>Console</SubSystem>\n+      <GenerateDebugInformation>true</GenerateDebugInformation>\n+    </Link>\n+  </ItemDefinitionGroup>\n+  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n+    <ClCompile>\n+      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n+      <WarningLevel>Level3</WarningLevel>\n+      <Optimization>MaxSpeed</Optimization>\n+      <FunctionLevelLinking>true</FunctionLevelLinking>\n+      <IntrinsicFunctions>true</IntrinsicFunctions>\n+      <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <SDLCheck>true</SDLCheck>\n+      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n+      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n+      <SuppressStartupBanner>false</SuppressStartupBanner>\n+    </ClCompile>\n+    <Link>\n+      <SubSystem>Console</SubSystem>\n+      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n+      <OptimizeReferences>true</OptimizeReferences>\n+      <GenerateDebugInformation>true</GenerateDebugInformation>\n+    </Link>\n+  </ItemDefinitionGroup>\n+  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n+    <ClCompile>\n+      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n+      <WarningLevel>Level3</WarningLevel>\n+      <Optimization>MaxSpeed</Optimization>\n+      <FunctionLevelLinking>true</FunctionLevelLinking>\n+      <IntrinsicFunctions>true</IntrinsicFunctions>\n+      <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <SDLCheck>true</SDLCheck>\n+      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n+      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n+      <SuppressStartupBanner>false</SuppressStartupBanner>\n+    </ClCompile>\n+    <Link>\n+      <SubSystem>Console</SubSystem>\n+      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n+      <OptimizeReferences>true</OptimizeReferences>\n+      <GenerateDebugInformation>true</GenerateDebugInformation>\n+    </Link>\n+  </ItemDefinitionGroup>\n+  <Import Label=\"configTarget\" Project=\"..\\common.vcxproj\" />\n+</Project>"
      },
      {
        "sha": "c8df29eecb713d91fe94c360398d143193db2b84",
        "filename": "build_msvc/msvc-autogen.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49d2374acf5845c5f760b5fd241482f292164147/build_msvc/msvc-autogen.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49d2374acf5845c5f760b5fd241482f292164147/build_msvc/msvc-autogen.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/msvc-autogen.py?ref=49d2374acf5845c5f760b5fd241482f292164147",
        "patch": "@@ -11,6 +11,7 @@\n     'libbitcoin_crypto',\n     'libbitcoin_server',\n     'libbitcoin_util',\n+    'libbitcoin_wallet_tool',\n     'libbitcoin_wallet',\n     'libbitcoin_zmq',\n ]"
      },
      {
        "sha": "190288f5f8d054213027f146ee66a18fbf7dd7be",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 16,
        "deletions": 4,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49d2374acf5845c5f760b5fd241482f292164147/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49d2374acf5845c5f760b5fd241482f292164147/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=49d2374acf5845c5f760b5fd241482f292164147",
        "patch": "@@ -19,6 +19,7 @@ BITCOIN_DAEMON_NAME=bitcoind\n BITCOIN_GUI_NAME=bitcoin-qt\n BITCOIN_CLI_NAME=bitcoin-cli\n BITCOIN_TX_NAME=bitcoin-tx\n+BITCOIN_WALLET_TOOL_NAME=bitcoin-wallet\n \n dnl Unless the user specified ARFLAGS, force it to be cr\n AC_ARG_VAR(ARFLAGS, [Flags for the archiver, defaults to <cr> if not set])\n@@ -415,7 +416,7 @@ CPPFLAGS=\"$CPPFLAGS -DHAVE_BUILD_INFO -D__STDC_FORMAT_MACROS\"\n \n AC_ARG_WITH([utils],\n   [AS_HELP_STRING([--with-utils],\n-  [build bitcoin-cli bitcoin-tx (default=yes)])],\n+  [build bitcoin-cli bitcoin-tx bitcoin-wallet (default=yes)])],\n   [build_bitcoin_utils=$withval],\n   [build_bitcoin_utils=yes])\n \n@@ -431,6 +432,12 @@ AC_ARG_ENABLE([util-tx],\n   [build_bitcoin_tx=$enableval],\n   [build_bitcoin_tx=$build_bitcoin_utils])\n \n+AC_ARG_ENABLE([util-wallet],\n+  [AS_HELP_STRING([--enable-util-wallet],\n+  [build bitcoin-wallet])],\n+  [build_bitcoin_wallet=$enableval],\n+  [build_bitcoin_wallet=$build_bitcoin_utils])\n+\n AC_ARG_WITH([libs],\n   [AS_HELP_STRING([--with-libs],\n   [build libraries (default=yes)])],\n@@ -911,7 +918,7 @@ BITCOIN_QT_INIT\n dnl sets $bitcoin_enable_qt, $bitcoin_enable_qt_test, $bitcoin_enable_qt_dbus\n BITCOIN_QT_CONFIGURE([$use_pkgconfig])\n \n-if test x$build_bitcoin_cli$build_bitcoin_tx$build_bitcoind$bitcoin_enable_qt$use_tests$use_bench = xnononononono; then\n+if test x$build_bitcoin_wallet$build_bitcoin_cli$build_bitcoin_tx$build_bitcoind$bitcoin_enable_qt$use_tests$use_bench = xnonononononono; then\n     use_boost=no\n else\n     use_boost=yes\n@@ -1193,7 +1200,7 @@ dnl univalue check\n \n need_bundled_univalue=yes\n \n-if test x$build_bitcoin_cli$build_bitcoin_tx$build_bitcoind$bitcoin_enable_qt$use_tests$use_bench = xnononononono; then\n+if test x$build_bitcoin_wallet$build_bitcoin_cli$build_bitcoin_tx$build_bitcoind$bitcoin_enable_qt$use_tests$use_bench = xnonononononono; then\n   need_bundled_univalue=no\n else\n \n@@ -1255,6 +1262,10 @@ AC_MSG_CHECKING([whether to build bitcoin-tx])\n AM_CONDITIONAL([BUILD_BITCOIN_TX], [test x$build_bitcoin_tx = xyes])\n AC_MSG_RESULT($build_bitcoin_tx)\n \n+AC_MSG_CHECKING([whether to build bitcoin-wallet])\n+AM_CONDITIONAL([BUILD_BITCOIN_WALLET], [test x$build_bitcoin_wallet = xyes])\n+AC_MSG_RESULT($build_bitcoin_wallet)\n+\n AC_MSG_CHECKING([whether to build libraries])\n AM_CONDITIONAL([BUILD_BITCOIN_LIBS], [test x$build_bitcoin_libs = xyes])\n if test x$build_bitcoin_libs = xyes; then\n@@ -1396,7 +1407,7 @@ else\n   AC_MSG_RESULT([no])\n fi\n \n-if test x$build_bitcoin_cli$build_bitcoin_tx$build_bitcoin_libs$build_bitcoind$bitcoin_enable_qt$use_bench$use_tests = xnonononononono; then\n+if test x$build_bitcoin_wallet$build_bitcoin_cli$build_bitcoin_tx$build_bitcoin_libs$build_bitcoind$bitcoin_enable_qt$use_bench$use_tests = xnononononononono; then\n   AC_MSG_ERROR([No targets! Please specify at least one of: --with-utils --with-libs --with-daemon --with-gui --enable-bench or --enable-tests])\n fi\n \n@@ -1442,6 +1453,7 @@ AC_SUBST(BITCOIN_DAEMON_NAME)\n AC_SUBST(BITCOIN_GUI_NAME)\n AC_SUBST(BITCOIN_CLI_NAME)\n AC_SUBST(BITCOIN_TX_NAME)\n+AC_SUBST(BITCOIN_WALLET_TOOL_NAME)\n \n AC_SUBST(RELDFLAGS)\n AC_SUBST(DEBUG_CPPFLAGS)"
      },
      {
        "sha": "b710bf7f683d2d3ddad6538c6d58ab077bf19f62",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 40,
        "deletions": 0,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49d2374acf5845c5f760b5fd241482f292164147/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49d2374acf5845c5f760b5fd241482f292164147/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=49d2374acf5845c5f760b5fd241482f292164147",
        "patch": "@@ -41,6 +41,7 @@ LIBBITCOINCONSENSUS=libbitcoinconsensus.la\n endif\n if ENABLE_WALLET\n LIBBITCOIN_WALLET=libbitcoin_wallet.a\n+LIBBITCOIN_WALLET_TOOL=libbitcoin_wallet_tool.a\n endif\n \n LIBBITCOIN_CRYPTO= $(LIBBITCOIN_CRYPTO_BASE)\n@@ -70,6 +71,7 @@ EXTRA_LIBRARIES += \\\n   $(LIBBITCOIN_SERVER) \\\n   $(LIBBITCOIN_CLI) \\\n   $(LIBBITCOIN_WALLET) \\\n+  $(LIBBITCOIN_WALLET_TOOL) \\\n   $(LIBBITCOIN_ZMQ)\n \n lib_LTLIBRARIES = $(LIBBITCOINCONSENSUS)\n@@ -89,6 +91,11 @@ endif\n if BUILD_BITCOIN_TX\n   bin_PROGRAMS += bitcoin-tx\n endif\n+if ENABLE_WALLET\n+if BUILD_BITCOIN_WALLET\n+  bin_PROGRAMS += bitcoin-wallet\n+endif\n+endif\n \n .PHONY: FORCE check-symbols check-security\n # bitcoin core #\n@@ -203,6 +210,7 @@ BITCOIN_CORE_H = \\\n   wallet/rpcwallet.h \\\n   wallet/wallet.h \\\n   wallet/walletdb.h \\\n+  wallet/wallettool.h \\\n   wallet/walletutil.h \\\n   wallet/coinselection.h \\\n   warnings.h \\\n@@ -305,6 +313,12 @@ libbitcoin_wallet_a_SOURCES = \\\n   wallet/coinselection.cpp \\\n   $(BITCOIN_CORE_H)\n \n+libbitcoin_wallet_tool_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+libbitcoin_wallet_tool_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+libbitcoin_wallet_tool_a_SOURCES = \\\n+  wallet/wallettool.cpp \\\n+  $(BITCOIN_CORE_H)\n+\n # crypto primitives library\n crypto_libbitcoin_crypto_base_a_CPPFLAGS = $(AM_CPPFLAGS)\n crypto_libbitcoin_crypto_base_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n@@ -522,6 +536,32 @@ bitcoin_tx_LDADD = \\\n bitcoin_tx_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n #\n \n+# bitcoin-wallet binary #\n+bitcoin_wallet_SOURCES = bitcoin-wallet.cpp\n+bitcoin_wallet_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+bitcoin_wallet_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+bitcoin_wallet_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+\n+if TARGET_WINDOWS\n+bitcoin_wallet_SOURCES += bitcoin-wallet-res.rc\n+endif\n+\n+bitcoin_wallet_LDADD = \\\n+  $(LIBBITCOIN_WALLET_TOOL) \\\n+  $(LIBBITCOIN_WALLET) \\\n+  $(LIBBITCOIN_SERVER) \\\n+  $(LIBBITCOIN_COMMON) \\\n+  $(LIBBITCOIN_CONSENSUS) \\\n+  $(LIBBITCOIN_UTIL) \\\n+  $(LIBBITCOIN_CRYPTO) \\\n+  $(LIBLEVELDB) \\\n+  $(LIBLEVELDB_SSE42) \\\n+  $(LIBMEMENV) \\\n+  $(LIBSECP256K1)\n+\n+bitcoin_wallet_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS)\n+#\n+\n # bitcoinconsensus library #\n if BUILD_BITCOIN_LIBS\n include_HEADERS = script/bitcoinconsensus.h"
      },
      {
        "sha": "e9fa2dbb40d89dd106c1e78f72286ab7bc7ebc73",
        "filename": "src/bitcoin-wallet-res.rc",
        "status": "added",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49d2374acf5845c5f760b5fd241482f292164147/src/bitcoin-wallet-res.rc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49d2374acf5845c5f760b5fd241482f292164147/src/bitcoin-wallet-res.rc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet-res.rc?ref=49d2374acf5845c5f760b5fd241482f292164147",
        "patch": "@@ -0,0 +1,35 @@\n+#include <windows.h>             // needed for VERSIONINFO\n+#include \"clientversion.h\"       // holds the needed client version information\n+\n+#define VER_PRODUCTVERSION     CLIENT_VERSION_MAJOR,CLIENT_VERSION_MINOR,CLIENT_VERSION_REVISION,CLIENT_VERSION_BUILD\n+#define VER_PRODUCTVERSION_STR STRINGIZE(CLIENT_VERSION_MAJOR) \".\" STRINGIZE(CLIENT_VERSION_MINOR) \".\" STRINGIZE(CLIENT_VERSION_REVISION) \".\" STRINGIZE(CLIENT_VERSION_BUILD)\n+#define VER_FILEVERSION        VER_PRODUCTVERSION\n+#define VER_FILEVERSION_STR    VER_PRODUCTVERSION_STR\n+\n+VS_VERSION_INFO VERSIONINFO\n+FILEVERSION     VER_FILEVERSION\n+PRODUCTVERSION  VER_PRODUCTVERSION\n+FILEOS          VOS_NT_WINDOWS32\n+FILETYPE        VFT_APP\n+BEGIN\n+    BLOCK \"StringFileInfo\"\n+    BEGIN\n+        BLOCK \"040904E4\" // U.S. English - multilingual (hex)\n+        BEGIN\n+            VALUE \"CompanyName\",        \"Bitcoin\"\n+            VALUE \"FileDescription\",    \"bitcoin-wallet (CLI tool for \" PACKAGE_NAME \" wallets)\"\n+            VALUE \"FileVersion\",        VER_FILEVERSION_STR\n+            VALUE \"InternalName\",       \"bitcoin-wallet\"\n+            VALUE \"LegalCopyright\",     COPYRIGHT_STR\n+            VALUE \"LegalTrademarks1\",   \"Distributed under the MIT software license, see the accompanying file COPYING or http://www.opensource.org/licenses/mit-license.php.\"\n+            VALUE \"OriginalFilename\",   \"bitcoin-wallet.exe\"\n+            VALUE \"ProductName\",        \"bitcoin-wallet\"\n+            VALUE \"ProductVersion\",     VER_PRODUCTVERSION_STR\n+        END\n+    END\n+\n+    BLOCK \"VarFileInfo\"\n+    BEGIN\n+        VALUE \"Translation\", 0x0, 1252 // language neutral - multilingual (decimal)\n+    END\n+END"
      },
      {
        "sha": "293e3efa5c120e8b944ad3f57a9f940cc3b6bed2",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "added",
        "additions": 121,
        "deletions": 0,
        "changes": 121,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49d2374acf5845c5f760b5fd241482f292164147/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49d2374acf5845c5f760b5fd241482f292164147/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=49d2374acf5845c5f760b5fd241482f292164147",
        "patch": "@@ -0,0 +1,121 @@\n+// Copyright (c) 2016-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <util/system.h>\n+#include <util/strencodings.h>\n+#include <wallet/wallettool.h>\n+\n+#include <stdio.h>\n+\n+const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static void SetupWalletToolArgs()\n+{\n+    SetupChainParamsBaseOptions();\n+\n+    gArgs.AddArg(\"-?\", \"This help message\", false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-datadir=<dir>\", \"Specify data directory\", false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-wallet=<wallet-name>\", \"Specify wallet name\", false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-debug=<category>\", \"Output debugging information (default: 0).\", false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -debug is true, 0 otherwise.\", false, OptionsCategory::DEBUG_TEST);\n+\n+    gArgs.AddArg(\"info\", \"Get wallet info\", false, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"create\", \"Create new wallet file\", false, OptionsCategory::COMMANDS);\n+\n+    // Hidden\n+    gArgs.AddArg(\"-h\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-help\", \"\", false, OptionsCategory::HIDDEN);\n+}\n+\n+static bool WalletAppInit(int argc, char* argv[])\n+{\n+    SetupWalletToolArgs();\n+    std::string error_message;\n+    if (!gArgs.ParseParameters(argc, argv, error_message)) {\n+        fprintf(stderr, \"Error parsing command line arguments: %s\\n\", error_message.c_str());\n+        return false;\n+    }\n+    if (argc < 2 || HelpRequested(gArgs)) {\n+        std::string usage = strprintf(\"%s bitcoin-wallet version\", PACKAGE_NAME) + \" \" + FormatFullVersion() + \"\\n\\n\" +\n+                                      \"wallet-tool is an offline tool for creating and interacting with Bitcoin Core wallet files.\\n\" +\n+                                      \"By default wallet-tool will act on wallets in the default mainnet wallet directory in the datadir.\\n\" +\n+                                      \"To change the target wallet, use the -datadir, -wallet and -testnet/-regtest arguments.\\n\\n\" +\n+                                      \"Usage:\\n\" +\n+                                     \"  bitcoin-wallet [options] <command>\\n\\n\" +\n+                                     gArgs.GetHelpMessage();\n+\n+        fprintf(stdout, \"%s\", usage.c_str());\n+        return false;\n+    }\n+\n+    // check for printtoconsole, allow -debug\n+    g_logger->m_print_to_console = gArgs.GetBoolArg(\"-printtoconsole\", gArgs.GetBoolArg(\"-debug\", false));\n+\n+    if (!fs::is_directory(GetDataDir(false))) {\n+        fprintf(stderr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-datadir\", \"\").c_str());\n+        return false;\n+    }\n+    // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n+    SelectParams(gArgs.GetChainName());\n+\n+    return true;\n+}\n+\n+int main(int argc, char* argv[])\n+{\n+#ifdef WIN32\n+    util::WinCmdLineArgs winArgs;\n+    std::tie(argc, argv) = winArgs.get();\n+#endif\n+    SetupEnvironment();\n+    RandomInit();\n+    try {\n+        if (!WalletAppInit(argc, argv)) return EXIT_FAILURE;\n+    } catch (const std::exception& e) {\n+        PrintExceptionContinue(&e, \"WalletAppInit()\");\n+        return EXIT_FAILURE;\n+    } catch (...) {\n+        PrintExceptionContinue(nullptr, \"WalletAppInit()\");\n+        return EXIT_FAILURE;\n+    }\n+\n+    std::string method {};\n+    for(int i = 1; i < argc; ++i) {\n+        if (!IsSwitchChar(argv[i][0])) {\n+            if (!method.empty()) {\n+                fprintf(stderr, \"Error: two methods provided (%s and %s). Only one method should be provided.\\n\", method.c_str(), argv[i]);\n+                return EXIT_FAILURE;\n+            }\n+            method = argv[i];\n+        }\n+    }\n+\n+    if (method.empty()) {\n+        fprintf(stderr, \"No method provided. Run `bitcoin-wallet -help` for valid methods.\\n\");\n+        return EXIT_FAILURE;\n+    }\n+\n+    // A name must be provided when creating a file\n+    if (method == \"create\" && !gArgs.IsArgSet(\"-wallet\")) {\n+        fprintf(stderr, \"Wallet name must be provided when creating a new wallet.\\n\");\n+        return EXIT_FAILURE;\n+    }\n+\n+    std::string name = gArgs.GetArg(\"-wallet\", \"\");\n+\n+    ECCVerifyHandle globalVerifyHandle;\n+    ECC_Start();\n+    if (!WalletTool::ExecuteWalletToolFunc(method, name))\n+        return EXIT_FAILURE;\n+    ECC_Stop();\n+    return EXIT_SUCCESS;\n+}"
      },
      {
        "sha": "1dc78255f67b230af59b047ed4d848918fd5610c",
        "filename": "src/wallet/crypter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49d2374acf5845c5f760b5fd241482f292164147/src/wallet/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49d2374acf5845c5f760b5fd241482f292164147/src/wallet/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.cpp?ref=49d2374acf5845c5f760b5fd241482f292164147",
        "patch": "@@ -175,7 +175,7 @@ bool CCryptoKeyStore::Lock()\n     return true;\n }\n \n-bool CCryptoKeyStore::Unlock(const CKeyingMaterial& vMasterKeyIn)\n+bool CCryptoKeyStore::Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys)\n {\n     {\n         LOCK(cs_KeyStore);\n@@ -204,7 +204,7 @@ bool CCryptoKeyStore::Unlock(const CKeyingMaterial& vMasterKeyIn)\n             LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n             throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n         }\n-        if (keyFail || !keyPass)\n+        if (keyFail || (!keyPass && !accept_no_keys))\n             return false;\n         vMasterKey = vMasterKeyIn;\n         fDecryptionThoroughlyChecked = true;"
      },
      {
        "sha": "8e195ca8fa07d1bdecf9460849dc1f17a6cf6465",
        "filename": "src/wallet/crypter.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49d2374acf5845c5f760b5fd241482f292164147/src/wallet/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49d2374acf5845c5f760b5fd241482f292164147/src/wallet/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.h?ref=49d2374acf5845c5f760b5fd241482f292164147",
        "patch": "@@ -133,7 +133,7 @@ class CCryptoKeyStore : public CBasicKeyStore\n     //! will encrypt previously unencrypted keys\n     bool EncryptKeys(CKeyingMaterial& vMasterKeyIn);\n \n-    bool Unlock(const CKeyingMaterial& vMasterKeyIn);\n+    bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false);\n     CryptedKeyMap mapCryptedKeys GUARDED_BY(cs_KeyStore);\n \n public:"
      },
      {
        "sha": "154ae2d51f2f01c58e3b9e6051a0631b0c99ab85",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49d2374acf5845c5f760b5fd241482f292164147/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49d2374acf5845c5f760b5fd241482f292164147/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=49d2374acf5845c5f760b5fd241482f292164147",
        "patch": "@@ -398,7 +398,7 @@ bool CWallet::LoadWatchOnly(const CScript &dest)\n     return CCryptoKeyStore::AddWatchOnly(dest);\n }\n \n-bool CWallet::Unlock(const SecureString& strWalletPassphrase)\n+bool CWallet::Unlock(const SecureString& strWalletPassphrase, bool accept_no_keys)\n {\n     CCrypter crypter;\n     CKeyingMaterial _vMasterKey;\n@@ -411,7 +411,7 @@ bool CWallet::Unlock(const SecureString& strWalletPassphrase)\n                 return false;\n             if (!crypter.Decrypt(pMasterKey.second.vchCryptedKey, _vMasterKey))\n                 continue; // try another master key\n-            if (CCryptoKeyStore::Unlock(_vMasterKey))\n+            if (CCryptoKeyStore::Unlock(_vMasterKey, accept_no_keys))\n                 return true;\n         }\n     }"
      },
      {
        "sha": "0f7c7bdfe71634c8ab3c7f6fc6882230915d81f1",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49d2374acf5845c5f760b5fd241482f292164147/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49d2374acf5845c5f760b5fd241482f292164147/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=49d2374acf5845c5f760b5fd241482f292164147",
        "patch": "@@ -887,7 +887,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     //! Holds a timestamp at which point the wallet is scheduled (externally) to be relocked. Caller must arrange for actual relocking to occur via Lock().\n     int64_t nRelockTime = 0;\n \n-    bool Unlock(const SecureString& strWalletPassphrase);\n+    bool Unlock(const SecureString& strWalletPassphrase, bool accept_no_keys = false);\n     bool ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase, const SecureString& strNewWalletPassphrase);\n     bool EncryptWallet(const SecureString& strWalletPassphrase);\n "
      },
      {
        "sha": "30b0c48eef4911b6544960670422379f71facb4a",
        "filename": "src/wallet/wallettool.cpp",
        "status": "added",
        "additions": 139,
        "deletions": 0,
        "changes": 139,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49d2374acf5845c5f760b5fd241482f292164147/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49d2374acf5845c5f760b5fd241482f292164147/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=49d2374acf5845c5f760b5fd241482f292164147",
        "patch": "@@ -0,0 +1,139 @@\n+// Copyright (c) 2016-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <base58.h>\n+#include <fs.h>\n+#include <interfaces/chain.h>\n+#include <util/system.h>\n+#include <wallet/wallet.h>\n+#include <wallet/walletutil.h>\n+\n+namespace WalletTool {\n+\n+// The standard wallet deleter function blocks on the validation interface\n+// queue, which doesn't exist for the bitcoin-wallet. Define our own\n+// deleter here.\n+static void WalletToolReleaseWallet(CWallet* wallet)\n+{\n+    wallet->WalletLogPrintf(\"Releasing wallet\\n\");\n+    wallet->Flush();\n+    delete wallet;\n+}\n+\n+static std::shared_ptr<CWallet> CreateWallet(const std::string& name, const fs::path& path)\n+{\n+    if (fs::exists(path)) {\n+        fprintf(stderr, \"Error: File exists already\\n\");\n+        return nullptr;\n+    }\n+    // dummy chain interface\n+    auto chain = interfaces::MakeChain();\n+    std::shared_ptr<CWallet> wallet_instance(new CWallet(*chain, WalletLocation(name), WalletDatabase::Create(path)), WalletToolReleaseWallet);\n+    bool first_run = true;\n+    DBErrors load_wallet_ret = wallet_instance->LoadWallet(first_run);\n+    if (load_wallet_ret != DBErrors::LOAD_OK) {\n+        fprintf(stderr, \"Error creating %s\", name.c_str());\n+        return nullptr;\n+    }\n+\n+    wallet_instance->SetMinVersion(FEATURE_HD_SPLIT);\n+\n+    // generate a new HD seed\n+    CPubKey seed = wallet_instance->GenerateNewSeed();\n+    wallet_instance->SetHDSeed(seed);\n+\n+    fprintf(stdout, \"Topping up keypool...\\n\");\n+    wallet_instance->TopUpKeyPool();\n+    return wallet_instance;\n+}\n+\n+static std::shared_ptr<CWallet> LoadWallet(const std::string& name, const fs::path& path)\n+{\n+    if (!fs::exists(path)) {\n+        fprintf(stderr, \"Error: Wallet files does not exist\\n\");\n+        return nullptr;\n+    }\n+\n+    // dummy chain interface\n+    auto chain = interfaces::MakeChain();\n+    std::shared_ptr<CWallet> wallet_instance(new CWallet(*chain, WalletLocation(name), WalletDatabase::Create(path)), WalletToolReleaseWallet);\n+    DBErrors load_wallet_ret;\n+    try {\n+        bool first_run;\n+        load_wallet_ret = wallet_instance->LoadWallet(first_run);\n+    } catch (const std::runtime_error) {\n+        fprintf(stderr, \"Error loading %s. Is wallet being used by another process?\\n\", name.c_str());\n+        return nullptr;\n+    }\n+\n+    if (load_wallet_ret != DBErrors::LOAD_OK) {\n+        wallet_instance = nullptr;\n+        if (load_wallet_ret == DBErrors::CORRUPT) {\n+            fprintf(stderr, \"Error loading %s: Wallet corrupted\", name.c_str());\n+            return nullptr;\n+        } else if (load_wallet_ret == DBErrors::NONCRITICAL_ERROR) {\n+            fprintf(stderr, \"Error reading %s! All keys read correctly, but transaction data\"\n+                            \" or address book entries might be missing or incorrect.\",\n+                name.c_str());\n+        } else if (load_wallet_ret == DBErrors::TOO_NEW) {\n+            fprintf(stderr, \"Error loading %s: Wallet requires newer version of %s\",\n+                name.c_str(), PACKAGE_NAME);\n+            return nullptr;\n+        } else if (load_wallet_ret == DBErrors::NEED_REWRITE) {\n+            fprintf(stderr, \"Wallet needed to be rewritten: restart %s to complete\", PACKAGE_NAME);\n+            return nullptr;\n+        } else {\n+            fprintf(stderr, \"Error loading %s\", name.c_str());\n+            return nullptr;\n+        }\n+    }\n+\n+    return wallet_instance;\n+}\n+\n+static void WalletShowInfo(CWallet* wallet_instance)\n+{\n+    // lock required because of some AssertLockHeld()\n+    LOCK(wallet_instance->cs_wallet);\n+\n+    fprintf(stdout, \"Wallet info\\n===========\\n\");\n+    fprintf(stdout, \"Encrypted: %s\\n\", wallet_instance->IsCrypted() ? \"yes\" : \"no\");\n+    fprintf(stdout, \"HD (hd seed available): %s\\n\", wallet_instance->GetHDChain().seed_id.IsNull() ? \"no\" : \"yes\");\n+    fprintf(stdout, \"Keypool Size: %u\\n\", wallet_instance->GetKeyPoolSize());\n+    fprintf(stdout, \"Transactions: %zu\\n\", wallet_instance->mapWallet.size());\n+    fprintf(stdout, \"Address Book: %zu\\n\", wallet_instance->mapAddressBook.size());\n+}\n+\n+bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)\n+{\n+    fs::path path = fs::absolute(name, GetWalletDir());\n+\n+    if (command == \"create\") {\n+        std::shared_ptr<CWallet> wallet_instance = CreateWallet(name, path);\n+        if (wallet_instance) {\n+            WalletShowInfo(wallet_instance.get());\n+            wallet_instance->Flush();\n+        }\n+    } else if (command == \"info\") {\n+        if (!fs::exists(path)) {\n+            fprintf(stderr, \"Error: no wallet file at %s\\n\", name.c_str());\n+            return false;\n+        }\n+        std::string error;\n+        if (!WalletBatch::VerifyEnvironment(path, error)) {\n+            fprintf(stderr, \"Error loading %s. Is wallet being used by other process?\\n\", name.c_str());\n+            return false;\n+        }\n+        std::shared_ptr<CWallet> wallet_instance = LoadWallet(name, path);\n+        if (!wallet_instance) return false;\n+        WalletShowInfo(wallet_instance.get());\n+        wallet_instance->Flush();\n+    } else {\n+        fprintf(stderr, \"Invalid command: %s\\n\", command.c_str());\n+        return false;\n+    }\n+\n+    return true;\n+}\n+} // namespace WalletTool"
      },
      {
        "sha": "5b06fd17929e48358a13da642e6eeb102703f86a",
        "filename": "src/wallet/wallettool.h",
        "status": "added",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49d2374acf5845c5f760b5fd241482f292164147/src/wallet/wallettool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49d2374acf5845c5f760b5fd241482f292164147/src/wallet/wallettool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.h?ref=49d2374acf5845c5f760b5fd241482f292164147",
        "patch": "@@ -0,0 +1,20 @@\n+// Copyright (c) 2016-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_WALLETTOOL_H\n+#define BITCOIN_WALLET_WALLETTOOL_H\n+\n+#include <script/ismine.h>\n+#include <wallet/wallet.h>\n+\n+namespace WalletTool {\n+\n+std::shared_ptr<CWallet> CreateWallet(const std::string& name, const fs::path& path);\n+std::shared_ptr<CWallet> LoadWallet(const std::string& name, const fs::path& path);\n+void WalletShowInfo(CWallet* wallet_instance);\n+bool ExecuteWalletToolFunc(const std::string& command, const std::string& file);\n+\n+} // namespace WalletTool\n+\n+#endif // BITCOIN_WALLET_WALLETTOOL_H"
      }
    ]
  },
  {
    "sha": "3c3e31c3a49c657093cacdff2c1c5e25363902ce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYzNlMzFjM2E0OWM2NTcwOTNjYWNkZmYyYzFjNWUyNTM2MzkwMmNl",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-09-21T00:23:42Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-01-30T21:26:56Z"
      },
      "message": "[tests] Add wallet-tool test\n\nOriginal tests by Jo\u00e3o Barbosa <joao.paulo.barbosa@gmail.com>\n\nAdditional contribution by John Newbery <john@johnnewbery.com>",
      "tree": {
        "sha": "7ef2404f86146305aa7f1d8adb4110b7f2d5e214",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7ef2404f86146305aa7f1d8adb4110b7f2d5e214"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c3e31c3a49c657093cacdff2c1c5e25363902ce",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c3e31c3a49c657093cacdff2c1c5e25363902ce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3c3e31c3a49c657093cacdff2c1c5e25363902ce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c3e31c3a49c657093cacdff2c1c5e25363902ce/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "49d2374acf5845c5f760b5fd241482f292164147",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49d2374acf5845c5f760b5fd241482f292164147",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49d2374acf5845c5f760b5fd241482f292164147"
      }
    ],
    "stats": {
      "total": 105,
      "additions": 104,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6dcaff06964c88df7e98764e0190df1a7e153390",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c3e31c3a49c657093cacdff2c1c5e25363902ce/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c3e31c3a49c657093cacdff2c1c5e25363902ce/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=3c3e31c3a49c657093cacdff2c1c5e25363902ce",
        "patch": "@@ -139,6 +139,7 @@ def main(self):\n \n         config = configparser.ConfigParser()\n         config.read_file(open(self.options.configfile))\n+        self.config = config\n         self.options.bitcoind = os.getenv(\"BITCOIND\", default=config[\"environment\"][\"BUILDDIR\"] + '/src/bitcoind' + config[\"environment\"][\"EXEEXT\"])\n         self.options.bitcoincli = os.getenv(\"BITCOINCLI\", default=config[\"environment\"][\"BUILDDIR\"] + '/src/bitcoin-cli' + config[\"environment\"][\"EXEEXT\"])\n "
      },
      {
        "sha": "5c92370b8573097e8699eac2789c50647c21389a",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c3e31c3a49c657093cacdff2c1c5e25363902ce/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c3e31c3a49c657093cacdff2c1c5e25363902ce/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=3c3e31c3a49c657093cacdff2c1c5e25363902ce",
        "patch": "@@ -108,6 +108,7 @@\n     'interface_bitcoin_cli.py',\n     'mempool_resurrect.py',\n     'wallet_txn_doublespend.py --mineblock',\n+    'tool_wallet.py',\n     'wallet_txn_clone.py',\n     'wallet_txn_clone.py --segwit',\n     'rpc_getchaintips.py',\n@@ -562,7 +563,7 @@ def was_successful(self):\n def check_script_prefixes():\n     \"\"\"Check that test scripts start with one of the allowed name prefixes.\"\"\"\n \n-    good_prefixes_re = re.compile(\"(example|feature|interface|mempool|mining|p2p|rpc|wallet)_\")\n+    good_prefixes_re = re.compile(\"(example|feature|interface|mempool|mining|p2p|rpc|wallet|tool)_\")\n     bad_script_names = [script for script in ALL_SCRIPTS if good_prefixes_re.match(script) is None]\n \n     if bad_script_names:"
      },
      {
        "sha": "fbcf21e72989698835d6b427f55f76be10ff043d",
        "filename": "test/functional/tool_wallet.py",
        "status": "added",
        "additions": 101,
        "deletions": 0,
        "changes": 101,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c3e31c3a49c657093cacdff2c1c5e25363902ce/test/functional/tool_wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c3e31c3a49c657093cacdff2c1c5e25363902ce/test/functional/tool_wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/tool_wallet.py?ref=3c3e31c3a49c657093cacdff2c1c5e25363902ce",
        "patch": "@@ -0,0 +1,101 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test bitcoin-wallet.\"\"\"\n+import subprocess\n+import textwrap\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+class ToolWalletTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def bitcoin_wallet_process(self, *args):\n+        binary = self.config[\"environment\"][\"BUILDDIR\"] + '/src/bitcoin-wallet' + self.config[\"environment\"][\"EXEEXT\"]\n+        args = ['-datadir={}'.format(self.nodes[0].datadir), '-regtest'] + list(args)\n+        return subprocess.Popen([binary] + args, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)\n+\n+    def assert_raises_tool_error(self, error, *args):\n+        p = self.bitcoin_wallet_process(*args)\n+        stdout, stderr = p.communicate()\n+        assert_equal(p.poll(), 1)\n+        assert_equal(stdout, '')\n+        assert_equal(stderr.strip(), error)\n+\n+    def assert_tool_output(self, output, *args):\n+        p = self.bitcoin_wallet_process(*args)\n+        stdout, stderr = p.communicate()\n+        assert_equal(p.poll(), 0)\n+        assert_equal(stderr, '')\n+        assert_equal(stdout, output)\n+\n+    def run_test(self):\n+\n+        self.assert_raises_tool_error('Invalid command: foo', 'foo')\n+        # `bitcoin-wallet help` is an error. Use `bitcoin-wallet -help`\n+        self.assert_raises_tool_error('Invalid command: help', 'help')\n+        self.assert_raises_tool_error('Error: two methods provided (info and create). Only one method should be provided.', 'info', 'create')\n+        self.assert_raises_tool_error('Error parsing command line arguments: Invalid parameter -foo', '-foo')\n+        self.assert_raises_tool_error('Error loading wallet.dat. Is wallet being used by other process?', '-wallet=wallet.dat', 'info')\n+        self.assert_raises_tool_error('Error: no wallet file at nonexistent.dat', '-wallet=nonexistent.dat', 'info')\n+\n+        # stop the node to close the wallet to call info command\n+        self.stop_node(0)\n+\n+        out = textwrap.dedent('''\\\n+            Wallet info\n+            ===========\n+            Encrypted: no\n+            HD (hd seed available): yes\n+            Keypool Size: 2\n+            Transactions: 0\n+            Address Book: 3\n+        ''')\n+        self.assert_tool_output(out, '-wallet=wallet.dat', 'info')\n+\n+        # mutate the wallet to check the info command output changes accordingly\n+        self.start_node(0)\n+        self.nodes[0].generate(1)\n+        self.stop_node(0)\n+\n+        out = textwrap.dedent('''\\\n+            Wallet info\n+            ===========\n+            Encrypted: no\n+            HD (hd seed available): yes\n+            Keypool Size: 2\n+            Transactions: 1\n+            Address Book: 3\n+        ''')\n+        self.assert_tool_output(out, '-wallet=wallet.dat', 'info')\n+\n+        out = textwrap.dedent('''\\\n+            Topping up keypool...\n+            Wallet info\n+            ===========\n+            Encrypted: no\n+            HD (hd seed available): yes\n+            Keypool Size: 2000\n+            Transactions: 0\n+            Address Book: 0\n+        ''')\n+        self.assert_tool_output(out, '-wallet=foo', 'create')\n+\n+        self.start_node(0, ['-wallet=foo'])\n+        out = self.nodes[0].getwalletinfo()\n+        self.stop_node(0)\n+\n+        assert_equal(0, out['txcount'])\n+        assert_equal(1000, out['keypoolsize'])\n+        assert_equal(1000, out['keypoolsize_hd_internal'])\n+        assert_equal(True, 'hdseedid' in out)\n+\n+if __name__ == '__main__':\n+    ToolWalletTest().main()"
      }
    ]
  }
]