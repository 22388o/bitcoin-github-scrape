jnewbery,2018-08-09T16:08:08Z,"This is currently a work in progress. It is a rebase of @jonasschnelli's #8745. Please see that PR for history and context. I've volunteered to maintain this through to merge. Thanks Jonas for your work in writing and maintaining this branch so far!\n\n~It is currently rebased on top of #12490, which removes a circular dependency and allows it to build. Only the _Add wallet inspection and modifi",https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-411811324,411811324,
domob1812,2018-08-09T17:11:47Z,"Concept ACK, looks useful.  Will that tool also support things like creating addresses or dumping privkeys in the future, or ""just"" actual maintenance of the wallet file?  That's something that might be useful for offline systems (although you can of course spin up the daemon with an empty data dir).",https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-411830595,411830595,
DrahtBot,2018-08-09T18:23:39Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#14372](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14372.html) (msvc: build secp256k1 and leveldb locally b",https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-411851645,411851645,
jnewbery,2018-08-10T10:01:23Z,"> Will that tool also support things like creating addresses or dumping privkeys in the future\n\nPotentially, yes. That would be a discussion for a future PR though :)",https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-412037838,412037838,
domob1812,2018-08-10T13:17:21Z,"@jnewbery:  Yes, of course - let's go in steps.  For me, those functions would have been useful from time to time, though, so I'd love to see that added in some follow up.  (And am happy to work on it myself if that helps.)",https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-412079231,412079231,
meshcollider,2018-08-14T13:37:58Z,"Concept ACK, does seem clean and useful to have these as a separate tool.",https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-412874470,412874470,
laanwj,2018-08-22T09:13:11Z,"Thanks for picking this up, I agree an external wallet manipulation/recovery tool is useful",https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-414967066,414967066,
jnewbery,2018-08-22T13:06:25Z,"Thanks all concept ACKers! If you want to help with this PR, please review #12490, since that's a pre-req to get this to build. That PR just removes deprecated code, so it should be an easy review.",https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-415024893,415024893,
jnewbery,2018-09-06T21:24:15Z,"Thanks for the review @practicalswift . I've fixed your review comments and rebased on the latest #12490.\n\n~Since this PR depends on that one, do you mind reviewing that PR?~",https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-419246052,419246052,
jnewbery,2018-09-07T11:37:07Z,"#12490 has been merged. I've rebased on master and removed the [WIP] tag.\n\nThis is ready for review.",https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-419412917,419412917,
jnewbery,2018-09-07T20:43:29Z,Rebased on master and fixed @MarcoFalke's comments.,https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-419560365,419560365,
Sjors,2018-09-08T14:03:09Z,"How does this compare to #10102 (@ryanofsky) which also creates an independent wallet executable that could, with some tweaks, be used offline? Obviously this change is much simpler.",https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-419644207,419644207,
jnewbery,2018-09-10T14:34:15Z,"> How does this compare to #10102\n\nVery different. 10102 is much more ambitious and is a change to the overall architecture of bitcoind. It has dependency on #10973, so I don't expect it to be merged any time soon. It also doesn't currently support running the wallet executable separately as far as I'm aware.\n\nThis is a small, self-contained tool for created, inspecting and updating wallet",https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-419935244,419935244,
jnewbery,2018-09-10T21:17:58Z,"> Are you planning adding tests? In this PR or other?\n\nYes, I plan to add tests to this PR.",https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-420064394,420064394,
jnewbery,2018-09-11T18:46:09Z,Thanks for the review @promag and @practicalswift . All comments addressed in the fixup commit. I'll squash if you're happy with the changes.,https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-420379727,420379727,
jonasschnelli,2018-09-11T19:09:21Z,"Concept ACK\nThanks for picking this up... ",https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-420387619,420387619,
promag,2018-09-11T23:19:17Z,"Segfault with invalid parameter:\n```\nbitcoin-wallet-tool -foo\nError parsing command line arguments: Invalid parameter -foo\n[1]    16474 segmentation fault  ./src/bitcoin-wallet-tool -foo\n```",https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-420458259,420458259,
jnewbery,2018-09-12T14:33:24Z,Thanks @promag . I've fixed the segfault and squashed everything into one commit.,https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-420670947,420670947,
jnewbery,2018-09-13T14:35:11Z,@practicalswift - I've fixed the CWallet leaks in f81d8c8ad4718e2158434bf330962a08d9219b61. Please review - I'll squash if you're happy.,https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-421029603,421029603,
practicalswift,2018-09-13T14:52:15Z,@jnewbery Leaks gone :-),https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-421035690,421035690,
jnewbery,2018-09-13T15:15:19Z,"Addressed https://github.com/bitcoin/bitcoin/pull/13926#discussion_r217413912 , squashed and pushed.",https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-421044022,421044022,
promag,2018-09-19T19:56:25Z,"@jnewbery \n```\n➜  bitcoin git:(wallet_tool) ✗ ./src/bitcoin-wallet-tool -name=/tmp/w1 create\nTopping up keypool...\nWallet info\n===========\nEncrypted: no\nHD (hd seed available): yes\nKeypool Size: 2000\nTransactions: 0\nAddress Book: 0\n➜  bitcoin git:(wallet_tool) ✗ ./src/bitcoin-wallet-tool -name=/tmp/w1 create\nError: File exists already\n➜  bitcoin git:(wallet_tool) ✗ ./src/",https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-422937271,422937271,
MarcoFalke,2018-09-19T20:11:35Z,@promag Would be better to write these up as python tests?,https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-422941848,422941848,
promag,2018-09-19T20:14:31Z,"@MarcoFalke ok, I'll push a commit with the above tests and for the remaining commands.",https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-422942669,422942669,
jnewbery,2018-09-19T21:23:59Z,"@MarcoFalke @promag Thanks for the review. Will address in due course.\n\n> I'll push a commit with the above tests and for the remaining commands.\n\nAwesome. Thanks @promag!\n",https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-422963648,422963648,
ryanofsky,2018-09-20T20:42:42Z,"I think it'd be nice to call the executable `bitcoin-wallet` instead of `bitcoin-wallet-tool`. I seems unusual to give a command an extra suffix like `-tool`, though I guess `bitcoin-cli` also has a similarly descriptive suffix.",https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-423326338,423326338,
jnewbery,2018-09-20T21:28:53Z,"> I think it'd be nice to call the executable bitcoin-wallet instead of bitcoin-wallet-tool\n\nSeems reasonable to me. We already have `bitcoin-tx` and not `bitcoin-tx-tool`. I'll change the name to `bitcoin-wallet`.",https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-423339677,423339677,
promag,2018-09-21T08:33:51Z,"@jnewbery should disallow multiple `-name`, like `-name=/tmp/w1  -name=/tmp/w2 info`?",https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-423457615,423457615,
jnewbery,2018-09-21T14:51:14Z,"> While running\n>\n> [...]\n>\n> This happens:\n>\n> [...]\n\nI now catch the exception in LoadWallet in wallettool.cpp",https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-423559517,423559517,
jnewbery,2018-09-21T14:52:02Z,Rebased on master and fixed all review comments so far.,https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-423559799,423559799,
promag,2018-09-21T22:29:59Z,"nit, add src/bitcoin-wallet to .gitignore.",https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-423687771,423687771,
MarcoFalke,2018-09-25T18:11:33Z,"Mind to cherry-pick the tests from  #14283, so that they can be reviewed in one go with the current code?",https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-424446230,424446230,
promag,2018-09-25T18:45:40Z,@MarcoFalke if the test strategy looks good then I should clean it before.,https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-424457300,424457300,
jonasschnelli,2018-09-27T08:43:39Z,"Tested a bit...\nI think the help should mention that the created wallet is relative to the Bitcoin data dir (from reading the help, I would have expected that the wallet will be created in the current directory).\n\n**I personally would prefer that the tool does not interact with the datadir.** (specify path or expect current dir).\n\nAlso, how can you create a new wallet in the regtest or t",https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-425009333,425009333,
ryanofsky,2018-09-27T11:56:15Z,"> I personally would prefer that the tool does not interact with the datadir. \n\nI think that would be a sensible idea for a low-level wallet debugging tool, but a bad idea for a tool that can replace `bitcoind` and `bitcoin-qt` as a way of accessing wallets. I think the least confusing way for bitcoin-wallet to work is for it to use the same configuration `bitcoind` and `bitcoin-qt` do, and to",https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-425062616,425062616,
jnewbery,2018-09-27T14:21:45Z,Cherry picked the changes from #14283 and #14284 and squashed fixup commits. Thanks to @promag and @ken2812221 !,https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-425111414,425111414,
jonasschnelli,2018-09-27T18:33:16Z,"> I think that would be a sensible idea for a low-level wallet debugging tool, but a bad idea for a tool that can replace bitcoind and bitcoin-qt as a way of accessing wallets.\n\nI'm not sure about this but I can follow your thoughts. I think one can also argue that the wallet-tool is a low-level accessing tool for experts.\n\n> Lets think about an actual use case. If a user who runs bitcoind",https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-425197997,425197997,
ryanofsky,2018-09-27T19:38:21Z,"What you're suggesting sounds good, as long as it doesn't mean (part (a) is vague) that `bitcoin-wallet` should interpret the `-wallet=<path>` option differently from `bitcoind` and `bitcoin-qt`\n\nThe `salvage` and `zaptxs` subcommands are somewhat low level, but I don't think a `dump` command would be so obscure, and I think it would be nice if different various tools understood the same optio",https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-425217486,425217486,
jnewbery,2018-09-27T21:45:17Z,Rebased on master. tool_wallet.py is failing.,https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-425253225,425253225,
Sjors,2018-09-28T11:07:33Z,"What happens if you run this tool on a wallet that's currently opened by `bitcoind`?\n\n`zapwallettxes` is [sometimes](https://www.reddit.com/r/Bitcoin/comments/59h8f4/how_to_delete_unconfirmed_transactions_on_bitcoin/) recommended to deal with stuck transactions. Especially before the GUI had basic RBF support, but might still be useful (though it's a pretty blunt instrument).",https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-425402248,425402248,
jnewbery,2018-10-17T21:07:45Z,"I've updated the tool to treat `-datadir`, `-wallet`, `-regtest` and `-testnet` arguments in the same way that bitcoind treats those arguments. I've also added help text to explain where it looks for wallet files:\n\n```\nwallet-tool is an offline tool for creating and interacting with Bitcoin Core wallet files.\nBy default wallet-tool will act on wallets in the default wallet directory in the",https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-430790208,430790208,
ken2812221,2018-10-17T22:55:22Z,"@jnewbery the filelock on Windows is broken now, so the test would fail. See #14426",https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-430817386,430817386,
jnewbery,2018-10-18T15:38:07Z,"New push:\n\n- Fix the build failure with --disable-wallet\n- skip the test if wallet is not compiled\n- Catch when the wallet file can't be opened earlier\n- rebased on #14426 to try to fix the windows failure\n\nThis PR now depends on #14426 .",https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-431057478,431057478,
jnewbery,2018-10-20T21:51:59Z,rebased,https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-431620814,431620814,
meshcollider,2018-11-12T14:16:42Z,"I think this will be a really useful tool to add more functionality too that isn't really suited to adding to bitcoind itself. Just testing this (have done some light code review, didn't look at the `build_msvc/` files or `configure.ac` & `Makefile.am` changes).  A few early comments:\n\nSome of @ryanofsky's comments mentioned above still need addressing, e.g. that the `-printtoconsole` and `-de",https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-437896810,437896810,
jnewbery,2018-11-12T14:50:30Z,Thanks for testing @MeshCollider. I intend to pick this up again next week and address all feedback.,https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-437908860,437908860,
practicalswift,2018-12-07T08:37:37Z,I'm afraid this PR doesn't compile when rebased on `master` :-),https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-445161171,445161171,
jnewbery,2019-01-11T18:19:28Z,"Rebased on master: https://github.com/bitcoin/bitcoin/compare/ebd8417a6b8fbb1575140f0f04b568f17a47914a..bd8875b50fd2d774cb98263450c0ad150aa374d7\nFixed build issues from rebase: https://github.com/bitcoin/bitcoin/compare/bd8875b50fd2d774cb98263450c0ad150aa374d7..21b4b35a8ecf879ec5909820ab36b3aa29358fe7",https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-453609457,453609457,
jnewbery,2019-01-11T19:59:30Z,"Addressing @MeshCollider's feedback:\n\n> Some of @ryanofsky's comments mentioned above still need addressing, e.g. that the -printtoconsole and -debug args still aren't recognized and error if they are tried to be used. I am slightly worried about the code duplication too but I think its ok.\n\nThese should all be addressed now.\n\n> Calling info or zaptxs on a non-existent wallet should th",https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-453639069,453639069,
jnewbery,2019-01-11T20:00:37Z,"Latest force-push should address all remaining feedback: https://github.com/bitcoin/bitcoin/compare/21b4b35a8ecf879ec5909820ab36b3aa29358fe7..d05ec61f7659466e911ea3ae48aa583c792d8849\n\nThanks everyone for review! Please let me know if I've missed anything.",https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-453639452,453639452,
jnewbery,2019-01-15T16:22:10Z,rebased,https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-454453770,454453770,
Sjors,2019-01-17T13:38:18Z,"I find the following behavior a bit scary:\n\n```sh\n$ src/bitcoin-wallet help zaptxs\nZaptxs successful executed. Please rescan your wallet.\n```\n\nI understand that we don't want to duplicate the `help` in this initial version, but it should probably throw an error.\n\nI'm also confused how `zaptxs` is supposed to work here. In `bitcoind` `-zapwallettxes` takes an argument and actually",https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-455174640,455174640,
ryanofsky,2019-01-17T14:07:48Z,"I think it would be good to merge wallet tool and make a new issue or set of issues to keep track of the usability problems and feature deficits Sjors is bringing up.\n\nI don't think we should be trying to perfect this tool in a single github PR. I think it would be better to merge it, mark it as experimental, and continue to develop it in git. This would make any proposed changes easier to und",https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-455183742,455183742,
ryanofsky,2019-01-17T14:19:18Z,"> The wallet creation command doesn't take arguments (like watch-only). I suppose that's fine for this initial version.\n\nOne idea for this might be to remove most functionality from the wallet tool, and just allow it to fill `JSONRPCRequest` objects and call the limited subset of RPC methods that work offline. This would also let it share named/positional argument parsing code with bitcoin-cli",https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-455187379,455187379,
Sjors,2019-01-17T14:30:43Z,"Either marking as experimental or reducing feature set works for me, though I think the latter is a safer approach.",https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-455191268,455191268,
jnewbery,2019-01-17T15:33:24Z,"Thanks for the input @Sjors and @ryanofsky .\n\n> I find the following behavior a bit scary:\n> ...\n\nGood catch! I've added that as an error condition (with test) in https://github.com/bitcoin/bitcoin/pull/13926/commits/c904860a24aade9a59f9948eb5e8e3da80a7b12f\n\n> I don't think we should be trying to perfect this tool in a single github PR\n\nYes. Good point. I've removed the `salvage`",https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-455214480,455214480,
jnewbery,2019-01-17T15:35:15Z,Squashed fixup commits: https://github.com/bitcoin/bitcoin/compare/3519b2f0fb0f8fa22a788471d32917cefad61d82..a92b6085ea1c371bde447d96f22f6f17d3357348,https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-455215163,455215163,
jgarzik,2019-01-17T15:39:56Z,"@ryanofsky 's suggestion matches the original intent when the new tools (e.g. `bitcoin-tx`) were introduced, and plans were made for others (`bitcoin-script`, `bitcoin-key`, and `bitcoin-wallet`):\n\n* Start small.\n* Get it in-tree.\n* Discuss and grow from there.\n\nOnce of Linus's favorite wisdoms was that the Internet is the best test lab in the world, and your goal should be to accelera",https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-455216862,455216862,
Sjors,2019-01-17T15:50:11Z,"One more thing: `src/bitcoin-wallet` needs to be added to `.gitignore`.\n\nOtherwise tACK a92b608",https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-455221385,455221385,
jnewbery,2019-01-17T15:54:41Z,"> src/bitcoin-wallet needs to be added to .gitignore.\n\nDone: https://github.com/bitcoin/bitcoin/compare/a92b6085ea1c371bde447d96f22f6f17d3357348..2aeac46d17dc74d488494c77b9d1852faeb7dc16",https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-455223365,455223365,
Sjors,2019-01-17T16:01:34Z,re-tACK 2aeac46,https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-455226152,455226152,
jnewbery,2019-01-30T21:27:38Z,Fixed @MarcoFalke comment https://github.com/bitcoin/bitcoin/pull/13926#discussion_r252014014: https://github.com/bitcoin/bitcoin/compare/2aeac46d17dc74d488494c77b9d1852faeb7dc16..3c3e31c3a49c657093cacdff2c1c5e25363902ce,https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-459116000,459116000,
MarcoFalke,2019-01-30T21:33:03Z,"Concept ACK. Going to test and merge this this week. Should be safe, since the only methods are `info` and `create`",https://github.com/bitcoin/bitcoin/pull/13926#issuecomment-459117766,459117766,
practicalswift,2018-09-05T07:09:16Z,Unused variable :-),https://github.com/bitcoin/bitcoin/pull/13926#discussion_r215156875,215156875,src/bitcoin-wallet-tool.cpp
practicalswift,2018-09-05T07:10:13Z,`name` should be passed by const reference?,https://github.com/bitcoin/bitcoin/pull/13926#discussion_r215157057,215157057,src/wallet/wallettool.h
practicalswift,2018-09-05T07:10:19Z,`name` should be passed by const reference?,https://github.com/bitcoin/bitcoin/pull/13926#discussion_r215157078,215157078,src/wallet/wallettool.h
jnewbery,2018-09-06T21:23:23Z,removed,https://github.com/bitcoin/bitcoin/pull/13926#discussion_r215783243,215783243,src/bitcoin-wallet-tool.cpp
jnewbery,2018-09-06T21:23:28Z,updated,https://github.com/bitcoin/bitcoin/pull/13926#discussion_r215783266,215783266,src/wallet/wallettool.h
jnewbery,2018-09-06T21:23:33Z,updated,https://github.com/bitcoin/bitcoin/pull/13926#discussion_r215783290,215783290,src/wallet/wallettool.h
MarcoFalke,2018-09-07T12:34:41Z,"nit: replace `Bitcoin` with `""PACKAGE_NAME ""`, since it doesn't work on other Bitcoin wallets.",https://github.com/bitcoin/bitcoin/pull/13926#discussion_r215943663,215943663,src/bitcoin-wallet-tool-res.rc
MarcoFalke,2018-09-07T12:38:30Z,nit: This indentation is misleading. Should probably use the clang-format-diff script to fix all of these.,https://github.com/bitcoin/bitcoin/pull/13926#discussion_r215944535,215944535,src/bitcoin-wallet-tool.cpp
jnewbery,2018-09-07T20:42:53Z,agree. Changed,https://github.com/bitcoin/bitcoin/pull/13926#discussion_r216081898,216081898,src/bitcoin-wallet-tool-res.rc
jnewbery,2018-09-07T20:43:12Z,Thanks. I've used clang-format-diff to fix these.,https://github.com/bitcoin/bitcoin/pull/13926#discussion_r216081973,216081973,src/bitcoin-wallet-tool.cpp
promag,2018-09-10T14:36:49Z,"nit, 2018 — 2 more below.",https://github.com/bitcoin/bitcoin/pull/13926#discussion_r216346058,216346058,src/bitcoin-wallet-tool.cpp
promag,2018-09-10T20:59:53Z,return false?,https://github.com/bitcoin/bitcoin/pull/13926#discussion_r216471081,216471081,src/wallet/wallettool.cpp
practicalswift,2018-09-11T07:31:31Z,"```\nbitcoin-wallet-tool.cpp:46:29: warning: variable 'usage' is uninitialized when used within its own initialization [-Wuninitialized]\n                            usage += ""\n"" + _(""Usage:"") + ""\n"" +\n                            ^~~~~\n```\n\nShould be `;` instead of ` +` at the end of the line?",https://github.com/bitcoin/bitcoin/pull/13926#discussion_r216570351,216570351,src/bitcoin-wallet-tool.cpp
practicalswift,2018-09-11T07:32:09Z,"```\nbitcoin-wallet-tool.cpp:102:5: warning: bool literal returned from 'main' [-Wmain]\n    return true;\n    ^      ~~~~\n```",https://github.com/bitcoin/bitcoin/pull/13926#discussion_r216570493,216570493,src/bitcoin-wallet-tool.cpp
practicalswift,2018-09-11T07:32:54Z,"```\nsrc/wallet/wallettool.cpp:17:16: warning: use nullptr [modernize-use-nullptr]\n```\n\nPlease replace `NULL` with `nullptr` throughout :-)",https://github.com/bitcoin/bitcoin/pull/13926#discussion_r216570657,216570657,src/wallet/wallettool.cpp
practicalswift,2018-09-11T07:35:27Z,Why the cast?,https://github.com/bitcoin/bitcoin/pull/13926#discussion_r216571282,216571282,src/wallet/wallettool.cpp
jnewbery,2018-09-11T18:46:25Z,done,https://github.com/bitcoin/bitcoin/pull/13926#discussion_r216779616,216779616,src/wallet/wallettool.cpp
practicalswift,2018-09-12T20:21:46Z,`wallet_instance` leaks?,https://github.com/bitcoin/bitcoin/pull/13926#discussion_r217175217,217175217,src/wallet/wallettool.cpp
practicalswift,2018-09-12T20:21:58Z,`wallet_instance` leaks?,https://github.com/bitcoin/bitcoin/pull/13926#discussion_r217175271,217175271,src/wallet/wallettool.cpp
MarcoFalke,2018-09-13T14:49:39Z,"No need to attempt to link `SSL_LIBS`. If the tool wanted to upload the private keys, might as well do it without TLS",https://github.com/bitcoin/bitcoin/pull/13926#discussion_r217413912,217413912,src/Makefile.am
MarcoFalke,2018-09-13T14:50:14Z,Probably the same for `$(MINIUPNPC_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS) $(ZMQ_LIBS)`?,https://github.com/bitcoin/bitcoin/pull/13926#discussion_r217414140,217414140,src/Makefile.am
jnewbery,2018-09-13T15:15:03Z,Thanks Marco. Fixed.,https://github.com/bitcoin/bitcoin/pull/13926#discussion_r217424343,217424343,src/Makefile.am
promag,2018-09-19T19:59:25Z,"nit, s/method/command?",https://github.com/bitcoin/bitcoin/pull/13926#discussion_r218943652,218943652,src/wallet/wallettool.cpp
promag,2018-09-19T19:59:55Z,"nit\n```cpp\nfprintf(stderr, ""Invalid command: %s\n"", method.c_str());\n```",https://github.com/bitcoin/bitcoin/pull/13926#discussion_r218943852,218943852,src/wallet/wallettool.cpp
promag,2018-09-19T20:03:34Z,These could return `std::unique_ptr`?,https://github.com/bitcoin/bitcoin/pull/13926#discussion_r218944806,218944806,src/wallet/wallettool.cpp
promag,2018-09-19T20:04:10Z,"nit, `bool ExecuteWalletToolFunc...`.",https://github.com/bitcoin/bitcoin/pull/13926#discussion_r218945014,218945014,src/wallet/wallettool.h
MarcoFalke,2018-09-19T20:08:37Z,"Could also remove these:\n\n```diff\ndiff --git a/src/Makefile.am b/src/Makefile.am\nindex 41cd066fa0..fc398a5fd9 100644\n--- a/src/Makefile.am\n+++ b/src/Makefile.am\n@@ -539,8 +539,6 @@ bitcoin_wallet_tool_LDADD = \\n   $(LIBBITCOIN_CONSENSUS) \\n   $(LIBBITCOIN_UTIL) \\n   $(LIBBITCOIN_CRYPTO) \\n-  $(LIBUNIVALUE) \\n-  $(LIBBITCOIN_ZMQ) \\n   $(LIBLEVELDB) \\n   $(LIBLEVELDB_SSE4",https://github.com/bitcoin/bitcoin/pull/13926#discussion_r218946278,218946278,src/Makefile.am
MarcoFalke,2018-09-19T20:10:56Z,Might need `$(MINIUPNPC_LIBS)` to pass travis? ,https://github.com/bitcoin/bitcoin/pull/13926#discussion_r218947017,218947017,src/Makefile.am
jnewbery,2018-09-21T13:59:31Z,changed,https://github.com/bitcoin/bitcoin/pull/13926#discussion_r219507273,219507273,src/wallet/wallettool.cpp
jnewbery,2018-09-21T14:00:41Z,yep. Better,https://github.com/bitcoin/bitcoin/pull/13926#discussion_r219507674,219507674,src/wallet/wallettool.cpp
jnewbery,2018-09-21T14:00:48Z,Indeed. Fixed,https://github.com/bitcoin/bitcoin/pull/13926#discussion_r219507722,219507722,src/wallet/wallettool.cpp
jnewbery,2018-09-21T14:01:54Z,fixed,https://github.com/bitcoin/bitcoin/pull/13926#discussion_r219508097,219508097,src/wallet/wallettool.h
jnewbery,2018-09-21T14:02:41Z,removed,https://github.com/bitcoin/bitcoin/pull/13926#discussion_r219508374,219508374,src/Makefile.am
jnewbery,2018-09-21T14:02:45Z,added,https://github.com/bitcoin/bitcoin/pull/13926#discussion_r219508407,219508407,src/Makefile.am
jnewbery,2018-09-21T14:29:52Z,"Actually, I'll keep these as shared",https://github.com/bitcoin/bitcoin/pull/13926#discussion_r219517501,219517501,src/wallet/wallettool.cpp
promag,2018-09-21T14:33:30Z,Why?,https://github.com/bitcoin/bitcoin/pull/13926#discussion_r219518749,219518749,src/wallet/wallettool.cpp
ryanofsky,2018-09-21T15:42:44Z,I think `bitcoin-wallet` should take the exact same `-walletdir=<dir>` and `-wallet=<path>` options as `bitcoind` and `bitcoin-gui`. I don't think there are benefits to giving this tool a new way of locating and referring to wallets. It just seems inconsistent and confusing.,https://github.com/bitcoin/bitcoin/pull/13926#discussion_r219541838,219541838,src/bitcoin-wallet.cpp
ryanofsky,2018-09-21T15:45:04Z,I think you might need to add these arguments to SetupWalletToolArgs to prevent them from being rejected.,https://github.com/bitcoin/bitcoin/pull/13926#discussion_r219542572,219542572,src/bitcoin-wallet.cpp
ryanofsky,2018-09-21T15:48:45Z,"This seem to be catching and printing same exception that the caller already catches and prints. I think it'd make sense to drop this catch and just let the caller handle the error, unless this is adding going to add extra information or do something useful.",https://github.com/bitcoin/bitcoin/pull/13926#discussion_r219543868,219543868,src/bitcoin-wallet.cpp
ryanofsky,2018-09-21T15:55:04Z,"Would probably make sense to pass this vector to ExecuteWalletToolFunc, instead of constructing it and throwing away.",https://github.com/bitcoin/bitcoin/pull/13926#discussion_r219545741,219545741,src/bitcoin-wallet.cpp
ryanofsky,2018-09-21T15:59:50Z,Isn't this duplicating a bunch of code already in bitcoind? It seems fragile for bitcoind and bitcoin-wallet to have different code for loading and locating wallets and handling errors.,https://github.com/bitcoin/bitcoin/pull/13926#discussion_r219547220,219547220,src/wallet/wallettool.cpp
Sjors,2018-09-25T12:42:56Z,nit: bitcoin-wallet,https://github.com/bitcoin/bitcoin/pull/13926#discussion_r220175413,220175413,src/Makefile.am
Sjors,2018-09-25T12:51:53Z,"There is no `-walletdir` command for this tool afaik, though that would be useful (no rush).\n\n`-wallet` indeed seems better than `-name`, especially if we ever decide to give wallets names. However for this tool I have a light preference for making it a positional argument, e.g. `./bitcoin-wallet create blah` seems more intuitive to me than `./bitcoin-wallet -wallet=blah create`.",https://github.com/bitcoin/bitcoin/pull/13926#discussion_r220178473,220178473,src/bitcoin-wallet.cpp
promag,2018-09-25T17:00:26Z,"Also have mixed feeling here. IMO it should be consistent with `bitcoind` to begin with. For instance, with `psql` (postgres client) you can set the database in multiple ways: env var, `-d` option or positional argument.",https://github.com/bitcoin/bitcoin/pull/13926#discussion_r220274631,220274631,src/bitcoin-wallet.cpp
ken2812221,2018-09-27T14:57:11Z,Add this file into test_runner.py script list?,https://github.com/bitcoin/bitcoin/pull/13926#discussion_r220958310,220958310,test/functional/tool_wallet.py
promag,2018-09-28T11:26:37Z,"> What happens if you run this tool on a wallet that's currently opened by bitcoind?\n\n@Sjors FYI",https://github.com/bitcoin/bitcoin/pull/13926#discussion_r221222197,221222197,test/functional/tool_wallet.py
practicalswift,2018-10-01T20:54:23Z,nit: Should have a space between `//` and comment.,https://github.com/bitcoin/bitcoin/pull/13926#discussion_r221753323,221753323,src/wallet/wallettool.cpp
ken2812221,2018-10-08T05:10:20Z,Could you follow #13883 to add a Windows argument handler here?,https://github.com/bitcoin/bitcoin/pull/13926#discussion_r223248975,223248975,src/bitcoin-wallet.cpp
practicalswift,2018-10-16T20:25:43Z,"Should be ""bitcoin-wallet-tool""? :-)",https://github.com/bitcoin/bitcoin/pull/13926#discussion_r225695497,225695497,test/functional/tool_wallet.py
jnewbery,2018-10-17T19:40:35Z,done,https://github.com/bitcoin/bitcoin/pull/13926#discussion_r226068513,226068513,test/functional/tool_wallet.py
jnewbery,2018-10-17T19:44:15Z,fixed,https://github.com/bitcoin/bitcoin/pull/13926#discussion_r226069593,226069593,src/wallet/wallettool.cpp
jnewbery,2018-10-17T19:44:24Z,fixed,https://github.com/bitcoin/bitcoin/pull/13926#discussion_r226069635,226069635,test/functional/tool_wallet.py
jnewbery,2018-10-17T19:46:55Z,done,https://github.com/bitcoin/bitcoin/pull/13926#discussion_r226070318,226070318,src/bitcoin-wallet.cpp
jnewbery,2018-10-17T21:05:09Z,"This is now fixed, and the test case has been added to `tool_wallet.py`",https://github.com/bitcoin/bitcoin/pull/13926#discussion_r226094452,226094452,test/functional/tool_wallet.py
Sjors,2018-10-23T07:03:10Z,Nag nit (though don't bother if there's no other changes needed),https://github.com/bitcoin/bitcoin/pull/13926#discussion_r227249444,227249444,src/Makefile.am
Sjors,2018-10-23T07:36:50Z,"Nit: ""the datadir for mainnet"" (since `testnet=1` in `bitcoin.conf` is ignored)",https://github.com/bitcoin/bitcoin/pull/13926#discussion_r227259780,227259780,src/bitcoin-wallet.cpp
MarcoFalke,2018-11-07T21:37:01Z,"I think you no longer link against libevent, so this could be removed?",https://github.com/bitcoin/bitcoin/pull/13926#discussion_r231685847,231685847,configure.ac
practicalswift,2018-11-09T08:39:25Z,Reduce scope of `first_run` :-),https://github.com/bitcoin/bitcoin/pull/13926#discussion_r232175138,232175138,src/wallet/wallettool.cpp
meshcollider,2018-11-12T14:19:34Z,"nit: ""another process""",https://github.com/bitcoin/bitcoin/pull/13926#discussion_r232673767,232673767,src/wallet/wallettool.cpp
practicalswift,2019-01-07T14:38:44Z,Could use variable name `errorMessage` instead to avoid shadowing `error` from `src/util/system.h`?,https://github.com/bitcoin/bitcoin/pull/13926#discussion_r245673729,245673729,src/bitcoin-wallet.cpp
jnewbery,2019-01-11T18:25:51Z,done,https://github.com/bitcoin/bitcoin/pull/13926#discussion_r247211175,247211175,src/bitcoin-wallet.cpp
jnewbery,2019-01-11T18:26:51Z,fixed,https://github.com/bitcoin/bitcoin/pull/13926#discussion_r247211443,247211443,src/bitcoin-wallet.cpp
jnewbery,2019-01-11T18:53:52Z,fixed!,https://github.com/bitcoin/bitcoin/pull/13926#discussion_r247219099,247219099,src/Makefile.am
jnewbery,2019-01-11T19:30:17Z,Yes. I agree that this could be refactored to remove duplicate code. Can we save that for a follow-up PR?,https://github.com/bitcoin/bitcoin/pull/13926#discussion_r247230103,247230103,src/wallet/wallettool.cpp
jnewbery,2019-01-11T19:30:31Z,Changed to not construct a vector at all.,https://github.com/bitcoin/bitcoin/pull/13926#discussion_r247230168,247230168,src/bitcoin-wallet.cpp
jnewbery,2019-01-11T19:33:33Z,fixed,https://github.com/bitcoin/bitcoin/pull/13926#discussion_r247231071,247231071,src/bitcoin-wallet.cpp
jnewbery,2019-01-11T19:36:18Z,fixed :),https://github.com/bitcoin/bitcoin/pull/13926#discussion_r247231873,247231873,src/wallet/wallettool.cpp
jnewbery,2019-01-11T19:36:25Z,removed,https://github.com/bitcoin/bitcoin/pull/13926#discussion_r247231906,247231906,configure.ac
jnewbery,2019-01-11T19:36:51Z,fixed,https://github.com/bitcoin/bitcoin/pull/13926#discussion_r247232040,247232040,src/wallet/wallettool.cpp
jnewbery,2019-01-11T19:58:47Z,fixed,https://github.com/bitcoin/bitcoin/pull/13926#discussion_r247237192,247237192,src/bitcoin-wallet.cpp
MarcoFalke,2019-01-29T20:57:34Z,"This is not defined behavior, since EXIT_FAILURE has no defined type nor value, but you need a bool(false). c.f. https://en.cppreference.com/w/c/program/EXIT_status\n\n",https://github.com/bitcoin/bitcoin/pull/13926#discussion_r252014014,252014014,src/bitcoin-wallet.cpp
jnewbery,2019-01-29T21:42:19Z,I don't understand this. There are plenty of other locations where `return EXIT_FAILURE` is used (and even a couple of PRs where `return false` has been changed to `return EXIT_FAILURE` - #9067 and #13349),https://github.com/bitcoin/bitcoin/pull/13926#discussion_r252029560,252029560,src/bitcoin-wallet.cpp
MarcoFalke,2019-01-29T22:57:39Z,"We are not in `main` here, which has a return type `int`. The function signature here is `static bool WalletAppInit`, so the return type is `bool`. Commonly `EXIT_FAILURE` is `1`, so `bool(1) == true`, which is off-by-one.\n\nYou can also test this trivially by providing a datadir that does not exist. It will print an error, but continue and print garbage.",https://github.com/bitcoin/bitcoin/pull/13926#discussion_r252053490,252053490,src/bitcoin-wallet.cpp
jnewbery,2019-01-29T23:08:04Z,Duh. Thanks! I only looked at the github snippet. Will fix.,https://github.com/bitcoin/bitcoin/pull/13926#discussion_r252056325,252056325,src/bitcoin-wallet.cpp
jnewbery,2019-01-30T21:27:13Z,fixed,https://github.com/bitcoin/bitcoin/pull/13926#discussion_r252444486,252444486,src/bitcoin-wallet.cpp
MarcoFalke,2019-02-06T18:25:12Z,question: The `Flush()` calls in this file accept a bool that should be set to true on shutdown?,https://github.com/bitcoin/bitcoin/pull/13926#discussion_r254392476,254392476,src/wallet/wallettool.cpp
jnewbery,2019-02-12T17:57:35Z,"Yes, you're right. This got missed out when rebasing on a commit that changed the function signature for `Wallet::Flush()`.\n\n~I think the same is true for~ https://github.com/bitcoin/bitcoin/blob/d8794a78a887a920276c7124f1c46d69592c6c4e/src/wallet/wallet.cpp#L96\n\nEDIT: ignore point about wallet.cpp above\n\nFixed: #15390",https://github.com/bitcoin/bitcoin/pull/13926#discussion_r256075002,256075002,src/wallet/wallettool.cpp
